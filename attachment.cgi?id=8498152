# HG changeset patch
# Parent 7014457b82a1a7425eaf0d349cd9dde258ac60bd
# User Michael Ratcliffe <mratcliffe@mozilla.com>
# Date 1412170660 -3600

Bug 1052736 - Show bubbles for event listeners added to documentElement r=bgrins

diff --git a/browser/devtools/markupview/test/browser_markupview_events.js b/browser/devtools/markupview/test/browser_markupview_events.js
--- a/browser/devtools/markupview/test/browser_markupview_events.js
+++ b/browser/devtools/markupview/test/browser_markupview_events.js
@@ -18,25 +18,47 @@ const TEST_DATA = [
       {
         type: "load",
         filename: TEST_URL,
         attributes: [
           "Bubbling",
           "DOM0"
         ],
         handler: "init();"
+      },
+      {
+        type: "click",
+        filename: TEST_URL + ":50",
+        attributes: [
+          "Bubbling",
+          "DOM2"
+        ],
+        handler: 'function(foo2, bar2) {\n' +
+                 '  alert("documentElement event listener clicked");\n' +
+                 '}'
+      },
+      {
+        type: "click",
+        filename: TEST_URL + ":46",
+        attributes: [
+          "Bubbling",
+          "DOM2"
+        ],
+        handler: 'function(foo, bar) {\n' +
+                 '  alert("document event listener clicked");\n' +
+                 '}'
       }
     ]
   },
   {
     selector: "#container",
     expected: [
       {
         type: "mouseover",
-        filename: TEST_URL + ":62",
+        filename: TEST_URL + ":70",
         attributes: [
           "Capturing",
           "DOM2"
         ],
         handler: 'function mouseoverHandler(event) {\n' +
                  '  if (event.target.id !== "container") {\n' +
                  '    let output = document.getElementById("output");\n' +
                  '    output.textContent = event.target.textContent;\n' +
@@ -45,29 +67,29 @@ const TEST_DATA = [
       }
     ]
   },
   {
     selector: "#multiple",
     expected: [
       {
         type: "click",
-        filename: TEST_URL + ":69",
+        filename: TEST_URL + ":77",
         attributes: [
           "Bubbling",
           "DOM2"
         ],
         handler: 'function clickHandler(event) {\n' +
                  '  let output = document.getElementById("output");\n' +
                  '  output.textContent = "click";\n' +
                  '}'
       },
       {
         type: "mouseup",
-        filename: TEST_URL + ":78",
+        filename: TEST_URL + ":86",
         attributes: [
           "Bubbling",
           "DOM2"
         ],
         handler: 'function mouseupHandler(event) {\n' +
                  '  let output = document.getElementById("output");\n' +
                  '  output.textContent = "mouseup";\n' +
                  '}'
@@ -88,65 +110,65 @@ const TEST_DATA = [
       }
     ]
   },
   {
     selector: "#handleevent",
     expected: [
       {
         type: "click",
-        filename: TEST_URL + ":89",
+        filename: TEST_URL + ":97",
         attributes: [
           "Bubbling",
           "DOM2"
         ],
         handler: 'handleEvent: function(blah) {\n' +
                  '  alert("handleEvent clicked");\n' +
                  '}'
       }
     ]
   },
   {
     selector: "#fatarrow",
     expected: [
       {
         type: "click",
-        filename: TEST_URL + ":57",
+        filename: TEST_URL + ":65",
         attributes: [
           "Bubbling",
           "DOM2"
         ],
         handler: 'event => {\n' +
                  '  alert("Yay for the fat arrow!");\n' +
                  '}'
       }
     ]
   },
   {
     selector: "#boundhe",
     expected: [
       {
         type: "click",
-        filename: TEST_URL + ":101",
+        filename: TEST_URL + ":109",
         attributes: [
           "Bubbling",
           "DOM2"
         ],
         handler: 'handleEvent: function() {\n' +
                  '  alert("boundHandleEvent clicked");\n' +
                  '}'
       }
     ]
   },
   {
     selector: "#bound",
     expected: [
       {
         type: "click",
-        filename: TEST_URL + ":74",
+        filename: TEST_URL + ":82",
         attributes: [
           "Bubbling",
           "DOM2"
         ],
         handler: 'function boundClickHandler(event) {\n' +
                  '  alert("Bound event clicked");\n' +
                  '}'
       }
diff --git a/browser/devtools/markupview/test/browser_markupview_events_jquery_1.0.js b/browser/devtools/markupview/test/browser_markupview_events_jquery_1.0.js
--- a/browser/devtools/markupview/test/browser_markupview_events_jquery_1.0.js
+++ b/browser/devtools/markupview/test/browser_markupview_events_jquery_1.0.js
@@ -126,16 +126,42 @@ const TEST_DATA = [
                  "      event.preventDefault();\n" +
                  "      event.stopPropagation();\n" +
                  "      returnValue = false;\n" +
                  "    }\n" +
                  "  }\n" +
                  "\n" +
                  "  return returnValue;\n" +
                  "}"
+      },
+      {
+        type: "DOMContentLoaded",
+        filename: TEST_URL_ROOT + TEST_LIB + ":1117",
+        attributes: [
+          "Bubbling",
+          "DOM2"
+        ],
+        handler: "// Handle when the DOM is ready\n" +
+                 "ready: function() {\n" +
+                 "  // Make sure that the DOM is not already loaded\n" +
+                 "  if (!jQuery.isReady) {\n" +
+                 "    // Remember that the DOM is ready\n" +
+                 "    jQuery.isReady = true;\n" +
+                 "\n" +
+                 "    // If there are functions bound, to execute\n" +
+                 "    if (jQuery.readyList) {\n" +
+                 "      // Execute all of them\n" +
+                 "      for (var i = 0; i < jQuery.readyList.length; i++)\n" +
+                 "        jQuery.readyList[i].apply(document);\n" +
+                 "\n" +
+                 "      // Reset the list of functions\n" +
+                 "      jQuery.readyList = null;\n" +
+                 "    }\n" +
+                 "  }\n" +
+                 "}"
       }
     ]
   },
   {
     selector: "#testdiv",
     expected: [
       {
         type: "click",
diff --git a/browser/devtools/markupview/test/browser_markupview_events_jquery_1.3.js b/browser/devtools/markupview/test/browser_markupview_events_jquery_1.3.js
--- a/browser/devtools/markupview/test/browser_markupview_events_jquery_1.3.js
+++ b/browser/devtools/markupview/test/browser_markupview_events_jquery_1.3.js
@@ -103,35 +103,103 @@ const TEST_DATA = [
                  "\n" +
                  "  var div = $(\"div\")[0];\n" +
                  "  $(div).click(handler7);\n" +
                  "  $(div).click(handler8);\n" +
                  "  $(div).keydown(handler9);\n" +
                  "}"
       },
       {
-        type: "unload",
+        type: "dblclick",
+        filename: TEST_URL_ROOT + TEST_LIB + ":19",
+        attributes: [
+          "jQuery"
+        ],
+        handler: "function c(G) {\n" +
+                 "  var D = RegExp(\"(^|\\\\.)\" + G.type + \"(\\\\.|$)\"),\n" +
+                 "    F = true,\n" +
+                 "    E = [];\n" +
+                 "  n.each(n.data(this, \"events\").live || [], function(H, I) {\n" +
+                 "    if (D.test(I.type)) {\n" +
+                 "      var J = n(G.target).closest(I.data)[0];\n" +
+                 "      if (J) {\n" +
+                 "        E.push({\n" +
+                 "          elem: J,\n" +
+                 "          fn: I\n" +
+                 "        })\n" +
+                 "      }\n" +
+                 "    }\n" +
+                 "  });\n" +
+                 "  n.each(E, function() {\n" +
+                 "    if (!G.isImmediatePropagationStopped() && this.fn.call(this.elem, G, this.fn.data) === false) {\n" +
+                 "      F = false\n" +
+                 "    }\n" +
+                 "  });\n" +
+                 "  return F\n" +
+                 "}"
+      },
+      {
+        type: "live",
+        filename: TEST_URL_ROOT + TEST_LIB + ":19",
+        attributes: [
+          "jQuery"
+        ],
+        handler: "D = D || function() {\n" +
+                 "  return E.apply(this, arguments)\n" +
+                 "}"
+      },
+      {
+        type: "live",
+        filename: TEST_URL_ROOT + TEST_LIB + ":19",
+        attributes: [
+          "jQuery"
+        ],
+        handler: "D = D || function() {\n" +
+                 "  return E.apply(this, arguments)\n" +
+                 "}"
+      },
+      {
+        type: "dragstart",
+        filename: TEST_URL_ROOT + TEST_LIB + ":19",
+        attributes: [
+          "jQuery"
+        ],
+        handler: "function c(G) {\n" +
+                 "  var D = RegExp(\"(^|\\\\.)\" + G.type + \"(\\\\.|$)\"),\n" +
+                 "    F = true,\n" +
+                 "    E = [];\n" +
+                 "  n.each(n.data(this, \"events\").live || [], function(H, I) {\n" +
+                 "    if (D.test(I.type)) {\n" +
+                 "      var J = n(G.target).closest(I.data)[0];\n" +
+                 "      if (J) {\n" +
+                 "        E.push({\n" +
+                 "          elem: J,\n" +
+                 "          fn: I\n" +
+                 "        })\n" +
+                 "      }\n" +
+                 "    }\n" +
+                 "  });\n" +
+                 "  n.each(E, function() {\n" +
+                 "    if (!G.isImmediatePropagationStopped() && this.fn.call(this.elem, G, this.fn.data) === false) {\n" +
+                 "      F = false\n" +
+                 "    }\n" +
+                 "  });\n" +
+                 "  return F\n" +
+                 "}"
+      },
+      {
+        type: "DOMContentLoaded",
         filename: TEST_URL_ROOT + TEST_LIB + ":19",
         attributes: [
           "Bubbling",
           "DOM2"
         ],
         handler: "function() {\n" +
-                 "  return typeof n !== \"undefined\" && !n.event.triggered ? n.event.handle.apply(arguments.callee.elem, arguments) : g\n" +
-                 "}"
-      },
-      {
-        type: "load",
-        filename: TEST_URL_ROOT + TEST_LIB + ":19",
-        attributes: [
-          "Bubbling",
-          "DOM2"
-        ],
-        handler: "function() {\n" +
-                 "  return typeof n !== \"undefined\" && !n.event.triggered ? n.event.handle.apply(arguments.callee.elem, arguments) : g\n" +
+                 "  document.removeEventListener(\"DOMContentLoaded\", arguments.callee, false);\n" +
+                 "  n.ready()\n" +
                  "}"
       }
     ]
   },
   {
     selector: "#testdiv",
     expected: [
       {
diff --git a/browser/devtools/markupview/test/browser_markupview_events_jquery_1.4.js b/browser/devtools/markupview/test/browser_markupview_events_jquery_1.4.js
--- a/browser/devtools/markupview/test/browser_markupview_events_jquery_1.4.js
+++ b/browser/devtools/markupview/test/browser_markupview_events_jquery_1.4.js
@@ -90,16 +90,48 @@ const TEST_DATA = [
                  "    c.isReady = true;\n" +
                  "    if (Q) {\n" +
                  "      for (var a, b = 0; a = Q[b++];) a.call(s, c);\n" +
                  "      Q = null\n" +
                  "    }\n" +
                  "    c.fn.triggerHandler && c(s).triggerHandler(\"ready\")\n" +
                  "  }\n" +
                  "}"
+      },
+      {
+        type: "dblclick",
+        filename: TEST_URL_ROOT + TEST_LIB + ":31",
+        attributes: [
+          "jQuery"
+        ],
+        handler: "b && a) b = function() {\n" +
+                 "  return a.apply(d || this, arguments)\n" +
+                 "}"
+      },
+      {
+        type: "dragstart",
+        filename: TEST_URL_ROOT + TEST_LIB + ":31",
+        attributes: [
+          "jQuery"
+        ],
+        handler: "b && a) b = function() {\n" +
+                 "  return a.apply(d || this, arguments)\n" +
+                 "}"
+      },
+      {
+        type: "DOMContentLoaded",
+        filename: TEST_URL_ROOT + TEST_LIB + ":32",
+        attributes: [
+          "Bubbling",
+          "DOM2"
+        ],
+        handler: "s.addEventListener) M = function() {\n" +
+                 "  s.removeEventListener(\"DOMContentLoaded\", M, false);\n" +
+                 "  c.ready()\n" +
+                 "}"
       }
     ]
   },
   {
     selector: "#testdiv",
     expected: [
       {
         type: "click",
diff --git a/browser/devtools/markupview/test/browser_markupview_events_jquery_1.6.js b/browser/devtools/markupview/test/browser_markupview_events_jquery_1.6.js
--- a/browser/devtools/markupview/test/browser_markupview_events_jquery_1.6.js
+++ b/browser/devtools/markupview/test/browser_markupview_events_jquery_1.6.js
@@ -87,16 +87,27 @@ const TEST_DATA = [
         handler: "ready: function(a) {\n" +
                  "  if (a === !0 && !--e.readyWait || a !== !0 && !e.isReady) {\n" +
                  "    if (!c.body) return setTimeout(e.ready, 1);\n" +
                  "    e.isReady = !0;\n" +
                  "    if (a !== !0 && --e.readyWait > 0) return;\n" +
                  "    y.resolveWith(c, [e]), e.fn.trigger && e(c).trigger(\"ready\").unbind(\"ready\")\n" +
                  "  }\n" +
                  "}"
+      },
+      {
+        type: "DOMContentLoaded",
+        filename: TEST_URL_ROOT + TEST_LIB + ":16",
+        attributes: [
+          "Bubbling",
+          "DOM2"
+        ],
+        handler: "c.addEventListener ? z = function() {\n" +
+                 "  c.removeEventListener(\"DOMContentLoaded\", z, !1), e.ready()\n" +
+                 "}"
       }
     ]
   },
   {
     selector: "#testdiv",
     expected: [
       {
         type: "click",
diff --git a/browser/devtools/markupview/test/browser_markupview_events_jquery_1.7.js b/browser/devtools/markupview/test/browser_markupview_events_jquery_1.7.js
--- a/browser/devtools/markupview/test/browser_markupview_events_jquery_1.7.js
+++ b/browser/devtools/markupview/test/browser_markupview_events_jquery_1.7.js
@@ -87,16 +87,27 @@ const TEST_DATA = [
         handler: "ready: function(a) {\n" +
                  "  if (a === !0 && !--e.readyWait || a !== !0 && !e.isReady) {\n" +
                  "    if (!c.body) return setTimeout(e.ready, 1);\n" +
                  "    e.isReady = !0;\n" +
                  "    if (a !== !0 && --e.readyWait > 0) return;\n" +
                  "    B.fireWith(c, [e]), e.fn.trigger && e(c).trigger(\"ready\").unbind(\"ready\")\n" +
                  "  }\n" +
                  "}"
+      },
+      {
+        type: "DOMContentLoaded",
+        filename: TEST_URL_ROOT + TEST_LIB + ":2",
+        attributes: [
+          "Bubbling",
+          "DOM2"
+        ],
+        handler: "c.addEventListener ? C = function() {\n" +
+                 "  c.removeEventListener(\"DOMContentLoaded\", C, !1), e.ready()\n" +
+                 "}"
       }
     ]
   },
   {
     selector: "#testdiv",
     expected: [
       {
         type: "click",
diff --git a/browser/devtools/markupview/test/doc_markup_events.html b/browser/devtools/markupview/test/doc_markup_events.html
--- a/browser/devtools/markupview/test/doc_markup_events.html
+++ b/browser/devtools/markupview/test/doc_markup_events.html
@@ -38,16 +38,24 @@
     }
     </style>
     <script type="application/javascript;version=1.8">
       function init() {
         let container = document.getElementById("container");
         let multiple = document.getElementById("multiple");
         let fatarrow = document.getElementById("fatarrow");
 
+        document.addEventListener("click", function(foo, bar) {
+          alert("document event listener clicked");
+        });
+
+        document.documentElement.addEventListener("click", function(foo2, bar2) {
+          alert("documentElement event listener clicked");
+        });
+
         container.addEventListener("mouseover", mouseoverHandler, true);
         multiple.addEventListener("click", clickHandler, false);
         multiple.addEventListener("mouseup", mouseupHandler, false);
 
         new handleEventClick();
         new boundHandleEventClick();
 
         let bound = document.getElementById("bound");
diff --git a/browser/devtools/markupview/test/helper_events_test_runner.js b/browser/devtools/markupview/test/helper_events_test_runner.js
--- a/browser/devtools/markupview/test/helper_events_test_runner.js
+++ b/browser/devtools/markupview/test/helper_events_test_runner.js
@@ -1,12 +1,14 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+let diff = devtools.require("devtools/shared/diff");
+
 /**
  * Generator function that runs checkEventsForNode() for each object in the
  * TEST_DATA array.
  */
 function* runEventPopupTests() {
   let {inspector} = yield addTab(TEST_URL).then(openInspector);
 
   yield inspector.markup.expandAll();
@@ -70,14 +72,41 @@ function* checkEventsForNode(selector, e
       is(attributes[j].getAttribute("value"), expected[i].attributes[j],
          "attribute[" + j + "] matches for " + cssSelector);
     }
 
     EventUtils.synthesizeMouseAtCenter(header, {}, type.ownerGlobal);
     yield tooltip.once("event-tooltip-ready");
 
     let editor = tooltip.eventEditors.get(contentBox).editor;
-    is(editor.getText(), expected[i].handler,
+    textDiff(editor.getText(), expected[i].handler,
        "handler matches for " + cssSelector);
   }
 
   tooltip.hide();
 }
+
+function textDiff(text1, text2, msg) {
+  let out = "";
+
+  if (text1 === text2) {
+    ok(true, msg);
+    return;
+  }
+
+  let result = diff(text1, text2);
+
+  for (let {atom, operation} of result) {
+    switch (operation) {
+      case "add":
+        out += "+ " + atom + "\n";
+      break;
+      case "delete":
+        out += "- " + atom + "\n";
+      break;
+      case "none":
+        out += "  " + atom + "\n";
+      break;
+    }
+  }
+
+  ok(false, msg + "\nDIFF:\n==========\n" + out + "==========\n");
+}
diff --git a/browser/devtools/shared/diff.js b/browser/devtools/shared/diff.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/shared/diff.js
@@ -0,0 +1,288 @@
+/**
+ * This diff utility is taken from:
+ * https://github.com/Slava/diff.js
+ *
+ * The MIT License (MIT)
+ *
+ * Copyright (c) 2014 Slava
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+
+/**
+ * USAGE:
+ *   diff(text1, text2);
+ */
+
+/**
+ * Longest Common Subsequence
+ *
+ * @param A - sequence of atoms - Array
+ * @param B - sequence of atoms - Array
+ * @param equals - optional comparator of atoms - returns true or false,
+ *                 if not specified, triple equals operator is used
+ * @returns Array - sequence of atoms, one of LCSs, edit script from A to B
+ */
+var LCS = function (A, B, /* optional */ equals) {
+  // We just compare atoms with default equals operator by default
+  if (equals === undefined)
+    equals = function (a, b) { return a === b; };
+
+  // NOTE: all intervals from now on are both sides inclusive
+  // Get the points in Edit Graph, one of the LCS paths goes through.
+  // The points are located on the same diagonal and represent the middle
+  // snake ([D/2] out of D+1) in the optimal edit path in edit graph.
+  // @param startA, endA - substring of A we are working on
+  // @param startB, endB - substring of B we are working on
+  // @returns Array - [
+  //                   [x, y], - beginning of the middle snake
+  //                   [u, v], - end of the middle snake
+  //                    D,     - optimal edit distance
+  //                    LCS ]  - length of LCS
+  var findMidSnake = function (startA, endA, startB, endB) {
+    var N = endA - startA + 1;
+    var M = endB - startB + 1;
+    var Max = N + M;
+    var Delta = N - M;
+    var halfMaxCeil = (Max + 1) / 2 | 0;
+
+    var foundOverlap = false;
+    var overlap = null;
+
+    // Maps -Max .. 0 .. +Max, diagonal index to endpoints for furthest reaching
+    // D-path on current iteration.
+    var V = {};
+    // Same but for reversed paths.
+    var U = {};
+
+    // Special case for the base case, D = 0, k = 0, x = y = 0
+    V[1] = 0;
+    // Special case for the base case reversed, D = 0, k = 0, x = N, y = M
+    U[Delta - 1] = N;
+
+    // Iterate over each possible length of edit script
+    for (var D = 0; D <= halfMaxCeil; D++) {
+      // Iterate over each diagonal
+      for (var k = -D; k <= D && !overlap; k += 2) {
+        // Positions in sequences A and B of furthest going D-path on diagonal k.
+        var x, y;
+
+        // Choose from each diagonal we extend
+        if (k === -D || (k !== D && V[k - 1] < V[k + 1]))
+          // Extending path one point down, that's why x doesn't change, y
+          // increases implicitly
+          x = V[k + 1];
+        else
+          // Extending path one point to the right, x increases
+          x = V[k - 1] + 1;
+
+        // We can calculate the y out of x and diagonal index.
+        y = x - k;
+
+        if (isNaN(y) || x > N || y > M)
+          continue;
+
+        var xx = x;
+        // Try to extend the D-path with diagonal paths. Possible only if atoms
+        // A_x match B_y
+        while (x < N && y < M // if there are atoms to compare
+               && equals(A[startA + x], B[startB + y])) {
+          x++; y++;
+        }
+
+        // We can safely update diagonal k, since on every iteration we consider
+        // only even or only odd diagonals and the result of one depends only on
+        // diagonals of different iteration.
+        V[k] = x;
+
+        // Check feasibility, Delta is checked for being odd.
+        if ((Delta & 1) === 1 && inRange(k, Delta - (D - 1), Delta + (D - 1)))
+          // Forward D-path can overlap with reversed D-1-path
+          if (V[k] >= U[k])
+            // Found an overlap, the middle snake, convert X-components to dots
+            overlap = [xx, x].map(toPoint, k); // XXX ES5
+      }
+
+      if (overlap)
+        var SES = D * 2 - 1;
+
+      // Iterate over each diagonal for reversed case
+      for (var k = -D; k <= D && !overlap; k += 2) {
+        // The real diagonal we are looking for is k + Delta
+        var K = k + Delta;
+        var x, y;
+        if (k === D || (k !== -D && U[K - 1] < U[K + 1]))
+          x = U[K - 1];
+        else
+          x = U[K + 1] - 1;
+
+        y = x - K;
+        if (isNaN(y) || x < 0 || y < 0)
+          continue;
+        var xx = x;
+        while (x > 0 && y > 0 && equals(A[startA + x - 1], B[startB + y - 1])) {
+          x--; y--;
+        }
+        U[K] = x;
+
+        if (Delta % 2 === 0 && inRange(K, -D, D))
+          if (U[K] <= V[K])
+            overlap = [x, xx].map(toPoint, K); // XXX ES5
+      }
+
+      if (overlap) {
+        SES = SES || D * 2;
+        // Remember we had offset of each sequence?
+        for (var i = 0; i < 2; i++) for (var j = 0; j < 2; j++)
+          overlap[i][j] += [startA, startB][j] - i;
+        return overlap.concat([ SES, (Max - SES) / 2 ]);
+      }
+    }
+  };
+
+  var lcsAtoms = [];
+  var lcs = function (startA, endA, startB, endB) {
+    var N = endA - startA + 1;
+    var M = endB - startB + 1;
+
+    if (N > 0 && M > 0) {
+      var middleSnake = findMidSnake(startA, endA, startB, endB);
+      // A[x;u] == B[y,v] and is part of LCS
+      var x = middleSnake[0][0], y = middleSnake[0][1];
+      var u = middleSnake[1][0], v = middleSnake[1][1];
+      var D = middleSnake[2];
+
+      if (D > 1) {
+        lcs(startA, x - 1, startB, y - 1);
+        if (x <= u) {
+          [].push.apply(lcsAtoms, A.slice(x, u + 1));
+        }
+        lcs(u + 1, endA, v + 1, endB);
+      } else if (M > N)
+        [].push.apply(lcsAtoms, A.slice(startA, endA + 1));
+      else
+        [].push.apply(lcsAtoms, B.slice(startB, endB + 1));
+    }
+  };
+
+  lcs(0, A.length - 1, 0, B.length - 1);
+  return lcsAtoms;
+};
+
+// Helpers
+var inRange = function (x, l, r) {
+  return (l <= x && x <= r) || (r <= x && x <= l);
+};
+
+// Takes X-component as argument, diagonal as context,
+// returns array-pair of form x, y
+var toPoint = function (x) {
+  return [x, x - this];  // XXX context is not the best way to pass diagonal
+};
+
+// Wrappers
+LCS.StringLCS = function (A, B) {
+  return LCS(A.split(''), B.split('')).join('');
+};
+
+function textDiff(text1, text2) {
+  return diff(text1.split("\n"), text2.split("\n"));
+}
+
+/**
+ * Diff sequence
+ *
+ * @param A - sequence of atoms - Array
+ * @param B - sequence of atoms - Array
+ * @param equals - optional comparator of atoms - returns true or false,
+ *                 if not specified, triple equals operator is used
+ * @returns Array - sequence of objects in a form of:
+ *   - operation: one of "none", "add", "delete"
+ *   - atom: the atom found in either A or B
+ * Applying operations from diff sequence you should be able to transform A to B
+ */
+function diff(A, B, equals) {
+  // We just compare atoms with default equals operator by default
+  if (equals === undefined)
+    equals = function (a, b) { return a === b; };
+
+  var diff = [];
+  var i = 0, j = 0;
+  var N = A.length, M = B.length, K = 0;
+
+  while (i < N && j < M && equals(A[i], B[j]))
+    i++, j++;
+
+  while (i < N && j < M && equals(A[N-1], B[M-1]))
+    N--, M--, K++;
+
+  [].push.apply(diff, A.slice(0, i).map(function (atom) {
+    return { operation: "none", atom: atom }; }));
+
+  var lcs = LCS(A.slice(i, N), B.slice(j, M), equals);
+
+  for (var k = 0; k < lcs.length; k++) {
+    var atom = lcs[k];
+    var ni = customIndexOf.call(A, atom, i, equals);
+    var nj = customIndexOf.call(B, atom, j, equals);
+
+    // XXX ES5 map
+    // Delete unmatched atoms from A
+    [].push.apply(diff, A.slice(i, ni).map(function (atom) {
+      return { operation: "delete", atom: atom };
+    }));
+
+    // Add unmatched atoms from B
+    [].push.apply(diff, B.slice(j, nj).map(function (atom) {
+      return { operation: "add", atom: atom };
+    }));
+
+    // Add the atom found in both sequences
+    diff.push({ operation: "none", atom: atom });
+
+    i = ni + 1;
+    j = nj + 1;
+  }
+
+  // Don't forget about the rest
+
+  [].push.apply(diff, A.slice(i, N).map(function (atom) {
+    return { operation: "delete", atom: atom };
+  }));
+
+  [].push.apply(diff, B.slice(j, M).map(function (atom) {
+    return { operation: "add", atom: atom };
+  }));
+
+  [].push.apply(diff, A.slice(N, N + K).map(function (atom) {
+    return { operation: "none", atom: atom }; }));
+
+  return diff;
+};
+
+// Accepts custom comparator
+var customIndexOf = function(item, start, equals){
+  var arr = this;
+  for (var i = start; i < arr.length; i++)
+    if (equals(item, arr[i]))
+      return i;
+  return -1;
+};
+
+module.exports = textDiff;
diff --git a/browser/devtools/shared/moz.build b/browser/devtools/shared/moz.build
--- a/browser/devtools/shared/moz.build
+++ b/browser/devtools/shared/moz.build
@@ -28,16 +28,17 @@ EXTRA_JS_MODULES.devtools += [
     'widgets/VariablesView.jsm',
     'widgets/VariablesViewController.jsm',
     'widgets/ViewHelpers.jsm',
 ]
 
 EXTRA_JS_MODULES.devtools.shared += [
     'autocomplete-popup.js',
     'd3.js',
+    'diff.js',
     'frame-script-utils.js',
     'inplace-editor.js',
     'observable-object.js',
     'telemetry.js',
     'theme-switching.js',
     'undo.js',
 ]
 
diff --git a/toolkit/devtools/event-parsers.js b/toolkit/devtools/event-parsers.js
--- a/toolkit/devtools/event-parsers.js
+++ b/toolkit/devtools/event-parsers.js
@@ -4,16 +4,18 @@
 
 // This file contains event parsers that are then used by developer tools in
 // order to find information about events affecting an HTML element.
 
 "use strict";
 
 const {Cc, Ci, Cu} = require("chrome");
 
+const JQUERY_LIVE_REGEX = /return typeof \w+.*.event\.triggered[\s\S]*\.event\.(dispatch|handle).*arguments/;
+
 loader.lazyGetter(this, "eventListenerService", () => {
   return Cc["@mozilla.org/eventlistenerservice;1"]
            .getService(Ci.nsIEventListenerService);
 });
 
 let parsers = [
   {
     id: "jQuery events",
@@ -31,16 +33,21 @@ let parsers = [
       // jQuery 1.2+
       let data = jQuery._data || jQuery.data;
       if (data) {
         let eventsObj = data(node, "events");
         for (let type in eventsObj) {
           let events = eventsObj[type];
           for (let key in events) {
             let event = events[key];
+
+            if (node.wrappedJSObject == global.document && event.selector) {
+              continue;
+            }
+
             if (typeof event === "object" || typeof event === "function") {
               let eventInfo = {
                 type: type,
                 handler: event.handler || event,
                 tags: "jQuery",
                 hide: {
                   capturing: true,
                   dom0: true
@@ -58,17 +65,23 @@ let parsers = [
 
       if (!entry) {
         return handlers;
       }
 
       for (let type in entry.events) {
         let events = entry.events[type];
         for (let key in events) {
-          if (typeof events[key] === "function") {
+          let event = events[key];
+
+          if (node.wrappedJSObject == global.document && event.selector) {
+            continue;
+          }
+
+          if (typeof event === "function") {
             let eventInfo = {
               type: type,
               handler: events[key],
               tags: "jQuery",
               hide: {
                 capturing: true,
                 dom0: true
               }
@@ -135,17 +148,21 @@ let parsers = [
     }
   },
   {
     id: "DOM events",
     hasListeners: function(node) {
       let listeners;
 
       if (node.nodeName.toLowerCase() === "html") {
-        listeners = eventListenerService.getListenerInfoFor(node.ownerGlobal) || [];
+        let winListeners = eventListenerService.getListenerInfoFor(node.ownerGlobal) || [];
+        let docElementListeners = eventListenerService.getListenerInfoFor(node) || [];
+        let docListeners = eventListenerService.getListenerInfoFor(node.parentNode) || [];
+
+        listeners = [...winListeners, ...docElementListeners, ...docListeners];
       } else {
         listeners = eventListenerService.getListenerInfoFor(node) || [];
       }
 
       for (let listener of listeners) {
         if (listener.listenerObject && listener.type) {
           return true;
         }
@@ -160,17 +177,17 @@ let parsers = [
       // The Node actor's getEventListenerInfo knows that when an html tag has
       // been passed we need the window object so we don't need to account for
       // event hoisting here as we did in hasListeners.
 
       for (let listenerObj of listeners) {
         let listener = listenerObj.listenerObject;
 
         // If there is no JS event listener skip this.
-        if (!listener) {
+        if (!listener || JQUERY_LIVE_REGEX.test(listener.toString())) {
           continue;
         }
 
         let eventInfo = {
           capturing: listenerObj.capturing,
           type: listenerObj.type,
           handler: listener
         };
diff --git a/toolkit/devtools/server/actors/inspector.js b/toolkit/devtools/server/actors/inspector.js
--- a/toolkit/devtools/server/actors/inspector.js
+++ b/toolkit/devtools/server/actors/inspector.js
@@ -538,20 +538,26 @@ var NodeActor = exports.NodeActor = prot
     request: {maxDim: Arg(0, "nullable:number")},
     response: RetVal("imageData")
   }),
 
   /**
    * Get all event listeners that are listening on this node.
    */
   getEventListenerInfo: method(function() {
+    let node = this.rawNode;
+
     if (this.rawNode.nodeName.toLowerCase() === "html") {
-      return this.getEventListeners(this.rawNode.ownerGlobal);
+      let winListeners = this.getEventListeners(node.ownerGlobal) || [];
+      let docElementListeners = this.getEventListeners(node) || [];
+      let docListeners = this.getEventListeners(node.parentNode) || [];
+
+      return [...winListeners, ...docElementListeners, ...docListeners];
     }
-    return this.getEventListeners(this.rawNode);
+    return this.getEventListeners(node);
   }, {
     request: {},
     response: {
       events: RetVal("json")
     }
   }),
 
   /**
