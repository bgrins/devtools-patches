# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  7302244d1d71abdb405f5ebc6cd3cecc61aa5646

diff --git a/browser/base/content/browser.css b/browser/base/content/browser.css
--- a/browser/base/content/browser.css
+++ b/browser/base/content/browser.css
@@ -647,24 +647,16 @@ html|input.urlbar-input[textoverflow]:no
 #PopupAutoComplete > richlistbox > richlistitem[originaltype="insecureWarning"] > .ac-title > label {
   margin-inline-start: 0;
 }
 
 #PopupSearchAutoComplete {
   -moz-binding: url("chrome://browser/content/search/search.xml#browser-search-autocomplete-result-popup");
 }
 
-/* Overlay a badge on top of the icon of additional open search providers
-   in the search panel. */
-.addengine-item > .button-box > .button-icon,
-.addengine-item[type="menu"] > .button-box > .box-inherit > .button-icon {
-  -moz-binding: url("chrome://browser/content/search/search.xml#addengine-icon");
-  display: -moz-stack;
-}
-
 #PopupAutoCompleteRichResult {
   -moz-binding: url("chrome://browser/content/urlbarBindings.xml#urlbar-rich-result-popup");
 }
 
 #PopupAutoCompleteRichResult.showSearchSuggestionsNotification {
   transition: height 100ms;
 }
 
diff --git a/browser/components/search/content/search.xml b/browser/components/search/content/search.xml
--- a/browser/components/search/content/search.xml
+++ b/browser/components/search/content/search.xml
@@ -1694,25 +1694,28 @@
         const kXULNS =
           "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
 
         let engines = gBrowser.selectedBrowser.engines;
         let tooManyEngines = engines.length > this._addEngineMenuThreshold;
 
         if (tooManyEngines) {
           // Make the top-level menu button.
-          let button = document.createElementNS(kXULNS, "button");
+          let button = document.createElementNS(kXULNS, "toolbarbutton");
           list.appendChild(button);
+          button.classList.add("badged-button");
           button.classList.add("addengine-item");
           button.setAttribute("anonid", "addengine-menu-button");
           button.setAttribute("type", "menu");
           button.setAttribute("label",
             this.bundle.GetStringFromName("cmd_addFoundEngineMenu"));
           button.setAttribute("crop", "end");
           button.setAttribute("pack", "start");
+          button.setAttribute("badge", " ");
+
 
           // Set the menu button's image to the image of the first engine.  The
           // offered engines may have differing images, so there's no perfect
           // choice here.
           let engine = engines[0];
           if (engine.icon) {
             button.setAttribute("image", engine.icon);
           }
@@ -1738,38 +1741,46 @@
           }
         }
 
         // Finally, add the engines to the list.  If there aren't too many
         // engines, the list is the add-engines vbox.  Otherwise it's the
         // menupopup created earlier.  In the latter case, create menuitem
         // elements instead of buttons, because buttons don't get keyboard
         // handling for free inside menupopups.
-        let eltType = tooManyEngines ? "menuitem" : "button";
         for (let engine of engines) {
-          let button = document.createElementNS(kXULNS, eltType);
+          let button = document.createElementNS(kXULNS, "toolbarbutton");
+          button.classList.add("badged-button");
           button.classList.add("addengine-item");
           button.id = this.telemetryOrigin + "-add-engine-" +
                       this._fixUpEngineNameForID(engine.title);
           let label = this.bundle.formatStringFromName("cmd_addFoundEngine",
                                                        [engine.title], 1);
+          button.setAttribute("badge", " ");
           button.setAttribute("label", label);
           button.setAttribute("crop", "end");
           button.setAttribute("tooltiptext", engine.title + "\n" + engine.uri);
           button.setAttribute("uri", engine.uri);
           button.setAttribute("title", engine.title);
           if (engine.icon) {
             button.setAttribute("image", engine.icon);
           }
           if (tooManyEngines) {
             button.classList.add("menuitem-iconic");
           } else {
             button.setAttribute("pack", "start");
           }
-          list.appendChild(button);
+
+          if (tooManyEngines) {
+            let menuitem = document.createElementNS(kXULNS, "menuitem");
+            menuitem.appendChild(button);
+            list.appendChild(menuitem);
+          } else {
+            list.appendChild(button);
+          }
         }
         ]]></body>
       </method>
 
       <method name="_buttonIDForEngine">
         <parameter name="engine"/>
         <body><![CDATA[
           return this.telemetryOrigin + "-engine-one-off-item-" +
diff --git a/browser/themes/osx/searchbar.css b/browser/themes/osx/searchbar.css
--- a/browser/themes/osx/searchbar.css
+++ b/browser/themes/osx/searchbar.css
@@ -164,29 +164,31 @@
   color: HighlightText;
 }
 
 .addengine-item[type=menu][selected] {
   color: inherit;
   background-color: var(--arrowpanel-dimmed-further);
 }
 
-.addengine-icon {
+
+.addengine-item > .toolbarbutton-badge-stack > .toolbarbutton-icon {
+  height: 16px;
   width: 16px;
 }
 
-.addengine-badge {
+.addengine-item >  .toolbarbutton-badge-stack > .toolbarbutton-badge {
   width: 16px;
   height: 16px;
-  margin: -7px -9px 7px 9px;
-  list-style-image: url("chrome://browser/skin/badge-add-engine.png");
+  background: transparent url("chrome://browser/skin/badge-add-engine.png");
+  box-shadow: none;
 }
 
-.addengine-item > .button-box > .button-text,
-.addengine-item[type=menu] > .button-box > .box-inherit > .button-text {
+.addengine-item > .toolbarbutton-text,
+.addengine-item[type=menu] > .toolbarbutton-text {
   -moz-box-flex: 1;
   text-align: start;
   padding-inline-start: 10px;
 }
 
 .addengine-item:not([image]) {
   list-style-image: url("chrome://browser/skin/search-engine-placeholder.png");
 }
