# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  f08d1e52d609f5c785d53e39be1f07bedcaa1e2e
Bug 1237788 - Don't remove old devtools stylesheets until new ones are loaded to make theme switching faster;r=pbrosset

diff --git a/devtools/client/framework/test/browser_toolbox_theme_registration.js b/devtools/client/framework/test/browser_toolbox_theme_registration.js
--- a/devtools/client/framework/test/browser_toolbox_theme_registration.js
+++ b/devtools/client/framework/test/browser_toolbox_theme_registration.js
@@ -5,17 +5,17 @@
 // Test for dynamically registering and unregistering themes
 const CHROME_URL = "chrome://mochitests/content/browser/devtools/client/framework/test/";
 
 var toolbox;
 
 add_task(function* themeRegistration() {
   let tab = yield addTab("data:text/html,test");
   let target = TargetFactory.forTab(tab);
-  toolbox = yield gDevTools.showToolbox(target);
+  toolbox = yield gDevTools.showToolbox(target, "options");
 
   let themeId = yield new Promise(resolve => {
     gDevTools.once("theme-registered", (e, themeId) => {
       resolve(themeId);
     });
 
     gDevTools.registerTheme({
       id: "test-theme",
@@ -26,19 +26,16 @@ add_task(function* themeRegistration() {
   });
 
   is(themeId, "test-theme", "theme-registered event handler sent theme id");
 
   ok(gDevTools.getThemeDefinitionMap().has(themeId), "theme added to map");
 });
 
 add_task(function* themeInOptionsPanel() {
-
-  yield toolbox.selectTool("options");
-
   let panel = toolbox.getCurrentPanel();
   let panelWin = toolbox.getCurrentPanel().panelWin;
   let doc = panelWin.frameElement.contentDocument;
   let themeOption = doc.querySelector("#devtools-theme-box > radio[value=test-theme]");
 
   ok(themeOption, "new theme exists in the Options panel");
 
   let testThemeOption = doc.querySelector("#devtools-theme-box > radio[value=test-theme]");
diff --git a/devtools/client/shared/theme-switching.js b/devtools/client/shared/theme-switching.js
--- a/devtools/client/shared/theme-switching.js
+++ b/devtools/client/shared/theme-switching.js
@@ -60,25 +60,16 @@
    * from `oldTheme`
    */
   function switchTheme(newTheme, oldTheme) {
     if (newTheme === oldTheme) {
       return;
     }
 
     let oldThemeDef = gDevTools.getThemeDefinition(oldTheme);
-
-    // Unload all theme stylesheets related to the old theme.
-    if (oldThemeDef) {
-      for (let sheet of devtoolsStyleSheets.get(oldThemeDef) || []) {
-        sheet.remove();
-      }
-    }
-
-    // Load all stylesheets associated with the new theme.
     let newThemeDef = gDevTools.getThemeDefinition(newTheme);
 
     // The theme might not be available anymore (e.g. uninstalled)
     // Use the default one.
     if (!newThemeDef) {
       newThemeDef = gDevTools.getThemeDefinition("light");
     }
 
@@ -105,38 +96,45 @@
       if (newTheme == "dark") {
         StylesheetUtils.loadSheet(window, SCROLLBARS_URL, "agent");
       } else if (oldTheme == "dark") {
         StylesheetUtils.removeSheet(window, SCROLLBARS_URL, "agent");
       }
       forceStyle();
     }
 
-    if (oldThemeDef) {
-      for (let name of oldThemeDef.classList) {
-        documentElement.classList.remove(name);
+    Promise.all(loadEvents).then(() => {
+      // Unload all stylesheets and classes from the old theme.
+      if (oldThemeDef) {
+        for (let name of oldThemeDef.classList) {
+          documentElement.classList.remove(name);
+        }
+
+        for (let sheet of devtoolsStyleSheets.get(oldThemeDef) || []) {
+          sheet.remove();
+        }
+
+        if (oldThemeDef.onUnapply) {
+          oldThemeDef.onUnapply(window, newTheme);
+        }
       }
 
-      if (oldThemeDef.onUnapply) {
-        oldThemeDef.onUnapply(window, newTheme);
+      // Load all stylesheets and classes from the new theme.
+      for (let name of newThemeDef.classList) {
+        documentElement.classList.add(name);
       }
-    }
 
-    for (let name of newThemeDef.classList) {
-      documentElement.classList.add(name);
-    }
+      if (newThemeDef.onApply) {
+        newThemeDef.onApply(window, oldTheme);
+      }
 
-    if (newThemeDef.onApply) {
-      newThemeDef.onApply(window, oldTheme);
-    }
-
-    // Final notification for further theme-switching related logic.
-    gDevTools.emit("theme-switched", window, newTheme, oldTheme);
-
-    Promise.all(loadEvents).then(notifyWindow, console.error.bind(console));
+      // Final notification for further theme-switching related logic.
+      gDevTools.emit("theme-switched", window, newTheme, oldTheme);
+      notifyWindow();
+    }, console.error.bind(console));
   }
 
   function handlePrefChange(event, data) {
     if (data.pref == "devtools.theme") {
       switchTheme(data.newValue, data.oldValue);
     }
   }
 
