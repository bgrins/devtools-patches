# HG changeset patch
# User Jan Odvarko <odvarko@gmail.com>
# Date 1457710429 -3600
#      Fri Mar 11 16:33:49 2016 +0100
# Node ID 8fc363dd18b1b4a6a2f2c7dd9bb052ad4abfcd8e
# Parent  5b368c31ff915b160aa45e4f142dc1a9c797f753
Bug 1211525 - Add prop types to components; r=bgrins

diff --git a/devtools/client/jsonview/components/json-panel.js b/devtools/client/jsonview/components/json-panel.js
--- a/devtools/client/jsonview/components/json-panel.js
+++ b/devtools/client/jsonview/components/json-panel.js
@@ -40,17 +40,17 @@ var JsonPanel = React.createClass({
   render: function() {
     var content;
     var data = this.props.data;
 
     try {
       if (typeof data == "object") {
         content = TreeView({
           data: this.props.data,
-          mode: "tiny",
+          mode: "short",
           searchFilter: this.props.searchFilter
         });
       } else {
         content = DOM.div({className: "jsonParseError"},
           data + ""
         );
       }
     } catch (err) {
diff --git a/devtools/client/jsonview/components/reps/tabs.js b/devtools/client/jsonview/components/reps/tabs.js
--- a/devtools/client/jsonview/components/reps/tabs.js
+++ b/devtools/client/jsonview/components/reps/tabs.js
@@ -4,17 +4,20 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 define(function(require, exports, module) {
 
 const React = require("devtools/client/shared/vendor/react");
+
+// Shortcuts
 const DOM = React.DOM;
+const PropTypes = React.PropTypes;
 
 /**
  * Renders simple 'tab' widget.
  *
  * Based on ReactSimpleTabs component
  * https://github.com/pedronauck/react-simpletabs
  *
  * Component markup (+CSS) example:
@@ -30,28 +33,28 @@ const DOM = React.DOM;
  *    The content of active panel here
  *  </article>
  * <div>
  */
 var Tabs = React.createClass({
   displayName: "Tabs",
 
   propTypes: {
-    className: React.PropTypes.oneOfType([
-      React.PropTypes.array,
-      React.PropTypes.string,
-      React.PropTypes.object
+    className: PropTypes.oneOfType([
+      PropTypes.array,
+      PropTypes.string,
+      PropTypes.object
     ]),
-    tabActive: React.PropTypes.number,
-    onMount: React.PropTypes.func,
-    onBeforeChange: React.PropTypes.func,
-    onAfterChange: React.PropTypes.func,
-    children: React.PropTypes.oneOfType([
-      React.PropTypes.array,
-      React.PropTypes.element
+    tabActive: PropTypes.number,
+    onMount: PropTypes.func,
+    onBeforeChange: PropTypes.func,
+    onAfterChange: PropTypes.func,
+    children: PropTypes.oneOfType([
+      PropTypes.array,
+      PropTypes.element
     ]).isRequired
   },
 
   getDefaultProps: function () {
     return {
       tabActive: 1
     };
   },
diff --git a/devtools/client/jsonview/components/reps/toolbar.js b/devtools/client/jsonview/components/reps/toolbar.js
--- a/devtools/client/jsonview/components/reps/toolbar.js
+++ b/devtools/client/jsonview/components/reps/toolbar.js
@@ -4,16 +4,18 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 define(function(require, exports, module) {
 
 const React = require("devtools/client/shared/vendor/react");
+
+// Shortcuts
 const DOM = React.DOM;
 
 /**
  * Renders a simple toolbar.
  */
 var Toolbar = React.createClass({
   displayName: "Toolbar",
 
@@ -27,25 +29,21 @@ var Toolbar = React.createClass({
 });
 
 /**
  * Renders a simple toolbar button.
  */
 var ToolbarButton = React.createClass({
   displayName: "ToolbarButton",
 
-  propTypes: {
-    active: React.PropTypes.bool,
-    disabled: React.PropTypes.bool,
-  },
-
   render: function() {
     var props = Object.assign({className: "btn"}, this.props);
     return (
       DOM.button(props, this.props.children)
     );
   },
 });
 
 // Exports from this module
 exports.Toolbar = Toolbar;
 exports.ToolbarButton = ToolbarButton;
+
 });
diff --git a/devtools/client/jsonview/components/reps/tree-view.js b/devtools/client/jsonview/components/reps/tree-view.js
--- a/devtools/client/jsonview/components/reps/tree-view.js
+++ b/devtools/client/jsonview/components/reps/tree-view.js
@@ -1,261 +1,269 @@
 /* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+// Make this available to both AMD and CJS environments
 define(function(require, exports, module) {
+  // Dependencies
+  const React = require("devtools/client/shared/vendor/react");
+  const { createFactories } = require("devtools/client/shared/components/reps/rep-utils");
+  const { Rep } = createFactories(require("devtools/client/shared/components/reps/rep"));
+  const { isCropped } = require("devtools/client/shared/components/reps/string");
 
-// Dependencies
-const React = require("devtools/client/shared/vendor/react");
-const { createFactories } = require("devtools/client/shared/components/reps/rep-utils");
-const { Rep } = createFactories(require("devtools/client/shared/components/reps/rep"));
-const { StringRep } = require("devtools/client/shared/components/reps/string");
-const DOM = React.DOM;
+  // Shortcuts
+  const DOM = React.DOM;
+  const PropTypes = React.PropTypes;
 
-var uid = 0;
+  let uid = 0;
 
-/**
- * Renders a tree view with expandable/collapsible items.
- */
-var TreeView = React.createClass({
-  displayName: "TreeView",
+  /**
+   * Renders a tree view with expandable/collapsible items.
+   */
+  let TreeView = React.createClass({
+    displayName: "TreeView",
 
-  getInitialState: function() {
-    return {
-      data: {},
-      searchFilter: null
+    propTypes: {
+      mode: PropTypes.string.isRequired,
+      data: PropTypes.object.isRequired,
+    },
+
+    getInitialState: function() {
+      return {
+        data: {},
+        searchFilter: null
+      };
+    },
+
+    // Rendering
+
+    render: function() {
+      let mode = this.props.mode;
+      let root = this.state.data;
+
+      let children = [];
+
+      if (Array.isArray(root)) {
+        for (let i = 0; i < root.length; i++) {
+          let child = root[i];
+          children.push(TreeNode({
+            key: child.key,
+            data: child,
+            mode: mode,
+            searchFilter: this.state.searchFilter || this.props.searchFilter
+          }));
+        }
+      } else {
+        children.push(React.addons.createFragment(root));
+      }
+
+      return (
+        DOM.div({className: "domTable", cellPadding: 0, cellSpacing: 0},
+          children
+        )
+      );
+    },
+
+    // Data
+
+    componentDidMount: function() {
+      let members = initMembers(this.props.data, 0);
+      this.setState({data: members, searchFilter: this.props.searchFilter});
+    },
+
+    componentWillReceiveProps: function(nextProps) {
+      let updatedState = {
+        searchFilter: nextProps.searchFilter
+      };
+
+      if (this.props.data !== nextProps.data) {
+        updatedState.data = initMembers(nextProps.data, 0);
+      }
+
+      this.setState(updatedState);
+    }
+  });
+
+  /**
+   * Represents a node within the tree.
+   */
+  let TreeNode = React.createFactory(React.createClass({
+    displayName: "TreeNode",
+
+    propTypes: {
+      mode: PropTypes.string.isRequired,
+      data: PropTypes.object.isRequired,
+    },
+
+    getInitialState: function() {
+      return {
+        data: {},
+        searchFilter: null
+      };
+    },
+
+    componentDidMount: function() {
+      this.setState({
+        data: this.props.data
+      });
+    },
+
+    render: function() {
+      let member = this.state.data;
+      let mode = this.props.mode;
+
+      let classNames = ["memberRow"];
+      classNames.push(member.type + "Row");
+
+      if (member.hasChildren) {
+        classNames.push("hasChildren");
+      }
+
+      if (member.open) {
+        classNames.push("opened");
+      }
+
+      if (!member.children) {
+        // Cropped strings are expandable, but they don't have children.
+        let isString = typeof member.value == "string";
+        if (member.hasChildren && !isString) {
+          member.children = initMembers(member.value);
+        } else {
+          member.children = [];
+        }
+      }
+
+      let children = [];
+      if (member.open && member.children.length) {
+        for (let i in member.children) {
+          let child = member.children[i];
+          children.push(TreeNode({
+            key: child.key,
+            data: child,
+            mode: mode,
+            searchFilter: this.state.searchFilter || this.props.searchFilter
+          }));
+        }
+      }
+
+      let filter = this.props.searchFilter || "";
+      let name = member.name || "";
+      let value = member.value || "";
+
+      // Filtering is case-insensitive
+      filter = filter.toLowerCase();
+      name = name.toLowerCase();
+
+      if (filter && (name.indexOf(filter) < 0)) {
+        // Cache the stringify result, so the filtering is fast
+        // the next time.
+        if (!member.valueString) {
+          member.valueString = JSON.stringify(value).toLowerCase();
+        }
+
+        if (member.valueString && member.valueString.indexOf(filter) < 0) {
+          classNames.push("hidden");
+        }
+      }
+
+      return (
+        DOM.div({className: classNames.join(" ")},
+          DOM.span({className: "memberLabelCell", onClick: this.onClick},
+            DOM.span({className: "memberIcon"}),
+            DOM.span({className: "memberLabel " + member.type + "Label"},
+              member.name)
+          ),
+          DOM.span({className: "memberValueCell"},
+            DOM.span({},
+              Rep({
+                object: member.value,
+                mode: this.props.mode,
+                member: member
+              })
+            )
+          ),
+          DOM.div({className: "memberChildren"},
+            children
+          )
+        )
+      );
+    },
+
+    onClick: function(e) {
+      let member = this.state.data;
+      member.open = !member.open;
+
+      this.setState({data: member});
+
+      e.stopPropagation();
+    },
+  }));
+
+  // Helpers
+
+  function initMembers(parent) {
+    let members = getMembers(parent);
+    return members;
+  }
+
+  function getMembers(object) {
+    let members = [];
+    getObjectProperties(object, function(prop, value) {
+      let valueType = typeof value;
+      let hasChildren = (valueType === "object" && hasProperties(value));
+
+      // Cropped strings are expandable, so the user can see the
+      // entire original value.
+      if (isCropped(value)) {
+        hasChildren = true;
+      }
+
+      let type = getType(value);
+      let member = createMember(type, prop, value, hasChildren);
+      members.push(member);
+    });
+
+    return members;
+  }
+
+  function createMember(type, name, value, hasChildren) {
+    let member = {
+      name: name,
+      type: type,
+      rowClass: "memberRow-" + type,
+      hasChildren: hasChildren,
+      value: value,
+      open: false,
+      key: uid++
     };
-  },
 
-  // Rendering
+    return member;
+  }
 
-  render: function() {
-    var mode = this.props.mode;
-    var root = this.state.data;
+  function getObjectProperties(obj, callback) {
+    for (let p in obj) {
+      try {
+        callback.call(this, p, obj[p]);
+      } catch (e) {
+        console.error(e);
+      }
+    }
+  }
 
-    var children = [];
-
-    if (Array.isArray(root)) {
-      for (var i=0; i<root.length; i++) {
-        var child = root[i];
-        children.push(TreeNode({
-          key: child.key,
-          data: child,
-          mode: mode,
-          searchFilter: this.state.searchFilter || this.props.searchFilter
-        }));
-      }
-    } else {
-      children.push(React.addons.createFragment(root));
+  function hasProperties(obj) {
+    if (typeof obj == "string") {
+      return false;
     }
 
-    return (
-      DOM.div({className: "domTable", cellPadding: 0, cellSpacing: 0},
-        children
-      )
-    );
-  },
-
-  // Data
-
-  componentDidMount: function() {
-    var members = initMembers(this.props.data, 0);
-    this.setState({data: members, searchFilter: this.props.searchFilter});
-  },
-
-  componentWillReceiveProps: function(nextProps) {
-    var updatedState = {
-      searchFilter: nextProps.searchFilter
-    };
-
-    if (this.props.data !== nextProps.data) {
-      updatedState.data = initMembers(nextProps.data, 0);
-    }
-
-    this.setState(updatedState);
-  }
-});
-
-/**
- * Represents a node within the tree.
- */
-var TreeNode = React.createFactory(React.createClass({
-  displayName: "TreeNode",
-
-  getInitialState: function() {
-    return { data: {}, searchFilter: null };
-  },
-
-  componentDidMount: function() {
-    this.setState({data: this.props.data});
-  },
-
-  render: function() {
-    var member = this.state.data;
-    var mode = this.props.mode;
-
-    var classNames = ["memberRow"];
-    classNames.push(member.type + "Row");
-
-    if (member.hasChildren) {
-      classNames.push("hasChildren");
-    }
-
-    if (member.open) {
-      classNames.push("opened");
-    }
-
-    if (!member.children) {
-      // Cropped strings are expandable, but they don't have children.
-      var isString = typeof(member.value) == "string";
-      if (member.hasChildren && !isString) {
-        member.children = initMembers(member.value);
-      } else {
-        member.children = [];
-      }
-    }
-
-    var children = [];
-    if (member.open && member.children.length) {
-      for (var i in member.children) {
-        var child = member.children[i];
-        children.push(TreeNode({
-          key: child.key,
-          data: child,
-          mode: mode,
-          searchFilter: this.state.searchFilter || this.props.searchFilter
-        }));
-      };
-    }
-
-    var filter = this.props.searchFilter || "";
-    var name = member.name || "";
-    var value = member.value || "";
-
-    // Filtering is case-insensitive
-    filter = filter.toLowerCase();
-    name = name.toLowerCase();
-
-    if (filter && (name.indexOf(filter) < 0)) {
-      // Cache the stringify result, so the filtering is fast
-      // the next time.
-      if (!member.valueString) {
-        member.valueString = JSON.stringify(value).toLowerCase();
-      }
-
-      if (member.valueString && member.valueString.indexOf(filter) < 0) {
-        classNames.push("hidden");
-      }
-    }
-
-    return (
-      DOM.div({className: classNames.join(" ")},
-        DOM.span({className: "memberLabelCell", onClick: this.onClick},
-          DOM.span({className: "memberIcon"}),
-          DOM.span({className: "memberLabel " + member.type + "Label"},
-            member.name)
-        ),
-        DOM.span({className: "memberValueCell"},
-          DOM.span({},
-            Rep({
-              object: member.value,
-              mode: this.props.mode,
-              member: member
-            })
-          )
-        ),
-        DOM.div({className: "memberChildren"},
-          children
-        )
-      )
-    )
-  },
-
-  onClick: function(e) {
-    var member = this.state.data;
-    member.open = !member.open;
-
-    this.setState({data: member});
-
-    e.stopPropagation();
-  },
-}));
-
-// Helpers
-
-function initMembers(parent) {
-  var members = getMembers(parent);
-  return members;
-}
-
-function getMembers(object) {
-  var members = [];
-  getObjectProperties(object, function(prop, value) {
-    var valueType = typeof(value);
-    var hasChildren = (valueType === "object" && hasProperties(value));
-
-    // Cropped strings are expandable, so the user can see the
-    // entire original value.
-    if (StringRep.isCropped(value)) {
-      hasChildren = true;
-    }
-
-    var type = getType(value);
-    var member = createMember(type, prop, value, hasChildren);
-    members.push(member);
-  });
-
-  return members;
-}
-
-function createMember(type, name, value, hasChildren) {
-  var member = {
-    name: name,
-    type: type,
-    rowClass: "memberRow-" + type,
-    open: "",
-    hasChildren: hasChildren,
-    value: value,
-    open: false,
-    key: uid++
-  };
-
-  return member;
-}
-
-function getObjectProperties(obj, callback) {
-  for (var p in obj) {
-    try {
-      callback.call(this, p, obj[p]);
-    }
-    catch (e) {
-      console.error(e)
-    }
-  }
-}
-
-function hasProperties(obj) {
-  if (typeof(obj) == "string") {
-    return false;
+    return Object.keys(obj).length > 1;
   }
 
-  try {
-    for (var name in obj) {
-      return true;
-    }
-  }
-  catch (exc) {
+  function getType(object) {
+    // A type provider (or a decorator) should be used here.
+    return "dom";
   }
 
-  return false;
-}
-
-function getType(object) {
-  // A type provider (or a decorator) should be used here.
-  return "dom";
-}
-
-// Exports from this module
-exports.TreeView = TreeView;
+  // Exports from this module
+  exports.TreeView = TreeView;
 });
diff --git a/devtools/client/shared/components/reps/array.js b/devtools/client/shared/components/reps/array.js
--- a/devtools/client/shared/components/reps/array.js
+++ b/devtools/client/shared/components/reps/array.js
@@ -11,24 +11,29 @@ define(function(require, exports, module
   // Dependencies
   const React = require("devtools/client/shared/vendor/react");
   const { createFactories } = require("./rep-utils");
   const { ObjectBox } = createFactories(require("./object-box"));
   const { Caption } = createFactories(require("./caption"));
 
   // Shortcuts
   const DOM = React.DOM;
+  const PropTypes = React.PropTypes;
 
   /**
    * Renders an array. The array is enclosed by left and right bracket
    * and the max number of rendered items depends on the current mode.
    */
   let ArrayRep = React.createClass({
     displayName: "ArrayRep",
 
+    propTypes: {
+      object: PropTypes.array.isRequired
+    },
+
     render: function() {
       let mode = this.props.mode || "short";
       let object = this.props.object;
       let items;
 
       if (mode == "tiny") {
         items = DOM.span({className: "length"}, object.length);
       } else {
diff --git a/devtools/client/shared/components/reps/caption.js b/devtools/client/shared/components/reps/caption.js
--- a/devtools/client/shared/components/reps/caption.js
+++ b/devtools/client/shared/components/reps/caption.js
@@ -5,25 +5,32 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 // Make this available to both AMD and CJS environments
 define(function(require, exports, module) {
   // Dependencies
   const React = require("devtools/client/shared/vendor/react");
+
+  // Shortcuts
   const DOM = React.DOM;
+  const PropTypes = React.PropTypes;
 
   /**
    * Renders a caption. This template is used by other components
    * that needs to distinguish between a simple text/value and a label.
    */
   const Caption = React.createClass({
     displayName: "Caption",
 
+    propTypes: {
+      object: PropTypes.string.isRequired
+    },
+
     render: function() {
       return (
         DOM.span({"className": "caption"}, this.props.object)
       );
     },
   });
 
   // Exports from this module
diff --git a/devtools/client/shared/components/reps/number.js b/devtools/client/shared/components/reps/number.js
--- a/devtools/client/shared/components/reps/number.js
+++ b/devtools/client/shared/components/reps/number.js
@@ -8,22 +8,32 @@
 
 // Make this available to both AMD and CJS environments
 define(function(require, exports, module) {
   // Dependencies
   const React = require("devtools/client/shared/vendor/react");
   const { createFactories } = require("./rep-utils");
   const { ObjectBox } = createFactories(require("./object-box"));
 
+  // Shortcuts
+  const PropTypes = React.PropTypes;
+
   /**
    * Renders a number
    */
   const Number = React.createClass({
     displayName: "Number",
 
+    propTypes: {
+      object: PropTypes.oneOfType(
+        PropTypes.number,
+        PropTypes.bool
+      )
+    },
+
     render: function() {
       let value = this.props.object;
       return (
         ObjectBox({className: "number"},
           this.stringify(value)
         )
       );
     },
diff --git a/devtools/client/shared/components/reps/object-box.js b/devtools/client/shared/components/reps/object-box.js
--- a/devtools/client/shared/components/reps/object-box.js
+++ b/devtools/client/shared/components/reps/object-box.js
@@ -7,22 +7,29 @@
 "use strict";
 
 // Make this available to both AMD and CJS environments
 define(function(require, exports, module) {
   // Dependencies
   const React = require("devtools/client/shared/vendor/react");
   const DOM = React.DOM;
 
+  // Shortcuts
+  const PropTypes = React.PropTypes;
+
   /**
    * Renders a box for given object.
    */
   const ObjectBox = React.createClass({
     displayName: "ObjectBox",
 
+    propTypes: {
+      classname: PropTypes.string.isRequired
+    },
+
     render: function() {
       let className = this.props.className;
       let boxClassName = className ? " objectBox-" + className : "";
 
       return (
         DOM.span({className: "objectBox" + boxClassName, role: "presentation"},
           this.props.children
         )
diff --git a/devtools/client/shared/components/reps/object-link.js b/devtools/client/shared/components/reps/object-link.js
--- a/devtools/client/shared/components/reps/object-link.js
+++ b/devtools/client/shared/components/reps/object-link.js
@@ -7,22 +7,29 @@
 "use strict";
 
 // Make this available to both AMD and CJS environments
 define(function(require, exports, module) {
   // Dependencies
   const React = require("devtools/client/shared/vendor/react");
   const DOM = React.DOM;
 
+  // Shortcuts
+  const PropTypes = React.PropTypes;
+
   /**
    * Renders a link for given object.
    */
   const ObjectLink = React.createClass({
     displayName: "ObjectLink",
 
+    propTypes: {
+      classname: PropTypes.string.isRequired
+    },
+
     render: function() {
       let className = this.props.className;
       let objectClassName = className ? " objectLink-" + className : "";
       let linkClassName = "objectLink" + objectClassName + " a11yFocus";
 
       return (
         DOM.a({className: linkClassName, _repObject: this.props.object},
           this.props.children
diff --git a/devtools/client/shared/components/reps/object.js b/devtools/client/shared/components/reps/object.js
--- a/devtools/client/shared/components/reps/object.js
+++ b/devtools/client/shared/components/reps/object.js
@@ -11,28 +11,42 @@ define(function(require, exports, module
   // Dependencies
   const React = require("devtools/client/shared/vendor/react");
   const { createFactories } = require("./rep-utils");
   const { ObjectBox } = createFactories(require("./object-box"));
   const { Caption } = createFactories(require("./caption"));
 
   // Shortcuts
   const DOM = React.DOM;
+  const PropTypes = React.PropTypes;
 
   /**
    * Renders an object. An object is represented by a list of its
    * properties enclosed in curly brackets.
    */
   const Obj = React.createClass({
     displayName: "Obj",
 
+    propTypes: {
+      object: PropTypes.object.isRequired
+    },
+
     render: function() {
       let object = this.props.object;
       let props = this.shortPropIterator(object);
 
+      if (this.props.mode == "tiny" || !props.length) {
+        return (
+          ObjectBox({className: "object"},
+            DOM.span({className: "objectTitle"}, this.getTitle(object)),
+            DOM.span({className: "objectLeftBrace", role: "presentation"}, "{}")
+          )
+        );
+      }
+
       return (
         ObjectBox({className: "object"},
           DOM.span({className: "objectTitle"}, this.getTitle(object)),
           DOM.span({className: "objectLeftBrace", role: "presentation"}, "{"),
           props,
           DOM.span({className: "objectRightBrace"}, "}")
         )
       );
@@ -57,18 +71,19 @@ define(function(require, exports, module
       } catch (err) {
         console.error(err);
       }
       return [];
     },
 
     propIterator: function(object, max) {
       function isInterestingProp(t, value) {
-        return (t == "boolean" || t == "number" || (t == "string" && value) ||
-          (t == "object" && value && value.toString));
+        // Displaying objects in property value can cause recursion.
+        // (e.g. when the first child object is |this|)
+        return (t == "boolean" || t == "number" || (t == "string" && value));
       }
 
       // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=945377
       if (Object.prototype.toString.call(object) === "[object Generator]") {
         object = Object.getPrototypeOf(object);
       }
 
       // Object members with non-empty values are preferred since it gives the
diff --git a/devtools/client/shared/components/reps/string.js b/devtools/client/shared/components/reps/string.js
--- a/devtools/client/shared/components/reps/string.js
+++ b/devtools/client/shared/components/reps/string.js
@@ -8,22 +8,29 @@
 
 // Make this available to both AMD and CJS environments
 define(function(require, exports, module) {
   // Dependencies
   const React = require("devtools/client/shared/vendor/react");
   const { createFactories } = require("./rep-utils");
   const { ObjectBox } = createFactories(require("./object-box"));
 
+  // Shortcuts
+  const PropTypes = React.PropTypes;
+
   /**
    * Renders a string. String value is enclosed within quotes.
    */
   const StringRep = React.createClass({
     displayName: "StringRep",
 
+    propTypes: {
+      object: PropTypes.string.isRequired,
+    },
+
     render: function() {
       let text = this.props.object;
       let member = this.props.member;
       if (member && member.open) {
         return (
           ObjectBox({className: "string"},
             "\"" + text + "\""
           )
@@ -77,25 +84,28 @@ define(function(require, exports, module
     if (text.length > limit) {
       return text.substr(0, Math.ceil(halfLimit)) + alternativeText +
         text.substr(text.length - Math.floor(halfLimit));
     }
 
     return text;
   }
 
-  function isCropped(value) {
-    let cropLength = 50;
+  function isCropped(value, cropLength = 50) {
     return typeof value == "string" && value.length > cropLength;
   }
 
   function supportsObject(object, type) {
     return (type == "string");
   }
 
   // Exports from this module
 
   exports.StringRep = {
     rep: StringRep,
-    supportsObject: supportsObject,
-    isCropped: isCropped
+    supportsObject: supportsObject
   };
+
+  exports.isCropped = isCropped;
+  exports.cropString = cropString;
+  exports.cropMultipleLines = cropMultipleLines;
+  exports.escapeNewLines = escapeNewLines;
 });
