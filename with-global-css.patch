# HG changeset patch
# Parent  4c982daa151954c59f20a9b9ac805c1768a350c2
with global.css

diff --git a/devtools/client/responsive/index.xhtml b/devtools/client/responsive/index.xhtml
--- a/devtools/client/responsive/index.xhtml
+++ b/devtools/client/responsive/index.xhtml
@@ -1,16 +1,17 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <!-- This Source Code Form is subject to the terms of the Mozilla Public
    - License, v. 2.0. If a copy of the MPL was not distributed with this
    - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
 <!DOCTYPE html>
 <html xmlns="http://www.w3.org/1999/xhtml">
   <head>
     <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
+    <link rel="stylesheet" href="chrome://global/skin/global.css"/>
     <link rel="stylesheet" type="text/css"
           href="resource://devtools/client/responsive/index.css"/>
     <script src="chrome://devtools/content/shared/theme-switching.js"></script>
     <script src="resource://devtools/client/responsive/index.js"></script>
   </head>
   <body class="theme-toolbar" role="application">
     <div id="root"/>
   </body>
diff --git a/devtools/client/responsive/toolbar.xhtml b/devtools/client/responsive/toolbar.xhtml
--- a/devtools/client/responsive/toolbar.xhtml
+++ b/devtools/client/responsive/toolbar.xhtml
@@ -1,16 +1,17 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <!-- This Source Code Form is subject to the terms of the Mozilla Public
    - License, v. 2.0. If a copy of the MPL was not distributed with this
    - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
 <!DOCTYPE html>
 <html xmlns="http://www.w3.org/1999/xhtml">
   <head>
     <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
+    <link rel="stylesheet" href="chrome://global/skin/global.css"/>
     <link rel="stylesheet" type="text/css"
           href="resource://devtools/client/responsive/index.css"/>
     <script src="chrome://devtools/content/shared/theme-switching.js"></script>
     <script src="resource://devtools/client/responsive/index.js"></script>
   </head>
   <body role="application">
     <div id="root"></div>
   </body>
diff --git a/devtools/client/shared/widgets/tooltip/HTMLTooltip.js b/devtools/client/shared/widgets/tooltip/HTMLTooltip.js
--- a/devtools/client/shared/widgets/tooltip/HTMLTooltip.js
+++ b/devtools/client/shared/widgets/tooltip/HTMLTooltip.js
@@ -362,17 +362,17 @@ function HTMLTooltip(
   this.doc = toolboxDoc;
   this.id = id;
   this.className = className;
   this.type = type;
   this.noAutoHide = noAutoHide;
   // consumeOutsideClicks cannot be used if the tooltip is not closed on click
   this.consumeOutsideClicks = this.noAutoHide ? false : consumeOutsideClicks;
   this.isMenuTooltip = isMenuTooltip;
-  this.useXulWrapper = this._isXUL() && useXulWrapper;
+  this.useXulWrapper = useXulWrapper;
   this.preferredWidth = "auto";
   this.preferredHeight = "auto";
 
   // The top window is used to attach click event listeners to close the tooltip if the
   // user clicks on the content page.
   this.topWindow = this._getTopWindow();
 
   this._position = null;
@@ -391,17 +391,17 @@ function HTMLTooltip(
     //   <div> <!-- div wrapper used to isolate the tooltip container -->
     //     <div> <! the actual tooltip.container element -->
     this.xulPanelWrapper = this._createXulPanelWrapper();
     const inner = this.doc.createElementNS(XHTML_NS, "div");
     inner.classList.add("tooltip-xul-wrapper-inner");
 
     this.doc.documentElement.appendChild(this.xulPanelWrapper);
     this.xulPanelWrapper.appendChild(inner);
-    inner.appendChild(this.container);
+    inner.append("hello");
   } else if (this._isXUL()) {
     this.doc.documentElement.appendChild(this.container);
   } else {
     // In non-XUL context the container is ready to use as is.
     this.doc.body.appendChild(this.container);
   }
 }
 
diff --git a/layout/generic/nsCanvasFrame.cpp b/layout/generic/nsCanvasFrame.cpp
--- a/layout/generic/nsCanvasFrame.cpp
+++ b/layout/generic/nsCanvasFrame.cpp
@@ -144,17 +144,17 @@ nsresult nsCanvasFrame::CreateAnonymousC
       parent->RemoveChildNode(&anonContent->ContentNode(), false);
     }
 
     mCustomContentContainer->AppendChildTo(&anonContent->ContentNode(), false);
   }
 
   // Create a popupgroup element for chrome privileged top level non-XUL
   // documents to support context menus and tooltips.
-  if (PresContext()->IsChrome() && PresContext()->IsRoot() &&
+  if (PresContext()->IsChrome() &&
       doc->AllowXULXBL()) {
     nsNodeInfoManager* nodeInfoManager = doc->NodeInfoManager();
     RefPtr<NodeInfo> nodeInfo =
         nodeInfoManager->GetNodeInfo(nsGkAtoms::popupgroup, nullptr,
                                      kNameSpaceID_XUL, nsINode::ELEMENT_NODE);
 
     nsresult rv = NS_NewXULElement(getter_AddRefs(mPopupgroupContent),
                                    nodeInfo.forget(), dom::NOT_FROM_PARSER);
