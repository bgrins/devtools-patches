commit c906f7d099d028357eb6bf660a911561e727a701
Author: Bill McCloskey <billm@mozilla.com>
Date:   Mon Dec 4 16:48:32 2017 -0800

    Bug 1412456 - devtools test changes
    
    MozReview-Commit-ID: 2nQPOSGTr1s

diff --git a/devtools/client/commandline/test/helpers.js b/devtools/client/commandline/test/helpers.js
index 83ee5c9..911e785 100644
--- a/devtools/client/commandline/test/helpers.js
+++ b/devtools/client/commandline/test/helpers.js
@@ -127,34 +127,34 @@ var { helpers, assert } = (function () {
     options.isFirefox = true;
 
     var tabbrowser = options.chromeWindow.gBrowser;
     options.tab = tabbrowser.addTab();
     tabbrowser.selectedTab = options.tab;
     options.browser = tabbrowser.getBrowserForTab(options.tab);
     options.target = TargetFactory.forTab(options.tab);
 
-    var loaded = helpers.listenOnce(options.browser, "load", true).then(function (ev) {
+    var loaded = BrowserTestUtils.browserLoaded(options.browser).then(function () {
       var reply = callback.call(null, options);
 
       return Promise.resolve(reply).catch(function (error) {
         ok(false, error);
       }).then(function () {
         tabbrowser.removeTab(options.tab);
 
         delete options.target;
         delete options.browser;
         delete options.tab;
 
         delete options.chromeWindow;
         delete options.isFirefox;
       });
     });
 
-    options.browser.contentWindow.location = url;
+    options.browser.loadURI(url);
     return loaded;
   };
 
 /**
  * Open a new tab
  * @param url Address of the page to open
  * @param options Object to which we add properties describing the new tab. The
  * following properties are added:
diff --git a/devtools/client/debugger/test/mochitest/browser_dbg_WorkerActor.attach.js b/devtools/client/debugger/test/mochitest/browser_dbg_WorkerActor.attach.js
index 654a8f8..61453bf 100644
--- a/devtools/client/debugger/test/mochitest/browser_dbg_WorkerActor.attach.js
+++ b/devtools/client/debugger/test/mochitest/browser_dbg_WorkerActor.attach.js
@@ -40,17 +40,17 @@ function test() {
 
     yield createWorkerInTab(tab, WORKER2_URL);
     ({ workers } = yield listWorkers(tabClient));
     let [, workerClient2] = yield attachWorker(tabClient,
                                                findWorker(workers, WORKER2_URL));
     is(workerClient2.isClosed, false, "worker in tab 2 should not be closed");
 
     executeSoon(() => {
-      tab.linkedBrowser.contentWindow.history.back();
+      tab.linkedBrowser.goBack();
     });
     yield waitForWorkerClose(workerClient2);
     is(workerClient2.isClosed, true, "worker in tab 2 should be closed");
 
     ({ workers } = yield listWorkers(tabClient));
     [, workerClient1] = yield attachWorker(tabClient,
                                            findWorker(workers, WORKER1_URL));
     is(workerClient1.isClosed, false, "worker in tab 1 should not be closed");
diff --git a/devtools/client/debugger/test/mochitest/browser_dbg_event-listeners-01.js b/devtools/client/debugger/test/mochitest/browser_dbg_event-listeners-01.js
index f876cda..e75ebea 100644
--- a/devtools/client/debugger/test/mochitest/browser_dbg_event-listeners-01.js
+++ b/devtools/client/debugger/test/mochitest/browser_dbg_event-listeners-01.js
@@ -85,17 +85,17 @@ function testEventListeners(aThreadClient) {
       let types = [];
 
       for (let l of listeners) {
         info("Listener for the " + l.type + " event.");
         let node = l.node;
         ok(node, "There is a node property.");
         ok(node.object, "There is a node object property.");
         ok(node.selector == "window" ||
-          content.document.querySelectorAll(node.selector).length == 1,
+          gBrowser.contentDocumentAsCPOW.querySelectorAll(node.selector).length == 1,
           "The node property is a unique CSS selector.");
 
         let func = l.function;
         ok(func, "There is a function property.");
         is(func.type, "object", "The function form is of type 'object'.");
         is(func.class, "Function", "The function form is of class 'Function'.");
 
         // The onchange handler is an inline string that doesn't have
diff --git a/devtools/client/debugger/test/mochitest/browser_dbg_event-listeners-02.js b/devtools/client/debugger/test/mochitest/browser_dbg_event-listeners-02.js
index 5569306..50dd240 100644
--- a/devtools/client/debugger/test/mochitest/browser_dbg_event-listeners-02.js
+++ b/devtools/client/debugger/test/mochitest/browser_dbg_event-listeners-02.js
@@ -84,17 +84,17 @@ function testEventListeners(aThreadClient) {
       return lDeferred.promise;
     })).then(listeners => {
       is(listeners.length, 3, "Found three event listeners.");
       for (let l of listeners) {
         let node = l.node;
         ok(node, "There is a node property.");
         ok(node.object, "There is a node object property.");
         ok(node.selector == "window" ||
-          content.document.querySelectorAll(node.selector).length == 1,
+          gBrowser.contentDocumentAsCPOW.querySelectorAll(node.selector).length == 1,
           "The node property is a unique CSS selector.");
 
         let func = l.function;
         ok(func, "There is a function property.");
         is(func.type, "object", "The function form is of type 'object'.");
         is(func.class, "Function", "The function form is of class 'Function'.");
         is(func.url, TAB_URL, "The function url is correct.");
 
diff --git a/devtools/client/debugger/test/mochitest/browser_dbg_sources-contextmenu-02.js b/devtools/client/debugger/test/mochitest/browser_dbg_sources-contextmenu-02.js
index 4132014..8845c29 100644
--- a/devtools/client/debugger/test/mochitest/browser_dbg_sources-contextmenu-02.js
+++ b/devtools/client/debugger/test/mochitest/browser_dbg_sources-contextmenu-02.js
@@ -38,20 +38,20 @@ function test() {
     gBrowser.removeCurrentTab();
   }
 
   function waitForTabOpen() {
     return new Promise(resolve => {
       gBrowser.tabContainer.addEventListener("TabOpen", function (e) {
         ok(true, "A new tab loaded");
 
-        gBrowser.addEventListener("DOMContentLoaded", function (e) {
+        BrowserTestUtils.waitForContentEvent(e.target.linkedBrowser, "DOMContentLoaded").then(function () {
           // Pass along the new tab's URI.
           resolve(gBrowser.currentURI.spec);
-        }, {once: true});
+        });
       }, {once: true});
     });
   }
 
   function testNewTabMenuItem() {
     return new Promise((resolve, reject) => {
       let newTabMenuItem = gDebugger.document.getElementById("debugger-sources-context-newtab");
       if (!newTabMenuItem) {
diff --git a/devtools/client/debugger/test/mochitest/head.js b/devtools/client/debugger/test/mochitest/head.js
index 0adbb3a..07f6c85 100644
--- a/devtools/client/debugger/test/mochitest/head.js
+++ b/devtools/client/debugger/test/mochitest/head.js
@@ -562,17 +562,17 @@ let initDebugger = Task.async(function*(urlOrTab, options) {
     // `urlOrTab` is an url. Open an empty tab first in order to load the page
     // only once the panel is ready. That to be able to safely catch the
     // SOURCE_SHOWN event.
     tab = yield addTab("about:blank", window);
     url = urlOrTab;
   }
   info("Debugee tab added successfully: " + urlOrTab);
 
-  let debuggee = tab.linkedBrowser.contentWindow.wrappedJSObject;
+  let debuggee = tab.linkedBrowser.contentWindowAsCPOW.wrappedJSObject;
   let target = TargetFactory.forTab(tab);
 
   let toolbox = yield gDevTools.showToolbox(target, "jsdebugger");
   info("Debugger panel shown successfully.");
 
   let debuggerPanel = toolbox.getCurrentPanel();
   let panelWin = debuggerPanel.panelWin;
   let { Sources } = panelWin.DebuggerView;
diff --git a/devtools/client/framework/test/browser_keybindings_01.js b/devtools/client/framework/test/browser_keybindings_01.js
index 6cb4ab6..a286139 100644
--- a/devtools/client/framework/test/browser_keybindings_01.js
+++ b/devtools/client/framework/test/browser_keybindings_01.js
@@ -23,17 +23,17 @@ function test()
   waitForExplicitFinish();
 
   let doc;
   let node;
   let inspector;
   let keysetMap = { };
 
   addTab(TEST_URL).then(function () {
-    doc = content.document;
+    doc = gBrowser.contentDocumentAsCPOW;
     node = doc.querySelector("h1");
     waitForFocus(setupKeyBindingsTest);
   });
 
   function buildDevtoolsKeysetMap(keyset) {
     [].forEach.call(keyset.querySelectorAll("key"), function (key) {
 
       if (!key.getAttribute("key")) {
diff --git a/devtools/client/framework/test/browser_toolbox_options_enable_serviceworkers_testing.js b/devtools/client/framework/test/browser_toolbox_options_enable_serviceworkers_testing.js
index 3273f43..5d9b0e2 100644
--- a/devtools/client/framework/test/browser_toolbox_options_enable_serviceworkers_testing.js
+++ b/devtools/client/framework/test/browser_toolbox_options_enable_serviceworkers_testing.js
@@ -78,25 +78,20 @@ function toggleServiceWorkersTestingCheckbox() {
   }
 
   cbx.click();
 
   return promise.resolve();
 }
 
 function reload() {
-  let deferred = defer();
-
-  gBrowser.selectedBrowser.addEventListener("load", function onLoad(evt) {
-    gBrowser.selectedBrowser.removeEventListener(evt.type, onLoad, true);
-    deferred.resolve();
-  }, true);
+  let promise = BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser);
 
   executeInContent("devtools:test:reload", {}, {}, false);
-  return deferred.promise;
+  return promise;
 }
 
 function testRegisterSuccesses(data) {
   is(data.success, true, "Register should success");
   return promise.resolve();
 }
 
 function start() {
diff --git a/devtools/client/inspector/markup/test/browser_markup_load_01.js b/devtools/client/inspector/markup/test/browser_markup_load_01.js
index c0fe2be0..ad5cf83 100644
--- a/devtools/client/inspector/markup/test/browser_markup_load_01.js
+++ b/devtools/client/inspector/markup/test/browser_markup_load_01.js
@@ -69,14 +69,10 @@ function* chooseWithInspectElementContextMenu(selector, tab) {
     type: "contextmenu",
     button: 2
   }, tab.linkedBrowser);
 
   yield EventUtils.synthesizeKey("Q", {});
 }
 
 function waitForLinkedBrowserEvent(tab, event) {
-  return new Promise(resolve => {
-    tab.linkedBrowser.addEventListener(event, function () {
-      resolve();
-    }, {capture: true, once: true});
-  });
+  return BrowserTestUtils.waitForContentEvent(tab.linkedBrowser, event, true);
 }
diff --git a/devtools/client/inspector/test/browser_inspector_highlighter-05.js b/devtools/client/inspector/test/browser_inspector_highlighter-05.js
index 479e596..59caa78 100644
--- a/devtools/client/inspector/test/browser_inspector_highlighter-05.js
+++ b/devtools/client/inspector/test/browser_inspector_highlighter-05.js
@@ -45,26 +45,22 @@ const TEST_URL = "data:text/html," + encodeURIComponent(`
      </body>
   </html>
 `);
 
 add_task(function* () {
   info("Open the inspector to a blank page.");
   let { inspector, tab, testActor } = yield openInspectorForURL("about:blank");
 
-  let pageLoaded = waitForPageLoad(tab);
+  let pageLoaded = BrowserTestUtils.browserLoaded(tab.linkedBrowser);
 
   info("Navigate to the test url and waiting for the page to be loaded.");
   yield navigateTo(inspector, TEST_URL);
   yield pageLoaded;
 
   info("Shows the box model highligher for the <p> node.");
   let divFront = yield getNodeFront("p", inspector);
   yield inspector.highlighter.showBoxModel(divFront);
 
   info("Check the node is highlighted.");
   is(yield testActor.isHighlighting(), true,
     "Box Model highlighter is working as expected.");
 });
-
-const waitForPageLoad = (tab) => new Promise(resolve => {
-  tab.linkedBrowser.addEventListener("load", resolve, {capture: true, once: true});
-});
diff --git a/devtools/client/inspector/test/browser_inspector_startup.js b/devtools/client/inspector/test/browser_inspector_startup.js
index 74f7006..edd144f 100644
--- a/devtools/client/inspector/test/browser_inspector_startup.js
+++ b/devtools/client/inspector/test/browser_inspector_startup.js
@@ -64,20 +64,16 @@ add_task(function* () {
   response.finish();
 
   // We should then receive the page load event
   info("Wait for load");
   yield pageLoaded;
 });
 
 function waitForLinkedBrowserEvent(tab, event) {
-  return new Promise(resolve => {
-    tab.linkedBrowser.addEventListener(event, function () {
-      resolve();
-    }, {capture: true, once: true});
-  });
+  return BrowserTestUtils.waitForContentEvent(tab.linkedBrowser, event, true);
 }
 
 function contentReadyState(tab) {
   return ContentTask.spawn(tab.linkedBrowser, null, function () {
     return content.document.readyState;
   });
 }
diff --git a/devtools/client/responsive.html/test/browser/browser_window_close.js b/devtools/client/responsive.html/test/browser/browser_window_close.js
index 29d9d1e..4d127f2 100644
--- a/devtools/client/responsive.html/test/browser/browser_window_close.js
+++ b/devtools/client/responsive.html/test/browser/browser_window_close.js
@@ -4,17 +4,17 @@
 "use strict";
 
 add_task(function* () {
   let newWindowPromise = BrowserTestUtils.waitForNewWindow();
   window.open("data:text/html;charset=utf-8,", "_blank");
   let newWindow = yield newWindowPromise;
 
   newWindow.focus();
-  yield once(newWindow.gBrowser, "load", true);
+  yield BrowserTestUtils.browserLoaded(newWindow.gBrowser.selectedBrowser);
 
   let tab = newWindow.gBrowser.selectedTab;
   yield openRDM(tab);
 
   // Close the window on a tab with an active responsive design UI and
   // wait for the UI to gracefully shutdown.  This has leaked the window
   // in the past.
   ok(ResponsiveUIManager.isActiveForTab(tab),
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_browser_last_window_closing.js b/devtools/client/scratchpad/test/browser_scratchpad_browser_last_window_closing.js
index 811a070..1736db4 100644
--- a/devtools/client/scratchpad/test/browser_scratchpad_browser_last_window_closing.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_browser_last_window_closing.js
@@ -9,21 +9,21 @@ const BUTTON_POSITION_DONT_SAVE = 2;
 function test()
 {
   waitForExplicitFinish();
 
   // Observer must be attached *before* Scratchpad is opened.
   CloseObserver.init();
 
   gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser);
-  gBrowser.selectedBrowser.addEventListener("load", function () {
+  BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(function () {
     openScratchpad(runTests);
-  }, {capture: true, once: true});
+  });
 
-  content.location = "data:text/html;charset=utf8,<p>test browser last window closing</p>";
+  gBrowser.loadURI("data:text/html;charset=utf8,<p>test browser last window closing</p>");
 }
 
 
 
 function runTests({ Scratchpad })
 {
   let browser = Services.wm.getEnumerator("navigator:browser").getNext();
   let oldPrompt = Services.prompt;
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_chrome_context_pref.js b/devtools/client/scratchpad/test/browser_scratchpad_chrome_context_pref.js
index 7d22814..c58739a 100644
--- a/devtools/client/scratchpad/test/browser_scratchpad_chrome_context_pref.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_chrome_context_pref.js
@@ -7,21 +7,21 @@ var DEVTOOLS_CHROME_ENABLED = "devtools.chrome.enabled";
 
 function test()
 {
   waitForExplicitFinish();
 
   Services.prefs.setBoolPref(DEVTOOLS_CHROME_ENABLED, true);
 
   gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser);
-  gBrowser.selectedBrowser.addEventListener("load", function () {
+  BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(function () {
     openScratchpad(runTests);
-  }, {capture: true, once: true});
+  });
 
-  content.location = "data:text/html,Scratchpad test for bug 646070 - chrome context preference";
+  gBrowser.loadURI("data:text/html,Scratchpad test for bug 646070 - chrome context preference");
 }
 
 function runTests()
 {
   let sp = gScratchpadWindow.Scratchpad;
   ok(sp, "Scratchpad object exists in new window");
 
   let environmentMenu = gScratchpadWindow.document.
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_contexts.js b/devtools/client/scratchpad/test/browser_scratchpad_contexts.js
index e41b825..738ece6 100644
--- a/devtools/client/scratchpad/test/browser_scratchpad_contexts.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_contexts.js
@@ -2,21 +2,21 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 "use strict";
 
 function test() {
   waitForExplicitFinish();
 
   gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser);
-  gBrowser.selectedBrowser.addEventListener("load", function () {
+  BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(function () {
     openScratchpad(runTests);
-  }, {capture: true, once: true});
+  });
 
-  content.location = "data:text/html,test context switch in Scratchpad";
+  gBrowser.loadURI("data:text/html,test context switch in Scratchpad");
 }
 
 function runTests() {
   let sp = gScratchpadWindow.Scratchpad;
   let contentMenu = gScratchpadWindow.document.getElementById("sp-menu-content");
   let chromeMenu = gScratchpadWindow.document.getElementById("sp-menu-browser");
   let notificationBox = sp.notificationBox;
 
@@ -44,17 +44,17 @@ function runTests() {
       sp.editor.setText("window.foobarBug636725 = 'aloha';");
 
       let pageResult = yield inContent(function* () {
         return content.wrappedJSObject.foobarBug636725;
       });
       ok(!pageResult, "no content.foobarBug636725");
     },
     then: function* () {
-      is(content.wrappedJSObject.foobarBug636725, "aloha",
+      is(gBrowser.contentWindowAsCPOW.wrappedJSObject.foobarBug636725, "aloha",
          "content.foobarBug636725 has been set");
     }
   }, {
     method: "run",
     prepare: function* () {
       sp.setBrowserContext();
 
       is(sp.executionContext, gScratchpadWindow.SCRATCHPAD_CONTEXT_BROWSER,
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_display_non_error_exceptions.js b/devtools/client/scratchpad/test/browser_scratchpad_display_non_error_exceptions.js
index 7f136a8..e695744 100644
--- a/devtools/client/scratchpad/test/browser_scratchpad_display_non_error_exceptions.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_display_non_error_exceptions.js
@@ -3,22 +3,22 @@
    http://creativecommons.org/publicdomain/zero/1.0/ */
 /* Bug 756681 */
 
 function test()
 {
   waitForExplicitFinish();
 
   gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser);
-  gBrowser.selectedBrowser.addEventListener("load", function () {
+  BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(function () {
     openScratchpad(runTests, {"state":{"text":""}});
-  }, {capture: true, once: true});
+  });
 
-  content.location = "data:text/html, test that exceptions are output as " +
-      "comments correctly in Scratchpad";
+  gBrowser.loadURI("data:text/html, test that exceptions are output as " +
+                   "comments correctly in Scratchpad");
 }
 
 function runTests()
 {
   var scratchpad = gScratchpadWindow.Scratchpad;
 
   var message = "\"Hello World!\"";
   var openComment = "\n/*\n";
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_display_outputs_errors.js b/devtools/client/scratchpad/test/browser_scratchpad_display_outputs_errors.js
index 66616dd..a96a3b61 100644
--- a/devtools/client/scratchpad/test/browser_scratchpad_display_outputs_errors.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_display_outputs_errors.js
@@ -3,22 +3,22 @@
    http://creativecommons.org/publicdomain/zero/1.0/ */
 /* Bug 690552 */
 
 function test()
 {
   waitForExplicitFinish();
 
   gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser);
-  gBrowser.selectedBrowser.addEventListener("load", function () {
+  BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(function () {
     openScratchpad(runTests, {"state":{"text":""}});
-  }, {capture: true, once: true});
+  });
 
-  content.location = "data:text/html,<p>test that exceptions are output as " +
-      "comments for 'display' and not sent to the console in Scratchpad";
+  gBrowser.loadURI("data:text/html,<p>test that exceptions are output as " +
+                   "comments for 'display' and not sent to the console in Scratchpad");
 }
 
 function runTests()
 {
   let scratchpad = gScratchpadWindow.Scratchpad;
 
   let message = "\"Hello World!\"";
   let openComment = "\n/*\n";
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_edit_ui_updates.js b/devtools/client/scratchpad/test/browser_scratchpad_edit_ui_updates.js
index b67d63f..3551981 100644
--- a/devtools/client/scratchpad/test/browser_scratchpad_edit_ui_updates.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_edit_ui_updates.js
@@ -8,21 +8,21 @@
 var WebConsoleUtils = require("devtools/client/webconsole/utils").Utils;
 var DEVTOOLS_CHROME_ENABLED = "devtools.chrome.enabled";
 
 function test()
 {
   waitForExplicitFinish();
   gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser);
   Services.prefs.setBoolPref(DEVTOOLS_CHROME_ENABLED, false);
-  gBrowser.selectedBrowser.addEventListener("load", function () {
+  BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(function () {
     openScratchpad(runTests);
-  }, {capture: true, once: true});
+  });
 
-  content.location = "data:text/html,test Edit menu updates Scratchpad - bug 699130";
+  gBrowser.loadURI("data:text/html,test Edit menu updates Scratchpad - bug 699130");
 }
 
 function runTests()
 {
   let sp = gScratchpadWindow.Scratchpad;
   let doc = gScratchpadWindow.document;
   let winUtils = gScratchpadWindow.QueryInterface(Ci.nsIInterfaceRequestor).
                  getInterface(Ci.nsIDOMWindowUtils);
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_eval_func.js b/devtools/client/scratchpad/test/browser_scratchpad_eval_func.js
index 7cb1de4..5b7d80c 100644
--- a/devtools/client/scratchpad/test/browser_scratchpad_eval_func.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_eval_func.js
@@ -2,21 +2,21 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 function test()
 {
   waitForExplicitFinish();
 
   gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser);
-  gBrowser.selectedBrowser.addEventListener("load", function () {
+  BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(function () {
     openScratchpad(runTests);
-  }, {capture: true, once: true});
+  });
 
-  content.location = "data:text/html;charset=utf8,test Scratchpad eval function.";
+  gBrowser.loadURI("data:text/html;charset=utf8,test Scratchpad eval function.");
 }
 
 function reportErrorAndQuit(error) {
   DevToolsUtils.reportException("browser_scratchpad_eval_func.js", error);
   ok(false);
   finish();
 }
 
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_execute_print.js b/devtools/client/scratchpad/test/browser_scratchpad_execute_print.js
index 950bb5f..804cea1 100644
--- a/devtools/client/scratchpad/test/browser_scratchpad_execute_print.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_execute_print.js
@@ -2,21 +2,21 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 "use strict";
 
 function test() {
   waitForExplicitFinish();
 
   gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser);
-  gBrowser.selectedBrowser.addEventListener("load", function () {
+  BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(function () {
     openScratchpad(runTests);
-  }, {capture: true, once: true});
+  });
 
-  content.location = "data:text/html,<p>test run() and display() in Scratchpad";
+  gBrowser.loadURI("data:text/html,<p>test run() and display() in Scratchpad");
 }
 
 function runTests() {
   let sp = gScratchpadWindow.Scratchpad;
   let tests = [{
     method: "run",
     prepare: function* () {
       yield inContent(function* () {
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_falsy.js b/devtools/client/scratchpad/test/browser_scratchpad_falsy.js
index ad5b593..8dc560f 100644
--- a/devtools/client/scratchpad/test/browser_scratchpad_falsy.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_falsy.js
@@ -3,21 +3,21 @@
    http://creativecommons.org/publicdomain/zero/1.0/ */
 /* Bug 679467 */
 
 function test()
 {
   waitForExplicitFinish();
 
   gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser);
-  gBrowser.selectedBrowser.addEventListener("load", function () {
+  BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(function () {
     openScratchpad(testFalsy);
-  }, {capture: true, once: true});
+  });
 
-  content.location = "data:text/html,<p>test falsy display() values in Scratchpad";
+  gBrowser.loadURI("data:text/html,<p>test falsy display() values in Scratchpad");
 }
 
 function testFalsy()
 {
   let scratchpad = gScratchpadWindow.Scratchpad;
   verifyFalsies(scratchpad).then(function () {
     scratchpad.setBrowserContext();
     verifyFalsies(scratchpad).then(finish);
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_files.js b/devtools/client/scratchpad/test/browser_scratchpad_files.js
index 1dba4cd..d39f7a6 100644
--- a/devtools/client/scratchpad/test/browser_scratchpad_files.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_files.js
@@ -11,21 +11,21 @@ var gFile;
 // The temporary file content.
 var gFileContent = "hello.world('bug636725');";
 
 function test()
 {
   waitForExplicitFinish();
 
   gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser);
-  gBrowser.selectedBrowser.addEventListener("load", function () {
+  BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(function () {
     openScratchpad(runTests);
-  }, {capture: true, once: true});
+  });
 
-  content.location = "data:text/html,<p>test file open and save in Scratchpad";
+  gBrowser.loadURI("data:text/html,<p>test file open and save in Scratchpad");
 }
 
 function runTests()
 {
   gScratchpad = gScratchpadWindow.Scratchpad;
 
   createTempFile("fileForBug636725.tmp", gFileContent, function (aStatus, aFile) {
     ok(Components.isSuccessCode(aStatus),
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_goto_line_ui.js b/devtools/client/scratchpad/test/browser_scratchpad_goto_line_ui.js
index 6350ecd..b29ba6b 100644
--- a/devtools/client/scratchpad/test/browser_scratchpad_goto_line_ui.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_goto_line_ui.js
@@ -3,21 +3,21 @@
    http://creativecommons.org/publicdomain/zero/1.0/ */
 /* Bug 714942 */
 
 function test()
 {
   waitForExplicitFinish();
 
   gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser);
-  gBrowser.selectedBrowser.addEventListener("load", function () {
+  BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(function () {
     openScratchpad(runTests);
-  }, {capture: true, once: true});
+  });
 
-  content.location = "data:text/html,<p>test the 'Jump to line' feature in Scratchpad";
+  gBrowser.loadURI("data:text/html,<p>test the 'Jump to line' feature in Scratchpad");
 }
 
 function runTests(aWindow, aScratchpad)
 {
   let editor = aScratchpad.editor;
   let text = "foobar bug650345\nBug650345 bazbaz\nfoobar omg\ntest";
   editor.setText(text);
   editor.setCursor({ line: 0, ch: 0 });
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_help_key.js b/devtools/client/scratchpad/test/browser_scratchpad_help_key.js
index 26116da..7688d4c 100644
--- a/devtools/client/scratchpad/test/browser_scratchpad_help_key.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_help_key.js
@@ -3,20 +3,20 @@
    http://creativecommons.org/publicdomain/zero/1.0/ */
 /* Bug 650760 */
 
 function test()
 {
   waitForExplicitFinish();
 
   gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser);
-  content.location = "data:text/html,Test keybindings for opening Scratchpad MDN Documentation, bug 650760";
-  gBrowser.selectedBrowser.addEventListener("load", function () {
+  gBrowser.loadURI("data:text/html,Test keybindings for opening Scratchpad MDN Documentation, bug 650760");
+  BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(function () {
     openScratchpad(runTest);
-  }, {capture: true, once: true});
+  });
 }
 
 function runTest()
 {
   let sp = gScratchpadWindow.Scratchpad;
   ok(sp, "Scratchpad object exists in new window");
   ok(sp.editor.hasFocus(), "the editor has focus");
 
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_initialization.js b/devtools/client/scratchpad/test/browser_scratchpad_initialization.js
index 3f94970..9423900 100644
--- a/devtools/client/scratchpad/test/browser_scratchpad_initialization.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_initialization.js
@@ -5,21 +5,21 @@
 var DEVTOOLS_CHROME_ENABLED = "devtools.chrome.enabled";
 
 function test()
 {
   waitForExplicitFinish();
 
   Services.prefs.setBoolPref(DEVTOOLS_CHROME_ENABLED, false);
   gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser);
-  gBrowser.selectedBrowser.addEventListener("load", function () {
+  BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(function () {
     openScratchpad(runTests);
-  }, {capture: true, once: true});
+  });
 
-  content.location = "data:text/html,initialization test for Scratchpad";
+  gBrowser.loadURI("data:text/html,initialization test for Scratchpad");
 }
 
 function runTests()
 {
   let sp = gScratchpadWindow.Scratchpad;
   ok(sp, "Scratchpad object exists in new window");
   is(typeof sp.run, "function", "Scratchpad.run() exists");
   is(typeof sp.inspect, "function", "Scratchpad.inspect() exists");
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_inspect.js b/devtools/client/scratchpad/test/browser_scratchpad_inspect.js
index 51657c3..69ed201 100644
--- a/devtools/client/scratchpad/test/browser_scratchpad_inspect.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_inspect.js
@@ -2,21 +2,21 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 function test()
 {
   waitForExplicitFinish();
 
   gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser);
-  gBrowser.selectedBrowser.addEventListener("load", function () {
+  BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(function () {
     openScratchpad(runTests);
-  }, {capture: true, once: true});
+  });
 
-  content.location = "data:text/html;charset=utf8,<p>test inspect() in Scratchpad</p>";
+  gBrowser.loadURI("data:text/html;charset=utf8,<p>test inspect() in Scratchpad</p>");
 }
 
 function runTests()
 {
   let sp = gScratchpadWindow.Scratchpad;
 
   sp.setText("({ a: 'foobarBug636725' })");
 
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_long_string.js b/devtools/client/scratchpad/test/browser_scratchpad_long_string.js
index 1012543..797484f 100644
--- a/devtools/client/scratchpad/test/browser_scratchpad_long_string.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_long_string.js
@@ -2,21 +2,21 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 function test()
 {
   waitForExplicitFinish();
 
   gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser);
-  gBrowser.selectedBrowser.addEventListener("load", function () {
+  BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(function () {
     openScratchpad(runTests);
-  }, {capture: true, once: true});
+  });
 
-  content.location = "data:text/html;charset=utf8,<p>test long string in Scratchpad</p>";
+  gBrowser.loadURI("data:text/html;charset=utf8,<p>test long string in Scratchpad</p>");
 }
 
 function runTests()
 {
   let sp = gScratchpadWindow.Scratchpad;
 
   sp.setText("'0'.repeat(10000)");
 
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_modeline.js b/devtools/client/scratchpad/test/browser_scratchpad_modeline.js
index c384979..dc7ff23 100644
--- a/devtools/client/scratchpad/test/browser_scratchpad_modeline.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_modeline.js
@@ -10,21 +10,21 @@ var DEVTOOLS_CHROME_ENABLED = "devtools.chrome.enabled";
 // The temporary file content.
 var gFileContent = "function main() { return 0; }";
 
 function test() {
   waitForExplicitFinish();
 
   Services.prefs.setBoolPref(DEVTOOLS_CHROME_ENABLED, false);
   gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser);
-  gBrowser.selectedBrowser.addEventListener("load", function () {
+  BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(function () {
     openScratchpad(runTests);
-  }, {capture: true, once: true});
+  });
 
-  content.location = "data:text/html,<p>test file open and save in Scratchpad";
+  gBrowser.loadURI("data:text/html,<p>test file open and save in Scratchpad");
 }
 
 function runTests() {
   gScratchpad = gScratchpadWindow.Scratchpad;
   function size(obj) { return Object.keys(obj).length; }
 
   // Test Scratchpad._scanModeLine method.
   let obj = gScratchpad._scanModeLine();
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_open_error_console.js b/devtools/client/scratchpad/test/browser_scratchpad_open_error_console.js
index 2980910..379a5c1 100644
--- a/devtools/client/scratchpad/test/browser_scratchpad_open_error_console.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_open_error_console.js
@@ -4,22 +4,22 @@
 
 const {HUDService} = require("devtools/client/webconsole/hudservice");
 
 function test()
 {
   waitForExplicitFinish();
 
   gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser);
-  gBrowser.selectedBrowser.addEventListener("load", function () {
+  BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(function () {
     openScratchpad(runTests);
-  }, {capture: true, once: true});
+  });
 
-  content.location = "data:text/html;charset=utf8,test Scratchpad." +
-                     "openErrorConsole()";
+  gBrowser.loadURI("data:text/html;charset=utf8,test Scratchpad." +
+                   "openErrorConsole()");
 }
 
 function runTests()
 {
   Services.obs.addObserver(function observer(aSubject) {
     Services.obs.removeObserver(observer, "web-console-created");
     aSubject.QueryInterface(Ci.nsISupportsString);
 
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_pprint-02.js b/devtools/client/scratchpad/test/browser_scratchpad_pprint-02.js
index 996f571..92f50d7 100644
--- a/devtools/client/scratchpad/test/browser_scratchpad_pprint-02.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_pprint-02.js
@@ -2,21 +2,21 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 function test()
 {
   waitForExplicitFinish();
 
   gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser);
-  gBrowser.selectedBrowser.addEventListener("load", function () {
+  BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(function () {
     openScratchpad(runTests);
-  }, {capture: true, once: true});
+  });
 
-  content.location = "data:text/html;charset=utf8,test Scratchpad pretty print.";
+  gBrowser.loadURI("data:text/html;charset=utf8,test Scratchpad pretty print.");
 }
 
 var gTabsize;
 
 function runTests(sw)
 {
   gTabsize = Services.prefs.getIntPref("devtools.editor.tabsize");
   Services.prefs.setIntPref("devtools.editor.tabsize", 6);
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_pprint.js b/devtools/client/scratchpad/test/browser_scratchpad_pprint.js
index 28ff0cd..222e76b 100644
--- a/devtools/client/scratchpad/test/browser_scratchpad_pprint.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_pprint.js
@@ -2,21 +2,21 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 function test()
 {
   waitForExplicitFinish();
 
   gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser);
-  gBrowser.selectedBrowser.addEventListener("load", function () {
+  BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(function () {
     openScratchpad(runTests);
-  }, {capture: true, once: true});
+  });
 
-  content.location = "data:text/html;charset=utf8,test Scratchpad pretty print.";
+  gBrowser.loadURI("data:text/html;charset=utf8,test Scratchpad pretty print.");
 }
 
 function runTests(sw)
 {
   const sp = sw.Scratchpad;
   sp.setText("function main() { console.log(5); }");
   sp.prettyPrint().then(() => {
     const prettyText = sp.getText();
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_pprint_error_goto_line.js b/devtools/client/scratchpad/test/browser_scratchpad_pprint_error_goto_line.js
index 0067711..3b7e74c 100644
--- a/devtools/client/scratchpad/test/browser_scratchpad_pprint_error_goto_line.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_pprint_error_goto_line.js
@@ -5,22 +5,22 @@
 
 "use strict";
 
 function test()
 {
   waitForExplicitFinish();
 
   gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser);
-  gBrowser.selectedBrowser.addEventListener("load", function () {
+  BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(function () {
     openScratchpad(runTests);
-  }, {capture: true, once: true});
+  });
 
-  content.location = "data:text/html;charset=utf8,"
-    + "test Scratchpad pretty print error goto line.";
+  gBrowser.loadURI("data:text/html;charset=utf8,"
+                   + "test Scratchpad pretty print error goto line.");
 }
 
 function testJumpToPrettyPrintError(sp, error, remark) {
   info("will test jumpToLine after prettyPrint error" + remark);
 
   // CodeMirror lines and columns are 0-based, Scratchpad UI and error
   // stack are 1-based.
   is(/Invalid regular expression flag \(3:10\)/.test(error), true,
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_recent_files.js b/devtools/client/scratchpad/test/browser_scratchpad_recent_files.js
index a7d9902..185ca7a 100644
--- a/devtools/client/scratchpad/test/browser_scratchpad_recent_files.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_recent_files.js
@@ -331,19 +331,19 @@ function test()
 
   Services.prefs.setIntPref("devtools.scratchpad.recentFilesMax", 3);
 
   // Initiate the preference observer after we have set the temporary recent
   // files max for this test.
   PreferenceObserver.init();
 
   gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser);
-  gBrowser.selectedBrowser.addEventListener("load", function () {
+  BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(function () {
     openScratchpad(startTest);
-  }, {capture: true, once: true});
+  });
 
-  content.location = "data:text/html,<p>test recent files in Scratchpad";
+  gBrowser.loadURI("data:text/html,<p>test recent files in Scratchpad");
 }
 
 function finishTest()
 {
   finish();
 }
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_reload_and_run.js b/devtools/client/scratchpad/test/browser_scratchpad_reload_and_run.js
index 39bbaa2..3a53892 100644
--- a/devtools/client/scratchpad/test/browser_scratchpad_reload_and_run.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_reload_and_run.js
@@ -12,21 +12,21 @@ var EDITOR_TEXT = [
 
 function test()
 {
   requestLongerTimeout(2);
   waitForExplicitFinish();
   Services.prefs.setBoolPref(DEVTOOLS_CHROME_ENABLED, true);
 
   gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser);
-  gBrowser.selectedBrowser.addEventListener("load", function () {
+  BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(function () {
     openScratchpad(runTests);
-  }, {capture: true, once: true});
+  });
 
-  content.location = "data:text/html,Scratchpad test for bug 740948";
+  gBrowser.loadURI("data:text/html,Scratchpad test for bug 740948");
 }
 
 function runTests()
 {
   let sp = gScratchpadWindow.Scratchpad;
   ok(sp, "Scratchpad object exists in new window");
 
   // Test that Reload And Run command is enabled in the content
@@ -49,23 +49,23 @@ function runTests()
   // code has been executed.
 
   sp.setContentContext();
   sp.setText(EDITOR_TEXT);
 
   let browser = gBrowser.selectedBrowser;
 
   let deferred = defer();
-  browser.addEventListener("DOMWindowCreated", function () {
-    browser.contentWindow.addEventListener("foo", function () {
+  browser.contentWindowAsCPOW.addEventListener("DOMWindowCreated", function () {
+    browser.contentWindowAsCPOW.addEventListener("foo", function () {
       is(browser.contentWindow.document.body.innerHTML, "Modified text",
         "After reloading, HTML is different.");
 
       Services.prefs.clearUserPref(DEVTOOLS_CHROME_ENABLED);
       deferred.resolve();
     }, {capture: true, once: true});
   }, {capture: true, once: true});
 
-  ok(browser.contentWindow.document.body.innerHTML !== "Modified text",
+  ok(browser.contentWindowAsCPOW.document.body.innerHTML !== "Modified text",
       "Before reloading, HTML is intact.");
   sp.reloadAndRun().then(deferred.promise).then(finish);
 }
 
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_remember_view_options.js b/devtools/client/scratchpad/test/browser_scratchpad_remember_view_options.js
index b8db910..ec56ef7 100644
--- a/devtools/client/scratchpad/test/browser_scratchpad_remember_view_options.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_remember_view_options.js
@@ -8,22 +8,22 @@ function test()
 {
   waitForExplicitFinish();
 
   // To test for this bug we open a Scratchpad window and change all
   // view menu options. After each change we compare the correspondent
   // preference value with the expected value.
 
   gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser);
-  gBrowser.selectedBrowser.addEventListener("load", function () {
+  BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(function () {
     openScratchpad(runTests);
-  }, {capture: true, once: true});
+  });
 
-  content.location = "data:text/html,<title>Bug 1140839</title>" +
-    "<p>test Scratchpad should remember View options";
+  gBrowser.loadURI("data:text/html,<title>Bug 1140839</title>" +
+                   "<p>test Scratchpad should remember View options");
 }
 
 function runTests()
 {
   let sp = gScratchpadWindow.Scratchpad;
   let doc = gScratchpadWindow.document;
 
   let testData = [
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_reset_undo.js b/devtools/client/scratchpad/test/browser_scratchpad_reset_undo.js
index 1e922a2..de773d8 100644
--- a/devtools/client/scratchpad/test/browser_scratchpad_reset_undo.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_reset_undo.js
@@ -20,21 +20,21 @@ var gFileBContent = "// File B ** Goodbye All";
 // Help track if one or both files are saved
 var gFirstFileSaved = false;
 
 function test()
 {
   waitForExplicitFinish();
 
   gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser);
-  gBrowser.selectedBrowser.addEventListener("load", function () {
+  BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(function () {
     openScratchpad(runTests);
-  }, {capture: true, once: true});
+  });
 
-  content.location = "data:text/html,<p>test that undo get's reset after file load in Scratchpad";
+  gBrowser.loadURI("data:text/html,<p>test that undo get's reset after file load in Scratchpad");
 }
 
 function runTests()
 {
   gScratchpad = gScratchpadWindow.Scratchpad;
 
   // Create a temporary file.
   gFileA = FileUtils.getFile("TmpD", ["fileAForBug684546.tmp"]);
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_revert_to_saved.js b/devtools/client/scratchpad/test/browser_scratchpad_revert_to_saved.js
index 4cb1a2b..21480e1 100644
--- a/devtools/client/scratchpad/test/browser_scratchpad_revert_to_saved.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_revert_to_saved.js
@@ -119,15 +119,15 @@ function tempFileSaved(aStatus)
                              testAfterSaved);
 }
 
 function test()
 {
   waitForExplicitFinish();
 
   gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser);
-  gBrowser.selectedBrowser.addEventListener("load", function () {
+  BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(function () {
     openScratchpad(startTest);
-  }, {capture: true, once: true});
+  });
 
-  content.location = "data:text/html,<p>test reverting to last saved state of" +
-                     " a file </p>";
+  gBrowser.loadURI("data:text/html,<p>test reverting to last saved state of" +
+                   " a file </p>");
 }
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_run_error_goto_line.js b/devtools/client/scratchpad/test/browser_scratchpad_run_error_goto_line.js
index 4e176b4..3305917 100644
--- a/devtools/client/scratchpad/test/browser_scratchpad_run_error_goto_line.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_run_error_goto_line.js
@@ -5,21 +5,21 @@
 
 "use strict";
 
 function test()
 {
   waitForExplicitFinish();
 
   gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser);
-  gBrowser.selectedBrowser.addEventListener("load", function () {
+  BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(function () {
     openScratchpad(runTests);
-  }, {capture: true, once: true});
+  });
 
-  content.location = "data:text/html;charset=utf8,test Scratchpad pretty print.";
+  gBrowser.loadURI("data:text/html;charset=utf8,test Scratchpad pretty print.");
 }
 
 function runTests(sw)
 {
   const sp = sw.Scratchpad;
   sp.setText([
     "// line 1",
     "// line 2",
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_tab.js b/devtools/client/scratchpad/test/browser_scratchpad_tab.js
index c48f1b4..96684d2e 100644
--- a/devtools/client/scratchpad/test/browser_scratchpad_tab.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_tab.js
@@ -4,23 +4,23 @@
 /* Bug 660560 */
 
 "use strict";
 
 function test() {
   waitForExplicitFinish();
 
   gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser);
-  gBrowser.selectedBrowser.addEventListener("load", function () {
+  BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(function () {
     Services.prefs.setIntPref("devtools.editor.tabsize", 5);
 
     openScratchpad(runTests);
-  }, {capture: true, once: true});
+  });
 
-  content.location = "data:text/html,Scratchpad test for the Tab key, bug 660560";
+  gBrowser.loadURI("data:text/html,Scratchpad test for the Tab key, bug 660560");
 }
 
 function runTests() {
   let sp = gScratchpadWindow.Scratchpad;
   ok(sp, "Scratchpad object exists in new window");
 
   ok(sp.editor.hasFocus(), "the editor has focus");
 
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_tab_switch.js b/devtools/client/scratchpad/test/browser_scratchpad_tab_switch.js
index 1a55fca..5eaaeab 100644
--- a/devtools/client/scratchpad/test/browser_scratchpad_tab_switch.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_tab_switch.js
@@ -7,26 +7,26 @@ var tab2;
 var sp;
 
 function test()
 {
   waitForExplicitFinish();
 
   tab1 = BrowserTestUtils.addTab(gBrowser);
   gBrowser.selectedTab = tab1;
-  gBrowser.selectedBrowser.addEventListener("load", function () {
+  BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(function () {
     tab2 = BrowserTestUtils.addTab(gBrowser);
     gBrowser.selectedTab = tab2;
-    gBrowser.selectedBrowser.addEventListener("load", function () {
+    BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(function () {
       openScratchpad(runTests);
-    }, {capture: true, once: true});
-    content.location = "data:text/html,test context switch in Scratchpad tab 2";
-  }, {capture: true, once: true});
+    });
+    gBrowser.loadURI("data:text/html,test context switch in Scratchpad tab 2");
+  });
 
-  content.location = "data:text/html,test context switch in Scratchpad tab 1";
+  gBrowser.loadURI("data:text/html,test context switch in Scratchpad tab 1");
 }
 
 function runTests()
 {
   sp = gScratchpadWindow.Scratchpad;
 
   let contentMenu = gScratchpadWindow.document.getElementById("sp-menu-content");
   let browserMenu = gScratchpadWindow.document.getElementById("sp-menu-browser");
@@ -47,21 +47,21 @@ function runTests()
   isnot(browserMenu.getAttribute("checked"), "true",
      "chrome menuitem is not checked");
 
   is(notificationBox.currentNotification, null,
      "there is no notification currently shown for content context");
 
   sp.setText("window.foosbug653108 = 'aloha';");
 
-  ok(!content.wrappedJSObject.foosbug653108,
+  ok(!gBrowser.contentWindowAsCPOW.wrappedJSObject.foosbug653108,
      "no content.foosbug653108");
 
   sp.run().then(function () {
-    is(content.wrappedJSObject.foosbug653108, "aloha",
+    is(gBrowser.contentWindowAsCPOW.wrappedJSObject.foosbug653108, "aloha",
        "content.foosbug653108 has been set");
 
     gBrowser.tabContainer.addEventListener("TabSelect", runTests2, true);
     gBrowser.selectedTab = tab1;
   });
 }
 
 function runTests2() {
@@ -70,27 +70,26 @@ function runTests2() {
   ok(!window.foosbug653108, "no window.foosbug653108");
 
   sp.setText("window.foosbug653108");
   sp.run().then(function ([, , result]) {
     isnot(result, "aloha", "window.foosbug653108 is not aloha");
 
     sp.setText("window.foosbug653108 = 'ahoyhoy';");
     sp.run().then(function () {
-      is(content.wrappedJSObject.foosbug653108, "ahoyhoy",
+      is(gBrowser.contentWindowAsCPOW.wrappedJSObject.foosbug653108, "ahoyhoy",
          "content.foosbug653108 has been set 2");
 
-      gBrowser.selectedBrowser.addEventListener("load", runTests3, true);
-      content.location = "data:text/html,test context switch in Scratchpad location 2";
+      BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(runTests3);
+      gBrowser.loadURI("data:text/html,test context switch in Scratchpad location 2");
     });
   });
 }
 
 function runTests3() {
-  gBrowser.selectedBrowser.removeEventListener("load", runTests3, true);
   // Check that the sandbox is not cached.
 
   sp.setText("typeof foosbug653108;");
   sp.run().then(function ([, , result]) {
     is(result, "undefined", "global variable does not exist");
 
     tab1 = null;
     tab2 = null;
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_throw_output.js b/devtools/client/scratchpad/test/browser_scratchpad_throw_output.js
index 2e79707..9bf3b20 100644
--- a/devtools/client/scratchpad/test/browser_scratchpad_throw_output.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_throw_output.js
@@ -3,21 +3,21 @@
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 
 function test()
 {
   waitForExplicitFinish();
 
   gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser);
-  gBrowser.selectedBrowser.addEventListener("load", function () {
+  BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(function () {
     openScratchpad(testThrowOutput);
-  }, {capture: true, once: true});
+  });
 
-  content.location = "data:text/html;charset=utf8,<p>Test throw outputs in Scratchpad</p>";
+  gBrowser.loadURI("data:text/html;charset=utf8,<p>Test throw outputs in Scratchpad</p>");
 }
 
 function testThrowOutput()
 {
   let scratchpad = gScratchpadWindow.Scratchpad, tests = [];
 
   let falsyValues = ["false", "0", "-0", "null", "undefined", "Infinity",
                       "-Infinity", "NaN"];
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_ui.js b/devtools/client/scratchpad/test/browser_scratchpad_ui.js
index 5fda567..d5cb5c1 100644
--- a/devtools/client/scratchpad/test/browser_scratchpad_ui.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_ui.js
@@ -2,22 +2,22 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 function test()
 {
   waitForExplicitFinish();
 
   gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser);
-  gBrowser.selectedBrowser.addEventListener("load", function () {
+  BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(function () {
     openScratchpad(runTests);
-  }, {capture: true, once: true});
+  });
 
-  content.location = "data:text/html,<title>foobarBug636725</title>" +
-    "<p>test inspect() in Scratchpad";
+  gBrowser.loadURI("data:text/html,<title>foobarBug636725</title>" +
+                   "<p>test inspect() in Scratchpad");
 }
 
 function runTests()
 {
   let sp = gScratchpadWindow.Scratchpad;
   let doc = gScratchpadWindow.document;
 
   let methodsAndItems = {
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_unsaved.js b/devtools/client/scratchpad/test/browser_scratchpad_unsaved.js
index 9d2ebdf..713d673 100644
--- a/devtools/client/scratchpad/test/browser_scratchpad_unsaved.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_unsaved.js
@@ -19,17 +19,17 @@ function test()
   waitForExplicitFinish();
 
   testListeners();
   testRestoreNotFromFile();
   testRestoreFromFileSaved();
   testRestoreFromFileUnsaved();
 
   gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser);
-  content.location = "data:text/html,<p>test star* UI for unsaved file changes";
+  gBrowser.loadURI("data:text/html,<p>test star* UI for unsaved file changes");
 }
 
 function testListeners()
 {
   openScratchpad(function (aWin, aScratchpad) {
     aScratchpad.setText("new text");
     ok(isStar(aWin), "show star if scratchpad text changes");
 
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_wrong_window_focus.js b/devtools/client/scratchpad/test/browser_scratchpad_wrong_window_focus.js
index 0b3429e..670644a 100644
--- a/devtools/client/scratchpad/test/browser_scratchpad_wrong_window_focus.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_wrong_window_focus.js
@@ -21,34 +21,34 @@ function test()
   // from the first Scratch window (that's why we needed to save its
   // reference).
   //
   // Then we wait for our message to appear in the console and click
   // on the location link. After that we check which Scratchpad window
   // is currently active (it should be the older one).
 
   gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser);
-  gBrowser.selectedBrowser.addEventListener("load", function () {
+  BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(function () {
     openScratchpad(function () {
       let sw = gScratchpadWindow;
       let {require} = Cu.import("resource://devtools/shared/Loader.jsm", {});
       let {TargetFactory} = require("devtools/client/framework/target");
 
       openScratchpad(function () {
         let target = TargetFactory.forTab(gBrowser.selectedTab);
         gDevTools.showToolbox(target, "webconsole").then((toolbox) => {
           let hud = toolbox.getCurrentPanel().hud;
           hud.jsterm.clearOutput(true);
           testFocus(sw, hud);
         });
       });
     });
-  }, {capture: true, once: true});
+  });
 
-  content.location = "data:text/html;charset=utf8,<p>test window focus for Scratchpad.";
+  gBrowser.loadURI("data:text/html;charset=utf8,<p>test window focus for Scratchpad.");
 }
 
 function testFocus(sw, hud) {
   let sp = sw.Scratchpad;
 
   function onMessage(event, messages) {
     let msg = [...messages][0];
     let node = msg.node;
diff --git a/devtools/client/scratchpad/test/head.js b/devtools/client/scratchpad/test/head.js
index da55825..27994f0 100644
--- a/devtools/client/scratchpad/test/head.js
+++ b/devtools/client/scratchpad/test/head.js
@@ -88,20 +88,20 @@ function openScratchpad(aReadyCallback, aOptions = {})
  * @return Promise
  */
 function openTabAndScratchpad(aOptions = {})
 {
   waitForExplicitFinish();
   return new promise(resolve => {
     gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser);
     let {selectedBrowser} = gBrowser;
-    selectedBrowser.addEventListener("load", function () {
+    BrowserTestUtils.browserLoaded(selectedBrowser).then(function () {
       openScratchpad((win, sp) => resolve([win, sp]), aOptions);
-    }, {capture: true, once: true});
-    content.location = "data:text/html;charset=utf8," + (aOptions.tabContent || "");
+    });
+    gBrowser.loadURI("data:text/html;charset=utf8," + (aOptions.tabContent || ""));
   });
 }
 
 /**
  * Create a temporary file, write to it and call a callback
  * when done.
  *
  * @param string aName
diff --git a/devtools/client/sourceeditor/test/browser_css_autocompletion.js b/devtools/client/sourceeditor/test/browser_css_autocompletion.js
index ddd13cb..b5815de 100644
--- a/devtools/client/sourceeditor/test/browser_css_autocompletion.js
+++ b/devtools/client/sourceeditor/test/browser_css_autocompletion.js
@@ -76,17 +76,17 @@ let completer = null;
 let progress;
 let progressDiv;
 let inspector;
 
 function test() {
   waitForExplicitFinish();
   addTab(TEST_URI).then(function () {
     /* eslint-disable mozilla/no-cpows-in-tests */
-    doc = content.document;
+    doc = gBrowser.contentDocumentAsCPOW;
     /* eslint-enable mozilla/no-cpows-in-tests */
     runTests();
   });
 }
 
 function runTests() {
   progress = doc.getElementById("progress");
   progressDiv = doc.querySelector("#progress > div");
diff --git a/devtools/client/sourceeditor/test/browser_css_getInfo.js b/devtools/client/sourceeditor/test/browser_css_getInfo.js
index 9028d8f..aeaf796 100644
--- a/devtools/client/sourceeditor/test/browser_css_getInfo.js
+++ b/devtools/client/sourceeditor/test/browser_css_getInfo.js
@@ -124,17 +124,17 @@ const TEST_URI = "data:text/html;charset=UTF-8," + encodeURIComponent(
   ].join("\n"));
 
 let doc = null;
 function test() {
   waitForExplicitFinish();
   gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser);
   BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(() => {
     /* eslint-disable mozilla/no-cpows-in-tests */
-    doc = content.document;
+    doc = gBrowser.contentDocumentAsCPOW;
     /* eslint-enable mozilla/no-cpows-in-tests */
     runTests();
   });
   gBrowser.loadURI(TEST_URI);
 }
 
 function runTests() {
   let completer = new CSSCompleter({
diff --git a/devtools/client/sourceeditor/test/browser_css_statemachine.js b/devtools/client/sourceeditor/test/browser_css_statemachine.js
index a992380..d50b333 100644
--- a/devtools/client/sourceeditor/test/browser_css_statemachine.js
+++ b/devtools/client/sourceeditor/test/browser_css_statemachine.js
@@ -55,17 +55,17 @@ const TEST_URI = "data:text/html;charset=UTF-8," + encodeURIComponent(
   ].join("\n"));
 
 var doc = null;
 function test() {
   waitForExplicitFinish();
   gBrowser.selectedTab = BrowserTestUtils.addTab(gBrowser, TEST_URI);
   BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser).then(() => {
     /* eslint-disable mozilla/no-cpows-in-tests */
-    doc = content.document;
+    doc = gBrowser.contentDocumentAsCPOW;
     /* eslint-enable mozilla/no-cpows-in-tests */
     runTests();
   });
 }
 
 function runTests() {
   let completer = new CSSCompleter({
     cssProperties: getClientCssProperties()
diff --git a/devtools/client/storage/test/head.js b/devtools/client/storage/test/head.js
index 368c277..f29ed6f 100644
--- a/devtools/client/storage/test/head.js
+++ b/devtools/client/storage/test/head.js
@@ -54,17 +54,17 @@ registerCleanupFunction(() => {
  *
  * @param url {String} The url to be opened in the new tab
  * @param options {Object} The tab options for the new tab
  *
  * @return {Promise} A promise that resolves after the tab is ready
  */
 function* openTab(url, options = {}) {
   let tab = yield addTab(url, options);
-  let content = tab.linkedBrowser.contentWindow;
+  let content = tab.linkedBrowser.contentWindowAsCPOW;
 
   gWindow = content.wrappedJSObject;
 
   // Setup the async storages in main window and for all its iframes
   yield ContentTask.spawn(gBrowser.selectedBrowser, null, function* () {
     /**
      * Get all windows including frames recursively.
      *
diff --git a/devtools/client/styleeditor/test/head.js b/devtools/client/styleeditor/test/head.js
index 8d5492a..ca5eafe 100644
--- a/devtools/client/styleeditor/test/head.js
+++ b/devtools/client/styleeditor/test/head.js
@@ -41,23 +41,18 @@ var addTab = function (url, win) {
  * Navigate the currently selected tab to a new URL and wait for it to load.
  * @param {String} url The url to be loaded in the current tab.
  * @return a promise that resolves when the page has fully loaded.
  */
 var navigateTo = function (url) {
   info(`Navigating to ${url}`);
   let browser = gBrowser.selectedBrowser;
 
-  return new Promise(resolve => {
-    browser.addEventListener("load", function () {
-      resolve();
-    }, {capture: true, once: true});
-
-    browser.loadURI(url);
-  });
+  browser.loadURI(url);
+  return BrowserTestUtils.browserLoaded(browser);
 };
 
 var navigateToAndWaitForStyleSheets = Task.async(function* (url, ui) {
   let onReset = ui.once("stylesheets-reset");
   yield navigateTo(url);
   yield onReset;
 });
 
diff --git a/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_context_menu_open_url.js b/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_context_menu_open_url.js
index 5cdb179..d205d3c 100644
--- a/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_context_menu_open_url.js
+++ b/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_context_menu_open_url.js
@@ -65,14 +65,12 @@ add_task(async function() {
 
 /**
  * Simple helper to wrap a tab load listener in a promise.
  */
 function listenToTabLoad() {
   return new Promise((resolve) => {
     gBrowser.tabContainer.addEventListener("TabOpen", function (evt) {
       let newTab = evt.target;
-      newTab.linkedBrowser.addEventListener("load", function () {
-        resolve(newTab);
-      }, {capture: true, once: true});
+      BrowserTestUtils.browserLoaded(newTab.linkedBrowser).then(() => resolve(newTab));
     }, {capture: true, once: true});
   });
 }
diff --git a/devtools/client/webconsole/new-console-output/test/mochitest/head.js b/devtools/client/webconsole/new-console-output/test/mochitest/head.js
index d9fa31e..2926125 100644
--- a/devtools/client/webconsole/new-console-output/test/mochitest/head.js
+++ b/devtools/client/webconsole/new-console-output/test/mochitest/head.js
@@ -206,20 +206,18 @@ function hideContextMenu(hud) {
   }
 
   let onPopupHidden = once(popup, "popuphidden");
   popup.hidePopup();
   return onPopupHidden;
 }
 
 function loadDocument(url, browser = gBrowser.selectedBrowser) {
-  return new Promise(resolve => {
-    browser.addEventListener("load", resolve, {capture: true, once: true});
-    BrowserTestUtils.loadURI(browser, url);
-  });
+  BrowserTestUtils.loadURI(browser, url);
+  return BrowserTestUtils.browserLoaded(browser);
 }
 
 /**
 * Returns a promise that resolves when the node passed as an argument mutate
 * according to the passed configuration.
 *
 * @param {Node} node - The node to observe mutations on.
 * @param {Object} observeConfig - A configuration object for MutationObserver.observe.
diff --git a/devtools/client/webconsole/test/browser_bug_638949_copy_link_location.js b/devtools/client/webconsole/test/browser_bug_638949_copy_link_location.js
index dba1190..c89ee88 100644
--- a/devtools/client/webconsole/test/browser_bug_638949_copy_link_location.js
+++ b/devtools/client/webconsole/test/browser_bug_638949_copy_link_location.js
@@ -21,17 +21,17 @@ add_task(function* () {
   Services.prefs.setBoolPref("devtools.webconsole.filter.networkinfo", true);
 
   yield loadTab(TEST_URI);
   let hud = yield openConsole();
   let output = hud.outputNode;
   let menu = hud.iframeWindow.document.getElementById("output-contextmenu");
 
   hud.jsterm.clearOutput();
-  content.console.log("bug 638949");
+  gBrowser.contentWindowAsCPOW.console.log("bug 638949");
 
   // Test that the "Copy Link Location" command is disabled for non-network
   // messages.
   let [result] = yield waitForMessages({
     webconsole: hud,
     messages: [{
       text: "bug 638949",
       category: CATEGORY_WEBDEV,
@@ -49,17 +49,17 @@ add_task(function* () {
   // messages.
   yield waitForContextMenu(menu, message, () => {
     let isHidden = menu.querySelector(CONTEXT_MENU_ID).hidden;
     ok(isHidden, CONTEXT_MENU_ID + " is hidden");
   });
 
   hud.jsterm.clearOutput();
   // Reloading will produce network logging
-  content.location.reload();
+  gBrowser.reload();
 
   // Test that the "Copy Link Location" command is enabled and works
   // as expected for any network-related message.
   // This command should copy only the URL.
   [result] = yield waitForMessages({
     webconsole: hud,
     messages: [{
       text: "test-console.html",
diff --git a/devtools/client/webconsole/test/browser_console.js b/devtools/client/webconsole/test/browser_console.js
index 5bcddbc..a0d0afc 100644
--- a/devtools/client/webconsole/test/browser_console.js
+++ b/devtools/client/webconsole/test/browser_console.js
@@ -57,17 +57,17 @@ function testMessages(hud) {
   });
   let error = Cu.evalInSandbox(`
     new Error("1348885");
   `, sandbox);
   Cu.reportError(error);
   Cu.nukeSandbox(sandbox);
 
   // Add a message from a content window.
-  content.console.log("bug587757b");
+  gBrowser.contentWindowAsCPOW.console.log("bug587757b");
 
   // Test eval.
   hud.jsterm.execute("document.location.href");
 
   // Test eval frame script
   hud.jsterm.execute(`
     gBrowser.selectedBrowser.messageManager.loadFrameScript('data:application/javascript,console.log("framescript-message")', false);
     "framescript-eval";
diff --git a/devtools/client/webconsole/test/browser_console_certificate_imminent_distrust.js b/devtools/client/webconsole/test/browser_console_certificate_imminent_distrust.js
index e777395..084010d 100644
--- a/devtools/client/webconsole/test/browser_console_certificate_imminent_distrust.js
+++ b/devtools/client/webconsole/test/browser_console_certificate_imminent_distrust.js
@@ -88,30 +88,28 @@ function runTestLoop(theHud) {
   if (!gCurrentTest) {
     finishTest();
     return;
   }
   if (!gHud) {
     gHud = theHud;
   }
   gHud.jsterm.clearOutput();
-  gContentBrowser.addEventListener("load", onLoad, true);
+  BrowserTestUtils.browserLoaded(gContentBrowser).then(onLoad);
   if (gCurrentTest.pref) {
     SpecialPowers.pushPrefEnv({"set": gCurrentTest.pref},
       function () {
         BrowserTestUtils.loadURI(gBrowser.selectedBrowser, gCurrentTest.url);
       });
   } else {
     BrowserTestUtils.loadURI(gBrowser.selectedBrowser, gCurrentTest.url);
   }
 }
 
 function onLoad() {
-  gContentBrowser.removeEventListener("load", onLoad, true);
-
   waitForSuccess({
     name: gCurrentTest.name,
     validator: function () {
       if (gHud.outputNode.textContent.indexOf(TRIGGER_MSG) >= 0) {
         for (let warning of gCurrentTest.warning) {
           if (gHud.outputNode.textContent.indexOf(warning) < 0) {
             return false;
           }
diff --git a/devtools/client/webconsole/test/browser_console_copy_command.js b/devtools/client/webconsole/test/browser_console_copy_command.js
index 4f43412..0c4bdd5 100644
--- a/devtools/client/webconsole/test/browser_console_copy_command.js
+++ b/devtools/client/webconsole/test/browser_console_copy_command.js
@@ -41,17 +41,17 @@ add_task(function* testCopy() {
   let obj = {a: 1, b: "foo", c: RANDOM};
 
   let samples = [
                   [RANDOM, RANDOM],
                   [JSON.stringify(string), string],
                   [obj.toSource(), JSON.stringify(obj, null, "  ")],
     [
       "$('#" + ID + "')",
-      content.document.getElementById(ID).outerHTML
+      gBrowser.contentDocumentAsCPOW.getElementById(ID).outerHTML
     ]
   ];
   for (let [source, reference] of samples) {
     let deferredResult = defer();
 
     SimpleTest.waitForClipboard(
       "" + reference,
       () => {
diff --git a/devtools/client/webconsole/test/browser_console_variables_view.js b/devtools/client/webconsole/test/browser_console_variables_view.js
index 811e7de..b66bdb4 100644
--- a/devtools/client/webconsole/test/browser_console_variables_view.js
+++ b/devtools/client/webconsole/test/browser_console_variables_view.js
@@ -121,29 +121,29 @@ function onTestPropFound(aResults) {
     field: "value",
     string: "document.title + window.location + $('p')",
     webconsole: hud
   });
 }
 
 function onFooObjFetchAfterUpdate(aVar) {
   info("onFooObjFetchAfterUpdate");
-  let expectedValue = content.document.title + content.location +
+  let expectedValue = gBrowser.contentTitle + gBrowser.currentURI.spec +
                       "[object HTMLParagraphElement]";
 
   return findVariableViewProperties(aVar, [
     { name: "testProp", value: expectedValue },
   ], { webconsole: hud });
 }
 
 function onUpdatedTestPropFound(aResults) {
   let prop = aResults[0].matchedProp;
   ok(prop, "matched the updated |testProp| property value");
 
-  is(content.wrappedJSObject.fooObj.testProp, aResults[0].value,
+  is(gBrowser.contentWindowAsCPOW.wrappedJSObject.fooObj.testProp, aResults[0].value,
      "|fooObj.testProp| value has been updated");
 
   // Check that property name updates work.
   return updateVariablesViewProperty({
     property: prop,
     field: "name",
     string: "testUpdatedProp",
     webconsole: hud
@@ -163,19 +163,19 @@ function* onFooObjFetchAfterPropRename(aVar) {
     { name: "testUpdatedProp", value: expectedValue },
   ], { webconsole: hud });
 }
 
 function onRenamedTestPropFound(aResults) {
   let prop = aResults[0].matchedProp;
   ok(prop, "matched the renamed |testProp| property");
 
-  ok(!content.wrappedJSObject.fooObj.testProp,
+  ok(!gBrowser.contentWindowAsCPOW.wrappedJSObject.fooObj.testProp,
      "|fooObj.testProp| has been deleted");
-  is(content.wrappedJSObject.fooObj.testUpdatedProp, aResults[0].value,
+  is(gBrowser.contentWindowAsCPOW.wrappedJSObject.fooObj.testUpdatedProp, aResults[0].value,
      "|fooObj.testUpdatedProp| is correct");
 
   // Check that property value updates that cause exceptions are reported in
   // the web console output.
   return updateVariablesViewProperty({
     property: prop,
     field: "value",
     string: "foobarzFailure()",
@@ -218,11 +218,11 @@ function testPropDelete(aProp) {
 
   executeSoon(() => {
     EventUtils.synthesizeKey("VK_DELETE", {}, gVariablesView.window);
   });
 
   return waitForSuccess({
     name: "property deleted",
     timeout: 60000,
-    validator: () => !("testUpdatedProp" in content.wrappedJSObject.fooObj)
+    validator: () => !("testUpdatedProp" in gBrowser.contentWindowAsCPOW.wrappedJSObject.fooObj)
   });
 }
diff --git a/devtools/client/webconsole/test/browser_netmonitor_shows_reqs_in_webconsole.js b/devtools/client/webconsole/test/browser_netmonitor_shows_reqs_in_webconsole.js
index c54bbc0..13d5a5c 100644
--- a/devtools/client/webconsole/test/browser_netmonitor_shows_reqs_in_webconsole.js
+++ b/devtools/client/webconsole/test/browser_netmonitor_shows_reqs_in_webconsole.js
@@ -50,19 +50,19 @@ add_task(function* () {
   info("Network panel is open.");
 
   yield testNetmonitor(toolbox);
 });
 
 function loadDocument(browser) {
   let deferred = defer();
 
-  browser.addEventListener("load", function () {
+  BrowserTestUtils.browserLoaded(browser).then(function () {
     deferred.resolve();
-  }, {capture: true, once: true});
+  });
   BrowserTestUtils.loadURI(gBrowser.selectedBrowser, TEST_PATH);
 
   return deferred.promise;
 }
 
 function* testNetmonitor(toolbox) {
   let monitor = toolbox.getCurrentPanel();
 
diff --git a/devtools/client/webconsole/test/browser_output_breaks_after_console_dir_uninspectable.js b/devtools/client/webconsole/test/browser_output_breaks_after_console_dir_uninspectable.js
index 38a5b54..092661a 100644
--- a/devtools/client/webconsole/test/browser_output_breaks_after_console_dir_uninspectable.js
+++ b/devtools/client/webconsole/test/browser_output_breaks_after_console_dir_uninspectable.js
@@ -29,17 +29,17 @@ add_task(function* () {
       severity: SEVERITY_LOG,
     },
     {
       name: "console.dir output",
       consoleDir: "[object Object]",
     }],
   });
 
-  content.console.log("fooBug773466b");
+  gBrowser.contentWindowAsCPOW.console.log("fooBug773466b");
 
   yield waitForMessages({
     webconsole: hud,
     messages: [{
       text: "fooBug773466b",
       category: CATEGORY_WEBDEV,
       severity: SEVERITY_LOG,
     }],
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_580030_errors_after_page_reload.js b/devtools/client/webconsole/test/browser_webconsole_bug_580030_errors_after_page_reload.js
index af00bf9..6a45e02 100644
--- a/devtools/client/webconsole/test/browser_webconsole_bug_580030_errors_after_page_reload.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_580030_errors_after_page_reload.js
@@ -16,32 +16,32 @@ function test() {
   Task.spawn(function* () {
     const {tab} = yield loadTab(TEST_URI);
     const hud = yield openConsole(tab);
     info("console opened");
 
     executeSoon(() => {
       hud.jsterm.clearOutput();
       info("wait for reload");
-      content.location.reload();
+      gBrowser.reload();
     });
 
     yield hud.target.once("navigate");
     info("target navigated");
 
-    let button = content.document.querySelector("button");
+    let button = gBrowser.contentDocumentAsCPOW.querySelector("button");
     ok(button, "button found");
 
     // On e10s, the exception is triggered in child process
     // and is ignored by test harness
     if (!Services.appinfo.browserTabsRemoteAutostart) {
       expectUncaughtException();
     }
 
-    EventUtils.sendMouseEvent({type: "click"}, button, content);
+    EventUtils.sendMouseEvent({type: "click"}, button, gBrowser.contentWindowAsCPOW);
 
     yield waitForMessages({
       webconsole: hud,
       messages: [{
         text: "fooBazBaz is not defined",
         category: CATEGORY_JS,
         severity: SEVERITY_ERROR,
       }],
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_597103_deactivateHUDForContext_unfocused_window.js b/devtools/client/webconsole/test/browser_webconsole_bug_597103_deactivateHUDForContext_unfocused_window.js
index e14c3a0..32ac8b7 100644
--- a/devtools/client/webconsole/test/browser_webconsole_bug_597103_deactivateHUDForContext_unfocused_window.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_597103_deactivateHUDForContext_unfocused_window.js
@@ -14,22 +14,20 @@ var noErrors = true;
 function tab1Loaded() {
   win2 = OpenBrowserWindow();
   whenDelayedStartupFinished(win2, win2Loaded);
 }
 
 function win2Loaded() {
   tab2 = win2.gBrowser.addTab(TEST_URI);
   win2.gBrowser.selectedTab = tab2;
-  tab2.linkedBrowser.addEventListener("load", tab2Loaded, true);
+  BrowserTestUtils.browserLoaded(tab2.linkedBrowser).then(tab2Loaded);
 }
 
 function tab2Loaded(aEvent) {
-  tab2.linkedBrowser.removeEventListener(aEvent.type, tab2Loaded, true);
-
   let consolesOpened = 0;
   function onWebConsoleOpen() {
     consolesOpened++;
     if (consolesOpened == 2) {
       executeSoon(closeConsoles);
     }
   }
 
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_597460_filter_scroll.js b/devtools/client/webconsole/test/browser_webconsole_bug_597460_filter_scroll.js
index 8b1fd88..28390ba 100644
--- a/devtools/client/webconsole/test/browser_webconsole_bug_597460_filter_scroll.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_597460_filter_scroll.js
@@ -21,17 +21,17 @@ add_task(function* () {
 
   Services.prefs.clearUserPref(PREF);
 });
 
 function consoleOpened(hud) {
   let deferred = defer();
 
   for (let i = 0; i < 200; i++) {
-    content.console.log("test message " + i);
+    gBrowser.contentWindowAsCPOW.console.log("test message " + i);
   }
 
   hud.setFilterState("network", false);
   hud.setFilterState("networkinfo", false);
 
   hud.ui.filterBox.value = "test message";
   hud.ui.adjustVisibilityOnSearchStringChange();
 
@@ -48,17 +48,17 @@ function consoleOpened(hud) {
       webconsole: hud,
       messages: [{
         text: "test-network.html",
         category: CATEGORY_NETWORK,
         severity: SEVERITY_LOG,
       }],
     }).then(deferred.resolve);
 
-    content.location.reload();
+    gBrowser.reload();
   });
 
   return deferred.promise;
 }
 
 function testScroll([result], hud) {
   let scrollNode = hud.ui.outputWrapper;
   let msgNode = [...result.matched][0];
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_632275_getters_document_width.js b/devtools/client/webconsole/test/browser_webconsole_bug_632275_getters_document_width.js
index 45d1f71..78b288d 100644
--- a/devtools/client/webconsole/test/browser_webconsole_bug_632275_getters_document_width.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_632275_getters_document_width.js
@@ -12,26 +12,26 @@ var getterValue = null;
 
 function test() {
   loadTab(TEST_URI).then(() => {
     openConsole().then(consoleOpened);
   });
 }
 
 function consoleOpened(hud) {
-  let doc = content.wrappedJSObject.document;
+  let doc = gBrowser.contentWindowAsCPOW.wrappedJSObject.document;
   getterValue = doc.foobar._val;
   hud.jsterm.execute("console.dir(document)");
 
   let onOpen = onViewOpened.bind(null, hud);
   hud.jsterm.once("variablesview-fetched", onOpen);
 }
 
 function onViewOpened(hud, event, view) {
-  let doc = content.wrappedJSObject.document;
+  let doc = gBrowser.contentWindowAsCPOW.wrappedJSObject.document;
 
   findVariableViewProperties(view, [
     { name: /^(width|height)$/, dontMatch: 1 },
     { name: "foobar._val", value: getterValue },
     { name: "foobar.val", isGetter: true },
   ], { webconsole: hud }).then(function () {
     is(doc.foobar._val, getterValue, "getter did not execute");
     is(doc.foobar.val, getterValue + 1, "getter executed");
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_644419_log_limits.js b/devtools/client/webconsole/test/browser_webconsole_bug_644419_log_limits.js
index 93063e4..4a52a31 100644
--- a/devtools/client/webconsole/test/browser_webconsole_bug_644419_log_limits.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_644419_log_limits.js
@@ -61,17 +61,17 @@ function testWebDevLimits() {
       severity: SEVERITY_ERROR,
     }],
   });
 }
 
 function testWebDevLimits2() {
   // Fill the log with Web Developer errors.
   for (let i = 0; i < 11; i++) {
-    content.console.log("test message " + i);
+    gBrowser.contentWindowAsCPOW.console.log("test message " + i);
   }
 
   return waitForMessages({
     webconsole: hud,
     messages: [{
       text: "test message 10",
       category: CATEGORY_WEBDEV,
       severity: SEVERITY_LOG,
@@ -86,34 +86,34 @@ function testWebDevLimits2() {
     Services.prefs.clearUserPref("devtools.hud.loglimit.console");
   });
 }
 
 function testJsLimits() {
   Services.prefs.setIntPref("devtools.hud.loglimit.exception", 10);
 
   hud.jsterm.clearOutput();
-  content.console.log("testing JS limits");
+  gBrowser.contentWindowAsCPOW.console.log("testing JS limits");
 
   // Find the sentinel entry.
   return waitForMessages({
     webconsole: hud,
     messages: [{
       text: "testing JS limits",
       category: CATEGORY_WEBDEV,
       severity: SEVERITY_LOG,
     }],
   });
 }
 
 function testJsLimits2() {
   // Fill the log with JS errors.
-  let head = content.document.getElementsByTagName("head")[0];
+  let head = gBrowser.contentDocumentAsCPOW.getElementsByTagName("head")[0];
   for (let i = 0; i < 11; i++) {
-    let script = content.document.createElement("script");
+    let script = gBrowser.contentDocumentAsCPOW.createElement("script");
     script.text = "fubar" + i + ".bogus(6);";
 
     if (!Services.appinfo.browserTabsRemoteAutostart) {
       expectUncaughtException();
     }
     head.insertBefore(script, head.firstChild);
   }
 
@@ -136,17 +136,17 @@ function testJsLimits2() {
 }
 
 var gCounter, gImage;
 
 function testNetLimits() {
   Services.prefs.setIntPref("devtools.hud.loglimit.network", 10);
 
   hud.jsterm.clearOutput();
-  content.console.log("testing Net limits");
+  gBrowser.contentWindowAsCPOW.console.log("testing Net limits");
 
   // Find the sentinel entry.
   return waitForMessages({
     webconsole: hud,
     messages: [{
       text: "testing Net limits",
       category: CATEGORY_WEBDEV,
       severity: SEVERITY_LOG,
@@ -154,19 +154,19 @@ function testNetLimits() {
   }).then(() => {
     // Fill the log with network messages.
     gCounter = 0;
   });
 }
 
 function loadImage() {
   if (gCounter < 11) {
-    let body = content.document.getElementsByTagName("body")[0];
+    let body = gBrowser.contentDocumentAsCPOW.getElementsByTagName("body")[0];
     gImage && gImage.removeEventListener("load", loadImage, true);
-    gImage = content.document.createElement("img");
+    gImage = gBrowser.contentDocumentAsCPOW.createElement("img");
     gImage.src = "test-image.png?_fubar=" + gCounter;
     body.insertBefore(gImage, body.firstChild);
     gImage.addEventListener("load", loadImage, true);
     gCounter++;
     return true;
   }
 
   is(gCounter, 11, "loaded 11 files");
@@ -189,34 +189,34 @@ function loadImage() {
     Services.prefs.clearUserPref("devtools.hud.loglimit.network");
   });
 }
 
 function testCssLimits() {
   Services.prefs.setIntPref("devtools.hud.loglimit.cssparser", 10);
 
   hud.jsterm.clearOutput();
-  content.console.log("testing CSS limits");
+  gBrowser.contentWindowAsCPOW.console.log("testing CSS limits");
 
   // Find the sentinel entry.
   return waitForMessages({
     webconsole: hud,
     messages: [{
       text: "testing CSS limits",
       category: CATEGORY_WEBDEV,
       severity: SEVERITY_LOG,
     }],
   });
 }
 
 function testCssLimits2() {
   // Fill the log with CSS errors.
-  let body = content.document.getElementsByTagName("body")[0];
+  let body = gBrowser.contentDocumentAsCPOW.getElementsByTagName("body")[0];
   for (let i = 0; i < 11; i++) {
-    let div = content.document.createElement("div");
+    let div = gBrowser.contentDocumentAsCPOW.createElement("div");
     div.setAttribute("style", "-moz-foobar" + i + ": 42;");
     body.insertBefore(div, body.firstChild);
   }
 
   return waitForMessages({
     webconsole: hud,
     messages: [{
       text: "-moz-foobar10",
diff --git a/devtools/client/webconsole/test/browser_webconsole_console_extras.js b/devtools/client/webconsole/test/browser_webconsole_console_extras.js
index 078e331..eeffc47 100644
--- a/devtools/client/webconsole/test/browser_webconsole_console_extras.js
+++ b/devtools/client/webconsole/test/browser_webconsole_console_extras.js
@@ -32,12 +32,12 @@ function consoleOpened(hud) {
       severity: SEVERITY_LOG,
     }],
   }).then(() => {
     let nodes = hud.outputNode.querySelectorAll(".message");
     is(nodes.length, 2, "only two messages are displayed");
     finishTest();
   });
 
-  let button = content.document.querySelector("button");
+  let button = gBrowser.contentDocumentAsCPOW.querySelector("button");
   ok(button, "we have the button");
-  EventUtils.sendMouseEvent({ type: "click" }, button, content);
+  EventUtils.sendMouseEvent({ type: "click" }, button, gBrowser.contentWindowAsCPOW);
 }
diff --git a/devtools/client/webconsole/test/browser_webconsole_console_logging_api.js b/devtools/client/webconsole/test/browser_webconsole_console_logging_api.js
index 3173375..3e7a4e1 100644
--- a/devtools/client/webconsole/test/browser_webconsole_console_logging_api.js
+++ b/devtools/client/webconsole/test/browser_webconsole_console_logging_api.js
@@ -19,17 +19,17 @@ add_task(function* () {
 
   let methods = ["log", "info", "warn", "error", "exception", "debug"];
   for (let method of methods) {
     yield testMethod(method, hud, outputNode);
   }
 });
 
 function* testMethod(method, hud, outputNode) {
-  let console = content.console;
+  let console = gBrowser.contentWindowAsCPOW.console;
 
   hud.jsterm.clearOutput();
 
   console[method]("foo-bar-baz");
   console[method]("baar-baz");
 
   yield waitForMessages({
     webconsole: hud,
diff --git a/devtools/client/webconsole/test/browser_webconsole_log_file_filter.js b/devtools/client/webconsole/test/browser_webconsole_log_file_filter.js
index 7e722a0..4b8ca43 100644
--- a/devtools/client/webconsole/test/browser_webconsole_log_file_filter.js
+++ b/devtools/client/webconsole/test/browser_webconsole_log_file_filter.js
@@ -20,17 +20,17 @@ add_task(function* () {
   yield consoleOpened();
 
   testLiveFilteringOnSearchStrings();
 
   hud = null;
 });
 
 function consoleOpened() {
-  let console = content.console;
+  let console = gBrowser.contentWindowAsCPOW.console;
   console.log("sentinel log");
   return waitForMessages({
     webconsole: hud,
     messages: [{
       text: "sentinel log",
       category: CATEGORY_WEBDEV,
       severity: SEVERITY_LOG
     }],
@@ -58,17 +58,17 @@ function testLiveFilteringOnSearchStrings() {
   is(countMessageNodes(), 4, "show all log nodes on setting filter string " +
       "as \"\".");
 }
 
 function countMessageNodes() {
   let outputNode = hud.outputNode;
 
   let messageNodes = outputNode.querySelectorAll(".message");
-  content.console.log(messageNodes.length);
+  gBrowser.contentWindowAsCPOW.console.log(messageNodes.length);
   let displayedMessageNodes = 0;
   let view = hud.iframeWindow;
   for (let i = 0; i < messageNodes.length; i++) {
     let computedStyle = view.getComputedStyle(messageNodes[i]);
     if (computedStyle.display !== "none") {
       displayedMessageNodes++;
     }
   }
diff --git a/devtools/client/webconsole/test/browser_webconsole_notifications.js b/devtools/client/webconsole/test/browser_webconsole_notifications.js
index 1cac2dc..3fb6fbc 100644
--- a/devtools/client/webconsole/test/browser_webconsole_notifications.js
+++ b/devtools/client/webconsole/test/browser_webconsole_notifications.js
@@ -21,17 +21,17 @@ add_task(function* () {
 });
 
 function waitForEvents(onConsoleOpened) {
   let deferred = defer();
 
   function webConsoleCreated(id) {
     Services.obs.removeObserver(observer, "web-console-created");
     ok(HUDService.getHudReferenceById(id), "We have a hud reference");
-    content.wrappedJSObject.console.log("adding a log message");
+    gBrowser.contentWindowAsCPOW.wrappedJSObject.console.log("adding a log message");
   }
 
   function webConsoleDestroyed(id) {
     Services.obs.removeObserver(observer, "web-console-destroyed");
     ok(!HUDService.getHudReferenceById(id), "We do not have a hud reference");
     executeSoon(deferred.resolve);
   }
 
diff --git a/devtools/client/webconsole/test/browser_webconsole_output_copy_newlines.js b/devtools/client/webconsole/test/browser_webconsole_output_copy_newlines.js
index 22de843..4ce2f13 100644
--- a/devtools/client/webconsole/test/browser_webconsole_output_copy_newlines.js
+++ b/devtools/client/webconsole/test/browser_webconsole_output_copy_newlines.js
@@ -15,18 +15,18 @@ add_task(function* () {
   yield loadTab(TEST_URI);
   let hud = yield openConsole();
   hud.jsterm.clearOutput();
 
   let controller = top.document.commandDispatcher
                    .getControllerForCommand("cmd_copy");
   is(controller.isCommandEnabled("cmd_copy"), false, "cmd_copy is disabled");
 
-  content.console.log("Hello world! bug916997a");
-  content.console.log("Hello world 2! bug916997b");
+  gBrowser.contentWindowAsCPOW.console.log("Hello world! bug916997a");
+  gBrowser.contentWindowAsCPOW.console.log("Hello world 2! bug916997b");
 
   yield waitForMessages({
     webconsole: hud,
     messages: [{
       text: "Hello world! bug916997a",
       category: CATEGORY_WEBDEV,
       severity: SEVERITY_LOG,
     }, {
diff --git a/devtools/client/webconsole/test/browser_webconsole_reflow.js b/devtools/client/webconsole/test/browser_webconsole_reflow.js
index 86caa10..bdb270a 100644
--- a/devtools/client/webconsole/test/browser_webconsole_reflow.js
+++ b/devtools/client/webconsole/test/browser_webconsole_reflow.js
@@ -9,18 +9,18 @@ const TEST_URI = "data:text/html;charset=utf-8,Web Console test for " +
                  "reflow activity";
 
 add_task(function* () {
   let { browser } = yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   function onReflowListenersReady() {
-    browser.contentDocument.body.style.display = "none";
-    browser.contentDocument.body.clientTop;
+    browser.contentDocumentAsCPOW.body.style.display = "none";
+    browser.contentDocumentAsCPOW.body.clientTop;
   }
 
   Services.prefs.setBoolPref("devtools.webconsole.filter.csslog", true);
   hud.ui._updateReflowActivityListener(onReflowListenersReady);
   Services.prefs.clearUserPref("devtools.webconsole.filter.csslog");
 
   yield waitForMessages({
     webconsole: hud,
diff --git a/devtools/client/webconsole/test/browser_webconsole_shows_reqs_in_netmonitor.js b/devtools/client/webconsole/test/browser_webconsole_shows_reqs_in_netmonitor.js
index 740dfd3..9d21ccd 100644
--- a/devtools/client/webconsole/test/browser_webconsole_shows_reqs_in_netmonitor.js
+++ b/devtools/client/webconsole/test/browser_webconsole_shows_reqs_in_netmonitor.js
@@ -47,19 +47,19 @@ add_task(function* () {
       }
     ]
   });
 });
 
 function loadDocument(browser) {
   let deferred = defer();
 
-  browser.addEventListener("load", function () {
+  BrowserTestUtils.browserLoaded(browser).then(function () {
     deferred.resolve();
-  }, {capture: true, once: true});
+  });
   BrowserTestUtils.loadURI(gBrowser.selectedBrowser, TEST_PATH);
 
   return deferred.promise;
 }
 
 function* testNetmonitor(toolbox) {
   let monitor = toolbox.getCurrentPanel();
   let { store, windowRequire } = monitor.panelWin;
diff --git a/devtools/client/webconsole/test/head.js b/devtools/client/webconsole/test/head.js
index ab1fa4a..b23c805 100644
--- a/devtools/client/webconsole/test/head.js
+++ b/devtools/client/webconsole/test/head.js
@@ -222,17 +222,17 @@ var closeConsole = Task.async(function* (tab) {
  * does and completes the load event.
  * @return a promise that resolves to the tab object
  */
 var waitForTab = Task.async(function* () {
   info("Waiting for a tab to open");
   yield once(gBrowser.tabContainer, "TabOpen");
   let tab = gBrowser.selectedTab;
   let browser = tab.linkedBrowser;
-  yield once(browser, "load", true);
+  yield BrowserTestUtils.browserLoaded(browser);
   info("The tab load completed");
   return tab;
 });
 
 /**
  * Dump the output of all open Web Consoles - used only for debugging purposes.
  */
 function dumpConsoles() {
diff --git a/devtools/server/tests/browser/browser_markers-docloading-01.js b/devtools/server/tests/browser/browser_markers-docloading-01.js
index efb86c2..fa33852 100644
--- a/devtools/server/tests/browser/browser_markers-docloading-01.js
+++ b/devtools/server/tests/browser/browser_markers-docloading-01.js
@@ -7,17 +7,17 @@
 "use strict";
 
 const { TimelineFront } = require("devtools/shared/fronts/timeline");
 const MARKER_NAMES = ["document::DOMContentLoaded", "document::Load"];
 
 add_task(function* () {
   let browser = yield addTab(MAIN_DOMAIN + "doc_innerHTML.html");
   // eslint-disable-next-line mozilla/no-cpows-in-tests
-  let doc = browser.contentDocument;
+  let doc = browser.contentDocumentAsCPOW;
 
   initDebuggerServer();
   let client = new DebuggerClient(DebuggerServer.connectPipe());
   let form = yield connectDebuggerClient(client);
   let front = TimelineFront(client, form);
   let rec = yield front.start({ withMarkers: true });
 
   front.once("doc-loading", e => {
diff --git a/devtools/server/tests/browser/browser_markers-docloading-02.js b/devtools/server/tests/browser/browser_markers-docloading-02.js
index 14c60fc..11b6e01 100644
--- a/devtools/server/tests/browser/browser_markers-docloading-02.js
+++ b/devtools/server/tests/browser/browser_markers-docloading-02.js
@@ -7,17 +7,17 @@
 "use strict";
 
 const { TimelineFront } = require("devtools/shared/fronts/timeline");
 const MARKER_NAMES = ["document::DOMContentLoaded", "document::Load"];
 
 add_task(function* () {
   let browser = yield addTab(MAIN_DOMAIN + "doc_innerHTML.html");
   // eslint-disable-next-line mozilla/no-cpows-in-tests
-  let doc = browser.contentDocument;
+  let doc = browser.contentDocumentAsCPOW;
 
   initDebuggerServer();
   let client = new DebuggerClient(DebuggerServer.connectPipe());
   let form = yield connectDebuggerClient(client);
   let front = TimelineFront(client, form);
   let rec = yield front.start({ withMarkers: true, withDocLoadingEvents: true });
 
   yield new Promise(resolve => {
diff --git a/devtools/server/tests/browser/browser_markers-docloading-03.js b/devtools/server/tests/browser/browser_markers-docloading-03.js
index 2f31bcc..d73e25c 100644
--- a/devtools/server/tests/browser/browser_markers-docloading-03.js
+++ b/devtools/server/tests/browser/browser_markers-docloading-03.js
@@ -7,17 +7,17 @@
 "use strict";
 
 const { TimelineFront } = require("devtools/shared/fronts/timeline");
 const MARKER_NAMES = ["document::DOMContentLoaded", "document::Load"];
 
 add_task(function* () {
   let browser = yield addTab(MAIN_DOMAIN + "doc_innerHTML.html");
   // eslint-disable-next-line mozilla/no-cpows-in-tests
-  let doc = browser.contentDocument;
+  let doc = browser.contentDocumentAsCPOW;
 
   initDebuggerServer();
   let client = new DebuggerClient(DebuggerServer.connectPipe());
   let form = yield connectDebuggerClient(client);
   let front = TimelineFront(client, form);
   let rec = yield front.start({ withDocLoadingEvents: true });
 
   waitForMarkerType(front, MARKER_NAMES, () => true, e => e, "markers").then(e => {
diff --git a/devtools/server/tests/browser/browser_storage_dynamic_windows.js b/devtools/server/tests/browser/browser_storage_dynamic_windows.js
index 71ab2ad..690f1fe 100644
--- a/devtools/server/tests/browser/browser_storage_dynamic_windows.js
+++ b/devtools/server/tests/browser/browser_storage_dynamic_windows.js
@@ -159,20 +159,20 @@ function testAddIframe(front) {
     let endTestReloaded = () => {
       front.off("stores-update", onStoresUpdate);
       resolve();
     };
 
     front.on("stores-update", onStoresUpdate);
 
     // eslint-disable-next-line mozilla/no-cpows-in-tests
-    let iframe = content.document.createElement("iframe");
+    let iframe = gBrowser.contentDocumentAsCPOW.createElement("iframe");
     iframe.src = ALT_DOMAIN_SECURED + "storage-secured-iframe.html";
     // eslint-disable-next-line mozilla/no-cpows-in-tests
-    content.document.querySelector("body").appendChild(iframe);
+    gBrowser.contentDocumentAsCPOW.querySelector("body").appendChild(iframe);
   });
 }
 
 function testRemoveIframe(front) {
   info("Testing if iframe removal works properly");
   return new Promise(resolve => {
     let shouldBeEmpty = {
       localStorage: {
diff --git a/devtools/server/tests/browser/browser_storage_updates.js b/devtools/server/tests/browser/browser_storage_updates.js
index 8e6cc95..c160b8e 100644
--- a/devtools/server/tests/browser/browser_storage_updates.js
+++ b/devtools/server/tests/browser/browser_storage_updates.js
@@ -294,17 +294,17 @@ function* finishTests(client) {
   yield client.close();
   DebuggerServer.destroy();
   finish();
 }
 
 add_task(function* () {
   let browser = yield addTab(MAIN_DOMAIN + "storage-updates.html");
   // eslint-disable-next-line mozilla/no-cpows-in-tests
-  let doc = browser.contentDocument;
+  let doc = browser.contentDocumentAsCPOW;
 
   initDebuggerServer();
 
   let client = new DebuggerClient(DebuggerServer.connectPipe());
   let form = yield connectDebuggerClient(client);
   let front = StorageFront(client, form);
   let win = doc.defaultView.wrappedJSObject;
 
