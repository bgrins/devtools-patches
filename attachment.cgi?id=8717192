# HG changeset patch
# User Jennifer Fong <jfong@mozilla.com>
# Parent  e73efeaf2ec8332e30cbc8d224c3dc15dc38b686
Bug 1245921 - Change toolbox tabs to HTML. r=bgrins

diff --git a/devtools/client/framework/toolbox.js b/devtools/client/framework/toolbox.js
--- a/devtools/client/framework/toolbox.js
+++ b/devtools/client/framework/toolbox.js
@@ -20,16 +20,18 @@ var {Cc, Ci, Cu} = require("chrome");
 var promise = require("promise");
 var {gDevTools} = require("devtools/client/framework/devtools");
 var EventEmitter = require("devtools/shared/event-emitter");
 var Telemetry = require("devtools/client/shared/telemetry");
 var HUDService = require("devtools/client/webconsole/hudservice");
 var viewSource = require("devtools/client/shared/view-source");
 var { attachThread, detachThread } = require("./attach-thread");
 
+const HTML_NS = "http://www.w3.org/1999/xhtml";
+
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource://devtools/client/scratchpad/scratchpad-manager.jsm");
 Cu.import("resource://devtools/client/shared/DOMHelpers.jsm");
 Cu.import("resource://gre/modules/Task.jsm");
 
 loader.lazyGetter(this, "toolboxStrings", () => {
   const properties = "chrome://devtools/locale/toolbox.properties";
   const bundle = Services.strings.createBundle(properties);
@@ -1084,92 +1086,81 @@ Toolbox.prototype = {
     let deck = this.doc.getElementById("toolbox-deck");
 
     let id = toolDefinition.id;
 
     if (toolDefinition.ordinal == undefined || toolDefinition.ordinal < 0) {
       toolDefinition.ordinal = MAX_ORDINAL;
     }
 
-    let radio = this.doc.createElement("radio");
-    // The radio element is not being used in the conventional way, thus
-    // the devtools-tab class replaces the radio XBL binding with its base
-    // binding (the control-item binding).
-    radio.className = "devtools-tab";
-    radio.id = "toolbox-tab-" + id;
-    radio.setAttribute("toolid", id);
-    radio.setAttribute("ordinal", toolDefinition.ordinal);
-    radio.setAttribute("tooltiptext", toolDefinition.tooltip);
+    let tabContainer = this.doc.createElementNS(HTML_NS, "div");
+    tabContainer.className = "devtools-tab";
+    tabContainer.id = "toolbox-tab-" + id;
+    tabContainer.setAttribute("toolid", id);
+    tabContainer.setAttribute("ordinal", toolDefinition.ordinal);
+    tabContainer.setAttribute("tooltiptext", toolDefinition.tooltip);
     if (toolDefinition.invertIconForLightTheme) {
-      radio.setAttribute("icon-invertable", "true");
+      tabContainer.setAttribute("icon-invertable", "true");
     }
 
-    radio.addEventListener("command", () => {
+    tabContainer.addEventListener("click", () => {
       this.selectTool(id);
     });
 
-    // spacer lets us center the image and label, while allowing cropping
-    let spacer = this.doc.createElement("spacer");
-    spacer.setAttribute("flex", "1");
-    radio.appendChild(spacer);
+    let tabContainerInner = this.doc.createElementNS(HTML_NS, "div");
+    tabContainerInner.className = "devtools-tab-inner";
+    tabContainer.appendChild(tabContainerInner);
 
     if (toolDefinition.icon) {
-      let image = this.doc.createElement("image");
+      let image = this.doc.createElementNS(HTML_NS, "img");
       image.className = "default-icon";
-      image.setAttribute("src",
-                         toolDefinition.icon || toolDefinition.highlightedicon);
-      radio.appendChild(image);
+      image.src = toolDefinition.icon || toolDefinition.highlightedicon;
+      tabContainerInner.appendChild(image);
       // Adding the highlighted icon image
-      image = this.doc.createElement("image");
+      image = this.doc.createElementNS(HTML_NS, "img");
       image.className = "highlighted-icon";
-      image.setAttribute("src",
-                         toolDefinition.highlightedicon || toolDefinition.icon);
-      radio.appendChild(image);
+      image.src = toolDefinition.highlightedicon || toolDefinition.icon;
+      tabContainerInner.appendChild(image);
     }
 
     if (toolDefinition.label && !toolDefinition.iconOnly) {
-      let label = this.doc.createElement("label");
-      label.setAttribute("value", toolDefinition.label);
-      label.setAttribute("crop", "end");
-      label.setAttribute("flex", "1");
-      radio.appendChild(label);
-      radio.setAttribute("flex", "1");
+      let label = this.doc.createElementNS(HTML_NS, "label");
+      label.textContent = toolDefinition.label;
+      tabContainerInner.appendChild(label);
     }
 
     if (!toolDefinition.bgTheme) {
       toolDefinition.bgTheme = "theme-toolbar";
     }
     let vbox = this.doc.createElement("vbox");
     vbox.className = "toolbox-panel " + toolDefinition.bgTheme;
 
     // There is already a container for the webconsole frame.
     if (!this.doc.getElementById("toolbox-panel-" + id)) {
       vbox.id = "toolbox-panel-" + id;
     }
 
     if (id === "options") {
       // Options panel is special.  It doesn't belong in the same container as
       // the other tabs.
-      radio.setAttribute("role", "button");
+      tabContainer.setAttribute("role", "button");
       let optionTabContainer = this.doc.getElementById("toolbox-option-container");
-      optionTabContainer.appendChild(radio);
+      optionTabContainer.appendChild(tabContainer);
       deck.appendChild(vbox);
     } else {
-      radio.setAttribute("role", "tab");
-
       // If there is no tab yet, or the ordinal to be added is the largest one.
       if (tabs.childNodes.length == 0 ||
           tabs.lastChild.getAttribute("ordinal") <= toolDefinition.ordinal) {
-        tabs.appendChild(radio);
+        tabs.appendChild(tabContainer);
         deck.appendChild(vbox);
       } else {
         // else, iterate over all the tabs to get the correct location.
         Array.some(tabs.childNodes, (node, i) => {
           if (+node.getAttribute("ordinal") > toolDefinition.ordinal) {
-            tabs.insertBefore(radio, node);
+            tabs.insertBefore(tabContainer, node);
             deck.insertBefore(vbox, deck.childNodes[i]);
             return true;
           }
           return false;
         });
       }
     }
 
diff --git a/devtools/client/themes/toolbars.css b/devtools/client/themes/toolbars.css
--- a/devtools/client/themes/toolbars.css
+++ b/devtools/client/themes/toolbars.css
@@ -819,31 +819,43 @@
 }
 
 .theme-dark .devtools-tabbar {
   box-shadow: 0 -2px 0 rgba(0,0,0,.1) inset;
 }
 
 #toolbox-tabs {
   margin: 0;
+  display: flex;
 }
 
 .devtools-tab {
-  -moz-appearance: none;
-  -moz-binding: url("chrome://global/content/bindings/general.xml#control-item");
-  -moz-box-align: center;
+  position: relative;
+  flex: 1;
+  box-sizing: border-box;
   min-width: 32px;
   min-height: 24px;
   max-width: 100px;
   margin: 0;
   padding: 0;
   border-style: solid;
   border-width: 0;
-  -moz-border-start-width: 1px;
-  -moz-box-align: center;
+  border-inline-start-width: 1px;
+}
+
+.devtools-tab-inner {
+  position: absolute;
+  width: 100%;
+  height: 100%;
+  top: 0;
+  left: 0;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  white-space: nowrap;
 }
 
 .theme-dark .devtools-tab {
   color: var(--theme-body-color-alt);
   border-color: #42484f;
 }
 
 .theme-light .devtools-tab {
@@ -876,39 +888,41 @@
 .theme-dark .devtools-tab:not([selected])[highlighted] {
   background-color: hsla(99,100%,14%,.2);
 }
 
 .theme-light .devtools-tab:not([selected])[highlighted] {
   background-color: rgba(44, 187, 15, .2);
 }
 
-.devtools-tab > image {
-  border: none;
-  margin: 0;
-  margin-inline-start: 4px;
+.devtools-tab img {
+  margin-inline-start: 8px;
   opacity: 0.6;
   max-height: 16px;
   width: 16px; /* Prevents collapse during theme switching */
+  flex-shrink: 0;
 }
 
-.devtools-tab > label {
-  white-space: nowrap;
-  margin: 0 4px;
-}
-
-.devtools-tab:hover > image {
+.devtools-tab:hover img {
   opacity: 0.8;
 }
 
-.devtools-tab:active > image,
-.devtools-tab[selected] > image {
+.devtools-tab:active img,
+.devtools-tab[selected] img {
   opacity: 1;
 }
 
+.devtools-tab label {
+  overflow: hidden;
+  text-overflow: ellipsis;
+  margin: 0 4px;
+  flex: 1;
+  text-align: center;
+}
+
 .devtools-tabbar .devtools-tab[selected],
 .devtools-tabbar .devtools-tab[selected]:hover:active {
   color: var(--theme-selection-color);
   background-color: var(--theme-selection-background);
 }
 
 .theme-dark .devtools-tabbar .devtools-tab[selected] {
   box-shadow: 0 2px 0 #d7f1ff inset,
@@ -936,40 +950,38 @@
 #toolbox-tabs .devtools-tab:first-child[selected] {
   -moz-border-start-width: 0;
 }
 
 #toolbox-tabs .devtools-tab:last-child {
   -moz-border-end-width: 1px;
 }
 
-.devtools-tab:not([highlighted]) > .highlighted-icon,
-.devtools-tab[selected] > .highlighted-icon,
-.devtools-tab:not([selected])[highlighted] > .default-icon {
+.devtools-tab:not([highlighted]) .highlighted-icon,
+.devtools-tab[selected] .highlighted-icon,
+.devtools-tab:not([selected])[highlighted] .default-icon {
   visibility: collapse;
 }
 
 /* The options tab is special - it doesn't have the same parent
    as the other tabs (toolbox-option-container vs toolbox-tabs) */
 #toolbox-option-container .devtools-tab:not([selected]) {
   background-color: transparent;
 }
 #toolbox-option-container .devtools-tab {
   border-color: transparent;
   border-width: 0;
   -moz-padding-start: 1px;
-}
-#toolbox-tab-options > image {
-  margin: 0 8px;
+  width: 32px;
 }
 
 /* Invert the colors of certain dark theme images for displaying
  * inside of the light theme.
  */
-.theme-light .devtools-tab[icon-invertable] > image,
+.theme-light .devtools-tab[icon-invertable] img,
 .theme-light #toolbox-dock-buttons > toolbarbutton > image,
 .theme-light .command-button-invertable > image,
 .theme-light .devtools-closebutton > image,
 .theme-light .devtools-toolbarbutton > image,
 .theme-light .devtools-button::before,
 .theme-light #breadcrumb-separator-normal,
 .theme-light .scrollbutton-up > .toolbarbutton-icon,
 .theme-light .scrollbutton-down > .toolbarbutton-icon,
@@ -978,18 +990,18 @@
 .theme-light #requests-menu-network-summary-button .button-icon,
 .theme-light #toggle-breakpoints[checked] > image,
 .theme-light .event-tooltip-debugger-icon {
   filter: invert(1);
 }
 
 /* Since selected backgrounds are blue, we want to use the normal
  * (light) icons. */
-.theme-light .devtools-tab[icon-invertable][selected] > image,
-.theme-light .devtools-tab[icon-invertable][highlighted] > image {
+.theme-light .devtools-tab[icon-invertable][selected] img,
+.theme-light .devtools-tab[icon-invertable][highlighted] img {
   filter: none !important;
 }
 
 .theme-light .command-button:hover {
   background-color: inherit;
 }
 
 .theme-light .command-button:hover:active,
