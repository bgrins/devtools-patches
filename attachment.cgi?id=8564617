# HG changeset patch
# Parent 2737d0c349229e0404135038648720a6db10ea96
# User Tim Nguyen <ntim.bugs@gmail.com>
Bug 1089428 - Allow script injection into source editor component. r=bgrins

diff --git a/browser/devtools/sourceeditor/editor.js b/browser/devtools/sourceeditor/editor.js
--- a/browser/devtools/sourceeditor/editor.js
+++ b/browser/devtools/sourceeditor/editor.js
@@ -215,16 +215,21 @@ function Editor(config) {
       return;
     }
 
     var num = cm.getOption("indentUnit");
     if (cm.getCursor().ch !== 0) num -= 1;
     cm.replaceSelection(" ".repeat(num), "end", "+input");
   };
 
+  // Allow add-ons to inject scripts for their editor instances
+  if (!this.config.externalScripts) {
+    this.config.externalScripts = [];
+  }
+
   events.decorate(this);
 }
 
 Editor.prototype = {
   container: null,
   version: null,
   config: null,
 
@@ -253,19 +258,21 @@ Editor.prototype = {
       // and its dependencies into its DOM.
 
       env.removeEventListener("load", onLoad, true);
       let win = env.contentWindow.wrappedJSObject;
 
       if (!this.config.themeSwitching)
         win.document.documentElement.setAttribute("force-theme", "light");
 
-      CM_SCRIPTS.forEach((url) =>
-        Services.scriptloader.loadSubScript(url, win, "utf8"));
-
+      let scriptsToInject = CM_SCRIPTS.concat(this.config.externalScripts);
+      scriptsToInject.forEach((url) => {
+        if(url.startsWith("chrome://"))
+          Services.scriptloader.loadSubScript(url, win, "utf8");
+      });
       // Replace the propertyKeywords, colorKeywords and valueKeywords
       // properties of the CSS MIME type with the values provided by Gecko.
       let cssSpec = win.CodeMirror.resolveMode("text/css");
       cssSpec.propertyKeywords = cssProperties;
       cssSpec.colorKeywords = cssColors;
       cssSpec.valueKeywords = cssValues;
       win.CodeMirror.defineMIME("text/css", cssSpec);
 
@@ -318,16 +325,17 @@ Editor.prototype = {
       win.CodeMirror.defineExtension("l10n", (name) => {
         return L10N.GetStringFromName(name);
       });
 
       cm.getInputField().controllers.insertControllerAt(0, controller(this));
 
       this.container = env;
       editors.set(this, cm);
+      win.editor = this;
 
       this.reloadPreferences = this.reloadPreferences.bind(this);
       this._prefObserver = new PrefObserver("devtools.editor.");
       this._prefObserver.on(TAB_SIZE, this.reloadPreferences);
       this._prefObserver.on(EXPAND_TAB, this.reloadPreferences);
       this._prefObserver.on(KEYMAP, this.reloadPreferences);
       this._prefObserver.on(AUTO_CLOSE, this.reloadPreferences);
       this._prefObserver.on(AUTOCOMPLETE, this.reloadPreferences);
diff --git a/browser/devtools/sourceeditor/test/browser.ini b/browser/devtools/sourceeditor/test/browser.ini
--- a/browser/devtools/sourceeditor/test/browser.ini
+++ b/browser/devtools/sourceeditor/test/browser.ini
@@ -3,16 +3,17 @@ subsuite = devtools
 support-files =
   cm_comment_test.js
   cm_doc_test.js
   cm_driver.js
   cm_emacs_test.js
   cm_mode_test.css
   cm_mode_test.js
   cm_multi_test.js
+  cm_script_injection_test.js
   cm_search_test.js
   cm_sublime_test.js
   cm_test.js
   cm_vim_test.js
   codemirror.html
   css_statemachine_testcases.css
   css_statemachine_tests.json
   css_autocompletion_tests.json
@@ -24,16 +25,17 @@ support-files =
 [browser_editor_autocomplete_js.js]
 [browser_editor_basic.js]
 [browser_editor_cursor.js]
 [browser_editor_goto_line.js]
 [browser_editor_history.js]
 [browser_editor_markers.js]
 [browser_editor_movelines.js]
 [browser_editor_prefs.js]
+[browser_editor_script_injection.js]
 [browser_editor_addons.js]
 [browser_codemirror.js]
 [browser_css_autocompletion.js]
 [browser_css_getInfo.js]
 [browser_css_statemachine.js]
 [browser_detectindent.js]
 [browser_vimemacs.js]
 skip-if = os == 'linux'&&debug # bug 981707
diff --git a/browser/devtools/sourceeditor/test/browser_editor_script_injection.js b/browser/devtools/sourceeditor/test/browser_editor_script_injection.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/sourceeditor/test/browser_editor_script_injection.js
@@ -0,0 +1,42 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+function test() {
+  waitForExplicitFinish();
+
+  const opt = "chrome,titlebar,toolbar,centerscreen,resizable,dialog=no";
+  const url = "data:text/xml;charset=UTF-8,<?xml version='1.0'?>" +
+    "<?xml-stylesheet href='chrome://global/skin/global.css'?>" +
+    "<window xmlns='http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul'" +
+    " title='Editor' width='600' height='500'><box flex='1'/></window>";
+  const injectedScriptURL = "chrome://mochitests/content/browser/browser/devtools/sourceeditor/test/cm_script_injection_test.js";
+  const injectedText = "Script successfully injected !";
+
+  let win = Services.ww.openWindow(null, url, "_blank", opt, null);
+
+  win.addEventListener("load", function onLoad() {
+    win.removeEventListener("load", onLoad, false);
+
+    waitForFocus(function () {
+      let box = win.document.querySelector("box");
+      let editor = new Editor({
+        value: "Hello.",
+        lineNumbers: true,
+        foldGutter: true,
+        externalScripts: [injectedScriptURL],
+        gutters: [ "CodeMirror-linenumbers", "breakpoints", "CodeMirror-foldgutter" ]
+      });
+// ok(true, "hi");
+      editor.appendTo(box)
+        .then(() => function(editor, win) {
+          ok(editor.getText() == injectedText);
+          // teardown(ed, win);
+        })
+        .then(null, (err) => ok(false, err.message));
+    }, win);
+  }, false);
+
+
+}
diff --git a/browser/devtools/sourceeditor/test/cm_script_injection_test.js b/browser/devtools/sourceeditor/test/cm_script_injection_test.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/sourceeditor/test/cm_script_injection_test.js
@@ -0,0 +1,3 @@
+window.addEventListener("load", () => {
+	editor.setText("Script successfully injected !")
+});
\ No newline at end of file
