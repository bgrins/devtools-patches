# HG changeset patch
# User nchevobbe <nchevobbe@mozilla.com>
# Date 1492705410 -7200
#      Thu Apr 20 18:23:30 2017 +0200
# Node ID 2d81b53e0e0cc8c3fcc7557c9e79d9fa3ea5e44e
# Parent  f6be27f5457ffd75b3763db09a139e24bc2155dc
Bug 1358180 - Add DAMP tests for the console

MozReview-Commit-ID: CYttVTtZxGz

diff --git a/testing/talos/talos/tests/devtools/addon/content/damp.html b/testing/talos/talos/tests/devtools/addon/content/damp.html
--- a/testing/talos/talos/tests/devtools/addon/content/damp.html
+++ b/testing/talos/talos/tests/devtools/addon/content/damp.html
@@ -19,6 +19,8 @@ var defaultConfig = {
     saveAndReadHeapSnapshot: true,
     consoleBulkLogging: true,
     consoleStreamLogging: true,
+    consoleOpenCache: true,
+    consoleArgumentsStress: true,
   }
 };
 
@@ -32,6 +34,8 @@ var testsInfo = {
   saveAndReadHeapSnapshot: "Measure open/close toolbox on memory panel and save/read heap snapshot",
   consoleBulkLogging: "Measure time for a bunch of sync console.log statements to appear",
   consoleStreamLogging: "Measure rAF on page during a stream of console.log statements",
+  consoleOpenCache: "Measure open on webconsole panel when there's a lot of cached messages",
+  consoleArgumentsStress: "Measure output of messages with lots of complex arguments",
 };
 
 function updateConfig() {
diff --git a/testing/talos/talos/tests/devtools/addon/content/damp.js b/testing/talos/talos/tests/devtools/addon/content/damp.js
--- a/testing/talos/talos/tests/devtools/addon/content/damp.js
+++ b/testing/talos/talos/tests/devtools/addon/content/damp.js
@@ -224,6 +224,111 @@ Damp.prototype = {
     yield this.testTeardown();
   }),
 
+  // Open console with a lots of messages in the cache
+  _consoleOpenCacheTest: async function () {
+    let TOTAL_MESSAGES = 1000;
+    let tab = await this.testSetup(SIMPLE_URL);
+    let messageManager = tab.linkedBrowser.messageManager;
+
+    // Load a frame script using a data URI so we can do logs
+    // from the page.  So this is running in content.
+    messageManager.loadFrameScript("data:,(" + encodeURIComponent(
+    `function () {
+        for (var i = 0; i < ${TOTAL_MESSAGES}; i++) {
+          let foo = {
+            bar: {
+              baz: true
+            },
+            [i]: i
+          };
+          content.console.log("DAMP","Log number -> ", i, foo);
+        }
+        sendSyncMessage("done");
+      }`
+    ) + ")()", true);
+
+    let start = performance.now();
+    let {toolbox} = await this.openToolbox("webconsole");
+    let webconsole = toolbox.getPanel("webconsole");
+
+    // Resolve once the "done" message has been received.
+    let onDone = new Promise(resolve => {
+      function receiveMessages(e, messages) {
+        for (let m of messages) {
+          if (m.node.textContent.includes("DONE")) {
+            webconsole.hud.ui.off("new-messages", receiveMessages);
+            // Wait for the console to redraw
+            requestAnimationFrame(resolve);
+          }
+        }
+      }
+      webconsole.hud.ui.on("new-messages", receiveMessages);
+    });
+    messageManager.loadFrameScript("data:,(" + encodeURIComponent(
+    `function () {content.console.log("DONE");}`
+    ) + ")()", true);
+    await onDone;
+
+    let end = performance.now();
+
+    this._results.push({
+      name: "console.openCache",
+      value: end - start
+    });
+
+    await this.closeToolbox(null);
+    await this.testTeardown();
+  },
+
+  // Log messages with lots of Reps.
+  _consoleArgumentsStressTest: async function() {
+    let TOTAL_MESSAGES = 100;
+    let tab = await this.testSetup(SIMPLE_URL);
+    let messageManager = tab.linkedBrowser.messageManager;
+    let {toolbox} = await this.openToolbox("webconsole");
+    let webconsole = toolbox.getPanel("webconsole");
+
+    // Load a frame script using a data URI so we can do logs
+    // from the page.  So this is running in content.
+    messageManager.loadFrameScript("data:,(" + encodeURIComponent(
+    `function () {
+        addMessageListener("do-logs", function () {
+          for (var i = 0; i < ${TOTAL_MESSAGES}; i++) {
+            content.console.log('damp', ...Array(20).fill({
+              bar: {
+                baz: true
+              },
+              foo: ["p-" + i],
+              [i]: i
+            }));
+          }
+          sendSyncMessage("done");
+        });
+      }`
+    ) + ")()", true);
+
+
+    // Resolve once the "done" message has been received.
+    let done = new Promise(resolve => {
+      messageManager.addMessageListener("done", (e) => resolve(e.data));
+    });
+
+    // Kick off the logging
+    messageManager.sendAsyncMessage("do-logs");
+
+    let start = performance.now();
+    await done;
+    let end = performance.now();
+
+    this._results.push({
+      name: "console.consoleArgumentsStressTest",
+      value: end - start
+    });
+
+    await this.closeToolbox(null);
+    await this.testTeardown();
+  },
+
   takeCensus: function(label) {
     let start = performance.now();
 
@@ -521,6 +626,12 @@ Damp.prototype = {
     if (config.subtests.indexOf("consoleStreamLogging") > -1) {
       tests = tests.concat(this._consoleStreamLoggingTest);
     }
+    if (config.subtests.indexOf("consoleOpenCache") > -1) {
+      tests = tests.concat(this._consoleOpenCacheTest);
+    }
+    if (config.subtests.indexOf("consoleArgumentsStress") > -1) {
+      tests = tests.concat(this._consoleArgumentsStressTest);
+    }
     this._doSequence(tests, this._doneInternal);
   }
 }
