# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  ca5915f834c34018490b4acaa5f261cacc8110c5

diff --git a/browser/components/search/content/search-one-offs.js b/browser/components/search/content/search-one-offs.js
--- a/browser/components/search/content/search-one-offs.js
+++ b/browser/components/search/content/search-one-offs.js
@@ -33,17 +33,17 @@ class MozSearchOneOffs extends MozXULEle
         let menuButton = this.querySelector("[anonid='addengine-menu-button']");
         this._updateStateForButton(menuButton);
         this._addEngineMenuShouldBeOpen = true;
         this._resetAddEngineMenuTimeout();
         return;
       }
 
       if (target.localName != "button") return;
-
+console.log("Mouse move ignore?", this._ignoreMouseEvents);
       // Ignore mouse events when the context menu is open.
       if (this._ignoreMouseEvents) return;
 
       let isOneOff =
         target.classList.contains("searchbar-engine-one-off-item") &&
         !target.classList.contains("dummy");
       if (
         isOneOff ||
@@ -75,21 +75,23 @@ class MozSearchOneOffs extends MozXULEle
 
       // Don't update the mouseover state if the context menu is open.
       if (this._ignoreMouseEvents) return;
 
       this._updateStateForButton(null);
     });
 
     this.addEventListener("click", event => {
+      console.log("CLICK", event);
       if (event.button == 2) return; // ignore right clicks.
 
       let button = event.originalTarget;
       let engine = button.engine;
 
+
       if (!engine) return;
 
       // Select the clicked button so that consumers can easily tell which
       // button was acted on.
       this.selectedButton = button;
       this.handleSearchCommand(event, engine);
     });
 
@@ -170,21 +172,30 @@ class MozSearchOneOffs extends MozXULEle
     this.addEventListener("contextmenu", event => {
       let target = event.originalTarget;
       // Prevent the context menu from appearing except on the one off buttons.
       if (!target.classList.contains("searchbar-engine-one-off-item") ||
           target.classList.contains("dummy")) {
         event.preventDefault();
         return;
       }
+
       this.querySelector("[anonid='search-one-offs-context-set-default']")
         .setAttribute("disabled", target.engine == Services.search.currentEngine);
 
       this._contextEngine = target.engine;
+
     });
+
+    this.addEventListener("popuphiding", (e) => {
+      console.log("BASE POUPP HIDING", e.target);
+    });
+    this.addEventListener("popupshowing", (e) => {
+        console.log("BASE POUPP SHOWING", e.target);
+    }, { capture: true, mozSystemGroup: true });
   }
 
   connectedCallback() {
     this.setAttribute("context", "_child");
 
     this.appendChild(
       MozXULElement.parseXULToFragment(`
       <deck anonid="search-panel-one-offs-header" class="search-panel-header search-panel-current-input">
@@ -195,22 +206,22 @@ class MozSearchOneOffs extends MozXULEle
           <label flex="10000" value="&searchWith.label;"></label>
         </hbox>
         <hbox anonid="search-panel-searchonengine" class="search-panel-current-input">
           <label value="&search.label;"></label>
           <label anonid="searchbar-oneoffheader-engine" class="search-panel-input-value" flex="1" crop="end"></label>
           <label flex="10000" value="&searchAfter.label;"></label>
         </hbox>
       </deck>
-      <description anonid="search-panel-one-offs" role="group" class="search-panel-one-offs">
+      <description context="search-one-offs-context-menu" anonid="search-panel-one-offs" role="group" class="search-panel-one-offs">
         <button anonid="search-settings-compact" oncommand="showSettings();" class="searchbar-engine-one-off-item search-setting-button-compact" tooltiptext="&changeSearchSettings.tooltip;"></button>
       </description>
-      <vbox class="search-add-engines"></vbox>
+      <vbox context="search-one-offs-context-menu" class="search-add-engines"></vbox>
       <button anonid="search-settings" oncommand="showSettings();" class="search-setting-button search-panel-header" label="&changeSearchSettings.button;"></button>
-      <menupopup anonid="search-one-offs-context-menu">
+      <menupopup id="search-one-offs-context-menu" anonid="search-one-offs-context-menu">
         <menuitem anonid="search-one-offs-context-open-in-new-tab" label="&searchInNewTab.label;" accesskey="&searchInNewTab.accesskey;"></menuitem>
         <menuitem anonid="search-one-offs-context-set-default" label="&searchSetAsDefault.label;" accesskey="&searchSetAsDefault.accesskey;"></menuitem>
       </menupopup>
       `, ["chrome://browser/locale/browser.dtd"])
     );
 
     this._popup = null;
 
@@ -245,32 +256,38 @@ class MozSearchOneOffs extends MozXULEle
     this._addEngineMenuTimeoutMs = 200;
 
     this._addEngineMenuTimeout = null;
 
     this._addEngineMenuShouldBeOpen = false;
 
     // Force the <deck> Custom Element to be constructed. This can be removed
     // once Bug 1470242 makes this happen behind the scenes.
-    customElements.upgrade(this.header);
+    // customElements.upgrade(this.header);
 
     // Prevent popup events from the context menu from reaching the autocomplete
     // binding (or other listeners).
     let menu = this.querySelector("[anonid='search-one-offs-context-menu']");
-    let listener = aEvent => aEvent.stopPropagation();
-    menu.addEventListener("popupshowing", listener);
-    menu.addEventListener("popuphiding", listener);
+    let listener = aEvent => {
+      console.log(aEvent.type, aEvent.target);
+      aEvent.stopPropagation();
+    };
+
+    menu.addEventListener("popupshowing", listener, { capture: true, mozSystemGroup: true });
+    menu.addEventListener("popuphiding", listener, { capture: true, mozSystemGroup: true });
     menu.addEventListener("popupshown", aEvent => {
+      console.log("INNER SHOWN");
       this._ignoreMouseEvents = true;
       aEvent.stopPropagation();
-    });
+    }, { capture: true, mozSystemGroup: true });
     menu.addEventListener("popuphidden", aEvent => {
+      console.log("INNER HIDDEN");
       this._ignoreMouseEvents = false;
       aEvent.stopPropagation();
-    });
+    }, { capture: true, mozSystemGroup: true });
 
     // Add weak referenced observers to invalidate our cached list of engines.
     Services.prefs.addObserver("browser.search.hiddenOneOffs", this, true);
     Services.obs.addObserver(this, "browser-search-engine-modified", true);
     Services.obs.addObserver(this, "browser-search-service", true);
 
     // Rebuild the buttons when the theme changes.  See bug 1357800 for
     // details.  Summary: On Linux, switching between themes can cause a row
@@ -294,16 +311,17 @@ class MozSearchOneOffs extends MozXULEle
         val.addEventListener(event, this);
       }
     }
     this._popup = val;
 
     // If the popup is already open, rebuild the one-offs now.  The
     // popup may be opening, so check that the state is not closed
     // instead of checking popupOpen.
+      console.log("REBUILDING?", val && val.state);
     if (val && val.state != "closed") {
       this._rebuild();
     }
     return val;
   }
 
   get popup() {
     return this._popup;
@@ -417,19 +435,21 @@ class MozSearchOneOffs extends MozXULEle
       case "input":
         // Allow the consumer's input to override its value property with
         // a oneOffSearchQuery property.  That way if the value is not
         // actually what the user typed (e.g., it's autofilled, or it's a
         // mozaction URI), the consumer has some way of providing it.
         this.query = event.target.oneOffSearchQuery || event.target.value;
         break;
       case "popupshowing":
+      console.log("POUP SHOWING", event);
         this._rebuild();
         break;
       case "popuphidden":
+        console.log("POUP HIDDEN", event);
         Services.tm.dispatchToMainThread(() => {
           this.selectedButton = null;
           this._contextEngine = null;
         });
         break;
     }
   }
 
@@ -658,16 +678,17 @@ class MozSearchOneOffs extends MozXULEle
       let suppressEventTypes = [
         "popupshowing",
         "popuphiding",
         "popupshown",
         "popuphidden",
       ];
       for (let type of suppressEventTypes) {
         list.addEventListener(type, event => {
+          console.log("GOT EVENT", type, list)
           event.stopPropagation();
         });
       }
     }
 
     // Finally, add the engines to the list.  If there aren't too many
     // engines, the list is the search-add-engines vbox.  Otherwise it's the
     // menupopup created earlier.  In the latter case, create menuitem
@@ -699,16 +720,17 @@ class MozSearchOneOffs extends MozXULEle
       }
       if (tooManyEngines) {
         button.classList.add("menuitem-iconic");
       } else {
         button.setAttribute("pack", "start");
       }
       list.appendChild(button);
     }
+    console.log("BUILT");
   }
 
   _buttonIDForEngine(engine) {
     return (
       this.telemetryOrigin +
       "-engine-one-off-item-" +
       this._fixUpEngineNameForID(engine.name)
     );
diff --git a/browser/components/search/content/search.xml b/browser/components/search/content/search.xml
--- a/browser/components/search/content/search.xml
+++ b/browser/components/search/content/search.xml
@@ -552,28 +552,31 @@
         }
 
         // Show the current default engine in the top header of the panel.
         this.updateHeader();
       ]]></handler>
 
       <handler event="popuphiding"><![CDATA[
         this._isHiding = true;
+        console.log("XBL POUPP HIDING", event);
         Services.tm.dispatchToMainThread(() => {
           this._isHiding = false;
         });
       ]]></handler>
 
       <!-- This handles clicks on the topmost "Foo Search" header in the
            popup (hbox[anonid="searchbar-engine"]). -->
       <handler event="click"><![CDATA[
         if (event.button == 2) {
           // Ignore right clicks.
           return;
         }
+
+        console.log("Click through", event);
         let button = event.originalTarget;
         let engine = button.parentNode.engine;
         if (!engine) {
           return;
         }
         this.oneOffButtons.handleSearchCommand(event, engine);
       ]]></handler>
     </handlers>
