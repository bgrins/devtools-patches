# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  0a9484a091f5c7891be36a7d6e32e1a6f819cf2e
972404 Shift right click element alternate plan

diff --git a/browser/devtools/framework/ToolboxProcess.jsm b/browser/devtools/framework/ToolboxProcess.jsm
--- a/browser/devtools/framework/ToolboxProcess.jsm
+++ b/browser/devtools/framework/ToolboxProcess.jsm
@@ -84,16 +84,23 @@ this.BrowserToolboxProcess = function Br
 
 EventEmitter.decorate(BrowserToolboxProcess);
 
 /**
  * Initializes and starts a chrome toolbox process.
  * @return object
  */
 BrowserToolboxProcess.init = function(aOnClose, aOnRun, aOptions) {
+  // If there is already an active process, then just return it instead of
+  // creating a new one.
+  if (processes.size) {
+    let process = [...processes.values()][0];
+    // XXX: Send a message over the protocol to focus the window
+    return process;
+  }
   return new BrowserToolboxProcess(aOnClose, aOnRun, aOptions);
 };
 
 /**
  * Passes a set of options to the BrowserAddonActors for the given ID.
  *
  * @param aId string
  *        The ID of the add-on to pass the options to
diff --git a/browser/devtools/framework/gDevTools.jsm b/browser/devtools/framework/gDevTools.jsm
--- a/browser/devtools/framework/gDevTools.jsm
+++ b/browser/devtools/framework/gDevTools.jsm
@@ -848,16 +848,51 @@ let gDevToolsBrowser = {
 
   /**
    * Add this DevTools's presence to a browser window's document
    *
    * @param {XULDocument} doc
    *        The document to which menuitems and handlers are to be added
    */
   registerBrowserWindow: function DT_registerBrowserWindow(win) {
+    const {console} = Components.utils.import("resource://gre/modules/devtools/Console.jsm", {});
+    console.log("registerBrowserWindow", win);
+
+    // XX: Only add these handlers when BT is possible to open
+    win.addEventListener("mousedown", event => {
+      console.log("MOUSEDOWN", event.shiftKey && event.which === 3)
+      if (event.shiftKey && event.which === 3) {
+        event.preventDefault();
+        event.stopPropagation();
+        return false;
+      }
+    }, true);
+    win.addEventListener("contextmenu", event => {
+      if (event.shiftKey) {
+
+        // See https://dxr.mozilla.org/mozilla-central/source/browser/base/content/nsContextMenu.js#522
+        Cu.import("resource:///modules/devtools/ToolboxProcess.jsm");
+        let p = BrowserToolboxProcess.init();
+        console.log("Context menu event receieved",  p, event.originalTarget, p.loader);
+
+    let inspector = p.loader.require("devtools/server/actors/inspector");
+    inspector.setInspectingNode(event.originalTarget);
+
+    console.log(inspector.getInspectingNode());
+
+        p.debuggerServer.DebuggerServer.ActorPool.forEach((a, b)=> {
+          console.log(a, b);
+        });
+
+        event.preventDefault();
+        event.stopPropagation();
+        return false;
+      }
+    }, true);
+
     this.updateCommandAvailability(win);
     this.ensurePrefObserver();
     gDevToolsBrowser._trackedBrowserWindows.add(win);
     gDevToolsBrowser._addAllToolsToMenu(win.document);
 
     if (this._isFirebugInstalled()) {
       let broadcaster = win.document.getElementById("devtoolsMenuBroadcaster_DevToolbox");
       broadcaster.removeAttribute("key");
diff --git a/toolkit/devtools/server/actors/inspector.js b/toolkit/devtools/server/actors/inspector.js
--- a/toolkit/devtools/server/actors/inspector.js
+++ b/toolkit/devtools/server/actors/inspector.js
@@ -183,16 +183,21 @@ exports.setValueSummaryLength = function
 var gInspectingNode = null;
 
 // We expect this function to be called from the child.js frame script
 // when it receives the node to be inspected over the message manager.
 exports.setInspectingNode = function(val) {
   gInspectingNode = val;
 };
 
+/// XXX: remove this.. just for debugging
+exports.getInspectingNode = function() {
+  return gInspectingNode;
+};
+
 /**
  * Server side of the node actor.
  */
 var NodeActor = exports.NodeActor = protocol.ActorClass({
   typeName: "domnode",
 
   initialize: function(walker, node) {
     protocol.Actor.prototype.initialize.call(this, null);
