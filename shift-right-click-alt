# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  8bdd7c1ef5d209be3e4b65d5c9288d25c4d4216b
972404 Shift right click on an element to open the Browser Toolbox;r=jryans

diff --git a/browser/base/content/nsContextMenu.js b/browser/base/content/nsContextMenu.js
--- a/browser/base/content/nsContextMenu.js
+++ b/browser/base/content/nsContextMenu.js
@@ -495,22 +495,24 @@ nsContextMenu.prototype = {
   inspectNode: function CM_inspectNode() {
     let {devtools} = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
     let gBrowser = this.browser.ownerDocument.defaultView.gBrowser;
     let tt = devtools.TargetFactory.forTab(gBrowser.selectedTab);
     return gDevTools.showToolbox(tt, "inspector").then(function(toolbox) {
       let inspector = toolbox.getCurrentPanel();
       if (this.isRemote) {
         this.browser.messageManager.sendAsyncMessage("debug:inspect", {}, {node: this.target});
-        inspector.walker.findInspectingNode().then(nodeFront => {
-          inspector.selection.setNodeFront(nodeFront, "browser-context-menu");
-        });
       } else {
-        inspector.selection.setNode(this.target, "browser-context-menu");
+        let {InspectorActor} = devtools.require("devtools/server/actors/inspector", {});
+        InspectorActor.setInspectingNode(this.target);
       }
+
+      inspector.walker.findInspectingNode().then(nodeFront => {
+        inspector.selection.setNodeFront(nodeFront, "browser-context-menu");
+      });
     }.bind(this));
   },
 
   // Set various context menu attributes based on the state of the world.
   setTarget: function (aNode, aRangeParent, aRangeOffset) {
     // gContextMenuContentData.isRemote tells us if the event came from a remote
     // process. gContextMenuContentData can be null if something (like tests)
     // opens the context menu directly.
diff --git a/browser/devtools/framework/ToolboxProcess.jsm b/browser/devtools/framework/ToolboxProcess.jsm
--- a/browser/devtools/framework/ToolboxProcess.jsm
+++ b/browser/devtools/framework/ToolboxProcess.jsm
@@ -84,16 +84,23 @@ this.BrowserToolboxProcess = function Br
 
 EventEmitter.decorate(BrowserToolboxProcess);
 
 /**
  * Initializes and starts a chrome toolbox process.
  * @return object
  */
 BrowserToolboxProcess.init = function(aOnClose, aOnRun, aOptions) {
+  // If there is already an active process, then just return it instead of
+  // creating a new one.
+  if (processes.size) {
+    let process = [...processes.values()][0];
+    // XXX: Send a message over the protocol to focus the window maybe?
+    return process;
+  }
   return new BrowserToolboxProcess(aOnClose, aOnRun, aOptions);
 };
 
 /**
  * Passes a set of options to the BrowserAddonActors for the given ID.
  *
  * @param aId string
  *        The ID of the add-on to pass the options to
diff --git a/browser/devtools/framework/gDevTools.jsm b/browser/devtools/framework/gDevTools.jsm
--- a/browser/devtools/framework/gDevTools.jsm
+++ b/browser/devtools/framework/gDevTools.jsm
@@ -630,48 +630,72 @@ let gDevToolsBrowser = {
       gDevToolsBrowser.uninstallWebIDEWidget();
     }
 
     // Enable App Manager?
     let appMgrEnabled = Services.prefs.getBoolPref("devtools.appmanager.enabled");
     toggleCmd("Tools:DevAppMgr", !webIDEEnabled && appMgrEnabled);
 
     // Enable Browser Toolbox?
-    let chromeEnabled = Services.prefs.getBoolPref("devtools.chrome.enabled");
-    let devtoolsRemoteEnabled = Services.prefs.getBoolPref("devtools.debugger.remote-enabled");
-    let remoteEnabled = chromeEnabled && devtoolsRemoteEnabled;
-    toggleCmd("Tools:BrowserToolbox", remoteEnabled);
-    toggleCmd("Tools:BrowserContentToolbox", remoteEnabled && win.gMultiProcessBrowser);
+    let remoteDebuggingEnabled = this.remoteDebuggingEnabled;
+    toggleCmd("Tools:BrowserToolbox", remoteDebuggingEnabled);
+    toggleCmd("Tools:BrowserContentToolbox", remoteDebuggingEnabled && win.gMultiProcessBrowser);
 
     // Enable Error Console?
     let consoleEnabled = Services.prefs.getBoolPref("devtools.errorconsole.enabled");
     toggleCmd("Tools:ErrorConsole", consoleEnabled);
 
     // Enable DevTools connection screen, if the preference allows this.
-    toggleCmd("Tools:DevToolsConnect", devtoolsRemoteEnabled);
+    toggleCmd("Tools:DevToolsConnect", this.devtoolsRemoteEnabled);
+  },
+
+
+  /**
+   * Add or remove the 'shift-right-click' event listners used to open the
+   * Browser Toolbox, depending on the pref availablility.
+   */
+  updateRemoteDebuggingAvailability: function() {
+    this.devtoolsRemoteEnabled = Services.prefs.getBoolPref("devtools.debugger.remote-enabled");
+    this.chromeEnabled = Services.prefs.getBoolPref("devtools.chrome.enabled");
+    this.remoteDebuggingEnabled = this.chromeEnabled && this.devtoolsRemoteEnabled;
+
+    for (let win of this._trackedBrowserWindows) {
+      if (this.remoteDebuggingEnabled) {
+        win.addEventListener("mousedown", this._onMousedown, true);
+        win.addEventListener("contextmenu", this._onContextMenu, true);
+      } else {
+        win.removeEventListener("mousedown", this._onMousedown, true);
+        win.removeEventListener("contextmenu", this._onContextMenu, true);
+      }
+    }
   },
 
   observe: function(subject, topic, prefName) {
+    if (prefName === "devtools.debugger.remote-enabled" ||
+        prefName === "devtools.chrome.enabled") {
+      this.updateRemoteDebuggingAvailability();
+    }
+
     if (prefName.endsWith("enabled")) {
       for (let win of this._trackedBrowserWindows) {
         this.updateCommandAvailability(win);
       }
     }
   },
 
   _prefObserverRegistered: false,
 
   ensurePrefObserver: function() {
     if (!this._prefObserverRegistered) {
       this._prefObserverRegistered = true;
       Services.prefs.addObserver("devtools.", this, false);
+      this.updateRemoteDebuggingAvailability();
     }
   },
 
-
   /**
    * This function is for the benefit of Tools:{toolId} commands,
    * triggered from the WebDeveloper menu and keyboard shortcuts.
    *
    * selectToolCommand's behavior:
    * - if the toolbox is closed,
    *   we open the toolbox and select the tool
    * - if the toolbox is open, and the targeted tool is not selected,
@@ -842,22 +866,55 @@ let gDevToolsBrowser = {
   /**
    * Move WebIDE widget to the navbar
    */
   moveWebIDEWidgetInNavbar: function() {
     CustomizableUI.addWidgetToArea("webide-button", CustomizableUI.AREA_NAVBAR);
   },
 
   /**
+   * A mousedown event that is fired when remote debugging is enabled.
+   * Open the Browser Toolbox and select the node.
+   */
+  _onMousedown: function(e) {
+    if (e.shiftKey && e.which === 3 && gDevToolsBrowser.remoteDebuggingEnabled) {
+      let {BrowserToolboxProcess} =
+        Cu.import("resource:///modules/devtools/ToolboxProcess.jsm", {});
+      let proc = BrowserToolboxProcess.init();
+
+      let {InspectorActor} =
+        proc.loader.require("devtools/server/actors/inspector", {});
+      InspectorActor.setInspectingNode(e.originalTarget);
+
+      e.preventDefault();
+      e.stopPropagation();
+      return false;
+    }
+  },
+
+  /**
+   * A contextmenu event that is fired when remote debugging is enabled.
+   * Don't show the context menu if it was handled by the browser toolbox.
+   */
+  _onContextMenu: function(e) {
+    if (e.shiftKey && gDevToolsBrowser.remoteDebuggingEnabled) {
+      e.preventDefault();
+      e.stopPropagation();
+      return false;
+    }
+  },
+
+  /**
    * Add this DevTools's presence to a browser window's document
    *
    * @param {XULDocument} doc
    *        The document to which menuitems and handlers are to be added
    */
   registerBrowserWindow: function DT_registerBrowserWindow(win) {
+    this.updateRemoteDebuggingAvailability();
     this.updateCommandAvailability(win);
     this.ensurePrefObserver();
     gDevToolsBrowser._trackedBrowserWindows.add(win);
     gDevToolsBrowser._addAllToolsToMenu(win.document);
 
     if (this._isFirebugInstalled()) {
       let broadcaster = win.document.getElementById("devtoolsMenuBroadcaster_DevToolbox");
       broadcaster.removeAttribute("key");
@@ -1291,16 +1348,18 @@ let gDevToolsBrowser = {
     }
 
     let tabContainer = win.document.getElementById("tabbrowser-tabs");
     tabContainer.removeEventListener("TabSelect", this, false);
     tabContainer.removeEventListener("TabOpen", this, false);
     tabContainer.removeEventListener("TabClose", this, false);
     tabContainer.removeEventListener("TabPinned", this, false);
     tabContainer.removeEventListener("TabUnpinned", this, false);
+
+    this.updateRemoteDebuggingAvailability();
   },
 
   handleEvent: function(event) {
     switch (event.type) {
       case "TabOpen":
       case "TabClose":
       case "TabPinned":
       case "TabUnpinned":
diff --git a/browser/devtools/framework/toolbox.js b/browser/devtools/framework/toolbox.js
--- a/browser/devtools/framework/toolbox.js
+++ b/browser/devtools/framework/toolbox.js
@@ -119,16 +119,17 @@ function Toolbox(target, selectedTool, h
   this._toolRegistered = this._toolRegistered.bind(this);
   this._toolUnregistered = this._toolUnregistered.bind(this);
   this._refreshHostTitle = this._refreshHostTitle.bind(this);
   this.selectFrame = this.selectFrame.bind(this);
   this._updateFrames = this._updateFrames.bind(this);
   this._splitConsoleOnKeypress = this._splitConsoleOnKeypress.bind(this);
   this.destroy = this.destroy.bind(this);
   this.highlighterUtils = getHighlighterUtils(this);
+  this._browserToolboxNodePicked = this._browserToolboxNodePicked.bind(this);
   this._highlighterReady = this._highlighterReady.bind(this);
   this._highlighterHidden = this._highlighterHidden.bind(this);
   this._prefChanged = this._prefChanged.bind(this);
   this._saveSplitConsoleHeight = this._saveSplitConsoleHeight.bind(this);
   this._onFocus = this._onFocus.bind(this);
   this._showDevEditionPromo = this._showDevEditionPromo.bind(this);
   this._updateTextboxMenuItems = this._updateTextboxMenuItems.bind(this);
   this._onBottomHostMinimized = this._onBottomHostMinimized.bind(this);
@@ -331,16 +332,19 @@ Toolbox.prototype = {
    */
   open: function() {
     return Task.spawn(function*() {
       let iframe = yield this._host.create();
       let domReady = promise.defer();
 
       // Load the toolbox-level actor fronts and utilities now
       yield this._target.makeRemote();
+
+      this._inspector = InspectorFront(this._target.client, this._target.form);
+
       iframe.setAttribute("src", this._URL);
       iframe.setAttribute("aria-label", toolboxStrings("toolbox.label"));
       let domHelper = new DOMHelpers(iframe.contentWindow);
       domHelper.onceDOMReady(() => domReady.resolve());
 
       yield domReady.promise;
 
       this.isReady = true;
@@ -386,16 +390,17 @@ Toolbox.prototype = {
       // remoted, otherwise we could have done it in the toolbox constructor
       // (bug 1072764).
       let toolDef = gDevTools.getToolDefinition(this._defaultToolId);
       if (!toolDef || !toolDef.isTargetSupported(this._target)) {
         this._defaultToolId = "webconsole";
       }
 
       yield this.selectTool(this._defaultToolId);
+      this._inspector.on("browser-toolbox-node-picked", this._browserToolboxNodePicked);
 
       // Wait until the original tool is selected so that the split
       // console input will receive focus.
       let splitConsolePromise = promise.resolve();
       if (Services.prefs.getBoolPref(SPLITCONSOLE_ENABLED_PREF)) {
         splitConsolePromise = this.openSplitConsole();
       }
 
@@ -1062,17 +1067,17 @@ Toolbox.prototype = {
 
   /**
    * Ensure the tool with the given id is loaded.
    *
    * @param {string} id
    *        The id of the tool to load.
    */
   loadTool: function(id) {
-    if (id === "inspector" && !this._inspector) {
+    if (id === "inspector" && !this._initInspector) {
       return this.initInspector().then(() => {
         return this.loadTool(id);
       });
     }
 
     let deferred = promise.defer();
     let iframe = this.doc.getElementById("toolbox-panel-iframe-" + id);
 
@@ -1662,17 +1667,16 @@ Toolbox.prototype = {
 
   /**
    * Initialize the inspector/walker/selection/highlighter fronts.
    * Returns a promise that resolves when the fronts are initialized
    */
   initInspector: function() {
     if (!this._initInspector) {
       this._initInspector = Task.spawn(function*() {
-        this._inspector = InspectorFront(this._target.client, this._target.form);
         this._walker = yield this._inspector.getWalker(
           {showAllAnonymousContent: Services.prefs.getBoolPref("devtools.inspector.showAllAnonymousContent")}
         );
         this._selection = new Selection(this._walker);
 
         if (this.highlighterUtils.isRemoteHighlightable()) {
           this.walker.on("highlighter-ready", this._highlighterReady);
           this.walker.on("highlighter-hide", this._highlighterHidden);
@@ -1693,16 +1697,18 @@ Toolbox.prototype = {
     if (this._destroying) {
       return this._destroying;
     }
 
     if (!this._inspector) {
       return promise.resolve();
     }
 
+    this._inspector.off("browser-toolbox-node-picked", this._browserToolboxNodePicked);
+
     let outstanding = () => {
       return Task.spawn(function*() {
         yield this.highlighterUtils.stopPicker();
         yield this._inspector.destroy();
         if (this._highlighter) {
           yield this._highlighter.destroy();
         }
         if (this._selection) {
@@ -1954,16 +1960,24 @@ Toolbox.prototype = {
     Services.obs.addObserver(leakCheckObserver, topic, false);
     this._destroyer.then(() => {
       Services.obs.removeObserver(leakCheckObserver, topic);
     });
 
     return this._destroyer;
   },
 
+  _browserToolboxNodePicked: Task.async(function*() {
+    let inspector = yield this.selectTool("inspector");
+    let nodeFront = yield this.walker.findInspectingNode();
+    if (nodeFront) {
+      inspector.selection.setNodeFront(nodeFront, "browser-context-menu");
+    }
+  }),
+
   _highlighterReady: function() {
     this.emit("highlighter-ready");
   },
 
   _highlighterHidden: function() {
     this.emit("highlighter-hide");
   },
 
diff --git a/toolkit/devtools/server/actors/inspector.js b/toolkit/devtools/server/actors/inspector.js
--- a/toolkit/devtools/server/actors/inspector.js
+++ b/toolkit/devtools/server/actors/inspector.js
@@ -169,30 +169,16 @@ var gValueSummaryLength = exports.DEFAUL
 exports.getValueSummaryLength = function() {
   return gValueSummaryLength;
 };
 
 exports.setValueSummaryLength = function(val) {
   gValueSummaryLength = val;
 };
 
-// When the user selects a node to inspect in e10s, the parent process
-// has a CPOW that wraps the node being inspected.  It uses the
-// message manager to send this node to the child, which stores the
-// node in gInspectingNode. Then a findInspectingNode request is sent
-// over the remote debugging protocol, and gInspectingNode is returned
-// to the parent as a NodeFront.
-var gInspectingNode = null;
-
-// We expect this function to be called from the child.js frame script
-// when it receives the node to be inspected over the message manager.
-exports.setInspectingNode = function(val) {
-  gInspectingNode = val;
-};
-
 /**
  * Server side of the node actor.
  */
 var NodeActor = exports.NodeActor = protocol.ActorClass({
   typeName: "domnode",
 
   initialize: function(walker, node) {
     protocol.Actor.prototype.initialize.call(this, null);
@@ -1891,23 +1877,23 @@ var WalkerActor = protocol.ActorClass({
       node = walker.previousSibling();
     } while(node && --count);
     ret.reverse();
     return ret;
   },
 
   /**
    * Return the node that the parent process has asked to
-   * inspect. This node is expected to be stored in gInspectingNode
+   * inspect. This node is expected to be stored in InspectorActor.inspectingNode
    * (which is set by a message manager message to the child.js frame
    * script). The node is returned over the remote debugging protocol
    * as a NodeFront.
    */
   findInspectingNode: method(function() {
-    let node = gInspectingNode;
+    let node = InspectorActor.inspectingNode;
     if (!node) {
       return {}
     };
 
     return this.attachElement(node);
   }, {
     request: {},
     response: RetVal("disconnectedNode")
@@ -3504,19 +3490,30 @@ var AttributeModificationList = Class({
 })
 
 /**
  * Server side of the inspector actor, which is used to create
  * inspector-related actors, including the walker.
  */
 var InspectorActor = exports.InspectorActor = protocol.ActorClass({
   typeName: "inspector",
+  events: {
+    "browser-toolbox-node-picked" : {
+      type: "browser-toolbox-node-picked",
+    },
+  },
+
   initialize: function(conn, tabActor) {
     protocol.Actor.prototype.initialize.call(this, conn);
     this.tabActor = tabActor;
+
+
+    events.on(InspectorActor, "inspecting-node", () => {
+      events.emit(this, "browser-toolbox-node-picked");
+    });
   },
 
   destroy: function () {
     protocol.Actor.prototype.destroy.call(this);
   },
 
   // Forces destruction of the actor and all its children
   // like highlighter, walker and style actors.
@@ -3710,16 +3707,33 @@ var InspectorActor = exports.InspectorAc
     }
   }, {
     request: {url: Arg(0, "string"), node: Arg(1, "nullable:domnode")},
     response: {value: RetVal("string")}
   })
 });
 
 /**
+ * When the user selects a node to inspect in e10s, the parent process
+ * has a CPOW that wraps the node being inspected.  It uses the
+ * message manager to send this node to the child, which stores the
+ * node in InspectorActor.inspectingNode. Then a findInspectingNode request is sent
+ * over the remote debugging protocol, and InspectorActor.inspectingNode is returned
+ * to the parent as a NodeFront.
+ *
+ * We expect this function to be called from the child.js frame script
+ * when it receives the node to be inspected over the message manager.
+ */
+InspectorActor.setInspectingNode = function(node) {
+  InspectorActor.inspectingNode = node;
+  console.log("Set inspecting node called");
+  events.emit(InspectorActor, "inspecting-node");
+};
+
+/**
  * Client side of the inspector actor, which is used to create
  * inspector-related actors, including the walker.
  */
 var InspectorFront = exports.InspectorFront = protocol.FrontClass(InspectorActor, {
   initialize: function(client, tabForm) {
     protocol.Front.prototype.initialize.call(this, client);
     this.actorID = tabForm.inspectorActor;
 
diff --git a/toolkit/devtools/server/child.js b/toolkit/devtools/server/child.js
--- a/toolkit/devtools/server/child.js
+++ b/toolkit/devtools/server/child.js
@@ -99,17 +99,17 @@ let chromeGlobal = this;
   });
   addMessageListener("debug:disconnect", onDisconnect);
 
   let onInspect = DevToolsUtils.makeInfallible(function(msg) {
     // Store the node to be inspected in a global variable
     // (gInspectingNode). Later we'll fetch this variable again using
     // the findInspectingNode request over the remote debugging
     // protocol.
-    let inspector = devtools.require("devtools/server/actors/inspector");
-    inspector.setInspectingNode(msg.objects.node);
+    let {InspectorActor} = devtools.require("devtools/server/actors/inspector", {});
+    InspectorActor.setInspectingNode(msg.objects.node);
   });
   addMessageListener("debug:inspect", onInspect);
 })();
 
 } catch(e) {
   dump("Exception in app child process: " + e + "\n");
 }
