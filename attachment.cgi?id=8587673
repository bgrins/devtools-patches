# HG changeset patch
# User Gabriel Luong <gabriel.luong@gmail.com>
# Parent  ca26a8a0879d15a5c707a6275760c41bb4ef4764
Bug 1120616 - Part 3: Adjust the styles in the computed view's filter style search r=bgrins

diff --git a/browser/devtools/styleinspector/computed-view.js b/browser/devtools/styleinspector/computed-view.js
--- a/browser/devtools/styleinspector/computed-view.js
+++ b/browser/devtools/styleinspector/computed-view.js
@@ -146,43 +146,47 @@
   // Create bound methods.
   this.focusWindow = this.focusWindow.bind(this);
   this._onContextMenu = this._onContextMenu.bind(this);
   this._contextMenuUpdate = this._contextMenuUpdate.bind(this);
   this._onSelectAll = this._onSelectAll.bind(this);
   this._onClick = this._onClick.bind(this);
   this._onCopy = this._onCopy.bind(this);
   this._onCopyColor = this._onCopyColor.bind(this);
+  this._onFilterStyles = this._onFilterStyles.bind(this);
+  this._onClearSearch = this._onClearSearch.bind(this);
+  this._onIncludeBrowserStyles = this._onIncludeBrowserStyles.bind(this);
 
-  this.styleDocument.addEventListener("copy", this._onCopy);
+  this.root = this.styleDocument.getElementById("root");
+  this.element = this.styleDocument.getElementById("propertyContainer");
+  this.searchField = this.styleDocument.getElementById("computedview-searchbox");
+  this.searchClearButton = this.styleDocument.getElementById("computedview-searchinput-clear");
+  this.includeBrowserStylesCheckbox = this.styleDocument.getElementById("browser-style-checkbox");
+
   this.styleDocument.addEventListener("mousedown", this.focusWindow);
-  this.styleDocument.addEventListener("contextmenu", this._onContextMenu);
-
-  // Nodes used in templating
-  this.root = this.styleDocument.getElementById("root");
-  this.templateRoot = this.styleDocument.getElementById("templateRoot");
-  this.element = this.styleDocument.getElementById("propertyContainer");
-
-  // Listen for click events
-  this.element.addEventListener("click", this._onClick, false);
+  this.element.addEventListener("click", this._onClick);
+  this.element.addEventListener("copy", this._onCopy);
+  this.element.addEventListener("contextmenu", this._onContextMenu);
+  this.searchField.addEventListener("input", this._onFilterStyles);
+  this.searchClearButton.addEventListener("click", this._onClearSearch);
+  this.includeBrowserStylesCheckbox.addEventListener("command",
+    this._onIncludeBrowserStyles);
 
   // No results text.
   this.noResults = this.styleDocument.getElementById("noResults");
 
   // Refresh panel when color unit changed.
   this._handlePrefChange = this._handlePrefChange.bind(this);
   gDevTools.on("pref-changed", this._handlePrefChange);
 
   // Refresh panel when pref for showing original sources changes
   this._updateSourceLinks = this._updateSourceLinks.bind(this);
   this._prefObserver = new PrefObserver("devtools.");
   this._prefObserver.on(PREF_ORIG_SOURCES, this._updateSourceLinks);
 
-  CssHtmlTree.processTemplate(this.templateRoot, this.root, this);
-
   // The element that we're inspecting, and the document that it comes from.
   this.viewedElement = null;
 
   this._buildContextMenu();
   this.createStyleViews();
 
   // Add the tooltips and highlightersoverlay
   this.tooltips = new overlays.TooltipsOverlay(this);
@@ -247,22 +251,16 @@
 
 CssHtmlTree.prototype = {
   // Cache the list of properties that match the selected element.
   _matchedProperties: null,
 
   // Used for cancelling timeouts in the style filter.
   _filterChangedTimeout: null,
 
-  // The search filter
-  searchField: null,
-
-  // Reference to the "Include browser styles" checkbox.
-  includeBrowserStylesCheckbox: null,
-
   // Holds the ID of the panelRefresh timeout.
   _panelRefreshTimeout: null,
 
   // Toggle for zebra striping
   _darkStripe: true,
 
   // Number of visible properties
   numVisibleProperties: 0,
@@ -491,58 +489,75 @@
       let deferred = promise.defer();
       this._refreshProcess = new UpdateProcess(this.styleWindow, this.propertyViews, {
         onItem: (aPropView) => {
           aPropView.refresh();
         },
         onDone: () => {
           this._refreshProcess = null;
           this.noResults.hidden = this.numVisibleProperties > 0;
+
+          if (this.searchField.value.length > 0 && !this.numVisibleProperties) {
+            this.searchField.classList.add("devtools-style-searchbox-no-match");
+          } else {
+            this.searchField.classList.remove("devtools-style-searchbox-no-match");
+          }
+
           this.inspector.emit("computed-view-refreshed");
           deferred.resolve(undefined);
         }
       });
       this._refreshProcess.schedule();
       return deferred.promise;
     }).then(null, (err) => console.error(err));
   },
 
   /**
-   * Called when the user enters a search term.
+   * Called when the user enters a search term in the filter stylesearch box.
    *
    * @param {Event} aEvent the DOM Event object.
    */
-  filterChanged: function CssHtmlTree_filterChanged(aEvent)
+  _onFilterStyles: function(aEvent)
   {
     let win = this.styleWindow;
 
     if (this._filterChangedTimeout) {
       win.clearTimeout(this._filterChangedTimeout);
     }
 
+    let filterTimeout = (this.searchField.value.length > 0)
+      ? FILTER_CHANGED_TIMEOUT : 0;
+    this.searchClearButton.style.display = (this.searchField.value.length > 0)
+      ? "block" : "none";
+
     this._filterChangedTimeout = win.setTimeout(() => {
+      if (this.searchField.value.length > 0) {
+        this.searchField.setAttribute("filled", true);
+      } else {
+        this.searchField.removeAttribute("filled");
+      }
+
       this.refreshPanel();
       this._filterChangeTimeout = null;
-    }, FILTER_CHANGED_TIMEOUT);
+    }, filterTimeout);
   },
 
   /**
    * The change event handler for the includeBrowserStyles checkbox.
    *
    * @param {Event} aEvent the DOM Event object.
    */
-  includeBrowserStylesChanged:
-  function CssHtmltree_includeBrowserStylesChanged(aEvent)
+  _onIncludeBrowserStyles: function(aEvent)
   {
     this.refreshSourceFilter();
     this.refreshPanel();
   },
 
   /**
-   * When includeBrowserStyles.checked is false we only display properties that
+   * When includeBrowserStylesCheckbox.checked is false we only display properties that
    * have matched selectors and have been included by the document or one of the
    * document's stylesheets. If .checked is false we display all properties
    * including those that come from UA stylesheets.
    */
   refreshSourceFilter: function CssHtmlTree_setSourceFilter()
   {
     this._matchedProperties = null;
     this._sourceFilter = this.includeBrowserStyles ?
@@ -808,42 +823,46 @@
    */
   _onToggleOrigSources: function()
   {
     let isEnabled = Services.prefs.getBoolPref(PREF_ORIG_SOURCES);
     Services.prefs.setBoolPref(PREF_ORIG_SOURCES, !isEnabled);
   },
 
   /**
+   * Called when the user clicks on the clear button in the filter style search
+   * box.
+   */
+  _onClearSearch: function() {
+    this.searchField.value = "";
+    this.searchField.focus();
+    this._onFilterStyles();
+  },
+
+  /**
    * Destructor for CssHtmlTree.
    */
   destroy: function CssHtmlTree_destroy()
   {
     this.viewedElement = null;
     this._outputParser = null;
 
-    // Remove event listeners
-    this.includeBrowserStylesCheckbox.removeEventListener("command",
-      this.includeBrowserStylesChanged);
-    this.searchField.removeEventListener("command", this.filterChanged);
     gDevTools.off("pref-changed", this._handlePrefChange);
 
     this._prefObserver.off(PREF_ORIG_SOURCES, this._updateSourceLinks);
     this._prefObserver.destroy();
 
     // Cancel tree construction
     if (this._createViewsProcess) {
       this._createViewsProcess.cancel();
     }
     if (this._refreshProcess) {
       this._refreshProcess.cancel();
     }
 
-    this.element.removeEventListener("click", this._onClick, false);
-
     // Remove context menu
     if (this._contextmenu) {
       // Destroy the Select All menuitem.
       this.menuitemCopy.removeEventListener("command", this._onCopy);
       this.menuitemCopy = null;
 
       // Destroy the Copy menuitem.
       this.menuitemSelectAll.removeEventListener("command", this._onSelectAll);
@@ -860,24 +879,32 @@
     }
 
     this.popupNode = null;
 
     this.tooltips.destroy();
     this.highlighters.destroy();
 
     // Remove bound listeners
-    this.styleDocument.removeEventListener("contextmenu", this._onContextMenu);
-    this.styleDocument.removeEventListener("copy", this._onCopy);
     this.styleDocument.removeEventListener("mousedown", this.focusWindow);
+    this.element.removeEventListener("click", this._onClick);
+    this.element.removeEventListener("copy", this._onCopy);
+    this.element.removeEventListener("contextmenu", this._onContextMenu);
+    this.searchField.removeEventListener("input", this._onFilterStyles);
+    this.searchClearButton.removeEventListener("click", this._onClearSearch);
+    this.includeBrowserStylesCheckbox.removeEventListener("command",
+      this.includeBrowserStylesChanged);
 
     // Nodes used in templating
     this.root = null;
     this.element = null;
     this.panel = null;
+    this.searchField = null;
+    this.searchClearButton = null;
+    this.includeBrowserStylesCheckbox = null;
 
     // The document in which we display the results (csshtmltree.xul).
     this.styleDocument = null;
 
     for (let propView of this.propertyViews)  {
       propView.destroy();
     }
 
@@ -999,18 +1026,20 @@
       return false;
     }
 
     if (!this.tree.includeBrowserStyles && !this.hasMatchedSelectors) {
       return false;
     }
 
     let searchTerm = this.tree.searchField.value.toLowerCase();
-    if (searchTerm && this.name.toLowerCase().indexOf(searchTerm) == -1 &&
-      this.value.toLowerCase().indexOf(searchTerm) == -1) {
+    let isValidSearchTerm = searchTerm.trim().length > 0;
+    if (isValidSearchTerm &&
+        this.name.toLowerCase().indexOf(searchTerm) == -1 &&
+        this.value.toLowerCase().indexOf(searchTerm) == -1) {
       return false;
     }
 
     return true;
   },
 
   /**
    * Returns the className that should be assigned to the propertyView.
diff --git a/browser/devtools/styleinspector/computedview.xhtml b/browser/devtools/styleinspector/computedview.xhtml
--- a/browser/devtools/styleinspector/computedview.xhtml
+++ b/browser/devtools/styleinspector/computedview.xhtml
@@ -44,50 +44,44 @@
           this.computedview.destroy();
         }
       }
     </script>
   </head>
 
   <body>
 
+    <div id="root" class="devtools-monospace">
+      <div class="devtools-toolbar">
+        <div class="devtools-searchbox">
+          <input id="computedview-searchbox"
+                 class="devtools-searchinput devtools-rule-searchbox"
+                 type="search" placeholder="&userStylesSearch;"/>
+          <button id="computedview-searchinput-clear" class="devtools-searchinput-clear"></button>
+        </div>
+        <xul:checkbox id="browser-style-checkbox"
+                      class="includebrowserstyles"
+                      checked="false" label="&browserStylesLabel;"/>
+      </div>
+    </div>
+
     <!-- The output from #templateProperty (below) is appended here. -->
     <div id="propertyContainer" class="devtools-monospace">
     </div>
 
     <!-- When no properties are found the following block is displayed. -->
     <div id="noResults" hidden="">
       &noPropertiesFound;
     </div>
 
-    <!-- The output from #templateRoot (below) is inserted here. -->
-    <div id="root" class="devtools-monospace"></div>
-
     <!--
     To visually debug the templates without running firefox, alter the display:none
     -->
     <div style="display:none;">
       <!--
-      templateRoot sits at the top of the window and contains the "include default
-      styles" checkbox. For data it needs an instance of CssHtmlTree.
-      -->
-      <div id="templateRoot">
-        <xul:hbox class="devtools-toolbar" flex="1" align="center">
-          <xul:checkbox class="includebrowserstyles"
-                        save="${includeBrowserStylesCheckbox}"
-                        oncommand="${includeBrowserStylesChanged}" checked="false"
-                        label="&browserStylesLabel;"/>
-          <xul:textbox class="devtools-searchinput" type="search" save="${searchField}"
-                      placeholder="&userStylesSearch;" flex="1"
-                      oncommand="${filterChanged}"/>
-        </xul:hbox>
-      </div>
-
-
-      <!--
       A templateMatchedSelectors sits inside each templateProperties showing the
       list of selectors that affect that property. Each needs data like this:
       {
         matchedSelectorViews: ..., // from cssHtmlTree.propertyViews[name].matchedSelectorViews
       }
       This is a template so the parent does not need to be a table, except that
       using a div as the parent causes the DOM to muck with the tr elements
       -->
diff --git a/browser/themes/shared/devtools/computedview.css b/browser/themes/shared/devtools/computedview.css
--- a/browser/themes/shared/devtools/computedview.css
+++ b/browser/themes/shared/devtools/computedview.css
@@ -148,16 +148,17 @@
 }
 
 .legendKey {
   margin: 0 5px;
 }
 
 #root .devtools-toolbar {
   width: 100%;
+  display: -moz-box;
 }
 
 .link {
   padding: 0 3px;
   cursor: pointer;
   float: right;
 }
 
