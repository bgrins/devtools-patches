# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  c3f45d6948446530774df1f3527115c1c5adf8f7

diff --git a/browser/base/content/browser-doctype.inc b/browser/base/content/browser-doctype.inc
--- a/browser/base/content/browser-doctype.inc
+++ b/browser/base/content/browser-doctype.inc
@@ -15,8 +15,10 @@
 <!ENTITY % safebrowsingDTD SYSTEM "chrome://browser/locale/safebrowsing/phishing-afterload-warning-message.dtd">
 %safebrowsingDTD;
 <!ENTITY % syncBrandDTD SYSTEM "chrome://browser/locale/syncBrand.dtd">
 %syncBrandDTD;
 <!ENTITY % reportphishDTD SYSTEM "chrome://browser/locale/safebrowsing/report-phishing.dtd">
 %reportphishDTD;
 <!ENTITY % editBookmarkOverlayDTD SYSTEM "chrome://browser/locale/places/editBookmarkOverlay.dtd">
 %editBookmarkOverlayDTD;
+<!ENTITY % globalDTD SYSTEM "chrome://global/locale/global.dtd">
+%globalDTD;
diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -8,16 +8,31 @@
 
 ChromeUtils.import("resource://gre/modules/XPCOMUtils.jsm");
 ChromeUtils.import("resource://gre/modules/Services.jsm");
 ChromeUtils.import("resource://gre/modules/AppConstants.jsm");
 ChromeUtils.import("resource://gre/modules/NotificationDB.jsm");
 
 const {WebExtensionPolicy} = Cu.getGlobalForObject(Services);
 
+function updateDir() {
+
+  // If the HTML document doesn't exist, we can't update the window
+  let body = document.querySelector("#locale-wrapper");
+  if (!body) return;
+  body.dir = Services.locale.isAppLocaleRTL ? "rtl" : "ltr";
+}
+
+Services.prefs.addObserver("intl.uidirection", {
+  observe() {
+    console.log("HERE", Services.locale.isAppLocaleRTL);
+    updateDir();
+  }
+});
+
 // lazy module getters
 
 XPCOMUtils.defineLazyModuleGetters(this, {
   AddonManager: "resource://gre/modules/AddonManager.jsm",
   BrowserUsageTelemetry: "resource:///modules/BrowserUsageTelemetry.jsm",
   BrowserUtils: "resource://gre/modules/BrowserUtils.jsm",
   BrowserWindowTracker: "resource:///modules/BrowserWindowTracker.jsm",
   CFRPageActions: "resource://activity-stream/lib/CFRPageActions.jsm",
@@ -1220,16 +1235,19 @@ var gBrowserInit = {
 
   // Used to check if the new window is still adopting an existing tab as its first tab
   // (e.g. from the WebExtensions internals).
   isAdoptingTab() {
     return !!this.getTabToAdopt();
   },
 
   onBeforeInitialXULLayout() {
+
+
+
     // Set a sane starting width/height for all resolutions on new profiles.
     if (Services.prefs.getBoolPref("privacy.resistFingerprinting")) {
       // When the fingerprinting resistance is enabled, making sure that we don't
       // have a maximum window to interfere with generating rounded window dimensions.
       document.documentElement.setAttribute("sizemode", "normal");
     } else if (!document.documentElement.hasAttribute("width")) {
       const TARGET_WIDTH = 1280;
       const TARGET_HEIGHT = 1040;
diff --git a/browser/base/content/browser.xul b/browser/base/content/browser.xul
--- a/browser/base/content/browser.xul
+++ b/browser/base/content/browser.xul
@@ -68,19 +68,22 @@
         macanimationtype="document"
         screenX="4" screenY="4"
         fullscreenbutton="true"
         sizemode="normal"
         retargetdocumentfocus="urlbar"
         persist="screenX screenY width height sizemode"
 #ifdef BROWSER_XHTML
         hidden="true"
+        dir="rtl"
 #endif
         >
 
+<!-- <html:div id="locale-wrapper" style="margin: 0; padding: 0; height: 100vh; width: 100vh; display: -moz-box; -moz-box-orient: vertical;"> -->
+
 # All JS files which are needed by browser.xul and other top level windows to
 # support MacOS specific features *must* go into the global-scripts.inc file so
 # that they can be shared with macWindow.inc.xul.
 #include global-scripts.inc
 
 <script type="application/javascript"
 #ifdef BROWSER_XHTML
 xmlns="http://www.w3.org/1999/xhtml"
@@ -1373,13 +1376,15 @@ xmlns="http://www.w3.org/1999/xhtml"
   </vbox>
 
 
 #ifdef BROWSER_XHTML
 <script type="application/javascript" xmlns="http://www.w3.org/1999/xhtml">
     // We initially hide the window to prevent layouts during parse. This lets us
     // avoid accidental XBL construction and better match browser.xul (see Bug 1497975).
     gBrowserInit.onBeforeInitialXULLayout();
+    updateDir();
     document.documentElement.removeAttribute("hidden");
 </script>
 #endif
 
+<!-- </html:div> -->
 </window>
diff --git a/devtools/client/inspector/animation/test/browser_animation_current-time-scrubber-rtl.js b/devtools/client/inspector/animation/test/browser_animation_current-time-scrubber-rtl.js
--- a/devtools/client/inspector/animation/test/browser_animation_current-time-scrubber-rtl.js
+++ b/devtools/client/inspector/animation/test/browser_animation_current-time-scrubber-rtl.js
@@ -6,11 +6,13 @@
 /* import-globals-from current-time-scrubber_head.js */
 
 // Test for CurrentTimeScrubber on RTL environment.
 
 add_task(async function() {
   Services.scriptloader.loadSubScript(
     CHROME_URL_ROOT + "current-time-scrubber_head.js", this);
   await pushPref("intl.uidirection", 1);
+
+  await new Promise(r=>r);
   // eslint-disable-next-line no-undef
   await testCurrentTimeScrubber(true);
 });
diff --git a/toolkit/content/xul.css b/toolkit/content/xul.css
--- a/toolkit/content/xul.css
+++ b/toolkit/content/xul.css
@@ -24,16 +24,31 @@
 @namespace url("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"); /* set default namespace to XUL */
 @namespace html url("http://www.w3.org/1999/xhtml"); /* namespace for HTML elements */
 @namespace xbl url("http://www.mozilla.org/xbl"); /* namespace for XBL elements */
 
 :root {
   --animation-easing-function: cubic-bezier(.07, .95, 0, 1);
 }
 
+/* bidi */
+
+:-moz-has-dir-attr {
+  unicode-bidi: isolate;
+}
+:-moz-dir-attr-rtl {
+  direction: rtl;
+}
+:-moz-dir-attr-ltr {
+  direction: ltr;
+}
+
+:-moz-dir-attr-like-auto:dir(ltr) { direction: ltr; }
+:-moz-dir-attr-like-auto:dir(rtl) { direction: rtl; }
+
 /* ::::::::::
    :: Rules for 'hiding' portions of the chrome for special
    :: kinds of windows (not JUST browser windows) with toolbars
    ::::: */
 
 window[chromehidden~="menubar"] .chromeclass-menubar,
 window[chromehidden~="directories"] .chromeclass-directories,
 window[chromehidden~="status"] .chromeclass-status,
