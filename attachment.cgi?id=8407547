# HG changeset patch
# Parent 449e835346b55f9e5ca5e05621ffbf35e7c0e394
# User Michael Ratcliffe <mratcliffe@mozilla.com>
# Date 1397659282 -3600

Bug 994729 - Layout view guides not moving on hover r=bgrins

diff --git a/browser/devtools/layoutview/test/browser.ini b/browser/devtools/layoutview/test/browser.ini
--- a/browser/devtools/layoutview/test/browser.ini
+++ b/browser/devtools/layoutview/test/browser.ini
@@ -1,12 +1,14 @@
 [DEFAULT]
 skip-if = e10s # Bug ?????? - devtools tests disabled with e10s
 subsuite = devtools
 support-files =
   head.js
 
 [browser_layoutview.js]
+[browser_layoutview_guides.js]
+
 skip-if = true
 [browser_editablemodel.js]
 [browser_editablemodel_allproperties.js]
 [browser_editablemodel_border.js]
 [browser_editablemodel_stylerules.js]
diff --git a/browser/devtools/layoutview/test/browser_layoutview_guides.js b/browser/devtools/layoutview/test/browser_layoutview_guides.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/layoutview/test/browser_layoutview_guides.js
@@ -0,0 +1,103 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+let inspector;
+let view;
+
+let test = asyncTest(function*() {
+  let style = "div { position: absolute; top: 50px; left: 50px; height: 10px; width: 10px; border: 10px solid black; padding: 10px; margin: 10px;}";
+  let html = "<style>" + style + "</style><div></div>";
+
+  let content = yield loadTab("data:text/html;charset=utf-8," + encodeURIComponent(html));
+  let node = content.document.querySelector("div");
+  ok(node, "node found");
+
+  let target = TargetFactory.forTab(gBrowser.selectedTab);
+  let toolbox = yield gDevTools.showToolbox(target, "inspector");
+  inspector = toolbox.getCurrentPanel();
+
+  info("Inspector open");
+
+  inspector.sidebar.select("layoutview");
+  yield inspector.sidebar.once("layoutview-ready");
+
+  inspector.selection.setNode(node);
+  yield inspector.once("inspector-updated");
+
+  info("Layout view ready");
+
+  view = inspector.sidebar.getWindowForTab("layoutview");
+  ok(!!view.layoutview, "LayoutView document is alive.");
+
+  yield runTests();
+
+  executeSoon(function() {
+    inspector._toolbox.destroy();
+  });
+
+  yield gDevTools.once("toolbox-destroyed");
+});
+
+addTest("Test that the initial values of the box model are correct",
+function*() {
+  yield testGuideOnLayoutHover("margins", {
+    top: { x1: "0", x2: "100%", y1: "119.5", y2: "119.5" },
+    right: { x1: "50.5", x2: "50.5", y1: "0", y2: "100%" },
+    bottom: { x1: "0", x2: "100%", y1: "50.5", y2: "50.5" },
+    left: { x1: "119.5", x2: "119.5", y1: "0", y2: "100%" }
+  });
+
+  yield testGuideOnLayoutHover("borders", {
+    top: { x1: "0", x2: "100%", y1: "109.5", y2: "109.5" },
+    right: { x1: "60.5", x2: "60.5", y1: "0", y2: "100%" },
+    bottom: { x1: "0", x2: "100%", y1: "60.5", y2: "60.5" },
+    left: { x1: "109.5", x2: "109.5", y1: "0", y2: "100%" }
+  });
+
+  yield testGuideOnLayoutHover("padding", {
+    top: { x1: "0", x2: "100%", y1: "99.5", y2: "99.5" },
+    right: { x1: "70.5", x2: "70.5", y1: "0", y2: "100%" },
+    bottom: { x1: "0", x2: "100%", y1: "70.5", y2: "70.5" },
+    left: { x1: "99.5", x2: "99.5", y1: "0", y2: "100%" }
+  });
+
+  yield testGuideOnLayoutHover("content", {
+    top: { x1: "0", x2: "100%", y1: "79.5", y2: "79.5" },
+    right: { x1: "90.5", x2: "90.5", y1: "0", y2: "100%" },
+    bottom: { x1: "0", x2: "100%", y1: "90.5", y2: "90.5" },
+    left: { x1: "79.5", x2: "79.5", y1: "0", y2: "100%" }
+  });
+});
+
+function* testGuideOnLayoutHover(id, expected) {
+  info("Checking " + id);
+
+  let elt = view.document.getElementById(id);
+  EventUtils.synthesizeMouse(elt, 3, 3, { type: "mouseover" }, view);
+  yield inspector.once("layoutview-updated");
+
+  let guideTop = getGuideStatus("top");
+  let guideRight = getGuideStatus("right");
+  let guideBottom = getGuideStatus("bottom");
+  let guideLeft = getGuideStatus("left");
+
+  is(guideTop.x1, expected.top.x1, "top x1 is correct");
+  is(guideTop.x2, expected.top.x2, "top x2 is correct");
+  is(guideTop.y1, expected.top.y1, "top y1 is correct");
+  is(guideTop.y2, expected.top.y2, "top y2 is correct");
+
+  is(guideRight.x1, expected.right.x1, "right x1 is correct");
+  is(guideRight.x2, expected.right.x2, "right x2 is correct");
+  is(guideRight.y1, expected.right.y1, "right y1 is correct");
+  is(guideRight.y2, expected.right.y2, "right y2 is correct");
+
+  is(guideBottom.x1, expected.bottom.x1, "bottom x1 is correct");
+  is(guideBottom.x2, expected.bottom.x2, "bottom x2 is correct");
+  is(guideBottom.y1, expected.bottom.y1, "bottom y1 is correct");
+  is(guideBottom.y2, expected.bottom.y2, "bottom y2 is correct");
+
+  is(guideLeft.x1, expected.left.x1, "left x1 is correct");
+  is(guideLeft.x2, expected.left.x2, "left x2 is correct");
+  is(guideLeft.y1, expected.left.y1, "left y1 is correct");
+  is(guideLeft.y2, expected.left.y2, "left y2 is correct");
+}
diff --git a/browser/devtools/layoutview/test/head.js b/browser/devtools/layoutview/test/head.js
--- a/browser/devtools/layoutview/test/head.js
+++ b/browser/devtools/layoutview/test/head.js
@@ -2,16 +2,18 @@
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 Cu.import("resource://gre/modules/Task.jsm");
 
 let {devtools} = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
 const {Promise: promise} = Cu.import("resource://gre/modules/Promise.jsm", {});
 let TargetFactory = devtools.TargetFactory;
 
+Services.prefs.setBoolPref("devtools.dump.emit", true);
+
 Services.prefs.setBoolPref("devtools.inspector.sidebarOpen", true);
 Services.prefs.setIntPref("devtools.toolbox.footer.height", 350);
 gDevTools.testing = true;
 SimpleTest.registerCleanupFunction(() => {
   Services.prefs.clearUserPref("devtools.inspector.sidebarOpen");
   Services.prefs.clearUserPref("devtools.toolbox.footer.height");
   gDevTools.testing = false;
 });
@@ -68,16 +70,38 @@ function asyncTest(testfunc) {
 
     // Reset the sidebar back to the default
     Services.prefs.setCharPref("devtools.inspector.activeSidebar", "ruleview");
 
     finish();
   });
 }
 
+function getHighlighter() {
+  return gBrowser.selectedBrowser.parentNode.querySelector(".highlighter-container");
+}
+
+function getBoxModelRoot() {
+  let highlighter = getHighlighter();
+  return highlighter.querySelector(".box-model-root");
+}
+
+function getGuideStatus(location) {
+  let root = getBoxModelRoot();
+  let guide = root.querySelector(".box-model-guide-" + location);
+
+  return {
+    visible: !guide.hasAttribute("hidden"),
+    x1: guide.getAttribute("x1"),
+    y1: guide.getAttribute("y1"),
+    x2: guide.getAttribute("x2"),
+    y2: guide.getAttribute("y2")
+  };
+}
+
 var TESTS = [];
 
 function addTest(message, func) {
   TESTS.push([message, Task.async(func)])
 }
 
 var runTests = Task.async(function*() {
   for (let [message, test] of TESTS) {
diff --git a/toolkit/devtools/server/actors/highlighter.js b/toolkit/devtools/server/actors/highlighter.js
--- a/toolkit/devtools/server/actors/highlighter.js
+++ b/toolkit/devtools/server/actors/highlighter.js
@@ -471,17 +471,17 @@ BoxModelHighlighter.prototype = {
    *        Object used for passing options
    */
   show: function(node, options={}) {
     this.currentNode = node;
 
     this._showInfobar();
     this._detachPageListeners();
     this._attachPageListeners();
-    this._update();
+    this._update(options);
     this._trackMutations();
   },
 
   _trackMutations: function() {
     if (this.currentNode) {
       let win = this.currentNode.ownerDocument.defaultView;
       this.currentNodeObserver = new win.MutationObserver(() => {
         this._update();
