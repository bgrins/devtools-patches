# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  aa2d1a17d9fdab70712bacf3b1ced98a39a7e4d1

diff --git a/toolkit/content/widgets/radio.js b/toolkit/content/widgets/radio.js
--- a/toolkit/content/widgets/radio.js
+++ b/toolkit/content/widgets/radio.js
@@ -3,20 +3,54 @@
   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 // This is loaded into all XUL windows. Wrap in a block to prevent
 // leaking to window scope.
 {
 
+
+function respondToVisibility(element, callback) {
+  var options = {
+    root: document.documentElement
+  };
+
+  var observer = new IntersectionObserver((entries, observer) => {
+    entries.forEach(entry => {
+      console.log(entry);
+      callback(entry.intersectionRatio > 0);
+    });
+  }, options);
+
+  observer.observe(element);
+}
+
+
 class MozRadiogroup extends MozBaseControl {
   constructor() {
     super();
 
+    // console.log("constructor", this.hidden, window.windowUtils.getBoundsWithoutFlushing(this));
+
+    respondToVisibility(this, visible => {
+      console.log("REspondijng to visibility", this, visible);
+    });
+
+    // console.log(Object.getOwnPropertyNames(this.prototype));
+    for (let i in MozRadiogroup.prototype) {
+      if (MozRadiogroup.hasOwnProperty(i)) {
+        console.log(i);
+      }
+    }
+
+
+
+
+
     this.addEventListener("mousedown", (event) => {
       if (this.disabled)
         event.preventDefault();
     });
 
     /**
      * keyboard navigation  Here's how keyboard navigation works in radio groups on Windows:
      * The group takes 'focus'
@@ -107,16 +141,18 @@ class MozRadiogroup extends MozBaseContr
         return;
       }
       this.removeAttribute("focused");
       this.focusedItem = null;
     });
   }
 
   connectedCallback() {
+    // console.log("conjnected", this.hidden, window.windowUtils.getBoundsWithoutFlushing(this).width);
+
     this._radioChildren = null;
 
     if (this.getAttribute("disabled") == "true")
       this.disabled = true;
 
     var children = this._getRadioChildren();
     var length = children.length;
     for (var i = 0; i < length; i++) {
