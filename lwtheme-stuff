# HG changeset patch
# Parent d9052c420ed37f5299f379ff6b20395ffef16e64
# User Brian Grinstead <bgrinstead@mozilla.com>
asdf

diff --git a/browser/app/profile/firefox.js b/browser/app/profile/firefox.js
--- a/browser/app/profile/firefox.js
+++ b/browser/app/profile/firefox.js
@@ -1303,19 +1303,21 @@ pref("services.sync.prefs.sync.security.
 pref("services.sync.prefs.sync.signon.rememberSignons", true);
 pref("services.sync.prefs.sync.spellchecker.dictionary", true);
 pref("services.sync.prefs.sync.xpinstall.whitelist.required", true);
 #endif
 
 // Developer edition preferences
 #ifdef MOZ_DEV_EDITION
 pref("browser.devedition.theme.enabled", true);
+pref("browser.devedition.theme.activated", true);
 pref("browser.devedition.theme.showCustomizeButton", true);
 #else
 pref("browser.devedition.theme.enabled", false);
+pref("browser.devedition.theme.activated", false);
 pref("browser.devedition.theme.showCustomizeButton", false);
 #endif
 
 // Developer edition promo preferences
 pref("devtools.devedition.promo.shown", false);
 pref("devtools.devedition.promo.url", "https://mozilla.org/firefox/developer");
 
 // Only potentially show in beta release
diff --git a/browser/base/content/browser-devedition.js b/browser/base/content/browser-devedition.js
--- a/browser/base/content/browser-devedition.js
+++ b/browser/base/content/browser-devedition.js
@@ -1,57 +1,57 @@
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
+var {console} = Cu.import("resource://gre/modules/devtools/Console.jsm", {});
 /**
  * Listeners for the DevEdition theme.  This adds an extra stylesheet
  * to browser.xul if a pref is set and no other themes are applied.
  */
 let DevEdition = {
   _prefName: "browser.devedition.theme.enabled",
+  _activatedPrefName: "browser.devedition.theme.activated",
   _themePrefName: "general.skins.selectedSkin",
-  _lwThemePrefName: "lightweightThemes.isThemeSelected",
   _devtoolsThemePrefName: "devtools.theme",
 
   styleSheetLocation: "chrome://browser/skin/devedition.css",
   styleSheet: null,
 
   init: function () {
     this._updateDevtoolsThemeAttribute();
-    this._updateStyleSheetFromPrefs();
 
+      console.log("LW THEME APPLIED", LightweightThemeManager.currentTheme);
+    // XXX: Read a pref and apply the fake LW theme only if needed
+    // Check currently used theme on browser startup.
+    if (LightweightThemeManager.currentTheme &&
+        LightweightThemeManager.currentTheme.id == "11111") {
+      this._toggleStyleSheet(true);
+    }
     // Listen for changes to all prefs except for complete themes.
     // No need for this since changing a complete theme requires a
     // restart.
-    Services.prefs.addObserver(this._lwThemePrefName, this, false);
-    Services.prefs.addObserver(this._prefName, this, false);
     Services.prefs.addObserver(this._devtoolsThemePrefName, this, false);
     Services.obs.addObserver(this, "lightweight-theme-styling-update", false);
   },
 
   observe: function (subject, topic, data) {
     if (topic == "lightweight-theme-styling-update") {
       let newTheme = JSON.parse(data);
-      if (!newTheme) {
-        // A lightweight theme has been unapplied, so just re-read prefs.
-        this._updateStyleSheetFromPrefs();
+      if (!newTheme || newTheme.id != "11111") {
+        this._toggleStyleSheet(false);
+        Services.prefs.setBoolPref(this._activatedPrefName, false);
       } else {
-        // A lightweight theme has been applied, but the pref may not be
-        // set yet if this happened from customize menu or addons page.
-        this._toggleStyleSheet(false);
+        this._toggleStyleSheet(true);
+        Services.prefs.setBoolPref(this._activatedPrefName, true);
       }
     }
 
     if (topic == "nsPref:changed") {
-      if (data == this._devtoolsThemePrefName) {
-        this._updateDevtoolsThemeAttribute();
-      } else {
-        this._updateStyleSheetFromPrefs();
-      }
+      this._updateDevtoolsThemeAttribute();
     }
   },
 
   _inferBrightness: function() {
     ToolbarIconColor.inferFromText();
     // Get an inverted full screen button if the dark theme is applied.
     if (this.styleSheet &&
         document.documentElement.getAttribute("devtoolstheme") == "dark") {
@@ -65,46 +65,30 @@ let DevEdition = {
     // Set an attribute on root element to make it possible
     // to change colors based on the selected devtools theme.
     let devtoolsTheme = Services.prefs.getCharPref(this._devtoolsThemePrefName);
     if (devtoolsTheme != "dark") {
       devtoolsTheme = "light";
     }
     document.documentElement.setAttribute("devtoolstheme", devtoolsTheme);
     this._inferBrightness();
-    this._updateStyleSheetFromPrefs();
-  },
-
-  _updateStyleSheetFromPrefs: function() {
-    let lightweightThemeSelected = false;
-    try {
-      lightweightThemeSelected = Services.prefs.getBoolPref(this._lwThemePrefName);
-    } catch(e) {}
-
-    let defaultThemeSelected = false;
-    try {
-       defaultThemeSelected = Services.prefs.getCharPref(this._themePrefName) == "classic/1.0";
-    } catch(e) {}
-
-    let deveditionThemeEnabled = Services.prefs.getBoolPref(this._prefName) &&
-      !lightweightThemeSelected && defaultThemeSelected;
-
-    this._toggleStyleSheet(deveditionThemeEnabled);
   },
 
   handleEvent: function(e) {
     if (e.type === "load") {
       this.styleSheet.removeEventListener("load", this);
       gBrowser.tabContainer._positionPinnedTabs();
       this._inferBrightness();
       Services.obs.notifyObservers(window, "devedition-theme-state-changed", true);
     }
   },
 
   _toggleStyleSheet: function(deveditionThemeEnabled) {
+    console.log("FOO", deveditionThemeEnabled);
+    console.trace();
     if (deveditionThemeEnabled && !this.styleSheet) {
       let styleSheetAttr = `href="${this.styleSheetLocation}" type="text/css"`;
       this.styleSheet = document.createProcessingInstruction(
         'xml-stylesheet', styleSheetAttr);
       this.styleSheet.addEventListener("load", this);
       document.insertBefore(this.styleSheet, document.documentElement);
       // NB: we'll notify observers once the stylesheet has fully loaded, see
       // handleEvent above.
@@ -114,18 +98,16 @@ let DevEdition = {
       this.styleSheet = null;
       gBrowser.tabContainer._positionPinnedTabs();
       this._inferBrightness();
       Services.obs.notifyObservers(window, "devedition-theme-state-changed", false);
     }
   },
 
   uninit: function () {
-    Services.prefs.removeObserver(this._lwThemePrefName, this);
-    Services.prefs.removeObserver(this._prefName, this);
     Services.prefs.removeObserver(this._devtoolsThemePrefName, this);
     Services.obs.removeObserver(this, "lightweight-theme-styling-update", false);
     if (this.styleSheet) {
       this.styleSheet.removeEventListener("load", this);
     }
     this.styleSheet = null;
   }
 };
diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -30,16 +30,18 @@ XPCOMUtils.defineLazyModuleGetter(this, 
                                   "resource://gre/modules/NewTabUtils.jsm");
 XPCOMUtils.defineLazyModuleGetter(this, "ContentSearch",
                                   "resource:///modules/ContentSearch.jsm");
 XPCOMUtils.defineLazyModuleGetter(this, "AboutHome",
                                   "resource:///modules/AboutHome.jsm");
 XPCOMUtils.defineLazyServiceGetter(this, "gDNSService",
                                    "@mozilla.org/network/dns-service;1",
                                    "nsIDNSService");
+XPCOMUtils.defineLazyModuleGetter(this, "LightweightThemeManager",
+                                   "resource://gre/modules/LightweightThemeManager.jsm");
 
 const nsIWebNavigation = Ci.nsIWebNavigation;
 
 var gLastBrowserCharset = null;
 var gProxyFavIcon = null;
 var gLastValidURLStr = "";
 var gInPrintPreviewMode = false;
 var gContextMenu = null; // nsContextMenu instance
diff --git a/toolkit/mozapps/extensions/LightweightThemeManager.jsm b/toolkit/mozapps/extensions/LightweightThemeManager.jsm
--- a/toolkit/mozapps/extensions/LightweightThemeManager.jsm
+++ b/toolkit/mozapps/extensions/LightweightThemeManager.jsm
@@ -68,22 +68,41 @@ this.__defineSetter__("_maxUsedThemes", 
 // permissions and pendingOperations
 var _themeIDBeingEnabled = null;
 var _themeIDBeingDisabled = null;
 
 this.LightweightThemeManager = {
   get name() "LightweightThemeManager",
 
   get usedThemes () {
+    let allThemes = [];
     try {
-      return JSON.parse(_prefs.getComplexValue("usedThemes",
+      allThemes = JSON.parse(_prefs.getComplexValue("usedThemes",
                                                Ci.nsISupportsString).data);
-    } catch (e) {
-      return [];
+    } catch (e) { }
+
+    // XXX: Disable lw theme if browser is closed
+    if (Services.prefs.getBoolPref("browser.devedition.theme.showCustomizeButton")) {
+      let deveditionTheme = {
+        "id":"11111",
+        "name":"DevEdition",
+        "headerURL":"https://addons.cdn.mozilla.net/user-media/addons/64049/Unbenannt.png?1264391161"
+      };
+
+      // If a different lw theme is applied, put devedition second
+      // If devedition theme is applied (or none is), put it first
+      if (Services.prefs.getBoolPref("browser.devedition.theme.activated")) {
+        allThemes.unshift(deveditionTheme);
+      } else {
+        // XXX: Put second instead?
+        allThemes.push(deveditionTheme);
+      }
     }
+
+    return allThemes;
   },
 
   get currentTheme () {
     try {
       if (_prefs.getBoolPref("isThemeSelected"))
         var data = this.usedThemes[0];
     } catch (e) {}
 
@@ -682,19 +701,30 @@ function _updateUsedThemes(aList) {
   // Send uninstall events for all themes that need to be removed.
   while (aList.length > _maxUsedThemes) {
     let wrapper = new AddonWrapper(aList[aList.length - 1]);
     AddonManagerPrivate.callAddonListeners("onUninstalling", wrapper, false);
     aList.pop();
     AddonManagerPrivate.callAddonListeners("onUninstalled", wrapper);
   }
 
+  // Don't include the Dev Edition lightweight theme.
+  // This is for compatibility with future channels that don't recognize it -
+  // they should not see the devedition theme as selected.
+  let devEditionInd = aList.findIndex(t => t.id == "11111");
+  let {console} = Components.utils.import("resource://gre/modules/devtools/Console.jsm", {});
+  console.log("Removing ?", devEditionInd);
+  if (devEditionInd != -1) {
+    aList.splice(devEditionInd, 1);
+  }
+
   var str = Cc["@mozilla.org/supports-string;1"]
               .createInstance(Ci.nsISupportsString);
   str.data = JSON.stringify(aList);
+
   _prefs.setComplexValue("usedThemes", Ci.nsISupportsString, str);
 
   Services.obs.notifyObservers(null, "lightweight-theme-list-changed", null);
 }
 
 function _notifyWindows(aThemeData) {
   Services.obs.notifyObservers(null, "lightweight-theme-styling-update",
                                JSON.stringify(aThemeData));
