# HG changeset patch
# Parent a24ed9776645e1e8c4e7f1f46d5f3e3bcf6ea633
# User Brian Grinstead <bgrinstead@mozilla.com>
asdf

diff --git a/browser/base/content/browser-devedition.js b/browser/base/content/browser-devedition.js
--- a/browser/base/content/browser-devedition.js
+++ b/browser/base/content/browser-devedition.js
@@ -14,56 +14,63 @@ let DevEdition = {
 
   styleSheetLocation: "chrome://browser/skin/devedition.css",
   styleSheet: null,
 
   init: function () {
     this._updateDevtoolsThemeAttribute();
     this._updateStyleSheetFromPrefs();
 
+    // XXX: Check currently used theme on browser startup.
+    
     // Listen for changes to all prefs except for complete themes.
     // No need for this since changing a complete theme requires a
     // restart.
     Services.prefs.addObserver(this._lwThemePrefName, this, false);
-    Services.prefs.addObserver(this._prefName, this, false);
+    // Services.prefs.addObserver(this._prefName, this, false);
     Services.prefs.addObserver(this._devtoolsThemePrefName, this, false);
     Services.obs.addObserver(this, "lightweight-theme-styling-update", false);
   },
 
   observe: function (subject, topic, data) {
     if (topic == "lightweight-theme-styling-update") {
       let newTheme = JSON.parse(data);
-      if (!newTheme) {
+      if (!newTheme || newTheme.id != "11111") {
+        this._toggleStyleSheet(false);
+      } else {
+        this._toggleStyleSheet(true);
+      }
+      // if (!newTheme) {
         // A lightweight theme has been unapplied, so just re-read prefs.
-        this._updateStyleSheetFromPrefs();
-      } else {
+        // this._updateStyleSheetFromPrefs();
+      // } else {
         // A lightweight theme has been applied, but the pref may not be
         // set yet if this happened from customize menu or addons page.
-        this._toggleStyleSheet(false);
-      }
+        // this._toggleStyleSheet(false);
+      // }
     }
 
     if (topic == "nsPref:changed") {
       if (data == this._devtoolsThemePrefName) {
         this._updateDevtoolsThemeAttribute();
       } else {
-        this._updateStyleSheetFromPrefs();
+        // this._updateStyleSheetFromPrefs();
       }
     }
   },
 
   _inferBrightness: function() {
     ToolbarIconColor.inferFromText();
     // Get an inverted full screen button if the dark theme is applied.
-    if (this.styleSheet &&
-        document.documentElement.getAttribute("devtoolstheme") == "dark") {
-      document.documentElement.setAttribute("brighttitlebarforeground", "true");
-    } else {
-      document.documentElement.removeAttribute("brighttitlebarforeground");
-    }
+    // if (this.styleSheet &&
+    //     document.documentElement.getAttribute("devtoolstheme") == "dark") {
+    //   document.documentElement.setAttribute("brighttitlebarforeground", "true");
+    // } else {
+    //   document.documentElement.removeAttribute("brighttitlebarforeground");
+    // }
   },
 
   _updateDevtoolsThemeAttribute: function() {
     // Set an attribute on root element to make it possible
     // to change colors based on the selected devtools theme.
     let devtoolsTheme = Services.prefs.getCharPref(this._devtoolsThemePrefName);
     if (devtoolsTheme != "dark") {
       devtoolsTheme = "light";
diff --git a/toolkit/mozapps/extensions/LightweightThemeManager.jsm b/toolkit/mozapps/extensions/LightweightThemeManager.jsm
--- a/toolkit/mozapps/extensions/LightweightThemeManager.jsm
+++ b/toolkit/mozapps/extensions/LightweightThemeManager.jsm
@@ -68,22 +68,45 @@ this.__defineSetter__("_maxUsedThemes", 
 // permissions and pendingOperations
 var _themeIDBeingEnabled = null;
 var _themeIDBeingDisabled = null;
 
 this.LightweightThemeManager = {
   get name() "LightweightThemeManager",
 
   get usedThemes () {
+    let allThemes = [];
     try {
-      return JSON.parse(_prefs.getComplexValue("usedThemes",
+      allThemes = JSON.parse(_prefs.getComplexValue("usedThemes",
                                                Ci.nsISupportsString).data);
-    } catch (e) {
-      return [];
+    } catch (e) { }
+
+
+let {console} = Components.utils.import("resource://gre/modules/devtools/Console.jsm", {});
+    let devEditionInd = allThemes.findIndex(t => t.id == "11111");
+    if (devEditionInd != -1) {
+      allThemes.splice(devEditionInd, 1);
     }
+    console.log("bar", devEditionInd, allThemes.length);
+    allThemes.unshift({
+      "id":"11111",
+      "name":"DevEdition",
+      "headerURL":"https://addons.cdn.mozilla.net/user-media/addons/64049/Unbenannt.png?1264391161",
+      "footerURL":"https://addons.cdn.mozilla.net/user-media/addons/64049/Unbenannt2.png?1264391161",
+      "textcolor":"#ffffff",
+      "accentcolor":"#cfcfcf",
+      "iconURL":"https://addons.cdn.mozilla.net/user-media/addons/64049/preview_small.jpg?1264391161",
+      "previewURL":"https://addons.cdn.mozilla.net/user-media/addons/64049/preview.jpg?1264391161",
+      "author":"Mozilla",
+      "description":"Dev Edition!",
+      "updateURL":"https://versioncheck.addons.mozilla.org/en-US/themes/update-check/64049",
+      "version":"1.0"
+    });
+
+   return allThemes;
   },
 
   get currentTheme () {
     try {
       if (_prefs.getBoolPref("isThemeSelected"))
         var data = this.usedThemes[0];
     } catch (e) {}
 
