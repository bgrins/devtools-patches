# HG changeset patch
# Parent 80199b6d7ee3d800c240987f9a733413946ba1ba
# User Brian Grinstead <bgrinstead@mozilla.com>
asdf

diff --git a/browser/base/content/browser-devedition.js b/browser/base/content/browser-devedition.js
--- a/browser/base/content/browser-devedition.js
+++ b/browser/base/content/browser-devedition.js
@@ -14,43 +14,55 @@ let DevEdition = {
 
   styleSheetLocation: "chrome://browser/skin/devedition.css",
   styleSheet: null,
 
   init: function () {
     this._updateDevtoolsThemeAttribute();
     this._updateStyleSheetFromPrefs();
 
+    let {console} = Cu.import("resource://gre/modules/devtools/Console.jsm", {});
+    // XXX: Read a pref and apply the fake LW theme only if needed
+    // Check currently used theme on browser startup.
+    if (LightweightThemeManager.currentTheme &&
+        LightweightThemeManager.currentTheme.id == "11111") {
+      this._toggleStyleSheet(true);
+    }
     // Listen for changes to all prefs except for complete themes.
     // No need for this since changing a complete theme requires a
     // restart.
     Services.prefs.addObserver(this._lwThemePrefName, this, false);
-    Services.prefs.addObserver(this._prefName, this, false);
+    // Services.prefs.addObserver(this._prefName, this, false);
     Services.prefs.addObserver(this._devtoolsThemePrefName, this, false);
     Services.obs.addObserver(this, "lightweight-theme-styling-update", false);
   },
 
   observe: function (subject, topic, data) {
     if (topic == "lightweight-theme-styling-update") {
       let newTheme = JSON.parse(data);
-      if (!newTheme) {
+      if (!newTheme || newTheme.id != "11111") {
+        this._toggleStyleSheet(false);
+      } else {
+        this._toggleStyleSheet(true);
+      }
+      // if (!newTheme) {
         // A lightweight theme has been unapplied, so just re-read prefs.
-        this._updateStyleSheetFromPrefs();
-      } else {
+        // this._updateStyleSheetFromPrefs();
+      // } else {
         // A lightweight theme has been applied, but the pref may not be
         // set yet if this happened from customize menu or addons page.
-        this._toggleStyleSheet(false);
-      }
+        // this._toggleStyleSheet(false);
+      // }
     }
 
     if (topic == "nsPref:changed") {
       if (data == this._devtoolsThemePrefName) {
         this._updateDevtoolsThemeAttribute();
       } else {
-        this._updateStyleSheetFromPrefs();
+        // this._updateStyleSheetFromPrefs();
       }
     }
   },
 
   _inferBrightness: function() {
     ToolbarIconColor.inferFromText();
     // Get an inverted full screen button if the dark theme is applied.
     if (this.styleSheet &&
@@ -65,17 +77,17 @@ let DevEdition = {
     // Set an attribute on root element to make it possible
     // to change colors based on the selected devtools theme.
     let devtoolsTheme = Services.prefs.getCharPref(this._devtoolsThemePrefName);
     if (devtoolsTheme != "dark") {
       devtoolsTheme = "light";
     }
     document.documentElement.setAttribute("devtoolstheme", devtoolsTheme);
     this._inferBrightness();
-    this._updateStyleSheetFromPrefs();
+    // this._updateStyleSheetFromPrefs();
   },
 
   _updateStyleSheetFromPrefs: function() {
     let lightweightThemeSelected = false;
     try {
       lightweightThemeSelected = Services.prefs.getBoolPref(this._lwThemePrefName);
     } catch(e) {}
 
diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -30,16 +30,18 @@ XPCOMUtils.defineLazyModuleGetter(this, 
                                   "resource://gre/modules/NewTabUtils.jsm");
 XPCOMUtils.defineLazyModuleGetter(this, "ContentSearch",
                                   "resource:///modules/ContentSearch.jsm");
 XPCOMUtils.defineLazyModuleGetter(this, "AboutHome",
                                   "resource:///modules/AboutHome.jsm");
 XPCOMUtils.defineLazyServiceGetter(this, "gDNSService",
                                    "@mozilla.org/network/dns-service;1",
                                    "nsIDNSService");
+XPCOMUtils.defineLazyModuleGetter(this, "LightweightThemeManager",
+                                   "resource://gre/modules/LightweightThemeManager.jsm");
 
 const nsIWebNavigation = Ci.nsIWebNavigation;
 
 var gLastBrowserCharset = null;
 var gProxyFavIcon = null;
 var gLastValidURLStr = "";
 var gInPrintPreviewMode = false;
 var gContextMenu = null; // nsContextMenu instance
diff --git a/toolkit/mozapps/extensions/LightweightThemeManager.jsm b/toolkit/mozapps/extensions/LightweightThemeManager.jsm
--- a/toolkit/mozapps/extensions/LightweightThemeManager.jsm
+++ b/toolkit/mozapps/extensions/LightweightThemeManager.jsm
@@ -68,22 +68,36 @@ this.__defineSetter__("_maxUsedThemes", 
 // permissions and pendingOperations
 var _themeIDBeingEnabled = null;
 var _themeIDBeingDisabled = null;
 
 this.LightweightThemeManager = {
   get name() "LightweightThemeManager",
 
   get usedThemes () {
+    let allThemes = [];
     try {
-      return JSON.parse(_prefs.getComplexValue("usedThemes",
+      allThemes = JSON.parse(_prefs.getComplexValue("usedThemes",
                                                Ci.nsISupportsString).data);
-    } catch (e) {
-      return [];
+    } catch (e) { }
+
+
+let {console} = Components.utils.import("resource://gre/modules/devtools/Console.jsm", {});
+    let devEditionInd = allThemes.findIndex(t => t.id == "11111");
+    if (devEditionInd != -1) {
+      allThemes.splice(devEditionInd, 1);
     }
+    console.log("bar", devEditionInd, allThemes.length);
+    allThemes.unshift({
+      "id":"11111",
+      "name":"DevEdition",
+      "headerURL":"https://addons.cdn.mozilla.net/user-media/addons/64049/Unbenannt.png?1264391161"
+    });
+
+   return allThemes;
   },
 
   get currentTheme () {
     try {
       if (_prefs.getBoolPref("isThemeSelected"))
         var data = this.usedThemes[0];
     } catch (e) {}
 
@@ -685,16 +699,18 @@ function _updateUsedThemes(aList) {
     AddonManagerPrivate.callAddonListeners("onUninstalling", wrapper, false);
     aList.pop();
     AddonManagerPrivate.callAddonListeners("onUninstalled", wrapper);
   }
 
   var str = Cc["@mozilla.org/supports-string;1"]
               .createInstance(Ci.nsISupportsString);
   str.data = JSON.stringify(aList);
+
+  // XXX: don't set the lw theme.
   _prefs.setComplexValue("usedThemes", Ci.nsISupportsString, str);
 
   Services.obs.notifyObservers(null, "lightweight-theme-list-changed", null);
 }
 
 function _notifyWindows(aThemeData) {
   Services.obs.notifyObservers(null, "lightweight-theme-styling-update",
                                JSON.stringify(aThemeData));
