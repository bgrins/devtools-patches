# HG changeset patch
# User Alexandre Poirot <poirot.alex@gmail.com>

Bug 1169096 - Filter property values remotely. r=bgrins

diff --git a/toolkit/devtools/server/actors/object.js b/toolkit/devtools/server/actors/object.js
index d4a3f61..b3e01d7 100644
--- a/toolkit/devtools/server/actors/object.js
+++ b/toolkit/devtools/server/actors/object.js
@@ -531,18 +531,20 @@ ObjectActor.prototype.requestTypes = {
  *        - ignoreNonIndexedProperties Boolean
  *          If true, filters out items that aren't array items
  *          e.g. properties names that are not a number between `0`
  *          and `object.length`.
  *        - sort Boolean
  *          If true, the iterator will sort the properties by name
  *          before dispatching them.
  *        - query String
- *          If non-empty, will filter the properties by names containing
- *          this query string. The match is not case-sensitive.
+ *          If non-empty, will filter the properties by names and values
+ *          containing this query string. The match is not case-sensitive.
+ *          Regarding value filtering it just compare to the stringification
+ *          of the property value.
  */
 function PropertyIteratorActor(objectActor, options){
   this.objectActor = objectActor;
 
   let ownProperties = Object.create(null);
   let names = [];
   try {
     names = this.objectActor.obj.getOwnPropertyNames();
@@ -591,17 +593,30 @@ function PropertyIteratorActor(objectActor, options){
       });
     }
   }
 
   if (options.query) {
     let { query } = options;
     query = query.toLowerCase();
     names = names.filter(name => {
-      return name.toLowerCase().includes(query);
+      // Filter on attribute names
+      if (name.toLowerCase().includes(query)) {
+        return true;
+      }
+      // and then on attribute values
+      let desc;
+      try {
+        desc = this.obj.getOwnPropertyDescriptor(name);
+      } catch(e) {}
+      if (desc && desc.value &&
+          String(desc.value).includes(query)) {
+        return true;
+      }
+      return false;
     });
   }
 
   if (options.sort) {
     names.sort();
   }
 
   // Now build the descriptor list
