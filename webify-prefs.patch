From 4efb94c942dca3e5e8a204899f0694413bf4bc00 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Tue, 20 Jun 2017 08:22:02 -0700
Subject: [PATCH 001/106] add Preferences/Preference constructor/prototype
 pairs based on XBL equivalents

---
 .../preferences/in-content-new/preferences.js      | 451 +++++++++++++++++++++
 1 file changed, 451 insertions(+)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index f75b41fe9cab..a962b467f0bf 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -343,3 +343,454 @@ function confirmRestartPrompt(aRestartToEnable, aDefaultButtonIndex,
   }
   return buttonIndex;
 }
+
+function Preferences() {}
+
+Preferences.prototype = {
+  // XXX Implement nsIObserver
+
+  _constructAfterChildren() {
+    // This method will be called after each one of the child
+    // <preference> elements is constructed. Its purpose is to propagate
+    // the values to the associated form elements
+
+    var elements = this.getElementsByTagName("preference");
+    for (let element of elements) {
+      if (!element._constructed) {
+        return;
+      }
+    }
+    for (let element of elements) {
+      element.updateElements();
+    }
+  },
+
+  fireChangedEvent(aPreference) {
+    // Value changed, synthesize an event
+    try {
+      var event = document.createEvent("Events");
+      event.initEvent("change", true, true);
+      aPreference.dispatchEvent(event);
+    } catch (e) {
+      Components.utils.reportError(e);
+    }
+  },
+
+  service: Components.classes["@mozilla.org/preferences-service;1"]
+                     .getService(Components.interfaces.nsIPrefService),
+
+  rootBranch: Components.classes["@mozilla.org/preferences-service;1"]
+              .getService(Components.interfaces.nsIPrefBranch),
+
+  get defaultBranch() {
+    return this.service.getDefaultBranch("");
+  },
+
+  rootBranchInternal: Components.classes["@mozilla.org/preferences-service;1"]
+                      .getService(Components.interfaces.nsIPrefBranchInternal),
+
+  get type() {
+    return document.documentElement.type || "";
+  },
+
+  get instantApply() {
+    var doc = document.documentElement;
+    return this.type == "child" ? doc.instantApply
+                                : doc.instantApply || this.rootBranch.getBoolPref("browser.preferences.instantApply");
+  },
+};
+
+function Preference({ instantApply, preferences, name, type, inverted, readonly, disabled, id }) {
+  this._constructed = true;
+  this._instantApply = instantApply;
+  this._preferences = preferences;
+  this._name = name;
+  this._type = type;
+  this._inverted = inverted;
+  this._readonly = readonly;
+  this._disabled = disabled;
+  this.id = id;
+
+  // if the element has been inserted without the name attribute set,
+  // we have nothing to do here
+  if (!this.name)
+    return;
+
+  this.preferences.rootBranchInternal
+      .addObserver(this.name, this.preferences);
+  // In non-instant apply mode, we must try and use the last saved state
+  // from any previous opens of a child dialog instead of the value from
+  // preferences, to pick up any edits a user may have made.
+
+  var secMan = Components.classes["@mozilla.org/scriptsecuritymanager;1"]
+              .getService(Components.interfaces.nsIScriptSecurityManager);
+  if (this.preferences.type == "child" &&
+      !this.instantApply && window.opener &&
+      secMan.isSystemPrincipal(window.opener.document.nodePrincipal)) {
+    var pdoc = window.opener.document;
+
+    // Try to find a preference element for the same preference.
+    var preference = null;
+    var parentPreferences = pdoc.getElementsByTagName("preferences");
+    for (var k = 0; (k < parentPreferences.length && !preference); ++k) {
+      var parentPrefs = parentPreferences[k]
+                              .getElementsByAttribute("name", this.name);
+      for (var l = 0; (l < parentPrefs.length && !preference); ++l) {
+        if (parentPrefs[l].localName == "preference")
+          preference = parentPrefs[l];
+      }
+    }
+
+    // Don't use the value setter here, we don't want updateElements to be prematurely fired.
+    this._value = preference ? preference.value : this.valueFromPreferences;
+  } else
+    this._value = this.valueFromPreferences;
+  this.preferences._constructAfterChildren();
+}
+
+Preference.destructor = function () {
+  this.preferences.rootBranchInternal
+      .removeObserver(this.name, this.preferences);
+};
+
+Preference.prototype = {
+  _constructed: false,
+  _instantApply: false,
+  _preferences: null,
+  _type: null,
+  _inverted: false,
+  _readonly: false,
+  _value: null,
+  _disabled: false,
+  id: "",
+
+  get instantApply() {
+    if (this._instantApply == "false")
+      return false;
+    return this._instantApply == "true" || this.preferences.instantApply;
+  },
+
+  get preferences() {
+    return this._preferences;
+  },
+
+  get name() {
+    return this._name;
+  },
+
+  set name(val) {
+    if (val == this.name)
+      return val;
+
+    this.preferences.rootBranchInternal
+        .removeObserver(this.name, this.preferences);
+    this._name = val;
+    this.preferences.rootBranchInternal
+        .addObserver(val, this.preferences);
+
+    return val;
+  },
+
+  get type() {
+    return this._type;
+  },
+  set type(val) {
+    return this._type = val;
+  },
+
+  get inverted() {
+    return this._inverted;
+  },
+  set inverted(val) {
+    return this._inverted = val;
+  },
+
+  get readonly() {
+    return this._readonly;
+  },
+  set readonly(val) {
+    return this._readonly = val;
+  },
+
+  get value() {
+    return this._value;
+  },
+  set value(val) {
+    return this._setValue(val);
+  },
+
+  _setValue(aValue) {
+    if (this.value !== aValue) {
+      this._value = aValue;
+      if (this.instantApply)
+        this.valueFromPreferences = aValue;
+      this.preferences.fireChangedEvent(this);
+    }
+    return aValue;
+  },
+
+  get locked() {
+    return this.preferences.rootBranch.prefIsLocked(this.name);
+  },
+
+  get disabled() {
+    return this._disabled;
+  },
+  set disabled(val) {
+    this._disabled = !!val;
+
+    if (!this.id)
+      return val;
+
+    var elements = document.getElementsByAttribute("preference", this.id);
+    for (var i = 0; i < elements.length; ++i) {
+      elements[i].disabled = val;
+
+      var labels = document.getElementsByAttribute("control", elements[i].id);
+      for (var j = 0; j < labels.length; ++j)
+        labels[j].disabled = val;
+    }
+
+    return val;
+  },
+
+  reset() {
+    // defer reset until preference update
+    this.value = undefined;
+  },
+
+  _useDefault: false,
+  get defaultValue() {
+    this._useDefault = true;
+    var val = this.valueFromPreferences;
+    this._useDefault = false;
+    return val;
+  },
+
+  get _branch() {
+    return this._useDefault ? this.preferences.defaultBranch : this.preferences.rootBranch;
+  },
+
+  batching: false,
+
+  _reportUnknownType() {
+    var consoleService = Components.classes["@mozilla.org/consoleservice;1"]
+                                   .getService(Components.interfaces.nsIConsoleService);
+    var msg = "<preference> with id='" + this.id + "' and name='" +
+              this.name + "' has unknown type '" + this.type + "'.";
+    consoleService.logStringMessage(msg);
+  },
+
+  get valueFromPreferences() {
+    try {
+      // Force a resync of value with preferences.
+      switch (this.type) {
+      case "int":
+        return this._branch.getIntPref(this.name);
+      case "bool":
+        var val = this._branch.getBoolPref(this.name);
+        return this.inverted ? !val : val;
+      case "wstring":
+        return this._branch
+                   .getComplexValue(this.name, Components.interfaces.nsIPrefLocalizedString)
+                   .data;
+      case "string":
+      case "unichar":
+        return this._branch.getStringPref(this.name);
+      case "fontname":
+        var family = this._branch.getStringPref(this.name);
+        var fontEnumerator = Components.classes["@mozilla.org/gfx/fontenumerator;1"]
+                                       .createInstance(Components.interfaces.nsIFontEnumerator);
+        return fontEnumerator.getStandardFamilyName(family);
+      case "file":
+        var f = this._branch
+                    .getComplexValue(this.name, Components.interfaces.nsILocalFile);
+        return f;
+      default:
+        this._reportUnknownType();
+      }
+    } catch (e) { }
+    return null;
+  },
+
+  set valueFromPreferences(val) {
+    // Exit early if nothing to do.
+    if (this.readonly || this.valueFromPreferences == val)
+      return val;
+
+    // The special value undefined means 'reset preference to default'.
+    if (val === undefined) {
+      this.preferences.rootBranch.clearUserPref(this.name);
+      return val;
+    }
+
+    // Force a resync of preferences with value.
+    switch (this.type) {
+    case "int":
+      this.preferences.rootBranch.setIntPref(this.name, val);
+      break;
+    case "bool":
+      this.preferences.rootBranch.setBoolPref(this.name, this.inverted ? !val : val);
+      break;
+    case "wstring":
+      var pls = Components.classes["@mozilla.org/pref-localizedstring;1"]
+                          .createInstance(Components.interfaces.nsIPrefLocalizedString);
+      pls.data = val;
+      this.preferences.rootBranch
+          .setComplexValue(this.name, Components.interfaces.nsIPrefLocalizedString, pls);
+      break;
+    case "string":
+    case "unichar":
+    case "fontname":
+      this.preferences.rootBranch.setStringPref(this.name, val);
+      break;
+    case "file":
+      var lf;
+      if (typeof(val) == "string") {
+        lf = Components.classes["@mozilla.org/file/local;1"]
+                       .createInstance(Components.interfaces.nsILocalFile);
+        lf.persistentDescriptor = val;
+        if (!lf.exists())
+          lf.initWithPath(val);
+      } else
+        lf = val.QueryInterface(Components.interfaces.nsILocalFile);
+      this.preferences.rootBranch
+          .setComplexValue(this.name, Components.interfaces.nsILocalFile, lf);
+      break;
+    default:
+      this._reportUnknownType();
+    }
+    if (!this.batching)
+      this.preferences.service.savePrefFile(null);
+    return val;
+  },
+
+  setElementValue(aElement) {
+    if (this.locked)
+      aElement.disabled = true;
+
+    if (!this.isElementEditable(aElement))
+      return;
+
+    var rv = undefined;
+    if (aElement.hasAttribute("onsyncfrompreference")) {
+      // Value changed, synthesize an event
+      try {
+        var event = document.createEvent("Events");
+        event.initEvent("syncfrompreference", true, true);
+        var f = new Function("event",
+                             aElement.getAttribute("onsyncfrompreference"));
+        rv = f.call(aElement, event);
+      } catch (e) {
+        Components.utils.reportError(e);
+      }
+    }
+    var val = rv;
+    if (val === undefined)
+      val = this.instantApply ? this.valueFromPreferences : this.value;
+    // if the preference is marked for reset, show default value in UI
+    if (val === undefined)
+      val = this.defaultValue;
+
+    /**
+     * Initialize a UI element property with a value. Handles the case
+     * where an element has not yet had a XBL binding attached for it and
+     * the property setter does not yet exist by setting the same attribute
+     * on the XUL element using DOM apis and assuming the element's
+     * constructor or property getters appropriately handle this state.
+     */
+    function setValue(element, attribute, value) {
+      if (attribute in element)
+        element[attribute] = value;
+      else
+        element.setAttribute(attribute, value);
+    }
+    if (aElement.localName == "checkbox" ||
+        aElement.localName == "listitem")
+      setValue(aElement, "checked", val);
+    else if (aElement.localName == "colorpicker")
+      setValue(aElement, "color", val);
+    else if (aElement.localName == "textbox") {
+      // XXXmano Bug 303998: Avoid a caret placement issue if either the
+      // preference observer or its setter calls updateElements as a result
+      // of the input event handler.
+      if (aElement.value !== val)
+        setValue(aElement, "value", val);
+    } else
+      setValue(aElement, "value", val);
+  },
+
+  getElementValue(aElement) {
+    if (aElement.hasAttribute("onsynctopreference")) {
+      // Value changed, synthesize an event
+      try {
+        var event = document.createEvent("Events");
+        event.initEvent("synctopreference", true, true);
+        var f = new Function("event",
+                             aElement.getAttribute("onsynctopreference"));
+        var rv = f.call(aElement, event);
+        if (rv !== undefined)
+          return rv;
+      } catch (e) {
+        Components.utils.reportError(e);
+      }
+    }
+
+    /**
+     * Read the value of an attribute from an element, assuming the
+     * attribute is a property on the element's node API. If the property
+     * is not present in the API, then assume its value is contained in
+     * an attribute, as is the case before a binding has been attached.
+     */
+    function getValue(element, attribute) {
+      if (attribute in element)
+        return element[attribute];
+      return element.getAttribute(attribute);
+    }
+    if (aElement.localName == "checkbox" ||
+        aElement.localName == "listitem")
+      var value = getValue(aElement, "checked");
+    else if (aElement.localName == "colorpicker")
+      value = getValue(aElement, "color");
+    else
+      value = getValue(aElement, "value");
+
+    switch (this.type) {
+    case "int":
+      return parseInt(value, 10) || 0;
+    case "bool":
+      return typeof(value) == "boolean" ? value : value == "true";
+    }
+    return value;
+  },
+
+  isElementEditable(aElement) {
+    switch (aElement.localName) {
+    case "checkbox":
+    case "colorpicker":
+    case "radiogroup":
+    case "textbox":
+    case "listitem":
+    case "listbox":
+    case "menulist":
+      return true;
+    }
+    return aElement.getAttribute("preference-editable") == "true";
+  },
+
+  updateElements() {
+    if (!this.id)
+      return;
+
+    // This "change" event handler tracks changes made to preferences by
+    // sources other than the user in this window.
+    var elements = document.getElementsByAttribute("preference", this.id);
+    for (var i = 0; i < elements.length; ++i)
+      this.setElementValue(elements[i]);
+  },
+
+  // XXX Hook this up to "change" event dispatch.
+  onchange() {
+    this.updateElements();
+  },
+};

From 0ba12418de8232b1ff92310430a728adb53d9df6 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Tue, 20 Jun 2017 17:00:21 -0700
Subject: [PATCH 002/106] make Preferences/Preference objects inherit
 EventEmitter

---
 .../preferences/in-content-new/preferences.js      | 471 +++++++++++----------
 1 file changed, 242 insertions(+), 229 deletions(-)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index a962b467f0bf..f27f3c346822 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -23,6 +23,7 @@ var Cr = Components.results;
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource://gre/modules/AppConstants.jsm");
+Cu.import("resource://gre/modules/EventEmitter.jsm");
 
 var gLastHash = "";
 
@@ -344,36 +345,40 @@ function confirmRestartPrompt(aRestartToEnable, aDefaultButtonIndex,
   return buttonIndex;
 }
 
-function Preferences() {}
+function Preferences({ id, hidden, dataCategory, preferences }) {
+  EventEmitter.call(this);
+
+  this.id = id;
+  this.hidden = hidden;
+  this.dataCategory = dataCategory;
+  this.preferences = preferences.map(v => new Preference(v));
+
+  this._constructAfterChildren();
+}
+
+Preferences.prototype = Object.create(EventEmitter.prototype);
+
+Object.assign(Preferences.prototype, {
+  constructor: Preferences,
+  id: "",
+  hidden: false,
+  dataCategory: "",
+  preferences: [],
 
-Preferences.prototype = {
   // XXX Implement nsIObserver
 
+  // XXX Make the constructor do this itself, since it knows when it has
+  // constructed all the children.
   _constructAfterChildren() {
-    // This method will be called after each one of the child
-    // <preference> elements is constructed. Its purpose is to propagate
-    // the values to the associated form elements
-
-    var elements = this.getElementsByTagName("preference");
-    for (let element of elements) {
-      if (!element._constructed) {
-        return;
-      }
-    }
-    for (let element of elements) {
-      element.updateElements();
+    for (let preference of this.preferences) {
+      preference.updateElements();
     }
   },
 
+  // XXX Make the Preference object emit the event itself.
   fireChangedEvent(aPreference) {
     // Value changed, synthesize an event
-    try {
-      var event = document.createEvent("Events");
-      event.initEvent("change", true, true);
-      aPreference.dispatchEvent(event);
-    } catch (e) {
-      Components.utils.reportError(e);
-    }
+    aPreference.emit("change");
   },
 
   service: Components.classes["@mozilla.org/preferences-service;1"]
@@ -382,32 +387,42 @@ Preferences.prototype = {
   rootBranch: Components.classes["@mozilla.org/preferences-service;1"]
               .getService(Components.interfaces.nsIPrefBranch),
 
-  get defaultBranch() {
-    return this.service.getDefaultBranch("");
-  },
-
   rootBranchInternal: Components.classes["@mozilla.org/preferences-service;1"]
                       .getService(Components.interfaces.nsIPrefBranchInternal),
+});
 
-  get type() {
-    return document.documentElement.type || "";
+// Assign getters via Object.defineProperties, since Object.assign invokes them
+// and assigns their return values rather than assigning the getters themselves.
+Object.defineProperties(Preferences.prototype, {
+  defaultBranch: {
+    get: function () {
+      return this.service.getDefaultBranch("");
+    },
   },
 
-  get instantApply() {
-    var doc = document.documentElement;
-    return this.type == "child" ? doc.instantApply
-                                : doc.instantApply || this.rootBranch.getBoolPref("browser.preferences.instantApply");
+  type: {
+    get: function () {
+      return document.documentElement.type || "";
+    },
   },
-};
 
-function Preference({ instantApply, preferences, name, type, inverted, readonly, disabled, id }) {
-  this._constructed = true;
-  this._instantApply = instantApply;
+  instantApply: {
+    get: function () {
+      var doc = document.documentElement;
+      return this.type == "child" ? doc.instantApply
+                                  : doc.instantApply || this.rootBranch.getBoolPref("browser.preferences.instantApply");
+    },
+  },
+});
+
+function Preference({ preferences, name, type, inverted, readonly, disabled, id }) {
+  EventEmitter.call(this);
+
   this._preferences = preferences;
   this._name = name;
-  this._type = type;
-  this._inverted = inverted;
-  this._readonly = readonly;
+  this.type = type;
+  this.inverted = inverted;
+  this.readonly = readonly;
   this._disabled = disabled;
   this.id = id;
 
@@ -453,124 +468,22 @@ Preference.destructor = function () {
       .removeObserver(this.name, this.preferences);
 };
 
-Preference.prototype = {
-  _constructed: false,
-  _instantApply: false,
+Preference.prototype = Object.create(EventEmitter.prototype);
+
+Object.assign(Preference.prototype, {
   _preferences: null,
-  _type: null,
-  _inverted: false,
-  _readonly: false,
   _value: null,
   _disabled: false,
   id: "",
 
-  get instantApply() {
-    if (this._instantApply == "false")
-      return false;
-    return this._instantApply == "true" || this.preferences.instantApply;
-  },
-
-  get preferences() {
-    return this._preferences;
-  },
-
-  get name() {
-    return this._name;
-  },
-
-  set name(val) {
-    if (val == this.name)
-      return val;
-
-    this.preferences.rootBranchInternal
-        .removeObserver(this.name, this.preferences);
-    this._name = val;
-    this.preferences.rootBranchInternal
-        .addObserver(val, this.preferences);
-
-    return val;
-  },
-
-  get type() {
-    return this._type;
-  },
-  set type(val) {
-    return this._type = val;
-  },
-
-  get inverted() {
-    return this._inverted;
-  },
-  set inverted(val) {
-    return this._inverted = val;
-  },
-
-  get readonly() {
-    return this._readonly;
-  },
-  set readonly(val) {
-    return this._readonly = val;
-  },
-
-  get value() {
-    return this._value;
-  },
-  set value(val) {
-    return this._setValue(val);
-  },
-
-  _setValue(aValue) {
-    if (this.value !== aValue) {
-      this._value = aValue;
-      if (this.instantApply)
-        this.valueFromPreferences = aValue;
-      this.preferences.fireChangedEvent(this);
-    }
-    return aValue;
-  },
-
-  get locked() {
-    return this.preferences.rootBranch.prefIsLocked(this.name);
-  },
-
-  get disabled() {
-    return this._disabled;
-  },
-  set disabled(val) {
-    this._disabled = !!val;
-
-    if (!this.id)
-      return val;
-
-    var elements = document.getElementsByAttribute("preference", this.id);
-    for (var i = 0; i < elements.length; ++i) {
-      elements[i].disabled = val;
-
-      var labels = document.getElementsByAttribute("control", elements[i].id);
-      for (var j = 0; j < labels.length; ++j)
-        labels[j].disabled = val;
-    }
-
-    return val;
-  },
-
   reset() {
     // defer reset until preference update
     this.value = undefined;
   },
 
   _useDefault: false,
-  get defaultValue() {
-    this._useDefault = true;
-    var val = this.valueFromPreferences;
-    this._useDefault = false;
-    return val;
-  },
-
-  get _branch() {
-    return this._useDefault ? this.preferences.defaultBranch : this.preferences.rootBranch;
-  },
 
+  // XXX Remove this, since it never gets changed.
   batching: false,
 
   _reportUnknownType() {
@@ -581,90 +494,6 @@ Preference.prototype = {
     consoleService.logStringMessage(msg);
   },
 
-  get valueFromPreferences() {
-    try {
-      // Force a resync of value with preferences.
-      switch (this.type) {
-      case "int":
-        return this._branch.getIntPref(this.name);
-      case "bool":
-        var val = this._branch.getBoolPref(this.name);
-        return this.inverted ? !val : val;
-      case "wstring":
-        return this._branch
-                   .getComplexValue(this.name, Components.interfaces.nsIPrefLocalizedString)
-                   .data;
-      case "string":
-      case "unichar":
-        return this._branch.getStringPref(this.name);
-      case "fontname":
-        var family = this._branch.getStringPref(this.name);
-        var fontEnumerator = Components.classes["@mozilla.org/gfx/fontenumerator;1"]
-                                       .createInstance(Components.interfaces.nsIFontEnumerator);
-        return fontEnumerator.getStandardFamilyName(family);
-      case "file":
-        var f = this._branch
-                    .getComplexValue(this.name, Components.interfaces.nsILocalFile);
-        return f;
-      default:
-        this._reportUnknownType();
-      }
-    } catch (e) { }
-    return null;
-  },
-
-  set valueFromPreferences(val) {
-    // Exit early if nothing to do.
-    if (this.readonly || this.valueFromPreferences == val)
-      return val;
-
-    // The special value undefined means 'reset preference to default'.
-    if (val === undefined) {
-      this.preferences.rootBranch.clearUserPref(this.name);
-      return val;
-    }
-
-    // Force a resync of preferences with value.
-    switch (this.type) {
-    case "int":
-      this.preferences.rootBranch.setIntPref(this.name, val);
-      break;
-    case "bool":
-      this.preferences.rootBranch.setBoolPref(this.name, this.inverted ? !val : val);
-      break;
-    case "wstring":
-      var pls = Components.classes["@mozilla.org/pref-localizedstring;1"]
-                          .createInstance(Components.interfaces.nsIPrefLocalizedString);
-      pls.data = val;
-      this.preferences.rootBranch
-          .setComplexValue(this.name, Components.interfaces.nsIPrefLocalizedString, pls);
-      break;
-    case "string":
-    case "unichar":
-    case "fontname":
-      this.preferences.rootBranch.setStringPref(this.name, val);
-      break;
-    case "file":
-      var lf;
-      if (typeof(val) == "string") {
-        lf = Components.classes["@mozilla.org/file/local;1"]
-                       .createInstance(Components.interfaces.nsILocalFile);
-        lf.persistentDescriptor = val;
-        if (!lf.exists())
-          lf.initWithPath(val);
-      } else
-        lf = val.QueryInterface(Components.interfaces.nsILocalFile);
-      this.preferences.rootBranch
-          .setComplexValue(this.name, Components.interfaces.nsILocalFile, lf);
-      break;
-    default:
-      this._reportUnknownType();
-    }
-    if (!this.batching)
-      this.preferences.service.savePrefFile(null);
-    return val;
-  },
-
   setElementValue(aElement) {
     if (this.locked)
       aElement.disabled = true;
@@ -793,4 +622,188 @@ Preference.prototype = {
   onchange() {
     this.updateElements();
   },
-};
+});
+
+// Assign getters via Object.defineProperties, since Object.assign invokes them
+// and assigns their return values rather than assigning the getters themselves.
+Object.defineProperties(Preference.prototype, {
+  // XXX None of the preferences in the in-content-new prefs page
+  // set instantApply on individual preferences, so we don't need to expose
+  // a per-preference value for it.  Replace all references to the parent
+  // preferences.instantApply instead and remove this getter.
+  instantApply: {
+    get: function () {
+      return this.preferences.instantApply;
+    },
+  },
+
+  preferences: {
+    get: function () {
+      return this._preferences;
+    },
+  },
+
+  name: {
+    get: function () {
+      return this._name;
+    },
+    set: function (val) {
+      if (val == this.name)
+        return val;
+
+      this.preferences.rootBranchInternal
+          .removeObserver(this.name, this.preferences);
+      this._name = val;
+      this.preferences.rootBranchInternal
+          .addObserver(val, this.preferences);
+
+      return val;
+    },
+  },
+
+  value: {
+    get: function () {
+      return this._value;
+    },
+    set: function (val) {
+      if (this.value !== val) {
+        this._value = val;
+        if (this.instantApply)
+          this.valueFromPreferences = val;
+        this.preferences.fireChangedEvent(this);
+      }
+      return val;
+    },
+  },
+
+  locked: {
+    get: function () {
+      return this.preferences.rootBranch.prefIsLocked(this.name);
+    },
+  },
+
+  disabled: {
+    get: function () {
+      return this._disabled;
+    },
+    set: function (val) {
+      this._disabled = !!val;
+
+      if (!this.id)
+        return val;
+
+      var elements = document.getElementsByAttribute("preference", this.id);
+      for (var i = 0; i < elements.length; ++i) {
+        elements[i].disabled = val;
+
+        var labels = document.getElementsByAttribute("control", elements[i].id);
+        for (var j = 0; j < labels.length; ++j)
+          labels[j].disabled = val;
+      }
+
+      return val;
+    },
+  },
+
+  defaultValue: {
+    get: function () {
+      this._useDefault = true;
+      var val = this.valueFromPreferences;
+      this._useDefault = false;
+      return val;
+    },
+  },
+
+  _branch: {
+    get: function () {
+      return this._useDefault ? this.preferences.defaultBranch : this.preferences.rootBranch;
+    },
+  },
+
+  valueFromPreferences: {
+    get: function () {
+      try {
+        // Force a resync of value with preferences.
+        switch (this.type) {
+        case "int":
+          return this._branch.getIntPref(this.name);
+        case "bool":
+          var val = this._branch.getBoolPref(this.name);
+          return this.inverted ? !val : val;
+        case "wstring":
+          return this._branch
+                     .getComplexValue(this.name, Components.interfaces.nsIPrefLocalizedString)
+                     .data;
+        case "string":
+        case "unichar":
+          return this._branch.getStringPref(this.name);
+        case "fontname":
+          var family = this._branch.getStringPref(this.name);
+          var fontEnumerator = Components.classes["@mozilla.org/gfx/fontenumerator;1"]
+                                         .createInstance(Components.interfaces.nsIFontEnumerator);
+          return fontEnumerator.getStandardFamilyName(family);
+        case "file":
+          var f = this._branch
+                      .getComplexValue(this.name, Components.interfaces.nsILocalFile);
+          return f;
+        default:
+          this._reportUnknownType();
+        }
+      } catch (e) { }
+      return null;
+    },
+
+    set: function (val) {
+      // Exit early if nothing to do.
+      if (this.readonly || this.valueFromPreferences == val)
+        return val;
+
+      // The special value undefined means 'reset preference to default'.
+      if (val === undefined) {
+        this.preferences.rootBranch.clearUserPref(this.name);
+        return val;
+      }
+
+      // Force a resync of preferences with value.
+      switch (this.type) {
+      case "int":
+        this.preferences.rootBranch.setIntPref(this.name, val);
+        break;
+      case "bool":
+        this.preferences.rootBranch.setBoolPref(this.name, this.inverted ? !val : val);
+        break;
+      case "wstring":
+        var pls = Components.classes["@mozilla.org/pref-localizedstring;1"]
+                            .createInstance(Components.interfaces.nsIPrefLocalizedString);
+        pls.data = val;
+        this.preferences.rootBranch
+            .setComplexValue(this.name, Components.interfaces.nsIPrefLocalizedString, pls);
+        break;
+      case "string":
+      case "unichar":
+      case "fontname":
+        this.preferences.rootBranch.setStringPref(this.name, val);
+        break;
+      case "file":
+        var lf;
+        if (typeof(val) == "string") {
+          lf = Components.classes["@mozilla.org/file/local;1"]
+                         .createInstance(Components.interfaces.nsILocalFile);
+          lf.persistentDescriptor = val;
+          if (!lf.exists())
+            lf.initWithPath(val);
+        } else
+          lf = val.QueryInterface(Components.interfaces.nsILocalFile);
+        this.preferences.rootBranch
+            .setComplexValue(this.name, Components.interfaces.nsILocalFile, lf);
+        break;
+      default:
+        this._reportUnknownType();
+      }
+      if (!this.batching)
+        this.preferences.service.savePrefFile(null);
+      return val;
+    },
+  },
+
+});

From adb293072e6eb3ac8ae5146113854cc664d6b9a8 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Tue, 20 Jun 2017 17:00:54 -0700
Subject: [PATCH 003/106] move <preferences>/<preference> elements to
 Preferences/Preference objects in main.xul

---
 .../components/preferences/in-content-new/jar.mn   |   2 +-
 .../components/preferences/in-content-new/main.js  | 108 ++++++++++++
 .../components/preferences/in-content-new/main.xul | 187 ---------------------
 3 files changed, 109 insertions(+), 188 deletions(-)

diff --git a/browser/components/preferences/in-content-new/jar.mn b/browser/components/preferences/in-content-new/jar.mn
index 2f404e404ded..26ad82d298e5 100644
--- a/browser/components/preferences/in-content-new/jar.mn
+++ b/browser/components/preferences/in-content-new/jar.mn
@@ -7,7 +7,7 @@ browser.jar:
 *  content/browser/preferences/in-content-new/preferences.xul
    content/browser/preferences/in-content-new/subdialogs.js
 
-   content/browser/preferences/in-content-new/main.js
+*  content/browser/preferences/in-content-new/main.js
    content/browser/preferences/in-content-new/privacy.js
    content/browser/preferences/in-content-new/containers.js
    content/browser/preferences/in-content-new/advanced.js
diff --git a/browser/components/preferences/in-content-new/main.js b/browser/components/preferences/in-content-new/main.js
index 125c1e59943d..5d93edafb5e8 100644
--- a/browser/components/preferences/in-content-new/main.js
+++ b/browser/components/preferences/in-content-new/main.js
@@ -26,6 +26,114 @@ if (AppConstants.MOZ_DEV_EDITION) {
                                     "resource://gre/modules/FxAccounts.jsm");
 }
 
+const mainPreferences = new Preferences({
+  id: "mainPreferences",
+  hidden: true,
+  dataCategory: "paneGeneral",
+  preferences: [
+#ifdef E10S_TESTING_ONLY
+    { id: "browser.tabs.remote.autostart", name: "browser.tabs.remote.autostart", type: "bool" },
+    { id: "e10sTempPref", name: "browser.tabs.remote.autostart.2", type: "bool" },
+    { id: "e10sForceEnable", name: "browser.tabs.remote.force-enable", type: "bool" },
+#endif
+
+    /* Startup */
+    { id: "browser.startup.page", name: "browser.startup.page", type: "int" },
+    { id: "browser.startup.homepage", name: "browser.startup.homepage", type: "wstring" },
+
+#ifdef HAVE_SHELL_SERVICE
+    { id: "browser.shell.checkDefaultBrowser", name: "browser.shell.checkDefaultBrowser", type: "bool" },
+    { id: "pref.general.disable_button.default_browser", name: "pref.general.disable_button.default_browser", type: "bool" },
+#endif
+
+    { id: "pref.browser.homepage.disable_button.current_page", name: "pref.browser.homepage.disable_button.current_page", type: "bool" },
+    { id: "pref.browser.homepage.disable_button.bookmark_page", name: "pref.browser.homepage.disable_button.bookmark_page", type: "bool" },
+    { id: "pref.browser.homepage.disable_button.restore_default", name: "pref.browser.homepage.disable_button.restore_default", type: "bool" },
+    { id: "browser.privatebrowsing.autostart", name: "browser.privatebrowsing.autostart", type: "bool" },
+
+    /* Search Engine */
+    { id: "browser.search.suggest.enabled", name: "browser.search.suggest.enabled", type: "bool" },
+    { id: "browser.urlbar.suggest.searches", name: "browser.urlbar.suggest.searches", type: "bool" },
+    { id: "browser.search.hiddenOneOffs", name: "browser.search.hiddenOneOffs", type: "unichar" },
+
+    /* Downloads */
+    { id: "browser.download.useDownloadDir", name: "browser.download.useDownloadDir", type: "bool" },
+    { id: "browser.download.folderList", name: "browser.download.folderList", type: "int" },
+    { id: "browser.download.dir", name: "browser.download.dir", type: "file" },
+
+    /* Tab preferences
+    Preferences:
+
+    browser.link.open_newwindow
+        1 opens such links in the most recent window or tab,
+        2 opens such links in a new window,
+        3 opens such links in a new tab
+    browser.tabs.loadInBackground
+    - true if display should switch to a new tab which has been opened from a
+      link, false if display shouldn't switch
+    browser.tabs.warnOnClose
+    - true if when closing a window with multiple tabs the user is warned and
+      allowed to cancel the action, false to just close the window
+    browser.tabs.warnOnOpen
+    - true if the user should be warned if he attempts to open a lot of tabs at
+      once (e.g. a large folder of bookmarks), false otherwise
+    browser.taskbar.previews.enable
+    - true if tabs are to be shown in the Windows 7 taskbar
+    */
+
+    { id: "browser.link.open_newwindow", name: "browser.link.open_newwindow", type: "int" },
+    { id: "browser.tabs.loadInBackground", name: "browser.tabs.loadInBackground", type: "bool", inverted: true },
+    { id: "browser.tabs.warnOnClose", name: "browser.tabs.warnOnClose", type: "bool" },
+    { id: "browser.tabs.warnOnOpen", name: "browser.tabs.warnOnOpen", type: "bool" },
+    { id: "browser.sessionstore.restore_on_demand", name: "browser.sessionstore.restore_on_demand", type: "bool" },
+#ifdef XP_WIN
+    { id: "browser.taskbar.previews.enable", name: "browser.taskbar.previews.enable", type: "bool" },
+#endif
+    { id: "browser.ctrlTab.previews", name: "browser.ctrlTab.previews", type: "bool" },
+
+    /* Fonts */
+    { id: "font.language.group", name: "font.language.group", type: "wstring" },
+
+    /* Languages */
+    { id: "browser.translation.detectLanguage", name: "browser.translation.detectLanguage", type: "bool" },
+
+    /* General tab */
+
+    /* Accessibility
+     * accessibility.browsewithcaret
+       - true enables keyboard navigation and selection within web pages using a
+         visible caret, false uses normal keyboard navigation with no caret
+     * accessibility.typeaheadfind
+       - when set to true, typing outside text areas and input boxes will
+         automatically start searching for what's typed within the current
+         document; when set to false, no search action happens */
+    { id: "accessibility.browsewithcaret", name: "accessibility.browsewithcaret", type: "bool" },
+    { id: "accessibility.typeaheadfind", name: "accessibility.typeaheadfind", type: "bool" },
+    { id: "accessibility.blockautorefresh", name: "accessibility.blockautorefresh", type: "bool" },
+#ifdef XP_WIN
+    { id: "ui.osk.enabled", name: "ui.osk.enabled", type: "bool" },
+#endif
+
+    /* Browsing
+     * general.autoScroll
+       - when set to true, clicking the scroll wheel on the mouse activates a
+         mouse mode where moving the mouse down scrolls the document downward with
+         speed correlated with the distance of the cursor from the original
+         position at which the click occurred (and likewise with movement upward);
+         if false, this behavior is disabled
+     * general.smoothScroll
+       - set to true to enable finer page scrolling than line-by-line on page-up,
+         page-down, and other such page movements */
+    { id: "general.autoScroll", name: "general.autoScroll", type: "bool" },
+    { id: "general.smoothScroll", name: "general.smoothScroll", type: "bool" },
+    { id: "layout.spellcheckDefault", name: "layout.spellcheckDefault", type: "int" },
+    { id: "toolkit.telemetry.enabled", name: "toolkit.telemetry.enabled", type: "bool" },
+    { id: "browser.preferences.defaultPerformanceSettings.enabled", name: "browser.preferences.defaultPerformanceSettings.enabled", type: "bool" },
+    { id: "dom.ipc.processCount", name: "dom.ipc.processCount", type: "int" },
+    { id: "layers.acceleration.disabled", name: "layers.acceleration.disabled", type: "bool", inverted: true },
+  ],
+});
+
 const ENGINE_FLAVOR = "text/x-moz-search-engine";
 
 var gEngineView = null;
diff --git a/browser/components/preferences/in-content-new/main.xul b/browser/components/preferences/in-content-new/main.xul
index 4ba4c48102a8..8a30c7f28a04 100644
--- a/browser/components/preferences/in-content-new/main.xul
+++ b/browser/components/preferences/in-content-new/main.xul
@@ -14,193 +14,6 @@
 
 <stringbundle id="bundlePreferences" src="chrome://browser/locale/preferences.properties"/>
 
-<preferences id="mainPreferences" hidden="true" data-category="paneGeneral">
-
-#ifdef E10S_TESTING_ONLY
-    <preference id="browser.tabs.remote.autostart"
-                name="browser.tabs.remote.autostart"
-                type="bool"/>
-    <preference id="e10sTempPref"
-                name="browser.tabs.remote.autostart.2"
-                type="bool"/>
-    <preference id="e10sForceEnable"
-                name="browser.tabs.remote.force-enable"
-                type="bool"/>
-#endif
-
-    <!-- Startup -->
-    <preference id="browser.startup.page"
-                name="browser.startup.page"
-                type="int"/>
-    <preference id="browser.startup.homepage"
-                name="browser.startup.homepage"
-                type="wstring"/>
-
-#ifdef HAVE_SHELL_SERVICE
-    <preference id="browser.shell.checkDefaultBrowser"
-                name="browser.shell.checkDefaultBrowser"
-                type="bool"/>
-
-    <preference id="pref.general.disable_button.default_browser"
-                name="pref.general.disable_button.default_browser"
-                type="bool"/>
-#endif
-
-    <preference id="pref.browser.homepage.disable_button.current_page"
-                name="pref.browser.homepage.disable_button.current_page"
-                type="bool"/>
-    <preference id="pref.browser.homepage.disable_button.bookmark_page"
-                name="pref.browser.homepage.disable_button.bookmark_page"
-                type="bool"/>
-    <preference id="pref.browser.homepage.disable_button.restore_default"
-                name="pref.browser.homepage.disable_button.restore_default"
-                type="bool"/>
-
-    <preference id="browser.privatebrowsing.autostart"
-                name="browser.privatebrowsing.autostart"
-                type="bool"/>
-
-    <!-- Search Engine -->
-    <preference id="browser.search.suggest.enabled"
-                  name="browser.search.suggest.enabled"
-                  type="bool"/>
-
-    <preference id="browser.urlbar.suggest.searches"
-                name="browser.urlbar.suggest.searches"
-                type="bool"/>
-
-    <preference id="browser.search.hiddenOneOffs"
-                name="browser.search.hiddenOneOffs"
-                type="unichar"/>
-
-    <!-- Downloads -->
-    <preference id="browser.download.useDownloadDir"
-                name="browser.download.useDownloadDir"
-                type="bool"/>
-
-    <preference id="browser.download.folderList"
-                name="browser.download.folderList"
-                type="int"/>
-    <preference id="browser.download.dir"
-                name="browser.download.dir"
-                type="file"/>
-    <!-- Tab preferences
-    Preferences:
-
-    browser.link.open_newwindow
-        1 opens such links in the most recent window or tab,
-        2 opens such links in a new window,
-        3 opens such links in a new tab
-    browser.tabs.loadInBackground
-    - true if display should switch to a new tab which has been opened from a
-      link, false if display shouldn't switch
-    browser.tabs.warnOnClose
-    - true if when closing a window with multiple tabs the user is warned and
-      allowed to cancel the action, false to just close the window
-    browser.tabs.warnOnOpen
-    - true if the user should be warned if he attempts to open a lot of tabs at
-      once (e.g. a large folder of bookmarks), false otherwise
-    browser.taskbar.previews.enable
-    - true if tabs are to be shown in the Windows 7 taskbar
-    -->
-
-    <preference id="browser.link.open_newwindow"
-                name="browser.link.open_newwindow"
-                type="int"/>
-    <preference id="browser.tabs.loadInBackground"
-                name="browser.tabs.loadInBackground"
-                type="bool"
-                inverted="true"/>
-    <preference id="browser.tabs.warnOnClose"
-                name="browser.tabs.warnOnClose"
-                type="bool"/>
-    <preference id="browser.tabs.warnOnOpen"
-                name="browser.tabs.warnOnOpen"
-                type="bool"/>
-    <preference id="browser.sessionstore.restore_on_demand"
-                name="browser.sessionstore.restore_on_demand"
-                type="bool"/>
-#ifdef XP_WIN
-    <preference id="browser.taskbar.previews.enable"
-                name="browser.taskbar.previews.enable"
-                type="bool"/>
-#endif
-    <preference id="browser.ctrlTab.previews"
-                name="browser.ctrlTab.previews"
-                type="bool"/>
-
-  <!-- Fonts -->
-  <preference id="font.language.group"
-              name="font.language.group"
-              type="wstring"/>
-
-  <!-- Languages -->
-  <preference id="browser.translation.detectLanguage"
-              name="browser.translation.detectLanguage"
-              type="bool"/>
-
-  <!-- General tab -->
-
-  <!-- Accessibility
-   * accessibility.browsewithcaret
-     - true enables keyboard navigation and selection within web pages using a
-       visible caret, false uses normal keyboard navigation with no caret
-   * accessibility.typeaheadfind
-     - when set to true, typing outside text areas and input boxes will
-       automatically start searching for what's typed within the current
-       document; when set to false, no search action happens -->
-  <preference id="accessibility.browsewithcaret"
-              name="accessibility.browsewithcaret"
-              type="bool"/>
-  <preference id="accessibility.typeaheadfind"
-              name="accessibility.typeaheadfind"
-              type="bool"/>
-  <preference id="accessibility.blockautorefresh"
-              name="accessibility.blockautorefresh"
-              type="bool"/>
-#ifdef XP_WIN
-  <preference id="ui.osk.enabled"
-              name="ui.osk.enabled"
-              type="bool"/>
-#endif
-  <!-- Browsing
-   * general.autoScroll
-     - when set to true, clicking the scroll wheel on the mouse activates a
-       mouse mode where moving the mouse down scrolls the document downward with
-       speed correlated with the distance of the cursor from the original
-       position at which the click occurred (and likewise with movement upward);
-       if false, this behavior is disabled
-   * general.smoothScroll
-     - set to true to enable finer page scrolling than line-by-line on page-up,
-       page-down, and other such page movements -->
-  <preference id="general.autoScroll"
-              name="general.autoScroll"
-              type="bool"/>
-  <preference id="general.smoothScroll"
-              name="general.smoothScroll"
-              type="bool"/>
-  <preference id="layout.spellcheckDefault"
-              name="layout.spellcheckDefault"
-              type="int"/>
-
-  <preference id="toolkit.telemetry.enabled"
-              name="toolkit.telemetry.enabled"
-              type="bool"/>
-
-  <preference id="browser.preferences.defaultPerformanceSettings.enabled"
-              name="browser.preferences.defaultPerformanceSettings.enabled"
-              type="bool"/>
-
-  <preference id="dom.ipc.processCount"
-              name="dom.ipc.processCount"
-              type="int"/>
-
-  <preference id="layers.acceleration.disabled"
-              name="layers.acceleration.disabled"
-              type="bool"
-              inverted="true"/>
-</preferences>
-
 <hbox id="header-general"
       class="header"
       hidden="true"

From 134ceeae9b319df9326c60930e706acfe2963e8a Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Tue, 20 Jun 2017 17:10:46 -0700
Subject: [PATCH 004/106] hook up change handler

---
 browser/components/preferences/in-content-new/preferences.js | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index f27f3c346822..5de14f591e9c 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -417,6 +417,7 @@ Object.defineProperties(Preferences.prototype, {
 
 function Preference({ preferences, name, type, inverted, readonly, disabled, id }) {
   EventEmitter.call(this);
+  this.on("change", this.onchange.bind(this));
 
   this._preferences = preferences;
   this._name = name;
@@ -428,6 +429,7 @@ function Preference({ preferences, name, type, inverted, readonly, disabled, id
 
   // if the element has been inserted without the name attribute set,
   // we have nothing to do here
+  // XXX Throw an exception in this case, which seems, erm, exceptional.
   if (!this.name)
     return;
 
@@ -618,7 +620,6 @@ Object.assign(Preference.prototype, {
       this.setElementValue(elements[i]);
   },
 
-  // XXX Hook this up to "change" event dispatch.
   onchange() {
     this.updateElements();
   },

From 9ea2c833052bf9dcde415b5e591a08d51ba48a78 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Tue, 20 Jun 2017 17:21:16 -0700
Subject: [PATCH 005/106] correctly pass Preferences object to Preference
 constructor; assign default values to properties

---
 .../components/preferences/in-content-new/preferences.js | 16 +++++++++++-----
 1 file changed, 11 insertions(+), 5 deletions(-)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 5de14f591e9c..47e9228c8947 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -351,7 +351,7 @@ function Preferences({ id, hidden, dataCategory, preferences }) {
   this.id = id;
   this.hidden = hidden;
   this.dataCategory = dataCategory;
-  this.preferences = preferences.map(v => new Preference(v));
+  this.preferences = preferences.map(v => new Preference(Object.assign(v, { preferences: this })));
 
   this._constructAfterChildren();
 }
@@ -415,16 +415,17 @@ Object.defineProperties(Preferences.prototype, {
   },
 });
 
-function Preference({ preferences, name, type, inverted, readonly, disabled, id }) {
+function Preference({ preferences, id, name, type, inverted }) {
   EventEmitter.call(this);
   this.on("change", this.onchange.bind(this));
 
+  // XXX Break dependency of Preference on Preferences and remove this property.
   this._preferences = preferences;
+
   this._name = name;
+
   this.type = type;
-  this.inverted = inverted;
-  this.readonly = readonly;
-  this._disabled = disabled;
+  this.inverted = !!inverted;
   this.id = id;
 
   // if the element has been inserted without the name attribute set,
@@ -465,6 +466,7 @@ function Preference({ preferences, name, type, inverted, readonly, disabled, id
   this.preferences._constructAfterChildren();
 }
 
+// XXX Figure out when to call this (document unload?) and do so.
 Preference.destructor = function () {
   this.preferences.rootBranchInternal
       .removeObserver(this.name, this.preferences);
@@ -476,7 +478,11 @@ Object.assign(Preference.prototype, {
   _preferences: null,
   _value: null,
   _disabled: false,
+
   id: "",
+  readonly: false,
+  type: "",
+  inverted: false,
 
   reset() {
     // defer reset until preference update

From e034fdf71c16c0c945ae4dc1a954836a03f7f9c5 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Wed, 21 Jun 2017 14:51:50 -0700
Subject: [PATCH 006/106] replace DOM calls to old <preferences>/<preference>
 elements w/JS calls to new Preferences/Preference objects

---
 .../components/preferences/in-content-new/main.js  | 104 ++++++++++-----------
 .../preferences/in-content-new/preferences.js      |  16 ++++
 2 files changed, 66 insertions(+), 54 deletions(-)

diff --git a/browser/components/preferences/in-content-new/main.js b/browser/components/preferences/in-content-new/main.js
index 5d93edafb5e8..a7f950ec286f 100644
--- a/browser/components/preferences/in-content-new/main.js
+++ b/browser/components/preferences/in-content-new/main.js
@@ -26,7 +26,9 @@ if (AppConstants.MOZ_DEV_EDITION) {
                                     "resource://gre/modules/FxAccounts.jsm");
 }
 
+// XXX Rename this to gMainPrefs.
 const mainPreferences = new Preferences({
+  // XXX Remove id property, which we probably don't need.
   id: "mainPreferences",
   hidden: true,
   dataCategory: "paneGeneral",
@@ -198,8 +200,8 @@ var gMainPane = {
     this._initAutocomplete();
 
     let suggestsPref =
-      document.getElementById("browser.search.suggest.enabled");
-    suggestsPref.addEventListener("change", () => {
+      mainPreferences.get("browser.search.suggest.enabled");
+    suggestsPref.on("change", () => {
       this.updateSuggestsCheckbox();
     });
     this.updateSuggestsCheckbox();
@@ -207,8 +209,8 @@ var gMainPane = {
     this.updateDefaultPerformanceSettingsPref();
 
     let defaultPerformancePref =
-      document.getElementById("browser.preferences.defaultPerformanceSettings.enabled");
-    defaultPerformancePref.addEventListener("change", () => {
+      mainPreferences.get("browser.preferences.defaultPerformanceSettings.enabled");
+    defaultPerformancePref.on("change", () => {
       this.updatePerformanceSettingsBox();
     });
     this.updatePerformanceSettingsBox();
@@ -239,7 +241,7 @@ var gMainPane = {
     if (!TransientPrefs.prefShouldBeVisible("browser.tabs.warnOnOpen"))
       document.getElementById("warnOpenMany").hidden = true;
 
-    setEventListener("browser.privatebrowsing.autostart", "change",
+    mainPreferences.get("browser.privatebrowsing.autostart").on("change",
                      gMainPane.updateBrowserStartupLastSession);
     if (AppConstants.HAVE_SHELL_SERVICE) {
       setEventListener("setDefaultButton", "command",
@@ -257,13 +259,13 @@ var gMainPane = {
       gMainPane.openTranslationProviderAttribution);
     setEventListener("translateButton", "command",
       gMainPane.showTranslationExceptions);
-    setEventListener("font.language.group", "change",
+    mainPreferences.get("font.language.group").on("change",
       gMainPane._rebuildFonts);
     setEventListener("advancedFonts", "command",
       gMainPane.configureFonts);
     setEventListener("colors", "command",
       gMainPane.configureColors);
-    setEventListener("layers.acceleration.disabled", "change",
+    mainPreferences.get("layers.acceleration.disabled").on("change",
       gMainPane.updateHardwareAcceleration);
 
     // Initializes the fonts dropdowns displayed in this pane.
@@ -288,9 +290,9 @@ var gMainPane = {
                        gMainPane.enableE10SChange);
       let e10sCheckbox = document.getElementById("e10sAutoStart");
 
-      let e10sPref = document.getElementById("browser.tabs.remote.autostart");
-      let e10sTempPref = document.getElementById("e10sTempPref");
-      let e10sForceEnable = document.getElementById("e10sForceEnable");
+      let e10sPref = mainPreferences.get("browser.tabs.remote.autostart");
+      let e10sTempPref = mainPreferences.get("e10sTempPref");
+      let e10sForceEnable = mainPreferences.get("e10sForceEnable");
 
       let preffedOn = e10sPref.value || e10sTempPref.value || e10sForceEnable.value;
 
@@ -344,8 +346,8 @@ var gMainPane = {
   enableE10SChange() {
     if (AppConstants.E10S_TESTING_ONLY) {
       let e10sCheckbox = document.getElementById("e10sAutoStart");
-      let e10sPref = document.getElementById("browser.tabs.remote.autostart");
-      let e10sTempPref = document.getElementById("e10sTempPref");
+      let e10sPref = mainPreferences.get("browser.tabs.remote.autostart");
+      let e10sTempPref = mainPreferences.get("e10sTempPref");
 
       let prefsToChange;
       if (e10sCheckbox.checked) {
@@ -466,7 +468,7 @@ var gMainPane = {
    */
 
   syncFromHomePref() {
-    let homePref = document.getElementById("browser.startup.homepage");
+    let homePref = mainPreferences.get("browser.startup.homepage");
 
     // If the pref is set to about:home or about:newtab, set the value to ""
     // to show the placeholder text (about:home title) rather than
@@ -505,7 +507,7 @@ var gMainPane = {
    * window UI to reflect this.
    */
   setHomePageToCurrent() {
-    let homePage = document.getElementById("browser.startup.homepage");
+    let homePage = mainPreferences.get("browser.startup.homepage");
     let tabs = this._getTabsForHomePage();
     function getTabURI(t) {
       return t.linkedBrowser.currentURI.spec;
@@ -532,7 +534,7 @@ var gMainPane = {
     if (aEvent.detail.button != "accept")
       return;
     if (rv.urls && rv.names) {
-      var homePage = document.getElementById("browser.startup.homepage");
+      var homePage = mainPreferences.get("browser.startup.homepage");
 
       // XXX still using dangerous "|" joiner!
       homePage.value = rv.urls.join("|");
@@ -556,7 +558,7 @@ var gMainPane = {
 
     // In this case, the button's disabled state is set by preferences.xml.
     let prefName = "pref.browser.homepage.disable_button.current_page";
-    if (document.getElementById(prefName).locked)
+    if (mainPreferences.get(prefName).locked)
       return;
 
     useCurrent.disabled = !tabs.length
@@ -593,7 +595,7 @@ var gMainPane = {
    * Restores the default home page as the user's home page.
    */
   restoreDefaultHomePage() {
-    var homePage = document.getElementById("browser.startup.homepage");
+    var homePage = mainPreferences.get("browser.startup.homepage");
     homePage.value = homePage.defaultValue;
   },
 
@@ -603,7 +605,7 @@ var gMainPane = {
    */
   updateButtons(aButtonID, aPreferenceID) {
     var button = document.getElementById(aButtonID);
-    var preference = document.getElementById(aPreferenceID);
+    var preference = mainPreferences.get(aPreferenceID);
     button.disabled = preference.value != true;
     return undefined;
   },
@@ -613,8 +615,8 @@ var gMainPane = {
    * on the value of the browser.privatebrowsing.autostart pref.
    */
   updateBrowserStartupLastSession() {
-    let pbAutoStartPref = document.getElementById("browser.privatebrowsing.autostart");
-    let startupPref = document.getElementById("browser.startup.page");
+    let pbAutoStartPref = mainPreferences.get("browser.privatebrowsing.autostart");
+    let startupPref = mainPreferences.get("browser.startup.page");
     let menu = document.getElementById("browserStartupPage");
     let option = document.getElementById("browserStartupLastSession");
     if (pbAutoStartPref.value) {
@@ -659,7 +661,7 @@ var gMainPane = {
    * @returns |true| if such links should be opened in new tabs
    */
   readLinkTarget() {
-    var openNewWindow = document.getElementById("browser.link.open_newwindow");
+    var openNewWindow = mainPreferences.get("browser.link.open_newwindow");
     return openNewWindow.value != 2;
   },
 
@@ -707,7 +709,7 @@ var gMainPane = {
    */
   setDefaultBrowser() {
     if (AppConstants.HAVE_SHELL_SERVICE) {
-      let alwaysCheckPref = document.getElementById("browser.shell.checkDefaultBrowser");
+      let alwaysCheckPref = mainPreferences.get("browser.shell.checkDefaultBrowser");
       alwaysCheckPref.value = true;
 
       let shellSvc = getShellService();
@@ -786,12 +788,7 @@ var gMainPane = {
    * Populates the default font list in UI.
    */
   _rebuildFonts() {
-    var preferences = document.getElementById("mainPreferences");
-    // Ensure preferences are "visible" to ensure bindings work.
-    preferences.hidden = false;
-    // Force flush:
-    preferences.clientHeight;
-    var langGroupPref = document.getElementById("font.language.group");
+    var langGroupPref = mainPreferences.get("font.language.group");
     this._selectDefaultLanguageGroup(langGroupPref.value,
                                      this._readDefaultFontTypeForLanguage(langGroupPref.value) == "serif");
   },
@@ -803,14 +800,14 @@ var gMainPane = {
   _readDefaultFontTypeForLanguage(aLanguageGroup) {
     const kDefaultFontType = "font.default.%LANG%";
     var defaultFontTypePref = kDefaultFontType.replace(/%LANG%/, aLanguageGroup);
-    var preference = document.getElementById(defaultFontTypePref);
+    var preference = mainPreferences.get(defaultFontTypePref);
     if (!preference) {
-      preference = document.createElement("preference");
-      preference.id = defaultFontTypePref;
-      preference.setAttribute("name", defaultFontTypePref);
-      preference.setAttribute("type", "string");
-      preference.setAttribute("onchange", "gMainPane._rebuildFonts();");
-      document.getElementById("mainPreferences").appendChild(preference);
+      preference = mainPreferences.add({
+        id: defaultFontTypePref,
+        name: defaultFontTypePref,
+        type: "string",
+      });
+      preference.on("change", gMainPane._rebuildFonts.bind(gMainPane));
     }
     return preference.value;
   },
@@ -822,7 +819,6 @@ var gMainPane = {
     const kFontNameListFmtSansSerif = "font.name-list.sans-serif.%LANG%";
     const kFontSizeFmtVariable      = "font.size.variable.%LANG%";
 
-    var preferences = document.getElementById("mainPreferences");
     var prefs = [{ format: aIsSerif ? kFontNameFmtSerif : kFontNameFmtSansSerif,
                    type: "fontname",
                    element: "defaultFont",
@@ -836,14 +832,14 @@ var gMainPane = {
                    element: "defaultFontSize",
                    fonttype: null }];
     for (var i = 0; i < prefs.length; ++i) {
-      var preference = document.getElementById(prefs[i].format.replace(/%LANG%/, aLanguageGroup));
+      var preference = mainPreferences.get(prefs[i].format.replace(/%LANG%/, aLanguageGroup));
       if (!preference) {
-        preference = document.createElement("preference");
         var name = prefs[i].format.replace(/%LANG%/, aLanguageGroup);
-        preference.id = name;
-        preference.setAttribute("name", name);
-        preference.setAttribute("type", prefs[i].type);
-        preferences.appendChild(preference);
+        preference = mainPreferences.add({
+          id: name,
+          name: name,
+          type: prefs[i].type,
+        });
       }
 
       if (!prefs[i].element)
@@ -879,7 +875,7 @@ var gMainPane = {
    *     2  enables spellchecking for all text fields
    */
   readCheckSpelling() {
-    var pref = document.getElementById("layout.spellcheckDefault");
+    var pref = mainPreferences.get("layout.spellcheckDefault");
     this._storedSpellCheck = pref.value;
 
     return (pref.value != 0);
@@ -903,14 +899,14 @@ var gMainPane = {
 
   updateSuggestsCheckbox() {
     let suggestsPref =
-      document.getElementById("browser.search.suggest.enabled");
+      mainPreferences.get("browser.search.suggest.enabled");
     let permanentPB =
       Services.prefs.getBoolPref("browser.privatebrowsing.autostart");
     let urlbarSuggests = document.getElementById("urlBarSuggestion");
     urlbarSuggests.disabled = !suggestsPref.value || permanentPB;
 
     let urlbarSuggestsPref =
-      document.getElementById("browser.urlbar.suggest.searches");
+      mainPreferences.get("browser.urlbar.suggest.searches");
     urlbarSuggests.checked = urlbarSuggestsPref.value;
     if (urlbarSuggests.disabled) {
       urlbarSuggests.checked = false;
@@ -923,9 +919,9 @@ var gMainPane = {
 
   updateDefaultPerformanceSettingsPref() {
     let defaultPerformancePref =
-      document.getElementById("browser.preferences.defaultPerformanceSettings.enabled");
-    let processCountPref = document.getElementById("dom.ipc.processCount");
-    let accelerationPref = document.getElementById("layers.acceleration.disabled");
+      mainPreferences.get("browser.preferences.defaultPerformanceSettings.enabled");
+    let processCountPref = mainPreferences.get("dom.ipc.processCount");
+    let accelerationPref = mainPreferences.get("layers.acceleration.disabled");
     if (processCountPref.value != processCountPref.defaultValue ||
         accelerationPref.value != accelerationPref.defaultValue) {
       defaultPerformancePref.value = false;
@@ -934,11 +930,11 @@ var gMainPane = {
 
   updatePerformanceSettingsBox() {
     let defaultPerformancePref =
-      document.getElementById("browser.preferences.defaultPerformanceSettings.enabled");
+      mainPreferences.get("browser.preferences.defaultPerformanceSettings.enabled");
     let performanceSettings = document.getElementById("performanceSettings");
     if (defaultPerformancePref.value) {
-      let processCountPref = document.getElementById("dom.ipc.processCount");
-      let accelerationPref = document.getElementById("layers.acceleration.disabled");
+      let processCountPref = mainPreferences.get("dom.ipc.processCount");
+      let accelerationPref = mainPreferences.get("layers.acceleration.disabled");
       processCountPref.value = processCountPref.defaultValue;
       accelerationPref.value = accelerationPref.defaultValue;
       performanceSettings.hidden = true;
@@ -949,7 +945,7 @@ var gMainPane = {
 
   buildContentProcessCountMenuList() {
     if (gMainPane.isE10SEnabled()) {
-      let processCountPref = document.getElementById("dom.ipc.processCount");
+      let processCountPref = mainPreferences.get("dom.ipc.processCount");
       let bundlePreferences = document.getElementById("bundlePreferences");
       let label = bundlePreferences.getFormattedString("defaultContentProcessCount",
         [processCountPref.defaultValue]);
@@ -1196,7 +1192,7 @@ var gMainPane = {
       if (!engine.shown)
         hiddenList.push(engine.name);
     }
-    document.getElementById("browser.search.hiddenOneOffs").value =
+    mainPreferences.get("browser.search.hiddenOneOffs").value =
       hiddenList.join(",");
   },
 
@@ -1219,7 +1215,7 @@ function onDragEngineStart(event) {
 
 
 function EngineStore() {
-  let pref = document.getElementById("browser.search.hiddenOneOffs").value;
+  let pref = mainPreferences.get("browser.search.hiddenOneOffs").value;
   this.hiddenList = pref ? pref.split(",") : [];
 
   this._engines = Services.search.getVisibleEngines().map(this._cloneEngine, this);
diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 47e9228c8947..1a6a0ff0ea6f 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -367,6 +367,22 @@ Object.assign(Preferences.prototype, {
 
   // XXX Implement nsIObserver
 
+  get(id) {
+    // Implement a hash to optimize this query.
+    for (let i = 0; i < this.preferences.length; i++) {
+      if (this.preferences[i].id === id) {
+        return this.preferences[i];
+      }
+    }
+    return null;
+  },
+
+  add({ id, name, type }) {
+    let pref = new Preference({ preferences: this, id, name, type });
+    this.preferences.push(pref);
+    return pref;
+  },
+
   // XXX Make the constructor do this itself, since it knows when it has
   // constructed all the children.
   _constructAfterChildren() {

From c4b75e10c8dd24be5b690b297f298afc7be2751e Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Wed, 21 Jun 2017 15:08:17 -0700
Subject: [PATCH 007/106] fix refs to main prefs outside main.js

---
 browser/components/preferences/in-content-new/applications.js | 6 +++---
 toolkit/mozapps/preferences/fontbuilder.js                    | 2 +-
 2 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/browser/components/preferences/in-content-new/applications.js b/browser/components/preferences/in-content-new/applications.js
index 33b10e1012a0..fa7fac617d24 100644
--- a/browser/components/preferences/in-content-new/applications.js
+++ b/browser/components/preferences/in-content-new/applications.js
@@ -1936,7 +1936,7 @@ var gApplicationsPane = {
   readUseDownloadDir() {
     var downloadFolder = document.getElementById("downloadFolder");
     var chooseFolder = document.getElementById("chooseFolder");
-    var preference = document.getElementById("browser.download.useDownloadDir");
+    var preference = mainPreferences.get("browser.download.useDownloadDir");
     downloadFolder.disabled = !preference.value || preference.locked;
     chooseFolder.disabled = !preference.value || preference.locked;
 
@@ -2000,10 +2000,10 @@ var gApplicationsPane = {
   },
 
   async displayDownloadDirPrefTask() {
-    var folderListPref = document.getElementById("browser.download.folderList");
+    var folderListPref = mainPreferences.get("browser.download.folderList");
     var bundlePreferences = document.getElementById("bundlePreferences");
     var downloadFolder = document.getElementById("downloadFolder");
-    var currentDirPref = document.getElementById("browser.download.dir");
+    var currentDirPref = mainPreferences.get("browser.download.dir");
 
     // Used in defining the correct path to the folder icon.
     var ios = Components.classes["@mozilla.org/network/io-service;1"]
diff --git a/toolkit/mozapps/preferences/fontbuilder.js b/toolkit/mozapps/preferences/fontbuilder.js
index 79cc43d1a631..cccf51773d82 100644
--- a/toolkit/mozapps/preferences/fontbuilder.js
+++ b/toolkit/mozapps/preferences/fontbuilder.js
@@ -91,7 +91,7 @@ var FontBuilder = {
     // - there is no setting
     // - the font selected by the user is no longer present (e.g. deleted from
     //   fonts folder)
-    let preference = document.getElementById(aElement.getAttribute("preference"));
+    let preference = mainPreferences.get(aElement.getAttribute("preference"));
     if (preference.value) {
       let fontItems = aElement.getElementsByAttribute("value", preference.value);
 

From f013db603048ece28d3047594caaf8fb41596345 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Wed, 21 Jun 2017 15:11:41 -0700
Subject: [PATCH 008/106] fix another ref to main pref outside main.js

---
 browser/components/preferences/in-content-new/applications.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/browser/components/preferences/in-content-new/applications.js b/browser/components/preferences/in-content-new/applications.js
index fa7fac617d24..b4e9ba61f473 100644
--- a/browser/components/preferences/in-content-new/applications.js
+++ b/browser/components/preferences/in-content-new/applications.js
@@ -912,7 +912,7 @@ var gApplicationsPane = {
     setEventListener("typeColumn", "click", gApplicationsPane.sort);
     setEventListener("actionColumn", "click", gApplicationsPane.sort);
     setEventListener("chooseFolder", "command", gApplicationsPane.chooseFolder);
-    setEventListener("browser.download.dir", "change", gApplicationsPane.displayDownloadDirPref);
+    mainPreferences.get("browser.download.dir").on("change", gApplicationsPane.displayDownloadDirPref);
 
     // Listen for window unload so we can remove our preference observers.
     window.addEventListener("unload", this);

From dcb6f13b3e11cfe025bf5d38ec782a493d176b67 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Wed, 21 Jun 2017 18:09:06 -0700
Subject: [PATCH 009/106] ensure tests can access mainPreferences global

---
 browser/components/preferences/in-content-new/main.js              | 7 ++++++-
 .../in-content-new/tests/browser_basic_rebuild_fonts_test.js       | 3 ++-
 2 files changed, 8 insertions(+), 2 deletions(-)

diff --git a/browser/components/preferences/in-content-new/main.js b/browser/components/preferences/in-content-new/main.js
index a7f950ec286f..ac853bbf4157 100644
--- a/browser/components/preferences/in-content-new/main.js
+++ b/browser/components/preferences/in-content-new/main.js
@@ -27,7 +27,12 @@ if (AppConstants.MOZ_DEV_EDITION) {
 }
 
 // XXX Rename this to gMainPrefs.
-const mainPreferences = new Preferences({
+// |let| is the new |var|, and |const| is the new |let| (for symbols that don't
+// change, anyway).  Except in this global scope, apparently, where tests
+// that seek window.mainPreferences fail to find it if we declare it with |let|
+// or |const|.  So here we declare it with |var|.  We could instead explicitly
+// assign it to window.mainPreferences.
+var mainPreferences = new Preferences({
   // XXX Remove id property, which we probably don't need.
   id: "mainPreferences",
   hidden: true,
diff --git a/browser/components/preferences/in-content-new/tests/browser_basic_rebuild_fonts_test.js b/browser/components/preferences/in-content-new/tests/browser_basic_rebuild_fonts_test.js
index 1ddc577f60a8..86387d0c5955 100644
--- a/browser/components/preferences/in-content-new/tests/browser_basic_rebuild_fonts_test.js
+++ b/browser/components/preferences/in-content-new/tests/browser_basic_rebuild_fonts_test.js
@@ -7,8 +7,9 @@ registerCleanupFunction(function() {
 add_task(async function() {
   await openPreferencesViaOpenPreferencesAPI("paneGeneral", {leaveOpen: true});
   let doc = gBrowser.contentDocument;
+  let contentWindow = gBrowser.contentWindow;
   var langGroup = Services.prefs.getComplexValue("font.language.group", Ci.nsIPrefLocalizedString).data
-  is(doc.getElementById("font.language.group").value, langGroup,
+  is(contentWindow.mainPreferences.get("font.language.group").value, langGroup,
      "Language group should be set correctly.");
 
   let defaultFontType = Services.prefs.getCharPref("font.default." + langGroup);

From 814daba76d2ff95e27f0c58c4b7d6fb41a4eacbc Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Wed, 21 Jun 2017 18:09:34 -0700
Subject: [PATCH 010/106] look for both <preference> elements and Preference
 instances until we've finished converting the former to the latter

---
 toolkit/content/widgets/preferences.xml    | 6 +++++-
 toolkit/mozapps/preferences/fontbuilder.js | 5 ++++-
 2 files changed, 9 insertions(+), 2 deletions(-)

diff --git a/toolkit/content/widgets/preferences.xml b/toolkit/content/widgets/preferences.xml
index 229e3327d6ad..6175b7d2adf3 100644
--- a/toolkit/content/widgets/preferences.xml
+++ b/toolkit/content/widgets/preferences.xml
@@ -1251,7 +1251,11 @@
         <body>
         <![CDATA[
           delete aElement._deferredValueUpdateTask;
-          let preference = document.getElementById(aElement.getAttribute("preference"));
+          let prefID = aElement.getAttribute("preference");
+          // XXX Remove reference to mainPreferences once we've eliminated
+          // the in-content-new preference page's dependency on this <prefpane>
+          // binding.
+          let preference = document.getElementById(prefID) || window.mainPreferences.get(prefID);
           let prefVal = preference.getElementValue(aElement);
           preference.value = prefVal;
           this._deferredValueUpdateElements.delete(aElement);
diff --git a/toolkit/mozapps/preferences/fontbuilder.js b/toolkit/mozapps/preferences/fontbuilder.js
index cccf51773d82..db2c1e9f563f 100644
--- a/toolkit/mozapps/preferences/fontbuilder.js
+++ b/toolkit/mozapps/preferences/fontbuilder.js
@@ -91,7 +91,10 @@ var FontBuilder = {
     // - there is no setting
     // - the font selected by the user is no longer present (e.g. deleted from
     //   fonts folder)
-    let preference = mainPreferences.get(aElement.getAttribute("preference"));
+    // XXX Stop getting preference element once we've converted fonts.xul
+    // from XBL <preference> elements to JS Preference objects.
+    let preference = document.getElementById(aElement.getAttribute("preference")) ||
+                     mainPreferences.get(aElement.getAttribute("preference"));
     if (preference.value) {
       let fontItems = aElement.getElementsByAttribute("value", preference.value);
 

From 4e79be188fc852083af247aff15e6de991fee1ae Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Wed, 21 Jun 2017 18:15:44 -0700
Subject: [PATCH 011/106] correct comment

---
 browser/components/preferences/in-content-new/main.js | 8 ++------
 1 file changed, 2 insertions(+), 6 deletions(-)

diff --git a/browser/components/preferences/in-content-new/main.js b/browser/components/preferences/in-content-new/main.js
index ac853bbf4157..960b07df8ba0 100644
--- a/browser/components/preferences/in-content-new/main.js
+++ b/browser/components/preferences/in-content-new/main.js
@@ -27,12 +27,8 @@ if (AppConstants.MOZ_DEV_EDITION) {
 }
 
 // XXX Rename this to gMainPrefs.
-// |let| is the new |var|, and |const| is the new |let| (for symbols that don't
-// change, anyway).  Except in this global scope, apparently, where tests
-// that seek window.mainPreferences fail to find it if we declare it with |let|
-// or |const|.  So here we declare it with |var|.  We could instead explicitly
-// assign it to window.mainPreferences.
-var mainPreferences = new Preferences({
+// Assign the Preferences instance to window.mainPreferences so tests can access it.
+const mainPreferences = window.mainPreferences = new Preferences({
   // XXX Remove id property, which we probably don't need.
   id: "mainPreferences",
   hidden: true,

From a0b12226c6d2b02321dbf0a4c30e80eb703253da Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 23 Jun 2017 16:39:58 -0700
Subject: [PATCH 012/106] ensure XBL binding finds new-style Preference objects

---
 toolkit/content/widgets/preferences.xml | 14 +++++++++++---
 1 file changed, 11 insertions(+), 3 deletions(-)

diff --git a/toolkit/content/widgets/preferences.xml b/toolkit/content/widgets/preferences.xml
index 6175b7d2adf3..69c67df95dc5 100644
--- a/toolkit/content/widgets/preferences.xml
+++ b/toolkit/content/widgets/preferences.xml
@@ -1215,7 +1215,12 @@
       <method name="preferenceForElement">
         <parameter name="aElement"/>
         <body>
-          return document.getElementById(aElement.getAttribute("preference"));
+          <![CDATA[
+          // XXX Remove reference to mainPreferences once we've eliminated
+          // the in-content-new preference page's dependency on this <prefpane>.
+          return document.getElementById(aElement.getAttribute("preference")) ||
+                 mainPreferences.get(aElement.getAttribute("preference"));
+          ]]>
         </body>
       </method>
 
@@ -1253,7 +1258,7 @@
           delete aElement._deferredValueUpdateTask;
           let prefID = aElement.getAttribute("preference");
           // XXX Remove reference to mainPreferences once we've eliminated
-          // the in-content-new preference page's dependency on this <prefpane>
+          // the in-content-new preference page's dependency on this <prefpane>.
           // binding.
           let preference = document.getElementById(prefID) || window.mainPreferences.get(prefID);
           let prefVal = preference.getElementValue(aElement);
@@ -1283,7 +1288,10 @@
           let element = this.getPreferenceElement(aElement);
           if (element.hasAttribute("preference")) {
             if (element.getAttribute("delayprefsave") != "true") {
-              var preference = document.getElementById(element.getAttribute("preference"));
+              // XXX Remove reference to mainPreferences once we've eliminated
+              // the in-content-new preference page's dependency on this <prefpane>.
+              var preference = document.getElementById(element.getAttribute("preference")) ||
+                               mainPreferences.get(element.getAttribute("preference"));
               var prefVal = preference.getElementValue(element);
               preference.value = prefVal;
             } else {

From 3d5f0f035830fa18f0927ca85a576dfa00a92901 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 23 Jun 2017 16:49:33 -0700
Subject: [PATCH 013/106] implement nsIObserver interface in Preferences object

---
 .../components/preferences/in-content-new/preferences.js   | 14 +++++++++++++-
 1 file changed, 13 insertions(+), 1 deletion(-)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 1a6a0ff0ea6f..39af48f0f7c4 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -365,7 +365,17 @@ Object.assign(Preferences.prototype, {
   dataCategory: "",
   preferences: [],
 
-  // XXX Implement nsIObserver
+  observe(aSubject, aTopic, aData) {
+    // Implement a hash to optimize this query.
+    for (var i = 0; i < this.preferences.length; ++i) {
+      var preference = this.preferences[i];
+      if (preference.name == aData) {
+        preference.value = preference.valueFromPreferences;
+        // XXX Or at least frickin' break here.  Or do we expect multiple
+        // Preference objects for a given preference name?
+      }
+    }
+  },
 
   get(id) {
     // Implement a hash to optimize this query.
@@ -450,6 +460,8 @@ function Preference({ preferences, id, name, type, inverted }) {
   if (!this.name)
     return;
 
+  // XXX Add this observer once instead of every time we instantiate
+  // a Preference object.
   this.preferences.rootBranchInternal
       .addObserver(this.name, this.preferences);
   // In non-instant apply mode, we must try and use the last saved state

From 04f06c3c0e5c865cb5dd81329355245e36c5cf34 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Mon, 26 Jun 2017 22:23:42 -0700
Subject: [PATCH 014/106] enable categorization

---
 .../components/preferences/in-content-new/main.js  | 80 ++++++++++------------
 .../preferences/in-content-new/preferences.js      | 27 +++++---
 2 files changed, 57 insertions(+), 50 deletions(-)

diff --git a/browser/components/preferences/in-content-new/main.js b/browser/components/preferences/in-content-new/main.js
index 960b07df8ba0..997f126ba89f 100644
--- a/browser/components/preferences/in-content-new/main.js
+++ b/browser/components/preferences/in-content-new/main.js
@@ -28,41 +28,37 @@ if (AppConstants.MOZ_DEV_EDITION) {
 
 // XXX Rename this to gMainPrefs.
 // Assign the Preferences instance to window.mainPreferences so tests can access it.
-const mainPreferences = window.mainPreferences = new Preferences({
-  // XXX Remove id property, which we probably don't need.
-  id: "mainPreferences",
-  hidden: true,
-  dataCategory: "paneGeneral",
+mainPreferences.addAll({
   preferences: [
 #ifdef E10S_TESTING_ONLY
-    { id: "browser.tabs.remote.autostart", name: "browser.tabs.remote.autostart", type: "bool" },
-    { id: "e10sTempPref", name: "browser.tabs.remote.autostart.2", type: "bool" },
-    { id: "e10sForceEnable", name: "browser.tabs.remote.force-enable", type: "bool" },
+    { category: "main", id: "browser.tabs.remote.autostart", name: "browser.tabs.remote.autostart", type: "bool" },
+    { category: "main", id: "e10sTempPref", name: "browser.tabs.remote.autostart.2", type: "bool" },
+    { category: "main", id: "e10sForceEnable", name: "browser.tabs.remote.force-enable", type: "bool" },
 #endif
 
     /* Startup */
-    { id: "browser.startup.page", name: "browser.startup.page", type: "int" },
-    { id: "browser.startup.homepage", name: "browser.startup.homepage", type: "wstring" },
+    { category: "main", id: "browser.startup.page", name: "browser.startup.page", type: "int" },
+    { category: "main", id: "browser.startup.homepage", name: "browser.startup.homepage", type: "wstring" },
 
 #ifdef HAVE_SHELL_SERVICE
-    { id: "browser.shell.checkDefaultBrowser", name: "browser.shell.checkDefaultBrowser", type: "bool" },
-    { id: "pref.general.disable_button.default_browser", name: "pref.general.disable_button.default_browser", type: "bool" },
+    { category: "main", id: "browser.shell.checkDefaultBrowser", name: "browser.shell.checkDefaultBrowser", type: "bool" },
+    { category: "main", id: "pref.general.disable_button.default_browser", name: "pref.general.disable_button.default_browser", type: "bool" },
 #endif
 
-    { id: "pref.browser.homepage.disable_button.current_page", name: "pref.browser.homepage.disable_button.current_page", type: "bool" },
-    { id: "pref.browser.homepage.disable_button.bookmark_page", name: "pref.browser.homepage.disable_button.bookmark_page", type: "bool" },
-    { id: "pref.browser.homepage.disable_button.restore_default", name: "pref.browser.homepage.disable_button.restore_default", type: "bool" },
-    { id: "browser.privatebrowsing.autostart", name: "browser.privatebrowsing.autostart", type: "bool" },
+    { category: "main", id: "pref.browser.homepage.disable_button.current_page", name: "pref.browser.homepage.disable_button.current_page", type: "bool" },
+    { category: "main", id: "pref.browser.homepage.disable_button.bookmark_page", name: "pref.browser.homepage.disable_button.bookmark_page", type: "bool" },
+    { category: "main", id: "pref.browser.homepage.disable_button.restore_default", name: "pref.browser.homepage.disable_button.restore_default", type: "bool" },
+    { category: "main", id: "browser.privatebrowsing.autostart", name: "browser.privatebrowsing.autostart", type: "bool" },
 
     /* Search Engine */
-    { id: "browser.search.suggest.enabled", name: "browser.search.suggest.enabled", type: "bool" },
-    { id: "browser.urlbar.suggest.searches", name: "browser.urlbar.suggest.searches", type: "bool" },
-    { id: "browser.search.hiddenOneOffs", name: "browser.search.hiddenOneOffs", type: "unichar" },
+    { category: "main", id: "browser.search.suggest.enabled", name: "browser.search.suggest.enabled", type: "bool" },
+    { category: "main", id: "browser.urlbar.suggest.searches", name: "browser.urlbar.suggest.searches", type: "bool" },
+    { category: "main", id: "browser.search.hiddenOneOffs", name: "browser.search.hiddenOneOffs", type: "unichar" },
 
     /* Downloads */
-    { id: "browser.download.useDownloadDir", name: "browser.download.useDownloadDir", type: "bool" },
-    { id: "browser.download.folderList", name: "browser.download.folderList", type: "int" },
-    { id: "browser.download.dir", name: "browser.download.dir", type: "file" },
+    { category: "main", id: "browser.download.useDownloadDir", name: "browser.download.useDownloadDir", type: "bool" },
+    { category: "main", id: "browser.download.folderList", name: "browser.download.folderList", type: "int" },
+    { category: "main", id: "browser.download.dir", name: "browser.download.dir", type: "file" },
 
     /* Tab preferences
     Preferences:
@@ -84,21 +80,21 @@ const mainPreferences = window.mainPreferences = new Preferences({
     - true if tabs are to be shown in the Windows 7 taskbar
     */
 
-    { id: "browser.link.open_newwindow", name: "browser.link.open_newwindow", type: "int" },
-    { id: "browser.tabs.loadInBackground", name: "browser.tabs.loadInBackground", type: "bool", inverted: true },
-    { id: "browser.tabs.warnOnClose", name: "browser.tabs.warnOnClose", type: "bool" },
-    { id: "browser.tabs.warnOnOpen", name: "browser.tabs.warnOnOpen", type: "bool" },
-    { id: "browser.sessionstore.restore_on_demand", name: "browser.sessionstore.restore_on_demand", type: "bool" },
+    { category: "main", id: "browser.link.open_newwindow", name: "browser.link.open_newwindow", type: "int" },
+    { category: "main", id: "browser.tabs.loadInBackground", name: "browser.tabs.loadInBackground", type: "bool", inverted: true },
+    { category: "main", id: "browser.tabs.warnOnClose", name: "browser.tabs.warnOnClose", type: "bool" },
+    { category: "main", id: "browser.tabs.warnOnOpen", name: "browser.tabs.warnOnOpen", type: "bool" },
+    { category: "main", id: "browser.sessionstore.restore_on_demand", name: "browser.sessionstore.restore_on_demand", type: "bool" },
 #ifdef XP_WIN
-    { id: "browser.taskbar.previews.enable", name: "browser.taskbar.previews.enable", type: "bool" },
+    { category: "main", id: "browser.taskbar.previews.enable", name: "browser.taskbar.previews.enable", type: "bool" },
 #endif
-    { id: "browser.ctrlTab.previews", name: "browser.ctrlTab.previews", type: "bool" },
+    { category: "main", id: "browser.ctrlTab.previews", name: "browser.ctrlTab.previews", type: "bool" },
 
     /* Fonts */
-    { id: "font.language.group", name: "font.language.group", type: "wstring" },
+    { category: "main", id: "font.language.group", name: "font.language.group", type: "wstring" },
 
     /* Languages */
-    { id: "browser.translation.detectLanguage", name: "browser.translation.detectLanguage", type: "bool" },
+    { category: "main", id: "browser.translation.detectLanguage", name: "browser.translation.detectLanguage", type: "bool" },
 
     /* General tab */
 
@@ -110,11 +106,11 @@ const mainPreferences = window.mainPreferences = new Preferences({
        - when set to true, typing outside text areas and input boxes will
          automatically start searching for what's typed within the current
          document; when set to false, no search action happens */
-    { id: "accessibility.browsewithcaret", name: "accessibility.browsewithcaret", type: "bool" },
-    { id: "accessibility.typeaheadfind", name: "accessibility.typeaheadfind", type: "bool" },
-    { id: "accessibility.blockautorefresh", name: "accessibility.blockautorefresh", type: "bool" },
+    { category: "main", id: "accessibility.browsewithcaret", name: "accessibility.browsewithcaret", type: "bool" },
+    { category: "main", id: "accessibility.typeaheadfind", name: "accessibility.typeaheadfind", type: "bool" },
+    { category: "main", id: "accessibility.blockautorefresh", name: "accessibility.blockautorefresh", type: "bool" },
 #ifdef XP_WIN
-    { id: "ui.osk.enabled", name: "ui.osk.enabled", type: "bool" },
+    { category: "main", id: "ui.osk.enabled", name: "ui.osk.enabled", type: "bool" },
 #endif
 
     /* Browsing
@@ -127,13 +123,13 @@ const mainPreferences = window.mainPreferences = new Preferences({
      * general.smoothScroll
        - set to true to enable finer page scrolling than line-by-line on page-up,
          page-down, and other such page movements */
-    { id: "general.autoScroll", name: "general.autoScroll", type: "bool" },
-    { id: "general.smoothScroll", name: "general.smoothScroll", type: "bool" },
-    { id: "layout.spellcheckDefault", name: "layout.spellcheckDefault", type: "int" },
-    { id: "toolkit.telemetry.enabled", name: "toolkit.telemetry.enabled", type: "bool" },
-    { id: "browser.preferences.defaultPerformanceSettings.enabled", name: "browser.preferences.defaultPerformanceSettings.enabled", type: "bool" },
-    { id: "dom.ipc.processCount", name: "dom.ipc.processCount", type: "int" },
-    { id: "layers.acceleration.disabled", name: "layers.acceleration.disabled", type: "bool", inverted: true },
+    { category: "main", id: "general.autoScroll", name: "general.autoScroll", type: "bool" },
+    { category: "main", id: "general.smoothScroll", name: "general.smoothScroll", type: "bool" },
+    { category: "main", id: "layout.spellcheckDefault", name: "layout.spellcheckDefault", type: "int" },
+    { category: "main", id: "toolkit.telemetry.enabled", name: "toolkit.telemetry.enabled", type: "bool" },
+    { category: "main", id: "browser.preferences.defaultPerformanceSettings.enabled", name: "browser.preferences.defaultPerformanceSettings.enabled", type: "bool" },
+    { category: "main", id: "dom.ipc.processCount", name: "dom.ipc.processCount", type: "int" },
+    { category: "main", id: "layers.acceleration.disabled", name: "layers.acceleration.disabled", type: "bool", inverted: true },
   ],
 });
 
diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index a0a82447dcf9..3af8177296e2 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -346,15 +346,8 @@ function confirmRestartPrompt(aRestartToEnable, aDefaultButtonIndex,
   return buttonIndex;
 }
 
-function Preferences({ id, hidden, dataCategory, preferences }) {
+function Preferences() {
   EventEmitter.call(this);
-
-  this.id = id;
-  this.hidden = hidden;
-  this.dataCategory = dataCategory;
-  this.preferences = preferences.map(v => new Preference(Object.assign(v, { preferences: this })));
-
-  this._constructAfterChildren();
 }
 
 Preferences.prototype = Object.create(EventEmitter.prototype);
@@ -388,12 +381,28 @@ Object.assign(Preferences.prototype, {
     return null;
   },
 
+  getAll(category) {
+    let prefs = [];
+    for (let i = 0; i < this.preferences.length; i++) {
+      if (this.preferences[i].category === category) {
+        prefs.push(this.preferences[i]);
+      }
+    }
+    return prefs;
+  },
+
   add({ id, name, type }) {
     let pref = new Preference({ preferences: this, id, name, type });
     this.preferences.push(pref);
     return pref;
   },
 
+  addAll({ preferences }) {
+    this.preferences = this.preferences.concat(preferences.map(v => new Preference(Object.assign(v, { preferences: this }))));
+    // XXX Only construct the newly added children.
+    this._constructAfterChildren();
+  },
+
   // XXX Make the constructor do this itself, since it knows when it has
   // constructed all the children.
   _constructAfterChildren() {
@@ -843,3 +852,5 @@ Object.defineProperties(Preference.prototype, {
   },
 
 });
+
+const mainPreferences = window.mainPreferences = new Preferences();

From 3aac2d2c2fb9cc8a23528e5b8a879cf47d0f213d Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Mon, 26 Jun 2017 23:16:33 -0700
Subject: [PATCH 015/106] move privacy prefs to JS object

---
 .../components/preferences/in-content-new/jar.mn   |   2 +-
 .../preferences/in-content-new/privacy.js          | 164 ++++++++++++++++-----
 .../preferences/in-content-new/privacy.xul         | 163 --------------------
 .../tests/browser_sanitizeOnShutdown_prefLocked.js |   2 +-
 .../tests/privacypane_tests_perwindow.js           |   4 +-
 5 files changed, 130 insertions(+), 205 deletions(-)

diff --git a/browser/components/preferences/in-content-new/jar.mn b/browser/components/preferences/in-content-new/jar.mn
index 26ad82d298e5..15774dc8fabe 100644
--- a/browser/components/preferences/in-content-new/jar.mn
+++ b/browser/components/preferences/in-content-new/jar.mn
@@ -8,7 +8,7 @@ browser.jar:
    content/browser/preferences/in-content-new/subdialogs.js
 
 *  content/browser/preferences/in-content-new/main.js
-   content/browser/preferences/in-content-new/privacy.js
+*  content/browser/preferences/in-content-new/privacy.js
    content/browser/preferences/in-content-new/containers.js
    content/browser/preferences/in-content-new/advanced.js
    content/browser/preferences/in-content-new/applications.js
diff --git a/browser/components/preferences/in-content-new/privacy.js b/browser/components/preferences/in-content-new/privacy.js
index 9b70b4375614..5b42f754be64 100644
--- a/browser/components/preferences/in-content-new/privacy.js
+++ b/browser/components/preferences/in-content-new/privacy.js
@@ -33,6 +33,94 @@ XPCOMUtils.defineLazyGetter(this, "AlertsServiceDND", function() {
   }
 });
 
+
+mainPreferences.addAll({
+  preferences: [
+  // Tracking
+  { category: "privacy", id: "privacy.trackingprotection.enabled", name: "privacy.trackingprotection.enabled", type: "bool" },
+  { category: "privacy", id: "privacy.trackingprotection.pbmode.enabled", name: "privacy.trackingprotection.pbmode.enabled", type: "bool" },
+
+  // XXX button prefs
+  { category: "privacy", id: "pref.privacy.disable_button.cookie_exceptions", name: "pref.privacy.disable_button.cookie_exceptions", type: "bool" },
+  { category: "privacy", id: "pref.privacy.disable_button.view_cookies", name: "pref.privacy.disable_button.view_cookies", type: "bool" },
+  { category: "privacy", id: "pref.privacy.disable_button.change_blocklist", name: "pref.privacy.disable_button.change_blocklist", type: "bool" },
+  { category: "privacy", id: "pref.privacy.disable_button.tracking_protection_exceptions", name: "pref.privacy.disable_button.tracking_protection_exceptions", type: "bool" },
+
+  // Location Bar
+  { category: "privacy", id: "browser.urlbar.autocomplete.enabled", name: "browser.urlbar.autocomplete.enabled", type: "bool" },
+  { category: "privacy", id: "browser.urlbar.suggest.bookmark", name: "browser.urlbar.suggest.bookmark", type: "bool" },
+  { category: "privacy", id: "browser.urlbar.suggest.history", name: "browser.urlbar.suggest.history", type: "bool" },
+  { category: "privacy", id: "browser.urlbar.suggest.openpage", name: "browser.urlbar.suggest.openpage", type: "bool" },
+
+  // History
+  { category: "privacy", id: "places.history.enabled", name: "places.history.enabled", type: "bool" },
+  { category: "privacy", id: "browser.formfill.enable", name: "browser.formfill.enable", type: "bool" },
+  { category: "privacy", id: "privacy.history.custom", name: "privacy.history.custom", type: "bool" },
+  // Cookies
+  { category: "privacy", id: "network.cookie.cookieBehavior", name: "network.cookie.cookieBehavior", type: "int" },
+  { category: "privacy", id: "network.cookie.lifetimePolicy", name: "network.cookie.lifetimePolicy", type: "int" },
+  { category: "privacy", id: "network.cookie.blockFutureCookies", name: "network.cookie.blockFutureCookies", type: "bool" },
+  // Clear Private Data
+  { category: "privacy", id: "privacy.sanitize.sanitizeOnShutdown", name: "privacy.sanitize.sanitizeOnShutdown", type: "bool" },
+  { category: "privacy", id: "privacy.sanitize.timeSpan", name: "privacy.sanitize.timeSpan", type: "int" },
+  // Private Browsing
+  { category: "privacy", id: "browser.privatebrowsing.autostart", name: "browser.privatebrowsing.autostart", type: "bool" },
+
+  // DRM content
+  { category: "privacy", id: "media.eme.enabled", name: "media.eme.enabled", type: "bool" },
+
+  // Popups
+  { category: "privacy", id: "dom.disable_open_during_load", name: "dom.disable_open_during_load", type: "bool" },
+  // Passwords
+  { category: "privacy", id: "signon.rememberSignons", name: "signon.rememberSignons", type: "bool" },
+
+  // XXX buttons
+  { category: "privacy", id: "pref.privacy.disable_button.view_passwords", name: "pref.privacy.disable_button.view_passwords", type: "bool" },
+  { category: "privacy", id: "pref.privacy.disable_button.view_passwords_exceptions", name: "pref.privacy.disable_button.view_passwords_exceptions", type: "bool" },
+
+  /* Certificates tab
+   * security.default_personal_cert
+   *   - a string:
+   *       "Select Automatically"   select a certificate automatically when a site
+   *                                requests one
+   *       "Ask Every Time"         present a dialog to the user so he can select
+   *                                the certificate to use on a site which
+   *                                requests one
+   */
+  { category: "privacy", id: "security.default_personal_cert", name: "security.default_personal_cert", type: "string" },
+
+  { category: "privacy", id: "security.disable_button.openCertManager", name: "security.disable_button.openCertManager", type: "bool" },
+
+  { category: "privacy", id: "security.disable_button.openDeviceManager", name: "security.disable_button.openDeviceManager", type: "bool" },
+
+  { category: "privacy", id: "security.OCSP.enabled", name: "security.OCSP.enabled", type: "int" },
+
+  // Add-ons, malware, phishing
+  { category: "privacy", id: "xpinstall.whitelist.required", name: "xpinstall.whitelist.required", type: "bool" },
+
+  { category: "privacy", id: "browser.safebrowsing.malware.enabled", name: "browser.safebrowsing.malware.enabled", type: "bool" },
+  { category: "privacy", id: "browser.safebrowsing.phishing.enabled", name: "browser.safebrowsing.phishing.enabled", type: "bool" },
+
+  { category: "privacy", id: "browser.safebrowsing.downloads.enabled", name: "browser.safebrowsing.downloads.enabled", type: "bool" },
+
+  { category: "privacy", id: "urlclassifier.malwareTable", name: "urlclassifier.malwareTable", type: "string" },
+
+  { category: "privacy", id: "browser.safebrowsing.downloads.remote.block_potentially_unwanted", name: "browser.safebrowsing.downloads.remote.block_potentially_unwanted", type: "bool" },
+  { category: "privacy", id: "browser.safebrowsing.downloads.remote.block_uncommon", name: "browser.safebrowsing.downloads.remote.block_uncommon", type: "bool" },
+
+  // Network tab
+  { category: "privacy", id: "browser.cache.disk.capacity", name: "browser.cache.disk.capacity", type: "int" },
+  { category: "privacy", id: "browser.offline-apps.notify", name: "browser.offline-apps.notify", type: "bool" },
+
+  { category: "privacy", id: "browser.cache.disk.smart_size.enabled", name: "browser.cache.disk.smart_size.enabled", type: "bool", inverted: "true" },
+
+  // Data Choices tab
+#ifdef MOZ_CRASHREPORTER
+  { category: "privacy", id: "browser.crashReports.unsubmittedCheck.autoSubmit", name: "browser.crashReports.unsubmittedCheck.autoSubmit", type: "bool" },
+#endif
+
+]});
+
 var gPrivacyPane = {
   _pane: null,
 
@@ -167,9 +255,9 @@ var gPrivacyPane = {
     this._initAutocomplete();
     this._initBrowserContainers();
 
-    setEventListener("privacy.sanitize.sanitizeOnShutdown", "change",
+    mainPreferences.get("privacy.sanitize.sanitizeOnShutdown").on("change",
                      gPrivacyPane._updateSanitizeSettingsButton);
-    setEventListener("browser.privatebrowsing.autostart", "change",
+    mainPreferences.get("browser.privatebrowsing.autostart").on("change",
                      gPrivacyPane.updatePrivacyMicroControls);
     setEventListener("historyMode", "command", function() {
       gPrivacyPane.updateHistoryModePane();
@@ -377,8 +465,8 @@ var gPrivacyPane = {
    * Selects the right item of the Tracking Protection radiogroup.
    */
   trackingProtectionReadPrefs() {
-    let enabledPref = document.getElementById("privacy.trackingprotection.enabled");
-    let pbmPref = document.getElementById("privacy.trackingprotection.pbmode.enabled");
+    let enabledPref = mainPreferences.get("privacy.trackingprotection.enabled");
+    let pbmPref = mainPreferences.get("privacy.trackingprotection.pbmode.enabled");
     let radiogroup = document.getElementById("trackingProtectionRadioGroup");
 
     // Global enable takes precedence over enabled in Private Browsing.
@@ -395,8 +483,8 @@ var gPrivacyPane = {
    * Sets the pref values based on the selected item of the radiogroup.
    */
   trackingProtectionWritePrefs() {
-    let enabledPref = document.getElementById("privacy.trackingprotection.enabled");
-    let pbmPref = document.getElementById("privacy.trackingprotection.pbmode.enabled");
+    let enabledPref = mainPreferences.get("privacy.trackingprotection.enabled");
+    let pbmPref = mainPreferences.get("privacy.trackingprotection.pbmode.enabled");
     let radiogroup = document.getElementById("trackingProtectionRadioGroup");
 
     switch (radiogroup.value) {
@@ -462,7 +550,7 @@ var gPrivacyPane = {
    */
   _checkHistoryValues(aPrefs) {
     for (let pref of Object.keys(aPrefs)) {
-      if (document.getElementById(pref).value != aPrefs[pref])
+      if (mainPreferences.get(pref).value != aPrefs[pref])
         return false;
     }
     return true;
@@ -473,7 +561,7 @@ var gPrivacyPane = {
    */
   initializeHistoryMode() {
     let mode;
-    let getVal = aPref => document.getElementById(aPref).value;
+    let getVal = aPref => mainPreferences.get(aPref).value;
 
     if (getVal("privacy.history.custom"))
       mode = "custom";
@@ -505,7 +593,7 @@ var gPrivacyPane = {
       break;
     }
     document.getElementById("historyPane").selectedIndex = selectedIndex;
-    document.getElementById("privacy.history.custom").value = selectedIndex == 2;
+    mainPreferences.get("privacy.history.custom").value = selectedIndex == 2;
   },
 
   /**
@@ -513,25 +601,25 @@ var gPrivacyPane = {
    * micro-management prefs based on the history mode menulist
    */
   updateHistoryModePrefs() {
-    let pref = document.getElementById("browser.privatebrowsing.autostart");
+    let pref = mainPreferences.get("browser.privatebrowsing.autostart");
     switch (document.getElementById("historyMode").value) {
     case "remember":
       if (pref.value)
         pref.value = false;
 
       // select the remember history option if needed
-      document.getElementById("places.history.enabled").value = true;
+      mainPreferences.get("places.history.enabled").value = true;
 
       // select the remember forms history option
-      document.getElementById("browser.formfill.enable").value = true;
+      mainPreferences.get("browser.formfill.enable").value = true;
 
       // select the allow cookies option
-      document.getElementById("network.cookie.cookieBehavior").value = 0;
+      mainPreferences.get("network.cookie.cookieBehavior").value = 0;
       // select the cookie lifetime policy option
-      document.getElementById("network.cookie.lifetimePolicy").value = 0;
+      mainPreferences.get("network.cookie.lifetimePolicy").value = 0;
 
       // select the clear on close option
-      document.getElementById("privacy.sanitize.sanitizeOnShutdown").value = false;
+      mainPreferences.get("privacy.sanitize.sanitizeOnShutdown").value = false;
       break;
     case "dontremember":
       if (!pref.value)
@@ -559,13 +647,13 @@ var gPrivacyPane = {
           }
         }
 
-        let preference = preferenceId ? document.getElementById(preferenceId) : {};
+        let preference = preferenceId ? mainPreferences.get(preferenceId) : {};
         control.disabled = disabled || preference.locked;
       });
 
       // adjust the cookie controls status
       this.readAcceptCookies();
-      let lifetimePolicy = document.getElementById("network.cookie.lifetimePolicy").value;
+      let lifetimePolicy = mainPreferences.get("network.cookie.lifetimePolicy").value;
       if (lifetimePolicy != Ci.nsICookieService.ACCEPT_NORMALLY &&
           lifetimePolicy != Ci.nsICookieService.ACCEPT_SESSION &&
           lifetimePolicy != Ci.nsICookieService.ACCEPT_FOR_N_DAYS) {
@@ -575,13 +663,13 @@ var gPrivacyPane = {
 
       // adjust the checked state of the sanitizeOnShutdown checkbox
       document.getElementById("alwaysClear").checked = disabled ? false :
-        document.getElementById("privacy.sanitize.sanitizeOnShutdown").value;
+        mainPreferences.get("privacy.sanitize.sanitizeOnShutdown").value;
 
       // adjust the checked state of the remember history checkboxes
       document.getElementById("rememberHistory").checked = disabled ? false :
-        document.getElementById("places.history.enabled").value;
+        mainPreferences.get("places.history.enabled").value;
       document.getElementById("rememberForms").checked = disabled ? false :
-        document.getElementById("browser.formfill.enable").value;
+        mainPreferences.get("browser.formfill.enable").value;
 
       if (!disabled) {
         // adjust the Settings button for sanitizeOnShutdown
@@ -607,7 +695,7 @@ var gPrivacyPane = {
   updateAutostart() {
       let mode = document.getElementById("historyMode");
       let autoStart = document.getElementById("privateBrowsingAutoStart");
-      let pref = document.getElementById("browser.privatebrowsing.autostart");
+      let pref = mainPreferences.get("browser.privatebrowsing.autostart");
       if ((mode.value == "custom" && this._lastCheckState == autoStart.checked) ||
           (mode.value == "remember" && !this._lastCheckState) ||
           (mode.value == "dontremember" && this._lastCheckState)) {
@@ -726,7 +814,7 @@ var gPrivacyPane = {
    * if cookies are enabled.
    */
   readAcceptCookies() {
-    var pref = document.getElementById("network.cookie.cookieBehavior");
+    var pref = mainPreferences.get("network.cookie.cookieBehavior");
     var acceptThirdPartyLabel = document.getElementById("acceptThirdPartyLabel");
     var acceptThirdPartyMenu = document.getElementById("acceptThirdPartyMenu");
     var keepUntil = document.getElementById("keepUntil");
@@ -760,7 +848,7 @@ var gPrivacyPane = {
    * Converts between network.cookie.cookieBehavior and the third-party cookie UI
    */
   readAcceptThirdPartyCookies() {
-    var pref = document.getElementById("network.cookie.cookieBehavior");
+    var pref = mainPreferences.get("network.cookie.cookieBehavior");
     switch (pref.value) {
       case 0:
         return "always";
@@ -858,7 +946,7 @@ var gPrivacyPane = {
    */
   _updateSanitizeSettingsButton() {
     var settingsButton = document.getElementById("clearDataSettings");
-    var sanitizeOnShutdownPref = document.getElementById("privacy.sanitize.sanitizeOnShutdown");
+    var sanitizeOnShutdownPref = mainPreferences.get("privacy.sanitize.sanitizeOnShutdown");
 
     settingsButton.disabled = !sanitizeOnShutdownPref.value;
    },
@@ -876,7 +964,7 @@ var gPrivacyPane = {
     * Enables/disables the Settings button used to configure containers
     */
    readBrowserContainersCheckbox() {
-     var pref = document.getElementById("privacy.userContext.enabled");
+     var pref = mainPreferences.get("privacy.userContext.enabled");
      var settings = document.getElementById("browserContainersSettings");
 
      settings.disabled = !pref.value;
@@ -933,7 +1021,7 @@ var gPrivacyPane = {
    */
   updateButtons(aButtonID, aPreferenceID) {
     var button = document.getElementById(aButtonID);
-    var preference = document.getElementById(aPreferenceID);
+    var preference = mainPreferences.get(aPreferenceID);
     button.disabled = preference.value != true;
     return undefined;
   },
@@ -1053,7 +1141,7 @@ var gPrivacyPane = {
    * Browsing mode, the "Remember passwords" UI is useless, so we disable it.
    */
   readSavePasswords() {
-    var pref = document.getElementById("signon.rememberSignons");
+    var pref = mainPreferences.get("signon.rememberSignons");
     var excepts = document.getElementById("passwordExceptions");
 
     if (PrivateBrowsingUtils.permanentPrivateBrowsing) {
@@ -1071,7 +1159,7 @@ var gPrivacyPane = {
    * or not add-on installation warnings are displayed.
    */
   readWarnAddonInstall() {
-    var warn = document.getElementById("xpinstall.whitelist.required");
+    var warn = mainPreferences.get("xpinstall.whitelist.required");
     var exceptions = document.getElementById("addonExceptions");
 
     exceptions.disabled = !warn.value;
@@ -1085,14 +1173,14 @@ var gPrivacyPane = {
     let blockDownloads = document.getElementById("blockDownloads");
     let blockUncommonUnwanted = document.getElementById("blockUncommonUnwanted");
 
-    let safeBrowsingPhishingPref = document.getElementById("browser.safebrowsing.phishing.enabled");
-    let safeBrowsingMalwarePref = document.getElementById("browser.safebrowsing.malware.enabled");
+    let safeBrowsingPhishingPref = mainPreferences.get("browser.safebrowsing.phishing.enabled");
+    let safeBrowsingMalwarePref = mainPreferences.get("browser.safebrowsing.malware.enabled");
 
-    let blockDownloadsPref = document.getElementById("browser.safebrowsing.downloads.enabled");
+    let blockDownloadsPref = mainPreferences.get("browser.safebrowsing.downloads.enabled");
     let malwareTable = document.getElementById("urlclassifier.malwareTable");
 
-    let blockUnwantedPref = document.getElementById("browser.safebrowsing.downloads.remote.block_potentially_unwanted");
-    let blockUncommonPref = document.getElementById("browser.safebrowsing.downloads.remote.block_uncommon");
+    let blockUnwantedPref = mainPreferences.get("browser.safebrowsing.downloads.remote.block_potentially_unwanted");
+    let blockUncommonPref = mainPreferences.get("browser.safebrowsing.downloads.remote.block_uncommon");
 
     enableSafeBrowsing.addEventListener("command", function() {
       safeBrowsingPhishingPref.value = enableSafeBrowsing.checked;
@@ -1195,7 +1283,7 @@ var gPrivacyPane = {
    * checked. Otherwise, it should be unchecked.
    */
   readEnableOCSP() {
-    var preference = document.getElementById("security.OCSP.enabled");
+    var preference = mainPreferences.get("security.OCSP.enabled");
     // This is the case if the preference is the default value.
     if (preference.value === undefined) {
       return true;
@@ -1346,7 +1434,7 @@ var gPrivacyPane = {
   readSmartSizeEnabled() {
     // The smart_size.enabled preference element is inverted="true", so its
     // value is the opposite of the actual pref value
-    var disabled = document.getElementById("browser.cache.disk.smart_size.enabled").value;
+    var disabled = mainPreferences.get("browser.cache.disk.smart_size.enabled").value;
     this.updateCacheSizeUI(!disabled);
   },
 
@@ -1362,7 +1450,7 @@ var gPrivacyPane = {
    */
   updateCacheSizeInputField() {
     let cacheSizeElem = document.getElementById("cacheSize");
-    let cachePref = document.getElementById("browser.cache.disk.capacity");
+    let cachePref = mainPreferences.get("browser.cache.disk.capacity");
     cacheSizeElem.value = cachePref.value / 1024;
     if (cachePref.locked)
       cacheSizeElem.disabled = true;
@@ -1376,7 +1464,7 @@ var gPrivacyPane = {
    */
   updateCacheSizePref() {
     let cacheSizeElem = document.getElementById("cacheSize");
-    let cachePref = document.getElementById("browser.cache.disk.capacity");
+    let cachePref = mainPreferences.get("browser.cache.disk.capacity");
     // Converts the cache size as specified in UI (in MB) to KB.
     let intValue = parseInt(cacheSizeElem.value, 10);
     cachePref.value = isNaN(intValue) ? 0 : intValue * 1024;
@@ -1518,7 +1606,7 @@ var gPrivacyPane = {
   },
 
   readOfflineNotify() {
-    var pref = document.getElementById("browser.offline-apps.notify");
+    var pref = mainPreferences.get("browser.offline-apps.notify");
     var button = document.getElementById("offlineNotifyExceptions");
     button.disabled = !pref.value;
     return pref.value;
diff --git a/browser/components/preferences/in-content-new/privacy.xul b/browser/components/preferences/in-content-new/privacy.xul
index 4a66bf097d56..c58ee31c11ea 100644
--- a/browser/components/preferences/in-content-new/privacy.xul
+++ b/browser/components/preferences/in-content-new/privacy.xul
@@ -7,169 +7,6 @@
 <script type="application/javascript"
         src="chrome://browser/content/preferences/in-content-new/privacy.js"/>
 
-<preferences id="privacyPreferences" hidden="true" data-category="panePrivacy">
-
-  <!-- Tracking -->
-  <preference id="privacy.trackingprotection.enabled"
-              name="privacy.trackingprotection.enabled"
-              type="bool"/>
-  <preference id="privacy.trackingprotection.pbmode.enabled"
-              name="privacy.trackingprotection.pbmode.enabled"
-              type="bool"/>
-
-  <!-- XXX button prefs -->
-  <preference id="pref.privacy.disable_button.cookie_exceptions"
-              name="pref.privacy.disable_button.cookie_exceptions"
-              type="bool"/>
-  <preference id="pref.privacy.disable_button.view_cookies"
-              name="pref.privacy.disable_button.view_cookies"
-              type="bool"/>
-  <preference id="pref.privacy.disable_button.change_blocklist"
-              name="pref.privacy.disable_button.change_blocklist"
-              type="bool"/>
-  <preference id="pref.privacy.disable_button.tracking_protection_exceptions"
-              name="pref.privacy.disable_button.tracking_protection_exceptions"
-              type="bool"/>
-
-  <!-- Location Bar -->
-  <preference id="browser.urlbar.autocomplete.enabled"
-              name="browser.urlbar.autocomplete.enabled"
-              type="bool"/>
-  <preference id="browser.urlbar.suggest.bookmark"
-              name="browser.urlbar.suggest.bookmark"
-              type="bool"/>
-  <preference id="browser.urlbar.suggest.history"
-              name="browser.urlbar.suggest.history"
-              type="bool"/>
-  <preference id="browser.urlbar.suggest.openpage"
-              name="browser.urlbar.suggest.openpage"
-              type="bool"/>
-
-  <!-- History -->
-  <preference id="places.history.enabled"
-              name="places.history.enabled"
-              type="bool"/>
-  <preference id="browser.formfill.enable"
-              name="browser.formfill.enable"
-              type="bool"/>
-  <preference id="privacy.history.custom"
-              name="privacy.history.custom"
-              type="bool"/>
-  <!-- Cookies -->
-  <preference id="network.cookie.cookieBehavior"
-              name="network.cookie.cookieBehavior"
-              type="int"/>
-  <preference id="network.cookie.lifetimePolicy"
-              name="network.cookie.lifetimePolicy"
-              type="int"/>
-  <preference id="network.cookie.blockFutureCookies"
-              name="network.cookie.blockFutureCookies"
-              type="bool"/>
-  <!-- Clear Private Data -->
-  <preference id="privacy.sanitize.sanitizeOnShutdown"
-              name="privacy.sanitize.sanitizeOnShutdown"
-              type="bool"/>
-  <preference id="privacy.sanitize.timeSpan"
-              name="privacy.sanitize.timeSpan"
-              type="int"/>
-  <!-- Private Browsing -->
-  <preference id="browser.privatebrowsing.autostart"
-              name="browser.privatebrowsing.autostart"
-              type="bool"/>
-
-  <!-- DRM content -->
-  <preference id="media.eme.enabled"
-              name="media.eme.enabled"
-              type="bool"/>
-
-  <!-- Popups -->
-  <preference id="dom.disable_open_during_load"
-              name="dom.disable_open_during_load"
-              type="bool"/>
-  <!-- Passwords -->
-  <preference id="signon.rememberSignons" name="signon.rememberSignons" type="bool"/>
-
-  <!-- XXX buttons -->
-  <preference id="pref.privacy.disable_button.view_passwords"
-              name="pref.privacy.disable_button.view_passwords"
-              type="bool"/>
-  <preference id="pref.privacy.disable_button.view_passwords_exceptions"
-              name="pref.privacy.disable_button.view_passwords_exceptions"
-              type="bool"/>
-
-  <!-- Certificates tab
-   * security.default_personal_cert
-     - a string:
-         "Select Automatically"   select a certificate automatically when a site
-                                  requests one
-         "Ask Every Time"         present a dialog to the user so he can select
-                                  the certificate to use on a site which
-                                  requests one -->
-  <preference id="security.default_personal_cert"
-              name="security.default_personal_cert"
-              type="string"/>
-
-  <preference id="security.disable_button.openCertManager"
-              name="security.disable_button.openCertManager"
-              type="bool"/>
-
-  <preference id="security.disable_button.openDeviceManager"
-              name="security.disable_button.openDeviceManager"
-              type="bool"/>
-
-  <preference id="security.OCSP.enabled"
-              name="security.OCSP.enabled"
-              type="int"/>
-
-  <!-- Add-ons, malware, phishing -->
-  <preference id="xpinstall.whitelist.required"
-              name="xpinstall.whitelist.required"
-              type="bool"/>
-
-  <preference id="browser.safebrowsing.malware.enabled"
-              name="browser.safebrowsing.malware.enabled"
-              type="bool"/>
-  <preference id="browser.safebrowsing.phishing.enabled"
-              name="browser.safebrowsing.phishing.enabled"
-              type="bool"/>
-
-  <preference id="browser.safebrowsing.downloads.enabled"
-              name="browser.safebrowsing.downloads.enabled"
-              type="bool"/>
-
-  <preference id="urlclassifier.malwareTable"
-              name="urlclassifier.malwareTable"
-              type="string"/>
-
-  <preference id="browser.safebrowsing.downloads.remote.block_potentially_unwanted"
-              name="browser.safebrowsing.downloads.remote.block_potentially_unwanted"
-              type="bool"/>
-  <preference id="browser.safebrowsing.downloads.remote.block_uncommon"
-              name="browser.safebrowsing.downloads.remote.block_uncommon"
-              type="bool"/>
-
-  <!-- Network tab -->
-  <preference id="browser.cache.disk.capacity"
-              name="browser.cache.disk.capacity"
-              type="int"/>
-  <preference id="browser.offline-apps.notify"
-              name="browser.offline-apps.notify"
-              type="bool"/>
-
-  <preference id="browser.cache.disk.smart_size.enabled"
-              name="browser.cache.disk.smart_size.enabled"
-              inverted="true"
-              type="bool"/>
-
-  <!-- Data Choices tab -->
-#ifdef MOZ_CRASHREPORTER
-  <preference id="browser.crashReports.unsubmittedCheck.autoSubmit"
-              name="browser.crashReports.unsubmittedCheck.autoSubmit"
-              type="bool"/>
-#endif
-
-</preferences>
-
 <stringbundle id="bundlePreferences" src="chrome://browser/locale/preferences/preferences.properties"/>
 <stringbundle id="signonBundle" src="chrome://passwordmgr/locale/passwordmgr.properties"/>
 
diff --git a/browser/components/preferences/in-content-new/tests/browser_sanitizeOnShutdown_prefLocked.js b/browser/components/preferences/in-content-new/tests/browser_sanitizeOnShutdown_prefLocked.js
index 5332da31d28c..b1ce979d6abb 100644
--- a/browser/components/preferences/in-content-new/tests/browser_sanitizeOnShutdown_prefLocked.js
+++ b/browser/components/preferences/in-content-new/tests/browser_sanitizeOnShutdown_prefLocked.js
@@ -13,7 +13,7 @@ function testPrefStateMatchesLockedState() {
   switchToCustomHistoryMode(doc);
 
   let checkbox = doc.getElementById("alwaysClear");
-  let preference = doc.getElementById("privacy.sanitize.sanitizeOnShutdown");
+  let preference = win.mainPreferences.get("privacy.sanitize.sanitizeOnShutdown");
   is(checkbox.disabled, preference.locked, "Always Clear checkbox should be enabled when preference is not locked.");
 
   Services.prefs.clearUserPref("privacy.history.custom");
diff --git a/browser/components/preferences/in-content-new/tests/privacypane_tests_perwindow.js b/browser/components/preferences/in-content-new/tests/privacypane_tests_perwindow.js
index 21f3f68831d6..d38a881299b0 100644
--- a/browser/components/preferences/in-content-new/tests/privacypane_tests_perwindow.js
+++ b/browser/components/preferences/in-content-new/tests/privacypane_tests_perwindow.js
@@ -311,13 +311,13 @@ function test_locbar_suggestion_retention(suggestion, autocomplete) {
 const gPrefCache = new Map();
 
 function cache_preferences(win) {
-  let prefs = win.document.querySelectorAll("#privacyPreferences > preference");
+  let prefs = win.mainPreferences.getAll("privacy");
   for (let pref of prefs)
     gPrefCache.set(pref.name, pref.value);
 }
 
 function reset_preferences(win) {
-  let prefs = win.document.querySelectorAll("#privacyPreferences > preference");
+  let prefs = win.mainPreferences.getAll("privacy");
   for (let pref of prefs)
     pref.value = gPrefCache.get(pref.name);
 }

From dcdfa80add3ee4b6234b1c0366059285ec99d5c3 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Tue, 27 Jun 2017 00:07:32 -0700
Subject: [PATCH 016/106] only construct newly-added Preference objects

---
 .../components/preferences/in-content-new/preferences.js  | 15 ++++-----------
 1 file changed, 4 insertions(+), 11 deletions(-)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 3af8177296e2..061920e3bd05 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -398,16 +398,10 @@ Object.assign(Preferences.prototype, {
   },
 
   addAll({ preferences }) {
-    this.preferences = this.preferences.concat(preferences.map(v => new Preference(Object.assign(v, { preferences: this }))));
-    // XXX Only construct the newly added children.
-    this._constructAfterChildren();
-  },
-
-  // XXX Make the constructor do this itself, since it knows when it has
-  // constructed all the children.
-  _constructAfterChildren() {
-    for (let preference of this.preferences) {
-      preference.updateElements();
+    let prefs = preferences.map(v => new Preference(Object.assign(v, { preferences: this })));
+    this.preferences = this.preferences.concat(prefs);
+    for (let pref of prefs) {
+      pref.updateElements();
     }
   },
 
@@ -501,7 +495,6 @@ function Preference({ preferences, id, name, type, inverted }) {
     this._value = preference ? preference.value : this.valueFromPreferences;
   } else
     this._value = this.valueFromPreferences;
-  this.preferences._constructAfterChildren();
 }
 
 // XXX Figure out when to call this (document unload?) and do so.

From ed38981e200447e4ff1814caba5d58da93ec5f1f Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Tue, 27 Jun 2017 00:13:48 -0700
Subject: [PATCH 017/106] fix retrieval of malwareTable preference

---
 browser/components/preferences/in-content-new/privacy.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/browser/components/preferences/in-content-new/privacy.js b/browser/components/preferences/in-content-new/privacy.js
index 5b42f754be64..907beccac477 100644
--- a/browser/components/preferences/in-content-new/privacy.js
+++ b/browser/components/preferences/in-content-new/privacy.js
@@ -1177,7 +1177,7 @@ var gPrivacyPane = {
     let safeBrowsingMalwarePref = mainPreferences.get("browser.safebrowsing.malware.enabled");
 
     let blockDownloadsPref = mainPreferences.get("browser.safebrowsing.downloads.enabled");
-    let malwareTable = document.getElementById("urlclassifier.malwareTable");
+    let malwareTable = mainPreferences.get("urlclassifier.malwareTable");
 
     let blockUnwantedPref = mainPreferences.get("browser.safebrowsing.downloads.remote.block_potentially_unwanted");
     let blockUncommonPref = mainPreferences.get("browser.safebrowsing.downloads.remote.block_uncommon");

From 8b99f462f1e79218102a5582a5b0a1f361e2a01a Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Tue, 27 Jun 2017 00:29:37 -0700
Subject: [PATCH 018/106] Revert "only construct newly-added Preference
 objects"

This reverts commit dcdfa80add3ee4b6234b1c0366059285ec99d5c3.
---
 .../components/preferences/in-content-new/preferences.js  | 15 +++++++++++----
 1 file changed, 11 insertions(+), 4 deletions(-)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 061920e3bd05..3af8177296e2 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -398,10 +398,16 @@ Object.assign(Preferences.prototype, {
   },
 
   addAll({ preferences }) {
-    let prefs = preferences.map(v => new Preference(Object.assign(v, { preferences: this })));
-    this.preferences = this.preferences.concat(prefs);
-    for (let pref of prefs) {
-      pref.updateElements();
+    this.preferences = this.preferences.concat(preferences.map(v => new Preference(Object.assign(v, { preferences: this }))));
+    // XXX Only construct the newly added children.
+    this._constructAfterChildren();
+  },
+
+  // XXX Make the constructor do this itself, since it knows when it has
+  // constructed all the children.
+  _constructAfterChildren() {
+    for (let preference of this.preferences) {
+      preference.updateElements();
     }
   },
 
@@ -495,6 +501,7 @@ function Preference({ preferences, id, name, type, inverted }) {
     this._value = preference ? preference.value : this.valueFromPreferences;
   } else
     this._value = this.valueFromPreferences;
+  this.preferences._constructAfterChildren();
 }
 
 // XXX Figure out when to call this (document unload?) and do so.

From cfc228c82d6ab807e219a5df35ba04af8e7dfc83 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Tue, 27 Jun 2017 13:17:29 -0700
Subject: [PATCH 019/106] segregate privacy prefs into their own Preferences
 object

---
 .../preferences/in-content-new/preferences.js      | 20 +++++-
 .../preferences/in-content-new/privacy.js          | 81 +++++++++++-----------
 .../tests/browser_sanitizeOnShutdown_prefLocked.js |  2 +-
 .../tests/privacypane_tests_perwindow.js           |  4 +-
 toolkit/content/widgets/preferences.xml            |  6 +-
 5 files changed, 64 insertions(+), 49 deletions(-)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 3af8177296e2..2bded4083a5b 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -346,9 +346,20 @@ function confirmRestartPrompt(aRestartToEnable, aDefaultButtonIndex,
   return buttonIndex;
 }
 
-function Preferences() {
+window.Preferences = function Preferences() {
   EventEmitter.call(this);
-}
+};
+
+Preferences.all = [];
+Preferences.get = function(id) {
+  // Implement a hash to optimize this query.
+  for (let i = 0; i < this.all.length; i++) {
+    if (this.all[i].id === id) {
+      return this.all[i];
+    }
+  }
+  return null;
+};
 
 Preferences.prototype = Object.create(EventEmitter.prototype);
 
@@ -394,11 +405,14 @@ Object.assign(Preferences.prototype, {
   add({ id, name, type }) {
     let pref = new Preference({ preferences: this, id, name, type });
     this.preferences.push(pref);
+    Preferences.all.push(pref);
     return pref;
   },
 
   addAll({ preferences }) {
-    this.preferences = this.preferences.concat(preferences.map(v => new Preference(Object.assign(v, { preferences: this }))));
+    let prefs = preferences.map(v => new Preference(Object.assign(v, { preferences: this })));
+    this.preferences = this.preferences.concat(prefs);
+    Preferences.all = Preferences.all.concat(prefs);
     // XXX Only construct the newly added children.
     this._constructAfterChildren();
   },
diff --git a/browser/components/preferences/in-content-new/privacy.js b/browser/components/preferences/in-content-new/privacy.js
index 907beccac477..62239885e681 100644
--- a/browser/components/preferences/in-content-new/privacy.js
+++ b/browser/components/preferences/in-content-new/privacy.js
@@ -33,8 +33,9 @@ XPCOMUtils.defineLazyGetter(this, "AlertsServiceDND", function() {
   }
 });
 
+const privacyPreferences = window.privacyPreferences = new Preferences();
 
-mainPreferences.addAll({
+privacyPreferences.addAll({
   preferences: [
   // Tracking
   { category: "privacy", id: "privacy.trackingprotection.enabled", name: "privacy.trackingprotection.enabled", type: "bool" },
@@ -255,9 +256,9 @@ var gPrivacyPane = {
     this._initAutocomplete();
     this._initBrowserContainers();
 
-    mainPreferences.get("privacy.sanitize.sanitizeOnShutdown").on("change",
+    privacyPreferences.get("privacy.sanitize.sanitizeOnShutdown").on("change",
                      gPrivacyPane._updateSanitizeSettingsButton);
-    mainPreferences.get("browser.privatebrowsing.autostart").on("change",
+    privacyPreferences.get("browser.privatebrowsing.autostart").on("change",
                      gPrivacyPane.updatePrivacyMicroControls);
     setEventListener("historyMode", "command", function() {
       gPrivacyPane.updateHistoryModePane();
@@ -465,8 +466,8 @@ var gPrivacyPane = {
    * Selects the right item of the Tracking Protection radiogroup.
    */
   trackingProtectionReadPrefs() {
-    let enabledPref = mainPreferences.get("privacy.trackingprotection.enabled");
-    let pbmPref = mainPreferences.get("privacy.trackingprotection.pbmode.enabled");
+    let enabledPref = privacyPreferences.get("privacy.trackingprotection.enabled");
+    let pbmPref = privacyPreferences.get("privacy.trackingprotection.pbmode.enabled");
     let radiogroup = document.getElementById("trackingProtectionRadioGroup");
 
     // Global enable takes precedence over enabled in Private Browsing.
@@ -483,8 +484,8 @@ var gPrivacyPane = {
    * Sets the pref values based on the selected item of the radiogroup.
    */
   trackingProtectionWritePrefs() {
-    let enabledPref = mainPreferences.get("privacy.trackingprotection.enabled");
-    let pbmPref = mainPreferences.get("privacy.trackingprotection.pbmode.enabled");
+    let enabledPref = privacyPreferences.get("privacy.trackingprotection.enabled");
+    let pbmPref = privacyPreferences.get("privacy.trackingprotection.pbmode.enabled");
     let radiogroup = document.getElementById("trackingProtectionRadioGroup");
 
     switch (radiogroup.value) {
@@ -550,7 +551,7 @@ var gPrivacyPane = {
    */
   _checkHistoryValues(aPrefs) {
     for (let pref of Object.keys(aPrefs)) {
-      if (mainPreferences.get(pref).value != aPrefs[pref])
+      if (privacyPreferences.get(pref).value != aPrefs[pref])
         return false;
     }
     return true;
@@ -561,7 +562,7 @@ var gPrivacyPane = {
    */
   initializeHistoryMode() {
     let mode;
-    let getVal = aPref => mainPreferences.get(aPref).value;
+    let getVal = aPref => privacyPreferences.get(aPref).value;
 
     if (getVal("privacy.history.custom"))
       mode = "custom";
@@ -593,7 +594,7 @@ var gPrivacyPane = {
       break;
     }
     document.getElementById("historyPane").selectedIndex = selectedIndex;
-    mainPreferences.get("privacy.history.custom").value = selectedIndex == 2;
+    privacyPreferences.get("privacy.history.custom").value = selectedIndex == 2;
   },
 
   /**
@@ -601,25 +602,25 @@ var gPrivacyPane = {
    * micro-management prefs based on the history mode menulist
    */
   updateHistoryModePrefs() {
-    let pref = mainPreferences.get("browser.privatebrowsing.autostart");
+    let pref = privacyPreferences.get("browser.privatebrowsing.autostart");
     switch (document.getElementById("historyMode").value) {
     case "remember":
       if (pref.value)
         pref.value = false;
 
       // select the remember history option if needed
-      mainPreferences.get("places.history.enabled").value = true;
+      privacyPreferences.get("places.history.enabled").value = true;
 
       // select the remember forms history option
-      mainPreferences.get("browser.formfill.enable").value = true;
+      privacyPreferences.get("browser.formfill.enable").value = true;
 
       // select the allow cookies option
-      mainPreferences.get("network.cookie.cookieBehavior").value = 0;
+      privacyPreferences.get("network.cookie.cookieBehavior").value = 0;
       // select the cookie lifetime policy option
-      mainPreferences.get("network.cookie.lifetimePolicy").value = 0;
+      privacyPreferences.get("network.cookie.lifetimePolicy").value = 0;
 
       // select the clear on close option
-      mainPreferences.get("privacy.sanitize.sanitizeOnShutdown").value = false;
+      privacyPreferences.get("privacy.sanitize.sanitizeOnShutdown").value = false;
       break;
     case "dontremember":
       if (!pref.value)
@@ -647,13 +648,13 @@ var gPrivacyPane = {
           }
         }
 
-        let preference = preferenceId ? mainPreferences.get(preferenceId) : {};
+        let preference = preferenceId ? privacyPreferences.get(preferenceId) : {};
         control.disabled = disabled || preference.locked;
       });
 
       // adjust the cookie controls status
       this.readAcceptCookies();
-      let lifetimePolicy = mainPreferences.get("network.cookie.lifetimePolicy").value;
+      let lifetimePolicy = privacyPreferences.get("network.cookie.lifetimePolicy").value;
       if (lifetimePolicy != Ci.nsICookieService.ACCEPT_NORMALLY &&
           lifetimePolicy != Ci.nsICookieService.ACCEPT_SESSION &&
           lifetimePolicy != Ci.nsICookieService.ACCEPT_FOR_N_DAYS) {
@@ -663,13 +664,13 @@ var gPrivacyPane = {
 
       // adjust the checked state of the sanitizeOnShutdown checkbox
       document.getElementById("alwaysClear").checked = disabled ? false :
-        mainPreferences.get("privacy.sanitize.sanitizeOnShutdown").value;
+        privacyPreferences.get("privacy.sanitize.sanitizeOnShutdown").value;
 
       // adjust the checked state of the remember history checkboxes
       document.getElementById("rememberHistory").checked = disabled ? false :
-        mainPreferences.get("places.history.enabled").value;
+        privacyPreferences.get("places.history.enabled").value;
       document.getElementById("rememberForms").checked = disabled ? false :
-        mainPreferences.get("browser.formfill.enable").value;
+        privacyPreferences.get("browser.formfill.enable").value;
 
       if (!disabled) {
         // adjust the Settings button for sanitizeOnShutdown
@@ -695,7 +696,7 @@ var gPrivacyPane = {
   updateAutostart() {
       let mode = document.getElementById("historyMode");
       let autoStart = document.getElementById("privateBrowsingAutoStart");
-      let pref = mainPreferences.get("browser.privatebrowsing.autostart");
+      let pref = privacyPreferences.get("browser.privatebrowsing.autostart");
       if ((mode.value == "custom" && this._lastCheckState == autoStart.checked) ||
           (mode.value == "remember" && !this._lastCheckState) ||
           (mode.value == "dontremember" && this._lastCheckState)) {
@@ -814,7 +815,7 @@ var gPrivacyPane = {
    * if cookies are enabled.
    */
   readAcceptCookies() {
-    var pref = mainPreferences.get("network.cookie.cookieBehavior");
+    var pref = privacyPreferences.get("network.cookie.cookieBehavior");
     var acceptThirdPartyLabel = document.getElementById("acceptThirdPartyLabel");
     var acceptThirdPartyMenu = document.getElementById("acceptThirdPartyMenu");
     var keepUntil = document.getElementById("keepUntil");
@@ -848,7 +849,7 @@ var gPrivacyPane = {
    * Converts between network.cookie.cookieBehavior and the third-party cookie UI
    */
   readAcceptThirdPartyCookies() {
-    var pref = mainPreferences.get("network.cookie.cookieBehavior");
+    var pref = privacyPreferences.get("network.cookie.cookieBehavior");
     switch (pref.value) {
       case 0:
         return "always";
@@ -946,7 +947,7 @@ var gPrivacyPane = {
    */
   _updateSanitizeSettingsButton() {
     var settingsButton = document.getElementById("clearDataSettings");
-    var sanitizeOnShutdownPref = mainPreferences.get("privacy.sanitize.sanitizeOnShutdown");
+    var sanitizeOnShutdownPref = privacyPreferences.get("privacy.sanitize.sanitizeOnShutdown");
 
     settingsButton.disabled = !sanitizeOnShutdownPref.value;
    },
@@ -964,7 +965,7 @@ var gPrivacyPane = {
     * Enables/disables the Settings button used to configure containers
     */
    readBrowserContainersCheckbox() {
-     var pref = mainPreferences.get("privacy.userContext.enabled");
+     var pref = privacyPreferences.get("privacy.userContext.enabled");
      var settings = document.getElementById("browserContainersSettings");
 
      settings.disabled = !pref.value;
@@ -1021,7 +1022,7 @@ var gPrivacyPane = {
    */
   updateButtons(aButtonID, aPreferenceID) {
     var button = document.getElementById(aButtonID);
-    var preference = mainPreferences.get(aPreferenceID);
+    var preference = privacyPreferences.get(aPreferenceID);
     button.disabled = preference.value != true;
     return undefined;
   },
@@ -1141,7 +1142,7 @@ var gPrivacyPane = {
    * Browsing mode, the "Remember passwords" UI is useless, so we disable it.
    */
   readSavePasswords() {
-    var pref = mainPreferences.get("signon.rememberSignons");
+    var pref = privacyPreferences.get("signon.rememberSignons");
     var excepts = document.getElementById("passwordExceptions");
 
     if (PrivateBrowsingUtils.permanentPrivateBrowsing) {
@@ -1159,7 +1160,7 @@ var gPrivacyPane = {
    * or not add-on installation warnings are displayed.
    */
   readWarnAddonInstall() {
-    var warn = mainPreferences.get("xpinstall.whitelist.required");
+    var warn = privacyPreferences.get("xpinstall.whitelist.required");
     var exceptions = document.getElementById("addonExceptions");
 
     exceptions.disabled = !warn.value;
@@ -1173,14 +1174,14 @@ var gPrivacyPane = {
     let blockDownloads = document.getElementById("blockDownloads");
     let blockUncommonUnwanted = document.getElementById("blockUncommonUnwanted");
 
-    let safeBrowsingPhishingPref = mainPreferences.get("browser.safebrowsing.phishing.enabled");
-    let safeBrowsingMalwarePref = mainPreferences.get("browser.safebrowsing.malware.enabled");
+    let safeBrowsingPhishingPref = privacyPreferences.get("browser.safebrowsing.phishing.enabled");
+    let safeBrowsingMalwarePref = privacyPreferences.get("browser.safebrowsing.malware.enabled");
 
-    let blockDownloadsPref = mainPreferences.get("browser.safebrowsing.downloads.enabled");
-    let malwareTable = mainPreferences.get("urlclassifier.malwareTable");
+    let blockDownloadsPref = privacyPreferences.get("browser.safebrowsing.downloads.enabled");
+    let malwareTable = privacyPreferences.get("urlclassifier.malwareTable");
 
-    let blockUnwantedPref = mainPreferences.get("browser.safebrowsing.downloads.remote.block_potentially_unwanted");
-    let blockUncommonPref = mainPreferences.get("browser.safebrowsing.downloads.remote.block_uncommon");
+    let blockUnwantedPref = privacyPreferences.get("browser.safebrowsing.downloads.remote.block_potentially_unwanted");
+    let blockUncommonPref = privacyPreferences.get("browser.safebrowsing.downloads.remote.block_uncommon");
 
     enableSafeBrowsing.addEventListener("command", function() {
       safeBrowsingPhishingPref.value = enableSafeBrowsing.checked;
@@ -1283,7 +1284,7 @@ var gPrivacyPane = {
    * checked. Otherwise, it should be unchecked.
    */
   readEnableOCSP() {
-    var preference = mainPreferences.get("security.OCSP.enabled");
+    var preference = privacyPreferences.get("security.OCSP.enabled");
     // This is the case if the preference is the default value.
     if (preference.value === undefined) {
       return true;
@@ -1434,7 +1435,7 @@ var gPrivacyPane = {
   readSmartSizeEnabled() {
     // The smart_size.enabled preference element is inverted="true", so its
     // value is the opposite of the actual pref value
-    var disabled = mainPreferences.get("browser.cache.disk.smart_size.enabled").value;
+    var disabled = privacyPreferences.get("browser.cache.disk.smart_size.enabled").value;
     this.updateCacheSizeUI(!disabled);
   },
 
@@ -1450,7 +1451,7 @@ var gPrivacyPane = {
    */
   updateCacheSizeInputField() {
     let cacheSizeElem = document.getElementById("cacheSize");
-    let cachePref = mainPreferences.get("browser.cache.disk.capacity");
+    let cachePref = privacyPreferences.get("browser.cache.disk.capacity");
     cacheSizeElem.value = cachePref.value / 1024;
     if (cachePref.locked)
       cacheSizeElem.disabled = true;
@@ -1464,7 +1465,7 @@ var gPrivacyPane = {
    */
   updateCacheSizePref() {
     let cacheSizeElem = document.getElementById("cacheSize");
-    let cachePref = mainPreferences.get("browser.cache.disk.capacity");
+    let cachePref = privacyPreferences.get("browser.cache.disk.capacity");
     // Converts the cache size as specified in UI (in MB) to KB.
     let intValue = parseInt(cacheSizeElem.value, 10);
     cachePref.value = isNaN(intValue) ? 0 : intValue * 1024;
@@ -1606,7 +1607,7 @@ var gPrivacyPane = {
   },
 
   readOfflineNotify() {
-    var pref = mainPreferences.get("browser.offline-apps.notify");
+    var pref = privacyPreferences.get("browser.offline-apps.notify");
     var button = document.getElementById("offlineNotifyExceptions");
     button.disabled = !pref.value;
     return pref.value;
diff --git a/browser/components/preferences/in-content-new/tests/browser_sanitizeOnShutdown_prefLocked.js b/browser/components/preferences/in-content-new/tests/browser_sanitizeOnShutdown_prefLocked.js
index b1ce979d6abb..f40919cb6c26 100644
--- a/browser/components/preferences/in-content-new/tests/browser_sanitizeOnShutdown_prefLocked.js
+++ b/browser/components/preferences/in-content-new/tests/browser_sanitizeOnShutdown_prefLocked.js
@@ -13,7 +13,7 @@ function testPrefStateMatchesLockedState() {
   switchToCustomHistoryMode(doc);
 
   let checkbox = doc.getElementById("alwaysClear");
-  let preference = win.mainPreferences.get("privacy.sanitize.sanitizeOnShutdown");
+  let preference = win.privacyPreferences.get("privacy.sanitize.sanitizeOnShutdown");
   is(checkbox.disabled, preference.locked, "Always Clear checkbox should be enabled when preference is not locked.");
 
   Services.prefs.clearUserPref("privacy.history.custom");
diff --git a/browser/components/preferences/in-content-new/tests/privacypane_tests_perwindow.js b/browser/components/preferences/in-content-new/tests/privacypane_tests_perwindow.js
index d38a881299b0..82fb5956c14a 100644
--- a/browser/components/preferences/in-content-new/tests/privacypane_tests_perwindow.js
+++ b/browser/components/preferences/in-content-new/tests/privacypane_tests_perwindow.js
@@ -311,13 +311,13 @@ function test_locbar_suggestion_retention(suggestion, autocomplete) {
 const gPrefCache = new Map();
 
 function cache_preferences(win) {
-  let prefs = win.mainPreferences.getAll("privacy");
+  let prefs = win.privacyPreferences.getAll("privacy");
   for (let pref of prefs)
     gPrefCache.set(pref.name, pref.value);
 }
 
 function reset_preferences(win) {
-  let prefs = win.mainPreferences.getAll("privacy");
+  let prefs = win.privacyPreferences.getAll("privacy");
   for (let pref of prefs)
     pref.value = gPrefCache.get(pref.name);
 }
diff --git a/toolkit/content/widgets/preferences.xml b/toolkit/content/widgets/preferences.xml
index 69c67df95dc5..5b1a2df1f824 100644
--- a/toolkit/content/widgets/preferences.xml
+++ b/toolkit/content/widgets/preferences.xml
@@ -1219,7 +1219,7 @@
           // XXX Remove reference to mainPreferences once we've eliminated
           // the in-content-new preference page's dependency on this <prefpane>.
           return document.getElementById(aElement.getAttribute("preference")) ||
-                 mainPreferences.get(aElement.getAttribute("preference"));
+                 Preferences.get(aElement.getAttribute("preference"));
           ]]>
         </body>
       </method>
@@ -1260,7 +1260,7 @@
           // XXX Remove reference to mainPreferences once we've eliminated
           // the in-content-new preference page's dependency on this <prefpane>.
           // binding.
-          let preference = document.getElementById(prefID) || window.mainPreferences.get(prefID);
+          let preference = document.getElementById(prefID) || window.Preferences.get(prefID);
           let prefVal = preference.getElementValue(aElement);
           preference.value = prefVal;
           this._deferredValueUpdateElements.delete(aElement);
@@ -1291,7 +1291,7 @@
               // XXX Remove reference to mainPreferences once we've eliminated
               // the in-content-new preference page's dependency on this <prefpane>.
               var preference = document.getElementById(element.getAttribute("preference")) ||
-                               mainPreferences.get(element.getAttribute("preference"));
+                               Preferences.get(element.getAttribute("preference"));
               var prefVal = preference.getElementValue(element);
               preference.value = prefVal;
             } else {

From f66b10b54000a0d72c38778a43cfe0f78e38b366 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Wed, 5 Jul 2017 13:19:44 -0700
Subject: [PATCH 020/106] set the Preference constructor

---
 browser/components/preferences/in-content-new/preferences.js | 1 +
 1 file changed, 1 insertion(+)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 2bded4083a5b..9f269b69fb77 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -527,6 +527,7 @@ Preference.destructor = function () {
 Preference.prototype = Object.create(EventEmitter.prototype);
 
 Object.assign(Preference.prototype, {
+  constructor: Preference,
   _preferences: null,
   _value: null,
   _disabled: false,

From 81ed43eb9d7659f9e414a952f1e4af7539642337 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Wed, 5 Jul 2017 13:20:48 -0700
Subject: [PATCH 021/106] add privacy prefs after document elements loaded

Adding the prefs causes their associated elements to be initialized,
so it needs to happen after the document elements have been loaded.
---
 browser/components/preferences/in-content-new/privacy.js | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/browser/components/preferences/in-content-new/privacy.js b/browser/components/preferences/in-content-new/privacy.js
index 62239885e681..43680f531be4 100644
--- a/browser/components/preferences/in-content-new/privacy.js
+++ b/browser/components/preferences/in-content-new/privacy.js
@@ -35,6 +35,7 @@ XPCOMUtils.defineLazyGetter(this, "AlertsServiceDND", function() {
 
 const privacyPreferences = window.privacyPreferences = new Preferences();
 
+function addPrivacyPreferences() {
 privacyPreferences.addAll({
   preferences: [
   // Tracking
@@ -122,6 +123,8 @@ privacyPreferences.addAll({
 
 ]});
 
+}
+
 var gPrivacyPane = {
   _pane: null,
 
@@ -234,6 +237,8 @@ var gPrivacyPane = {
    * label of the "Clear Now..." button.
    */
   init() {
+    addPrivacyPreferences();
+
     function setEventListener(aId, aEventType, aCallback) {
       document.getElementById(aId)
               .addEventListener(aEventType, aCallback.bind(gPrivacyPane));

From f51db4ef44b9a0291efa19b4cc9a732b6e7baa59 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Wed, 5 Jul 2017 16:04:29 -0700
Subject: [PATCH 022/106] DRY setting of pref category

---
 .../components/preferences/in-content-new/main.js  | 75 ++++++++++----------
 .../preferences/in-content-new/preferences.js      |  4 +-
 .../preferences/in-content-new/privacy.js          | 81 +++++++++++-----------
 3 files changed, 81 insertions(+), 79 deletions(-)

diff --git a/browser/components/preferences/in-content-new/main.js b/browser/components/preferences/in-content-new/main.js
index 997f126ba89f..9c315b669bba 100644
--- a/browser/components/preferences/in-content-new/main.js
+++ b/browser/components/preferences/in-content-new/main.js
@@ -29,36 +29,37 @@ if (AppConstants.MOZ_DEV_EDITION) {
 // XXX Rename this to gMainPrefs.
 // Assign the Preferences instance to window.mainPreferences so tests can access it.
 mainPreferences.addAll({
+  category: "main",
   preferences: [
 #ifdef E10S_TESTING_ONLY
-    { category: "main", id: "browser.tabs.remote.autostart", name: "browser.tabs.remote.autostart", type: "bool" },
-    { category: "main", id: "e10sTempPref", name: "browser.tabs.remote.autostart.2", type: "bool" },
-    { category: "main", id: "e10sForceEnable", name: "browser.tabs.remote.force-enable", type: "bool" },
+    { id: "browser.tabs.remote.autostart", name: "browser.tabs.remote.autostart", type: "bool" },
+    { id: "e10sTempPref", name: "browser.tabs.remote.autostart.2", type: "bool" },
+    { id: "e10sForceEnable", name: "browser.tabs.remote.force-enable", type: "bool" },
 #endif
 
     /* Startup */
-    { category: "main", id: "browser.startup.page", name: "browser.startup.page", type: "int" },
-    { category: "main", id: "browser.startup.homepage", name: "browser.startup.homepage", type: "wstring" },
+    { id: "browser.startup.page", name: "browser.startup.page", type: "int" },
+    { id: "browser.startup.homepage", name: "browser.startup.homepage", type: "wstring" },
 
 #ifdef HAVE_SHELL_SERVICE
-    { category: "main", id: "browser.shell.checkDefaultBrowser", name: "browser.shell.checkDefaultBrowser", type: "bool" },
-    { category: "main", id: "pref.general.disable_button.default_browser", name: "pref.general.disable_button.default_browser", type: "bool" },
+    { id: "browser.shell.checkDefaultBrowser", name: "browser.shell.checkDefaultBrowser", type: "bool" },
+    { id: "pref.general.disable_button.default_browser", name: "pref.general.disable_button.default_browser", type: "bool" },
 #endif
 
-    { category: "main", id: "pref.browser.homepage.disable_button.current_page", name: "pref.browser.homepage.disable_button.current_page", type: "bool" },
-    { category: "main", id: "pref.browser.homepage.disable_button.bookmark_page", name: "pref.browser.homepage.disable_button.bookmark_page", type: "bool" },
-    { category: "main", id: "pref.browser.homepage.disable_button.restore_default", name: "pref.browser.homepage.disable_button.restore_default", type: "bool" },
-    { category: "main", id: "browser.privatebrowsing.autostart", name: "browser.privatebrowsing.autostart", type: "bool" },
+    { id: "pref.browser.homepage.disable_button.current_page", name: "pref.browser.homepage.disable_button.current_page", type: "bool" },
+    { id: "pref.browser.homepage.disable_button.bookmark_page", name: "pref.browser.homepage.disable_button.bookmark_page", type: "bool" },
+    { id: "pref.browser.homepage.disable_button.restore_default", name: "pref.browser.homepage.disable_button.restore_default", type: "bool" },
+    { id: "browser.privatebrowsing.autostart", name: "browser.privatebrowsing.autostart", type: "bool" },
 
     /* Search Engine */
-    { category: "main", id: "browser.search.suggest.enabled", name: "browser.search.suggest.enabled", type: "bool" },
-    { category: "main", id: "browser.urlbar.suggest.searches", name: "browser.urlbar.suggest.searches", type: "bool" },
-    { category: "main", id: "browser.search.hiddenOneOffs", name: "browser.search.hiddenOneOffs", type: "unichar" },
+    { id: "browser.search.suggest.enabled", name: "browser.search.suggest.enabled", type: "bool" },
+    { id: "browser.urlbar.suggest.searches", name: "browser.urlbar.suggest.searches", type: "bool" },
+    { id: "browser.search.hiddenOneOffs", name: "browser.search.hiddenOneOffs", type: "unichar" },
 
     /* Downloads */
-    { category: "main", id: "browser.download.useDownloadDir", name: "browser.download.useDownloadDir", type: "bool" },
-    { category: "main", id: "browser.download.folderList", name: "browser.download.folderList", type: "int" },
-    { category: "main", id: "browser.download.dir", name: "browser.download.dir", type: "file" },
+    { id: "browser.download.useDownloadDir", name: "browser.download.useDownloadDir", type: "bool" },
+    { id: "browser.download.folderList", name: "browser.download.folderList", type: "int" },
+    { id: "browser.download.dir", name: "browser.download.dir", type: "file" },
 
     /* Tab preferences
     Preferences:
@@ -80,21 +81,21 @@ mainPreferences.addAll({
     - true if tabs are to be shown in the Windows 7 taskbar
     */
 
-    { category: "main", id: "browser.link.open_newwindow", name: "browser.link.open_newwindow", type: "int" },
-    { category: "main", id: "browser.tabs.loadInBackground", name: "browser.tabs.loadInBackground", type: "bool", inverted: true },
-    { category: "main", id: "browser.tabs.warnOnClose", name: "browser.tabs.warnOnClose", type: "bool" },
-    { category: "main", id: "browser.tabs.warnOnOpen", name: "browser.tabs.warnOnOpen", type: "bool" },
-    { category: "main", id: "browser.sessionstore.restore_on_demand", name: "browser.sessionstore.restore_on_demand", type: "bool" },
+    { id: "browser.link.open_newwindow", name: "browser.link.open_newwindow", type: "int" },
+    { id: "browser.tabs.loadInBackground", name: "browser.tabs.loadInBackground", type: "bool", inverted: true },
+    { id: "browser.tabs.warnOnClose", name: "browser.tabs.warnOnClose", type: "bool" },
+    { id: "browser.tabs.warnOnOpen", name: "browser.tabs.warnOnOpen", type: "bool" },
+    { id: "browser.sessionstore.restore_on_demand", name: "browser.sessionstore.restore_on_demand", type: "bool" },
 #ifdef XP_WIN
-    { category: "main", id: "browser.taskbar.previews.enable", name: "browser.taskbar.previews.enable", type: "bool" },
+    { id: "browser.taskbar.previews.enable", name: "browser.taskbar.previews.enable", type: "bool" },
 #endif
-    { category: "main", id: "browser.ctrlTab.previews", name: "browser.ctrlTab.previews", type: "bool" },
+    { id: "browser.ctrlTab.previews", name: "browser.ctrlTab.previews", type: "bool" },
 
     /* Fonts */
-    { category: "main", id: "font.language.group", name: "font.language.group", type: "wstring" },
+    { id: "font.language.group", name: "font.language.group", type: "wstring" },
 
     /* Languages */
-    { category: "main", id: "browser.translation.detectLanguage", name: "browser.translation.detectLanguage", type: "bool" },
+    { id: "browser.translation.detectLanguage", name: "browser.translation.detectLanguage", type: "bool" },
 
     /* General tab */
 
@@ -106,11 +107,11 @@ mainPreferences.addAll({
        - when set to true, typing outside text areas and input boxes will
          automatically start searching for what's typed within the current
          document; when set to false, no search action happens */
-    { category: "main", id: "accessibility.browsewithcaret", name: "accessibility.browsewithcaret", type: "bool" },
-    { category: "main", id: "accessibility.typeaheadfind", name: "accessibility.typeaheadfind", type: "bool" },
-    { category: "main", id: "accessibility.blockautorefresh", name: "accessibility.blockautorefresh", type: "bool" },
+    { id: "accessibility.browsewithcaret", name: "accessibility.browsewithcaret", type: "bool" },
+    { id: "accessibility.typeaheadfind", name: "accessibility.typeaheadfind", type: "bool" },
+    { id: "accessibility.blockautorefresh", name: "accessibility.blockautorefresh", type: "bool" },
 #ifdef XP_WIN
-    { category: "main", id: "ui.osk.enabled", name: "ui.osk.enabled", type: "bool" },
+    { id: "ui.osk.enabled", name: "ui.osk.enabled", type: "bool" },
 #endif
 
     /* Browsing
@@ -123,13 +124,13 @@ mainPreferences.addAll({
      * general.smoothScroll
        - set to true to enable finer page scrolling than line-by-line on page-up,
          page-down, and other such page movements */
-    { category: "main", id: "general.autoScroll", name: "general.autoScroll", type: "bool" },
-    { category: "main", id: "general.smoothScroll", name: "general.smoothScroll", type: "bool" },
-    { category: "main", id: "layout.spellcheckDefault", name: "layout.spellcheckDefault", type: "int" },
-    { category: "main", id: "toolkit.telemetry.enabled", name: "toolkit.telemetry.enabled", type: "bool" },
-    { category: "main", id: "browser.preferences.defaultPerformanceSettings.enabled", name: "browser.preferences.defaultPerformanceSettings.enabled", type: "bool" },
-    { category: "main", id: "dom.ipc.processCount", name: "dom.ipc.processCount", type: "int" },
-    { category: "main", id: "layers.acceleration.disabled", name: "layers.acceleration.disabled", type: "bool", inverted: true },
+    { id: "general.autoScroll", name: "general.autoScroll", type: "bool" },
+    { id: "general.smoothScroll", name: "general.smoothScroll", type: "bool" },
+    { id: "layout.spellcheckDefault", name: "layout.spellcheckDefault", type: "int" },
+    { id: "toolkit.telemetry.enabled", name: "toolkit.telemetry.enabled", type: "bool" },
+    { id: "browser.preferences.defaultPerformanceSettings.enabled", name: "browser.preferences.defaultPerformanceSettings.enabled", type: "bool" },
+    { id: "dom.ipc.processCount", name: "dom.ipc.processCount", type: "int" },
+    { id: "layers.acceleration.disabled", name: "layers.acceleration.disabled", type: "bool", inverted: true },
   ],
 });
 
diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 9f269b69fb77..06d80d4dde56 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -409,8 +409,8 @@ Object.assign(Preferences.prototype, {
     return pref;
   },
 
-  addAll({ preferences }) {
-    let prefs = preferences.map(v => new Preference(Object.assign(v, { preferences: this })));
+  addAll({ category, preferences }) {
+    let prefs = preferences.map(v => new Preference(Object.assign(v, { category, preferences: this })));
     this.preferences = this.preferences.concat(prefs);
     Preferences.all = Preferences.all.concat(prefs);
     // XXX Only construct the newly added children.
diff --git a/browser/components/preferences/in-content-new/privacy.js b/browser/components/preferences/in-content-new/privacy.js
index ad8eb1df17e3..d687aef960ad 100644
--- a/browser/components/preferences/in-content-new/privacy.js
+++ b/browser/components/preferences/in-content-new/privacy.js
@@ -37,50 +37,51 @@ const privacyPreferences = window.privacyPreferences = new Preferences();
 
 function addPrivacyPreferences() {
 privacyPreferences.addAll({
+  category: "privacy",
   preferences: [
   // Tracking
-  { category: "privacy", id: "privacy.trackingprotection.enabled", name: "privacy.trackingprotection.enabled", type: "bool" },
-  { category: "privacy", id: "privacy.trackingprotection.pbmode.enabled", name: "privacy.trackingprotection.pbmode.enabled", type: "bool" },
+  { id: "privacy.trackingprotection.enabled", name: "privacy.trackingprotection.enabled", type: "bool" },
+  { id: "privacy.trackingprotection.pbmode.enabled", name: "privacy.trackingprotection.pbmode.enabled", type: "bool" },
 
   // XXX button prefs
-  { category: "privacy", id: "pref.privacy.disable_button.cookie_exceptions", name: "pref.privacy.disable_button.cookie_exceptions", type: "bool" },
-  { category: "privacy", id: "pref.privacy.disable_button.view_cookies", name: "pref.privacy.disable_button.view_cookies", type: "bool" },
-  { category: "privacy", id: "pref.privacy.disable_button.change_blocklist", name: "pref.privacy.disable_button.change_blocklist", type: "bool" },
-  { category: "privacy", id: "pref.privacy.disable_button.tracking_protection_exceptions", name: "pref.privacy.disable_button.tracking_protection_exceptions", type: "bool" },
+  { id: "pref.privacy.disable_button.cookie_exceptions", name: "pref.privacy.disable_button.cookie_exceptions", type: "bool" },
+  { id: "pref.privacy.disable_button.view_cookies", name: "pref.privacy.disable_button.view_cookies", type: "bool" },
+  { id: "pref.privacy.disable_button.change_blocklist", name: "pref.privacy.disable_button.change_blocklist", type: "bool" },
+  { id: "pref.privacy.disable_button.tracking_protection_exceptions", name: "pref.privacy.disable_button.tracking_protection_exceptions", type: "bool" },
 
   // Location Bar
-  { category: "privacy", id: "browser.urlbar.autocomplete.enabled", name: "browser.urlbar.autocomplete.enabled", type: "bool" },
-  { category: "privacy", id: "browser.urlbar.suggest.bookmark", name: "browser.urlbar.suggest.bookmark", type: "bool" },
-  { category: "privacy", id: "browser.urlbar.suggest.history", name: "browser.urlbar.suggest.history", type: "bool" },
-  { category: "privacy", id: "browser.urlbar.suggest.openpage", name: "browser.urlbar.suggest.openpage", type: "bool" },
+  { id: "browser.urlbar.autocomplete.enabled", name: "browser.urlbar.autocomplete.enabled", type: "bool" },
+  { id: "browser.urlbar.suggest.bookmark", name: "browser.urlbar.suggest.bookmark", type: "bool" },
+  { id: "browser.urlbar.suggest.history", name: "browser.urlbar.suggest.history", type: "bool" },
+  { id: "browser.urlbar.suggest.openpage", name: "browser.urlbar.suggest.openpage", type: "bool" },
 
   // History
-  { category: "privacy", id: "places.history.enabled", name: "places.history.enabled", type: "bool" },
-  { category: "privacy", id: "browser.formfill.enable", name: "browser.formfill.enable", type: "bool" },
-  { category: "privacy", id: "privacy.history.custom", name: "privacy.history.custom", type: "bool" },
+  { id: "places.history.enabled", name: "places.history.enabled", type: "bool" },
+  { id: "browser.formfill.enable", name: "browser.formfill.enable", type: "bool" },
+  { id: "privacy.history.custom", name: "privacy.history.custom", type: "bool" },
   // Cookies
-  { category: "privacy", id: "network.cookie.cookieBehavior", name: "network.cookie.cookieBehavior", type: "int" },
-  { category: "privacy", id: "network.cookie.lifetimePolicy", name: "network.cookie.lifetimePolicy", type: "int" },
-  { category: "privacy", id: "network.cookie.blockFutureCookies", name: "network.cookie.blockFutureCookies", type: "bool" },
+  { id: "network.cookie.cookieBehavior", name: "network.cookie.cookieBehavior", type: "int" },
+  { id: "network.cookie.lifetimePolicy", name: "network.cookie.lifetimePolicy", type: "int" },
+  { id: "network.cookie.blockFutureCookies", name: "network.cookie.blockFutureCookies", type: "bool" },
   // Clear Private Data
-  { category: "privacy", id: "privacy.sanitize.sanitizeOnShutdown", name: "privacy.sanitize.sanitizeOnShutdown", type: "bool" },
-  { category: "privacy", id: "privacy.sanitize.timeSpan", name: "privacy.sanitize.timeSpan", type: "int" },
+  { id: "privacy.sanitize.sanitizeOnShutdown", name: "privacy.sanitize.sanitizeOnShutdown", type: "bool" },
+  { id: "privacy.sanitize.timeSpan", name: "privacy.sanitize.timeSpan", type: "int" },
   // Private Browsing
-  { category: "privacy", id: "browser.privatebrowsing.autostart", name: "browser.privatebrowsing.autostart", type: "bool" },
+  { id: "browser.privatebrowsing.autostart", name: "browser.privatebrowsing.autostart", type: "bool" },
   // Do not track
-  { category: "privacy", id: "privacy.donottrackheader.enabled", name: "privacy.donottrackheader.enabled", type: "bool" },
+  { id: "privacy.donottrackheader.enabled", name: "privacy.donottrackheader.enabled", type: "bool" },
 
   // DRM content
-  { category: "privacy", id: "media.eme.enabled", name: "media.eme.enabled", type: "bool" },
+  { id: "media.eme.enabled", name: "media.eme.enabled", type: "bool" },
 
   // Popups
-  { category: "privacy", id: "dom.disable_open_during_load", name: "dom.disable_open_during_load", type: "bool" },
+  { id: "dom.disable_open_during_load", name: "dom.disable_open_during_load", type: "bool" },
   // Passwords
-  { category: "privacy", id: "signon.rememberSignons", name: "signon.rememberSignons", type: "bool" },
+  { id: "signon.rememberSignons", name: "signon.rememberSignons", type: "bool" },
 
   // XXX buttons
-  { category: "privacy", id: "pref.privacy.disable_button.view_passwords", name: "pref.privacy.disable_button.view_passwords", type: "bool" },
-  { category: "privacy", id: "pref.privacy.disable_button.view_passwords_exceptions", name: "pref.privacy.disable_button.view_passwords_exceptions", type: "bool" },
+  { id: "pref.privacy.disable_button.view_passwords", name: "pref.privacy.disable_button.view_passwords", type: "bool" },
+  { id: "pref.privacy.disable_button.view_passwords_exceptions", name: "pref.privacy.disable_button.view_passwords_exceptions", type: "bool" },
 
   /* Certificates tab
    * security.default_personal_cert
@@ -91,36 +92,36 @@ privacyPreferences.addAll({
    *                                the certificate to use on a site which
    *                                requests one
    */
-  { category: "privacy", id: "security.default_personal_cert", name: "security.default_personal_cert", type: "string" },
+  { id: "security.default_personal_cert", name: "security.default_personal_cert", type: "string" },
 
-  { category: "privacy", id: "security.disable_button.openCertManager", name: "security.disable_button.openCertManager", type: "bool" },
+  { id: "security.disable_button.openCertManager", name: "security.disable_button.openCertManager", type: "bool" },
 
-  { category: "privacy", id: "security.disable_button.openDeviceManager", name: "security.disable_button.openDeviceManager", type: "bool" },
+  { id: "security.disable_button.openDeviceManager", name: "security.disable_button.openDeviceManager", type: "bool" },
 
-  { category: "privacy", id: "security.OCSP.enabled", name: "security.OCSP.enabled", type: "int" },
+  { id: "security.OCSP.enabled", name: "security.OCSP.enabled", type: "int" },
 
   // Add-ons, malware, phishing
-  { category: "privacy", id: "xpinstall.whitelist.required", name: "xpinstall.whitelist.required", type: "bool" },
+  { id: "xpinstall.whitelist.required", name: "xpinstall.whitelist.required", type: "bool" },
 
-  { category: "privacy", id: "browser.safebrowsing.malware.enabled", name: "browser.safebrowsing.malware.enabled", type: "bool" },
-  { category: "privacy", id: "browser.safebrowsing.phishing.enabled", name: "browser.safebrowsing.phishing.enabled", type: "bool" },
+  { id: "browser.safebrowsing.malware.enabled", name: "browser.safebrowsing.malware.enabled", type: "bool" },
+  { id: "browser.safebrowsing.phishing.enabled", name: "browser.safebrowsing.phishing.enabled", type: "bool" },
 
-  { category: "privacy", id: "browser.safebrowsing.downloads.enabled", name: "browser.safebrowsing.downloads.enabled", type: "bool" },
+  { id: "browser.safebrowsing.downloads.enabled", name: "browser.safebrowsing.downloads.enabled", type: "bool" },
 
-  { category: "privacy", id: "urlclassifier.malwareTable", name: "urlclassifier.malwareTable", type: "string" },
+  { id: "urlclassifier.malwareTable", name: "urlclassifier.malwareTable", type: "string" },
 
-  { category: "privacy", id: "browser.safebrowsing.downloads.remote.block_potentially_unwanted", name: "browser.safebrowsing.downloads.remote.block_potentially_unwanted", type: "bool" },
-  { category: "privacy", id: "browser.safebrowsing.downloads.remote.block_uncommon", name: "browser.safebrowsing.downloads.remote.block_uncommon", type: "bool" },
+  { id: "browser.safebrowsing.downloads.remote.block_potentially_unwanted", name: "browser.safebrowsing.downloads.remote.block_potentially_unwanted", type: "bool" },
+  { id: "browser.safebrowsing.downloads.remote.block_uncommon", name: "browser.safebrowsing.downloads.remote.block_uncommon", type: "bool" },
 
   // Network tab
-  { category: "privacy", id: "browser.cache.disk.capacity", name: "browser.cache.disk.capacity", type: "int" },
-  { category: "privacy", id: "browser.offline-apps.notify", name: "browser.offline-apps.notify", type: "bool" },
+  { id: "browser.cache.disk.capacity", name: "browser.cache.disk.capacity", type: "int" },
+  { id: "browser.offline-apps.notify", name: "browser.offline-apps.notify", type: "bool" },
 
-  { category: "privacy", id: "browser.cache.disk.smart_size.enabled", name: "browser.cache.disk.smart_size.enabled", type: "bool", inverted: "true" },
+  { id: "browser.cache.disk.smart_size.enabled", name: "browser.cache.disk.smart_size.enabled", type: "bool", inverted: "true" },
 
   // Data Choices tab
 #ifdef MOZ_CRASHREPORTER
-  { category: "privacy", id: "browser.crashReports.unsubmittedCheck.autoSubmit", name: "browser.crashReports.unsubmittedCheck.autoSubmit", type: "bool" },
+  { id: "browser.crashReports.unsubmittedCheck.autoSubmit", name: "browser.crashReports.unsubmittedCheck.autoSubmit", type: "bool" },
 #endif
 
 ]});

From 866067e5a2a0711f5c0efa9318d262e10ed43e4b Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Wed, 5 Jul 2017 16:13:11 -0700
Subject: [PATCH 023/106] move mainPreferences instantiation back to main.js

---
 browser/components/preferences/in-content-new/main.js        | 3 ++-
 browser/components/preferences/in-content-new/preferences.js | 2 --
 2 files changed, 2 insertions(+), 3 deletions(-)

diff --git a/browser/components/preferences/in-content-new/main.js b/browser/components/preferences/in-content-new/main.js
index 9c315b669bba..9c72a395fca3 100644
--- a/browser/components/preferences/in-content-new/main.js
+++ b/browser/components/preferences/in-content-new/main.js
@@ -27,7 +27,8 @@ if (AppConstants.MOZ_DEV_EDITION) {
 }
 
 // XXX Rename this to gMainPrefs.
-// Assign the Preferences instance to window.mainPreferences so tests can access it.
+// We assign the instance to window.mainPreferences so tests can access it.
+const mainPreferences = window.mainPreferences = new Preferences();
 mainPreferences.addAll({
   category: "main",
   preferences: [
diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 06d80d4dde56..c26c934e911f 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -867,5 +867,3 @@ Object.defineProperties(Preference.prototype, {
   },
 
 });
-
-const mainPreferences = window.mainPreferences = new Preferences();

From 39a5adf687b0dbd1e5946727c00d92fe1dcecfe2 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Wed, 5 Jul 2017 16:17:43 -0700
Subject: [PATCH 024/106] rename globals

---
 .../preferences/in-content-new/applications.js     |  8 +--
 .../components/preferences/in-content-new/main.js  | 80 +++++++++++-----------
 .../preferences/in-content-new/privacy.js          |  1 +
 .../tests/browser_basic_rebuild_fonts_test.js      |  2 +-
 4 files changed, 46 insertions(+), 45 deletions(-)

diff --git a/browser/components/preferences/in-content-new/applications.js b/browser/components/preferences/in-content-new/applications.js
index b4e9ba61f473..aa3a60bcd6e1 100644
--- a/browser/components/preferences/in-content-new/applications.js
+++ b/browser/components/preferences/in-content-new/applications.js
@@ -912,7 +912,7 @@ var gApplicationsPane = {
     setEventListener("typeColumn", "click", gApplicationsPane.sort);
     setEventListener("actionColumn", "click", gApplicationsPane.sort);
     setEventListener("chooseFolder", "command", gApplicationsPane.chooseFolder);
-    mainPreferences.get("browser.download.dir").on("change", gApplicationsPane.displayDownloadDirPref);
+    gMainPreferences.get("browser.download.dir").on("change", gApplicationsPane.displayDownloadDirPref);
 
     // Listen for window unload so we can remove our preference observers.
     window.addEventListener("unload", this);
@@ -1936,7 +1936,7 @@ var gApplicationsPane = {
   readUseDownloadDir() {
     var downloadFolder = document.getElementById("downloadFolder");
     var chooseFolder = document.getElementById("chooseFolder");
-    var preference = mainPreferences.get("browser.download.useDownloadDir");
+    var preference = gMainPreferences.get("browser.download.useDownloadDir");
     downloadFolder.disabled = !preference.value || preference.locked;
     chooseFolder.disabled = !preference.value || preference.locked;
 
@@ -2000,10 +2000,10 @@ var gApplicationsPane = {
   },
 
   async displayDownloadDirPrefTask() {
-    var folderListPref = mainPreferences.get("browser.download.folderList");
+    var folderListPref = gMainPreferences.get("browser.download.folderList");
     var bundlePreferences = document.getElementById("bundlePreferences");
     var downloadFolder = document.getElementById("downloadFolder");
-    var currentDirPref = mainPreferences.get("browser.download.dir");
+    var currentDirPref = gMainPreferences.get("browser.download.dir");
 
     // Used in defining the correct path to the folder icon.
     var ios = Components.classes["@mozilla.org/network/io-service;1"]
diff --git a/browser/components/preferences/in-content-new/main.js b/browser/components/preferences/in-content-new/main.js
index 9c72a395fca3..66637b9cf77a 100644
--- a/browser/components/preferences/in-content-new/main.js
+++ b/browser/components/preferences/in-content-new/main.js
@@ -27,9 +27,9 @@ if (AppConstants.MOZ_DEV_EDITION) {
 }
 
 // XXX Rename this to gMainPrefs.
-// We assign the instance to window.mainPreferences so tests can access it.
-const mainPreferences = window.mainPreferences = new Preferences();
-mainPreferences.addAll({
+// We assign the instance to window.gMainPreferences so tests can access it.
+const gMainPreferences = window.gMainPreferences = new Preferences();
+gMainPreferences.addAll({
   category: "main",
   preferences: [
 #ifdef E10S_TESTING_ONLY
@@ -199,7 +199,7 @@ var gMainPane = {
     this._initAutocomplete();
 
     let suggestsPref =
-      mainPreferences.get("browser.search.suggest.enabled");
+      gMainPreferences.get("browser.search.suggest.enabled");
     suggestsPref.on("change", () => {
       this.updateSuggestsCheckbox();
     });
@@ -208,7 +208,7 @@ var gMainPane = {
     this.updateDefaultPerformanceSettingsPref();
 
     let defaultPerformancePref =
-      mainPreferences.get("browser.preferences.defaultPerformanceSettings.enabled");
+      gMainPreferences.get("browser.preferences.defaultPerformanceSettings.enabled");
     defaultPerformancePref.on("change", () => {
       this.updatePerformanceSettingsBox();
     });
@@ -240,7 +240,7 @@ var gMainPane = {
     if (!TransientPrefs.prefShouldBeVisible("browser.tabs.warnOnOpen"))
       document.getElementById("warnOpenMany").hidden = true;
 
-    mainPreferences.get("browser.privatebrowsing.autostart").on("change",
+    gMainPreferences.get("browser.privatebrowsing.autostart").on("change",
                      gMainPane.updateBrowserStartupLastSession);
     if (AppConstants.HAVE_SHELL_SERVICE) {
       setEventListener("setDefaultButton", "command",
@@ -258,13 +258,13 @@ var gMainPane = {
       gMainPane.openTranslationProviderAttribution);
     setEventListener("translateButton", "command",
       gMainPane.showTranslationExceptions);
-    mainPreferences.get("font.language.group").on("change",
+    gMainPreferences.get("font.language.group").on("change",
       gMainPane._rebuildFonts);
     setEventListener("advancedFonts", "command",
       gMainPane.configureFonts);
     setEventListener("colors", "command",
       gMainPane.configureColors);
-    mainPreferences.get("layers.acceleration.disabled").on("change",
+    gMainPreferences.get("layers.acceleration.disabled").on("change",
       gMainPane.updateHardwareAcceleration);
 
     // Initializes the fonts dropdowns displayed in this pane.
@@ -289,9 +289,9 @@ var gMainPane = {
                        gMainPane.enableE10SChange);
       let e10sCheckbox = document.getElementById("e10sAutoStart");
 
-      let e10sPref = mainPreferences.get("browser.tabs.remote.autostart");
-      let e10sTempPref = mainPreferences.get("e10sTempPref");
-      let e10sForceEnable = mainPreferences.get("e10sForceEnable");
+      let e10sPref = gMainPreferences.get("browser.tabs.remote.autostart");
+      let e10sTempPref = gMainPreferences.get("e10sTempPref");
+      let e10sForceEnable = gMainPreferences.get("e10sForceEnable");
 
       let preffedOn = e10sPref.value || e10sTempPref.value || e10sForceEnable.value;
 
@@ -345,8 +345,8 @@ var gMainPane = {
   enableE10SChange() {
     if (AppConstants.E10S_TESTING_ONLY) {
       let e10sCheckbox = document.getElementById("e10sAutoStart");
-      let e10sPref = mainPreferences.get("browser.tabs.remote.autostart");
-      let e10sTempPref = mainPreferences.get("e10sTempPref");
+      let e10sPref = gMainPreferences.get("browser.tabs.remote.autostart");
+      let e10sTempPref = gMainPreferences.get("e10sTempPref");
 
       let prefsToChange;
       if (e10sCheckbox.checked) {
@@ -467,7 +467,7 @@ var gMainPane = {
    */
 
   syncFromHomePref() {
-    let homePref = mainPreferences.get("browser.startup.homepage");
+    let homePref = gMainPreferences.get("browser.startup.homepage");
 
     // If the pref is set to about:home or about:newtab, set the value to ""
     // to show the placeholder text (about:home title) rather than
@@ -506,7 +506,7 @@ var gMainPane = {
    * window UI to reflect this.
    */
   setHomePageToCurrent() {
-    let homePage = mainPreferences.get("browser.startup.homepage");
+    let homePage = gMainPreferences.get("browser.startup.homepage");
     let tabs = this._getTabsForHomePage();
     function getTabURI(t) {
       return t.linkedBrowser.currentURI.spec;
@@ -533,7 +533,7 @@ var gMainPane = {
     if (aEvent.detail.button != "accept")
       return;
     if (rv.urls && rv.names) {
-      var homePage = mainPreferences.get("browser.startup.homepage");
+      var homePage = gMainPreferences.get("browser.startup.homepage");
 
       // XXX still using dangerous "|" joiner!
       homePage.value = rv.urls.join("|");
@@ -557,7 +557,7 @@ var gMainPane = {
 
     // In this case, the button's disabled state is set by preferences.xml.
     let prefName = "pref.browser.homepage.disable_button.current_page";
-    if (mainPreferences.get(prefName).locked)
+    if (gMainPreferences.get(prefName).locked)
       return;
 
     useCurrent.disabled = !tabs.length
@@ -594,7 +594,7 @@ var gMainPane = {
    * Restores the default home page as the user's home page.
    */
   restoreDefaultHomePage() {
-    var homePage = mainPreferences.get("browser.startup.homepage");
+    var homePage = gMainPreferences.get("browser.startup.homepage");
     homePage.value = homePage.defaultValue;
   },
 
@@ -604,7 +604,7 @@ var gMainPane = {
    */
   updateButtons(aButtonID, aPreferenceID) {
     var button = document.getElementById(aButtonID);
-    var preference = mainPreferences.get(aPreferenceID);
+    var preference = gMainPreferences.get(aPreferenceID);
     button.disabled = preference.value != true;
     return undefined;
   },
@@ -614,8 +614,8 @@ var gMainPane = {
    * on the value of the browser.privatebrowsing.autostart pref.
    */
   updateBrowserStartupLastSession() {
-    let pbAutoStartPref = mainPreferences.get("browser.privatebrowsing.autostart");
-    let startupPref = mainPreferences.get("browser.startup.page");
+    let pbAutoStartPref = gMainPreferences.get("browser.privatebrowsing.autostart");
+    let startupPref = gMainPreferences.get("browser.startup.page");
     let menu = document.getElementById("browserStartupPage");
     let option = document.getElementById("browserStartupLastSession");
     if (pbAutoStartPref.value) {
@@ -660,7 +660,7 @@ var gMainPane = {
    * @returns |true| if such links should be opened in new tabs
    */
   readLinkTarget() {
-    var openNewWindow = mainPreferences.get("browser.link.open_newwindow");
+    var openNewWindow = gMainPreferences.get("browser.link.open_newwindow");
     return openNewWindow.value != 2;
   },
 
@@ -708,7 +708,7 @@ var gMainPane = {
    */
   setDefaultBrowser() {
     if (AppConstants.HAVE_SHELL_SERVICE) {
-      let alwaysCheckPref = mainPreferences.get("browser.shell.checkDefaultBrowser");
+      let alwaysCheckPref = gMainPreferences.get("browser.shell.checkDefaultBrowser");
       alwaysCheckPref.value = true;
 
       let shellSvc = getShellService();
@@ -787,7 +787,7 @@ var gMainPane = {
    * Populates the default font list in UI.
    */
   _rebuildFonts() {
-    var langGroupPref = mainPreferences.get("font.language.group");
+    var langGroupPref = gMainPreferences.get("font.language.group");
     this._selectDefaultLanguageGroup(langGroupPref.value,
                                      this._readDefaultFontTypeForLanguage(langGroupPref.value) == "serif");
   },
@@ -799,9 +799,9 @@ var gMainPane = {
   _readDefaultFontTypeForLanguage(aLanguageGroup) {
     const kDefaultFontType = "font.default.%LANG%";
     var defaultFontTypePref = kDefaultFontType.replace(/%LANG%/, aLanguageGroup);
-    var preference = mainPreferences.get(defaultFontTypePref);
+    var preference = gMainPreferences.get(defaultFontTypePref);
     if (!preference) {
-      preference = mainPreferences.add({
+      preference = gMainPreferences.add({
         id: defaultFontTypePref,
         name: defaultFontTypePref,
         type: "string",
@@ -831,10 +831,10 @@ var gMainPane = {
                    element: "defaultFontSize",
                    fonttype: null }];
     for (var i = 0; i < prefs.length; ++i) {
-      var preference = mainPreferences.get(prefs[i].format.replace(/%LANG%/, aLanguageGroup));
+      var preference = gMainPreferences.get(prefs[i].format.replace(/%LANG%/, aLanguageGroup));
       if (!preference) {
         var name = prefs[i].format.replace(/%LANG%/, aLanguageGroup);
-        preference = mainPreferences.add({
+        preference = gMainPreferences.add({
           id: name,
           name: name,
           type: prefs[i].type,
@@ -874,7 +874,7 @@ var gMainPane = {
    *     2  enables spellchecking for all text fields
    */
   readCheckSpelling() {
-    var pref = mainPreferences.get("layout.spellcheckDefault");
+    var pref = gMainPreferences.get("layout.spellcheckDefault");
     this._storedSpellCheck = pref.value;
 
     return (pref.value != 0);
@@ -898,14 +898,14 @@ var gMainPane = {
 
   updateSuggestsCheckbox() {
     let suggestsPref =
-      mainPreferences.get("browser.search.suggest.enabled");
+      gMainPreferences.get("browser.search.suggest.enabled");
     let permanentPB =
       Services.prefs.getBoolPref("browser.privatebrowsing.autostart");
     let urlbarSuggests = document.getElementById("urlBarSuggestion");
     urlbarSuggests.disabled = !suggestsPref.value || permanentPB;
 
     let urlbarSuggestsPref =
-      mainPreferences.get("browser.urlbar.suggest.searches");
+      gMainPreferences.get("browser.urlbar.suggest.searches");
     urlbarSuggests.checked = urlbarSuggestsPref.value;
     if (urlbarSuggests.disabled) {
       urlbarSuggests.checked = false;
@@ -918,9 +918,9 @@ var gMainPane = {
 
   updateDefaultPerformanceSettingsPref() {
     let defaultPerformancePref =
-      mainPreferences.get("browser.preferences.defaultPerformanceSettings.enabled");
-    let processCountPref = mainPreferences.get("dom.ipc.processCount");
-    let accelerationPref = mainPreferences.get("layers.acceleration.disabled");
+      gMainPreferences.get("browser.preferences.defaultPerformanceSettings.enabled");
+    let processCountPref = gMainPreferences.get("dom.ipc.processCount");
+    let accelerationPref = gMainPreferences.get("layers.acceleration.disabled");
     if (processCountPref.value != processCountPref.defaultValue ||
         accelerationPref.value != accelerationPref.defaultValue) {
       defaultPerformancePref.value = false;
@@ -929,11 +929,11 @@ var gMainPane = {
 
   updatePerformanceSettingsBox() {
     let defaultPerformancePref =
-      mainPreferences.get("browser.preferences.defaultPerformanceSettings.enabled");
+      gMainPreferences.get("browser.preferences.defaultPerformanceSettings.enabled");
     let performanceSettings = document.getElementById("performanceSettings");
     if (defaultPerformancePref.value) {
-      let processCountPref = mainPreferences.get("dom.ipc.processCount");
-      let accelerationPref = mainPreferences.get("layers.acceleration.disabled");
+      let processCountPref = gMainPreferences.get("dom.ipc.processCount");
+      let accelerationPref = gMainPreferences.get("layers.acceleration.disabled");
       processCountPref.value = processCountPref.defaultValue;
       accelerationPref.value = accelerationPref.defaultValue;
       performanceSettings.hidden = true;
@@ -944,7 +944,7 @@ var gMainPane = {
 
   buildContentProcessCountMenuList() {
     if (gMainPane.isE10SEnabled()) {
-      let processCountPref = mainPreferences.get("dom.ipc.processCount");
+      let processCountPref = gMainPreferences.get("dom.ipc.processCount");
       let bundlePreferences = document.getElementById("bundlePreferences");
       let label = bundlePreferences.getFormattedString("defaultContentProcessCount",
         [processCountPref.defaultValue]);
@@ -1191,7 +1191,7 @@ var gMainPane = {
       if (!engine.shown)
         hiddenList.push(engine.name);
     }
-    mainPreferences.get("browser.search.hiddenOneOffs").value =
+    gMainPreferences.get("browser.search.hiddenOneOffs").value =
       hiddenList.join(",");
   },
 
@@ -1214,7 +1214,7 @@ function onDragEngineStart(event) {
 
 
 function EngineStore() {
-  let pref = mainPreferences.get("browser.search.hiddenOneOffs").value;
+  let pref = gMainPreferences.get("browser.search.hiddenOneOffs").value;
   this.hiddenList = pref ? pref.split(",") : [];
 
   this._engines = Services.search.getVisibleEngines().map(this._cloneEngine, this);
diff --git a/browser/components/preferences/in-content-new/privacy.js b/browser/components/preferences/in-content-new/privacy.js
index d687aef960ad..15a58bbc0ee7 100644
--- a/browser/components/preferences/in-content-new/privacy.js
+++ b/browser/components/preferences/in-content-new/privacy.js
@@ -33,6 +33,7 @@ XPCOMUtils.defineLazyGetter(this, "AlertsServiceDND", function() {
   }
 });
 
+// We assign the instance to window.gPrivacyPreferences so tests can access it.
 const privacyPreferences = window.privacyPreferences = new Preferences();
 
 function addPrivacyPreferences() {
diff --git a/browser/components/preferences/in-content-new/tests/browser_basic_rebuild_fonts_test.js b/browser/components/preferences/in-content-new/tests/browser_basic_rebuild_fonts_test.js
index 86387d0c5955..760595abeca9 100644
--- a/browser/components/preferences/in-content-new/tests/browser_basic_rebuild_fonts_test.js
+++ b/browser/components/preferences/in-content-new/tests/browser_basic_rebuild_fonts_test.js
@@ -9,7 +9,7 @@ add_task(async function() {
   let doc = gBrowser.contentDocument;
   let contentWindow = gBrowser.contentWindow;
   var langGroup = Services.prefs.getComplexValue("font.language.group", Ci.nsIPrefLocalizedString).data
-  is(contentWindow.mainPreferences.get("font.language.group").value, langGroup,
+  is(contentWindow.gMainPreferences.get("font.language.group").value, langGroup,
      "Language group should be set correctly.");
 
   let defaultFontType = Services.prefs.getCharPref("font.default." + langGroup);

From 7d15979390ed34c8b216de7d2ae2f03b14313f43 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Wed, 5 Jul 2017 16:27:15 -0700
Subject: [PATCH 025/106] rename globals harder; fix indentation

---
 .../preferences/in-content-new/privacy.js          | 261 ++++++++++-----------
 .../tests/browser_sanitizeOnShutdown_prefLocked.js |   2 +-
 .../tests/privacypane_tests_perwindow.js           |   4 +-
 3 files changed, 133 insertions(+), 134 deletions(-)

diff --git a/browser/components/preferences/in-content-new/privacy.js b/browser/components/preferences/in-content-new/privacy.js
index 15a58bbc0ee7..52c00bed8da9 100644
--- a/browser/components/preferences/in-content-new/privacy.js
+++ b/browser/components/preferences/in-content-new/privacy.js
@@ -34,99 +34,98 @@ XPCOMUtils.defineLazyGetter(this, "AlertsServiceDND", function() {
 });
 
 // We assign the instance to window.gPrivacyPreferences so tests can access it.
-const privacyPreferences = window.privacyPreferences = new Preferences();
-
-function addPrivacyPreferences() {
-privacyPreferences.addAll({
-  category: "privacy",
-  preferences: [
-  // Tracking
-  { id: "privacy.trackingprotection.enabled", name: "privacy.trackingprotection.enabled", type: "bool" },
-  { id: "privacy.trackingprotection.pbmode.enabled", name: "privacy.trackingprotection.pbmode.enabled", type: "bool" },
-
-  // XXX button prefs
-  { id: "pref.privacy.disable_button.cookie_exceptions", name: "pref.privacy.disable_button.cookie_exceptions", type: "bool" },
-  { id: "pref.privacy.disable_button.view_cookies", name: "pref.privacy.disable_button.view_cookies", type: "bool" },
-  { id: "pref.privacy.disable_button.change_blocklist", name: "pref.privacy.disable_button.change_blocklist", type: "bool" },
-  { id: "pref.privacy.disable_button.tracking_protection_exceptions", name: "pref.privacy.disable_button.tracking_protection_exceptions", type: "bool" },
-
-  // Location Bar
-  { id: "browser.urlbar.autocomplete.enabled", name: "browser.urlbar.autocomplete.enabled", type: "bool" },
-  { id: "browser.urlbar.suggest.bookmark", name: "browser.urlbar.suggest.bookmark", type: "bool" },
-  { id: "browser.urlbar.suggest.history", name: "browser.urlbar.suggest.history", type: "bool" },
-  { id: "browser.urlbar.suggest.openpage", name: "browser.urlbar.suggest.openpage", type: "bool" },
-
-  // History
-  { id: "places.history.enabled", name: "places.history.enabled", type: "bool" },
-  { id: "browser.formfill.enable", name: "browser.formfill.enable", type: "bool" },
-  { id: "privacy.history.custom", name: "privacy.history.custom", type: "bool" },
-  // Cookies
-  { id: "network.cookie.cookieBehavior", name: "network.cookie.cookieBehavior", type: "int" },
-  { id: "network.cookie.lifetimePolicy", name: "network.cookie.lifetimePolicy", type: "int" },
-  { id: "network.cookie.blockFutureCookies", name: "network.cookie.blockFutureCookies", type: "bool" },
-  // Clear Private Data
-  { id: "privacy.sanitize.sanitizeOnShutdown", name: "privacy.sanitize.sanitizeOnShutdown", type: "bool" },
-  { id: "privacy.sanitize.timeSpan", name: "privacy.sanitize.timeSpan", type: "int" },
-  // Private Browsing
-  { id: "browser.privatebrowsing.autostart", name: "browser.privatebrowsing.autostart", type: "bool" },
-  // Do not track
-  { id: "privacy.donottrackheader.enabled", name: "privacy.donottrackheader.enabled", type: "bool" },
-
-  // DRM content
-  { id: "media.eme.enabled", name: "media.eme.enabled", type: "bool" },
-
-  // Popups
-  { id: "dom.disable_open_during_load", name: "dom.disable_open_during_load", type: "bool" },
-  // Passwords
-  { id: "signon.rememberSignons", name: "signon.rememberSignons", type: "bool" },
-
-  // XXX buttons
-  { id: "pref.privacy.disable_button.view_passwords", name: "pref.privacy.disable_button.view_passwords", type: "bool" },
-  { id: "pref.privacy.disable_button.view_passwords_exceptions", name: "pref.privacy.disable_button.view_passwords_exceptions", type: "bool" },
-
-  /* Certificates tab
-   * security.default_personal_cert
-   *   - a string:
-   *       "Select Automatically"   select a certificate automatically when a site
-   *                                requests one
-   *       "Ask Every Time"         present a dialog to the user so he can select
-   *                                the certificate to use on a site which
-   *                                requests one
-   */
-  { id: "security.default_personal_cert", name: "security.default_personal_cert", type: "string" },
-
-  { id: "security.disable_button.openCertManager", name: "security.disable_button.openCertManager", type: "bool" },
-
-  { id: "security.disable_button.openDeviceManager", name: "security.disable_button.openDeviceManager", type: "bool" },
-
-  { id: "security.OCSP.enabled", name: "security.OCSP.enabled", type: "int" },
-
-  // Add-ons, malware, phishing
-  { id: "xpinstall.whitelist.required", name: "xpinstall.whitelist.required", type: "bool" },
-
-  { id: "browser.safebrowsing.malware.enabled", name: "browser.safebrowsing.malware.enabled", type: "bool" },
-  { id: "browser.safebrowsing.phishing.enabled", name: "browser.safebrowsing.phishing.enabled", type: "bool" },
-
-  { id: "browser.safebrowsing.downloads.enabled", name: "browser.safebrowsing.downloads.enabled", type: "bool" },
-
-  { id: "urlclassifier.malwareTable", name: "urlclassifier.malwareTable", type: "string" },
-
-  { id: "browser.safebrowsing.downloads.remote.block_potentially_unwanted", name: "browser.safebrowsing.downloads.remote.block_potentially_unwanted", type: "bool" },
-  { id: "browser.safebrowsing.downloads.remote.block_uncommon", name: "browser.safebrowsing.downloads.remote.block_uncommon", type: "bool" },
-
-  // Network tab
-  { id: "browser.cache.disk.capacity", name: "browser.cache.disk.capacity", type: "int" },
-  { id: "browser.offline-apps.notify", name: "browser.offline-apps.notify", type: "bool" },
-
-  { id: "browser.cache.disk.smart_size.enabled", name: "browser.cache.disk.smart_size.enabled", type: "bool", inverted: "true" },
-
-  // Data Choices tab
+const gPrivacyPreferences = window.gPrivacyPreferences = new Preferences();
+
+function initPrivacyPreferences() {
+  gPrivacyPreferences.addAll({
+    category: "privacy",
+    preferences: [
+      // Tracking
+      { id: "privacy.trackingprotection.enabled", name: "privacy.trackingprotection.enabled", type: "bool" },
+      { id: "privacy.trackingprotection.pbmode.enabled", name: "privacy.trackingprotection.pbmode.enabled", type: "bool" },
+
+      // XXX button prefs
+      { id: "pref.privacy.disable_button.cookie_exceptions", name: "pref.privacy.disable_button.cookie_exceptions", type: "bool" },
+      { id: "pref.privacy.disable_button.view_cookies", name: "pref.privacy.disable_button.view_cookies", type: "bool" },
+      { id: "pref.privacy.disable_button.change_blocklist", name: "pref.privacy.disable_button.change_blocklist", type: "bool" },
+      { id: "pref.privacy.disable_button.tracking_protection_exceptions", name: "pref.privacy.disable_button.tracking_protection_exceptions", type: "bool" },
+
+      // Location Bar
+      { id: "browser.urlbar.autocomplete.enabled", name: "browser.urlbar.autocomplete.enabled", type: "bool" },
+      { id: "browser.urlbar.suggest.bookmark", name: "browser.urlbar.suggest.bookmark", type: "bool" },
+      { id: "browser.urlbar.suggest.history", name: "browser.urlbar.suggest.history", type: "bool" },
+      { id: "browser.urlbar.suggest.openpage", name: "browser.urlbar.suggest.openpage", type: "bool" },
+
+      // History
+      { id: "places.history.enabled", name: "places.history.enabled", type: "bool" },
+      { id: "browser.formfill.enable", name: "browser.formfill.enable", type: "bool" },
+      { id: "privacy.history.custom", name: "privacy.history.custom", type: "bool" },
+      // Cookies
+      { id: "network.cookie.cookieBehavior", name: "network.cookie.cookieBehavior", type: "int" },
+      { id: "network.cookie.lifetimePolicy", name: "network.cookie.lifetimePolicy", type: "int" },
+      { id: "network.cookie.blockFutureCookies", name: "network.cookie.blockFutureCookies", type: "bool" },
+      // Clear Private Data
+      { id: "privacy.sanitize.sanitizeOnShutdown", name: "privacy.sanitize.sanitizeOnShutdown", type: "bool" },
+      { id: "privacy.sanitize.timeSpan", name: "privacy.sanitize.timeSpan", type: "int" },
+      // Private Browsing
+      { id: "browser.privatebrowsing.autostart", name: "browser.privatebrowsing.autostart", type: "bool" },
+      // Do not track
+      { id: "privacy.donottrackheader.enabled", name: "privacy.donottrackheader.enabled", type: "bool" },
+
+      // DRM content
+      { id: "media.eme.enabled", name: "media.eme.enabled", type: "bool" },
+
+      // Popups
+      { id: "dom.disable_open_during_load", name: "dom.disable_open_during_load", type: "bool" },
+      // Passwords
+      { id: "signon.rememberSignons", name: "signon.rememberSignons", type: "bool" },
+
+      // XXX buttons
+      { id: "pref.privacy.disable_button.view_passwords", name: "pref.privacy.disable_button.view_passwords", type: "bool" },
+      { id: "pref.privacy.disable_button.view_passwords_exceptions", name: "pref.privacy.disable_button.view_passwords_exceptions", type: "bool" },
+
+      /* Certificates tab
+       * security.default_personal_cert
+       *   - a string:
+       *       "Select Automatically"   select a certificate automatically when a site
+       *                                requests one
+       *       "Ask Every Time"         present a dialog to the user so he can select
+       *                                the certificate to use on a site which
+       *                                requests one
+       */
+      { id: "security.default_personal_cert", name: "security.default_personal_cert", type: "string" },
+
+      { id: "security.disable_button.openCertManager", name: "security.disable_button.openCertManager", type: "bool" },
+
+      { id: "security.disable_button.openDeviceManager", name: "security.disable_button.openDeviceManager", type: "bool" },
+
+      { id: "security.OCSP.enabled", name: "security.OCSP.enabled", type: "int" },
+
+      // Add-ons, malware, phishing
+      { id: "xpinstall.whitelist.required", name: "xpinstall.whitelist.required", type: "bool" },
+
+      { id: "browser.safebrowsing.malware.enabled", name: "browser.safebrowsing.malware.enabled", type: "bool" },
+      { id: "browser.safebrowsing.phishing.enabled", name: "browser.safebrowsing.phishing.enabled", type: "bool" },
+
+      { id: "browser.safebrowsing.downloads.enabled", name: "browser.safebrowsing.downloads.enabled", type: "bool" },
+
+      { id: "urlclassifier.malwareTable", name: "urlclassifier.malwareTable", type: "string" },
+
+      { id: "browser.safebrowsing.downloads.remote.block_potentially_unwanted", name: "browser.safebrowsing.downloads.remote.block_potentially_unwanted", type: "bool" },
+      { id: "browser.safebrowsing.downloads.remote.block_uncommon", name: "browser.safebrowsing.downloads.remote.block_uncommon", type: "bool" },
+
+      // Network tab
+      { id: "browser.cache.disk.capacity", name: "browser.cache.disk.capacity", type: "int" },
+      { id: "browser.offline-apps.notify", name: "browser.offline-apps.notify", type: "bool" },
+
+      { id: "browser.cache.disk.smart_size.enabled", name: "browser.cache.disk.smart_size.enabled", type: "bool", inverted: "true" },
+
+      // Data Choices tab
 #ifdef MOZ_CRASHREPORTER
-  { id: "browser.crashReports.unsubmittedCheck.autoSubmit", name: "browser.crashReports.unsubmittedCheck.autoSubmit", type: "bool" },
+      { id: "browser.crashReports.unsubmittedCheck.autoSubmit", name: "browser.crashReports.unsubmittedCheck.autoSubmit", type: "bool" },
 #endif
-
-]});
-
+    ],
+  });
 }
 
 var gPrivacyPane = {
@@ -242,7 +241,7 @@ var gPrivacyPane = {
    * label of the "Clear Now..." button.
    */
   init() {
-    addPrivacyPreferences();
+    initPrivacyPreferences();
 
     function setEventListener(aId, aEventType, aCallback) {
       document.getElementById(aId)
@@ -266,9 +265,9 @@ var gPrivacyPane = {
     this._initAutocomplete();
     this._initBrowserContainers();
 
-    privacyPreferences.get("privacy.sanitize.sanitizeOnShutdown").on("change",
+    gPrivacyPreferences.get("privacy.sanitize.sanitizeOnShutdown").on("change",
                      gPrivacyPane._updateSanitizeSettingsButton);
-    privacyPreferences.get("browser.privatebrowsing.autostart").on("change",
+    gPrivacyPreferences.get("browser.privatebrowsing.autostart").on("change",
                      gPrivacyPane.updatePrivacyMicroControls);
     setEventListener("historyMode", "command", function() {
       gPrivacyPane.updateHistoryModePane();
@@ -470,8 +469,8 @@ var gPrivacyPane = {
    * Selects the right item of the Tracking Protection radiogroup.
    */
   trackingProtectionReadPrefs() {
-    let enabledPref = privacyPreferences.get("privacy.trackingprotection.enabled");
-    let pbmPref = privacyPreferences.get("privacy.trackingprotection.pbmode.enabled");
+    let enabledPref = gPrivacyPreferences.get("privacy.trackingprotection.enabled");
+    let pbmPref = gPrivacyPreferences.get("privacy.trackingprotection.pbmode.enabled");
     let radiogroup = document.getElementById("trackingProtectionRadioGroup");
 
     // Global enable takes precedence over enabled in Private Browsing.
@@ -488,8 +487,8 @@ var gPrivacyPane = {
    * Sets the pref values based on the selected item of the radiogroup.
    */
   trackingProtectionWritePrefs() {
-    let enabledPref = privacyPreferences.get("privacy.trackingprotection.enabled");
-    let pbmPref = privacyPreferences.get("privacy.trackingprotection.pbmode.enabled");
+    let enabledPref = gPrivacyPreferences.get("privacy.trackingprotection.enabled");
+    let pbmPref = gPrivacyPreferences.get("privacy.trackingprotection.pbmode.enabled");
     let radiogroup = document.getElementById("trackingProtectionRadioGroup");
 
     switch (radiogroup.value) {
@@ -555,7 +554,7 @@ var gPrivacyPane = {
    */
   _checkHistoryValues(aPrefs) {
     for (let pref of Object.keys(aPrefs)) {
-      if (privacyPreferences.get(pref).value != aPrefs[pref])
+      if (gPrivacyPreferences.get(pref).value != aPrefs[pref])
         return false;
     }
     return true;
@@ -566,7 +565,7 @@ var gPrivacyPane = {
    */
   initializeHistoryMode() {
     let mode;
-    let getVal = aPref => privacyPreferences.get(aPref).value;
+    let getVal = aPref => gPrivacyPreferences.get(aPref).value;
 
     if (getVal("privacy.history.custom"))
       mode = "custom";
@@ -598,7 +597,7 @@ var gPrivacyPane = {
       break;
     }
     document.getElementById("historyPane").selectedIndex = selectedIndex;
-    privacyPreferences.get("privacy.history.custom").value = selectedIndex == 2;
+    gPrivacyPreferences.get("privacy.history.custom").value = selectedIndex == 2;
   },
 
   /**
@@ -606,25 +605,25 @@ var gPrivacyPane = {
    * micro-management prefs based on the history mode menulist
    */
   updateHistoryModePrefs() {
-    let pref = privacyPreferences.get("browser.privatebrowsing.autostart");
+    let pref = gPrivacyPreferences.get("browser.privatebrowsing.autostart");
     switch (document.getElementById("historyMode").value) {
     case "remember":
       if (pref.value)
         pref.value = false;
 
       // select the remember history option if needed
-      privacyPreferences.get("places.history.enabled").value = true;
+      gPrivacyPreferences.get("places.history.enabled").value = true;
 
       // select the remember forms history option
-      privacyPreferences.get("browser.formfill.enable").value = true;
+      gPrivacyPreferences.get("browser.formfill.enable").value = true;
 
       // select the allow cookies option
-      privacyPreferences.get("network.cookie.cookieBehavior").value = 0;
+      gPrivacyPreferences.get("network.cookie.cookieBehavior").value = 0;
       // select the cookie lifetime policy option
-      privacyPreferences.get("network.cookie.lifetimePolicy").value = 0;
+      gPrivacyPreferences.get("network.cookie.lifetimePolicy").value = 0;
 
       // select the clear on close option
-      privacyPreferences.get("privacy.sanitize.sanitizeOnShutdown").value = false;
+      gPrivacyPreferences.get("privacy.sanitize.sanitizeOnShutdown").value = false;
       break;
     case "dontremember":
       if (!pref.value)
@@ -652,13 +651,13 @@ var gPrivacyPane = {
           }
         }
 
-        let preference = preferenceId ? privacyPreferences.get(preferenceId) : {};
+        let preference = preferenceId ? gPrivacyPreferences.get(preferenceId) : {};
         control.disabled = disabled || preference.locked;
       });
 
       // adjust the cookie controls status
       this.readAcceptCookies();
-      let lifetimePolicy = privacyPreferences.get("network.cookie.lifetimePolicy").value;
+      let lifetimePolicy = gPrivacyPreferences.get("network.cookie.lifetimePolicy").value;
       if (lifetimePolicy != Ci.nsICookieService.ACCEPT_NORMALLY &&
           lifetimePolicy != Ci.nsICookieService.ACCEPT_SESSION &&
           lifetimePolicy != Ci.nsICookieService.ACCEPT_FOR_N_DAYS) {
@@ -668,13 +667,13 @@ var gPrivacyPane = {
 
       // adjust the checked state of the sanitizeOnShutdown checkbox
       document.getElementById("alwaysClear").checked = disabled ? false :
-        privacyPreferences.get("privacy.sanitize.sanitizeOnShutdown").value;
+        gPrivacyPreferences.get("privacy.sanitize.sanitizeOnShutdown").value;
 
       // adjust the checked state of the remember history checkboxes
       document.getElementById("rememberHistory").checked = disabled ? false :
-        privacyPreferences.get("places.history.enabled").value;
+        gPrivacyPreferences.get("places.history.enabled").value;
       document.getElementById("rememberForms").checked = disabled ? false :
-        privacyPreferences.get("browser.formfill.enable").value;
+        gPrivacyPreferences.get("browser.formfill.enable").value;
 
       if (!disabled) {
         // adjust the Settings button for sanitizeOnShutdown
@@ -700,7 +699,7 @@ var gPrivacyPane = {
   updateAutostart() {
       let mode = document.getElementById("historyMode");
       let autoStart = document.getElementById("privateBrowsingAutoStart");
-      let pref = privacyPreferences.get("browser.privatebrowsing.autostart");
+      let pref = gPrivacyPreferences.get("browser.privatebrowsing.autostart");
       if ((mode.value == "custom" && this._lastCheckState == autoStart.checked) ||
           (mode.value == "remember" && !this._lastCheckState) ||
           (mode.value == "dontremember" && this._lastCheckState)) {
@@ -819,7 +818,7 @@ var gPrivacyPane = {
    * if cookies are enabled.
    */
   readAcceptCookies() {
-    var pref = privacyPreferences.get("network.cookie.cookieBehavior");
+    var pref = gPrivacyPreferences.get("network.cookie.cookieBehavior");
     var acceptThirdPartyLabel = document.getElementById("acceptThirdPartyLabel");
     var acceptThirdPartyMenu = document.getElementById("acceptThirdPartyMenu");
     var keepUntil = document.getElementById("keepUntil");
@@ -853,7 +852,7 @@ var gPrivacyPane = {
    * Converts between network.cookie.cookieBehavior and the third-party cookie UI
    */
   readAcceptThirdPartyCookies() {
-    var pref = privacyPreferences.get("network.cookie.cookieBehavior");
+    var pref = gPrivacyPreferences.get("network.cookie.cookieBehavior");
     switch (pref.value) {
       case 0:
         return "always";
@@ -951,7 +950,7 @@ var gPrivacyPane = {
    */
   _updateSanitizeSettingsButton() {
     var settingsButton = document.getElementById("clearDataSettings");
-    var sanitizeOnShutdownPref = privacyPreferences.get("privacy.sanitize.sanitizeOnShutdown");
+    var sanitizeOnShutdownPref = gPrivacyPreferences.get("privacy.sanitize.sanitizeOnShutdown");
 
     settingsButton.disabled = !sanitizeOnShutdownPref.value;
    },
@@ -969,7 +968,7 @@ var gPrivacyPane = {
     * Enables/disables the Settings button used to configure containers
     */
    readBrowserContainersCheckbox() {
-     var pref = privacyPreferences.get("privacy.userContext.enabled");
+     var pref = gPrivacyPreferences.get("privacy.userContext.enabled");
      var settings = document.getElementById("browserContainersSettings");
 
      settings.disabled = !pref.value;
@@ -1026,7 +1025,7 @@ var gPrivacyPane = {
    */
   updateButtons(aButtonID, aPreferenceID) {
     var button = document.getElementById(aButtonID);
-    var preference = privacyPreferences.get(aPreferenceID);
+    var preference = gPrivacyPreferences.get(aPreferenceID);
     button.disabled = preference.value != true;
     return undefined;
   },
@@ -1146,7 +1145,7 @@ var gPrivacyPane = {
    * Browsing mode, the "Remember passwords" UI is useless, so we disable it.
    */
   readSavePasswords() {
-    var pref = privacyPreferences.get("signon.rememberSignons");
+    var pref = gPrivacyPreferences.get("signon.rememberSignons");
     var excepts = document.getElementById("passwordExceptions");
 
     if (PrivateBrowsingUtils.permanentPrivateBrowsing) {
@@ -1164,7 +1163,7 @@ var gPrivacyPane = {
    * or not add-on installation warnings are displayed.
    */
   readWarnAddonInstall() {
-    var warn = privacyPreferences.get("xpinstall.whitelist.required");
+    var warn = gPrivacyPreferences.get("xpinstall.whitelist.required");
     var exceptions = document.getElementById("addonExceptions");
 
     exceptions.disabled = !warn.value;
@@ -1178,14 +1177,14 @@ var gPrivacyPane = {
     let blockDownloads = document.getElementById("blockDownloads");
     let blockUncommonUnwanted = document.getElementById("blockUncommonUnwanted");
 
-    let safeBrowsingPhishingPref = privacyPreferences.get("browser.safebrowsing.phishing.enabled");
-    let safeBrowsingMalwarePref = privacyPreferences.get("browser.safebrowsing.malware.enabled");
+    let safeBrowsingPhishingPref = gPrivacyPreferences.get("browser.safebrowsing.phishing.enabled");
+    let safeBrowsingMalwarePref = gPrivacyPreferences.get("browser.safebrowsing.malware.enabled");
 
-    let blockDownloadsPref = privacyPreferences.get("browser.safebrowsing.downloads.enabled");
-    let malwareTable = privacyPreferences.get("urlclassifier.malwareTable");
+    let blockDownloadsPref = gPrivacyPreferences.get("browser.safebrowsing.downloads.enabled");
+    let malwareTable = gPrivacyPreferences.get("urlclassifier.malwareTable");
 
-    let blockUnwantedPref = privacyPreferences.get("browser.safebrowsing.downloads.remote.block_potentially_unwanted");
-    let blockUncommonPref = privacyPreferences.get("browser.safebrowsing.downloads.remote.block_uncommon");
+    let blockUnwantedPref = gPrivacyPreferences.get("browser.safebrowsing.downloads.remote.block_potentially_unwanted");
+    let blockUncommonPref = gPrivacyPreferences.get("browser.safebrowsing.downloads.remote.block_uncommon");
 
     enableSafeBrowsing.addEventListener("command", function() {
       safeBrowsingPhishingPref.value = enableSafeBrowsing.checked;
@@ -1288,7 +1287,7 @@ var gPrivacyPane = {
    * checked. Otherwise, it should be unchecked.
    */
   readEnableOCSP() {
-    var preference = privacyPreferences.get("security.OCSP.enabled");
+    var preference = gPrivacyPreferences.get("security.OCSP.enabled");
     // This is the case if the preference is the default value.
     if (preference.value === undefined) {
       return true;
@@ -1439,7 +1438,7 @@ var gPrivacyPane = {
   readSmartSizeEnabled() {
     // The smart_size.enabled preference element is inverted="true", so its
     // value is the opposite of the actual pref value
-    var disabled = privacyPreferences.get("browser.cache.disk.smart_size.enabled").value;
+    var disabled = gPrivacyPreferences.get("browser.cache.disk.smart_size.enabled").value;
     this.updateCacheSizeUI(!disabled);
   },
 
@@ -1455,7 +1454,7 @@ var gPrivacyPane = {
    */
   updateCacheSizeInputField() {
     let cacheSizeElem = document.getElementById("cacheSize");
-    let cachePref = privacyPreferences.get("browser.cache.disk.capacity");
+    let cachePref = gPrivacyPreferences.get("browser.cache.disk.capacity");
     cacheSizeElem.value = cachePref.value / 1024;
     if (cachePref.locked)
       cacheSizeElem.disabled = true;
@@ -1469,7 +1468,7 @@ var gPrivacyPane = {
    */
   updateCacheSizePref() {
     let cacheSizeElem = document.getElementById("cacheSize");
-    let cachePref = privacyPreferences.get("browser.cache.disk.capacity");
+    let cachePref = gPrivacyPreferences.get("browser.cache.disk.capacity");
     // Converts the cache size as specified in UI (in MB) to KB.
     let intValue = parseInt(cacheSizeElem.value, 10);
     cachePref.value = isNaN(intValue) ? 0 : intValue * 1024;
@@ -1611,7 +1610,7 @@ var gPrivacyPane = {
   },
 
   readOfflineNotify() {
-    var pref = privacyPreferences.get("browser.offline-apps.notify");
+    var pref = gPrivacyPreferences.get("browser.offline-apps.notify");
     var button = document.getElementById("offlineNotifyExceptions");
     button.disabled = !pref.value;
     return pref.value;
diff --git a/browser/components/preferences/in-content-new/tests/browser_sanitizeOnShutdown_prefLocked.js b/browser/components/preferences/in-content-new/tests/browser_sanitizeOnShutdown_prefLocked.js
index f40919cb6c26..16a2b2c22306 100644
--- a/browser/components/preferences/in-content-new/tests/browser_sanitizeOnShutdown_prefLocked.js
+++ b/browser/components/preferences/in-content-new/tests/browser_sanitizeOnShutdown_prefLocked.js
@@ -13,7 +13,7 @@ function testPrefStateMatchesLockedState() {
   switchToCustomHistoryMode(doc);
 
   let checkbox = doc.getElementById("alwaysClear");
-  let preference = win.privacyPreferences.get("privacy.sanitize.sanitizeOnShutdown");
+  let preference = win.gPrivacyPreferences.get("privacy.sanitize.sanitizeOnShutdown");
   is(checkbox.disabled, preference.locked, "Always Clear checkbox should be enabled when preference is not locked.");
 
   Services.prefs.clearUserPref("privacy.history.custom");
diff --git a/browser/components/preferences/in-content-new/tests/privacypane_tests_perwindow.js b/browser/components/preferences/in-content-new/tests/privacypane_tests_perwindow.js
index 82fb5956c14a..ea8dad7f19d7 100644
--- a/browser/components/preferences/in-content-new/tests/privacypane_tests_perwindow.js
+++ b/browser/components/preferences/in-content-new/tests/privacypane_tests_perwindow.js
@@ -311,13 +311,13 @@ function test_locbar_suggestion_retention(suggestion, autocomplete) {
 const gPrefCache = new Map();
 
 function cache_preferences(win) {
-  let prefs = win.privacyPreferences.getAll("privacy");
+  let prefs = win.gPrivacyPreferences.getAll("privacy");
   for (let pref of prefs)
     gPrefCache.set(pref.name, pref.value);
 }
 
 function reset_preferences(win) {
-  let prefs = win.privacyPreferences.getAll("privacy");
+  let prefs = win.gPrivacyPreferences.getAll("privacy");
   for (let pref of prefs)
     pref.value = gPrefCache.get(pref.name);
 }

From 0d4213127bb95d23f5b1f8dcdab4de7f56743e6f Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Wed, 5 Jul 2017 16:44:30 -0700
Subject: [PATCH 026/106] get prefs from global static method

---
 toolkit/mozapps/preferences/fontbuilder.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/toolkit/mozapps/preferences/fontbuilder.js b/toolkit/mozapps/preferences/fontbuilder.js
index db2c1e9f563f..72220f768a3a 100644
--- a/toolkit/mozapps/preferences/fontbuilder.js
+++ b/toolkit/mozapps/preferences/fontbuilder.js
@@ -94,7 +94,7 @@ var FontBuilder = {
     // XXX Stop getting preference element once we've converted fonts.xul
     // from XBL <preference> elements to JS Preference objects.
     let preference = document.getElementById(aElement.getAttribute("preference")) ||
-                     mainPreferences.get(aElement.getAttribute("preference"));
+                     Preferences.get(aElement.getAttribute("preference"));
     if (preference.value) {
       let fontItems = aElement.getElementsByAttribute("value", preference.value);
 

From 5ca80ce9012a7a109820b54108b3a9a1f3ddecd7 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Wed, 5 Jul 2017 16:44:39 -0700
Subject: [PATCH 027/106] add note to investigate something further

---
 browser/components/preferences/in-content-new/main.js | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/browser/components/preferences/in-content-new/main.js b/browser/components/preferences/in-content-new/main.js
index 66637b9cf77a..10a4bd00e68f 100644
--- a/browser/components/preferences/in-content-new/main.js
+++ b/browser/components/preferences/in-content-new/main.js
@@ -29,6 +29,8 @@ if (AppConstants.MOZ_DEV_EDITION) {
 // XXX Rename this to gMainPrefs.
 // We assign the instance to window.gMainPreferences so tests can access it.
 const gMainPreferences = window.gMainPreferences = new Preferences();
+// XXX Figure out why this needs to happen at execute time in order for
+// the prefs it adds to be available to gApplicationsPane.init.
 gMainPreferences.addAll({
   category: "main",
   preferences: [

From 6af17d3ff865d4cb6ae5e7198dd2fcfebb5b8a6d Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Thu, 6 Jul 2017 10:57:26 -0700
Subject: [PATCH 028/106] scriptify applications XBL

---
 .../preferences/in-content-new/applications.js     | 66 ++++++++++++++++------
 .../preferences/in-content-new/applications.xul    | 45 ---------------
 2 files changed, 48 insertions(+), 63 deletions(-)

diff --git a/browser/components/preferences/in-content-new/applications.js b/browser/components/preferences/in-content-new/applications.js
index aa3a60bcd6e1..206c7db73f96 100644
--- a/browser/components/preferences/in-content-new/applications.js
+++ b/browser/components/preferences/in-content-new/applications.js
@@ -78,6 +78,34 @@ const ICON_URL_APP = AppConstants.platform == "linux" ?
 // was set by us to a custom handler icon and CSS should not try to override it.
 const APP_ICON_ATTR_NAME = "appHandlerIcon";
 
+// Preference object
+
+const gAppPreferences = window.gAppPreferences = new Preferences();
+
+function initAppPreferences() {
+  gAppPreferences.addAll({
+    category: "applications",
+    preferences: [
+      { id: "browser.feeds.handler", name: "browser.feeds.handler", type: "string" },
+      { id: "browser.feeds.handler.default", name: "browser.feeds.handler.default", type: "string" },
+      { id: "browser.feeds.handlers.application", name: "browser.feeds.handlers.application", type: "file" },
+      { id: "browser.feeds.handlers.webservice", name: "browser.feeds.handlers.webservice", type: "string" },
+
+      { id: "browser.videoFeeds.handler", name: "browser.videoFeeds.handler", type: "string" },
+      { id: "browser.videoFeeds.handler.default", name: "browser.videoFeeds.handler.default", type: "string" },
+      { id: "browser.videoFeeds.handlers.application", name: "browser.videoFeeds.handlers.application", type: "file" },
+      { id: "browser.videoFeeds.handlers.webservice", name: "browser.videoFeeds.handlers.webservice", type: "string" },
+
+      { id: "browser.audioFeeds.handler", name: "browser.audioFeeds.handler", type: "string" },
+      { id: "browser.audioFeeds.handler.default", name: "browser.audioFeeds.handler.default", type: "string" },
+      { id: "browser.audioFeeds.handlers.application", name: "browser.audioFeeds.handlers.application", type: "file" },
+      { id: "browser.audioFeeds.handlers.webservice", name: "browser.audioFeeds.handlers.webservice", type: "string" },
+
+      { id: "pref.downloads.disable_button.edit_actions", name: "pref.downloads.disable_button.edit_actions", type: "bool" },
+    ],
+  });
+}
+
 // Utilities
 
 function getFileDisplayName(file) {
@@ -479,16 +507,16 @@ FeedHandlerInfo.prototype = {
   },
 
   get preferredApplicationHandler() {
-    switch (this.element(this._prefSelectedReader).value) {
+    switch (gAppPreferences.get(this._prefSelectedReader).value) {
       case "client":
-        var file = this.element(this._prefSelectedApp).value;
+        var file = gAppPreferences.get(this._prefSelectedApp).value;
         if (file)
           return getLocalHandlerApp(file);
 
         return null;
 
       case "web":
-        var uri = this.element(this._prefSelectedWeb).value;
+        var uri = gAppPreferences.get(this._prefSelectedWeb).value;
         if (!uri)
           return null;
         return this._converterSvc.getWebContentHandlerByURI(this.type, uri);
@@ -504,11 +532,11 @@ FeedHandlerInfo.prototype = {
 
   set preferredApplicationHandler(aNewValue) {
     if (aNewValue instanceof Ci.nsILocalHandlerApp) {
-      this.element(this._prefSelectedApp).value = aNewValue.executable;
-      this.element(this._prefSelectedReader).value = "client";
+      gAppPreferences.get(this._prefSelectedApp).value = aNewValue.executable;
+      gAppPreferences.get(this._prefSelectedReader).value = "client";
     } else if (aNewValue instanceof Ci.nsIWebContentHandlerInfo) {
-      this.element(this._prefSelectedWeb).value = aNewValue.uri;
-      this.element(this._prefSelectedReader).value = "web";
+      gAppPreferences.get(this._prefSelectedWeb).value = aNewValue.uri;
+      gAppPreferences.get(this._prefSelectedReader).value = "web";
       // Make the web handler be the new "auto handler" for feeds.
       // Note: we don't have to unregister the auto handler when the user picks
       // a non-web handler (local app, Live Bookmarks, etc.) because the service
@@ -568,7 +596,7 @@ FeedHandlerInfo.prototype = {
     // only a single path.  But we display all the local apps the user chooses
     // while the prefpane is open, only dropping the list when the user closes
     // the prefpane, for maximum usability and consistency with other types.
-    var preferredAppFile = this.element(this._prefSelectedApp).value;
+    var preferredAppFile = gAppPreferences.get(this._prefSelectedApp).value;
     if (preferredAppFile) {
       let preferredApp = getLocalHandlerApp(preferredAppFile);
       let defaultApp = this._defaultApplicationHandler;
@@ -636,7 +664,7 @@ FeedHandlerInfo.prototype = {
 
   // What to do with content of this type.
   get preferredAction() {
-    switch (this.element(this._prefSelectedAction).value) {
+    switch (gAppPreferences.get(this._prefSelectedAction).value) {
 
       case "bookmarks":
         return Ci.nsIHandlerInfo.handleInternally;
@@ -674,31 +702,31 @@ FeedHandlerInfo.prototype = {
     switch (aNewValue) {
 
       case Ci.nsIHandlerInfo.handleInternally:
-        this.element(this._prefSelectedReader).value = "bookmarks";
+        gAppPreferences.get(this._prefSelectedReader).value = "bookmarks";
         break;
 
       case Ci.nsIHandlerInfo.useHelperApp:
-        this.element(this._prefSelectedAction).value = "reader";
+        gAppPreferences.get(this._prefSelectedAction).value = "reader";
         // The controller has already set preferredApplicationHandler
         // to the new helper app.
         break;
 
       case Ci.nsIHandlerInfo.useSystemDefault:
-        this.element(this._prefSelectedAction).value = "reader";
+        gAppPreferences.get(this._prefSelectedAction).value = "reader";
         this.preferredApplicationHandler = this._defaultApplicationHandler;
         break;
     }
   },
 
   get alwaysAskBeforeHandling() {
-    return this.element(this._prefSelectedAction).value == "ask";
+    return gAppPreferences.get(this._prefSelectedAction).value == "ask";
   },
 
   set alwaysAskBeforeHandling(aNewValue) {
     if (aNewValue == true)
-      this.element(this._prefSelectedAction).value = "ask";
+      gAppPreferences.get(this._prefSelectedAction).value = "ask";
     else
-      this.element(this._prefSelectedAction).value = "reader";
+      gAppPreferences.get(this._prefSelectedAction).value = "reader";
   },
 
   // Whether or not we are currently storing the action selected by the user.
@@ -872,6 +900,8 @@ var gApplicationsPane = {
   // Initialization & Destruction
 
   init() {
+    initAppPreferences();
+
     function setEventListener(aId, aEventType, aCallback) {
       document.getElementById(aId)
               .addEventListener(aEventType, aCallback.bind(gApplicationsPane));
@@ -1955,7 +1985,7 @@ var gApplicationsPane = {
   async chooseFolderTask() {
     let bundlePreferences = document.getElementById("bundlePreferences");
     let title = bundlePreferences.getString("chooseDownloadFolderTitle");
-    let folderListPref = document.getElementById("browser.download.folderList");
+    let folderListPref = gMainPreferences.get("browser.download.folderList");
     let currentDirPref = await this._indexToFolder(folderListPref.value);
     let defDownloads = await this._indexToFolder(1);
     let fp = Components.classes["@mozilla.org/filepicker;1"].
@@ -1979,7 +2009,7 @@ var gApplicationsPane = {
       return;
     }
 
-    let downloadDirPref = document.getElementById("browser.download.dir");
+    let downloadDirPref = gMainPreferences.get("browser.download.dir");
     downloadDirPref.value = fp.file;
     folderListPref.value = await this._folderToIndex(fp.file);
     // Note, the real prefs will not be updated yet, so dnld manager's
@@ -2094,7 +2124,7 @@ var gApplicationsPane = {
       case 1:
         return await this._getDownloadsFolder("Downloads");
     }
-    var currentDirPref = document.getElementById("browser.download.dir");
+    var currentDirPref = gMainPreferences.get("browser.download.dir");
     return currentDirPref.value;
   }
 
diff --git a/browser/components/preferences/in-content-new/applications.xul b/browser/components/preferences/in-content-new/applications.xul
index a55680391774..b7c97b9045c5 100644
--- a/browser/components/preferences/in-content-new/applications.xul
+++ b/browser/components/preferences/in-content-new/applications.xul
@@ -7,51 +7,6 @@
 <script type="application/javascript"
         src="chrome://browser/content/preferences/in-content-new/applications.js"/>
 
-<preferences id="feedsPreferences" hidden="true" data-category="paneApplications">
-  <preference id="browser.feeds.handler"
-              name="browser.feeds.handler"
-              type="string"/>
-  <preference id="browser.feeds.handler.default"
-              name="browser.feeds.handler.default"
-              type="string"/>
-  <preference id="browser.feeds.handlers.application"
-              name="browser.feeds.handlers.application"
-              type="file"/>
-  <preference id="browser.feeds.handlers.webservice"
-              name="browser.feeds.handlers.webservice"
-              type="string"/>
-
-  <preference id="browser.videoFeeds.handler"
-              name="browser.videoFeeds.handler"
-              type="string"/>
-  <preference id="browser.videoFeeds.handler.default"
-              name="browser.videoFeeds.handler.default"
-              type="string"/>
-  <preference id="browser.videoFeeds.handlers.application"
-              name="browser.videoFeeds.handlers.application"
-              type="file"/>
-  <preference id="browser.videoFeeds.handlers.webservice"
-              name="browser.videoFeeds.handlers.webservice"
-              type="string"/>
-
-  <preference id="browser.audioFeeds.handler"
-              name="browser.audioFeeds.handler"
-              type="string"/>
-  <preference id="browser.audioFeeds.handler.default"
-              name="browser.audioFeeds.handler.default"
-              type="string"/>
-  <preference id="browser.audioFeeds.handlers.application"
-              name="browser.audioFeeds.handlers.application"
-              type="file"/>
-  <preference id="browser.audioFeeds.handlers.webservice"
-              name="browser.audioFeeds.handlers.webservice"
-              type="string"/>
-
-  <preference id="pref.downloads.disable_button.edit_actions"
-              name="pref.downloads.disable_button.edit_actions"
-              type="bool"/>
-</preferences>
-
 <keyset data-category="paneApplications">
   <!-- Ctrl+f/k focus the search box in the Applications pane.
        These <key>s have oncommand attributes because of bug 371900. -->

From 7c75fac12bd9b59fac2e158f2fed9ce622394326 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Thu, 6 Jul 2017 13:15:45 -0700
Subject: [PATCH 029/106] scriptify container XBL

---
 .../components/preferences/in-content-new/containers.js    | 14 ++++++++++++++
 .../components/preferences/in-content-new/containers.xul   |  8 --------
 2 files changed, 14 insertions(+), 8 deletions(-)

diff --git a/browser/components/preferences/in-content-new/containers.js b/browser/components/preferences/in-content-new/containers.js
index 3655fbc93f5d..e6eeafc24a21 100644
--- a/browser/components/preferences/in-content-new/containers.js
+++ b/browser/components/preferences/in-content-new/containers.js
@@ -12,9 +12,23 @@ const containersBundle = Services.strings.createBundle("chrome://browser/locale/
 const defaultContainerIcon = "fingerprint";
 const defaultContainerColor = "blue";
 
+const gContainerPreferences = window.gContainerPreferences = new Preferences();
+
+function initContainerPreferences() {
+  // XXX Figure out why this is here when it's only ever used by privacy.js.
+  gContainerPreferences.addAll({
+    category: "container",
+    preferences: [
+      { id: "privacy.userContext.enabled", name: "privacy.userContext.enabled", type: "bool" },
+    ],
+  });
+}
+
 let gContainersPane = {
 
   init() {
+    initContainerPreferences();
+
     this._list = document.getElementById("containersView");
 
     document.getElementById("backContainersLink").addEventListener("click", function() {
diff --git a/browser/components/preferences/in-content-new/containers.xul b/browser/components/preferences/in-content-new/containers.xul
index 96043a008517..80dee40a4ac6 100644
--- a/browser/components/preferences/in-content-new/containers.xul
+++ b/browser/components/preferences/in-content-new/containers.xul
@@ -7,14 +7,6 @@
 <script type="application/javascript"
         src="chrome://browser/content/preferences/in-content-new/containers.js"/>
 
-<preferences id="containerPreferences" hidden="true" data-category="paneContainer">
-  <!-- Containers -->
-  <preference id="privacy.userContext.enabled"
-              name="privacy.userContext.enabled"
-              type="bool"/>
-
-</preferences>
-
 <hbox hidden="true"
       class="container-header-links"
       data-category="paneContainers">

From 8788659356847b67237dc32b19d1e2399c5cebcb Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Thu, 6 Jul 2017 13:25:20 -0700
Subject: [PATCH 030/106] scriptify advanced preferences

---
 .../preferences/in-content-new/advanced.js         | 35 +++++++++++++++++++---
 .../preferences/in-content-new/advanced.xul        | 30 -------------------
 .../components/preferences/in-content-new/jar.mn   |  2 +-
 3 files changed, 32 insertions(+), 35 deletions(-)

diff --git a/browser/components/preferences/in-content-new/advanced.js b/browser/components/preferences/in-content-new/advanced.js
index e575db2acca8..730eb5621a34 100644
--- a/browser/components/preferences/in-content-new/advanced.js
+++ b/browser/components/preferences/in-content-new/advanced.js
@@ -10,10 +10,37 @@ Components.utils.import("resource://gre/modules/DownloadUtils.jsm");
 Components.utils.import("resource://gre/modules/LoadContextInfo.jsm");
 Components.utils.import("resource://gre/modules/XPCOMUtils.jsm");
 
+const gAdvancedPreferences = window.gAdvancedPreferences = new Preferences();
+
+function initAdvancedPreferences() {
+  gAdvancedPreferences.addAll({
+    category: "advanced",
+    preferences: [
+      { id: "browser.preferences.advanced.selectedTabIndex", name: "browser.preferences.advanced.selectedTabIndex", type: "int" },
+
+      // Update tab
+#ifdef MOZ_UPDATER
+      { id: "app.update.enabled", name: "app.update.enabled", type: "bool" },
+      { id: "app.update.auto", name: "app.update.auto", type: "bool" },
+
+      { id: "app.update.disable_button.showUpdateHistory", name: "app.update.disable_button.showUpdateHistory", type: "bool" },
+
+#ifdef MOZ_MAINTENANCE_SERVICE
+      { id: "app.update.service.enabled", name: "app.update.service.enabled", type: "bool" },
+#endif
+#endif
+
+      { id: "browser.search.update", name: "browser.search.update", type: "bool" },
+    ],
+  });
+}
+
 var gAdvancedPane = {
   _inited: false,
 
   init() {
+    initAdvancedPreferences();
+
     function setEventListener(aId, aEventType, aCallback) {
       document.getElementById(aId)
               .addEventListener(aEventType, aCallback.bind(gAdvancedPane));
@@ -119,8 +146,8 @@ var gAdvancedPane = {
    */
   updateReadPrefs() {
     if (AppConstants.MOZ_UPDATER) {
-      var enabledPref = document.getElementById("app.update.enabled");
-      var autoPref = document.getElementById("app.update.auto");
+      var enabledPref = gAdvancedPreferences.get("app.update.enabled");
+      var autoPref = gAdvancedPreferences.get("app.update.auto");
       var radiogroup = document.getElementById("updateRadioGroup");
 
       if (!enabledPref.value)   // Don't care for autoPref.value in this case.
@@ -164,8 +191,8 @@ var gAdvancedPane = {
    */
   updateWritePrefs() {
     if (AppConstants.MOZ_UPDATER) {
-      var enabledPref = document.getElementById("app.update.enabled");
-      var autoPref = document.getElementById("app.update.auto");
+      var enabledPref = gAdvancedPreferences.get("app.update.enabled");
+      var autoPref = gAdvancedPreferences.get("app.update.auto");
       var radiogroup = document.getElementById("updateRadioGroup");
       switch (radiogroup.value) {
         case "auto":      // 1. Automatically install updates for Desktop only
diff --git a/browser/components/preferences/in-content-new/advanced.xul b/browser/components/preferences/in-content-new/advanced.xul
index c25d4a2f47fd..3bdd14c643ac 100644
--- a/browser/components/preferences/in-content-new/advanced.xul
+++ b/browser/components/preferences/in-content-new/advanced.xul
@@ -11,36 +11,6 @@
 <script type="application/javascript"
         src="chrome://browser/content/preferences/in-content-new/advanced.js"/>
 
-<preferences id="advancedPreferences" hidden="true" data-category="paneAdvanced">
-  <preference id="browser.preferences.advanced.selectedTabIndex"
-              name="browser.preferences.advanced.selectedTabIndex"
-              type="int"/>
-
-<!-- Update tab -->
-#ifdef MOZ_UPDATER
-  <preference id="app.update.enabled"
-              name="app.update.enabled"
-              type="bool"/>
-  <preference id="app.update.auto"
-              name="app.update.auto"
-              type="bool"/>
-
-  <preference id="app.update.disable_button.showUpdateHistory"
-              name="app.update.disable_button.showUpdateHistory"
-              type="bool"/>
-
-#ifdef MOZ_MAINTENANCE_SERVICE
-  <preference id="app.update.service.enabled"
-              name="app.update.service.enabled"
-              type="bool"/>
-#endif
-#endif
-
-  <preference id="browser.search.update"
-              name="browser.search.update"
-              type="bool"/>
-</preferences>
-
 #ifdef HAVE_SHELL_SERVICE
   <stringbundle id="bundleShell" src="chrome://browser/locale/shellservice.properties"/>
   <stringbundle id="bundleBrand" src="chrome://branding/locale/brand.properties"/>
diff --git a/browser/components/preferences/in-content-new/jar.mn b/browser/components/preferences/in-content-new/jar.mn
index 15774dc8fabe..ef212c6c1fef 100644
--- a/browser/components/preferences/in-content-new/jar.mn
+++ b/browser/components/preferences/in-content-new/jar.mn
@@ -10,7 +10,7 @@ browser.jar:
 *  content/browser/preferences/in-content-new/main.js
 *  content/browser/preferences/in-content-new/privacy.js
    content/browser/preferences/in-content-new/containers.js
-   content/browser/preferences/in-content-new/advanced.js
+*  content/browser/preferences/in-content-new/advanced.js
    content/browser/preferences/in-content-new/applications.js
    content/browser/preferences/in-content-new/sync.js
    content/browser/preferences/in-content-new/findInPage.js

From 81347991ad106b792dcbd06c08daea927e344e80 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Thu, 6 Jul 2017 13:45:11 -0700
Subject: [PATCH 031/106] move privacy.userContext.enabled pref to the script
 that accesses it

---
 .../components/preferences/in-content-new/containers.js    | 14 --------------
 browser/components/preferences/in-content-new/privacy.js   |  2 ++
 2 files changed, 2 insertions(+), 14 deletions(-)

diff --git a/browser/components/preferences/in-content-new/containers.js b/browser/components/preferences/in-content-new/containers.js
index e6eeafc24a21..3655fbc93f5d 100644
--- a/browser/components/preferences/in-content-new/containers.js
+++ b/browser/components/preferences/in-content-new/containers.js
@@ -12,23 +12,9 @@ const containersBundle = Services.strings.createBundle("chrome://browser/locale/
 const defaultContainerIcon = "fingerprint";
 const defaultContainerColor = "blue";
 
-const gContainerPreferences = window.gContainerPreferences = new Preferences();
-
-function initContainerPreferences() {
-  // XXX Figure out why this is here when it's only ever used by privacy.js.
-  gContainerPreferences.addAll({
-    category: "container",
-    preferences: [
-      { id: "privacy.userContext.enabled", name: "privacy.userContext.enabled", type: "bool" },
-    ],
-  });
-}
-
 let gContainersPane = {
 
   init() {
-    initContainerPreferences();
-
     this._list = document.getElementById("containersView");
 
     document.getElementById("backContainersLink").addEventListener("click", function() {
diff --git a/browser/components/preferences/in-content-new/privacy.js b/browser/components/preferences/in-content-new/privacy.js
index 52c00bed8da9..d7d53ec8f41c 100644
--- a/browser/components/preferences/in-content-new/privacy.js
+++ b/browser/components/preferences/in-content-new/privacy.js
@@ -40,6 +40,8 @@ function initPrivacyPreferences() {
   gPrivacyPreferences.addAll({
     category: "privacy",
     preferences: [
+      { id: "privacy.userContext.enabled", name: "privacy.userContext.enabled", type: "bool" },
+
       // Tracking
       { id: "privacy.trackingprotection.enabled", name: "privacy.trackingprotection.enabled", type: "bool" },
       { id: "privacy.trackingprotection.pbmode.enabled", name: "privacy.trackingprotection.pbmode.enabled", type: "bool" },

From aa8a94a7699485438b5758aefc2e7e6a2cd7f002 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Thu, 6 Jul 2017 16:15:07 -0700
Subject: [PATCH 032/106] scriptify sync preferences

---
 .../components/preferences/in-content-new/sync.js   | 19 +++++++++++++++++++
 .../components/preferences/in-content-new/sync.xul  | 21 ---------------------
 2 files changed, 19 insertions(+), 21 deletions(-)

diff --git a/browser/components/preferences/in-content-new/sync.js b/browser/components/preferences/in-content-new/sync.js
index 86e8f0613cc2..9b186d7b4a0a 100644
--- a/browser/components/preferences/in-content-new/sync.js
+++ b/browser/components/preferences/in-content-new/sync.js
@@ -25,7 +25,24 @@ const FXA_LOGIN_UNVERIFIED = 1;
 // We are logged in locally, but the server rejected our credentials.
 const FXA_LOGIN_FAILED = 2;
 
+const gSyncEnginePrefs = window.gSyncEnginePrefs = new Preferences();
+
+function initSyncEnginePrefs() {
+  gSyncEnginePrefs.addAll({
+    category: "sync",
+    preferences: [
+      { id: "engine.addons", name: "services.sync.engine.addons", type: "bool" },
+      { id: "engine.bookmarks", name: "services.sync.engine.bookmarks", type: "bool" },
+      { id: "engine.history", name: "services.sync.engine.history", type: "bool" },
+      { id: "engine.tabs", name: "services.sync.engine.tabs", type: "bool" },
+      { id: "engine.prefs", name: "services.sync.engine.prefs", type: "bool" },
+      { id: "engine.passwords", name: "services.sync.engine.passwords", type: "bool" },
+    ],
+  });
+}
+
 var gSyncPane = {
+  // XXX Remove this unused property.
   prefArray: ["engine.bookmarks", "engine.passwords", "engine.prefs",
               "engine.tabs", "engine.history"],
 
@@ -38,6 +55,8 @@ var gSyncPane = {
   },
 
   init() {
+    initSyncEnginePrefs();
+
     this._setupEventListeners();
 
     // If the Service hasn't finished initializing, wait for it.
diff --git a/browser/components/preferences/in-content-new/sync.xul b/browser/components/preferences/in-content-new/sync.xul
index 7c0568fcd0b2..ead3968b2f5c 100755
--- a/browser/components/preferences/in-content-new/sync.xul
+++ b/browser/components/preferences/in-content-new/sync.xul
@@ -4,27 +4,6 @@
 
 <!-- Sync panel -->
 
-<preferences id="syncEnginePrefs" hidden="true" data-category="paneSync">
-  <preference id="engine.addons"
-              name="services.sync.engine.addons"
-              type="bool"/>
-  <preference id="engine.bookmarks"
-              name="services.sync.engine.bookmarks"
-              type="bool"/>
-  <preference id="engine.history"
-              name="services.sync.engine.history"
-              type="bool"/>
-  <preference id="engine.tabs"
-              name="services.sync.engine.tabs"
-              type="bool"/>
-  <preference id="engine.prefs"
-              name="services.sync.engine.prefs"
-              type="bool"/>
-  <preference id="engine.passwords"
-              name="services.sync.engine.passwords"
-              type="bool"/>
-</preferences>
-
 <script type="application/javascript"
         src="chrome://browser/content/preferences/in-content-new/sync.js"/>
 

From aabba51719fdc2edc19eacf20b5879758ba06875 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Thu, 6 Jul 2017 16:38:43 -0700
Subject: [PATCH 033/106] remove last <preference> reference

---
 browser/components/preferences/in-content-new/preferences.js | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index c26c934e911f..46c0bce57216 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -548,9 +548,11 @@ Object.assign(Preference.prototype, {
   batching: false,
 
   _reportUnknownType() {
+    // XXX Instead of reporting an unknown type, throw an exception
+    // if a Preference object is instantiated with an unknown type.
     var consoleService = Components.classes["@mozilla.org/consoleservice;1"]
                                    .getService(Components.interfaces.nsIConsoleService);
-    var msg = "<preference> with id='" + this.id + "' and name='" +
+    var msg = "Preference with id='" + this.id + "' and name='" +
               this.name + "' has unknown type '" + this.type + "'.";
     consoleService.logStringMessage(msg);
   },

From de8f34501d0b1d06737e85fcb4d5aad2d796897e Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Thu, 6 Jul 2017 17:32:05 -0700
Subject: [PATCH 034/106] identify element being tested for
 visibility/hiddenness

---
 browser/components/preferences/in-content-new/tests/head.js | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/browser/components/preferences/in-content-new/tests/head.js b/browser/components/preferences/in-content-new/tests/head.js
index e3bd6046374f..d99688bfe02d 100644
--- a/browser/components/preferences/in-content-new/tests/head.js
+++ b/browser/components/preferences/in-content-new/tests/head.js
@@ -30,12 +30,12 @@ function is_hidden(aElement) {
 
 function is_element_visible(aElement, aMsg) {
   isnot(aElement, null, "Element should not be null, when checking visibility");
-  ok(!is_hidden(aElement), aMsg);
+  ok(!is_hidden(aElement), `<${aElement.tagName} id="${aElement.id}"> ${aMsg}`);
 }
 
 function is_element_hidden(aElement, aMsg) {
   isnot(aElement, null, "Element should not be null, when checking visibility");
-  ok(is_hidden(aElement), aMsg);
+  ok(is_hidden(aElement), `<${aElement.tagName} id="${aElement.id}"> ${aMsg}`);
 }
 
 function open_preferences(aCallback) {

From 258437f10c052eebe96ba7806e776f637ae27690 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 7 Jul 2017 09:59:20 -0700
Subject: [PATCH 035/106] convert prefpane XBL to JS

---
 .../preferences/in-content-new/preferences.js      | 183 +++++++++++++++++++++
 .../preferences/in-content-new/preferences.xul     |   5 +-
 browser/themes/linux/preferences/preferences.css   |   5 +
 browser/themes/osx/preferences/preferences.css     |   9 +-
 browser/themes/windows/preferences/preferences.css |   8 +
 5 files changed, 205 insertions(+), 5 deletions(-)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 46c0bce57216..4c00b05799ef 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -91,6 +91,13 @@ function init_all() {
   let helpUrl = Services.urlFormatter.formatURLPref("app.support.baseURL") + "preferences";
   helpButton.setAttribute("href", helpUrl);
 
+  let mainPrefPane = document.getElementById("mainPrefPane");
+  mainPrefPane.addEventListener("command", MainPrefPane.onCommand.bind(MainPrefPane));
+  mainPrefPane.addEventListener("select", MainPrefPane.onSelect.bind(MainPrefPane));
+  mainPrefPane.addEventListener("change", MainPrefPane.onChange.bind(MainPrefPane));
+  mainPrefPane.addEventListener("input", MainPrefPane.onInput.bind(MainPrefPane));
+  mainPrefPane.addEventListener("paneload", MainPrefPane.onPaneLoad.bind(MainPrefPane));
+
   // Wait until initialization of all preferences are complete before
   // notifying observers that the UI is now ready.
   Services.obs.notifyObservers(window, "advanced-pane-loaded");
@@ -252,6 +259,7 @@ function search(aQuery, aAttribute, aSubquery, aSubAttribute) {
 function helpButtonCommand() {
   let pane = history.state;
   let categories = document.getElementById("categories");
+  // XXX Ensure this still works.
   let helpTopic = categories.querySelector(".category[value=" + pane + "]")
                             .getAttribute("helpTopic");
   openHelpLink(helpTopic);
@@ -869,3 +877,178 @@ Object.defineProperties(Preference.prototype, {
   },
 
 });
+
+const MainPrefPane = {
+  writePreferences(aFlushToDisk) {
+    // Write all values to preferences.
+    if (this._deferredValueUpdateElements.size) {
+      this._finalizeDeferredElements();
+    }
+
+    var preferences = this.preferences;
+    for (var i = 0; i < preferences.length; ++i) {
+      var preference = preferences[i];
+      preference.batching = true;
+      preference.valueFromPreferences = preference.value;
+      preference.batching = false;
+    }
+    if (aFlushToDisk) {
+      var psvc = Components.classes["@mozilla.org/preferences-service;1"]
+                           .getService(Components.interfaces.nsIPrefService);
+      psvc.savePrefFile(null);
+    }
+  },
+
+  // XXX Figure out if these are still used and remove them if not.
+  src: '',
+  selected: false,
+  image: '',
+  label: '',
+
+  // XXX Figure out if these are still used and remove them if not.
+  get preferenceElements() {
+    return this.getElementsByAttribute('preference', '*');
+  },
+  get preferences() {
+    return Preferences.preferences;
+  },
+
+  // XXX Figure out if this is still used and fix or remove it accordingly.
+  get helpTopic() {
+    // if there are tabs, and the selected tab provides a helpTopic, return that
+    var box = this.getElementsByTagName("tabbox");
+    if (box[0]) {
+      var tab = box[0].selectedTab;
+      if (tab && tab.hasAttribute("helpTopic"))
+        return tab.getAttribute("helpTopic");
+    }
+
+    // otherwise, return the helpTopic of the current panel
+    return this.getAttribute("helpTopic");
+  },
+
+  _loaded: false,
+  get loaded() {
+    return !this.src ? true : this._loaded;
+  },
+  set loaded(val) {
+    this._loaded = val;
+    return val;
+  },
+
+  preferenceForElement(aElement) {
+    return Preferences.get(aElement.getAttribute("preference"));
+  },
+
+  getPreferenceElement(aStartElement) {
+    var temp = aStartElement;
+    while (temp && temp.nodeType == Node.ELEMENT_NODE &&
+           !temp.hasAttribute("preference"))
+      temp = temp.parentNode;
+    return temp && temp.nodeType == Node.ELEMENT_NODE ?
+           temp : aStartElement;
+  },
+
+  get DeferredTask() {
+    let module = {};
+    Components.utils.import("resource://gre/modules/DeferredTask.jsm", module);
+    Object.defineProperty(this, "DeferredTask", {
+      configurable: true,
+      enumerable: true,
+      writable: true,
+      value: module.DeferredTask
+    });
+    return module.DeferredTask;
+  },
+
+  _deferredValueUpdate(aElement) {
+    delete aElement._deferredValueUpdateTask;
+    let prefID = aElement.getAttribute("preference");
+    let preference = window.Preferences.get(prefID);
+    let prefVal = preference.getElementValue(aElement);
+    preference.value = prefVal;
+    this._deferredValueUpdateElements.delete(aElement);
+  },
+
+  _deferredValueUpdateElements: new Set(),
+
+  _finalizeDeferredElements() {
+    for (let el of this._deferredValueUpdateElements) {
+      if (el._deferredValueUpdateTask) {
+        el._deferredValueUpdateTask.finalize();
+      }
+    }
+  },
+
+  userChangedValue(aElement) {
+    let element = this.getPreferenceElement(aElement);
+    if (element.hasAttribute("preference")) {
+      if (element.getAttribute("delayprefsave") != "true") {
+        var preference = Preferences.get(element.getAttribute("preference"));
+        var prefVal = preference.getElementValue(element);
+        preference.value = prefVal;
+      } else {
+        if (!element._deferredValueUpdateTask) {
+          element._deferredValueUpdateTask = new this.DeferredTask(this._deferredValueUpdate.bind(this, element), 1000);
+          this._deferredValueUpdateElements.add(element);
+        } else {
+          // Each time the preference is changed, restart the delay.
+          element._deferredValueUpdateTask.disarm();
+        }
+        element._deferredValueUpdateTask.arm();
+      }
+    }
+  },
+
+  // XXX Remove these unused getters.
+  get contentHeight() {
+    var targetHeight = parseInt(window.getComputedStyle(this._content).height);
+    targetHeight += parseInt(window.getComputedStyle(this._content).marginTop);
+    targetHeight += parseInt(window.getComputedStyle(this._content).marginBottom);
+    return targetHeight;
+  },
+  get _content() {
+    return document.getElementById('mainPrefPane');
+  },
+
+  onCommand(event) {
+    // This "command" event handler tracks changes made to preferences by
+    // the user in this window.
+    if (event.sourceEvent)
+      event = event.sourceEvent;
+    this.userChangedValue(event.target);
+  },
+
+  onSelect(event) {
+    // This "select" event handler tracks changes made to colorpicker
+    // preferences by the user in this window.
+    if (event.target.localName == "colorpicker")
+      this.userChangedValue(event.target);
+  },
+
+  onChange(event) {
+    // This "change" event handler tracks changes made to preferences by
+    // the user in this window.
+    this.userChangedValue(event.target);
+  },
+
+  onInput(event) {
+    // This "input" event handler tracks changes made to preferences by
+    // the user in this window.
+    this.userChangedValue(event.target);
+  },
+
+  // XXX Figure out if this is actually needed and remove or fix it accordingly.
+  onPaneLoad(event) {
+    // Initialize all values from preferences.
+    var elements = this.preferenceElements;
+    for (var i = 0; i < elements.length; ++i) {
+      try {
+        var preference = this.preferenceForElement(elements[i]);
+        preference.setElementValue(elements[i]);
+      } catch (e) {
+        dump("*** No preference found for " + elements[i].getAttribute("preference") + "\n");
+      }
+    }
+  },
+};
diff --git a/browser/components/preferences/in-content-new/preferences.xul b/browser/components/preferences/in-content-new/preferences.xul
index 0748e3688c54..26ba697e42f5 100644
--- a/browser/components/preferences/in-content-new/preferences.xul
+++ b/browser/components/preferences/in-content-new/preferences.xul
@@ -4,6 +4,7 @@
    - You can obtain one at http://mozilla.org/MPL/2.0/. -->
 
 <?xml-stylesheet href="chrome://global/skin/global.css"?>
+<?xml-stylesheet href="chrome://global/skin/preferences.css"?>
 
 <?xml-stylesheet href="chrome://browser/skin/preferences/preferences.css"?>
 <?xml-stylesheet href="chrome://global/skin/in-content/common.css"?>
@@ -205,7 +206,7 @@
         <textbox type="search" id="searchInput" placeholder="&searchInput.label;" hidden="true"
                  clickSelectsAll="true"/>
       </hbox>
-      <prefpane id="mainPrefPane">
+      <vbox id="mainPrefPane">
 #include searchResults.xul
 #include main.xul
 #include privacy.xul
@@ -213,7 +214,7 @@
 #include advanced.xul
 #include applications.xul
 #include sync.xul
-      </prefpane>
+      </vbox>
     </vbox>
   </hbox>
 
diff --git a/browser/themes/linux/preferences/preferences.css b/browser/themes/linux/preferences/preferences.css
index 57558271c193..a51375eca635 100644
--- a/browser/themes/linux/preferences/preferences.css
+++ b/browser/themes/linux/preferences/preferences.css
@@ -5,6 +5,11 @@
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
 
+/* Main Pref Pane */
+#mainPrefPane {
+  padding: 8px;
+}
+
 /* General Pane */
 #useFirefoxSync,
 #getStarted {
diff --git a/browser/themes/osx/preferences/preferences.css b/browser/themes/osx/preferences/preferences.css
index 2d0c855d3ca7..2095b22c1a86 100644
--- a/browser/themes/osx/preferences/preferences.css
+++ b/browser/themes/osx/preferences/preferences.css
@@ -15,7 +15,6 @@
   font: -moz-dialog;
 }
 
-/* ----- APPLICATIONS PREFPANE ----- */
 description {
   font: small-caption;
   font-weight: normal;
@@ -23,12 +22,16 @@ description {
   margin-bottom: 4px !important;
 }
 
-prefpane .groupbox-body {
+#mainPrefPane {
+  padding: 12px 12px 0 12px;
+}
+
+#mainPrefPane .groupbox-body {
   -moz-appearance: none;
   padding: 8px 4px 4px 4px;
 }
 
-prefpane .groupbox-title {
+#mainPrefPane .groupbox-title {
   background: url("chrome://global/skin/50pct_transparent_grey.png") repeat-x bottom left;
   margin-bottom: 4px;
 }
diff --git a/browser/themes/windows/preferences/preferences.css b/browser/themes/windows/preferences/preferences.css
index a40c913ee0f8..83e477f7bb1a 100644
--- a/browser/themes/windows/preferences/preferences.css
+++ b/browser/themes/windows/preferences/preferences.css
@@ -5,6 +5,14 @@
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
 
+/* Main Pref Pane */
+#mainPrefPane {
+  padding-top: 8px;
+  padding-bottom: 10px;
+  padding-inline-start: 8px;
+  padding-inline-end: 10px;
+}
+
 /* General Pane */
 
 #useFirefoxSync,

From d4f2651b13fccb299ce304550d4aa7fa64962433 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 7 Jul 2017 10:09:58 -0700
Subject: [PATCH 036/106] remove unnecessary assignment

---
 browser/components/preferences/in-content-new/preferences.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 4c00b05799ef..eb91ce8c7f2f 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -354,7 +354,7 @@ function confirmRestartPrompt(aRestartToEnable, aDefaultButtonIndex,
   return buttonIndex;
 }
 
-window.Preferences = function Preferences() {
+function Preferences() {
   EventEmitter.call(this);
 };
 

From 7df81304a842b0082b34d16cdcb8d57d25949497 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 7 Jul 2017 10:57:36 -0700
Subject: [PATCH 037/106] make pref additions consistent

---
 .../preferences/in-content-new/advanced.js         |   6 +-
 .../preferences/in-content-new/applications.js     |   6 +-
 .../components/preferences/in-content-new/main.js  | 194 +++++++++++----------
 .../preferences/in-content-new/preferences.js      |   1 +
 .../preferences/in-content-new/privacy.js          |   6 +-
 .../components/preferences/in-content-new/sync.js  |   6 +-
 6 files changed, 108 insertions(+), 111 deletions(-)

diff --git a/browser/components/preferences/in-content-new/advanced.js b/browser/components/preferences/in-content-new/advanced.js
index 730eb5621a34..50134ec72708 100644
--- a/browser/components/preferences/in-content-new/advanced.js
+++ b/browser/components/preferences/in-content-new/advanced.js
@@ -12,7 +12,7 @@ Components.utils.import("resource://gre/modules/XPCOMUtils.jsm");
 
 const gAdvancedPreferences = window.gAdvancedPreferences = new Preferences();
 
-function initAdvancedPreferences() {
+window.addEventListener("DOMContentLoaded", function() {
   gAdvancedPreferences.addAll({
     category: "advanced",
     preferences: [
@@ -33,14 +33,12 @@ function initAdvancedPreferences() {
       { id: "browser.search.update", name: "browser.search.update", type: "bool" },
     ],
   });
-}
+}, { once: true, capture: true });
 
 var gAdvancedPane = {
   _inited: false,
 
   init() {
-    initAdvancedPreferences();
-
     function setEventListener(aId, aEventType, aCallback) {
       document.getElementById(aId)
               .addEventListener(aEventType, aCallback.bind(gAdvancedPane));
diff --git a/browser/components/preferences/in-content-new/applications.js b/browser/components/preferences/in-content-new/applications.js
index 206c7db73f96..fd61d4733581 100644
--- a/browser/components/preferences/in-content-new/applications.js
+++ b/browser/components/preferences/in-content-new/applications.js
@@ -82,7 +82,7 @@ const APP_ICON_ATTR_NAME = "appHandlerIcon";
 
 const gAppPreferences = window.gAppPreferences = new Preferences();
 
-function initAppPreferences() {
+window.addEventListener("DOMContentLoaded", function() {
   gAppPreferences.addAll({
     category: "applications",
     preferences: [
@@ -104,7 +104,7 @@ function initAppPreferences() {
       { id: "pref.downloads.disable_button.edit_actions", name: "pref.downloads.disable_button.edit_actions", type: "bool" },
     ],
   });
-}
+}, { once: true, capture: true });
 
 // Utilities
 
@@ -900,8 +900,6 @@ var gApplicationsPane = {
   // Initialization & Destruction
 
   init() {
-    initAppPreferences();
-
     function setEventListener(aId, aEventType, aCallback) {
       document.getElementById(aId)
               .addEventListener(aEventType, aCallback.bind(gApplicationsPane));
diff --git a/browser/components/preferences/in-content-new/main.js b/browser/components/preferences/in-content-new/main.js
index 923fd98ab9fd..3137041d9cff 100644
--- a/browser/components/preferences/in-content-new/main.js
+++ b/browser/components/preferences/in-content-new/main.js
@@ -30,113 +30,117 @@ if (AppConstants.MOZ_DEV_EDITION) {
 // XXX Rename this to gMainPrefs.
 // We assign the instance to window.gMainPreferences so tests can access it.
 const gMainPreferences = window.gMainPreferences = new Preferences();
-// XXX Figure out why this needs to happen at execute time in order for
-// the prefs it adds to be available to gApplicationsPane.init.
-gMainPreferences.addAll({
-  category: "main",
-  preferences: [
+
+// Instantiate preferences after DOM content is loaded but before the pane
+// is initialized, so the DOM elements are available to the Preference objects,
+// and the Preference objects are available to the pane initializer.
+window.addEventListener("DOMContentLoaded", function() {
+  gMainPreferences.addAll({
+    category: "main",
+    preferences: [
 #ifdef E10S_TESTING_ONLY
-    { id: "browser.tabs.remote.autostart", name: "browser.tabs.remote.autostart", type: "bool" },
-    { id: "e10sTempPref", name: "browser.tabs.remote.autostart.2", type: "bool" },
-    { id: "e10sForceEnable", name: "browser.tabs.remote.force-enable", type: "bool" },
+      { id: "browser.tabs.remote.autostart", name: "browser.tabs.remote.autostart", type: "bool" },
+      { id: "e10sTempPref", name: "browser.tabs.remote.autostart.2", type: "bool" },
+      { id: "e10sForceEnable", name: "browser.tabs.remote.force-enable", type: "bool" },
 #endif
 
-    /* Startup */
-    { id: "browser.startup.page", name: "browser.startup.page", type: "int" },
-    { id: "browser.startup.homepage", name: "browser.startup.homepage", type: "wstring" },
+      /* Startup */
+      { id: "browser.startup.page", name: "browser.startup.page", type: "int" },
+      { id: "browser.startup.homepage", name: "browser.startup.homepage", type: "wstring" },
 
 #ifdef HAVE_SHELL_SERVICE
-    { id: "browser.shell.checkDefaultBrowser", name: "browser.shell.checkDefaultBrowser", type: "bool" },
-    { id: "pref.general.disable_button.default_browser", name: "pref.general.disable_button.default_browser", type: "bool" },
+      { id: "browser.shell.checkDefaultBrowser", name: "browser.shell.checkDefaultBrowser", type: "bool" },
+      { id: "pref.general.disable_button.default_browser", name: "pref.general.disable_button.default_browser", type: "bool" },
 #endif
 
-    { id: "pref.browser.homepage.disable_button.current_page", name: "pref.browser.homepage.disable_button.current_page", type: "bool" },
-    { id: "pref.browser.homepage.disable_button.bookmark_page", name: "pref.browser.homepage.disable_button.bookmark_page", type: "bool" },
-    { id: "pref.browser.homepage.disable_button.restore_default", name: "pref.browser.homepage.disable_button.restore_default", type: "bool" },
-    { id: "browser.privatebrowsing.autostart", name: "browser.privatebrowsing.autostart", type: "bool" },
-
-    /* Search Engine */
-    { id: "browser.search.suggest.enabled", name: "browser.search.suggest.enabled", type: "bool" },
-    { id: "browser.urlbar.suggest.searches", name: "browser.urlbar.suggest.searches", type: "bool" },
-    { id: "browser.search.hiddenOneOffs", name: "browser.search.hiddenOneOffs", type: "unichar" },
-
-    /* Downloads */
-    { id: "browser.download.useDownloadDir", name: "browser.download.useDownloadDir", type: "bool" },
-    { id: "browser.download.folderList", name: "browser.download.folderList", type: "int" },
-    { id: "browser.download.dir", name: "browser.download.dir", type: "file" },
-
-    /* Tab preferences
-    Preferences:
-
-    browser.link.open_newwindow
-        1 opens such links in the most recent window or tab,
-        2 opens such links in a new window,
-        3 opens such links in a new tab
-    browser.tabs.loadInBackground
-    - true if display should switch to a new tab which has been opened from a
-      link, false if display shouldn't switch
-    browser.tabs.warnOnClose
-    - true if when closing a window with multiple tabs the user is warned and
-      allowed to cancel the action, false to just close the window
-    browser.tabs.warnOnOpen
-    - true if the user should be warned if he attempts to open a lot of tabs at
-      once (e.g. a large folder of bookmarks), false otherwise
-    browser.taskbar.previews.enable
-    - true if tabs are to be shown in the Windows 7 taskbar
-    */
-
-    { id: "browser.link.open_newwindow", name: "browser.link.open_newwindow", type: "int" },
-    { id: "browser.tabs.loadInBackground", name: "browser.tabs.loadInBackground", type: "bool", inverted: true },
-    { id: "browser.tabs.warnOnClose", name: "browser.tabs.warnOnClose", type: "bool" },
-    { id: "browser.tabs.warnOnOpen", name: "browser.tabs.warnOnOpen", type: "bool" },
-    { id: "browser.sessionstore.restore_on_demand", name: "browser.sessionstore.restore_on_demand", type: "bool" },
+      { id: "pref.browser.homepage.disable_button.current_page", name: "pref.browser.homepage.disable_button.current_page", type: "bool" },
+      { id: "pref.browser.homepage.disable_button.bookmark_page", name: "pref.browser.homepage.disable_button.bookmark_page", type: "bool" },
+      { id: "pref.browser.homepage.disable_button.restore_default", name: "pref.browser.homepage.disable_button.restore_default", type: "bool" },
+      { id: "browser.privatebrowsing.autostart", name: "browser.privatebrowsing.autostart", type: "bool" },
+
+      /* Search Engine */
+      { id: "browser.search.suggest.enabled", name: "browser.search.suggest.enabled", type: "bool" },
+      { id: "browser.urlbar.suggest.searches", name: "browser.urlbar.suggest.searches", type: "bool" },
+      { id: "browser.search.hiddenOneOffs", name: "browser.search.hiddenOneOffs", type: "unichar" },
+
+      /* Downloads */
+      { id: "browser.download.useDownloadDir", name: "browser.download.useDownloadDir", type: "bool" },
+      { id: "browser.download.folderList", name: "browser.download.folderList", type: "int" },
+      { id: "browser.download.dir", name: "browser.download.dir", type: "file" },
+
+      /* Tab preferences
+      Preferences:
+
+      browser.link.open_newwindow
+          1 opens such links in the most recent window or tab,
+          2 opens such links in a new window,
+          3 opens such links in a new tab
+      browser.tabs.loadInBackground
+      - true if display should switch to a new tab which has been opened from a
+        link, false if display shouldn't switch
+      browser.tabs.warnOnClose
+      - true if when closing a window with multiple tabs the user is warned and
+        allowed to cancel the action, false to just close the window
+      browser.tabs.warnOnOpen
+      - true if the user should be warned if he attempts to open a lot of tabs at
+        once (e.g. a large folder of bookmarks), false otherwise
+      browser.taskbar.previews.enable
+      - true if tabs are to be shown in the Windows 7 taskbar
+      */
+
+      { id: "browser.link.open_newwindow", name: "browser.link.open_newwindow", type: "int" },
+      { id: "browser.tabs.loadInBackground", name: "browser.tabs.loadInBackground", type: "bool", inverted: true },
+      { id: "browser.tabs.warnOnClose", name: "browser.tabs.warnOnClose", type: "bool" },
+      { id: "browser.tabs.warnOnOpen", name: "browser.tabs.warnOnOpen", type: "bool" },
+      { id: "browser.sessionstore.restore_on_demand", name: "browser.sessionstore.restore_on_demand", type: "bool" },
 #ifdef XP_WIN
-    { id: "browser.taskbar.previews.enable", name: "browser.taskbar.previews.enable", type: "bool" },
+      { id: "browser.taskbar.previews.enable", name: "browser.taskbar.previews.enable", type: "bool" },
 #endif
-    { id: "browser.ctrlTab.previews", name: "browser.ctrlTab.previews", type: "bool" },
-
-    /* Fonts */
-    { id: "font.language.group", name: "font.language.group", type: "wstring" },
-
-    /* Languages */
-    { id: "browser.translation.detectLanguage", name: "browser.translation.detectLanguage", type: "bool" },
-
-    /* General tab */
-
-    /* Accessibility
-     * accessibility.browsewithcaret
-       - true enables keyboard navigation and selection within web pages using a
-         visible caret, false uses normal keyboard navigation with no caret
-     * accessibility.typeaheadfind
-       - when set to true, typing outside text areas and input boxes will
-         automatically start searching for what's typed within the current
-         document; when set to false, no search action happens */
-    { id: "accessibility.browsewithcaret", name: "accessibility.browsewithcaret", type: "bool" },
-    { id: "accessibility.typeaheadfind", name: "accessibility.typeaheadfind", type: "bool" },
-    { id: "accessibility.blockautorefresh", name: "accessibility.blockautorefresh", type: "bool" },
+      { id: "browser.ctrlTab.previews", name: "browser.ctrlTab.previews", type: "bool" },
+
+      /* Fonts */
+      { id: "font.language.group", name: "font.language.group", type: "wstring" },
+
+      /* Languages */
+      { id: "browser.translation.detectLanguage", name: "browser.translation.detectLanguage", type: "bool" },
+
+      /* General tab */
+
+      /* Accessibility
+       * accessibility.browsewithcaret
+         - true enables keyboard navigation and selection within web pages using a
+           visible caret, false uses normal keyboard navigation with no caret
+       * accessibility.typeaheadfind
+         - when set to true, typing outside text areas and input boxes will
+           automatically start searching for what's typed within the current
+           document; when set to false, no search action happens */
+      { id: "accessibility.browsewithcaret", name: "accessibility.browsewithcaret", type: "bool" },
+      { id: "accessibility.typeaheadfind", name: "accessibility.typeaheadfind", type: "bool" },
+      { id: "accessibility.blockautorefresh", name: "accessibility.blockautorefresh", type: "bool" },
 #ifdef XP_WIN
-    { id: "ui.osk.enabled", name: "ui.osk.enabled", type: "bool" },
+      { id: "ui.osk.enabled", name: "ui.osk.enabled", type: "bool" },
 #endif
 
-    /* Browsing
-     * general.autoScroll
-       - when set to true, clicking the scroll wheel on the mouse activates a
-         mouse mode where moving the mouse down scrolls the document downward with
-         speed correlated with the distance of the cursor from the original
-         position at which the click occurred (and likewise with movement upward);
-         if false, this behavior is disabled
-     * general.smoothScroll
-       - set to true to enable finer page scrolling than line-by-line on page-up,
-         page-down, and other such page movements */
-    { id: "general.autoScroll", name: "general.autoScroll", type: "bool" },
-    { id: "general.smoothScroll", name: "general.smoothScroll", type: "bool" },
-    { id: "layout.spellcheckDefault", name: "layout.spellcheckDefault", type: "int" },
-    { id: "toolkit.telemetry.enabled", name: "toolkit.telemetry.enabled", type: "bool" },
-    { id: "browser.preferences.defaultPerformanceSettings.enabled", name: "browser.preferences.defaultPerformanceSettings.enabled", type: "bool" },
-    { id: "dom.ipc.processCount", name: "dom.ipc.processCount", type: "int" },
-    { id: "layers.acceleration.disabled", name: "layers.acceleration.disabled", type: "bool", inverted: true },
-  ],
-});
+      /* Browsing
+       * general.autoScroll
+         - when set to true, clicking the scroll wheel on the mouse activates a
+           mouse mode where moving the mouse down scrolls the document downward with
+           speed correlated with the distance of the cursor from the original
+           position at which the click occurred (and likewise with movement upward);
+           if false, this behavior is disabled
+       * general.smoothScroll
+         - set to true to enable finer page scrolling than line-by-line on page-up,
+           page-down, and other such page movements */
+      { id: "general.autoScroll", name: "general.autoScroll", type: "bool" },
+      { id: "general.smoothScroll", name: "general.smoothScroll", type: "bool" },
+      { id: "layout.spellcheckDefault", name: "layout.spellcheckDefault", type: "int" },
+      { id: "toolkit.telemetry.enabled", name: "toolkit.telemetry.enabled", type: "bool" },
+      { id: "browser.preferences.defaultPerformanceSettings.enabled", name: "browser.preferences.defaultPerformanceSettings.enabled", type: "bool" },
+      { id: "dom.ipc.processCount", name: "dom.ipc.processCount", type: "int" },
+      { id: "layers.acceleration.disabled", name: "layers.acceleration.disabled", type: "bool", inverted: true },
+    ],
+  });
+}, { once: true, capture: true });
 
 const ENGINE_FLAVOR = "text/x-moz-search-engine";
 
diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index eb91ce8c7f2f..694f1baca76f 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -355,6 +355,7 @@ function confirmRestartPrompt(aRestartToEnable, aDefaultButtonIndex,
 }
 
 function Preferences() {
+  // Call the EventEmitter constructor, as we inherit EventEmitter.
   EventEmitter.call(this);
 };
 
diff --git a/browser/components/preferences/in-content-new/privacy.js b/browser/components/preferences/in-content-new/privacy.js
index d7d53ec8f41c..746a1d15c927 100644
--- a/browser/components/preferences/in-content-new/privacy.js
+++ b/browser/components/preferences/in-content-new/privacy.js
@@ -36,7 +36,7 @@ XPCOMUtils.defineLazyGetter(this, "AlertsServiceDND", function() {
 // We assign the instance to window.gPrivacyPreferences so tests can access it.
 const gPrivacyPreferences = window.gPrivacyPreferences = new Preferences();
 
-function initPrivacyPreferences() {
+window.addEventListener("DOMContentLoaded", function() {
   gPrivacyPreferences.addAll({
     category: "privacy",
     preferences: [
@@ -128,7 +128,7 @@ function initPrivacyPreferences() {
 #endif
     ],
   });
-}
+}, { once: true, capture: true });
 
 var gPrivacyPane = {
   _pane: null,
@@ -243,8 +243,6 @@ var gPrivacyPane = {
    * label of the "Clear Now..." button.
    */
   init() {
-    initPrivacyPreferences();
-
     function setEventListener(aId, aEventType, aCallback) {
       document.getElementById(aId)
               .addEventListener(aEventType, aCallback.bind(gPrivacyPane));
diff --git a/browser/components/preferences/in-content-new/sync.js b/browser/components/preferences/in-content-new/sync.js
index 9b186d7b4a0a..2bd1920fc6f1 100644
--- a/browser/components/preferences/in-content-new/sync.js
+++ b/browser/components/preferences/in-content-new/sync.js
@@ -27,7 +27,7 @@ const FXA_LOGIN_FAILED = 2;
 
 const gSyncEnginePrefs = window.gSyncEnginePrefs = new Preferences();
 
-function initSyncEnginePrefs() {
+window.addEventListener("DOMContentLoaded", function() {
   gSyncEnginePrefs.addAll({
     category: "sync",
     preferences: [
@@ -39,7 +39,7 @@ function initSyncEnginePrefs() {
       { id: "engine.passwords", name: "services.sync.engine.passwords", type: "bool" },
     ],
   });
-}
+}, { once: true, capture: true });
 
 var gSyncPane = {
   // XXX Remove this unused property.
@@ -55,8 +55,6 @@ var gSyncPane = {
   },
 
   init() {
-    initSyncEnginePrefs();
-
     this._setupEventListeners();
 
     // If the Service hasn't finished initializing, wait for it.

From bdf791fb11ebca2ed50e6a61cd5a2c24dcc47162 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 7 Jul 2017 11:15:54 -0700
Subject: [PATCH 038/106] remove unused categorization

---
 browser/components/preferences/in-content-new/advanced.js |  1 -
 .../components/preferences/in-content-new/applications.js |  1 -
 browser/components/preferences/in-content-new/main.js     |  1 -
 .../components/preferences/in-content-new/preferences.js  | 15 ++++-----------
 browser/components/preferences/in-content-new/privacy.js  |  1 -
 browser/components/preferences/in-content-new/sync.js     |  1 -
 .../in-content-new/tests/privacypane_tests_perwindow.js   |  4 ++--
 7 files changed, 6 insertions(+), 18 deletions(-)

diff --git a/browser/components/preferences/in-content-new/advanced.js b/browser/components/preferences/in-content-new/advanced.js
index 50134ec72708..635916319d61 100644
--- a/browser/components/preferences/in-content-new/advanced.js
+++ b/browser/components/preferences/in-content-new/advanced.js
@@ -14,7 +14,6 @@ const gAdvancedPreferences = window.gAdvancedPreferences = new Preferences();
 
 window.addEventListener("DOMContentLoaded", function() {
   gAdvancedPreferences.addAll({
-    category: "advanced",
     preferences: [
       { id: "browser.preferences.advanced.selectedTabIndex", name: "browser.preferences.advanced.selectedTabIndex", type: "int" },
 
diff --git a/browser/components/preferences/in-content-new/applications.js b/browser/components/preferences/in-content-new/applications.js
index fd61d4733581..9ee3308ebd35 100644
--- a/browser/components/preferences/in-content-new/applications.js
+++ b/browser/components/preferences/in-content-new/applications.js
@@ -84,7 +84,6 @@ const gAppPreferences = window.gAppPreferences = new Preferences();
 
 window.addEventListener("DOMContentLoaded", function() {
   gAppPreferences.addAll({
-    category: "applications",
     preferences: [
       { id: "browser.feeds.handler", name: "browser.feeds.handler", type: "string" },
       { id: "browser.feeds.handler.default", name: "browser.feeds.handler.default", type: "string" },
diff --git a/browser/components/preferences/in-content-new/main.js b/browser/components/preferences/in-content-new/main.js
index 3137041d9cff..385c2a771fa2 100644
--- a/browser/components/preferences/in-content-new/main.js
+++ b/browser/components/preferences/in-content-new/main.js
@@ -36,7 +36,6 @@ const gMainPreferences = window.gMainPreferences = new Preferences();
 // and the Preference objects are available to the pane initializer.
 window.addEventListener("DOMContentLoaded", function() {
   gMainPreferences.addAll({
-    category: "main",
     preferences: [
 #ifdef E10S_TESTING_ONLY
       { id: "browser.tabs.remote.autostart", name: "browser.tabs.remote.autostart", type: "bool" },
diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 694f1baca76f..0a6e27bdbed5 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -376,7 +376,6 @@ Object.assign(Preferences.prototype, {
   constructor: Preferences,
   id: "",
   hidden: false,
-  dataCategory: "",
   preferences: [],
 
   observe(aSubject, aTopic, aData) {
@@ -401,14 +400,8 @@ Object.assign(Preferences.prototype, {
     return null;
   },
 
-  getAll(category) {
-    let prefs = [];
-    for (let i = 0; i < this.preferences.length; i++) {
-      if (this.preferences[i].category === category) {
-        prefs.push(this.preferences[i]);
-      }
-    }
-    return prefs;
+  getAll() {
+    return this.preferences.slice();
   },
 
   add({ id, name, type }) {
@@ -418,8 +411,8 @@ Object.assign(Preferences.prototype, {
     return pref;
   },
 
-  addAll({ category, preferences }) {
-    let prefs = preferences.map(v => new Preference(Object.assign(v, { category, preferences: this })));
+  addAll({ preferences }) {
+    let prefs = preferences.map(v => new Preference(Object.assign(v, { preferences: this })));
     this.preferences = this.preferences.concat(prefs);
     Preferences.all = Preferences.all.concat(prefs);
     // XXX Only construct the newly added children.
diff --git a/browser/components/preferences/in-content-new/privacy.js b/browser/components/preferences/in-content-new/privacy.js
index 746a1d15c927..7753395ba719 100644
--- a/browser/components/preferences/in-content-new/privacy.js
+++ b/browser/components/preferences/in-content-new/privacy.js
@@ -38,7 +38,6 @@ const gPrivacyPreferences = window.gPrivacyPreferences = new Preferences();
 
 window.addEventListener("DOMContentLoaded", function() {
   gPrivacyPreferences.addAll({
-    category: "privacy",
     preferences: [
       { id: "privacy.userContext.enabled", name: "privacy.userContext.enabled", type: "bool" },
 
diff --git a/browser/components/preferences/in-content-new/sync.js b/browser/components/preferences/in-content-new/sync.js
index 2bd1920fc6f1..6d652ae2a6bd 100644
--- a/browser/components/preferences/in-content-new/sync.js
+++ b/browser/components/preferences/in-content-new/sync.js
@@ -29,7 +29,6 @@ const gSyncEnginePrefs = window.gSyncEnginePrefs = new Preferences();
 
 window.addEventListener("DOMContentLoaded", function() {
   gSyncEnginePrefs.addAll({
-    category: "sync",
     preferences: [
       { id: "engine.addons", name: "services.sync.engine.addons", type: "bool" },
       { id: "engine.bookmarks", name: "services.sync.engine.bookmarks", type: "bool" },
diff --git a/browser/components/preferences/in-content-new/tests/privacypane_tests_perwindow.js b/browser/components/preferences/in-content-new/tests/privacypane_tests_perwindow.js
index ea8dad7f19d7..f46bec70df3d 100644
--- a/browser/components/preferences/in-content-new/tests/privacypane_tests_perwindow.js
+++ b/browser/components/preferences/in-content-new/tests/privacypane_tests_perwindow.js
@@ -311,13 +311,13 @@ function test_locbar_suggestion_retention(suggestion, autocomplete) {
 const gPrefCache = new Map();
 
 function cache_preferences(win) {
-  let prefs = win.gPrivacyPreferences.getAll("privacy");
+  let prefs = win.gPrivacyPreferences.getAll();
   for (let pref of prefs)
     gPrefCache.set(pref.name, pref.value);
 }
 
 function reset_preferences(win) {
-  let prefs = win.gPrivacyPreferences.getAll("privacy");
+  let prefs = win.gPrivacyPreferences.getAll();
   for (let pref of prefs)
     pref.value = gPrefCache.get(pref.name);
 }

From 1e5195b7c53bfbfe621dfbb14f769f7d131d1f1d Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 7 Jul 2017 11:24:47 -0700
Subject: [PATCH 039/106] instantiate Preferences when we populate it

---
 browser/components/preferences/in-content-new/advanced.js     | 3 +--
 browser/components/preferences/in-content-new/applications.js | 5 ++---
 browser/components/preferences/in-content-new/main.js         | 6 ++----
 browser/components/preferences/in-content-new/privacy.js      | 4 +---
 browser/components/preferences/in-content-new/sync.js         | 3 +--
 5 files changed, 7 insertions(+), 14 deletions(-)

diff --git a/browser/components/preferences/in-content-new/advanced.js b/browser/components/preferences/in-content-new/advanced.js
index 635916319d61..f3627ccf585e 100644
--- a/browser/components/preferences/in-content-new/advanced.js
+++ b/browser/components/preferences/in-content-new/advanced.js
@@ -10,9 +10,8 @@ Components.utils.import("resource://gre/modules/DownloadUtils.jsm");
 Components.utils.import("resource://gre/modules/LoadContextInfo.jsm");
 Components.utils.import("resource://gre/modules/XPCOMUtils.jsm");
 
-const gAdvancedPreferences = window.gAdvancedPreferences = new Preferences();
-
 window.addEventListener("DOMContentLoaded", function() {
+  window.gAdvancedPreferences = new Preferences();
   gAdvancedPreferences.addAll({
     preferences: [
       { id: "browser.preferences.advanced.selectedTabIndex", name: "browser.preferences.advanced.selectedTabIndex", type: "int" },
diff --git a/browser/components/preferences/in-content-new/applications.js b/browser/components/preferences/in-content-new/applications.js
index 9ee3308ebd35..4731ba3a8d4b 100644
--- a/browser/components/preferences/in-content-new/applications.js
+++ b/browser/components/preferences/in-content-new/applications.js
@@ -78,11 +78,10 @@ const ICON_URL_APP = AppConstants.platform == "linux" ?
 // was set by us to a custom handler icon and CSS should not try to override it.
 const APP_ICON_ATTR_NAME = "appHandlerIcon";
 
-// Preference object
-
-const gAppPreferences = window.gAppPreferences = new Preferences();
+// Preferences object
 
 window.addEventListener("DOMContentLoaded", function() {
+  window.gAppPreferences = new Preferences();
   gAppPreferences.addAll({
     preferences: [
       { id: "browser.feeds.handler", name: "browser.feeds.handler", type: "string" },
diff --git a/browser/components/preferences/in-content-new/main.js b/browser/components/preferences/in-content-new/main.js
index 385c2a771fa2..86a105f1ce60 100644
--- a/browser/components/preferences/in-content-new/main.js
+++ b/browser/components/preferences/in-content-new/main.js
@@ -27,14 +27,12 @@ if (AppConstants.MOZ_DEV_EDITION) {
                                     "resource://gre/modules/FxAccounts.jsm");
 }
 
-// XXX Rename this to gMainPrefs.
-// We assign the instance to window.gMainPreferences so tests can access it.
-const gMainPreferences = window.gMainPreferences = new Preferences();
-
 // Instantiate preferences after DOM content is loaded but before the pane
 // is initialized, so the DOM elements are available to the Preference objects,
 // and the Preference objects are available to the pane initializer.
 window.addEventListener("DOMContentLoaded", function() {
+  // XXX Rename this to gMainPrefs.
+  window.gMainPreferences = new Preferences();
   gMainPreferences.addAll({
     preferences: [
 #ifdef E10S_TESTING_ONLY
diff --git a/browser/components/preferences/in-content-new/privacy.js b/browser/components/preferences/in-content-new/privacy.js
index 7753395ba719..a57e81320be9 100644
--- a/browser/components/preferences/in-content-new/privacy.js
+++ b/browser/components/preferences/in-content-new/privacy.js
@@ -33,10 +33,8 @@ XPCOMUtils.defineLazyGetter(this, "AlertsServiceDND", function() {
   }
 });
 
-// We assign the instance to window.gPrivacyPreferences so tests can access it.
-const gPrivacyPreferences = window.gPrivacyPreferences = new Preferences();
-
 window.addEventListener("DOMContentLoaded", function() {
+  window.gPrivacyPreferences = new Preferences();
   gPrivacyPreferences.addAll({
     preferences: [
       { id: "privacy.userContext.enabled", name: "privacy.userContext.enabled", type: "bool" },
diff --git a/browser/components/preferences/in-content-new/sync.js b/browser/components/preferences/in-content-new/sync.js
index 6d652ae2a6bd..90ba35a3d6ae 100644
--- a/browser/components/preferences/in-content-new/sync.js
+++ b/browser/components/preferences/in-content-new/sync.js
@@ -25,9 +25,8 @@ const FXA_LOGIN_UNVERIFIED = 1;
 // We are logged in locally, but the server rejected our credentials.
 const FXA_LOGIN_FAILED = 2;
 
-const gSyncEnginePrefs = window.gSyncEnginePrefs = new Preferences();
-
 window.addEventListener("DOMContentLoaded", function() {
+  window.gSyncEnginePrefs = new Preferences();
   gSyncEnginePrefs.addAll({
     preferences: [
       { id: "engine.addons", name: "services.sync.engine.addons", type: "bool" },

From 7a41cf44311487a918650c468523c251bd307afc Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 7 Jul 2017 12:28:39 -0700
Subject: [PATCH 040/106] add preferences when constructing Preferences object

---
 .../preferences/in-content-new/advanced.js         |  22 ++-
 .../preferences/in-content-new/applications.js     |  46 +++--
 .../components/preferences/in-content-new/main.js  | 192 ++++++++++----------
 .../preferences/in-content-new/preferences.js      |  21 ++-
 .../preferences/in-content-new/privacy.js          | 194 ++++++++++-----------
 .../components/preferences/in-content-new/sync.js  |  20 +--
 6 files changed, 242 insertions(+), 253 deletions(-)

diff --git a/browser/components/preferences/in-content-new/advanced.js b/browser/components/preferences/in-content-new/advanced.js
index f3627ccf585e..323b98a151eb 100644
--- a/browser/components/preferences/in-content-new/advanced.js
+++ b/browser/components/preferences/in-content-new/advanced.js
@@ -10,27 +10,25 @@ Components.utils.import("resource://gre/modules/DownloadUtils.jsm");
 Components.utils.import("resource://gre/modules/LoadContextInfo.jsm");
 Components.utils.import("resource://gre/modules/XPCOMUtils.jsm");
 
+let gAdvancedPreferences;
 window.addEventListener("DOMContentLoaded", function() {
-  window.gAdvancedPreferences = new Preferences();
-  gAdvancedPreferences.addAll({
-    preferences: [
-      { id: "browser.preferences.advanced.selectedTabIndex", name: "browser.preferences.advanced.selectedTabIndex", type: "int" },
+  gAdvancedPreferences = window.gAdvancedPreferences = new Preferences([
+    { id: "browser.preferences.advanced.selectedTabIndex", name: "browser.preferences.advanced.selectedTabIndex", type: "int" },
 
-      // Update tab
+    // Update tab
 #ifdef MOZ_UPDATER
-      { id: "app.update.enabled", name: "app.update.enabled", type: "bool" },
-      { id: "app.update.auto", name: "app.update.auto", type: "bool" },
+    { id: "app.update.enabled", name: "app.update.enabled", type: "bool" },
+    { id: "app.update.auto", name: "app.update.auto", type: "bool" },
 
-      { id: "app.update.disable_button.showUpdateHistory", name: "app.update.disable_button.showUpdateHistory", type: "bool" },
+    { id: "app.update.disable_button.showUpdateHistory", name: "app.update.disable_button.showUpdateHistory", type: "bool" },
 
 #ifdef MOZ_MAINTENANCE_SERVICE
-      { id: "app.update.service.enabled", name: "app.update.service.enabled", type: "bool" },
+    { id: "app.update.service.enabled", name: "app.update.service.enabled", type: "bool" },
 #endif
 #endif
 
-      { id: "browser.search.update", name: "browser.search.update", type: "bool" },
-    ],
-  });
+    { id: "browser.search.update", name: "browser.search.update", type: "bool" },
+  ]);
 }, { once: true, capture: true });
 
 var gAdvancedPane = {
diff --git a/browser/components/preferences/in-content-new/applications.js b/browser/components/preferences/in-content-new/applications.js
index 4731ba3a8d4b..bcf01433fbcb 100644
--- a/browser/components/preferences/in-content-new/applications.js
+++ b/browser/components/preferences/in-content-new/applications.js
@@ -80,28 +80,26 @@ const APP_ICON_ATTR_NAME = "appHandlerIcon";
 
 // Preferences object
 
+let gAppPreferences;
 window.addEventListener("DOMContentLoaded", function() {
-  window.gAppPreferences = new Preferences();
-  gAppPreferences.addAll({
-    preferences: [
-      { id: "browser.feeds.handler", name: "browser.feeds.handler", type: "string" },
-      { id: "browser.feeds.handler.default", name: "browser.feeds.handler.default", type: "string" },
-      { id: "browser.feeds.handlers.application", name: "browser.feeds.handlers.application", type: "file" },
-      { id: "browser.feeds.handlers.webservice", name: "browser.feeds.handlers.webservice", type: "string" },
-
-      { id: "browser.videoFeeds.handler", name: "browser.videoFeeds.handler", type: "string" },
-      { id: "browser.videoFeeds.handler.default", name: "browser.videoFeeds.handler.default", type: "string" },
-      { id: "browser.videoFeeds.handlers.application", name: "browser.videoFeeds.handlers.application", type: "file" },
-      { id: "browser.videoFeeds.handlers.webservice", name: "browser.videoFeeds.handlers.webservice", type: "string" },
-
-      { id: "browser.audioFeeds.handler", name: "browser.audioFeeds.handler", type: "string" },
-      { id: "browser.audioFeeds.handler.default", name: "browser.audioFeeds.handler.default", type: "string" },
-      { id: "browser.audioFeeds.handlers.application", name: "browser.audioFeeds.handlers.application", type: "file" },
-      { id: "browser.audioFeeds.handlers.webservice", name: "browser.audioFeeds.handlers.webservice", type: "string" },
-
-      { id: "pref.downloads.disable_button.edit_actions", name: "pref.downloads.disable_button.edit_actions", type: "bool" },
-    ],
-  });
+  gAppPreferences = window.gAppPreferences = new Preferences([
+    { id: "browser.feeds.handler", name: "browser.feeds.handler", type: "string" },
+    { id: "browser.feeds.handler.default", name: "browser.feeds.handler.default", type: "string" },
+    { id: "browser.feeds.handlers.application", name: "browser.feeds.handlers.application", type: "file" },
+    { id: "browser.feeds.handlers.webservice", name: "browser.feeds.handlers.webservice", type: "string" },
+
+    { id: "browser.videoFeeds.handler", name: "browser.videoFeeds.handler", type: "string" },
+    { id: "browser.videoFeeds.handler.default", name: "browser.videoFeeds.handler.default", type: "string" },
+    { id: "browser.videoFeeds.handlers.application", name: "browser.videoFeeds.handlers.application", type: "file" },
+    { id: "browser.videoFeeds.handlers.webservice", name: "browser.videoFeeds.handlers.webservice", type: "string" },
+
+    { id: "browser.audioFeeds.handler", name: "browser.audioFeeds.handler", type: "string" },
+    { id: "browser.audioFeeds.handler.default", name: "browser.audioFeeds.handler.default", type: "string" },
+    { id: "browser.audioFeeds.handlers.application", name: "browser.audioFeeds.handlers.application", type: "file" },
+    { id: "browser.audioFeeds.handlers.webservice", name: "browser.audioFeeds.handlers.webservice", type: "string" },
+
+    { id: "pref.downloads.disable_button.edit_actions", name: "pref.downloads.disable_button.edit_actions", type: "bool" },
+  ]);
 }, { once: true, capture: true });
 
 // Utilities
@@ -1962,7 +1960,7 @@ var gApplicationsPane = {
   readUseDownloadDir() {
     var downloadFolder = document.getElementById("downloadFolder");
     var chooseFolder = document.getElementById("chooseFolder");
-    var preference = gMainPreferences.get("browser.download.useDownloadDir");
+    var preference = Preferences.get("browser.download.useDownloadDir");
     downloadFolder.disabled = !preference.value || preference.locked;
     chooseFolder.disabled = !preference.value || preference.locked;
 
@@ -2026,10 +2024,10 @@ var gApplicationsPane = {
   },
 
   async displayDownloadDirPrefTask() {
-    var folderListPref = gMainPreferences.get("browser.download.folderList");
+    var folderListPref = Preferences.get("browser.download.folderList");
     var bundlePreferences = document.getElementById("bundlePreferences");
     var downloadFolder = document.getElementById("downloadFolder");
-    var currentDirPref = gMainPreferences.get("browser.download.dir");
+    var currentDirPref = Preferences.get("browser.download.dir");
 
     // Used in defining the correct path to the folder icon.
     var ios = Components.classes["@mozilla.org/network/io-service;1"]
diff --git a/browser/components/preferences/in-content-new/main.js b/browser/components/preferences/in-content-new/main.js
index 86a105f1ce60..924e24f04f3c 100644
--- a/browser/components/preferences/in-content-new/main.js
+++ b/browser/components/preferences/in-content-new/main.js
@@ -30,113 +30,111 @@ if (AppConstants.MOZ_DEV_EDITION) {
 // Instantiate preferences after DOM content is loaded but before the pane
 // is initialized, so the DOM elements are available to the Preference objects,
 // and the Preference objects are available to the pane initializer.
+let gMainPreferences;
 window.addEventListener("DOMContentLoaded", function() {
   // XXX Rename this to gMainPrefs.
-  window.gMainPreferences = new Preferences();
-  gMainPreferences.addAll({
-    preferences: [
+  gMainPreferences = window.gMainPreferences = new Preferences([
 #ifdef E10S_TESTING_ONLY
-      { id: "browser.tabs.remote.autostart", name: "browser.tabs.remote.autostart", type: "bool" },
-      { id: "e10sTempPref", name: "browser.tabs.remote.autostart.2", type: "bool" },
-      { id: "e10sForceEnable", name: "browser.tabs.remote.force-enable", type: "bool" },
+    { id: "browser.tabs.remote.autostart", name: "browser.tabs.remote.autostart", type: "bool" },
+    { id: "e10sTempPref", name: "browser.tabs.remote.autostart.2", type: "bool" },
+    { id: "e10sForceEnable", name: "browser.tabs.remote.force-enable", type: "bool" },
 #endif
 
-      /* Startup */
-      { id: "browser.startup.page", name: "browser.startup.page", type: "int" },
-      { id: "browser.startup.homepage", name: "browser.startup.homepage", type: "wstring" },
+    /* Startup */
+    { id: "browser.startup.page", name: "browser.startup.page", type: "int" },
+    { id: "browser.startup.homepage", name: "browser.startup.homepage", type: "wstring" },
 
 #ifdef HAVE_SHELL_SERVICE
-      { id: "browser.shell.checkDefaultBrowser", name: "browser.shell.checkDefaultBrowser", type: "bool" },
-      { id: "pref.general.disable_button.default_browser", name: "pref.general.disable_button.default_browser", type: "bool" },
+    { id: "browser.shell.checkDefaultBrowser", name: "browser.shell.checkDefaultBrowser", type: "bool" },
+    { id: "pref.general.disable_button.default_browser", name: "pref.general.disable_button.default_browser", type: "bool" },
 #endif
 
-      { id: "pref.browser.homepage.disable_button.current_page", name: "pref.browser.homepage.disable_button.current_page", type: "bool" },
-      { id: "pref.browser.homepage.disable_button.bookmark_page", name: "pref.browser.homepage.disable_button.bookmark_page", type: "bool" },
-      { id: "pref.browser.homepage.disable_button.restore_default", name: "pref.browser.homepage.disable_button.restore_default", type: "bool" },
-      { id: "browser.privatebrowsing.autostart", name: "browser.privatebrowsing.autostart", type: "bool" },
-
-      /* Search Engine */
-      { id: "browser.search.suggest.enabled", name: "browser.search.suggest.enabled", type: "bool" },
-      { id: "browser.urlbar.suggest.searches", name: "browser.urlbar.suggest.searches", type: "bool" },
-      { id: "browser.search.hiddenOneOffs", name: "browser.search.hiddenOneOffs", type: "unichar" },
-
-      /* Downloads */
-      { id: "browser.download.useDownloadDir", name: "browser.download.useDownloadDir", type: "bool" },
-      { id: "browser.download.folderList", name: "browser.download.folderList", type: "int" },
-      { id: "browser.download.dir", name: "browser.download.dir", type: "file" },
-
-      /* Tab preferences
-      Preferences:
-
-      browser.link.open_newwindow
-          1 opens such links in the most recent window or tab,
-          2 opens such links in a new window,
-          3 opens such links in a new tab
-      browser.tabs.loadInBackground
-      - true if display should switch to a new tab which has been opened from a
-        link, false if display shouldn't switch
-      browser.tabs.warnOnClose
-      - true if when closing a window with multiple tabs the user is warned and
-        allowed to cancel the action, false to just close the window
-      browser.tabs.warnOnOpen
-      - true if the user should be warned if he attempts to open a lot of tabs at
-        once (e.g. a large folder of bookmarks), false otherwise
-      browser.taskbar.previews.enable
-      - true if tabs are to be shown in the Windows 7 taskbar
-      */
-
-      { id: "browser.link.open_newwindow", name: "browser.link.open_newwindow", type: "int" },
-      { id: "browser.tabs.loadInBackground", name: "browser.tabs.loadInBackground", type: "bool", inverted: true },
-      { id: "browser.tabs.warnOnClose", name: "browser.tabs.warnOnClose", type: "bool" },
-      { id: "browser.tabs.warnOnOpen", name: "browser.tabs.warnOnOpen", type: "bool" },
-      { id: "browser.sessionstore.restore_on_demand", name: "browser.sessionstore.restore_on_demand", type: "bool" },
+    { id: "pref.browser.homepage.disable_button.current_page", name: "pref.browser.homepage.disable_button.current_page", type: "bool" },
+    { id: "pref.browser.homepage.disable_button.bookmark_page", name: "pref.browser.homepage.disable_button.bookmark_page", type: "bool" },
+    { id: "pref.browser.homepage.disable_button.restore_default", name: "pref.browser.homepage.disable_button.restore_default", type: "bool" },
+    { id: "browser.privatebrowsing.autostart", name: "browser.privatebrowsing.autostart", type: "bool" },
+
+    /* Search Engine */
+    { id: "browser.search.suggest.enabled", name: "browser.search.suggest.enabled", type: "bool" },
+    { id: "browser.urlbar.suggest.searches", name: "browser.urlbar.suggest.searches", type: "bool" },
+    { id: "browser.search.hiddenOneOffs", name: "browser.search.hiddenOneOffs", type: "unichar" },
+
+    /* Downloads */
+    { id: "browser.download.useDownloadDir", name: "browser.download.useDownloadDir", type: "bool" },
+    { id: "browser.download.folderList", name: "browser.download.folderList", type: "int" },
+    { id: "browser.download.dir", name: "browser.download.dir", type: "file" },
+
+    /* Tab preferences
+    Preferences:
+
+    browser.link.open_newwindow
+        1 opens such links in the most recent window or tab,
+        2 opens such links in a new window,
+        3 opens such links in a new tab
+    browser.tabs.loadInBackground
+    - true if display should switch to a new tab which has been opened from a
+      link, false if display shouldn't switch
+    browser.tabs.warnOnClose
+    - true if when closing a window with multiple tabs the user is warned and
+      allowed to cancel the action, false to just close the window
+    browser.tabs.warnOnOpen
+    - true if the user should be warned if he attempts to open a lot of tabs at
+      once (e.g. a large folder of bookmarks), false otherwise
+    browser.taskbar.previews.enable
+    - true if tabs are to be shown in the Windows 7 taskbar
+    */
+
+    { id: "browser.link.open_newwindow", name: "browser.link.open_newwindow", type: "int" },
+    { id: "browser.tabs.loadInBackground", name: "browser.tabs.loadInBackground", type: "bool", inverted: true },
+    { id: "browser.tabs.warnOnClose", name: "browser.tabs.warnOnClose", type: "bool" },
+    { id: "browser.tabs.warnOnOpen", name: "browser.tabs.warnOnOpen", type: "bool" },
+    { id: "browser.sessionstore.restore_on_demand", name: "browser.sessionstore.restore_on_demand", type: "bool" },
 #ifdef XP_WIN
-      { id: "browser.taskbar.previews.enable", name: "browser.taskbar.previews.enable", type: "bool" },
+    { id: "browser.taskbar.previews.enable", name: "browser.taskbar.previews.enable", type: "bool" },
 #endif
-      { id: "browser.ctrlTab.previews", name: "browser.ctrlTab.previews", type: "bool" },
-
-      /* Fonts */
-      { id: "font.language.group", name: "font.language.group", type: "wstring" },
-
-      /* Languages */
-      { id: "browser.translation.detectLanguage", name: "browser.translation.detectLanguage", type: "bool" },
-
-      /* General tab */
-
-      /* Accessibility
-       * accessibility.browsewithcaret
-         - true enables keyboard navigation and selection within web pages using a
-           visible caret, false uses normal keyboard navigation with no caret
-       * accessibility.typeaheadfind
-         - when set to true, typing outside text areas and input boxes will
-           automatically start searching for what's typed within the current
-           document; when set to false, no search action happens */
-      { id: "accessibility.browsewithcaret", name: "accessibility.browsewithcaret", type: "bool" },
-      { id: "accessibility.typeaheadfind", name: "accessibility.typeaheadfind", type: "bool" },
-      { id: "accessibility.blockautorefresh", name: "accessibility.blockautorefresh", type: "bool" },
+    { id: "browser.ctrlTab.previews", name: "browser.ctrlTab.previews", type: "bool" },
+
+    /* Fonts */
+    { id: "font.language.group", name: "font.language.group", type: "wstring" },
+
+    /* Languages */
+    { id: "browser.translation.detectLanguage", name: "browser.translation.detectLanguage", type: "bool" },
+
+    /* General tab */
+
+    /* Accessibility
+     * accessibility.browsewithcaret
+       - true enables keyboard navigation and selection within web pages using a
+         visible caret, false uses normal keyboard navigation with no caret
+     * accessibility.typeaheadfind
+       - when set to true, typing outside text areas and input boxes will
+         automatically start searching for what's typed within the current
+         document; when set to false, no search action happens */
+    { id: "accessibility.browsewithcaret", name: "accessibility.browsewithcaret", type: "bool" },
+    { id: "accessibility.typeaheadfind", name: "accessibility.typeaheadfind", type: "bool" },
+    { id: "accessibility.blockautorefresh", name: "accessibility.blockautorefresh", type: "bool" },
 #ifdef XP_WIN
-      { id: "ui.osk.enabled", name: "ui.osk.enabled", type: "bool" },
+    { id: "ui.osk.enabled", name: "ui.osk.enabled", type: "bool" },
 #endif
 
-      /* Browsing
-       * general.autoScroll
-         - when set to true, clicking the scroll wheel on the mouse activates a
-           mouse mode where moving the mouse down scrolls the document downward with
-           speed correlated with the distance of the cursor from the original
-           position at which the click occurred (and likewise with movement upward);
-           if false, this behavior is disabled
-       * general.smoothScroll
-         - set to true to enable finer page scrolling than line-by-line on page-up,
-           page-down, and other such page movements */
-      { id: "general.autoScroll", name: "general.autoScroll", type: "bool" },
-      { id: "general.smoothScroll", name: "general.smoothScroll", type: "bool" },
-      { id: "layout.spellcheckDefault", name: "layout.spellcheckDefault", type: "int" },
-      { id: "toolkit.telemetry.enabled", name: "toolkit.telemetry.enabled", type: "bool" },
-      { id: "browser.preferences.defaultPerformanceSettings.enabled", name: "browser.preferences.defaultPerformanceSettings.enabled", type: "bool" },
-      { id: "dom.ipc.processCount", name: "dom.ipc.processCount", type: "int" },
-      { id: "layers.acceleration.disabled", name: "layers.acceleration.disabled", type: "bool", inverted: true },
-    ],
-  });
+    /* Browsing
+     * general.autoScroll
+       - when set to true, clicking the scroll wheel on the mouse activates a
+         mouse mode where moving the mouse down scrolls the document downward with
+         speed correlated with the distance of the cursor from the original
+         position at which the click occurred (and likewise with movement upward);
+         if false, this behavior is disabled
+     * general.smoothScroll
+       - set to true to enable finer page scrolling than line-by-line on page-up,
+         page-down, and other such page movements */
+    { id: "general.autoScroll", name: "general.autoScroll", type: "bool" },
+    { id: "general.smoothScroll", name: "general.smoothScroll", type: "bool" },
+    { id: "layout.spellcheckDefault", name: "layout.spellcheckDefault", type: "int" },
+    { id: "toolkit.telemetry.enabled", name: "toolkit.telemetry.enabled", type: "bool" },
+    { id: "browser.preferences.defaultPerformanceSettings.enabled", name: "browser.preferences.defaultPerformanceSettings.enabled", type: "bool" },
+    { id: "dom.ipc.processCount", name: "dom.ipc.processCount", type: "int" },
+    { id: "layers.acceleration.disabled", name: "layers.acceleration.disabled", type: "bool", inverted: true },
+  ]);
 }, { once: true, capture: true });
 
 const ENGINE_FLAVOR = "text/x-moz-search-engine";
@@ -489,7 +487,7 @@ var gMainPane = {
    */
 
   syncFromHomePref() {
-    let homePref = gMainPreferences.get("browser.startup.homepage");
+    let homePref = Preferences.get("browser.startup.homepage");
 
     // If the pref is set to about:home or about:newtab, set the value to ""
     // to show the placeholder text (about:home title) rather than
@@ -626,7 +624,7 @@ var gMainPane = {
    */
   updateButtons(aButtonID, aPreferenceID) {
     var button = document.getElementById(aButtonID);
-    var preference = gMainPreferences.get(aPreferenceID);
+    var preference = Preferences.get(aPreferenceID);
     button.disabled = preference.value != true;
     return undefined;
   },
@@ -682,7 +680,7 @@ var gMainPane = {
    * @returns |true| if such links should be opened in new tabs
    */
   readLinkTarget() {
-    var openNewWindow = gMainPreferences.get("browser.link.open_newwindow");
+    var openNewWindow = Preferences.get("browser.link.open_newwindow");
     return openNewWindow.value != 2;
   },
 
@@ -896,7 +894,7 @@ var gMainPane = {
    *     2  enables spellchecking for all text fields
    */
   readCheckSpelling() {
-    var pref = gMainPreferences.get("layout.spellcheckDefault");
+    var pref = Preferences.get("layout.spellcheckDefault");
     this._storedSpellCheck = pref.value;
 
     return (pref.value != 0);
diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 0a6e27bdbed5..20610ce2a12a 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -354,14 +354,21 @@ function confirmRestartPrompt(aRestartToEnable, aDefaultButtonIndex,
   return buttonIndex;
 }
 
-function Preferences() {
+function Preferences(prefInfos) {
   // Call the EventEmitter constructor, as we inherit EventEmitter.
   EventEmitter.call(this);
+
+  // XXX Pass the preferences (i.e. this) object to the Preference constructor
+  // as a separate parameter rather than as part of the prefInfo object.
+  const prefs = prefInfos.map(v => new Preference(Object.assign(v, { preferences: this })));
+  this.preferences = this.preferences.concat(prefs);
+  Preferences.all = Preferences.all.concat(prefs);
+  this._constructAfterChildren();
 };
 
 Preferences.all = [];
 Preferences.get = function(id) {
-  // Implement a hash to optimize this query.
+  // XXX Implement a hash to optimize this query.
   for (let i = 0; i < this.all.length; i++) {
     if (this.all[i].id === id) {
       return this.all[i];
@@ -391,7 +398,7 @@ Object.assign(Preferences.prototype, {
   },
 
   get(id) {
-    // Implement a hash to optimize this query.
+    // XXX Implement a hash to optimize this query.
     for (let i = 0; i < this.preferences.length; i++) {
       if (this.preferences[i].id === id) {
         return this.preferences[i];
@@ -411,14 +418,6 @@ Object.assign(Preferences.prototype, {
     return pref;
   },
 
-  addAll({ preferences }) {
-    let prefs = preferences.map(v => new Preference(Object.assign(v, { preferences: this })));
-    this.preferences = this.preferences.concat(prefs);
-    Preferences.all = Preferences.all.concat(prefs);
-    // XXX Only construct the newly added children.
-    this._constructAfterChildren();
-  },
-
   // XXX Make the constructor do this itself, since it knows when it has
   // constructed all the children.
   _constructAfterChildren() {
diff --git a/browser/components/preferences/in-content-new/privacy.js b/browser/components/preferences/in-content-new/privacy.js
index a57e81320be9..c13fcc2a2095 100644
--- a/browser/components/preferences/in-content-new/privacy.js
+++ b/browser/components/preferences/in-content-new/privacy.js
@@ -33,98 +33,96 @@ XPCOMUtils.defineLazyGetter(this, "AlertsServiceDND", function() {
   }
 });
 
+let gPrivacyPreferences;
 window.addEventListener("DOMContentLoaded", function() {
-  window.gPrivacyPreferences = new Preferences();
-  gPrivacyPreferences.addAll({
-    preferences: [
-      { id: "privacy.userContext.enabled", name: "privacy.userContext.enabled", type: "bool" },
-
-      // Tracking
-      { id: "privacy.trackingprotection.enabled", name: "privacy.trackingprotection.enabled", type: "bool" },
-      { id: "privacy.trackingprotection.pbmode.enabled", name: "privacy.trackingprotection.pbmode.enabled", type: "bool" },
-
-      // XXX button prefs
-      { id: "pref.privacy.disable_button.cookie_exceptions", name: "pref.privacy.disable_button.cookie_exceptions", type: "bool" },
-      { id: "pref.privacy.disable_button.view_cookies", name: "pref.privacy.disable_button.view_cookies", type: "bool" },
-      { id: "pref.privacy.disable_button.change_blocklist", name: "pref.privacy.disable_button.change_blocklist", type: "bool" },
-      { id: "pref.privacy.disable_button.tracking_protection_exceptions", name: "pref.privacy.disable_button.tracking_protection_exceptions", type: "bool" },
-
-      // Location Bar
-      { id: "browser.urlbar.autocomplete.enabled", name: "browser.urlbar.autocomplete.enabled", type: "bool" },
-      { id: "browser.urlbar.suggest.bookmark", name: "browser.urlbar.suggest.bookmark", type: "bool" },
-      { id: "browser.urlbar.suggest.history", name: "browser.urlbar.suggest.history", type: "bool" },
-      { id: "browser.urlbar.suggest.openpage", name: "browser.urlbar.suggest.openpage", type: "bool" },
-
-      // History
-      { id: "places.history.enabled", name: "places.history.enabled", type: "bool" },
-      { id: "browser.formfill.enable", name: "browser.formfill.enable", type: "bool" },
-      { id: "privacy.history.custom", name: "privacy.history.custom", type: "bool" },
-      // Cookies
-      { id: "network.cookie.cookieBehavior", name: "network.cookie.cookieBehavior", type: "int" },
-      { id: "network.cookie.lifetimePolicy", name: "network.cookie.lifetimePolicy", type: "int" },
-      { id: "network.cookie.blockFutureCookies", name: "network.cookie.blockFutureCookies", type: "bool" },
-      // Clear Private Data
-      { id: "privacy.sanitize.sanitizeOnShutdown", name: "privacy.sanitize.sanitizeOnShutdown", type: "bool" },
-      { id: "privacy.sanitize.timeSpan", name: "privacy.sanitize.timeSpan", type: "int" },
-      // Private Browsing
-      { id: "browser.privatebrowsing.autostart", name: "browser.privatebrowsing.autostart", type: "bool" },
-      // Do not track
-      { id: "privacy.donottrackheader.enabled", name: "privacy.donottrackheader.enabled", type: "bool" },
-
-      // DRM content
-      { id: "media.eme.enabled", name: "media.eme.enabled", type: "bool" },
-
-      // Popups
-      { id: "dom.disable_open_during_load", name: "dom.disable_open_during_load", type: "bool" },
-      // Passwords
-      { id: "signon.rememberSignons", name: "signon.rememberSignons", type: "bool" },
-
-      // XXX buttons
-      { id: "pref.privacy.disable_button.view_passwords", name: "pref.privacy.disable_button.view_passwords", type: "bool" },
-      { id: "pref.privacy.disable_button.view_passwords_exceptions", name: "pref.privacy.disable_button.view_passwords_exceptions", type: "bool" },
-
-      /* Certificates tab
-       * security.default_personal_cert
-       *   - a string:
-       *       "Select Automatically"   select a certificate automatically when a site
-       *                                requests one
-       *       "Ask Every Time"         present a dialog to the user so he can select
-       *                                the certificate to use on a site which
-       *                                requests one
-       */
-      { id: "security.default_personal_cert", name: "security.default_personal_cert", type: "string" },
-
-      { id: "security.disable_button.openCertManager", name: "security.disable_button.openCertManager", type: "bool" },
-
-      { id: "security.disable_button.openDeviceManager", name: "security.disable_button.openDeviceManager", type: "bool" },
-
-      { id: "security.OCSP.enabled", name: "security.OCSP.enabled", type: "int" },
-
-      // Add-ons, malware, phishing
-      { id: "xpinstall.whitelist.required", name: "xpinstall.whitelist.required", type: "bool" },
-
-      { id: "browser.safebrowsing.malware.enabled", name: "browser.safebrowsing.malware.enabled", type: "bool" },
-      { id: "browser.safebrowsing.phishing.enabled", name: "browser.safebrowsing.phishing.enabled", type: "bool" },
-
-      { id: "browser.safebrowsing.downloads.enabled", name: "browser.safebrowsing.downloads.enabled", type: "bool" },
-
-      { id: "urlclassifier.malwareTable", name: "urlclassifier.malwareTable", type: "string" },
-
-      { id: "browser.safebrowsing.downloads.remote.block_potentially_unwanted", name: "browser.safebrowsing.downloads.remote.block_potentially_unwanted", type: "bool" },
-      { id: "browser.safebrowsing.downloads.remote.block_uncommon", name: "browser.safebrowsing.downloads.remote.block_uncommon", type: "bool" },
-
-      // Network tab
-      { id: "browser.cache.disk.capacity", name: "browser.cache.disk.capacity", type: "int" },
-      { id: "browser.offline-apps.notify", name: "browser.offline-apps.notify", type: "bool" },
-
-      { id: "browser.cache.disk.smart_size.enabled", name: "browser.cache.disk.smart_size.enabled", type: "bool", inverted: "true" },
-
-      // Data Choices tab
+  gPrivacyPreferences = window.gPrivacyPreferences = new Preferences([
+    { id: "privacy.userContext.enabled", name: "privacy.userContext.enabled", type: "bool" },
+
+    // Tracking
+    { id: "privacy.trackingprotection.enabled", name: "privacy.trackingprotection.enabled", type: "bool" },
+    { id: "privacy.trackingprotection.pbmode.enabled", name: "privacy.trackingprotection.pbmode.enabled", type: "bool" },
+
+    // XXX button prefs
+    { id: "pref.privacy.disable_button.cookie_exceptions", name: "pref.privacy.disable_button.cookie_exceptions", type: "bool" },
+    { id: "pref.privacy.disable_button.view_cookies", name: "pref.privacy.disable_button.view_cookies", type: "bool" },
+    { id: "pref.privacy.disable_button.change_blocklist", name: "pref.privacy.disable_button.change_blocklist", type: "bool" },
+    { id: "pref.privacy.disable_button.tracking_protection_exceptions", name: "pref.privacy.disable_button.tracking_protection_exceptions", type: "bool" },
+
+    // Location Bar
+    { id: "browser.urlbar.autocomplete.enabled", name: "browser.urlbar.autocomplete.enabled", type: "bool" },
+    { id: "browser.urlbar.suggest.bookmark", name: "browser.urlbar.suggest.bookmark", type: "bool" },
+    { id: "browser.urlbar.suggest.history", name: "browser.urlbar.suggest.history", type: "bool" },
+    { id: "browser.urlbar.suggest.openpage", name: "browser.urlbar.suggest.openpage", type: "bool" },
+
+    // History
+    { id: "places.history.enabled", name: "places.history.enabled", type: "bool" },
+    { id: "browser.formfill.enable", name: "browser.formfill.enable", type: "bool" },
+    { id: "privacy.history.custom", name: "privacy.history.custom", type: "bool" },
+    // Cookies
+    { id: "network.cookie.cookieBehavior", name: "network.cookie.cookieBehavior", type: "int" },
+    { id: "network.cookie.lifetimePolicy", name: "network.cookie.lifetimePolicy", type: "int" },
+    { id: "network.cookie.blockFutureCookies", name: "network.cookie.blockFutureCookies", type: "bool" },
+    // Clear Private Data
+    { id: "privacy.sanitize.sanitizeOnShutdown", name: "privacy.sanitize.sanitizeOnShutdown", type: "bool" },
+    { id: "privacy.sanitize.timeSpan", name: "privacy.sanitize.timeSpan", type: "int" },
+    // Private Browsing
+    { id: "browser.privatebrowsing.autostart", name: "browser.privatebrowsing.autostart", type: "bool" },
+    // Do not track
+    { id: "privacy.donottrackheader.enabled", name: "privacy.donottrackheader.enabled", type: "bool" },
+
+    // DRM content
+    { id: "media.eme.enabled", name: "media.eme.enabled", type: "bool" },
+
+    // Popups
+    { id: "dom.disable_open_during_load", name: "dom.disable_open_during_load", type: "bool" },
+    // Passwords
+    { id: "signon.rememberSignons", name: "signon.rememberSignons", type: "bool" },
+
+    // XXX buttons
+    { id: "pref.privacy.disable_button.view_passwords", name: "pref.privacy.disable_button.view_passwords", type: "bool" },
+    { id: "pref.privacy.disable_button.view_passwords_exceptions", name: "pref.privacy.disable_button.view_passwords_exceptions", type: "bool" },
+
+    /* Certificates tab
+     * security.default_personal_cert
+     *   - a string:
+     *       "Select Automatically"   select a certificate automatically when a site
+     *                                requests one
+     *       "Ask Every Time"         present a dialog to the user so he can select
+     *                                the certificate to use on a site which
+     *                                requests one
+     */
+    { id: "security.default_personal_cert", name: "security.default_personal_cert", type: "string" },
+
+    { id: "security.disable_button.openCertManager", name: "security.disable_button.openCertManager", type: "bool" },
+
+    { id: "security.disable_button.openDeviceManager", name: "security.disable_button.openDeviceManager", type: "bool" },
+
+    { id: "security.OCSP.enabled", name: "security.OCSP.enabled", type: "int" },
+
+    // Add-ons, malware, phishing
+    { id: "xpinstall.whitelist.required", name: "xpinstall.whitelist.required", type: "bool" },
+
+    { id: "browser.safebrowsing.malware.enabled", name: "browser.safebrowsing.malware.enabled", type: "bool" },
+    { id: "browser.safebrowsing.phishing.enabled", name: "browser.safebrowsing.phishing.enabled", type: "bool" },
+
+    { id: "browser.safebrowsing.downloads.enabled", name: "browser.safebrowsing.downloads.enabled", type: "bool" },
+
+    { id: "urlclassifier.malwareTable", name: "urlclassifier.malwareTable", type: "string" },
+
+    { id: "browser.safebrowsing.downloads.remote.block_potentially_unwanted", name: "browser.safebrowsing.downloads.remote.block_potentially_unwanted", type: "bool" },
+    { id: "browser.safebrowsing.downloads.remote.block_uncommon", name: "browser.safebrowsing.downloads.remote.block_uncommon", type: "bool" },
+
+    // Network tab
+    { id: "browser.cache.disk.capacity", name: "browser.cache.disk.capacity", type: "int" },
+    { id: "browser.offline-apps.notify", name: "browser.offline-apps.notify", type: "bool" },
+
+    { id: "browser.cache.disk.smart_size.enabled", name: "browser.cache.disk.smart_size.enabled", type: "bool", inverted: "true" },
+
+    // Data Choices tab
 #ifdef MOZ_CRASHREPORTER
-      { id: "browser.crashReports.unsubmittedCheck.autoSubmit", name: "browser.crashReports.unsubmittedCheck.autoSubmit", type: "bool" },
+    { id: "browser.crashReports.unsubmittedCheck.autoSubmit", name: "browser.crashReports.unsubmittedCheck.autoSubmit", type: "bool" },
 #endif
-    ],
-  });
+  ]);
 }, { once: true, capture: true });
 
 var gPrivacyPane = {
@@ -815,7 +813,7 @@ var gPrivacyPane = {
    * if cookies are enabled.
    */
   readAcceptCookies() {
-    var pref = gPrivacyPreferences.get("network.cookie.cookieBehavior");
+    var pref = Preferences.get("network.cookie.cookieBehavior");
     var acceptThirdPartyLabel = document.getElementById("acceptThirdPartyLabel");
     var acceptThirdPartyMenu = document.getElementById("acceptThirdPartyMenu");
     var keepUntil = document.getElementById("keepUntil");
@@ -849,7 +847,7 @@ var gPrivacyPane = {
    * Converts between network.cookie.cookieBehavior and the third-party cookie UI
    */
   readAcceptThirdPartyCookies() {
-    var pref = gPrivacyPreferences.get("network.cookie.cookieBehavior");
+    var pref = Preferences.get("network.cookie.cookieBehavior");
     switch (pref.value) {
       case 0:
         return "always";
@@ -965,7 +963,7 @@ var gPrivacyPane = {
     * Enables/disables the Settings button used to configure containers
     */
    readBrowserContainersCheckbox() {
-     var pref = gPrivacyPreferences.get("privacy.userContext.enabled");
+     var pref = Preferences.get("privacy.userContext.enabled");
      var settings = document.getElementById("browserContainersSettings");
 
      settings.disabled = !pref.value;
@@ -1022,7 +1020,7 @@ var gPrivacyPane = {
    */
   updateButtons(aButtonID, aPreferenceID) {
     var button = document.getElementById(aButtonID);
-    var preference = gPrivacyPreferences.get(aPreferenceID);
+    var preference = Preferences.get(aPreferenceID);
     button.disabled = preference.value != true;
     return undefined;
   },
@@ -1142,7 +1140,7 @@ var gPrivacyPane = {
    * Browsing mode, the "Remember passwords" UI is useless, so we disable it.
    */
   readSavePasswords() {
-    var pref = gPrivacyPreferences.get("signon.rememberSignons");
+    var pref = Preferences.get("signon.rememberSignons");
     var excepts = document.getElementById("passwordExceptions");
 
     if (PrivateBrowsingUtils.permanentPrivateBrowsing) {
@@ -1160,7 +1158,7 @@ var gPrivacyPane = {
    * or not add-on installation warnings are displayed.
    */
   readWarnAddonInstall() {
-    var warn = gPrivacyPreferences.get("xpinstall.whitelist.required");
+    var warn = Preferences.get("xpinstall.whitelist.required");
     var exceptions = document.getElementById("addonExceptions");
 
     exceptions.disabled = !warn.value;
@@ -1284,7 +1282,7 @@ var gPrivacyPane = {
    * checked. Otherwise, it should be unchecked.
    */
   readEnableOCSP() {
-    var preference = gPrivacyPreferences.get("security.OCSP.enabled");
+    var preference = Preferences.get("security.OCSP.enabled");
     // This is the case if the preference is the default value.
     if (preference.value === undefined) {
       return true;
@@ -1435,7 +1433,7 @@ var gPrivacyPane = {
   readSmartSizeEnabled() {
     // The smart_size.enabled preference element is inverted="true", so its
     // value is the opposite of the actual pref value
-    var disabled = gPrivacyPreferences.get("browser.cache.disk.smart_size.enabled").value;
+    var disabled = Preferences.get("browser.cache.disk.smart_size.enabled").value;
     this.updateCacheSizeUI(!disabled);
   },
 
@@ -1607,7 +1605,7 @@ var gPrivacyPane = {
   },
 
   readOfflineNotify() {
-    var pref = gPrivacyPreferences.get("browser.offline-apps.notify");
+    var pref = Preferences.get("browser.offline-apps.notify");
     var button = document.getElementById("offlineNotifyExceptions");
     button.disabled = !pref.value;
     return pref.value;
diff --git a/browser/components/preferences/in-content-new/sync.js b/browser/components/preferences/in-content-new/sync.js
index 90ba35a3d6ae..f9a68ede46b9 100644
--- a/browser/components/preferences/in-content-new/sync.js
+++ b/browser/components/preferences/in-content-new/sync.js
@@ -25,18 +25,16 @@ const FXA_LOGIN_UNVERIFIED = 1;
 // We are logged in locally, but the server rejected our credentials.
 const FXA_LOGIN_FAILED = 2;
 
+let gSyncEnginePrefs;
 window.addEventListener("DOMContentLoaded", function() {
-  window.gSyncEnginePrefs = new Preferences();
-  gSyncEnginePrefs.addAll({
-    preferences: [
-      { id: "engine.addons", name: "services.sync.engine.addons", type: "bool" },
-      { id: "engine.bookmarks", name: "services.sync.engine.bookmarks", type: "bool" },
-      { id: "engine.history", name: "services.sync.engine.history", type: "bool" },
-      { id: "engine.tabs", name: "services.sync.engine.tabs", type: "bool" },
-      { id: "engine.prefs", name: "services.sync.engine.prefs", type: "bool" },
-      { id: "engine.passwords", name: "services.sync.engine.passwords", type: "bool" },
-    ],
-  });
+  gSyncEnginePrefs = window.gSyncEnginePrefs = new Preferences([
+    { id: "engine.addons", name: "services.sync.engine.addons", type: "bool" },
+    { id: "engine.bookmarks", name: "services.sync.engine.bookmarks", type: "bool" },
+    { id: "engine.history", name: "services.sync.engine.history", type: "bool" },
+    { id: "engine.tabs", name: "services.sync.engine.tabs", type: "bool" },
+    { id: "engine.prefs", name: "services.sync.engine.prefs", type: "bool" },
+    { id: "engine.passwords", name: "services.sync.engine.passwords", type: "bool" },
+  ]);
 }, { once: true, capture: true });
 
 var gSyncPane = {

From 12269bc5b9d1ef8eae03149f220625d2c94d5957 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 7 Jul 2017 12:33:12 -0700
Subject: [PATCH 041/106] remove unnecessary variable declaration

---
 browser/components/preferences/in-content-new/advanced.js     | 3 +--
 browser/components/preferences/in-content-new/applications.js | 3 +--
 browser/components/preferences/in-content-new/main.js         | 3 +--
 browser/components/preferences/in-content-new/privacy.js      | 3 +--
 browser/components/preferences/in-content-new/sync.js         | 3 +--
 5 files changed, 5 insertions(+), 10 deletions(-)

diff --git a/browser/components/preferences/in-content-new/advanced.js b/browser/components/preferences/in-content-new/advanced.js
index 323b98a151eb..58894b0a67c9 100644
--- a/browser/components/preferences/in-content-new/advanced.js
+++ b/browser/components/preferences/in-content-new/advanced.js
@@ -10,9 +10,8 @@ Components.utils.import("resource://gre/modules/DownloadUtils.jsm");
 Components.utils.import("resource://gre/modules/LoadContextInfo.jsm");
 Components.utils.import("resource://gre/modules/XPCOMUtils.jsm");
 
-let gAdvancedPreferences;
 window.addEventListener("DOMContentLoaded", function() {
-  gAdvancedPreferences = window.gAdvancedPreferences = new Preferences([
+  window.gAdvancedPreferences = new Preferences([
     { id: "browser.preferences.advanced.selectedTabIndex", name: "browser.preferences.advanced.selectedTabIndex", type: "int" },
 
     // Update tab
diff --git a/browser/components/preferences/in-content-new/applications.js b/browser/components/preferences/in-content-new/applications.js
index bcf01433fbcb..dba0039ed767 100644
--- a/browser/components/preferences/in-content-new/applications.js
+++ b/browser/components/preferences/in-content-new/applications.js
@@ -80,9 +80,8 @@ const APP_ICON_ATTR_NAME = "appHandlerIcon";
 
 // Preferences object
 
-let gAppPreferences;
 window.addEventListener("DOMContentLoaded", function() {
-  gAppPreferences = window.gAppPreferences = new Preferences([
+  window.gAppPreferences = new Preferences([
     { id: "browser.feeds.handler", name: "browser.feeds.handler", type: "string" },
     { id: "browser.feeds.handler.default", name: "browser.feeds.handler.default", type: "string" },
     { id: "browser.feeds.handlers.application", name: "browser.feeds.handlers.application", type: "file" },
diff --git a/browser/components/preferences/in-content-new/main.js b/browser/components/preferences/in-content-new/main.js
index 924e24f04f3c..002bc2add973 100644
--- a/browser/components/preferences/in-content-new/main.js
+++ b/browser/components/preferences/in-content-new/main.js
@@ -30,10 +30,9 @@ if (AppConstants.MOZ_DEV_EDITION) {
 // Instantiate preferences after DOM content is loaded but before the pane
 // is initialized, so the DOM elements are available to the Preference objects,
 // and the Preference objects are available to the pane initializer.
-let gMainPreferences;
 window.addEventListener("DOMContentLoaded", function() {
   // XXX Rename this to gMainPrefs.
-  gMainPreferences = window.gMainPreferences = new Preferences([
+  window.gMainPreferences = new Preferences([
 #ifdef E10S_TESTING_ONLY
     { id: "browser.tabs.remote.autostart", name: "browser.tabs.remote.autostart", type: "bool" },
     { id: "e10sTempPref", name: "browser.tabs.remote.autostart.2", type: "bool" },
diff --git a/browser/components/preferences/in-content-new/privacy.js b/browser/components/preferences/in-content-new/privacy.js
index c13fcc2a2095..350c9aad6a2c 100644
--- a/browser/components/preferences/in-content-new/privacy.js
+++ b/browser/components/preferences/in-content-new/privacy.js
@@ -33,9 +33,8 @@ XPCOMUtils.defineLazyGetter(this, "AlertsServiceDND", function() {
   }
 });
 
-let gPrivacyPreferences;
 window.addEventListener("DOMContentLoaded", function() {
-  gPrivacyPreferences = window.gPrivacyPreferences = new Preferences([
+  window.gPrivacyPreferences = new Preferences([
     { id: "privacy.userContext.enabled", name: "privacy.userContext.enabled", type: "bool" },
 
     // Tracking
diff --git a/browser/components/preferences/in-content-new/sync.js b/browser/components/preferences/in-content-new/sync.js
index f9a68ede46b9..9ff14fe66374 100644
--- a/browser/components/preferences/in-content-new/sync.js
+++ b/browser/components/preferences/in-content-new/sync.js
@@ -25,9 +25,8 @@ const FXA_LOGIN_UNVERIFIED = 1;
 // We are logged in locally, but the server rejected our credentials.
 const FXA_LOGIN_FAILED = 2;
 
-let gSyncEnginePrefs;
 window.addEventListener("DOMContentLoaded", function() {
-  gSyncEnginePrefs = window.gSyncEnginePrefs = new Preferences([
+  window.gSyncEnginePrefs = new Preferences([
     { id: "engine.addons", name: "services.sync.engine.addons", type: "bool" },
     { id: "engine.bookmarks", name: "services.sync.engine.bookmarks", type: "bool" },
     { id: "engine.history", name: "services.sync.engine.history", type: "bool" },

From 21330f61d4ae05273e428a2d654bf87723bc96f8 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 7 Jul 2017 13:00:34 -0700
Subject: [PATCH 042/106] replace references to gMainPreferences with
 references to Preferences

---
 .../preferences/in-content-new/applications.js     |  8 +--
 .../components/preferences/in-content-new/main.js  | 69 +++++++++++-----------
 .../preferences/in-content-new/preferences.js      | 25 ++++++++
 .../tests/browser_basic_rebuild_fonts_test.js      |  2 +-
 4 files changed, 64 insertions(+), 40 deletions(-)

diff --git a/browser/components/preferences/in-content-new/applications.js b/browser/components/preferences/in-content-new/applications.js
index dba0039ed767..87b83432b405 100644
--- a/browser/components/preferences/in-content-new/applications.js
+++ b/browser/components/preferences/in-content-new/applications.js
@@ -935,7 +935,7 @@ var gApplicationsPane = {
     setEventListener("typeColumn", "click", gApplicationsPane.sort);
     setEventListener("actionColumn", "click", gApplicationsPane.sort);
     setEventListener("chooseFolder", "command", gApplicationsPane.chooseFolder);
-    gMainPreferences.get("browser.download.dir").on("change", gApplicationsPane.displayDownloadDirPref);
+    Preferences.get("browser.download.dir").on("change", gApplicationsPane.displayDownloadDirPref);
 
     // Listen for window unload so we can remove our preference observers.
     window.addEventListener("unload", this);
@@ -1978,7 +1978,7 @@ var gApplicationsPane = {
   async chooseFolderTask() {
     let bundlePreferences = document.getElementById("bundlePreferences");
     let title = bundlePreferences.getString("chooseDownloadFolderTitle");
-    let folderListPref = gMainPreferences.get("browser.download.folderList");
+    let folderListPref = Preferences.get("browser.download.folderList");
     let currentDirPref = await this._indexToFolder(folderListPref.value);
     let defDownloads = await this._indexToFolder(1);
     let fp = Components.classes["@mozilla.org/filepicker;1"].
@@ -2002,7 +2002,7 @@ var gApplicationsPane = {
       return;
     }
 
-    let downloadDirPref = gMainPreferences.get("browser.download.dir");
+    let downloadDirPref = Preferences.get("browser.download.dir");
     downloadDirPref.value = fp.file;
     folderListPref.value = await this._folderToIndex(fp.file);
     // Note, the real prefs will not be updated yet, so dnld manager's
@@ -2117,7 +2117,7 @@ var gApplicationsPane = {
       case 1:
         return await this._getDownloadsFolder("Downloads");
     }
-    var currentDirPref = gMainPreferences.get("browser.download.dir");
+    var currentDirPref = Preferences.get("browser.download.dir");
     return currentDirPref.value;
   }
 
diff --git a/browser/components/preferences/in-content-new/main.js b/browser/components/preferences/in-content-new/main.js
index 002bc2add973..24c01ed529de 100644
--- a/browser/components/preferences/in-content-new/main.js
+++ b/browser/components/preferences/in-content-new/main.js
@@ -31,8 +31,7 @@ if (AppConstants.MOZ_DEV_EDITION) {
 // is initialized, so the DOM elements are available to the Preference objects,
 // and the Preference objects are available to the pane initializer.
 window.addEventListener("DOMContentLoaded", function() {
-  // XXX Rename this to gMainPrefs.
-  window.gMainPreferences = new Preferences([
+  new Preferences([
 #ifdef E10S_TESTING_ONLY
     { id: "browser.tabs.remote.autostart", name: "browser.tabs.remote.autostart", type: "bool" },
     { id: "e10sTempPref", name: "browser.tabs.remote.autostart.2", type: "bool" },
@@ -218,7 +217,7 @@ var gMainPane = {
     this._initAutocomplete();
 
     let suggestsPref =
-      gMainPreferences.get("browser.search.suggest.enabled");
+      Preferences.get("browser.search.suggest.enabled");
     suggestsPref.on("change", () => {
       this.updateSuggestsCheckbox();
     });
@@ -227,7 +226,7 @@ var gMainPane = {
     this.updateDefaultPerformanceSettingsPref();
 
     let defaultPerformancePref =
-      gMainPreferences.get("browser.preferences.defaultPerformanceSettings.enabled");
+      Preferences.get("browser.preferences.defaultPerformanceSettings.enabled");
     defaultPerformancePref.on("change", () => {
       this.updatePerformanceSettingsBox();
     });
@@ -259,7 +258,7 @@ var gMainPane = {
     if (!TransientPrefs.prefShouldBeVisible("browser.tabs.warnOnOpen"))
       document.getElementById("warnOpenMany").hidden = true;
 
-    gMainPreferences.get("browser.privatebrowsing.autostart").on("change",
+    Preferences.get("browser.privatebrowsing.autostart").on("change",
                      gMainPane.updateBrowserStartupLastSession);
     if (AppConstants.HAVE_SHELL_SERVICE) {
       setEventListener("setDefaultButton", "command",
@@ -277,13 +276,13 @@ var gMainPane = {
       gMainPane.openTranslationProviderAttribution);
     setEventListener("translateButton", "command",
       gMainPane.showTranslationExceptions);
-    gMainPreferences.get("font.language.group").on("change",
+    Preferences.get("font.language.group").on("change",
       gMainPane._rebuildFonts);
     setEventListener("advancedFonts", "command",
       gMainPane.configureFonts);
     setEventListener("colors", "command",
       gMainPane.configureColors);
-    gMainPreferences.get("layers.acceleration.disabled").on("change",
+    Preferences.get("layers.acceleration.disabled").on("change",
       gMainPane.updateHardwareAcceleration);
 
     // Initializes the fonts dropdowns displayed in this pane.
@@ -308,9 +307,9 @@ var gMainPane = {
                        gMainPane.enableE10SChange);
       let e10sCheckbox = document.getElementById("e10sAutoStart");
 
-      let e10sPref = gMainPreferences.get("browser.tabs.remote.autostart");
-      let e10sTempPref = gMainPreferences.get("e10sTempPref");
-      let e10sForceEnable = gMainPreferences.get("e10sForceEnable");
+      let e10sPref = Preferences.get("browser.tabs.remote.autostart");
+      let e10sTempPref = Preferences.get("e10sTempPref");
+      let e10sForceEnable = Preferences.get("e10sForceEnable");
 
       let preffedOn = e10sPref.value || e10sTempPref.value || e10sForceEnable.value;
 
@@ -364,8 +363,8 @@ var gMainPane = {
   enableE10SChange() {
     if (AppConstants.E10S_TESTING_ONLY) {
       let e10sCheckbox = document.getElementById("e10sAutoStart");
-      let e10sPref = gMainPreferences.get("browser.tabs.remote.autostart");
-      let e10sTempPref = gMainPreferences.get("e10sTempPref");
+      let e10sPref = Preferences.get("browser.tabs.remote.autostart");
+      let e10sTempPref = Preferences.get("e10sTempPref");
 
       let prefsToChange;
       if (e10sCheckbox.checked) {
@@ -525,7 +524,7 @@ var gMainPane = {
    * window UI to reflect this.
    */
   setHomePageToCurrent() {
-    let homePage = gMainPreferences.get("browser.startup.homepage");
+    let homePage = Preferences.get("browser.startup.homepage");
     let tabs = this._getTabsForHomePage();
     function getTabURI(t) {
       return t.linkedBrowser.currentURI.spec;
@@ -552,7 +551,7 @@ var gMainPane = {
     if (aEvent.detail.button != "accept")
       return;
     if (rv.urls && rv.names) {
-      var homePage = gMainPreferences.get("browser.startup.homepage");
+      var homePage = Preferences.get("browser.startup.homepage");
 
       // XXX still using dangerous "|" joiner!
       homePage.value = rv.urls.join("|");
@@ -576,7 +575,7 @@ var gMainPane = {
 
     // In this case, the button's disabled state is set by preferences.xml.
     let prefName = "pref.browser.homepage.disable_button.current_page";
-    if (gMainPreferences.get(prefName).locked)
+    if (Preferences.get(prefName).locked)
       return;
 
     useCurrent.disabled = !tabs.length
@@ -613,7 +612,7 @@ var gMainPane = {
    * Restores the default home page as the user's home page.
    */
   restoreDefaultHomePage() {
-    var homePage = gMainPreferences.get("browser.startup.homepage");
+    var homePage = Preferences.get("browser.startup.homepage");
     homePage.value = homePage.defaultValue;
   },
 
@@ -633,8 +632,8 @@ var gMainPane = {
    * on the value of the browser.privatebrowsing.autostart pref.
    */
   updateBrowserStartupLastSession() {
-    let pbAutoStartPref = gMainPreferences.get("browser.privatebrowsing.autostart");
-    let startupPref = gMainPreferences.get("browser.startup.page");
+    let pbAutoStartPref = Preferences.get("browser.privatebrowsing.autostart");
+    let startupPref = Preferences.get("browser.startup.page");
     let menu = document.getElementById("browserStartupPage");
     let option = document.getElementById("browserStartupLastSession");
     if (pbAutoStartPref.value) {
@@ -727,7 +726,7 @@ var gMainPane = {
    */
   setDefaultBrowser() {
     if (AppConstants.HAVE_SHELL_SERVICE) {
-      let alwaysCheckPref = gMainPreferences.get("browser.shell.checkDefaultBrowser");
+      let alwaysCheckPref = Preferences.get("browser.shell.checkDefaultBrowser");
       alwaysCheckPref.value = true;
 
       let shellSvc = getShellService();
@@ -806,7 +805,7 @@ var gMainPane = {
    * Populates the default font list in UI.
    */
   _rebuildFonts() {
-    var langGroupPref = gMainPreferences.get("font.language.group");
+    var langGroupPref = Preferences.get("font.language.group");
     this._selectDefaultLanguageGroup(langGroupPref.value,
                                      this._readDefaultFontTypeForLanguage(langGroupPref.value) == "serif");
   },
@@ -818,9 +817,9 @@ var gMainPane = {
   _readDefaultFontTypeForLanguage(aLanguageGroup) {
     const kDefaultFontType = "font.default.%LANG%";
     var defaultFontTypePref = kDefaultFontType.replace(/%LANG%/, aLanguageGroup);
-    var preference = gMainPreferences.get(defaultFontTypePref);
+    var preference = Preferences.get(defaultFontTypePref);
     if (!preference) {
-      preference = gMainPreferences.add({
+      preference = Preferences.add({
         id: defaultFontTypePref,
         name: defaultFontTypePref,
         type: "string",
@@ -850,10 +849,10 @@ var gMainPane = {
                    element: "defaultFontSize",
                    fonttype: null }];
     for (var i = 0; i < prefs.length; ++i) {
-      var preference = gMainPreferences.get(prefs[i].format.replace(/%LANG%/, aLanguageGroup));
+      var preference = Preferences.get(prefs[i].format.replace(/%LANG%/, aLanguageGroup));
       if (!preference) {
         var name = prefs[i].format.replace(/%LANG%/, aLanguageGroup);
-        preference = gMainPreferences.add({
+        preference = Preferences.add({
           id: name,
           name: name,
           type: prefs[i].type,
@@ -917,14 +916,14 @@ var gMainPane = {
 
   updateSuggestsCheckbox() {
     let suggestsPref =
-      gMainPreferences.get("browser.search.suggest.enabled");
+      Preferences.get("browser.search.suggest.enabled");
     let permanentPB =
       Services.prefs.getBoolPref("browser.privatebrowsing.autostart");
     let urlbarSuggests = document.getElementById("urlBarSuggestion");
     urlbarSuggests.disabled = !suggestsPref.value || permanentPB;
 
     let urlbarSuggestsPref =
-      gMainPreferences.get("browser.urlbar.suggest.searches");
+      Preferences.get("browser.urlbar.suggest.searches");
     urlbarSuggests.checked = urlbarSuggestsPref.value;
     if (urlbarSuggests.disabled) {
       urlbarSuggests.checked = false;
@@ -937,9 +936,9 @@ var gMainPane = {
 
   updateDefaultPerformanceSettingsPref() {
     let defaultPerformancePref =
-      gMainPreferences.get("browser.preferences.defaultPerformanceSettings.enabled");
-    let processCountPref = gMainPreferences.get("dom.ipc.processCount");
-    let accelerationPref = gMainPreferences.get("layers.acceleration.disabled");
+      Preferences.get("browser.preferences.defaultPerformanceSettings.enabled");
+    let processCountPref = Preferences.get("dom.ipc.processCount");
+    let accelerationPref = Preferences.get("layers.acceleration.disabled");
     if (processCountPref.value != processCountPref.defaultValue ||
         accelerationPref.value != accelerationPref.defaultValue) {
       defaultPerformancePref.value = false;
@@ -948,11 +947,11 @@ var gMainPane = {
 
   updatePerformanceSettingsBox() {
     let defaultPerformancePref =
-      gMainPreferences.get("browser.preferences.defaultPerformanceSettings.enabled");
+      Preferences.get("browser.preferences.defaultPerformanceSettings.enabled");
     let performanceSettings = document.getElementById("performanceSettings");
     if (defaultPerformancePref.value) {
-      let processCountPref = gMainPreferences.get("dom.ipc.processCount");
-      let accelerationPref = gMainPreferences.get("layers.acceleration.disabled");
+      let processCountPref = Preferences.get("dom.ipc.processCount");
+      let accelerationPref = Preferences.get("layers.acceleration.disabled");
       processCountPref.value = processCountPref.defaultValue;
       accelerationPref.value = accelerationPref.defaultValue;
       performanceSettings.hidden = true;
@@ -963,7 +962,7 @@ var gMainPane = {
 
   buildContentProcessCountMenuList() {
     if (gMainPane.isE10SEnabled()) {
-      let processCountPref = gMainPreferences.get("dom.ipc.processCount");
+      let processCountPref = Preferences.get("dom.ipc.processCount");
       let bundlePreferences = document.getElementById("bundlePreferences");
       let label = bundlePreferences.getFormattedString("defaultContentProcessCount",
         [processCountPref.defaultValue]);
@@ -1210,7 +1209,7 @@ var gMainPane = {
       if (!engine.shown)
         hiddenList.push(engine.name);
     }
-    gMainPreferences.get("browser.search.hiddenOneOffs").value =
+    Preferences.get("browser.search.hiddenOneOffs").value =
       hiddenList.join(",");
   },
 
@@ -1233,7 +1232,7 @@ function onDragEngineStart(event) {
 
 
 function EngineStore() {
-  let pref = gMainPreferences.get("browser.search.hiddenOneOffs").value;
+  let pref = Preferences.get("browser.search.hiddenOneOffs").value;
   this.hiddenList = pref ? pref.split(",") : [];
 
   this._engines = Services.search.getVisibleEngines().map(this._cloneEngine, this);
diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 20610ce2a12a..3f40da0f3972 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -377,6 +377,20 @@ Preferences.get = function(id) {
   return null;
 };
 
+Preferences.add = function({ id, name, type }) {
+  let pref = new Preference({ preferences: this, id, name, type });
+  Preferences.all.push(pref);
+  return pref;
+};
+
+Preferences.addAll = function(prefInfos) {
+  // XXX Pass the preferences (i.e. this) object to the Preference constructor
+  // as a separate parameter rather than as part of the prefInfo object.
+  const prefs = prefInfos.map(v => new Preference(Object.assign(v, { preferences: this })));
+  this.all = this.all.concat(prefs);
+  this._constructAfterChildren();
+};
+
 Preferences.prototype = Object.create(EventEmitter.prototype);
 
 Object.assign(Preferences.prototype, {
@@ -442,6 +456,17 @@ Object.assign(Preferences.prototype, {
                       .getService(Components.interfaces.nsIPrefBranchInternal),
 });
 
+Preferences.rootBranch = Components.classes["@mozilla.org/preferences-service;1"]
+                         .getService(Components.interfaces.nsIPrefBranch);
+
+Preferences.rootBranchInternal = Components.classes["@mozilla.org/preferences-service;1"]
+                                 .getService(Components.interfaces.nsIPrefBranchInternal);
+Preferences._constructAfterChildren = function() {
+  for (let preference of this.all) {
+    preference.updateElements();
+  }
+};
+
 // Assign getters via Object.defineProperties, since Object.assign invokes them
 // and assigns their return values rather than assigning the getters themselves.
 Object.defineProperties(Preferences.prototype, {
diff --git a/browser/components/preferences/in-content-new/tests/browser_basic_rebuild_fonts_test.js b/browser/components/preferences/in-content-new/tests/browser_basic_rebuild_fonts_test.js
index 760595abeca9..b413881ea835 100644
--- a/browser/components/preferences/in-content-new/tests/browser_basic_rebuild_fonts_test.js
+++ b/browser/components/preferences/in-content-new/tests/browser_basic_rebuild_fonts_test.js
@@ -9,7 +9,7 @@ add_task(async function() {
   let doc = gBrowser.contentDocument;
   let contentWindow = gBrowser.contentWindow;
   var langGroup = Services.prefs.getComplexValue("font.language.group", Ci.nsIPrefLocalizedString).data
-  is(contentWindow.gMainPreferences.get("font.language.group").value, langGroup,
+  is(contentWindow.Preferences.get("font.language.group").value, langGroup,
      "Language group should be set correctly.");
 
   let defaultFontType = Services.prefs.getCharPref("font.default." + langGroup);

From c41c5e0bdaaa24fe38035b5f4ef04038e05572cb Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 7 Jul 2017 13:06:39 -0700
Subject: [PATCH 043/106] replace references to gPrivacyPreferences with
 references to Preferences

---
 .../preferences/in-content-new/preferences.js      |  4 ++
 .../preferences/in-content-new/privacy.js          | 62 +++++++++++-----------
 .../tests/browser_sanitizeOnShutdown_prefLocked.js |  2 +-
 .../tests/privacypane_tests_perwindow.js           |  4 +-
 4 files changed, 38 insertions(+), 34 deletions(-)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 3f40da0f3972..4a8b0d6a03a8 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -377,6 +377,10 @@ Preferences.get = function(id) {
   return null;
 };
 
+Preferences.getAll = function() {
+  return this.all.slice();
+};
+
 Preferences.add = function({ id, name, type }) {
   let pref = new Preference({ preferences: this, id, name, type });
   Preferences.all.push(pref);
diff --git a/browser/components/preferences/in-content-new/privacy.js b/browser/components/preferences/in-content-new/privacy.js
index 350c9aad6a2c..345fea153ccd 100644
--- a/browser/components/preferences/in-content-new/privacy.js
+++ b/browser/components/preferences/in-content-new/privacy.js
@@ -34,7 +34,7 @@ XPCOMUtils.defineLazyGetter(this, "AlertsServiceDND", function() {
 });
 
 window.addEventListener("DOMContentLoaded", function() {
-  window.gPrivacyPreferences = new Preferences([
+  new Preferences([
     { id: "privacy.userContext.enabled", name: "privacy.userContext.enabled", type: "bool" },
 
     // Tracking
@@ -259,9 +259,9 @@ var gPrivacyPane = {
     this._initAutocomplete();
     this._initBrowserContainers();
 
-    gPrivacyPreferences.get("privacy.sanitize.sanitizeOnShutdown").on("change",
+    Preferences.get("privacy.sanitize.sanitizeOnShutdown").on("change",
                      gPrivacyPane._updateSanitizeSettingsButton);
-    gPrivacyPreferences.get("browser.privatebrowsing.autostart").on("change",
+    Preferences.get("browser.privatebrowsing.autostart").on("change",
                      gPrivacyPane.updatePrivacyMicroControls);
     setEventListener("historyMode", "command", function() {
       gPrivacyPane.updateHistoryModePane();
@@ -463,8 +463,8 @@ var gPrivacyPane = {
    * Selects the right item of the Tracking Protection radiogroup.
    */
   trackingProtectionReadPrefs() {
-    let enabledPref = gPrivacyPreferences.get("privacy.trackingprotection.enabled");
-    let pbmPref = gPrivacyPreferences.get("privacy.trackingprotection.pbmode.enabled");
+    let enabledPref = Preferences.get("privacy.trackingprotection.enabled");
+    let pbmPref = Preferences.get("privacy.trackingprotection.pbmode.enabled");
     let radiogroup = document.getElementById("trackingProtectionRadioGroup");
 
     // Global enable takes precedence over enabled in Private Browsing.
@@ -481,8 +481,8 @@ var gPrivacyPane = {
    * Sets the pref values based on the selected item of the radiogroup.
    */
   trackingProtectionWritePrefs() {
-    let enabledPref = gPrivacyPreferences.get("privacy.trackingprotection.enabled");
-    let pbmPref = gPrivacyPreferences.get("privacy.trackingprotection.pbmode.enabled");
+    let enabledPref = Preferences.get("privacy.trackingprotection.enabled");
+    let pbmPref = Preferences.get("privacy.trackingprotection.pbmode.enabled");
     let radiogroup = document.getElementById("trackingProtectionRadioGroup");
 
     switch (radiogroup.value) {
@@ -548,7 +548,7 @@ var gPrivacyPane = {
    */
   _checkHistoryValues(aPrefs) {
     for (let pref of Object.keys(aPrefs)) {
-      if (gPrivacyPreferences.get(pref).value != aPrefs[pref])
+      if (Preferences.get(pref).value != aPrefs[pref])
         return false;
     }
     return true;
@@ -559,7 +559,7 @@ var gPrivacyPane = {
    */
   initializeHistoryMode() {
     let mode;
-    let getVal = aPref => gPrivacyPreferences.get(aPref).value;
+    let getVal = aPref => Preferences.get(aPref).value;
 
     if (getVal("privacy.history.custom"))
       mode = "custom";
@@ -591,7 +591,7 @@ var gPrivacyPane = {
       break;
     }
     document.getElementById("historyPane").selectedIndex = selectedIndex;
-    gPrivacyPreferences.get("privacy.history.custom").value = selectedIndex == 2;
+    Preferences.get("privacy.history.custom").value = selectedIndex == 2;
   },
 
   /**
@@ -599,25 +599,25 @@ var gPrivacyPane = {
    * micro-management prefs based on the history mode menulist
    */
   updateHistoryModePrefs() {
-    let pref = gPrivacyPreferences.get("browser.privatebrowsing.autostart");
+    let pref = Preferences.get("browser.privatebrowsing.autostart");
     switch (document.getElementById("historyMode").value) {
     case "remember":
       if (pref.value)
         pref.value = false;
 
       // select the remember history option if needed
-      gPrivacyPreferences.get("places.history.enabled").value = true;
+      Preferences.get("places.history.enabled").value = true;
 
       // select the remember forms history option
-      gPrivacyPreferences.get("browser.formfill.enable").value = true;
+      Preferences.get("browser.formfill.enable").value = true;
 
       // select the allow cookies option
-      gPrivacyPreferences.get("network.cookie.cookieBehavior").value = 0;
+      Preferences.get("network.cookie.cookieBehavior").value = 0;
       // select the cookie lifetime policy option
-      gPrivacyPreferences.get("network.cookie.lifetimePolicy").value = 0;
+      Preferences.get("network.cookie.lifetimePolicy").value = 0;
 
       // select the clear on close option
-      gPrivacyPreferences.get("privacy.sanitize.sanitizeOnShutdown").value = false;
+      Preferences.get("privacy.sanitize.sanitizeOnShutdown").value = false;
       break;
     case "dontremember":
       if (!pref.value)
@@ -645,13 +645,13 @@ var gPrivacyPane = {
           }
         }
 
-        let preference = preferenceId ? gPrivacyPreferences.get(preferenceId) : {};
+        let preference = preferenceId ? Preferences.get(preferenceId) : {};
         control.disabled = disabled || preference.locked;
       });
 
       // adjust the cookie controls status
       this.readAcceptCookies();
-      let lifetimePolicy = gPrivacyPreferences.get("network.cookie.lifetimePolicy").value;
+      let lifetimePolicy = Preferences.get("network.cookie.lifetimePolicy").value;
       if (lifetimePolicy != Ci.nsICookieService.ACCEPT_NORMALLY &&
           lifetimePolicy != Ci.nsICookieService.ACCEPT_SESSION &&
           lifetimePolicy != Ci.nsICookieService.ACCEPT_FOR_N_DAYS) {
@@ -661,13 +661,13 @@ var gPrivacyPane = {
 
       // adjust the checked state of the sanitizeOnShutdown checkbox
       document.getElementById("alwaysClear").checked = disabled ? false :
-        gPrivacyPreferences.get("privacy.sanitize.sanitizeOnShutdown").value;
+        Preferences.get("privacy.sanitize.sanitizeOnShutdown").value;
 
       // adjust the checked state of the remember history checkboxes
       document.getElementById("rememberHistory").checked = disabled ? false :
-        gPrivacyPreferences.get("places.history.enabled").value;
+        Preferences.get("places.history.enabled").value;
       document.getElementById("rememberForms").checked = disabled ? false :
-        gPrivacyPreferences.get("browser.formfill.enable").value;
+        Preferences.get("browser.formfill.enable").value;
 
       if (!disabled) {
         // adjust the Settings button for sanitizeOnShutdown
@@ -693,7 +693,7 @@ var gPrivacyPane = {
   updateAutostart() {
       let mode = document.getElementById("historyMode");
       let autoStart = document.getElementById("privateBrowsingAutoStart");
-      let pref = gPrivacyPreferences.get("browser.privatebrowsing.autostart");
+      let pref = Preferences.get("browser.privatebrowsing.autostart");
       if ((mode.value == "custom" && this._lastCheckState == autoStart.checked) ||
           (mode.value == "remember" && !this._lastCheckState) ||
           (mode.value == "dontremember" && this._lastCheckState)) {
@@ -944,7 +944,7 @@ var gPrivacyPane = {
    */
   _updateSanitizeSettingsButton() {
     var settingsButton = document.getElementById("clearDataSettings");
-    var sanitizeOnShutdownPref = gPrivacyPreferences.get("privacy.sanitize.sanitizeOnShutdown");
+    var sanitizeOnShutdownPref = Preferences.get("privacy.sanitize.sanitizeOnShutdown");
 
     settingsButton.disabled = !sanitizeOnShutdownPref.value;
    },
@@ -1171,14 +1171,14 @@ var gPrivacyPane = {
     let blockDownloads = document.getElementById("blockDownloads");
     let blockUncommonUnwanted = document.getElementById("blockUncommonUnwanted");
 
-    let safeBrowsingPhishingPref = gPrivacyPreferences.get("browser.safebrowsing.phishing.enabled");
-    let safeBrowsingMalwarePref = gPrivacyPreferences.get("browser.safebrowsing.malware.enabled");
+    let safeBrowsingPhishingPref = Preferences.get("browser.safebrowsing.phishing.enabled");
+    let safeBrowsingMalwarePref = Preferences.get("browser.safebrowsing.malware.enabled");
 
-    let blockDownloadsPref = gPrivacyPreferences.get("browser.safebrowsing.downloads.enabled");
-    let malwareTable = gPrivacyPreferences.get("urlclassifier.malwareTable");
+    let blockDownloadsPref = Preferences.get("browser.safebrowsing.downloads.enabled");
+    let malwareTable = Preferences.get("urlclassifier.malwareTable");
 
-    let blockUnwantedPref = gPrivacyPreferences.get("browser.safebrowsing.downloads.remote.block_potentially_unwanted");
-    let blockUncommonPref = gPrivacyPreferences.get("browser.safebrowsing.downloads.remote.block_uncommon");
+    let blockUnwantedPref = Preferences.get("browser.safebrowsing.downloads.remote.block_potentially_unwanted");
+    let blockUncommonPref = Preferences.get("browser.safebrowsing.downloads.remote.block_uncommon");
 
     enableSafeBrowsing.addEventListener("command", function() {
       safeBrowsingPhishingPref.value = enableSafeBrowsing.checked;
@@ -1448,7 +1448,7 @@ var gPrivacyPane = {
    */
   updateCacheSizeInputField() {
     let cacheSizeElem = document.getElementById("cacheSize");
-    let cachePref = gPrivacyPreferences.get("browser.cache.disk.capacity");
+    let cachePref = Preferences.get("browser.cache.disk.capacity");
     cacheSizeElem.value = cachePref.value / 1024;
     if (cachePref.locked)
       cacheSizeElem.disabled = true;
@@ -1462,7 +1462,7 @@ var gPrivacyPane = {
    */
   updateCacheSizePref() {
     let cacheSizeElem = document.getElementById("cacheSize");
-    let cachePref = gPrivacyPreferences.get("browser.cache.disk.capacity");
+    let cachePref = Preferences.get("browser.cache.disk.capacity");
     // Converts the cache size as specified in UI (in MB) to KB.
     let intValue = parseInt(cacheSizeElem.value, 10);
     cachePref.value = isNaN(intValue) ? 0 : intValue * 1024;
diff --git a/browser/components/preferences/in-content-new/tests/browser_sanitizeOnShutdown_prefLocked.js b/browser/components/preferences/in-content-new/tests/browser_sanitizeOnShutdown_prefLocked.js
index 16a2b2c22306..144055833fcb 100644
--- a/browser/components/preferences/in-content-new/tests/browser_sanitizeOnShutdown_prefLocked.js
+++ b/browser/components/preferences/in-content-new/tests/browser_sanitizeOnShutdown_prefLocked.js
@@ -13,7 +13,7 @@ function testPrefStateMatchesLockedState() {
   switchToCustomHistoryMode(doc);
 
   let checkbox = doc.getElementById("alwaysClear");
-  let preference = win.gPrivacyPreferences.get("privacy.sanitize.sanitizeOnShutdown");
+  let preference = win.Preferences.get("privacy.sanitize.sanitizeOnShutdown");
   is(checkbox.disabled, preference.locked, "Always Clear checkbox should be enabled when preference is not locked.");
 
   Services.prefs.clearUserPref("privacy.history.custom");
diff --git a/browser/components/preferences/in-content-new/tests/privacypane_tests_perwindow.js b/browser/components/preferences/in-content-new/tests/privacypane_tests_perwindow.js
index f46bec70df3d..203ca1d50eb1 100644
--- a/browser/components/preferences/in-content-new/tests/privacypane_tests_perwindow.js
+++ b/browser/components/preferences/in-content-new/tests/privacypane_tests_perwindow.js
@@ -311,13 +311,13 @@ function test_locbar_suggestion_retention(suggestion, autocomplete) {
 const gPrefCache = new Map();
 
 function cache_preferences(win) {
-  let prefs = win.gPrivacyPreferences.getAll();
+  let prefs = win.Preferences.getAll();
   for (let pref of prefs)
     gPrefCache.set(pref.name, pref.value);
 }
 
 function reset_preferences(win) {
-  let prefs = win.gPrivacyPreferences.getAll();
+  let prefs = win.Preferences.getAll();
   for (let pref of prefs)
     pref.value = gPrefCache.get(pref.name);
 }

From c41cfd676f0e27c799735a6892aa2900c8a4bf6e Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 7 Jul 2017 13:11:44 -0700
Subject: [PATCH 044/106] replace references to g*Preferences with references
 to Preferences

---
 .../preferences/in-content-new/advanced.js         | 10 +++----
 .../preferences/in-content-new/applications.js     | 32 +++++++++++-----------
 .../components/preferences/in-content-new/sync.js  |  2 +-
 3 files changed, 22 insertions(+), 22 deletions(-)

diff --git a/browser/components/preferences/in-content-new/advanced.js b/browser/components/preferences/in-content-new/advanced.js
index 58894b0a67c9..e03af4526391 100644
--- a/browser/components/preferences/in-content-new/advanced.js
+++ b/browser/components/preferences/in-content-new/advanced.js
@@ -11,7 +11,7 @@ Components.utils.import("resource://gre/modules/LoadContextInfo.jsm");
 Components.utils.import("resource://gre/modules/XPCOMUtils.jsm");
 
 window.addEventListener("DOMContentLoaded", function() {
-  window.gAdvancedPreferences = new Preferences([
+  new Preferences([
     { id: "browser.preferences.advanced.selectedTabIndex", name: "browser.preferences.advanced.selectedTabIndex", type: "int" },
 
     // Update tab
@@ -139,8 +139,8 @@ var gAdvancedPane = {
    */
   updateReadPrefs() {
     if (AppConstants.MOZ_UPDATER) {
-      var enabledPref = gAdvancedPreferences.get("app.update.enabled");
-      var autoPref = gAdvancedPreferences.get("app.update.auto");
+      var enabledPref = Preferences.get("app.update.enabled");
+      var autoPref = Preferences.get("app.update.auto");
       var radiogroup = document.getElementById("updateRadioGroup");
 
       if (!enabledPref.value)   // Don't care for autoPref.value in this case.
@@ -184,8 +184,8 @@ var gAdvancedPane = {
    */
   updateWritePrefs() {
     if (AppConstants.MOZ_UPDATER) {
-      var enabledPref = gAdvancedPreferences.get("app.update.enabled");
-      var autoPref = gAdvancedPreferences.get("app.update.auto");
+      var enabledPref = Preferences.get("app.update.enabled");
+      var autoPref = Preferences.get("app.update.auto");
       var radiogroup = document.getElementById("updateRadioGroup");
       switch (radiogroup.value) {
         case "auto":      // 1. Automatically install updates for Desktop only
diff --git a/browser/components/preferences/in-content-new/applications.js b/browser/components/preferences/in-content-new/applications.js
index 87b83432b405..6f4e0c2c15d7 100644
--- a/browser/components/preferences/in-content-new/applications.js
+++ b/browser/components/preferences/in-content-new/applications.js
@@ -81,7 +81,7 @@ const APP_ICON_ATTR_NAME = "appHandlerIcon";
 // Preferences object
 
 window.addEventListener("DOMContentLoaded", function() {
-  window.gAppPreferences = new Preferences([
+  new Preferences([
     { id: "browser.feeds.handler", name: "browser.feeds.handler", type: "string" },
     { id: "browser.feeds.handler.default", name: "browser.feeds.handler.default", type: "string" },
     { id: "browser.feeds.handlers.application", name: "browser.feeds.handlers.application", type: "file" },
@@ -502,16 +502,16 @@ FeedHandlerInfo.prototype = {
   },
 
   get preferredApplicationHandler() {
-    switch (gAppPreferences.get(this._prefSelectedReader).value) {
+    switch (Preferences.get(this._prefSelectedReader).value) {
       case "client":
-        var file = gAppPreferences.get(this._prefSelectedApp).value;
+        var file = Preferences.get(this._prefSelectedApp).value;
         if (file)
           return getLocalHandlerApp(file);
 
         return null;
 
       case "web":
-        var uri = gAppPreferences.get(this._prefSelectedWeb).value;
+        var uri = Preferences.get(this._prefSelectedWeb).value;
         if (!uri)
           return null;
         return this._converterSvc.getWebContentHandlerByURI(this.type, uri);
@@ -527,11 +527,11 @@ FeedHandlerInfo.prototype = {
 
   set preferredApplicationHandler(aNewValue) {
     if (aNewValue instanceof Ci.nsILocalHandlerApp) {
-      gAppPreferences.get(this._prefSelectedApp).value = aNewValue.executable;
-      gAppPreferences.get(this._prefSelectedReader).value = "client";
+      Preferences.get(this._prefSelectedApp).value = aNewValue.executable;
+      Preferences.get(this._prefSelectedReader).value = "client";
     } else if (aNewValue instanceof Ci.nsIWebContentHandlerInfo) {
-      gAppPreferences.get(this._prefSelectedWeb).value = aNewValue.uri;
-      gAppPreferences.get(this._prefSelectedReader).value = "web";
+      Preferences.get(this._prefSelectedWeb).value = aNewValue.uri;
+      Preferences.get(this._prefSelectedReader).value = "web";
       // Make the web handler be the new "auto handler" for feeds.
       // Note: we don't have to unregister the auto handler when the user picks
       // a non-web handler (local app, Live Bookmarks, etc.) because the service
@@ -591,7 +591,7 @@ FeedHandlerInfo.prototype = {
     // only a single path.  But we display all the local apps the user chooses
     // while the prefpane is open, only dropping the list when the user closes
     // the prefpane, for maximum usability and consistency with other types.
-    var preferredAppFile = gAppPreferences.get(this._prefSelectedApp).value;
+    var preferredAppFile = Preferences.get(this._prefSelectedApp).value;
     if (preferredAppFile) {
       let preferredApp = getLocalHandlerApp(preferredAppFile);
       let defaultApp = this._defaultApplicationHandler;
@@ -659,7 +659,7 @@ FeedHandlerInfo.prototype = {
 
   // What to do with content of this type.
   get preferredAction() {
-    switch (gAppPreferences.get(this._prefSelectedAction).value) {
+    switch (Preferences.get(this._prefSelectedAction).value) {
 
       case "bookmarks":
         return Ci.nsIHandlerInfo.handleInternally;
@@ -697,31 +697,31 @@ FeedHandlerInfo.prototype = {
     switch (aNewValue) {
 
       case Ci.nsIHandlerInfo.handleInternally:
-        gAppPreferences.get(this._prefSelectedReader).value = "bookmarks";
+        Preferences.get(this._prefSelectedReader).value = "bookmarks";
         break;
 
       case Ci.nsIHandlerInfo.useHelperApp:
-        gAppPreferences.get(this._prefSelectedAction).value = "reader";
+        Preferences.get(this._prefSelectedAction).value = "reader";
         // The controller has already set preferredApplicationHandler
         // to the new helper app.
         break;
 
       case Ci.nsIHandlerInfo.useSystemDefault:
-        gAppPreferences.get(this._prefSelectedAction).value = "reader";
+        Preferences.get(this._prefSelectedAction).value = "reader";
         this.preferredApplicationHandler = this._defaultApplicationHandler;
         break;
     }
   },
 
   get alwaysAskBeforeHandling() {
-    return gAppPreferences.get(this._prefSelectedAction).value == "ask";
+    return Preferences.get(this._prefSelectedAction).value == "ask";
   },
 
   set alwaysAskBeforeHandling(aNewValue) {
     if (aNewValue == true)
-      gAppPreferences.get(this._prefSelectedAction).value = "ask";
+      Preferences.get(this._prefSelectedAction).value = "ask";
     else
-      gAppPreferences.get(this._prefSelectedAction).value = "reader";
+      Preferences.get(this._prefSelectedAction).value = "reader";
   },
 
   // Whether or not we are currently storing the action selected by the user.
diff --git a/browser/components/preferences/in-content-new/sync.js b/browser/components/preferences/in-content-new/sync.js
index 9ff14fe66374..d79d11bf5da4 100644
--- a/browser/components/preferences/in-content-new/sync.js
+++ b/browser/components/preferences/in-content-new/sync.js
@@ -26,7 +26,7 @@ const FXA_LOGIN_UNVERIFIED = 1;
 const FXA_LOGIN_FAILED = 2;
 
 window.addEventListener("DOMContentLoaded", function() {
-  window.gSyncEnginePrefs = new Preferences([
+  new Preferences([
     { id: "engine.addons", name: "services.sync.engine.addons", type: "bool" },
     { id: "engine.bookmarks", name: "services.sync.engine.bookmarks", type: "bool" },
     { id: "engine.history", name: "services.sync.engine.history", type: "bool" },

From 6b586ae0acd346c9ed494fcad044afdf9082dad9 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 7 Jul 2017 13:26:53 -0700
Subject: [PATCH 045/106] break some dependencies on Preferences instance

---
 .../preferences/in-content-new/preferences.js      | 42 ++++++++++++++--------
 1 file changed, 28 insertions(+), 14 deletions(-)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 4a8b0d6a03a8..224ab96d2a48 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -465,12 +465,26 @@ Preferences.rootBranch = Components.classes["@mozilla.org/preferences-service;1"
 
 Preferences.rootBranchInternal = Components.classes["@mozilla.org/preferences-service;1"]
                                  .getService(Components.interfaces.nsIPrefBranchInternal);
+
+Preferences.service = Components.classes["@mozilla.org/preferences-service;1"]
+                      .getService(Components.interfaces.nsIPrefService);
+
+Preferences.defaultBranch = Preferences.service.getDefaultBranch("");
+
 Preferences._constructAfterChildren = function() {
   for (let preference of this.all) {
     preference.updateElements();
   }
 };
 
+Object.defineProperties(Preferences, {
+  type: {
+    get: function() {
+      return document.documentElement.type || "";
+    },
+  },
+});
+
 // Assign getters via Object.defineProperties, since Object.assign invokes them
 // and assigns their return values rather than assigning the getters themselves.
 Object.defineProperties(Preferences.prototype, {
@@ -516,7 +530,7 @@ function Preference({ preferences, id, name, type, inverted }) {
 
   // XXX Add this observer once instead of every time we instantiate
   // a Preference object.
-  this.preferences.rootBranchInternal
+  Preferences.rootBranchInternal
       .addObserver(this.name, this.preferences);
   // In non-instant apply mode, we must try and use the last saved state
   // from any previous opens of a child dialog instead of the value from
@@ -524,7 +538,7 @@ function Preference({ preferences, id, name, type, inverted }) {
 
   var secMan = Components.classes["@mozilla.org/scriptsecuritymanager;1"]
               .getService(Components.interfaces.nsIScriptSecurityManager);
-  if (this.preferences.type == "child" &&
+  if (Preferences.type == "child" &&
       !this.instantApply && window.opener &&
       secMan.isSystemPrincipal(window.opener.document.nodePrincipal)) {
     var pdoc = window.opener.document;
@@ -550,7 +564,7 @@ function Preference({ preferences, id, name, type, inverted }) {
 
 // XXX Figure out when to call this (document unload?) and do so.
 Preference.destructor = function () {
-  this.preferences.rootBranchInternal
+  Preferences.rootBranchInternal
       .removeObserver(this.name, this.preferences);
 };
 
@@ -743,10 +757,10 @@ Object.defineProperties(Preference.prototype, {
       if (val == this.name)
         return val;
 
-      this.preferences.rootBranchInternal
+      Preferences.rootBranchInternal
           .removeObserver(this.name, this.preferences);
       this._name = val;
-      this.preferences.rootBranchInternal
+      Preferences.rootBranchInternal
           .addObserver(val, this.preferences);
 
       return val;
@@ -770,7 +784,7 @@ Object.defineProperties(Preference.prototype, {
 
   locked: {
     get: function () {
-      return this.preferences.rootBranch.prefIsLocked(this.name);
+      return Preferences.rootBranch.prefIsLocked(this.name);
     },
   },
 
@@ -808,7 +822,7 @@ Object.defineProperties(Preference.prototype, {
 
   _branch: {
     get: function () {
-      return this._useDefault ? this.preferences.defaultBranch : this.preferences.rootBranch;
+      return this._useDefault ? Preferences.defaultBranch : Preferences.rootBranch;
     },
   },
 
@@ -852,29 +866,29 @@ Object.defineProperties(Preference.prototype, {
 
       // The special value undefined means 'reset preference to default'.
       if (val === undefined) {
-        this.preferences.rootBranch.clearUserPref(this.name);
+        Preferences.rootBranch.clearUserPref(this.name);
         return val;
       }
 
       // Force a resync of preferences with value.
       switch (this.type) {
       case "int":
-        this.preferences.rootBranch.setIntPref(this.name, val);
+        Preferences.rootBranch.setIntPref(this.name, val);
         break;
       case "bool":
-        this.preferences.rootBranch.setBoolPref(this.name, this.inverted ? !val : val);
+        Preferences.rootBranch.setBoolPref(this.name, this.inverted ? !val : val);
         break;
       case "wstring":
         var pls = Components.classes["@mozilla.org/pref-localizedstring;1"]
                             .createInstance(Components.interfaces.nsIPrefLocalizedString);
         pls.data = val;
-        this.preferences.rootBranch
+        Preferences.rootBranch
             .setComplexValue(this.name, Components.interfaces.nsIPrefLocalizedString, pls);
         break;
       case "string":
       case "unichar":
       case "fontname":
-        this.preferences.rootBranch.setStringPref(this.name, val);
+        Preferences.rootBranch.setStringPref(this.name, val);
         break;
       case "file":
         var lf;
@@ -886,14 +900,14 @@ Object.defineProperties(Preference.prototype, {
             lf.initWithPath(val);
         } else
           lf = val.QueryInterface(Components.interfaces.nsILocalFile);
-        this.preferences.rootBranch
+        Preferences.rootBranch
             .setComplexValue(this.name, Components.interfaces.nsILocalFile, lf);
         break;
       default:
         this._reportUnknownType();
       }
       if (!this.batching)
-        this.preferences.service.savePrefFile(null);
+        Preferences.service.savePrefFile(null);
       return val;
     },
   },

From 6600aca045ca189ec5acc5ae99505e490b719492 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 7 Jul 2017 13:31:19 -0700
Subject: [PATCH 046/106] only update elements for the specific new preference

---
 browser/components/preferences/in-content-new/preferences.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 224ab96d2a48..4e1a2a544424 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -559,7 +559,7 @@ function Preference({ preferences, id, name, type, inverted }) {
     this._value = preference ? preference.value : this.valueFromPreferences;
   } else
     this._value = this.valueFromPreferences;
-  this.preferences._constructAfterChildren();
+  this.updateElements();
 }
 
 // XXX Figure out when to call this (document unload?) and do so.

From de6fef23990f8c23387217d741af93c081e6297f Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 7 Jul 2017 13:54:21 -0700
Subject: [PATCH 047/106] make Preference objects observe their own changes

---
 .../preferences/in-content-new/preferences.js         | 19 +++++++++----------
 1 file changed, 9 insertions(+), 10 deletions(-)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 4e1a2a544424..38a9b54170de 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -528,10 +528,7 @@ function Preference({ preferences, id, name, type, inverted }) {
   if (!this.name)
     return;
 
-  // XXX Add this observer once instead of every time we instantiate
-  // a Preference object.
-  Preferences.rootBranchInternal
-      .addObserver(this.name, this.preferences);
+  Preferences.rootBranchInternal.addObserver(this.name, this);
   // In non-instant apply mode, we must try and use the last saved state
   // from any previous opens of a child dialog instead of the value from
   // preferences, to pick up any edits a user may have made.
@@ -564,8 +561,7 @@ function Preference({ preferences, id, name, type, inverted }) {
 
 // XXX Figure out when to call this (document unload?) and do so.
 Preference.destructor = function () {
-  Preferences.rootBranchInternal
-      .removeObserver(this.name, this.preferences);
+  Preferences.rootBranchInternal.removeObserver(this.name, this);
 };
 
 Preference.prototype = Object.create(EventEmitter.prototype);
@@ -728,6 +724,11 @@ Object.assign(Preference.prototype, {
   onchange() {
     this.updateElements();
   },
+
+  observe(aSubject, aTopic, aData) {
+    this.value = this.valueFromPreferences;
+  },
+
 });
 
 // Assign getters via Object.defineProperties, since Object.assign invokes them
@@ -757,11 +758,9 @@ Object.defineProperties(Preference.prototype, {
       if (val == this.name)
         return val;
 
-      Preferences.rootBranchInternal
-          .removeObserver(this.name, this.preferences);
+      Preferences.rootBranchInternal.removeObserver(this.name, this);
       this._name = val;
-      Preferences.rootBranchInternal
-          .addObserver(val, this.preferences);
+      Preferences.rootBranchInternal.addObserver(val, this);
 
       return val;
     },

From 6879c4ee312a1242b1d49c6eeb54c63451d7181d Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 7 Jul 2017 15:12:28 -0700
Subject: [PATCH 048/106] make Preference objects emit their own change events

---
 browser/components/preferences/in-content-new/preferences.js | 8 +-------
 1 file changed, 1 insertion(+), 7 deletions(-)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 38a9b54170de..8648f674d441 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -444,12 +444,6 @@ Object.assign(Preferences.prototype, {
     }
   },
 
-  // XXX Make the Preference object emit the event itself.
-  fireChangedEvent(aPreference) {
-    // Value changed, synthesize an event
-    aPreference.emit("change");
-  },
-
   service: Components.classes["@mozilla.org/preferences-service;1"]
                      .getService(Components.interfaces.nsIPrefService),
 
@@ -775,7 +769,7 @@ Object.defineProperties(Preference.prototype, {
         this._value = val;
         if (this.instantApply)
           this.valueFromPreferences = val;
-        this.preferences.fireChangedEvent(this);
+        this.emit("change");
       }
       return val;
     },

From cc68abfa184b70c087761750f2429ee9e483152a Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 7 Jul 2017 15:23:43 -0700
Subject: [PATCH 049/106] break dependency of Preference instance on
 Preferences instance

---
 .../preferences/in-content-new/preferences.js       | 21 ++++++++++-----------
 1 file changed, 10 insertions(+), 11 deletions(-)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 8648f674d441..09ab573ec515 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -477,6 +477,14 @@ Object.defineProperties(Preferences, {
       return document.documentElement.type || "";
     },
   },
+
+  instantApply: {
+    get: function () {
+      var doc = document.documentElement;
+      return this.type == "child" ? doc.instantApply
+                                  : doc.instantApply || this.rootBranch.getBoolPref("browser.preferences.instantApply");
+    },
+  },
 });
 
 // Assign getters via Object.defineProperties, since Object.assign invokes them
@@ -503,13 +511,10 @@ Object.defineProperties(Preferences.prototype, {
   },
 });
 
-function Preference({ preferences, id, name, type, inverted }) {
+function Preference({ id, name, type, inverted }) {
   EventEmitter.call(this);
   this.on("change", this.onchange.bind(this));
 
-  // XXX Break dependency of Preference on Preferences and remove this property.
-  this._preferences = preferences;
-
   this._name = name;
 
   this.type = type;
@@ -734,13 +739,7 @@ Object.defineProperties(Preference.prototype, {
   // preferences.instantApply instead and remove this getter.
   instantApply: {
     get: function () {
-      return this.preferences.instantApply;
-    },
-  },
-
-  preferences: {
-    get: function () {
-      return this._preferences;
+      return Preferences.instantApply;
     },
   },
 

From 0ab80e8f56d6aad8740c69e8bc4dc8a5b2ad197a Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 7 Jul 2017 15:31:05 -0700
Subject: [PATCH 050/106] stop passing Preferences instance to Preference
 constructor

---
 browser/components/preferences/in-content-new/preferences.js | 9 ++++-----
 1 file changed, 4 insertions(+), 5 deletions(-)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 09ab573ec515..c50355b2b916 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -360,7 +360,7 @@ function Preferences(prefInfos) {
 
   // XXX Pass the preferences (i.e. this) object to the Preference constructor
   // as a separate parameter rather than as part of the prefInfo object.
-  const prefs = prefInfos.map(v => new Preference(Object.assign(v, { preferences: this })));
+  const prefs = prefInfos.map(v => new Preference(v));
   this.preferences = this.preferences.concat(prefs);
   Preferences.all = Preferences.all.concat(prefs);
   this._constructAfterChildren();
@@ -382,16 +382,15 @@ Preferences.getAll = function() {
 };
 
 Preferences.add = function({ id, name, type }) {
-  let pref = new Preference({ preferences: this, id, name, type });
+  let pref = new Preference({ id, name, type });
   Preferences.all.push(pref);
   return pref;
 };
 
 Preferences.addAll = function(prefInfos) {
-  // XXX Pass the preferences (i.e. this) object to the Preference constructor
-  // as a separate parameter rather than as part of the prefInfo object.
-  const prefs = prefInfos.map(v => new Preference(Object.assign(v, { preferences: this })));
+  const prefs = prefInfos.map(v => new Preference(v));
   this.all = this.all.concat(prefs);
+  // XXX Construct only the new prefs, not all prefs.
   this._constructAfterChildren();
 };
 

From ff477563ad87a9d0ffcf54e7dcfcf6737829409c Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 7 Jul 2017 15:39:31 -0700
Subject: [PATCH 051/106] remove _constructAfterChildren in preparation for
 removing Preferences constructor

---
 .../components/preferences/in-content-new/main.js  |  2 +-
 .../preferences/in-content-new/preferences.js      | 25 ++++++----------------
 2 files changed, 7 insertions(+), 20 deletions(-)

diff --git a/browser/components/preferences/in-content-new/main.js b/browser/components/preferences/in-content-new/main.js
index 24c01ed529de..deaa97fc21e5 100644
--- a/browser/components/preferences/in-content-new/main.js
+++ b/browser/components/preferences/in-content-new/main.js
@@ -31,7 +31,7 @@ if (AppConstants.MOZ_DEV_EDITION) {
 // is initialized, so the DOM elements are available to the Preference objects,
 // and the Preference objects are available to the pane initializer.
 window.addEventListener("DOMContentLoaded", function() {
-  new Preferences([
+  Preferences.addAll([
 #ifdef E10S_TESTING_ONLY
     { id: "browser.tabs.remote.autostart", name: "browser.tabs.remote.autostart", type: "bool" },
     { id: "e10sTempPref", name: "browser.tabs.remote.autostart.2", type: "bool" },
diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index c50355b2b916..71e43a3f1165 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -358,12 +358,12 @@ function Preferences(prefInfos) {
   // Call the EventEmitter constructor, as we inherit EventEmitter.
   EventEmitter.call(this);
 
-  // XXX Pass the preferences (i.e. this) object to the Preference constructor
-  // as a separate parameter rather than as part of the prefInfo object.
   const prefs = prefInfos.map(v => new Preference(v));
   this.preferences = this.preferences.concat(prefs);
   Preferences.all = Preferences.all.concat(prefs);
-  this._constructAfterChildren();
+  for (let pref of prefs) {
+    pref.updateElements();
+  }
 };
 
 Preferences.all = [];
@@ -390,8 +390,9 @@ Preferences.add = function({ id, name, type }) {
 Preferences.addAll = function(prefInfos) {
   const prefs = prefInfos.map(v => new Preference(v));
   this.all = this.all.concat(prefs);
-  // XXX Construct only the new prefs, not all prefs.
-  this._constructAfterChildren();
+  for (let pref of prefs) {
+    pref.updateElements();
+  }
 };
 
 Preferences.prototype = Object.create(EventEmitter.prototype);
@@ -435,14 +436,6 @@ Object.assign(Preferences.prototype, {
     return pref;
   },
 
-  // XXX Make the constructor do this itself, since it knows when it has
-  // constructed all the children.
-  _constructAfterChildren() {
-    for (let preference of this.preferences) {
-      preference.updateElements();
-    }
-  },
-
   service: Components.classes["@mozilla.org/preferences-service;1"]
                      .getService(Components.interfaces.nsIPrefService),
 
@@ -464,12 +457,6 @@ Preferences.service = Components.classes["@mozilla.org/preferences-service;1"]
 
 Preferences.defaultBranch = Preferences.service.getDefaultBranch("");
 
-Preferences._constructAfterChildren = function() {
-  for (let preference of this.all) {
-    preference.updateElements();
-  }
-};
-
 Object.defineProperties(Preferences, {
   type: {
     get: function() {

From 077c4153872c1d495a2f85e8fd4299dc0d1433ab Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 7 Jul 2017 15:56:18 -0700
Subject: [PATCH 052/106] avoid updating elements until Preference object
 constructed and added to Preferences collection

---
 browser/components/preferences/in-content-new/advanced.js     | 2 +-
 browser/components/preferences/in-content-new/applications.js | 2 +-
 browser/components/preferences/in-content-new/preferences.js  | 2 +-
 browser/components/preferences/in-content-new/privacy.js      | 2 +-
 browser/components/preferences/in-content-new/sync.js         | 2 +-
 5 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/browser/components/preferences/in-content-new/advanced.js b/browser/components/preferences/in-content-new/advanced.js
index e03af4526391..8324ce59594b 100644
--- a/browser/components/preferences/in-content-new/advanced.js
+++ b/browser/components/preferences/in-content-new/advanced.js
@@ -11,7 +11,7 @@ Components.utils.import("resource://gre/modules/LoadContextInfo.jsm");
 Components.utils.import("resource://gre/modules/XPCOMUtils.jsm");
 
 window.addEventListener("DOMContentLoaded", function() {
-  new Preferences([
+  Preferences.addAll([
     { id: "browser.preferences.advanced.selectedTabIndex", name: "browser.preferences.advanced.selectedTabIndex", type: "int" },
 
     // Update tab
diff --git a/browser/components/preferences/in-content-new/applications.js b/browser/components/preferences/in-content-new/applications.js
index 6f4e0c2c15d7..2263aaed4516 100644
--- a/browser/components/preferences/in-content-new/applications.js
+++ b/browser/components/preferences/in-content-new/applications.js
@@ -81,7 +81,7 @@ const APP_ICON_ATTR_NAME = "appHandlerIcon";
 // Preferences object
 
 window.addEventListener("DOMContentLoaded", function() {
-  new Preferences([
+  Preferences.addAll([
     { id: "browser.feeds.handler", name: "browser.feeds.handler", type: "string" },
     { id: "browser.feeds.handler.default", name: "browser.feeds.handler.default", type: "string" },
     { id: "browser.feeds.handlers.application", name: "browser.feeds.handlers.application", type: "file" },
diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 71e43a3f1165..2514aa8c2f4c 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -384,6 +384,7 @@ Preferences.getAll = function() {
 Preferences.add = function({ id, name, type }) {
   let pref = new Preference({ id, name, type });
   Preferences.all.push(pref);
+  pref.updateElements();
   return pref;
 };
 
@@ -541,7 +542,6 @@ function Preference({ id, name, type, inverted }) {
     this._value = preference ? preference.value : this.valueFromPreferences;
   } else
     this._value = this.valueFromPreferences;
-  this.updateElements();
 }
 
 // XXX Figure out when to call this (document unload?) and do so.
diff --git a/browser/components/preferences/in-content-new/privacy.js b/browser/components/preferences/in-content-new/privacy.js
index 345fea153ccd..418af241d496 100644
--- a/browser/components/preferences/in-content-new/privacy.js
+++ b/browser/components/preferences/in-content-new/privacy.js
@@ -34,7 +34,7 @@ XPCOMUtils.defineLazyGetter(this, "AlertsServiceDND", function() {
 });
 
 window.addEventListener("DOMContentLoaded", function() {
-  new Preferences([
+  Preferences.addAll([
     { id: "privacy.userContext.enabled", name: "privacy.userContext.enabled", type: "bool" },
 
     // Tracking
diff --git a/browser/components/preferences/in-content-new/sync.js b/browser/components/preferences/in-content-new/sync.js
index d79d11bf5da4..01bab0eca567 100644
--- a/browser/components/preferences/in-content-new/sync.js
+++ b/browser/components/preferences/in-content-new/sync.js
@@ -26,7 +26,7 @@ const FXA_LOGIN_UNVERIFIED = 1;
 const FXA_LOGIN_FAILED = 2;
 
 window.addEventListener("DOMContentLoaded", function() {
-  new Preferences([
+  Preferences.addAll([
     { id: "engine.addons", name: "services.sync.engine.addons", type: "bool" },
     { id: "engine.bookmarks", name: "services.sync.engine.bookmarks", type: "bool" },
     { id: "engine.history", name: "services.sync.engine.history", type: "bool" },

From f25672a9231619d14e3d3a673b886277bd7e8d60 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 7 Jul 2017 16:16:46 -0700
Subject: [PATCH 053/106] complete conversion of Preferences from constructor
 to singleton

---
 .../preferences/in-content-new/preferences.js      | 154 +++++----------------
 1 file changed, 33 insertions(+), 121 deletions(-)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 2514aa8c2f4c..047483a444d4 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -354,149 +354,58 @@ function confirmRestartPrompt(aRestartToEnable, aDefaultButtonIndex,
   return buttonIndex;
 }
 
-function Preferences(prefInfos) {
-  // Call the EventEmitter constructor, as we inherit EventEmitter.
-  EventEmitter.call(this);
-
-  const prefs = prefInfos.map(v => new Preference(v));
-  this.preferences = this.preferences.concat(prefs);
-  Preferences.all = Preferences.all.concat(prefs);
-  for (let pref of prefs) {
-    pref.updateElements();
-  }
-};
+window.Preferences = {
+  all: [],
 
-Preferences.all = [];
-Preferences.get = function(id) {
-  // XXX Implement a hash to optimize this query.
-  for (let i = 0; i < this.all.length; i++) {
-    if (this.all[i].id === id) {
-      return this.all[i];
-    }
-  }
-  return null;
-};
-
-Preferences.getAll = function() {
-  return this.all.slice();
-};
-
-Preferences.add = function({ id, name, type }) {
-  let pref = new Preference({ id, name, type });
-  Preferences.all.push(pref);
-  pref.updateElements();
-  return pref;
-};
-
-Preferences.addAll = function(prefInfos) {
-  const prefs = prefInfos.map(v => new Preference(v));
-  this.all = this.all.concat(prefs);
-  for (let pref of prefs) {
+  add({ id, name, type }) {
+    let pref = new Preference({ id, name, type });
+    Preferences.all.push(pref);
     pref.updateElements();
-  }
-};
-
-Preferences.prototype = Object.create(EventEmitter.prototype);
-
-Object.assign(Preferences.prototype, {
-  constructor: Preferences,
-  id: "",
-  hidden: false,
-  preferences: [],
+    return pref;
+  },
 
-  observe(aSubject, aTopic, aData) {
-    // Implement a hash to optimize this query.
-    for (var i = 0; i < this.preferences.length; ++i) {
-      var preference = this.preferences[i];
-      if (preference.name == aData) {
-        preference.value = preference.valueFromPreferences;
-        // XXX Or at least frickin' break here.  Or do we expect multiple
-        // Preference objects for a given preference name?
-      }
+  addAll(prefInfos) {
+    const prefs = prefInfos.map(v => new Preference(v));
+    this.all = this.all.concat(prefs);
+    for (let pref of prefs) {
+      pref.updateElements();
     }
   },
 
   get(id) {
     // XXX Implement a hash to optimize this query.
-    for (let i = 0; i < this.preferences.length; i++) {
-      if (this.preferences[i].id === id) {
-        return this.preferences[i];
+    for (let i = 0; i < this.all.length; i++) {
+      if (this.all[i].id === id) {
+        return this.all[i];
       }
     }
     return null;
   },
 
   getAll() {
-    return this.preferences.slice();
-  },
-
-  add({ id, name, type }) {
-    let pref = new Preference({ preferences: this, id, name, type });
-    this.preferences.push(pref);
-    Preferences.all.push(pref);
-    return pref;
+    return this.all.slice();
   },
 
-  service: Components.classes["@mozilla.org/preferences-service;1"]
-                     .getService(Components.interfaces.nsIPrefService),
-
   rootBranch: Components.classes["@mozilla.org/preferences-service;1"]
-              .getService(Components.interfaces.nsIPrefBranch),
+                        .getService(Components.interfaces.nsIPrefBranch),
 
   rootBranchInternal: Components.classes["@mozilla.org/preferences-service;1"]
-                      .getService(Components.interfaces.nsIPrefBranchInternal),
-});
-
-Preferences.rootBranch = Components.classes["@mozilla.org/preferences-service;1"]
-                         .getService(Components.interfaces.nsIPrefBranch);
-
-Preferences.rootBranchInternal = Components.classes["@mozilla.org/preferences-service;1"]
-                                 .getService(Components.interfaces.nsIPrefBranchInternal);
-
-Preferences.service = Components.classes["@mozilla.org/preferences-service;1"]
-                      .getService(Components.interfaces.nsIPrefService);
-
-Preferences.defaultBranch = Preferences.service.getDefaultBranch("");
-
-Object.defineProperties(Preferences, {
-  type: {
-    get: function() {
-      return document.documentElement.type || "";
-    },
-  },
-
-  instantApply: {
-    get: function () {
-      var doc = document.documentElement;
-      return this.type == "child" ? doc.instantApply
-                                  : doc.instantApply || this.rootBranch.getBoolPref("browser.preferences.instantApply");
-    },
-  },
-});
+                                .getService(Components.interfaces.nsIPrefBranchInternal),
 
-// Assign getters via Object.defineProperties, since Object.assign invokes them
-// and assigns their return values rather than assigning the getters themselves.
-Object.defineProperties(Preferences.prototype, {
-  defaultBranch: {
-    get: function () {
-      return this.service.getDefaultBranch("");
-    },
-  },
+  defaultBranch: Components.classes["@mozilla.org/preferences-service;1"]
+                           .getService(Components.interfaces.nsIPrefService)
+                           .getDefaultBranch(""),
 
-  type: {
-    get: function () {
-      return document.documentElement.type || "";
-    },
+  get type() {
+    return document.documentElement.type || "";
   },
 
-  instantApply: {
-    get: function () {
-      var doc = document.documentElement;
-      return this.type == "child" ? doc.instantApply
-                                  : doc.instantApply || this.rootBranch.getBoolPref("browser.preferences.instantApply");
-    },
+  get instantApply() {
+    var doc = document.documentElement;
+    return this.type == "child" ? doc.instantApply
+                                : doc.instantApply || this.rootBranch.getBoolPref("browser.preferences.instantApply");
   },
-});
+};
 
 function Preference({ id, name, type, inverted }) {
   EventEmitter.call(this);
@@ -884,8 +793,11 @@ Object.defineProperties(Preference.prototype, {
       default:
         this._reportUnknownType();
       }
-      if (!this.batching)
-        Preferences.service.savePrefFile(null);
+      if (!this.batching) {
+        var psvc = Components.classes["@mozilla.org/preferences-service;1"]
+                             .getService(Components.interfaces.nsIPrefService);
+        psvc.savePrefFile(null);
+      }
       return val;
     },
   },

From 60f46a3836502507f84ba689f44a41f1ecbbf3ef Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 7 Jul 2017 16:36:25 -0700
Subject: [PATCH 054/106] optimize pref retrieval

---
 .../preferences/in-content-new/preferences.js      | 24 ++++++++--------------
 1 file changed, 9 insertions(+), 15 deletions(-)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 047483a444d4..23a5add33743 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -355,35 +355,29 @@ function confirmRestartPrompt(aRestartToEnable, aDefaultButtonIndex,
 }
 
 window.Preferences = {
-  all: [],
+  all: {},
 
-  add({ id, name, type }) {
-    let pref = new Preference({ id, name, type });
-    Preferences.all.push(pref);
+  add(prefInfo) {
+    const pref = new Preference(prefInfo);
+    Preferences.all[pref.id] = pref;
     pref.updateElements();
     return pref;
   },
 
   addAll(prefInfos) {
-    const prefs = prefInfos.map(v => new Preference(v));
-    this.all = this.all.concat(prefs);
-    for (let pref of prefs) {
+    for (const prefInfo of prefInfos) {
+      const pref = new Preference(prefInfo);
+      this.all[pref.id] = pref;
       pref.updateElements();
     }
   },
 
   get(id) {
-    // XXX Implement a hash to optimize this query.
-    for (let i = 0; i < this.all.length; i++) {
-      if (this.all[i].id === id) {
-        return this.all[i];
-      }
-    }
-    return null;
+    return this.all[id] || null;
   },
 
   getAll() {
-    return this.all.slice();
+    return Object.values(this.all);
   },
 
   rootBranch: Components.classes["@mozilla.org/preferences-service;1"]

From c606fc4347ff49d0257f39489d95c3a9563e7f2f Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 7 Jul 2017 16:38:07 -0700
Subject: [PATCH 055/106] TODO throw an exception if a pref with the same ID
 already exists

---
 browser/components/preferences/in-content-new/preferences.js | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 23a5add33743..0f3bb6e84981 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -358,6 +358,7 @@ window.Preferences = {
   all: {},
 
   add(prefInfo) {
+    // TODO: throw an exception if a pref with the same ID already exists.
     const pref = new Preference(prefInfo);
     Preferences.all[pref.id] = pref;
     pref.updateElements();
@@ -366,6 +367,7 @@ window.Preferences = {
 
   addAll(prefInfos) {
     for (const prefInfo of prefInfos) {
+      // TODO: throw an exception if a pref with the same ID already exists.
       const pref = new Preference(prefInfo);
       this.all[pref.id] = pref;
       pref.updateElements();

From 1d575941f94856f1e9d1dbfb5925c1d59d24701b Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 7 Jul 2017 16:50:09 -0700
Subject: [PATCH 056/106] remove unused code

---
 .../preferences/in-content-new/preferences.js           |  2 ++
 browser/components/preferences/in-content-new/sync.js   |  4 ----
 toolkit/content/widgets/preferences.xml                 | 17 +++--------------
 toolkit/mozapps/preferences/fontbuilder.js              |  2 +-
 4 files changed, 6 insertions(+), 19 deletions(-)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 0f3bb6e84981..381bf36728fd 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -396,6 +396,8 @@ window.Preferences = {
     return document.documentElement.type || "";
   },
 
+  // TODO: remove this getter and the conditions that depend on it
+  // since instantApply is always true in this prefs implementation.
   get instantApply() {
     var doc = document.documentElement;
     return this.type == "child" ? doc.instantApply
diff --git a/browser/components/preferences/in-content-new/sync.js b/browser/components/preferences/in-content-new/sync.js
index 01bab0eca567..4b9d775a7460 100644
--- a/browser/components/preferences/in-content-new/sync.js
+++ b/browser/components/preferences/in-content-new/sync.js
@@ -37,10 +37,6 @@ window.addEventListener("DOMContentLoaded", function() {
 }, { once: true, capture: true });
 
 var gSyncPane = {
-  // XXX Remove this unused property.
-  prefArray: ["engine.bookmarks", "engine.passwords", "engine.prefs",
-              "engine.tabs", "engine.history"],
-
   get page() {
     return document.getElementById("weavePrefsDeck").selectedIndex;
   },
diff --git a/toolkit/content/widgets/preferences.xml b/toolkit/content/widgets/preferences.xml
index 5b1a2df1f824..95d1bfbd3753 100644
--- a/toolkit/content/widgets/preferences.xml
+++ b/toolkit/content/widgets/preferences.xml
@@ -1215,12 +1215,7 @@
       <method name="preferenceForElement">
         <parameter name="aElement"/>
         <body>
-          <![CDATA[
-          // XXX Remove reference to mainPreferences once we've eliminated
-          // the in-content-new preference page's dependency on this <prefpane>.
-          return document.getElementById(aElement.getAttribute("preference")) ||
-                 Preferences.get(aElement.getAttribute("preference"));
-          ]]>
+          return document.getElementById(aElement.getAttribute("preference"));
         </body>
       </method>
 
@@ -1257,10 +1252,7 @@
         <![CDATA[
           delete aElement._deferredValueUpdateTask;
           let prefID = aElement.getAttribute("preference");
-          // XXX Remove reference to mainPreferences once we've eliminated
-          // the in-content-new preference page's dependency on this <prefpane>.
-          // binding.
-          let preference = document.getElementById(prefID) || window.Preferences.get(prefID);
+          let preference = document.getElementById(prefID);
           let prefVal = preference.getElementValue(aElement);
           preference.value = prefVal;
           this._deferredValueUpdateElements.delete(aElement);
@@ -1288,10 +1280,7 @@
           let element = this.getPreferenceElement(aElement);
           if (element.hasAttribute("preference")) {
             if (element.getAttribute("delayprefsave") != "true") {
-              // XXX Remove reference to mainPreferences once we've eliminated
-              // the in-content-new preference page's dependency on this <prefpane>.
-              var preference = document.getElementById(element.getAttribute("preference")) ||
-                               Preferences.get(element.getAttribute("preference"));
+              var preference = document.getElementById(element.getAttribute("preference"));
               var prefVal = preference.getElementValue(element);
               preference.value = prefVal;
             } else {
diff --git a/toolkit/mozapps/preferences/fontbuilder.js b/toolkit/mozapps/preferences/fontbuilder.js
index 72220f768a3a..35fb98ae3c06 100644
--- a/toolkit/mozapps/preferences/fontbuilder.js
+++ b/toolkit/mozapps/preferences/fontbuilder.js
@@ -91,7 +91,7 @@ var FontBuilder = {
     // - there is no setting
     // - the font selected by the user is no longer present (e.g. deleted from
     //   fonts folder)
-    // XXX Stop getting preference element once we've converted fonts.xul
+    // TODO: stop getting preference element once we've converted fonts.xul
     // from XBL <preference> elements to JS Preference objects.
     let preference = document.getElementById(aElement.getAttribute("preference")) ||
                      Preferences.get(aElement.getAttribute("preference"));

From 7d205d62863b8ed5afb61353bb086a6963221304 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 7 Jul 2017 16:53:58 -0700
Subject: [PATCH 057/106] remove unused code

---
 .../preferences/in-content-new/preferences.js      | 26 ----------------------
 1 file changed, 26 deletions(-)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 381bf36728fd..5fa9ce303ea0 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -96,7 +96,6 @@ function init_all() {
   mainPrefPane.addEventListener("select", MainPrefPane.onSelect.bind(MainPrefPane));
   mainPrefPane.addEventListener("change", MainPrefPane.onChange.bind(MainPrefPane));
   mainPrefPane.addEventListener("input", MainPrefPane.onInput.bind(MainPrefPane));
-  mainPrefPane.addEventListener("paneload", MainPrefPane.onPaneLoad.bind(MainPrefPane));
 
   // Wait until initialization of all preferences are complete before
   // notifying observers that the UI is now ready.
@@ -924,17 +923,6 @@ const MainPrefPane = {
     }
   },
 
-  // XXX Remove these unused getters.
-  get contentHeight() {
-    var targetHeight = parseInt(window.getComputedStyle(this._content).height);
-    targetHeight += parseInt(window.getComputedStyle(this._content).marginTop);
-    targetHeight += parseInt(window.getComputedStyle(this._content).marginBottom);
-    return targetHeight;
-  },
-  get _content() {
-    return document.getElementById('mainPrefPane');
-  },
-
   onCommand(event) {
     // This "command" event handler tracks changes made to preferences by
     // the user in this window.
@@ -961,18 +949,4 @@ const MainPrefPane = {
     // the user in this window.
     this.userChangedValue(event.target);
   },
-
-  // XXX Figure out if this is actually needed and remove or fix it accordingly.
-  onPaneLoad(event) {
-    // Initialize all values from preferences.
-    var elements = this.preferenceElements;
-    for (var i = 0; i < elements.length; ++i) {
-      try {
-        var preference = this.preferenceForElement(elements[i]);
-        preference.setElementValue(elements[i]);
-      } catch (e) {
-        dump("*** No preference found for " + elements[i].getAttribute("preference") + "\n");
-      }
-    }
-  },
 };

From f4ffc506354ff1884cf7cfa286e8297ad9b6a99d Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 7 Jul 2017 17:09:25 -0700
Subject: [PATCH 058/106] remove more unused code

---
 .../components/preferences/in-content-new/preferences.js   | 14 --------------
 1 file changed, 14 deletions(-)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 5fa9ce303ea0..534b454733c9 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -823,7 +823,6 @@ const MainPrefPane = {
   },
 
   // XXX Figure out if these are still used and remove them if not.
-  src: '',
   selected: false,
   image: '',
   label: '',
@@ -850,19 +849,6 @@ const MainPrefPane = {
     return this.getAttribute("helpTopic");
   },
 
-  _loaded: false,
-  get loaded() {
-    return !this.src ? true : this._loaded;
-  },
-  set loaded(val) {
-    this._loaded = val;
-    return val;
-  },
-
-  preferenceForElement(aElement) {
-    return Preferences.get(aElement.getAttribute("preference"));
-  },
-
   getPreferenceElement(aStartElement) {
     var temp = aStartElement;
     while (temp && temp.nodeType == Node.ELEMENT_NODE &&

From af635917b97c9c15909bf0e7d1d0d122567509b6 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 7 Jul 2017 17:19:32 -0700
Subject: [PATCH 059/106] remove more unused code

---
 .../preferences/in-content-new/preferences.js      | 56 ----------------------
 1 file changed, 56 deletions(-)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 534b454733c9..bf960bb0a770 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -255,15 +255,6 @@ function search(aQuery, aAttribute, aSubquery, aSubAttribute) {
   }
 }
 
-function helpButtonCommand() {
-  let pane = history.state;
-  let categories = document.getElementById("categories");
-  // XXX Ensure this still works.
-  let helpTopic = categories.querySelector(".category[value=" + pane + "]")
-                            .getAttribute("helpTopic");
-  openHelpLink(helpTopic);
-}
-
 function friendlyPrefCategoryNameToInternalName(aName) {
   if (aName.startsWith("pane"))
     return aName;
@@ -802,53 +793,6 @@ Object.defineProperties(Preference.prototype, {
 });
 
 const MainPrefPane = {
-  writePreferences(aFlushToDisk) {
-    // Write all values to preferences.
-    if (this._deferredValueUpdateElements.size) {
-      this._finalizeDeferredElements();
-    }
-
-    var preferences = this.preferences;
-    for (var i = 0; i < preferences.length; ++i) {
-      var preference = preferences[i];
-      preference.batching = true;
-      preference.valueFromPreferences = preference.value;
-      preference.batching = false;
-    }
-    if (aFlushToDisk) {
-      var psvc = Components.classes["@mozilla.org/preferences-service;1"]
-                           .getService(Components.interfaces.nsIPrefService);
-      psvc.savePrefFile(null);
-    }
-  },
-
-  // XXX Figure out if these are still used and remove them if not.
-  selected: false,
-  image: '',
-  label: '',
-
-  // XXX Figure out if these are still used and remove them if not.
-  get preferenceElements() {
-    return this.getElementsByAttribute('preference', '*');
-  },
-  get preferences() {
-    return Preferences.preferences;
-  },
-
-  // XXX Figure out if this is still used and fix or remove it accordingly.
-  get helpTopic() {
-    // if there are tabs, and the selected tab provides a helpTopic, return that
-    var box = this.getElementsByTagName("tabbox");
-    if (box[0]) {
-      var tab = box[0].selectedTab;
-      if (tab && tab.hasAttribute("helpTopic"))
-        return tab.getAttribute("helpTopic");
-    }
-
-    // otherwise, return the helpTopic of the current panel
-    return this.getAttribute("helpTopic");
-  },
-
   getPreferenceElement(aStartElement) {
     var temp = aStartElement;
     while (temp && temp.nodeType == Node.ELEMENT_NODE &&

From 11356c4b479e62cd814a8887b872105db23143fd Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 7 Jul 2017 17:45:27 -0700
Subject: [PATCH 060/106] make instantApply TODOs consistent; remove space
 between anonymous function and parentheses

---
 .../preferences/in-content-new/preferences.js      | 33 ++++++++++------------
 1 file changed, 15 insertions(+), 18 deletions(-)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index bf960bb0a770..fd6d46e43df0 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -407,11 +407,15 @@ function Preference({ id, name, type, inverted }) {
 
   // if the element has been inserted without the name attribute set,
   // we have nothing to do here
-  // XXX Throw an exception in this case, which seems, erm, exceptional.
+  // TODO: throw an exception in this case, which seems, erm, exceptional.
   if (!this.name)
     return;
 
   Preferences.rootBranchInternal.addObserver(this.name, this);
+
+  // TODO: remove the code below that only applies in non-instant apply mode,
+  // since instantApply is always true in this prefs implementation.
+
   // In non-instant apply mode, we must try and use the last saved state
   // from any previous opens of a child dialog instead of the value from
   // preferences, to pick up any edits a user may have made.
@@ -441,11 +445,6 @@ function Preference({ id, name, type, inverted }) {
     this._value = this.valueFromPreferences;
 }
 
-// XXX Figure out when to call this (document unload?) and do so.
-Preference.destructor = function () {
-  Preferences.rootBranchInternal.removeObserver(this.name, this);
-};
-
 Preference.prototype = Object.create(EventEmitter.prototype);
 
 Object.assign(Preference.prototype, {
@@ -616,18 +615,16 @@ Object.assign(Preference.prototype, {
 // Assign getters via Object.defineProperties, since Object.assign invokes them
 // and assigns their return values rather than assigning the getters themselves.
 Object.defineProperties(Preference.prototype, {
-  // XXX None of the preferences in the in-content-new prefs page
-  // set instantApply on individual preferences, so we don't need to expose
-  // a per-preference value for it.  Replace all references to the parent
-  // preferences.instantApply instead and remove this getter.
+  // TODO: remove this getter and the conditions that depend on it
+  // since instantApply is always true in this prefs implementation.
   instantApply: {
-    get: function () {
+    get: function() {
       return Preferences.instantApply;
     },
   },
 
   name: {
-    get: function () {
+    get: function() {
       return this._name;
     },
     set: function (val) {
@@ -643,7 +640,7 @@ Object.defineProperties(Preference.prototype, {
   },
 
   value: {
-    get: function () {
+    get: function() {
       return this._value;
     },
     set: function (val) {
@@ -658,13 +655,13 @@ Object.defineProperties(Preference.prototype, {
   },
 
   locked: {
-    get: function () {
+    get: function() {
       return Preferences.rootBranch.prefIsLocked(this.name);
     },
   },
 
   disabled: {
-    get: function () {
+    get: function() {
       return this._disabled;
     },
     set: function (val) {
@@ -687,7 +684,7 @@ Object.defineProperties(Preference.prototype, {
   },
 
   defaultValue: {
-    get: function () {
+    get: function() {
       this._useDefault = true;
       var val = this.valueFromPreferences;
       this._useDefault = false;
@@ -696,13 +693,13 @@ Object.defineProperties(Preference.prototype, {
   },
 
   _branch: {
-    get: function () {
+    get: function() {
       return this._useDefault ? Preferences.defaultBranch : Preferences.rootBranch;
     },
   },
 
   valueFromPreferences: {
-    get: function () {
+    get: function() {
       try {
         // Force a resync of value with preferences.
         switch (this.type) {

From 369ae5fa291fbfc6a180b89ba881256bdec9a53f Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 7 Jul 2017 17:58:55 -0700
Subject: [PATCH 061/106] implement destructor

---
 browser/components/preferences/in-content-new/preferences.js | 11 ++++++++---
 1 file changed, 8 insertions(+), 3 deletions(-)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index fd6d46e43df0..cbe2c8284b64 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -411,7 +411,9 @@ function Preference({ id, name, type, inverted }) {
   if (!this.name)
     return;
 
+  // TODO: figure out why we get errors when making this a weak observer.
   Preferences.rootBranchInternal.addObserver(this.name, this);
+  window.addEventListener("unload", this.destructor.bind(this), { once: true });
 
   // TODO: remove the code below that only applies in non-instant apply mode,
   // since instantApply is always true in this prefs implementation.
@@ -449,7 +451,10 @@ Preference.prototype = Object.create(EventEmitter.prototype);
 
 Object.assign(Preference.prototype, {
   constructor: Preference,
-  _preferences: null,
+  destructor() {
+    Preferences.rootBranchInternal.removeObserver(this.name, this);
+  },
+
   _value: null,
   _disabled: false,
 
@@ -465,11 +470,11 @@ Object.assign(Preference.prototype, {
 
   _useDefault: false,
 
-  // XXX Remove this, since it never gets changed.
+  // TODO: remove this, since it never gets changed.
   batching: false,
 
   _reportUnknownType() {
-    // XXX Instead of reporting an unknown type, throw an exception
+    // TODO: instead of reporting an unknown type, throw an exception
     // if a Preference object is instantiated with an unknown type.
     var consoleService = Components.classes["@mozilla.org/consoleservice;1"]
                                    .getService(Components.interfaces.nsIConsoleService);

From 003f09900f817a8ee8e5ced99baa7e315025cccd Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 7 Jul 2017 18:00:07 -0700
Subject: [PATCH 062/106] remove extraneous XXXs

---
 browser/components/preferences/in-content-new/privacy.js | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/browser/components/preferences/in-content-new/privacy.js b/browser/components/preferences/in-content-new/privacy.js
index 418af241d496..fe0a4fc938d6 100644
--- a/browser/components/preferences/in-content-new/privacy.js
+++ b/browser/components/preferences/in-content-new/privacy.js
@@ -41,7 +41,7 @@ window.addEventListener("DOMContentLoaded", function() {
     { id: "privacy.trackingprotection.enabled", name: "privacy.trackingprotection.enabled", type: "bool" },
     { id: "privacy.trackingprotection.pbmode.enabled", name: "privacy.trackingprotection.pbmode.enabled", type: "bool" },
 
-    // XXX button prefs
+    // Button prefs
     { id: "pref.privacy.disable_button.cookie_exceptions", name: "pref.privacy.disable_button.cookie_exceptions", type: "bool" },
     { id: "pref.privacy.disable_button.view_cookies", name: "pref.privacy.disable_button.view_cookies", type: "bool" },
     { id: "pref.privacy.disable_button.change_blocklist", name: "pref.privacy.disable_button.change_blocklist", type: "bool" },
@@ -77,7 +77,7 @@ window.addEventListener("DOMContentLoaded", function() {
     // Passwords
     { id: "signon.rememberSignons", name: "signon.rememberSignons", type: "bool" },
 
-    // XXX buttons
+    // Buttons
     { id: "pref.privacy.disable_button.view_passwords", name: "pref.privacy.disable_button.view_passwords", type: "bool" },
     { id: "pref.privacy.disable_button.view_passwords_exceptions", name: "pref.privacy.disable_button.view_passwords_exceptions", type: "bool" },
 

From 121259f43985b14cfab7a9fd8af2247087a8c586 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 7 Jul 2017 18:09:15 -0700
Subject: [PATCH 063/106] DRY

---
 .../preferences/in-content-new/advanced.js         | 12 ++--
 .../preferences/in-content-new/applications.js     | 32 ++++-----
 .../components/preferences/in-content-new/main.js  | 70 +++++++++---------
 .../preferences/in-content-new/preferences.js      |  5 +-
 .../preferences/in-content-new/privacy.js          | 82 +++++++++++-----------
 5 files changed, 100 insertions(+), 101 deletions(-)

diff --git a/browser/components/preferences/in-content-new/advanced.js b/browser/components/preferences/in-content-new/advanced.js
index 8324ce59594b..c9459e3cdd83 100644
--- a/browser/components/preferences/in-content-new/advanced.js
+++ b/browser/components/preferences/in-content-new/advanced.js
@@ -12,21 +12,21 @@ Components.utils.import("resource://gre/modules/XPCOMUtils.jsm");
 
 window.addEventListener("DOMContentLoaded", function() {
   Preferences.addAll([
-    { id: "browser.preferences.advanced.selectedTabIndex", name: "browser.preferences.advanced.selectedTabIndex", type: "int" },
+    { id: "browser.preferences.advanced.selectedTabIndex", type: "int" },
 
     // Update tab
 #ifdef MOZ_UPDATER
-    { id: "app.update.enabled", name: "app.update.enabled", type: "bool" },
-    { id: "app.update.auto", name: "app.update.auto", type: "bool" },
+    { id: "app.update.enabled", type: "bool" },
+    { id: "app.update.auto", type: "bool" },
 
-    { id: "app.update.disable_button.showUpdateHistory", name: "app.update.disable_button.showUpdateHistory", type: "bool" },
+    { id: "app.update.disable_button.showUpdateHistory", type: "bool" },
 
 #ifdef MOZ_MAINTENANCE_SERVICE
-    { id: "app.update.service.enabled", name: "app.update.service.enabled", type: "bool" },
+    { id: "app.update.service.enabled", type: "bool" },
 #endif
 #endif
 
-    { id: "browser.search.update", name: "browser.search.update", type: "bool" },
+    { id: "browser.search.update", type: "bool" },
   ]);
 }, { once: true, capture: true });
 
diff --git a/browser/components/preferences/in-content-new/applications.js b/browser/components/preferences/in-content-new/applications.js
index 2263aaed4516..22a3b02a9a4b 100644
--- a/browser/components/preferences/in-content-new/applications.js
+++ b/browser/components/preferences/in-content-new/applications.js
@@ -82,22 +82,22 @@ const APP_ICON_ATTR_NAME = "appHandlerIcon";
 
 window.addEventListener("DOMContentLoaded", function() {
   Preferences.addAll([
-    { id: "browser.feeds.handler", name: "browser.feeds.handler", type: "string" },
-    { id: "browser.feeds.handler.default", name: "browser.feeds.handler.default", type: "string" },
-    { id: "browser.feeds.handlers.application", name: "browser.feeds.handlers.application", type: "file" },
-    { id: "browser.feeds.handlers.webservice", name: "browser.feeds.handlers.webservice", type: "string" },
-
-    { id: "browser.videoFeeds.handler", name: "browser.videoFeeds.handler", type: "string" },
-    { id: "browser.videoFeeds.handler.default", name: "browser.videoFeeds.handler.default", type: "string" },
-    { id: "browser.videoFeeds.handlers.application", name: "browser.videoFeeds.handlers.application", type: "file" },
-    { id: "browser.videoFeeds.handlers.webservice", name: "browser.videoFeeds.handlers.webservice", type: "string" },
-
-    { id: "browser.audioFeeds.handler", name: "browser.audioFeeds.handler", type: "string" },
-    { id: "browser.audioFeeds.handler.default", name: "browser.audioFeeds.handler.default", type: "string" },
-    { id: "browser.audioFeeds.handlers.application", name: "browser.audioFeeds.handlers.application", type: "file" },
-    { id: "browser.audioFeeds.handlers.webservice", name: "browser.audioFeeds.handlers.webservice", type: "string" },
-
-    { id: "pref.downloads.disable_button.edit_actions", name: "pref.downloads.disable_button.edit_actions", type: "bool" },
+    { id: "browser.feeds.handler", type: "string" },
+    { id: "browser.feeds.handler.default", type: "string" },
+    { id: "browser.feeds.handlers.application", type: "file" },
+    { id: "browser.feeds.handlers.webservice", type: "string" },
+
+    { id: "browser.videoFeeds.handler", type: "string" },
+    { id: "browser.videoFeeds.handler.default", type: "string" },
+    { id: "browser.videoFeeds.handlers.application", type: "file" },
+    { id: "browser.videoFeeds.handlers.webservice", type: "string" },
+
+    { id: "browser.audioFeeds.handler", type: "string" },
+    { id: "browser.audioFeeds.handler.default", type: "string" },
+    { id: "browser.audioFeeds.handlers.application", type: "file" },
+    { id: "browser.audioFeeds.handlers.webservice", type: "string" },
+
+    { id: "pref.downloads.disable_button.edit_actions", type: "bool" },
   ]);
 }, { once: true, capture: true });
 
diff --git a/browser/components/preferences/in-content-new/main.js b/browser/components/preferences/in-content-new/main.js
index deaa97fc21e5..cd8ddb7aa431 100644
--- a/browser/components/preferences/in-content-new/main.js
+++ b/browser/components/preferences/in-content-new/main.js
@@ -33,34 +33,34 @@ if (AppConstants.MOZ_DEV_EDITION) {
 window.addEventListener("DOMContentLoaded", function() {
   Preferences.addAll([
 #ifdef E10S_TESTING_ONLY
-    { id: "browser.tabs.remote.autostart", name: "browser.tabs.remote.autostart", type: "bool" },
+    { id: "browser.tabs.remote.autostart", type: "bool" },
     { id: "e10sTempPref", name: "browser.tabs.remote.autostart.2", type: "bool" },
     { id: "e10sForceEnable", name: "browser.tabs.remote.force-enable", type: "bool" },
 #endif
 
     /* Startup */
-    { id: "browser.startup.page", name: "browser.startup.page", type: "int" },
-    { id: "browser.startup.homepage", name: "browser.startup.homepage", type: "wstring" },
+    { id: "browser.startup.page", type: "int" },
+    { id: "browser.startup.homepage", type: "wstring" },
 
 #ifdef HAVE_SHELL_SERVICE
-    { id: "browser.shell.checkDefaultBrowser", name: "browser.shell.checkDefaultBrowser", type: "bool" },
-    { id: "pref.general.disable_button.default_browser", name: "pref.general.disable_button.default_browser", type: "bool" },
+    { id: "browser.shell.checkDefaultBrowser", type: "bool" },
+    { id: "pref.general.disable_button.default_browser", type: "bool" },
 #endif
 
-    { id: "pref.browser.homepage.disable_button.current_page", name: "pref.browser.homepage.disable_button.current_page", type: "bool" },
-    { id: "pref.browser.homepage.disable_button.bookmark_page", name: "pref.browser.homepage.disable_button.bookmark_page", type: "bool" },
-    { id: "pref.browser.homepage.disable_button.restore_default", name: "pref.browser.homepage.disable_button.restore_default", type: "bool" },
-    { id: "browser.privatebrowsing.autostart", name: "browser.privatebrowsing.autostart", type: "bool" },
+    { id: "pref.browser.homepage.disable_button.current_page", type: "bool" },
+    { id: "pref.browser.homepage.disable_button.bookmark_page", type: "bool" },
+    { id: "pref.browser.homepage.disable_button.restore_default", type: "bool" },
+    { id: "browser.privatebrowsing.autostart", type: "bool" },
 
     /* Search Engine */
-    { id: "browser.search.suggest.enabled", name: "browser.search.suggest.enabled", type: "bool" },
-    { id: "browser.urlbar.suggest.searches", name: "browser.urlbar.suggest.searches", type: "bool" },
-    { id: "browser.search.hiddenOneOffs", name: "browser.search.hiddenOneOffs", type: "unichar" },
+    { id: "browser.search.suggest.enabled", type: "bool" },
+    { id: "browser.urlbar.suggest.searches", type: "bool" },
+    { id: "browser.search.hiddenOneOffs", type: "unichar" },
 
     /* Downloads */
-    { id: "browser.download.useDownloadDir", name: "browser.download.useDownloadDir", type: "bool" },
-    { id: "browser.download.folderList", name: "browser.download.folderList", type: "int" },
-    { id: "browser.download.dir", name: "browser.download.dir", type: "file" },
+    { id: "browser.download.useDownloadDir", type: "bool" },
+    { id: "browser.download.folderList", type: "int" },
+    { id: "browser.download.dir", type: "file" },
 
     /* Tab preferences
     Preferences:
@@ -82,21 +82,21 @@ window.addEventListener("DOMContentLoaded", function() {
     - true if tabs are to be shown in the Windows 7 taskbar
     */
 
-    { id: "browser.link.open_newwindow", name: "browser.link.open_newwindow", type: "int" },
-    { id: "browser.tabs.loadInBackground", name: "browser.tabs.loadInBackground", type: "bool", inverted: true },
-    { id: "browser.tabs.warnOnClose", name: "browser.tabs.warnOnClose", type: "bool" },
-    { id: "browser.tabs.warnOnOpen", name: "browser.tabs.warnOnOpen", type: "bool" },
-    { id: "browser.sessionstore.restore_on_demand", name: "browser.sessionstore.restore_on_demand", type: "bool" },
+    { id: "browser.link.open_newwindow", type: "int" },
+    { id: "browser.tabs.loadInBackground", type: "bool", inverted: true },
+    { id: "browser.tabs.warnOnClose", type: "bool" },
+    { id: "browser.tabs.warnOnOpen", type: "bool" },
+    { id: "browser.sessionstore.restore_on_demand", type: "bool" },
 #ifdef XP_WIN
-    { id: "browser.taskbar.previews.enable", name: "browser.taskbar.previews.enable", type: "bool" },
+    { id: "browser.taskbar.previews.enable", type: "bool" },
 #endif
-    { id: "browser.ctrlTab.previews", name: "browser.ctrlTab.previews", type: "bool" },
+    { id: "browser.ctrlTab.previews", type: "bool" },
 
     /* Fonts */
-    { id: "font.language.group", name: "font.language.group", type: "wstring" },
+    { id: "font.language.group", type: "wstring" },
 
     /* Languages */
-    { id: "browser.translation.detectLanguage", name: "browser.translation.detectLanguage", type: "bool" },
+    { id: "browser.translation.detectLanguage", type: "bool" },
 
     /* General tab */
 
@@ -108,11 +108,11 @@ window.addEventListener("DOMContentLoaded", function() {
        - when set to true, typing outside text areas and input boxes will
          automatically start searching for what's typed within the current
          document; when set to false, no search action happens */
-    { id: "accessibility.browsewithcaret", name: "accessibility.browsewithcaret", type: "bool" },
-    { id: "accessibility.typeaheadfind", name: "accessibility.typeaheadfind", type: "bool" },
-    { id: "accessibility.blockautorefresh", name: "accessibility.blockautorefresh", type: "bool" },
+    { id: "accessibility.browsewithcaret", type: "bool" },
+    { id: "accessibility.typeaheadfind", type: "bool" },
+    { id: "accessibility.blockautorefresh", type: "bool" },
 #ifdef XP_WIN
-    { id: "ui.osk.enabled", name: "ui.osk.enabled", type: "bool" },
+    { id: "ui.osk.enabled", type: "bool" },
 #endif
 
     /* Browsing
@@ -125,13 +125,13 @@ window.addEventListener("DOMContentLoaded", function() {
      * general.smoothScroll
        - set to true to enable finer page scrolling than line-by-line on page-up,
          page-down, and other such page movements */
-    { id: "general.autoScroll", name: "general.autoScroll", type: "bool" },
-    { id: "general.smoothScroll", name: "general.smoothScroll", type: "bool" },
-    { id: "layout.spellcheckDefault", name: "layout.spellcheckDefault", type: "int" },
-    { id: "toolkit.telemetry.enabled", name: "toolkit.telemetry.enabled", type: "bool" },
-    { id: "browser.preferences.defaultPerformanceSettings.enabled", name: "browser.preferences.defaultPerformanceSettings.enabled", type: "bool" },
-    { id: "dom.ipc.processCount", name: "dom.ipc.processCount", type: "int" },
-    { id: "layers.acceleration.disabled", name: "layers.acceleration.disabled", type: "bool", inverted: true },
+    { id: "general.autoScroll", type: "bool" },
+    { id: "general.smoothScroll", type: "bool" },
+    { id: "layout.spellcheckDefault", type: "int" },
+    { id: "toolkit.telemetry.enabled", type: "bool" },
+    { id: "browser.preferences.defaultPerformanceSettings.enabled", type: "bool" },
+    { id: "dom.ipc.processCount", type: "int" },
+    { id: "layers.acceleration.disabled", type: "bool", inverted: true },
   ]);
 }, { once: true, capture: true });
 
diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index cbe2c8284b64..84fda355499b 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -399,11 +399,10 @@ function Preference({ id, name, type, inverted }) {
   EventEmitter.call(this);
   this.on("change", this.onchange.bind(this));
 
-  this._name = name;
-
+  this.id = id;
+  this._name = name || this.id;
   this.type = type;
   this.inverted = !!inverted;
-  this.id = id;
 
   // if the element has been inserted without the name attribute set,
   // we have nothing to do here
diff --git a/browser/components/preferences/in-content-new/privacy.js b/browser/components/preferences/in-content-new/privacy.js
index fe0a4fc938d6..e63c4b5dfd83 100644
--- a/browser/components/preferences/in-content-new/privacy.js
+++ b/browser/components/preferences/in-content-new/privacy.js
@@ -35,51 +35,51 @@ XPCOMUtils.defineLazyGetter(this, "AlertsServiceDND", function() {
 
 window.addEventListener("DOMContentLoaded", function() {
   Preferences.addAll([
-    { id: "privacy.userContext.enabled", name: "privacy.userContext.enabled", type: "bool" },
+    { id: "privacy.userContext.enabled", type: "bool" },
 
     // Tracking
-    { id: "privacy.trackingprotection.enabled", name: "privacy.trackingprotection.enabled", type: "bool" },
-    { id: "privacy.trackingprotection.pbmode.enabled", name: "privacy.trackingprotection.pbmode.enabled", type: "bool" },
+    { id: "privacy.trackingprotection.enabled", type: "bool" },
+    { id: "privacy.trackingprotection.pbmode.enabled", type: "bool" },
 
     // Button prefs
-    { id: "pref.privacy.disable_button.cookie_exceptions", name: "pref.privacy.disable_button.cookie_exceptions", type: "bool" },
-    { id: "pref.privacy.disable_button.view_cookies", name: "pref.privacy.disable_button.view_cookies", type: "bool" },
-    { id: "pref.privacy.disable_button.change_blocklist", name: "pref.privacy.disable_button.change_blocklist", type: "bool" },
-    { id: "pref.privacy.disable_button.tracking_protection_exceptions", name: "pref.privacy.disable_button.tracking_protection_exceptions", type: "bool" },
+    { id: "pref.privacy.disable_button.cookie_exceptions", type: "bool" },
+    { id: "pref.privacy.disable_button.view_cookies", type: "bool" },
+    { id: "pref.privacy.disable_button.change_blocklist", type: "bool" },
+    { id: "pref.privacy.disable_button.tracking_protection_exceptions", type: "bool" },
 
     // Location Bar
-    { id: "browser.urlbar.autocomplete.enabled", name: "browser.urlbar.autocomplete.enabled", type: "bool" },
-    { id: "browser.urlbar.suggest.bookmark", name: "browser.urlbar.suggest.bookmark", type: "bool" },
-    { id: "browser.urlbar.suggest.history", name: "browser.urlbar.suggest.history", type: "bool" },
-    { id: "browser.urlbar.suggest.openpage", name: "browser.urlbar.suggest.openpage", type: "bool" },
+    { id: "browser.urlbar.autocomplete.enabled", type: "bool" },
+    { id: "browser.urlbar.suggest.bookmark", type: "bool" },
+    { id: "browser.urlbar.suggest.history", type: "bool" },
+    { id: "browser.urlbar.suggest.openpage", type: "bool" },
 
     // History
-    { id: "places.history.enabled", name: "places.history.enabled", type: "bool" },
-    { id: "browser.formfill.enable", name: "browser.formfill.enable", type: "bool" },
-    { id: "privacy.history.custom", name: "privacy.history.custom", type: "bool" },
+    { id: "places.history.enabled", type: "bool" },
+    { id: "browser.formfill.enable", type: "bool" },
+    { id: "privacy.history.custom", type: "bool" },
     // Cookies
-    { id: "network.cookie.cookieBehavior", name: "network.cookie.cookieBehavior", type: "int" },
-    { id: "network.cookie.lifetimePolicy", name: "network.cookie.lifetimePolicy", type: "int" },
-    { id: "network.cookie.blockFutureCookies", name: "network.cookie.blockFutureCookies", type: "bool" },
+    { id: "network.cookie.cookieBehavior", type: "int" },
+    { id: "network.cookie.lifetimePolicy", type: "int" },
+    { id: "network.cookie.blockFutureCookies", type: "bool" },
     // Clear Private Data
-    { id: "privacy.sanitize.sanitizeOnShutdown", name: "privacy.sanitize.sanitizeOnShutdown", type: "bool" },
-    { id: "privacy.sanitize.timeSpan", name: "privacy.sanitize.timeSpan", type: "int" },
+    { id: "privacy.sanitize.sanitizeOnShutdown", type: "bool" },
+    { id: "privacy.sanitize.timeSpan", type: "int" },
     // Private Browsing
-    { id: "browser.privatebrowsing.autostart", name: "browser.privatebrowsing.autostart", type: "bool" },
+    { id: "browser.privatebrowsing.autostart", type: "bool" },
     // Do not track
-    { id: "privacy.donottrackheader.enabled", name: "privacy.donottrackheader.enabled", type: "bool" },
+    { id: "privacy.donottrackheader.enabled", type: "bool" },
 
     // DRM content
-    { id: "media.eme.enabled", name: "media.eme.enabled", type: "bool" },
+    { id: "media.eme.enabled", type: "bool" },
 
     // Popups
-    { id: "dom.disable_open_during_load", name: "dom.disable_open_during_load", type: "bool" },
+    { id: "dom.disable_open_during_load", type: "bool" },
     // Passwords
-    { id: "signon.rememberSignons", name: "signon.rememberSignons", type: "bool" },
+    { id: "signon.rememberSignons", type: "bool" },
 
     // Buttons
-    { id: "pref.privacy.disable_button.view_passwords", name: "pref.privacy.disable_button.view_passwords", type: "bool" },
-    { id: "pref.privacy.disable_button.view_passwords_exceptions", name: "pref.privacy.disable_button.view_passwords_exceptions", type: "bool" },
+    { id: "pref.privacy.disable_button.view_passwords", type: "bool" },
+    { id: "pref.privacy.disable_button.view_passwords_exceptions", type: "bool" },
 
     /* Certificates tab
      * security.default_personal_cert
@@ -90,36 +90,36 @@ window.addEventListener("DOMContentLoaded", function() {
      *                                the certificate to use on a site which
      *                                requests one
      */
-    { id: "security.default_personal_cert", name: "security.default_personal_cert", type: "string" },
+    { id: "security.default_personal_cert", type: "string" },
 
-    { id: "security.disable_button.openCertManager", name: "security.disable_button.openCertManager", type: "bool" },
+    { id: "security.disable_button.openCertManager", type: "bool" },
 
-    { id: "security.disable_button.openDeviceManager", name: "security.disable_button.openDeviceManager", type: "bool" },
+    { id: "security.disable_button.openDeviceManager", type: "bool" },
 
-    { id: "security.OCSP.enabled", name: "security.OCSP.enabled", type: "int" },
+    { id: "security.OCSP.enabled", type: "int" },
 
     // Add-ons, malware, phishing
-    { id: "xpinstall.whitelist.required", name: "xpinstall.whitelist.required", type: "bool" },
+    { id: "xpinstall.whitelist.required", type: "bool" },
 
-    { id: "browser.safebrowsing.malware.enabled", name: "browser.safebrowsing.malware.enabled", type: "bool" },
-    { id: "browser.safebrowsing.phishing.enabled", name: "browser.safebrowsing.phishing.enabled", type: "bool" },
+    { id: "browser.safebrowsing.malware.enabled", type: "bool" },
+    { id: "browser.safebrowsing.phishing.enabled", type: "bool" },
 
-    { id: "browser.safebrowsing.downloads.enabled", name: "browser.safebrowsing.downloads.enabled", type: "bool" },
+    { id: "browser.safebrowsing.downloads.enabled", type: "bool" },
 
-    { id: "urlclassifier.malwareTable", name: "urlclassifier.malwareTable", type: "string" },
+    { id: "urlclassifier.malwareTable", type: "string" },
 
-    { id: "browser.safebrowsing.downloads.remote.block_potentially_unwanted", name: "browser.safebrowsing.downloads.remote.block_potentially_unwanted", type: "bool" },
-    { id: "browser.safebrowsing.downloads.remote.block_uncommon", name: "browser.safebrowsing.downloads.remote.block_uncommon", type: "bool" },
+    { id: "browser.safebrowsing.downloads.remote.block_potentially_unwanted", type: "bool" },
+    { id: "browser.safebrowsing.downloads.remote.block_uncommon", type: "bool" },
 
     // Network tab
-    { id: "browser.cache.disk.capacity", name: "browser.cache.disk.capacity", type: "int" },
-    { id: "browser.offline-apps.notify", name: "browser.offline-apps.notify", type: "bool" },
+    { id: "browser.cache.disk.capacity", type: "int" },
+    { id: "browser.offline-apps.notify", type: "bool" },
 
-    { id: "browser.cache.disk.smart_size.enabled", name: "browser.cache.disk.smart_size.enabled", type: "bool", inverted: "true" },
+    { id: "browser.cache.disk.smart_size.enabled", type: "bool", inverted: "true" },
 
     // Data Choices tab
 #ifdef MOZ_CRASHREPORTER
-    { id: "browser.crashReports.unsubmittedCheck.autoSubmit", name: "browser.crashReports.unsubmittedCheck.autoSubmit", type: "bool" },
+    { id: "browser.crashReports.unsubmittedCheck.autoSubmit", type: "bool" },
 #endif
   ]);
 }, { once: true, capture: true });

From e2c0eb430d3e369d3033791f9814757c49ec5ab1 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 7 Jul 2017 18:12:10 -0700
Subject: [PATCH 064/106] undo spurious change to preferences.xml

---
 toolkit/content/widgets/preferences.xml | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/toolkit/content/widgets/preferences.xml b/toolkit/content/widgets/preferences.xml
index 95d1bfbd3753..229e3327d6ad 100644
--- a/toolkit/content/widgets/preferences.xml
+++ b/toolkit/content/widgets/preferences.xml
@@ -1251,8 +1251,7 @@
         <body>
         <![CDATA[
           delete aElement._deferredValueUpdateTask;
-          let prefID = aElement.getAttribute("preference");
-          let preference = document.getElementById(prefID);
+          let preference = document.getElementById(aElement.getAttribute("preference"));
           let prefVal = preference.getElementValue(aElement);
           preference.value = prefVal;
           this._deferredValueUpdateElements.delete(aElement);

From c118588fb48b1ed4c457fbf5eed2761c8e2382a2 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 7 Jul 2017 18:14:28 -0700
Subject: [PATCH 065/106] explain why we attach Preferences to window object

---
 browser/components/preferences/in-content-new/preferences.js | 1 +
 1 file changed, 1 insertion(+)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 84fda355499b..9a696abee83e 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -344,6 +344,7 @@ function confirmRestartPrompt(aRestartToEnable, aDefaultButtonIndex,
   return buttonIndex;
 }
 
+// We attach this to the window object so tests have access to it.
 window.Preferences = {
   all: {},
 

From 13384cc824e901dbd99956ee6499675a6b68f039 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 7 Jul 2017 18:19:08 -0700
Subject: [PATCH 066/106] remove unneeded global stylesheet reference

---
 browser/components/preferences/in-content-new/preferences.xul | 1 -
 1 file changed, 1 deletion(-)

diff --git a/browser/components/preferences/in-content-new/preferences.xul b/browser/components/preferences/in-content-new/preferences.xul
index 26ba697e42f5..6c81c681d2d3 100644
--- a/browser/components/preferences/in-content-new/preferences.xul
+++ b/browser/components/preferences/in-content-new/preferences.xul
@@ -4,7 +4,6 @@
    - You can obtain one at http://mozilla.org/MPL/2.0/. -->
 
 <?xml-stylesheet href="chrome://global/skin/global.css"?>
-<?xml-stylesheet href="chrome://global/skin/preferences.css"?>
 
 <?xml-stylesheet href="chrome://browser/skin/preferences/preferences.css"?>
 <?xml-stylesheet href="chrome://global/skin/in-content/common.css"?>

From f7b1228e9da107b63bc337b4ac40f3c108448981 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 7 Jul 2017 18:41:11 -0700
Subject: [PATCH 067/106] remove unused private property

---
 browser/components/preferences/in-content-new/privacy.js | 3 ---
 1 file changed, 3 deletions(-)

diff --git a/browser/components/preferences/in-content-new/privacy.js b/browser/components/preferences/in-content-new/privacy.js
index e63c4b5dfd83..74ad9c640b83 100644
--- a/browser/components/preferences/in-content-new/privacy.js
+++ b/browser/components/preferences/in-content-new/privacy.js
@@ -125,8 +125,6 @@ window.addEventListener("DOMContentLoaded", function() {
 }, { once: true, capture: true });
 
 var gPrivacyPane = {
-  _pane: null,
-
   /**
    * Whether the use has selected the auto-start private browsing mode in the UI.
    */
@@ -318,7 +316,6 @@ var gPrivacyPane = {
     setEventListener("clearCacheButton", "command",
                      gPrivacyPane.clearCache);
 
-    this._pane = document.getElementById("panePrivacy");
     this._initMasterPasswordUI();
     this._initSafeBrowsing();
     this.updateCacheSizeInputField();

From 6fc5d68f54d01dc7188cd6650c88b3e0baaff052 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Mon, 10 Jul 2017 10:01:10 -0700
Subject: [PATCH 068/106] register a single listener for all prefs

---
 .../preferences/in-content-new/preferences.js      | 32 ++++++++++------------
 1 file changed, 15 insertions(+), 17 deletions(-)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 9a696abee83e..e3548960ccd0 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -376,9 +376,6 @@ window.Preferences = {
   rootBranch: Components.classes["@mozilla.org/preferences-service;1"]
                         .getService(Components.interfaces.nsIPrefBranch),
 
-  rootBranchInternal: Components.classes["@mozilla.org/preferences-service;1"]
-                                .getService(Components.interfaces.nsIPrefBranchInternal),
-
   defaultBranch: Components.classes["@mozilla.org/preferences-service;1"]
                            .getService(Components.interfaces.nsIPrefService)
                            .getDefaultBranch(""),
@@ -394,8 +391,23 @@ window.Preferences = {
     return this.type == "child" ? doc.instantApply
                                 : doc.instantApply || this.rootBranch.getBoolPref("browser.preferences.instantApply");
   },
+
+  observe(subject, topic, data) {
+    const pref = this.all[data];
+    if (pref) {
+      pref.value = pref.valueFromPreferences;
+    }
+  },
+
+  destructor() {
+    this.rootBranch.removeObserver("", this);
+  },
 };
 
+// TODO: figure out why we get errors when making this a weak observer.
+Preferences.rootBranch.addObserver("", Preferences);
+window.addEventListener("unload", Preferences.destructor.bind(Preferences), { once: true });
+
 function Preference({ id, name, type, inverted }) {
   EventEmitter.call(this);
   this.on("change", this.onchange.bind(this));
@@ -411,10 +423,6 @@ function Preference({ id, name, type, inverted }) {
   if (!this.name)
     return;
 
-  // TODO: figure out why we get errors when making this a weak observer.
-  Preferences.rootBranchInternal.addObserver(this.name, this);
-  window.addEventListener("unload", this.destructor.bind(this), { once: true });
-
   // TODO: remove the code below that only applies in non-instant apply mode,
   // since instantApply is always true in this prefs implementation.
 
@@ -451,9 +459,6 @@ Preference.prototype = Object.create(EventEmitter.prototype);
 
 Object.assign(Preference.prototype, {
   constructor: Preference,
-  destructor() {
-    Preferences.rootBranchInternal.removeObserver(this.name, this);
-  },
 
   _value: null,
   _disabled: false,
@@ -610,11 +615,6 @@ Object.assign(Preference.prototype, {
   onchange() {
     this.updateElements();
   },
-
-  observe(aSubject, aTopic, aData) {
-    this.value = this.valueFromPreferences;
-  },
-
 });
 
 // Assign getters via Object.defineProperties, since Object.assign invokes them
@@ -636,9 +636,7 @@ Object.defineProperties(Preference.prototype, {
       if (val == this.name)
         return val;
 
-      Preferences.rootBranchInternal.removeObserver(this.name, this);
       this._name = val;
-      Preferences.rootBranchInternal.addObserver(val, this);
 
       return val;
     },

From 8c249e3dff8f3ac0b019f31327d7a6b4418cd26f Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Tue, 11 Jul 2017 10:34:45 -0700
Subject: [PATCH 069/106] dump time to load event in about:preferences

---
 browser/components/preferences/in-content-new/preferences.js | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index c2c977b6e4ad..79655a78409d 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -24,6 +24,8 @@ Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource://gre/modules/AppConstants.jsm");
 
+window.addEventListener("load", () => dump(`time to load prefs: ${performance.now()}\n`), { once: true });
+
 var gLastHash = "";
 
 var gCategoryInits = new Map();

From 24c0bb1bea7c933bdf2a91378d3530bc32f50d4a Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Tue, 11 Jul 2017 11:24:36 -0700
Subject: [PATCH 070/106] add a test to measure and report startup time

---
 .../preferences/in-content-new/tests/browser.ini   |  1 +
 .../in-content-new/tests/browser_startup.js        | 32 ++++++++++++++++++++++
 2 files changed, 33 insertions(+)
 create mode 100644 browser/components/preferences/in-content-new/tests/browser_startup.js

diff --git a/browser/components/preferences/in-content-new/tests/browser.ini b/browser/components/preferences/in-content-new/tests/browser.ini
index 421419ed9f71..715d92c6fcfb 100644
--- a/browser/components/preferences/in-content-new/tests/browser.ini
+++ b/browser/components/preferences/in-content-new/tests/browser.ini
@@ -57,6 +57,7 @@ skip-if = e10s
 [browser_siteData.js]
 [browser_siteData2.js]
 [browser_site_login_exceptions.js]
+[browser_startup.js]
 [browser_subdialogs.js]
 support-files =
   subdialog.xul
diff --git a/browser/components/preferences/in-content-new/tests/browser_startup.js b/browser/components/preferences/in-content-new/tests/browser_startup.js
new file mode 100644
index 000000000000..58830532db81
--- /dev/null
+++ b/browser/components/preferences/in-content-new/tests/browser_startup.js
@@ -0,0 +1,32 @@
+/* Any copyright is dedicated to the Public Domain.
+* http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+async function test() {
+  waitForExplicitFinish();
+
+  let totalTime = 0;
+  let initialTime = 0;
+
+  // open_preferences calls its callback function when it receives
+  // the "Initialized" event that is dispatched by the init_all function
+  // in preferences.js.  This test measures the time it takes to call
+  // that callback function relative to the "time origin" of the page
+  // (roughly equivalent to the beginning of navigation).
+
+  for (let i = 0; i < 100; i++) {
+    const win = await new Promise(resolve => open_preferences(resolve));
+    const time = win.performance.now();
+    win.close();
+    totalTime += time;
+    if (i === 0) {
+      initialTime = time;
+    }
+  }
+
+  Assert.ok(true, `Initial time to initialize prefs page: ${initialTime}.`);
+  Assert.ok(true, `Mean time to initialize prefs page: ${totalTime / 100}.`);
+
+  finish();
+}

From 0a57fe7402037e33b23414b419e6a8eeada911b6 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Tue, 11 Jul 2017 13:20:37 -0700
Subject: [PATCH 071/106] move Preferences/Preference impl to toolkit/content/

---
 .../preferences/in-content-new/preferences.js      | 538 +-------------------
 .../preferences/in-content-new/preferences.xul     |   1 +
 toolkit/content/jar.mn                             |   1 +
 toolkit/content/preferences.js                     | 542 +++++++++++++++++++++
 4 files changed, 545 insertions(+), 537 deletions(-)
 create mode 100644 toolkit/content/preferences.js

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index c3b93d5dbc93..0771004d1be4 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -12,6 +12,7 @@
 /* import-globals-from sync.js */
 /* import-globals-from findInPage.js */
 /* import-globals-from ../../../base/content/utilityOverlay.js */
+/* import-globals-from ../../../../toolkit/content/preferences.js */
 
 "use strict";
 
@@ -345,540 +346,3 @@ function confirmRestartPrompt(aRestartToEnable, aDefaultButtonIndex,
   }
   return buttonIndex;
 }
-
-// We attach this to the window object so tests have access to it.
-window.Preferences = {
-  all: {},
-
-  add(prefInfo) {
-    // TODO: throw an exception if a pref with the same ID already exists.
-    const pref = new Preference(prefInfo);
-    Preferences.all[pref.id] = pref;
-    pref.updateElements();
-    return pref;
-  },
-
-  addAll(prefInfos) {
-    for (const prefInfo of prefInfos) {
-      // TODO: throw an exception if a pref with the same ID already exists.
-      const pref = new Preference(prefInfo);
-      this.all[pref.id] = pref;
-      pref.updateElements();
-    }
-  },
-
-  get(id) {
-    return this.all[id] || null;
-  },
-
-  getAll() {
-    return Object.values(this.all);
-  },
-
-  rootBranch: Components.classes["@mozilla.org/preferences-service;1"]
-                        .getService(Components.interfaces.nsIPrefBranch),
-
-  defaultBranch: Components.classes["@mozilla.org/preferences-service;1"]
-                           .getService(Components.interfaces.nsIPrefService)
-                           .getDefaultBranch(""),
-
-  get type() {
-    return document.documentElement.type || "";
-  },
-
-  // TODO: remove this getter and the conditions that depend on it
-  // since instantApply is always true in this prefs implementation.
-  get instantApply() {
-    var doc = document.documentElement;
-    return this.type == "child" ? doc.instantApply
-                                : doc.instantApply || this.rootBranch.getBoolPref("browser.preferences.instantApply");
-  },
-
-  observe(subject, topic, data) {
-    const pref = this.all[data];
-    if (pref) {
-      pref.value = pref.valueFromPreferences;
-    }
-  },
-
-  destructor() {
-    this.rootBranch.removeObserver("", this);
-  },
-};
-
-// TODO: figure out why we get errors when making this a weak observer.
-Preferences.rootBranch.addObserver("", Preferences);
-window.addEventListener("unload", Preferences.destructor.bind(Preferences), { once: true });
-
-function Preference({ id, name, type, inverted }) {
-  EventEmitter.call(this);
-  this.on("change", this.onchange.bind(this));
-
-  this.id = id;
-  this._name = name || this.id;
-  this.type = type;
-  this.inverted = !!inverted;
-
-  // if the element has been inserted without the name attribute set,
-  // we have nothing to do here
-  // TODO: throw an exception in this case, which seems, erm, exceptional.
-  if (!this.name)
-    return;
-
-  // TODO: remove the code below that only applies in non-instant apply mode,
-  // since instantApply is always true in this prefs implementation.
-
-  // In non-instant apply mode, we must try and use the last saved state
-  // from any previous opens of a child dialog instead of the value from
-  // preferences, to pick up any edits a user may have made.
-
-  var secMan = Components.classes["@mozilla.org/scriptsecuritymanager;1"]
-              .getService(Components.interfaces.nsIScriptSecurityManager);
-  if (Preferences.type == "child" &&
-      !this.instantApply && window.opener &&
-      secMan.isSystemPrincipal(window.opener.document.nodePrincipal)) {
-    var pdoc = window.opener.document;
-
-    // Try to find a preference element for the same preference.
-    var preference = null;
-    var parentPreferences = pdoc.getElementsByTagName("preferences");
-    for (var k = 0; (k < parentPreferences.length && !preference); ++k) {
-      var parentPrefs = parentPreferences[k]
-                              .getElementsByAttribute("name", this.name);
-      for (var l = 0; (l < parentPrefs.length && !preference); ++l) {
-        if (parentPrefs[l].localName == "preference")
-          preference = parentPrefs[l];
-      }
-    }
-
-    // Don't use the value setter here, we don't want updateElements to be prematurely fired.
-    this._value = preference ? preference.value : this.valueFromPreferences;
-  } else
-    this._value = this.valueFromPreferences;
-}
-
-Preference.prototype = Object.create(EventEmitter.prototype);
-
-Object.assign(Preference.prototype, {
-  constructor: Preference,
-
-  _value: null,
-  _disabled: false,
-
-  id: "",
-  readonly: false,
-  type: "",
-  inverted: false,
-
-  reset() {
-    // defer reset until preference update
-    this.value = undefined;
-  },
-
-  _useDefault: false,
-
-  // TODO: remove this, since it never gets changed.
-  batching: false,
-
-  _reportUnknownType() {
-    // TODO: instead of reporting an unknown type, throw an exception
-    // if a Preference object is instantiated with an unknown type.
-    var consoleService = Components.classes["@mozilla.org/consoleservice;1"]
-                                   .getService(Components.interfaces.nsIConsoleService);
-    var msg = "Preference with id='" + this.id + "' and name='" +
-              this.name + "' has unknown type '" + this.type + "'.";
-    consoleService.logStringMessage(msg);
-  },
-
-  setElementValue(aElement) {
-    if (this.locked)
-      aElement.disabled = true;
-
-    if (!this.isElementEditable(aElement))
-      return;
-
-    var rv = undefined;
-    if (aElement.hasAttribute("onsyncfrompreference")) {
-      // Value changed, synthesize an event
-      try {
-        var event = document.createEvent("Events");
-        event.initEvent("syncfrompreference", true, true);
-        var f = new Function("event",
-                             aElement.getAttribute("onsyncfrompreference"));
-        rv = f.call(aElement, event);
-      } catch (e) {
-        Components.utils.reportError(e);
-      }
-    }
-    var val = rv;
-    if (val === undefined)
-      val = this.instantApply ? this.valueFromPreferences : this.value;
-    // if the preference is marked for reset, show default value in UI
-    if (val === undefined)
-      val = this.defaultValue;
-
-    /**
-     * Initialize a UI element property with a value. Handles the case
-     * where an element has not yet had a XBL binding attached for it and
-     * the property setter does not yet exist by setting the same attribute
-     * on the XUL element using DOM apis and assuming the element's
-     * constructor or property getters appropriately handle this state.
-     */
-    function setValue(element, attribute, value) {
-      if (attribute in element)
-        element[attribute] = value;
-      else
-        element.setAttribute(attribute, value);
-    }
-    if (aElement.localName == "checkbox" ||
-        aElement.localName == "listitem")
-      setValue(aElement, "checked", val);
-    else if (aElement.localName == "colorpicker")
-      setValue(aElement, "color", val);
-    else if (aElement.localName == "textbox") {
-      // XXXmano Bug 303998: Avoid a caret placement issue if either the
-      // preference observer or its setter calls updateElements as a result
-      // of the input event handler.
-      if (aElement.value !== val)
-        setValue(aElement, "value", val);
-    } else
-      setValue(aElement, "value", val);
-  },
-
-  getElementValue(aElement) {
-    if (aElement.hasAttribute("onsynctopreference")) {
-      // Value changed, synthesize an event
-      try {
-        var event = document.createEvent("Events");
-        event.initEvent("synctopreference", true, true);
-        var f = new Function("event",
-                             aElement.getAttribute("onsynctopreference"));
-        var rv = f.call(aElement, event);
-        if (rv !== undefined)
-          return rv;
-      } catch (e) {
-        Components.utils.reportError(e);
-      }
-    }
-
-    /**
-     * Read the value of an attribute from an element, assuming the
-     * attribute is a property on the element's node API. If the property
-     * is not present in the API, then assume its value is contained in
-     * an attribute, as is the case before a binding has been attached.
-     */
-    function getValue(element, attribute) {
-      if (attribute in element)
-        return element[attribute];
-      return element.getAttribute(attribute);
-    }
-    if (aElement.localName == "checkbox" ||
-        aElement.localName == "listitem")
-      var value = getValue(aElement, "checked");
-    else if (aElement.localName == "colorpicker")
-      value = getValue(aElement, "color");
-    else
-      value = getValue(aElement, "value");
-
-    switch (this.type) {
-    case "int":
-      return parseInt(value, 10) || 0;
-    case "bool":
-      return typeof(value) == "boolean" ? value : value == "true";
-    }
-    return value;
-  },
-
-  isElementEditable(aElement) {
-    switch (aElement.localName) {
-    case "checkbox":
-    case "colorpicker":
-    case "radiogroup":
-    case "textbox":
-    case "listitem":
-    case "listbox":
-    case "menulist":
-      return true;
-    }
-    return aElement.getAttribute("preference-editable") == "true";
-  },
-
-  updateElements() {
-    if (!this.id)
-      return;
-
-    // This "change" event handler tracks changes made to preferences by
-    // sources other than the user in this window.
-    var elements = document.getElementsByAttribute("preference", this.id);
-    for (var i = 0; i < elements.length; ++i)
-      this.setElementValue(elements[i]);
-  },
-
-  onchange() {
-    this.updateElements();
-  },
-});
-
-// Assign getters via Object.defineProperties, since Object.assign invokes them
-// and assigns their return values rather than assigning the getters themselves.
-Object.defineProperties(Preference.prototype, {
-  // TODO: remove this getter and the conditions that depend on it
-  // since instantApply is always true in this prefs implementation.
-  instantApply: {
-    get: function() {
-      return Preferences.instantApply;
-    },
-  },
-
-  name: {
-    get: function() {
-      return this._name;
-    },
-    set: function (val) {
-      if (val == this.name)
-        return val;
-
-      this._name = val;
-
-      return val;
-    },
-  },
-
-  value: {
-    get: function() {
-      return this._value;
-    },
-    set: function (val) {
-      if (this.value !== val) {
-        this._value = val;
-        if (this.instantApply)
-          this.valueFromPreferences = val;
-        this.emit("change");
-      }
-      return val;
-    },
-  },
-
-  locked: {
-    get: function() {
-      return Preferences.rootBranch.prefIsLocked(this.name);
-    },
-  },
-
-  disabled: {
-    get: function() {
-      return this._disabled;
-    },
-    set: function (val) {
-      this._disabled = !!val;
-
-      if (!this.id)
-        return val;
-
-      var elements = document.getElementsByAttribute("preference", this.id);
-      for (var i = 0; i < elements.length; ++i) {
-        elements[i].disabled = val;
-
-        var labels = document.getElementsByAttribute("control", elements[i].id);
-        for (var j = 0; j < labels.length; ++j)
-          labels[j].disabled = val;
-      }
-
-      return val;
-    },
-  },
-
-  defaultValue: {
-    get: function() {
-      this._useDefault = true;
-      var val = this.valueFromPreferences;
-      this._useDefault = false;
-      return val;
-    },
-  },
-
-  _branch: {
-    get: function() {
-      return this._useDefault ? Preferences.defaultBranch : Preferences.rootBranch;
-    },
-  },
-
-  valueFromPreferences: {
-    get: function() {
-      try {
-        // Force a resync of value with preferences.
-        switch (this.type) {
-        case "int":
-          return this._branch.getIntPref(this.name);
-        case "bool":
-          var val = this._branch.getBoolPref(this.name);
-          return this.inverted ? !val : val;
-        case "wstring":
-          return this._branch
-                     .getComplexValue(this.name, Components.interfaces.nsIPrefLocalizedString)
-                     .data;
-        case "string":
-        case "unichar":
-          return this._branch.getStringPref(this.name);
-        case "fontname":
-          var family = this._branch.getStringPref(this.name);
-          var fontEnumerator = Components.classes["@mozilla.org/gfx/fontenumerator;1"]
-                                         .createInstance(Components.interfaces.nsIFontEnumerator);
-          return fontEnumerator.getStandardFamilyName(family);
-        case "file":
-          var f = this._branch
-                      .getComplexValue(this.name, Components.interfaces.nsILocalFile);
-          return f;
-        default:
-          this._reportUnknownType();
-        }
-      } catch (e) { }
-      return null;
-    },
-
-    set: function (val) {
-      // Exit early if nothing to do.
-      if (this.readonly || this.valueFromPreferences == val)
-        return val;
-
-      // The special value undefined means 'reset preference to default'.
-      if (val === undefined) {
-        Preferences.rootBranch.clearUserPref(this.name);
-        return val;
-      }
-
-      // Force a resync of preferences with value.
-      switch (this.type) {
-      case "int":
-        Preferences.rootBranch.setIntPref(this.name, val);
-        break;
-      case "bool":
-        Preferences.rootBranch.setBoolPref(this.name, this.inverted ? !val : val);
-        break;
-      case "wstring":
-        var pls = Components.classes["@mozilla.org/pref-localizedstring;1"]
-                            .createInstance(Components.interfaces.nsIPrefLocalizedString);
-        pls.data = val;
-        Preferences.rootBranch
-            .setComplexValue(this.name, Components.interfaces.nsIPrefLocalizedString, pls);
-        break;
-      case "string":
-      case "unichar":
-      case "fontname":
-        Preferences.rootBranch.setStringPref(this.name, val);
-        break;
-      case "file":
-        var lf;
-        if (typeof(val) == "string") {
-          lf = Components.classes["@mozilla.org/file/local;1"]
-                         .createInstance(Components.interfaces.nsILocalFile);
-          lf.persistentDescriptor = val;
-          if (!lf.exists())
-            lf.initWithPath(val);
-        } else
-          lf = val.QueryInterface(Components.interfaces.nsILocalFile);
-        Preferences.rootBranch
-            .setComplexValue(this.name, Components.interfaces.nsILocalFile, lf);
-        break;
-      default:
-        this._reportUnknownType();
-      }
-      if (!this.batching) {
-        var psvc = Components.classes["@mozilla.org/preferences-service;1"]
-                             .getService(Components.interfaces.nsIPrefService);
-        psvc.savePrefFile(null);
-      }
-      return val;
-    },
-  },
-
-});
-
-const MainPrefPane = {
-  getPreferenceElement(aStartElement) {
-    var temp = aStartElement;
-    while (temp && temp.nodeType == Node.ELEMENT_NODE &&
-           !temp.hasAttribute("preference"))
-      temp = temp.parentNode;
-    return temp && temp.nodeType == Node.ELEMENT_NODE ?
-           temp : aStartElement;
-  },
-
-  get DeferredTask() {
-    let module = {};
-    Components.utils.import("resource://gre/modules/DeferredTask.jsm", module);
-    Object.defineProperty(this, "DeferredTask", {
-      configurable: true,
-      enumerable: true,
-      writable: true,
-      value: module.DeferredTask
-    });
-    return module.DeferredTask;
-  },
-
-  _deferredValueUpdate(aElement) {
-    delete aElement._deferredValueUpdateTask;
-    let prefID = aElement.getAttribute("preference");
-    let preference = window.Preferences.get(prefID);
-    let prefVal = preference.getElementValue(aElement);
-    preference.value = prefVal;
-    this._deferredValueUpdateElements.delete(aElement);
-  },
-
-  _deferredValueUpdateElements: new Set(),
-
-  _finalizeDeferredElements() {
-    for (let el of this._deferredValueUpdateElements) {
-      if (el._deferredValueUpdateTask) {
-        el._deferredValueUpdateTask.finalize();
-      }
-    }
-  },
-
-  userChangedValue(aElement) {
-    let element = this.getPreferenceElement(aElement);
-    if (element.hasAttribute("preference")) {
-      if (element.getAttribute("delayprefsave") != "true") {
-        var preference = Preferences.get(element.getAttribute("preference"));
-        var prefVal = preference.getElementValue(element);
-        preference.value = prefVal;
-      } else {
-        if (!element._deferredValueUpdateTask) {
-          element._deferredValueUpdateTask = new this.DeferredTask(this._deferredValueUpdate.bind(this, element), 1000);
-          this._deferredValueUpdateElements.add(element);
-        } else {
-          // Each time the preference is changed, restart the delay.
-          element._deferredValueUpdateTask.disarm();
-        }
-        element._deferredValueUpdateTask.arm();
-      }
-    }
-  },
-
-  onCommand(event) {
-    // This "command" event handler tracks changes made to preferences by
-    // the user in this window.
-    if (event.sourceEvent)
-      event = event.sourceEvent;
-    this.userChangedValue(event.target);
-  },
-
-  onSelect(event) {
-    // This "select" event handler tracks changes made to colorpicker
-    // preferences by the user in this window.
-    if (event.target.localName == "colorpicker")
-      this.userChangedValue(event.target);
-  },
-
-  onChange(event) {
-    // This "change" event handler tracks changes made to preferences by
-    // the user in this window.
-    this.userChangedValue(event.target);
-  },
-
-  onInput(event) {
-    // This "input" event handler tracks changes made to preferences by
-    // the user in this window.
-    this.userChangedValue(event.target);
-  },
-};
diff --git a/browser/components/preferences/in-content-new/preferences.xul b/browser/components/preferences/in-content-new/preferences.xul
index 6c81c681d2d3..fe93a78c91e1 100644
--- a/browser/components/preferences/in-content-new/preferences.xul
+++ b/browser/components/preferences/in-content-new/preferences.xul
@@ -101,6 +101,7 @@
           src="chrome://browser/content/utilityOverlay.js"/>
   <script type="application/javascript"
           src="chrome://browser/content/preferences/in-content-new/preferences.js"/>
+  <script src="chrome://global/content/preferences.js"/>
   <script src="chrome://browser/content/preferences/in-content-new/findInPage.js"/>
   <script src="chrome://browser/content/preferences/in-content-new/subdialogs.js"/>
 
diff --git a/toolkit/content/jar.mn b/toolkit/content/jar.mn
index d724bd084d9a..c08105cf8911 100644
--- a/toolkit/content/jar.mn
+++ b/toolkit/content/jar.mn
@@ -58,6 +58,7 @@ toolkit.jar:
    content/global/filepicker.properties
    content/global/globalOverlay.js
    content/global/mozilla.xhtml
+   content/global/preferences.js
    content/global/process-content.js
    content/global/resetProfile.css
    content/global/resetProfile.js
diff --git a/toolkit/content/preferences.js b/toolkit/content/preferences.js
new file mode 100644
index 000000000000..3a6f8a5c89f0
--- /dev/null
+++ b/toolkit/content/preferences.js
@@ -0,0 +1,542 @@
+/* - This Source Code Form is subject to the terms of the Mozilla Public
+   - License, v. 2.0. If a copy of the MPL was not distributed with this file,
+   - You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+// We attach this to the window object so tests have access to it.
+window.Preferences = {
+  all: {},
+
+  add(prefInfo) {
+    // TODO: throw an exception if a pref with the same ID already exists.
+    const pref = new Preference(prefInfo);
+    Preferences.all[pref.id] = pref;
+    pref.updateElements();
+    return pref;
+  },
+
+  addAll(prefInfos) {
+    for (const prefInfo of prefInfos) {
+      // TODO: throw an exception if a pref with the same ID already exists.
+      const pref = new Preference(prefInfo);
+      this.all[pref.id] = pref;
+      pref.updateElements();
+    }
+  },
+
+  get(id) {
+    return this.all[id] || null;
+  },
+
+  getAll() {
+    return Object.values(this.all);
+  },
+
+  rootBranch: Components.classes["@mozilla.org/preferences-service;1"]
+                        .getService(Components.interfaces.nsIPrefBranch),
+
+  defaultBranch: Components.classes["@mozilla.org/preferences-service;1"]
+                           .getService(Components.interfaces.nsIPrefService)
+                           .getDefaultBranch(""),
+
+  get type() {
+    return document.documentElement.type || "";
+  },
+
+  // TODO: remove this getter and the conditions that depend on it
+  // since instantApply is always true in this prefs implementation.
+  get instantApply() {
+    var doc = document.documentElement;
+    return this.type == "child" ? doc.instantApply
+                                : doc.instantApply || this.rootBranch.getBoolPref("browser.preferences.instantApply");
+  },
+
+  observe(subject, topic, data) {
+    const pref = this.all[data];
+    if (pref) {
+      pref.value = pref.valueFromPreferences;
+    }
+  },
+
+  destructor() {
+    this.rootBranch.removeObserver("", this);
+  },
+};
+
+// TODO: figure out why we get errors when making this a weak observer.
+Preferences.rootBranch.addObserver("", Preferences);
+window.addEventListener("unload", Preferences.destructor.bind(Preferences), { once: true });
+
+function Preference({ id, name, type, inverted }) {
+  EventEmitter.call(this);
+  this.on("change", this.onchange.bind(this));
+
+  this.id = id;
+  this._name = name || this.id;
+  this.type = type;
+  this.inverted = !!inverted;
+
+  // if the element has been inserted without the name attribute set,
+  // we have nothing to do here
+  // TODO: throw an exception in this case, which seems, erm, exceptional.
+  if (!this.name)
+    return;
+
+  // TODO: remove the code below that only applies in non-instant apply mode,
+  // since instantApply is always true in this prefs implementation.
+
+  // In non-instant apply mode, we must try and use the last saved state
+  // from any previous opens of a child dialog instead of the value from
+  // preferences, to pick up any edits a user may have made.
+
+  var secMan = Components.classes["@mozilla.org/scriptsecuritymanager;1"]
+              .getService(Components.interfaces.nsIScriptSecurityManager);
+  if (Preferences.type == "child" &&
+      !this.instantApply && window.opener &&
+      secMan.isSystemPrincipal(window.opener.document.nodePrincipal)) {
+    var pdoc = window.opener.document;
+
+    // Try to find a preference element for the same preference.
+    var preference = null;
+    var parentPreferences = pdoc.getElementsByTagName("preferences");
+    for (var k = 0; (k < parentPreferences.length && !preference); ++k) {
+      var parentPrefs = parentPreferences[k]
+                              .getElementsByAttribute("name", this.name);
+      for (var l = 0; (l < parentPrefs.length && !preference); ++l) {
+        if (parentPrefs[l].localName == "preference")
+          preference = parentPrefs[l];
+      }
+    }
+
+    // Don't use the value setter here, we don't want updateElements to be prematurely fired.
+    this._value = preference ? preference.value : this.valueFromPreferences;
+  } else
+    this._value = this.valueFromPreferences;
+}
+
+Preference.prototype = Object.create(EventEmitter.prototype);
+
+Object.assign(Preference.prototype, {
+  constructor: Preference,
+
+  _value: null,
+  _disabled: false,
+
+  id: "",
+  readonly: false,
+  type: "",
+  inverted: false,
+
+  reset() {
+    // defer reset until preference update
+    this.value = undefined;
+  },
+
+  _useDefault: false,
+
+  // TODO: remove this, since it never gets changed.
+  batching: false,
+
+  _reportUnknownType() {
+    // TODO: instead of reporting an unknown type, throw an exception
+    // if a Preference object is instantiated with an unknown type.
+    var consoleService = Components.classes["@mozilla.org/consoleservice;1"]
+                                   .getService(Components.interfaces.nsIConsoleService);
+    var msg = "Preference with id='" + this.id + "' and name='" +
+              this.name + "' has unknown type '" + this.type + "'.";
+    consoleService.logStringMessage(msg);
+  },
+
+  setElementValue(aElement) {
+    if (this.locked)
+      aElement.disabled = true;
+
+    if (!this.isElementEditable(aElement))
+      return;
+
+    var rv = undefined;
+    if (aElement.hasAttribute("onsyncfrompreference")) {
+      // Value changed, synthesize an event
+      try {
+        var event = document.createEvent("Events");
+        event.initEvent("syncfrompreference", true, true);
+        var f = new Function("event",
+                             aElement.getAttribute("onsyncfrompreference"));
+        rv = f.call(aElement, event);
+      } catch (e) {
+        Components.utils.reportError(e);
+      }
+    }
+    var val = rv;
+    if (val === undefined)
+      val = this.instantApply ? this.valueFromPreferences : this.value;
+    // if the preference is marked for reset, show default value in UI
+    if (val === undefined)
+      val = this.defaultValue;
+
+    /**
+     * Initialize a UI element property with a value. Handles the case
+     * where an element has not yet had a XBL binding attached for it and
+     * the property setter does not yet exist by setting the same attribute
+     * on the XUL element using DOM apis and assuming the element's
+     * constructor or property getters appropriately handle this state.
+     */
+    function setValue(element, attribute, value) {
+      if (attribute in element)
+        element[attribute] = value;
+      else
+        element.setAttribute(attribute, value);
+    }
+    if (aElement.localName == "checkbox" ||
+        aElement.localName == "listitem")
+      setValue(aElement, "checked", val);
+    else if (aElement.localName == "colorpicker")
+      setValue(aElement, "color", val);
+    else if (aElement.localName == "textbox") {
+      // XXXmano Bug 303998: Avoid a caret placement issue if either the
+      // preference observer or its setter calls updateElements as a result
+      // of the input event handler.
+      if (aElement.value !== val)
+        setValue(aElement, "value", val);
+    } else
+      setValue(aElement, "value", val);
+  },
+
+  getElementValue(aElement) {
+    if (aElement.hasAttribute("onsynctopreference")) {
+      // Value changed, synthesize an event
+      try {
+        var event = document.createEvent("Events");
+        event.initEvent("synctopreference", true, true);
+        var f = new Function("event",
+                             aElement.getAttribute("onsynctopreference"));
+        var rv = f.call(aElement, event);
+        if (rv !== undefined)
+          return rv;
+      } catch (e) {
+        Components.utils.reportError(e);
+      }
+    }
+
+    /**
+     * Read the value of an attribute from an element, assuming the
+     * attribute is a property on the element's node API. If the property
+     * is not present in the API, then assume its value is contained in
+     * an attribute, as is the case before a binding has been attached.
+     */
+    function getValue(element, attribute) {
+      if (attribute in element)
+        return element[attribute];
+      return element.getAttribute(attribute);
+    }
+    if (aElement.localName == "checkbox" ||
+        aElement.localName == "listitem")
+      var value = getValue(aElement, "checked");
+    else if (aElement.localName == "colorpicker")
+      value = getValue(aElement, "color");
+    else
+      value = getValue(aElement, "value");
+
+    switch (this.type) {
+    case "int":
+      return parseInt(value, 10) || 0;
+    case "bool":
+      return typeof(value) == "boolean" ? value : value == "true";
+    }
+    return value;
+  },
+
+  isElementEditable(aElement) {
+    switch (aElement.localName) {
+    case "checkbox":
+    case "colorpicker":
+    case "radiogroup":
+    case "textbox":
+    case "listitem":
+    case "listbox":
+    case "menulist":
+      return true;
+    }
+    return aElement.getAttribute("preference-editable") == "true";
+  },
+
+  updateElements() {
+    if (!this.id)
+      return;
+
+    // This "change" event handler tracks changes made to preferences by
+    // sources other than the user in this window.
+    var elements = document.getElementsByAttribute("preference", this.id);
+    for (var i = 0; i < elements.length; ++i)
+      this.setElementValue(elements[i]);
+  },
+
+  onchange() {
+    this.updateElements();
+  },
+});
+
+// Assign getters via Object.defineProperties, since Object.assign invokes them
+// and assigns their return values rather than assigning the getters themselves.
+Object.defineProperties(Preference.prototype, {
+  // TODO: remove this getter and the conditions that depend on it
+  // since instantApply is always true in this prefs implementation.
+  instantApply: {
+    get: function() {
+      return Preferences.instantApply;
+    },
+  },
+
+  name: {
+    get: function() {
+      return this._name;
+    },
+    set: function (val) {
+      if (val == this.name)
+        return val;
+
+      this._name = val;
+
+      return val;
+    },
+  },
+
+  value: {
+    get: function() {
+      return this._value;
+    },
+    set: function (val) {
+      if (this.value !== val) {
+        this._value = val;
+        if (this.instantApply)
+          this.valueFromPreferences = val;
+        this.emit("change");
+      }
+      return val;
+    },
+  },
+
+  locked: {
+    get: function() {
+      return Preferences.rootBranch.prefIsLocked(this.name);
+    },
+  },
+
+  disabled: {
+    get: function() {
+      return this._disabled;
+    },
+    set: function (val) {
+      this._disabled = !!val;
+
+      if (!this.id)
+        return val;
+
+      var elements = document.getElementsByAttribute("preference", this.id);
+      for (var i = 0; i < elements.length; ++i) {
+        elements[i].disabled = val;
+
+        var labels = document.getElementsByAttribute("control", elements[i].id);
+        for (var j = 0; j < labels.length; ++j)
+          labels[j].disabled = val;
+      }
+
+      return val;
+    },
+  },
+
+  defaultValue: {
+    get: function() {
+      this._useDefault = true;
+      var val = this.valueFromPreferences;
+      this._useDefault = false;
+      return val;
+    },
+  },
+
+  _branch: {
+    get: function() {
+      return this._useDefault ? Preferences.defaultBranch : Preferences.rootBranch;
+    },
+  },
+
+  valueFromPreferences: {
+    get: function() {
+      try {
+        // Force a resync of value with preferences.
+        switch (this.type) {
+        case "int":
+          return this._branch.getIntPref(this.name);
+        case "bool":
+          var val = this._branch.getBoolPref(this.name);
+          return this.inverted ? !val : val;
+        case "wstring":
+          return this._branch
+                     .getComplexValue(this.name, Components.interfaces.nsIPrefLocalizedString)
+                     .data;
+        case "string":
+        case "unichar":
+          return this._branch.getStringPref(this.name);
+        case "fontname":
+          var family = this._branch.getStringPref(this.name);
+          var fontEnumerator = Components.classes["@mozilla.org/gfx/fontenumerator;1"]
+                                         .createInstance(Components.interfaces.nsIFontEnumerator);
+          return fontEnumerator.getStandardFamilyName(family);
+        case "file":
+          var f = this._branch
+                      .getComplexValue(this.name, Components.interfaces.nsILocalFile);
+          return f;
+        default:
+          this._reportUnknownType();
+        }
+      } catch (e) { }
+      return null;
+    },
+
+    set: function (val) {
+      // Exit early if nothing to do.
+      if (this.readonly || this.valueFromPreferences == val)
+        return val;
+
+      // The special value undefined means 'reset preference to default'.
+      if (val === undefined) {
+        Preferences.rootBranch.clearUserPref(this.name);
+        return val;
+      }
+
+      // Force a resync of preferences with value.
+      switch (this.type) {
+      case "int":
+        Preferences.rootBranch.setIntPref(this.name, val);
+        break;
+      case "bool":
+        Preferences.rootBranch.setBoolPref(this.name, this.inverted ? !val : val);
+        break;
+      case "wstring":
+        var pls = Components.classes["@mozilla.org/pref-localizedstring;1"]
+                            .createInstance(Components.interfaces.nsIPrefLocalizedString);
+        pls.data = val;
+        Preferences.rootBranch
+            .setComplexValue(this.name, Components.interfaces.nsIPrefLocalizedString, pls);
+        break;
+      case "string":
+      case "unichar":
+      case "fontname":
+        Preferences.rootBranch.setStringPref(this.name, val);
+        break;
+      case "file":
+        var lf;
+        if (typeof(val) == "string") {
+          lf = Components.classes["@mozilla.org/file/local;1"]
+                         .createInstance(Components.interfaces.nsILocalFile);
+          lf.persistentDescriptor = val;
+          if (!lf.exists())
+            lf.initWithPath(val);
+        } else
+          lf = val.QueryInterface(Components.interfaces.nsILocalFile);
+        Preferences.rootBranch
+            .setComplexValue(this.name, Components.interfaces.nsILocalFile, lf);
+        break;
+      default:
+        this._reportUnknownType();
+      }
+      if (!this.batching) {
+        var psvc = Components.classes["@mozilla.org/preferences-service;1"]
+                             .getService(Components.interfaces.nsIPrefService);
+        psvc.savePrefFile(null);
+      }
+      return val;
+    },
+  },
+
+});
+
+const MainPrefPane = {
+  getPreferenceElement(aStartElement) {
+    var temp = aStartElement;
+    while (temp && temp.nodeType == Node.ELEMENT_NODE &&
+           !temp.hasAttribute("preference"))
+      temp = temp.parentNode;
+    return temp && temp.nodeType == Node.ELEMENT_NODE ?
+           temp : aStartElement;
+  },
+
+  get DeferredTask() {
+    let module = {};
+    Components.utils.import("resource://gre/modules/DeferredTask.jsm", module);
+    Object.defineProperty(this, "DeferredTask", {
+      configurable: true,
+      enumerable: true,
+      writable: true,
+      value: module.DeferredTask
+    });
+    return module.DeferredTask;
+  },
+
+  _deferredValueUpdate(aElement) {
+    delete aElement._deferredValueUpdateTask;
+    let prefID = aElement.getAttribute("preference");
+    let preference = window.Preferences.get(prefID);
+    let prefVal = preference.getElementValue(aElement);
+    preference.value = prefVal;
+    this._deferredValueUpdateElements.delete(aElement);
+  },
+
+  _deferredValueUpdateElements: new Set(),
+
+  _finalizeDeferredElements() {
+    for (let el of this._deferredValueUpdateElements) {
+      if (el._deferredValueUpdateTask) {
+        el._deferredValueUpdateTask.finalize();
+      }
+    }
+  },
+
+  userChangedValue(aElement) {
+    let element = this.getPreferenceElement(aElement);
+    if (element.hasAttribute("preference")) {
+      if (element.getAttribute("delayprefsave") != "true") {
+        var preference = Preferences.get(element.getAttribute("preference"));
+        var prefVal = preference.getElementValue(element);
+        preference.value = prefVal;
+      } else {
+        if (!element._deferredValueUpdateTask) {
+          element._deferredValueUpdateTask = new this.DeferredTask(this._deferredValueUpdate.bind(this, element), 1000);
+          this._deferredValueUpdateElements.add(element);
+        } else {
+          // Each time the preference is changed, restart the delay.
+          element._deferredValueUpdateTask.disarm();
+        }
+        element._deferredValueUpdateTask.arm();
+      }
+    }
+  },
+
+  onCommand(event) {
+    // This "command" event handler tracks changes made to preferences by
+    // the user in this window.
+    if (event.sourceEvent)
+      event = event.sourceEvent;
+    this.userChangedValue(event.target);
+  },
+
+  onSelect(event) {
+    // This "select" event handler tracks changes made to colorpicker
+    // preferences by the user in this window.
+    if (event.target.localName == "colorpicker")
+      this.userChangedValue(event.target);
+  },
+
+  onChange(event) {
+    // This "change" event handler tracks changes made to preferences by
+    // the user in this window.
+    this.userChangedValue(event.target);
+  },
+
+  onInput(event) {
+    // This "input" event handler tracks changes made to preferences by
+    // the user in this window.
+    this.userChangedValue(event.target);
+  },
+};

From 08368f6b188da5762b1dc9df463be9bde764a671 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Tue, 11 Jul 2017 13:54:30 -0700
Subject: [PATCH 072/106] convert Preference to class

---
 toolkit/content/preferences.js | 401 +++++++++++++++++++----------------------
 1 file changed, 185 insertions(+), 216 deletions(-)

diff --git a/toolkit/content/preferences.js b/toolkit/content/preferences.js
index 3a6f8a5c89f0..32538850bb28 100644
--- a/toolkit/content/preferences.js
+++ b/toolkit/content/preferences.js
@@ -68,75 +68,65 @@ window.Preferences = {
 Preferences.rootBranch.addObserver("", Preferences);
 window.addEventListener("unload", Preferences.destructor.bind(Preferences), { once: true });
 
-function Preference({ id, name, type, inverted }) {
-  EventEmitter.call(this);
-  this.on("change", this.onchange.bind(this));
-
-  this.id = id;
-  this._name = name || this.id;
-  this.type = type;
-  this.inverted = !!inverted;
-
-  // if the element has been inserted without the name attribute set,
-  // we have nothing to do here
-  // TODO: throw an exception in this case, which seems, erm, exceptional.
-  if (!this.name)
-    return;
-
-  // TODO: remove the code below that only applies in non-instant apply mode,
-  // since instantApply is always true in this prefs implementation.
+class Preference extends EventEmitter {
+  constructor({ id, name, type, inverted }) {
+    super();
+    this.on("change", this.onchange.bind(this));
+
+    this._value = null;
+    this._disabled = false;
+    this.readonly = false;
+    this._useDefault = false;
+    // TODO = remove this, since it never gets changed.
+    this.batching = false;
+
+    this.id = id;
+    this._name = name || this.id;
+    this.type = type;
+    this.inverted = !!inverted;
+
+    // if the element has been inserted without the name attribute set,
+    // we have nothing to do here
+    // TODO: throw an exception in this case, which seems, erm, exceptional.
+    if (!this.name)
+      return;
 
-  // In non-instant apply mode, we must try and use the last saved state
-  // from any previous opens of a child dialog instead of the value from
-  // preferences, to pick up any edits a user may have made.
-
-  var secMan = Components.classes["@mozilla.org/scriptsecuritymanager;1"]
-              .getService(Components.interfaces.nsIScriptSecurityManager);
-  if (Preferences.type == "child" &&
-      !this.instantApply && window.opener &&
-      secMan.isSystemPrincipal(window.opener.document.nodePrincipal)) {
-    var pdoc = window.opener.document;
-
-    // Try to find a preference element for the same preference.
-    var preference = null;
-    var parentPreferences = pdoc.getElementsByTagName("preferences");
-    for (var k = 0; (k < parentPreferences.length && !preference); ++k) {
-      var parentPrefs = parentPreferences[k]
-                              .getElementsByAttribute("name", this.name);
-      for (var l = 0; (l < parentPrefs.length && !preference); ++l) {
-        if (parentPrefs[l].localName == "preference")
-          preference = parentPrefs[l];
+    // TODO: remove the code below that only applies in non-instant apply mode,
+    // since instantApply is always true in this prefs implementation.
+
+    // In non-instant apply mode, we must try and use the last saved state
+    // from any previous opens of a child dialog instead of the value from
+    // preferences, to pick up any edits a user may have made.
+
+    var secMan = Components.classes["@mozilla.org/scriptsecuritymanager;1"]
+                .getService(Components.interfaces.nsIScriptSecurityManager);
+    if (Preferences.type == "child" &&
+        !this.instantApply && window.opener &&
+        secMan.isSystemPrincipal(window.opener.document.nodePrincipal)) {
+      var pdoc = window.opener.document;
+
+      // Try to find a preference element for the same preference.
+      var preference = null;
+      var parentPreferences = pdoc.getElementsByTagName("preferences");
+      for (var k = 0; (k < parentPreferences.length && !preference); ++k) {
+        var parentPrefs = parentPreferences[k]
+                                .getElementsByAttribute("name", this.name);
+        for (var l = 0; (l < parentPrefs.length && !preference); ++l) {
+          if (parentPrefs[l].localName == "preference")
+            preference = parentPrefs[l];
+        }
       }
-    }
-
-    // Don't use the value setter here, we don't want updateElements to be prematurely fired.
-    this._value = preference ? preference.value : this.valueFromPreferences;
-  } else
-    this._value = this.valueFromPreferences;
-}
-
-Preference.prototype = Object.create(EventEmitter.prototype);
 
-Object.assign(Preference.prototype, {
-  constructor: Preference,
-
-  _value: null,
-  _disabled: false,
-
-  id: "",
-  readonly: false,
-  type: "",
-  inverted: false,
+      // Don't use the value setter here, we don't want updateElements to be prematurely fired.
+      this._value = preference ? preference.value : this.valueFromPreferences;
+    } else
+      this._value = this.valueFromPreferences;
+  }
 
   reset() {
     // defer reset until preference update
     this.value = undefined;
-  },
-
-  _useDefault: false,
-
-  // TODO: remove this, since it never gets changed.
-  batching: false,
+  }
 
   _reportUnknownType() {
     // TODO: instead of reporting an unknown type, throw an exception
@@ -146,7 +136,7 @@ Object.assign(Preference.prototype, {
     var msg = "Preference with id='" + this.id + "' and name='" +
               this.name + "' has unknown type '" + this.type + "'.";
     consoleService.logStringMessage(msg);
-  },
+  }
 
   setElementValue(aElement) {
     if (this.locked)
@@ -201,7 +191,7 @@ Object.assign(Preference.prototype, {
         setValue(aElement, "value", val);
     } else
       setValue(aElement, "value", val);
-  },
+  }
 
   getElementValue(aElement) {
     if (aElement.hasAttribute("onsynctopreference")) {
@@ -245,7 +235,7 @@ Object.assign(Preference.prototype, {
       return typeof(value) == "boolean" ? value : value == "true";
     }
     return value;
-  },
+  }
 
   isElementEditable(aElement) {
     switch (aElement.localName) {
@@ -259,7 +249,7 @@ Object.assign(Preference.prototype, {
       return true;
     }
     return aElement.getAttribute("preference-editable") == "true";
-  },
+  }
 
   updateElements() {
     if (!this.id)
@@ -270,187 +260,166 @@ Object.assign(Preference.prototype, {
     var elements = document.getElementsByAttribute("preference", this.id);
     for (var i = 0; i < elements.length; ++i)
       this.setElementValue(elements[i]);
-  },
+  }
 
   onchange() {
     this.updateElements();
-  },
-});
+  }
 
-// Assign getters via Object.defineProperties, since Object.assign invokes them
-// and assigns their return values rather than assigning the getters themselves.
-Object.defineProperties(Preference.prototype, {
   // TODO: remove this getter and the conditions that depend on it
   // since instantApply is always true in this prefs implementation.
-  instantApply: {
-    get: function() {
-      return Preferences.instantApply;
-    },
-  },
-
-  name: {
-    get: function() {
-      return this._name;
-    },
-    set: function (val) {
-      if (val == this.name)
-        return val;
-
-      this._name = val;
-
-      return val;
-    },
-  },
-
-  value: {
-    get: function() {
-      return this._value;
-    },
-    set: function (val) {
-      if (this.value !== val) {
-        this._value = val;
-        if (this.instantApply)
-          this.valueFromPreferences = val;
-        this.emit("change");
-      }
+  get instantApply() {
+    return Preferences.instantApply;
+  }
+
+  get name() {
+    return this._name;
+  }
+  set name(val) {
+    if (val == this.name)
       return val;
-    },
-  },
 
-  locked: {
-    get: function() {
-      return Preferences.rootBranch.prefIsLocked(this.name);
-    },
-  },
+    this._name = val;
 
-  disabled: {
-    get: function() {
-      return this._disabled;
-    },
-    set: function (val) {
-      this._disabled = !!val;
+    return val;
+  }
 
-      if (!this.id)
-        return val;
+  get value() {
+    return this._value;
+  }
+  set value(val) {
+    if (this.value !== val) {
+      this._value = val;
+      if (this.instantApply)
+        this.valueFromPreferences = val;
+      this.emit("change");
+    }
+    return val;
+  }
 
-      var elements = document.getElementsByAttribute("preference", this.id);
-      for (var i = 0; i < elements.length; ++i) {
-        elements[i].disabled = val;
+  get locked() {
+    return Preferences.rootBranch.prefIsLocked(this.name);
+  }
 
-        var labels = document.getElementsByAttribute("control", elements[i].id);
-        for (var j = 0; j < labels.length; ++j)
-          labels[j].disabled = val;
-      }
+  get disabled() {
+    return this._disabled;
+  }
+  set disabled(val) {
+    this._disabled = !!val;
 
+    if (!this.id)
       return val;
-    },
-  },
 
-  defaultValue: {
-    get: function() {
-      this._useDefault = true;
-      var val = this.valueFromPreferences;
-      this._useDefault = false;
-      return val;
-    },
-  },
+    var elements = document.getElementsByAttribute("preference", this.id);
+    for (var i = 0; i < elements.length; ++i) {
+      elements[i].disabled = val;
 
-  _branch: {
-    get: function() {
-      return this._useDefault ? Preferences.defaultBranch : Preferences.rootBranch;
-    },
-  },
+      var labels = document.getElementsByAttribute("control", elements[i].id);
+      for (var j = 0; j < labels.length; ++j)
+        labels[j].disabled = val;
+    }
 
-  valueFromPreferences: {
-    get: function() {
-      try {
-        // Force a resync of value with preferences.
-        switch (this.type) {
-        case "int":
-          return this._branch.getIntPref(this.name);
-        case "bool":
-          var val = this._branch.getBoolPref(this.name);
-          return this.inverted ? !val : val;
-        case "wstring":
-          return this._branch
-                     .getComplexValue(this.name, Components.interfaces.nsIPrefLocalizedString)
-                     .data;
-        case "string":
-        case "unichar":
-          return this._branch.getStringPref(this.name);
-        case "fontname":
-          var family = this._branch.getStringPref(this.name);
-          var fontEnumerator = Components.classes["@mozilla.org/gfx/fontenumerator;1"]
-                                         .createInstance(Components.interfaces.nsIFontEnumerator);
-          return fontEnumerator.getStandardFamilyName(family);
-        case "file":
-          var f = this._branch
-                      .getComplexValue(this.name, Components.interfaces.nsILocalFile);
-          return f;
-        default:
-          this._reportUnknownType();
-        }
-      } catch (e) { }
-      return null;
-    },
-
-    set: function (val) {
-      // Exit early if nothing to do.
-      if (this.readonly || this.valueFromPreferences == val)
-        return val;
-
-      // The special value undefined means 'reset preference to default'.
-      if (val === undefined) {
-        Preferences.rootBranch.clearUserPref(this.name);
-        return val;
-      }
+    return val;
+  }
 
-      // Force a resync of preferences with value.
+  get defaultValue() {
+    this._useDefault = true;
+    var val = this.valueFromPreferences;
+    this._useDefault = false;
+    return val;
+  }
+
+  get _branch() {
+    return this._useDefault ? Preferences.defaultBranch : Preferences.rootBranch;
+  }
+
+  get valueFromPreferences() {
+    try {
+      // Force a resync of value with preferences.
       switch (this.type) {
       case "int":
-        Preferences.rootBranch.setIntPref(this.name, val);
-        break;
+        return this._branch.getIntPref(this.name);
       case "bool":
-        Preferences.rootBranch.setBoolPref(this.name, this.inverted ? !val : val);
-        break;
+        var val = this._branch.getBoolPref(this.name);
+        return this.inverted ? !val : val;
       case "wstring":
-        var pls = Components.classes["@mozilla.org/pref-localizedstring;1"]
-                            .createInstance(Components.interfaces.nsIPrefLocalizedString);
-        pls.data = val;
-        Preferences.rootBranch
-            .setComplexValue(this.name, Components.interfaces.nsIPrefLocalizedString, pls);
-        break;
+        return this._branch
+                   .getComplexValue(this.name, Components.interfaces.nsIPrefLocalizedString)
+                   .data;
       case "string":
       case "unichar":
+        return this._branch.getStringPref(this.name);
       case "fontname":
-        Preferences.rootBranch.setStringPref(this.name, val);
-        break;
+        var family = this._branch.getStringPref(this.name);
+        var fontEnumerator = Components.classes["@mozilla.org/gfx/fontenumerator;1"]
+                                       .createInstance(Components.interfaces.nsIFontEnumerator);
+        return fontEnumerator.getStandardFamilyName(family);
       case "file":
-        var lf;
-        if (typeof(val) == "string") {
-          lf = Components.classes["@mozilla.org/file/local;1"]
-                         .createInstance(Components.interfaces.nsILocalFile);
-          lf.persistentDescriptor = val;
-          if (!lf.exists())
-            lf.initWithPath(val);
-        } else
-          lf = val.QueryInterface(Components.interfaces.nsILocalFile);
-        Preferences.rootBranch
-            .setComplexValue(this.name, Components.interfaces.nsILocalFile, lf);
-        break;
+        var f = this._branch
+                    .getComplexValue(this.name, Components.interfaces.nsILocalFile);
+        return f;
       default:
         this._reportUnknownType();
       }
-      if (!this.batching) {
-        var psvc = Components.classes["@mozilla.org/preferences-service;1"]
-                             .getService(Components.interfaces.nsIPrefService);
-        psvc.savePrefFile(null);
-      }
+    } catch (e) { }
+    return null;
+  }
+
+  set valueFromPreferences(val) {
+    // Exit early if nothing to do.
+    if (this.readonly || this.valueFromPreferences == val)
       return val;
-    },
-  },
 
-});
+    // The special value undefined means 'reset preference to default'.
+    if (val === undefined) {
+      Preferences.rootBranch.clearUserPref(this.name);
+      return val;
+    }
+
+    // Force a resync of preferences with value.
+    switch (this.type) {
+    case "int":
+      Preferences.rootBranch.setIntPref(this.name, val);
+      break;
+    case "bool":
+      Preferences.rootBranch.setBoolPref(this.name, this.inverted ? !val : val);
+      break;
+    case "wstring":
+      var pls = Components.classes["@mozilla.org/pref-localizedstring;1"]
+                          .createInstance(Components.interfaces.nsIPrefLocalizedString);
+      pls.data = val;
+      Preferences.rootBranch
+          .setComplexValue(this.name, Components.interfaces.nsIPrefLocalizedString, pls);
+      break;
+    case "string":
+    case "unichar":
+    case "fontname":
+      Preferences.rootBranch.setStringPref(this.name, val);
+      break;
+    case "file":
+      var lf;
+      if (typeof(val) == "string") {
+        lf = Components.classes["@mozilla.org/file/local;1"]
+                       .createInstance(Components.interfaces.nsILocalFile);
+        lf.persistentDescriptor = val;
+        if (!lf.exists())
+          lf.initWithPath(val);
+      } else
+        lf = val.QueryInterface(Components.interfaces.nsILocalFile);
+      Preferences.rootBranch
+          .setComplexValue(this.name, Components.interfaces.nsILocalFile, lf);
+      break;
+    default:
+      this._reportUnknownType();
+    }
+    if (!this.batching) {
+      var psvc = Components.classes["@mozilla.org/preferences-service;1"]
+                           .getService(Components.interfaces.nsIPrefService);
+      psvc.savePrefFile(null);
+    }
+    return val;
+  }
+}
 
 const MainPrefPane = {
   getPreferenceElement(aStartElement) {

From 20f557f73de4e90cf490b0b2e40461bc42b84256 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Tue, 11 Jul 2017 14:08:37 -0700
Subject: [PATCH 073/106] generalize MainPrefPane object

---
 .../preferences/in-content-new/preferences.js      |  6 +---
 toolkit/content/preferences.js                     | 33 +++++++++++++---------
 2 files changed, 21 insertions(+), 18 deletions(-)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 0771004d1be4..ff8ec5b606c7 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -94,11 +94,7 @@ function init_all() {
   let helpUrl = Services.urlFormatter.formatURLPref("app.support.baseURL") + "preferences";
   helpButton.setAttribute("href", helpUrl);
 
-  let mainPrefPane = document.getElementById("mainPrefPane");
-  mainPrefPane.addEventListener("command", MainPrefPane.onCommand.bind(MainPrefPane));
-  mainPrefPane.addEventListener("select", MainPrefPane.onSelect.bind(MainPrefPane));
-  mainPrefPane.addEventListener("change", MainPrefPane.onChange.bind(MainPrefPane));
-  mainPrefPane.addEventListener("input", MainPrefPane.onInput.bind(MainPrefPane));
+  new PrefPane(document.getElementById("mainPrefPane"));
 
   // Wait until initialization of all preferences are complete before
   // notifying observers that the UI is now ready.
diff --git a/toolkit/content/preferences.js b/toolkit/content/preferences.js
index 32538850bb28..04cdf1b281c0 100644
--- a/toolkit/content/preferences.js
+++ b/toolkit/content/preferences.js
@@ -421,7 +421,16 @@ class Preference extends EventEmitter {
   }
 }
 
-const MainPrefPane = {
+class PrefPane {
+  constructor(aElement) {
+    this._deferredValueUpdateElements = new Set();
+
+    aElement.addEventListener("command", this.onCommand.bind(this));
+    aElement.addEventListener("select", this.onSelect.bind(this));
+    aElement.addEventListener("change", this.onChange.bind(this));
+    aElement.addEventListener("input", this.onInput.bind(this));
+  }
+
   getPreferenceElement(aStartElement) {
     var temp = aStartElement;
     while (temp && temp.nodeType == Node.ELEMENT_NODE &&
@@ -429,7 +438,7 @@ const MainPrefPane = {
       temp = temp.parentNode;
     return temp && temp.nodeType == Node.ELEMENT_NODE ?
            temp : aStartElement;
-  },
+  }
 
   get DeferredTask() {
     let module = {};
@@ -441,7 +450,7 @@ const MainPrefPane = {
       value: module.DeferredTask
     });
     return module.DeferredTask;
-  },
+  }
 
   _deferredValueUpdate(aElement) {
     delete aElement._deferredValueUpdateTask;
@@ -450,9 +459,7 @@ const MainPrefPane = {
     let prefVal = preference.getElementValue(aElement);
     preference.value = prefVal;
     this._deferredValueUpdateElements.delete(aElement);
-  },
-
-  _deferredValueUpdateElements: new Set(),
+  }
 
   _finalizeDeferredElements() {
     for (let el of this._deferredValueUpdateElements) {
@@ -460,7 +467,7 @@ const MainPrefPane = {
         el._deferredValueUpdateTask.finalize();
       }
     }
-  },
+  }
 
   userChangedValue(aElement) {
     let element = this.getPreferenceElement(aElement);
@@ -480,7 +487,7 @@ const MainPrefPane = {
         element._deferredValueUpdateTask.arm();
       }
     }
-  },
+  }
 
   onCommand(event) {
     // This "command" event handler tracks changes made to preferences by
@@ -488,24 +495,24 @@ const MainPrefPane = {
     if (event.sourceEvent)
       event = event.sourceEvent;
     this.userChangedValue(event.target);
-  },
+  }
 
   onSelect(event) {
     // This "select" event handler tracks changes made to colorpicker
     // preferences by the user in this window.
     if (event.target.localName == "colorpicker")
       this.userChangedValue(event.target);
-  },
+  }
 
   onChange(event) {
     // This "change" event handler tracks changes made to preferences by
     // the user in this window.
     this.userChangedValue(event.target);
-  },
+  }
 
   onInput(event) {
     // This "input" event handler tracks changes made to preferences by
     // the user in this window.
     this.userChangedValue(event.target);
-  },
-};
+  }
+}

From da012fb3bd8dfddfe7d5aa16f32b535397ee2995 Mon Sep 17 00:00:00 2001
From: Nick Alexander <nalexander@mozilla.com>
Date: Tue, 11 Jul 2017 15:51:45 -0700
Subject: [PATCH 074/106] Add |mach watch|: pywatchman based |mach build
 faster| daemon.

---
 browser/base/content/browser-sets.inc         |   6 +
 browser/base/content/browser.js               |  24 +++
 browser/components/nsBrowserGlue.js           | 208 +++++++++++++++++++++-
 devtools/client/shared/file-watcher-worker.js |   2 +-
 python/mozbuild/mozbuild/faster_daemon.py     | 244 ++++++++++++++++++++++++++
 python/mozbuild/mozbuild/mach_commands.py     |  15 ++
 python/mozbuild/mozpack/copier.py             |  22 +++
 python/mozbuild/mozpack/files.py              |  26 +++
 8 files changed, 545 insertions(+), 2 deletions(-)
 create mode 100644 python/mozbuild/mozbuild/faster_daemon.py

diff --git a/browser/base/content/browser-sets.inc b/browser/base/content/browser-sets.inc
index 9a9d617d111c..3e256200f37f 100644
--- a/browser/base/content/browser-sets.inc
+++ b/browser/base/content/browser-sets.inc
@@ -16,6 +16,7 @@
   </stringbundleset>
 
   <commandset id="mainCommandSet">
+    <command id="cmd_quickRestart" oncommand="QuickRestart()"/>
     <command id="cmd_newNavigator" oncommand="OpenBrowserWindow()"/>
     <command id="cmd_handleBackspace" oncommand="BrowserHandleBackspace();" />
     <command id="cmd_handleShiftBackspace" oncommand="BrowserHandleShiftBackspace();" />
@@ -195,6 +196,11 @@
   </broadcasterset>
 
   <keyset id="mainKeyset">
+    <key id="key_quickRestart"
+         key="R"
+         command="cmd_quickRestart"
+         modifiers="accel,alt"
+    />
     <key id="key_newNavigator"
          key="&newNavigatorCmd.key;"
          command="cmd_newNavigator"
diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
index 1c0fa4ad067a..eb55ecf52d62 100755
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -4114,6 +4114,30 @@ function toOpenWindowByType(inType, uri, features) {
     window.open(uri, "_blank", "chrome,extrachrome,menubar,resizable,scrollbars,status,toolbar");
 }
 
+function QuickRestart() {
+  var {FileUtils} = Components.utils.import("resource://gre/modules/FileUtils.jsm", {});
+  var file = new FileUtils.File("~/Code/mozilla-central/MARK");
+  doRestart();
+
+  function doRestart() {
+    if (file.exists()) {
+      console.log("Build is still running.. waiting 1 second");
+      document.documentElement.style.opacity = ".2";
+      setTimeout(doRestart, 1000);
+      return;
+    }
+    let canceled = Cc["@mozilla.org/supports-PRBool;1"]
+        .createInstance(Ci.nsISupportsPRBool);
+
+    Services.obs.notifyObservers(canceled, "quit-application-requested", "restart");
+
+    if (canceled.data) return false;
+
+    Cc['@mozilla.org/toolkit/app-startup;1'].getService(Ci.nsIAppStartup)
+        .quit(Ci.nsIAppStartup.eAttemptQuit | Ci.nsIAppStartup.eRestart);
+  }
+}
+
 function OpenBrowserWindow(options) {
   var telemetryObj = {};
   TelemetryStopwatch.start("FX_NEW_WINDOW_MS", telemetryObj);
diff --git a/browser/components/nsBrowserGlue.js b/browser/components/nsBrowserGlue.js
index e376c13eb723..b653dcb030c3 100644
--- a/browser/components/nsBrowserGlue.js
+++ b/browser/components/nsBrowserGlue.js
@@ -20,7 +20,7 @@ XPCOMUtils.defineLazyGetter(this, "WeaveService", () =>
 );
 XPCOMUtils.defineLazyModuleGetter(this, "ContextualIdentityService",
                                   "resource://gre/modules/ContextualIdentityService.jsm");
-
+XPCOMUtils.defineLazyModuleGetter(this, "console", "resource://gre/modules/Console.jsm");
 // lazy module getters
 
 /* global AboutHome:false, AboutNewTab:false, AddonManager:false, AppMenuNotifications:false,
@@ -629,6 +629,7 @@ BrowserGlue.prototype = {
     SessionStore.init();
     BrowserUsageTelemetry.init();
     BrowserUITelemetry.init();
+    DevRefresher.init();
 
     if (AppConstants.INSTALL_COMPACT_THEMES) {
       let vendorShortName = gBrandBundle.GetStringFromName("vendorShortName");
@@ -2845,3 +2846,208 @@ var globalMM = Cc["@mozilla.org/globalmessagemanager;1"].getService(Ci.nsIMessag
 globalMM.addMessageListener("UITour:onPageEvent", function(aMessage) {
   UITour.onPageEvent(aMessage, aMessage.data);
 });
+
+
+var DevRefresher = {
+  resolveURIToLocalPath(aURI) {
+    let resolved;
+    switch (aURI.scheme) {
+      case "jar":
+      case "file":
+        return aURI;
+
+      case "chrome":
+        resolved = Cc["@mozilla.org/chrome/chrome-registry;1"].
+                   getService(Ci.nsIChromeRegistry).convertChromeURL(aURI);
+        return this.resolveURIToLocalPath(resolved);
+
+      case "resource":
+        resolved = Cc["@mozilla.org/network/protocol;1?name=resource"].
+                   getService(Ci.nsIResProtocolHandler).resolveURI(aURI);
+        aURI = Services.io.newURI(resolved, null, null);
+        return this.resolveURIToLocalPath(aURI);
+
+      default:
+        return null;
+    }
+  },
+  getLocalPath(url) {
+    let uri = null;
+    let ios = Components.classes['@mozilla.org/network/io-service;1'].getService(Components.interfaces["nsIIOService"]);
+    try {
+        uri = this.resolveURIToLocalPath(ios.newURI(url, "UTF-8", null));
+    } catch(e){}
+
+    let ret = null;
+    if (uri) {
+      ret = uri.spec.replace(/file:\/\//, "");
+    }
+    return ret;
+  },
+
+  watchFiles(path, onFileChanged) {
+    const watchWorker = new ChromeWorker(
+      "resource://devtools/client/shared/file-watcher-worker.js"
+    );
+
+    watchWorker.onmessage = event => {
+      // We need to turn a local path back into a resource URI (or
+      // chrome). This means that this system will only work when built
+      // files are symlinked, so that these URIs actually read from
+      // local sources. There might be a better way to do this.
+      const { path: newPath } = event.data;
+      onFileChanged(newPath);
+    };
+
+    watchWorker.postMessage({
+      path,
+      fileRegex: /\.(css|js|html|xhtml|xul)$/
+    });
+    return watchWorker;
+  },
+
+
+  iterStyleNodes(window, func) {
+    for (let node of window.document.childNodes) {
+      // Look for ProcessingInstruction nodes.
+      if (node.nodeType === 7) {
+        func(node);
+      }
+    }
+
+    const links = window.document.getElementsByTagNameNS(
+      "http://www.w3.org/1999/xhtml", "link"
+    );
+    for (let node of links) {
+      func(node);
+    }
+  },
+
+  replaceCSS(window, fileURI) {
+    const document = window.document;
+    const appendRandom = (href) => {
+      return href.split("?s")[0] + `?s=${Math.random()}`;
+    };
+    // console.log("Checking for replacement at:", window.location.toString(), "with: ", fileURI);
+
+    // Scan every CSS tag and reload ones that match the file we are
+    // looking for.
+    this.iterStyleNodes(window, node => {
+      if (node.nodeType === 7) {
+        // xml-stylesheet declaration
+        // Convert a string like href="chrome://browser/content/browser.css" type="text/css" to:
+        // chrome://browser/content/browser.css, then convert it to a local path
+        let originalHref = node.data.match(/href=([^\s]*)/)[1].replace(/["']/g, '')
+        const path = this.getLocalPath(originalHref);
+        // console.log("Looking into PI", "\nhref: " + originalHref, "\npath: " + path, "\nfileURI: " + fileURI);
+        if (path && path.includes(fileURI)) {
+          // Special case chrome://browser/skin/ which does a redircet
+          if (originalHref == "chrome://browser/skin/") {
+            originalHref = "chrome://browser/skin/browser.css";
+          }
+          console.log("Replacing the PI at: ", originalHref);
+          const newNode = window.document.createProcessingInstruction(
+            "xml-stylesheet",
+            `href="${appendRandom(originalHref)}" type="text/css"`
+          );
+          document.insertBefore(newNode, node);
+          document.removeChild(node);
+        }
+      } else {
+        const originalHref = node.href;
+        const path = this.getLocalPath(originalHref);
+        // console.log("Looking into stylesheet", path, fileURI);
+        if (path && path.includes(fileURI)) {
+          console.log("Replacing the stylesheet at: ", originalHref);
+          const parentNode = node.parentNode;
+          const newNode = window.document.createElementNS(
+            "http://www.w3.org/1999/xhtml",
+            "link"
+          );
+          newNode.rel = "stylesheet";
+          newNode.type = "text/css";
+          newNode.href = appendRandom(originalHref);
+
+          parentNode.insertBefore(newNode, node);
+          parentNode.removeChild(node);
+        }
+     }
+    });
+  },
+
+  replaceCSSImports(window, fileURI) {
+    const document = window.document;
+    const appendRandom = (href) => {
+      return href.split("?s")[0] + `?s=${Math.random()}`;
+    };
+    // Only match the filename. False positives are much better than
+    // missing updates, as all that would happen is we reload more
+    // resources than we need. We do this because many resources only
+    // use relative paths.
+    const parts = fileURI.split("/");
+    const file = parts[parts.length - 1];
+
+    // Scan every single rule in the entire page for any reference to
+    // this resource, and re-insert the rule to force it to update.
+    for (let sheet of document.styleSheets) {
+      if (sheet.ownerNode.nodeType === 7) { continue; }
+      for (let i = 0; i < sheet.cssRules.length; i++) {
+        const rule = sheet.cssRules[i];
+        if (rule.type === rule.IMPORT_RULE) {
+          // console.log("Found an import", "\n" + rule.href,  "\n" + this.getLocalPath(rule.href.split("?s")[0]), "\n" + fileURI);
+          // TODO (if nested imports are used) - recurse into the imported sheet
+          if (this.getLocalPath(rule.href.split("?s")[0]) === fileURI) {
+              let newRule = `@import url("${appendRandom(rule.href)}");`;
+              sheet.deleteRule(i);
+              sheet.insertRule(newRule, i);
+          }
+        }
+      }
+    }
+  },
+
+  getAllDocuments(win) {
+    let walker = Cc["@mozilla.org/inspector/deep-tree-walker;1"].
+                 createInstance(Ci.inIDeepTreeWalker);
+    walker.showAnonymousContent = true;
+    walker.showSubDocuments = true;
+    walker.showDocumentsAsNodes = true;
+    walker.init(win.document.documentElement, Ci.nsIDOMNodeFilter.SHOW_ELEMENT);
+    let documents = [win.document]
+    while (walker.nextNode()) {
+      if (walker.currentNode.nodeType === 9) {
+        documents.push(walker.currentNode)
+      }
+    }
+    return documents;
+  },
+
+  init() {
+    const watchRoot = this.getLocalPath("resource://");
+    this.worker = this.watchFiles(watchRoot, path => {
+      Services.obs.notifyObservers(null, "startupcache-invalidate");
+
+      // Don't traverse stylesheets unless if a css file changed
+      if (!path.endsWith('css')) {
+        return;
+      }
+
+      // XXX: remove double slash that's coming back from worker:
+      path = path.replace('//', '/');
+
+      // This covers extra globals like additional browser windows and the browser toolbox
+      var wm = Components.classes["@mozilla.org/appshell/window-mediator;1"]
+                     .getService(Components.interfaces.nsIWindowMediator);
+      var enumerator = wm.getEnumerator(null);
+      while(enumerator.hasMoreElements()) {
+        var win = enumerator.getNext();
+        // This covers extra globals within a window, like devtools frames
+        let allDocuments = this.getAllDocuments(win);
+        for (var i = 0; i < allDocuments.length; i++) {
+          this.replaceCSS(allDocuments[i].defaultView, path);
+          this.replaceCSSImports(allDocuments[i].defaultView, path);
+        }
+      }
+    });
+  },
+};
diff --git a/devtools/client/shared/file-watcher-worker.js b/devtools/client/shared/file-watcher-worker.js
index c9edd612765d..2bd9fc196822 100644
--- a/devtools/client/shared/file-watcher-worker.js
+++ b/devtools/client/shared/file-watcher-worker.js
@@ -77,5 +77,5 @@ onmessage = function (event) {
     scanFiles(files, changedFile => {
       postMessage({ path: changedFile });
     });
-  }, 1000);
+  }, 500);
 };
diff --git a/python/mozbuild/mozbuild/faster_daemon.py b/python/mozbuild/mozbuild/faster_daemon.py
new file mode 100644
index 000000000000..de8cae541eba
--- /dev/null
+++ b/python/mozbuild/mozbuild/faster_daemon.py
@@ -0,0 +1,244 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+'''
+XXX
+'''
+
+from __future__ import absolute_import, print_function, unicode_literals
+
+import collections
+import os
+import sys
+import time
+
+import mozpack.path as mozpath
+from mozpack.manifests import (
+    InstallManifest,
+)
+from mozpack.copier import (
+    FileCopier,
+    FileRegistrySubtree,
+)
+from mozpack.files import (
+    AbsoluteSymlinkFile,
+    File,
+    PreprocessedFile,
+    FileFinder,
+)
+from mozbuild import shellutil
+
+# Watchman integration cribbed entirely from
+# https://github.com/facebook/watchman/blob/19aebfebb0b5b0b5174b3914a879370ffc5dac37/python/bin/watchman-wait
+import pywatchman
+
+
+def print_copy_result(elapsed, destdir, result, verbose=True):
+    COMPLETE = 'Elapsed: {elapsed:.2f}s; From {dest}: Kept {existing} existing; ' \
+        'Added/updated {updated}; ' \
+        'Removed {rm_files} files and {rm_dirs} directories.'
+
+    print(COMPLETE.format(
+        elapsed=elapsed,
+        dest=destdir,
+        existing=result.existing_files_count,
+        updated=result.updated_files_count,
+        rm_files=result.removed_files_count,
+        rm_dirs=result.removed_directories_count))
+
+    if verbose:
+        if result.updated_files:
+            print("Updated files:")
+            for file in result.updated_files:
+                print("  {}".format(file))
+
+
+class Daemon(object):
+    def __init__(self, config_environment):
+        self.config_environment = config_environment
+        self._file_copier = None
+        self._client = None
+        self._subscriptions = []
+
+    @property
+    def defines(self):
+        defines = dict((name, self.config_environment.defines[name]) \
+                       for name in self.config_environment.defines \
+                       if not name in self.config_environment.non_global_defines)
+        defines.update({
+            'AB_CD': 'en-US',
+            'BUILD_FASTER': 1,
+        })
+        defines.update({
+            'BOOKMARKS_INCLUDE_DIR': mozpath.join(self.config_environment.topsrcdir,
+                                                  'browser', 'locales', 'en-US', 'profile'),
+        })
+        return defines
+
+    @property
+    def file_copier(self):
+        if self._file_copier is None:
+            file_copier = FileCopier()
+
+            finder = FileFinder(mozpath.join(self.config_environment.topobjdir, 'faster'))
+            for path, f in finder.find('*.track'):
+                manifest = InstallManifest(fileobj=f.open())
+
+                # Turn 'install_dist_bin_browser.track' into ['browser'].
+                parts = os.path.basename(os.path.splitext(path)[0]).split('_')
+                parts = parts[3:] # Drop leading install_dist_bin.
+
+                if not parts:
+                    # XXX: maybe we need to handle the top-level dist/bin manifest?
+                    continue
+                manifest.populate_registry(FileRegistrySubtree(mozpath.join(*parts), file_copier),
+                                           defines_override=self.defines)
+
+            self._file_copier = file_copier
+
+        return self._file_copier
+
+    def watch_set(self, depth=2):
+        file_copier = self.file_copier
+
+        # We want the set of watches to be "reasonable", so we watch
+        # (by default) $TOPSRCDIR/two/levels or $TOPSRCDIR/onelevel.
+        # Many folks root $TOPOBJDIR in $TOPSRCDIR, so we handle that
+        # situation specially.  We definitely don't want to watch
+        # $TOPOBJDIR by mistake!
+        watches = set()
+        for input in file_copier.input_to_outputs_tree().keys():
+            rel = mozpath.commonprefix((input, self.config_environment.topobjdir))
+            if rel.startswith(self.config_environment.topobjdir):
+                continue
+
+            rel = mozpath.relpath(input, self.config_environment.topsrcdir)
+            if rel:
+                partial_paths = file_copier._partial_paths(rel)
+                if len(partial_paths) >= 2:
+                    watches.add(partial_paths[-2])
+                elif len(partial_paths) >= 1:
+                    watches.add(partial_paths[-1])
+            else:
+                raise Exception("Refusing to watch input ({}) not rooted in topsrcdir ({})"
+                                .format(input, self.config_environment.topsrcdir))
+
+        return watches
+
+    def subscribe_to_dir(self, name, dir_to_watch):
+        query = {
+            'expression': ['true'],
+            'fields': ['name'],
+        }
+        watch = self.client.query('watch-project', dir_to_watch)
+        if 'warning' in watch:
+            print('WARNING: ', watch['warning'], file=sys.stderr)
+
+        root = watch['watch']
+        if 'relative_path' in watch:
+            query['relative_root'] = watch['relative_path']
+
+        # Get the initial clock value so that we only get updates.
+        query['since'] = self.client.query('clock', root)['clock']
+
+        return self.client.query('subscribe', root, name, query)
+
+    def changed_files(self, verbose=True):
+        # in theory we can parse just the result variable here, but
+        # the client object will accumulate all subscription results
+        # over time, so we ask it to remove and return those values
+        # for each of the subscriptions
+
+        files = set()
+        for sub in self._subscriptions:
+            name = sub['subscribe']
+            data = self.client.getSubscription(name)
+            if data is None:
+                continue
+
+            for dat in data:
+                files |= set([mozpath.join(self.config_environment.topsrcdir, name, f)
+                              for f in dat.get('files', [])])
+
+            files = set([f for f in files if os.path.isfile(f)])
+
+        return files
+
+    def incremental_copy(self, copier, force=False, verbose=True):
+        # Just like the 'repackage' target in browser/app/Makefile.in.
+        if 'cocoa' == self.config_environment.substs['MOZ_WIDGET_TOOLKIT']:
+            bundledir = mozpath.join(self.config_environment.topobjdir, 'dist',
+                                     self.config_environment.substs['MOZ_MACBUNDLE_NAME'],
+                                     'Contents', 'Resources')
+            start = time.time()
+            result = copier.copy(bundledir,
+                                 skip_if_older=not force,
+                                 remove_unaccounted=False,
+                                 remove_all_directory_symlinks=False,
+                                 remove_empty_directories=False)
+            print_copy_result(time.time() - start, bundledir, result, verbose=verbose)
+
+        destdir = mozpath.join(self.config_environment.topobjdir, 'dist', 'bin')
+        start = time.time()
+        result = copier.copy(destdir,
+                             skip_if_older=not force,
+                             remove_unaccounted=False,
+                             remove_all_directory_symlinks=False,
+                             remove_empty_directories=False)
+        print_copy_result(time.time() - start, destdir, result, verbose=verbose)
+
+    def watch(self, verbose=True):
+        self.client = pywatchman.client()
+        try:
+            self.client.capabilityCheck(required=['term-dirname', 'cmd-watch-project', 'wildmatch'])
+
+            for watch in sorted(self.watch_set()):
+                name = watch
+                path = mozpath.join(self.config_environment.topsrcdir, watch)
+                sub = self.subscribe_to_dir(name, path)
+                self._subscriptions.append(sub)
+                if verbose:
+                    print("Watching srcdir {}".format(path))
+
+        except pywatchman.CommandError as ex:
+            print('watchman:', ex.msg, file=sys.stderr)
+            return 1
+
+        input_to_outputs = self.file_copier.input_to_outputs_tree()
+
+        while True:
+            try:
+                result = self.client.receive()
+
+                all_outputs = set()
+                inputs = self.changed_files(verbose=verbose)
+                if inputs:
+                    print("Changed inputs:")
+                    for input in inputs:
+                        print("  {}".format(input))
+                        outputs = set(input_to_outputs[input])
+                        for output in outputs:
+                            print("    {}".format(output))
+                        all_outputs |= outputs
+
+                if all_outputs:
+                    partial_copier = FileCopier()
+                    for output in all_outputs:
+                        partial_copier.add(output, self.file_copier[output])
+
+                    self.incremental_copy(partial_copier, force=True, verbose=verbose)
+
+            except pywatchman.SocketTimeout as ex:
+                # Let's check to see if we're still functional.
+                try:
+                    vers = self.client.query('version')
+                except Exception as ex:
+                    print('watchman:', str(ex), file=sys.stderr)
+                    sys.exit(1)
+
+            except KeyboardInterrupt:
+                # Suppress ugly stack trace when user hits Ctrl-C.
+                sys.exit(3)
+
+        return 0
diff --git a/python/mozbuild/mozbuild/mach_commands.py b/python/mozbuild/mozbuild/mach_commands.py
index 500fd0d0879d..f4b8f19d24ca 100644
--- a/python/mozbuild/mozbuild/mach_commands.py
+++ b/python/mozbuild/mozbuild/mach_commands.py
@@ -305,6 +305,21 @@ def __call__(self, parser, namespace, values, option_string=None):
 
 
 @CommandProvider
+class Watch(MachCommandBase):
+    """Interface to watch and re-build the tree."""
+
+    @Command('watch', category='build', description='Watch and re-build the tree.')
+    def watch(self):
+        """Watch and re-build the source tree."""
+        self._activate_virtualenv()
+        self.virtualenv_manager.install_pip_package('pywatchman==1.3.0')
+
+        from mozbuild.faster_daemon import Daemon
+        daemon = Daemon(self.config_environment)
+        return daemon.watch()
+
+
+@CommandProvider
 class Build(MachCommandBase):
     """Interface to build the tree."""
 
diff --git a/python/mozbuild/mozpack/copier.py b/python/mozbuild/mozpack/copier.py
index 386930fe7264..d8e55154e37a 100644
--- a/python/mozbuild/mozpack/copier.py
+++ b/python/mozbuild/mozpack/copier.py
@@ -16,6 +16,7 @@
 import mozpack.path as mozpath
 import errno
 from collections import (
+    defaultdict,
     Counter,
     OrderedDict,
 )
@@ -153,6 +154,27 @@ def required_directories(self):
         '''
         return set(k for k, v in self._required_directories.items() if v > 0)
 
+    def output_to_inputs_tree(self):
+        '''
+        Return a dictionary mapping each output path to the set of its
+        required input paths.
+        '''
+        tree = {}
+        for output, file in self:
+            tree[output] = set(file.inputs())
+        return tree
+
+    def input_to_outputs_tree(self):
+        '''
+        Return a dictionary mapping each input path to the set of
+        impacted output paths.
+        '''
+        tree = defaultdict(set)
+        for output, file in self:
+            for input in file.inputs():
+                tree[input].add(output)
+        return tree
+
 
 class FileRegistrySubtree(object):
     '''A proxy class to give access to a subtree of an existing FileRegistry.
diff --git a/python/mozbuild/mozpack/files.py b/python/mozbuild/mozpack/files.py
index 58ff84349e9d..1e19d28bf68b 100644
--- a/python/mozbuild/mozpack/files.py
+++ b/python/mozbuild/mozpack/files.py
@@ -234,6 +234,12 @@ def mode(self):
         '''
         return None
 
+    def inputs(self):
+        '''
+        Return an iterator of the input file paths that impact this output file.
+        '''
+        raise NotImplementedError('BaseFile.inputs() not implemented. Bug XXX.')
+
 
 class File(BaseFile):
     '''
@@ -261,6 +267,9 @@ def read(self):
     def size(self):
         return os.stat(self.path).st_size
 
+    def inputs(self):
+        yield self.path
+
 
 class ExecutableFile(File):
     '''
@@ -423,6 +432,9 @@ def copy(self, dest, skip_if_older=True):
             errors.fatal("Required existing file doesn't exist: %s" %
                 dest.path)
 
+    def inputs(self):
+        return iter(())
+
 
 class PreprocessedFile(BaseFile):
     '''
@@ -439,6 +451,17 @@ def __init__(self, path, depfile_path, marker, defines, extra_depends=None,
         self.silence_missing_directive_warnings = \
             silence_missing_directive_warnings
 
+    def inputs(self):
+        pp = Preprocessor(defines=self.defines, marker=self.marker)
+        pp.setSilenceDirectiveWarnings(self.silence_missing_directive_warnings)
+
+        with open(self.path, 'rU') as input:
+            with open(os.devnull, 'w') as output:
+                pp.processFile(input=input, output=output)
+
+        # This always yields at least self.path.
+        return iter(pp.includes)
+
     def copy(self, dest, skip_if_older=True):
         '''
         Invokes the preprocessor to create the destination file.
@@ -514,6 +537,9 @@ def read(self):
     def size(self):
         return len(self.content)
 
+    def inputs(self):
+        return iter(())
+
 
 class DeflatedFile(BaseFile):
     '''

From 902843abcde8c2a8bfc845416fb8ec2e882fa54c Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Tue, 11 Jul 2017 16:20:07 -0700
Subject: [PATCH 075/106] ensure all 'change' listeners are properly bound

---
 .../components/preferences/in-content-new/applications.js  |  3 ++-
 browser/components/preferences/in-content-new/main.js      | 14 +++++---------
 browser/components/preferences/in-content-new/privacy.js   |  4 ++--
 3 files changed, 9 insertions(+), 12 deletions(-)

diff --git a/browser/components/preferences/in-content-new/applications.js b/browser/components/preferences/in-content-new/applications.js
index 22a3b02a9a4b..02bca4af10d1 100644
--- a/browser/components/preferences/in-content-new/applications.js
+++ b/browser/components/preferences/in-content-new/applications.js
@@ -935,7 +935,8 @@ var gApplicationsPane = {
     setEventListener("typeColumn", "click", gApplicationsPane.sort);
     setEventListener("actionColumn", "click", gApplicationsPane.sort);
     setEventListener("chooseFolder", "command", gApplicationsPane.chooseFolder);
-    Preferences.get("browser.download.dir").on("change", gApplicationsPane.displayDownloadDirPref);
+    Preferences.get("browser.download.dir").on("change",
+      gApplicationsPane.displayDownloadDirPref.bind(gApplicationsPane));
 
     // Listen for window unload so we can remove our preference observers.
     window.addEventListener("unload", this);
diff --git a/browser/components/preferences/in-content-new/main.js b/browser/components/preferences/in-content-new/main.js
index cd8ddb7aa431..f98e285564e2 100644
--- a/browser/components/preferences/in-content-new/main.js
+++ b/browser/components/preferences/in-content-new/main.js
@@ -218,18 +218,14 @@ var gMainPane = {
 
     let suggestsPref =
       Preferences.get("browser.search.suggest.enabled");
-    suggestsPref.on("change", () => {
-      this.updateSuggestsCheckbox();
-    });
+    suggestsPref.on("change", this.updateSuggestsCheckbox.bind(this));
     this.updateSuggestsCheckbox();
 
     this.updateDefaultPerformanceSettingsPref();
 
     let defaultPerformancePref =
       Preferences.get("browser.preferences.defaultPerformanceSettings.enabled");
-    defaultPerformancePref.on("change", () => {
-      this.updatePerformanceSettingsBox();
-    });
+    defaultPerformancePref.on("change", this.updatePerformanceSettingsBox.bind(this));
     this.updatePerformanceSettingsBox();
 
     // set up the "use current page" label-changing listener
@@ -259,7 +255,7 @@ var gMainPane = {
       document.getElementById("warnOpenMany").hidden = true;
 
     Preferences.get("browser.privatebrowsing.autostart").on("change",
-                     gMainPane.updateBrowserStartupLastSession);
+                     gMainPane.updateBrowserStartupLastSession.bind(gMainPane));
     if (AppConstants.HAVE_SHELL_SERVICE) {
       setEventListener("setDefaultButton", "command",
                        gMainPane.setDefaultBrowser);
@@ -277,13 +273,13 @@ var gMainPane = {
     setEventListener("translateButton", "command",
       gMainPane.showTranslationExceptions);
     Preferences.get("font.language.group").on("change",
-      gMainPane._rebuildFonts);
+      gMainPane._rebuildFonts.bind(gMainPane));
     setEventListener("advancedFonts", "command",
       gMainPane.configureFonts);
     setEventListener("colors", "command",
       gMainPane.configureColors);
     Preferences.get("layers.acceleration.disabled").on("change",
-      gMainPane.updateHardwareAcceleration);
+      gMainPane.updateHardwareAcceleration.bind(gMainPane));
 
     // Initializes the fonts dropdowns displayed in this pane.
     this._rebuildFonts();
diff --git a/browser/components/preferences/in-content-new/privacy.js b/browser/components/preferences/in-content-new/privacy.js
index 74ad9c640b83..85bc3b23b2df 100644
--- a/browser/components/preferences/in-content-new/privacy.js
+++ b/browser/components/preferences/in-content-new/privacy.js
@@ -258,9 +258,9 @@ var gPrivacyPane = {
     this._initBrowserContainers();
 
     Preferences.get("privacy.sanitize.sanitizeOnShutdown").on("change",
-                     gPrivacyPane._updateSanitizeSettingsButton);
+                     gPrivacyPane._updateSanitizeSettingsButton.bind(gPrivacyPane));
     Preferences.get("browser.privatebrowsing.autostart").on("change",
-                     gPrivacyPane.updatePrivacyMicroControls);
+                     gPrivacyPane.updatePrivacyMicroControls.bind(gPrivacyPane));
     setEventListener("historyMode", "command", function() {
       gPrivacyPane.updateHistoryModePane();
       gPrivacyPane.updateHistoryModePrefs();

From 4566fbefbbe7d751110190288f4130396c04f462 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Wed, 12 Jul 2017 16:44:13 -0700
Subject: [PATCH 076/106] re-add prefpane selector rules until we no longer use
 prefpanes anywhere

---
 browser/themes/osx/preferences/preferences.css | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/browser/themes/osx/preferences/preferences.css b/browser/themes/osx/preferences/preferences.css
index 2095b22c1a86..46e34a97bdf6 100644
--- a/browser/themes/osx/preferences/preferences.css
+++ b/browser/themes/osx/preferences/preferences.css
@@ -26,12 +26,14 @@ description {
   padding: 12px 12px 0 12px;
 }
 
-#mainPrefPane .groupbox-body {
+/* TODO: remove "prefpane" selector once we no longer use it anywhere. */
+prefpane .groupbox-body, #mainPrefPane .groupbox-body {
   -moz-appearance: none;
   padding: 8px 4px 4px 4px;
 }
 
-#mainPrefPane .groupbox-title {
+/* TODO: remove "prefpane" selector once we no longer use it anywhere. */
+prefpane .groupbox-title, #mainPrefPane .groupbox-title {
   background: url("chrome://global/skin/50pct_transparent_grey.png") repeat-x bottom left;
   margin-bottom: 4px;
 }

From 8db16b9460d47ae13c1f9977a3d15e56b223ef5e Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Wed, 12 Jul 2017 17:00:21 -0700
Subject: [PATCH 077/106] throw on pref w/duplicate ID or no name

---
 browser/components/preferences/in-content-new/main.js |  1 -
 toolkit/content/preferences.js                        | 17 ++++++++---------
 2 files changed, 8 insertions(+), 10 deletions(-)

diff --git a/browser/components/preferences/in-content-new/main.js b/browser/components/preferences/in-content-new/main.js
index f98e285564e2..285b823cb0b4 100644
--- a/browser/components/preferences/in-content-new/main.js
+++ b/browser/components/preferences/in-content-new/main.js
@@ -50,7 +50,6 @@ window.addEventListener("DOMContentLoaded", function() {
     { id: "pref.browser.homepage.disable_button.current_page", type: "bool" },
     { id: "pref.browser.homepage.disable_button.bookmark_page", type: "bool" },
     { id: "pref.browser.homepage.disable_button.restore_default", type: "bool" },
-    { id: "browser.privatebrowsing.autostart", type: "bool" },
 
     /* Search Engine */
     { id: "browser.search.suggest.enabled", type: "bool" },
diff --git a/toolkit/content/preferences.js b/toolkit/content/preferences.js
index 04cdf1b281c0..b3d1a79dcc82 100644
--- a/toolkit/content/preferences.js
+++ b/toolkit/content/preferences.js
@@ -9,19 +9,18 @@ window.Preferences = {
   all: {},
 
   add(prefInfo) {
-    // TODO: throw an exception if a pref with the same ID already exists.
+    if (this.all[prefInfo.id]) {
+      throw new Error(`preference with id '${prefInfo.id}' already added`);
+    }
     const pref = new Preference(prefInfo);
-    Preferences.all[pref.id] = pref;
+    this.all[pref.id] = pref;
     pref.updateElements();
     return pref;
   },
 
   addAll(prefInfos) {
     for (const prefInfo of prefInfos) {
-      // TODO: throw an exception if a pref with the same ID already exists.
-      const pref = new Preference(prefInfo);
-      this.all[pref.id] = pref;
-      pref.updateElements();
+      this.add(prefInfo);
     }
   },
 
@@ -87,9 +86,9 @@ class Preference extends EventEmitter {
 
     // if the element has been inserted without the name attribute set,
     // we have nothing to do here
-    // TODO: throw an exception in this case, which seems, erm, exceptional.
-    if (!this.name)
-      return;
+    if (!this.name) {
+      throw new Error(`preference with id '${id}' doesn't have name`);
+    }
 
     // TODO: remove the code below that only applies in non-instant apply mode,
     // since instantApply is always true in this prefs implementation.

From 3787dd36a64ffa71eb75460902d811f0f8c84e8b Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Wed, 12 Jul 2017 17:03:46 -0700
Subject: [PATCH 078/106] apply style via class rather than id

---
 browser/components/preferences/in-content-new/preferences.xul | 2 +-
 browser/themes/linux/preferences/preferences.css              | 2 +-
 browser/themes/osx/preferences/preferences.css                | 6 +++---
 browser/themes/windows/preferences/preferences.css            | 2 +-
 4 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/browser/components/preferences/in-content-new/preferences.xul b/browser/components/preferences/in-content-new/preferences.xul
index fe93a78c91e1..72ab42e44da8 100644
--- a/browser/components/preferences/in-content-new/preferences.xul
+++ b/browser/components/preferences/in-content-new/preferences.xul
@@ -206,7 +206,7 @@
         <textbox type="search" id="searchInput" placeholder="&searchInput.label;" hidden="true"
                  clickSelectsAll="true"/>
       </hbox>
-      <vbox id="mainPrefPane">
+      <vbox id="mainPrefPane" class="prefpane">
 #include searchResults.xul
 #include main.xul
 #include privacy.xul
diff --git a/browser/themes/linux/preferences/preferences.css b/browser/themes/linux/preferences/preferences.css
index a51375eca635..076ee925a84b 100644
--- a/browser/themes/linux/preferences/preferences.css
+++ b/browser/themes/linux/preferences/preferences.css
@@ -6,7 +6,7 @@
 */
 
 /* Main Pref Pane */
-#mainPrefPane {
+.prefpane {
   padding: 8px;
 }
 
diff --git a/browser/themes/osx/preferences/preferences.css b/browser/themes/osx/preferences/preferences.css
index 46e34a97bdf6..78f0535ff4cc 100644
--- a/browser/themes/osx/preferences/preferences.css
+++ b/browser/themes/osx/preferences/preferences.css
@@ -22,18 +22,18 @@ description {
   margin-bottom: 4px !important;
 }
 
-#mainPrefPane {
+.prefpane {
   padding: 12px 12px 0 12px;
 }
 
 /* TODO: remove "prefpane" selector once we no longer use it anywhere. */
-prefpane .groupbox-body, #mainPrefPane .groupbox-body {
+prefpane .groupbox-body, .prefpane .groupbox-body {
   -moz-appearance: none;
   padding: 8px 4px 4px 4px;
 }
 
 /* TODO: remove "prefpane" selector once we no longer use it anywhere. */
-prefpane .groupbox-title, #mainPrefPane .groupbox-title {
+prefpane .groupbox-title, .prefpane .groupbox-title {
   background: url("chrome://global/skin/50pct_transparent_grey.png") repeat-x bottom left;
   margin-bottom: 4px;
 }
diff --git a/browser/themes/windows/preferences/preferences.css b/browser/themes/windows/preferences/preferences.css
index 83e477f7bb1a..5112ebc222a4 100644
--- a/browser/themes/windows/preferences/preferences.css
+++ b/browser/themes/windows/preferences/preferences.css
@@ -6,7 +6,7 @@
 */
 
 /* Main Pref Pane */
-#mainPrefPane {
+.prefpane {
   padding-top: 8px;
   padding-bottom: 10px;
   padding-inline-start: 8px;

From d214a4ca0a351dc2eacbbbcac7b1025c1650fdbb Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Thu, 13 Jul 2017 11:22:14 -0700
Subject: [PATCH 079/106] remove instantApply todos, since we'll reuse
 implementation in non-instantApply contexts

---
 toolkit/content/preferences.js | 7 -------
 1 file changed, 7 deletions(-)

diff --git a/toolkit/content/preferences.js b/toolkit/content/preferences.js
index b3d1a79dcc82..a2a6ed37c511 100644
--- a/toolkit/content/preferences.js
+++ b/toolkit/content/preferences.js
@@ -43,8 +43,6 @@ window.Preferences = {
     return document.documentElement.type || "";
   },
 
-  // TODO: remove this getter and the conditions that depend on it
-  // since instantApply is always true in this prefs implementation.
   get instantApply() {
     var doc = document.documentElement;
     return this.type == "child" ? doc.instantApply
@@ -90,9 +88,6 @@ class Preference extends EventEmitter {
       throw new Error(`preference with id '${id}' doesn't have name`);
     }
 
-    // TODO: remove the code below that only applies in non-instant apply mode,
-    // since instantApply is always true in this prefs implementation.
-
     // In non-instant apply mode, we must try and use the last saved state
     // from any previous opens of a child dialog instead of the value from
     // preferences, to pick up any edits a user may have made.
@@ -265,8 +260,6 @@ class Preference extends EventEmitter {
     this.updateElements();
   }
 
-  // TODO: remove this getter and the conditions that depend on it
-  // since instantApply is always true in this prefs implementation.
   get instantApply() {
     return Preferences.instantApply;
   }

From 97f523c005ec3792438cba1d43c646d9a20a8657 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Thu, 13 Jul 2017 11:28:58 -0700
Subject: [PATCH 080/106] remove batching TODO, since it'll get used when we
 convert prefwindow

---
 toolkit/content/preferences.js | 1 -
 1 file changed, 1 deletion(-)

diff --git a/toolkit/content/preferences.js b/toolkit/content/preferences.js
index a2a6ed37c511..a2c9c3c33f94 100644
--- a/toolkit/content/preferences.js
+++ b/toolkit/content/preferences.js
@@ -74,7 +74,6 @@ class Preference extends EventEmitter {
     this._disabled = false;
     this.readonly = false;
     this._useDefault = false;
-    // TODO = remove this, since it never gets changed.
     this.batching = false;
 
     this.id = id;

From b83eb212808df5cfbd16e043558b7d8abad4d316 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Thu, 13 Jul 2017 11:31:58 -0700
Subject: [PATCH 081/106] remove unnecessary TODO

---
 toolkit/content/preferences.js | 2 --
 1 file changed, 2 deletions(-)

diff --git a/toolkit/content/preferences.js b/toolkit/content/preferences.js
index a2c9c3c33f94..41937d7ed6da 100644
--- a/toolkit/content/preferences.js
+++ b/toolkit/content/preferences.js
@@ -122,8 +122,6 @@ class Preference extends EventEmitter {
   }
 
   _reportUnknownType() {
-    // TODO: instead of reporting an unknown type, throw an exception
-    // if a Preference object is instantiated with an unknown type.
     var consoleService = Components.classes["@mozilla.org/consoleservice;1"]
                                    .getService(Components.interfaces.nsIConsoleService);
     var msg = "Preference with id='" + this.id + "' and name='" +

From a973e38036837691c414679999f8602a5be91da2 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Thu, 13 Jul 2017 11:35:21 -0700
Subject: [PATCH 082/106] remove unnecessary TODOs

---
 browser/themes/osx/preferences/preferences.css | 2 --
 1 file changed, 2 deletions(-)

diff --git a/browser/themes/osx/preferences/preferences.css b/browser/themes/osx/preferences/preferences.css
index 78f0535ff4cc..4ae326a09e08 100644
--- a/browser/themes/osx/preferences/preferences.css
+++ b/browser/themes/osx/preferences/preferences.css
@@ -26,13 +26,11 @@ description {
   padding: 12px 12px 0 12px;
 }
 
-/* TODO: remove "prefpane" selector once we no longer use it anywhere. */
 prefpane .groupbox-body, .prefpane .groupbox-body {
   -moz-appearance: none;
   padding: 8px 4px 4px 4px;
 }
 
-/* TODO: remove "prefpane" selector once we no longer use it anywhere. */
 prefpane .groupbox-title, .prefpane .groupbox-title {
   background: url("chrome://global/skin/50pct_transparent_grey.png") repeat-x bottom left;
   margin-bottom: 4px;

From 94cc3f346a9d71d10c61fa0ebadbbf40c1ef148c Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Thu, 13 Jul 2017 16:15:49 -0700
Subject: [PATCH 083/106] remove TODO that is TO-DONE

---
 toolkit/content/preferences.js | 1 -
 1 file changed, 1 deletion(-)

diff --git a/toolkit/content/preferences.js b/toolkit/content/preferences.js
index 41937d7ed6da..c28238aee602 100644
--- a/toolkit/content/preferences.js
+++ b/toolkit/content/preferences.js
@@ -61,7 +61,6 @@ window.Preferences = {
   },
 };
 
-// TODO: figure out why we get errors when making this a weak observer.
 Preferences.rootBranch.addObserver("", Preferences);
 window.addEventListener("unload", Preferences.destructor.bind(Preferences), { once: true });
 

From 62d4d24dfe2d67087aced7a1ab020a6831d24cca Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Thu, 13 Jul 2017 16:35:23 -0700
Subject: [PATCH 084/106] expand comment about dual ways of retrieving
 preference; guard against undefined Preferences object

---
 toolkit/mozapps/preferences/fontbuilder.js | 19 ++++++++++++++++---
 1 file changed, 16 insertions(+), 3 deletions(-)

diff --git a/toolkit/mozapps/preferences/fontbuilder.js b/toolkit/mozapps/preferences/fontbuilder.js
index 35fb98ae3c06..3879930d6b45 100644
--- a/toolkit/mozapps/preferences/fontbuilder.js
+++ b/toolkit/mozapps/preferences/fontbuilder.js
@@ -91,10 +91,23 @@ var FontBuilder = {
     // - there is no setting
     // - the font selected by the user is no longer present (e.g. deleted from
     //   fonts folder)
-    // TODO: stop getting preference element once we've converted fonts.xul
-    // from XBL <preference> elements to JS Preference objects.
+    //
+    // NB: this script is used by three consumers: the Fonts child dialog
+    // implemented by fonts.xul, which uses <preference> elements implemented in
+    // XBL; the about:preferences dialog implemented by in-content/content.xul,
+    // which also uses <preference> elements; and the about:preferences dialog
+    // implemented by in-content-new/main.xul, which uses Preference objects.
+    //
+    // Therefore this method needs to support both ways of retrieving
+    // a preference: getting a <preference> element via getElementById
+    // getting a Preference object via Preferences.get.
+    //
+    // TODO: stop supporting retrieval of <preference> elements once fonts.xul
+    // is updated to use Preference objects and the in-content/ implementation
+    // of about:preferences is removed from the tree.
+    //
     let preference = document.getElementById(aElement.getAttribute("preference")) ||
-                     Preferences.get(aElement.getAttribute("preference"));
+                     (Preferences && Preferences.get(aElement.getAttribute("preference")));
     if (preference.value) {
       let fontItems = aElement.getElementsByAttribute("value", preference.value);
 

From 24a371840f91fcf8e0445429567a8dd6b757e8e4 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Thu, 13 Jul 2017 16:36:09 -0700
Subject: [PATCH 085/106] remove testing code

---
 browser/components/preferences/in-content-new/preferences.js | 2 --
 1 file changed, 2 deletions(-)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index ff8ec5b606c7..9bd1a4fff23d 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -26,8 +26,6 @@ Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource://gre/modules/AppConstants.jsm");
 Cu.import("resource://gre/modules/EventEmitter.jsm");
 
-window.addEventListener("load", () => dump(`time to load prefs: ${performance.now()}\n`), { once: true });
-
 var gLastHash = "";
 
 var gCategoryInits = new Map();

From fbfe612d7cc40b8735f6c8bbdec28a38f269a961 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Thu, 13 Jul 2017 16:37:14 -0700
Subject: [PATCH 086/106] remove startup perf 'test' that isn't a test

---
 .../in-content-new/tests/browser_startup.js        | 32 ----------------------
 1 file changed, 32 deletions(-)
 delete mode 100644 browser/components/preferences/in-content-new/tests/browser_startup.js

diff --git a/browser/components/preferences/in-content-new/tests/browser_startup.js b/browser/components/preferences/in-content-new/tests/browser_startup.js
deleted file mode 100644
index 58830532db81..000000000000
--- a/browser/components/preferences/in-content-new/tests/browser_startup.js
+++ /dev/null
@@ -1,32 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-* http://creativecommons.org/publicdomain/zero/1.0/ */
-
-"use strict";
-
-async function test() {
-  waitForExplicitFinish();
-
-  let totalTime = 0;
-  let initialTime = 0;
-
-  // open_preferences calls its callback function when it receives
-  // the "Initialized" event that is dispatched by the init_all function
-  // in preferences.js.  This test measures the time it takes to call
-  // that callback function relative to the "time origin" of the page
-  // (roughly equivalent to the beginning of navigation).
-
-  for (let i = 0; i < 100; i++) {
-    const win = await new Promise(resolve => open_preferences(resolve));
-    const time = win.performance.now();
-    win.close();
-    totalTime += time;
-    if (i === 0) {
-      initialTime = time;
-    }
-  }
-
-  Assert.ok(true, `Initial time to initialize prefs page: ${initialTime}.`);
-  Assert.ok(true, `Mean time to initialize prefs page: ${totalTime / 100}.`);
-
-  finish();
-}

From e4b14c641b7b0979781516ece8abb133a318f871 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Thu, 13 Jul 2017 17:03:20 -0700
Subject: [PATCH 087/106] ignore preprocessed files

---
 .eslintignore | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/.eslintignore b/.eslintignore
index 197e73382624..edbbb97502b9 100644
--- a/.eslintignore
+++ b/.eslintignore
@@ -78,6 +78,10 @@ browser/extensions/activity-stream/vendor/**
 browser/locales/**
 # imported from chromium
 browser/extensions/mortar/**
+# Several preferences/in-content-new/ files are preprocessed.
+browser/components/preferences/in-content-new/advanced.js
+browser/components/preferences/in-content-new/main.js
+browser/components/preferences/in-content-new/privacy.js
 
 # devtools/ exclusions
 devtools/client/canvasdebugger/**

From e74db2488d062fadc90f7c1fe8b209b9edea4d79 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Thu, 13 Jul 2017 17:07:29 -0700
Subject: [PATCH 088/106] remove startup perf 'test' that isn't a test harder

---
 browser/components/preferences/in-content-new/tests/browser.ini | 1 -
 1 file changed, 1 deletion(-)

diff --git a/browser/components/preferences/in-content-new/tests/browser.ini b/browser/components/preferences/in-content-new/tests/browser.ini
index 715d92c6fcfb..421419ed9f71 100644
--- a/browser/components/preferences/in-content-new/tests/browser.ini
+++ b/browser/components/preferences/in-content-new/tests/browser.ini
@@ -57,7 +57,6 @@ skip-if = e10s
 [browser_siteData.js]
 [browser_siteData2.js]
 [browser_site_login_exceptions.js]
-[browser_startup.js]
 [browser_subdialogs.js]
 support-files =
   subdialog.xul

From e9e00949e93dd55e757f88914c7fe95bb36b7b6f Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Thu, 13 Jul 2017 21:47:27 -0700
Subject: [PATCH 089/106] remove redundant AppConstants.jsm imports

---
 browser/components/preferences/in-content-new/applications.js | 1 -
 browser/components/preferences/in-content-new/containers.js   | 1 -
 browser/components/preferences/in-content-new/privacy.js      | 1 -
 3 files changed, 3 deletions(-)

diff --git a/browser/components/preferences/in-content-new/applications.js b/browser/components/preferences/in-content-new/applications.js
index 57a20f248793..9ff7a43acc95 100644
--- a/browser/components/preferences/in-content-new/applications.js
+++ b/browser/components/preferences/in-content-new/applications.js
@@ -9,7 +9,6 @@
 // Constants & Enumeration Values
 
 Components.utils.import("resource://gre/modules/Services.jsm");
-Components.utils.import("resource://gre/modules/AppConstants.jsm");
 
 const TYPE_MAYBE_FEED = "application/vnd.mozilla.maybe.feed";
 const TYPE_MAYBE_VIDEO_FEED = "application/vnd.mozilla.maybe.video.feed";
diff --git a/browser/components/preferences/in-content-new/containers.js b/browser/components/preferences/in-content-new/containers.js
index 3655fbc93f5d..c713811ef42c 100644
--- a/browser/components/preferences/in-content-new/containers.js
+++ b/browser/components/preferences/in-content-new/containers.js
@@ -4,7 +4,6 @@
 
 /* import-globals-from preferences.js */
 
-Components.utils.import("resource://gre/modules/AppConstants.jsm");
 Components.utils.import("resource://gre/modules/ContextualIdentityService.jsm");
 
 const containersBundle = Services.strings.createBundle("chrome://browser/locale/preferences/containers.properties");
diff --git a/browser/components/preferences/in-content-new/privacy.js b/browser/components/preferences/in-content-new/privacy.js
index 85bc3b23b2df..9b043b4d1041 100644
--- a/browser/components/preferences/in-content-new/privacy.js
+++ b/browser/components/preferences/in-content-new/privacy.js
@@ -4,7 +4,6 @@
 
 /* import-globals-from preferences.js */
 
-Components.utils.import("resource://gre/modules/AppConstants.jsm");
 Components.utils.import("resource://gre/modules/PluralForm.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "ContextualIdentityService",

From 9caf03590df4f63426421550c87b089927e0e3ca Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Thu, 13 Jul 2017 22:08:45 -0700
Subject: [PATCH 090/106] undo preprocessing of prefs scripts; fix linting
 issues

---
 .eslintignore                                      |  4 --
 .../preferences/in-content-new/advanced.js         | 25 +++++------
 .../components/preferences/in-content-new/jar.mn   |  6 +--
 .../components/preferences/in-content-new/main.js  | 51 ++++++++++------------
 .../preferences/in-content-new/preferences.js      |  1 -
 .../preferences/in-content-new/privacy.js          | 10 ++---
 toolkit/content/preferences.js                     |  4 +-
 7 files changed, 47 insertions(+), 54 deletions(-)

diff --git a/.eslintignore b/.eslintignore
index edbbb97502b9..197e73382624 100644
--- a/.eslintignore
+++ b/.eslintignore
@@ -78,10 +78,6 @@ browser/extensions/activity-stream/vendor/**
 browser/locales/**
 # imported from chromium
 browser/extensions/mortar/**
-# Several preferences/in-content-new/ files are preprocessed.
-browser/components/preferences/in-content-new/advanced.js
-browser/components/preferences/in-content-new/main.js
-browser/components/preferences/in-content-new/privacy.js
 
 # devtools/ exclusions
 devtools/client/canvasdebugger/**
diff --git a/browser/components/preferences/in-content-new/advanced.js b/browser/components/preferences/in-content-new/advanced.js
index c9459e3cdd83..0df2a4f2b657 100644
--- a/browser/components/preferences/in-content-new/advanced.js
+++ b/browser/components/preferences/in-content-new/advanced.js
@@ -13,21 +13,20 @@ Components.utils.import("resource://gre/modules/XPCOMUtils.jsm");
 window.addEventListener("DOMContentLoaded", function() {
   Preferences.addAll([
     { id: "browser.preferences.advanced.selectedTabIndex", type: "int" },
-
-    // Update tab
-#ifdef MOZ_UPDATER
-    { id: "app.update.enabled", type: "bool" },
-    { id: "app.update.auto", type: "bool" },
-
-    { id: "app.update.disable_button.showUpdateHistory", type: "bool" },
-
-#ifdef MOZ_MAINTENANCE_SERVICE
-    { id: "app.update.service.enabled", type: "bool" },
-#endif
-#endif
-
     { id: "browser.search.update", type: "bool" },
   ]);
+
+  // Update tab
+  if (AppConstants.MOZ_UPDATER) {
+    Preferences.addAll([
+      { id: "app.update.enabled", type: "bool" },
+      { id: "app.update.auto", type: "bool" },
+      { id: "app.update.disable_button.showUpdateHistory", type: "bool" },
+    ]);
+    if (AppConstants.MOZ_MAINTENANCE_SERVICE) {
+      Preferences.add({ id: "app.update.service.enabled", type: "bool" });
+    }
+  }
 }, { once: true, capture: true });
 
 var gAdvancedPane = {
diff --git a/browser/components/preferences/in-content-new/jar.mn b/browser/components/preferences/in-content-new/jar.mn
index ef212c6c1fef..2f404e404ded 100644
--- a/browser/components/preferences/in-content-new/jar.mn
+++ b/browser/components/preferences/in-content-new/jar.mn
@@ -7,10 +7,10 @@ browser.jar:
 *  content/browser/preferences/in-content-new/preferences.xul
    content/browser/preferences/in-content-new/subdialogs.js
 
-*  content/browser/preferences/in-content-new/main.js
-*  content/browser/preferences/in-content-new/privacy.js
+   content/browser/preferences/in-content-new/main.js
+   content/browser/preferences/in-content-new/privacy.js
    content/browser/preferences/in-content-new/containers.js
-*  content/browser/preferences/in-content-new/advanced.js
+   content/browser/preferences/in-content-new/advanced.js
    content/browser/preferences/in-content-new/applications.js
    content/browser/preferences/in-content-new/sync.js
    content/browser/preferences/in-content-new/findInPage.js
diff --git a/browser/components/preferences/in-content-new/main.js b/browser/components/preferences/in-content-new/main.js
index 285b823cb0b4..624769443c64 100644
--- a/browser/components/preferences/in-content-new/main.js
+++ b/browser/components/preferences/in-content-new/main.js
@@ -32,21 +32,10 @@ if (AppConstants.MOZ_DEV_EDITION) {
 // and the Preference objects are available to the pane initializer.
 window.addEventListener("DOMContentLoaded", function() {
   Preferences.addAll([
-#ifdef E10S_TESTING_ONLY
-    { id: "browser.tabs.remote.autostart", type: "bool" },
-    { id: "e10sTempPref", name: "browser.tabs.remote.autostart.2", type: "bool" },
-    { id: "e10sForceEnable", name: "browser.tabs.remote.force-enable", type: "bool" },
-#endif
-
     /* Startup */
     { id: "browser.startup.page", type: "int" },
     { id: "browser.startup.homepage", type: "wstring" },
 
-#ifdef HAVE_SHELL_SERVICE
-    { id: "browser.shell.checkDefaultBrowser", type: "bool" },
-    { id: "pref.general.disable_button.default_browser", type: "bool" },
-#endif
-
     { id: "pref.browser.homepage.disable_button.current_page", type: "bool" },
     { id: "pref.browser.homepage.disable_button.bookmark_page", type: "bool" },
     { id: "pref.browser.homepage.disable_button.restore_default", type: "bool" },
@@ -86,9 +75,6 @@ window.addEventListener("DOMContentLoaded", function() {
     { id: "browser.tabs.warnOnClose", type: "bool" },
     { id: "browser.tabs.warnOnOpen", type: "bool" },
     { id: "browser.sessionstore.restore_on_demand", type: "bool" },
-#ifdef XP_WIN
-    { id: "browser.taskbar.previews.enable", type: "bool" },
-#endif
     { id: "browser.ctrlTab.previews", type: "bool" },
 
     /* Fonts */
@@ -110,9 +96,6 @@ window.addEventListener("DOMContentLoaded", function() {
     { id: "accessibility.browsewithcaret", type: "bool" },
     { id: "accessibility.typeaheadfind", type: "bool" },
     { id: "accessibility.blockautorefresh", type: "bool" },
-#ifdef XP_WIN
-    { id: "ui.osk.enabled", type: "bool" },
-#endif
 
     /* Browsing
      * general.autoScroll
@@ -132,6 +115,28 @@ window.addEventListener("DOMContentLoaded", function() {
     { id: "dom.ipc.processCount", type: "int" },
     { id: "layers.acceleration.disabled", type: "bool", inverted: true },
   ]);
+
+  if (AppConstants.E10S_TESTING_ONLY) {
+    Preferences.addAll([
+      { id: "browser.tabs.remote.autostart", type: "bool" },
+      { id: "e10sTempPref", name: "browser.tabs.remote.autostart.2", type: "bool" },
+      { id: "e10sForceEnable", name: "browser.tabs.remote.force-enable", type: "bool" },
+    ]);
+  }
+
+  if (AppConstants.HAVE_SHELL_SERVICE) {
+    Preferences.addAll([
+      { id: "browser.shell.checkDefaultBrowser", type: "bool" },
+      { id: "pref.general.disable_button.default_browser", type: "bool" },
+    ]);
+  }
+
+  if (AppConstants.platform == "win") {
+    Preferences.addAll([
+      { id: "browser.taskbar.previews.enable", type: "bool" },
+      { id: "ui.osk.enabled", type: "bool" },
+    ]);
+  }
 }, { once: true, capture: true });
 
 const ENGINE_FLAVOR = "text/x-moz-search-engine";
@@ -814,11 +819,7 @@ var gMainPane = {
     var defaultFontTypePref = kDefaultFontType.replace(/%LANG%/, aLanguageGroup);
     var preference = Preferences.get(defaultFontTypePref);
     if (!preference) {
-      preference = Preferences.add({
-        id: defaultFontTypePref,
-        name: defaultFontTypePref,
-        type: "string",
-      });
+      preference = Preferences.add({ id: defaultFontTypePref, type: "string" });
       preference.on("change", gMainPane._rebuildFonts.bind(gMainPane));
     }
     return preference.value;
@@ -847,11 +848,7 @@ var gMainPane = {
       var preference = Preferences.get(prefs[i].format.replace(/%LANG%/, aLanguageGroup));
       if (!preference) {
         var name = prefs[i].format.replace(/%LANG%/, aLanguageGroup);
-        preference = Preferences.add({
-          id: name,
-          name: name,
-          type: prefs[i].type,
-        });
+        preference = Preferences.add({ id: name, type: prefs[i].type });
       }
 
       if (!prefs[i].element)
diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 9bd1a4fff23d..9176b73ce441 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -24,7 +24,6 @@ var Cr = Components.results;
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource://gre/modules/AppConstants.jsm");
-Cu.import("resource://gre/modules/EventEmitter.jsm");
 
 var gLastHash = "";
 
diff --git a/browser/components/preferences/in-content-new/privacy.js b/browser/components/preferences/in-content-new/privacy.js
index 9b043b4d1041..219d2853cb7a 100644
--- a/browser/components/preferences/in-content-new/privacy.js
+++ b/browser/components/preferences/in-content-new/privacy.js
@@ -115,12 +115,12 @@ window.addEventListener("DOMContentLoaded", function() {
     { id: "browser.offline-apps.notify", type: "bool" },
 
     { id: "browser.cache.disk.smart_size.enabled", type: "bool", inverted: "true" },
-
-    // Data Choices tab
-#ifdef MOZ_CRASHREPORTER
-    { id: "browser.crashReports.unsubmittedCheck.autoSubmit", type: "bool" },
-#endif
   ]);
+
+  // Data Choices tab
+  if (AppConstants.MOZ_CRASHREPORTER) {
+    Preferences.add({ id: "browser.crashReports.unsubmittedCheck.autoSubmit", type: "bool" });
+  }
 }, { once: true, capture: true });
 
 var gPrivacyPane = {
diff --git a/toolkit/content/preferences.js b/toolkit/content/preferences.js
index c28238aee602..1c8b6d43b1af 100644
--- a/toolkit/content/preferences.js
+++ b/toolkit/content/preferences.js
@@ -4,8 +4,10 @@
 
 "use strict";
 
+Components.utils.import("resource://gre/modules/EventEmitter.jsm");
+
 // We attach this to the window object so tests have access to it.
-window.Preferences = {
+const Preferences = window.Preferences = {
   all: {},
 
   add(prefInfo) {

From cf9060c38d6c39f550cbe381849adabb19c1412c Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Thu, 13 Jul 2017 22:14:40 -0700
Subject: [PATCH 091/106] Revert "Add |mach watch|: pywatchman based |mach
 build faster| daemon."

This reverts commit da012fb3bd8dfddfe7d5aa16f32b535397ee2995.
---
 browser/base/content/browser-sets.inc         |   6 -
 browser/base/content/browser.js               |  24 ---
 browser/components/nsBrowserGlue.js           | 208 +---------------------
 devtools/client/shared/file-watcher-worker.js |   2 +-
 python/mozbuild/mozbuild/faster_daemon.py     | 244 --------------------------
 python/mozbuild/mozbuild/mach_commands.py     |  15 --
 python/mozbuild/mozpack/copier.py             |  22 ---
 python/mozbuild/mozpack/files.py              |  26 ---
 8 files changed, 2 insertions(+), 545 deletions(-)
 delete mode 100644 python/mozbuild/mozbuild/faster_daemon.py

diff --git a/browser/base/content/browser-sets.inc b/browser/base/content/browser-sets.inc
index 3e256200f37f..9a9d617d111c 100644
--- a/browser/base/content/browser-sets.inc
+++ b/browser/base/content/browser-sets.inc
@@ -16,7 +16,6 @@
   </stringbundleset>
 
   <commandset id="mainCommandSet">
-    <command id="cmd_quickRestart" oncommand="QuickRestart()"/>
     <command id="cmd_newNavigator" oncommand="OpenBrowserWindow()"/>
     <command id="cmd_handleBackspace" oncommand="BrowserHandleBackspace();" />
     <command id="cmd_handleShiftBackspace" oncommand="BrowserHandleShiftBackspace();" />
@@ -196,11 +195,6 @@
   </broadcasterset>
 
   <keyset id="mainKeyset">
-    <key id="key_quickRestart"
-         key="R"
-         command="cmd_quickRestart"
-         modifiers="accel,alt"
-    />
     <key id="key_newNavigator"
          key="&newNavigatorCmd.key;"
          command="cmd_newNavigator"
diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
index 3d2e21e65985..031c1efc684d 100755
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -4116,30 +4116,6 @@ function toOpenWindowByType(inType, uri, features) {
     window.open(uri, "_blank", "chrome,extrachrome,menubar,resizable,scrollbars,status,toolbar");
 }
 
-function QuickRestart() {
-  var {FileUtils} = Components.utils.import("resource://gre/modules/FileUtils.jsm", {});
-  var file = new FileUtils.File("~/Code/mozilla-central/MARK");
-  doRestart();
-
-  function doRestart() {
-    if (file.exists()) {
-      console.log("Build is still running.. waiting 1 second");
-      document.documentElement.style.opacity = ".2";
-      setTimeout(doRestart, 1000);
-      return;
-    }
-    let canceled = Cc["@mozilla.org/supports-PRBool;1"]
-        .createInstance(Ci.nsISupportsPRBool);
-
-    Services.obs.notifyObservers(canceled, "quit-application-requested", "restart");
-
-    if (canceled.data) return false;
-
-    Cc['@mozilla.org/toolkit/app-startup;1'].getService(Ci.nsIAppStartup)
-        .quit(Ci.nsIAppStartup.eAttemptQuit | Ci.nsIAppStartup.eRestart);
-  }
-}
-
 function OpenBrowserWindow(options) {
   var telemetryObj = {};
   TelemetryStopwatch.start("FX_NEW_WINDOW_MS", telemetryObj);
diff --git a/browser/components/nsBrowserGlue.js b/browser/components/nsBrowserGlue.js
index 836eb2ac09cb..678e10284e56 100644
--- a/browser/components/nsBrowserGlue.js
+++ b/browser/components/nsBrowserGlue.js
@@ -20,7 +20,7 @@ XPCOMUtils.defineLazyGetter(this, "WeaveService", () =>
 );
 XPCOMUtils.defineLazyModuleGetter(this, "ContextualIdentityService",
                                   "resource://gre/modules/ContextualIdentityService.jsm");
-XPCOMUtils.defineLazyModuleGetter(this, "console", "resource://gre/modules/Console.jsm");
+
 // lazy module getters
 
 /* global AboutHome:false, AboutNewTab:false, AddonManager:false, AppMenuNotifications:false,
@@ -609,7 +609,6 @@ BrowserGlue.prototype = {
     SessionStore.init();
     BrowserUsageTelemetry.init();
     BrowserUITelemetry.init();
-    DevRefresher.init();
 
     if (AppConstants.INSTALL_COMPACT_THEMES) {
       let vendorShortName = gBrandBundle.GetStringFromName("vendorShortName");
@@ -2832,208 +2831,3 @@ var globalMM = Cc["@mozilla.org/globalmessagemanager;1"].getService(Ci.nsIMessag
 globalMM.addMessageListener("UITour:onPageEvent", function(aMessage) {
   UITour.onPageEvent(aMessage, aMessage.data);
 });
-
-
-var DevRefresher = {
-  resolveURIToLocalPath(aURI) {
-    let resolved;
-    switch (aURI.scheme) {
-      case "jar":
-      case "file":
-        return aURI;
-
-      case "chrome":
-        resolved = Cc["@mozilla.org/chrome/chrome-registry;1"].
-                   getService(Ci.nsIChromeRegistry).convertChromeURL(aURI);
-        return this.resolveURIToLocalPath(resolved);
-
-      case "resource":
-        resolved = Cc["@mozilla.org/network/protocol;1?name=resource"].
-                   getService(Ci.nsIResProtocolHandler).resolveURI(aURI);
-        aURI = Services.io.newURI(resolved, null, null);
-        return this.resolveURIToLocalPath(aURI);
-
-      default:
-        return null;
-    }
-  },
-  getLocalPath(url) {
-    let uri = null;
-    let ios = Components.classes['@mozilla.org/network/io-service;1'].getService(Components.interfaces["nsIIOService"]);
-    try {
-        uri = this.resolveURIToLocalPath(ios.newURI(url, "UTF-8", null));
-    } catch(e){}
-
-    let ret = null;
-    if (uri) {
-      ret = uri.spec.replace(/file:\/\//, "");
-    }
-    return ret;
-  },
-
-  watchFiles(path, onFileChanged) {
-    const watchWorker = new ChromeWorker(
-      "resource://devtools/client/shared/file-watcher-worker.js"
-    );
-
-    watchWorker.onmessage = event => {
-      // We need to turn a local path back into a resource URI (or
-      // chrome). This means that this system will only work when built
-      // files are symlinked, so that these URIs actually read from
-      // local sources. There might be a better way to do this.
-      const { path: newPath } = event.data;
-      onFileChanged(newPath);
-    };
-
-    watchWorker.postMessage({
-      path,
-      fileRegex: /\.(css|js|html|xhtml|xul)$/
-    });
-    return watchWorker;
-  },
-
-
-  iterStyleNodes(window, func) {
-    for (let node of window.document.childNodes) {
-      // Look for ProcessingInstruction nodes.
-      if (node.nodeType === 7) {
-        func(node);
-      }
-    }
-
-    const links = window.document.getElementsByTagNameNS(
-      "http://www.w3.org/1999/xhtml", "link"
-    );
-    for (let node of links) {
-      func(node);
-    }
-  },
-
-  replaceCSS(window, fileURI) {
-    const document = window.document;
-    const appendRandom = (href) => {
-      return href.split("?s")[0] + `?s=${Math.random()}`;
-    };
-    // console.log("Checking for replacement at:", window.location.toString(), "with: ", fileURI);
-
-    // Scan every CSS tag and reload ones that match the file we are
-    // looking for.
-    this.iterStyleNodes(window, node => {
-      if (node.nodeType === 7) {
-        // xml-stylesheet declaration
-        // Convert a string like href="chrome://browser/content/browser.css" type="text/css" to:
-        // chrome://browser/content/browser.css, then convert it to a local path
-        let originalHref = node.data.match(/href=([^\s]*)/)[1].replace(/["']/g, '')
-        const path = this.getLocalPath(originalHref);
-        // console.log("Looking into PI", "\nhref: " + originalHref, "\npath: " + path, "\nfileURI: " + fileURI);
-        if (path && path.includes(fileURI)) {
-          // Special case chrome://browser/skin/ which does a redircet
-          if (originalHref == "chrome://browser/skin/") {
-            originalHref = "chrome://browser/skin/browser.css";
-          }
-          console.log("Replacing the PI at: ", originalHref);
-          const newNode = window.document.createProcessingInstruction(
-            "xml-stylesheet",
-            `href="${appendRandom(originalHref)}" type="text/css"`
-          );
-          document.insertBefore(newNode, node);
-          document.removeChild(node);
-        }
-      } else {
-        const originalHref = node.href;
-        const path = this.getLocalPath(originalHref);
-        // console.log("Looking into stylesheet", path, fileURI);
-        if (path && path.includes(fileURI)) {
-          console.log("Replacing the stylesheet at: ", originalHref);
-          const parentNode = node.parentNode;
-          const newNode = window.document.createElementNS(
-            "http://www.w3.org/1999/xhtml",
-            "link"
-          );
-          newNode.rel = "stylesheet";
-          newNode.type = "text/css";
-          newNode.href = appendRandom(originalHref);
-
-          parentNode.insertBefore(newNode, node);
-          parentNode.removeChild(node);
-        }
-     }
-    });
-  },
-
-  replaceCSSImports(window, fileURI) {
-    const document = window.document;
-    const appendRandom = (href) => {
-      return href.split("?s")[0] + `?s=${Math.random()}`;
-    };
-    // Only match the filename. False positives are much better than
-    // missing updates, as all that would happen is we reload more
-    // resources than we need. We do this because many resources only
-    // use relative paths.
-    const parts = fileURI.split("/");
-    const file = parts[parts.length - 1];
-
-    // Scan every single rule in the entire page for any reference to
-    // this resource, and re-insert the rule to force it to update.
-    for (let sheet of document.styleSheets) {
-      if (sheet.ownerNode.nodeType === 7) { continue; }
-      for (let i = 0; i < sheet.cssRules.length; i++) {
-        const rule = sheet.cssRules[i];
-        if (rule.type === rule.IMPORT_RULE) {
-          // console.log("Found an import", "\n" + rule.href,  "\n" + this.getLocalPath(rule.href.split("?s")[0]), "\n" + fileURI);
-          // TODO (if nested imports are used) - recurse into the imported sheet
-          if (this.getLocalPath(rule.href.split("?s")[0]) === fileURI) {
-              let newRule = `@import url("${appendRandom(rule.href)}");`;
-              sheet.deleteRule(i);
-              sheet.insertRule(newRule, i);
-          }
-        }
-      }
-    }
-  },
-
-  getAllDocuments(win) {
-    let walker = Cc["@mozilla.org/inspector/deep-tree-walker;1"].
-                 createInstance(Ci.inIDeepTreeWalker);
-    walker.showAnonymousContent = true;
-    walker.showSubDocuments = true;
-    walker.showDocumentsAsNodes = true;
-    walker.init(win.document.documentElement, Ci.nsIDOMNodeFilter.SHOW_ELEMENT);
-    let documents = [win.document]
-    while (walker.nextNode()) {
-      if (walker.currentNode.nodeType === 9) {
-        documents.push(walker.currentNode)
-      }
-    }
-    return documents;
-  },
-
-  init() {
-    const watchRoot = this.getLocalPath("resource://");
-    this.worker = this.watchFiles(watchRoot, path => {
-      Services.obs.notifyObservers(null, "startupcache-invalidate");
-
-      // Don't traverse stylesheets unless if a css file changed
-      if (!path.endsWith('css')) {
-        return;
-      }
-
-      // XXX: remove double slash that's coming back from worker:
-      path = path.replace('//', '/');
-
-      // This covers extra globals like additional browser windows and the browser toolbox
-      var wm = Components.classes["@mozilla.org/appshell/window-mediator;1"]
-                     .getService(Components.interfaces.nsIWindowMediator);
-      var enumerator = wm.getEnumerator(null);
-      while(enumerator.hasMoreElements()) {
-        var win = enumerator.getNext();
-        // This covers extra globals within a window, like devtools frames
-        let allDocuments = this.getAllDocuments(win);
-        for (var i = 0; i < allDocuments.length; i++) {
-          this.replaceCSS(allDocuments[i].defaultView, path);
-          this.replaceCSSImports(allDocuments[i].defaultView, path);
-        }
-      }
-    });
-  },
-};
diff --git a/devtools/client/shared/file-watcher-worker.js b/devtools/client/shared/file-watcher-worker.js
index 2bd9fc196822..c9edd612765d 100644
--- a/devtools/client/shared/file-watcher-worker.js
+++ b/devtools/client/shared/file-watcher-worker.js
@@ -77,5 +77,5 @@ onmessage = function (event) {
     scanFiles(files, changedFile => {
       postMessage({ path: changedFile });
     });
-  }, 500);
+  }, 1000);
 };
diff --git a/python/mozbuild/mozbuild/faster_daemon.py b/python/mozbuild/mozbuild/faster_daemon.py
deleted file mode 100644
index de8cae541eba..000000000000
--- a/python/mozbuild/mozbuild/faster_daemon.py
+++ /dev/null
@@ -1,244 +0,0 @@
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-
-'''
-XXX
-'''
-
-from __future__ import absolute_import, print_function, unicode_literals
-
-import collections
-import os
-import sys
-import time
-
-import mozpack.path as mozpath
-from mozpack.manifests import (
-    InstallManifest,
-)
-from mozpack.copier import (
-    FileCopier,
-    FileRegistrySubtree,
-)
-from mozpack.files import (
-    AbsoluteSymlinkFile,
-    File,
-    PreprocessedFile,
-    FileFinder,
-)
-from mozbuild import shellutil
-
-# Watchman integration cribbed entirely from
-# https://github.com/facebook/watchman/blob/19aebfebb0b5b0b5174b3914a879370ffc5dac37/python/bin/watchman-wait
-import pywatchman
-
-
-def print_copy_result(elapsed, destdir, result, verbose=True):
-    COMPLETE = 'Elapsed: {elapsed:.2f}s; From {dest}: Kept {existing} existing; ' \
-        'Added/updated {updated}; ' \
-        'Removed {rm_files} files and {rm_dirs} directories.'
-
-    print(COMPLETE.format(
-        elapsed=elapsed,
-        dest=destdir,
-        existing=result.existing_files_count,
-        updated=result.updated_files_count,
-        rm_files=result.removed_files_count,
-        rm_dirs=result.removed_directories_count))
-
-    if verbose:
-        if result.updated_files:
-            print("Updated files:")
-            for file in result.updated_files:
-                print("  {}".format(file))
-
-
-class Daemon(object):
-    def __init__(self, config_environment):
-        self.config_environment = config_environment
-        self._file_copier = None
-        self._client = None
-        self._subscriptions = []
-
-    @property
-    def defines(self):
-        defines = dict((name, self.config_environment.defines[name]) \
-                       for name in self.config_environment.defines \
-                       if not name in self.config_environment.non_global_defines)
-        defines.update({
-            'AB_CD': 'en-US',
-            'BUILD_FASTER': 1,
-        })
-        defines.update({
-            'BOOKMARKS_INCLUDE_DIR': mozpath.join(self.config_environment.topsrcdir,
-                                                  'browser', 'locales', 'en-US', 'profile'),
-        })
-        return defines
-
-    @property
-    def file_copier(self):
-        if self._file_copier is None:
-            file_copier = FileCopier()
-
-            finder = FileFinder(mozpath.join(self.config_environment.topobjdir, 'faster'))
-            for path, f in finder.find('*.track'):
-                manifest = InstallManifest(fileobj=f.open())
-
-                # Turn 'install_dist_bin_browser.track' into ['browser'].
-                parts = os.path.basename(os.path.splitext(path)[0]).split('_')
-                parts = parts[3:] # Drop leading install_dist_bin.
-
-                if not parts:
-                    # XXX: maybe we need to handle the top-level dist/bin manifest?
-                    continue
-                manifest.populate_registry(FileRegistrySubtree(mozpath.join(*parts), file_copier),
-                                           defines_override=self.defines)
-
-            self._file_copier = file_copier
-
-        return self._file_copier
-
-    def watch_set(self, depth=2):
-        file_copier = self.file_copier
-
-        # We want the set of watches to be "reasonable", so we watch
-        # (by default) $TOPSRCDIR/two/levels or $TOPSRCDIR/onelevel.
-        # Many folks root $TOPOBJDIR in $TOPSRCDIR, so we handle that
-        # situation specially.  We definitely don't want to watch
-        # $TOPOBJDIR by mistake!
-        watches = set()
-        for input in file_copier.input_to_outputs_tree().keys():
-            rel = mozpath.commonprefix((input, self.config_environment.topobjdir))
-            if rel.startswith(self.config_environment.topobjdir):
-                continue
-
-            rel = mozpath.relpath(input, self.config_environment.topsrcdir)
-            if rel:
-                partial_paths = file_copier._partial_paths(rel)
-                if len(partial_paths) >= 2:
-                    watches.add(partial_paths[-2])
-                elif len(partial_paths) >= 1:
-                    watches.add(partial_paths[-1])
-            else:
-                raise Exception("Refusing to watch input ({}) not rooted in topsrcdir ({})"
-                                .format(input, self.config_environment.topsrcdir))
-
-        return watches
-
-    def subscribe_to_dir(self, name, dir_to_watch):
-        query = {
-            'expression': ['true'],
-            'fields': ['name'],
-        }
-        watch = self.client.query('watch-project', dir_to_watch)
-        if 'warning' in watch:
-            print('WARNING: ', watch['warning'], file=sys.stderr)
-
-        root = watch['watch']
-        if 'relative_path' in watch:
-            query['relative_root'] = watch['relative_path']
-
-        # Get the initial clock value so that we only get updates.
-        query['since'] = self.client.query('clock', root)['clock']
-
-        return self.client.query('subscribe', root, name, query)
-
-    def changed_files(self, verbose=True):
-        # in theory we can parse just the result variable here, but
-        # the client object will accumulate all subscription results
-        # over time, so we ask it to remove and return those values
-        # for each of the subscriptions
-
-        files = set()
-        for sub in self._subscriptions:
-            name = sub['subscribe']
-            data = self.client.getSubscription(name)
-            if data is None:
-                continue
-
-            for dat in data:
-                files |= set([mozpath.join(self.config_environment.topsrcdir, name, f)
-                              for f in dat.get('files', [])])
-
-            files = set([f for f in files if os.path.isfile(f)])
-
-        return files
-
-    def incremental_copy(self, copier, force=False, verbose=True):
-        # Just like the 'repackage' target in browser/app/Makefile.in.
-        if 'cocoa' == self.config_environment.substs['MOZ_WIDGET_TOOLKIT']:
-            bundledir = mozpath.join(self.config_environment.topobjdir, 'dist',
-                                     self.config_environment.substs['MOZ_MACBUNDLE_NAME'],
-                                     'Contents', 'Resources')
-            start = time.time()
-            result = copier.copy(bundledir,
-                                 skip_if_older=not force,
-                                 remove_unaccounted=False,
-                                 remove_all_directory_symlinks=False,
-                                 remove_empty_directories=False)
-            print_copy_result(time.time() - start, bundledir, result, verbose=verbose)
-
-        destdir = mozpath.join(self.config_environment.topobjdir, 'dist', 'bin')
-        start = time.time()
-        result = copier.copy(destdir,
-                             skip_if_older=not force,
-                             remove_unaccounted=False,
-                             remove_all_directory_symlinks=False,
-                             remove_empty_directories=False)
-        print_copy_result(time.time() - start, destdir, result, verbose=verbose)
-
-    def watch(self, verbose=True):
-        self.client = pywatchman.client()
-        try:
-            self.client.capabilityCheck(required=['term-dirname', 'cmd-watch-project', 'wildmatch'])
-
-            for watch in sorted(self.watch_set()):
-                name = watch
-                path = mozpath.join(self.config_environment.topsrcdir, watch)
-                sub = self.subscribe_to_dir(name, path)
-                self._subscriptions.append(sub)
-                if verbose:
-                    print("Watching srcdir {}".format(path))
-
-        except pywatchman.CommandError as ex:
-            print('watchman:', ex.msg, file=sys.stderr)
-            return 1
-
-        input_to_outputs = self.file_copier.input_to_outputs_tree()
-
-        while True:
-            try:
-                result = self.client.receive()
-
-                all_outputs = set()
-                inputs = self.changed_files(verbose=verbose)
-                if inputs:
-                    print("Changed inputs:")
-                    for input in inputs:
-                        print("  {}".format(input))
-                        outputs = set(input_to_outputs[input])
-                        for output in outputs:
-                            print("    {}".format(output))
-                        all_outputs |= outputs
-
-                if all_outputs:
-                    partial_copier = FileCopier()
-                    for output in all_outputs:
-                        partial_copier.add(output, self.file_copier[output])
-
-                    self.incremental_copy(partial_copier, force=True, verbose=verbose)
-
-            except pywatchman.SocketTimeout as ex:
-                # Let's check to see if we're still functional.
-                try:
-                    vers = self.client.query('version')
-                except Exception as ex:
-                    print('watchman:', str(ex), file=sys.stderr)
-                    sys.exit(1)
-
-            except KeyboardInterrupt:
-                # Suppress ugly stack trace when user hits Ctrl-C.
-                sys.exit(3)
-
-        return 0
diff --git a/python/mozbuild/mozbuild/mach_commands.py b/python/mozbuild/mozbuild/mach_commands.py
index f4b8f19d24ca..500fd0d0879d 100644
--- a/python/mozbuild/mozbuild/mach_commands.py
+++ b/python/mozbuild/mozbuild/mach_commands.py
@@ -305,21 +305,6 @@ def __call__(self, parser, namespace, values, option_string=None):
 
 
 @CommandProvider
-class Watch(MachCommandBase):
-    """Interface to watch and re-build the tree."""
-
-    @Command('watch', category='build', description='Watch and re-build the tree.')
-    def watch(self):
-        """Watch and re-build the source tree."""
-        self._activate_virtualenv()
-        self.virtualenv_manager.install_pip_package('pywatchman==1.3.0')
-
-        from mozbuild.faster_daemon import Daemon
-        daemon = Daemon(self.config_environment)
-        return daemon.watch()
-
-
-@CommandProvider
 class Build(MachCommandBase):
     """Interface to build the tree."""
 
diff --git a/python/mozbuild/mozpack/copier.py b/python/mozbuild/mozpack/copier.py
index d8e55154e37a..386930fe7264 100644
--- a/python/mozbuild/mozpack/copier.py
+++ b/python/mozbuild/mozpack/copier.py
@@ -16,7 +16,6 @@
 import mozpack.path as mozpath
 import errno
 from collections import (
-    defaultdict,
     Counter,
     OrderedDict,
 )
@@ -154,27 +153,6 @@ def required_directories(self):
         '''
         return set(k for k, v in self._required_directories.items() if v > 0)
 
-    def output_to_inputs_tree(self):
-        '''
-        Return a dictionary mapping each output path to the set of its
-        required input paths.
-        '''
-        tree = {}
-        for output, file in self:
-            tree[output] = set(file.inputs())
-        return tree
-
-    def input_to_outputs_tree(self):
-        '''
-        Return a dictionary mapping each input path to the set of
-        impacted output paths.
-        '''
-        tree = defaultdict(set)
-        for output, file in self:
-            for input in file.inputs():
-                tree[input].add(output)
-        return tree
-
 
 class FileRegistrySubtree(object):
     '''A proxy class to give access to a subtree of an existing FileRegistry.
diff --git a/python/mozbuild/mozpack/files.py b/python/mozbuild/mozpack/files.py
index 1e19d28bf68b..58ff84349e9d 100644
--- a/python/mozbuild/mozpack/files.py
+++ b/python/mozbuild/mozpack/files.py
@@ -234,12 +234,6 @@ def mode(self):
         '''
         return None
 
-    def inputs(self):
-        '''
-        Return an iterator of the input file paths that impact this output file.
-        '''
-        raise NotImplementedError('BaseFile.inputs() not implemented. Bug XXX.')
-
 
 class File(BaseFile):
     '''
@@ -267,9 +261,6 @@ def read(self):
     def size(self):
         return os.stat(self.path).st_size
 
-    def inputs(self):
-        yield self.path
-
 
 class ExecutableFile(File):
     '''
@@ -432,9 +423,6 @@ def copy(self, dest, skip_if_older=True):
             errors.fatal("Required existing file doesn't exist: %s" %
                 dest.path)
 
-    def inputs(self):
-        return iter(())
-
 
 class PreprocessedFile(BaseFile):
     '''
@@ -451,17 +439,6 @@ def __init__(self, path, depfile_path, marker, defines, extra_depends=None,
         self.silence_missing_directive_warnings = \
             silence_missing_directive_warnings
 
-    def inputs(self):
-        pp = Preprocessor(defines=self.defines, marker=self.marker)
-        pp.setSilenceDirectiveWarnings(self.silence_missing_directive_warnings)
-
-        with open(self.path, 'rU') as input:
-            with open(os.devnull, 'w') as output:
-                pp.processFile(input=input, output=output)
-
-        # This always yields at least self.path.
-        return iter(pp.includes)
-
     def copy(self, dest, skip_if_older=True):
         '''
         Invokes the preprocessor to create the destination file.
@@ -537,9 +514,6 @@ def read(self):
     def size(self):
         return len(self.content)
 
-    def inputs(self):
-        return iter(())
-
 
 class DeflatedFile(BaseFile):
     '''

From 89a44850b7ba30f216325d3d6f12d7d2267b31f4 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Thu, 13 Jul 2017 22:39:15 -0700
Subject: [PATCH 092/106] use preferences.js in applicationManager.xul as well

---
 browser/components/preferences/applicationManager.xul         | 2 ++
 browser/components/preferences/in-content-new/preferences.xul | 3 ++-
 2 files changed, 4 insertions(+), 1 deletion(-)

diff --git a/browser/components/preferences/applicationManager.xul b/browser/components/preferences/applicationManager.xul
index a436bde6574e..466646c1dffc 100644
--- a/browser/components/preferences/applicationManager.xul
+++ b/browser/components/preferences/applicationManager.xul
@@ -20,6 +20,8 @@
   <script type="application/javascript"
           src="chrome://browser/content/utilityOverlay.js"/>
   <script type="application/javascript"
+          src="chrome://global/content/preferences.js"/>
+  <script type="application/javascript"
           src="chrome://browser/content/preferences/applicationManager.js"/>
   <script type="application/javascript"
           src="chrome://browser/content/preferences/in-content-new/applications.js"/>
diff --git a/browser/components/preferences/in-content-new/preferences.xul b/browser/components/preferences/in-content-new/preferences.xul
index 72ab42e44da8..3e7ee02a4f28 100644
--- a/browser/components/preferences/in-content-new/preferences.xul
+++ b/browser/components/preferences/in-content-new/preferences.xul
@@ -100,8 +100,9 @@
   <script type="application/javascript"
           src="chrome://browser/content/utilityOverlay.js"/>
   <script type="application/javascript"
+          src="chrome://global/content/preferences.js"/>
+  <script type="application/javascript"
           src="chrome://browser/content/preferences/in-content-new/preferences.js"/>
-  <script src="chrome://global/content/preferences.js"/>
   <script src="chrome://browser/content/preferences/in-content-new/findInPage.js"/>
   <script src="chrome://browser/content/preferences/in-content-new/subdialogs.js"/>
 

From ed71a4834578db702ed3e9944d5ef67a952575c1 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Thu, 13 Jul 2017 23:03:53 -0700
Subject: [PATCH 093/106] undo extraneous changes; fix commentary; use fat
 arrow functions

---
 browser/components/preferences/in-content-new/advanced.js     | 2 +-
 browser/components/preferences/in-content-new/applications.js | 3 ++-
 browser/components/preferences/in-content-new/containers.js   | 1 +
 browser/components/preferences/in-content-new/main.js         | 5 +----
 browser/components/preferences/in-content-new/privacy.js      | 3 ++-
 browser/components/preferences/in-content-new/sync.js         | 2 +-
 browser/components/preferences/in-content-new/tests/head.js   | 4 ++--
 browser/themes/linux/preferences/preferences.css              | 2 +-
 browser/themes/windows/preferences/preferences.css            | 2 +-
 9 files changed, 12 insertions(+), 12 deletions(-)

diff --git a/browser/components/preferences/in-content-new/advanced.js b/browser/components/preferences/in-content-new/advanced.js
index 0df2a4f2b657..b2829389e380 100644
--- a/browser/components/preferences/in-content-new/advanced.js
+++ b/browser/components/preferences/in-content-new/advanced.js
@@ -10,7 +10,7 @@ Components.utils.import("resource://gre/modules/DownloadUtils.jsm");
 Components.utils.import("resource://gre/modules/LoadContextInfo.jsm");
 Components.utils.import("resource://gre/modules/XPCOMUtils.jsm");
 
-window.addEventListener("DOMContentLoaded", function() {
+window.addEventListener("DOMContentLoaded", () => {
   Preferences.addAll([
     { id: "browser.preferences.advanced.selectedTabIndex", type: "int" },
     { id: "browser.search.update", type: "bool" },
diff --git a/browser/components/preferences/in-content-new/applications.js b/browser/components/preferences/in-content-new/applications.js
index 9ff7a43acc95..e2ec9b7ef0f3 100644
--- a/browser/components/preferences/in-content-new/applications.js
+++ b/browser/components/preferences/in-content-new/applications.js
@@ -9,6 +9,7 @@
 // Constants & Enumeration Values
 
 Components.utils.import("resource://gre/modules/Services.jsm");
+Components.utils.import("resource://gre/modules/AppConstants.jsm");
 
 const TYPE_MAYBE_FEED = "application/vnd.mozilla.maybe.feed";
 const TYPE_MAYBE_VIDEO_FEED = "application/vnd.mozilla.maybe.video.feed";
@@ -79,7 +80,7 @@ const APP_ICON_ATTR_NAME = "appHandlerIcon";
 
 // Preferences object
 
-window.addEventListener("DOMContentLoaded", function() {
+window.addEventListener("DOMContentLoaded", () => {
   Preferences.addAll([
     { id: "browser.feeds.handler", type: "string" },
     { id: "browser.feeds.handler.default", type: "string" },
diff --git a/browser/components/preferences/in-content-new/containers.js b/browser/components/preferences/in-content-new/containers.js
index c713811ef42c..3655fbc93f5d 100644
--- a/browser/components/preferences/in-content-new/containers.js
+++ b/browser/components/preferences/in-content-new/containers.js
@@ -4,6 +4,7 @@
 
 /* import-globals-from preferences.js */
 
+Components.utils.import("resource://gre/modules/AppConstants.jsm");
 Components.utils.import("resource://gre/modules/ContextualIdentityService.jsm");
 
 const containersBundle = Services.strings.createBundle("chrome://browser/locale/preferences/containers.properties");
diff --git a/browser/components/preferences/in-content-new/main.js b/browser/components/preferences/in-content-new/main.js
index 624769443c64..47a333c6eb34 100644
--- a/browser/components/preferences/in-content-new/main.js
+++ b/browser/components/preferences/in-content-new/main.js
@@ -27,10 +27,7 @@ if (AppConstants.MOZ_DEV_EDITION) {
                                     "resource://gre/modules/FxAccounts.jsm");
 }
 
-// Instantiate preferences after DOM content is loaded but before the pane
-// is initialized, so the DOM elements are available to the Preference objects,
-// and the Preference objects are available to the pane initializer.
-window.addEventListener("DOMContentLoaded", function() {
+window.addEventListener("DOMContentLoaded", () => {
   Preferences.addAll([
     /* Startup */
     { id: "browser.startup.page", type: "int" },
diff --git a/browser/components/preferences/in-content-new/privacy.js b/browser/components/preferences/in-content-new/privacy.js
index 219d2853cb7a..bbdf41b19cc3 100644
--- a/browser/components/preferences/in-content-new/privacy.js
+++ b/browser/components/preferences/in-content-new/privacy.js
@@ -4,6 +4,7 @@
 
 /* import-globals-from preferences.js */
 
+Components.utils.import("resource://gre/modules/AppConstants.jsm");
 Components.utils.import("resource://gre/modules/PluralForm.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "ContextualIdentityService",
@@ -32,7 +33,7 @@ XPCOMUtils.defineLazyGetter(this, "AlertsServiceDND", function() {
   }
 });
 
-window.addEventListener("DOMContentLoaded", function() {
+window.addEventListener("DOMContentLoaded", () => {
   Preferences.addAll([
     { id: "privacy.userContext.enabled", type: "bool" },
 
diff --git a/browser/components/preferences/in-content-new/sync.js b/browser/components/preferences/in-content-new/sync.js
index 4b9d775a7460..884413cc969b 100644
--- a/browser/components/preferences/in-content-new/sync.js
+++ b/browser/components/preferences/in-content-new/sync.js
@@ -25,7 +25,7 @@ const FXA_LOGIN_UNVERIFIED = 1;
 // We are logged in locally, but the server rejected our credentials.
 const FXA_LOGIN_FAILED = 2;
 
-window.addEventListener("DOMContentLoaded", function() {
+window.addEventListener("DOMContentLoaded", () => {
   Preferences.addAll([
     { id: "engine.addons", name: "services.sync.engine.addons", type: "bool" },
     { id: "engine.bookmarks", name: "services.sync.engine.bookmarks", type: "bool" },
diff --git a/browser/components/preferences/in-content-new/tests/head.js b/browser/components/preferences/in-content-new/tests/head.js
index d99688bfe02d..e3bd6046374f 100644
--- a/browser/components/preferences/in-content-new/tests/head.js
+++ b/browser/components/preferences/in-content-new/tests/head.js
@@ -30,12 +30,12 @@ function is_hidden(aElement) {
 
 function is_element_visible(aElement, aMsg) {
   isnot(aElement, null, "Element should not be null, when checking visibility");
-  ok(!is_hidden(aElement), `<${aElement.tagName} id="${aElement.id}"> ${aMsg}`);
+  ok(!is_hidden(aElement), aMsg);
 }
 
 function is_element_hidden(aElement, aMsg) {
   isnot(aElement, null, "Element should not be null, when checking visibility");
-  ok(is_hidden(aElement), `<${aElement.tagName} id="${aElement.id}"> ${aMsg}`);
+  ok(is_hidden(aElement), aMsg);
 }
 
 function open_preferences(aCallback) {
diff --git a/browser/themes/linux/preferences/preferences.css b/browser/themes/linux/preferences/preferences.css
index 076ee925a84b..b33bb149fbb6 100644
--- a/browser/themes/linux/preferences/preferences.css
+++ b/browser/themes/linux/preferences/preferences.css
@@ -5,7 +5,7 @@
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
 
-/* Main Pref Pane */
+/* Pref Pane */
 .prefpane {
   padding: 8px;
 }
diff --git a/browser/themes/windows/preferences/preferences.css b/browser/themes/windows/preferences/preferences.css
index 5112ebc222a4..96f33ccf50e1 100644
--- a/browser/themes/windows/preferences/preferences.css
+++ b/browser/themes/windows/preferences/preferences.css
@@ -5,7 +5,7 @@
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
 
-/* Main Pref Pane */
+/* Pref Pane */
 .prefpane {
   padding-top: 8px;
   padding-bottom: 10px;

From 0d8509f1c2d9a64c6a0e7759f52544490d967786 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 14 Jul 2017 00:18:39 -0700
Subject: [PATCH 094/106] fix linting issues w/fontbuilder.js

---
 toolkit/mozapps/preferences/fontbuilder.js | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/toolkit/mozapps/preferences/fontbuilder.js b/toolkit/mozapps/preferences/fontbuilder.js
index 3879930d6b45..4f52700a8988 100644
--- a/toolkit/mozapps/preferences/fontbuilder.js
+++ b/toolkit/mozapps/preferences/fontbuilder.js
@@ -4,6 +4,8 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+/* import-globals-from ../../content/preferences.js */
+
 var FontBuilder = {
   _enumerator: null,
   get enumerator() {

From 56fd4f47b03fc058cae5349db9bfaa40ecdbeab8 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Fri, 14 Jul 2017 13:16:09 -0700
Subject: [PATCH 095/106] correct negation in assertion message

---
 .../preferences/in-content-new/tests/privacypane_tests_perwindow.js     | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/browser/components/preferences/in-content-new/tests/privacypane_tests_perwindow.js b/browser/components/preferences/in-content-new/tests/privacypane_tests_perwindow.js
index 203ca1d50eb1..d9f98b98cf51 100644
--- a/browser/components/preferences/in-content-new/tests/privacypane_tests_perwindow.js
+++ b/browser/components/preferences/in-content-new/tests/privacypane_tests_perwindow.js
@@ -220,7 +220,7 @@ function test_dependent_prefs(win) {
   function expect_checked(checked) {
     controls.forEach(function(control) {
       is(control.checked, checked,
-        control.getAttribute("id") + " should " + (checked ? "not " : "") + "be checked");
+        control.getAttribute("id") + " should " + (checked ? "" : "not ") + "be checked");
     });
 
     is(thirdPartyCookieMenu.value == "always" || thirdPartyCookieMenu.value == "visited", checked, "third-party cookies should " + (checked ? "not " : "") + "be limited");

From 7b4f077f1360aa29e9348ca1bc21e4ecbe34066a Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Tue, 18 Jul 2017 16:08:09 -0700
Subject: [PATCH 096/106] fix whitespace

---
 browser/components/preferences/in-content-new/main.js | 6 +-----
 1 file changed, 1 insertion(+), 5 deletions(-)

diff --git a/browser/components/preferences/in-content-new/main.js b/browser/components/preferences/in-content-new/main.js
index 40e90a58f0c0..82077f36fd15 100644
--- a/browser/components/preferences/in-content-new/main.js
+++ b/browser/components/preferences/in-content-new/main.js
@@ -173,14 +173,11 @@ window.addEventListener("DOMContentLoaded", () => {
          page-down, and other such page movements */
     { id: "general.autoScroll", type: "bool" },
     { id: "general.smoothScroll", type: "bool" },
-    { id: "layout.spellcheckDefault", type: "int" },
 
+    { id: "layout.spellcheckDefault", type: "int" },
     { id: "toolkit.telemetry.enabled", type: "bool" },
-
     { id: "browser.preferences.defaultPerformanceSettings.enabled", type: "bool" },
-
     { id: "dom.ipc.processCount", type: "int" },
-
     { id: "layers.acceleration.disabled", type: "bool", inverted: true },
 
     // Files and Applications
@@ -206,7 +203,6 @@ window.addEventListener("DOMContentLoaded", () => {
 
     // Update
     { id: "browser.preferences.advanced.selectedTabIndex", type: "int" },
-
     { id: "browser.search.update", type: "bool" },
   ]);
 

From 8e62a7b99ec71752d042e29f09b0c6d7baad8236 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Tue, 18 Jul 2017 16:21:21 -0700
Subject: [PATCH 097/106] fix merge regressions

---
 browser/components/preferences/in-content-new/main.js    | 7 ++-----
 browser/components/preferences/in-content-new/privacy.js | 3 ---
 2 files changed, 2 insertions(+), 8 deletions(-)

diff --git a/browser/components/preferences/in-content-new/main.js b/browser/components/preferences/in-content-new/main.js
index 82077f36fd15..3cd79436f2c5 100644
--- a/browser/components/preferences/in-content-new/main.js
+++ b/browser/components/preferences/in-content-new/main.js
@@ -107,8 +107,6 @@ window.addEventListener("DOMContentLoaded", () => {
     { id: "pref.browser.homepage.disable_button.bookmark_page", type: "bool" },
     { id: "pref.browser.homepage.disable_button.restore_default", type: "bool" },
 
-    { id: "browser.privatebrowsing.autostart", type: "bool" },
-
     // Downloads
     { id: "browser.download.useDownloadDir", type: "bool" },
     { id: "browser.download.folderList", type: "int" },
@@ -547,13 +545,12 @@ var gMainPane = {
     setEventListener("focusSearch1", "command", gMainPane.focusFilterBox);
     setEventListener("focusSearch2", "command", gMainPane.focusFilterBox);
     setEventListener("filter", "command", gMainPane.filter);
-    setEventListener("handlersView", "select",
-      gMainPane.onSelectionChanged);
+    setEventListener("handlersView", "select", gMainPane.onSelectionChanged);
     setEventListener("typeColumn", "click", gMainPane.sort);
     setEventListener("actionColumn", "click", gMainPane.sort);
     setEventListener("chooseFolder", "command", gMainPane.chooseFolder);
     Preferences.get("browser.download.dir").on("change",
-      gApplicationsPane.displayDownloadDirPref.bind(gApplicationsPane));
+      gMainPane.displayDownloadDirPref.bind(gMainPane));
 
     // Listen for window unload so we can remove our preference observers.
     window.addEventListener("unload", this);
diff --git a/browser/components/preferences/in-content-new/privacy.js b/browser/components/preferences/in-content-new/privacy.js
index 1d19666f5413..6bb3fc2f8d74 100644
--- a/browser/components/preferences/in-content-new/privacy.js
+++ b/browser/components/preferences/in-content-new/privacy.js
@@ -69,9 +69,6 @@ window.addEventListener("DOMContentLoaded", () => {
     // Do not track
     { id: "privacy.donottrackheader.enabled", type: "bool" },
 
-    // DRM content
-    { id: "media.eme.enabled", type: "bool" },
-
     // Popups
     { id: "dom.disable_open_during_load", type: "bool" },
     // Passwords

From 460b42ebd474cdfcdfc2a9119ecd785e52663371 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Tue, 18 Jul 2017 16:25:15 -0700
Subject: [PATCH 098/106] add "test" that measures about:preferences startup
 (load) performance

---
 .../preferences/in-content-new/tests/browser.ini   |  1 +
 .../in-content-new/tests/browser_startup_perf.js   | 32 ++++++++++++++++++++++
 2 files changed, 33 insertions(+)
 create mode 100644 browser/components/preferences/in-content-new/tests/browser_startup_perf.js

diff --git a/browser/components/preferences/in-content-new/tests/browser.ini b/browser/components/preferences/in-content-new/tests/browser.ini
index e42394bc0496..2ff8e94e8832 100644
--- a/browser/components/preferences/in-content-new/tests/browser.ini
+++ b/browser/components/preferences/in-content-new/tests/browser.ini
@@ -60,6 +60,7 @@ skip-if = e10s
 [browser_siteData.js]
 [browser_siteData2.js]
 [browser_site_login_exceptions.js]
+[browser_startup_perf.js]
 [browser_subdialogs.js]
 support-files =
   subdialog.xul
diff --git a/browser/components/preferences/in-content-new/tests/browser_startup_perf.js b/browser/components/preferences/in-content-new/tests/browser_startup_perf.js
new file mode 100644
index 000000000000..58830532db81
--- /dev/null
+++ b/browser/components/preferences/in-content-new/tests/browser_startup_perf.js
@@ -0,0 +1,32 @@
+/* Any copyright is dedicated to the Public Domain.
+* http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+async function test() {
+  waitForExplicitFinish();
+
+  let totalTime = 0;
+  let initialTime = 0;
+
+  // open_preferences calls its callback function when it receives
+  // the "Initialized" event that is dispatched by the init_all function
+  // in preferences.js.  This test measures the time it takes to call
+  // that callback function relative to the "time origin" of the page
+  // (roughly equivalent to the beginning of navigation).
+
+  for (let i = 0; i < 100; i++) {
+    const win = await new Promise(resolve => open_preferences(resolve));
+    const time = win.performance.now();
+    win.close();
+    totalTime += time;
+    if (i === 0) {
+      initialTime = time;
+    }
+  }
+
+  Assert.ok(true, `Initial time to initialize prefs page: ${initialTime}.`);
+  Assert.ok(true, `Mean time to initialize prefs page: ${totalTime / 100}.`);
+
+  finish();
+}

From dc20535386244a060ccd04a7a9585cbeceede5cc Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Tue, 18 Jul 2017 17:49:46 -0700
Subject: [PATCH 099/106] apply the module pattern

---
 toolkit/content/preferences.js | 15 ++++++++++++---
 1 file changed, 12 insertions(+), 3 deletions(-)

diff --git a/toolkit/content/preferences.js b/toolkit/content/preferences.js
index 1c8b6d43b1af..a7915fc1c5a8 100644
--- a/toolkit/content/preferences.js
+++ b/toolkit/content/preferences.js
@@ -4,10 +4,11 @@
 
 "use strict";
 
+const { Preferences, PrefPane } = (function(window, document) {
+
 Components.utils.import("resource://gre/modules/EventEmitter.jsm");
 
-// We attach this to the window object so tests have access to it.
-const Preferences = window.Preferences = {
+const Preferences = {
   all: {},
 
   add(prefInfo) {
@@ -445,7 +446,7 @@ class PrefPane {
   _deferredValueUpdate(aElement) {
     delete aElement._deferredValueUpdateTask;
     let prefID = aElement.getAttribute("preference");
-    let preference = window.Preferences.get(prefID);
+    let preference = Preferences.get(prefID);
     let prefVal = preference.getElementValue(aElement);
     preference.value = prefVal;
     this._deferredValueUpdateElements.delete(aElement);
@@ -505,4 +506,12 @@ class PrefPane {
     // the user in this window.
     this.userChangedValue(event.target);
   }
+
 }
+
+return { Preferences, PrefPane };
+
+}(window, document));
+
+// Attach Preferences to the window object so tests have access to it.
+window.Preferences = Preferences;

From de68519aac17ec9b0c58c8fac2816369757d9303 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Wed, 19 Jul 2017 16:37:34 -0700
Subject: [PATCH 100/106] unapply module pattern; improve formatting

---
 toolkit/content/preferences.js | 16 +++++-----------
 1 file changed, 5 insertions(+), 11 deletions(-)

diff --git a/toolkit/content/preferences.js b/toolkit/content/preferences.js
index a7915fc1c5a8..fcc3b8ce318c 100644
--- a/toolkit/content/preferences.js
+++ b/toolkit/content/preferences.js
@@ -4,11 +4,10 @@
 
 "use strict";
 
-const { Preferences, PrefPane } = (function(window, document) {
-
 Components.utils.import("resource://gre/modules/EventEmitter.jsm");
 
-const Preferences = {
+// Attach Preferences to the window object so tests have access to it.
+window.Preferences = {
   all: {},
 
   add(prefInfo) {
@@ -266,6 +265,7 @@ class Preference extends EventEmitter {
   get name() {
     return this._name;
   }
+
   set name(val) {
     if (val == this.name)
       return val;
@@ -278,6 +278,7 @@ class Preference extends EventEmitter {
   get value() {
     return this._value;
   }
+
   set value(val) {
     if (this.value !== val) {
       this._value = val;
@@ -295,6 +296,7 @@ class Preference extends EventEmitter {
   get disabled() {
     return this._disabled;
   }
+
   set disabled(val) {
     this._disabled = !!val;
 
@@ -506,12 +508,4 @@ class PrefPane {
     // the user in this window.
     this.userChangedValue(event.target);
   }
-
 }
-
-return { Preferences, PrefPane };
-
-}(window, document));
-
-// Attach Preferences to the window object so tests have access to it.
-window.Preferences = Preferences;

From 0e6fa9bafa8117cba3c3eb0e4d5b19d8255b4590 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Wed, 19 Jul 2017 16:40:43 -0700
Subject: [PATCH 101/106] omit inaccurate initial time measurement

---
 .../preferences/in-content-new/tests/browser_startup_perf.js         | 5 -----
 1 file changed, 5 deletions(-)

diff --git a/browser/components/preferences/in-content-new/tests/browser_startup_perf.js b/browser/components/preferences/in-content-new/tests/browser_startup_perf.js
index 58830532db81..b1c50262c6c5 100644
--- a/browser/components/preferences/in-content-new/tests/browser_startup_perf.js
+++ b/browser/components/preferences/in-content-new/tests/browser_startup_perf.js
@@ -7,7 +7,6 @@ async function test() {
   waitForExplicitFinish();
 
   let totalTime = 0;
-  let initialTime = 0;
 
   // open_preferences calls its callback function when it receives
   // the "Initialized" event that is dispatched by the init_all function
@@ -20,12 +19,8 @@ async function test() {
     const time = win.performance.now();
     win.close();
     totalTime += time;
-    if (i === 0) {
-      initialTime = time;
-    }
   }
 
-  Assert.ok(true, `Initial time to initialize prefs page: ${initialTime}.`);
   Assert.ok(true, `Mean time to initialize prefs page: ${totalTime / 100}.`);
 
   finish();

From 82199e0dfb511c93152186caac68d44d41de106c Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Mon, 31 Jul 2017 16:25:23 -0700
Subject: [PATCH 102/106] fix merge bustage

---
 browser/components/preferences/in-content-new/main.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/browser/components/preferences/in-content-new/main.js b/browser/components/preferences/in-content-new/main.js
index 29d882f136bd..bd7a73f9da21 100644
--- a/browser/components/preferences/in-content-new/main.js
+++ b/browser/components/preferences/in-content-new/main.js
@@ -1257,7 +1257,7 @@ var gMainPane = {
       performanceSettings.hidden = true;
     } else {
       let e10sRolloutProcessCountPref =
-        document.getElementById("dom.ipc.processCount.web");
+        Preferences.get("dom.ipc.processCount.web");
       // Take the e10s rollout value as the default value (if it exists),
       // but don't overwrite the user set value.
       if (duringChangeEvent &&

From f19b207b287f09cbabbb8c55f81125a8897122fc Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Tue, 1 Aug 2017 13:33:36 -0700
Subject: [PATCH 103/106] remove preferences load perf 'test'

---
 .../preferences/in-content-new/tests/browser.ini   |  1 -
 .../in-content-new/tests/browser_startup_perf.js   | 27 ----------------------
 2 files changed, 28 deletions(-)
 delete mode 100644 browser/components/preferences/in-content-new/tests/browser_startup_perf.js

diff --git a/browser/components/preferences/in-content-new/tests/browser.ini b/browser/components/preferences/in-content-new/tests/browser.ini
index 29a2ee87a10e..8f1bc3bbe4c6 100644
--- a/browser/components/preferences/in-content-new/tests/browser.ini
+++ b/browser/components/preferences/in-content-new/tests/browser.ini
@@ -62,7 +62,6 @@ skip-if = e10s
 [browser_siteData.js]
 [browser_siteData2.js]
 [browser_site_login_exceptions.js]
-[browser_startup_perf.js]
 [browser_cookies_dialog.js]
 [browser_subdialogs.js]
 support-files =
diff --git a/browser/components/preferences/in-content-new/tests/browser_startup_perf.js b/browser/components/preferences/in-content-new/tests/browser_startup_perf.js
deleted file mode 100644
index b1c50262c6c5..000000000000
--- a/browser/components/preferences/in-content-new/tests/browser_startup_perf.js
+++ /dev/null
@@ -1,27 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-* http://creativecommons.org/publicdomain/zero/1.0/ */
-
-"use strict";
-
-async function test() {
-  waitForExplicitFinish();
-
-  let totalTime = 0;
-
-  // open_preferences calls its callback function when it receives
-  // the "Initialized" event that is dispatched by the init_all function
-  // in preferences.js.  This test measures the time it takes to call
-  // that callback function relative to the "time origin" of the page
-  // (roughly equivalent to the beginning of navigation).
-
-  for (let i = 0; i < 100; i++) {
-    const win = await new Promise(resolve => open_preferences(resolve));
-    const time = win.performance.now();
-    win.close();
-    totalTime += time;
-  }
-
-  Assert.ok(true, `Mean time to initialize prefs page: ${totalTime / 100}.`);
-
-  finish();
-}

From 9003f2c3fd14ebf60ba40bd701cfd5af3070cfdc Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Tue, 1 Aug 2017 13:51:21 -0700
Subject: [PATCH 104/106] fix style nits per review

---
 browser/themes/osx/preferences/preferences.css | 11 ++++++++---
 1 file changed, 8 insertions(+), 3 deletions(-)

diff --git a/browser/themes/osx/preferences/preferences.css b/browser/themes/osx/preferences/preferences.css
index 4ae326a09e08..b24040099fde 100644
--- a/browser/themes/osx/preferences/preferences.css
+++ b/browser/themes/osx/preferences/preferences.css
@@ -23,15 +23,20 @@ description {
 }
 
 .prefpane {
-  padding: 12px 12px 0 12px;
+  padding-top: 12px;
+  padding-bottom: 12px;
+  padding-inline-start: 0;
+  padding-inline-end: 12px;
 }
 
-prefpane .groupbox-body, .prefpane .groupbox-body {
+prefpane .groupbox-body,
+.prefpane .groupbox-body {
   -moz-appearance: none;
   padding: 8px 4px 4px 4px;
 }
 
-prefpane .groupbox-title, .prefpane .groupbox-title {
+prefpane .groupbox-title,
+.prefpane .groupbox-title {
   background: url("chrome://global/skin/50pct_transparent_grey.png") repeat-x bottom left;
   margin-bottom: 4px;
 }

From 092dfde6b71c2b910c46ecc234934b507553e426 Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Tue, 1 Aug 2017 15:05:05 -0700
Subject: [PATCH 105/106] move preferences.js to preferencesBindings.js

---
 browser/components/preferences/in-content-new/preferences.js  | 2 +-
 browser/components/preferences/in-content-new/preferences.xul | 2 +-
 toolkit/content/jar.mn                                        | 2 +-
 toolkit/content/{preferences.js => preferencesBindings.js}    | 0
 4 files changed, 3 insertions(+), 3 deletions(-)
 rename toolkit/content/{preferences.js => preferencesBindings.js} (100%)

diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 2c709c56cc33..c7b0585d86ea 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -11,7 +11,7 @@
 /* import-globals-from sync.js */
 /* import-globals-from findInPage.js */
 /* import-globals-from ../../../base/content/utilityOverlay.js */
-/* import-globals-from ../../../../toolkit/content/preferences.js */
+/* import-globals-from ../../../../toolkit/content/preferencesBindings.js */
 
 "use strict";
 
diff --git a/browser/components/preferences/in-content-new/preferences.xul b/browser/components/preferences/in-content-new/preferences.xul
index ce15a6c5c6e2..b0f7b4e5ac99 100644
--- a/browser/components/preferences/in-content-new/preferences.xul
+++ b/browser/components/preferences/in-content-new/preferences.xul
@@ -100,7 +100,7 @@
   <script type="application/javascript"
           src="chrome://browser/content/utilityOverlay.js"/>
   <script type="application/javascript"
-          src="chrome://global/content/preferences.js"/>
+          src="chrome://global/content/preferencesBindings.js"/>
   <script type="application/javascript"
           src="chrome://browser/content/preferences/in-content-new/preferences.js"/>
   <script src="chrome://browser/content/preferences/in-content-new/findInPage.js"/>
diff --git a/toolkit/content/jar.mn b/toolkit/content/jar.mn
index c08105cf8911..1138f140dfe1 100644
--- a/toolkit/content/jar.mn
+++ b/toolkit/content/jar.mn
@@ -58,7 +58,7 @@ toolkit.jar:
    content/global/filepicker.properties
    content/global/globalOverlay.js
    content/global/mozilla.xhtml
-   content/global/preferences.js
+   content/global/preferencesBindings.js
    content/global/process-content.js
    content/global/resetProfile.css
    content/global/resetProfile.js
diff --git a/toolkit/content/preferences.js b/toolkit/content/preferencesBindings.js
similarity index 100%
rename from toolkit/content/preferences.js
rename to toolkit/content/preferencesBindings.js

From bdf4afb0ab05f5fef672fa0738c0bc56321e45be Mon Sep 17 00:00:00 2001
From: Myk Melez <myk@mykzilla.org>
Date: Tue, 1 Aug 2017 17:44:23 -0700
Subject: [PATCH 106/106] add all prefs before updating any

---
 toolkit/content/preferencesBindings.js | 12 ++++++++++--
 1 file changed, 10 insertions(+), 2 deletions(-)

diff --git a/toolkit/content/preferencesBindings.js b/toolkit/content/preferencesBindings.js
index fcc3b8ce318c..448ccc73c788 100644
--- a/toolkit/content/preferencesBindings.js
+++ b/toolkit/content/preferencesBindings.js
@@ -10,19 +10,27 @@ Components.utils.import("resource://gre/modules/EventEmitter.jsm");
 window.Preferences = {
   all: {},
 
-  add(prefInfo) {
+  _add(prefInfo) {
     if (this.all[prefInfo.id]) {
       throw new Error(`preference with id '${prefInfo.id}' already added`);
     }
     const pref = new Preference(prefInfo);
     this.all[pref.id] = pref;
+    return pref;
+  },
+
+  add(prefInfo) {
+    const pref = this._add(prefInfo);
     pref.updateElements();
     return pref;
   },
 
   addAll(prefInfos) {
     for (const prefInfo of prefInfos) {
-      this.add(prefInfo);
+      this._add(prefInfo);
+    }
+    for (const pref of this.getAll()) {
+      pref.updateElements();
     }
   },
 
