# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  f7a97b344fa59bd3b01ea81ebd5b150aa63bfb12

diff --git a/dom/base/Element.cpp b/dom/base/Element.cpp
--- a/dom/base/Element.cpp
+++ b/dom/base/Element.cpp
@@ -542,16 +542,21 @@ IsLikelyCustomElement(const nsXULElement
   }
 
   return registry->IsLikelyToBeCustomElement(data->GetCustomElementType());
 }
 
 static bool
 MayNeedToLoadXBLBinding(const nsIDocument& aDocument, const Element& aElement)
 {
+  if (XRE_IsContentProcess()) {
+    // Disable in-content XBL wrapping
+    return false;
+  }
+
   // If we have a frame, the frame has already loaded the binding.
   // Otherwise, don't do anything else here unless we're dealing with
   // XUL or an HTML element that may have a plugin-related overlay
   // (i.e. object or embed).
   if (!aDocument.GetShell() || aElement.GetPrimaryFrame()) {
     return false;
   }
 
@@ -582,16 +587,21 @@ Element::GetBindingURL(nsIDocument *aDoc
 JSObject*
 Element::WrapObject(JSContext *aCx, JS::Handle<JSObject*> aGivenProto)
 {
   JS::Rooted<JSObject*> obj(aCx, nsINode::WrapObject(aCx, aGivenProto));
   if (!obj) {
     return nullptr;
   }
 
+  if (XRE_IsContentProcess()) {
+    // Disable in-content XBL wrapping
+    return obj;
+  }
+
   nsIDocument* doc = GetComposedDoc();
   if (!doc) {
     // There's no baseclass that cares about this call so we just
     // return here.
     return obj;
   }
 
   // We must ensure that the XBL Binding is installed before we hand
diff --git a/layout/base/nsCSSFrameConstructor.cpp b/layout/base/nsCSSFrameConstructor.cpp
--- a/layout/base/nsCSSFrameConstructor.cpp
+++ b/layout/base/nsCSSFrameConstructor.cpp
@@ -5546,16 +5546,19 @@ nsCSSFrameConstructor::XBLBindingLoadInf
 
 nsCSSFrameConstructor::XBLBindingLoadInfo::XBLBindingLoadInfo() = default;
 
 nsCSSFrameConstructor::XBLBindingLoadInfo
 nsCSSFrameConstructor::LoadXBLBindingIfNeeded(nsIContent& aContent,
                                               ComputedStyle& aStyle,
                                               uint32_t aFlags)
 {
+  if (XRE_IsContentProcess()) {
+    return { aContent, aStyle };
+  }
   if (!(aFlags & ITEM_ALLOW_XBL_BASE)) {
     return { aContent, aStyle };
   }
   css::URLValue* binding = aStyle.StyleDisplay()->mBinding;
   if (!binding) {
     return { aContent, aStyle };
   }
 
