# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  8bf46ba0297dfecfdbae08edc1166d8a10bbadf8
Bug 1223116 - WIP for second SW

diff --git a/devtools/shared/webconsole/test/test_console_serviceworker.html b/devtools/shared/webconsole/test/test_console_serviceworker.html
--- a/devtools/shared/webconsole/test/test_console_serviceworker.html
+++ b/devtools/shared/webconsole/test/test_console_serviceworker.html
@@ -9,20 +9,24 @@
      - http://creativecommons.org/publicdomain/zero/1.0/ -->
 </head>
 <body>
 <p>Test for the Console API and Service Workers</p>
 
 <script class="testbody" type="text/javascript;version=1.8">
 SimpleTest.waitForExplicitFinish();
 
-let SERVICE_WORKER_URL = "https://example.com/chrome/devtools/shared/webconsole/test/helper_serviceworker.js";
-let FRAME_URL = "https://example.com/chrome/devtools/shared/webconsole/test/sandboxed_iframe.html";
+let COM_SERVICE_WORKER_URL = "https://example.com/chrome/devtools/shared/webconsole/test/helper_serviceworker.js";
+let COM_PAGE_URL = "https://example.com/chrome/devtools/shared/webconsole/test/sandboxed_iframe.html";
+
+let ORG_SERVICE_WORKER_URL = "https://example.org/chrome/devtools/shared/webconsole/test/helper_serviceworker.js";
+let ORG_PAGE_URL = "https://example.org/chrome/devtools/shared/webconsole/test/sandboxed_iframe.html";
 
 let swClosed = new Promise(() => {});
+let nonRelevantSWClosed = new Promise(() => {});
 let expectedConsoleCalls = [
     {
       level: "log",
       filename: /helper_serviceworker/,
       arguments: ["Hello from serviceworker"],
     }
 ];
 let consoleCalls = [];
@@ -39,57 +43,79 @@ let startTest = Task.async(function*() {
   attachConsoleToTab(["ConsoleAPI"], onAttach);
 });
 addEventListener("load", startTest);
 
 function onAttach(state, response) {
   onConsoleAPICall = onConsoleAPICall.bind(null, state);
   state.dbgClient.addListener("consoleAPICall", onConsoleAPICall);
 
-  info("Loading a ServiceWorker that will use console API");
+  nonRelevantSWClosed = new Promise(resolve => {
+    let otherWin = window.open(ORG_PAGE_URL);
+    // This never fires.. probably permission related.
+    otherWin.onload = function() {
+      info("LOADED!!");
+      registerAndUnregisterServiceWorker(otherWin, ORG_SERVICE_WORKER_URL).then(() => {
+        otherWin.close();
+        resolve();
+      });
+    };
+  });
+
   swClosed = new Promise(resolve => {
     let iframe = document.createElement("iframe");
     iframe.onload = function() {
-      let win = iframe.contentWindow;
-      info("Registering the service worker");
-      win.navigator.serviceWorker.register(SERVICE_WORKER_URL).then(swr => {
-
-        info("Service worker registered.  Unregistering");
-        swr.unregister().then(() => {
-          resolve();
-        });
-      }, error => {
-        info("Error registering service worker: " + error);
-      });
+      registerAndUnregisterServiceWorker(iframe.contentWindow, COM_SERVICE_WORKER_URL).then(resolve);
     };
-    iframe.src = FRAME_URL;
+    iframe.src = COM_PAGE_URL;
 
     document.body.appendChild(iframe);
+  })
+}
+
+function registerAndUnregisterServiceWorker(win, url) {
+  return new Promise(resolve => {
+    info("Registering the service worker - " + url);
+    win.navigator.serviceWorker.register(url).then(swr => {
+      info("Service worker registered, unregistering - " + url);
+      swr.unregister().then(() => {
+        info("Service worker has been unregistered - " + url);
+        resolve();
+      });
+    }, error => {
+      info("Error registering service worker: " + error);
+    });
   });
 }
 
 function onConsoleAPICall(state, type, packet) {
   info("received message level: " + packet.message.level);
   is(packet.from, state.actor, "console API call actor");
 
   consoleCalls.push(packet.message);
+  if (consoleCalls.length > expectedConsoleCalls.length) {
+    ok(false, "Too many messages receieved");
+    return;
+  }
+
+  // Still waiting for more messages
   if (consoleCalls.length != expectedConsoleCalls.length) {
     return;
   }
 
   state.dbgClient.removeListener("consoleAPICall", onConsoleAPICall);
 
   expectedConsoleCalls.forEach(function(aMessage, aIndex) {
     info("checking received console call #" + aIndex);
     checkConsoleAPICall(consoleCalls[aIndex], expectedConsoleCalls[aIndex]);
   });
 
   consoleCalls = [];
 
-  closeDebugger(state, function() {
-    swClosed.then(() => {
-      SimpleTest.finish();
-    });
-  });
+  closeDebugger(state, Task.async(function*() {
+    yield swClosed;
+    yield nonRelevantSWClosed;
+    SimpleTest.finish();
+  }));
 }
 </script>
 </body>
 </html>
