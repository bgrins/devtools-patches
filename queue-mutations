# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  bcff9edba9b06d3f1e1bd31b502914c59fabd540
Bug 1170848 - Queue mutations for the inspector actor;r=pbrosset

diff --git a/devtools/server/actors/inspector.js b/devtools/server/actors/inspector.js
--- a/devtools/server/actors/inspector.js
+++ b/devtools/server/actors/inspector.js
@@ -51,16 +51,17 @@
  */
 
 const {Cc, Ci, Cu, Cr} = require("chrome");
 const Services = require("Services");
 const protocol = require("devtools/server/protocol");
 const {Arg, Option, method, RetVal, types} = protocol;
 const {LongStringActor, ShortLongString} = require("devtools/server/actors/string");
 const {Promise: promise} = Cu.import("resource://gre/modules/Promise.jsm", {});
+const {DeferredTask} = Cu.import("resource://gre/modules/DeferredTask.jsm", {});
 const {Task} = Cu.import("resource://gre/modules/Task.jsm", {});
 const object = require("sdk/util/object");
 const events = require("sdk/event/core");
 const {Unknown} = require("sdk/platform/xpcom");
 const {Class} = require("sdk/core/heritage");
 const {PageStyleActor, getFontPreviewData} = require("devtools/server/actors/styles");
 const {
   HighlighterActor,
@@ -74,16 +75,17 @@ const {EventParsers} = require("devtools
 
 const FONT_FAMILY_PREVIEW_TEXT = "The quick brown fox jumps over the lazy dog";
 const FONT_FAMILY_PREVIEW_TEXT_SIZE = 20;
 const PSEUDO_CLASSES = [":hover", ":active", ":focus"];
 const HIDDEN_CLASS = "__fx-devtools-hide-shortcut__";
 const XHTML_NS = "http://www.w3.org/1999/xhtml";
 const XUL_NS = 'http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul';
 const IMAGE_FETCHING_TIMEOUT = 500;
+const MUTATIONS_QUEUE_TIME = 100;
 // The possible completions to a ':' with added score to give certain values
 // some preference.
 const PSEUDO_SELECTORS = [
   [":active", 1],
   [":hover", 1],
   [":focus", 1],
   [":visited", 0],
   [":link", 0],
@@ -1264,16 +1266,22 @@ var WalkerActor = protocol.ActorClass({
     // even when it is orphaned with the `retainNode` method.  This
     // list contains orphaned nodes that were so retained.
     this._retainedOrphans = new Set();
 
     this.onMutations = this.onMutations.bind(this);
     this.onFrameLoad = this.onFrameLoad.bind(this);
     this.onFrameUnload = this.onFrameUnload.bind(this);
 
+    this.mutationEventTimer = new DeferredTask(() => {
+      if (!this._destroyed && this._pendingMutations.length > 0) {
+        events.emit(this, "new-mutations");
+      }
+    }, MUTATIONS_QUEUE_TIME);
+
     events.on(tabActor, "will-navigate", this.onFrameUnload);
     events.on(tabActor, "navigate", this.onFrameLoad);
 
     // Ensure that the root document node actor is ready and
     // managed.
     this.rootNode = this.document();
 
     this.reflowObserver = getLayoutChangesObserver(this.tabActor);
@@ -1298,16 +1306,19 @@ var WalkerActor = protocol.ActorClass({
     let nodeFilter = this.showAllAnonymousContent ? allAnonymousContentTreeWalkerFilter : standardTreeWalkerFilter;
     return new DocumentWalker(node, this.rootWin, whatToShow, nodeFilter);
   },
 
   destroy: function() {
     try {
       this._destroyed = true;
 
+      this.mutationEventTimer.disarm();
+      this.mutationEventTimer = null;
+
       this.clearPseudoClassLocks();
       this._activePseudoClassLocks = null;
 
       this._hoveredNode = null;
       this.rootDoc = null;
 
       this.reflowObserver.off("reflows", this._onReflows);
       this.reflowObserver = null;
@@ -2740,25 +2751,19 @@ var WalkerActor = protocol.ActorClass({
     }
   }),
 
   queueMutation: function(mutation) {
     if (!this.actorID || this._destroyed) {
       // We've been destroyed, don't bother queueing this mutation.
       return;
     }
-    // We only send the `new-mutations` notification once, until the client
-    // fetches mutations with the `getMutations` packet.
-    let needEvent = this._pendingMutations.length === 0;
 
     this._pendingMutations.push(mutation);
-
-    if (needEvent) {
-      events.emit(this, "new-mutations");
-    }
+    this.mutationEventTimer.arm();
   },
 
   /**
    * Handles mutations from the DOM mutation observer API.
    *
    * @param array[MutationRecord] mutations
    *    See https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver#MutationRecord
    */
