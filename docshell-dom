# HG changeset patch
# Parent 1ec9d4bee2ee4e7c462a9471c8fa85b7561f0420
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 918884 - Implement a method to get the DOM element that owns a docshell

diff --git a/dom/base/nsDOMWindowUtils.cpp b/dom/base/nsDOMWindowUtils.cpp
--- a/dom/base/nsDOMWindowUtils.cpp
+++ b/dom/base/nsDOMWindowUtils.cpp
@@ -2530,16 +2530,33 @@ nsDOMWindowUtils::GetOuterWindowWithId(u
                                   "GetWindowWithOuterIdWarning");
 
   *aWindow = nsGlobalWindow::GetOuterWindowWithId(aWindowID);
   NS_IF_ADDREF(*aWindow);
   return NS_OK;
 }
 
 NS_IMETHODIMP
+nsDOMWindowUtils::GetContainerElement(nsIDOMElement** aResult)
+{
+  if (!nsContentUtils::IsCallerChrome()) {
+    return NS_ERROR_DOM_SECURITY_ERR;
+  }
+
+  nsCOMPtr<nsPIDOMWindow> window = do_QueryReferent(mWindow);
+  NS_ENSURE_STATE(window);
+
+  nsCOMPtr<nsIDOMElement> element =
+    do_QueryInterface(window->GetFrameElementInternal());
+
+  element.forget(aResult);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
 nsDOMWindowUtils::WrapDOMFile(nsIFile *aFile,
                               nsIDOMFile **aDOMFile)
 {
   if (!nsContentUtils::IsCallerChrome()) {
     return NS_ERROR_DOM_SECURITY_ERR;
   }
 
   if (!aFile) {
diff --git a/dom/interfaces/base/nsIDOMWindowUtils.idl b/dom/interfaces/base/nsIDOMWindowUtils.idl
--- a/dom/interfaces/base/nsIDOMWindowUtils.idl
+++ b/dom/interfaces/base/nsIDOMWindowUtils.idl
@@ -38,17 +38,17 @@ interface nsIDOMFile;
 interface nsIFile;
 interface nsIDOMTouch;
 interface nsIDOMClientRect;
 interface nsIURI;
 interface nsIDOMEventTarget;
 interface nsIRunnable;
 interface nsICompositionStringSynthesizer;
 
-[scriptable, uuid(a1383ae5-e828-4c9a-929d-5293e61beb64)]
+[scriptable, uuid(750a47b6-8bdb-4cad-ba2c-b7d3e66d8021)]
 interface nsIDOMWindowUtils : nsISupports {
 
   /**
    * Image animation mode of the window. When this attribute's value
    * is changed, the implementation should set all images in the window
    * to the given value. That is, when set to kDontAnimMode, all images
    * will stop animating. The attribute's value must be one of the
    * animationMode values from imgIContainer.
@@ -1082,16 +1082,22 @@ interface nsIDOMWindowUtils : nsISupport
   readonly attribute float displayDPI;
 
   /**
    * Return the outer window with the given ID, if any.  Can return null.
    * @deprecated Use nsIWindowMediator.getOuterWindowWithId.  See bug 865664.
    */
   nsIDOMWindow getOuterWindowWithId(in unsigned long long aOuterWindowID);
 
+  /**
+   * Return this window's frame element.
+   * Ignores all chrome/content or mozbrowser boundaries.
+   */
+  readonly attribute nsIDOMElement containerElement;
+
   [noscript] void RenderDocument(in nsConstRect aRect,
                                  in uint32_t aFlags,
                                  in nscolor aBackgroundColor,
                                  in gfxContext aThebesContext);
 
   /**
    * advanceTimeAndRefresh allows the caller to take over the refresh
    * driver timing for a window.  A call to advanceTimeAndRefresh does
diff --git a/dom/tests/browser/Makefile.in b/dom/tests/browser/Makefile.in
--- a/dom/tests/browser/Makefile.in
+++ b/dom/tests/browser/Makefile.in
@@ -12,17 +12,19 @@ MOCHITEST_BROWSER_FILES := \
   browser_ConsoleStoragePBTest_perwindowpb.js \
   browser_autofocus_preference.js \
   browser_bug396843.js \
   browser_xhr_sandbox.js \
   browser_geolocation_privatebrowsing_page.html \
   browser_geolocation_privatebrowsing_perwindowpb.js \
   browser_localStorage_privatestorageevent.js \
   network_geolocation.sjs \
-  page_privatestorageevent.html
+  page_privatestorageevent.html \
+  browser_frame_elements.js \
+  browser_frame_elements.html
   $(NULL)
 
 ifdef MOZ_B2G
 MOCHITEST_BROWSER_FILES += \
   browser_webapps_permissions.js \
   test-webapp.webapp \
   test-webapp-reinstall.webapp \
   test-webapp-original.webapp \
diff --git a/dom/tests/browser/browser_frame_elements.html b/dom/tests/browser/browser_frame_elements.html
new file mode 100644
--- /dev/null
+++ b/dom/tests/browser/browser_frame_elements.html
@@ -0,0 +1,15 @@
+<!DOCTYPE html>
+<head>
+  <meta charset="utf-8">
+  <title>Frame Element Tests</title>
+</head>
+<body>
+  <h1>Frame Element Tests</h1>
+
+  <iframe id="iframe-blank"  src="about:blank"></iframe>
+
+  <iframe id="iframe-data-url" src="data:text/html;charset=utf-8,%3Chtml%3E%3Cbody%3Eiframe%3C/body%3E%3C/html%3E"></iframe>
+
+  <object id="object-data-url" type="text/html" data="data:text/html;charset=utf-8,%3Chtml%3E%3Cbody%3Eobject%3C/body%3E%3C/html%3E"></object>
+
+</body>
diff --git a/dom/tests/browser/browser_frame_elements.js b/dom/tests/browser/browser_frame_elements.js
new file mode 100644
--- /dev/null
+++ b/dom/tests/browser/browser_frame_elements.js
@@ -0,0 +1,87 @@
+/* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+const TEST_URI = "http://example.com/browser/dom/tests/browser/browser_frame_elements.html";
+let gWindow;
+
+function test() {
+  waitForExplicitFinish();
+
+  var tab = gBrowser.addTab(TEST_URI);
+  gBrowser.selectedTab = tab;
+  var browser = gBrowser.selectedBrowser;
+
+  registerCleanupFunction(function () {
+    gBrowser.removeTab(tab);
+    gWindow = null;
+  });
+
+  browser.addEventListener("DOMContentLoaded", function onLoad(event) {
+    browser.removeEventListener("DOMContentLoaded", onLoad, false);
+    executeSoon(function test_executeSoon() {
+      gWindow = browser.contentWindow;
+      startTests();
+    });
+  }, false);
+}
+
+function startTests() {
+  info("Frame tests started");
+
+  info("Checking top window");
+  let windowUtils = getWindowUtils(gWindow);
+  is (windowUtils.containerElement, gBrowser.selectedBrowser, "Container element for main window is xul:browser");
+  is (gWindow.top, gWindow, "gWindow is top");
+  is (gWindow.parent, gWindow, "gWindow is parent");
+
+  info("Checking about:blank iframe");
+  let iframeBlank = gWindow.document.querySelector("#iframe-blank");
+  ok (iframeBlank, "Iframe exists on page");
+  let iframeBlankUtils = getWindowUtils(iframeBlank.contentWindow);
+  is (iframeBlankUtils.containerElement, iframeBlank, "Container element for iframe window is iframe");
+  is (iframeBlank.contentWindow.top, gWindow, "gWindow is top");
+  is (iframeBlank.contentWindow.parent, gWindow, "gWindow is parent");
+
+  info("Checking iframe with data url src");
+  let iframeDataUrl = gWindow.document.querySelector("#iframe-data-url");
+  ok (iframeDataUrl, "Iframe exists on page");
+  let iframeDataUrlUtils = getWindowUtils(iframeDataUrl.contentWindow);
+  is (iframeDataUrlUtils.containerElement, iframeDataUrl, "Container element for iframe window is iframe");
+  is (iframeDataUrl.contentWindow.top, gWindow, "gWindow is top");
+  is (iframeDataUrl.contentWindow.parent, gWindow, "gWindow is parent");
+
+  info("Checking object with data url data attribute");
+  let objectDataUrl = gWindow.document.querySelector("#object-data-url");
+  ok (objectDataUrl, "Object exists on page");
+  let objectDataUrlUtils = getWindowUtils(objectDataUrl.contentWindow);
+  is (objectDataUrlUtils.containerElement, objectDataUrl, "Container element for object window is the object");
+  is (objectDataUrl.contentWindow.top, gWindow, "gWindow is top");
+  is (objectDataUrl.contentWindow.parent, gWindow, "gWindow is parent");
+
+  info("Granting special powers for mozbrowser");
+  SpecialPowers.addPermission("browser", true, gWindow.document);
+  SpecialPowers.setBoolPref('dom.mozBrowserFramesEnabled', true);
+
+  info("Checking mozbrowser iframe");
+  let mozBrowserFrame = gWindow.document.createElement("iframe");
+  mozBrowserFrame.setAttribute("mozbrowser", "");
+  gWindow.document.body.appendChild(mozBrowserFrame);
+  is (mozBrowserFrame.contentWindow.top, mozBrowserFrame.contentWindow, "Mozbrowser top == iframe window");
+  is (mozBrowserFrame.contentWindow.parent, mozBrowserFrame.contentWindow, "Mozbrowser parent == iframe window");
+
+  info("Revoking special powers for mozbrowser");
+  SpecialPowers.clearUserPref('dom.mozBrowserFramesEnabled')
+  SpecialPowers.removePermission("browser", gWindow.document);
+
+  finish();
+}
+
+function getWindowUtils(window)
+{
+  return window.
+    QueryInterface(Components.interfaces.nsIInterfaceRequestor).
+    getInterface(Components.interfaces.nsIDOMWindowUtils);
+}
