diff --git a/toolkit/content/customElements.js b/toolkit/content/customElements.js
--- a/toolkit/content/customElements.js
+++ b/toolkit/content/customElements.js
@@ -633,6 +633,7 @@
 if (!isDummyDocument) {
   for (let script of [
     "chrome://global/content/elements/general.js",
+    "chrome://global/content/elements/button.js",
     "chrome://global/content/elements/checkbox.js",
     "chrome://global/content/elements/menu.js",
     "chrome://global/content/elements/menupopup.js",
diff --git a/toolkit/content/jar.mn b/toolkit/content/jar.mn
--- a/toolkit/content/jar.mn
+++ b/toolkit/content/jar.mn
@@ -62,7 +62,6 @@
 #endif
    content/global/widgets.css
    content/global/bindings/autocomplete.xml    (widgets/autocomplete.xml)
-   content/global/bindings/button.xml          (widgets/button.xml)
    content/global/bindings/calendar.js         (widgets/calendar.js)
    content/global/bindings/datekeeper.js       (widgets/datekeeper.js)
    content/global/bindings/datepicker.js       (widgets/datepicker.js)
@@ -85,6 +84,7 @@
    content/global/elements/autocomplete-popup.js              (widgets/autocomplete-popup.js)
    content/global/elements/autocomplete-richlistitem.js       (widgets/autocomplete-richlistitem.js)
    content/global/elements/browser-custom-element.js          (widgets/browser-custom-element.js)
+   content/global/elements/button.js           (widgets/button.js)
    content/global/elements/checkbox.js         (widgets/checkbox.js)
    content/global/elements/datetimebox.js      (widgets/datetimebox.js)
    content/global/elements/findbar.js          (widgets/findbar.js)
diff --git a/toolkit/content/widgets/button.xml b/toolkit/content/widgets/button.js
rename from toolkit/content/widgets/button.xml
rename to toolkit/content/widgets/button.js
--- a/toolkit/content/widgets/button.xml
+++ b/toolkit/content/widgets/button.js
@@ -1,159 +1,65 @@
-<?xml version="1.0"?>
-<!-- This Source Code Form is subject to the terms of the Mozilla Public
-   - License, v. 2.0. If a copy of the MPL was not distributed with this
-   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
-
-
-<bindings id="buttonBindings"
-   xmlns="http://www.mozilla.org/xbl"
-   xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
-   xmlns:xbl="http://www.mozilla.org/xbl">
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
-  <binding id="button-base" extends="chrome://global/content/bindings/general.xml#basetext">
-    <implementation implements="nsIDOMXULButtonElement">
-      <property name="type"
-                onget="return this.getAttribute('type');"
-                onset="this.setAttribute('type', val); return val;"/>
-
-      <property name="dlgType"
-                onget="return this.getAttribute('dlgtype');"
-                onset="this.setAttribute('dlgtype', val); return val;"/>
-
-      <property name="group"
-                onget="return this.getAttribute('group');"
-                onset="this.setAttribute('group', val); return val;"/>
+"use strict";
 
-      <property name="open" onget="return this.hasAttribute('open');">
-        <setter><![CDATA[
-          if (this.hasMenu()) {
-            this.openMenu(val);
-          } else if (val) {
-            // Fall back to just setting the attribute
-            this.setAttribute("open", "true");
-          } else {
-            this.removeAttribute("open");
-          }
-          return val;
-        ]]></setter>
-      </property>
-
-      <property name="checked" onget="return this.hasAttribute('checked');">
-        <setter><![CDATA[
-          if (this.type == "radio" && val) {
-            var sibs = this.parentNode.getElementsByAttribute("group", this.group);
-            for (var i = 0; i < sibs.length; ++i)
-              sibs[i].removeAttribute("checked");
-          }
-
-          if (val)
-            this.setAttribute("checked", "true");
-          else
-            this.removeAttribute("checked");
-
-          return val;
-        ]]></setter>
-      </property>
+// This is loaded into all XUL windows. Wrap in a block to prevent
+// leaking to window scope.
+{
+  class MozButtonBase extends MozElements.BaseText {
+    constructor() {
+      super();
 
-      <method name ="filterButtons">
-        <parameter name="node"/>
-        <body>
-        <![CDATA[
-          // if the node isn't visible, don't descend into it.
-          var cs = node.ownerGlobal.getComputedStyle(node);
-          if (cs.visibility != "visible" || cs.display == "none") {
-            return NodeFilter.FILTER_REJECT;
-          }
-          // but it may be a popup element, in which case we look at "state"...
-          if (cs.display == "-moz-popup" && node.state != "open") {
-            return NodeFilter.FILTER_REJECT;
-          }
-          // OK - the node seems visible, so it is a candidate.
-          if (node.localName == "button" && node.accessKey && !node.disabled)
-            return NodeFilter.FILTER_ACCEPT;
-          return NodeFilter.FILTER_SKIP;
-        ]]>
-        </body>
-      </method>
+      /**
+       * While it would seem we could do this by handling oncommand, we can't
+       * because any external oncommand handlers might get called before ours,
+       * and then they would see the incorrect value of checked. Additionally
+       * a command attribute would redirect the command events anyway.
+       */
+      this.addEventListener("click", (event) => {
+        if (event.button != 0) {
+          return;
+        }
+        this._handleClick();
+      });
 
-      <method name="fireAccessKeyButton">
-        <parameter name="aSubtree"/>
-        <parameter name="aAccessKeyLower"/>
-        <body>
-        <![CDATA[
-          var iterator = aSubtree.ownerDocument.createTreeWalker(aSubtree,
-                                                                 NodeFilter.SHOW_ELEMENT,
-                                                                 this.filterButtons);
-          while (iterator.nextNode()) {
-            var test = iterator.currentNode;
-            if (test.accessKey.toLowerCase() == aAccessKeyLower &&
-                !test.disabled && !test.collapsed && !test.hidden) {
-              test.focus();
-              test.click();
-              return true;
-            }
-          }
-          return false;
-        ]]>
-        </body>
-      </method>
-
-      <method name="_handleClick">
-        <body>
-        <![CDATA[
-          if (!this.disabled) {
-            if (this.type == "checkbox") {
-              this.checked = !this.checked;
-            } else if (this.type == "radio") {
-              this.checked = true;
-            }
-          }
-        ]]>
-        </body>
-      </method>
-    </implementation>
-
-    <handlers>
-      <!-- While it would seem we could do this by handling oncommand, we can't
-           because any external oncommand handlers might get called before ours,
-           and then they would see the incorrect value of checked. Additionally
-           a command attribute would redirect the command events anyway.-->
-      <handler event="click" button="0" action="this._handleClick();"/>
-      <handler event="keypress" key=" ">
-      <![CDATA[
+      this.addEventListener("keypress", (event) => {
+        if (event.keyCode != KeyEvent.DOM_VK_SPACE) {
+          return;
+        }
         this._handleClick();
         // Prevent page from scrolling on the space key.
         event.preventDefault();
-      ]]>
-      </handler>
+      });
 
-      <handler event="keypress">
-      <![CDATA[
+      this.addEventListener("keypress", (event) => {
         if (this.hasMenu()) {
           if (this.open)
             return;
         } else {
           if (event.keyCode == KeyEvent.DOM_VK_UP ||
               (event.keyCode == KeyEvent.DOM_VK_LEFT &&
-                document.defaultView.getComputedStyle(this.parentNode)
-                        .direction == "ltr") ||
+               document.defaultView.getComputedStyle(this.parentNode)
+                       .direction == "ltr") ||
               (event.keyCode == KeyEvent.DOM_VK_RIGHT &&
-                document.defaultView.getComputedStyle(this.parentNode)
-                        .direction == "rtl")) {
-            event.preventDefault();
-            window.document.commandDispatcher.rewindFocus();
-            return;
+               document.defaultView.getComputedStyle(this.parentNode)
+                       .direction == "rtl")) {
+                         event.preventDefault();
+                         window.document.commandDispatcher.rewindFocus();
+                         return;
           }
 
           if (event.keyCode == KeyEvent.DOM_VK_DOWN ||
               (event.keyCode == KeyEvent.DOM_VK_RIGHT &&
-                document.defaultView.getComputedStyle(this.parentNode)
-                        .direction == "ltr") ||
+               document.defaultView.getComputedStyle(this.parentNode)
+                       .direction == "ltr") ||
               (event.keyCode == KeyEvent.DOM_VK_LEFT &&
-                document.defaultView.getComputedStyle(this.parentNode)
-                        .direction == "rtl")) {
-            event.preventDefault();
-            window.document.commandDispatcher.advanceFocus();
-            return;
+               document.defaultView.getComputedStyle(this.parentNode)
+                       .direction == "rtl")) {
+                         event.preventDefault();
+                         window.document.commandDispatcher.advanceFocus();
+                         return;
           }
         }
 
@@ -174,7 +80,7 @@
         // Get the buttons for the main document and all sub-frames
         for (var frameCount = -1; frameCount < window.top.frames.length; frameCount++) {
           var doc = (frameCount == -1) ? window.top.document :
-            window.top.frames[frameCount].document;
+                    window.top.frames[frameCount].document;
           if (this.fireAccessKeyButton(doc.documentElement, charPressedLower))
             return;
         }
@@ -182,51 +88,200 @@
         // Test anonymous buttons
         var dlg = window.top.document;
         var buttonBox = dlg.getAnonymousElementByAttribute(dlg.documentElement,
-                                                         "anonid", "buttons");
+                                                           "anonid", "buttons");
         if (buttonBox)
           this.fireAccessKeyButton(buttonBox, charPressedLower);
-      ]]>
-      </handler>
-    </handlers>
-  </binding>
+      });
+    }
+
+    set type(val) {
+      this.setAttribute("type", val);
+      return val;
+    }
+
+    get type() {
+      return this.getAttribute("type");
+    }
+
+    set disabled(val) {
+      if (val) {
+        this.setAttribute("disabled", "true");
+      } else {
+        this.removeAttribute("disabled");
+      }
+      return val;
+    }
+
+    get disabled() {
+      return (this.getAttribute("disabled") == "true");
+    }
+
+    set dlgType(val) {
+      this.setAttribute("dlgtype", val);
+      return val;
+    }
+
+    get dlgType() {
+      return this.getAttribute("dlgtype");
+    }
+
+    set group(val) {
+      this.setAttribute("group", val);
+      return val;
+    }
+
+    get group() {
+      return this.getAttribute("group");
+    }
 
-  <binding id="button"
-           extends="chrome://global/content/bindings/button.xml#button-base">
-    <content>
-      <children includes="observes|template|menupopup|panel|tooltip"/>
-      <xul:hbox class="box-inherit button-box" xbl:inherits="align,dir,pack,orient"
-                align="center" pack="center" flex="1" anonid="button-box">
-        <xul:image class="button-icon" xbl:inherits="src=image"/>
-        <xul:label class="button-text" xbl:inherits="value=label,accesskey,crop,highlightable"/>
-        <xul:label class="button-highlightable-text" xbl:inherits="xbl:text=label,accesskey,crop,highlightable"/>
-      </xul:hbox>
-    </content>
-  </binding>
+    set open(val) {
+      if (this.hasMenu()) {
+        this.openMenu(val);
+      } else if (val) {
+        // Fall back to just setting the attribute
+        this.setAttribute("open", "true");
+      } else {
+        this.removeAttribute("open");
+      }
+      return val;
+    }
+
+    get open() {
+      return this.hasAttribute("open");
+    }
+
+    set checked(val) {
+      if (this.type == "radio" && val) {
+        var sibs = this.parentNode.getElementsByAttribute("group", this.group);
+        for (var i = 0; i < sibs.length; ++i)
+          sibs[i].removeAttribute("checked");
+      }
+
+      if (val)
+        this.setAttribute("checked", "true");
+      else
+        this.removeAttribute("checked");
+
+      return val;
+    }
+
+    get checked() {
+      return this.hasAttribute("checked");
+    }
+
+    filterButtons(node) {
+      // if the node isn't visible, don't descend into it.
+      var cs = node.ownerGlobal.getComputedStyle(node);
+      if (cs.visibility != "visible" || cs.display == "none") {
+        return NodeFilter.FILTER_REJECT;
+      }
+      // but it may be a popup element, in which case we look at "state"...
+      if (cs.display == "-moz-popup" && node.state != "open") {
+        return NodeFilter.FILTER_REJECT;
+      }
+      // OK - the node seems visible, so it is a candidate.
+      if (node.localName == "button" && node.accessKey && !node.disabled)
+        return NodeFilter.FILTER_ACCEPT;
+      return NodeFilter.FILTER_SKIP;
+    }
 
-  <binding id="menu"
-           extends="chrome://global/content/bindings/button.xml#button">
-    <content>
-      <children includes="observes|template|menupopup|panel|tooltip"/>
-      <xul:hbox class="box-inherit button-box" xbl:inherits="align,dir,pack,orient"
-                align="center" pack="center" flex="1">
-        <xul:hbox class="box-inherit" xbl:inherits="align,dir,pack,orient"
-                  align="center" pack="center" flex="1">
-          <xul:image class="button-icon" xbl:inherits="src=image"/>
-          <xul:label class="button-text" xbl:inherits="value=label,accesskey,crop"/>
-        </xul:hbox>
-        <xul:dropmarker class="button-menu-dropmarker" xbl:inherits="open,disabled,label"/>
-      </xul:hbox>
-    </content>
+    fireAccessKeyButton(aSubtree, aAccessKeyLower) {
+      var iterator = aSubtree.ownerDocument.createTreeWalker(aSubtree,
+                                                             NodeFilter.SHOW_ELEMENT,
+                                                             this.filterButtons);
+      while (iterator.nextNode()) {
+        var test = iterator.currentNode;
+        if (test.accessKey.toLowerCase() == aAccessKeyLower &&
+            !test.disabled && !test.collapsed && !test.hidden) {
+              test.focus();
+              test.click();
+              return true;
+        }
+      }
+      return false;
+    }
+
+    _handleClick() {
+      if (!this.disabled) {
+        if (this.type == "checkbox") {
+          this.checked = !this.checked;
+        } else if (this.type == "radio") {
+          this.checked = true;
+        }
+      }
+    }
+  }
+
+  MozXULElement.implementCustomInterface(MozButtonBase, [Ci.nsIDOMXULButtonElement]);
+
+  class MozButton extends MozButtonBase {
+    static get inheritedAttributes() {
+      return {
+        ".box-inherit": "align,dir,pack,orient",
+        ".button-icon": "src=image",
+        ".button-text": "value=label,accesskey,crop,highlightable",
+        ".button-highlightable-text": "text=label,accesskey,crop,highlightable",
+        ".button-menu-dropmarker": "open,disabled,label",
+      };
+    }
+
+    get icon() {
+      return this.querySelector(".button-icon");
+    }
 
-    <handlers>
-      <handler event="keypress" keycode="VK_RETURN" action="this.open = true;"/>
-      <handler event="keypress" key=" ">
-      <![CDATA[
-        this.open = true;
-        // Prevent page from scrolling on the space key.
-        event.preventDefault();
-      ]]>
-      </handler>
-    </handlers>
-  </binding>
-</bindings>
+    static get buttonFragment() {
+      let frag = document.importNode(MozXULElement.parseXULToFragment(`
+        <hbox class="box-inherit button-box" align="center" pack="center" flex="1" anonid="button-box">
+          <image class="button-icon"></image>
+          <label class="button-text"></label>
+          <label class="button-highlightable-text"></label>
+        </hbox>`), true);
+      Object.defineProperty(this, "buttonFragment", {value: frag});
+      return frag;
+    }
+
+    static get menuFragment() {
+      let frag = document.importNode(MozXULElement.parseXULToFragment(`
+        <hbox class="box-inherit button-box" align="center" pack="center" flex="1">
+          <hbox class="box-inherit" align="center" pack="center" flex="1">
+            <image class="button-icon"></image>
+            <label class="button-text"></label>
+          </hbox>
+          <dropmarker class="button-menu-dropmarker"></dropmarker>
+        </hbox>`), true);
+      Object.defineProperty(this, "menuFragment", {value: frag});
+      return frag;
+    }
+
+    connectedCallback() {
+      if (this.delayConnectedCallback()) {
+        return;
+      }
+
+      let fragment;
+      if (this.type === "menu") {
+        fragment = MozButton.menuFragment;
+
+        this.addEventListener("keypress", (event) => {
+          if (event.keyCode != KeyEvent.DOM_VK_RETURN &&
+              event.keyCode != KeyEvent.DOM_VK_SPACE) {
+            return;
+          }
+
+          this.open = true;
+          // Prevent page from scrolling on the space key.
+          if (event.keyCode == KeyEvent.DOM_VK_SPACE) {
+            event.preventDefault();
+          }
+        });
+      } else {
+        fragment = MozButton.buttonFragment;
+      }
+
+      this.appendChild(fragment.cloneNode(true));
+      this.initializeAttributeInheritance();
+    }
+  }
+
+  customElements.define("button", MozButton);
+}
diff --git a/toolkit/content/xul.css b/toolkit/content/xul.css
--- a/toolkit/content/xul.css
+++ b/toolkit/content/xul.css
@@ -111,16 +111,6 @@
   text-decoration: underline;
 }
 
-/********** button **********/
-
-button {
-  -moz-binding: url("chrome://global/content/bindings/button.xml#button");
-}
-
-button[type="menu"] {
-  -moz-binding: url("chrome://global/content/bindings/button.xml#menu");
-}
-
 /********** toolbarbutton **********/
 
 toolbarbutton {

