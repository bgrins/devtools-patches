
# HG changeset patch
# User Gabriel Luong <gabriel.luong@gmail.com>
# Date 1500336016 14400
# Node ID 298a3c8c4e5db8e34a251b377f4e75f43f4da6ee
# Parent  a201b7d3ed0235ebe59aee45b44d5376b230dcc2
Bug 1369945 - Display a split rule view panel in the inspector. r=pbro, bgrins

MozReview-Commit-ID: 1aONAj6OPFB


diff --git a/devtools/client/animationinspector/test/browser_animation_animated_properties_progress_indicator.js b/devtools/client/animationinspector/test/browser_animation_animated_properties_progress_indicator.js
--- a/devtools/client/animationinspector/test/browser_animation_animated_properties_progress_indicator.js
+++ b/devtools/client/animationinspector/test/browser_animation_animated_properties_progress_indicator.js
@@ -75,12 +75,12 @@
   yield clickOnTimelineHeader(panel, 0.5);
   const originalIndicatorPosition = progressIndicatorEl.style.left;
   yield clickOnAnimation(panel, 1);
   is(progressIndicatorEl.style.left, originalIndicatorPosition,
      "The animation time should be continued even if another animation selects");
 });
 
 function approximate(percentageString1, percentageString2, message) {
-  const val1 = Math.round(parseFloat(percentageString1));
+  const val1 = Math.ceil(parseFloat(percentageString1));
   const val2 = Math.round(parseFloat(percentageString2));
   is(val1, val2, message);
 }
diff --git a/devtools/client/animationinspector/test/browser_animation_refresh_when_active.js b/devtools/client/animationinspector/test/browser_animation_refresh_when_active.js
--- a/devtools/client/animationinspector/test/browser_animation_refresh_when_active.js
+++ b/devtools/client/animationinspector/test/browser_animation_refresh_when_active.js
@@ -7,17 +7,22 @@
 requestLongerTimeout(2);
 
 // Test that the panel only refreshes when it is visible in the sidebar.
 
 add_task(function* () {
   yield addTab(URL_ROOT + "doc_simple_animation.html");
 
   let {inspector, panel} = yield openAnimationInspector();
-  yield testRefresh(inspector, panel);
+
+  if (SPLIT_RULE_VIEW_ENABLED) {
+    yield testRefreshInSplitRuleView(inspector, panel);
+  } else {
+    yield testRefresh(inspector, panel);
+  }
 });
 
 function* testRefresh(inspector, panel) {
   info("Select a non animated node");
   yield selectNodeAndWaitForAnimations(".still", inspector);
 
   info("Switch to the rule-view panel");
   inspector.sidebar.select("ruleview");
@@ -46,8 +51,25 @@
 
   info("Switch to the animation panel again");
   inspector.sidebar.select("animationinspector");
   yield panel.once(panel.UI_UPDATED_EVENT);
 
   assertAnimationsDisplayed(panel, 0,
     "The panel is now empty after refreshing");
 }
+
+function* testRefreshInSplitRuleView(inspector, panel) {
+  info("Select a non animated node");
+  yield selectNodeAndWaitForAnimations(".still", inspector);
+
+  info("Select the animated node now");
+  yield selectNodeAndWaitForAnimations(".animated", inspector);
+
+  assertAnimationsDisplayed(panel, 1,
+    "The panel shows the animation data after selecting it");
+
+  info("Select the non animated node again");
+  yield selectNode(".still", inspector);
+
+  assertAnimationsDisplayed(panel, 0,
+    "The panel is now empty after refreshing");
+}
diff --git a/devtools/client/framework/toolbox-options.js b/devtools/client/framework/toolbox-options.js
--- a/devtools/client/framework/toolbox-options.js
+++ b/devtools/client/framework/toolbox-options.js
@@ -317,16 +317,21 @@
       label: "Enable new console frontend",
       id: "devtools-new-webconsole",
       parentId: "webconsole-options"
     }, {
       pref: "devtools.debugger.new-debugger-frontend",
       label: "Enable new debugger frontend",
       id: "devtools-new-debugger",
       parentId: "debugger-options"
+    }, {
+      pref: "devtools.inspector.split-rule-enabled",
+      label: "Enable split rule view",
+      id: "devtools-split-rule-view",
+      parentId: "inspector-options"
     }];
 
     let createPreferenceOption = ({pref, label, id}) => {
       let inputLabel = this.panelDoc.createElement("label");
       let checkbox = this.panelDoc.createElement("input");
       checkbox.setAttribute("type", "checkbox");
       if (GetPref(pref)) {
         checkbox.setAttribute("checked", "checked");
diff --git a/devtools/client/inspector/boxmodel/test/browser_boxmodel_sync.js b/devtools/client/inspector/boxmodel/test/browser_boxmodel_sync.js
--- a/devtools/client/inspector/boxmodel/test/browser_boxmodel_sync.js
+++ b/devtools/client/inspector/boxmodel/test/browser_boxmodel_sync.js
@@ -11,16 +11,42 @@
 add_task(function* () {
   yield addTab("data:text/html," + encodeURIComponent(TEST_URI));
   let {inspector, view} = yield openBoxModelView();
 
   info("When a property is edited, it should sync in the rule view");
 
   yield selectNode("p", inspector);
 
+  if (SPLIT_RULE_VIEW_ENABLED) {
+    yield testEditBoxModelInSplitRuleView(inspector, view);
+  } else {
+    yield testEditBoxModel(inspector, view);
+  }
+});
+
+function* testEditBoxModelInSplitRuleView(inspector, view) {
+  info("Modify padding-bottom in box model view");
+  let span = view.document.querySelector(".boxmodel-padding.boxmodel-bottom > span");
+  EventUtils.synthesizeMouseAtCenter(span, {}, view.document.defaultView);
+  let editor = view.document.querySelector(".styleinspector-propertyeditor");
+
+  EventUtils.synthesizeKey("7", {}, view.document.defaultView);
+  yield waitForUpdate(inspector);
+  is(editor.value, "7", "Should have the right value in the editor.");
+  EventUtils.synthesizeKey("VK_RETURN", {}, view.document.defaultView);
+
+  info("Check that the property was synced with the split rule view");
+  let ruleView = selectRuleView(inspector);
+  let ruleEditor = getRuleViewRuleEditor(ruleView, 0);
+  let textProp = ruleEditor.rule.textProps[0];
+  is(textProp.value, "7px", "The property has the right value");
+}
+
+function* testEditBoxModel(inspector, view) {
   info("Modify padding-bottom in box model view");
   let span = view.document.querySelector(".boxmodel-padding.boxmodel-bottom > span");
   EventUtils.synthesizeMouseAtCenter(span, {}, view.document.defaultView);
   let editor = view.document.querySelector(".styleinspector-propertyeditor");
 
   EventUtils.synthesizeKey("7", {}, view.document.defaultView);
   yield waitForUpdate(inspector);
   is(editor.value, "7", "Should have the right value in the editor.");
@@ -36,9 +62,9 @@
 
   info("Wait for the rule view to be refreshed");
   yield onRuleViewRefreshed;
   ok(true, "The rule view was refreshed");
 
   let ruleEditor = getRuleViewRuleEditor(ruleView, 0);
   let textProp = ruleEditor.rule.textProps[0];
   is(textProp.value, "7px", "The property has the right value");
-});
+}
diff --git a/devtools/client/inspector/fonts/fonts.js b/devtools/client/inspector/fonts/fonts.js
--- a/devtools/client/inspector/fonts/fonts.js
+++ b/devtools/client/inspector/fonts/fonts.js
@@ -131,16 +131,21 @@
    * Handler for click on show all fonts button.
    */
   onShowAllFont() {
     this.store.dispatch(updateShowAllFonts(true));
     this.update();
   },
 
   update: Task.async(function* () {
+    // Stop refreshing if the inspector or store is already destroyed.
+    if (!this.inspector || !this.store) {
+      return;
+    }
+
     let node = this.inspector.selection.nodeFront;
 
     if (!node ||
         !this.isPanelVisible() ||
         !this.inspector.selection.isConnected() ||
         !this.inspector.selection.isElementNode()) {
       return;
     }
diff --git a/devtools/client/inspector/grids/test/browser_grids_grid-outline-highlight-area.js b/devtools/client/inspector/grids/test/browser_grids_grid-outline-highlight-area.js
--- a/devtools/client/inspector/grids/test/browser_grids_grid-outline-highlight-area.js
+++ b/devtools/client/inspector/grids/test/browser_grids_grid-outline-highlight-area.js
@@ -61,11 +61,11 @@
       const { showGridCell, showGridArea } = options;
       const { gridFragmentIndex, rowNumber, columnNumber } = showGridCell;
 
       is(gridFragmentIndex, 0, "Should be the first grid fragment index.");
       is(rowNumber, 1, "Should be the first grid row.");
       is(columnNumber, 1, "Should be the first grid column.");
       is(showGridArea, "header", "Grid area name should be 'header'.");
     });
-  EventUtils.synthesizeMouse(gridCellA, 5, 5, {type: "mouseover"}, doc.defaultView);
+  EventUtils.synthesizeMouse(gridCellA, 1, 1, {type: "mouseover"}, doc.defaultView);
   yield onCellAHighlight;
 });
diff --git a/devtools/client/inspector/grids/test/browser_grids_grid-outline-highlight-cell.js b/devtools/client/inspector/grids/test/browser_grids_grid-outline-highlight-cell.js
--- a/devtools/client/inspector/grids/test/browser_grids_grid-outline-highlight-cell.js
+++ b/devtools/client/inspector/grids/test/browser_grids_grid-outline-highlight-cell.js
@@ -50,11 +50,11 @@
       info("Checking show grid cell options are correct.");
       const { showGridCell } = options;
       const { gridFragmentIndex, rowNumber, columnNumber } = showGridCell;
 
       is(gridFragmentIndex, 0, "Should be the first grid fragment index.");
       is(rowNumber, 1, "Should be the first grid row.");
       is(columnNumber, 1, "Should be the first grid column.");
     });
-  EventUtils.synthesizeMouse(gridCellA, 10, 5, {type: "mouseover"}, doc.defaultView);
+  EventUtils.synthesizeMouse(gridCellA, 1, 1, {type: "mouseover"}, doc.defaultView);
   yield onCellAHighlight;
 });
diff --git a/devtools/client/inspector/inspector.js b/devtools/client/inspector/inspector.js
--- a/devtools/client/inspector/inspector.js
+++ b/devtools/client/inspector/inspector.js
@@ -3,23 +3,23 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 /* global window, BrowserLoader */
 
 "use strict";
 
-var Services = require("Services");
-var promise = require("promise");
-var defer = require("devtools/shared/defer");
-var EventEmitter = require("devtools/shared/event-emitter");
+const Services = require("Services");
+const promise = require("promise");
+const defer = require("devtools/shared/defer");
+const EventEmitter = require("devtools/shared/event-emitter");
 const {executeSoon} = require("devtools/shared/DevToolsUtils");
-var KeyShortcuts = require("devtools/client/shared/key-shortcuts");
-var {Task} = require("devtools/shared/task");
+const KeyShortcuts = require("devtools/client/shared/key-shortcuts");
+const {Task} = require("devtools/shared/task");
 const {initCssProperties} = require("devtools/shared/fronts/css-properties");
 const nodeConstants = require("devtools/shared/dom-node-constants");
 const Telemetry = require("devtools/client/shared/telemetry");
 
 const Menu = require("devtools/client/framework/menu");
 const MenuItem = require("devtools/client/framework/menu-item");
 
 const {HTMLBreadcrumbs} = require("devtools/client/inspector/breadcrumbs");
@@ -472,30 +472,63 @@
   /**
    * Build Splitter located between the main and side area of
    * the Inspector panel.
    */
   setupSplitter: function () {
     let SplitBox = this.React.createFactory(this.browserRequire(
       "devtools/client/shared/components/splitter/split-box"));
 
-    let splitter = SplitBox({
-      className: "inspector-sidebar-splitter",
-      initialWidth: INITIAL_SIDEBAR_SIZE,
-      initialHeight: INITIAL_SIDEBAR_SIZE,
-      splitterSize: 1,
-      endPanelControl: true,
-      startPanel: this.InspectorTabPanel({
-        id: "inspector-main-content"
-      }),
-      endPanel: this.InspectorTabPanel({
-        id: "inspector-sidebar-container"
-      }),
-      vert: this.useLandscapeMode(),
-    });
+    let isSplitRuleViewEnabled =
+      Services.prefs.getBoolPref("devtools.inspector.split-rule-enabled");
+
+    let rulesContainer = this.panelDoc.getElementById("inspector-rules-container");
+    rulesContainer.style.visibility = isSplitRuleViewEnabled ? "visible" : "collapse";
+
+    let splitter = isSplitRuleViewEnabled ?
+      SplitBox({
+        className: "inspector-sidebar-splitter",
+        initialSize: INITIAL_SIDEBAR_SIZE,
+        minSize: "50%",
+        maxSize: "80%",
+        splitterSize: 1,
+        endPanelControl: true,
+        startPanel: this.InspectorTabPanel({
+          id: "inspector-main-content"
+        }),
+        endPanel: SplitBox({
+          initialSize: "50%",
+          minSize: 10,
+          maxSize: "80%",
+          splitterSize: 1,
+          endPanelControl: true,
+          startPanel: this.InspectorTabPanel({
+            id: "inspector-rules-container"
+          }),
+          endPanel: this.InspectorTabPanel({
+            id: "inspector-sidebar-container"
+          }),
+          vert: this.useLandscapeMode()
+        })
+      })
+      :
+      SplitBox({
+        className: "inspector-sidebar-splitter",
+        initialWidth: INITIAL_SIDEBAR_SIZE,
+        initialHeight: INITIAL_SIDEBAR_SIZE,
+        splitterSize: 1,
+        endPanelControl: true,
+        startPanel: this.InspectorTabPanel({
+          id: "inspector-main-content"
+        }),
+        endPanel: this.InspectorTabPanel({
+          id: "inspector-sidebar-container"
+        }),
+        vert: this.useLandscapeMode(),
+      });
 
     this._splitter = this.ReactDOM.render(splitter,
       this.panelDoc.getElementById("inspector-splitter-box"));
 
     this.panelWin.addEventListener("resize", this.onPanelWindowResize, true);
 
     // Persist splitter state in preferences.
     this.sidebar.on("show", this.onSidebarShown);
@@ -591,38 +624,60 @@
       default:
         // This is a custom panel or a non lazy-loaded one.
         return null;
     }
     this._panels.set(id, panel);
     return panel;
   },
 
+  setupRuleView: function () {
+    let container = this.panelDoc.getElementById("inspector-rules-container");
+    this.ruleViewSideBar = new ToolSidebar(container, this, "inspector", {
+       hideTabstripe: true
+    });
+    this.getPanel("ruleview");
+    this.ruleViewSideBar.addExistingTab(
+      "ruleview",
+      INSPECTOR_L10N.getStr("inspector.sidebar.ruleViewTitle"),
+      true);
+  },
+
   /**
    * Build the sidebar.
    */
   setupSidebar: function () {
     let tabbox = this.panelDoc.querySelector("#inspector-sidebar");
     this.sidebar = new ToolSidebar(tabbox, this, "inspector", {
       showAllTabsMenu: true
     });
     this.sidebar.on("select", this.onSidebarSelect);
 
     let defaultTab = Services.prefs.getCharPref("devtools.inspector.activeSidebar");
+    let isSplitRuleViewEnabled =
+      Services.prefs.getBoolPref("devtools.inspector.split-rule-enabled");
 
     if (!Services.prefs.getBoolPref("devtools.fontinspector.enabled") &&
        defaultTab == "fontinspector") {
-      defaultTab = "ruleview";
+      defaultTab = isSplitRuleViewEnabled ? "computedview" : "ruleview";
+    }
+
+    if (Services.prefs.getCharPref("devtools.inspector.activeSidebar") === "ruleview" &&
+       isSplitRuleViewEnabled) {
+      defaultTab = "computedview";
     }
 
     // Append all side panels
-    this.sidebar.addExistingTab(
-      "ruleview",
-      INSPECTOR_L10N.getStr("inspector.sidebar.ruleViewTitle"),
-      defaultTab == "ruleview");
+
+    if (!isSplitRuleViewEnabled) {
+      this.sidebar.addExistingTab(
+        "ruleview",
+        INSPECTOR_L10N.getStr("inspector.sidebar.ruleViewTitle"),
+        defaultTab == "ruleview");
+    }
 
     this.sidebar.addExistingTab(
       "computedview",
       INSPECTOR_L10N.getStr("inspector.sidebar.computedViewTitle"),
       defaultTab == "computedview");
 
     // Grid and layout panels aren't lazy-loaded as their module end up
     // calling inspector.addSidebarTab
@@ -643,16 +698,20 @@
         this.canGetUsedFontFaces) {
       const FontInspector = this.browserRequire("devtools/client/inspector/fonts/fonts");
       this.fontinspector = new FontInspector(this, this.panelWin);
       this.fontinspector.init();
 
       this.sidebar.toggleTab(true, "fontinspector");
     }
 
+    if (Services.prefs.getBoolPref("devtools.inspector.split-rule-enabled")) {
+      this.setupRuleView();
+    }
+
     // Setup the splitter before the sidebar is displayed so,
     // we don't miss any events.
     this.setupSplitter();
 
     this.sidebar.show(defaultTab);
   },
 
   /**
diff --git a/devtools/client/inspector/inspector.xhtml b/devtools/client/inspector/inspector.xhtml
--- a/devtools/client/inspector/inspector.xhtml
+++ b/devtools/client/inspector/inspector.xhtml
@@ -64,27 +64,23 @@
       <div id="markup-box"></div>
       <div id="inspector-breadcrumbs-toolbar" class="devtools-toolbar">
         <div id="inspector-breadcrumbs" class="breadcrumbs-widget-container"
                   role="group" data-localization="aria-label=inspector.breadcrumbs.label" tabindex="0"></div>
       </div>
     </div>
 
     <!-- Splitter -->
-    <div
-      xmlns="http://www.w3.org/1999/xhtml"
-      id="inspector-splitter-box">
-    </div>
+    <div id="inspector-splitter-box"></div>
+
+    <div id="inspector-rules-container"></div>
 
     <!-- Sidebar Container -->
     <div id="inspector-sidebar-container">
-      <div
-        xmlns="http://www.w3.org/1999/xhtml"
-        id="inspector-sidebar"
-        hidden="true"></div>
+      <div id="inspector-sidebar" hidden="true"></div>
     </div>
 
     <!-- Sidebar panel definitions -->
     <div id="tabpanels" style="visibility:collapse">
       <div id="sidebar-panel-ruleview" class="devtools-monospace theme-sidebar inspector-tabpanel"
                 data-localization-bundle="devtools/client/locales/inspector.properties">
         <div id="ruleview-toolbar-container" class="devtools-toolbar">
           <div id="ruleview-toolbar">
diff --git a/devtools/client/inspector/rules/rules.js b/devtools/client/inspector/rules/rules.js
--- a/devtools/client/inspector/rules/rules.js
+++ b/devtools/client/inspector/rules/rules.js
@@ -1558,30 +1558,38 @@
   this.view.on("ruleview-changed", this.onPropertyChanged);
   this.view.on("ruleview-refreshed", this.onViewRefreshed);
   this.view.on("ruleview-linked-clicked", this.onLinkClicked);
 
   this.inspector.selection.on("detached-front", this.onSelected);
   this.inspector.selection.on("new-node-front", this.onSelected);
   this.inspector.selection.on("pseudoclass", this.refresh);
   this.inspector.target.on("navigate", this.clearUserProperties);
-  this.inspector.sidebar.on("ruleview-selected", this.onPanelSelected);
+
+  if (Services.prefs.getBoolPref("devtools.inspector.split-rule-enabled")) {
+    this.inspector.ruleViewSideBar.on("ruleview-selected", this.onPanelSelected);
+  } else {
+    this.inspector.sidebar.on("ruleview-selected", this.onPanelSelected);
+  }
+
   this.inspector.pageStyle.on("stylesheet-updated", this.refresh);
   this.inspector.walker.on("mutations", this.onMutations);
   this.inspector.walker.on("resize", this.onResized);
 
   this.onSelected();
 }
 
 RuleViewTool.prototype = {
   isSidebarActive: function () {
     if (!this.view) {
       return false;
     }
-    return this.inspector.sidebar.getCurrentTabID() == "ruleview";
+
+    return Services.prefs.getBoolPref("devtools.inspector.split-rule-enabled") ?
+      true : this.inspector.sidebar.getCurrentTabID() == "ruleview";
   },
 
   onSelected: function (event) {
     // Ignore the event if the view has been destroyed, or if it's inactive.
     // But only if the current selection isn't null. If it's been set to null,
     // let the update go through as this is needed to empty the view on
     // navigation.
     if (!this.view) {
diff --git a/devtools/client/inspector/shared/highlighters-overlay.js b/devtools/client/inspector/shared/highlighters-overlay.js
--- a/devtools/client/inspector/shared/highlighters-overlay.js
+++ b/devtools/client/inspector/shared/highlighters-overlay.js
@@ -54,17 +54,17 @@
   this.inspector.target.on("navigate", this.onNavigate);
   this.inspector.target.on("will-navigate", this.onWillNavigate);
 
   EventEmitter.decorate(this);
 }
 
 HighlightersOverlay.prototype = {
   get isRuleView() {
-    return this.inspector.sidebar.getCurrentTabID() == "ruleview";
+    return this._lastTarget.closest(".tab-panel-box").id == "ruleview-panel";
   },
 
   /**
    * Add the highlighters overlay to the view. This will start tracking mouse events
    * and display highlighters when needed.
    *
    * @param  {CssRuleView|CssComputedView|LayoutView} view
    *         Either the rule-view or computed-view panel to add the highlighters overlay.
@@ -384,16 +384,18 @@
                       nodeInfo.value.property === "transform";
     let isEnabled = nodeInfo.value.enabled &&
                     !nodeInfo.value.overridden &&
                     !nodeInfo.value.pseudoElement;
     return this.isRuleView && isTransform && isEnabled;
   },
 
   onClick: function (event) {
+    this._lastTarget = event.target;
+
     // Bail out if the target is not a grid property value.
     if (!this._isRuleViewDisplayGrid(event.target)) {
       return;
     }
 
     event.stopPropagation();
 
     let { store } = this.inspector;
@@ -403,24 +405,24 @@
     highlighterSettings.color = grid ? grid.color : DEFAULT_GRID_COLOR;
 
     this.toggleGridHighlighter(this.inspector.selection.nodeFront, highlighterSettings,
       "rule");
   },
 
   onMouseMove: function (event) {
     // Bail out if the target is the same as for the last mousemove.
-    if (event.target === this._lastHovered) {
+    if (event.target === this._lastTarget) {
       return;
     }
 
     // Only one highlighter can be displayed at a time, hide the currently shown.
     this._hideHoveredHighlighter();
 
-    this._lastHovered = event.target;
+    this._lastTarget = event.target;
 
     let view = this.isRuleView ?
       this.inspector.getPanel("ruleview").view :
       this.inspector.getPanel("computedview").computedView;
     let nodeInfo = view.getNodeInfo(event.target);
     if (!nodeInfo) {
       return;
     }
@@ -442,23 +444,23 @@
               this.emit("highlighter-shown");
             }
           });
     }
   },
 
   onMouseOut: function (event) {
     // Only hide the highlighter if the mouse leaves the currently hovered node.
-    if (!this._lastHovered ||
-        (event && this._lastHovered.contains(event.relatedTarget))) {
+    if (!this._lastTarget ||
+        (event && this._lastTarget.contains(event.relatedTarget))) {
       return;
     }
 
     // Otherwise, hide the highlighter.
-    this._lastHovered = null;
+    this._lastTarget = null;
     this._hideHoveredHighlighter();
   },
 
   /**
    * Handler function for "markupmutation" events. Hides the grid highlighter if the grid
    * container is no longer in the DOM tree.
    */
   onMarkupMutation: Task.async(function* (evt, mutations) {
@@ -517,17 +519,17 @@
       }
     }
 
     // Remove inspector events.
     this.inspector.off("markupmutation", this.onMarkupMutation);
     this.inspector.target.off("navigate", this.onNavigate);
     this.inspector.target.off("will-navigate", this.onWillNavigate);
 
-    this._lastHovered = null;
+    this._lastTarget = null;
 
     this.inspector = null;
     this.highlighters = null;
     this.highlighterUtils = null;
     this.supportsHighlighters = null;
     this.state = null;
 
     this.geometryEditorHighlighterShown = null;
diff --git a/devtools/client/inspector/shared/test/browser_styleinspector_refresh_when_active.js b/devtools/client/inspector/shared/test/browser_styleinspector_refresh_when_active.js
--- a/devtools/client/inspector/shared/test/browser_styleinspector_refresh_when_active.js
+++ b/devtools/client/inspector/shared/test/browser_styleinspector_refresh_when_active.js
@@ -1,40 +1,47 @@
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
  http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
-// Test that the style-inspector views only refresh when they are active.
+// Test that the inspector views only refresh when they are active.
 
 const TEST_URI = `
   <div id="one" style="color:red;">one</div>
   <div id="two" style="color:blue;">two</div>
 `;
 
 add_task(function* () {
   yield addTab("data:text/html;charset=utf-8," + encodeURIComponent(TEST_URI));
   let {inspector, view} = yield openRuleView();
 
   yield selectNode("#one", inspector);
 
   is(getRuleViewPropertyValue(view, "element", "color"), "red",
     "The rule-view shows the properties for test node one");
 
-  info("Switching to the computed-view");
-  let onComputedViewReady = inspector.once("computed-view-refreshed");
-  selectComputedView(inspector);
-  yield onComputedViewReady;
+  if (!SPLIT_RULE_VIEW_ENABLED) {
+    info("Switching to the computed-view");
+    let onComputedViewReady = inspector.once("computed-view-refreshed");
+    selectComputedView(inspector);
+    yield onComputedViewReady;
+  }
   let cView = inspector.getPanel("computedview").computedView;
 
   ok(getComputedViewPropertyValue(cView, "color"), "#F00",
     "The computed-view shows the properties for test node one");
 
   info("Selecting test node two");
   yield selectNode("#two", inspector);
 
   ok(getComputedViewPropertyValue(cView, "color"), "#00F",
     "The computed-view shows the properties for test node two");
 
-  is(getRuleViewPropertyValue(view, "element", "color"), "red",
-    "The rule-view doesn't the properties for test node two");
+  if (!SPLIT_RULE_VIEW_ENABLED) {
+    is(getRuleViewPropertyValue(view, "element", "color"), "red",
+      "The rule-view doesn't show the properties for test node two");
+  } else {
+    is(getRuleViewPropertyValue(view, "element", "color"), "blue",
+    "The rule-view shows the properties for test node two");
+  }
 });
diff --git a/devtools/client/inspector/shared/test/browser_styleinspector_transform-highlighter-02.js b/devtools/client/inspector/shared/test/browser_styleinspector_transform-highlighter-02.js
--- a/devtools/client/inspector/shared/test/browser_styleinspector_transform-highlighter-02.js
+++ b/devtools/client/inspector/shared/test/browser_styleinspector_transform-highlighter-02.js
@@ -12,17 +12,17 @@
     body {
       transform: skew(16deg);
       color: yellow;
     }
   </style>
   Test the css transform highlighter
 `;
 
-var TYPE = "CssTransformHighlighter";
+const TYPE = "CssTransformHighlighter";
 
 add_task(function* () {
   yield addTab("data:text/html;charset=utf-8," + encodeURIComponent(TEST_URI));
   let {inspector, view} = yield openRuleView();
   let hs = view.highlighters;
 
   ok(!hs.highlighters[TYPE], "No highlighter exists in the rule-view (1)");
 
@@ -32,19 +32,23 @@
   ok(!hs.highlighters[TYPE], "No highlighter exists in the rule-view (2)");
 
   info("Faking a mousemove on a transform property");
   ({valueSpan} = getRuleViewProperty(view, "body", "transform"));
   let onHighlighterShown = hs.once("highlighter-shown");
   hs.onMouseMove({target: valueSpan});
   yield onHighlighterShown;
 
-  let onComputedViewReady = inspector.once("computed-view-refreshed");
-  let cView = selectComputedView(inspector);
-  yield onComputedViewReady;
+  if (!SPLIT_RULE_VIEW_ENABLED) {
+    let onComputedViewReady = inspector.once("computed-view-refreshed");
+    selectComputedView(inspector);
+    yield onComputedViewReady;
+  }
+
+  let cView = inspector.getPanel("computedview").computedView;
   hs = cView.highlighters;
 
   info("Remove the created transform highlighter");
   hs.highlighters[TYPE].finalize();
   hs.highlighters[TYPE] = null;
 
   info("Faking a mousemove on a non-transform property");
   ({valueSpan} = getComputedViewProperty(cView, "color"));
diff --git a/devtools/client/inspector/test/browser_inspector_portrait_mode.js b/devtools/client/inspector/test/browser_inspector_portrait_mode.js
--- a/devtools/client/inspector/test/browser_inspector_portrait_mode.js
+++ b/devtools/client/inspector/test/browser_inspector_portrait_mode.js
@@ -37,17 +37,22 @@
   info("Close the inspector");
   yield gDevTools.closeToolbox(toolbox.target);
 
   info("Reopen inspector");
   ({ inspector, toolbox } = yield openInspector("window"));
 
   // Devtools window should still be 500px * 500px, inspector should still be in portrait.
   splitter = inspector.panelDoc.querySelector(".inspector-sidebar-splitter");
-  ok(splitter.classList.contains("horz"), "Splitter is in horizontal mode");
+
+  if (SPLIT_RULE_VIEW_ENABLED) {
+    ok(splitter.classList.contains("vert"), "Splitter is in vertical mode");
+  } else {
+    ok(splitter.classList.contains("horz"), "Splitter is in horizontal mode");
+  }
 
   info("Restore original window size");
   toolbox.win.parent.resizeTo(originalWidth, originalHeight);
 });
 
 /**
  * Helper waiting for a class attribute mutation on the provided target. Returns a
  * promise.
diff --git a/devtools/client/inspector/test/browser_inspector_sidebarstate.js b/devtools/client/inspector/test/browser_inspector_sidebarstate.js
--- a/devtools/client/inspector/test/browser_inspector_sidebarstate.js
+++ b/devtools/client/inspector/test/browser_inspector_sidebarstate.js
@@ -4,35 +4,36 @@
 "use strict";
 
 const TEST_URI = "data:text/html;charset=UTF-8," +
   "<h1>browser_inspector_sidebarstate.js</h1>";
 
 add_task(function* () {
   let { inspector, toolbox } = yield openInspectorForURL(TEST_URI);
 
-  info("Selecting ruleview.");
-  inspector.sidebar.select("ruleview");
-
-  is(inspector.sidebar.getCurrentTabID(), "ruleview",
-     "Rule View is selected by default");
-
   info("Selecting computed view.");
   inspector.sidebar.select("computedview");
 
+  is(inspector.sidebar.getCurrentTabID(), "computedview", "Computed View is selected");
+
+  info("Selecting layout view.");
+  inspector.sidebar.select("layoutview");
+
+  is(inspector.sidebar.getCurrentTabID(), "layoutview", "Layout View is selected");
+
   // Finish initialization of the computed panel before
   // destroying the toolbox.
   yield waitForTick();
 
   info("Closing inspector.");
   yield toolbox.destroy();
 
   info("Re-opening inspector.");
   inspector = (yield openInspector()).inspector;
 
   if (!inspector.sidebar.getCurrentTabID()) {
     info("Default sidebar still to be selected, adding select listener.");
     yield inspector.sidebar.once("select");
   }
 
-  is(inspector.sidebar.getCurrentTabID(), "computedview",
-     "Computed view is selected by default.");
+  is(inspector.sidebar.getCurrentTabID(), "layoutview",
+     "Layout view is selected by default.");
 });
diff --git a/devtools/client/inspector/test/shared-head.js b/devtools/client/inspector/test/shared-head.js
--- a/devtools/client/inspector/test/shared-head.js
+++ b/devtools/client/inspector/test/shared-head.js
@@ -5,16 +5,20 @@
 "use strict";
 
 /* eslint no-unused-vars: [2, {"vars": "local"}] */
 /* globals registerTestActor, getTestActor, Task, openToolboxForTab, gBrowser */
 /* import-globals-from ../../framework/test/shared-head.js */
 
 var {getInplaceEditorForSpan: inplaceEditor} = require("devtools/client/shared/inplace-editor");
 
+// Whether or not to use the split rule views.
+const SPLIT_RULE_VIEW_ENABLED =
+      Services.prefs.getBoolPref("devtools.inspector.split-rule-enabled");
+
 // This file contains functions related to the inspector that are also of interest to
 // other test directores as well.
 
 /**
  * Open the toolbox, with the inspector tool visible.
  * @param {String} hostType Optional hostType, as defined in Toolbox.HostType
  * @return a promise that resolves when the inspector is ready
  */
@@ -143,17 +147,19 @@
 /**
  * Select the rule view sidebar tab on an already opened inspector panel.
  *
  * @param {InspectorPanel} inspector
  *        The opened inspector panel
  * @return {CssRuleView} the rule view
  */
 function selectRuleView(inspector) {
-  inspector.sidebar.select("ruleview");
+  if (!SPLIT_RULE_VIEW_ENABLED) {
+    inspector.sidebar.select("ruleview");
+  }
   return inspector.getPanel("ruleview").view;
 }
 
 /**
  * Select the computed view sidebar tab on an already opened inspector panel.
  *
  * @param {InspectorPanel} inspector
  *        The opened inspector panel
diff --git a/devtools/client/preferences/devtools.js b/devtools/client/preferences/devtools.js
--- a/devtools/client/preferences/devtools.js
+++ b/devtools/client/preferences/devtools.js
@@ -60,16 +60,23 @@
 pref("devtools.inspector.showUserAgentStyles", false);
 // Show all native anonymous content (like controls in <video> tags)
 pref("devtools.inspector.showAllAnonymousContent", false);
 // Enable the MDN docs tooltip
 pref("devtools.inspector.mdnDocsTooltip.enabled", false);
 // Enable the new color widget
 pref("devtools.inspector.colorWidget.enabled", false);
 
+// Display a split rule view in the inspector only in the nightly release
+#if defined(NIGHTLY_BUILD)
+  pref("devtools.inspector.split-rule-enabled", true);
+#else
+  pref("devtools.inspector.split-rule-enabled", false);
+#endif
+
 // Enable the Font Inspector
 pref("devtools.fontinspector.enabled", true);
 
 // Counter to promote the inspector layout view.
 // @remove after release 56 (See Bug 1355747)
 pref("devtools.promote.layoutview", 1);
 // Whether or not to show the promote bar in the layout view
 // @remove after release 56 (See Bug 1355747)
diff --git a/devtools/client/shared/components/tabs/tabbar.css b/devtools/client/shared/components/tabs/tabbar.css
--- a/devtools/client/shared/components/tabs/tabbar.css
+++ b/devtools/client/shared/components/tabs/tabbar.css
@@ -1,13 +1,17 @@
 /* vim:set ts=2 sw=2 sts=2 et: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+*[hidetabs=true] .tabs .tabs-navigation {
+  display: none;
+}
+
 .tabs .tabs-navigation {
   line-height: 15px;
 }
 
 .tabs .tabs-navigation {
   height: 24px;
 }
 
diff --git a/devtools/client/shared/test/browser_telemetry_sidebar.js b/devtools/client/shared/test/browser_telemetry_sidebar.js
--- a/devtools/client/shared/test/browser_telemetry_sidebar.js
+++ b/devtools/client/shared/test/browser_telemetry_sidebar.js
@@ -24,18 +24,19 @@
   yield gDevTools.closeToolbox(target);
   gBrowser.removeCurrentTab();
 });
 
 function* testSidebar(toolbox) {
   info("Testing sidebar");
 
   let inspector = toolbox.getCurrentPanel();
-  let sidebarTools = ["ruleview", "computedview", "layoutview", "fontinspector",
-                      "animationinspector"];
+  let sidebarTools = SPLIT_RULE_VIEW_ENABLED ?
+    ["computedview", "layoutview", "fontinspector", "animationinspector"] :
+    ["ruleview", "computedview", "layoutview", "fontinspector", "animationinspector"];
 
   // Concatenate the array with itself so that we can open each tool twice.
   sidebarTools.push.apply(sidebarTools, sidebarTools);
 
   return new Promise(resolve => {
     // See TOOL_DELAY for why we need setTimeout here
     setTimeout(function selectSidebarTab() {
       let tool = sidebarTools.pop();
@@ -59,16 +60,21 @@
       // Inspector stats are tested in browser_telemetry_toolboxtabs.js so we
       // skip them here because we only open the inspector once for this test.
       continue;
     }
 
     if (histId === "DEVTOOLS_TOOLBOX_OPENED_COUNT") {
       is(value.length, 1, histId + " has only one entry");
     } else if (histId.endsWith("OPENED_COUNT")) {
+      if (SPLIT_RULE_VIEW_ENABLED && histId === "DEVTOOLS_RULEVIEW_OPENED_COUNT") {
+        is(value.length, 1, histId + " has only one entry");
+        continue;
+      }
+
       ok(value.length > 1, histId + " has more than one entry");
 
       let okay = value.every(function (element) {
         return element === true;
       });
 
       ok(okay, "All " + histId + " entries are === true");
     } else if (histId.endsWith("TIME_ACTIVE_SECONDS")) {
diff --git a/devtools/client/shared/test/head.js b/devtools/client/shared/test/head.js
--- a/devtools/client/shared/test/head.js
+++ b/devtools/client/shared/test/head.js
@@ -10,16 +10,20 @@
 Services.scriptloader.loadSubScript("chrome://mochitests/content/browser/devtools/client/framework/test/shared-head.js", this);
 
 const {DOMHelpers} = Cu.import("resource://devtools/client/shared/DOMHelpers.jsm", {});
 const {Hosts} = require("devtools/client/framework/toolbox-hosts");
 
 const TEST_URI_ROOT = "http://example.com/browser/devtools/client/shared/test/";
 const OPTIONS_VIEW_URL = TEST_URI_ROOT + "doc_options-view.xul";
 
+// Whether or not to use the split rule views.
+const SPLIT_RULE_VIEW_ENABLED =
+      Services.prefs.getBoolPref("devtools.inspector.split-rule-enabled");
+
 function catchFail(func) {
   return function () {
     try {
       return func.apply(null, arguments);
     } catch (ex) {
       ok(false, ex);
       console.error(ex);
       finish();
diff --git a/devtools/client/themes/inspector.css b/devtools/client/themes/inspector.css
--- a/devtools/client/themes/inspector.css
+++ b/devtools/client/themes/inspector.css
@@ -164,16 +164,17 @@
 }
 
 #inspector-breadcrumbs .breadcrumbs-widget-item {
   white-space: nowrap;
   flex-shrink: 0;
   font: message-box;
 }
 
+#inspector-rules-container,
 #inspector-sidebar-container {
   overflow: hidden;
   position: relative;
   height: 100%;
 }
 
 #inspector-sidebar {
   position: absolute;
@@ -208,9 +209,8 @@
   flex: 1;
   min-height: 0;
 }
 
 #markup-box > iframe {
   height: 100%;
   width: 100%;
 }
-

