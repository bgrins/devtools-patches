# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  f0f057df36e1520dee89735ddba0bc5b8836e83e
Bug 952848 - Add an option to DebuggerGenericEval to force strict mode

#jit-test/jit_test.py build_DBG.OBJ.noindex/dist/bin/js debug/Object-evalInGlobal-10.js -o

diff --git a/js/src/doc/Debugger/Debugger.Frame.md b/js/src/doc/Debugger/Debugger.Frame.md
--- a/js/src/doc/Debugger/Debugger.Frame.md
+++ b/js/src/doc/Debugger/Debugger.Frame.md
@@ -312,16 +312,19 @@ methods of other kinds of objects.
     <code>url</code>
     :   The filename or URL to which we should attribute <i>code</i>. If this
         property is omitted, the URL defaults to `"debugger eval code"`.
 
     <code>lineNumber</code>
     :   The line number at which the evaluated code should be claimed to begin
         within <i>url</i>.
 
+    <code>useStrict</code>
+    :   Whether to force the <i>code</i> to execute in strict mode.
+
 <code>evalWithBindings(<i>code</i>, <i>bindings</i>, [<i>options</i>])</code>
 :   Like `eval`, but evaluate <i>code</i> in the environment of this frame,
     extended with bindings from the object <i>bindings</i>. For each own
     enumerable property of <i>bindings</i> named <i>name</i> whose value is
     <i>value</i>, include a variable in the environment in which
     <i>code</i> is evaluated named <i>name</i>, whose value is
     <i>value</i>. Each <i>value</i> must be a debuggee value. (This is not
     like a `with` statement: <i>code</i> may access, assign to, and delete
diff --git a/js/src/jit-test/tests/debug/Frame-evalWithBindings-15.js b/js/src/jit-test/tests/debug/Frame-evalWithBindings-15.js
new file mode 100644
--- /dev/null
+++ b/js/src/jit-test/tests/debug/Frame-evalWithBindings-15.js
@@ -0,0 +1,61 @@
+// Test that evalWithBindings handles the useStrict option in
+// strict and non-strict frames
+
+var g = newGlobal();
+var dbg = new Debugger(g);
+var hits = 0;
+
+function assertStrictCompletion(completion) {
+  assertEq('throw' in completion, true);
+  assertEq('yield' in completion, false);
+  assertEq('return' in completion, false);
+}
+
+function assertNonStrictCompletion(completion) {
+  assertEq('throw' in completion, false);
+  assertEq('yield' in completion, false);
+  assertEq('return' in completion, true);
+}
+
+dbg.onDebuggerStatement = function (frame) {
+  // Inside strict frame with undefined 'useStrict' option
+  let completion = frame.evalWithBindings("foobar0 = 17",{},{});
+  assertStrictCompletion(completion);
+
+  // Inside strict frame with true 'useStrict' option
+  completion = frame.evalWithBindings("foobar1 = 17",{},{useStrict: true});
+  assertStrictCompletion(completion);
+
+  // Inside strict frame with null 'useStrict' option
+  completion = frame.evalWithBindings("foobar2 = 17",{},{useStrict: null});
+  assertStrictCompletion(completion);
+
+  // Inside strict frame with false 'useStrict' option
+  completion = frame.evalWithBindings("foobar3 = 17",{},{useStrict: false});
+  assertStrictCompletion(completion);
+
+  hits++;
+};
+g.eval("'use strict'; debugger;");
+
+dbg.onDebuggerStatement = function (frame) {
+  // Inside non-strict frame with undefined 'useStrict' option
+  let completion = frame.evalWithBindings("foobar0 = 17",{},{});
+  assertNonStrictCompletion(completion);
+
+  // Inside non-strict frame with true 'useStrict' option
+  completion = frame.evalWithBindings("foobar1 = 17",{},{useStrict: true});
+  assertStrictCompletion(completion);
+
+  // Inside non-strict frame with null 'useStrict' option
+  completion = frame.evalWithBindings("foobar2 = 17",{},{useStrict: null});
+  assertNonStrictCompletion(completion);
+
+  // Inside non-strict frame with false 'useStrict' option
+  completion = frame.evalWithBindings("foobar3 = 17",{},{useStrict: false});
+  assertNonStrictCompletion(completion);
+
+  hits++;
+};
+g.eval("debugger;");
+assertEq(hits, 2);
diff --git a/js/src/jit-test/tests/debug/Object-evalInGlobal-10.js b/js/src/jit-test/tests/debug/Object-evalInGlobal-10.js
new file mode 100644
--- /dev/null
+++ b/js/src/jit-test/tests/debug/Object-evalInGlobal-10.js
@@ -0,0 +1,31 @@
+// Test that evalInGlobal handles the useStrict option properly
+
+function assertStrictCompletion(completion) {
+  assertEq('throw' in completion, true);
+  assertEq('yield' in completion, false);
+  assertEq('return' in completion, false);
+}
+
+function assertNonStrictCompletion(completion) {
+  assertEq('throw' in completion, false);
+  assertEq('yield' in completion, false);
+  assertEq('return' in completion, true);
+}
+
+(function () {
+  var g = newGlobal();
+  var dbg = new Debugger;
+  var gw = dbg.addDebuggee(g);
+
+  let completion = gw.evalInGlobal("foobar = 17",{useStrict: true});
+  assertStrictCompletion(completion);
+
+  completion = gw.evalInGlobal("foobar = 17",{useStrict: 1});
+  assertStrictCompletion(completion);
+
+  completion = gw.evalInGlobal("foobar = 17",{useStrict: false});
+  assertNonStrictCompletion(completion);
+
+  completion = gw.evalInGlobal("foobar = 17",{useStrict: undefined});
+  assertNonStrictCompletion(completion);
+})();
diff --git a/js/src/vm/Debugger.cpp b/js/src/vm/Debugger.cpp
--- a/js/src/vm/Debugger.cpp
+++ b/js/src/vm/Debugger.cpp
@@ -6240,17 +6240,17 @@ DebuggerFrame_setOnPop(JSContext* cx, un
  * If |frame| is non-nullptr, evaluate as for a direct eval in that frame; |env|
  * must be either |frame|'s DebugScopeObject, or some extension of that
  * environment; either way, |frame|'s scope is where newly declared variables
  * go. In this case, |frame| must have a computed 'this' value, equal to |thisv|.
  */
 static bool
 EvaluateInEnv(JSContext* cx, Handle<Env*> env, HandleValue thisv, AbstractFramePtr frame,
               jsbytecode* pc, mozilla::Range<const char16_t> chars, const char* filename,
-              unsigned lineno, MutableHandleValue rval)
+              unsigned lineno, bool useStrict, MutableHandleValue rval)
 {
     assertSameCompartment(cx, env, frame);
     MOZ_ASSERT_IF(frame, thisv.get() == frame.thisValue());
     MOZ_ASSERT_IF(frame, pc);
 
     /*
      * NB: This function breaks the assumption that the compiler can see all
      * calls and properly compute a static level. In practice, any non-zero
@@ -6263,23 +6263,29 @@ EvaluateInEnv(JSContext* cx, Handle<Env*
      */
     Rooted<ScopeObject*> enclosingStaticScope(cx);
     if (!env->is<GlobalObject>())
         enclosingStaticScope = StaticNonSyntacticScopeObjects::create(cx, nullptr);
     Rooted<StaticEvalObject*> staticScope(cx, StaticEvalObject::create(cx, enclosingStaticScope));
     if (!staticScope)
         return false;
     CompileOptions options(cx);
+
+    bool makeStrictMode = useStrict;
+    // A strict frame should always be strict
+    if (frame && frame.script()->strict())
+        makeStrictMode = true;
+
     options.setIsRunOnce(true)
            .setForEval(true)
            .setNoScriptRval(false)
            .setFileAndLine(filename, lineno)
            .setCanLazilyParse(false)
            .setIntroductionType("debugger eval")
-           .maybeMakeStrictMode(frame ? frame.script()->strict() : false);
+           .maybeMakeStrictMode(makeStrictMode);
     RootedScript callerScript(cx, frame ? frame.script() : nullptr);
     SourceBufferHolder srcBuf(chars.start().get(), chars.length(), SourceBufferHolder::NoOwnership);
     RootedScript script(cx, frontend::CompileScript(cx, &cx->tempLifoAlloc(), env, staticScope,
                                                     callerScript, options, srcBuf,
                                                     /* source = */ nullptr,
                                                     /* staticLevel = */ frame ? 1 : 0));
     if (!script)
         return false;
@@ -6344,22 +6350,29 @@ DebuggerGenericEval(JSContext* cx, const
                 return false;
             }
         }
     }
 
     /* Set options from object if provided. */
     JSAutoByteString url_bytes;
     char* url = nullptr;
+    bool useStrict = false;
     unsigned lineNumber = 1;
 
     if (options.isObject()) {
         RootedObject opts(cx, &options.toObject());
         RootedValue v(cx);
 
+        if (!JS_GetProperty(cx, opts, "useStrict", &v))
+            return false;
+        if (!v.isUndefined()) {
+            useStrict = ToBoolean(v);
+        }
+
         if (!JS_GetProperty(cx, opts, "url", &v))
             return false;
         if (!v.isUndefined()) {
             RootedString url_str(cx, ToString<CanGC>(cx, v));
             if (!url_str)
                 return false;
             url = url_bytes.encodeLatin1(cx, url_str);
             if (!url)
@@ -6437,17 +6450,17 @@ DebuggerGenericEval(JSContext* cx, const
     AbstractFramePtr frame = iter ? iter->abstractFramePtr() : NullFramePtr();
     jsbytecode* pc = iter ? iter->pc() : nullptr;
     AutoStableStringChars stableChars(cx);
     if (!stableChars.initTwoByte(cx, linear))
         return false;
 
     mozilla::Range<const char16_t> chars = stableChars.twoByteRange();
     bool ok = EvaluateInEnv(cx, env, thisv, frame, pc, chars, url ? url : "debugger eval code",
-                            lineNumber, &rval);
+                            lineNumber, useStrict, &rval);
     return dbg->receiveCompletionValue(ac, ok, rval, vp);
 }
 
 static bool
 DebuggerFrame_eval(JSContext* cx, unsigned argc, Value* vp)
 {
     THIS_FRAME_ITER(cx, argc, vp, "eval", args, thisobj, _, iter);
     if (!args.requireAtLeast(cx, "Debugger.Frame.prototype.eval", 1))
diff --git a/devtools/server/actors/webconsole.js b/devtools/server/actors/webconsole.js
--- a/devtools/server/actors/webconsole.js
+++ b/devtools/server/actors/webconsole.js
@@ -801,16 +801,17 @@ WebConsoleActor.prototype =
     let input = aRequest.text;
     let timestamp = Date.now();
 
     let evalOptions = {
       bindObjectActor: aRequest.bindObjectActor,
       frameActor: aRequest.frameActor,
       url: aRequest.url,
       selectedNodeActor: aRequest.selectedNodeActor,
+      useStrict: true,
     };
 
     let evalInfo = this.evalWithDebugger(input, evalOptions);
     let evalResult = evalInfo.result;
     let helperResult = evalInfo.helperResult;
 
     let result, errorMessage, errorGrip = null;
     if (evalResult) {
@@ -1177,21 +1178,24 @@ WebConsoleActor.prototype =
     if (found$$) {
       $$ = bindings.$$;
       delete bindings.$$;
     }
 
     // Ready to evaluate the string.
     helpers.evalInput = aString;
 
-    let evalOptions;
+    let evalOptions = {};
     if (typeof aOptions.url == "string") {
-      evalOptions = { url: aOptions.url };
+      evalOptions.url = aOptions.url;
     }
 
+    evalOptions.useStrict = aOptions.useStrict;
+    console.log("Calling with options", evalOptions);
+
     let result;
     if (frame) {
       result = frame.evalWithBindings(aString, bindings, evalOptions);
     }
     else {
       result = dbgWindow.evalInGlobalWithBindings(aString, bindings, evalOptions);
     }
 
