# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  74efcf2a677b42035e0a8ef7dc3c96dc40430033
Bug ??? toolbox.xul -> toolbox.html

diff --git a/devtools/client/framework/toolbox.js b/devtools/client/framework/toolbox.js
--- a/devtools/client/framework/toolbox.js
+++ b/devtools/client/framework/toolbox.js
@@ -172,17 +172,17 @@ exports.Toolbox = Toolbox;
 Toolbox.HostType = {
   BOTTOM: "bottom",
   SIDE: "side",
   WINDOW: "window",
   CUSTOM: "custom"
 };
 
 Toolbox.prototype = {
-  _URL: "chrome://devtools/content/framework/toolbox.xul",
+  _URL: "chrome://devtools/content/framework/toolbox.xhtml",
 
   _prefs: {
     LAST_HOST: "devtools.toolbox.host",
     LAST_TOOL: "devtools.toolbox.selectedTool",
     SIDE_ENABLED: "devtools.toolbox.sideEnabled",
     PREVIOUS_HOST: "devtools.toolbox.previousHost"
   },
 
@@ -356,22 +356,22 @@ Toolbox.prototype = {
       domHelper.onceDOMReady(() => domReady.resolve());
 
       yield domReady.promise;
 
       this.isReady = true;
       let framesPromise = this._listFrames();
 
       this.closeButton = this.doc.getElementById("toolbox-close");
-      this.closeButton.addEventListener("command", this.destroy, true);
+      this.closeButton.addEventListener("click", this.destroy, true);
 
       gDevTools.on("pref-changed", this._prefChanged);
 
       let framesMenu = this.doc.getElementById("command-button-frames");
-      framesMenu.addEventListener("command", this.selectFrame, true);
+      framesMenu.addEventListener("click", this.selectFrame, true);
 
       this.textboxContextMenuPopup =
         this.doc.getElementById("toolbox-textbox-context-popup");
       this.textboxContextMenuPopup.addEventListener("popupshowing",
         this._updateTextboxMenuItems, true);
 
       this._buildDockButtons();
       this._buildOptions();
@@ -773,20 +773,21 @@ Toolbox.prototype = {
     }
 
     if (!this._target.isLocalTab) {
       return;
     }
 
     // Bottom-type host can be minimized, add a button for this.
     if (this.hostType == Toolbox.HostType.BOTTOM) {
-      let minimizeBtn = this.doc.createElement("toolbarbutton");
+      let minimizeBtn = this.doc.createElement("button");
       minimizeBtn.id = "toolbox-dock-bottom-minimize";
+      minimizeBtn.className = "devtools-button";
 
-      minimizeBtn.addEventListener("command", this._toggleMinimizeMode);
+      minimizeBtn.addEventListener("click", this._toggleMinimizeMode);
       dockBox.appendChild(minimizeBtn);
       // Show the button in its maximized state.
       this._onBottomHostMaximized();
 
       // Update the label and icon when the state changes.
       this._host.on("minimized", this._onBottomHostMinimized);
       this._host.on("maximized", this._onBottomHostMaximized);
       // Maximize again when a tool gets selected.
@@ -806,22 +807,22 @@ Toolbox.prototype = {
     for (let type in Toolbox.HostType) {
       let position = Toolbox.HostType[type];
       if (position == this.hostType ||
           position == Toolbox.HostType.CUSTOM ||
           (!sideEnabled && position == Toolbox.HostType.SIDE)) {
         continue;
       }
 
-      let button = this.doc.createElement("toolbarbutton");
+      let button = this.doc.createElement("button");
       button.id = "toolbox-dock-" + position;
-      button.className = "toolbox-dock-button";
+      button.className = "toolbox-dock-button devtools-button";
       button.setAttribute("tooltiptext", toolboxStrings("toolboxDockButtons." +
                                                         position + ".tooltip"));
-      button.addEventListener("command", () => {
+      button.addEventListener("click", () => {
         this.switchHost(position);
       });
 
       dockBox.appendChild(button);
     }
   },
 
   _getMinimizeButtonShortcutTooltip: function() {
@@ -918,27 +919,27 @@ Toolbox.prototype = {
     });
   },
 
   /**
    * Adding the element picker button is done here unlike the other buttons
    * since we want it to work for remote targets too
    */
   _buildPickerButton: function() {
-    this._pickerButton = this.doc.createElement("toolbarbutton");
+    this._pickerButton = this.doc.createElement("button");
     this._pickerButton.id = "command-button-pick";
-    this._pickerButton.className = "command-button command-button-invertable";
+    this._pickerButton.className = "command-button command-button-invertable devtools-button";
     this._pickerButton.setAttribute("tooltiptext", toolboxStrings("pickButton.tooltip"));
     this._pickerButton.setAttribute("hidden", "true");
 
     let container = this.doc.querySelector("#toolbox-picker-container");
     container.appendChild(this._pickerButton);
 
     this._togglePicker = this.highlighterUtils.togglePicker.bind(this.highlighterUtils);
-    this._pickerButton.addEventListener("command", this._togglePicker, false);
+    this._pickerButton.addEventListener("click", this._togglePicker, false);
   },
 
   /**
    * Apply the current cache setting from devtools.cache.disabled to this
    * toolbox's tab.
    */
   _applyCacheSettings: function() {
     let pref = "devtools.cache.disabled";
@@ -1075,43 +1076,43 @@ Toolbox.prototype = {
     radio.id = "toolbox-tab-" + id;
     radio.setAttribute("toolid", id);
     radio.setAttribute("ordinal", toolDefinition.ordinal);
     radio.setAttribute("tooltiptext", toolDefinition.tooltip);
     if (toolDefinition.invertIconForLightTheme) {
       radio.setAttribute("icon-invertable", "true");
     }
 
-    radio.addEventListener("command", () => {
+    radio.addEventListener("click", () => {
       this.selectTool(id);
     });
 
     // spacer lets us center the image and label, while allowing cropping
     let spacer = this.doc.createElement("spacer");
     spacer.setAttribute("flex", "1");
     radio.appendChild(spacer);
 
     if (toolDefinition.icon) {
-      let image = this.doc.createElement("image");
+      let image = this.doc.createElement("img");
       image.className = "default-icon";
       image.setAttribute("src",
                          toolDefinition.icon || toolDefinition.highlightedicon);
       radio.appendChild(image);
       // Adding the highlighted icon image
-      image = this.doc.createElement("image");
+      image = this.doc.createElement("img");
       image.className = "highlighted-icon";
       image.setAttribute("src",
                          toolDefinition.highlightedicon || toolDefinition.icon);
       radio.appendChild(image);
     }
 
     if (toolDefinition.label && !toolDefinition.iconOnly) {
       let label = this.doc.createElement("label");
-      label.setAttribute("value", toolDefinition.label);
-      label.setAttribute("crop", "end");
+      label.textContent = toolDefinition.label;
+      // label.setAttribute("crop", "end");
       label.setAttribute("flex", "1");
       radio.appendChild(label);
       radio.setAttribute("flex", "1");
     }
 
     if (!toolDefinition.bgTheme) {
       toolDefinition.bgTheme = "theme-toolbar";
     }
@@ -1340,17 +1341,25 @@ Toolbox.prototype = {
 
     // select the right tab, making 0th index the default tab if right tab not
     // found.
     tabstrip.selectedItem = tab || tabstrip.childNodes[0];
 
     // and select the right iframe
     let deck = this.doc.getElementById("toolbox-deck");
     let panel = this.doc.getElementById("toolbox-panel-" + id);
-    deck.selectedPanel = panel;
+    console.log("Geting panel for ", id);
+
+    // Hack to work around no <deck>
+    // deck.selectedPanel = panel;
+    if (this.selectedPanel) {
+      this.selectedPanel.classList.remove("visible");
+    }
+    this.selectedPanel = panel;
+    panel.classList.add("visible");
 
     this.lastUsedToolId = this.currentToolId;
     this.currentToolId = id;
     this._refreshConsoleDisplay();
     if (id != "options") {
       Services.prefs.setCharPref(this._prefs.LAST_TOOL, id);
     }
 
@@ -1553,17 +1562,18 @@ Toolbox.prototype = {
       type: "switchToFrame",
       windowId: windowId
     };
     this._target.client.request(packet);
     // Wait for frameUpdate event to update the UI
   },
 
   _updateFrames: function(event, data) {
-    if (!Services.prefs.getBoolPref("devtools.command-button-frames.enabled")) {
+    // XXX: Don't deal with frames yet
+    if (true || !Services.prefs.getBoolPref("devtools.command-button-frames.enabled")) {
       return;
     }
 
     // We may receive this event before the toolbox is ready.
     if (!this.isReady) {
       return;
     }
 
@@ -1908,17 +1918,17 @@ Toolbox.prototype = {
 
     this._lastFocusedElement = null;
 
     if (this.webconsolePanel) {
       this._saveSplitConsoleHeight();
       this.webconsolePanel.removeEventListener("resize",
         this._saveSplitConsoleHeight);
     }
-    this.closeButton.removeEventListener("command", this.destroy, true);
+    this.closeButton.removeEventListener("click", this.destroy, true);
     this.textboxContextMenuPopup.removeEventListener("popupshowing",
       this._updateTextboxMenuItems, true);
 
     let outstanding = [];
     for (let [id, panel] of this._toolPanels) {
       try {
         gDevTools.emit(id + "-destroy", this, panel);
         this.emit(id + "-destroy", panel);
@@ -1939,17 +1949,17 @@ Toolbox.prototype = {
         "serviceWorkersTestingEnabled": false
       });
     }
 
     // Destroying the walker and inspector fronts
     outstanding.push(this.destroyInspector().then(() => {
       // Removing buttons
       if (this._pickerButton) {
-        this._pickerButton.removeEventListener("command", this._togglePicker, false);
+        this._pickerButton.removeEventListener("click", this._togglePicker, false);
         this._pickerButton = null;
       }
     }));
 
     // Destroy the profiler connection
     outstanding.push(this.destroyPerformance());
 
     // We need to grab a reference to win before this._host is destroyed.
diff --git a/devtools/client/framework/toolbox.xul b/devtools/client/framework/toolbox.xhtml
rename from devtools/client/framework/toolbox.xul
rename to devtools/client/framework/toolbox.xhtml
--- a/devtools/client/framework/toolbox.xul
+++ b/devtools/client/framework/toolbox.xhtml
@@ -1,27 +1,28 @@
 <?xml version="1.0" encoding="utf-8"?>
 <!-- This Source Code Form is subject to the terms of the Mozilla Public
    - License, v. 2.0. If a copy of the MPL was not distributed with this
    - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
 <?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
 <?xml-stylesheet href="chrome://devtools/skin/common.css" type="text/css"?>
 
-<?xul-overlay href="chrome://global/content/editMenuOverlay.xul"?>
-
 <!DOCTYPE window [
 <!ENTITY % toolboxDTD SYSTEM "chrome://devtools/locale/toolbox.dtd" >
 %toolboxDTD;
 <!ENTITY % editMenuStrings SYSTEM "chrome://global/locale/editMenuOverlay.dtd">
 %editMenuStrings;
 <!ENTITY % globalKeysDTD SYSTEM "chrome://global/locale/globalKeys.dtd">
 %globalKeysDTD;
 ]>
 
-<window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
+<html xmlns="http://www.w3.org/1999/xhtml"
+      xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
+      class="theme-body">
+  <head>
 
   <script type="application/javascript;version=1.8"
           src="chrome://devtools/content/shared/theme-switching.js"/>
   <script type="application/javascript"
           src="chrome://global/content/viewSourceUtils.js"/>
 
   <script type="application/javascript" src="chrome://global/content/globalOverlay.js"/>
 
@@ -109,41 +110,44 @@
       <menuitem id="cMenu_copy"/>
       <menuitem id="cMenu_paste"/>
       <menuitem id="cMenu_delete"/>
       <menuseparator/>
       <menuitem id="cMenu_selectAll"/>
     </menupopup>
   </popupset>
 
-  <notificationbox id="toolbox-notificationbox" flex="1">
+  </head>
+  <body>
+  <vbox id="toolbox-notificationbox" flex="1">
     <toolbar class="devtools-tabbar">
       <hbox id="toolbox-picker-container" />
       <hbox id="toolbox-tabs" flex="1" role="tablist" />
       <hbox id="toolbox-buttons" pack="end">
-        <toolbarbutton id="command-button-frames"
-                       class="command-button command-button-invertable devtools-toolbarbutton"
+        <button id="command-button-frames"
+                       class="command-button command-button-invertable devtools-toolbarbutton devtools-button"
                        tooltiptext="&toolboxFramesTooltip;"
                        type="menu"
                        hidden="true">
           <menupopup position="bottomright topright"></menupopup>
-        </toolbarbutton>
+        </button>
       </hbox>
       <vbox id="toolbox-controls-separator" class="devtools-separator"/>
       <hbox id="toolbox-option-container"/>
       <hbox id="toolbox-controls">
         <hbox id="toolbox-dock-buttons"/>
-        <toolbarbutton id="toolbox-close"
-                       class="devtools-closebutton"
+        <button id="toolbox-close"
+                       class="devtools-closebutton devtools-button"
                        tooltiptext="&toolboxCloseButton.tooltip;"/>
       </hbox>
     </toolbar>
     <vbox flex="1">
       <!-- Set large flex to allow the toolbox-panel-webconsole to have a
            height set to a small value without flexing to fill up extra
            space. There must be a flex on both to ensure that the console
            panel itself is sized properly -->
-      <deck id="toolbox-deck" flex="1000" minheight="75" />
+      <box id="toolbox-deck" flex="1000" minheight="75" />
       <splitter id="toolbox-console-splitter" class="devtools-horizontal-splitter" hidden="true" />
       <box minheight="75" flex="1" id="toolbox-panel-webconsole" collapsed="true" />
     </vbox>
-  </notificationbox>
-</window>
+  </vbox>
+  </body>
+</html>
diff --git a/devtools/client/inspector/inspector-panel.js b/devtools/client/inspector/inspector-panel.js
--- a/devtools/client/inspector/inspector-panel.js
+++ b/devtools/client/inspector/inspector-panel.js
@@ -177,16 +177,18 @@ InspectorPanel.prototype = {
     if (this.target.isLocalTab) {
       this.browser = this.target.tab.linkedBrowser;
       this.browser.addEventListener("resize", this.scheduleLayoutChange, true);
 
       // Show a warning when the debugger is paused.
       // We show the warning only when the inspector
       // is selected.
       this.updateDebuggerPausedWarning = () => {
+        // XXX: Need to replace notificationBox
+        return;
         let notificationBox = this._toolbox.getNotificationBox();
         let notification = notificationBox.getNotificationWithValue("inspector-script-paused");
         if (!notification && this._toolbox.currentToolId == "inspector" &&
             this.target.isThreadPaused) {
           let message = strings.GetStringFromName("debuggerPausedWarning.message");
           notificationBox.appendNotification(message,
             "inspector-script-paused", "", notificationBox.PRIORITY_WARNING_HIGH);
         }
diff --git a/devtools/client/jar.mn b/devtools/client/jar.mn
--- a/devtools/client/jar.mn
+++ b/devtools/client/jar.mn
@@ -116,17 +116,17 @@ devtools.jar:
     content/promisedebugger/promise-panel.js (promisedebugger/promise-panel.js)
     content/promisedebugger/promise-debugger.xhtml (promisedebugger/promise-debugger.xhtml)
     content/commandline/commandline.css (commandline/commandline.css)
     content/commandline/commandlineoutput.xhtml (commandline/commandlineoutput.xhtml)
     content/commandline/commandlinetooltip.xhtml (commandline/commandlinetooltip.xhtml)
 *   content/framework/toolbox-window.xul (framework/toolbox-window.xul)
     content/framework/toolbox-options.xul (framework/toolbox-options.xul)
     content/framework/toolbox-options.js (framework/toolbox-options.js)
-    content/framework/toolbox.xul (framework/toolbox.xul)
+    content/framework/toolbox.xhtml (framework/toolbox.xhtml)
     content/framework/options-panel.css (framework/options-panel.css)
     content/framework/toolbox-process-window.xul (framework/toolbox-process-window.xul)
 *   content/framework/toolbox-process-window.js (framework/toolbox-process-window.js)
     content/framework/dev-edition-promo/dev-edition-promo.xul (framework/dev-edition-promo/dev-edition-promo.xul)
 *   content/framework/dev-edition-promo/dev-edition-promo.css (framework/dev-edition-promo/dev-edition-promo.css)
     content/framework/dev-edition-promo/dev-edition-logo.png (framework/dev-edition-promo/dev-edition-logo.png)
     content/inspector/inspector.xhtml (inspector/inspector.xhtml)
     content/inspector/inspector.css (inspector/inspector.css)
diff --git a/devtools/client/shared/DeveloperToolbar.jsm b/devtools/client/shared/DeveloperToolbar.jsm
--- a/devtools/client/shared/DeveloperToolbar.jsm
+++ b/devtools/client/shared/DeveloperToolbar.jsm
@@ -102,34 +102,34 @@ var CommandUtils = {
    * Warning: this method uses the unload event of the window that owns the
    * buttons that are of type checkbox. this means that we don't properly
    * unregister event handlers until the window is destroyed.
    */
   createButtons: function(toolbarSpec, target, document, requisition) {
     return util.promiseEach(toolbarSpec, typed => {
       // Ask GCLI to parse the typed string (doesn't execute it)
       return requisition.update(typed).then(() => {
-        let button = document.createElement("toolbarbutton");
+        let button = document.createElement("button");
 
         // Ignore invalid commands
         let command = requisition.commandAssignment.value;
         if (command == null) {
           throw new Error("No command '" + typed + "'");
         }
 
         if (command.buttonId != null) {
           button.id = command.buttonId;
           if (command.buttonClass != null) {
-            button.className = command.buttonClass;
+            button.className = command.buttonClass + " devtools-button";
           }
         }
         else {
           button.setAttribute("text-as-image", "true");
           button.setAttribute("label", command.name);
-          button.className = "devtools-toolbarbutton";
+          button.className = "devtools-button";
         }
         if (command.tooltipText != null) {
           button.setAttribute("tooltiptext", command.tooltipText);
         }
         else if (command.description != null) {
           button.setAttribute("tooltiptext", command.description);
         }
 
diff --git a/devtools/client/themes/toolbars.css b/devtools/client/themes/toolbars.css
--- a/devtools/client/themes/toolbars.css
+++ b/devtools/client/themes/toolbars.css
@@ -53,20 +53,28 @@ html spacer {
 html hbox {
   flex-flow: row;
 }
 
 html vbox {
   flex-flow: column;
 }
 
+/* Stolen from minimal-xul */
+/* hide the content and destroy the frame */
 [hidden="true"] {
   display: none !important;
 }
 
+/* hide the content, but don't destroy the frames */
+[collapsed="true"],
+[moz-collapsed="true"] {
+  visibility: collapse;
+}
+
 html [flex="1"] { flex-grow: 1 }
 html [flex="2"] { flex-grow: 2 }
 html [flex="3"] { flex-grow: 3 }
 html [flex="4"] { flex-grow: 4 }
 html [flex="5"] { flex-grow: 5 }
 html [flex="6"] { flex-grow: 6 }
 html [flex="7"] { flex-grow: 7 }
 html [flex="8"] { flex-grow: 8 }
@@ -264,39 +272,39 @@ html .devtools-toolbar {
   -moz-appearance: none !important;
   list-style-image: url("chrome://devtools/skin/images/dropmarker.svg");
   -moz-box-align: center;
   padding: 0 3px;
 }
 
 /* Icon-only buttons */
 .devtools-button:empty::before,
-.devtools-toolbarbutton:not([label]):not([disabled]) > image {
+.devtools-toolbarbutton:not([label]):not([disabled]) > img {
   opacity: 0.8;
 }
 
 .devtools-button:hover:empty::before,
 .devtools-button[checked]:empty::before,
 .devtools-button[open]:empty::before,
-.devtools-toolbarbutton:not([label]):hover > image,
-.devtools-toolbarbutton:not([label])[checked=true] > image,
-.devtools-toolbarbutton:not([label])[open=true] > image {
+.devtools-toolbarbutton:not([label]):hover > img,
+.devtools-toolbarbutton:not([label])[checked=true] > img,
+.devtools-toolbarbutton:not([label])[open=true] > img {
   opacity: 1;
 }
 
 .devtools-button:disabled,
 .devtools-button[disabled],
 .devtools-toolbarbutton[disabled] {
   opacity: 0.5 !important;
 }
 
 .devtools-button[checked]:empty::before,
 .devtools-button[open]:empty::before,
-.devtools-toolbarbutton:not([label])[checked=true] > image,
-.devtools-toolbarbutton:not([label])[open=true] > image {
+.devtools-toolbarbutton:not([label])[checked=true] > img,
+.devtools-toolbarbutton:not([label])[open=true] > img {
   filter: url(images/filters.svg#checked-icon-state);
 }
 
 /* Text-only buttons */
 .theme-light .devtools-toolbarbutton[label]:not([text-as-image]):not([type=menu-button]),
 .theme-light .devtools-toolbarbutton[data-text-only],
 .theme-light #toolbox-buttons .devtools-toolbarbutton[text-as-image] {
   background-color: rgba(170, 170, 170, .2); /* Splitter */
@@ -533,17 +541,17 @@ html .devtools-toolbar {
   -moz-appearance: none;
   border: none;
   margin: 0 4px;
   min-width: 16px;
   width: 16px;
   opacity: 0.8;
 }
 
-.devtools-closebutton > image {
+.devtools-closebutton > img {
   width: 16px;
   height: 16px;
   -moz-appearance: none;
   background-size: 16px 16px;
   background-image: url("chrome://devtools/skin/images/close@2x.png");
   background-position: center center;
   background-repeat: no-repeat;
 }
@@ -676,48 +684,48 @@ html .devtools-toolbar {
 }
 
 #toolbox-controls > toolbarbutton > .toolbarbutton-text,
 #toolbox-dock-buttons > toolbarbutton > .toolbarbutton-text,
 .command-button > .toolbarbutton-text {
   display: none;
 }
 
-#toolbox-dock-buttons > toolbarbutton > image {
+#toolbox-dock-buttons > toolbarbutton > img {
   -moz-appearance: none;
   width: 16px;
   height: 16px;
   background-size: 16px 16px;
   background-position: 0 center;
   background-repeat: no-repeat;
 }
 
-#toolbox-dock-bottom > image {
+#toolbox-dock-bottom > img {
   background-image: url("chrome://devtools/skin/images/dock-bottom@2x.png");
 }
 
-#toolbox-dock-side  > image {
+#toolbox-dock-side  > img {
   background-image: url("chrome://devtools/skin/images/dock-side@2x.png");
 }
 
-#toolbox-dock-window > image {
+#toolbox-dock-window > img {
   background-image: url("chrome://devtools/skin/images/undock@2x.png");
 }
 
 #toolbox-dock-bottom-minimize {
   /* Bug 1177463 - The minimize button is currently hidden until we agree on
      the UI for it, and until bug 1173849 is fixed too. */
   display: none;
 }
 
-#toolbox-dock-bottom-minimize > image {
+#toolbox-dock-bottom-minimize > img {
   background-image: url("chrome://devtools/skin/images/dock-bottom-minimize@2x.png");
 }
 
-#toolbox-dock-bottom-minimize.minimized > image {
+#toolbox-dock-bottom-minimize.minimized > img {
   background-image: url("chrome://devtools/skin/images/dock-bottom-maximize@2x.png");
 }
 
 #toolbox-dock-window,
 #toolbox-dock-bottom,
 #toolbox-dock-side {
   opacity: 0.8;
 }
@@ -746,145 +754,163 @@ html .devtools-toolbar {
 
 #toolbox-controls-separator {
   margin: 0;
 }
 
 /* Command buttons */
 
 .command-button {
-  -moz-appearance: none;
+/*  -moz-appearance: none;
   border: none;
   padding: 0 8px;
   margin: 0;
   width: 32px;
-  position: relative;
+  position: relative;*/
+  min-height: 16px;
+  height: 16px;
+  width: 16px;
 }
 
 .command-button:hover {
   background-color: hsla(206,37%,4%,.2);
 }
 .command-button:hover:active, .command-button[checked=true]:not(:hover) {
   background-color: hsla(206,37%,4%,.4);
 }
 
-.command-button > image {
-  -moz-appearance: none;
-  width: 16px;
-  height: 16px;
-  background-size: cover;
+.command-button {
+  /*-moz-appearance: none;*/
+ /* width: 16px;
+  height: 16px;*/
+  /*background-size: cover;*/
   background-position: 0 center;
   background-repeat: no-repeat;
-  opacity: 0.7;
+  /*opacity: 0.7;*/
 }
-.command-button:hover > image {
+.command-button:hover {
   opacity: 0.85;
 }
-.command-button:hover:active > image,
-.command-button[checked=true] > image,
-.command-button[open=true] > image {
+.command-button:hover:active,
+.command-button[checked=true],
+.command-button[open=true] {
   opacity: 1;
 }
-.command-button[checked=true] > image {
+.command-button[checked=true]::before {
   filter: url(images/filters.svg#checked-icon-state) !important;
 }
 
-#command-button-paintflashing > image {
+#command-button-paintflashing::before {
   background-image: url("chrome://devtools/skin/images/command-paintflashing.png");
 }
 
-#command-button-screenshot > image {
+#command-button-screenshot::before {
   background-image: url("chrome://devtools/skin/images/command-screenshot.png");
 }
 
-#command-button-responsive > image {
+#command-button-responsive::before {
   background-image: url("chrome://devtools/skin/images/command-responsivemode.png");
 }
 
-#command-button-tilt > image {
+#command-button-tilt::before {
   background-image: url("chrome://devtools/skin/images/command-tilt.png");
 }
 
-#command-button-scratchpad > image {
+#command-button-scratchpad::before {
   background-image: url("chrome://devtools/skin/images/command-scratchpad.png");
 }
 
-#command-button-pick > image {
+#command-button-pick::before {
   background-image: url("chrome://devtools/skin/images/command-pick.png");
 }
 
-#command-button-frames > image {
+#command-button-frames::before {
   background-image: url("chrome://devtools/skin/images/command-frames.png");
 }
 
-#command-button-splitconsole > image {
+#command-button-splitconsole::before {
   background-image: url("chrome://devtools/skin/images/command-console.png");
 }
 
-#command-button-eyedropper > image {
+#command-button-eyedropper::before {
   background-image: url("chrome://devtools/skin/images/command-eyedropper.png");
 }
 
-#command-button-rulers > image {
+#command-button-rulers::before {
   background-image: url("chrome://devtools/skin/images/command-rulers.png");
 }
 
-#command-button-measure > image {
+#command-button-measure::before {
   background-image: url("chrome://devtools/skin/images/command-measure.png");
 }
 
 @media (min-resolution: 1.1dppx) {
-  #command-button-paintflashing > image {
+  #command-button-paintflashing::before {
     background-image: url("chrome://devtools/skin/images/command-paintflashing@2x.png");
   }
 
-  #command-button-screenshot > image {
+  #command-button-screenshot::before {
     background-image: url("chrome://devtools/skin/images/command-screenshot@2x.png");
   }
 
-  #command-button-responsive > image {
+  #command-button-responsive::before {
     background-image: url("chrome://devtools/skin/images/command-responsivemode@2x.png");
   }
 
-  #command-button-tilt > image {
+  #command-button-tilt::before {
     background-image: url("chrome://devtools/skin/images/command-tilt@2x.png");
   }
 
-  #command-button-scratchpad > image {
+  #command-button-scratchpad::before {
     background-image: url("chrome://devtools/skin/images/command-scratchpad@2x.png");
   }
 
-  #command-button-pick > image {
+  #command-button-pick::before {
     background-image: url("chrome://devtools/skin/images/command-pick@2x.png");
   }
 
-  #command-button-frames > image {
+  #command-button-frames::before {
     background-image: url("chrome://devtools/skin/images/command-frames@2x.png");
   }
 
-  #command-button-splitconsole > image {
+  #command-button-splitconsole::before {
     background-image: url("chrome://devtools/skin/images/command-console@2x.png");
   }
 
-  #command-button-eyedropper > image {
+  #command-button-eyedropper::before {
     background-image: url("chrome://devtools/skin/images/command-eyedropper@2x.png");
   }
 
-  #command-button-rulers > image {
+  #command-button-rulers::before {
     background-image: url("chrome://devtools/skin/images/command-rulers@2x.png");
   }
 
-  #command-button-measure > image {
+  #command-button-measure::before {
     background-image: url("chrome://devtools/skin/images/command-measure@2x.png");
   }
 }
 
+#toolbox-deck {
+  flex: 1000;
+  flex-direction: column;
+}
+
+#toolbox-deck .toolbox-panel {
+  display: none;
+}
+#toolbox-deck .toolbox-panel.visible {
+  display: flex;
+  flex: 1;
+  height: 100%;
+}
+
 /* Tabs */
 
 .devtools-tabbar {
+  display: flex;
   -moz-appearance: none;
   min-height: 24px;
   border: 0px solid;
   border-bottom-width: 1px;
   padding: 0;
   background: var(--theme-tab-toolbar-background);
   border-bottom-color: var(--theme-splitter-color);
 }
@@ -951,35 +977,35 @@ html .devtools-toolbar {
 .theme-dark .devtools-tab:not([selected])[highlighted] {
   background-color: hsla(99,100%,14%,.2);
 }
 
 .theme-light .devtools-tab:not([selected])[highlighted] {
   background-color: rgba(44, 187, 15, .2);
 }
 
-.devtools-tab > image {
+.devtools-tab > img {
   border: none;
   -moz-margin-end: 0;
   -moz-margin-start: 4px;
   opacity: 0.6;
   max-height: 16px;
   width: 16px; /* Prevents collapse during theme switching */
 }
 
 .devtools-tab > label {
   white-space: nowrap;
 }
 
-.devtools-tab:hover > image {
+.devtools-tab:hover > img {
   opacity: 0.8;
 }
 
-.devtools-tab:active > image,
-.devtools-tab[selected] > image {
+.devtools-tab:active > img,
+.devtools-tab[selected] > img {
   opacity: 1;
 }
 
 .devtools-tabbar .devtools-tab[selected],
 .devtools-tabbar .devtools-tab[selected]:hover:active {
   color: var(--theme-selection-color);
   background-color: var(--theme-selection-background);
 }
@@ -1032,44 +1058,44 @@ html .devtools-toolbar {
 #toolbox-option-container .devtools-tab:not([selected]) {
   background-color: transparent;
 }
 #toolbox-option-container .devtools-tab {
   border-color: transparent;
   border-width: 0;
   -moz-padding-start: 1px;
 }
-#toolbox-tab-options > image {
+#toolbox-tab-options > img {
   margin: 0 8px;
 }
 
 /* Invert the colors of certain dark theme images for displaying
  * inside of the light theme.
  */
-.theme-light .devtools-tab[icon-invertable] > image,
-.theme-light #toolbox-dock-buttons > toolbarbutton > image,
-.theme-light .command-button-invertable > image,
-.theme-light .devtools-closebutton > image,
-.theme-light .devtools-toolbarbutton > image,
+.theme-light .devtools-tab[icon-invertable] > img,
+.theme-light #toolbox-dock-buttons > toolbarbutton > img,
+.theme-light .command-button-invertable > img,
+.theme-light .devtools-closebutton > img,
+.theme-light .devtools-toolbarbutton > img,
 .theme-light .devtools-button::before,
 .theme-light #breadcrumb-separator-normal,
 .theme-light .scrollbutton-up > .toolbarbutton-icon,
 .theme-light .scrollbutton-down > .toolbarbutton-icon,
 .theme-light #black-boxed-message-button .button-icon,
 .theme-light #requests-menu-perf-notice-button .button-icon,
 .theme-light #requests-menu-network-summary-button .button-icon,
-.theme-light #toggle-breakpoints[checked] > image,
+.theme-light #toggle-breakpoints[checked] > img,
 .theme-light .event-tooltip-debugger-icon {
   filter: invert(1);
 }
 
 /* Since selected backgrounds are blue, we want to use the normal
  * (light) icons. */
-.theme-light .devtools-tab[icon-invertable][selected] > image,
-.theme-light .devtools-tab[icon-invertable][highlighted] > image {
+.theme-light .devtools-tab[icon-invertable][selected] > img,
+.theme-light .devtools-tab[icon-invertable][highlighted] > img {
   filter: none !important;
 }
 
 .theme-light .command-button:hover {
   background-color: inherit;
 }
 
 .theme-light .command-button:hover:active,
