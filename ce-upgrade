# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  681eb7dfa324dd50403c382888929ea8b8b11b00
Bug 1466833 - Upgrade the <xul:deck> inside of search-one-offs at the beginning of the XBL constructor;r=timdream

Right now, a XBL <constructor> runs before Custom Elements inside of its
<content> get upgraded. This leads to unexpected behavior where deck.selectedIndex = N
causes selectedIndex to get set as an expando property on the DOM node rather
than running the setter defined by the Custom Element.

Once the Custom Element does finally get upgraded, the selectedIndex getter and
setter don't get attached since there's an expando property with the same name.

This isn't a case we want to have to support from calling code. So this patch fixes
this one case by manually upgrading the element inside the constructor before
anything accesses the node. In Bug 1470242 we are planning to make this happen
behind the scenes so we don't need to do this for every CE inside of <content>.

diff --git a/browser/components/search/content/search.xml b/browser/components/search/content/search.xml
--- a/browser/components/search/content/search.xml
+++ b/browser/components/search/content/search.xml
@@ -1286,16 +1286,22 @@
         ]]></getter>
       </property>
 
       <!-- When a context menu is opened on a one-off button, this is set to the
            engine of that button for use with the context menu actions. -->
       <field name="_contextEngine">null</field>
 
       <constructor><![CDATA[
+        // Force the <deck> Custom Element to be constructed. This can be removed
+        // once Bug 1470242 makes this happen behind the scenes.
+        if (window.customElements) {
+          customElements.upgrade(document.getAnonymousElementByAttribute(this, "anonid", "search-panel-one-offs-header"));
+        }
+
         // Prevent popup events from the context menu from reaching the autocomplete
         // binding (or other listeners).
         let menu = document.getAnonymousElementByAttribute(this, "anonid", "search-one-offs-context-menu");
         let listener = aEvent => aEvent.stopPropagation();
         menu.addEventListener("popupshowing", listener);
         menu.addEventListener("popuphiding", listener);
         menu.addEventListener("popupshown", aEvent => {
           this._ignoreMouseEvents = true;
