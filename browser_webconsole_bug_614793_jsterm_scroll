# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  1aed451f1502dc6437d172c6a3e87f36a2a64bcc
Bug 1241735 - Convert browser_webconsole_bug_614793_jsterm_scroll to be more e10s friendly;r=linclark

diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_614793_jsterm_scroll.js b/devtools/client/webconsole/test/browser_webconsole_bug_614793_jsterm_scroll.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_614793_jsterm_scroll.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_614793_jsterm_scroll.js
@@ -1,65 +1,53 @@
 /* vim:set ts=2 sw=2 sts=2 et: */
 /*
  * Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/
- *
- * Contributor(s):
- *   Mihai È˜ucan <mihai.sucan@gmail.com>
  */
 
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf-8,Web Console test for " +
                  "bug 614793: jsterm result scroll";
 
-"use strict";
-
 add_task(function* () {
   yield loadTab(TEST_URI);
-
   let hud = yield openConsole();
 
-  yield consoleOpened(hud);
+  yield testScrollPosition(hud);
 });
 
-function consoleOpened(hud) {
-  let deferred = promise.defer();
-
+function* testScrollPosition(hud) {
   hud.jsterm.clearOutput();
 
   let scrollNode = hud.ui.outputWrapper;
 
   for (let i = 0; i < 150; i++) {
-    content.console.log("test message " + i);
+    yield ContentTask.spawn(gBrowser.selectedBrowser, i, function*(i) {
+      content.console.log("test message " + i);
+    });
   }
 
   let oldScrollTop = -1;
 
-  waitForMessages({
+  yield waitForMessages({
     webconsole: hud,
     messages: [{
       text: "test message 149",
       category: CATEGORY_WEBDEV,
       severity: SEVERITY_LOG,
     }],
-  }).then(() => {
-    oldScrollTop = scrollNode.scrollTop;
-    isnot(oldScrollTop, 0, "scroll location is not at the top");
-
-    hud.jsterm.execute("'hello world'").then(onExecute);
   });
 
-  function onExecute(msg) {
-    isnot(scrollNode.scrollTop, oldScrollTop, "scroll location updated");
+  oldScrollTop = scrollNode.scrollTop;
+  isnot(oldScrollTop, 0, "scroll location is not at the top");
 
-    oldScrollTop = scrollNode.scrollTop;
+  let msg = yield hud.jsterm.execute("'hello world'");
 
-    msg.scrollIntoView(false);
+  isnot(scrollNode.scrollTop, oldScrollTop, "scroll location updated");
 
-    is(scrollNode.scrollTop, oldScrollTop, "scroll location is the same");
+  oldScrollTop = scrollNode.scrollTop;
 
-    deferred.resolve();
-  }
+  msg.scrollIntoView(false);
 
-  return deferred.promise;
+  is(scrollNode.scrollTop, oldScrollTop, "scroll location is the same");
 }
diff --git a/testing/mochitest/BrowserTestUtils/ContentTask.jsm b/testing/mochitest/BrowserTestUtils/ContentTask.jsm
--- a/testing/mochitest/BrowserTestUtils/ContentTask.jsm
+++ b/testing/mochitest/BrowserTestUtils/ContentTask.jsm
@@ -8,16 +8,17 @@
 
 this.EXPORTED_SYMBOLS = [
   "ContentTask"
 ];
 
 const { classes: Cc, interfaces: Ci, utils: Cu } = Components;
 Cu.import("resource://gre/modules/Promise.jsm");
 Cu.import("resource://gre/modules/Services.jsm");
+const {console} = Cu.import("resource://gre/modules/Console.jsm", {});
 
 const FRAME_SCRIPT = "chrome://mochikit/content/tests/BrowserTestUtils/content-task.js";
 
 /**
  * Keeps track of whether the frame script was already loaded.
  */
 var gFrameScriptLoaded = false;
 
@@ -73,16 +74,17 @@ this.ContentTask = {
     deferred.promise = new Promise((resolve, reject) => {
       deferred.resolve = resolve;
       deferred.reject = reject;
     });
 
     let id = gMessageID++;
     gPromises.set(id, deferred);
 
+    console.log("CONTENT TASK", task.toString())
     browser.messageManager.sendAsyncMessage(
       "content-task:spawn",
       {
         id: id,
         runnable: task.toString(),
         arg: arg,
       });
 
diff --git a/testing/mochitest/BrowserTestUtils/content/content-task.js b/testing/mochitest/BrowserTestUtils/content/content-task.js
--- a/testing/mochitest/BrowserTestUtils/content/content-task.js
+++ b/testing/mochitest/BrowserTestUtils/content/content-task.js
@@ -40,17 +40,17 @@ addMessageListener("content-task:spawn",
     sendAsyncMessage("content-task:test-info", {id, name});
   }
 
   try {
     let runnablestr = `
       (() => {
         return (${source});
       })();`
-
+    console.log("HERE", runnablestr);
     let runnable = eval(runnablestr);
     let iterator = runnable.call(this, msg.data.arg);
     Task.spawn(iterator).then((val) => {
       sendAsyncMessage("content-task:complete", {
         id: id,
         result: val,
       });
     }, (e) => {
