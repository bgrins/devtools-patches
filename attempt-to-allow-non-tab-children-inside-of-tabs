# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  7c11a5a1d6c2579eca7565b99c84d32f69032407

diff --git a/browser/base/content/browser.xul b/browser/base/content/browser.xul
--- a/browser/base/content/browser.xul
+++ b/browser/base/content/browser.xul
@@ -781,23 +781,23 @@ xmlns="http://www.w3.org/1999/xhtml"
               <arrowscrollbox orient="horizontal" flex="1"
                               style="min-width: 1px;"
                               clicktoscroll="true"
                               class="tabbrowser-arrowscrollbox">
                 <tabs id="tabbrowser-tabs"
                       flex="1"
                       setfocus="false">
                   <tab class="tabbrowser-tab" selected="true" visuallyselected="true" fadein="true"/>
+                  <toolbarbutton id="tabs-newtab-button"
+                                class="tabs-newtab-button toolbarbutton-1"
+                                command="cmd_newNavigatorTab"
+                                onclick="checkForMiddleClick(this, event);"
+                                tooltip="dynamic-shortcut-tooltip"/>
+                  <spacer class="closing-tabs-spacer" style="width: 0;"/>
                 </tabs>
-                <toolbarbutton id="tabs-newtab-button"
-                               class="tabs-newtab-button toolbarbutton-1"
-                               command="cmd_newNavigatorTab"
-                               onclick="checkForMiddleClick(this, event);"
-                               tooltip="dynamic-shortcut-tooltip"/>
-                <spacer class="closing-tabs-spacer" style="width: 0;"/>
               </arrowscrollbox>
             </hbox>
 
             <toolbarbutton id="new-tab-button"
                            class="toolbarbutton-1 chromeclass-toolbar-additional"
                            label="&tabCmd.label;"
                            command="cmd_newNavigatorTab"
                            onclick="checkForMiddleClick(this, event);"
diff --git a/browser/base/content/tabbrowser.js b/browser/base/content/tabbrowser.js
--- a/browser/base/content/tabbrowser.js
+++ b/browser/base/content/tabbrowser.js
@@ -197,17 +197,17 @@ window._gBrowser = {
 
   get tabContainer() {
     delete this.tabContainer;
     return this.tabContainer = document.getElementById("tabbrowser-tabs");
   },
 
   get tabs() {
     delete this.tabs;
-    return this.tabs = this.tabContainer.children;
+    return this.tabs = this.tabContainer.tabChildren;
   },
 
   get tabbox() {
     delete this.tabbox;
     return this.tabbox = document.getElementById("tabbrowser-tabbox");
   },
 
   get tabpanels() {
diff --git a/browser/base/content/tabbrowser.xml b/browser/base/content/tabbrowser.xml
--- a/browser/base/content/tabbrowser.xml
+++ b/browser/base/content/tabbrowser.xml
@@ -10,17 +10,17 @@
           xmlns:xbl="http://www.mozilla.org/xbl">
 
   <binding id="tabbrowser-arrowscrollbox" extends="chrome://global/content/bindings/scrollbox.xml#arrowscrollbox">
     <implementation>
       <!-- Override scrollbox.xml method, since our scrollbox's children are
            inherited from the binding parent -->
       <method name="_getScrollableElements">
         <body><![CDATA[
-          return Array.filter(document.getElementById("tabbrowser-tabs").children,
+          return Array.filter(document.getElementById("tabbrowser-tabs").tabChildren,
                               this._canScrollToElement, this);
         ]]></body>
       </method>
       <method name="_canScrollToElement">
         <parameter name="tab"/>
         <body><![CDATA[
           return !tab._pinnedUnscrollable && !tab.hidden;
         ]]></body>
@@ -537,35 +537,35 @@
 
             let layoutData = this._pinnedTabsLayoutCache;
             let uiDensity = document.documentElement.getAttribute("uidensity");
             if (!layoutData ||
                 layoutData.uiDensity != uiDensity) {
               let arrowScrollbox = this.arrowScrollbox;
               layoutData = this._pinnedTabsLayoutCache = {
                 uiDensity,
-                pinnedTabWidth: this.children[0].getBoundingClientRect().width,
+                pinnedTabWidth: this.tabChildren[0].getBoundingClientRect().width,
                 scrollButtonWidth: arrowScrollbox._scrollButtonDown.getBoundingClientRect().width,
               };
             }
 
             let width = 0;
             for (let i = numPinned - 1; i >= 0; i--) {
-              let tab = this.children[i];
+              let tab = this.tabChildren[i];
               width += layoutData.pinnedTabWidth;
               tab.style.setProperty("margin-inline-start",
                 -(width + layoutData.scrollButtonWidth) + "px", "important");
               tab._pinnedUnscrollable = true;
             }
             this.style.paddingInlineStart = width + "px";
           } else {
             this.removeAttribute("positionpinnedtabs");
 
             for (let i = 0; i < numPinned; i++) {
-              let tab = this.children[i];
+              let tab = this.tabChildren[i];
               tab.style.marginInlineStart = "";
               tab._pinnedUnscrollable = false;
             }
 
             this.style.paddingInlineStart = "";
           }
 
           if (this._lastNumPinned != numPinned) {
@@ -994,17 +994,17 @@
           return tab;
         ]]></body>
       </method>
 
       <method name="_getDropIndex">
         <parameter name="event"/>
         <parameter name="isLink"/>
         <body><![CDATA[
-          var tabs = this.children;
+          var tabs = this.tabChildren;
           var tab = this._getDragTargetTab(event, isLink);
           if (!RTL_UI) {
             for (let i = tab ? tab._tPos : 0; i < tabs.length; i++)
               if (event.screenX < tabs[i].boxObject.screenX + tabs[i].boxObject.width / 2)
                 return i;
           } else {
             for (let i = tab ? tab._tPos : 0; i < tabs.length; i++)
               if (event.screenX > tabs[i].boxObject.screenX + tabs[i].boxObject.width / 2)
@@ -1633,25 +1633,25 @@
                                    scrollRect.right);
           if (RTL_UI) {
             [minMargin, maxMargin] = [this.clientWidth - maxMargin,
                                       this.clientWidth - minMargin];
           }
           newMargin = (pixelsToScroll > 0) ? maxMargin : minMargin;
         } else {
           let newIndex = this._getDropIndex(event, effects == "link");
-          if (newIndex == this.children.length) {
-            let tabRect = this.children[newIndex - 1].getBoundingClientRect();
+          if (newIndex == this.tabChildren.length) {
+            let tabRect = this.tabChildren[newIndex - 1].getBoundingClientRect();
             if (RTL_UI) {
               newMargin = rect.right - tabRect.left;
             } else {
               newMargin = tabRect.right - rect.left;
             }
           } else {
-            let tabRect = this.children[newIndex].getBoundingClientRect();
+            let tabRect = this.tabChildren[newIndex].getBoundingClientRect();
             if (RTL_UI) {
               newMargin = rect.right - tabRect.right;
             } else {
               newMargin = tabRect.left - rect.left;
             }
           }
         }
 
diff --git a/toolkit/content/widgets/tabbox.xml b/toolkit/content/widgets/tabbox.xml
--- a/toolkit/content/widgets/tabbox.xml
+++ b/toolkit/content/widgets/tabbox.xml
@@ -24,17 +24,17 @@
           this.setAttribute("orient", "horizontal");
 
         if (this.tabbox && this.tabbox.hasAttribute("selectedIndex")) {
           let selectedIndex = parseInt(this.tabbox.getAttribute("selectedIndex"));
           this.selectedIndex = selectedIndex > 0 ? selectedIndex : 0;
           return;
         }
 
-        var children = this.children;
+        var children = this.tabChildren;
         var length = children.length;
         for (var i = 0; i < length; i++) {
           if (children[i].getAttribute("selected") == "true") {
             this.selectedIndex = i;
             return;
           }
         }
 
@@ -87,25 +87,28 @@
           // otherwise linked tabpanel element has the same index as the given
           // tab element.
           let tabElmIdx = this.getIndexOfItem(aTabElm);
           return tabpanelsElm.children[tabElmIdx];
         ]]>
         </body>
       </method>
 
+      <property name="tabChildren" readonly="true"
+                onget="return this.querySelectorAll('tab');"/>
+
       <!-- nsIDOMXULSelectControlElement -->
       <property name="itemCount" readonly="true"
-                onget="return this.children.length"/>
+                onget="return this.tabChildren.length"/>
 
       <property name="value" onget="return this.getAttribute('value');">
         <setter>
           <![CDATA[
             this.setAttribute("value", val);
-            var children = this.children;
+            var children = this.tabChildren;
             for (var c = children.length - 1; c >= 0; c--) {
               if (children[c].value == val) {
                 this.selectedIndex = c;
                 break;
               }
             }
             return val;
           ]]>
@@ -140,30 +143,30 @@
 
       <field name="_prefService" readonly="true"><![CDATA[
         Cc["@mozilla.org/preferences-service;1"].getService(Ci.nsIPrefBranch);
       ]]></field>
 
       <property name="selectedIndex">
         <getter>
         <![CDATA[
-          const tabs = this.children;
+          const tabs = this.tabChildren;
           for (var i = 0; i < tabs.length; i++) {
             if (tabs[i].selected)
               return i;
           }
           return -1;
         ]]>
         </getter>
 
         <setter>
         <![CDATA[
           var tab = this.getItemAtIndex(val);
           if (tab) {
-            Array.forEach(this.children, function(aTab) {
+            Array.forEach(this.tabChildren, function(aTab) {
               if (aTab.selected && aTab != tab)
                 aTab._selected = false;
             });
             tab._selected = true;
 
             this.setAttribute("value", tab.value);
 
             let linkedPanel = this.getRelatedElement(tab);
@@ -178,17 +181,17 @@
           return val;
         ]]>
         </setter>
       </property>
 
       <property name="selectedItem">
         <getter>
         <![CDATA[
-          const tabs = this.children;
+          const tabs = this.tabChildren;
           for (var i = 0; i < tabs.length; i++) {
             if (tabs[i].selected)
               return tabs[i];
           }
           return null;
         ]]>
         </getter>
 
@@ -205,17 +208,17 @@
 
       <field name="ACTIVE_DESCENDANT_ID" readonly="true"><![CDATA[
         "keyboard-focused-tab-" + Math.trunc(Math.random() * 1000000);
       ]]></field>
 
       <property name="ariaFocusedIndex" readonly="true">
         <getter>
         <![CDATA[
-          const tabs = this.children;
+          const tabs = this.tabChildren;
           for (var i = 0; i < tabs.length; i++) {
             if (tabs[i].id == this.ACTIVE_DESCENDANT_ID)
               return i;
           }
           return -1;
         ]]>
         </getter>
       </property>
@@ -249,44 +252,44 @@
         ]]>
         </setter>
       </property>
 
       <method name="getIndexOfItem">
         <parameter name="item"/>
         <body>
         <![CDATA[
-          return Array.indexOf(this.children, item);
+          return Array.indexOf(this.tabChildren, item);
         ]]>
         </body>
       </method>
 
       <method name="getItemAtIndex">
         <parameter name="index"/>
         <body>
         <![CDATA[
-          return this.children.item(index);
+          return this.tabChildren.item(index);
         ]]>
         </body>
       </method>
 
       <method name="_selectNewTab">
         <parameter name="aNewTab"/>
         <parameter name="aFallbackDir"/>
         <parameter name="aWrap"/>
         <body>
         <![CDATA[
           this.ariaFocusedItem = null;
 
           var requestedTab = aNewTab;
           while (aNewTab.hidden || aNewTab.disabled || !this._canAdvanceToTab(aNewTab)) {
             aNewTab = aFallbackDir == -1 ? aNewTab.previousElementSibling : aNewTab.nextElementSibling;
             if (!aNewTab && aWrap)
-              aNewTab = aFallbackDir == -1 ? this.children[this.children.length - 1] :
-                                             this.children[0];
+              aNewTab = aFallbackDir == -1 ? this.tabChildren[this.tabChildren.length - 1] :
+                                             this.tabChildren[0];
             if (!aNewTab || aNewTab == requestedTab)
               return;
           }
 
           var isTabFocused = false;
           try {
             isTabFocused =
               (document.commandDispatcher.focusedElement == this.selectedItem);
@@ -328,31 +331,32 @@
       <method name="advanceSelectedTab">
         <parameter name="aDir"/>
         <parameter name="aWrap"/>
         <body>
         <![CDATA[
           var startTab = this.ariaFocusedItem || this.selectedItem;
           var next = startTab[(aDir == -1 ? "previous" : "next") + "ElementSibling"];
           if (!next && aWrap) {
-            next = aDir == -1 ? this.children[this.children.length - 1] :
-                                this.children[0];
+            next = aDir == -1 ? this.tabChildren[this.tabChildren.length - 1] :
+                                this.tabChildren[0];
           }
           if (next && next != startTab) {
             this._selectNewTab(next, aDir, aWrap);
           }
         ]]>
         </body>
       </method>
 
       <method name="appendItem">
         <parameter name="label"/>
         <parameter name="value"/>
         <body>
         <![CDATA[
+        console.trace("Appending item");
           var tab = document.createXULElement("tab");
           tab.setAttribute("label", label);
           tab.setAttribute("value", value);
           this.appendChild(tab);
           return tab;
         ]]>
         </body>
       </method>
