# HG changeset patch
# Parent fbd3fe5b8d9b91fb8b119ea2f4503a2067458c3b
# User Michael Ratcliffe <mratcliffe@mozilla.com>
# Date 1415364384 0

Bug 1091796 - Add a telemetry probe to track dark theme usage r=pbrosset,bgrins,me

diff --git a/browser/devtools/framework/toolbox.js b/browser/devtools/framework/toolbox.js
--- a/browser/devtools/framework/toolbox.js
+++ b/browser/devtools/framework/toolbox.js
@@ -3,16 +3,18 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const MAX_ORDINAL = 99;
 const ZOOM_PREF = "devtools.toolbox.zoomValue";
 const SPLITCONSOLE_ENABLED_PREF = "devtools.toolbox.splitconsoleEnabled";
 const SPLITCONSOLE_HEIGHT_PREF = "devtools.toolbox.splitconsoleHeight";
+const THEME_HISTOGRAM_TOOLBOX = "DEVTOOLS_SELECTED_TOOLBOX_THEME_ENUMERATED";
+const THEME_HISTOGRAM_BROWSER = "DEVTOOLS_SELECTED_BROWSER_THEME_BOOLEAN";
 const MIN_ZOOM = 0.5;
 const MAX_ZOOM = 2;
 
 let {Cc, Ci, Cu} = require("chrome");
 let {Promise: promise} = require("resource://gre/modules/Promise.jsm");
 let EventEmitter = require("devtools/toolkit/event-emitter");
 let Telemetry = require("devtools/shared/telemetry");
 let {getHighlighterUtils} = require("devtools/framework/toolbox-highlighter-utils");
@@ -297,16 +299,23 @@ Toolbox.prototype = {
           Services.prefs.getIntPref(SPLITCONSOLE_HEIGHT_PREF);
         this.webconsolePanel.addEventListener("resize",
           this._saveSplitConsoleHeight);
 
         let buttonsPromise = this._buildButtons();
 
         this._telemetry.toolOpened("toolbox");
 
+        let toolboxTheme = Services.prefs.getCharPref("devtools.theme");
+        this._telemetry.log(THEME_HISTOGRAM_TOOLBOX,
+                            this._telemetry.getThemeIndex(toolboxTheme));
+
+        this._telemetry.log(THEME_HISTOGRAM_BROWSER,
+                            Services.prefs.getBoolPref("browser.devedition.theme.enabled"));
+
         this.selectTool(this._defaultToolId).then(panel => {
 
           // Wait until the original tool is selected so that the split
           // console input will receive focus.
           let splitConsolePromise = promise.resolve();
           if (Services.prefs.getBoolPref(SPLITCONSOLE_ENABLED_PREF)) {
             splitConsolePromise = this.openSplitConsole();
           }
diff --git a/browser/devtools/shared/telemetry.js b/browser/devtools/shared/telemetry.js
--- a/browser/devtools/shared/telemetry.js
+++ b/browser/devtools/shared/telemetry.js
@@ -276,16 +276,33 @@ Telemetry.prototype = {
         lastVersionHistogramUpdated !== currentVersion) {
       latestObj[perUserHistogram] = currentVersion;
       latest = JSON.stringify(latestObj);
       Services.prefs.setCharPref(TOOLS_OPENED_PREF, latest);
       this.log(perUserHistogram, value);
     }
   },
 
+  /**
+   * Return the theme index for a given toolbox theme.
+   *
+   * @param  {String} themeName
+   *                  Theme name
+   */
+  getThemeIndex: function(themeName) {
+    switch (themeName) {
+      case "light":
+        return 0;
+      case "dark":
+        return 1;
+      default:
+        return 2;
+    }
+  },
+
   destroy: function() {
     for (let histogramId of this._timers.keys()) {
       this.stopTimer(histogramId);
     }
   }
 };
 
 XPCOMUtils.defineLazyGetter(this, "appInfo", function() {
diff --git a/browser/devtools/shared/test/browser_telemetry_toolbox.js b/browser/devtools/shared/test/browser_telemetry_toolbox.js
--- a/browser/devtools/shared/test/browser_telemetry_toolbox.js
+++ b/browser/devtools/shared/test/browser_telemetry_toolbox.js
@@ -2,16 +2,19 @@
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 const TEST_URI = "data:text/html;charset=utf-8,<p>browser_telemetry_toolbox.js</p>";
 
 // Because we need to gather stats for the period of time that a tool has been
 // opened we make use of setTimeout() to create tool active times.
 const TOOL_DELAY = 200;
 
+const THEME_HISTOGRAM_TOOLBOX = "DEVTOOLS_SELECTED_TOOLBOX_THEME_ENUMERATED";
+const THEME_HISTOGRAM_BROWSER = "DEVTOOLS_SELECTED_BROWSER_THEME_BOOLEAN";
+
 let {Promise: promise} = Cu.import("resource://gre/modules/commonjs/sdk/core/promise.js", {});
 let {Services} = Cu.import("resource://gre/modules/Services.jsm", {});
 
 let require = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools.require;
 let Telemetry = require("devtools/shared/telemetry");
 
 function init() {
   Telemetry.prototype.telemetryInfo = {};
@@ -68,16 +71,28 @@ function checkResults() {
     } else if (histId.endsWith("TIME_ACTIVE_SECONDS")) {
       ok(value.length > 1, histId + " has more than one entry");
 
       let okay = value.every(function(element) {
         return element > 0;
       });
 
       ok(okay, "All " + histId + " entries have time > 0");
+    } else if (histId === THEME_HISTOGRAM_TOOLBOX) {
+      let item = result[THEME_HISTOGRAM_TOOLBOX];
+      let expected = isInDevEdition() ? "1,1,1,1" : "0,0,0,0";
+
+      ok(item.length === 4 && item.join(",") === expected,
+        "Devtools toolbox theme correctly logged");
+    } else if (histId === THEME_HISTOGRAM_BROWSER) {
+      let item = result[THEME_HISTOGRAM_BROWSER];
+      let expected = isInDevEdition() ? "true,true,true,true" :
+                                        "false,false,false,false";
+      ok(item.length === 4 && item.join(",") === expected,
+        "DevTools browser theme correctly logged");
     }
   }
 
   finishUp();
 }
 
 function finishUp() {
   gBrowser.removeCurrentTab();
diff --git a/browser/devtools/shared/test/head.js b/browser/devtools/shared/test/head.js
--- a/browser/devtools/shared/test/head.js
+++ b/browser/devtools/shared/test/head.js
@@ -1,14 +1,16 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 let {devtools} = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
 let {console} = Cu.import("resource://gre/modules/devtools/Console.jsm", {});
+let {CustomizableUI} = Cu.import("resource:///modules/CustomizableUI.jsm", {});
+
 let TargetFactory = devtools.TargetFactory;
 
 gDevTools.testing = true;
 SimpleTest.registerCleanupFunction(() => {
   gDevTools.testing = false;
 });
 
 const TEST_URI_ROOT = "http://example.com/browser/browser/devtools/shared/test/";
@@ -140,8 +142,20 @@ function* createHost(type = "bottom", sr
   yield new Promise(resolve => {
     let domHelper = new DOMHelpers(iframe.contentWindow);
     iframe.setAttribute("src", src);
     domHelper.onceDOMReady(resolve);
   });
 
   return [host, iframe.contentWindow, iframe.contentDocument];
 }
+
+function getAreaWidgetIds(areaId) {
+  return CustomizableUI.getWidgetIdsInArea(areaId);
+}
+
+XPCOMUtils.defineLazyGetter(this, 'gDeveloperButtonInNavbar', function() {
+  return getAreaWidgetIds(CustomizableUI.AREA_NAVBAR).indexOf("developer-button") != -1;
+});
+
+function isInDevEdition() {
+  return gDeveloperButtonInNavbar;
+}
diff --git a/toolkit/components/telemetry/Histograms.json b/toolkit/components/telemetry/Histograms.json
--- a/toolkit/components/telemetry/Histograms.json
+++ b/toolkit/components/telemetry/Histograms.json
@@ -4864,16 +4864,27 @@
   "POPUP_NOTIFICATION_MAINACTION_TRIGGERED_MS": {
     "expires_in_version": "40",
     "kind": "linear",
     "low": 25,
     "high": "80 * 25",
     "n_buckets": "80 + 1",
     "description": "The time (in milliseconds) after showing a PopupNotification that the mainAction was first triggered"
   },
+  "DEVTOOLS_SELECTED_TOOLBOX_THEME_ENUMERATED": {
+    "expires_in_version": "never",
+    "kind": "enumerated",
+    "n_values": "3",
+    "description": "Theme applied to the built-in developer tools (0=light, 1=dark, 2=other)"
+  },
+  "DEVTOOLS_SELECTED_BROWSER_THEME_BOOLEAN": {
+    "expires_in_version": "never",
+    "kind": "boolean",
+    "description": "Is the devtools browser theme enabled?"
+  },
   "DEVTOOLS_DEBUGGER_RDP_LOCAL_RELOAD_MS": {
     "expires_in_version": "never",
     "kind": "exponential",
     "high": "10000",
     "n_buckets": "1000",
     "description": "The time (in milliseconds) that it took a 'reload' request to go round trip."
   },
   "DEVTOOLS_DEBUGGER_RDP_REMOTE_RELOAD_MS": {
