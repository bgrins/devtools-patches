# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  9b6aaf8758f250b13aae35398627eb11df2f20f0
Bug XXX - Migrate <dialog> to a Custom Element

diff --git a/toolkit/content/components.css b/toolkit/content/components.css
--- a/toolkit/content/components.css
+++ b/toolkit/content/components.css
@@ -1,14 +1,15 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 /* ===== components.css =================================================
   == Styles ported from XBL <resources>, loaded as UA styles in every XUL doc
   ======================================================================= */
 
+@import url("chrome://global/skin/dialog.css");
 @import url("chrome://global/skin/dropmarker.css");
 @import url("chrome://global/skin/groupbox.css");
 @import url("chrome://global/skin/menu.css");
 @import url("chrome://global/skin/menulist.css");
 @import url("chrome://global/skin/toolbar.css");
 @import url("chrome://global/skin/splitter.css");
diff --git a/toolkit/content/customElements.js b/toolkit/content/customElements.js
--- a/toolkit/content/customElements.js
+++ b/toolkit/content/customElements.js
@@ -59,15 +59,17 @@ class MozXULElement extends XULElement {
     return range.extractContents();
   }
 }
 
 // Attach the base class to the window so other scripts can use it:
 window.MozXULElement = MozXULElement;
 
 for (let script of [
+  "chrome://global/content/elements/dialog.js",
   "chrome://global/content/elements/stringbundle.js",
   "chrome://global/content/elements/general.js",
 ]) {
   Services.scriptloader.loadSubScript(script, window);
 }
 
+
 }
diff --git a/toolkit/content/jar.mn b/toolkit/content/jar.mn
--- a/toolkit/content/jar.mn
+++ b/toolkit/content/jar.mn
@@ -68,17 +68,16 @@ toolkit.jar:
    content/global/bindings/calendar.js         (widgets/calendar.js)
    content/global/bindings/checkbox.xml        (widgets/checkbox.xml)
    content/global/bindings/colorpicker.xml     (widgets/colorpicker.xml)
    content/global/bindings/datekeeper.js       (widgets/datekeeper.js)
    content/global/bindings/datepicker.js       (widgets/datepicker.js)
    content/global/bindings/datetimepopup.xml   (widgets/datetimepopup.xml)
    content/global/bindings/datetimebox.xml     (widgets/datetimebox.xml)
    content/global/bindings/datetimebox.css     (widgets/datetimebox.css)
-*  content/global/bindings/dialog.xml          (widgets/dialog.xml)
    content/global/bindings/editor.xml          (widgets/editor.xml)
 *  content/global/bindings/findbar.xml         (widgets/findbar.xml)
    content/global/bindings/general.xml         (widgets/general.xml)
    content/global/bindings/groupbox.xml        (widgets/groupbox.xml)
    content/global/bindings/listbox.xml         (widgets/listbox.xml)
    content/global/bindings/menu.xml            (widgets/menu.xml)
    content/global/bindings/menulist.xml        (widgets/menulist.xml)
    content/global/bindings/notification.xml    (widgets/notification.xml)
@@ -96,15 +95,16 @@ toolkit.jar:
 *  content/global/bindings/textbox.xml         (widgets/textbox.xml)
    content/global/bindings/timekeeper.js       (widgets/timekeeper.js)
    content/global/bindings/timepicker.js       (widgets/timepicker.js)
    content/global/bindings/toolbar.xml         (widgets/toolbar.xml)
    content/global/bindings/toolbarbutton.xml   (widgets/toolbarbutton.xml)
 *  content/global/bindings/tree.xml            (widgets/tree.xml)
    content/global/bindings/videocontrols.xml   (widgets/videocontrols.xml)
 *  content/global/bindings/wizard.xml          (widgets/wizard.xml)
+   content/global/elements/dialog.js           (widgets/dialog.js)
    content/global/elements/general.js           (widgets/general.js)
    content/global/elements/stringbundle.js     (widgets/stringbundle.js)
 #ifdef XP_MACOSX
    content/global/macWindowMenu.js
 #endif
    content/global/gmp-sources/openh264.json    (gmp-sources/openh264.json)
    content/global/gmp-sources/widevinecdm.json (gmp-sources/widevinecdm.json)
diff --git a/toolkit/content/widgets/dialog.xml b/toolkit/content/widgets/dialog.js
rename from toolkit/content/widgets/dialog.xml
rename to toolkit/content/widgets/dialog.js
--- a/toolkit/content/widgets/dialog.xml
+++ b/toolkit/content/widgets/dialog.js
@@ -1,469 +1,413 @@
-<?xml version="1.0"?>
-<!-- This Source Code Form is subject to the terms of the Mozilla Public
-   - License, v. 2.0. If a copy of the MPL was not distributed with this
-   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
-<!DOCTYPE bindings [
-  <!ENTITY % globalKeysDTD SYSTEM "chrome://global/locale/globalKeys.dtd">
-  %globalKeysDTD;
-]>
+"use strict";
 
-<bindings id="dialogBindings"
-          xmlns="http://www.mozilla.org/xbl"
-          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
-          xmlns:xbl="http://www.mozilla.org/xbl">
+// This is loaded into all XUL windows. Wrap in a block to prevent
+// leaking to window scope.
+{
 
-  <binding id="dialog">
-    <resources>
-      <stylesheet src="chrome://global/skin/dialog.css"/>
-    </resources>
-    <content>
-      <xul:vbox class="box-inherit dialog-content-box" flex="1">
-        <children/>
-      </xul:vbox>
+  // Run with --setpref dom.webcomponents.shadowdom.enabled=true
+
+
+ChromeUtils.import("resource://gre/modules/AppConstants.jsm");
+
+class MozDialog extends MozXULElement {
 
-      <xul:hbox class="dialog-button-box" anonid="buttons"
-                xbl:inherits="pack=buttonpack,align=buttonalign,dir=buttondir,orient=buttonorient"
-#ifdef XP_UNIX
-                >
-        <xul:button dlgtype="disclosure" class="dialog-button" hidden="true"/>
-        <xul:button dlgtype="help" class="dialog-button" hidden="true"/>
-        <xul:button dlgtype="extra2" class="dialog-button" hidden="true"/>
-        <xul:button dlgtype="extra1" class="dialog-button" hidden="true"/>
-        <xul:spacer anonid="spacer" flex="1"/>
-        <xul:button dlgtype="cancel" class="dialog-button"/>
-        <xul:button dlgtype="accept" class="dialog-button" xbl:inherits="disabled=buttondisabledaccept"/>
-#else
-                pack="end">
-        <xul:button dlgtype="extra2" class="dialog-button" hidden="true"/>
-        <xul:spacer anonid="spacer" flex="1" hidden="true"/>
-        <xul:button dlgtype="accept" class="dialog-button" xbl:inherits="disabled=buttondisabledaccept"/>
-        <xul:button dlgtype="extra1" class="dialog-button" hidden="true"/>
-        <xul:button dlgtype="cancel" class="dialog-button"/>
-        <xul:button dlgtype="help" class="dialog-button" hidden="true"/>
-        <xul:button dlgtype="disclosure" class="dialog-button" hidden="true"/>
-#endif
-      </xul:hbox>
+  constructor() {
+    super();
+    let shadow = this.attachShadow({mode: 'open'});
+  }
+  connectedCallback() {
+    // XXX: Use Shadow DOM instead?
+    let currentChildren = [...this.childNodes];
+
+    // XXX: Parsed children aren't visible here. Are they supposed to be?
+    // See languages.xul and about:preferences -> Languages.
+    console.log(this.id, currentChildren.length, this.childNodes.length, this.innerHTML);
 
-    <xul:keyset>
-      <xul:key phase="capturing" oncommand="document.documentElement.openHelp(event)"
-#ifdef XP_MACOSX
-           key="&openHelpMac.commandkey;" modifiers="accel"/>
-#else
-           keycode="&openHelp.commandkey;"/>
-#endif
-    </xul:keyset>
-
-    </content>
-
-    <implementation>
-      <field name="_mStrBundle">null</field>
-      <field name="_closeHandler">(function(event) {
-        if (!document.documentElement.cancelDialog())
-          event.preventDefault();
-      })</field>
-
-      <property name="buttons"
-                onget="return this.getAttribute('buttons');"
-                onset="this._configureButtons(val); return val;"/>
+    let buttons = AppConstants.XP_UNIX ?
+      `<hbox class="dialog-button-box" anonid="buttons" inherits="pack=buttonpack,align=buttonalign,dir=buttondir,orient=buttonorient">
+        <button dlgtype="disclosure" class="dialog-button" hidden="true"/>
+        <button dlgtype="help" class="dialog-button" hidden="true"/>
+        <button dlgtype="extra2" class="dialog-button" hidden="true"/>
+        <button dlgtype="extra1" class="dialog-button" hidden="true"/>
+        <spacer anonid="spacer" flex="1"/>
+        <button dlgtype="cancel" class="dialog-button"/>
+        <button dlgtype="accept" class="dialog-button" xbl:inherits="disabled=buttondisabledaccept"/>
+      </hbox>` :
+      `<hbox class="dialog-button-box" anonid="buttons" inherits="pack=buttonpack,align=buttonalign,dir=buttondir,orient=buttonorient" pack="end">
+        <button dlgtype="extra2" class="dialog-button" hidden="true"/>
+        <spacer anonid="spacer" flex="1" hidden="true"/>
+        <button dlgtype="accept" class="dialog-button" xbl:inherits="disabled=buttondisabledaccept"/>
+        <button dlgtype="extra1" class="dialog-button" hidden="true"/>
+        <button dlgtype="cancel" class="dialog-button"/>
+        <button dlgtype="help" class="dialog-button" hidden="true"/>
+        <button dlgtype="disclosure" class="dialog-button" hidden="true"/>
+      </hbox>`
 
-      <property name="defaultButton">
-        <getter>
-        <![CDATA[
-          if (this.hasAttribute("defaultButton"))
-            return this.getAttribute("defaultButton");
-          return "accept"; // default to the accept button
-        ]]>
-        </getter>
-        <setter>
-        <![CDATA[
-          this._setDefaultButton(val);
-          return val;
-        ]]>
-        </setter>
-      </property>
+    let key = AppConstants.platform == "macosx" ?
+      `<key phase="capturing" oncommand="document.documentElement.openHelp(event)"
+                key="DTDopenHelpMac.commandkey" modifiers="accel"/>` :
+      `<key phase="capturing" oncommand="document.documentElement.openHelp(event)"
+                keycode="DTDopenHelp.commandkey"/>`
 
-      <method name="acceptDialog">
-        <body>
-        <![CDATA[
-          return this._doButtonCommand("accept");
-        ]]>
-        </body>
-      </method>
+    this.shadowRoot.appendChild(MozXULElement.parseXULToFragment(`
+      <vbox class="box-inherit dialog-content-box" flex="1"></vbox>
+      ${buttons}
+      <keyset>
+        ${key}
+      </keyset>
+    `));
 
-      <method name="cancelDialog">
-        <body>
-        <![CDATA[
-          return this._doButtonCommand("cancel");
-        ]]>
-        </body>
-      </method>
+    let container = this.querySelector(".dialog-content-box");
+    for (let i = 0; i < currentChildren.length; i++) {
+      container.appendChild(currentChildren[i]);
+    }
 
-      <method name="getButton">
-        <parameter name="aDlgType"/>
-        <body>
-        <![CDATA[
-          return this._buttons[aDlgType];
-        ]]>
-        </body>
-      </method>
+    this._mStrBundle = null;
+
+    this._closeHandler = function(event) {
+      if (!document.documentElement.cancelDialog())
+        event.preventDefault();
+    };
 
-      <method name="moveToAlertPosition">
-        <body>
-        <![CDATA[
-          // hack. we need this so the window has something like its final size
-          if (window.outerWidth == 1) {
-            dump("Trying to position a sizeless window; caller should have called sizeToContent() or sizeTo(). See bug 75649.\n");
-            sizeToContent();
-          }
+    this._configureButtons(this.buttons);
+
+    // listen for when window is closed via native close buttons
+    window.addEventListener("close", this._closeHandler);
 
-          if (opener) {
-            var xOffset = (opener.outerWidth - window.outerWidth) / 2;
-            var yOffset = opener.outerHeight / 5;
+    // for things that we need to initialize after onload fires
+    window.addEventListener("load", this.postLoadInit);
 
-            var newX = opener.screenX + xOffset;
-            var newY = opener.screenY + yOffset;
-          } else {
-            newX = (screen.availWidth - window.outerWidth) / 2;
-            newY = (screen.availHeight - window.outerHeight) / 2;
-          }
+    window.moveToAlertPosition = this.moveToAlertPosition;
+    window.centerWindowOnScreen = this.centerWindowOnScreen;
+
 
-          // ensure the window is fully onscreen (if smaller than the screen)
-          if (newX < screen.availLeft)
-            newX = screen.availLeft + 20;
-          if ((newX + window.outerWidth) > (screen.availLeft + screen.availWidth))
-            newX = (screen.availLeft + screen.availWidth) - window.outerWidth - 20;
+    this.addEventListener("keypress", (event) => { this._hitEnter(event); });
 
-          if (newY < screen.availTop)
-            newY = screen.availTop + 20;
-          if ((newY + window.outerHeight) > (screen.availTop + screen.availHeight))
-            newY = (screen.availTop + screen.availHeight) - window.outerHeight - 60;
+    this.addEventListener("keypress", (event) => {
+      if (!event.defaultPrevented)
+        this.cancelDialog();
+    });
 
-          window.moveTo( newX, newY );
-        ]]>
-        </body>
-      </method>
-
-      <method name="centerWindowOnScreen">
-        <body>
-        <![CDATA[
-          var xOffset = screen.availWidth / 2 - window.outerWidth / 2;
-          var yOffset = screen.availHeight / 2 - window.outerHeight / 2;
-
-          xOffset = xOffset > 0 ? xOffset : 0;
-          yOffset = yOffset > 0 ? yOffset : 0;
-          window.moveTo(xOffset, yOffset);
-        ]]>
-        </body>
-      </method>
+    this.addEventListener("focus", (event) => {
+      var btn = this.getButton(this.defaultButton);
+      if (btn)
+        btn.setAttribute("default", event.originalTarget == btn || !(event.originalTarget instanceof Ci.nsIDOMXULButtonElement));
+    }, true);
+  }
 
-      <constructor>
-      <![CDATA[
-        this._configureButtons(this.buttons);
+  set buttons(val) {
+    this._configureButtons(val);
+    return val;
+  }
 
-        // listen for when window is closed via native close buttons
-        window.addEventListener("close", this._closeHandler);
-
-        // for things that we need to initialize after onload fires
-        window.addEventListener("load", this.postLoadInit);
+  get buttons() {
+    return this.getAttribute('buttons');
+  }
 
-        window.moveToAlertPosition = this.moveToAlertPosition;
-        window.centerWindowOnScreen = this.centerWindowOnScreen;
-      ]]>
-      </constructor>
+  set defaultButton(val) {
+    this._setDefaultButton(val);
+    return val;
+  }
 
-      <method name="postLoadInit">
-        <parameter name="aEvent"/>
-        <body>
-        <![CDATA[
-          function focusInit() {
-            const dialog = document.documentElement;
-            const defaultButton = dialog.getButton(dialog.defaultButton);
-            // give focus to the first focusable element in the dialog
-            if (!document.commandDispatcher.focusedElement) {
-              document.commandDispatcher.advanceFocusIntoSubtree(dialog);
+  get defaultButton() {
+    if (this.hasAttribute("defaultButton"))
+      return this.getAttribute("defaultButton");
+    return "accept"; // default to the accept button
+  }
 
-              var focusedElt = document.commandDispatcher.focusedElement;
-              if (focusedElt) {
-                var initialFocusedElt = focusedElt;
-                while (focusedElt.localName == "tab" ||
-                       focusedElt.getAttribute("noinitialfocus") == "true") {
-                  document.commandDispatcher.advanceFocusIntoSubtree(focusedElt);
-                  focusedElt = document.commandDispatcher.focusedElement;
-                  if (focusedElt == initialFocusedElt) {
-                    if (focusedElt.getAttribute("noinitialfocus") == "true") {
-                      focusedElt.blur();
-                    }
-                    break;
-                  }
-                }
+  get mStrBundle() {
+    if (!this._mStrBundle) {
+      // need to create string bundle manually instead of using <stringbundle/>
+      // see bug 63370 for details
+      this._mStrBundle = Cc["@mozilla.org/intl/stringbundle;1"]
+        .getService(Ci.nsIStringBundleService)
+        .createBundle("chrome://global/locale/dialog.properties");
+    }
+    return this._mStrBundle;
+  }
+
+  acceptDialog() {
+    return this._doButtonCommand("accept");
+  }
 
-                if (initialFocusedElt.localName == "tab") {
-                  if (focusedElt.hasAttribute("dlgtype")) {
-                    // We don't want to focus on anonymous OK, Cancel, etc. buttons,
-                    // so return focus to the tab itself
-                    initialFocusedElt.focus();
-                  }
-                } else if (!/Mac/.test(navigator.platform) &&
-                           focusedElt.hasAttribute("dlgtype") && focusedElt != defaultButton) {
-                  defaultButton.focus();
-                }
-              }
-            }
-
-            try {
-              if (defaultButton)
-                window.notifyDefaultButtonLoaded(defaultButton);
-            } catch (e) { }
-          }
+  cancelDialog() {
+    return this._doButtonCommand("cancel");
+  }
 
-          // Give focus after onload completes, see bug 103197.
-          setTimeout(focusInit, 0);
-        ]]>
-        </body>
-      </method>
+  getButton(aDlgType) {
+    return this._buttons[aDlgType];
+  }
 
-      <method name="openHelp">
-        <parameter name="event"/>
-        <body>
-        <![CDATA[
-          var helpButton = document.documentElement.getButton("help");
-          if (helpButton.disabled || helpButton.hidden)
-            return;
-          this._fireButtonEvent("help");
-          event.stopPropagation();
-          event.preventDefault();
-        ]]>
-        </body>
-      </method>
+  moveToAlertPosition() {
+    // hack. we need this so the window has something like its final size
+    if (window.outerWidth == 1) {
+      dump("Trying to position a sizeless window; caller should have called sizeToContent() or sizeTo(). See bug 75649.\n");
+      sizeToContent();
+    }
 
-      <property name="mStrBundle">
-        <getter>
-        <![CDATA[
-          if (!this._mStrBundle) {
-            // need to create string bundle manually instead of using <xul:stringbundle/>
-            // see bug 63370 for details
-            this._mStrBundle = Cc["@mozilla.org/intl/stringbundle;1"]
-                                 .getService(Ci.nsIStringBundleService)
-                                 .createBundle("chrome://global/locale/dialog.properties");
-          }
-          return this._mStrBundle;
-        ]]></getter>
-      </property>
+    if (opener) {
+      var xOffset = (opener.outerWidth - window.outerWidth) / 2;
+      var yOffset = opener.outerHeight / 5;
+
+      var newX = opener.screenX + xOffset;
+      var newY = opener.screenY + yOffset;
+    } else {
+      newX = (screen.availWidth - window.outerWidth) / 2;
+      newY = (screen.availHeight - window.outerHeight) / 2;
+    }
 
-      <method name="_configureButtons">
-        <parameter name="aButtons"/>
-        <body>
-        <![CDATA[
-          // by default, get all the anonymous button elements
-          var buttons = {};
-          this._buttons = buttons;
-          buttons.accept = document.getAnonymousElementByAttribute(this, "dlgtype", "accept");
-          buttons.cancel = document.getAnonymousElementByAttribute(this, "dlgtype", "cancel");
-          buttons.extra1 = document.getAnonymousElementByAttribute(this, "dlgtype", "extra1");
-          buttons.extra2 = document.getAnonymousElementByAttribute(this, "dlgtype", "extra2");
-          buttons.help = document.getAnonymousElementByAttribute(this, "dlgtype", "help");
-          buttons.disclosure = document.getAnonymousElementByAttribute(this, "dlgtype", "disclosure");
+    // ensure the window is fully onscreen (if smaller than the screen)
+    if (newX < screen.availLeft)
+      newX = screen.availLeft + 20;
+    if ((newX + window.outerWidth) > (screen.availLeft + screen.availWidth))
+      newX = (screen.availLeft + screen.availWidth) - window.outerWidth - 20;
 
-          // look for any overriding explicit button elements
-          var exBtns = this.getElementsByAttribute("dlgtype", "*");
-          var dlgtype;
-          var i;
-          for (i = 0; i < exBtns.length; ++i) {
-            dlgtype = exBtns[i].getAttribute("dlgtype");
-            buttons[dlgtype].hidden = true; // hide the anonymous button
-            buttons[dlgtype] = exBtns[i];
-          }
+    if (newY < screen.availTop)
+      newY = screen.availTop + 20;
+    if ((newY + window.outerHeight) > (screen.availTop + screen.availHeight))
+      newY = (screen.availTop + screen.availHeight) - window.outerHeight - 60;
+
+    window.moveTo(newX, newY);
+  }
 
-          // add the label and oncommand handler to each button
-          for (dlgtype in buttons) {
-            var button = buttons[dlgtype];
-            button.addEventListener("command", this._handleButtonCommand, true);
+  centerWindowOnScreen() {
+    var xOffset = screen.availWidth / 2 - window.outerWidth / 2;
+    var yOffset = screen.availHeight / 2 - window.outerHeight / 2;
+
+    xOffset = xOffset > 0 ? xOffset : 0;
+    yOffset = yOffset > 0 ? yOffset : 0;
+    window.moveTo(xOffset, yOffset);
+  }
 
-            // don't override custom labels with pre-defined labels on explicit buttons
-            if (!button.hasAttribute("label")) {
-              // dialog attributes override the default labels in dialog.properties
-              if (this.hasAttribute("buttonlabel" + dlgtype)) {
-                button.setAttribute("label", this.getAttribute("buttonlabel" + dlgtype));
-                if (this.hasAttribute("buttonaccesskey" + dlgtype))
-                  button.setAttribute("accesskey", this.getAttribute("buttonaccesskey" + dlgtype));
-              } else if (dlgtype != "extra1" && dlgtype != "extra2") {
-                button.setAttribute("label", this.mStrBundle.GetStringFromName("button-" + dlgtype));
-                var accessKey = this.mStrBundle.GetStringFromName("accesskey-" + dlgtype);
-                if (accessKey)
-                  button.setAttribute("accesskey", accessKey);
+  postLoadInit(aEvent) {
+    function focusInit() {
+      const dialog = document.documentElement;
+      const defaultButton = dialog.getButton(dialog.defaultButton);
+      // give focus to the first focusable element in the dialog
+      if (!document.commandDispatcher.focusedElement) {
+        document.commandDispatcher.advanceFocusIntoSubtree(dialog);
+
+        var focusedElt = document.commandDispatcher.focusedElement;
+        if (focusedElt) {
+          var initialFocusedElt = focusedElt;
+          while (focusedElt.localName == "tab" ||
+            focusedElt.getAttribute("noinitialfocus") == "true") {
+            document.commandDispatcher.advanceFocusIntoSubtree(focusedElt);
+            focusedElt = document.commandDispatcher.focusedElement;
+            if (focusedElt == initialFocusedElt) {
+              if (focusedElt.getAttribute("noinitialfocus") == "true") {
+                focusedElt.blur();
               }
-            }
-            // allow specifying alternate icons in the dialog header
-            if (!button.hasAttribute("icon")) {
-              // if there's an icon specified, use that
-              if (this.hasAttribute("buttonicon" + dlgtype))
-                button.setAttribute("icon", this.getAttribute("buttonicon" + dlgtype));
-              // otherwise set defaults
-              else
-                switch (dlgtype) {
-                  case "accept":
-                    button.setAttribute("icon", "accept");
-                    break;
-                  case "cancel":
-                    button.setAttribute("icon", "cancel");
-                    break;
-                  case "disclosure":
-                    button.setAttribute("icon", "properties");
-                    break;
-                  case "help":
-                    button.setAttribute("icon", "help");
-                    break;
-                  default:
-                    break;
-                }
+              break;
             }
           }
 
-          // ensure that hitting enter triggers the default button command
-          this.defaultButton = this.defaultButton;
+          if (initialFocusedElt.localName == "tab") {
+            if (focusedElt.hasAttribute("dlgtype")) {
+              // We don't want to focus on anonymous OK, Cancel, etc. buttons,
+              // so return focus to the tab itself
+              initialFocusedElt.focus();
+            }
+          } else if (!/Mac/.test(navigator.platform) &&
+            focusedElt.hasAttribute("dlgtype") && focusedElt != defaultButton) {
+            defaultButton.focus();
+          }
+        }
+      }
 
-          // if there is a special button configuration, use it
-          if (aButtons) {
-            // expect a comma delimited list of dlgtype values
-            var list = aButtons.split(",");
-
-            // mark shown dlgtypes as true
-            var shown = { accept: false, cancel: false, help: false,
-                          disclosure: false, extra1: false, extra2: false };
-            for (i = 0; i < list.length; ++i)
-              shown[list[i].replace(/ /g, "")] = true;
+      try {
+        if (defaultButton)
+          window.notifyDefaultButtonLoaded(defaultButton);
+      } catch (e) {}
+    }
 
-            // hide/show the buttons we want
-            for (dlgtype in buttons)
-              buttons[dlgtype].hidden = !shown[dlgtype];
+    // Give focus after onload completes, see bug 103197.
+    setTimeout(focusInit, 0);
+  }
 
-            // show the spacer on Windows only when the extra2 button is present
-            if (/Win/.test(navigator.platform)) {
-              var spacer = document.getAnonymousElementByAttribute(this, "anonid", "spacer");
-              spacer.removeAttribute("hidden");
-              spacer.setAttribute("flex", shown.extra2 ? "1" : "0");
-            }
-          }
-        ]]>
-        </body>
-      </method>
+  openHelp(event) {
+    var helpButton = document.documentElement.getButton("help");
+    if (helpButton.disabled || helpButton.hidden)
+      return;
+    this._fireButtonEvent("help");
+    event.stopPropagation();
+    event.preventDefault();
+  }
+
+  _configureButtons(aButtons) {
+    // by default, get all the anonymous button elements
+    var buttons = {};
+    this._buttons = buttons;
+    buttons.accept = this.querySelector("[dlgtype=accept]");
+    buttons.cancel = this.querySelector("[dlgtype=cancel]");
+    buttons.extra1 = this.querySelector("[dlgtype=extra1]");
+    buttons.extra2 = this.querySelector("[dlgtype=extra2]");
+    buttons.help = this.querySelector("[dlgtype=help]");
+    buttons.disclosure = this.querySelector("[dlgtype=disclosure]");
 
-      <method name="_setDefaultButton">
-        <parameter name="aNewDefault"/>
-        <body>
-        <![CDATA[
-          // remove the default attribute from the previous default button, if any
-          var oldDefaultButton = this.getButton(this.defaultButton);
-          if (oldDefaultButton)
-            oldDefaultButton.removeAttribute("default");
+    // look for any overriding explicit button elements
+    var exBtns = this.querySelector(".dialog-content-box").getElementsByAttribute("dlgtype", "*");
+    var dlgtype;
+    var i;
+    for (i = 0; i < exBtns.length; ++i) {
+      dlgtype = exBtns[i].getAttribute("dlgtype");
+      buttons[dlgtype].hidden = true; // hide the anonymous button
+      buttons[dlgtype] = exBtns[i];
+    }
+
+    // add the label and oncommand handler to each button
+    for (dlgtype in buttons) {
+      var button = buttons[dlgtype];
+      button.addEventListener("command", this._handleButtonCommand, true);
 
-          var newDefaultButton = this.getButton(aNewDefault);
-          if (newDefaultButton) {
-            this.setAttribute("defaultButton", aNewDefault);
-            newDefaultButton.setAttribute("default", "true");
-          } else {
-            this.setAttribute("defaultButton", "none");
-            if (aNewDefault != "none")
-              dump("invalid new default button: " + aNewDefault + ", assuming: none\n");
+      // don't override custom labels with pre-defined labels on explicit buttons
+      if (!button.hasAttribute("label")) {
+        // dialog attributes override the default labels in dialog.properties
+        if (this.hasAttribute("buttonlabel" + dlgtype)) {
+          button.setAttribute("label", this.getAttribute("buttonlabel" + dlgtype));
+          if (this.hasAttribute("buttonaccesskey" + dlgtype))
+            button.setAttribute("accesskey", this.getAttribute("buttonaccesskey" + dlgtype));
+        } else if (dlgtype != "extra1" && dlgtype != "extra2") {
+          button.setAttribute("label", this.mStrBundle.GetStringFromName("button-" + dlgtype));
+          var accessKey = this.mStrBundle.GetStringFromName("accesskey-" + dlgtype);
+          if (accessKey)
+            button.setAttribute("accesskey", accessKey);
+        }
+      }
+      // allow specifying alternate icons in the dialog header
+      if (!button.hasAttribute("icon")) {
+        // if there's an icon specified, use that
+        if (this.hasAttribute("buttonicon" + dlgtype))
+          button.setAttribute("icon", this.getAttribute("buttonicon" + dlgtype));
+        // otherwise set defaults
+        else
+          switch (dlgtype) {
+            case "accept":
+              button.setAttribute("icon", "accept");
+              break;
+            case "cancel":
+              button.setAttribute("icon", "cancel");
+              break;
+            case "disclosure":
+              button.setAttribute("icon", "properties");
+              break;
+            case "help":
+              button.setAttribute("icon", "help");
+              break;
+            default:
+              break;
           }
-        ]]>
-        </body>
-      </method>
+      }
+    }
 
-      <method name="_handleButtonCommand">
-        <parameter name="aEvent"/>
-        <body>
-        <![CDATA[
-          return document.documentElement._doButtonCommand(
-                                        aEvent.target.getAttribute("dlgtype"));
-        ]]>
-        </body>
-      </method>
+    // ensure that hitting enter triggers the default button command
+    this.defaultButton = this.defaultButton;
 
-      <method name="_doButtonCommand">
-        <parameter name="aDlgType"/>
-        <body>
-        <![CDATA[
-          var button = this.getButton(aDlgType);
-          if (!button.disabled) {
-            var noCancel = this._fireButtonEvent(aDlgType);
-            if (noCancel) {
-              if (aDlgType == "accept" || aDlgType == "cancel") {
-                var closingEvent = new CustomEvent("dialogclosing", {
-                  bubbles: true,
-                  detail: { button: aDlgType },
-                });
-                this.dispatchEvent(closingEvent);
-                window.close();
-              }
-            }
-            return noCancel;
-          }
-          return true;
-        ]]>
-        </body>
-      </method>
+    // if there is a special button configuration, use it
+    if (aButtons) {
+      // expect a comma delimited list of dlgtype values
+      var list = aButtons.split(",");
+
+      // mark shown dlgtypes as true
+      var shown = {
+        accept: false,
+        cancel: false,
+        help: false,
+        disclosure: false,
+        extra1: false,
+        extra2: false
+      };
+      for (i = 0; i < list.length; ++i)
+        shown[list[i].replace(/ /g, "")] = true;
+
+      // hide/show the buttons we want
+      for (dlgtype in buttons)
+        buttons[dlgtype].hidden = !shown[dlgtype];
 
-      <method name="_fireButtonEvent">
-        <parameter name="aDlgType"/>
-        <body>
-        <![CDATA[
-          var event = document.createEvent("Events");
-          event.initEvent("dialog" + aDlgType, true, true);
+      // show the spacer on Windows only when the extra2 button is present
+      if (/Win/.test(navigator.platform)) {
+        var spacer = this.querySelector("[anonid=spacer]");
+        spacer.removeAttribute("hidden");
+        spacer.setAttribute("flex", shown.extra2 ? "1" : "0");
+      }
+    }
+  }
+
+  _setDefaultButton(aNewDefault) {
+    // remove the default attribute from the previous default button, if any
+    var oldDefaultButton = this.getButton(this.defaultButton);
+    if (oldDefaultButton)
+      oldDefaultButton.removeAttribute("default");
 
-          // handle dom event handlers
-          var noCancel = this.dispatchEvent(event);
+    var newDefaultButton = this.getButton(aNewDefault);
+    if (newDefaultButton) {
+      this.setAttribute("defaultButton", aNewDefault);
+      newDefaultButton.setAttribute("default", "true");
+    } else {
+      this.setAttribute("defaultButton", "none");
+      if (aNewDefault != "none")
+        dump("invalid new default button: " + aNewDefault + ", assuming: none\n");
+    }
+  }
+
+  _handleButtonCommand(aEvent) {
+    return document.documentElement._doButtonCommand(
+      aEvent.target.getAttribute("dlgtype"));
+  }
 
-          // handle any xml attribute event handlers
-          var handler = this.getAttribute("ondialog" + aDlgType);
-          if (handler != "") {
-            var fn = new Function("event", handler);
-            var returned = fn(event);
-            // eslint-disable-next-line mozilla/no-compare-against-boolean-literals
-            if (returned == false)
-              noCancel = false;
-          }
+  _doButtonCommand(aDlgType) {
+    var button = this.getButton(aDlgType);
+    if (!button.disabled) {
+      var noCancel = this._fireButtonEvent(aDlgType);
+      if (noCancel) {
+        if (aDlgType == "accept" || aDlgType == "cancel") {
+          var closingEvent = new CustomEvent("dialogclosing", {
+            bubbles: true,
+            detail: { button: aDlgType },
+          });
+          this.dispatchEvent(closingEvent);
+          window.close();
+        }
+      }
+      return noCancel;
+    }
+    return true;
+  }
 
-          return noCancel;
-        ]]>
-        </body>
-      </method>
+  _fireButtonEvent(aDlgType) {
+    var event = document.createEvent("Events");
+    event.initEvent("dialog" + aDlgType, true, true);
 
-      <method name="_hitEnter">
-        <parameter name="evt"/>
-        <body>
-        <![CDATA[
-          if (evt.defaultPrevented)
-            return;
+    // handle dom event handlers
+    var noCancel = this.dispatchEvent(event);
 
-          var btn = this.getButton(this.defaultButton);
-          if (btn)
-            this._doButtonCommand(this.defaultButton);
-        ]]>
-        </body>
-      </method>
+    // handle any xml attribute event handlers
+    var handler = this.getAttribute("ondialog" + aDlgType);
+    if (handler != "") {
+      var fn = new Function("event", handler);
+      var returned = fn(event);
+      // eslint-disable-next-line mozilla/no-compare-against-boolean-literals
+      if (returned == false)
+        noCancel = false;
+    }
 
-    </implementation>
+    return noCancel;
+  }
 
-    <handlers>
-      <handler event="keypress" keycode="VK_RETURN"
-               group="system" action="this._hitEnter(event);"/>
-      <handler event="keypress" keycode="VK_ESCAPE" group="system">
-        if (!event.defaultPrevented)
-          this.cancelDialog();
-      </handler>
-#ifdef XP_MACOSX
-      <handler event="keypress" key="." modifiers="meta" phase="capturing" action="this.cancelDialog();"/>
-#else
-      <handler event="focus" phase="capturing">
-        var btn = this.getButton(this.defaultButton);
-        if (btn)
-          btn.setAttribute("default", event.originalTarget == btn || !(event.originalTarget instanceof Ci.nsIDOMXULButtonElement));
-      </handler>
-#endif
-    </handlers>
+  _hitEnter(evt) {
+    if (evt.defaultPrevented)
+      return;
 
-  </binding>
+    var btn = this.getButton(this.defaultButton);
+    if (btn)
+      this._doButtonCommand(this.defaultButton);
+  }
+}
 
-</bindings>
+customElements.define("dialog", MozDialog);
+
+}
\ No newline at end of file
diff --git a/toolkit/content/xul.css b/toolkit/content/xul.css
--- a/toolkit/content/xul.css
+++ b/toolkit/content/xul.css
@@ -889,19 +889,17 @@ autorepeatbutton {
 
 stringbundle,
 stringbundleset {
   display: none;
 }
 
 /********** dialog **********/
 
-dialog,
-dialog:root /* override :root from above */ {
-  -moz-binding: url("chrome://global/content/bindings/dialog.xml#dialog");
+dialog {
   -moz-box-orient: vertical;
 }
 
 /********* page ************/
 
 page {
   -moz-box-orient: vertical;
 }
