# HG changeset patch
# Parent 3596dac5d22c4a2d0cc0c52dbfdaf49fc3a3df4b
# User Brian Grinstead <bgrinstead@mozilla.com>
test changes, including opening a xul popup

diff --git a/browser/devtools/shared/test/browser.ini b/browser/devtools/shared/test/browser.ini
--- a/browser/devtools/shared/test/browser.ini
+++ b/browser/devtools/shared/test/browser.ini
@@ -6,16 +6,17 @@ support-files =
   browser_layoutHelpers-getBoxQuads.html
   browser_layoutHelpers_iframe.html
   browser_templater_basic.html
   browser_toolbar_basic.html
   browser_toolbar_webconsole_errors_count.html
   head.js
   leakhunt.js
 
+[browser_autocomplete_popup-01.js]
 [browser_css_color.js]
 [browser_cubic-bezier-01.js]
 [browser_cubic-bezier-02.js]
 [browser_cubic-bezier-03.js]
 [browser_graphs-01.js]
 [browser_graphs-02.js]
 [browser_graphs-03.js]
 [browser_graphs-04.js]
diff --git a/browser/devtools/shared/test/browser_autocomplete_popup-01.js b/browser/devtools/shared/test/browser_autocomplete_popup-01.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/shared/test/browser_autocomplete_popup-01.js
@@ -0,0 +1,70 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Tests that autocomplete popup basic functionality works
+
+const TEST_URI = "data:text/xml;charset=UTF-8,<?xml version='1.0'?>" +
+  "<?xml-stylesheet href='chrome://global/skin/global.css'?>" +
+  "<?xml-stylesheet href='chrome://browser/skin/devtools/common.css'?>" +
+  "<?xml-stylesheet href='chrome://browser/skin/devtools/widgets.css'?>" +
+  "<window xmlns='http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul'" +
+  " title='Table Widget' width='600' height='500'><box flex='1'/></window>";
+const TEST_OPT = "chrome,titlebar,toolbar,centerscreen,resizable,dialog=no";
+const { AutocompletePopup } = devtools.require("devtools/shared/autocomplete-popup");
+
+let test = Task.async(function*() {
+  waitForExplicitFinish();
+  let window = yield promiseWindow(TEST_URI, TEST_OPT);
+
+
+  info("Checking that the markup is created in the parent");
+
+  let items = [
+    {label: "item0", value: "value0"},
+    {label: "item1", value: "value1"},
+    {label: "item2", value: "value2"},
+  ];
+
+  let options = {
+    autoSelect: true,
+    theme: "auto"
+  };
+
+  // let container = content.document.querySelector("#container");
+  ok (window.document, "THERE IS A DOCUMENT");
+  // console.log(window.document);
+  let popup = new AutocompletePopup(window.document, options);
+
+  popup.setItems(items);
+  finish();
+});
+
+
+
+// function test() {
+//   addTab(TEST_URI, function() {
+//     Task.spawn(runTest).catch(err => {
+//       ok(false, ex);
+//       console.error(ex);
+//     }).then(finish);
+//   });
+// }
+
+// function* runTest() {
+//   info("Starting browser_autocomplete_popup-01.js");
+
+//   let items = [
+//     {label: "item0", value: "value0"},
+//     {label: "item1", value: "value1"},
+//     {label: "item2", value: "value2"},
+//   ];
+
+//   let options = {
+//     autoSelect: true,
+//     theme: "auto"
+//   };
+//   this.popup = new AutocompletePopup(aDoc.defaultView.parent.document, options);
+
+// }
diff --git a/browser/devtools/shared/test/head.js b/browser/devtools/shared/test/head.js
--- a/browser/devtools/shared/test/head.js
+++ b/browser/devtools/shared/test/head.js
@@ -29,16 +29,32 @@ function addTab(aURL, aCallback)
   function onTabLoad() {
     browser.removeEventListener("load", onTabLoad, true);
     aCallback(browser, tab, browser.contentDocument);
   }
 
   browser.addEventListener("load", onTabLoad, true);
 }
 
+function promiseWindow(uri, options) {
+  let deferred = Promise.defer();
+  let win = Services.ww.openWindow(null, uri, "_blank", options, null);
+
+  win.addEventListener("load", function onLoad() {
+    win.removeEventListener("load", onLoad, false);
+    waitForFocus(function () {
+      registerCleanupFunction(function closeWindow() {
+        win.close();
+      });
+      deferred.resolve(win);
+    });
+  });
+  return deferred.promise;
+}
+
 function promiseTab(aURL) {
   let deferred = Promise.defer();
   addTab(aURL, deferred.resolve);
   return deferred.promise;
 }
 
 registerCleanupFunction(function tearDown() {
   while (gBrowser.tabs.length > 1) {
