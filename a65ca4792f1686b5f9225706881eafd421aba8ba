
# HG changeset patch
# User Emma Malysz <emalysz@mozilla.com>
# Date 1578335042 28800
# Node ID a65ca4792f1686b5f9225706881eafd421aba8ba
# Parent  51efc4b931f748899be0fa3c9603fc4e07b668b6
Bug 1590573, create a unified approach for caching fragments in our Custom Elements

Differential Revision: https://phabricator.services.mozilla.com/D58866

diff --git a/browser/base/content/tabbrowser-tab.js b/browser/base/content/tabbrowser-tab.js
--- a/browser/base/content/tabbrowser-tab.js
+++ b/browser/base/content/tabbrowser-tab.js
@@ -3,16 +3,44 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 // This is loaded into chrome windows with the subscript loader. Wrap in
 // a block to prevent accidentally leaking globals onto `window`.
 {
   class MozTabbrowserTab extends MozElements.MozTab {
+    static get markup() {
+      return `
+      <stack class="tab-stack" flex="1">
+        <vbox class="tab-background">
+          <hbox class="tab-line"/>
+          <spacer flex="1" class="tab-background-inner"/>
+          <hbox class="tab-bottom-line"/>
+        </vbox>
+        <hbox class="tab-loading-burst"/>
+        <hbox class="tab-content" align="center">
+          <hbox class="tab-throbber" layer="true"/>
+          <hbox class="tab-icon-pending"/>
+          <image class="tab-icon-image" validate="never" role="presentation"/>
+          <image class="tab-sharing-icon-overlay" role="presentation"/>
+          <image class="tab-icon-overlay" role="presentation"/>
+          <hbox class="tab-label-container"
+                onoverflow="this.setAttribute('textoverflow', 'true');"
+                onunderflow="this.removeAttribute('textoverflow');"
+                flex="1">
+            <label class="tab-text tab-label" role="presentation"/>
+          </hbox>
+          <image class="tab-icon-sound" role="presentation"/>
+          <image class="tab-close-button close-icon" role="presentation"/>
+        </hbox>
+      </stack>
+      `;
+    }
+
     constructor() {
       super();
 
       this.addEventListener("mouseover", this);
       this.addEventListener("mouseout", this);
       this.addEventListener("dragstart", this, true);
       this.addEventListener("dragstart", this);
       this.addEventListener("mousedown", this);
@@ -64,58 +92,27 @@
         ".tab-label":
           "text=label,accesskey,fadein,pinned,selected=visuallyselected,attention",
         ".tab-icon-sound":
           "soundplaying,soundplaying-scheduledremoval,pinned,muted,blocked,selected=visuallyselected,activemedia-blocked,pictureinpicture",
         ".tab-close-button": "fadein,pinned,selected=visuallyselected",
       };
     }
 
-    get fragment() {
-      if (!this.constructor.hasOwnProperty("_fragment")) {
-        this.constructor._fragment = MozXULElement.parseXULToFragment(`
-        <stack class="tab-stack" flex="1">
-          <vbox class="tab-background">
-            <hbox class="tab-line"/>
-            <spacer flex="1" class="tab-background-inner"/>
-            <hbox class="tab-bottom-line"/>
-          </vbox>
-          <hbox class="tab-loading-burst"/>
-          <hbox class="tab-content" align="center">
-            <hbox class="tab-throbber" layer="true"/>
-            <hbox class="tab-icon-pending"/>
-            <image class="tab-icon-image" validate="never" role="presentation"/>
-            <image class="tab-sharing-icon-overlay" role="presentation"/>
-            <image class="tab-icon-overlay" role="presentation"/>
-            <hbox class="tab-label-container"
-                  onoverflow="this.setAttribute('textoverflow', 'true');"
-                  onunderflow="this.removeAttribute('textoverflow');"
-                  flex="1">
-              <label class="tab-text tab-label" role="presentation"/>
-            </hbox>
-            <image class="tab-icon-sound" role="presentation"/>
-            <image class="tab-close-button close-icon" role="presentation"/>
-          </hbox>
-        </stack>
-      `);
-      }
-      return document.importNode(this.constructor._fragment, true);
-    }
-
     connectedCallback() {
       this.initialize();
     }
 
     initialize() {
       if (this._initialized) {
         return;
       }
 
       this.textContent = "";
-      this.appendChild(this.fragment);
+      this.appendChild(this.constructor.fragment);
       this.initializeAttributeInheritance();
       this.setAttribute("context", "tabContextMenu");
       this._initialized = true;
 
       if (!("_lastAccessed" in this)) {
         this.updateLastAccessed();
       }
     }
diff --git a/browser/components/customizableui/CustomizableWidgets.jsm b/browser/components/customizableui/CustomizableWidgets.jsm
--- a/browser/components/customizableui/CustomizableWidgets.jsm
+++ b/browser/components/customizableui/CustomizableWidgets.jsm
@@ -936,54 +936,55 @@ if (Services.prefs.getBoolPref("privacy.
     },
     handleEvent(aEvent) {
       switch (aEvent.type) {
         case "command":
           this.forgetButtonCalled(aEvent);
           break;
       }
     },
+    get markup() {
+      return `
+        <vbox class="panel-subview-body">
+          <hbox id="PanelUI-panic-timeframe">
+            <image id="PanelUI-panic-timeframe-icon" alt=""/>
+            <vbox flex="1">
+              <description data-l10n-id="panic-main-timeframe-desc" id="PanelUI-panic-mainDesc"></description>
+              <radiogroup id="PanelUI-panic-timeSpan" aria-labelledby="PanelUI-panic-mainDesc" closemenu="none">
+                <radio id="PanelUI-panic-5min" data-l10n-id="panic-button-5min" selected="true"
+                      value="5" class="subviewradio"/>
+                <radio id="PanelUI-panic-2hr" data-l10n-id="panic-button-2hr"
+                      value="2" class="subviewradio"/>
+                <radio id="PanelUI-panic-day" data-l10n-id="panic-button-day"
+                      value="6" class="subviewradio"/>
+              </radiogroup>
+            </vbox>
+          </hbox>
+          <vbox id="PanelUI-panic-explanations">
+            <label id="PanelUI-panic-actionlist-main-label" data-l10n-id="panic-button-action-desc"></label>
+
+            <label id="PanelUI-panic-actionlist-windows" class="PanelUI-panic-actionlist" data-l10n-id="panic-button-delete-tabs-and-windows"></label>
+            <label id="PanelUI-panic-actionlist-cookies" class="PanelUI-panic-actionlist" data-l10n-id="panic-button-delete-cookies"></label>
+            <label id="PanelUI-panic-actionlist-history" class="PanelUI-panic-actionlist" data-l10n-id="panic-button-delete-history"></label>
+            <label id="PanelUI-panic-actionlist-newwindow" class="PanelUI-panic-actionlist" data-l10n-id="panic-button-open-new-window"></label>
+
+            <label id="PanelUI-panic-warning" data-l10n-id="panic-button-undo-warning"></label>
+          </vbox>
+          <button id="PanelUI-panic-view-button"
+                  data-l10n-id="panic-button-forget-button"/>
+        </vbox>
+      `;
+    },
     onViewShowing(aEvent) {
       let win = aEvent.target.ownerGlobal;
       let doc = win.document;
       let eventBlocker = null;
       if (!doc.querySelector("#PanelUI-panic-timeframe")) {
         win.MozXULElement.insertFTLIfNeeded("browser/panicButton.ftl");
-        let frag = win.MozXULElement.parseXULToFragment(`
-          <vbox class="panel-subview-body">
-            <hbox id="PanelUI-panic-timeframe">
-              <image id="PanelUI-panic-timeframe-icon" alt=""/>
-              <vbox flex="1">
-                <description data-l10n-id="panic-main-timeframe-desc" id="PanelUI-panic-mainDesc"></description>
-                <radiogroup id="PanelUI-panic-timeSpan" aria-labelledby="PanelUI-panic-mainDesc" closemenu="none">
-                  <radio id="PanelUI-panic-5min" data-l10n-id="panic-button-5min" selected="true"
-                        value="5" class="subviewradio"/>
-                  <radio id="PanelUI-panic-2hr" data-l10n-id="panic-button-2hr"
-                        value="2" class="subviewradio"/>
-                  <radio id="PanelUI-panic-day" data-l10n-id="panic-button-day"
-                        value="6" class="subviewradio"/>
-                </radiogroup>
-              </vbox>
-            </hbox>
-            <vbox id="PanelUI-panic-explanations">
-              <label id="PanelUI-panic-actionlist-main-label" data-l10n-id="panic-button-action-desc"></label>
-
-              <label id="PanelUI-panic-actionlist-windows" class="PanelUI-panic-actionlist" data-l10n-id="panic-button-delete-tabs-and-windows"></label>
-              <label id="PanelUI-panic-actionlist-cookies" class="PanelUI-panic-actionlist" data-l10n-id="panic-button-delete-cookies"></label>
-              <label id="PanelUI-panic-actionlist-history" class="PanelUI-panic-actionlist" data-l10n-id="panic-button-delete-history"></label>
-              <label id="PanelUI-panic-actionlist-newwindow" class="PanelUI-panic-actionlist" data-l10n-id="panic-button-open-new-window"></label>
-
-              <label id="PanelUI-panic-warning" data-l10n-id="panic-button-undo-warning"></label>
-            </vbox>
-            <button id="PanelUI-panic-view-button"
-                    data-l10n-id="panic-button-forget-button"/>
-          </vbox>
-        `);
-
-        aEvent.target.appendChild(frag);
+        aEvent.target.appendChild(this.constructor.fragment);
         eventBlocker = doc.l10n.translateElements([aEvent.target]);
       }
 
       let forgetButton = aEvent.target.querySelector(
         "#PanelUI-panic-view-button"
       );
       let group = doc.getElementById("PanelUI-panic-timeSpan");
       group.selectedItem = doc.getElementById("PanelUI-panic-5min");
diff --git a/browser/components/downloads/DownloadsSubview.jsm b/browser/components/downloads/DownloadsSubview.jsm
--- a/browser/components/downloads/DownloadsSubview.jsm
+++ b/browser/components/downloads/DownloadsSubview.jsm
@@ -421,24 +421,16 @@ class DownloadsSubview extends Downloads
     }
 
     if (item && item._shell.isCommandEnabled(command)) {
       item._shell[command]();
     }
   }
 }
 
-/**
- * Associates each document with a pre-built DOM fragment representing the
- * download list item. This is then cloned to create each individual list item.
- * This is stored on the document to prevent leaks that would occur if a single
- * instance created by one document's DOMParser was stored globally.
- */
-var gDownloadsSubviewItemFragments = new WeakMap();
-
 DownloadsSubview.Button = class extends DownloadsViewUI.DownloadElementShell {
   constructor(download, element) {
     super();
     this.download = download;
     this.element = element;
     this.element._shell = this;
 
     this.element.classList.add(
@@ -497,41 +489,32 @@ DownloadsSubview.Button = class extends 
     if (this._downloadState !== newState) {
       this._downloadState = newState;
       this.onStateChanged();
     } else {
       this._updateState();
     }
   }
 
+  static get markup() {
+    return `
+      <image class="toolbarbutton-icon" validate="always"/>
+      <vbox class="toolbarbutton-text" flex="1">
+        <label crop="end"/>
+        <label class="status-text status-full" crop="end"/>
+        <label class="status-text status-open" crop="end"/>
+        <label class="status-text status-retry" crop="end"/>
+        <label class="status-text status-show" crop="end"/>
+      </vbox>
+      <toolbarbutton class="action-button"/>
+    `;
+  }
   // DownloadElementShell
   connect() {
-    let document = this.element.ownerDocument;
-    let downloadsSubviewItemFragment = gDownloadsSubviewItemFragments.get(
-      document
-    );
-    if (!downloadsSubviewItemFragment) {
-      let MozXULElement = document.defaultView.MozXULElement;
-      downloadsSubviewItemFragment = MozXULElement.parseXULToFragment(`
-        <image class="toolbarbutton-icon" validate="always"/>
-        <vbox class="toolbarbutton-text" flex="1">
-          <label crop="end"/>
-          <label class="status-text status-full" crop="end"/>
-          <label class="status-text status-open" crop="end"/>
-          <label class="status-text status-retry" crop="end"/>
-          <label class="status-text status-show" crop="end"/>
-        </vbox>
-        <toolbarbutton class="action-button"/>
-      `);
-      gDownloadsSubviewItemFragments.set(
-        document,
-        downloadsSubviewItemFragment
-      );
-    }
-    this.element.appendChild(downloadsSubviewItemFragment.cloneNode(true));
+    this.element.appendChild(this.constructor.fragment);
     for (let [propertyName, selector] of [
       ["_downloadTypeIcon", ".toolbarbutton-icon"],
       ["_downloadTarget", "label"],
       ["_downloadStatus", ".status-full"],
       ["_downloadButton", ".action-button"],
     ]) {
       this[propertyName] = this.element.querySelector(selector);
     }
diff --git a/browser/components/downloads/DownloadsViewUI.jsm b/browser/components/downloads/DownloadsViewUI.jsm
--- a/browser/components/downloads/DownloadsViewUI.jsm
+++ b/browser/components/downloads/DownloadsViewUI.jsm
@@ -63,24 +63,16 @@ var gDownloadElementButtons = {
   },
   removeFile: {
     commandName: "downloadsCmd_confirmBlock",
     l10nId: "download-remove-file",
     iconClass: "downloadIconCancel",
   },
 };
 
-/**
- * Associates each document with a pre-built DOM fragment representing the
- * download list item. This is then cloned to create each individual list item.
- * This is stored on the document to prevent leaks that would occur if a single
- * instance created by one document's DOMParser was stored globally.
- */
-var gDownloadListItemFragments = new WeakMap();
-
 var DownloadsViewUI = {
   /**
    * Returns true if the given string is the name of a command that can be
    * handled by the Downloads user interface, including standard commands.
    */
   isCommandName(name) {
     return name.startsWith("cmd_") || name.startsWith("downloadsCmd_");
   },
@@ -161,54 +153,61 @@ DownloadsViewUI.DownloadElementShell.pro
       this.connect();
       this.onChanged();
     }
   },
   get active() {
     return !!this._active;
   },
 
-  connect() {
+  get fragment() {
     let document = this.element.ownerDocument;
-    let downloadListItemFragment = gDownloadListItemFragments.get(document);
     // When changing the markup within the fragment, please ensure that
     // the functions within DownloadsView still operate correctly.
     // E.g. onDownloadClick() relies on brittle logic and performs/prevents
     // actions based on the check if originaltarget was not a button.
-    if (!downloadListItemFragment) {
-      let MozXULElement = document.defaultView.MozXULElement;
-      downloadListItemFragment = MozXULElement.parseXULToFragment(`
-        <hbox class="downloadMainArea" flex="1" align="center">
-          <stack>
-            <image class="downloadTypeIcon" validate="always"/>
-            <image class="downloadBlockedBadge" />
-          </stack>
-          <vbox class="downloadContainer" flex="1" pack="center">
-            <description class="downloadTarget" crop="center"/>
-            <description class="downloadDetails downloadDetailsNormal"
-                         crop="end"/>
-            <description class="downloadDetails downloadDetailsHover"
-                         crop="end"/>
-            <description class="downloadDetails downloadDetailsButtonHover"
-                         crop="end"/>
-          </vbox>
-        </hbox>
-        <toolbarseparator />
-        <button class="downloadButton"/>
-      `);
-      gDownloadListItemFragments.set(document, downloadListItemFragment);
+    let MozXULElement = document.defaultView.MozXULElement;
+    if (!this.constructor.hasOwnProperty("_fragment")) {
+      this.constructor._fragment = MozXULElement.parseXULToFragment(
+        this.markup
+      );
     }
+    return document.importNode(this.constructor._fragment, true);
+  },
+
+  get markup() {
+    return `
+    <hbox class="downloadMainArea" flex="1" align="center">
+      <stack>
+        <image class="downloadTypeIcon" validate="always"/>
+        <image class="downloadBlockedBadge" />
+      </stack>
+      <vbox class="downloadContainer" flex="1" pack="center">
+        <description class="downloadTarget" crop="center"/>
+        <description class="downloadDetails downloadDetailsNormal"
+                     crop="end"/>
+        <description class="downloadDetails downloadDetailsHover"
+                     crop="end"/>
+        <description class="downloadDetails downloadDetailsButtonHover"
+                     crop="end"/>
+      </vbox>
+    </hbox>
+    <toolbarseparator />
+    <button class="downloadButton"/>
+    `;
+  },
+
+  connect() {
+    let document = this.element.ownerDocument;
     this.element.setAttribute("active", true);
     this.element.setAttribute("orient", "horizontal");
     this.element.addEventListener("click", ev => {
       ev.target.ownerGlobal.DownloadsView.onDownloadClick(ev);
     });
-    this.element.appendChild(
-      document.importNode(downloadListItemFragment, true)
-    );
+    this.element.appendChild(this.fragment);
     let downloadButton = this.element.querySelector(".downloadButton");
     downloadButton.addEventListener("command", function(event) {
       event.target.ownerGlobal.DownloadsView.onDownloadButton(event);
     });
     for (let [propertyName, selector] of [
       ["_downloadTypeIcon", ".downloadTypeIcon"],
       ["_downloadTarget", ".downloadTarget"],
       ["_downloadDetailsNormal", ".downloadDetailsNormal"],
diff --git a/browser/components/preferences/in-content/main.js b/browser/components/preferences/in-content/main.js
--- a/browser/components/preferences/in-content/main.js
+++ b/browser/components/preferences/in-content/main.js
@@ -3088,42 +3088,49 @@ function getLocalHandlerApp(aFile) {
     "@mozilla.org/uriloader/local-handler-app;1"
   ].createInstance(Ci.nsILocalHandlerApp);
   localHandlerApp.name = getFileDisplayName(aFile);
   localHandlerApp.executable = aFile;
 
   return localHandlerApp;
 }
 
-// eslint-disable-next-line no-undef
-let gHandlerListItemFragment = MozXULElement.parseXULToFragment(`
-  <richlistitem>
-    <hbox flex="1" equalsize="always">
-      <hbox class="typeContainer" flex="1" align="center">
-        <image class="typeIcon" width="16" height="16"
-               src="moz-icon://goat?size=16"/>
-        <label class="typeDescription" flex="1" crop="end"/>
-      </hbox>
-      <hbox class="actionContainer" flex="1" align="center">
-        <image class="actionIcon" width="16" height="16"/>
-        <label class="actionDescription" flex="1" crop="end"/>
-      </hbox>
-      <hbox class="actionsMenuContainer" flex="1">
-        <menulist class="actionsMenu" flex="1" crop="end" selectedIndex="1">
-          <menupopup/>
-        </menulist>
-      </hbox>
-    </hbox>
-  </richlistitem>
-`);
-
 /**
  * This is associated to <richlistitem> elements in the handlers view.
  */
 class HandlerListItem {
+  static get fragment() {
+    if (!this.hasOwnProperty("_fragment")) {
+      this._fragment = MozXULElement.parseXULToFragment(this.markup);
+    }
+    return document.importNode(this._fragment, true);
+  }
+
+  static get markup() {
+    return `
+    <richlistitem>
+      <hbox flex="1" equalsize="always">
+        <hbox class="typeContainer" flex="1" align="center">
+          <image class="typeIcon" width="16" height="16"
+                 src="moz-icon://goat?size=16"/>
+          <label class="typeDescription" flex="1" crop="end"/>
+        </hbox>
+        <hbox class="actionContainer" flex="1" align="center">
+          <image class="actionIcon" width="16" height="16"/>
+          <label class="actionDescription" flex="1" crop="end"/>
+        </hbox>
+        <hbox class="actionsMenuContainer" flex="1">
+          <menulist class="actionsMenu" flex="1" crop="end" selectedIndex="1">
+            <menupopup/>
+          </menulist>
+        </hbox>
+      </hbox>
+    </richlistitem>
+    `;
+  }
   static forNode(node) {
     return gNodeToObjectMap.get(node);
   }
 
   constructor(handlerInfoWrapper) {
     this.handlerInfoWrapper = handlerInfoWrapper;
   }
 
@@ -3134,17 +3141,17 @@ class HandlerListItem {
         node.setAttribute(name, value);
       } else {
         node.removeAttribute(name);
       }
     }
   }
 
   createNode(list) {
-    list.appendChild(document.importNode(gHandlerListItemFragment, true));
+    list.appendChild(this.constructor.fragment);
     this.node = list.lastChild;
     gNodeToObjectMap.set(this.node, this);
   }
 
   setupNode() {
     this.node
       .querySelector(".actionsMenu")
       .addEventListener("command", event =>
diff --git a/browser/components/search/content/autocomplete-popup.js b/browser/components/search/content/autocomplete-popup.js
--- a/browser/components/search/content/autocomplete-popup.js
+++ b/browser/components/search/content/autocomplete-popup.js
@@ -90,17 +90,17 @@
 
     get oneOffButtons() {
       if (!this._oneOffButtons) {
         this.initialize();
       }
       return this._oneOffButtons;
     }
 
-    get _markup() {
+    static get markup() {
       return `
       <hbox class="search-panel-header search-panel-current-engine">
         <image class="searchbar-engine-image"></image>
         <label class="searchbar-engine-name" flex="1" crop="end" role="presentation"></label>
       </hbox>
       <richlistbox class="autocomplete-richlistbox search-panel-tree" flex="1"></richlistbox>
       <hbox class="search-one-offs"></hbox>
     `;
diff --git a/browser/components/search/content/searchbar.js b/browser/components/search/content/searchbar.js
--- a/browser/components/search/content/searchbar.js
+++ b/browser/components/search/content/searchbar.js
@@ -16,16 +16,35 @@
     static get inheritedAttributes() {
       return {
         ".searchbar-textbox":
           "disabled,disableautocomplete,searchengine,src,newlines",
         ".searchbar-search-button": "addengines",
       };
     }
 
+    static get markup() {
+      return `
+        <stringbundle src="chrome://browser/locale/search.properties"></stringbundle>
+        <hbox class="searchbar-search-button" tooltiptext="&searchIcon.tooltip;">
+          <image class="searchbar-search-icon"></image>
+          <image class="searchbar-search-icon-overlay"></image>
+        </hbox>
+        <html:input class="searchbar-textbox" is="autocomplete-input" type="search" placeholder="&searchInput.placeholder;" autocompletepopup="PopupSearchAutoComplete" autocompletesearch="search-autocomplete" autocompletesearchparam="searchbar-history" maxrows="10" completeselectedindex="true" minresultsforpopup="0"/>
+        <menupopup class="textbox-contextmenu"></menupopup>
+        <hbox class="search-go-container">
+          <image class="search-go-button urlbar-icon" hidden="true" onclick="handleSearchCommand(event);" tooltiptext="&contentSearchSubmit.tooltip;"></image>
+        </hbox>
+      `;
+    }
+
+    static get entities() {
+      return ["chrome://browser/locale/browser.dtd"];
+    }
+
     constructor() {
       super();
 
       this.destroy = this.destroy.bind(this);
       this._setupEventListeners();
       let searchbar = this;
       this.observer = {
         observe(aEngine, aTopic, aVerb) {
@@ -39,43 +58,27 @@
             // Update the popup header and update the display after any modification.
             searchbar._textbox.popup.updateHeader();
             searchbar.updateDisplay();
           }
         },
         QueryInterface: ChromeUtils.generateQI([Ci.nsIObserver]),
       };
 
-      this.content = MozXULElement.parseXULToFragment(
-        `
-        <stringbundle src="chrome://browser/locale/search.properties"></stringbundle>
-        <hbox class="searchbar-search-button" tooltiptext="&searchIcon.tooltip;">
-          <image class="searchbar-search-icon"></image>
-          <image class="searchbar-search-icon-overlay"></image>
-        </hbox>
-        <html:input class="searchbar-textbox" is="autocomplete-input" type="search" placeholder="&searchInput.placeholder;" autocompletepopup="PopupSearchAutoComplete" autocompletesearch="search-autocomplete" autocompletesearchparam="searchbar-history" maxrows="10" completeselectedindex="true" minresultsforpopup="0"/>
-        <menupopup class="textbox-contextmenu"></menupopup>
-        <hbox class="search-go-container">
-          <image class="search-go-button urlbar-icon" hidden="true" onclick="handleSearchCommand(event);" tooltiptext="&contentSearchSubmit.tooltip;"></image>
-        </hbox>
-        `,
-        ["chrome://browser/locale/browser.dtd"]
-      );
-
       this._ignoreFocus = false;
       this._engines = null;
     }
 
     connectedCallback() {
       // Don't initialize if this isn't going to be visible
       if (this.closest("#BrowserToolbarPalette")) {
         return;
       }
 
-      this.appendChild(document.importNode(this.content, true));
+      this.appendChild(this.constructor.fragment);
       this.initializeAttributeInheritance();
 
       // Don't go further if in Customize mode.
       if (this.parentNode.parentNode.localName == "toolbarpaletteitem") {
         return;
       }
 
       this._stringBundle = this.querySelector("stringbundle");
diff --git a/browser/components/translation/content/translation-notification.js b/browser/components/translation/content/translation-notification.js
--- a/browser/components/translation/content/translation-notification.js
+++ b/browser/components/translation/content/translation-notification.js
@@ -1,19 +1,17 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 class MozTranslationNotification extends MozElements.Notification {
-  connectedCallback() {
-    this.appendChild(
-      MozXULElement.parseXULToFragment(
-        `
+  static get markup() {
+    return `
       <hbox anonid="details" align="center" flex="1">
         <image class="translate-infobar-element messageImage"/>
         <panel anonid="welcomePanel" class="translation-welcome-panel" type="arrow" align="start">
           <image class="translation-welcome-logo"/>
           <vbox flex="1" class="translation-welcome-content">
             <description class="translation-welcome-headline" anonid="welcomeHeadline"/>
             <description class="translation-welcome-body" anonid="welcomeBody"/>
             <hbox align="center">
@@ -77,23 +75,28 @@ class MozTranslationNotification extends
             </menuitem>
           </menupopup>
         </button>
       </hbox>
       <toolbarbutton anonid="closeButton" ondblclick="event.stopPropagation();"
                      class="messageCloseButton close-icon tabbable"
                      tooltiptext="&closeNotification.tooltip;"
                      oncommand="this.parentNode.closeCommand();"/>
-    `,
-        [
-          "chrome://global/locale/notification.dtd",
-          "chrome://browser/locale/translation.dtd",
-        ]
-      )
-    );
+    `;
+  }
+
+  static get entities() {
+    return [
+      "chrome://global/locale/notification.dtd",
+      "chrome://browser/locale/translation.dtd",
+    ];
+  }
+
+  connectedCallback() {
+    this.appendChild(this.constructor.fragment);
 
     for (let [propertyName, selector] of [
       ["details", "[anonid=details]"],
       ["messageImage", ".messageImage"],
       ["spacer", "[anonid=spacer]"],
     ]) {
       this[propertyName] = this.querySelector(selector);
     }
diff --git a/browser/extensions/formautofill/content/customElements.js b/browser/extensions/formautofill/content/customElements.js
--- a/browser/extensions/formautofill/content/customElements.js
+++ b/browser/extensions/formautofill/content/customElements.js
@@ -76,36 +76,38 @@
         this._itemBox.setAttribute("size", "small");
       } else {
         this._itemBox.removeAttribute("size");
       }
     }
   }
 
   MozElements.MozAutocompleteProfileListitem = class MozAutocompleteProfileListitem extends MozAutocompleteProfileListitemBase {
-    connectedCallback() {
-      if (this.delayConnectedCallback()) {
-        return;
-      }
-
-      this.textContent = "";
-
-      this.appendChild(
-        MozXULElement.parseXULToFragment(`
+    static get markup() {
+      return `
         <div xmlns="http://www.w3.org/1999/xhtml" class="autofill-item-box">
           <div class="profile-label-col profile-item-col">
             <span class="profile-label-affix"></span>
             <span class="profile-label"></span>
           </div>
           <div class="profile-comment-col profile-item-col">
             <span class="profile-comment"></span>
           </div>
         </div>
-      `)
-      );
+        `;
+    }
+
+    connectedCallback() {
+      if (this.delayConnectedCallback()) {
+        return;
+      }
+
+      this.textContent = "";
+
+      this.appendChild(this.constructor.fragment);
 
       this._itemBox = this.querySelector(".autofill-item-box");
       this._labelAffix = this.querySelector(".profile-label-affix");
       this._label = this.querySelector(".profile-label");
       this._comment = this.querySelector(".profile-comment");
 
       this.initializeAttributeInheritance();
       this._adjustAcItem();
@@ -153,16 +155,25 @@
 
   customElements.define(
     "autocomplete-profile-listitem",
     MozElements.MozAutocompleteProfileListitem,
     { extends: "richlistitem" }
   );
 
   class MozAutocompleteProfileListitemFooter extends MozAutocompleteProfileListitemBase {
+    static get markup() {
+      return `
+        <div xmlns="http://www.w3.org/1999/xhtml" class="autofill-item-box autofill-footer">
+          <div class="autofill-footer-row autofill-warning"></div>
+          <div class="autofill-footer-row autofill-button"></div>
+        </div>
+      `;
+    }
+
     constructor() {
       super();
 
       this.addEventListener("click", event => {
         if (event.button != 0) {
           return;
         }
 
@@ -175,24 +186,17 @@
     }
 
     connectedCallback() {
       if (this.delayConnectedCallback()) {
         return;
       }
 
       this.textContent = "";
-      this.appendChild(
-        MozXULElement.parseXULToFragment(`
-        <div xmlns="http://www.w3.org/1999/xhtml" class="autofill-item-box autofill-footer">
-          <div class="autofill-footer-row autofill-warning"></div>
-          <div class="autofill-footer-row autofill-button"></div>
-        </div>
-      `)
-      );
+      this.appendChild(this.constructor.fragment);
 
       this._itemBox = this.querySelector(".autofill-footer");
       this._optionButton = this.querySelector(".autofill-button");
       this._warningTextBox = this.querySelector(".autofill-warning");
 
       /**
        * A handler for updating warning message once selectedIndex has been changed.
        *
@@ -307,26 +311,28 @@
 
   customElements.define(
     "autocomplete-profile-listitem-footer",
     MozAutocompleteProfileListitemFooter,
     { extends: "richlistitem" }
   );
 
   class MozAutocompleteCreditcardInsecureField extends MozAutocompleteProfileListitemBase {
+    static get markup() {
+      return `
+      <div xmlns="http://www.w3.org/1999/xhtml" class="autofill-insecure-item"></div>
+      `;
+    }
+
     connectedCallback() {
       if (this.delayConnectedCallback()) {
         return;
       }
       this.textContent = "";
-      this.appendChild(
-        MozXULElement.parseXULToFragment(`
-        <div xmlns="http://www.w3.org/1999/xhtml" class="autofill-insecure-item"></div>
-      `)
-      );
+      this.appendChild(this.constructor.fragment);
 
       this._itemBox = this.querySelector(".autofill-insecure-item");
 
       this._adjustAcItem();
     }
 
     set selected(val) {
       // Make this item unselectable since we see this item as a pure message.
@@ -348,16 +354,24 @@
 
   customElements.define(
     "autocomplete-creditcard-insecure-field",
     MozAutocompleteCreditcardInsecureField,
     { extends: "richlistitem" }
   );
 
   class MozAutocompleteProfileListitemClearButton extends MozAutocompleteProfileListitemBase {
+    static get markup() {
+      return `
+        <div xmlns="http://www.w3.org/1999/xhtml" class="autofill-item-box autofill-footer">
+          <div class="autofill-footer-row autofill-button"></div>
+        </div>
+      `;
+    }
+
     constructor() {
       super();
 
       this.addEventListener("click", event => {
         if (event.button != 0) {
           return;
         }
 
@@ -366,23 +380,17 @@
     }
 
     connectedCallback() {
       if (this.delayConnectedCallback()) {
         return;
       }
 
       this.textContent = "";
-      this.appendChild(
-        MozXULElement.parseXULToFragment(`
-        <div xmlns="http://www.w3.org/1999/xhtml" class="autofill-item-box autofill-footer">
-          <div class="autofill-footer-row autofill-button"></div>
-        </div>
-      `)
-      );
+      this.appendChild(this.constructor.fragment);
 
       this._itemBox = this.querySelector(".autofill-item-box");
       this._clearBtn = this.querySelector(".autofill-button");
 
       this._adjustAcItem();
     }
 
     _adjustAcItem() {
diff --git a/toolkit/components/printing/content/printPreviewToolbar.js b/toolkit/components/printing/content/printPreviewToolbar.js
--- a/toolkit/components/printing/content/printPreviewToolbar.js
+++ b/toolkit/components/printing/content/printPreviewToolbar.js
@@ -5,28 +5,18 @@
 
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 customElements.define(
   "printpreview-toolbar",
   class PrintPreviewToolbar extends MozXULElement {
-    constructor() {
-      super();
-      this.disconnectedCallback = this.disconnectedCallback.bind(this);
-    }
-    connectedCallback() {
-      window.addEventListener("unload", this.disconnectedCallback, {
-        once: true,
-      });
-
-      MozXULElement.insertFTLIfNeeded("toolkit/printing/printPreview.ftl");
-      this.appendChild(
-        MozXULElement.parseXULToFragment(`
+    static get markup() {
+      return `
       <button id="print-preview-print" oncommand="this.parentNode.print();" data-l10n-id="printpreview-print"/>
       <button id="print-preview-pageSetup" oncommand="this.parentNode.doPageSetup();" data-l10n-id="printpreview-page-setup"/>
       <vbox align="center" pack="center">
         <label control="print-preview-pageNumber" data-l10n-id="printpreview-page"/>
       </vbox>
       <toolbarbutton id="print-preview-navigateHome" class="print-preview-navigate-button tabbable" oncommand="parentNode.navigate(0, 0, 'home');" data-l10n-id="printpreview-homearrow"/>
       <toolbarbutton id="print-preview-navigatePrevious" class="print-preview-navigate-button tabbable" oncommand="parentNode.navigate(-1, 0, 0);" data-l10n-id="printpreview-previousarrow"/>
       <hbox align="center" pack="center">
@@ -66,18 +56,29 @@ customElements.define(
         <toolbarbutton id="print-preview-portrait-button" checked="true" type="radio" group="orient" class="tabbable" oncommand="parentNode.parentNode.orient('portrait');" data-l10n-id="printpreview-portrait"/>
         <toolbarbutton id="print-preview-landscape-button" type="radio" group="orient" class="tabbable" oncommand="parentNode.parentNode.orient('landscape');" data-l10n-id="printpreview-landscape"/>
       </hbox>
       <toolbarseparator class="toolbarseparator-primary"/>
       <checkbox id="print-preview-simplify" checked="false" disabled="true" oncommand="this.parentNode.simplify();" data-l10n-id="printpreview-simplify-page-checkbox"/>
       <toolbarseparator class="toolbarseparator-primary"/>
       <button id="print-preview-toolbar-close-button" oncommand="PrintUtils.exitPrintPreview();" data-l10n-id="printpreview-close"/>
       <data id="print-preview-custom-scale-prompt-title" data-l10n-id="printpreview-custom-scale-prompt-title"/>
-        `)
-      );
+      `;
+    }
+    constructor() {
+      super();
+      this.disconnectedCallback = this.disconnectedCallback.bind(this);
+    }
+    connectedCallback() {
+      window.addEventListener("unload", this.disconnectedCallback, {
+        once: true,
+      });
+
+      MozXULElement.insertFTLIfNeeded("toolkit/printing/printPreview.ftl");
+      this.appendChild(this.constructor.fragment);
 
       this.mPrintButton = document.getElementById("print-preview-print");
 
       this.mPageSetupButton = document.getElementById(
         "print-preview-pageSetup"
       );
 
       this.mNavigateHomeButton = document.getElementById(
diff --git a/toolkit/content/customElements.js b/toolkit/content/customElements.js
--- a/toolkit/content/customElements.js
+++ b/toolkit/content/customElements.js
@@ -467,16 +467,34 @@
         if (methodName in this) {
           this[methodName](event);
         } else {
           throw new Error("Unrecognized event: " + event.type);
         }
       }
 
       /**
+       * If available, returns the cached fragment.
+       * Otherwise, creates it.
+       */
+      static get fragment() {
+        if (!this.hasOwnProperty("_fragment")) {
+          if (this.markup) {
+            this.constructor._fragment = MozXULElement.parseXULToFragment(
+              this.markup,
+              this.entities
+            );
+          } else {
+            throw new Error("Markup is null");
+          }
+        }
+        return document.importNode(this.constructor._fragment, true);
+      }
+
+      /**
        * Allows eager deterministic construction of XUL elements with XBL attached, by
        * parsing an element tree and returning a DOM fragment to be inserted in the
        * document before any of the inner elements is referenced by JavaScript.
        *
        * This process is required instead of calling the createElement method directly
        * because bindings get attached when:
        *
        * 1. the node gets a layout frame constructed, or
diff --git a/toolkit/content/widgets/autocomplete-popup.js b/toolkit/content/widgets/autocomplete-popup.js
--- a/toolkit/content/widgets/autocomplete-popup.js
+++ b/toolkit/content/widgets/autocomplete-popup.js
@@ -20,17 +20,17 @@
     }
 
     initialize() {
       this.setAttribute("ignorekeys", "true");
       this.setAttribute("level", "top");
       this.setAttribute("consumeoutsideclicks", "never");
 
       this.textContent = "";
-      this.appendChild(MozXULElement.parseXULToFragment(this._markup));
+      this.appendChild(this.constructor.fragment);
 
       /**
        * This is the default number of rows that we give the autocomplete
        * popup when the textbox doesn't have a "maxrows" attribute
        * for us to use.
        */
       this.defaultMaxRows = 6;
 
@@ -103,17 +103,17 @@
 
     get richlistbox() {
       if (!this._richlistbox) {
         this.initialize();
       }
       return this._richlistbox;
     }
 
-    get _markup() {
+    static get markup() {
       return `
       <richlistbox class="autocomplete-richlistbox" flex="1"/>
     `;
     }
 
     /**
      * nsIAutoCompletePopup
      */
diff --git a/toolkit/content/widgets/autocomplete-richlistitem.js b/toolkit/content/widgets/autocomplete-richlistitem.js
--- a/toolkit/content/widgets/autocomplete-richlistitem.js
+++ b/toolkit/content/widgets/autocomplete-richlistitem.js
@@ -57,17 +57,17 @@
     }
 
     connectedCallback() {
       if (this.delayConnectedCallback()) {
         return;
       }
 
       this.textContent = "";
-      this.appendChild(MozXULElement.parseXULToFragment(this._markup));
+      this.appendChild(this.constructor.fragment);
       this.initializeAttributeInheritance();
 
       this._boundaryCutoff = null;
       this._inOverflow = false;
 
       this._adjustAcItem();
     }
 
@@ -78,17 +78,17 @@
         ".ac-title": "selected",
         ".ac-title-text": "selected",
         ".ac-separator": "selected,type",
         ".ac-url": "selected",
         ".ac-url-text": "selected",
       };
     }
 
-    get _markup() {
+    static get markup() {
       return `
       <image class="ac-type-icon"/>
       <image class="ac-site-icon"/>
       <hbox class="ac-title" align="center">
         <description class="ac-text-overflow-container">
           <description class="ac-title-text"/>
         </description>
       </hbox>
@@ -548,17 +548,17 @@
         ".ac-site-icon": "src=image,selected,type",
         ".ac-title-text": "selected",
         ".ac-separator": "selected,type",
         ".ac-url": "selected",
         ".ac-url-text": "selected",
       };
     }
 
-    get _markup() {
+    static get markup() {
       return `
       <image class="ac-type-icon"/>
       <image class="ac-site-icon"/>
       <vbox class="ac-title" align="left">
         <description class="ac-text-overflow-container">
           <description class="ac-title-text"/>
         </description>
       </vbox>
@@ -619,31 +619,31 @@
 
   class MozAutocompleteTwoLineRichlistitem extends MozElements.MozRichlistitem {
     connectedCallback() {
       if (this.delayConnectedCallback()) {
         return;
       }
 
       this.textContent = "";
-      this.appendChild(MozXULElement.parseXULToFragment(this._markup));
+      this.appendChild(this.constructor.fragment);
       this.initializeAttributeInheritance();
       this._adjustAcItem();
     }
 
     static get inheritedAttributes() {
       return {
         // getLabelAt:
         ".line1-label": "text=ac-value",
         // getCommentAt:
         ".line2-label": "text=ac-label",
       };
     }
 
-    get _markup() {
+    static get markup() {
       return `
       <div xmlns="http://www.w3.org/1999/xhtml"
            xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
            class="two-line-wrapper">
         <xul:image class="ac-site-icon"></xul:image>
         <div class="labels-wrapper">
           <div class="label-row line1-label"></div>
           <div class="label-row line2-label"></div>
diff --git a/toolkit/content/widgets/checkbox.js b/toolkit/content/widgets/checkbox.js
--- a/toolkit/content/widgets/checkbox.js
+++ b/toolkit/content/widgets/checkbox.js
@@ -3,16 +3,26 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 // This is loaded into all XUL windows. Wrap in a block to prevent
 // leaking to window scope.
 {
   class MozCheckbox extends MozElements.BaseText {
+    static get markup() {
+      return `
+      <image class="checkbox-check"/>
+      <hbox class="checkbox-label-box" flex="1">
+        <image class="checkbox-icon"/>
+        <label class="checkbox-label" flex="1"/>
+      </hbox>
+      `;
+    }
+
     constructor() {
       super();
 
       // While it would seem we could do this by handling oncommand, we need can't
       // because any external oncommand handlers might get called before ours, and
       // then they would see the incorrect value of checked.
       this.addEventListener("click", event => {
         if (event.button === 0 && !this.disabled) {
@@ -36,33 +46,18 @@
       };
     }
 
     connectedCallback() {
       if (this.delayConnectedCallback()) {
         return;
       }
 
-      if (!MozCheckbox.contentFragment) {
-        let content = `
-        <image class="checkbox-check"/>
-        <hbox class="checkbox-label-box" flex="1">
-          <image class="checkbox-icon"/>
-          <label class="checkbox-label" flex="1"/>
-        </hbox>
-      `;
-        MozCheckbox.contentFragment = MozXULElement.parseXULToFragment(content);
-      }
-
       this.textContent = "";
-      let fragment = this.ownerDocument.importNode(
-        MozCheckbox.contentFragment,
-        true
-      );
-      this.appendChild(fragment);
+      this.appendChild(this.constructor.fragment);
 
       this.initializeAttributeInheritance();
     }
 
     set checked(val) {
       let change = val != (this.getAttribute("checked") == "true");
       if (val) {
         this.setAttribute("checked", "true");
diff --git a/toolkit/content/widgets/findbar.js b/toolkit/content/widgets/findbar.js
--- a/toolkit/content/widgets/findbar.js
+++ b/toolkit/content/widgets/findbar.js
@@ -33,38 +33,19 @@
     ["matchDiacritics", "findbar.matchdiacritics"],
   ]);
   const PREFS_TO_OBSERVE_ALL = new Map([
     ...PREFS_TO_OBSERVE_BOOL,
     ...PREFS_TO_OBSERVE_INT,
   ]);
   const TOPIC_MAC_APP_ACTIVATE = "mac_app_activate";
 
-  class MozFindbar extends XULElement {
-    constructor() {
-      super();
-      MozXULElement.insertFTLIfNeeded("toolkit/main-window/findbar.ftl");
-      this.destroy = this.destroy.bind(this);
-
-      // We have to guard against `this.close` being |null| due to an unknown
-      // issue, which is tracked in bug 957999.
-      this.addEventListener(
-        "keypress",
-        event => {
-          if (event.keyCode == event.DOM_VK_ESCAPE) {
-            if (this.close) {
-              this.close();
-            }
-            event.preventDefault();
-          }
-        },
-        true
-      );
-
-      this.content = MozXULElement.parseXULToFragment(`
+  class MozFindbar extends MozXULElement {
+    static get markup() {
+      return `
       <hbox anonid="findbar-container" class="findbar-container" flex="1" align="center">
         <hbox anonid="findbar-textbox-wrapper" align="stretch">
           <html:input anonid="findbar-textbox" class="findbar-textbox findbar-find-fast" />
           <toolbarbutton anonid="find-previous" class="findbar-find-previous tabbable"
             data-l10n-attrs="tooltiptext" data-l10n-id="findbar-previous"
             oncommand="onFindAgainCommand(true);" disabled="true" />
           <toolbarbutton anonid="find-next" class="findbar-find-next tabbable"
             data-l10n-id="findbar-next" oncommand="onFindAgainCommand(false);" disabled="true" />
@@ -81,26 +62,47 @@
         <label anonid="match-diacritics-status" class="findbar-find-fast" />
         <label anonid="entire-word-status" class="findbar-find-fast" />
         <label anonid="found-matches" class="findbar-find-fast found-matches" hidden="true" />
         <image anonid="find-status-icon" class="findbar-find-fast find-status-icon" />
         <description anonid="find-status" control="findbar-textbox" class="findbar-find-fast findbar-find-status" />
       </hbox>
       <toolbarbutton anonid="find-closebutton" class="findbar-closebutton close-icon"
         data-l10n-id="findbar-find-button-close" oncommand="close();" />
-    `);
+      `;
+    }
+
+    constructor() {
+      super();
+      MozXULElement.insertFTLIfNeeded("toolkit/main-window/findbar.ftl");
+      this.destroy = this.destroy.bind(this);
+
+      // We have to guard against `this.close` being |null| due to an unknown
+      // issue, which is tracked in bug 957999.
+      this.addEventListener(
+        "keypress",
+        event => {
+          if (event.keyCode == event.DOM_VK_ESCAPE) {
+            if (this.close) {
+              this.close();
+            }
+            event.preventDefault();
+          }
+        },
+        true
+      );
     }
 
     connectedCallback() {
       // Hide the findbar immediately without animation. This prevents a flicker in the case where
       // we'll never be shown (i.e. adopting a tab that has a previously-opened-but-now-closed
       // findbar into a new window).
       this.setAttribute("noanim", "true");
       this.hidden = true;
-      this.appendChild(document.importNode(this.content, true));
+      this.appendChild(this.constructor.fragment);
 
       /**
        * Please keep in sync with toolkit/modules/FindBarContent.jsm
        */
       this.FIND_NORMAL = 0;
 
       this.FIND_TYPEAHEAD = 1;
 
diff --git a/toolkit/content/widgets/notificationbox.js b/toolkit/content/widgets/notificationbox.js
--- a/toolkit/content/widgets/notificationbox.js
+++ b/toolkit/content/widgets/notificationbox.js
@@ -343,41 +343,44 @@
     PRIORITY_WARNING_MEDIUM: 5,
     PRIORITY_WARNING_HIGH: 6,
     PRIORITY_CRITICAL_LOW: 7,
     PRIORITY_CRITICAL_MEDIUM: 8,
     PRIORITY_CRITICAL_HIGH: 9,
   });
 
   MozElements.Notification = class Notification extends MozXULElement {
-    constructor() {
-      super();
-      this.persistence = 0;
-      this.priority = 0;
-      this.timeout = 0;
-    }
-
-    connectedCallback() {
-      this.appendChild(
-        MozXULElement.parseXULToFragment(
-          `
+    static get markup() {
+      return `
       <hbox class="messageDetails" align="center" flex="1"
             oncommand="this.parentNode._doButtonCommand(event);">
         <image class="messageImage"/>
         <description class="messageText" flex="1"/>
         <spacer flex="1"/>
       </hbox>
       <toolbarbutton ondblclick="event.stopPropagation();"
                      class="messageCloseButton close-icon tabbable"
                      tooltiptext="&closeNotification.tooltip;"
                      oncommand="this.parentNode.dismiss();"/>
-    `,
-          ["chrome://global/locale/notification.dtd"]
-        )
-      );
+      `;
+    }
+
+    static get entities() {
+      return ["chrome://global/locale/notification.dtd"];
+    }
+
+    constructor() {
+      super();
+      this.persistence = 0;
+      this.priority = 0;
+      this.timeout = 0;
+    }
+
+    connectedCallback() {
+      this.appendChild(this.constructor.fragment);
 
       for (let [propertyName, selector] of [
         ["messageDetails", ".messageDetails"],
         ["messageImage", ".messageImage"],
         ["messageText", ".messageText"],
         ["spacer", "spacer"],
       ]) {
         this[propertyName] = this.querySelector(selector);
diff --git a/toolkit/content/widgets/popupnotification.js b/toolkit/content/widgets/popupnotification.js
--- a/toolkit/content/widgets/popupnotification.js
+++ b/toolkit/content/widgets/popupnotification.js
@@ -59,24 +59,18 @@
         this.checkbox.hidden = true;
         // Reset checked state to avoid wrong using of previous value.
         this.checkbox.checked = false;
       }
 
       this.hidden = false;
     }
 
-    slotContents() {
-      if (this._hasSlotted) {
-        return;
-      }
-      this._hasSlotted = true;
-      this.appendChild(
-        MozXULElement.parseXULToFragment(
-          `
+    static get markup() {
+      return `
       <hbox class="popup-notification-header-container"></hbox>
       <hbox align="start" class="popup-notification-body-container">
         <image class="popup-notification-icon"/>
         <vbox flex="1" pack="start" class="popup-notification-body">
           <hbox align="start">
             <vbox flex="1">
               <label class="popup-notification-origin header" crop="center"></label>
               <!-- These need to be on the same line to avoid creating
@@ -96,20 +90,29 @@
         <button class="popup-notification-button popup-notification-secondary-button"></button>
         <toolbarseparator></toolbarseparator>
         <button type="menu" class="popup-notification-button popup-notification-dropmarker" aria-label="&moreActionsButton.accessibleLabel;">
           <menupopup position="after_end" aria-label="&moreActionsButton.accessibleLabel;">
           </menupopup>
         </button>
         <button class="popup-notification-button popup-notification-primary-button" label="&defaultButton.label;" accesskey="&defaultButton.accesskey;"></button>
       </hbox>
-    `,
-          ["chrome://global/locale/notification.dtd"]
-        )
-      );
+      `;
+    }
+
+    static get entities() {
+      return ["chrome://global/locale/notification.dtd"];
+    }
+
+    slotContents() {
+      if (this._hasSlotted) {
+        return;
+      }
+      this._hasSlotted = true;
+      this.appendChild(this.constructor.fragment);
 
       this.button = this.querySelector(".popup-notification-primary-button");
       this.secondaryButton = this.querySelector(
         ".popup-notification-secondary-button"
       );
       this.checkbox = this.querySelector(".popup-notification-checkbox");
       this.closebutton = this.querySelector(".popup-notification-closebutton");
       this.menubutton = this.querySelector(".popup-notification-dropmarker");
diff --git a/toolkit/content/widgets/radio.js b/toolkit/content/widgets/radio.js
--- a/toolkit/content/widgets/radio.js
+++ b/toolkit/content/widgets/radio.js
@@ -461,31 +461,27 @@
 
   MozXULElement.implementCustomInterface(MozRadiogroup, [
     Ci.nsIDOMXULSelectControlElement,
     Ci.nsIDOMXULRadioGroupElement,
   ]);
 
   customElements.define("radiogroup", MozRadiogroup);
 
-  let gRadioFrag = null;
-  function getRadioFragment() {
-    if (!gRadioFrag) {
-      gRadioFrag = MozXULElement.parseXULToFragment(`
-    <image class="radio-check"></image>
-    <hbox class="radio-label-box" align="center" flex="1">
-      <image class="radio-icon"></image>
-      <label class="radio-label" flex="1"></label>
-    </hbox>
-    `);
+  class MozRadio extends MozElements.BaseText {
+    static get markup() {
+      return `
+      <image class="radio-check"></image>
+      <hbox class="radio-label-box" align="center" flex="1">
+        <image class="radio-icon"></image>
+        <label class="radio-label" flex="1"></label>
+      </hbox>
+      `;
     }
-    return document.importNode(gRadioFrag, true);
-  }
 
-  class MozRadio extends MozElements.BaseText {
     static get inheritedAttributes() {
       return {
         ".radio-check": "disabled,selected",
         ".radio-label": "text=label,accesskey,crop",
         ".radio-icon": "src",
       };
     }
 
@@ -508,17 +504,17 @@
       if (this.delayConnectedCallback()) {
         return;
       }
 
       if (!this.connectedOnce) {
         this.connectedOnce = true;
         // If the caller didn't provide custom content then append the default:
         if (!this.firstElementChild) {
-          this.appendChild(getRadioFragment());
+          this.appendChild(this.constructor.fragment);
           this.initializeAttributeInheritance();
         }
       }
 
       var control = (this._control = this.control);
       if (control) {
         control.radioAttached(this);
       }
diff --git a/toolkit/content/widgets/search-textbox.js b/toolkit/content/widgets/search-textbox.js
--- a/toolkit/content/widgets/search-textbox.js
+++ b/toolkit/content/widgets/search-textbox.js
@@ -56,16 +56,27 @@
         ".textbox-input":
           "value,maxlength,disabled,size,readonly,placeholder,tabindex,accesskey,mozactionhint,spellcheck",
         ".textbox-search-icon":
           "src=image,label=searchbuttonlabel,searchbutton,disabled",
         ".textbox-search-clear": "disabled",
       };
     }
 
+    static get markup() {
+      // TODO: Bug 1534799 - Convert string to Fluent and use manual DOM construction
+      return `
+      <image class="textbox-search-clear" label="&searchTextBox.clear.label;"/>
+      `;
+    }
+
+    static get entities() {
+      return ["chrome://global/locale/textcontext.dtd"];
+    }
+
     connectedCallback() {
       if (this.delayConnectedCallback()) {
         return;
       }
       this.textContent = "";
 
       const textboxSign = document.createXULElement("image");
       textboxSign.className = "textbox-search-sign";
@@ -77,23 +88,17 @@
       input.addEventListener("blur", this);
 
       const searchBtn = (this._searchButtonIcon = document.createXULElement(
         "image"
       ));
       searchBtn.className = "textbox-search-icon";
       searchBtn.addEventListener("click", e => this._iconClick(e));
 
-      // TODO: Bug 1534799 - Convert string to Fluent and use manual DOM construction
-      let clearBtn = MozXULElement.parseXULToFragment(
-        `
-      <image class="textbox-search-clear" label="&searchTextBox.clear.label;"/>
-    `,
-        ["chrome://global/locale/textcontext.dtd"]
-      );
+      let clearBtn = this.constructor.fragment;
       clearBtn = this._searchClearIcon = clearBtn.querySelector(
         ".textbox-search-clear"
       );
       clearBtn.addEventListener("click", () => this._clearSearch());
 
       const deck = (this._searchIcons = document.createXULElement("deck"));
       deck.className = "textbox-search-icons";
       deck.append(searchBtn, clearBtn);
diff --git a/toolkit/content/widgets/tabbox.js b/toolkit/content/widgets/tabbox.js
--- a/toolkit/content/widgets/tabbox.js
+++ b/toolkit/content/widgets/tabbox.js
@@ -267,16 +267,25 @@
   }
 
   MozXULElement.implementCustomInterface(MozTabpanels, [
     Ci.nsIDOMXULRelatedElement,
   ]);
   customElements.define("tabpanels", MozTabpanels);
 
   MozElements.MozTab = class MozTab extends MozElements.BaseText {
+    static get markup() {
+      return `
+        <hbox class="tab-middle box-inherit" flex="1">
+          <image class="tab-icon" role="presentation"></image>
+          <label class="tab-text" flex="1" role="presentation"></label>
+        </hbox>
+      `;
+    }
+
     constructor() {
       super();
 
       this.addEventListener("mousedown", this);
       this.addEventListener("keydown", this);
 
       this.arrowKeysShouldWrap = AppConstants.platform == "macosx";
     }
@@ -284,32 +293,20 @@
     static get inheritedAttributes() {
       return {
         ".tab-middle": "align,dir,pack,orient,selected,visuallyselected",
         ".tab-icon": "validate,src=image",
         ".tab-text": "value=label,accesskey,crop,disabled",
       };
     }
 
-    get fragment() {
-      if (!this._fragment) {
-        this._fragment = MozXULElement.parseXULToFragment(`
-        <hbox class="tab-middle box-inherit" flex="1">
-          <image class="tab-icon" role="presentation"></image>
-          <label class="tab-text" flex="1" role="presentation"></label>
-        </hbox>
-    `);
-      }
-      return this.ownerDocument.importNode(this._fragment, true);
-    }
-
     connectedCallback() {
       if (!this._initialized) {
         this.textContent = "";
-        this.appendChild(this.fragment);
+        this.appendChild(this.constructor.fragment);
         this.initializeAttributeInheritance();
         this._initialized = true;
       }
     }
 
     on_mousedown(event) {
       if (event.button != 0 || this.disabled) {
         return;
diff --git a/toolkit/content/widgets/tree.js b/toolkit/content/widgets/tree.js
--- a/toolkit/content/widgets/tree.js
+++ b/toolkit/content/widgets/tree.js
@@ -193,16 +193,29 @@
         this.parentNode._ensureColumnOrder();
       }
     }
   }
 
   customElements.define("treechildren", MozTreeChildren);
 
   class MozTreecolPicker extends MozElements.BaseControl {
+    static get entities() {
+      return ["chrome://global/locale/tree.dtd"];
+    }
+
+    static get markup() {
+      return `
+      <image class="tree-columnpicker-icon"></image>
+      <menupopup anonid="popup">
+        <menuseparator anonid="menuseparator"></menuseparator>
+        <menuitem anonid="menuitem" label="&restoreColumnOrder.label;"></menuitem>
+      </menupopup>
+      `;
+    }
     constructor() {
       super();
 
       this.addEventListener("command", event => {
         if (event.originalTarget == this) {
           var popup = this.querySelector('[anonid="popup"]');
           this.buildPopup(popup);
           popup.openPopup(this, "after_end");
@@ -230,28 +243,17 @@
     }
 
     connectedCallback() {
       if (this.delayConnectedCallback()) {
         return;
       }
 
       this.textContent = "";
-      this.appendChild(
-        MozXULElement.parseXULToFragment(
-          `
-        <image class="tree-columnpicker-icon"></image>
-        <menupopup anonid="popup">
-          <menuseparator anonid="menuseparator"></menuseparator>
-          <menuitem anonid="menuitem" label="&restoreColumnOrder.label;"></menuitem>
-        </menupopup>
-      `,
-          ["chrome://global/locale/tree.dtd"]
-        )
-      );
+      this.appendChild(this.constructor.fragment);
     }
 
     buildPopup(aPopup) {
       // We no longer cache the picker content, remove the old content related to
       // the cols - menuitem and separator should stay.
       aPopup.querySelectorAll("[colindex]").forEach(e => {
         e.remove();
       });
@@ -303,21 +305,21 @@
   class MozTreecol extends MozElements.BaseControl {
     static get inheritedAttributes() {
       return {
         ".treecol-sortdirection": "sortdirection,hidden=hideheader",
         ".treecol-text": "value=label,crop",
       };
     }
 
-    get content() {
-      return MozXULElement.parseXULToFragment(`
+    static get markup() {
+      return `
         <label class="treecol-text" flex="1" crop="right"></label>
         <image class="treecol-sortdirection"></image>
-    `);
+      `;
     }
 
     constructor() {
       super();
 
       this.addEventListener("mousedown", event => {
         if (event.button != 0) {
           return;
@@ -368,17 +370,17 @@
     }
 
     connectedCallback() {
       if (this.delayConnectedCallback()) {
         return;
       }
 
       this.textContent = "";
-      this.appendChild(this.content);
+      this.appendChild(this.constructor.fragment);
       this.initializeAttributeInheritance();
       if (this.hasAttribute("ordinal")) {
         this.style.MozBoxOrdinalGroup = this.getAttribute("ordinal");
       }
     }
 
     set ordinal(val) {
       this.style.MozBoxOrdinalGroup = val;
@@ -554,29 +556,31 @@
 
   class MozTreecols extends MozElements.BaseControl {
     static get inheritedAttributes() {
       return {
         treecolpicker: "tooltiptext=pickertooltiptext",
       };
     }
 
+    static get markup() {
+      return `
+      <treecolpicker class="treecol-image" fixed="true"></treecolpicker>
+      `;
+    }
+
     connectedCallback() {
       if (this.delayConnectedCallback()) {
         return;
       }
 
       this.setAttribute("slot", "treecols");
 
       if (!this.querySelector("treecolpicker")) {
-        this.appendChild(
-          MozXULElement.parseXULToFragment(`
-          <treecolpicker class="treecol-image" fixed="true"></treecolpicker>
-        `)
-        );
+        this.appendChild(this.constructor.fragment);
         this.initializeAttributeInheritance();
       }
 
       // Set resizeafter="farthest" on the splitters if nothing else has been
       // specified.
       for (let splitter of this.getElementsByTagName("splitter")) {
         if (!splitter.hasAttribute("resizeafter")) {
           splitter.setAttribute("resizeafter", "farthest");
@@ -585,57 +589,62 @@
     }
   }
 
   customElements.define("treecols", MozTreecols);
 
   class MozTree extends MozElements.BaseControlMixin(
     MozElements.MozElementMixin(XULTreeElement)
   ) {
+    static get markup() {
+      return `
+      <html:link rel="stylesheet" href="chrome://global/content/widgets.css" />
+      <html:slot name="treecols"></html:slot>
+      <stack class="tree-stack" flex="1">
+        <hbox class="tree-rows" flex="1">
+          <hbox flex="1" class="tree-bodybox">
+            <html:slot name="treechildren"></html:slot>
+          </hbox>
+          <scrollbar height="0" minwidth="0" minheight="0" orient="vertical"
+                     class="hidevscroll-scrollbar scrollbar-topmost"
+                     ></scrollbar>
+        </hbox>
+        <html:input class="tree-input" type="text" hidden="true"/>
+      </stack>
+      <hbox class="hidehscroll-box">
+        <scrollbar orient="horizontal" flex="1" increment="16" class="scrollbar-topmost" ></scrollbar>
+        <scrollcorner class="hidevscroll-scrollcorner"></scrollcorner>
+      </hbox>
+      `;
+    }
+
     constructor() {
       super();
 
       // These enumerated constants are used as the first argument to
       // _ensureColumnOrder to specify what column ordering should be used.
       this.CURRENT_ORDER = 0;
       this.NATURAL_ORDER = 1; // The original order, which is the DOM ordering
 
       this.attachShadow({ mode: "open" });
-      let fragment = MozXULElement.parseXULToFragment(`
-        <html:link rel="stylesheet" href="chrome://global/content/widgets.css" />
-        <html:slot name="treecols"></html:slot>
-        <stack class="tree-stack" flex="1">
-          <hbox class="tree-rows" flex="1">
-            <hbox flex="1" class="tree-bodybox">
-              <html:slot name="treechildren"></html:slot>
-            </hbox>
-            <scrollbar height="0" minwidth="0" minheight="0" orient="vertical"
-                       class="hidevscroll-scrollbar scrollbar-topmost"
-                       ></scrollbar>
-          </hbox>
-          <html:input class="tree-input" type="text" hidden="true"/>
-        </stack>
-        <hbox class="hidehscroll-box">
-          <scrollbar orient="horizontal" flex="1" increment="16" class="scrollbar-topmost" ></scrollbar>
-          <scrollcorner class="hidevscroll-scrollcorner"></scrollcorner>
-        </hbox>
-      `);
-      let handledElements = fragment.querySelectorAll("scrollbar,scrollcorner");
+      let handledElements = this.constructor.fragment.querySelectorAll(
+        "scrollbar,scrollcorner"
+      );
       let stopAndPrevent = e => {
         e.stopPropagation();
         e.preventDefault();
       };
       let stopProp = e => e.stopPropagation();
       for (let el of handledElements) {
         el.addEventListener("click", stopAndPrevent);
         el.addEventListener("contextmenu", stopAndPrevent);
         el.addEventListener("dblclick", stopProp);
         el.addEventListener("command", stopProp);
       }
-      this.shadowRoot.appendChild(fragment);
+      this.shadowRoot.appendChild(this.constructor.fragment);
     }
 
     static get inheritedAttributes() {
       return {
         ".hidehscroll-box": "collapsed=hidehscroll",
         ".hidevscroll-scrollbar": "collapsed=hidevscroll",
         ".hidevscroll-scrollcorner": "collapsed=hidevscroll",
       };
diff --git a/toolkit/content/widgets/wizard.js b/toolkit/content/widgets/wizard.js
--- a/toolkit/content/widgets/wizard.js
+++ b/toolkit/content/widgets/wizard.js
@@ -492,53 +492,21 @@
       this.parentNode._accessMethod = "random";
       return val;
     }
   }
 
   customElements.define("wizardpage", MozWizardPage);
 
   class MozWizardButtons extends MozXULElement {
-    connectedCallback() {
-      this._wizard = this.getRootNode().host;
-
-      this.textContent = "";
-      this.appendChild(MozXULElement.parseXULToFragment(this._markup, kDTDs));
-
-      this._wizardButtonDeck = this.querySelector(".wizard-next-deck");
-
-      this.initializeAttributeInheritance();
-
-      const listeners = [
-        ["back", () => this._wizard.rewind()],
-        ["next", () => this._wizard.advance()],
-        ["finish", () => this._wizard.advance()],
-        ["cancel", () => this._wizard.cancel()],
-        ["extra1", () => this._wizard.extra1()],
-        ["extra2", () => this._wizard.extra2()],
-      ];
-      for (let [name, listener] of listeners) {
-        let btn = this.getButton(name);
-        if (btn) {
-          btn.addEventListener("command", listener);
-        }
-      }
-
-      this._wizard._onWizardButtonsReady();
+    static get entities() {
+      return kDTDs;
     }
 
-    static get inheritedAttributes() {
-      return AppConstants.platform == "macosx"
-        ? {
-            "[dlgtype='next']": "hidden=lastpage",
-          }
-        : null;
-    }
-
-    get _markup() {
+    static get markup() {
       if (AppConstants.platform == "macosx") {
         return `
         <vbox flex="1">
           <hbox class="wizard-buttons-btm">
             <button class="wizard-button" dlgtype="extra1" hidden="true"/>
             <button class="wizard-button" dlgtype="extra2" hidden="true"/>
             <button label="&button-cancel-mac.label;"
                     class="wizard-button" dlgtype="cancel"/>
@@ -606,16 +574,51 @@
         <hbox class="wizard-buttons-box-2">
           <button class="wizard-button" dlgtype="extra1" hidden="true"/>
           <button class="wizard-button" dlgtype="extra2" hidden="true"/>
           <spacer flex="1" anonid="spacer"/>
           ${buttons}
         </hbox>
       </vbox>`;
     }
+    connectedCallback() {
+      this._wizard = this.getRootNode().host;
+
+      this.textContent = "";
+      this.appendChild(this.constructor.fragment);
+
+      this._wizardButtonDeck = this.querySelector(".wizard-next-deck");
+
+      this.initializeAttributeInheritance();
+
+      const listeners = [
+        ["back", () => this._wizard.rewind()],
+        ["next", () => this._wizard.advance()],
+        ["finish", () => this._wizard.advance()],
+        ["cancel", () => this._wizard.cancel()],
+        ["extra1", () => this._wizard.extra1()],
+        ["extra2", () => this._wizard.extra2()],
+      ];
+      for (let [name, listener] of listeners) {
+        let btn = this.getButton(name);
+        if (btn) {
+          btn.addEventListener("command", listener);
+        }
+      }
+
+      this._wizard._onWizardButtonsReady();
+    }
+
+    static get inheritedAttributes() {
+      return AppConstants.platform == "macosx"
+        ? {
+            "[dlgtype='next']": "hidden=lastpage",
+          }
+        : null;
+    }
 
     onPageChange() {
       if (AppConstants.platform == "macosx") {
         this.getButton("finish").hidden = !(
           this.getAttribute("lastpage") == "true"
         );
       } else if (this.getAttribute("lastpage") == "true") {
         this._wizardButtonDeck.setAttribute("selectedIndex", 0);
diff --git a/toolkit/mozapps/extensions/content/aboutaddons.js b/toolkit/mozapps/extensions/content/aboutaddons.js
--- a/toolkit/mozapps/extensions/content/aboutaddons.js
+++ b/toolkit/mozapps/extensions/content/aboutaddons.js
@@ -1771,30 +1771,41 @@ class FiveStarRating extends HTMLElement
     document.l10n.setAttributes(this, "five-star-rating", {
       rating: this.rating,
     });
   }
 }
 customElements.define("five-star-rating", FiveStarRating);
 
 class ContentSelectDropdown extends HTMLElement {
+  static get markup() {
+    return `
+    <menulist popuponly="true" id="ContentSelectDropdown" hidden="true">
+      <menupopup rolluponmousewheel="true" activateontab="true"
+                 position="after_start" level="parent"/>
+    </menulist>
+    `;
+  }
+
+  static get fragment() {
+    if (!this.constructor.hasOwnProperty("_fragment")) {
+      this.constructor._fragment = MozXULElement.parseXULToFragment(
+        this.constructor.markup
+      );
+    }
+    return document.importNode(this.constructor._fragment, true);
+  }
+
   connectedCallback() {
     if (this.children.length) {
       return;
     }
     // This creates the menulist and menupopup elements needed for the inline
     // browser to support <select> elements and context menus.
-    this.appendChild(
-      MozXULElement.parseXULToFragment(`
-      <menulist popuponly="true" id="ContentSelectDropdown" hidden="true">
-        <menupopup rolluponmousewheel="true" activateontab="true"
-                   position="after_start" level="parent"/>
-      </menulist>
-    `)
-    );
+    this.appendChild(this.constructor.fragment);
   }
 }
 customElements.define("content-select-dropdown", ContentSelectDropdown);
 
 class ProxyContextMenu extends HTMLElement {
   openPopupAtScreen(...args) {
     // prettier-ignore
     const parentContextMenuPopup =
diff --git a/toolkit/mozapps/extensions/content/abuse-report-frame.js b/toolkit/mozapps/extensions/content/abuse-report-frame.js
--- a/toolkit/mozapps/extensions/content/abuse-report-frame.js
+++ b/toolkit/mozapps/extensions/content/abuse-report-frame.js
@@ -14,37 +14,39 @@
   const ABUSE_REPORT_FRAME_URL =
     "chrome://mozapps/content/extensions/abuse-report-frame.html";
   const fm = Services.focus;
   const { AbuseReporter } = ChromeUtils.import(
     "resource://gre/modules/AbuseReporter.jsm"
   );
 
   class AddonAbuseReportsXULFrame extends MozXULElement {
+    static get markup() {
+      return `
+      <browser id="abuse-report-xulframe-overlay-inner"
+        type="content"
+        disablehistory="true"
+        transparent="true"
+        flex="1">
+      </browser>
+      `;
+    }
+
     constructor() {
       super();
       this.report = null;
       // Keep track if the loadURI has already been called on the
       // browser element.
       this.browserLoadURI = false;
     }
 
     connectedCallback() {
       this.textContent = "";
 
-      const content = MozXULElement.parseXULToFragment(`
-        <browser id="abuse-report-xulframe-overlay-inner"
-          type="content"
-          disablehistory="true"
-          transparent="true"
-          flex="1">
-        </browser>
-      `);
-
-      this.appendChild(content);
+      this.appendChild(this.constructor.fragment);
 
       const browser = this.querySelector("browser");
       this.promiseBrowserLoaded = new Promise(resolve => {
         browser.addEventListener("load", () => resolve(browser), {
           once: true,
         });
       });
 
diff --git a/toolkit/mozapps/extensions/content/extensions.js b/toolkit/mozapps/extensions/content/extensions.js
--- a/toolkit/mozapps/extensions/content/extensions.js
+++ b/toolkit/mozapps/extensions/content/extensions.js
@@ -799,28 +799,30 @@ var gCategories = {
   },
 
   shutdown() {
     AddonManager.removeTypeListener(this);
   },
 
   _defineCustomElement() {
     class MozCategory extends MozElements.MozRichlistitem {
+      static get markup() {
+        return `
+        <image class="category-icon"/>
+        <label class="category-name" crop="end" flex="1"/>
+        <label class="category-badge"/>
+        `;
+      }
+
       connectedCallback() {
         if (this.delayConnectedCallback()) {
           return;
         }
         this.textContent = "";
-        this.appendChild(
-          MozXULElement.parseXULToFragment(`
-          <image class="category-icon"/>
-          <label class="category-name" crop="end" flex="1"/>
-          <label class="category-badge"/>
-        `)
-        );
+        this.appendChild(this.constructor.fragment);
         this.initializeAttributeInheritance();
 
         if (!this.hasAttribute("count")) {
           this.setAttribute("count", 0);
         }
       }
 
       static get inheritedAttributes() {
diff --git a/toolkit/mozapps/handling/content/dialog.js b/toolkit/mozapps/handling/content/dialog.js
--- a/toolkit/mozapps/handling/content/dialog.js
+++ b/toolkit/mozapps/handling/content/dialog.js
@@ -32,29 +32,31 @@ const { EnableDelayHelper } = ChromeUtil
   "resource://gre/modules/SharedPromptUtils.jsm"
 );
 const { Services } = ChromeUtils.import("resource://gre/modules/Services.jsm");
 const { PrivateBrowsingUtils } = ChromeUtils.import(
   "resource://gre/modules/PrivateBrowsingUtils.jsm"
 );
 
 class MozHandler extends window.MozElements.MozRichlistitem {
+  static get markup() {
+    return `
+    <vbox pack="center">
+      <image height="32" width="32"/>
+    </vbox>
+    <vbox flex="1">
+      <label class="name"/>
+      <label class="description"/>
+    </vbox>
+    `;
+  }
+
   connectedCallback() {
     this.textContent = "";
-    this.appendChild(
-      window.MozXULElement.parseXULToFragment(`
-      <vbox pack="center">
-        <image height="32" width="32"/>
-      </vbox>
-      <vbox flex="1">
-        <label class="name"/>
-        <label class="description"/>
-      </vbox>
-    `)
-    );
+    this.appendChild(this.constructor.fragment);
     this.initializeAttributeInheritance();
   }
 
   static get inheritedAttributes() {
     return {
       image: "src=image,disabled",
       ".name": "value=name,disabled",
       ".description": "value=description,disabled",

