# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  412a7ed234f3c5848578b1074e74125407d0236c

diff --git a/testing/mach_commands.py b/testing/mach_commands.py
--- a/testing/mach_commands.py
+++ b/testing/mach_commands.py
@@ -84,17 +84,17 @@ def get_test_parser():
     return parser
 
 
 @CommandProvider
 class AddTest(MachCommandBase):
     @Command('addtest', category='testing',
              description='Generate tests based on templates')
     @CommandArgument('-t', '--type',
-                     choices=['plain', 'chrome', 'browser'],
+                     choices=['mochitest-plain', 'mochitest-chrome', 'mochitest-browser'],
                      help='type for the test (currently only mochitests are supported).'
                           'If you pass a `test` argument this will be determined'
                           'based on the filename and the folder it is in')
     @CommandArgument('-d', '--doc',
                      choices=['js', 'html', 'xhtml', 'xul'],
                      help='Document type for the test (if applicable).'
                           'If you pass a `test` argument this will be determined'
                           'based on the filename.')
@@ -114,28 +114,28 @@ class AddTest(MachCommandBase):
             dir = os.path.dirname(test)
             filename = os.path.basename(test)
 
             if doc is None:  # Only infer the doc from the filename if it's not passed in
                 doc = os.path.splitext(filename)[1].strip(".")
 
             if type is None:  # Only infer the type from the filename if it's not passed in
                 if filename.startswith("browser_"):
-                    type = "browser"
+                    type = "mochitest-browser"
                 elif filename.startswith("test_"):
-                    is_chrome = os.path.isfile(os.path.join(dir, "chrome.ini"))
-                    is_plain = os.path.isfile(os.path.join(dir, "mochitest.ini"))
-                    if is_chrome and is_plain:
-                        print("Error: directory contains both a chrome.ini and mochitest.ini. "
-                              "Please set `chrome` or `plain` with the --type argument.")
+                    is_mochitest_chrome = os.path.isfile(os.path.join(dir, "chrome.ini"))
+                    is_mochitest_plain = os.path.isfile(os.path.join(dir, "mochitest.ini"))
+                    if is_mochitest_chrome and is_mochitest_plain:
+                        print("Error: directory contains both a mochitest_chrome.ini and mochitest.ini. "
+                              "Please set `mochitest_chrome` or `mochitest-plain` with the --type argument.")
                         return 1
-                    if is_chrome:
-                        type = "chrome"
-                    elif is_plain:
-                        type = "plain"
+                    if is_mochitest_chrome:
+                        type = "mochitest_chrome"
+                    elif is_mochitest_plain:
+                        type = "mochitest-plain"
         else:
             test = None
             if doc is None:  # Provide a default if no test was passed in
                 doc = "html"
 
         if not type:
             print("Error: type not specified, and couldn't be detected from the test path.")
             return 1
@@ -149,17 +149,17 @@ class AddTest(MachCommandBase):
 
         if content is None:
             print("Error: no template file")
             return 1
 
         if (test):
             print("Adding a test of type `{}` and doc type `{}`".format(type, doc))
             # write the test to a file and attempt to insert into the appropriate manifest
-            guessed_ini = "mochitest.ini" if type == "plain" else "{}.ini".format(type)
+            guessed_ini = "mochitest.ini" if type == "mochitest-plain" else "{}.ini".format(type)
             with open(test, "w") as f:
                 f.write(content)
 
             manifest_file = os.path.join(os.path.dirname(test), guessed_ini)
             filename = os.path.basename(test)
 
             if os.path.isfile(manifest_file):
                 self.add_test_to_manifest(manifest_file, filename)
@@ -199,23 +199,23 @@ class AddTest(MachCommandBase):
         with open(manifest_file, "w") as f:
             f.write("".join(contents))
 
     def get_template_contents(self, type, doc):
         mochitest_templates = os.path.abspath(
             os.path.join(os.path.dirname(__file__), 'mochitest', 'static')
         )
         template_file_name = None
-        if type == "browser":
+        if type == "mochitest-browser":
             template_file_name = 'browser.template.txt'
 
-        if type == "plain":
+        if type == "mochitest-plain":
             template_file_name = 'plain{}.template.txt'.format(doc)
 
-        if type == "chrome":
+        if type == "mochitest-chrome":
             template_file_name = 'chrome{}.template.txt'.format(doc)
 
         if template_file_name is None:
             return None
 
         template_file = os.path.join(mochitest_templates, template_file_name)
         if not os.path.isfile(template_file):
             return None
