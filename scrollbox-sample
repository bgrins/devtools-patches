# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  224715760a637bc37c14794839468a954f1f2695
toolkit/content/xul.css.orig

diff --git a/dom/tests/mochitest/webcomponents/test_xul_custom_element.xul b/dom/tests/mochitest/webcomponents/test_xul_custom_element.xul
--- a/dom/tests/mochitest/webcomponents/test_xul_custom_element.xul
+++ b/dom/tests/mochitest/webcomponents/test_xul_custom_element.xul
@@ -27,17 +27,18 @@
       range.selectNodeContents(doc.firstChild);
       return range.extractContents();
     }
 
     class TestCustomElement extends XULElement {
       constructor() {
         super();
 
-        this.attachShadow({mode: "open"});
+        let root = this.attachShadow({mode: "open"});
+        root.appendChild(document.createElementNS("http://www.w3.org/1999/xhtml", "slot"));
       }
 
       connectedCallback() {
         this.textContent = "foo";
       }
     }
 
     customElements.define("test-custom-element", TestCustomElement);
@@ -363,25 +364,25 @@
       throwForInvalidBuiltInName();
       extendingWithoutDashCustomElement();
 
       nonCustomElementCreate();
 
       testSetElementCreationballbackInDocument();
       setElementCreationCallbackCreate();
 
-      SimpleTest.finish();
+      //SimpleTest.finish();
     }
   ]]>
   </script>
 
   <body xmlns="http://www.w3.org/1999/xhtml">
     <p id="display"></p>
     <div id="content" style="display: none">
-      <test-custom-element id="element4" xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"/>
+      <test-custom-element id="element4" xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">slotted content</test-custom-element>
       <testwithoutdash id="element5" xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"/>
       <axulelement id="element6" is="test-built-in-element" xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"/>
       <popup id="element7" is="test-popup-extend" xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"/>
       <test-custom-element-3 id="element8" xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"></test-custom-element-3>
     </div>
     <pre id="test"></pre>
   </body>
 </window>
diff --git a/toolkit/content/customElements.js b/toolkit/content/customElements.js
--- a/toolkit/content/customElements.js
+++ b/toolkit/content/customElements.js
@@ -257,10 +257,52 @@ if (!isDummyDocument) {
     ["stringbundle", "chrome://global/content/elements/stringbundle.js"],
     ["printpreview-toolbar", "chrome://global/content/printPreviewToolbar.js"],
     ["editor", "chrome://global/content/elements/editor.js"],
   ]) {
     customElements.setElementCreationCallback(tag, () => {
       Services.scriptloader.loadSubScript(script, window);
     });
   }
+
+
+  customElements.define("scrollbox", class extends XULScrollElement {
+    static get observedAttributes() {
+      return ["orient", "align", "pack", "dir"];
+    }
+
+    onAttributeChanged() {
+      console.log(arguments);
+      this.copyAttributes();
+    }
+
+    connectedCallback() {
+      this.copyAttributes();
+    }
+
+    copyAttribute(child, name) {
+      if (this.hasAttribute(name)) {
+        child.setAttribute(name, this.getAttribute(name));
+      } else {
+        child.removeAttribute(name);
+      }
+    }
+
+    copyAttributes() {
+      this.copyAttribute(this.box, "orient");
+      this.copyAttribute(this.box, "align");
+      this.copyAttribute(this.box, "pack");
+      this.copyAttribute(this.box, "dir");
+    }
+
+    constructor() {
+      super();
+
+      this.root = this.attachShadow({ mode: "open" });
+      this.box = document.createElement("box");
+      this.box.className = "box-inherit scrollbox-innerbox";
+      this.box.setAttribute("flex", "1");
+      this.box.appendChild(document.createElementNS("http://www.w3.org/1999/xhtml", "slot"));
+      this.root.appendChild(this.box);
+    }
+  });
 }
 }
diff --git a/toolkit/content/xul.css b/toolkit/content/xul.css
--- a/toolkit/content/xul.css
+++ b/toolkit/content/xul.css
@@ -717,17 +717,16 @@ slider {
   /* This is a hint to layerization that the scrollbar thumb can never leave
      the scrollbar track. */
   overflow: hidden;
 }
 
 /******** scrollbox ********/
 
 scrollbox {
-  -moz-binding: url("chrome://global/content/bindings/scrollbox.xml#scrollbox");
   /* This makes it scrollable! */
   overflow: hidden;
 }
 
 scrollbox[smoothscroll=true] {
   scroll-behavior: smooth;
 }
 
