diff -r a32292906940 -r a559b59b1175 browser/devtools/markupview/markup-view.js
--- a/browser/devtools/markupview/markup-view.js	Wed Apr 29 08:46:31 2015 +0200
+++ b/browser/devtools/markupview/markup-view.js	Wed Apr 29 17:05:37 2015 +0200
@@ -1824,17 +1824,25 @@ MarkupContainer.prototype = {
       return;
     }
 
     // target is the MarkupContainer itself.
     this._isMouseDown = true;
     this.hovered = false;
     this.markup.navigate(this);
     event.stopPropagation();
-    event.preventDefault();
+
+    // Preventing the default behavior will avoid the body to gain focus on
+    // mouseup (through bubbling) when clicking on a non focusable node in the
+    // line. So, if the click happened outside of a focusable element, do
+    // prevent the default behavior, so that the tagname or textcontent gains
+    // focus.
+    if (!target.closest(".open [tabindex]")) {
+      event.preventDefault();
+    }
 
     // Start dragging the container after a delay.
     this.markup._dragStartEl = target;
     setTimeout(() => {
       // Make sure the mouse is still down and on target.
       if (!this._isMouseDown || this.markup._dragStartEl !== target ||
           this.node.isPseudoElement || this.node.isAnonymous ||
           !this.win.getSelection().isCollapsed) {
diff -r a32292906940 -r a559b59b1175 browser/devtools/markupview/test/browser_markupview_keybindings_03.js
--- a/browser/devtools/markupview/test/browser_markupview_keybindings_03.js	Wed Apr 29 08:46:31 2015 +0200
+++ b/browser/devtools/markupview/test/browser_markupview_keybindings_03.js	Wed Apr 29 17:05:37 2015 +0200
@@ -3,17 +3,17 @@
  http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
 // Tests that selecting a node with the mouse (by clicking on the line) focuses
 // the first focusable element in the corresponding MarkupContainer so that the
 // keyboard can be used immediately.
 
-const TEST_URL = "data:text/html;charset=utf8,<div></div>Text node";
+const TEST_URL = "data:text/html;charset=utf8,<div class='test-class'></div>Text node";
 
 add_task(function*() {
   let {inspector, toolbox} = yield addTab(TEST_URL).then(openInspector);
   let {walker} = inspector;
 
   info("Select the test node to have the 2 test containers visible");
   yield selectNode("div", inspector);
 
@@ -26,9 +26,23 @@ add_task(function*() {
      getContainerForNodeFront(textFront, inspector).editor.value,
      "The currently focused element is the node's text content");
 
   info("Click on the MarkupContainer element for the <div> node");
   yield clickContainer(divFront, inspector);
   is(inspector.markup.doc.activeElement,
      getContainerForNodeFront(divFront, inspector).editor.tag,
      "The currently focused element is the div's tagname");
+
+  info("Click on the test-class attribute, to make sure it gets focused");
+  let editor = getContainerForNodeFront(divFront, inspector).editor;
+  let attributeEditor = editor.attrElements.get("class").querySelector(".editable");
+
+  let onFocus = once(attributeEditor, "focus");
+  EventUtils.synthesizeMouseAtCenter(attributeEditor, {type: "mousedown"},
+    inspector.markup.doc.defaultView);
+  EventUtils.synthesizeMouseAtCenter(attributeEditor, {type: "mouseup"},
+    inspector.markup.doc.defaultView);
+  yield onFocus;
+
+  is(inspector.markup.doc.activeElement, attributeEditor,
+     "The currently focused element is the div's class attribute");
 });
