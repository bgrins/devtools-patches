diff --git a/devtools/client/debugger/content/reducers/breakpoints.js b/devtools/client/debugger/content/reducers/breakpoints.js
--- a/devtools/client/debugger/content/reducers/breakpoints.js
+++ b/devtools/client/debugger/content/reducers/breakpoints.js
@@ -98,31 +98,37 @@ function update(state = initialState, ac
     break;
   }
 
   case constants.SET_BREAKPOINT_CONDITION: {
     const id = makeLocationId(action.breakpoint.location);
     const bp = state.breakpoints[id];
 
     if (action.status === 'start') {
-      return mergeIn(state, ['breakpoints', id], {
+      state = mergeIn(state, ['breakpoints', id], {
         loading: true,
         condition: action.condition
       });
     }
     else if (action.status === 'done') {
-      return mergeIn(state, ['breakpoints', id], {
+      state = mergeIn(state, ['breakpoints', id], {
         loading: false,
         // Setting a condition creates a new breakpoint client as of
         // now, so we need to update the actor
         actor: action.value.actor
       });
     }
     else if (action.status === 'error') {
+      emitChange("breakpoint-removed", bp);
       return deleteIn(state, ['breakpoints', id]);
     }
+
+    emitChange("breakpoint-condition-updated", bp);
+
+    return state;
+
     break;
   }}
 
   return state;
 }
 
 module.exports = update;
diff --git a/devtools/client/debugger/debugger-view.js b/devtools/client/debugger/debugger-view.js
--- a/devtools/client/debugger/debugger-view.js
+++ b/devtools/client/debugger/debugger-view.js
@@ -94,16 +94,17 @@ var DebuggerView = {
       "source-text-loaded": this.renderSourceText,
       "source-selected": this.renderSourceText,
       "blackboxed": this.renderBlackBoxed,
       "prettyprinted": this.renderPrettyPrinted,
       "breakpoint-added": this.addEditorBreakpoint,
       "breakpoint-enabled": this.addEditorBreakpoint,
       "breakpoint-disabled": this.removeEditorBreakpoint,
       "breakpoint-removed": this.removeEditorBreakpoint,
+      "breakpoint-condition-updated": this.renderEditorBreakpointCondition,
       "breakpoint-moved": ({ breakpoint, prevLocation }) => {
         const selectedSource = queries.getSelectedSource(getState());
         const { location } = breakpoint;
 
         if (selectedSource &&
            selectedSource.actor === location.actor) {
           this.editor.moveBreakpoint(prevLocation.line - 1,
                                      location.line - 1);
@@ -348,35 +349,48 @@ var DebuggerView = {
       }
       else {
         this.removeEditorBreakpoint(bp);
       }
     }
   },
 
   addEditorBreakpoint: function(breakpoint) {
-    const { location } = breakpoint;
+    const { location, condition } = breakpoint;
     const source = queries.getSelectedSource(this.controller.getState());
 
     if (source &&
        source.actor === location.actor &&
        !breakpoint.disabled) {
-      this.editor.addBreakpoint(location.line - 1);
+      this.editor.addBreakpoint(location.line - 1, condition);
     }
   },
 
   removeEditorBreakpoint: function (breakpoint) {
     const { location } = breakpoint;
     const source = queries.getSelectedSource(this.controller.getState());
 
     if (source && source.actor === location.actor) {
       this.editor.removeBreakpoint(location.line - 1);
     }
   },
 
+  renderEditorBreakpointCondition: function (breakpoint) {
+    const { location, condition } = breakpoint;
+    const source = queries.getSelectedSource(this.controller.getState());
+
+    if (source && source.actor === location.actor) {
+      if (condition) {
+        this.editor.setBreakpointCondition(location.line - 1);
+      } else {
+        this.editor.removeBreakpointCondition(location.line - 1);
+      }
+    }
+  },
+
   /**
    * Display the source editor.
    */
   showEditor: function() {
     this._editorDeck.selectedIndex = 0;
   },
 
   /**
diff --git a/devtools/client/jar.mn b/devtools/client/jar.mn
--- a/devtools/client/jar.mn
+++ b/devtools/client/jar.mn
@@ -192,20 +192,17 @@ devtools.jar:
     skin/images/command-eyedropper.png (themes/images/command-eyedropper.png)
     skin/images/command-eyedropper@2x.png (themes/images/command-eyedropper@2x.png)
     skin/images/command-rulers.png (themes/images/command-rulers.png)
     skin/images/command-rulers@2x.png (themes/images/command-rulers@2x.png)
     skin/images/command-measure.png (themes/images/command-measure.png)
     skin/images/command-measure@2x.png (themes/images/command-measure@2x.png)
     skin/markup.css (themes/markup.css)
     skin/images/editor-error.png (themes/images/editor-error.png)
-    skin/images/editor-breakpoint.png (themes/images/editor-breakpoint.png)
-    skin/images/editor-breakpoint@2x.png (themes/images/editor-breakpoint@2x.png)
-    skin/images/editor-debug-location.png (themes/images/editor-debug-location.png)
-    skin/images/editor-debug-location@2x.png (themes/images/editor-debug-location@2x.png)
+    skin/images/breakpoint.svg (themes/images/breakpoint.svg)
     skin/webconsole.css (themes/webconsole.css)
     skin/images/webconsole.svg (themes/images/webconsole.svg)
     skin/images/breadcrumbs-divider@2x.png (themes/images/breadcrumbs-divider@2x.png)
     skin/images/breadcrumbs-scrollbutton.png (themes/images/breadcrumbs-scrollbutton.png)
     skin/images/breadcrumbs-scrollbutton@2x.png (themes/images/breadcrumbs-scrollbutton@2x.png)
     skin/animationinspector.css (themes/animationinspector.css)
     skin/eyedropper.css (themes/eyedropper.css)
     skin/canvasdebugger.css (themes/canvasdebugger.css)
@@ -251,18 +248,17 @@ devtools.jar:
     skin/images/debugger-step-out.png (themes/images/debugger-step-out.png)
     skin/images/debugger-step-out@2x.png (themes/images/debugger-step-out@2x.png)
     skin/images/debugger-step-over.png (themes/images/debugger-step-over.png)
     skin/images/debugger-step-over@2x.png (themes/images/debugger-step-over@2x.png)
     skin/images/debugger-blackbox.png (themes/images/debugger-blackbox.png)
     skin/images/debugger-blackbox@2x.png (themes/images/debugger-blackbox@2x.png)
     skin/images/debugger-prettyprint.png (themes/images/debugger-prettyprint.png)
     skin/images/debugger-prettyprint@2x.png (themes/images/debugger-prettyprint@2x.png)
-    skin/images/debugger-toggleBreakpoints.png (themes/images/debugger-toggleBreakpoints.png)
-    skin/images/debugger-toggleBreakpoints@2x.png (themes/images/debugger-toggleBreakpoints@2x.png)
+    skin/images/debugger-toggleBreakpoints.svg (themes/images/debugger-toggleBreakpoints.svg)
     skin/images/tracer-icon.png (themes/images/tracer-icon.png)
     skin/images/tracer-icon@2x.png (themes/images/tracer-icon@2x.png)
     skin/images/responsivemode/responsive-se-resizer.png (themes/images/responsivemode/responsive-se-resizer.png)
     skin/images/responsivemode/responsive-se-resizer@2x.png (themes/images/responsivemode/responsive-se-resizer@2x.png)
     skin/images/responsivemode/responsive-vertical-resizer.png (themes/images/responsivemode/responsive-vertical-resizer.png)
     skin/images/responsivemode/responsive-vertical-resizer@2x.png (themes/images/responsivemode/responsive-vertical-resizer@2x.png)
     skin/images/responsivemode/responsive-horizontal-resizer.png (themes/images/responsivemode/responsive-horizontal-resizer.png)
     skin/images/responsivemode/responsive-horizontal-resizer@2x.png (themes/images/responsivemode/responsive-horizontal-resizer@2x.png)
diff --git a/devtools/client/sourceeditor/codemirror/mozilla.css b/devtools/client/sourceeditor/codemirror/mozilla.css
--- a/devtools/client/sourceeditor/codemirror/mozilla.css
+++ b/devtools/client/sourceeditor/codemirror/mozilla.css
@@ -1,22 +1,35 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
-.errors,
-.breakpoints {
+:root {
+  --breakpoint-background: url("chrome://devtools/skin/images/breakpoint.svg#light");
+  --breakpoint-hover-background: url("chrome://devtools/skin/images/breakpoint.svg#light-hover");
+  --breakpoint-active-background: url("chrome://devtools/skin/images/breakpoint.svg#light-active");
+  --breakpoint-conditional-background: url("chrome://devtools/skin/images/breakpoint.svg#light-conditional");
+}
+
+.theme-dark:root {
+  --breakpoint-background: url("chrome://devtools/skin/images/breakpoint.svg#dark");
+  --breakpoint-hover-background: url("chrome://devtools/skin/images/breakpoint.svg#dark-hover");
+  --breakpoint-active-background: url("chrome://devtools/skin/images/breakpoint.svg#dark-active");
+  --breakpoint-conditional-background: url("chrome://devtools/skin/images/breakpoint.svg#dark-conditional");
+}
+
+.errors {
   width: 16px;
 }
 
 .hit-counts {
   width: 6px;
 }
 
-.error, .breakpoint, .debugLocation, .breakpoint-debugLocation {
+.error {
   display: inline-block;
   margin-left: 5px;
   width: 12px;
   height: 12px;
   background-repeat: no-repeat;
   background-position: center;
   background-size: contain;
 }
@@ -32,53 +45,46 @@
   pointer-events: none;
 }
 
 .error {
   background-image: url("chrome://devtools/skin/images/editor-error.png");
   opacity: 0.75;
 }
 
-.breakpoint {
-  background-image: url("chrome://devtools/skin/images/editor-breakpoint.png");
-  position: relative;
+.CodeMirror-linenumber {
+  background-size: calc(100% - 2px) 12px;
+  background-repeat: no-repeat;
+  background-position: right center;
 }
 
-@media (min-resolution: 1.1dppx) {
-  .breakpoint {
-    background-image: url("chrome://devtools/skin/images/editor-breakpoint@2x.png");
-  }
+.breakpoint .CodeMirror-linenumber,
+.debug-line .CodeMirror-linenumber {
+  padding-inline-end: 9px;
+  color: var(--theme-body-background);
 }
 
-.breakpoint[adding] {
-  transition: transform .25s;
+.breakpoint .CodeMirror-linenumber {
+  background-image: var(--breakpoint-background) !important;
 }
 
-.debugLocation {
-  background-image: url("chrome://devtools/skin/images/editor-debug-location.png");
+.breakpoint.conditional .CodeMirror-linenumber {
+  background-image: var(--breakpoint-conditional-background) !important;
 }
 
-@media (min-resolution: 1.1dppx) {
-  .debugLocation {
-    background-image: url("chrome://devtools/skin/images/editor-debug-location@2x.png");
-  }
+.breakpoint.conditional .CodeMirror-line {
+  background-color: rgba(217,126,0,.15);
 }
 
-.breakpoint.debugLocation {
-  background-image:
-    url("chrome://devtools/skin/images/editor-debug-location.png"),
-    url("chrome://devtools/skin/images/editor-breakpoint.png");
+.debug-line .CodeMirror-linenumber {
+  background-image: var(--breakpoint-active-background) !important;
 }
 
-@media (min-resolution: 1.1dppx) {
-  .breakpoint.debugLocation {
-    background-image:
-      url("chrome://devtools/skin/images/editor-debug-location@2x.png"),
-      url("chrome://devtools/skin/images/editor-breakpoint@2x.png");
-  }
+.debug-line .CodeMirror-line {
+  background-color: rgba(44,187,15,.1);
 }
 
 .CodeMirror {
   cursor: text;
 }
 
 .CodeMirror-gutters {
   cursor: default;
diff --git a/devtools/client/sourceeditor/debugger.js b/devtools/client/sourceeditor/debugger.js
--- a/devtools/client/sourceeditor/debugger.js
+++ b/devtools/client/sourceeditor/debugger.js
@@ -111,21 +111,20 @@ function initialize(ctx) {
  */
 function hasBreakpoint(ctx, line) {
   let { cm } = ctx;
   // In some rare occasions CodeMirror might not be properly initialized yet, so
   // return an exceptional value in that case.
   if (cm.lineInfo(line) === null) {
     return null;
   }
-  let markers = cm.lineInfo(line).gutterMarkers;
+  let markers = cm.lineInfo(line).wrapClass;
 
   return markers != null &&
-    markers.breakpoints &&
-    markers.breakpoints.classList.contains("breakpoint");
+         markers.contains("breakpoint");
 }
 
 /**
  * Adds a visual breakpoint for a specified line. Third
  * parameter 'cond' can hold any object.
  *
  * After adding a breakpoint, this function makes Editor to
  * emit a breakpointAdded event.
@@ -138,25 +137,28 @@ function addBreakpoint(ctx, line, cond) 
 
     // The line does not exist in the editor. This is harmless, the
     // architecture calling this assumes the editor will handle this
     // gracefully, and make sure breakpoints exist when they need to.
     if (!info) {
       return;
     }
 
-    ed.addMarker(line, "breakpoints", "breakpoint");
+    ed.addLineClass(line, "breakpoint");
     meta.breakpoints[line] = { condition: cond };
 
     // TODO(jwl): why is `info` null when breaking on page reload?
     info.handle.on("delete", function onDelete() {
       info.handle.off("delete", onDelete);
       meta.breakpoints[info.line] = null;
     });
 
+    if (cond) {
+      setBreakpointCondition(ctx, line);
+    }
     ed.emit("breakpointAdded", line);
     deferred.resolve();
   }
 
   if (hasBreakpoint(ctx, line)) {
     return null;
   }
 
@@ -180,43 +182,49 @@ function removeBreakpoint(ctx, line) {
     return;
   }
 
   let { ed, cm } = ctx;
   let meta = dbginfo.get(ed);
   let info = cm.lineInfo(line);
 
   meta.breakpoints[info.line] = null;
-  ed.removeMarker(info.line, "breakpoints", "breakpoint");
+  ed.removeLineClass(info.line, "breakpoint");
+  ed.removeLineClass(info.line, "conditional");
   ed.emit("breakpointRemoved", line);
 }
 
 function moveBreakpoint(ctx, fromLine, toLine) {
   let { ed, cm } = ctx;
 
   let fromTop = cm.cursorCoords({ line: fromLine }).top;
   let toTop = cm.cursorCoords({ line: toLine }).top;
 
   ed.removeBreakpoint(fromLine);
   ed.addBreakpoint(toLine);
-  let info = cm.lineInfo(toLine);
-  let marker = ed.getMarker(info.line, "breakpoints", "breakpoint");
-  if (marker) {
-    marker.setAttribute("adding", "");
-    marker.style.position = "relative";
-    marker.style.top = -(toTop - fromTop) + "px";
-    marker.style.transform = "translateY(" + (toTop - fromTop) + "px)";
-    marker.addEventListener("transitionend", function(e) {
-      // For some reason, we have to reset the styles after the marker
-      // is already removed, not before.
-      e.target.removeAttribute("adding");
-      e.target.style.transform = "none";
-      e.target.style.top = "0px";
-    });
+}
+
+function setBreakpointCondition(ctx, line) {
+  let { ed, cm } = ctx;
+  let info = cm.lineInfo(line);
+
+  // The line does not exist in the editor. This is harmless, the
+  // architecture calling this assumes the editor will handle this
+  // gracefully, and make sure breakpoints exist when they need to.
+  if (!info) {
+    return;
   }
+
+  ed.addLineClass(line, "conditional");
+}
+
+function removeBreakpointCondition(ctx, line) {
+  let { ed, cm } = ctx;
+
+  ed.removeLineClass(line, "conditional");
 }
 
 /**
  * Returns a list of all breakpoints in the current Editor.
  */
 function getBreakpoints(ctx) {
   let { ed } = ctx;
   let meta = dbginfo.get(ed);
@@ -236,17 +244,16 @@ function getBreakpoints(ctx) {
  */
 function setDebugLocation(ctx, line) {
   let { ed } = ctx;
   let meta = dbginfo.get(ed);
 
   clearDebugLocation(ctx);
 
   meta.debugLocation = line;
-  ed.addMarker(line, "breakpoints", "debugLocation");
   ed.addLineClass(line, "debug-line");
 }
 
 /**
  * Returns a line number that corresponds to the current debug
  * location.
  */
 function getDebugLocation(ctx) {
@@ -260,17 +267,16 @@ function getDebugLocation(ctx) {
  * Clears the debug location. Clearing the debug location
  * also removes a visual anchor from the breakpoints gutter.
  */
 function clearDebugLocation(ctx) {
   let { ed } = ctx;
   let meta = dbginfo.get(ed);
 
   if (meta.debugLocation != null) {
-    ed.removeMarker(meta.debugLocation, "breakpoints", "debugLocation");
     ed.removeLineClass(meta.debugLocation, "debug-line");
     meta.debugLocation = null;
   }
 }
 
 /**
  * Starts a new search.
  */
@@ -291,12 +297,13 @@ function findNext(ctx, query) {
  */
 function findPrev(ctx, query) {
   doSearch(ctx, true, query);
 }
 
 // Export functions
 
 [
-  initialize, hasBreakpoint, addBreakpoint, removeBreakpoint,
-  moveBreakpoint, getBreakpoints, setDebugLocation, getDebugLocation,
-  clearDebugLocation, find, findNext, findPrev
+  initialize, hasBreakpoint, addBreakpoint, removeBreakpoint, moveBreakpoint,
+  setBreakpointCondition, removeBreakpointCondition, getBreakpoints,
+  setDebugLocation, getDebugLocation, clearDebugLocation, find, findNext,
+  findPrev
 ].forEach(func => module.exports[func.name] = func);
diff --git a/devtools/client/themes/dark-theme.css b/devtools/client/themes/dark-theme.css
--- a/devtools/client/themes/dark-theme.css
+++ b/devtools/client/themes/dark-theme.css
@@ -222,24 +222,16 @@ div.cm-s-mozilla span.CodeMirror-matchin
   color: white;
 }
 
 /* Highlight for a line that contains an error. */
 div.CodeMirror div.error-line {
   background: rgba(255,0,0,0.2);
 }
 
-/* Highlight for a line that represents a stack frame's location. */
-div.CodeMirror div.debug-line {
-  background: rgba(0,128,255,0.1);
-  box-shadow:
-    0 1px 0 0 rgba(0,128,255,0.4),
-    0 -1px 0 0 rgba(0,128,255,0.4);
-}
-
 /* Generic highlighted text */
 div.CodeMirror span.marked-text {
   background: rgba(255,255,0,0.2);
   border: 1px dashed rgba(192,192,0,0.6);
   -moz-margin-start: -1px;
   -moz-margin-end: -1px;
 }
 
diff --git a/devtools/client/themes/debugger.css b/devtools/client/themes/debugger.css
--- a/devtools/client/themes/debugger.css
+++ b/devtools/client/themes/debugger.css
@@ -61,16 +61,22 @@
 #sources-controls > .devtools-toolbarbutton {
   min-width: 32px;
 }
 
 #sources-toolbar .devtools-toolbarbutton:not([label]) {
   -moz-image-region: rect(0,16px,16px,0);
 }
 
+@media (min-resolution: 1.1dppx) {
+  #sources-toolbar .devtools-toolbarbutton:not([label]) {
+    -moz-image-region: rect(0,32px,32px,0);
+  }
+}
+
 #black-box {
   list-style-image: url(images/debugger-blackbox.png);
 }
 
 @media (min-resolution: 1.1dppx) {
   #black-box {
     list-style-image: url(images/debugger-blackbox@2x.png);
   }
@@ -82,42 +88,29 @@
 
 @media (min-resolution: 1.1dppx) {
   #pretty-print {
     list-style-image: url(images/debugger-prettyprint@2x.png);
   }
 }
 
 #toggle-breakpoints {
-  list-style-image: url(images/debugger-toggleBreakpoints.png);
+  list-style-image: url(images/debugger-toggleBreakpoints.svg);
+  -moz-image-region: rect(0,32px,16px,16px) !important;
 }
 
 #toggle-breakpoints[checked] {
-  -moz-image-region: rect(0,32px,16px,16px) !important;
+  -moz-image-region: rect(0,16px,16px,0) !important;
 }
 
 #toggle-breakpoints[checked] > image {
   /* This button has a special checked image, don't make it blue */
   filter: none;
 }
 
-@media (min-resolution: 1.1dppx) {
-  #sources-toolbar .devtools-toolbarbutton:not([label]) {
-    -moz-image-region: rect(0,32px,32px,0);
-  }
-
-  #toggle-breakpoints {
-    list-style-image: url(images/debugger-toggleBreakpoints@2x.png);
-  }
-
-  #toggle-breakpoints[checked] {
-    -moz-image-region: rect(0,64px,32px,32px) !important;
-  }
-}
-
 #toggle-promise-debugger {
   /* TODO Bug 1186119: Add a toggle promise debugger image */
 }
 
 #sources .black-boxed {
   color: rgba(128,128,128,0.4);
 }
 
diff --git a/devtools/client/themes/images/breakpoint.svg b/devtools/client/themes/images/breakpoint.svg
new file mode 100644
--- /dev/null
+++ b/devtools/client/themes/images/breakpoint.svg
@@ -0,0 +1,45 @@
+<!-- This Source Code Form is subject to the terms of the Mozilla Public
+   - License, v. 2.0. If a copy of the MPL was not distributed with this
+   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
+<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="33" height="12" viewBox="0 0 33 12">
+  <defs>
+    <style>
+      use:not(:target) {
+        display: none;
+      }
+      #light {
+        fill: #46afe3;
+      }
+      #light-hover {
+        fill: #9aa6b3;
+      }
+      #light-active {
+        fill: #2cbb0f;
+      }
+      #light-conditional {
+        fill: #d97e00;
+      }
+      #dark {
+        fill: #46afe3;
+      }
+      #dark-hover {
+        fill: #3d454d;
+      }
+      #dark-active {
+        fill: #70bf53;
+      }
+      #dark-conditional {
+        fill: #d89b28;
+      }
+    </style>
+    <path id="base-path" d="M27.1,0H1C0.4,0,0,0.4,0,1v10c0,0.6,0.4,1,1,1h26.1 c0.6,0,1.2-0.3,1.5-0.7L33,6l-4.4-5.3C28.2,0.3,27.7,0,27.1,0z"/>
+  </defs>
+  <use xlink:href="#base-path" id="light"/>
+  <use xlink:href="#base-path" id="light-hover"/>
+  <use xlink:href="#base-path" id="light-active"/>
+  <use xlink:href="#base-path" id="light-conditional"/>
+  <use xlink:href="#base-path" id="dark"/>
+  <use xlink:href="#base-path" id="dark-hover"/>
+  <use xlink:href="#base-path" id="dark-active"/>
+  <use xlink:href="#base-path" id="dark-conditional"/>
+</svg>
diff --git a/devtools/client/themes/images/debugger-toggleBreakpoints.png b/devtools/client/themes/images/debugger-toggleBreakpoints.png
deleted file mode 100644
index c4b7dcbfe57454fd7b16212fe6077a1d50c763b6..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
GIT binary patch
literal 0
Hc$@<O00001

diff --git a/devtools/client/themes/images/debugger-toggleBreakpoints.svg b/devtools/client/themes/images/debugger-toggleBreakpoints.svg
new file mode 100644
--- /dev/null
+++ b/devtools/client/themes/images/debugger-toggleBreakpoints.svg
@@ -0,0 +1,6 @@
+<!-- This Source Code Form is subject to the terms of the Mozilla Public
+   - License, v. 2.0. If a copy of the MPL was not distributed with this
+   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
+<svg xmlns="http://www.w3.org/2000/svg" width="32" height="16" fill="#babec3">
+  <path d="M1 5c-.553 0-1 .45-1 .99v4.02c0 .546.447.99 1 .99h12l3-3-3-3H1zm16 6c-.553 0-1-.45-1-.99V5.99c0-.546.45-.99 1.008-.99h8.577l3.208-3.207.707-.707L30.914 2.5l-.707.707-11 11-.707.707-1.414-1.414.707-.707L19.586 11H17zm12 0l3-3-2.18-2.697L24 11h5z"/>
+</svg>
diff --git a/devtools/client/themes/images/debugger-toggleBreakpoints@2x.png b/devtools/client/themes/images/debugger-toggleBreakpoints@2x.png
deleted file mode 100644
index b8bbadd170b630a1050023af06bf8fff6f395306..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
GIT binary patch
literal 0
Hc$@<O00001

diff --git a/devtools/client/themes/images/editor-breakpoint.png b/devtools/client/themes/images/editor-breakpoint.png
deleted file mode 100644
index 401f26b3f05589e8b65a160ea47371085c751ed7..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
GIT binary patch
literal 0
Hc$@<O00001

diff --git a/devtools/client/themes/images/editor-breakpoint@2x.png b/devtools/client/themes/images/editor-breakpoint@2x.png
deleted file mode 100644
index 7253aeee23f8a49de747dafc56519eafed432e4b..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
GIT binary patch
literal 0
Hc$@<O00001

diff --git a/devtools/client/themes/images/editor-debug-location.png b/devtools/client/themes/images/editor-debug-location.png
deleted file mode 100644
index d590573a8f0a1c84077c5087ec0389a23ddf55b6..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
GIT binary patch
literal 0
Hc$@<O00001

diff --git a/devtools/client/themes/images/editor-debug-location@2x.png b/devtools/client/themes/images/editor-debug-location@2x.png
deleted file mode 100644
index b1dd7ee0b20beab27be41386b758ed254c1cb63a..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
GIT binary patch
literal 0
Hc$@<O00001

diff --git a/devtools/client/themes/light-theme.css b/devtools/client/themes/light-theme.css
--- a/devtools/client/themes/light-theme.css
+++ b/devtools/client/themes/light-theme.css
@@ -221,24 +221,16 @@ div.cm-s-mozilla span.CodeMirror-matchin
   color: black;
 }
 
 /* Highlight for a line that contains an error. */
 div.CodeMirror div.error-line {
   background: rgba(255,0,0,0.2);
 }
 
-/* Highlight for a line that represents a stack frame's location. */
-div.CodeMirror div.debug-line {
-  background: rgba(0,128,255,0.1);
-  box-shadow:
-    0 1px 0 0 rgba(0,128,255,0.4),
-    0 -1px 0 0 rgba(0,128,255,0.4);
-}
-
 /* Generic highlighted text */
 div.CodeMirror span.marked-text {
   background: rgba(255,255,0,0.2);
   border: 1px dashed rgba(192,192,0,0.6);
   -moz-margin-start: -1px;
   -moz-margin-end: -1px;
 }
 

