# HG changeset patch
# Parent 4700b3251f8aad0b4534b7082a7346afda851661
# User Brian Grinstead <bgrinstead@mozilla.com>
try: -b d -p linux,linux64,macosx64,win32 -u mochitest-dt -t none

diff --git a/browser/devtools/framework/toolbox.js b/browser/devtools/framework/toolbox.js
--- a/browser/devtools/framework/toolbox.js
+++ b/browser/devtools/framework/toolbox.js
@@ -69,16 +69,17 @@ function Toolbox(target, selectedTool, h
   this._toolUnregistered = this._toolUnregistered.bind(this);
   this._refreshHostTitle = this._refreshHostTitle.bind(this);
   this._splitConsoleOnKeypress = this._splitConsoleOnKeypress.bind(this);
   this.destroy = this.destroy.bind(this);
   this.highlighterUtils = getHighlighterUtils(this);
   this._highlighterReady = this._highlighterReady.bind(this);
   this._highlighterHidden = this._highlighterHidden.bind(this);
   this._prefChanged = this._prefChanged.bind(this);
+  this._saveSplitConsoleHeight = this._saveSplitConsoleHeight.bind(this);
 
   this._target.on("close", this.destroy);
 
   if (!hostType) {
     hostType = Services.prefs.getCharPref(this._prefs.LAST_HOST);
   }
   if (!selectedTool) {
     selectedTool = Services.prefs.getCharPref(this._prefs.LAST_TOOL);
@@ -235,33 +236,36 @@ Toolbox.prototype = {
     let deferred = promise.defer();
 
     return this._host.create().then(iframe => {
       let deferred = promise.defer();
 
       let domReady = () => {
         this.isReady = true;
 
-        let closeButton = this.doc.getElementById("toolbox-close");
-        closeButton.addEventListener("command", this.destroy, true);
+        this.closeButton = this.doc.getElementById("toolbox-close");
+        this.closeButton.addEventListener("command", this.destroy, true);
 
         gDevTools.on("pref-changed", this._prefChanged);
 
         this._buildDockButtons();
         this._buildOptions();
         this._buildTabs();
         this._applyCacheSettings();
         this._addKeysToWindow();
         this._addReloadKeys();
         this._addToolSwitchingKeys();
         this._addZoomKeys();
         this._loadInitialZoom();
 
-        this.doc.getElementById("toolbox-panel-webconsole").height =
+        this.webconsolePanel = this.doc.getElementById("toolbox-panel-webconsole");
+        this.webconsolePanel.height =
           Services.prefs.getIntPref("devtools.toolbox.splitconsoleHeight");
+        this.webconsolePanel.addEventListener("resize", this._saveSplitConsoleHeight);
+
         let splitConsolePromise = promise.resolve();
         if (Services.prefs.getBoolPref(SPLITCONSOLE_ENABLED_PREF)) {
           splitConsolePromise = this.openSplitConsole();
         }
 
         let buttonsPromise = this._buildButtons();
 
         this._telemetry.toolOpened("toolbox");
@@ -345,16 +349,21 @@ Toolbox.prototype = {
     let prevKey = this.doc.getElementById("toolbox-previous-tool-key");
     prevKey.addEventListener("command", this.selectPreviousTool.bind(this), true);
 
     // Split console uses keypress instead of command so the event can be
     // cancelled with stopPropagation on the keypress, and not preventDefault.
     this.doc.addEventListener("keypress", this._splitConsoleOnKeypress, false);
   },
 
+  _saveSplitConsoleHeight: function() {
+    Services.prefs.setIntPref("devtools.toolbox.splitconsoleHeight",
+      this.doc.getElementById("toolbox-panel-webconsole").height);
+  },
+
   /**
    * Make sure that the console is showing up properly based on all the
    * possible conditions.
    *   1) If the console tab is selected, then regardless of split state
    *      it should take up the full height of the deck, and we should
    *      hide the deck and splitter.
    *   2) If the console tab is not selected and it is split, then we should
    *      show the splitter, deck, and console.
@@ -522,21 +531,20 @@ Toolbox.prototype = {
     while (dockBox.firstChild) {
       dockBox.removeChild(dockBox.firstChild);
     }
 
     if (!this._target.isLocalTab) {
       return;
     }
 
-    let closeButton = this.doc.getElementById("toolbox-close");
     if (this.hostType == Toolbox.HostType.WINDOW) {
-      closeButton.setAttribute("hidden", "true");
+      this.closeButton.setAttribute("hidden", "true");
     } else {
-      closeButton.removeAttribute("hidden");
+      this.closeButton.removeAttribute("hidden");
     }
 
     let sideEnabled = Services.prefs.getBoolPref(this._prefs.SIDE_ENABLED);
 
     for (let type in Toolbox.HostType) {
       let position = Toolbox.HostType[type];
       if (position == this.hostType ||
           position == Toolbox.HostType.CUSTOM ||
@@ -1314,24 +1322,25 @@ Toolbox.prototype = {
     if (this._destroyer) {
       return this._destroyer;
     }
 
     this._target.off("navigate", this._refreshHostTitle);
     this.off("select", this._refreshHostTitle);
     this.off("host-changed", this._refreshHostTitle);
 
-    Services.prefs.setIntPref("devtools.toolbox.splitconsoleHeight",
-      this.doc.getElementById("toolbox-panel-webconsole").height);
-
     gDevTools.off("tool-registered", this._toolRegistered);
     gDevTools.off("tool-unregistered", this._toolUnregistered);
 
     gDevTools.off("pref-changed", this._prefChanged);
 
+    this._saveSplitConsoleHeight();
+    this.webconsolePanel.removeEventListener("resize", this._saveSplitConsoleHeight);
+    this.closeButton.removeEventListener("command", this.destroy, true);
+
     let outstanding = [];
     for (let [id, panel] of this._toolPanels) {
       try {
         outstanding.push(panel.destroy());
       } catch (e) {
         // We don't want to stop here if any panel fail to close.
         console.error("Panel " + id + ":", e);
       }
