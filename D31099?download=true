diff --git a/dom/xul/XULPopupElement.cpp b/dom/xul/XULPopupElement.cpp
--- a/dom/xul/XULPopupElement.cpp
+++ b/dom/xul/XULPopupElement.cpp
@@ -114,20 +114,8 @@
 }
 
 void XULPopupElement::SizeTo(int32_t aWidth, int32_t aHeight) {
-  nsAutoString width, height;
-  width.AppendInt(aWidth);
-  height.AppendInt(aHeight);
-
   nsCOMPtr<nsIContent> kungFuDeathGrip = this;  // keep a reference
-
-  // We only want to pass aNotify=true to SetAttr once, but must make sure
-  // we pass it when a value is being changed.  Thus, we check if the height
-  // is the same and if so, pass true when setting the width.
-  bool heightSame =
-      AttrValueIs(kNameSpaceID_None, nsGkAtoms::height, height, eCaseMatters);
-
-  SetAttr(kNameSpaceID_None, nsGkAtoms::width, width, heightSame);
-  SetAttr(kNameSpaceID_None, nsGkAtoms::height, height, true);
+  nsXULElement::SetWidthAndHeight(this, aWidth, aHeight);
 
   // If the popup is open, force a reposition of the popup after resizing it
   // with notifications set to true so that the popuppositioned event is fired.
diff --git a/dom/xul/nsXULElement.h b/dom/xul/nsXULElement.h
--- a/dom/xul/nsXULElement.h
+++ b/dom/xul/nsXULElement.h
@@ -527,6 +527,13 @@
 
   bool IsInteractiveHTMLContent(bool aIgnoreTabindex) const override;
 
+  /**
+   * Set both the width and height attributes on the element. In emulated
+   * flexbox mode, the style width and height properties are set as well.
+   */
+  static void SetWidthAndHeight(mozilla::dom::Element* aElement,
+                                int32_t aWidth, int32_t aHeight);
+
  protected:
   ~nsXULElement();
 
diff --git a/dom/xul/nsXULElement.cpp b/dom/xul/nsXULElement.cpp
--- a/dom/xul/nsXULElement.cpp
+++ b/dom/xul/nsXULElement.cpp
@@ -1461,6 +1461,40 @@
          Element::IsInteractiveHTMLContent(aIgnoreTabindex);
 }
 
+void nsXULElement::SetWidthAndHeight(Element* aElement, int32_t aWidth, int32_t aHeight)
+{
+  nsAutoString width, height;
+  width.AppendInt(aWidth);
+  height.AppendInt(aHeight);
+
+  if (aElement->IsXULElement()) {
+    // On XUL elements, the attributes are always set so that they can be persisted.
+    bool heightUnchanged =
+        aElement->AttrValueIs(kNameSpaceID_None, nsGkAtoms::height, height, eCaseMatters);
+    aElement->SetAttr(kNameSpaceID_None, nsGkAtoms::width, width, heightUnchanged);
+    if (!heightUnchanged) {
+      aElement->SetAttr(kNameSpaceID_None, nsGkAtoms::height, height, true);
+    }
+  }
+
+  if (mozilla::StaticPrefs::layout_css_emulate_moz_box_with_flex()) {
+    nsCOMPtr<nsStyledElement> inlineStyleContent = do_QueryInterface(aElement);
+    if (inlineStyleContent) {
+      nsICSSDeclaration* decl = inlineStyleContent->Style();
+
+      if (aWidth > 0) {
+        width.AppendLiteral("px");
+        decl->SetProperty(NS_LITERAL_STRING("width"), width, EmptyString());
+      }
+
+      if (aHeight > 0) {
+        height.AppendLiteral("px");
+        decl->SetProperty(NS_LITERAL_STRING("height"), height, EmptyString());
+      }
+    }
+  }
+}
+
 NS_IMPL_CYCLE_COLLECTION_CLASS(nsXULPrototypeNode)
 
 NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN(nsXULPrototypeNode)
diff --git a/layout/xul/nsResizerFrame.h b/layout/xul/nsResizerFrame.h
--- a/layout/xul/nsResizerFrame.h
+++ b/layout/xul/nsResizerFrame.h
@@ -63,16 +63,11 @@
                                int32_t aMaxSize, int32_t aMovement,
                                int8_t aResizerDirection);
 
-  struct SizeInfo {
-    nsString width, height;
-  };
-  static void SizeInfoDtorFunc(void* aObject, nsAtom* aPropertyName,
-                               void* aPropertyValue, void* aData);
+  static nsIntSize GetCurrentSize(nsIContent* aContent);
   static void ResizeContent(nsIContent* aContent, const Direction& aDirection,
-                            const SizeInfo& aSizeInfo,
-                            SizeInfo* aOriginalSizeInfo);
+                            const nsIntSize& aSize);
   static void MaybePersistOriginalSize(nsIContent* aContent,
-                                       const SizeInfo& aSizeInfo);
+                                       const nsIntSize& aSize);
   static void RestoreOriginalSize(nsIContent* aContent);
 
  protected:
diff --git a/layout/xul/nsResizerFrame.cpp b/layout/xul/nsResizerFrame.cpp
--- a/layout/xul/nsResizerFrame.cpp
+++ b/layout/xul/nsResizerFrame.cpp
@@ -26,6 +26,7 @@
 #include "nsIScreenManager.h"
 #include "mozilla/dom/Element.h"
 #include "mozilla/dom/MouseEventBinding.h"
+#include "nsXULElement.h"
 #include "nsError.h"
 #include "nsICSSDeclaration.h"
 #include "nsStyledElement.h"
@@ -255,12 +256,9 @@
             rect.y -= clientOffset.y;
           }
 
-          SizeInfo sizeInfo, originalSizeInfo;
-          sizeInfo.width.AppendInt(cssRect.width);
-          sizeInfo.height.AppendInt(cssRect.height);
-          ResizeContent(contentToResize, direction, sizeInfo,
-                        &originalSizeInfo);
-          MaybePersistOriginalSize(contentToResize, originalSizeInfo);
+          nsIntSize originalSize = GetCurrentSize(contentToResize);
+          ResizeContent(contentToResize, direction, cssRect.Size());
+          MaybePersistOriginalSize(contentToResize, originalSize);
 
           // Move the popup to the new location unless it is anchored, since
           // the position shouldn't change. nsMenuPopupFrame::SetPopupPosition
@@ -396,87 +394,71 @@
   if (aResizerDirection == -1) *aPos += oldSize - *aSize;
 }
 
-/* static */
-void nsResizerFrame::ResizeContent(nsIContent* aContent,
-                                   const Direction& aDirection,
-                                   const SizeInfo& aSizeInfo,
-                                   SizeInfo* aOriginalSizeInfo) {
-  // for XUL elements, just set the width and height attributes. For
-  // other elements, set style.width and style.height
+/* static */ nsIntSize nsResizerFrame::GetCurrentSize(nsIContent* aContent) {
+  nsAutoString widthStr, heightStr;
   if (aContent->IsXULElement()) {
-    if (aOriginalSizeInfo) {
-      aContent->AsElement()->GetAttr(kNameSpaceID_None, nsGkAtoms::width,
-                                     aOriginalSizeInfo->width);
-      aContent->AsElement()->GetAttr(kNameSpaceID_None, nsGkAtoms::height,
-                                     aOriginalSizeInfo->height);
-    }
-    // only set the property if the element could have changed in that direction
-    if (aDirection.mHorizontal) {
-      aContent->AsElement()->SetAttr(kNameSpaceID_None, nsGkAtoms::width,
-                                     aSizeInfo.width, true);
-    }
-    if (aDirection.mVertical) {
-      aContent->AsElement()->SetAttr(kNameSpaceID_None, nsGkAtoms::height,
-                                     aSizeInfo.height, true);
-    }
+    // for XUL elements, just set the width and height attributes. For
+    // other elements, set style.width and style.height
+    aContent->AsElement()->GetAttr(kNameSpaceID_None, nsGkAtoms::width,
+                                   widthStr);
+    aContent->AsElement()->GetAttr(kNameSpaceID_None, nsGkAtoms::height,
+                                   heightStr);
   } else {
     nsCOMPtr<nsStyledElement> inlineStyleContent = do_QueryInterface(aContent);
     if (inlineStyleContent) {
       nsICSSDeclaration* decl = inlineStyleContent->Style();
-
-      if (aOriginalSizeInfo) {
-        decl->GetPropertyValue(NS_LITERAL_STRING("width"),
-                               aOriginalSizeInfo->width);
-        decl->GetPropertyValue(NS_LITERAL_STRING("height"),
-                               aOriginalSizeInfo->height);
-      }
-
-      // only set the property if the element could have changed in that
-      // direction
-      if (aDirection.mHorizontal) {
-        nsAutoString widthstr(aSizeInfo.width);
-        if (!widthstr.IsEmpty() &&
-            !Substring(widthstr, widthstr.Length() - 2, 2).EqualsLiteral("px"))
-          widthstr.AppendLiteral("px");
-        decl->SetProperty(NS_LITERAL_STRING("width"), widthstr, EmptyString());
-      }
-      if (aDirection.mVertical) {
-        nsAutoString heightstr(aSizeInfo.height);
-        if (!heightstr.IsEmpty() &&
-            !Substring(heightstr, heightstr.Length() - 2, 2)
-                 .EqualsLiteral("px"))
-          heightstr.AppendLiteral("px");
-        decl->SetProperty(NS_LITERAL_STRING("height"), heightstr,
-                          EmptyString());
-      }
+      decl->GetPropertyValue(NS_LITERAL_STRING("width"), widthStr);
+      decl->GetPropertyValue(NS_LITERAL_STRING("height"), heightStr);
     }
   }
+
+  nsresult rv;
+  nsIntSize size;
+  int32_t widthInt = widthStr.ToInteger(&rv);
+  if (NS_SUCCEEDED(rv)) {
+    size.width = widthInt;
+  }
+  int32_t heightInt = heightStr.ToInteger(&rv);
+  if (NS_SUCCEEDED(rv)) {
+    size.height = heightInt;
+  }
+
+  return size;
+}
+
+/* static */ void nsResizerFrame::ResizeContent(nsIContent* aContent,
+                                                const Direction& aDirection,
+                                                const nsIntSize& aSize) {
+  // only set the property if the element could have changed in that direction
+  int32_t width = aDirection.mHorizontal ? aSize.width : -1;
+  int32_t height = aDirection.mVertical ? aSize.height : -1;
+  nsXULElement::SetWidthAndHeight(aContent->AsElement(), width, height);
 }
 
 /* static */
 void nsResizerFrame::MaybePersistOriginalSize(nsIContent* aContent,
-                                              const SizeInfo& aSizeInfo) {
+                                              const nsIntSize& aSize) {
   nsresult rv;
 
   aContent->GetProperty(nsGkAtoms::_moz_original_size, &rv);
   if (rv != NS_PROPTABLE_PROP_NOT_THERE) return;
 
-  nsAutoPtr<SizeInfo> sizeInfo(new SizeInfo(aSizeInfo));
-  rv = aContent->SetProperty(nsGkAtoms::_moz_original_size, sizeInfo.get(),
-                             nsINode::DeleteProperty<nsResizerFrame::SizeInfo>);
-  if (NS_SUCCEEDED(rv)) sizeInfo.forget();
+  nsAutoPtr<nsIntSize> size(new nsIntSize(aSize));
+  rv = aContent->SetProperty(nsGkAtoms::_moz_original_size, size.get(),
+                             nsINode::DeleteProperty<nsIntSize>);
+  if (NS_SUCCEEDED(rv)) size.forget();
 }
 
 /* static */
 void nsResizerFrame::RestoreOriginalSize(nsIContent* aContent) {
   nsresult rv;
-  SizeInfo* sizeInfo = static_cast<SizeInfo*>(
+  nsIntSize* size = static_cast<nsIntSize*>(
       aContent->GetProperty(nsGkAtoms::_moz_original_size, &rv));
   if (NS_FAILED(rv)) return;
 
-  NS_ASSERTION(sizeInfo, "We set a null sizeInfo!?");
+  NS_ASSERTION(size, "We set a null size!?");
   Direction direction = {1, 1};
-  ResizeContent(aContent, direction, *sizeInfo, nullptr);
+  ResizeContent(aContent, direction, *size);
   aContent->DeleteProperty(nsGkAtoms::_moz_original_size);
 }
 
diff --git a/layout/xul/nsSplitterFrame.cpp b/layout/xul/nsSplitterFrame.cpp
--- a/layout/xul/nsSplitterFrame.cpp
+++ b/layout/xul/nsSplitterFrame.cpp
@@ -861,34 +861,17 @@
   nsMargin margin(0, 0, 0, 0);
   aChildBox->GetXULMargin(margin);
 
-  RefPtr<nsAtom> attribute;
-
   if (aIsHorizontal) {
     pref -= (margin.left + margin.right);
-    attribute = nsGkAtoms::width;
   } else {
     pref -= (margin.top + margin.bottom);
-    attribute = nsGkAtoms::height;
   }
 
   nsIContent* content = aChildBox->GetContent();
-  if (!content->IsElement()) {
-    return;
+  if (content->IsElement()) {
+    AutoWeakFrame weakBox(aChildBox);
+    nsXULElement::SetWidthAndHeight(content->AsElement(), pref / aOnePixel, -1);
   }
-
-  // set its preferred size.
-  nsAutoString prefValue;
-  prefValue.AppendInt(pref / aOnePixel);
-  if (content->AsElement()->AttrValueIs(kNameSpaceID_None, attribute, prefValue,
-                                        eCaseMatters)) {
-    return;
-  }
-
-  AutoWeakFrame weakBox(aChildBox);
-  content->AsElement()->SetAttr(kNameSpaceID_None, attribute, prefValue, true);
-  NS_ENSURE_TRUE_VOID(weakBox.IsAlive());
-  aState.PresShell()->FrameNeedsReflow(aChildBox, IntrinsicDirty::StyleChange,
-                                       NS_FRAME_IS_DIRTY);
 }
 
 void nsSplitterFrameInner::AddRemoveSpace(nscoord aDiff,
diff --git a/layout/xul/nsXULPopupManager.cpp b/layout/xul/nsXULPopupManager.cpp
--- a/layout/xul/nsXULPopupManager.cpp
+++ b/layout/xul/nsXULPopupManager.cpp
@@ -523,15 +523,8 @@
   // The size is different. Convert the actual size to css pixels and store it
   // as 'width' and 'height' attributes on the popup.
   nsPresContext* presContext = menuPopupFrame->PresContext();
-
-  CSSIntSize newCSS(presContext->DevPixelsToIntCSSPixels(aSize.width),
-                    presContext->DevPixelsToIntCSSPixels(aSize.height));
-
-  nsAutoString width, height;
-  width.AppendInt(newCSS.width);
-  height.AppendInt(newCSS.height);
-  popup->SetAttr(kNameSpaceID_None, nsGkAtoms::width, width, false);
-  popup->SetAttr(kNameSpaceID_None, nsGkAtoms::height, height, true);
+  nsXULElement::SetWidthAndHeight(popup, presContext->DevPixelsToIntCSSPixels(aSize.width),
+                                         presContext->DevPixelsToIntCSSPixels(aSize.height));
 }
 
 nsMenuPopupFrame* nsXULPopupManager::GetPopupFrameForContent(

