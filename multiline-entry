# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  3d945fc88b0108c5af7525c76df99977622e1a7a
Bug 1133849 - Enter multiline mode when js input matches certain parser errors;r=fitzgen

diff --git a/browser/devtools/webconsole/webconsole.js b/browser/devtools/webconsole/webconsole.js
--- a/browser/devtools/webconsole/webconsole.js
+++ b/browser/devtools/webconsole/webconsole.js
@@ -26,16 +26,17 @@ loader.lazyGetter(this, "ConsoleOutput",
                   () => require("devtools/webconsole/console-output").ConsoleOutput);
 loader.lazyGetter(this, "Messages",
                   () => require("devtools/webconsole/console-output").Messages);
 loader.lazyGetter(this, "asyncStorage",
                   () => require("devtools/toolkit/shared/async-storage"));
 loader.lazyRequireGetter(this, "EnvironmentClient", "devtools/toolkit/client/main", true);
 loader.lazyRequireGetter(this, "ObjectClient", "devtools/toolkit/client/main", true);
 loader.lazyImporter(this, "VariablesView", "resource:///modules/devtools/VariablesView.jsm");
+loader.lazyImporter(this, "Parser", "resource:///modules/devtools/Parser.jsm");
 loader.lazyImporter(this, "VariablesViewController", "resource:///modules/devtools/VariablesViewController.jsm");
 loader.lazyImporter(this, "PluralForm", "resource://gre/modules/PluralForm.jsm");
 loader.lazyImporter(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm");
 loader.lazyGetter(this, "Timers", () => require("sdk/timers"));
 
 const STRINGS_URI = "chrome://browser/locale/devtools/webconsole.properties";
 let l10n = new WebConsoleUtils.l10n(STRINGS_URI);
 
@@ -4084,16 +4085,37 @@ JSTerm.prototype = {
   _blurEventHandler: function JST__blurEventHandler()
   {
     if (this.autocompletePopup) {
       this.clearCompletion();
     }
   },
 
   /**
+   * Certain parse errors should be smart enough to not
+   * try to execute when 'enter' is pressed.
+   * @private
+   * @returns bool
+   */
+  _shouldAllowEnter: function() {
+    let parser = new Parser();
+    parser.logExceptions = false;
+    parser.get(this.inputNode.value);
+    let preventExecutionErrors = {
+      "SyntaxError: missing } after function body": 1,
+      "SyntaxError: missing variable name": 1,
+    }
+    if (parser.errors.length == 1 &&
+        parser.errors[0] in preventExecutionErrors) {
+      return true;
+    }
+    return false;
+  },
+
+  /**
    * The inputNode "keypress" event handler.
    *
    * @private
    * @param nsIDOMEvent aEvent
    */
   _keyPress: function JST__keyPress(aEvent)
   {
     let inputNode = this.inputNode;
@@ -4153,21 +4175,20 @@ JSTerm.prototype = {
           }
           this.clearCompletion();
           break;
         default:
           break;
       }
       return;
     }
-    else if (aEvent.shiftKey &&
-        aEvent.keyCode == Ci.nsIDOMKeyEvent.DOM_VK_RETURN) {
-      // shift return
-      // TODO: expand the inputNode height by one line
-      return;
+    else if (aEvent.keyCode == Ci.nsIDOMKeyEvent.DOM_VK_RETURN) {
+      if (aEvent.shiftKey || this._shouldAllowEnter(inputNode.value)) {
+        return;
+      }
     }
 
     switch (aEvent.keyCode) {
       case Ci.nsIDOMKeyEvent.DOM_VK_ESCAPE:
         if (this.autocompletePopup.isOpen) {
           this.clearCompletion();
           aEvent.preventDefault();
           aEvent.stopPropagation();
