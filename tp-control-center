# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  89736b1c392b6cc8eadae40322da09c5f5807831
Bug 1175327 - Move existing Tracking Protection functionality from shield doorhanger to Control Center

diff --git a/browser/base/content/browser-trackingprotection.js b/browser/base/content/browser-trackingprotection.js
new file mode 100644
--- /dev/null
+++ b/browser/base/content/browser-trackingprotection.js
@@ -0,0 +1,151 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+let TrackingProtection = {
+	init: function() {
+		console.log("TrackingProtection initialized");
+	},
+
+  resetUI: function() {
+    this.trackingContentBlock.hidden =
+      this.trackingContentUnblock.hidden =
+      this.trackingDetectedEnabled.hidden =
+      this.trackingDetectedDisabled.hidden =
+      this.trackingContentActions.hidden =
+      this.trackingNotDetected.hidden = true;
+  },
+
+  onPopupOpen: function(state) {
+    this.resetUI();
+
+    if (state &
+        Ci.nsIWebProgressListener.STATE_BLOCKED_TRACKING_CONTENT) {
+      // this.titleElement.value =
+      //   gNavigatorBundle.getFormattedString(
+      //     "badContentBlocked.blocked.message", [this.brandShortName]);
+      this.trackingContentUnblock.hidden = false;
+      this.trackingDetectedEnabled.hidden = false;
+      this.trackingContentActions.hidden = false;
+      this.trackingContentHelpLink.href =
+        Services.urlFormatter.formatURLPref("app.support.baseURL")
+          + "tracking-protection";
+    }
+    else if (state &
+        Ci.nsIWebProgressListener.STATE_LOADED_TRACKING_CONTENT) {
+      // this.titleElement.value =
+      //   gNavigatorBundle.getFormattedString(
+      //     "badContentBlocked.notblocked.message", [this.brandShortName]);
+      this.trackingContent.setAttribute("trackingblockdisabled", true);
+      this.trackingDetectedDisabled.hidden = false;
+      this.trackingContentBlock.hidden = false;
+      this.trackingContentActions.hidden = false;
+      this.trackingContentHelpLink.href =
+        Services.urlFormatter.formatURLPref("app.support.baseURL")
+          + "tracking-protection";
+    }
+    else {
+      // no tracking on page
+      this.trackingNotDetected.hidden = false;
+      // this.titleElement.value =
+      //   gNavigatorBundle.getFormattedString(
+      //     "badContentBlocked.notblocked.message", [this.brandShortName]);
+    }
+
+    if (this.featureEnabled) {
+      let histogram = Services.telemetry.getHistogramById("TRACKING_PROTECTION_EVENTS");
+      histogram.add(0);
+    }
+  },
+
+  get brandShortName() {
+    var brandBundle = document.getElementById("bundle_brand");
+    var brandShortName = brandBundle.getString("brandShortName");
+    return brandShortName;
+  },
+
+  get featureEnabled() {
+    // XXX: perf - store this with an observer
+    return Services.prefs.getBoolPref("privacy.trackingprotection.enabled");
+  },
+
+  get trackingContent() {
+    return document.getElementById("trackingContent");
+  },
+
+  get trackingContentUnblock() {
+    return document.getElementById("trackingContentActionUnblock");
+  },
+
+  get trackingDetectedEnabled() {
+    return document.getElementById("tracking-detected-enabled");
+  },
+
+  get trackingDetectedDisabled() {
+    return document.getElementById("tracking-detected-disabled");
+  },
+
+  get trackingNotDetected() {
+    return document.getElementById("tracking-not-detected");
+  },
+
+  get trackingContentUnblock() {
+    return document.getElementById("trackingContentActionUnblock");
+  },
+
+  get trackingContentActions() {
+    return document.getElementById("trackingContentActions");
+  },
+
+  get trackingContentBlock() {
+    return document.getElementById("trackingContentActionBlock");
+  },
+
+  get trackingContentHelpLink() {
+    return document.getElementById("trackingContentHelplink");
+  },
+
+  get titleElement() {
+    return document.getElementById("badContentBlockedTitle");
+  },
+
+  get isTrackingContentBlocked() {
+    // XXX: implement this
+    return true;
+    return !!(state &
+      Ci.nsIWebProgressListener.STATE_BLOCKED_TRACKING_CONTENT);
+  },
+
+  disableTrackingContentProtection: function() {
+    // convert document URI into the format used by
+    // nsChannelClassifier::ShouldEnableTrackingProtection
+    // (any scheme turned into https is correct)
+    let normalizedUrl = Services.io.newURI(
+      "https://" + gBrowser.selectedBrowser.currentURI.hostPort,
+      null, null);
+    // Add the current host in the 'trackingprotection' consumer of
+    // the permission manager using a normalized URI. This effectively
+    // places this host on the tracking protection allowlist.
+    Services.perms.add(normalizedUrl,
+      "trackingprotection", Services.perms.ALLOW_ACTION);
+    // Telemetry for disable protection
+    let histogram = Services.telemetry.getHistogramById(
+        "TRACKING_PROTECTION_EVENTS");
+    histogram.add(1);
+    BrowserReload();
+  },
+
+  enableTrackingContentProtection: function() {
+    // Remove the current host from the 'trackingprotection' consumer
+    // of the permission manager. This effectively removes this host
+    // from the tracking protection allowlist.
+    Services.perms.remove(gBrowser.selectedBrowser.currentURI.host,
+      "trackingprotection");
+    // Telemetry for enable protection
+    let histogram = Services.telemetry.getHistogramById(
+        "TRACKING_PROTECTION_EVENTS");
+    histogram.add(2);
+    BrowserReload();
+  },
+
+};
diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -273,16 +273,17 @@ let gInitialPages = [
 #include browser-places.js
 #include browser-plugins.js
 #include browser-readinglist.js
 #include browser-safebrowsing.js
 #include browser-sidebar.js
 #include browser-social.js
 #include browser-tabview.js
 #include browser-thumbnails.js
+#include browser-trackingprotection.js
 
 #ifdef MOZ_DATA_REPORTING
 #include browser-data-submission-info-bar.js
 #endif
 
 #ifdef MOZ_SERVICES_SYNC
 #include browser-syncui.js
 #endif
@@ -957,16 +958,17 @@ var gBrowserInit = {
     // message sent between when the frame script is loaded and when
     // the listener is registered.
     DOMLinkHandler.init();
     gPageStyleMenu.init();
     LanguageDetectionListener.init();
     BrowserOnClick.init();
     DevEdition.init();
     AboutPrivateBrowsingListener.init();
+    TrackingProtection.init();
 
     let mm = window.getGroupMessageManager("browsers");
     mm.loadFrameScript("chrome://browser/content/tab-content.js", true);
     mm.loadFrameScript("chrome://browser/content/content.js", true);
     mm.loadFrameScript("chrome://browser/content/content-UITour.js", true);
     mm.loadFrameScript("chrome://global/content/manifestMessages.js", true);
 
     window.messageManager.addMessageListener("Browser:LoadURI", RedirectLoad);
@@ -6722,16 +6724,18 @@ var gIdentityHandler = {
    * Determine the identity of the page being displayed by examining its SSL cert
    * (if available) and, if necessary, update the UI to reflect this.  Intended to
    * be called by onSecurityChange
    *
    * @param PRUint32 state
    * @param nsIURI uri The address for which the UI should be updated.
    */
   checkIdentity : function(state, uri) {
+    console.log("Check identity", state, uri);
+    console.trace();
     var currentStatus = gBrowser.securityUI
                                 .QueryInterface(Components.interfaces.nsISSLStatusProvider)
                                 .SSLStatus;
     this._lastStatus = currentStatus;
     this._lastUri = uri;
 
     let nsIWebProgressListener = Ci.nsIWebProgressListener;
 
@@ -6772,20 +6776,22 @@ var gIdentityHandler = {
     // - tracking content is blocked
     // - tracking content is not blocked
     if (state &
         (nsIWebProgressListener.STATE_BLOCKED_MIXED_ACTIVE_CONTENT |
          nsIWebProgressListener.STATE_LOADED_MIXED_ACTIVE_CONTENT  |
          nsIWebProgressListener.STATE_BLOCKED_TRACKING_CONTENT     |
          nsIWebProgressListener.STATE_LOADED_TRACKING_CONTENT)) {
       this.showBadContentDoorhanger(state);
+      TrackingProtection.onPopupOpen(state);
     } else if (gPrefService.getBoolPref("privacy.trackingprotection.enabled")) {
       // We didn't show the shield
       Services.telemetry.getHistogramById("TRACKING_PROTECTION_SHIELD")
         .add(0);
+      TrackingProtection.onPopupOpen(state);
     }
   },
 
   showBadContentDoorhanger : function(state) {
     var currentNotification =
       PopupNotifications.getNotification("bad-content",
         gBrowser.selectedBrowser);
 
diff --git a/browser/components/controlcenter/content/panel.inc.xul b/browser/components/controlcenter/content/panel.inc.xul
--- a/browser/components/controlcenter/content/panel.inc.xul
+++ b/browser/components/controlcenter/content/panel.inc.xul
@@ -36,9 +36,58 @@
     </vbox>
   </hbox>
   <!-- Footer button to open security page info -->
   <hbox id="identity-popup-button-container" align="center">
     <button id="identity-popup-more-info-button" flex="1"
             label="&identity.moreInfoLinkText2;"
             oncommand="gIdentityHandler.handleMoreInfoClick(event);"/>
   </hbox>
+
+
+  <!-- Tracking protection -->
+  <hbox id="trackingContent">
+    <vbox>
+      <vbox>
+        <description>
+          Tracking Protection
+        </description>
+      </vbox>
+
+      <separator class="groove"/>
+      <hbox align="start">
+        <vbox>
+          <description id="tracking-detected-enabled">
+            Attempts to block your online behavior have been blocked.
+          </description>
+          <description id="tracking-detected-disabled">
+            Tracking elements detected.  You have disabled protection on this site.
+          </description>
+          <description id="tracking-not-detected">
+            No tracking elements detected on this website.
+          </description>
+          <label
+            id="trackingContentHelplink"
+            class="text-link"
+            href=""
+            value="&trackingContentBlocked.learnMore;"/>
+        </vbox>
+        <button id="trackingContentActions"
+          type="menu" label="&trackingContentBlocked.options;"
+          sizetopopup="none">
+          <menupopup>
+            <menuitem
+              id="trackingContentActionUnblock"
+              label="&trackingContentBlocked.unblock2.label;"
+              accesskey="&trackingContentBlocked.unblock2.accesskey;"
+              oncommand="TrackingProtection.disableTrackingContentProtection();"/>
+            <menuitem
+              id="trackingContentActionBlock"
+              label="&trackingContentBlocked.block.label;"
+              accesskey="&trackingContentBlocked.block.accesskey;"
+              oncommand="TrackingProtection.enableTrackingContentProtection();"/>
+          </menupopup>
+        </button>
+      </hbox>
+    </vbox>
+
+  </hbox>
 </panel>
diff --git a/browser/locales/en-US/chrome/browser/browser.dtd b/browser/locales/en-US/chrome/browser/browser.dtd
--- a/browser/locales/en-US/chrome/browser/browser.dtd
+++ b/browser/locales/en-US/chrome/browser/browser.dtd
@@ -761,25 +761,28 @@ you can use these alternative items. Oth
 <!ENTITY mixedContentBlocked2.learnMore "Learn More">
 <!ENTITY mixedContentBlocked2.options "Options">
 <!ENTITY mixedContentBlocked2.unblock.label "Disable protection for now">
 <!ENTITY mixedContentBlocked2.unblock.accesskey "D">
 <!ENTITY mixedContentBlocked2.block.label "Enable protection">
 <!ENTITY mixedContentBlocked2.block.accesskey "E">
 <!ENTITY mixedContentBlocked2.disabled.message "Protection is disabled">
 
+<!-- XXX: Update or remove the messages -->
 <!ENTITY trackingContentBlocked.message "Tracking">
 <!ENTITY trackingContentBlocked.moreinfo "Parts of the page that track your online activity have been blocked.">
+<!ENTITY trackingContentBlocked.disabled.message "Tracking protection is disabled">
+<!-- /XXX -->
+
 <!ENTITY trackingContentBlocked.learnMore "Learn More">
 <!ENTITY trackingContentBlocked.options "Options">
 <!ENTITY trackingContentBlocked.unblock2.label "Disable protection for this site">
 <!ENTITY trackingContentBlocked.unblock2.accesskey "D">
 <!ENTITY trackingContentBlocked.block.label "Enable protection">
 <!ENTITY trackingContentBlocked.block.accesskey "E">
-<!ENTITY trackingContentBlocked.disabled.message "Tracking protection is disabled">
 
 <!ENTITY pointerLock.notification.message "Press ESC at any time to show it again.">
 
 <!ENTITY pluginNotification.showAll.label "Show All">
 <!ENTITY pluginNotification.showAll.accesskey "S">
 
 <!-- LOCALIZATION NOTE (pluginActivateNow.label, pluginActivateAlways.label, pluginBlockNow.label): These should be the same as the matching strings in browser.properties -->
 <!ENTITY pluginActivateNow.label "Allow Now">
