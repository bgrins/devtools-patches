# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  23683baa29108ceaac4767a38ae9f6360afc2c24
Bug 1175327 - Move existing Tracking Protection functionality from shield doorhanger to Control Center

diff --git a/browser/base/content/browser-trackingprotection.js b/browser/base/content/browser-trackingprotection.js
new file mode 100644
--- /dev/null
+++ b/browser/base/content/browser-trackingprotection.js
@@ -0,0 +1,98 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+let TrackingProtection = {
+	init: function() {
+		console.log("TrackingProtection initialized");
+	},
+
+  onPopupOpen: function(state) {
+    console.log("onPopupOpen");
+    console.trace();
+
+    this.state = state;
+
+    this._trackingContentBlock.hidden = this._trackingContentUnblock.hidden = true;
+    // // default title
+    // _doorhangerTitle.value =
+    //   gNavigatorBundle.getFormattedString(
+    //     "badContentBlocked.notblocked.message", [this._brandShortName]);
+    if (state &
+        Ci.nsIWebProgressListener.STATE_BLOCKED_TRACKING_CONTENT) {
+      // _doorhangerTitle.value =
+      //   gNavigatorBundle.getFormattedString(
+      //     "badContentBlocked.blocked.message", [this._brandShortName]);
+      this._trackingContent.hidden = false;
+      this._trackingContentUnblock.hidden = false;
+      this._trackingContentHelpLink.href =
+        Services.urlFormatter.formatURLPref("app.support.baseURL")
+          + "tracking-protection";
+    }
+    if (state &
+        Ci.nsIWebProgressListener.STATE_LOADED_TRACKING_CONTENT) {
+      this._trackingContent.setAttribute("trackingblockdisabled", true);
+      this._trackingContent.hidden = false;
+      this._trackingContentBlock.hidden = false;
+      this._trackingContentHelpLink.href =
+        Services.urlFormatter.formatURLPref("app.support.baseURL")
+          + "tracking-protection";
+    }
+    if (Services.prefs.getBoolPref("privacy.trackingprotection.enabled")) {
+      let histogram = Services.telemetry.getHistogramById("TRACKING_PROTECTION_EVENTS");
+      histogram.add(0);
+    }
+  },
+
+  get _trackingContent() {
+    return document.getElementById("trackingContent");
+  },
+  get _trackingContentUnblock() {
+    return document.getElementById("trackingContentActionUnblock");
+  },
+  get _trackingContentBlock() {
+    return document.getElementById("trackingContentActionBlock");
+  },
+  get _trackingContentHelpLink() {
+    return document.getElementById("trackingContentHelplink");
+  },
+  get isTrackingContentBlocked() {
+    // XXX: implement this
+    return true;
+    return !!(state &
+      Ci.nsIWebProgressListener.STATE_BLOCKED_TRACKING_CONTENT);
+  },
+
+  disableTrackingContentProtection: function() {
+    // convert document URI into the format used by
+    // nsChannelClassifier::ShouldEnableTrackingProtection
+    // (any scheme turned into https is correct)
+    let normalizedUrl = Services.io.newURI(
+      "https://" + gBrowser.selectedBrowser.currentURI.hostPort,
+      null, null);
+    // Add the current host in the 'trackingprotection' consumer of
+    // the permission manager using a normalized URI. This effectively
+    // places this host on the tracking protection allowlist.
+    Services.perms.add(normalizedUrl,
+      "trackingprotection", Services.perms.ALLOW_ACTION);
+    // Telemetry for disable protection
+    let histogram = Services.telemetry.getHistogramById(
+        "TRACKING_PROTECTION_EVENTS");
+    histogram.add(1);
+    BrowserReload();
+  },
+
+  enableTrackingContentProtection: function() {
+    // Remove the current host from the 'trackingprotection' consumer
+    // of the permission manager. This effectively removes this host
+    // from the tracking protection allowlist.
+    Services.perms.remove(gBrowser.selectedBrowser.currentURI.host,
+      "trackingprotection");
+    // Telemetry for enable protection
+    let histogram = Services.telemetry.getHistogramById(
+        "TRACKING_PROTECTION_EVENTS");
+    histogram.add(2);
+    BrowserReload();
+  },
+
+};
diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -273,16 +273,17 @@ let gInitialPages = [
 #include browser-places.js
 #include browser-plugins.js
 #include browser-readinglist.js
 #include browser-safebrowsing.js
 #include browser-sidebar.js
 #include browser-social.js
 #include browser-tabview.js
 #include browser-thumbnails.js
+#include browser-trackingprotection.js
 
 #ifdef MOZ_DATA_REPORTING
 #include browser-data-submission-info-bar.js
 #endif
 
 #ifdef MOZ_SERVICES_SYNC
 #include browser-syncui.js
 #endif
@@ -957,16 +958,17 @@ var gBrowserInit = {
     // message sent between when the frame script is loaded and when
     // the listener is registered.
     DOMLinkHandler.init();
     gPageStyleMenu.init();
     LanguageDetectionListener.init();
     BrowserOnClick.init();
     DevEdition.init();
     AboutPrivateBrowsingListener.init();
+    TrackingProtection.init();
 
     let mm = window.getGroupMessageManager("browsers");
     mm.loadFrameScript("chrome://browser/content/tab-content.js", true);
     mm.loadFrameScript("chrome://browser/content/content.js", true);
     mm.loadFrameScript("chrome://browser/content/content-UITour.js", true);
     mm.loadFrameScript("chrome://global/content/manifestMessages.js", true);
 
     window.messageManager.addMessageListener("Browser:LoadURI", RedirectLoad);
@@ -6764,16 +6766,17 @@ var gIdentityHandler = {
     // - tracking content is blocked
     // - tracking content is not blocked
     if (state &
         (nsIWebProgressListener.STATE_BLOCKED_MIXED_ACTIVE_CONTENT |
          nsIWebProgressListener.STATE_LOADED_MIXED_ACTIVE_CONTENT  |
          nsIWebProgressListener.STATE_BLOCKED_TRACKING_CONTENT     |
          nsIWebProgressListener.STATE_LOADED_TRACKING_CONTENT)) {
       this.showBadContentDoorhanger(state);
+      TrackingProtection.onPopupOpen(state);
     } else if (gPrefService.getBoolPref("privacy.trackingprotection.enabled")) {
       // We didn't show the shield
       Services.telemetry.getHistogramById("TRACKING_PROTECTION_SHIELD")
         .add(0);
     }
   },
 
   showBadContentDoorhanger : function(state) {
diff --git a/browser/components/controlcenter/content/panel.inc.xul b/browser/components/controlcenter/content/panel.inc.xul
--- a/browser/components/controlcenter/content/panel.inc.xul
+++ b/browser/components/controlcenter/content/panel.inc.xul
@@ -36,9 +36,53 @@
     </vbox>
   </hbox>
   <!-- Footer button to open security page info -->
   <hbox id="identity-popup-button-container" align="center">
     <button id="identity-popup-more-info-button" flex="1"
             label="&identity.moreInfoLinkText2;"
             oncommand="gIdentityHandler.handleMoreInfoClick(event);"/>
   </hbox>
+
+
+  <hbox>
+    <vbox id="trackingContent">
+      <separator class="groove"/>
+      <hbox align="start">
+        <vbox>
+          <description class="popup-notification-item-title">
+            &trackingContentBlocked.message;
+          </description>
+          <description class="popup-notification-item-message">
+            &trackingContentBlocked.moreinfo;
+          </description>
+          <label
+            id="trackingContentHelplink"
+            class="text-link"
+            href=""
+            value="&trackingContentBlocked.learnMore;"/>
+        </vbox>
+        <button
+          type="menu" label="&trackingContentBlocked.options;"
+          sizetopopup="none">
+          <menupopup>
+            <menuitem
+              id="trackingContentActionUnblock"
+              label="&trackingContentBlocked.unblock2.label;"
+              accesskey="&trackingContentBlocked.unblock2.accesskey;"
+              oncommand="TrackingProtection.disableTrackingContentProtection();"/>
+            <menuitem
+              id="trackingContentActionBlock"
+              label="&trackingContentBlocked.block.label;"
+              accesskey="&trackingContentBlocked.block.accesskey;"
+              oncommand="TrackingProtection.enableTrackingContentProtection();"/>
+          </menupopup>
+        </button>
+      </hbox>
+      <hbox class="popup-notification-footer">
+        <description class="popup-notification-item-message popup-notification-item-message-critical">
+          &trackingContentBlocked.disabled.message;
+        </description>
+      </hbox>
+    </vbox>
+
+  </hbox>
 </panel>
