# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  6ebc251bd288c268b020815025b05854ccde5c08
Bug 1390927 - Only show the toolbox edit context menu on text inputs;r=gl

diff --git a/devtools/client/framework/test/browser_toolbox_textbox_context_menu.js b/devtools/client/framework/test/browser_toolbox_textbox_context_menu.js
--- a/devtools/client/framework/test/browser_toolbox_textbox_context_menu.js
+++ b/devtools/client/framework/test/browser_toolbox_textbox_context_menu.js
@@ -1,13 +1,15 @@
 /* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/ */
 
+"use strict";
+
 // HTML inputs don't automatically get the 'edit' context menu, so we have
 // a helper on the toolbox to do so. Make sure that shows menu items in the
 // right state, and that it works for an input inside of a panel.
 
 const URL = "data:text/html;charset=utf8,test for textbox context menu";
 const textboxToolId = "test-tool-1";
 
 registerCleanupFunction(() => {
@@ -53,29 +55,50 @@ add_task(async function checkMenuEntrySt
   is(cmdPaste.getAttribute("disabled"), "", "cmdPaste is enabled");
 });
 
 add_task(async function automaticallyBindTexbox() {
   info("Registering a tool with an input field and making sure the context menu works");
   gDevTools.registerTool({
     id: textboxToolId,
     isTargetSupported: () => true,
-    url: "data:text/html;charset=utf8,<input />",
+    url: `data:text/html;charset=utf8,<input /><input type='text' />
+            <input type='search' /><textarea></textarea><input type='radio' />`,
     label: "Context menu works without tool intervention",
     build: function (iframeWindow, toolbox) {
       this.panel = createTestPanel(iframeWindow, toolbox);
       return this.panel.open();
     },
   });
 
   let toolbox = await openNewTabAndToolbox(URL, textboxToolId);
   is(toolbox.currentToolId, textboxToolId, "The custom tool has been opened");
-  await checkTextBox(toolbox.getCurrentPanel().document.querySelector("input"), toolbox);
+
+  const doc = toolbox.getCurrentPanel().document;
+  await checkTextBox(doc.querySelector("input[type=text]"), toolbox);
+  await checkTextBox(doc.querySelector("textarea"), toolbox);
+  await checkTextBox(doc.querySelector("input[type=search]"), toolbox);
+  await checkTextBox(doc.querySelector("input:not([type])"), toolbox);
+  await checkNonTextInput(doc.querySelector("input[type=radio]"), toolbox);
 });
 
+async function checkNonTextInput(input, {textBoxContextMenuPopup}) {
+  is(textBoxContextMenuPopup.state, "closed", "The menu is closed");
+
+  info("Simulating context click on the non text input and expecting no menu to open");
+  let eventBubbledUp = new Promise(resolve => {
+    input.ownerDocument.addEventListener("contextmenu", resolve, { once: true });
+  });
+  EventUtils.synthesizeMouse(input, 2, 2, {type: "contextmenu", button: 2},
+                             input.ownerDocument.defaultView);
+  info("Waiting for event");
+  await eventBubbledUp;
+  is(textBoxContextMenuPopup.state, "closed", "The menu is still closed");
+}
+
 async function checkTextBox(textBox, {textBoxContextMenuPopup}) {
   is(textBoxContextMenuPopup.state, "closed", "The menu is closed");
 
   info("Simulating context click on the textbox and expecting the menu to open");
   let onContextMenu = once(textBoxContextMenuPopup, "popupshown");
   EventUtils.synthesizeMouse(textBox, 2, 2, {type: "contextmenu", button: 2},
                              textBox.ownerDocument.defaultView);
   await onContextMenu;
diff --git a/devtools/client/framework/toolbox.js b/devtools/client/framework/toolbox.js
--- a/devtools/client/framework/toolbox.js
+++ b/devtools/client/framework/toolbox.js
@@ -438,17 +438,21 @@ Toolbox.prototype = {
       Services.prefs.addObserver("devtools.serviceWorkers.testing.enabled",
                                  this._applyServiceWorkersTestingSettings);
 
       this.textBoxContextMenuPopup =
         this.doc.getElementById("toolbox-textbox-context-popup");
       this.textBoxContextMenuPopup.addEventListener("popupshowing",
         this._updateTextBoxMenuItems, true);
       this.doc.addEventListener("contextmenu", (e) => {
-        if (e.originalTarget.closest("input") || e.originalTarget.closest("textarea")) {
+        if (e.originalTarget.closest("input[type=text]") ||
+            e.originalTarget.closest("input[type=search]") ||
+            e.originalTarget.closest("input:not([type])") ||
+            e.originalTarget.closest("textarea")
+        ) {
           e.stopPropagation();
           e.preventDefault();
           this.openTextBoxContextMenu(e.screenX, e.screenY);
         }
       }, true);
 
       this.shortcuts = new KeyShortcuts({
         window: this.doc.defaultView
