# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  60543123c095ea5b34916e136e5ea3427b48d81f
Browser toolbox blows up after a second load

diff --git a/devtools/client/framework/toolbox-process-window.js b/devtools/client/framework/toolbox-process-window.js
--- a/devtools/client/framework/toolbox-process-window.js
+++ b/devtools/client/framework/toolbox-process-window.js
@@ -17,25 +17,26 @@ let { Task } = Cu.import("resource://gre
 /**
  * Shortcuts for accessing various debugger preferences.
  */
 let Prefs = new ViewHelpers.Prefs("devtools.debugger", {
   chromeDebuggingHost: ["Char", "chrome-debugging-host"],
   chromeDebuggingPort: ["Int", "chrome-debugging-port"]
 });
 
-let gToolbox, gClient;
+let gToolbox, gClient, transport;
 
 let connect = Task.async(function*() {
   window.removeEventListener("load", connect);
   // Initiate the connection
-  let transport = yield DebuggerClient.socketConnect({
+  transport = yield DebuggerClient.socketConnect({
     host: Prefs.chromeDebuggingHost,
     port: Prefs.chromeDebuggingPort
   });
+  console.log("TRANSPORT !!! ", transport);
   gClient = new DebuggerClient(transport);
   gClient.connect(() => {
     let addonID = getParameterByName("addonID");
 
     if (addonID) {
       gClient.listAddons(({addons}) => {
         let addonActor = addons.filter(addon => addon.id === addonID).pop();
         openToolbox({ form: addonActor, chrome: true, isTabActor: false });
@@ -54,16 +55,17 @@ function setPrefDefaults() {
   Services.prefs.setBoolPref("devtools.performance.ui.show-platform-data", true);
   Services.prefs.setBoolPref("browser.devedition.theme.showCustomizeButton", false);
   Services.prefs.setBoolPref("devtools.inspector.showAllAnonymousContent", true);
   Services.prefs.setBoolPref("browser.dom.window.dump.enabled", true);
   Services.prefs.setBoolPref("devtools.command-button-frames.enabled", true);
 }
 
 window.addEventListener("load", function() {
+  console.log("HERE");
   let cmdClose = document.getElementById("toolbox-cmd-close");
   cmdClose.addEventListener("command", onCloseCommand);
   setPrefDefaults();
   connect().catch(e => {
     let errorMessageContainer = document.getElementById("error-message-container");
     let errorMessage = document.getElementById("error-message");
     errorMessage.value = e;
     errorMessageContainer.hidden = false;
@@ -143,19 +145,25 @@ function setupThreadListeners(panel) {
 function updateBadgeText(paused) {
   let dockSupport = Cc["@mozilla.org/widget/macdocksupport;1"].getService(Ci.nsIMacDockSupport);
   dockSupport.badgeText = paused ? "▐▐ " : " ▶";
 }
 
 function onUnload() {
   window.removeEventListener("unload", onUnload);
   window.removeEventListener("message", onMessage);
+
+  console.log("UNLOADING !!! ", transport);
   let cmdClose = document.getElementById("toolbox-cmd-close");
   cmdClose.removeEventListener("command", onCloseCommand);
   gToolbox.destroy();
+  if (transport) {
+    transport.close();
+  }
+  transport = null;
 }
 
 function onMessage(event) {
   try {
     let json = JSON.parse(event.data);
     switch (json.name) {
       case "toolbox-raise":
         raise();
