
# HG changeset patch
# User Nicolas Chevobbe <nchevobbe@mozilla.com>
# Date 1498230469 -7200
# Node ID 37f73e91e90e1982eab5077fdd6015b09658a977
# Parent  1a1b2b69d72d6f6d005621aa9bca4f45b1864913
Bug 1308566 - Use ObjectInspector in Console. r=

MozReview-Commit-ID: 27AKO9qQLq7

diff --git a/devtools/client/themes/webconsole.css b/devtools/client/themes/webconsole.css
--- a/devtools/client/themes/webconsole.css
+++ b/devtools/client/themes/webconsole.css
@@ -146,20 +146,21 @@
 
 .message-flex-body {
   display: flex;
 }
 
 .message-body > * {
   white-space: pre-wrap;
   word-wrap: break-word;
+  flex-shrink: 0;
 }
 
 .message-flex-body > .message-body {
-  display: block;
+  display: flex;
   flex: auto;
 }
 
 #output-wrapper {
   direction: ltr;
   overflow: auto;
   -moz-user-select: text;
   position: relative;
@@ -744,16 +745,25 @@
 .devtools-toolbar.webconsole-filterbar-secondary {
   height: initial;
 }
 
 .webconsole-filterbar-primary .devtools-plaininput {
   flex: 1 1 100%;
 }
 
+.webconsole-output-wrapper .message {
+  width: 100vw;
+}
+
+.webconsole-output-wrapper .message-flex-body > .message-body {
+  flex-wrap: wrap;
+  max-width: 100%;
+}
+
 .webconsole-output.hideTimestamps > .message > .timestamp {
   display: none;
 }
 
 .message.startGroup .message-body > .objectBox-string,
 .message.startGroupCollapsed .message-body > .objectBox-string {
   color: var(--theme-body-color);
   font-weight: bold;
@@ -841,8 +851,10 @@
   padding: 3px 4px;
   min-width: 100px;
   -moz-user-focus: normal;
   color: var(--theme-body-color);
   border-inline-end: var(--consoletable-border);
   height: 1.25em;
   line-height: 1.25em;
 }
+
+/* Object Inspector */
diff --git a/devtools/client/webconsole/local-dev/index.js b/devtools/client/webconsole/local-dev/index.js
--- a/devtools/client/webconsole/local-dev/index.js
+++ b/devtools/client/webconsole/local-dev/index.js
@@ -16,17 +16,19 @@
   const Perf = require("react-addons-perf");
   window.Perf = Perf;
 } catch (e) {
   // Perf addon is only available in development builds
 }
 
 EventEmitter.decorate(window);
 
-require("../../themes/new-webconsole.css");
+// require("../../../skin/widgets.css");
+require("../../themes/light-theme.css");
+require("../../themes/webconsole.css");
 require("../../shared/components/reps/reps.css");
 
 pref("devtools.debugger.remote-timeout", 10000);
 pref("devtools.hud.loglimit", 1000);
 pref("devtools.webconsole.filter.error", true);
 pref("devtools.webconsole.filter.warn", true);
 pref("devtools.webconsole.filter.info", true);
 pref("devtools.webconsole.filter.log", true);
diff --git a/devtools/client/webconsole/new-console-output/actions/messages.js b/devtools/client/webconsole/new-console-output/actions/messages.js
--- a/devtools/client/webconsole/new-console-output/actions/messages.js
+++ b/devtools/client/webconsole/new-console-output/actions/messages.js
@@ -6,24 +6,26 @@
 
 "use strict";
 
 const {
   prepareMessage
 } = require("devtools/client/webconsole/new-console-output/utils/messages");
 const { IdGenerator } = require("devtools/client/webconsole/new-console-output/utils/id-generator");
 const { batchActions } = require("devtools/client/shared/redux/middleware/debounce");
+
 const {
   MESSAGE_ADD,
   NETWORK_MESSAGE_UPDATE,
   MESSAGES_CLEAR,
   MESSAGE_OPEN,
   MESSAGE_CLOSE,
   MESSAGE_TYPE,
   MESSAGE_TABLE_RECEIVE,
+  MESSAGE_OBJECT_PROPERTIES_RECEIVE,
 } = require("../constants");
 
 const defaultIdGenerator = new IdGenerator();
 
 function messageAdd(packet, idGenerator = null) {
   if (idGenerator == null) {
     idGenerator = defaultIdGenerator;
   }
@@ -99,19 +101,36 @@
   let message = prepareMessage(packet, idGenerator);
 
   return {
     type: NETWORK_MESSAGE_UPDATE,
     message,
   };
 }
 
+function messageObjectPropertiesLoad(id, client, grip) {
+  return async (dispatch) => {
+    const response = await client.getPrototypeAndProperties();
+    dispatch(messageObjectPropertiesReceive(id, grip.actor, response));
+  };
+}
+
+function messageObjectPropertiesReceive(id, actor, properties) {
+  return {
+    type: MESSAGE_OBJECT_PROPERTIES_RECEIVE,
+    id,
+    actor,
+    properties
+  };
+}
+
 module.exports = {
   messageAdd,
   messagesClear,
   messageOpen,
   messageClose,
   messageTableDataGet,
   networkMessageUpdate,
+  messageObjectPropertiesLoad,
   // for test purpose only.
   messageTableDataReceive,
 };
 
diff --git a/devtools/client/webconsole/new-console-output/components/console-output.js b/devtools/client/webconsole/new-console-output/components/console-output.js
--- a/devtools/client/webconsole/new-console-output/components/console-output.js
+++ b/devtools/client/webconsole/new-console-output/components/console-output.js
@@ -10,16 +10,17 @@
   PropTypes
 } = require("devtools/client/shared/vendor/react");
 const { connect } = require("devtools/client/shared/vendor/react-redux");
 
 const {
   getAllMessagesById,
   getAllMessagesUiById,
   getAllMessagesTableDataById,
+  getAllMessagesObjectPropertiesById,
   getAllNetworkMessagesUpdateById,
   getVisibleMessages,
   getAllRepeatById,
 } = require("devtools/client/webconsole/new-console-output/selectors/messages");
 const MessageContainer = createFactory(require("devtools/client/webconsole/new-console-output/components/message-container").MessageContainer);
 
 const ConsoleOutput = createClass({
 
@@ -31,16 +32,17 @@
     serviceContainer: PropTypes.shape({
       attachRefToHud: PropTypes.func.isRequired,
       openContextMenu: PropTypes.func.isRequired,
       sourceMapService: PropTypes.object,
     }),
     dispatch: PropTypes.func.isRequired,
     timestampsVisible: PropTypes.bool,
     messagesTableData: PropTypes.object.isRequired,
+    messagesObjectProperties: PropTypes.object.isRequired,
     messagesRepeat: PropTypes.object.isRequired,
     networkMessagesUpdate: PropTypes.object.isRequired,
     visibleMessages: PropTypes.array.isRequired,
   },
 
   componentDidMount() {
     // Do the scrolling in the nextTick since this could hit console startup performances.
     // See https://bugzilla.mozilla.org/show_bug.cgi?id=1355869
@@ -77,32 +79,35 @@
 
   render() {
     let {
       dispatch,
       visibleMessages,
       messages,
       messagesUi,
       messagesTableData,
+      messagesObjectProperties,
       messagesRepeat,
       networkMessagesUpdate,
       serviceContainer,
       timestampsVisible,
     } = this.props;
 
     let messageNodes = visibleMessages.map((messageId) => MessageContainer({
       dispatch,
       key: messageId,
+      messageId,
       serviceContainer,
       open: messagesUi.includes(messageId),
       tableData: messagesTableData.get(messageId),
       timestampsVisible,
       repeat: messagesRepeat[messageId],
       networkMessageUpdate: networkMessagesUpdate[messageId],
-      getMessage: () => messages.get(messageId)
+      getMessage: () => messages.get(messageId),
+      loadedObjectProperties: messagesObjectProperties.get(messageId),
     }));
 
     return (
       dom.div({
         className: "webconsole-output",
         onContextMenu: this.onContextMenu,
         ref: node => {
           this.outputNode = node;
@@ -125,15 +130,16 @@
 }
 
 function mapStateToProps(state, props) {
   return {
     messages: getAllMessagesById(state),
     visibleMessages: getVisibleMessages(state),
     messagesUi: getAllMessagesUiById(state),
     messagesTableData: getAllMessagesTableDataById(state),
+    messagesObjectProperties: getAllMessagesObjectPropertiesById(state),
     messagesRepeat: getAllRepeatById(state),
     networkMessagesUpdate: getAllNetworkMessagesUpdateById(state),
     timestampsVisible: state.ui.timestampsVisible,
   };
 }
 
 module.exports = connect(mapStateToProps)(ConsoleOutput);
diff --git a/devtools/client/webconsole/new-console-output/components/grip-message-body.js b/devtools/client/webconsole/new-console-output/components/grip-message-body.js
--- a/devtools/client/webconsole/new-console-output/components/grip-message-body.js
+++ b/devtools/client/webconsole/new-console-output/components/grip-message-body.js
@@ -9,93 +9,119 @@
 // If this is being run from Mocha, then the browser loader hasn't set up
 // define. We need to do that before loading Rep.
 if (typeof define === "undefined") {
   require("amd-loader");
 }
 
 // React
 const {
-  PropTypes
+  createFactory,
+  PropTypes,
 } = require("devtools/client/shared/vendor/react");
-
-const VariablesViewLink = require("devtools/client/webconsole/new-console-output/components/variables-view-link");
+const { ObjectClient } = require("devtools/shared/client/main");
 
-const { REPS, MODE } = require("devtools/client/shared/components/reps/reps");
-const Rep = REPS.Rep;
-const Grip = REPS.Grip;
-const StringRep = REPS.StringRep.rep;
+const actions = require("devtools/client/webconsole/new-console-output/actions/messages");
+const reps = require("devtools/client/shared/components/reps/reps");
+const { REPS, MODE } = reps;
+const ObjectInspector = createFactory(reps.ObjectInspector);
+const { Grip } = REPS;
 
 GripMessageBody.displayName = "GripMessageBody";
 
 GripMessageBody.propTypes = {
   grip: PropTypes.oneOfType([
     PropTypes.string,
     PropTypes.number,
     PropTypes.object,
   ]).isRequired,
   serviceContainer: PropTypes.shape({
     createElement: PropTypes.func.isRequired,
+    hudProxyClient: PropTypes.object.isRequired,
   }),
   userProvidedStyle: PropTypes.string,
   useQuotes: PropTypes.bool,
   escapeWhitespace: PropTypes.bool,
+  loadedObjectProperties: PropTypes.object,
 };
 
 GripMessageBody.defaultProps = {
   mode: MODE.LONG,
 };
 
 function GripMessageBody(props) {
   const {
+    dispatch,
+    messageId,
     grip,
     userProvidedStyle,
     serviceContainer,
     useQuotes,
-    escapeWhitespace
+    escapeWhitespace,
+    mode = MODE.LONG,
+    loadedObjectProperties,
   } = props;
 
   let styleObject;
   if (userProvidedStyle && userProvidedStyle !== "") {
     styleObject = cleanupStyle(userProvidedStyle, serviceContainer.createElement);
   }
 
   let onDOMNodeMouseOver;
   let onDOMNodeMouseOut;
   let onInspectIconClick;
   if (serviceContainer) {
     onDOMNodeMouseOver = serviceContainer.highlightDomElement
       ? (object) => serviceContainer.highlightDomElement(object)
       : null;
     onDOMNodeMouseOut = serviceContainer.unHighlightDomElement;
     onInspectIconClick = serviceContainer.openNodeInInspector
-      ? (object) => serviceContainer.openNodeInInspector(object)
+      ? (object, e) => {
+        // Stop the event propagation so we don't trigger ObjectInspector expand/collapse.
+        e.stopPropagation();
+        serviceContainer.openNodeInInspector(object);
+      }
       : null;
   }
 
-  return (
-    // @TODO once there is a longString rep, also turn off quotes for those.
-    typeof grip === "string"
-      ? StringRep({
-        object: grip,
-        useQuotes: useQuotes,
-        escapeWhitespace: escapeWhitespace,
-        mode: props.mode,
-        style: styleObject
-      })
-      : Rep({
-        object: grip,
-        objectLink: VariablesViewLink,
-        onDOMNodeMouseOver,
-        onDOMNodeMouseOut,
-        onInspectIconClick,
-        defaultRep: Grip,
-        mode: props.mode,
-      })
-  );
+  const objectInspectorProps = {
+    autoExpandDepth: 0,
+    mode,
+    // TODO: we disable focus since it's not currently working well in ObjectInspector.
+    // Let's remove the property below when problem are fixed in OI.
+    disabledFocus: true,
+    roots: [{
+      path: grip.actor || JSON.stringify(grip),
+      contents: {
+        value: grip
+      }
+    }],
+    getObjectProperties: actor => loadedObjectProperties && loadedObjectProperties[actor],
+    loadObjectProperties: object => {
+      const client = new ObjectClient(serviceContainer.hudProxyClient, object);
+      dispatch(actions.messageObjectPropertiesLoad(messageId, client, object));
+    },
+  };
+
+  if (typeof grip === "string" || grip.type === "longString") {
+    Object.assign(objectInspectorProps, {
+      useQuotes,
+      escapeWhitespace,
+      style: styleObject
+    });
+  } else {
+    Object.assign(objectInspectorProps, {
+      onDOMNodeMouseOver,
+      onDOMNodeMouseOut,
+      onInspectIconClick,
+      defaultRep: Grip,
+    });
+  }
+
+  return ObjectInspector(objectInspectorProps);
 }
 
 // Regular expression that matches the allowed CSS property names.
 const allowedStylesRegex = new RegExp(
   "^(?:-moz-)?(?:background|border|box|clear|color|cursor|display|float|font|line|" +
   "margin|padding|text|transition|outline|white-space|word|writing|" +
   "(?:min-|max-)?width|(?:min-|max-)?height)"
 );
diff --git a/devtools/client/webconsole/new-console-output/components/message-container.js b/devtools/client/webconsole/new-console-output/components/message-container.js
--- a/devtools/client/webconsole/new-console-output/components/message-container.js
+++ b/devtools/client/webconsole/new-console-output/components/message-container.js
@@ -25,45 +25,50 @@
   ["NetworkEventMessage", require("./message-types/network-event-message")],
   ["PageError", require("./message-types/page-error")]
 ]);
 
 const MessageContainer = createClass({
   displayName: "MessageContainer",
 
   propTypes: {
+    messageId: PropTypes.string.isRequired,
     open: PropTypes.bool.isRequired,
     serviceContainer: PropTypes.object.isRequired,
     tableData: PropTypes.object,
     timestampsVisible: PropTypes.bool.isRequired,
     repeat: PropTypes.number,
     networkMessageUpdate: PropTypes.object,
     getMessage: PropTypes.func.isRequired,
+    loadedObjectProperties: PropTypes.object,
   },
 
   getDefaultProps: function () {
     return {
       open: false,
     };
   },
 
   shouldComponentUpdate(nextProps, nextState) {
     const repeatChanged = this.props.repeat !== nextProps.repeat;
     const openChanged = this.props.open !== nextProps.open;
     const tableDataChanged = this.props.tableData !== nextProps.tableData;
     const timestampVisibleChanged =
       this.props.timestampsVisible !== nextProps.timestampsVisible;
     const networkMessageUpdateChanged =
       this.props.networkMessageUpdate !== nextProps.networkMessageUpdate;
+    const loadedObjectPropertiesChanged =
+      this.props.loadedObjectProperties !== nextProps.loadedObjectProperties;
 
     return repeatChanged
       || openChanged
       || tableDataChanged
       || timestampVisibleChanged
-      || networkMessageUpdateChanged;
+      || networkMessageUpdateChanged
+      || loadedObjectPropertiesChanged;
   },
 
   render() {
     const message = this.props.getMessage();
 
     let MessageComponent = getMessageComponent(message);
     return MessageComponent(Object.assign({message, indent: message.indent}, this.props));
   }
diff --git a/devtools/client/webconsole/new-console-output/components/message-types/console-api-call.js b/devtools/client/webconsole/new-console-output/components/message-types/console-api-call.js
--- a/devtools/client/webconsole/new-console-output/components/message-types/console-api-call.js
+++ b/devtools/client/webconsole/new-console-output/components/message-types/console-api-call.js
@@ -16,21 +16,23 @@
 const ConsoleTable = createFactory(require("devtools/client/webconsole/new-console-output/components/console-table"));
 const {isGroupType, l10n} = require("devtools/client/webconsole/new-console-output/utils/messages");
 
 const Message = createFactory(require("devtools/client/webconsole/new-console-output/components/message"));
 
 ConsoleApiCall.displayName = "ConsoleApiCall";
 
 ConsoleApiCall.propTypes = {
+  dispatch: PropTypes.func.isRequired,
   message: PropTypes.object.isRequired,
   open: PropTypes.bool,
   serviceContainer: PropTypes.object.isRequired,
   indent: PropTypes.number.isRequired,
   timestampsVisible: PropTypes.bool.isRequired,
+  loadedObjectProperties: PropTypes.object,
 };
 
 ConsoleApiCall.defaultProps = {
   open: false,
   indent: 0,
 };
 
 function ConsoleApiCall(props) {
@@ -38,41 +40,51 @@
     dispatch,
     message,
     open,
     tableData,
     serviceContainer,
     indent,
     timestampsVisible,
     repeat,
+    loadedObjectProperties,
   } = props;
   const {
     id: messageId,
     source,
     type,
     level,
     stacktrace,
     frame,
     timeStamp,
     parameters,
     messageText,
     userProvidedStyles,
   } = message;
 
   let messageBody;
+  const messageBodyConfig = {
+    dispatch,
+    loadedObjectProperties,
+    messageId,
+    parameters,
+    userProvidedStyles,
+    serviceContainer,
+  };
+
   if (type === "trace") {
     messageBody = dom.span({className: "cm-variable"}, "console.trace()");
   } else if (type === "assert") {
-    let reps = formatReps(parameters);
+    let reps = formatReps(messageBodyConfig);
     messageBody = dom.span({ className: "cm-variable" }, "Assertion failed: ", reps);
   } else if (type === "table") {
     // TODO: Chrome does not output anything, see if we want to keep this
     messageBody = dom.span({className: "cm-variable"}, "console.table()");
   } else if (parameters) {
-    messageBody = formatReps(parameters, userProvidedStyles, serviceContainer);
+    messageBody = formatReps(messageBodyConfig);
   } else {
     messageBody = messageText;
   }
 
   let attachment = null;
   if (type === "table") {
     attachment = ConsoleTable({
       dispatch,
@@ -109,26 +121,38 @@
     serviceContainer,
     dispatch,
     indent,
     timeStamp,
     timestampsVisible,
   });
 }
 
-function formatReps(parameters, userProvidedStyles, serviceContainer) {
+function formatReps(options = {}) {
+  const {
+    dispatch,
+    loadedObjectProperties,
+    messageId,
+    parameters,
+    serviceContainer,
+    userProvidedStyles,
+  } = options;
+
   return (
     parameters
       // Get all the grips.
       .map((grip, key) => GripMessageBody({
+        dispatch,
+        messageId,
         grip,
         key,
         userProvidedStyle: userProvidedStyles ? userProvidedStyles[key] : null,
         serviceContainer,
         useQuotes: false,
+        loadedObjectProperties,
       }))
       // Interleave spaces.
       .reduce((arr, v, i) => {
         return i + 1 < parameters.length
           ? arr.concat(v, dom.span({}, " "))
           : arr.concat(v);
       }, [])
   );
diff --git a/devtools/client/webconsole/new-console-output/components/message-types/evaluation-result.js b/devtools/client/webconsole/new-console-output/components/message-types/evaluation-result.js
--- a/devtools/client/webconsole/new-console-output/components/message-types/evaluation-result.js
+++ b/devtools/client/webconsole/new-console-output/components/message-types/evaluation-result.js
@@ -12,32 +12,36 @@
   PropTypes
 } = require("devtools/client/shared/vendor/react");
 const Message = createFactory(require("devtools/client/webconsole/new-console-output/components/message"));
 const GripMessageBody = require("devtools/client/webconsole/new-console-output/components/grip-message-body");
 
 EvaluationResult.displayName = "EvaluationResult";
 
 EvaluationResult.propTypes = {
+  dispatch: PropTypes.func.isRequired,
   message: PropTypes.object.isRequired,
   indent: PropTypes.number.isRequired,
   timestampsVisible: PropTypes.bool.isRequired,
   serviceContainer: PropTypes.object,
+  loadedObjectProperties: PropTypes.object,
 };
 
 EvaluationResult.defaultProps = {
   indent: 0,
 };
 
 function EvaluationResult(props) {
   const {
+    dispatch,
     message,
     serviceContainer,
     indent,
     timestampsVisible,
+    loadedObjectProperties,
   } = props;
 
   const {
     source,
     type,
     level,
     id: messageId,
     exceptionDocURL,
@@ -54,20 +58,23 @@
     } else if (
       typeof message.messageText === "object"
       && message.messageText.type === "longString"
     ) {
       messageBody = `${message.messageText.initial}…`;
     }
   } else {
     messageBody = GripMessageBody({
+      dispatch,
+      messageId,
       grip: parameters,
       serviceContainer,
       useQuotes: true,
       escapeWhitespace: false,
+      loadedObjectProperties,
     });
   }
 
   const topLevelClasses = ["cm-s-mozilla"];
 
   return Message({
     source,
     type,
diff --git a/devtools/client/webconsole/new-console-output/components/moz.build b/devtools/client/webconsole/new-console-output/components/moz.build
--- a/devtools/client/webconsole/new-console-output/components/moz.build
+++ b/devtools/client/webconsole/new-console-output/components/moz.build
@@ -13,11 +13,10 @@
     'console-table.js',
     'filter-bar.js',
     'filter-button.js',
     'grip-message-body.js',
     'message-container.js',
     'message-icon.js',
     'message-indent.js',
     'message-repeat.js',
-    'message.js',
-    'variables-view-link.js'
+    'message.js'
 )
diff --git a/devtools/client/webconsole/new-console-output/components/variables-view-link.js b/devtools/client/webconsole/new-console-output/components/variables-view-link.js
deleted file mode 100644
--- a/devtools/client/webconsole/new-console-output/components/variables-view-link.js
+++ /dev/null
@@ -1,39 +0,0 @@
-/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
-/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-"use strict";
-
-// React & Redux
-const {
-  DOM: dom,
-  PropTypes
-} = require("devtools/client/shared/vendor/react");
-const {openVariablesView} = require("devtools/client/webconsole/new-console-output/utils/variables-view");
-
-VariablesViewLink.displayName = "VariablesViewLink";
-
-VariablesViewLink.propTypes = {
-  object: PropTypes.object.isRequired
-};
-
-function VariablesViewLink(props, ...children) {
-  const { className, object } = props;
-  const classes = ["cm-variable"];
-  if (className) {
-    classes.push(className);
-  }
-  return (
-    dom.a({
-      onClick: openVariablesView.bind(null, object),
-      // Context menu can use this actor id information to enable additional menu items.
-      "data-link-actor-id": object.actor,
-      className: classes.join(" "),
-      draggable: false,
-    }, ...children)
-  );
-}
-
-module.exports = VariablesViewLink;
diff --git a/devtools/client/webconsole/new-console-output/constants.js b/devtools/client/webconsole/new-console-output/constants.js
--- a/devtools/client/webconsole/new-console-output/constants.js
+++ b/devtools/client/webconsole/new-console-output/constants.js
@@ -8,16 +8,17 @@
 const actionTypes = {
   BATCH_ACTIONS: "BATCH_ACTIONS",
   MESSAGE_ADD: "MESSAGE_ADD",
   MESSAGES_CLEAR: "MESSAGES_CLEAR",
   MESSAGE_OPEN: "MESSAGE_OPEN",
   MESSAGE_CLOSE: "MESSAGE_CLOSE",
   NETWORK_MESSAGE_UPDATE: "NETWORK_MESSAGE_UPDATE",
   MESSAGE_TABLE_RECEIVE: "MESSAGE_TABLE_RECEIVE",
+  MESSAGE_OBJECT_PROPERTIES_RECEIVE: "MESSAGE_OBJECT_PROPERTIES_RECEIVE",
   REMOVED_MESSAGES_CLEAR: "REMOVED_MESSAGES_CLEAR",
   TIMESTAMPS_TOGGLE: "TIMESTAMPS_TOGGLE",
   FILTER_TOGGLE: "FILTER_TOGGLE",
   FILTER_TEXT_SET: "FILTER_TEXT_SET",
   FILTERS_CLEAR: "FILTERS_CLEAR",
   FILTER_BAR_TOGGLE: "FILTER_BAR_TOGGLE",
 };
 
diff --git a/devtools/client/webconsole/new-console-output/reducers/messages.js b/devtools/client/webconsole/new-console-output/reducers/messages.js
--- a/devtools/client/webconsole/new-console-output/reducers/messages.js
+++ b/devtools/client/webconsole/new-console-output/reducers/messages.js
@@ -22,16 +22,19 @@
   messagesById: Immutable.OrderedMap(),
   // Array of the visible messages.
   visibleMessages: [],
   // List of the message ids which are opened.
   messagesUiById: Immutable.List(),
   // Map of the form {messageId : tableData}, which represent the data passed
   // as an argument in console.table calls.
   messagesTableDataById: Immutable.Map(),
+  // Map of the form {messageId : {[actor]: properties}}, which represent the properties
+  // of the grips logged in a message.
+  messagesObjectPropertiesById: Immutable.Map(),
   // Map of the form {groupMessageId : groupArray},
   // where groupArray is the list of of all the parent groups' ids of the groupMessageId.
   groupsById: Immutable.Map(),
   // Message id of the current group (no corresponding console.groupEnd yet).
   currentGroup: null,
   // List of removed messages is used to release related (parameters) actors.
   // This array is not supposed to be consumed by any UI component.
   removedMessages: [],
@@ -42,16 +45,17 @@
   networkMessagesUpdateById: {},
 });
 
 function messages(state = new MessageState(), action, filtersState, prefsState) {
   const {
     messagesById,
     messagesUiById,
     messagesTableDataById,
+    messagesObjectPropertiesById,
     networkMessagesUpdateById,
     groupsById,
     currentGroup,
     repeatById,
     visibleMessages,
   } = state;
 
   const {logLimit} = prefsState;
@@ -187,16 +191,28 @@
             )
           );
         }
       });
 
     case constants.MESSAGE_TABLE_RECEIVE:
       const {id, data} = action;
       return state.set("messagesTableDataById", messagesTableDataById.set(id, data));
+
+    case constants.MESSAGE_OBJECT_PROPERTIES_RECEIVE:
+      return state.set(
+        "messagesObjectPropertiesById",
+        messagesObjectPropertiesById.set(
+          action.id,
+          Object.assign({
+            [action.actor]: action.properties
+          }, messagesObjectPropertiesById.get(action.id))
+        )
+      );
+
     case constants.NETWORK_MESSAGE_UPDATE:
       return state.set(
         "networkMessagesUpdateById",
         Object.assign({}, networkMessagesUpdateById, {
           [action.message.id]: action.message
         })
       );
 
diff --git a/devtools/client/webconsole/new-console-output/selectors/messages.js b/devtools/client/webconsole/new-console-output/selectors/messages.js
--- a/devtools/client/webconsole/new-console-output/selectors/messages.js
+++ b/devtools/client/webconsole/new-console-output/selectors/messages.js
@@ -16,16 +16,20 @@
 function getAllMessagesUiById(state) {
   return state.messages.messagesUiById;
 }
 
 function getAllMessagesTableDataById(state) {
   return state.messages.messagesTableDataById;
 }
 
+function getAllMessagesObjectPropertiesById(state) {
+  return state.messages.messagesObjectPropertiesById;
+}
+
 function getAllGroupsById(state) {
   return state.messages.groupsById;
 }
 
 function getCurrentGroup(state) {
   return state.messages.currentGroup;
 }
 
@@ -46,9 +50,10 @@
   getAllMessagesById,
   getAllMessagesUiById,
   getAllMessagesTableDataById,
   getAllGroupsById,
   getCurrentGroup,
   getVisibleMessages,
   getAllRepeatById,
   getAllNetworkMessagesUpdateById,
+  getAllMessagesObjectPropertiesById,
 };
diff --git a/devtools/client/webconsole/new-console-output/test/fixtures/ObjectClient.js b/devtools/client/webconsole/new-console-output/test/fixtures/ObjectClient.js
--- a/devtools/client/webconsole/new-console-output/test/fixtures/ObjectClient.js
+++ b/devtools/client/webconsole/new-console-output/test/fixtures/ObjectClient.js
@@ -1,9 +1,21 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
 class ObjectClient {
+  constructor(client, grip) {
+    this._grip = grip;
+    this._client = client;
+    this.request = this._client.request;
+  }
+
+  getPrototypeAndProperties() {
+    return this._client.request({
+      to: this._grip.actor,
+      type: "prototypeAndProperties"
+    });
+  }
 }
 
-module.exports = ObjectClient;
+module.exports = { ObjectClient };

