# HG changeset patch
# Parent fd5133a30882d420161200ff9d260a197587b00d
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 862558 - Web Console should always be available / visible

diff --git a/browser/devtools/framework/toolbox.js b/browser/devtools/framework/toolbox.js
--- a/browser/devtools/framework/toolbox.js
+++ b/browser/devtools/framework/toolbox.js
@@ -225,16 +225,52 @@ Toolbox.prototype = {
     }, true);
   },
 
   _addToolSwitchingKeys: function() {
     let nextKey = this.doc.getElementById("toolbox-next-tool-key");
     nextKey.addEventListener("command", this.selectNextTool.bind(this), true);
     let prevKey = this.doc.getElementById("toolbox-previous-tool-key");
     prevKey.addEventListener("command", this.selectPreviousTool.bind(this), true);
+    let splitConsole = this.doc.getElementById("toolbox-split-console-key");
+    splitConsole.addEventListener("command", this.toggleSplitConsole.bind(this), false);
+  },
+
+  /**
+   * Make sure that the console is showing up properly based on all the
+   * possible conditions.
+   *   1) If the console tab is selected, then regardless of split state
+   *      it should take up the full height of the deck, and we should
+   *      hide the deck and splitter.
+   *   2) If the console tab is not selected and it is split, then we should
+   *      show the splitter, deck, and console.
+   *   3) If the console tab is not selected and it is *not* split,
+   *      then we should hide the console and splitter, and show the deck
+   *      at full height.
+   */
+  _refreshConsoleDisplay: function() {
+    let deck = this.doc.getElementById("toolbox-deck");
+    let webconsolePanel = this.doc.getElementById("toolbox-panel-webconsole");
+    let splitter = this.doc.getElementById("toolbox-console-splitter");
+    let openedConsolePanel = this.currentToolId === "webconsole";
+
+    if (openedConsolePanel) {
+      deck.setAttribute("collapsed", "true");
+      splitter.removeAttribute("hidden");
+      webconsolePanel.removeAttribute("collapsed");
+    } else {
+      deck.removeAttribute("collapsed");
+      if (this._splitConsole) {
+        webconsolePanel.removeAttribute("collapsed");
+        splitter.removeAttribute("hidden");
+      } else {
+        splitter.setAttribute("hidden", "true");
+        webconsolePanel.setAttribute("collapsed", "true");
+      }
+    }
   },
 
   /**
    * Wire up the listeners for the zoom keys.
    */
   _addZoomKeys: function() {
     let inKey = this.doc.getElementById("toolbox-zoom-in-key");
     inKey.addEventListener("command", this.zoomIn.bind(this), true);
@@ -489,18 +525,21 @@ Toolbox.prototype = {
       label.setAttribute("crop", "end");
       label.setAttribute("flex", "1");
       radio.appendChild(label);
       radio.setAttribute("flex", "1");
     }
 
     let vbox = this.doc.createElement("vbox");
     vbox.className = "toolbox-panel";
-    vbox.id = "toolbox-panel-" + id;
 
+    // There is already a container for the frame for the webconsole.
+    if (!this.doc.getElementById("toolbox-panel-" + id)) {
+      vbox.id = "toolbox-panel-" + id;
+    }
 
     // If there is no tab yet, or the ordinal to be added is the largest one.
     if (tabs.childNodes.length == 0 ||
         +tabs.lastChild.getAttribute("ordinal") <= toolDefinition.ordinal) {
       tabs.appendChild(radio);
       deck.appendChild(vbox);
     } else {
       // else, iterate over all the tabs to get the correct location.
@@ -581,17 +620,16 @@ Toolbox.prototype = {
     let selected = this.doc.querySelector(".devtools-tab[selected]");
     if (selected) {
       selected.removeAttribute("selected");
     }
 
     let tab = this.doc.getElementById("toolbox-tab-" + id);
     tab.setAttribute("selected", "true");
 
-
     if (this.currentToolId == id) {
       // re-focus tool to get key events again
       this.focusTool(id);
 
       // Return the existing panel in order to have a consistent return value.
       return promise.resolve(this._toolPanels.get(id));
     }
 
@@ -624,16 +662,17 @@ Toolbox.prototype = {
     }
     tabstrip.selectedItem = tab;
 
     // and select the right iframe
     let deck = this.doc.getElementById("toolbox-deck");
     deck.selectedIndex = index;
 
     this.currentToolId = id;
+    this._refreshConsoleDisplay();
     if (id != "options") {
       Services.prefs.setCharPref(this._prefs.LAST_TOOL, id);
     }
 
     return this.loadTool(id).then(panel => {
       // focus the tool's frame to start receiving key events
       this.focusTool(id);
 
@@ -649,16 +688,38 @@ Toolbox.prototype = {
    *         The id of tool to focus
    */
   focusTool: function(id) {
     let iframe = this.doc.getElementById("toolbox-panel-iframe-" + id);
     iframe.focus();
   },
 
   /**
+   * Toggles the state of the console being split.  If the console panel
+   * is already selected, then this command is ignored.
+   */
+  toggleSplitConsole: function() {
+    let openedConsolePanel = this.currentToolId === "webconsole";
+
+    // Don't allow changes when console is open, since it could be confusing
+    if (!openedConsolePanel) {
+      this._splitConsole = !this._splitConsole;
+
+      if (this._splitConsole) {
+        this.loadTool("webconsole").then(() => {
+          // XXX: This doesn't seem to refocus after opening split console,
+          // clicking inside of other panel, then reopening.
+          this.focusTool("webconsole");
+        });
+      }
+      this._refreshConsoleDisplay();
+    }
+  },
+
+  /**
    * Loads the tool next to the currently selected tool.
    */
   selectNextTool: function() {
     let selected = this.doc.querySelector(".devtools-tab[selected]");
     let next = selected.nextSibling || selected.parentNode.firstChild;
     let tool = next.getAttribute("toolid");
     return this.selectTool(tool);
   },
diff --git a/browser/devtools/framework/toolbox.xul b/browser/devtools/framework/toolbox.xul
--- a/browser/devtools/framework/toolbox.xul
+++ b/browser/devtools/framework/toolbox.xul
@@ -26,16 +26,19 @@
     <key id="toolbox-next-tool-key"
          key="&toolboxNextTool.key;"
          oncommand="void(0);"
          modifiers="accel"/>
     <key id="toolbox-previous-tool-key"
          key="&toolboxPreviousTool.key;"
          oncommand="void(0);"
          modifiers="accel"/>
+    <key id="toolbox-split-console-key"
+         keycode="VK_ESCAPE"
+         oncommand="void(0);"/>
     <key id="toolbox-zoom-in-key"
          key="&toolboxZoomIn.key;"
          oncommand="void(0);"
          modifiers="accel"/>
     <key id="toolbox-zoom-in-key2"
          key="&toolboxZoomIn.key2;"
          oncommand="void(0);"
          modifiers="accel"/>
@@ -69,10 +72,12 @@
         <toolbarbutton id="toolbox-close"
                        class="devtools-closebutton"
                        tooltiptext="&toolboxCloseButton.tooltip;"/>
       </hbox>
 #endif
     </toolbar>
     <deck id="toolbox-deck" flex="1">
     </deck>
+    <splitter id="toolbox-console-splitter" class="devtools-horizontal-splitter" collapse="before" hidden="true" />
+    <box id="toolbox-panel-webconsole" flex="1" collapsed="true"></box>
   </notificationbox>
 </window>
diff --git a/browser/devtools/webconsole/test/browser.ini b/browser/devtools/webconsole/test/browser.ini
--- a/browser/devtools/webconsole/test/browser.ini
+++ b/browser/devtools/webconsole/test/browser.ini
@@ -231,11 +231,12 @@ skip-if = os == "linux"
 [browser_webconsole_message_node_id.js]
 [browser_webconsole_netlogging.js]
 [browser_webconsole_network_panel.js]
 [browser_webconsole_notifications.js]
 [browser_webconsole_output_copy_newlines.js]
 [browser_webconsole_output_order.js]
 [browser_webconsole_property_provider.js]
 [browser_webconsole_scratchpad_panel_link.js]
+[browser_webconsole_split.js]
 [browser_webconsole_view_source.js]
 [browser_webconsole_reflow.js]
 [browser_webconsole_log_file_filter.js]
diff --git a/browser/devtools/webconsole/test/browser_webconsole_split.js b/browser/devtools/webconsole/test/browser_webconsole_split.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/webconsole/test/browser_webconsole_split.js
@@ -0,0 +1,69 @@
+/* vim:set ts=2 sw=2 sts=2 et: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+function test()
+{
+  addTab("data:text/html;charset=utf-8,Web Console test for splitting");
+
+
+  function openInspector(callback)
+  {
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+    gDevTools.showToolbox(target, "inspector").then(function(toolbox) {
+      callback(toolbox.getCurrentPanel(), toolbox);
+    }).then(null, console.error);
+  }
+
+
+  browser.addEventListener("load", function onLoad() {
+    browser.removeEventListener("load", onLoad, true);
+
+    openInspector((inspector, toolbox) => {
+      EventUtils.sendKey("ESCAPE", inspector.panelWin);
+
+      let win = toolbox.doc.defaultView;
+      let deck = toolbox.doc.getElementById("toolbox-deck");
+      let webconsolePanel = toolbox.doc.getElementById("toolbox-panel-webconsole");
+      let splitter = toolbox.doc.getElementById("toolbox-console-splitter");
+
+      let initialDeckHeight = parseInt(win.getComputedStyle(deck).getPropertyValue("height"));
+      let initialWebconsoleHeight = parseInt(win.getComputedStyle(webconsolePanel).getPropertyValue("height"));
+      let initialSplitterVisibility = !splitter.getAttribute("hidden");
+      let openedConsolePanel = toolbox.currentToolId === "webconsole";
+
+      ok (!initialSplitterVisibility, "Splitter is hidden by default");
+      ok (initialDeckHeight > 0, "Deck has a height > 0 by default");
+      is (initialWebconsoleHeight, 0, "Web console is collapsed by default");
+      ok (!openedConsolePanel, "The console panel is not the current tool.");
+
+      toolbox.toggleSplitConsole();
+
+      let splitDeckHeight = parseInt(win.getComputedStyle(deck).getPropertyValue("height"));
+      let splitWebconsoleHeight = parseInt(win.getComputedStyle(webconsolePanel).getPropertyValue("height"));
+      let splitSplitterVisibility = !splitter.getAttribute("hidden");
+      let openedConsolePanel = toolbox.currentToolId === "webconsole";
+
+      ok (splitSplitterVisibility, "Splitter is visible when console is split");
+      ok (splitDeckHeight > 0, "Deck has a height > 0 when console is split");
+      ok (splitWebconsoleHeight > 0, "Web console has a height > 0 when console is split");
+      ok (!openedConsolePanel, "The console panel is not the current tool.");
+
+      toolbox.toggleSplitConsole();
+
+      let finalDeckHeight = parseInt(win.getComputedStyle(deck).getPropertyValue("height"));
+      let finalWebconsoleHeight = parseInt(win.getComputedStyle(webconsolePanel).getPropertyValue("height"));
+      let finalSplitterVisibility = !splitter.getAttribute("hidden");
+      let openedConsolePanel = toolbox.currentToolId === "webconsole";
+
+      ok (!finalSplitterVisibility, "Splitter is hidden by default");
+      ok (finalDeckHeight > 0, "Deck has a height > 0 by default");
+      is (finalWebconsoleHeight, 0, "Web console is collapsed by default");
+      ok (!openedConsolePanel, "The console panel is not the current tool.");
+
+      finishTest();
+    });
+
+  }, true);
+}
