# vim: se ft=diff :
# HG changeset patch
# User Lin Clark <lclark@mozilla.com>
# Date 2016-04-29 13:16
# Parent  fbc252584fd2a29df60fe4913db629538c314af3
Bug 1260283 - Implement new console output frontend behind a pref. r=bgrins

MozReview-Commit-ID: 54Tl5b5T2EJ
* * *
Bug 1260283 - Implement new console output frontend behind a pref. r=linclark

diff --git a/devtools/client/webconsole/new-console-output/actions/messages.js b/devtools/client/webconsole/new-console-output/actions/messages.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/actions/messages.js
@@ -0,0 +1,33 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const {
+  prepareMessage
+} = require("devtools/client/webconsole/new-console-output/utils/messages");
+
+const {
+  MESSAGE_ADD,
+  MESSAGES_CLEAR,
+} = require("../constants");
+
+function messageAdd(packet) {
+  let message = prepareMessage(packet);
+  return {
+    type: MESSAGE_ADD,
+    message
+  };
+}
+
+function messagesClear() {
+  return {
+    type: MESSAGES_CLEAR
+  };
+}
+
+exports.messageAdd = messageAdd;
+exports.messagesClear = messagesClear;
diff --git a/devtools/client/webconsole/new-console-output/actions/moz.build b/devtools/client/webconsole/new-console-output/actions/moz.build
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/actions/moz.build
@@ -0,0 +1,8 @@
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+DevToolsModules(
+    'messages.js',
+)
diff --git a/devtools/client/webconsole/new-console-output/dummy-child-component.js b/devtools/client/webconsole/new-console-output/components/console-output.js
rename from devtools/client/webconsole/new-console-output/dummy-child-component.js
rename to devtools/client/webconsole/new-console-output/components/console-output.js
--- a/devtools/client/webconsole/new-console-output/dummy-child-component.js
+++ b/devtools/client/webconsole/new-console-output/components/console-output.js
@@ -2,30 +2,32 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const React = require("devtools/client/shared/vendor/react");
 const { connect } = require("devtools/client/shared/vendor/react-redux");
 const DOM = React.DOM;
 
-var DummyChildComponent = React.createClass({
-  displayName: "DummyChildComponent",
+const MessageContainer = React.createFactory(require("devtools/client/webconsole/new-console-output/components/message-container").MessageContainer);
+
+const ConsoleOutput = React.createClass({
+  displayName: "ConsoleOutput",
 
   render() {
     let messageNodes = this.props.messages.map(function(message) {
       return (
-        DOM.div({}, message.arguments.join(" "))
+        MessageContainer({ message })
       );
     });
     return (
       DOM.div({}, messageNodes)
     );
   }
 });
 
 const mapStateToProps = (state) => {
   return {
     messages: state.messages
   };
 };
 
-module.exports = connect(mapStateToProps)(DummyChildComponent);
+module.exports = connect(mapStateToProps)(ConsoleOutput);
diff --git a/devtools/client/webconsole/new-console-output/components/message-container.js b/devtools/client/webconsole/new-console-output/components/message-container.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/components/message-container.js
@@ -0,0 +1,43 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+// React & Redux
+const {
+  createClass,
+  createElement,
+  DOM: dom,
+  PropTypes
+} = require("devtools/client/shared/vendor/react");
+
+const MessageContainer = createClass({
+  displayName: "MessageContainer",
+
+  propTypes: {
+    message: PropTypes.object.isRequired,
+  },
+
+  render() {
+    debugger
+    let MessageComponent = getMessageComponent(this.props.message.messageType);
+    return createElement(MessageComponent, { message: this.props.message });
+  }
+});
+
+function getMessageComponent(messageType) {
+  let MessageComponent;
+  switch (messageType) {
+    case "ConsoleApiCall":
+      MessageComponent = require("devtools/client/webconsole/new-console-output/components/message-types/console-api-call").ConsoleApiCall;
+      break;
+  }
+  return MessageComponent;
+}
+
+module.exports.MessageContainer = MessageContainer;
+// Exported so we can test it with unit tests.
+module.exports.getMessageComponent = getMessageComponent;
diff --git a/devtools/client/webconsole/new-console-output/components/message-repeat.js b/devtools/client/webconsole/new-console-output/components/message-repeat.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/components/message-repeat.js
@@ -0,0 +1,28 @@
+
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+// React & Redux
+const {
+  DOM: dom,
+  PropTypes
+} = require("devtools/client/shared/vendor/react");
+
+MessageRepeat.displayName = "MessageRepeat";
+
+MessageRepeat.propTypes = {
+  repeat: PropTypes.number.isRequired
+};
+
+function MessageRepeat(props) {
+  const { repeat } = props;
+  const visibility = repeat > 1 ? "visible" : "hidden";
+  return dom.span({className: "message-repeats", style: {visibility}}, repeat);
+}
+
+exports.MessageRepeat = MessageRepeat;
diff --git a/devtools/client/webconsole/new-console-output/components/message-types/console-api-call.js b/devtools/client/webconsole/new-console-output/components/message-types/console-api-call.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/components/message-types/console-api-call.js
@@ -0,0 +1,53 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+// React & Redux
+const {
+  createElement,
+  DOM: dom,
+  PropTypes
+} = require("devtools/client/shared/vendor/react");
+const { MessageRepeat } = require("devtools/client/webconsole/new-console-output/components/message-repeat");
+
+ConsoleApiCall.displayName = "ConsoleApiCall";
+
+ConsoleApiCall.propTypes = {
+  message: PropTypes.object.isRequired,
+};
+
+function ConsoleApiCall(props) {
+  const { message } = props;
+  const messageBody =
+    dom.span({className: "message-body devtools-monospace"},
+      formatTextContent(message.data.arguments));
+  const repeat = createElement(MessageRepeat, {repeat: message.repeat});
+  const children = [
+    messageBody,
+    repeat
+  ];
+
+  return dom.span({className: "message-body-wrapper"},
+    dom.span({},
+      dom.span({className: "message-flex-body"},
+        children
+      )
+    )
+  );
+}
+
+function formatTextContent(args) {
+  return args.map(function(arg, i, arr) {
+    const str = dom.span({className: "console-string"}, arg);
+    if (i < arr.length - 1) {
+      return [str, " "];
+    }
+    return str;
+  });
+}
+
+module.exports.ConsoleApiCall = ConsoleApiCall;
diff --git a/devtools/client/webconsole/new-console-output/components/message-types/moz.build b/devtools/client/webconsole/new-console-output/components/message-types/moz.build
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/components/message-types/moz.build
@@ -0,0 +1,8 @@
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+DevToolsModules(
+    'console-api-call.js',
+)
diff --git a/devtools/client/webconsole/new-console-output/components/moz.build b/devtools/client/webconsole/new-console-output/components/moz.build
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/components/moz.build
@@ -0,0 +1,14 @@
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+DIRS += [
+    'message-types'
+]
+
+DevToolsModules(
+    'console-output.js',
+    'message-container.js',
+    'message-repeat.js'
+)
diff --git a/devtools/client/webconsole/new-console-output/constants.js b/devtools/client/webconsole/new-console-output/constants.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/constants.js
@@ -0,0 +1,76 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const actionTypes = {
+  MESSAGE_ADD: "MESSAGE_ADD",
+  MESSAGES_CLEAR: "MESSAGES_CLEAR",
+};
+
+const categories = {
+  CATEGORY_NETWORK: 0,
+  CATEGORY_CSS: 1,
+  CATEGORY_JS: 2,
+  CATEGORY_WEBDEV: 3,
+  CATEGORY_INPUT: 4,
+  CATEGORY_OUTPUT: 5,
+  CATEGORY_SECURITY: 6,
+  CATEGORY_SERVER: 7
+};
+
+const severities = {
+  SEVERITY_ERROR: 0,
+  SEVERITY_WARNING: 1,
+  SEVERITY_INFO: 2,
+  SEVERITY_LOG: 3
+};
+
+// The fragment of a CSS class name that identifies categories/severities.
+const fragments = {
+  CATEGORY_CLASS_FRAGMENTS: [
+    "network",
+    "cssparser",
+    "exception",
+    "console",
+    "input",
+    "output",
+    "security",
+    "server",
+  ],
+  SEVERITY_CLASS_FRAGMENTS: [
+    "error",
+    "warn",
+    "info",
+    "log",
+  ]
+};
+
+// A mapping from the console API log event levels to the Web Console
+// severities.
+const levels = {
+  LEVELS: {
+    error: severities.SEVERITY_ERROR,
+    exception: severities.SEVERITY_ERROR,
+    assert: severities.SEVERITY_ERROR,
+    warn: severities.SEVERITY_WARNING,
+    info: severities.SEVERITY_INFO,
+    log: severities.SEVERITY_LOG,
+    trace: severities.SEVERITY_LOG,
+    table: severities.SEVERITY_LOG,
+    debug: severities.SEVERITY_LOG,
+    dir: severities.SEVERITY_LOG,
+    dirxml: severities.SEVERITY_LOG,
+    group: severities.SEVERITY_LOG,
+    groupCollapsed: severities.SEVERITY_LOG,
+    groupEnd: severities.SEVERITY_LOG,
+    time: severities.SEVERITY_LOG,
+    timeEnd: severities.SEVERITY_LOG,
+    count: severities.SEVERITY_LOG
+  }
+};
+
+// Combine into a single constants object
+module.exports = Object.assign({}, actionTypes, categories, severities, fragments, levels);
diff --git a/devtools/client/webconsole/new-console-output/moz.build b/devtools/client/webconsole/new-console-output/moz.build
--- a/devtools/client/webconsole/new-console-output/moz.build
+++ b/devtools/client/webconsole/new-console-output/moz.build
@@ -1,14 +1,25 @@
 # vim: set filetype=python:
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 DIRS += [
-    'reducers'
+    'actions',
+    'components',
+    'reducers',
+    'utils',
 ]
 
 DevToolsModules(
-    'dummy-child-component.js',
+    'constants.js',
     'main.js',
     'output-wrapper-thingy.js',
+    'store.js',
 )
+
+MOCHITEST_CHROME_MANIFESTS += ['test/components/chrome.ini']
+XPCSHELL_TESTS_MANIFESTS += [
+  'test/actions/xpcshell.ini',
+  'test/store/xpcshell.ini'
+]
+
diff --git a/devtools/client/webconsole/new-console-output/output-wrapper-thingy.js b/devtools/client/webconsole/new-console-output/output-wrapper-thingy.js
--- a/devtools/client/webconsole/new-console-output/output-wrapper-thingy.js
+++ b/devtools/client/webconsole/new-console-output/output-wrapper-thingy.js
@@ -2,41 +2,35 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 // React & Redux
 const React = require("devtools/client/shared/vendor/react");
 const ReactDOM = require("devtools/client/shared/vendor/react-dom");
 const { Provider } = require("devtools/client/shared/vendor/react-redux");
-const { combineReducers } = require("devtools/client/shared/vendor/redux");
 
-const createStore = require("devtools/client/shared/redux/create-store")();
+const {
+  MESSAGE_ADD,
+  MESSAGES_CLEAR
+} = require("devtools/client/webconsole/new-console-output/constants");
+const actions = require("devtools/client/webconsole/new-console-output/actions/messages");
+const { store } = require("devtools/client/webconsole/new-console-output/store");
 
-const { reducers } = require("./reducers/index");
-const store = createStore(combineReducers(reducers));
-
-const DummyChildComponent = React.createFactory(require("./dummy-child-component"));
+const ConsoleOutput = React.createFactory(require("devtools/client/webconsole/new-console-output/components/console-output"));
 
 function OutputWrapperThingy(parentNode) {
-  let childComponent = DummyChildComponent({});
+  let childComponent = ConsoleOutput({});
   let provider = React.createElement(Provider, { store: store }, childComponent);
   this.body = ReactDOM.render(provider, parentNode);
 }
 
 OutputWrapperThingy.prototype = {
   dispatchMessageAdd: (message) => {
-    let action = {
-      type: "MESSAGE_ADD",
-      message,
-    }
-    store.dispatch(action)
+    store.dispatch(actions.messageAdd(message));
   },
   dispatchMessagesClear: () => {
-    let action = {
-      type: "MESSAGES_CLEAR",
-    }
-    store.dispatch(action)
+    store.dispatch(actions.messagesClear());
   }
 };
 
 // Exports from this module
 module.exports = OutputWrapperThingy;
diff --git a/devtools/client/webconsole/new-console-output/reducers/messages.js b/devtools/client/webconsole/new-console-output/reducers/messages.js
--- a/devtools/client/webconsole/new-console-output/reducers/messages.js
+++ b/devtools/client/webconsole/new-console-output/reducers/messages.js
@@ -1,23 +1,32 @@
 /* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
-// @TODO move this to constants and use in webconsole.js
-const MESSAGE_ADD = "MESSAGE_ADD";
+const Immutable = require("devtools/client/shared/vendor/immutable");
 
-/**
- * Filter displayed object properties.
- */
+const { getRepeatId } = require("devtools/client/webconsole/new-console-output/utils/messages");
+const constants = require("devtools/client/webconsole/new-console-output/constants");
+
 function messages(state = [], action) {
-  if (action.type == MESSAGE_ADD) {
-    return state.concat([action.message]);
+  switch (action.type) {
+    case constants.MESSAGE_ADD:
+      let newMessage = action.message;
+      if (newMessage.allowRepeating && state.length > 0) {
+        let lastMessage = state[state.length - 1];
+        if (lastMessage.repeatId === newMessage.repeatId) {
+          newMessage.repeat = lastMessage.repeat + 1;
+          return state.slice(0, state.length-1).concat(newMessage);
+        }
+      }
+      return state.concat([ newMessage ]);
+    case constants.MESSAGES_CLEAR:
+      return [];
   }
 
   return state;
 }
 
-// Exports from this module
 exports.messages = messages;
diff --git a/devtools/client/webconsole/new-console-output/store.js b/devtools/client/webconsole/new-console-output/store.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/store.js
@@ -0,0 +1,18 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const { combineReducers, createStore } = require("devtools/client/shared/vendor/redux");
+const { reducers } = require("./reducers/index");
+
+function storeFactory(initialState = {}) {
+  return createStore(combineReducers(reducers), initialState);
+}
+
+// Provide the single store instance for app code.
+module.exports.store = storeFactory();
+// Provide the store factory for test code so that each test is working with
+// its own instance.
+module.exports.storeFactory = storeFactory;
+
diff --git a/devtools/client/webconsole/new-console-output/test/.eslintrc b/devtools/client/webconsole/new-console-output/test/.eslintrc
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/test/.eslintrc
@@ -0,0 +1,3 @@
+{
+  "extends": ["../../../../.eslintrc.xpcshell"]
+}
diff --git a/devtools/client/webconsole/new-console-output/test/actions/head.js b/devtools/client/webconsole/new-console-output/test/actions/head.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/test/actions/head.js
@@ -0,0 +1,38 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+var { utils: Cu } = Components;
+var { require } = Cu.import("resource://devtools/shared/Loader.jsm", {});
+
+var DevToolsUtils = require("devtools/shared/DevToolsUtils");
+DevToolsUtils.testing = true;
+DevToolsUtils.dumpn.wantLogging = true;
+DevToolsUtils.dumpv.wantVerbose = false;
+
+// @TODO consolidate once we have a shared head. See #16
+const testPackets = new Map();
+testPackets.set("console.log", {
+  "from": "server1.conn4.child1/consoleActor2",
+  "type": "consoleAPICall",
+  "message": {
+    "arguments": [
+      "foobar",
+      "test"
+    ],
+    "columnNumber": 1,
+    "counter": null,
+    "filename": "file:///test.html",
+    "functionName": "",
+    "groupName": "",
+    "level": "log",
+    "lineNumber": 1,
+    "private": false,
+    "styles": [],
+    "timeStamp": 1455064271115,
+    "timer": null,
+    "workerType": "none",
+    "category": "webdev"
+  }
+});
diff --git a/devtools/client/webconsole/new-console-output/test/actions/test_messages.js b/devtools/client/webconsole/new-console-output/test/actions/test_messages.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/test/actions/test_messages.js
@@ -0,0 +1,45 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+"use strict";
+
+const {
+  messageAdd,
+  messagesClear
+} = require("devtools/client/webconsole/new-console-output/actions/messages");
+const {
+  prepareMessage,
+  getRepeatId
+} = require("devtools/client/webconsole/new-console-output/utils/messages");
+const constants = require("devtools/client/webconsole/new-console-output/constants");
+
+function run_test() {
+  run_next_test();
+}
+
+add_task(function*() {
+  const packet = testPackets.get("console.log");
+  const action = messageAdd(packet);
+  const expected = {
+    type: constants.MESSAGE_ADD,
+    message: {
+      allowRepeating: true,
+      category: "console",
+      data: packet.message,
+      messageType: "ConsoleApiCall",
+      repeat: 1,
+      repeatId: getRepeatId(packet.message),
+      severity: "log"
+    }
+  };
+  deepEqual(action, expected,
+    "messageAdd action creator returns expected action object");
+});
+
+add_task(function*() {
+  const action = messagesClear();
+  const expected = {
+    type: constants.MESSAGES_CLEAR,
+  };
+  deepEqual(action, expected,
+    "messagesClear action creator returns expected action object");
+});
diff --git a/devtools/client/webconsole/new-console-output/test/actions/xpcshell.ini b/devtools/client/webconsole/new-console-output/test/actions/xpcshell.ini
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/test/actions/xpcshell.ini
@@ -0,0 +1,7 @@
+[DEFAULT]
+tags = devtools devtools-webconsole
+head = head.js
+tail =
+firefox-appdir = browser
+
+[test_messages.js]
\ No newline at end of file
diff --git a/devtools/client/webconsole/new-console-output/test/components/chrome.ini b/devtools/client/webconsole/new-console-output/test/components/chrome.ini
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/test/components/chrome.ini
@@ -0,0 +1,9 @@
+[DEFAULT]
+
+support-files =
+  head.js
+
+[test_console-api-call.html]
+[test_console-api-call_repeat.html]
+[test_message-container.html]
+[test_message-repeat.html]
diff --git a/devtools/client/webconsole/new-console-output/test/components/head.js b/devtools/client/webconsole/new-console-output/test/components/head.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/test/components/head.js
@@ -0,0 +1,208 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+"use strict";
+
+var { utils: Cu } = Components;
+
+Cu.import("resource://testing-common/Assert.jsm");
+Cu.import("resource://gre/modules/Task.jsm");
+
+var { require } = Cu.import("resource://devtools/shared/Loader.jsm", {});
+var { BrowserLoader } = Cu.import("resource://devtools/client/shared/browser-loader.js", {});
+var DevToolsUtils = require("devtools/shared/DevToolsUtils");
+var {DebuggerServer} = require("devtools/server/main");
+var {DebuggerClient} = require("devtools/shared/client/main");
+
+const Services = require("Services");
+
+DevToolsUtils.testing = true;
+var { require: browserRequire } = BrowserLoader({
+  baseURI: "resource://devtools/client/webconsole/",
+  window: this
+});
+
+let ReactDOM = browserRequire("devtools/client/shared/vendor/react-dom");
+let React = browserRequire("devtools/client/shared/vendor/react");
+var TestUtils = React.addons.TestUtils;
+
+let testCommands = new Map();
+testCommands.set("console.log()", {
+  command: "console.log('foobar', 'test')",
+  commandType: "consoleAPICall",
+  expectedText: "foobar test"
+});
+testCommands.set("new Date()", {
+  command: "new Date(448156800000)",
+  commandType: "evaluationResult",
+  expectedText: "Date 1984-03-15T00:00:00.000Z"
+});
+
+function* getPacket(command, type = "evaluationResult") {
+  try {
+    // Attach the console to the tab.
+    let state = yield new Promise(function(resolve) {
+      attachConsoleToTab(["ConsoleAPI"], (state) => resolve(state));
+    });
+
+    // Run the command and get the packet.
+    let packet;
+    switch (type) {
+      case "consoleAPICall":
+        packet = yield new Promise((resolve) => {
+          function onConsoleApiCall(type, packet) {
+            state.dbgClient.removeListener("consoleAPICall", onConsoleApiCall);
+            resolve(packet)
+          };
+          state.dbgClient.addListener("consoleAPICall", onConsoleApiCall)
+          eval(`top.${command}`);
+        });
+        break;
+      case "evaluate":
+        // @TODO support JavaScriptEvalOutput
+        // let evaluated =
+        //   new Promise(resolve => state.client.evaluateJSAsync("top.console.log(\"bitty\")", resolve));
+        // let packet = yield evaluated;
+        break;
+    }
+
+    closeDebugger(state);
+    return packet;
+  } catch (e) {
+    ok(false, "Got an error: " + DevToolsUtils.safeErrorString(e));
+  }
+}
+
+function renderComponent(component, props) {
+  const el = React.createElement(component, props, {});
+  // By default, renderIntoDocument() won't work for stateless components, but
+  // it will work if the stateless component is wrapped in a stateful one.
+  // See https://github.com/facebook/react/issues/4839
+  const wrappedEl = React.DOM.span({}, [el]);
+  const renderedComponent = TestUtils.renderIntoDocument(wrappedEl);
+  return ReactDOM.findDOMNode(renderedComponent).children[0];
+}
+
+function shallowRenderComponent(component, props) {
+  const el = React.createElement(component, props);
+  const renderer = TestUtils.createRenderer();
+  renderer.render(el, {});
+  return renderer.getRenderOutput();
+}
+
+function cleanActualHTML(htmlString) {
+  return htmlString.replace(/ data-reactid=\".*?\"/g, "");
+}
+
+function cleanExpectedHTML(htmlString) {
+  return htmlString.replace(/(?:\r\n|\r|\n)\s*/g, "");
+}
+
+// Helpers copied in from shared/webconsole/test/common.js
+function initCommon()
+{
+  //Services.prefs.setBoolPref("devtools.debugger.log", true);
+}
+
+function initDebuggerServer()
+{
+  if (!DebuggerServer.initialized) {
+    DebuggerServer.init();
+    DebuggerServer.addBrowserActors();
+  }
+  DebuggerServer.allowChromeProcess = true;
+}
+
+function connectToDebugger(aCallback)
+{
+  initCommon();
+  initDebuggerServer();
+
+  let transport = DebuggerServer.connectPipe();
+  let client = new DebuggerClient(transport);
+
+  let dbgState = { dbgClient: client };
+  client.connect().then(response => aCallback(dbgState, response));
+}
+
+function closeDebugger(aState, aCallback)
+{
+  aState.dbgClient.close(aCallback);
+  aState.dbgClient = null;
+  aState.client = null;
+}
+
+function attachConsole(aListeners, aCallback) {
+  _attachConsole(aListeners, aCallback);
+}
+function attachConsoleToTab(aListeners, aCallback) {
+  _attachConsole(aListeners, aCallback, true);
+}
+function attachConsoleToWorker(aListeners, aCallback) {
+  _attachConsole(aListeners, aCallback, true, true);
+}
+
+function _attachConsole(aListeners, aCallback, aAttachToTab, aAttachToWorker)
+{
+  function _onAttachConsole(aState, aResponse, aWebConsoleClient)
+  {
+    if (aResponse.error) {
+      Cu.reportError("attachConsole failed: " + aResponse.error + " " +
+                     aResponse.message);
+    }
+
+    aState.client = aWebConsoleClient;
+
+    aCallback(aState, aResponse);
+  }
+
+  connectToDebugger(function _onConnect(aState, aResponse) {
+    if (aResponse.error) {
+      Cu.reportError("client.connect() failed: " + aResponse.error + " " +
+                     aResponse.message);
+      aCallback(aState, aResponse);
+      return;
+    }
+
+    if (aAttachToTab) {
+      aState.dbgClient.listTabs(function _onListTabs(aResponse) {
+        if (aResponse.error) {
+          Cu.reportError("listTabs failed: " + aResponse.error + " " +
+                         aResponse.message);
+          aCallback(aState, aResponse);
+          return;
+        }
+        let tab = aResponse.tabs[aResponse.selected];
+        aState.dbgClient.attachTab(tab.actor, function (response, tabClient) {
+          if (aAttachToWorker) {
+            var worker = new Worker("console-test-worker.js");
+            worker.addEventListener("message", function listener() {
+              worker.removeEventListener("message", listener);
+              tabClient.listWorkers(function (response) {
+                tabClient.attachWorker(response.workers[0].actor, function (response, workerClient) {
+                  workerClient.attachThread({}, function(aResponse) {
+                    aState.actor = workerClient.consoleActor;
+                    aState.dbgClient.attachConsole(workerClient.consoleActor, aListeners,
+                                                   _onAttachConsole.bind(null, aState));
+                  });
+                });
+              });
+            });
+          } else {
+            aState.actor = tab.consoleActor;
+            aState.dbgClient.attachConsole(tab.consoleActor, aListeners,
+                                           _onAttachConsole.bind(null, aState));
+          }
+        });
+      });
+    } else {
+      aState.dbgClient.getProcess().then(response => {
+        aState.dbgClient.attachTab(response.form.actor, function () {
+          let consoleActor = response.form.consoleActor;
+          aState.actor = consoleActor;
+          aState.dbgClient.attachConsole(consoleActor, aListeners,
+                                         _onAttachConsole.bind(null, aState));
+        });
+      });
+    }
+  });
+}
diff --git a/devtools/client/webconsole/new-console-output/test/components/test_console-api-call.html b/devtools/client/webconsole/new-console-output/test/components/test_console-api-call.html
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/test/components/test_console-api-call.html
@@ -0,0 +1,33 @@
+<!DOCTYPE HTML>
+<html lang="en">
+<head>
+  <meta charset="utf8">
+  <title>Test for ConsoleApiCall component</title>
+  <script type="text/javascript" src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
+  <script type="application/javascript;version=1.8" src="head.js"></script>
+  <!-- Any copyright is dedicated to the Public Domain.
+     - http://creativecommons.org/publicdomain/zero/1.0/ -->
+</head>
+<body>
+<p>Test for ConsoleApiCall component</p>
+
+<script type="text/javascript;version=1.8">
+window.onload = Task.async(function* () {
+  const { prepareMessage } = require("devtools/client/webconsole/new-console-output/utils/messages");
+  const { ConsoleApiCall } = require("devtools/client/webconsole/new-console-output/components/message-types/console-api-call");
+
+  const packet = yield getPacket("console.log('foobar', 'test')", "consoleAPICall");
+  const message = prepareMessage(packet);
+  const rendered = renderComponent(ConsoleApiCall, {message});
+
+  const queryPath = "span span.message-flex-body span.message-body.devtools-monospace";
+  const messageBody = rendered.querySelectorAll(queryPath);
+  const consoleStringNodes = messageBody[0].querySelectorAll("span.console-string");
+  is(consoleStringNodes.length, 2, "ConsoleApiCall outputs expected HTML structure");
+  is(messageBody[0].textContent, "foobar test", "ConsoleApiCall outputs expected text");
+
+  SimpleTest.finish()
+});
+</script>
+</body>
+</html>
diff --git a/devtools/client/webconsole/new-console-output/test/components/test_console-api-call_repeat.html b/devtools/client/webconsole/new-console-output/test/components/test_console-api-call_repeat.html
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/test/components/test_console-api-call_repeat.html
@@ -0,0 +1,36 @@
+<!DOCTYPE HTML>
+<html lang="en">
+<head>
+  <meta charset="utf8">
+  <title>Test for ConsoleApiCall component with repeats</title>
+  <script type="text/javascript" src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
+  <script type="application/javascript;version=1.8" src="head.js"></script>
+  <!-- Any copyright is dedicated to the Public Domain.
+     - http://creativecommons.org/publicdomain/zero/1.0/ -->
+</head>
+<body>
+<p>Test for ConsoleApiCall component with repeats</p>
+
+<script type="text/javascript;version=1.8">
+window.onload = Task.async(function* () {
+  const { prepareMessage } = require("devtools/client/webconsole/new-console-output/utils/messages");
+  const { ConsoleApiCall } = require("devtools/client/webconsole/new-console-output/components/message-types/console-api-call");
+
+  const packet = yield getPacket("console.log('foobar', 'test')", "consoleAPICall");
+  const message = prepareMessage(packet);
+  message.repeat = 107;
+  const rendered = renderComponent(ConsoleApiCall, {message});
+
+  const messageBodyPath = "span > span.message-flex-body > span.message-body.devtools-monospace";
+  const messageBody = rendered.querySelectorAll(messageBodyPath);
+  is(messageBody[0].textContent, "foobar test", "ConsoleApiCall outputs expected text for repeated message");
+
+  const repeatPath = "span > span.message-flex-body > span.message-body.devtools-monospace + span.message-repeats";
+  const repeat = rendered.querySelectorAll(repeatPath);
+  is(repeat[0].textContent, `${message.repeat}`, "ConsoleApiCall outputs correct repeat count");
+
+  SimpleTest.finish()
+});
+</script>
+</body>
+</html>
diff --git a/devtools/client/webconsole/new-console-output/test/components/test_message-container.html b/devtools/client/webconsole/new-console-output/test/components/test_message-container.html
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/test/components/test_message-container.html
@@ -0,0 +1,64 @@
+<!DOCTYPE HTML>
+<html lang="en">
+<head>
+  <meta charset="utf8">
+  <title>Test for MessageContainer component</title>
+  <script type="text/javascript" src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
+  <script type="application/javascript;version=1.8" src="head.js"></script>
+  <!-- Any copyright is dedicated to the Public Domain.
+     - http://creativecommons.org/publicdomain/zero/1.0/ -->
+</head>
+<body>
+<p>Test for MessageContainer component</p>
+
+<script type="text/javascript;version=1.8">
+window.onload = Task.async(function* () {
+  const { prepareMessage } = require("devtools/client/webconsole/new-console-output/utils/messages");
+
+  const { MessageContainer } = require("devtools/client/webconsole/new-console-output/components/message-container");
+  const { ConsoleApiCall } = require("devtools/client/webconsole/new-console-output/components/message-types/console-api-call");
+
+  yield testFullRender();
+  yield testGetMessageComponent();
+
+  SimpleTest.finish();
+
+  /**
+   * Test that passing in a message correctly wires up all the children.
+   *
+   * The different combinations of children are tested in separate per-component
+   * tests. This test just ensures that this component pipes data to its children.
+   */
+  function testFullRender() {
+    const testValue = testCommands.get("console.log()");
+    const packet = yield getPacket(testValue.command, testValue.commandType);
+    const message = prepareMessage(packet);
+    const rendered = renderComponent(MessageContainer, { message });
+
+    ok(rendered.textContent.contains(testValue.expectedText),
+      "MessageContainer pipes data to its children as expected");
+  }
+
+  /**
+   * Test that getMessageComponent() returns correct component for each message type.
+   */
+  function testGetMessageComponent() {
+    const testValues = [
+      {
+        command: testCommands.get("console.log()"),
+        expectedComponent: ConsoleApiCall
+      }
+    ];
+
+    for (let testValue of testValues) {
+      const packet = yield getPacket(testValue.command.command, testValue.command.commandType);
+      const message = prepareMessage(packet);
+      const rendered = shallowRenderComponent(MessageContainer, {message});
+      is(rendered.type, testValue.expectedComponent,
+        `MessageContainer nests ${testValue.expectedComponent} based on command: ${testValue.command}`);
+    }
+  }
+});
+</script>
+</body>
+</html>
diff --git a/devtools/client/webconsole/new-console-output/test/components/test_message-repeat.html b/devtools/client/webconsole/new-console-output/test/components/test_message-repeat.html
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/test/components/test_message-repeat.html
@@ -0,0 +1,31 @@
+<!DOCTYPE HTML>
+<html lang="en">
+<head>
+  <meta charset="utf8">
+  <title>Test for MessageRepeat component</title>
+  <script type="text/javascript" src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
+  <script type="application/javascript;version=1.8" src="head.js"></script>
+  <!-- Any copyright is dedicated to the Public Domain.
+     - http://creativecommons.org/publicdomain/zero/1.0/ -->
+</head>
+<body>
+<p>Test for MessageRepeat component</p>
+
+<script type="text/javascript;version=1.8">
+window.onload = Task.async(function* () {
+  const { MessageRepeat } = require("devtools/client/webconsole/new-console-output/components/message-repeat");
+
+  const repeatRendered = renderComponent(MessageRepeat, { repeat: 99 });
+  ok(repeatRendered.classList.contains("message-repeats"), "MessageRepeat has expected class");
+  is(repeatRendered.style.visibility, "visible", "MessageRepeat with 2+ repeats is visible");
+  is(repeatRendered.textContent, "99", "MessageRepeat shows correct number of repeats");
+
+  const noRepeatRendered = renderComponent(MessageRepeat, { repeat: 1 });
+  is(noRepeatRendered.style.visibility, "hidden", "MessageRepeat with 1 repeat is hidden");
+  is(noRepeatRendered.textContent, "1", "MessageRepeat with 1 repeat shows correct number of repeats")
+
+  SimpleTest.finish();
+});
+</script>
+</body>
+</html>
\ No newline at end of file
diff --git a/devtools/client/webconsole/new-console-output/test/store/head.js b/devtools/client/webconsole/new-console-output/test/store/head.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/test/store/head.js
@@ -0,0 +1,40 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+var { classes: Cc, interfaces: Ci, utils: Cu, results: Cr } = Components;
+var { require } = Cu.import("resource://devtools/shared/Loader.jsm", {});
+
+var Services = require("Services");
+var DevToolsUtils = require("devtools/shared/DevToolsUtils");
+DevToolsUtils.testing = true;
+DevToolsUtils.dumpn.wantLogging = true;
+DevToolsUtils.dumpv.wantVerbose = false;
+
+const { storeFactory } = require("devtools/client/webconsole/new-console-output/store");
+
+const testPackets = new Map();
+testPackets.set("console.log", {
+  "from": "server1.conn4.child1/consoleActor2",
+  "type": "consoleAPICall",
+  "message": {
+    "arguments": [
+      "foobar",
+      "test"
+    ],
+    "columnNumber": 1,
+    "counter": null,
+    "filename": "file:///test.html",
+    "functionName": "",
+    "groupName": "",
+    "level": "log",
+    "lineNumber": 1,
+    "private": false,
+    "styles": [],
+    "timeStamp": 1455064271115,
+    "timer": null,
+    "workerType": "none",
+    "category": "webdev"
+  }
+});
diff --git a/devtools/client/webconsole/new-console-output/test/store/test_messages.js b/devtools/client/webconsole/new-console-output/test/store/test_messages.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/test/store/test_messages.js
@@ -0,0 +1,59 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+"use strict";
+
+const actions = require("devtools/client/webconsole/new-console-output/actions/messages");
+const packet = testPackets.get("console.log");
+const {
+  getRepeatId,
+  prepareMessage
+} = require("devtools/client/webconsole/new-console-output/utils/messages");
+
+function run_test() {
+  run_next_test();
+}
+
+/**
+ * Test adding a message to the store.
+ */
+add_task(function*() {
+  const { getState, dispatch } = storeFactory();
+
+  dispatch(actions.messageAdd(packet));
+
+  const expectedMessage = prepareMessage(packet);
+
+  deepEqual(getState().messages, [expectedMessage],
+    "MESSAGE_ADD action adds a message");
+});
+
+/**
+ * Test repeating messages in the store.
+ */
+add_task(function*() {
+  const { getState, dispatch } = storeFactory();
+
+  dispatch(actions.messageAdd(packet));
+  dispatch(actions.messageAdd(packet));
+  dispatch(actions.messageAdd(packet));
+
+  const expectedMessage = prepareMessage(packet);
+  expectedMessage.repeat = 3;
+
+  deepEqual(getState().messages, [expectedMessage],
+    "Adding same message to the store twice results in repeated message");
+});
+
+/**
+ * Test getRepeatId().
+ */
+add_task(function*() {
+  const message1 = prepareMessage(packet);
+  const message2 = prepareMessage(packet);
+  equal(getRepeatId(message1), getRepeatId(message2),
+    "getRepeatId() returns same repeat id for objects with the same values");
+
+  message2.data.arguments = ["new args"];
+  notEqual(getRepeatId(message1), getRepeatId(message2),
+    "getRepeatId() returns different repeat ids for different values");
+});
diff --git a/devtools/client/webconsole/new-console-output/test/store/xpcshell.ini b/devtools/client/webconsole/new-console-output/test/store/xpcshell.ini
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/test/store/xpcshell.ini
@@ -0,0 +1,7 @@
+[DEFAULT]
+tags = devtools devtools-webconsole
+head = head.js
+tail =
+firefox-appdir = browser
+
+[test_messages.js]
diff --git a/devtools/client/webconsole/new-console-output/utils/messages.js b/devtools/client/webconsole/new-console-output/utils/messages.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/utils/messages.js
@@ -0,0 +1,56 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const {
+  LEVELS,
+  SEVERITY_CLASS_FRAGMENTS
+} = require("../constants");
+
+function prepareMessage(packet) {
+  // @TODO turn this into an Immutable Record.
+  let allowRepeating;
+  let category;
+  let data;
+  let messageType;
+  let repeat;
+  let repeatId;
+  let severity;
+
+  switch (packet.type) {
+    case "consoleAPICall":
+      allowRepeating = true;
+      category = "console";
+      data = Object.assign({}, packet.message);
+      messageType = "ConsoleApiCall";
+      repeat = 1;
+      repeatId = getRepeatId(packet.message);
+      severity = SEVERITY_CLASS_FRAGMENTS[LEVELS[packet.message.level]];
+      break;
+  }
+
+  return {
+    allowRepeating,
+    category,
+    data,
+    messageType,
+    repeat,
+    repeatId,
+    severity
+  };
+}
+
+function getRepeatId(message) {
+  let clonedMessage = JSON.parse(JSON.stringify(message));
+  delete clonedMessage.timeStamp;
+  delete clonedMessage.uniqueID;
+  return JSON.stringify(clonedMessage);
+}
+
+// Export for use in testing.
+exports.prepareMessage = prepareMessage;
+exports.getRepeatId = getRepeatId;
diff --git a/devtools/client/webconsole/new-console-output/utils/moz.build b/devtools/client/webconsole/new-console-output/utils/moz.build
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/utils/moz.build
@@ -0,0 +1,8 @@
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+DevToolsModules(
+    'messages.js',
+)
diff --git a/devtools/client/webconsole/webconsole.js b/devtools/client/webconsole/webconsole.js
--- a/devtools/client/webconsole/webconsole.js
+++ b/devtools/client/webconsole/webconsole.js
@@ -1284,22 +1284,18 @@ WebConsoleFrame.prototype = {
     switch (level) {
       case "log":
       case "info":
       case "warn":
       case "error":
       case "exception":
       case "assert":
       case "debug": {
-        if (this.SUPER_FRONTEND_EXPERIMENT) {
-          this.newConsoleOutput.dispatchMessageAdd(message);
-        } else {
-          let msg = new Messages.ConsoleGeneric(message);
-          node = msg.init(this.output).render().element;
-        }
+        let msg = new Messages.ConsoleGeneric(message);
+        node = msg.init(this.output).render().element;
         break;
       }
       case "table": {
         let msg = new Messages.ConsoleTable(message);
         node = msg.init(this.output).render().element;
         break;
       }
       case "trace": {
@@ -3380,17 +3376,21 @@ WebConsoleConnectionProxy.prototype = {
    * @private
    * @param string type
    *        Message type.
    * @param object packet
    *        The message received from the server.
    */
   _onConsoleAPICall: function(type, packet) {
     if (this.webConsoleFrame && packet.from == this._consoleActor) {
-      this.webConsoleFrame.handleConsoleAPICall(packet.message);
+      if (this.webConsoleFrame.SUPER_FRONTEND_EXPERIMENT) {
+        this.webConsoleFrame.newConsoleOutput.dispatchMessageAdd(packet);
+      } else {
+        this.webConsoleFrame.handleConsoleAPICall(packet.message);
+      }
     }
   },
 
   /**
    * The "networkEvent" message type handler. We redirect any message to
    * the UI for displaying.
    *
    * @private
diff --git a/devtools/package.json b/devtools/package.json
new file mode 100644
--- /dev/null
+++ b/devtools/package.json
@@ -0,0 +1,15 @@
+{
+  "name": "firefox-devtools",
+  "version": "1.0.0",
+  "devDependencies": {
+    "babel-preset-es2015": "^6.6.0",
+    "babel-register": "^6.7.2",
+    "expect": "^1.16.0",
+    "jsdom": "^8.1.0",
+    "mocha": "^2.4.5",
+    "mocha-jsdom": "^1.1.0"
+  },
+  "scripts": {
+    "test": "NODE_PATH=`pwd`/../ mocha client/webconsole/new-console-output/test/**/*.test.js --compilers js:babel-register"
+  }
+}
