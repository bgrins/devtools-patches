# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1553896109 25200
#      Fri Mar 29 14:48:29 2019 -0700
# Node ID 66f857239dba86cd20f1085b3ec1dc652304f680
# Parent  bdaf1b36c44275dd4f027b4a4c30afed86cdfe13
Bug 1540285 - Add a test generator script into `./mach addtest`

This also changes the template files in the following ways:
- removes the bug # boilerplate
- remove some unnecessary attributes in the template
- removes the th.template
- adds the browser.template for browser-chrome tests

Instead of:
perl gen_template.pl -b=123456 --type=plain > path/to/test_bug123456.html

You can do:
./mach addtest --suite="mochitest-plain" > path/to/test_bug123456.html

But you can also pass in a new file path and let it guess the suite/doc:
```
./mach addtest js/xpconnect/tests/chrome/test_chrome.html
./mach addtest js/xpconnect/tests/chrome/test_chrome.xhtml
./mach addtest js/xpconnect/tests/chrome/test_chrome.xul

./mach addtest js/xpconnect/tests/mochitest/test_plain.html
./mach addtest js/xpconnect/tests/mochitest/test_plain.xhtml
./mach addtest js/xpconnect/tests/mochitest/test_plain.xul

./mach addtest browser/base/content/test/alerts/browser_foo.js
```

Differential Revision: https://phabricator.services.mozilla.com/D25482

diff --git a/browser/base/content/test/alerts/browser.ini b/browser/base/content/test/alerts/browser.ini
--- a/browser/base/content/test/alerts/browser.ini
+++ b/browser/base/content/test/alerts/browser.ini
@@ -1,13 +1,14 @@
 [DEFAULT]
 support-files =
   head.js
   file_dom_notifications.html
 
+[browser_foo.js]
 [browser_notification_close.js]
 skip-if = os == 'win' # Bug 1227785
 [browser_notification_do_not_disturb.js]
 skip-if = os == 'win' # Bug 1352791
 [browser_notification_open_settings.js]
 skip-if = os == 'win' # Bug 1411118
 [browser_notification_remove_permission.js]
 skip-if = os == 'win' # Bug 1411118
diff --git a/browser/components/extensions/test/xpcshell/xpcshell.ini b/browser/components/extensions/test/xpcshell/xpcshell.ini
--- a/browser/components/extensions/test/xpcshell/xpcshell.ini
+++ b/browser/components/extensions/test/xpcshell/xpcshell.ini
@@ -11,16 +11,17 @@ dupe-manifest =
 # Tests which are affected by remote content or remote extensions should
 # go in one of:
 #
 #  - xpcshell-common.ini
 #    For tests which should run in all configurations.
 #  - xpcshell-remote.ini
 #    For tests which should only run with both remote extensions and remote content.
 
+[test_ext_bookmarks2.js]
 [test_ext_manifest.js]
 [test_ext_manifest_commands.js]
 [test_ext_manifest_omnibox.js]
 [test_ext_manifest_permissions.js]
 [test_ext_pageAction_shutdown.js]
 [test_ext_pkcs11_management.js]
 
 [include:xpcshell-common.ini]
diff --git a/js/xpconnect/tests/chrome/chrome.ini b/js/xpconnect/tests/chrome/chrome.ini
--- a/js/xpconnect/tests/chrome/chrome.ini
+++ b/js/xpconnect/tests/chrome/chrome.ini
@@ -86,16 +86,19 @@ skip-if = os == 'win' || os == 'mac' || 
 [test_bug1074863.html]
 [test_bug1092477.xul]
 [test_bug1124898.html]
 [test_bug1126911.html]
 [test_bug1281071.xul]
 [test_bug1390159.xul]
 [test_bug1430164.html]
 [test_bug1516237.html]
+[test_chrome.html]
+[test_chrome.xhtml]
+[test_chrome.xul]
 [test_chrometoSource.xul]
 [test_cloneInto.xul]
 [test_cows.xul]
 [test_discardSystemSource.xul]
 [test_documentdomain.xul]
 [test_doublewrappedcompartments.xul]
 [test_evalInSandbox.xul]
 [test_evalInWindow.xul]
diff --git a/js/xpconnect/tests/mochitest/mochitest.ini b/js/xpconnect/tests/mochitest/mochitest.ini
--- a/js/xpconnect/tests/mochitest/mochitest.ini
+++ b/js/xpconnect/tests/mochitest/mochitest.ini
@@ -100,13 +100,14 @@ support-files =
 [test_frameWrapping.html]
 # The JS test component we use below is only available in debug builds.
 [test_getWebIDLCaller.html]
 skip-if = (debug == false)
 [test_getweakmapkeys.html]
 [test_paris_weakmap_keys.html]
 skip-if = (debug == false)
 [test_nukeContentWindow.html]
+[test_plain.html]
 [test_sameOriginPolicy.html]
 [test_sandbox_fetch.html]
   support-files =
     ../../../../dom/tests/mochitest/fetch/test_fetch_basic.js
 [test_weakmaps.html]
diff --git a/testing/addtest.py b/testing/addtest.py
new file mode 100644
--- /dev/null
+++ b/testing/addtest.py
@@ -0,0 +1,223 @@
+
+from __future__ import absolute_import, unicode_literals, print_function
+
+import os
+import sys
+
+from mozbuild.base import (
+    MachCommandBase,
+    MachCommandConditions as conditions,
+    MozbuildObject,
+)
+
+import manifestparser
+
+def write_to_ini(manifest_file, filename):
+    # Insert a new test in the right place within a given manifest file
+    manifest = manifestparser.TestManifest(manifests=[manifest_file])
+    insert_before = None
+    for test in manifest.tests:
+        if (test.get('name') == filename):
+            print("{} is already in the manifest.".format(filename))
+            return
+
+        if test.get('name') > filename:
+            insert_before = test.get('name')
+            break
+
+    with open(manifest_file, "r") as f:
+        contents = f.readlines()
+
+    filename = '[{}]\n'.format(filename)
+
+    if not insert_before:
+        contents.append(filename)
+    else:
+        insert_before = '[{}]'.format(insert_before)
+        for i in range(len(contents)):
+            if contents[i].startswith(insert_before):
+                contents.insert(i, filename)
+                break
+
+    with open(manifest_file, "w") as f:
+        f.write("".join(contents))
+
+class XpcshellCreator():
+    template_body = """/* Any copyright is dedicated to the Public Domain.
+http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+add_task(async function test_TODO() {
+  ok(true, "TODO: implement the test");
+});
+"""
+
+    def get_template_contents(self, suite, doc):
+        return self.template_body
+
+    def add_test(self, suite, test):
+        manifest_file = os.path.join(os.path.dirname(test), "xpcshell.ini")
+        filename = os.path.basename(test)
+
+        if not os.path.isfile(manifest_file):
+            print('Could not open manifest file {}'.format(manifest_file))
+            return
+        write_to_ini(manifest_file, filename)
+
+class MochitestCreator():
+    def get_template_contents(self, suite, doc):
+        mochitest_templates = os.path.abspath(
+            os.path.join(os.path.dirname(__file__), 'mochitest', 'static')
+        )
+        template_file_name = None
+        if suite == "mochitest-browser":
+            template_file_name = 'browser.template.txt'
+
+        if suite == "mochitest-plain":
+            template_file_name = 'plain{}.template.txt'.format(doc)
+
+        if suite == "mochitest-chrome":
+            template_file_name = 'chrome{}.template.txt'.format(doc)
+
+        if template_file_name is None:
+            return None
+
+        template_file = os.path.join(mochitest_templates, template_file_name)
+        if not os.path.isfile(template_file):
+            return None
+
+        with open(template_file) as f:
+            return f.read()
+
+    def add_test(self, suite, test):
+        # attempt to insert into the appropriate manifest
+        guessed_ini = {
+            "mochitest-plain": "mochitest.ini",
+            "mochitest-chrome": "chrome.ini",
+            "mochitest-browser": "browser.ini"
+        }[suite]
+        manifest_file = os.path.join(os.path.dirname(test), guessed_ini)
+        filename = os.path.basename(test)
+
+        if not os.path.isfile(manifest_file):
+            print('Could not open manifest file {}'.format(manifest_file))
+            return
+
+        write_to_ini(manifest_file, filename)
+
+class WebPlatformTestsCreator():
+    template_prefix = """<!doctype html>
+%(documentElement)s<meta charset=utf-8>
+"""
+    template_long_timeout = "<meta name=timeout content=long>\n"
+
+    template_body_th = """<title></title>
+<script src=/resources/testharness.js></script>
+<script src=/resources/testharnessreport.js></script>
+<script>
+
+</script>
+"""
+
+    template_body_reftest = """<title></title>
+<link rel=%(match)s href=%(ref)s>
+"""
+
+    template_body_reftest_wait = """<script src="/common/reftest-wait.js"></script>
+"""
+
+    def rel_path(self, path):
+        if path is None:
+            return
+
+        abs_path = os.path.normpath(os.path.abspath(path))
+        return os.path.relpath(abs_path, self.topsrcdir)
+
+    def rel_url(self, rel_path):
+        upstream_path = os.path.join("testing", "web-platform", "tests")
+        local_path = os.path.join("testing", "web-platform", "mozilla", "tests")
+
+        if rel_path.startswith(upstream_path):
+            return rel_path[len(upstream_path):].replace(os.path.sep, "/")
+        elif rel_path.startswith(local_path):
+            return "/_mozilla" + rel_path[len(local_path):].replace(os.path.sep, "/")
+        else:
+            return None
+
+    def add_test(self, path, no_editor, editor, long_timeout, reftest, ref, mismatch, wait, overwrite):
+        import subprocess
+
+        ref_path = self.rel_path(ref)
+
+        if ref:
+            reftest = True
+
+        if self.rel_url(path) is None:
+            print("""Test path %s is not in wpt directories:
+testing/web-platform/tests for tests that may be shared
+testing/web-platform/mozilla/tests for Gecko-only tests""" % path)
+            return 1
+
+        if ref_path and self.rel_url(ref_path) is None:
+            print("""Reference path %s is not in wpt directories:
+testing/web-platform/tests for tests that may be shared
+            testing/web-platform/mozilla/tests for Gecko-only tests""" % ref_path)
+            return 1
+
+        if os.path.exists(path) and not overwrite:
+            print("Test path already exists, pass --overwrite to replace")
+            return 1
+
+        if mismatch and not reftest:
+            print("--mismatch only makes sense for a reftest")
+            return 1
+
+        if wait and not reftest:
+            print("--wait only makes sense for a reftest")
+            return 1
+
+        args = {"documentElement": "<html class=reftest-wait>\n" if wait else ""}
+        template = self.template_prefix % args
+        if long_timeout:
+            template += self.template_long_timeout
+
+        if reftest:
+            args = {"match": "match" if not mismatch else "mismatch",
+                    "ref": self.rel_url(ref_path) if ref else '""'}
+            template += self.template_body_reftest % args
+            if wait:
+                template += self.template_body_reftest_wait
+        else:
+            template += self.template_body_th
+        try:
+            os.makedirs(os.path.dirname(path))
+        except OSError:
+            pass
+        with open(path, "w") as f:
+            f.write(template)
+
+        ref_path = ref
+        if ref_path and not os.path.exists(ref_path):
+            with open(ref_path, "w") as f:
+                f.write(self.template_prefix % {"documentElement": ""})
+
+        if no_editor:
+            editor = None
+        elif editor:
+            editor = editor
+        elif "VISUAL" in os.environ:
+            editor = os.environ["VISUAL"]
+        elif "EDITOR" in os.environ:
+            editor = os.environ["EDITOR"]
+        else:
+            editor = None
+
+        proc = None
+        if editor:
+            if ref_path:
+                path = "%s %s" % (path, ref_path)
+            proc = subprocess.Popen("%s %s" % (editor, path), shell=True)
+
+        if proc:
+            proc.wait()
diff --git a/testing/mach_commands.py b/testing/mach_commands.py
--- a/testing/mach_commands.py
+++ b/testing/mach_commands.py
@@ -21,16 +21,24 @@ from mach.decorators import (
 
 from mozbuild.base import (
     BuildEnvironmentNotFoundException,
     MachCommandBase,
     MachCommandConditions as conditions,
 )
 from moztest.resolve import TEST_SUITES
 
+from addtest import (
+    WebPlatformTestsCreator,
+    MochitestCreator,
+    XpcshellCreator,
+)
+
+import manifestparser
+
 UNKNOWN_TEST = '''
 I was unable to find tests from the given argument(s).
 
 You should specify a test directory, filename, test suite name, or
 abbreviation. If no arguments are given, there must be local file
 changes and corresponding IMPACTED_TESTS annotations in moz.build
 files relevant to those files.
 
@@ -77,18 +85,171 @@ def get_test_parser():
     parser.add_argument('what', default=None, nargs='+', help=TEST_HELP)
     parser.add_argument('extra_args', default=None, nargs=argparse.REMAINDER,
                         help="Extra arguments to pass to the underlying test command(s). "
                              "If an underlying command doesn't recognize the argument, it "
                              "will fail.")
     add_logging_group(parser)
     return parser
 
+ADD_TEST_SUPPORTED_SUITES = ['xpcshell', 'mochitest-chrome', 'mochitest-plain', 'mochitest-browser',
+                              'wpt']
+ADD_TEST_SUPPORTED_DOCS = ['js', 'html', 'xhtml', 'xul']
 
 @CommandProvider
+class AddTest(MachCommandBase):
+    @Command('addtest', category='testing',
+             description='Generate tests based on templates')
+    @CommandArgument('--suite',
+                     choices=ADD_TEST_SUPPORTED_SUITES,
+                     help='suite for the test (currently only mochitests and wpt are supported).'
+                          'If you pass a `test` argument this will be determined'
+                          'based on the filename and the folder it is in')
+    @CommandArgument('-o', '--overwrite',
+                     action='store_true',
+                     help='Overwrite an existing file if it exists.')
+    @CommandArgument('--doc',
+                     choices=ADD_TEST_SUPPORTED_DOCS,
+                     help='Document type for the test (if applicable).'
+                          'If you pass a `test` argument this will be determined'
+                          'based on the filename.')
+    @CommandArgument('test',
+                     nargs='?',
+                     help=('Test to create.'))
+    def addtest(self, suite=None, doc=None, overwrite=False, test=None):
+        if test:
+            if not overwrite and os.path.isfile(os.path.abspath(test)):
+                print("Error: can't generate a test that already exists:", test)
+                return 1
+
+            abs_test = os.path.abspath(test)
+            if doc is None:
+                doc = self.guess_doc(abs_test)
+            if suite is None:
+                guessed_suite, err = self.guess_suite(abs_test)
+                if err:
+                    print(err)
+                    return 1
+                suite = guessed_suite
+
+        else:
+            test = None
+            if doc is None: doc = "html"
+
+        if not suite:
+            print("Sorry, we couldn't figure out the correct suite from that path. "
+                  "We only know about the following suites\n{}\n"
+                  "If you'd like to add support to a new suite, please file a bug "
+                  "blocking https://bugzilla.mozilla.org/show_bug.cgi?id=1540285.".format(ADD_TEST_SUPPORTED_SUITES))
+            return 1
+
+        if doc not in ADD_TEST_SUPPORTED_DOCS:
+            print("Error: invalid `doc`. Either pass in a test with a valid extension"
+                  "({}) or pass in the `doc` argument".format(ADD_TEST_SUPPORTED_DOCS))
+            return 1
+
+        # These are handled in a special way (see `./mach addtest wpt --help`).
+        if suite == "wpt":
+            return self.addtest_wpt(test, overwrite)
+
+        creator = None
+        if suite == "xpcshell":
+            creator = XpcshellCreator()
+        elif suite == "mochitest-browser" or suite == "mochitest-chrome" or suite == "mochitest-plain":
+            creator = MochitestCreator()
+        else:
+            print("Sorry, `addtest` doesn't currently know how to add {}".format(suite))
+
+        content = creator.get_template_contents(suite, doc)
+
+        if content is None:
+            print("Error: no template for {}".format(suite))
+            return 1
+
+        if (test):
+            print("Adding a test at {} (suite `{}`)".format(test, suite))
+
+            # write the test to a file
+            with open(test, "w") as f:
+                f.write(content)
+
+            creator.add_test(suite, test)
+
+            mach_command = TEST_SUITES[suite]["mach_command"]
+            print('Please make sure to add the new test to your commit. '
+                  'You can now run the test with:\n    ./mach {} {}'.format(mach_command, test))
+        else:
+            # write to stdout if you passed only suite and doc and not a file path
+            print(content)
+        return 0
+
+    def guess_doc(self, abs_test):
+        filename = os.path.basename(abs_test)
+        return os.path.splitext(filename)[1].strip(".")
+
+    def guess_suite(self, abs_test):
+        # If you pass a abs_test, try to detect the type based on the name
+        # and folder. This detection can be skipped if you pass the `type` arg.
+        err = None
+        guessed_suite = None
+        dir = os.path.dirname(abs_test)
+        filename = os.path.basename(abs_test)
+
+        has_browser_ini = os.path.isfile(os.path.join(dir, "browser.ini"))
+        has_chrome_ini = os.path.isfile(os.path.join(dir, "chrome.ini"))
+        has_plain_ini = os.path.isfile(os.path.join(dir, "mochitest.ini"))
+        has_xpcshell_ini = os.path.isfile(os.path.join(dir, "xpcshell.ini"))
+        in_wpt_folder = abs_test.startswith(os.path.abspath(os.path.join("testing", "web-platform")))
+
+        if in_wpt_folder:
+            guessed_suite = "wpt"
+        elif filename.startswith("test_") and has_xpcshell_ini:
+            guessed_suite = "xpcshell"
+        else:
+            if filename.startswith("browser_") and has_browser_ini:
+                guessed_suite = "mochitest-browser"
+            elif filename.startswith("test_"):
+                if has_chrome_ini and has_plain_ini:
+                    err = ("Error: directory contains both a chrome.ini and mochitest.ini. "
+                           "Please set --suite=mochitest-chrome or --suite=mochitest-plain.")
+                elif has_chrome_ini:
+                    guessed_suite = "mochitest-chrome"
+                elif has_plain_ini:
+                    guessed_suite = "mochitest-plain"
+        return guessed_suite, err
+
+    @SubCommand('addtest',
+                'wpt',
+                description='')
+    @CommandArgument('test',
+                     nargs='?',
+                     help=('Test to create.'))
+    @CommandArgument("--no-editor", action="store_true",
+                   help="Don't try to open the test in an editor")
+    @CommandArgument("-e", "--editor", action="store", help="Editor to use")
+    @CommandArgument("--long-timeout", action="store_true",
+                   help="Test should be given a long timeout (typically 60s rather than 10s, but varies depending on environment)")
+    @CommandArgument("-r", "--reftest", action="store_true",
+                   help="Create a reftest rather than a testharness (js) test")
+    @CommandArgument("-m", "--reference", dest="ref", help="Path to the reference file")
+    @CommandArgument("--mismatch", action="store_true",
+                   help="Create a mismatch reftest")
+    @CommandArgument("--wait", action="store_true",
+                   help="Create a reftest that waits until takeScreenshot() is called")
+    @CommandArgument('-o', '--overwrite',
+                     action='store_true',
+                     help='Overwrite an existing file if it exists.')
+    def addtest_wpt(self, test, overwrite=False, no_editor=False, editor=False, long_timeout=False, reftest=False, ref=None, mismatch=False, wait=False):
+        if not test:
+            print("Error: must specify a test path")
+            return 1
+        wpt_creator = WebPlatformTestsCreator()
+        return wpt_creator.add_test(
+            test, no_editor, editor, long_timeout, reftest, ref, mismatch, wait, overwrite)
+
 class Test(MachCommandBase):
     @Command('test', category='testing',
              description='Run tests (detects the kind of test and runs it).',
              parser=get_test_parser)
     def test(self, what, extra_args, **log_args):
         """Run tests from names or paths.
 
         mach test accepts arguments specifying which tests to run. Each argument
diff --git a/testing/mochitest/gen_template.pl b/testing/mochitest/gen_template.pl
deleted file mode 100644
--- a/testing/mochitest/gen_template.pl
+++ /dev/null
@@ -1,42 +0,0 @@
-#!/usr/bin/perl
-
-# This script makes mochitest test case templates. See
-# https://developer.mozilla.org/en-US/docs/Mochitest#Test_templates
-#
-# It takes two arguments:
-#
-#   -b:     a bugnumber
-#   -type:  template type. One of {plain|xhtml|xul|th|chrome|chromexul}.
-#           Defaults to th (testharness.js).
-#
-# For example, this command:
-#
-#  perl gen_template.pl -b 345876 -type xul
-#
-# writes a XUL test case template for bug 345876 to stdout.
-
-use FindBin;
-use Getopt::Long;
-GetOptions("b=i"=> \$bug_number,
-           "type:s"=> \$template_type);
-
-if ($template_type eq "xul") {
-  $template_type = "$FindBin::RealBin/static/xul.template.txt";
-} elsif ($template_type eq "xhtml") {
-  $template_type = "$FindBin::RealBin/static/xhtml.template.txt";
-} elsif ($template_type eq "chrome") {
-  $template_type = "$FindBin::RealBin/static/chrome.template.txt";
-} elsif ($template_type eq "chromexul") {
-  $template_type = "$FindBin::RealBin/static/chromexul.template.txt";
-} elsif ($template_type eq "plain") {
-  $template_type = "$FindBin::RealBin/static/test.template.txt";
-} else {
-  $template_type = "$FindBin::RealBin/static/th.template.txt";
-}
-
-open(IN,$template_type) or die("Failed to open myfile for reading.");
-while((defined(IN)) && ($line = <IN>)) {
-        $line =~ s/{BUGNUMBER}/$bug_number/g;
-        print STDOUT $line;
-}
-close(IN);
diff --git a/testing/mochitest/moz.build b/testing/mochitest/moz.build
--- a/testing/mochitest/moz.build
+++ b/testing/mochitest/moz.build
@@ -99,17 +99,16 @@ TEST_HARNESS_FILES.testing.mochitest += 
     '/build/valgrind/x86_64-pc-linux-gnu.sup',
     '/netwerk/test/httpserver/httpd.js',
     'bisection.py',
     'browser-harness.xul',
     'browser-test.js',
     'chrome-harness.js',
     'chunkifyTests.js',
     'favicon.ico',
-    'gen_template.pl',
     'harness.xul',
     'leaks.py',
     'mach_test_package_commands.py',
     'manifest.webapp',
     'manifestLibrary.js',
     'mochitest_options.py',
     'nested_setup.js',
     'pywebsocket_wrapper.py',
diff --git a/testing/mochitest/static/browser.template.txt b/testing/mochitest/static/browser.template.txt
new file mode 100644
--- /dev/null
+++ b/testing/mochitest/static/browser.template.txt
@@ -0,0 +1,8 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+add_task(async function test_TODO() {() {
+  ok(true, "TODO: implement the test");
+});
diff --git a/testing/mochitest/static/chrome.template.txt b/testing/mochitest/static/chromehtml.template.txt
rename from testing/mochitest/static/chrome.template.txt
rename to testing/mochitest/static/chromehtml.template.txt
--- a/testing/mochitest/static/chrome.template.txt
+++ b/testing/mochitest/static/chromehtml.template.txt
@@ -1,31 +1,23 @@
 <!DOCTYPE HTML>
 <html>
-<!--
-https://bugzilla.mozilla.org/show_bug.cgi?id={BUGNUMBER}
--->
 <head>
   <meta charset="utf-8">
-  <title>Test for Bug {BUGNUMBER}</title>
-  <script type="application/javascript" src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
-  <link rel="stylesheet" type="text/css" href="chrome://global/skin"/>
+  <title><!-- TODO: insert title here --></title>
+  <script src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
+  <script src="chrome://mochikit/content/tests/SimpleTest/AddTask.js"></script>
   <link rel="stylesheet" type="text/css" href="chrome://mochikit/content/tests/SimpleTest/test.css"/>
-  <script type="application/javascript">
-
-  /** Test for Bug {BUGNUMBER} **/
-
-
-
-
-
+  <script>
+    add_task(async function test_TODO() {
+      ok(true, "TODO: implement the test");
+    });
   </script>
 </head>
 <body>
-<a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id={BUGNUMBER}">Mozilla Bug {BUGNUMBER}</a>
 <p id="display"></p>
 <div id="content" style="display: none">
 
 </div>
 <pre id="test">
 </pre>
 </body>
 </html>
diff --git a/testing/mochitest/static/chromexhtml.template.txt b/testing/mochitest/static/chromexhtml.template.txt
new file mode 100644
--- /dev/null
+++ b/testing/mochitest/static/chromexhtml.template.txt
@@ -0,0 +1,23 @@
+<!DOCTYPE HTML>
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head>
+  <meta charset="utf-8" />
+  <title><!-- TODO: insert title here --></title>
+  <script src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
+  <script src="chrome://mochikit/content/tests/SimpleTest/AddTask.js"></script>
+  <link rel="stylesheet" type="text/css" href="chrome://mochikit/content/tests/SimpleTest/test.css"/>
+  <script><![CDATA[
+    add_task(async function test_TODO() {
+      ok(true, "TODO: implement the test");
+    });
+  ]]></script>
+</head>
+<body>
+<p id="display"></p>
+<div id="content" style="display: none">
+
+</div>
+<pre id="test">
+</pre>
+</body>
+</html>
diff --git a/testing/mochitest/static/chromexul.template.txt b/testing/mochitest/static/chromexul.template.txt
--- a/testing/mochitest/static/chromexul.template.txt
+++ b/testing/mochitest/static/chromexul.template.txt
@@ -1,26 +1,18 @@
 <?xml version="1.0"?>
 <?xml-stylesheet type="text/css" href="chrome://global/skin"?>
 <?xml-stylesheet type="text/css" href="chrome://mochikit/content/tests/SimpleTest/test.css"?>
-<!--
-https://bugzilla.mozilla.org/show_bug.cgi?id={BUGNUMBER}
--->
-<window title="Mozilla Bug {BUGNUMBER}"
+<window title="TODO: Insert title here"
         xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
-  <script type="application/javascript" src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"/>
+<script type="application/javascript"
+        src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js" />
+<script type="application/javascript"
+        src="chrome://mochikit/content/tests/SimpleTest/AddTask.js" />
+  <script type="application/javascript"><![CDATA[
+    add_task(async function test_TODO() {
+      ok(true, "TODO: implement the test");
+    });
+  ]]></script>
 
-  <!-- test results are displayed in the html:body -->
   <body xmlns="http://www.w3.org/1999/xhtml">
-  <a href="https://bugzilla.mozilla.org/show_bug.cgi?id={BUGNUMBER}"
-     target="_blank">Mozilla Bug {BUGNUMBER}</a>
   </body>
-
-  <!-- test code goes here -->
-  <script type="application/javascript">
-  <![CDATA[
-  /** Test for Bug {BUGNUMBER} **/
-
-
-
-  ]]>
-  </script>
 </window>
diff --git a/testing/mochitest/static/test.template.txt b/testing/mochitest/static/plainhtml.template.txt
rename from testing/mochitest/static/test.template.txt
rename to testing/mochitest/static/plainhtml.template.txt
--- a/testing/mochitest/static/test.template.txt
+++ b/testing/mochitest/static/plainhtml.template.txt
@@ -1,30 +1,23 @@
 <!DOCTYPE HTML>
 <html>
-<!--
-https://bugzilla.mozilla.org/show_bug.cgi?id={BUGNUMBER}
--->
 <head>
   <meta charset="utf-8">
-  <title>Test for Bug {BUGNUMBER}</title>
-  <script type="application/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <title><!-- TODO: insert title here --></title>
+  <script src="/tests/SimpleTest/SimpleTest.js"></script>
+  <script src="/tests/SimpleTest/AddTask.js"></script>
   <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css"/>
-  <script type="application/javascript">
-
-  /** Test for Bug {BUGNUMBER} **/
-
-
-
-
-
+  <script>
+    add_task(async function test_TODO() {
+      ok(true, "TODO: implement the test");
+    });
   </script>
 </head>
 <body>
-<a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id={BUGNUMBER}">Mozilla Bug {BUGNUMBER}</a>
 <p id="display"></p>
 <div id="content" style="display: none">
 
 </div>
 <pre id="test">
 </pre>
 </body>
 </html>
diff --git a/testing/mochitest/static/xhtml.template.txt b/testing/mochitest/static/plainxhtml.template.txt
rename from testing/mochitest/static/xhtml.template.txt
rename to testing/mochitest/static/plainxhtml.template.txt
--- a/testing/mochitest/static/xhtml.template.txt
+++ b/testing/mochitest/static/plainxhtml.template.txt
@@ -1,29 +1,23 @@
+<!DOCTYPE HTML>
 <html xmlns="http://www.w3.org/1999/xhtml">
-<!--
-https://bugzilla.mozilla.org/show_bug.cgi?id={BUGNUMBER}
--->
 <head>
-  <title>Test for Bug {BUGNUMBER}</title>
-  <script type="application/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <meta charset="utf-8" />
+  <title><!-- TODO: insert title here --></title>
+  <script src="/tests/SimpleTest/SimpleTest.js"></script>
+  <script src="/tests/SimpleTest/AddTask.js"></script>
   <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css"/>
-  <script type="application/javascript">
-  <![CDATA[
-
-  /** Test for Bug {BUGNUMBER} **/
-
-
-
-
-  ]]>
-</script>
+  <script><![CDATA[
+    add_task(async function test_TODO() {
+      ok(true, "TODO: implement the test");
+    });
+  ]]></script>
 </head>
 <body>
-<a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id={BUGNUMBER}">Mozilla Bug {BUGNUMBER}</a>
 <p id="display"></p>
 <div id="content" style="display: none">
 
 </div>
 <pre id="test">
 </pre>
 </body>
 </html>
diff --git a/testing/mochitest/static/xul.template.txt b/testing/mochitest/static/plainxul.template.txt
rename from testing/mochitest/static/xul.template.txt
rename to testing/mochitest/static/plainxul.template.txt
--- a/testing/mochitest/static/xul.template.txt
+++ b/testing/mochitest/static/plainxul.template.txt
@@ -1,28 +1,16 @@
 <?xml version="1.0"?>
 <?xml-stylesheet type="text/css" href="chrome://global/skin"?>
 <?xml-stylesheet type="text/css" href="/tests/SimpleTest/test.css"?>
-<!--
-https://bugzilla.mozilla.org/show_bug.cgi?id={BUGNUMBER}
--->
-<window title="Mozilla Bug {BUGNUMBER}"
+<window title="TODO: Insert title here"
         xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
-  <script type="application/javascript"
-          src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"/>
-
-  <!-- test code goes here -->
-  <script type="application/javascript">
-  <![CDATA[
+<script type="application/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+<script type="application/javascript" src="/tests/SimpleTest/AddTask.js"></script>
+  <script type="application/javascript"><![CDATA[
+    add_task(async function test_TODO() {
+      ok(true, "TODO: implement the test");
+    });
+  ]]></script>
 
-  /** Test for Bug {BUGNUMBER} **/
-
-
-
-  ]]>
-  </script>
-
-  <!-- test results are displayed in the html:body -->
   <body xmlns="http://www.w3.org/1999/xhtml">
-  <a href="https://bugzilla.mozilla.org/show_bug.cgi?id={BUGNUMBER}"
-     target="_blank">Mozilla Bug {BUGNUMBER}</a>
   </body>
 </window>
diff --git a/testing/mochitest/static/th.template.txt b/testing/mochitest/static/th.template.txt
deleted file mode 100644
--- a/testing/mochitest/static/th.template.txt
+++ /dev/null
@@ -1,11 +0,0 @@
-<!DOCTYPE html>
-<meta charset=utf-8>
-<title>Test for ...</title>
-<script src="/resources/testharness.js"></script>
-<script src="/resources/testharnessreport.js"></script>
-<div id="log"></div>
-<script>
-test(function() {
-
-}, "Description");
-</script>
diff --git a/testing/web-platform/mach_commands.py b/testing/web-platform/mach_commands.py
--- a/testing/web-platform/mach_commands.py
+++ b/testing/web-platform/mach_commands.py
@@ -10,16 +10,18 @@ import os
 import sys
 
 from mozbuild.base import (
     MachCommandBase,
     MachCommandConditions as conditions,
     MozbuildObject,
 )
 
+import mach_commands
+
 from mach.decorators import (
     CommandProvider,
     Command,
 )
 
 from mach_commands_base import WebPlatformTestsRunner, create_parser_wpt
 
 
@@ -191,133 +193,16 @@ class WebPlatformTestsUpdater(MozbuildOb
             update.run_update(logger, **kwargs)
         except Exception:
             import pdb
             import traceback
             traceback.print_exc()
 #            pdb.post_mortem()
 
 
-class WebPlatformTestsCreator(MozbuildObject):
-    template_prefix = """<!doctype html>
-%(documentElement)s<meta charset=utf-8>
-"""
-    template_long_timeout = "<meta name=timeout content=long>\n"
-
-    template_body_th = """<title></title>
-<script src=/resources/testharness.js></script>
-<script src=/resources/testharnessreport.js></script>
-<script>
-
-</script>
-"""
-
-    template_body_reftest = """<title></title>
-<link rel=%(match)s href=%(ref)s>
-"""
-
-    template_body_reftest_wait = """<script src="/common/reftest-wait.js"></script>
-"""
-
-    def rel_path(self, path):
-        if path is None:
-            return
-
-        abs_path = os.path.normpath(os.path.abspath(path))
-        return os.path.relpath(abs_path, self.topsrcdir)
-
-    def rel_url(self, rel_path):
-        upstream_path = os.path.join("testing", "web-platform", "tests")
-        local_path = os.path.join("testing", "web-platform", "mozilla", "tests")
-
-        if rel_path.startswith(upstream_path):
-            return rel_path[len(upstream_path):].replace(os.path.sep, "/")
-        elif rel_path.startswith(local_path):
-            return "/_mozilla" + rel_path[len(local_path):].replace(os.path.sep, "/")
-        else:
-            return None
-
-    def run_create(self, context, **kwargs):
-        import subprocess
-
-        path = self.rel_path(kwargs["path"])
-        ref_path = self.rel_path(kwargs["ref"])
-
-        if kwargs["ref"]:
-            kwargs["reftest"] = True
-
-        if self.rel_url(path) is None:
-            print("""Test path %s is not in wpt directories:
-testing/web-platform/tests for tests that may be shared
-testing/web-platform/mozilla/tests for Gecko-only tests""" % path)
-            return 1
-
-        if ref_path and self.rel_url(ref_path) is None:
-            print("""Reference path %s is not in wpt directories:
-testing/web-platform/tests for tests that may be shared
-            testing/web-platform/mozilla/tests for Gecko-only tests""" % ref_path)
-            return 1
-
-        if os.path.exists(path) and not kwargs["overwrite"]:
-            print("Test path already exists, pass --overwrite to replace")
-            return 1
-
-        if kwargs["mismatch"] and not kwargs["reftest"]:
-            print("--mismatch only makes sense for a reftest")
-            return 1
-
-        if kwargs["wait"] and not kwargs["reftest"]:
-            print("--wait only makes sense for a reftest")
-            return 1
-
-        args = {"documentElement": "<html class=reftest-wait>\n" if kwargs["wait"] else ""}
-        template = self.template_prefix % args
-        if kwargs["long_timeout"]:
-            template += self.template_long_timeout
-
-        if kwargs["reftest"]:
-            args = {"match": "match" if not kwargs["mismatch"] else "mismatch",
-                    "ref": self.rel_url(ref_path) if kwargs["ref"] else '""'}
-            template += self.template_body_reftest % args
-            if kwargs["wait"]:
-                template += self.template_body_reftest_wait
-        else:
-            template += self.template_body_th
-        try:
-            os.makedirs(os.path.dirname(path))
-        except OSError:
-            pass
-        with open(path, "w") as f:
-            f.write(template)
-
-        ref_path = kwargs["ref"]
-        if ref_path and not os.path.exists(ref_path):
-            with open(ref_path, "w") as f:
-                f.write(self.template_prefix % {"documentElement": ""})
-
-        if kwargs["no_editor"]:
-            editor = None
-        elif kwargs["editor"]:
-            editor = kwargs["editor"]
-        elif "VISUAL" in os.environ:
-            editor = os.environ["VISUAL"]
-        elif "EDITOR" in os.environ:
-            editor = os.environ["EDITOR"]
-        else:
-            editor = None
-
-        proc = None
-        if editor:
-            if ref_path:
-                path = "%s %s" % (path, ref_path)
-            proc = subprocess.Popen("%s %s" % (editor, path), shell=True)
-
-        if proc:
-            proc.wait()
-
 
 def create_parser_update():
     from update import updatecommandline
     return updatecommandline.create_parser()
 
 
 def create_parser_create():
     import argparse
@@ -401,32 +286,16 @@ class MachCommands(MachCommandBase):
 
     @Command("wpt-update",
              category="testing",
              description="Update web-platform-test metadata.",
              parser=create_parser_update)
     def update_wpt(self, **params):
         return self.update_web_platform_tests(**params)
 
-    @Command("web-platform-tests-create",
-             category="testing",
-             description="Create a new web-platform test.",
-             parser=create_parser_create)
-    def create_web_platform_test(self, **params):
-        self.setup()
-        wpt_creator = self._spawn(WebPlatformTestsCreator)
-        wpt_creator.run_create(self._mach_context, **params)
-
-    @Command("wpt-create",
-             category="testing",
-             description="Create a new web-platform test.",
-             parser=create_parser_create)
-    def create_wpt(self, **params):
-        return self.create_web_platform_test(**params)
-
     @Command("wpt-manifest-update",
              category="testing",
              description="Update web-platform-test manifests.",
              parser=create_parser_manifest_update)
     def wpt_manifest_update(self, **params):
         self.setup()
         wpt_setup = self._spawn(WebPlatformTestsRunnerSetup)
         wpt_runner = WebPlatformTestsRunner(wpt_setup)
diff --git a/toolkit/components/windowcreator/test/chrome.ini b/toolkit/components/windowcreator/test/chrome.ini
--- a/toolkit/components/windowcreator/test/chrome.ini
+++ b/toolkit/components/windowcreator/test/chrome.ini
@@ -4,8 +4,9 @@ support-files =
   bug449141_page.html
   bug1170334_iframe.xml
   bug1170334_style.css
 
 [test_bug449141.html]
 skip-if = toolkit == 'android'
 [test_bug1170334_wbp_xmlstyle.html]
 [test_bug1192654.html]
+[test_chrome.html]
diff --git a/toolkit/components/windowcreator/test/mochitest.ini b/toolkit/components/windowcreator/test/mochitest.ini
--- a/toolkit/components/windowcreator/test/mochitest.ini
+++ b/toolkit/components/windowcreator/test/mochitest.ini
@@ -1,13 +1,14 @@
 [DEFAULT]
 support-files =
   bug293834_form.html
 
 [test_bug293834.html]
 skip-if = (toolkit == "cocoa" && e10s) # bug 1252223
 [test_bug499115.html]
+[test_chrome.html]
 [test_nsFind.html]
 [test_private_window_from_content.html]
 [test_window_open_position_constraint.html]
 skip-if = toolkit == 'android'
 [test_window_open_units.html]
 skip-if = toolkit == 'android'
