# HG changeset patch
# Parent f6b77efb9db555bb9d7da9edde8da78b85527960
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 1102308 - Refactor pref-changed emitting in toolbox-options.js;r=jryans

diff --git a/browser/devtools/framework/toolbox-options.js b/browser/devtools/framework/toolbox-options.js
--- a/browser/devtools/framework/toolbox-options.js
+++ b/browser/devtools/framework/toolbox-options.js
@@ -288,23 +288,17 @@ OptionsPanel.prototype = {
   /**
    * Similar to `populatePrefs`, except we want more
    * special rules for the browser theme button.
    */
   setupBrowserThemeButton: function() {
     let checkbox = this.panelDoc.getElementById("devtools-browser-theme");
 
     checkbox.addEventListener("command", function() {
-      let data = {
-        pref: DEVEDITION_THEME_PREF,
-        newValue: this.checked
-      };
-      data.oldValue = GetPref(data.pref);
-      SetPref(data.pref, data.newValue);
-      gDevTools.emit("pref-changed", data);
+      setPrefAndEmit(DEVEDITION_THEME_PREF, this.checked);
     }.bind(checkbox));
 
     this.updateBrowserThemeButton();
   },
 
   /**
    * Called on theme changed via observer of "devedition-theme-state-changed".
    */
@@ -337,68 +331,46 @@ OptionsPanel.prototype = {
     CustomizeMode.prototype.toggleDevEditionTheme.call(this, enabled);
   },
 
   populatePreferences: function() {
     let prefCheckboxes = this.panelDoc.querySelectorAll("checkbox[data-pref]");
     for (let checkbox of prefCheckboxes) {
       checkbox.checked = GetPref(checkbox.getAttribute("data-pref"));
       checkbox.addEventListener("command", function() {
-        let data = {
-          pref: this.getAttribute("data-pref"),
-          newValue: this.checked
-        };
-        data.oldValue = GetPref(data.pref);
-        SetPref(data.pref, data.newValue);
-        gDevTools.emit("pref-changed", data);
+        setPrefAndEmit(this.getAttribute("data-pref"), this.checked);
       }.bind(checkbox));
     }
     let prefRadiogroups = this.panelDoc.querySelectorAll("radiogroup[data-pref]");
     for (let radiogroup of prefRadiogroups) {
       let selectedValue = GetPref(radiogroup.getAttribute("data-pref"));
       for (let radio of radiogroup.childNodes) {
         radiogroup.selectedIndex = -1;
         if (radio.getAttribute("value") == selectedValue) {
           radiogroup.selectedItem = radio;
           break;
         }
       }
       radiogroup.addEventListener("select", function() {
-        let data = {
-          pref: this.getAttribute("data-pref"),
-          newValue: this.selectedItem.getAttribute("value")
-        };
-
-        data.oldValue = GetPref(data.pref);
-        SetPref(data.pref, data.newValue);
-
-        if (data.newValue != data.oldValue) {
-          gDevTools.emit("pref-changed", data);
-        }
+        setPrefAndEmit(this.getAttribute("data-pref"), this.selectedItem.getAttribute("value"));
       }.bind(radiogroup));
     }
     let prefMenulists = this.panelDoc.querySelectorAll("menulist[data-pref]");
     for (let menulist of prefMenulists) {
       let pref = GetPref(menulist.getAttribute("data-pref"));
       let menuitems = menulist.querySelectorAll("menuitem");
       for (let menuitem of menuitems) {
         let value = menuitem.value;
         if (value == pref) { // non strict check to allow int values.
           menulist.selectedItem = menuitem;
           break;
         }
       }
       menulist.addEventListener("command", function() {
-        let data = {
-          pref: this.getAttribute("data-pref"),
-          newValue: this.value
-        };
-        data.oldValue = GetPref(data.pref);
-        SetPref(data.pref, data.newValue);
-        gDevTools.emit("pref-changed", data);
+        setPrefAndEmit(this.getAttribute("data-pref"), this.value);
       }.bind(menulist));
     }
 
     this.target.client.attachTab(this.target.activeTab._actor, (response) => {
       this._origJavascriptEnabled = response.javascriptEnabled;
 
       this._populateDisableJSCheckbox();
     });
@@ -493,8 +465,22 @@ OptionsPanel.prototype = {
       deferred.resolve();
     }, true);
 
     Services.obs.removeObserver(this, kDeveditionChangedNotification);
 
     return deferred.promise;
   }
 };
+
+/* Set a pref and emit the pref-changed event if needed. */
+function setPrefAndEmit(prefName, newValue) {
+  let data = {
+    pref: prefName,
+    newValue: newValue
+  };
+  data.oldValue = GetPref(data.pref);
+  SetPref(data.pref, data.newValue);
+
+  if (data.newValue != data.oldValue) {
+    gDevTools.emit("pref-changed", data);
+  }
+}
