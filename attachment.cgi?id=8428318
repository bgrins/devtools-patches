# HG changeset patch
# User Paul Rouget <paul@mozilla.com>
# Date 1400963087 -19800
#      Sun May 25 01:54:47 2014 +0530
# Node ID d70649fe8b8c544b52246935d0a3730961d3ff57
# Parent 709435532dcdb79fce7e2dd12b70257c3d2e60ba
Bug 964356 - Expose preferences for editor defaults in options panel

diff --git a/browser/devtools/framework/options-panel.css b/browser/devtools/framework/options-panel.css
--- a/browser/devtools/framework/options-panel.css
+++ b/browser/devtools/framework/options-panel.css
@@ -16,18 +16,18 @@
 }
 
 .options-vertical-pane > label {
   display: block;
 }
 
 .options-vertical-pane {
   margin: 5px;
-  width: calc(50% - 30px);
-  min-width: 350px;
+  width: calc(100%/3 - 30px);
+  min-width: 250px;
   -moz-padding-start: 5px;
 }
 
 .options-vertical-pane > label {
   padding: 2px 0;
   font-size: 1.4rem;
 }
 
@@ -51,8 +51,16 @@
   font-style: italic;
   padding: 4px 0 0; /* To align it with the checkbox */
 }
 
 .hidden-labels-box:not(.visible) > label,
 .hidden-labels-box.visible ~ .hidden-labels-box > label:last-child {
   display: none;
 }
+
+#devtools-sourceeditor-keybinding-menulist {
+  min-width: 100px;
+}
+
+#devtools-sourceeditor-tabsize-menulist {
+  min-width: 50px;
+}
diff --git a/browser/devtools/framework/toolbox-options.js b/browser/devtools/framework/toolbox-options.js
--- a/browser/devtools/framework/toolbox-options.js
+++ b/browser/devtools/framework/toolbox-options.js
@@ -23,16 +23,44 @@ XPCOMUtils.defineLazyGetter(this, "l10n"
       }
     } catch (ex) {
       Services.console.logStringMessage("Error reading '" + aName + "'");
     }
   };
   return l10n;
 });
 
+function GetPref(name) {
+  let type = Services.prefs.getPrefType(name);
+  switch (type) {
+    case Services.prefs.PREF_STRING:
+      return Services.prefs.getCharPref(name);
+    case Services.prefs.PREF_INT:
+      return Services.prefs.getIntPref(name);
+    case Services.prefs.PREF_BOOL:
+      return Services.prefs.getBoolPref(name);
+    default:
+      throw new Error("Unknown type");
+  }
+}
+
+function SetPref(name, value) {
+  let type = Services.prefs.getPrefType(name);
+  switch (type) {
+    case Services.prefs.PREF_STRING:
+      return Services.prefs.setCharPref(name, value);
+    case Services.prefs.PREF_INT:
+      return Services.prefs.setIntPref(name, value);
+    case Services.prefs.PREF_BOOL:
+      return Services.prefs.setBoolPref(name, value);
+    default:
+      throw new Error("Unknown type");
+  }
+}
+
 /**
  * Represents the Options Panel in the Toolbox.
  */
 function OptionsPanel(iframeWindow, toolbox) {
   this.panelDoc = iframeWindow.document;
   this.panelWin = iframeWindow;
   this.toolbox = toolbox;
   this.isReady = false;
@@ -102,35 +130,35 @@ OptionsPanel.prototype = {
     enabledToolbarButtonsBox.textContent = "";
 
     let toggleableButtons = this.toolbox.toolboxButtons;
     let setToolboxButtonsVisibility =
       this.toolbox.setToolboxButtonsVisibility.bind(this.toolbox);
 
     let onCheckboxClick = (checkbox) => {
       let toolDefinition = toggleableButtons.filter(tool => tool.id === checkbox.id)[0];
-      Services.prefs.setBoolPref(toolDefinition.visibilityswitch, checkbox.checked);
+      SetPref(toolDefinition.visibilityswitch, checkbox.checked);
       setToolboxButtonsVisibility();
     };
 
     let createCommandCheckbox = tool => {
       let checkbox = this.panelDoc.createElement("checkbox");
       checkbox.setAttribute("id", tool.id);
       checkbox.setAttribute("label", tool.label);
-      checkbox.setAttribute("checked", this.getBoolPref(tool.visibilityswitch));
+      checkbox.setAttribute("checked", this.infallibleGetBoolPref(tool.visibilityswitch));
       checkbox.addEventListener("command", onCheckboxClick.bind(this, checkbox));
       return checkbox;
     };
 
     for (let tool of toggleableButtons) {
       enabledToolbarButtonsBox.appendChild(createCommandCheckbox(tool));
     }
   },
 
-  getBoolPref: function(key) {
+  infallibleGetBoolPref: function(key) {
     try {
       return Services.prefs.getBoolPref(key);
     }
     catch (ex) {
       return true;
     }
   },
 
@@ -141,17 +169,17 @@ OptionsPanel.prototype = {
     let atleastOneToolNotSupported = false;
 
     defaultToolsBox.textContent = "";
     additionalToolsBox.textContent = "";
 
     let onCheckboxClick = function(id) {
       let toolDefinition = gDevTools._tools.get(id);
       // Set the kill switch pref boolean to true
-      Services.prefs.setBoolPref(toolDefinition.visibilityswitch, this.checked);
+      SetPref(toolDefinition.visibilityswitch, this.checked);
       if (this.checked) {
         gDevTools.emit("tool-registered", id);
       }
       else {
         gDevTools.emit("tool-unregistered", toolDefinition);
       }
     };
 
@@ -163,17 +191,17 @@ OptionsPanel.prototype = {
         checkbox.setAttribute("label", tool.label);
       }
       else {
         atleastOneToolNotSupported = true;
         checkbox.setAttribute("label",
                               l10n("options.toolNotSupportedMarker", tool.label));
         checkbox.setAttribute("unsupported", "");
       }
-      checkbox.setAttribute("checked", this.getBoolPref(tool.visibilityswitch));
+      checkbox.setAttribute("checked", this.infallibleGetBoolPref(tool.visibilityswitch));
       checkbox.addEventListener("command", onCheckboxClick.bind(checkbox, tool.id));
       return checkbox;
     };
 
     // Populating the default tools lists
     let toggleableTools = gDevTools.getDefaultTools().filter(tool => {
       return tool.visibilityswitch;
     });
@@ -199,65 +227,65 @@ OptionsPanel.prototype = {
     }
 
     this.panelWin.focus();
   },
 
   populatePreferences: function() {
     let prefCheckboxes = this.panelDoc.querySelectorAll("checkbox[data-pref]");
     for (let checkbox of prefCheckboxes) {
-      checkbox.checked = Services.prefs.getBoolPref(checkbox.getAttribute("data-pref"));
+      checkbox.checked = GetPref(checkbox.getAttribute("data-pref"));
       checkbox.addEventListener("command", function() {
         let data = {
           pref: this.getAttribute("data-pref"),
           newValue: this.checked
         };
-        data.oldValue = Services.prefs.getBoolPref(data.pref);
-        Services.prefs.setBoolPref(data.pref, data.newValue);
+        data.oldValue = GetPref(data.pref);
+        SetPref(data.pref, data.newValue);
         gDevTools.emit("pref-changed", data);
       }.bind(checkbox));
     }
     let prefRadiogroups = this.panelDoc.querySelectorAll("radiogroup[data-pref]");
     for (let radiogroup of prefRadiogroups) {
-      let selectedValue = Services.prefs.getCharPref(radiogroup.getAttribute("data-pref"));
+      let selectedValue = GetPref(radiogroup.getAttribute("data-pref"));
       for (let radio of radiogroup.childNodes) {
         radiogroup.selectedIndex = -1;
         if (radio.getAttribute("value") == selectedValue) {
           radiogroup.selectedItem = radio;
           break;
         }
       }
       radiogroup.addEventListener("select", function() {
         let data = {
           pref: this.getAttribute("data-pref"),
           newValue: this.selectedItem.getAttribute("value")
         };
-        data.oldValue = Services.prefs.getCharPref(data.pref);
-        Services.prefs.setCharPref(data.pref, data.newValue);
+        data.oldValue = GetPref(data.pref);
+        SetPref(data.pref, data.newValue);
         gDevTools.emit("pref-changed", data);
       }.bind(radiogroup));
     }
     let prefMenulists = this.panelDoc.querySelectorAll("menulist[data-pref]");
     for (let menulist of prefMenulists) {
-      let pref = Services.prefs.getCharPref(menulist.getAttribute("data-pref"));
+      let pref = GetPref(menulist.getAttribute("data-pref"));
       let menuitems = menulist.querySelectorAll("menuitem");
       for (let menuitem of menuitems) {
         let value = menuitem.getAttribute("value");
-        if (value === pref) {
+        if (value == pref) {
           menulist.selectedItem = menuitem;
           break;
         }
       }
       menulist.addEventListener("command", function() {
         let data = {
           pref: this.getAttribute("data-pref"),
           newValue: this.value
         };
-        data.oldValue = Services.prefs.getCharPref(data.pref);
-        Services.prefs.setCharPref(data.pref, data.newValue);
+        data.oldValue = GetPref(data.pref);
+        SetPref(data.pref, data.newValue);
         gDevTools.emit("pref-changed", data);
       }.bind(menulist));
     }
 
     this.target.client.attachTab(this.target.activeTab._actor, (response) => {
       this._origJavascriptEnabled = response.javascriptEnabled;
 
       this._populateDisableJSCheckbox();
diff --git a/browser/devtools/framework/toolbox-options.xul b/browser/devtools/framework/toolbox-options.xul
--- a/browser/devtools/framework/toolbox-options.xul
+++ b/browser/devtools/framework/toolbox-options.xul
@@ -44,18 +44,18 @@
         </vbox>
         <label value="&options.context.inspector;"/>
         <vbox id="inspector-options" class="options-groupbox">
           <checkbox label="&options.showUserAgentStyles.label;"
                     tooltiptext="&options.showUserAgentStyles.tooltip;"
                     data-pref="devtools.inspector.showUserAgentStyles"/>
           <hbox align="center">
             <label value="&options.defaultColorUnit.label;"
-              control="defaultColorUnitMenuList"
-              accesskey="&options.defaultColorUnit.accesskey;"/>
+                   control="defaultColorUnitMenuList"
+                   accesskey="&options.defaultColorUnit.accesskey;"/>
             <menulist id="defaultColorUnitMenuList"
                       label="&options.defaultColorUnit.label;"
                       data-pref="devtools.defaultColorUnit">
               <menupopup>
                 <menuitem label="&options.defaultColorUnit.hex;" value="hex"/>
                 <menuitem label="&options.defaultColorUnit.hsl;" value="hsl"/>
                 <menuitem label="&options.defaultColorUnit.rgb;" value="rgb"/>
                 <menuitem label="&options.defaultColorUnit.name;" value="name"/>
@@ -80,16 +80,62 @@
                     data-pref="devtools.styleeditor.autocompletion-enabled"/>
         </vbox>
         <label value="&options.profiler.label;"/>
         <vbox id="profiler-options" class="options-groupbox">
           <checkbox label="&options.showPlatformData.label;"
                     tooltiptext="&options.showPlatformData.tooltip;"
                     data-pref="devtools.profiler.ui.show-platform-data"/>
         </vbox>
+      </vbox>
+
+      <vbox id="sourceeditor-box" class="options-vertical-pane" flex="1">
+        <label value="&options.sourceeditor.label;"/>
+        <vbox id="sourceeditor-options" class="options-groupbox">
+          <checkbox id="devtools-sourceeditor-detectindentation"
+                    label="&options.sourceeditor.detectindentation.label;"
+                    tooltiptext="&options.sourceeditor.detectindentation.tooltip;"
+                    data-pref="devtools.editor.detectindentation"/>
+          <checkbox id="devtools-sourceeditor-autoclosebrackets"
+                    label="&options.sourceeditor.autoclosebrackets.label;"
+                    tooltiptext="&options.sourceeditor.autoclosebrackets.tooltip;"
+                    data-pref="devtools.editor.autoclosebrackets"/>
+          <checkbox id="devtools-sourceeditor-expandtab"
+                    label="&options.sourceeditor.expandtab.label;"
+                    tooltiptext="&options.sourceeditor.expandtab.tooltip;"
+                    data-pref="devtools.editor.expandtab"/>
+          <hbox align="center">
+            <label value="&options.sourceeditor.tabsize.label;"
+                   control="devtools-sourceeditor-tabsize-menulist"
+                   accesskey="&options.sourceeditor.tabsize.accesskey;"/>
+            <menulist id="devtools-sourceeditor-tabsize-menulist"
+                      data-pref="devtools.editor.tabsize">
+              <menupopup>
+                <menuitem label="2" value="2"/>
+                <menuitem label="4" value="4"/>
+                <menuitem label="8" value="8"/>
+              </menupopup>
+            </menulist>
+          </hbox>
+          <hbox align="center">
+            <label value="&options.sourceeditor.keybinding.label;"
+                   control="devtools-sourceeditor-keybinding-menulist"
+                   accesskey="&options.sourceeditor.keybinding.accesskey;"/>
+            <menulist id="devtools-sourceeditor-keybinding-menulist"
+                      data-pref="devtools.editor.keymap">
+              <menupopup>
+                <menuitem value="default"
+                          label="&options.sourceeditor.keybinding.default.label;"/>
+                <menuitem label="Vim" value="vim"/>
+                <menuitem label="Emacs" value="emacs"/>
+                <menuitem label="Sublime Text" value="sublime"/>
+              </menupopup>
+            </menulist>
+          </hbox>
+        </vbox>
         <label value="&options.context.advancedSettings;"/>
         <vbox id="context-options" class="options-groupbox">
           <checkbox id="devtools-disable-cache"
                     label="&options.disableCache.label2;"
                     tooltiptext="&options.disableCache.tooltip2;"
                     data-pref="devtools.cache.disabled"/>
           <checkbox id="devtools-disable-javascript"
                     label="&options.disableJavaScript.label;"
@@ -99,15 +145,15 @@
                       tooltiptext="&options.enableChrome.tooltip2;"
                       data-pref="devtools.chrome.enabled"/>
           </hbox>
           <hbox class="hidden-labels-box">
             <checkbox label="&options.enableRemote.label3;"
                       tooltiptext="&options.enableRemote.tooltip;"
                       data-pref="devtools.debugger.remote-enabled"/>
           </hbox>
-          <label class="options-citation-label"
+          <label class="options-citation-label theme-comment"
                  value="&options.context.triggersPageRefresh;"/>
         </vbox>
       </vbox>
     </hbox>
   </hbox>
 </window>
diff --git a/browser/locales/en-US/chrome/browser/devtools/toolbox.dtd b/browser/locales/en-US/chrome/browser/devtools/toolbox.dtd
--- a/browser/locales/en-US/chrome/browser/devtools/toolbox.dtd
+++ b/browser/locales/en-US/chrome/browser/devtools/toolbox.dtd
@@ -160,8 +160,24 @@
 
 <!-- LOCALIZATION NOTE (options.showPlatformData.label): This is the
   -  label for the checkbox that toggles the display of the platform data in the,
   -  Profiler i.e. devtools.profiler.ui.show-platform-data a boolean preference
   -  in about:config, in the options panel. -->
 <!ENTITY options.showPlatformData.label    "Show Gecko platform data">
 <!ENTITY options.showPlatformData.tooltip  "If you enable this option the JavaScript Profiler reports will include
 Gecko platform symbols">
+
+<!-- LOCALIZATION NOTE (options.sourceeditor.*): Options under the editor
+  -  section. -->
+
+<!ENTITY options.sourceeditor.label                     "Editor Preferences">
+<!ENTITY options.sourceeditor.detectindentation.label   "Detect indentation">
+<!ENTITY options.sourceeditor.detectindentation.tooltip "Guess indentation based on source content">
+<!ENTITY options.sourceeditor.autoclosebrackets.label   "Autoclose brackets">
+<!ENTITY options.sourceeditor.autoclosebrackets.tooltip "Automatically insert closing brackets">
+<!ENTITY options.sourceeditor.expandtab.label           "Indent using spaces">
+<!ENTITY options.sourceeditor.expandtab.tooltip         "Use spaces intead of the tab character">
+<!ENTITY options.sourceeditor.tabsize.label             "Tab size">
+<!ENTITY options.sourceeditor.tabsize.accesskey         "T">
+<!ENTITY options.sourceeditor.keybinding.label          "Keybindings">
+<!ENTITY options.sourceeditor.keybinding.accesskey      "K">
+<!ENTITY options.sourceeditor.keybinding.default.label  "Default">
