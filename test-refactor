# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  3bdc4cbb3055869b2c31351632caa48462e23aa1
Bug 1207542 - test refactor attempt

diff --git a/browser/base/content/test/general/browser_identity_UI.js b/browser/base/content/test/general/browser_identity_UI.js
--- a/browser/base/content/test/general/browser_identity_UI.js
+++ b/browser/base/content/test/general/browser_identity_UI.js
@@ -1,21 +1,22 @@
 /* Tests for correct behaviour of getEffectiveHost on identity handler */
 
-function test() {
-  waitForExplicitFinish();
-  requestLongerTimeout(2);
 
-  ok(gIdentityHandler, "gIdentityHandler should exist");
+// function test() {
+//   waitForExplicitFinish();
+//   requestLongerTimeout(2);
 
-  BrowserTestUtils.openNewForegroundTab(gBrowser).then(() => {
-    gBrowser.selectedBrowser.addEventListener("load", checkResult, true);
-    nextTest();
-  });
-}
+//   ok(gIdentityHandler, "gIdentityHandler should exist");
+
+//   BrowserTestUtils.openNewForegroundTab(gBrowser, true).then(() => {
+//     gBrowser.selectedBrowser.addEventListener("load", checkResult, true);
+//     nextTest();
+//   });
+// }
 
 // Greek IDN for 'example.test'.
 var idnDomain = "\u03C0\u03B1\u03C1\u03AC\u03B4\u03B5\u03B9\u03B3\u03BC\u03B1.\u03B4\u03BF\u03BA\u03B9\u03BC\u03AE";
 var tests = [
   {
     name: "normal domain",
     location: "http://test1.example.org/",
     effectiveHost: "test1.example.org"
@@ -55,75 +56,163 @@ var tests = [
   },
   {
     name: "IP address",
     location: "http://127.0.0.1:8888/",
     effectiveHost: "127.0.0.1"
   },
 ]
 
-var gCurrentTest, gCurrentTestIndex = -1, gTestDesc, gPopupHidden;
-// Go through the tests in both directions, to add additional coverage for
-// transitions between different states.
-var gForward = true;
-var gCheckETLD = false;
-function nextTest() {
-  if (!gCheckETLD) {
-    if (gForward)
-      gCurrentTestIndex++;
-    else
-      gCurrentTestIndex--;
+requestLongerTimeout(2);
+add_task(function*() {
+  ok(gIdentityHandler, "gIdentityHandler should exist");
+  yield BrowserTestUtils.openNewForegroundTab(gBrowser, "about:blank", true);
+  let gCheckETLD = false;
 
-    if (gCurrentTestIndex == tests.length) {
-      // Went too far, reverse
-      gCurrentTestIndex--;
-      gForward = false;
+  let i = -1;
+  let forward = true;
+  while (true) {
+    i = forward ? i + 1 : i - 1;
+    if (i === tests.length) {
+      // Do the same 
+      i--;
+      forward = false;
     }
 
-    if (gCurrentTestIndex == -1) {
-      gBrowser.selectedBrowser.removeEventListener("load", checkResult, true);
-      gBrowser.removeCurrentTab();
-      finish();
-      return;
+    if (i == -1) {
+      break;
     }
 
-    gCurrentTest = tests[gCurrentTestIndex];
-    gTestDesc = "#" + gCurrentTestIndex + " (" + gCurrentTest.name + ")";
-    if (!gForward)
-      gTestDesc += " (second time)";
-    if (gCurrentTest.isHTTPS) {
-      gCheckETLD = true;
-    }
+    console.log("Running test" + i);
+    let currentTest = tests[i];
+    let testDesc = "#" + i + " (" + currentTest.name + ")";
 
     // If currently on about:blank or loading the same URL that is already
     // loaded, then  don't need to test any Control Center visibility (Bug 1207542).
     let spec = gBrowser.selectedBrowser.currentURI.spec;
-    if (spec == "about:blank" || spec == gCurrentTest.location) {
-      BrowserTestUtils.loadURI(gBrowser.selectedBrowser, gCurrentTest.location);
+      console.log("SPEC", spec, currentTest.location);
+    if (spec == "about:blank" || spec == currentTest.location) {
+      info("LOADING URI");
+      BrowserTestUtils.loadURI(gBrowser.selectedBrowser, currentTest.location);
+      yield BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser);
     } else {
       let popupShown = promisePopupShown(gIdentityHandler._identityPopup);
-      gPopupHidden = promisePopupHidden(gIdentityHandler._identityPopup);
+      let popupHidden = promisePopupHidden(gIdentityHandler._identityPopup);
       gIdentityHandler._identityBox.click();
       info("Waiting for the Control Center to be shown");
-      popupShown.then(() => {
-        is_element_visible(gIdentityHandler._identityPopup, "Control Center is visible");
-        // Show the subview and make sure it closes when the URL changes (Bug 1207542).
-        gBrowser.ownerDocument.querySelector("#identity-popup-security-expander").click();
-        BrowserTestUtils.loadURI(gBrowser.selectedBrowser, gCurrentTest.location);
-      });
+      yield popupShown;
+      is_element_visible(gIdentityHandler._identityPopup, "Control Center is visible");
+      // Show the subview and make sure it closes when the URL changes (Bug 1207542).
+      gBrowser.ownerDocument.querySelector("#identity-popup-security-expander").click();
+      BrowserTestUtils.loadURI(gBrowser.selectedBrowser, currentTest.location);
+      yield BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser);
+      yield popupHidden;
+      is_element_hidden(gIdentityHandler._identityPopup, "control center is hidden");
     }
+
+    // Sanity check other values, and the value of gIdentityHandler.getEffectiveHost()
+    is(gIdentityHandler._uri.spec, currentTest.location, "location matches for test " + testDesc);
+    // getEffectiveHost can't be called for all modes
+    if (currentTest.effectiveHost === null) {
+      let identityBox = document.getElementById("identity-box");
+      ok(identityBox.className == "unknownIdentity" ||
+         identityBox.className == "chromeUI", "mode matched");
+    } else {
+      is(gIdentityHandler.getEffectiveHost(), currentTest.effectiveHost, "effectiveHost matches for test " + testDesc);
+    }
+  }
+
+  gBrowser.removeCurrentTab();
+});
+
+
+// var gCurrentTest, gCurrentTestIndex = -1, gTestDesc, gPopupHidden;
+// // Go through the tests in both directions, to add additional coverage for
+// // transitions between different states.
+// var gForward = true;
+// var gCheckETLD = false;
+// function nextTest() {
+//   if (!gCheckETLD) {
+//     if (gForward)
+//       gCurrentTestIndex++;
+//     else
+//       gCurrentTestIndex--;
+
+//     if (gCurrentTestIndex == tests.length) {
+//       // Went too far, reverse
+//       gCurrentTestIndex--;
+//       gForward = false;
+//     }
+
+//     if (gCurrentTestIndex == -1) {
+//       gBrowser.selectedBrowser.removeEventListener("load", checkResult, true);
+//       gBrowser.removeCurrentTab();
+//       finish();
+//       return;
+//     }
+
+//     gCurrentTest = tests[gCurrentTestIndex];
+//     gTestDesc = "#" + gCurrentTestIndex + " (" + gCurrentTest.name + ")";
+//     if (!gForward)
+//       gTestDesc += " (second time)";
+//     if (gCurrentTest.isHTTPS) {
+//       gCheckETLD = true;
+//     }
+
+//     // If currently on about:blank or loading the same URL that is already
+//     // loaded, then  don't need to test any Control Center visibility (Bug 1207542).
+//     let spec = gBrowser.selectedBrowser.currentURI.spec;
+//     if (spec == "about:blank" || spec == gCurrentTest.location) {
+//       BrowserTestUtils.loadURI(gBrowser.selectedBrowser, gCurrentTest.location);
+//     } else {
+//       let popupShown = promisePopupShown(gIdentityHandler._identityPopup);
+//       gPopupHidden = promisePopupHidden(gIdentityHandler._identityPopup);
+//       gIdentityHandler._identityBox.click();
+//       info("Waiting for the Control Center to be shown");
+//       popupShown.then(() => {
+//         is_element_visible(gIdentityHandler._identityPopup, "Control Center is visible");
+//         // Show the subview and make sure it closes when the URL changes (Bug 1207542).
+//         gBrowser.ownerDocument.querySelector("#identity-popup-security-expander").click();
+//         BrowserTestUtils.loadURI(gBrowser.selectedBrowser, gCurrentTest.location);
+//       });
+//     }
+//   } else {
+//     gCheckETLD = false;
+//     gTestDesc = "#" + gCurrentTestIndex + " (" + gCurrentTest.name + " without eTLD in identity icon label)";
+//     if (!gForward)
+//       gTestDesc += " (second time)";
+//     content.location.reload(true);
+//   }
+// }
+function checkResult(currentTest) {
+  // Sanity check other values, and the value of gIdentityHandler.getEffectiveHost()
+  is(gIdentityHandler._uri.spec, currentTest.location, "location matches for test " + gTestDesc);
+  // getEffectiveHost can't be called for all modes
+  if (currentTest.effectiveHost === null) {
+    let identityBox = document.getElementById("identity-box");
+    ok(identityBox.className == "unknownIdentity" ||
+       identityBox.className == "chromeUI", "mode matched");
   } else {
-    gCheckETLD = false;
-    gTestDesc = "#" + gCurrentTestIndex + " (" + gCurrentTest.name + " without eTLD in identity icon label)";
-    if (!gForward)
-      gTestDesc += " (second time)";
-    content.location.reload(true);
+    is(gIdentityHandler.getEffectiveHost(), currentTest.effectiveHost, "effectiveHost matches for test " + gTestDesc);
+  }
+
+  if (gPopupHidden) {
+    info("Waiting for the Control Center to hide");
+    gPopupHidden.then(() => {
+      gPopupHidden = null;
+      is_element_hidden(gIdentityHandler._identityPopup, "control center is hidden");
+      executeSoon(nextTest);
+    });
+  } else {
+    executeSoon(nextTest);
   }
 }
 
+
+
 function checkResult() {
   // Sanity check other values, and the value of gIdentityHandler.getEffectiveHost()
   is(gIdentityHandler._uri.spec, gCurrentTest.location, "location matches for test " + gTestDesc);
   // getEffectiveHost can't be called for all modes
   if (gCurrentTest.effectiveHost === null) {
     let identityBox = document.getElementById("identity-box");
     ok(identityBox.className == "unknownIdentity" ||
        identityBox.className == "chromeUI", "mode matched");
