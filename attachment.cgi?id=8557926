# HG changeset patch
# User Patrick Brosset <pbrosset@mozilla.com>
# Parent  e261a9fd35339da516dbf110ef6665f537064050
Bug 1123851 - 3 - Tests

diff --git a/browser/devtools/commandline/test/browser.ini b/browser/devtools/commandline/test/browser.ini
--- a/browser/devtools/commandline/test/browser.ini
+++ b/browser/devtools/commandline/test/browser.ini
@@ -49,16 +49,17 @@ support-files =
  browser_cmd_csscoverage_page3.html
  browser_cmd_csscoverage_sheetA.css
  browser_cmd_csscoverage_sheetB.css
  browser_cmd_csscoverage_sheetC.css
  browser_cmd_csscoverage_sheetD.css
 [browser_cmd_folder.js]
 [browser_cmd_highlight_01.js]
 [browser_cmd_highlight_02.js]
+[browser_cmd_highlight_03.js]
 [browser_cmd_inject.js]
 support-files =
  browser_cmd_inject.html
 [browser_cmd_csscoverage_util.js]
 [browser_cmd_jsb.js]
 support-files =
   browser_cmd_jsb_script.jsi
 [browser_cmd_media.js]
diff --git a/browser/devtools/commandline/test/browser_cmd_highlight_01.js b/browser/devtools/commandline/test/browser_cmd_highlight_01.js
--- a/browser/devtools/commandline/test/browser_cmd_highlight_01.js
+++ b/browser/devtools/commandline/test/browser_cmd_highlight_01.js
@@ -5,17 +5,19 @@
 
 // Tests the various highlight command parameters and options
 
 // Creating a test page with many elements to test the --showall option
 let TEST_PAGE = "data:text/html;charset=utf-8,<body><ul>";
 for (let i = 0; i < 200; i ++) {
   TEST_PAGE += "<li class='item'>" + i + "</li>";
 }
-TEST_PAGE += "</ul></body>";
+TEST_PAGE += "</ul>";
+TEST_PAGE += "<div style='position:absolute;top:0;right:0;width:100px;height:100px;'></div>";
+TEST_PAGE += "</body>";
 
 function test() {
   return Task.spawn(spawnTest).then(finish, helpers.handleError);
 }
 
 function* spawnTest() {
   let options = yield helpers.openTab(TEST_PAGE);
   yield helpers.openToolbar(options);
@@ -202,17 +204,17 @@ function* spawnTest() {
       }
     },
     {
       setup: 'highlight body --hideguides --showinfobar --showall --region ' +
         'content --fill red --keep',
       check: {
         input:  'highlight body --hideguides --showinfobar --showall --region ' +
           'content --fill red --keep',
-        hints: '',
+        hints:                      ' [options]',
         markup: 'VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV' +
           'VVVVVVVVVVVVVVVVVVVVVVVVV',
         status: 'VALID'
       },
       exec: {
         output: '1 node highlighted'
       }
     },
@@ -237,16 +239,43 @@ function* spawnTest() {
         markup: 'VVVVVVVVVVVVVVVVVVVVVVVVV',
         status: 'VALID'
       },
       exec: {
         output: '200 nodes highlighted'
       }
     },
     {
+      setup: 'highlight div --geometry',
+      check: {
+        input:  'highlight div --geometry',
+        hints:                           ' [options]',
+        markup: 'VVVVVVVVVVVVVVVVVVVVVVVV',
+        status: 'VALID'
+      },
+      exec: {
+        output: '1 node highlighted'
+      }
+    },
+    {
+      setup: 'highlight body --hideguides --showinfobar --showall --region ' +
+        'content --fill red --keep --geometry',
+      check: {
+        input:  'highlight body --hideguides --showinfobar --showall --region ' +
+          'content --fill red --keep --geometry',
+        hints: '',
+        markup: 'VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV' +
+          'VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV',
+        status: 'VALID'
+      },
+      exec: {
+        output: '1 node highlighted'
+      }
+    },
+    {
       setup: 'unhighlight',
       check: {
         input:  'unhighlight',
         hints:  '',
         markup: 'VVVVVVVVVVV',
         status: 'VALID'
       }
     }
diff --git a/browser/devtools/commandline/test/browser_cmd_highlight_03.js b/browser/devtools/commandline/test/browser_cmd_highlight_03.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/commandline/test/browser_cmd_highlight_03.js
@@ -0,0 +1,45 @@
+/* Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Tests that the highlight command with the --geometry option creates a
+// GeometryEditorHighlighter highlighter.
+
+const TEST_PAGE = "data:text/html;charset=utf-8," +
+                  "<div style='background:red;position:absolute;top:50px;left:50px;width:50px;height:50px;'></div>";
+
+function test() {
+  return Task.spawn(function*() {
+    let options = yield helpers.openTab(TEST_PAGE);
+    yield helpers.openToolbar(options);
+
+    info("highlight the geometry of the DIV node");
+    yield runCommand("highlight div --geometry", options);
+
+    let highlighters = getHighlighters();
+    is(highlighters.length, 1, "The highlighter element exists for div");
+    ok(highlighters[0].ID_CLASS_PREFIX.indexOf("geometry") !== -1,
+      "The right highlighter type was used");
+
+    info("highlight the DIV node again without the geometry argument");
+    yield runCommand("highlight div", options);
+
+    highlighters = getHighlighters();
+    ok(highlighters[0].ID_CLASS_PREFIX.indexOf("box-model") !== -1,
+      "The right highlighter type was used");
+
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
+}
+
+function getHighlighters() {
+  // Note that this only works as long as gcli tests aren't run with e10s on.
+  // To make this e10s ready, execute this in a content frame script instead.
+  return require("gcli/commands/highlight").highlighters;
+}
+
+function* runCommand(cmd, options) {
+  yield helpers.audit(options, [{ setup: cmd, exec: {} }]);
+}
diff --git a/browser/devtools/inspector/test/browser.ini b/browser/devtools/inspector/test/browser.ini
--- a/browser/devtools/inspector/test/browser.ini
+++ b/browser/devtools/inspector/test/browser.ini
@@ -4,16 +4,17 @@ subsuite = devtools
 support-files =
   doc_frame_script.js
   doc_inspector_breadcrumbs.html
   doc_inspector_delete-selected-node-01.html
   doc_inspector_delete-selected-node-02.html
   doc_inspector_gcli-inspect-command.html
   doc_inspector_highlight_after_transition.html
   doc_inspector_highlighter-comments.html
+  doc_inspector_highlighter-geometry.html
   doc_inspector_highlighter_csstransform.html
   doc_inspector_highlighter.html
   doc_inspector_highlighter_rect.html
   doc_inspector_highlighter_rect_iframe.html
   doc_inspector_infobar_01.html
   doc_inspector_infobar_02.html
   doc_inspector_menu-01.html
   doc_inspector_menu-02.html
@@ -35,16 +36,20 @@ support-files =
 [browser_inspector_highlighter-01.js]
 [browser_inspector_highlighter-02.js]
 [browser_inspector_highlighter-03.js]
 [browser_inspector_highlighter-04.js]
 [browser_inspector_highlighter-by-type.js]
 [browser_inspector_highlighter-comments.js]
 [browser_inspector_highlighter-csstransform_01.js]
 [browser_inspector_highlighter-csstransform_02.js]
+[browser_inspector_highlighter-geometry_01.js]
+[browser_inspector_highlighter-geometry_02.js]
+[browser_inspector_highlighter-geometry_03.js]
+[browser_inspector_highlighter-geometry_04.js]
 [browser_inspector_highlighter-hover_01.js]
 [browser_inspector_highlighter-hover_02.js]
 [browser_inspector_highlighter-hover_03.js]
 [browser_inspector_highlighter-iframes.js]
 [browser_inspector_highlighter-options.js]
 [browser_inspector_highlighter-rect_01.js]
 [browser_inspector_highlighter-rect_02.js]
 [browser_inspector_highlighter-selector_01.js]
diff --git a/browser/devtools/inspector/test/browser_inspector_highlighter-geometry_01.js b/browser/devtools/inspector/test/browser_inspector_highlighter-geometry_01.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_highlighter-geometry_01.js
@@ -0,0 +1,102 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+// Test the creation of the geometry highlighter elements.
+
+const TEST_URL = "data:text/html;charset=utf-8," +
+                 "<span id='inline'></span>" +
+                 "<div id='positioned' style='background:yellow;position:absolute;left:5rem;top:30px;right:300px;bottom:10em;'></div>" +
+                 "<div id='sized' style='background:red;width:5em;height:50%;'></div>";
+const ID = "geometry-editor-";
+const SIDES = ["left", "right", "top", "bottom"];
+const SIZES = ["width", "height"];
+
+add_task(function*() {
+  let {inspector, toolbox} = yield openInspectorForURL(TEST_URL);
+  let front = inspector.inspector;
+
+  let highlighter = yield front.getHighlighterByType("GeometryEditorHighlighter");
+
+  yield hasArrows(highlighter, inspector);
+  yield isHiddenForNonPositionedNonSizedElement(highlighter, inspector);
+  yield sideArrowsAreDisplayedForPositionedNode(highlighter, inspector);
+  yield sizeArrowsAreDisplayedForSizedNode(highlighter, inspector);
+
+  yield highlighter.finalize();
+});
+
+function* hasArrows(highlighterFront, inspector) {
+  info("Checking that the highlighter has the expected 6 arrows and labels");
+
+  for (let name of [...SIDES, ...SIZES]) {
+    let value = yield getAttribute(ID + "arrow-" + name, "class", highlighterFront);
+    is(value, ID + "arrow " + name, "The " + name + " arrow exists");
+
+    value = yield getAttribute(ID + "label-" + name, "class", highlighterFront);
+    is(value, ID + "label " + name, "The " + name + " label exists");
+
+    value = yield getAttribute(ID + "handle-" + name, "class", highlighterFront);
+    is(value, ID + "handle " + name, "The " + name + " handle exists");
+  }
+}
+
+function* isHiddenForNonPositionedNonSizedElement(highlighterFront, inspector) {
+  info("Asking to show the highlighter on an inline, non positioned element");
+
+  let node = yield getNodeFront("#inline", inspector);
+  yield highlighterFront.show(node);
+
+  for (let name of [...SIDES, ...SIZES]) {
+    let value = yield getAttribute(ID + "arrow-" + name, "hidden", highlighterFront);
+    is(value, "true", "The " + name + " arrow is hidden");
+  }
+}
+
+function* sideArrowsAreDisplayedForPositionedNode(highlighterFront, inspector) {
+  info("Asking to show the highlighter on the positioned node");
+
+  let node = yield getNodeFront("#positioned", inspector);
+  yield highlighterFront.show(node);
+
+  for (let name of SIDES) {
+    let hidden = yield getAttribute(ID + "arrow-" + name, "hidden", highlighterFront);
+    ok(!hidden, "The " + name + " arrow is visible for the positioned node");
+  }
+
+  for (let name of SIZES) {
+    let hidden = yield getAttribute(ID + "arrow-" + name, "hidden", highlighterFront);
+    is(hidden, "true", "The " + name + " arrow is hidden for the positioned node");
+  }
+
+  info("Hiding the highlighter");
+  yield highlighterFront.hide();
+}
+
+function* sizeArrowsAreDisplayedForSizedNode(highlighterFront, inspector) {
+  info("Asking to show the highlighter on the sized node");
+
+  let node = yield getNodeFront("#sized", inspector);
+  yield highlighterFront.show(node);
+
+  for (let name of SIZES) {
+    let hidden = yield getAttribute(ID + "arrow-" + name, "hidden", highlighterFront);
+    ok(!hidden, "The " + name + " arrow is visible for the sized node");
+  }
+
+  for (let name of SIDES) {
+    let hidden = yield getAttribute(ID + "arrow-" + name, "hidden", highlighterFront);
+    is(hidden, "true", "The " + name + " arrow is hidden for the sized node");
+  }
+
+  info("Hiding the highlighter");
+  yield highlighterFront.hide();
+}
+
+function* getAttribute(nodeID, name, {actorID}) {
+  let {data} = yield executeInContent("Test:GetHighlighterAttribute",
+    {nodeID, name, actorID});
+  return data;
+}
diff --git a/browser/devtools/inspector/test/browser_inspector_highlighter-geometry_02.js b/browser/devtools/inspector/test/browser_inspector_highlighter-geometry_02.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_highlighter-geometry_02.js
@@ -0,0 +1,68 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+// Test that the geometry highlighter labels content is correct.
+
+const TEST_URL = "data:text/html;charset=utf-8," +
+                 "<div id='positioned' style='background:yellow;position:absolute;left:5rem;top:30px;right:300px;bottom:10em;'></div>" +
+                 "<div id='sized' style='background:red;width:5em;height:50%;'></div>";
+const ID = "geometry-editor-";
+
+add_task(function*() {
+  let {inspector, toolbox} = yield openInspectorForURL(TEST_URL);
+  let front = inspector.inspector;
+
+  let highlighter = yield front.getHighlighterByType("GeometryEditorHighlighter");
+
+  yield positionLabelsAreCorrect(highlighter, inspector);
+  yield sizeLabelsAreCorrect(highlighter, inspector);
+
+  yield highlighter.finalize();
+});
+
+function* positionLabelsAreCorrect(highlighterFront, inspector) {
+  info("Highlight the positioned node and check the position labels");
+
+  let node = yield getNodeFront("#positioned", inspector);
+  yield highlighterFront.show(node);
+
+  let label = yield getTextContent(ID + "label-left", highlighterFront);
+  is(label, "5rem", "Left label textcontent is correct");
+
+  label = yield getTextContent(ID + "label-top", highlighterFront);
+  is(label, "30px", "Top label textcontent is correct");
+
+  label = yield getTextContent(ID + "label-right", highlighterFront);
+  is(label, "300px", "Right label textcontent is correct");
+
+  label = yield getTextContent(ID + "label-bottom", highlighterFront);
+  is(label, "10em", "Bottom label textcontent is correct");
+
+  info("Hiding the highlighter");
+  yield highlighterFront.hide();
+}
+
+function* sizeLabelsAreCorrect(highlighterFront, inspector) {
+  info("Highlight the sized node and check the size labels");
+
+  let node = yield getNodeFront("#sized", inspector);
+  yield highlighterFront.show(node);
+
+  let label = yield getTextContent(ID + "label-width", highlighterFront);
+  is(label, "5em", "Width label textcontent is correct");
+
+  label = yield getTextContent(ID + "label-height", highlighterFront);
+  is(label, "50%", "Height label textcontent is correct");
+
+  info("Hiding the highlighter");
+  yield highlighterFront.hide();
+}
+
+function* getTextContent(nodeID, {actorID}) {
+  let {data} = yield executeInContent("Test:GetHighlighterTextContent",
+    {nodeID, actorID});
+  return data;
+}
diff --git a/browser/devtools/inspector/test/browser_inspector_highlighter-geometry_03.js b/browser/devtools/inspector/test/browser_inspector_highlighter-geometry_03.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_highlighter-geometry_03.js
@@ -0,0 +1,64 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+// Test that the right arrows are shown even when the css properties are in
+// several different css rules.
+
+const TEST_URL = TEST_URL_ROOT + "doc_inspector_highlighter-geometry.html";
+const ID = "geometry-editor-";
+const PROPS = ["left", "right", "top", "bottom", "width", "height"];
+
+add_task(function*() {
+  let {inspector, toolbox} = yield openInspectorForURL(TEST_URL);
+  let front = inspector.inspector;
+
+  let highlighter = yield front.getHighlighterByType("GeometryEditorHighlighter");
+
+  yield checkArrows("#node1",
+                    ["width", "height"],
+                    highlighter, inspector);
+
+  yield checkArrows("#node2",
+                    ["top", "left", "bottom", "right"],
+                    highlighter, inspector);
+
+  yield checkArrows("#node3",
+                    ["top", "left", "width", "height"],
+                    highlighter, inspector);
+
+  yield highlighter.finalize();
+});
+
+function* checkArrows(selector, expectedProperties, highlighterFront, inspector) {
+  info("Getting node " + selector + " from the page");
+  let node = yield getNodeFront(selector, inspector);
+
+  info("Highlighting the node");
+  yield highlighterFront.show(node);
+
+  for (let name of expectedProperties) {
+    let hidden = yield getAttribute(ID + "arrow-" + name, "hidden", highlighterFront);
+    ok(!hidden, "The " + name + " arrow is visible for node " + selector);
+  }
+
+  // Testing that the other arrows are hidden
+  for (let name of PROPS) {
+    if (expectedProperties.indexOf(name) !== -1) {
+      continue;
+    }
+    let hidden = yield getAttribute(ID + "arrow-" + name, "hidden", highlighterFront);
+    is(hidden, "true", "The " + name + " arrow is hidden for node " + selector);
+  }
+
+  info("Hiding the highlighter");
+  yield highlighterFront.hide();
+}
+
+function* getAttribute(nodeID, name, {actorID}) {
+  let {data} = yield executeInContent("Test:GetHighlighterAttribute",
+    {nodeID, name, actorID});
+  return data;
+}
diff --git a/browser/devtools/inspector/test/browser_inspector_highlighter-geometry_04.js b/browser/devtools/inspector/test/browser_inspector_highlighter-geometry_04.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_highlighter-geometry_04.js
@@ -0,0 +1,45 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+// Test that the arrows are positioned correctly and have the right size.
+
+const TEST_URL = TEST_URL_ROOT + "doc_inspector_highlighter-geometry.html";
+const ID = "geometry-editor-";
+
+add_task(function*() {
+  let {inspector, toolbox} = yield openInspectorForURL(TEST_URL);
+  let front = inspector.inspector;
+
+  let highlighter = yield front.getHighlighterByType("GeometryEditorHighlighter");
+
+  info("Highlighting the test node");
+  let node = yield getNodeFront("#node4", inspector);
+  yield highlighter.show(node);
+
+  let topStyle = yield getAttribute(ID + "arrow-top", "style", highlighter);
+  let leftStyle = yield getAttribute(ID + "arrow-left", "style", highlighter);
+  let widthStyle = yield getAttribute(ID + "arrow-width", "style", highlighter);
+  let heightStyle = yield getAttribute(ID + "arrow-height", "style", highlighter);
+
+  is(topStyle, "top:0px;height:10px;left:20px;width:1px;",
+    "The top style is correct");
+  is(leftStyle, "left:0px;width:10px;top:20px;height:1px;",
+    "The left style is correct");
+  is(widthStyle, "left:10px;width:20px;top:15px;height:1px;",
+    "The width style is correct");
+  is(heightStyle, "top:10px;height:20px;left:15px;width:1px;",
+    "The height style is correct");
+
+  info("Hiding the highlighter");
+  yield highlighter.hide();
+  yield highlighter.finalize();
+});
+
+function* getAttribute(nodeID, name, {actorID}) {
+  let {data} = yield executeInContent("Test:GetHighlighterAttribute",
+    {nodeID, name, actorID});
+  return data;
+}
diff --git a/browser/devtools/inspector/test/doc_inspector_highlighter-geometry.html b/browser/devtools/inspector/test/doc_inspector_highlighter-geometry.html
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/doc_inspector_highlighter-geometry.html
@@ -0,0 +1,49 @@
+<!doctype html>
+<html lang="en">
+<head>
+  <meta charset="utf-8">
+  <title>geometry highlighter test page</title>
+  <style type="text/css">
+    html, body {
+      margin: 0;
+      padding: 0;
+    }
+
+    .relative-sized-parent {
+      position: relative;
+      border: 2px solid black;
+      border-radius: 25px;
+    }
+    .size {
+      width: 300px;
+      height: 300px;
+    }
+
+    .positioned-child {
+      position: absolute;
+      background: #f06;
+    }
+    .pos-top-left {
+      top: 30px;
+      left: 25%;
+    }
+    .pos-bottom-right {
+      bottom: 5em;
+      right: -10px;
+    }
+
+    .inline-positioned {
+      background: yellow;
+    }
+  </style>
+</head>
+<body>
+  <div id="node1" class="relative-sized-parent size">
+    <div id="node2" class="positioned-child pos-top-left pos-bottom-right">
+      <div id="node3" class="inline-positioned positioned-child pos-top-left" style="width:50px;height:50px;"></div>
+    </div>
+  </div>
+
+  <div id="node4" class="size" style="position:absolute;top:10px;left:10px;width:20px;height:20px;"></div>
+</body>
+</html>
