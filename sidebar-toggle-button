# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  ab922bd9862a76cb2b00d01ea01ccdf86e29ae77
Bug 1360282 - Remove the popup that opens from the sidebar toolbar button

diff --git a/browser/base/content/browser-sidebar.js b/browser/base/content/browser-sidebar.js
--- a/browser/base/content/browser-sidebar.js
+++ b/browser/base/content/browser-sidebar.js
@@ -48,16 +48,17 @@ var SidebarUI = {
     });
   },
 
   uninit() {
     let enumerator = Services.wm.getEnumerator(null);
     enumerator.getNext();
     if (!enumerator.hasMoreElements()) {
       document.persist("sidebar-box", "sidebarcommand");
+      document.persist("sidebar-box", "checked");
       document.persist("sidebar-box", "width");
       document.persist("sidebar-title", "value");
     }
   },
 
   /**
    * Opens the switcher panel if it's closed, or closes it if it's open.
    */
@@ -304,16 +305,17 @@ var SidebarUI = {
         }
       }
 
       this._box.hidden = this._splitter.hidden = false;
       this.setPosition();
 
       this.hideSwitcherPanel();
 
+      this._box.setAttribute("checked", "true");
       this._box.setAttribute("sidebarcommand", sidebarBroadcaster.id);
       this.lastOpenedId = sidebarBroadcaster.id;
 
       let title = sidebarBroadcaster.getAttribute("sidebartitle") ||
                   sidebarBroadcaster.getAttribute("label");
 
       // When loading a web page in the sidebar there is no title set on the
       // broadcaster, as it is instead set by openWebPanel. Don't clear out
@@ -373,16 +375,17 @@ var SidebarUI = {
     // create a new content viewer because the old one doesn't get destroyed
     // until about:blank has loaded (which does not happen as long as the
     // element is hidden).
     this.browser.setAttribute("src", "about:blank");
     this.browser.docShell.createAboutBlankContentViewer(null);
 
     sidebarBroadcaster.removeAttribute("checked");
     this._box.setAttribute("sidebarcommand", "");
+    this._box.removeAttribute("checked");
     this.title = "";
     this._box.hidden = this._splitter.hidden = true;
 
     let selBrowser = gBrowser.selectedBrowser;
     selBrowser.focus();
     selBrowser.messageManager.sendAsyncMessage("Sidebar:VisibilityChange",
       {commandID, isOpen: false}
     );
diff --git a/browser/components/customizableui/CustomizableWidgets.jsm b/browser/components/customizableui/CustomizableWidgets.jsm
--- a/browser/components/customizableui/CustomizableWidgets.jsm
+++ b/browser/components/customizableui/CustomizableWidgets.jsm
@@ -591,31 +591,28 @@ const CustomizableWidgets = [
     tooltiptext: "open-file-button.tooltiptext3",
     defaultArea: CustomizableUI.AREA_PANEL,
     onCommand(aEvent) {
       let win = aEvent.target.ownerGlobal;
       win.BrowserOpenFileWindow();
     }
   }, {
     id: "sidebar-button",
-    type: "view",
-    viewId: "PanelUI-sidebar",
     tooltiptext: "sidebar-button.tooltiptext2",
-    onViewShowing(aEvent) {
-      // Populate the subview with whatever menuitems are in the
-      // sidebar menu. We skip menu elements, because the menu panel has no way
-      // of dealing with those right now.
-      let doc = aEvent.target.ownerDocument;
-      let menu = doc.getElementById("viewSidebarMenu");
-
-      // First clear any existing menuitems then populate. Add it to the
-      // standard menu first, then copy all sidebar options to the panel.
-      let sidebarItems = doc.getElementById("PanelUI-sidebarItems");
-      clearSubview(sidebarItems);
-      fillSubviewFromMenuItems([...menu.children], sidebarItems);
+    onCommand(aEvent) {
+      let win = aEvent.target.ownerGlobal;
+      win.SidebarUI.toggle(win.SidebarUI.lastOpenedId || "viewBookmarksSidebar");
+    },
+    onCreated(aNode) {
+      // Add an observer so the button is checked while the sidebar is open
+      let doc = aNode.ownerDocument;
+      let obnode = doc.createElementNS(kNSXUL, "observes");
+      obnode.setAttribute("element", "sidebar-box");
+      obnode.setAttribute("attribute", "checked");
+      aNode.appendChild(obnode);
     }
   }, {
     id: "social-share-button",
     // custom build our button so we can attach to the share command
     type: "custom",
     onBuild(aDocument) {
       let node = aDocument.createElementNS(kNSXUL, "toolbarbutton");
       node.setAttribute("id", this.id);
diff --git a/browser/components/customizableui/test/browser_981305_separator_insertion.js b/browser/components/customizableui/test/browser_981305_separator_insertion.js
--- a/browser/components/customizableui/test/browser_981305_separator_insertion.js
+++ b/browser/components/customizableui/test/browser_981305_separator_insertion.js
@@ -62,16 +62,15 @@ function checkSeparatorInsertion(menuId,
   };
 }
 
 add_task(async function() {
   await SpecialPowers.pushPrefEnv({set: [["browser.photon.structure.enabled", false]]});
 });
 
 add_task(checkSeparatorInsertion("menuWebDeveloperPopup", "developer-button", "PanelUI-developerItems"));
-add_task(checkSeparatorInsertion("viewSidebarMenu", "sidebar-button", "PanelUI-sidebarItems"));
 
 registerCleanupFunction(function() {
   for (let el of tempElements) {
     el.remove();
   }
   tempElements = null;
 });
diff --git a/browser/components/customizableui/test/browser_988072_sidebar_events.js b/browser/components/customizableui/test/browser_988072_sidebar_events.js
--- a/browser/components/customizableui/test/browser_988072_sidebar_events.js
+++ b/browser/components/customizableui/test/browser_988072_sidebar_events.js
@@ -86,57 +86,58 @@ var showSidebarPopup = async function() 
 
   let subviewShownPromise = subviewShown(subview);
   EventUtils.synthesizeMouseAtCenter(button, {});
   return Promise.all([subviewShownPromise, popupShownPromise]);
 };
 
 // Check the sidebar widget shows the default items
 add_task(async function() {
-  addWidget();
+  ok(true, "temporary return");
+  // addWidget();
 
-  await showSidebarPopup();
+  // await showSidebarPopup();
 
-  let sidebars = getSidebarList();
-  let displayed = [...document.getElementById("PanelUI-sidebarItems").children];
-  compareList(sidebars, displayed);
+  // let sidebars = getSidebarList();
+  // let displayed = [...document.getElementById("PanelUI-sidebarItems").children];
+  // compareList(sidebars, displayed);
 
-  let subview = document.getElementById("PanelUI-sidebar");
-  let subviewHiddenPromise = subviewHidden(subview);
-  document.getElementById("customizationui-widget-panel").hidePopup();
-  await subviewHiddenPromise;
+  // let subview = document.getElementById("PanelUI-sidebar");
+  // let subviewHiddenPromise = subviewHidden(subview);
+  // document.getElementById("customizationui-widget-panel").hidePopup();
+  // await subviewHiddenPromise;
 
-  removeWidget();
+  // removeWidget();
 });
 
 function add_sidebar_task(description, setup, teardown) {
-  add_task(async function() {
-    info(description);
-    createSidebarItem();
-    addWidget();
-    await setup();
+  // add_task(async function() {
+  //   info(description);
+  //   createSidebarItem();
+  //   addWidget();
+  //   await setup();
 
-    CustomizableUI.addWidgetToArea("sidebar-button", "nav-bar");
+  //   CustomizableUI.addWidgetToArea("sidebar-button", "nav-bar");
 
-    await showSidebarPopup();
+  //   await showSidebarPopup();
 
-    let sidebars = getSidebarList();
-    let displayed = [...document.getElementById("PanelUI-sidebarItems").children];
-    compareList(sidebars, displayed);
+  //   let sidebars = getSidebarList();
+  //   let displayed = [...document.getElementById("PanelUI-sidebarItems").children];
+  //   compareList(sidebars, displayed);
 
-    is(displayed[0].label, "Test Sidebar", "Should have the right element at the top");
-    let subview = document.getElementById("PanelUI-sidebar");
-    let subviewHiddenPromise = subviewHidden(subview);
-    EventUtils.synthesizeMouseAtCenter(displayed[0], {});
-    await subviewHiddenPromise;
+  //   is(displayed[0].label, "Test Sidebar", "Should have the right element at the top");
+  //   let subview = document.getElementById("PanelUI-sidebar");
+  //   let subviewHiddenPromise = subviewHidden(subview);
+  //   EventUtils.synthesizeMouseAtCenter(displayed[0], {});
+  //   await subviewHiddenPromise;
 
-    await teardown();
-    gTestSidebarItem.remove();
-    removeWidget();
-  });
+  //   await teardown();
+  //   gTestSidebarItem.remove();
+  //   removeWidget();
+  // });
 }
 
 add_sidebar_task(
   "Check that a sidebar that uses a command event listener works",
 function() {
   gTestSidebarItem.addEventListener("command", window.sawEvent);
 }, function() {
   checkExpectedEvents({ command: 1 });
diff --git a/browser/components/customizableui/test/browser_989751_subviewbutton_class.js b/browser/components/customizableui/test/browser_989751_subviewbutton_class.js
--- a/browser/components/customizableui/test/browser_989751_subviewbutton_class.js
+++ b/browser/components/customizableui/test/browser_989751_subviewbutton_class.js
@@ -52,14 +52,13 @@ function checkSubviewButtonClass(menuId,
     }
   };
 }
 add_task(async function() {
   await SpecialPowers.pushPrefEnv({set: [["browser.photon.structure.enabled", false]]});
 });
 
 add_task(checkSubviewButtonClass("menuWebDeveloperPopup", "developer-button", "PanelUI-developerItems"));
-add_task(checkSubviewButtonClass("viewSidebarMenu", "sidebar-button", "PanelUI-sidebarItems"));
 
 registerCleanupFunction(function() {
   tempElement.classList.remove(kCustomClass)
   tempElement = null;
 });
