
# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1508964673 25200
# Node ID 1e74d05e2ab85ba8af1491b689b8363018527cb1
# Parent  dfb15917c057f17e5143f7d7c6e1972ba53efc49
Test case for 1444285 - Migrate <stringbundle> from a XBL binding to a Custom Element

MozReview-Commit-ID: 2XxU8K5e7oF

diff --git a/toolkit/components/processsingleton/MainProcessSingleton.js b/toolkit/components/processsingleton/MainProcessSingleton.js
--- a/toolkit/components/processsingleton/MainProcessSingleton.js
+++ b/toolkit/components/processsingleton/MainProcessSingleton.js
@@ -60,26 +60,40 @@ MainProcessSingleton.prototype = {
       Services.search.addEngine(engineURL.spec, null, iconURL ? iconURL.spec : null, true);
     });
   },
 
   observe(subject, topic, data) {
     switch (topic) {
     case "app-startup": {
       Services.obs.addObserver(this, "xpcom-shutdown");
+      Services.obs.addObserver(this, "document-element-inserted");
 
       // Load this script early so that console.* is initialized
       // before other frame scripts.
       Services.mm.loadFrameScript("chrome://global/content/browser-content.js", true);
       Services.ppmm.loadProcessScript("chrome://global/content/process-content.js", true);
       Services.mm.addMessageListener("Search:AddEngine", this.addSearchEngine);
       Services.ppmm.loadProcessScript("resource:///modules/ContentObservers.js", true);
       break;
     }
 
+    case "document-element-inserted":
+      const doc = subject;
+      if (doc.nodePrincipal.isSystemPrincipal &&
+          doc.contentType == "application/vnd.mozilla.xul+xml") {
+        for (let script of [
+          "chrome://global/content/bindings/stringbundle.js",
+        ]) {
+          Services.scriptloader.loadSubScript(script, doc.ownerGlobal);
+        }
+      }
+      break;
+
     case "xpcom-shutdown":
       Services.mm.removeMessageListener("Search:AddEngine", this.addSearchEngine);
+      Services.obs.removeObserver(this, "document-element-inserted");
       break;
     }
   },
 };
 
 this.NSGetFactory = XPCOMUtils.generateNSGetFactory([MainProcessSingleton]);
diff --git a/toolkit/content/jar.mn b/toolkit/content/jar.mn
--- a/toolkit/content/jar.mn
+++ b/toolkit/content/jar.mn
@@ -87,17 +87,17 @@ toolkit.jar:
    content/global/bindings/radio.xml           (widgets/radio.xml)
    content/global/bindings/remote-browser.xml  (widgets/remote-browser.xml)
    content/global/bindings/resizer.xml         (widgets/resizer.xml)
    content/global/bindings/richlistbox.xml     (widgets/richlistbox.xml)
    content/global/bindings/scale.xml           (widgets/scale.xml)
    content/global/bindings/scrollbar.xml       (widgets/scrollbar.xml)
    content/global/bindings/scrollbox.xml       (widgets/scrollbox.xml)
    content/global/bindings/spinner.js          (widgets/spinner.js)
-   content/global/bindings/stringbundle.xml    (widgets/stringbundle.xml)
+   content/global/bindings/stringbundle.js     (widgets/stringbundle.js)
 *  content/global/bindings/tabbox.xml          (widgets/tabbox.xml)
    content/global/bindings/text.xml            (widgets/text.xml)
 *  content/global/bindings/textbox.xml         (widgets/textbox.xml)
    content/global/bindings/timekeeper.js       (widgets/timekeeper.js)
    content/global/bindings/timepicker.js       (widgets/timepicker.js)
    content/global/bindings/toolbar.xml         (widgets/toolbar.xml)
    content/global/bindings/toolbarbutton.xml   (widgets/toolbarbutton.xml)
 *  content/global/bindings/tree.xml            (widgets/tree.xml)
diff --git a/toolkit/content/widgets/stringbundle.js b/toolkit/content/widgets/stringbundle.js
new file mode 100644
--- /dev/null
+++ b/toolkit/content/widgets/stringbundle.js
@@ -0,0 +1,54 @@
+class FirefoxStringbundle extends XULElement {
+  connectedCallback() {
+  }
+
+  get stringBundle() {
+    if (!this._bundle) {
+      try {
+        this._bundle = Cc["@mozilla.org/intl/stringbundle;1"]
+          .getService(Ci.nsIStringBundleService)
+          .createBundle(this.src);
+      } catch (e) {
+        dump("Failed to get stringbundle:\n");
+        dump(e + "\n");
+      }
+    }
+    return this._bundle;
+  }
+
+  set src(val) {
+    this._bundle = null;
+    this.setAttribute("src", val);
+    return val;
+  }
+
+  get src() {
+    return this.getAttribute("src");
+  }
+
+  get strings() {
+    // Note: this is a sucky method name! Should be:
+    //       readonly attribute nsISimpleEnumerator strings;
+    return this.stringBundle.getSimpleEnumeration();
+  }
+
+  getString(aStringKey) {
+    try {
+      return this.stringBundle.GetStringFromName(aStringKey);
+    } catch (e) {
+      dump("*** Failed to get string " + aStringKey + " in bundle: " + this.src + "\n");
+      throw e;
+    }
+  }
+
+  getFormattedString(aStringKey, aStringsArray) {
+    try {
+      return this.stringBundle.formatStringFromName(aStringKey, aStringsArray, aStringsArray.length);
+    } catch (e) {
+      dump("*** Failed to format string " + aStringKey + " in bundle: " + this.src + "\n");
+      throw e;
+    }
+  }
+}
+
+customElements.define("stringbundle", FirefoxStringbundle);
diff --git a/toolkit/content/widgets/stringbundle.xml b/toolkit/content/widgets/stringbundle.xml
deleted file mode 100644
--- a/toolkit/content/widgets/stringbundle.xml
+++ /dev/null
@@ -1,91 +0,0 @@
-<?xml version="1.0"?>
-<!-- This Source Code Form is subject to the terms of the Mozilla Public
-   - License, v. 2.0. If a copy of the MPL was not distributed with this
-   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
-
-
-<bindings id="stringBundleBindings"
-          xmlns="http://www.mozilla.org/xbl"
-          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
-
-  <binding id="stringbundle" extends="xul:spacer">
-    <implementation name="XStringBundle">
-
-      <method name="getString">
-        <parameter name="aStringKey"/>
-        <body>
-          <![CDATA[
-            try {
-              return this.stringBundle.GetStringFromName(aStringKey);
-            } catch (e) {
-              dump("*** Failed to get string " + aStringKey + " in bundle: " + this.src + "\n");
-              throw e;
-            }
-          ]]>
-        </body>
-      </method>
-
-      <method name="getFormattedString">
-        <parameter name="aStringKey"/>
-        <parameter name="aStringsArray"/>
-        <body>
-          <![CDATA[
-            try {
-              return this.stringBundle.formatStringFromName(aStringKey, aStringsArray, aStringsArray.length);
-            } catch (e) {
-              dump("*** Failed to format string " + aStringKey + " in bundle: " + this.src + "\n");
-              throw e;
-            }
-          ]]>
-        </body>
-      </method>
-
-      <property name="stringBundle" readonly="true">
-        <getter>
-          <![CDATA[
-            if (!this._bundle) {
-              try {
-                this._bundle = Cc["@mozilla.org/intl/stringbundle;1"]
-                                 .getService(Ci.nsIStringBundleService)
-                                 .createBundle(this.src);
-              } catch (e) {
-                dump("Failed to get stringbundle:\n");
-                dump(e + "\n");
-              }
-            }
-            return this._bundle;
-          ]]>
-        </getter>
-      </property>
-
-      <property name="src">
-        <getter>
-          <![CDATA[
-            return this.getAttribute("src");
-          ]]>
-        </getter>
-        <setter>
-          <![CDATA[
-            this._bundle = null;
-            this.setAttribute("src", val);
-            return val;
-          ]]>
-        </setter>
-      </property>
-
-      <property name="strings">
-        <getter>
-          <![CDATA[
-            // Note: this is a sucky method name! Should be:
-            //       readonly attribute nsISimpleEnumerator strings;
-            return this.stringBundle.getSimpleEnumeration();
-          ]]>
-        </getter>
-      </property>
-
-      <field name="_bundle">null</field>
-
-    </implementation>
-  </binding>
-
-</bindings>
diff --git a/toolkit/content/xul.css b/toolkit/content/xul.css
--- a/toolkit/content/xul.css
+++ b/toolkit/content/xul.css
@@ -883,23 +883,19 @@ arrowscrollbox[clicktoscroll="true"] {
 }
 
 autorepeatbutton {
   -moz-binding: url("chrome://global/content/bindings/scrollbox.xml#autorepeatbutton");
 }
 
 /********** stringbundle **********/
 
+stringbundle,
 stringbundleset {
-  visibility: collapse;
-}
-
-stringbundle {
-  -moz-binding: url("chrome://global/content/bindings/stringbundle.xml#stringbundle");
-  visibility: collapse;
+  display: none;
 }
 
 /********** dialog **********/
 
 dialog,
 dialog:root /* override :root from above */ {
   -moz-binding: url("chrome://global/content/bindings/dialog.xml#dialog");
   -moz-box-orient: vertical;
