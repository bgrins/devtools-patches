# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  cf997da83953056d14aaf8d429bff2249dd635f5

diff --git a/Cargo.lock b/Cargo.lock
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -493,22 +493,19 @@ checksum = "214238caa1bf3a496ec339296896
 dependencies = [
  "ppv-lite86",
 ]
 
 [[package]]
 name = "cascade_bloom_filter"
 version = "0.1.0"
 dependencies = [
- "nserror",
- "nsstring",
  "rental",
  "rust_cascade",
- "thin-vec",
- "xpcom",
+ "wasm-bindgen",
 ]
 
 [[package]]
 name = "cast"
 version = "0.2.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "926013f2860c46252efceabb19f4a6b308197505082c609025aa6706c011d427"
 
@@ -3713,19 +3710,19 @@ checksum = "ecd45702f76d6d3c75a80564378a
 dependencies = [
  "proc-macro2",
  "quote",
  "syn",
 ]
 
 [[package]]
 name = "proc-macro2"
-version = "1.0.5"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "90cf5f418035b98e655e9cdb225047638296b862b42411c4e45bb88d700f7fc0"
+version = "1.0.18"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "beae6331a816b1f65d04c45b078fd8e6c93e8071771f41b8163255bbd8d7c8fa"
 dependencies = [
  "unicode-xid",
 ]
 
 [[package]]
 name = "procedural-masquerade"
 version = "0.1.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -4675,19 +4672,19 @@ dependencies = [
  "cc",
  "gleam",
  "glsl-to-cxx",
  "webrender_build",
 ]
 
 [[package]]
 name = "syn"
-version = "1.0.5"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "66850e97125af79138385e9b88339cbcd037e3f28ceab8c5ad98e64f0f1f80bf"
+version = "1.0.33"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e8d5d96e8cbb005d6959f119f773bfaebb5684296108fb32600c00cde305b2cd"
 dependencies = [
  "proc-macro2",
  "quote",
  "unicode-xid",
 ]
 
 [[package]]
 name = "sync-guid"
@@ -5361,16 +5358,70 @@ dependencies = [
  "serde_json",
  "serde_urlencoded",
  "tokio 0.2.18",
  "tower-service",
  "urlencoding",
 ]
 
 [[package]]
+name = "wasm-bindgen"
+version = "0.2.63"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4c2dc4aa152834bc334f506c1a06b866416a8b6697d5c9f75b9a689c8486def0"
+dependencies = [
+ "cfg-if",
+ "wasm-bindgen-macro",
+]
+
+[[package]]
+name = "wasm-bindgen-backend"
+version = "0.2.63"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ded84f06e0ed21499f6184df0e0cb3494727b0c5da89534e0fcc55c51d812101"
+dependencies = [
+ "bumpalo",
+ "lazy_static",
+ "log",
+ "proc-macro2",
+ "quote",
+ "syn",
+ "wasm-bindgen-shared",
+]
+
+[[package]]
+name = "wasm-bindgen-macro"
+version = "0.2.63"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "838e423688dac18d73e31edce74ddfac468e37b1506ad163ffaf0a46f703ffe3"
+dependencies = [
+ "quote",
+ "wasm-bindgen-macro-support",
+]
+
+[[package]]
+name = "wasm-bindgen-macro-support"
+version = "0.2.63"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3156052d8ec77142051a533cdd686cba889537b213f948cd1d20869926e68e92"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn",
+ "wasm-bindgen-backend",
+ "wasm-bindgen-shared",
+]
+
+[[package]]
+name = "wasm-bindgen-shared"
+version = "0.2.63"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c9ba19973a58daf4db6f352eda73dc0e289493cd29fb2632eb172085b6521acd"
+
+[[package]]
 name = "wasmparser"
 version = "0.48.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "073da89bf1c84db000dd68ce660c1b4a08e3a2d28fd1e3394ab9e7abdde4a0f8"
 
 [[package]]
 name = "wasmparser"
 version = "0.57.0"
diff --git a/js/xpconnect/loader/XPCOMUtils.jsm b/js/xpconnect/loader/XPCOMUtils.jsm
--- a/js/xpconnect/loader/XPCOMUtils.jsm
+++ b/js/xpconnect/loader/XPCOMUtils.jsm
@@ -47,18 +47,17 @@
  * 2. Create an array of component constructors (like the one
  * created in step 1):
  *  var components = [MyComponent];
  *
  * 3. Define the NSGetFactory entry point:
  *  this.NSGetFactory = XPCOMUtils.generateNSGetFactory(components);
  */
 
-
-var EXPORTED_SYMBOLS = [ "XPCOMUtils" ];
+var EXPORTED_SYMBOLS = ["XPCOMUtils"];
 
 let global = Cu.getGlobalForObject({});
 
 const nsIFactoryQI = ChromeUtils.generateQI([Ci.nsIFactory]);
 
 // Some global imports expose additional symbols; for example,
 // `Cu.importGlobalProperties(["MessageChannel"])` imports `MessageChannel`
 // and `MessagePort`. This table maps those extra symbols to the main
@@ -81,61 +80,71 @@ function redefine(object, prop, value) {
     enumerable: true,
     value,
     writable: true,
   });
   return value;
 }
 
 var XPCOMUtils = {
+  async loadWASM(jsmPath, wasmPath) {
+    const {wasm_bindgen} = ChromeUtils.import(jsmPath || "resource://gre/modules/cascade_bloom_filter.js", {});
+    await wasm_bindgen(wasmPath || "chrome://global/content/cascade_bloom_filter/cascade_bloom_filter_bg.wasm");
+// (async function() {
+  // let wb = await cbf.wasm_bindgen("chrome://global/content/cascade_bloom_filter/cascade_bloom_filter_bg.wasm");
+
+  return wasm_bindgen;
+  },
+
   /**
    * Generate a NSGetFactory function given an array of components.
    */
   generateNSGetFactory: function XPCU_generateNSGetFactory(componentsArray) {
     let classes = {};
     for (let i = 0; i < componentsArray.length; i++) {
-        let component = componentsArray[i];
-        if (!(component.prototype.classID instanceof Components.ID))
-          throw Error("In generateNSGetFactory, classID missing or incorrect for component " + component);
+      let component = componentsArray[i];
+      if (!(component.prototype.classID instanceof Components.ID))
+        throw Error(
+          "In generateNSGetFactory, classID missing or incorrect for component " +
+            component
+        );
 
-        classes[component.prototype.classID] = this._getFactory(component);
+      classes[component.prototype.classID] = this._getFactory(component);
     }
     return function NSGetFactory(cid) {
       let cidstring = cid.toString();
-      if (cidstring in classes)
-        return classes[cidstring];
+      if (cidstring in classes) return classes[cidstring];
       throw Cr.NS_ERROR_FACTORY_NOT_REGISTERED;
-    }
+    };
   },
 
   /**
    * Defines a getter on a specified object that will be created upon first use.
    *
    * @param aObject
    *        The object to define the lazy getter on.
    * @param aName
    *        The name of the getter to define on aObject.
    * @param aLambda
    *        A function that returns what the getter should return.  This will
    *        only ever be called once.
    */
-  defineLazyGetter: function XPCU_defineLazyGetter(aObject, aName, aLambda)
-  {
+  defineLazyGetter: function XPCU_defineLazyGetter(aObject, aName, aLambda) {
     let redefining = false;
     Object.defineProperty(aObject, aName, {
-      get: function () {
+      get: function() {
         if (!redefining) {
           // Make sure we don't get into an infinite recursion loop if
           // the getter lambda does something shady.
           redefining = true;
           return redefine(aObject, aName, aLambda.apply(aObject));
         }
       },
       configurable: true,
-      enumerable: true
+      enumerable: true,
     });
   },
 
   /**
    * Defines a getter on a specified object for a script.  The script will not
    * be loaded until first use.
    *
    * @param aObject
@@ -143,33 +152,35 @@ var XPCOMUtils = {
    * @param aNames
    *        The name of the getter to define on aObject for the script.
    *        This can be a string if the script exports only one symbol,
    *        or an array of strings if the script can be first accessed
    *        from several different symbols.
    * @param aResource
    *        The URL used to obtain the script.
    */
-  defineLazyScriptGetter: function XPCU_defineLazyScriptGetter(aObject, aNames,
-                                                               aResource)
-  {
+  defineLazyScriptGetter: function XPCU_defineLazyScriptGetter(
+    aObject,
+    aNames,
+    aResource
+  ) {
     if (!Array.isArray(aNames)) {
       aNames = [aNames];
     }
     for (let name of aNames) {
       Object.defineProperty(aObject, name, {
         get: function() {
           Services.scriptloader.loadSubScript(aResource, aObject);
           return aObject[name];
         },
         set(value) {
           redefine(aObject, name, value);
         },
         configurable: true,
-        enumerable: true
+        enumerable: true,
       });
     }
   },
 
   /**
    * Defines a getter property on the given object for each of the given
    * global names as accepted by Cu.importGlobalProperties. These
    * properties are imported into the shared JSM module global, and then
@@ -201,20 +212,22 @@ var XPCOMUtils = {
    *        The object to define the lazy getter on.
    * @param aName
    *        The name of the getter to define on aObject for the service.
    * @param aContract
    *        The contract used to obtain the service.
    * @param aInterfaceName
    *        The name of the interface to query the service to.
    */
-  defineLazyServiceGetter: function XPCU_defineLazyServiceGetter(aObject, aName,
-                                                                 aContract,
-                                                                 aInterfaceName)
-  {
+  defineLazyServiceGetter: function XPCU_defineLazyServiceGetter(
+    aObject,
+    aName,
+    aContract,
+    aInterfaceName
+  ) {
     this.defineLazyGetter(aObject, aName, function XPCU_serviceLambda() {
       if (aInterfaceName) {
         return Cc[aContract].getService(Ci[aInterfaceName]);
       }
       return Cc[aContract].getService().wrappedJSObject;
     });
   },
 
@@ -227,23 +240,29 @@ var XPCOMUtils = {
    * @param aServices
    *        An object with a property for each service to be
    *        imported, where the property name is the name of the
    *        symbol to define, and the value is a 1 or 2 element array
    *        containing the contract ID and, optionally, the interface
    *        name of the service, as passed to defineLazyServiceGetter.
    */
   defineLazyServiceGetters: function XPCU_defineLazyServiceGetters(
-                                   aObject, aServices)
-  {
+    aObject,
+    aServices
+  ) {
     for (let [name, service] of Object.entries(aServices)) {
       // Note: This is hot code, and cross-compartment array wrappers
       // are not JIT-friendly to destructuring or spread operators, so
       // we need to use indexed access instead.
-      this.defineLazyServiceGetter(aObject, name, service[0], service[1] || null);
+      this.defineLazyServiceGetter(
+        aObject,
+        name,
+        service[0],
+        service[1] || null
+      );
     }
   },
 
   /**
    * Defines a getter on a specified object for a module.  The module will not
    * be imported until first use. The getter allows to execute setup and
    * teardown code (e.g.  to register/unregister to services) and accepts
    * a proxy object which acts on behalf of the module until it is imported.
@@ -264,35 +283,40 @@ var XPCOMUtils = {
    *        A function that is executed when the module has been imported to
    *        run optional teardown procedures on the proxy object.
    *        This will only ever be called once.
    * @param aProxy
    *        An object which acts on behalf of the module to be imported until
    *        the module has been imported.
    */
   defineLazyModuleGetter: function XPCU_defineLazyModuleGetter(
-                                   aObject, aName, aResource, aSymbol,
-                                   aPreLambda, aPostLambda, aProxy)
-  {
+    aObject,
+    aName,
+    aResource,
+    aSymbol,
+    aPreLambda,
+    aPostLambda,
+    aProxy
+  ) {
     if (arguments.length == 3) {
       return ChromeUtils.defineModuleGetter(aObject, aName, aResource);
     }
 
     let proxy = aProxy || {};
 
-    if (typeof(aPreLambda) === "function") {
+    if (typeof aPreLambda === "function") {
       aPreLambda.apply(proxy);
     }
 
     this.defineLazyGetter(aObject, aName, function XPCU_moduleLambda() {
       var temp = {};
       try {
         ChromeUtils.import(aResource, temp);
 
-        if (typeof(aPostLambda) === "function") {
+        if (typeof aPostLambda === "function") {
           aPostLambda.apply(proxy);
         }
       } catch (ex) {
         Cu.reportError("Failed to load module " + aResource + ".");
         throw ex;
       }
       return temp[aSymbol || aName];
     });
@@ -305,18 +329,19 @@ var XPCOMUtils = {
    * @param aObject
    *        The object to define the lazy getter on.
    * @param aModules
    *        An object with a property for each module property to be
    *        imported, where the property name is the name of the
    *        imported symbol and the value is the module URI.
    */
   defineLazyModuleGetters: function XPCU_defineLazyModuleGetters(
-                                   aObject, aModules)
-  {
+    aObject,
+    aModules
+  ) {
     for (let [name, module] of Object.entries(aModules)) {
       ChromeUtils.defineModuleGetter(aObject, name, module);
     }
   },
 
   /**
    * Defines a getter on a specified object for preference value. The
    * preference is read the first time that the property is accessed,
@@ -334,21 +359,23 @@ var XPCOMUtils = {
    *        A function to call upon update. Receives as arguments
    *         `(aPreference, previousValue, newValue)`
    * @param aTransform
    *        An optional function to transform the value.  If provided,
    *        this function receives the new preference value as an argument
    *        and its return value is used by the getter.
    */
   defineLazyPreferenceGetter: function XPCU_defineLazyPreferenceGetter(
-                                   aObject, aName, aPreference,
-                                   aDefaultValue = null,
-                                   aOnUpdate = null,
-                                   aTransform = val => val)
-  {
+    aObject,
+    aName,
+    aPreference,
+    aDefaultValue = null,
+    aOnUpdate = null,
+    aTransform = val => val
+  ) {
     // Note: We need to keep a reference to this observer alive as long
     // as aObject is alive. This means that all of our getters need to
     // explicitly close over the variable that holds the object, and we
     // cannot define a value in place of a getter after we read the
     // preference.
     let observer = {
       QueryInterface: XPCU_lazyPreferenceObserverQI,
 
@@ -359,23 +386,22 @@ var XPCOMUtils = {
           if (aOnUpdate) {
             let previous = this.value;
 
             // Fetch and cache value.
             this.value = undefined;
             let latest = lazyGetter();
             aOnUpdate(data, previous, latest);
           } else {
-
             // Empty cache, next call to the getter will cause refetch.
             this.value = undefined;
           }
         }
       },
-    }
+    };
 
     let defineGetter = get => {
       Object.defineProperty(aObject, aName, {
         configurable: true,
         enumerable: true,
         get,
       });
     };
@@ -397,19 +423,21 @@ var XPCOMUtils = {
             break;
 
           case Ci.nsIPrefBranch.PREF_INVALID:
             prefValue = aDefaultValue;
             break;
 
           default:
             // This should never happen.
-            throw new Error(`Error getting pref ${aPreference}; its value's type is ` +
-                            `${Services.prefs.getPrefType(aPreference)}, which I don't ` +
-                            `know how to handle.`);
+            throw new Error(
+              `Error getting pref ${aPreference}; its value's type is ` +
+                `${Services.prefs.getPrefType(aPreference)}, which I don't ` +
+                `know how to handle.`
+            );
         }
 
         observer.value = aTransform(prefValue);
       }
       return observer.value;
     }
 
     defineGetter(() => {
@@ -423,57 +451,57 @@ var XPCOMUtils = {
   /**
    * Returns an nsIFactory for |component|.
    */
   _getFactory: function XPCOMUtils__getFactory(component) {
     var factory = component.prototype._xpcom_factory;
     if (!factory) {
       factory = {
         createInstance: function(outer, iid) {
-          if (outer)
-            throw Cr.NS_ERROR_NO_AGGREGATION;
-          return (new component()).QueryInterface(iid);
+          if (outer) throw Cr.NS_ERROR_NO_AGGREGATION;
+          return new component().QueryInterface(iid);
         },
-        QueryInterface: nsIFactoryQI
-      }
+        QueryInterface: nsIFactoryQI,
+      };
     }
     return factory;
   },
 
   /**
    * generates a singleton nsIFactory implementation that can be used as
    * the _xpcom_factory of the component.
    * @param aServiceConstructor
    *        Constructor function of the component.
    */
-  generateSingletonFactory:
-  function XPCOMUtils_generateSingletonFactory(aServiceConstructor) {
+  generateSingletonFactory: function XPCOMUtils_generateSingletonFactory(
+    aServiceConstructor
+  ) {
     return {
       _instance: null,
       createInstance: function XPCU_SF_createInstance(aOuter, aIID) {
         if (aOuter !== null) {
           throw Cr.NS_ERROR_NO_AGGREGATION;
         }
         if (this._instance === null) {
           this._instance = new aServiceConstructor();
         }
         return this._instance.QueryInterface(aIID);
       },
-      QueryInterface: nsIFactoryQI
+      QueryInterface: nsIFactoryQI,
     };
   },
 
   /**
    * Defines a non-writable property on an object.
    */
   defineConstant: function XPCOMUtils__defineConstant(aObj, aName, aValue) {
     Object.defineProperty(aObj, aName, {
       value: aValue,
       enumerable: true,
-      writable: false
+      writable: false,
     });
   },
 
   /**
    * Defines a proxy which acts as a lazy object getter that can be passed
    * around as a reference, and will only be evaluated when something in
    * that object gets accessed.
    *
@@ -523,30 +551,39 @@ var XPCOMUtils = {
    *        A function that gets called once when the object has just been evaluated.
    *        You can use this to do some work (e.g. setting properties) that you need
    *        to do on this object but that can wait until it gets evaluated.
    *
    *        Another use case for this is to use during code development to log when
    *        this object gets evaluated, to make sure you're not accidentally triggering
    *        it earlier than expected.
    */
-  defineLazyProxy: function XPCOMUtils__defineLazyProxy(aObject, aName, aInitFuncOrResource,
-                                                        aStubProperties, aUntrapCallback) {
+  defineLazyProxy: function XPCOMUtils__defineLazyProxy(
+    aObject,
+    aName,
+    aInitFuncOrResource,
+    aStubProperties,
+    aUntrapCallback
+  ) {
     let initFunc = aInitFuncOrResource;
 
-    if (typeof(aInitFuncOrResource) == "string") {
-      initFunc = function () {
+    if (typeof aInitFuncOrResource == "string") {
+      initFunc = function() {
         let tmp = {};
         ChromeUtils.import(aInitFuncOrResource, tmp);
         return tmp[aName];
       };
     }
 
-    let handler = new LazyProxyHandler(aName, initFunc,
-                                       aStubProperties, aUntrapCallback);
+    let handler = new LazyProxyHandler(
+      aName,
+      initFunc,
+      aStubProperties,
+      aUntrapCallback
+    );
 
     /*
      * We cannot simply create a lazy getter for the underlying
      * object and pass it as the target of the proxy, because
      * just passing it in `new Proxy` means it would get
      * evaluated. Becase of this, a full handler needs to be
      * implemented (the LazyProxyHandler).
      *
@@ -627,19 +664,21 @@ class LazyProxyHandler {
     return Reflect.defineProperty(this.getObject(), prop, descriptor);
   }
 
   has(target, prop) {
     return Reflect.has(this.getObject(), prop);
   }
 
   get(target, prop, receiver) {
-    if (this.pending &&
-        this.stubProperties &&
-        Object.prototype.hasOwnProperty.call(this.stubProperties, prop)) {
+    if (
+      this.pending &&
+      this.stubProperties &&
+      Object.prototype.hasOwnProperty.call(this.stubProperties, prop)
+    ) {
       return this.stubProperties[prop];
     }
     return Reflect.get(this.getObject(), prop, receiver);
   }
 
   set(target, prop, value, receiver) {
     return Reflect.set(this.getObject(), prop, value, receiver);
   }
@@ -648,12 +687,18 @@ class LazyProxyHandler {
     return Reflect.deleteProperty(this.getObject(), prop);
   }
 
   ownKeys(target) {
     return Reflect.ownKeys(this.getObject());
   }
 }
 
-var XPCU_lazyPreferenceObserverQI = ChromeUtils.generateQI([Ci.nsIObserver, Ci.nsISupportsWeakReference]);
+var XPCU_lazyPreferenceObserverQI = ChromeUtils.generateQI([
+  Ci.nsIObserver,
+  Ci.nsISupportsWeakReference,
+]);
 
-ChromeUtils.defineModuleGetter(this, "Services",
-                               "resource://gre/modules/Services.jsm");
+ChromeUtils.defineModuleGetter(
+  this,
+  "Services",
+  "resource://gre/modules/Services.jsm"
+);
diff --git a/toolkit/components/cascade_bloom_filter/Cargo.toml b/toolkit/components/cascade_bloom_filter/Cargo.toml
--- a/toolkit/components/cascade_bloom_filter/Cargo.toml
+++ b/toolkit/components/cascade_bloom_filter/Cargo.toml
@@ -1,12 +1,16 @@
 [package]
 name = "cascade_bloom_filter"
 version = "0.1.0"
 authors = ["Rob Wu <rob@robwu.nl>"]
 
+[lib]
+crate-type = ["cdylib"]
+
 [dependencies]
-nserror = { path = "../../../xpcom/rust/nserror" }
-nsstring = { path = "../../../xpcom/rust/nsstring" }
+wasm-bindgen = "0.2.63"
+#nserror = { path = "../../../xpcom/rust/nserror" }
+#nsstring = { path = "../../../xpcom/rust/nsstring" }
 rental = "0.5.5"
 rust_cascade = "0.6.0"
-thin-vec = { version = "0.1.0", features = ["gecko-ffi"] }
-xpcom = { path = "../../../xpcom/rust/xpcom" }
+#thin-vec = { version = "0.1.0", features = ["gecko-ffi"] }
+#xpcom = { path = "../../../xpcom/rust/xpcom" }
diff --git a/toolkit/components/cascade_bloom_filter/jar.mn b/toolkit/components/cascade_bloom_filter/jar.mn
new file mode 100644
--- /dev/null
+++ b/toolkit/components/cascade_bloom_filter/jar.mn
@@ -0,0 +1,7 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+toolkit.jar:
+  content/global/cascade_bloom_filter/cascade_bloom_filter.js                         (wasm/cascade_bloom_filter.js)
+  content/global/cascade_bloom_filter/cascade_bloom_filter_bg.wasm                         (wasm/cascade_bloom_filter_bg.wasm)
diff --git a/toolkit/components/cascade_bloom_filter/moz.build b/toolkit/components/cascade_bloom_filter/moz.build
--- a/toolkit/components/cascade_bloom_filter/moz.build
+++ b/toolkit/components/cascade_bloom_filter/moz.build
@@ -2,16 +2,17 @@
 # vim: set filetype=python:
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 with Files('**'):
     BUG_COMPONENT = ('Toolkit', 'Blocklist Implementation')
 
+
 XPCSHELL_TESTS_MANIFESTS += ['test/xpcshell/xpcshell.ini']
 
 XPIDL_SOURCES += [
     'nsICascadeFilter.idl',
 ]
 
 XPIDL_MODULE = 'cascade_bindings'
 
@@ -22,9 +23,12 @@ EXPORTS.mozilla += [
 SOURCES += [
     "CascadeFilter.cpp"
 ]
 
 XPCOM_MANIFESTS += [
     'components.conf',
 ]
 
+DIRS += ['wasm']
+JAR_MANIFESTS += ['jar.mn']
+
 FINAL_LIBRARY = 'xul'
diff --git a/toolkit/components/cascade_bloom_filter/src/lib.rs b/toolkit/components/cascade_bloom_filter/src/lib.rs
--- a/toolkit/components/cascade_bloom_filter/src/lib.rs
+++ b/toolkit/components/cascade_bloom_filter/src/lib.rs
@@ -1,79 +1,110 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+// The wasm-pack uses wasm-bindgen to build and generate JavaScript binding file.
+// Import the wasm-bindgen crate.
+extern crate wasm_bindgen;
+
+use wasm_bindgen::prelude::*;
+
+
+// Our function to concatenate the string "Wasm by Example"
+// to the input string. We are using .into(), to convert
+// the rust types of str to a String.
+#[wasm_bindgen]
+pub fn add_wasm_by_example_to_string(input_string: String) -> String {
+  let result = format!("{} {}", input_string, "Hi From WASM");
+  let filter = CascadeFilter::new();
+  return result.into();
+}
 
-extern crate nserror;
-extern crate nsstring;
+// /* This Source Code Form is subject to the terms of the Mozilla Public
+//  * License, v. 2.0. If a copy of the MPL was not distributed with this
+//  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+// extern crate nserror;
+// extern crate nsstring;
+// #[macro_use]
+// extern crate rental;
+// extern crate rust_cascade;
+// extern crate thin_vec;
+// #[macro_use]
+// extern crate xpcom;
+
+// use nserror::{nsresult, NS_ERROR_INVALID_ARG, NS_ERROR_NOT_INITIALIZED, NS_OK};
+// use nsstring::nsACString;
+// use rust_cascade::Cascade;
+// use std::cell::RefCell;
+// use thin_vec::ThinVec;
+// use xpcom::interfaces::nsICascadeFilter;
+// use xpcom::{xpcom_method, RefPtr};
+
 #[macro_use]
 extern crate rental;
 extern crate rust_cascade;
-extern crate thin_vec;
-#[macro_use]
-extern crate xpcom;
+// extern crate thin_vec;
+// extern crate nserror;
 
-use nserror::{nsresult, NS_ERROR_INVALID_ARG, NS_ERROR_NOT_INITIALIZED, NS_OK};
-use nsstring::nsACString;
+// use nserror::{nsresult, NS_ERROR_INVALID_ARG, NS_ERROR_NOT_INITIALIZED, NS_OK};
 use rust_cascade::Cascade;
 use std::cell::RefCell;
-use thin_vec::ThinVec;
-use xpcom::interfaces::nsICascadeFilter;
-use xpcom::{xpcom_method, RefPtr};
+use std::error::Error;
+// use thin_vec::ThinVec;
 
-// Cascade does not take ownership of the data, so we must own the data in order to pass its
-// reference to Cascade.
+// // Cascade does not take ownership of the data, so we must own the data in order to pass its
+// // reference to Cascade.
 rental! {
     mod rentals {
         use super::Cascade;
 
         #[rental]
         pub struct CascadeWithOwnedData {
             owndata: Box<[u8]>,
             cascade: Box<Cascade<'owndata>>,
         }
     }
 }
 
-#[derive(xpcom)]
-#[xpimplements(nsICascadeFilter)]
-#[refcnt = "nonatomic"]
-pub struct InitCascadeFilter {
-    filter: RefCell<Option<rentals::CascadeWithOwnedData>>,
+// #[refcnt = "nonatomic"]
+#[wasm_bindgen]
+pub struct CascadeFilter {
+  filter: RefCell<Option<rentals::CascadeWithOwnedData>>,
 }
 
+#[wasm_bindgen]
 impl CascadeFilter {
-    fn new() -> RefPtr<CascadeFilter> {
-        CascadeFilter::allocate(InitCascadeFilter {
-            filter: RefCell::new(None),
-        })
+  pub fn new() -> CascadeFilter {
+    //CascadeFilter::allocate(
+    CascadeFilter {
+      filter: RefCell::new(None),
     }
-    xpcom_method!(set_filter_data => SetFilterData(data: *const ThinVec<u8>));
+    //)
+  }
+
+  pub fn set_filter_data(&self, data: &[u8]) -> () {
+    let filter =
+      rentals::CascadeWithOwnedData::try_new_or_drop(Vec::from(data).into_boxed_slice(), |data| {
+        Cascade::from_bytes(data).unwrap_or(None).ok_or(())
+      });
 
-    fn set_filter_data(&self, data: &ThinVec<u8>) -> Result<(), nsresult> {
-        let filter = rentals::CascadeWithOwnedData::try_new_or_drop(
-            Vec::from(data.as_slice()).into_boxed_slice(),
-            |data| {
-                Cascade::from_bytes(data)
-                    .unwrap_or(None)
-                    .ok_or(NS_ERROR_INVALID_ARG)
-            },
-        )?;
-        self.filter.borrow_mut().replace(filter);
-        Ok(())
+    match filter {
+      Ok(i) => {
+        self.filter.borrow_mut().replace(i);
+      }
+      _ => {}
+    };
+    ()
+  }
+
+  // xpcom_method!(has => Has(key: *const nsACString) -> bool);
+
+  pub fn has(&self, key: &[u8]) -> bool {
+    match self.filter.borrow().as_ref() {
+      None => false,
+      Some(filter) => filter.rent(|cascade| cascade.has(&*key)),
     }
-
-    xpcom_method!(has => Has(key: *const nsACString) -> bool);
-
-    fn has(&self, key: &nsACString) -> Result<bool, nsresult> {
-        match self.filter.borrow().as_ref() {
-            None => Err(NS_ERROR_NOT_INITIALIZED),
-            Some(filter) => Ok(filter.rent(|cascade| cascade.has(&*key))),
-        }
-    }
+  }
 }
 
-#[no_mangle]
-pub unsafe extern "C" fn cascade_filter_construct(result: &mut *const nsICascadeFilter) {
-    let inst: RefPtr<CascadeFilter> = CascadeFilter::new();
-    *result = inst.coerce::<nsICascadeFilter>();
-    std::mem::forget(inst);
-}
+// // #[no_mangle]
+// // pub unsafe extern "C" fn cascade_filter_construct(result: &mut *const nsICascadeFilter) {
+// //   let inst: RefPtr<CascadeFilter> = CascadeFilter::new();
+// //   *result = inst.coerce::<nsICascadeFilter>();
+// //   std::mem::forget(inst);
+// // }
diff --git a/toolkit/components/cascade_bloom_filter/test/xpcshell/test_cascade_bindings.js b/toolkit/components/cascade_bloom_filter/test/xpcshell/test_cascade_bindings.js
--- a/toolkit/components/cascade_bloom_filter/test/xpcshell/test_cascade_bindings.js
+++ b/toolkit/components/cascade_bloom_filter/test/xpcshell/test_cascade_bindings.js
@@ -1,10 +1,12 @@
 "use strict";
 
+
+
 const CASCADE_CID = "@mozilla.org/cascade-filter;1";
 const CASCADE_IID = Ci.nsICascadeFilter;
 const CascadeFilter = Components.Constructor(CASCADE_CID, CASCADE_IID);
 
 add_task(function CascadeFilter_uninitialized() {
   let filter = new CascadeFilter();
   Assert.throws(
     () => filter.has(""),
diff --git a/toolkit/components/cascade_bloom_filter/wasm/.gitignore b/toolkit/components/cascade_bloom_filter/wasm/.gitignore
new file mode 100644
--- /dev/null
+++ b/toolkit/components/cascade_bloom_filter/wasm/.gitignore
@@ -0,0 +1,1 @@
+*
\ No newline at end of file
diff --git a/toolkit/components/cascade_bloom_filter/wasm/cascade_bloom_filter.js b/toolkit/components/cascade_bloom_filter/wasm/cascade_bloom_filter.js
new file mode 100644
--- /dev/null
+++ b/toolkit/components/cascade_bloom_filter/wasm/cascade_bloom_filter.js
@@ -0,0 +1,216 @@
+let wasm_bindgen;
+(function() {
+    const __exports = {};
+    let wasm;
+
+    let cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });
+
+    cachedTextDecoder.decode();
+
+    let cachegetUint8Memory0 = null;
+    function getUint8Memory0() {
+        if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {
+            cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);
+        }
+        return cachegetUint8Memory0;
+    }
+
+    function getStringFromWasm0(ptr, len) {
+        return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));
+    }
+
+    let WASM_VECTOR_LEN = 0;
+
+    let cachedTextEncoder = new TextEncoder('utf-8');
+
+    const encodeString = (typeof cachedTextEncoder.encodeInto === 'function'
+        ? function (arg, view) {
+        return cachedTextEncoder.encodeInto(arg, view);
+    }
+        : function (arg, view) {
+        const buf = cachedTextEncoder.encode(arg);
+        view.set(buf);
+        return {
+            read: arg.length,
+            written: buf.length
+        };
+    });
+
+    function passStringToWasm0(arg, malloc, realloc) {
+
+        if (realloc === undefined) {
+            const buf = cachedTextEncoder.encode(arg);
+            const ptr = malloc(buf.length);
+            getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);
+            WASM_VECTOR_LEN = buf.length;
+            return ptr;
+        }
+
+        let len = arg.length;
+        let ptr = malloc(len);
+
+        const mem = getUint8Memory0();
+
+        let offset = 0;
+
+        for (; offset < len; offset++) {
+            const code = arg.charCodeAt(offset);
+            if (code > 0x7F) break;
+            mem[ptr + offset] = code;
+        }
+
+        if (offset !== len) {
+            if (offset !== 0) {
+                arg = arg.slice(offset);
+            }
+            ptr = realloc(ptr, len, len = offset + arg.length * 3);
+            const view = getUint8Memory0().subarray(ptr + offset, ptr + len);
+            const ret = encodeString(arg, view);
+
+            offset += ret.written;
+        }
+
+        WASM_VECTOR_LEN = offset;
+        return ptr;
+    }
+
+    let cachegetInt32Memory0 = null;
+    function getInt32Memory0() {
+        if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {
+            cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);
+        }
+        return cachegetInt32Memory0;
+    }
+    /**
+    * @param {string} input_string
+    * @returns {string}
+    */
+    __exports.add_wasm_by_example_to_string = function(input_string) {
+        try {
+            var ptr0 = passStringToWasm0(input_string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
+            var len0 = WASM_VECTOR_LEN;
+            wasm.add_wasm_by_example_to_string(8, ptr0, len0);
+            var r0 = getInt32Memory0()[8 / 4 + 0];
+            var r1 = getInt32Memory0()[8 / 4 + 1];
+            return getStringFromWasm0(r0, r1);
+        } finally {
+            wasm.__wbindgen_free(r0, r1);
+        }
+    };
+
+    function passArray8ToWasm0(arg, malloc) {
+        const ptr = malloc(arg.length * 1);
+        getUint8Memory0().set(arg, ptr / 1);
+        WASM_VECTOR_LEN = arg.length;
+        return ptr;
+    }
+    /**
+    */
+    class CascadeFilter {
+
+        static __wrap(ptr) {
+            const obj = Object.create(CascadeFilter.prototype);
+            obj.ptr = ptr;
+
+            return obj;
+        }
+
+        free() {
+            const ptr = this.ptr;
+            this.ptr = 0;
+
+            wasm.__wbg_cascadefilter_free(ptr);
+        }
+        /**
+        * @returns {CascadeFilter}
+        */
+        static new() {
+            var ret = wasm.cascadefilter_new();
+            return CascadeFilter.__wrap(ret);
+        }
+        /**
+        * @param {Uint8Array} data
+        */
+        set_filter_data(data) {
+            var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);
+            var len0 = WASM_VECTOR_LEN;
+            wasm.cascadefilter_set_filter_data(this.ptr, ptr0, len0);
+        }
+        /**
+        * @param {Uint8Array} key
+        * @returns {boolean}
+        */
+        has(key) {
+            var ptr0 = passArray8ToWasm0(key, wasm.__wbindgen_malloc);
+            var len0 = WASM_VECTOR_LEN;
+            var ret = wasm.cascadefilter_has(this.ptr, ptr0, len0);
+            return ret !== 0;
+        }
+    }
+    __exports.CascadeFilter = CascadeFilter;
+
+    async function load(module, imports) {
+        if (typeof Response === 'function' && module instanceof Response) {
+
+            if (typeof WebAssembly.instantiateStreaming === 'function') {
+                try {
+                    return await WebAssembly.instantiateStreaming(module, imports);
+
+                } catch (e) {
+                    if (module.headers.get('Content-Type') != 'application/wasm') {
+                        console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", e);
+
+                    } else {
+                        throw e;
+                    }
+                }
+            }
+
+            const bytes = await module.arrayBuffer();
+            return await WebAssembly.instantiate(bytes, imports);
+
+        } else {
+
+            const instance = await WebAssembly.instantiate(module, imports);
+
+            if (instance instanceof WebAssembly.Instance) {
+                return { instance, module };
+
+            } else {
+                return instance;
+            }
+        }
+    }
+
+    async function init(input) {
+        if (typeof input === 'undefined') {
+            let src;
+            if (typeof document === 'undefined') {
+                src = location.href;
+            } else {
+                src = document.currentScript.src;
+            }
+            input = src.replace(/\.js$/, '_bg.wasm');
+        }
+        const imports = {};
+        imports.wbg = {};
+        imports.wbg.__wbindgen_throw = function(arg0, arg1) {
+            throw new Error(getStringFromWasm0(arg0, arg1));
+        };
+
+        if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {
+            input = fetch(input);
+        }
+
+        const { instance, module } = await load(await input, imports);
+
+        wasm = instance.exports;
+        init.__wbindgen_wasm_module = module;
+
+        return wasm;
+    }
+
+    wasm_bindgen = Object.assign(init, __exports);
+
+})();
+var EXPORTED_SYMBOLS = ["wasm_bindgen"];
diff --git a/toolkit/components/cascade_bloom_filter/wasm/cascade_bloom_filter_bg.wasm b/toolkit/components/cascade_bloom_filter/wasm/cascade_bloom_filter_bg.wasm
new file mode 100644
index e69de29bb2d1d6434b8b29ae775ad8c2e48c5391..9702dad12fbf3d6eef713ed4092cb3a0c16aa6e6
GIT binary patch
literal 51266
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

diff --git a/toolkit/components/cascade_bloom_filter/wasm/moz.build b/toolkit/components/cascade_bloom_filter/wasm/moz.build
new file mode 100644
--- /dev/null
+++ b/toolkit/components/cascade_bloom_filter/wasm/moz.build
@@ -0,0 +1,5 @@
+
+EXTRA_JS_MODULES += [
+    'cascade_bloom_filter.js',
+]
+
diff --git a/toolkit/components/cascade_bloom_filter/wasm/package.json b/toolkit/components/cascade_bloom_filter/wasm/package.json
new file mode 100644
--- /dev/null
+++ b/toolkit/components/cascade_bloom_filter/wasm/package.json
@@ -0,0 +1,12 @@
+{
+  "name": "cascade_bloom_filter",
+  "collaborators": [
+    "Rob Wu <rob@robwu.nl>"
+  ],
+  "version": "0.1.0",
+  "files": [
+    "cascade_bloom_filter_bg.wasm",
+    "cascade_bloom_filter.js"
+  ],
+  "browser": "cascade_bloom_filter.js"
+}
\ No newline at end of file
