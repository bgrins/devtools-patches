# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  302cc6ec6d96b5ab4bf81933dd5249091e5d86c3

diff --git a/Cargo.lock b/Cargo.lock
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -493,22 +493,17 @@ checksum = "214238caa1bf3a496ec339296896
 dependencies = [
  "ppv-lite86",
 ]
 
 [[package]]
 name = "cascade_bloom_filter"
 version = "0.1.0"
 dependencies = [
- "nserror",
- "nsstring",
- "rental",
- "rust_cascade",
- "thin-vec",
- "xpcom",
+ "wasm-bindgen",
 ]
 
 [[package]]
 name = "cast"
 version = "0.2.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "926013f2860c46252efceabb19f4a6b308197505082c609025aa6706c011d427"
 
@@ -3713,19 +3708,19 @@ checksum = "ecd45702f76d6d3c75a80564378a
 dependencies = [
  "proc-macro2",
  "quote",
  "syn",
 ]
 
 [[package]]
 name = "proc-macro2"
-version = "1.0.5"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "90cf5f418035b98e655e9cdb225047638296b862b42411c4e45bb88d700f7fc0"
+version = "1.0.18"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "beae6331a816b1f65d04c45b078fd8e6c93e8071771f41b8163255bbd8d7c8fa"
 dependencies = [
  "unicode-xid",
 ]
 
 [[package]]
 name = "procedural-masquerade"
 version = "0.1.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -4675,19 +4670,19 @@ dependencies = [
  "cc",
  "gleam",
  "glsl-to-cxx",
  "webrender_build",
 ]
 
 [[package]]
 name = "syn"
-version = "1.0.5"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "66850e97125af79138385e9b88339cbcd037e3f28ceab8c5ad98e64f0f1f80bf"
+version = "1.0.33"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e8d5d96e8cbb005d6959f119f773bfaebb5684296108fb32600c00cde305b2cd"
 dependencies = [
  "proc-macro2",
  "quote",
  "unicode-xid",
 ]
 
 [[package]]
 name = "sync-guid"
@@ -5361,16 +5356,70 @@ dependencies = [
  "serde_json",
  "serde_urlencoded",
  "tokio 0.2.18",
  "tower-service",
  "urlencoding",
 ]
 
 [[package]]
+name = "wasm-bindgen"
+version = "0.2.63"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4c2dc4aa152834bc334f506c1a06b866416a8b6697d5c9f75b9a689c8486def0"
+dependencies = [
+ "cfg-if",
+ "wasm-bindgen-macro",
+]
+
+[[package]]
+name = "wasm-bindgen-backend"
+version = "0.2.63"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ded84f06e0ed21499f6184df0e0cb3494727b0c5da89534e0fcc55c51d812101"
+dependencies = [
+ "bumpalo",
+ "lazy_static",
+ "log",
+ "proc-macro2",
+ "quote",
+ "syn",
+ "wasm-bindgen-shared",
+]
+
+[[package]]
+name = "wasm-bindgen-macro"
+version = "0.2.63"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "838e423688dac18d73e31edce74ddfac468e37b1506ad163ffaf0a46f703ffe3"
+dependencies = [
+ "quote",
+ "wasm-bindgen-macro-support",
+]
+
+[[package]]
+name = "wasm-bindgen-macro-support"
+version = "0.2.63"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3156052d8ec77142051a533cdd686cba889537b213f948cd1d20869926e68e92"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn",
+ "wasm-bindgen-backend",
+ "wasm-bindgen-shared",
+]
+
+[[package]]
+name = "wasm-bindgen-shared"
+version = "0.2.63"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c9ba19973a58daf4db6f352eda73dc0e289493cd29fb2632eb172085b6521acd"
+
+[[package]]
 name = "wasmparser"
 version = "0.48.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "073da89bf1c84db000dd68ce660c1b4a08e3a2d28fd1e3394ab9e7abdde4a0f8"
 
 [[package]]
 name = "wasmparser"
 version = "0.57.0"
diff --git a/toolkit/components/cascade_bloom_filter/Cargo.toml b/toolkit/components/cascade_bloom_filter/Cargo.toml
--- a/toolkit/components/cascade_bloom_filter/Cargo.toml
+++ b/toolkit/components/cascade_bloom_filter/Cargo.toml
@@ -1,12 +1,16 @@
 [package]
 name = "cascade_bloom_filter"
 version = "0.1.0"
 authors = ["Rob Wu <rob@robwu.nl>"]
 
+[lib]
+crate-type = ["cdylib"]
+
 [dependencies]
-nserror = { path = "../../../xpcom/rust/nserror" }
-nsstring = { path = "../../../xpcom/rust/nsstring" }
-rental = "0.5.5"
-rust_cascade = "0.6.0"
-thin-vec = { version = "0.1.0", features = ["gecko-ffi"] }
-xpcom = { path = "../../../xpcom/rust/xpcom" }
+wasm-bindgen = "0.2.63"
+#nserror = { path = "../../../xpcom/rust/nserror" }
+#nsstring = { path = "../../../xpcom/rust/nsstring" }
+#rental = "0.5.5"
+#rust_cascade = "0.6.0"
+#thin-vec = { version = "0.1.0", features = ["gecko-ffi"] }
+#xpcom = { path = "../../../xpcom/rust/xpcom" }
diff --git a/toolkit/components/cascade_bloom_filter/src/lib.rs b/toolkit/components/cascade_bloom_filter/src/lib.rs
--- a/toolkit/components/cascade_bloom_filter/src/lib.rs
+++ b/toolkit/components/cascade_bloom_filter/src/lib.rs
@@ -1,79 +1,14 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-extern crate nserror;
-extern crate nsstring;
-#[macro_use]
-extern crate rental;
-extern crate rust_cascade;
-extern crate thin_vec;
-#[macro_use]
-extern crate xpcom;
+// The wasm-pack uses wasm-bindgen to build and generate JavaScript binding file.
+// Import the wasm-bindgen crate.
+extern crate wasm_bindgen;
 
-use nserror::{nsresult, NS_ERROR_INVALID_ARG, NS_ERROR_NOT_INITIALIZED, NS_OK};
-use nsstring::nsACString;
-use rust_cascade::Cascade;
-use std::cell::RefCell;
-use thin_vec::ThinVec;
-use xpcom::interfaces::nsICascadeFilter;
-use xpcom::{xpcom_method, RefPtr};
-
-// Cascade does not take ownership of the data, so we must own the data in order to pass its
-// reference to Cascade.
-rental! {
-    mod rentals {
-        use super::Cascade;
-
-        #[rental]
-        pub struct CascadeWithOwnedData {
-            owndata: Box<[u8]>,
-            cascade: Box<Cascade<'owndata>>,
-        }
-    }
-}
+use wasm_bindgen::prelude::*;
 
-#[derive(xpcom)]
-#[xpimplements(nsICascadeFilter)]
-#[refcnt = "nonatomic"]
-pub struct InitCascadeFilter {
-    filter: RefCell<Option<rentals::CascadeWithOwnedData>>,
+// Our function to concatenate the string "Wasm by Example"
+// to the input string. We are using .into(), to convert
+// the rust types of str to a String.
+#[wasm_bindgen]
+pub fn add_wasm_by_example_to_string(input_string: String) -> String {
+  let result = format!("{} {}", input_string, "Wasm by Example");
+  return result.into();
 }
-
-impl CascadeFilter {
-    fn new() -> RefPtr<CascadeFilter> {
-        CascadeFilter::allocate(InitCascadeFilter {
-            filter: RefCell::new(None),
-        })
-    }
-    xpcom_method!(set_filter_data => SetFilterData(data: *const ThinVec<u8>));
-
-    fn set_filter_data(&self, data: &ThinVec<u8>) -> Result<(), nsresult> {
-        let filter = rentals::CascadeWithOwnedData::try_new_or_drop(
-            Vec::from(data.as_slice()).into_boxed_slice(),
-            |data| {
-                Cascade::from_bytes(data)
-                    .unwrap_or(None)
-                    .ok_or(NS_ERROR_INVALID_ARG)
-            },
-        )?;
-        self.filter.borrow_mut().replace(filter);
-        Ok(())
-    }
-
-    xpcom_method!(has => Has(key: *const nsACString) -> bool);
-
-    fn has(&self, key: &nsACString) -> Result<bool, nsresult> {
-        match self.filter.borrow().as_ref() {
-            None => Err(NS_ERROR_NOT_INITIALIZED),
-            Some(filter) => Ok(filter.rent(|cascade| cascade.has(&*key))),
-        }
-    }
-}
-
-#[no_mangle]
-pub unsafe extern "C" fn cascade_filter_construct(result: &mut *const nsICascadeFilter) {
-    let inst: RefPtr<CascadeFilter> = CascadeFilter::new();
-    *result = inst.coerce::<nsICascadeFilter>();
-    std::mem::forget(inst);
-}
