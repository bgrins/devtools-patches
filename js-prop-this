# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  17edd54329657f8783cb7bddd18b86297087fe5e
Bug 1218455 - Special case 'this' to include in console autocompletion;r=fitzgen

diff --git a/devtools/shared/webconsole/js-property-provider.js b/devtools/shared/webconsole/js-property-provider.js
--- a/devtools/shared/webconsole/js-property-provider.js
+++ b/devtools/shared/webconsole/js-property-provider.js
@@ -233,22 +233,28 @@ function JSPropertyProvider(aDbgObject, 
   }
 
   if (!isObjectUsable(obj)) {
     return null;
   }
 
   // We get the rest of the properties recursively starting from the Debugger.Object
   // that wraps the first property
-  for (let prop of properties) {
-    prop = prop.trim();
+  for (let i = 0; i < properties.length; i++) {
+    let prop = properties[i].trim();
     if (!prop) {
       return null;
     }
 
+    // Special case for 'this' since it's not part of the global's properties
+    // but we want autocompletion to work properly for it
+    if (prop === "this" && obj === aDbgObject && i === 0) {
+      continue;
+    }
+
     if (/\[\d+\]$/.test(prop)) {
       // The property to autocomplete is a member of array. For example
       // list[i][j]..[n]. Traverse the array to get the actual element.
       obj = getArrayMemberProperty(obj, prop);
     }
     else {
       obj = DevToolsUtils.getProperty(obj, prop);
     }
@@ -258,17 +264,31 @@ function JSPropertyProvider(aDbgObject, 
     }
   }
 
   // If the final property is a primitive
   if (typeof obj != "object") {
     return getMatchedProps(obj, matchProp);
   }
 
-  return getMatchedPropsInDbgObject(obj, matchProp);
+
+  let matchedProps = getMatchedPropsInDbgObject(obj, matchProp);
+
+  // Include 'this' in results for the global object (in sorted order)
+  if (properties.length === 0 && obj === aDbgObject) {
+    let matches = matchedProps.matches;
+    for (let i = 0; i < matches.length; i++) {
+      if (i === matches.length - 1 || matches[i+1] > "this") {
+        matches.splice(i+1, 0, "this");
+        break;
+      }
+    }
+  }
+
+  return matchedProps;
 }
 
 /**
  * Get the array member of aObj for the given aProp. For example, given
  * aProp='list[0][1]' the element at [0][1] of aObj.list is returned.
  *
  * @param object aObj
  *        The object to operate on.
diff --git a/devtools/shared/webconsole/test/unit/test_js_property_provider.js b/devtools/shared/webconsole/test/unit/test_js_property_provider.js
--- a/devtools/shared/webconsole/test/unit/test_js_property_provider.js
+++ b/devtools/shared/webconsole/test/unit/test_js_property_provider.js
@@ -28,32 +28,44 @@ function run_test() {
 
   let sandbox = Components.utils.Sandbox("http://example.com");
   let dbg = new Debugger;
   let dbgObject = dbg.addDebuggee(sandbox);
   Components.utils.evalInSandbox(testArray, sandbox);
   Components.utils.evalInSandbox(testObject, sandbox);
   Components.utils.evalInSandbox(testHyphenated, sandbox);
 
+  do_print("Test that suggestions are given for 'foo[n]' where n is an integer.");
   let results = JSPropertyProvider(dbgObject, null, "testArray[0].");
-  do_print("Test that suggestions are given for 'foo[n]' where n is an integer.");
   test_has_result(results, "propA");
 
   do_print("Test that suggestions are given for multidimensional arrays.");
   results = JSPropertyProvider(dbgObject, null, "testArray[2][0].");
   test_has_result(results, "propE");
 
   do_print("Test that suggestions are given for literal arrays.");
   results = JSPropertyProvider(dbgObject, null, "[1,2,3].");
   test_has_result(results, "indexOf");
 
   do_print("Test that suggestions are given for literal arrays with newlines.");
   results = JSPropertyProvider(dbgObject, null, "[1,2,3,\n4\n].");
   test_has_result(results, "indexOf");
 
+  do_print("Test that suggestions are given for 'this'");
+  results = JSPropertyProvider(dbgObject, null, "t");
+  test_has_result(results, "this");
+
+  do_print("Test that suggestions are given for 'this.'");
+  results = JSPropertyProvider(dbgObject, null, "this.");
+  test_has_result(results, "testObject");
+
+  do_print("Test that no suggestions are given for 'this.this'");
+  results = JSPropertyProvider(dbgObject, null, "this.this");
+  test_has_no_results(results);
+
   do_print("Test that suggestions are given for literal strings.");
   results = JSPropertyProvider(dbgObject, null, "'foo'.");
   test_has_result(results, "charAt");
   results = JSPropertyProvider(dbgObject, null, '"foo".');
   test_has_result(results, "charAt");
   results = JSPropertyProvider(dbgObject, null, "`foo`.");
   test_has_result(results, "charAt");
   results = JSPropertyProvider(dbgObject, null, "'[1,2,3]'.");
