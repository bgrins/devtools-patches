# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  6024fe376fe1495fe50bce48b33c27de5ad2c37d
Bug 1257613 - Port webconsole context menus to new API

diff --git a/devtools/client/webconsole/webconsole.js b/devtools/client/webconsole/webconsole.js
--- a/devtools/client/webconsole/webconsole.js
+++ b/devtools/client/webconsole/webconsole.js
@@ -12,16 +12,18 @@ const {Utils: WebConsoleUtils, CONSOLE_W
   require("devtools/shared/webconsole/utils");
 const { getSourceNames } = require("devtools/client/shared/source-utils");
 const BrowserLoaderModule = {};
 Cu.import("resource://devtools/client/shared/browser-loader.js", BrowserLoaderModule);
 
 const promise = require("promise");
 const Services = require("Services");
 const ErrorDocs = require("devtools/server/actors/errordocs");
+const Menu = require("devtools/client/framework/menu");
+const MenuItem = require("devtools/client/framework/menu-item");
 
 loader.lazyServiceGetter(this, "clipboardHelper",
                          "@mozilla.org/widget/clipboardhelper;1",
                          "nsIClipboardHelper");
 loader.lazyRequireGetter(this, "EventEmitter", "devtools/shared/event-emitter");
 loader.lazyRequireGetter(this, "AutocompletePopup", "devtools/client/shared/autocomplete-popup", true);
 loader.lazyRequireGetter(this, "ToolSidebar", "devtools/client/framework/sidebar", true);
 loader.lazyRequireGetter(this, "ConsoleOutput", "devtools/client/webconsole/console-output", true);
@@ -2765,16 +2767,18 @@ WebConsoleFrame.prototype = {
 
   /**
    * Open the selected item's URL in a new tab.
    */
   openSelectedItemInTab: function() {
     let item = this.output.getSelectedMessages(1)[0] ||
                this._contextMenuHandler.lastClickedMessage;
 
+    console.log("Hi", item, item.url);
+    console.trace();
     if (!item || !item.url) {
       return;
     }
 
     this.owner.openLink(item.url);
   },
 
   /**
@@ -3517,29 +3521,84 @@ WebConsoleConnectionProxy.prototype = {
  * @param object owner
  *        The WebConsoleFrame instance that owns this object.
  */
 function ConsoleContextMenu(owner) {
   this.owner = owner;
   this.popup = this.owner.document.getElementById("output-contextmenu");
   this.build = this.build.bind(this);
   this.popup.addEventListener("popupshowing", this.build);
+
+
+  let toolbox = gDevTools.getToolbox(this.owner.owner.target);
+  console.log("HERE", owner, toolbox)
+  // XXX: Handle browser console case
+  if (toolbox) {
+
+    var submenu = new Menu();
+    submenu.append(new MenuItem({ type: 'checkbox', label: 'box1' }));
+    submenu.append(new MenuItem({ type: 'checkbox', label: 'box2' }));
+    submenu.append(new MenuItem({ type: 'checkbox', label: 'box3' }));
+    submenu.append(new MenuItem({ type: 'checkbox', label: 'box4' }));
+
+    var menu = new Menu();
+    menu.append(new MenuItem({ label: 'MenuItem1', click: function() { console.log('item 1 clicked'); } }));
+    menu.append(new MenuItem({ label: 'MenuItem2', type: 'checkbox', checked: true }));
+    menu.append(new MenuItem({ label: 'Disk', submenu: submenu}));
+
+
+    this.owner.document.getElementById("output-wrapper").addEventListener("contextmenu", (e) => {
+
+      e.preventDefault();
+      menu.popup(toolbox.doc.defaultView, e.screenX, e.screenY);
+      console.log(e, e.defaultPrevented);
+      return;
+      // <menuitem id="menu_openURL" label="&openURL.label;"
+      //           accesskey="&openURL.accesskey;" command="consoleCmd_openURL"
+      //           selection="network" selectionType="single"/>
+      // <menuitem id="menu_copyURL" label="&copyURLCmd.label;"
+      //           accesskey="&copyURLCmd.accesskey;" command="consoleCmd_copyURL"
+      //           selection="network" selectionType="single"/>
+      // <menuitem id="menu_openInVarView" label="&openInVarViewCmd.label;"
+      //   accesskey="&openInVarViewCmd.accesskey;" disabled="true"/>
+      // <menuitem id="menu_storeAsGlobal" label="&storeAsGlobalVar.label;"
+      //   accesskey="&storeAsGlobalVar.accesskey;"/>
+      // <menuitem id="cMenu_copy"/>
+      // <menuitem id="cMenu_selectAll"/>
+      let CONTEXT_MENU_ITEMS = {
+        "menu_openURL": {
+          label: "&openURL.label;",
+          onClick: () => {
+            console.log("DOING COMMAND");
+            this.owner._commandController.doCommand("consoleCmd_openURL");
+          },
+          accesskey: "&openURL.accesskey;",
+          command: "consoleCmd_openURL",
+          selection: "network",
+          selectionType: "single",
+        }
+      };
+      this.popup = toolbox.openContextMenuAtPoint(e, CONTEXT_MENU_ITEMS);
+      this.build(e);
+    });
+  }
+
 }
 
 ConsoleContextMenu.prototype = {
   lastClickedMessage: null,
 
   /*
    * Handle to show/hide context menu item.
    */
   build: function(event) {
     let metadata = this.getSelectionMetadata(event.rangeParent);
-    for (let element of this.popup.children) {
-      element.hidden = this.shouldHideMenuItem(element, metadata);
-    }
+    // for (let element of this.popup.children) {
+    //   element.hidden = this.shouldHideMenuItem(element, metadata);
+    // }
   },
 
   /*
    * Get selection information from the view.
    *
    * @param nsIDOMElement clickElement
    *        The DOM element the user clicked on.
    * @return object
diff --git a/devtools/client/webconsole/webconsole.xul b/devtools/client/webconsole/webconsole.xul
--- a/devtools/client/webconsole/webconsole.xul
+++ b/devtools/client/webconsole/webconsole.xul
@@ -197,17 +197,17 @@ function goUpdateConsoleCommands() {
         </hbox>
 
         <spacer flex="1"/>
 
         <textbox class="compact hud-filter-box devtools-searchinput" type="search"
                  placeholder="&filterOutput.placeholder;" tabindex="2"/>
       </toolbar>
 
-      <hbox id="output-wrapper" flex="1" context="output-contextmenu" tooltip="aHTMLTooltip">
+      <hbox id="output-wrapper" flex="1" tooltip="aHTMLTooltip">
         <!-- Wrapper element to make scrolling in output-container much faster.
              See Bug 1237368 -->
         <div xmlns="http://www.w3.org/1999/xhtml">
           <div xmlns="http://www.w3.org/1999/xhtml" id="output-container"
                tabindex="0" role="document" aria-live="polite" />
         </div>
       </hbox>
       <notificationbox id="webconsole-notificationbox">
