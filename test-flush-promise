# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  c9f61ebf2af5990ba046013d912abee89ffadd40
Test case for Bug 1197266

diff --git a/browser/base/content/test/general/browser_mixedContentFramesOnHttp.js b/browser/base/content/test/general/browser_mixedContentFramesOnHttp.js
--- a/browser/base/content/test/general/browser_mixedContentFramesOnHttp.js
+++ b/browser/base/content/test/general/browser_mixedContentFramesOnHttp.js
@@ -16,16 +16,20 @@ let gTestBrowser = null;
 
 function SecStateTestsCompleted() {
   gBrowser.removeCurrentTab();
   window.focus();
   finish();
 }
 
 function test() {
+const PREF_DISPLAY = "security.mixed_content.block_display_content";
+const PREF_ACTIVE = "security.mixed_content.block_active_content";
+  // Set preferences back to their original values
+  console.log("BRIAN!!!!", Services.prefs.getBoolPref(PREF_DISPLAY), Services.prefs.getBoolPref(PREF_ACTIVE))
   waitForExplicitFinish();
   SpecialPowers.pushPrefEnv({"set": [
     ["security.mixed_content.block_active_content", true],
     ["security.mixed_content.block_display_content", false]
   ]}, SecStateTests);
 }
 
 function SecStateTests() {
diff --git a/browser/base/content/test/general/browser_mixedcontent_securityflags.js b/browser/base/content/test/general/browser_mixedcontent_securityflags.js
--- a/browser/base/content/test/general/browser_mixedcontent_securityflags.js
+++ b/browser/base/content/test/general/browser_mixedcontent_securityflags.js
@@ -11,40 +11,43 @@
 //   flags again.
 
 const TEST_URI = "https://example.com/browser/browser/base/content/test/general/test-mixedcontent-securityerrors.html";
 const PREF_DISPLAY = "security.mixed_content.block_display_content";
 const PREF_ACTIVE = "security.mixed_content.block_active_content";
 let gTestBrowser = null;
 waitForExplicitFinish();
 
+function pushPrefEnv(set) {
+  return new Promise(resolve => {
+    SpecialPowers.pushPrefEnv({"set": set}, resolve);
+  });
+}
+
 registerCleanupFunction(function() {
-  // Set preferences back to their original values
-  Services.prefs.clearUserPref(PREF_DISPLAY);
-  Services.prefs.clearUserPref(PREF_ACTIVE);
   gBrowser.removeCurrentTab();
 });
 
 add_task(function* blockMixedActiveContentTest() {
   // Turn on mixed active blocking and mixed display loading and load the page.
-  Services.prefs.setBoolPref(PREF_DISPLAY, false);
-  Services.prefs.setBoolPref(PREF_ACTIVE, true);
+  yield pushPrefEnv([[PREF_ACTIVE, true],
+                     [PREF_DISPLAY, false]]);
 
   let tab = yield BrowserTestUtils.openNewForegroundTab(gBrowser, TEST_URI);
   gTestBrowser = gBrowser.getBrowserForTab(tab);
 
   is(gTestBrowser.docShell.hasMixedDisplayContentBlocked, false, "hasMixedDisplayContentBlocked flag has been set");
   is(gTestBrowser.docShell.hasMixedActiveContentBlocked, true, "hasMixedActiveContentBlocked flag has been set");
   is(gTestBrowser.docShell.hasMixedDisplayContentLoaded, true, "hasMixedDisplayContentLoaded flag has been set");
   is(gTestBrowser.docShell.hasMixedActiveContentLoaded, false, "hasMixedActiveContentLoaded flag has been set");
   assertMixedContentBlockingState(gTestBrowser, {activeLoaded: false, activeBlocked: true, passiveLoaded: true});
 
   // Turn on mixed active and mixed display blocking and reload the page.
-  Services.prefs.setBoolPref(PREF_DISPLAY, true);
-  Services.prefs.setBoolPref(PREF_ACTIVE, true);
+  yield pushPrefEnv([[PREF_ACTIVE, true],
+                     [PREF_DISPLAY, true]]);
 
   gBrowser.reload();
   yield BrowserTestUtils.browserLoaded(gTestBrowser);
 
   is(gTestBrowser.docShell.hasMixedDisplayContentBlocked, true, "hasMixedDisplayContentBlocked flag has been set");
   is(gTestBrowser.docShell.hasMixedActiveContentBlocked, true, "hasMixedActiveContentBlocked flag has been set");
   is(gTestBrowser.docShell.hasMixedDisplayContentLoaded, false, "hasMixedDisplayContentLoaded flag has been set");
   is(gTestBrowser.docShell.hasMixedActiveContentLoaded, false, "hasMixedActiveContentLoaded flag has been set");
diff --git a/browser/base/content/test/general/browser_no_mcb_on_http_site.js b/browser/base/content/test/general/browser_no_mcb_on_http_site.js
--- a/browser/base/content/test/general/browser_no_mcb_on_http_site.js
+++ b/browser/base/content/test/general/browser_no_mcb_on_http_site.js
@@ -112,16 +112,21 @@ function test3() {
     function() content.document.getElementById('testDiv').innerHTML == expected,
     cleanUpAfterTests, "Error: Waited too long for status in Test 3!",
     "OK: Expected result in innerHTML!");
 }
 
 //------------------------------------------------------
 
 function test() {
+  const PREF_DISPLAY = "security.mixed_content.block_display_content";
+  const PREF_ACTIVE = "security.mixed_content.block_active_content";
+  is(Services.prefs.getBoolPref(PREF_DISPLAY), false, "Default value has been restored");
+  is(Services.prefs.getBoolPref(PREF_ACTIVE), true, "Default value has been restored");
+
   // Performing async calls, e.g. 'onload', we have to wait till all of them finished
   waitForExplicitFinish();
 
   // Store original preferences so we can restore settings after testing
   origBlockActive = Services.prefs.getBoolPref(PREF_ACTIVE);
   origBlockDisplay = Services.prefs.getBoolPref(PREF_DISPLAY);
 
   Services.prefs.setBoolPref(PREF_ACTIVE, true);
