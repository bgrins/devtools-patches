# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  03c37f87e34534c8926300ae523795e1a9247fbe

diff --git a/browser/base/content/tabbrowser.css b/browser/base/content/tabbrowser.css
--- a/browser/base/content/tabbrowser.css
+++ b/browser/base/content/tabbrowser.css
@@ -1,16 +1,12 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
-.tabbrowser-arrowscrollbox {
-  -moz-binding: url("chrome://browser/content/tabbrowser.xml#tabbrowser-arrowscrollbox");
-}
-
 .tab-close-button[pinned],
 #tabbrowser-tabs[closebuttons="activetab"] > .tabbrowser-tab > .tab-stack > .tab-content > .tab-close-button:not([selected="true"]),
 .tab-icon-pending:not([pendingicon]),
 .tab-icon-pending[busy],
 .tab-icon-pending[pinned],
 .tab-icon-image:not([src]):not([pinned]):not([crashed])[selected],
 .tab-icon-image:not([src]):not([pinned]):not([crashed]):not([sharing]),
 .tab-icon-image[busy],
diff --git a/browser/base/content/tabbrowser.xml b/browser/base/content/tabbrowser.xml
--- a/browser/base/content/tabbrowser.xml
+++ b/browser/base/content/tabbrowser.xml
@@ -24,17 +24,16 @@
         <body><![CDATA[
           return !tab._pinnedUnscrollable && !tab.hidden;
         ]]></body>
       </method>
     </implementation>
 
     <handlers>
       <handler event="underflow" phase="capturing"><![CDATA[
-        console.trace("Underflow from child");
         // Ignore underflow events:
         // - from nested scrollable elements
         // - for vertical orientation
         // - corresponding to an overflow event that we ignored
         let tabs = document.getBindingParent(this);
         if (event.originalTarget != this.scrollbox ||
             event.detail == 0 ||
             !tabs.hasAttribute("overflow")) {
@@ -101,16 +100,73 @@
     </content>
 
     <implementation implements="nsIObserver">
       <constructor>
         <![CDATA[
           this._tabClipWidth = Services.prefs.getIntPref("browser.tabs.tabClipWidth");
           this._hiddenSoundPlayingTabs = new Set();
 
+          let arrowScrollbox = document.getAnonymousElementByAttribute(
+            this, "class", "tabbrowser-arrowscrollbox");
+
+          arrowScrollbox.addEventListener("underflow", (event) => {
+            // Ignore underflow events:
+            // - from nested scrollable elements
+            // - for vertical orientation
+            // - corresponding to an overflow event that we ignored
+        console.trace("Underflow from child");
+            let tabs = document.getBindingParent(this);
+            if (event.originalTarget != this.scrollbox ||
+              event.detail == 0 ||
+              !tabs.hasAttribute("overflow")) {
+              return;
+            }
+
+            tabs.removeAttribute("overflow");
+
+            if (tabs._lastTabClosedByMouse) {
+              tabs._expandSpacerBy(this._scrollButtonDown.clientWidth);
+            }
+
+            for (let tab of Array.from(gBrowser._removingTabs)) {
+              gBrowser.removeTab(tab);
+            }
+
+            tabs._positionPinnedTabs();
+          }, { mozSystemGroup: true, capture: true });
+
+          arrowScrollbox.addEventListener("overflow", (event) => {
+        console.trace("overflow from child");
+            // Ignore overflow events:
+            // - from nested scrollable elements
+            // - for vertical orientation
+            if (event.originalTarget != this.scrollbox ||
+              event.detail == 0) {
+              return;
+            }
+
+            var tabs = document.getBindingParent(this);
+            tabs.setAttribute("overflow", "true");
+            tabs._positionPinnedTabs();
+            tabs._handleTabSelect(true);
+          }, { mozSystemGroup: true, capture: true });
+
+          /**
+          * Override scrollbox.xml method, since our scrollbox's children are
+          * inherited from the binding parent
+          */
+          arrowScrollbox._getScrollableElements = function() {
+            return Array.filter(document.getBindingParent(this).children,
+              this._canScrollToElement, this);
+          }
+          arrowScrollbox._canScrollToElement = function(tab) {
+            return !tab._pinnedUnscrollable && !tab.hidden;
+          }
+
           let strId = PrivateBrowsingUtils.isWindowPrivate(window) ?
               "emptyPrivateTabTitle" : "emptyTabTitle";
           this.emptyTabTitle = gTabBrowserBundle.GetStringFromName("tabs." + strId);
 
           var tab = this.firstElementChild;
           tab.label = this.emptyTabTitle;
 
           let newTabButton = document.getAnonymousElementByAttribute(
diff --git a/toolkit/content/widgets/scrollbox.xml b/toolkit/content/widgets/scrollbox.xml
--- a/toolkit/content/widgets/scrollbox.xml
+++ b/toolkit/content/widgets/scrollbox.xml
@@ -731,16 +731,17 @@
           return;
         }
 
         this.setAttribute("notoverflowing", "true");
         this._updateScrollButtonsDisabledState();
       ]]></handler>
 
       <handler event="overflow" phase="capturing"><![CDATA[
+        console.trace("overflow from parent");
         // Ignore overflow events:
         // - from nested scrollable elements
         if (event.target != this) {
           return;
         }
 
         // Ignore events that doesn't match our orientation.
         // Scrollport event orientation:
