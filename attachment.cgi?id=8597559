# HG changeset patch
# User Shu-yu Guo <shu@rfrn.org>

Bug 1157963 - Really check if a function has a JSScript when delazifying, like, for real.

diff --git a/js/src/jsfun.h b/js/src/jsfun.h
index ba008df..6ff011a 100644
--- a/js/src/jsfun.h
+++ b/js/src/jsfun.h
@@ -337,19 +337,26 @@ class JSFunction : public js::NativeObject
 
             flags_ &= ~INTERPRETED_LAZY;
             flags_ |= INTERPRETED;
             initScript(script);
         }
         return nonLazyScript();
     }
 
+    // The state of a JSFunction whose script errored out during bytecode
+    // compilation. Such JSFunctions are only reachable via GC iteration and
+    // not from script.
+    bool hasUncompiledScript() const {
+        MOZ_ASSERT(hasScript());
+        return !u.i.s.script_;
+    }
+
     JSScript* nonLazyScript() const {
-        MOZ_ASSERT(hasScript());
-        MOZ_ASSERT(u.i.s.script_);
+        MOZ_ASSERT(!hasUncompiledScript());
         return u.i.s.script_;
     }
 
     bool getLength(JSContext* cx, uint16_t* length) {
         JS::RootedFunction self(cx, this);
         if (self->isInterpretedLazy() && !self->getOrCreateScript(cx))
             return false;
 
diff --git a/js/src/jsscript.cpp b/js/src/jsscript.cpp
index abc7a5e..36dc5b8 100644
--- a/js/src/jsscript.cpp
+++ b/js/src/jsscript.cpp
@@ -3906,17 +3906,17 @@ LazyScript::hasUncompiledEnclosingScript() const
     //
     // If the enclosing scope is a function with a null script or has a script
     // without code, it was not successfully compiled.
 
     if (!enclosingScope() || !enclosingScope()->is<JSFunction>())
         return false;
 
     JSFunction& fun = enclosingScope()->as<JSFunction>();
-    return fun.isInterpreted() && (!fun.hasScript() || !fun.nonLazyScript()->code());
+    return fun.hasScript() && (fun.hasUncompiledScript() || !fun.nonLazyScript()->code());
 }
 
 uint32_t
 LazyScript::staticLevel(JSContext* cx) const
 {
     for (StaticScopeIter<NoGC> ssi(enclosingScope()); !ssi.done(); ssi++) {
         if (ssi.type() == StaticScopeIter<NoGC>::Function)
             return ssi.funScript()->staticLevel() + 1;
