# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  c65b7fa3b441c1b8990f9b16f6750c68152e8637
Extra logging

diff --git a/devtools/client/inspector/inspector-search.js b/devtools/client/inspector/inspector-search.js
--- a/devtools/client/inspector/inspector-search.js
+++ b/devtools/client/inspector/inspector-search.js
@@ -266,16 +266,17 @@ SelectorAutocompleter.prototype = {
     this.searchBox = null;
     this.panelDoc = null;
   },
 
   /**
    * Handles keypresses inside the input box.
    */
   _onSearchKeypress: function(event) {
+    console.log("_onSearchKeypress");
     let query = this.searchBox.value;
     switch(event.keyCode) {
       case event.DOM_VK_RETURN:
       case event.DOM_VK_TAB:
         if (this.searchPopup.isOpen &&
             this.searchPopup.getItemAtIndex(this.searchPopup.itemCount - 1)
                 .preLabel == query) {
           this.searchPopup.selectedIndex = this.searchPopup.itemCount - 1;
@@ -314,16 +315,17 @@ SelectorAutocompleter.prototype = {
     event.stopPropagation();
     this.emit("processing-done");
   },
 
   /**
    * Handles keypress and mouse click on the suggestions richlistbox.
    */
   _onListBoxKeypress: function(event) {
+    console.log("_onListBoxKeypress");
     switch(event.keyCode || event.button) {
       case event.DOM_VK_RETURN:
       case event.DOM_VK_TAB:
       case 0: // left mouse button
         event.stopPropagation();
         event.preventDefault();
         this.searchBox.value = this.searchPopup.selectedItem.label;
         this.searchBox.focus();
@@ -472,16 +474,18 @@ SelectorAutocompleter.prototype = {
       query = query.slice(0, query.length - firstPart.length - 1);
     }
     // TODO: implement some caching so that over the wire request is not made
     // everytime.
     if (/[\s+>~]$/.test(query)) {
       query += "*";
     }
 
+    console.log("Setting this._lastQuery", query);
+
     this._lastQuery = this.walker.getSuggestionsForQuery(query, firstPart, state).then(result => {
       this.emit("processing-done");
       if (result.query !== query) {
         // This means that this response is for a previous request and the user
         // as since typed something extra leading to a new request.
         return;
       }
 
