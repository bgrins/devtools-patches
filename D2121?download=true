diff --git a/xpcom/base/CycleCollectedJSContext.h b/xpcom/base/CycleCollectedJSContext.h
--- a/xpcom/base/CycleCollectedJSContext.h
+++ b/xpcom/base/CycleCollectedJSContext.h
@@ -225,7 +225,7 @@
     mMicroTaskLevel = aLevel;
   }
 
-  bool PerformMicroTaskCheckPoint();
+  bool PerformMicroTaskCheckPoint(bool aForce = false);
 
   void PerformDebuggerMicroTaskCheckpoint();
 
diff --git a/xpcom/base/CycleCollectedJSContext.cpp b/xpcom/base/CycleCollectedJSContext.cpp
--- a/xpcom/base/CycleCollectedJSContext.cpp
+++ b/xpcom/base/CycleCollectedJSContext.cpp
@@ -505,16 +505,16 @@
 };
 
 bool
-CycleCollectedJSContext::PerformMicroTaskCheckPoint()
+CycleCollectedJSContext::PerformMicroTaskCheckPoint(bool aForce)
 {
   if (mPendingMicroTaskRunnables.empty() && mDebuggerMicroTaskQueue.empty()) {
     AfterProcessMicrotasks();
     // Nothing to do, return early.
     return false;
   }
 
   uint32_t currentDepth = RecursionDepth();
-  if (mMicroTaskRecursionDepth >= currentDepth) {
+  if (mMicroTaskRecursionDepth >= currentDepth && !aForce) {
     // We are already executing microtasks for the current recursion depth.
     return false;
   }
@@ -532,7 +532,7 @@
   }
 
   mozilla::AutoRestore<uint32_t> restore(mMicroTaskRecursionDepth);
-  MOZ_ASSERT(currentDepth > 0);
+  MOZ_ASSERT(aForce ? currentDepth == 0 : currentDepth > 0);
   mMicroTaskRecursionDepth = currentDepth;
 
   bool didProcess = false;
diff --git a/xpcom/base/nsCycleCollector.cpp b/xpcom/base/nsCycleCollector.cpp
--- a/xpcom/base/nsCycleCollector.cpp
+++ b/xpcom/base/nsCycleCollector.cpp
@@ -4387,8 +4387,9 @@
     data->mCollector = nullptr;
     if (data->mContext) {
       // Run any remaining tasks that may have been enqueued via
-      // RunInStableState during the final cycle collection.
+      // RunInStableState or DispatchToMicroTask during the final cycle collection.
       data->mContext->ProcessStableStateQueue();
+      data->mContext->PerformMicroTaskCheckPoint(true);
     }
     if (!data->mContext) {
       delete data;

