# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  626e66dfa07999ea019b3f9a064532443e57ecdf
Bug 1326937 - Use launchpad with console frontend

diff --git a/devtools/client/shims/devtools.js b/devtools/client/shims/devtools.js
--- a/devtools/client/shims/devtools.js
+++ b/devtools/client/shims/devtools.js
@@ -5,11 +5,14 @@
 "use strict";
 
 /**
  * DevTools is a class that represents a set of developer tools, it holds a
  * set of tools and keeps track of open toolboxes in the browser.
  */
 const DevTools = {
   chromeWindowType: "navigator:browser",
+  getToolbox: function() {
+    return {};
+  }
 };
 
 exports.gDevTools = DevTools;
diff --git a/devtools/client/themes/new-webconsole.css b/devtools/client/themes/new-webconsole.css
--- a/devtools/client/themes/new-webconsole.css
+++ b/devtools/client/themes/new-webconsole.css
@@ -1,8 +1,11 @@
+
+@import "chrome://devtools/skin/widgets.css";
+@import "resource://devtools/client/themes/light-theme.css";
 
       .webconsole-filterbar-wrapper {
         flex-grow: 0;
       }
 
       .webconsole-filterbar-primary {
         display: flex;
       }
@@ -570,17 +573,18 @@ a {
 }
 
 a.learn-more-link.webconsole-learn-more-link {
     font-style: normal;
 }
 
 /* Open DOMNode in inspector button */
 .open-inspector {
-  background: url("chrome://devtools/skin/images/vview-open-inspector.png") no-repeat 0 0;
+  /* XXX: webpack loader can't handle png files */
+  background: url(chrome://devtools/skin/images/vview-open-inspector.png) no-repeat 0 0;
   padding-left: 16px;
   margin-left: 5px;
   cursor: pointer;
 }
 
 .elementNode:hover .open-inspector,
 .open-inspector:hover {
   filter: url(images/filters.svg#checked-icon-state);
diff --git a/devtools/client/webconsole/.babelrc b/devtools/client/webconsole/.babelrc
--- a/devtools/client/webconsole/.babelrc
+++ b/devtools/client/webconsole/.babelrc
@@ -1,3 +1,1 @@
-{
-  "presets": ["es2015"]
-}
\ No newline at end of file
+{}
\ No newline at end of file
diff --git a/devtools/client/webconsole/bin/configure.js b/devtools/client/webconsole/bin/configure.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/bin/configure.js
@@ -0,0 +1,29 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/* eslint-env node */
+
+"use strict";
+
+const fs = require("fs");
+const path = require("path");
+
+function getConfig() {
+  if (process.env.TARGET === "firefox-panel") {
+    return require("../configs/firefox-panel.json");
+  }
+
+  const developmentConfig = require("../configs/development.json");
+
+  let localConfig = {};
+  if (fs.existsSync(path.resolve(__dirname, "../configs/local.json"))) {
+    localConfig = require("../configs/local.json");
+  }
+
+  return Object.assign({}, developmentConfig, localConfig);
+}
+
+module.exports = {
+  getConfig,
+};
diff --git a/devtools/client/webconsole/bin/dev-server.js b/devtools/client/webconsole/bin/dev-server.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/bin/dev-server.js
@@ -0,0 +1,19 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/* eslint-env node */
+
+"use strict";
+
+const toolbox = require("devtools-launchpad/index");
+const feature = require("devtools-config");
+const { getConfig } = require("./configure");
+
+const envConfig = getConfig();
+
+feature.setConfig(envConfig);
+
+let webpackConfig = require("../webpack.config");
+
+toolbox.startDevServer(envConfig, webpackConfig, __dirname);
diff --git a/devtools/client/webconsole/configs/development.json b/devtools/client/webconsole/configs/development.json
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/configs/development.json
@@ -0,0 +1,35 @@
+{
+  "title": "Console",
+  "environment": "development",
+  "baseWorkerURL": "http://localhost:8000/public/build/",
+  "host": "",
+  "theme": "light",
+  "dir": "ltr",
+  "features": {
+  },
+  "logging": {
+    "client": false,
+    "firefoxProxy": false,
+    "actions": false
+  },
+  "chrome": {
+    "debug": false,
+    "host": "localhost",
+    "port": 9222
+  },
+  "node": {
+    "debug": false,
+    "host": "localhost",
+    "port": 9229
+  },
+  "firefox": {
+    "webSocketConnection": false,
+    "proxyHost": "localhost:9000",
+    "webSocketHost": "localhost:6080",
+    "mcPath": "./firefox"
+  },
+  "development": {
+    "serverPort": 8000,
+    "examplesPort": 7999
+  }
+}
diff --git a/devtools/client/webconsole/local-dev/index.js b/devtools/client/webconsole/local-dev/index.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/local-dev/index.js
@@ -0,0 +1,115 @@
+const React = require("react");
+
+const { bindActionCreators, combineReducers } = require("redux");
+const ReactDOM = require("react-dom");
+const { EventEmitter } = require("devtools-modules");
+
+const {
+   bootstrap, L10N
+} = require("devtools-launchpad");
+
+const { getValue, isFirefoxPanel } = require("devtools-config");
+
+const { Services: { appinfo, pref }} = require("devtools-modules");
+
+EventEmitter.decorate(window);
+
+require("../../themes/new-webconsole.css");
+
+pref("devtools.debugger.remote-timeout", 10000);
+pref("devtools.hud.loglimit", 1000);
+pref("devtools.webconsole.filter.error", true);
+pref("devtools.webconsole.filter.warn", true);
+pref("devtools.webconsole.filter.info", true);
+pref("devtools.webconsole.filter.log", true);
+pref("devtools.webconsole.filter.debug", true);
+pref("devtools.webconsole.filter.css", false);
+pref("devtools.webconsole.filter.net", false);
+pref("devtools.webconsole.filter.netxhr", false);
+pref("devtools.webconsole.ui.filterbar", false);
+pref("devtools.webconsole.inputHistoryCount", 50);
+pref("devtools.webconsole.persistlog", false);
+pref("devtools.webconsole.timestampMessages", false);
+pref("devtools.webconsole.autoMultiline", true);
+
+const NewConsoleOutputWrapper = require("../new-console-output/new-console-output-wrapper");
+const NewWebConsoleFrame = require("../new-webconsole").NewWebConsoleFrame;
+
+// this.experimentalOutputNode, this.jsterm, toolbox, this.owner, this.document
+const el = document.createElement("div");
+el.style.flex = "1";
+el.innerHTML = `
+  <div id="app-wrapper" class="theme-body">
+    <div id="output-container" role="document" aria-live="polite" />
+  </div>
+`;
+document.querySelector("#mount").appendChild(el);
+
+if (!isFirefoxPanel()) {
+  L10N.setBundle(require("./strings.js"));
+  window.l10n = L10N;
+}
+
+/**
+ * Stylesheet links in devtools xhtml files are using chrome or resource URLs.
+ * Rewrite the href attribute to remove the protocol. web-server.js contains redirects
+ * to map CSS urls to the proper file. Supports urls using:
+ *   - devtools/client/
+ *   - devtools/content/
+ *   - skin/
+ * Will also add mandatory classnames and attributes to be compatible with devtools theme
+ * stylesheet.
+ */
+window.addEventListener("DOMContentLoaded", () => {
+  for (let link of document.head.querySelectorAll("link")) {
+    link.href = link.href.replace(/(resource|chrome)\:\/\//, "/");
+  }
+
+  if (appinfo.OS === "Darwin") {
+    document.documentElement.setAttribute("platform", "mac");
+  } else if (appinfo.OS === "Linux") {
+    document.documentElement.setAttribute("platform", "linux");
+  } else {
+    document.documentElement.setAttribute("platform", "win");
+  }
+});
+
+
+let consoleFrame;
+
+function onConnect(connection = {}) {
+  // XXX: Handle this on dashboard screen
+  if (!connection.tabConnection) {
+    return;
+  }
+
+  let tabTarget = connection.tabConnection.tabTarget;
+  if (!tabTarget) {
+    return;
+  }
+  console.log("onConnect", connection, tabTarget);
+
+  const owner = {
+    iframeWindow: window,
+    chromeWindow: window,
+    hudId: "hud_0",
+    target: tabTarget,
+    _browserConsole: false,
+    NewConsoleOutputWrapper,
+  };
+  consoleFrame = new NewWebConsoleFrame(owner);
+  consoleFrame.init().then(function() {
+    console.log("NewWebConsoleFrame initialized");
+  });
+}
+
+const toolbox = {}
+
+window.eval = function(input) {
+  consoleFrame.webConsoleClient.evaluateJSAsync(`${input}`, function(r) {
+    consoleFrame.newConsoleOutput.dispatchMessageAdd(r);
+  }, {});
+}
+
+bootstrap(React, ReactDOM, el)
+  .then(onConnect);
diff --git a/devtools/client/webconsole/local-dev/jsterm-stub.js b/devtools/client/webconsole/local-dev/jsterm-stub.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/local-dev/jsterm-stub.js
@@ -0,0 +1,12 @@
+
+function JSTerm(webConsoleFrame) {
+  this.hud = webConsoleFrame;
+  this.hudId = this.hud.hudId;
+  this.historyLoaded = new Promise(r => {
+    r();
+  });
+  this.openVariablesView = () => { };
+  this.init = () => { };
+}
+
+module.exports.JSTerm = JSTerm;
diff --git a/devtools/client/webconsole/local-dev/strings.js b/devtools/client/webconsole/local-dev/strings.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/local-dev/strings.js
@@ -0,0 +1,55 @@
+module.exports = {
+  "frame.unknownSource":"(unknown)",
+  "timestampFormat":"%02S:%02S:%02S.%03S",
+  "helperFuncUnsupportedTypeError":"Canâ€™t call pprint on this type of object.",
+  "NetworkPanel.durationMS":"%Sms",
+  "ConsoleAPIDisabled":"The Web Console logging API (console.log, console.info, console.warn, console.error) has been disabled by a script on this page.",
+  "webConsoleWindowTitleAndURL":"Web Console - %S",
+  "webConsoleXhrIndicator":"XHR",
+  "webConsoleMixedContentWarning":"Mixed Content",
+  "webConsoleMoreInfoLabel":"Learn More",
+  "scratchpad.linkText":"Shift+RETURN - Open in Scratchpad",
+  "reflow.messageWithNoLink":"reflow: %Sms",
+  "reflow.messageWithLink":"reflow: %Sms\u0020",
+  "reflow.messageLinkText":"function %1$S, %2$S line %3$S",
+  "stacktrace.anonymousFunction":"<anonymous>",
+  "stacktrace.asyncStack":"(Async: %S)",
+  "timerStarted":"%S: timer started",
+  "timeEnd":"%1$S: %2$Sms",
+  "consoleCleared":"Console was cleared.",
+  "noCounterLabel":"<no label>",
+  "noGroupLabel":"<no group label>",
+  "Autocomplete.blank":"  <- no result",
+  "maxTimersExceeded":"The maximum allowed number of timers in this page was exceeded.",
+  "maxCountersExceeded":"The maximum allowed number of counters in this page was exceeded.",
+  "longStringEllipsis":"[â€¦]",
+  "longStringTooLong":"The string you are trying to view is too long to be displayed by the Web Console.",
+  "connectionTimeout":"Connection timeout. Check the Error Console on both ends for potential error messages. Reopen the Web Console to try again.",
+  "propertiesFilterPlaceholder":"Filter properties",
+  "emptyPropertiesList":"No properties to display",
+  "messageRepeats.tooltip2":"#1 repeat;#1 repeats",
+  "openNodeInInspector":"Click to select the node in the inspector",
+  "cdFunctionInvalidArgument":"Cannot cd() to the given window. Invalid argument.",
+  "selfxss.msg":"Scam Warning: Take care when pasting things you donâ€™t understand. This could allow attackers to steal your identity or take control of your computer. Please type â€˜%Sâ€™ below (no need to press enter) to allow pasting.",
+  "selfxss.okstring":"allow pasting",
+  "messageToggleDetails":"Show/hide message details.",
+  "groupToggle":"Show/hide group.",
+  "emptySlotLabel":"#1 empty slot;#1 empty slots",
+  "table.index":"(index)",
+  "table.iterationIndex":"(iteration index)",
+  "table.key":"Key",
+  "table.value":"Values",
+  "severity.error":"Error",
+  "severity.warn":"Warning",
+  "severity.info":"Info",
+  "severity.log":"Log",
+  "level.error":"Error",
+  "level.warn":"Warning",
+  "level.info":"Info",
+  "level.log":"Log",
+  "level.debug":"Debug",
+  "webconsole.find.key":"CmdOrCtrl+F",
+  "webconsole.close.key":"CmdOrCtrl+W",
+  "webconsole.clear.key":"Ctrl+Shift+L",
+  "webconsole.clear.keyOSX":"Ctrl+L",
+}
diff --git a/devtools/client/webconsole/new-console-output/actions/index.js b/devtools/client/webconsole/new-console-output/actions/index.js
--- a/devtools/client/webconsole/new-console-output/actions/index.js
+++ b/devtools/client/webconsole/new-console-output/actions/index.js
@@ -2,17 +2,17 @@
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const actionModules = [
-  "enhancers",
-  "filters",
-  "messages",
-  "ui",
-].map(filename => require(`./${filename}`));
+  require("./enhancers"),
+  require("./filters"),
+  require("./messages"),
+  require("./ui"),
+];
 
 const actions = Object.assign({}, ...actionModules);
 
 module.exports = actions;
diff --git a/devtools/client/webconsole/new-console-output/test/fixtures/WebConsoleUtils.js b/devtools/client/webconsole/new-console-output/test/fixtures/WebConsoleUtils.js
--- a/devtools/client/webconsole/new-console-output/test/fixtures/WebConsoleUtils.js
+++ b/devtools/client/webconsole/new-console-output/test/fixtures/WebConsoleUtils.js
@@ -1,14 +1,17 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
 const L10n = require("devtools/client/webconsole/new-console-output/test/fixtures/L10n");
 
 const Utils = {
-  L10n
+  L10n,
+  supportsString: function(s) {
+    return s;
+  }
 };
 
 module.exports = {
   Utils
 };
diff --git a/devtools/client/webconsole/new-webconsole.js b/devtools/client/webconsole/new-webconsole.js
--- a/devtools/client/webconsole/new-webconsole.js
+++ b/devtools/client/webconsole/new-webconsole.js
@@ -1,34 +1,31 @@
 /* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
-const {Cc, Ci, Cu} = require("chrome");
-
 const {Utils: WebConsoleUtils, CONSOLE_WORKER_IDS} =
   require("devtools/client/webconsole/utils");
 const { getSourceNames } = require("devtools/client/shared/source-utils");
-const BrowserLoaderModule = {};
-Cu.import("resource://devtools/client/shared/browser-loader.js", BrowserLoaderModule);
+const EventEmitter = require("devtools/shared/event-emitter");
 
 const promise = require("promise");
+const defer = require("devtools/shared/defer");
 const Services = require("Services");
-const Telemetry = require("devtools/client/shared/telemetry");
-loader.lazyRequireGetter(this, "EventEmitter", "devtools/shared/event-emitter");
-loader.lazyRequireGetter(this, "JSTerm", "devtools/client/webconsole/jsterm", true);
-loader.lazyRequireGetter(this, "gDevTools", "devtools/client/framework/devtools", true);
-loader.lazyRequireGetter(this, "WebConsoleConnectionProxy", "devtools/client/webconsole/webconsole-connection-proxy", true);
+const { gDevTools } = require("devtools/client/framework/devtools");
+const { JSTerm } = require("devtools/client/webconsole/jsterm");
+const { WebConsoleConnectionProxy }= require("devtools/client/webconsole/webconsole-connection-proxy");
 
 const PREF_MESSAGE_TIMESTAMP = "devtools.webconsole.timestampMessages";
 
+
 /**
  * A WebConsoleFrame instance is an interactive console initialized *per target*
  * that displays console log data as well as provides an interactive terminal to
  * manipulate the target's document content.
  *
  * The WebConsoleFrame is responsible for the actual Web Console UI
  * implementation.
  *
@@ -73,30 +70,32 @@ NewWebConsoleFrame.prototype = {
       return connectionInited;
     });
 
     // This notification is only used in tests. Don't chain it onto
     // the returned promise because the console panel needs to be attached
     // to the toolbox before the web-console-created event is receieved.
     let notifyObservers = () => {
       let id = WebConsoleUtils.supportsString(this.hudId);
-      Services.obs.notifyObservers(id, "web-console-created");
+      if (Services.obs) {
+        Services.obs.notifyObservers(id, "web-console-created");
+      }
     };
     allReady.then(notifyObservers, notifyObservers)
             .then(this.newConsoleOutput.init);
 
     return allReady;
   },
 
   destroy: function() {
     if (this._destroyer) {
       return this._destroyer.promise;
     }
 
-    this._destroyer = promise.defer();
+    this._destroyer = defer();
 
     Services.prefs.addObserver(PREF_MESSAGE_TIMESTAMP, this._onToolboxPrefChanged);
     this.React = this.ReactDOM = this.FrameView = null;
 
     let onDestroy = () => {
       this._destroyer.resolve(null);
     };
     if (this.proxy) {
@@ -104,16 +103,19 @@ NewWebConsoleFrame.prototype = {
       this.proxy = null;
     } else {
       onDestroy();
     }
 
     return this._destroyer.promise;
   },
 
+  setSaveRequestAndResponseBodies: function() {
+
+  },
 
   _onUpdateListeners: function () {
 
   },
 
   /**
    * Setter for saving of network request and response bodies.
    *
@@ -121,17 +123,17 @@ NewWebConsoleFrame.prototype = {
    *        The new value you want to set.
    */
   setSaveRequestAndResponseBodies: function (value) {
     if (!this.webConsoleClient) {
       // Don't continue if the webconsole disconnected.
       return promise.resolve(null);
     }
 
-    let deferred = promise.defer();
+    let deferred = defer();
     let newValue = !!value;
     let toSet = {
       "NetworkMonitor.saveRequestAndResponseBodies": newValue,
     };
 
     // Make sure the web console client connection is established first.
     this.webConsoleClient.setPreferences(toSet, response => {
       if (!response.error) {
@@ -153,17 +155,17 @@ NewWebConsoleFrame.prototype = {
    *         A promise object that is resolved/reject based on the connection
    *         result.
    */
   _initConnection: function () {
     if (this._initDefer) {
       return this._initDefer.promise;
     }
 
-    this._initDefer = promise.defer();
+    this._initDefer = defer();
     this.proxy = new WebConsoleConnectionProxy(this, this.owner.target);
 
     this.proxy.connect().then(() => {
       // on success
       this._initDefer.resolve(this);
     }, (reason) => {
       // on failure
       // TODO Print a message to console
@@ -176,31 +178,29 @@ NewWebConsoleFrame.prototype = {
   _initUI: function() {
     this.document = this.window.document;
     this.rootElement = this.document.documentElement;
 
     this.outputNode = this.document.getElementById("output-container");
     this.completeNode = this.document.querySelector(".jsterm-complete-node");
     this.inputNode = this.document.querySelector(".jsterm-input-node");
 
-    // Update the character width and height needed for the popup offset
-    // calculations.
-    this._updateCharSize();
-
     this.jsterm = new JSTerm(this);
     this.jsterm.init();
 
     let toolbox = gDevTools.getToolbox(this.owner.target);
 
     // @TODO Remove this once JSTerm is handled with React/Redux.
     this.window.jsterm = this.jsterm;
     // @TODO Once the toolbox has been converted to React, see if passing
     // in JSTerm is still necessary.
 
-    this.newConsoleOutput = new this.window.NewConsoleOutput(
+    // Handle both launchpad and toolbox loading
+    let wrapper = this.owner.NewConsoleOutputWrapper || this.window.NewConsoleOutput;
+    this.newConsoleOutput = new wrapper(
       this.outputNode, this.jsterm, toolbox, this.owner, this.document);
 
     // Toggle the timestamp on preference change
     Services.prefs.addObserver(PREF_MESSAGE_TIMESTAMP, this._onToolboxPrefChanged);
     this._onToolboxPrefChanged();
   },
 
   /**
@@ -263,36 +263,31 @@ NewWebConsoleFrame.prototype = {
     }
 
     if (event == "navigate" && !packet.nativeConsoleAPI) {
       // TODO: Not implemented - log about replaced API
       this.logWarningAboutReplacedAPI();
     }
   },
 
-  /**
-   * Calculates the width and height of a single character of the input box.
-   * This will be used in opening the popup at the correct offset.
-   *
-   * @private
-   */
-  _updateCharSize: function () {
-    let doc = this.document;
-    let tempLabel = doc.createElement("span");
-    let style = tempLabel.style;
-    style.position = "fixed";
-    style.padding = "0";
-    style.margin = "0";
-    style.width = "auto";
-    style.color = "transparent";
-    WebConsoleUtils.copyTextStyles(this.inputNode, tempLabel);
-    tempLabel.textContent = "x";
-    doc.documentElement.appendChild(tempLabel);
-    this._inputCharWidth = tempLabel.offsetWidth;
-    tempLabel.remove();
-    // Calculate the width of the chevron placed at the beginning of the input
-    // box. Remove 4 more pixels to accomodate the padding of the popup.
-    this._chevronWidth = +doc.defaultView.getComputedStyle(this.inputNode)
-                             .paddingLeft.replace(/[^0-9.]/g, "") - 4;
-  },
+  // TODO: Move this into jsterm
+  // _updateCharSize: function () {
+  //   let doc = this.document;
+  //   let tempLabel = doc.createElement("span");
+  //   let style = tempLabel.style;
+  //   style.position = "fixed";
+  //   style.padding = "0";
+  //   style.margin = "0";
+  //   style.width = "auto";
+  //   style.color = "transparent";
+  //   WebConsoleUtils.copyTextStyles(this.inputNode, tempLabel);
+  //   tempLabel.textContent = "x";
+  //   doc.documentElement.appendChild(tempLabel);
+  //   this._inputCharWidth = tempLabel.offsetWidth;
+  //   tempLabel.remove();
+  //   // Calculate the width of the chevron placed at the beginning of the input
+  //   // box. Remove 4 more pixels to accomodate the padding of the popup.
+  //   this._chevronWidth = +doc.defaultView.getComputedStyle(this.inputNode)
+  //                            .paddingLeft.replace(/[^0-9.]/g, "") - 4;
+  // },
 }
 
 exports.NewWebConsoleFrame = NewWebConsoleFrame;
diff --git a/devtools/client/webconsole/package.json b/devtools/client/webconsole/package.json
--- a/devtools/client/webconsole/package.json
+++ b/devtools/client/webconsole/package.json
@@ -1,21 +1,38 @@
 {
   "name": "webconsole",
   "version": "0.0.1",
-  "devDependencies": {
+  "engines": {
+    "node": ">=6.9.0"
+  },
+  "scripts": {
+    "start": "node bin/dev-server",
+    "postinstall": "cd ../ && npm install && cd webconsole",
+    "test": "cross-env NODE_PATH=../../../ mocha new-console-output/test/**/*.test.js --compilers js:babel-register -r jsdom-global/register -r ./new-console-output/test/require-helper.js"
+  },
+  "dependencies": {
     "amd-loader": "0.0.5",
     "babel-preset-es2015": "^6.6.0",
-    "babel-register": "^6.7.2",
+    "babel-register": "^6.24.0",
+    "file-loader": "^0.10.1",
     "cross-env": "^3.1.3",
     "enzyme": "^2.4.1",
     "expect": "^1.16.0",
     "jsdom": "^9.4.1",
     "jsdom-global": "^2.0.0",
     "mocha": "^2.5.3",
     "require-hacker": "^2.1.4",
-    "sinon": "^1.17.5"
-  },
-  "scripts": {
-    "postinstall": "cd ../ && npm install && cd webconsole",
-    "test": "cross-env NODE_PATH=../../../ mocha new-console-output/test/**/*.test.js --compilers js:babel-register -r jsdom-global/register -r ./new-console-output/test/require-helper.js"
+    "sinon": "^1.17.5",
+    "devtools-config": "=0.0.12",
+    "devtools-launchpad": "=0.0.67",
+    "devtools-modules": "=0.0.24",
+    "immutable": "^3.8.1",
+    "jszip": "^3.1.3",
+    "react": "=15.3.2",
+    "react-dom": "=15.3.2",
+    "react-redux": "=5.0.3",
+    "redux": "^3.6.0",
+    "reselect": "^2.5.4",
+    "raw-loader": "^0.5.1",
+    "json-loader": "^0.5.4"
   }
 }
diff --git a/devtools/client/webconsole/webconsole-connection-proxy.js b/devtools/client/webconsole/webconsole-connection-proxy.js
--- a/devtools/client/webconsole/webconsole-connection-proxy.js
+++ b/devtools/client/webconsole/webconsole-connection-proxy.js
@@ -1,24 +1,18 @@
 /* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
-const {Cc, Ci, Cu} = require("chrome");
-
-const {Utils: WebConsoleUtils} =
-  require("devtools/client/webconsole/utils");
-const BrowserLoaderModule = {};
-Cu.import("resource://devtools/client/shared/browser-loader.js", BrowserLoaderModule);
-
-const promise = require("promise");
+const {Utils: WebConsoleUtils} = require("devtools/client/webconsole/utils");
+const defer = require("devtools/shared/defer");
 const Services = require("Services");
 
 const STRINGS_URI = "devtools/client/locales/webconsole.properties";
 var l10n = new WebConsoleUtils.L10n(STRINGS_URI);
 
 const PREF_CONNECTION_TIMEOUT = "devtools.debugger.remote-timeout";
 // Web Console connection proxy
 
@@ -122,28 +116,30 @@ WebConsoleConnectionProxy.prototype = {
    *         A promise object that is resolved/rejected based on the success of
    *         the connection initialization.
    */
   connect: function () {
     if (this._connectDefer) {
       return this._connectDefer.promise;
     }
 
-    this._connectDefer = promise.defer();
+    this._connectDefer = defer();
 
     let timeout = Services.prefs.getIntPref(PREF_CONNECTION_TIMEOUT);
-    this._connectTimer = Cc["@mozilla.org/timer;1"].createInstance(Ci.nsITimer);
-    this._connectTimer.initWithCallback(this._connectionTimeout,
-                                        timeout, Ci.nsITimer.TYPE_ONE_SHOT);
+    this._connectTimer = setTimeout(this._connectionTimeout, timeout);
+    // this._connectTimer = Cc["@mozilla.org/timer;1"].createInstance(Ci.nsITimer);
+    // this._connectTimer.initWithCallback(this._connectionTimeout,
+    //                                     timeout, Ci.nsITimer.TYPE_ONE_SHOT);
 
     let connPromise = this._connectDefer.promise;
     connPromise.then(() => {
-      this._connectTimer.cancel();
+      clearTimeout(this._connectTimer);
       this._connectTimer = null;
     }, () => {
+      clearTimeout(this._connectTimer);
       this._connectTimer = null;
     });
 
     let client = this.client = this.target.client;
 
     client.addListener("logMessage", this._onLogMessage);
     client.addListener("pageError", this._onPageError);
     client.addListener("consoleAPICall", this._onConsoleAPICall);
@@ -495,17 +491,17 @@ WebConsoleConnectionProxy.prototype = {
    * @return object
    *         A promise object that is resolved when disconnect completes.
    */
   disconnect: function () {
     if (this._disconnecter) {
       return this._disconnecter.promise;
     }
 
-    this._disconnecter = promise.defer();
+    this._disconnecter = defer();
 
     if (!this.client) {
       this._disconnecter.resolve(null);
       return this._disconnecter.promise;
     }
 
     this.client.removeListener("logMessage", this._onLogMessage);
     this.client.removeListener("pageError", this._onPageError);
diff --git a/devtools/client/webconsole/webpack.config.js b/devtools/client/webconsole/webpack.config.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/webpack.config.js
@@ -0,0 +1,144 @@
+// /* This Source Code Form is subject to the terms of the Mozilla Public
+//  * License, v. 2.0. If a copy of the MPL was not distributed with this
+//  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+const {toolboxConfig} = require("./node_modules/devtools-launchpad/index");
+const { NormalModuleReplacementPlugin } = require("webpack");
+const {getConfig} = require("./bin/configure");
+
+const path = require("path");
+const projectPath = path.join(__dirname, "local-dev");
+
+function buildConfig(envConfig) {
+  let webpackConfig = {
+    entry: {
+      console: [path.join(projectPath, "index.js")],
+    },
+
+    module: {
+      loaders: [
+        {
+          test: /\.(png|svg)$/,
+          loader: "file-loader?name=[path][name].[ext]",
+        },
+      ]
+    },
+
+    output: {
+      path: path.join(__dirname, "assets/build"),
+      filename: "[name].js",
+      publicPath: "/assets/build",
+    },
+
+    externals: [
+      {
+        "promise": "var Promise",
+      }
+    ],
+  };
+
+  webpackConfig.resolve = {
+    alias: {
+      "devtools/client/webconsole/new-console-output": path.join(__dirname, "new-console-output"),
+      "devtools/client/webconsole/webconsole-connection-proxy": path.join(__dirname, "webconsole-connection-proxy"),
+      "devtools/client/framework/devtools": path.join(__dirname, "../../client/shims/devtools"),
+      "react": path.join(__dirname, "node_modules/react"),
+      "devtools/client/shared/vendor/immutable": "immutable",
+      "devtools/client/shared/vendor/react": "react",
+      "devtools/client/shared/vendor/react-dom": "react-dom",
+      "devtools/client/shared/vendor/react-redux": "react-redux",
+      "devtools/client/shared/vendor/redux": "redux",
+      "devtools/client/locales": path.join(__dirname, "../../client/locales/en-US"),
+      "devtools/client/shared/": path.join(__dirname, "../../client/shared/"),
+      "devtools/client/framework/menu": "devtools-modules/client/framework/menu",
+      "devtools/client/framework/menu-item": path.join(__dirname, "../../client/framework/menu-item"),
+      "devtools/client/shared/components/reps/reps": path.join(__dirname, "../../client/shared/components/reps/reps"),
+      "devtools/client/shared/redux/middleware/thunk": path.join(__dirname, "../../client/shared/redux/middleware/thunk"),
+      "devtools/client/shared/components/stack-trace": path.join(__dirname, "../../client/shared/components/stack-trace"),
+      "devtools/client/shared/prefs": path.join(__dirname, "../../client/shared/prefs"),
+      "devtools/client/shared/source-utils": path.join(__dirname, "../../client/shared/source-utils"),
+      "devtools/shared/defer": path.join(__dirname, "../../shared/defer"),
+      "devtools/shared/event-emitter": "devtools-modules/shared/event-emitter",
+      "devtools/shared/fronts/timeline": path.join(__dirname, "../../shared/shims/fronts/timeline"),
+      "devtools/shared/l10n": path.join(__dirname, "../../shared/l10n"),
+      "devtools/shared/locales": path.join(__dirname, "../../shared/locales/en-US"),
+      "devtools/shared/platform/clipboard": path.join(__dirname, "../../shared/platform/content/clipboard"),
+      "devtools/shared/plural-form": path.join(__dirname, "../../shared/plural-form"),
+      "devtools/shared/task": path.join(__dirname, "../../shared/task"),
+      "toolkit/locales": path.join(__dirname, "../../../toolkit/locales/en-US"),
+      "Services": "devtools-modules/client/shared/shim/Services",
+      "devtools/client/shared/components/reps/reps": path.join(__dirname, "../../client/shared/components/reps/reps"),
+      "devtools/client/shared/components/frame": path.join(__dirname, "../../client/shared/components/frame"),
+
+      "devtools/client/webconsole/jsterm": path.join(projectPath, "jsterm-stub"),
+
+      // "modules/libpref/init/all":
+      //   path.join(__dirname, "../../../modules/libpref/init/all.js"),
+      // "devtools/client/preferences/devtools": path.join(__dirname, "../preferences/devtools.js"),
+      // "devtools/client/preferences/debugger": path.join(__dirname, "../preferences/debugger.js"),
+      // "Services": path.join(__dirname, "../shared/shim/Services.js"),
+      // "toolkit/locales":
+      //   path.join(__dirname, "../../../toolkit/locales/en-US/chrome/global"),
+
+      // // these path aliases are incredibly stupid and WILL be replaced soon
+      "devtools/client/webconsole/utils": path.join(__dirname, "new-console-output/test/fixtures/WebConsoleUtils"),
+      // "devtools/shared/client/main": path.join(projectPath, "lib/main.js"),
+      "devtools/shared/client/main": path.join(__dirname, "new-console-output/test/fixtures/ObjectClient"),
+      "devtools/client/locales/components.properties": path.join(__dirname, "../../client/locales/components.properties"),
+      // "devtools/client/shared/source-utils": path.join(projectPath, "lib/source-utils"),
+    }
+  };
+
+
+  const mappings = [
+    [
+      /utils\/menu/, "devtools-launchpad/src/components/shared/menu"
+    ],
+    [
+      /chrome:\/\/devtools\/skin/,
+      (result) => {
+        result.request = result.request
+          .replace("./chrome://devtools/skin", path.join(__dirname, "../themes"));
+      }
+    ],
+    [
+      /chrome:\/\/devtools\/content/,
+      (result) => {
+        result.request = result.request
+          .replace("./chrome://devtools/content", path.join(__dirname, ".."));
+      }
+    ],
+    [
+      /resource:\/\/devtools/,
+      (result) => {
+        result.request = result.request
+          .replace("./resource://devtools/client", path.join(__dirname, ".."));
+      }
+    ],
+  ];
+
+  webpackConfig.plugins = mappings.map(([regex, res]) =>
+    new NormalModuleReplacementPlugin(regex, res));
+
+  // Exclude to transpile all scripts in devtools/ but not for this folder
+  const basePath = path.join(__dirname, "../../").replace(/\\/g, "\\\\");
+  const baseName = path.basename(__dirname);
+  webpackConfig.babelExcludes = new RegExp(`^${basePath}(.(?!${baseName}))*$`);
+
+  let config = toolboxConfig(webpackConfig, envConfig);
+
+  // Remove loaders from devtools-launchpad's webpack.config.js
+  // * For svg-inline loader:
+  //   Netmonitor uses file loader to bundle image assets instead of svg-inline loader
+  // * For raw loader:
+  //   devtools/shared/l10n has preloaded raw loader in require.context
+  config.module.loaders = config.module.loaders
+    .filter((loader) => !["svg-inline", "raw"].includes(loader.loader));
+
+  return config;
+}
+
+
+const envConfig = getConfig();
+module.exports = buildConfig(envConfig)
+
diff --git a/devtools/shared/l10n.js b/devtools/shared/l10n.js
--- a/devtools/shared/l10n.js
+++ b/devtools/shared/l10n.js
@@ -83,17 +83,18 @@ LocalizationHelper.prototype = {
    * @return string
    */
   getStr: function (name) {
     let properties = getProperties(this.stringBundleName);
     if (name in properties) {
       return properties[name];
     }
 
-    throw new Error("No localization found for [" + name + "]");
+    return "TODO FIX THIS";
+    //throw new Error("No localization found for [" + name + "]");
   },
 
   /**
    * L10N shortcut function.
    *
    * @param string name
    * @param array args
    * @return string
