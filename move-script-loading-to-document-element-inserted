# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  4440fbf71c72e13cfcb6257bbae6024052ffd46d

diff --git a/browser/base/content/browser.xul b/browser/base/content/browser.xul
--- a/browser/base/content/browser.xul
+++ b/browser/base/content/browser.xul
@@ -71,68 +71,16 @@
         sizemode="normal"
         retargetdocumentfocus="urlbar"
         persist="screenX screenY width height sizemode"
 #ifdef BROWSER_XHTML
         hidden="true"
         mozpersist=""
 #endif
         >
-
-# All JS files which are needed by browser.xul and other top level windows to
-# support MacOS specific features *must* go into the global-scripts.inc file so
-# that they can be shared with macWindow.inc.xul.
-#include global-scripts.inc
-
-<script type="application/javascript"
-#ifdef BROWSER_XHTML
-xmlns="http://www.w3.org/1999/xhtml"
-#endif
->
-  Services.scriptloader.loadSubScript("chrome://global/content/contentAreaUtils.js", this);
-  Services.scriptloader.loadSubScript("chrome://browser/content/browser-captivePortal.js", this);
-  Services.scriptloader.loadSubScript("chrome://browser/content/browser-compacttheme.js", this);
-  Services.scriptloader.loadSubScript("chrome://browser/content/browser-contentblocking.js", this);
-#ifdef MOZ_DATA_REPORTING
-  Services.scriptloader.loadSubScript("chrome://browser/content/browser-data-submission-info-bar.js", this);
-#endif
-#ifndef MOZILLA_OFFICIAL
-  Services.scriptloader.loadSubScript("chrome://browser/content/browser-development-helpers.js", this);
-#endif
-  Services.scriptloader.loadSubScript("chrome://browser/content/browser-media.js", this);
-  Services.scriptloader.loadSubScript("chrome://browser/content/browser-pageActions.js", this);
-  Services.scriptloader.loadSubScript("chrome://browser/content/browser-plugins.js", this);
-  Services.scriptloader.loadSubScript("chrome://browser/content/browser-sidebar.js", this);
-  Services.scriptloader.loadSubScript("chrome://browser/content/browser-tabsintitlebar.js", this);
-  Services.scriptloader.loadSubScript("chrome://browser/content/tabbrowser.js", this);
-  Services.scriptloader.loadSubScript("chrome://browser/content/search/searchbar.js", this);
-
-  window.onload = gBrowserInit.onLoad.bind(gBrowserInit);
-  window.onunload = gBrowserInit.onUnload.bind(gBrowserInit);
-  window.onclose = WindowIsClosing;
-
-#ifdef BROWSER_XHTML
-  window.addEventListener("readystatechange", () => {
-    // We initially hide the window to prevent layouts during parse. This lets us
-    // avoid accidental XBL construction and better match browser.xul (see Bug 1497975).
-    gBrowserInit.onBeforeInitialXULLayout();
-    document.documentElement.removeAttribute("hidden");
-  }, { once: true, capture: true });
-#else
-  window.addEventListener("MozBeforeInitialXULLayout",
-    gBrowserInit.onBeforeInitialXULLayout.bind(gBrowserInit), { once: true });
-#endif
-  // The listener of DOMContentLoaded must be set on window, rather than
-  // document, because the window can go away before the event is fired.
-  // In that case, we don't want to initialize anything, otherwise we
-  // may be leaking things because they will never be destroyed after.
-  window.addEventListener("DOMContentLoaded",
-    gBrowserInit.onDOMContentLoaded.bind(gBrowserInit), { once: true });
-</script>
-
 # All sets except for popupsets (commands, keys, and stringbundles)
 # *must* go into the browser-sets.inc file so that they can be shared with other
 # top level windows in macWindow.inc.xul.
 #include browser-sets.inc
 
   <popupset id="mainPopupSet">
     <menupopup id="tabContextMenu"
                onpopupshowing="if (event.target == this) TabContextMenu.updateContextMenu(this);"
diff --git a/browser/base/content/macWindow.inc.xul b/browser/base/content/macWindow.inc.xul
--- a/browser/base/content/macWindow.inc.xul
+++ b/browser/base/content/macWindow.inc.xul
@@ -5,21 +5,16 @@
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 # This include file should only contain things that are needed to support MacOS
 # specific features that are needed for all top level windows. If the feature is
 # also needed in browser.xul, it should go in one of the various include files
 # below that are shared with browser.xul. When including this file,
 # browser-doctype.inc must also be included.
 
-# All JS files which are needed by browser.xul and other top level windows to
-# support MacOS specific features *must* go into the global-scripts.inc file so
-# that they can be shared with browser.xul.
-#include global-scripts.inc
-
 <script type="application/javascript" src="chrome://browser/content/nonbrowser-mac.js"></script>
 
 # All sets except for popupsets (commands, keys, and stringbundles)
 # *must* go into the browser-sets.inc file so that they can be shared with
 # browser.xul
 #include browser-sets.inc
 
 # The entire main menubar is placed into browser-menubar.inc, so that it can be
diff --git a/toolkit/components/processsingleton/CustomElementsListener.jsm b/toolkit/components/processsingleton/CustomElementsListener.jsm
--- a/toolkit/components/processsingleton/CustomElementsListener.jsm
+++ b/toolkit/components/processsingleton/CustomElementsListener.jsm
@@ -1,23 +1,85 @@
 /* -*-  indent-tabs-mode: nil; js-indent-level: 2 -*- */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
-const {Services} = ChromeUtils.import("resource://gre/modules/Services.jsm");
+ const {Services} = ChromeUtils.import("resource://gre/modules/Services.jsm");
+ const {AppConstants} = ChromeUtils.import("resource://gre/modules/AppConstants.jsm");
 
 // Set up Custom Elements for XUL and XHTML documents before anything else
 // happens. Anything loaded here should be considered part of core XUL functionality.
 // Any window-specific elements can be registered via <script> tags at the
 // top of individual documents.
 Services.obs.addObserver({
   observe(doc) {
     if (doc.nodePrincipal.isSystemPrincipal && (
       doc.contentType == "application/vnd.mozilla.xul+xml" ||
       doc.contentType == "application/xhtml+xml" ||
       doc.contentType == "text/html"
     )) {
+      let win = doc.ownerGlobal;
       Services.scriptloader.loadSubScript(
-        "chrome://global/content/customElements.js", doc.ownerGlobal);
+        "chrome://global/content/customElements.js", win);
+
+      let isBrowserChromeWindow = doc.documentURI === AppConstants.BROWSER_CHROME_URL;
+      let isBrowserXHTML = AppConstants.BROWSER_CHROME_URL == "chrome://browser/content/browser.xhtml";
+      let isHiddenXULWindow = doc.documentURI === "chrome://browser/content/hiddenWindow.xul";
+      if (isBrowserChromeWindow || isHiddenXULWindow) {
+
+        Services.scriptloader.loadSubScript("chrome://browser/content/browser.js", win);
+        Services.scriptloader.loadSubScript("chrome://browser/content/browser-places.js", win);
+        Services.scriptloader.loadSubScript("chrome://global/content/globalOverlay.js", win);
+        Services.scriptloader.loadSubScript("chrome://browser/content/utilityOverlay.js", win);
+
+        if (AppConstants.platform == "macosx") {
+          Services.scriptloader.loadSubScript("chrome://global/content/macWindowMenu.js", win);
+        }
+
+        if (isBrowserChromeWindow) {
+          Services.scriptloader.loadSubScript("chrome://global/content/contentAreaUtils.js", win);
+          Services.scriptloader.loadSubScript("chrome://browser/content/browser-captivePortal.js", win);
+          Services.scriptloader.loadSubScript("chrome://browser/content/browser-compacttheme.js", win);
+          Services.scriptloader.loadSubScript("chrome://browser/content/browser-contentblocking.js", win);
+          if (AppConstants.MOZ_DATA_REPORTING) {
+            Services.scriptloader.loadSubScript("chrome://browser/content/browser-data-submission-info-bar.js", win);
+          }
+          if (!AppConstants.MOZILLA_OFFICIAL) {
+            Services.scriptloader.loadSubScript("chrome://browser/content/browser-development-helpers.js", win);
+          }
+          Services.scriptloader.loadSubScript("chrome://browser/content/browser-media.js", win);
+          Services.scriptloader.loadSubScript("chrome://browser/content/browser-pageActions.js", win);
+          Services.scriptloader.loadSubScript("chrome://browser/content/browser-plugins.js", win);
+          Services.scriptloader.loadSubScript("chrome://browser/content/browser-sidebar.js", win);
+          Services.scriptloader.loadSubScript("chrome://browser/content/browser-tabsintitlebar.js", win);
+          Services.scriptloader.loadSubScript("chrome://browser/content/tabbrowser.js", win);
+          Services.scriptloader.loadSubScript("chrome://browser/content/search/searchbar.js", win);
+
+          win.onload = win.gBrowserInit.onLoad.bind(win.gBrowserInit);
+          win.onunload = win.gBrowserInit.onUnload.bind(win.gBrowserInit);
+          win.onclose = win.WindowIsClosing;
+
+          if (isBrowserXHTML) {
+            win.addEventListener("readystatechange", () => {
+              // We initially hide the window to prevent layouts during parse. This lets us
+              // avoid accidental XBL construction and better match browser.xul (see Bug 1497975).
+              win.gBrowserInit.onBeforeInitialXULLayout();
+              win.document.documentElement.removeAttribute("hidden");
+            }, { once: true, capture: true });
+          }
+          else {
+            win.addEventListener("MozBeforeInitialXULLayout",
+              win.gBrowserInit.onBeforeInitialXULLayout.bind(win.gBrowserInit), { once: true });
+          }
+          // The listener of DOMContentLoaded must be set on window, rather than
+          // document, because the window can go away before the event is fired.
+          // In that case, we don't want to initialize anything, otherwise we
+          // may be leaking things because they will never be destroyed after.
+          win.addEventListener("DOMContentLoaded",
+            win.gBrowserInit.onDOMContentLoaded.bind(win.gBrowserInit), { once: true });
+
+
+        }
+      }
     }
   },
 }, "document-element-inserted");
