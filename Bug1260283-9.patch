# vim: se ft=diff :
# HG changeset patch
# User Nicolas Chevobbe <chevobbe.nicolas@gmail.com>
# Date 2016-04-29 13:18
# Parent  acae2ad2014423f45cbb8112c09946d5c23e4604
Bug 1260283 - Implement new console output frontend behind a pref. r=linclark

MozReview-Commit-ID: 77qsML4CXlh

diff --git a/devtools/client/preferences/devtools.js b/devtools/client/preferences/devtools.js
--- a/devtools/client/preferences/devtools.js
+++ b/devtools/client/preferences/devtools.js
@@ -291,16 +291,19 @@ pref("devtools.webconsole.persistlog", f
 // in the Web Console to display a timestamp, or |false| to not display
 // any timestamps.
 pref("devtools.webconsole.timestampMessages", false);
 
 // Web Console automatic multiline mode: |true| if you want incomplete statements
 // to automatically trigger multiline editing (equivalent to shift + enter).
 pref("devtools.webconsole.autoMultiline", true);
 
+// Enable the experimental webconsole frontend (work in progress)
+pref("devtools.webconsole.new-frontend-enabled", false);
+
 // The number of lines that are displayed in the web console for the Net,
 // CSS, JS and Web Developer categories. These defaults should be kept in sync
 // with DEFAULT_LOG_LIMIT in the webconsole frontend.
 pref("devtools.hud.loglimit.network", 1000);
 pref("devtools.hud.loglimit.cssparser", 1000);
 pref("devtools.hud.loglimit.exception", 1000);
 pref("devtools.hud.loglimit.console", 1000);
 
diff --git a/devtools/client/webconsole/jsterm.js b/devtools/client/webconsole/jsterm.js
--- a/devtools/client/webconsole/jsterm.js
+++ b/devtools/client/webconsole/jsterm.js
@@ -367,17 +367,17 @@ JSTerm.prototype = {
     // Hide undefined results coming from JSTerm helper functions.
     if (!errorMessage && result && typeof result == "object" &&
         result.type == "undefined" &&
         helperResult && !helperHasRawOutput) {
       callback && callback();
       return;
     }
 
-    if (this.hud.SUPER_FRONTEND_EXPERIMENT) {
+    if (this.hud.NEW_CONSOLE_OUTPUT_ENABLED) {
       this.hud.newConsoleOutput.dispatchMessageAdd(response);
       // @TODO figure out what to do about the callback.
       return;
     }
     let msg = new Messages.JavaScriptEvalOutput(response,
                                                 errorMessage, errorDocLink);
     this.hud.output.addMessage(msg);
 
@@ -939,17 +939,17 @@ JSTerm.prototype = {
     hud._repeatNodes = {};
 
     if (clearStorage) {
       this.webConsoleClient.clearMessagesCache();
     }
 
     this._sidebarDestroy();
 
-    if (hud.SUPER_FRONTEND_EXPERIMENT) {
+    if (hud.NEW_CONSOLE_OUTPUT_ENABLED) {
       hud.newConsoleOutput.dispatchMessagesClear();
     }
 
     this.emit("messages-cleared");
   },
 
   /**
    * Remove all of the private messages from the Web Console output.
diff --git a/devtools/client/webconsole/new-console-output/components/console-output.js b/devtools/client/webconsole/new-console-output/components/console-output.js
--- a/devtools/client/webconsole/new-console-output/components/console-output.js
+++ b/devtools/client/webconsole/new-console-output/components/console-output.js
@@ -10,24 +10,26 @@ const {
   PropTypes
 } = require("devtools/client/shared/vendor/react");
 const ReactDOM = require("devtools/client/shared/vendor/react-dom");
 const { connect } = require("devtools/client/shared/vendor/react-redux");
 
 const MessageContainer = createFactory(require("devtools/client/webconsole/new-console-output/components/message-container").MessageContainer);
 
 const ConsoleOutput = createClass({
-  displayName: "ConsoleOutput",
 
   propTypes: {
     jsterm: PropTypes.object.isRequired,
     // This function is created in mergeProps
-    openVariablesView: PropTypes.func.isRequired
+    openVariablesView: PropTypes.func.isRequired,
+    messages: PropTypes.array.isRequired
   },
 
+  displayName: "ConsoleOutput",
+
   componentWillUpdate() {
     // @TODO Move this to a parent component.
     let node = ReactDOM.findDOMNode(this).parentNode.parentNode.parentNode;
     if (node.lastChild) {
       this.shouldScrollBottom = isScrolledToBottom(node.lastChild, node);
     }
   },
 
diff --git a/devtools/client/webconsole/new-console-output/components/message-container.js b/devtools/client/webconsole/new-console-output/components/message-container.js
--- a/devtools/client/webconsole/new-console-output/components/message-container.js
+++ b/devtools/client/webconsole/new-console-output/components/message-container.js
@@ -4,46 +4,47 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 // React & Redux
 const {
   createClass,
-  createElement,
+  createFactory,
   PropTypes
 } = require("devtools/client/shared/vendor/react");
 
 const MessageContainer = createClass({
-  displayName: "MessageContainer",
 
   propTypes: {
     message: PropTypes.object.isRequired
   },
 
+  displayName: "MessageContainer",
+
   render() {
     const { message } = this.props;
     let MessageComponent = getMessageComponent(message.messageType);
-    return createElement(MessageComponent, { message });
+    return MessageComponent({ message });
   }
 });
 
 function getMessageComponent(messageType) {
   let MessageComponent;
   switch (messageType) {
     case "ConsoleApiCall":
       MessageComponent = require("devtools/client/webconsole/new-console-output/components/message-types/console-api-call").ConsoleApiCall;
       break;
     case "EvaluationResult":
       MessageComponent = require("devtools/client/webconsole/new-console-output/components/message-types/evaluation-result").EvaluationResult;
       break;
     case "PageError":
       MessageComponent = require("devtools/client/webconsole/new-console-output/components/message-types/page-error").PageError;
       break;
   }
-  return MessageComponent;
+  return createFactory(MessageComponent);
 }
 
 module.exports.MessageContainer = MessageContainer;
 
 // Exported so we can test it with unit tests.
 module.exports.getMessageComponent = getMessageComponent;
diff --git a/devtools/client/webconsole/new-console-output/components/message-icon.js b/devtools/client/webconsole/new-console-output/components/message-icon.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/components/message-icon.js
@@ -0,0 +1,32 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+// React & Redux
+const {
+  DOM: dom,
+  PropTypes
+} = require("devtools/client/shared/vendor/react");
+const {l10n} = require("devtools/client/webconsole/new-console-output/utils/messages");
+
+MessageIcon.displayName = "MessageIcon";
+
+MessageIcon.propTypes = {
+  severity: PropTypes.string.isRequired,
+};
+
+function MessageIcon(props) {
+  const { severity } = props;
+
+  const title = l10n.getStr("severity." + severity);
+  return dom.div({
+    className: "icon",
+    title
+  });
+}
+
+module.exports.MessageIcon = MessageIcon;
diff --git a/devtools/client/webconsole/new-console-output/components/message-types/console-api-call.js b/devtools/client/webconsole/new-console-output/components/message-types/console-api-call.js
--- a/devtools/client/webconsole/new-console-output/components/message-types/console-api-call.js
+++ b/devtools/client/webconsole/new-console-output/components/message-types/console-api-call.js
@@ -3,40 +3,51 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 // React & Redux
 const {
-  createElement,
+  createFactory,
   DOM: dom,
   PropTypes
 } = require("devtools/client/shared/vendor/react");
-const { MessageRepeat } = require("devtools/client/webconsole/new-console-output/components/message-repeat");
+const MessageRepeat = createFactory(require("devtools/client/webconsole/new-console-output/components/message-repeat").MessageRepeat);
+const MessageIcon = createFactory(require("devtools/client/webconsole/new-console-output/components/message-icon").MessageIcon);
 
 ConsoleApiCall.displayName = "ConsoleApiCall";
 
 ConsoleApiCall.propTypes = {
   message: PropTypes.object.isRequired,
 };
 
 function ConsoleApiCall(props) {
   const { message } = props;
   const messageBody =
     dom.span({className: "message-body devtools-monospace"},
       formatTextContent(message.data.arguments));
-  const repeat = createElement(MessageRepeat, {repeat: message.repeat});
+  const icon = MessageIcon({severity: message.severity});
+  const repeat = MessageRepeat({repeat: message.repeat});
   const children = [
     messageBody,
     repeat
   ];
 
-  return dom.div({ className: "message cm-s-mozilla" },
+  // @TODO Use of "is" is a temporary hack to get the category and severity
+  // attributes to be applied. There are targeted in webconsole's CSS rules,
+  // so if we remove this hack, we have to modify the CSS rules accordingly.
+  return dom.div({
+    class: "message cm-s-mozilla",
+    is: "fdt-message",
+    category: message.category,
+    severity: message.severity
+  },
+    icon,
     dom.span({className: "message-body-wrapper"},
       dom.span({},
         dom.span({className: "message-flex-body"},
           children
         )
       )
     )
   );
diff --git a/devtools/client/webconsole/new-console-output/components/message-types/date-preview.js b/devtools/client/webconsole/new-console-output/components/message-types/date-preview.js
--- a/devtools/client/webconsole/new-console-output/components/message-types/date-preview.js
+++ b/devtools/client/webconsole/new-console-output/components/message-types/date-preview.js
@@ -9,37 +9,48 @@
 // React & Redux
 const {
   createFactory,
   DOM: dom,
   PropTypes
 } = require("devtools/client/shared/vendor/react");
 
 const VariablesViewLink = createFactory(require("devtools/client/webconsole/new-console-output/components/variables-view-link").VariablesViewLink);
+const MessageIcon = createFactory(require("devtools/client/webconsole/new-console-output/components/message-icon").MessageIcon);
 
 DatePreview.displayName = "DatePreview";
 
 DatePreview.propTypes = {
-  message: PropTypes.object.isRequired,
+  data: PropTypes.object.isRequired,
 };
 
 function DatePreview(props) {
-  const { data } = props;
+  const { data, category, severity } = props;
   const { preview } = data;
 
   const dateString = new Date(preview.timestamp).toISOString();
   const textNodes = [
     VariablesViewLink({
       objectActor: data,
       label: "Date"
     }),
     dom.span({ className: "cm-string-2" }, ` ${dateString}`)
   ];
+  const icon = MessageIcon({ severity });
 
-  return dom.div({ className: "message cm-s-mozilla" },
+  // @TODO Use of "is" is a temporary hack to get the category and severity
+  // attributes to be applied. There are targeted in webconsole's CSS rules,
+  // so if we remove this hack, we have to modify the CSS rules accordingly.
+  return dom.div({
+    class: "message cm-s-mozilla",
+    is: "fdt-message",
+    category: category,
+    severity: severity
+  },
+    icon,
     dom.span({
       className: "message-body-wrapper message-body devtools-monospace"
     }, dom.span({},
         dom.span({ className: "class-Date" },
           textNodes
         )
       )
     )
diff --git a/devtools/client/webconsole/new-console-output/components/message-types/default-renderer.js b/devtools/client/webconsole/new-console-output/components/message-types/default-renderer.js
--- a/devtools/client/webconsole/new-console-output/components/message-types/default-renderer.js
+++ b/devtools/client/webconsole/new-console-output/components/message-types/default-renderer.js
@@ -3,20 +3,35 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 // React & Redux
 const {
+  createFactory,
   DOM: dom,
 } = require("devtools/client/shared/vendor/react");
+const MessageIcon = createFactory(require("devtools/client/webconsole/new-console-output/components/message-icon").MessageIcon);
 
 DefaultRenderer.displayName = "DefaultRenderer";
 
 function DefaultRenderer(props) {
-  return dom.div({ className: "message cm-s-mozilla" },
+  const { category, severity } = props;
+
+  const icon = MessageIcon({ severity });
+
+  // @TODO Use of "is" is a temporary hack to get the category and severity
+  // attributes to be applied. There are targeted in webconsole's CSS rules,
+  // so if we remove this hack, we have to modify the CSS rules accordingly.
+  return dom.div({
+    class: "message cm-s-mozilla",
+    is: "fdt-message",
+    category: category,
+    severity: severity
+  },
+    icon,
     "This evaluation result type is not supported yet."
   );
 }
 
 module.exports.DefaultRenderer = DefaultRenderer;
diff --git a/devtools/client/webconsole/new-console-output/components/message-types/evaluation-result.js b/devtools/client/webconsole/new-console-output/components/message-types/evaluation-result.js
--- a/devtools/client/webconsole/new-console-output/components/message-types/evaluation-result.js
+++ b/devtools/client/webconsole/new-console-output/components/message-types/evaluation-result.js
@@ -3,37 +3,40 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 // React & Redux
 const {
-  createElement,
-  DOM: dom,
+  createFactory,
   PropTypes
 } = require("devtools/client/shared/vendor/react");
-const { MessageRepeat } = require("devtools/client/webconsole/new-console-output/components/message-repeat");
 
 EvaluationResult.displayName = "EvaluationResult";
 
 EvaluationResult.propTypes = {
   message: PropTypes.object.isRequired,
 };
 
 function EvaluationResult(props) {
   const { message } = props;
   let PreviewComponent = getPreviewComponent(message.data);
-  return createElement(PreviewComponent, { data: message.data });
+
+  return PreviewComponent({
+    data: message.data,
+    category: message.category,
+    severity: message.severity
+  });
 }
 
 function getPreviewComponent(data) {
   if (typeof data.class != "undefined") {
     switch (data.class) {
       case "Date":
-        return require("devtools/client/webconsole/new-console-output/components/message-types/date-preview").DatePreview;
+        return createFactory(require("devtools/client/webconsole/new-console-output/components/message-types/date-preview").DatePreview);
     }
   }
-  return require("devtools/client/webconsole/new-console-output/components/message-types/default-renderer").DefaultRenderer;
+  return createFactory(require("devtools/client/webconsole/new-console-output/components/message-types/default-renderer").DefaultRenderer);
 }
 
 module.exports.EvaluationResult = EvaluationResult;
diff --git a/devtools/client/webconsole/new-console-output/components/message-types/page-error.js b/devtools/client/webconsole/new-console-output/components/message-types/page-error.js
--- a/devtools/client/webconsole/new-console-output/components/message-types/page-error.js
+++ b/devtools/client/webconsole/new-console-output/components/message-types/page-error.js
@@ -3,40 +3,51 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 // React & Redux
 const {
-  createElement,
+  createFactory,
   DOM: dom,
   PropTypes
 } = require("devtools/client/shared/vendor/react");
-const { MessageRepeat } = require("devtools/client/webconsole/new-console-output/components/message-repeat");
+const MessageRepeat = createFactory(require("devtools/client/webconsole/new-console-output/components/message-repeat").MessageRepeat);
+const MessageIcon = createFactory(require("devtools/client/webconsole/new-console-output/components/message-icon").MessageIcon);
 
 PageError.displayName = "PageError";
 
 PageError.propTypes = {
   message: PropTypes.object.isRequired,
 };
 
 function PageError(props) {
   const { message } = props;
   const messageBody =
     dom.span({className: "message-body devtools-monospace"},
       message.data.errorMessage);
-  const repeat = createElement(MessageRepeat, {repeat: message.repeat});
+  const repeat = MessageRepeat({repeat: message.repeat});
+  const icon = MessageIcon({severity: message.severity});
   const children = [
     messageBody,
     repeat
   ];
 
-  return dom.div({ className: "message cm-s-mozilla"},
+  // @TODO Use of "is" is a temporary hack to get the category and severity
+  // attributes to be applied. There are targeted in webconsole's CSS rules,
+  // so if we remove this hack, we have to modify the CSS rules accordingly.
+  return dom.div({
+    class: "message cm-s-mozilla",
+    is: "fdt-message",
+    category: message.category,
+    severity: message.severity
+  },
+    icon,
     dom.span({className: "message-body-wrapper"},
       dom.span({},
         dom.span({className: "message-flex-body"},
           children
         )
       )
     )
   );
diff --git a/devtools/client/webconsole/new-console-output/components/moz.build b/devtools/client/webconsole/new-console-output/components/moz.build
--- a/devtools/client/webconsole/new-console-output/components/moz.build
+++ b/devtools/client/webconsole/new-console-output/components/moz.build
@@ -5,11 +5,12 @@
 
 DIRS += [
     'message-types'
 ]
 
 DevToolsModules(
     'console-output.js',
     'message-container.js',
+    'message-icon.js',
     'message-repeat.js',
     'variables-view-link.js'
 )
diff --git a/devtools/client/webconsole/new-console-output/constants.js b/devtools/client/webconsole/new-console-output/constants.js
--- a/devtools/client/webconsole/new-console-output/constants.js
+++ b/devtools/client/webconsole/new-console-output/constants.js
@@ -68,9 +68,10 @@ const levels = {
     groupEnd: severities.SEVERITY_LOG,
     time: severities.SEVERITY_LOG,
     timeEnd: severities.SEVERITY_LOG,
     count: severities.SEVERITY_LOG
   }
 };
 
 // Combine into a single constants object
-module.exports = Object.assign({}, actionTypes, categories, severities, fragments, levels);
+module.exports = Object.assign({}, actionTypes, categories, severities,
+  fragments, levels);
diff --git a/devtools/client/webconsole/new-console-output/main.js b/devtools/client/webconsole/new-console-output/main.js
--- a/devtools/client/webconsole/new-console-output/main.js
+++ b/devtools/client/webconsole/new-console-output/main.js
@@ -1,24 +1,26 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+ /* global BrowserLoader */
+
 "use strict";
 
 var { utils: Cu } = Components;
 
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 Cu.import("resource://devtools/client/shared/browser-loader.js");
 
 // Initialize module loader and load all modules of the new inline
 // preview feature. The entire code-base doesn't need any extra
 // privileges and runs entirely in content scope.
 const rootUrl = "resource://devtools/client/webconsole/new-console-output/";
 const require = BrowserLoader({
   baseURI: rootUrl,
   window: this}).require;
-const OutputWrapperThingy = require("./output-wrapper-thingy");
-const { Services } = Cu.import("resource://gre/modules/Services.jsm", {});
+const NewConsoleOutputWrapper = require("./new-console-output-wrapper");
 
 this.NewConsoleOutput = function(parentNode, jsterm) {
-  console.log("Creating NewConsoleOutput", parentNode, OutputWrapperThingy);
-  return new OutputWrapperThingy(parentNode, jsterm);
-}
+  console.log("Creating NewConsoleOutput", parentNode, NewConsoleOutputWrapper);
+  return new NewConsoleOutputWrapper(parentNode, jsterm);
+};
diff --git a/devtools/client/webconsole/new-console-output/moz.build b/devtools/client/webconsole/new-console-output/moz.build
--- a/devtools/client/webconsole/new-console-output/moz.build
+++ b/devtools/client/webconsole/new-console-output/moz.build
@@ -8,17 +8,17 @@ DIRS += [
     'components',
     'reducers',
     'utils',
 ]
 
 DevToolsModules(
     'constants.js',
     'main.js',
-    'output-wrapper-thingy.js',
+    'new-console-output-wrapper.js',
     'store.js',
 )
 
 MOCHITEST_CHROME_MANIFESTS += [
   'test/components/chrome.ini',
   'test/utils/chrome.ini'
 ]
 XPCSHELL_TESTS_MANIFESTS += [
diff --git a/devtools/client/webconsole/new-console-output/output-wrapper-thingy.js b/devtools/client/webconsole/new-console-output/new-console-output-wrapper.js
rename from devtools/client/webconsole/new-console-output/output-wrapper-thingy.js
rename to devtools/client/webconsole/new-console-output/new-console-output-wrapper.js
--- a/devtools/client/webconsole/new-console-output/output-wrapper-thingy.js
+++ b/devtools/client/webconsole/new-console-output/new-console-output-wrapper.js
@@ -3,34 +3,31 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 // React & Redux
 const React = require("devtools/client/shared/vendor/react");
 const ReactDOM = require("devtools/client/shared/vendor/react-dom");
 const { Provider } = require("devtools/client/shared/vendor/react-redux");
 
-const {
-  MESSAGE_ADD,
-  MESSAGES_CLEAR
-} = require("devtools/client/webconsole/new-console-output/constants");
 const actions = require("devtools/client/webconsole/new-console-output/actions/messages");
 const { store } = require("devtools/client/webconsole/new-console-output/store");
 
 const ConsoleOutput = React.createFactory(require("devtools/client/webconsole/new-console-output/components/console-output"));
 
-function OutputWrapperThingy(parentNode, jsterm) {
+function NewConsoleOutputWrapper(parentNode, jsterm) {
   let childComponent = ConsoleOutput({ jsterm });
-  let provider = React.createElement(Provider, { store: store }, childComponent);
+  let provider = React.createElement(
+    Provider, { store: store }, childComponent);
   this.body = ReactDOM.render(provider, parentNode);
 }
 
-OutputWrapperThingy.prototype = {
+NewConsoleOutputWrapper.prototype = {
   dispatchMessageAdd: (message) => {
     store.dispatch(actions.messageAdd(message));
   },
   dispatchMessagesClear: () => {
     store.dispatch(actions.messagesClear());
   }
 };
 
 // Exports from this module
-module.exports = OutputWrapperThingy;
+module.exports = NewConsoleOutputWrapper;
diff --git a/devtools/client/webconsole/new-console-output/reducers/messages.js b/devtools/client/webconsole/new-console-output/reducers/messages.js
--- a/devtools/client/webconsole/new-console-output/reducers/messages.js
+++ b/devtools/client/webconsole/new-console-output/reducers/messages.js
@@ -1,29 +1,26 @@
 /* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
-const Immutable = require("devtools/client/shared/vendor/immutable");
-
-const { getRepeatId } = require("devtools/client/webconsole/new-console-output/utils/messages");
 const constants = require("devtools/client/webconsole/new-console-output/constants");
 
 function messages(state = [], action) {
   switch (action.type) {
     case constants.MESSAGE_ADD:
       let newMessage = action.message;
       if (newMessage.allowRepeating && state.length > 0) {
         let lastMessage = state[state.length - 1];
         if (lastMessage.repeatId === newMessage.repeatId) {
           newMessage.repeat = lastMessage.repeat + 1;
-          return state.slice(0, state.length-1).concat(newMessage);
+          return state.slice(0, state.length - 1).concat(newMessage);
         }
       }
       return state.concat([ newMessage ]);
     case constants.MESSAGES_CLEAR:
       return [];
   }
 
   return state;
diff --git a/devtools/client/webconsole/new-console-output/test/components/chrome.ini b/devtools/client/webconsole/new-console-output/test/components/chrome.ini
--- a/devtools/client/webconsole/new-console-output/test/components/chrome.ini
+++ b/devtools/client/webconsole/new-console-output/test/components/chrome.ini
@@ -2,10 +2,12 @@
 
 support-files =
   head.js
 
 [test_console-api-call.html]
 [test_console-api-call_repeat.html]
 [test_date-preview.html]
 [test_evaluation-result.html]
+[test_message-icon.html]
 [test_message-container.html]
 [test_message-repeat.html]
+[test_page-error.html]
diff --git a/devtools/client/webconsole/new-console-output/test/components/head.js b/devtools/client/webconsole/new-console-output/test/components/head.js
--- a/devtools/client/webconsole/new-console-output/test/components/head.js
+++ b/devtools/client/webconsole/new-console-output/test/components/head.js
@@ -1,10 +1,14 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/* exported getPacket, renderComponent, shallowRenderComponent,
+   cleanActualHTML, cleanExpectedHTML */
+
 "use strict";
 
 var { utils: Cu } = Components;
 
 Cu.import("resource://testing-common/Assert.jsm");
 Cu.import("resource://gre/modules/Task.jsm");
 
 var { require } = Cu.import("resource://devtools/shared/Loader.jsm", {});
@@ -31,42 +35,94 @@ testCommands.set("console.log()", {
   commandType: "consoleAPICall",
   expectedText: "foobar test"
 });
 testCommands.set("new Date()", {
   command: "new Date(448156800000)",
   commandType: "evaluationResult",
   expectedText: "Date 1984-03-15T00:00:00.000Z"
 });
+testCommands.set("pageError", {
+  command: null,
+  commandType: "pageError",
+  expectedText: "ReferenceError: asdf is not defined"
+});
 
 function* getPacket(command, type = "evaluationResult") {
   try {
     // Attach the console to the tab.
     let state = yield new Promise(function(resolve) {
-      attachConsoleToTab(["ConsoleAPI"], (state) => resolve(state));
+      attachConsoleToTab(["ConsoleAPI"], resolve);
     });
 
     // Run the command and get the packet.
     let packet;
     switch (type) {
       case "consoleAPICall":
         packet = yield new Promise((resolve) => {
-          function onConsoleApiCall(type, packet) {
+          function onConsoleApiCall(apiCallType, apiCallPacket) {
             state.dbgClient.removeListener("consoleAPICall", onConsoleApiCall);
-            resolve(packet)
-          };
-          state.dbgClient.addListener("consoleAPICall", onConsoleApiCall)
-          eval(`top.${command}`);
+            resolve(apiCallPacket);
+          }
+          state.dbgClient.addListener("consoleAPICall", onConsoleApiCall);
+          state.client.evaluateJS(`top.${command}`);
         });
         break;
       case "evaluationResult":
         packet = yield new Promise(resolve => {
           state.client.evaluateJS(command, resolve);
         });
         break;
+      case "pageError":
+        // @TODO: get packet with RDP
+        packet = {
+          "from": "server1.conn1.child1/consoleActor2",
+          "type": "pageError",
+          "pageError": {
+            "errorMessage": "ReferenceError: asdf is not defined",
+            "sourceName": "data:text/html,<script>asdf</script>",
+            "lineText": "",
+            "lineNumber": 1,
+            "columnNumber": 1,
+            "category": "content javascript",
+            "timeStamp": 1455735574091,
+            "warning": false,
+            "error": false,
+            "exception": true,
+            "strict": false,
+            "info": false,
+            "private": false,
+            "stacktrace": [{
+              "columnNumber": 68,
+              "filename": "test.html",
+              "functionName": "baz",
+              "language": 2,
+              "lineNumber": 1
+            }, {
+              "columnNumber": 43,
+              "filename": "test.html",
+              "functionName": "bar",
+              "language": 2,
+              "lineNumber": 2
+            }, {
+              "columnNumber": 18,
+              "filename": "test.html",
+              "functionName": "foo",
+              "language": 2,
+              "lineNumber": 3
+            }, {
+              "columnNumber": 150,
+              "filename": "test.html",
+              "functionName": "",
+              "language": 2,
+              "lineNumber": 4
+            }]
+          }
+        };
+        break;
     }
 
     closeDebugger(state);
     return packet;
   } catch (e) {
     ok(false, "Got an error: " + DevToolsUtils.safeErrorString(e));
   }
 }
diff --git a/devtools/client/webconsole/new-console-output/test/components/test_date-preview.html b/devtools/client/webconsole/new-console-output/test/components/test_date-preview.html
--- a/devtools/client/webconsole/new-console-output/test/components/test_date-preview.html
+++ b/devtools/client/webconsole/new-console-output/test/components/test_date-preview.html
@@ -16,16 +16,18 @@ window.onload = Task.async(function* () 
   const { prepareMessage } = require("devtools/client/webconsole/new-console-output/utils/messages");
   const { DatePreview } = require("devtools/client/webconsole/new-console-output/components/message-types/date-preview");
 
   const testCommand = testCommands.get("new Date()");
   const packet = yield getPacket(testCommand.command, testCommand.commandType);
   const message = prepareMessage(packet);
   const props = {
     data: message.data,
+    severity: message.severity,
+    category: message.category,
   };
   const rendered = renderComponent(DatePreview, props);
 
   const queryPathBase = "div.message.cm-s-mozilla span.message-body-wrapper.message-body.devtools-monospace span span.class-Date";
 
   const preview = rendered.querySelectorAll(queryPathBase);
   is(preview[0].textContent, testCommand.expectedText, "DatePreview outputs expected text");
 
diff --git a/devtools/client/webconsole/new-console-output/test/components/test_evaluation-result.html b/devtools/client/webconsole/new-console-output/test/components/test_evaluation-result.html
--- a/devtools/client/webconsole/new-console-output/test/components/test_evaluation-result.html
+++ b/devtools/client/webconsole/new-console-output/test/components/test_evaluation-result.html
@@ -34,17 +34,17 @@ window.onload = Task.async(function* () 
     const testValue = testCommands.get("new Date()");
     const packet = yield getPacket(testValue.command, testValue.commandType);
     const message = prepareMessage(packet);
     const props = {
       message
     };
     const rendered = renderComponent(EvaluationResult, props);
 
-    ok(rendered.textContent.contains(testValue.expectedText),
+    ok(rendered.textContent.includes(testValue.expectedText),
       "EvaluationResult pipes data to its children as expected");
 }
 
   /**
    * Test that getPreviewComponent() returns correct component for each object type.
    */
   function testGetPreviewComponent() {
     const testValues = [
diff --git a/devtools/client/webconsole/new-console-output/test/components/test_message-container.html b/devtools/client/webconsole/new-console-output/test/components/test_message-container.html
--- a/devtools/client/webconsole/new-console-output/test/components/test_message-container.html
+++ b/devtools/client/webconsole/new-console-output/test/components/test_message-container.html
@@ -13,16 +13,17 @@
 
 <script type="text/javascript;version=1.8">
 window.onload = Task.async(function* () {
   const { prepareMessage } = require("devtools/client/webconsole/new-console-output/utils/messages");
 
   const { MessageContainer } = require("devtools/client/webconsole/new-console-output/components/message-container");
   const { ConsoleApiCall } = require("devtools/client/webconsole/new-console-output/components/message-types/console-api-call");
   const { EvaluationResult } = require("devtools/client/webconsole/new-console-output/components/message-types/evaluation-result");
+  const { PageError } = require("devtools/client/webconsole/new-console-output/components/message-types/page-error");
 
   yield testFullRender();
   yield testGetMessageComponent();
 
   SimpleTest.finish();
 
   /**
    * Test that passing in a message correctly wires up all the children.
@@ -34,32 +35,36 @@ window.onload = Task.async(function* () 
     const testValue = testCommands.get("console.log()");
     const packet = yield getPacket(testValue.command, testValue.commandType);
     const message = prepareMessage(packet);
     const props = {
       message
     };
     const rendered = renderComponent(MessageContainer, props);
 
-    ok(rendered.textContent.contains(testValue.expectedText),
+    ok(rendered.textContent.includes(testValue.expectedText),
       "MessageContainer pipes data to its children as expected");
   }
 
   /**
    * Test that getMessageComponent() returns correct component for each message type.
    */
   function testGetMessageComponent() {
     const testValues = [
       {
         commandObj: testCommands.get("console.log()"),
         expectedComponent: ConsoleApiCall
       },
       {
         commandObj: testCommands.get("new Date()"),
         expectedComponent: EvaluationResult
+      },
+      {
+        commandObj: testCommands.get("pageError"),
+        expectedComponent: PageError
       }
     ];
 
     for (let testValue of testValues) {
       const { commandObj, expectedComponent } = testValue;
       const packet = yield getPacket(commandObj.command, commandObj.commandType);
       const message = prepareMessage(packet);
       const rendered = shallowRenderComponent(MessageContainer, {message});
diff --git a/devtools/client/webconsole/new-console-output/test/components/test_message-icon.html b/devtools/client/webconsole/new-console-output/test/components/test_message-icon.html
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/test/components/test_message-icon.html
@@ -0,0 +1,32 @@
+<!DOCTYPE HTML>
+<html lang="en">
+<head>
+  <meta charset="utf8">
+  <title>Test for MessageRepeat component</title>
+  <script type="text/javascript" src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
+  <script type="application/javascript;version=1.8" src="head.js"></script>
+  <!-- Any copyright is dedicated to the Public Domain.
+     - http://creativecommons.org/publicdomain/zero/1.0/ -->
+</head>
+<body>
+<p>Test for MessageIcon component</p>
+
+<script type="text/javascript;version=1.8">
+window.onload = Task.async(function* () {
+  const {
+    SEVERITY_CLASS_FRAGMENTS,
+    SEVERITY_ERROR,
+  } = require("devtools/client/webconsole/new-console-output/constants");
+  const { MessageIcon } = require("devtools/client/webconsole/new-console-output/components/message-icon");
+
+  let severity = SEVERITY_CLASS_FRAGMENTS[SEVERITY_ERROR];
+  const iconRendered = renderComponent(MessageIcon, { severity });
+  ok(iconRendered.classList.contains("icon"), "MessageIcon has expected class");
+  is(iconRendered.getAttribute("title"), "Error",
+    "MessageIcon shows correct title attribute");
+
+  SimpleTest.finish();
+});
+</script>
+</body>
+</html>
diff --git a/devtools/client/webconsole/new-console-output/test/components/test_page-error.html b/devtools/client/webconsole/new-console-output/test/components/test_page-error.html
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/test/components/test_page-error.html
@@ -0,0 +1,32 @@
+<!DOCTYPE HTML>
+<html lang="en">
+<head>
+  <meta charset="utf8">
+  <title>Test for PageError component</title>
+  <script type="text/javascript" src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
+  <script type="application/javascript;version=1.8" src="head.js"></script>
+  <!-- Any copyright is dedicated to the Public Domain.
+     - http://creativecommons.org/publicdomain/zero/1.0/ -->
+</head>
+<body>
+<p>Test for PageError component</p>
+
+<script type="text/javascript;version=1.8">
+window.onload = Task.async(function* () {
+  const { prepareMessage } = require("devtools/client/webconsole/new-console-output/utils/messages");
+  const { PageError } = require("devtools/client/webconsole/new-console-output/components/message-types/page-error");
+
+  const packet = yield getPacket(null, "pageError");
+  const message = prepareMessage(packet);
+  const rendered = renderComponent(PageError, {message});
+
+  const queryPath = "div.message.cm-s-mozilla span span.message-flex-body span.message-body.devtools-monospace";
+  const messageBody = rendered.querySelectorAll(queryPath);
+  is(messageBody.length, 1, "PageError outputs expected HTML structure");
+  is(messageBody[0].textContent, testCommands.get("pageError").expectedText, "PageError outputs expected text");
+
+  SimpleTest.finish()
+});
+</script>
+</body>
+</html>
diff --git a/devtools/client/webconsole/new-console-output/test/store/head.js b/devtools/client/webconsole/new-console-output/test/store/head.js
--- a/devtools/client/webconsole/new-console-output/test/store/head.js
+++ b/devtools/client/webconsole/new-console-output/test/store/head.js
@@ -1,17 +1,18 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
+/* exported storeFactory */
+
 "use strict";
 
-var { classes: Cc, interfaces: Ci, utils: Cu, results: Cr } = Components;
+var { utils: Cu } = Components;
 var { require } = Cu.import("resource://devtools/shared/Loader.jsm", {});
 
-var Services = require("Services");
 var DevToolsUtils = require("devtools/shared/DevToolsUtils");
 DevToolsUtils.testing = true;
 DevToolsUtils.dumpn.wantLogging = true;
 DevToolsUtils.dumpv.wantVerbose = false;
 
 const { storeFactory } = require("devtools/client/webconsole/new-console-output/store");
 
 const testPackets = new Map();
diff --git a/devtools/client/webconsole/new-console-output/utils/messages.js b/devtools/client/webconsole/new-console-output/utils/messages.js
--- a/devtools/client/webconsole/new-console-output/utils/messages.js
+++ b/devtools/client/webconsole/new-console-output/utils/messages.js
@@ -10,20 +10,21 @@ const {
   CATEGORY_CLASS_FRAGMENTS,
   CATEGORY_JS,
   CATEGORY_WEBDEV,
   CATEGORY_OUTPUT,
   LEVELS,
   SEVERITY_CLASS_FRAGMENTS,
   SEVERITY_ERROR,
   SEVERITY_WARNING,
-  SEVERITY_INFO,
   SEVERITY_LOG,
 } = require("../constants");
 const WebConsoleUtils = require("devtools/shared/webconsole/utils").Utils;
+const STRINGS_URI = "chrome://devtools/locale/webconsole.properties";
+const l10n = new WebConsoleUtils.L10n(STRINGS_URI);
 
 function prepareMessage(packet) {
   // @TODO turn this into an Immutable Record.
   let allowRepeating;
   let category;
   let data;
   let messageType;
   let repeat;
@@ -83,8 +84,10 @@ function getRepeatId(message) {
   delete clonedMessage.timeStamp;
   delete clonedMessage.uniqueID;
   return JSON.stringify(clonedMessage);
 }
 
 exports.prepareMessage = prepareMessage;
 // Export for use in testing.
 exports.getRepeatId = getRepeatId;
+
+exports.l10n = l10n;
diff --git a/devtools/client/webconsole/new-console-output/utils/variables-view.js b/devtools/client/webconsole/new-console-output/utils/variables-view.js
--- a/devtools/client/webconsole/new-console-output/utils/variables-view.js
+++ b/devtools/client/webconsole/new-console-output/utils/variables-view.js
@@ -1,16 +1,17 @@
 /* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+/* global window */
 "use strict";
 
 /**
  * @TODO Remove this.
  *
  * Once JSTerm is also written in React/Redux, these will be actions.
  */
 exports.openVariablesView = (objectActor) => {
   window.jsterm.openVariablesView({objectActor});
-}
+};
diff --git a/devtools/client/webconsole/webconsole.js b/devtools/client/webconsole/webconsole.js
--- a/devtools/client/webconsole/webconsole.js
+++ b/devtools/client/webconsole/webconsole.js
@@ -193,16 +193,17 @@ const THROTTLE_UPDATES = 1000;
 const FILTER_PREFS_PREFIX = "devtools.webconsole.filter.";
 
 // The minimum font size.
 const MIN_FONT_SIZE = 10;
 
 const PREF_CONNECTION_TIMEOUT = "devtools.debugger.remote-timeout";
 const PREF_PERSISTLOG = "devtools.webconsole.persistlog";
 const PREF_MESSAGE_TIMESTAMP = "devtools.webconsole.timestampMessages";
+const PREF_NEW_FRONTEND_ENABLED = "devtools.webconsole.new-frontend-enabled";
 
 /**
  * A WebConsoleFrame instance is an interactive console initialized *per target*
  * that displays console log data as well as provides an interactive terminal to
  * manipulate the target's document content.
  *
  * The WebConsoleFrame is responsible for the actual Web Console UI
  * implementation.
@@ -503,17 +504,18 @@ WebConsoleFrame.prototype = {
 
   /**
    * Find the Web Console UI elements and setup event listeners as needed.
    * @private
    */
   _initUI: function() {
     this.document = this.window.document;
     this.rootElement = this.document.documentElement;
-    this.SUPER_FRONTEND_EXPERIMENT = !this.owner._browserConsole && !!this.window.NewConsoleOutput;
+    this.NEW_CONSOLE_OUTPUT_ENABLED = !this.owner._browserConsole &&
+      Services.prefs.getBoolPref(PREF_NEW_FRONTEND_ENABLED);
 
     this._initDefaultFilterPrefs();
 
     // Register the controller to handle "select all" properly.
     this._commandController = new CommandController(this);
     this.window.controllers.insertControllerAt(0, this._commandController);
 
     this._contextMenuHandler = new ConsoleContextMenu(this);
@@ -564,17 +566,17 @@ WebConsoleFrame.prototype = {
     clearButton.addEventListener("command", () => {
       this.owner._onClearButton();
       this.jsterm.clearOutput(true);
     });
 
     this.jsterm = new JSTerm(this);
     this.jsterm.init();
 
-    if (this.SUPER_FRONTEND_EXPERIMENT) {
+    if (this.NEW_CONSOLE_OUTPUT_ENABLED) {
       // @TODO Remove this once JSTerm is handled with React/Redux.
       this.window.jsterm = this.jsterm;
       console.log("Entering experimental mode for console frontend");
 
       // XXX: We should actually stop output from happening on old output
       // panel, but for now let's just hide it.
       this.experimentalOutputNode = this.outputNode.cloneNode();
       this.outputNode.hidden = true;
@@ -3344,17 +3346,17 @@ WebConsoleConnectionProxy.prototype = {
    * @private
    * @param string type
    *        Message type.
    * @param object packet
    *        The message received from the server.
    */
   _onPageError: function(type, packet) {
     if (this.webConsoleFrame && packet.from == this._consoleActor) {
-      if (this.webConsoleFrame.SUPER_FRONTEND_EXPERIMENT) {
+      if (this.webConsoleFrame.NEW_CONSOLE_OUTPUT_ENABLED) {
         this.webConsoleFrame.newConsoleOutput.dispatchMessageAdd(packet);
         return;
       }
       this.webConsoleFrame.handlePageError(packet.pageError);
     }
   },
 
   /**
@@ -3380,17 +3382,17 @@ WebConsoleConnectionProxy.prototype = {
    * @private
    * @param string type
    *        Message type.
    * @param object packet
    *        The message received from the server.
    */
   _onConsoleAPICall: function(type, packet) {
     if (this.webConsoleFrame && packet.from == this._consoleActor) {
-      if (this.webConsoleFrame.SUPER_FRONTEND_EXPERIMENT) {
+      if (this.webConsoleFrame.NEW_CONSOLE_OUTPUT_ENABLED) {
         this.webConsoleFrame.newConsoleOutput.dispatchMessageAdd(packet);
       } else {
         this.webConsoleFrame.handleConsoleAPICall(packet.message);
       }
     }
   },
 
   /**
diff --git a/devtools/package.json b/devtools/package.json
deleted file mode 100644
--- a/devtools/package.json
+++ /dev/null
@@ -1,15 +0,0 @@
-{
-  "name": "firefox-devtools",
-  "version": "1.0.0",
-  "devDependencies": {
-    "babel-preset-es2015": "^6.6.0",
-    "babel-register": "^6.7.2",
-    "expect": "^1.16.0",
-    "jsdom": "^8.1.0",
-    "mocha": "^2.4.5",
-    "mocha-jsdom": "^1.1.0"
-  },
-  "scripts": {
-    "test": "NODE_PATH=`pwd`/../ mocha client/webconsole/new-console-output/test/**/*.test.js --compilers js:babel-register"
-  }
-}
