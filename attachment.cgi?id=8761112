# HG changeset patch
# User Andrea Marchesini <amarchesini@mozilla.com>
# Parent  2f0a8c420b18954e18b57993ea9c1a84190a0cb1

diff --git a/devtools/server/actors/webbrowser.js b/devtools/server/actors/webbrowser.js
--- a/devtools/server/actors/webbrowser.js
+++ b/devtools/server/actors/webbrowser.js
@@ -2011,17 +2011,17 @@ TabActor.prototype = {
    *         True if the window.console object is native, or false otherwise.
    */
   hasNativeConsoleAPI(window) {
     let isNative = false;
     try {
       // We are very explicitly examining the "console" property of
       // the non-Xrayed object here.
       let console = window.wrappedJSObject.console;
-      isNative = console instanceof window.Console;
+      isNative = new XPCNativeWrapper(console).IS_NATIVE_CONSOLE
     } catch (ex) {
       // ignore
     }
     return isNative;
   },
 
   /**
    * Create or return the StyleSheetActor for a style sheet. This method
diff --git a/devtools/server/tests/browser/browser_navigateEvents.js b/devtools/server/tests/browser/browser_navigateEvents.js
--- a/devtools/server/tests/browser/browser_navigateEvents.js
+++ b/devtools/server/tests/browser/browser_navigateEvents.js
@@ -30,16 +30,17 @@ function assertEvent(event, data) {
     case x++:
       is(event, "will-navigate", "The very first event is will-navigate on server side");
       is(data.newURI, URL2, "newURI property is correct");
       break;
     case x++:
       is(event, "tabNavigated", "Right after will-navigate, the client receive tabNavigated");
       is(data.state, "start", "state is start");
       is(data.url, URL2, "url property is correct");
+      is(data.nativeConsoleAPI, true, "nativeConsoleAPI is correct");
       break;
     case x++:
       is(event, "request", "Given that locally, the Debugger protocol is sync, the request happens after tabNavigated");
       is(data, URL2);
       break;
     case x++:
       is(event, "DOMContentLoaded");
       is(content.document.readyState, "interactive");
@@ -51,16 +52,17 @@ function assertEvent(event, data) {
     case x++:
       is(event, "navigate", "Then once the second doc is loaded, we get the navigate event");
       is(content.document.readyState, "complete", "navigate is emitted only once the document is fully loaded");
       break;
     case x++:
       is(event, "tabNavigated", "Finally, the receive the client event");
       is(data.state, "stop", "state is stop");
       is(data.url, URL2, "url property is correct");
+      is(data.nativeConsoleAPI, true, "nativeConsoleAPI is correct");
 
       // End of test!
       cleanup();
       break;
   }
 }
 
 function waitForOnBeforeUnloadDialog(browser, callback) {
