# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  d8d5368e30973c8066179ad32bbecc69c0bcdf8a

diff --git a/toolkit/content/widgets/general.js b/toolkit/content/widgets/general.js
--- a/toolkit/content/widgets/general.js
+++ b/toolkit/content/widgets/general.js
@@ -5,51 +5,51 @@
 "use strict";
 
 // This is loaded into chrome windows with the subscript loader. Wrap in
 // a block to prevent accidentally leaking globals onto `window`.
 {
   let convertedImages = new Map();
   let unconvertedImages = new Map();
   let unknownImages = new Map();
-  document.addEventListener("DOMContentLoaded", () => {
-    console.group(`Image report for ${document.documentURI}`);
-    console.log(`Converted images: ${convertedImages.size}`, convertedImages);
-    console.log(
-      `Unconverted images: ${unconvertedImages.size}`,
-      unconvertedImages
-    );
-    console.log(`Unknown images: ${unknownImages.size}`, unknownImages);
-    console.groupEnd(`Image report for ${document.documentURI}`);
-  });
+  // document.addEventListener("DOMContentLoaded", () => {
+  //   console.group(`Image report for ${document.documentURI}`);
+  //   console.log(`Converted images: ${convertedImages.size}`, convertedImages);
+  //   console.log(
+  //     `Unconverted images: ${unconvertedImages.size}`,
+  //     unconvertedImages
+  //   );
+  //   console.log(`Unknown images: ${unknownImages.size}`, unknownImages);
+  //   console.groupEnd(`Image report for ${document.documentURI}`);
+  // });
   class MozImage extends HTMLElement {
     connectedCallback() {
       if (this.hasAttribute("src")) {
         this.src = this.getAttribute("src");
       }
 
-      // Debugging for missed consumers
-      let listStyleImage = window
-        .getComputedStyle(this)
-        .getPropertyValue("list-style-image");
-      let content = window.getComputedStyle(this).getPropertyValue("content");
-      if (listStyleImage != "none") {
-        let el = this;
-        let id = this.closest("[id]") && this.closest("[id]").id;
-        while (!id && el.getRootNode()) {
-          let host = el.getRootNode().host;
-          el = host;
-          id = host.closest("[id]") && host.closest("[id]").id;
-        }
-        unconvertedImages.set(this, `${id}: ${listStyleImage}`);
-      } else if (content != "none") {
-        convertedImages.set(this, content);
-      } else {
-        unknownImages.set(this, this.outerHTML);
-      }
+      // // Debugging for missed consumers
+      // let listStyleImage = window
+      //   .getComputedStyle(this)
+      //   .getPropertyValue("list-style-image");
+      // let content = window.getComputedStyle(this).getPropertyValue("content");
+      // if (listStyleImage != "none") {
+      //   let el = this;
+      //   let id = this.closest("[id]") && this.closest("[id]").id;
+      //   while (!id && el.getRootNode()) {
+      //     let host = el.getRootNode().host;
+      //     el = host;
+      //     id = host.closest("[id]") && host.closest("[id]").id;
+      //   }
+      //   unconvertedImages.set(this, `${id}: ${listStyleImage}`);
+      // } else if (content != "none") {
+      //   convertedImages.set(this, content);
+      // } else {
+      //   unknownImages.set(this, this.outerHTML);
+      // }
     }
 
     set src(val) {
       // TODO: Set/remove content: <url> as inline style
     }
 
     removeAttribute(name) {
       if (name == "src") {
