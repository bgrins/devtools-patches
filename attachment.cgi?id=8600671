# HG changeset patch
# User Gabriel Luong <gabriel.luong@gmail.com>
# Parent  b99bc3b3f5696c8e4576ca024c5d1a0fbff18de6
Bug 1157293 - Part 2: Renamed styleinspector-open class to user-open r=bgrins

diff --git a/browser/devtools/styleinspector/rule-view.js b/browser/devtools/styleinspector/rule-view.js
--- a/browser/devtools/styleinspector/rule-view.js
+++ b/browser/devtools/styleinspector/rule-view.js
@@ -2111,17 +2111,17 @@

       if (isPropertyHighlighted || isComputedHighlighted) {
         isHighlighted = true;
       }

       // Expand the computed list if a computed rule is highlighted and the
       // property rule is not highlighted
       if (!isPropertyHighlighted && isComputedHighlighted &&
-          !editor.computed.classList.contains("styleinspector-open")) {
+          !editor.computed.classList.contains("user-open")) {
         editor.expandForFilter();
         this._editorsExpandedForFilter.push(editor);
       }
     }

     return isHighlighted;
   },

@@ -3023,52 +3023,52 @@
     }
     this.prop.setEnabled(!checked);
     aEvent.stopPropagation();
   },

   /**
    * Handles clicks on the computed property expander. If the computed list is
    * open due to user expanding or style filtering, collapse the computed list
-   * and close the expander. Otherwise, add .styleinspector-open class which
-   * is used to expand the computed list and tracks whether or not the computed
-   * list is expanded by manually by the user.
+   * and close the expander. Otherwise, add .user-open class which is used to
+   * expand the computed list and tracks whether or not the computed list is
+   * expanded by manually by the user.
    */
   _onExpandClicked: function(aEvent) {
     if (this.computed.classList.contains("filter-open") ||
-        this.computed.classList.contains("styleinspector-open")) {
+        this.computed.classList.contains("user-open")) {
       this.expander.removeAttribute("open");
       this.computed.classList.remove("filter-open");
-      this.computed.classList.remove("styleinspector-open");
+      this.computed.classList.remove("user-open");
     } else {
       this.expander.setAttribute("open", "true");
-      this.computed.classList.add("styleinspector-open");
+      this.computed.classList.add("user-open");
     }

     aEvent.stopPropagation();
   },

   /**
    * Expands the computed list when a computed property is matched by the style
    * filtering. The .filter-open class is used to track whether or not the
    * computed list was toggled opened by the filter.
    */
   expandForFilter: function() {
-    if (!this.computed.classList.contains("styleinspector-open")) {
+    if (!this.computed.classList.contains("user-open")) {
       this.computed.classList.add("filter-open");
       this.expander.setAttribute("open", "true");
     }
   },

   /**
    * Collapses the computed list that was expanded by style filtering.
    */
   collapseForFilter: function() {
     this.computed.classList.remove("filter-open");
-    if (!this.computed.classList.contains("styleinspector-open")) {
+    if (!this.computed.classList.contains("user-open")) {
       this.expander.removeAttribute("open");
     }
   },

   /**
    * Called when the property name's inplace editor is closed.
    * Ignores the change if the user pressed escape, otherwise
    * commits it.
diff --git a/browser/devtools/styleinspector/ruleview.css b/browser/devtools/styleinspector/ruleview.css
--- a/browser/devtools/styleinspector/ruleview.css
+++ b/browser/devtools/styleinspector/ruleview.css
@@ -51,17 +51,17 @@
   cursor: text;
   padding-right: 15px;
 }

 .ruleview-propertyvaluecontainer a {
   cursor: pointer;
 }

-.ruleview-computedlist:not(.styleinspector-open),
+.ruleview-computedlist:not(.user-open),
 .ruleview-warning[hidden] {
   display: none;
 }

 .ruleview-computedlist.filter-open {
   display: block;
 }

diff --git a/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_expander.js b/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_expander.js
--- a/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_expander.js
+++ b/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_expander.js
@@ -51,18 +51,18 @@
     "First rule is inline element.");

   is(rule.selectorText, "#testid", "Second rule is #testid.");
   ok(ruleEditor.expander.getAttribute("open"), "Expander is open.");
   ok(ruleEditor.container.classList.contains("ruleview-highlight"),
     "margin text property is correctly highlighted.");
   ok(!computed.classList.contains("filter-open"),
     "margin computed list does not contain filter-open class.");
-  ok(computed.classList.contains("styleinspector-open"),
-    "margin computed list contains styleinspector-open class.");
+  ok(computed.classList.contains("user-open"),
+    "margin computed list contains user-open class.");

   ok(!computed.children[0].classList.contains("ruleview-highlight"),
     "margin-top computed property is not highlighted.");
   ok(computed.children[1].classList.contains("ruleview-highlight"),
     "margin-right computed property is correctly highlighted.");
   ok(!computed.children[2].classList.contains("ruleview-highlight"),
     "margin-bottom computed property is not highlighted.");
   ok(computed.children[3].classList.contains("ruleview-highlight"),
@@ -89,11 +89,11 @@
     "No rules are higlighted");

   let ruleEditor = getRuleViewRuleEditor(ruleView, 1).rule.textProps[0].editor;
   let computed = ruleEditor.computed;

   ok(ruleEditor.expander.getAttribute("open"), "Expander is open.");
   ok(!computed.classList.contains("filter-open"),
     "margin computed list does not contain filter-open class.");
-  ok(computed.classList.contains("styleinspector-open"),
-    "margin computed list contains styleinspector-open class.");
+  ok(computed.classList.contains("user-open"),
+    "margin computed list contains user-open class.");
 }
