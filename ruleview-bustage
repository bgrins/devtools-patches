# HG changeset patch
# Parent c0c6d55b7cfb5c44ec1ca5677e48cf3c9eddf603
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 950097 - [ruleview] Styles not being updated on some pages

diff --git a/browser/devtools/styleinspector/test/browser_bug705707_is_content_stylesheet.js b/browser/devtools/styleinspector/test/browser_bug705707_is_content_stylesheet.js
--- a/browser/devtools/styleinspector/test/browser_bug705707_is_content_stylesheet.js
+++ b/browser/devtools/styleinspector/test/browser_bug705707_is_content_stylesheet.js
@@ -13,17 +13,17 @@ const TEST_URI2 = "http://example.com/br
                  "test/browser_bug705707_is_content_stylesheet.xul";
 const XUL_URI = Cc["@mozilla.org/network/io-service;1"]
                 .getService(Ci.nsIIOService)
                 .newURI(TEST_URI2, null, null);
 const XUL_PRINCIPAL =  Components.classes["@mozilla.org/scriptsecuritymanager;1"]
                                  .getService(Ci.nsIScriptSecurityManager)
                                  .getNoAppCodebasePrincipal(XUL_URI);
 
-
+let inspector, ruleView;
 let {CssLogic} = devtools.require("devtools/styleinspector/css-logic");
 
 function test()
 {
   waitForExplicitFinish();
   addTab(TEST_URI);
   browser.addEventListener("load", htmlLoaded, true);
 }
@@ -36,21 +36,57 @@ function htmlLoaded()
 }
 
 function testFromHTML()
 {
   let target = doc.querySelector("#target");
 
   executeSoon(function() {
     checkSheets(target);
+    openRuleView((aInspector, aRuleView) => {
+      inspector = aInspector;
+      ruleView = aRuleView;
+      inspector.selection.setNode(target);
+      inspector.once("inspector-updated", testModifyRules);
+    });
+  });
+}
+
+function reselectElement(target, cb)
+{
+  inspector.selection.setNode(target.parentNode);
+  inspector.once("inspector-updated", ()=> {
+    inspector.selection.setNode(target);
+    inspector.once("inspector-updated", cb);
+  });
+}
+
+function testModifyRules()
+{
+  // Set a property on all rules, then refresh and make sure they are still
+  // there (and there wasn't an error on the server side)
+  for (let rule of ruleView._elementStyle.rules) {
+      rule.editor.addProperty("font-weight", "bold", "");
+  }
+
+  reselectElement(doc.querySelector("#target"), () => {
+
+    for (let rule of ruleView._elementStyle.rules) {
+      let lastRule = rule.textProps[rule.textProps.length - 1];
+
+      is (lastRule.name, "font-weight", "Last rule name is font-weight");
+      is (lastRule.value, "bold", "Last rule value is bold");
+    }
+
     gBrowser.removeCurrentTab();
     openXUL();
   });
 }
 
+
 function openXUL()
 {
   Cc["@mozilla.org/permissionmanager;1"].getService(Ci.nsIPermissionManager)
     .addFromPrincipal(XUL_PRINCIPAL, 'allowXULXBL', Ci.nsIPermissionManager.ALLOW_ACTION);
   addTab(TEST_URI2);
   browser.addEventListener("load", xulLoaded, true);
 }
 
@@ -91,12 +127,12 @@ function checkSheets(aTarget)
   }
 }
 
 function finishUp()
 {
   info("finishing up");
   Cc["@mozilla.org/permissionmanager;1"].getService(Ci.nsIPermissionManager)
     .addFromPrincipal(XUL_PRINCIPAL, 'allowXULXBL', Ci.nsIPermissionManager.DENY_ACTION);
-  doc = null;
+  doc = inspector = ruleView = null;
   gBrowser.removeCurrentTab();
   finish();
 }
diff --git a/toolkit/devtools/server/actors/styles.js b/toolkit/devtools/server/actors/styles.js
--- a/toolkit/devtools/server/actors/styles.js
+++ b/toolkit/devtools/server/actors/styles.js
@@ -661,20 +661,26 @@ var StyleRuleActor = protocol.ActorClass
 
     // Use a fresh element for each call to this function to prevent side effects
     // that pop up based on property values that were already set on the element.
 
     let document;
     if (this.rawNode) {
       document = this.rawNode.ownerDocument;
     } else {
-      if (this.rawRule.parentStyleSheet.ownerNode instanceof Ci.nsIDOMHTMLDocument) {
-        document = this.rawRule.parentStyleSheet.ownerNode;
+      let parentStyleSheet = this.rawRule.parentStyleSheet;
+      while (parentStyleSheet.ownerRule &&
+          parentStyleSheet.ownerRule instanceof Ci.nsIDOMCSSImportRule) {
+        parentStyleSheet = parentStyleSheet.ownerRule.parentStyleSheet;
+      }
+
+      if (parentStyleSheet.ownerNode instanceof Ci.nsIDOMHTMLDocument) {
+        document = parentStyleSheet.ownerNode;
       } else {
-        document = this.rawRule.parentStyleSheet.ownerNode.ownerDocument;
+        document = parentStyleSheet.ownerNode.ownerDocument;
       }
     }
 
     let tempElement = document.createElement("div");
 
     for (let mod of modifications) {
       if (mod.type === "set") {
         tempElement.style.setProperty(mod.name, mod.value, mod.priority || "");
