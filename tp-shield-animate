# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  a7c3d752bd6a433cd8944d139c7c85c56148f17a
Bug 1175858 - Tracking Protection shield should be animated in when content is blocked on the page;r=MattN

diff --git a/browser/base/content/browser-trackingprotection.js b/browser/base/content/browser-trackingprotection.js
--- a/browser/base/content/browser-trackingprotection.js
+++ b/browser/base/content/browser-trackingprotection.js
@@ -3,16 +3,17 @@
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 let TrackingProtection = {
   MAX_INTROS: 0,
   PREF_ENABLED_GLOBALLY: "privacy.trackingprotection.enabled",
   PREF_ENABLED_IN_PRIVATE_WINDOWS: "privacy.trackingprotection.pbmode.enabled",
   enabledGlobally: false,
   enabledInPrivateWindows: false,
+  _loadingTab: null,
 
   init() {
     let $ = selector => document.querySelector(selector);
     this.container = $("#tracking-protection-container");
     this.content = $("#tracking-protection-content");
     this.icon = $("#tracking-protection-icon");
 
     this.updateEnabled();
@@ -20,16 +21,17 @@ let TrackingProtection = {
     Services.prefs.addObserver(this.PREF_ENABLED_IN_PRIVATE_WINDOWS, this, false);
 
     this.enabledHistogram.add(this.enabledGlobally);
   },
 
   uninit() {
     Services.prefs.removeObserver(this.PREF_ENABLED_GLOBALLY, this);
     Services.prefs.removeObserver(this.PREF_ENABLED_IN_PRIVATE_WINDOWS, this);
+    this._loadingTab = null;
   },
 
   observe() {
     this.updateEnabled();
   },
 
   get enabled() {
     return this.enabledGlobally ||
@@ -48,21 +50,34 @@ let TrackingProtection = {
   get enabledHistogram() {
     return Services.telemetry.getHistogramById("TRACKING_PROTECTION_ENABLED");
   },
 
   get eventsHistogram() {
     return Services.telemetry.getHistogramById("TRACKING_PROTECTION_EVENTS");
   },
 
-  onSecurityChange(state) {
+  onSecurityChange(state, request) {
     if (!this.enabled) {
       return;
     }
 
+    // Only animate the shield on an actual request (not on a tab switch).
+    // On a tab switch, a single securityChange is fired without a request.
+    // On an actual request, we get two securityChange calls.  The first
+    // has a request, and the second doesn't.  And we don't want to cancel
+    // the animation when the second securityChange fires.
+    let tab = gBrowser.selectedTab;
+    if (request) {
+      this._loadingTab = tab;
+      this.icon.setAttribute("animate", "true");
+    } else if (tab != this._loadingTab) {
+      this.icon.removeAttribute("animate");
+    }
+
     let {
       STATE_BLOCKED_TRACKING_CONTENT, STATE_LOADED_TRACKING_CONTENT
     } = Ci.nsIWebProgressListener;
 
     for (let element of [this.icon, this.content]) {
       if (state & STATE_BLOCKED_TRACKING_CONTENT) {
         element.setAttribute("state", "blocked-tracking-content");
       } else if (state & STATE_LOADED_TRACKING_CONTENT) {
diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -4399,17 +4399,17 @@ var XULBrowserWindow = {
     // Make sure the "https" part of the URL is striked out or not,
     // depending on the current mixed active content blocking state.
     gURLBar.formatValue();
 
     try {
       uri = Services.uriFixup.createExposableURI(uri);
     } catch (e) {}
     gIdentityHandler.checkIdentity(this._state, uri);
-    TrackingProtection.onSecurityChange(this._state);
+    TrackingProtection.onSecurityChange(this._state, aRequest);
   },
 
   // simulate all change notifications after switching tabs
   onUpdateCurrentBrowser: function XWB_onUpdateCurrentBrowser(aStateFlags, aStatus, aMessage, aTotalProgress) {
     if (FullZoom.updateBackgroundTabs)
       FullZoom.onLocationChange(gBrowser.currentURI, true);
     var nsIWebProgressListener = Components.interfaces.nsIWebProgressListener;
     var loadingDone = aStateFlags & nsIWebProgressListener.STATE_STOP;
diff --git a/browser/base/content/test/general/browser.ini b/browser/base/content/test/general/browser.ini
--- a/browser/base/content/test/general/browser.ini
+++ b/browser/base/content/test/general/browser.ini
@@ -417,16 +417,18 @@ support-files =
   benignPage.html
 [browser_trackingUI_2.js]
 tags = trackingprotection
 support-files =
   trackingPage.html
   benignPage.html
 [browser_trackingUI_3.js]
 tags = trackingprotection
+[browser_trackingUI_4.js]
+tags = trackingprotection
 support-files =
   trackingPage.html
   benignPage.html
 [browser_typeAheadFind.js]
 skip-if = buildapp == 'mulet'
 [browser_unknownContentType_title.js]
 [browser_unloaddialogs.js]
 skip-if = e10s # Bug 1100700 - test relies on unload event firing on closed tabs, which it doesn't
diff --git a/browser/base/content/test/general/browser_trackingUI_1.js b/browser/base/content/test/general/browser_trackingUI_1.js
--- a/browser/base/content/test/general/browser_trackingUI_1.js
+++ b/browser/base/content/test/general/browser_trackingUI_1.js
@@ -28,17 +28,18 @@ registerCleanupFunction(function() {
     gBrowser.removeCurrentTab();
   }
 });
 
 function hidden(sel) {
   let win = browser.ownerGlobal;
   let el = win.document.querySelector(sel);
   let display = win.getComputedStyle(el).getPropertyValue("display", null);
-  return display === "none";
+  let opacity = win.getComputedStyle(el).getPropertyValue("opacity", null);
+  return display === "none" || opacity === "0";
 }
 
 function clickButton(sel) {
   let win = browser.ownerGlobal;
   let el = win.document.querySelector(sel);
   el.doCommand();
 }
 
diff --git a/browser/base/content/test/general/browser_trackingUI_3.js b/browser/base/content/test/general/browser_trackingUI_3.js
--- a/browser/base/content/test/general/browser_trackingUI_3.js
+++ b/browser/base/content/test/general/browser_trackingUI_3.js
@@ -5,18 +5,16 @@
 // Test that the Tracking Protection is correctly enabled / disabled
 // in both normal and private windows given all possible states of the prefs:
 //   privacy.trackingprotection.enabled
 //   privacy.trackingprotection.pbmode.enabled
 // See also Bug 1178985.
 
 const PREF = "privacy.trackingprotection.enabled";
 const PB_PREF = "privacy.trackingprotection.pbmode.enabled";
-const BENIGN_PAGE = "http://tracking.example.org/browser/browser/base/content/test/general/benignPage.html";
-const TRACKING_PAGE = "http://tracking.example.org/browser/browser/base/content/test/general/trackingPage.html";
 
 registerCleanupFunction(function() {
   Services.prefs.clearUserPref(PREF);
   Services.prefs.clearUserPref(PB_PREF);
 });
 
 add_task(function* testNormalBrowsing() {
   let browser = gBrowser;
diff --git a/browser/base/content/test/general/browser_trackingUI_4.js b/browser/base/content/test/general/browser_trackingUI_4.js
new file mode 100644
--- /dev/null
+++ b/browser/base/content/test/general/browser_trackingUI_4.js
@@ -0,0 +1,118 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+// Test that the Tracking Protection icon is properly animated in the identity
+// block when loading tabs and switching between tabs.
+// See also Bug 1175858.
+
+const {classes: Cc, interfaces: Ci, utils: Cu, results: Cr} = Components;
+const PREF = "privacy.trackingprotection.enabled";
+const PB_PREF = "privacy.trackingprotection.pbmode.enabled";
+const BENIGN_PAGE = "http://tracking.example.org/browser/browser/base/content/test/general/benignPage.html";
+const TRACKING_PAGE = "http://tracking.example.org/browser/browser/base/content/test/general/trackingPage.html";
+let TrackingProtection = null;
+let browser = null;
+
+let {UrlClassifierTestUtils} = Cu.import("resource://testing-common/UrlClassifierTestUtils.jsm", {});
+
+registerCleanupFunction(function() {
+  TrackingProtection = browser = null;
+  UrlClassifierTestUtils.cleanupTestTrackers();
+  Services.prefs.clearUserPref(PREF);
+  Services.prefs.clearUserPref(PB_PREF);
+  while (gBrowser.tabs.length > 1) {
+    gBrowser.removeCurrentTab();
+  }
+});
+
+function waitForSecurityChange(numChanges = 1) {
+  let def = Promise.defer();
+  let n = 0;
+
+  let listener = {
+    onSecurityChange: function() {
+      n = n + 1;
+      info ("Recieved onSecurityChange event " + n + " of " + numChanges);
+      if (n >= numChanges) {
+        browser.removeProgressListener(listener);
+        def.resolve();
+      }
+    }
+  };
+  browser.addProgressListener(listener);
+
+  return def.promise;
+}
+
+function* testTrackingProtectionForBrowser() {
+  info("Load a test page not containing tracking elements");
+  let benignTab = browser.selectedTab = browser.addTab();
+  yield promiseTabLoadEvent(benignTab, BENIGN_PAGE);
+
+  ok (!TrackingProtection.icon.hasAttribute("state"), "icon: no state");
+  ok (TrackingProtection.icon.hasAttribute("animate"), "icon: animate");
+  is (TrackingProtection._loadingTab, benignTab, "Tab request detected");
+
+  info("Load a test page containing tracking elements");
+  let trackingTab = browser.selectedTab = browser.addTab();
+  yield promiseTabLoadEvent(trackingTab, TRACKING_PAGE);
+
+  ok (TrackingProtection.icon.hasAttribute("state"), "icon: state");
+  ok (TrackingProtection.icon.hasAttribute("animate"), "icon: animate");
+  is (TrackingProtection._loadingTab, trackingTab, "Tab request detected");
+
+  info("Switch from tracking -> benign tab");
+  let securityChanged = waitForSecurityChange();
+  browser.selectedTab = benignTab;
+  yield securityChanged;
+
+  ok (!TrackingProtection.icon.hasAttribute("state"), "icon: no state");
+  ok (!TrackingProtection.icon.hasAttribute("animate"), "icon: no animate");
+
+  info("Switch from benign -> tracking tab");
+  securityChanged = waitForSecurityChange();
+  browser.selectedTab = trackingTab;
+  yield securityChanged;
+
+  ok (TrackingProtection.icon.hasAttribute("state"), "icon: state");
+  ok (!TrackingProtection.icon.hasAttribute("animate"), "icon: no animate");
+
+  info("Reload tracking tab");
+  securityChanged = waitForSecurityChange(2);
+  browser.reload();
+  yield securityChanged;
+
+  ok (TrackingProtection.icon.hasAttribute("state"), "icon: state");
+  ok (TrackingProtection.icon.hasAttribute("animate"), "icon: animate");
+  is (TrackingProtection._loadingTab, trackingTab, "Tab request detected");
+}
+
+add_task(function* testNormalBrowsing() {
+  yield UrlClassifierTestUtils.addTestTrackers();
+
+  browser = gBrowser;
+
+  TrackingProtection = gBrowser.ownerGlobal.TrackingProtection;
+  ok (TrackingProtection, "TP is attached to the browser window");
+
+  Services.prefs.setBoolPref(PREF, true);
+  ok (TrackingProtection.enabled, "TP is enabled after setting the pref");
+
+  yield testTrackingProtectionForBrowser();
+});
+
+add_task(function* testPrivateBrowsing() {
+  let privateWin = yield promiseOpenAndLoadWindow({private: true}, true);
+  browser = privateWin.gBrowser;
+
+  TrackingProtection = browser.ownerGlobal.TrackingProtection;
+  ok (TrackingProtection, "TP is attached to the private window");
+
+  Services.prefs.setBoolPref(PB_PREF, true);
+  ok (TrackingProtection.enabled, "TP is enabled after setting the pref");
+
+  yield testTrackingProtectionForBrowser();
+
+  privateWin.close();
+});
diff --git a/browser/themes/shared/identity-block/identity-block.inc.css b/browser/themes/shared/identity-block/identity-block.inc.css
--- a/browser/themes/shared/identity-block/identity-block.inc.css
+++ b/browser/themes/shared/identity-block/identity-block.inc.css
@@ -43,16 +43,17 @@
 %endif
 }
 
 #identity-box {
   background-position: right;
   background-size: 1px;
   background-repeat: no-repeat;
   background-image: var(--identity-box-background-image);
+  overflow: hidden;
 }
 
 #identity-box:-moz-locale-dir(rtl) {
   background-position: left;
 }
 
 #identity-box:hover,
 #identity-box[open=true] {
@@ -70,24 +71,34 @@
 }
 
 /* TRACKING PROTECTION ICON */
 
 #tracking-protection-icon {
   width: 16px;
   height: 16px;
   list-style-image: url(chrome://browser/skin/tracking-protection-16.svg);
+  margin-left: 0;
+  opacity: 1;
 }
 
 #tracking-protection-icon[state="loaded-tracking-content"] {
   list-style-image: url(chrome://browser/skin/tracking-protection-disabled-16.svg);
 }
 
+#tracking-protection-icon[animate] {
+  transition: margin-left 200ms ease-out;
+}
+
 #tracking-protection-icon:not([state]) {
-  display: none;
+  margin-left: -16px;
+  pointer-events: none;
+  opacity: 0;
+  /* Only animate the shield in, when it disappears hide it immediately. */
+  transition: none;
 }
 
 /* MAIN IDENTITY ICON */
 
 #page-proxy-favicon {
   width: 16px;
   height: 16px;
   list-style-image: url(chrome://browser/skin/identity-not-secure.svg);
