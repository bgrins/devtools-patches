# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  1a54d668a1083421fadfd650ec49e9f4cd3c250a
Bug 1175858 - Tracking Protection shield should be animated in when content is blocked on the page;r=MattN

diff --git a/browser/base/content/browser-trackingprotection.js b/browser/base/content/browser-trackingprotection.js
--- a/browser/base/content/browser-trackingprotection.js
+++ b/browser/base/content/browser-trackingprotection.js
@@ -48,21 +48,29 @@ let TrackingProtection = {
   get enabledHistogram() {
     return Services.telemetry.getHistogramById("TRACKING_PROTECTION_ENABLED");
   },
 
   get eventsHistogram() {
     return Services.telemetry.getHistogramById("TRACKING_PROTECTION_EVENTS");
   },
 
-  onSecurityChange(state) {
+  onSecurityChange(state, isSimulated) {
     if (!this.enabled) {
       return;
     }
 
+    // Only animate the shield if the event was not fired directly from
+    // the tabbrowser (due to a browser change).
+    if (isSimulated) {
+      this.icon.removeAttribute("animate");
+    } else {
+      this.icon.setAttribute("animate", "true");
+    }
+
     let {
       STATE_BLOCKED_TRACKING_CONTENT, STATE_LOADED_TRACKING_CONTENT
     } = Ci.nsIWebProgressListener;
 
     for (let element of [this.icon, this.content]) {
       if (state & STATE_BLOCKED_TRACKING_CONTENT) {
         element.setAttribute("state", "blocked-tracking-content");
       } else if (state & STATE_LOADED_TRACKING_CONTENT) {
diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -4004,17 +4004,17 @@ var XULBrowserWindow = {
   get isImage () {
     delete this.isImage;
     return this.isImage = document.getElementById("isImage");
   },
 
   init: function () {
     // Initialize the security button's state and tooltip text.
     var securityUI = gBrowser.securityUI;
-    this.onSecurityChange(null, null, securityUI.state);
+    this.onSecurityChange(null, null, securityUI.state, true);
   },
 
   setJSStatus: function () {
     // unsupported
   },
 
   forceInitialBrowserRemote: function() {
     let initBrowser =
@@ -4352,27 +4352,37 @@ var XULBrowserWindow = {
     this.status = aMessage;
     this.updateStatusField();
   },
 
   // Properties used to cache security state used to update the UI
   _state: null,
   _lastLocation: null,
 
-  onSecurityChange: function (aWebProgress, aRequest, aState) {
+  // This is called in multiple ways:
+  //  1. Due to the nsIWebProgressListener.onSecurityChange notification.
+  //  2. Called by tabbrowser.xml when updating the current browser.
+  //  3. Called directly during this object's initializations.
+  // aRequest will be null always in case 2 and 3, and sometimes in case 1 (for
+  // instance, there won't be a request when STATE_BLOCKED_TRACKING_CONTENT is observed).
+  onSecurityChange: function (aWebProgress, aRequest, aState, aIsSimulated) {
     // Don't need to do anything if the data we use to update the UI hasn't
     // changed
     let uri = gBrowser.currentURI;
     let spec = uri.spec;
     if (this._state == aState &&
         this._lastLocation == spec)
       return;
     this._state = aState;
     this._lastLocation = spec;
 
+    if (typeof(aIsSimulated) != "boolean" && typeof(aIsSimulated) != "undefined") {
+      throw "onSecurityChange: aIsSimulated receieved an unexpected type";
+    }
+
     // aState is defined as a bitmask that may be extended in the future.
     // We filter out any unknown bits before testing for known values.
     const wpl = Components.interfaces.nsIWebProgressListener;
     const wpl_security_bits = wpl.STATE_IS_SECURE |
                               wpl.STATE_IS_BROKEN |
                               wpl.STATE_IS_INSECURE;
     var level;
 
@@ -4398,17 +4408,17 @@ var XULBrowserWindow = {
     // Make sure the "https" part of the URL is striked out or not,
     // depending on the current mixed active content blocking state.
     gURLBar.formatValue();
 
     try {
       uri = Services.uriFixup.createExposableURI(uri);
     } catch (e) {}
     gIdentityHandler.checkIdentity(this._state, uri);
-    TrackingProtection.onSecurityChange(this._state);
+    TrackingProtection.onSecurityChange(this._state, aIsSimulated);
   },
 
   // simulate all change notifications after switching tabs
   onUpdateCurrentBrowser: function XWB_onUpdateCurrentBrowser(aStateFlags, aStatus, aMessage, aTotalProgress) {
     if (FullZoom.updateBackgroundTabs)
       FullZoom.onLocationChange(gBrowser.currentURI, true);
     var nsIWebProgressListener = Components.interfaces.nsIWebProgressListener;
     var loadingDone = aStateFlags & nsIWebProgressListener.STATE_STOP;
diff --git a/browser/base/content/tabbrowser.xml b/browser/base/content/tabbrowser.xml
--- a/browser/base/content/tabbrowser.xml
+++ b/browser/base/content/tabbrowser.xml
@@ -1095,18 +1095,21 @@
             var webProgress = this.mCurrentBrowser.webProgress;
             var securityUI = this.mCurrentBrowser.securityUI;
 
             this._callProgressListeners(null, "onLocationChange",
                                         [webProgress, null, loc, 0], true,
                                         false);
 
             if (securityUI) {
+              // Include the true final argument to indicate that this event is
+              // simulated (instead of being observed by the webProgressListener).
               this._callProgressListeners(null, "onSecurityChange",
-                                          [webProgress, null, securityUI.state], true, false);
+                                          [webProgress, null, securityUI.state, true],
+                                          true, false);
             }
 
             var listener = this.mTabListeners[this.tabContainer.selectedIndex] || null;
             if (listener && listener.mStateFlags) {
               this._callProgressListeners(null, "onUpdateCurrentBrowser",
                                           [listener.mStateFlags, listener.mStatus,
                                            listener.mMessage, listener.mTotalProgress],
                                           true, false);
diff --git a/browser/base/content/test/general/browser.ini b/browser/base/content/test/general/browser.ini
--- a/browser/base/content/test/general/browser.ini
+++ b/browser/base/content/test/general/browser.ini
@@ -418,16 +418,18 @@ support-files =
   benignPage.html
 [browser_trackingUI_2.js]
 tags = trackingprotection
 support-files =
   trackingPage.html
   benignPage.html
 [browser_trackingUI_3.js]
 tags = trackingprotection
+[browser_trackingUI_4.js]
+tags = trackingprotection
 support-files =
   trackingPage.html
   benignPage.html
 [browser_typeAheadFind.js]
 skip-if = buildapp == 'mulet'
 [browser_unknownContentType_title.js]
 [browser_unloaddialogs.js]
 skip-if = e10s # Bug 1100700 - test relies on unload event firing on closed tabs, which it doesn't
diff --git a/browser/base/content/test/general/browser_trackingUI_1.js b/browser/base/content/test/general/browser_trackingUI_1.js
--- a/browser/base/content/test/general/browser_trackingUI_1.js
+++ b/browser/base/content/test/general/browser_trackingUI_1.js
@@ -28,17 +28,18 @@ registerCleanupFunction(function() {
     gBrowser.removeCurrentTab();
   }
 });
 
 function hidden(sel) {
   let win = browser.ownerGlobal;
   let el = win.document.querySelector(sel);
   let display = win.getComputedStyle(el).getPropertyValue("display", null);
-  return display === "none";
+  let opacity = win.getComputedStyle(el).getPropertyValue("opacity", null);
+  return display === "none" || opacity === "0";
 }
 
 function clickButton(sel) {
   let win = browser.ownerGlobal;
   let el = win.document.querySelector(sel);
   el.doCommand();
 }
 
diff --git a/browser/base/content/test/general/browser_trackingUI_4.js b/browser/base/content/test/general/browser_trackingUI_4.js
new file mode 100644
--- /dev/null
+++ b/browser/base/content/test/general/browser_trackingUI_4.js
@@ -0,0 +1,111 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+// Test that the Tracking Protection icon is properly animated in the identity
+// block when loading tabs and switching between tabs.
+// See also Bug 1175858.
+
+const {classes: Cc, interfaces: Ci, utils: Cu, results: Cr} = Components;
+const PREF = "privacy.trackingprotection.enabled";
+const PB_PREF = "privacy.trackingprotection.pbmode.enabled";
+const BENIGN_PAGE = "http://tracking.example.org/browser/browser/base/content/test/general/benignPage.html";
+const TRACKING_PAGE = "http://tracking.example.org/browser/browser/base/content/test/general/trackingPage.html";
+let TrackingProtection = null;
+let browser = null;
+
+let {UrlClassifierTestUtils} = Cu.import("resource://testing-common/UrlClassifierTestUtils.jsm", {});
+
+registerCleanupFunction(function() {
+  TrackingProtection = browser = null;
+  UrlClassifierTestUtils.cleanupTestTrackers();
+  Services.prefs.clearUserPref(PREF);
+  Services.prefs.clearUserPref(PB_PREF);
+  while (gBrowser.tabs.length > 1) {
+    gBrowser.removeCurrentTab();
+  }
+});
+
+function waitForSecurityChange(numChanges = 1) {
+  return new Promise(resolve => {
+    let n = 0;
+    let listener = {
+      onSecurityChange: function() {
+        n = n + 1;
+        info ("Recieved onSecurityChange event " + n + " of " + numChanges);
+        if (n >= numChanges) {
+          browser.removeProgressListener(listener);
+          resolve();
+        }
+      }
+    };
+    browser.addProgressListener(listener);
+  });
+}
+
+function* testTrackingProtectionAnimation() {
+  info("Load a test page not containing tracking elements");
+  let benignTab = yield BrowserTestUtils.openNewForegroundTab(browser, BENIGN_PAGE);
+
+  ok (!TrackingProtection.icon.hasAttribute("state"), "icon: no state");
+  ok (TrackingProtection.icon.hasAttribute("animate"), "icon: animate");
+
+  info("Load a test page containing tracking elements");
+  let trackingTab = yield BrowserTestUtils.openNewForegroundTab(browser, TRACKING_PAGE);
+
+  ok (TrackingProtection.icon.hasAttribute("state"), "icon: state");
+  ok (TrackingProtection.icon.hasAttribute("animate"), "icon: animate");
+
+  info("Switch from tracking -> benign tab");
+  let securityChanged = waitForSecurityChange();
+  browser.selectedTab = benignTab;
+  yield securityChanged;
+
+  ok (!TrackingProtection.icon.hasAttribute("state"), "icon: no state");
+  ok (!TrackingProtection.icon.hasAttribute("animate"), "icon: no animate");
+
+  info("Switch from benign -> tracking tab");
+  securityChanged = waitForSecurityChange();
+  browser.selectedTab = trackingTab;
+  yield securityChanged;
+
+  ok (TrackingProtection.icon.hasAttribute("state"), "icon: state");
+  ok (!TrackingProtection.icon.hasAttribute("animate"), "icon: no animate");
+
+  info("Reload tracking tab");
+  securityChanged = waitForSecurityChange(2);
+  browser.reload();
+  yield securityChanged;
+
+  ok (TrackingProtection.icon.hasAttribute("state"), "icon: state");
+  ok (TrackingProtection.icon.hasAttribute("animate"), "icon: animate");
+}
+
+add_task(function* testNormalBrowsing() {
+  yield UrlClassifierTestUtils.addTestTrackers();
+
+  browser = gBrowser;
+
+  TrackingProtection = gBrowser.ownerGlobal.TrackingProtection;
+  ok (TrackingProtection, "TP is attached to the browser window");
+
+  Services.prefs.setBoolPref(PREF, true);
+  ok (TrackingProtection.enabled, "TP is enabled after setting the pref");
+
+  yield testTrackingProtectionAnimation();
+});
+
+add_task(function* testPrivateBrowsing() {
+  let privateWin = yield promiseOpenAndLoadWindow({private: true}, true);
+  browser = privateWin.gBrowser;
+
+  TrackingProtection = browser.ownerGlobal.TrackingProtection;
+  ok (TrackingProtection, "TP is attached to the private window");
+
+  Services.prefs.setBoolPref(PB_PREF, true);
+  ok (TrackingProtection.enabled, "TP is enabled after setting the pref");
+
+  yield testTrackingProtectionAnimation();
+
+  privateWin.close();
+});
diff --git a/browser/themes/shared/identity-block/identity-block.inc.css b/browser/themes/shared/identity-block/identity-block.inc.css
--- a/browser/themes/shared/identity-block/identity-block.inc.css
+++ b/browser/themes/shared/identity-block/identity-block.inc.css
@@ -46,16 +46,17 @@
 #identity-box {
   background-position: right;
   background-size: 1px;
   background-repeat: no-repeat;
   background-image: var(--identity-box-background-image);
   font-size: .9em;
   padding: 2px 5px;
   margin-inline-end: 4px;
+  overflow: hidden;
 }
 
 #identity-box:-moz-locale-dir(rtl) {
   background-position: left;
 }
 
 #identity-box:hover,
 #identity-box[open=true] {
@@ -114,24 +115,34 @@
 
 /* TRACKING PROTECTION ICON */
 
 #tracking-protection-icon {
   width: 16px;
   height: 16px;
   margin-inline-end: 2px;
   list-style-image: url(chrome://browser/skin/tracking-protection-16.svg);
+  margin-left: 0;
+  opacity: 1;
 }
 
 #tracking-protection-icon[state="loaded-tracking-content"] {
   list-style-image: url(chrome://browser/skin/tracking-protection-disabled-16.svg);
 }
 
+#tracking-protection-icon[animate] {
+  transition: margin-left 200ms ease-out;
+}
+
 #tracking-protection-icon:not([state]) {
-  display: none;
+  margin-left: -16px;
+  pointer-events: none;
+  opacity: 0;
+  /* Only animate the shield in, when it disappears hide it immediately. */
+  transition: none;
 }
 
 /* MAIN IDENTITY ICON */
 
 #page-proxy-favicon {
   width: 16px;
   height: 16px;
   list-style-image: url(chrome://browser/skin/identity-not-secure.svg);
