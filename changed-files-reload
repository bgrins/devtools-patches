# HG changeset patch
# Parent b7bab8b058cb4c3ace56b9b06a231e8845680326
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 1033853 - Do not reload files that have changed in project editor;r=harth

diff --git a/browser/devtools/projecteditor/lib/editors.js b/browser/devtools/projecteditor/lib/editors.js
--- a/browser/devtools/projecteditor/lib/editors.js
+++ b/browser/devtools/projecteditor/lib/editors.js
@@ -35,16 +35,21 @@ var ItchEditor = Class({
   toString: function() {
     return this.label || "";
   },
 
   emit: function(name, ...args) {
     emit(this, name, ...args);
   },
 
+  /* Does the editor not have any unsaved changes? */
+  isClean: function() {
+    return true;
+  },
+
   /**
    * Initialize the editor with a single host.  This should be called
    * by objects extending this object with:
    * ItchEditor.prototype.initialize.apply(this, arguments)
    */
   initialize: function(host) {
     this.doc = host.document;
     this.label = "";
@@ -140,16 +145,23 @@ var TextEditor = Class({
         let command = this.projectEditorCommandset.querySelector("#" + key.getAttribute("command"));
         command.dispatchEvent(event);
       };
     });
 
     return extraKeys;
   },
 
+  isClean: function() {
+    if (!this.editor.isAppended()) {
+      return true;
+    }
+    return this.editor.isClean();
+  },
+
   initialize: function(document, mode=Editor.modes.text) {
     ItchEditor.prototype.initialize.apply(this, arguments);
     this.label = mode.name;
     this.editor = new Editor({
       mode: mode,
       lineNumbers: true,
       extraKeys: this.extraKeys,
       themeSwitching: false,
diff --git a/browser/devtools/projecteditor/lib/plugins/dirty/dirty.js b/browser/devtools/projecteditor/lib/plugins/dirty/dirty.js
--- a/browser/devtools/projecteditor/lib/plugins/dirty/dirty.js
+++ b/browser/devtools/projecteditor/lib/plugins/dirty/dirty.js
@@ -17,19 +17,18 @@ var DirtyPlugin = Class({
   onEditorChange: function(editor) {
     // Only run on a TextEditor
     if (!editor || !editor.editor) {
       return;
     }
 
     // Dont' force a refresh unless the dirty state has changed...
     let priv = this.priv(editor);
-    let clean = editor.editor.isClean();
+    let clean = editor.isClean()
     if (priv.isClean !== clean) {
-
       let resource = editor.shell.resource;
       emit(resource, "label-change", resource);
       priv.isClean = clean;
     }
   },
 
   onAnnotate: function(resource, editor, elt) {
     if (editor && editor.editor && !editor.editor.isClean()) {
diff --git a/browser/devtools/projecteditor/lib/shells.js b/browser/devtools/projecteditor/lib/shells.js
--- a/browser/devtools/projecteditor/lib/shells.js
+++ b/browser/devtools/projecteditor/lib/shells.js
@@ -187,17 +187,20 @@ var ShellDeck = Class({
     // Don't fire another activate if this is already the active shell
     if (this._activeShell != shell) {
       if (this._activeShell) {
         emit(this, "editor-deactivated", this._activeShell.editor, this._activeShell.resource);
       }
       this.deck.selectedPanel = shell.elt;
       this._activeShell = shell;
 
-      shell.load();
+      // Only reload the shell if the editor doesn't have local changes.
+      if (shell.editor.isClean()) {
+        shell.load();
+      }
       shell.editorLoaded.then(() => {
         // Handle case where another shell has been requested before this
         // one is finished loading.
         if (this._activeShell === shell) {
           emit(this, "editor-activated", shell.editor, shell.resource);
         }
       });
     }
diff --git a/browser/devtools/projecteditor/test/browser_projecteditor_external_change.js b/browser/devtools/projecteditor/test/browser_projecteditor_external_change.js
--- a/browser/devtools/projecteditor/test/browser_projecteditor_external_change.js
+++ b/browser/devtools/projecteditor/test/browser_projecteditor_external_change.js
@@ -17,19 +17,51 @@ let test = asyncTest(function*() {
   ok (projecteditor.currentEditor, "There is an editor for projecteditor");
   let resources = projecteditor.project.allResources();
 
   for (let data of helperEditData) {
     info ("Processing " + data.path);
     let resource = resources.filter(r=>r.basename === data.basename)[0];
     yield selectFile(projecteditor, resource);
     yield testChangeFileExternally(projecteditor, getTempFile(data.path).path, data.newContent);
+    yield testChangeUnsavedFileExternally(projecteditor, getTempFile(data.path).path, data.newContent + "[changed]");
   }
 });
 
+function testChangeUnsavedFileExternally(projecteditor, filePath, newData) {
+  info ("Testing file external changes for: " + filePath);
+
+  let editor = projecteditor.currentEditor;
+  let resource = projecteditor.resourceFor(editor);
+  let initialData = yield getFileData(filePath);
+
+  is (resource.path, filePath, "Resource path is set correctly");
+  is (editor.editor.getText(), initialData, "Editor is loaded with correct file contents");
+
+  info ("Editing but not saving file in project editor");
+  ok (editor.isClean(), "Editor is clean");
+  editor.editor.setText("foobar");
+  ok (!editor.isClean(), "Editor is dirty");
+
+  info ("Editor has been selected, writing to file externally");
+  yield writeToFile(resource.path, newData);
+
+  info ("Selecting another resource, then reselecting this one");
+  projecteditor.projectTree.selectResource(resource.store.root);
+  yield onceEditorActivated(projecteditor);
+  projecteditor.projectTree.selectResource(resource);
+  yield onceEditorActivated(projecteditor);
+
+  let editor = projecteditor.currentEditor;
+  info ("Checking to make sure the editor is now populated correctly");
+  is (editor.editor.getText(), "foobar", "Editor has not been updated with new file contents");
+
+  info ("Finished checking saving for " + filePath);
+}
+
 function testChangeFileExternally(projecteditor, filePath, newData) {
   info ("Testing file external changes for: " + filePath);
 
   let editor = projecteditor.currentEditor;
   let resource = projecteditor.resourceFor(editor);
   let initialData = yield getFileData(filePath);
 
   is (resource.path, filePath, "Resource path is set correctly");
diff --git a/browser/devtools/sourceeditor/editor.js b/browser/devtools/sourceeditor/editor.js
--- a/browser/devtools/sourceeditor/editor.js
+++ b/browser/devtools/sourceeditor/editor.js
@@ -334,16 +334,24 @@ Editor.prototype = {
     env.setAttribute("src", CM_IFRAME);
     el.appendChild(env);
 
     this.once("destroy", () => el.removeChild(env));
     return def.promise;
   },
 
   /**
+   * Returns a boolean indicating whether the editor is ready to
+   * use.  Use appendTo(el).then(() => {}) for most cases
+   */
+  isAppended: function() {
+    return editors.has(this);
+  },
+
+  /**
    * Returns the currently active highlighting mode.
    * See Editor.modes for the list of all suppoert modes.
    */
   getMode: function () {
     return this.getOption("mode");
   },
 
   /**
