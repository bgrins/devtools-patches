# HG changeset patch
# Parent 27a33fd8f2e5a8cd646226b405da7f2349ca6ca9
# User Brian Grinstead <bgrinstead@mozilla.com>
test case


diff --git a/browser/devtools/inspector/test/browser_inspector_breadcrumbs.js b/browser/devtools/inspector/test/browser_inspector_breadcrumbs.js
--- a/browser/devtools/inspector/test/browser_inspector_breadcrumbs.js
+++ b/browser/devtools/inspector/test/browser_inspector_breadcrumbs.js
@@ -1,73 +1,26 @@
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
+http://creativecommons.org/publicdomain/zero/1.0/ */
+ 
 "use strict";
-
-// Test that the breadcrumbs widget content is correct.
-
-const TEST_URI = TEST_URL_ROOT + "doc_inspector_breadcrumbs.html";
-const NODES = [
-  {selector: "#i1111", result: "i1 i11 i111 i1111"},
-  {selector: "#i22", result: "i2 i22 i221"},
-  {selector: "#i2111", result: "i2 i21 i211 i2111"},
-  {selector: "#i21", result: "i2 i21 i211 i2111"},
-  {selector: "#i22211", result: "i2 i22 i222 i2221 i22211"},
-  {selector: "#i22", result: "i2 i22 i222 i2221 i22211"},
-];
-
+ 
+// Test that switching to the inspector panel and not waiting for it to be fully
+// loaded doesn't fail the test with unhandled rejected promises.
+ 
 add_task(function*() {
-  let { inspector } = yield openInspectorForURL(TEST_URI);
-  let container = inspector.panelDoc.getElementById("inspector-breadcrumbs");
-
-  for (let node of NODES) {
-    info("Testing node " + node.selector);
-
-    info("Selecting node and waiting for breadcrumbs to update");
-    let breadcrumbsUpdated = inspector.once("breadcrumbs-updated");
-    yield selectNode(node.selector, inspector);
-    yield breadcrumbsUpdated;
-
-    info("Performing checks for node " + node.selector);
-    let buttonsLabelIds = node.result.split(" ");
-
-    // html > body > â€¦
-    is(container.childNodes.length, buttonsLabelIds.length + 2,
-      "Node " + node.selector + ": Items count");
-
-    for (let i = 2; i < container.childNodes.length; i++) {
-      let expectedId = "#" + buttonsLabelIds[i - 2];
-      let button = container.childNodes[i];
-      let labelId = button.querySelector(".breadcrumbs-widget-item-id");
-      is(labelId.textContent, expectedId,
-        "Node #" + node.selector + ": button " + i + " matches");
-    }
-
-    let checkedButton = container.querySelector("button[checked]");
-    let labelId = checkedButton.querySelector(".breadcrumbs-widget-item-id");
-    let id = inspector.selection.nodeFront.id;
-    is(labelId.textContent, "#" + id,
-      "Node #" + node.selector + ": selection matches");
-  }
-
-  yield testPseudoElements(inspector, container);
-});
-
-function* testPseudoElements(inspector, container) {
-  info ("Checking for pseudo elements");
-
-  let pseudoParent = yield getNodeFront("#pseudo-container", inspector);
-  let children = yield inspector.walker.children(pseudoParent);
-  is (children.nodes.length, 2, "Pseudo children returned from walker");
-
-  let beforeElement = children.nodes[0];
-  let breadcrumbsUpdated = inspector.once("breadcrumbs-updated");
-  yield selectNode(beforeElement, inspector);
-  yield breadcrumbsUpdated;
-  is(container.childNodes[3].textContent, "::before", "::before shows up in breadcrumb");
-
-  let afterElement = children.nodes[1];
-  breadcrumbsUpdated = inspector.once("breadcrumbs-updated");
-  yield selectNode(afterElement, inspector);
-  yield breadcrumbsUpdated;
-  is(container.childNodes[3].textContent, "::after", "::before shows up in breadcrumb");
-}
+// At least one assertion is needed to avoid failing the test, but really,
+// what we're interested in is just having the test pass when switching to the
+// inspector.
+ok(true);
+ 
+yield addTab("data:text/html;charset=utf-8,test inspector destroy");
+ 
+info("Open the toolbox on the debugger panel");
+let target = TargetFactory.forTab(gBrowser.selectedTab);
+let toolbox = yield gDevTools.showToolbox(target, "jsdebugger");
+ 
+info("Switch to the inspector panel and immediately end the test");
+let onInspectorSelected = toolbox.once("inspector-selected");
+toolbox.selectTool("inspector");
+let inspector = yield onInspectorSelected;
+});
\ No newline at end of file
