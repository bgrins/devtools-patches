# HG changeset patch
# Parent 3782e258565b9c2fc4ceb5c228e91313dc44598e
# User Brian Grinstead <bgrinstead@mozilla.com>
reduced test case

diff --git a/browser/base/content/test/general/browser_action_searchengine.js b/browser/base/content/test/general/browser_action_searchengine.js
--- a/browser/base/content/test/general/browser_action_searchengine.js
+++ b/browser/base/content/test/general/browser_action_searchengine.js
@@ -1,53 +1,73 @@
 /* Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/ */
 
-let gOriginalEngine;
 
-function* promise_first_result(inputText) {
-  gURLBar.focus();
-  gURLBar.value = inputText.slice(0, -1);
-  EventUtils.synthesizeKey(inputText.slice(-1) , {});
-  yield promiseSearchComplete();
-  // On Linux, the popup may or may not be open at this stage. So we need
-  // additional checks to ensure we wait long enough.
-  yield promisePopupShown(gURLBar.popup);
+let styleSheetAdder = {
+  _prefName: "devtools.debugger.remote-enabled",
+  styleSheetLocation: "chrome://browser/skin/devedition.css",
+  styleSheet: null,
+  defaultThemeID: "{972ce4c6-7e08-4474-a285-3208198ce6fd}",
 
-  let firstResult = gURLBar.popup.richlistbox.firstChild;
-  return firstResult;
+  init: function () {
+    Services.prefs.addObserver(this._prefName, this, false);
+  },
+
+  observe: function (subject, topic, data) {
+    if (topic == "nsPref:changed") {
+      this._updateStyleSheetFromPrefs();
+    }
+  },
+
+  _updateStyleSheetFromPrefs: function() {
+    let deveditionThemeEnabled = Services.prefs.getBoolPref(this._prefName);
+    this._toggleStyleSheet(deveditionThemeEnabled);
+  },
+
+  handleEvent: function() {
+    this.styleSheet.removeEventListener("load", this);
+  },
+
+  _toggleStyleSheet: function(deveditionThemeEnabled) {
+    if (deveditionThemeEnabled && !this.styleSheet) {
+      let styleSheetAttr = `href="${this.styleSheetLocation}" type="text/css"`;
+      this.styleSheet = document.createProcessingInstruction(
+        'xml-stylesheet', styleSheetAttr);
+      this.styleSheet.addEventListener("load", this);
+      document.insertBefore(this.styleSheet, document.documentElement);
+    } else if (!deveditionThemeEnabled && this.styleSheet) {
+      this.styleSheet.removeEventListener("load", this);
+      this.styleSheet.remove();
+      this.styleSheet = null;
+    }
+  }
+};
+
+
+const PREF_DEVEDITION_THEME = "browser.devedition.theme.enabled";
+
+function test() {
+  waitForExplicitFinish();
+
+  Services.prefs.setBoolPref(PREF_DEVEDITION_THEME, true);
+  ok (DevEdition.styleSheet, "The devedition stylesheet has been added.");
+  Services.prefs.setBoolPref(PREF_DEVEDITION_THEME, false);
+  ok (!DevEdition.styleSheet, "The devedition stylesheet has been removed.");
+
+  // addAndRemoveStylesheet();
+  // addAndRemoveStylesheet();
+  // addAndRemoveStylesheet();
+  // addAndRemoveStylesheet();
 }
 
-add_task(function* () {
-  // This test is only relevant if UnifiedComplete is enabled.
-  if (!Services.prefs.getBoolPref("browser.urlbar.unifiedcomplete"))
-    return;
-
-  Services.search.addEngineWithDetails("MozSearch", "", "", "", "GET",
-                                       "http://example.com/?q={searchTerms}");
-  let engine = Services.search.getEngineByName("MozSearch");
-  gOriginalEngine = Services.search.currentEngine;
-  Services.search.currentEngine = engine;
-
-  let tab = gBrowser.selectedTab = gBrowser.addTab();
-
-  registerCleanupFunction(() => {
-    Services.search.currentEngine = gOriginalEngine;
-    let engine = Services.search.getEngineByName("MozSearch");
-    Services.search.removeEngine(engine);
-
-    try {
-      gBrowser.removeTab(tab);
-    } catch(ex) { /* tab may have already been closed in case of failure */ }
-
-    return promiseClearHistory();
+function addAndRemoveStylesheet() {
+  let styleSheetAttr = 'href="chrome://browser/skin/devedition.css" type="text/css"';
+  let styleSheet = document.createProcessingInstruction(
+    'xml-stylesheet', styleSheetAttr);
+  styleSheet.addEventListener("load", function() {
+    gBrowser.tabContainer._positionPinnedTabs();
+    ToolbarIconColor.inferFromText();
+    styleSheet.remove();
   });
-
-  let result = yield promise_first_result("open a search");
-  isnot(result, null, "Should have a result");
-  is(result.hasAttribute("image"), false, "Result shouldn't have an image attribute");
-
-  let tabPromise = promiseTabLoaded(gBrowser.selectedTab);
-  EventUtils.synthesizeMouseAtCenter(result, {});
-  yield tabPromise;
-
-  is(gBrowser.selectedBrowser.currentURI.spec, "http://example.com/?q=open+a+search");
-});
+  document.insertBefore(styleSheet, document.documentElement);
+    // styleSheet.remove();
+}
\ No newline at end of file
diff --git a/browser/base/content/test/general/browser_devedition.js b/browser/base/content/test/general/browser_devedition.js
--- a/browser/base/content/test/general/browser_devedition.js
+++ b/browser/base/content/test/general/browser_devedition.js
@@ -39,31 +39,31 @@ function startTests() {
   ok (!DevEdition.styleSheet, "The devedition stylesheet has been removed when a lightweight theme is applied.");
 
   info ("Removing a lightweight theme.");
   Services.prefs.setBoolPref(PREF_LWTHEME, false);
   ok (DevEdition.styleSheet, "The devedition stylesheet has been added when a lightweight theme is removed.");
 
   // There are no listeners for the complete theme pref since applying the theme
   // requires a restart.
-  info ("Setting general.skins.selectedSkin to a custom string.");
-  Services.prefs.setCharPref(PREF_THEME, "custom-theme");
-  ok (DevEdition.styleSheet, "The devedition stylesheet is still here when a complete theme is added.");
-
-  info ("Resetting general.skins.selectedSkin to default value.");
-  Services.prefs.clearUserPref(PREF_THEME);
-  ok (DevEdition.styleSheet, "The devedition stylesheet is still here when a complete theme is removed.");
+  // info ("Setting general.skins.selectedSkin to a custom string.");
+//   Services.prefs.setCharPref(PREF_THEME, "custom-theme");
+//   ok (DevEdition.styleSheet, "The devedition stylesheet is still here when a complete theme is added.");
+//   info ("Resetting general.skins.selectedSkin to default value.");
+//   Services.prefs.clearUserPref(PREF_THEME);
+//   ok (DevEdition.styleSheet, "The devedition stylesheet is still here when a complete theme is removed.");
+// ok(false, Services.prefs.getCharPref(PREF_THEME));
 
   info ("Setting browser.devedition.theme.enabled to false.");
   Services.prefs.setBoolPref(PREF_DEVEDITION_THEME, false);
   ok (!DevEdition.styleSheet, "The devedition stylesheet has been removed.");
 
-  testDevtoolsTheme();
-  testLightweightThemePreview();
-  finish();
+  // testDevtoolsTheme();
+  // testLightweightThemePreview();
+  // finish();
 }
 
 function testDevtoolsTheme() {
   info ("Checking that Australis is shown when the light devtools theme is applied.");
 
   Services.prefs.setBoolPref(PREF_DEVEDITION_THEME, true);
   ok (DevEdition.styleSheet, "The devedition stylesheet exists.");
 
