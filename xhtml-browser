# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  547144f5596c1a146b208d68d93950a6313080ca
Bug XXX - Migrate browser.xul to xhtml

diff --git a/browser/app/profile/firefox.js b/browser/app/profile/firefox.js
--- a/browser/app/profile/firefox.js
+++ b/browser/app/profile/firefox.js
@@ -16,17 +16,17 @@
 #
 
 #ifdef XP_UNIX
 #ifndef XP_MACOSX
 #define UNIX_BUT_NOT_MAC
 #endif
 #endif
 
-pref("browser.chromeURL","chrome://browser/content/");
+pref("browser.chromeURL","chrome://browser/content/browser.xhtml");
 pref("browser.hiddenWindowChromeURL", "chrome://browser/content/hiddenWindow.xul");
 
 // Enables some extra Extension System Logging (can reduce performance)
 pref("extensions.logging.enabled", false);
 
 // Disables strict compatibility, making addons compatible-by-default.
 pref("extensions.strictCompatibility", false);
 
diff --git a/browser/base/content/browser.css b/browser/base/content/browser.css
--- a/browser/base/content/browser.css
+++ b/browser/base/content/browser.css
@@ -1,38 +1,40 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 @namespace url("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul");
 @namespace html url("http://www.w3.org/1999/xhtml");
 
-:root {
+html|html {
   --panelui-subview-transition-duration: 150ms;
   --lwt-additional-images: none;
   --lwt-background-alignment: right top;
   --lwt-background-tiling: no-repeat;
+  width: 100vw;
+  height: 100vh;
 }
 
-:root:-moz-lwtheme {
+html|html:-moz-lwtheme {
   color: var(--lwt-text-color) !important;
 }
 
-:root:-moz-lwtheme {
+html|html:-moz-lwtheme {
   background-color: var(--lwt-accent-color) !important;
   background-image: var(--lwt-additional-images) !important;
   background-position: var(--lwt-background-alignment) !important;
   background-repeat: var(--lwt-background-tiling) !important;
 }
 
-:root:-moz-lwtheme[lwtheme-image] {
+html|html:-moz-lwtheme[lwtheme-image] {
   background-image: var(--lwt-header-image), var(--lwt-additional-images) !important;
 }
 
-:root:-moz-lwtheme:-moz-window-inactive {
+html|html:-moz-lwtheme:-moz-window-inactive {
   background-color: var(--lwt-accent-color-inactive, var(--lwt-accent-color)) !important;
 }
 
 #main-window:not([chromehidden~="toolbar"]) {
 %ifdef XP_MACOSX
   min-width: 335px;
 %else
   min-width: 300px;
@@ -165,17 +167,17 @@ panelview[mainview] > .panel-header {
   -moz-box-flex: 100;
   max-width: 225px;
   min-width: var(--tab-min-width);
   width: 0;
   transition: min-width 100ms ease-out,
               max-width 100ms ease-out;
 }
 
-:root[uidensity=touch] .tabbrowser-tab:not([pinned]) {
+html|html[uidensity=touch] .tabbrowser-tab:not([pinned]) {
   /* Touch mode needs additional space for the close button. */
   min-width: calc(var(--tab-min-width) + 10px);
 }
 
 .tabbrowser-tab:not([pinned]):not([fadein]) {
   max-width: 0.1px;
   min-width: 0.1px;
   visibility: hidden;
@@ -512,17 +514,17 @@ toolbar:not(#TabsToolbar) > #personal-bo
 }
 
 %ifdef XP_MACOSX
 #main-window[inFullscreen="true"] {
   padding-top: 0; /* override drawintitlebar="true" */
 }
 %endif
 
-:root[lwthemefooter=true] #browser-bottombox:-moz-lwtheme {
+html|html[lwthemefooter=true] #browser-bottombox:-moz-lwtheme {
   background-repeat: no-repeat;
   background-position: bottom left;
   background-color: var(--lwt-accent-color);
   background-image: var(--lwt-footer-image);
 }
 
 /* Hide menu elements intended for keyboard access support */
 #main-menubar[openedwithkey=false] .show-only-for-keyboard {
diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -2243,17 +2243,17 @@ function openLocation() {
   let win = getTopWin();
   if (win) {
     win.focus();
     win.openLocation();
     return;
   }
 
   // There are no open browser windows; open a new one.
-  window.openDialog("chrome://browser/content/", "_blank",
+  window.openDialog(Services.prefs.getCharPref("browser.chromeURL"), "_blank",
                     "chrome,all,dialog=no", BROWSER_NEW_TAB_URL);
 }
 
 function BrowserOpenTab(event) {
   let where = "tab";
   let relatedToCurrent = false;
 
   if (event) {
@@ -4307,20 +4307,20 @@ function OpenBrowserWindow(options) {
   // set, then extract the current charset menu setting from the current document and use it to
   // initialize the new browser window...
   var win;
   if (window && (wintype == "navigator:browser") && window.content && window.content.document) {
     var DocCharset = window.content.document.characterSet;
     let charsetArg = "charset=" + DocCharset;
 
     // we should "inherit" the charset menu setting in a new window
-    win = window.openDialog("chrome://browser/content/", "_blank", "chrome,all,dialog=no" + extraFeatures, defaultArgs, charsetArg);
+    win = window.openDialog(Services.prefs.getCharPref("browser.chromeURL"), "_blank", "chrome,all,dialog=no" + extraFeatures, defaultArgs, charsetArg);
   } else {
     // forget about the charset information.
-    win = window.openDialog("chrome://browser/content/", "_blank", "chrome,all,dialog=no" + extraFeatures, defaultArgs);
+    win = window.openDialog(Services.prefs.getCharPref("browser.chromeURL"), "_blank", "chrome,all,dialog=no" + extraFeatures, defaultArgs);
   }
 
   win.addEventListener("MozAfterPaint", () => {
     TelemetryStopwatch.finish("FX_NEW_WINDOW_MS", telemetryObj);
     if (Services.prefs.getIntPref("browser.startup.page") == 1
         && defaultArgs == HomePage.get()) {
       // A notification for when a user has triggered their homepage. This is used
       // to display a doorhanger explaining that an extension has modified the
diff --git a/browser/base/content/browser.xul b/browser/base/content/browser.xhtml
rename from browser/base/content/browser.xul
rename to browser/base/content/browser.xhtml
--- a/browser/base/content/browser.xul
+++ b/browser/base/content/browser.xhtml
@@ -22,26 +22,26 @@
 <?xml-stylesheet href="chrome://browser/skin/downloads/downloads.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/skin/searchbar.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/skin/places/places.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/skin/places/editBookmark.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/skin/compacttheme.css" type="text/css" alternate="yes" title="Light/Dark"?>
 
 # All DTD information is stored in a separate file so that it can be shared by
 # hiddenWindow.xul.
-<!DOCTYPE window [
+<!DOCTYPE html [
 #include browser-doctype.inc
 ]>
 
-<window id="main-window"
+<html id="main-window"
+        xmlns="http://www.w3.org/1999/xhtml"
         xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
-        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
         onload="gBrowserInit.onLoad()" onunload="gBrowserInit.onUnload()" onclose="return WindowIsClosing();"
         title="&mainWindow.title;"
         title_normal="&mainWindow.title;"
 #ifdef XP_MACOSX
         title_privatebrowsing="&mainWindow.title;&mainWindow.titlemodifiermenuseparator;&mainWindow.titlePrivateBrowsingSuffix;"
         titledefault="&mainWindow.title;"
         titlemodifier=""
         titlemodifier_normal=""
@@ -62,22 +62,24 @@
         windowtype="navigator:browser"
         macanimationtype="document"
         screenX="4" screenY="4"
         fullscreenbutton="true"
         sizemode="normal"
         retargetdocumentfocus="urlbar"
         persist="screenX screenY width height sizemode">
 
+<vbox xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
+
 # All JS files which are needed by browser.xul and other top level windows to
 # support MacOS specific features *must* go into the global-scripts.inc file so
 # that they can be shared with macWindow.inc.xul.
 #include global-scripts.inc
 
-<script type="application/javascript">
+<script type="text/javascript" xmlns="http://www.w3.org/1999/xhtml">
   Services.scriptloader.loadSubScript("chrome://global/content/contentAreaUtils.js", this);
   Services.scriptloader.loadSubScript("chrome://browser/content/tabbrowser.js", this);
 </script>
 
 # All sets except for popupsets (commands, keys, stringbundles and broadcasters)
 # *must* go into the browser-sets.inc file so that they can be shared with other
 # top level windows in macWindow.inc.xul.
 #include browser-sets.inc
@@ -1303,9 +1305,10 @@
       &pointerlockWarning.generic.label;
     </html:div>
   </html:div>
 
   <vbox id="browser-bottombox" layer="true">
     <notificationbox id="global-notificationbox" notificationside="bottom"/>
   </vbox>
 
-</window>
+</vbox>
+</html>
diff --git a/browser/base/content/global-scripts.inc b/browser/base/content/global-scripts.inc
--- a/browser/base/content/global-scripts.inc
+++ b/browser/base/content/global-scripts.inc
@@ -2,17 +2,17 @@
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 # If you update this list, you may need to add a mapping within the following
 # file so that ESLint works correctly:
 # tools/lint/eslint/eslint-plugin-mozilla/lib/environments/browser-window.js
 
-<script type="application/javascript">
+<script type="text/javascript" xmlns="http://www.w3.org/1999/xhtml">
 Components.utils.import("resource://gre/modules/Services.jsm");
 
 for (let script of [
   "chrome://browser/content/browser.js",
 
   "chrome://browser/content/browser-captivePortal.js",
   "chrome://browser/content/browser-compacttheme.js",
   "chrome://browser/content/browser-feeds.js",
diff --git a/browser/base/content/test/performance/browser_urlbar_keyed_search.js b/browser/base/content/test/performance/browser_urlbar_keyed_search.js
--- a/browser/base/content/test/performance/browser_urlbar_keyed_search.js
+++ b/browser/base/content/test/performance/browser_urlbar_keyed_search.js
@@ -83,25 +83,25 @@ const EXPECTED_REFLOWS_FIRST_OPEN = [
 
 // These extra reflows happen on beta/release as one of the default bookmarks in
 // bookmarks.html.in has a long URL.
 if (AppConstants.RELEASE_OR_BETA) {
   EXPECTED_REFLOWS_FIRST_OPEN.push({
     stack: [
       "_handleOverflow@chrome://global/content/bindings/autocomplete.xml",
       "_onUnderflow@chrome://global/content/bindings/autocomplete.xml",
-      "onunderflow@chrome://browser/content/browser.xul",
+      "onunderflow@chrome://browser/content/browser.xhtml",
     ],
     maxCount: 6,
   });
   EXPECTED_REFLOWS_FIRST_OPEN.push({
     stack: [
       "_handleOverflow@chrome://global/content/bindings/autocomplete.xml",
       "_onOverflow@chrome://global/content/bindings/autocomplete.xml",
-      "onoverflow@chrome://browser/content/browser.xul",
+      "onoverflow@chrome://browser/content/browser.xhtml",
     ],
     maxCount: 6,
   });
   EXPECTED_REFLOWS_FIRST_OPEN.push({
     stack: [
       "_handleOverflow@chrome://global/content/bindings/autocomplete.xml",
       "_adjustAcItem@chrome://global/content/bindings/autocomplete.xml",
       "_appendCurrentResult@chrome://global/content/bindings/autocomplete.xml",
diff --git a/browser/base/content/test/static/browser_all_files_referenced.js b/browser/base/content/test/static/browser_all_files_referenced.js
--- a/browser/base/content/test/static/browser_all_files_referenced.js
+++ b/browser/base/content/test/static/browser_all_files_referenced.js
@@ -571,17 +571,17 @@ add_task(async function checkAllTheFiles
     uri = convertToCodeURI(uri.spec);
     if ((uri.startsWith("chrome://") || uri.startsWith("resource://")) &&
         isDevtools == hasDevtoolsPrefix(uri))
       chromeFiles.push(uri);
   }
 
   if (isDevtools) {
     // chrome://devtools/skin/devtools-browser.css is included from browser.xul
-    gReferencesFromCode.set("chrome://browser/content/browser.xul", null);
+    gReferencesFromCode.set("chrome://browser/content/browser.xhtml", null);
     // devtools' css is currently included from browser.css, see bug 1204810.
     gReferencesFromCode.set("chrome://browser/skin/browser.css", null);
   }
 
   let isUnreferenced = file => {
     if (gExceptionPaths.some(e => file.startsWith(e)))
       return false;
     if (gReferencesFromCode.has(file)) {
diff --git a/browser/base/content/test/webrtc/get_user_media_content_script.js b/browser/base/content/test/webrtc/get_user_media_content_script.js
--- a/browser/base/content/test/webrtc/get_user_media_content_script.js
+++ b/browser/base/content/test/webrtc/get_user_media_content_script.js
@@ -17,17 +17,17 @@ const kObservedTopics = [
   "recording-window-ended"
 ];
 
 var gObservedTopics = {};
 
 function ignoreEvent(aSubject, aTopic, aData) {
   // With e10s disabled, our content script receives notifications for the
   // preview displayed in our screen sharing permission prompt; ignore them.
-  const kBrowserURL = "chrome://browser/content/browser.xul";
+  const kBrowserURL = "chrome://browser/content/browser.xhtml";
   const nsIPropertyBag = Ci.nsIPropertyBag;
   if (aTopic == "recording-device-events" &&
       aSubject.QueryInterface(nsIPropertyBag).getProperty("requestURL") == kBrowserURL) {
     return true;
   }
   if (aTopic == "recording-window-ended") {
     let win = Services.wm.getOuterWindowWithId(aData).top;
     if (win.document.documentURI == kBrowserURL)
diff --git a/browser/base/content/utilityOverlay.js b/browser/base/content/utilityOverlay.js
--- a/browser/base/content/utilityOverlay.js
+++ b/browser/base/content/utilityOverlay.js
@@ -44,17 +44,17 @@ var gBidiUI = false;
 function isBlankPageURL(aURL) {
   return aURL == "about:blank" ||
          aURL == "about:home" ||
          aURL == "about:welcome" ||
          aURL == BROWSER_NEW_TAB_URL;
 }
 
 function getBrowserURL() {
-  return "chrome://browser/content/browser.xul";
+  return "chrome://browser/content/browser.xhtml";
 }
 
 function getTopWin(skipPopups) {
   // If this is called in a browser window, use that window regardless of
   // whether it's the frontmost window, since commands can be executed in
   // background windows (bug 626148).
   if (top.document.documentElement.getAttribute("windowtype") == "navigator:browser" &&
       (!skipPopups || top.toolbar.visible))
diff --git a/browser/base/jar.mn b/browser/base/jar.mn
--- a/browser/base/jar.mn
+++ b/browser/base/jar.mn
@@ -23,17 +23,17 @@ browser.jar:
         content/browser/aboutNetError-new.xhtml        (content/aboutNetError-new.xhtml)
         content/browser/aboutRobots-icon.png          (content/aboutRobots-icon.png)
         content/browser/aboutRobots-widget-left.png   (content/aboutRobots-widget-left.png)
         content/browser/aboutTabCrashed.css           (content/aboutTabCrashed.css)
         content/browser/aboutTabCrashed.js            (content/aboutTabCrashed.js)
         content/browser/aboutTabCrashed.xhtml         (content/aboutTabCrashed.xhtml)
 *       content/browser/browser.css                   (content/browser.css)
         content/browser/browser.js                    (content/browser.js)
-*       content/browser/browser.xul                   (content/browser.xul)
+*       content/browser/browser.xhtml                 (content/browser.xhtml)
         content/browser/browser-addons.js             (content/browser-addons.js)
         content/browser/browser-allTabsMenu.js        (content/browser-allTabsMenu.js)
         content/browser/browser-captivePortal.js      (content/browser-captivePortal.js)
         content/browser/browser-ctrlTab.js            (content/browser-ctrlTab.js)
         content/browser/browser-customization.js      (content/browser-customization.js)
         content/browser/browser-data-submission-info-bar.js (content/browser-data-submission-info-bar.js)
         content/browser/browser-compacttheme.js       (content/browser-compacttheme.js)
 #ifndef MOZILLA_OFFICIAL
diff --git a/browser/components/customizableui/CustomizableUI.jsm b/browser/components/customizableui/CustomizableUI.jsm
--- a/browser/components/customizableui/CustomizableUI.jsm
+++ b/browser/components/customizableui/CustomizableUI.jsm
@@ -36,17 +36,17 @@ const kPrefCustomizationState        = "
 const kPrefCustomizationAutoAdd      = "browser.uiCustomization.autoAdd";
 const kPrefCustomizationDebug        = "browser.uiCustomization.debug";
 const kPrefDrawInTitlebar            = "browser.tabs.drawInTitlebar";
 const kPrefExtraDragSpace            = "browser.tabs.extraDragSpace";
 const kPrefUIDensity                 = "browser.uidensity";
 const kPrefAutoTouchMode             = "browser.touchmode.auto";
 const kPrefAutoHideDownloadsButton   = "browser.download.autohideButton";
 
-const kExpectedWindowURL = "chrome://browser/content/browser.xul";
+const kExpectedWindowURL = "chrome://browser/content/browser.xhtml";
 
 /**
  * The keys are the handlers that are fired when the event type (the value)
  * is fired on the subview. A widget that provides a subview has the option
  * of providing onViewShowing and onViewHiding event handlers.
  */
 const kSubviewEvents = [
   "ViewShowing",
diff --git a/browser/components/customizableui/test/browser_947914_button_newPrivateWindow.js b/browser/components/customizableui/test/browser_947914_button_newPrivateWindow.js
--- a/browser/components/customizableui/test/browser_947914_button_newPrivateWindow.js
+++ b/browser/components/customizableui/test/browser_947914_button_newPrivateWindow.js
@@ -17,17 +17,17 @@ add_task(async function() {
   let windowWasHandled = false;
   let privateWindow = null;
 
   let observerWindowOpened = {
     observe(aSubject, aTopic, aData) {
       if (aTopic == "domwindowopened") {
         privateWindow = aSubject.QueryInterface(Ci.nsIDOMWindow);
         privateWindow.addEventListener("load", function() {
-          is(privateWindow.location.href, "chrome://browser/content/browser.xul",
+          is(privateWindow.location.href, "chrome://browser/content/browser.xhtml",
              "A new browser window was opened");
           ok(PrivateBrowsingUtils.isWindowPrivate(privateWindow), "Window is private");
           windowWasHandled = true;
         }, {once: true});
       }
     }
   };
 
diff --git a/browser/components/customizableui/test/browser_947914_button_newWindow.js b/browser/components/customizableui/test/browser_947914_button_newWindow.js
--- a/browser/components/customizableui/test/browser_947914_button_newWindow.js
+++ b/browser/components/customizableui/test/browser_947914_button_newWindow.js
@@ -17,17 +17,17 @@ add_task(async function() {
   let windowWasHandled = false;
   let newWindow = null;
 
   let observerWindowOpened = {
     observe(aSubject, aTopic, aData) {
       if (aTopic == "domwindowopened") {
         newWindow = aSubject.QueryInterface(Ci.nsIDOMWindow);
         newWindow.addEventListener("load", function() {
-          is(newWindow.location.href, "chrome://browser/content/browser.xul",
+          is(newWindow.location.href, "chrome://browser/content/browser.xhtml",
              "A new browser window was opened");
           ok(!PrivateBrowsingUtils.isWindowPrivate(newWindow), "Window is not private");
           windowWasHandled = true;
         }, {once: true});
       }
     }
   };
 
diff --git a/browser/components/distribution.js b/browser/components/distribution.js
--- a/browser/components/distribution.js
+++ b/browser/components/distribution.js
@@ -416,17 +416,17 @@ DistributionCustomizer.prototype = {
         } catch (e) { /* ignore bad prefs and move on */ }
       }
     }
 
     return this._checkCustomizationComplete();
   },
 
   _checkCustomizationComplete: function DIST__checkCustomizationComplete() {
-    const BROWSER_DOCURL = "chrome://browser/content/browser.xul";
+    const BROWSER_DOCURL = "chrome://browser/content/browser.xhtml";
 
     if (this._newProfile) {
       let xulStore = Cc["@mozilla.org/xul/xulstore;1"].getService(Ci.nsIXULStore);
 
       try {
         var showPersonalToolbar = Services.prefs.getBoolPref("browser.showPersonalToolbar");
         if (showPersonalToolbar) {
           xulStore.setValue(BROWSER_DOCURL, "PersonalToolbar", "collapsed", "false");
diff --git a/browser/components/enterprisepolicies/Policies.jsm b/browser/components/enterprisepolicies/Policies.jsm
--- a/browser/components/enterprisepolicies/Policies.jsm
+++ b/browser/components/enterprisepolicies/Policies.jsm
@@ -14,17 +14,17 @@ XPCOMUtils.defineLazyModuleGetters(this,
   AddonManager: "resource://gre/modules/AddonManager.jsm",
   BookmarksPolicies: "resource:///modules/policies/BookmarksPolicies.jsm",
   CustomizableUI: "resource:///modules/CustomizableUI.jsm",
   ProxyPolicies: "resource:///modules/policies/ProxyPolicies.jsm",
   WebsiteFilter: "resource:///modules/policies/WebsiteFilter.jsm",
 });
 
 const PREF_LOGLEVEL           = "browser.policies.loglevel";
-const BROWSER_DOCUMENT_URL    = "chrome://browser/content/browser.xul";
+const BROWSER_DOCUMENT_URL    = "chrome://browser/content/browser.xhtml";
 
 XPCOMUtils.defineLazyGetter(this, "log", () => {
   let { ConsoleAPI } = ChromeUtils.import("resource://gre/modules/Console.jsm", {});
   return new ConsoleAPI({
     prefix: "Policies.jsm",
     // tip: set maxLogLevel to "debug" and use log.debug() to create detailed
     // messages during development. See LOG_LEVELS in Console.jsm for details.
     maxLogLevel: "error",
@@ -947,17 +947,17 @@ function blockAboutPage(manager, feature
 }
 
 let ChromeURLBlockPolicy = {
   shouldLoad(contentLocation, loadInfo, mimeTypeGuess) {
     let contentType = loadInfo.externalContentPolicyType;
     if (contentLocation.scheme == "chrome" &&
         contentType == Ci.nsIContentPolicy.TYPE_DOCUMENT &&
         loadInfo.loadingContext &&
-        loadInfo.loadingContext.baseURI == "chrome://browser/content/browser.xul" &&
+        loadInfo.loadingContext.baseURI == "chrome://browser/content/browser.xhtml" &&
         contentLocation.host != "mochitests") {
       return Ci.nsIContentPolicy.REJECT_REQUEST;
     }
     return Ci.nsIContentPolicy.ACCEPT;
   },
   shouldProcess(contentLocation, loadInfo, mimeTypeGuess) {
     return Ci.nsIContentPolicy.ACCEPT;
   },
diff --git a/browser/components/extensions/parent/ext-windows.js b/browser/components/extensions/parent/ext-windows.js
--- a/browser/components/extensions/parent/ext-windows.js
+++ b/browser/components/extensions/parent/ext-windows.js
@@ -192,17 +192,17 @@ this.windows = class extends ExtensionAP
             }
           }
 
           let {allowScriptsToClose, url} = createData;
           if (allowScriptsToClose === null) {
             allowScriptsToClose = typeof url === "string" && url.startsWith("moz-extension://");
           }
 
-          let window = Services.ww.openWindow(null, "chrome://browser/content/browser.xul", "_blank",
+          let window = Services.ww.openWindow(null, "chrome://browser/content/browser.xhtml", "_blank",
                                               features.join(","), args);
 
           let win = windowManager.getWrapper(window);
           win.updateGeometry(createData);
 
           // TODO: focused, type
 
           return new Promise(resolve => {
diff --git a/browser/components/extensions/test/browser/browser_ext_browserAction_pageAction_icon_permissions.js b/browser/components/extensions/test/browser/browser_ext_browserAction_pageAction_icon_permissions.js
--- a/browser/components/extensions/test/browser/browser_ext_browserAction_pageAction_icon_permissions.js
+++ b/browser/components/extensions/test/browser/browser_ext_browserAction_pageAction_icon_permissions.js
@@ -133,17 +133,17 @@ add_task(async function testSecureURLsDe
       "browser_action": {},
       "page_action": {},
     },
 
     background: function() {
       browser.tabs.query({active: true, currentWindow: true}, tabs => {
         let tabId = tabs[0].id;
 
-        let urls = ["chrome://browser/content/browser.xul",
+        let urls = ["chrome://browser/content/browser.xhtml",
                     "javascript:true"];
 
         let promises = [];
         for (let url of urls) {
           for (let api of ["pageAction", "browserAction"]) {
             promises.push(
               browser.test.assertRejects(
                 browser[api].setIcon({tabId, path: url}),
@@ -164,17 +164,17 @@ add_task(async function testSecureURLsDe
   await extension.awaitFinish("setIcon security tests");
   await extension.unload();
 });
 
 
 add_task(async function testSecureManifestURLsDenied() {
   // Test URLs included in the manifest.
 
-  let urls = ["chrome://browser/content/browser.xul",
+  let urls = ["chrome://browser/content/browser.xhtml",
               "javascript:true"];
 
   let apis = ["browser_action", "page_action"];
 
   for (let url of urls) {
     for (let api of apis) {
       info(`TEST ${api} icon url: ${url}`);
 
diff --git a/browser/components/extensions/test/browser/browser_ext_pageAction_popup.js b/browser/components/extensions/test/browser/browser_ext_pageAction_popup.js
--- a/browser/components/extensions/test/browser/browser_ext_pageAction_popup.js
+++ b/browser/components/extensions/test/browser/browser_ext_pageAction_popup.js
@@ -207,17 +207,17 @@ add_task(async function testPageActionPo
   let panel = document.getElementById(panelId);
   is(panel, null, "pageAction panel removed from document");
 
   BrowserTestUtils.removeTab(tab);
 });
 
 
 add_task(async function testPageActionSecurity() {
-  const URL = "chrome://browser/content/browser.xul";
+  const URL = "chrome://browser/content/browser.xhtml";
 
   let apis = ["browser_action", "page_action"];
 
   for (let api of apis) {
     info(`TEST ${api} icon url: ${URL}`);
 
     let messages = [/Access to restricted URI denied/];
 
diff --git a/browser/components/migration/tests/marionette/test_refresh_firefox.py b/browser/components/migration/tests/marionette/test_refresh_firefox.py
--- a/browser/components/migration/tests/marionette/test_refresh_firefox.py
+++ b/browser/components/migration/tests/marionette/test_refresh_firefox.py
@@ -219,17 +219,17 @@ class TestFirefoxRefresh(MarionetteTestC
             bookmark => resolve(bookmark ? bookmark.title : ""),
             ex => resolve(ex)
           );
         """, script_args=(self._bookmarkURL,))
         self.assertEqual(titleInBookmarks, self._bookmarkText)
 
     def checkBookmarkToolbarVisibility(self):
         toolbarVisible = self.marionette.execute_script("""
-          const BROWSER_DOCURL = "chrome://browser/content/browser.xul";
+          const BROWSER_DOCURL = "chrome://browser/content/browser.xhtml";
           let xulStore = Cc["@mozilla.org/xul/xulstore;1"].getService(Ci.nsIXULStore);
           return xulStore.getValue(BROWSER_DOCURL, "PersonalToolbar", "collapsed")
         """)
         self.assertEqual(toolbarVisible, "false")
 
     def checkHistory(self):
         historyResult = self.runAsyncCode("""
           let resolve = arguments[arguments.length - 1];
diff --git a/browser/components/nsBrowserGlue.js b/browser/components/nsBrowserGlue.js
--- a/browser/components/nsBrowserGlue.js
+++ b/browser/components/nsBrowserGlue.js
@@ -9,17 +9,17 @@ ChromeUtils.import("resource://gre/modul
 ChromeUtils.import("resource://gre/modules/AppConstants.jsm");
 
 (function earlyBlankFirstPaint() {
   if (!Services.prefs.getBoolPref("browser.startup.blankWindow", false))
     return;
 
   let store = Cc["@mozilla.org/xul/xulstore;1"].getService(Ci.nsIXULStore);
   let getValue = attr =>
-    store.getValue("chrome://browser/content/browser.xul", "main-window", attr);
+    store.getValue("chrome://browser/content/browser.xhtml", "main-window", attr);
   let width = getValue("width");
   let height = getValue("height");
 
   // The clean profile case isn't handled yet. Return early for now.
   if (!width || !height)
     return;
 
   let screenX = getValue("screenX");
@@ -1784,17 +1784,17 @@ BrowserGlue.prototype = {
   /**
    * Uncollapses PersonalToolbar if its collapsed status is not
    * persisted, and user customized it or changed default bookmarks.
    *
    * If the user does not have a persisted value for the toolbar's
    * "collapsed" attribute, try to determine whether it's customized.
    */
   _maybeToggleBookmarkToolbarVisibility() {
-    const BROWSER_DOCURL = "chrome://browser/content/browser.xul";
+    const BROWSER_DOCURL = "chrome://browser/content/browser.xhtml";
     const NUM_TOOLBAR_BOOKMARKS_TO_UNHIDE = 3;
     let xulStore = Cc["@mozilla.org/xul/xulstore;1"].getService(Ci.nsIXULStore);
 
     if (!xulStore.hasValue(BROWSER_DOCURL, "PersonalToolbar", "collapsed")) {
       // We consider the toolbar customized if it has more than NUM_TOOLBAR_BOOKMARKS_TO_UNHIDE
       // children, or if it has a persisted currentset value.
       let toolbarIsCustomized = xulStore.hasValue(BROWSER_DOCURL, "PersonalToolbar", "currentset");
       let getToolbarFolderCount = () => {
@@ -1807,20 +1807,23 @@ BrowserGlue.prototype = {
       if (toolbarIsCustomized || getToolbarFolderCount() > NUM_TOOLBAR_BOOKMARKS_TO_UNHIDE) {
         xulStore.setValue(BROWSER_DOCURL, "PersonalToolbar", "collapsed", "false");
       }
     }
   },
 
   // eslint-disable-next-line complexity
   _migrateUI: function BG__migrateUI() {
+    // XXX: Add a migration for XULStore from browser.xul to browser.xhtml
+
     // Use an increasing number to keep track of the current migration state.
     // Completely unrelated to the current Firefox release number.
     const UI_VERSION = 69;
     const BROWSER_DOCURL = "chrome://browser/content/browser.xul";
+    const BROWSER_NEWDOCURL = "chrome://browser/content/browser.xhtml";
 
     let currentUIVersion;
     if (Services.prefs.prefHasUserValue("browser.migration.version")) {
       currentUIVersion = Services.prefs.getIntPref("browser.migration.version");
     } else {
       // This is a new profile, nothing to migrate.
       Services.prefs.setIntPref("browser.migration.version", UI_VERSION);
 
diff --git a/browser/components/places/PlacesUIUtils.jsm b/browser/components/places/PlacesUIUtils.jsm
--- a/browser/components/places/PlacesUIUtils.jsm
+++ b/browser/components/places/PlacesUIUtils.jsm
@@ -600,17 +600,17 @@ var PlacesUIUtils = {
                 browserWindow.whereToOpenLink(aEvent, false, true) : "window";
     if (where == "window") {
       // There is no browser window open, thus open a new one.
       var uriList = PlacesUtils.toISupportsString(urls.join("|"));
       var args = Cc["@mozilla.org/array;1"].
                   createInstance(Ci.nsIMutableArray);
       args.appendElement(uriList);
       browserWindow = Services.ww.openWindow(aWindow,
-                                             "chrome://browser/content/browser.xul",
+                                             "chrome://browser/content/browser.xhtml",
                                              null, "chrome,dialog=no,all", args);
       return;
     }
 
     var loadInBackground = where == "tabshifted";
     // For consistency, we want all the bookmarks to open in new tabs, instead
     // of having one of them replace the currently focused tab.  Hence we call
     // loadTabs with aReplace set to false.
diff --git a/browser/components/tests/browser/browser_default_bookmark_toolbar_visibility.js b/browser/components/tests/browser/browser_default_bookmark_toolbar_visibility.js
--- a/browser/components/tests/browser/browser_default_bookmark_toolbar_visibility.js
+++ b/browser/components/tests/browser/browser_default_bookmark_toolbar_visibility.js
@@ -3,16 +3,16 @@
 
 /**
  * Test _maybeToggleBookmarkToolbarVisibility() code running for new profiles.
  * Ensure that the bookmarks toolbar is hidden in a default configuration.
  * If new default bookmarks are added to the toolbar then the threshold of > 3
  * in NUM_TOOLBAR_BOOKMARKS_TO_UNHIDE may need to be adjusted there.
  */
 add_task(async function test_default_bookmark_toolbar_visibility() {
-  const BROWSER_DOCURL = "chrome://browser/content/browser.xul";
+  const BROWSER_DOCURL = "chrome://browser/content/browser.xhtml";
   let xulStore = Cc["@mozilla.org/xul/xulstore;1"].getService(Ci.nsIXULStore);
 
   is(xulStore.getValue(BROWSER_DOCURL, "PersonalToolbar", "collapsed"), "",
      "Check that @collapsed isn't persisted");
   ok(document.getElementById("PersonalToolbar").collapsed,
      "The bookmarks toolbar should be collapsed by default");
 });
diff --git a/browser/modules/ContentWebRTC.jsm b/browser/modules/ContentWebRTC.jsm
--- a/browser/modules/ContentWebRTC.jsm
+++ b/browser/modules/ContentWebRTC.jsm
@@ -7,17 +7,17 @@
 var EXPORTED_SYMBOLS = [ "ContentWebRTC" ];
 
 ChromeUtils.import("resource://gre/modules/Services.jsm");
 ChromeUtils.import("resource://gre/modules/XPCOMUtils.jsm");
 XPCOMUtils.defineLazyServiceGetter(this, "MediaManagerService",
                                    "@mozilla.org/mediaManagerService;1",
                                    "nsIMediaManagerService");
 
-const kBrowserURL = "chrome://browser/content/browser.xul";
+const kBrowserURL = "chrome://browser/content/browser.xhtml";
 
 var ContentWebRTC = {
   // Called only for 'unload' to remove pending gUM prompts in reloaded frames.
   handleEvent(aEvent) {
     let contentWindow = aEvent.target.defaultView;
     let mm = getMessageManagerForWindow(contentWindow);
     for (let key of contentWindow.pendingGetUserMediaRequests.keys()) {
       mm.sendAsyncMessage("webrtc:CancelRequest", key);
diff --git a/testing/mochitest/BrowserTestUtils/BrowserTestUtils.jsm b/testing/mochitest/BrowserTestUtils/BrowserTestUtils.jsm
--- a/testing/mochitest/BrowserTestUtils/BrowserTestUtils.jsm
+++ b/testing/mochitest/BrowserTestUtils/BrowserTestUtils.jsm
@@ -572,17 +572,17 @@ var BrowserTestUtils = {
 
         if (!anyWindow) {
           Services.ww.unregisterNotification(observe);
         }
 
         if (url) {
           await this.waitForEvent(win, "DOMContentLoaded");
 
-          if (win.document.documentURI != "chrome://browser/content/browser.xul") {
+          if (win.document.documentURI != "chrome://browser/content/browser.xhtml") {
             return;
           }
         }
 
         let promises = [
           TestUtils.topicObserved("browser-delayed-startup-finished",
                                   subject => subject == win),
         ];
diff --git a/testing/mochitest/api.js b/testing/mochitest/api.js
--- a/testing/mochitest/api.js
+++ b/testing/mochitest/api.js
@@ -27,17 +27,17 @@ const windowTracker = {
   async observe(window, topic, data) {
     if (topic === "chrome-document-global-created") {
       await new Promise(resolve =>
         window.addEventListener("DOMContentLoaded", resolve, {once: true}));
 
       let {document} = window;
       let {documentURI} = document;
 
-      if (documentURI !== "chrome://browser/content/browser.xul") {
+      if (documentURI !== "chrome://browser/content/browser.xhtml") {
         return;
       }
       loadChromeScripts(window);
     }
   },
 };
 
 function androidStartup() {
diff --git a/testing/mochitest/browser-test.js b/testing/mochitest/browser-test.js
--- a/testing/mochitest/browser-test.js
+++ b/testing/mochitest/browser-test.js
@@ -359,17 +359,17 @@ function takeInstrumentation() {
   gSaveInstrumentationData = saveData;
 
   Services.ww.registerNotification((win, topic, data) => {
     if (topic != "domwindowopened") {
       return;
     }
 
     win.addEventListener("load", () => {
-      if (win.location.href != "chrome://browser/content/browser.xul") {
+      if (win.location.href != "chrome://browser/content/browser.xhtml") {
         return;
       }
 
       scanWindow(win);
       observeWindow(win);
     }, { once: true });
   });
 }
diff --git a/testing/talos/talos/bootstrap.js b/testing/talos/talos/bootstrap.js
--- a/testing/talos/talos/bootstrap.js
+++ b/testing/talos/talos/bootstrap.js
@@ -22,17 +22,17 @@ const windowTracker = {
   async observe(window, topic, data) {
     if (topic === "domwindowopened") {
       await new Promise(resolve =>
         window.addEventListener("DOMWindowCreated", resolve, {once: true}));
 
       let {document} = window;
       let {documentURI} = document;
 
-      if (documentURI !== "chrome://browser/content/browser.xul") {
+      if (documentURI !== "chrome://browser/content/browser.xhtml") {
         return;
       }
       initializeBrowser(window);
     }
   },
 };
 
 function readSync(uri) {
diff --git a/testing/talos/talos/tests/devtools/addon/bootstrap.js b/testing/talos/talos/tests/devtools/addon/bootstrap.js
--- a/testing/talos/talos/tests/devtools/addon/bootstrap.js
+++ b/testing/talos/talos/tests/devtools/addon/bootstrap.js
@@ -21,17 +21,17 @@ const windowTracker = {
   async observe(window, topic, data) {
     if (topic === "domwindowopened") {
       await new Promise(resolve =>
         window.addEventListener("DOMWindowCreated", resolve, {once: true}));
 
       let {document} = window;
       let {documentURI} = document;
 
-      if (documentURI !== "chrome://browser/content/browser.xul") {
+      if (documentURI !== "chrome://browser/content/browser.xhtml") {
         return;
       }
       initializeBrowser(window);
     }
   },
 };
 
 function startup(data, reason) {
diff --git a/testing/talos/talos/tests/tart/addon/bootstrap.js b/testing/talos/talos/tests/tart/addon/bootstrap.js
--- a/testing/talos/talos/tests/tart/addon/bootstrap.js
+++ b/testing/talos/talos/tests/tart/addon/bootstrap.js
@@ -22,17 +22,17 @@ const windowTracker = {
   async observe(window, topic, data) {
     if (topic === "domwindowopened") {
       await new Promise(resolve =>
         window.addEventListener("DOMWindowCreated", resolve, {once: true}));
 
       let {document} = window;
       let {documentURI} = document;
 
-      if (documentURI !== "chrome://browser/content/browser.xul") {
+      if (documentURI !== "chrome://browser/content/browser.xhtml") {
         return;
       }
       initializeBrowser(window);
     }
   },
 };
 
 function readSync(uri) {
diff --git a/testing/talos/talos/tests/tart/addon/content/tab-min-width-1px.css b/testing/talos/talos/tests/tart/addon/content/tab-min-width-1px.css
--- a/testing/talos/talos/tests/tart/addon/content/tab-min-width-1px.css
+++ b/testing/talos/talos/tests/tart/addon/content/tab-min-width-1px.css
@@ -1,11 +1,11 @@
 @namespace url("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul");
 
 /*
 Overlay this style rule at tart/chrome.manifest (but it seems to regress tab perf):
-style chrome://browser/content/browser.xul chrome://tart/content/tab-min-width-1px.css
+style chrome://browser/content/browser.xhtml chrome://tart/content/tab-min-width-1px.css
 */
 
 /* Prevent overflow while adding many tabs */
 .tabbrowser-tab[fadein]:not([pinned]) {
   min-width: 1px !important;
 }
diff --git a/testing/talos/talos/tests/tart/addon/content/tart.js b/testing/talos/talos/tests/tart/addon/content/tart.js
--- a/testing/talos/talos/tests/tart/addon/content/tart.js
+++ b/testing/talos/talos/tests/tart/addon/content/tart.js
@@ -123,17 +123,17 @@ Tart.prototype = {
 
   clickNewTab() {
     this._endDetection = this.tabDetector;
     this._win.BrowserOpenTab();
     // Modifying the style for each tab right after opening seems like it could regress performance,
     // However, overlaying a global style over browser.xul actually ends up having greater ovrehead,
     // especially while closing the last of many tabs (a noticeable ~250ms delay before expanding the rest).
     // To overlay the style globally, add at tart/chrome.manifest:
-    // style chrome://browser/content/browser.xul chrome://tart/content/tab-min-width-1px.css
+    // style chrome://browser/content/browser.xhtml chrome://tart/content/tab-min-width-1px.css
     // where the file tab-min-width-1px.css is:
     // .tabbrowser-tab[fadein]:not([pinned]) { min-width: 1px !important; }
     // Additionally, the global style overlay apparently messes with intervals recording when layout.frame_rate=10000:
     // Using the startFrameTimeRecording API, the first interval appears extra long (~1000ms) even with much widget tickling,
     // Per-tab min-width on open it is then.
 
     // --> many-tabs case which requires modified max-width will not go into v1. No need for now.
     // this._win.gBrowser.selectedTab.style.minWidth = "1px"; // Prevent overflow regrdless of DPI scale.
diff --git a/toolkit/components/places/tests/history/test_async_history_api.js b/toolkit/components/places/tests/history/test_async_history_api.js
--- a/toolkit/components/places/tests/history/test_async_history_api.js
+++ b/toolkit/components/places/tests/history/test_async_history_api.js
@@ -338,17 +338,17 @@ add_task(async function test_non_addable
   // Array of protocols that nsINavHistoryService::canAddURI returns false for.
   const URLS = [
     "about:config",
     "imap://cyrus.andrew.cmu.edu/archive.imap",
     "news://new.mozilla.org/mozilla.dev.apps.firefox",
     "mailbox:Inbox",
     "moz-anno:favicon:http://mozilla.org/made-up-favicon",
     "view-source:http://mozilla.org",
-    "chrome://browser/content/browser.xul",
+    "chrome://browser/content/browser.xhtml",
     "resource://gre-resources/hiddenWindow.html",
     "data:,Hello%2C%20World!",
     "wyciwyg:/0/http://mozilla.org",
     "javascript:alert('hello wolrd!');",
     "blob:foo",
   ];
   let places = [];
   URLS.forEach(function(url) {
diff --git a/toolkit/components/places/tests/history/test_insertMany.js b/toolkit/components/places/tests/history/test_insertMany.js
--- a/toolkit/components/places/tests/history/test_insertMany.js
+++ b/toolkit/components/places/tests/history/test_insertMany.js
@@ -26,17 +26,17 @@ add_task(async function test_error_cases
   Assert.throws(
     () => PlacesUtils.history.insertMany([validPageInfo, {}]),
     /TypeError: PageInfo object must have a url property/,
     "passing a second invalid PageInfo object to History.insertMany should throw a TypeError"
   );
 });
 
 add_task(async function test_insertMany() {
-  const BAD_URLS = ["about:config", "chrome://browser/content/browser.xul"];
+  const BAD_URLS = ["about:config", "chrome://browser/content/browser.xhtml"];
   const GOOD_URLS = [1, 2, 3].map(x => { return `http://mozilla.com/${x}`; });
 
   let makePageInfos = async function(urls, filter = x => x) {
     let pageInfos = [];
     for (let url of urls) {
       let uri = NetUtil.newURI(url);
 
       let pageInfo = {
diff --git a/toolkit/components/places/tests/unit/test_isURIVisited.js b/toolkit/components/places/tests/unit/test_isURIVisited.js
--- a/toolkit/components/places/tests/unit/test_isURIVisited.js
+++ b/toolkit/components/places/tests/unit/test_isURIVisited.js
@@ -11,17 +11,17 @@ const SCHEMES = {
   "about:": false,
 // nsIIOService.newURI() can throw if e.g. the app knows about imap://
 // but the account is not set up and so the URL is invalid for it.
 //  "imap://": false,
   "news://": false,
   "mailbox:": false,
   "moz-anno:favicon:http://": false,
   "view-source:http://": false,
-  "chrome://browser/content/browser.xul?": false,
+  "chrome://browser/content/browser.xhtml?": false,
   "resource://": false,
   "data:,": false,
   "wyciwyg:/0/http://": false,
   "javascript:": false,
 };
 
 add_task(async function test_isURIVisited() {
   let history = Cc["@mozilla.org/browser/history;1"]
diff --git a/toolkit/components/places/tests/unit/test_isvisited.js b/toolkit/components/places/tests/unit/test_isvisited.js
--- a/toolkit/components/places/tests/unit/test_isvisited.js
+++ b/toolkit/components/places/tests/unit/test_isvisited.js
@@ -34,17 +34,17 @@ add_task(async function test_execute() {
   // see CanAddURI() in nsNavHistory.cpp
   const URLS = [
     "about:config",
     "imap://cyrus.andrew.cmu.edu/archive.imap",
     "news://new.mozilla.org/mozilla.dev.apps.firefox",
     "mailbox:Inbox",
     "moz-anno:favicon:http://mozilla.org/made-up-favicon",
     "view-source:http://mozilla.org",
-    "chrome://browser/content/browser.xul",
+    "chrome://browser/content/browser.xhtml",
     "resource://gre-resources/hiddenWindow.html",
     "data:,Hello%2C%20World!",
     "wyciwyg:/0/http://mozilla.org",
     "javascript:alert('hello wolrd!');",
     "http://localhost/" + "a".repeat(1984),
   ];
   for (let currentURL of URLS) {
     try {
diff --git a/toolkit/components/xulstore/tests/xpcshell/test_XULStore.js b/toolkit/components/xulstore/tests/xpcshell/test_XULStore.js
--- a/toolkit/components/xulstore/tests/xpcshell/test_XULStore.js
+++ b/toolkit/components/xulstore/tests/xpcshell/test_XULStore.js
@@ -2,17 +2,17 @@
    http://creativecommons.org/publicdomain/zero/1.0/◦
 */
 
 "use strict";
 
 ChromeUtils.import("resource://gre/modules/osfile.jsm");
 
 var XULStore = null;
-var browserURI = "chrome://browser/content/browser.xul";
+var browserURI = "chrome://browser/content/browser.xhtml";
 var aboutURI = "about:config";
 
 function run_test() {
   do_get_profile();
   run_next_test();
 }
 
 function checkValue(uri, id, attr, reference) {
diff --git a/toolkit/content/tests/chrome/window_browser_drop.xul b/toolkit/content/tests/chrome/window_browser_drop.xul
--- a/toolkit/content/tests/chrome/window_browser_drop.xul
+++ b/toolkit/content/tests/chrome/window_browser_drop.xul
@@ -193,17 +193,17 @@ async function dropLinksOnBrowser(browse
                           data: "data:text/html,bad" } ] ],
                     "text/plain data url drop on browser " + type);
 
   // Dropping a chrome url should fail as we don't have a source node set,
   // defaulting to a source of file:///
   await expectLink(browser,
                     [],
                     [ [ { type: "text/x-moz-url",
-                          data: "chrome://browser/content/browser.xul" } ] ],
+                          data: "chrome://browser/content/browser.xhtml" } ] ],
                     "text/x-moz-url chrome url drop on browser " + type);
 
   if (browser.type == "content") {
     await ContentTask.spawn(browser, null, function() {
       content.window.stopMode = true;
     });
 
     // stopPropagation should not prevent the browser link handling from occuring
diff --git a/toolkit/content/tests/unit/test_contentAreaUtils.js b/toolkit/content/tests/unit/test_contentAreaUtils.js
--- a/toolkit/content/tests/unit/test_contentAreaUtils.js
+++ b/toolkit/content/tests/unit/test_contentAreaUtils.js
@@ -9,17 +9,17 @@ function loadUtilsScript() {
   /* import-globals-from ../../contentAreaUtils.js */
   Services.scriptloader.loadSubScript("chrome://global/content/contentAreaUtils.js");
 }
 
 function test_urlSecurityCheck() {
   var nullPrincipal = Services.scriptSecurityManager.createNullPrincipal({});
 
   const HTTP_URI = "http://www.mozilla.org/";
-  const CHROME_URI = "chrome://browser/content/browser.xul";
+  const CHROME_URI = "chrome://browser/content/browser.xhtml";
   const DISALLOW_INHERIT_PRINCIPAL =
     Ci.nsIScriptSecurityManager.DISALLOW_INHERIT_PRINCIPAL;
 
   try {
     urlSecurityCheck(makeURI(HTTP_URI), nullPrincipal,
                      DISALLOW_INHERIT_PRINCIPAL);
   } catch (ex) {
     do_throw("urlSecurityCheck should not throw when linking to a http uri with a null principal");
diff --git a/toolkit/mozapps/extensions/test/xpcshell/test_json_updatecheck.js b/toolkit/mozapps/extensions/test/xpcshell/test_json_updatecheck.js
--- a/toolkit/mozapps/extensions/test/xpcshell/test_json_updatecheck.js
+++ b/toolkit/mozapps/extensions/test/xpcshell/test_json_updatecheck.js
@@ -252,17 +252,17 @@ add_task(async function test_update_url_
   // Checks that update links to privileged URLs are not accepted.
 
   let { messages, result: updates } = await promiseConsoleOutput(() => {
     return checkUpdates({
       id: "updatecheck-security@tests.mozilla.org",
       version: "0.1",
       updates: [
         { version: "0.2",
-          update_link: "chrome://browser/content/browser.xul",
+          update_link: "chrome://browser/content/browser.xhtml",
           update_hash: "sha256:08ac852190ecd81f40a514ea9299fe9143d9ab5e296b97e73fb2a314de49648a" },
         { version: "0.3",
           update_link: "http://example.com/update.xpi",
           update_hash: "sha256:18ac852190ecd81f40a514ea9299fe9143d9ab5e296b97e73fb2a314de49648a" },
       ]
     });
   });
 
