# vim: se ft=diff :
# HG changeset patch
# User Lin Clark <lclark@mozilla.com>
# Date 2016-04-29 13:17
Bug 1260283 - Implement new console output frontend behind a pref. r=bgrins

diff --git a/devtools/client/webconsole/new-console-output/components/console-output.js b/devtools/client/webconsole/new-console-output/components/console-output.js
index d005e34..98a1b192 100644
--- a/devtools/client/webconsole/new-console-output/components/console-output.js
+++ b/devtools/client/webconsole/new-console-output/components/console-output.js
@@ -4,34 +4,63 @@
 "use strict";
 
 const {
   createClass,
   createFactory,
   DOM: dom,
   PropTypes
 } = require("devtools/client/shared/vendor/react");
+const ReactDOM = require("devtools/client/shared/vendor/react-dom");
 const { connect } = require("devtools/client/shared/vendor/react-redux");
 
 const MessageContainer = createFactory(require("devtools/client/webconsole/new-console-output/components/message-container").MessageContainer);
 
 const ConsoleOutput = createClass({
   displayName: "ConsoleOutput",
 
+  propTypes: {
+    jsterm: PropTypes.object.isRequired,
+    // This function is created in mergeProps
+    openVariablesView: PropTypes.func.isRequired
+  },
+
+  componentWillUpdate() {
+    // @TODO Move this to a parent component.
+    let node = ReactDOM.findDOMNode(this).parentNode.parentNode.parentNode;
+    if (node.lastChild) {
+      this.shouldScrollBottom = isScrolledToBottom(node.lastChild, node);
+    }
+  },
+
+  componentDidUpdate() {
+    if (this.shouldScrollBottom) {
+      let node = ReactDOM.findDOMNode(this).parentNode.parentNode.parentNode;
+      node.scrollTop = node.scrollHeight;
+    }
+  },
+
   render() {
     let messageNodes = this.props.messages.map(function(message) {
       return (
         MessageContainer({ message })
       );
     });
     return (
       dom.div({}, messageNodes)
     );
   }
 });
 
+function isScrolledToBottom(outputNode, scrollNode) {
+  let lastNodeHeight = outputNode.lastChild ?
+                       outputNode.lastChild.clientHeight : 0;
+  return scrollNode.scrollTop + scrollNode.clientHeight >=
+         scrollNode.scrollHeight - lastNodeHeight / 2;
+}
+
 function mapStateToProps(state) {
   return {
     messages: state.messages
   };
 }
 
 module.exports = connect(mapStateToProps)(ConsoleOutput);
