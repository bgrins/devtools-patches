# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  b84fe2ad1ca27fc30c2e3f609b8f766185652560
Bug 1420229 - Always make the xpcshell harness run the process as headless

Right now this is only enabled conditionally behind a headless flag, but the
headless flag isn't supported by the xpcshell-test command so this rev is just
unconditionally setting the necessary headless environment variables.

Why is this necessary? There is at least one case where code expecting a display
ends up running in an xpcshell test. I bumped into this when both of these things
were true:

1. DOMParser.parseFromString is called with an svg element
2. A UA style contains a rule like `foo { color: MenuText; }`

I expect there could be other cases as well, so I'd like to fix this at the
harness level rather than come up with a workaround for this particular test.

MozReview-Commit-ID: Cp3TDInjVdg

diff --git a/testing/xpcshell/runxpcshelltests.py b/testing/xpcshell/runxpcshelltests.py
--- a/testing/xpcshell/runxpcshelltests.py
+++ b/testing/xpcshell/runxpcshelltests.py
@@ -654,19 +654,18 @@ class XPCShellTestThread(Thread):
 
         if self.test_object.get('dmd') == 'true':
             self.env['PYTHON'] = sys.executable
             self.env['BREAKPAD_SYMBOLS_PATH'] = self.symbolsPath
 
         if self.test_object.get('subprocess') == 'true':
             self.env['PYTHON'] = sys.executable
 
-        if self.test_object.get('headless', False):
-            self.env["MOZ_HEADLESS"] = '1'
-            self.env["DISPLAY"] = '77'  # Set a fake display.
+        self.env["MOZ_HEADLESS"] = '1'
+        self.env["DISPLAY"] = '77'  # Set a fake display.
 
         testTimeoutInterval = self.harness_timeout
         # Allow a test to request a multiple of the timeout if it is expected to take long
         if 'requesttimeoutfactor' in self.test_object:
             testTimeoutInterval *= int(self.test_object['requesttimeoutfactor'])
 
         testTimer = None
         if not self.interactive and not self.debuggerInfo and not self.jsDebuggerInfo:
