# HG changeset patch
# User Paolo Amadini <paolo.mozmail@amadzone.org>
# Date 1527691368 -3600
#      Wed May 30 15:42:48 2018 +0100
# Node ID bc05e2d6433bd1c2444604b38b9af78c9466ca35
# Parent  e3a3766a480199175c79685c28af7b02d1f067ae
Bug 1465457 - Part 2 - Load documents over chrome URIs in reftest-chrome

Differential Revision: https://phabricator.services.mozilla.com/D11572

diff --git a/chrome/nsChromeRegistry.cpp b/chrome/nsChromeRegistry.cpp
--- a/chrome/nsChromeRegistry.cpp
+++ b/chrome/nsChromeRegistry.cpp
@@ -265,16 +265,29 @@ nsChromeRegistry::ConvertChromeURL(nsIUR
     LogMessage("No chrome package registered for chrome://%s/%s/%s",
                package.get(), provider.get(), path.get());
     return NS_ERROR_FILE_NOT_FOUND;
   }
 
   return NS_NewURI(aResult, path, nullptr, baseURI);
 }
 
+NS_IMETHODIMP
+nsChromeRegistry::RegisterChromeURLOverrideForTest(nsIURI* aChromeURI,
+                                                   nsIURI* aOverrideURI)
+{
+  if (NS_WARN_IF(!aChromeURI) || NS_WARN_IF(!aOverrideURI)) {
+    return NS_ERROR_INVALID_ARG;
+  }
+
+  mOverrideTable.Put(aChromeURI, aOverrideURI);
+
+  return NS_OK;
+}
+
 ////////////////////////////////////////////////////////////////////////
 
 // theme stuff
 
 static void FlushSkinBindingsForWindow(nsPIDOMWindowOuter* aWindow) {
   // Get the document.
   RefPtr<Document> document = aWindow->GetDoc();
   if (!document) return;
diff --git a/chrome/nsChromeRegistry.h b/chrome/nsChromeRegistry.h
--- a/chrome/nsChromeRegistry.h
+++ b/chrome/nsChromeRegistry.h
@@ -44,16 +44,18 @@ class nsChromeRegistry : public nsIToolk
   // nsIXULChromeRegistry methods:
   NS_IMETHOD RefreshSkins() override;
   NS_IMETHOD AllowScriptsForPackage(nsIURI* url, bool* _retval) override;
   NS_IMETHOD AllowContentToAccess(nsIURI* url, bool* _retval) override;
   NS_IMETHOD CanLoadURLRemotely(nsIURI* url, bool* _retval) override;
   NS_IMETHOD MustLoadURLRemotely(nsIURI* url, bool* _retval) override;
 
   NS_IMETHOD ConvertChromeURL(nsIURI* aChromeURI, nsIURI** aResult) override;
+  NS_IMETHOD RegisterChromeURLOverrideForTest(nsIURI* aChromeURI,
+                                              nsIURI* aOverrideURI) override;
 
   // nsChromeRegistry methods:
   nsChromeRegistry() : mInitialized(false) {}
 
   virtual nsresult Init();
 
   static already_AddRefed<nsIChromeRegistry> GetService();
 
diff --git a/chrome/nsIChromeRegistry.idl b/chrome/nsIChromeRegistry.idl
--- a/chrome/nsIChromeRegistry.idl
+++ b/chrome/nsIChromeRegistry.idl
@@ -30,16 +30,31 @@ interface nsIChromeRegistry : nsISupport
    *   "css" for a "skin" package, and
    *   "dtd" for a "locale" package.
    *
    * @param aChromeURL the URL that is to be converted.
    */
   nsIURI convertChromeURL(in nsIURI aChromeURL);
 
   /**
+   * Registers an override. If convertChromeURL is then called with aChromeURL
+   * as the argument, aOverrideURL will be returned.
+   *
+   * This function should only be called in functional test harnesses, and not
+   * in production code, including non-test add-ons, because this may slow down
+   * the conversions, there is no way to unregister the overrides individually,
+   * and checkForNewChrome will clear the overrides added by this function.
+   *
+   * @param aChromeURL the URL that is to be converted.
+   * @param aOverrideURL the result of the conversion.
+   */
+  void registerChromeURLOverrideForTest(in nsIURI aChromeURL,
+                                        in nsIURI aOverrideURL);
+
+  /**
    * refresh the chrome list at runtime, looking for new packages/etc
    */
   void checkForNewChrome();
 };
 
 [scriptable, uuid(93251ddf-5e85-4172-ac2a-31780562974f)]
 interface nsIXULChromeRegistry : nsIChromeRegistry
 {
diff --git a/layout/tools/reftest/manifest.jsm b/layout/tools/reftest/manifest.jsm
--- a/layout/tools/reftest/manifest.jsm
+++ b/layout/tools/reftest/manifest.jsm
@@ -635,34 +635,52 @@ function ServeTestBase(aURL, depth) {
                                      path + dirPath);
 
     // Give the testbase URI access to XUL and XBL
     Services.perms.add(testbase, "allowXULXBL", Services.perms.ALLOW_ACTION);
     return testbase;
 }
 
 function CreateUrls(test) {
+    let env = Cc["@mozilla.org/process/environment;1"].
+        getService(Ci.nsIEnvironment);
+    let reftestSuite = env.get("REFTEST_SUITE");
     let secMan = Cc[NS_SCRIPTSECURITYMANAGER_CONTRACTID]
                     .getService(Ci.nsIScriptSecurityManager);
+    let chromeReg = Cc["@mozilla.org/chrome/chrome-registry;1"]
+                      .getService(Ci.nsIChromeRegistry);
 
     let manifestURL = g.ioService.newURI(test.manifest);
     let principal = secMan.createCodebasePrincipal(manifestURL, {});
 
     let testbase = manifestURL;
     if (test.runHttp)
         testbase = ServeTestBase(manifestURL, test.httpDepth)
 
     function FileToURI(file)
     {
         if (file === null)
             return file;
 
         var testURI = g.ioService.newURI(file, null, testbase);
         secMan.checkLoadURIWithPrincipal(principal, testURI,
                                          Ci.nsIScriptSecurityManager.DISALLOW_SCRIPT);
+
+        // Load documents over "chrome:" URIs, if we are in the chrome suite.
+        if (reftestSuite == "reftest-chrome" && (
+            testURI.spec.endsWith(".xul") ||
+            testURI.spec.endsWith(".html") ||
+            testURI.spec.endsWith(".xhtml"))
+        ) {
+          let chromeURI = g.ioService.newURI("chrome://reftest-file/content" +
+                                             testURI.pathQueryRef);
+          chromeReg.registerChromeURLOverrideForTest(chromeURI, testURI);
+          return chromeURI;
+        }
+
         return testURI;
     }
 
     let files = [test.url1, test.url2];
     [test.url1, test.url2] = files.map(FileToURI);
 
     return test;
 }
