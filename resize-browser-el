# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  69e395a855ccb3906e017664873cb98c380d2fa3

diff --git a/browser/base/content/tabbrowser.js b/browser/base/content/tabbrowser.js
--- a/browser/base/content/tabbrowser.js
+++ b/browser/base/content/tabbrowser.js
@@ -2194,16 +2194,20 @@
       // flex=0 it can't. When the toolbox is on the bottom it's a sibling of
       // browserStack, and when it's on the side it's a sibling of
       // browserContainer.
       let stack = document.createXULElement("stack");
       stack.className = "browserStack";
       stack.appendChild(b);
       stack.setAttribute("flex", "10000");
 
+      let fullWidthBox = document.createElement("div");
+      fullWidthBox.textContent = "test";
+      stack.appendChild(fullWidthBox);
+
       let browserContainer = document.createXULElement("vbox");
       browserContainer.className = "browserContainer";
       browserContainer.appendChild(notificationbox);
       browserContainer.appendChild(stack);
       browserContainer.setAttribute("flex", "10000");
 
       let browserSidebarContainer = document.createXULElement("hbox");
       browserSidebarContainer.className = "browserSidebarContainer";
diff --git a/devtools/client/responsive/ui.js b/devtools/client/responsive/ui.js
--- a/devtools/client/responsive/ui.js
+++ b/devtools/client/responsive/ui.js
@@ -231,18 +231,18 @@ class ResponsiveUI {
     const { document: doc, gBrowser } = this.browserWindow;
     const rdmFrame = doc.createElement("iframe");
     rdmFrame.src = "chrome://devtools/content/responsive/toolbar.xhtml";
     rdmFrame.classList.add("rdm-controls");
 
     this.browserContainerEl = gBrowser.getBrowserContainer(
       gBrowser.getBrowserForTab(this.tab)
     );
-    this.browserStackEl = this.browserContainerEl.querySelector(
-      ".browserStack"
+    this.browserEl = this.browserContainerEl.querySelector(
+      ".browserStack browser"
     );
 
     this.browserContainerEl.classList.add("responsive-mode");
 
     // Prepend the RDM iframe inside of the current tab's browser container.
     this.browserContainerEl.prepend(rdmFrame);
 
     // Wait for the frame script to be loaded.
@@ -302,18 +302,18 @@ class ResponsiveUI {
     if (!this.isBrowserUIEnabled) {
       this.tab.linkedBrowser.removeEventListener("FullZoomChange", this);
       this.toolWindow.removeEventListener("message", this);
     } else {
       this.rdmFrame.contentWindow.removeEventListener("message", this);
       this.rdmFrame.remove();
 
       this.browserContainerEl.classList.remove("responsive-mode");
-      this.browserStackEl.style.maxWidth = this.browserStackEl.style.minWidth = null;
-      this.browserStackEl.style.maxHeight = this.browserStackEl.style.minHeight = null;
+      this.browserEl.style.maxWidth = this.browserEl.style.minWidth = null;
+      this.browserEl.style.maxHeight = this.browserEl.style.minHeight = null;
     }
 
     if (!this.isBrowserUIEnabled && !isTabContentDestroying) {
       // Notify the inner browser to stop the frame script
       await message.request(this.toolWindow, "stop-frame-script");
     }
 
     // Ensure the tab is reloaded if required when exiting RDM so that no emulated
@@ -330,17 +330,17 @@ class ResponsiveUI {
       if (reloadNeeded) {
         this.getViewportBrowser().reload();
       }
     }
 
     // Destroy local state
     const swap = this.swap;
     this.browserContainerEl = null;
-    this.browserStackEl = null;
+    this.browserEl = null;
     this.browserWindow = null;
     this.tab = null;
     this.inited = null;
     this.rdmFrame = null;
     this.toolWindow = null;
     this.swap = null;
 
     // Close the debugger client used to speak with emulation actor.
@@ -756,18 +756,18 @@ class ResponsiveUI {
    * @param {Number} height
    *        The viewport's height.
    */
   updateViewportSize(width, height) {
     if (!this.isBrowserUIEnabled) {
       return;
     }
 
-    this.browserStackEl.style.maxWidth = this.browserStackEl.style.minWidth = `${width}px`;
-    this.browserStackEl.style.maxHeight = this.browserStackEl.style.minHeight = `${height}px`;
+    this.browserEl.style.maxWidth = this.browserEl.style.minWidth = `${width}px`;
+    this.browserEl.style.maxHeight = this.browserEl.style.minHeight = `${height}px`;
   }
 
   /**
    * Helper for tests. Assumes a single viewport for now.
    */
   getViewportSize() {
     return this.toolWindow.getViewportSize();
   }
