# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1539109075 25200
#      Tue Oct 09 11:17:55 2018 -0700
# Node ID fa97125b63ae2f333cee239ab2b84ae795b189ea
# Parent  a9616aaeff87448588d57c295e16eb4caec420fb
Bug 1492613 - Use document.createXULElement in devtools when we explicitly expect XUL elements to be returned;r=jdescottes

Differential Revision: https://phabricator.services.mozilla.com/D8123

diff --git a/devtools/client/framework/test/browser_toolbox_custom_host.js b/devtools/client/framework/test/browser_toolbox_custom_host.js
--- a/devtools/client/framework/test/browser_toolbox_custom_host.js
+++ b/devtools/client/framework/test/browser_toolbox_custom_host.js
@@ -21,17 +21,17 @@ add_task(async function() {
           window.removeEventListener("message", onMessage);
           resolve();
           break;
       }
     }
     window.addEventListener("message", onMessage);
   });
 
-  let iframe = document.createElement("iframe");
+  let iframe = document.createXULElement("iframe");
   document.documentElement.appendChild(iframe);
 
   const tab = await addTab(TEST_URL);
   let target = await TargetFactory.forTab(tab);
   const options = { customIframe: iframe };
   let toolbox = await gDevTools.showToolbox(target, null, Toolbox.HostType.CUSTOM, options);
 
   is(toolbox.win.top, window, "Toolbox is included in browser.xul");
diff --git a/devtools/client/framework/test/browser_toolbox_target.js b/devtools/client/framework/test/browser_toolbox_target.js
--- a/devtools/client/framework/test/browser_toolbox_target.js
+++ b/devtools/client/framework/test/browser_toolbox_target.js
@@ -4,27 +4,27 @@
  * http://creativecommons.org/publicdomain/zero/1.0/ */
 
 // Test about:devtools-toolbox?target which allows opening a toolbox in an
 // iframe while defining which document to debug by setting a `target`
 // attribute refering to the document to debug.
 
 add_task(async function() {
   // iframe loads the document to debug
-  const iframe = document.createElement("browser");
+  const iframe = document.createXULElement("browser");
   iframe.setAttribute("type", "content");
   document.documentElement.appendChild(iframe);
 
   let onLoad = once(iframe, "load", true);
   iframe.setAttribute("src", "data:text/html,document to debug");
   await onLoad;
   is(iframe.contentWindow.document.body.innerHTML, "document to debug");
 
   // toolbox loads the toolbox document
-  const toolboxIframe = document.createElement("iframe");
+  const toolboxIframe = document.createXULElement("iframe");
   document.documentElement.appendChild(toolboxIframe);
 
   // Important step to define which target to debug
   toolboxIframe.target = iframe;
 
   const onToolboxReady = gDevTools.once("toolbox-ready");
 
   onLoad = once(toolboxIframe, "load", true);
diff --git a/devtools/client/performance/test/browser_perf-tree-abstract-01.js b/devtools/client/performance/test/browser_perf-tree-abstract-01.js
--- a/devtools/client/performance/test/browser_perf-tree-abstract-01.js
+++ b/devtools/client/performance/test/browser_perf-tree-abstract-01.js
@@ -9,17 +9,17 @@
 
 const { appendAndWaitForPaint } = require("devtools/client/performance/test/helpers/dom-utils");
 const { synthesizeCustomTreeClass } = require("devtools/client/performance/test/helpers/synth-utils");
 const { once } = require("devtools/client/performance/test/helpers/event-utils");
 
 add_task(async function() {
   const { MyCustomTreeItem, myDataSrc } = synthesizeCustomTreeClass();
 
-  const container = document.createElement("vbox");
+  const container = document.createXULElement("vbox");
   await appendAndWaitForPaint(gBrowser.selectedBrowser.parentNode, container);
 
   // Populate the tree and test the root item...
 
   const treeRoot = new MyCustomTreeItem(myDataSrc, { parent: null });
   treeRoot.attachTo(container);
 
   ok(!treeRoot.expanded,
diff --git a/devtools/client/performance/test/browser_perf-tree-abstract-02.js b/devtools/client/performance/test/browser_perf-tree-abstract-02.js
--- a/devtools/client/performance/test/browser_perf-tree-abstract-02.js
+++ b/devtools/client/performance/test/browser_perf-tree-abstract-02.js
@@ -8,17 +8,17 @@
  */
 
 const { appendAndWaitForPaint } = require("devtools/client/performance/test/helpers/dom-utils");
 const { synthesizeCustomTreeClass } = require("devtools/client/performance/test/helpers/synth-utils");
 
 add_task(async function() {
   const { MyCustomTreeItem, myDataSrc } = synthesizeCustomTreeClass();
 
-  const container = document.createElement("vbox");
+  const container = document.createXULElement("vbox");
   await appendAndWaitForPaint(gBrowser.selectedBrowser.parentNode, container);
 
   // Populate the tree and test the root item...
 
   const treeRoot = new MyCustomTreeItem(myDataSrc, { parent: null });
   treeRoot.autoExpandDepth = 1;
   treeRoot.attachTo(container);
 
diff --git a/devtools/client/performance/test/browser_perf-tree-abstract-03.js b/devtools/client/performance/test/browser_perf-tree-abstract-03.js
--- a/devtools/client/performance/test/browser_perf-tree-abstract-03.js
+++ b/devtools/client/performance/test/browser_perf-tree-abstract-03.js
@@ -8,17 +8,17 @@
  */
 
 const { appendAndWaitForPaint } = require("devtools/client/performance/test/helpers/dom-utils");
 const { synthesizeCustomTreeClass } = require("devtools/client/performance/test/helpers/synth-utils");
 
 add_task(async function() {
   const { MyCustomTreeItem, myDataSrc } = synthesizeCustomTreeClass();
 
-  const container = document.createElement("vbox");
+  const container = document.createXULElement("vbox");
   await appendAndWaitForPaint(gBrowser.selectedBrowser.parentNode, container);
 
   // Populate the tree by pressing RIGHT...
 
   const treeRoot = new MyCustomTreeItem(myDataSrc, { parent: null });
   treeRoot.attachTo(container);
   treeRoot.focus();
 
diff --git a/devtools/client/performance/test/browser_perf-tree-abstract-04.js b/devtools/client/performance/test/browser_perf-tree-abstract-04.js
--- a/devtools/client/performance/test/browser_perf-tree-abstract-04.js
+++ b/devtools/client/performance/test/browser_perf-tree-abstract-04.js
@@ -8,17 +8,17 @@
 
 const { appendAndWaitForPaint } = require("devtools/client/performance/test/helpers/dom-utils");
 const { synthesizeCustomTreeClass } = require("devtools/client/performance/test/helpers/synth-utils");
 const { once } = require("devtools/client/performance/test/helpers/event-utils");
 
 add_task(async function() {
   const { MyCustomTreeItem, myDataSrc } = synthesizeCustomTreeClass();
 
-  const container = document.createElement("vbox");
+  const container = document.createXULElement("vbox");
   await appendAndWaitForPaint(gBrowser.selectedBrowser.parentNode, container);
 
   // Populate the tree and test the root item...
 
   const treeRoot = new MyCustomTreeItem(myDataSrc, { parent: null });
   treeRoot.attachTo(container);
 
   const originalTreeRootExpandedState = treeRoot.expanded;
diff --git a/devtools/client/performance/test/browser_perf-tree-abstract-05.js b/devtools/client/performance/test/browser_perf-tree-abstract-05.js
--- a/devtools/client/performance/test/browser_perf-tree-abstract-05.js
+++ b/devtools/client/performance/test/browser_perf-tree-abstract-05.js
@@ -8,17 +8,17 @@
  */
 
 const { appendAndWaitForPaint } = require("devtools/client/performance/test/helpers/dom-utils");
 const { synthesizeCustomTreeClass } = require("devtools/client/performance/test/helpers/synth-utils");
 
 add_task(async function() {
   const { MyCustomTreeItem } = synthesizeCustomTreeClass();
 
-  const container = document.createElement("vbox");
+  const container = document.createXULElement("vbox");
   container.style.height = "100%";
   container.style.overflow = "scroll";
   await appendAndWaitForPaint(gBrowser.selectedBrowser.parentNode, container);
 
   const myDataSrc = {
     label: "root",
     children: []
   };
diff --git a/devtools/client/performance/test/browser_perf-tree-view-01.js b/devtools/client/performance/test/browser_perf-tree-view-01.js
--- a/devtools/client/performance/test/browser_perf-tree-view-01.js
+++ b/devtools/client/performance/test/browser_perf-tree-view-01.js
@@ -14,17 +14,17 @@ const { synthesizeProfile } = require("d
 add_task(function() {
   const profile = synthesizeProfile();
   const threadNode = new ThreadNode(profile.threads[0], { startTime: 0, endTime: 20 });
 
   // Don't display the synthesized (root) and the real (root) node twice.
   threadNode.calls = threadNode.calls[0].calls;
 
   const treeRoot = new CallView({ frame: threadNode });
-  const container = document.createElement("vbox");
+  const container = document.createXULElement("vbox");
   treeRoot.autoExpandDepth = 0;
   treeRoot.attachTo(container);
 
   is(container.childNodes.length, 1,
     "The container node should have one child available.");
   is(container.childNodes[0].className, "call-tree-item",
     "The root node in the tree has the correct class name.");
 
diff --git a/devtools/client/performance/test/browser_perf-tree-view-02.js b/devtools/client/performance/test/browser_perf-tree-view-02.js
--- a/devtools/client/performance/test/browser_perf-tree-view-02.js
+++ b/devtools/client/performance/test/browser_perf-tree-view-02.js
@@ -23,17 +23,17 @@ add_task(function() {
     profile.threads[0].stringTable[1].replace("A (", `${MANGLED_FN} (`);
 
   const threadNode = new ThreadNode(profile.threads[0], { startTime: 0, endTime: 20 });
 
   // Don't display the synthesized (root) and the real (root) node twice.
   threadNode.calls = threadNode.calls[0].calls;
 
   const treeRoot = new CallView({ frame: threadNode });
-  const container = document.createElement("vbox");
+  const container = document.createXULElement("vbox");
   treeRoot.autoExpandDepth = 0;
   treeRoot.attachTo(container);
 
   const $$ = node => container.querySelectorAll(node);
   const $fun = (node, ancestor) => (ancestor || container).querySelector(
     ".call-tree-cell[type=function] > " + node);
   const $$fun = (node, ancestor) => (ancestor || container).querySelectorAll(
     ".call-tree-cell[type=function] > " + node);
diff --git a/devtools/client/performance/test/browser_perf-tree-view-03.js b/devtools/client/performance/test/browser_perf-tree-view-03.js
--- a/devtools/client/performance/test/browser_perf-tree-view-03.js
+++ b/devtools/client/performance/test/browser_perf-tree-view-03.js
@@ -14,17 +14,17 @@ const { synthesizeProfile } = require("d
 add_task(function() {
   const profile = synthesizeProfile();
   const threadNode = new ThreadNode(profile.threads[0], { startTime: 0, endTime: 20 });
 
   // Don't display the synthesized (root) and the real (root) node twice.
   threadNode.calls = threadNode.calls[0].calls;
 
   const treeRoot = new CallView({ frame: threadNode });
-  const container = document.createElement("vbox");
+  const container = document.createXULElement("vbox");
   treeRoot.attachTo(container);
 
   const $$fun = i => container.querySelectorAll(".call-tree-cell[type=function]")[i];
   const $$nam = i => container.querySelectorAll(
     ".call-tree-cell[type=function] > .call-tree-name")[i];
   const $$dur = i => container.querySelectorAll(".call-tree-cell[type=duration]")[i];
 
   is(container.childNodes.length, 7,
diff --git a/devtools/client/performance/test/browser_perf-tree-view-04.js b/devtools/client/performance/test/browser_perf-tree-view-04.js
--- a/devtools/client/performance/test/browser_perf-tree-view-04.js
+++ b/devtools/client/performance/test/browser_perf-tree-view-04.js
@@ -14,17 +14,17 @@ const { synthesizeProfile } = require("d
 add_task(function() {
   const profile = synthesizeProfile();
   const threadNode = new ThreadNode(profile.threads[0], { startTime: 0, endTime: 20 });
 
   // Don't display the synthesized (root) and the real (root) node twice.
   threadNode.calls = threadNode.calls[0].calls;
 
   const treeRoot = new CallView({ frame: threadNode });
-  const container = document.createElement("vbox");
+  const container = document.createXULElement("vbox");
   treeRoot.attachTo(container);
 
   is(treeRoot.target.getAttribute("origin"), "chrome",
     "The root node's 'origin' attribute is correct.");
   is(treeRoot.target.getAttribute("category"), "",
     "The root node's 'category' attribute is correct.");
   is(treeRoot.target.getAttribute("tooltiptext"), "",
     "The root node's 'tooltiptext' attribute is correct.");
diff --git a/devtools/client/performance/test/browser_perf-tree-view-05.js b/devtools/client/performance/test/browser_perf-tree-view-05.js
--- a/devtools/client/performance/test/browser_perf-tree-view-05.js
+++ b/devtools/client/performance/test/browser_perf-tree-view-05.js
@@ -14,17 +14,17 @@ const { synthesizeProfile } = require("d
 add_task(function() {
   const profile = synthesizeProfile();
   const threadNode = new ThreadNode(profile.threads[0], { startTime: 0, endTime: 20 });
 
   // Don't display the synthesized (root) and the real (root) node twice.
   threadNode.calls = threadNode.calls[0].calls;
 
   const treeRoot = new CallView({ frame: threadNode });
-  const container = document.createElement("vbox");
+  const container = document.createXULElement("vbox");
   treeRoot.attachTo(container);
 
   const categories = container.querySelectorAll(".call-tree-category");
   is(categories.length, 6,
     "The call tree displays a correct number of categories.");
   ok(!container.hasAttribute("categories-hidden"),
     "All categories should be visible in the tree.");
 
diff --git a/devtools/client/performance/test/browser_perf-tree-view-06.js b/devtools/client/performance/test/browser_perf-tree-view-06.js
--- a/devtools/client/performance/test/browser_perf-tree-view-06.js
+++ b/devtools/client/performance/test/browser_perf-tree-view-06.js
@@ -15,17 +15,17 @@ const { idleWait, waitUntil } = require(
 add_task(async function() {
   const profile = synthesizeProfile();
   const threadNode = new ThreadNode(profile.threads[0], { startTime: 0, endTime: 20 });
 
   // Don't display the synthesized (root) and the real (root) node twice.
   threadNode.calls = threadNode.calls[0].calls;
 
   const treeRoot = new CallView({ frame: threadNode });
-  const container = document.createElement("vbox");
+  const container = document.createXULElement("vbox");
   treeRoot.attachTo(container);
 
   const A = treeRoot.getChild();
   const B = A.getChild();
   const D = B.getChild();
 
   let linkEvent = null;
   const handler = (e) => {
diff --git a/devtools/client/performance/test/browser_perf-tree-view-07.js b/devtools/client/performance/test/browser_perf-tree-view-07.js
--- a/devtools/client/performance/test/browser_perf-tree-view-07.js
+++ b/devtools/client/performance/test/browser_perf-tree-view-07.js
@@ -14,17 +14,17 @@ const { synthesizeProfile } = require("d
 add_task(function() {
   const profile = synthesizeProfile();
   const threadNode = new ThreadNode(profile.threads[0], { startTime: 0, endTime: 20 });
 
   // Don't display the synthesized (root) and the real (root) node twice.
   threadNode.calls = threadNode.calls[0].calls;
 
   const treeRoot = new CallView({ frame: threadNode });
-  const container = document.createElement("vbox");
+  const container = document.createXULElement("vbox");
   container.id = "call-tree-container";
   treeRoot.attachTo(container);
 
   const A = treeRoot.getChild();
   const B = A.getChild();
   const D = B.getChild();
 
   is(D.root, treeRoot,
diff --git a/devtools/client/performance/test/browser_perf-tree-view-08.js b/devtools/client/performance/test/browser_perf-tree-view-08.js
--- a/devtools/client/performance/test/browser_perf-tree-view-08.js
+++ b/devtools/client/performance/test/browser_perf-tree-view-08.js
@@ -15,17 +15,17 @@ const RecordingUtils = require("devtools
 add_task(function() {
   const threadNode = new ThreadNode(gProfile.threads[0], { startTime: 0, endTime: 20,
                                                            contentOnly: true });
 
   // Don't display the synthesized (root) and the real (root) node twice.
   threadNode.calls = threadNode.calls[0].calls;
 
   const treeRoot = new CallView({ frame: threadNode, autoExpandDepth: 10 });
-  const container = document.createElement("vbox");
+  const container = document.createXULElement("vbox");
   treeRoot.attachTo(container);
 
   /*
    * (root)
    *   - A
    *     - B
    *       - C
    *       - D
diff --git a/devtools/client/performance/test/browser_perf-tree-view-09.js b/devtools/client/performance/test/browser_perf-tree-view-09.js
--- a/devtools/client/performance/test/browser_perf-tree-view-09.js
+++ b/devtools/client/performance/test/browser_perf-tree-view-09.js
@@ -10,17 +10,17 @@
 const { ThreadNode } = require("devtools/client/performance/modules/logic/tree-model");
 const { CallView } = require("devtools/client/performance/modules/widgets/tree-view");
 const RecordingUtils = require("devtools/shared/performance/recording-utils");
 
 add_task(function() {
   const threadNode = new ThreadNode(gProfile.threads[0], { startTime: 0, endTime: 20,
                                                            invertTree: true });
   const treeRoot = new CallView({ frame: threadNode, inverted: true });
-  const container = document.createElement("vbox");
+  const container = document.createXULElement("vbox");
   treeRoot.attachTo(container);
 
   is(treeRoot.getChild(0).frame.location, "B",
     "The tree root's first child is the `B` function.");
   is(treeRoot.getChild(1).frame.location, "A",
     "The tree root's second child is the `A` function.");
 });
 
diff --git a/devtools/client/performance/test/browser_perf-tree-view-10.js b/devtools/client/performance/test/browser_perf-tree-view-10.js
--- a/devtools/client/performance/test/browser_perf-tree-view-10.js
+++ b/devtools/client/performance/test/browser_perf-tree-view-10.js
@@ -10,17 +10,17 @@
 const { ThreadNode } = require("devtools/client/performance/modules/logic/tree-model");
 const { CallView } = require("devtools/client/performance/modules/widgets/tree-view");
 const RecordingUtils = require("devtools/shared/performance/recording-utils");
 
 add_task(function() {
   const threadNode = new ThreadNode(gProfile.threads[0], { startTime: 0, endTime: 50,
                                                            invertTree: true });
   const treeRoot = new CallView({ frame: threadNode, inverted: true });
-  const container = document.createElement("vbox");
+  const container = document.createXULElement("vbox");
   treeRoot.attachTo(container);
 
   // Add 1 to each index to skip the hidden root node
   const $$nam = i => container.querySelectorAll(
     ".call-tree-cell[type=function] > .call-tree-name")[i + 1];
   const $$per = i => container.querySelectorAll(
     ".call-tree-cell[type=percentage]")[i + 1];
   const $$selfper = i => container.querySelectorAll(
diff --git a/devtools/client/performance/test/helpers/synth-utils.js b/devtools/client/performance/test/helpers/synth-utils.js
--- a/devtools/client/performance/test/helpers/synth-utils.js
+++ b/devtools/client/performance/test/helpers/synth-utils.js
@@ -58,17 +58,17 @@ exports.synthesizeCustomTreeClass = () =
 
   function MyCustomTreeItem(dataSrc, properties) {
     AbstractTreeItem.call(this, properties);
     this.itemDataSrc = dataSrc;
   }
 
   MyCustomTreeItem.prototype = extend(AbstractTreeItem.prototype, {
     _displaySelf: function(document, arrowNode) {
-      const node = document.createElement("hbox");
+      const node = document.createXULElement("hbox");
       node.style.marginInlineStart = (this.level * 10) + "px";
       node.appendChild(arrowNode);
       node.appendChild(document.createTextNode(this.itemDataSrc.label));
       return node;
     },
 
     _populateSelf: function(children) {
       for (const childDataSrc of this.itemDataSrc.children) {
diff --git a/devtools/client/performance/views/toolbar.js b/devtools/client/performance/views/toolbar.js
--- a/devtools/client/performance/views/toolbar.js
+++ b/devtools/client/performance/views/toolbar.js
@@ -55,17 +55,17 @@ var ToolbarView = {
     this.optionsView.destroy();
   },
 
   /**
    * Creates the timeline markers filter popup.
    */
   _buildMarkersFilterPopup: function() {
     for (const [markerName, markerDetails] of Object.entries(TIMELINE_BLUEPRINT)) {
-      const menuitem = document.createElement("menuitem");
+      const menuitem = document.createXULElement("menuitem");
       menuitem.setAttribute("closemenu", "none");
       menuitem.setAttribute("type", "checkbox");
       menuitem.setAttribute("align", "center");
       menuitem.setAttribute("flex", "1");
       menuitem.setAttribute("label",
                             MarkerBlueprintUtils.getMarkerGenericName(markerName));
       menuitem.setAttribute("marker-type", markerName);
       menuitem.className = `marker-color-${markerDetails.colorName}`;
diff --git a/devtools/client/scratchpad/scratchpad.js b/devtools/client/scratchpad/scratchpad.js
--- a/devtools/client/scratchpad/scratchpad.js
+++ b/devtools/client/scratchpad/scratchpad.js
@@ -1280,31 +1280,31 @@ var Scratchpad = {
       recentFilesPopup.firstChild.remove();
     }
 
     if (filePaths.length > 0) {
       recentFilesMenu.removeAttribute("disabled");
 
       // Print out menuitems with the most recent file first.
       for (let i = filePaths.length - 1; i >= 0; --i) {
-        const menuitem = document.createElement("menuitem");
+        const menuitem = document.createXULElement("menuitem");
         menuitem.setAttribute("type", "radio");
         menuitem.setAttribute("label", filePaths[i]);
 
         if (filePaths[i] === filename) {
           menuitem.setAttribute("checked", true);
           menuitem.setAttribute("disabled", true);
         }
 
         menuitem.addEventListener("command", Scratchpad.openFile.bind(Scratchpad, i));
         recentFilesPopup.appendChild(menuitem);
       }
 
-      recentFilesPopup.appendChild(document.createElement("menuseparator"));
-      const clearItems = document.createElement("menuitem");
+      recentFilesPopup.appendChild(document.createXULElement("menuseparator"));
+      const clearItems = document.createXULElement("menuitem");
       clearItems.setAttribute("id", "sp-menu-clear_recent");
       clearItems.setAttribute("label",
                               this.strings
                               .GetStringFromName("clearRecentMenuItems.label"));
       clearItems.setAttribute("command", "sp-cmd-clearRecentFiles");
       recentFilesPopup.appendChild(clearItems);
     }
   },
diff --git a/devtools/client/shared/widgets/SideMenuWidget.jsm b/devtools/client/shared/widgets/SideMenuWidget.jsm
--- a/devtools/client/shared/widgets/SideMenuWidget.jsm
+++ b/devtools/client/shared/widgets/SideMenuWidget.jsm
@@ -40,17 +40,17 @@ this.SideMenuWidget = function SideMenuW
 
   const { contextMenu, showArrows, showItemCheckboxes, showGroupCheckboxes } = aOptions;
   this._contextMenu = contextMenu || null;
   this._showArrows = showArrows || false;
   this._showItemCheckboxes = showItemCheckboxes || false;
   this._showGroupCheckboxes = showGroupCheckboxes || false;
 
   // Create an internal scrollbox container.
-  this._list = this.document.createElement("scrollbox");
+  this._list = this.document.createXULElement("scrollbox");
   this._list.className = "side-menu-widget-container theme-sidebar";
   this._list.setAttribute("flex", "1");
   this._list.setAttribute("orient", "vertical");
   this._list.setAttribute("with-arrows", this._showArrows);
   this._list.setAttribute("with-item-checkboxes", this._showItemCheckboxes);
   this._list.setAttribute("with-group-checkboxes", this._showGroupCheckboxes);
   this._list.setAttribute("tabindex", "0");
   this._list.addEventListener("contextmenu", e => this._showContextMenu(e));
@@ -314,17 +314,17 @@ SideMenuWidget.prototype = {
 
   /**
    * Creates and appends a label signaling that this container is empty.
    */
   _showEmptyText: function() {
     if (this._emptyTextNode || !this._emptyTextValue) {
       return;
     }
-    const label = this.document.createElement("label");
+    const label = this.document.createXULElement("label");
     label.className = "plain side-menu-widget-empty-text";
     label.setAttribute("value", this._emptyTextValue);
 
     this._parent.insertBefore(label, this._list);
     this._emptyTextNode = label;
   },
 
   /**
@@ -451,27 +451,27 @@ SideMenuWidget.prototype = {
 function SideMenuGroup(aWidget, aName, aOptions = {}) {
   this.document = aWidget.document;
   this.window = aWidget.window;
   this.ownerView = aWidget;
   this.identifier = aName;
 
   // Create an internal title and list container.
   if (aName) {
-    const target = this._target = this.document.createElement("vbox");
+    const target = this._target = this.document.createXULElement("vbox");
     target.className = "side-menu-widget-group";
     target.setAttribute("name", aName);
 
-    const list = this._list = this.document.createElement("vbox");
+    const list = this._list = this.document.createXULElement("vbox");
     list.className = "side-menu-widget-group-list";
 
-    const title = this._title = this.document.createElement("hbox");
+    const title = this._title = this.document.createXULElement("hbox");
     title.className = "side-menu-widget-group-title";
 
-    const name = this._name = this.document.createElement("label");
+    const name = this._name = this.document.createXULElement("label");
     name.className = "plain name";
     name.setAttribute("value", aName);
     name.setAttribute("crop", "end");
     name.setAttribute("flex", "1");
 
     // Show a checkbox before the content.
     if (aOptions.showCheckbox) {
       const checkbox = this._checkbox = makeCheckbox(title, {
@@ -481,17 +481,17 @@ function SideMenuGroup(aWidget, aName, a
       checkbox.className = "side-menu-widget-group-checkbox";
     }
 
     title.appendChild(name);
     target.appendChild(title);
     target.appendChild(list);
   } else {
     // Skip a few redundant nodes when no title is shown.
-    const target = this._target = this._list = this.document.createElement("vbox");
+    const target = this._target = this._list = this.document.createXULElement("vbox");
     target.className = "side-menu-widget-group side-menu-widget-group-list";
     target.setAttribute("merged-group-contents", "");
   }
 }
 
 SideMenuGroup.prototype = {
   get _orderedGroupElementsArray() {
     return this.ownerView._orderedGroupElementsArray;
@@ -568,39 +568,39 @@ SideMenuGroup.prototype = {
  *          - showCheckbox: specifies if a checkbox should be displayed.
  */
 function SideMenuItem(aGroup, aContents, aAttachment = {}, aOptions = {}) {
   this.document = aGroup.document;
   this.window = aGroup.window;
   this.ownerView = aGroup;
 
   if (aOptions.showArrow || aOptions.showCheckbox) {
-    const container = this._container = this.document.createElement("hbox");
+    const container = this._container = this.document.createXULElement("hbox");
     container.className = "side-menu-widget-item";
 
-    const target = this._target = this.document.createElement("vbox");
+    const target = this._target = this.document.createXULElement("vbox");
     target.className = "side-menu-widget-item-contents";
 
     // Show a checkbox before the content.
     if (aOptions.showCheckbox) {
       const checkbox = this._checkbox = makeCheckbox(container, aAttachment);
       checkbox.className = "side-menu-widget-item-checkbox";
     }
 
     container.appendChild(target);
 
     // Show a horizontal arrow towards the content.
     if (aOptions.showArrow) {
-      const arrow = this._arrow = this.document.createElement("hbox");
+      const arrow = this._arrow = this.document.createXULElement("hbox");
       arrow.className = "side-menu-widget-item-arrow";
       container.appendChild(arrow);
     }
   } else {
     // Skip a few redundant nodes when no horizontal arrow or checkbox is shown.
-    const target = this._target = this._container = this.document.createElement("hbox");
+    const target = this._target = this._container = this.document.createXULElement("hbox");
     target.className = "side-menu-widget-item side-menu-widget-item-contents";
     target.setAttribute("merged-item-contents", "");
   }
 
   this._target.setAttribute("flex", "1");
   this.contents = aContents;
 }
 
@@ -687,17 +687,17 @@ SideMenuItem.prototype = {
  *        The parent node to contain this checkbox.
  * @param object aOptions
  *        An object containing some or all of the following properties:
  *          - description: defaults to "item" if unspecified
  *          - checkboxState: true for checked, false for unchecked
  *          - checkboxTooltip: the tooltip text of the checkbox
  */
 function makeCheckbox(aParentNode, aOptions) {
-  const checkbox = aParentNode.ownerDocument.createElement("checkbox");
+  const checkbox = aParentNode.ownerDocument.createXULElement("checkbox");
 
   checkbox.setAttribute("tooltiptext", aOptions.checkboxTooltip || "");
 
   if (aOptions.checkboxState) {
     checkbox.setAttribute("checked", true);
   } else {
     checkbox.removeAttribute("checked");
   }
