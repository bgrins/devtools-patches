# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  12cc80a0e9968ade961879ee07effb815da691f0

diff --git a/toolkit/content/customElements.js b/toolkit/content/customElements.js
--- a/toolkit/content/customElements.js
+++ b/toolkit/content/customElements.js
@@ -285,31 +285,34 @@ MozXULElement.implementCustomInterface(M
 window.MozElementMixin = MozElementMixin;
 window.MozXULElement = MozXULElement;
 window.MozBaseControl = MozBaseControl;
 
 // For now, don't load any elements in the extension dummy document.
 // We will want to load <browser> when that's migrated (bug 1441935).
 const isDummyDocument = document.documentURI == "chrome://extensions/content/dummy.xul";
 if (!isDummyDocument) {
-  for (let script of [
-    "chrome://global/content/elements/general.js",
-    "chrome://global/content/elements/progressmeter.js",
-    "chrome://global/content/elements/radio.js",
-    "chrome://global/content/elements/textbox.js",
-    "chrome://global/content/elements/tabbox.js",
-    "chrome://global/content/elements/tree.js",
-  ]) {
-    Services.scriptloader.loadSubScript(script, window);
-  }
+  let evt = document.contentType == "application/xhtml+xml" ? "readystatechange" : "MozBeforeInitialXULLayout";
+  window.addEventListener(evt, () => {
+    for (let script of [
+      "chrome://global/content/elements/general.js",
+      "chrome://global/content/elements/progressmeter.js",
+      "chrome://global/content/elements/radio.js",
+      "chrome://global/content/elements/textbox.js",
+      "chrome://global/content/elements/tabbox.js",
+      "chrome://global/content/elements/tree.js",
+    ]) {
+      Services.scriptloader.loadSubScript(script, window);
+    }
 
-  for (let [tag, script] of [
-    ["findbar", "chrome://global/content/elements/findbar.js"],
-    ["stringbundle", "chrome://global/content/elements/stringbundle.js"],
-    ["printpreview-toolbar", "chrome://global/content/printPreviewToolbar.js"],
-    ["editor", "chrome://global/content/elements/editor.js"],
-  ]) {
-    customElements.setElementCreationCallback(tag, () => {
-      Services.scriptloader.loadSubScript(script, window);
-    });
-  }
+    for (let [tag, script] of [
+      ["findbar", "chrome://global/content/elements/findbar.js"],
+      ["stringbundle", "chrome://global/content/elements/stringbundle.js"],
+      ["printpreview-toolbar", "chrome://global/content/printPreviewToolbar.js"],
+      ["editor", "chrome://global/content/elements/editor.js"],
+    ]) {
+      customElements.setElementCreationCallback(tag, () => {
+        Services.scriptloader.loadSubScript(script, window);
+      });
+    }
+  }, {once: true, capture: true});
 }
 })();
