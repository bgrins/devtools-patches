# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  3cfda8a26f94281dde8d08a30c0edb54f2ebe29f

diff --git a/devtools/server/main.js b/devtools/server/main.js
--- a/devtools/server/main.js
+++ b/devtools/server/main.js
@@ -826,53 +826,37 @@ var DebuggerServer = {
 
       // Step 2: Send a connect request to the worker debugger.
       aDbg.postMessage(JSON.stringify({
         type: "connect",
         id: aId,
         options: aOptions
       }));
 
-      // Steps 3-6 are performed on the worker thread (see worker.js).
-      let threadActor;
-      let webConsoleActor;
+      // Steps 3-5 are performed on the worker thread (see worker.js).
 
-      // Step 7: Wait for a response from the worker debugger.
+      // Step 6: Wait for a connection response from the worker debugger.
       let listener = {
         onClose: () => {
           aDbg.removeListener(listener);
 
           reject("closed");
         },
 
         onMessage: (message) => {
           let packet = JSON.parse(message);
-
-          // Step 8: Assign the actors that we created in the worker thread.
-          if (packet.type === "connected" && packet.id === aId) {
-            threadActor = packet.threadActor;
-            webConsoleActor = packet.webConsoleActor;
-          }
-
-          if (packet.type !== "message" || packet.id !== aId) {
+          if (packet.type !== "connected" || packet.id !== aId) {
             return;
           }
 
-          message = packet.message;
-          if (message.error) {
-            reject(error);
-          }
-
-          if (message.type !== "paused") {
-            return;
-          }
-
+          // Step 7: The initial connection packet has been received, remove
+          // this listener.
           aDbg.removeListener(listener);
 
-          // Step 9: Create a transport for the connection to the worker.
+          // Step 8: Create a transport for the connection to the worker.
           let transport = new WorkerDebuggerTransport(aDbg, aId);
           transport.ready();
           transport.hooks = {
             onClosed: () => {
               if (!aDbg.isClosed) {
                 aDbg.postMessage(JSON.stringify({
                   type: "disconnect",
                   id: aId
@@ -891,18 +875,18 @@ var DebuggerServer = {
           };
 
           // Ensure that any packets received from the client on the main thread
           // to actors on the worker thread are forwarded to the server on the
           // worker thread.
           aConnection.setForwarding(aId, transport);
 
           resolve({
-            threadActor: threadActor,
-            webConsoleActor: webConsoleActor,
+            threadActor: packet.threadActor,
+            webConsoleActor: packet.webConsoleActor,
             transport: transport
           });
         }
       };
       aDbg.addListener(listener);
     });
   },
 
diff --git a/devtools/server/worker.js b/devtools/server/worker.js
--- a/devtools/server/worker.js
+++ b/devtools/server/worker.js
@@ -85,24 +85,16 @@ this.addEventListener("message",  functi
     // Step 5: Notifiy the parent that the actors are created.
     // These will be used later once the thread is attached.
     postMessage(JSON.stringify({
       type: "connected",
       id: packet.id,
       threadActor: threadActor.actorID,
       webConsoleActor: webConsoleActor.actorID,
     }));
-
-    // Step 6: Attach to the thread actor.
-    //
-    // This will cause a packet to be sent over the connection to the parent.
-    // Because this connection uses WorkerDebuggerTransport internally, this
-    // packet will be sent using WorkerDebuggerGlobalScope.postMessage, causing
-    // an onMessage event to be fired on the WorkerDebugger in the main thread.
-    threadActor.onAttach({});
     break;
 
   case "disconnect":
     connections[packet.id].connection.close();
     break;
 
   case "rpc":
     let deferred = rpcDeferreds[packet.id];
diff --git a/devtools/shared/client/main.js b/devtools/shared/client/main.js
--- a/devtools/shared/client/main.js
+++ b/devtools/shared/client/main.js
@@ -1345,27 +1345,41 @@ WorkerClient.prototype = {
       DevToolsUtils.executeSoon(() => aOnResponse({
         type: "connected",
         threadActor: this.thread._actor,
         webConsoleActor: this.webConsoleActor,
       }, this.thread));
       return;
     }
 
+    // The connect call does not also attach the thread, as of 44.
     this.request({
       to: this._actor,
       type: "connect",
       options: aOptions,
-    }, (aResponse) => {
-      if (!aResponse.error) {
-        this.thread = new ThreadClient(this, aResponse.threadActor);
-        this.webConsoleActor = aResponse.webConsoleActor;
+    }, (connectReponse) => {
+      if (connectReponse.error) {
+        aOnResponse(connectReponse, null);
+        return;
+      }
+
+      this.request({
+        to: connectReponse.threadActor,
+        type: "attach"
+      }, (attachResponse) => {
+        if (attachResponse.error) {
+          aOnResponse(attachResponse, null);
+        }
+
+        this.thread = new ThreadClient(this, connectReponse.threadActor);
+        this.webConsoleActor = connectReponse.webConsoleActor;
         this.client.registerClient(this.thread);
-      }
-      aOnResponse(aResponse, this.thread);
+
+        aOnResponse(connectReponse, this.thread);
+      });
     });
   },
 
   _onClose: function () {
     this.removeListener("close", this._onClose);
 
     this.client.unregisterClient(this);
     this._isClosed = true;
