# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  22b421afcf73faf3db5bf2e39b291bbc300e1d9a
Bug xxx: SW

diff --git a/devtools/server/actors/webconsole.js b/devtools/server/actors/webconsole.js
--- a/devtools/server/actors/webconsole.js
+++ b/devtools/server/actors/webconsole.js
@@ -427,18 +427,24 @@ WebConsoleActor.prototype =
     if (aUseObjectGlobal && typeof aValue == "object") {
       try {
         global = Cu.getGlobalForObject(aValue);
       }
       catch (ex) {
         // The above can throw an exception if aValue is not an actual object.
       }
     }
-    let dbgGlobal = this.dbg.makeGlobalObjectReference(global);
-    return dbgGlobal.makeDebuggeeValue(aValue);
+    try {
+      let dbgGlobal = this.dbg.makeGlobalObjectReference(global);
+      return dbgGlobal.makeDebuggeeValue(aValue);
+    } catch(ex) {
+      // Handle 'Object in compartment marked as invisible to debugger' error
+      let dbgGlobal = this.dbg.makeGlobalObjectReference(this.window);
+      return dbgGlobal.makeDebuggeeValue(ex.toString());
+    }
   },
 
   /**
    * Create a grip for the given object.
    *
    * @param object aObject
    *        The object you want.
    * @param object aPool
@@ -728,19 +734,21 @@ WebConsoleActor.prototype =
 
     while (types.length > 0) {
       let type = types.shift();
       switch (type) {
         case "ConsoleAPI": {
           if (!this.consoleAPIListener) {
             break;
           }
+
           let cache = this.consoleAPIListener
                       .getCachedMessages(!this.parentActor.isRootActor);
           cache.forEach((aMessage) => {
+          console.log("Getting cached messages", this, this.parentActor.window.performance.timing.requestStart, aMessage);
             let message = this.prepareConsoleMessageForRemote(aMessage);
             message._type = type;
             messages.push(message);
           });
           break;
         }
         case "PageError": {
           if (!this.consoleServiceListener) {
