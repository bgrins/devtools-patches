# HG changeset patch
# Parent  d24d00b719aac4882dc4b23e2a6220cf5d535ca2

diff --git a/browser/actors/BrowserTabParent.jsm b/browser/actors/BrowserTabParent.jsm
--- a/browser/actors/BrowserTabParent.jsm
+++ b/browser/actors/BrowserTabParent.jsm
@@ -11,20 +11,19 @@ class BrowserTabParent extends JSWindowA
     if (!browser) {
       return; // Can happen sometimes if browser is being destroyed
     }
 
     let gBrowser = browser.ownerGlobal.gBrowser;
 
     if (!gBrowser) {
       // Note: gBrowser might be null because this message might be received
-      // from the extension process. There's still an embedderElement involved,
-      // but it's the one coming from dummy.xul.
-      // This should probably be fixed by adding support to specifying "group: 'browsers"
-      // in the registerWindowActor options/. See bug 1557118.
+      // from the extension process. This should probably be fixed by adding
+      // support to specifying "group: 'browsers" in the registerWindowActor
+      // options/. See bug 1557118.
       return;
     }
 
     if (!gBrowser.tabpanels || !gBrowser.tabpanels.contains(browser)) {
       // Note: This is ignoring browser elements related to extension pages that are not loaded
       // as a browser tab (like sidebars, devtools panels and options pages embedded into
       // about:addons, browserAction and pageAction popup panels.
       // (Ideally we could call gBrowser.getTabForBrowser, but it returns undefined early in
diff --git a/toolkit/components/extensions/ExtensionParent.jsm b/toolkit/components/extensions/ExtensionParent.jsm
--- a/toolkit/components/extensions/ExtensionParent.jsm
+++ b/toolkit/components/extensions/ExtensionParent.jsm
@@ -1350,25 +1350,23 @@ class HiddenXULWindow {
     }
 
     let system = Services.scriptSecurityManager.getSystemPrincipal();
     chromeShell.createAboutBlankContentViewer(system, system);
     chromeShell.useGlobalHistory = false;
     let loadURIOptions = {
       triggeringPrincipal: system,
     };
-    chromeShell.loadURI(
-      "chrome://extensions/content/dummy.xul",
-      loadURIOptions
-    );
+    chromeShell.loadURI("about:blank", loadURIOptions);
 
     await promiseObserved(
       "chrome-document-global-created",
       win => win.document == chromeShell.document
     );
+    windowlessBrowser.document.ownerGlobal.loadCustomElements();
     await promiseDocumentLoaded(windowlessBrowser.document);
     if (this.unloaded) {
       windowlessBrowser.close();
       return;
     }
     this._windowlessBrowser = windowlessBrowser;
   }
 
diff --git a/toolkit/components/extensions/ExtensionXPCShellUtils.jsm b/toolkit/components/extensions/ExtensionXPCShellUtils.jsm
--- a/toolkit/components/extensions/ExtensionXPCShellUtils.jsm
+++ b/toolkit/components/extensions/ExtensionXPCShellUtils.jsm
@@ -203,27 +203,25 @@ class ContentPage {
       Ci.nsIWebNavigation
     );
 
     chromeShell.createAboutBlankContentViewer(system, system);
     chromeShell.useGlobalHistory = false;
     let loadURIOptions = {
       triggeringPrincipal: system,
     };
-    chromeShell.loadURI(
-      "chrome://extensions/content/dummy.xul",
-      loadURIOptions
-    );
+    chromeShell.loadURI("about:blank", loadURIOptions);
 
     await promiseObserved(
       "chrome-document-global-created",
       win => win.document == chromeShell.document
     );
 
     let chromeDoc = await promiseDocumentLoaded(chromeShell.document);
+    chromeDoc.ownerGlobal.loadCustomElements();
 
     let browser = chromeDoc.createXULElement("browser");
     browser.setAttribute("type", "content");
     browser.setAttribute("disableglobalhistory", "true");
     if (this.userContextId) {
       browser.setAttribute("usercontextid", this.userContextId);
     }
 
diff --git a/toolkit/components/extensions/dummy.xul b/toolkit/components/extensions/dummy.xul
deleted file mode 100644
--- a/toolkit/components/extensions/dummy.xul
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0"?>
-<!-- This Source Code Form is subject to the terms of the Mozilla Public
-   - License, v. 2.0. If a copy of the MPL was not distributed with this file,
-   - You can obtain one at http://mozilla.org/MPL/2.0/. -->
-
-<window id="documentElement"/>
diff --git a/toolkit/components/extensions/jar.mn b/toolkit/components/extensions/jar.mn
--- a/toolkit/components/extensions/jar.mn
+++ b/toolkit/components/extensions/jar.mn
@@ -1,15 +1,14 @@
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 toolkit.jar:
 % content extensions %content/extensions/
-    content/extensions/dummy.xul
     content/extensions/ext-browser-content.js
     content/extensions/ext-toolkit.json
     content/extensions/parent/ext-activityLog.js (parent/ext-activityLog.js)
     content/extensions/parent/ext-alarms.js (parent/ext-alarms.js)
     content/extensions/parent/ext-backgroundPage.js (parent/ext-backgroundPage.js)
     content/extensions/parent/ext-browserSettings.js (parent/ext-browserSettings.js)
 #ifndef ANDROID
     content/extensions/parent/ext-captivePortal.js (parent/ext-captivePortal.js)
diff --git a/toolkit/components/processsingleton/CustomElementsListener.jsm b/toolkit/components/processsingleton/CustomElementsListener.jsm
--- a/toolkit/components/processsingleton/CustomElementsListener.jsm
+++ b/toolkit/components/processsingleton/CustomElementsListener.jsm
@@ -11,23 +11,28 @@ const { Services } = ChromeUtils.import(
 // top of individual documents.
 Services.obs.addObserver(
   {
     observe(doc) {
       if (
         doc.nodePrincipal.isSystemPrincipal &&
         (doc.contentType == "application/vnd.mozilla.xul+xml" ||
           doc.contentType == "application/xhtml+xml" ||
-          doc.contentType == "text/html") &&
-        // People shouldn't be using our built-in custom elements in
-        // system-principal about:blank anyway, and trying to support that
-        // causes responsiveness regressions.  So let's not support it.
-        doc.URL != "about:blank"
+          doc.contentType == "text/html")
       ) {
-        Services.scriptloader.loadSubScript(
-          "chrome://global/content/customElements.js",
-          doc.ownerGlobal
-        );
+        if (doc.URL != "about:blank") {
+          Services.scriptloader.loadSubScript(
+            "chrome://global/content/customElements.js",
+            doc.ownerGlobal
+          );
+        } else {
+          doc.ownerGlobal.loadCustomElements = () => {
+            Services.scriptloader.loadSubScript(
+              "chrome://global/content/customElements.js",
+              doc.ownerGlobal
+            );
+          };
+        }
       }
     },
   },
   "document-element-inserted"
 );
diff --git a/toolkit/content/customElements.js b/toolkit/content/customElements.js
--- a/toolkit/content/customElements.js
+++ b/toolkit/content/customElements.js
@@ -201,17 +201,17 @@
       },
     });
   }
 
   // The listener of DOMContentLoaded must be set on window, rather than
   // document, because the window can go away before the event is fired.
   // In that case, we don't want to initialize anything, otherwise we
   // may be leaking things because they will never be destroyed after.
-  let gIsDOMContentLoaded = false;
+  let gIsDOMContentLoaded = document.readyState == "complete";
   const gElementsPendingConnection = new Set();
   window.addEventListener(
     "DOMContentLoaded",
     () => {
       gIsDOMContentLoaded = true;
       for (let element of gElementsPendingConnection) {
         try {
           if (element.isConnected) {
@@ -744,18 +744,17 @@
     Services.scriptloader.loadSubScript(
       "chrome://global/content/elements/browser-custom-element.js",
       window
     );
   });
 
   // For now, don't load any elements in the extension dummy document.
   // We will want to load <browser> when that's migrated (bug 1441935).
-  const isDummyDocument =
-    document.documentURI == "chrome://extensions/content/dummy.xul";
+  const isDummyDocument = document.documentURI == "about:blank";
   if (!isDummyDocument) {
     for (let script of [
       "chrome://global/content/elements/dialog.js",
       "chrome://global/content/elements/general.js",
       "chrome://global/content/elements/button.js",
       "chrome://global/content/elements/checkbox.js",
       "chrome://global/content/elements/menu.js",
       "chrome://global/content/elements/menupopup.js",
