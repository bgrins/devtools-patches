# HG changeset patch
# Parent d31f7a547ab0c7393e3a50c06c4b7ec248f5a654
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug XX - Markup view performance on load

diff --git a/browser/devtools/markupview/test/browser.ini b/browser/devtools/markupview/test/browser.ini
--- a/browser/devtools/markupview/test/browser.ini
+++ b/browser/devtools/markupview/test/browser.ini
@@ -26,16 +26,17 @@ support-files =
 [browser_markupview_image_tooltip.js]
 [browser_markupview_mutation_01.js]
 [browser_markupview_mutation_02.js]
 [browser_markupview_navigation.js]
 [browser_markupview_node_not_displayed_01.js]
 [browser_markupview_node_not_displayed_02.js]
 [browser_markupview_pagesize_01.js]
 [browser_markupview_pagesize_02.js]
+[browser_markupview_reload.js]
 [browser_markupview_search_01.js]
 [browser_markupview_tag_edit_01.js]
 [browser_markupview_tag_edit_02.js]
 [browser_markupview_tag_edit_03.js]
 [browser_markupview_tag_edit_04.js]
 [browser_markupview_tag_edit_05.js]
 [browser_markupview_tag_edit_06.js]
 [browser_markupview_tag_edit_07.js]
diff --git a/browser/devtools/markupview/test/browser_markupview_reload.js b/browser/devtools/markupview/test/browser_markupview_reload.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/markupview/test/browser_markupview_reload.js
@@ -0,0 +1,97 @@
+/* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+const PAGE_A = TEST_URL_ROOT + "doc_markup_edit.html";
+const PAGE_B = "data:text/html,<p>p</p>";
+const PAGE_C = TEST_URL_ROOT + "doc_markup_flashing.html";
+
+let test = asyncTest(function*() {
+  let {inspector, toolbox} = yield addTab(PAGE_A).then(openInspector);
+
+  testPage(inspector, toolbox);
+  yield reloadPage(inspector);
+  testPage(inspector, toolbox);
+
+  yield navigateToPage(inspector, PAGE_B);
+  testPage(inspector, toolbox);
+  yield reloadPage(inspector);
+  testPage(inspector, toolbox);
+
+  yield navigateToPage(inspector, PAGE_C);
+  testPage(inspector, toolbox);
+  yield reloadPage(inspector);
+  testPage(inspector, toolbox);
+
+  yield goBack(inspector);
+  testPage(inspector, toolbox);
+
+  yield goBack(inspector);
+  testPage(inspector, toolbox);
+
+  yield goForward(inspector);
+  testPage(inspector, toolbox);
+});
+
+
+function testPage(inspector, toolbox)
+{
+  let inspector = toolbox.getCurrentPanel();
+  info("Testing page " + content.location.toString());
+  console.log(inspector.markup);
+
+  ok (inspector._markupBox.hasAttribute("hidden"), "Is hidden");
+  let p = content.document.querySelector("p");
+  inspector.selection.setNode(p);
+}
+
+function navigateToPage(inspector, URL) {
+  let def = promise.defer();
+  inspector.once("markuploaded", () => {
+    def.resolve();
+  });
+  content.location = URL;
+  return def.promise;
+}
+
+function reloadPage(inspector) {
+  let def = promise.defer();
+  inspector.once("markuploaded", () => {
+    def.resolve();
+  });
+  content.location.reload();
+  return def.promise;
+}
+
+function goBack(inspector) {
+  let def = promise.defer();
+  inspector.once("markuploaded", () => {
+    def.resolve();
+  });
+  content.back();
+  return def.promise;
+}
+
+function goForward(inspector) {
+  let def = promise.defer();
+  inspector.once("markuploaded", () => {
+    def.resolve();
+  });
+  content.forward();
+  return def.promise;
+}
+
+function testReload(inspector, toolbox) {
+  info("Page reloaded");
+  let p = content.document.querySelector("p");
+  inspector.selection.setNode(p);
+  inspector.once("inspector-updated", () => {
+    is(inspector.selection.node, p, "Node re-selected.");
+    toolbox.destroy();
+    toolbox = inspector = null;
+    gBrowser.removeCurrentTab();
+    finish();
+  });
+}
