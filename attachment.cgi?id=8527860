# HG changeset patch
# Parent 68a9d5f1aa4bf4ce110bfc4b400fe16c0a1a13b8
# User Patrick Brosset <pbrosset@mozilla.com>
Bug 1103993 - part 3 - Only refresh style-inspector panels when active; r=bgrins

diff --git a/browser/devtools/styleinspector/style-inspector.js b/browser/devtools/styleinspector/style-inspector.js
--- a/browser/devtools/styleinspector/style-inspector.js
+++ b/browser/devtools/styleinspector/style-inspector.js
@@ -27,35 +27,45 @@ function RuleViewTool(inspector, window,
   this.doc.documentElement.appendChild(this.view.element);
 
   this.onLinkClicked = this.onLinkClicked.bind(this);
   this.onSelected = this.onSelected.bind(this);
   this.refresh = this.refresh.bind(this);
   this.clearUserProperties = this.clearUserProperties.bind(this);
   this.onPropertyChanged = this.onPropertyChanged.bind(this);
   this.onViewRefreshed = this.onViewRefreshed.bind(this);
+  this.onPanelSelected = this.onPanelSelected.bind(this);
 
   this.view.element.addEventListener("CssRuleViewChanged", this.onPropertyChanged);
   this.view.element.addEventListener("CssRuleViewRefreshed", this.onViewRefreshed);
   this.view.element.addEventListener("CssRuleViewCSSLinkClicked", this.onLinkClicked);
 
   this.inspector.selection.on("detached", this.onSelected);
   this.inspector.selection.on("new-node-front", this.onSelected);
   this.inspector.on("layout-change", this.refresh);
   this.inspector.selection.on("pseudoclass", this.refresh);
   this.inspector.target.on("navigate", this.clearUserProperties);
+  this.inspector.sidebar.on("ruleview-selected", this.onPanelSelected);
 
   this.onSelected();
 }
 
 
 RuleViewTool.prototype = {
+  isSidebarActive: function() {
+    return this.inspector.sidebar.getCurrentTabID() == "ruleview";
+  },
+
   onSelected: function(event) {
-    // Ignore the event if the view has been destroyed
-    if (!this.view) {
+    // Ignore the event if the view has been destroyed, or if it's inactive.
+    // But only if the current selection isn't null. If it's been set to null,
+    // let the update go through as this is needed to empty the view on navigation.
+    let isDestroyed = !this.view;
+    let isInactive = !this.isSidebarActive() && this.inspector.selection.nodeFront;
+    if (isDestroyed || isInactive) {
       return;
     }
 
     this.view.setPageStyle(this.inspector.pageStyle);
 
     if (!this.inspector.selection.isConnected() ||
         !this.inspector.selection.isElementNode()) {
       this.view.selectElement(null);
@@ -64,25 +74,35 @@ RuleViewTool.prototype = {
 
     if (!event || event == "new-node-front") {
       let done = this.inspector.updating("rule-view");
       this.view.selectElement(this.inspector.selection.nodeFront).then(done, done);
     }
   },
 
   refresh: function() {
-    this.view.refreshPanel();
+    if (this.isSidebarActive()) {
+      this.view.refreshPanel();
+    }
   },
 
   clearUserProperties: function() {
     if (this.view && this.view.store && this.view.store.userProperties) {
       this.view.store.userProperties.clear();
     }
   },
 
+  onPanelSelected: function() {
+    if (this.inspector.selection.nodeFront === this.view.viewedElement) {
+      this.refresh();
+    } else {
+      this.onSelected();
+    }
+  },
+
   onLinkClicked: function(event) {
     let rule = event.detail.rule;
     let sheet = rule.parentStyleSheet;
 
     // Chrome stylesheets are not listed in the style editor, so show
     // these sheets in the view source window instead.
     if (!sheet || sheet.isSystem) {
       let contentDoc = this.inspector.selection.document;
@@ -116,16 +136,17 @@ RuleViewTool.prototype = {
     this.inspector.emit("rule-view-refreshed");
   },
 
   destroy: function() {
     this.inspector.off("layout-change", this.refresh);
     this.inspector.selection.off("pseudoclass", this.refresh);
     this.inspector.selection.off("new-node-front", this.onSelected);
     this.inspector.target.off("navigate", this.clearUserProperties);
+    this.inspector.sidebar.off("ruleview-selected", this.onPanelSelected);
 
     this.view.element.removeEventListener("CssRuleViewCSSLinkClicked", this.onLinkClicked);
     this.view.element.removeEventListener("CssRuleViewChanged", this.onPropertyChanged);
     this.view.element.removeEventListener("CssRuleViewRefreshed", this.onViewRefreshed);
 
     this.doc.documentElement.removeChild(this.view.element);
 
     this.view.destroy();
@@ -137,33 +158,44 @@ RuleViewTool.prototype = {
 function ComputedViewTool(inspector, window, iframe) {
   this.inspector = inspector;
   this.doc = window.document;
 
   this.view = new ComputedView.CssHtmlTree(this, inspector.pageStyle);
 
   this.onSelected = this.onSelected.bind(this);
   this.refresh = this.refresh.bind(this);
+  this.onPanelSelected = this.onPanelSelected.bind(this);
 
   this.inspector.selection.on("detached", this.onSelected);
   this.inspector.selection.on("new-node-front", this.onSelected);
   this.inspector.on("layout-change", this.refresh);
   this.inspector.selection.on("pseudoclass", this.refresh);
+  this.inspector.sidebar.on("computedview-selected", this.onPanelSelected);
 
   this.view.selectElement(null);
 
   this.onSelected();
 }
 
 ComputedViewTool.prototype = {
+  isSidebarActive: function() {
+    return this.inspector.sidebar.getCurrentTabID() == "computedview";
+  },
+
   onSelected: function(event) {
-    // Ignore the event if the view has been destroyed
-    if (!this.view) {
+    // Ignore the event if the view has been destroyed, or if it's inactive.
+    // But only if the current selection isn't null. If it's been set to null,
+    // let the update go through as this is needed to empty the view on navigation.
+    let isDestroyed = !this.view;
+    let isInactive = !this.isSidebarActive() && this.inspector.selection.nodeFront;
+    if (isDestroyed || isInactive) {
       return;
     }
+
     this.view.setPageStyle(this.inspector.pageStyle);
 
     if (!this.inspector.selection.isConnected() ||
         !this.inspector.selection.isElementNode()) {
       this.view.selectElement(null);
       return;
     }
 
@@ -171,24 +203,35 @@ ComputedViewTool.prototype = {
       let done = this.inspector.updating("computed-view");
       this.view.selectElement(this.inspector.selection.nodeFront).then(() => {
         done();
       });
     }
   },
 
   refresh: function() {
-    this.view.refreshPanel();
+    if (this.isSidebarActive()) {
+      this.view.refreshPanel();
+    }
+  },
+
+  onPanelSelected: function() {
+    if (this.inspector.selection.nodeFront === this.view.viewedElement) {
+      this.refresh();
+    } else {
+      this.onSelected();
+    }
   },
 
   destroy: function() {
     this.inspector.off("layout-change", this.refresh);
     this.inspector.sidebar.off("computedview-selected", this.refresh);
     this.inspector.selection.off("pseudoclass", this.refresh);
     this.inspector.selection.off("new-node-front", this.onSelected);
+    this.inspector.sidebar.off("computedview-selected", this.onPanelSelected);
 
     this.view.destroy();
 
     this.view = this.cssLogic = this.cssHtmlTree = null;
     this.doc = this.inspector = null;
   }
 };
 
diff --git a/browser/devtools/styleinspector/test/browser.ini b/browser/devtools/styleinspector/test/browser.ini
--- a/browser/devtools/styleinspector/test/browser.ini
+++ b/browser/devtools/styleinspector/test/browser.ini
@@ -31,17 +31,16 @@ support-files =
 [browser_computedview_matched-selectors-toggle.js]
 [browser_computedview_matched-selectors_01.js]
 [browser_computedview_matched-selectors_02.js]
 [browser_computedview_media-queries.js]
 [browser_computedview_no-results-placeholder.js]
 [browser_computedview_original-source-link.js]
 [browser_computedview_pseudo-element_01.js]
 [browser_computedview_refresh-on-style-change_01.js]
-[browser_computedview_refresh-on-style-change_02.js]
 [browser_computedview_search-filter.js]
 [browser_computedview_select-and-copy-styles.js]
 [browser_computedview_style-editor-link.js]
 [browser_ruleview_add-property-and-reselect.js]
 [browser_ruleview_add-property-cancel_01.js]
 [browser_ruleview_add-property-cancel_02.js]
 [browser_ruleview_add-property-cancel_03.js]
 [browser_ruleview_add-property_01.js]
@@ -107,16 +106,17 @@ skip-if = e10s # bug 1040670 Cannot open
 [browser_ruleview_urls-clickable.js]
 [browser_ruleview_user-agent-styles.js]
 [browser_ruleview_user-agent-styles-uneditable.js]
 [browser_ruleview_user-property-reset.js]
 [browser_styleinspector_context-menu-copy-color_01.js]
 [browser_styleinspector_context-menu-copy-color_02.js]
 [browser_styleinspector_csslogic-content-stylesheets.js]
 [browser_styleinspector_output-parser.js]
+[browser_styleinspector_refresh_when_active.js]
 [browser_styleinspector_tooltip-background-image.js]
 [browser_styleinspector_tooltip-closes-on-new-selection.js]
 [browser_styleinspector_tooltip-longhand-fontfamily.js]
 [browser_styleinspector_tooltip-multiple-background-images.js]
 [browser_styleinspector_tooltip-shorthand-fontfamily.js]
 [browser_styleinspector_tooltip-size.js]
 [browser_styleinspector_transform-highlighter-01.js]
 [browser_styleinspector_transform-highlighter-02.js]
diff --git a/browser/devtools/styleinspector/test/browser_computedview_refresh-on-style-change_02.js b/browser/devtools/styleinspector/test/browser_computedview_refresh-on-style-change_02.js
deleted file mode 100644
--- a/browser/devtools/styleinspector/test/browser_computedview_refresh-on-style-change_02.js
+++ /dev/null
@@ -1,37 +0,0 @@
-/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
-/* Any copyright is dedicated to the Public Domain.
- http://creativecommons.org/publicdomain/zero/1.0/ */
-
-"use strict";
-
-// Test that the computed view refreshes when the current node has its style
-// changed, even if the view is not the active one
-
-const TESTCASE_URI = 'data:text/html;charset=utf-8,' +
-                     '<div id="testdiv" style="font-size:10px;">Test div!</div>';
-
-let test = asyncTest(function*() {
-  yield addTab(TESTCASE_URI);
-
-  info("Opening the computed view and selecting the test node");
-  let {toolbox, inspector, view} = yield openComputedView();
-  yield selectNode("#testdiv", inspector);
-
-  let fontSize = getComputedViewPropertyValue(view, "font-size");
-  is(fontSize, "10px", "The computed view shows the right font-size");
-
-  info("Now switching to the rule view");
-  yield openRuleView();
-
-  info("Changing the node's style and waiting for the update");
-  let onUpdated = inspector.once("computed-view-refreshed");
-  getNode("#testdiv").style.cssText = "font-size: 20px; color: blue; text-align: center";
-  yield onUpdated;
-
-  fontSize = getComputedViewPropertyValue(view, "font-size");
-  is(fontSize, "20px", "The computed view shows the updated font-size");
-  let color = getComputedViewPropertyValue(view, "color");
-  is(color, "#00F", "The computed view also shows the color now");
-  let textAlign = getComputedViewPropertyValue(view, "text-align");
-  is(textAlign, "center", "The computed view also shows the text-align now");
-});
diff --git a/browser/devtools/styleinspector/test/browser_styleinspector_refresh_when_active.js b/browser/devtools/styleinspector/test/browser_styleinspector_refresh_when_active.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/styleinspector/test/browser_styleinspector_refresh_when_active.js
@@ -0,0 +1,43 @@
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+ http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Test that the style-inspector views only refresh when they are active.
+
+const TEST_URL = 'data:text/html;charset=utf-8,' +
+                 '<div id="one" style="color:red;">one</div>' +
+                 '<div id="two" style="color:blue;">two</div>';
+
+let test = asyncTest(function*() {
+  yield addTab(TEST_URL);
+
+  info("Opening the rule-view and selecting test node one");
+  let {inspector, view: cView} = yield openComputedView();
+  let {view: rView} = yield openRuleView();
+  yield selectNode("#one", inspector);
+
+  is(getRuleViewPropertyValue(rView, "element", "color"), "#F00",
+    "The rule-view shows the properties for test node one");
+
+  let prop = getComputedViewProperty(cView, "color");
+  ok(!prop, "The computed-view doesn't show the properties for test node one");
+
+  info("Switching to the computed-view");
+  let onComputedViewReady = inspector.once("computed-view-refreshed");
+  yield openComputedView();
+  yield onComputedViewReady;
+
+  ok(getComputedViewPropertyValue(cView, "color"), "#F00",
+    "The computed-view shows the properties for test node one");
+
+  info("Selecting test node two");
+  yield selectNode("#two", inspector);
+
+  ok(getComputedViewPropertyValue(cView, "color"), "#00F",
+    "The computed-view shows the properties for test node two");
+
+  is(getRuleViewPropertyValue(rView, "element", "color"), "#F00",
+    "The rule-view doesn't the properties for test node two");
+});
\ No newline at end of file
diff --git a/browser/devtools/styleinspector/test/browser_styleinspector_tooltip-background-image.js b/browser/devtools/styleinspector/test/browser_styleinspector_tooltip-background-image.js
--- a/browser/devtools/styleinspector/test/browser_styleinspector_tooltip-background-image.js
+++ b/browser/devtools/styleinspector/test/browser_styleinspector_tooltip-background-image.js
@@ -37,17 +37,19 @@ let test = asyncTest(function*() {
   yield selectNode(".test-element", inspector);
   info("Testing the the background property on the .test-element rule");
   yield testDivRuleView(view);
 
   info("Testing that image preview tooltips show even when there are fields being edited");
   yield testTooltipAppearsEvenInEditMode(view);
 
   info("Switching over to the computed-view");
+  let onComputedViewReady = inspector.once("computed-view-refreshed");
   ({view} = yield openComputedView());
+  yield onComputedViewReady;
 
   info("Testing that the background-image computed style has a tooltip too");
   yield testComputedView(view);
 });
 
 function* testBodyRuleView(view) {
   info("Testing tooltips in the rule view");
   let panel = view.tooltips.previewTooltip.panel;
diff --git a/browser/devtools/styleinspector/test/browser_styleinspector_tooltip-longhand-fontfamily.js b/browser/devtools/styleinspector/test/browser_styleinspector_tooltip-longhand-fontfamily.js
--- a/browser/devtools/styleinspector/test/browser_styleinspector_tooltip-longhand-fontfamily.js
+++ b/browser/devtools/styleinspector/test/browser_styleinspector_tooltip-longhand-fontfamily.js
@@ -27,17 +27,19 @@ let test = asyncTest(function*() {
   let {toolbox, inspector, view} = yield openRuleView();
 
   info("Selecting the test node");
   yield selectNode("#testElement", inspector);
 
   yield testRuleView(view, inspector.selection.nodeFront);
 
   info("Opening the computed view");
+  let onComputedViewReady = inspector.once("computed-view-refreshed");
   ({toolbox, inspector, view} = yield openComputedView());
+  yield onComputedViewReady;
 
   yield testComputedView(view, inspector.selection.nodeFront);
 
   yield testExpandedComputedViewProperty(view, inspector.selection.nodeFront);
 });
 
 function* testRuleView(ruleView, nodeFront) {
   info("Testing font-family tooltips in the rule view");
diff --git a/browser/devtools/styleinspector/test/browser_styleinspector_tooltip-multiple-background-images.js b/browser/devtools/styleinspector/test/browser_styleinspector_tooltip-multiple-background-images.js
--- a/browser/devtools/styleinspector/test/browser_styleinspector_tooltip-multiple-background-images.js
+++ b/browser/devtools/styleinspector/test/browser_styleinspector_tooltip-multiple-background-images.js
@@ -27,27 +27,28 @@ let test = asyncTest(function* () {
 
   yield testRuleViewUrls();
   yield testComputedViewUrls();
 });
 
 function* testRuleViewUrls() {
   info("Testing tooltips in the rule view");
 
-  let { view, inspector } = yield openRuleView();
+  let {view, inspector} = yield openRuleView();
   yield selectNode("h1", inspector);
 
   let {valueSpan} = getRuleViewProperty(view, "h1", "background");
   yield performChecks(view, valueSpan);
 }
 
 function* testComputedViewUrls() {
   info("Testing tooltips in the computed view");
 
-  let {view} = yield openComputedView();
+  let {view, inspector} = yield openComputedView();
+  yield inspector.once("computed-view-refreshed");
   let {valueSpan} = getComputedViewProperty(view, "background-image");
 
   yield performChecks(view, valueSpan);
 }
 
 /**
  * A helper that checks url() tooltips contain correct images
  */
diff --git a/browser/devtools/styleinspector/test/browser_styleinspector_transform-highlighter-01.js b/browser/devtools/styleinspector/test/browser_styleinspector_transform-highlighter-01.js
--- a/browser/devtools/styleinspector/test/browser_styleinspector_transform-highlighter-01.js
+++ b/browser/devtools/styleinspector/test/browser_styleinspector_transform-highlighter-01.js
@@ -15,27 +15,29 @@ const PAGE_CONTENT = [
   'Test the css transform highlighter'
 ].join("\n");
 
 const TYPE = "CssTransformHighlighter";
 
 let test = asyncTest(function*() {
   yield addTab("data:text/html;charset=utf-8," + PAGE_CONTENT);
 
-  let {view: rView} = yield openRuleView();
+  let {inspector, view: rView} = yield openRuleView();
   let overlay = rView.highlighters;
 
   ok(!overlay.highlighters[TYPE], "No highlighter exists in the rule-view");
   let h = yield overlay._getHighlighter(TYPE);
   ok(overlay.highlighters[TYPE], "The highlighter has been created in the rule-view");
   is(h, overlay.highlighters[TYPE], "The right highlighter has been created");
   let h2 = yield overlay._getHighlighter(TYPE);
   is(h, h2, "The same instance of highlighter is returned everytime in the rule-view");
 
+  let onComputedViewReady = inspector.once("computed-view-refreshed");
   let {view: cView} = yield openComputedView();
+  yield onComputedViewReady;
   overlay = cView.highlighters;
 
   ok(!overlay.highlighters[TYPE], "No highlighter exists in the computed-view");
   h = yield overlay._getHighlighter(TYPE);
   ok(overlay.highlighters[TYPE], "The highlighter has been created in the computed-view");
   is(h, overlay.highlighters[TYPE], "The right highlighter has been created");
   h2 = yield overlay._getHighlighter(TYPE);
   is(h, h2, "The same instance of highlighter is returned everytime in the computed-view");
diff --git a/browser/devtools/styleinspector/test/browser_styleinspector_transform-highlighter-02.js b/browser/devtools/styleinspector/test/browser_styleinspector_transform-highlighter-02.js
--- a/browser/devtools/styleinspector/test/browser_styleinspector_transform-highlighter-02.js
+++ b/browser/devtools/styleinspector/test/browser_styleinspector_transform-highlighter-02.js
@@ -17,18 +17,17 @@ const PAGE_CONTENT = [
   'Test the css transform highlighter'
 ].join("\n");
 
 let TYPE = "CssTransformHighlighter";
 
 let test = asyncTest(function*() {
   yield addTab("data:text/html;charset=utf-8," + PAGE_CONTENT);
 
-
-  let {view: rView} = yield openRuleView();
+  let {inspector, view: rView} = yield openRuleView();
   let hs = rView.highlighters;
 
   ok(!hs.highlighters[TYPE], "No highlighter exists in the rule-view (1)");
   ok(!hs.promises[TYPE], "No highlighter is being created in the rule-view (1)");
 
   info("Faking a mousemove on a non-transform property");
   let {valueSpan} = getRuleViewProperty(rView, "body", "color");
   hs._onMouseMove({target: valueSpan});
@@ -37,17 +36,19 @@ let test = asyncTest(function*() {
 
   info("Faking a mousemove on a transform property");
   ({valueSpan} = getRuleViewProperty(rView, "body", "transform"));
   hs._onMouseMove({target: valueSpan});
   ok(hs.promises[TYPE], "The highlighter is being initialized");
   let h = yield hs.promises[TYPE];
   is(h, hs.highlighters[TYPE], "The initialized highlighter is the right one");
 
+  let onComputedViewReady = inspector.once("computed-view-refreshed");
   let {view: cView} = yield openComputedView();
+  yield onComputedViewReady;
   hs = cView.highlighters;
 
   ok(!hs.highlighters[TYPE], "No highlighter exists in the computed-view (1)");
   ok(!hs.promises[TYPE], "No highlighter is being created in the computed-view (1)");
 
   info("Faking a mousemove on a non-transform property");
   ({valueSpan} = getComputedViewProperty(cView, "color"));
   hs._onMouseMove({target: valueSpan});
diff --git a/browser/devtools/styleinspector/test/head.js b/browser/devtools/styleinspector/test/head.js
--- a/browser/devtools/styleinspector/test/head.js
+++ b/browser/devtools/styleinspector/test/head.js
@@ -38,16 +38,17 @@ registerCleanupFunction(function*() {
 
 // Set the testing flag on gDevTools and reset it when the test ends
 gDevTools.testing = true;
 registerCleanupFunction(() => gDevTools.testing = false);
 
 // Clean-up all prefs that might have been changed during a test run
 // (safer here because if the test fails, then the pref is never reverted)
 registerCleanupFunction(() => {
+  Services.prefs.clearUserPref("devtools.inspector.activeSidebar");
   Services.prefs.clearUserPref("devtools.dump.emit");
   Services.prefs.clearUserPref("devtools.defaultColorUnit");
 });
 
 /**
  * The functions found below are here to ease test development and maintenance.
  * Most of these functions are stateless and will require some form of context
  * (the instance of the current toolbox, or inspector panel for instance).
diff --git a/toolkit/devtools/server/actors/styles.js b/toolkit/devtools/server/actors/styles.js
--- a/toolkit/devtools/server/actors/styles.js
+++ b/toolkit/devtools/server/actors/styles.js
@@ -303,16 +303,17 @@ var PageStyleActor = protocol.ActorClass
    *     'user': Include properties from user style sheets.
    *     'ua': Include properties from user and user-agent sheets.
    *     Default value is 'ua'
    *   `inherited`: Include styles inherited from parent nodes.
    *   `matchedSeletors`: Include an array of specific selectors that
    *     caused this rule to match its node.
    */
   getApplied: method(function(node, options) {
+    this.cssLogic.highlight(node.rawNode);
     let entries = [];
     entries = entries.concat(this._getAllElementRules(node, undefined, options));
     return this.getAppliedProps(node, entries, options);
   }, {
     request: {
       node: Arg(0, "domnode"),
       inherited: Option(1, "boolean"),
       matchedSelectors: Option(1, "boolean"),
diff --git a/toolkit/devtools/styleinspector/css-logic.js b/toolkit/devtools/styleinspector/css-logic.js
--- a/toolkit/devtools/styleinspector/css-logic.js
+++ b/toolkit/devtools/styleinspector/css-logic.js
@@ -159,16 +159,20 @@ CssLogic.prototype = {
     if (!aViewedElement) {
       this.viewedElement = null;
       this.viewedDocument = null;
       this._computedStyle = null;
       this.reset();
       return;
     }
 
+    if (aViewedElement === this.viewedElement) {
+      return;
+    }
+
     this.viewedElement = aViewedElement;
 
     let doc = this.viewedElement.ownerDocument;
     if (doc != this.viewedDocument) {
       // New document: clear/rebuild the cache.
       this.viewedDocument = doc;
 
       // Hunt down top level stylesheets, and cache them.
