# HG changeset patch
# User Jaideep Bhoosreddy <jaideep.coder@gmail.com>
Bug 1294498 - New console frontend: Add a file location component. r=linclark



diff --git a/devtools/client/webconsole/new-console-output/components/console-output.js b/devtools/client/webconsole/new-console-output/components/console-output.js
index d8e8227..7ea780a 100644
--- a/devtools/client/webconsole/new-console-output/components/console-output.js
+++ b/devtools/client/webconsole/new-console-output/components/console-output.js
@@ -15,16 +15,17 @@ const { connect } = require("devtools/client/shared/vendor/react-redux");
 const { getAllMessages } = require("devtools/client/webconsole/new-console-output/selectors/messages");
 const MessageContainer = createFactory(require("devtools/client/webconsole/new-console-output/components/message-container").MessageContainer);
 
 const ConsoleOutput = createClass({
 
   propTypes: {
     jsterm: PropTypes.object.isRequired,
     messages: PropTypes.object.isRequired,
+    sourceMapService: PropTypes.object,
     onViewSourceInDebugger: PropTypes.func.isRequired,
   },
 
   displayName: "ConsoleOutput",
 
   componentWillUpdate() {
     let node = ReactDOM.findDOMNode(this);
     if (node.lastChild) {
@@ -35,20 +36,21 @@ const ConsoleOutput = createClass({
   componentDidUpdate() {
     if (this.shouldScrollBottom) {
       let node = ReactDOM.findDOMNode(this);
       node.scrollTop = node.scrollHeight;
     }
   },
 
   render() {
-    let {messages, onViewSourceInDebugger} = this.props;
+    let {messages, sourceMapService, onViewSourceInDebugger} = this.props;
     let messageNodes = messages.map(function (message) {
       return (
-        MessageContainer({ message, key: message.id, onViewSourceInDebugger })
+        MessageContainer({ message, key: message.id,
+          sourceMapService, onViewSourceInDebugger })
       );
     });
     return (
       dom.div({className: "webconsole-output"}, messageNodes)
     );
   }
 });
 
diff --git a/devtools/client/webconsole/new-console-output/components/message-container.js b/devtools/client/webconsole/new-console-output/components/message-container.js
index 6e6353c..cd0a969 100644
--- a/devtools/client/webconsole/new-console-output/components/message-container.js
+++ b/devtools/client/webconsole/new-console-output/components/message-container.js
@@ -26,27 +26,28 @@ const componentMap = new Map([
   ["PageError", require("./message-types/page-error").PageError]
 ]);
 
 const MessageContainer = createClass({
   displayName: "MessageContainer",
 
   propTypes: {
     message: PropTypes.object.isRequired,
+    sourceMapService: PropTypes.object,
     onViewSourceInDebugger: PropTypes.func.isRequired,
   },
 
   shouldComponentUpdate(nextProps, nextState) {
     return this.props.message.repeat !== nextProps.message.repeat;
   },
 
   render() {
-    const { message, onViewSourceInDebugger } = this.props;
+    const { message, sourceMapService, onViewSourceInDebugger } = this.props;
     let MessageComponent = createFactory(getMessageComponent(message));
-    return MessageComponent({ message, onViewSourceInDebugger });
+    return MessageComponent({ message, sourceMapService, onViewSourceInDebugger });
   }
 });
 
 function getMessageComponent(message) {
   switch (message.source) {
     case MESSAGE_SOURCE.CONSOLE_API:
       return componentMap.get("ConsoleApiCall");
     case MESSAGE_SOURCE.JAVASCRIPT:
diff --git a/devtools/client/webconsole/new-console-output/components/message-types/console-api-call.js b/devtools/client/webconsole/new-console-output/components/message-types/console-api-call.js
index 61c8a0d..266238e 100644
--- a/devtools/client/webconsole/new-console-output/components/message-types/console-api-call.js
+++ b/devtools/client/webconsole/new-console-output/components/message-types/console-api-call.js
@@ -7,32 +7,33 @@
 "use strict";
 
 // React & Redux
 const {
   createFactory,
   DOM: dom,
   PropTypes
 } = require("devtools/client/shared/vendor/react");
+const FrameView = createFactory(require("devtools/client/shared/components/frame"));
 const StackTrace = createFactory(require("devtools/client/shared/components/stack-trace"));
 const GripMessageBody = createFactory(require("devtools/client/webconsole/new-console-output/components/grip-message-body").GripMessageBody);
 const MessageRepeat = createFactory(require("devtools/client/webconsole/new-console-output/components/message-repeat").MessageRepeat);
 const MessageIcon = createFactory(require("devtools/client/webconsole/new-console-output/components/message-icon").MessageIcon);
 
 ConsoleApiCall.displayName = "ConsoleApiCall";
 
 ConsoleApiCall.propTypes = {
   message: PropTypes.object.isRequired,
+  sourceMapService: PropTypes.object,
   onViewSourceInDebugger: PropTypes.func.isRequired,
 };
 
 function ConsoleApiCall(props) {
-  const { message, onViewSourceInDebugger } = props;
-  const {source, level, stacktrace, type} = message;
-
+  const { message, sourceMapService, onViewSourceInDebugger } = props;
+  const { source, level, stacktrace, type, frame } = message;
   let messageBody;
   if (type === "trace") {
     messageBody = dom.span({className: "cm-variable"}, "console.trace()");
   } else if (message.parameters) {
     messageBody = message.parameters.map((grip, key) => GripMessageBody({grip, key}));
   } else {
     messageBody = message.messageText;
   }
@@ -59,29 +60,38 @@ function ConsoleApiCall(props) {
   if (level) {
     classes.push(level);
   }
 
   if (type === "trace") {
     classes.push("open");
   }
 
+  const shouldRenderFrame = frame && frame.source !== "debugger eval code";
   return dom.div({
     className: classes.join(" ")
   },
     // @TODO add timestamp
     // @TODO add indent if necessary
     icon,
     dom.span({className: "message-body-wrapper"},
       dom.span({},
         dom.span({className: "message-flex-body"},
           dom.span({className: "message-body devtools-monospace"},
             messageBody
           ),
-          repeat
+          repeat,
+          dom.span({ className: "message-location devtools-monospace" },
+            shouldRenderFrame ? FrameView({
+              frame,
+              onClick: onViewSourceInDebugger,
+              showEmptyPathAsHost: true,
+              sourceMapService
+            }) : null
+          )
         ),
         attachment
       )
     )
   );
 }
 
 module.exports.ConsoleApiCall = ConsoleApiCall;
diff --git a/devtools/client/webconsole/new-console-output/new-console-output-wrapper.js b/devtools/client/webconsole/new-console-output/new-console-output-wrapper.js
index 86e2383..d02abb2 100644
--- a/devtools/client/webconsole/new-console-output/new-console-output-wrapper.js
+++ b/devtools/client/webconsole/new-console-output/new-console-output-wrapper.js
@@ -12,18 +12,20 @@ const actions = require("devtools/client/webconsole/new-console-output/actions/m
 const { configureStore } = require("devtools/client/webconsole/new-console-output/store");
 
 const ConsoleOutput = React.createFactory(require("devtools/client/webconsole/new-console-output/components/console-output"));
 const FilterBar = React.createFactory(require("devtools/client/webconsole/new-console-output/components/filter-bar"));
 
 const store = configureStore();
 
 function NewConsoleOutputWrapper(parentNode, jsterm, toolbox) {
+  const sourceMapService = toolbox ? toolbox._sourceMapService : null;
   let childComponent = ConsoleOutput({
     jsterm,
+    sourceMapService,
     onViewSourceInDebugger: frame => toolbox.viewSourceInDebugger.call(
       toolbox,
       frame.url,
       frame.line
     )
   });
   let filterBar = FilterBar({});
   let provider = React.createElement(
diff --git a/devtools/client/webconsole/new-console-output/test/fixtures/stubs.js b/devtools/client/webconsole/new-console-output/test/fixtures/stubs.js
index 3eac96e..8730a5c 100644
--- a/devtools/client/webconsole/new-console-output/test/fixtures/stubs.js
+++ b/devtools/client/webconsole/new-console-output/test/fixtures/stubs.js
@@ -18,17 +18,22 @@ exports.stubConsoleMessages = new Map([
       allowRepeating: true,
       source: MESSAGE_SOURCE.CONSOLE_API,
       type: MESSAGE_TYPE.LOG,
       level: MESSAGE_LEVEL.LOG,
       messageText: null,
       parameters: ["foobar", "test"],
       repeat: 1,
       repeatId: null,
-      stacktrace: undefined
+      stacktrace: undefined,
+      frame: {
+        source: "file:///test.html",
+        line: 1,
+        column: 1
+      }
     })
   ],
   [
     "console.warn('danger, will robinson!')",
     new ConsoleMessage({
       allowRepeating: true,
       source: MESSAGE_SOURCE.CONSOLE_API,
       type: MESSAGE_TYPE.LOG,
diff --git a/devtools/client/webconsole/new-console-output/types.js b/devtools/client/webconsole/new-console-output/types.js
index a84a78b..ed4fd3b 100644
--- a/devtools/client/webconsole/new-console-output/types.js
+++ b/devtools/client/webconsole/new-console-output/types.js
@@ -28,9 +28,10 @@ exports.ConsoleMessage = Immutable.Record({
   source: null,
   type: null,
   level: null,
   messageText: null,
   parameters: null,
   repeat: 1,
   repeatId: null,
   stacktrace: null,
+  frame: null,
 });
diff --git a/devtools/client/webconsole/new-console-output/utils/messages.js b/devtools/client/webconsole/new-console-output/utils/messages.js
index af679cd..cd1aee5 100644
--- a/devtools/client/webconsole/new-console-output/utils/messages.js
+++ b/devtools/client/webconsole/new-console-output/utils/messages.js
@@ -57,23 +57,30 @@ function transformPacket(packet) {
           type = MESSAGE_TYPE.LOG;
           let {counter} = message;
           let label = counter.label ? counter.label : l10n.getStr("noCounterLabel");
           messageText = `${label}: ${counter.count}`;
           parameters = null;
           break;
       }
 
+      const frame = {
+        source: message.filename || null,
+        line: message.lineNumber || null,
+        column: message.columnNumber || null
+      };
+
       return new ConsoleMessage({
         source: MESSAGE_SOURCE.CONSOLE_API,
         type,
         level,
         parameters,
         messageText,
         stacktrace: message.stacktrace,
+        frame
       });
     }
 
     case "pageError": {
       let { pageError } = packet;
       let level = MESSAGE_LEVEL.ERROR;
       if (pageError.warning || pageError.strict) {
         level = MESSAGE_LEVEL.WARN;
