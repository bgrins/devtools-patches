# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  895e44661a5fcfd826d95c560990ecea25228b25
Another pass at building the toolbox frame in html

diff --git a/devtools/client/framework/toolbox.js b/devtools/client/framework/toolbox.js
--- a/devtools/client/framework/toolbox.js
+++ b/devtools/client/framework/toolbox.js
@@ -270,16 +270,20 @@ Toolbox.prototype = {
   get frame() {
     return this._host.frame;
   },
 
   /**
    * Shortcut to the document containing the toolbox UI
    */
   get doc() {
+    return this.htmlFrame.contentDocument;
+  },
+
+  get xulDoc() {
     return this.frame.contentDocument;
   },
 
   /**
    * Get current zoom level of toolbox
    */
   get zoomValue() {
     return parseFloat(Services.prefs.getCharPref(ZOOM_PREF));
@@ -358,34 +362,41 @@ Toolbox.prototype = {
       let domHelper = new DOMHelpers(iframe.contentWindow);
       domHelper.onceDOMReady(() => domReady.resolve());
       // Optimization: fire up a few other things before waiting on
       // the iframe being ready (makes startup faster)
 
       // Load the toolbox-level actor fronts and utilities now
       yield this._target.makeRemote();
 
+      yield domReady.promise;
+
+      this.htmlFrame = iframe.contentDocument.querySelector("iframe");
+
+      yield new Promise(resolve => {
+        let domHelper2 = new DOMHelpers(this.htmlFrame.contentWindow);
+        domHelper2.onceDOMReady(resolve);
+      });
+
       // Attach the thread
       this._threadClient = yield attachThread(this);
 
-      yield domReady.promise;
-
       this.isReady = true;
       let framesPromise = this._listFrames();
 
       this.closeButton = this.doc.getElementById("toolbox-close");
-      this.closeButton.addEventListener("command", this.destroy, true);
+      this.closeButton.addEventListener("click", this.destroy, true);
 
       gDevTools.on("pref-changed", this._prefChanged);
 
       let framesMenu = this.doc.getElementById("command-button-frames");
       framesMenu.addEventListener("command", this.selectFrame, true);
 
       this.textboxContextMenuPopup =
-        this.doc.getElementById("toolbox-textbox-context-popup");
+        this.xulDoc.getElementById("toolbox-textbox-context-popup");
       this.textboxContextMenuPopup.addEventListener("popupshowing",
         this._updateTextboxMenuItems, true);
 
       this._buildDockButtons();
       this._buildOptions();
       this._buildTabs();
       this._applyCacheSettings();
       this._applyServiceWorkersTestingSettings();
@@ -483,19 +494,19 @@ Toolbox.prototype = {
       // on the options panel.
       if (this.currentToolId === "options" &&
           gDevTools.getToolDefinition(this.lastUsedToolId)) {
         this.selectTool(this.lastUsedToolId);
       } else {
         this.selectTool("options");
       }
     };
-    let key = this.doc.getElementById("toolbox-options-key");
+    let key = this.xulDoc.getElementById("toolbox-options-key");
     key.addEventListener("command", selectOptions, true);
-    let key2 = this.doc.getElementById("toolbox-options-key2");
+    let key2 = this.xulDoc.getElementById("toolbox-options-key2");
     key2.addEventListener("command", selectOptions, true);
   },
 
   _splitConsoleOnKeypress: function(e) {
     if (e.keyCode === e.DOM_VK_ESCAPE) {
       this.toggleSplitConsole();
       // If the debugger is paused, don't let the ESC key stop any pending
       // navigation.
@@ -520,47 +531,47 @@ Toolbox.prototype = {
     cloned.setAttribute("oncommand", "void(0)");
     cloned.removeAttribute("command");
     cloned.addEventListener("command", (e) => {
       // Only forward the command if the tool is active
       if (this.currentToolId === whichTool && this.isSplitConsoleFocused()) {
         keyElement.doCommand();
       }
     }, true);
-    this.doc.getElementById("toolbox-keyset").appendChild(cloned);
+    this.xulDoc.getElementById("toolbox-keyset").appendChild(cloned);
   },
 
   _addReloadKeys: function() {
     [
       ["toolbox-reload-key", false],
       ["toolbox-reload-key2", false],
       ["toolbox-force-reload-key", true],
       ["toolbox-force-reload-key2", true]
     ].forEach(([id, force]) => {
-      this.doc.getElementById(id).addEventListener("command", () => {
+      this.xulDoc.getElementById(id).addEventListener("command", () => {
         this.reloadTarget(force);
       }, true);
     });
   },
 
   _addHostListeners: function() {
-    let nextKey = this.doc.getElementById("toolbox-next-tool-key");
+    let nextKey = this.xulDoc.getElementById("toolbox-next-tool-key");
     nextKey.addEventListener("command", this.selectNextTool.bind(this), true);
 
-    let prevKey = this.doc.getElementById("toolbox-previous-tool-key");
+    let prevKey = this.xulDoc.getElementById("toolbox-previous-tool-key");
     prevKey.addEventListener("command", this.selectPreviousTool.bind(this), true);
 
-    let minimizeKey = this.doc.getElementById("toolbox-minimize-key");
+    let minimizeKey = this.xulDoc.getElementById("toolbox-minimize-key");
     minimizeKey.addEventListener("command", this._toggleMinimizeMode, true);
 
-    let toggleKey = this.doc.getElementById("toolbox-toggle-host-key");
+    let toggleKey = this.xulDoc.getElementById("toolbox-toggle-host-key");
     toggleKey.addEventListener("command", this.switchToPreviousHost.bind(this), true);
 
     if (Services.prefs.prefHasUserValue("devtools.loader.srcdir")) {
-      let reloadKey = this.doc.getElementById("tools-reload-key");
+      let reloadKey = this.xulDoc.getElementById("tools-reload-key");
       reloadKey.addEventListener("command", this.reload.bind(this), true);
     }
 
     // Split console uses keypress instead of command so the event can be
     // cancelled with stopPropagation on the keypress, and not preventDefault.
     this.doc.addEventListener("keypress", this._splitConsoleOnKeypress, false);
 
     this.doc.addEventListener("focus", this._onFocus, true);
@@ -608,58 +619,58 @@ Toolbox.prototype = {
       }
     }
   },
 
   /**
    * Wire up the listeners for the zoom keys.
    */
   _addZoomKeys: function() {
-    let inKey = this.doc.getElementById("toolbox-zoom-in-key");
+    let inKey = this.xulDoc.getElementById("toolbox-zoom-in-key");
     inKey.addEventListener("command", this.zoomIn.bind(this), true);
 
-    let inKey2 = this.doc.getElementById("toolbox-zoom-in-key2");
+    let inKey2 = this.xulDoc.getElementById("toolbox-zoom-in-key2");
     inKey2.addEventListener("command", this.zoomIn.bind(this), true);
 
-    let inKey3 = this.doc.getElementById("toolbox-zoom-in-key3");
+    let inKey3 = this.xulDoc.getElementById("toolbox-zoom-in-key3");
     inKey3.addEventListener("command", this.zoomIn.bind(this), true);
 
-    let outKey = this.doc.getElementById("toolbox-zoom-out-key");
+    let outKey = this.xulDoc.getElementById("toolbox-zoom-out-key");
     outKey.addEventListener("command", this.zoomOut.bind(this), true);
 
-    let outKey2 = this.doc.getElementById("toolbox-zoom-out-key2");
+    let outKey2 = this.xulDoc.getElementById("toolbox-zoom-out-key2");
     outKey2.addEventListener("command", this.zoomOut.bind(this), true);
 
-    let resetKey = this.doc.getElementById("toolbox-zoom-reset-key");
+    let resetKey = this.xulDoc.getElementById("toolbox-zoom-reset-key");
     resetKey.addEventListener("command", this.zoomReset.bind(this), true);
 
-    let resetKey2 = this.doc.getElementById("toolbox-zoom-reset-key2");
+    let resetKey2 = this.xulDoc.getElementById("toolbox-zoom-reset-key2");
     resetKey2.addEventListener("command", this.zoomReset.bind(this), true);
   },
 
   _disableZoomKeys: function() {
-    let inKey = this.doc.getElementById("toolbox-zoom-in-key");
+    let inKey = this.xulDoc.getElementById("toolbox-zoom-in-key");
     inKey.setAttribute("disabled", "true");
 
-    let inKey2 = this.doc.getElementById("toolbox-zoom-in-key2");
+    let inKey2 = this.xulDoc.getElementById("toolbox-zoom-in-key2");
     inKey2.setAttribute("disabled", "true");
 
-    let inKey3 = this.doc.getElementById("toolbox-zoom-in-key3");
+    let inKey3 = this.xulDoc.getElementById("toolbox-zoom-in-key3");
     inKey3.setAttribute("disabled", "true");
 
-    let outKey = this.doc.getElementById("toolbox-zoom-out-key");
+    let outKey = this.xulDoc.getElementById("toolbox-zoom-out-key");
     outKey.setAttribute("disabled", "true");
 
-    let outKey2 = this.doc.getElementById("toolbox-zoom-out-key2");
+    let outKey2 = this.xulDoc.getElementById("toolbox-zoom-out-key2");
     outKey2.setAttribute("disabled", "true");
 
-    let resetKey = this.doc.getElementById("toolbox-zoom-reset-key");
+    let resetKey = this.xulDoc.getElementById("toolbox-zoom-reset-key");
     resetKey.setAttribute("disabled", "true");
 
-    let resetKey2 = this.doc.getElementById("toolbox-zoom-reset-key2");
+    let resetKey2 = this.xulDoc.getElementById("toolbox-zoom-reset-key2");
     resetKey2.setAttribute("disabled", "true");
   },
 
   /**
    * Set zoom on toolbox to whatever the last setting was.
    */
   _loadInitialZoom: function() {
     this.setZoom(this.zoomValue);
@@ -783,16 +794,17 @@ Toolbox.prototype = {
       dockBox.removeChild(dockBox.firstChild);
     }
 
     if (!this._target.isLocalTab) {
       return;
     }
 
     // Bottom-type host can be minimized, add a button for this.
+    // XXX: Check this with HTML
     if (this.hostType == Toolbox.HostType.BOTTOM) {
       let minimizeBtn = this.doc.createElement("toolbarbutton");
       minimizeBtn.id = "toolbox-dock-bottom-minimize";
 
       minimizeBtn.addEventListener("command", this._toggleMinimizeMode);
       dockBox.appendChild(minimizeBtn);
       // Show the button in its maximized state.
       this._onBottomHostMaximized();
@@ -817,50 +829,50 @@ Toolbox.prototype = {
     for (let type in Toolbox.HostType) {
       let position = Toolbox.HostType[type];
       if (position == this.hostType ||
           position == Toolbox.HostType.CUSTOM ||
           (!sideEnabled && position == Toolbox.HostType.SIDE)) {
         continue;
       }
 
-      let button = this.doc.createElement("toolbarbutton");
+      let button = this.doc.createElement("button");
       button.id = "toolbox-dock-" + position;
-      button.className = "toolbox-dock-button";
-      button.setAttribute("tooltiptext", toolboxStrings("toolboxDockButtons." +
+      button.className = "devtools-button toolbox-dock-button";
+      button.setAttribute("title", toolboxStrings("toolboxDockButtons." +
                                                         position + ".tooltip"));
-      button.addEventListener("command", () => {
+      button.addEventListener("click", () => {
         this.switchHost(position);
       });
 
       dockBox.appendChild(button);
     }
   },
 
   _getMinimizeButtonShortcutTooltip: function() {
-    let key = this.doc.getElementById("toolbox-minimize-key")
+    let key = this.xulDoc.getElementById("toolbox-minimize-key")
                       .getAttribute("key");
     return "(" + (osString == "Darwin" ? "Cmd+Shift+" : "Ctrl+Shift+") +
            key.toUpperCase() + ")";
   },
 
   _onBottomHostMinimized: function() {
     let btn = this.doc.querySelector("#toolbox-dock-bottom-minimize");
     btn.className = "minimized";
 
-    btn.setAttribute("tooltiptext",
+    btn.setAttribute("title",
       toolboxStrings("toolboxDockButtons.bottom.maximize") + " " +
       this._getMinimizeButtonShortcutTooltip());
   },
 
   _onBottomHostMaximized: function() {
     let btn = this.doc.querySelector("#toolbox-dock-bottom-minimize");
     btn.className = "maximized";
 
-    btn.setAttribute("tooltiptext",
+    btn.setAttribute("title",
       toolboxStrings("toolboxDockButtons.bottom.minimize") + " " +
       this._getMinimizeButtonShortcutTooltip());
   },
 
   _onToolSelectWhileMinimized: function() {
     this._host.maximize();
   },
 
@@ -929,20 +941,20 @@ Toolbox.prototype = {
     });
   },
 
   /**
    * Adding the element picker button is done here unlike the other buttons
    * since we want it to work for remote targets too
    */
   _buildPickerButton: function() {
-    this._pickerButton = this.doc.createElement("toolbarbutton");
+    this._pickerButton = this.doc.createElement("button");
     this._pickerButton.id = "command-button-pick";
-    this._pickerButton.className = "command-button command-button-invertable";
-    this._pickerButton.setAttribute("tooltiptext", toolboxStrings("pickButton.tooltip"));
+    this._pickerButton.className = "command-button command-button-invertable devtools-button";
+    this._pickerButton.setAttribute("title", toolboxStrings("pickButton.tooltip"));
     this._pickerButton.setAttribute("hidden", "true");
 
     let container = this.doc.querySelector("#toolbox-picker-container");
     container.appendChild(this._pickerButton);
 
     this._togglePicker = this.highlighterUtils.togglePicker.bind(this.highlighterUtils);
     this._pickerButton.addEventListener("command", this._togglePicker, false);
   },
@@ -1004,17 +1016,17 @@ Toolbox.prototype = {
       // allows a bunch of tests to pass without modification.
       if (this.target.isMultiProcess && options.id === "command-button-tilt") {
         return false;
       }
 
       return {
         id: options.id,
         button: button,
-        label: button.getAttribute("tooltiptext"),
+        label: button.getAttribute("title"),
         visibilityswitch: "devtools." + options.id + ".enabled",
         isTargetSupported: options.isTargetSupported
                            ? options.isTargetSupported
                            : target => target.isLocalTab
       };
     }).filter(button=>button);
   },
 
@@ -1073,56 +1085,56 @@ Toolbox.prototype = {
     let deck = this.doc.getElementById("toolbox-deck");
 
     let id = toolDefinition.id;
 
     if (toolDefinition.ordinal == undefined || toolDefinition.ordinal < 0) {
       toolDefinition.ordinal = MAX_ORDINAL;
     }
 
-    let radio = this.doc.createElement("radio");
+    // Cheesy tabs - TODO - replace with an actual widget
+    let radio = this.doc.createElement("div");
     // The radio element is not being used in the conventional way, thus
     // the devtools-tab class replaces the radio XBL binding with its base
     // binding (the control-item binding).
     radio.className = "devtools-tab";
     radio.id = "toolbox-tab-" + id;
     radio.setAttribute("toolid", id);
     radio.setAttribute("ordinal", toolDefinition.ordinal);
-    radio.setAttribute("tooltiptext", toolDefinition.tooltip);
+    radio.setAttribute("title", toolDefinition.tooltip);
     if (toolDefinition.invertIconForLightTheme) {
       radio.setAttribute("icon-invertable", "true");
     }
 
-    radio.addEventListener("command", () => {
+    radio.addEventListener("click", () => {
       this.selectTool(id);
     });
 
     // spacer lets us center the image and label, while allowing cropping
     let spacer = this.doc.createElement("spacer");
     spacer.setAttribute("flex", "1");
     radio.appendChild(spacer);
 
     if (toolDefinition.icon) {
-      let image = this.doc.createElement("image");
+      let image = this.doc.createElement("img");
       image.className = "default-icon";
       image.setAttribute("src",
                          toolDefinition.icon || toolDefinition.highlightedicon);
       radio.appendChild(image);
       // Adding the highlighted icon image
-      image = this.doc.createElement("image");
+      image = this.doc.createElement("img");
       image.className = "highlighted-icon";
       image.setAttribute("src",
                          toolDefinition.highlightedicon || toolDefinition.icon);
       radio.appendChild(image);
     }
 
     if (toolDefinition.label && !toolDefinition.iconOnly) {
       let label = this.doc.createElement("label");
-      label.setAttribute("value", toolDefinition.label);
-      label.setAttribute("crop", "end");
+      label.textContent = toolDefinition.label;
       label.setAttribute("flex", "1");
       radio.appendChild(label);
       radio.setAttribute("flex", "1");
     }
 
     if (!toolDefinition.bgTheme) {
       toolDefinition.bgTheme = "theme-toolbar";
     }
@@ -1351,16 +1363,20 @@ Toolbox.prototype = {
 
     // select the right tab, making 0th index the default tab if right tab not
     // found.
     tabstrip.selectedItem = tab || tabstrip.childNodes[0];
 
     // and select the right iframe
     let deck = this.doc.getElementById("toolbox-deck");
     let panel = this.doc.getElementById("toolbox-panel-" + id);
+    [...deck.querySelectorAll("[selected]")].forEach(panel => {
+      panel.removeAttribute("selected");
+    });
+    panel.setAttribute("selected", true);
     deck.selectedPanel = panel;
 
     this.lastUsedToolId = this.currentToolId;
     this.currentToolId = id;
     this._refreshConsoleDisplay();
     if (id != "options") {
       Services.prefs.setCharPref(this._prefs.LAST_TOOL, id);
     }
@@ -1564,16 +1580,18 @@ Toolbox.prototype = {
       type: "switchToFrame",
       windowId: windowId
     };
     this._target.client.request(packet);
     // Wait for frameUpdate event to update the UI
   },
 
   _updateFrames: function(event, data) {
+    // XXX: fix this
+    return;
     if (!Services.prefs.getBoolPref("devtools.command-button-frames.enabled")) {
       return;
     }
 
     // We may receive this event before the toolbox is ready.
     if (!this.isReady) {
       return;
     }
@@ -1919,17 +1937,17 @@ Toolbox.prototype = {
 
     this._lastFocusedElement = null;
 
     if (this.webconsolePanel) {
       this._saveSplitConsoleHeight();
       this.webconsolePanel.removeEventListener("resize",
         this._saveSplitConsoleHeight);
     }
-    this.closeButton.removeEventListener("command", this.destroy, true);
+    this.closeButton.removeEventListener("click", this.destroy, true);
     this.textboxContextMenuPopup.removeEventListener("popupshowing",
       this._updateTextboxMenuItems, true);
 
     let outstanding = [];
     for (let [id, panel] of this._toolPanels) {
       try {
         gDevTools.emit(id + "-destroy", this, panel);
         this.emit(id + "-destroy", panel);
diff --git a/devtools/client/framework/toolbox.xhtml b/devtools/client/framework/toolbox.xhtml
new file mode 100644
--- /dev/null
+++ b/devtools/client/framework/toolbox.xhtml
@@ -0,0 +1,64 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- This Source Code Form is subject to the terms of the Mozilla Public
+   - License, v. 2.0. If a copy of the MPL was not distributed with this
+   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
+<!DOCTYPE window [
+  <!ENTITY % toolboxDTD SYSTEM "chrome://devtools/locale/toolbox.dtd" >
+  %toolboxDTD;
+  <!ENTITY % editMenuStrings SYSTEM "chrome://global/locale/editMenuOverlay.dtd">
+  %editMenuStrings;
+  <!ENTITY % globalKeysDTD SYSTEM "chrome://global/locale/globalKeys.dtd">
+  %globalKeysDTD;
+]>
+
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head>
+  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
+  <script type="application/javascript;version=1.8"
+          src="chrome://devtools/content/shared/theme-switching.js"></script>
+  <link rel="stylesheet" href="chrome://devtools/skin/common.css" type="text/css"/>
+</head>
+<body class="theme-body" role="application">
+
+  <notificationbox id="toolbox-notificationbox" flex="1">
+    <toolbar class="devtools-tabbar">
+      <hbox id="toolbox-picker-container" />
+      <hbox id="toolbox-tabs" flex="1" role="tablist" />
+      <hbox id="toolbox-buttons" pack="end">
+        <button id="command-button-frames"
+                       class="command-button command-button-invertable devtools-button"
+                       title="&toolboxFramesTooltip;"
+                       type="menu"
+                       hidden="true">
+          <menupopup position="bottomright topright"></menupopup>
+        </button>
+      </hbox>
+      <vbox id="toolbox-controls-separator" class="devtools-separator"/>
+      <hbox id="toolbox-option-container"/>
+      <hbox id="toolbox-controls">
+        <hbox id="toolbox-dock-buttons"/>
+        <button id="toolbox-close"
+                class="devtools-button devtools-closebutton"
+                title="&toolboxCloseButton.tooltip;" />
+      </hbox>
+    </toolbar>
+    <vbox flex="1">
+      <!-- Set large flex to allow the toolbox-panel-webconsole to have a
+           height set to a small value without flexing to fill up extra
+           space. There must be a flex on both to ensure that the console
+           panel itself is sized properly -->
+      <deck id="toolbox-deck" flex="1000" minheight="75" />
+      <splitter id="toolbox-console-splitter" class="devtools-horizontal-splitter" hidden="true" />
+      <box minheight="75" flex="1" id="toolbox-panel-webconsole" collapsed="true" />
+    </vbox>
+  </notificationbox>
+
+  <script type="application/javascript;version=1.8">
+    console.log("Hello");
+    document.addEventListener("contextmenu", () => {
+      console.log("ON CONTEXT MENU!");
+    }, true);
+  </script>
+
+</body>
+</html>
\ No newline at end of file
diff --git a/devtools/client/framework/toolbox.xul b/devtools/client/framework/toolbox.xul
--- a/devtools/client/framework/toolbox.xul
+++ b/devtools/client/framework/toolbox.xul
@@ -1,30 +1,27 @@
 <?xml version="1.0" encoding="utf-8"?>
 <!-- This Source Code Form is subject to the terms of the Mozilla Public
    - License, v. 2.0. If a copy of the MPL was not distributed with this
    - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
-<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
-<?xml-stylesheet href="chrome://devtools/skin/common.css" type="text/css"?>
 
 <?xul-overlay href="chrome://global/content/editMenuOverlay.xul"?>
 
 <!DOCTYPE window [
 <!ENTITY % toolboxDTD SYSTEM "chrome://devtools/locale/toolbox.dtd" >
 %toolboxDTD;
 <!ENTITY % editMenuStrings SYSTEM "chrome://global/locale/editMenuOverlay.dtd">
 %editMenuStrings;
 <!ENTITY % globalKeysDTD SYSTEM "chrome://global/locale/globalKeys.dtd">
 %globalKeysDTD;
 ]>
 
 <window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
+  <iframe src="toolbox.xhtml" flex="1" style="height: 100%; width: 100%; margin: 0; padding: 0;"></iframe>
 
-  <script type="application/javascript;version=1.8"
-          src="chrome://devtools/content/shared/theme-switching.js"/>
   <script type="application/javascript"
           src="chrome://global/content/viewSourceUtils.js"/>
 
   <script type="application/javascript" src="chrome://global/content/globalOverlay.js"/>
 
   <commandset id="editMenuCommands"/>
   <keyset id="editMenuKeys"/>
   <keyset id="toolbox-keyset">
@@ -109,41 +106,9 @@
       <menuitem id="cMenu_copy"/>
       <menuitem id="cMenu_paste"/>
       <menuitem id="cMenu_delete"/>
       <menuseparator/>
       <menuitem id="cMenu_selectAll"/>
     </menupopup>
   </popupset>
 
-  <notificationbox id="toolbox-notificationbox" flex="1">
-    <toolbar class="devtools-tabbar">
-      <hbox id="toolbox-picker-container" />
-      <hbox id="toolbox-tabs" flex="1" role="tablist" />
-      <hbox id="toolbox-buttons" pack="end">
-        <toolbarbutton id="command-button-frames"
-                       class="command-button command-button-invertable devtools-toolbarbutton"
-                       tooltiptext="&toolboxFramesTooltip;"
-                       type="menu"
-                       hidden="true">
-          <menupopup position="bottomright topright"></menupopup>
-        </toolbarbutton>
-      </hbox>
-      <vbox id="toolbox-controls-separator" class="devtools-separator"/>
-      <hbox id="toolbox-option-container"/>
-      <hbox id="toolbox-controls">
-        <hbox id="toolbox-dock-buttons"/>
-        <toolbarbutton id="toolbox-close"
-                       class="devtools-closebutton"
-                       tooltiptext="&toolboxCloseButton.tooltip;"/>
-      </hbox>
-    </toolbar>
-    <vbox flex="1">
-      <!-- Set large flex to allow the toolbox-panel-webconsole to have a
-           height set to a small value without flexing to fill up extra
-           space. There must be a flex on both to ensure that the console
-           panel itself is sized properly -->
-      <deck id="toolbox-deck" flex="1000" minheight="75" />
-      <splitter id="toolbox-console-splitter" class="devtools-horizontal-splitter" hidden="true" />
-      <box minheight="75" flex="1" id="toolbox-panel-webconsole" collapsed="true" />
-    </vbox>
-  </notificationbox>
 </window>
diff --git a/devtools/client/inspector/inspector-panel.js b/devtools/client/inspector/inspector-panel.js
--- a/devtools/client/inspector/inspector-panel.js
+++ b/devtools/client/inspector/inspector-panel.js
@@ -164,32 +164,33 @@ InspectorPanel.prototype = {
 
     this._toolbox.on("host-changed", this.onToolboxHostChanged);
 
     if (this.target.isLocalTab) {
       // Show a warning when the debugger is paused.
       // We show the warning only when the inspector
       // is selected.
       this.updateDebuggerPausedWarning = () => {
-        let notificationBox = this._toolbox.getNotificationBox();
-        let notification = notificationBox.getNotificationWithValue("inspector-script-paused");
-        if (!notification && this._toolbox.currentToolId == "inspector" &&
-            this._toolbox.threadClient.paused) {
-          let message = strings.GetStringFromName("debuggerPausedWarning.message");
-          notificationBox.appendNotification(message,
-            "inspector-script-paused", "", notificationBox.PRIORITY_WARNING_HIGH);
-        }
+        // XXX: Create a toolbox API for notification box
+        // let notificationBox = this._toolbox.getNotificationBox();
+        // let notification = notificationBox.getNotificationWithValue("inspector-script-paused");
+        // if (!notification && this._toolbox.currentToolId == "inspector" &&
+        //     this._toolbox.threadClient.paused) {
+        //   let message = strings.GetStringFromName("debuggerPausedWarning.message");
+        //   notificationBox.appendNotification(message,
+        //     "inspector-script-paused", "", notificationBox.PRIORITY_WARNING_HIGH);
+        // }
 
-        if (notification && this._toolbox.currentToolId != "inspector") {
-          notificationBox.removeNotification(notification);
-        }
+        // if (notification && this._toolbox.currentToolId != "inspector") {
+        //   notificationBox.removeNotification(notification);
+        // }
 
-        if (notification && !this._toolbox.threadClient.paused) {
-          notificationBox.removeNotification(notification);
-        }
+        // if (notification && !this._toolbox.threadClient.paused) {
+        //   notificationBox.removeNotification(notification);
+        // }
 
       };
       this.target.on("thread-paused", this.updateDebuggerPausedWarning);
       this.target.on("thread-resumed", this.updateDebuggerPausedWarning);
       this._toolbox.on("select", this.updateDebuggerPausedWarning);
       this.updateDebuggerPausedWarning();
     }
 
diff --git a/devtools/client/inspector/inspector.xul b/devtools/client/inspector/inspector.xul
--- a/devtools/client/inspector/inspector.xul
+++ b/devtools/client/inspector/inspector.xul
@@ -28,16 +28,17 @@
       key="&inspectorSearchHTML.key;"
       modifiers="accel"
       command="nodeSearchCommand"/>
   </keyset>
 
   <popupset id="inspectorPopupSet">
     <!-- Used by the Markup Panel, the Highlighter and the Breadcrumbs -->
     <menupopup id="inspector-node-popup">
+    <!-- XXX why isn't this working? -->
       <menuitem id="node-menu-edithtml"
         label="&inspectorHTMLEdit.label;"
         accesskey="&inspectorHTMLEdit.accesskey;"
         oncommand="inspector.editHTML()"/>
       <menuitem id="node-menu-copyinner"
         label="&inspectorHTMLCopyInner.label;"
         accesskey="&inspectorHTMLCopyInner.accesskey;"
         oncommand="inspector.copyInnerHTML()"/>
diff --git a/devtools/client/jar.mn b/devtools/client/jar.mn
--- a/devtools/client/jar.mn
+++ b/devtools/client/jar.mn
@@ -116,16 +116,17 @@ devtools.jar:
     content/promisedebugger/promise-debugger.xhtml (promisedebugger/promise-debugger.xhtml)
     content/commandline/commandline.css (commandline/commandline.css)
     content/commandline/commandlineoutput.xhtml (commandline/commandlineoutput.xhtml)
     content/commandline/commandlinetooltip.xhtml (commandline/commandlinetooltip.xhtml)
     content/framework/toolbox-window.xul (framework/toolbox-window.xul)
     content/framework/toolbox-options.xul (framework/toolbox-options.xul)
     content/framework/toolbox-options.js (framework/toolbox-options.js)
     content/framework/toolbox.xul (framework/toolbox.xul)
+    content/framework/toolbox.xhtml (framework/toolbox.xhtml)
     content/framework/options-panel.css (framework/options-panel.css)
     content/framework/toolbox-process-window.xul (framework/toolbox-process-window.xul)
 *   content/framework/toolbox-process-window.js (framework/toolbox-process-window.js)
     content/framework/dev-edition-promo/dev-edition-promo.xul (framework/dev-edition-promo/dev-edition-promo.xul)
 *   content/framework/dev-edition-promo/dev-edition-promo.css (framework/dev-edition-promo/dev-edition-promo.css)
     content/framework/dev-edition-promo/dev-edition-logo.png (framework/dev-edition-promo/dev-edition-logo.png)
     content/inspector/inspector.xul (inspector/inspector.xul)
     content/inspector/inspector.css (inspector/inspector.css)
diff --git a/devtools/client/shared/DeveloperToolbar.jsm b/devtools/client/shared/DeveloperToolbar.jsm
--- a/devtools/client/shared/DeveloperToolbar.jsm
+++ b/devtools/client/shared/DeveloperToolbar.jsm
@@ -102,40 +102,41 @@ var CommandUtils = {
    * Warning: this method uses the unload event of the window that owns the
    * buttons that are of type checkbox. this means that we don't properly
    * unregister event handlers until the window is destroyed.
    */
   createButtons: function(toolbarSpec, target, document, requisition) {
     return util.promiseEach(toolbarSpec, typed => {
       // Ask GCLI to parse the typed string (doesn't execute it)
       return requisition.update(typed).then(() => {
-        let button = document.createElement("toolbarbutton");
+        let button = document.createElement("button");
 
         // Ignore invalid commands
         let command = requisition.commandAssignment.value;
         if (command == null) {
           throw new Error("No command '" + typed + "'");
         }
 
         if (command.buttonId != null) {
           button.id = command.buttonId;
           if (command.buttonClass != null) {
             button.className = command.buttonClass;
           }
         }
         else {
+          // XXX: implement [label] for devtools-button
           button.setAttribute("text-as-image", "true");
           button.setAttribute("label", command.name);
-          button.className = "devtools-toolbarbutton";
+          button.className = "devtools-button";
         }
         if (command.tooltipText != null) {
-          button.setAttribute("tooltiptext", command.tooltipText);
+          button.setAttribute("title", command.tooltipText);
         }
         else if (command.description != null) {
-          button.setAttribute("tooltiptext", command.description);
+          button.setAttribute("title", command.description);
         }
 
         button.addEventListener("click", () => {
           requisition.updateExec(typed);
         }, false);
 
         // Allow the command button to be toggleable
         if (command.state) {
diff --git a/devtools/client/themes/toolbars.css b/devtools/client/themes/toolbars.css
--- a/devtools/client/themes/toolbars.css
+++ b/devtools/client/themes/toolbars.css
@@ -13,16 +13,126 @@
 
 .theme-dark {
   --searchbox-background-color: #4d4222;
   --searchbox-border-color: #d99f2b;
   --searcbox-no-match-background-color: #402325;
   --searcbox-no-match-border-color: #cc3d3d;
 }
 
+html iframe {
+  border: none;
+  min-width: 0;
+  display: flex;
+  flex: 1;
+  height: auto;
+}
+
+html tabpanel > iframe {
+  /* XXX: This prevents rule view frame
+  from being forced at 300px with, but WHY? */
+  width: 0;
+}
+
+html * {
+  -moz-appearance: none;
+  box-sizing: border-box;
+  margin: 0;
+  padding: 0;
+}
+
+html {
+  height: 100%;
+}
+
+html body {
+  height: 100%;
+  display: flex;
+  flex-direction: column;
+}
+
+html box,
+html hbox,
+html toolbar,
+html notificationbox,
+html vbox,
+html deck,
+html spacer {
+  display: flex;
+  flex-basis: 0;
+  /*white-space: pre;*/
+}
+
+html hbox,
+html toolbar {
+  flex-flow: row;
+}
+
+html vbox,
+html notificationbox {
+  flex-flow: column;
+}
+
+html deck > * {
+  flex: 1;
+}
+html deck > *:not([selected]) {
+  display: none;
+}
+
+/* Stolen from minimal-xul */
+/* hide the content and destroy the frame */
+[hidden="true"], [hidden]:not([hidden="false"]) {
+  display: none !important;
+}
+
+/* hide the content, but don't destroy the frames */
+[collapsed="true"],
+[moz-collapsed="true"] {
+  /*visibility: collapse;*/
+  display: none;
+}
+
+html [flex="0"] { flex: 0; }
+html [flex="1"] { flex-grow: 1; }
+html [flex="2"] { flex-grow: 2; }
+html [flex="3"] { flex-grow: 3; }
+html [flex="4"] { flex-grow: 4; }
+html [flex="5"] { flex-grow: 5; }
+html [flex="6"] { flex-grow: 6; }
+html [flex="7"] { flex-grow: 7; }
+html [flex="8"] { flex-grow: 8; }
+html [flex="9"] { flex-grow: 9; }
+html [flex="1000"] { flex-grow: 1000; }
+
+html [align="start"] { align-items: flex-start }
+html [align="center"] { align-items: center }
+html [align="end"] { align-items: flex-end }
+html [align="baseline"] { align-items: flex-baseline }
+html [align="stretch"] { align-items: flex-stretch }
+
+html [pack="start"] { justify-content: flex-start }
+html [pack="center"] { justify-content: center }
+html [pack="end"] { justify-content: flex-end }
+
+html .devtools-toolbar {
+  display: flex;
+}
+
+/* XXX: Need to come up with a better solution for panels */
+html panel,
+html tooltip,
+html keyset,
+html popupset,
+html commandset {
+  position: absolute;
+  top: -1000px;
+  left: -1000px;
+}
+
 /* Toolbars */
 .devtools-toolbar,
 .devtools-sidebar-tabs tabs {
   -moz-appearance: none;
   padding: 0;
   border-width: 0;
   border-bottom-width: 1px;
   border-style: solid;
@@ -52,17 +162,18 @@
   margin: 0 6px !important; /* overrides .checkbox-label from checkbox.css */
   padding: 0;
 }
 
 /* Toolbar buttons */
 
 .devtools-menulist,
 .devtools-toolbarbutton,
-.devtools-button {
+.devtools-button,
+.command-button {
   -moz-appearance: none;
   background: transparent;
   min-height: 18px;
   text-shadow: none;
   border: none;
   border-radius: 0;
   color: var(--theme-body-color);
   transition: background 0.05s ease-in-out;
@@ -85,25 +196,27 @@
 .devtools-toolbarbutton:not([label]) > .toolbarbutton-icon,
 .devtools-button::before {
   width: 16px;
   height: 16px;
   transition: opacity 0.05s ease-in-out;
 }
 
 /* HTML buttons */
-.devtools-button {
+.devtools-button,
+.command-button {
   margin: 0;
   padding: 0;
   min-width: 32px;
   /* The icon is absolutely positioned in the button using ::before */
   position: relative;
 }
 
-.devtools-button::before {
+.devtools-button::before,
+.command-button::before {
   content: "";
   display: block;
   position: absolute;
   left: 50%;
   top: 50%;
   margin: -8px 0 0 -8px;
   background-size: cover;
   background-repeat: no-repeat;
@@ -457,42 +570,25 @@
   .theme-light .devtools-searchinput {
     background-image: url(images/magnifying-glass-light@2x.png);
   }
 }
 
 /* Close button */
 
 .devtools-closebutton {
-  -moz-appearance: none;
   border: none;
   margin: 0 4px;
   min-width: 16px;
   width: 16px;
   opacity: 0.8;
 }
 
-.devtools-closebutton > image {
-  width: 16px;
-  height: 16px;
-  -moz-appearance: none;
-  background-size: 16px 16px;
+.devtools-closebutton::before {
   background-image: url("chrome://devtools/skin/images/close@2x.png");
-  background-position: center center;
-  background-repeat: no-repeat;
-}
-
-.devtools-closebutton > .toolbarbutton-icon {
-  /* XXX Buttons have padding in widget/ that we don't want here but can't override with good CSS, so we must
-     use evil CSS to give the impression of smaller content */
-  margin: -4px;
-}
-
-.devtools-closebutton > .toolbarbutton-text {
-  display: none;
 }
 
 .devtools-closebutton:hover {
   opacity: 1;
 }
 
 /* In-tools sidebar */
 .devtools-sidebar-tabs {
@@ -586,63 +682,62 @@
   color: var(--theme-selection-color);
   background: var(--theme-selection-background);
 }
 
 /* Toolbox - moved from toolbox.css.
  * Rules that apply to the global toolbox like command buttons,
  * devtools tabs, docking buttons, etc. */
 
-#toolbox-controls > toolbarbutton,
-#toolbox-dock-buttons > toolbarbutton {
-  -moz-appearance: none;
+#toolbox-controls > button,
+#toolbox-dock-buttons > button,
+.command-button {
   border: none;
   margin: 0 4px;
   min-width: 16px;
   width: 16px;
 }
-
+/*
 #toolbox-controls > toolbarbutton > .toolbarbutton-text,
 #toolbox-dock-buttons > toolbarbutton > .toolbarbutton-text,
 .command-button > .toolbarbutton-text {
   display: none;
-}
-
+}*/
+/*
 #toolbox-dock-buttons > toolbarbutton > image {
-  -moz-appearance: none;
   width: 16px;
   height: 16px;
   background-size: 16px 16px;
   background-position: 0 center;
   background-repeat: no-repeat;
-}
+}*/
 
-#toolbox-dock-bottom > image {
+#toolbox-dock-bottom::before {
   background-image: url("chrome://devtools/skin/images/dock-bottom@2x.png");
 }
 
-#toolbox-dock-side  > image {
+#toolbox-dock-side::before {
   background-image: url("chrome://devtools/skin/images/dock-side@2x.png");
 }
 
-#toolbox-dock-window > image {
+#toolbox-dock-window::before {
   background-image: url("chrome://devtools/skin/images/undock@2x.png");
 }
 
 #toolbox-dock-bottom-minimize {
   /* Bug 1177463 - The minimize button is currently hidden until we agree on
      the UI for it, and until bug 1173849 is fixed too. */
   display: none;
 }
 
-#toolbox-dock-bottom-minimize > image {
+#toolbox-dock-bottom-minimize::before {
   background-image: url("chrome://devtools/skin/images/dock-bottom-minimize@2x.png");
 }
 
-#toolbox-dock-bottom-minimize.minimized > image {
+#toolbox-dock-bottom-minimize.minimized::before {
   background-image: url("chrome://devtools/skin/images/dock-bottom-maximize@2x.png");
 }
 
 #toolbox-dock-window,
 #toolbox-dock-bottom,
 #toolbox-dock-side {
   opacity: 0.8;
 }
@@ -686,123 +781,123 @@
 
 .command-button:hover {
   background-color: hsla(206,37%,4%,.2);
 }
 .command-button:hover:active, .command-button[checked=true]:not(:hover) {
   background-color: hsla(206,37%,4%,.4);
 }
 
-.command-button > image {
+.command-button::before {
   -moz-appearance: none;
   width: 16px;
   height: 16px;
   background-size: cover;
   background-position: 0 center;
   background-repeat: no-repeat;
   opacity: 0.7;
 }
-.command-button:hover > image {
+.command-button:hover::before {
   opacity: 0.85;
 }
-.command-button:hover:active > image,
-.command-button[checked=true] > image,
-.command-button[open=true] > image {
+.command-button:hover:active::before,
+.command-button[checked=true]::before,
+.command-button[open=true]::before {
   opacity: 1;
 }
-.command-button[checked=true] > image {
+.command-button[checked=true]::before {
   filter: url(images/filters.svg#checked-icon-state) !important;
 }
 
-#command-button-paintflashing > image {
+#command-button-paintflashing::before {
   background-image: url("chrome://devtools/skin/images/command-paintflashing.png");
 }
 
-#command-button-screenshot > image {
+#command-button-screenshot::before {
   background-image: url("chrome://devtools/skin/images/command-screenshot.png");
 }
 
-#command-button-responsive > image {
+#command-button-responsive::before {
   background-image: url("chrome://devtools/skin/images/command-responsivemode.png");
 }
 
-#command-button-tilt > image {
+#command-button-tilt::before {
   background-image: url("chrome://devtools/skin/images/command-tilt.png");
 }
 
-#command-button-scratchpad > image {
+#command-button-scratchpad::before {
   background-image: url("chrome://devtools/skin/images/command-scratchpad.png");
 }
 
-#command-button-pick > image {
+#command-button-pick::before {
   background-image: url("chrome://devtools/skin/images/command-pick.png");
 }
 
-#command-button-frames > image {
+#command-button-frames::before {
   background-image: url("chrome://devtools/skin/images/command-frames.png");
 }
 
-#command-button-splitconsole > image {
+#command-button-splitconsole::before {
   background-image: url("chrome://devtools/skin/images/command-console.png");
 }
 
-#command-button-eyedropper > image {
+#command-button-eyedropper::before {
   background-image: url("chrome://devtools/skin/images/command-eyedropper.png");
 }
 
-#command-button-rulers > image {
+#command-button-rulers::before {
   background-image: url("chrome://devtools/skin/images/command-rulers.png");
 }
 
-#command-button-measure > image {
+#command-button-measure::before {
   background-image: url("chrome://devtools/skin/images/command-measure.png");
 }
 
 @media (min-resolution: 1.1dppx) {
-  #command-button-paintflashing > image {
+  #command-button-paintflashing::before {
     background-image: url("chrome://devtools/skin/images/command-paintflashing@2x.png");
   }
 
-  #command-button-screenshot > image {
+  #command-button-screenshot::before {
     background-image: url("chrome://devtools/skin/images/command-screenshot@2x.png");
   }
 
-  #command-button-responsive > image {
+  #command-button-responsive::before {
     background-image: url("chrome://devtools/skin/images/command-responsivemode@2x.png");
   }
 
-  #command-button-tilt > image {
+  #command-button-tilt::before {
     background-image: url("chrome://devtools/skin/images/command-tilt@2x.png");
   }
 
-  #command-button-scratchpad > image {
+  #command-button-scratchpad::before {
     background-image: url("chrome://devtools/skin/images/command-scratchpad@2x.png");
   }
 
-  #command-button-pick > image {
+  #command-button-pick::before {
     background-image: url("chrome://devtools/skin/images/command-pick@2x.png");
   }
 
-  #command-button-frames > image {
+  #command-button-frames::before {
     background-image: url("chrome://devtools/skin/images/command-frames@2x.png");
   }
 
-  #command-button-splitconsole > image {
+  #command-button-splitconsole::before {
     background-image: url("chrome://devtools/skin/images/command-console@2x.png");
   }
 
-  #command-button-eyedropper > image {
+  #command-button-eyedropper::before {
     background-image: url("chrome://devtools/skin/images/command-eyedropper@2x.png");
   }
 
-  #command-button-rulers > image {
+  #command-button-rulers::before {
     background-image: url("chrome://devtools/skin/images/command-rulers@2x.png");
   }
 
-  #command-button-measure > image {
+  #command-button-measure::before {
     background-image: url("chrome://devtools/skin/images/command-measure@2x.png");
   }
 }
 
 /* Tabs */
 
 .devtools-tabbar {
   -moz-appearance: none;
@@ -822,28 +917,26 @@
   box-shadow: 0 -2px 0 rgba(0,0,0,.1) inset;
 }
 
 #toolbox-tabs {
   margin: 0;
 }
 
 .devtools-tab {
-  -moz-appearance: none;
-  -moz-binding: url("chrome://global/content/bindings/general.xml#control-item");
-  -moz-box-align: center;
   min-width: 32px;
   min-height: 24px;
   max-width: 110px;
   margin: 0;
   padding: 0;
   border-style: solid;
   border-width: 0;
   -moz-border-start-width: 1px;
-  -moz-box-align: center;
+  display: flex;
+  align-content: center;
 }
 
 .theme-dark .devtools-tab {
   color: var(--theme-body-color-alt);
   border-color: #42484f;
 }
 
 .theme-light .devtools-tab {
@@ -876,27 +969,29 @@
 .theme-dark .devtools-tab:not([selected])[highlighted] {
   background-color: hsla(99,100%,14%,.2);
 }
 
 .theme-light .devtools-tab:not([selected])[highlighted] {
   background-color: rgba(44, 187, 15, .2);
 }
 
-.devtools-tab > image {
+.devtools-tab > img {
   border: none;
-  -moz-margin-end: 0;
-  -moz-margin-start: 4px;
+  margin: 0 4px;
   opacity: 0.6;
   max-height: 16px;
   width: 16px; /* Prevents collapse during theme switching */
+  flex-shrink: 0;
 }
 
 .devtools-tab > label {
   white-space: nowrap;
+  overflow: hidden;
+  text-overflow: ellipsis;
 }
 
 .devtools-tab:hover > image {
   opacity: 0.8;
 }
 
 .devtools-tab:active > image,
 .devtools-tab[selected] > image {
@@ -949,35 +1044,34 @@
 .devtools-tab:not([highlighted]) > .highlighted-icon,
 .devtools-tab[selected] > .highlighted-icon,
 .devtools-tab:not([selected])[highlighted] > .default-icon {
   visibility: collapse;
 }
 
 /* The options tab is special - it doesn't have the same parent
    as the other tabs (toolbox-option-container vs toolbox-tabs) */
-#toolbox-option-container .devtools-tab:not([selected]) {
+#toolbox-tab-options:not([selected]) {
   background-color: transparent;
 }
-#toolbox-option-container .devtools-tab {
+#toolbox-tab-options {
   border-color: transparent;
   border-width: 0;
   -moz-padding-start: 1px;
+  width: 32px;
 }
-#toolbox-tab-options > image {
+#toolbox-tab-options > img {
   margin: 0 8px;
 }
 
 /* Invert the colors of certain dark theme images for displaying
  * inside of the light theme.
  */
-.theme-light .devtools-tab[icon-invertable] > image,
-.theme-light #toolbox-dock-buttons > toolbarbutton > image,
-.theme-light .command-button-invertable > image,
-.theme-light .devtools-closebutton > image,
+.theme-light .devtools-tab[icon-invertable] > img,
+.theme-light .command-button-invertable::before,
 .theme-light .devtools-toolbarbutton > image,
 .theme-light .devtools-button::before,
 .theme-light #breadcrumb-separator-normal,
 .theme-light .scrollbutton-up > .toolbarbutton-icon,
 .theme-light .scrollbutton-down > .toolbarbutton-icon,
 .theme-light #black-boxed-message-button .button-icon,
 .theme-light #requests-menu-perf-notice-button .button-icon,
 .theme-light #requests-menu-network-summary-button .button-icon,
