# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  6b1c7ba485c797665645461258ff0c521a22818e

diff --git a/toolkit/content/widgets/textbox.js b/toolkit/content/widgets/textbox.js
--- a/toolkit/content/widgets/textbox.js
+++ b/toolkit/content/widgets/textbox.js
@@ -23,93 +23,93 @@ const cachedFragments = {
       <menuitem label="&deleteCmd.label;" accesskey="&deleteCmd.accesskey;" cmd="cmd_delete"></menuitem>
       <menuseparator></menuseparator>
       <menuitem label="&selectAllCmd.label;" accesskey="&selectAllCmd.accesskey;" cmd="cmd_selectAll"></menuitem>
     `;
   },
   get normal() {
     delete this.normal;
     this.normal = MozXULElement.parseXULToFragment(`
-      <menupopup class="textbox-contextmenu">
+      <menupopup id="textbox-contextmenu">
         ${this.editMenuItems}
       </menupopup>
     `, this.entities);
     return this.normal;
   },
   get spellcheck() {
     delete this.spellcheck;
     this.spellcheck = MozXULElement.parseXULToFragment(`
-      <menupopup class="textbox-contextmenu">
+      <menupopup id="textbox-contextmenu-spellcheck">
         <menuitem label="&spellNoSuggestions.label;" anonid="spell-no-suggestions" disabled="true"></menuitem>
         <menuitem label="&spellAddToDictionary.label;" accesskey="&spellAddToDictionary.accesskey;" anonid="spell-add-to-dictionary" oncommand="this.parentNode.parentNode.spellCheckerUI.addToDictionary();"></menuitem>
         <menuitem label="&spellUndoAddToDictionary.label;" accesskey="&spellUndoAddToDictionary.accesskey;" anonid="spell-undo-add-to-dictionary" oncommand="this.parentNode.parentNode.spellCheckerUI.undoAddToDictionary();"></menuitem>
         <menuseparator anonid="spell-suggestions-separator"></menuseparator>
         ${this.editMenuItems}
         <menuseparator anonid="spell-check-separator"></menuseparator>
         <menuitem label="&spellCheckToggle.label;" type="checkbox" accesskey="&spellCheckToggle.accesskey;" anonid="spell-check-enabled" oncommand="this.parentNode.parentNode.spellCheckerUI.toggleEnabled();"></menuitem>
         <menu label="&spellDictionaries.label;" accesskey="&spellDictionaries.accesskey;" anonid="spell-dictionaries">
           <menupopup anonid="spell-dictionaries-menu" onpopupshowing="event.stopPropagation();" onpopuphiding="event.stopPropagation();"></menupopup>
         </menu>
       </menupopup>
     `, this.entities);
     return this.spellcheck;
   },
 };
 
-class MozInputBox extends MozXULElement {
-  static get observedAttributes() {
-    return ["spellcheck"];
+
+window.addEventListener("contextmenu", (e) => {
+  console.log(document.documentURI);
+  let {target} = e;
+  if (target.ownerDocument != document) {
+    return;
   }
 
-  attributeChangedCallback(name, oldValue, newValue) {
-    if (name === "spellcheck" && oldValue != newValue) {
-      this._initUI();
-    }
-  }
-
-  connectedCallback() {
-    this._initUI();
+  if (target.localName !== "textbox" && target.localName !== "textarea" &&
+      (target.localName !== "input" || target.type !== "text")) {
+    return;
   }
 
-  _initUI() {
-    this.spellcheck = this.hasAttribute("spellcheck");
-    if (this.menupopup) {
-      this.menupopup.remove();
-    }
-
-    this.setAttribute("context", "_child");
-    this.appendChild(this.spellcheck ? cachedFragments.spellcheck.cloneNode(true) :
-                                       cachedFragments.normal.cloneNode(true));
-    this.menupopup = this.querySelector(".textbox-contextmenu");
+  let spellcheck = target.hasAttribute("spellcheck");
+  let existingMenu = spellcheck ?
+    document.getElementById("textbox-contextmenu-spellcheck") :
+    document.getElementById("textbox-contextmenu");
 
-    this.menupopup.addEventListener("popupshowing", event => {
-      var input = this.getElementsByAttribute("anonid", "input")[0];
-      if (document.commandDispatcher.focusedElement != input)
-        input.focus();
-      this._doPopupItemEnabling(event.target);
-    });
+  if (!existingMenu) {
+    document.documentElement.appendChild(spellcheck ? cachedFragments.spellcheck :
+                                         cachedFragments.normal);
+    existingMenu = spellcheck ?
+      document.getElementById("textbox-contextmenu-spellcheck") :
+      document.getElementById("textbox-contextmenu");
+      existingMenu.addEventListener("popupshowing", event => {
+        // var input = this.getElementsByAttribute("anonid", "input")[0];
+        // if (document.commandDispatcher.focusedElement != input)
+        //   input.focus();
+        this._doPopupItemEnabling(event.target);
+      });
 
-    if (this.spellcheck) {
-      this.menupopup.addEventListener("popuphiding", event => {
-        if (this.spellCheckerUI) {
-          this.spellCheckerUI.clearSuggestionsFromMenu();
-          this.spellCheckerUI.clearDictionaryListFromMenu();
+      if (this.spellcheck) {
+        existingMenu.addEventListener("popuphiding", event => {
+          if (this.spellCheckerUI) {
+            this.spellCheckerUI.clearSuggestionsFromMenu();
+            this.spellCheckerUI.clearDictionaryListFromMenu();
+          }
+        });
+      }
+
+      existingMenu.addEventListener("command", event => {
+        var cmd = event.originalTarget.getAttribute("cmd");
+        if (cmd) {
+          this.doCommand(cmd);
+          event.stopPropagation();
         }
       });
-    }
+  }
+});
 
-    this.menupopup.addEventListener("command", event => {
-      var cmd = event.originalTarget.getAttribute("cmd");
-      if (cmd) {
-        this.doCommand(cmd);
-        event.stopPropagation();
-      }
-    });
-  }
-
+const MozInputBox = {
   _doPopupItemEnablingSpell(popupNode) {
     var spellui = this.spellCheckerUI;
     if (!spellui || !spellui.canSpellCheck) {
       this._setMenuItemVisibility("spell-no-suggestions", false);
       this._setMenuItemVisibility("spell-check-enabled", false);
       this._setMenuItemVisibility("spell-check-separator", false);
       this._setMenuItemVisibility("spell-add-to-dictionary", false);
       this._setMenuItemVisibility("spell-undo-add-to-dictionary", false);
@@ -136,17 +136,17 @@ class MozInputBox extends MozXULElement 
     var suggestionsSeparator = this.getMenuItem("spell-no-suggestions");
     var numsug = spellui.addSuggestionsToMenu(popupNode, suggestionsSeparator, 5);
     this._setMenuItemVisibility("spell-no-suggestions", overMisspelling && numsug == 0);
 
     // dictionary list
     var dictionariesMenu = this.getMenuItem("spell-dictionaries-menu");
     var numdicts = spellui.addDictionaryListToMenu(dictionariesMenu, null);
     this._setMenuItemVisibility("spell-dictionaries", enabled && numdicts > 1);
-  }
+  },
 
   _doPopupItemEnabling(popupNode) {
     if (this.spellcheck) {
       this._doPopupItemEnablingSpell(popupNode);
     }
 
     var children = popupNode.childNodes;
     for (var i = 0; i < children.length; i++) {
@@ -155,17 +155,17 @@ class MozInputBox extends MozXULElement 
         var controller = document.commandDispatcher.getControllerForCommand(command);
         var enabled = controller.isCommandEnabled(command);
         if (enabled)
           children[i].removeAttribute("disabled");
         else
           children[i].setAttribute("disabled", "true");
       }
     }
-  }
+  },
 
   get spellCheckerUI() {
     if (!this._spellCheckInitialized) {
       this._spellCheckInitialized = true;
 
       if (ChromeUtils.getClassName(document) != "XULDocument")
         return null;
 
@@ -175,26 +175,25 @@ class MozInputBox extends MozXULElement 
 
       try {
         ChromeUtils.import("resource://gre/modules/InlineSpellChecker.jsm", this);
         this.InlineSpellCheckerUI = new this.InlineSpellChecker(textbox.editor);
       } catch (ex) {}
     }
 
     return this.InlineSpellCheckerUI;
-  }
+  },
 
   getMenuItem(anonid) {
     return this.querySelector(`[anonid="${anonid}"]`);
-  }
+  },
 
   _setMenuItemVisibility(anonid, visible) {
     this.getMenuItem(anonid).hidden = !visible;
-  }
+  },
 
   doCommand(command) {
     var controller = document.commandDispatcher.getControllerForCommand(command);
     controller.doCommand(command);
-  }
+  },
 }
 
-customElements.define("moz-input-box", MozInputBox);
 }
