# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1568929919 25200
#      Thu Sep 19 14:51:59 2019 -0700
# Node ID 088b62e819ddc9c7f896d03da46baee78c6d8513
# Parent  67ba5406ce3954311b41ea6bb5564118a5699244
Bug 1582786 - Append the devtools theme stylesheet sheet to document.head if it exists instead of using an XML ProcessingInstruction

Otherwise, what happens in documents like the webconsole is the theme file gets loaded before
global.css, which isn't the intended behavior and makes overriding the styles from global.css
more difficult. As an example, some buttons in the webconsole became stretched after Bug 1581914
changed some default styling in global.css. This patch restores the correct behavior by loading
the theme afer global.css.

global.css is currently loaded in devtools in docs that explicitly use XUL elements (such as storage inspector
and style editor), and in docs that need to be supported as top level windows (webconsole, toolbox, and
browser toolbox). Unless if we change how things like panels and context menus are styled, the latter
group will continue to need to load global.css even as XUL/XBL usage goes away (since they are styled
with global.css).

Differential Revision: https://phabricator.services.mozilla.com/D46530

diff --git a/devtools/client/shared/stylesheet-utils.js b/devtools/client/shared/stylesheet-utils.js
--- a/devtools/client/shared/stylesheet-utils.js
+++ b/devtools/client/shared/stylesheet-utils.js
@@ -3,43 +3,54 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 /* eslint-env browser */
 "use strict";
 
 /*
  * Append a stylesheet to the provided XUL document.
  *
- * @param  {Document} xulDocument
- *         The XUL document where the stylesheet should be appended.
+ * @param  {Document} doc
+ *         The chrome document where the stylesheet should be appended.
  * @param  {String} url
  *         The url of the stylesheet to load.
  * @return {Object}
  *         - styleSheet {XMLStylesheetProcessingInstruction} the instruction node created.
  *         - loadPromise {Promise} that will resolve/reject when the stylesheet finishes
  *           or fails to load.
  */
-function appendStyleSheet(xulDocument, url) {
-  const styleSheetAttr = `href="${url}" type="text/css"`;
-  const styleSheet = xulDocument.createProcessingInstruction(
-    "xml-stylesheet",
-    styleSheetAttr
-  );
+function appendStyleSheet(doc, url) {
+  let styleSheet;
+  if (doc.head) {
+    styleSheet = doc.createElement("link");
+    styleSheet.setAttribute("rel", "stylesheet");
+    styleSheet.setAttribute("href", url);
+  } else {
+    const styleSheetAttr = `href="${url}" type="text/css"`;
+    styleSheet = doc.createProcessingInstruction(
+      "xml-stylesheet",
+      styleSheetAttr
+    );
+  }
   const loadPromise = new Promise((resolve, reject) => {
     function onload() {
       styleSheet.removeEventListener("load", onload);
       styleSheet.removeEventListener("error", onerror);
       resolve();
     }
     function onerror() {
       styleSheet.removeEventListener("load", onload);
       styleSheet.removeEventListener("error", onerror);
       reject("Failed to load theme file " + url);
     }
 
     styleSheet.addEventListener("load", onload);
     styleSheet.addEventListener("error", onerror);
   });
-  xulDocument.insertBefore(styleSheet, xulDocument.documentElement);
+  if (doc.head) {
+    doc.head.append(styleSheet);
+  } else {
+    doc.insertBefore(styleSheet, doc.documentElement);
+  }
   return { styleSheet, loadPromise };
 }
 
 exports.appendStyleSheet = appendStyleSheet;
