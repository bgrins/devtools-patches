# HG changeset patch
# User Alexandre Poirot <poirot.alex@gmail.com>
# Parent  2c9ba91bbb466090841c753597e2c891f4cfa99b

Bug 950936 - Add disable autohide button in browser toolbox to help debug panel/popups. r=bgrins

diff --git a/devtools/client/framework/test/browser_toolbox_options_disable_buttons.js b/devtools/client/framework/test/browser_toolbox_options_disable_buttons.js
--- a/devtools/client/framework/test/browser_toolbox_options_disable_buttons.js
+++ b/devtools/client/framework/test/browser_toolbox_options_disable_buttons.js
@@ -55,16 +55,19 @@ function testSelectTool(aToolbox) {
 }
 
 function testPreferenceAndUIStateIsConsistent() {
   let checkNodes = [...panelWin.document.querySelectorAll("#enabled-toolbox-buttons-box > checkbox")];
   let toolboxButtonNodes = [...doc.querySelectorAll(".command-button")];
   toolboxButtonNodes.push(doc.getElementById("command-button-frames"));
   let toggleableTools = toolbox.toolboxButtons;
 
+  // The noautohide button is only displayed in the browser toolbox
+  toggleableTools = toggleableTools.filter(tool => tool.id != "command-button-noautohide");
+
   for (let tool of toggleableTools) {
     let isVisible = getBoolPref(tool.visibilityswitch);
 
     let button = toolboxButtonNodes.filter(button => button.id === tool.id)[0];
     is (!button.hasAttribute("hidden"), isVisible, "Button visibility matches pref for " + tool.id);
 
     let check = checkNodes.filter(node=>node.id === tool.id)[0];
     is (check.checked, isVisible, "Checkbox should be selected based on current pref for " + tool.id);
@@ -77,26 +80,30 @@ function testToggleToolboxButtons() {
   let toggleableTools = toolbox.toolboxButtons;
 
   // Tilt is disabled in E10S mode so we skip the tilt button if E10S is
   // enabled.
   if (toolbox.target.isMultiProcess) {
     toolboxButtonNodes = [...doc.querySelectorAll(".command-button:not(#command-button-tilt)")];
   }
 
+  // The noautohide button is only displayed in the browser toolbox
+  toggleableTools = toggleableTools.filter(tool => tool.id != "command-button-noautohide");
+  toolboxButtonNodes = toolboxButtonNodes.filter(btn => btn.id != "command-button-noautohide");
+
   is (checkNodes.length, toggleableTools.length, "All of the buttons are toggleable." );
   is (checkNodes.length, toolboxButtonNodes.length, "All of the DOM buttons are toggleable." );
 
   for (let tool of toggleableTools) {
     let id = tool.id;
     let matchedCheckboxes = checkNodes.filter(node=>node.id === id);
     let matchedButtons = toolboxButtonNodes.filter(button=>button.id === id);
-    ok (matchedCheckboxes.length === 1,
+    is (matchedCheckboxes.length, 1,
       "There should be a single toggle checkbox for: " + id);
-    ok (matchedButtons.length === 1,
+    is (matchedButtons.length, 1,
       "There should be a DOM button for: " + id);
     is (matchedButtons[0], tool.button,
       "DOM buttons should match for: " + id);
 
     is (matchedCheckboxes[0].getAttribute("label"), tool.label,
       "The label for checkbox matches the tool definition.");
     is (matchedButtons[0].getAttribute("tooltiptext"), tool.label,
       "The tooltip for button matches the tool definition.");
diff --git a/devtools/client/framework/toolbox-options.js b/devtools/client/framework/toolbox-options.js
--- a/devtools/client/framework/toolbox-options.js
+++ b/devtools/client/framework/toolbox-options.js
@@ -179,16 +179,19 @@ OptionsPanel.prototype = {
       checkbox.addEventListener("command", onCheckboxClick.bind(this, checkbox));
       return checkbox;
     };
 
     for (let tool of toggleableButtons) {
       if (this.toolbox.target.isMultiProcess && tool.id === "command-button-tilt") {
         continue;
       }
+      // if (!tool.isTargetSupported(this.toolbox.target)) {
+      //   continue;
+      // }
 
       enabledToolbarButtonsBox.appendChild(createCommandCheckbox(tool));
     }
   },
 
   setupToolsList: function() {
     let defaultToolsBox = this.panelDoc.getElementById("default-tools-box");
     let additionalToolsBox = this.panelDoc.getElementById("additional-tools-box");
diff --git a/devtools/client/framework/toolbox-process-window.js b/devtools/client/framework/toolbox-process-window.js
--- a/devtools/client/framework/toolbox-process-window.js
+++ b/devtools/client/framework/toolbox-process-window.js
@@ -50,16 +50,17 @@ var connect = Task.async(function*() {
 });
 
 // Certain options should be toggled since we can assume chrome debugging here
 function setPrefDefaults() {
   Services.prefs.setBoolPref("devtools.inspector.showUserAgentStyles", true);
   Services.prefs.setBoolPref("devtools.performance.ui.show-platform-data", true);
   Services.prefs.setBoolPref("devtools.inspector.showAllAnonymousContent", true);
   Services.prefs.setBoolPref("browser.dom.window.dump.enabled", true);
+  Services.prefs.setBoolPref("devtools.command-button-noautohide.enabled", true);
 }
 
 window.addEventListener("load", function() {
   let cmdClose = document.getElementById("toolbox-cmd-close");
   cmdClose.addEventListener("command", onCloseCommand);
   setPrefDefaults();
   connect().catch(e => {
     let errorMessageContainer = document.getElementById("error-message-container");
diff --git a/devtools/client/framework/toolbox.js b/devtools/client/framework/toolbox.js
--- a/devtools/client/framework/toolbox.js
+++ b/devtools/client/framework/toolbox.js
@@ -56,16 +56,18 @@ loader.lazyRequireGetter(this, "Inspecto
 loader.lazyRequireGetter(this, "DevToolsUtils",
   "devtools/shared/DevToolsUtils");
 loader.lazyRequireGetter(this, "showDoorhanger",
   "devtools/client/shared/doorhanger", true);
 loader.lazyRequireGetter(this, "createPerformanceFront",
   "devtools/server/actors/performance", true);
 loader.lazyRequireGetter(this, "system",
   "devtools/shared/system");
+loader.lazyRequireGetter(this, "getPreferenceFront",
+  "devtools/server/actors/preference", true);
 loader.lazyGetter(this, "osString", () => {
   return Cc["@mozilla.org/xre/app-info;1"].getService(Ci.nsIXULRuntime).OS;
 });
 loader.lazyGetter(this, "registerHarOverlay", () => {
   return require("devtools/client/netmonitor/har/toolbox-overlay").register;
 });
 
 // White-list buttons that can be toggled to prevent adding prefs for
@@ -86,17 +88,19 @@ const ToolboxButtons = exports.ToolboxBu
   { id: "command-button-responsive" },
   { id: "command-button-paintflashing" },
   { id: "command-button-tilt",
     commands: "devtools/client/tilt/tilt-commands" },
   { id: "command-button-scratchpad" },
   { id: "command-button-eyedropper" },
   { id: "command-button-screenshot" },
   { id: "command-button-rulers" },
-  { id: "command-button-measure" }
+  { id: "command-button-measure" },
+  { id: "command-button-noautohide",
+    hideIfNotSupported: true },
 ];
 
 /**
  * A "Toolbox" is the component that holds all the tools for one specific
  * target. Visually, it's a document that includes the tools tabs and all
  * the iframes where the tool panels will be living in.
  *
  * @param {object} target
@@ -114,16 +118,18 @@ function Toolbox(target, selectedTool, h
   this._telemetry = new Telemetry();
 
   this._initInspector = null;
   this._inspector = null;
 
   this._toolRegistered = this._toolRegistered.bind(this);
   this._toolUnregistered = this._toolUnregistered.bind(this);
   this._refreshHostTitle = this._refreshHostTitle.bind(this);
+  this._toggleAutohide = this._toggleAutohide.bind(this);
+  this._updateNoautohideButton = this._updateNoautohideButton.bind(this);
   this.selectFrame = this.selectFrame.bind(this);
   this._updateFrames = this._updateFrames.bind(this);
   this._splitConsoleOnKeypress = this._splitConsoleOnKeypress.bind(this);
   this.destroy = this.destroy.bind(this);
   this.highlighterUtils = getHighlighterUtils(this);
   this._highlighterReady = this._highlighterReady.bind(this);
   this._highlighterHidden = this._highlighterHidden.bind(this);
   this._prefChanged = this._prefChanged.bind(this);
@@ -374,16 +380,19 @@ Toolbox.prototype = {
       this.closeButton = this.doc.getElementById("toolbox-close");
       this.closeButton.addEventListener("command", this.destroy, true);
 
       gDevTools.on("pref-changed", this._prefChanged);
 
       let framesMenu = this.doc.getElementById("command-button-frames");
       framesMenu.addEventListener("command", this.selectFrame, true);
 
+      let noautohideMenu = this.doc.getElementById("command-button-noautohide");
+      noautohideMenu.addEventListener("command", this._toggleAutohide, true);
+
       this.textboxContextMenuPopup =
         this.doc.getElementById("toolbox-textbox-context-popup");
       this.textboxContextMenuPopup.addEventListener("popupshowing",
         this._updateTextboxMenuItems, true);
 
       this._buildDockButtons();
       this._buildOptions();
       this._buildTabs();
@@ -1008,17 +1017,18 @@ Toolbox.prototype = {
 
       return {
         id: options.id,
         button: button,
         label: button.getAttribute("tooltiptext"),
         visibilityswitch: "devtools." + options.id + ".enabled",
         isTargetSupported: options.isTargetSupported
                            ? options.isTargetSupported
-                           : target => target.isLocalTab
+                           : target => target.isLocalTab,
+        hideIfNotSupported: options.hideIfNotSupported
       };
     }).filter(button=>button);
   },
 
   /**
    * Ensure the visibility of each toolbox button matches the
    * preference value.  Simply hide buttons that are preffed off.
    */
@@ -1036,16 +1046,21 @@ Toolbox.prototype = {
         if (on) {
           button.removeAttribute("hidden");
         } else {
           button.setAttribute("hidden", "true");
         }
       }
     });
 
+    // let noautohideMenu = this.doc.getElementById("command-button-noautohide");
+    // if (!noautohideMenu.hasAttribute("hidden")) {
+      this._updateNoautohideButton();
+    // }
+
     // Tilt is handled separately because it is disabled in E10S mode. Because
     // we have removed tilt from toolboxButtons we have to deal with it here.
     let tiltEnabled = !this.target.isMultiProcess &&
                       Services.prefs.getBoolPref("devtools.command-button-tilt.enabled");
     let tiltButton = this.doc.getElementById("command-button-tilt");
     // Remote toolboxes don't add the button to the DOM at all
     if (!tiltButton) {
       return;
@@ -1537,16 +1552,55 @@ Toolbox.prototype = {
       toolName = toolboxStrings("toolbox.defaultTitle");
     }
     let title = toolboxStrings("toolbox.titleTemplate",
                                toolName, this.target.name ||
                                          this.target.url);
     this._host.setTitle(title);
   },
 
+  getPreferenceFront: Task.async(function*() {
+    let rootForm = yield this.target.root;
+    return new getPreferenceFront(this.target.client, rootForm);
+  }),
+
+  // Returns a memoized instance of the preference actor
+  get _preferenceFront() {
+    return this.target.root.then(rootForm => {
+     return new getPreferenceFront(this.target.client, rootForm);
+    });
+  },
+
+  _toggleAutohide: Task.async(function*() {
+    let prefName = "ui.menu.disable_autohide";
+    let front = yield this._preferenceFront;
+    let current = yield front.getBoolPref(prefName);
+    yield front.setBoolPref(prefName, !current);
+
+    this._updateNoautohideButton();
+  }),
+
+  _updateNoautohideButton: Task.async(function*() {
+    let pf = yield this.getPreferenceFront();
+    let c = yield pf.getBoolPref("ui.menu.disable_autohide");
+    console.log("brian", pf, c);
+    if (!this.target.root) {
+      return;
+    }
+    let prefName = "ui.menu.disable_autohide";
+    let front = yield this._preferenceFront;
+    let current = yield front.getBoolPref(prefName);
+    let menu = this.doc.getElementById("command-button-noautohide");
+    if (current) {
+      menu.setAttribute("checked", "true");
+    } else {
+      menu.removeAttribute("checked");
+    }
+  }),
+
   _listFrames: function(event) {
     if (!this._target.activeTab || !this._target.activeTab.traits.frames) {
       // We are not targetting a regular TabActor
       // it can be either an addon or browser toolbox actor
       return promise.resolve();
     }
     let packet = {
       to: this._target.form.actor,
diff --git a/devtools/client/framework/toolbox.xul b/devtools/client/framework/toolbox.xul
--- a/devtools/client/framework/toolbox.xul
+++ b/devtools/client/framework/toolbox.xul
@@ -121,16 +121,20 @@
       <hbox id="toolbox-buttons" pack="end">
         <toolbarbutton id="command-button-frames"
                        class="command-button command-button-invertable devtools-toolbarbutton"
                        tooltiptext="&toolboxFramesTooltip;"
                        type="menu"
                        hidden="true">
           <menupopup position="bottomright topright"></menupopup>
         </toolbarbutton>
+        <toolbarbutton id="command-button-noautohide"
+                       class="command-button command-button-invertable"
+                       tooltiptext="&toolboxNoAutoHideTooltip;"
+                       hidden="true" />
       </hbox>
       <vbox id="toolbox-controls-separator" class="devtools-separator"/>
       <hbox id="toolbox-option-container"/>
       <hbox id="toolbox-controls">
         <hbox id="toolbox-dock-buttons"/>
         <toolbarbutton id="toolbox-close"
                        class="devtools-closebutton"
                        tooltiptext="&toolboxCloseButton.tooltip;"/>
diff --git a/devtools/client/jar.mn b/devtools/client/jar.mn
--- a/devtools/client/jar.mn
+++ b/devtools/client/jar.mn
@@ -186,16 +186,17 @@ devtools.jar:
     skin/images/command-pick.png (themes/images/command-pick.png)
     skin/images/command-pick@2x.png (themes/images/command-pick@2x.png)
     skin/images/command-frames.png (themes/images/command-frames.png)
     skin/images/command-frames@2x.png (themes/images/command-frames@2x.png)
     skin/images/command-console.png (themes/images/command-console.png)
     skin/images/command-console@2x.png (themes/images/command-console@2x.png)
     skin/images/command-eyedropper.png (themes/images/command-eyedropper.png)
     skin/images/command-eyedropper@2x.png (themes/images/command-eyedropper@2x.png)
+    skin/images/command-noautohide.svg (themes/images/command-noautohide.svg)
     skin/images/command-rulers.png (themes/images/command-rulers.png)
     skin/images/command-rulers@2x.png (themes/images/command-rulers@2x.png)
     skin/images/command-measure.png (themes/images/command-measure.png)
     skin/images/command-measure@2x.png (themes/images/command-measure@2x.png)
     skin/markup.css (themes/markup.css)
     skin/images/editor-error.png (themes/images/editor-error.png)
     skin/images/editor-breakpoint.png (themes/images/editor-breakpoint.png)
     skin/images/editor-breakpoint@2x.png (themes/images/editor-breakpoint@2x.png)
diff --git a/devtools/client/locales/en-US/toolbox.dtd b/devtools/client/locales/en-US/toolbox.dtd
--- a/devtools/client/locales/en-US/toolbox.dtd
+++ b/devtools/client/locales/en-US/toolbox.dtd
@@ -36,16 +36,22 @@ values from browser.dtd.  -->
 <!ENTITY toolboxToggleMinimize.key     "U">
 
 <!ENTITY toolboxToggle.key             "d">
 <!-- LOCALIZATION NOTE (toolboxFramesButton): This is the label for
   -  the iframes menu list that appears only when the document has some.
   -  It allows you to switch the context of the whole toolbox. -->
 <!ENTITY toolboxFramesTooltip          "Select an iframe as the currently targeted document">
 
+<!-- LOCALIZATION NOTE (toolboxNoAutoHideButton): This is the label for
+  -  the button to force the popups/panels to stay visible on blue.
+  -  This is only visible in the browser toolbox as it is meant for
+  -  addon developers and Firefox contributors. -->
+<!ENTITY toolboxNoAutoHideTooltip      "Disable popup auto hide">
+
 <!-- LOCALIZATION NOTE (browserToolboxErrorMessage): This is the label
   -  shown next to error details when the Browser Toolbox is unable to open. -->
 <!ENTITY browserToolboxErrorMessage          "Error opening Browser Toolbox:">
 
 <!-- LOCALIZATION NOTE (options.context.advancedSettings): This is the label for
   -  the heading of the advanced settings group in the options panel. -->
 <!ENTITY options.context.advancedSettings "Advanced settings">
 
diff --git a/devtools/client/preferences/devtools.js b/devtools/client/preferences/devtools.js
--- a/devtools/client/preferences/devtools.js
+++ b/devtools/client/preferences/devtools.js
@@ -43,16 +43,17 @@ pref("devtools.command-button-splitconso
 pref("devtools.command-button-paintflashing.enabled", false);
 pref("devtools.command-button-tilt.enabled", false);
 pref("devtools.command-button-scratchpad.enabled", false);
 pref("devtools.command-button-responsive.enabled", true);
 pref("devtools.command-button-eyedropper.enabled", false);
 pref("devtools.command-button-screenshot.enabled", false);
 pref("devtools.command-button-rulers.enabled", false);
 pref("devtools.command-button-measure.enabled", false);
+pref("devtools.command-button-noautohide.enabled", false);
 
 // Inspector preferences
 // Enable the Inspector
 pref("devtools.inspector.enabled", true);
 // What was the last active sidebar in the inspector
 pref("devtools.inspector.activeSidebar", "ruleview");
 pref("devtools.inspector.remote", false);
 // Collapse pseudo-elements by default in the rule-view
diff --git a/devtools/client/themes/images/command-noautohide.svg b/devtools/client/themes/images/command-noautohide.svg
new file mode 100755
--- /dev/null
+++ b/devtools/client/themes/images/command-noautohide.svg
@@ -0,0 +1,8 @@
+<!-- This Source Code Form is subject to the terms of the Mozilla Public
+   - License, v. 2.0. If a copy of the MPL was not distributed with this
+   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
+<svg width="16" height="16" viewBox="0 0 30 29" xmlns="http://www.w3.org/2000/svg" fill="whitesmoke">
+  <g fill-rule="evenodd">
+    <path d="M3 1v11c0-1.104-.896-2-2-2h11c-1.104 0-2 .896-2 2V1c0 1.104.896 2 2 2H1c1.104 0 2-.896 2-2zM0 1c0-.553.447-1 1-1h11c.553 0 1 .447 1 1v11c0 .553-.447 1-1 1H1c-.553 0-1-.447-1-1V1zM20 1v11c0-1.104-.896-2-2-2h11c-1.104 0-2 .896-2 2V1c0 1.104.896 2 2 2H18c1.104 0 2-.896 2-2zm-3 0c0-.553.447-1 1-1h11c.553 0 1 .447 1 1v11c0 .553-.447 1-1 1H18c-.553 0-1-.447-1-1V1zM20 17v11c0-1.104-.896-2-2-2h11c-1.104 0-2 .896-2 2V17c0 1.104.896 2 2 2H18c1.104 0 2-.896 2-2zm-3 0c0-.553.447-1 1-1h11c.553 0 1 .447 1 1v11c0 .553-.447 1-1 1H18c-.553 0-1-.447-1-1V17zM3 17v11c0-1.104-.896-2-2-2h11c-1.104 0-2 .896-2 2V17c0 1.104.896 2 2 2H1c1.104 0 2-.896 2-2zm-3 0c0-.553.447-1 1-1h11c.553 0 1 .447 1 1v11c0 .553-.447 1-1 1H1c-.553 0-1-.447-1-1V17z"/>
+  </g>
+</svg>
\ No newline at end of file
diff --git a/devtools/client/themes/toolbars.css b/devtools/client/themes/toolbars.css
--- a/devtools/client/themes/toolbars.css
+++ b/devtools/client/themes/toolbars.css
@@ -739,16 +739,20 @@
 #command-button-frames > image {
   background-image: url("chrome://devtools/skin/images/command-frames.png");
 }
 
 #command-button-splitconsole > image {
   background-image: url("chrome://devtools/skin/images/command-console.png");
 }
 
+#command-button-noautohide > image {
+  background-image: url("chrome://devtools/skin/images/command-noautohide.svg");
+}
+
 #command-button-eyedropper > image {
   background-image: url("chrome://devtools/skin/images/command-eyedropper.png");
 }
 
 #command-button-rulers > image {
   background-image: url("chrome://devtools/skin/images/command-rulers.png");
 }
 
