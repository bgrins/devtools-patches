# HG changeset patch
# User Oriol <oriol-bugzilla@hotmail.com>
# Parent  df9beb781895fcd0493c21e95ad313e0044515ec
Prevent the console from searching safe getters in proxy objects.

diff --git a/devtools/client/debugger/test/mochitest/browser_dbg_variables-view-07.js b/devtools/client/debugger/test/mochitest/browser_dbg_variables-view-07.js
--- a/devtools/client/debugger/test/mochitest/browser_dbg_variables-view-07.js
+++ b/devtools/client/debugger/test/mochitest/browser_dbg_variables-view-07.js
@@ -11,59 +11,111 @@ const TAB_URL = EXAMPLE_URL + "doc_proxy
 
 var test = Task.async(function* () {
   let options = {
     source: TAB_URL,
     line: 1
   };
   var dbg = initDebugger(TAB_URL, options);
   const [tab,, panel] = yield dbg;
-  const debuggerLineNumber = 34;
-  const scopes = waitForCaretAndScopes(panel, debuggerLineNumber);
-  callInTab(tab, "doPause");
-  yield scopes;
 
-  const variables = panel.panelWin.DebuggerView.Variables;
-  ok(variables, "Should get the variables view.");
+  // Test 1
+  yield (function* () {
+    const debuggerLineNumber = 15;
+    const scopes = waitForCaretAndScopes(panel, debuggerLineNumber);
+    callInTab(tab, "test1");
+    yield scopes;
+
+    const variables = panel.panelWin.DebuggerView.Variables;
+    ok(variables, "Should get the variables view.");
 
-  const scope = [...variables][0];
-  ok(scope, "Should get the current function's scope.");
+    const scope = [...variables][0];
+    ok(scope, "Should get the current function's scope.");
 
-  let proxy;
-  for (let [name, value] of scope) {
-    if (name === "proxy") {
-      proxy = value;
+    let proxy;
+    for (let [name, value] of scope) {
+      if (name === "proxy") {
+        proxy = value;
+      }
     }
-  }
-  ok(proxy, "Should have found the proxy variable");
+    ok(proxy, "Should have found the proxy variable");
 
-  info("Expanding variable 'proxy'");
-  let expanded = once(variables, "fetched");
-  proxy.expand();
-  yield expanded;
-
-  let foundTarget = false;
-  let foundHandler = false;
-  for (let [property, data] of proxy) {
-    info("Expanding property '" + property + "'");
+    info("Expanding variable 'proxy'");
     let expanded = once(variables, "fetched");
-    data.expand();
+    proxy.expand();
     yield expanded;
-    if (property === "<target>") {
-      for(let [subprop, subdata] of data) if(subprop === "name") {
-        is(subdata.value, "target", "The value of '<target>' should be the [[ProxyTarget]]");
-        foundTarget = true;
-      }
-    } else {
-      is(property, "<handler>", "There shouldn't be properties other than <target> and <handler>");
-      for (let [subprop, subdata] of data) {
-        if(subprop === "name") {
-          is(subdata.value, "handler", "The value of '<handler>' should be the [[ProxyHandler]]");
-          foundHandler = true;
+
+    let foundTarget = false;
+    let foundHandler = false;
+    for (let [property, data] of proxy) {
+      info("Expanding property '" + property + "'");
+      let expanded = once(variables, "fetched");
+      data.expand();
+      yield expanded;
+      if (property === "<target>") {
+        for (let [subprop, subdata] of data) if (subprop === "name") {
+          is(subdata.value, "target", "The value of '<target>' should be the [[ProxyTarget]]");
+          foundTarget = true;
+        }
+      } else {
+        is(property, "<handler>", "There shouldn't be properties other than <target> and <handler>");
+        for (let [subprop, subdata] of data) {
+          if (subprop === "name") {
+            is(subdata.value, "handler", "The value of '<handler>' should be the [[ProxyHandler]]");
+            foundHandler = true;
+          }
         }
       }
     }
-  }
-  ok(foundTarget, "Should have found the '<target>' property containing the [[ProxyTarget]]");
-  ok(foundHandler, "Should have found the '<handler>' property containing the [[ProxyHandler]]");
+    ok(foundTarget, "Should have found the '<target>' property containing the [[ProxyTarget]]");
+    ok(foundHandler, "Should have found the '<handler>' property containing the [[ProxyHandler]]");
+
+    yield doResume(panel);
+  })();
+
+  // Test 2
+  yield (function* () {
+    const debuggerLineNumber = 25;
+    const scopes = waitForCaretAndScopes(panel, debuggerLineNumber);
+    callInTab(tab, "test2");
+    yield scopes;
+
+    const variables = panel.panelWin.DebuggerView.Variables;
+    ok(variables, "Should get the variables view.");
+
+    const scope = [...variables][0];
+    ok(scope, "Should get the current function's scope.");
 
-  resumeDebuggerThenCloseAndFinish(panel);
+    let proxy;
+    let inheritsProxy;
+    for (let [name, value] of scope) {
+      if (name === "proxy") {
+        proxy = value;
+      } else if (name === "inheritsProxy") {
+        inheritsProxy = value;
+      }
+    }
+    ok(proxy, "Should have found the proxy variable");
+    ok(inheritsProxy, "Should have found the inheritsProxy variable");
+
+    info("Expanding variable 'proxy'");
+    let expanded = once(variables, "fetched");
+    proxy.expand();
+    yield expanded;
+
+    yield evalInTab(tab, "trapDidRun").then(function(trapDidRun) {
+      is(trapDidRun, false, "Inspecting proxy should not run any trap.");
+    });
+
+    info("Expanding variable 'inheritsProxy'");
+    expanded = once(variables, "fetched");
+    inheritsProxy.expand();
+    yield expanded;
+
+    yield evalInTab(tab, "trapDidRun").then(function(trapDidRun) {
+      is(trapDidRun, false, "Inspecting object inheriting from proxy should not run any trap.");
+    });
+
+    yield doResume(panel);
+  })();
+
+  closeDebuggerAndFinish(panel);
 });
diff --git a/devtools/client/debugger/test/mochitest/doc_proxy.html b/devtools/client/debugger/test/mochitest/doc_proxy.html
--- a/devtools/client/debugger/test/mochitest/doc_proxy.html
+++ b/devtools/client/debugger/test/mochitest/doc_proxy.html
@@ -5,35 +5,26 @@
 <html>
   <head>
     <meta charset="utf-8"/>
     <title>Debugger + Proxy test page</title>
   </head>
 
   <body>
     <script>
-    window.target = {name: "target"};
-    window.handler = { /* Debugging a proxy shouldn't run any trap */
-      name: "handler",
-      getPrototypeOf() { throw new Error("proxy getPrototypeOf trap was called"); },
-      setPrototypeOf() { throw new Error("proxy setPrototypeOf trap was called"); },
-      isExtensible() { throw new Error("proxy isExtensible trap was called"); },
-      preventExtensions() { throw new Error("proxy preventExtensions trap was called"); },
-      getOwnPropertyDescriptor() { throw new Error("proxy getOwnPropertyDescriptor trap was called"); },
-      defineProperty() { throw new Error("proxy defineProperty trap was called"); },
-      has() { throw new Error("proxy has trap was called"); },
-      get() { throw new Error("proxy get trap was called"); },
-      set() { throw new Error("proxy set trap was called"); },
-      deleteProperty() { throw new Error("proxy deleteProperty trap was called"); },
-      ownKeys() { throw new Error("proxy ownKeys trap was called"); },
-      apply() { throw new Error("proxy apply trap was called"); },
-      construct() { throw new Error("proxy construct trap was called"); }
+    window.test1 = function () {
+      var proxy = new Proxy({name: "target"}, {name: "handler"});
+      debugger;
     };
-    window.proxy = new Proxy(target, handler);
 
-    window.doPause = function () {
-      var proxy = window.proxy;
+    window.test2 = function () {
+      window.trapDidRun = false;
+      var proxy = new Proxy({}, new Proxy({}, {get: (_, trap) => {
+        window.trapDidRun = true;
+        throw new Error("proxy " + trap + " trap was called.");
+      }}));
+      var inheritsProxy = Object.create(proxy);
       debugger;
     };
     </script>
   </body>
 
 </html>
diff --git a/devtools/server/tests/unit/test_objectgrips-17.js b/devtools/server/tests/unit/test_objectgrips-17.js
new file mode 100644
--- /dev/null
+++ b/devtools/server/tests/unit/test_objectgrips-17.js
@@ -0,0 +1,95 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+/* eslint-disable no-shadow, max-nested-callbacks */
+
+"use strict";
+
+var gDebuggee;
+var gClient;
+var gThreadClient;
+var gCallback;
+
+function run_test() {
+  run_test_with_server(DebuggerServer, function () {
+    run_test_with_server(WorkerDebuggerServer, do_test_finished);
+  });
+  do_test_pending();
+}
+
+function addTestNullPrincipalGlobal(name, server = DebuggerServer) {
+  // System principal objects are considered safe even when not wrapped in Xray,
+  // and therefore proxy traps may run. So the test needs to use a null principal.
+  let global = Cu.Sandbox(null);
+  global.__name = name;
+  server.addTestGlobal(global);
+  return global;
+}
+
+async function run_test_with_server(server, callback) {
+  gCallback = callback;
+  initTestDebuggerServer(server);
+  gDebuggee = addTestNullPrincipalGlobal("test-grips", server);
+  gDebuggee.eval(function stopMe(arg1, arg2) {
+    debugger;
+  }.toString());
+
+  gClient = new DebuggerClient(server.connectPipe());
+  await gClient.connect();
+  const [,, threadClient] = await attachTestTabAndResume(gClient, "test-grips");
+  gThreadClient = threadClient;
+  test_proxy_grip();
+}
+
+async function test_proxy_grip() {
+  gThreadClient.addOneTimeListener("paused", async function (event, packet) {
+    let [proxyGrip, inheritsProxyGrip] = packet.frame.arguments;
+
+    // Check the grip of the proxy object.
+    check_proxy_grip(proxyGrip);
+
+    // Retrieve the properties of the object which inherits from a proxy,
+    // and check the grip of its prototype.
+    let objClient = gThreadClient.pauseGrip(inheritsProxyGrip);
+    let response = await objClient.getPrototypeAndProperties();
+    check_prototype_and_properties(response);
+
+    // Check that none of the above ran proxy traps.
+    let trapDidRun = gDebuggee.eval("trapDidRun");
+    strictEqual(trapDidRun, false, "No proxy trap did run.");
+
+    await gThreadClient.resume();
+    await gClient.close();
+    gCallback();
+  });
+
+  gDebuggee.eval(`{
+    var trapDidRun = false;
+    var proxy = new Proxy({}, new Proxy({}, {get: (_, trap) => {
+      trapDidRun = true;
+      throw new Error("proxy " + trap + " trap was called.");
+    }}));
+    var inheritsProxy = Object.create(proxy, {x:{value:1}});
+    stopMe(proxy, inheritsProxy);
+  }`);
+}
+
+function check_proxy_grip(grip) {
+  strictEqual(grip.class, "Proxy", "The grip has a Proxy class.");
+  ok(grip.proxyTarget, "There is a [[ProxyTarget]] grip.");
+  ok(grip.proxyHandler, "There is a [[ProxyHandler]] grip.");
+
+  const {preview} = grip;
+  strictEqual(preview.ownPropertiesLength, 2, "The preview has 2 properties.");
+  let target = preview.ownProperties["<target>"].value;
+  strictEqual(target, grip.proxyTarget, "<target> contains the [[ProxyTarget]].");
+  let handler = preview.ownProperties["<handler>"].value;
+  strictEqual(handler, grip.proxyHandler, "<handler> contains the [[ProxyHandler]].");
+}
+
+function check_prototype_and_properties(response) {
+  let ownPropertiesLength = Reflect.ownKeys(response.ownProperties).length;
+  strictEqual(ownPropertiesLength, 1, "1 own property was retrieved.");
+  strictEqual(response.ownProperties.x.value, 1, "The property has the right value.");
+  check_proxy_grip(response.prototype);
+}
+
diff --git a/devtools/server/tests/unit/xpcshell.ini b/devtools/server/tests/unit/xpcshell.ini
--- a/devtools/server/tests/unit/xpcshell.ini
+++ b/devtools/server/tests/unit/xpcshell.ini
@@ -167,16 +167,17 @@ reason = only ran on B2G
 [test_objectgrips-09.js]
 [test_objectgrips-10.js]
 [test_objectgrips-11.js]
 [test_objectgrips-12.js]
 [test_objectgrips-13.js]
 [test_objectgrips-14.js]
 [test_objectgrips-15.js]
 [test_objectgrips-16.js]
+[test_objectgrips-17.js]
 [test_promise_state-01.js]
 [test_promise_state-02.js]
 [test_promise_state-03.js]
 [test_interrupt.js]
 [test_stepping-01.js]
 [test_stepping-02.js]
 [test_stepping-03.js]
 [test_stepping-04.js]
