diff --git a/devtools/server/actors/webconsole.js b/devtools/server/actors/webconsole.js
--- a/devtools/server/actors/webconsole.js
+++ b/devtools/server/actors/webconsole.js
@@ -1213,9 +1213,9 @@
         environment,
         inputValue: request.text,
         cursor: request.cursor,
-        invokeUnsafeGetter: false,
         webconsoleActor: this,
         selectedNodeActor: request.selectedNodeActor,
+        authorizedEvaluations: request.authorizedEvaluations,
       });
 
       if (!hadDebuggee && dbgObject) {
@@ -1229,6 +1229,14 @@
         };
       }
 
+      if (result && result.isUnsafeGetter === true) {
+        return {
+          from: this.actorID,
+          isUnsafeGetter: true,
+          getterPath: result.getterPath,
+        };
+      }
+
       matches = result.matches || new Set();
       matchProp = result.matchProp;
       isElementAccess = result.isElementAccess;
diff --git a/devtools/shared/webconsole/client.js b/devtools/shared/webconsole/client.js
--- a/devtools/shared/webconsole/client.js
+++ b/devtools/shared/webconsole/client.js
@@ -372,10 +372,20 @@
    * @param {String} frameActor
    *        The id of the frame actor that made the call.
    * @param {String} selectedNodeActor: Actor id of the selected node in the inspector.
+   * @param {Array} authorizedEvaluations
+   *        Array of the properties access which can be executed by the engine.
+   *        Example: [["x", "myGetter"], ["x", "myGetter", "y", "anotherGetter"]] to
+   *        retrieve properties of `x.myGetter.` and `x.myGetter.y.anotherGetter`.
    * @return request
    *         Request object that implements both Promise and EventEmitter interfaces
    */
-  autocomplete: function(string, cursor, frameActor, selectedNodeActor) {
+  autocomplete: function(
+    string,
+    cursor,
+    frameActor,
+    selectedNodeActor,
+    authorizedEvaluations
+  ) {
     const packet = {
       to: this._actor,
       type: "autocomplete",
@@ -383,6 +393,7 @@
       cursor,
       frameActor,
       selectedNodeActor,
+      authorizedEvaluations,
     };
     return this._client.request(packet);
   },
diff --git a/devtools/shared/webconsole/js-property-provider.js b/devtools/shared/webconsole/js-property-provider.js
--- a/devtools/shared/webconsole/js-property-provider.js
+++ b/devtools/shared/webconsole/js-property-provider.js
@@ -215,9 +215,9 @@
  *        Optional offset in the input where the cursor is located. If this is
  *        omitted then the cursor is assumed to be at the end of the input
  *        value.
- * - {Boolean} invokeUnsafeGetter (defaults to false).
- *        Optional boolean to indicate if the function should execute unsafe getter
- *        in order to retrieve its result's properties.
+ * - {Array} authorizedEvaluations (defaults to []).
+ *        Optional array containing all the different properties access that the engine
+ *        can execute in order to retrieve its result's properties.
  *        ⚠️ This should be set to true *ONLY* on user action as it may cause side-effects
  *        in the content page ⚠️
  * - {WebconsoleActor} webconsoleActor
@@ -231,7 +231,8 @@
  *
  *          {
  *            isUnsafeGetter: true,
- *            getterName: {String} The name of the unsafe getter
+ *            getterPath: {Array<String>} An array of the property chain leading to the
+ *                        getter. Example: ["x", "myGetter"]
  *          }
  *
  *          If no completion valued could be computed, and the input is not an unsafe
@@ -251,7 +252,7 @@
   environment,
   inputValue,
   cursor,
-  invokeUnsafeGetter = false,
+  authorizedEvaluations = [],
   webconsoleActor,
   selectedNodeActor,
 }) {
@@ -452,18 +453,16 @@
       return null;
     }
 
-    if (!invokeUnsafeGetter && DevToolsUtils.isUnsafeGetter(obj, prop)) {
-      // If the unsafe getter is not the last property access of the input, bail out as
-      // things might get complex.
-      if (index !== properties.length - 1) {
-        return null;
-      }
+    const propPath = [firstProp].concat(properties.slice(0, index + 1));
+    const authorized = authorizedEvaluations.some(
+      x => JSON.stringify(x) === JSON.stringify(propPath));
 
+    if (!authorized && DevToolsUtils.isUnsafeGetter(obj, prop)) {
       // If we try to access an unsafe getter, return its name so we can consume that
       // on the frontend.
       return {
         isUnsafeGetter: true,
-        getterName: prop,
+        getterPath: propPath,
       };
     }
 
@@ -472,7 +471,7 @@
       // list[i][j]..[n]. Traverse the array to get the actual element.
       obj = getArrayMemberProperty(obj, null, prop);
     } else {
-      obj = DevToolsUtils.getProperty(obj, prop, invokeUnsafeGetter);
+      obj = DevToolsUtils.getProperty(obj, prop, authorized);
     }
 
     if (!isObjectUsable(obj)) {
diff --git a/devtools/shared/webconsole/test/unit/test_js_property_provider.js b/devtools/shared/webconsole/test/unit/test_js_property_provider.js
--- a/devtools/shared/webconsole/test/unit/test_js_property_provider.js
+++ b/devtools/shared/webconsole/test/unit/test_js_property_provider.js
@@ -248,47 +248,112 @@
   const gen2NextResult = Cu.evalInSandbox("gen2.next().value", sandbox);
   Assert.equal(gen2Result + 1, gen2NextResult);
 
-  info("Test that getters are not executed if invokeUnsafeGetter is undefined");
+  info("Test that getters are not executed if authorizedEvaluations is undefined");
   results = propertyProvider("testGetters.x.");
-  Assert.deepEqual(results, {isUnsafeGetter: true, getterName: "x"});
+  Assert.deepEqual(results, {isUnsafeGetter: true, getterPath: ["testGetters", "x"]});
 
   results = propertyProvider("testGetters.x[");
-  Assert.deepEqual(results, {isUnsafeGetter: true, getterName: "x"});
+  Assert.deepEqual(results, {isUnsafeGetter: true, getterPath: ["testGetters", "x"]});
 
   results = propertyProvider("testGetters.x.hell");
-  Assert.deepEqual(results, {isUnsafeGetter: true, getterName: "x"});
+  Assert.deepEqual(results, {isUnsafeGetter: true, getterPath: ["testGetters", "x"]});
 
   results = propertyProvider("testGetters.x['hell");
-  Assert.deepEqual(results, {isUnsafeGetter: true, getterName: "x"});
+  Assert.deepEqual(results, {isUnsafeGetter: true, getterPath: ["testGetters", "x"]});
+
+  info("Test that getters are not executed if authorizedEvaluations does not match");
+  results = propertyProvider("testGetters.x.", {authorizedEvaluations: []});
+  Assert.deepEqual(results, {isUnsafeGetter: true, getterPath: ["testGetters", "x"]});
+
+  results = propertyProvider("testGetters.x.", {
+    authorizedEvaluations: [["testGetters"]],
+  });
+  Assert.deepEqual(results, {isUnsafeGetter: true, getterPath: ["testGetters", "x"]});
 
-  info("Test that deep getter property access does not return intermediate getters");
+  results = propertyProvider("testGetters.x.", {
+    authorizedEvaluations: [["testGtrs", "x"]],
+  });
+  Assert.deepEqual(results, {isUnsafeGetter: true, getterPath: ["testGetters", "x"]});
+
+  results = propertyProvider("testGetters.x.", {
+    authorizedEvaluations: [["x"]],
+  });
+  Assert.deepEqual(results, {isUnsafeGetter: true, getterPath: ["testGetters", "x"]});
+
+  info("Test that deep getter property access returns intermediate getters");
   results = propertyProvider("testGetters.y.y.");
-  Assert.ok(results === null);
+  Assert.deepEqual(results, {isUnsafeGetter: true, getterPath: ["testGetters", "y"]});
 
   results = propertyProvider("testGetters['y'].y.");
-  Assert.ok(results === null);
+  Assert.deepEqual(results, {isUnsafeGetter: true, getterPath: ["testGetters", "y"]});
 
   results = propertyProvider("testGetters['y']['y'].");
-  Assert.ok(results === null);
+  Assert.deepEqual(results, {isUnsafeGetter: true, getterPath: ["testGetters", "y"]});
 
   results = propertyProvider("testGetters.y['y'].");
-  Assert.ok(results === null);
+  Assert.deepEqual(results, {isUnsafeGetter: true, getterPath: ["testGetters", "y"]});
+
+  info("Test that deep getter property access invoke intermediate getters");
+  results = propertyProvider("testGetters.y.y.", {
+    authorizedEvaluations: [["testGetters", "y"]],
+  });
+  Assert.deepEqual(results,
+    {isUnsafeGetter: true, getterPath: ["testGetters", "y", "y"]});
+
+  results = propertyProvider("testGetters['y'].y.", {
+    authorizedEvaluations: [["testGetters", "y"]],
+  });
+  Assert.deepEqual(results,
+    {isUnsafeGetter: true, getterPath: ["testGetters", "y", "y"]});
 
-  info("Test that getters are executed if invokeUnsafeGetter is true");
-  results = propertyProvider("testGetters.x.", {invokeUnsafeGetter: true});
+  results = propertyProvider("testGetters['y']['y'].", {
+    authorizedEvaluations: [["testGetters", "y"]],
+  });
+  Assert.deepEqual(results,
+    {isUnsafeGetter: true, getterPath: ["testGetters", "y", "y"]});
+
+  results = propertyProvider("testGetters.y['y'].", {
+    authorizedEvaluations: [["testGetters", "y"]],
+  });
+  Assert.deepEqual(
+    results, {isUnsafeGetter: true, getterPath: ["testGetters", "y", "y"]});
+
+  info("Test that getters are executed if matching an authorizedEvaluation element");
+  results = propertyProvider("testGetters.x.", {
+    authorizedEvaluations: [["testGetters", "x"]],
+  });
   test_has_exact_results(results, ["hello", "world"]);
   Assert.ok(Object.keys(results).includes("isUnsafeGetter") === false);
-  Assert.ok(Object.keys(results).includes("getterName") === false);
+  Assert.ok(Object.keys(results).includes("getterPath") === false);
+
+  results = propertyProvider("testGetters.x.", {
+    authorizedEvaluations: [["testGetters", "x"], ["y"]],
+  });
+  test_has_exact_results(results, ["hello", "world"]);
+  Assert.ok(Object.keys(results).includes("isUnsafeGetter") === false);
+  Assert.ok(Object.keys(results).includes("getterPath") === false);
 
   info("Test that executing getters filters with provided string");
-  results = propertyProvider("testGetters.x.hell", {invokeUnsafeGetter: true});
+  results = propertyProvider("testGetters.x.hell", {
+    authorizedEvaluations: [["testGetters", "x"]],
+  });
   test_has_exact_results(results, ["hello"]);
 
-  results = propertyProvider("testGetters.x['hell", {invokeUnsafeGetter: true});
+  results = propertyProvider("testGetters.x['hell", {
+    authorizedEvaluations: [["testGetters", "x"]],
+  });
   test_has_exact_results(results, ["'hello'"]);
 
-  info("Test that children getters are executed if invokeUnsafeGetter is true");
-  results = propertyProvider("testGetters.y.y.", {invokeUnsafeGetter: true});
+  info("Test children getters are not executed if not included in authorizedEvaluation");
+  results = propertyProvider("testGetters.y.y.", {
+    authorizedEvaluations: [["testGetters", "y", "y"]],
+  });
+  Assert.deepEqual(results, {isUnsafeGetter: true, getterPath: ["testGetters", "y"]});
+
+  info("Test children getters are executed if matching an authorizedEvaluation element");
+  results = propertyProvider("testGetters.y.y.", {
+    authorizedEvaluations: [["testGetters", "y"], ["testGetters", "y", "y"]],
+  });
   test_has_result(results, "trim");
 
   info("Test with number literals");

