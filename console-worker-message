# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  efa3b654aa77bcb9b3dd7fc5a52efb6b5afc34d6
Bug 1259603 - Use ConsoleEvents for cached messages and observing messages when webconsole actor is running

diff --git a/devtools/client/webconsole/webconsole.js b/devtools/client/webconsole/webconsole.js
--- a/devtools/client/webconsole/webconsole.js
+++ b/devtools/client/webconsole/webconsole.js
@@ -3174,28 +3174,24 @@ WebConsoleConnectionProxy.prototype = {
       this._connectTimer.cancel();
       this._connectTimer = null;
     }, () => {
       this._connectTimer = null;
     });
 
     let client = this.client = this.target.client;
 
-    if (this.target.isWorkerTarget) {
-      // XXXworkers: Not Console API yet inside of workers (Bug 1209353).
-    } else {
-      client.addListener("logMessage", this._onLogMessage);
-      client.addListener("pageError", this._onPageError);
-      client.addListener("consoleAPICall", this._onConsoleAPICall);
-      client.addListener("fileActivity", this._onFileActivity);
-      client.addListener("reflowActivity", this._onReflowActivity);
-      client.addListener("serverLogCall", this._onServerLogCall);
-      client.addListener("lastPrivateContextExited",
-                         this._onLastPrivateContextExited);
-    }
+    client.addListener("logMessage", this._onLogMessage);
+    client.addListener("pageError", this._onPageError);
+    client.addListener("consoleAPICall", this._onConsoleAPICall);
+    client.addListener("fileActivity", this._onFileActivity);
+    client.addListener("reflowActivity", this._onReflowActivity);
+    client.addListener("serverLogCall", this._onServerLogCall);
+    client.addListener("lastPrivateContextExited",
+                       this._onLastPrivateContextExited);
     this.target.on("will-navigate", this._onTabNavigated);
     this.target.on("navigate", this._onTabNavigated);
 
     this._consoleActor = this.target.form.consoleActor;
     if (this.target.isTabActor) {
       let tab = this.target.form;
       this.webConsoleFrame.onLocationChange(tab.url, tab.title);
     }
diff --git a/devtools/server/actors/utils/webconsole-worker-utils.js b/devtools/server/actors/utils/webconsole-worker-utils.js
--- a/devtools/server/actors/utils/webconsole-worker-utils.js
+++ b/devtools/server/actors/utils/webconsole-worker-utils.js
@@ -7,14 +7,102 @@
 "use strict";
 
 // XXXworkers This file is loaded on the server side for worker debugging.
 // Since the server is running in the worker thread, it doesn't
 // have access to Services / Components.  This functionality
 // is stubbed out to prevent errors, and will need to implemented
 // for Bug 1209353.
 
-exports.Utils = { L10n: function () {} };
-exports.ConsoleServiceListener = function () {};
-exports.ConsoleAPIListener = function () {};
+const CONSOLE_WORKER_IDS = exports.CONSOLE_WORKER_IDS = [];
+
+// XXX: Share utils in a single file between worker and non and have custom
+// files for listeners
+exports.Utils = {
+  L10n: function () {},
+  cloneObject: function(object, recursive, filter) {
+    if (typeof object != "object") {
+      return object;
+    }
+
+    let temp;
+
+    if (Array.isArray(object)) {
+      temp = [];
+      Array.forEach(object, function(value, index) {
+        if (!filter || filter(index, value, object)) {
+          temp.push(recursive ? WebConsoleUtils.cloneObject(value) : value);
+        }
+      });
+    } else {
+      temp = {};
+      for (let key in object) {
+        let value = object[key];
+        if (object.hasOwnProperty(key) &&
+            (!filter || filter(key, value, object))) {
+          temp[key] = recursive ? WebConsoleUtils.cloneObject(value) : value;
+        }
+      }
+    }
+
+    return temp;
+  },
+  getWorkerType: function(message) {
+    let id = message ? message.innerID : null;
+    return CONSOLE_WORKER_IDS[CONSOLE_WORKER_IDS.indexOf(id)] || null;
+  },
+ };
+
+function ConsoleServiceListener(window, listener) {
+  this.window = window;
+  this.listener = listener;
+}
+ConsoleServiceListener.prototype =
+{
+  init: function () {
+    dump("\n\n\nConsoleServiceListener.init\n\n\n");
+  },
+  destroy: function() {
+    dump("\n\n\nConsoleServiceListener.destroy\n\n\n");
+  },
+  observe: function(message) {
+    dump("\n\n\nConsoleServiceListener.observe\n\n\n");
+  },
+  getCachedMessages: function() {
+    dump("\n\n\nConsoleServiceListener.getCachedMessages\n\n\n");
+    return [];
+  }
+};
+
+function ConsoleAPIListener(window, owner, consoleID) {
+  this.window = window;
+  this.owner = owner;
+  this.consoleID = consoleID;
+}
+
+ConsoleAPIListener.prototype =
+{
+  init: function () {
+    dump("\n\n\nConsoleAPIListener.init\n\n\n");
+    this.observe = this.observe.bind(this);
+    setConsoleEventHandler(this.observe);
+  },
+  destroy: function () {
+    dump("\n\n\nConsoleAPIListener.destroy\n\n\n");
+    // XXX: How do we clear out the console event handler?
+    setConsoleEventHandler(() => {})
+    // setConsoleEventHandler(null);
+  },
+  observe: function(message) {
+    dump("\n\n\nConsoleAPIListener.observe\n\n\n");
+    this.owner.onConsoleAPICall(message.wrappedJSObject);
+  },
+  getCachedMessages: function() {
+    dump("\n\n\nConsoleAPIListener.getCachedMessages\n\n\n");
+    return retrieveConsoleEvents();
+  }
+};
+
+exports.ConsoleAPIListener = ConsoleAPIListener;
+exports.ConsoleServiceListener = ConsoleServiceListener;
+
 exports.addWebConsoleCommands = function () {};
-exports.ConsoleReflowListener = function () {};
-exports.CONSOLE_WORKER_IDS = [];
+exports.ConsoleReflowListener = function() {};
diff --git a/devtools/server/actors/webconsole.js b/devtools/server/actors/webconsole.js
--- a/devtools/server/actors/webconsole.js
+++ b/devtools/server/actors/webconsole.js
@@ -560,21 +560,16 @@ WebConsoleActor.prototype =
    *
    * @param object aRequest
    *        The JSON request object received from the Web Console client.
    * @return object
    *         The response object which holds the startedListeners array.
    */
   onStartListeners: function WCA_onStartListeners(aRequest)
   {
-    // XXXworkers: Not handling the Console API yet for workers (Bug 1209353).
-    if (isWorker) {
-      aRequest.listeners = [];
-    }
-
     let startedListeners = [];
     let window = !this.parentActor.isRootActor ? this.window : null;
     let appId = null;
     let messageManager = null;
 
     if (this._parentIsContentActor) {
       appId = this.parentActor.docShell.appId;
       messageManager = this.parentActor.messageManager;
@@ -598,16 +593,20 @@ WebConsoleActor.prototype =
             this.consoleAPIListener =
               new ConsoleAPIListener(window, this,
                                      this.parentActor.consoleAPIListenerOptions);
             this.consoleAPIListener.init();
           }
           startedListeners.push(listener);
           break;
         case "NetworkActivity":
+          // Workers don't support this message type
+          if (isWorker) {
+            break;
+          }
           if (!this.networkMonitor) {
             // Create a StackTraceCollector that's going to be shared both by the
             // NetworkMonitorChild (getting messages about requests from parent) and
             // by the NetworkMonitor that directly watches service workers requests.
             this.stackTraceCollector = new StackTraceCollector({ window, appId });
             this.stackTraceCollector.init();
 
             let processBoundary = Services.appinfo.processType !=
@@ -625,34 +624,46 @@ WebConsoleActor.prototype =
             } else {
               this.networkMonitor = new NetworkMonitor({ window }, this);
               this.networkMonitor.init();
             }
           }
           startedListeners.push(listener);
           break;
         case "FileActivity":
+          // Workers don't support this message type
+          if (isWorker) {
+            break;
+          }
           if (this.window instanceof Ci.nsIDOMWindow) {
             if (!this.consoleProgressListener) {
               this.consoleProgressListener =
                 new ConsoleProgressListener(this.window, this);
             }
             this.consoleProgressListener.startMonitor(this.consoleProgressListener.
                                                       MONITOR_FILE_ACTIVITY);
             startedListeners.push(listener);
           }
           break;
         case "ReflowActivity":
+          // Workers don't support this message type
+          if (isWorker) {
+            break;
+          }
           if (!this.consoleReflowListener) {
             this.consoleReflowListener =
               new ConsoleReflowListener(this.window, this);
           }
           startedListeners.push(listener);
           break;
         case "ServerLogging":
+          // Workers don't support this message type
+          if (isWorker) {
+            break;
+          }
           if (!this.serverLoggingListener) {
             this.serverLoggingListener =
               new ServerLoggingListener(this.window, this);
           }
           startedListeners.push(listener);
           break;
       }
     }
diff --git a/devtools/server/worker.js b/devtools/server/worker.js
--- a/devtools/server/worker.js
+++ b/devtools/server/worker.js
@@ -75,16 +75,17 @@ this.addEventListener("message", functio
           return sources;
         },
 
         window: global
       };
 
       let threadActor = new ThreadActor(parent, global);
       pool.addActor(threadActor);
+    parent.threadActor = threadActor;
 
       let consoleActor = new WebConsoleActor(connection, parent);
       pool.addActor(consoleActor);
 
     // Step 5: Send a response packet to the parent to notify
     // it that a connection has been established.
       postMessage(JSON.stringify({
         type: "connected",
diff --git a/devtools/shared/webconsole/test/chrome.ini b/devtools/shared/webconsole/test/chrome.ini
--- a/devtools/shared/webconsole/test/chrome.ini
+++ b/devtools/shared/webconsole/test/chrome.ini
@@ -17,16 +17,17 @@ support-files =
 [test_cached_messages.html]
 [test_commands_other.html]
 [test_commands_registration.html]
 [test_consoleapi.html]
 [test_consoleapi_innerID.html]
 [test_console_serviceworker.html]
 [test_console_serviceworker_cached.html]
 [test_console_styling.html]
+[test_console_worker.html]
 [test_file_uri.html]
 [test_reflow.html]
 [test_jsterm.html]
 [test_jsterm_autocomplete.html]
 [test_jsterm_cd_iframe.html]
 [test_jsterm_last_result.html]
 [test_jsterm_queryselector.html]
 [test_network_get.html]
diff --git a/devtools/shared/webconsole/test/common.js b/devtools/shared/webconsole/test/common.js
--- a/devtools/shared/webconsole/test/common.js
+++ b/devtools/shared/webconsole/test/common.js
@@ -90,17 +90,17 @@ function _attachConsole(aListeners, aCal
           console.error("listTabs failed: " + aResponse.error + " " +
                         aResponse.message);
           aCallback(aState, aResponse);
           return;
         }
         let tab = aResponse.tabs[aResponse.selected];
         aState.dbgClient.attachTab(tab.actor, function (response, tabClient) {
           if (aAttachToWorker) {
-            let workerName = "console-test-worker.js#" + new Date().getTime();
+            let workerName = top.worker2 = "console-test-worker.js#" + new Date().getTime();
             var worker = new Worker(workerName);
             // Keep a strong reference to the Worker to avoid it being
             // GCd during the test (bug 1237492).
             aState._worker_ref = worker;
             worker.addEventListener("message", function listener() {
               worker.removeEventListener("message", listener);
               tabClient.listWorkers(function (response) {
                 let worker = response.workers.filter(w => w.url == workerName)[0];
@@ -112,16 +112,17 @@ function _attachConsole(aListeners, aCal
                 tabClient.attachWorker(worker.actor, function (response, workerClient) {
                   if (!workerClient || response.error) {
                     console.error("attachWorker failed. No worker client or " +
                                   " error: " + response.error);
                     return;
                   }
                   workerClient.attachThread({}, function (aResponse) {
                     aState.actor = workerClient.consoleActor;
+                    aState.worker = worker;
                     aState.dbgClient.attachConsole(workerClient.consoleActor, aListeners,
                                                    _onAttachConsole.bind(null, aState));
                   });
                 });
               });
             });
           } else {
             aState.actor = tab.consoleActor;
diff --git a/devtools/shared/webconsole/test/console-test-worker.js b/devtools/shared/webconsole/test/console-test-worker.js
--- a/devtools/shared/webconsole/test/console-test-worker.js
+++ b/devtools/shared/webconsole/test/console-test-worker.js
@@ -1,16 +1,22 @@
 "use strict";
 
+console.log("Log from worker init");
+
 function f() {
   var a = 1;
   var b = 2;
   var c = 3;
 }
 
 self.onmessage = function (event) {
+  console.log("Message received", event);
   if (event.data == "ping") {
     f();
     postMessage("pong");
   }
+  if (event.data == "log") {
+    console.log("Log was requested from worker")
+  }
 };
 
 postMessage("load");
diff --git a/devtools/shared/webconsole/test/test_console_worker.html b/devtools/shared/webconsole/test/test_console_worker.html
new file mode 100644
--- /dev/null
+++ b/devtools/shared/webconsole/test/test_console_worker.html
@@ -0,0 +1,91 @@
+<!DOCTYPE HTML>
+<html lang="en">
+<head>
+  <meta charset="utf8">
+  <title>Test for the Console API and Workers</title>
+  <script type="text/javascript" src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
+  <script type="text/javascript;version=1.8" src="common.js"></script>
+  <!-- Any copyright is dedicated to the Public Domain.
+     - http://creativecommons.org/publicdomain/zero/1.0/ -->
+</head>
+<body>
+<p>Test for the Console API and Workers</p>
+
+<script class="testbody" type="text/javascript;version=1.8">
+SimpleTest.waitForExplicitFinish();
+
+let expectedCachedConsoleCalls = [
+    {
+      level: "log",
+      filename: /console-test-worker/,
+      arguments: ['Log from worker init'],
+    },
+];
+
+let expectedConsoleAPICalls = [
+    {
+      level: "log",
+      filename: /console-test-worker/,
+      arguments: ['Log was requested from worker'],
+    },
+];
+
+window.onload = Task.async(function*() {
+  let {state,response} = yield new Promise(resolve => {
+    attachConsoleToWorker(["ConsoleAPI"], (state, response) => {
+      resolve({state,response})
+    });
+  });
+
+  yield testCachedMessages(state);
+  yield testConsoleAPI(state);
+
+  closeDebugger(state, function() {
+    SimpleTest.finish();
+  });
+});
+
+let testCachedMessages = Task.async(function*(state) {
+  info("testCachedMessages entered");
+  return new Promise(resolve => {
+    let onCachedConsoleAPI = (response) => {
+      let consoleCalls = response.messages;
+
+      info('Received cached response. Checking console calls.');
+      checkConsoleAPICalls(consoleCalls, expectedCachedConsoleCalls);
+      resolve();
+    };
+    state.client.getCachedMessages(["ConsoleAPI"], onCachedConsoleAPI);
+  })
+});
+
+let testConsoleAPI = Task.async(function*(state) {
+  info("testConsoleAPI entered");
+  let consoleCalls = [];
+  return new Promise(resolve => {
+    let onConsoleAPICall = (type, packet) => {
+      info("received message level: " + packet.message.level);
+      is(packet.from, state.actor, "console API call actor");
+      consoleCalls.push(packet.message);
+      if (consoleCalls.length != expectedConsoleCalls.length) {
+        return;
+      }
+
+      info('Checking console API calls.');
+      state.dbgClient.removeListener("consoleAPICall", onConsoleAPICall);
+      checkConsoleAPICalls(consoleCalls, expectedConsoleAPICalls);
+      consoleCalls = [];
+      closeDebugger(state, function() {
+        SimpleTest.finish();
+      });
+    }
+
+    info("testConsoleAPI: adding listener for consoleAPICall");
+    state.dbgClient.addListener("consoleAPICall", onConsoleAPICall);
+    state.worker.postMessage("log");
+  });
+});
+
+</script>
+</body>
+</html>
diff --git a/devtools/shared/worker/loader.js b/devtools/shared/worker/loader.js
--- a/devtools/shared/worker/loader.js
+++ b/devtools/shared/worker/loader.js
@@ -362,17 +362,17 @@ var {
   Debugger,
   URL,
   createSandbox,
   dump,
   rpc,
   loadSubScript,
   reportError,
   setImmediate,
-  xpcInspector
+  xpcInspector,
 } = (function () {
   if (typeof Components === "object") { // Main thread
     let {
       Constructor: CC,
       classes: Cc,
       manager: Cm,
       interfaces: Ci,
       results: Cr,
@@ -479,18 +479,20 @@ var {
 this.worker = new WorkerDebuggerLoader({
   createSandbox: createSandbox,
   globals: {
     "isWorker": true,
     "dump": dump,
     "loader": loader,
     "reportError": reportError,
     "rpc": rpc,
+    "URL": URL,
     "setImmediate": setImmediate,
-    "URL": URL,
+    "retrieveConsoleEvents": this.retrieveConsoleEvents,
+    "setConsoleEventHandler": this.setConsoleEventHandler,
   },
   loadSubScript: loadSubScript,
   modules: {
     "Debugger": Debugger,
     "Services": Object.create(null),
     "chrome": chrome,
     "xpcInspector": xpcInspector
   },
