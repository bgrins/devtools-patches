# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  5e287404e4f8fd81330cd704e42fba5e3baa5f49
Bug 1259603 - Use ConsoleEvents for cached messages and observing messages when webconsole actor is running

diff --git a/devtools/server/actors/webconsole.js b/devtools/server/actors/webconsole.js
--- a/devtools/server/actors/webconsole.js
+++ b/devtools/server/actors/webconsole.js
@@ -556,21 +556,16 @@ WebConsoleActor.prototype =
    *
    * @param object aRequest
    *        The JSON request object received from the Web Console client.
    * @return object
    *         The response object which holds the startedListeners array.
    */
   onStartListeners: function WCA_onStartListeners(aRequest)
   {
-    // XXXworkers: Not handling the Console API yet for workers (Bug 1209353).
-    if (isWorker) {
-       aRequest.listeners = [];
-    }
-
     let startedListeners = [];
     let window = !this.parentActor.isRootActor ? this.window : null;
     let appId = null;
     let messageManager = null;
 
     if (this._parentIsContentActor) {
       appId = this.parentActor.docShell.appId;
       messageManager = this.parentActor.messageManager;
diff --git a/devtools/shared/webconsole/worker-utils.js b/devtools/shared/webconsole/worker-utils.js
--- a/devtools/shared/webconsole/worker-utils.js
+++ b/devtools/shared/webconsole/worker-utils.js
@@ -8,13 +8,76 @@
 
 // XXXworkers This file is loaded on the server side for worker debugging.
 // Since the server is running in the worker thread, it doesn't
 // have access to Services / Components.  This functionality
 // is stubbed out to prevent errors, and will need to implemented
 // for Bug 1209353.
 
 exports.Utils = { L10n: function() {} };
-exports.ConsoleServiceListener = function() {};
-exports.ConsoleAPIListener = function() {};
+function ConsoleServiceListener(window, listener) {
+  this.window = window;
+  this.listener = listener;
+}
+ConsoleServiceListener.prototype =
+{
+  init: function() {
+  },
+  observe: function(message) {
+  },
+  getCachedMessages: function() {
+    return [];
+  }
+};
+
+ConsoleAPIListener.prototype =
+{
+  init: function() {
+    dump("ConsoleAPIListener init\n\n\n\n")
+    setConsoleEventHandler(this.observe.bind(this));
+  },
+
+  observe: function(message) {
+    // Here, wrappedJSObject is not a security wrapper but a property defined
+    // by the XPCOM component which allows us to unwrap the XPCOM interface and
+    // access the underlying JSObject.
+    let apiMessage = message.wrappedJSObject;
+    this.owner.onConsoleAPICall(apiMessage);
+  },
+  getCachedMessages: function() {
+    let messages = retrieveConsoleEvents();
+    dump("\n\n\nin worker " + JSON.stringify(messages) + "\n\n\n");
+  }
+};
+
+function ConsoleAPIListener(window, owner, consoleID) {
+  this.window = window;
+  this.owner = owner;
+  this.consoleID = consoleID;
+}
+
+ConsoleAPIListener.prototype =
+{
+  init: function() {
+    dump("ConsoleAPIListener init\n\n\n\n")
+    setConsoleEventHandler(this.observe.bind(this));
+  },
+
+  observe: function(message) {
+    // Here, wrappedJSObject is not a security wrapper but a property defined
+    // by the XPCOM component which allows us to unwrap the XPCOM interface and
+    // access the underlying JSObject.
+    let apiMessage = message.wrappedJSObject;
+    this.owner.onConsoleAPICall(apiMessage);
+  },
+  getCachedMessages: function() {
+    let messages = retrieveConsoleEvents();
+    dump("\n\n\nin worker " + JSON.stringify(messages) + "\n\n\n");
+    return [];
+  }
+};
+
+exports.ConsoleAPIListener = ConsoleAPIListener;
+exports.ConsoleServiceListener = ConsoleServiceListener;
+
 exports.addWebConsoleCommands = function() {};
 exports.ConsoleReflowListener = function() {};
 exports.CONSOLE_WORKER_IDS = [];
diff --git a/devtools/shared/worker/loader.js b/devtools/shared/worker/loader.js
--- a/devtools/shared/worker/loader.js
+++ b/devtools/shared/worker/loader.js
@@ -368,17 +368,19 @@ var {
   Debugger,
   URL,
   createSandbox,
   dump,
   rpc,
   loadSubScript,
   reportError,
   setImmediate,
-  xpcInspector
+  xpcInspector,
+  retrieveConsoleEvents,
+  setConsoleEventHandler
 } = (function () {
   if (typeof Components === "object") { // Main thread
     let {
       Constructor: CC,
       classes: Cc,
       manager: Cm,
       interfaces: Ci,
       results: Cr,
@@ -469,33 +471,37 @@ var {
       Debugger: this.Debugger,
       URL: this.URL,
       createSandbox: this.createSandbox,
       dump: this.dump,
       rpc: this.rpc,
       loadSubScript: this.loadSubScript,
       reportError: this.reportError,
       setImmediate: this.setImmediate,
-      xpcInspector: xpcInspector
+      xpcInspector: xpcInspector,
+      retrieveConsoleEvents: this.retrieveConsoleEvents,
+      setConsoleEventHandler: this.setConsoleEventHandler
     };
   }
 }).call(this);
 
 // Create the default instance of the worker loader, using the APIs we defined
 // above.
 
 this.worker = new WorkerDebuggerLoader({
   createSandbox: createSandbox,
   globals: {
     "isWorker": true,
     "dump": dump,
     "loader": loader,
     "reportError": reportError,
     "rpc": rpc,
-    "setImmediate": setImmediate
+    "setImmediate": setImmediate,
+    "retrieveConsoleEvents": this.retrieveConsoleEvents,
+    "setConsoleEventHandler": this.setConsoleEventHandler
   },
   loadSubScript: loadSubScript,
   modules: {
     "Debugger": Debugger,
     "PromiseDebugging": PromiseDebugging,
     "Services": Object.create(null),
     "URL": URL,
     "chrome": chrome,
