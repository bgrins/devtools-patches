# HG changeset patch
# Parent  181d06e8c7df7530d52ddf3f6a07cdf5c4f65e6c
Backed out changeset 6ecd33215340 (bug 1128988)

diff --git a/browser/app/profile/firefox.js b/browser/app/profile/firefox.js
--- a/browser/app/profile/firefox.js
+++ b/browser/app/profile/firefox.js
@@ -1603,21 +1603,16 @@ pref("devtools.editor.autocomplete", tru
 // Enable the Font Inspector
 pref("devtools.fontinspector.enabled", true);
 
 // Pref to store the browser version at the time of a telemetry ping for an
 // opened developer tool. This allows us to ping telemetry just once per browser
 // version for each user.
 pref("devtools.telemetry.tools.opened.version", "{}");
 
-// Set imgur upload client ID
-pref("devtools.gcli.imgurClientID", '0df414e888d7240');
-// Imgur's upload URL
-pref("devtools.gcli.imgurUploadURL", "https://api.imgur.com/3/image");
-
 // Whether the character encoding menu is under the main Firefox button. This
 // preference is a string so that localizers can alter it.
 pref("browser.menu.showCharacterEncoding", "chrome://browser/locale/browser.properties");
 
 // Allow using tab-modal prompts when possible.
 pref("prompts.tab_modal.enabled", true);
 // Whether the Panorama should animate going in/out of tabs
 pref("browser.panorama.animate_zoom", true);
diff --git a/browser/devtools/commandline/commands-index.js b/browser/devtools/commandline/commands-index.js
--- a/browser/devtools/commandline/commands-index.js
+++ b/browser/devtools/commandline/commands-index.js
@@ -1,64 +1,17 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
-const { createSystem, connectFront, disconnectFront } = require("gcli/system");
-const { GcliFront } = require("devtools/server/actors/gcli");
+const gcli = require("gcli/index");
 
-/**
- * This is the basic list of modules that should be loaded into each
- * requisition instance whether server side or client side
- */
-exports.baseModules = [
-  "gcli/types/delegate",
-  "gcli/types/selection",
-  "gcli/types/array",
-
-  "gcli/types/boolean",
-  "gcli/types/command",
-  "gcli/types/date",
-  "gcli/types/file",
-  "gcli/types/javascript",
-  "gcli/types/node",
-  "gcli/types/number",
-  "gcli/types/resource",
-  "gcli/types/setting",
-  "gcli/types/string",
-  "gcli/types/union",
-  "gcli/types/url",
-
-  "gcli/fields/fields",
-  "gcli/fields/delegate",
-  "gcli/fields/selection",
-
-  "gcli/ui/focus",
-  "gcli/ui/intro",
-
-  "gcli/converters/converters",
-  "gcli/converters/basic",
-  "gcli/converters/terminal",
-
-  "gcli/languages/command",
-  "gcli/languages/javascript",
-
-  "gcli/commands/clear",
-  "gcli/commands/context",
-  "gcli/commands/help",
-  "gcli/commands/pref",
-];
-
-/**
- * Some commands belong to a tool (see getToolModules). This is a list of the
- * modules that are *not* owned by a tool.
- */
-exports.devtoolsModules = [
+const commandModules = [
   "devtools/tilt/tilt-commands",
   "gcli/commands/addon",
   "gcli/commands/appcache",
   "gcli/commands/calllog",
   "gcli/commands/cmd",
   "gcli/commands/cookie",
   "gcli/commands/csscoverage",
   "gcli/commands/folder",
@@ -70,88 +23,20 @@ exports.devtoolsModules = [
   "gcli/commands/pagemod",
   "gcli/commands/paintflashing",
   "gcli/commands/restart",
   "gcli/commands/rulers",
   "gcli/commands/screenshot",
   "gcli/commands/tools",
 ];
 
-/**
- * Register commands from tools with 'command: [ "some/module" ]' definitions.
- * The map/reduce incantation squashes the array of arrays to a single array.
- */
-const defaultTools = require("definitions").defaultTools;
-exports.devtoolsToolModules = defaultTools.map(def => def.commands || [])
-                                 .reduce((prev, curr) => prev.concat(curr), []);
+gcli.addItemsByModule(commandModules, { delayedLoad: true });
 
-/**
- * Add modules to a system for use in a content process (but don't call load)
- */
-exports.addAllItemsByModule = function(system) {
-  system.addItemsByModule(exports.baseModules, { delayedLoad: true });
-  system.addItemsByModule(exports.devtoolsModules, { delayedLoad: true });
-  system.addItemsByModule(exports.devtoolsToolModules, { delayedLoad: true });
+const defaultTools = require("main").defaultTools;
+for (let definition of defaultTools) {
+  if (definition.commands) {
+    gcli.addItemsByModule(definition.commands, { delayedLoad: true });
+  }
+}
 
-  const { mozDirLoader } = require("gcli/commands/cmd");
-  system.addItemsByModule("mozcmd", { delayedLoad: true, loader: mozDirLoader });
-};
+const { mozDirLoader } = require("gcli/commands/cmd");
 
-/**
- * This is WeakMap<Target, Links> where Links is an object that looks like
- *   { refs: number, promise: Promise<System>, front: GcliFront }
- */
-var linksForTarget = new WeakMap();
-
-/**
- * The toolbox uses the following properties on a command to allow it to be
- * added to the toolbox toolbar
- */
-var customProperties = [ "buttonId", "buttonClass", "tooltipText" ];
-
-/**
- * Create a system which connects to a GCLI in a remote target
- * @return Promise<System> for the given target
- */
-exports.getSystem = function(target) {
-  const existingLinks = linksForTarget.get(target);
-  if (existingLinks != null) {
-    existingLinks.refs++;
-    return existingLinks.promise;
-  }
-
-  const system = createSystem({ location: "client" });
-
-  exports.addAllItemsByModule(system);
-
-  // Load the client system
-  const links = {
-    refs: 1,
-    system,
-    promise: system.load().then(() => {
-      return GcliFront.create(target).then(front => {
-        links.front = front;
-        return connectFront(system, front, customProperties).then(() => system);
-      });
-    })
-  };
-
-  linksForTarget.set(target, links);
-  return links.promise;
-};
-
-/**
- * Someone that called getSystem doesn't need it any more, so decrement the
- * count of users of the system for that target, and destroy if needed
- */
-exports.releaseSystem = function(target) {
-  const links = linksForTarget.get(target);
-  if (links == null) {
-    throw new Error("releaseSystem called for unknown target");
-  }
-
-  links.refs--;
-  if (links.refs === 0) {
-    disconnectFront(links.system, links.front);
-    links.system.destroy();
-    linksForTarget.delete(target);
-  }
-};
+gcli.addItemsByModule("mozcmd", { delayedLoad: true, loader: mozDirLoader });
diff --git a/browser/devtools/commandline/test/browser_cmd_addon.js b/browser/devtools/commandline/test/browser_cmd_addon.js
--- a/browser/devtools/commandline/test/browser_cmd_addon.js
+++ b/browser/devtools/commandline/test/browser_cmd_addon.js
@@ -2,17 +2,17 @@
  * http://creativecommons.org/publicdomain/zero/1.0/ */
 
 // Tests that the addon commands works as they should
 
 function test() {
   return Task.spawn(spawnTest).then(finish, helpers.handleError);
 }
 
-function* spawnTest() {
+function spawnTest() {
   let options = yield helpers.openTab("about:blank");
   yield helpers.openToolbar(options);
 
   yield helpers.audit(options, [
     {
       setup: 'addon list dictionary',
       check: {
         input:  'addon list dictionary',
diff --git a/browser/devtools/commandline/test/browser_cmd_appcache_invalid.js b/browser/devtools/commandline/test/browser_cmd_appcache_invalid.js
--- a/browser/devtools/commandline/test/browser_cmd_appcache_invalid.js
+++ b/browser/devtools/commandline/test/browser_cmd_appcache_invalid.js
@@ -6,17 +6,17 @@
 
 const TEST_URI = "http://sub1.test1.example.com/browser/browser/devtools/commandline/" +
                  "test/browser_cmd_appcache_invalid_index.html";
 
 function test() {
   return Task.spawn(spawnTest).then(finish, helpers.handleError);
 }
 
-function* spawnTest() {
+function spawnTest() {
   let lines = [
     'Manifest has a character encoding of ISO-8859-1. Manifests must have the ' +
       'utf-8 character encoding.',
     'The first line of the manifest must be "CACHE MANIFEST" at line 1.',
     '"CACHE MANIFEST" is only valid on the first line but was found at line 3.',
     'images/sound-icon.png points to a resource that is not available at line 9.',
     'images/background.png points to a resource that is not available at line 10.',
     '/checking.cgi points to a resource that is not available at line 13.',
diff --git a/browser/devtools/commandline/test/browser_cmd_appcache_valid.js b/browser/devtools/commandline/test/browser_cmd_appcache_valid.js
--- a/browser/devtools/commandline/test/browser_cmd_appcache_valid.js
+++ b/browser/devtools/commandline/test/browser_cmd_appcache_valid.js
@@ -5,17 +5,17 @@
 
 const TEST_URI = "http://sub1.test2.example.com/browser/browser/devtools/" +
                  "commandline/test/browser_cmd_appcache_valid_index.html";
 
 function test() {
   return Task.spawn(spawnTest).then(finish, helpers.handleError);
 }
 
-function* spawnTest() {
+function spawnTest() {
   let options = yield helpers.openTab(TEST_URI);
   yield helpers.openToolbar(options);
 
   info("adding cache listener.");
 
   // Wait for site to be cached.
   yield helpers.listenOnce(gBrowser.contentWindow.applicationCache, 'cached');
 
diff --git a/browser/devtools/commandline/test/browser_cmd_calllog.js b/browser/devtools/commandline/test/browser_cmd_calllog.js
--- a/browser/devtools/commandline/test/browser_cmd_calllog.js
+++ b/browser/devtools/commandline/test/browser_cmd_calllog.js
@@ -3,17 +3,17 @@
 
 // Tests that the calllog commands works as they should
 
 const TEST_URI = "data:text/html;charset=utf-8,gcli-calllog";
 
 let tests = {};
 
 function test() {
-  return Task.spawn(function*() {
+  return Task.spawn(function() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
 
     yield helpers.runTests(options, tests);
 
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_cmd_calllog_chrome.js b/browser/devtools/commandline/test/browser_cmd_calllog_chrome.js
--- a/browser/devtools/commandline/test/browser_cmd_calllog_chrome.js
+++ b/browser/devtools/commandline/test/browser_cmd_calllog_chrome.js
@@ -3,17 +3,17 @@
 
 // Tests that the calllog commands works as they should
 
 const TEST_URI = "data:text/html;charset=utf-8,cmd-calllog-chrome";
 
 let tests = {};
 
 function test() {
-  return Task.spawn(function*() {
+  return Task.spawn(function() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
 
     yield helpers.runTests(options, tests);
 
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_cmd_commands.js b/browser/devtools/commandline/test/browser_cmd_commands.js
--- a/browser/devtools/commandline/test/browser_cmd_commands.js
+++ b/browser/devtools/commandline/test/browser_cmd_commands.js
@@ -4,17 +4,17 @@
 // Test various GCLI commands
 
 const TEST_URI = "data:text/html;charset=utf-8,gcli-commands";
 
 function test() {
   return Task.spawn(spawnTest).then(finish, helpers.handleError);
 }
 
-function* spawnTest() {
+function spawnTest() {
   let options = yield helpers.openTab(TEST_URI);
   yield helpers.openToolbar(options);
 
   let subjectPromise = helpers.observeOnce("web-console-created");
 
   helpers.audit(options, [
     {
       setup: "console open",
@@ -44,17 +44,17 @@ function* spawnTest() {
   yield oncePromise;
 
   let labels = hud.outputNode.querySelectorAll(".message");
   is(labels.length, 0, "no output in console");
 
   yield helpers.audit(options, [
     {
       setup: "console close",
-      exec: { output: "" }
+      exec: { output: true }
     }
   ]);
 
   ok(!HUDService.getHudReferenceById(hud.hudId), "console closed");
 
   yield helpers.closeToolbar(options);
   yield helpers.closeTab(options);
 }
diff --git a/browser/devtools/commandline/test/browser_cmd_csscoverage_startstop.js b/browser/devtools/commandline/test/browser_cmd_csscoverage_startstop.js
--- a/browser/devtools/commandline/test/browser_cmd_csscoverage_startstop.js
+++ b/browser/devtools/commandline/test/browser_cmd_csscoverage_startstop.js
@@ -28,31 +28,28 @@ add_task(function*() {
   yield helpers.closeToolbar(options);
   yield helpers.closeTab(options);
 });
 
 /**
  * Visit all the pages in the test
  */
 function* navigate(usage, options) {
-  yield usage.start(options.chromeWindow, options.target);
+  yield usage.start();
 
   ok(usage.isRunning(), "csscoverage is running");
 
-  let load1Promise = helpers.listenOnce(options.browser, "load", true);
-
   yield helpers.navigate(PAGE_1, options);
 
   // Wait for the test pages to auto-cycle
-  yield load1Promise;
-  is(options.window.location.href, PAGE_1, "page 1 loaded");
+  let ev = yield helpers.listenOnce(options.browser, "load", true);
+  is(ev.target.location.href, PAGE_1, "page 1 loaded");
 
-  // Page 2 is a frame in page 1. JS in the page navigates to page 3.
-  yield helpers.listenOnce(options.browser, "load", true);
-  is(options.window.location.href, PAGE_3, "page 3 loaded");
+  ev = yield helpers.listenOnce(options.browser, "load", true);
+  is(ev.target.location.href, PAGE_3, "page 3 loaded");
 
   yield usage.stop();
 
   ok(!usage.isRunning(), "csscoverage not is running");
 }
 
 /**
  * Check the expected pages have been visited
diff --git a/browser/devtools/commandline/test/browser_cmd_jsb.js b/browser/devtools/commandline/test/browser_cmd_jsb.js
--- a/browser/devtools/commandline/test/browser_cmd_jsb.js
+++ b/browser/devtools/commandline/test/browser_cmd_jsb.js
@@ -5,17 +5,17 @@
 
 const TEST_URI = "http://example.com/browser/browser/devtools/commandline/" +
                  "test/browser_cmd_jsb_script.jsi";
 
 function test() {
   return Task.spawn(testTask).then(finish, helpers.handleError);
 }
 
-function* testTask() {
+function testTask() {
   let options = yield helpers.openTab("about:blank");
   yield helpers.openToolbar(options);
 
   let notifyPromise = wwNotifyOnce();
 
   helpers.audit(options, [
     {
       setup: 'jsb',
@@ -24,20 +24,17 @@ function* testTask() {
         hints:     ' <url> [options]',
         markup: 'VVV',
         status: 'ERROR'
       }
     },
     {
       setup: 'jsb ' + TEST_URI,
       // Should result in a new scratchpad window
-      exec: {
-        output: '',
-        error: false
-      }
+      exec: { }
     }
   ]);
 
   let { subject } = yield notifyPromise;
   let scratchpadWin = subject.QueryInterface(Ci.nsIDOMWindow);
   yield helpers.listenOnce(scratchpadWin, "load");
 
   let scratchpad = scratchpadWin.Scratchpad;
diff --git a/browser/devtools/commandline/test/browser_cmd_media.js b/browser/devtools/commandline/test/browser_cmd_media.js
--- a/browser/devtools/commandline/test/browser_cmd_media.js
+++ b/browser/devtools/commandline/test/browser_cmd_media.js
@@ -69,17 +69,17 @@ let tests = {
           is(style.backgroundColor, "rgb(255, 255, 255)", "media reset");
         }
       }
     ]);
   }
 };
 
 function test() {
-  return Task.spawn(function*() {
+  return Task.spawn(function() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
 
     yield helpers.runTests(options, tests);
 
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_cmd_pagemod_export.js b/browser/devtools/commandline/test/browser_cmd_pagemod_export.js
--- a/browser/devtools/commandline/test/browser_cmd_pagemod_export.js
+++ b/browser/devtools/commandline/test/browser_cmd_pagemod_export.js
@@ -5,17 +5,17 @@
 
 const TEST_URI = "http://example.com/browser/browser/devtools/commandline/"+
                  "test/browser_cmd_pagemod_export.html";
 
 function test() {
   return Task.spawn(spawnTest).then(finish, helpers.handleError);
 }
 
-function* spawnTest() {
+function spawnTest() {
   let options = yield helpers.openTab(TEST_URI);
   yield helpers.openToolbar(options);
 
   const documentElement = options.document.documentElement;
   const initialHtml = documentElement.innerHTML;
   function resetContent() {
     options.document.documentElement.innerHTML = initialHtml;
   }
@@ -297,34 +297,32 @@ function* spawnTest() {
       check: {
         input:  'pagemod remove attribute',
         hints:                          ' <searchAttributes> <searchElements> [root] [ignoreCase]',
         markup: 'VVVVVVVVVVVVVVVVVVVVVVVV',
         status: 'ERROR',
         args: {
           searchAttributes: { value: undefined, status: 'INCOMPLETE' },
           searchElements: { value: undefined, status: 'INCOMPLETE' },
-          // root: { value: undefined }, // 'root' is a node which is remote
-                                         // so we can't see the value in tests
+          root: { value: undefined },
           ignoreCase: { value: false },
         }
       },
     },
     {
       setup: 'pagemod remove attribute foo bar',
       check: {
         input:  'pagemod remove attribute foo bar',
         hints:                                  ' [root] [ignoreCase]',
         markup: 'VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV',
         status: 'VALID',
         args: {
           searchAttributes: { value: 'foo' },
           searchElements: { value: 'bar' },
-          // root: { value: undefined }, // 'root' is a node which is remote
-                                         // so we can't see the value in tests
+          root: { value: undefined },
           ignoreCase: { value: false },
         }
       },
       post: function() {
         return new Promise(resolve => {
           executeSoon(resolve);
         });
       }
diff --git a/browser/devtools/commandline/test/browser_cmd_pref1.js b/browser/devtools/commandline/test/browser_cmd_pref1.js
--- a/browser/devtools/commandline/test/browser_cmd_pref1.js
+++ b/browser/devtools/commandline/test/browser_cmd_pref1.js
@@ -8,17 +8,17 @@ let prefBranch = Cc["@mozilla.org/prefer
                     .QueryInterface(Ci.nsIPrefBranch2);
 
 const TEST_URI = "data:text/html;charset=utf-8,gcli-pref1";
 
 function test() {
   return Task.spawn(spawnTest).then(finish, helpers.handleError);
 }
 
-function* spawnTest() {
+function spawnTest() {
   let options = yield helpers.openTab(TEST_URI);
   yield helpers.openToolbar(options);
 
   let tiltEnabledOrig = prefBranch.getBoolPref("devtools.tilt.enabled");
   info("originally: devtools.tilt.enabled = " + tiltEnabledOrig);
 
   yield helpers.audit(options, [
     {
diff --git a/browser/devtools/commandline/test/browser_cmd_pref2.js b/browser/devtools/commandline/test/browser_cmd_pref2.js
--- a/browser/devtools/commandline/test/browser_cmd_pref2.js
+++ b/browser/devtools/commandline/test/browser_cmd_pref2.js
@@ -8,17 +8,17 @@ let prefBranch = Cc["@mozilla.org/prefer
                     .QueryInterface(Ci.nsIPrefBranch2);
 
 const TEST_URI = "data:text/html;charset=utf-8,gcli-pref2";
 
 function test() {
   return Task.spawn(spawnTest).then(finish, helpers.handleError);
 }
 
-function* spawnTest() {
+function spawnTest() {
   let options = yield helpers.openTab(TEST_URI);
   yield helpers.openToolbar(options);
 
   let tabSizeOrig = prefBranch.getIntPref("devtools.editor.tabsize");
   info("originally: devtools.editor.tabsize = " + tabSizeOrig);
 
   yield helpers.audit(options, [
     {
diff --git a/browser/devtools/commandline/test/browser_cmd_pref3.js b/browser/devtools/commandline/test/browser_cmd_pref3.js
--- a/browser/devtools/commandline/test/browser_cmd_pref3.js
+++ b/browser/devtools/commandline/test/browser_cmd_pref3.js
@@ -11,17 +11,17 @@ let supportsString = Cc["@mozilla.org/su
                       .createInstance(Ci.nsISupportsString);
 
 const TEST_URI = "data:text/html;charset=utf-8,gcli-pref3";
 
 function test() {
   return Task.spawn(spawnTest).then(finish, helpers.handleError);
 }
 
-function* spawnTest() {
+function spawnTest() {
   let options = yield helpers.openTab(TEST_URI);
   yield helpers.openToolbar(options);
 
   let remoteHostOrig = prefBranch.getComplexValue("devtools.debugger.remote-host",
                                                   Ci.nsISupportsString).data;
   info("originally: devtools.debugger.remote-host = " + remoteHostOrig);
 
   yield helpers.audit(options, [
diff --git a/browser/devtools/commandline/test/browser_cmd_screenshot.js b/browser/devtools/commandline/test/browser_cmd_screenshot.js
--- a/browser/devtools/commandline/test/browser_cmd_screenshot.js
+++ b/browser/devtools/commandline/test/browser_cmd_screenshot.js
@@ -6,17 +6,17 @@ const TEST_URI = "http://example.com/bro
                  "test/browser_cmd_screenshot.html";
 
 let FileUtils = (Cu.import("resource://gre/modules/FileUtils.jsm", {})).FileUtils;
 
 function test() {
   return Task.spawn(spawnTest).then(finish, helpers.handleError);
 }
 
-function* spawnTest() {
+function spawnTest() {
   waitForExplicitFinish();
 
   info("RUN TEST: non-private window");
   let normWin = yield addWindow({ private: false });
   yield addTabWithToolbarRunTests(normWin);
   normWin.close();
 
   info("RUN TEST: private window");
@@ -76,16 +76,21 @@ function addTabWithToolbarRunTests(win) 
       },
     },
     {
       setup: 'screenshot --selector img#testImage',
       check: {
         input:  'screenshot --selector img#testImage',
         markup: 'VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV',
         status: 'VALID',
+        args: {
+          selector: {
+            value: options.window.document.getElementById("testImage")
+          },
+        }
       },
     },
   ]);
 
   // Test capture to file
   let file = FileUtils.getFile("TmpD", [ "TestScreenshotFile.png" ]);
 
   yield helpers.audit(options, [
diff --git a/browser/devtools/commandline/test/browser_cmd_settings.js b/browser/devtools/commandline/test/browser_cmd_settings.js
--- a/browser/devtools/commandline/test/browser_cmd_settings.js
+++ b/browser/devtools/commandline/test/browser_cmd_settings.js
@@ -11,28 +11,24 @@ let supportsString = Cc["@mozilla.org/su
                       .createInstance(Ci.nsISupportsString);
 
 const TEST_URI = "data:text/html;charset=utf-8,gcli-settings";
 
 function test() {
   return Task.spawn(spawnTest).then(finish, helpers.handleError);
 }
 
-function* spawnTest() {
+function spawnTest() {
   // Setup
   let options = yield helpers.openTab(TEST_URI);
 
-  const { createSystem } = require("gcli/system");
-  const system = createSystem({ location: "server" });
-
-  const gcliInit = require("devtools/commandline/commands-index");
-  gcliInit.addAllItemsByModule(system);
-  yield system.load();
-
-  let settings = system.settings;
+  require("devtools/commandline/commands-index");
+  let gcli = require("gcli/index");
+  yield gcli.load();
+  let settings = gcli.settings;
 
   let hideIntroEnabled = settings.get("devtools.gcli.hideIntro");
   let tabSize = settings.get("devtools.editor.tabsize");
   let remoteHost = settings.get("devtools.debugger.remote-host");
 
   let hideIntroOrig = prefBranch.getBoolPref("devtools.gcli.hideIntro");
   let tabSizeOrig = prefBranch.getIntPref("devtools.editor.tabsize");
   let remoteHostOrig = prefBranch.getComplexValue(
diff --git a/browser/devtools/commandline/test/browser_gcli_async.js b/browser/devtools/commandline/test/browser_gcli_async.js
--- a/browser/devtools/commandline/test/browser_gcli_async.js
+++ b/browser/devtools/commandline/test/browser_gcli_async.js
@@ -10,26 +10,41 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testAsync.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_async.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var helpers = require('./helpers');
 
 exports.testBasic = function(options) {
   return helpers.audit(options, [
     {
       setup:    'tsslo',
       check: {
         input:  'tsslo',
@@ -54,16 +69,17 @@ exports.testBasic = function(options) {
         predictions: [
           'Shalom', 'Namasté', 'Hallo', 'Dydd-da', 'Chào', 'Hej',
           'Saluton', 'Sawubona'
         ],
         unassigned: [ ],
         args: {
           command: { name: 'tsslow' },
           hello: {
+            value: undefined,
             arg: '',
             status: 'INCOMPLETE'
           },
         }
       }
     },
     {
       setup:    'tsslow S',
@@ -74,16 +90,17 @@ exports.testBasic = function(options) {
         cursor: 8,
         current: 'hello',
         status: 'ERROR',
         predictions: [ 'Shalom', 'Saluton', 'Sawubona', 'Namasté' ],
         unassigned: [ ],
         args: {
           command: { name: 'tsslow' },
           hello: {
+            value: undefined,
             arg: ' S',
             status: 'INCOMPLETE'
           },
         }
       }
     },
     {
       setup:    'tsslow S<TAB>',
@@ -94,16 +111,17 @@ exports.testBasic = function(options) {
         cursor: 14,
         current: 'hello',
         status: 'VALID',
         predictions: [ 'Shalom' ],
         unassigned: [ ],
         args: {
           command: { name: 'tsslow' },
           hello: {
+            value: 'Shalom',
             arg: ' Shalom ',
             status: 'VALID',
             message: ''
           },
         }
       }
     }
   ]);
diff --git a/browser/devtools/commandline/test/browser_gcli_canon.js b/browser/devtools/commandline/test/browser_gcli_canon.js
--- a/browser/devtools/commandline/test/browser_gcli_canon.js
+++ b/browser/devtools/commandline/test/browser_gcli_canon.js
@@ -10,26 +10,41 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testCanon.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_canon.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var assert = require('../testharness/assert');
 // var helpers = require('./helpers');
 var Commands = require('gcli/commands/commands').Commands;
 
 var startCount;
 var events;
 
 var commandsChange = function(ev) {
@@ -199,53 +214,32 @@ exports.testAltCommands = function(optio
 
   var tss = {
     name: 'tss',
     params: [
       { name: 'str', type: 'string' },
       { name: 'num', type: 'number' },
       { name: 'opt', type: { name: 'selection', data: [ '1', '2', '3' ] } },
     ],
-    customProp1: 'localValue',
-    customProp2: true,
-    customProp3: 42,
     exec: function(args, context) {
       return context.commandName + ':' +
               args.str + ':' + args.num + ':' + args.opt;
     }
   };
   altCommands.add(tss);
 
   var commandSpecs = altCommands.getCommandSpecs();
   assert.is(JSON.stringify(commandSpecs),
             '[{"item":"command","name":"tss","params":[' +
               '{"name":"str","type":"string"},' +
               '{"name":"num","type":"number"},' +
               '{"name":"opt","type":{"name":"selection","data":["1","2","3"]}}' +
             '],"isParent":false}]',
             'JSON.stringify(commandSpecs)');
 
-  var customProps = [ 'customProp1', 'customProp2', 'customProp3', ];
-  var commandSpecs2 = altCommands.getCommandSpecs(customProps);
-  assert.is(JSON.stringify(commandSpecs2),
-            '[{' +
-              '"item":"command",' +
-              '"name":"tss",' +
-              '"params":[' +
-                '{"name":"str","type":"string"},' +
-                '{"name":"num","type":"number"},' +
-                '{"name":"opt","type":{"name":"selection","data":["1","2","3"]}}' +
-              '],' +
-              '"isParent":false,' +
-              '"customProp1":"localValue",' +
-              '"customProp2":true,' +
-              '"customProp3":42' +
-            '}]',
-            'JSON.stringify(commandSpecs)');
-
   var remoter = function(args, context) {
     assert.is(context.commandName, 'tss', 'commandName is tss');
 
     var cmd = altCommands.get(context.commandName);
     return cmd.exec(args, context);
   };
 
   commands.addProxyCommands(commandSpecs, remoter, 'proxy', 'test');
diff --git a/browser/devtools/commandline/test/browser_gcli_cli1.js b/browser/devtools/commandline/test/browser_gcli_cli1.js
--- a/browser/devtools/commandline/test/browser_gcli_cli1.js
+++ b/browser/devtools/commandline/test/browser_gcli_cli1.js
@@ -10,26 +10,41 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testCli1.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_cli1.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var assert = require('../testharness/assert');
 // var helpers = require('./helpers');
 
 exports.testBlank = function(options) {
   return helpers.audit(options, [
     {
       setup:    '',
       check: {
@@ -248,16 +263,17 @@ exports.testTsv = function(options) {
             arg: '',
             status: 'INCOMPLETE',
             message: 'Value required for \'optionValue\'.'
           }
         }
       }
     },
     {
+      skipRemainingIf: options.isNoDom,
       name: '|tsv option',
       setup: function() {
         return helpers.setInput(options, 'tsv option', 0);
       },
       check: {
         input:  'tsv option',
         hints:            ' <optionValue>',
         markup: 'VVVVEEEEEE',
diff --git a/browser/devtools/commandline/test/browser_gcli_cli2.js b/browser/devtools/commandline/test/browser_gcli_cli2.js
--- a/browser/devtools/commandline/test/browser_gcli_cli2.js
+++ b/browser/devtools/commandline/test/browser_gcli_cli2.js
@@ -10,28 +10,55 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testCli2.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_cli2.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var helpers = require('./helpers');
 
+var nodetype = require('gcli/types/node');
+
+exports.setup = function(options) {
+  if (options.window) {
+    nodetype.setDocument(options.window.document);
+  }
+};
+
+exports.shutdown = function(options) {
+  nodetype.unsetDocument();
+};
+
 exports.testSingleString = function(options) {
   return helpers.audit(options, [
     {
       setup:    'tsr',
       check: {
         input:  'tsr',
         hints:     ' <text>',
         markup: 'VVV',
@@ -344,16 +371,17 @@ exports.testSingleFloat = function(optio
         unassigned: [ ],
         args: {
           command: { name: 'tsf' },
           num: { value: 1.5, arg: ' 1.5x', status: 'VALID', message: '' }
         }
       }
     },
     {
+      skipRemainingIf: options.isNoDom,
       name: 'tsf x (cursor=4)',
       setup: function() {
         return helpers.setInput(options, 'tsf x', 4);
       },
       check: {
         input:  'tsf x',
         hints:       '',
         markup: 'VVVVE',
@@ -373,59 +401,68 @@ exports.testSingleFloat = function(optio
           }
         }
       }
     }
   ]);
 };
 
 exports.testElementWeb = function(options) {
+  var inputElement = options.isNoDom ?
+      null :
+      options.window.document.getElementById('gcli-input');
+
   return helpers.audit(options, [
     {
-      setup:    'tse #gcli-root',
+      skipIf: function gcliInputElementExists() {
+        return inputElement == null;
+      },
+      setup:    'tse #gcli-input',
       check: {
-        input:  'tse #gcli-root',
+        input:  'tse #gcli-input',
         hints:                 ' [options]',
-        markup: 'VVVVVVVVVVVVVV',
-        cursor: 14,
+        markup: 'VVVVVVVVVVVVVVV',
+        cursor: 15,
         current: 'node',
         status: 'VALID',
         predictions: [ ],
         unassigned: [ ],
         args: {
           command: { name: 'tse' },
           node: {
-            arg: ' #gcli-root',
+            value: inputElement,
+            arg: ' #gcli-input',
             status: 'VALID',
             message: ''
           },
           nodes: { arg: '', status: 'VALID', message: '' },
           nodes2: { arg: '', status: 'VALID', message: '' },
         }
       }
     }
   ]);
 };
 
 exports.testElement = function(options) {
   return helpers.audit(options, [
     {
+      skipRemainingIf: options.isNoDom,
       setup:    'tse',
       check: {
         input:  'tse',
         hints:     ' <node> [options]',
         markup: 'VVV',
         cursor: 3,
         current: '__command',
         status: 'ERROR',
         predictions: [ 'tse', 'tselarr' ],
         unassigned: [ ],
         args: {
           command: { name: 'tse' },
-          node: { arg: '', status: 'INCOMPLETE' },
+          node: { value: undefined, arg: '', status: 'INCOMPLETE' },
           nodes: { arg: '', status: 'VALID', message: '' },
           nodes2: { arg: '', status: 'VALID', message: '' },
         }
       }
     },
     {
       setup:    'tse #gcli-nomatch',
       check: {
@@ -563,17 +600,17 @@ exports.testNestedCommand = function(opt
         markup: 'IIIV',
         cursor: 4,
         current: '__command',
         status: 'ERROR',
         unassigned: [ ]
       }
     },
     {
-      skipIf: options.isPhantomjs, // PhantomJS gets predictions wrong
+      skipIf: options.isPhantomjs,
       setup:    'tsn x',
       check: {
         input:  'tsn x',
         hints:       ' -> tsn ext',
         markup: 'IIIVI',
         cursor: 5,
         current: '__command',
         status: 'ERROR',
diff --git a/browser/devtools/commandline/test/browser_gcli_completion1.js b/browser/devtools/commandline/test/browser_gcli_completion1.js
--- a/browser/devtools/commandline/test/browser_gcli_completion1.js
+++ b/browser/devtools/commandline/test/browser_gcli_completion1.js
@@ -10,26 +10,41 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testCompletion1.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_completion1.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var helpers = require('./helpers');
 
 exports.testActivate = function(options) {
   return helpers.audit(options, [
     {
       setup: '',
       check: {
         hints: ''
@@ -163,17 +178,17 @@ exports.testActivate = function(options)
     },
     {
       setup: 'tsg b',
       check: {
         hints: 'bb [options]'
       }
     },
     {
-      skipIf: options.isPhantomjs, // PhantomJS gets predictions wrong
+      skipIf: options.isPhantomjs,
       setup: 'tsg d',
       check: {
         hints: ' [options] -> ccc'
       }
     },
     {
       setup: 'tsg aa',
       check: {
diff --git a/browser/devtools/commandline/test/browser_gcli_completion2.js b/browser/devtools/commandline/test/browser_gcli_completion2.js
--- a/browser/devtools/commandline/test/browser_gcli_completion2.js
+++ b/browser/devtools/commandline/test/browser_gcli_completion2.js
@@ -10,26 +10,41 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testCompletion2.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_completion2.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var helpers = require('./helpers');
 
 exports.testLong = function(options) {
   return helpers.audit(options, [
     {
       setup:    'tslong --sel',
       check: {
         input:  'tslong --sel',
@@ -150,16 +165,17 @@ exports.testNoTab = function(options) {
       setup:    'xxxx',
       check: {
         input:  'xxxx',
         markup: 'EEEE',
         hints: ''
       }
     },
     {
+      skipIf: options.isNoDom,
       name: '<TAB>',
       setup: function() {
         // Doing it this way avoids clearing the input buffer
         return helpers.pressTab(options);
       },
       check: {
         input:  'xxxx',
         markup: 'EEEE',
diff --git a/browser/devtools/commandline/test/browser_gcli_context.js b/browser/devtools/commandline/test/browser_gcli_context.js
--- a/browser/devtools/commandline/test/browser_gcli_context.js
+++ b/browser/devtools/commandline/test/browser_gcli_context.js
@@ -10,26 +10,41 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testContext.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_context.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var helpers = require('./helpers');
 
 exports.testBaseline = function(options) {
   return helpers.audit(options, [
     // These 3 establish a baseline for comparison when we have used the
     // context command
     {
       setup:    'ext',
diff --git a/browser/devtools/commandline/test/browser_gcli_date.js b/browser/devtools/commandline/test/browser_gcli_date.js
--- a/browser/devtools/commandline/test/browser_gcli_date.js
+++ b/browser/devtools/commandline/test/browser_gcli_date.js
@@ -10,26 +10,41 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testDate.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_date.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var assert = require('../testharness/assert');
 // var helpers = require('./helpers');
 
 var Status = require('gcli/types/types').Status;
 
 exports.testParse = function(options) {
   var date = options.requisition.system.types.createType('date');
   return date.parseString('now').then(function(conversion) {
@@ -46,25 +61,25 @@ exports.testParse = function(options) {
 
 exports.testMaxMin = function(options) {
   var max = new Date();
   var min = new Date();
   var types = options.requisition.system.types;
   var date = types.createType({ name: 'date', max: max, min: min });
   assert.is(date.getMax(), max, 'max setup');
 
-  var incremented = date.nudge(min, 1);
+  var incremented = date.increment(min);
   assert.is(incremented, max, 'incremented');
 };
 
 exports.testIncrement = function(options) {
   var date = options.requisition.system.types.createType('date');
   return date.parseString('now').then(function(conversion) {
-    var plusOne = date.nudge(conversion.value, 1);
-    var minusOne = date.nudge(plusOne, -1);
+    var plusOne = date.increment(conversion.value);
+    var minusOne = date.decrement(plusOne);
 
     // See comments in testParse
     var gap = new Date().getTime() - minusOne.getTime();
     assert.ok(gap < 60000, 'now is less than a minute away');
   });
 };
 
 exports.testInput = function(options) {
@@ -106,17 +121,17 @@ exports.testInput = function(options) {
             arg: ' 1980-01-03',
             status: 'VALID',
             message: ''
           },
         }
       },
       exec: {
         output: [ /^Exec: tsdate/, /2001/, /1980/ ],
-        type: 'testCommandOutput',
+        type: 'string',
         error: false
       }
     },
     {
       setup:    'tsdate 2001/01/01 1980/01/03',
       check: {
         input:  'tsdate 2001/01/01 1980/01/03',
         hints:                              '',
@@ -152,17 +167,17 @@ exports.testInput = function(options) {
             arg: ' 1980/01/03',
             status: 'VALID',
             message: ''
           },
         }
       },
       exec: {
         output: [ /^Exec: tsdate/, /2001/, /1980/ ],
-        type: 'testCommandOutput',
+        type: 'string',
         error: false
       }
     },
     {
       setup:    'tsdate now today',
       check: {
         input:  'tsdate now today',
         hints:                  '',
@@ -193,17 +208,17 @@ exports.testInput = function(options) {
             arg: ' today',
             status: 'VALID',
             message: ''
           },
         }
       },
       exec: {
         output: [ /^Exec: tsdate/, new Date().getFullYear() ],
-        type: 'testCommandOutput',
+        type: 'string',
         error: false
       }
     },
     {
       setup:    'tsdate yesterday tomorrow',
       check: {
         input:  'tsdate yesterday tomorrow',
         hints:                           '',
@@ -233,28 +248,28 @@ exports.testInput = function(options) {
             arg: ' tomorrow',
             status: 'VALID',
             message: ''
           },
         }
       },
       exec: {
         output: [ /^Exec: tsdate/, new Date().getFullYear() ],
-        type: 'testCommandOutput',
+        type: 'string',
         error: false
       }
     }
   ]);
 };
 
 exports.testIncrDecr = function(options) {
   return helpers.audit(options, [
     {
       // createRequisitionAutomator doesn't fake UP/DOWN well enough
-      skipRemainingIf: options.isNode,
+      skipRemainingIf: options.isNoDom,
       setup:    'tsdate 2001-01-01<UP>',
       check: {
         input:  'tsdate 2001-01-02',
         hints:                    ' <d2>',
         markup: 'VVVVVVVVVVVVVVVVV',
         status: 'ERROR',
         message: '',
         args: {
diff --git a/browser/devtools/commandline/test/browser_gcli_exec.js b/browser/devtools/commandline/test/browser_gcli_exec.js
--- a/browser/devtools/commandline/test/browser_gcli_exec.js
+++ b/browser/devtools/commandline/test/browser_gcli_exec.js
@@ -10,28 +10,64 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testExec.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_exec.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var assert = require('../testharness/assert');
 // var helpers = require('./helpers');
+var nodetype = require('gcli/types/node');
+
+var mockBody = {
+  style: {}
+};
+
+var mockEmptyNodeList = {
+  length: 0,
+  item: function() { return null; }
+};
+
+var mockRootNodeList = {
+  length: 1,
+  item: function(i) { return mockBody; }
+};
+
+var mockDoc = {
+  querySelectorAll: function(css) {
+    return (css === ':root') ? mockRootNodeList : mockEmptyNodeList;
+  }
+};
 
 exports.testParamGroup = function(options) {
   var tsg = options.requisition.system.commands.get('tsg');
 
   assert.is(tsg.params[0].groupName, null, 'tsg param 0 group null');
   assert.is(tsg.params[1].groupName, 'First', 'tsg param 1 group First');
   assert.is(tsg.params[2].groupName, 'First', 'tsg param 2 group First');
   assert.is(tsg.params[3].groupName, 'Second', 'tsg param 3 group Second');
@@ -80,17 +116,17 @@ exports.testWithHelpers = function(optio
           optionValue: {
             arg: ' 10',
             status: 'VALID',
             message: ''
           }
         }
       },
       exec: {
-        output: 'Exec: tsv optionType=option1 optionValue=10'
+        output: 'Exec: tsv optionType=string, optionValue=10'
       }
     },
     {
       setup:    'tsv option2 10',
       check: {
         input:  'tsv option2 10',
         hints:                '',
         markup: 'VVVVVVVVVVVVVV',
@@ -110,39 +146,39 @@ exports.testWithHelpers = function(optio
           optionValue: {
             arg: ' 10',
             status: 'VALID',
             message: ''
           }
         }
       },
       exec: {
-        output: 'Exec: tsv optionType=option2 optionValue=10'
+        output: 'Exec: tsv optionType=number, optionValue=10'
       }
     },
     // Delegated remote types can't transfer value types so we only test for
     // the value of optionValue when we're local
     {
       skipIf: options.isRemote,
       setup: 'tsv option1 10',
       check: {
         args: { optionValue: { value: '10' } }
       },
       exec: {
-        output: 'Exec: tsv optionType=option1 optionValue=10'
+        output: 'Exec: tsv optionType=string, optionValue=10'
       }
     },
     {
       skipIf: options.isRemote,
       setup: 'tsv option2 10',
       check: {
         args: { optionValue: { value: 10 } }
       },
       exec: {
-        output: 'Exec: tsv optionType=option2 optionValue=10'
+        output: 'Exec: tsv optionType=number, optionValue=10'
       }
     }
   ]);
 };
 
 exports.testExecText = function(options) {
   return helpers.audit(options, [
     {
@@ -187,17 +223,17 @@ exports.testExecText = function(options)
             value: 'fred bloggs',
             arg: ' fred bloggs',
             status: 'VALID',
             message: ''
           }
         }
       },
       exec: {
-        output: 'Exec: tsr text=fred\\ bloggs'
+        output: 'Exec: tsr text=fred bloggs'
       }
     },
     {
       setup:    'tsr "fred bloggs"',
       check: {
         input:  'tsr "fred bloggs"',
         hints:                   '',
         markup: 'VVVVVVVVVVVVVVVVV',
@@ -212,17 +248,17 @@ exports.testExecText = function(options)
             value: 'fred bloggs',
             arg: ' "fred bloggs"',
             status: 'VALID',
             message: ''
           }
         }
       },
       exec: {
-        output: 'Exec: tsr text=fred\\ bloggs'
+        output: 'Exec: tsr text=fred bloggs'
       }
     },
     {
       setup:    'tsr "fred bloggs',
       check: {
         input:  'tsr "fred bloggs',
         hints:                  '',
         markup: 'VVVVVVVVVVVVVVVV',
@@ -237,17 +273,17 @@ exports.testExecText = function(options)
             value: 'fred bloggs',
             arg: ' "fred bloggs',
             status: 'VALID',
             message: ''
           }
         }
       },
       exec: {
-        output: 'Exec: tsr text=fred\\ bloggs'
+        output: 'Exec: tsr text=fred bloggs'
       }
     }
   ]);
 };
 
 exports.testExecBoolean = function(options) {
   return helpers.audit(options, [
     {
@@ -362,69 +398,74 @@ exports.testExecScript = function(option
         cursor: 13,
         current: 'javascript',
         status: 'VALID',
         predictions: [ ],
         unassigned: [ ],
         args: {
           command: { name: 'tsj' },
           javascript: {
+            value: '1 + 1',
             arg: ' { 1 + 1 }',
             status: 'VALID',
             message: ''
           }
         }
       },
       exec: {
         output: 'Exec: tsj javascript=1 + 1'
       }
     }
   ]);
 };
 
 exports.testExecNode = function(options) {
+  var origDoc = nodetype.getDocument();
+  nodetype.setDocument(mockDoc);
+
   return helpers.audit(options, [
     {
-      skipIf: options.isRemote,
+      skipIf: options.isNoDom,
       setup:    'tse :root',
       check: {
         input:  'tse :root',
         hints:           ' [options]',
         markup: 'VVVVVVVVV',
         cursor: 9,
         current: 'node',
         status: 'VALID',
         predictions: [ ],
         unassigned: [ ],
         args: {
           command: { name: 'tse' },
           node: {
+            value: mockBody,
             arg: ' :root',
             status: 'VALID',
             message: ''
           },
           nodes: {
+            value: mockEmptyNodeList,
             arg: '',
             status: 'VALID',
             message: ''
           },
           nodes2: {
+            value: mockEmptyNodeList,
             arg: '',
             status: 'VALID',
             message: ''
           }
         }
       },
       exec: {
         output: /^Exec: tse/
       },
-      post: function(output) {
-        assert.is(output.data.args.node, ':root', 'node should be :root');
-        assert.is(output.data.args.nodes, 'Error', 'nodes should be Error');
-        assert.is(output.data.args.nodes2, 'Error', 'nodes2 should be Error');
+      post: function() {
+        nodetype.setDocument(origDoc);
       }
     }
   ]);
 };
 
 exports.testExecSubCommand = function(options) {
   return helpers.audit(options, [
     {
@@ -506,17 +547,17 @@ exports.testExecArray = function(options
         outputState: 'false:default',
         args: {
           command: { name: 'tselarr' },
           num: { value: '1', arg: ' 1', status: 'VALID', message: '' },
           arr: { /*value:,*/ arg: '{}', status: 'VALID', message: '' },
         }
       },
       exec: {
-        output: 'Exec: tselarr num=1 arr='
+        output: 'Exec: tselarr num=1, arr='
       }
     },
     {
       setup:    'tselarr 1 a',
       check: {
         input:  'tselarr 1 a',
         hints:             '',
         markup: 'VVVVVVVVVVV',
@@ -527,17 +568,17 @@ exports.testExecArray = function(options
         unassigned: [ ],
         args: {
           command: { name: 'tselarr' },
           num: { value: '1', arg: ' 1', status: 'VALID', message: '' },
           arr: { /*value:a,*/ arg: '{ a}', status: 'VALID', message: '' },
         }
       },
       exec: {
-        output: 'Exec: tselarr num=1 arr=a'
+        output: 'Exec: tselarr num=1, arr=a'
       }
     },
     {
       setup:    'tselarr 1 a b',
       check: {
         input:  'tselarr 1 a b',
         hints:               '',
         markup: 'VVVVVVVVVVVVV',
@@ -548,17 +589,17 @@ exports.testExecArray = function(options
         unassigned: [ ],
         args: {
           command: { name: 'tselarr' },
           num: { value: '1', arg: ' 1', status: 'VALID', message: '' },
           arr: { /*value:a,b,*/ arg: '{ a, b}', status: 'VALID', message: '' },
         }
       },
       exec: {
-        output: 'Exec: tselarr num=1 arr=a b'
+        output: 'Exec: tselarr num=1, arr=a,b'
       }
     }
   ]);
 };
 
 exports.testExecMultiple = function(options) {
   return helpers.audit(options, [
     {
@@ -575,17 +616,17 @@ exports.testExecMultiple = function(opti
         args: {
           command: { name: 'tsm' },
           abc: { value: 'a', arg: ' a', status: 'VALID', message: '' },
           txt: { value: '10', arg: ' 10', status: 'VALID', message: '' },
           num: { value: 10, arg: ' 10', status: 'VALID', message: '' },
         }
       },
       exec: {
-        output: 'Exec: tsm abc=a txt=10 num=10'
+        output: 'Exec: tsm abc=a, txt=10, num=10'
       }
     }
   ]);
 };
 
 exports.testExecDefaults = function(options) {
   return helpers.audit(options, [
     {
@@ -605,52 +646,14 @@ exports.testExecDefaults = function(opti
           solo: { value: 'aaa', arg: ' aaa', status: 'VALID', message: '' },
           txt1: { value: undefined, arg: '', status: 'VALID', message: '' },
           bool: { value: false, arg: '', status: 'VALID', message: '' },
           txt2: { value: undefined, arg: '', status: 'VALID', message: '' },
           num: { value: undefined, arg: '', status: 'VALID', message: '' },
         }
       },
       exec: {
-        output: 'Exec: tsg solo=aaa txt1= bool=false txt2=d num=42'
+        output: 'Exec: tsg solo=aaa, txt1=null, bool=false, txt2=d, num=42'
       }
     }
   ]);
+
 };
-
-exports.testNested = function(options) {
-  var commands = options.requisition.system.commands;
-  commands.add({
-    name: 'nestorama',
-    exec: function(args, context) {
-      return context.updateExec('tsb').then(function(tsbOutput) {
-        return context.updateExec('tsu 6').then(function(tsuOutput) {
-          return JSON.stringify({
-            tsb: tsbOutput.data,
-            tsu: tsuOutput.data
-          });
-        });
-      });
-    }
-  });
-
-  return helpers.audit(options, [
-    {
-      setup: 'nestorama',
-      exec: {
-        output:
-          '{' +
-            '"tsb":{' +
-              '"name":"tsb",' +
-              '"args":{"toggle":"false"}' +
-            '},' +
-            '"tsu":{' +
-              '"name":"tsu",' +
-              '"args":{"num":"6"}' +
-            '}' +
-          '}'
-      },
-      post: function() {
-        commands.remove('nestorama');
-      }
-    }
-  ]);
-};
diff --git a/browser/devtools/commandline/test/browser_gcli_fail.js b/browser/devtools/commandline/test/browser_gcli_fail.js
--- a/browser/devtools/commandline/test/browser_gcli_fail.js
+++ b/browser/devtools/commandline/test/browser_gcli_fail.js
@@ -10,26 +10,41 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testFail.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_fail.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var helpers = require('./helpers');
 
 exports.testBasic = function(options) {
   return helpers.audit(options, [
     {
       setup: 'tsfail reject',
       exec: {
         output: 'rejected promise',
diff --git a/browser/devtools/commandline/test/browser_gcli_file.js b/browser/devtools/commandline/test/browser_gcli_file.js
--- a/browser/devtools/commandline/test/browser_gcli_file.js
+++ b/browser/devtools/commandline/test/browser_gcli_file.js
@@ -10,34 +10,52 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testFile.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_file.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var helpers = require('./helpers');
 
 var local = false;
 
 exports.testBasic = function(options) {
   return helpers.audit(options, [
     {
-      skipRemainingIf: options.isFirefox, // No file implementation in Firefox
+      // These tests require us to be using node directly or to be in
+      // PhantomJS connected to an execute enabled node server or to be in
+      // firefox.
+      skipRemainingIf: options.isPhantomjs || options.isFirefox,
       setup:    'tsfile open /',
       check: {
         input:  'tsfile open /',
         hints:               '',
         markup: 'VVVVVVVVVVVVI',
         cursor: 13,
         current: 'p1',
         status: 'ERROR',
diff --git a/browser/devtools/commandline/test/browser_gcli_fileparser.js b/browser/devtools/commandline/test/browser_gcli_fileparser.js
--- a/browser/devtools/commandline/test/browser_gcli_fileparser.js
+++ b/browser/devtools/commandline/test/browser_gcli_fileparser.js
@@ -10,26 +10,41 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testFileparser.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_fileparser.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var assert = require('../testharness/assert');
 var fileparser = require('gcli/util/fileparser');
 
 var local = false;
 
 exports.testGetPredictor = function(options) {
   if (!options.isNode || !local) {
     assert.log('Skipping tests due to install differences.');
diff --git a/browser/devtools/commandline/test/browser_gcli_filesystem.js b/browser/devtools/commandline/test/browser_gcli_filesystem.js
--- a/browser/devtools/commandline/test/browser_gcli_filesystem.js
+++ b/browser/devtools/commandline/test/browser_gcli_filesystem.js
@@ -10,26 +10,41 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testFilesystem.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_filesystem.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var assert = require('../testharness/assert');
 // var helpers = require('./helpers');
 var filesystem = require('gcli/util/filesystem');
 
 exports.testSplit = function(options) {
   if (!options.isNode) {
     return;
   }
diff --git a/browser/devtools/commandline/test/browser_gcli_focus.js b/browser/devtools/commandline/test/browser_gcli_focus.js
--- a/browser/devtools/commandline/test/browser_gcli_focus.js
+++ b/browser/devtools/commandline/test/browser_gcli_focus.js
@@ -10,26 +10,41 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testFocus.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_focus.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var helpers = require('./helpers');
 
 exports.testBasic = function(options) {
   return helpers.audit(options, [
     {
       name: 'exec setup',
       setup: function() {
         // Just check that we've got focus, and everything is clear
diff --git a/browser/devtools/commandline/test/browser_gcli_history.js b/browser/devtools/commandline/test/browser_gcli_history.js
--- a/browser/devtools/commandline/test/browser_gcli_history.js
+++ b/browser/devtools/commandline/test/browser_gcli_history.js
@@ -10,26 +10,41 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testHistory.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_history.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var assert = require('../testharness/assert');
 var History = require('gcli/ui/history').History;
 
 exports.testSimpleHistory = function (options) {
   var history = new History({});
   history.add('foo');
   history.add('bar');
   assert.is(history.backward(), 'bar');
diff --git a/browser/devtools/commandline/test/browser_gcli_incomplete.js b/browser/devtools/commandline/test/browser_gcli_incomplete.js
--- a/browser/devtools/commandline/test/browser_gcli_incomplete.js
+++ b/browser/devtools/commandline/test/browser_gcli_incomplete.js
@@ -10,26 +10,41 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testIncomplete.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_incomplete.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var assert = require('../testharness/assert');
 // var helpers = require('./helpers');
 
 exports.testBasic = function(options) {
   return helpers.audit(options, [
     {
       setup: 'tsu 2 extra',
       check: {
diff --git a/browser/devtools/commandline/test/browser_gcli_inputter.js b/browser/devtools/commandline/test/browser_gcli_inputter.js
--- a/browser/devtools/commandline/test/browser_gcli_inputter.js
+++ b/browser/devtools/commandline/test/browser_gcli_inputter.js
@@ -10,26 +10,41 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testInputter.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_inputter.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var assert = require('../testharness/assert');
 var KeyEvent = require('gcli/util/util').KeyEvent;
 
 var latestEvent;
 var latestData;
 
 var outputted = function(ev) {
   latestEvent = ev;
@@ -69,17 +84,17 @@ exports.testOutput = function(options) {
             'tss',
             'terminal should do nothing on RETURN keyDown');
   assert.is(latestEvent, undefined, 'no events this test');
   assert.is(latestData, undefined, 'no data this test');
 
   var ev1 = { keyCode: KeyEvent.DOM_VK_RETURN };
   return terminal.handleKeyUp(ev1).then(function() {
     assert.ok(latestEvent != null, 'events this test');
-    assert.is(latestData.name, 'tss', 'last command is tss');
+    assert.is(latestData, 'Exec: tss ', 'last command is tss');
 
     assert.is(terminal.getInputState().typed,
               '',
               'terminal should exec on RETURN keyUp');
 
     assert.ok(focusManager._recentOutput, 'recent output happened');
 
     var ev2 = { keyCode: KeyEvent.DOM_VK_F1 };
diff --git a/browser/devtools/commandline/test/browser_gcli_intro.js b/browser/devtools/commandline/test/browser_gcli_intro.js
--- a/browser/devtools/commandline/test/browser_gcli_intro.js
+++ b/browser/devtools/commandline/test/browser_gcli_intro.js
@@ -10,26 +10,41 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testIntro.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_intro.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var helpers = require('./helpers');
 
 exports.testIntroStatus = function(options) {
   return helpers.audit(options, [
     {
       skipRemainingIf: function commandIntroMissing() {
         return options.requisition.system.commands.get('intro') == null;
       },
@@ -47,16 +62,17 @@ exports.testIntroStatus = function(optio
         typed:  'intro foo',
         markup: 'VVVVVVEEE',
         status: 'ERROR',
         hints: ''
       }
     },
     {
       setup:    'intro',
+      skipIf: options.isNoDom,
       check: {
         typed:  'intro',
         markup: 'VVVVV',
         status: 'VALID',
         hints: ''
       },
       exec: {
         output: [
diff --git a/browser/devtools/commandline/test/browser_gcli_js.js b/browser/devtools/commandline/test/browser_gcli_js.js
--- a/browser/devtools/commandline/test/browser_gcli_js.js
+++ b/browser/devtools/commandline/test/browser_gcli_js.js
@@ -10,65 +10,83 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testJs.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_js.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var assert = require('../testharness/assert');
 // var helpers = require('./helpers');
+var javascript = require('gcli/types/javascript');
+
+var tempWindow;
 
 exports.setup = function(options) {
-  if (jsTestDisallowed(options)) {
+  if (options.isNoDom) {
     return;
   }
 
-  // Check that we're not trespassing on 'donteval'
-  var win = options.requisition.environment.window;
-  Object.defineProperty(win, 'donteval', {
+  tempWindow = javascript.getGlobalObject();
+  Object.defineProperty(options.window, 'donteval', {
     get: function() {
       assert.ok(false, 'donteval should not be used');
-      console.trace();
       return { cant: '', touch: '', 'this': '' };
     },
     enumerable: true,
-    configurable: true
+    configurable : true
   });
+  javascript.setGlobalObject(options.window);
 };
 
 exports.shutdown = function(options) {
-  if (jsTestDisallowed(options)) {
+  if (options.isNoDom) {
     return;
   }
 
-  delete options.requisition.environment.window.donteval;
+  javascript.setGlobalObject(tempWindow);
+  tempWindow = undefined;
+  delete options.window.donteval;
 };
 
-function jsTestDisallowed(options) {
-  return options.isRemote || // Altering the environment (which isn't remoted)
-         options.isNode ||
+function jsTestAllowed(options) {
+  return options.isRemote || options.isNoDom ||
          options.requisition.system.commands.get('{') == null;
 }
 
 exports.testBasic = function(options) {
   return helpers.audit(options, [
     {
-      skipRemainingIf: jsTestDisallowed,
+      skipRemainingIf: jsTestAllowed,
       setup:    '{',
       check: {
         input:  '{',
         hints:   '',
         markup: 'V',
         cursor: 1,
         current: 'javascript',
         status: 'ERROR',
@@ -213,17 +231,17 @@ exports.testBasic = function(options) {
       }
     }
   ]);
 };
 
 exports.testDocument = function(options) {
   return helpers.audit(options, [
     {
-      skipRemainingIf: jsTestDisallowed,
+      skipRemainingIf: jsTestAllowed,
       setup:    '{ docu',
       check: {
         input:  '{ docu',
         hints:        'ment',
         markup: 'VVIIII',
         cursor: 6,
         current: 'javascript',
         status: 'ERROR',
@@ -292,18 +310,17 @@ exports.testDocument = function(options)
         current: 'javascript',
         status: 'VALID',
         predictions: [ ],
         unassigned: [ ],
         args: {
           command: { name: '{' },
           javascript: {
             value: 'document.title',
-            // arg: '{ document.title ',
-            // Node/JSDom gets this wrong and omits the trailing space. Why?
+            arg: '{ document.title ',
             status: 'VALID',
             message: ''
           }
         }
       }
     },
     {
       setup:    '{ document.title',
@@ -326,19 +343,24 @@ exports.testDocument = function(options)
           }
         }
       }
     }
   ]);
 };
 
 exports.testDonteval = function(options) {
+  if (!options.isNoDom) {
+    // nodom causes an eval here, maybe that's node/v8?
+    assert.ok('donteval' in options.window, 'donteval exists');
+  }
+
   return helpers.audit(options, [
     {
-      skipRemainingIf: true, // Commented out until we fix non-enumerable props
+      skipRemainingIf: jsTestAllowed,
       setup:    '{ don',
       check: {
         input:  '{ don',
         hints:       'teval',
         markup: 'VVIII',
         cursor: 5,
         current: 'javascript',
         status: 'ERROR',
@@ -449,17 +471,17 @@ exports.testDonteval = function(options)
       }
     }
   ]);
 };
 
 exports.testExec = function(options) {
   return helpers.audit(options, [
     {
-      skipRemainingIf: jsTestDisallowed,
+      skipRemainingIf: jsTestAllowed,
       setup:    '{ 1+1',
       check: {
         input:  '{ 1+1',
         hints:       '',
         markup: 'VVVVV',
         cursor: 5,
         current: 'javascript',
         status: 'VALID',
diff --git a/browser/devtools/commandline/test/browser_gcli_keyboard1.js b/browser/devtools/commandline/test/browser_gcli_keyboard1.js
--- a/browser/devtools/commandline/test/browser_gcli_keyboard1.js
+++ b/browser/devtools/commandline/test/browser_gcli_keyboard1.js
@@ -10,29 +10,56 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testKeyboard1.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_keyboard1.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 var javascript = require('gcli/types/javascript');
 // var helpers = require('./helpers');
 
+var tempWindow;
+
+exports.setup = function(options) {
+  tempWindow = javascript.getGlobalObject();
+  javascript.setGlobalObject(options.window);
+};
+
+exports.shutdown = function(options) {
+  javascript.setGlobalObject(tempWindow);
+  tempWindow = undefined;
+};
+
 exports.testSimple = function(options) {
   return helpers.audit(options, [
     {
       setup: 'tsela<TAB>',
       check: { input: 'tselarr ', cursor: 8 }
     },
     {
       setup: 'tsn di<TAB>',
@@ -43,30 +70,35 @@ exports.testSimple = function(options) {
       check: { input: 'tsg aaa ', cursor: 8 }
     }
   ]);
 };
 
 exports.testScript = function(options) {
   return helpers.audit(options, [
     {
-      skipRemainingIf: options.isRemote ||
-              options.requisition.system.commands.get('{') == null,
+      skipIf: function commandJsMissing() {
+        return options.requisition.system.commands.get('{') == null;
+      },
       setup: '{ wind<TAB>',
       check: { input: '{ window' }
     },
     {
+      skipIf: function commandJsMissing() {
+        return options.requisition.system.commands.get('{') == null;
+      },
       setup: '{ window.docum<TAB>',
       check: { input: '{ window.document' }
     }
   ]);
 };
 
 exports.testJsdom = function(options) {
   return helpers.audit(options, [
     {
-      skipIf: options.isRemote ||
-              options.requisition.system.commands.get('{') == null,
+      skipIf: function jsDomOrCommandJsMissing() {
+        return options.requisition.system.commands.get('{') == null;
+      },
       setup: '{ window.document.titl<TAB>',
       check: { input: '{ window.document.title ' }
     }
   ]);
 };
diff --git a/browser/devtools/commandline/test/browser_gcli_keyboard2.js b/browser/devtools/commandline/test/browser_gcli_keyboard2.js
--- a/browser/devtools/commandline/test/browser_gcli_keyboard2.js
+++ b/browser/devtools/commandline/test/browser_gcli_keyboard2.js
@@ -10,26 +10,41 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testKeyboard2.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_keyboard2.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var helpers = require('./helpers');
 
 exports.testIncr = function(options) {
   return helpers.audit(options, [
     /*
     // We currently refuse to increment/decrement things with a non-valid
     // status which makes sense for many cases, and is a decent default.
     // However in theory we could do better, these tests are there for then
diff --git a/browser/devtools/commandline/test/browser_gcli_keyboard3.js b/browser/devtools/commandline/test/browser_gcli_keyboard3.js
--- a/browser/devtools/commandline/test/browser_gcli_keyboard3.js
+++ b/browser/devtools/commandline/test/browser_gcli_keyboard3.js
@@ -10,26 +10,41 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testKeyboard3.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_keyboard3.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var helpers = require('./helpers');
 
 exports.testDecr = function(options) {
   return helpers.audit(options, [
     /*
     // See notes at top of testIncr in testKeyboard2.js
     {
       setup: 'tsu -70<DOWN>',
diff --git a/browser/devtools/commandline/test/browser_gcli_keyboard4.js b/browser/devtools/commandline/test/browser_gcli_keyboard4.js
--- a/browser/devtools/commandline/test/browser_gcli_keyboard4.js
+++ b/browser/devtools/commandline/test/browser_gcli_keyboard4.js
@@ -10,26 +10,41 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testKeyboard4.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_keyboard4.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var helpers = require('./helpers');
 
 exports.testIncrFloat = function(options) {
   return helpers.audit(options, [
     /*
     // See notes at top of testIncr
     {
       setup: 'tsf -70<UP>',
diff --git a/browser/devtools/commandline/test/browser_gcli_keyboard5.js b/browser/devtools/commandline/test/browser_gcli_keyboard5.js
--- a/browser/devtools/commandline/test/browser_gcli_keyboard5.js
+++ b/browser/devtools/commandline/test/browser_gcli_keyboard5.js
@@ -10,26 +10,41 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testKeyboard5.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_keyboard5.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var helpers = require('./helpers');
 
 exports.testCompleteDown = function(options) {
   return helpers.audit(options, [
     {
       setup: 'tsn e<DOWN><DOWN><DOWN><DOWN><DOWN><TAB>',
       check: { input: 'tsn exte ' }
     },
diff --git a/browser/devtools/commandline/test/browser_gcli_keyboard6.js b/browser/devtools/commandline/test/browser_gcli_keyboard6.js
--- a/browser/devtools/commandline/test/browser_gcli_keyboard6.js
+++ b/browser/devtools/commandline/test/browser_gcli_keyboard6.js
@@ -10,26 +10,41 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testKeyboard6.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_keyboard6.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var helpers = require('./helpers');
 
 exports.testCompleteUp = function(options) {
   return helpers.audit(options, [
     {
       setup: 'tsn e<UP><TAB>',
       check: { input: 'tsn extend ' }
     },
diff --git a/browser/devtools/commandline/test/browser_gcli_menu.js b/browser/devtools/commandline/test/browser_gcli_menu.js
--- a/browser/devtools/commandline/test/browser_gcli_menu.js
+++ b/browser/devtools/commandline/test/browser_gcli_menu.js
@@ -10,26 +10,41 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testMenu.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_menu.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var helpers = require('./helpers');
 
 exports.testOptions = function(options) {
   return helpers.audit(options, [
     {
       setup:    'tslong',
       check: {
         input:  'tslong',
diff --git a/browser/devtools/commandline/test/browser_gcli_node.js b/browser/devtools/commandline/test/browser_gcli_node.js
--- a/browser/devtools/commandline/test/browser_gcli_node.js
+++ b/browser/devtools/commandline/test/browser_gcli_node.js
@@ -10,32 +10,59 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testNode.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_node.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var assert = require('../testharness/assert');
 // var helpers = require('./helpers');
+var nodetype = require('gcli/types/node');
+
+exports.setup = function(options) {
+  if (options.window) {
+    nodetype.setDocument(options.window.document);
+  }
+};
+
+exports.shutdown = function(options) {
+  nodetype.unsetDocument();
+};
 
 exports.testNode = function(options) {
   return helpers.audit(options, [
     {
+      skipRemainingIf: options.isNoDom,
       setup:    'tse ',
       check: {
         input:  'tse ',
         hints:      '<node> [options]',
         markup: 'VVVV',
         cursor: 4,
         current: 'node',
         status: 'ERROR',
@@ -133,18 +160,21 @@ exports.testNode = function(options) {
           nodes2: { status: 'VALID' }
         }
       }
     }
   ]);
 };
 
 exports.testNodeDom = function(options) {
+  var requisition = options.requisition;
+
   return helpers.audit(options, [
     {
+      skipRemainingIf: options.isNoDom,
       setup:    'tse :root',
       check: {
         input:  'tse :root',
         hints:           ' [options]',
         markup: 'VVVVVVVVV',
         cursor: 9,
         current: 'node',
         status: 'VALID',
@@ -167,22 +197,20 @@ exports.testNodeDom = function(options) 
         status: 'VALID',
         args: {
           command: { name: 'tse' },
           node: { arg: ' :root ', status: 'VALID' },
           nodes: { status: 'VALID' },
           nodes2: { status: 'VALID' }
         }
       },
-      exec: {
-      },
-      post: function(output) {
-        if (!options.isRemote) {
-          assert.is(output.args.node.tagName, 'HTML', ':root tagName');
-        }
+      post: function() {
+        assert.is(requisition.getAssignment('node').value.tagName,
+                  'HTML',
+                  'root id');
       }
     },
     {
       setup:    'tse #gcli-nomatch',
       check: {
         input:  'tse #gcli-nomatch',
         hints:                   ' [options]',
         markup: 'VVVVIIIIIIIIIIIII',
@@ -201,44 +229,39 @@ exports.testNodeDom = function(options) 
           nodes2: { status: 'VALID' }
         }
       }
     }
   ]);
 };
 
 exports.testNodes = function(options) {
+  var requisition = options.requisition;
+
   return helpers.audit(options, [
     {
+      skipRemainingIf: options.isNoDom,
       setup:    'tse :root --nodes *',
       check: {
         input:  'tse :root --nodes *',
         hints:                       ' [options]',
         markup: 'VVVVVVVVVVVVVVVVVVV',
         current: 'nodes',
         status: 'VALID',
         args: {
           command: { name: 'tse' },
           node: { arg: ' :root', status: 'VALID' },
           nodes: { arg: ' --nodes *', status: 'VALID' },
           nodes2: { status: 'VALID' }
         }
       },
-      exec: {
-      },
-      post: function(output) {
-        if (!options.isRemote) {
-          assert.is(output.args.node.tagName, 'HTML', ':root tagName');
-          assert.ok(output.args.nodes.length > 3, 'nodes length');
-          assert.is(output.args.nodes2.length, 0, 'nodes2 length');
-        }
-
-        assert.is(output.data.args.node, ':root', 'node data');
-        assert.is(output.data.args.nodes, '*', 'nodes data');
-        assert.is(output.data.args.nodes2, 'Error', 'nodes2 data');
+      post: function() {
+        assert.is(requisition.getAssignment('node').value.tagName,
+                  'HTML',
+                  '#gcli-input id');
       }
     },
     {
       setup:    'tse :root --nodes2 div',
       check: {
         input:  'tse :root --nodes2 div',
         hints:                       ' [options]',
         markup: 'VVVVVVVVVVVVVVVVVVVVVV',
@@ -247,28 +270,20 @@ exports.testNodes = function(options) {
         status: 'VALID',
         args: {
           command: { name: 'tse' },
           node: { arg: ' :root', status: 'VALID' },
           nodes: { status: 'VALID' },
           nodes2: { arg: ' --nodes2 div', status: 'VALID' }
         }
       },
-      exec: {
-      },
-      post: function(output) {
-        if (!options.isRemote) {
-          assert.is(output.args.node.tagName, 'HTML', ':root tagName');
-          assert.is(output.args.nodes.length, 0, 'nodes length');
-          assert.is(output.args.nodes2.item(0).tagName, 'DIV', 'div tagName');
-        }
-
-        assert.is(output.data.args.node, ':root', 'node data');
-        assert.is(output.data.args.nodes, 'Error', 'nodes data');
-        assert.is(output.data.args.nodes2, 'div', 'nodes2 data');
+      post: function() {
+        assert.is(requisition.getAssignment('node').value.tagName,
+                  'HTML',
+                  'root id');
       }
     },
     {
       setup:    'tse --nodes ffff',
       check: {
         input:  'tse --nodes ffff',
         hints:                  ' <node> [options]',
         markup: 'VVVVIIIIIIIVIIII',
@@ -285,16 +300,23 @@ exports.testNodes = function(options) {
           nodes: {
             value: undefined,
             arg: ' --nodes ffff',
             status: 'INCOMPLETE',
             message: 'No matches'
           },
           nodes2: { arg: '', status: 'VALID', message: '' }
         }
+      },
+      post: function() {
+        /*
+        assert.is(requisition.getAssignment('nodes2').value.constructor.name,
+                  'NodeList',
+                  '#gcli-input id');
+        */
       }
     },
     {
       setup:    'tse --nodes2 ffff',
       check: {
         input:  'tse --nodes2 ffff',
         hints:                   ' <node> [options]',
         markup: 'VVVVVVVVVVVVVVVVV',
@@ -306,12 +328,22 @@ exports.testNodes = function(options) {
           node: {
             value: undefined,
             arg: '',
             status: 'INCOMPLETE'
           },
           nodes: { arg: '', status: 'VALID', message: '' },
           nodes2: { arg: ' --nodes2 ffff', status: 'VALID', message: '' }
         }
+      },
+      post: function() {
+        /*
+        assert.is(requisition.getAssignment('nodes').value.constructor.name,
+                  'NodeList',
+                  '#gcli-input id');
+        assert.is(requisition.getAssignment('nodes2').value.constructor.name,
+                  'NodeList',
+                  '#gcli-input id');
+        */
       }
     },
   ]);
 };
diff --git a/browser/devtools/commandline/test/browser_gcli_pref1.js b/browser/devtools/commandline/test/browser_gcli_pref1.js
--- a/browser/devtools/commandline/test/browser_gcli_pref1.js
+++ b/browser/devtools/commandline/test/browser_gcli_pref1.js
@@ -10,26 +10,41 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testPref1.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_pref1.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var helpers = require('./helpers');
 
 exports.testPrefShowStatus = function(options) {
   return helpers.audit(options, [
     {
       skipRemainingIf: options.requisition.system.commands.get('pref') == null,
       setup:    'pref s',
       check: {
@@ -47,17 +62,17 @@ exports.testPrefShowStatus = function(op
         markup: 'VVVVVVVVV',
         status: 'ERROR'
       }
     },
     {
       setup:    'pref show ',
       check: {
         typed:  'pref show ',
-        hints:            'eagerHelper',
+        hints:            'allowSet',
         markup: 'VVVVVVVVVV',
         status: 'ERROR'
       }
     },
     {
       setup:    'pref show tempTBo',
       check: {
         typed:  'pref show tempTBo',
@@ -124,32 +139,31 @@ exports.testPrefSetStatus = function(opt
         markup: 'IIIIVIII',
         status: 'ERROR'
       }
     },
     {
       setup:    'pref set ',
       check: {
         typed:  'pref set ',
-        hints:           'eagerHelper <value>',
+        hints:           'allowSet <value>',
         markup: 'VVVVVVVVV',
         status: 'ERROR'
       }
     },
     {
       setup:    'pref set tempTBo',
       check: {
         typed:  'pref set tempTBo',
         hints:                  'ol <value>',
         markup: 'VVVVVVVVVIIIIIII',
         status: 'ERROR'
       }
     },
     {
-      skipIf: options.isRemote,
       setup:    'pref set tempTBool 4',
       check: {
         typed:  'pref set tempTBool 4',
         markup: 'VVVVVVVVVVVVVVVVVVVE',
         status: 'ERROR',
         hints: ''
       }
     },
diff --git a/browser/devtools/commandline/test/browser_gcli_pref2.js b/browser/devtools/commandline/test/browser_gcli_pref2.js
--- a/browser/devtools/commandline/test/browser_gcli_pref2.js
+++ b/browser/devtools/commandline/test/browser_gcli_pref2.js
@@ -10,55 +10,75 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testPref2.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_pref2.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var assert = require('../testharness/assert');
 // var helpers = require('./helpers');
 var mockSettings = require('./mockSettings');
 
 exports.testPrefExec = function(options) {
   if (options.requisition.system.commands.get('pref') == null) {
     assert.log('Skipping test; missing pref command.');
     return;
   }
 
   if (options.isRemote) {
     assert.log('Skipping test which assumes local settings.');
     return;
   }
 
+  var allowSet = settings.getSetting('allowSet');
+  var initialAllowSet = allowSet.value;
+  allowSet.value = false;
+
   assert.is(mockSettings.tempNumber.value, 42, 'set to 42');
 
   return helpers.audit(options, [
     {
       // Delegated remote types can't transfer value types so we only test for
       // the value of 'value' when we're local
       skipIf: options.isRemote,
       setup: 'pref set tempNumber 4',
       check: {
         setting: { value: mockSettings.tempNumber },
         args: { value: { value: 4 } }
       }
     },
     {
+      skipRemainingIf: options.isNoDom,
       setup:    'pref set tempNumber 4',
       check: {
         input:  'pref set tempNumber 4',
         hints:                       '',
         markup: 'VVVVVVVVVVVVVVVVVVVVV',
         cursor: 21,
         current: 'value',
         status: 'VALID',
@@ -74,16 +94,26 @@ exports.testPrefExec = function(options)
           value: {
             arg: ' 4',
             status: 'VALID',
             message: ''
           }
         }
       },
       exec: {
+        output: [ /void your warranty/, /I promise/ ]
+      },
+      post: function() {
+        assert.is(mockSettings.tempNumber.value, 42, 'still set to 42');
+        allowSet.value = true;
+      }
+    },
+    {
+      setup:    'pref set tempNumber 4',
+      exec: {
         output: ''
       },
       post: function() {
         assert.is(mockSettings.tempNumber.value, 4, 'set to 4');
       }
     },
     {
       setup:    'pref reset tempNumber',
@@ -93,16 +123,18 @@ exports.testPrefExec = function(options)
           setting: { value: mockSettings.tempNumber }
         }
       },
       exec: {
         output: ''
       },
       post: function() {
         assert.is(mockSettings.tempNumber.value, 42, 'reset to 42');
+
+        allowSet.value = initialAllowSet;
       }
     },
     {
       skipRemainingIf: function commandPrefListMissing() {
         return options.requisition.system.commands.get('pref list') == null;
       },
       setup:    'pref list tempNum',
       check: {
diff --git a/browser/devtools/commandline/test/browser_gcli_remotews.js b/browser/devtools/commandline/test/browser_gcli_remotews.js
--- a/browser/devtools/commandline/test/browser_gcli_remotews.js
+++ b/browser/devtools/commandline/test/browser_gcli_remotews.js
@@ -10,26 +10,41 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testRemoteWs.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_remotews.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var assert = require('../testharness/assert');
 // var helpers = require('./helpers');
 
 // testRemoteWs and testRemoteXhr are virtually identical.
 // Changes made here should be made there too.
 // They are kept separate to save adding complexity to the test system and so
 // to help us select the test that are available in different environments
 
@@ -63,18 +78,18 @@ exports.testRemoteWebsocket = function(o
         error: false
       }
     },
     {
       setup: 'disconnect remote',
       check: {
         args: {
           prefix: {
-            value: function(front) {
-              assert.is(front.prefix, 'remote', 'disconnecting remote');
+            value: function(connection) {
+              assert.is(connection.prefix, 'remote', 'disconnecting remote');
             }
           }
         }
       },
       exec: {
         output: /^Removed [0-9]* commands.$/,
         type: 'string',
         error: false
@@ -92,18 +107,18 @@ exports.testRemoteWebsocket = function(o
         error: false
       }
     },
     {
       setup: 'disconnect remote',
       check: {
         args: {
           prefix: {
-            value: function(front) {
-              assert.is(front.prefix, 'remote', 'disconnecting remote');
+            value: function(connection) {
+              assert.is(connection.prefix, 'remote', 'disconnecting remote');
             }
           }
         }
       },
       exec: {
         output: /^Removed [0-9]* commands.$/,
         type: 'string',
         error: false
@@ -446,18 +461,18 @@ exports.testRemoteWebsocket = function(o
         input:  'disconnect remote',
         hints:                   '',
         markup: 'VVVVVVVVVVVVVVVVV',
         status: 'VALID',
         message: '',
         unassigned: [ ],
         args: {
           prefix: {
-            value: function(front) {
-              assert.is(front.prefix, 'remote', 'disconnecting remote');
+            value: function(connection) {
+              assert.is(connection.prefix, 'remote', 'disconnecting remote');
             },
             arg: ' remote',
             status: 'VALID',
             message: ''
           }
         }
       },
       exec: {
diff --git a/browser/devtools/commandline/test/browser_gcli_remotexhr.js b/browser/devtools/commandline/test/browser_gcli_remotexhr.js
--- a/browser/devtools/commandline/test/browser_gcli_remotexhr.js
+++ b/browser/devtools/commandline/test/browser_gcli_remotexhr.js
@@ -10,26 +10,41 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testRemoteXhr.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_remotexhr.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var assert = require('../testharness/assert');
 // var helpers = require('./helpers');
 
 // testRemoteWs and testRemoteXhr are virtually identical.
 // Changes made here should be made there too.
 // They are kept separate to save adding complexity to the test system and so
 // to help us select the test that are available in different environments
 
@@ -63,18 +78,18 @@ exports.testRemoteXhr = function(options
         error: false
       }
     },
     {
       setup: 'disconnect remote',
       check: {
         args: {
           prefix: {
-            value: function(front) {
-              assert.is(front.prefix, 'remote', 'disconnecting remote');
+            value: function(connection) {
+              assert.is(connection.prefix, 'remote', 'disconnecting remote');
             }
           }
         }
       },
       exec: {
         output: /^Removed [0-9]* commands.$/,
         type: 'string',
         error: false
@@ -92,18 +107,18 @@ exports.testRemoteXhr = function(options
         error: false
       }
     },
     {
       setup: 'disconnect remote',
       check: {
         args: {
           prefix: {
-            value: function(front) {
-              assert.is(front.prefix, 'remote', 'disconnecting remote');
+            value: function(connection) {
+              assert.is(connection.prefix, 'remote', 'disconnecting remote');
             }
           }
         }
       },
       exec: {
         output: /^Removed [0-9]* commands.$/,
         type: 'string',
         error: false
@@ -446,18 +461,18 @@ exports.testRemoteXhr = function(options
         input:  'disconnect remote',
         hints:                   '',
         markup: 'VVVVVVVVVVVVVVVVV',
         status: 'VALID',
         message: '',
         unassigned: [ ],
         args: {
           prefix: {
-            value: function(front) {
-              assert.is(front.prefix, 'remote', 'disconnecting remote');
+            value: function(connection) {
+              assert.is(connection.prefix, 'remote', 'disconnecting remote');
             },
             arg: ' remote',
             status: 'VALID',
             message: ''
           }
         }
       },
       exec: {
diff --git a/browser/devtools/commandline/test/browser_gcli_resource.js b/browser/devtools/commandline/test/browser_gcli_resource.js
--- a/browser/devtools/commandline/test/browser_gcli_resource.js
+++ b/browser/devtools/commandline/test/browser_gcli_resource.js
@@ -10,142 +10,156 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testResource.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_resource.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
-// var helpers = require('./helpers');
+// <INJECTED SOURCE:END>
+
 // var assert = require('../testharness/assert');
 
 var Promise = require('gcli/util/promise').Promise;
 var util = require('gcli/util/util');
 var resource = require('gcli/types/resource');
 var Status = require('gcli/types/types').Status;
 
-exports.testCommand = function(options) {
-  return helpers.audit(options, [
-    {
-      setup:    'tsres ',
-      check: {
-        predictionsContains: [ 'inline-css' ],
-      }
-    }
-  ]);
+
+var tempDocument;
+
+exports.setup = function(options) {
+  tempDocument = resource.getDocument();
+  if (options.window) {
+    resource.setDocument(options.window.document);
+  }
+};
+
+exports.shutdown = function(options) {
+  resource.setDocument(tempDocument);
+  tempDocument = undefined;
 };
 
 exports.testAllPredictions1 = function(options) {
-  if (options.isRemote) {
-    assert.log('Can\'t directly test remote types locally.');
+  if (options.isFirefox || options.isNoDom) {
+    assert.log('Skipping checks due to firefox document.stylsheets support.');
     return;
   }
 
-  var context = options.requisition.conversionContext;
   var resource = options.requisition.system.types.createType('resource');
-  return resource.getLookup(context).then(function(opts) {
+  return resource.getLookup().then(function(opts) {
     assert.ok(opts.length > 1, 'have all resources');
 
     return util.promiseEach(opts, function(prediction) {
-      return checkPrediction(resource, prediction, context);
+      return checkPrediction(resource, prediction);
     });
   });
 };
 
 exports.testScriptPredictions = function(options) {
-  if (options.isRemote || options.isNode) {
-    assert.log('Can\'t directly test remote types locally.');
+  if (options.isFirefox || options.isNoDom) {
+    assert.log('Skipping checks due to firefox document.stylsheets support.');
     return;
   }
 
-  var context = options.requisition.conversionContext;
   var types = options.requisition.system.types;
   var resource = types.createType({ name: 'resource', include: 'text/javascript' });
-  return resource.getLookup(context).then(function(opts) {
+  return resource.getLookup().then(function(opts) {
     assert.ok(opts.length > 1, 'have js resources');
 
     return util.promiseEach(opts, function(prediction) {
-      return checkPrediction(resource, prediction, context);
+      return checkPrediction(resource, prediction);
     });
   });
 };
 
 exports.testStylePredictions = function(options) {
-  if (options.isRemote) {
-    assert.log('Can\'t directly test remote types locally.');
+  if (options.isFirefox || options.isNoDom) {
+    assert.log('Skipping checks due to firefox document.stylsheets support.');
     return;
   }
 
-  var context = options.requisition.conversionContext;
   var types = options.requisition.system.types;
   var resource = types.createType({ name: 'resource', include: 'text/css' });
-  return resource.getLookup(context).then(function(opts) {
+  return resource.getLookup().then(function(opts) {
     assert.ok(opts.length >= 1, 'have css resources');
 
     return util.promiseEach(opts, function(prediction) {
-      return checkPrediction(resource, prediction, context);
+      return checkPrediction(resource, prediction);
     });
   });
 };
 
 exports.testAllPredictions2 = function(options) {
-  if (options.isRemote) {
-    assert.log('Can\'t directly test remote types locally.');
+  if (options.isNoDom) {
+    assert.log('Skipping checks due to nodom document.stylsheets support.');
     return;
   }
-
-  var context = options.requisition.conversionContext;
   var types = options.requisition.system.types;
 
   var scriptRes = types.createType({ name: 'resource', include: 'text/javascript' });
-  return scriptRes.getLookup(context).then(function(scriptOptions) {
+  return scriptRes.getLookup().then(function(scriptOptions) {
     var styleRes = types.createType({ name: 'resource', include: 'text/css' });
-    return styleRes.getLookup(context).then(function(styleOptions) {
+    return styleRes.getLookup().then(function(styleOptions) {
       var allRes = types.createType({ name: 'resource' });
-      return allRes.getLookup(context).then(function(allOptions) {
+      return allRes.getLookup().then(function(allOptions) {
         assert.is(scriptOptions.length + styleOptions.length,
                   allOptions.length,
                   'split');
       });
     });
   });
 };
 
 exports.testAllPredictions3 = function(options) {
-  if (options.isRemote) {
-    assert.log('Can\'t directly test remote types locally.');
+  if (options.isNoDom) {
+    assert.log('Skipping checks due to nodom document.stylsheets support.');
     return;
   }
 
-  var context = options.requisition.conversionContext;
   var types = options.requisition.system.types;
   var res1 = types.createType({ name: 'resource' });
-  return res1.getLookup(context).then(function(options1) {
+  return res1.getLookup().then(function(options1) {
     var res2 = types.createType('resource');
-    return res2.getLookup(context).then(function(options2) {
+    return res2.getLookup().then(function(options2) {
       assert.is(options1.length, options2.length, 'type spec');
     });
   });
 };
 
-function checkPrediction(res, prediction, context) {
+function checkPrediction(res, prediction) {
   var name = prediction.name;
   var value = prediction.value;
 
+  // resources don't need context so cheat and pass in null
+  var context = null;
   return res.parseString(name, context).then(function(conversion) {
     assert.is(conversion.getStatus(), Status.VALID, 'status VALID for ' + name);
     assert.is(conversion.value, value, 'value for ' + name);
 
     assert.is(typeof value.loadContents, 'function', 'resource for ' + name);
     assert.is(typeof value.element, 'object', 'resource for ' + name);
 
     return Promise.resolve(res.stringify(value, context)).then(function(strung) {
diff --git a/browser/devtools/commandline/test/browser_gcli_short.js b/browser/devtools/commandline/test/browser_gcli_short.js
--- a/browser/devtools/commandline/test/browser_gcli_short.js
+++ b/browser/devtools/commandline/test/browser_gcli_short.js
@@ -10,26 +10,41 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testShort.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_short.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var helpers = require('./helpers');
 
 exports.testBasic = function(options) {
   return helpers.audit(options, [
     {
       setup:    'tshidden -v',
       check: {
         input:  'tshidden -v',
diff --git a/browser/devtools/commandline/test/browser_gcli_spell.js b/browser/devtools/commandline/test/browser_gcli_spell.js
--- a/browser/devtools/commandline/test/browser_gcli_spell.js
+++ b/browser/devtools/commandline/test/browser_gcli_spell.js
@@ -9,26 +9,41 @@
  * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
  * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
  * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
  * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testSpell.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_spell.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var assert = require('../testharness/assert');
 var spell = require('gcli/util/spell');
 
 exports.testSpellerSimple = function(options) {
   var alternatives = [
     'window', 'document', 'InstallTrigger', 'requirejs', 'require','define',
     'console', 'location', 'constructor', 'getInterface', 'external', 'sidebar'
   ];
diff --git a/browser/devtools/commandline/test/browser_gcli_split.js b/browser/devtools/commandline/test/browser_gcli_split.js
--- a/browser/devtools/commandline/test/browser_gcli_split.js
+++ b/browser/devtools/commandline/test/browser_gcli_split.js
@@ -10,26 +10,41 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testSplit.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_split.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var assert = require('../testharness/assert');
 
 var cli = require('gcli/cli');
 
 exports.testSplitSimple = function(options) {
   var args = cli.tokenize('s');
   options.requisition._split(args);
   assert.is(args.length, 0);
diff --git a/browser/devtools/commandline/test/browser_gcli_string.js b/browser/devtools/commandline/test/browser_gcli_string.js
--- a/browser/devtools/commandline/test/browser_gcli_string.js
+++ b/browser/devtools/commandline/test/browser_gcli_string.js
@@ -10,26 +10,41 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testString.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_string.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var helpers = require('./helpers');
 
 exports.testNewLine = function(options) {
   return helpers.audit(options, [
     {
       setup:    'echo a\\nb',
       check: {
         input:  'echo a\\nb',
diff --git a/browser/devtools/commandline/test/browser_gcli_tokenize.js b/browser/devtools/commandline/test/browser_gcli_tokenize.js
--- a/browser/devtools/commandline/test/browser_gcli_tokenize.js
+++ b/browser/devtools/commandline/test/browser_gcli_tokenize.js
@@ -10,26 +10,41 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testTokenize.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_tokenize.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var assert = require('../testharness/assert');
 var cli = require('gcli/cli');
 
 exports.testBlanks = function(options) {
   var args;
 
   args = cli.tokenize('');
   assert.is(args.length, 1);
diff --git a/browser/devtools/commandline/test/browser_gcli_tooltip.js b/browser/devtools/commandline/test/browser_gcli_tooltip.js
--- a/browser/devtools/commandline/test/browser_gcli_tooltip.js
+++ b/browser/devtools/commandline/test/browser_gcli_tooltip.js
@@ -10,30 +10,50 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testTooltip.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_tooltip.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var assert = require('../testharness/assert');
 // var helpers = require('./helpers');
 
 exports.testActivate = function(options) {
+  if (!options.display) {
+    assert.log('No display. Skipping activate tests');
+    return;
+  }
+
   return helpers.audit(options, [
     {
       setup:    ' ',
       check: {
         input:  ' ',
         hints:   '',
         markup: 'V',
         cursor: 1,
diff --git a/browser/devtools/commandline/test/browser_gcli_types.js b/browser/devtools/commandline/test/browser_gcli_types.js
--- a/browser/devtools/commandline/test/browser_gcli_types.js
+++ b/browser/devtools/commandline/test/browser_gcli_types.js
@@ -10,35 +10,59 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testTypes.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_types.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var assert = require('../testharness/assert');
 var util = require('gcli/util/util');
 var Promise = require('gcli/util/promise').Promise;
+var nodetype = require('gcli/types/node');
 
-function forEachType(options, templateTypeSpec, callback) {
+exports.setup = function(options) {
+  if (options.window) {
+    nodetype.setDocument(options.window.document);
+  }
+};
+
+exports.shutdown = function(options) {
+  nodetype.unsetDocument();
+};
+
+function forEachType(options, typeSpec, callback) {
   var types = options.requisition.system.types;
   return util.promiseEach(types.getTypeNames(), function(name) {
-    var typeSpec = {};
-    util.copyProperties(templateTypeSpec, typeSpec);
     typeSpec.name = name;
     typeSpec.requisition = options.requisition;
 
     // Provide some basic defaults to help selection/delegate/array work
     if (name === 'selection') {
       typeSpec.data = [ 'a', 'b' ];
     }
     else if (name === 'delegate') {
@@ -50,29 +74,39 @@ function forEachType(options, templateTy
       typeSpec.subtype = 'string';
     }
     else if (name === 'remote') {
       return;
     }
     else if (name === 'union') {
       typeSpec.alternatives = [{ name: 'string' }];
     }
-    else if (options.isRemote) {
-      if (name === 'node' || name === 'nodelist') {
-        return;
-      }
-    }
 
     var type = types.createType(typeSpec);
     var reply = callback(type);
-    return Promise.resolve(reply);
+    return Promise.resolve(reply).then(function(value) {
+      // Clean up
+      delete typeSpec.name;
+      delete typeSpec.requisition;
+      delete typeSpec.data;
+      delete typeSpec.delegateType;
+      delete typeSpec.subtype;
+      delete typeSpec.alternatives;
+
+      return value;
+    });
   });
 }
 
 exports.testDefault = function(options) {
+  if (options.isNoDom) {
+    assert.log('Skipping tests due to issues with resource type.');
+    return;
+  }
+
   return forEachType(options, {}, function(type) {
     var context = options.requisition.executionContext;
     var blank = type.getBlank(context).value;
 
     // boolean and array types are exempt from needing undefined blank values
     if (type.name === 'boolean') {
       assert.is(blank, false, 'blank boolean is false');
     }
diff --git a/browser/devtools/commandline/test/browser_gcli_union.js b/browser/devtools/commandline/test/browser_gcli_union.js
--- a/browser/devtools/commandline/test/browser_gcli_union.js
+++ b/browser/devtools/commandline/test/browser_gcli_union.js
@@ -10,26 +10,41 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testUnion.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_union.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var assert = require('../testharness/assert');
 // var helpers = require('./helpers');
 
 exports.testDefault = function(options) {
   return helpers.audit(options, [
     {
       setup:    'unionc1',
       check: {
@@ -106,17 +121,17 @@ exports.testDefault = function(options) 
       post: function(output, text) {
         var data = output.data.first;
         assert.is(Object.keys(data).length, 2, 'union1 Object.keys');
         assert.is(data.type, 'selection', 'union1 val type');
         assert.is(data.selection, 1, 'union1 val selection');
       }
     },
     {
-      skipIf: options.isPhantomjs, // PhantomJS gets predictions wrong
+      skipIf: options.isPhantomjs, // Phantom goes weird with predictions
       setup:    'unionc1 5',
       check: {
         input:  'unionc1 5',
         markup: 'VVVVVVVVV',
         hints:           ' -> two',
         predictions: [ 'two' ],
         status: 'VALID',
         args: {
@@ -140,17 +155,17 @@ exports.testDefault = function(options) 
       post: function(output, text) {
         var data = output.data.first;
         assert.is(Object.keys(data).length, 2, 'union5 Object.keys');
         assert.is(data.type, 'number', 'union5 val type');
         assert.is(data.number, 5, 'union5 val number');
       }
     },
     {
-      skipIf: options.isPhantomjs, // PhantomJS URL type is broken
+      skipRemainingIf: options.isPhantomjs,
       setup:    'unionc2 on',
       check: {
         input:  'unionc2 on',
         hints:            'e',
         markup: 'VVVVVVVVII',
         current: 'first',
         status: 'ERROR',
         predictionsContains: [
diff --git a/browser/devtools/commandline/test/browser_gcli_url.js b/browser/devtools/commandline/test/browser_gcli_url.js
--- a/browser/devtools/commandline/test/browser_gcli_url.js
+++ b/browser/devtools/commandline/test/browser_gcli_url.js
@@ -10,33 +10,48 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
 
-const exports = {};
+var exports = {};
+
+var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testUrl.js</p>";
 
 function test() {
-  helpers.runTestModule(exports, "browser_gcli_url.js");
+  return Task.spawn(function() {
+    let options = yield helpers.openTab(TEST_URI);
+    yield helpers.openToolbar(options);
+    gcli.addItems(mockCommands.items);
+
+    yield helpers.runTests(options, exports);
+
+    gcli.removeItems(mockCommands.items);
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
 }
 
+// <INJECTED SOURCE:END>
+
 // var assert = require('../testharness/assert');
 // var helpers = require('./helpers');
 
 exports.testDefault = function(options) {
   return helpers.audit(options, [
     {
-      skipRemainingIf: options.isPhantomjs, // PhantomJS URL type is broken
+      skipRemainingIf: options.isPhantomjs,
       setup:    'urlc',
       check: {
         input:  'urlc',
         markup: 'VVVV',
         hints:        ' <url>',
         status: 'ERROR',
         args: {
           url: {
diff --git a/browser/devtools/commandline/test/helpers.js b/browser/devtools/commandline/test/helpers.js
--- a/browser/devtools/commandline/test/helpers.js
+++ b/browser/devtools/commandline/test/helpers.js
@@ -13,85 +13,84 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
 
 // A copy of this code exists in firefox mochitests. They should be kept
 // in sync. Hence the exports synonym for non AMD contexts.
-var { helpers, assert } = (function() {
+var { helpers, gcli, assert } = (function() {
 
 var helpers = {};
 
 var TargetFactory = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools.TargetFactory;
 var require = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools.require;
 
 var assert = { ok: ok, is: is, log: info };
 var util = require('gcli/util/util');
 var Promise = require('gcli/util/promise').Promise;
 var cli = require('gcli/cli');
 var KeyEvent = require('gcli/util/util').KeyEvent;
-
-const { GcliFront } = require("devtools/server/actors/gcli");
+var gcli = require('gcli/index');
 
 /**
  * See notes in helpers.checkOptions()
  */
-var createDeveloperToolbarAutomator = function(toolbar) {
+var createFFDisplayAutomator = function(display) {
   var automator = {
     setInput: function(typed) {
-      return toolbar.inputter.setInput(typed);
+      return display.inputter.setInput(typed);
     },
 
     setCursor: function(cursor) {
-      return toolbar.inputter.setCursor(cursor);
+      return display.inputter.setCursor(cursor);
     },
 
     focus: function() {
-      return toolbar.inputter.focus();
+      return display.inputter.focus();
     },
 
     fakeKey: function(keyCode) {
       var fakeEvent = {
         keyCode: keyCode,
         preventDefault: function() { },
         timeStamp: new Date().getTime()
       };
 
-      toolbar.inputter.onKeyDown(fakeEvent);
+      display.inputter.onKeyDown(fakeEvent);
 
       if (keyCode === KeyEvent.DOM_VK_BACK_SPACE) {
-        var input = toolbar.inputter.element;
+        var input = display.inputter.element;
         input.value = input.value.slice(0, -1);
       }
 
-      return toolbar.inputter.handleKeyUp(fakeEvent);
+      return display.inputter.handleKeyUp(fakeEvent);
     },
 
     getInputState: function() {
-      return toolbar.inputter.getInputState();
+      return display.inputter.getInputState();
     },
 
     getCompleterTemplateData: function() {
-      return toolbar.completer._getCompleterTemplateData();
+      return display.completer._getCompleterTemplateData();
     },
 
     getErrorMessage: function() {
-      return toolbar.tooltip.errorEle.textContent;
+      return display.tooltip.errorEle.textContent;
     }
   };
 
   Object.defineProperty(automator, 'focusManager', {
-    get: function() { return toolbar.focusManager; },
+    get: function() { return display.focusManager; },
     enumerable: true
   });
 
   Object.defineProperty(automator, 'field', {
-    get: function() { return toolbar.tooltip.field; },
+    get: function() { return display.tooltip.field; },
     enumerable: true
   });
 
   return automator;
 };
 
 /**
  * Warning: For use with Firefox Mochitests only.
@@ -219,19 +218,19 @@ helpers.closeTab = function(options) {
  * @return A promise which resolves to the options object when the 'load' event
  * happens on the new tab
  */
 helpers.openToolbar = function(options) {
   options = options || {};
   options.chromeWindow = options.chromeWindow || window;
 
   return options.chromeWindow.DeveloperToolbar.show(true).then(function() {
-    var toolbar = options.chromeWindow.DeveloperToolbar;
-    options.automator = createDeveloperToolbarAutomator(toolbar);
-    options.requisition = toolbar.requisition;
+    var display = options.chromeWindow.DeveloperToolbar.display;
+    options.automator = createFFDisplayAutomator(display);
+    options.requisition = display.requisition;
     return options;
   });
 };
 
 /**
  * Navigate the current tab to a URL
  */
 helpers.navigate = function(url, options) {
@@ -327,27 +326,27 @@ helpers.promiseify = function(functionWi
     });
   };
 };
 
 /**
  * Warning: For use with Firefox Mochitests only.
  *
  * As addTab, but that also opens the developer toolbar. In addition a new
- * 'automator' property is added to the options object which uses the
- * developer toolbar
+ * 'automator' property is added to the options object with the display from GCLI
+ * in the developer toolbar
  */
 helpers.addTabWithToolbar = function(url, callback, options) {
   return helpers.addTab(url, function(innerOptions) {
     var win = innerOptions.chromeWindow;
 
     return win.DeveloperToolbar.show(true).then(function() {
-      var toolbar = win.DeveloperToolbar;
-      innerOptions.automator = createDeveloperToolbarAutomator(toolbar);
-      innerOptions.requisition = toolbar.requisition;
+      var display = win.DeveloperToolbar.display;
+      innerOptions.automator = createFFDisplayAutomator(display);
+      innerOptions.requisition = display.requisition;
 
       var reply = callback.call(null, innerOptions);
 
       return Promise.resolve(reply).then(null, function(error) {
         ok(false, error);
         console.error(error);
       }).then(function() {
         win.DeveloperToolbar.hide().then(function() {
@@ -372,17 +371,17 @@ helpers.addTabWithToolbar = function(url
  */
 helpers.runTests = function(options, tests) {
   var testNames = Object.keys(tests).filter(function(test) {
     return test != "setup" && test != "shutdown";
   });
 
   var recover = function(error) {
     ok(false, error);
-    console.error(error, error.stack);
+    console.error(error);
   };
 
   info("SETUP");
   var setupDone = (tests.setup != null) ?
       Promise.resolve(tests.setup(options)) :
       Promise.resolve();
 
   var testDone = setupDone.then(function() {
@@ -406,97 +405,16 @@ helpers.runTests = function(options, tes
   return testDone.then(function() {
     info("SHUTDOWN");
     return (tests.shutdown != null) ?
         Promise.resolve(tests.shutdown(options)) :
         Promise.resolve();
   }, recover);
 };
 
-const MOCK_COMMANDS_URI = "chrome://mochitests/content/browser/browser/devtools/commandline/test/mockCommands.js";
-
-const defer = function() {
-  const deferred = { };
-  deferred.promise = new Promise(function(resolve, reject) {
-    deferred.resolve = resolve;
-    deferred.reject = reject;
-  });
-  return deferred;
-};
-
-/**
- * This does several actions associated with running a GCLI test in mochitest
- * 1. Create a new tab containing basic markup for GCLI tests
- * 2. Open the developer toolbar
- * 3. Register the mock commands with the server process
- * 4. Wait for the proxy commands to be auto-regitstered with the client
- * 5. Register the mock converters with the client process
- * 6. Run all the tests
- * 7. Tear down all the setup
- */
-helpers.runTestModule = function(exports, name) {
-  return Task.spawn(function*() {
-    const uri = "data:text/html;charset=utf-8," +
-                "<style>div{color:red;}</style>" +
-                "<div id='gcli-root'>" + name + "</div>";
-
-    const options = yield helpers.openTab(uri);
-    options.isRemote = true;
-
-    yield helpers.openToolbar(options);
-
-    const system = options.requisition.system;
-
-    // Register a one time listener with the local set of commands
-    const addedDeferred = defer();
-    const removedDeferred = defer();
-    let state = 'preAdd'; // Then 'postAdd' then 'postRemove'
-
-    system.commands.onCommandsChange.add(function(ev) {
-      if (system.commands.get('tsslow') != null) {
-        if (state === 'preAdd') {
-          addedDeferred.resolve();
-          state = 'postAdd';
-        }
-      }
-      else {
-        if (state === 'postAdd') {
-          removedDeferred.resolve();
-          state = 'postRemove';
-        }
-      }
-    });
-
-    // Send a message to add the commands to the content process
-    const front = yield GcliFront.create(options.target);
-    yield front._testOnly_addItemsByModule(MOCK_COMMANDS_URI);
-
-    // This will cause the local set of commands to be updated with the
-    // command proxies, wait for that to complete.
-    yield addedDeferred.promise;
-
-    // Now we need to add the converters to the local GCLI
-    const converters = mockCommands.items.filter(item => item.item === 'converter');
-    system.addItems(converters);
-
-    // Next run the tests
-    yield helpers.runTests(options, exports);
-
-    // Finally undo the mock commands and converters
-    system.removeItems(converters);
-    const removePromise = system.commands.onCommandsChange.once();
-    yield front._testOnly_removeItemsByModule(MOCK_COMMANDS_URI);
-    yield removedDeferred.promise;
-
-    // And close everything down
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
-};
-
 ///////////////////////////////////////////////////////////////////////////////
 
 /**
  * Ensure that the options object is setup correctly
  * options should contain an automator object that looks like this:
  * {
  *   getInputState: function() { ... },
  *   setCursor: function(cursor) { ... },
@@ -836,94 +754,90 @@ helpers._check = function(options, name,
 
   if (checks == null) {
     return Promise.resolve();
   }
 
   var outstanding = [];
   var suffix = name ? ' (for \'' + name + '\')' : '';
 
-  if (!options.isNode && 'input' in checks) {
+  if (!options.isNoDom && 'input' in checks) {
     assert.is(helpers._actual.input(options), checks.input, 'input' + suffix);
   }
 
-  if (!options.isNode && 'cursor' in checks) {
+  if (!options.isNoDom && 'cursor' in checks) {
     assert.is(helpers._actual.cursor(options), checks.cursor, 'cursor' + suffix);
   }
 
-  if (!options.isNode && 'current' in checks) {
+  if (!options.isNoDom && 'current' in checks) {
     assert.is(helpers._actual.current(options), checks.current, 'current' + suffix);
   }
 
   if ('status' in checks) {
     assert.is(helpers._actual.status(options), checks.status, 'status' + suffix);
   }
 
-  if (!options.isNode && 'markup' in checks) {
+  if (!options.isNoDom && 'markup' in checks) {
     assert.is(helpers._actual.markup(options), checks.markup, 'markup' + suffix);
   }
 
-  if (!options.isNode && 'hints' in checks) {
+  if (!options.isNoDom && 'hints' in checks) {
     var hintCheck = function(actualHints) {
       assert.is(actualHints, checks.hints, 'hints' + suffix);
     };
     outstanding.push(helpers._actual.hints(options).then(hintCheck));
   }
 
-  if (!options.isNode && 'predictions' in checks) {
+  if (!options.isNoDom && 'predictions' in checks) {
     var predictionsCheck = function(actualPredictions) {
       helpers.arrayIs(actualPredictions,
                        checks.predictions,
                        'predictions' + suffix);
     };
     outstanding.push(helpers._actual.predictions(options).then(predictionsCheck));
   }
 
-  if (!options.isNode && 'predictionsContains' in checks) {
+  if (!options.isNoDom && 'predictionsContains' in checks) {
     var containsCheck = function(actualPredictions) {
       checks.predictionsContains.forEach(function(prediction) {
         var index = actualPredictions.indexOf(prediction);
         assert.ok(index !== -1,
                   'predictionsContains:' + prediction + suffix);
-        if (index === -1) {
-          log('Actual predictions (' + actualPredictions.length + '): ' +
-              actualPredictions.join(', '));
-        }
       });
     };
     outstanding.push(helpers._actual.predictions(options).then(containsCheck));
   }
 
   if ('unassigned' in checks) {
     helpers.arrayIs(helpers._actual.unassigned(options),
                      checks.unassigned,
                      'unassigned' + suffix);
   }
 
   /* TODO: Fix this
-  if (!options.isNode && 'tooltipState' in checks) {
+  if (!options.isNoDom && 'tooltipState' in checks) {
     assert.is(helpers._actual.tooltipState(options),
               checks.tooltipState,
               'tooltipState' + suffix);
   }
   */
 
-  if (!options.isNode && 'outputState' in checks) {
+  if (!options.isNoDom && 'outputState' in checks) {
     assert.is(helpers._actual.outputState(options),
               checks.outputState,
               'outputState' + suffix);
   }
 
-  if (!options.isNode && 'options' in checks) {
+  if (!options.isNoDom && 'options' in checks) {
     helpers.arrayIs(helpers._actual.options(options),
                      checks.options,
                      'options' + suffix);
   }
 
-  if (!options.isNode && 'error' in checks) {
+  if (!options.isNoDom && 'error' in checks) {
     assert.is(helpers._actual.message(options), checks.error, 'error' + suffix);
   }
 
   if (checks.args != null) {
     Object.keys(checks.args).forEach(function(paramName) {
       var check = checks.args[paramName];
 
       // We allow an 'argument' called 'command' to be the command itself, but
@@ -975,17 +889,17 @@ helpers._check = function(options, name,
       }
 
       if ('status' in check) {
         assert.is(assignment.getStatus().toString(),
                   check.status,
                   'arg.' + paramName + '.status' + suffix);
       }
 
-      if (!options.isNode && 'message' in check) {
+      if (!options.isNoDom && 'message' in check) {
         if (typeof check.message.test === 'function') {
           assert.ok(check.message.test(assignment.message),
                     'arg.' + paramName + '.message' + suffix);
         }
         else {
           assert.is(assignment.message,
                     check.message,
                     'arg.' + paramName + '.message' + suffix);
@@ -1033,22 +947,22 @@ helpers._exec = function(options, name, 
       }
 
       if (!('output' in expected)) {
         return { output: output };
       }
 
       var context = requisition.conversionContext;
       var convertPromise;
-      if (options.isNode) {
+      if (options.isNoDom) {
         convertPromise = output.convert('string', context);
       }
       else {
         convertPromise = output.convert('dom', context).then(function(node) {
-          return (node == null) ? '' : node.textContent.trim();
+          return node.textContent.trim();
         });
       }
 
       return convertPromise.then(function(textOutput) {
         var doTest = function(match, against) {
           // Only log the real textContent if the test fails
           if (against.match(match) != null) {
             assert.ok(true, 'html output for \'' + name + '\' ' +
@@ -1252,18 +1166,19 @@ helpers.audit = function(options, audits
           audit.skipRemainingIf(options) :
           !!audit.skipRemainingIf;
       if (skipRemainingIf) {
         skipReason = audit.skipRemainingIf.name ?
             'due to ' + audit.skipRemainingIf.name :
             '';
         assert.log('Skipped ' + name + ' ' + skipReason);
 
-        // Tests need at least one pass, fail or todo. Create a dummy pass
-        assert.ok(true, 'Each test requires at least one pass, fail or todo');
+        // Tests need at least one pass, fail or todo. Let's create a dummy pass
+        // in case there are none.
+        ok(true, "Each test requires at least one pass, fail or todo so here is a pass.");
 
         return Promise.resolve(undefined);
       }
     }
 
     if (audit.skipIf) {
       var skip = (typeof audit.skipIf === 'function') ?
           audit.skipIf(options) :
@@ -1350,10 +1265,10 @@ function log(message) {
   if (typeof info === 'function') {
     info(message);
   }
   else {
     console.log(message);
   }
 }
 
-return { helpers: helpers, assert: assert };
+return { helpers: helpers, gcli: gcli, assert: assert };
 })();
diff --git a/browser/devtools/commandline/test/mockCommands.js b/browser/devtools/commandline/test/mockCommands.js
--- a/browser/devtools/commandline/test/mockCommands.js
+++ b/browser/devtools/commandline/test/mockCommands.js
@@ -10,111 +10,68 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
+// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
+// DO NOT EDIT IT DIRECTLY
+
+// <INJECTED SOURCE:END>
+
 
 var Promise = require('gcli/util/promise').Promise;
-
-var mockCommands;
-if (typeof exports !== 'undefined') {
-  // If we're being loaded via require();
-  mockCommands = exports;
-}
-else {
-  // If we're being loaded via loadScript in mochitest
-  mockCommands = {};
-}
+var mockCommands = {};
 
 // We use an alias for exports here because this module is used in Firefox
 // mochitests where we don't have define/require
 
 /**
  * Registration and de-registration.
  */
 mockCommands.setup = function(requisition) {
   requisition.system.addItems(mockCommands.items);
 };
 
 mockCommands.shutdown = function(requisition) {
   requisition.system.removeItems(mockCommands.items);
 };
 
 function createExec(name) {
-  return function(args, context) {
-    var promises = [];
-
-    Object.keys(args).map(function(argName) {
-      var value = args[argName];
-      var type = this.getParameterByName(argName).type;
-      var promise = Promise.resolve(type.stringify(value, context));
-      promises.push(promise.then(function(str) {
-        return { name: argName, value: str };
-      }.bind(this)));
-    }.bind(this));
-
-    return Promise.all(promises).then(function(data) {
-      var argValues = {};
-      data.forEach(function(entry) { argValues[entry.name] = entry.value; });
-
-      return context.typedData('testCommandOutput', {
-        name: name,
-        args: argValues
-      });
-    }.bind(this));
+  return function(args, executionContext) {
+    var argsOut = Object.keys(args).map(function(key) {
+      return key + '=' + args[key];
+    }).join(', ');
+    return 'Exec: ' + name + ' ' + argsOut;
   };
 }
 
 mockCommands.items = [
   {
     item: 'converter',
-    from: 'testCommandOutput',
-    to: 'dom',
-    exec: function(testCommandOutput, context) {
-      var view = context.createView({
-        data: testCommandOutput,
-        html: '' +
-          '<table>' +
-            '<thead>' +
-              '<tr>' +
-                '<th colspan="3">Exec: ${name}</th>' +
-              '</tr>' +
-            '</thead>' +
-            '<tbody>' +
-              '<tr foreach="key in ${args}">' +
-                '<td> ${key}</td>' +
-                '<td>=</td>' +
-                '<td>${args[key]}</td>' +
-              '</tr>' +
-            '</tbody>' +
-          '</table>',
-        options: {
-          allowEval: true
-        }
-      });
-
-      return view.toDom(context.document);
+    from: 'json',
+    to: 'string',
+    exec: function(json, context) {
+      return JSON.stringify(json, null, '  ');
     }
   },
   {
     item: 'converter',
-    from: 'testCommandOutput',
-    to: 'string',
-    exec: function(testCommandOutput, context) {
-      var argsOut = Object.keys(testCommandOutput.args).map(function(key) {
-        return key + '=' + testCommandOutput.args[key];
-      }).join(' ');
-      return 'Exec: ' + testCommandOutput.name + ' ' + argsOut;
+    from: 'json',
+    to: 'view',
+    exec: function(json, context) {
+      var html = JSON.stringify(json, null, '&#160;').replace(/\n/g, '<br/>');
+      return {
+        html: '<pre>' + html + '</pre>'
+      };
     }
   },
   {
     item: 'type',
     name: 'optionType',
     parent: 'selection',
     lookup: [
       {
@@ -546,33 +503,33 @@ mockCommands.items = [
             'noerror'
           ]
         }
       }
     ],
     exec: function(args, context) {
       if (args.method === 'reject') {
         return new Promise(function(resolve, reject) {
-          context.environment.window.setTimeout(function() {
+          setTimeout(function() {
             reject('rejected promise');
           }, 10);
         });
       }
 
       if (args.method === 'rejecttyped') {
         return new Promise(function(resolve, reject) {
-          context.environment.window.setTimeout(function() {
+          setTimeout(function() {
             reject(context.typedData('number', 54));
           }, 10);
         });
       }
 
       if (args.method === 'throwinpromise') {
         return new Promise(function(resolve, reject) {
-          context.environment.window.setTimeout(function() {
+          setTimeout(function() {
             resolve('should be lost');
           }, 10);
         }).then(function() {
           var t = null;
           return t.foo;
         });
       }
 
@@ -693,17 +650,17 @@ mockCommands.items = [
     name: 'tsslow',
     params: [
       {
         name: 'hello',
         type: {
           name: 'selection',
           data: function(context) {
             return new Promise(function(resolve, reject) {
-              context.environment.window.setTimeout(function() {
+              setTimeout(function() {
                 resolve([
                   'Shalom', 'Namasté', 'Hallo', 'Dydd-da',
                   'Chào', 'Hej', 'Saluton', 'Sawubona'
                 ]);
               }, 10);
             });
           }
         }
@@ -776,21 +733,10 @@ mockCommands.items = [
           ]
         }
       }
     ],
     returnType: 'json',
     exec: function(args, context) {
       return args;
     }
-  },
-  {
-    item: 'command',
-    name: 'tsres',
-    params: [
-      {
-        name: 'resource',
-        type: 'resource'
-      }
-    ],
-    exec: createExec('tsres'),
   }
 ];
diff --git a/browser/devtools/debugger/debugger-commands.js b/browser/devtools/debugger/debugger-commands.js
--- a/browser/devtools/debugger/debugger-commands.js
+++ b/browser/devtools/debugger/debugger-commands.js
@@ -1,16 +1,16 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const { Cc, Ci, Cu } = require("chrome");
-const l10n = require("gcli/l10n");
+const gcli = require("gcli/index");
 
 loader.lazyImporter(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm");
 
 /**
  * The commands and converters that are exported to GCLI
  */
 exports.items = [];
 
@@ -62,28 +62,26 @@ function getAllSources(dbg) {
     }));
 }
 
 /**
  * 'break' command
  */
 exports.items.push({
   name: "break",
-  description: l10n.lookup("breakDesc"),
-  manual: l10n.lookup("breakManual")
+  description: gcli.lookup("breakDesc"),
+  manual: gcli.lookup("breakManual")
 });
 
 /**
  * 'break list' command
  */
 exports.items.push({
   name: "break list",
-  item: "command",
-  runAt: "client",
-  description: l10n.lookup("breaklistDesc"),
+  description: gcli.lookup("breaklistDesc"),
   returnType: "breakpoints",
   exec: function(args, context) {
     let dbg = getPanel(context, "jsdebugger", { ensureOpened: true });
     return dbg.then(getAllBreakpoints);
   }
 });
 
 exports.items.push({
@@ -99,17 +97,17 @@ exports.items.push({
           breakpoints: breakpoints,
           onclick: context.update,
           ondblclick: context.updateExec
         }
       });
     } else {
       return context.createView({
         html: "<p>${message}</p>",
-        data: { message: l10n.lookup("breaklistNone") }
+        data: { message: gcli.lookup("breaklistNone") }
       });
     }
   }
 });
 
 var breakListHtml = "" +
       "<table>" +
       " <thead>" +
@@ -123,91 +121,87 @@ var breakListHtml = "" +
       "    <td class='gcli-breakpoint-lineText'>" +
       "      ${breakpoint.truncatedLineText}" +
       "    </td>" +
       "    <td>" +
       "      <span class='gcli-out-shortcut'" +
       "            data-command='break del ${breakpoint.label}'" +
       "            onclick='${onclick}'" +
       "            ondblclick='${ondblclick}'>" +
-      "        " + l10n.lookup("breaklistOutRemove") + "</span>" +
+      "        " + gcli.lookup("breaklistOutRemove") + "</span>" +
       "    </td>" +
       "  </tr>" +
       " </tbody>" +
       "</table>" +
       "";
 
 var MAX_LINE_TEXT_LENGTH = 30;
 var MAX_LABEL_LENGTH = 20;
 
 /**
  * 'break add' command
  */
 exports.items.push({
   name: "break add",
-  description: l10n.lookup("breakaddDesc"),
-  manual: l10n.lookup("breakaddManual")
+  description: gcli.lookup("breakaddDesc"),
+  manual: gcli.lookup("breakaddManual")
 });
 
 /**
  * 'break add line' command
  */
 exports.items.push({
-  item: "command",
-  runAt: "client",
   name: "break add line",
-  description: l10n.lookup("breakaddlineDesc"),
+  description: gcli.lookup("breakaddlineDesc"),
   params: [
     {
       name: "file",
       type: {
         name: "selection",
         lookup: function(context) {
           return getAllSources(getPanel(context, "jsdebugger"));
         }
       },
-      description: l10n.lookup("breakaddlineFileDesc")
+      description: gcli.lookup("breakaddlineFileDesc")
     },
     {
       name: "line",
       type: { name: "number", min: 1, step: 10 },
-      description: l10n.lookup("breakaddlineLineDesc")
+      description: gcli.lookup("breakaddlineLineDesc")
     }
   ],
   returnType: "string",
   exec: function(args, context) {
     let dbg = getPanel(context, "jsdebugger");
     if (!dbg) {
-      return l10n.lookup("debuggerStopped");
+      return gcli.lookup("debuggerStopped");
     }
 
     let deferred = context.defer();
     let item = dbg._view.Sources.getItemForAttachment(a => {
       return a.source && a.source.actor === args.file;
     })
     let position = { actor: item.value, line: args.line };
 
     dbg.addBreakpoint(position).then(() => {
-      deferred.resolve(l10n.lookup("breakaddAdded"));
+      deferred.resolve(gcli.lookup("breakaddAdded"));
     }, aError => {
-      deferred.resolve(l10n.lookupFormat("breakaddFailed", [aError]));
+      deferred.resolve(gcli.lookupFormat("breakaddFailed", [aError]));
     });
 
     return deferred.promise;
   }
 });
 
 /**
  * 'break del' command
  */
 exports.items.push({
-  item: "command",
-  runAt: "client",
   name: "break del",
-  description: l10n.lookup("breakdelDesc"),
+  description: gcli.lookup("breakdelDesc"),
   params: [
     {
       name: "breakpoint",
       type: {
         name: "selection",
         lookup: function(context) {
           let dbg = getPanel(context, "jsdebugger");
           if (!dbg) {
@@ -215,226 +209,208 @@ exports.items.push({
           }
           return getAllBreakpoints(dbg).map(breakpoint => ({
             name: breakpoint.label,
             value: breakpoint,
             description: breakpoint.truncatedLineText
           }));
         }
       },
-      description: l10n.lookup("breakdelBreakidDesc")
+      description: gcli.lookup("breakdelBreakidDesc")
     }
   ],
   returnType: "string",
   exec: function(args, context) {
     let dbg = getPanel(context, "jsdebugger");
     if (!dbg) {
-      return l10n.lookup("debuggerStopped");
+      return gcli.lookup("debuggerStopped");
     }
 
     let source = dbg._view.Sources.getItemForAttachment(a => {
       return a.source && a.source.url === args.breakpoint.url
     });
 
     let deferred = context.defer();
     let position = { actor: source.attachment.source.actor,
                      line: args.breakpoint.lineNumber };
 
     dbg.removeBreakpoint(position).then(() => {
-      deferred.resolve(l10n.lookup("breakdelRemoved"));
+      deferred.resolve(gcli.lookup("breakdelRemoved"));
     }, () => {
-      deferred.resolve(l10n.lookup("breakNotFound"));
+      deferred.resolve(gcli.lookup("breakNotFound"));
     });
 
     return deferred.promise;
   }
 });
 
 /**
  * 'dbg' command
  */
 exports.items.push({
   name: "dbg",
-  description: l10n.lookup("dbgDesc"),
-  manual: l10n.lookup("dbgManual")
+  description: gcli.lookup("dbgDesc"),
+  manual: gcli.lookup("dbgManual")
 });
 
 /**
  * 'dbg open' command
  */
 exports.items.push({
-  item: "command",
-  runAt: "client",
   name: "dbg open",
-  description: l10n.lookup("dbgOpen"),
+  description: gcli.lookup("dbgOpen"),
   params: [],
   exec: function(args, context) {
     let target = context.environment.target;
     return gDevTools.showToolbox(target, "jsdebugger").then(() => null);
   }
 });
 
 /**
  * 'dbg close' command
  */
 exports.items.push({
-  item: "command",
-  runAt: "client",
   name: "dbg close",
-  description: l10n.lookup("dbgClose"),
+  description: gcli.lookup("dbgClose"),
   params: [],
   exec: function(args, context) {
     if (!getPanel(context, "jsdebugger")) {
       return;
     }
     let target = context.environment.target;
     return gDevTools.closeToolbox(target).then(() => null);
   }
 });
 
 /**
  * 'dbg interrupt' command
  */
 exports.items.push({
-  item: "command",
-  runAt: "client",
   name: "dbg interrupt",
-  description: l10n.lookup("dbgInterrupt"),
+  description: gcli.lookup("dbgInterrupt"),
   params: [],
   exec: function(args, context) {
     let dbg = getPanel(context, "jsdebugger");
     if (!dbg) {
-      return l10n.lookup("debuggerStopped");
+      return gcli.lookup("debuggerStopped");
     }
 
     let controller = dbg._controller;
     let thread = controller.activeThread;
     if (!thread.paused) {
       thread.interrupt();
     }
   }
 });
 
 /**
  * 'dbg continue' command
  */
 exports.items.push({
-  item: "command",
-  runAt: "client",
   name: "dbg continue",
-  description: l10n.lookup("dbgContinue"),
+  description: gcli.lookup("dbgContinue"),
   params: [],
   exec: function(args, context) {
     let dbg = getPanel(context, "jsdebugger");
     if (!dbg) {
-      return l10n.lookup("debuggerStopped");
+      return gcli.lookup("debuggerStopped");
     }
 
     let controller = dbg._controller;
     let thread = controller.activeThread;
     if (thread.paused) {
       thread.resume();
     }
   }
 });
 
 /**
  * 'dbg step' command
  */
 exports.items.push({
-  item: "command",
-  runAt: "client",
   name: "dbg step",
-  description: l10n.lookup("dbgStepDesc"),
-  manual: l10n.lookup("dbgStepManual")
+  description: gcli.lookup("dbgStepDesc"),
+  manual: gcli.lookup("dbgStepManual")
 });
 
 /**
  * 'dbg step over' command
  */
 exports.items.push({
-  item: "command",
-  runAt: "client",
   name: "dbg step over",
-  description: l10n.lookup("dbgStepOverDesc"),
+  description: gcli.lookup("dbgStepOverDesc"),
   params: [],
   exec: function(args, context) {
     let dbg = getPanel(context, "jsdebugger");
     if (!dbg) {
-      return l10n.lookup("debuggerStopped");
+      return gcli.lookup("debuggerStopped");
     }
 
     let controller = dbg._controller;
     let thread = controller.activeThread;
     if (thread.paused) {
       thread.stepOver();
     }
   }
 });
 
 /**
  * 'dbg step in' command
  */
 exports.items.push({
-  item: "command",
-  runAt: "client",
   name: 'dbg step in',
-  description: l10n.lookup("dbgStepInDesc"),
+  description: gcli.lookup("dbgStepInDesc"),
   params: [],
   exec: function(args, context) {
     let dbg = getPanel(context, "jsdebugger");
     if (!dbg) {
-      return l10n.lookup("debuggerStopped");
+      return gcli.lookup("debuggerStopped");
     }
 
     let controller = dbg._controller;
     let thread = controller.activeThread;
     if (thread.paused) {
       thread.stepIn();
     }
   }
 });
 
 /**
  * 'dbg step over' command
  */
 exports.items.push({
-  item: "command",
-  runAt: "client",
   name: 'dbg step out',
-  description: l10n.lookup("dbgStepOutDesc"),
+  description: gcli.lookup("dbgStepOutDesc"),
   params: [],
   exec: function(args, context) {
     let dbg = getPanel(context, "jsdebugger");
     if (!dbg) {
-      return l10n.lookup("debuggerStopped");
+      return gcli.lookup("debuggerStopped");
     }
 
     let controller = dbg._controller;
     let thread = controller.activeThread;
     if (thread.paused) {
       thread.stepOut();
     }
   }
 });
 
 /**
  * 'dbg list' command
  */
 exports.items.push({
-  item: "command",
-  runAt: "client",
   name: "dbg list",
-  description: l10n.lookup("dbgListSourcesDesc"),
+  description: gcli.lookup("dbgListSourcesDesc"),
   params: [],
   returnType: "dom",
   exec: function(args, context) {
     let dbg = getPanel(context, "jsdebugger");
     if (!dbg) {
-      return l10n.lookup("debuggerClosed");
+      return gcli.lookup("debuggerClosed");
     }
 
     let sources = getAllSources(dbg);
     let doc = context.environment.chromeDocument;
     let div = createXHTMLElement(doc, "div");
     let ol = createXHTMLElement(doc, "ol");
 
     sources.forEach(source => {
@@ -459,22 +435,20 @@ exports.items.push({
   },
   {
     name: "unblackbox",
     clientMethod: "unblackBox",
     l10nPrefix: "dbgUnBlackBox"
   }
 ].forEach(function(cmd) {
   const lookup = function(id) {
-    return l10n.lookup(cmd.l10nPrefix + id);
+    return gcli.lookup(cmd.l10nPrefix + id);
   };
 
   exports.items.push({
-    item: "command",
-    runAt: "client",
     name: "dbg " + cmd.name,
     description: lookup("Desc"),
     params: [
       {
         name: "source",
         type: {
           name: "selection",
           lookup: function(context) {
@@ -496,17 +470,17 @@ exports.items.push({
         description: lookup("InvertDesc")
       }
     ],
     returnType: "dom",
     exec: function(args, context) {
       const dbg = getPanel(context, "jsdebugger");
       const doc = context.environment.chromeDocument;
       if (!dbg) {
-        throw new Error(l10n.lookup("debuggerClosed"));
+        throw new Error(gcli.lookup("debuggerClosed"));
       }
 
       const { promise, resolve, reject } = context.defer();
       const { activeThread } = dbg._controller;
       const globRegExp = args.glob ? globToRegExp(args.glob) : null;
 
       // Filter the sources down to those that we will need to black box.
 
diff --git a/browser/devtools/definitions.js b/browser/devtools/definitions.js
deleted file mode 100644
--- a/browser/devtools/definitions.js
+++ /dev/null
@@ -1,409 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-"use strict";
-
-const {Cc, Ci, Cu} = require("chrome");
-
-const { Services } = require("resource://gre/modules/Services.jsm");
-
-loader.lazyGetter(this, "osString", () => Cc["@mozilla.org/xre/app-info;1"].getService(Ci.nsIXULRuntime).OS);
-
-// Panels
-loader.lazyGetter(this, "OptionsPanel", () => require("devtools/framework/toolbox-options").OptionsPanel);
-loader.lazyGetter(this, "InspectorPanel", () => require("devtools/inspector/inspector-panel").InspectorPanel);
-loader.lazyGetter(this, "WebConsolePanel", () => require("devtools/webconsole/panel").WebConsolePanel);
-loader.lazyGetter(this, "DebuggerPanel", () => require("devtools/debugger/panel").DebuggerPanel);
-loader.lazyGetter(this, "StyleEditorPanel", () => require("devtools/styleeditor/styleeditor-panel").StyleEditorPanel);
-loader.lazyGetter(this, "ShaderEditorPanel", () => require("devtools/shadereditor/panel").ShaderEditorPanel);
-loader.lazyGetter(this, "CanvasDebuggerPanel", () => require("devtools/canvasdebugger/panel").CanvasDebuggerPanel);
-loader.lazyGetter(this, "WebAudioEditorPanel", () => require("devtools/webaudioeditor/panel").WebAudioEditorPanel);
-loader.lazyGetter(this, "PerformancePanel", () => require("devtools/performance/panel").PerformancePanel);
-loader.lazyGetter(this, "NetMonitorPanel", () => require("devtools/netmonitor/panel").NetMonitorPanel);
-loader.lazyGetter(this, "StoragePanel", () => require("devtools/storage/panel").StoragePanel);
-loader.lazyGetter(this, "ScratchpadPanel", () => require("devtools/scratchpad/scratchpad-panel").ScratchpadPanel);
-
-// Strings
-const toolboxProps = "chrome://browser/locale/devtools/toolbox.properties";
-const inspectorProps = "chrome://browser/locale/devtools/inspector.properties";
-const webConsoleProps = "chrome://browser/locale/devtools/webconsole.properties";
-const debuggerProps = "chrome://browser/locale/devtools/debugger.properties";
-const styleEditorProps = "chrome://browser/locale/devtools/styleeditor.properties";
-const shaderEditorProps = "chrome://browser/locale/devtools/shadereditor.properties";
-const canvasDebuggerProps = "chrome://browser/locale/devtools/canvasdebugger.properties";
-const webAudioEditorProps = "chrome://browser/locale/devtools/webaudioeditor.properties";
-const profilerProps = "chrome://browser/locale/devtools/profiler.properties";
-const netMonitorProps = "chrome://browser/locale/devtools/netmonitor.properties";
-const storageProps = "chrome://browser/locale/devtools/storage.properties";
-const scratchpadProps = "chrome://browser/locale/devtools/scratchpad.properties";
-
-loader.lazyGetter(this, "toolboxStrings", () => Services.strings.createBundle(toolboxProps));
-loader.lazyGetter(this, "profilerStrings",() => Services.strings.createBundle(profilerProps));
-loader.lazyGetter(this, "webConsoleStrings", () => Services.strings.createBundle(webConsoleProps));
-loader.lazyGetter(this, "debuggerStrings", () => Services.strings.createBundle(debuggerProps));
-loader.lazyGetter(this, "styleEditorStrings", () => Services.strings.createBundle(styleEditorProps));
-loader.lazyGetter(this, "shaderEditorStrings", () => Services.strings.createBundle(shaderEditorProps));
-loader.lazyGetter(this, "canvasDebuggerStrings", () => Services.strings.createBundle(canvasDebuggerProps));
-loader.lazyGetter(this, "webAudioEditorStrings", () => Services.strings.createBundle(webAudioEditorProps));
-loader.lazyGetter(this, "inspectorStrings", () => Services.strings.createBundle(inspectorProps));
-loader.lazyGetter(this, "netMonitorStrings", () => Services.strings.createBundle(netMonitorProps));
-loader.lazyGetter(this, "storageStrings", () => Services.strings.createBundle(storageProps));
-loader.lazyGetter(this, "scratchpadStrings", () => Services.strings.createBundle(scratchpadProps));
-
-let Tools = {};
-exports.Tools = Tools;
-
-// Definitions
-Tools.options = {
-  id: "options",
-  ordinal: 0,
-  url: "chrome://browser/content/devtools/framework/toolbox-options.xul",
-  icon: "chrome://browser/skin/devtools/tool-options.svg",
-  invertIconForLightTheme: true,
-  bgTheme: "theme-body",
-  label: l10n("options.label", toolboxStrings),
-  iconOnly: true,
-  panelLabel: l10n("options.panelLabel", toolboxStrings),
-  tooltip: l10n("optionsButton.tooltip", toolboxStrings),
-  inMenu: false,
-
-  isTargetSupported: function(target) {
-    return true;
-  },
-
-  build: function(iframeWindow, toolbox) {
-    return new OptionsPanel(iframeWindow, toolbox);
-  }
-}
-
-Tools.inspector = {
-  id: "inspector",
-  accesskey: l10n("inspector.accesskey", inspectorStrings),
-  key: l10n("inspector.commandkey", inspectorStrings),
-  ordinal: 1,
-  modifiers: osString == "Darwin" ? "accel,alt" : "accel,shift",
-  icon: "chrome://browser/skin/devtools/tool-inspector.svg",
-  invertIconForLightTheme: true,
-  url: "chrome://browser/content/devtools/inspector/inspector.xul",
-  label: l10n("inspector.label", inspectorStrings),
-  panelLabel: l10n("inspector.panelLabel", inspectorStrings),
-  tooltip: l10n("inspector.tooltip", inspectorStrings),
-  inMenu: true,
-  commands: [
-    "devtools/resize-commands",
-    "devtools/inspector/inspector-commands",
-    "devtools/eyedropper/commands.js"
-  ],
-
-  preventClosingOnKey: true,
-  onkey: function(panel) {
-    panel.toolbox.highlighterUtils.togglePicker();
-  },
-
-  isTargetSupported: function(target) {
-    return target.hasActor("inspector");
-  },
-
-  build: function(iframeWindow, toolbox) {
-    return new InspectorPanel(iframeWindow, toolbox);
-  }
-};
-
-Tools.webConsole = {
-  id: "webconsole",
-  key: l10n("cmd.commandkey", webConsoleStrings),
-  accesskey: l10n("webConsoleCmd.accesskey", webConsoleStrings),
-  modifiers: Services.appinfo.OS == "Darwin" ? "accel,alt" : "accel,shift",
-  ordinal: 2,
-  icon: "chrome://browser/skin/devtools/tool-webconsole.svg",
-  invertIconForLightTheme: true,
-  url: "chrome://browser/content/devtools/webconsole.xul",
-  label: l10n("ToolboxTabWebconsole.label", webConsoleStrings),
-  menuLabel: l10n("MenuWebconsole.label", webConsoleStrings),
-  panelLabel: l10n("ToolboxWebConsole.panelLabel", webConsoleStrings),
-  tooltip: l10n("ToolboxWebconsole.tooltip", webConsoleStrings),
-  inMenu: true,
-  commands: "devtools/webconsole/console-commands",
-
-  preventClosingOnKey: true,
-  onkey: function(panel, toolbox) {
-    if (toolbox.splitConsole)
-      return toolbox.focusConsoleInput();
-
-    panel.focusInput();
-  },
-
-  isTargetSupported: function(target) {
-    return true;
-  },
-
-  build: function(iframeWindow, toolbox) {
-    return new WebConsolePanel(iframeWindow, toolbox);
-  }
-};
-
-Tools.jsdebugger = {
-  id: "jsdebugger",
-  key: l10n("debuggerMenu.commandkey", debuggerStrings),
-  accesskey: l10n("debuggerMenu.accesskey", debuggerStrings),
-  modifiers: osString == "Darwin" ? "accel,alt" : "accel,shift",
-  ordinal: 3,
-  icon: "chrome://browser/skin/devtools/tool-debugger.svg",
-  invertIconForLightTheme: true,
-  highlightedicon: "chrome://browser/skin/devtools/tool-debugger-paused.svg",
-  url: "chrome://browser/content/devtools/debugger.xul",
-  label: l10n("ToolboxDebugger.label", debuggerStrings),
-  panelLabel: l10n("ToolboxDebugger.panelLabel", debuggerStrings),
-  tooltip: l10n("ToolboxDebugger.tooltip", debuggerStrings),
-  inMenu: true,
-  commands: "devtools/debugger/debugger-commands",
-
-  isTargetSupported: function(target) {
-    return true;
-  },
-
-  build: function(iframeWindow, toolbox) {
-    return new DebuggerPanel(iframeWindow, toolbox);
-  }
-};
-
-Tools.styleEditor = {
-  id: "styleeditor",
-  key: l10n("open.commandkey", styleEditorStrings),
-  ordinal: 4,
-  accesskey: l10n("open.accesskey", styleEditorStrings),
-  modifiers: "shift",
-  icon: "chrome://browser/skin/devtools/tool-styleeditor.svg",
-  invertIconForLightTheme: true,
-  url: "chrome://browser/content/devtools/styleeditor.xul",
-  label: l10n("ToolboxStyleEditor.label", styleEditorStrings),
-  panelLabel: l10n("ToolboxStyleEditor.panelLabel", styleEditorStrings),
-  tooltip: l10n("ToolboxStyleEditor.tooltip2", styleEditorStrings),
-  inMenu: true,
-  commands: "devtools/styleeditor/styleeditor-commands",
-
-  isTargetSupported: function(target) {
-    return target.hasActor("styleEditor") || target.hasActor("styleSheets");
-  },
-
-  build: function(iframeWindow, toolbox) {
-    return new StyleEditorPanel(iframeWindow, toolbox);
-  }
-};
-
-Tools.shaderEditor = {
-  id: "shadereditor",
-  ordinal: 5,
-  visibilityswitch: "devtools.shadereditor.enabled",
-  icon: "chrome://browser/skin/devtools/tool-styleeditor.svg",
-  invertIconForLightTheme: true,
-  url: "chrome://browser/content/devtools/shadereditor.xul",
-  label: l10n("ToolboxShaderEditor.label", shaderEditorStrings),
-  panelLabel: l10n("ToolboxShaderEditor.panelLabel", shaderEditorStrings),
-  tooltip: l10n("ToolboxShaderEditor.tooltip", shaderEditorStrings),
-
-  isTargetSupported: function(target) {
-    return target.hasActor("webgl") && !target.chrome;
-  },
-
-  build: function(iframeWindow, toolbox) {
-    return new ShaderEditorPanel(iframeWindow, toolbox);
-  }
-};
-
-Tools.canvasDebugger = {
-  id: "canvasdebugger",
-  ordinal: 6,
-  visibilityswitch: "devtools.canvasdebugger.enabled",
-  icon: "chrome://browser/skin/devtools/tool-styleeditor.svg",
-  invertIconForLightTheme: true,
-  url: "chrome://browser/content/devtools/canvasdebugger.xul",
-  label: l10n("ToolboxCanvasDebugger.label", canvasDebuggerStrings),
-  panelLabel: l10n("ToolboxCanvasDebugger.panelLabel", canvasDebuggerStrings),
-  tooltip: l10n("ToolboxCanvasDebugger.tooltip", canvasDebuggerStrings),
-
-  // Hide the Canvas Debugger in the Add-on Debugger and Browser Toolbox
-  // (bug 1047520).
-  isTargetSupported: function(target) {
-    return target.hasActor("canvas") && !target.chrome;
-  },
-
-  build: function (iframeWindow, toolbox) {
-    return new CanvasDebuggerPanel(iframeWindow, toolbox);
-  }
-};
-
-Tools.performance = {
-  id: "performance",
-  ordinal: 7,
-  icon: "chrome://browser/skin/devtools/tool-profiler.svg",
-  invertIconForLightTheme: true,
-  url: "chrome://browser/content/devtools/performance.xul",
-  visibilityswitch: "devtools.performance.enabled",
-  label: l10n("profiler.label2", profilerStrings),
-  panelLabel: l10n("profiler.panelLabel2", profilerStrings),
-  tooltip: l10n("profiler.tooltip2", profilerStrings),
-  accesskey: l10n("profiler.accesskey", profilerStrings),
-  key: l10n("profiler.commandkey2", profilerStrings),
-  modifiers: "shift",
-  inMenu: true,
-
-  isTargetSupported: function (target) {
-    return target.hasActor("profiler");
-  },
-
-  build: function (frame, target) {
-    return new PerformancePanel(frame, target);
-  }
-};
-
-Tools.netMonitor = {
-  id: "netmonitor",
-  accesskey: l10n("netmonitor.accesskey", netMonitorStrings),
-  key: l10n("netmonitor.commandkey", netMonitorStrings),
-  ordinal: 9,
-  modifiers: osString == "Darwin" ? "accel,alt" : "accel,shift",
-  visibilityswitch: "devtools.netmonitor.enabled",
-  icon: "chrome://browser/skin/devtools/tool-network.svg",
-  invertIconForLightTheme: true,
-  url: "chrome://browser/content/devtools/netmonitor.xul",
-  label: l10n("netmonitor.label", netMonitorStrings),
-  panelLabel: l10n("netmonitor.panelLabel", netMonitorStrings),
-  tooltip: l10n("netmonitor.tooltip", netMonitorStrings),
-  inMenu: true,
-
-  isTargetSupported: function(target) {
-    return target.getTrait("networkMonitor");
-  },
-
-  build: function(iframeWindow, toolbox) {
-    return new NetMonitorPanel(iframeWindow, toolbox);
-  }
-};
-
-Tools.storage = {
-  id: "storage",
-  key: l10n("storage.commandkey", storageStrings),
-  ordinal: 10,
-  accesskey: l10n("storage.accesskey", storageStrings),
-  modifiers: "shift",
-  visibilityswitch: "devtools.storage.enabled",
-  icon: "chrome://browser/skin/devtools/tool-storage.svg",
-  invertIconForLightTheme: true,
-  url: "chrome://browser/content/devtools/storage.xul",
-  label: l10n("storage.label", storageStrings),
-  menuLabel: l10n("storage.menuLabel", storageStrings),
-  panelLabel: l10n("storage.panelLabel", storageStrings),
-  tooltip: l10n("storage.tooltip2", storageStrings),
-  inMenu: true,
-
-  isTargetSupported: function(target) {
-    return target.isLocalTab ||
-           ( target.hasActor("storage") &&
-             target.getTrait("storageInspector") );
-  },
-
-  build: function(iframeWindow, toolbox) {
-    return new StoragePanel(iframeWindow, toolbox);
-  }
-};
-
-Tools.webAudioEditor = {
-  id: "webaudioeditor",
-  ordinal: 11,
-  visibilityswitch: "devtools.webaudioeditor.enabled",
-  icon: "chrome://browser/skin/devtools/tool-webaudio.svg",
-  invertIconForLightTheme: true,
-  url: "chrome://browser/content/devtools/webaudioeditor.xul",
-  label: l10n("ToolboxWebAudioEditor1.label", webAudioEditorStrings),
-  panelLabel: l10n("ToolboxWebAudioEditor1.panelLabel", webAudioEditorStrings),
-  tooltip: l10n("ToolboxWebAudioEditor1.tooltip", webAudioEditorStrings),
-
-  isTargetSupported: function(target) {
-    return !target.chrome && target.hasActor("webaudio");
-  },
-
-  build: function(iframeWindow, toolbox) {
-    return new WebAudioEditorPanel(iframeWindow, toolbox);
-  }
-};
-
-Tools.scratchpad = {
-  id: "scratchpad",
-  ordinal: 12,
-  visibilityswitch: "devtools.scratchpad.enabled",
-  icon: "chrome://browser/skin/devtools/tool-scratchpad.svg",
-  invertIconForLightTheme: true,
-  url: "chrome://browser/content/devtools/scratchpad.xul",
-  label: l10n("scratchpad.label", scratchpadStrings),
-  panelLabel: l10n("scratchpad.panelLabel", scratchpadStrings),
-  tooltip: l10n("scratchpad.tooltip", scratchpadStrings),
-  inMenu: false,
-  commands: "devtools/scratchpad/scratchpad-commands",
-
-  isTargetSupported: function(target) {
-    return target.isRemote;
-  },
-
-  build: function(iframeWindow, toolbox) {
-    return new ScratchpadPanel(iframeWindow, toolbox);
-  }
-};
-
-let defaultTools = [
-  Tools.options,
-  Tools.webConsole,
-  Tools.inspector,
-  Tools.jsdebugger,
-  Tools.styleEditor,
-  Tools.shaderEditor,
-  Tools.canvasDebugger,
-  Tools.webAudioEditor,
-  Tools.performance,
-  Tools.netMonitor,
-  Tools.storage,
-  Tools.scratchpad
-];
-
-exports.defaultTools = defaultTools;
-
-Tools.darkTheme = {
-  id: "dark",
-  label: l10n("options.darkTheme.label", toolboxStrings),
-  ordinal: 1,
-  stylesheets: ["chrome://browser/skin/devtools/dark-theme.css"],
-  classList: ["theme-dark"],
-};
-
-Tools.lightTheme = {
-  id: "light",
-  label: l10n("options.lightTheme.label", toolboxStrings),
-  ordinal: 2,
-  stylesheets: ["chrome://browser/skin/devtools/light-theme.css"],
-  classList: ["theme-light"],
-};
-
-exports.defaultThemes = [
-  Tools.darkTheme,
-  Tools.lightTheme,
-];
-
-/**
- * Lookup l10n string from a string bundle.
- *
- * @param {string} name
- *        The key to lookup.
- * @param {StringBundle} bundle
- *        The key to lookup.
- * @returns A localized version of the given key.
- */
-function l10n(name, bundle)
-{
-  try {
-    return bundle.GetStringFromName(name);
-  } catch (ex) {
-    Services.console.logStringMessage("Error reading '" + name + "'");
-    throw new Error("l10n error with " + name);
-  }
-}
diff --git a/browser/devtools/eyedropper/commands.js b/browser/devtools/eyedropper/commands.js
--- a/browser/devtools/eyedropper/commands.js
+++ b/browser/devtools/eyedropper/commands.js
@@ -1,35 +1,30 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
-const l10n = require("gcli/l10n");
+const gcli = require("gcli/index");
 const EventEmitter = require("devtools/toolkit/event-emitter");
 const eventEmitter = new EventEmitter();
 
 let { Eyedropper, EyedropperManager } = require("devtools/eyedropper/eyedropper");
 
 /**
  * 'eyedropper' command
  */
 exports.items = [{
-  item: "command",
-  runAt: "client",
   name: "eyedropper",
-  description: l10n.lookup("eyedropperDesc"),
-  manual: l10n.lookup("eyedropperManual"),
+  description: gcli.lookup("eyedropperDesc"),
+  manual: gcli.lookup("eyedropperManual"),
   buttonId: "command-button-eyedropper",
   buttonClass: "command-button command-button-invertable",
-  tooltipText: l10n.lookup("eyedropperTooltip"),
+  tooltipText: gcli.lookup("eyedropperTooltip"),
   state: {
     isChecked: function(target) {
-      if (!target.tab) {
-        return false;
-      }
       let chromeWindow = target.tab.ownerDocument.defaultView;
       let dropper = EyedropperManager.getInstance(chromeWindow);
       if (dropper) {
         return true;
       }
       return false;
     },
     onChange: function(target, changeHandler) {
diff --git a/browser/devtools/framework/test/browser_toolbox_tool_remote_reopen.js b/browser/devtools/framework/test/browser_toolbox_tool_remote_reopen.js
--- a/browser/devtools/framework/test/browser_toolbox_tool_remote_reopen.js
+++ b/browser/devtools/framework/test/browser_toolbox_tool_remote_reopen.js
@@ -113,20 +113,16 @@ function test() {
       for (let actor of pool.__poolMap.keys()) {
         // Bug 1056342: Profiler fails today because of framerate actor, but
         // this appears more complex to rework, so leave it for that bug to
         // resolve.
         if (actor.contains("framerateActor")) {
           todo(false, "Front for " + actor + " still held in pool!");
           continue;
         }
-        // gcliActor is for the commandline which is separate to the toolbox
-        if (actor.contains("gcliActor")) {
-          continue;
-        }
         ok(false, "Front for " + actor + " still held in pool!");
       }
     }
 
     gBrowser.removeCurrentTab();
     DebuggerServer.destroy();
     toggleAllTools(false);
     finish();
diff --git a/browser/devtools/framework/toolbox.js b/browser/devtools/framework/toolbox.js
--- a/browser/devtools/framework/toolbox.js
+++ b/browser/devtools/framework/toolbox.js
@@ -708,23 +708,20 @@ Toolbox.prototype = {
   /**
    * Add buttons to the UI as specified in the devtools.toolbox.toolbarSpec pref
    */
   _buildButtons: function() {
     if (!this.target.isAddon) {
       this._buildPickerButton();
     }
 
-    const options = {
-      environment: CommandUtils.createEnvironment(this, '_target')
-    };
-    return CommandUtils.createRequisition(this.target, options).then(requisition => {
+    let spec = CommandUtils.getCommandbarSpec("devtools.toolbox.toolbarSpec");
+    let environment = CommandUtils.createEnvironment(this, '_target');
+    return CommandUtils.createRequisition(environment).then(requisition => {
       this._requisition = requisition;
-
-      const spec = CommandUtils.getCommandbarSpec("devtools.toolbox.toolbarSpec");
       return CommandUtils.createButtons(spec, this.target, this.doc,
                                         requisition).then(buttons => {
         let container = this.doc.getElementById("toolbox-buttons");
         buttons.forEach(button=> {
           if (button) {
             container.appendChild(button);
           }
         });
@@ -1750,17 +1747,17 @@ Toolbox.prototype = {
 
     // Destroy the profiler connection
     outstanding.push(this._disconnectProfiler());
 
     // We need to grab a reference to win before this._host is destroyed.
     let win = this.frame.ownerGlobal;
 
     if (this._requisition) {
-      CommandUtils.destroyRequisition(this._requisition, this.target);
+      this._requisition.destroy();
     }
     this._telemetry.toolClosed("toolbox");
     this._telemetry.destroy();
 
     // Finish all outstanding tasks (which means finish destroying panels and
     // then destroying the host, successfully or not) before destroying the
     // target.
     this._destroyer = DevToolsUtils.settleAll(outstanding)
diff --git a/browser/devtools/inspector/inspector-commands.js b/browser/devtools/inspector/inspector-commands.js
--- a/browser/devtools/inspector/inspector-commands.js
+++ b/browser/devtools/inspector/inspector-commands.js
@@ -1,28 +1,26 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
-const l10n = require("gcli/l10n");
+const gcli = require("gcli/index");
 
 exports.items = [{
-  item: "command",
-  runAt: "server",
   name: "inspect",
-  description: l10n.lookup("inspectDesc"),
-  manual: l10n.lookup("inspectManual"),
+  description: gcli.lookup("inspectDesc"),
+  manual: gcli.lookup("inspectManual"),
   params: [
     {
       name: "selector",
       type: "node",
-      description: l10n.lookup("inspectNodeDesc"),
-      manual: l10n.lookup("inspectNodeManual")
+      description: gcli.lookup("inspectNodeDesc"),
+      manual: gcli.lookup("inspectNodeManual")
     }
   ],
   exec: function(args, context) {
     let target = context.environment.target;
     let gDevTools = require("resource:///modules/devtools/gDevTools.jsm").gDevTools;
 
     return gDevTools.showToolbox(target, "inspector").then(toolbox => {
       toolbox.getCurrentPanel().selection.setNode(args.selector, "gcli");
diff --git a/browser/devtools/main.js b/browser/devtools/main.js
--- a/browser/devtools/main.js
+++ b/browser/devtools/main.js
@@ -1,45 +1,445 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
-const { Cu } = require("chrome");
+const {Cc, Ci, Cu} = require("chrome");
+
+Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 Cu.import("resource://gre/modules/Services.jsm");
-const { gDevTools } = require("resource:///modules/devtools/gDevTools.jsm");
-
-const { defaultTools, defaultThemes } = require("definitions");
-
-defaultTools.forEach(definition => gDevTools.registerTool(definition));
-defaultThemes.forEach(definition => gDevTools.registerTheme(definition));
-
-// Re-export for backwards compatibility, but we should probably the
-// definitions from require("definitions") in the future
-exports.defaultTools = require("definitions").defaultTools;
-exports.defaultThemes = require("definitions").defaultThemes;
-exports.Tools = require("definitions").Tools;
+Cu.import("resource:///modules/devtools/gDevTools.jsm");
 
 Object.defineProperty(exports, "Toolbox", {
   get: () => require("devtools/framework/toolbox").Toolbox
 });
 Object.defineProperty(exports, "TargetFactory", {
   get: () => require("devtools/framework/target").TargetFactory
 });
 
-const unloadObserver = {
+loader.lazyGetter(this, "osString", () => Cc["@mozilla.org/xre/app-info;1"].getService(Ci.nsIXULRuntime).OS);
+
+let events = require("sdk/system/events");
+
+// Panels
+loader.lazyGetter(this, "OptionsPanel", () => require("devtools/framework/toolbox-options").OptionsPanel);
+loader.lazyGetter(this, "InspectorPanel", () => require("devtools/inspector/inspector-panel").InspectorPanel);
+loader.lazyGetter(this, "WebConsolePanel", () => require("devtools/webconsole/panel").WebConsolePanel);
+loader.lazyGetter(this, "DebuggerPanel", () => require("devtools/debugger/panel").DebuggerPanel);
+loader.lazyGetter(this, "StyleEditorPanel", () => require("devtools/styleeditor/styleeditor-panel").StyleEditorPanel);
+loader.lazyGetter(this, "ShaderEditorPanel", () => require("devtools/shadereditor/panel").ShaderEditorPanel);
+loader.lazyGetter(this, "CanvasDebuggerPanel", () => require("devtools/canvasdebugger/panel").CanvasDebuggerPanel);
+loader.lazyGetter(this, "WebAudioEditorPanel", () => require("devtools/webaudioeditor/panel").WebAudioEditorPanel);
+loader.lazyGetter(this, "PerformancePanel", () => require("devtools/performance/panel").PerformancePanel);
+loader.lazyGetter(this, "NetMonitorPanel", () => require("devtools/netmonitor/panel").NetMonitorPanel);
+loader.lazyGetter(this, "StoragePanel", () => require("devtools/storage/panel").StoragePanel);
+loader.lazyGetter(this, "ScratchpadPanel", () => require("devtools/scratchpad/scratchpad-panel").ScratchpadPanel);
+
+// Strings
+const toolboxProps = "chrome://browser/locale/devtools/toolbox.properties";
+const inspectorProps = "chrome://browser/locale/devtools/inspector.properties";
+const webConsoleProps = "chrome://browser/locale/devtools/webconsole.properties";
+const debuggerProps = "chrome://browser/locale/devtools/debugger.properties";
+const styleEditorProps = "chrome://browser/locale/devtools/styleeditor.properties";
+const shaderEditorProps = "chrome://browser/locale/devtools/shadereditor.properties";
+const canvasDebuggerProps = "chrome://browser/locale/devtools/canvasdebugger.properties";
+const webAudioEditorProps = "chrome://browser/locale/devtools/webaudioeditor.properties";
+const profilerProps = "chrome://browser/locale/devtools/profiler.properties";
+const netMonitorProps = "chrome://browser/locale/devtools/netmonitor.properties";
+const storageProps = "chrome://browser/locale/devtools/storage.properties";
+const scratchpadProps = "chrome://browser/locale/devtools/scratchpad.properties";
+
+loader.lazyGetter(this, "toolboxStrings", () => Services.strings.createBundle(toolboxProps));
+loader.lazyGetter(this, "profilerStrings",() => Services.strings.createBundle(profilerProps));
+loader.lazyGetter(this, "webConsoleStrings", () => Services.strings.createBundle(webConsoleProps));
+loader.lazyGetter(this, "debuggerStrings", () => Services.strings.createBundle(debuggerProps));
+loader.lazyGetter(this, "styleEditorStrings", () => Services.strings.createBundle(styleEditorProps));
+loader.lazyGetter(this, "shaderEditorStrings", () => Services.strings.createBundle(shaderEditorProps));
+loader.lazyGetter(this, "canvasDebuggerStrings", () => Services.strings.createBundle(canvasDebuggerProps));
+loader.lazyGetter(this, "webAudioEditorStrings", () => Services.strings.createBundle(webAudioEditorProps));
+loader.lazyGetter(this, "inspectorStrings", () => Services.strings.createBundle(inspectorProps));
+loader.lazyGetter(this, "netMonitorStrings", () => Services.strings.createBundle(netMonitorProps));
+loader.lazyGetter(this, "storageStrings", () => Services.strings.createBundle(storageProps));
+loader.lazyGetter(this, "scratchpadStrings", () => Services.strings.createBundle(scratchpadProps));
+
+let Tools = {};
+exports.Tools = Tools;
+
+// Definitions
+Tools.options = {
+  id: "options",
+  ordinal: 0,
+  url: "chrome://browser/content/devtools/framework/toolbox-options.xul",
+  icon: "chrome://browser/skin/devtools/tool-options.svg",
+  invertIconForLightTheme: true,
+  bgTheme: "theme-body",
+  label: l10n("options.label", toolboxStrings),
+  iconOnly: true,
+  panelLabel: l10n("options.panelLabel", toolboxStrings),
+  tooltip: l10n("optionsButton.tooltip", toolboxStrings),
+  inMenu: false,
+
+  isTargetSupported: function(target) {
+    return true;
+  },
+
+  build: function(iframeWindow, toolbox) {
+    return new OptionsPanel(iframeWindow, toolbox);
+  }
+}
+
+Tools.inspector = {
+  id: "inspector",
+  accesskey: l10n("inspector.accesskey", inspectorStrings),
+  key: l10n("inspector.commandkey", inspectorStrings),
+  ordinal: 1,
+  modifiers: osString == "Darwin" ? "accel,alt" : "accel,shift",
+  icon: "chrome://browser/skin/devtools/tool-inspector.svg",
+  invertIconForLightTheme: true,
+  url: "chrome://browser/content/devtools/inspector/inspector.xul",
+  label: l10n("inspector.label", inspectorStrings),
+  panelLabel: l10n("inspector.panelLabel", inspectorStrings),
+  tooltip: l10n("inspector.tooltip", inspectorStrings),
+  inMenu: true,
+  commands: [
+    "devtools/resize-commands",
+    "devtools/inspector/inspector-commands",
+    "devtools/eyedropper/commands.js"
+  ],
+
+  preventClosingOnKey: true,
+  onkey: function(panel) {
+    panel.toolbox.highlighterUtils.togglePicker();
+  },
+
+  isTargetSupported: function(target) {
+    return target.hasActor("inspector");
+  },
+
+  build: function(iframeWindow, toolbox) {
+    return new InspectorPanel(iframeWindow, toolbox);
+  }
+};
+
+Tools.webConsole = {
+  id: "webconsole",
+  key: l10n("cmd.commandkey", webConsoleStrings),
+  accesskey: l10n("webConsoleCmd.accesskey", webConsoleStrings),
+  modifiers: Services.appinfo.OS == "Darwin" ? "accel,alt" : "accel,shift",
+  ordinal: 2,
+  icon: "chrome://browser/skin/devtools/tool-webconsole.svg",
+  invertIconForLightTheme: true,
+  url: "chrome://browser/content/devtools/webconsole.xul",
+  label: l10n("ToolboxTabWebconsole.label", webConsoleStrings),
+  menuLabel: l10n("MenuWebconsole.label", webConsoleStrings),
+  panelLabel: l10n("ToolboxWebConsole.panelLabel", webConsoleStrings),
+  tooltip: l10n("ToolboxWebconsole.tooltip", webConsoleStrings),
+  inMenu: true,
+  commands: "devtools/webconsole/console-commands",
+
+  preventClosingOnKey: true,
+  onkey: function(panel, toolbox) {
+    if (toolbox.splitConsole)
+      return toolbox.focusConsoleInput();
+
+    panel.focusInput();
+  },
+
+  isTargetSupported: function(target) {
+    return true;
+  },
+
+  build: function(iframeWindow, toolbox) {
+    return new WebConsolePanel(iframeWindow, toolbox);
+  }
+};
+
+Tools.jsdebugger = {
+  id: "jsdebugger",
+  key: l10n("debuggerMenu.commandkey", debuggerStrings),
+  accesskey: l10n("debuggerMenu.accesskey", debuggerStrings),
+  modifiers: osString == "Darwin" ? "accel,alt" : "accel,shift",
+  ordinal: 3,
+  icon: "chrome://browser/skin/devtools/tool-debugger.svg",
+  invertIconForLightTheme: true,
+  highlightedicon: "chrome://browser/skin/devtools/tool-debugger-paused.svg",
+  url: "chrome://browser/content/devtools/debugger.xul",
+  label: l10n("ToolboxDebugger.label", debuggerStrings),
+  panelLabel: l10n("ToolboxDebugger.panelLabel", debuggerStrings),
+  tooltip: l10n("ToolboxDebugger.tooltip", debuggerStrings),
+  inMenu: true,
+  commands: "devtools/debugger/debugger-commands",
+
+  isTargetSupported: function(target) {
+    return true;
+  },
+
+  build: function(iframeWindow, toolbox) {
+    return new DebuggerPanel(iframeWindow, toolbox);
+  }
+};
+
+Tools.styleEditor = {
+  id: "styleeditor",
+  key: l10n("open.commandkey", styleEditorStrings),
+  ordinal: 4,
+  accesskey: l10n("open.accesskey", styleEditorStrings),
+  modifiers: "shift",
+  icon: "chrome://browser/skin/devtools/tool-styleeditor.svg",
+  invertIconForLightTheme: true,
+  url: "chrome://browser/content/devtools/styleeditor.xul",
+  label: l10n("ToolboxStyleEditor.label", styleEditorStrings),
+  panelLabel: l10n("ToolboxStyleEditor.panelLabel", styleEditorStrings),
+  tooltip: l10n("ToolboxStyleEditor.tooltip2", styleEditorStrings),
+  inMenu: true,
+  commands: "devtools/styleeditor/styleeditor-commands",
+
+  isTargetSupported: function(target) {
+    return target.hasActor("styleEditor") || target.hasActor("styleSheets");
+  },
+
+  build: function(iframeWindow, toolbox) {
+    return new StyleEditorPanel(iframeWindow, toolbox);
+  }
+};
+
+Tools.shaderEditor = {
+  id: "shadereditor",
+  ordinal: 5,
+  visibilityswitch: "devtools.shadereditor.enabled",
+  icon: "chrome://browser/skin/devtools/tool-styleeditor.svg",
+  invertIconForLightTheme: true,
+  url: "chrome://browser/content/devtools/shadereditor.xul",
+  label: l10n("ToolboxShaderEditor.label", shaderEditorStrings),
+  panelLabel: l10n("ToolboxShaderEditor.panelLabel", shaderEditorStrings),
+  tooltip: l10n("ToolboxShaderEditor.tooltip", shaderEditorStrings),
+
+  isTargetSupported: function(target) {
+    return target.hasActor("webgl") && !target.chrome;
+  },
+
+  build: function(iframeWindow, toolbox) {
+    return new ShaderEditorPanel(iframeWindow, toolbox);
+  }
+};
+
+Tools.canvasDebugger = {
+  id: "canvasdebugger",
+  ordinal: 6,
+  visibilityswitch: "devtools.canvasdebugger.enabled",
+  icon: "chrome://browser/skin/devtools/tool-styleeditor.svg",
+  invertIconForLightTheme: true,
+  url: "chrome://browser/content/devtools/canvasdebugger.xul",
+  label: l10n("ToolboxCanvasDebugger.label", canvasDebuggerStrings),
+  panelLabel: l10n("ToolboxCanvasDebugger.panelLabel", canvasDebuggerStrings),
+  tooltip: l10n("ToolboxCanvasDebugger.tooltip", canvasDebuggerStrings),
+
+  // Hide the Canvas Debugger in the Add-on Debugger and Browser Toolbox
+  // (bug 1047520).
+  isTargetSupported: function(target) {
+    return target.hasActor("canvas") && !target.chrome;
+  },
+
+  build: function (iframeWindow, toolbox) {
+    return new CanvasDebuggerPanel(iframeWindow, toolbox);
+  }
+};
+
+Tools.performance = {
+  id: "performance",
+  ordinal: 7,
+  icon: "chrome://browser/skin/devtools/tool-profiler.svg",
+  invertIconForLightTheme: true,
+  url: "chrome://browser/content/devtools/performance.xul",
+  visibilityswitch: "devtools.performance.enabled",
+  label: l10n("profiler.label2", profilerStrings),
+  panelLabel: l10n("profiler.panelLabel2", profilerStrings),
+  tooltip: l10n("profiler.tooltip2", profilerStrings),
+  accesskey: l10n("profiler.accesskey", profilerStrings),
+  key: l10n("profiler.commandkey2", profilerStrings),
+  modifiers: "shift",
+  inMenu: true,
+
+  isTargetSupported: function (target) {
+    return target.hasActor("profiler");
+  },
+
+  build: function (frame, target) {
+    return new PerformancePanel(frame, target);
+  }
+};
+
+Tools.netMonitor = {
+  id: "netmonitor",
+  accesskey: l10n("netmonitor.accesskey", netMonitorStrings),
+  key: l10n("netmonitor.commandkey", netMonitorStrings),
+  ordinal: 9,
+  modifiers: osString == "Darwin" ? "accel,alt" : "accel,shift",
+  visibilityswitch: "devtools.netmonitor.enabled",
+  icon: "chrome://browser/skin/devtools/tool-network.svg",
+  invertIconForLightTheme: true,
+  url: "chrome://browser/content/devtools/netmonitor.xul",
+  label: l10n("netmonitor.label", netMonitorStrings),
+  panelLabel: l10n("netmonitor.panelLabel", netMonitorStrings),
+  tooltip: l10n("netmonitor.tooltip", netMonitorStrings),
+  inMenu: true,
+
+  isTargetSupported: function(target) {
+    return target.getTrait("networkMonitor");
+  },
+
+  build: function(iframeWindow, toolbox) {
+    return new NetMonitorPanel(iframeWindow, toolbox);
+  }
+};
+
+Tools.storage = {
+  id: "storage",
+  key: l10n("storage.commandkey", storageStrings),
+  ordinal: 10,
+  accesskey: l10n("storage.accesskey", storageStrings),
+  modifiers: "shift",
+  visibilityswitch: "devtools.storage.enabled",
+  icon: "chrome://browser/skin/devtools/tool-storage.svg",
+  invertIconForLightTheme: true,
+  url: "chrome://browser/content/devtools/storage.xul",
+  label: l10n("storage.label", storageStrings),
+  menuLabel: l10n("storage.menuLabel", storageStrings),
+  panelLabel: l10n("storage.panelLabel", storageStrings),
+  tooltip: l10n("storage.tooltip2", storageStrings),
+  inMenu: true,
+
+  isTargetSupported: function(target) {
+    return target.isLocalTab ||
+           ( target.hasActor("storage") &&
+             target.getTrait("storageInspector") );
+  },
+
+  build: function(iframeWindow, toolbox) {
+    return new StoragePanel(iframeWindow, toolbox);
+  }
+};
+
+Tools.webAudioEditor = {
+  id: "webaudioeditor",
+  ordinal: 11,
+  visibilityswitch: "devtools.webaudioeditor.enabled",
+  icon: "chrome://browser/skin/devtools/tool-webaudio.svg",
+  invertIconForLightTheme: true,
+  url: "chrome://browser/content/devtools/webaudioeditor.xul",
+  label: l10n("ToolboxWebAudioEditor1.label", webAudioEditorStrings),
+  panelLabel: l10n("ToolboxWebAudioEditor1.panelLabel", webAudioEditorStrings),
+  tooltip: l10n("ToolboxWebAudioEditor1.tooltip", webAudioEditorStrings),
+
+  isTargetSupported: function(target) {
+    return !target.chrome && target.hasActor("webaudio");
+  },
+
+  build: function(iframeWindow, toolbox) {
+    return new WebAudioEditorPanel(iframeWindow, toolbox);
+  }
+};
+
+Tools.scratchpad = {
+  id: "scratchpad",
+  ordinal: 12,
+  visibilityswitch: "devtools.scratchpad.enabled",
+  icon: "chrome://browser/skin/devtools/tool-scratchpad.svg",
+  invertIconForLightTheme: true,
+  url: "chrome://browser/content/devtools/scratchpad.xul",
+  label: l10n("scratchpad.label", scratchpadStrings),
+  panelLabel: l10n("scratchpad.panelLabel", scratchpadStrings),
+  tooltip: l10n("scratchpad.tooltip", scratchpadStrings),
+  inMenu: false,
+  commands: "devtools/scratchpad/scratchpad-commands",
+
+  isTargetSupported: function(target) {
+    return target.isRemote;
+  },
+
+  build: function(iframeWindow, toolbox) {
+    return new ScratchpadPanel(iframeWindow, toolbox);
+  }
+};
+
+let defaultTools = [
+  Tools.options,
+  Tools.webConsole,
+  Tools.inspector,
+  Tools.jsdebugger,
+  Tools.styleEditor,
+  Tools.shaderEditor,
+  Tools.canvasDebugger,
+  Tools.webAudioEditor,
+  Tools.performance,
+  Tools.netMonitor,
+  Tools.storage,
+  Tools.scratchpad
+];
+
+exports.defaultTools = defaultTools;
+
+for (let definition of defaultTools) {
+  gDevTools.registerTool(definition);
+}
+
+Tools.darkTheme = {
+  id: "dark",
+  label: l10n("options.darkTheme.label", toolboxStrings),
+  ordinal: 1,
+  stylesheets: ["chrome://browser/skin/devtools/dark-theme.css"],
+  classList: ["theme-dark"],
+};
+
+Tools.lightTheme = {
+  id: "light",
+  label: l10n("options.lightTheme.label", toolboxStrings),
+  ordinal: 2,
+  stylesheets: ["chrome://browser/skin/devtools/light-theme.css"],
+  classList: ["theme-light"],
+};
+
+let defaultThemes = [
+  Tools.darkTheme,
+  Tools.lightTheme,
+];
+
+for (let definition of defaultThemes) {
+  gDevTools.registerTheme(definition);
+}
+
+var unloadObserver = {
   observe: function(subject, topic, data) {
     if (subject.wrappedJSObject === require("@loader/unload")) {
       Services.obs.removeObserver(unloadObserver, "sdk:loader:destroy");
       for (let definition of gDevTools.getToolDefinitionArray()) {
         gDevTools.unregisterTool(definition.id);
       }
       for (let definition of gDevTools.getThemeDefinitionArray()) {
         gDevTools.unregisterTheme(definition.id);
       }
     }
   }
 };
 Services.obs.addObserver(unloadObserver, "sdk:loader:destroy", false);
 
-const events = require("sdk/system/events");
 events.emit("devtools-loaded", {});
+
+/**
+ * Lookup l10n string from a string bundle.
+ *
+ * @param {string} name
+ *        The key to lookup.
+ * @param {StringBundle} bundle
+ *        The key to lookup.
+ * @returns A localized version of the given key.
+ */
+function l10n(name, bundle)
+{
+  try {
+    return bundle.GetStringFromName(name);
+  } catch (ex) {
+    Services.console.logStringMessage("Error reading '" + name + "'");
+    throw new Error("l10n error with " + name);
+  }
+}
diff --git a/browser/devtools/moz.build b/browser/devtools/moz.build
--- a/browser/devtools/moz.build
+++ b/browser/devtools/moz.build
@@ -36,11 +36,10 @@ DIRS += [
 EXTRA_COMPONENTS += [
     'devtools-clhandler.js',
     'devtools-clhandler.manifest',
 ]
 
 JAR_MANIFESTS += ['jar.mn']
 
 EXTRA_JS_MODULES.devtools += [
-    'definitions.js',
     'main.js',
 ]
diff --git a/browser/devtools/responsivedesign/resize-commands.js b/browser/devtools/responsivedesign/resize-commands.js
--- a/browser/devtools/responsivedesign/resize-commands.js
+++ b/browser/devtools/responsivedesign/resize-commands.js
@@ -6,91 +6,78 @@
 
 const { Cc, Ci, Cu } = require("chrome");
 
 const BRAND_SHORT_NAME = Cc["@mozilla.org/intl/stringbundle;1"].
                          getService(Ci.nsIStringBundleService).
                          createBundle("chrome://branding/locale/brand.properties").
                          GetStringFromName("brandShortName");
 
-const l10n = require("gcli/l10n");
+const gcli = require("gcli/index");
 
 exports.items = [
   {
     name: 'resize',
-    description: l10n.lookup('resizeModeDesc')
+    description: gcli.lookup('resizeModeDesc')
   },
   {
-    item: "command",
-    runAt: "client",
     name: 'resize on',
-    description: l10n.lookup('resizeModeOnDesc'),
-    manual: l10n.lookupFormat('resizeModeManual2', [BRAND_SHORT_NAME]),
+    description: gcli.lookup('resizeModeOnDesc'),
+    manual: gcli.lookupFormat('resizeModeManual2', [BRAND_SHORT_NAME]),
     exec: gcli_cmd_resize
   },
   {
-    item: "command",
-    runAt: "client",
     name: 'resize off',
-    description: l10n.lookup('resizeModeOffDesc'),
-    manual: l10n.lookupFormat('resizeModeManual2', [BRAND_SHORT_NAME]),
+    description: gcli.lookup('resizeModeOffDesc'),
+    manual: gcli.lookupFormat('resizeModeManual2', [BRAND_SHORT_NAME]),
     exec: gcli_cmd_resize
   },
   {
-    item: "command",
-    runAt: "client",
     name: 'resize toggle',
     buttonId: "command-button-responsive",
     buttonClass: "command-button command-button-invertable",
-    tooltipText: l10n.lookup("resizeModeToggleTooltip"),
-    description: l10n.lookup('resizeModeToggleDesc'),
-    manual: l10n.lookupFormat('resizeModeManual2', [BRAND_SHORT_NAME]),
+    tooltipText: gcli.lookup("resizeModeToggleTooltip"),
+    description: gcli.lookup('resizeModeToggleDesc'),
+    manual: gcli.lookupFormat('resizeModeManual2', [BRAND_SHORT_NAME]),
     state: {
       isChecked: function(aTarget) {
-        if (!aTarget.tab) {
-          return false;
-        }
         let browserWindow = aTarget.tab.ownerDocument.defaultView;
         let mgr = browserWindow.ResponsiveUI.ResponsiveUIManager;
         return mgr.isActiveForTab(aTarget.tab);
       },
       onChange: function(aTarget, aChangeHandler) {
-        if (aTarget.tab) {
-          let browserWindow = aTarget.tab.ownerDocument.defaultView;
-          let mgr = browserWindow.ResponsiveUI.ResponsiveUIManager;
-          mgr.on("on", aChangeHandler);
-          mgr.on("off", aChangeHandler);
-        }
+        let browserWindow = aTarget.tab.ownerDocument.defaultView;
+        let mgr = browserWindow.ResponsiveUI.ResponsiveUIManager;
+        mgr.on("on", aChangeHandler);
+        mgr.on("off", aChangeHandler);
       },
       offChange: function(aTarget, aChangeHandler) {
         if (aTarget.tab) {
           let browserWindow = aTarget.tab.ownerDocument.defaultView;
           let mgr = browserWindow.ResponsiveUI.ResponsiveUIManager;
           mgr.off("on", aChangeHandler);
           mgr.off("off", aChangeHandler);
         }
       },
     },
     exec: gcli_cmd_resize
   },
   {
-    item: "command",
-    runAt: "client",
     name: 'resize to',
-    description: l10n.lookup('resizeModeToDesc'),
+    description: gcli.lookup('resizeModeToDesc'),
     params: [
       {
         name: 'width',
         type: 'number',
-        description: l10n.lookup("resizePageArgWidthDesc"),
+        description: gcli.lookup("resizePageArgWidthDesc"),
       },
       {
         name: 'height',
         type: 'number',
-        description: l10n.lookup("resizePageArgHeightDesc"),
+        description: gcli.lookup("resizePageArgHeightDesc"),
       },
     ],
     exec: gcli_cmd_resize
   }
 ];
 
 function gcli_cmd_resize(args, context) {
   let browserWindow = context.environment.chromeWindow;
diff --git a/browser/devtools/scratchpad/scratchpad-commands.js b/browser/devtools/scratchpad/scratchpad-commands.js
--- a/browser/devtools/scratchpad/scratchpad-commands.js
+++ b/browser/devtools/scratchpad/scratchpad-commands.js
@@ -1,21 +1,19 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
-const l10n = require("gcli/l10n");
+const gcli = require("gcli/index");
 
 exports.items = [{
-  item: "command",
-  runAt: "client",
   name: "scratchpad",
   buttonId: "command-button-scratchpad",
   buttonClass: "command-button command-button-invertable",
-  tooltipText: l10n.lookup("scratchpadOpenTooltip"),
+  tooltipText: gcli.lookup("scratchpadOpenTooltip"),
   hidden: true,
   exec: function(args, context) {
     let Scratchpad = context.environment.chromeWindow.Scratchpad;
     Scratchpad.ScratchpadManager.openScratchpad();
   }
 }];
diff --git a/browser/devtools/shared/DeveloperToolbar.jsm b/browser/devtools/shared/DeveloperToolbar.jsm
--- a/browser/devtools/shared/DeveloperToolbar.jsm
+++ b/browser/devtools/shared/DeveloperToolbar.jsm
@@ -34,62 +34,55 @@ XPCOMUtils.defineLazyGetter(this, "prefB
 });
 
 XPCOMUtils.defineLazyGetter(this, "toolboxStrings", function () {
   return Services.strings.createBundle("chrome://browser/locale/devtools/toolbox.properties");
 });
 
 const Telemetry = require("devtools/shared/telemetry");
 
-XPCOMUtils.defineLazyGetter(this, "gcliInit", function() {
+// This lazy getter is needed to prevent a require loop
+XPCOMUtils.defineLazyGetter(this, "gcli", () => {
   try {
-    return require("devtools/commandline/commands-index");
+    require("devtools/commandline/commands-index");
+    return require("gcli/index");
   }
   catch (ex) {
-    console.log(ex);
+    console.error(ex);
   }
 });
 
 XPCOMUtils.defineLazyGetter(this, "util", () => {
   return require("gcli/util/util");
 });
 
 Object.defineProperty(this, "ConsoleServiceListener", {
   get: function() {
     return require("devtools/toolkit/webconsole/utils").ConsoleServiceListener;
   },
   configurable: true,
   enumerable: true
 });
 
-const promise = Cu.import("resource://gre/modules/Promise.jsm", {}).Promise;
+const promise = Cu.import('resource://gre/modules/Promise.jsm', {}).Promise;
 
 /**
  * A collection of utilities to help working with commands
  */
 let CommandUtils = {
   /**
    * Utility to ensure that things are loaded in the correct order
    */
-  createRequisition: function(target, options) {
-    return gcliInit.getSystem(target).then(system => {
-      var Requisition = require("gcli/cli").Requisition;
-      return new Requisition(system, options);
+  createRequisition: function(environment) {
+    return gcli.load().then(() => {
+      return gcli.createRequisition({ environment: environment });
     });
   },
 
   /**
-   * Destroy the remote side of the requisition as well as the local side
-   */
-  destroyRequisition: function(requisition, target) {
-    requisition.destroy();
-    gcliInit.releaseSystem(target);
-  },
-
-  /**
    * Read a toolbarSpec from preferences
    * @param pref The name of the preference to read
    */
   getCommandbarSpec: function(pref) {
     let value = prefBranch.getComplexValue(pref, Ci.nsISupportsString).data;
     return JSON.parse(value);
   },
 
@@ -107,16 +100,22 @@ let CommandUtils = {
         let button = document.createElement("toolbarbutton");
 
         // Ignore invalid commands
         let command = requisition.commandAssignment.value;
         if (command == null) {
           throw new Error("No command '" + typed + "'");
         }
 
+        // Do not build a button for a non-remote safe command in a non-local target.
+        if (!target.isLocalTab && !command.isRemoteSafe) {
+          requisition.clear();
+          return;
+        }
+
         if (command.buttonId != null) {
           button.id = command.buttonId;
           if (command.buttonClass != null) {
             button.className = command.buttonClass;
           }
         }
         else {
           button.setAttribute("text-as-image", "true");
@@ -188,48 +187,46 @@ let CommandUtils = {
   },
 
   /**
    * A helper function to create the environment object that is passed to
    * GCLI commands.
    * @param targetContainer An object containing a 'target' property which
    * reflects the current debug target
    */
-  createEnvironment: function(container, targetProperty="target") {
+  createEnvironment: function(container, targetProperty='target') {
     if (!container[targetProperty].toString ||
         !/TabTarget/.test(container[targetProperty].toString())) {
-      throw new Error("Missing target");
+      throw new Error('Missing target');
     }
 
     return {
       get target() {
         if (!container[targetProperty].toString ||
             !/TabTarget/.test(container[targetProperty].toString())) {
-          throw new Error("Removed target");
+          throw new Error('Removed target');
         }
 
         return container[targetProperty];
       },
 
       get chromeWindow() {
         return this.target.tab.ownerDocument.defaultView;
       },
 
       get chromeDocument() {
-        return this.target.tab.ownerDocument.defaultView.document;
+        return this.chromeWindow.document;
       },
 
       get window() {
-        // throw new Error("environment.window is not available in runAt:client commands");
-        return this.chromeWindow.gBrowser.contentWindowAsCPOW;
+        return this.chromeWindow.gBrowser.selectedBrowser.contentWindow;
       },
 
       get document() {
-        // throw new Error("environment.document is not available in runAt:client commands");
-        return this.chromeWindow.gBrowser.contentDocumentAsCPOW;
+        return this.window.document;
       }
     };
   },
 };
 
 this.CommandUtils = CommandUtils;
 
 /**
@@ -253,18 +250,16 @@ XPCOMUtils.defineLazyGetter(this, "OS", 
  * and buttons for various developer tools.
  * @param aChromeWindow The browser window to which this toolbar is attached
  * @param aToolbarElement See browser.xul:<toolbar id="developer-toolbar">
  */
 this.DeveloperToolbar = function DeveloperToolbar(aChromeWindow, aToolbarElement)
 {
   this._chromeWindow = aChromeWindow;
 
-  this.target = null; // Will be setup when show() is called
-
   this._element = aToolbarElement;
   this._element.hidden = true;
   this._doc = this._element.ownerDocument;
 
   this._telemetry = new Telemetry();
   this._errorsCount = {};
   this._warningsCount = {};
   this._errorListeners = {};
@@ -292,32 +287,42 @@ const NOTIFICATIONS = {
 
 /**
  * Attach notification constants to the object prototype so tests etc can
  * use them without needing to import anything
  */
 DeveloperToolbar.prototype.NOTIFICATIONS = NOTIFICATIONS;
 
 /**
+ * target is dynamic because the selectedTab changes
+ */
+Object.defineProperty(DeveloperToolbar.prototype, "target", {
+  get: function() {
+    return TargetFactory.forTab(this._chromeWindow.gBrowser.selectedTab);
+  },
+  enumerable: true
+});
+
+/**
  * Is the toolbar open?
  */
-Object.defineProperty(DeveloperToolbar.prototype, "visible", {
-  get: function() {
+Object.defineProperty(DeveloperToolbar.prototype, 'visible', {
+  get: function DT_visible() {
     return !this._element.hidden;
   },
   enumerable: true
 });
 
 let _gSequenceId = 0;
 
 /**
  * Getter for a unique ID.
  */
-Object.defineProperty(DeveloperToolbar.prototype, "sequenceId", {
-  get: function() {
+Object.defineProperty(DeveloperToolbar.prototype, 'sequenceId', {
+  get: function DT_visible() {
     return _gSequenceId++;
   },
   enumerable: true
 });
 
 /**
  * Called from browser.xul in response to menu-click or keyboard shortcut to
  * toggle the toolbar
@@ -398,94 +403,67 @@ DeveloperToolbar.prototype.show = functi
       TooltipPanel.create(this),
       OutputPanel.create(this)
     ];
     return promise.all(panelPromises).then(panels => {
       [ this.tooltipPanel, this.outputPanel ] = panels;
 
       this._doc.getElementById("Tools:DevToolbar").setAttribute("checked", "true");
 
-      this.target = TargetFactory.forTab(this._chromeWindow.gBrowser.selectedTab);
-      const options = {
-        environment: CommandUtils.createEnvironment(this, "target"),
-        document: this.outputPanel.document,
-      };
-      return CommandUtils.createRequisition(this.target, options).then(requisition => {
-        this.requisition = requisition;
+      return gcli.load().then(() => {
+        this.display = gcli.createDisplay({
+          contentDocument: this._chromeWindow.gBrowser.contentDocumentAsCPOW,
+          chromeDocument: this._doc,
+          chromeWindow: this._chromeWindow,
+          hintElement: this.tooltipPanel.hintElement,
+          inputElement: this._input,
+          completeElement: this._doc.querySelector(".gclitoolbar-complete-node"),
+          backgroundElement: this._doc.querySelector(".gclitoolbar-stack-node"),
+          outputDocument: this.outputPanel.document,
+          environment: CommandUtils.createEnvironment(this, "target"),
+          tooltipClass: "gcliterm-tooltip",
+          eval: null,
+          scratchpad: null
+        });
 
-        return this.requisition.update(this._input.value).then(() => {
-          const Inputter = require('gcli/mozui/inputter').Inputter;
-          const Completer = require('gcli/mozui/completer').Completer;
-          const Tooltip = require('gcli/mozui/tooltip').Tooltip;
-          const FocusManager = require('gcli/ui/focus').FocusManager;
+        this.display.focusManager.addMonitoredElement(this.outputPanel._frame);
+        this.display.focusManager.addMonitoredElement(this._element);
 
-          this.onOutput = this.requisition.commandOutputManager.onOutput;
+        this.display.onVisibilityChange.add(this.outputPanel._visibilityChanged,
+                                            this.outputPanel);
+        this.display.onVisibilityChange.add(this.tooltipPanel._visibilityChanged,
+                                            this.tooltipPanel);
+        this.display.onOutput.add(this.outputPanel._outputChanged, this.outputPanel);
 
-          this.focusManager = new FocusManager(this._doc, requisition.system.settings);
+        let tabbrowser = this._chromeWindow.gBrowser;
+        tabbrowser.tabContainer.addEventListener("TabSelect", this, false);
+        tabbrowser.tabContainer.addEventListener("TabClose", this, false);
+        tabbrowser.addEventListener("load", this, true);
+        tabbrowser.addEventListener("beforeunload", this, true);
 
-          this.inputter = new Inputter({
-            requisition: this.requisition,
-            focusManager: this.focusManager,
-            element: this._input,
-          });
+        this._initErrorsCount(tabbrowser.selectedTab);
+        this._devtoolsUnloaded = this._devtoolsUnloaded.bind(this);
+        this._devtoolsLoaded = this._devtoolsLoaded.bind(this);
+        Services.obs.addObserver(this._devtoolsUnloaded, "devtools-unloaded", false);
+        Services.obs.addObserver(this._devtoolsLoaded, "devtools-loaded", false);
 
-          this.completer = new Completer({
-            requisition: this.requisition,
-            inputter: this.inputter,
-            backgroundElement: this._doc.querySelector(".gclitoolbar-stack-node"),
-            element: this._doc.querySelector(".gclitoolbar-complete-node"),
-          });
+        this._element.hidden = false;
 
-          this.tooltip = new Tooltip({
-            requisition: this.requisition,
-            focusManager: this.focusManager,
-            inputter: this.inputter,
-            element: this.tooltipPanel.hintElement,
-          });
+        if (focus) {
+          this._input.focus();
+        }
 
-          this.inputter.tooltip = this.tooltip;
+        this._notify(NOTIFICATIONS.SHOW);
 
-          this.focusManager.addMonitoredElement(this.outputPanel._frame);
-          this.focusManager.addMonitoredElement(this._element);
+        if (!DeveloperToolbar.introShownThisSession) {
+          this.display.maybeShowIntro();
+          DeveloperToolbar.introShownThisSession = true;
+        }
 
-          this.focusManager.onVisibilityChange.add(this.outputPanel._visibilityChanged,
-                                                   this.outputPanel);
-          this.focusManager.onVisibilityChange.add(this.tooltipPanel._visibilityChanged,
-                                                   this.tooltipPanel);
-          this.onOutput.add(this.outputPanel._outputChanged, this.outputPanel);
-
-          let tabbrowser = this._chromeWindow.gBrowser;
-          tabbrowser.tabContainer.addEventListener("TabSelect", this, false);
-          tabbrowser.tabContainer.addEventListener("TabClose", this, false);
-          tabbrowser.addEventListener("load", this, true);
-          tabbrowser.addEventListener("beforeunload", this, true);
-
-          this._initErrorsCount(tabbrowser.selectedTab);
-          this._devtoolsUnloaded = this._devtoolsUnloaded.bind(this);
-          this._devtoolsLoaded = this._devtoolsLoaded.bind(this);
-          Services.obs.addObserver(this._devtoolsUnloaded, "devtools-unloaded", false);
-          Services.obs.addObserver(this._devtoolsLoaded, "devtools-loaded", false);
-
-          this._element.hidden = false;
-
-          if (focus) {
-            this._input.focus();
-          }
-
-          this._notify(NOTIFICATIONS.SHOW);
-
-          if (!DeveloperToolbar.introShownThisSession) {
-            let intro = require("gcli/ui/intro");
-            intro.maybeShowIntro(this.requisition.commandOutputManager,
-                                 this.requisition.conversionContext);
-            DeveloperToolbar.introShownThisSession = true;
-          }
-
-          this._showPromise = null;
-        });
+        this._showPromise = null;
       });
     });
   });
 
   return this._showPromise;
 };
 
 /**
@@ -602,36 +580,36 @@ DeveloperToolbar.prototype.destroy = fun
   tabbrowser.tabContainer.removeEventListener("TabClose", this, false);
   tabbrowser.removeEventListener("load", this, true);
   tabbrowser.removeEventListener("beforeunload", this, true);
 
   Services.obs.removeObserver(this._devtoolsUnloaded, "devtools-unloaded");
   Services.obs.removeObserver(this._devtoolsLoaded, "devtools-loaded");
   Array.prototype.forEach.call(tabbrowser.tabs, this._stopErrorsCount, this);
 
-  this.focusManager.removeMonitoredElement(this.outputPanel._frame);
-  this.focusManager.removeMonitoredElement(this._element);
+  this.display.focusManager.removeMonitoredElement(this.outputPanel._frame);
+  this.display.focusManager.removeMonitoredElement(this._element);
 
-  this.focusManager.onVisibilityChange.remove(this.outputPanel._visibilityChanged,
-                                              this.outputPanel);
-  this.focusManager.onVisibilityChange.remove(this.tooltipPanel._visibilityChanged,
-                                              this.tooltipPanel);
-  this.onOutput.remove(this.outputPanel._outputChanged, this.outputPanel);
-
-  this.tooltip.destroy();
-  this.completer.destroy();
-  this.inputter.destroy();
-  this.focusManager.destroy();
-
+  this.display.onVisibilityChange.remove(this.outputPanel._visibilityChanged, this.outputPanel);
+  this.display.onVisibilityChange.remove(this.tooltipPanel._visibilityChanged, this.tooltipPanel);
+  this.display.onOutput.remove(this.outputPanel._outputChanged, this.outputPanel);
+  this.display.destroy();
   this.outputPanel.destroy();
   this.tooltipPanel.destroy();
   delete this._input;
 
-  CommandUtils.destroyRequisition(this.requisition, this.target);
-  this.target = undefined;
+  // We could "delete this.display" etc if we have hard-to-track-down memory
+  // leaks as a belt-and-braces approach, however this prevents our DOM node
+  // hunter from looking in all the nooks and crannies, so it's better if we
+  // can be leak-free without
+  /*
+  delete this.display;
+  delete this.outputPanel;
+  delete this.tooltipPanel;
+  */
 };
 
 /**
  * Utility for sending notifications
  * @param topic a NOTIFICATION constant
  */
 DeveloperToolbar.prototype._notify = function(topic) {
   let data = { toolbar: this };
@@ -640,19 +618,18 @@ DeveloperToolbar.prototype._notify = fun
 };
 
 /**
  * Update various parts of the UI when the current tab changes
  */
 DeveloperToolbar.prototype.handleEvent = function(ev) {
   if (ev.type == "TabSelect" || ev.type == "load") {
     if (this.visible) {
-      this.target = TargetFactory.forTab(this._chromeWindow.gBrowser.selectedTab);
-      gcliInit.getSystem(this.target).then(system => {
-        this.requisition.system = system;
+      this.display.reattach({
+        contentDocument: this._chromeWindow.gBrowser.contentDocumentAsCPOW
       });
 
       if (ev.type == "TabSelect") {
         this._initErrorsCount(ev.target);
       }
     }
   }
   else if (ev.type == "TabClose") {
@@ -769,17 +746,17 @@ DeveloperToolbar.prototype.resetErrorsCo
     this._updateErrorsCount(tabId);
   }
 };
 
 /**
  * Creating a OutputPanel is asynchronous
  */
 function OutputPanel() {
-  throw new Error("Use OutputPanel.create()");
+  throw new Error('Use OutputPanel.create()');
 }
 
 /**
  * Panel to handle command line output.
  *
  * There is a tooltip bug on Windows and OSX that prevents tooltips from being
  * positioned properly (bug 786975). There is a Gnome panel bug on Linux that
  * causes ugly focus issues (https://bugzilla.gnome.org/show_bug.cgi?id=621848).
@@ -856,18 +833,18 @@ OutputPanel.prototype._init = function(d
   let deferred = promise.defer();
   let onload = () => {
     this._frame.removeEventListener("load", onload, true);
 
     this.document = this._frame.contentDocument;
     this._copyTheme();
 
     this._div = this.document.getElementById("gcli-output-root");
-    this._div.classList.add("gcli-row-out");
-    this._div.setAttribute("aria-live", "assertive");
+    this._div.classList.add('gcli-row-out');
+    this._div.setAttribute('aria-live', 'assertive');
 
     let styles = this._toolbar.ownerDocument.defaultView
                     .getComputedStyle(this._toolbar);
     this._div.setAttribute("dir", styles.direction);
 
     deferred.resolve(this);
   };
   this._frame.addEventListener("load", onload, true);
@@ -1010,29 +987,29 @@ OutputPanel.prototype._update = function
   }
 
   // Empty this._div
   while (this._div.hasChildNodes()) {
     this._div.removeChild(this._div.firstChild);
   }
 
   if (this.displayedOutput.data != null) {
-    let context = this._devtoolbar.requisition.conversionContext;
-    this.displayedOutput.convert("dom", context).then(node => {
+    let context = this._devtoolbar.display.requisition.conversionContext;
+    this.displayedOutput.convert('dom', context).then(node => {
       if (node == null) {
         return;
       }
 
       while (this._div.hasChildNodes()) {
         this._div.removeChild(this._div.firstChild);
       }
 
-      var links = node.querySelectorAll("*[href]");
+      var links = node.querySelectorAll('*[href]');
       for (var i = 0; i < links.length; i++) {
-        links[i].setAttribute("target", "_blank");
+        links[i].setAttribute('target', '_blank');
       }
 
       this._div.appendChild(node);
       this.show();
     });
   }
 };
 
@@ -1089,17 +1066,17 @@ OutputPanel.prototype._visibilityChanged
     this._panel.hidePopup();
   }
 };
 
 /**
  * Creating a TooltipPanel is asynchronous
  */
 function TooltipPanel() {
-  throw new Error("Use TooltipPanel.create()");
+  throw new Error('Use TooltipPanel.create()');
 }
 
 /**
  * Panel to handle tooltips.
  *
  * There is a tooltip bug on Windows and OSX that prevents tooltips from being
  * positioned properly (bug 786975). There is a Gnome panel bug on Linux that
  * causes ugly focus issues (https://bugzilla.gnome.org/show_bug.cgi?id=621848).
diff --git a/browser/devtools/shared/test/browser_telemetry_button_eyedropper.js b/browser/devtools/shared/test/browser_telemetry_button_eyedropper.js
--- a/browser/devtools/shared/test/browser_telemetry_button_eyedropper.js
+++ b/browser/devtools/shared/test/browser_telemetry_button_eyedropper.js
@@ -10,34 +10,30 @@ add_task(function*() {
   yield promiseTab(TEST_URI);
   let Telemetry = loadTelemetryAndRecordLogs();
 
   let target = TargetFactory.forTab(gBrowser.selectedTab);
   let toolbox = yield gDevTools.showToolbox(target, "inspector");
   info("inspector opened");
 
   info("testing the eyedropper button");
-  yield testButton(toolbox, Telemetry);
+  testButton(toolbox, Telemetry);
 
   stopRecordingTelemetryLogs(Telemetry);
   yield gDevTools.closeToolbox(target);
   gBrowser.removeCurrentTab();
 });
 
-function* testButton(toolbox, Telemetry) {
+function testButton(toolbox, Telemetry) {
   let button = toolbox.doc.querySelector("#command-button-eyedropper");
   ok(button, "Captain, we have the eyedropper button");
 
-  let clicked = toolbox._requisition.commandOutputManager.onOutput.once();
-
   info("clicking the button to open the eyedropper");
   button.click();
 
-  yield clicked;
-
   checkResults("_EYEDROPPER_", Telemetry);
 }
 
 function checkResults(histIdFocus, Telemetry) {
   let result = Telemetry.prototype.telemetryInfo;
 
   for (let [histId, value] of Iterator(result)) {
     if (histId.startsWith("DEVTOOLS_INSPECTOR_") ||
diff --git a/browser/devtools/shared/test/browser_toolbar_tooltip.js b/browser/devtools/shared/test/browser_toolbar_tooltip.js
--- a/browser/devtools/shared/test/browser_toolbar_tooltip.js
+++ b/browser/devtools/shared/test/browser_toolbar_tooltip.js
@@ -28,76 +28,59 @@ add_task(function* showToolbar() {
   let showPromise = observeOnce(DeveloperToolbar.NOTIFICATIONS.SHOW);
   document.getElementById("Tools:DevToolbar").doCommand();
   yield showPromise;
 });
 
 add_task(function* testDimensions() {
   let tooltipPanel = DeveloperToolbar.tooltipPanel;
 
-  DeveloperToolbar.focusManager.helpRequest();
-  yield DeveloperToolbar.inputter.setInput('help help');
+  DeveloperToolbar.display.focusManager.helpRequest();
+  yield DeveloperToolbar.display.inputter.setInput('help help');
 
-  DeveloperToolbar.inputter.setCursor({ start: 'help help'.length });
+  DeveloperToolbar.display.inputter.setCursor({ start: 'help help'.length });
   is(tooltipPanel._dimensions.start, 'help '.length,
           'search param start, when cursor at end');
   ok(getLeftMargin() > 30, 'tooltip offset, when cursor at end')
 
-  DeveloperToolbar.inputter.setCursor({ start: 'help'.length });
+  DeveloperToolbar.display.inputter.setCursor({ start: 'help'.length });
   is(tooltipPanel._dimensions.start, 0,
           'search param start, when cursor at end of command');
   ok(getLeftMargin() > 9, 'tooltip offset, when cursor at end of command')
 
-  DeveloperToolbar.inputter.setCursor({ start: 'help help'.length - 1 });
+  DeveloperToolbar.display.inputter.setCursor({ start: 'help help'.length - 1 });
   is(tooltipPanel._dimensions.start, 'help '.length,
           'search param start, when cursor at penultimate position');
   ok(getLeftMargin() > 30, 'tooltip offset, when cursor at penultimate position')
 
-  DeveloperToolbar.inputter.setCursor({ start: 0 });
+  DeveloperToolbar.display.inputter.setCursor({ start: 0 });
   is(tooltipPanel._dimensions.start, 0,
           'search param start, when cursor at start');
   ok(getLeftMargin() > 9, 'tooltip offset, when cursor at start')
 });
 
 add_task(function* testThemes() {
   let tooltipPanel = DeveloperToolbar.tooltipPanel;
   ok(tooltipPanel.document, "Tooltip panel is initialized");
 
   Services.prefs.setCharPref(PREF_DEVTOOLS_THEME, "dark");
 
-  yield DeveloperToolbar.inputter.setInput("");
-  yield DeveloperToolbar.inputter.setInput("help help");
+  yield DeveloperToolbar.display.inputter.setInput("");
+  yield DeveloperToolbar.display.inputter.setInput("help help");
   is(tooltipPanel.document.documentElement.getAttribute("devtoolstheme"),
      "dark", "Tooltip panel has correct theme");
 
   Services.prefs.setCharPref(PREF_DEVTOOLS_THEME, "light");
 
-  yield DeveloperToolbar.inputter.setInput("");
-  yield DeveloperToolbar.inputter.setInput("help help");
+  yield DeveloperToolbar.display.inputter.setInput("");
+  yield DeveloperToolbar.display.inputter.setInput("help help");
   is(tooltipPanel.document.documentElement.getAttribute("devtoolstheme"),
      "light", "Tooltip panel has correct theme");
 });
 
-
-add_task(function* hideToolbar() {
-  info("Ending browser_toolbar_tooltip.js");
-  yield DeveloperToolbar.inputter.setInput('');
-
-  ok(DeveloperToolbar.visible, "DeveloperToolbar is visible in hideToolbar");
-
-  info("Hide toolbar");
-  let hidePromise = observeOnce(DeveloperToolbar.NOTIFICATIONS.HIDE);
-  document.getElementById("Tools:DevToolbar").doCommand();
-  yield hidePromise;
-
-  ok(!DeveloperToolbar.visible, "DeveloperToolbar is not visible in hideToolbar");
-
-  info("Done test");
-});
-
 function getLeftMargin() {
   let style = DeveloperToolbar.tooltipPanel._panel.style.marginLeft;
   return parseInt(style.slice(0, -2), 10);
 }
 
 function observeOnce(topic, ownsWeak=false) {
   return new Promise(function(resolve, reject) {
     let resolver = function(subject) {
diff --git a/browser/devtools/styleeditor/styleeditor-commands.js b/browser/devtools/styleeditor/styleeditor-commands.js
--- a/browser/devtools/styleeditor/styleeditor-commands.js
+++ b/browser/devtools/styleeditor/styleeditor-commands.js
@@ -1,68 +1,42 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
-const l10n = require("gcli/l10n");
+const gcli = require("gcli/index");
 
-/**
- * The `edit` command opens the toolbox to the style editor, with a given
- * stylesheet open.
- *
- * This command is tricky. The 'edit' command uses the toolbox, so it's
- * clearly runAt:client, but it uses the 'resource' type which accesses the
- * DOM, so it must also be runAt:server.
- *
- * Our solution is to have the command technically be runAt:server, but to not
- * actually do anything other than basically `return args;`, and have the
- * converter (all converters are runAt:client) do the actual work of opening
- * a toolbox.
- *
- * For alternative solutions that we considered, see the comment on commit
- * 2645af7.
- */
 exports.items = [{
-  item: "command",
-  runAt: "server",
   name: "edit",
-  description: l10n.lookup("editDesc"),
-  manual: l10n.lookup("editManual2"),
+  description: gcli.lookup("editDesc"),
+  manual: gcli.lookup("editManual2"),
   params: [
      {
        name: 'resource',
        type: {
          name: 'resource',
          include: 'text/css'
        },
-       description: l10n.lookup("editResourceDesc")
+       description: gcli.lookup("editResourceDesc")
      },
      {
        name: "line",
        defaultValue: 1,
        type: {
          name: "number",
          min: 1,
          step: 10
        },
-       description: l10n.lookup("editLineToJumpToDesc")
+       description: gcli.lookup("editLineToJumpToDesc")
      }
    ],
-   returnType: "editArgs",
-   exec: args => {
-     return { href: args.resource.name, line: args.line };
-   }
-}, {
-  item: "converter",
-  from: "editArgs",
-  to: "dom",
    exec: function(args, context) {
      let target = context.environment.target;
      let gDevTools = require("resource:///modules/devtools/gDevTools.jsm").gDevTools;
      return gDevTools.showToolbox(target, "styleeditor").then(function(toolbox) {
        let styleEditor = toolbox.getCurrentPanel();
-       styleEditor.selectStyleSheet(args.href, args.line);
+       styleEditor.selectStyleSheet(args.resource.element, args.line);
        return null;
      });
    }
 }];
diff --git a/browser/devtools/styleeditor/test/browser_styleeditor_cmd_edit.js b/browser/devtools/styleeditor/test/browser_styleeditor_cmd_edit.js
--- a/browser/devtools/styleeditor/test/browser_styleeditor_cmd_edit.js
+++ b/browser/devtools/styleeditor/test/browser_styleeditor_cmd_edit.js
@@ -171,16 +171,24 @@ add_task(function* () {
   let toolbox = gDevTools.getToolbox(options.target);
   ok(toolbox == null, 'toolbox is closed');
 
   yield helpers.audit(options, [
     {
       setup: "edit css#style2",
       check: {
         input: "edit css#style2",
+        args: {
+          resource: {
+            value: function(resource) {
+              let style2 = options.window.document.getElementById("style2");
+              return resource.element.ownerNode == style2;
+            }
+          }
+        }
       },
       exec: { output: "" }
     },
   ]);
 
   toolbox = gDevTools.getToolbox(options.target);
   ok(toolbox != null, "toolbox is open");
 
diff --git a/browser/devtools/tilt/tilt-commands.js b/browser/devtools/tilt/tilt-commands.js
--- a/browser/devtools/tilt/tilt-commands.js
+++ b/browser/devtools/tilt/tilt-commands.js
@@ -1,55 +1,55 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
-const l10n = require("gcli/l10n");
+const gcli = require("gcli/index");
 
 // Fetch TiltManager using the current loader, but don't save a
 // reference to it, because it might change with a tool reload.
 // We can clean this up once the command line is loadered.
 Object.defineProperty(this, "TiltManager", {
   get: function() {
     return require("devtools/tilt/tilt").TiltManager;
   },
   enumerable: true
 });
 
 exports.items = [
 {
   name: 'tilt',
-  description: l10n.lookup("tiltDesc"),
-  manual: l10n.lookup("tiltManual"),
+  description: gcli.lookup("tiltDesc"),
+  manual: gcli.lookup("tiltManual"),
   hidden: true
 },
 {
   name: 'tilt open',
-  description: l10n.lookup("tiltOpenDesc"),
-  manual: l10n.lookup("tiltOpenManual"),
+  description: gcli.lookup("tiltOpenDesc"),
+  manual: gcli.lookup("tiltOpenManual"),
   hidden: true,
   exec: function(args, context) {
     if (isMultiProcess(context)) {
-      return l10n.lookupFormat("notAvailableInE10S", [this.name]);
+      return gcli.lookupFormat("notAvailableInE10S", [this.name]);
     }
 
     let chromeWindow = context.environment.chromeDocument.defaultView;
     let Tilt = TiltManager.getTiltForBrowser(chromeWindow);
     if (!Tilt.currentInstance) {
       Tilt.toggle();
     }
   }
 },
 {
   name: "tilt toggle",
   buttonId: "command-button-tilt",
   buttonClass: "command-button command-button-invertable",
-  tooltipText: l10n.lookup("tiltToggleTooltip"),
+  tooltipText: gcli.lookup("tiltToggleTooltip"),
   hidden: true,
   state: {
     isChecked: function(aTarget) {
       let browserWindow = aTarget.tab.ownerDocument.defaultView;
       return !!TiltManager.getTiltForBrowser(browserWindow).currentInstance;
     },
     onChange: function(aTarget, aChangeHandler) {
       let browserWindow = aTarget.tab.ownerDocument.defaultView;
@@ -61,149 +61,149 @@ exports.items = [
         let browserWindow = aTarget.tab.ownerDocument.defaultView;
         let tilt = TiltManager.getTiltForBrowser(browserWindow);
         tilt.off("change", aChangeHandler);
       }
     },
   },
   exec: function(args, context) {
     if (isMultiProcess(context)) {
-      return l10n.lookupFormat("notAvailableInE10S", [this.name]);
+      return gcli.lookupFormat("notAvailableInE10S", [this.name]);
     }
 
     let chromeWindow = context.environment.chromeDocument.defaultView;
     let Tilt = TiltManager.getTiltForBrowser(chromeWindow);
     Tilt.toggle();
   }
 },
 {
   name: 'tilt translate',
-  description: l10n.lookup("tiltTranslateDesc"),
-  manual: l10n.lookup("tiltTranslateManual"),
+  description: gcli.lookup("tiltTranslateDesc"),
+  manual: gcli.lookup("tiltTranslateManual"),
   hidden: true,
   params: [
     {
       name: "x",
       type: "number",
       defaultValue: 0,
-      description: l10n.lookup("tiltTranslateXDesc"),
-      manual: l10n.lookup("tiltTranslateXManual")
+      description: gcli.lookup("tiltTranslateXDesc"),
+      manual: gcli.lookup("tiltTranslateXManual")
     },
     {
       name: "y",
       type: "number",
       defaultValue: 0,
-      description: l10n.lookup("tiltTranslateYDesc"),
-      manual: l10n.lookup("tiltTranslateYManual")
+      description: gcli.lookup("tiltTranslateYDesc"),
+      manual: gcli.lookup("tiltTranslateYManual")
     }
   ],
   exec: function(args, context) {
     if (isMultiProcess(context)) {
-      return l10n.lookupFormat("notAvailableInE10S", [this.name]);
+      return gcli.lookupFormat("notAvailableInE10S", [this.name]);
     }
 
     let chromeWindow = context.environment.chromeDocument.defaultView;
     let Tilt = TiltManager.getTiltForBrowser(chromeWindow);
     if (Tilt.currentInstance) {
       Tilt.currentInstance.controller.arcball.translate([args.x, args.y]);
     }
   }
 },
 {
   name: 'tilt rotate',
-  description: l10n.lookup("tiltRotateDesc"),
-  manual: l10n.lookup("tiltRotateManual"),
+  description: gcli.lookup("tiltRotateDesc"),
+  manual: gcli.lookup("tiltRotateManual"),
   hidden: true,
   params: [
     {
       name: "x",
       type: { name: 'number', min: -360, max: 360, step: 10 },
       defaultValue: 0,
-      description: l10n.lookup("tiltRotateXDesc"),
-      manual: l10n.lookup("tiltRotateXManual")
+      description: gcli.lookup("tiltRotateXDesc"),
+      manual: gcli.lookup("tiltRotateXManual")
     },
     {
       name: "y",
       type: { name: 'number', min: -360, max: 360, step: 10 },
       defaultValue: 0,
-      description: l10n.lookup("tiltRotateYDesc"),
-      manual: l10n.lookup("tiltRotateYManual")
+      description: gcli.lookup("tiltRotateYDesc"),
+      manual: gcli.lookup("tiltRotateYManual")
     },
     {
       name: "z",
       type: { name: 'number', min: -360, max: 360, step: 10 },
       defaultValue: 0,
-      description: l10n.lookup("tiltRotateZDesc"),
-      manual: l10n.lookup("tiltRotateZManual")
+      description: gcli.lookup("tiltRotateZDesc"),
+      manual: gcli.lookup("tiltRotateZManual")
     }
   ],
   exec: function(args, context) {
     if (isMultiProcess(context)) {
-      return l10n.lookupFormat("notAvailableInE10S", [this.name]);
+      return gcli.lookupFormat("notAvailableInE10S", [this.name]);
     }
 
     let chromeWindow = context.environment.chromeDocument.defaultView;
     let Tilt = TiltManager.getTiltForBrowser(chromeWindow);
     if (Tilt.currentInstance) {
       Tilt.currentInstance.controller.arcball.rotate([args.x, args.y, args.z]);
     }
   }
 },
 {
   name: 'tilt zoom',
-  description: l10n.lookup("tiltZoomDesc"),
-  manual: l10n.lookup("tiltZoomManual"),
+  description: gcli.lookup("tiltZoomDesc"),
+  manual: gcli.lookup("tiltZoomManual"),
   hidden: true,
   params: [
     {
       name: "zoom",
       type: { name: 'number' },
-      description: l10n.lookup("tiltZoomAmountDesc"),
-      manual: l10n.lookup("tiltZoomAmountManual")
+      description: gcli.lookup("tiltZoomAmountDesc"),
+      manual: gcli.lookup("tiltZoomAmountManual")
     }
   ],
   exec: function(args, context) {
     if (isMultiProcess(context)) {
-      return l10n.lookupFormat("notAvailableInE10S", [this.name]);
+      return gcli.lookupFormat("notAvailableInE10S", [this.name]);
     }
 
     let chromeWindow = context.environment.chromeDocument.defaultView;
     let Tilt = TiltManager.getTiltForBrowser(chromeWindow);
 
     if (Tilt.currentInstance) {
       Tilt.currentInstance.controller.arcball.zoom(-args.zoom);
     }
   }
 },
 {
   name: 'tilt reset',
-  description: l10n.lookup("tiltResetDesc"),
-  manual: l10n.lookup("tiltResetManual"),
+  description: gcli.lookup("tiltResetDesc"),
+  manual: gcli.lookup("tiltResetManual"),
   hidden: true,
   exec: function(args, context) {
     if (isMultiProcess(context)) {
-      return l10n.lookupFormat("notAvailableInE10S", [this.name]);
+      return gcli.lookupFormat("notAvailableInE10S", [this.name]);
     }
 
     let chromeWindow = context.environment.chromeDocument.defaultView;
     let Tilt = TiltManager.getTiltForBrowser(chromeWindow);
 
     if (Tilt.currentInstance) {
       Tilt.currentInstance.controller.arcball.reset();
     }
   }
 },
 {
   name: 'tilt close',
-  description: l10n.lookup("tiltCloseDesc"),
-  manual: l10n.lookup("tiltCloseManual"),
+  description: gcli.lookup("tiltCloseDesc"),
+  manual: gcli.lookup("tiltCloseManual"),
   hidden: true,
   exec: function(args, context) {
     if (isMultiProcess(context)) {
-      return l10n.lookupFormat("notAvailableInE10S", [this.name]);
+      return gcli.lookupFormat("notAvailableInE10S", [this.name]);
     }
 
     let chromeWindow = context.environment.chromeDocument.defaultView;
     let Tilt = TiltManager.getTiltForBrowser(chromeWindow);
 
     Tilt.destroy(Tilt.currentWindowId);
   }
 }
diff --git a/browser/devtools/webconsole/console-commands.js b/browser/devtools/webconsole/console-commands.js
--- a/browser/devtools/webconsole/console-commands.js
+++ b/browser/devtools/webconsole/console-commands.js
@@ -1,26 +1,24 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
-const l10n = require("gcli/l10n");
-loader.lazyGetter(this, "gDevTools", () => require("resource:///modules/devtools/gDevTools.jsm").gDevTools);
+const gcli = require("gcli/index");
+const { gDevTools } = require("resource:///modules/devtools/gDevTools.jsm");
 
 exports.items = [
   {
-    item: "command",
-    runAt: "client",
     name: 'splitconsole',
     hidden: true,
     buttonId: "command-button-splitconsole",
     buttonClass: "command-button command-button-invertable",
-    tooltipText: l10n.lookup("splitconsoleTooltip"),
+    tooltipText: gcli.lookup("splitconsoleTooltip"),
     isRemoteSafe: true,
     state: {
       isChecked: function(target) {
         let toolbox = gDevTools.getToolbox(target);
         return !!(toolbox && toolbox.splitConsole);
       },
       onChange: function(target, changeHandler) {
         // Register handlers for when a change event should be fired
@@ -48,52 +46,43 @@ exports.items = [
         });
       } else {
         toolbox.toggleSplitConsole();
       }
     }
   },
   {
     name: "console",
-    description: l10n.lookup("consoleDesc"),
-    manual: l10n.lookup("consoleManual")
+    description: gcli.lookup("consoleDesc"),
+    manual: gcli.lookup("consoleManual")
   },
   {
-    item: "command",
-    runAt: "client",
     name: "console clear",
-    description: l10n.lookup("consoleclearDesc"),
+    description: gcli.lookup("consoleclearDesc"),
     exec: function(args, context) {
       let toolbox = gDevTools.getToolbox(context.environment.target);
       if (toolbox == null) {
         return;
       }
 
       let panel = toolbox.getPanel("webconsole");
       if (panel == null) {
         return;
       }
 
       panel.hud.jsterm.clearOutput();
     }
   },
   {
-    item: "command",
-    runAt: "client",
     name: "console close",
-    description: l10n.lookup("consolecloseDesc"),
+    description: gcli.lookup("consolecloseDesc"),
     exec: function(args, context) {
-      return gDevTools.closeToolbox(context.environment.target)
-                      .then(() => {}); // Don't return a value to GCLI
+      return gDevTools.closeToolbox(context.environment.target);
     }
   },
   {
-    item: "command",
-    runAt: "client",
     name: "console open",
-    description: l10n.lookup("consoleopenDesc"),
+    description: gcli.lookup("consoleopenDesc"),
     exec: function(args, context) {
-      const target = context.environment.target;
-      return gDevTools.showToolbox(target, "webconsole")
-                      .then(() => {}); // Don't return a value to GCLI
+      return gDevTools.showToolbox(context.environment.target, "webconsole");
     }
   }
 ];
diff --git a/browser/devtools/webconsole/console-output.js b/browser/devtools/webconsole/console-output.js
--- a/browser/devtools/webconsole/console-output.js
+++ b/browser/devtools/webconsole/console-output.js
@@ -2,18 +2,16 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const {Cc, Ci, Cu} = require("chrome");
 
-const { Services } = require("resource://gre/modules/Services.jsm");
-
 loader.lazyImporter(this, "VariablesView", "resource:///modules/devtools/VariablesView.jsm");
 loader.lazyImporter(this, "escapeHTML", "resource:///modules/devtools/VariablesView.jsm");
 loader.lazyImporter(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm");
 loader.lazyImporter(this, "Task", "resource://gre/modules/Task.jsm");
 loader.lazyImporter(this, "PluralForm", "resource://gre/modules/PluralForm.jsm");
 loader.lazyImporter(this, "ObjectClient", "resource://gre/modules/devtools/dbg-client.jsm");
 
 loader.lazyRequireGetter(this, "promise");
diff --git a/browser/locales/en-US/chrome/browser/devtools/gcli.properties b/browser/locales/en-US/chrome/browser/devtools/gcli.properties
--- a/browser/locales/en-US/chrome/browser/devtools/gcli.properties
+++ b/browser/locales/en-US/chrome/browser/devtools/gcli.properties
@@ -46,17 +46,17 @@ cliEvalJavascript=Enter JavaScript direc
 cliUnusedArg=Too many arguments
 
 # LOCALIZATION NOTE: The title of the dialog which displays the options that
 # are available to the current command.
 cliOptions=Available Options
 
 # LOCALIZATION NOTE: The error message when the user types a command that
 # isn't registered
-cliUnknownCommand2=Invalid Command: '%1$S'.
+cliUnknownCommand=Invalid Command
 
 # LOCALIZATION NOTE: A parameter should have a value, but doesn't
 cliIncompleteParam=Value required for '%1$S'.
 
 # LOCALIZATION NOTE: Error message given when a file argument points to a file
 # that does not exist, but should (e.g. for use with File->Open) %1$S is a
 # filename
 fileErrNotExists='%1$S' doesn't exist
diff --git a/browser/locales/en-US/chrome/browser/devtools/gclicommands.properties b/browser/locales/en-US/chrome/browser/devtools/gclicommands.properties
--- a/browser/locales/en-US/chrome/browser/devtools/gclicommands.properties
+++ b/browser/locales/en-US/chrome/browser/devtools/gclicommands.properties
@@ -77,20 +77,16 @@ screenshotChromeDesc2=Capture %1$S chrom
 # asks for help on what it does.
 # The argument (%1$S) is the browser name.
 screenshotChromeManual2=True if you want to take the screenshot of the %1$S window rather than the web page's content window.
 
 # LOCALIZATION NOTE (screenshotGroupOptions) A label for the optional options of
 # the screenshot command.
 screenshotGroupOptions=Options
 
-# LOCALIZATION NOTE (screenshotGroupOptions) A label for the advanced options of
-# the screenshot command.
-screenshotAdvancedOptions=Advanced Options
-
 # LOCALIZATION NOTE (screenshotDelayDesc) A very short string to describe
 # the 'delay' parameter to the 'screenshot' command, which is displayed in
 # a dialog when the user is using this command.
 screenshotDelayDesc=Delay (seconds)
 
 # LOCALIZATION NOTE (screenshotDelayManual) A fuller description of the
 # 'delay' parameter to the 'screenshot' command, displayed when the user
 # asks for help on what it does.
@@ -131,35 +127,16 @@ screenshotErrorCopying=Error occurred wh
 
 # LOCALIZATION NOTE (screenshotCopied) Text displayed to user when the
 # screenshot is successfully copied to the clipboard.
 screenshotCopied=Copied to clipboard.
 
 # LOCALIZATION NOTE (screenshotTooltip) Text displayed as tooltip for screenshot button in devtools ToolBox.
 screenshotTooltip=Take a fullpage screenshot
 
-# LOCALIZATION NOTE (screenshotImgurDesc) A very short string to describe
-# the 'imgur' parameter to the 'screenshot' command, which is displayed in
-# a dialog when the user is using this command.
-screenshotImgurDesc=Upload to imgur.com
-
-# LOCALIZATION NOTE (screenshotImgurManual) A fuller description of the
-# 'imgur' parameter to the 'screenshot' command, displayed when the user
-# asks for help on what it does.
-screenshotImgurManual=Use if you want to upload to imgur.com instead of saving to disk
-
-# LOCALIZATION NOTE (screenshotImgurError) Text displayed to user upon
-# encountering error while uploading the screenshot to imgur.com.
-screenshotImgurError=Could not reach imgur API
-
-# LOCALIZATION NOTE (screenshotImgurUploading) Text displayed to user when the
-# screenshot is successfully sent to Imgur but the program is waiting on a response.
-# The argument (%1$S) is a new image URL at Imgur.
-screenshotImgurUploaded=Uploaded to %1$S
-
 # LOCALIZATION NOTE (highlightDesc) A very short description of the
 # 'highlight' command. See highlightManual for a fuller description of what
 # it does. This string is designed to be shown in a menu alongside the
 # command name, which is why it should be as short as possible.
 highlightDesc=Highlight nodes
 
 # LOCALIZATION NOTE (highlightManual) A fuller description of the 'highlight'
 # command, displayed when the user asks for help on what it does.
diff --git a/toolkit/devtools/Loader.jsm b/toolkit/devtools/Loader.jsm
--- a/toolkit/devtools/Loader.jsm
+++ b/toolkit/devtools/Loader.jsm
@@ -74,17 +74,16 @@ BuiltinProvider.prototype = {
     this.loader = new loader.Loader({
       id: "fx-devtools",
       modules: loaderModules,
       paths: {
         // When you add a line to this mapping, don't forget to make a
         // corresponding addition to the SrcdirProvider mapping below as well.
         "": "resource://gre/modules/commonjs/",
         "main": "resource:///modules/devtools/main.js",
-        "definitions": "resource:///modules/devtools/definitions.js",
         "devtools": "resource:///modules/devtools",
         "devtools/toolkit": "resource://gre/modules/devtools",
         "devtools/server": "resource://gre/modules/devtools/server",
         "devtools/toolkit/webconsole": "resource://gre/modules/devtools/toolkit/webconsole",
         "devtools/app-actor-front": "resource://gre/modules/devtools/app-actor-front.js",
         "devtools/styleinspector/css-logic": "resource://gre/modules/devtools/styleinspector/css-logic",
         "devtools/css-color": "resource://gre/modules/devtools/css-color",
         "devtools/output-parser": "resource://gre/modules/devtools/output-parser",
@@ -131,17 +130,16 @@ SrcdirProvider.prototype = {
 
   load: function() {
     let srcdir = Services.prefs.getComplexValue("devtools.loader.srcdir",
                                                 Ci.nsISupportsString);
     srcdir = OS.Path.normalize(srcdir.data.trim());
     let devtoolsDir = OS.Path.join(srcdir, "browser", "devtools");
     let toolkitDir = OS.Path.join(srcdir, "toolkit", "devtools");
     let mainURI = this.fileURI(OS.Path.join(devtoolsDir, "main.js"));
-    let definitionsURI = this.fileURI(OS.Path.join(devtoolsDir, "definitions.js"));
     let devtoolsURI = this.fileURI(devtoolsDir);
     let toolkitURI = this.fileURI(toolkitDir);
     let serverURI = this.fileURI(OS.Path.join(toolkitDir, "server"));
     let webconsoleURI = this.fileURI(OS.Path.join(toolkitDir, "webconsole"));
     let appActorURI = this.fileURI(OS.Path.join(toolkitDir, "apps", "app-actor-front.js"));
     let cssLogicURI = this.fileURI(OS.Path.join(toolkitDir, "styleinspector", "css-logic"));
     let cssColorURI = this.fileURI(OS.Path.join(toolkitDir, "css-color"));
     let outputParserURI = this.fileURI(OS.Path.join(toolkitDir, "output-parser"));
@@ -158,17 +156,16 @@ SrcdirProvider.prototype = {
     let ternURI = OS.Path.join(toolkitDir, "tern");
     let sourceMapURI = this.fileURI(OS.Path.join(toolkitDir), "SourceMap.jsm");
     this.loader = new loader.Loader({
       id: "fx-devtools",
       modules: loaderModules,
       paths: {
         "": "resource://gre/modules/commonjs/",
         "main": mainURI,
-        "definitions": definitionsURI,
         "devtools": devtoolsURI,
         "devtools/toolkit": toolkitURI,
         "devtools/server": serverURI,
         "devtools/toolkit/webconsole": webconsoleURI,
         "devtools/app-actor-front": appActorURI,
         "devtools/styleinspector/css-logic": cssLogicURI,
         "devtools/css-color": cssColorURI,
         "devtools/output-parser": outputParserURI,
diff --git a/toolkit/devtools/gcli/Templater.jsm b/toolkit/devtools/gcli/Templater.jsm
--- a/toolkit/devtools/gcli/Templater.jsm
+++ b/toolkit/devtools/gcli/Templater.jsm
@@ -14,17 +14,21 @@
  * limitations under the License.
  */
 
 this.EXPORTED_SYMBOLS = [ "template" ];
 Components.utils.import("resource://gre/modules/XPCOMUtils.jsm");
 XPCOMUtils.defineLazyModuleGetter(this, "console",
                                   "resource://gre/modules/devtools/Console.jsm");
 
-'use strict';
+'do not use strict';
+
+// WARNING: do not 'use strict' without reading the notes in envEval();
+// Also don't remove the 'do not use strict' marker. The orion build uses these
+// markers to know where to insert AMD headers.
 
 /**
  * For full documentation, see:
  * https://github.com/mozilla/domtemplate/blob/master/README.md
  */
 
 /**
  * Begin a new templating process.
@@ -60,19 +64,19 @@ var template = function(node, data, opti
     else {
       state.stack = [];
     }
   }
 
   processNode(state, node, data);
 };
 
-if (typeof exports !== 'undefined') {
-  exports.template = template;
-}
+//
+//
+//
 
 /**
  * Helper for the places where we need to act asynchronously and keep track of
  * where we are right now
  */
 function cloneState(state) {
   return {
     options: state.options,
@@ -173,17 +177,16 @@ function processNode(state, node, data) 
 
             // Async attributes can only work if the whole attribute is async
             var replacement;
             if (value.indexOf('${') === 0 &&
                 value.charAt(value.length - 1) === '}') {
               replacement = envEval(state, value.slice(2, -1), data, value);
               if (replacement && typeof replacement.then === 'function') {
                 node.setAttribute(name, '');
-                /* jshint loopfunc:true */
                 replacement.then(function(newValue) {
                   node.setAttribute(name, newValue);
                 }).then(null, console.error);
               }
               else {
                 if (state.options.blankNullUndefined && replacement == null) {
                   replacement = '';
                 }
@@ -353,26 +356,25 @@ function processForEachMember(state, mem
     handleAsync(member, siblingNode, function(reply, node) {
       // Clone data because we can't be sure that we can safely mutate it
       var newData = Object.create(null);
       Object.keys(data).forEach(function(key) {
         newData[key] = data[key];
       });
       newData[paramName] = reply;
       if (node.parentNode != null) {
-        var clone;
         if (templNode.nodeName.toLowerCase() === 'loop') {
           for (var i = 0; i < templNode.childNodes.length; i++) {
-            clone = templNode.childNodes[i].cloneNode(true);
+            var clone = templNode.childNodes[i].cloneNode(true);
             node.parentNode.insertBefore(clone, node);
             processNode(cState, clone, newData);
           }
         }
         else {
-          clone = templNode.cloneNode(true);
+          var clone = templNode.cloneNode(true);
           clone.removeAttribute('foreach');
           node.parentNode.insertBefore(clone, node);
           processNode(cState, clone, newData);
         }
       }
     });
   }
   finally {
@@ -536,16 +538,20 @@ function property(state, path, data, new
     handleError(state, 'Path error with \'' + path + '\'', ex);
     return '${' + path + '}';
   }
 }
 
 /**
  * Like eval, but that creates a context of the variables in <tt>env</tt> in
  * which the script is evaluated.
+ * WARNING: This script uses 'with' which is generally regarded to be evil.
+ * The alternative is to create a Function at runtime that takes X parameters
+ * according to the X keys in the env object, and then call that function using
+ * the values in the env object. This is likely to be slow, but workable.
  * @param script The string to be evaluated.
  * @param data The environment in which to eval the script.
  * @param frame Optional debugging string in case of failure.
  * @return The return value of the script, or the error message if the script
  * execution failed.
  */
 function envEval(state, script, data, frame) {
   try {
@@ -555,57 +561,31 @@ function envEval(state, script, data, fr
       return property(state, script, data);
     }
     else {
       if (!state.options.allowEval) {
         handleError(state, 'allowEval is not set, however \'' + script + '\'' +
             ' can not be resolved using a simple property path.');
         return '${' + script + '}';
       }
-
-      // What we're looking to do is basically:
-      //   with(data) { return eval(script); }
-      // except in strict mode where 'with' is banned.
-      // So we create a function which has a parameter list the same as the
-      // keys in 'data' and with 'script' as its function body.
-      // We then call this function with the values in 'data'
-      var keys = allKeys(data);
-      var func = Function.apply(null, keys.concat("return " + script));
-
-      var values = keys.map(function(key) { return data[key]; });
-      return func.apply(null, values);
-
-      // TODO: The 'with' method is different from the code above in the value
-      // of 'this' when calling functions. For example:
-      //   envEval(state, 'foo()', { foo: function() { return this; } }, ...);
-      // The global for 'foo' when using 'with' is the data object. However the
-      // code above, the global is null. (Using 'func.apply(data, values)'
-      // changes 'this' in the 'foo()' frame, but not in the inside the body
-      // of 'foo', so that wouldn't help)
+      with (data) {
+        return eval(script);
+      }
     }
   }
   catch (ex) {
     handleError(state, 'Template error evaluating \'' + script + '\'', ex);
     return '${' + script + '}';
   }
   finally {
     state.stack.pop();
   }
 }
 
 /**
- * Object.keys() that respects the prototype chain
- */
-function allKeys(data) {
-  var keys = [];
-  for (var key in data) { keys.push(key); }
-  return keys;
-}
-
-/**
  * A generic way of reporting errors, for easy overloading in different
  * environments.
  * @param message the error message to report.
  * @param ex optional associated exception.
  */
 function handleError(state, message, ex) {
   logError(message + ' (In: ' + state.stack.join(' > ') + ')');
   if (ex) {
@@ -614,10 +594,10 @@ function handleError(state, message, ex)
 }
 
 /**
  * A generic way of reporting errors, for easy overloading in different
  * environments.
  * @param message the error message to report.
  */
 function logError(message) {
-  console.error(message);
+  console.log(message);
 }
diff --git a/toolkit/devtools/gcli/commands/addon.js b/toolkit/devtools/gcli/commands/addon.js
--- a/toolkit/devtools/gcli/commands/addon.js
+++ b/toolkit/devtools/gcli/commands/addon.js
@@ -1,41 +1,17 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
-/**
- * You can't require the AddonManager in a child process, but GCLI wants to
- * check for 'items' in all processes, so we return empty array if the
- * AddonManager is not available
- */
-function getAddonManager() {
-  try {
-    return {
-      AddonManager: require("resource://gre/modules/AddonManager.jsm").AddonManager,
-      addonManagerActive: true
-    };
-  }
-  catch (ex) {
-    // Fake up an AddonManager just enough to let the file load
-    return {
-      AddonManager: {
-        getAllAddons() {},
-        getAddonsByTypes() {}
-      },
-      addonManagerActive: false
-    };
-  }
-}
-
 const { Cc, Ci, Cu } = require("chrome");
-const { AddonManager, addonManagerActive } = getAddonManager();
-const l10n = require("gcli/l10n");
+const { AddonManager } = Cu.import("resource://gre/modules/AddonManager.jsm", {});
+const gcli = require("gcli/index");
 const { Promise: promise } = require("resource://gre/modules/Promise.jsm");
 
 const BRAND_SHORT_NAME = Cc["@mozilla.org/intl/stringbundle;1"]
                            .getService(Ci.nsIStringBundleService)
                            .createBundle("chrome://branding/locale/brand.properties")
                            .GetStringFromName("brandShortName");
 
 /**
@@ -68,17 +44,17 @@ function pendingOperations(addon) {
   ];
   return allOperations.reduce(function(operations, opName) {
     return addon.pendingOperations & AddonManager[opName] ?
       operations.concat(opName) :
       operations;
   }, []);
 }
 
-var items = [
+exports.items = [
   {
     item: "type",
     name: "addon",
     parent: "selection",
     stringifyProperty: "name",
     cacheable: true,
     constructor: function() {
       // Tell GCLI to clear the cache of addons when one is added or removed
@@ -95,30 +71,30 @@ var items = [
           name = name.trim().replace(/\s/g, "_");
           return { name: name, value: addon };
         });
       });
     }
   },
   {
     name: "addon",
-    description: l10n.lookup("addonDesc")
+    description: gcli.lookup("addonDesc")
   },
   {
     name: "addon list",
-    description: l10n.lookup("addonListDesc"),
+    description: gcli.lookup("addonListDesc"),
     returnType: "addonsInfo",
     params: [{
       name: "type",
       type: {
         name: "selection",
         data: [ "dictionary", "extension", "locale", "plugin", "theme", "all" ]
       },
       defaultValue: "all",
-      description: l10n.lookup("addonListTypeDesc")
+      description: gcli.lookup("addonListTypeDesc")
     }],
     exec: function(args, context) {
       let types = (args.type === "all") ? null : [ args.type ];
       return getAddonsByTypes(types).then(addons => {
         addons = addons.map(function(addon) {
           return {
             name: addon.name,
             version: addon.version,
@@ -133,41 +109,41 @@ var items = [
   {
     item: "converter",
     from: "addonsInfo",
     to: "view",
     exec: function(addonsInfo, context) {
       if (!addonsInfo.addons.length) {
         return context.createView({
           html: "<p>${message}</p>",
-          data: { message: l10n.lookup("addonNoneOfType") }
+          data: { message: gcli.lookup("addonNoneOfType") }
         });
       }
 
       let headerLookups = {
         "dictionary": "addonListDictionaryHeading",
         "extension": "addonListExtensionHeading",
         "locale": "addonListLocaleHeading",
         "plugin": "addonListPluginHeading",
         "theme": "addonListThemeHeading",
         "all": "addonListAllHeading"
       };
-      let header = l10n.lookup(headerLookups[addonsInfo.type] ||
+      let header = gcli.lookup(headerLookups[addonsInfo.type] ||
                                "addonListUnknownHeading");
 
       let operationLookups = {
         "PENDING_ENABLE": "addonPendingEnable",
         "PENDING_DISABLE": "addonPendingDisable",
         "PENDING_UNINSTALL": "addonPendingUninstall",
         "PENDING_INSTALL": "addonPendingInstall",
         "PENDING_UPGRADE": "addonPendingUpgrade"
       };
       function lookupOperation(opName) {
         let lookupName = operationLookups[opName];
-        return lookupName ? l10n.lookup(lookupName) : opName;
+        return lookupName ? gcli.lookup(lookupName) : opName;
       }
 
       function arrangeAddons(addons) {
         let enabledAddons = [];
         let disabledAddons = [];
         addons.forEach(function(addon) {
           if (addon.isActive) {
             enabledAddons.push(addon);
@@ -212,75 +188,69 @@ var items = [
           addons: arrangeAddons(addonsInfo.addons).map(function(addon) {
             return {
               name: addon.name,
               label: addon.name.replace(/\s/g, "_") +
                     (addon.version ? "_" + addon.version : ""),
               status: addon.isActive ? "enabled" : "disabled",
               version: addon.version,
               pendingOperations: addon.pendingOperations.length ?
-                (" (" + l10n.lookup("addonPending") + ": "
+                (" (" + gcli.lookup("addonPending") + ": "
                  + addon.pendingOperations.map(lookupOperation).join(", ")
                  + ")") :
                 "",
               toggleActionName: isActiveForToggle(addon) ? "disable": "enable",
               toggleActionMessage: isActiveForToggle(addon) ?
-                l10n.lookup("addonListOutDisable") :
-                l10n.lookup("addonListOutEnable")
+                gcli.lookup("addonListOutDisable") :
+                gcli.lookup("addonListOutEnable")
             };
           }),
           onclick: context.update,
           ondblclick: context.updateExec
         }
       });
     }
   },
   {
-    item: "command",
-    runAt: "client",
     name: "addon enable",
-    description: l10n.lookup("addonEnableDesc"),
+    description: gcli.lookup("addonEnableDesc"),
     params: [
       {
         name: "addon",
         type: "addon",
-        description: l10n.lookup("addonNameDesc")
+        description: gcli.lookup("addonNameDesc")
       }
     ],
     exec: function(args, context) {
       let name = (args.addon.name + " " + args.addon.version).trim();
       if (args.addon.userDisabled) {
         args.addon.userDisabled = false;
-        return l10n.lookupFormat("addonEnabled", [ name ]);
+        return gcli.lookupFormat("addonEnabled", [ name ]);
       }
 
-      return l10n.lookupFormat("addonAlreadyEnabled", [ name ]);
+      return gcli.lookupFormat("addonAlreadyEnabled", [ name ]);
     }
   },
   {
-    item: "command",
-    runAt: "client",
     name: "addon disable",
-    description: l10n.lookup("addonDisableDesc"),
+    description: gcli.lookup("addonDisableDesc"),
     params: [
       {
         name: "addon",
         type: "addon",
-        description: l10n.lookup("addonNameDesc")
+        description: gcli.lookup("addonNameDesc")
       }
     ],
     exec: function(args, context) {
       // If the addon is not disabled or is set to "click to play" then
       // disable it. Otherwise display the message "Add-on is already
       // disabled."
       let name = (args.addon.name + " " + args.addon.version).trim();
       if (!args.addon.userDisabled ||
           args.addon.userDisabled === AddonManager.STATE_ASK_TO_ACTIVATE) {
         args.addon.userDisabled = true;
-        return l10n.lookupFormat("addonDisabled", [ name ]);
+        return gcli.lookupFormat("addonDisabled", [ name ]);
       }
 
-      return l10n.lookupFormat("addonAlreadyDisabled", [ name ]);
+      return gcli.lookupFormat("addonAlreadyDisabled", [ name ]);
     }
   }
 ];
-
-exports.items = addonManagerActive ? items : [];
diff --git a/toolkit/devtools/gcli/commands/appcache.js b/toolkit/devtools/gcli/commands/appcache.js
--- a/toolkit/devtools/gcli/commands/appcache.js
+++ b/toolkit/devtools/gcli/commands/appcache.js
@@ -1,38 +1,35 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
-const l10n = require("gcli/l10n");
+const gcli = require("gcli/index");
 
 loader.lazyImporter(this, "AppCacheUtils", "resource:///modules/devtools/AppCacheUtils.jsm");
 
 exports.items = [
   {
-    item: "command",
     name: "appcache",
-    description: l10n.lookup("appCacheDesc")
+    description: gcli.lookup("appCacheDesc")
   },
   {
-    item: "command",
-    runAt: "server",
     name: "appcache validate",
-    description: l10n.lookup("appCacheValidateDesc"),
-    manual: l10n.lookup("appCacheValidateManual"),
+    description: gcli.lookup("appCacheValidateDesc"),
+    manual: gcli.lookup("appCacheValidateManual"),
     returnType: "appcacheerrors",
     params: [{
       group: "options",
       params: [
         {
           type: "string",
           name: "uri",
-          description: l10n.lookup("appCacheValidateUriDesc"),
+          description: gcli.lookup("appCacheValidateUriDesc"),
           defaultValue: null,
         }
       ]
     }],
     exec: function(args, context) {
       let utils;
       let deferred = context.defer();
 
@@ -51,17 +48,17 @@ exports.items = [
   },
   {
     item: "converter",
     from: "appcacheerrors",
     to: "view",
     exec: function([errors, manifestURI], context) {
       if (errors.length == 0) {
         return context.createView({
-          html: "<span>" + l10n.lookup("appCacheValidatedSuccessfully") + "</span>"
+          html: "<span>" + gcli.lookup("appCacheValidatedSuccessfully") + "</span>"
         });
       }
 
       return context.createView({
         html:
           "<div>" +
           "  <h4>Manifest URI: ${manifestURI}</h4>" +
           "  <ol>" +
@@ -71,42 +68,38 @@ exports.items = [
         data: {
           errors: errors,
           manifestURI: manifestURI
         }
       });
     }
   },
   {
-    item: "command",
-    runAt: "server",
     name: "appcache clear",
-    description: l10n.lookup("appCacheClearDesc"),
-    manual: l10n.lookup("appCacheClearManual"),
+    description: gcli.lookup("appCacheClearDesc"),
+    manual: gcli.lookup("appCacheClearManual"),
     exec: function(args, context) {
       let utils = new AppCacheUtils(args.uri);
       utils.clearAll();
 
-      return l10n.lookup("appCacheClearCleared");
+      return gcli.lookup("appCacheClearCleared");
     }
   },
   {
-    item: "command",
-    runAt: "server",
     name: "appcache list",
-    description: l10n.lookup("appCacheListDesc"),
-    manual: l10n.lookup("appCacheListManual"),
+    description: gcli.lookup("appCacheListDesc"),
+    manual: gcli.lookup("appCacheListManual"),
     returnType: "appcacheentries",
     params: [{
       group: "options",
       params: [
         {
           type: "string",
           name: "search",
-          description: l10n.lookup("appCacheListSearchDesc"),
+          description: gcli.lookup("appCacheListSearchDesc"),
           defaultValue: null,
         },
       ]
     }],
     exec: function(args, context) {
       let utils = new AppCacheUtils();
       return utils.listEntries(args.search);
     }
@@ -117,69 +110,67 @@ exports.items = [
     to: "view",
     exec: function(entries, context) {
       return context.createView({
         html: "" +
           "<ul class='gcli-appcache-list'>" +
           "  <li foreach='entry in ${entries}'>" +
           "    <table class='gcli-appcache-detail'>" +
           "      <tr>" +
-          "        <td>" + l10n.lookup("appCacheListKey") + "</td>" +
+          "        <td>" + gcli.lookup("appCacheListKey") + "</td>" +
           "        <td>${entry.key}</td>" +
           "      </tr>" +
           "      <tr>" +
-          "        <td>" + l10n.lookup("appCacheListFetchCount") + "</td>" +
+          "        <td>" + gcli.lookup("appCacheListFetchCount") + "</td>" +
           "        <td>${entry.fetchCount}</td>" +
           "      </tr>" +
           "      <tr>" +
-          "        <td>" + l10n.lookup("appCacheListLastFetched") + "</td>" +
+          "        <td>" + gcli.lookup("appCacheListLastFetched") + "</td>" +
           "        <td>${entry.lastFetched}</td>" +
           "      </tr>" +
           "      <tr>" +
-          "        <td>" + l10n.lookup("appCacheListLastModified") + "</td>" +
+          "        <td>" + gcli.lookup("appCacheListLastModified") + "</td>" +
           "        <td>${entry.lastModified}</td>" +
           "      </tr>" +
           "      <tr>" +
-          "        <td>" + l10n.lookup("appCacheListExpirationTime") + "</td>" +
+          "        <td>" + gcli.lookup("appCacheListExpirationTime") + "</td>" +
           "        <td>${entry.expirationTime}</td>" +
           "      </tr>" +
           "      <tr>" +
-          "        <td>" + l10n.lookup("appCacheListDataSize") + "</td>" +
+          "        <td>" + gcli.lookup("appCacheListDataSize") + "</td>" +
           "        <td>${entry.dataSize}</td>" +
           "      </tr>" +
           "      <tr>" +
-          "        <td>" + l10n.lookup("appCacheListDeviceID") + "</td>" +
+          "        <td>" + gcli.lookup("appCacheListDeviceID") + "</td>" +
           "        <td>${entry.deviceID} <span class='gcli-out-shortcut' " +
           "onclick='${onclick}' ondblclick='${ondblclick}' " +
           "data-command='appcache viewentry ${entry.key}'" +
-          ">" + l10n.lookup("appCacheListViewEntry") + "</span>" +
+          ">" + gcli.lookup("appCacheListViewEntry") + "</span>" +
           "        </td>" +
           "      </tr>" +
           "    </table>" +
           "  </li>" +
           "</ul>",
         data: {
           entries: entries,
           onclick: context.update,
           ondblclick: context.updateExec
         }
       });
     }
   },
   {
-    item: "command",
-    runAt: "server",
     name: "appcache viewentry",
-    description: l10n.lookup("appCacheViewEntryDesc"),
-    manual: l10n.lookup("appCacheViewEntryManual"),
+    description: gcli.lookup("appCacheViewEntryDesc"),
+    manual: gcli.lookup("appCacheViewEntryManual"),
     params: [
       {
         type: "string",
         name: "key",
-        description: l10n.lookup("appCacheViewEntryKey"),
+        description: gcli.lookup("appCacheViewEntryKey"),
         defaultValue: null,
       }
     ],
     exec: function(args, context) {
       let utils = new AppCacheUtils();
       return utils.viewEntry(args.key);
     }
   }
diff --git a/toolkit/devtools/gcli/commands/calllog.js b/toolkit/devtools/gcli/commands/calllog.js
--- a/toolkit/devtools/gcli/commands/calllog.js
+++ b/toolkit/devtools/gcli/commands/calllog.js
@@ -1,17 +1,16 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const { Cc, Ci, Cu } = require("chrome");
 const TargetFactory = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools.TargetFactory;
-const l10n = require("gcli/l10n");
 const gcli = require("gcli/index");
 
 loader.lazyImporter(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm");
 
 loader.lazyGetter(this, "Debugger", () => {
   let global = Cu.getGlobalForObject({});
   let JsDebugger = Cu.import("resource://gre/modules/jsdebugger.jsm", {});
   JsDebugger.addDebuggerToGlobal(global);
@@ -20,40 +19,38 @@ loader.lazyGetter(this, "Debugger", () =
 
 let debuggers = [];
 let chromeDebuggers = [];
 let sandboxes = [];
 
 exports.items = [
   {
     name: "calllog",
-    description: l10n.lookup("calllogDesc")
+    description: gcli.lookup("calllogDesc")
   },
   {
-    item: "command",
-    runAt: "client",
     name: "calllog start",
-    description: l10n.lookup("calllogStartDesc"),
+    description: gcli.lookup("calllogStartDesc"),
 
     exec: function(args, context) {
       let contentWindow = context.environment.window;
 
       let dbg = new Debugger(contentWindow);
       dbg.onEnterFrame = function(frame) {
         // BUG 773652 -  Make the output from the GCLI calllog command nicer
         contentWindow.console.log("Method call: " + this.callDescription(frame));
       }.bind(this);
 
       debuggers.push(dbg);
 
       let gBrowser = context.environment.chromeDocument.defaultView.gBrowser;
       let target = TargetFactory.forTab(gBrowser.selectedTab);
       gDevTools.showToolbox(target, "webconsole");
 
-      return l10n.lookup("calllogStartReply");
+      return gcli.lookup("calllogStartReply");
     },
 
     callDescription: function(frame) {
       let name = "<anonymous>";
       if (frame.callee.name) {
         name = frame.callee.name;
       }
       else {
@@ -70,153 +67,147 @@ exports.items = [
     valueToString: function(value) {
       if (typeof value !== "object" || value === null) {
         return uneval(value);
       }
       return "[object " + value.class + "]";
     }
   },
   {
-    item: "command",
-    runAt: "client",
     name: "calllog stop",
-    description: l10n.lookup("calllogStopDesc"),
+    description: gcli.lookup("calllogStopDesc"),
 
     exec: function(args, context) {
       let numDebuggers = debuggers.length;
       if (numDebuggers == 0) {
-        return l10n.lookup("calllogStopNoLogging");
+        return gcli.lookup("calllogStopNoLogging");
       }
 
       for (let dbg of debuggers) {
         dbg.onEnterFrame = undefined;
       }
       debuggers = [];
 
-      return l10n.lookupFormat("calllogStopReply", [ numDebuggers ]);
+      return gcli.lookupFormat("calllogStopReply", [ numDebuggers ]);
     }
   },
   {
-    item: "command",
-    runAt: "client",
     name: "calllog chromestart",
-    description: l10n.lookup("calllogChromeStartDesc"),
+    description: gcli.lookup("calllogChromeStartDesc"),
     get hidden() gcli.hiddenByChromePref(),
     params: [
       {
         name: "sourceType",
         type: {
           name: "selection",
           data: ["content-variable", "chrome-variable", "jsm", "javascript"]
         }
       },
       {
         name: "source",
         type: "string",
-        description: l10n.lookup("calllogChromeSourceTypeDesc"),
-        manual: l10n.lookup("calllogChromeSourceTypeManual"),
+        description: gcli.lookup("calllogChromeSourceTypeDesc"),
+        manual: gcli.lookup("calllogChromeSourceTypeManual"),
       }
     ],
     exec: function(args, context) {
       let globalObj;
       let contentWindow = context.environment.window;
 
       if (args.sourceType == "jsm") {
         try {
           globalObj = Cu.import(args.source);
         }
         catch (e) {
-          return l10n.lookup("callLogChromeInvalidJSM");
+          return gcli.lookup("callLogChromeInvalidJSM");
         }
       } else if (args.sourceType == "content-variable") {
         if (args.source in contentWindow) {
           globalObj = Cu.getGlobalForObject(contentWindow[args.source]);
         } else {
-          throw new Error(l10n.lookup("callLogChromeVarNotFoundContent"));
+          throw new Error(gcli.lookup("callLogChromeVarNotFoundContent"));
         }
       } else if (args.sourceType == "chrome-variable") {
         let chromeWin = context.environment.chromeDocument.defaultView;
         if (args.source in chromeWin) {
           globalObj = Cu.getGlobalForObject(chromeWin[args.source]);
         } else {
-          return l10n.lookup("callLogChromeVarNotFoundChrome");
+          return gcli.lookup("callLogChromeVarNotFoundChrome");
         }
       } else {
         let chromeWin = context.environment.chromeDocument.defaultView;
         let sandbox = new Cu.Sandbox(chromeWin,
                                     {
                                       sandboxPrototype: chromeWin,
                                       wantXrays: false,
                                       sandboxName: "gcli-cmd-calllog-chrome"
                                     });
         let returnVal;
         try {
           returnVal = Cu.evalInSandbox(args.source, sandbox, "ECMAv5");
           sandboxes.push(sandbox);
         } catch(e) {
           // We need to save the message before cleaning up else e contains a dead
           // object.
-          let msg = l10n.lookup("callLogChromeEvalException") + ": " + e;
+          let msg = gcli.lookup("callLogChromeEvalException") + ": " + e;
           Cu.nukeSandbox(sandbox);
           return msg;
         }
 
         if (typeof returnVal == "undefined") {
-          return l10n.lookup("callLogChromeEvalNeedsObject");
+          return gcli.lookup("callLogChromeEvalNeedsObject");
         }
 
         globalObj = Cu.getGlobalForObject(returnVal);
       }
 
       let dbg = new Debugger(globalObj);
       chromeDebuggers.push(dbg);
 
       dbg.onEnterFrame = function(frame) {
         // BUG 773652 -  Make the output from the GCLI calllog command nicer
-        contentWindow.console.log(l10n.lookup("callLogChromeMethodCall") +
+        contentWindow.console.log(gcli.lookup("callLogChromeMethodCall") +
                                   ": " + this.callDescription(frame));
       }.bind(this);
 
       let gBrowser = context.environment.chromeDocument.defaultView.gBrowser;
       let target = TargetFactory.forTab(gBrowser.selectedTab);
       gDevTools.showToolbox(target, "webconsole");
 
-      return l10n.lookup("calllogChromeStartReply");
+      return gcli.lookup("calllogChromeStartReply");
     },
 
     valueToString: function(value) {
       if (typeof value !== "object" || value === null)
         return uneval(value);
       return "[object " + value.class + "]";
     },
 
     callDescription: function(frame) {
-      let name = frame.callee.name || l10n.lookup("callLogChromeAnonFunction");
+      let name = frame.callee.name || gcli.lookup("callLogChromeAnonFunction");
       let args = frame.arguments.map(this.valueToString).join(", ");
       return name + "(" + args + ")";
     }
   },
   {
-    item: "command",
-    runAt: "client",
     name: "calllog chromestop",
-    description: l10n.lookup("calllogChromeStopDesc"),
+    description: gcli.lookup("calllogChromeStopDesc"),
     get hidden() gcli.hiddenByChromePref(),
     exec: function(args, context) {
       let numDebuggers = chromeDebuggers.length;
       if (numDebuggers == 0) {
-        return l10n.lookup("calllogChromeStopNoLogging");
+        return gcli.lookup("calllogChromeStopNoLogging");
       }
 
       for (let dbg of chromeDebuggers) {
         dbg.onEnterFrame = undefined;
         dbg.enabled = false;
       }
       for (let sandbox of sandboxes) {
         Cu.nukeSandbox(sandbox);
       }
       chromeDebuggers = [];
       sandboxes = [];
 
-      return l10n.lookupFormat("calllogChromeStopReply", [ numDebuggers ]);
+      return gcli.lookupFormat("calllogChromeStopReply", [ numDebuggers ]);
     }
   }
 ];
diff --git a/toolkit/devtools/gcli/commands/cmd.js b/toolkit/devtools/gcli/commands/cmd.js
--- a/toolkit/devtools/gcli/commands/cmd.js
+++ b/toolkit/devtools/gcli/commands/cmd.js
@@ -6,17 +6,16 @@
 
 const { Cc, Ci, Cu } = require("chrome");
 
 const { Promise: promise } = require("resource://gre/modules/Promise.jsm");
 
 const { OS } = Cu.import("resource://gre/modules/osfile.jsm", {});
 const { TextEncoder, TextDecoder } = Cu.import('resource://gre/modules/commonjs/toolkit/loader.js', {});
 const gcli = require("gcli/index");
-const l10n = require("gcli/l10n");
 
 loader.lazyGetter(this, "prefBranch", function() {
   let prefService = Cc["@mozilla.org/preferences-service;1"].getService(Ci.nsIPrefService);
   return prefService.getBranch(null).QueryInterface(Ci.nsIPrefBranch2);
 });
 
 loader.lazyGetter(this, "supportsString", function() {
   return Cc["@mozilla.org/supports-string;1"].createInstance(Ci.nsISupportsString);
@@ -123,44 +122,40 @@ function loadCommandFile(entry) {
 }
 
 exports.items = [
   {
     name: "cmd",
     get hidden() {
       return !prefBranch.prefHasUserValue(PREF_DIR);
     },
-    description: l10n.lookup("cmdDesc")
+    description: gcli.lookup("cmdDesc")
   },
   {
-    item: "command",
-    runAt: "client",
     name: "cmd refresh",
-    description: l10n.lookup("cmdRefreshDesc"),
+    description: gcli.lookup("cmdRefreshDesc"),
     get hidden() {
       return !prefBranch.prefHasUserValue(PREF_DIR);
     },
     exec: function(args, context) {
       gcli.load();
 
       let dirName = prefBranch.getComplexValue(PREF_DIR,
                                               Ci.nsISupportsString).data.trim();
-      return l10n.lookupFormat("cmdStatus3", [ dirName ]);
+      return gcli.lookupFormat("cmdStatus3", [ dirName ]);
     }
   },
   {
-    item: "command",
-    runAt: "client",
     name: "cmd setdir",
-    description: l10n.lookup("cmdSetdirDesc"),
-    manual: l10n.lookup("cmdSetdirManual2"),
+    description: gcli.lookup("cmdSetdirDesc"),
+    manual: gcli.lookup("cmdSetdirManual2"),
     params: [
       {
         name: "directory",
-        description: l10n.lookup("cmdSetdirDirectoryDesc"),
+        description: gcli.lookup("cmdSetdirDirectoryDesc"),
         type: {
           name: "file",
           filetype: "directory",
           existing: "yes"
         },
         defaultValue: null
       }
     ],
@@ -169,12 +164,12 @@ exports.items = [
       return true; // !prefBranch.prefHasUserValue(PREF_DIR);
     },
     exec: function(args, context) {
       supportsString.data = args.directory;
       prefBranch.setComplexValue(PREF_DIR, Ci.nsISupportsString, supportsString);
 
       gcli.load();
 
-      return l10n.lookupFormat("cmdStatus3", [ args.directory ]);
+      return gcli.lookupFormat("cmdStatus3", [ args.directory ]);
     }
   }
 ];
diff --git a/toolkit/devtools/gcli/commands/cookie.js b/toolkit/devtools/gcli/commands/cookie.js
--- a/toolkit/devtools/gcli/commands/cookie.js
+++ b/toolkit/devtools/gcli/commands/cookie.js
@@ -1,22 +1,17 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
-const { Ci, Cc } = require("chrome");
-const l10n = require("gcli/l10n");
-const URL = require("sdk/url").URL;
-
-XPCOMUtils.defineLazyGetter(this, "cookieMgr", function() {
-  const { Cc, Ci } = require("chrome");
-  return Cc["@mozilla.org/cookiemanager;1"].getService(Ci.nsICookieManager2);
-});
+const { Cc, Ci, Cu } = require("chrome");
+const gcli = require("gcli/index");
+const cookieMgr = Cc["@mozilla.org/cookiemanager;1"].getService(Ci.nsICookieManager2);
 
 /**
  * Check host value and remove port part as it is not used
  * for storing cookies.
  *
  * Parameter will usually be context.environment.document.location.host
  */
 function sanitizeHost(host) {
@@ -26,17 +21,17 @@ function sanitizeHost(host) {
   return host.split(':')[0];
 }
 
 /**
  * The cookie 'expires' value needs converting into something more readable
  */
 function translateExpires(expires) {
   if (expires == 0) {
-    return l10n.lookup("cookieListOutSession");
+    return gcli.lookup("cookieListOutSession");
   }
   return new Date(expires).toLocaleString();
 }
 
 /**
  * Check if a given cookie matches a given host
  */
 function isCookieAtHost(cookie, host) {
@@ -49,25 +44,23 @@ function isCookieAtHost(cookie, host) {
   else {
     return cookie.host == host;
   }
 }
 
 exports.items = [
   {
     name: "cookie",
-    description: l10n.lookup("cookieDesc"),
-    manual: l10n.lookup("cookieManual")
+    description: gcli.lookup("cookieDesc"),
+    manual: gcli.lookup("cookieManual")
   },
   {
-    item: "command",
-    runAt: "server",
     name: "cookie list",
-    description: l10n.lookup("cookieListDesc"),
-    manual: l10n.lookup("cookieListManual"),
+    description: gcli.lookup("cookieListDesc"),
+    manual: gcli.lookup("cookieListManual"),
     returnType: "cookies",
     exec: function(args, context) {
       let host = sanitizeHost(context.environment.document.location.host);
 
       let enm = cookieMgr.getCookiesFromHost(host);
 
       let cookies = [];
       while (enm.hasMoreElements()) {
@@ -85,26 +78,24 @@ exports.items = [
           });
         }
       }
 
       return cookies;
     }
   },
   {
-    item: "command",
-    runAt: "server",
     name: "cookie remove",
-    description: l10n.lookup("cookieRemoveDesc"),
-    manual: l10n.lookup("cookieRemoveManual"),
+    description: gcli.lookup("cookieRemoveDesc"),
+    manual: gcli.lookup("cookieRemoveManual"),
     params: [
       {
         name: "name",
         type: "string",
-        description: l10n.lookup("cookieRemoveKeyDesc"),
+        description: gcli.lookup("cookieRemoveKeyDesc"),
       }
     ],
     exec: function(args, context) {
       let host = sanitizeHost(context.environment.document.location.host);
       let enm = cookieMgr.getCookiesFromHost(host);
 
       let cookies = [];
       while (enm.hasMoreElements()) {
@@ -118,127 +109,124 @@ exports.items = [
     }
   },
   {
     item: "converter",
     from: "cookies",
     to: "view",
     exec: function(cookies, context) {
       if (cookies.length == 0) {
-        let host = new URL(context.environment.target.url).host;
-        host = sanitizeHost(host);
-        let msg = l10n.lookupFormat("cookieListOutNoneHost", [ host ]);
+        let host = sanitizeHost(context.environment.document.location.host);
+        let msg = gcli.lookupFormat("cookieListOutNoneHost", [ host ]);
         return context.createView({ html: "<span>" + msg + "</span>" });
       }
 
       for (let cookie of cookies) {
         cookie.expires = translateExpires(cookie.expires);
 
         let noAttrs = !cookie.secure && !cookie.httpOnly && !cookie.sameDomain;
         cookie.attrs = (cookie.secure ? "secure" : " ") +
                        (cookie.httpOnly ? "httpOnly" : " ") +
                        (cookie.sameDomain ? "sameDomain" : " ") +
-                       (noAttrs ? l10n.lookup("cookieListOutNone") : " ");
+                       (noAttrs ? gcli.lookup("cookieListOutNone") : " ");
       }
 
       return context.createView({
         html:
           "<ul class='gcli-cookielist-list'>" +
           "  <li foreach='cookie in ${cookies}'>" +
           "    <div>${cookie.name}=${cookie.value}</div>" +
           "    <table class='gcli-cookielist-detail'>" +
           "      <tr>" +
-          "        <td>" + l10n.lookup("cookieListOutHost") + "</td>" +
+          "        <td>" + gcli.lookup("cookieListOutHost") + "</td>" +
           "        <td>${cookie.host}</td>" +
           "      </tr>" +
           "      <tr>" +
-          "        <td>" + l10n.lookup("cookieListOutPath") + "</td>" +
+          "        <td>" + gcli.lookup("cookieListOutPath") + "</td>" +
           "        <td>${cookie.path}</td>" +
           "      </tr>" +
           "      <tr>" +
-          "        <td>" + l10n.lookup("cookieListOutExpires") + "</td>" +
+          "        <td>" + gcli.lookup("cookieListOutExpires") + "</td>" +
           "        <td>${cookie.expires}</td>" +
           "      </tr>" +
           "      <tr>" +
-          "        <td>" + l10n.lookup("cookieListOutAttributes") + "</td>" +
+          "        <td>" + gcli.lookup("cookieListOutAttributes") + "</td>" +
           "        <td>${cookie.attrs}</td>" +
           "      </tr>" +
           "      <tr><td colspan='2'>" +
           "        <span class='gcli-out-shortcut' onclick='${onclick}'" +
           "            data-command='cookie set ${cookie.name} '" +
-          "            >" + l10n.lookup("cookieListOutEdit") + "</span>" +
+          "            >" + gcli.lookup("cookieListOutEdit") + "</span>" +
           "        <span class='gcli-out-shortcut'" +
           "            onclick='${onclick}' ondblclick='${ondblclick}'" +
           "            data-command='cookie remove ${cookie.name}'" +
-          "            >" + l10n.lookup("cookieListOutRemove") + "</span>" +
+          "            >" + gcli.lookup("cookieListOutRemove") + "</span>" +
           "      </td></tr>" +
           "    </table>" +
           "  </li>" +
           "</ul>",
         data: {
           options: { allowEval: true },
           cookies: cookies,
           onclick: context.update,
           ondblclick: context.updateExec
         }
       });
     }
   },
   {
-    item: "command",
-    runAt: "server",
     name: "cookie set",
-    description: l10n.lookup("cookieSetDesc"),
-    manual: l10n.lookup("cookieSetManual"),
+    description: gcli.lookup("cookieSetDesc"),
+    manual: gcli.lookup("cookieSetManual"),
     params: [
       {
         name: "name",
         type: "string",
-        description: l10n.lookup("cookieSetKeyDesc")
+        description: gcli.lookup("cookieSetKeyDesc")
       },
       {
         name: "value",
         type: "string",
-        description: l10n.lookup("cookieSetValueDesc")
+        description: gcli.lookup("cookieSetValueDesc")
       },
       {
-        group: l10n.lookup("cookieSetOptionsDesc"),
+        group: gcli.lookup("cookieSetOptionsDesc"),
         params: [
           {
             name: "path",
             type: { name: "string", allowBlank: true },
             defaultValue: "/",
-            description: l10n.lookup("cookieSetPathDesc")
+            description: gcli.lookup("cookieSetPathDesc")
           },
           {
             name: "domain",
             type: "string",
             defaultValue: null,
-            description: l10n.lookup("cookieSetDomainDesc")
+            description: gcli.lookup("cookieSetDomainDesc")
           },
           {
             name: "secure",
             type: "boolean",
-            description: l10n.lookup("cookieSetSecureDesc")
+            description: gcli.lookup("cookieSetSecureDesc")
           },
           {
             name: "httpOnly",
             type: "boolean",
-            description: l10n.lookup("cookieSetHttpOnlyDesc")
+            description: gcli.lookup("cookieSetHttpOnlyDesc")
           },
           {
             name: "session",
             type: "boolean",
-            description: l10n.lookup("cookieSetSessionDesc")
+            description: gcli.lookup("cookieSetSessionDesc")
           },
           {
             name: "expires",
             type: "string",
             defaultValue: "Jan 17, 2038",
-            description: l10n.lookup("cookieSetExpiresDesc")
+            description: gcli.lookup("cookieSetExpiresDesc")
           },
         ]
       }
     ],
     exec: function(args, context) {
       let host = sanitizeHost(context.environment.document.location.host);
       let time = Date.parse(args.expires) / 1000;
 
diff --git a/toolkit/devtools/gcli/commands/csscoverage.js b/toolkit/devtools/gcli/commands/csscoverage.js
--- a/toolkit/devtools/gcli/commands/csscoverage.js
+++ b/toolkit/devtools/gcli/commands/csscoverage.js
@@ -1,18 +1,17 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const { Cc, Ci } = require("chrome");
 
-loader.lazyGetter(this, "gDevTools", () => require("resource:///modules/devtools/gDevTools.jsm").gDevTools);
-
+const { gDevTools } = require("resource:///modules/devtools/gDevTools.jsm");
 const promise = require("resource://gre/modules/Promise.jsm").Promise;
 
 const domtemplate = require("gcli/util/domtemplate");
 const csscoverage = require("devtools/server/actors/csscoverage");
 const l10n = csscoverage.l10n;
 
 const { XPCOMUtils } = require("resource://gre/modules/XPCOMUtils.jsm");
 
@@ -23,18 +22,16 @@ XPCOMUtils.defineLazyModuleGetter(this, 
  */
 exports.items = [
   {
     name: "csscoverage",
     hidden: true,
     description: l10n.lookup("csscoverageDesc"),
   },
   {
-    item: "command",
-    runAt: "client",
     name: "csscoverage start",
     hidden: true,
     description: l10n.lookup("csscoverageStartDesc2"),
     params: [
       {
         name: "noreload",
         type: "boolean",
         description: l10n.lookup("csscoverageStartNoReloadDesc"),
@@ -46,50 +43,44 @@ exports.items = [
       if (usage == null) {
         throw new Error(l10n.lookup("csscoverageNoRemoteError"));
       }
       yield usage.start(context.environment.chromeWindow,
                         context.environment.target, args.noreload);
     }
   },
   {
-    item: "command",
-    runAt: "client",
     name: "csscoverage stop",
     hidden: true,
     description: l10n.lookup("csscoverageStopDesc2"),
     exec: function*(args, context) {
       let target = context.environment.target;
       let usage = yield csscoverage.getUsage(target);
       if (usage == null) {
         throw new Error(l10n.lookup("csscoverageNoRemoteError"));
       }
       yield usage.stop();
       yield gDevTools.showToolbox(target, "styleeditor");
     }
   },
   {
-    item: "command",
-    runAt: "client",
     name: "csscoverage oneshot",
     hidden: true,
     description: l10n.lookup("csscoverageOneShotDesc2"),
     exec: function*(args, context) {
       let target = context.environment.target;
       let usage = yield csscoverage.getUsage(target);
       if (usage == null) {
         throw new Error(l10n.lookup("csscoverageNoRemoteError"));
       }
       yield usage.oneshot();
       yield gDevTools.showToolbox(target, "styleeditor");
     }
   },
   {
-    item: "command",
-    runAt: "client",
     name: "csscoverage toggle",
     hidden: true,
     description: l10n.lookup("csscoverageToggleDesc2"),
     state: {
       isChecked: function(target) {
         return csscoverage.getUsage(target).then(usage => {
           return usage.isRunning();
         });
@@ -114,18 +105,16 @@ exports.items = [
         throw new Error(l10n.lookup("csscoverageNoRemoteError"));
       }
 
       yield usage.toggle(context.environment.chromeWindow,
                          context.environment.target);
     }
   },
   {
-    item: "command",
-    runAt: "client",
     name: "csscoverage report",
     hidden: true,
     description: l10n.lookup("csscoverageReportDesc2"),
     exec: function*(args, context) {
       let usage = yield csscoverage.getUsage(context.environment.target);
       if (usage == null) {
         throw new Error(l10n.lookup("csscoverageNoRemoteError"));
       }
diff --git a/toolkit/devtools/gcli/commands/folder.js b/toolkit/devtools/gcli/commands/folder.js
--- a/toolkit/devtools/gcli/commands/folder.js
+++ b/toolkit/devtools/gcli/commands/folder.js
@@ -1,54 +1,52 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const { Cc, Ci, Cu, CC } = require("chrome");
 const { Services } = require("resource://gre/modules/Services.jsm");
-const l10n = require("gcli/l10n");
+const gcli = require("gcli/index");
 const dirService = Cc["@mozilla.org/file/directory_service;1"]
                       .getService(Ci.nsIProperties);
 
 function showFolder(aPath) {
   let nsLocalFile = CC("@mozilla.org/file/local;1", "nsILocalFile",
                         "initWithPath");
 
   try {
     let file = new nsLocalFile(aPath);
 
     if (file.exists()) {
       file.reveal();
-      return l10n.lookupFormat("folderOpenDirResult", [aPath]);
+      return gcli.lookupFormat("folderOpenDirResult", [aPath]);
     } else {
-      return l10n.lookup("folderInvalidPath");
+      return gcli.lookup("folderInvalidPath");
     }
   } catch (e) {
-    return l10n.lookup("folderInvalidPath");
+    return gcli.lookup("folderInvalidPath");
   }
 }
 
 exports.items = [
   {
     name: "folder",
-    description: l10n.lookup("folderDesc")
+    description: gcli.lookup("folderDesc")
   },
   {
-    item: "command",
-    runAt: "client",
     name: "folder open",
-    description: l10n.lookup("folderOpenDesc"),
+    description: gcli.lookup("folderOpenDesc"),
     params: [
       {
         name: "path",
         type: { name: "string", allowBlank: true },
         defaultValue: "~",
-        description: l10n.lookup("folderOpenDir")
+        description: gcli.lookup("folderOpenDir")
       }
     ],
     returnType: "string",
     exec: function(args, context) {
       let dirName = args.path;
 
       // replaces ~ with the home directory path in unix and windows
       if (dirName.indexOf("~") == 0) {
@@ -57,20 +55,18 @@ exports.items = [
         dirName = dirName.substr(1);
         dirName = homeDir + dirName;
       }
 
       return showFolder(dirName);
     }
   },
   {
-    item: "command",
-    runAt: "client",
     name: "folder openprofile",
-    description: l10n.lookup("folderOpenProfileDesc"),
+    description: gcli.lookup("folderOpenProfileDesc"),
     returnType: "string",
     exec: function(args, context) {
       // Get the profile directory.
       let currProfD = Services.dirsvc.get("ProfD", Ci.nsIFile);
       let profileDir = currProfD.path;
       return showFolder(profileDir);
     }
   }
diff --git a/toolkit/devtools/gcli/commands/highlight.js b/toolkit/devtools/gcli/commands/highlight.js
--- a/toolkit/devtools/gcli/commands/highlight.js
+++ b/toolkit/devtools/gcli/commands/highlight.js
@@ -1,24 +1,23 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const {Cc, Ci, Cu} = require("chrome");
-const l10n = require("gcli/l10n");
+const gcli = require("gcli/index");
 require("devtools/server/actors/inspector");
 const {BoxModelHighlighter} = require("devtools/server/actors/highlighter");
 
 XPCOMUtils.defineLazyGetter(this, "nodesSelected", function() {
   return Services.strings.createBundle("chrome://browser/locale/devtools/gclicommands.properties");
 });
 XPCOMUtils.defineLazyModuleGetter(this, "PluralForm","resource://gre/modules/PluralForm.jsm");
-const events = require("sdk/event/core");
 
 // How many maximum nodes can be highlighted in parallel
 const MAX_HIGHLIGHTED_ELEMENTS = 100;
 
 // Stores the highlighters instances so they can be destroyed later.
 // also export them so tests can access those and assert they got created
 // correctly.
 exports.highlighters = [];
@@ -30,93 +29,98 @@ function unhighlightAll() {
   for (let highlighter of exports.highlighters) {
     highlighter.destroy();
   }
   exports.highlighters.length = 0;
 }
 
 exports.items = [
   {
-    item: "command",
-    runAt: "server",
     name: "highlight",
-    description: l10n.lookup("highlightDesc"),
-    manual: l10n.lookup("highlightManual"),
+    description: gcli.lookup("highlightDesc"),
+    manual: gcli.lookup("highlightManual"),
     params: [
       {
         name: "selector",
         type: "nodelist",
-        description: l10n.lookup("highlightSelectorDesc"),
-        manual: l10n.lookup("highlightSelectorManual")
+        description: gcli.lookup("highlightSelectorDesc"),
+        manual: gcli.lookup("highlightSelectorManual")
       },
       {
-        group: l10n.lookup("highlightOptionsDesc"),
+        group: gcli.lookup("highlightOptionsDesc"),
         params: [
           {
             name: "hideguides",
             type: "boolean",
-            description: l10n.lookup("highlightHideGuidesDesc"),
-            manual: l10n.lookup("highlightHideGuidesManual")
+            description: gcli.lookup("highlightHideGuidesDesc"),
+            manual: gcli.lookup("highlightHideGuidesManual")
           },
           {
             name: "showinfobar",
             type: "boolean",
-            description: l10n.lookup("highlightShowInfoBarDesc"),
-            manual: l10n.lookup("highlightShowInfoBarManual")
+            description: gcli.lookup("highlightShowInfoBarDesc"),
+            manual: gcli.lookup("highlightShowInfoBarManual")
           },
           {
             name: "showall",
             type: "boolean",
-            description: l10n.lookup("highlightShowAllDesc"),
-            manual: l10n.lookup("highlightShowAllManual")
+            description: gcli.lookup("highlightShowAllDesc"),
+            manual: gcli.lookup("highlightShowAllManual")
           },
           {
             name: "region",
             type: {
               name: "selection",
               data: ["content", "padding", "border", "margin"]
             },
-            description: l10n.lookup("highlightRegionDesc"),
-            manual: l10n.lookup("highlightRegionManual"),
+            description: gcli.lookup("highlightRegionDesc"),
+            manual: gcli.lookup("highlightRegionManual"),
             defaultValue: "border"
           },
           {
             name: "fill",
             type: "string",
-            description: l10n.lookup("highlightFillDesc"),
-            manual: l10n.lookup("highlightFillManual"),
+            description: gcli.lookup("highlightFillDesc"),
+            manual: gcli.lookup("highlightFillManual"),
             defaultValue: null
           },
           {
             name: "keep",
             type: "boolean",
-            description: l10n.lookup("highlightKeepDesc"),
-            manual: l10n.lookup("highlightKeepManual"),
+            description: gcli.lookup("highlightKeepDesc"),
+            manual: gcli.lookup("highlightKeepManual"),
           }
         ]
       }
     ],
     exec: function(args, context) {
       // Remove all existing highlighters unless told otherwise
       if (!args.keep) {
         unhighlightAll();
       }
 
       let env = context.environment;
 
       // Unhighlight on navigate
-      events.on(env.__deprecatedTabActor, "will-navigate", unhighlightAll);
+      env.target.once("navigate", unhighlightAll);
+
+      // Build a tab context for the highlighter (which normally takes a
+      // TabActor as parameter to its constructor)
+      let tabContext = {
+        browser: env.chromeWindow.gBrowser.getBrowserForDocument(env.document),
+        window: env.window
+      };
 
       let i = 0;
       for (let node of args.selector) {
         if (!args.showall && i >= MAX_HIGHLIGHTED_ELEMENTS) {
           break;
         }
 
-        let highlighter = new BoxModelHighlighter(env.__deprecatedTabActor);
+        let highlighter = new BoxModelHighlighter(tabContext);
         if (args.fill) {
           highlighter.regionFill[args.region] = args.fill;
         }
         highlighter.show(node, {
           region: args.region,
           hideInfoBar: !args.showinfobar,
           hideGuides: args.hideguides,
           showOnly: args.region
@@ -124,24 +128,22 @@ exports.items = [
         exports.highlighters.push(highlighter);
         i ++;
       }
 
       let highlightText = nodesSelected.GetStringFromName("highlightOutputConfirm2");
       let output = PluralForm.get(args.selector.length, highlightText)
                              .replace("%1$S", args.selector.length);
       if (args.selector.length > i) {
-        output = l10n.lookupFormat("highlightOutputMaxReached",
+        output = gcli.lookupFormat("highlightOutputMaxReached",
           ["" + args.selector.length, "" + i]);
       }
 
       return output;
     }
   },
   {
-    item: "command",
-    runAt: "server",
     name: "unhighlight",
-    description: l10n.lookup("unhighlightDesc"),
-    manual: l10n.lookup("unhighlightManual"),
+    description: gcli.lookup("unhighlightDesc"),
+    manual: gcli.lookup("unhighlightManual"),
     exec: unhighlightAll
   }
 ];
diff --git a/toolkit/devtools/gcli/commands/inject.js b/toolkit/devtools/gcli/commands/inject.js
--- a/toolkit/devtools/gcli/commands/inject.js
+++ b/toolkit/devtools/gcli/commands/inject.js
@@ -1,25 +1,23 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const { Services } = require("resource://gre/modules/Services.jsm");
 const { listenOnce } = require("devtools/async-utils");
-const l10n = require("gcli/l10n");
+const gcli = require("gcli/index");
 
 exports.items = [
   {
-    item: "command",
-    runAt: "server",
     name: "inject",
-    description: l10n.lookup("injectDesc"),
-    manual: l10n.lookup("injectManual2"),
+    description: gcli.lookup("injectDesc"),
+    manual: gcli.lookup("injectManual2"),
     params: [{
       name: "library",
       type: {
         name: "union",
         alternatives: [
           {
             name: "selection",
             lookup: [
@@ -46,17 +44,17 @@ exports.items = [
               }
             ]
           },
           {
             name: "url"
           }
         ]
       },
-      description: l10n.lookup("injectLibraryDesc")
+      description: gcli.lookup("injectLibraryDesc")
     }],
     exec: function*(args, context) {
       let document = context.environment.document;
       let library = args.library;
       let name = (library.type === "selection") ?
           library.selection.name : library.url;
       let src = (library.type === "selection") ?
           library.selection.src : library.url;
@@ -64,23 +62,23 @@ exports.items = [
       if (context.environment.window.location.protocol == "https:") {
         src = src.replace(/^http:/, "https:");
       }
 
       try {
         // Check if URI is valid
         Services.io.newURI(src, null, null);
       } catch(e) {
-        return l10n.lookupFormat("injectFailed", [name]);
+        return gcli.lookupFormat("injectFailed", [name]);
       }
 
       let newSource = document.createElement("script");
       newSource.setAttribute("src", src);
 
       let loadPromise = listenOnce(newSource, "load");
       document.head.appendChild(newSource);
 
       yield loadPromise;
 
-      return l10n.lookupFormat("injectLoaded", [name]);
+      return gcli.lookupFormat("injectLoaded", [name]);
     }
   }
 ];
diff --git a/toolkit/devtools/gcli/commands/jsb.js b/toolkit/devtools/gcli/commands/jsb.js
--- a/toolkit/devtools/gcli/commands/jsb.js
+++ b/toolkit/devtools/gcli/commands/jsb.js
@@ -1,97 +1,95 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const { Cc, Ci, Cu } = require("chrome");
-const l10n = require("gcli/l10n");
+const gcli = require("gcli/index");
 const XMLHttpRequest = Cc["@mozilla.org/xmlextras/xmlhttprequest;1"];
 const { devtools } = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
 
 loader.lazyImporter(this, "Preferences", "resource://gre/modules/Preferences.jsm");
 
 devtools.lazyRequireGetter(this, "beautify", "devtools/jsbeautify");
 
 exports.items = [
   {
-    item: "command",
-    runAt: "client",
     name: "jsb",
-    description: l10n.lookup("jsbDesc"),
+    description: gcli.lookup("jsbDesc"),
     returnValue:"string",
     params: [
       {
         name: "url",
         type: "string",
-        description: l10n.lookup("jsbUrlDesc")
+        description: gcli.lookup("jsbUrlDesc")
       },
       {
-        group: l10n.lookup("jsbOptionsDesc"),
+        group: gcli.lookup("jsbOptionsDesc"),
         params: [
           {
             name: "indentSize",
             type: "number",
-            description: l10n.lookup("jsbIndentSizeDesc"),
-            manual: l10n.lookup("jsbIndentSizeManual"),
+            description: gcli.lookup("jsbIndentSizeDesc"),
+            manual: gcli.lookup("jsbIndentSizeManual"),
             defaultValue: Preferences.get("devtools.editor.tabsize", 2),
           },
           {
             name: "indentChar",
             type: {
               name: "selection",
               lookup: [
                 { name: "space", value: " " },
                 { name: "tab", value: "\t" }
               ]
             },
-            description: l10n.lookup("jsbIndentCharDesc"),
-            manual: l10n.lookup("jsbIndentCharManual"),
+            description: gcli.lookup("jsbIndentCharDesc"),
+            manual: gcli.lookup("jsbIndentCharManual"),
             defaultValue: " ",
           },
           {
             name: "doNotPreserveNewlines",
             type: "boolean",
-            description: l10n.lookup("jsbDoNotPreserveNewlinesDesc")
+            description: gcli.lookup("jsbDoNotPreserveNewlinesDesc")
           },
           {
             name: "preserveMaxNewlines",
             type: "number",
-            description: l10n.lookup("jsbPreserveMaxNewlinesDesc"),
-            manual: l10n.lookup("jsbPreserveMaxNewlinesManual"),
+            description: gcli.lookup("jsbPreserveMaxNewlinesDesc"),
+            manual: gcli.lookup("jsbPreserveMaxNewlinesManual"),
             defaultValue: -1
           },
           {
             name: "jslintHappy",
             type: "boolean",
-            description: l10n.lookup("jsbJslintHappyDesc"),
-            manual: l10n.lookup("jsbJslintHappyManual")
+            description: gcli.lookup("jsbJslintHappyDesc"),
+            manual: gcli.lookup("jsbJslintHappyManual")
           },
           {
             name: "braceStyle",
             type: {
               name: "selection",
               data: ["collapse", "expand", "end-expand", "expand-strict"]
             },
-            description: l10n.lookup("jsbBraceStyleDesc2"),
-            manual: l10n.lookup("jsbBraceStyleManual2"),
+            description: gcli.lookup("jsbBraceStyleDesc2"),
+            manual: gcli.lookup("jsbBraceStyleManual2"),
             defaultValue: "collapse"
           },
           {
             name: "noSpaceBeforeConditional",
             type: "boolean",
-            description: l10n.lookup("jsbNoSpaceBeforeConditionalDesc")
+            description: gcli.lookup("jsbNoSpaceBeforeConditionalDesc")
           },
           {
             name: "unescapeStrings",
             type: "boolean",
-            description: l10n.lookup("jsbUnescapeStringsDesc"),
-            manual: l10n.lookup("jsbUnescapeStringsManual")
+            description: gcli.lookup("jsbUnescapeStringsDesc"),
+            manual: gcli.lookup("jsbUnescapeStringsManual")
           }
         ]
       }
     ],
     exec: function(args, context) {
       let opts = {
         indent_size: args.indentSize,
         indent_char: args.indentChar,
@@ -104,35 +102,35 @@ exports.items = [
         unescape_strings: args.unescapeStrings
       };
 
       let xhr = new XMLHttpRequest();
 
       try {
         xhr.open("GET", args.url, true);
       } catch(e) {
-        return l10n.lookup("jsbInvalidURL");
+        return gcli.lookup("jsbInvalidURL");
       }
 
       let deferred = context.defer();
 
-      xhr.onreadystatechange = function() {
+      xhr.onreadystatechange = function(aEvt) {
         if (xhr.readyState == 4) {
           if (xhr.status == 200 || xhr.status == 0) {
             let browserDoc = context.environment.chromeDocument;
             let browserWindow = browserDoc.defaultView;
             let gBrowser = browserWindow.gBrowser;
             let result = beautify.js(xhr.responseText, opts);
 
             browserWindow.Scratchpad.ScratchpadManager.openScratchpad({text: result});
 
             deferred.resolve();
           } else {
-            deferred.reject("Unable to load page to beautify: " + args.url + " " +
-                            xhr.status + " " + xhr.statusText);
+            deferred.resolve("Unable to load page to beautify: " + args.url + " " +
+                             xhr.status + " " + xhr.statusText);
           }
         };
       }
       xhr.send(null);
       return deferred.promise;
     }
   }
 ];
diff --git a/toolkit/devtools/gcli/commands/listen.js b/toolkit/devtools/gcli/commands/listen.js
--- a/toolkit/devtools/gcli/commands/listen.js
+++ b/toolkit/devtools/gcli/commands/listen.js
@@ -1,17 +1,17 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const { Cc, Ci, Cu } = require("chrome");
 const Services = require("Services");
-const l10n = require("gcli/l10n");
+const gcli = require("gcli/index");
 const { XPCOMUtils } = require("resource://gre/modules/XPCOMUtils.jsm");
 XPCOMUtils.defineLazyModuleGetter(this, "DevToolsLoader",
   "resource://gre/modules/devtools/Loader.jsm");
 
 const BRAND_SHORT_NAME = Cc["@mozilla.org/intl/stringbundle;1"]
                            .getService(Ci.nsIStringBundleService)
                            .createBundle("chrome://branding/locale/brand.properties")
                            .GetStringFromName("brandShortName");
@@ -29,40 +29,38 @@ XPCOMUtils.defineLazyGetter(this, "debug
   let debuggerServer = serverLoader.DebuggerServer;
   debuggerServer.init();
   debuggerServer.addBrowserActors();
   return debuggerServer;
 });
 
 exports.items = [
   {
-    item: "command",
-    runAt: "client",
     name: "listen",
-    description: l10n.lookup("listenDesc"),
-    manual: l10n.lookupFormat("listenManual2", [ BRAND_SHORT_NAME ]),
+    description: gcli.lookup("listenDesc"),
+    manual: gcli.lookupFormat("listenManual2", [ BRAND_SHORT_NAME ]),
     params: [
       {
         name: "port",
         type: "number",
         get defaultValue() {
           return Services.prefs.getIntPref("devtools.debugger.chrome-debugging-port");
         },
-        description: l10n.lookup("listenPortDesc"),
+        description: gcli.lookup("listenPortDesc"),
       }
     ],
     exec: function(args, context) {
       var listener = debuggerServer.createListener();
       if (!listener) {
-        throw new Error(l10n.lookup("listenDisabledOutput"));
+        throw new Error(gcli.lookup("listenDisabledOutput"));
       }
 
       listener.portOrPath = args.port;
       listener.open();
 
       if (debuggerServer.initialized) {
-        return l10n.lookupFormat("listenInitOutput", [ "" + args.port ]);
+        return gcli.lookupFormat("listenInitOutput", [ "" + args.port ]);
       }
 
-      return l10n.lookup("listenNoInitOutput");
+      return gcli.lookup("listenNoInitOutput");
     },
   }
 ];
diff --git a/toolkit/devtools/gcli/commands/media.js b/toolkit/devtools/gcli/commands/media.js
--- a/toolkit/devtools/gcli/commands/media.js
+++ b/toolkit/devtools/gcli/commands/media.js
@@ -1,50 +1,46 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
-const l10n = require("gcli/l10n");
+const gcli = require("gcli/index");
 
 exports.items = [
   {
     name: "media",
-    description: l10n.lookup("mediaDesc")
+    description: gcli.lookup("mediaDesc")
   },
   {
-    item: "command",
-    runAt: "client",
     name: "media emulate",
-    description: l10n.lookup("mediaEmulateDesc"),
-    manual: l10n.lookup("mediaEmulateManual"),
+    description: gcli.lookup("mediaEmulateDesc"),
+    manual: gcli.lookup("mediaEmulateManual"),
     params: [
       {
         name: "type",
-        description: l10n.lookup("mediaEmulateType"),
+        description: gcli.lookup("mediaEmulateType"),
         type: {
            name: "selection",
            data: [
              "braille", "embossed", "handheld", "print", "projection",
              "screen", "speech", "tty", "tv"
            ]
         }
       }
     ],
     exec: function(args, context) {
       let markupDocumentViewer = context.environment.chromeWindow
                                         .gBrowser.markupDocumentViewer;
       markupDocumentViewer.emulateMedium(args.type);
     }
   },
   {
-    item: "command",
-    runAt: "client",
     name: "media reset",
-    description: l10n.lookup("mediaResetDesc"),
+    description: gcli.lookup("mediaResetDesc"),
     exec: function(args, context) {
       let markupDocumentViewer = context.environment.chromeWindow
                                         .gBrowser.markupDocumentViewer;
       markupDocumentViewer.stopEmulatingMedium();
     }
   }
 ];
diff --git a/toolkit/devtools/gcli/commands/pagemod.js b/toolkit/devtools/gcli/commands/pagemod.js
--- a/toolkit/devtools/gcli/commands/pagemod.js
+++ b/toolkit/devtools/gcli/commands/pagemod.js
@@ -1,69 +1,67 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const { Cc, Ci, Cu } = require("chrome");
-const l10n = require("gcli/l10n");
+const gcli = require("gcli/index");
 
 exports.items = [
   {
     name: "pagemod",
-    description: l10n.lookup("pagemodDesc"),
+    description: gcli.lookup("pagemodDesc"),
   },
   {
-    item: "command",
-    runAt: "server",
     name: "pagemod replace",
-    description: l10n.lookup("pagemodReplaceDesc"),
+    description: gcli.lookup("pagemodReplaceDesc"),
     params: [
       {
         name: "search",
         type: "string",
-        description: l10n.lookup("pagemodReplaceSearchDesc"),
+        description: gcli.lookup("pagemodReplaceSearchDesc"),
       },
       {
         name: "replace",
         type: "string",
-        description: l10n.lookup("pagemodReplaceReplaceDesc"),
+        description: gcli.lookup("pagemodReplaceReplaceDesc"),
       },
       {
         name: "ignoreCase",
         type: "boolean",
-        description: l10n.lookup("pagemodReplaceIgnoreCaseDesc"),
+        description: gcli.lookup("pagemodReplaceIgnoreCaseDesc"),
       },
       {
         name: "selector",
         type: "string",
-        description: l10n.lookup("pagemodReplaceSelectorDesc"),
+        description: gcli.lookup("pagemodReplaceSelectorDesc"),
         defaultValue: "*:not(script):not(style):not(embed):not(object):not(frame):not(iframe):not(frameset)",
       },
       {
         name: "root",
         type: "node",
-        description: l10n.lookup("pagemodReplaceRootDesc"),
+        description: gcli.lookup("pagemodReplaceRootDesc"),
         defaultValue: null,
       },
       {
         name: "attrOnly",
         type: "boolean",
-        description: l10n.lookup("pagemodReplaceAttrOnlyDesc"),
+        description: gcli.lookup("pagemodReplaceAttrOnlyDesc"),
       },
       {
         name: "contentOnly",
         type: "boolean",
-        description: l10n.lookup("pagemodReplaceContentOnlyDesc"),
+        description: gcli.lookup("pagemodReplaceContentOnlyDesc"),
       },
       {
         name: "attributes",
         type: "string",
-        description: l10n.lookup("pagemodReplaceAttributesDesc"),
+        description: gcli.lookup("pagemodReplaceAttributesDesc"),
         defaultValue: null,
       },
     ],
     // Make a given string safe to use in a regular expression.
     escapeRegex: function(aString) {
       return aString.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
     },
     exec: function(args, context) {
@@ -111,51 +109,49 @@ exports.items = [
             let attr = element.attributes[y];
             if (!attributeRegex || attributeRegex.test(attr.name)) {
               attr.value = attr.value.replace(search, replaceAttribute);
             }
           }
         }
       }
 
-      return l10n.lookupFormat("pagemodReplaceResult",
+      return gcli.lookupFormat("pagemodReplaceResult",
                               [elements.length, replacedTextNodes,
                                 replacedAttributes]);
     }
   },
   {
     name: "pagemod remove",
-    description: l10n.lookup("pagemodRemoveDesc"),
+    description: gcli.lookup("pagemodRemoveDesc"),
   },
   {
-    item: "command",
-    runAt: "server",
     name: "pagemod remove element",
-    description: l10n.lookup("pagemodRemoveElementDesc"),
+    description: gcli.lookup("pagemodRemoveElementDesc"),
     params: [
       {
         name: "search",
         type: "string",
-        description: l10n.lookup("pagemodRemoveElementSearchDesc"),
+        description: gcli.lookup("pagemodRemoveElementSearchDesc"),
       },
       {
         name: "root",
         type: "node",
-        description: l10n.lookup("pagemodRemoveElementRootDesc"),
+        description: gcli.lookup("pagemodRemoveElementRootDesc"),
         defaultValue: null,
       },
       {
         name: "stripOnly",
         type: "boolean",
-        description: l10n.lookup("pagemodRemoveElementStripOnlyDesc"),
+        description: gcli.lookup("pagemodRemoveElementStripOnlyDesc"),
       },
       {
         name: "ifEmptyOnly",
         type: "boolean",
-        description: l10n.lookup("pagemodRemoveElementIfEmptyOnlyDesc"),
+        description: gcli.lookup("pagemodRemoveElementIfEmptyOnlyDesc"),
       },
     ],
     exec: function(args, context) {
       let root = args.root || context.environment.document;
       let elements = Array.prototype.slice.call(root.querySelectorAll(args.search));
 
       let removed = 0;
       for (let i = 0; i < elements.length; i++) {
@@ -170,46 +166,44 @@ exports.items = [
           }
         }
         if (!args.ifEmptyOnly || !element.hasChildNodes()) {
           element.parentNode.removeChild(element);
           removed++;
         }
       }
 
-      return l10n.lookupFormat("pagemodRemoveElementResultMatchedAndRemovedElements",
+      return gcli.lookupFormat("pagemodRemoveElementResultMatchedAndRemovedElements",
                               [elements.length, removed]);
     }
   },
   {
-    item: "command",
-    runAt: "server",
     name: "pagemod remove attribute",
-    description: l10n.lookup("pagemodRemoveAttributeDesc"),
+    description: gcli.lookup("pagemodRemoveAttributeDesc"),
     params: [
       {
         name: "searchAttributes",
         type: "string",
-        description: l10n.lookup("pagemodRemoveAttributeSearchAttributesDesc"),
+        description: gcli.lookup("pagemodRemoveAttributeSearchAttributesDesc"),
       },
       {
         name: "searchElements",
         type: "string",
-        description: l10n.lookup("pagemodRemoveAttributeSearchElementsDesc"),
+        description: gcli.lookup("pagemodRemoveAttributeSearchElementsDesc"),
       },
       {
         name: "root",
         type: "node",
-        description: l10n.lookup("pagemodRemoveAttributeRootDesc"),
+        description: gcli.lookup("pagemodRemoveAttributeRootDesc"),
         defaultValue: null,
       },
       {
         name: "ignoreCase",
         type: "boolean",
-        description: l10n.lookup("pagemodRemoveAttributeIgnoreCaseDesc"),
+        description: gcli.lookup("pagemodRemoveAttributeIgnoreCaseDesc"),
       },
     ],
     exec: function(args, context) {
       let root = args.root || context.environment.document;
       let regexOptions = args.ignoreCase ? "ig" : "g";
       let attributeRegex = new RegExp(args.searchAttributes, regexOptions);
       let elements = root.querySelectorAll(args.searchElements);
       elements = Array.prototype.slice.call(elements);
@@ -226,30 +220,28 @@ exports.items = [
           let attr = attrs[y];
           if (attributeRegex.test(attr.name)) {
             element.removeAttribute(attr.name);
             removed++;
           }
         }
       }
 
-      return l10n.lookupFormat("pagemodRemoveAttributeResult",
+      return gcli.lookupFormat("pagemodRemoveAttributeResult",
                               [elements.length, removed]);
     }
   },
   // This command allows the user to export the page to HTML after DOM changes
   {
     name: "export",
-    description: l10n.lookup("exportDesc"),
+    description: gcli.lookup("exportDesc"),
   },
   {
-    item: "command",
-    runAt: "server",
     name: "export html",
-    description: l10n.lookup("exportHtmlDesc"),
+    description: gcli.lookup("exportHtmlDesc"),
     params: [
       {
         name: "destination",
         type: {
           name: "selection",
           data: [ "window", "stdout", "clipboard" ]
         },
         defaultValue: "window"
diff --git a/toolkit/devtools/gcli/commands/paintflashing.js b/toolkit/devtools/gcli/commands/paintflashing.js
--- a/toolkit/devtools/gcli/commands/paintflashing.js
+++ b/toolkit/devtools/gcli/commands/paintflashing.js
@@ -9,174 +9,127 @@ const TargetFactory = require("resource:
 
 const Telemetry = require("devtools/shared/telemetry");
 const telemetry = new Telemetry();
 
 const EventEmitter = require("devtools/toolkit/event-emitter");
 const eventEmitter = new EventEmitter();
 
 const gcli = require("gcli/index");
-const l10n = require("gcli/l10n");
 
-/**
- * Keep a store of the paintFlashing state here. This is a nasty hack but
- * the only other way to know is to ask the server, which is async and we need
- * the answer synchronously in "paintflashing toggle".state()
- */
-let isContentPaintFlashing = false;
+function onPaintFlashingChanged(context) {
+  let tab = context.environment.chromeWindow.gBrowser.selectedTab;
+  let target = TargetFactory.forTab(tab);
 
-/**
- * Fire events and telemetry when paintFlashing happens
- */
-function onPaintFlashingChanged(target, value) {
   eventEmitter.emit("changed", { target: target });
   function fireChange() {
     eventEmitter.emit("changed", { target: target });
   }
 
   target.off("navigate", fireChange);
   target.once("navigate", fireChange);
 
-  if (value) {
+  let window = context.environment.window;
+  let wUtils = window.QueryInterface(Ci.nsIInterfaceRequestor)
+                     .getInterface(Ci.nsIDOMWindowUtils);
+  if (wUtils.paintFlashing) {
     telemetry.toolOpened("paintflashing");
   } else {
     telemetry.toolClosed("paintflashing");
   }
 }
 
-/**
- * Alter the paintFlashing state of a window and report on the new value.
- * This works with chrome or content windows.
- *
- * This is a bizarre method that you could argue should be broken up into
- * separate getter and setter functions, however keeping it as one helps
- * to simplify the commands below.
- *
- * @param state {string} One of:
- * - "on" which does window.paintFlashing = true
- * - "off" which does window.paintFlashing = false
- * - "toggle" which does window.paintFlashing = !window.paintFlashing
- * - "query" which does nothing
- * @return The new value of the window.paintFlashing flag
- */
-function setPaintFlashing(window, state) {
-  const winUtils = window.QueryInterface(Ci.nsIInterfaceRequestor)
-                         .getInterface(Ci.nsIDOMWindowUtils)
-
-  if (["on", "off", "toggle", "query"].indexOf(state) === -1) {
-    throw new Error("Unsupported state: " + state);
-  }
-
-  if (state === "on") {
-    winUtils.paintFlashing = true;
-  }
-  else if (state === "off") {
-    winUtils.paintFlashing = false;
-  }
-  else if (state === "toggle") {
-    winUtils.paintFlashing = !winUtils.paintFlashing;
-  }
-
-  return winUtils.paintFlashing;
-}
-
 exports.items = [
   {
     name: "paintflashing",
-    description: l10n.lookup("paintflashingDesc")
+    description: gcli.lookup("paintflashingDesc")
   },
   {
-    item: "command",
-    runAt: "client",
     name: "paintflashing on",
-    description: l10n.lookup("paintflashingOnDesc"),
-    manual: l10n.lookup("paintflashingManual"),
+    description: gcli.lookup("paintflashingOnDesc"),
+    manual: gcli.lookup("paintflashingManual"),
     params: [{
       group: "options",
       params: [
         {
           type: "boolean",
           name: "chrome",
           get hidden() gcli.hiddenByChromePref(),
-          description: l10n.lookup("paintflashingChromeDesc"),
+          description: gcli.lookup("paintflashingChromeDesc"),
         }
       ]
     }],
-    exec: function*(args, context) {
-      if (!args.chrome) {
-        const value = yield context.updateExec("paintflashing_server --state on");
-        isContentPaintFlashing = value;
-        onPaintFlashingChanged(context.environment.target, value);
-      }
-      else {
-        setPaintFlashing(context.environment.chromeWindow, "on");
-      }
+    exec: function(args, context) {
+      let window = args.chrome ?
+                  context.environment.chromeWindow :
+                  context.environment.window;
+
+      window.QueryInterface(Ci.nsIInterfaceRequestor)
+            .getInterface(Ci.nsIDOMWindowUtils)
+            .paintFlashing = true;
+      onPaintFlashingChanged(context);
     }
   },
   {
-    item: "command",
-    runAt: "client",
     name: "paintflashing off",
-    description: l10n.lookup("paintflashingOffDesc"),
-    manual: l10n.lookup("paintflashingManual"),
+    description: gcli.lookup("paintflashingOffDesc"),
+    manual: gcli.lookup("paintflashingManual"),
     params: [{
       group: "options",
       params: [
         {
           type: "boolean",
           name: "chrome",
           get hidden() gcli.hiddenByChromePref(),
-          description: l10n.lookup("paintflashingChromeDesc"),
+          description: gcli.lookup("paintflashingChromeDesc"),
         }
       ]
     }],
     exec: function(args, context) {
-      if (!args.chrome) {
-        const value = yield context.updateExec("paintflashing_server --state off");
-        isContentPaintFlashing = value;
-        onPaintFlashingChanged(context.environment.target, value);
-      }
-      else {
-        setPaintFlashing(context.environment.chromeWindow, "off");
-      }
+      let window = args.chrome ?
+                  context.environment.chromeWindow :
+                  context.environment.window;
+
+      window.QueryInterface(Ci.nsIInterfaceRequestor)
+            .getInterface(Ci.nsIDOMWindowUtils)
+            .paintFlashing = false;
+      onPaintFlashingChanged(context);
     }
   },
   {
-    item: "command",
-    runAt: "client",
     name: "paintflashing toggle",
     hidden: true,
     buttonId: "command-button-paintflashing",
     buttonClass: "command-button command-button-invertable",
     state: {
-      isChecked: () => isContentPaintFlashing,
-      onChange: (_, handler) => eventEmitter.on("changed", handler),
-      offChange: (_, handler) => eventEmitter.off("changed", handler),
-    },
-    tooltipText: l10n.lookup("paintflashingTooltip"),
-    description: l10n.lookup("paintflashingToggleDesc"),
-    manual: l10n.lookup("paintflashingManual"),
-    exec: function(args, context) {
-      const value = yield context.updateExec("paintflashing_server --state toggle");
-      isContentPaintFlashing = value;
-      onPaintFlashingChanged(context.environment.target, value);
-    }
-  },
-  {
-    item: "command",
-    runAt: "server",
-    name: "paintflashing_server",
-    hidden: true,
-    params: [
-      {
-        name: "state",
-        type: {
-          name: "selection",
-          data: [ "on", "off", "toggle", "query" ]
+      isChecked: function(aTarget) {
+        if (aTarget.isLocalTab) {
+          let isChecked = false;
+          let window = aTarget.tab.linkedBrowser.contentWindow;
+          if (window) {
+            let wUtils = window.QueryInterface(Ci.nsIInterfaceRequestor).
+                                getInterface(Ci.nsIDOMWindowUtils);
+            isChecked = wUtils.paintFlashing;
+          }
+          return isChecked;
+        } else {
+          throw new Error("Unsupported target");
         }
       },
-    ],
-    returnType: "boolean",
+      onChange: function(aTarget, aChangeHandler) {
+        eventEmitter.on("changed", aChangeHandler);
+      },
+      offChange: function(aTarget, aChangeHandler) {
+        eventEmitter.off("changed", aChangeHandler);
+      },
+    },
+    tooltipText: gcli.lookup("paintflashingTooltip"),
+    description: gcli.lookup("paintflashingToggleDesc"),
+    manual: gcli.lookup("paintflashingManual"),
     exec: function(args, context) {
-      return setPaintFlashing(context.environment.window, args.state);
+      let window = context.environment.window;
+      let wUtils = window.QueryInterface(Ci.nsIInterfaceRequestor).
+                   getInterface(Ci.nsIDOMWindowUtils);
+      wUtils.paintFlashing = !wUtils.paintFlashing;
+      onPaintFlashingChanged(context);
     }
   }
 ];
diff --git a/toolkit/devtools/gcli/commands/restart.js b/toolkit/devtools/gcli/commands/restart.js
--- a/toolkit/devtools/gcli/commands/restart.js
+++ b/toolkit/devtools/gcli/commands/restart.js
@@ -1,16 +1,16 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const { Cc, Ci, Cu } = require("chrome");
-const l10n = require("gcli/l10n");
+const gcli = require("gcli/index");
 const Services = require("Services");
 
 const BRAND_SHORT_NAME = Cc["@mozilla.org/intl/stringbundle;1"]
                            .getService(Ci.nsIStringBundleService)
                            .createBundle("chrome://branding/locale/brand.properties")
                            .GetStringFromName("brandShortName");
 
 /**
@@ -22,41 +22,39 @@ const BRAND_SHORT_NAME = Cc["@mozilla.or
  * Examples :
  * >> restart
  * - restarts browser immediately
  * >> restart --nocache
  * - restarts immediately and starts Firefox without using cache
  */
 exports.items = [
   {
-    item: "command",
-    runAt: "client",
     name: "restart",
-    description: l10n.lookupFormat("restartBrowserDesc", [ BRAND_SHORT_NAME ]),
+    description: gcli.lookupFormat("restartBrowserDesc", [ BRAND_SHORT_NAME ]),
     params: [
       {
         name: "nocache",
         type: "boolean",
-        description: l10n.lookup("restartBrowserNocacheDesc")
+        description: gcli.lookup("restartBrowserNocacheDesc")
       }
     ],
     returnType: "string",
     exec: function Restart(args, context) {
       let canceled = Cc["@mozilla.org/supports-PRBool;1"]
                       .createInstance(Ci.nsISupportsPRBool);
       Services.obs.notifyObservers(canceled, "quit-application-requested", "restart");
       if (canceled.data) {
-        return l10n.lookup("restartBrowserRequestCancelled");
+        return gcli.lookup("restartBrowserRequestCancelled");
       }
 
       // disable loading content from cache.
       if (args.nocache) {
         Services.appinfo.invalidateCachesOnRestart();
       }
 
       // restart
       Cc["@mozilla.org/toolkit/app-startup;1"]
           .getService(Ci.nsIAppStartup)
           .quit(Ci.nsIAppStartup.eAttemptQuit | Ci.nsIAppStartup.eRestart);
-      return l10n.lookupFormat("restartBrowserRestarting", [ BRAND_SHORT_NAME ]);
+      return gcli.lookupFormat("restartBrowserRestarting", [ BRAND_SHORT_NAME ]);
     }
   }
 ];
diff --git a/toolkit/devtools/gcli/commands/rulers.js b/toolkit/devtools/gcli/commands/rulers.js
--- a/toolkit/devtools/gcli/commands/rulers.js
+++ b/toolkit/devtools/gcli/commands/rulers.js
@@ -4,30 +4,29 @@
 
 "use strict";
 
 const EventEmitter = require("devtools/toolkit/event-emitter");
 const eventEmitter = new EventEmitter();
 const events = require("sdk/event/core");
 
 const gcli = require("gcli/index");
-const l10n = require("gcli/l10n");
 require("devtools/server/actors/inspector");
 const { RulersHighlighter } = require("devtools/server/actors/highlighter");
 
 const highlighters = new WeakMap();
 
 exports.items = [
   {
     name: "rulers",
-    description: l10n.lookup("rulersDesc"),
-    manual: l10n.lookup("rulersManual"),
+    description: gcli.lookup("rulersDesc"),
+    manual: gcli.lookup("rulersManual"),
     buttonId: "command-button-rulers",
     buttonClass: "command-button command-button-invertable",
-    tooltipText: l10n.lookup("rulersTooltip"),
+    tooltipText: gcli.lookup("rulersTooltip"),
     state: {
       isChecked: function(aTarget) {
         if (aTarget.isLocalTab) {
           let window = aTarget.tab.linkedBrowser.contentWindow;
 
           if (window) {
             return highlighters.has(window.document);
           }
diff --git a/toolkit/devtools/gcli/commands/screenshot.js b/toolkit/devtools/gcli/commands/screenshot.js
--- a/toolkit/devtools/gcli/commands/screenshot.js
+++ b/toolkit/devtools/gcli/commands/screenshot.js
@@ -1,464 +1,261 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const { Cc, Ci, Cu } = require("chrome");
-const l10n = require("gcli/l10n");
-const { Services } = require("resource://gre/modules/Services.jsm");
+const gcli = require("gcli/index");
 
 loader.lazyImporter(this, "Downloads", "resource://gre/modules/Downloads.jsm");
 loader.lazyImporter(this, "LayoutHelpers", "resource://gre/modules/devtools/LayoutHelpers.jsm");
 loader.lazyImporter(this, "Task", "resource://gre/modules/Task.jsm");
 loader.lazyImporter(this, "OS", "resource://gre/modules/osfile.jsm");
 
 const BRAND_SHORT_NAME = Cc["@mozilla.org/intl/stringbundle;1"]
                            .getService(Ci.nsIStringBundleService)
                            .createBundle("chrome://branding/locale/brand.properties")
                            .GetStringFromName("brandShortName");
 
 // String used as an indication to generate default file name in the following
 // format: "Screen Shot yyyy-mm-dd at HH.MM.SS.png"
 const FILENAME_DEFAULT_VALUE = " ";
 
-/*
- * There are 2 commands and 1 converter here. The 2 commands are nearly
- * identical except that one runs on the client and one in the server.
- *
- * The server command is hidden, and is designed to be called from the client
- * command when the --chrome flag is *not* used.
- */
-
-/**
- * Both commands have the same initial filename parameter
- */
-const filenameParam = {
-  name: "filename",
-  type: "string",
-  defaultValue: FILENAME_DEFAULT_VALUE,
-  description: l10n.lookup("screenshotFilenameDesc"),
-  manual: l10n.lookup("screenshotFilenameManual")
-};
-
-/**
- * Both commands have the same set of standard optional parameters
- */
-const standardParams = {
-  group: l10n.lookup("screenshotGroupOptions"),
-  params: [
-    {
-      name: "clipboard",
-      type: "boolean",
-      description: l10n.lookup("screenshotClipboardDesc"),
-      manual: l10n.lookup("screenshotClipboardManual")
-    },
-    {
-      name: "imgur",
-      hidden: true, // Hidden because it fails with "Could not reach imgur API"
-      type: "boolean",
-      description: l10n.lookup("screenshotImgurDesc"),
-      manual: l10n.lookup("screenshotImgurManual")
-    },
-    {
-      name: "delay",
-      type: { name: "number", min: 0 },
-      defaultValue: 0,
-      description: l10n.lookup("screenshotDelayDesc"),
-      manual: l10n.lookup("screenshotDelayManual")
-    },
-    {
-      name: "fullpage",
-      type: "boolean",
-      description: l10n.lookup("screenshotFullPageDesc"),
-      manual: l10n.lookup("screenshotFullPageManual")
-    },
-    {
-      name: "selector",
-      type: "node",
-      defaultValue: null,
-      description: l10n.lookup("inspectNodeDesc"),
-      manual: l10n.lookup("inspectNodeManual")
-    }
-  ]
-};
-
 exports.items = [
   {
-    /**
-     * Format an 'imageSummary' (as output by the screenshot command).
-     * An 'imageSummary' is a simple JSON object that looks like this:
-     *
-     * {
-     *   destinations: [ "..." ], // Required array of descriptions of the
-     *                            // locations of the result image (the command
-     *                            // can have multiple outputs)
-     *   data: "...",             // Optional Base64 encoded image data
-     *   width:1024, height:768,  // Dimensions of the image data, required
-     *                            // if data != null
-     *   filename: "...",         // If set, clicking the image will open the
-     *                            // folder containing the given file
-     *   href: "...",             // If set, clicking the image will open the
-     *                            // link in a new tab
-     * }
-     */
-    item: "converter",
-    from: "imageSummary",
-    to: "dom",
-    exec: function(imageSummary, context) {
-      const document = context.document;
-      const root = document.createElement("div");
-
-      // Add a line to the result for each destination
-      imageSummary.destinations.forEach(destination => {
-        const title = document.createElement("div");
-        title.textContent = destination;
-        root.appendChild(title);
-      });
-
-      // Add the thumbnail image
-      if (imageSummary.data != null) {
-        const image = context.document.createElement("div");
-        const previewHeight = parseInt(256 * imageSummary.height / imageSummary.width);
-        const style = "" +
-            "width: 256px;" +
-            "height: " + previewHeight + "px;" +
-            "max-height: 256px;" +
-            "background-image: url('" + imageSummary.data + "');" +
-            "background-size: 256px " + previewHeight + "px;" +
-            "margin: 4px;" +
-            "display: block;";
-        image.setAttribute("style", style);
-        root.appendChild(image);
-      }
-
-      // Click handler
-      if (imageSummary.filename) {
-        root.style.cursor = "pointer";
-        root.addEventListener("click", () => {
-          if (imageSummary.filename) {
-            const file = Cc["@mozilla.org/file/local;1"].createInstance(Ci.nsILocalFile);
-            file.initWithPath(imageSummary.filename);
-            file.reveal();
-          }
-        });
-      }
-
-      return root;
-    }
-  },
-  {
-    item: "command",
-    runAt: "client",
     name: "screenshot",
-    description: l10n.lookup("screenshotDesc"),
-    manual: l10n.lookup("screenshotManual"),
-    returnType: "imageSummary",
+    description: gcli.lookup("screenshotDesc"),
+    manual: gcli.lookup("screenshotManual"),
+    returnType: "dom",
     buttonId: "command-button-screenshot",
     buttonClass: "command-button command-button-invertable",
-    tooltipText: l10n.lookup("screenshotTooltip"),
+    tooltipText: gcli.lookup("screenshotTooltip"),
     params: [
-      filenameParam,
-      standardParams,
       {
-        group: l10n.lookup("screenshotAdvancedOptions"),
+        name: "filename",
+        type: "string",
+        defaultValue: FILENAME_DEFAULT_VALUE,
+        description: gcli.lookup("screenshotFilenameDesc"),
+        manual: gcli.lookup("screenshotFilenameManual")
+      },
+      {
+        group: gcli.lookup("screenshotGroupOptions"),
         params: [
           {
+            name: "clipboard",
+            type: "boolean",
+            description: gcli.lookup("screenshotClipboardDesc"),
+            manual: gcli.lookup("screenshotClipboardManual")
+          },
+          {
             name: "chrome",
             type: "boolean",
-            description: l10n.lookupFormat("screenshotChromeDesc2", [BRAND_SHORT_NAME]),
-            manual: l10n.lookupFormat("screenshotChromeManual2", [BRAND_SHORT_NAME])
+            description: gcli.lookupFormat("screenshotChromeDesc2", [BRAND_SHORT_NAME]),
+            manual: gcli.lookupFormat("screenshotChromeManual2", [BRAND_SHORT_NAME])
           },
+          {
+            name: "delay",
+            type: { name: "number", min: 0 },
+            defaultValue: 0,
+            description: gcli.lookup("screenshotDelayDesc"),
+            manual: gcli.lookup("screenshotDelayManual")
+          },
+          {
+            name: "fullpage",
+            type: "boolean",
+            description: gcli.lookup("screenshotFullPageDesc"),
+            manual: gcli.lookup("screenshotFullPageManual")
+          },
+          {
+            name: "selector",
+            type: "node",
+            defaultValue: null,
+            description: gcli.lookup("inspectNodeDesc"),
+            manual: gcli.lookup("inspectNodeManual")
+          }
         ]
-      },
+      }
     ],
     exec: function(args, context) {
       if (args.chrome && args.selector) {
         // Node screenshot with chrome option does not work as intended
         // Refer https://bugzilla.mozilla.org/show_bug.cgi?id=659268#c7
         // throwing for now.
-        throw new Error(l10n.lookup("screenshotSelectorChromeConflict"));
+        throw new Error(gcli.lookup("screenshotSelectorChromeConflict"));
+      }
+      var document = args.chrome? context.environment.chromeDocument
+                                : context.environment.document;
+      if (args.delay > 0) {
+        var deferred = context.defer();
+        document.defaultView.setTimeout(() => {
+          this.grabScreen(document, args.filename, args.clipboard,
+                          args.fullpage).then(deferred.resolve, deferred.reject);
+        }, args.delay * 1000);
+        return deferred.promise;
       }
 
-      if (!args.chrome) {
-        // Re-execute the command on the server
-        const command = context.typed.replace(/^screenshot/, "screenshot_server");
-        return context.updateExec(command).then(output => {
-          return output.error ? Promise.reject(output.data) : output.data;
+      return this.grabScreen(document, args.filename, args.clipboard,
+                             args.fullpage, args.selector);
+    },
+    grabScreen: function(document, filename, clipboard, fullpage, node) {
+      return Task.spawn(function() {
+        let window = document.defaultView;
+        let canvas = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
+        let left = 0;
+        let top = 0;
+        let width;
+        let height;
+        let div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
+        let currentX = window.scrollX;
+        let currentY = window.scrollY;
+
+        if (fullpage) {
+          // Bug 961832: GCLI screenshot shows fixed position element in wrong
+          // position if we don't scroll to top
+          window.scrollTo(0,0);
+          width = window.innerWidth + window.scrollMaxX;
+          height = window.innerHeight + window.scrollMaxY;
+        } else if (node) {
+          let lh = new LayoutHelpers(window);
+          let rect = lh.getRect(node, window);
+          top = rect.top;
+          left = rect.left;
+          width = rect.width;
+          height = rect.height;
+        } else {
+          left = window.scrollX;
+          top = window.scrollY;
+          width = window.innerWidth;
+          height = window.innerHeight;
+        }
+
+        let winUtils = window.QueryInterface(Ci.nsIInterfaceRequestor)
+                             .getInterface(Ci.nsIDOMWindowUtils);
+        let scrollbarHeight = {};
+        let scrollbarWidth = {};
+        winUtils.getScrollbarSize(false, scrollbarWidth, scrollbarHeight);
+        width -= scrollbarWidth.value;
+        height -= scrollbarHeight.value;
+
+        canvas.width = width;
+        canvas.height = height;
+        let ctx = canvas.getContext("2d");
+        ctx.drawWindow(window, left, top, width, height, "#fff");
+        let data = canvas.toDataURL("image/png", "");
+
+        if(fullpage) {
+          window.scrollTo(currentX, currentY);
+        }
+
+        let loadContext = document.defaultView
+                                  .QueryInterface(Ci.nsIInterfaceRequestor)
+                                  .getInterface(Ci.nsIWebNavigation)
+                                  .QueryInterface(Ci.nsILoadContext);
+
+        if (clipboard) {
+          try {
+            let io = Cc["@mozilla.org/network/io-service;1"]
+                      .getService(Ci.nsIIOService);
+            let channel = io.newChannel2(data,
+                                         null,
+                                         null,
+                                         null,      // aLoadingNode
+                                         Services.scriptSecurityManager.getSystemPrincipal(),
+                                         null,      // aTriggeringPrincipal
+                                         Ci.nsILoadInfo.SEC_NORMAL,
+                                         Ci.nsIContentPolicy.TYPE_IMAGE);
+            let input = channel.open();
+            let imgTools = Cc["@mozilla.org/image/tools;1"]
+                            .getService(Ci.imgITools);
+
+            let container = {};
+            imgTools.decodeImageData(input, channel.contentType, container);
+
+            let wrapped = Cc["@mozilla.org/supports-interface-pointer;1"]
+                            .createInstance(Ci.nsISupportsInterfacePointer);
+            wrapped.data = container.value;
+
+            let trans = Cc["@mozilla.org/widget/transferable;1"]
+                          .createInstance(Ci.nsITransferable);
+            trans.init(loadContext);
+            trans.addDataFlavor(channel.contentType);
+            trans.setTransferData(channel.contentType, wrapped, -1);
+
+            let clipid = Ci.nsIClipboard;
+            let clip = Cc["@mozilla.org/widget/clipboard;1"].getService(clipid);
+            clip.setData(trans, null, clipid.kGlobalClipboard);
+            div.textContent = gcli.lookup("screenshotCopied");
+          }
+          catch (ex) {
+            div.textContent = gcli.lookup("screenshotErrorCopying");
+          }
+          throw new Task.Result(div);
+        }
+
+        let file = Cc["@mozilla.org/file/local;1"].createInstance(Ci.nsILocalFile);
+
+        // Create a name for the file if not present
+        if (filename == FILENAME_DEFAULT_VALUE) {
+          let date = new Date();
+          let dateString = date.getFullYear() + "-" + (date.getMonth() + 1) +
+                          "-" + date.getDate();
+          dateString = dateString.split("-").map(function(part) {
+            if (part.length == 1) {
+              part = "0" + part;
+            }
+            return part;
+          }).join("-");
+          let timeString = date.toTimeString().replace(/:/g, ".").split(" ")[0];
+          filename = gcli.lookupFormat("screenshotGeneratedFilename",
+                                      [dateString, timeString]) + ".png";
+        }
+        // Check there is a .png extension to filename
+        else if (!filename.match(/.png$/i)) {
+          filename += ".png";
+        }
+        // If the filename is relative, tack it onto the download directory
+        if (!filename.match(/[\\\/]/)) {
+          let preferredDir = yield Downloads.getPreferredDownloadsDirectory();
+          filename = OS.Path.join(preferredDir, filename);
+        }
+
+        try {
+          file.initWithPath(filename);
+        } catch (ex) {
+          div.textContent = gcli.lookup("screenshotErrorSavingToFile") + " " + filename;
+          throw new Task.Result(div);
+        }
+
+        let ioService = Cc["@mozilla.org/network/io-service;1"]
+                          .getService(Ci.nsIIOService);
+
+        let Persist = Ci.nsIWebBrowserPersist;
+        let persist = Cc["@mozilla.org/embedding/browser/nsWebBrowserPersist;1"]
+                        .createInstance(Persist);
+        persist.persistFlags = Persist.PERSIST_FLAGS_REPLACE_EXISTING_FILES |
+                               Persist.PERSIST_FLAGS_AUTODETECT_APPLY_CONVERSION;
+
+        let source = ioService.newURI(data, "UTF8", null);
+        persist.saveURI(source, null, null, 0, null, null, file, loadContext);
+
+        div.textContent = gcli.lookup("screenshotSavedToFile") + " \"" + filename +
+                          "\"";
+        div.addEventListener("click", function openFile() {
+          div.removeEventListener("click", openFile);
+          file.reveal();
         });
-      }
-
-      return processScreenshot(args, context.environment.chromeDocument);
-    },
-  },
-  {
-    item: "command",
-    runAt: "server",
-    name: "screenshot_server",
-    hidden: true,
-    returnType: "imageSummary",
-    params: [ filenameParam, standardParams ],
-    exec: function(args, context) {
-      return processScreenshot(args, context.environment.document);
-    },
+        div.style.cursor = "pointer";
+        let image = document.createElement("div");
+        let previewHeight = parseInt(256*height/width);
+        image.setAttribute("style",
+                          "width:256px; height:" + previewHeight + "px;" +
+                          "max-height: 256px;" +
+                          "background-image: url('" + data + "');" +
+                          "background-size: 256px " + previewHeight + "px;" +
+                          "margin: 4px; display: block");
+        div.appendChild(image);
+        throw new Task.Result(div);
+      });
+    }
   }
 ];
-
-/**
- * This function simply handles the --delay argument before calling
- * processScreenshotNow
- */
-function processScreenshot(args, document) {
-  if (args.delay > 0) {
-    return new Promise((resolve, reject) => {
-      document.defaultView.setTimeout(() => {
-        processScreenshotNow(args, document).then(resolve, reject);
-      }, args.delay * 1000);
-    });
-  }
-  else {
-    return processScreenshotNow(args, document);
-  }
-}
-
-/**
- * There are several possible destinations for the screenshot, SKIP is used
- * in processScreenshotNow() whenever one of them is not used
- */
-const SKIP = Promise.resolve();
-
-/**
- * This is just like exec, except the 'delay' has been handled already so
- * this is where we do that actual work of process the screenshot
- */
-function processScreenshotNow(args, document) {
-  const reply = createScreenshotData(document, args);
-
-  const loadContext = document.defaultView
-                            .QueryInterface(Ci.nsIInterfaceRequestor)
-                            .getInterface(Ci.nsIWebNavigation)
-                            .QueryInterface(Ci.nsILoadContext);
-
-  const fileNeeded = args.filename != FILENAME_DEFAULT_VALUE ||
-                      (!args.imgur && !args.clipboard);
-
-  return Promise.all([
-    args.clipboard ? saveToClipboard(loadContext, reply) : SKIP,
-    args.imgur     ? uploadToImgur(reply)                : SKIP,
-    fileNeeded     ? saveToFile(loadContext, reply)      : SKIP,
-  ]).then(() => reply);
-}
-
-/**
- * This does the dirty work of creating a base64 string out of an
- * area of the browser window
- */
-function createScreenshotData(document, args) {
-  const window = document.defaultView;
-  let left = 0;
-  let top = 0;
-  let width;
-  let height;
-  const currentX = window.scrollX;
-  const currentY = window.scrollY;
-
-  if (args.fullpage) {
-    // Bug 961832: GCLI screenshot shows fixed position element in wrong
-    // position if we don't scroll to top
-    window.scrollTo(0,0);
-    width = window.innerWidth + window.scrollMaxX;
-    height = window.innerHeight + window.scrollMaxY;
-  }
-  else if (args.selector) {
-    const lh = new LayoutHelpers(window);
-    ({ top, left, width, height }) = lh.getRect(args.selector, window);
-  }
-  else {
-    left = window.scrollX;
-    top = window.scrollY;
-    width = window.innerWidth;
-    height = window.innerHeight;
-  }
-
-  const winUtils = window.QueryInterface(Ci.nsIInterfaceRequestor)
-                       .getInterface(Ci.nsIDOMWindowUtils);
-  const scrollbarHeight = {};
-  const scrollbarWidth = {};
-  winUtils.getScrollbarSize(false, scrollbarWidth, scrollbarHeight);
-  width -= scrollbarWidth.value;
-  height -= scrollbarHeight.value;
-
-  const canvas = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
-  canvas.width = width;
-  canvas.height = height;
-  const ctx = canvas.getContext("2d");
-  ctx.drawWindow(window, left, top, width, height, "#fff");
-  const data = canvas.toDataURL("image/png", "");
-
-  // See comment above on bug 961832
-  if (args.fullpage) {
-    window.scrollTo(currentX, currentY);
-  }
-
-  return {
-    destinations: [],
-    data: data,
-    height: height,
-    width: width,
-    filename: getFilename(args.filename),
-  };
-}
-
-/**
- * We may have a filename specified in args, or we might have to generate
- * one.
- */
-function getFilename(defaultName) {
-  // Create a name for the file if not present
-  if (defaultName != FILENAME_DEFAULT_VALUE) {
-    return defaultName;
-  }
-
-  const date = new Date();
-  let dateString = date.getFullYear() + "-" + (date.getMonth() + 1) +
-                  "-" + date.getDate();
-  dateString = dateString.split("-").map(function(part) {
-    if (part.length == 1) {
-      part = "0" + part;
-    }
-    return part;
-  }).join("-");
-
-  const timeString = date.toTimeString().replace(/:/g, ".").split(" ")[0];
-  return l10n.lookupFormat("screenshotGeneratedFilename",
-                           [ dateString, timeString ]) + ".png";
-}
-
-/**
- * Save the image data to the clipboard. This returns a promise, so it can
- * be treated exactly like imgur / file processing, but it's really sync
- * for now.
- */
-function saveToClipboard(loadContext, reply) {
-  try {
-    const io = Cc["@mozilla.org/network/io-service;1"]
-                  .getService(Ci.nsIIOService);
-    const channel = io.newChannel2(reply.data, null, null,
-                                   null,      // aLoadingNode
-                                   Services.scriptSecurityManager.getSystemPrincipal(),
-                                   null,      // aTriggeringPrincipal
-                                   Ci.nsILoadInfo.SEC_NORMAL,
-                                   Ci.nsIContentPolicy.TYPE_IMAGE);
-    const input = channel.open();
-    const imgTools = Cc["@mozilla.org/image/tools;1"]
-                        .getService(Ci.imgITools);
-
-    const container = {};
-    imgTools.decodeImageData(input, channel.contentType, container);
-
-    const wrapped = Cc["@mozilla.org/supports-interface-pointer;1"]
-                      .createInstance(Ci.nsISupportsInterfacePointer);
-    wrapped.data = container.value;
-
-    const trans = Cc["@mozilla.org/widget/transferable;1"]
-                    .createInstance(Ci.nsITransferable);
-    trans.init(loadContext);
-    trans.addDataFlavor(channel.contentType);
-    trans.setTransferData(channel.contentType, wrapped, -1);
-
-    const clip = Cc["@mozilla.org/widget/clipboard;1"]
-                    .getService(Ci.nsIClipboard);
-    clip.setData(trans, null, Ci.nsIClipboard.kGlobalClipboard);
-
-    reply.destinations.push(l10n.lookup("screenshotCopied"));
-  }
-  catch (ex) {
-    console.error(ex);
-    reply.destinations.push(l10n.lookup("screenshotErrorCopying"));
-  }
-
-  return Promise.resolve();
-}
-
-/**
- * Upload screenshot data to Imgur, returning a promise of a URL (as a string)
- */
-function uploadToImgur(reply) {
-  return new Promise((resolve, reject) => {
-    const xhr = Cc["@mozilla.org/xmlextras/xmlhttprequest;1"]
-                  .createInstance(Ci.nsIXMLHttpRequest);
-    const fd = Cc["@mozilla.org/files/formdata;1"]
-                  .createInstance(Ci.nsIDOMFormData);
-    fd.append("image", reply.data.split(",")[1]);
-    fd.append("type", "base64");
-    fd.append("title", reply.filename);
-
-    const postURL = Services.prefs.getCharPref("devtools.gcli.imgurUploadURL");
-    const clientID = "Client-ID " + Services.prefs.getCharPref("devtools.gcli.imgurClientID");
-
-    xhr.open("POST", postURL);
-    xhr.setRequestHeader("Authorization", clientID);
-    xhr.send(fd);
-    xhr.responseType = "json";
-
-    xhr.onreadystatechange = function() {
-      if (xhr.readyState == 4) {
-        if (xhr.status == 200) {
-          reply.href = xhr.response.data.link;
-          reply.destinations.push(l10n.lookupFormat("screenshotImgurError",
-                                                    [ reply.href ]));
-        }
-        else {
-          reply.destinations.push(l10n.lookup("screenshotImgurError"));
-        }
-
-        resolve();
-      }
-    }
-  });
-}
-
-/**
- * Save the screenshot data to disk, returning a promise which
- * is resolved on completion
- */
-function saveToFile(loadContext, reply) {
-  return Task.spawn(function*() {
-    try {
-      let filename = reply.filename;
-      // Check there is a .png extension to filename
-      if (!filename.match(/.png$/i)) {
-        filename += ".png";
-      }
-
-      // If the filename is relative, tack it onto the download directory
-      if (!filename.match(/[\\\/]/)) {
-        const preferredDir = yield Downloads.getPreferredDownloadsDirectory();
-        filename = OS.Path.join(preferredDir, filename);
-        reply.filename = filename;
-      }
-
-      const file = Cc["@mozilla.org/file/local;1"].createInstance(Ci.nsILocalFile);
-      file.initWithPath(filename);
-
-      const ioService = Cc["@mozilla.org/network/io-service;1"]
-                        .getService(Ci.nsIIOService);
-
-      const Persist = Ci.nsIWebBrowserPersist;
-      const persist = Cc["@mozilla.org/embedding/browser/nsWebBrowserPersist;1"]
-                      .createInstance(Persist);
-      persist.persistFlags = Persist.PERSIST_FLAGS_REPLACE_EXISTING_FILES |
-                             Persist.PERSIST_FLAGS_AUTODETECT_APPLY_CONVERSION;
-
-      // TODO: UTF8? For an image?
-      const source = ioService.newURI(reply.data, "UTF8", null);
-      persist.saveURI(source, null, null, 0, null, null, file, loadContext);
-
-      reply.destinations.push(l10n.lookup("screenshotSavedToFile") + " \"" + filename + "\"");
-    }
-    catch (ex) {
-      console.error(ex);
-      reply.destinations.push(l10n.lookup("screenshotErrorSavingToFile") + " " + filename);
-    }
-  });
-}
diff --git a/toolkit/devtools/gcli/commands/tools.js b/toolkit/devtools/gcli/commands/tools.js
--- a/toolkit/devtools/gcli/commands/tools.js
+++ b/toolkit/devtools/gcli/commands/tools.js
@@ -4,91 +4,84 @@
 
 "use strict";
 
 const { Cc, Ci, Cu } = require("chrome");
 const Services = require("Services");
 const { OS } = require("resource://gre/modules/osfile.jsm");
 const { devtools } = require("resource://gre/modules/devtools/Loader.jsm");
 const gcli = require("gcli/index");
-const l10n = require("gcli/l10n");
 
 const BRAND_SHORT_NAME = Cc["@mozilla.org/intl/stringbundle;1"]
                            .getService(Ci.nsIStringBundleService)
                            .createBundle("chrome://branding/locale/brand.properties")
                            .GetStringFromName("brandShortName");
 
 exports.items = [
   {
     name: "tools",
-    description: l10n.lookupFormat("toolsDesc2", [ BRAND_SHORT_NAME ]),
-    manual: l10n.lookupFormat("toolsManual2", [ BRAND_SHORT_NAME ]),
+    description: gcli.lookupFormat("toolsDesc2", [ BRAND_SHORT_NAME ]),
+    manual: gcli.lookupFormat("toolsManual2", [ BRAND_SHORT_NAME ]),
     get hidden() gcli.hiddenByChromePref(),
   },
   {
-    item: "command",
-    runAt: "client",
     name: "tools srcdir",
-    description: l10n.lookup("toolsSrcdirDesc"),
-    manual: l10n.lookupFormat("toolsSrcdirManual2", [ BRAND_SHORT_NAME ]),
+    description: gcli.lookup("toolsSrcdirDesc"),
+    manual: gcli.lookupFormat("toolsSrcdirManual2", [ BRAND_SHORT_NAME ]),
     get hidden() gcli.hiddenByChromePref(),
     params: [
       {
         name: "srcdir",
         type: "string" /* {
           name: "file",
           filetype: "directory",
           existing: "yes"
         } */,
-        description: l10n.lookup("toolsSrcdirDir")
+        description: gcli.lookup("toolsSrcdirDir")
       }
     ],
     returnType: "string",
     exec: function(args, context) {
       let clobber = OS.Path.join(args.srcdir, "CLOBBER");
       return OS.File.exists(clobber).then(function(exists) {
         if (exists) {
           let str = Cc["@mozilla.org/supports-string;1"]
                       .createInstance(Ci.nsISupportsString);
           str.data = args.srcdir;
           Services.prefs.setComplexValue("devtools.loader.srcdir",
                                          Ci.nsISupportsString, str);
           devtools.reload();
 
-          let msg = l10n.lookupFormat("toolsSrcdirReloaded", [ args.srcdir ]);
+          let msg = gcli.lookupFormat("toolsSrcdirReloaded", [ args.srcdir ]);
           throw new Error(msg);
         }
 
-        return l10n.lookupFormat("toolsSrcdirNotFound", [ args.srcdir ]);
+        return gcli.lookupFormat("toolsSrcdirNotFound", [ args.srcdir ]);
       });
     }
   },
   {
-    item: "command",
-    runAt: "client",
     name: "tools builtin",
-    description: l10n.lookup("toolsBuiltinDesc"),
-    manual: l10n.lookup("toolsBuiltinManual"),
+    description: gcli.lookup("toolsBuiltinDesc"),
+    manual: gcli.lookup("toolsBuiltinManual"),
     get hidden() gcli.hiddenByChromePref(),
     returnType: "string",
     exec: function(args, context) {
       Services.prefs.clearUserPref("devtools.loader.srcdir");
       devtools.reload();
-      return l10n.lookup("toolsBuiltinReloaded");
+      return gcli.lookup("toolsBuiltinReloaded");
     }
   },
   {
-    item: "command",
-    runAt: "client",
     name: "tools reload",
-    description: l10n.lookup("toolsReloadDesc"),
+    description: gcli.lookup("toolsReloadDesc"),
     get hidden() {
       return gcli.hiddenByChromePref() ||
              !Services.prefs.prefHasUserValue("devtools.loader.srcdir");
     },
 
     returnType: "string",
     exec: function(args, context) {
       devtools.reload();
-      return l10n.lookup("toolsReloaded2");
+      return gcli.lookup("toolsReloaded2");
     }
   }
 ];
diff --git a/toolkit/devtools/gcli/moz.build b/toolkit/devtools/gcli/moz.build
--- a/toolkit/devtools/gcli/moz.build
+++ b/toolkit/devtools/gcli/moz.build
@@ -38,16 +38,20 @@ EXTRA_JS_MODULES.devtools.gcli.commands 
     'source/lib/gcli/commands/mocks.js',
     'source/lib/gcli/commands/pref.js',
     'source/lib/gcli/commands/preflist.js',
     'source/lib/gcli/commands/test.js',
 ]
 
 EXTRA_JS_MODULES.devtools.gcli.connectors += [
     'source/lib/gcli/connectors/connectors.js',
+    'source/lib/gcli/connectors/index.js',
+    'source/lib/gcli/connectors/protocol.js',
+    'source/lib/gcli/connectors/rdp.js',
+    'source/lib/gcli/connectors/remoted.js',
 ]
 
 EXTRA_JS_MODULES.devtools.gcli.converters += [
     'source/lib/gcli/converters/basic.js',
     'source/lib/gcli/converters/converters.js',
     'source/lib/gcli/converters/html.js',
     'source/lib/gcli/converters/terminal.js',
 ]
@@ -62,16 +66,17 @@ EXTRA_JS_MODULES.devtools.gcli.languages
     'source/lib/gcli/languages/command.html',
     'source/lib/gcli/languages/command.js',
     'source/lib/gcli/languages/javascript.js',
     'source/lib/gcli/languages/languages.js',
 ]
 
 EXTRA_JS_MODULES.devtools.gcli.mozui += [
     'source/lib/gcli/mozui/completer.js',
+    'source/lib/gcli/mozui/ffdisplay.js',
     'source/lib/gcli/mozui/inputter.js',
     'source/lib/gcli/mozui/tooltip.js',
 ]
 
 EXTRA_JS_MODULES.devtools.gcli.types += [
     'source/lib/gcli/types/array.js',
     'source/lib/gcli/types/boolean.js',
     'source/lib/gcli/types/command.js',
@@ -110,19 +115,19 @@ EXTRA_JS_MODULES.devtools.gcli.util += [
     'source/lib/gcli/util/legacy.js',
     'source/lib/gcli/util/prism.js',
     'source/lib/gcli/util/promise.js',
     'source/lib/gcli/util/spell.js',
     'source/lib/gcli/util/util.js',
 ]
 
 EXTRA_JS_MODULES.devtools.gcli += [
+    'source/lib/gcli/api.js',
     'source/lib/gcli/cli.js',
     'source/lib/gcli/index.js',
     'source/lib/gcli/l10n.js',
     'source/lib/gcli/settings.js',
-    'source/lib/gcli/system.js',
 ]
 
 EXTRA_JS_MODULES.devtools += [
     'gcli.jsm',
     'Templater.jsm',
 ]
diff --git a/toolkit/devtools/gcli/source/docs/writing-commands.md b/toolkit/devtools/gcli/source/docs/writing-commands.md
--- a/toolkit/devtools/gcli/source/docs/writing-commands.md
+++ b/toolkit/devtools/gcli/source/docs/writing-commands.md
@@ -84,18 +84,17 @@ when you call a function, you pass 'argu
 There are several ways that GCLI commands can be localized. The best method
 depends on what context you are writing your command for.
 
 ### Firefox Embedding
 
 GCLI supports Mozilla style localization. To add a command that will only ever
 be used embedded in Firefox, this is the way to go. Your strings should be
 stored in ``browser/locales/en-US/chrome/browser/devtools/gclicommands.properties``,
-And you should access them using ``let l10n = require("gcli/l10n")`` and then
-``l10n.lookup(...)`` or ``l10n.lookupFormat()``
+And you should access them using ``gcli.lookup(...)`` or ``gcli.lookupFormat()``
 
 For examples of existing commands, take a look in
 ``browser/devtools/webconsole/GcliCommands.jsm``, which contains most of the
 current GCLI commands. If you will be adding a number of new commands, then
 consider starting a new JSM.
 
 Your command will then look something like this:
 
diff --git a/toolkit/devtools/gcli/source/docs/writing-types.md b/toolkit/devtools/gcli/source/docs/writing-types.md
--- a/toolkit/devtools/gcli/source/docs/writing-types.md
+++ b/toolkit/devtools/gcli/source/docs/writing-types.md
@@ -2,17 +2,17 @@
 # Writing Types
 
 Commands are a fundamental building block because they are what the users
 directly interacts with, however they are built on ``Type``s. There are a
 number of built in types:
 
 * string. This is a JavaScript string
 * number. A JavaScript number
-* boolean. A JavaScript boolean
+* boolean. A Javascript boolean
 * selection. This is an selection from a number of alternatives
 * delegate. This type could change depending on other factors, but is well
   defined when one of the conversion routines is called.
 
 There are a number of additional types defined by Pilot and GCLI as
 extensions to the ``selection`` and ``delegate`` types
 
 * setting. One of the defined settings
@@ -44,20 +44,20 @@ All types must inherit from Type and hav
      * called. The name alone is not enough to fully specify a type. Types like
      * 'selection' and 'delegate' need extra data, however this function returns
      * only the name, not the extra data.
      * <p>In old bespin, equality was based on the name. This may turn out to be
      * important in Ace too.
      */
     name: 'example',
 
-In addition, defining the following function can be helpful, although Type
+In addition, defining the following functions can be helpful, although Type
 contains default implementations:
-
-* nudge(value, by)
+* increment(value)
+* decrement(value)
 
 Type, Conversion and Status are all declared by commands.js.
 
 The values produced by the parse function can be of any type, but if you are
 producing your own, you are strongly encouraged to include properties called
 ``name`` and ``description`` where it makes sense. There are a number of
 places in GCLI where the UI will be able to provide better help to users if
 your values include these properties.
diff --git a/toolkit/devtools/gcli/source/lib/gcli/api.js b/toolkit/devtools/gcli/source/lib/gcli/api.js
new file mode 100644
--- /dev/null
+++ b/toolkit/devtools/gcli/source/lib/gcli/api.js
@@ -0,0 +1,217 @@
+/*
+ * Copyright 2012, Mozilla Foundation and contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+'use strict';
+
+var Promise = require('./util/promise').Promise;
+var Commands = require('./commands/commands').Commands;
+var Connectors = require('./connectors/connectors').Connectors;
+var Converters = require('./converters/converters').Converters;
+var Fields = require('./fields/fields').Fields;
+var Languages = require('./languages/languages').Languages;
+var Settings = require('./settings').Settings;
+var Types = require('./types/types').Types;
+
+/**
+ * This is the heart of the API that we expose to the outside
+ */
+exports.createSystem = function() {
+
+  var components = {
+    connector: new Connectors(),
+    converter: new Converters(),
+    field: new Fields(),
+    language: new Languages(),
+    type: new Types()
+  };
+  components.setting = new Settings(components.type);
+  components.command = new Commands(components.type);
+
+  var getItemType = function(item) {
+    if (item.item) {
+      return item.item;
+    }
+    // Some items are registered using the constructor so we need to check
+    // the prototype for the the type of the item
+    return (item.prototype && item.prototype.item) ?
+           item.prototype.item : 'command';
+  };
+
+  var addItem = function(item) {
+    components[getItemType(item)].add(item);
+  };
+
+  var removeItem = function(item) {
+    components[getItemType(item)].remove(item);
+  };
+
+  /**
+   * loadableModules is a lookup of names to module loader functions (like
+   * the venerable 'require') to which we can pass a name and get back a
+   * JS object (or a promise of a JS object). This allows us to have custom
+   * loaders to get stuff from the filesystem etc.
+   */
+  var loadableModules = {};
+
+  /**
+   * loadedModules is a lookup by name of the things returned by the functions
+   * in loadableModules so we can track what we need to unload / reload.
+   */
+  var loadedModules = {};
+
+  var unloadModule = function(name) {
+    var existingModule = loadedModules[name];
+    if (existingModule != null) {
+      existingModule.items.forEach(removeItem);
+    }
+    delete loadedModules[name];
+  };
+
+  var loadModule = function(name) {
+    var existingModule = loadedModules[name];
+    unloadModule(name);
+
+    // And load the new items
+    try {
+      var loader = loadableModules[name];
+      return Promise.resolve(loader(name)).then(function(newModule) {
+        if (existingModule === newModule) {
+          return;
+        }
+
+        if (newModule == null) {
+          throw 'Module \'' + name + '\' not found';
+        }
+
+        if (newModule.items == null || typeof newModule.items.forEach !== 'function') {
+          console.log('Exported properties: ' + Object.keys(newModule).join(', '));
+          throw 'Module \'' + name + '\' has no \'items\' array export';
+        }
+
+        newModule.items.forEach(addItem);
+
+        loadedModules[name] = newModule;
+      });
+    }
+    catch (ex) {
+      console.error(ex);
+      return Promise.reject('Failure when loading \'' + name + '\'');
+    }
+  };
+
+  var pendingChanges = false;
+
+  var api = {
+    addItems: function(items) {
+      items.forEach(addItem);
+    },
+
+    removeItems: function(items) {
+      items.forEach(removeItem);
+    },
+
+    addItemsByModule: function(names, options) {
+      options = options || {};
+      if (typeof names === 'string') {
+        names = [ names ];
+      }
+      names.forEach(function(name) {
+        if (options.loader == null) {
+          options.loader = function(name) {
+            return require(name);
+          };
+        }
+        loadableModules[name] = options.loader;
+
+        if (options.delayedLoad) {
+          pendingChanges = true;
+        }
+        else {
+          loadModule(name).then(null, console.error);
+        }
+      });
+    },
+
+    removeItemsByModule: function(name) {
+      delete loadableModules[name];
+      unloadModule(name);
+    },
+
+    load: function() {
+      if (!pendingChanges) {
+        return Promise.resolve();
+      }
+
+      // clone loadedModules, so we can remove what is left at the end
+      var modules = Object.keys(loadedModules).map(function(name) {
+        return loadedModules[name];
+      });
+
+      var promises = Object.keys(loadableModules).map(function(name) {
+        delete modules[name];
+        return loadModule(name);
+      });
+
+      Object.keys(modules).forEach(unloadModule);
+      pendingChanges = false;
+
+      return Promise.all(promises);
+    }
+  };
+
+  Object.defineProperty(api, 'commands', {
+    get: function() { return components.command; },
+    set: function(commands) { components.command = commands; },
+    enumerable: true
+  });
+
+  Object.defineProperty(api, 'connectors', {
+    get: function() { return components.connector; },
+    enumerable: true
+  });
+
+  Object.defineProperty(api, 'converters', {
+    get: function() { return components.converter; },
+    enumerable: true
+  });
+
+  Object.defineProperty(api, 'fields', {
+    get: function() { return components.field; },
+    enumerable: true
+  });
+
+  Object.defineProperty(api, 'languages', {
+    get: function() { return components.language; },
+    enumerable: true
+  });
+
+  Object.defineProperty(api, 'settings', {
+    get: function() { return components.setting; },
+    enumerable: true
+  });
+
+  Object.defineProperty(api, 'types', {
+    get: function() { return components.type; },
+    set: function(types) {
+      components.type = types;
+      components.command.types = types;
+      components.setting.types = types;
+    },
+    enumerable: true
+  });
+
+  return api;
+};
diff --git a/toolkit/devtools/gcli/source/lib/gcli/cli.js b/toolkit/devtools/gcli/source/lib/gcli/cli.js
--- a/toolkit/devtools/gcli/source/lib/gcli/cli.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/cli.js
@@ -96,16 +96,26 @@ var addMapping = function(requisition) {
  * Remove a requisition context->terminal mapping
  */
 var removeMapping = function(requisition) {
   var index = instanceIndex(requisition.conversionContext);
   instances.splice(index, 1);
 };
 
 /**
+ * Some manual intervention is needed in parsing the { command.
+ */
+function getEvalCommand(commands) {
+  if (getEvalCommand._cmd == null) {
+    getEvalCommand._cmd = commands.get(evalCmd.name);
+  }
+  return getEvalCommand._cmd;
+}
+
+/**
  * Assignment is a link between a parameter and the data for that parameter.
  * The data for the parameter is available as in the preferred type and as
  * an Argument for the CLI.
  * <p>We also record validity information where applicable.
  * <p>For values, null and undefined have distinct definitions. null means
  * that a value has been provided, undefined means that it has not.
  * Thus, null is a valid default value, and common because it identifies an
  * parameter that is optional. undefined means there is no value from
@@ -303,17 +313,17 @@ var evalCmd = {
     }
   ],
   hidden: true,
   description: { key: 'cliEvalJavascript' },
   exec: function(args, context) {
     var reply = customEval(args.javascript);
     return context.typedData(typeof reply, reply);
   },
-  isCommandRegexp: /^\s*\{\s*/
+  isCommandRegexp: /^\s*{\s*/
 };
 
 exports.items = [ evalCmd ];
 
 /**
  * This is a special assignment to reflect the command itself.
  */
 function CommandAssignment(requisition) {
@@ -570,22 +580,21 @@ Object.defineProperty(Requisition.protot
         get: function() { return requisition.shell; },
         enumerable: true
       });
       Object.defineProperty(this._executionContext, 'system', {
         get: function() { return requisition.system; },
         enumerable: true
       });
 
-      this._executionContext.updateExec = this._contextUpdateExec.bind(this);
-
       if (legacy) {
         this._executionContext.createView = view.createView;
         this._executionContext.exec = this.exec.bind(this);
         this._executionContext.update = this._contextUpdate.bind(this);
+        this._executionContext.updateExec = this._contextUpdateExec.bind(this);
 
         Object.defineProperty(this._executionContext, 'document', {
           get: function() { return requisition.document; },
           enumerable: true
         });
       }
     }
 
@@ -655,17 +664,17 @@ Requisition.prototype.getParameterNames 
 /**
  * The overall status is the most severe status.
  * There is no such thing as an INCOMPLETE overall status because the
  * definition of INCOMPLETE takes into account the cursor position to say 'this
  * isn't quite ERROR because the user can fix it by typing', however overall,
  * this is still an error status.
  */
 Object.defineProperty(Requisition.prototype, 'status', {
-  get: function() {
+  get : function() {
     var status = Status.VALID;
     if (this._unassigned.length !== 0) {
       var isAllIncomplete = true;
       this._unassigned.forEach(function(assignment) {
         if (!assignment.param.type.isIncompleteName) {
           isAllIncomplete = false;
         }
       });
@@ -690,18 +699,17 @@ Object.defineProperty(Requisition.protot
  * If ``requisition.status != VALID`` message then return a string which
  * best describes what is wrong. Generally error messages are delivered by
  * looking at the error associated with the argument at the cursor, but there
  * are times when you just want to say 'tell me the worst'.
  * If ``requisition.status != VALID`` then return ``null``.
  */
 Requisition.prototype.getStatusMessage = function() {
   if (this.commandAssignment.getStatus() !== Status.VALID) {
-    return l10n.lookupFormat('cliUnknownCommand2',
-                             [ this.commandAssignment.arg.text ]);
+    return l10n.lookup('cliUnknownCommand');
   }
 
   var assignments = this.getAssignments();
   for (var i = 0; i < assignments.length; i++) {
     if (assignments[i].getStatus() !== Status.VALID) {
       return assignments[i].message;
     }
   }
@@ -1442,19 +1450,36 @@ Requisition.prototype.complete = functio
       return true;
     }.bind(this));
   }.bind(this));
 };
 
 /**
  * Replace the current value with the lower value if such a concept exists.
  */
-Requisition.prototype.nudge = function(assignment, by) {
+Requisition.prototype.decrement = function(assignment) {
   var ctx = this.executionContext;
-  var val = assignment.param.type.nudge(assignment.value, by, ctx);
+  var val = assignment.param.type.decrement(assignment.value, ctx);
+  return Promise.resolve(val).then(function(replacement) {
+    if (replacement != null) {
+      var val = assignment.param.type.stringify(replacement, ctx);
+      return Promise.resolve(val).then(function(str) {
+        var arg = assignment.arg.beget({ text: str });
+        return this.setAssignment(assignment, arg);
+      }.bind(this));
+    }
+  }.bind(this));
+};
+
+/**
+ * Replace the current value with the higher value if such a concept exists.
+ */
+Requisition.prototype.increment = function(assignment) {
+  var ctx = this.executionContext;
+  var val = assignment.param.type.increment(assignment.value, ctx);
   return Promise.resolve(val).then(function(replacement) {
     if (replacement != null) {
       var val = assignment.param.type.stringify(replacement, ctx);
       return Promise.resolve(val).then(function(str) {
         var arg = assignment.arg.beget({ text: str });
         return this.setAssignment(assignment, arg);
       }.bind(this));
     }
@@ -1756,18 +1781,18 @@ function isSimple(typed) {
 Requisition.prototype._split = function(args) {
   // Handle the special case of the user typing { javascript(); }
   // We use the hidden 'eval' command directly rather than shift()ing one of
   // the parameters, and parse()ing it.
   var conversion;
   if (args[0].type === 'ScriptArgument') {
     // Special case: if the user enters { console.log('foo'); } then we need to
     // use the hidden 'eval' command
-    var command = this.system.commands.get(evalCmd.name);
-    conversion = new Conversion(command, new ScriptArgument());
+    conversion = new Conversion(getEvalCommand(this.system.commands),
+                                new ScriptArgument());
     this._setAssignmentInternal(this.commandAssignment, conversion);
     return;
   }
 
   var argsUsed = 1;
 
   while (argsUsed <= args.length) {
     var arg = (argsUsed === 1) ?
@@ -2015,17 +2040,17 @@ Requisition.prototype.exec = function(op
   // Display JavaScript input without the initial { or closing }
   var typed = this.toString();
   if (evalCmd.isCommandRegexp.test(typed)) {
     typed = typed.replace(evalCmd.isCommandRegexp, '');
     // Bug 717763: What if the JavaScript naturally ends with a }?
     typed = typed.replace(/\s*}\s*$/, '');
   }
 
-  var output = new Output({
+  var output = new Output(this.conversionContext, {
     command: command,
     args: args,
     typed: typed,
     canonical: this.toCanonicalString(),
     hidden: hidden
   });
 
   this.commandOutputManager.onOutput({ output: output });
@@ -2085,25 +2110,20 @@ Requisition.prototype.exec = function(op
 };
 
 /**
  * Designed to be called from context.updateExec(). Acts just like updateExec()
  * except that it also calls onExternalUpdate() to inform the UI of an
  * unexpected change to the current command.
  */
 Requisition.prototype._contextUpdateExec = function(typed, options) {
-  var reqOpts = {
-    document: this.document,
-    environment: this.environment
-  };
-  var child = new Requisition(this.system, reqOpts);
-  return child.updateExec(typed, options).then(function(reply) {
-    child.destroy();
+  return this.updateExec(typed, options).then(function(reply) {
+    this.onExternalUpdate({ typed: typed });
     return reply;
-  }.bind(child));
+  }.bind(this));
 };
 
 /**
  * A shortcut for calling update, resolving the promise and then exec.
  * @param input The string to execute
  * @param options Passed to exec
  * @return A promise of an output object
  */
@@ -2113,23 +2133,24 @@ Requisition.prototype.updateExec = funct
   }.bind(this));
 };
 
 exports.Requisition = Requisition;
 
 /**
  * A simple object to hold information about the output of a command
  */
-function Output(options) {
+function Output(context, options) {
   options = options || {};
   this.command = options.command || '';
   this.args = options.args || {};
   this.typed = options.typed || '';
   this.canonical = options.canonical || '';
   this.hidden = options.hidden === true ? true : false;
+  this.converters = context.system.converters;
 
   this.type = undefined;
   this.data = undefined;
   this.completed = false;
   this.error = false;
   this.start = new Date();
 
   this.promise = new Promise(function(resolve, reject) {
@@ -2164,34 +2185,21 @@ Output.prototype.complete = function(dat
 
   this._resolve();
 };
 
 /**
  * Call converters.convert using the data in this Output object
  */
 Output.prototype.convert = function(type, conversionContext) {
-  var converters = conversionContext.system.converters;
-  return converters.convert(this.data, this.type, type, conversionContext);
+  return this.converters.convert(this.data, this.type, type, conversionContext);
 };
 
 Output.prototype.toJson = function() {
-  // Exceptions don't stringify, so we try a bit harder
-  var data = this.data;
-  if (this.error && JSON.stringify(this.data) === '{}') {
-    data = {
-      columnNumber: data.columnNumber,
-      fileName: data.fileName,
-      lineNumber: data.lineNumber,
-      message: data.message,
-      stack: data.stack
-    };
-  }
-
   return {
     typed: this.typed,
     type: this.type,
-    data: data,
-    isError: this.error
+    data: this.data,
+    error: this.error
   };
 };
 
 exports.Output = Output;
diff --git a/toolkit/devtools/gcli/source/lib/gcli/commands/clear.js b/toolkit/devtools/gcli/source/lib/gcli/commands/clear.js
--- a/toolkit/devtools/gcli/source/lib/gcli/commands/clear.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/commands/clear.js
@@ -17,17 +17,16 @@
 'use strict';
 
 var l10n = require('../util/l10n');
 
 exports.items = [
   {
     // A command to clear the output area
     item: 'command',
-    runAt: 'client',
     name: 'clear',
     description: l10n.lookup('clearDesc'),
     returnType: 'clearoutput',
     exec: function(args, context) { }
   },
   {
     item: 'converter',
     from: 'clearoutput',
diff --git a/toolkit/devtools/gcli/source/lib/gcli/commands/commands.js b/toolkit/devtools/gcli/source/lib/gcli/commands/commands.js
--- a/toolkit/devtools/gcli/source/lib/gcli/commands/commands.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/commands/commands.js
@@ -156,64 +156,38 @@ function Command(types, commandSpec) {
       }
       this._shortParams[param.short] = param;
     }
   }, this);
 }
 
 /**
  * JSON serializer that avoids non-serializable data
- * @param customProps Array of strings containing additional properties which,
- * if specified in the command spec, will be included in the JSON. Normally we
- * transfer only the properties required for GCLI to function.
  */
-Command.prototype.toJson = function(customProps) {
+Command.prototype.toJson = function() {
   var json = {
     item: 'command',
     name: this.name,
     params: this.params.map(function(param) { return param.toJson(); }),
     returnType: this.returnType,
     isParent: (this.exec == null)
   };
-
   if (this.description !==  l10n.lookup('canonDescNone')) {
     json.description = this.description;
   }
   if (this.manual != null) {
     json.manual = this.manual;
   }
   if (this.hidden != null) {
     json.hidden = this.hidden;
   }
-
-  if (Array.isArray(customProps)) {
-    customProps.forEach(function(prop) {
-      if (this[prop] != null) {
-        json[prop] = this[prop];
-      }
-    }.bind(this));
-  }
-
   return json;
 };
 
 /**
- * Easy way to lookup parameters by full name
- */
-Command.prototype.getParameterByName = function(name) {
-  var reply;
-  this.params.forEach(function(param) {
-    if (param.name === name) {
-      reply = param;
-    }
-  });
-  return reply;
-};
-
-/**
  * Easy way to lookup parameters by short name
  */
 Command.prototype.getParameterByShortName = function(short) {
   return this._shortParams[short];
 };
 
 exports.Command = Command;
 
@@ -272,37 +246,26 @@ function Parameter(types, paramSpec, com
   // All parameters that can only be set via a named parameter must have a
   // non-undefined default value
   if (!this.isPositionalAllowed && this.paramSpec.defaultValue === undefined &&
       this.type.getBlank == null && this.type.name !== 'boolean') {
     throw new Error('In ' + this.command.name + '/' + this.name +
                     ': Missing defaultValue for optional parameter.');
   }
 
-  if (this.paramSpec.defaultValue !== undefined) {
-    this.defaultValue = this.paramSpec.defaultValue;
-  }
-  else {
-    Object.defineProperty(this, 'defaultValue', {
-      get: function() {
-        return this.type.getBlank().value;
-      },
-      enumerable: true
-    });
-  }
+  this.defaultValue = (this.paramSpec.defaultValue !== undefined) ?
+                      this.paramSpec.defaultValue :
+                      this.type.getBlank().value;
 
   // Resolve the documentation
   this.manual = lookup(this.paramSpec.manual);
   this.description = lookup(this.paramSpec.description, 'canonDescNone');
 
   // Is the user required to enter data for this parameter? (i.e. has
   // defaultValue been set to something other than undefined)
-  // TODO: When the defaultValue comes from type.getBlank().value (see above)
-  // then perhaps we should set using something like
-  //   isDataRequired = (type.getBlank().status !== VALID)
   this.isDataRequired = (this.defaultValue === undefined);
 
   // Are we allowed to assign data to this parameter using positional
   // parameters?
   this.isPositionalAllowed = this.groupName == null;
 }
 
 /**
@@ -359,48 +322,39 @@ Parameter.prototype.toJson = function() 
   return json;
 };
 
 exports.Parameter = Parameter;
 
 
 /**
  * A store for a list of commands
- * @param types Each command uses a set of Types to parse its parameters so the
- * Commands container needs access to the list of available types.
- * @param location String that, if set will force all commands to have a
- * matching runAt property to be accepted
  */
-function Commands(types, location) {
+function Commands(types) {
   this.types = types;
-  this.location = location;
 
   // A lookup hash of our registered commands
   this._commands = {};
   // A sorted list of command names, we regularly want them in order, so pre-sort
   this._commandNames = [];
   // A lookup of the original commandSpecs by command name
   this._commandSpecs = {};
 
   // Enable people to be notified of changes to the list of commands
   this.onCommandsChange = util.createEvent('commands.onCommandsChange');
 }
 
 /**
  * Add a command to the list of known commands.
+ * This function is exposed to the outside world (via gcli/index). It is
+ * documented in docs/index.md for all the world to see.
  * @param commandSpec The command and its metadata.
- * @return The new command, or null if a location property has been set and the
- * commandSpec doesn't have a matching runAt property.
+ * @return The new command
  */
 Commands.prototype.add = function(commandSpec) {
-  if (this.location != null && commandSpec.runAt != null &&
-      commandSpec.runAt !== this.location) {
-    return;
-  }
-
   if (this._commands[commandSpec.name] != null) {
     // Roughly commands.remove() without the event call, which we do later
     delete this._commands[commandSpec.name];
     this._commandNames = this._commandNames.filter(function(test) {
       return test !== commandSpec.name;
     });
   }
 
@@ -457,27 +411,24 @@ Commands.prototype.getAll = function() {
   return Object.keys(this._commands).map(function(name) {
     return this._commands[name];
   }, this);
 };
 
 /**
  * Get access to the stored commandMetaDatas (i.e. before they were made into
  * instances of Command/Parameters) so we can remote them.
- * @param customProps Array of strings containing additional properties which,
- * if specified in the command spec, will be included in the JSON. Normally we
- * transfer only the properties required for GCLI to function.
  */
-Commands.prototype.getCommandSpecs = function(customProps) {
+Commands.prototype.getCommandSpecs = function() {
   var commandSpecs = [];
 
   Object.keys(this._commands).forEach(function(name) {
     var command = this._commands[name];
     if (!command.noRemote) {
-      commandSpecs.push(command.toJson(customProps));
+      commandSpecs.push(command.toJson());
     }
   }.bind(this));
 
   return commandSpecs;
 };
 
 /**
  * Add a set of commands that are executed somewhere else, optionally with a
diff --git a/toolkit/devtools/gcli/source/lib/gcli/commands/connect.js b/toolkit/devtools/gcli/source/lib/gcli/commands/connect.js
--- a/toolkit/devtools/gcli/source/lib/gcli/commands/connect.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/commands/connect.js
@@ -13,33 +13,32 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
 
 var l10n = require('../util/l10n');
 var cli = require('../cli');
-var GcliFront = require('../connectors/remoted').GcliFront;
 
 /**
  * A lookup of the current connection
  */
-var fronts = {};
+var connections = {};
 
 /**
  * 'connection' type
  */
 var connection = {
   item: 'type',
   name: 'connection',
   parent: 'selection',
   lookup: function() {
-    return Object.keys(fronts).map(function(prefix) {
-      return { name: prefix, value: fronts[prefix] };
+    return Object.keys(connections).map(function(prefix) {
+      return { name: prefix, value: connections[prefix] };
     });
   }
 };
 
 /**
  * 'connector' type
  */
 var connector = {
@@ -83,56 +82,61 @@ var connect = {
       description: l10n.lookup('connectUrlDesc'),
       defaultValue: null,
       option: true
     }
   ],
   returnType: 'string',
 
   exec: function(args, context) {
-    if (fronts[args.prefix] != null) {
+    if (connections[args.prefix] != null) {
       throw new Error(l10n.lookupFormat('connectDupReply', [ args.prefix ]));
     }
 
-    args.method = args.method || context.system.connectors.get('xhr');
+    var connector = args.method || context.system.connectors.get('xhr');
 
-    return GcliFront.create(args.method, args.url).then(function(front) {
-      // Nasty: stash the prefix on the front to help us tidy up
-      front.prefix = args.prefix;
-      fronts[args.prefix] = front;
+    return connector.connect(args.url).then(function(connection) {
+      // Nasty: stash the prefix on the connection to help us tidy up
+      connection.prefix = args.prefix;
+      connections[args.prefix] = connection;
 
-      return front.specs().then(function(specs) {
-        var remoter = this.createRemoter(args.prefix, front);
+      return connection.call('specs').then(function(specs) {
+        var remoter = this.createRemoter(args.prefix, connection);
         var commands = cli.getMapping(context).requisition.system.commands;
         commands.addProxyCommands(specs, remoter, args.prefix, args.url);
 
         // TODO: We should add type proxies here too
 
         // commandSpecs doesn't include the parent command that we added
         return l10n.lookupFormat('connectReply',
                                  [ Object.keys(specs).length + 1 ]);
       }.bind(this));
     }.bind(this));
   },
 
   /**
    * When we register a set of remote commands, we need to provide a proxy
    * executor. This is that executor.
    */
-  createRemoter: function(prefix, front) {
+  createRemoter: function(prefix, connection) {
     return function(cmdArgs, context) {
       var typed = context.typed;
 
       // If we've been called using a 'context' then there will be no prefix
       // otherwise we need to remove it
       if (typed.indexOf(prefix) === 0) {
         typed = typed.substring(prefix.length).replace(/^ */, '');
       }
 
-      return front.execute(typed).then(function(reply) {
+      var data = {
+        typed: typed,
+        args: cmdArgs
+      };
+
+      return connection.call('execute', data).then(function(reply) {
         var typedData = context.typedData(reply.type, reply.data);
         if (!reply.error) {
           return typedData;
         }
         else {
           throw typedData;
         }
       });
@@ -153,19 +157,19 @@ var disconnect = {
       name: 'prefix',
       type: 'connection',
       description: l10n.lookup('disconnectPrefixDesc')
     }
   ],
   returnType: 'string',
 
   exec: function(args, context) {
-    var front = args.prefix;
-    return front.connection.disconnect().then(function() {
+    var connection = args.prefix;
+    return connection.disconnect().then(function() {
       var commands = cli.getMapping(context).requisition.system.commands;
-      var removed = commands.removeProxyCommands(front.prefix);
-      delete fronts[front.prefix];
+      var removed = commands.removeProxyCommands(connection.prefix);
+      delete connections[connection.prefix];
       return l10n.lookupFormat('disconnectReply', [ removed.length ]);
     });
   }
 };
 
 exports.items = [ connection, connector, connect, disconnect ];
diff --git a/toolkit/devtools/gcli/source/lib/gcli/commands/global.js b/toolkit/devtools/gcli/source/lib/gcli/commands/global.js
--- a/toolkit/devtools/gcli/source/lib/gcli/commands/global.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/commands/global.js
@@ -34,17 +34,16 @@ exports.items = [
       });
 
       return this.last;
     }
   },
   {
     // A command to switch JS globals
     item: 'command',
-    runAt: 'client',
     name: 'global',
     description: l10n.lookup('globalDesc'),
     params: [
       {
         name: 'window',
         type: 'global',
         description: l10n.lookup('globalWindowDesc'),
       }
diff --git a/toolkit/devtools/gcli/source/lib/gcli/commands/help.js b/toolkit/devtools/gcli/source/lib/gcli/commands/help.js
--- a/toolkit/devtools/gcli/source/lib/gcli/commands/help.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/commands/help.js
@@ -200,17 +200,16 @@ var helpCss = '' +
   '  margin: 10px 0 6px;\n' +
   '}\n';
 
 exports.items = [
   {
     // 'help' command
     item: 'command',
     name: 'help',
-    runAt: 'client',
     description: l10n.lookup('helpDesc'),
     manual: l10n.lookup('helpManual'),
     params: [
       {
         name: 'search',
         type: 'string',
         description: l10n.lookup('helpSearchDesc'),
         manual: l10n.lookup('helpSearchManual3'),
diff --git a/toolkit/devtools/gcli/source/lib/gcli/commands/mocks.js b/toolkit/devtools/gcli/source/lib/gcli/commands/mocks.js
--- a/toolkit/devtools/gcli/source/lib/gcli/commands/mocks.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/commands/mocks.js
@@ -14,17 +14,16 @@
  * limitations under the License.
  */
 
 'use strict';
 
 var cli = require('../cli');
 var mockCommands = require('../test/mockCommands');
 var mockSettings = require('../test/mockSettings');
-var mockDocument = require('../test/mockDocument');
 
 exports.items = [
   {
     item: 'command',
     name: 'mocks',
     description: 'Add/remove mock commands',
     params: [
       {
@@ -42,18 +41,16 @@ exports.items = [
       var requisition = cli.getMapping(context).requisition;
       this[args.included](requisition);
       return 'Mock commands are now ' + args.included;
     },
 
     on: function(requisition) {
       mockCommands.setup(requisition);
       mockSettings.setup(requisition.system);
-      mockDocument.setup(requisition);
     },
 
     off: function(requisition) {
       mockCommands.shutdown(requisition);
       mockSettings.shutdown(requisition.system);
-      mockDocument.shutdown(requisition);
     }
   }
 ];
diff --git a/toolkit/devtools/gcli/source/lib/gcli/commands/pref.js b/toolkit/devtools/gcli/source/lib/gcli/commands/pref.js
--- a/toolkit/devtools/gcli/source/lib/gcli/commands/pref.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/commands/pref.js
@@ -25,17 +25,16 @@ exports.items = [
     name: 'pref',
     description: l10n.lookup('prefDesc'),
     manual: l10n.lookup('prefManual')
   },
   {
     // 'pref show' command
     item: 'command',
     name: 'pref show',
-    runAt: 'client',
     description: l10n.lookup('prefShowDesc'),
     manual: l10n.lookup('prefShowManual'),
     params: [
       {
         name: 'setting',
         type: 'setting',
         description: l10n.lookup('prefShowSettingDesc'),
         manual: l10n.lookup('prefShowSettingManual')
@@ -45,17 +44,16 @@ exports.items = [
       return l10n.lookupFormat('prefShowSettingValue',
                                [ args.setting.name, args.setting.value ]);
     }
   },
   {
     // 'pref set' command
     item: 'command',
     name: 'pref set',
-    runAt: 'client',
     description: l10n.lookup('prefSetDesc'),
     manual: l10n.lookup('prefSetManual'),
     params: [
       {
         name: 'setting',
         type: 'setting',
         description: l10n.lookup('prefSetSettingDesc'),
         manual: l10n.lookup('prefSetSettingManual')
@@ -70,17 +68,16 @@ exports.items = [
     exec: function(args, context) {
       args.setting.value = args.value;
     }
   },
   {
     // 'pref reset' command
     item: 'command',
     name: 'pref reset',
-    runAt: 'client',
     description: l10n.lookup('prefResetDesc'),
     manual: l10n.lookup('prefResetManual'),
     params: [
       {
         name: 'setting',
         type: 'setting',
         description: l10n.lookup('prefResetSettingDesc'),
         manual: l10n.lookup('prefResetSettingManual')
diff --git a/toolkit/devtools/gcli/source/lib/gcli/commands/preflist.js b/toolkit/devtools/gcli/source/lib/gcli/commands/preflist.js
--- a/toolkit/devtools/gcli/source/lib/gcli/commands/preflist.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/commands/preflist.js
@@ -17,17 +17,17 @@
 'use strict';
 
 var l10n = require('../util/l10n');
 var Promise = require('../util/promise').Promise;
 
 /**
  * Format a list of settings for display
  */
-var prefsViewConverter = {
+var prefsData = {
   item: 'converter',
   from: 'prefsData',
   to: 'view',
   exec: function(prefsData, conversionContext) {
     var prefList = new PrefList(prefsData, conversionContext);
     return {
       html:
         '<div ignore="${onLoad(__element)}">\n' +
@@ -93,32 +93,16 @@ var prefsViewConverter = {
         '  /* display: inline-block; */\n' +
         '}\n',
       cssId: 'gcli-pref-list'
     };
   }
 };
 
 /**
- * Format a list of settings for display
- */
-var prefsStringConverter = {
-  item: 'converter',
-  from: 'prefsData',
-  to: 'string',
-  exec: function(prefsData, conversionContext) {
-    var reply = '';
-    prefsData.settings.forEach(function(setting) {
-      reply += setting.name + ' -> ' + setting.value + '\n';
-    });
-    return reply;
-  }
-};
-
-/**
  * 'pref list' command
  */
 var prefList = {
   item: 'command',
   name: 'pref list',
   description: l10n.lookup('prefListDesc'),
   manual: l10n.lookup('prefListManual'),
   params: [
@@ -147,18 +131,16 @@ var prefList = {
 
 /**
  * A manager for our version of about:config
  */
 function PrefList(prefsData, conversionContext) {
   this.search = prefsData.search;
   this.settings = prefsData.settings;
   this.conversionContext = conversionContext;
-
-  this.onLoad = this.onLoad.bind(this);
 }
 
 /**
  * A load event handler registered by the template engine so we can load the
  * inner document
  */
 PrefList.prototype.onLoad = function(element) {
   var table = element.querySelector('.gcli-pref-list-table');
@@ -207,9 +189,9 @@ PrefList.prototype.onFilterChange = func
   }
 };
 
 PrefList.prototype.onSetClick = function(ev) {
   var typed = ev.currentTarget.getAttribute('data-command');
   this.conversionContext.update(typed);
 };
 
-exports.items = [ prefsViewConverter, prefsStringConverter, prefList ];
+exports.items = [ prefsData, prefList ];
diff --git a/toolkit/devtools/gcli/source/lib/gcli/commands/test.js b/toolkit/devtools/gcli/source/lib/gcli/commands/test.js
--- a/toolkit/devtools/gcli/source/lib/gcli/commands/test.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/commands/test.js
@@ -65,20 +65,20 @@ exports.items = [
       }
 
       var options;
       if (args.usehost) {
         options = exports.optionsContainer[0];
       }
       else {
         options = {
-          isNode: (typeof(process) !== 'undefined' &&
-                   process.title.indexOf('node') != -1),
+          isNode: (typeof(process) !== 'undefined' && process.title === 'node'),
           isFirefox: false,
           isPhantomjs: false,
+          isNoDom: true,
           requisition: new Requisition(context.system)
         };
         options.automator = createRequisitionAutomator(options.requisition);
       }
 
       var requisition = options.requisition;
       requisition.system.commands.get('mocks').on(requisition);
       helpers.resetResponseTimes();
diff --git a/toolkit/devtools/gcli/source/lib/gcli/connectors/connectors.js b/toolkit/devtools/gcli/source/lib/gcli/connectors/connectors.js
--- a/toolkit/devtools/gcli/source/lib/gcli/connectors/connectors.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/connectors/connectors.js
@@ -133,27 +133,20 @@ Connectors.prototype.remove = function(c
  * Get access to the list of known connectors
  */
 Connectors.prototype.getAll = function() {
   return Object.keys(this._registered).map(function(name) {
     return this._registered[name];
   }.bind(this));
 };
 
-var defaultConnectorName;
-
 /**
- * Get access to a connector by name. If name is undefined then first try to
- * use the same connector that we used last time, and if there was no last
- * time, then just use the first registered connector as a default.
+ * Get access to a connector by name. If name is undefined then use the first
+ * registered connector as a default.
  */
 Connectors.prototype.get = function(name) {
   if (name == null) {
-    name = (defaultConnectorName == null) ?
-        Object.keys(this._registered)[0] :
-        defaultConnectorName;
+    name = Object.keys(this._registered)[0];
   }
-
-  defaultConnectorName = name;
   return this._registered[name];
 };
 
 exports.Connectors = Connectors;
diff --git a/toolkit/devtools/gcli/source/lib/gcli/connectors/index.js b/toolkit/devtools/gcli/source/lib/gcli/connectors/index.js
new file mode 100644
--- /dev/null
+++ b/toolkit/devtools/gcli/source/lib/gcli/connectors/index.js
@@ -0,0 +1,185 @@
+/*
+ * Copyright 2012, Mozilla Foundation and contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+'use strict';
+
+var api = require('../api');
+var Commands = require('../commands/commands').Commands;
+var Types = require('../types/types').Types;
+
+// Patch-up IE9
+require('../util/legacy');
+
+/*
+ * GCLI is built from a number of components (called items) composed as
+ * required for each environment.
+ * When adding to or removing from this list, we should keep the basics in sync
+ * with the other environments.
+ * See:
+ * - lib/gcli/index.js: Generic basic set (without commands)
+ * - lib/gcli/demo.js: Adds demo commands to basic set for use in web demo
+ * - gcli.js: Add commands to basic set for use in Node command line
+ * - lib/gcli/index.js: (mozmaster branch) From scratch listing for Firefox
+ * - lib/gcli/connectors/index.js: Client only items when executing remotely
+ * - lib/gcli/connectors/direct.js: Test items for connecting to in-process GCLI
+ */
+var items = [
+  // First we need to add the local types which other types depend on
+  require('../types/delegate').items,
+  require('../types/selection').items,
+  require('../types/array').items,
+
+  require('../types/boolean').items,
+  require('../types/command').items,
+  require('../types/date').items,
+  require('../types/file').items,
+  require('../types/javascript').items,
+  require('../types/node').items,
+  require('../types/number').items,
+  require('../types/resource').items,
+  require('../types/setting').items,
+  require('../types/string').items,
+  require('../types/union').items,
+  require('../types/url').items,
+
+  require('../fields/fields').items,
+  require('../fields/delegate').items,
+  require('../fields/selection').items,
+
+  require('../ui/intro').items,
+  require('../ui/focus').items,
+
+  require('../converters/converters').items,
+  require('../converters/basic').items,
+  require('../converters/html').items,
+  require('../converters/terminal').items,
+
+  require('../languages/command').items,
+  require('../languages/javascript').items,
+
+  require('./direct').items,
+  // require('./rdp').items, // Firefox remote debug protocol
+  require('./websocket').items,
+  require('./xhr').items,
+
+  require('../commands/context').items,
+
+].reduce(function(prev, curr) { return prev.concat(curr); }, []);
+
+/**
+ * These are the commands stored on the remote side that have converters which
+ * we'll need to present the data
+ */
+var requiredConverters = [
+  require('../cli').items,
+
+  require('../commands/clear').items,
+  require('../commands/connect').items,
+  require('../commands/exec').items,
+  require('../commands/global').items,
+  require('../commands/help').items,
+  require('../commands/intro').items,
+  require('../commands/lang').items,
+  require('../commands/preflist').items,
+  require('../commands/pref').items,
+  require('../commands/test').items,
+
+].reduce(function(prev, curr) { return prev.concat(curr); }, [])
+ .filter(function(item) { return item.item === 'converter'; });
+
+/**
+ * Connect to a remote system and setup the commands/types/converters etc needed
+ * to make it all work
+ */
+exports.connect = function(options) {
+  options = options || {};
+
+  var system = api.createSystem();
+
+  // Ugly hack, to aid testing
+  exports.api = system;
+
+  options.types = system.types = new Types();
+  options.commands = system.commands = new Commands(system.types);
+
+  system.addItems(items);
+  system.addItems(requiredConverters);
+
+  var connector = system.connectors.get(options.connector);
+  return connector.connect(options.url).then(function(connection) {
+    options.connection = connection;
+    connection.on('commandsChanged', function(specs) {
+      exports.addItems(system, specs, connection);
+    });
+
+    return connection.call('specs').then(function(specs) {
+      exports.addItems(system, specs, connection);
+      return connection;
+    });
+  });
+};
+
+exports.addItems = function(gcli, specs, connection) {
+  exports.removeRemoteItems(gcli, connection);
+  var remoteItems = exports.addLocalFunctions(specs, connection);
+  gcli.addItems(remoteItems);
+};
+
+/**
+ * Take the data from the 'specs' command (or the 'commandsChanged' event) and
+ * add function to proxy the execution back over the connection
+ */
+exports.addLocalFunctions = function(specs, connection) {
+  // Inject an 'exec' function into the commands, and the connection into
+  // all the remote types
+  specs.forEach(function(commandSpec) {
+    //
+    commandSpec.connection = connection;
+    commandSpec.params.forEach(function(param) {
+      param.type.connection = connection;
+    });
+
+    if (!commandSpec.isParent) {
+      commandSpec.exec = function(args, context) {
+        var data = {
+          typed: (context.prefix ? context.prefix + ' ' : '') + context.typed
+        };
+
+        return connection.call('execute', data).then(function(reply) {
+          var typedData = context.typedData(reply.type, reply.data);
+          if (!reply.error) {
+            return typedData;
+          }
+          else {
+            throw typedData;
+          }
+        });
+      };
+    }
+
+    commandSpec.isProxy = true;
+  });
+
+  return specs;
+};
+
+exports.removeRemoteItems = function(gcli, connection) {
+  gcli.commands.getAll().forEach(function(command) {
+    if (command.connection === connection) {
+      gcli.commands.remove(command);
+    }
+  });
+};
diff --git a/toolkit/devtools/gcli/source/lib/gcli/connectors/protocol.js b/toolkit/devtools/gcli/source/lib/gcli/connectors/protocol.js
new file mode 100644
--- /dev/null
+++ b/toolkit/devtools/gcli/source/lib/gcli/connectors/protocol.js
@@ -0,0 +1,56 @@
+/*
+ * Copyright 2012, Mozilla Foundation and contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+'use strict';
+
+/**
+ * This is a quick and dirty stub that allows us to write code in remoted.js
+ * that looks like gcli.js
+ */
+exports.method = function(func, spec) {
+  // An array of strings, being the names of the parameters
+  var argSpecs = [];
+  if (spec.request != null) {
+    Object.keys(spec.request).forEach(function(name) {
+      var arg = spec.request[name];
+      argSpecs[arg.index] = name;
+    });
+  }
+
+  return function(data) {
+    var args = (data == null) ?
+               [] :
+               argSpecs.map(function(name) { return data[name]; });
+    return func.apply(this, args);
+  };
+};
+
+var Arg = exports.Arg = function(index, type) {
+  if (this == null) {
+    return new Arg(index, type);
+  }
+
+  this.index = index;
+  this.type = type;
+};
+
+var RetVal = exports.RetVal = function(type) {
+  if (this == null) {
+    return new RetVal(type);
+  }
+
+  this.type = type;
+};
diff --git a/toolkit/devtools/gcli/source/lib/gcli/connectors/rdp.js b/toolkit/devtools/gcli/source/lib/gcli/connectors/rdp.js
new file mode 100644
--- /dev/null
+++ b/toolkit/devtools/gcli/source/lib/gcli/connectors/rdp.js
@@ -0,0 +1,145 @@
+/*
+ * Copyright 2012, Mozilla Foundation and contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+'use strict';
+
+var Cu = require('chrome').Cu;
+
+var DebuggerClient = Cu.import('resource://gre/modules/devtools/dbg-client.jsm', {}).DebuggerClient;
+var { Task } = Cu.import("resource://gre/modules/Task.jsm", {});
+
+var Promise = require('../util/promise').Promise;
+var Connection = require('./connectors').Connection;
+
+/**
+ * What port should we use by default?
+ */
+Object.defineProperty(exports, 'defaultPort', {
+  get: function() {
+    var Services = Cu.import('resource://gre/modules/Services.jsm', {}).Services;
+    try {
+      return Services.prefs.getIntPref('devtools.debugger.chrome-debugging-port');
+    }
+    catch (ex) {
+      console.error('Can\'t use default port from prefs. Using 9999');
+      return 9999;
+    }
+  },
+  enumerable: true
+});
+
+exports.items = [
+  {
+    item: 'connector',
+    name: 'rdp',
+
+    connect: function(url) {
+      return RdpConnection.create(url);
+    }
+  }
+];
+
+/**
+ * RdpConnection uses the Firefox Remote Debug Protocol
+ */
+function RdpConnection(url) {
+  throw new Error('Use RdpConnection.create');
+}
+
+/**
+ * Asynchronous construction
+ */
+RdpConnection.create = Task.async(function*(url) {
+  this.host = url;
+  this.port = undefined; // TODO: Split out the port number
+
+  this.requests = {};
+  this.nextRequestId = 0;
+
+  this._emit = this._emit.bind(this);
+
+  let transport = yield DebuggerClient.socketConnect({
+    host: this.host,
+    port: this.port
+  });
+
+  return new Promise(function(resolve, reject) {
+    this.client = new DebuggerClient(transport);
+    this.client.connect(function() {
+      this.client.listTabs(function(response) {
+        this.actor = response.gcliActor;
+        resolve();
+      }.bind(this));
+    }.bind(this));
+  }.bind(this));
+});
+
+RdpConnection.prototype = Object.create(Connection.prototype);
+
+RdpConnection.prototype.call = function(command, data) {
+  return new Promise(function(resolve, reject) {
+    var request = { to: this.actor, type: command, data: data };
+
+    this.client.request(request, function(response) {
+      resolve(response.commandSpecs);
+    });
+  }.bind(this));
+};
+
+RdpConnection.prototype.disconnect = function() {
+  return new Promise(function(resolve, reject) {
+    this.client.close(function() {
+      resolve();
+    });
+
+    delete this._emit;
+  }.bind(this));
+};
+
+
+/**
+ * A Request is a command typed at the client which lives until the command
+ * has finished executing on the server
+ */
+function Request(actor, typed, args) {
+  this.json = {
+    to: actor,
+    type: 'execute',
+    typed: typed,
+    args: args,
+    requestId: 'id-' + Request._nextRequestId++,
+  };
+
+  this.promise = new Promise(function(resolve, reject) {
+    this._resolve = resolve;
+  }.bind(this));
+}
+
+Request._nextRequestId = 0;
+
+/**
+ * Called by the connection when a remote command has finished executing
+ * @param error boolean indicating output state
+ * @param type the type of the returned data
+ * @param data the data itself
+ */
+Request.prototype.complete = function(error, type, data) {
+  this._resolve({
+    error: error,
+    type: type,
+    data: data
+  });
+};
diff --git a/toolkit/devtools/gcli/source/lib/gcli/connectors/remoted.js b/toolkit/devtools/gcli/source/lib/gcli/connectors/remoted.js
new file mode 100644
--- /dev/null
+++ b/toolkit/devtools/gcli/source/lib/gcli/connectors/remoted.js
@@ -0,0 +1,275 @@
+/*
+ * Copyright 2012, Mozilla Foundation and contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/* jshint quotmark:false, newcap:false */
+
+'use strict';
+
+var Promise = require('../util/promise').Promise;
+var host = require('../util/host');
+var fileparser = require('../util/fileparser');
+
+var protocol = require('./protocol');
+var method = protocol.method;
+var Arg = protocol.Arg;
+var RetVal = protocol.RetVal;
+
+/**
+ * Provide JSON mapping services to remote functionality of a Requisition
+ */
+var Remoter = exports.Remoter = function(requisition) {
+  this.requisition = requisition;
+  this._listeners = [];
+};
+
+/**
+ * Add a new listener
+ */
+Remoter.prototype.addListener = function(action) {
+  var listener = {
+    action: action,
+    caller: function() {
+      var commands = this.requisition.system.commands;
+      action('commandsChanged', commands.getCommandSpecs());
+    }.bind(this)
+  };
+  this._listeners.push(listener);
+
+  this.requisition.system.commands.onCommandsChange.add(listener.caller);
+};
+
+/**
+ * Remove an existing listener
+ */
+Remoter.prototype.removeListener = function(action) {
+  var listener;
+
+  this._listeners = this._listeners.filter(function(li) {
+    if (li.action === action) {
+      listener = li;
+      return false;
+    }
+    return true;
+  });
+
+  if (listener == null) {
+    throw new Error('action not a known listener');
+  }
+
+  this.requisition.system.commands.onCommandsChange.remove(listener.caller);
+};
+
+/**
+ * These functions are designed to be remoted via RDP/XHR/websocket, etc
+ */
+Remoter.prototype.exposed = {
+  /**
+   * Retrieve a list of the remotely executable commands
+   */
+  specs: method(function() {
+    return this.requisition.system.commands.getCommandSpecs();
+  }, {
+    request: {},
+    response: RetVal("json")
+  }),
+
+  /**
+   * Execute a GCLI command
+   * @return a promise of an object with the following properties:
+   * - data: The output of the command
+   * - type: The type of the data to allow selection of a converter
+   * - error: True if the output was considered an error
+   */
+  execute: method(function(typed) {
+    return this.requisition.updateExec(typed).then(function(output) {
+      return output.toJson();
+    });
+  }, {
+    request: {
+      typed: Arg(0, "string") // The command string
+    },
+    response: RetVal("json")
+  }),
+
+  /**
+   * Get the state of an input string. i.e. requisition.getStateData()
+   */
+  state: method(function(typed, start, rank) {
+    return this.requisition.update(typed).then(function() {
+      return this.requisition.getStateData(start, rank);
+    }.bind(this));
+  }, {
+    request: {
+      typed: Arg(0, "string"), // The command string
+      start: Arg(1, "number"), // Cursor start position
+      rank: Arg(2, "number") // The prediction offset (# times UP/DOWN pressed)
+    },
+    response: RetVal("json")
+  }),
+
+  /**
+   * Call type.parse to check validity. Used by the remote type
+   * @return a promise of an object with the following properties:
+   * - status: Of of the following strings: VALID|INCOMPLETE|ERROR
+   * - message: The message to display to the user
+   * - predictions: An array of suggested values for the given parameter
+   */
+  typeparse: method(function(typed, param) {
+    return this.requisition.update(typed).then(function() {
+      var assignment = this.requisition.getAssignment(param);
+
+      return Promise.resolve(assignment.predictions).then(function(predictions) {
+        return {
+          status: assignment.getStatus().toString(),
+          message: assignment.message,
+          predictions: predictions
+        };
+      });
+    }.bind(this));
+  }, {
+    request: {
+      typed: Arg(0, "string"), // The command string
+      param: Arg(1, "string") // The name of the parameter to parse
+    },
+    response: RetVal("json")
+  }),
+
+  /**
+   * Get the incremented value of some type
+   * @return a promise of a string containing the new argument text
+   */
+  typeincrement: method(function(typed, param) {
+    return this.requisition.update(typed).then(function() {
+      var assignment = this.requisition.getAssignment(param);
+      return this.requisition.increment(assignment).then(function() {
+        var arg = assignment.arg;
+        return arg == null ? undefined : arg.text;
+      });
+    });
+  }, {
+    request: {
+      typed: Arg(0, "string"), // The command string
+      param: Arg(1, "string") // The name of the parameter to parse
+    },
+    response: RetVal("string")
+  }),
+
+  /**
+   * See typeincrement
+   */
+  typedecrement: method(function(typed, param) {
+    return this.requisition.update(typed).then(function() {
+      var assignment = this.requisition.getAssignment(param);
+      return this.requisition.decrement(assignment).then(function() {
+        var arg = assignment.arg;
+        return arg == null ? undefined : arg.text;
+      });
+    });
+  }, {
+    request: {
+      typed: Arg(0, "string"), // The command string
+      param: Arg(1, "string") // The name of the parameter to parse
+    },
+    response: RetVal("string")
+  }),
+
+  /**
+   * Perform a lookup on a selection type to get the allowed values
+   */
+  selectioninfo: method(function(commandName, paramName, action) {
+    var command = this.requisition.system.commands.get(commandName);
+    if (command == null) {
+      throw new Error('No command called \'' + commandName + '\'');
+    }
+
+    var type;
+    command.params.forEach(function(param) {
+      if (param.name === paramName) {
+        type = param.type;
+      }
+    });
+    if (type == null) {
+      throw new Error('No parameter called \'' + paramName + '\' in \'' +
+                      commandName + '\'');
+    }
+
+    switch (action) {
+      case 'lookup':
+        return type.lookup(this.requisition.executionContext);
+      case 'data':
+        return type.data(this.requisition.executionContext);
+      default:
+        throw new Error('Action must be either \'lookup\' or \'data\'');
+    }
+  }, {
+    request: {
+      commandName: Arg(0, "string"), // The command containing the parameter in question
+      paramName: Arg(1, "string"), // The name of the parameter
+      action: Arg(2, "string") // 'lookup' or 'data' depending on the function to call
+    },
+    response: RetVal("json")
+  }),
+
+  /**
+   * Execute a system command
+   * @return a promise of a string containing the output of the command
+   */
+  system: method(function(cmd, args, cwd, env) {
+    var context = this.requisition.executionContext;
+    return host.spawn(context, { cmd: cmd, args: args, cwd: cwd, env: env });
+  }, {
+    request: {
+      cmd: Arg(0, "string"), // The executable to call
+      args: Arg(1, "array:string"), // Arguments to the executable
+      cwd: Arg(2, "string"), // The working directory
+      env: Arg(3, "json") // A map of environment variables
+    },
+    response: RetVal("json")
+  }),
+
+  /**
+   * Examine the filesystem for file matches
+   */
+  parsefile: method(function(typed, filetype, existing, matches) {
+    var options = {
+      filetype: filetype,
+      existing: existing,
+      matches: new RegExp(matches)
+    };
+
+    var context = this.requisition.executionContext;
+    return fileparser.parse(context, typed, options).then(function(reply) {
+      reply.status = reply.status.toString();
+      if (reply.predictor == null) {
+        return reply;
+      }
+
+      return reply.predictor().then(function(predictions) {
+        delete reply.predictor;
+        reply.predictions = predictions;
+        return reply;
+      });
+    });
+  }, {
+    request: {
+      typed: Arg(0, "string"), // The filename as typed by the user
+      filetype: Arg(1, "array:string"), // The expected filetype
+      existing: Arg(2, "string"), // Boolean which defines if a file/directory is expected to exist
+      matches: Arg(3, "json") // String of a regular expression which the result should match
+    },
+    response: RetVal("json")
+  })
+};
diff --git a/toolkit/devtools/gcli/source/lib/gcli/converters/basic.js b/toolkit/devtools/gcli/source/lib/gcli/converters/basic.js
--- a/toolkit/devtools/gcli/source/lib/gcli/converters/basic.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/converters/basic.js
@@ -51,44 +51,25 @@ exports.items = [
     from: 'undefined',
     to: 'dom',
     exec: function(data, conversionContext) {
       return util.createElement(conversionContext.document, 'span');
     }
   },
   {
     item: 'converter',
-    from: 'json',
-    to: 'view',
-    exec: function(json, context) {
-      var html = JSON.stringify(json, null, '&#160;').replace(/\n/g, '<br/>');
-      return {
-        html: '<pre>' + html + '</pre>'
-      };
-    }
-  },
-  {
-    item: 'converter',
     from: 'number',
     to: 'string',
     exec: function(data) { return '' + data; }
   },
   {
     item: 'converter',
     from: 'boolean',
     to: 'string',
     exec: function(data) { return '' + data; }
   },
   {
     item: 'converter',
     from: 'undefined',
     to: 'string',
     exec: function(data) { return ''; }
-  },
-  {
-    item: 'converter',
-    from: 'json',
-    to: 'string',
-    exec: function(json, conversionContext) {
-      return JSON.stringify(json, null, '  ');
-    }
   }
 ];
diff --git a/toolkit/devtools/gcli/source/lib/gcli/converters/converters.js b/toolkit/devtools/gcli/source/lib/gcli/converters/converters.js
--- a/toolkit/devtools/gcli/source/lib/gcli/converters/converters.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/converters/converters.js
@@ -94,38 +94,29 @@ var stringViewStringConverter = {
  */
 var errorDomConverter = {
   item: 'converter',
   from: 'error',
   to: 'dom',
   exec: function(ex, conversionContext) {
     var node = util.createElement(conversionContext.document, 'p');
     node.className = 'gcli-error';
-    node.textContent = errorStringConverter.exec(ex, conversionContext);
+    node.textContent = ex;
     return node;
   }
 };
 
 /**
  * Convert an exception to a string
  */
 var errorStringConverter = {
   item: 'converter',
   from: 'error',
   to: 'string',
   exec: function(ex, conversionContext) {
-    if (typeof ex === 'string') {
-      return ex;
-    }
-    if (ex instanceof Error) {
-      return '' + ex;
-    }
-    if (typeof ex.message === 'string') {
-      return ex.message;
-    }
     return '' + ex;
   }
 };
 
 /**
  * Create a new converter by using 2 converters, one after the other
  */
 function getChainConverter(first, second) {
@@ -213,25 +204,16 @@ Converters.prototype.get = function(from
     }
 
     return this._getFallbackConverter(from, to);
   }
   return converter;
 };
 
 /**
- * Get all the registered converters. Most for debugging
- */
-Converters.prototype.getAll = function() {
-  return Object.keys(this._registered.from).map(function(name) {
-    return this._registered.from[name];
-  }.bind(this));
-};
-
-/**
  * Helper for get to pick the best fallback converter
  */
 Converters.prototype._getFallbackConverter = function(from, to) {
   console.error('No converter from ' + from + ' to ' + to + '. Using fallback');
 
   if (to === 'dom') {
     return fallbackDomConverter;
   }
diff --git a/toolkit/devtools/gcli/source/lib/gcli/fields/fields.js b/toolkit/devtools/gcli/source/lib/gcli/fields/fields.js
--- a/toolkit/devtools/gcli/source/lib/gcli/fields/fields.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/fields/fields.js
@@ -194,23 +194,16 @@ Fields.prototype.get = function(type, op
 
   if (highestClaim < Field.DEFAULT) {
     return new BlankField(type, options);
   }
 
   return new FieldConstructor(type, options);
 };
 
-/**
- * Get all the registered fields. Most for debugging
- */
-Fields.prototype.getAll = function() {
-  return this._fieldCtors.slice();
-};
-
 exports.Fields = Fields;
 
 /**
  * For use with delegate types that do not yet have anything to resolve to.
  * BlankFields are not for general use.
  */
 function BlankField(type, options) {
   Field.call(this, type, options);
diff --git a/toolkit/devtools/gcli/source/lib/gcli/fields/selection.js b/toolkit/devtools/gcli/source/lib/gcli/fields/selection.js
--- a/toolkit/devtools/gcli/source/lib/gcli/fields/selection.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/fields/selection.js
@@ -69,30 +69,28 @@ SelectionField.prototype.setConversion =
     var items = predictions.map(function(prediction) {
       // If the prediction value is an 'item' (that is an object with a name and
       // description) then use that, otherwise use the prediction itself, because
       // at least that has a name.
       return prediction.value && prediction.value.description ?
           prediction.value :
           prediction;
     }, this);
-    if (this.menu != null) {
-      this.menu.show(items, conversion.arg.text);
-    }
-  }.bind(this)).catch(util.errorHandler);
+    this.menu.show(items, conversion.arg.text);
+  }.bind(this), util.errorHandler);
 };
 
 SelectionField.prototype.itemClicked = function(ev) {
   var arg = new Argument(ev.name, '', ' ');
   var context = this.requisition.executionContext;
 
   this.type.parse(arg, context).then(function(conversion) {
     this.onFieldChange({ conversion: conversion });
     this.setMessage(conversion.message);
-  }.bind(this)).catch(util.errorHandler);
+  }.bind(this)).then(null, util.errorHandler);
 };
 
 SelectionField.prototype.getConversion = function() {
   // This tweaks the prefix/suffix of the argument to fit
   this.arg = this.arg.beget({ text: this.input.value });
   return this.type.parse(this.arg, this.requisition.executionContext);
 };
 
diff --git a/toolkit/devtools/gcli/source/lib/gcli/index.js b/toolkit/devtools/gcli/source/lib/gcli/index.js
--- a/toolkit/devtools/gcli/source/lib/gcli/index.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/index.js
@@ -13,17 +13,165 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
 
 var Cc = require('chrome').Cc;
 var Ci = require('chrome').Ci;
+var Cu = require('chrome').Cu;
 
+/*
+ * GCLI is built from a number of components (called items) composed as
+ * required for each environment.
+ * When adding to or removing from this list, we should keep the basics in sync
+ * with the other environments.
+ * See:
+ * - lib/gcli/index.js: Generic basic set (without commands)
+ * - lib/gcli/demo.js: Adds demo commands to basic set for use in web demo
+ * - gcli.js: Add commands to basic set for use in Node command line
+ * - lib/gcli/index.js: (mozmaster branch) From scratch listing for Firefox
+ * - lib/gcli/connectors/index.js: Client only items when executing remotely
+ * - lib/gcli/connectors/direct.js: Test items for connecting to in-process GCLI
+ */
+exports.items = [
+  require('./types/delegate').items,
+  require('./types/selection').items,
+  require('./types/array').items,
+
+  require('./types/boolean').items,
+  require('./types/command').items,
+  require('./types/date').items,
+  require('./types/file').items,
+  require('./types/javascript').items,
+  require('./types/node').items,
+  require('./types/number').items,
+  require('./types/resource').items,
+  require('./types/setting').items,
+  require('./types/string').items,
+  require('./types/union').items,
+  require('./types/url').items,
+
+  require('./fields/fields').items,
+  require('./fields/delegate').items,
+  require('./fields/selection').items,
+
+  require('./ui/focus').items,
+  require('./ui/intro').items,
+
+  require('./converters/converters').items,
+  require('./converters/basic').items,
+  // require('./converters/html').items, // Prevent use of innerHTML
+  require('./converters/terminal').items,
+
+  require('./languages/command').items,
+  require('./languages/javascript').items,
+
+  // require('./connectors/direct').items, // No need for loopback testing
+  // require('./connectors/rdp').items, // Needs fixing
+  // require('./connectors/websocket').items, // Not from chrome
+  // require('./connectors/xhr').items, // Not from chrome
+
+  // require('./cli').items, // No need for '{' with web console
+  require('./commands/clear').items,
+  // require('./commands/connect').items, // We need to fix our RDP connector
+  require('./commands/context').items,
+  // require('./commands/exec').items, // No exec in Firefox yet
+  require('./commands/global').items,
+  require('./commands/help').items,
+  // require('./commands/intro').items, // No need for intro command
+  require('./commands/lang').items,
+  // require('./commands/mocks').items, // Only for testing
+  require('./commands/pref').items,
+  // require('./commands/preflist').items, // Too slow in Firefox
+  // require('./commands/test').items, // Only for testing
+
+  // No demo or node commands
+
+].reduce(function(prev, curr) { return prev.concat(curr); }, []);
+
+var api = require('./api');
+var system = api.createSystem();
+
+// Export the system API by adding it to our exports
+Object.keys(system).forEach(function(key) {
+  exports[key] = system[key];
+});
+
+system.addItems(exports.items);
+
+var host = require('./util/host');
+
+exports.useTarget = host.script.useTarget;
+
+/**
+ * This code is internal and subject to change without notice.
+ * createDisplay() for Firefox requires an options object with the following
+ * members:
+ * - contentDocument: From the window of the attached tab
+ * - chromeDocument: GCLITerm.document
+ * - environment.hudId: GCLITerm.hudId
+ * - jsEnvironment.globalObject: 'window'
+ * - jsEnvironment.evalFunction: 'eval' in a sandbox
+ * - inputElement: GCLITerm.inputNode
+ * - completeElement: GCLITerm.completeNode
+ * - hintElement: GCLITerm.hintNode
+ * - inputBackgroundElement: GCLITerm.inputStack
+ */
+exports.createDisplay = function(options) {
+  var FFDisplay = require('./mozui/ffdisplay').FFDisplay;
+  return new FFDisplay(system, options);
+};
+
+exports.createRequisition = function(options) {
+  var Requisition = require('./cli').Requisition;
+  return new Requisition(system, options);
+};
 
 var prefSvc = Cc['@mozilla.org/preferences-service;1']
                         .getService(Ci.nsIPrefService);
 var prefBranch = prefSvc.getBranch(null).QueryInterface(Ci.nsIPrefBranch2);
 
 exports.hiddenByChromePref = function() {
   return !prefBranch.prefHasUserValue('devtools.chrome.enabled');
 };
+
+
+try {
+  var Services = Cu.import('resource://gre/modules/Services.jsm', {}).Services;
+  var stringBundle = Services.strings.createBundle(
+          'chrome://browser/locale/devtools/gclicommands.properties');
+
+  /**
+   * Lookup a string in the GCLI string bundle
+   */
+  exports.lookup = function(name) {
+    try {
+      return stringBundle.GetStringFromName(name);
+    }
+    catch (ex) {
+      throw new Error('Failure in lookup(\'' + name + '\')');
+    }
+  };
+
+  /**
+   * Lookup a string in the GCLI string bundle
+   */
+  exports.lookupFormat = function(name, swaps) {
+    try {
+      return stringBundle.formatStringFromName(name, swaps, swaps.length);
+    }
+    catch (ex) {
+      throw new Error('Failure in lookupFormat(\'' + name + '\')');
+    }
+  };
+}
+catch (ex) {
+  console.error('Using string fallbacks', ex);
+
+  exports.lookup = function(name) {
+    return name;
+  };
+  exports.lookupFormat = function(name, swaps) {
+    return name;
+  };
+}
diff --git a/toolkit/devtools/gcli/source/lib/gcli/languages/command.js b/toolkit/devtools/gcli/source/lib/gcli/languages/command.js
--- a/toolkit/devtools/gcli/source/lib/gcli/languages/command.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/languages/command.js
@@ -118,16 +118,17 @@ var commandLanguage = exports.commandLan
     this.requisition.commandOutputManager.onOutput.remove(this.outputted, this);
     this.requisition.onExternalUpdate.remove(this.textChanged, this);
 
     this.terminal = undefined;
     this.requisition = undefined;
     this.commandDom = undefined;
   },
 
+  // From the requisition.textChanged event
   textChanged: function() {
     if (this.terminal == null) {
       return; // This can happen post-destroy()
     }
 
     if (this.terminal._caretChange == null) {
       // We weren't expecting a change so this was requested by the hint system
       // we should move the cursor to the end of the 'changed section', and the
@@ -178,17 +179,17 @@ var commandLanguage = exports.commandLan
       }
 
       // This can be kicked off either by requisition doing an assign or by
       // terminal noticing a cursor movement out of a command, so we should
       // check that this really is a new assignment
       var isNew = (this.assignment !== newAssignment);
 
       this.assignment = newAssignment;
-      this.terminal.updateCompletion().catch(util.errorHandler);
+      this.terminal.updateCompletion();
 
       if (isNew) {
         this.updateHints();
       }
 
       if (this.assignment.param.type.onEnter) {
         this.assignment.param.type.onEnter(this.assignment);
       }
@@ -245,32 +246,32 @@ var commandLanguage = exports.commandLan
 
   /**
    * See also handleDownArrow for some symmetry
    */
   handleUpArrow: function() {
     // If the user is on a valid value, then we increment the value, but if
     // they've typed something that's not right we page through predictions
     if (this.assignment.getStatus() === Status.VALID) {
-      return this.requisition.nudge(this.assignment, 1).then(function() {
+      return this.requisition.increment(this.assignment).then(function() {
         this.textChanged();
         this.focusManager.onInputChange();
         return true;
       }.bind(this));
     }
 
     return Promise.resolve(false);
   },
 
   /**
    * See also handleUpArrow for some symmetry
    */
   handleDownArrow: function() {
     if (this.assignment.getStatus() === Status.VALID) {
-      return this.requisition.nudge(this.assignment, -1).then(function() {
+      return this.requisition.decrement(this.assignment).then(function() {
         this.textChanged();
         this.focusManager.onInputChange();
         return true;
       }.bind(this));
     }
 
     return Promise.resolve(false);
   },
@@ -280,20 +281,17 @@ var commandLanguage = exports.commandLan
    */
   handleReturn: function(input) {
     // Deny RETURN unless the command might work
     if (this.requisition.status !== Status.VALID) {
       return Promise.resolve(false);
     }
 
     this.terminal.history.add(input);
-    this.terminal.unsetChoice().catch(util.errorHandler);
-
-    this.terminal._previousValue = this.terminal.inputElement.value;
-    this.terminal.inputElement.value = '';
+    this.terminal.unsetChoice();
 
     return this.requisition.exec().then(function() {
       this.textChanged();
       return true;
     }.bind(this));
   },
 
   /**
@@ -493,17 +491,17 @@ var commandLanguage = exports.commandLan
         var event = document.createEvent('Event');
         event.initEvent('load', true, true);
         event.addedElement = node;
         node.dispatchEvent(event);
 
         this.terminal.scrollToBottom();
         data.throbEle.style.display = ev.output.completed ? 'none' : 'block';
       }.bind(this));
-    }.bind(this)).catch(console.error);
+    }.bind(this)).then(null, console.error);
 
     this.terminal.addElement(data.rowinEle);
     this.terminal.addElement(data.rowoutEle);
     this.terminal.scrollToBottom();
 
     this.focusManager.outputted();
   },
 
diff --git a/toolkit/devtools/gcli/source/lib/gcli/languages/javascript.js b/toolkit/devtools/gcli/source/lib/gcli/languages/javascript.js
--- a/toolkit/devtools/gcli/source/lib/gcli/languages/javascript.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/languages/javascript.js
@@ -37,17 +37,18 @@ exports.items = [
       this.updateHints();
     },
 
     destroy: function() {
       this.document = undefined;
     },
 
     exec: function(input) {
-      return this.evaluate(input).then(function(response) {
+      return this.eval(input).then(function(response) {
+        // console.log('javascript.exec', response);
         var output = (response.exception != null) ?
                       response.exception.class :
                       response.output;
 
         var isSameString = typeof output === 'string' &&
                            input.substr(1, input.length - 2) === output;
         var isSameOther = typeof output !== 'string' &&
                           input === '' + output;
@@ -74,13 +75,13 @@ exports.items = [
           line = input + ' // ' + output;
         }
 
         var grammar = prism.languages[this.name];
         return prism.highlight(line, grammar, this.name);
       }.bind(this));
     },
 
-    evaluate: function(input) {
-      return host.script.evaluate(input);
+    eval: function(input) {
+      return host.script.eval(input);
     }
   }
 ];
diff --git a/toolkit/devtools/gcli/source/lib/gcli/languages/languages.js b/toolkit/devtools/gcli/source/lib/gcli/languages/languages.js
--- a/toolkit/devtools/gcli/source/lib/gcli/languages/languages.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/languages/languages.js
@@ -46,48 +46,46 @@ var baseLanguage = {
     return Promise.resolve(false);
   },
 
   handleDownArrow: function() {
     return Promise.resolve(false);
   },
 
   handleTab: function() {
-    return this.terminal.unsetChoice().then(function() {
-      return RESOLVED;
-    }, util.errorHandler);
+    this.terminal.unsetChoice();
+    return RESOLVED;
   },
 
   handleInput: function(input) {
     if (input === ':') {
       return this.terminal.setInput('').then(function() {
         return this.terminal.pushLanguage('commands');
       }.bind(this));
     }
 
-    return this.terminal.unsetChoice().then(function() {
-      return RESOLVED;
-    }, util.errorHandler);
+    this.terminal.unsetChoice();
+    return RESOLVED;
   },
 
   handleReturn: function(input) {
     var rowoutEle = this.document.createElement('pre');
     rowoutEle.classList.add('gcli-row-out');
     rowoutEle.classList.add('gcli-row-script');
     rowoutEle.setAttribute('aria-live', 'assertive');
 
     return this.exec(input).then(function(line) {
       rowoutEle.innerHTML = line;
 
       this.terminal.addElement(rowoutEle);
       this.terminal.scrollToBottom();
 
       this.focusManager.outputted();
 
-      this.terminal.unsetChoice().catch(util.errorHandler);
+      this.terminal.unsetChoice();
       this.terminal.inputElement.value = '';
     }.bind(this));
   },
 
   setCursor: function(cursor) {
     this.terminal.inputElement.selectionStart = cursor.start;
     this.terminal.inputElement.selectionEnd = cursor.end;
   },
diff --git a/toolkit/devtools/gcli/source/lib/gcli/mozui/ffdisplay.js b/toolkit/devtools/gcli/source/lib/gcli/mozui/ffdisplay.js
new file mode 100644
--- /dev/null
+++ b/toolkit/devtools/gcli/source/lib/gcli/mozui/ffdisplay.js
@@ -0,0 +1,237 @@
+/*
+ * Copyright 2012, Mozilla Foundation and contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+'use strict';
+
+var Inputter = require('./inputter').Inputter;
+var Completer = require('./completer').Completer;
+var Tooltip = require('./tooltip').Tooltip;
+var FocusManager = require('../ui/focus').FocusManager;
+
+var Requisition = require('../cli').Requisition;
+
+var cli = require('../cli');
+var jstype = require('../types/javascript');
+var nodetype = require('../types/node');
+var resource = require('../types/resource');
+var intro = require('../ui/intro');
+
+var CommandOutputManager = require('../commands/commands').CommandOutputManager;
+
+/**
+ * Handy utility to inject the content document (i.e. for the viewed page,
+ * not for chrome) into the various components.
+ */
+function setContentDocument(document) {
+  if (document) {
+    nodetype.setDocument(document);
+    resource.setDocument(document);
+  }
+  else {
+    resource.unsetDocument();
+    nodetype.unsetDocument();
+    jstype.unsetGlobalObject();
+  }
+}
+
+/**
+ * FFDisplay is responsible for generating the UI for GCLI, this implementation
+ * is a special case for use inside Firefox
+ * @param options A configuration object containing the following:
+ * - contentDocument (optional)
+ * - chromeDocument
+ * - hintElement
+ * - inputElement
+ * - completeElement
+ * - backgroundElement
+ * - outputDocument
+ * - consoleWrap (optional)
+ * - eval (optional)
+ * - environment
+ * - chromeWindow
+ * - commandOutputManager (optional)
+ */
+function FFDisplay(system, options) {
+  if (options.eval) {
+    cli.setEvalFunction(options.eval);
+  }
+  setContentDocument(options.contentDocument);
+
+  this.requisition = new Requisition(system, {
+    environment: options.environment,
+    document: options.outputDocument
+  });
+  this.onOutput = this.requisition.commandOutputManager.onOutput;
+
+  this.focusManager = new FocusManager(options.chromeDocument, system.settings);
+  this.onVisibilityChange = this.focusManager.onVisibilityChange;
+
+  this.inputter = new Inputter(options, {
+    requisition: this.requisition,
+    focusManager: this.focusManager,
+    element: options.inputElement
+  });
+
+  this.completer = new Completer({
+    requisition: this.requisition,
+    inputter: this.inputter,
+    backgroundElement: options.backgroundElement,
+    element: options.completeElement
+  });
+
+  this.tooltip = new Tooltip(options, {
+    requisition: this.requisition,
+    focusManager: this.focusManager,
+    inputter: this.inputter,
+    element: options.hintElement
+  });
+
+  this.inputter.tooltip = this.tooltip;
+
+  if (options.consoleWrap) {
+    this.resizer = this.resizer.bind(this);
+
+    this.consoleWrap = options.consoleWrap;
+    var win = options.consoleWrap.ownerDocument.defaultView;
+    win.addEventListener('resize', this.resizer, false);
+  }
+
+  this.options = options;
+}
+
+/**
+ * The main Display calls this as part of startup since it registers listeners
+ * for output first. The firefox display can't do this, so it has to be a
+ * separate method
+ */
+FFDisplay.prototype.maybeShowIntro = function() {
+  intro.maybeShowIntro(this.requisition.commandOutputManager,
+                       this.requisition.conversionContext);
+};
+
+/**
+ * Called when the page to which we're attached changes
+ * @params options Object with the following properties:
+ * - contentDocument: Points to the page that we should now work against
+ */
+FFDisplay.prototype.reattach = function(options) {
+  setContentDocument(options.contentDocument);
+};
+
+/**
+ * Avoid memory leaks
+ */
+FFDisplay.prototype.destroy = function() {
+  if (this.consoleWrap) {
+    var win = this.options.consoleWrap.ownerDocument.defaultView;
+    win.removeEventListener('resize', this.resizer, false);
+  }
+
+  this.tooltip.destroy();
+  this.completer.destroy();
+  this.inputter.destroy();
+  this.focusManager.destroy();
+
+  this.requisition.destroy();
+
+  setContentDocument(null);
+  cli.unsetEvalFunction();
+
+  delete this.options;
+
+  // We could also delete the following objects if we have hard-to-track-down
+  // memory leaks, as a belt-and-braces approach, however this prevents our
+  // DOM node hunter script from looking in all the nooks and crannies, so it's
+  // better if we can be leak-free without deleting them:
+  // - consoleWrap, resizer, tooltip, completer, inputter,
+  // - focusManager, onVisibilityChange, requisition, commandOutputManager
+};
+
+/**
+ * Called on chrome window resize, or on divider slide
+ */
+FFDisplay.prototype.resizer = function() {
+  // Bug 705109: There are several numbers hard-coded in this function.
+  // This is simpler than calculating them, but error-prone when the UI setup,
+  // the styling or display settings change.
+
+  var parentRect = this.options.consoleWrap.getBoundingClientRect();
+  // Magic number: 64 is the size of the toolbar above the output area
+  var parentHeight = parentRect.bottom - parentRect.top - 64;
+
+  // Magic number: 100 is the size at which we decide the hints are too small
+  // to be useful, so we hide them
+  if (parentHeight < 100) {
+    this.options.hintElement.classList.add('gcliterm-hint-nospace');
+  }
+  else {
+    this.options.hintElement.classList.remove('gcliterm-hint-nospace');
+    this.options.hintElement.style.overflowY = null;
+    this.options.hintElement.style.borderBottomColor = 'white';
+  }
+
+  // We also try to make the max-width of any GCLI elements so they don't
+  // extend outside the scroll area.
+  var doc = this.options.hintElement.ownerDocument;
+
+  var outputNode = this.options.hintElement.parentNode.parentNode.children[1];
+  var listItems = outputNode.getElementsByClassName('hud-msg-node');
+
+  // This is an top-side estimate. We could try to calculate it, maybe using
+  // something along these lines http://www.alexandre-gomes.com/?p=115 However
+  // experience has shown this to be hard to get to work reliably
+  // Also we don't need to be precise. If we use a number that is too big then
+  // the only down-side is too great a right margin
+  var scrollbarWidth = 20;
+
+  if (listItems.length > 0) {
+    var parentWidth = outputNode.getBoundingClientRect().width - scrollbarWidth;
+    var otherWidth;
+    var body;
+
+    for (var i = 0; i < listItems.length; ++i) {
+      var listItem = listItems[i];
+      // a.k.a 'var otherWidth = 132'
+      otherWidth = 0;
+      body = null;
+
+      for (var j = 0; j < listItem.children.length; j++) {
+        var child = listItem.children[j];
+
+        if (child.classList.contains('gcliterm-msg-body')) {
+          body = child.children[0];
+        }
+        else {
+          otherWidth += child.getBoundingClientRect().width;
+        }
+
+        var styles = doc.defaultView.getComputedStyle(child, null);
+        otherWidth += parseInt(styles.borderLeftWidth, 10) +
+                      parseInt(styles.borderRightWidth, 10) +
+                      parseInt(styles.paddingLeft, 10) +
+                      parseInt(styles.paddingRight, 10) +
+                      parseInt(styles.marginLeft, 10) +
+                      parseInt(styles.marginRight, 10);
+      }
+
+      if (body) {
+        body.style.width = (parentWidth - otherWidth) + 'px';
+      }
+    }
+  }
+};
+
+exports.FFDisplay = FFDisplay;
diff --git a/toolkit/devtools/gcli/source/lib/gcli/mozui/inputter.js b/toolkit/devtools/gcli/source/lib/gcli/mozui/inputter.js
--- a/toolkit/devtools/gcli/source/lib/gcli/mozui/inputter.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/mozui/inputter.js
@@ -22,22 +22,24 @@ var KeyEvent = require('../util/util').K
 
 var Status = require('../types/types').Status;
 var History = require('../ui/history').History;
 
 var RESOLVED = Promise.resolve(true);
 
 /**
  * A wrapper to take care of the functions concerning an input element
+ * @param options Object containing user customization properties, including:
+ * - promptWidth (default=22px)
  * @param components Object that links to other UI components. GCLI provided:
  * - requisition
  * - focusManager
  * - element
  */
-function Inputter(components) {
+function Inputter(options, components) {
   this.requisition = components.requisition;
   this.focusManager = components.focusManager;
 
   this.element = components.element;
   this.element.classList.add('gcli-in-input');
   this.element.spellcheck = false;
 
   this.document = this.element.ownerDocument;
@@ -180,17 +182,17 @@ Inputter.prototype.outputted = function(
 /**
  * Handler for the input-element.onMouseUp event
  */
 Inputter.prototype.onMouseUp = function(ev) {
   this._checkAssignment();
 };
 
 /**
- * Function called when we think the text might have changed
+ * Handler for the Requisition.textChanged event
  */
 Inputter.prototype.textChanged = function() {
   if (!this.document) {
     return; // This can happen post-destroy()
   }
 
   if (this._caretChange == null) {
     // We weren't expecting a change so this was requested by the hint system
@@ -424,17 +426,17 @@ Inputter.prototype.onKeyDown = function(
 };
 
 /**
  * Handler for use with DOM events, which just calls the promise enabled
  * handleKeyUp function but checks the exit state of the promise so we know
  * if something went wrong.
  */
 Inputter.prototype.onKeyUp = function(ev) {
-  this.handleKeyUp(ev).catch(util.errorHandler);
+  this.handleKeyUp(ev).then(null, util.errorHandler);
 };
 
 /**
  * The main keyboard processing loop
  * @return A promise that resolves (to undefined) when the actions kicked off
  * by this handler are completed.
  */
 Inputter.prototype.handleKeyUp = function(ev) {
@@ -469,19 +471,19 @@ Inputter.prototype.handleKeyUp = functio
   }
 
   this._scrollingThroughHistory = false;
   this._caretChange = Caret.NO_CHANGE;
 
   this._completed = this.requisition.update(this.element.value);
   this._previousValue = this.element.value;
 
-  return this._completed.then(function() {
+  return this._completed.then(function(updated) {
     // Abort UI changes if this UI update has been overtaken
-    if (this._previousValue === this.element.value) {
+    if (updated) {
       this._choice = null;
       this.textChanged();
       this.onChoiceChange({ choice: this._choice });
     }
   }.bind(this));
 };
 
 /**
@@ -499,17 +501,17 @@ Inputter.prototype._handleUpArrow = func
       this.textChanged();
       return updated;
     }.bind(this));
   }
 
   // If the user is on a valid value, then we increment the value, but if
   // they've typed something that's not right we page through predictions
   if (this.assignment.getStatus() === Status.VALID) {
-    return this.requisition.nudge(this.assignment, 1).then(function() {
+    return this.requisition.increment(this.assignment).then(function() {
       // See notes on focusManager.onInputChange in onKeyDown
       this.textChanged();
       if (this.focusManager) {
         this.focusManager.onInputChange();
       }
     }.bind(this));
   }
 
@@ -531,17 +533,17 @@ Inputter.prototype._handleDownArrow = fu
     return this.requisition.update(this.history.forward()).then(function(updated) {
       this.textChanged();
       return updated;
     }.bind(this));
   }
 
   // See notes above for the UP key
   if (this.assignment.getStatus() === Status.VALID) {
-    return this.requisition.nudge(this.assignment, -1).then(function() {
+    return this.requisition.decrement(this.assignment).then(function() {
       // See notes on focusManager.onInputChange in onKeyDown
       this.textChanged();
       if (this.focusManager) {
         this.focusManager.onInputChange();
       }
     }.bind(this));
   }
 
@@ -584,18 +586,19 @@ Inputter.prototype._handleTab = function
 
   // If the TAB keypress took the cursor from another field to this one,
   // then they get the keydown/keypress, and we get the keyup. In this
   // case we don't want to do any completion.
   // If the time of the keydown/keypress of TAB was close (i.e. within
   // 1 second) to the time of the keyup then we assume that we got them
   // both, and do the completion.
   if (hasContents && this.lastTabDownAt + 1000 > ev.timeStamp) {
-    // It's possible for TAB to not change the input, in which case the caret
-    // move will not be processed. So we check that this is done first
+    // It's possible for TAB to not change the input, in which case the
+    // textChanged event will not fire, and the caret move will not be
+    // processed. So we check that this is done first
     this._caretChange = Caret.TO_ARG_END;
     var inputState = this.getInputState();
     this._processCaretChange(inputState);
 
     if (this._choice == null) {
       this._choice = 0;
     }
 
diff --git a/toolkit/devtools/gcli/source/lib/gcli/mozui/tooltip.js b/toolkit/devtools/gcli/source/lib/gcli/mozui/tooltip.js
--- a/toolkit/devtools/gcli/source/lib/gcli/mozui/tooltip.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/mozui/tooltip.js
@@ -28,30 +28,33 @@ var tooltipHtml =
   '  ${field.element}\n' +
   '  <div class="gcli-tt-error" save="${errorEle}">${assignment.conversion.message}</div>\n' +
   '  <div class="gcli-tt-highlight" save="${highlightEle}"></div>\n' +
   '</div>';
 
 /**
  * A widget to display an inline dialog which allows the user to fill out
  * the arguments to a command.
+ * @param options Object containing user customization properties, including:
+ * - tooltipClass (default='gcli-tooltip'): Custom class name when generating
+ *   the top level element which allows different layout systems
  * @param components Object that links to other UI components. GCLI provided:
  * - requisition: The Requisition to fill out
  * - inputter: An instance of Inputter
  * - focusManager: Component to manage hiding/showing this element
  * - panelElement (optional): The element to show/hide on visibility events
  * - element: The root element to populate
  */
-function Tooltip(components) {
+function Tooltip(options, components) {
   this.inputter = components.inputter;
   this.requisition = components.requisition;
   this.focusManager = components.focusManager;
 
   this.element = components.element;
-  this.element.classList.add('gcliterm-tooltip');
+  this.element.classList.add(options.tooltipClass || 'gcli-tooltip');
   this.document = this.element.ownerDocument;
 
   this.panelElement = components.panelElement;
   if (this.panelElement) {
     this.panelElement.classList.add('gcli-panel-hide');
     this.focusManager.onVisibilityChange.add(this.visibilityChanged, this);
   }
   this.focusManager.addMonitoredElement(this.element, 'tooltip');
@@ -168,17 +171,17 @@ Tooltip.prototype.assignmentChanged = fu
  */
 Tooltip.prototype.choiceChanged = function(ev) {
   if (this.field && this.field.menu) {
     var conversion = this.assignment.conversion;
     var context = this.requisition.executionContext;
     conversion.constrainPredictionIndex(context, ev.choice).then(function(choice) {
       this.field.menu._choice = choice;
       this.field.menu._updateHighlight();
-    }.bind(this)).catch(util.errorHandler);
+    }.bind(this)).then(null, util.errorHandler);
   }
 };
 
 /**
  * Allow the inputter to use RETURN to chose the current menu item when
  * it can't execute the command line
  * @return true if there was a selection to use, false otherwise
  */
diff --git a/toolkit/devtools/gcli/source/lib/gcli/settings.js b/toolkit/devtools/gcli/source/lib/gcli/settings.js
--- a/toolkit/devtools/gcli/source/lib/gcli/settings.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/settings.js
@@ -101,16 +101,17 @@ Settings.prototype.getAll = function(fil
 
   return this._settingsAll.filter(function(setting) {
     return setting.name.indexOf(filter) !== -1;
   }.bind(this));
 };
 
 /**
  * Add a new setting
+ * @return The new Setting object
  */
 Settings.prototype.add = function(prefSpec) {
   var setting = new Setting(this, prefSpec);
 
   if (this._settingsMap.has(setting.name)) {
     // Once exists already, we're going to need to replace it in the array
     for (var i = 0; i < this._settingsAll.length; i++) {
       if (this._settingsAll[i].name === setting.name) {
diff --git a/toolkit/devtools/gcli/source/lib/gcli/system.js b/toolkit/devtools/gcli/source/lib/gcli/system.js
deleted file mode 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/system.js
+++ /dev/null
@@ -1,371 +0,0 @@
-/*
- * Copyright 2012, Mozilla Foundation and contributors
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-'use strict';
-
-var Promise = require('./util/promise').Promise;
-var util = require('./util/util');
-var Commands = require('./commands/commands').Commands;
-var Connectors = require('./connectors/connectors').Connectors;
-var Converters = require('./converters/converters').Converters;
-var Fields = require('./fields/fields').Fields;
-var Languages = require('./languages/languages').Languages;
-var Settings = require('./settings').Settings;
-var Types = require('./types/types').Types;
-
-/**
- * This is the heart of the API that we expose to the outside.
- * @param options Object that customizes how the system acts. Valid properties:
- * - commands, connectors, converters, fields, languages, settings, types:
- *   Custom configured manager objects for these item types
- * - location: a system with a location will ignore commands that don't have a
- *   matching runAt property. This is principly for client/server setups where
- *   we import commands from the server to the client, so a system with
- *   `{ location: 'client' }` will silently ignore commands with
- *   `{ runAt: 'server' }`. Any system without a location will accept commands
- *   with any runAt property (including none).
- */
-exports.createSystem = function(options) {
-  options = options || {};
-  var location = options.location;
-
-  // The plural/singular thing may make you want to scream, but it allows us
-  // to say components[getItemType(item)], so a lookup here (and below) saves
-  // multiple lookups in the middle of the code
-  var components = {
-    connector: options.connectors || new Connectors(),
-    converter: options.converters || new Converters(),
-    field: options.fields || new Fields(),
-    language: options.languages || new Languages(),
-    type: options.types || new Types()
-  };
-  components.setting = new Settings(components.type);
-  components.command = new Commands(components.type, location);
-
-  var getItemType = function(item) {
-    if (item.item) {
-      return item.item;
-    }
-    // Some items are registered using the constructor so we need to check
-    // the prototype for the the type of the item
-    return (item.prototype && item.prototype.item) ?
-           item.prototype.item : 'command';
-  };
-
-  var addItem = function(item) {
-    try {
-      components[getItemType(item)].add(item);
-    }
-    catch (ex) {
-      if (item != null) {
-        console.error('While adding: ' + item.name);
-      }
-      throw ex;
-    }
-  };
-
-  var removeItem = function(item) {
-    components[getItemType(item)].remove(item);
-  };
-
-  /**
-   * loadableModules is a lookup of names to module loader functions (like
-   * the venerable 'require') to which we can pass a name and get back a
-   * JS object (or a promise of a JS object). This allows us to have custom
-   * loaders to get stuff from the filesystem etc.
-   */
-  var loadableModules = {};
-
-  /**
-   * loadedModules is a lookup by name of the things returned by the functions
-   * in loadableModules so we can track what we need to unload / reload.
-   */
-  var loadedModules = {};
-
-  var unloadModule = function(name) {
-    var existingModule = loadedModules[name];
-    if (existingModule != null) {
-      existingModule.items.forEach(removeItem);
-    }
-    delete loadedModules[name];
-  };
-
-  var loadModule = function(name) {
-    var existingModule = loadedModules[name];
-    unloadModule(name);
-
-    // And load the new items
-    try {
-      var loader = loadableModules[name];
-      return Promise.resolve(loader(name)).then(function(newModule) {
-        if (existingModule === newModule) {
-          return;
-        }
-
-        if (newModule == null) {
-          throw 'Module \'' + name + '\' not found';
-        }
-
-        if (newModule.items == null || typeof newModule.items.forEach !== 'function') {
-          console.log('Exported properties: ' + Object.keys(newModule).join(', '));
-          throw 'Module \'' + name + '\' has no \'items\' array export';
-        }
-
-        newModule.items.forEach(addItem);
-
-        loadedModules[name] = newModule;
-      });
-    }
-    catch (ex) {
-      console.error('Failed to load module ' + name + ': ' + ex);
-      console.error(ex.stack);
-
-      return Promise.resolve();
-    }
-  };
-
-  var pendingChanges = false;
-
-  var system = {
-    addItems: function(items) {
-      items.forEach(addItem);
-    },
-
-    removeItems: function(items) {
-      items.forEach(removeItem);
-    },
-
-    addItemsByModule: function(names, options) {
-      var promises = [];
-
-      options = options || {};
-      if (!options.delayedLoad) {
-        // We could be about to add many commands, just report the change once
-        this.commands.onCommandsChange.holdFire();
-      }
-
-      if (typeof names === 'string') {
-        names = [ names ];
-      }
-      names.forEach(function(name) {
-        if (options.loader == null) {
-          options.loader = function(name) {
-            return require(name);
-          };
-        }
-        loadableModules[name] = options.loader;
-
-        if (options.delayedLoad) {
-          pendingChanges = true;
-        }
-        else {
-          promises.push(loadModule(name).catch(console.error));
-        }
-      });
-
-      if (options.delayedLoad) {
-        return Promise.resolve();
-      }
-      else {
-        return Promise.all(promises).then(function() {
-          this.commands.onCommandsChange.resumeFire();
-        }.bind(this));
-      }
-    },
-
-    removeItemsByModule: function(name) {
-      this.commands.onCommandsChange.holdFire();
-
-      delete loadableModules[name];
-      unloadModule(name);
-
-      this.commands.onCommandsChange.resumeFire();
-    },
-
-    load: function() {
-      if (!pendingChanges) {
-        return Promise.resolve();
-      }
-      this.commands.onCommandsChange.holdFire();
-
-      // clone loadedModules, so we can remove what is left at the end
-      var modules = Object.keys(loadedModules).map(function(name) {
-        return loadedModules[name];
-      });
-
-      var promises = Object.keys(loadableModules).map(function(name) {
-        delete modules[name];
-        return loadModule(name).catch(console.error);
-      });
-
-      Object.keys(modules).forEach(unloadModule);
-      pendingChanges = false;
-
-      return Promise.all(promises).then(function() {
-        this.commands.onCommandsChange.resumeFire();
-      }.bind(this));
-    },
-
-    destroy: function() {
-      this.commands.onCommandsChange.holdFire();
-
-      Object.keys(loadedModules).forEach(function(name) {
-        unloadModule(name);
-      });
-
-      this.commands.onCommandsChange.resumeFire();
-    },
-
-    toString: function() {
-      return 'System [' +
-             'commands:' + components.command.getAll().length + ', ' +
-             'connectors:' + components.connector.getAll().length + ', ' +
-             'converters:' + components.converter.getAll().length + ', ' +
-             'fields:' + components.field.getAll().length + ', ' +
-             'settings:' + components.setting.getAll().length + ', ' +
-             'types:' + components.type.getTypeNames().length + ']';
-    }
-  };
-
-  Object.defineProperty(system, 'commands', {
-    get: function() { return components.command; },
-    enumerable: true
-  });
-
-  Object.defineProperty(system, 'connectors', {
-    get: function() { return components.connector; },
-    enumerable: true
-  });
-
-  Object.defineProperty(system, 'converters', {
-    get: function() { return components.converter; },
-    enumerable: true
-  });
-
-  Object.defineProperty(system, 'fields', {
-    get: function() { return components.field; },
-    enumerable: true
-  });
-
-  Object.defineProperty(system, 'languages', {
-    get: function() { return components.language; },
-    enumerable: true
-  });
-
-  Object.defineProperty(system, 'settings', {
-    get: function() { return components.setting; },
-    enumerable: true
-  });
-
-  Object.defineProperty(system, 'types', {
-    get: function() { return components.type; },
-    enumerable: true
-  });
-
-  return system;
-};
-
-/**
- * Connect a local system with another at the other end of a connector
- * @param system System to which we're adding commands
- * @param front Front which allows access to the remote system from which we
- * import commands
- * @param customProps Array of strings specifying additional properties defined
- * on remote commands that should be considered part of the metadata for the
- * commands imported into the local system
- */
-exports.connectFront = function(system, front, customProps) {
-  system._handleCommandsChanged = function() {
-    syncItems(system, front, customProps).catch(util.errorHandler);
-  };
-  front.on('commands-changed', system._handleCommandsChanged);
-
-  return syncItems(system, front, customProps);
-};
-
-/**
- * Undo the effect of #connectFront
- */
-exports.disconnectFront = function(system, front) {
-  front.off('commands-changed', system._handleCommandsChanged);
-  system._handleCommandsChanged = undefined;
-  removeItemsFromFront(system, front);
-};
-
-/**
- * Remove the items in this system that came from a previous sync action, and
- * re-add them. See connectFront() for explanation of properties
- */
-function syncItems(system, front, customProps) {
-  return front.specs(customProps).then(function(specs) {
-    removeItemsFromFront(system, front);
-
-    var remoteItems = addLocalFunctions(specs, front);
-    system.addItems(remoteItems);
-
-    return system;
-  });
-};
-
-/**
- * Take the data from the 'specs' command (or the 'commands-changed' event) and
- * add function to proxy the execution back over the front
- */
-function addLocalFunctions(specs, front) {
-  // Inject an 'exec' function into the commands, and the front into
-  // all the remote types
-  specs.forEach(function(commandSpec) {
-    // HACK: Tack the front to the command so we know how to remove it
-    // in removeItemsFromFront() below
-    commandSpec.front = front;
-
-    // Tell the type instances for a command how to contact their counterparts
-    // Don't confuse this with setting the front on the commandSpec which is
-    // about associating a proxied command with it's source for later removal.
-    // This is actually going to be used by the type
-    commandSpec.params.forEach(function(param) {
-      if (typeof param.type !== 'string') {
-        param.type.front = front;
-      }
-    });
-
-    if (!commandSpec.isParent) {
-      commandSpec.exec = function(args, context) {
-        var typed = (context.prefix ? context.prefix + ' ' : '') + context.typed;
-        return front.execute(typed).then(function(reply) {
-          var typedData = context.typedData(reply.type, reply.data);
-          return reply.isError ? Promise.reject(typedData) : typedData;
-        });
-      };
-    }
-
-    commandSpec.isProxy = true;
-  });
-
-  return specs;
-}
-
-/**
- * Go through all the commands removing any that are associated with the
- * given front. The method of association is the hack in addLocalFunctions.
- */
-function removeItemsFromFront(system, front) {
-  system.commands.getAll().forEach(function(command) {
-    if (command.front === front) {
-      system.commands.remove(command);
-    }
-  });
-}
diff --git a/toolkit/devtools/gcli/source/lib/gcli/types/date.js b/toolkit/devtools/gcli/source/lib/gcli/types/date.js
--- a/toolkit/devtools/gcli/source/lib/gcli/types/date.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/types/date.js
@@ -222,28 +222,41 @@ exports.items = [
           var msg = l10n.lookupFormat('typesDateNan', [ arg.text ]);
           return Promise.resolve(new Conversion(undefined, arg, Status.ERROR, msg));
         }
       }
 
       return Promise.resolve(new Conversion(value, arg));
     },
 
-    nudge: function(value, by, context) {
+    decrement: function(value, context) {
       if (!isDate(value)) {
         return new Date();
       }
 
       var newValue = new Date(value);
-      newValue.setDate(value.getDate() + (by * this.step));
+      newValue.setDate(value.getDate() - this.step);
 
-      if (newValue < this.getMin(context)) {
+      if (newValue >= this.getMin(context)) {
+        return newValue;
+      }
+      else {
         return this.getMin(context);
       }
-      else if (newValue > this.getMax(context)) {
-        return this.getMax();
+    },
+
+    increment: function(value, context) {
+      if (!isDate(value)) {
+        return new Date();
+      }
+
+      var newValue = new Date(value);
+      newValue.setDate(value.getDate() + this.step);
+
+      if (newValue <= this.getMax(context)) {
+        return newValue;
       }
       else {
-        return newValue;
+        return this.getMax();
       }
     }
   }
 ];
diff --git a/toolkit/devtools/gcli/source/lib/gcli/types/delegate.js b/toolkit/devtools/gcli/source/lib/gcli/types/delegate.js
--- a/toolkit/devtools/gcli/source/lib/gcli/types/delegate.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/types/delegate.js
@@ -14,132 +14,131 @@
  * limitations under the License.
  */
 
 'use strict';
 
 var Promise = require('../util/promise').Promise;
 var Conversion = require('./types').Conversion;
 var Status = require('./types').Status;
-var BlankArgument = require('./types').BlankArgument;
 
 /**
  * The types we expose for registration
  */
 exports.items = [
   // A type for "we don't know right now, but hope to soon"
   {
     item: 'type',
     name: 'delegate',
 
+    constructor: function() {
+      if (typeof this.delegateType !== 'function' &&
+          typeof this.delegateType !== 'string') {
+        throw new Error('Instances of DelegateType need typeSpec.delegateType' +
+                        ' to be a function that returns a type');
+      }
+    },
+
     getSpec: function(commandName, paramName) {
       return {
         name: 'delegate',
         param: paramName
       };
     },
 
     // Child types should implement this method to return an instance of the type
     // that should be used. If no type is available, or some sort of temporary
     // placeholder is required, BlankType can be used.
-    delegateType: undefined,
+    delegateType: function(context) {
+      throw new Error('Not implemented');
+    },
 
     stringify: function(value, context) {
       return this.getType(context).then(function(delegated) {
         return delegated.stringify(value, context);
       }.bind(this));
     },
 
     parse: function(arg, context) {
       return this.getType(context).then(function(delegated) {
         return delegated.parse(arg, context);
       }.bind(this));
     },
 
-    nudge: function(value, by, context) {
+    decrement: function(value, context) {
       return this.getType(context).then(function(delegated) {
-        return delegated.nudge ?
-               delegated.nudge(value, by, context) :
+        return delegated.decrement ?
+               delegated.decrement(value, context) :
+               undefined;
+      }.bind(this));
+    },
+
+    increment: function(value, context) {
+      return this.getType(context).then(function(delegated) {
+        return delegated.increment ?
+               delegated.increment(value, context) :
                undefined;
       }.bind(this));
     },
 
     getType: function(context) {
-      if (this.delegateType === undefined) {
-        return Promise.resolve(this.types.createType('blank'));
-      }
-
       var type = this.delegateType(context);
       if (typeof type.parse !== 'function') {
         type = this.types.createType(type);
       }
       return Promise.resolve(type);
     },
 
-    // DelegateType is designed to be inherited from, so DelegateField needs a
-    // way to check if something works like a delegate without using 'name'
+    // DelegateType is designed to be inherited from, so DelegateField needs a way
+    // to check if something works like a delegate without using 'name'
     isDelegate: true,
 
     // Technically we perhaps should proxy this, except that properties are
     // inherently synchronous, so we can't. It doesn't seem important enough to
     // change the function definition to accommodate this right now
     isImportant: false
   },
   {
     item: 'type',
     name: 'remote',
-    paramName: undefined,
-    blankIsValid: false,
-
-    getSpec: function(commandName, paramName) {
-      return {
-        name: 'remote',
-        commandName: commandName,
-        paramName: paramName,
-        blankIsValid: this.blankIsValid
-      };
-    },
-
-    getBlank: function(context) {
-      if (this.blankIsValid) {
-        return new Conversion({ stringified: '' },
-                              new BlankArgument(), Status.VALID);
-      }
-      else {
-        return new Conversion(undefined, new BlankArgument(),
-                              Status.INCOMPLETE, '');
-      }
-    },
+    param: undefined,
 
     stringify: function(value, context) {
-      if (value == null) {
-        return '';
-      }
       // remote types are client only, and we don't attempt to transfer value
       // objects to the client (we can't be sure the are jsonable) so it is a
-      // bit strange to be asked to stringify a value object, however since
+      // but strange to be asked to stringify a value object, however since
       // parse creates a Conversion with a (fake) value object we might be
       // asked to stringify that. We can stringify fake value objects.
       if (typeof value.stringified === 'string') {
         return value.stringified;
       }
       throw new Error('Can\'t stringify that value');
     },
 
     parse: function(arg, context) {
-      return this.front.parseType(context.typed, this.paramName).then(function(json) {
+      var args = { typed: context.typed, param: this.param };
+      return this.connection.call('typeparse', args).then(function(json) {
         var status = Status.fromString(json.status);
-        return new Conversion(undefined, arg, status, json.message, json.predictions);
-      }.bind(this));
+        var val = { stringified: arg.text };
+        return new Conversion(val, arg, status, json.message, json.predictions);
+      });
     },
 
-    nudge: function(value, by, context) {
-      return this.front.nudgeType(context.typed, by, this.paramName).then(function(json) {
+    decrement: function(value, context) {
+      var args = { typed: context.typed, param: this.param };
+      return this.connection.call('typedecrement', args).then(function(json) {
         return { stringified: json.arg };
-      }.bind(this));
+      });
+    },
+
+    increment: function(value, context) {
+      var args = { typed: context.typed, param: this.param };
+      return this.connection.call('typeincrement', args).then(function(json) {
+        return { stringified: json.arg };
+      });
     }
   },
   // 'blank' is a type for use with DelegateType when we don't know yet.
   // It should not be used anywhere else.
   {
     item: 'type',
     name: 'blank',
 
diff --git a/toolkit/devtools/gcli/source/lib/gcli/types/javascript.js b/toolkit/devtools/gcli/source/lib/gcli/types/javascript.js
--- a/toolkit/devtools/gcli/source/lib/gcli/types/javascript.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/types/javascript.js
@@ -19,28 +19,57 @@
 var Promise = require('../util/promise').Promise;
 var l10n = require('../util/l10n');
 
 var Conversion = require('./types').Conversion;
 var Type = require('./types').Type;
 var Status = require('./types').Status;
 
 /**
+ * The object against which we complete, which is usually 'window' if it exists
+ * but could be something else in non-web-content environments.
+ */
+var globalObject;
+if (typeof window !== 'undefined') {
+  globalObject = window;
+}
+
+/**
+ * Setter for the object against which JavaScript completions happen
+ */
+exports.setGlobalObject = function(obj) {
+  globalObject = obj;
+};
+
+/**
+ * Getter for the object against which JavaScript completions happen, for use
+ * in testing
+ */
+exports.getGlobalObject = function() {
+  return globalObject;
+};
+
+/**
+ * Remove registration of object against which JavaScript completions happen
+ */
+exports.unsetGlobalObject = function() {
+  globalObject = undefined;
+};
+
+
+/**
  * 'javascript' handles scripted input
  */
 function JavascriptType(typeSpec) {
 }
 
 JavascriptType.prototype = Object.create(Type.prototype);
 
-JavascriptType.prototype.getSpec = function(commandName, paramName) {
-  return {
-    name: 'remote',
-    paramName: paramName
-  };
+JavascriptType.prototype.getSpec = function() {
+  return 'javascript';
 };
 
 JavascriptType.prototype.stringify = function(value, context) {
   if (value == null) {
     return '';
   }
   return value;
 };
@@ -48,18 +77,17 @@ JavascriptType.prototype.stringify = fun
 /**
  * When sorting out completions, there is no point in displaying millions of
  * matches - this the number of matches that we aim for
  */
 JavascriptType.MAX_COMPLETION_MATCHES = 10;
 
 JavascriptType.prototype.parse = function(arg, context) {
   var typed = arg.text;
-  var scope = (context.environment.window == null) ?
-              null : context.environment.window;
+  var scope = globalObject;
 
   // No input is undefined
   if (typed === '') {
     return Promise.resolve(new Conversion(undefined, arg, Status.INCOMPLETE));
   }
   // Just accept numbers
   if (!isNaN(parseFloat(typed)) && isFinite(typed)) {
     return Promise.resolve(new Conversion(typed, arg));
diff --git a/toolkit/devtools/gcli/source/lib/gcli/types/node.js b/toolkit/devtools/gcli/source/lib/gcli/types/node.js
--- a/toolkit/devtools/gcli/source/lib/gcli/types/node.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/types/node.js
@@ -20,23 +20,52 @@ var Promise = require('../util/promise')
 var Highlighter = require('../util/host').Highlighter;
 var l10n = require('../util/l10n');
 var util = require('../util/util');
 var Status = require('./types').Status;
 var Conversion = require('./types').Conversion;
 var BlankArgument = require('./types').BlankArgument;
 
 /**
+ * The object against which we complete, which is usually 'window' if it exists
+ * but could be something else in non-web-content environments.
+ */
+var doc;
+if (typeof document !== 'undefined') {
+  doc = document;
+}
+
+/**
+ * Setter for the document that contains the nodes we're matching
+ */
+exports.setDocument = function(document) {
+  doc = document;
+};
+
+/**
+ * Undo the effects of setDocument()
+ */
+exports.unsetDocument = function() {
+  doc = undefined;
+};
+
+/**
+ * Getter for the document that contains the nodes we're matching
+ * Most for changing things back to how they were for unit testing
+ */
+exports.getDocument = function() {
+  return doc;
+};
+
+/**
  * Helper functions to be attached to the prototypes of NodeType and
  * NodeListType to allow terminal to tell us which nodes should be highlighted
  */
 function onEnter(assignment) {
-  // TODO: GCLI doesn't support passing a context to notifications of cursor
-  // position, so onEnter/onLeave/onChange are disabled below until we fix this
-  assignment.highlighter = new Highlighter(context.environment.window.document);
+  assignment.highlighter = new Highlighter(doc);
   assignment.highlighter.nodelist = assignment.conversion.matches;
 }
 
 /** @see #onEnter() */
 function onLeave(assignment) {
   if (!assignment.highlighter) {
     return;
   }
@@ -60,41 +89,38 @@ function onChange(assignment) {
  * The exported 'node' and 'nodelist' types
  */
 exports.items = [
   {
     // The 'node' type is a CSS expression that refers to a single node
     item: 'type',
     name: 'node',
 
-    getSpec: function(commandName, paramName) {
-      return {
-        name: 'remote',
-        commandName: commandName,
-        paramName: paramName
-      };
+    getSpec: function() {
+      return 'node';
     },
 
     stringify: function(value, context) {
       if (value == null) {
         return '';
       }
       return value.__gcliQuery || 'Error';
     },
 
     parse: function(arg, context) {
       var reply;
 
       if (arg.text === '') {
         reply = new Conversion(undefined, arg, Status.INCOMPLETE);
+        reply.matches = util.createEmptyNodeList(doc);
       }
       else {
         var nodes;
         try {
-          nodes = context.environment.window.document.querySelectorAll(arg.text);
+          nodes = doc.querySelectorAll(arg.text);
           if (nodes.length === 0) {
             reply = new Conversion(undefined, arg, Status.INCOMPLETE,
                                    l10n.lookup('nodeParseNone'));
           }
           else if (nodes.length === 1) {
             var node = nodes.item(0);
             node.__gcliQuery = arg.text;
 
@@ -111,19 +137,19 @@ exports.items = [
           reply = new Conversion(undefined, arg, Status.ERROR,
                                  l10n.lookup('nodeParseSyntax'));
         }
       }
 
       return Promise.resolve(reply);
     },
 
-    // onEnter: onEnter,
-    // onLeave: onLeave,
-    // onChange: onChange
+    onEnter: onEnter,
+    onLeave: onLeave,
+    onChange: onChange
   },
   {
     // The 'nodelist' type is a CSS expression that refers to a node list
     item: 'type',
     name: 'nodelist',
 
     // The 'allowEmpty' option ensures that we do not complain if the entered
     // CSS selector is valid, but does not match any nodes. There is some
@@ -136,67 +162,61 @@ exports.items = [
     allowEmpty: false,
 
     constructor: function() {
       if (typeof this.allowEmpty !== 'boolean') {
         throw new Error('Legal values for allowEmpty are [true|false]');
       }
     },
 
-    getSpec: function(commandName, paramName) {
-      return {
-        name: 'remote',
-        commandName: commandName,
-        paramName: paramName,
-        blankIsValid: true
-      };
+    getSpec: function() {
+      return this.allowEmpty ?
+             { name: 'nodelist', allowEmpty: true } :
+             'nodelist';
     },
 
     getBlank: function(context) {
-      var emptyNodeList = [];
-      if (context != null && context.environment.window != null) {
-        var doc = context.environment.window.document;
-        emptyNodeList = util.createEmptyNodeList(doc);
-      }
+      var emptyNodeList = (doc == null ? [] : util.createEmptyNodeList(doc));
       return new Conversion(emptyNodeList, new BlankArgument(), Status.VALID);
     },
 
     stringify: function(value, context) {
       if (value == null) {
         return '';
       }
       return value.__gcliQuery || 'Error';
     },
 
     parse: function(arg, context) {
       var reply;
       try {
         if (arg.text === '') {
           reply = new Conversion(undefined, arg, Status.INCOMPLETE);
+          reply.matches = util.createEmptyNodeList(doc);
         }
         else {
-          var nodes = context.environment.window.document.querySelectorAll(arg.text);
+          var nodes = doc.querySelectorAll(arg.text);
 
           if (nodes.length === 0 && !this.allowEmpty) {
             reply = new Conversion(undefined, arg, Status.INCOMPLETE,
                                    l10n.lookup('nodeParseNone'));
           }
           else {
-            nodes.__gcliQuery = arg.text;
             reply = new Conversion(nodes, arg, Status.VALID, '');
           }
 
           reply.matches = nodes;
         }
       }
       catch (ex) {
         reply = new Conversion(undefined, arg, Status.ERROR,
                                l10n.lookup('nodeParseSyntax'));
+        reply.matches = util.createEmptyNodeList(doc);
       }
 
       return Promise.resolve(reply);
     },
 
-    // onEnter: onEnter,
-    // onLeave: onLeave,
-    // onChange: onChange
+    onEnter: onEnter,
+    onLeave: onLeave,
+    onChange: onChange
   }
 ];
diff --git a/toolkit/devtools/gcli/source/lib/gcli/types/number.js b/toolkit/devtools/gcli/source/lib/gcli/types/number.js
--- a/toolkit/devtools/gcli/source/lib/gcli/types/number.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/types/number.js
@@ -127,38 +127,36 @@ exports.items = [
       if (min != null && value < min) {
         msg = l10n.lookupFormat('typesNumberMin', [ value, min ]);
         return Promise.resolve(new Conversion(undefined, arg, Status.ERROR, msg));
       }
 
       return Promise.resolve(new Conversion(value, arg));
     },
 
-    nudge: function(value, by, context) {
+    decrement: function(value, context) {
       if (typeof value !== 'number' || isNaN(value)) {
-        if (by < 0) {
-          return this.getMax(context) || 1;
-        }
-        else {
-          var min = this.getMin(context);
-          return min != null ? min : 0;
-        }
+        return this.getMax(context) || 1;
       }
+      var newValue = value - this.step;
+      // Snap to the nearest incremental of the step
+      newValue = Math.ceil(newValue / this.step) * this.step;
+      return this._boundsCheck(newValue, context);
+    },
 
-      var newValue = value + (by * this.step);
-
+    increment: function(value, context) {
+      if (typeof value !== 'number' || isNaN(value)) {
+        var min = this.getMin(context);
+        return min != null ? min : 0;
+      }
+      var newValue = value + this.step;
       // Snap to the nearest incremental of the step
-      if (by < 0) {
-        newValue = Math.ceil(newValue / this.step) * this.step;
-      }
-      else {
-        newValue = Math.floor(newValue / this.step) * this.step;
-        if (this.getMax(context) == null) {
-          return newValue;
-        }
+      newValue = Math.floor(newValue / this.step) * this.step;
+      if (this.getMax(context) == null) {
+        return newValue;
       }
       return this._boundsCheck(newValue, context);
     },
 
     // Return the input value so long as it is within the max/min bounds.
     // If it is lower than the minimum, return the minimum. If it is bigger
     // than the maximum then return the maximum.
     _boundsCheck: function(value, context) {
diff --git a/toolkit/devtools/gcli/source/lib/gcli/types/resource.js b/toolkit/devtools/gcli/source/lib/gcli/types/resource.js
--- a/toolkit/devtools/gcli/source/lib/gcli/types/resource.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/types/resource.js
@@ -18,16 +18,48 @@
 
 var Promise = require('../util/promise').Promise;
 
 exports.clearResourceCache = function() {
   ResourceCache.clear();
 };
 
 /**
+ * The object against which we complete, which is usually 'window' if it exists
+ * but could be something else in non-web-content environments.
+ */
+var doc;
+if (typeof document !== 'undefined') {
+  doc = document;
+}
+
+/**
+ * Setter for the document that contains the nodes we're matching
+ */
+exports.setDocument = function(document) {
+  doc = document;
+};
+
+/**
+ * Undo the effects of setDocument()
+ */
+exports.unsetDocument = function() {
+  ResourceCache.clear();
+  doc = undefined;
+};
+
+/**
+ * Getter for the document that contains the nodes we're matching
+ * Most for changing things back to how they were for unit testing
+ */
+exports.getDocument = function() {
+  return doc;
+};
+
+/**
  * Resources are bits of CSS and JavaScript that the page either includes
  * directly or as a result of reading some remote resource.
  * Resource should not be used directly, but instead through a sub-class like
  * CssResource or ScriptResource.
  */
 function Resource(name, type, inline, element) {
   this.name = name;
   this.type = type;
@@ -48,17 +80,17 @@ Resource.TYPE_CSS = 'text/css';
 
 /**
  * A CssResource provides an implementation of Resource that works for both
  * [style] elements and [link type='text/css'] elements in the [head].
  */
 function CssResource(domSheet) {
   this.name = domSheet.href;
   if (!this.name) {
-    this.name = domSheet.ownerNode && domSheet.ownerNode.id ?
+    this.name = domSheet.ownerNode.id ?
             'css#' + domSheet.ownerNode.id :
             'inline-css';
   }
 
   this.inline = (domSheet.href == null);
   this.type = Resource.TYPE_CSS;
   this.element = domSheet;
 }
@@ -66,23 +98,22 @@ function CssResource(domSheet) {
 CssResource.prototype = Object.create(Resource.prototype);
 
 CssResource.prototype.loadContents = function() {
   return new Promise(function(resolve, reject) {
     resolve(this.element.ownerNode.innerHTML);
   }.bind(this));
 };
 
-CssResource._getAllStyles = function(context) {
+CssResource._getAllStyles = function() {
   var resources = [];
-  if (context.environment.window == null) {
+  if (doc == null) {
     return resources;
   }
 
-  var doc = context.environment.window.document;
   Array.prototype.forEach.call(doc.styleSheets, function(domSheet) {
     CssResource._getStyle(domSheet, resources);
   });
 
   dedupe(resources, function(clones) {
     for (var i = 0; i < clones.length; i++) {
       clones[i].name = clones[i].name + '-' + i;
     }
@@ -146,22 +177,21 @@ ScriptResource.prototype.loadContents = 
         resolve(xhr.responseText);
       };
       xhr.open('GET', this.element.src, true);
       xhr.send();
     }
   }.bind(this));
 };
 
-ScriptResource._getAllScripts = function(context) {
-  if (context.environment.window == null) {
+ScriptResource._getAllScripts = function() {
+  if (doc == null) {
     return [];
   }
 
-  var doc = context.environment.window.document;
   var scriptNodes = doc.querySelectorAll('script');
   var resources = Array.prototype.map.call(scriptNodes, function(scriptNode) {
     var resource = ResourceCache.get(scriptNode);
     if (!resource) {
       resource = new ScriptResource(scriptNode);
       ResourceCache.add(scriptNode, resource);
     }
     return resource;
@@ -248,25 +278,25 @@ exports.items = [
     constructor: function() {
       if (this.include !== Resource.TYPE_SCRIPT &&
           this.include !== Resource.TYPE_CSS &&
           this.include != null) {
         throw new Error('invalid include property: ' + this.include);
       }
     },
 
-    lookup: function(context) {
+    lookup: function() {
       var resources = [];
       if (this.include !== Resource.TYPE_SCRIPT) {
-        Array.prototype.push.apply(resources,
-                                   CssResource._getAllStyles(context));
+        Array.prototype.push.apply(resources, CssResource._getAllStyles());
       }
       if (this.include !== Resource.TYPE_CSS) {
-        Array.prototype.push.apply(resources,
-                                   ScriptResource._getAllScripts(context));
+        Array.prototype.push.apply(resources, ScriptResource._getAllScripts());
       }
 
-      return Promise.resolve(resources.map(function(resource) {
-        return { name: resource.name, value: resource };
-      }));
+      return new Promise(function(resolve, reject) {
+        resolve(resources.map(function(resource) {
+          return { name: resource.name, value: resource };
+        }));
+      }.bind(this));
     }
   }
 ];
diff --git a/toolkit/devtools/gcli/source/lib/gcli/types/selection.js b/toolkit/devtools/gcli/source/lib/gcli/types/selection.js
--- a/toolkit/devtools/gcli/source/lib/gcli/types/selection.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/types/selection.js
@@ -73,17 +73,18 @@ SelectionType.prototype.getSpec = functi
     spec.stringifyProperty = this.stringifyProperty;
   }
   if (this.cacheable) {
     spec.cacheable = true;
   }
   if (typeof this.lookup === 'function' || typeof this.data === 'function') {
     spec.commandName = commandName;
     spec.paramName = paramName;
-    spec.remoteLookup = true;
+    spec.remoteLookup = (typeof this.lookup === 'function');
+    spec.remoteData = (typeof this.data === 'function');
   }
   return spec;
 };
 
 SelectionType.prototype.stringify = function(value, context) {
   if (value == null) {
     return '';
   }
@@ -120,19 +121,31 @@ SelectionType.prototype.clearCache = fun
 SelectionType.prototype.getLookup = function(context) {
   if (this._cachedLookup != null) {
     return this._cachedLookup;
   }
 
   var reply;
 
   if (this.remoteLookup) {
-    reply = this.front.getSelectionLookup(this.commandName, this.paramName);
+    reply = this.connection.call('selectioninfo', {
+      action: 'lookup',
+      commandName: this.commandName,
+      paramName: this.paramName
+    });
     reply = resolve(reply, context);
   }
+  else if (this.remoteData) {
+    reply = this.connection.call('selectioninfo', {
+      action: 'data',
+      commandName: this.commandName,
+      paramName: this.paramName
+    });
+    reply = resolve(reply, context).then(this._dataToLookup);
+  }
   else if (typeof this.lookup === 'function') {
     reply = resolve(this.lookup.bind(this), context);
   }
   else if (this.lookup != null) {
     reply = resolve(this.lookup, context);
   }
   else if (this.data != null) {
     reply = resolve(this.data, context).then(this._dataToLookup);
@@ -209,51 +222,51 @@ exports.findPredictions = function(arg, 
   for (i = 0; i < lookup.length; i++) {
     option = lookup[i];
     if (option._gcliLowerName == null) {
       option._gcliLowerName = option.name.toLowerCase();
     }
   }
 
   // Exact hidden matches. If 'hidden: true' then we only allow exact matches
-  // All the tests after here check that !isHidden(option)
+  // All the tests after here check that !option.value.hidden
   for (i = 0; i < lookup.length && predictions.length < maxPredictions; i++) {
     option = lookup[i];
     if (option.name === arg.text) {
       predictions.push(option);
     }
   }
 
   // Start with prefix matching
   for (i = 0; i < lookup.length && predictions.length < maxPredictions; i++) {
     option = lookup[i];
-    if (option._gcliLowerName.indexOf(match) === 0 && !isHidden(option)) {
+    if (option._gcliLowerName.indexOf(match) === 0 && !option.value.hidden) {
       if (predictions.indexOf(option) === -1) {
         predictions.push(option);
       }
     }
   }
 
   // Try infix matching if we get less half max matched
   if (predictions.length < (maxPredictions / 2)) {
     for (i = 0; i < lookup.length && predictions.length < maxPredictions; i++) {
       option = lookup[i];
-      if (option._gcliLowerName.indexOf(match) !== -1 && !isHidden(option)) {
+      if (option._gcliLowerName.indexOf(match) !== -1 && !option.value.hidden) {
         if (predictions.indexOf(option) === -1) {
           predictions.push(option);
         }
       }
     }
   }
 
   // Try fuzzy matching if we don't get a prefix match
   if (predictions.length === 0) {
     var names = [];
     lookup.forEach(function(opt) {
-      if (!isHidden(opt)) {
+      if (!opt.value.hidden) {
         names.push(opt.name);
       }
     });
     var corrected = spell.correct(match, names);
     if (corrected) {
       lookup.forEach(function(opt) {
         if (opt.name === corrected) {
           predictions.push(opt);
@@ -288,82 +301,71 @@ exports.convertPredictions = function(ar
     return new Conversion(value, arg, Status.VALID, '',
                           Promise.resolve(predictions));
   }
 
   return new Conversion(undefined, arg, Status.INCOMPLETE, '',
                         Promise.resolve(predictions));
 };
 
-/**
- * Checking that an option is hidden involves messing in properties on the
- * value right now (which isn't a good idea really) we really should be marking
- * that on the option, so this encapsulates the problem
- */
-function isHidden(option) {
-  return option.hidden === true ||
-         (option.value != null && option.value.hidden);
-}
-
 SelectionType.prototype.getBlank = function(context) {
   var predictFunc = function(context2) {
     return Promise.resolve(this.getLookup(context2)).then(function(lookup) {
       return lookup.filter(function(option) {
-        return !isHidden(option);
+        return !option.value.hidden;
       }).slice(0, Conversion.maxPredictions - 1);
     });
   }.bind(this);
 
   return new Conversion(undefined, new BlankArgument(), Status.INCOMPLETE, '',
                         predictFunc);
 };
 
 /**
- * Increment and decrement are confusing for selections. +1 is -1 and -1 is +1.
- * Given an array e.g. [ 'a', 'b', 'c' ] with the current selection on 'b',
- * displayed to the user in the natural way, i.e.:
- *
- *   'a'
- *   'b' <- highlighted as current value
- *   'c'
- *
- * Pressing the UP arrow should take us to 'a', which decrements this index
- * (compare pressing UP on a number which would increment the number)
- *
- * So for selections, we treat +1 as -1 and -1 as +1.
+ * For selections, up is down and black is white. It's like this, given a list
+ * [ a, b, c, d ], it's natural to think that it starts at the top and that
+ * going up the list, moves towards 'a'. However 'a' has the lowest index, so
+ * for SelectionType, up is down and down is up.
+ * Sorry.
  */
-SelectionType.prototype.nudge = function(value, by, context) {
+SelectionType.prototype.decrement = function(value, context) {
   return this.getLookup(context).then(function(lookup) {
     var index = this._findValue(lookup, value);
     if (index === -1) {
-      if (by < 0) {
-        // We're supposed to be doing a decrement (which means +1), but the
-        // value isn't found, so we reset the index to the top of the list
-        // which is index 0
-        index = 0;
-      }
-      else {
-        // For an increment operation when there is nothing to start from, we
-        // want to start from the top, i.e. index 0, so the value before we
-        // 'increment' (see note above) must be 1.
-        index = 1;
-      }
+      index = 0;
     }
-
-    // This is where we invert the sense of up/down (see doc comment)
-    index -= by;
-
+    index++;
     if (index >= lookup.length) {
       index = 0;
     }
     return lookup[index].value;
   }.bind(this));
 };
 
 /**
+ * See note on SelectionType.decrement()
+ */
+SelectionType.prototype.increment = function(value, context) {
+  return this.getLookup(context).then(function(lookup) {
+    var index = this._findValue(lookup, value);
+    if (index === -1) {
+      // For an increment operation when there is nothing to start from, we
+      // want to start from the top, i.e. index 0, so the value before we
+      // 'increment' (see note above) must be 1.
+      index = 1;
+    }
+    index--;
+    if (index < 0) {
+      index = lookup.length - 1;
+    }
+    return lookup[index].value;
+  }.bind(this));
+};
+
+/**
  * Walk through an array of { name:.., value:... } objects looking for a
  * matching value (using strict equality), returning the matched index (or -1
  * if not found).
  * @param lookup Array of objects with name/value properties to search through
  * @param value The value to search for
  * @return The index at which the match was found, or -1 if no match was found
  */
 SelectionType.prototype._findValue = function(lookup, value) {
diff --git a/toolkit/devtools/gcli/source/lib/gcli/types/setting.js b/toolkit/devtools/gcli/source/lib/gcli/types/setting.js
--- a/toolkit/devtools/gcli/source/lib/gcli/types/setting.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/types/setting.js
@@ -20,25 +20,22 @@ exports.items = [
   {
     // A type for selecting a known setting
     item: 'type',
     name: 'setting',
     parent: 'selection',
     cacheable: true,
     lookup: function(context) {
       var settings = context.system.settings;
-
-      // Lazily add a settings.onChange listener to clear the cache
       if (!this._registeredListener) {
         settings.onChange.add(function(ev) {
           this.clearCache();
         }, this);
         this._registeredListener = true;
       }
-
       return settings.getAll().map(function(setting) {
         return { name: setting.name, value: setting };
       });
     }
   },
   {
     // A type for entering the value of a known setting
     // Customizations:
diff --git a/toolkit/devtools/gcli/source/lib/gcli/types/types.js b/toolkit/devtools/gcli/source/lib/gcli/types/types.js
--- a/toolkit/devtools/gcli/source/lib/gcli/types/types.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/types/types.js
@@ -941,19 +941,19 @@ exports.ArrayConversion = ArrayConversio
  * however some types like 'selection' and 'delegate' are customizable.
  * The basic Type type isn't useful, but does provide documentation about what
  * types do.
  */
 function Type() {
 }
 
 /**
- * Get a JSONable data structure that entirely describes this type.
- * commandName and paramName are the names of the command and parameter which
- * we are remoting to help the server get back to the remoted action.
+ * Get a JSONable data structure that entirely describes this type
+ * @param commandName/paramName The names of the command and parameter which we
+ * are remoting to help the server get back to the remoted action.
  */
 Type.prototype.getSpec = function(commandName, paramName) {
   throw new Error('Not implemented');
 };
 
 /**
  * Convert the given <tt>value</tt> to a string representation.
  * Where possible, there should be round-tripping between values and their
@@ -990,22 +990,28 @@ Type.prototype.parseString = function(st
  * The plug-in system, and other things need to know what this type is
  * called. The name alone is not enough to fully specify a type. Types like
  * 'selection' and 'delegate' need extra data, however this function returns
  * only the name, not the extra data.
  */
 Type.prototype.name = undefined;
 
 /**
- * If there is some concept of a lower or higher value, return it,
+ * If there is some concept of a higher value, return it,
  * otherwise return undefined.
- * @param by number indicating how much to nudge by, usually +1 or -1 which is
- * caused by the user pressing the UP/DOWN keys with the cursor in this type
  */
-Type.prototype.nudge = function(value, by, context) {
+Type.prototype.increment = function(value, context) {
+  return undefined;
+};
+
+/**
+ * If there is some concept of a lower value, return it,
+ * otherwise return undefined.
+ */
+Type.prototype.decrement = function(value, context) {
   return undefined;
 };
 
 /**
  * The 'blank value' of most types is 'undefined', but there are exceptions;
  * This allows types to specify a better conversion from empty string than
  * 'undefined'.
  * 2 known examples of this are boolean -> false and array -> []
diff --git a/toolkit/devtools/gcli/source/lib/gcli/types/url.js b/toolkit/devtools/gcli/source/lib/gcli/types/url.js
--- a/toolkit/devtools/gcli/source/lib/gcli/types/url.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/types/url.js
@@ -56,17 +56,17 @@ exports.items = [
               predictions.push({ name: http.href, value: http });
             }
             catch (ex) {
               // Ignore
             }
           }.bind(this));
 
           // Try to create a URL with the current page as a base ref
-          if ('window' in context.environment) {
+          if (context.environment.window) {
             try {
               var base = context.environment.window.location.href;
               var localized = host.createUrl(arg.text, base);
               predictions.push({ name: localized.href, value: localized });
             }
             catch (ex) {
               // Ignore
             }
diff --git a/toolkit/devtools/gcli/source/lib/gcli/ui/menu.js b/toolkit/devtools/gcli/source/lib/gcli/ui/menu.js
--- a/toolkit/devtools/gcli/source/lib/gcli/ui/menu.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/ui/menu.js
@@ -251,34 +251,47 @@ function getHighlightingProxy(item, matc
       value: item.description,
       enumerable: true
     }
   });
   return proxy;
 }
 
 /**
- * @return {int} current choice index
+ * @return The current choice index
  */
 Menu.prototype.getChoiceIndex = function() {
   return this._choice == null ? 0 : this._choice;
 };
 
 /**
- * Highlight the next (for by=1) or previous (for by=-1) option
+ * Highlight the next option
  */
-Menu.prototype.nudgeChoice = function(by) {
+Menu.prototype.incrementChoice = function() {
   if (this._choice == null) {
     this._choice = 0;
   }
 
   // There's an annoying up is down thing here, the menu is presented
   // with the zeroth index at the top working down, so the UP arrow needs
   // pick the choice below because we're working down
-  this._choice -= by;
+  this._choice--;
+  this._updateHighlight();
+};
+
+/**
+ * Highlight the previous option
+ */
+Menu.prototype.decrementChoice = function() {
+  if (this._choice == null) {
+    this._choice = 0;
+  }
+
+  // See incrementChoice
+  this._choice++;
   this._updateHighlight();
 };
 
 /**
  * Highlight nothing
  */
 Menu.prototype.unsetChoice = function() {
   this._choice = null;
diff --git a/toolkit/devtools/gcli/source/lib/gcli/util/host.js b/toolkit/devtools/gcli/source/lib/gcli/util/host.js
--- a/toolkit/devtools/gcli/source/lib/gcli/util/host.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/util/host.js
@@ -214,17 +214,17 @@ exports.script.useTarget = function(tgt)
       client.attachConsole(consoleActor, listeners, onAttach);
     }.bind(this));
   });
 };
 
 /**
  * Execute some JavaScript
  */
-exports.script.evaluate = function(javascript) {
+exports.script.eval = function(javascript) {
   return new Promise(function(resolve, reject) {
     var onResult = function(response) {
       var output = response.result;
       if (typeof output === 'object' && output.type === 'undefined') {
         output = undefined;
       }
 
       resolve({
diff --git a/toolkit/devtools/gcli/source/lib/gcli/util/promise.js b/toolkit/devtools/gcli/source/lib/gcli/util/promise.js
--- a/toolkit/devtools/gcli/source/lib/gcli/util/promise.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/util/promise.js
@@ -11,9 +11,100 @@
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 'use strict';
 
-exports.Promise = require("resource://gre/modules/Promise.jsm").Promise;
+var Cu = require('chrome').Cu;
+var Cc = require('chrome').Cc;
+var Ci = require('chrome').Ci;
+
+/*
+ * Minimalist implementation of ES6 promises built on SDK promises. 2 things to
+ * know:
+ * - There is a hack in .then() to be async which matches A+ and toolkit
+ *   promises. GCLI code works with either sync or async promises, but async
+ *   is more correct
+ * - There is an additional Promise.defer function which to matches the call
+ *   in toolkit promises, which in turn matches the call in SDK promises
+ *
+ * Why not use toolkit promises directly? Because there is a strange bug that
+ * we are investigating where thread executions vanish.
+ * 
+ * When we've solved the debugger/sdk/promise/gcli/helpers/overlap problem then
+ * we should use this instead:
+ * module.exports = exports = require('resource://gre/modules/Promise.jsm');
+ */
+
+var promise = require('resource://gre/modules/devtools/deprecated-sync-thenables.js', {});
+
+/**
+ * An implementation of ES6 promises in terms of SDK promises
+ */
+var Promise = function(executor) {
+  this.deferred = promise.defer();
+  try {
+    executor.call(null, this.deferred.resolve, this.deferred.reject);
+  }
+  catch (ex) {
+    this.deferred.reject(ex);
+  }
+}
+
+var async = true;
+
+/**
+ * The sync version of this would look like
+ *     Promise.prototype.then = function(onResolve, onReject) {
+ *      return this.deferred.promise.then(onResolve, onReject);
+ *    };
+ */
+Promise.prototype.then = function(onResolve, onReject) {
+  return new Promise(function(resolve, reject) {
+    setTimeout(function() {
+      try {
+        resolve(this.deferred.promise.then(onResolve, onReject));
+      }
+      catch (ex) {
+        reject(ex);
+      }
+    }.bind(this), 0);
+  }.bind(this));
+};
+
+Promise.all = promise.all;
+Promise.resolve = promise.resolve;
+Promise.defer = promise.defer;
+
+exports.Promise = Promise;
+
+
+/**
+ * Implementation of the setTimeout/clearTimeout web APIs taken from the old
+ * Timer.jsm module
+ */
+
+// This gives us >=2^30 unique timer IDs, enough for 1 per ms for 12.4 days.
+var nextTimeoutId = 1; // setTimeout must return a positive integer
+
+var timeoutTable = new Map(); // int -> nsITimer
+
+var setTimeout = function(callback, millis) {
+  let id = nextTimeoutId++;
+  let timer = Cc["@mozilla.org/timer;1"].createInstance(Ci.nsITimer);
+  timer.initWithCallback(function setTimeout_timer() {
+    timeoutTable.delete(id);
+    callback.call(undefined);
+  }, millis, timer.TYPE_ONE_SHOT);
+
+  timeoutTable.set(id, timer);
+  return id;
+}
+
+var clearTimeout = function(aId) {
+  if (timeoutTable.has(aId)) {
+    timeoutTable.get(aId).cancel();
+    timeoutTable.delete(aId);
+  }
+}
diff --git a/toolkit/devtools/gcli/source/lib/gcli/util/util.js b/toolkit/devtools/gcli/source/lib/gcli/util/util.js
--- a/toolkit/devtools/gcli/source/lib/gcli/util/util.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/util/util.js
@@ -156,34 +156,16 @@ exports.createEvent = function(name) {
    * Remove all handlers.
    * Reset the state of this event back to it's post create state
    */
   event.removeAll = function() {
     handlers = [];
   };
 
   /**
-   * Fire an event just once using a promise.
-   */
-  event.once = function() {
-    if (arguments.length !== 0) {
-      throw new Error('event.once uses promise return values');
-    }
-
-    return new Promise(function(resolve, reject) {
-      var handler = function(arg) {
-        event.remove(handler);
-        resolve(arg);
-      };
-
-      event.add(handler);
-    });
-  },
-
-  /**
    * Temporarily prevent this event from firing.
    * @see resumeFire(ev)
    */
   event.holdFire = function() {
     if (eventDebug) {
       console.group('Holding fire: ' + name);
     }
 
@@ -268,30 +250,40 @@ var Promise = require('../util/promise')
  * when all the array members have been passed to the action function, and
  * rejected as soon as any of the action function calls fails 
  */
 exports.promiseEach = function(array, action, scope) {
   if (array.length === 0) {
     return Promise.resolve([]);
   }
 
-  var allReply = [];
-  var promise = Promise.resolve();
+  return new Promise(function(resolve, reject) {
+    var replies = [];
 
-  array.forEach(function(member, i) {
-    promise = promise.then(function() {
-      var reply = action.call(scope, member, i, array);
-      return Promise.resolve(reply).then(function(data) {
-        allReply[i] = data;
-      });
-    });
-  });
+    var callNext = function(index) {
+      var onSuccess = function(reply) {
+        replies[index] = reply;
 
-  return promise.then(function() {
-    return allReply;
+        if (index + 1 >= array.length) {
+          resolve(replies);
+        }
+        else {
+          callNext(index + 1);
+        }
+      };
+
+      var onFailure = function(ex) {
+        reject(ex);
+      };
+
+      var reply = action.call(scope, array[index], index, array);
+      Promise.resolve(reply).then(onSuccess).then(null, onFailure);
+    };
+
+    callNext(0);
   });
 };
 
 /**
  * Catching errors from promises isn't as simple as:
  *   promise.then(handler, console.error);
  * for a number of reasons:
  * - chrome's console doesn't have bound functions (why?)
diff --git a/toolkit/devtools/server/actors/gcli.js b/toolkit/devtools/server/actors/gcli.js
--- a/toolkit/devtools/server/actors/gcli.js
+++ b/toolkit/devtools/server/actors/gcli.js
@@ -1,139 +1,93 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
-const { Task } = require("resource://gre/modules/Task.jsm");
-const {
-  method, Arg, Option, RetVal, Front, FrontClass, Actor, ActorClass
-} = require("devtools/server/protocol");
-const events = require("sdk/event/core");
-const { createSystem } = require("gcli/system");
+var Cu = require('chrome').Cu;
+var XPCOMUtils = Cu.import("resource://gre/modules/XPCOMUtils.jsm", {}).XPCOMUtils;
+
+XPCOMUtils.defineLazyModuleGetter(this, "console",
+                                  "resource://gre/modules/devtools/Console.jsm");
+XPCOMUtils.defineLazyModuleGetter(this, "CommandUtils",
+                                  "resource:///modules/devtools/DeveloperToolbar.jsm");
+
+XPCOMUtils.defineLazyGetter(this, "Requisition", function() {
+  return require("gcli/cli").Requisition;
+});
+
+XPCOMUtils.defineLazyGetter(this, "centralCanon", function() {
+  return require("gcli/commands/commands").centralCanon;
+});
+
+var util = require('gcli/util/util');
+
+var protocol = require("devtools/server/protocol");
+var method = protocol.method;
+var Arg = protocol.Arg;
+var Option = protocol.Option;
+var RetVal = protocol.RetVal;
 
 /**
  * Manage remote connections that want to talk to GCLI
  */
-const GcliActor = ActorClass({
+var GcliActor = exports.GcliActor = protocol.ActorClass({
   typeName: "gcli",
 
-  events: {
-    "commands-changed" : {
-      type: "commandsChanged"
-    }
-  },
+  initialize: function(conn, tabActor) {
+    protocol.Actor.prototype.initialize.call(this, conn);
+    this.tabActor = tabActor;
+    let browser = tabActor.browser;
 
-  initialize: function(conn, tabActor) {
-    Actor.prototype.initialize.call(this, conn);
+    let environment = {
+      chromeWindow: browser.ownerGlobal,
+      chromeDocument: browser.ownerDocument,
+      window: browser.contentWindow,
+      document: browser.contentDocument
+    };
 
-    this._commandsChanged = this._commandsChanged.bind(this);
-
-    this._tabActor = tabActor;
-    this._requisitionPromise = undefined; // see _getRequisition()
-  },
-
-  disconnect: function() {
-    return this.destroy();
-  },
-
-  destroy: function() {
-    Actor.prototype.destroy.call(this);
-
-    // If _getRequisition has not been called, just bail quickly
-    if (this._requisitionPromise == null) {
-      this._commandsChanged = undefined;
-      this._tabActor = undefined;
-      return Promise.resolve();
-    }
-
-    return this._getRequisition().then(requisition => {
-      requisition.destroy();
-
-      this._system.commands.onCommandsChange.remove(this._commandsChanged);
-      this._system.destroy();
-      this._system = undefined;
-
-      this._requisitionPromise = undefined;
-      this._tabActor = undefined;
-
-      this._commandsChanged = undefined;
-    });
+    this.requisition = new Requisition({ environment: env });
   },
 
   /**
-   * Load a module into the requisition
+   * Retrieve a list of the remotely executable commands
    */
-  _testOnly_addItemsByModule: method(function(names) {
-    return this._getRequisition().then(requisition => {
-      return requisition.system.addItemsByModule(names);
-    });
+  specs: method(function() {
+    return this.requisition.canon.getCommandSpecs();
   }, {
-    request: {
-      customProps: Arg(0, "array:string")
-    }
-  }),
-
-  /**
-   * Unload a module from the requisition
-   */
-  _testOnly_removeItemsByModule: method(function(names) {
-    return this._getRequisition().then(requisition => {
-      return requisition.system.removeItemsByModule(names);
-    });
-  }, {
-    request: {
-      customProps: Arg(0, "array:string")
-    }
-  }),
-
-  /**
-   * Retrieve a list of the remotely executable commands
-   * @param customProps Array of strings containing additional properties which,
-   * if specified in the command spec, will be included in the JSON. Normally we
-   * transfer only the properties required for GCLI to function.
-   */
-  specs: method(function(customProps) {
-    return this._getRequisition().then(requisition => {
-      return requisition.system.commands.getCommandSpecs(customProps);
-    });
-  }, {
-    request: {
-      customProps: Arg(0, "nullable:array:string")
-    },
+    request: {},
     response: RetVal("json")
   }),
 
   /**
    * Execute a GCLI command
    * @return a promise of an object with the following properties:
    * - data: The output of the command
    * - type: The type of the data to allow selection of a converter
    * - error: True if the output was considered an error
    */
   execute: method(function(typed) {
-    return this._getRequisition().then(requisition => {
-      return requisition.updateExec(typed).then(output => output.toJson());
+    return this.requisition.updateExec(typed).then(function(output) {
+      return output.toJson();
     });
   }, {
     request: {
       typed: Arg(0, "string") // The command string
     },
     response: RetVal("json")
   }),
 
   /**
    * Get the state of an input string. i.e. requisition.getStateData()
    */
   state: method(function(typed, start, rank) {
-    return this._getRequisition().then(requisition => {
-      return requisition.update(typed).then(() => {
-        return requisition.getStateData(start, rank);
-      });
+    return this.requisition.update(typed).then(() => {
+      return this.requisition.getStateData(start, rank);
     });
   }, {
     request: {
       typed: Arg(0, "string"), // The command string
       start: Arg(1, "number"), // Cursor start position
       rank: Arg(2, "number") // The prediction offset (# times UP/DOWN pressed)
     },
     response: RetVal("json")
@@ -141,173 +95,113 @@ const GcliActor = ActorClass({
 
   /**
    * Call type.parse to check validity. Used by the remote type
    * @return a promise of an object with the following properties:
    * - status: Of of the following strings: VALID|INCOMPLETE|ERROR
    * - message: The message to display to the user
    * - predictions: An array of suggested values for the given parameter
    */
-  parseType: method(function(typed, paramName) {
-    return this._getRequisition().then(requisition => {
-      return requisition.update(typed).then(() => {
-        let assignment = requisition.getAssignment(paramName);
-        return Promise.resolve(assignment.predictions).then(predictions => {
-          return {
-            status: assignment.getStatus().toString(),
-            message: assignment.message,
-            predictions: predictions
-          };
-        });
+  typeparse: method(function(typed, param) {
+    return this.requisition.update(typed).then(function() {
+      var assignment = this.requisition.getAssignment(param);
+
+      return promise.resolve(assignment.predictions).then(function(predictions) {
+        return {
+          status: assignment.getStatus().toString(),
+          message: assignment.message,
+          predictions: predictions
+        };
       });
     });
   }, {
     request: {
       typed: Arg(0, "string"), // The command string
-      paramName: Arg(1, "string") // The name of the parameter to parse
+      param: Arg(1, "string") // The name of the parameter to parse
     },
     response: RetVal("json")
   }),
 
   /**
-   * Get the incremented/decremented value of some type
+   * Get the incremented value of some type
    * @return a promise of a string containing the new argument text
    */
-  nudgeType: method(function(typed, by, paramName) {
-    return this.requisition.update(typed).then(() => {
-      const assignment = this.requisition.getAssignment(paramName);
-      return this.requisition.nudge(assignment, by).then(() => {
+  typeincrement: method(function(typed, param) {
+    return this.requisition.update(typed).then(function() {
+      var assignment = this.requisition.getAssignment(param);
+      return this.requisition.increment(assignment).then(function() {
         return assignment.arg == null ? undefined : assignment.arg.text;
       });
     });
   }, {
     request: {
-      typed: Arg(0, "string"),    // The command string
-      by: Arg(1, "number"),       // +1/-1 for increment / decrement
-      paramName: Arg(2, "string") // The name of the parameter to parse
+      typed: Arg(0, "string"), // The command string
+      param: Arg(1, "string") // The name of the parameter to parse
+    },
+    response: RetVal("string")
+  }),
+
+  /**
+   * See typeincrement
+   */
+  typedecrement: method(function(typed, param) {
+    return this.requisition.update(typed).then(function() {
+      var assignment = this.requisition.getAssignment(param);
+      return this.requisition.decrement(assignment).then(function() {
+        return assignment.arg == null ? undefined : assignment.arg.text;
+      });
+    });
+  }, {
+    request: {
+      typed: Arg(0, "string"), // The command string
+      param: Arg(1, "string") // The name of the parameter to parse
     },
     response: RetVal("string")
   }),
 
   /**
    * Perform a lookup on a selection type to get the allowed values
    */
-  getSelectionLookup: method(function(commandName, paramName) {
-    return this._getRequisition().then(requisition => {
-      const command = requisition.system.commands.get(commandName);
-      if (command == null) {
-        throw new Error("No command called '" + commandName + "'");
+  selectioninfo: method(function(commandName, paramName, action) {
+    var command = this.requisition.canon.getCommand(commandName);
+    if (command == null) {
+      throw new Error('No command called \'' + commandName + '\'');
+    }
+
+    var type;
+    command.params.forEach(function(param) {
+      if (param.name === paramName) {
+        type = param.type;
       }
+    });
+    if (type == null) {
+      throw new Error('No parameter called \'' + paramName + '\' in \'' +
+                      commandName + '\'');
+    }
 
-      let type;
-      command.params.forEach(param => {
-        if (param.name === paramName) {
-          type = param.type;
-        }
-      });
-
-      if (type == null) {
-        throw new Error("No parameter called '" + paramName + "' in '" +
-                        commandName + "'");
-      }
-
-      const reply = type.getLookup(requisition.executionContext);
-      return Promise.resolve(reply).then(lookup => {
-        // lookup returns an array of objects with name/value properties and
-        // the values might not be JSONable, so remove them
-        return lookup.map(info => ({ name: info.name }));
-      });
-    });
+    switch (action) {
+      case 'lookup':
+        return type.lookup(context);
+      case 'data':
+        return type.data(context);
+      default:
+        throw new Error('Action must be either \'lookup\' or \'data\'');
+    }
   }, {
     request: {
-      commandName: Arg(0, "string"), // The command containing the parameter in question
-      paramName: Arg(1, "string"),   // The name of the parameter
+      typed: Arg(0, "string"), // The command containing the parameter in question
+      param: Arg(1, "string"), // The name of the parameter
+      action: Arg(1, "string") // 'lookup' or 'data' depending on the function to call
     },
     response: RetVal("json")
-  }),
-
-  /**
-   * Lazy init for a Requisition
-   */
-  _getRequisition: function() {
-    if (this._tabActor == null) {
-      throw new Error('GcliActor used post-destroy');
-    }
-
-    if (this._requisitionPromise != null) {
-      return this._requisitionPromise;
-    }
-
-    const Requisition = require("gcli/cli").Requisition;
-    const tabActor = this._tabActor;
-
-    this._system = createSystem({ location: "server" });
-    this._system.commands.onCommandsChange.add(this._commandsChanged);
-
-    const gcliInit = require("devtools/commandline/commands-index");
-    gcliInit.addAllItemsByModule(this._system);
-
-    // this._requisitionPromise should be created synchronously with the call
-    // to _getRequisition so that destroy can tell whether there is an async
-    // init in progress
-    this._requisitionPromise = this._system.load().then(() => {
-      const environment = {
-        get chromeWindow() {
-          throw new Error("environment.chromeWindow is not available in runAt:server commands");
-        },
-
-        get chromeDocument() {
-          throw new Error("environment.chromeDocument is not available in runAt:server commands");
-        },
-
-        get window() tabActor.window,
-        get document() tabActor.window.document,
-        get __deprecatedTabActor() tabActor,
-      };
-
-      return new Requisition(this._system, { environment: environment });
-    });
-
-    return this._requisitionPromise;
-  },
-
-  /**
-   * Pass events from requisition.system.commands.onCommandsChange upwards
-   */
-  _commandsChanged: function() {
-    events.emit(this, "commands-changed");
-  },
+  })
 });
 
-exports.GcliActor = GcliActor;
-
-/**
- * 
- */
-const GcliFront = exports.GcliFront = FrontClass(GcliActor, {
+exports.GcliFront = protocol.FrontClass(GcliActor, {
   initialize: function(client, tabForm) {
-    Front.prototype.initialize.call(this, client);
+    protocol.Front.prototype.initialize.call(this, client);
     this.actorID = tabForm.gcliActor;
 
     // XXX: This is the first actor type in its hierarchy to use the protocol
     // library, so we're going to self-own on the client side for now.
     this.manage(this);
   },
 });
-
-// A cache of created fronts: WeakMap<Client, Front>
-const knownFronts = new WeakMap();
-
-/**
- * Create a GcliFront only when needed (returns a promise)
- * For notes on target.makeRemote(), see
- * https://bugzilla.mozilla.org/show_bug.cgi?id=1016330#c7
- */
-exports.GcliFront.create = function(target) {
-  return target.makeRemote().then(() => {
-    let front = knownFronts.get(target.client);
-    if (front == null && target.form.gcliActor != null) {
-      front = new GcliFront(target.client, target.form);
-      knownFronts.set(target.client, front);
-    }
-    return front;
-  });
-};
