
# HG changeset patch
# User J. Ryan Stinnett <jryans@gmail.com>
# Date 1475185875 18000
# Node ID da6b4400a412028ecf13d1911e21b96c12d2ef73
# Parent  b1d60f2f68c7cccc96fcf9a2075bb430a500a0f2
Bug 1291815 - Wait for requests to settle between DAMP subtests. r=bgrins

MozReview-Commit-ID: 2WH1QquOclP


diff --git a/devtools/shared/client/main.js b/devtools/shared/client/main.js
--- a/devtools/shared/client/main.js
+++ b/devtools/shared/client/main.js
@@ -1161,6 +1161,61 @@
     activeRequestsToReject.forEach(request => reject("active", request));
   },
 
+  /**
+   * Search for all requests in process for this client, including those made via
+   * protocol.js and wait all of them to complete.  Since the requests seen when this is
+   * first called may in turn trigger more requests, we keep recursing through this
+   * function until there is no more activity.
+   *
+   * This is a fairly heavy weight process, so it's only meant to be used in tests.
+   *
+   * @return Promise
+   *         Resolved when all requests have settled.
+   */
+  waitForRequestsToSettle() {
+    let requests = [];
+
+    // Gather all pending and active requests in this client
+    // The request object supports a Promise API for completion (it has .then())
+    this._pendingRequests.forEach(requestsForActor => {
+      requests = requests.concat(requestsForActor);
+    });
+    this._activeRequests.forEach(requestForActor => {
+      requests = requests.concat(requestForActor);
+    });
+
+    // protocol.js
+    // Use a Set because some fronts (like domwalker) seem to have multiple parents.
+    let fronts = new Set();
+    let poolsToVisit = [...this._pools];
+
+    // With protocol.js, each front can potentially have it's own pools containing child
+    // fronts, forming a tree.  Descend through all the pools to locate all child fronts.
+    while (poolsToVisit.length) {
+      let pool = poolsToVisit.shift();
+      fronts.add(pool);
+      for (let child of pool.poolChildren()) {
+        poolsToVisit.push(child);
+      }
+    }
+
+    // For all fronts, extract the promise from any ongoing requests.
+    for (let front of fronts) {
+      let frontRequests = front._requests.map(({ deferred }) => deferred.promise);
+      requests = requests.concat(frontRequests);
+    }
+
+    // Abort early if there are no requests
+    if (!requests.length) {
+      return Promise.resolve();
+    }
+
+    return Promise.all(requests).then(() => {
+      // Repeat, more requests may have started in response to those we just waited for
+      return this.waitForRequestsToSettle();
+    });
+  },
+
   registerClient: function (client) {
     let actorID = client.actor;
     if (!actorID) {
diff --git a/devtools/shared/protocol.js b/devtools/shared/protocol.js
--- a/devtools/shared/protocol.js
+++ b/devtools/shared/protocol.js
@@ -794,6 +794,20 @@
     return !this.__poolMap || this._poolMap.size == 0;
   },
 
+  // Generator that yields each non-self child of the pool.
+  poolChildren: function* () {
+    if (!this.__poolMap) {
+      return;
+    }
+    for (let actor of this.__poolMap.values()) {
+      // Self-owned actors are ok, but don't need visiting twice.
+      if (actor === this) {
+        continue;
+      }
+      yield actor;
+    }
+  },
+
   /**
    * Destroy this item, removing it from a parent if it has one,
    * and destroying all children if necessary.
diff --git a/testing/talos/talos/tests/devtools/addon/content/damp.js b/testing/talos/talos/tests/devtools/addon/content/damp.js
--- a/testing/talos/talos/tests/devtools/addon/content/damp.js
+++ b/testing/talos/talos/tests/devtools/addon/content/damp.js
@@ -83,6 +83,12 @@
     });
   },
 
+  waitForRequestsToSettle() {
+    let tab = getActiveTab(getMostRecentBrowserWindow());
+    let target = devtools.TargetFactory.forTab(tab);
+    return target.client.waitForRequestsToSettle();
+  },
+
   saveHeapSnapshot: function(label) {
     let tab = getActiveTab(getMostRecentBrowserWindow());
     let target = devtools.TargetFactory.forTab(tab);
@@ -157,6 +163,7 @@
       value: end - start
     });
 
+    yield this.waitForRequestsToSettle();
     yield this.closeToolbox(null);
     yield this.testTeardown();
   }),
@@ -207,6 +214,7 @@
       value: avgTime
     });
 
+    yield this.waitForRequestsToSettle();
     yield this.closeToolbox(null);
     yield this.testTeardown();
   }),
@@ -270,6 +278,7 @@
         yield this.testSetup(url);
         yield openToolboxAndLog(label + ".webconsole", "webconsole");
         yield reloadPageAndLog(label + ".webconsole");
+        yield this.waitForRequestsToSettle();
         yield closeToolboxAndLog(label + ".webconsole");
         yield this.testTeardown();
       }),
@@ -278,6 +287,7 @@
         yield this.testSetup(url);
         yield openToolboxAndLog(label + ".inspector", "inspector");
         yield reloadPageAndLog(label + ".inspector");
+        yield this.waitForRequestsToSettle();
         yield closeToolboxAndLog(label + ".inspector");
         yield this.testTeardown();
       }),
@@ -286,6 +296,7 @@
         yield this.testSetup(url);
         yield openToolboxAndLog(label + ".jsdebugger", "jsdebugger");
         yield reloadPageAndLog(label + ".jsdebugger");
+        yield this.waitForRequestsToSettle();
         yield closeToolboxAndLog(label + ".jsdebugger");
         yield this.testTeardown();
       }),
@@ -294,6 +305,7 @@
         yield this.testSetup(url);
         yield openToolboxAndLog(label + ".styleeditor", "styleeditor");
         yield reloadPageAndLog(label + ".styleeditor");
+        yield this.waitForRequestsToSettle();
         yield closeToolboxAndLog(label + ".styleeditor");
         yield this.testTeardown();
       }),
@@ -302,6 +314,7 @@
         yield this.testSetup(url);
         yield openToolboxAndLog(label + ".performance", "performance");
         yield reloadPageAndLog(label + ".performance");
+        yield this.waitForRequestsToSettle();
         yield closeToolboxAndLog(label + ".performance");
         yield this.testTeardown();
       }),
@@ -310,6 +323,7 @@
         yield this.testSetup(url);
         yield openToolboxAndLog(label + ".netmonitor", "netmonitor");
         yield reloadPageAndLog(label + ".netmonitor");
+        yield this.waitForRequestsToSettle();
         yield closeToolboxAndLog(label + ".netmonitor");
         yield this.testTeardown();
       }),
@@ -321,6 +335,7 @@
         yield this.saveHeapSnapshot(label);
         yield this.readHeapSnapshot(label);
         yield this.takeCensus(label);
+        yield this.waitForRequestsToSettle();
         yield closeToolboxAndLog(label + ".memory");
         yield this.testTeardown();
       }),

