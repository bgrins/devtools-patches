# HG changeset patch
# Parent d98633336d6f4e5c36b3b214f9101feaad4aebc5
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  4f704aecb2496b6aa9082ad1f61d9dcbddb5d638
Bug 1064458 - Remember log request and response bodies preference between sessions

diff --git a/devtools/client/preferences/devtools.js b/devtools/client/preferences/devtools.js
--- a/devtools/client/preferences/devtools.js
+++ b/devtools/client/preferences/devtools.js
@@ -238,16 +238,18 @@ pref("devtools.webconsole.filter.secwarn
 pref("devtools.webconsole.filter.serviceworkers", true);
 pref("devtools.webconsole.filter.sharedworkers", false);
 pref("devtools.webconsole.filter.windowlessworkers", false);
 pref("devtools.webconsole.filter.servererror", false);
 pref("devtools.webconsole.filter.serverwarn", false);
 pref("devtools.webconsole.filter.serverinfo", false);
 pref("devtools.webconsole.filter.serverlog", false);
 
+pref("devtools.webconsole.filter.network.bodies", false);
+
 // Remember the Browser Console filters
 pref("devtools.browserconsole.filter.network", true);
 pref("devtools.browserconsole.filter.networkinfo", false);
 pref("devtools.browserconsole.filter.netwarn", true);
 pref("devtools.browserconsole.filter.netxhr", false);
 pref("devtools.browserconsole.filter.csserror", true);
 pref("devtools.browserconsole.filter.cssparser", false);
 pref("devtools.browserconsole.filter.csslog", false);
diff --git a/devtools/client/webconsole/webconsole.js b/devtools/client/webconsole/webconsole.js
--- a/devtools/client/webconsole/webconsole.js
+++ b/devtools/client/webconsole/webconsole.js
@@ -421,16 +421,17 @@ WebConsoleFrame.prototype = {
     let toSet = {
       "NetworkMonitor.saveRequestAndResponseBodies": newValue,
     };
 
     // Make sure the web console client connection is established first.
     this.webConsoleClient.setPreferences(toSet, aResponse => {
       if (!aResponse.error) {
         this._saveRequestAndResponseBodies = newValue;
+        Services.prefs.setBoolPref("devtools.webconsole.filter.network.bodies", newValue);
         deferred.resolve(aResponse);
       }
       else {
         deferred.reject(aResponse.error);
       }
     });
 
     return deferred.promise;
