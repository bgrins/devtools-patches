# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  6ee4e2dc5fc99f436a4b852da172607d5baf08d9

diff --git a/toolkit/content/widgets/menu.js b/toolkit/content/widgets/menu.js
--- a/toolkit/content/widgets/menu.js
+++ b/toolkit/content/widgets/menu.js
@@ -1,19 +1,19 @@
 
 {
 /* globals MozBaseText */
 const {XPCOMUtils} = ChromeUtils.import("resource://gre/modules/XPCOMUtils.jsm");
 
-
+let numRendered = 0;
 let timeInRender = 0;
 let timeInAttr = 0;
 
 window.addEventListener("load", () => {
-  console.log(`Spent ${timeInRender} and ${timeInAttr}`);
+  console.log(`Spent ${timeInRender} and ${timeInAttr} for ${numRendered}`);
 });
 
 // XXX remove this line: https://searchfox.org/mozilla-central/rev/c43240cef5829b8a2dec118faff8a5e1fec6ae1b/accessible/xul/XULMenuAccessible.cpp#41
 let frags = {};
 XPCOMUtils.defineLazyGetter(frags, "iconicNoAccel", () => {
   return MozXULElement.parseXULToFragment(`
     <hbox class="menu-iconic-left" align="center" pack="center" role="none">
       <image class="menu-iconic-icon" role="none"/>
@@ -88,32 +88,55 @@ class MozMenuItemBase extends MozElement
 
 MozXULElement.implementCustomInterface(MozMenuItemBase, [Ci.nsIDOMXULSelectControlItemElement, Ci.nsIDOMXULContainerItemElement]);
 
 class MozMenuItem extends MozMenuItemBase {
   constructor() {
     super();
 
     this.renderedOnce = false;
+    XPCOMUtils.defineLazyGetter(this, "inMenulist", () => {
+      return this.closest("menulist");
+    });
     XPCOMUtils.defineLazyGetter(this, "needsEagerRender", () => {
       // XXX include open menupopups (probably want an attr to check here)
-      return this.closest("menulist") || this.closest("[sizetopopup]");
+      return this.inMenulist || this.closest("[sizetopopup]");
+    });
+    XPCOMUtils.defineLazyGetter(this, "isIconic", () => {
+      // return false;
+      let type = this.getAttribute("type");
+      return type == "checkbox" || type == "radio" || this.classList.contains(".menuitem-iconic");
+      return this.matches(`menuitem[type="checkbox"], menuitem[type="radio"], menuitem.menuitem-iconic`);
+    });
+    XPCOMUtils.defineLazyGetter(this, "isIconicNoAccel", () => {
+      // return false;
+      return this.inMenulist;
     });
   }
 
   static get observedAttributes() {
     return ["label", "crop", "accesskey", "highlightable"];
   }
 
   attributeChangedCallback(name, oldValue, newValue) {
     if (!this.renderedOnce || oldValue === newValue) {
       return;
     }
 
-    this._updateAttributes();
+    if (name == "label") {
+      if (this.menuText) {
+        this.inheritAttribute(this.menuText, "value=label");
+      }
+
+      if (this.menuHighlightableText) {
+        this.inheritAttribute(this.menuHighlightableText, "text=label");
+      }
+    } else {
+      this._updateAttributes();
+    }
   }
 
   connectedCallback() {
     // We typically don't want to eagerly render (instead wait for the
     // popup to be shown). But if this is selected, we'll want it to render
     // so the preview text shows properly in the menulist.
     // XXX: why? this can be seen on the font size dropdown on about:preferences
     if (!this.needsEagerRender) {
@@ -164,53 +187,60 @@ class MozMenuItem extends MozMenuItemBas
       this.inheritAttribute(this.menuIcon, "validate");
       // XXX: This seems unused?
       // this.inheritAttribute(this.menuIcon, "triggeringprincipal=iconloadingprincipal");
     }
 
     timeInAttr += (Date.now() - t);
   }
 
-  get isIconic() {
-    return this.matches(`menuitem[type="checkbox"], menuitem[type="radio"], menuitem.menuitem-iconic`);
-  }
+  // get isIconic() {
+  //   return this.matches(`menuitem[type="checkbox"], menuitem[type="radio"], menuitem.menuitem-iconic`);
+  // }
 
-  get isIconicNoAccel() {
-    return this.matches("menulist > menupopup > menuitem");
-  }
+  // get isIconicNoAccel() {
+  //   return this.matches("menulist > menupopup > menuitem");
+  // }
 
   render() {
     if (this.renderedOnce) {
       return;
     }
 
+    numRendered++;
+
     var t = Date.now();
 
     this.renderedOnce = true;
     if (this.isIconicNoAccel) {
-      this.append(document.importNode(frags.iconicNoAccel, true));
-      this.menuText = this.querySelector(".menu-iconic-text");
-      this.menuIconContainer = this.querySelector(".menu-iconic-left");
-      this.menuIcon = this.querySelector(".menu-iconic-icon");
-      this.menuHighlightableText = this.querySelector(".menu-iconic-highlightable-text");
+      this.prepend(document.importNode(frags.iconicNoAccel, true));
+      this.menuIconContainer = this.firstElementChild; // this.querySelector(".menu-iconic-left");
+      this.menuIcon = this.menuIconContainer.firstElementChild; // this.querySelector(".menu-iconic-icon");
+      this.menuText = this.menuIconContainer.nextElementSibling; // this.querySelector(".menu-iconic-text");
+      this.menuHighlightableText = this.menuText.nextElementSibling; // this.querySelector(".menu-iconic-highlightable-text");
     } else if (this.isIconic) {
       this.prepend(document.importNode(frags.iconicNoAccel, true));
       this.append(document.importNode(frags.iconicAccel, true));
-      this.menuText = this.querySelector(".menu-iconic-text");
-      this.menuHighlightableText = this.querySelector(".menu-iconic-highlightable-text");
-      this.menuAccel = this.querySelector(".menu-iconic-accel");
-      this.menuIconContainer = this.querySelector(".menu-iconic-left");
-      this.menuIcon = this.querySelector(".menu-iconic-icon");
+      this.menuIconContainer = this.firstElementChild; // this.querySelector(".menu-iconic-left");
+      this.menuIcon = this.menuIconContainer.firstElementChild; // this.querySelector(".menu-iconic-icon");
+      this.menuText = this.menuIconContainer.nextElementSibling; // this.querySelector(".menu-iconic-text");
+      this.menuHighlightableText = this.menuText.nextElementSibling; // this.querySelector(".menu-iconic-highlightable-text");
+      this.menuAccel = this.lastElementChild.firstElementChild; // this.querySelector(".menu-iconic-accel");
+
+      // this.menuText = this.querySelector(".menu-iconic-text");
+      // this.menuHighlightableText = this.querySelector(".menu-iconic-highlightable-text");
+      // this.menuAccel = this.querySelector(".menu-iconic-accel");
+      // this.menuIconContainer = this.querySelector(".menu-iconic-left");
+      // this.menuIcon = this.querySelector(".menu-iconic-icon");
     } else {
-      this.append(document.importNode(frags.plain, true));
-      this.menuText = this.querySelector(".menu-text");
-      this.menuAccel = this.querySelector(".menu-accel");
+      this.prepend(document.importNode(frags.plain, true));
+      this.menuText = this.firstElementChild; // this.querySelector(".menu-text");
+      this.menuAccel = this.lastElementChild.firstElementChild; // this.querySelector(".menu-accel");
     }
 
     timeInRender += (Date.now() - t);
 
     this._updateAttributes();
-
   }
 }
 
 customElements.define("menuitem", MozMenuItem);
 }
