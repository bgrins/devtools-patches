# HG changeset patch
# User Miguel Useche <migueluseche@skatox.com>
# Parent  fe0ea08656ec28e9d33e381e0653ba65713a7db4
Bug 925267 - Implementing recently typed webconsole values for autocomplete

diff --git a/devtools/client/preferences/devtools.js b/devtools/client/preferences/devtools.js
--- a/devtools/client/preferences/devtools.js
+++ b/devtools/client/preferences/devtools.js
@@ -245,16 +245,17 @@ pref("devtools.webconsole.filter.secerro
 pref("devtools.webconsole.filter.secwarn", true);
 pref("devtools.webconsole.filter.serviceworkers", true);
 pref("devtools.webconsole.filter.sharedworkers", false);
 pref("devtools.webconsole.filter.windowlessworkers", false);
 pref("devtools.webconsole.filter.servererror", false);
 pref("devtools.webconsole.filter.serverwarn", false);
 pref("devtools.webconsole.filter.serverinfo", false);
 pref("devtools.webconsole.filter.serverlog", false);
+pref("devtools.webconsole.filter.suggestions", "");
 
 // Remember the Browser Console filters
 pref("devtools.browserconsole.filter.network", true);
 pref("devtools.browserconsole.filter.networkinfo", false);
 pref("devtools.browserconsole.filter.netwarn", true);
 pref("devtools.browserconsole.filter.netxhr", false);
 pref("devtools.browserconsole.filter.csserror", true);
 pref("devtools.browserconsole.filter.cssparser", false);
diff --git a/devtools/client/webconsole/filter-suggestions.js b/devtools/client/webconsole/filter-suggestions.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/filter-suggestions.js
@@ -0,0 +1,211 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/* global Services */
+
+"use strict";
+
+// Maximum number of filter suggestions shown in the filter box.
+const MAX_SUGGESTIONS = 8;
+
+loader.lazyGetter(this, "AutocompletePopup",
+      () => require("devtools/client/shared/autocomplete-popup").AutocompletePopup);
+
+/**
+ * Adds a list of suggestions to web console's filter box.
+ *
+ * @constructor
+ * @param nsIDOMElement domElement
+ *        The DOM element to show suggestions according to the
+ *        current term.
+ * @param nsIDOMDocument document
+ *        The document you want the popup attached to.
+ * @param function filterFunction
+ *        Function to execute when selecting terms at filterbox.
+ */
+function FilterSuggestions(domElement, document, filterFunction) {
+  this.filterBox = domElement;
+  this.filterFunction = filterFunction;
+  this.filteredTerms = Services.prefs.getCharPref(this.PREFERENCE_KEY).split(",");
+
+  this._onKeyUp = this._onKeyUp.bind(this);
+  this._onFilterChange = this._onFilterChange.bind(this);
+  this._onFilterKeypress = this._onFilterKeypress.bind(this);
+  this._onListBoxClick = this._onListBoxClick.bind(this);
+
+  // Options for the AutocompletePopup.
+  let options = {
+    panelId: "hud-filter-box-panel",
+    listBoxId: "hud-filter-box-panel-listbox",
+    autoSelect: true,
+    position: "before_start",
+    direction: "ltr",
+    theme: "auto",
+    onClick: this._onListBoxClick,
+  };
+  this.popup = new AutocompletePopup(document, options);
+
+  this.filterBox.addEventListener("change", this._onFilterChange, false);
+  this.filterBox.addEventListener("keypress", this._onFilterKeypress, false);
+  this.filterBox.addEventListener("keyup", this._onKeyUp, false);
+  this.filterBox.addEventListener("click", this._onFilterClick, false);
+}
+
+exports.FilterSuggestions = FilterSuggestions;
+
+FilterSuggestions.prototype = {
+  PREFERENCE_KEY: "devtools.webconsole.filter.suggestions",
+
+  /**
+   * Handles key up event on filter box, populates the suggestions list
+   * and shows the suggestion popup.
+   */
+  _onKeyUp: function (event) {
+    // Don't interfere with popup navigation
+    if (event.keyCode == event.DOM_VK_ESCAPE ||
+        event.keyCode == event.DOM_VK_UP ||
+        event.keyCode == event.DOM_VK_DOWN ||
+        event.keyCode == event.DOM_VK_RIGHT ||
+        event.keyCode == event.DOM_VK_TAB ||
+        event.keyCode == event.DOM_VK_RETURN) {
+      return;
+    }
+
+    let suggestedTerms = this._getSuggestedTerms();
+
+    if (suggestedTerms.length && this.filterBox.value.length) {
+      this.popup.setItems(suggestedTerms);
+      this.popup.openPopup(this.filterBox);
+    } else {
+      this.popup.hidePopup();
+    }
+  },
+
+  /**
+  * Find suggested terms based on filter box value from all previous saved terms.
+  */
+  _getSuggestedTerms: function () {
+    let items = [];
+    let curTerm = this.filterBox.value;
+
+    for (let term of this.filteredTerms) {
+      if (term.startsWith(curTerm)) {
+        items.push({
+          preLabel: term.substr(0, curTerm.length),
+          label: term
+        });
+      }
+    }
+
+    return items;
+  },
+
+  /**
+   * Saves current term in the filter box for future suggestions.
+   */
+  _onFilterChange: function () {
+    let term = this.filterBox.value;
+
+    if (term.length && this.filteredTerms.indexOf(term) < 0) {
+      this.filteredTerms.push(term);
+
+      if (this.filteredTerms.length > MAX_SUGGESTIONS) {
+        this.filteredTerms.shift();
+      }
+
+      Services.prefs.setCharPref(this.PREFERENCE_KEY, this.filteredTerms.join(","));
+    }
+  },
+
+  /**
+   * Removes specified term from suggestion list.
+   *
+   * @param string term
+   *        The term to remove.
+   */
+  _removeFilterTerm: function (term) {
+    this.filteredTerms = this.filteredTerms.filter(elem => elem !== term);
+  },
+
+  /**
+   * Handles keypresses inside the input box.
+   */
+  _onFilterKeypress: function (event) {
+    let term = this.filterBox.value;
+
+    switch (event.keyCode) {
+      case event.DOM_VK_ESCAPE:
+        this.popup.hidePopup();
+        break;
+      case event.DOM_VK_RETURN:
+        this.filterFunction();
+        this.popup.hidePopup();
+        this._onFilterChange();
+        break;
+      case event.DOM_VK_UP:
+        if (this.popup.isOpen && this.popup.itemCount) {
+          this.popup.selectPreviousItem();
+        }
+        break;
+      case event.DOM_VK_DOWN:
+        if (this.popup.isOpen && this.popup.itemCount) {
+          this.popup.selectNextItem();
+        }
+        break;
+      case event.DOM_VK_TAB:
+      case event.DOM_VK_RIGHT:
+        let isTab = event.keyCode == event.DOM_VK_TAB,
+          selItem = this.popup.selectedItem,
+          atEnd = this.filterBox.selectionStart == this.filterBox.value.length;
+
+        if (isTab) {
+          event.preventDefault();
+        }
+
+        if (this.popup.isOpen && selItem.preLabel == term && (atEnd || isTab)) {
+          this.filterBox.value = selItem.label;
+          this.filterFunction();
+          this.popup.hidePopup();
+        } else {
+          // Lets other listeners to process the event when pressing these keys.
+          return;
+        }
+        break;
+      default:
+        return;
+    }
+
+    event.preventDefault();
+    event.stopPropagation();
+  },
+
+  /**
+  * Handles mouse click on suggestions richlistbox.
+  */
+  _onListBoxClick: function (event) {
+    if (event.type === "click") {
+      event.stopPropagation();
+      event.preventDefault();
+      let currentValue = this.filterBox.value;
+      this.filterBox.value = this.popup.selectedItem.label;
+      this.filterBox.focus();
+      this.filterFunction();
+      this.popup.hidePopup();
+      this._removeFilterTerm(currentValue);
+    }
+  },
+
+  /**
+   * Removes event listeners and cleans up references.
+   */
+  destroy: function () {
+    this.filterBox.removeEventListener("change", this._onFilterChange, false);
+    this.filterBox.removeEventListener("keypress", this._onFilterKeypress, false);
+    this.filterBox.removeEventListener("keyup", this._onKeyUp, false);
+    this.filterBox.removeEventListener("click", this._onFilterClick, false);
+    this.popup.destroy();
+    this.popup = null;
+    this.filteredTerms = null;
+  },
+};
diff --git a/devtools/client/webconsole/moz.build b/devtools/client/webconsole/moz.build
--- a/devtools/client/webconsole/moz.build
+++ b/devtools/client/webconsole/moz.build
@@ -9,13 +9,14 @@ BROWSER_CHROME_MANIFESTS += ['test/brows
 DIRS += [
     'net',
     'new-console-output',
 ]
 
 DevToolsModules(
     'console-commands.js',
     'console-output.js',
+    'filter-suggestions.js',
     'hudservice.js',
     'jsterm.js',
     'panel.js',
     'webconsole.js',
 )
diff --git a/devtools/client/webconsole/test/browser.ini b/devtools/client/webconsole/test/browser.ini
--- a/devtools/client/webconsole/test/browser.ini
+++ b/devtools/client/webconsole/test/browser.ini
@@ -384,8 +384,9 @@ skip-if = e10s # Bug 1042253 - webconsol
 [browser_console_open_or_focus.js]
 [browser_webconsole_bug_922212_console_dirxml.js]
 [browser_webconsole_shows_reqs_in_netmonitor.js]
 [browser_netmonitor_shows_reqs_in_webconsole.js]
 [browser_webconsole_bug_1050691_click_function_to_source.js]
 [browser_webconsole_context_menu_open_in_var_view.js]
 [browser_webconsole_context_menu_store_as_global.js]
 [browser_webconsole_strict_mode_errors.js]
+[browser_webconsole_filter_suggestions.js]
diff --git a/devtools/client/webconsole/test/browser_webconsole_filter_suggestions.js b/devtools/client/webconsole/test/browser_webconsole_filter_suggestions.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/test/browser_webconsole_filter_suggestions.js
@@ -0,0 +1,168 @@
+/* Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/ */
+"use strict";
+
+// Check that filtebox"s suggestions popup at Web/Browser Consoles works ok.
+// This test does:
+// - opens the Browser Console,
+// - loads some terms to the popup by typing some values.
+// - tests that terms are loaded ok and popup suggests correct terms.
+// - test popup navigation when a term is written in the filterbox.
+// - test that term selection from popup is correct.
+
+const TEST_URL = "data:text/html;charset=utf8,<p>Testing bug 925267:  remember recently typed values for autocomplete";
+
+add_task(function* () {
+  yield loadTab(TEST_URL);
+  let hud = yield openConsole();
+  yield startTests(hud);
+});
+
+function startTests(hud) {
+  testSuggestionsLoad(hud);
+  testPopupSuggestions(hud);
+  testPopupNavigation(hud);
+  testPopupSelection(hud);
+  finishTest();
+}
+
+function testSuggestionsLoad(hud) {
+  let filterTerms = ["", "http", "https", "ht", "xml", "div"];
+  let filterBoxTerms = hud.ui.filterPopup.filteredTerms;
+
+  info("filterBox terms" + filterBoxTerms);
+
+  for (let term of filterTerms) {
+    hud.ui.filterBox.focus();
+    hud.ui.filterBox.value = "";
+    EventUtils.sendString(term, hud.iframeWindow);
+    hud.jsterm.inputNode.focus();
+  }
+  is(filterBoxTerms.length, filterTerms.length,
+    "testing terms loading by losing focus" + filterBoxTerms[0]);
+
+  hud.ui.filterBox.focus();
+  hud.ui.filterBox.value = "";
+  EventUtils.sendChar("h", hud.iframeWindow);
+  EventUtils.synthesizeKey("VK_RETURN", {});
+  is(filterBoxTerms.length, filterTerms.length + 1,
+    "testing term loading by pressing return key");
+}
+
+function testPopupSuggestions(hud) {
+  let textbox = hud.ui.filterBox,
+    popup = hud.ui.filterPopup.popup;
+
+  // The various terms of the filter suggestions: [key, suggestions array]
+  // [function testSuggestionsLoad(hud) {
+
+  //  what key to press,
+  //  suggestions array
+  //    [suggestion1, suggestion2, ...
+  //  ]
+  // ]
+  let actions = [
+    ["x", ["xml"]],
+    ["VK_BACK_SPACE", []],
+    ["f", []],
+    ["VK_BACK_SPACE", []],
+    ["d", ["div"]],
+    ["a", []],
+    ["VK_BACK_SPACE", ["div"]],
+    ["VK_BACK_SPACE", []],
+    ["h", ["http", "https", "ht", "h"]],
+    ["t", ["http", "https", "ht"]],
+    ["t", ["http", "https"]],
+    ["VK_LEFT", ["http", "https"]],
+    ["VK_RIGHT", ["http", "https"]],
+    ["p", ["http", "https"]],
+    ["s", ["https"]],
+    ["VK_LEFT", ["https"]],
+  ];
+
+  textbox.focus();
+  textbox.value = "";
+
+  for (let action of actions) {
+    let curKey = action[0];
+
+    info("pressing key " + curKey +
+      " to get suggestions " + JSON.stringify(action[1]));
+
+    EventUtils.synthesizeKey(curKey, {});
+
+    let suggestions = popup.getItems();
+    let dbgMsg = "Expected number of suggestions at "
+            + textbox.value + " term." + JSON.stringify(suggestions, null, 4);
+
+    is(popup.isOpen ? suggestions.length : 0, action[1].length, dbgMsg);
+
+    let i = 0;
+    for (let term of action[1]) {
+      is(term, suggestions[i].label,
+         "Correct suggestion at " + i + "th index for term: " + textbox.value);
+      i++;
+    }
+  }
+
+  textbox = null;
+  popup = null;
+}
+
+function testPopupNavigation(hud) {
+  let textbox = hud.ui.filterBox,
+    popup = hud.ui.filterPopup.popup;
+
+  textbox.focus();
+  textbox.value = "";
+  EventUtils.synthesizeKey("h", {});
+
+  let suggestions = popup.getItems().reverse();
+
+  for (let i = 0; i < suggestions.length - 1; i++) {
+    EventUtils.synthesizeKey("VK_UP", {});
+
+    let item = popup.getItemAtIndex(popup.selectedIndex).label;
+
+    is(item, suggestions[i + 1].label,
+      "The suggestion with value " + item + " is selected");
+  }
+
+  for (let i = suggestions.length - 1; i > 0; i--) {
+    EventUtils.synthesizeKey("VK_DOWN", {});
+
+    let item = popup.getItemAtIndex(popup.selectedIndex).label;
+
+    is(item, suggestions[i - 1].label,
+      "The suggestion with value " + item + " is selected");
+  }
+}
+
+function testPopupSelection(hud) {
+  let textbox = hud.ui.filterBox,
+    popup = hud.ui.filterPopup.popup,
+    selectKeys = ["VK_RIGHT", "VK_TAB"];
+
+  // Test popup hiding when pressing ESC key.
+  textbox.focus();
+  textbox.value = "";
+  EventUtils.synthesizeKey("h", {});
+  ok(popup.isOpen, "the popup is open");
+
+  EventUtils.synthesizeKey("VK_ESCAPE", {});
+  ok(!popup.isOpen, "the popup is hidden");
+
+  for (let key of selectKeys) {
+    textbox.focus();
+    textbox.value = "";
+
+    // Displays previous loaded suggestions.
+    EventUtils.synthesizeKey("h", {});
+    EventUtils.synthesizeKey("VK_UP", {});
+    EventUtils.synthesizeKey(key, {});
+
+    let selectedTerm = popup.getItemAtIndex(popup.selectedIndex).label;
+    is(selectedTerm, textbox.value,
+      "the term " + selectedTerm + " was selected and sent to the filterbox");
+  }
+}
diff --git a/devtools/client/webconsole/webconsole.js b/devtools/client/webconsole/webconsole.js
--- a/devtools/client/webconsole/webconsole.js
+++ b/devtools/client/webconsole/webconsole.js
@@ -33,16 +33,17 @@ loader.lazyRequireGetter(this, "system",
 loader.lazyRequireGetter(this, "JSTerm", "devtools/client/webconsole/jsterm", true);
 loader.lazyRequireGetter(this, "gSequenceId", "devtools/client/webconsole/jsterm", true);
 loader.lazyImporter(this, "VariablesView", "resource://devtools/client/shared/widgets/VariablesView.jsm");
 loader.lazyImporter(this, "VariablesViewController", "resource://devtools/client/shared/widgets/VariablesViewController.jsm");
 loader.lazyRequireGetter(this, "gDevTools", "devtools/client/framework/devtools", true);
 loader.lazyImporter(this, "PluralForm", "resource://gre/modules/PluralForm.jsm");
 loader.lazyRequireGetter(this, "KeyShortcuts", "devtools/client/shared/key-shortcuts", true);
 loader.lazyRequireGetter(this, "ZoomKeys", "devtools/client/shared/zoom-keys");
+loader.lazyRequireGetter(this, "FilterSuggestions", "devtools/client/webconsole/filter-suggestions", true);
 
 const STRINGS_URI = "chrome://devtools/locale/webconsole.properties";
 var l10n = new WebConsoleUtils.L10n(STRINGS_URI);
 
 const XHTML_NS = "http://www.w3.org/1999/xhtml";
 
 const MIXED_CONTENT_LEARN_MORE = "https://developer.mozilla.org/docs/Web/Security/Mixed_content";
 
@@ -520,16 +521,21 @@ WebConsoleFrame.prototype = {
     this.outputWrapper = doc.getElementById("output-wrapper");
 
     this.completeNode = doc.querySelector(".jsterm-complete-node");
     this.inputNode = doc.querySelector(".jsterm-input-node");
 
     this._setFilterTextBoxEvents();
     this._initFilterButtons();
 
+    // Filter's suggestion terms popup.
+    let filterFunction = this.adjustVisibilityOnSearchStringChange.bind(this);
+    this.filterPopup = new FilterSuggestions(this.filterBox,
+                                                  this.document, filterFunction);
+
     // Update the character width and height needed for the popup offset
     // calculations.
     this._updateCharSize();
 
     let clearButton =
       doc.getElementsByClassName("webconsole-clear-console-button")[0];
     clearButton.addEventListener("command", () => {
       this.owner._onClearButton();
@@ -2789,16 +2795,19 @@ WebConsoleFrame.prototype = {
       this.jsterm.off("sidebar-opened", this.resize);
       this.jsterm.off("sidebar-closed", this.resize);
       this.jsterm.destroy();
       this.jsterm = null;
     }
     this.output.destroy();
     this.output = null;
 
+    this.filterPopup.destroy();
+    this.filterPopup = null;
+
     this.React = this.ReactDOM = this.FrameView = null;
 
     if (this._contextMenuHandler) {
       this._contextMenuHandler.destroy();
       this._contextMenuHandler = null;
     }
 
     this._commandController = null;
