# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  ce2218406119c36a551e3faea4e192186ee46cc5
Bug 1363871 - Key openRequests / openResponses on channel;r=Honza

This prevents NS_ERROR_NOT_IMPLEMENTED on nsIHttpChannel.channelId when
it is called with an nsINullChannel.

MozReview-Commit-ID: J8bRWSz4TYv

diff --git a/devtools/shared/webconsole/network-monitor.js b/devtools/shared/webconsole/network-monitor.js
--- a/devtools/shared/webconsole/network-monitor.js
+++ b/devtools/shared/webconsole/network-monitor.js
@@ -533,23 +533,23 @@ NetworkResponseListener.prototype = {
    * @private
    */
   _findOpenResponse: function () {
     if (!this.owner || this._foundOpenResponse) {
       return;
     }
 
     let channel = this.httpActivity.channel;
-    let openResponse = this.owner.openResponses.get(channel.channelId);
+    let openResponse = this.owner.openResponses.get(channel);
     if (!openResponse) {
       return;
     }
     this._foundOpenResponse = true;
 
-    this.owner.openResponses.delete(channel.channelId);
+    this.owner.openResponses.delete(channel);
 
     this.httpActivity.owner.addResponseHeaders(openResponse.headers);
     this.httpActivity.owner.addResponseCookies(openResponse.cookies);
   },
 
   /**
    * Clean up the response listener once the response input stream is closed.
    * This is called from onStopRequest() or from onInputStreamReady() when the
@@ -881,17 +881,17 @@ NetworkMonitor.prototype = {
     channel.QueryInterface(Ci.nsIHttpChannelInternal);
     channel.getResponseVersion(httpVersionMaj, httpVersionMin);
 
     response.status = channel.responseStatus;
     response.statusText = channel.responseStatusText;
     response.httpVersion = "HTTP/" + httpVersionMaj.value + "." +
                                      httpVersionMin.value;
 
-    this.openResponses.set(channel.channelId, response);
+    this.openResponses.set(channel, response);
 
     if (topic === "http-on-examine-cached-response") {
       // Service worker requests emits cached-reponse notification on non-e10s,
       // and we fake one on e10s.
       let fromServiceWorker = this.interceptedChannels.has(channel);
       this.interceptedChannels.delete(channel);
 
       // If this is a cached response, there never was a request event
@@ -1165,17 +1165,17 @@ NetworkMonitor.prototype = {
    * Find an HTTP activity object for the channel.
    *
    * @param nsIHttpChannel channel
    *        The HTTP channel whose activity object we want to find.
    * @return object
    *        The HTTP activity object, or null if it is not found.
    */
   _findActivityObject: function (channel) {
-    return this.openRequests.get(channel.channelId) || null;
+    return this.openRequests.get(channel) || null;
   },
 
   /**
    * Find an existing HTTP activity object, or create a new one. This
    * object is used for storing all the request and response
    * information.
    *
    * This is a HAR-like object. Conformance to the spec is not guaranteed at
@@ -1207,17 +1207,17 @@ NetworkMonitor.prototype = {
         // internal timing information, see observeActivity()
         timings: {},
         // see _onResponseHeader()
         responseStatus: null,
         // the activity owner which is notified when changes happen
         owner: null,
       };
 
-      this.openRequests.set(channel.channelId, httpActivity);
+      this.openRequests.set(channel, httpActivity);
     }
 
     return httpActivity;
   },
 
   /**
    * Setup the network response listener for the given HTTP activity. The
    * NetworkResponseListener is responsible for storing the response body.
@@ -1358,17 +1358,17 @@ NetworkMonitor.prototype = {
    *
    * @private
    * @param object httpActivity
    *        The HTTP activity object we work with.
    */
   _onTransactionClose: function (httpActivity) {
     let result = this._setupHarTimings(httpActivity);
     httpActivity.owner.addEventTimings(result.total, result.timings);
-    this.openRequests.delete(httpActivity.channel.channelId);
+    this.openRequests.delete(httpActivity.channel);
   },
 
   /**
    * Update the HTTP activity object to include timing information as in the HAR
    * spec. The HTTP activity object holds the raw timing information in
    * |timings| - these are timings stored for each activity notification. The
    * HAR timing information is constructed based on these lower level
    * data.
