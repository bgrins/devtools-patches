# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  f7b1e24df40bcfa22ac9d64eb924c679253e8085

diff --git a/toolkit/components/processsingleton/MainProcessSingleton.js b/toolkit/components/processsingleton/MainProcessSingleton.js
--- a/toolkit/components/processsingleton/MainProcessSingleton.js
+++ b/toolkit/components/processsingleton/MainProcessSingleton.js
@@ -79,22 +79,34 @@ MainProcessSingleton.prototype = {
     case "document-element-inserted":
       // Set up Custom Elements for XUL windows before anything else happens
       // in the document. Anything loaded here should be considered part of
       // core XUL functionality. Any window-specific elements can be registered
       // via <script> tags at the top of individual documents.
       const doc = subject;
       if (doc.nodePrincipal.isSystemPrincipal &&
           doc.contentType == "application/vnd.mozilla.xul+xml") {
-        for (let script of [
-          "chrome://global/content/elements/stringbundle.js",
-          "chrome://global/content/elements/general.js",
-        ]) {
-          Services.scriptloader.loadSubScript(script, doc.ownerGlobal);
+        // for (let script of [
+        //   "chrome://global/content/elements/stringbundle.js",
+        // ]) {
+        //   Services.scriptloader.loadSubScript(script, doc.ownerGlobal);
+        // }
+
+        const lazyElements = {
+          "stringbundle": "chrome://global/content/elements/stringbundle.js",
+          "deck": "chrome://global/content/elements/general.js",
+          "dropmarker": "chrome://global/content/elements/general.js",
         }
+
+        for (let i in lazyElements) {
+          doc.ownerGlobal.customElements.setElementCreationCallback(i, (type) => {
+            Services.scriptloader.loadSubScript(lazyElements[type], doc.ownerGlobal);
+          });
+        }
+
       }
       break;
 
     case "xpcom-shutdown":
       Services.mm.removeMessageListener("Search:AddEngine", this.addSearchEngine);
       Services.obs.removeObserver(this, "document-element-inserted");
       break;
     }
