# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  23d6633b714c76ba1502be08b20fae413bf419f5
Bug 1269497 - eslint fixes for Menu API;r=jdescottes

MozReview-Commit-ID: 9iSJgWUBRbp

diff --git a/devtools/client/debugger/test/mochitest/head.js b/devtools/client/debugger/test/mochitest/head.js
--- a/devtools/client/debugger/test/mochitest/head.js
+++ b/devtools/client/debugger/test/mochitest/head.js
@@ -1153,17 +1153,17 @@ function source(sourceClient) {
 // console if necessary.  This cleans up the split console pref so
 // it won't pollute other tests.
 function getSplitConsole(toolbox, win) {
   registerCleanupFunction(() => {
     Services.prefs.clearUserPref("devtools.toolbox.splitconsoleEnabled");
   });
 
   if (!win) {
-    win = toolbox.doc.defaultView;
+    win = toolbox.win;
   }
 
   if (!toolbox.splitConsole) {
     EventUtils.synthesizeKey("VK_ESCAPE", {}, win);
   }
 
   return new Promise(resolve => {
     toolbox.getPanelWhenReady("webconsole").then(() => {
diff --git a/devtools/client/framework/menu-item.js b/devtools/client/framework/menu-item.js
--- a/devtools/client/framework/menu-item.js
+++ b/devtools/client/framework/menu-item.js
@@ -1,14 +1,16 @@
 /* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+"use strict";
+
 /**
  * A partial implementation of the MenuItem API provided by electron:
  * https://github.com/electron/electron/blob/master/docs/api/menu-item.md.
  *
  * Missing features:
  *   - id String - Unique within a single menu. If defined then it can be used
  *                 as a reference to this item by the position attribute.
  *   - role String - Define the action of the menu item; when specified the
@@ -18,27 +20,29 @@
  *   - icon NativeImage
  *   - visible Boolean - If false, the menu item will be entirely hidden.
  *   - position String - This field allows fine-grained definition of the
  *                       specific location within a given menu.
  *
  * Implemented features:
  *  @param Object options
  *    Function click
- *      Will be called with click(menuItem, browserWindow) when the menu item is clicked
+ *      Will be called with click(menuItem, browserWindow) when the menu item
+ *       is clicked
  *    String type
  *      Can be normal, separator, submenu, checkbox or radio
  *    String label
  *      Boolean enabled
  *    If false, the menu item will be greyed out and unclickable.
  *      Boolean checked
  *    Should only be specified for checkbox or radio type menu items.
  *      Menu submenu
- *    Should be specified for submenu type menu items. If submenu is specified, the type: 'submenu' can be omitted. If the value is not a Menu then it will be automatically converted to one using Menu.buildFromTemplate.
- *
+ *    Should be specified for submenu type menu items. If submenu is specified,
+ *      the type: 'submenu' can be omitted. If the value is not a Menu then it
+ *      will be automatically converted to one using Menu.buildFromTemplate.
  */
 function MenuItem({
     accesskey = null,
     checked = false,
     click = () => {},
     disabled = false,
     label = "",
     id = null,
diff --git a/devtools/client/framework/menu.js b/devtools/client/framework/menu.js
--- a/devtools/client/framework/menu.js
+++ b/devtools/client/framework/menu.js
@@ -1,28 +1,29 @@
 /* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
-const MenuItem = require("./menu-item");
+"use strict";
+
 const EventEmitter = require("devtools/shared/event-emitter");
 
 /**
  * A partial implementation of the Menu API provided by electron:
  * https://github.com/electron/electron/blob/master/docs/api/menu.md.
  *
  * Extra features:
  *  - Emits an 'open' and 'close' event when the menu is opened/closed
 
  * @param String id (non standard)
  *        Needed so tests can confirm the XUL implementation is working
  */
-function Menu({id=null} = {}) {
+function Menu({ id = null } = {}) {
   this.menuitems = [];
   this.id = id;
 
   Object.defineProperty(this, "items", {
     get() {
       return this.menuitems;
     }
   });
@@ -30,43 +31,43 @@ function Menu({id=null} = {}) {
   EventEmitter.decorate(this);
 }
 
 /**
  * Add an item to the end of the Menu
  *
  * @param {MenuItem} menuItem
  */
-Menu.prototype.append = function(menuItem) {
+Menu.prototype.append = function (menuItem) {
   this.menuitems.push(menuItem);
 };
 
 /**
  * Add an item to a specified position in the menu
  *
  * @param {int} pos
  * @param {MenuItem} menuItem
  */
-Menu.prototype.insert = function(pos, menuItem) {
-  throw "Not implemented";
+Menu.prototype.insert = function (pos, menuItem) {
+  throw Error("Not implemented");
 };
 
 /**
  * Show the Menu at a specified location on the screen
  *
  * Missing features:
  *   - browserWindow - BrowserWindow (optional) - Default is null.
  *   - positioningItem Number - (optional) OS X
  *
  * @param {int} screenX
  * @param {int} screenY
  * @param Toolbox toolbox (non standard)
  *        Needed so we in which window to inject XUL
  */
-Menu.prototype.popup = function(screenX, screenY, toolbox) {
+Menu.prototype.popup = function (screenX, screenY, toolbox) {
   let doc = toolbox.doc;
   let popup = doc.createElement("menupopup");
   popup.setAttribute("menu-api", "true");
 
   if (this.id) {
     popup.id = this.id;
   }
   this._createMenuItems(popup);
@@ -84,17 +85,17 @@ Menu.prototype.popup = function(screenX,
       this.emit("open");
     }
   });
 
   doc.querySelector("popupset").appendChild(popup);
   popup.openPopupAtScreen(screenX, screenY, true);
 };
 
-Menu.prototype._createMenuItems = function(parent) {
+Menu.prototype._createMenuItems = function (parent) {
   let doc = parent.ownerDocument;
   this.menuitems.forEach(item => {
     if (!item.visible) {
       return;
     }
 
     if (item.submenu) {
       let menupopup = doc.createElement("menupopup");
@@ -134,20 +135,20 @@ Menu.prototype._createMenuItems = functi
       }
 
       parent.appendChild(menuitem);
     }
   });
 };
 
 Menu.setApplicationMenu = () => {
-  throw "Not implemented";
+  throw Error("Not implemented");
 };
 
 Menu.sendActionToFirstResponder = () => {
-  throw "Not implemented";
+  throw Error("Not implemented");
 };
 
 Menu.buildFromTemplate = () => {
-  throw "Not implemented";
+  throw Error("Not implemented");
 };
 
 module.exports = Menu;
diff --git a/devtools/client/framework/test/browser_keybindings_02.js b/devtools/client/framework/test/browser_keybindings_02.js
--- a/devtools/client/framework/test/browser_keybindings_02.js
+++ b/devtools/client/framework/test/browser_keybindings_02.js
@@ -35,17 +35,17 @@ add_task(function*() {
 function zoomWithKey(toolbox, key) {
   if (!key) {
     info("Key was empty, skipping zoomWithKey");
     return;
   }
 
   info("Zooming with key: " + key);
   let currentZoom = toolbox.zoomValue;
-  EventUtils.synthesizeKey(key, {accelKey: true}, toolbox.doc.defaultView);
+  EventUtils.synthesizeKey(key, {accelKey: true}, toolbox.win);
   isnot(toolbox.zoomValue, currentZoom, "The zoom level was changed in the toolbox");
 }
 
 function* checkKeyBindings(toolbox) {
   zoomWithKey(toolbox, toolbox.doc.getElementById("toolbox-zoom-in-key").getAttribute("key"));
   zoomWithKey(toolbox, toolbox.doc.getElementById("toolbox-zoom-in-key2").getAttribute("key"));
   zoomWithKey(toolbox, toolbox.doc.getElementById("toolbox-zoom-in-key3").getAttribute("key"));
 
diff --git a/devtools/client/framework/test/browser_menu_api.js b/devtools/client/framework/test/browser_menu_api.js
--- a/devtools/client/framework/test/browser_menu_api.js
+++ b/devtools/client/framework/test/browser_menu_api.js
@@ -6,17 +6,17 @@
 "use strict";
 
 // Test that the Menu API works
 
 const URL = "data:text/html;charset=utf8,test page for menu api";
 const Menu = require("devtools/client/framework/menu");
 const MenuItem = require("devtools/client/framework/menu-item");
 
-add_task(function*() {
+add_task(function* () {
   info("Create a test tab and open the toolbox");
   let tab = yield addTab(URL);
   let target = TargetFactory.forTab(tab);
   let toolbox = yield gDevTools.showToolbox(target, "webconsole");
 
   yield testMenuItems();
   yield testMenuPopup(toolbox);
   yield testSubmenu(toolbox);
@@ -76,43 +76,44 @@ function* testMenuPopup(toolbox) {
     label: "Invisible",
     visible: false,
   }));
 
   menu.popup(0, 0, toolbox);
 
   ok(toolbox.doc.querySelector("#menu-popup"), "A popup is in the DOM");
 
-  let menuSeparators = toolbox.doc.querySelectorAll("#menu-popup > menuseparator");
+  let menuSeparators =
+    toolbox.doc.querySelectorAll("#menu-popup > menuseparator");
   is(menuSeparators.length, 1, "A separator is in the menu");
 
   let menuItems = toolbox.doc.querySelectorAll("#menu-popup > menuitem");
   is(menuItems.length, MENU_ITEMS.length, "Correct number of menuitems");
 
   is(menuItems[0].id, MENU_ITEMS[0].id, "Correct id for menuitem");
   is(menuItems[0].getAttribute("label"), MENU_ITEMS[0].label, "Correct label");
 
   is(menuItems[1].getAttribute("label"), MENU_ITEMS[1].label, "Correct label");
-  is(menuItems[1].getAttribute("type"), "checkbox", "Correct type attribute");
-  is(menuItems[1].getAttribute("checked"), "true", "Has checked attribute");
+  is(menuItems[1].getAttribute("type"), "checkbox", "Correct type attr");
+  is(menuItems[1].getAttribute("checked"), "true", "Has checked attr");
 
   is(menuItems[2].getAttribute("label"), MENU_ITEMS[2].label, "Correct label");
-  is(menuItems[2].getAttribute("type"), "radio", "Correct type attribute");
-  ok(!menuItems[2].hasAttribute("checked"), "Doesn't have checked attribute");
+  is(menuItems[2].getAttribute("type"), "radio", "Correct type attr");
+  ok(!menuItems[2].hasAttribute("checked"), "Doesn't have checked attr");
 
   is(menuItems[3].getAttribute("label"), MENU_ITEMS[3].label, "Correct label");
-  is(menuItems[3].getAttribute("disabled"), "true", "disabled attribute menuitem");
+  is(menuItems[3].getAttribute("disabled"), "true", "disabled attr menuitem");
 
   yield once(menu, "open");
   let closed = once(menu, "close");
-  EventUtils.synthesizeMouseAtCenter(menuItems[0], {}, toolbox.doc.defaultView);
+  EventUtils.synthesizeMouseAtCenter(menuItems[0], {}, toolbox.win);
   yield closed;
   ok(clickFired, "Click has fired");
 
-  ok(!toolbox.doc.querySelector("#menu-popup"), "The popup is removed from the DOM");
+  ok(!toolbox.doc.querySelector("#menu-popup"), "Popup removed from the DOM");
 }
 
 function* testSubmenu(toolbox) {
   let clickFired = false;
   let menu = new Menu({
     id: "menu-popup",
   });
   let submenu = new Menu({
@@ -127,21 +128,22 @@ function* testSubmenu(toolbox) {
   }));
   menu.append(new MenuItem({
     label: "Submenu parent",
     submenu: submenu,
   }));
 
   menu.popup(0, 0, toolbox);
   ok(toolbox.doc.querySelector("#menu-popup"), "A popup is in the DOM");
-  is(toolbox.doc.querySelectorAll("#menu-popup > menuitem").length, 0, "No menuitem children");
+  is(toolbox.doc.querySelectorAll("#menu-popup > menuitem").length, 0,
+    "No menuitem children");
 
   let menus = toolbox.doc.querySelectorAll("#menu-popup > menu");
   is(menus.length, 1, "Correct number of menus");
-  is(menus[0].getAttribute("label"), "Submenu parent", "Correct label for menus");
+  is(menus[0].getAttribute("label"), "Submenu parent", "Correct label");
 
   let subMenuItems = menus[0].querySelectorAll("menupopup > menuitem");
   is(subMenuItems.length, 1, "Correct number of submenu items");
   is(subMenuItems[0].getAttribute("label"), "Submenu item", "Correct label");
 
   yield once(menu, "open");
   let closed = once(menu, "close");
 
@@ -155,13 +157,13 @@ function* testSubmenu(toolbox) {
   EventUtils.synthesizeKey("VK_LEFT", {});
   yield hidden;
 
   shown = once(menus[0], "popupshown");
   EventUtils.synthesizeKey("VK_RIGHT", {});
   yield shown;
 
   info("Clicking the submenu item");
-  EventUtils.synthesizeMouseAtCenter(subMenuItems[0], {}, toolbox.doc.defaultView);
+  EventUtils.synthesizeMouseAtCenter(subMenuItems[0], {}, toolbox.win);
 
   yield closed;
   ok(clickFired, "Click has fired");
 }
diff --git a/devtools/client/framework/test/browser_toolbox_custom_host.js b/devtools/client/framework/test/browser_toolbox_custom_host.js
--- a/devtools/client/framework/test/browser_toolbox_custom_host.js
+++ b/devtools/client/framework/test/browser_toolbox_custom_host.js
@@ -33,17 +33,17 @@ function test() {
       ok("Got the `toolbox-close` message");
       window.removeEventListener("message", onMessage);
       cleanup();
     }
   }
 
   function testCustomHost(t) {
     toolbox = t;
-    is(toolbox.doc.defaultView.top, window, "Toolbox is included in browser.xul");
+    is(toolbox.win.top, window, "Toolbox is included in browser.xul");
     is(toolbox.doc, iframe.contentDocument, "Toolbox is in the custom iframe");
     executeSoon(() => gBrowser.removeCurrentTab());
   }
 
   function cleanup() {
     iframe.remove();
 
     // Even if we received "toolbox-close", the toolbox may still be destroying
diff --git a/devtools/client/framework/test/browser_toolbox_minimize.js b/devtools/client/framework/test/browser_toolbox_minimize.js
--- a/devtools/client/framework/test/browser_toolbox_minimize.js
+++ b/devtools/client/framework/test/browser_toolbox_minimize.js
@@ -48,59 +48,59 @@ add_task(function*() {
   let onMaximized = toolbox._host.once("maximized");
   yield toolbox.selectTool("inspector");
   yield onMaximized;
 
   info("Minimize again and click on the tab of the current tool");
   yield minimize(toolbox);
   onMaximized = toolbox._host.once("maximized");
   let tabButton = toolbox.doc.querySelector("#toolbox-tab-inspector");
-  EventUtils.synthesizeMouseAtCenter(tabButton, {}, toolbox.doc.defaultView);
+  EventUtils.synthesizeMouseAtCenter(tabButton, {}, toolbox.win);
   yield onMaximized;
 
   info("Minimize again and click on the settings tab");
   yield minimize(toolbox);
   onMaximized = toolbox._host.once("maximized");
   let settingsButton = toolbox.doc.querySelector("#toolbox-tab-options");
-  EventUtils.synthesizeMouseAtCenter(settingsButton, {}, toolbox.doc.defaultView);
+  EventUtils.synthesizeMouseAtCenter(settingsButton, {}, toolbox.win);
   yield onMaximized;
 
   info("Switch to a different host");
   yield toolbox.switchHost(Toolbox.HostType.SIDE);
   button = toolbox.doc.querySelector("#toolbox-dock-bottom-minimize");
   ok(!button, "The minimize button doesn't exist in the side host");
 
   Services.prefs.clearUserPref("devtools.toolbox.host");
   yield toolbox.destroy();
   gBrowser.removeCurrentTab();
 });
 
 function* minimize(toolbox) {
   let button = toolbox.doc.querySelector("#toolbox-dock-bottom-minimize");
   let onMinimized = toolbox._host.once("minimized");
-  EventUtils.synthesizeMouseAtCenter(button, {}, toolbox.doc.defaultView);
+  EventUtils.synthesizeMouseAtCenter(button, {}, toolbox.win);
   yield onMinimized;
 }
 
 function* minimizeWithShortcut(toolbox) {
   let key = toolbox.doc.getElementById("toolbox-minimize-key")
                        .getAttribute("key");
   let onMinimized = toolbox._host.once("minimized");
   EventUtils.synthesizeKey(key, {accelKey: true, shiftKey: true},
-                           toolbox.doc.defaultView);
+                           toolbox.win);
   yield onMinimized;
 }
 
 function* maximize(toolbox) {
   let button = toolbox.doc.querySelector("#toolbox-dock-bottom-minimize");
   let onMaximized = toolbox._host.once("maximized");
-  EventUtils.synthesizeMouseAtCenter(button, {}, toolbox.doc.defaultView);
+  EventUtils.synthesizeMouseAtCenter(button, {}, toolbox.win);
   yield onMaximized;
 }
 
 function* maximizeWithShortcut(toolbox) {
   let key = toolbox.doc.getElementById("toolbox-minimize-key")
                        .getAttribute("key");
   let onMaximized = toolbox._host.once("maximized");
   EventUtils.synthesizeKey(key, {accelKey: true, shiftKey: true},
-                           toolbox.doc.defaultView);
+                           toolbox.win);
   yield onMaximized;
 }
diff --git a/devtools/client/framework/test/browser_toolbox_tabsswitch_shortcuts.js b/devtools/client/framework/test/browser_toolbox_tabsswitch_shortcuts.js
--- a/devtools/client/framework/test/browser_toolbox_tabsswitch_shortcuts.js
+++ b/devtools/client/framework/test/browser_toolbox_tabsswitch_shortcuts.js
@@ -51,16 +51,16 @@ add_task(function*() {
   gBrowser.removeCurrentTab();
 });
 
 function* testShortcuts(toolbox, index, key, toolIDs) {
   info("Testing shortcut to switch to tool " + index + ":" + toolIDs[index] +
        " using key " + key);
 
   let onToolSelected = toolbox.once("select");
-  EventUtils.synthesizeKey(key, {accelKey: true}, toolbox.doc.defaultView);
+  EventUtils.synthesizeKey(key, {accelKey: true}, toolbox.win);
   let id = yield onToolSelected;
 
   info("toolbox-select event from " + id);
 
   is(toolIDs.indexOf(id), index,
      "Correct tool is selected on pressing the shortcut for " + id);
 }
diff --git a/devtools/client/framework/test/browser_toolbox_window_reload_target.js b/devtools/client/framework/test/browser_toolbox_window_reload_target.js
--- a/devtools/client/framework/test/browser_toolbox_window_reload_target.js
+++ b/devtools/client/framework/test/browser_toolbox_window_reload_target.js
@@ -38,17 +38,17 @@ function startReloadTest(aToolbox) {
     info("Detected reload #"+reloads);
     is(reloads, reloadsSent, "Reloaded from devtools window once and only for "+description+"");
   };
   gBrowser.selectedBrowser.messageManager.addMessageListener("devtools:test:load", reloadCounter);
 
   testAllTheTools("docked", () => {
     let origHostType = toolbox.hostType;
     toolbox.switchHost(Toolbox.HostType.WINDOW).then(() => {
-      toolbox.doc.defaultView.focus();
+      toolbox.win.focus();
       testAllTheTools("undocked", () => {
         toolbox.switchHost(origHostType).then(() => {
           gBrowser.selectedBrowser.messageManager.removeMessageListener("devtools:test:load", reloadCounter);
           // If we finish too early, the inspector breaks promises:
           toolbox.getPanel("inspector").once("new-root", finishUp);
         });
       });
     });
diff --git a/devtools/client/framework/test/browser_toolbox_window_shortcuts.js b/devtools/client/framework/test/browser_toolbox_window_shortcuts.js
--- a/devtools/client/framework/test/browser_toolbox_window_shortcuts.js
+++ b/devtools/client/framework/test/browser_toolbox_window_shortcuts.js
@@ -54,17 +54,17 @@ function testShortcuts(aToolbox, aIndex)
   let modifiers = {
     accelKey: toolModifiers.includes("accel"),
     altKey: toolModifiers.includes("alt"),
     shiftKey: toolModifiers.includes("shift"),
   };
   idIndex = aIndex;
   info("Testing shortcut for tool " + aIndex + ":" + toolIDs[aIndex] +
        " using key " + key);
-  EventUtils.synthesizeKey(key, modifiers, toolbox.doc.defaultView.parent);
+  EventUtils.synthesizeKey(key, modifiers, toolbox.win.parent);
 }
 
 function selectCB(event, id) {
   info("toolbox-select event from " + id);
 
   is(toolIDs.indexOf(id), idIndex,
      "Correct tool is selected on pressing the shortcut for " + id);
 
diff --git a/devtools/client/framework/test/browser_toolbox_zoom.js b/devtools/client/framework/test/browser_toolbox_zoom.js
--- a/devtools/client/framework/test/browser_toolbox_zoom.js
+++ b/devtools/client/framework/test/browser_toolbox_zoom.js
@@ -40,17 +40,17 @@ function testZoomLevel(type, times, expe
 
   is(toolbox.zoomValue.toFixed(2), expected,
      "saved zoom level is correct after zoom " + type);
 }
 
 function sendZoomKey(id, times) {
   let key = toolbox.doc.getElementById(id).getAttribute("key");
   for (let i = 0; i < times; i++) {
-    EventUtils.synthesizeKey(key, modifiers, toolbox.doc.defaultView);
+    EventUtils.synthesizeKey(key, modifiers, toolbox.win);
   }
 }
 
 function getCurrentZoom() {
   var contViewer = toolbox.frame.docShell.contentViewer;
   return contViewer.fullZoom;
 }
 
diff --git a/devtools/client/framework/toolbox.js b/devtools/client/framework/toolbox.js
--- a/devtools/client/framework/toolbox.js
+++ b/devtools/client/framework/toolbox.js
@@ -272,16 +272,23 @@ Toolbox.prototype = {
   /**
    * Get the iframe containing the toolbox UI.
    */
   get frame() {
     return this._host.frame;
   },
 
   /**
+   * Shortcut to the window containing the toolbox UI
+   */
+  get win() {
+    return this.doc.defaultView;
+  },
+
+  /**
    * Shortcut to the document containing the toolbox UI
    */
   get doc() {
     return this.frame.contentDocument;
   },
 
   /**
    * Get current zoom level of toolbox
@@ -720,17 +727,17 @@ Toolbox.prototype = {
   /**
    * Adds the keys and commands to the Toolbox Window in window mode.
    */
   _addKeysToWindow: function() {
     if (this.hostType != Toolbox.HostType.WINDOW) {
       return;
     }
 
-    let doc = this.doc.defaultView.parent.document;
+    let doc = this.win.parent.document;
 
     for (let [id, toolDefinition] of gDevTools.getToolDefinitionMap()) {
       // Prevent multiple entries for the same tool.
       if (!toolDefinition.key || doc.getElementById("key_" + id)) {
         continue;
       }
 
       let toolId = id;
@@ -931,17 +938,17 @@ Toolbox.prototype = {
         // focus to current aria-activedescendant.
         event.preventDefault();
         control.focus();
       }
     }, true)
 
     toolbar.addEventListener("keypress", event => {
       let { key, target } = event;
-      let win = this.doc.defaultView;
+      let win = this.win;
       let elm, type;
       if (key === "Tab") {
         // Tabbing when toolbar or its contents are focused should move focus to
         // next/previous focusable element relative to toolbar itself.
         if (event.shiftKey) {
           elm = toolbar;
           type = Services.focus.MOVEFOCUS_BACKWARD;
         } else {
@@ -1895,17 +1902,17 @@ Toolbox.prototype = {
       radio.parentNode.removeChild(radio);
     }
 
     if (panel) {
       panel.parentNode.removeChild(panel);
     }
 
     if (this.hostType == Toolbox.HostType.WINDOW) {
-      let doc = this.doc.defaultView.parent.document;
+      let doc = this.win.parent.document;
       let key = doc.getElementById("key_" + toolId);
       if (key) {
         key.parentNode.removeChild(key);
       }
     }
     // Emit the event so tools can listen to it from the toolbox level
     // instead of gDevTools
     this.emit("tool-unregistered", toolId);
@@ -2167,17 +2174,17 @@ Toolbox.prototype = {
     let window = this.frame.contentWindow;
     showDoorhanger({ window, type: "deveditionpromo" });
   },
 
   /**
    * Enable / disable necessary textbox menu items using globalOverlay.js.
    */
   _updateTextboxMenuItems: function() {
-    let window = this.doc.defaultView;
+    let window = this.win;
     ["cmd_undo", "cmd_delete", "cmd_cut",
      "cmd_copy", "cmd_paste", "cmd_selectAll"].forEach(window.goUpdateCommand);
   },
 
   /**
    * Connects to the SPS profiler when the developer tools are open. This is
    * necessary because of the WebConsole's `profile` and `profileEnd` methods.
    */
diff --git a/devtools/client/inspector/inspector-panel.js b/devtools/client/inspector/inspector-panel.js
--- a/devtools/client/inspector/inspector-panel.js
+++ b/devtools/client/inspector/inspector-panel.js
@@ -983,17 +983,17 @@ InspectorPanel.prototype = {
 
   _onMarkupFrameLoad: function() {
     this._markupFrame.removeEventListener("load", this._onMarkupFrameLoad, true);
 
     this._markupFrame.contentWindow.focus();
 
     this._markupBox.removeAttribute("collapsed");
 
-    let controllerWindow = this._toolbox.doc.defaultView;
+    let controllerWindow = this._toolbox.win;
     this.markup = new MarkupView(this, this._markupFrame, controllerWindow);
 
     this.emit("markuploaded");
   },
 
   _destroyMarkup: function() {
     let destroyPromise;
 
diff --git a/devtools/client/inspector/test/head.js b/devtools/client/inspector/test/head.js
--- a/devtools/client/inspector/test/head.js
+++ b/devtools/client/inspector/test/head.js
@@ -431,17 +431,17 @@ var clickContainer = Task.async(function
 function mouseLeaveMarkupView(inspector) {
   info("Leaving the markup-view area");
   let def = promise.defer();
 
   // Find another element to mouseover over in order to leave the markup-view
   let btn = inspector.toolbox.doc.querySelector("#toolbox-controls");
 
   EventUtils.synthesizeMouseAtCenter(btn, {type: "mousemove"},
-    inspector.toolbox.doc.defaultView);
+    inspector.toolbox.win);
   executeSoon(def.resolve);
 
   return def.promise;
 }
 
 /**
  * Dispatch the copy event on the given element
  */
diff --git a/devtools/client/webconsole/test/browser_webconsole_output_dom_elements_02.js b/devtools/client/webconsole/test/browser_webconsole_output_dom_elements_02.js
--- a/devtools/client/webconsole/test/browser_webconsole_output_dom_elements_02.js
+++ b/devtools/client/webconsole/test/browser_webconsole_output_dom_elements_02.js
@@ -102,17 +102,17 @@ function test() {
         is(attrs[i].value, data.attrs[i].value,
            "The correct node was highlighted");
       }
 
       info("Unhighlight the node by moving away from the markup view");
       let onNodeUnhighlight = toolbox.once("node-unhighlight");
       let btn = inspector.toolbox.doc.querySelector(".toolbox-dock-button");
       EventUtils.synthesizeMouseAtCenter(btn, {type: "mousemove"},
-        inspector.toolbox.doc.defaultView);
+        inspector.toolbox.win);
       yield onNodeUnhighlight;
 
       info("Switching back to the console");
       yield toolbox.selectTool("webconsole");
     }
   }).then(finishTest);
 }
 
diff --git a/devtools/client/webconsole/test/browser_webconsole_split.js b/devtools/client/webconsole/test/browser_webconsole_split.js
--- a/devtools/client/webconsole/test/browser_webconsole_split.js
+++ b/devtools/client/webconsole/test/browser_webconsole_split.js
@@ -55,17 +55,17 @@ function test() {
       yield openAndCheckPanel("netmonitor");
 
       yield checkWebconsolePanelOpened();
       testBottomHost();
     });
   }
 
   function getCurrentUIState() {
-    let win = toolbox.doc.defaultView;
+    let win = toolbox.win;
     let deck = toolbox.doc.querySelector("#toolbox-deck");
     let webconsolePanel = toolbox.webconsolePanel;
     let splitter = toolbox.doc.querySelector("#toolbox-console-splitter");
 
     let containerHeight = parseFloat(win.getComputedStyle(deck.parentNode)
       .getPropertyValue("height"));
     let deckHeight = parseFloat(win.getComputedStyle(deck)
       .getPropertyValue("height"));
