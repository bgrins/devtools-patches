# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  a06a346385ee0e694097d41572cb09edf6907bf7

diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -3512,16 +3512,17 @@ var PrintPreviewListener = {
       this._chromeState.syncNotificationsOpen = !syncNotifications.notificationsHidden;
       syncNotifications.notificationsHidden = true;
     }
   },
   _showChrome() {
     if (this._chromeState.notificationsOpen)
       gBrowser.getNotificationBox().notificationsHidden = false;
 
+    console.log("_showChrome", this._chromeState.findOpen)
     if (this._chromeState.findOpen)
       gLazyFindCommand("open");
 
     if (this._chromeState.globalNotificationsOpen)
       document.getElementById("global-notificationbox").notificationsHidden = false;
 
     if (this._chromeState.syncNotificationsOpen)
       document.getElementById("sync-notifications").notificationsHidden = false;
diff --git a/browser/base/content/tabbrowser.js b/browser/base/content/tabbrowser.js
--- a/browser/base/content/tabbrowser.js
+++ b/browser/base/content/tabbrowser.js
@@ -511,36 +511,36 @@ window._gBrowser = {
     return aTab._pendingFindBar;
   },
 
   /**
    * Create a findbar instance.
    * @param aTab the tab to create the find bar for.
    * @return the created findbar, or null if the window or tab is closed/closing.
    */
-  async _createFindBar(aTab) {
+  _createFindBar(aTab) {
+    console.log("calling _createFindBar", document.querySelectorAll("findbar"));
     let findBar = document.createXULElement("findbar");
     let browser = this.getBrowserForTab(aTab);
     let browserContainer = this.getBrowserContainer(browser);
     browserContainer.appendChild(findBar);
 
-    await new Promise(r => requestAnimationFrame(r));
     delete aTab._pendingFindBar;
     if (window.closed || aTab.closing) {
       return null;
     }
 
     findBar.browser = browser;
     findBar._findField.value = this._lastFindValue;
 
     aTab._findBar = findBar;
 
-    let event = document.createEvent("Events");
-    event.initEvent("TabFindInitialized", true, false);
-    aTab.dispatchEvent(event);
+    // let event = document.createEvent("Events");
+    // event.initEvent("TabFindInitialized", true, false);
+    // aTab.dispatchEvent(event);
 
     return findBar;
   },
 
   _appendStatusPanel() {
     let browser = this.selectedBrowser;
     let browserContainer = this.getBrowserContainer(browser);
     browserContainer.insertBefore(StatusPanel.panel, browser.parentNode.nextElementSibling);
@@ -3246,16 +3246,17 @@ window._gBrowser = {
     // Handle findbar data (if any)
     let otherFindBar = aOtherTab._findBar;
     if (otherFindBar &&
         otherFindBar.findMode == otherFindBar.FIND_NORMAL) {
       let oldValue = otherFindBar._findField.value;
       let wasHidden = otherFindBar.hidden;
       let ourFindBarPromise = this.getFindBar(aOurTab);
       ourFindBarPromise.then(ourFindBar => {
+        console.log("OUT FINDBAR PROMISE", wasHidden, ourFindBar);
         if (!ourFindBar) {
           return;
         }
         ourFindBar._findField.value = oldValue;
         if (!wasHidden)
           ourFindBar.onFindCommand();
       });
     }
@@ -5021,17 +5022,17 @@ class TabProgressListener {
 
       // If the browser was previously muted, we should restore the muted state.
       if (this.mTab.hasAttribute("muted")) {
         this.mTab.linkedBrowser.mute();
       }
 
       if (gBrowser.isFindBarInitialized(this.mTab)) {
         let findBar = gBrowser.getCachedFindBar(this.mTab);
-
+        console.log("Closing due to location");
         // Close the Find toolbar if we're in old-style TAF mode
         if (findBar.findMode != findBar.FIND_NORMAL) {
           findBar.close();
         }
       }
 
       gBrowser.setTabTitle(this.mTab);
 
diff --git a/toolkit/content/widgets/findbar.js b/toolkit/content/widgets/findbar.js
--- a/toolkit/content/widgets/findbar.js
+++ b/toolkit/content/widgets/findbar.js
@@ -7,18 +7,26 @@
 
 // This is loaded into chrome windows with the subscript loader. Wrap in
 // a block to prevent accidentally leaking globals onto `window`.
 {
 
 ChromeUtils.import("resource://gre/modules/Services.jsm");
 
 class MozFindbar extends XULElement {
+  static get observedAttributes() { return ["hidden"]; }
+
+  attributeChangedCallback(name, oldValue, newValue) {
+    console.log("Here", name, oldValue, newValue);
+    console.trace();
+  }
   constructor() {
     super();
+
+    console.log("Findbar constructed", this);
     MozXULElement.insertFTLIfNeeded("toolkit/main-window/findbar.ftl");
     this.destroy = this.destroy.bind(this);
 
     // We have to guard against `this.close` being |null| due to an unknown
     // issue, which is tracked in bug 957999.
     this.addEventListener("keypress", (event) => {
       if (event.keyCode == event.DOM_VK_ESCAPE) {
         if (this.close)
@@ -43,19 +51,22 @@ class MozFindbar extends XULElement {
         <image anonid="find-status-icon" class="findbar-find-fast find-status-icon" />
         <description anonid="find-status" control="findbar-textbox" class="findbar-find-fast findbar-find-status" />
       </hbox>
       <toolbarbutton anonid="find-closebutton" class="findbar-closebutton close-icon" data-l10n-id="findbar-find-button-close" oncommand="close();" />
     `);
   }
 
   connectedCallback() {
+    this.setAttribute("noanim", "true");
+    this.setAttribute("hidden", "true");
+    console.log("Findbar connected", this);
+    console.trace();
     this.appendChild(document.importNode(this.content, true));
 
-    this.hidden = true;
 
     /**
      * Please keep in sync with toolkit/modules/FindBarChild.jsm
      */
     this.FIND_NORMAL = 0;
 
     this.FIND_TYPEAHEAD = 1;
 
@@ -333,16 +344,17 @@ class MozFindbar extends XULElement {
         this._browser.messageManager.removeMessageListener("Findbar:Mouseup", this);
       }
       let finder = this._browser.finder;
       if (finder)
         finder.removeResultListener(this);
     }
 
     this._browser = val;
+    console.log("Setting browser", val);
     if (this._browser) {
       // Need to do this to ensure the correct initial state.
       this._updateBrowserWithState();
       this._browser.messageManager.addMessageListener("Findbar:Keypress", this);
       this._browser.messageManager.addMessageListener("Findbar:Mouseup", this);
       this._browser.finder.addResultListener(this);
 
       this._findField.value = this._browser._lastSearchString;
@@ -607,16 +619,18 @@ class MozFindbar extends XULElement {
    * -
    * - @param aMode
    * -        the find mode to be used, which is either FIND_NORMAL,
    * -        FIND_TYPEAHEAD or FIND_LINKS. If not passed, the last
    * -        find mode if any or FIND_NORMAL.
    * - @returns true if the find bar wasn't previously open, false otherwise.
    */
   open(aMode) {
+    console.log("Calling open");
+    console.trace();
     if (aMode != undefined)
       this._findMode = aMode;
 
     if (!this._notFoundStr) {
       var stringsBundle = this.strBundle;
       this._notFoundStr = stringsBundle.GetStringFromName("NotFound");
       this._wrappedToTopStr =
         stringsBundle.GetStringFromName("WrappedToTop");
@@ -653,16 +667,17 @@ class MozFindbar extends XULElement {
     }
     return false;
   }
 
   /**
    * - Closes the findbar.
    */
   close(aNoAnim) {
+    console.log("Calling close", aNoAnim);
     if (this.hidden)
       return;
 
     if (aNoAnim)
       this.setAttribute("noanim", true);
     this.hidden = true;
 
     // 'focusContent()' iterates over all listeners in the chrome
@@ -798,16 +813,18 @@ class MozFindbar extends XULElement {
         this._onBrowserKeypress(aMessage.data);
         break;
     }
     return undefined;
   }
 
   _updateBrowserWithState() {
     if (this._browser && this._browser.messageManager) {
+      console.log("_updateBrowserWithState", this.hidden);
+      console.trace();
       this._browser.messageManager.sendAsyncMessage("Findbar:UpdateState", {
         findMode: this._findMode,
         isOpenAndFocused: !this.hidden && document.activeElement == this._findField.inputField,
         hasQuickFindTimeout: !!this._quickFindTimeout,
       });
     }
   }
 
@@ -1021,16 +1038,18 @@ class MozFindbar extends XULElement {
 
   /**
    * - Convenient alias to startFind(gFindBar.FIND_NORMAL);
    * -
    * - You should generally map the window's find command to this method.
    * -   e.g. <command name="cmd_find" oncommand="gFindBar.onFindCommand();"/>
    */
   onFindCommand() {
+    console.log("onFindCommand");
+    console.trace();
     return this.startFind(this.FIND_NORMAL);
   }
 
   /**
    * - Stub for find-next and find-previous commands
    * - @param aFindPrevious
    * -        true for find-previous, false otherwise.
    */
