# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  2a3eb80dc9653ee0edc9f4a8b657b80f817b000e
Bug 1257613 - Add an API to open context menus from an HTML document;

MozReview-Commit-ID: 4j9d5k3Ut1f

diff --git a/devtools/client/framework/menu-item.js b/devtools/client/framework/menu-item.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/framework/menu-item.js
@@ -0,0 +1,25 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+function MenuItem({
+    label = "",
+    id = null,
+    submenu = null,
+    checked = false,
+    type = "normal",
+    disabled = false,
+    click = () => {}
+}) {
+  this.checked = checked;
+  this.click = click;
+  this.disabled = disabled;
+  this.id = id;
+  this.label = label;
+  this.submenu = submenu;
+  this.type = type;
+}
+
+module.exports = MenuItem;
diff --git a/devtools/client/framework/menu.js b/devtools/client/framework/menu.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/framework/menu.js
@@ -0,0 +1,94 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+const MenuItem = require("./menu-item");
+
+/// XXX: Disabled
+
+function Menu() {
+  this.menuitems = [];
+}
+
+Menu.prototype.append = function(menuitem) {
+  // XXX: support appending a plain object?
+  if (!(menuitem instanceof MenuItem)) {
+    menuitem = new MenuItem(menuitem);
+  }
+
+  this.menuitems.push(menuitem);
+};
+
+Menu.prototype._createMenuItems = function(parent) {
+  let doc = parent.ownerDocument;
+  this.menuitems.forEach(item => {
+    if (item.submenu) {
+      let menupopup = doc.createElement("menupopup");
+      item.submenu._createMenuItems(menupopup);
+
+      let menu = doc.createElement("menu");
+      menu.appendChild(menupopup);
+      menu.setAttribute("label", item.label);
+      parent.appendChild(menu);
+    } else if (item.type === "separator") {
+      let menusep = doc.createElement("menuseparator");
+      parent.appendChild(menusep);
+    } else {
+      let menuitem = doc.createElement("menuitem");
+      menuitem.setAttribute("label", item.label);
+      menuitem.addEventListener("command", () => {
+        item.click();
+      });
+
+      if (item.type == "checkbox") {
+        menuitem.setAttribute("type", "checkbox");
+      }
+      if (item.disabled) {
+        console.log("Found disabled");
+        menuitem.setAttribute("disabled", "true");
+      }
+      if (item.accesskey) {
+        menuitem.setAttribute("accesskey", item.accesskey);
+      }
+      if (item.selection) {
+        menuitem.setAttribute("selection", item.selection);
+      }
+      if (item.selectionType) {
+        menuitem.setAttribute("selectionType", item.selectionType);
+      }
+
+      parent.appendChild(menuitem);
+    }
+  });
+};
+
+Menu.prototype.popup = function(win, x, y) {
+  let doc = win.document;
+
+  // Clean up any old menus created with this API, since only one can be
+  // opened at once.
+  [...doc.querySelectorAll("menupopup[created-by-menu-api]")].forEach(node => {
+    node.remove();
+  });
+
+  let popup = doc.createElement("menupopup");
+  popup.setAttribute("created-by-menu-api", "true");
+  doc.querySelector("popupset").appendChild(popup);
+
+  this._createMenuItems(popup);
+
+  // XXX: do we need this?
+  popup.addEventListener("popupshowing", (e) => {
+  }, true);
+  popup.addEventListener("popuphidden", (e) => {
+  }, true);
+
+  popup.openPopupAtScreen(x, y, true);
+  popup.focus();
+
+  return popup;
+};
+
+module.exports = Menu;
\ No newline at end of file
diff --git a/devtools/client/framework/moz.build b/devtools/client/framework/moz.build
--- a/devtools/client/framework/moz.build
+++ b/devtools/client/framework/moz.build
@@ -11,16 +11,18 @@ TEST_HARNESS_FILES.xpcshell.devtools.cli
 
 DevToolsModules(
     'about-devtools-toolbox.js',
     'attach-thread.js',
     'browser-menus.js',
     'devtools-browser.js',
     'devtools.js',
     'gDevTools.jsm',
+    'menu-item.js',
+    'menu.js',
     'selection.js',
     'sidebar.js',
     'source-location.js',
     'target-from-url.js',
     'target.js',
     'toolbox-highlighter-utils.js',
     'toolbox-hosts.js',
     'toolbox-options.js',
diff --git a/devtools/client/framework/test/browser.ini b/devtools/client/framework/test/browser.ini
--- a/devtools/client/framework/test/browser.ini
+++ b/devtools/client/framework/test/browser.ini
@@ -24,16 +24,17 @@ support-files =
 [browser_browser_toolbox_debugger.js]
 [browser_devtools_api.js]
 [browser_devtools_api_destroy.js]
 [browser_dynamic_tool_enabling.js]
 [browser_ignore_toolbox_network_requests.js]
 [browser_keybindings_01.js]
 [browser_keybindings_02.js]
 [browser_keybindings_03.js]
+[browser_menu_api.js]
 [browser_new_activation_workflow.js]
 [browser_source-location-01.js]
 [browser_source-location-02.js]
 [browser_target_from_url.js]
 [browser_target_events.js]
 [browser_target_remote.js]
 [browser_target_support.js]
 [browser_toolbox_custom_host.js]
diff --git a/devtools/client/framework/test/browser_menu_api.js b/devtools/client/framework/test/browser_menu_api.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/framework/test/browser_menu_api.js
@@ -0,0 +1,37 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Test that the Menu API works
+
+const URL = "data:text/html;charset=utf8,test page for menu api";
+const Menu = require("devtools/client/framework/menu");
+const MenuItem = require("devtools/client/framework/menu");
+
+add_task(function*() {
+  info("Create a test tab and open the toolbox");
+  let tab = yield addTab(URL);
+  let target = TargetFactory.forTab(tab);
+  let toolbox = yield gDevTools.showToolbox(target, "webconsole");
+
+
+  let menu = new Menu();
+  menu.append(new MenuItem({
+    id: "menu-item-1",
+    label: "Hi",
+    // accesskey: "h",
+    click: () => { }}));
+
+  let popup = menu.popup(toolbox.doc.defaultView, 0, 0);
+
+  yield once(popup, "popupshown");
+
+  ok(false, "foo");
+  yield new Promise(r=>r);
+
+  yield toolbox.destroy();
+  gBrowser.removeCurrentTab();
+});
