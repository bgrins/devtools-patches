# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  e14db462d31d566570e3bece66d5380f7b1ad400
Bug 1257613 - Add an API to open context menus from an HTML document;

MozReview-Commit-ID: 4j9d5k3Ut1f

diff --git a/browser/base/content/browser.xul b/browser/base/content/browser.xul
--- a/browser/base/content/browser.xul
+++ b/browser/base/content/browser.xul
@@ -1147,18 +1147,21 @@
     </svg:clipPath>
 #ifdef XP_WIN
     <svg:clipPath id="urlbar-back-button-clip-path-win10">
       <svg:path d="M -6,-2 l 0,1 a 15 15 0 0,1 0,30 l 0,1 l 10000,0 l 0,-32 l -10000,0 z" />
     </svg:clipPath>
 #endif
   </svg:svg>
 
+
 </vbox>
 # <iframe id="tab-view"> is dynamically appended as the 2nd child of #tab-view-deck.
 #     Introducing the iframe dynamically, as needed, was found to be better than
 #     starting with an empty iframe here in browser.xul from a Ts standpoint.
 </deck>
 
+
+
 # Put it at the very end to make sure it is not covered by anything.
 <hbox id="fullscr-toggler" hidden="true"/>
 
 </window>
diff --git a/devtools/client/framework/menu-item.js b/devtools/client/framework/menu-item.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/framework/menu-item.js
@@ -0,0 +1,10 @@
+
+function MenuItem({label = "hi", submenu = null, checked = false, type = 'normal', click = () => {}}) {
+  this.label = label;
+  this.submenu = submenu;
+  this.checked = checked;
+  this.label = label;
+  this.click = click;
+}
+
+module.exports = MenuItem;
\ No newline at end of file
diff --git a/devtools/client/framework/menu.js b/devtools/client/framework/menu.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/framework/menu.js
@@ -0,0 +1,83 @@
+
+const MenuItem = require("./menu-item");
+
+/// XXX: Separators
+/// XXX: Disabled
+
+function Menu() {
+  this.menuitems = [];
+}
+
+Menu.prototype.append = function(menuitem) {
+  // XXX: support appending a plain object?
+  if (!(menuitem instanceof MenuItem)) {
+    menuitem = new MenuItem(menuitem);
+  }
+
+  this.menuitems.push(menuitem);
+};
+
+Menu.prototype._createMenuItems = function(parent) {
+  let doc = parent.ownerDocument;
+  for (let item of this.menuitems) {
+    if (item.submenu) {
+      let menupopup = doc.createElement("menupopup");
+      item.submenu._createMenuItems(menupopup);
+
+      let menu = doc.createElement("menu");
+      menu.appendChild(menupopup);
+      menu.setAttribute("label", item.label);
+      parent.appendChild(menu);
+    } else {
+      let menuitem = doc.createElement("menuitem");
+      menuitem.setAttribute("label", item.label);
+      menuitem.addEventListener("command", () => {
+        item.click();
+      });
+
+      if (item.type == "checkbox") {
+        menuitem.setAttribute("type", "checkbox");
+      }
+      if (item.accesskey) {
+        menuitem.setAttribute("accesskey", item.accesskey);
+      }
+      if (item.selection) {
+        menuitem.setAttribute("selection", item.selection);
+      }
+      if (item.selectionType) {
+        menuitem.setAttribute("selectionType", item.selectionType);
+      }
+
+      parent.appendChild(menuitem);
+    }
+  }
+};
+
+Menu.prototype.popup = function(win, x, y) {
+  console.log("Creating a context menu");
+  let doc = win.document;
+  console.log("Opening a context menu");
+  let popup = doc.createElement("menupopup");
+  doc.querySelector("popupset").appendChild(popup);
+
+  this._createMenuItems(popup);
+
+  popup.addEventListener("popupshowing", () => {
+
+  }, true);
+  popup.addEventListener("popuphidden", () => {
+    popup.remove();
+  }, true);
+
+  popup.openPopupAtScreen(x, y, true);
+  popup.focus();
+
+  return popup;
+};
+
+
+function createMenuItems(parent, items) {
+
+}
+
+module.exports = Menu;
\ No newline at end of file
diff --git a/devtools/client/framework/moz.build b/devtools/client/framework/moz.build
--- a/devtools/client/framework/moz.build
+++ b/devtools/client/framework/moz.build
@@ -10,16 +10,18 @@ TEST_HARNESS_FILES.xpcshell.devtools.cli
 ]
 
 DevToolsModules(
     'about-devtools-toolbox.js',
     'attach-thread.js',
     'devtools-browser.js',
     'devtools.js',
     'gDevTools.jsm',
+    'menu-item.js',
+    'menu.js',
     'selection.js',
     'sidebar.js',
     'source-location.js',
     'target-from-url.js',
     'target.js',
     'toolbox-highlighter-utils.js',
     'toolbox-hosts.js',
     'toolbox-options.js',
diff --git a/devtools/client/framework/toolbox.js b/devtools/client/framework/toolbox.js
--- a/devtools/client/framework/toolbox.js
+++ b/devtools/client/framework/toolbox.js
@@ -21,16 +21,17 @@ var promise = require("promise");
 var Services = require("Services");
 var {gDevTools} = require("devtools/client/framework/devtools");
 var EventEmitter = require("devtools/shared/event-emitter");
 var Telemetry = require("devtools/client/shared/telemetry");
 var HUDService = require("devtools/client/webconsole/hudservice");
 var viewSource = require("devtools/client/shared/view-source");
 var { attachThread, detachThread } = require("./attach-thread");
 
+
 Cu.import("resource://devtools/client/scratchpad/scratchpad-manager.jsm");
 Cu.import("resource://devtools/client/shared/DOMHelpers.jsm");
 Cu.import("resource://gre/modules/Task.jsm");
 
 loader.lazyGetter(this, "toolboxStrings", () => {
   const properties = "chrome://devtools/locale/toolbox.properties";
   const bundle = Services.strings.createBundle(properties);
   return (name, ...args) => {
@@ -190,16 +191,60 @@ Toolbox.prototype = {
     LAST_TOOL: "devtools.toolbox.selectedTool",
     SIDE_ENABLED: "devtools.toolbox.sideEnabled",
     PREVIOUS_HOST: "devtools.toolbox.previousHost"
   },
 
   currentToolId: null,
   lastUsedToolId: null,
 
+  /* Create a context menu and open it */
+  openContextMenuAtPoint: function(e, items = {}) {
+    console.log("Creating a context menu");
+
+    console.log("Opening a context menu");
+    let popup = this.doc.createElement("menupopup");
+    this.doc.querySelector("popupset").appendChild(popup);
+
+    for (let id in items) {
+      let menuitem = this.doc.createElement("menuitem");
+      menuitem.id = id;
+      let item = items[id];
+      menuitem.setAttribute("label", item.label);
+      menuitem.addEventListener("command", () => {
+        item.onClick();
+      });
+
+      if (item.accesskey) {
+        menuitem.setAttribute("accesskey", item.accesskey);
+      }
+      if (item.selection) {
+        menuitem.setAttribute("selection", item.selection);
+      }
+      if (item.selectionType) {
+        menuitem.setAttribute("selectionType", item.selectionType);
+      }
+
+      popup.appendChild(menuitem);
+    }
+
+    popup.addEventListener("popupshowing", () => {
+    }, true);
+    popup.addEventListener("popuphidden", () => {
+      popup.remove();
+    }, true);
+
+    popup.openPopupAtScreen(e.screenX, e.screenY, true);
+    popup.focus();
+    e.preventDefault();
+    e.stopPropagation();
+
+    return popup;
+  },
+
   /**
    * Returns a *copy* of the _toolPanels collection.
    *
    * @return {Map} panels
    *         All the running panels in the toolbox
    */
   getToolPanels: function() {
     return new Map(this._toolPanels);
diff --git a/devtools/client/inspector/inspector-panel.js b/devtools/client/inspector/inspector-panel.js
--- a/devtools/client/inspector/inspector-panel.js
+++ b/devtools/client/inspector/inspector-panel.js
@@ -9,16 +9,19 @@
 const {Cc, Ci, Cu} = require("chrome");
 
 var Services = require("Services");
 var promise = require("promise");
 var EventEmitter = require("devtools/shared/event-emitter");
 var clipboard = require("sdk/clipboard");
 var {HostType} = require("devtools/client/framework/toolbox").Toolbox;
 
+const Menu = require("devtools/client/framework/menu");
+const MenuItem = require("devtools/client/framework/menu-item");
+
 loader.lazyRequireGetter(this, "CSS", "CSS");
 
 loader.lazyGetter(this, "MarkupView", () => require("devtools/client/inspector/markup/markup").MarkupView);
 loader.lazyGetter(this, "HTMLBreadcrumbs", () => require("devtools/client/inspector/breadcrumbs").HTMLBreadcrumbs);
 loader.lazyGetter(this, "ToolSidebar", () => require("devtools/client/framework/sidebar").ToolSidebar);
 loader.lazyGetter(this, "InspectorSearch", () => require("devtools/client/inspector/inspector-search").InspectorSearch);
 loader.lazyGetter(this, "RuleViewTool", () => require("devtools/client/inspector/rules/rules").RuleViewTool);
 loader.lazyGetter(this, "ComputedViewTool", () => require("devtools/client/inspector/computed/computed").ComputedViewTool);
@@ -657,16 +660,117 @@ InspectorPanel.prototype = {
       let content = clipboard.get();
       if (content && content.trim().length > 0) {
         return content;
       }
     }
     return null;
   },
 
+  /*
+
+
+    var menu = new Menu();
+      menu.append(new MenuItem({ id: "node-menu-edithtml",
+        label: "&inspectorHTMLEdit.label;",
+        accesskey: "&inspectorHTMLEdit.accesskey;",
+        click: () => { inspector.editHTML() }));
+      menu.append(new MenuItem({ id: "node-menu-copyinner",
+        label: "&inspectorHTMLCopyInner.label;",
+        accesskey: "&inspectorHTMLCopyInner.accesskey;",
+        click: () => { inspector.copyInnerHTML() }));
+      menu.append(new MenuItem({ id: "node-menu-copyouter",
+        label: "&inspectorHTMLCopyOuter.label;",
+        accesskey: "&inspectorHTMLCopyOuter.accesskey;",
+        click: () => { inspector.copyOuterHTML() }));
+      menu.append(new MenuItem({ id: "node-menu-copyuniqueselector",
+        label: "&inspectorCopyUniqueSelector.label;",
+        accesskey: "&inspectorCopyUniqueSelector.accesskey;",
+        click: () => { inspector.copyUniqueSelector() }));
+      menu.append(new MenuItem({ id: "node-menu-copyimagedatauri",
+        label: "&inspectorCopyImageDataUri.label;",
+        click: () => { inspector.copyImageDataUri() }));
+      menu.append(new MenuItem({ id: "node-menu-showdomproperties",
+        label: "&inspectorShowDOMProperties.label;",
+        click: () => { inspector.showDOMProperties() }));
+      menu.append(new MenuItem({ id: "node-menu-useinconsole",
+        label: "&inspectorUseInConsole.label;",
+        click: () => { inspector.useInConsole() }));
+      menu.append(new MenuItem({ id: "node-menu-expand",
+        label: "&inspectorExpandNode.label;",
+        click: () => { inspector.expandNode() }));
+      menu.append(new MenuItem({ id: "node-menu-collapse",
+        label: "&inspectorCollapseNode.label;",
+        click: () => { inspector.collapseNode() }));
+      <menuseparator/>,
+      menu.append(new MenuItem({ id: "node-menu-pasteinnerhtml",
+        label: "&inspectorHTMLPasteInner.label;",
+        accesskey: "&inspectorHTMLPasteInner.accesskey;",
+        click: () => { inspector.pasteInnerHTML() }));
+      menu.append(new MenuItem({ id: "node-menu-pasteouterhtml",
+        label: "&inspectorHTMLPasteOuter.label;",
+        accesskey: "&inspectorHTMLPasteOuter.accesskey;",
+        click: () => { inspector.pasteOuterHTML() }));
+          menu.append(new MenuItem({ id: "node-menu-pastebefore",
+            label: "&inspectorHTMLPasteBefore.label;",
+            accesskey: "&inspectorHTMLPasteBefore.accesskey;",
+            click: () => { inspector.pasteAdjacentHTML('beforeBegin') }));
+          menu.append(new MenuItem({ id: "node-menu-pasteafter",
+            label: "&inspectorHTMLPasteAfter.label;",
+            accesskey: "&inspectorHTMLPasteAfter.accesskey;",
+            click: () => { inspector.pasteAdjacentHTML('afterEnd') }));
+          menu.append(new MenuItem({ id: "node-menu-pastefirstchild",
+            label: "&inspectorHTMLPasteFirstChild.label;",
+            accesskey: "&inspectorHTMLPasteFirstChild.accesskey;",
+            click: () => { inspector.pasteAdjacentHTML('afterBegin') }));
+          menu.append(new MenuItem({ id: "node-menu-pastelastchild",
+            label: "&inspectorHTMLPasteLastChild.label;",
+            accesskey: "&inspectorHTMLPasteLastChild.accesskey;",
+            click: () => { inspector.pasteAdjacentHTML('beforeEnd') }));
+      menu.append(new MenuItem({ id: "node-menu-scrollnodeintoview",
+        label: "&inspectorScrollNodeIntoView.label;",
+        accesskey: "&inspectorScrollNodeIntoView.accesskey;",
+        click: () => { inspector.scrollNodeIntoView() }));
+      menu.append(new MenuItem({ id: "node-menu-screenshotnode",
+        label: "&inspectorScreenshotNode.label;",
+        click: () => { inspector.screenshotNode()" />,
+      menu.append(new MenuItem({ id: "node-menu-duplicatenode",
+        label: "&inspectorDuplicateNode.label;",
+        click: () => { inspector.duplicateNode() }));
+      menu.append(new MenuItem({ id: "node-menu-delete",
+        label: "&inspectorHTMLDelete.label;",
+        accesskey: "&inspectorHTMLDelete.accesskey;",
+        click: () => { inspector.deleteNode() }));
+          menu.append(new MenuItem({ id: "node-menu-add-attribute",
+            label: "&inspectorAddAttribute.label;",
+            accesskey: "&inspectorAddAttribute.accesskey;",
+            click: () => { inspector.onAddAttribute() }));
+          menu.append(new MenuItem({ id: "node-menu-edit-attribute",
+            label: "&inspectorEditAttribute.label;",
+            accesskey: "&inspectorEditAttribute.accesskey;",
+            click: () => { inspector.onEditAttribute() }));
+          menu.append(new MenuItem({ id: "node-menu-remove-attribute",
+            label: "&inspectorRemoveAttribute.label;",
+            accesskey: "&inspectorRemoveAttribute.accesskey;",
+            click: () => { inspector.onRemoveAttribute() }));
+      menu.append(new MenuItem({ id: "node-menu-link-follow",
+        click: () => { inspector.onFollowLink() }));
+      menu.append(new MenuItem({ id: "node-menu-link-copy",
+        click: () => { inspector.onCopyLink() }));
+      menu.append(new MenuItem({ id: "node-menu-pseudo-hover",
+        label=":hover" type="checkbox",
+        click: () => { inspector.togglePseudoClass(':hover') }));
+      menu.append(new MenuItem({ id: "node-menu-pseudo-active",
+        label=":active" type="checkbox",
+        click: () => { inspector.togglePseudoClass(':active') }));
+      menu.append(new MenuItem({ id: "node-menu-pseudo-focus",
+        label=":focus" type="checkbox",
+        click: () => { inspector.togglePseudoClass(':focus') }));
+
+  */
   /**
    * Update, enable, disable, hide, show any menu item depending on the current
    * element.
    */
   _setupNodeMenu: function(event) {
     let markupContainer = this.markup.getContainer(this.selection.nodeFront);
     this.nodeMenuTriggerInfo =
       markupContainer.editor.getInfoAtNode(event.target.triggerNode);
@@ -922,16 +1026,17 @@ InspectorPanel.prototype = {
 
     this._markupBox = doc.getElementById("markup-box");
 
     // create tool iframe
     this._markupFrame = doc.createElement("iframe");
     this._markupFrame.setAttribute("flex", "1");
     this._markupFrame.setAttribute("tooltip", "aHTMLTooltip");
     this._markupFrame.setAttribute("context", "inspector-node-popup");
+    // XXXXXX Hook up context menu handler
 
     // This is needed to enable tooltips inside the iframe document.
     this._markupFrame.addEventListener("load", this._onMarkupFrameLoad, true);
 
     this._markupBox.setAttribute("collapsed", true);
     this._markupBox.appendChild(this._markupFrame);
     this._markupFrame.setAttribute("src", "chrome://devtools/content/inspector/markup/markup.xhtml");
     this._markupFrame.setAttribute("aria-label", strings.GetStringFromName("inspector.panelLabel.markupView"));
diff --git a/devtools/client/jar.mn b/devtools/client/jar.mn
--- a/devtools/client/jar.mn
+++ b/devtools/client/jar.mn
@@ -16,16 +16,17 @@ devtools.jar:
     content/netmonitor/netmonitor.xul (netmonitor/netmonitor.xul)
     content/netmonitor/netmonitor.css (netmonitor/netmonitor.css)
     content/netmonitor/netmonitor-controller.js (netmonitor/netmonitor-controller.js)
     content/netmonitor/netmonitor-view.js (netmonitor/netmonitor-view.js)
     content/webconsole/webconsole.xul (webconsole/webconsole.xul)
 *   content/scratchpad/scratchpad.xul (scratchpad/scratchpad.xul)
     content/scratchpad/scratchpad.js (scratchpad/scratchpad.js)
     content/shared/splitview.css (shared/splitview.css)
+    content/test-page.html (test-page.html)
     content/shared/theme-switching.js (shared/theme-switching.js)
     content/shared/frame-script-utils.js (shared/frame-script-utils.js)
     content/styleeditor/styleeditor.xul (styleeditor/styleeditor.xul)
     content/styleeditor/styleeditor.css (styleeditor/styleeditor.css)
     content/storage/storage.xul (storage/storage.xul)
     content/inspector/fonts/fonts.js (inspector/fonts/fonts.js)
     content/inspector/layout/layout.js (inspector/layout/layout.js)
     content/inspector/markup/markup.xhtml (inspector/markup/markup.xhtml)
diff --git a/devtools/client/test-page.html b/devtools/client/test-page.html
new file mode 100644
--- /dev/null
+++ b/devtools/client/test-page.html
@@ -0,0 +1,15 @@
+<body>
+
+  <menu type="context" id="mymenu">
+    <menuitem label="Refresh Post" onclick="window.location.reload();" icon="/images/refresh-icon.png"></menuitem>
+    <menuitem label="Skip to Comments" onclick="window.location='#comments';" icon="/images/comment_icon.gif"></menuitem>
+    <menu label="Share on..." icon="/images/share_icon.gif">
+      <menuitem label="Twitter" icon="/images/twitter_icon.gif" onclick="goTo('//twitter.com/intent/tweet?text=' + document.title + ':  ' + window.location.href);"></menuitem>
+      <menuitem label="Facebook" icon="/images/facebook_icon16x16.gif" onclick="goTo('//facebook.com/sharer/sharer.php?u=' + window.location.href);"></menuitem>
+    </menu>
+  </menu>
+
+  <div contextmenu="mymenu">
+  Right click me!
+  </div>
+</body>
\ No newline at end of file
diff --git a/devtools/client/webconsole/webconsole.js b/devtools/client/webconsole/webconsole.js
--- a/devtools/client/webconsole/webconsole.js
+++ b/devtools/client/webconsole/webconsole.js
@@ -11,16 +11,18 @@ const {Cc, Ci, Cu} = require("chrome");
 const {Utils: WebConsoleUtils, CONSOLE_WORKER_IDS} =
   require("devtools/shared/webconsole/utils");
 const { getSourceNames } = require("devtools/client/shared/source-utils");
 const BrowserLoaderModule = {};
 Cu.import("resource://devtools/client/shared/browser-loader.js", BrowserLoaderModule);
 
 const promise = require("promise");
 const Services = require("Services");
+const Menu = require("devtools/client/framework/menu");
+const MenuItem = require("devtools/client/framework/menu-item");
 
 loader.lazyServiceGetter(this, "clipboardHelper",
                          "@mozilla.org/widget/clipboardhelper;1",
                          "nsIClipboardHelper");
 loader.lazyRequireGetter(this, "EventEmitter", "devtools/shared/event-emitter");
 loader.lazyRequireGetter(this, "AutocompletePopup", "devtools/client/shared/autocomplete-popup", true);
 loader.lazyRequireGetter(this, "ToolSidebar", "devtools/client/framework/sidebar", true);
 loader.lazyRequireGetter(this, "ConsoleOutput", "devtools/client/webconsole/console-output", true);
@@ -2742,16 +2744,18 @@ WebConsoleFrame.prototype = {
 
   /**
    * Open the selected item's URL in a new tab.
    */
   openSelectedItemInTab: function() {
     let item = this.output.getSelectedMessages(1)[0] ||
                this._contextMenuHandler.lastClickedMessage;
 
+    console.log("Hi", item, item.url);
+    console.trace();
     if (!item || !item.url) {
       return;
     }
 
     this.owner.openLink(item.url);
   },
 
   /**
@@ -3494,29 +3498,84 @@ WebConsoleConnectionProxy.prototype = {
  * @param object owner
  *        The WebConsoleFrame instance that owns this object.
  */
 function ConsoleContextMenu(owner) {
   this.owner = owner;
   this.popup = this.owner.document.getElementById("output-contextmenu");
   this.build = this.build.bind(this);
   this.popup.addEventListener("popupshowing", this.build);
+
+
+  let toolbox = gDevTools.getToolbox(this.owner.owner.target);
+  console.log("HERE", owner, toolbox)
+  // XXX: Handle browser console case
+  if (toolbox) {
+
+    var submenu = new Menu();
+    submenu.append(new MenuItem({ type: 'checkbox', label: 'box1' }));
+    submenu.append(new MenuItem({ type: 'checkbox', label: 'box2' }));
+    submenu.append(new MenuItem({ type: 'checkbox', label: 'box3' }));
+    submenu.append(new MenuItem({ type: 'checkbox', label: 'box4' }));
+
+    var menu = new Menu();
+    menu.append(new MenuItem({ label: 'MenuItem1', click: function() { console.log('item 1 clicked'); } }));
+    menu.append(new MenuItem({ label: 'MenuItem2', type: 'checkbox', checked: true }));
+    menu.append(new MenuItem({ label: 'Disk', submenu: submenu}));
+
+
+    this.owner.document.getElementById("output-wrapper").addEventListener("contextmenu", (e) => {
+
+      e.preventDefault();
+      menu.popup(toolbox.doc.defaultView, e.screenX, e.screenY);
+      console.log(e, e.defaultPrevented);
+      return;
+      // <menuitem id="menu_openURL" label="&openURL.label;"
+      //           accesskey="&openURL.accesskey;" command="consoleCmd_openURL"
+      //           selection="network" selectionType="single"/>
+      // <menuitem id="menu_copyURL" label="&copyURLCmd.label;"
+      //           accesskey="&copyURLCmd.accesskey;" command="consoleCmd_copyURL"
+      //           selection="network" selectionType="single"/>
+      // <menuitem id="menu_openInVarView" label="&openInVarViewCmd.label;"
+      //   accesskey="&openInVarViewCmd.accesskey;" disabled="true"/>
+      // <menuitem id="menu_storeAsGlobal" label="&storeAsGlobalVar.label;"
+      //   accesskey="&storeAsGlobalVar.accesskey;"/>
+      // <menuitem id="cMenu_copy"/>
+      // <menuitem id="cMenu_selectAll"/>
+      let CONTEXT_MENU_ITEMS = {
+        "menu_openURL": {
+          label: "&openURL.label;",
+          onClick: () => {
+            console.log("DOING COMMAND");
+            this.owner._commandController.doCommand("consoleCmd_openURL");
+          },
+          accesskey: "&openURL.accesskey;",
+          command: "consoleCmd_openURL",
+          selection: "network",
+          selectionType: "single",
+        }
+      };
+      this.popup = toolbox.openContextMenuAtPoint(e, CONTEXT_MENU_ITEMS);
+      this.build(e);
+    });
+  }
+
 }
 
 ConsoleContextMenu.prototype = {
   lastClickedMessage: null,
 
   /*
    * Handle to show/hide context menu item.
    */
   build: function(event) {
     let metadata = this.getSelectionMetadata(event.rangeParent);
-    for (let element of this.popup.children) {
-      element.hidden = this.shouldHideMenuItem(element, metadata);
-    }
+    // for (let element of this.popup.children) {
+    //   element.hidden = this.shouldHideMenuItem(element, metadata);
+    // }
   },
 
   /*
    * Get selection information from the view.
    *
    * @param nsIDOMElement clickElement
    *        The DOM element the user clicked on.
    * @return object
diff --git a/devtools/client/webconsole/webconsole.xul b/devtools/client/webconsole/webconsole.xul
--- a/devtools/client/webconsole/webconsole.xul
+++ b/devtools/client/webconsole/webconsole.xul
@@ -196,17 +196,17 @@ function goUpdateConsoleCommands() {
         </hbox>
 
         <spacer flex="1"/>
 
         <textbox class="compact hud-filter-box devtools-searchinput" type="search"
                  placeholder="&filterOutput.placeholder;" tabindex="2"/>
       </toolbar>
 
-      <hbox id="output-wrapper" flex="1" context="output-contextmenu" tooltip="aHTMLTooltip">
+      <hbox id="output-wrapper" flex="1" tooltip="aHTMLTooltip">
         <!-- Wrapper element to make scrolling in output-container much faster.
              See Bug 1237368 -->
         <div xmlns="http://www.w3.org/1999/xhtml">
           <div xmlns="http://www.w3.org/1999/xhtml" id="output-container"
                tabindex="0" role="document" aria-live="polite" />
         </div>
       </hbox>
       <notificationbox id="webconsole-notificationbox">
