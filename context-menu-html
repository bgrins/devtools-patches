# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  32a2a01d3d2b3f3bd7aa9fd29d065f18c3bf4dd5
Bug 1257613 - Add an API to open context menus from an HTML document;

MozReview-Commit-ID: 4j9d5k3Ut1f

diff --git a/browser/base/content/browser.xul b/browser/base/content/browser.xul
--- a/browser/base/content/browser.xul
+++ b/browser/base/content/browser.xul
@@ -1120,18 +1120,21 @@
     </svg:clipPath>
 #ifdef XP_WIN
     <svg:clipPath id="urlbar-back-button-clip-path-win10">
       <svg:path d="M -6,-2 l 0,1 a 15 15 0 0,1 0,30 l 0,1 l 10000,0 l 0,-32 l -10000,0 z" />
     </svg:clipPath>
 #endif
   </svg:svg>
 
+
 </vbox>
 # <iframe id="tab-view"> is dynamically appended as the 2nd child of #tab-view-deck.
 #     Introducing the iframe dynamically, as needed, was found to be better than
 #     starting with an empty iframe here in browser.xul from a Ts standpoint.
 </deck>
 
+
+
 # Put it at the very end to make sure it is not covered by anything.
 <hbox id="fullscr-toggler" hidden="true"/>
 
 </window>
diff --git a/devtools/client/framework/toolbox.js b/devtools/client/framework/toolbox.js
--- a/devtools/client/framework/toolbox.js
+++ b/devtools/client/framework/toolbox.js
@@ -190,16 +190,60 @@ Toolbox.prototype = {
     LAST_TOOL: "devtools.toolbox.selectedTool",
     SIDE_ENABLED: "devtools.toolbox.sideEnabled",
     PREVIOUS_HOST: "devtools.toolbox.previousHost"
   },
 
   currentToolId: null,
   lastUsedToolId: null,
 
+  /* Create a context menu and open it */
+  openContextMenuAtPoint: function(e, items = {}) {
+    console.log("Creating a context menu");
+
+    console.log("Opening a context menu");
+    let popup = this.doc.createElement("menupopup");
+    this.doc.querySelector("popupset").appendChild(popup);
+
+    for (let id in items) {
+      let menuitem = this.doc.createElement("menuitem");
+      menuitem.id = id;
+      let item = items[id];
+      menuitem.setAttribute("label", item.label);
+      menuitem.addEventListener("command", () => {
+        item.onClick();
+      });
+
+      if (item.accesskey) {
+        menuitem.setAttribute("accesskey", item.accesskey);
+      }
+      if (item.selection) {
+        menuitem.setAttribute("selection", item.selection);
+      }
+      if (item.selectionType) {
+        menuitem.setAttribute("selectionType", item.selectionType);
+      }
+
+      popup.appendChild(menuitem);
+    }
+
+    popup.addEventListener("popupshowing", () => {
+    }, true);
+    popup.addEventListener("popuphidden", () => {
+      popup.remove();
+    }, true);
+
+    popup.openPopupAtScreen(e.screenX, e.screenY, true);
+    popup.focus();
+    e.preventDefault();
+    e.stopPropagation();
+
+    return popup;
+  },
+
   /**
    * Returns a *copy* of the _toolPanels collection.
    *
    * @return {Map} panels
    *         All the running panels in the toolbox
    */
   getToolPanels: function() {
     return new Map(this._toolPanels);
diff --git a/devtools/client/jar.mn b/devtools/client/jar.mn
--- a/devtools/client/jar.mn
+++ b/devtools/client/jar.mn
@@ -16,16 +16,17 @@ devtools.jar:
     content/netmonitor/netmonitor.xul (netmonitor/netmonitor.xul)
     content/netmonitor/netmonitor.css (netmonitor/netmonitor.css)
     content/netmonitor/netmonitor-controller.js (netmonitor/netmonitor-controller.js)
     content/netmonitor/netmonitor-view.js (netmonitor/netmonitor-view.js)
     content/webconsole/webconsole.xul (webconsole/webconsole.xul)
 *   content/scratchpad/scratchpad.xul (scratchpad/scratchpad.xul)
     content/scratchpad/scratchpad.js (scratchpad/scratchpad.js)
     content/shared/splitview.css (shared/splitview.css)
+    content/test-page.html (test-page.html)
     content/shared/theme-switching.js (shared/theme-switching.js)
     content/shared/frame-script-utils.js (shared/frame-script-utils.js)
     content/styleeditor/styleeditor.xul (styleeditor/styleeditor.xul)
     content/styleeditor/styleeditor.css (styleeditor/styleeditor.css)
     content/storage/storage.xul (storage/storage.xul)
     content/inspector/fonts/fonts.js (inspector/fonts/fonts.js)
     content/inspector/layout/layout.js (inspector/layout/layout.js)
     content/inspector/markup/markup.xhtml (inspector/markup/markup.xhtml)
diff --git a/devtools/client/test-page.html b/devtools/client/test-page.html
new file mode 100644
--- /dev/null
+++ b/devtools/client/test-page.html
@@ -0,0 +1,15 @@
+<body>
+
+  <menu type="context" id="mymenu">
+    <menuitem label="Refresh Post" onclick="window.location.reload();" icon="/images/refresh-icon.png"></menuitem>
+    <menuitem label="Skip to Comments" onclick="window.location='#comments';" icon="/images/comment_icon.gif"></menuitem>
+    <menu label="Share on..." icon="/images/share_icon.gif">
+      <menuitem label="Twitter" icon="/images/twitter_icon.gif" onclick="goTo('//twitter.com/intent/tweet?text=' + document.title + ':  ' + window.location.href);"></menuitem>
+      <menuitem label="Facebook" icon="/images/facebook_icon16x16.gif" onclick="goTo('//facebook.com/sharer/sharer.php?u=' + window.location.href);"></menuitem>
+    </menu>
+  </menu>
+
+  <div contextmenu="mymenu">
+  Right click me!
+  </div>
+</body>
\ No newline at end of file
diff --git a/devtools/client/webconsole/webconsole.js b/devtools/client/webconsole/webconsole.js
--- a/devtools/client/webconsole/webconsole.js
+++ b/devtools/client/webconsole/webconsole.js
@@ -2761,16 +2761,18 @@ WebConsoleFrame.prototype = {
 
   /**
    * Open the selected item's URL in a new tab.
    */
   openSelectedItemInTab: function() {
     let item = this.output.getSelectedMessages(1)[0] ||
                this._contextMenuHandler.lastClickedMessage;
 
+    console.log("Hi", item, item.url);
+    console.trace();
     if (!item || !item.url) {
       return;
     }
 
     this.owner.openLink(item.url);
   },
 
   /**
@@ -3513,29 +3515,67 @@ WebConsoleConnectionProxy.prototype = {
  * @param object owner
  *        The WebConsoleFrame instance that owns this object.
  */
 function ConsoleContextMenu(owner) {
   this.owner = owner;
   this.popup = this.owner.document.getElementById("output-contextmenu");
   this.build = this.build.bind(this);
   this.popup.addEventListener("popupshowing", this.build);
+
+
+  let toolbox = gDevTools.getToolbox(this.owner.owner.target);
+  console.log("HERE", owner, toolbox)
+  // XXX: Handle browser console case
+  if (toolbox) {
+    this.owner.document.addEventListener("contextmenu", (e) => {
+      console.log(e, e.defaultPrevented);
+      // <menuitem id="menu_openURL" label="&openURL.label;"
+      //           accesskey="&openURL.accesskey;" command="consoleCmd_openURL"
+      //           selection="network" selectionType="single"/>
+      // <menuitem id="menu_copyURL" label="&copyURLCmd.label;"
+      //           accesskey="&copyURLCmd.accesskey;" command="consoleCmd_copyURL"
+      //           selection="network" selectionType="single"/>
+      // <menuitem id="menu_openInVarView" label="&openInVarViewCmd.label;"
+      //   accesskey="&openInVarViewCmd.accesskey;" disabled="true"/>
+      // <menuitem id="menu_storeAsGlobal" label="&storeAsGlobalVar.label;"
+      //   accesskey="&storeAsGlobalVar.accesskey;"/>
+      // <menuitem id="cMenu_copy"/>
+      // <menuitem id="cMenu_selectAll"/>
+      let CONTEXT_MENU_ITEMS = {
+        "menu_openURL": {
+          label: "&openURL.label;",
+          onClick: () => {
+            console.log("DOING COMMAND");
+            this.owner._commandController.doCommand("consoleCmd_openURL");
+          },
+          accesskey: "&openURL.accesskey;",
+          command: "consoleCmd_openURL",
+          selection: "network",
+          selectionType: "single",
+        }
+      };
+      this.popup = toolbox.openContextMenuAtPoint(e, CONTEXT_MENU_ITEMS);
+      this.build(e);
+    });
+  }
+
 }
 
 ConsoleContextMenu.prototype = {
   lastClickedMessage: null,
 
   /*
    * Handle to show/hide context menu item.
    */
   build: function(event) {
     let metadata = this.getSelectionMetadata(event.rangeParent);
-    for (let element of this.popup.children) {
-      element.hidden = this.shouldHideMenuItem(element, metadata);
-    }
+    // for (let element of this.popup.children) {
+    //   element.hidden = this.shouldHideMenuItem(element, metadata);
+    // }
   },
 
   /*
    * Get selection information from the view.
    *
    * @param nsIDOMElement clickElement
    *        The DOM element the user clicked on.
    * @return object
