# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  165addeb1e58bf6791cc60c4c28f71a1558059a4
Bug 1257613 - Add an API to open context menus from an HTML document;

MozReview-Commit-ID: 4j9d5k3Ut1f

diff --git a/devtools/client/framework/menu-item.js b/devtools/client/framework/menu-item.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/framework/menu-item.js
@@ -0,0 +1,10 @@
+
+function MenuItem({label = "", id = null, submenu = null, checked = false, type = "normal", click = () => {}}) {
+  this.label = label;
+  this.submenu = submenu;
+  this.checked = checked;
+  this.id = id;
+  this.click = click;
+}
+
+module.exports = MenuItem;
\ No newline at end of file
diff --git a/devtools/client/framework/menu.js b/devtools/client/framework/menu.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/framework/menu.js
@@ -0,0 +1,85 @@
+
+const MenuItem = require("./menu-item");
+
+/// XXX: Separators
+/// XXX: Disabled
+
+function Menu() {
+  this.menuitems = [];
+}
+
+Menu.prototype.append = function(menuitem) {
+  // XXX: support appending a plain object?
+  if (!(menuitem instanceof MenuItem)) {
+    menuitem = new MenuItem(menuitem);
+  }
+
+  this.menuitems.push(menuitem);
+};
+
+Menu.prototype._createMenuItems = function(parent) {
+  let doc = parent.ownerDocument;
+  this.menuitems.forEach(item => {
+    if (item.submenu) {
+      let menupopup = doc.createElement("menupopup");
+      item.submenu._createMenuItems(menupopup);
+
+      let menu = doc.createElement("menu");
+      menu.appendChild(menupopup);
+      menu.setAttribute("label", item.label);
+      parent.appendChild(menu);
+    } else {
+      let menuitem = doc.createElement("menuitem");
+      menuitem.setAttribute("label", item.label);
+      menuitem.addEventListener("command", () => {
+        console.log("On command", item);
+        item.click();
+      });
+
+      if (item.type == "checkbox") {
+        menuitem.setAttribute("type", "checkbox");
+      }
+      if (item.accesskey) {
+        menuitem.setAttribute("accesskey", item.accesskey);
+      }
+      if (item.selection) {
+        menuitem.setAttribute("selection", item.selection);
+      }
+      if (item.selectionType) {
+        menuitem.setAttribute("selectionType", item.selectionType);
+      }
+
+      parent.appendChild(menuitem);
+    }
+  });
+};
+
+Menu.prototype.popup = function(win, x, y) {
+  let doc = win.document;
+  console.log("Opening a context menu");
+  let popup = doc.createElement("menupopup");
+  doc.querySelector("popupset").appendChild(popup);
+
+  this._createMenuItems(popup);
+
+  popup.addEventListener("popupshowing", (e) => {
+    console.log("POPUP SHOWING", e);
+
+  }, true);
+  popup.addEventListener("popuphidden", (e) => {
+    console.log("POPUP HIDDEN", e);
+    popup.remove();
+  }, true);
+
+  popup.openPopupAtScreen(x, y, true);
+  popup.focus();
+
+  return popup;
+};
+
+
+function createMenuItems(parent, items) {
+
+}
+
+module.exports = Menu;
\ No newline at end of file
diff --git a/devtools/client/framework/moz.build b/devtools/client/framework/moz.build
--- a/devtools/client/framework/moz.build
+++ b/devtools/client/framework/moz.build
@@ -11,16 +11,18 @@ TEST_HARNESS_FILES.xpcshell.devtools.cli
 
 DevToolsModules(
     'about-devtools-toolbox.js',
     'attach-thread.js',
     'browser-menus.js',
     'devtools-browser.js',
     'devtools.js',
     'gDevTools.jsm',
+    'menu-item.js',
+    'menu.js',
     'selection.js',
     'sidebar.js',
     'source-location.js',
     'target-from-url.js',
     'target.js',
     'toolbox-highlighter-utils.js',
     'toolbox-hosts.js',
     'toolbox-options.js',
diff --git a/devtools/client/framework/toolbox.js b/devtools/client/framework/toolbox.js
--- a/devtools/client/framework/toolbox.js
+++ b/devtools/client/framework/toolbox.js
@@ -21,16 +21,17 @@ var promise = require("promise");
 var Services = require("Services");
 var {gDevTools} = require("devtools/client/framework/devtools");
 var EventEmitter = require("devtools/shared/event-emitter");
 var Telemetry = require("devtools/client/shared/telemetry");
 var HUDService = require("devtools/client/webconsole/hudservice");
 var viewSource = require("devtools/client/shared/view-source");
 var { attachThread, detachThread } = require("./attach-thread");
 
+
 Cu.import("resource://devtools/client/scratchpad/scratchpad-manager.jsm");
 Cu.import("resource://devtools/client/shared/DOMHelpers.jsm");
 Cu.import("resource://gre/modules/Task.jsm");
 
 loader.lazyGetter(this, "toolboxStrings", () => {
   const properties = "chrome://devtools/locale/toolbox.properties";
   const bundle = Services.strings.createBundle(properties);
   return (name, ...args) => {
@@ -190,16 +191,60 @@ Toolbox.prototype = {
     LAST_TOOL: "devtools.toolbox.selectedTool",
     SIDE_ENABLED: "devtools.toolbox.sideEnabled",
     PREVIOUS_HOST: "devtools.toolbox.previousHost"
   },
 
   currentToolId: null,
   lastUsedToolId: null,
 
+  /* Create a context menu and open it */
+  openContextMenuAtPoint: function(e, items = {}) {
+    console.log("Creating a context menu");
+
+    console.log("Opening a context menu");
+    let popup = this.doc.createElement("menupopup");
+    this.doc.querySelector("popupset").appendChild(popup);
+
+    for (let id in items) {
+      let menuitem = this.doc.createElement("menuitem");
+      menuitem.id = id;
+      let item = items[id];
+      menuitem.setAttribute("label", item.label);
+      menuitem.addEventListener("command", () => {
+        item.onClick();
+      });
+
+      if (item.accesskey) {
+        menuitem.setAttribute("accesskey", item.accesskey);
+      }
+      if (item.selection) {
+        menuitem.setAttribute("selection", item.selection);
+      }
+      if (item.selectionType) {
+        menuitem.setAttribute("selectionType", item.selectionType);
+      }
+
+      popup.appendChild(menuitem);
+    }
+
+    popup.addEventListener("popupshowing", () => {
+    }, true);
+    popup.addEventListener("popuphidden", () => {
+      popup.remove();
+    }, true);
+
+    popup.openPopupAtScreen(e.screenX, e.screenY, true);
+    popup.focus();
+    e.preventDefault();
+    e.stopPropagation();
+
+    return popup;
+  },
+
   /**
    * Returns a *copy* of the _toolPanels collection.
    *
    * @return {Map} panels
    *         All the running panels in the toolbox
    */
   getToolPanels: function() {
     return new Map(this._toolPanels);
diff --git a/devtools/client/inspector/inspector-panel.js b/devtools/client/inspector/inspector-panel.js
--- a/devtools/client/inspector/inspector-panel.js
+++ b/devtools/client/inspector/inspector-panel.js
@@ -9,16 +9,19 @@
 const {Cc, Ci, Cu} = require("chrome");
 
 var Services = require("Services");
 var promise = require("promise");
 var EventEmitter = require("devtools/shared/event-emitter");
 var clipboard = require("sdk/clipboard");
 var {HostType} = require("devtools/client/framework/toolbox").Toolbox;
 
+const Menu = require("devtools/client/framework/menu");
+const MenuItem = require("devtools/client/framework/menu-item");
+
 loader.lazyRequireGetter(this, "CSS", "CSS");
 
 loader.lazyGetter(this, "MarkupView", () => require("devtools/client/inspector/markup/markup").MarkupView);
 loader.lazyGetter(this, "HTMLBreadcrumbs", () => require("devtools/client/inspector/breadcrumbs").HTMLBreadcrumbs);
 loader.lazyGetter(this, "ToolSidebar", () => require("devtools/client/framework/sidebar").ToolSidebar);
 loader.lazyGetter(this, "InspectorSearch", () => require("devtools/client/inspector/inspector-search").InspectorSearch);
 loader.lazyGetter(this, "RuleViewTool", () => require("devtools/client/inspector/rules/rules").RuleViewTool);
 loader.lazyGetter(this, "ComputedViewTool", () => require("devtools/client/inspector/computed/computed").ComputedViewTool);
@@ -79,16 +82,17 @@ function InspectorPanel(iframeWindow, to
   this.panelDoc = iframeWindow.document;
   this.panelWin = iframeWindow;
   this.panelWin.inspector = this;
 
   this.nodeMenuTriggerInfo = null;
 
   this._onBeforeNavigate = this._onBeforeNavigate.bind(this);
   this.onNewRoot = this.onNewRoot.bind(this);
+  this._onContextMenu = this._onContextMenu.bind(this);
   this._setupNodeMenu = this._setupNodeMenu.bind(this);
   this._resetNodeMenu = this._resetNodeMenu.bind(this);
   this._updateSearchResultsLabel = this._updateSearchResultsLabel.bind(this);
   this.onNewSelection = this.onNewSelection.bind(this);
   this.onBeforeNewSelection = this.onBeforeNewSelection.bind(this);
   this.onDetached = this.onDetached.bind(this);
   this.onPaneToggleButtonClicked = this.onPaneToggleButtonClicked.bind(this);
   this._onMarkupFrameLoad = this._onMarkupFrameLoad.bind(this);
@@ -687,16 +691,184 @@ InspectorPanel.prototype = {
       let content = clipboard.get();
       if (content && content.trim().length > 0) {
         return content;
       }
     }
     return null;
   },
 
+  _onContextMenu: function(e) {
+    e.preventDefault();
+
+    let menu = new Menu();
+    menu.append(new MenuItem({ id: "node-menu-edithtml",
+      label: strings.GetStringFromName("inspectorHTMLEdit.label"),
+      accesskey: strings.GetStringFromName("inspectorHTMLEdit.accesskey"),
+      click: () => { console.log("CLICK!!"); this.editHTML() }}));
+    menu.append(new MenuItem({ id: "node-menu-copyinner",
+      label: strings.GetStringFromName("inspectorHTMLCopyInner.label"),
+      accesskey: strings.GetStringFromName("inspectorHTMLCopyInner.accesskey"),
+      click: () => { this.copyInnerHTML() }}));
+    menu.append(new MenuItem({ id: "node-menu-copyouter",
+      label: strings.GetStringFromName("inspectorHTMLCopyOuter.label"),
+      accesskey: strings.GetStringFromName("inspectorHTMLCopyOuter.accesskey"),
+      click: () => { this.copyOuterHTML() }}));
+    menu.append(new MenuItem({ id: "node-menu-copyuniqueselector",
+      label: strings.GetStringFromName("inspectorCopyUniqueSelector.label"),
+      accesskey: strings.GetStringFromName("inspectorCopyUniqueSelector.accesskey"),
+      click: () => { this.copyUniqueSelector() }}));
+    menu.append(new MenuItem({ id: "node-menu-copyimagedatauri",
+      label: strings.GetStringFromName("inspectorCopyImageDataUri.label"),
+      click: () => { this.copyImageDataUri() }}));
+    menu.append(new MenuItem({ id: "node-menu-showdomproperties",
+      label: strings.GetStringFromName("inspectorShowDOMProperties.label"),
+      click: () => { this.showDOMProperties() }}));
+    menu.append(new MenuItem({ id: "node-menu-useinconsole",
+      label: strings.GetStringFromName("inspectorUseInConsole.label"),
+      click: () => { this.useInConsole() }}));
+    menu.append(new MenuItem({ id: "node-menu-expand",
+      label: strings.GetStringFromName("inspectorExpandNode.label"),
+      click: () => { this.expandNode() }}));
+    menu.append(new MenuItem({ id: "node-menu-collapse",
+      label: strings.GetStringFromName("inspectorCollapseNode.label"),
+      click: () => { this.collapseNode() }}));
+    menu.append(new MenuItem({ id: "node-menu-pasteinnerhtml",
+      label: strings.GetStringFromName("inspectorHTMLPasteInner.label"),
+      accesskey: strings.GetStringFromName("inspectorHTMLPasteInner.accesskey"),
+      click: () => { this.pasteInnerHTML() }}));
+    menu.append(new MenuItem({ id: "node-menu-pasteouterhtml",
+      label: strings.GetStringFromName("inspectorHTMLPasteOuter.label"),
+      accesskey: strings.GetStringFromName("inspectorHTMLPasteOuter.accesskey"),
+      click: () => { this.pasteOuterHTML() },
+    }));
+
+    let pasteSubmenu = new Menu();
+    pasteSubmenu.append(new MenuItem({ id: "node-menu-pastebefore",
+      label: strings.GetStringFromName("inspectorHTMLPasteBefore.label"),
+      accesskey: strings.GetStringFromName("inspectorHTMLPasteBefore.accesskey"),
+      click: () => { this.pasteAdjacentHTML('beforeBegin') }}));
+    pasteSubmenu.append(new MenuItem({ id: "node-menu-pasteafter",
+      label: strings.GetStringFromName("inspectorHTMLPasteAfter.label"),
+      accesskey: strings.GetStringFromName("inspectorHTMLPasteAfter.accesskey"),
+      click: () => { this.pasteAdjacentHTML('afterEnd') }}));
+    pasteSubmenu.append(new MenuItem({ id: "node-menu-pastefirstchild",
+      label: strings.GetStringFromName("inspectorHTMLPasteFirstChild.label"),
+      accesskey: strings.GetStringFromName("inspectorHTMLPasteFirstChild.accesskey"),
+      click: () => { this.pasteAdjacentHTML('afterBegin') }}));
+    pasteSubmenu.append(new MenuItem({ id: "node-menu-pastelastchild",
+      label: strings.GetStringFromName("inspectorHTMLPasteLastChild.label"),
+      accesskey: strings.GetStringFromName("inspectorHTMLPasteLastChild.accesskey"),
+      click: () => { this.pasteAdjacentHTML('beforeEnd') }}));
+
+    menu.append(new MenuItem({ id: "node-menu-paste",
+      label: strings.GetStringFromName("inspectorHTMLPasteExtraSubmenu.label"),
+      accesskey: strings.GetStringFromName("inspectorHTMLPasteExtraSubmenu.accesskey"),
+      submenu: pasteSubmenu
+    }));
+
+    menu.append(new MenuItem({ id: "node-menu-scrollnodeintoview",
+      label: strings.GetStringFromName("inspectorScrollNodeIntoView.label"),
+      accesskey: strings.GetStringFromName("inspectorScrollNodeIntoView.accesskey"),
+      click: () => { this.scrollNodeIntoView() }}));
+    menu.append(new MenuItem({ id: "node-menu-screenshotnode",
+      label: strings.GetStringFromName("inspectorScreenshotNode.label"),
+      click: () => { this.screenshotNode() }}));
+    menu.append(new MenuItem({ id: "node-menu-duplicatenode",
+      label: strings.GetStringFromName("inspectorDuplicateNode.label"),
+      click: () => { this.duplicateNode() }}));
+    menu.append(new MenuItem({ id: "node-menu-delete",
+      label: strings.GetStringFromName("inspectorHTMLDelete.label"),
+      accesskey: strings.GetStringFromName("inspectorHTMLDelete.accesskey"),
+      click: () => { this.deleteNode() }}));
+
+    let attributeSubmenu = new Menu();
+    attributeSubmenu.append(new MenuItem({ id: "node-menu-add-attribute",
+      label: strings.GetStringFromName("inspectorAddAttribute.label"),
+      accesskey: strings.GetStringFromName("inspectorAddAttribute.accesskey"),
+      click: () => { this.onAddAttribute() }}));
+    attributeSubmenu.append(new MenuItem({ id: "node-menu-edit-attribute",
+      label: strings.GetStringFromName("inspectorEditAttribute.label"),
+      accesskey: strings.GetStringFromName("inspectorEditAttribute.accesskey"),
+      click: () => { this.onEditAttribute() }}));
+    attributeSubmenu.append(new MenuItem({ id: "node-menu-remove-attribute",
+      label: strings.GetStringFromName("inspectorRemoveAttribute.label"),
+      accesskey: strings.GetStringFromName("inspectorRemoveAttribute.accesskey"),
+      click: () => { this.onRemoveAttribute() }}));
+
+    menu.append(new MenuItem({ id: "node-menu-attribute",
+      label: strings.GetStringFromName("inspectorAttributeSubmenu.label"),
+      accesskey: strings.GetStringFromName("inspectorAttributeSubmenu.accesskey"),
+      submenu: attributeSubmenu }));
+
+    // menu.append(new MenuItem({ id: "node-menu-link-follow",
+    //   click: () => { this.onFollowLink() }}));
+    // menu.append(new MenuItem({ id: "node-menu-link-copy",
+    //   click: () => { this.onCopyLink() }}));
+    menu.append(new MenuItem({ id: "node-menu-pseudo-hover",
+      label:":hover",
+      type: "checkbox",
+      click: () => { this.togglePseudoClass(':hover') }}));
+    menu.append(new MenuItem({ id: "node-menu-pseudo-active",
+      label: ":active",
+      type: "checkbox",
+      click: () => { this.togglePseudoClass(':active') }}));
+    menu.append(new MenuItem({ id: "node-menu-pseudo-focus",
+      label: ":focus",
+      type: "checkbox",
+      click: () => { this.togglePseudoClass(':focus') }}));
+
+
+    // // Get information about the right-clicked node.
+    // let popupNode = this.panelDoc.popupNode;
+    // if (!popupNode || !popupNode.classList.contains("link")) {
+    //   return;
+    // }
+
+    // let type = popupNode.dataset.type;
+    // if (type === "uri" || type === "cssresource" || type === "jsresource") {
+    //   // First make sure the target can resolve relative URLs.
+    //   this.target.actorHasMethod("inspector", "resolveRelativeURL").then(canResolve => {
+    //     if (!canResolve) {
+    //       return;
+    //     }
+
+    //     linkSeparator.removeAttribute("hidden");
+
+    //     // Links can't be opened in new tabs in the browser toolbox.
+    //     if (type === "uri" && !this.target.chrome) {
+    //       linkFollow.removeAttribute("hidden");
+    //       linkFollow.setAttribute("label", strings.GetStringFromName(
+    //         "inspector.menu.openUrlInNewTab.label"));
+    //     } else if (type === "cssresource") {
+    //       linkFollow.removeAttribute("hidden");
+    //       linkFollow.setAttribute("label", toolboxStrings.GetStringFromName(
+    //         "toolbox.viewCssSourceInStyleEditor.label"));
+    //     } else if (type === "jsresource") {
+    //       linkFollow.removeAttribute("hidden");
+    //       linkFollow.setAttribute("label", toolboxStrings.GetStringFromName(
+    //         "toolbox.viewJsSourceInDebugger.label"));
+    //     }
+
+    //     linkCopy.removeAttribute("hidden");
+    //     linkCopy.setAttribute("label", strings.GetStringFromName(
+    //       "inspector.menu.copyUrlToClipboard.label"));
+    //   }, console.error);
+    // } else if (type === "idref") {
+    //   linkSeparator.removeAttribute("hidden");
+    //   linkFollow.removeAttribute("hidden");
+    //   linkFollow.setAttribute("label", strings.formatStringFromName(
+    //     "inspector.menu.selectElement.label", [popupNode.dataset.link], 1));
+    // }
+
+
+    // menu.popup(this._toolbox.doc.defaultView, e.screenX, e.screenY);
+    menu.popup(this.panelDoc.defaultView, e.screenX, e.screenY);
+
+  },
   /**
    * Update, enable, disable, hide, show any menu item depending on the current
    * element.
    */
   _setupNodeMenu: function(event) {
     let markupContainer = this.markup.getContainer(this.selection.nodeFront);
     this.nodeMenuTriggerInfo =
       markupContainer.editor.getInfoAtNode(event.target.triggerNode);
@@ -960,16 +1132,18 @@ InspectorPanel.prototype = {
 
     this._markupBox = doc.getElementById("markup-box");
 
     // create tool iframe
     this._markupFrame = doc.createElement("iframe");
     this._markupFrame.setAttribute("flex", "1");
     this._markupFrame.setAttribute("tooltip", "aHTMLTooltip");
     this._markupFrame.setAttribute("context", "inspector-node-popup");
+    this._markupFrame.addEventListener("contextmenu", this._onContextMenu, true);
+    // XXXXXX Hook up context menu handler
 
     // This is needed to enable tooltips inside the iframe document.
     this._markupFrame.addEventListener("load", this._onMarkupFrameLoad, true);
 
     this._markupBox.setAttribute("collapsed", true);
     this._markupBox.appendChild(this._markupFrame);
     this._markupFrame.setAttribute("src", "chrome://devtools/content/inspector/markup/markup.xhtml");
     this._markupFrame.setAttribute("aria-label", strings.GetStringFromName("inspector.panelLabel.markupView"));
diff --git a/devtools/client/inspector/inspector.xul b/devtools/client/inspector/inspector.xul
--- a/devtools/client/inspector/inspector.xul
+++ b/devtools/client/inspector/inspector.xul
@@ -35,129 +35,16 @@
       key="&inspectorSearchHTML.key;"
       modifiers="accel"
       command="nodeSearchCommand"/>
   </keyset>
 
   <popupset id="inspectorPopupSet">
     <!-- Used by the Markup Panel, the Highlighter and the Breadcrumbs -->
     <menupopup id="inspector-node-popup">
-      <menuitem id="node-menu-edithtml"
-        label="&inspectorHTMLEdit.label;"
-        accesskey="&inspectorHTMLEdit.accesskey;"
-        oncommand="inspector.editHTML()"/>
-      <menuitem id="node-menu-copyinner"
-        label="&inspectorHTMLCopyInner.label;"
-        accesskey="&inspectorHTMLCopyInner.accesskey;"
-        oncommand="inspector.copyInnerHTML()"/>
-      <menuitem id="node-menu-copyouter"
-        label="&inspectorHTMLCopyOuter.label;"
-        accesskey="&inspectorHTMLCopyOuter.accesskey;"
-        oncommand="inspector.copyOuterHTML()"/>
-      <menuitem id="node-menu-copyuniqueselector"
-        label="&inspectorCopyUniqueSelector.label;"
-        accesskey="&inspectorCopyUniqueSelector.accesskey;"
-        oncommand="inspector.copyUniqueSelector()"/>
-      <menuitem id="node-menu-copyimagedatauri"
-        label="&inspectorCopyImageDataUri.label;"
-        oncommand="inspector.copyImageDataUri()"/>
-      <menuitem id="node-menu-showdomproperties"
-        label="&inspectorShowDOMProperties.label;"
-        oncommand="inspector.showDOMProperties()"/>
-      <menuitem id="node-menu-useinconsole"
-        label="&inspectorUseInConsole.label;"
-        oncommand="inspector.useInConsole()"/>
-      <menuitem id="node-menu-expand"
-        label="&inspectorExpandNode.label;"
-        oncommand="inspector.expandNode()"/>
-      <menuitem id="node-menu-collapse"
-        label="&inspectorCollapseNode.label;"
-        oncommand="inspector.collapseNode()"/>
-      <menuseparator/>
-      <menuitem id="node-menu-pasteinnerhtml"
-        label="&inspectorHTMLPasteInner.label;"
-        accesskey="&inspectorHTMLPasteInner.accesskey;"
-        oncommand="inspector.pasteInnerHTML()"/>
-      <menuitem id="node-menu-pasteouterhtml"
-        label="&inspectorHTMLPasteOuter.label;"
-        accesskey="&inspectorHTMLPasteOuter.accesskey;"
-        oncommand="inspector.pasteOuterHTML()"/>
-      <menu id="node-menu-paste-extra-submenu"
-        label="&inspectorHTMLPasteExtraSubmenu.label;"
-        accesskey="&inspectorHTMLPasteExtraSubmenu.accesskey;">
-        <menupopup>
-          <menuitem id="node-menu-pastebefore"
-            label="&inspectorHTMLPasteBefore.label;"
-            accesskey="&inspectorHTMLPasteBefore.accesskey;"
-            oncommand="inspector.pasteAdjacentHTML('beforeBegin')"/>
-          <menuitem id="node-menu-pasteafter"
-            label="&inspectorHTMLPasteAfter.label;"
-            accesskey="&inspectorHTMLPasteAfter.accesskey;"
-            oncommand="inspector.pasteAdjacentHTML('afterEnd')"/>
-          <menuitem id="node-menu-pastefirstchild"
-            label="&inspectorHTMLPasteFirstChild.label;"
-            accesskey="&inspectorHTMLPasteFirstChild.accesskey;"
-            oncommand="inspector.pasteAdjacentHTML('afterBegin')"/>
-          <menuitem id="node-menu-pastelastchild"
-            label="&inspectorHTMLPasteLastChild.label;"
-            accesskey="&inspectorHTMLPasteLastChild.accesskey;"
-            oncommand="inspector.pasteAdjacentHTML('beforeEnd')"/>
-        </menupopup>
-      </menu>
-      <menuseparator/>
-      <menuitem id="node-menu-scrollnodeintoview"
-        label="&inspectorScrollNodeIntoView.label;"
-        accesskey="&inspectorScrollNodeIntoView.accesskey;"
-        oncommand="inspector.scrollNodeIntoView()"/>
-      <menuitem id="node-menu-screenshotnode"
-        label="&inspectorScreenshotNode.label;"
-        oncommand="inspector.screenshotNode()" />
-      <menuitem id="node-menu-add"
-        label="&inspectorAddNode.label;"
-        accesskey="&inspectorAddNode.accesskey;"
-        oncommand="inspector.addNode()"/>
-      <menuitem id="node-menu-duplicatenode"
-        label="&inspectorDuplicateNode.label;"
-        oncommand="inspector.duplicateNode()"/>
-      <menuitem id="node-menu-delete"
-        label="&inspectorHTMLDelete.label;"
-        accesskey="&inspectorHTMLDelete.accesskey;"
-        oncommand="inspector.deleteNode()"/>
-      <menu label="&inspectorAttributeSubmenu.label;"
-        accesskey="&inspectorAttributeSubmenu.accesskey;">
-        <menupopup>
-          <menuitem id="node-menu-add-attribute"
-            label="&inspectorAddAttribute.label;"
-            accesskey="&inspectorAddAttribute.accesskey;"
-            oncommand="inspector.onAddAttribute()"/>
-          <menuitem id="node-menu-edit-attribute"
-            label="&inspectorEditAttribute.label;"
-            accesskey="&inspectorEditAttribute.accesskey;"
-            oncommand="inspector.onEditAttribute()"/>
-          <menuitem id="node-menu-remove-attribute"
-            label="&inspectorRemoveAttribute.label;"
-            accesskey="&inspectorRemoveAttribute.accesskey;"
-            oncommand="inspector.onRemoveAttribute()"/>
-        </menupopup>
-      </menu>
-      <menuseparator id="node-menu-link-separator"/>
-      <menuitem id="node-menu-link-follow"
-        oncommand="inspector.onFollowLink()"/>
-      <menuitem id="node-menu-link-copy"
-        oncommand="inspector.onCopyLink()"/>
-      <menuseparator/>
-      <menuitem id="node-menu-pseudo-hover"
-        label=":hover" type="checkbox"
-        oncommand="inspector.togglePseudoClass(':hover')"/>
-      <menuitem id="node-menu-pseudo-active"
-        label=":active" type="checkbox"
-        oncommand="inspector.togglePseudoClass(':active')"/>
-      <menuitem id="node-menu-pseudo-focus"
-        label=":focus" type="checkbox"
-        oncommand="inspector.togglePseudoClass(':focus')"/>
     </menupopup>
   </popupset>
 
   <box flex="1" class="devtools-responsive-container theme-body">
     <vbox flex="1" class="devtools-main-content">
       <toolbar id="inspector-toolbar"
         class="devtools-toolbar"
         nowindowdrag="true">
diff --git a/devtools/client/jar.mn b/devtools/client/jar.mn
--- a/devtools/client/jar.mn
+++ b/devtools/client/jar.mn
@@ -16,16 +16,17 @@ devtools.jar:
     content/netmonitor/netmonitor.xul (netmonitor/netmonitor.xul)
     content/netmonitor/netmonitor.css (netmonitor/netmonitor.css)
     content/netmonitor/netmonitor-controller.js (netmonitor/netmonitor-controller.js)
     content/netmonitor/netmonitor-view.js (netmonitor/netmonitor-view.js)
     content/webconsole/webconsole.xul (webconsole/webconsole.xul)
 *   content/scratchpad/scratchpad.xul (scratchpad/scratchpad.xul)
     content/scratchpad/scratchpad.js (scratchpad/scratchpad.js)
     content/shared/splitview.css (shared/splitview.css)
+    content/test-page.html (test-page.html)
     content/shared/theme-switching.js (shared/theme-switching.js)
     content/shared/frame-script-utils.js (shared/frame-script-utils.js)
     content/styleeditor/styleeditor.xul (styleeditor/styleeditor.xul)
     content/styleeditor/styleeditor.css (styleeditor/styleeditor.css)
     content/storage/storage.xul (storage/storage.xul)
     content/inspector/fonts/fonts.js (inspector/fonts/fonts.js)
     content/inspector/layout/layout.js (inspector/layout/layout.js)
     content/inspector/markup/markup.xhtml (inspector/markup/markup.xhtml)
diff --git a/devtools/client/locales/en-US/inspector.dtd b/devtools/client/locales/en-US/inspector.dtd
--- a/devtools/client/locales/en-US/inspector.dtd
+++ b/devtools/client/locales/en-US/inspector.dtd
@@ -1,163 +1,17 @@
-<!-- LOCALIZATION NOTE (inspectorHTMLEdit.label): This is the label shown
-     in the inspector contextual-menu for the item that lets users edit the
-     (outer) HTML of the current node -->
-<!ENTITY inspectorHTMLEdit.label       "Edit As HTML">
-<!ENTITY inspectorHTMLEdit.accesskey   "E">
-
-<!-- LOCALIZATION NOTE (inspectorHTMLCopyInner.label): This is the label shown
-     in the inspector contextual-menu for the item that lets users copy the
-     inner HTML of the current node -->
-<!ENTITY inspectorHTMLCopyInner.label       "Copy Inner HTML">
-<!ENTITY inspectorHTMLCopyInner.accesskey   "I">
-
-<!-- LOCALIZATION NOTE (inspectorHTMLCopyOuter.label): This is the label shown
-     in the inspector contextual-menu for the item that lets users copy the
-     outer HTML of the current node -->
-<!ENTITY inspectorHTMLCopyOuter.label       "Copy Outer HTML">
-<!ENTITY inspectorHTMLCopyOuter.accesskey   "O">
-
-<!-- LOCALIZATION NOTE (inspectorCopyUniqueSelector.label): This is the label
-     shown in the inspector contextual-menu for the item that lets users copy
-     the CSS Selector of the current node -->
-<!ENTITY inspectorCopyUniqueSelector.label       "Copy Unique Selector">
-<!ENTITY inspectorCopyUniqueSelector.accesskey   "U">
-
-<!-- LOCALIZATION NOTE (inspectorHTMLPasteOuter.label): This is the label shown
-     in the inspector contextual-menu for the item that lets users paste outer
-     HTML in the current node -->
-<!ENTITY inspectorHTMLPasteOuter.label      "Paste Outer HTML">
-<!ENTITY inspectorHTMLPasteOuter.accesskey  "P">
-
-<!-- LOCALIZATION NOTE (inspectorHTMLPasteInner.label): This is the label shown
-     in the inspector contextual-menu for the item that lets users paste inner
-     HTML in the current node -->
-<!ENTITY inspectorHTMLPasteInner.label      "Paste Inner HTML">
-<!ENTITY inspectorHTMLPasteInner.accesskey  "N">
-
-<!-- LOCALIZATION NOTE (inspectorHTMLPasteExtraSubmenu.label): This is the label
-     shown in the inspector contextual-menu for the sub-menu of the other Paste
-     items, which allow to paste HTML:
-     - before the current node
-     - after the current node
-     - as the first child of the current node
-     - as the last child of the current node -->
-<!ENTITY inspectorHTMLPasteExtraSubmenu.label      "Paste…">
-<!ENTITY inspectorHTMLPasteExtraSubmenu.accesskey  "t">
-
-<!-- LOCALIZATION NOTE (inspectorHTMLPasteBefore.label): This is the label shown
-     in the inspector contextual-menu for the item that lets users paste
-     the HTML before the current node -->
-<!ENTITY inspectorHTMLPasteBefore.label      "Before">
-<!ENTITY inspectorHTMLPasteBefore.accesskey  "B">
-
-<!-- LOCALIZATION NOTE (inspectorHTMLPasteAfter.label): This is the label shown
-     in the inspector contextual-menu for the item that lets users paste
-     the HTML after the current node -->
-<!ENTITY inspectorHTMLPasteAfter.label       "After">
-<!ENTITY inspectorHTMLPasteAfter.accesskey   "A">
-
-<!-- LOCALIZATION NOTE (inspectorHTMLPasteFirstChild.label): This is the label
-     shown in the inspector contextual-menu for the item that lets users paste
-     the HTML as the first child the current node -->
-<!ENTITY inspectorHTMLPasteFirstChild.label      "As First Child">
-<!ENTITY inspectorHTMLPasteFirstChild.accesskey  "F">
-
-<!-- LOCALIZATION NOTE (inspectorHTMLPasteLastChild.label): This is the label
-     shown in the inspector contextual-menu for the item that lets users paste
-     the HTML as the last child the current node -->
-<!ENTITY inspectorHTMLPasteLastChild.label       "As Last Child">
-<!ENTITY inspectorHTMLPasteLastChild.accesskey   "L">
-
-<!-- LOCALIZATION NOTE (inspectorScrollNodeIntoView.label): This is the label
-     shown in the inspector contextual-menu for the item that lets users scroll
-     the current node into view -->
-<!ENTITY inspectorScrollNodeIntoView.label       "Scroll Into View">
-<!ENTITY inspectorScrollNodeIntoView.accesskey   "S">
-
-<!-- LOCALIZATION NOTE (inspectorHTMLDelete.label): This is the label shown in
-     the inspector contextual-menu for the item that lets users delete the
-     current node -->
-<!ENTITY inspectorHTMLDelete.label          "Delete Node">
-<!ENTITY inspectorHTMLDelete.accesskey      "D">
-<!-- LOCALIZATION NOTE (inspectorAttributeSubmenu.label): This is the label
-     shown in the inspector contextual-menu for the sub-menu of the other
-     attribute items, which allow to:
-     - add new attribute
-     - edit attribute
-     - remove attribute -->
-<!ENTITY inspectorAttributeSubmenu.label      "Attribute">
-<!ENTITY inspectorAttributeSubmenu.accesskey  "A">
-
-<!-- LOCALIZATION NOTE (inspectorAddAttribute.label): This is the label shown in
-     the inspector contextual-menu for the item that lets users add attribute
-     to current node -->
-<!ENTITY inspectorAddAttribute.label        "Add Attribute">
-<!ENTITY inspectorAddAttribute.accesskey    "A">
-
-<!-- LOCALIZATION NOTE (inspectorEditAttribute.label): This is the label shown in
-     the inspector contextual-menu for the item that lets users edit attribute
-     for current node -->
-<!ENTITY inspectorEditAttribute.label        "Edit Attribute">
-<!ENTITY inspectorEditAttribute.accesskey    "E">
-
-<!-- LOCALIZATION NOTE (inspectorRemoveAttribute.label): This is the label shown in
-     the inspector contextual-menu for the item that lets users delete attribute
-     from current node -->
-<!ENTITY inspectorRemoveAttribute.label        "Remove Attribute">
-<!ENTITY inspectorRemoveAttribute.accesskey    "R">
 
 <!ENTITY inspector.selectButton.tooltip     "Select element with mouse">
 
 <!-- LOCALIZATION NOTE (inspectorSearchHTML.label2): This is the label shown as
      the placeholder in inspector search box -->
 <!ENTITY inspectorSearchHTML.label2          "Search with CSS Selectors">
 <!ENTITY inspectorSearchHTML.key            "F">
 
 <!-- LOCALIZATION NOTE (inspectorSearchHTML.label3): This is the label that is
      shown as the placeholder for the markup view search in the inspector. -->
 <!ENTITY inspectorSearchHTML.label3 "Search HTML">
 
-<!-- LOCALIZATION NOTE (inspectorCopyImageDataUri.label): This is the label
-     shown in the inspector contextual-menu for the item that lets users copy
-     the URL embedding the image data encoded in Base 64 (what we name
-     here Image Data URL). For more information:
-     https://developer.mozilla.org/en-US/docs/Web/HTTP/data_URIs -->
-<!ENTITY inspectorCopyImageDataUri.label       "Copy Image Data-URL">
-
-<!-- LOCALIZATION NOTE (inspectorShowDOMProperties.label): This is the label
-     shown in the inspector contextual-menu for the item that lets users see
-     the DOM properties of the current node. When triggered, this item
-     opens the split Console and displays the properties in its side panel. -->
-<!ENTITY inspectorShowDOMProperties.label       "Show DOM Properties">
-
-<!-- LOCALIZATION NOTE (inspectorUseInConsole.label): This is the label
-     shown in the inspector contextual-menu for the item that outputs a
-     variable for the current node to the console. When triggered,
-     this item opens the split Console. -->
-<!ENTITY inspectorUseInConsole.label       "Use in Console">
-
-<!-- LOCALIZATION NOTE (inspectorExpandNode.label): This is the label
-     shown in the inspector contextual-menu for recursively expanding
-     mark-up elements -->
-<!ENTITY inspectorExpandNode.label       "Expand All">
-
-<!-- LOCALIZATION NOTE (inspectorCollapseNode.label): This is the label
-     shown in the inspector contextual-menu for recursively collapsing
-     mark-up elements -->
-<!ENTITY inspectorCollapseNode.label       "Collapse">
-
-<!-- LOCALIZATION NOTE (inspectorScreenshotNode.label): This is the label
-     shown in the inspector contextual-menu for the item that lets users take
-     a screenshot of the currently selected node. -->
-<!ENTITY inspectorScreenshotNode.label       "Screenshot Node">
-
-<!-- LOCALIZATION NOTE (inspectorDuplicateNode.label): This is the label
-     shown in the inspector contextual-menu for the item that lets users
-     duplicate the currently selected node. -->
-<!ENTITY inspectorDuplicateNode.label       "Duplicate Node">
-
 <!-- LOCALIZATION NOTE (inspectorAddNode.label): This is the label shown in
      the inspector toolbar for the button that lets users add elements to the
      DOM (as children of the currently selected element). -->
 <!ENTITY inspectorAddNode.label       "Create New Node">
 <!ENTITY inspectorAddNode.accesskey   "C">
diff --git a/devtools/client/locales/en-US/inspector.properties b/devtools/client/locales/en-US/inspector.properties
--- a/devtools/client/locales/en-US/inspector.properties
+++ b/devtools/client/locales/en-US/inspector.properties
@@ -130,8 +130,156 @@ inspector.nodePreview.selectNodeLabel=Cl
 # This string is displayed in a tooltip that is shown when hovering over a the
 # inspector icon displayed next to a DOM node preview (e.g. next to something
 # like "div#foo.bar").
 # DOM node previews can be displayed in places like the animation-inspector, the
 # console or the object inspector.
 # The tooltip invites the user to click on the icon in order to highlight the
 # node in the page.
 inspector.nodePreview.highlightNodeLabel=Click to highlight this node in the page
+
+# LOCALIZATION NOTE (inspectorHTMLEdit.label): This is the label shown
+# in the inspector contextual-menu for the item that lets users edit the
+# (outer) HTML of the current node -->
+inspectorHTMLEdit.label=Edit As HTML
+inspectorHTMLEdit.accesskey=E
+
+# LOCALIZATION NOTE (inspectorHTMLCopyInner.label): This is the label shown
+# in the inspector contextual-menu for the item that lets users copy the
+# inner HTML of the current node -->
+inspectorHTMLCopyInner.label=Copy Inner HTML
+inspectorHTMLCopyInner.accesskey=I
+
+# LOCALIZATION NOTE (inspectorHTMLCopyOuter.label): This is the label shown
+# in the inspector contextual-menu for the item that lets users copy the
+# outer HTML of the current node -->
+inspectorHTMLCopyOuter.label=Copy Outer HTML
+inspectorHTMLCopyOuter.accesskey=O
+
+# LOCALIZATION NOTE (inspectorCopyUniqueSelector.label): This is the label
+# shown in the inspector contextual-menu for the item that lets users copy
+# the CSS Selector of the current node -->
+inspectorCopyUniqueSelector.label=Copy Unique Selector
+inspectorCopyUniqueSelector.accesskey=U
+
+# LOCALIZATION NOTE (inspectorHTMLPasteOuter.label): This is the label shown
+# in the inspector contextual-menu for the item that lets users paste outer
+# HTML in the current node -->
+inspectorHTMLPasteOuter.label=Paste Outer HTML
+inspectorHTMLPasteOuter.accesskey=P
+
+# LOCALIZATION NOTE (inspectorHTMLPasteInner.label): This is the label shown
+# in the inspector contextual-menu for the item that lets users paste inner
+# HTML in the current node -->
+inspectorHTMLPasteInner.label=Paste Inner HTML
+inspectorHTMLPasteInner.accesskey=N
+
+# LOCALIZATION NOTE (inspectorHTMLPasteExtraSubmenu.label): This is the label
+# shown in the inspector contextual-menu for the sub-menu of the other Paste
+# items, which allow to paste HTML:
+#  - before the current node
+#  - after the current node
+#  - as the first child of the current node
+#  - as the last child of the current node -->
+inspectorHTMLPasteExtraSubmenu.label=Paste…
+inspectorHTMLPasteExtraSubmenu.accesskey=t
+
+# LOCALIZATION NOTE (inspectorHTMLPasteBefore.label): This is the label shown
+# in the inspector contextual-menu for the item that lets users paste
+# the HTML before the current node -->
+inspectorHTMLPasteBefore.label=Before
+inspectorHTMLPasteBefore.accesskey=B
+
+# LOCALIZATION NOTE (inspectorHTMLPasteAfter.label): This is the label shown
+# in the inspector contextual-menu for the item that lets users paste
+# the HTML after the current node -->
+inspectorHTMLPasteAfter.label=After
+inspectorHTMLPasteAfter.accesskey=A
+
+# LOCALIZATION NOTE (inspectorHTMLPasteFirstChild.label): This is the label
+# shown in the inspector contextual-menu for the item that lets users paste
+# the HTML as the first child the current node -->
+inspectorHTMLPasteFirstChild.label=As First Child
+inspectorHTMLPasteFirstChild.accesskey=F
+
+# LOCALIZATION NOTE (inspectorHTMLPasteLastChild.label): This is the label
+# shown in the inspector contextual-menu for the item that lets users paste
+# the HTML as the last child the current node -->
+inspectorHTMLPasteLastChild.label=As Last Child
+inspectorHTMLPasteLastChild.accesskey=L
+
+# LOCALIZATION NOTE (inspectorScrollNodeIntoView.label): This is the label
+# shown in the inspector contextual-menu for the item that lets users scroll
+# the current node into view -->
+inspectorScrollNodeIntoView.label=Scroll Into View
+inspectorScrollNodeIntoView.accesskey=S
+
+# LOCALIZATION NOTE (inspectorHTMLDelete.label): This is the label shown in
+# the inspector contextual-menu for the item that lets users delete the
+# current node -->
+inspectorHTMLDelete.label=Delete Node
+inspectorHTMLDelete.accesskey=D
+
+# LOCALIZATION NOTE (inspectorAttributeSubmenu.label): This is the label
+# shown in the inspector contextual-menu for the sub-menu of the other
+# attribute items, which allow to:
+#  - add new attribute
+#  - edit attribute
+#  - remove attribute -->
+inspectorAttributeSubmenu.label=Attribute
+inspectorAttributeSubmenu.accesskey=A
+
+# LOCALIZATION NOTE (inspectorAddAttribute.label): This is the label shown in
+# the inspector contextual-menu for the item that lets users add attribute
+# to current node -->
+inspectorAddAttribute.label=Add Attribute
+inspectorAddAttribute.accesskey=A
+
+# LOCALIZATION NOTE (inspectorEditAttribute.label): This is the label shown in
+# the inspector contextual-menu for the item that lets users edit attribute
+# for current node -->
+inspectorEditAttribute.label=Edit Attribute
+inspectorEditAttribute.accesskey=E
+
+# LOCALIZATION NOTE (inspectorRemoveAttribute.label): This is the label shown in
+# the inspector contextual-menu for the item that lets users delete attribute
+# from current node -->
+inspectorRemoveAttribute.label=Remove Attribute
+inspectorRemoveAttribute.accesskey=R
+
+# LOCALIZATION NOTE (inspectorCopyImageDataUri.label): This is the label
+# shown in the inspector contextual-menu for the item that lets users copy
+# the URL embedding the image data encoded in Base 64 (what we name
+# here Image Data URL). For more information:
+# https://developer.mozilla.org/en-US/docs/Web/HTTP/data_URIs -->
+inspectorCopyImageDataUri.label=Copy Image Data-URL
+
+# LOCALIZATION NOTE (inspectorShowDOMProperties.label): This is the label
+# shown in the inspector contextual-menu for the item that lets users see
+# the DOM properties of the current node. When triggered, this item
+# opens the split Console and displays the properties in its side panel. -->
+inspectorShowDOMProperties.label=Show DOM Properties
+
+# LOCALIZATION NOTE (inspectorUseInConsole.label): This is the label
+# shown in the inspector contextual-menu for the item that outputs a
+# variable for the current node to the console. When triggered,
+# this item opens the split Console. -->
+inspectorUseInConsole.label=Use in Console
+
+# LOCALIZATION NOTE (inspectorExpandNode.label): This is the label
+# shown in the inspector contextual-menu for recursively expanding
+# mark-up elements -->
+inspectorExpandNode.label=Expand All
+
+# LOCALIZATION NOTE (inspectorCollapseNode.label): This is the label
+# shown in the inspector contextual-menu for recursively collapsing
+# mark-up elements -->
+inspectorCollapseNode.label=Collapse
+
+# LOCALIZATION NOTE (inspectorScreenshotNode.label): This is the label
+# shown in the inspector contextual-menu for the item that lets users take
+# a screenshot of the currently selected node. -->
+inspectorScreenshotNode.label=Screenshot Node
+
+# LOCALIZATION NOTE (inspectorDuplicateNode.label): This is the label
+# shown in the inspector contextual-menu for the item that lets users
+# duplicate the currently selected node.
+inspectorDuplicateNode.label=Duplicate Node
diff --git a/devtools/client/test-page.html b/devtools/client/test-page.html
new file mode 100644
--- /dev/null
+++ b/devtools/client/test-page.html
@@ -0,0 +1,15 @@
+<body>
+
+  <menu type="context" id="mymenu">
+    <menuitem label="Refresh Post" onclick="window.location.reload();" icon="/images/refresh-icon.png"></menuitem>
+    <menuitem label="Skip to Comments" onclick="window.location='#comments';" icon="/images/comment_icon.gif"></menuitem>
+    <menu label="Share on..." icon="/images/share_icon.gif">
+      <menuitem label="Twitter" icon="/images/twitter_icon.gif" onclick="goTo('//twitter.com/intent/tweet?text=' + document.title + ':  ' + window.location.href);"></menuitem>
+      <menuitem label="Facebook" icon="/images/facebook_icon16x16.gif" onclick="goTo('//facebook.com/sharer/sharer.php?u=' + window.location.href);"></menuitem>
+    </menu>
+  </menu>
+
+  <div contextmenu="mymenu">
+  Right click me!
+  </div>
+</body>
\ No newline at end of file
