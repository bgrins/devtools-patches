# HG changeset patch
# Parent 6400e85d3c9dbd8525eea24de9cad16a665673ff
# User Michael Ratcliffe <mratcliffe@mozilla.com>
# Date 1405886954 -3600

Bug 1040701 - Fix marking of changed properties in rule view r=bgrins

diff --git a/browser/devtools/styleinspector/rule-view.js b/browser/devtools/styleinspector/rule-view.js
--- a/browser/devtools/styleinspector/rule-view.js
+++ b/browser/devtools/styleinspector/rule-view.js
@@ -628,22 +628,16 @@ Rule.prototype = {
         if (!cssProp) {
           cssProp = {
             name: textProp.name,
             value: "",
             priority: ""
           };
         }
 
-        if (aName && textProp.name == aName) {
-          store.userProperties.setProperty(
-            this.style,
-            textProp.name,
-            textProp.value);
-        }
         textProp.priority = cssProp.priority;
       }
 
       this.elementStyle.markOverriddenAll();
 
       if (promise === this._applyingModifications) {
         this._applyingModifications = null;
       }
@@ -1032,17 +1026,23 @@ TextProperty.prototype = {
       }
     }
 
     if (changed) {
       this.updateEditor();
     }
   },
 
-  setValue: function(aValue, aPriority) {
+  setValue: function(aValue, aPriority, aCommit=false) {
+    let store = this.rule.elementStyle.store;
+
+    if (aCommit) {
+      store.userProperties.setProperty(this.rule.style, this.name, aValue);
+    }
+
     this.rule.setPropertyValue(this, aValue, aPriority);
     this.updateEditor();
   },
 
   setName: function(aName) {
     this.rule.setPropertyName(this, aName);
     this.updateEditor();
   },
@@ -2627,17 +2627,17 @@ TextPropertyEditor.prototype = {
       } else {
         // Adding multiple rules inside of name field overwrites the current
         // property with the first, then adds any more onto the property list.
         let properties = parseDeclarations(aValue);
 
         if (properties.length) {
           this.prop.setName(properties[0].name);
           if (properties.length > 1) {
-            this.prop.setValue(properties[0].value, properties[0].priority);
+            this.prop.setValue(properties[0].value, properties[0].priority, aCommit);
             this.ruleEditor.addProperties(properties.slice(1), this.prop);
           }
         }
       }
     }
   },
 
   /**
@@ -2668,26 +2668,28 @@ TextPropertyEditor.prototype = {
    *        True if the change should be applied.
    */
    _onValueDone: function(aValue, aCommit) {
     if (!aCommit && !this.ruleEditor.isEditing) {
        // A new property should be removed when escape is pressed.
        if (this.removeOnRevert) {
          this.remove();
        } else {
-         this.prop.setValue(this.committed.value, this.committed.priority);
+         this.prop.setValue(this.committed.value, this.committed.priority, false);
        }
        return;
     }
 
     let {propertiesToAdd,firstValue} = this._getValueAndExtraProperties(aValue);
 
     // First, set this property value (common case, only modified a property)
     let val = parseSingleValue(firstValue);
-    this.prop.setValue(val.value, val.priority);
+
+    this.prop.setValue(val.value, val.priority,
+                       aCommit && aValue !== this.committed.value);
     this.removeOnRevert = false;
     this.committed.value = this.prop.value;
     this.committed.priority = this.prop.priority;
 
     // If needed, add any new properties after this.prop.
     this.ruleEditor.addProperties(propertiesToAdd, this.prop);
 
     // If the name or value is not actively being edited, and the value is
@@ -2748,17 +2750,17 @@ TextPropertyEditor.prototype = {
       propertiesToAdd: propertiesToAdd,
       firstValue: firstValue
     };
   },
 
   _applyNewValue: function(aValue) {
     let val = parseSingleValue(aValue);
 
-    this.prop.setValue(val.value, val.priority);
+    this.prop.setValue(val.value, val.priority, true);
     this.removeOnRevert = false;
     this.committed.value = this.prop.value;
     this.committed.priority = this.prop.priority;
   },
 
   /**
    * Live preview this property, without committing changes.
    * @param {string} aValue The value to set the current property to.
@@ -2853,16 +2855,17 @@ UserProperties.prototype = {
    * @param {String} aName
    *        The name of the property to set.
    * @param {String} aUserValue
    *        The value of the property to set.
    */
   setProperty: function(aStyle, aName, aUserValue) {
     let key = this.getKey(aStyle);
     let entry = this.map.get(key, null);
+
     if (entry) {
       entry[aName] = aUserValue;
     } else {
       let props = {};
       props[aName] = aUserValue;
       this.map.set(key, props);
     }
   },
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_colorpicker-and-image-tooltip_02.js b/browser/devtools/styleinspector/test/browser_ruleview_colorpicker-and-image-tooltip_02.js
--- a/browser/devtools/styleinspector/test/browser_ruleview_colorpicker-and-image-tooltip_02.js
+++ b/browser/devtools/styleinspector/test/browser_ruleview_colorpicker-and-image-tooltip_02.js
@@ -52,10 +52,10 @@ function* testColorChangeIsntRevertedWhe
   let onShown = ruleView.tooltips.previewTooltip.once("shown");
   let anchor = yield isHoverTooltipTarget(ruleView.tooltips.previewTooltip, url);
   ruleView.tooltips.previewTooltip.show(anchor);
   yield onShown;
 
   info("Image tooltip is shown, verify that the swatch is still correct");
   let swatch = value.querySelector(".ruleview-colorswatch");
   is(swatch.style.backgroundColor, "rgb(0, 0, 0)", "The swatch's color is correct");
-  is(swatch.nextSibling.textContent, "#000", "The color name is correct");
+  is(swatch.nextSibling.textContent, "rgba(0, 0, 0, 1)", "The color name is correct");
 }
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_edit-property-commit.js b/browser/devtools/styleinspector/test/browser_ruleview_edit-property-commit.js
--- a/browser/devtools/styleinspector/test/browser_ruleview_edit-property-commit.js
+++ b/browser/devtools/styleinspector/test/browser_ruleview_edit-property-commit.js
@@ -13,17 +13,17 @@ const originalValue = "#00F";
 // {
 //  value: what char sequence to type,
 //  commitKey: what key to type to "commit" the change,
 //  modifiers: commitKey modifiers,
 //  expected: what value is expected as a result
 // }
 const testData = [
   {value: "red", commitKey: "VK_ESCAPE", modifiers: {}, expected: originalValue},
-  {value: "red", commitKey: "VK_RETURN", modifiers: {}, expected: "#F00"},
+  {value: "red", commitKey: "VK_RETURN", modifiers: {}, expected: "red"},
   {value: "invalid", commitKey: "VK_RETURN", modifiers: {}, expected: "invalid"},
   {value: "blue", commitKey: "VK_TAB", modifiers: {shiftKey: true}, expected: "blue"}
 ];
 
 let test = asyncTest(function*() {
   yield addTab("data:text/html;charset=utf-8,test escaping property change reverts back to original value");
 
   info("Creating the test document");
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_edit-property_02.js b/browser/devtools/styleinspector/test/browser_ruleview_edit-property_02.js
--- a/browser/devtools/styleinspector/test/browser_ruleview_edit-property_02.js
+++ b/browser/devtools/styleinspector/test/browser_ruleview_edit-property_02.js
@@ -21,33 +21,35 @@ let test = asyncTest(function*() {
   let styleNode = addStyle(content.document, style);
   content.document.body.innerHTML = "<div id='testid' class='testclass'>Styled Node</div>" +
                                     "<div id='testid2'>Styled Node</div>";
 
   yield selectNode("#testid", inspector);
   yield testEditProperty(inspector, view);
   yield testDisableProperty(inspector, view);
   yield testPropertyStillMarkedDirty(inspector, view);
+
+  gBrowser.removeCurrentTab();
 });
 
 function* testEditProperty(inspector, ruleView) {
   let idRuleEditor = getRuleViewRuleEditor(ruleView, 1);
   let propEditor = idRuleEditor.rule.textProps[0].editor;
 
   let editor = yield focusEditableField(propEditor.nameSpan);
   let input = editor.input;
   is(inplaceEditor(propEditor.nameSpan), editor, "Next focused editor should be the name editor.");
 
   ok(input.selectionStart === 0 && input.selectionEnd === input.value.length, "Editor contents are selected.");
 
   // Try clicking on the editor's input again, shouldn't cause trouble (see bug 761665).
   EventUtils.synthesizeMouse(input, 1, 1, {}, ruleView.doc.defaultView);
   input.select();
 
-  info("Entering property name followed by a colon to focus the value");
+  info("Entering property name \"border-color\" followed by a colon to focus the value");
   let onFocus = once(idRuleEditor.element, "focus", true);
   for (let ch of "border-color:") {
     EventUtils.sendChar(ch, ruleView.doc.defaultView);
   }
   yield onFocus;
   yield idRuleEditor.rule._applyingModifications;
 
   info("Verifying that the focused field is the valueSpan");
@@ -64,19 +66,37 @@ function* testEditProperty(inspector, ru
       "warning triangle is hidden or shown as appropriate");
   }
   yield onBlur;
   yield idRuleEditor.rule._applyingModifications;
 
   is(idRuleEditor.rule.style._rawStyle().getPropertyValue("border-color"), "red",
      "border-color should have been set.");
 
+  info("Entering property name \"color\" followed by a colon to focus the value");
+  let onFocus = once(idRuleEditor.element, "focus", true);
+  for (let ch of "color:") {
+    EventUtils.sendChar(ch, ruleView.doc.defaultView);
+  }
+  yield onFocus;
+
+  info("Verifying that the focused field is the valueSpan");
+  editor = inplaceEditor(ruleView.doc.activeElement);
+
+  info("Entering a value following by a semi-colon to commit it");
+  let onBlur = once(editor.input, "blur");
+  for (let ch of "red;") {
+    EventUtils.sendChar(ch, ruleView.doc.defaultView);
+  }
+  yield onBlur;
+  yield idRuleEditor.rule._applyingModifications;
+
   let props = ruleView.element.querySelectorAll(".ruleview-property");
   for (let i = 0; i < props.length; i++) {
-    is(props[i].hasAttribute("dirty"), i <= 0,
+    is(props[i].hasAttribute("dirty"), i <= 1,
       "props[" + i + "] marked dirty as appropriate");
   }
 }
 
 function* testDisableProperty(inspector, ruleView) {
   let idRuleEditor = getRuleViewRuleEditor(ruleView, 1);
   let propEditor = idRuleEditor.rule.textProps[0].editor;
 
@@ -97,12 +117,12 @@ function* testPropertyStillMarkedDirty(i
   // Select an unstyled node.
   yield selectNode("#testid2", inspector);
 
   // Select the original node again.
   yield selectNode("#testid", inspector);
 
   let props = ruleView.element.querySelectorAll(".ruleview-property");
   for (let i = 0; i < props.length; i++) {
-    is(props[i].hasAttribute("dirty"), i <= 0,
+    is(props[i].hasAttribute("dirty"), i <= 1,
       "props[" + i + "] marked dirty as appropriate");
   }
 }
