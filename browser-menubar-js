# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  9302fd8c95c05e5a5cd295dde3bbdac2d58d6256

diff --git a/browser/base/content/browser-menubar.js b/browser/base/content/browser-menubar.js
new file mode 100644
--- /dev/null
+++ b/browser/base/content/browser-menubar.js
@@ -0,0 +1,708 @@
+// Could do: #include browser-menubar.inc
+
+var BrowserMenubar = {
+  get fileMenu() {
+    function maybe(cond, str) {
+       return cond ? str : "";
+    }
+
+    return `
+    <menu id="file-menu" label="&fileMenu.label;"
+          accesskey="&fileMenu.accesskey;">
+      <menupopup id="menu_FilePopup"
+                 onpopupshowing="updateFileMenuUserContextUIVisibility('menu_newUserContext');">
+        <menuitem id="menu_newNavigatorTab"
+                  label="&tabCmd.label;"
+                  command="cmd_newNavigatorTab"
+                  key="key_newNavigatorTab"
+                  accesskey="&tabCmd.accesskey;"/>
+        <menu id="menu_newUserContext"
+              label="&newUserContext.label;"
+              accesskey="&newUserContext.accesskey;"
+              hidden="true">
+          <menupopup onpopupshowing="return createUserContextMenu(event);" />
+        </menu>
+        <menuitem id="menu_newNavigator"
+                  label="&newNavigatorCmd.label;"
+                  accesskey="&newNavigatorCmd.accesskey;"
+                  key="key_newNavigator"
+                  command="cmd_newNavigator"/>
+        <menuitem id="menu_newPrivateWindow"
+                  label="&newPrivateWindow.label;"
+                  accesskey="&newPrivateWindow.accesskey;"
+                  command="Tools:PrivateBrowsing"
+                  key="key_privatebrowsing"/>
+        <menuitem id="menu_openLocation"
+                  hidden="true"
+                  label="&openLocationCmd.label;"
+                  command="Browser:OpenLocation"
+                  key="focusURLBar"/>
+        <menuitem id="menu_openFile"
+                  label="&openFileCmd.label;"
+                  command="Browser:OpenFile"
+                  key="openFileKb"
+                  accesskey="&openFileCmd.accesskey;"/>
+        <menuitem id="menu_close"
+                  class="show-only-for-keyboard"
+                  label="&closeCmd.label;"
+                  key="key_close"
+                  accesskey="&closeCmd.accesskey;"
+                  command="cmd_close"/>
+        <menuitem id="menu_closeWindow"
+                  class="show-only-for-keyboard"
+                  hidden="true"
+                  command="cmd_closeWindow"
+                  key="key_closeWindow"
+                  label="&closeWindow.label;"
+                  accesskey="&closeWindow.accesskey;"/>
+        <menuseparator/>
+        <menuitem id="menu_savePage"
+                  label="&savePageCmd.label;"
+                  accesskey="&savePageCmd.accesskey;"
+                  key="key_savePage"
+                  command="Browser:SavePage"/>
+        <menuitem id="menu_sendLink"
+                  label="&emailPageCmd.label;"
+                  accesskey="&emailPageCmd.accesskey;"
+                  command="Browser:SendLink"/>
+        <menuseparator/>
+        ${maybe(!AppConstants.MOZ_WIDGET_GTK, `
+        <menuitem id="menu_printSetup"
+                  label="&printSetupCmd.label;"
+                  accesskey="&printSetupCmd.accesskey;"
+                  command="cmd_pageSetup"/>
+        `)}
+        ${maybe(!AppConstants.XP_MACOSX, `
+        <menuitem id="menu_printPreview"
+                  label="&printPreviewCmd.label;"
+                  accesskey="&printPreviewCmd.accesskey;"
+                  command="cmd_printPreview"/>
+        `)}
+        <menuitem id="menu_print"
+                  label="&printCmd.label;"
+                  accesskey="&printCmd.accesskey;"
+                  key="printKb"
+                  command="cmd_print"/>
+        <menuseparator/>
+        <menuitem id="goOfflineMenuitem"
+                  label="&goOfflineCmd.label;"
+                  accesskey="&goOfflineCmd.accesskey;"
+                  type="checkbox"
+                  observes="workOfflineMenuitemState"
+                  oncommand="BrowserOffline.toggleOfflineStatus();"/>
+        <menuitem id="menu_FileQuitItem"
+            ${(() => {
+              if (AppConstants.platform === "win") {
+                return `
+                  label="&quitApplicationCmdWin2.label;"
+                  accesskey="&quitApplicationCmdWin2.accesskey;"
+                `;
+              } else if (AppConstants.platform === "macosx") {
+                return `
+                  label="&quitApplicationCmdMac2.label;"
+                `;
+              }
+                return `
+                   key="key_quitApplication"
+                   command="cmd_quitApplication"
+                `;
+
+            })()}
+                  key="key_quitApplication"
+                  command="cmd_quitApplication"/>
+      </menupopup>
+    </menu>
+    `;
+  },
+
+  get editMenu() {
+    return `
+      <menu id="edit-menu" label="&editMenu.label;"
+            accesskey="&editMenu.accesskey;">
+        <menupopup id="menu_EditPopup"
+                   onpopupshowing="updateEditUIVisibility()"
+                   onpopuphidden="updateEditUIVisibility()">
+          <menuitem id="menu_undo"
+                    label="&undoCmd.label;"
+                    key="key_undo"
+                    accesskey="&undoCmd.accesskey;"
+                    command="cmd_undo"/>
+          <menuitem id="menu_redo"
+                    label="&redoCmd.label;"
+                    key="key_redo"
+                    accesskey="&redoCmd.accesskey;"
+                    command="cmd_redo"/>
+          <menuseparator/>
+          <menuitem id="menu_cut"
+                    label="&cutCmd.label;"
+                    key="key_cut"
+                    accesskey="&cutCmd.accesskey;"
+                    command="cmd_cut"/>
+          <menuitem id="menu_copy"
+                    label="&copyCmd.label;"
+                    key="key_copy"
+                    accesskey="&copyCmd.accesskey;"
+                    command="cmd_copy"/>
+          <menuitem id="menu_paste"
+                    label="&pasteCmd.label;"
+                    key="key_paste"
+                    accesskey="&pasteCmd.accesskey;"
+                    command="cmd_paste"/>
+          <menuitem id="menu_delete"
+                    label="&deleteCmd.label;"
+                    key="key_delete"
+                    accesskey="&deleteCmd.accesskey;"
+                    command="cmd_delete"/>
+          <menuseparator/>
+          <menuitem id="menu_selectAll"
+                    label="&selectAllCmd.label;"
+                    key="key_selectAll"
+                    accesskey="&selectAllCmd.accesskey;"
+                    command="cmd_selectAll"/>
+          <menuseparator/>
+          <menuitem id="menu_find"
+                    label="&findOnCmd.label;"
+                    accesskey="&findOnCmd.accesskey;"
+                    key="key_find"
+                    command="cmd_find"/>
+          <menuitem id="menu_findAgain"
+                    class="show-only-for-keyboard"
+                    label="&findAgainCmd.label;"
+                    accesskey="&findAgainCmd.accesskey;"
+                    key="key_findAgain"
+                    command="cmd_findAgain"/>
+          <menuseparator hidden="true" id="textfieldDirection-separator"/>
+          <menuitem id="textfieldDirection-swap"
+                    command="cmd_switchTextDirection"
+                    key="key_switchTextDirection"
+                    label="&bidiSwitchTextDirectionItem.label;"
+                    accesskey="&bidiSwitchTextDirectionItem.accesskey;"
+                    hidden="true"/>
+#ifdef XP_UNIX
+#ifndef XP_MACOSX
+          <menuseparator/>
+          <menuitem id="menu_preferences"
+                    label="&preferencesCmdUnix.label;"
+                    accesskey="&preferencesCmdUnix.accesskey;"
+                    oncommand="openPreferences(undefined, {origin: 'menubar'});"/>
+#endif
+#endif
+        </menupopup>
+      </menu>
+    `;
+  },
+
+  get viewMenu() {
+    return `
+      <menu id="view-menu" label="&viewMenu.label;"
+            accesskey="&viewMenu.accesskey;">
+        <menupopup id="menu_viewPopup"
+                   onpopupshowing="updateCharacterEncodingMenuState();">
+          <menu id="viewToolbarsMenu"
+                label="&viewToolbarsMenu.label;"
+                accesskey="&viewToolbarsMenu.accesskey;">
+            <menupopup onpopupshowing="onViewToolbarsPopupShowing(event);">
+              <menuseparator/>
+              <menuitem id="menu_customizeToolbars"
+                        label="&viewCustomizeToolbar.label;"
+                        accesskey="&viewCustomizeToolbar.accesskey;"
+                        command="cmd_CustomizeToolbars"/>
+            </menupopup>
+          </menu>
+          <menu id="viewSidebarMenuMenu"
+                label="&viewSidebarMenu.label;"
+                accesskey="&viewSidebarMenu.accesskey;">
+            <menupopup id="viewSidebarMenu">
+              <menuitem id="menu_bookmarksSidebar"
+                        key="viewBookmarksSidebarKb"
+                        observes="viewBookmarksSidebar"/>
+              <menuitem id="menu_historySidebar"
+                        key="key_gotoHistory"
+                        observes="viewHistorySidebar"
+                        label="&historyButton.label;"/>
+              <menuitem id="menu_tabsSidebar"
+                        class="sync-ui-item"
+                        observes="viewTabsSidebar"
+                        label="&syncedTabs.sidebar.label;"/>
+            </menupopup>
+          </menu>
+          <menuseparator/>
+          <menu id="viewFullZoomMenu" label="&fullZoom.label;"
+                accesskey="&fullZoom.accesskey;"
+                onpopupshowing="FullZoom.updateMenu();">
+            <menupopup>
+              <menuitem id="menu_zoomEnlarge"
+                        key="key_fullZoomEnlarge"
+                        label="&fullZoomEnlargeCmd.label;"
+                        accesskey="&fullZoomEnlargeCmd.accesskey;"
+                        command="cmd_fullZoomEnlarge"/>
+              <menuitem id="menu_zoomReduce"
+                        key="key_fullZoomReduce"
+                        label="&fullZoomReduceCmd.label;"
+                        accesskey="&fullZoomReduceCmd.accesskey;"
+                        command="cmd_fullZoomReduce"/>
+              <menuseparator/>
+              <menuitem id="menu_zoomReset"
+                        key="key_fullZoomReset"
+                        label="&fullZoomResetCmd.label;"
+                        accesskey="&fullZoomResetCmd.accesskey;"
+                        command="cmd_fullZoomReset"/>
+              <menuseparator/>
+              <menuitem id="toggle_zoom"
+                        label="&fullZoomToggleCmd.label;"
+                        accesskey="&fullZoomToggleCmd.accesskey;"
+                        type="checkbox"
+                        command="cmd_fullZoomToggle"
+                        checked="false"/>
+            </menupopup>
+          </menu>
+          <menu id="pageStyleMenu" label="&pageStyleMenu.label;"
+                accesskey="&pageStyleMenu.accesskey;" observes="isImage">
+            <menupopup onpopupshowing="gPageStyleMenu.fillPopup(this);">
+              <menuitem id="menu_pageStyleNoStyle"
+                        label="&pageStyleNoStyle.label;"
+                        accesskey="&pageStyleNoStyle.accesskey;"
+                        oncommand="gPageStyleMenu.disableStyle();"
+                        type="radio"/>
+              <menuitem id="menu_pageStylePersistentOnly"
+                        label="&pageStylePersistentOnly.label;"
+                        accesskey="&pageStylePersistentOnly.accesskey;"
+                        oncommand="gPageStyleMenu.switchStyleSheet('');"
+                        type="radio"
+                        checked="true"/>
+              <menuseparator/>
+            </menupopup>
+          </menu>
+          <menu id="charsetMenu"
+              label="&charsetMenu2.label;"
+              accesskey="&charsetMenu2.accesskey;"
+              oncommand="BrowserSetForcedCharacterSet(event.target.getAttribute('charset'));"
+              onpopupshowing="CharsetMenu.build(event.target); UpdateCurrentCharset(this);">
+            <menupopup>
+            </menupopup>
+          </menu>
+          <menuseparator/>
+#ifdef XP_MACOSX
+          <menuitem id="enterFullScreenItem"
+                    accesskey="&enterFullScreenCmd.accesskey;"
+                    label="&enterFullScreenCmd.label;"
+                    key="key_fullScreen">
+            <observes element="View:FullScreen" attribute="oncommand"/>
+            <observes element="View:FullScreen" attribute="disabled"/>
+          </menuitem>
+          <menuitem id="exitFullScreenItem"
+                    accesskey="&exitFullScreenCmd.accesskey;"
+                    label="&exitFullScreenCmd.label;"
+                    key="key_fullScreen"
+                    hidden="true">
+            <observes element="View:FullScreen" attribute="oncommand"/>
+            <observes element="View:FullScreen" attribute="disabled"/>
+          </menuitem>
+#else
+          <menuitem id="fullScreenItem"
+                    accesskey="&fullScreenCmd.accesskey;"
+                    label="&fullScreenCmd.label;"
+                    key="key_fullScreen"
+                    type="checkbox"
+                    observes="View:FullScreen"/>
+#endif
+          <menuitem id="menu_readerModeItem"
+                    observes="View:ReaderView"
+                    key="key_toggleReaderMode"
+                    hidden="true"/>
+          <menuitem id="menu_showAllTabs"
+                    hidden="true"
+                    accesskey="&showAllTabsCmd.accesskey;"
+                    label="&showAllTabsCmd.label;"
+                    command="Browser:ShowAllTabs"
+                    key="key_showAllTabs"/>
+          <menuseparator hidden="true" id="documentDirection-separator"/>
+          <menuitem id="documentDirection-swap"
+                    hidden="true"
+                    label="&bidiSwitchPageDirectionItem.label;"
+                    accesskey="&bidiSwitchPageDirectionItem.accesskey;"
+                    oncommand="gBrowser.selectedBrowser
+                                       .messageManager
+                                       .sendAsyncMessage('SwitchDocumentDirection');"/>
+        </menupopup>
+      </menu>
+    `;
+  },
+
+  get historyMenu() {
+    return `
+      <menu id="history-menu"
+            label="&historyMenu.label;"
+            accesskey="&historyMenu.accesskey;">
+        <menupopup id="goPopup"
+#ifndef XP_MACOSX
+                   placespopup="true"
+#endif
+                   oncommand="this.parentNode._placesView._onCommand(event);"
+                   onclick="checkForMiddleClick(this, event);"
+                   onpopupshowing="if (!this.parentNode._placesView)
+                                     new HistoryMenu(event);"
+                   tooltip="bhTooltip"
+                   popupsinherittooltip="true">
+          <menuitem id="menu_showAllHistory"
+                    label="&showAllHistoryCmd2.label;"
+#ifndef XP_MACOSX
+                    key="showAllHistoryKb"
+#endif
+                    command="Browser:ShowAllHistory"/>
+          <menuitem id="sanitizeItem"
+                    label="&clearRecentHistory.label;"
+                    key="key_sanitize"
+                    command="Tools:Sanitize"/>
+          <menuseparator id="sanitizeSeparator"/>
+          <menuitem id="sync-tabs-menuitem"
+                    label="&syncTabsMenu3.label;"
+                    oncommand="BrowserOpenSyncTabs();"
+                    hidden="true"/>
+          <menuitem id="historyRestoreLastSession"
+                    label="&historyRestoreLastSession.label;"
+                    command="Browser:RestoreLastSession"/>
+          <menuitem id="hiddenTabsMenu"
+                    label="&hiddenTabs.label;"
+                    oncommand="gTabsPanel.showHiddenTabsPanel();"
+                    hidden="true"/>
+          <menu id="historyUndoMenu"
+                label="&historyUndoMenu.label;"
+                disabled="true">
+            <menupopup id="historyUndoPopup"
+#ifndef XP_MACOSX
+                       placespopup="true"
+#endif
+                       onpopupshowing="document.getElementById('history-menu')._placesView.populateUndoSubmenu();"/>
+          </menu>
+          <menu id="historyUndoWindowMenu"
+                label="&historyUndoWindowMenu.label;"
+                disabled="true">
+            <menupopup id="historyUndoWindowPopup"
+#ifndef XP_MACOSX
+                       placespopup="true"
+#endif
+                       onpopupshowing="document.getElementById('history-menu')._placesView.populateUndoWindowSubmenu();"/>
+          </menu>
+          <menuseparator id="startHistorySeparator"
+                         class="hide-if-empty-places-result"/>
+        </menupopup>
+      </menu>
+    `;
+  },
+
+  get bookmarksMenu() {
+    return `
+  <menu id="bookmarksMenu"
+        label="&bookmarksMenu.label;"
+        accesskey="&bookmarksMenu.accesskey;"
+        ondragenter="PlacesMenuDNDHandler.onDragEnter(event);"
+        ondragover="PlacesMenuDNDHandler.onDragOver(event);"
+        ondrop="PlacesMenuDNDHandler.onDrop(event);">
+    <menupopup id="bookmarksMenuPopup"
+#ifndef XP_MACOSX
+               placespopup="true"
+#endif
+               context="placesContext"
+               openInTabs="children"
+               onmouseup="BookmarksEventHandler.onMouseUp(event);"
+               oncommand="BookmarksEventHandler.onCommand(event);"
+               onclick="BookmarksEventHandler.onClick(event, this.parentNode._placesView);"
+               onpopupshowing="BookmarkingUI.onMainMenuPopupShowing(event);
+                               if (!this.parentNode._placesView)
+                                 new PlacesMenu(event, 'place:parent=' + PlacesUtils.bookmarks.menuGuid);"
+               tooltip="bhTooltip" popupsinherittooltip="true">
+      <menuitem id="bookmarksShowAll"
+                label="&showAllBookmarks2.label;"
+                command="Browser:ShowAllBookmarks"
+                key="manBookmarkKb"/>
+      <menuseparator id="organizeBookmarksSeparator"/>
+      <menuitem id="menu_bookmarkThisPage"
+                command="Browser:AddBookmarkAs"
+                observes="bookmarkThisPageBroadcaster"
+                key="addBookmarkAsKb"/>
+      <menuitem id="subscribeToPageMenuitem"
+#ifndef XP_MACOSX
+                class="menuitem-iconic"
+#endif
+                label="&subscribeToPageMenuitem.label;"
+                oncommand="return FeedHandler.subscribeToFeed(null, event);"
+                onclick="checkForMiddleClick(this, event);"
+                observes="singleFeedMenuitemState"/>
+      <menu id="subscribeToPageMenupopup"
+#ifndef XP_MACOSX
+            class="menu-iconic"
+#endif
+            label="&subscribeToPageMenupopup.label;"
+            observes="multipleFeedsMenuState">
+        <menupopup id="subscribeToPageSubmenuMenupopup"
+                   onpopupshowing="return FeedHandler.buildFeedList(event.target);"
+                   oncommand="return FeedHandler.subscribeToFeed(null, event);"
+                   onclick="checkForMiddleClick(this, event);"/>
+      </menu>
+      <menuitem id="menu_bookmarkAllTabs"
+                label="&addCurPagesCmd.label;"
+                class="show-only-for-keyboard"
+                command="Browser:BookmarkAllTabs"
+                key="bookmarkAllTabsKb"/>
+      <menuseparator id="bookmarksToolbarSeparator"/>
+      <menu id="bookmarksToolbarFolderMenu"
+            class="menu-iconic bookmark-item"
+            label="&personalbarCmd.label;"
+            container="true">
+        <menupopup id="bookmarksToolbarFolderPopup"
+#ifndef XP_MACOSX
+                   placespopup="true"
+#endif
+                   context="placesContext"
+                   onpopupshowing="if (!this.parentNode._placesView)
+                                     new PlacesMenu(event, 'place:parent=' + PlacesUtils.bookmarks.toolbarGuid);"/>
+      </menu>
+      <menu id="menu_unsortedBookmarks"
+            class="menu-iconic bookmark-item"
+            label="&otherBookmarksCmd.label;"
+            container="true">
+        <menupopup id="otherBookmarksFolderPopup"
+#ifndef XP_MACOSX
+                   placespopup="true"
+#endif
+                   context="placesContext"
+                   onpopupshowing="if (!this.parentNode._placesView)
+                                     new PlacesMenu(event, 'place:parent=' + PlacesUtils.bookmarks.unfiledGuid);"/>
+      </menu>
+      <menu id="menu_mobileBookmarks"
+            class="menu-iconic bookmark-item"
+            label="&mobileBookmarksCmd.label;"
+            hidden="true"
+            container="true">
+        <menupopup id="mobileBookmarksFolderPopup"
+                   ${AppConstants.platform === "macosx" ?
+                   `placespopup="true"` : ""}
+                   context="placesContext"
+                   onpopupshowing="if (!this.parentNode._placesView)
+                                     new PlacesMenu(event, 'place:parent=' + PlacesUtils.bookmarks.mobileGuid);"/>
+      </menu>
+      <menuseparator id="bookmarksMenuItemsSeparator"/>
+      <!-- Bookmarks menu items -->
+    </menupopup>
+  </menu>
+    `;
+  },
+
+  get toolsMenu() {
+    return `
+      <menu id="tools-menu"
+            label="&toolsMenu.label;"
+            accesskey="&toolsMenu.accesskey;">
+        <menupopup id="menu_ToolsPopup">
+        <menuitem id="menu_openDownloads"
+                  label="&downloads.label;"
+                  accesskey="&downloads.accesskey;"
+                  key="key_openDownloads"
+                  command="Tools:Downloads"/>
+        <menuitem id="menu_openAddons"
+                  label="&addons.label;"
+                  accesskey="&addons.accesskey;"
+                  key="key_openAddons"
+                  command="Tools:Addons"/>
+
+        <!-- only one of sync-setup, sync-unverifieditem, sync-syncnowitem or sync-reauthitem will be showing at once -->
+        <menuitem id="sync-setup"
+                  class="sync-ui-item"
+                  label="&syncSignIn.label;"
+                  accesskey="&syncSignIn.accesskey;"
+                  observes="sync-setup-state"
+                  oncommand="gSync.openPrefs('menubar')"/>
+        <menuitem id="sync-unverifieditem"
+                  class="sync-ui-item"
+                  label="&syncSignIn.label;"
+                  accesskey="&syncSignIn.accesskey;"
+                  observes="sync-unverified-state"
+                  oncommand="gSync.openPrefs('menubar')"/>
+        <menuitem id="sync-syncnowitem"
+                  class="sync-ui-item"
+                  label="&syncSyncNowItem.label;"
+                  accesskey="&syncSyncNowItem.accesskey;"
+                  observes="sync-syncnow-state"
+                  oncommand="gSync.doSync(event);"/>
+        <menuitem id="sync-reauthitem"
+                  class="sync-ui-item"
+                  label="&syncReAuthItem.label;"
+                  accesskey="&syncReAuthItem.accesskey;"
+                  observes="sync-reauth-state"
+                  oncommand="gSync.openSignInAgainPage('menubar');"/>
+        <menuseparator id="devToolsSeparator"/>
+        <menu id="webDeveloperMenu"
+              label="&webDeveloperMenu.label;"
+              accesskey="&webDeveloperMenu.accesskey;">
+          <menupopup id="menuWebDeveloperPopup">
+            <menuitem id="menu_pageSource"
+                      observes="devtoolsMenuBroadcaster_PageSource"
+                      accesskey="&pageSourceCmd.accesskey;"/>
+          </menupopup>
+        </menu>
+        <menuitem id="menu_pageInfo"
+                  accesskey="&pageInfoCmd.accesskey;"
+                  label="&pageInfoCmd.label;"
+#ifndef XP_WIN
+                  key="key_viewInfo"
+#endif
+                  command="View:PageInfo"/>
+#ifndef XP_UNIX
+        <menuseparator id="prefSep"/>
+        <menuitem id="menu_preferences"
+                  label="&preferencesCmd2.label;"
+                  accesskey="&preferencesCmd2.accesskey;"
+                  oncommand="openPreferences(undefined, {origin: 'menubar'});"/>
+#endif
+#ifdef MOZ_DEBUG
+        <menuitem label="&ldbCmd.label;"
+                  accesskey="&ldbCmd.accesskey;"
+                  oncommand="toOpenWindowByType('mozapp:layoutdebug',
+                                    'chrome://layoutdebug/content/');"/>
+#endif
+#ifdef XP_MACOSX
+<!-- nsMenuBarX hides these and uses them to build the Application menu. -->
+        <menuitem id="menu_preferences" label="&preferencesCmdMac.label;" key="key_preferencesCmdMac" oncommand="openPreferences(undefined, {origin: 'commandLineLegacy'});"/>
+        <menuitem id="menu_mac_services" label="&servicesMenuMac.label;"/>
+        <menuitem id="menu_mac_hide_app" label="&hideThisAppCmdMac2.label;" key="key_hideThisAppCmdMac"/>
+        <menuitem id="menu_mac_hide_others" label="&hideOtherAppsCmdMac.label;" key="key_hideOtherAppsCmdMac"/>
+        <menuitem id="menu_mac_show_all" label="&showAllAppsCmdMac.label;"/>
+#endif
+        </menupopup>
+      </menu>
+    `;
+  },
+
+  get windowMenu() {
+    if (!AppConstants.platform === "macosx") {
+      return '';
+    }
+
+    return `
+      <menu id="windowMenu"
+            label="&windowMenu.label;"
+            onpopupshowing="macWindowMenuDidShow();"
+            onpopuphidden="macWindowMenuDidHide();"
+            >
+          <menupopup id="windowPopup">
+              <menuitem command="minimizeWindow" key="key_minimizeWindow"/>
+              <menuitem command="zoomWindow"/>
+              <!-- decomment when "BringAllToFront" is implemented
+                  <menuseparator/>
+                  <menuitem label="&bringAllToFront.label;" disabled="true"/> -->
+              <menuseparator id="sep-window-list"/>
+          </menupopup>
+      </menu>
+    `;
+  },
+
+  get helpMenu() {
+    return `
+      ${AppConstants.platform === "win" ? `
+      <menu id="helpMenu"
+            label="&helpMenuWin.label;"
+            accesskey="&helpMenuWin.accesskey;">
+      ` : `
+      <menu id="helpMenu"
+            label="&helpMenu.label;"
+            accesskey="&helpMenu.accesskey;">
+      `}
+        <menupopup id="menu_HelpPopup" onpopupshowing="buildHelpMenu();">
+          <menuitem id="menu_openHelp"
+                    oncommand="openHelpLink('firefox-help')"
+                    onclick="checkForMiddleClick(this, event);"
+                    label="&productHelp2.label;"
+                    accesskey="&productHelp2.accesskey;"
+                    ${AppConstants.platform === "macosx" ? `
+                    key="key_openHelpMac"
+                    ` : ``}
+                    />
+          <menuitem id="menu_openTour"
+                    oncommand="openTourPage();"
+                    label="&helpShowTour2.label;"
+                    accesskey="&helpShowTour2.accesskey;"/>
+          <menuitem id="menu_keyboardShortcuts"
+                    oncommand="openHelpLink('keyboard-shortcuts')"
+                    onclick="checkForMiddleClick(this, event);"
+                    label="&helpKeyboardShortcuts.label;"
+                    accesskey="&helpKeyboardShortcuts.accesskey;"/>
+          <menuitem id="troubleShooting"
+                    accesskey="&helpTroubleshootingInfo.accesskey;"
+                    label="&helpTroubleshootingInfo.label;"
+                    oncommand="openTroubleshootingPage()"
+                    onclick="checkForMiddleClick(this, event);"/>
+          <menuitem id="feedbackPage"
+                    accesskey="&helpFeedbackPage.accesskey;"
+                    label="&helpFeedbackPage.label;"
+                    oncommand="openFeedbackPage()"
+                    onclick="checkForMiddleClick(this, event);"/>
+          <menuitem id="helpSafeMode"
+                    accesskey="&helpSafeMode.accesskey;"
+                    label="&helpSafeMode.label;"
+                    stopaccesskey="&helpSafeMode.stop.accesskey;"
+                    stoplabel="&helpSafeMode.stop.label;"
+                    oncommand="safeModeRestart();"/>
+          <menuitem id="menu_HelpPopup_reportPhishingtoolmenu"
+                    label="&reportDeceptiveSiteMenu.title;"
+                    accesskey="&reportDeceptiveSiteMenu.accesskey;"
+                    observes="reportPhishingBroadcaster"
+                    oncommand="openUILink(gSafeBrowsing.getReportURL('Phish'), event, {triggeringPrincipal: Services.scriptSecurityManager.createNullPrincipal({})});"
+                    onclick="checkForMiddleClick(this, event);"
+                    hidden="true"/>
+          <menuitem id="menu_HelpPopup_reportPhishingErrortoolmenu"
+                    label="&safeb.palm.notdeceptive.label;"
+                    accesskey="&safeb.palm.notdeceptive.accesskey;"
+                    observes="reportPhishingErrorBroadcaster"
+                    oncommand="ReportFalseDeceptiveSite();"
+                    onclick="checkForMiddleClick(this, event);"
+                    hidden="true"/>
+          <menuseparator id="aboutSeparator"/>
+          <menuitem id="aboutName"
+                    accesskey="&aboutProduct2.accesskey;"
+                    label="&aboutProduct2.label;"
+                    oncommand="openAboutDialog();"/>
+        </menupopup>
+      </menu>
+    `;
+  },
+
+  init() {
+    let container = document.getElementById("menubar-items");
+    container.appendChild(MozXULElement.parseXULToFragment(`
+       <menubar id="main-menubar"
+                onpopupshowing="if (event.target.parentNode.parentNode == this &amp;&amp;
+                                    !('@mozilla.org/widget/nativemenuservice;1' in Cc))
+                                  this.setAttribute('openedwithkey',
+                                                    event.target.parentNode.openedWithKey);">
+            ${this.fileMenu}
+            ${this.editMenu}
+            ${this.viewMenu}
+            ${this.historyMenu}
+            ${this.bookmarksMenu}
+            ${this.toolsMenu}
+            ${this.windowMenu}
+            ${this.helpMenu}
+        </menubar>
+    `, `
+      <!DOCTYPE window [
+          <!ENTITY % brandDTD SYSTEM "chrome://branding/locale/brand.dtd" >
+          %brandDTD;
+          <!ENTITY % browserDTD SYSTEM "chrome://browser/locale/browser.dtd" >
+          %browserDTD;
+          <!ENTITY % baseMenuDTD SYSTEM "chrome://browser/locale/baseMenuOverlay.dtd" >
+          %baseMenuDTD;
+          <!ENTITY % charsetDTD SYSTEM "chrome://global/locale/charsetMenu.dtd" >
+          %charsetDTD;
+          <!ENTITY % downloadsDTD SYSTEM "chrome://browser/locale/downloads/downloads.dtd">
+          %downloadsDTD;
+          <!ENTITY % placesDTD SYSTEM "chrome://browser/locale/places/places.dtd">
+          %placesDTD;
+          <!ENTITY % safebrowsingDTD SYSTEM "chrome://browser/locale/safebrowsing/phishing-afterload-warning-message.dtd">
+          %safebrowsingDTD;
+          <!ENTITY % reportphishDTD SYSTEM "chrome://browser/locale/safebrowsing/report-phishing.dtd">
+          %reportphishDTD;
+      ]>
+          `));
+  }
+};
diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -1190,16 +1190,17 @@ var gBrowserInit = {
 
   // Used to check if the new window is still adopting an existing tab as its first tab
   // (e.g. from the WebExtensions internals).
   isAdoptingTab() {
     return !!this.getTabToAdopt();
   },
 
   onBeforeInitialXULLayout() {
+    BrowserMenubar.init();
     // Set a sane starting width/height for all resolutions on new profiles.
     if (Services.prefs.getBoolPref("privacy.resistFingerprinting")) {
       // When the fingerprinting resistance is enabled, making sure that we don't
       // have a maximum window to interfere with generating rounded window dimensions.
       document.documentElement.setAttribute("sizemode", "normal");
     } else if (!document.documentElement.hasAttribute("width")) {
       const TARGET_WIDTH = 1280;
       const TARGET_HEIGHT = 1040;
@@ -1953,16 +1954,19 @@ var gBrowserInit = {
   },
 };
 
 if (AppConstants.platform == "macosx") {
   // nonBrowserWindowStartup(), nonBrowserWindowDelayedStartup(), and
   // nonBrowserWindowShutdown() are used for non-browser windows in
   // macWindow.inc.xul
   gBrowserInit.nonBrowserWindowStartup = function() {
+
+    BrowserMenubar.init();
+
     // Disable inappropriate commands / submenus
     var disabledItems = ["Browser:SavePage",
                          "Browser:SendLink", "cmd_pageSetup", "cmd_print", "cmd_find", "cmd_findAgain",
                          "viewToolbarsMenu", "viewSidebarMenuMenu", "Browser:Reload",
                          "viewFullZoomMenu", "pageStyleMenu", "charsetMenu", "View:PageSource", "View:FullScreen",
                          "viewHistorySidebar", "Browser:AddBookmarkAs", "Browser:BookmarkAllTabs",
                          "View:PageInfo", "History:UndoCloseTab"];
     var element;
@@ -8366,9 +8370,8 @@ var ConfirmationHint = {
     return this._animationBox = document.getElementById("confirmation-hint-checkmark-animation-container");
   },
 
   get _message() {
     delete this._message;
     return this._message = document.getElementById("confirmation-hint-message");
   },
 };
-
diff --git a/browser/base/content/browser.xul b/browser/base/content/browser.xul
--- a/browser/base/content/browser.xul
+++ b/browser/base/content/browser.xul
@@ -633,19 +633,16 @@
              mode="icons"
 #ifdef MENUBAR_CAN_AUTOHIDE
              toolbarname="&menubarCmd.label;"
              accesskey="&menubarCmd.accesskey;"
              autohide="true"
 #endif
              context="toolbar-context-menu">
       <toolbaritem id="menubar-items" align="center">
-# The entire main menubar is placed into browser-menubar.inc, so that it can be
-# shared with other top level windows in macWindow.inc.xul.
-#include browser-menubar.inc
       </toolbaritem>
 
 #ifndef XP_MACOSX
       <hbox class="titlebar-placeholder" type="caption-buttons" ordinal="1000"
             skipintoolbarset="true"/>
 #endif
     </toolbar>
 
diff --git a/browser/base/content/global-scripts.inc b/browser/base/content/global-scripts.inc
--- a/browser/base/content/global-scripts.inc
+++ b/browser/base/content/global-scripts.inc
@@ -12,16 +12,17 @@ Components.utils.import("resource://gre/
 
 for (let script of [
   "chrome://browser/content/browser.js",
 
   "chrome://browser/content/browser-captivePortal.js",
   "chrome://browser/content/browser-compacttheme.js",
   "chrome://browser/content/browser-feeds.js",
   "chrome://browser/content/browser-media.js",
+  "chrome://browser/content/browser-menubar.js",
   "chrome://browser/content/browser-pageActions.js",
   "chrome://browser/content/browser-places.js",
   "chrome://browser/content/browser-plugins.js",
   "chrome://browser/content/browser-sidebar.js",
   "chrome://browser/content/browser-siteIdentity.js",
   "chrome://browser/content/browser-tabsintitlebar.js",
   "chrome://browser/content/browser-trackingprotection.js",
 
diff --git a/browser/base/content/macWindow.inc.xul b/browser/base/content/macWindow.inc.xul
--- a/browser/base/content/macWindow.inc.xul
+++ b/browser/base/content/macWindow.inc.xul
@@ -32,11 +32,9 @@
   addEventListener("unload", function() { gBrowserInit.nonBrowserWindowShutdown() }, false);
 </script>
 
 # All sets except for popupsets (commands, keys, stringbundles and broadcasters)
 # *must* go into the browser-sets.inc file so that they can be shared with
 # browser.xul
 #include browser-sets.inc
 
-# The entire main menubar is placed into browser-menubar.inc, so that it can be
-# shared with browser.xul.
-#include browser-menubar.inc
+<box id="menubar-items"></box>
diff --git a/browser/base/jar.mn b/browser/base/jar.mn
--- a/browser/base/jar.mn
+++ b/browser/base/jar.mn
@@ -39,16 +39,17 @@ browser.jar:
 #ifndef MOZILLA_OFFICIAL
         content/browser/browser-development-helpers.js (content/browser-development-helpers.js)
 #endif
         content/browser/browser-feeds.js              (content/browser-feeds.js)
         content/browser/browser-fullScreenAndPointerLock.js  (content/browser-fullScreenAndPointerLock.js)
         content/browser/browser-fullZoom.js           (content/browser-fullZoom.js)
         content/browser/browser-gestureSupport.js     (content/browser-gestureSupport.js)
         content/browser/browser-media.js              (content/browser-media.js)
+*       content/browser/browser-menubar.js            (content/browser-menubar.js)
         content/browser/browser-pageActions.js        (content/browser-pageActions.js)
         content/browser/browser-places.js             (content/browser-places.js)
         content/browser/browser-plugins.js            (content/browser-plugins.js)
         content/browser/browser-safebrowsing.js       (content/browser-safebrowsing.js)
         content/browser/browser-sidebar.js            (content/browser-sidebar.js)
         content/browser/browser-siteIdentity.js       (content/browser-siteIdentity.js)
         content/browser/browser-sync.js               (content/browser-sync.js)
         content/browser/browser-tabsintitlebar.js       (content/browser-tabsintitlebar.js)
diff --git a/python/mozbuild/mozbuild/preprocessor.py b/python/mozbuild/mozbuild/preprocessor.py
--- a/python/mozbuild/mozbuild/preprocessor.py
+++ b/python/mozbuild/mozbuild/preprocessor.py
@@ -748,17 +748,18 @@ class Preprocessor:
                     args = self.applyFilters(args)
                 if not os.path.isabs(args):
                     args = os.path.join(self.context['DIRECTORY'], args)
                 args = open(args, 'rU')
             except Preprocessor.Error:
                 raise
             except:
                 raise Preprocessor.Error(self, 'FILE_NOT_FOUND', str(args))
-        self.checkLineNumbers = bool(re.search('\.(js|jsm|java|webidl)(?:\.in)?$', args.name))
+        self.checkLineNumbers = False
+        # bool(re.search('\.(js|jsm|java|webidl)(?:\.in)?$', args.name))
         oldFile = self.context['FILE']
         oldLine = self.context['LINE']
         oldDir = self.context['DIRECTORY']
         self.noteLineInfo()
 
         if args.isatty():
             # we're stdin, use '-' and '' for file and dir
             self.context['FILE'] = '-'
