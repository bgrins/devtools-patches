# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  85e213cdc145eb6910ad78994298d763c9577861
Bug 1149346 - Source editor fixes

diff --git a/browser/devtools/sourceeditor/autocomplete.js b/browser/devtools/sourceeditor/autocomplete.js
--- a/browser/devtools/sourceeditor/autocomplete.js
+++ b/browser/devtools/sourceeditor/autocomplete.js
@@ -107,19 +107,40 @@ function initializeAutoCompletion(ctx, o
   function insertSelectedPopupItem() {
     let autocompleteState = autocompleteMap.get(ed);
     if (!popup || !popup.isOpen || !autocompleteState) {
       return;
     }
 
     if (!autocompleteState.suggestionInsertedOnce && popup.selectedItem) {
       autocompleteMap.get(ed).insertingSuggestion = true;
-      let {label, preLabel, text} = popup.selectedItem;
-      let cur = ed.getCursor();
-      ed.replaceText(text.slice(preLabel.length), cur, cur);
+      insertSuggestion(popup.selectedItem);
+      // let {label, preLabel, text} = popup.selectedItem;
+      // // let cur = ed.getCursor();
+
+      // // let textBeforeCursor = ed.getText(cur.line).substring(0, cur.ch);
+      // // let backwardsTextBeforeCursor = textBeforeCursor.split("").reverse().join("");
+      // // let backwardsPreLabel = preLabel.split("").reverse().join("");
+
+      // // console.log(backwardsPreLabel.search(backwardsTextBeforeCursor));
+
+      // // // If there is additional text in the preLabel vs the line, then
+      // // // just insert the entire autocomplete text.  An example:
+      // // // if you type 'a' and select '#about' from the autocomplete menu,
+      // // // then the final text needs to the end up as '#about'.
+      // // if (backwardsPreLabel.search(backwardsTextBeforeCursor) === 0) {
+      // //   ed.replaceText(text, {line: cur.line, ch: 0}, cur);
+      // // } else {
+      // //   ed.replaceText(text.slice(preLabel.length), cur, cur);
+      // // }
+      // // console.log(backwardsTextBeforeCursor, backwardsPreLabel);
+      // // console.log(text.slice(preLabel.length), cur);
+      // // // ed.replaceText(text.slice(preLabel.length), cur, cur);
+      // // debugger;
+      // // // ed.replaceText(text, {line: cur.line, ch: 0}, cur);
     }
 
     popup.hidePopup();
     ed.emit("popup-hidden"); // This event is used in tests.
     return true;
   }
 
   let popup = new AutocompletePopup(win.parent.document, {
@@ -221,16 +242,34 @@ function autoComplete({ ed, cm }) {
     popup.setItems(suggestions);
     popup.openPopup(cursorElement, -1 * left, 0);
     private.suggestionInsertedOnce = false;
     // This event is used in tests.
     ed.emit("after-suggest");
   }).then(null, Cu.reportError);
 }
 
+function insertSuggestion(ed, {label, preLabel, text}) {
+  let cur = ed.getCursor();
+  let textBeforeCursor = ed.getText(cur.line).substring(0, cur.ch);
+  let backwardsTextBeforeCursor = textBeforeCursor.split("").reverse().join("");
+  let backwardsPreLabel = preLabel.split("").reverse().join("");
+
+  console.log(backwardsPreLabel.search(backwardsTextBeforeCursor));
+
+  // If there is additional text in the preLabel vs the line, then
+  // just insert the entire autocomplete text.  An example:
+  // if you type 'a' and select '#about' from the autocomplete menu,
+  // then the final text needs to the end up as '#about'.
+  if (backwardsPreLabel.search(backwardsTextBeforeCursor) === 0) {
+    ed.replaceText(text, {line: cur.line, ch: 0}, cur);
+  } else {
+    ed.replaceText(text.slice(preLabel.length), cur, cur);
+  }
+}
 /**
  * Cycles through provided suggestions by the popup in a top to bottom manner
  * when `reverse` is not true. Opposite otherwise.
  */
 function cycleSuggestions(ed, reverse) {
   let private = autocompleteMap.get(ed);
   let { popup, completer } = private;
   let cur = ed.getCursor();
@@ -245,17 +284,17 @@ function cycleSuggestions(ed, reverse) {
       firstItem = popup.getItemAtIndex(0);
       if (firstItem.label == firstItem.preLabel && popup.itemCount > 1) {
         firstItem = popup.getItemAtIndex(1);
         popup.selectNextItem();
       }
     }
     if (popup.itemCount == 1)
       popup.hidePopup();
-    ed.replaceText(firstItem.text.slice(firstItem.preLabel.length), cur, cur);
+    insertSuggestion(ed, firstItem);
   } else {
     let fromCur = {
       line: cur.line,
       ch  : cur.ch - popup.selectedItem.text.length
     };
     if (reverse)
       popup.selectPreviousItem();
     else
diff --git a/browser/devtools/sourceeditor/editor.js b/browser/devtools/sourceeditor/editor.js
--- a/browser/devtools/sourceeditor/editor.js
+++ b/browser/devtools/sourceeditor/editor.js
@@ -458,18 +458,18 @@ Editor.prototype = {
     }
 
     cm.setOption("indentUnit", indentUnit);
     cm.setOption("indentWithTabs", indentWithTabs);
   },
 
   /**
    * Replaces contents of a text area within the from/to {line, ch}
-   * range. If neither from nor to arguments are provided works
-   * exactly like setText. If only from object is provided, inserts
+   * range. If neither `from` nor `to` arguments are provided works
+   * exactly like setText. If only `from` object is provided, inserts
    * text at that point, *overwriting* as many characters as needed.
    */
   replaceText: function (value, from, to) {
     let cm = editors.get(this);
 
     if (!from) {
       this.setText(value);
       return;
diff --git a/browser/devtools/sourceeditor/test/browser_editor_autocomplete_events.js b/browser/devtools/sourceeditor/test/browser_editor_autocomplete_events.js
--- a/browser/devtools/sourceeditor/test/browser_editor_autocomplete_events.js
+++ b/browser/devtools/sourceeditor/test/browser_editor_autocomplete_events.js
@@ -1,17 +1,17 @@
 /* vim: set ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
 const {InspectorFront} = require("devtools/server/actors/inspector");
 const AUTOCOMPLETION_PREF = "devtools.editor.autocomplete";
-const TEST_URI = "data:text/html;charset=UTF-8,<html><body><b1></b1><b2></b2><body></html>";
+const TEST_URI = "data:text/html;charset=UTF-8,<html><body><b1></b1><div id='b2'></div><body></html>";
 
 add_task(function*() {
   yield promiseTab(TEST_URI);
   yield runTests();
 });
 
 function* runTests() {
   let target = devtools.TargetFactory.forTab(gBrowser.selectedTab);
@@ -52,11 +52,11 @@ function* testMouse(ed, win) {
 
   let popupOpened = ed.getAutocompletionPopup().once("popup-opened");
 
   let autocompleteKey = Editor.keyFor("autocompletion", { noaccel: true }).toUpperCase();
   EventUtils.synthesizeKey("VK_" + autocompleteKey, { ctrlKey: true }, win);
 
   info ("Waiting for popup to be opened");
   yield popupOpened;
-  ed.getAutocompletionPopup()._list.firstChild.click();
-  is (ed.getText(), "b1", "Editor text has been updated");
+  ed.getAutocompletionPopup()._list.children[2].click();
+  is (ed.getText(), "#b2", "Editor text has been updated");
 }
