# vim: se ft=diff :
# HG changeset patch
# User Tom Tromey <tromey@mozilla.com>
# Date 2015-09-11 12:53
Bug 984880 - make edits to keyframe rules affect authored CSS text

diff --git a/toolkit/devtools/server/actors/styles.js b/toolkit/devtools/server/actors/styles.js
index e843f4b..2a8a2e4 100644
--- a/toolkit/devtools/server/actors/styles.js
+++ b/toolkit/devtools/server/actors/styles.js
@@ -1169,17 +1169,19 @@ let StyleRuleActor = protocol.ActorClass({
     }
   },
 
   /**
    * Return the authored form of a rule's text.  This will include
    * invalid and otherwise ignored properties.
    */
   getAuthoredCssText: function*() {
-    if (this.type !== Ci.nsIDOMCSSRule.STYLE_RULE || !this._parentSheet) {
+    if (!this._parentSheet ||
+        (this.type !== Ci.nsIDOMCSSRule.STYLE_RULE &&
+         this.type !== Ci.nsIDOMCSSRule.KEYFRAME_RULE)) {
       return "";
     }
 
     if (typeof this.authoredText === "string") {
       return this.authoredText;
     }
 
     let parentStyleSheet = this.pageStyle._sheetRef(this._parentSheet);
@@ -1194,30 +1196,33 @@ let StyleRuleActor = protocol.ActorClass({
   /**
    * Set the contents of the rule.  This rewrites the rule in the
    * stylesheet and causes it to be re-evaluated.
    *
    * @param {String} newText the new text of the rule
    * @returns the rule with updated properties
    */
   setRuleText: method(Task.async(function*(newText) {
-    if (this.type === Ci.nsIDOMCSSRule.STYLE_RULE &&
-        this._parentSheet) {
-      let parentStyleSheet = this.pageStyle._sheetRef(this._parentSheet);
-      let {str: cssText} = yield parentStyleSheet.getText();
-
-      let {offset, text} = getRuleText(cssText, this.line, this.column);
-      cssText = cssText.substring(0, offset) + newText +
-        cssText.substring(offset + text.length);
-
-      this.authoredText = newText;
-      yield parentStyleSheet.update(cssText, false, UPDATE_PRESERVING_RULES);
-
-      return this;
+    if (!this._parentSheet ||
+        (this.type !== Ci.nsIDOMCSSRule.STYLE_RULE &&
+         this.type !== Ci.nsIDOMCSSRule.KEYFRAME_RULE)) {
+      throw new Error("invalid call to setRuleText");
     }
+
+    let parentStyleSheet = this.pageStyle._sheetRef(this._parentSheet);
+    let {str: cssText} = yield parentStyleSheet.getText();
+
+    let {offset, text} = getRuleText(cssText, this.line, this.column);
+    cssText = cssText.substring(0, offset) + newText +
+      cssText.substring(offset + text.length);
+
+    this.authoredText = newText;
+    yield parentStyleSheet.update(cssText, false, UPDATE_PRESERVING_RULES);
+
+    return this;
   }), {
     request: { modification: Arg(0, "string") },
     response: { rule: RetVal("domstylerule") }
   }),
 
   /**
    * Modify a rule's properties. Passed an array of modifications:
    * {
