# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  d4ee0d5f7e15415df7e197e73c969b8773448168

diff --git a/toolkit/components/addoncompat/RemoteAddonsParent.jsm b/toolkit/components/addoncompat/RemoteAddonsParent.jsm
--- a/toolkit/components/addoncompat/RemoteAddonsParent.jsm
+++ b/toolkit/components/addoncompat/RemoteAddonsParent.jsm
@@ -436,33 +436,35 @@ var EventTargetParent = {
         return target;
       } else if (target.localName == "tab") {
         return target.linkedBrowser;
       }
 
       // Check if |target| is somewhere on the patch from the
       // <tabbrowser> up to the root element.
       let window = target.ownerGlobal;
-      if (window && window.gBrowser && target.contains(window.gBrowser.container)) {
+      dump("Looking at target " + target + "\n")
+      if (window && window.gBrowser && (target === window.gBrowser || target.contains(window.gBrowser.container))) {
         return window;
       }
     }
 
     return null;
   },
 
   // When a given event fires in the child, we fire it on the
   // <browser> element and the window since those are the two possible
   // results of redirectEventTarget.
   getTargets(browser) {
     let window = browser.ownerGlobal;
     return [browser, window];
   },
 
   addEventListener(addon, target, type, listener, useCapture, wantsUntrusted, delayedWarning) {
+    dump("EventTargetParent addEventListener " + type + "\n");
     let newTarget = this.redirectEventTarget(target);
     if (!newTarget) {
       return;
     }
 
     useCapture = useCapture || false;
     wantsUntrusted = wantsUntrusted || false;
 
diff --git a/toolkit/components/addoncompat/multiprocessShims.js b/toolkit/components/addoncompat/multiprocessShims.js
--- a/toolkit/components/addoncompat/multiprocessShims.js
+++ b/toolkit/components/addoncompat/multiprocessShims.js
@@ -113,25 +113,29 @@ AddonInterpositionService.prototype = {
     }
 
     if (target instanceof Ci.nsIDOMXULElement) {
       if (target.localName == "browser" && target.isRemoteBrowser) {
         return "RemoteBrowserElement";
       }
     }
 
-    if (target.ownerGlobal && target === target.ownerGlobal.gBrowser) {
+    dump("LOOKING AT: " + target + "\n");
+    if ((target.ownerGlobal && target === target.ownerGlobal.gBrowser) || (target instanceof Ci.nsIDOMXULElement && target.localName == "tabbrowser")) {
+    dump("found TabBrowserElement " + target.localName + " \n")
         return "TabBrowserElement";
     }
 
     if (target instanceof Ci.nsIDOMChromeWindow && target.gMultiProcessBrowser) {
       return "ChromeWindow";
     }
 
     if (target instanceof Ci.nsIDOMEventTarget) {
+          dump("found EventTarget " + target.localName + " \n")
+
       return "EventTarget";
     }
 
     return "generic";
   },
 
   interposeProperty(addon, target, iid, prop) {
     let interp;
