# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  a849434a2feff258a148cf4220c5ff50ab9f9c8d
Temporary workaround for focus in browser.xhtml

diff --git a/browser/base/content/test/general/browser_tabfocus.js b/browser/base/content/test/general/browser_tabfocus.js
--- a/browser/base/content/test/general/browser_tabfocus.js
+++ b/browser/base/content/test/general/browser_tabfocus.js
@@ -448,17 +448,17 @@ function compareFocusResults() {
        _expectedElement, currentTestName + " getFocusedElementForWindow");
     is(focusedWindow.value, matchWindow, currentTestName + " getFocusedElementForWindow frame");
     is(matchWindow.document.hasFocus(), true, currentTestName + " hasFocus");
     var expectedActive = _expectedElement;
     if (!expectedActive) {
       // Documents that have a XUL document element currently have a different
       // active element behavior than regular HTML documents. This test will
       // need to be updated when bug 1492582 is fixed.
-      expectedActive = matchWindow.document.documentElement instanceof XULElement ?
+      expectedActive = matchWindow.document.documentElement.id == "main-window" ?
                        "main-window" : getId(matchWindow.document.body);
     }
     is(getId(matchWindow.document.activeElement), expectedActive, currentTestName + " activeElement");
 
     currentPromiseResolver();
     currentPromiseResolver = null;
   });
 }
diff --git a/dom/base/Document.cpp b/dom/base/Document.cpp
--- a/dom/base/Document.cpp
+++ b/dom/base/Document.cpp
@@ -4987,16 +4987,25 @@ Element* Document::GetActiveElement() {
   // Get the focused element.
   Element* focusedElement = GetRetargetedFocusedElement();
   if (focusedElement) {
     return focusedElement;
   }
 
   // No focused element anywhere in this document.  Try to get the BODY.
   if (IsHTMLOrXHTML()) {
+
+    // XXX: How do we actually want to handle this?
+    if (GetDocumentURI()->GetSpecOrDefault().EqualsLiteral("chrome://browser/content/browser.xhtml")) {
+      Element* docElement = GetDocumentElement();
+      if (docElement) {
+        return docElement;
+      }
+    }
+
     Element* bodyElement = AsHTMLDocument()->GetBody();
     if (bodyElement) {
       return bodyElement;
     }
     // Special case to handle the transition to browser.xhtml where there is
     // currently not a body element, but we need to match the XUL behavior.
     // This should be removed when bug 1492582 is resolved.
     if (nsContentUtils::IsChromeDoc(this)) {
