# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  a559b84032a8d570a64f0bb67ce917c9d696d4fc

diff --git a/layout/reftests/moz.build b/layout/reftests/moz.build
--- a/layout/reftests/moz.build
+++ b/layout/reftests/moz.build
@@ -50,16 +50,18 @@ TEST_HARNESS_FILES.testing.mochitest.tes
 ]
 
 TEST_HARNESS_FILES.testing.mochitest.tests.fonts += [
     'fonts/Ahem.ttf',
 ]
 
 REFTEST_MANIFESTS += ['reftest.list']
 
+# REFTEST_CHROME_MANIFESTS += ['reftest-chrome.list']
+
 with Files('abs-pos/**'):
     BUG_COMPONENT = ('Core', 'Layout: Positioned')
 with Files('async-scrolling/**'):
     BUG_COMPONENT = ('Core', 'Layout')
 with Files('backgrounds/**'):
     BUG_COMPONENT = ('Core', 'Layout')
 with Files('bidi/**'):
     BUG_COMPONENT = ('Core', 'Layout: Text and Fonts')
diff --git a/layout/tools/reftest/mach_commands.py b/layout/tools/reftest/mach_commands.py
--- a/layout/tools/reftest/mach_commands.py
+++ b/layout/tools/reftest/mach_commands.py
@@ -59,33 +59,38 @@ class ReftestRunner(MozbuildObject):
         if not os.path.isdir(tests):
             os.symlink(self.topsrcdir, tests)
 
     def run_desktop_test(self, **kwargs):
         """Runs a reftest, in desktop Firefox."""
         import runreftest
 
         args = Namespace(**kwargs)
-        if args.suite not in ('reftest', 'crashtest', 'jstestbrowser'):
+        if args.suite not in ('reftest', 'reftest-chrome', 'crashtest', 'jstestbrowser'):
             raise Exception('None or unrecognized reftest suite type.')
 
         default_manifest = {
             "reftest": (self.topsrcdir, "layout", "reftests", "reftest.list"),
+            "reftest-chrome": (self.topsrcdir, "layout", "reftests", "reftest-chrome.list"),
             "crashtest": (self.topsrcdir, "testing", "crashtest", "crashtests.list"),
             "jstestbrowser": (self.topobjdir, "dist", "test-stage", "jsreftest", "tests",
                               "jstests.list")
         }
 
+        if args.suite == "reftest-chrome":
+            args.e10s = False
+
         args.extraProfileFiles.append(os.path.join(self.topobjdir, "dist", "plugins"))
         args.symbolsPath = os.path.join(self.topobjdir, "crashreporter-symbols")
         args.sandboxReadWhitelist.extend([self.topsrcdir, self.topobjdir])
 
         if not args.tests:
             args.tests = [os.path.join(*default_manifest[args.suite])]
 
+        print "TESTS: {}".format(args)
         if args.suite == "jstestbrowser":
             args.extraProfileFiles.append(os.path.join(self.topobjdir, "dist",
                                                        "test-stage", "jsreftest",
                                                        "tests", "user.js"))
 
         self.log_manager.enable_unstructured()
         try:
             rv = runreftest.run_test_harness(parser, args)
@@ -202,17 +207,18 @@ def get_parser():
 
 @CommandProvider
 class MachCommands(MachCommandBase):
     @Command('reftest',
              category='testing',
              description='Run reftests (layout and graphics correctness).',
              parser=get_parser)
     def run_reftest(self, **kwargs):
-        kwargs["suite"] = "reftest"
+        if kwargs["suite"] != "reftest-chrome":
+            kwargs["suite"] = "reftest"
         return self._run_reftest(**kwargs)
 
     @Command('jstestbrowser',
              category='testing',
              description='Run js/src/tests in the browser.',
              parser=get_parser)
     def run_jstestbrowser(self, **kwargs):
         self._mach_context.commands.dispatch("build",
@@ -225,16 +231,20 @@ class MachCommands(MachCommandBase):
              category='testing',
              description='Run crashtests (Check if crashes on a page).',
              parser=get_parser)
     def run_crashtest(self, **kwargs):
         kwargs["suite"] = "crashtest"
         return self._run_reftest(**kwargs)
 
     def _run_reftest(self, **kwargs):
+        if kwargs["suite"] == "reftest-chrome" and conditions.is_android(self):
+            print("Not running reftest-chrome on android")
+            return
+
         kwargs["topsrcdir"] = self.topsrcdir
         process_test_objects(kwargs)
         reftest = self._spawn(ReftestRunner)
         # Unstructured logging must be enabled prior to calling
         # adb which uses an unstructured logger in its constructor.
         reftest.log_manager.enable_unstructured()
         if conditions.is_android(self):
             from mozrunner.devices.android_device import verify_android_device
diff --git a/layout/tools/reftest/reftestcommandline.py b/layout/tools/reftest/reftestcommandline.py
--- a/layout/tools/reftest/reftestcommandline.py
+++ b/layout/tools/reftest/reftestcommandline.py
@@ -210,17 +210,17 @@ class ReftestArgumentsParser(argparse.Ar
                           help="Path to the reftest extension")
 
         self.add_argument("--special-powers-extension-path",
                           action="store",
                           dest="specialPowersExtensionPath",
                           help="Path to the special powers extension")
 
         self.add_argument("--suite",
-                          choices=["reftest", "crashtest", "jstestbrowser"],
+                          choices=["reftest", "reftest-chrome", "crashtest", "jstestbrowser"],
                           default=None,
                           help=argparse.SUPPRESS)
 
         self.add_argument("--cleanup-crashes",
                           action="store_true",
                           dest="cleanupCrashes",
                           default=False,
                           help="Delete pending crash reports before running tests.")
@@ -262,16 +262,17 @@ class ReftestArgumentsParser(argparse.Ar
             return moznetwork.get_ip()
         else:
             self.error(
                 "ERROR: you must specify a --remote-webserver=<ip address>\n")
 
     def set_default_suite(self, options):
         manifests = OrderedDict([("reftest.list", "reftest"),
                                  ("crashtests.list", "crashtest"),
+                                 ("reftest-chrome.list", "reftest-chrome"),
                                  ("jstests.list", "jstestbrowser")])
 
         for test_path in options.tests:
             file_name = os.path.basename(test_path)
             if file_name in manifests:
                 options.suite = manifests[file_name]
                 return
 
diff --git a/layout/tools/reftest/runreftest.py b/layout/tools/reftest/runreftest.py
--- a/layout/tools/reftest/runreftest.py
+++ b/layout/tools/reftest/runreftest.py
@@ -154,16 +154,17 @@ class ReftestThread(threading.Thread):
 
             if summaryHeadRegex.search(line) is None:
                 yield line
 
 
 class ReftestResolver(object):
     def defaultManifest(self, suite):
         return {"reftest": "reftest.list",
+                "reftest-chrome": "reftest-chrome.list",
                 "crashtest": "crashtests.list",
                 "jstestbrowser": "jstests.list"}[suite]
 
     def directoryManifest(self, suite, path):
         return os.path.join(path, self.defaultManifest(suite))
 
     def findManifest(self, suite, test_file, subdirs=True):
         """Return a tuple of (manifest-path, filter-string) for running test_file.
diff --git a/python/mozbuild/mozbuild/action/test_archive.py b/python/mozbuild/mozbuild/action/test_archive.py
--- a/python/mozbuild/mozbuild/action/test_archive.py
+++ b/python/mozbuild/mozbuild/action/test_archive.py
@@ -416,16 +416,17 @@ ARCHIVE_FILES = {
             'pattern': 'mozinfo.json',
             'dest': 'reftest',
         },
         {
             'source': buildconfig.topsrcdir,
             'base': '',
             'manifests': [
                 'layout/reftests/reftest.list',
+                'layout/reftests/reftest-chrome.list',
                 'testing/crashtest/crashtests.list',
             ],
             'dest': 'reftest/tests',
         },
         {
             'source': buildconfig.topobjdir,
             'base': 'dist/xpi-stage',
             'pattern': 'reftest/**',
diff --git a/python/mozbuild/mozbuild/frontend/context.py b/python/mozbuild/mozbuild/frontend/context.py
--- a/python/mozbuild/mozbuild/frontend/context.py
+++ b/python/mozbuild/mozbuild/frontend/context.py
@@ -1876,16 +1876,22 @@ VARIABLES = {
         """),
 
     'REFTEST_MANIFESTS': (ReftestManifestList, list,
         """List of manifest files defining reftests.
 
         These are commonly named reftest.list.
         """),
 
+    'REFTEST_CHROME_MANIFESTS': (ReftestManifestList, list,
+        """List of manifest files defining chrome reftests.
+
+        These are commonly named reftest-chrome.list.
+        """),
+
     'CRASHTEST_MANIFESTS': (ReftestManifestList, list,
         """List of manifest files defining crashtests.
 
         These are commonly named crashtests.list.
         """),
 
     'WEBRTC_SIGNALLING_TEST_MANIFESTS': (ManifestparserManifestList, list,
         """List of manifest files defining WebRTC signalling tests.
diff --git a/python/mozbuild/mozbuild/frontend/emitter.py b/python/mozbuild/mozbuild/frontend/emitter.py
--- a/python/mozbuild/mozbuild/frontend/emitter.py
+++ b/python/mozbuild/mozbuild/frontend/emitter.py
@@ -135,16 +135,17 @@ class TreeMetadataEmitter(LoggingMixin):
         self._crate_directories = dict()
         self._idls = defaultdict(set)
 
         # Keep track of external paths (third party build systems), starting
         # from what we run a subconfigure in. We'll eliminate some directories
         # as we traverse them with moz.build (e.g. js/src).
         subconfigures = os.path.join(self.config.topobjdir, 'subconfigures')
         paths = []
+        print("About to read")
         if os.path.exists(subconfigures):
             paths = open(subconfigures).read().splitlines()
         self._external_paths = set(mozpath.normsep(d) for d in paths)
 
         self._emitter_time = 0.0
         self._object_count = 0
         self._test_files_converter = SupportFilesConverter()
 
@@ -1447,16 +1448,17 @@ class TreeMetadataEmitter(LoggingMixin):
     def _process_test_manifests(self, context):
         for prefix, info in TEST_MANIFESTS.items():
             for path, manifest in context.get('%s_MANIFESTS' % prefix, []):
                 for obj in self._process_test_manifest(context, info, path, manifest):
                     yield obj
 
         for flavor in REFTEST_FLAVORS:
             for path, manifest in context.get('%s_MANIFESTS' % flavor.upper(), []):
+                print ("PRocesssing {} {} {}").format(path, manifest, flavor)
                 for obj in self._process_reftest_manifest(context, flavor, path, manifest):
                     yield obj
 
     def _process_test_manifest(self, context, info, manifest_path, mpmanifest):
         flavor, install_root, install_subdir, package_tests = info
 
         path = manifest_path.full_path
         manifest_dir = mozpath.dirname(path)
diff --git a/python/mozbuild/mozbuild/frontend/reader.py b/python/mozbuild/mozbuild/frontend/reader.py
--- a/python/mozbuild/mozbuild/frontend/reader.py
+++ b/python/mozbuild/mozbuild/frontend/reader.py
@@ -44,16 +44,18 @@ from mozbuild.util import (
 )
 
 from mozbuild.testing import (
     TEST_MANIFESTS,
     REFTEST_FLAVORS,
     WEB_PLATFORM_TESTS_FLAVORS,
 )
 
+print(REFTEST_FLAVORS)
+
 from mozbuild.backend.configenvironment import ConfigEnvironment
 
 from mozpack.files import FileFinder
 import mozpack.path as mozpath
 
 from .sandbox import (
     default_finder,
     SandboxError,
@@ -235,16 +237,17 @@ class MozbuildSandbox(Sandbox):
 
         Paths will be rejected if they do not fall under topsrcdir or one of
         the external roots.
         """
 
         # realpath() is needed for true security. But, this isn't for security
         # protection, so it is omitted.
         if not is_read_allowed(path, self._context.config):
+            print("ERR")
             raise SandboxLoadError(self._context.source_stack,
                 sys.exc_info()[2], illegal_path=path)
 
         Sandbox.exec_file(self, path)
 
     def _export(self, varname):
         """Export the variable to all subdirectories of the current path."""
 
@@ -1007,16 +1010,17 @@ class BuildReader(object):
             mozbuild_paths = chain(*self._find_relevant_mozbuilds([path]).values())
         else:
             mozbuild_paths = self.all_mozbuild_paths()
 
         for p in mozbuild_paths:
             assignments[:] = []
             full = os.path.join(self.config.topsrcdir, p)
 
+            print("Path at", p, full)
             with open(full, 'rb') as fh:
                 source = fh.read()
 
             tree = ast.parse(source, full)
             Visitor().visit(tree)
 
             for name, key, value in assignments:
                 yield p, name, key, value
@@ -1068,21 +1072,21 @@ class BuildReader(object):
                 sys.exc_info()[2], validation_error=ve)
 
         except Exception as e:
             raise BuildReaderError(list(self._execution_stack),
                 sys.exc_info()[2], other_error=e)
 
     def _read_mozbuild(self, path, config, descend, metadata):
         path = mozpath.normpath(path)
-        log(self._log, logging.DEBUG, 'read_mozbuild', {'path': path},
+        print('read_mozbuild', {'path': path},
             'Reading file: {path}')
 
         if path in self._read_files:
-            log(self._log, logging.WARNING, 'read_already', {'path': path},
+            print('read_already', {'path': path},
                 'File already read. Skipping: {path}')
             return
 
         self._read_files.add(path)
 
         time_start = time.time()
 
         topobjdir = config.topobjdir
@@ -1101,19 +1105,22 @@ class BuildReader(object):
         if mozpath.dirname(relpath) == 'js/src' and \
                 not config.substs.get('JS_STANDALONE'):
             config = ConfigEnvironment.from_config_status(
                 mozpath.join(topobjdir, reldir, 'config.status'))
             config.topobjdir = topobjdir
             config.external_source_dir = None
 
         context = Context(VARIABLES, config, self.finder)
+        print("1109")
         sandbox = MozbuildSandbox(context, metadata=metadata,
                                   finder=self.finder)
+        print("1109.2")
         sandbox.exec_file(path)
+        print("1113")
         self._execution_time += time.time() - time_start
         self._file_count += len(context.all_paths)
 
         # Yield main context before doing any processing. This gives immediate
         # consumers an opportunity to change state before our remaining
         # processing is performed.
         yield context
 
@@ -1392,16 +1399,18 @@ class BuildReader(object):
         # This names the context keys that will end up emitting a test
         # manifest.
         test_manifest_contexts = set(
             ['%s_MANIFESTS' % key for key in TEST_MANIFESTS] +
             ['%s_MANIFESTS' % flavor.upper() for flavor in REFTEST_FLAVORS] +
             ['%s_MANIFESTS' % flavor.upper().replace('-', '_') for flavor in WEB_PLATFORM_TESTS_FLAVORS]
         )
 
+        print("Contexts {}").format(test_manifest_contexts)
+
         result_context = Files(Context())
         for ctx in ctxs:
             for key in ctx:
                 if key not in test_manifest_contexts:
                     continue
                 for paths, obj in ctx[key]:
                     if isinstance(paths, tuple):
                         path, tests_root = paths
diff --git a/python/mozbuild/mozbuild/test/frontend/test_emitter.py b/python/mozbuild/mozbuild/test/frontend/test_emitter.py
--- a/python/mozbuild/mozbuild/test/frontend/test_emitter.py
+++ b/python/mozbuild/mozbuild/test/frontend/test_emitter.py
@@ -905,16 +905,20 @@ class TestEmitterBasic(unittest.TestCase
                     'head1': False,
                     'head2': False,
                 },
             },
             'reftest.list': {
                 'flavor': 'reftest',
                 'installs': {},
             },
+            'reftest-chrome.list': {
+                'flavor': 'reftest',
+                'installs': {},
+            },
             'crashtest.list': {
                 'flavor': 'crashtest',
                 'installs': {},
             },
             'python.ini': {
                 'flavor': 'python',
                 'installs': {
                     'python.ini': False,
diff --git a/python/mozbuild/mozbuild/testing.py b/python/mozbuild/mozbuild/testing.py
--- a/python/mozbuild/mozbuild/testing.py
+++ b/python/mozbuild/mozbuild/testing.py
@@ -58,17 +58,17 @@ TEST_MANIFESTS = dict(
 
     MOCHITEST=('mochitest', 'testing/mochitest', 'tests', True),
     MOCHITEST_CHROME=('chrome', 'testing/mochitest', 'chrome', True),
     WEBRTC_SIGNALLING_TEST=('steeplechase', 'steeplechase', '.', True),
     XPCSHELL_TESTS=('xpcshell', 'xpcshell', '.', True),
 )
 
 # Reftests have their own manifest format and are processed separately.
-REFTEST_FLAVORS = ('crashtest', 'reftest')
+REFTEST_FLAVORS = ('crashtest', 'reftest', 'reftest-chrome',)
 
 # Web platform tests have their own manifest format and are processed separately.
 WEB_PLATFORM_TESTS_FLAVORS = ('web-platform-tests',)
 
 def all_test_flavors():
     return ([v[0] for v in TEST_MANIFESTS.values()] +
             list(REFTEST_FLAVORS) +
             list(WEB_PLATFORM_TESTS_FLAVORS))
diff --git a/testing/mozharness/configs/unittests/mac_unittest.py b/testing/mozharness/configs/unittests/mac_unittest.py
--- a/testing/mozharness/configs/unittests/mac_unittest.py
+++ b/testing/mozharness/configs/unittests/mac_unittest.py
@@ -156,16 +156,20 @@ config = {
             'options':["--extra-profile-file=tests/jsreftest/tests/user.js",
                        "--suite=jstestbrowser"],
             'tests': ["tests/jsreftest/tests/jstests.list"]
         },
         "reftest": {
             'options': ["--suite=reftest"],
             'tests': ["tests/reftest/tests/layout/reftests/reftest.list"]
         },
+        "reftest-chrome": {
+            'options': ["--suite=reftest-chrome"],
+            'tests': ["tests/reftest/tests/layout/reftests/reftest-chrome.list"]
+        },
     },
     "all_xpcshell_suites": {
         "xpcshell": {
             'options': ["--xpcshell=%(abs_app_dir)s/" + XPCSHELL_NAME,
                         "--manifest=tests/xpcshell/tests/xpcshell.ini"],
             'tests': []
         },
         "xpcshell-addons": {
diff --git a/testing/mozharness/mozharness/mozilla/testing/per_test_base.py b/testing/mozharness/mozharness/mozilla/testing/per_test_base.py
--- a/testing/mozharness/mozharness/mozilla/testing/per_test_base.py
+++ b/testing/mozharness/mozharness/mozilla/testing/per_test_base.py
@@ -70,16 +70,18 @@ class SingleTestMixin(FetchesMixin):
                 self.info("Per-test run updated with manifest %s (%d active, %d skipped)" %
                           (path, len(new_by_path), len(disabled)))
 
         ref_manifests = [
             (os.path.join(dirs['abs_reftest_dir'], 'tests', 'layout',
                           'reftests', 'reftest.list'), 'reftest', 'gpu'),  # gpu
             (os.path.join(dirs['abs_reftest_dir'], 'tests', 'testing',
                           'crashtest', 'crashtests.list'), 'crashtest', None),
+            (os.path.join(dirs['abs_reftest_dir'], 'tests', 'testing',
+                          'reftests', 'reftest-chrome.list'), 'crashtest', None),
         ]
         sys.path.append(dirs['abs_reftest_dir'])
         import manifest
         self.reftest_test_dir = os.path.join(dirs['abs_reftest_dir'], 'tests')
         for (path, suite, subsuite) in ref_manifests:
             if os.path.exists(path):
                 man = manifest.ReftestManifest()
                 man.load(path)
diff --git a/testing/testsuite-targets.mk b/testing/testsuite-targets.mk
--- a/testing/testsuite-targets.mk
+++ b/testing/testsuite-targets.mk
@@ -47,16 +47,21 @@ OOP_CONTENT = --setpref=layers.async-pan
 GPU_RENDERING = --setpref=layers.acceleration.force-enabled=true
 endif #}
 
 reftest: TEST_PATH?=layout/reftests/reftest.list
 reftest:
 	$(call RUN_REFTEST,'$(topsrcdir)/$(TEST_PATH)')
 	$(CHECK_TEST_ERROR)
 
+reftest-chrome: TEST_PATH?=layout/reftests/reftest-chrome.list
+reftest-chrome:
+	$(call RUN_REFTEST,'$(topsrcdir)/$(TEST_PATH)')
+	$(CHECK_TEST_ERROR)
+
 reftest-remote: TEST_PATH?=layout/reftests/reftest.list
 reftest-remote:
 	@if [ '${MOZ_HOST_BIN}' = '' ]; then \
         echo 'environment variable MOZ_HOST_BIN must be set to a directory containing host xpcshell'; \
     elif [ ! -d ${MOZ_HOST_BIN} ]; then \
         echo 'MOZ_HOST_BIN does not specify a directory'; \
     elif [ ! -f ${MOZ_HOST_BIN}/xpcshell ]; then \
         echo 'xpcshell not found in MOZ_HOST_BIN'; \
diff --git a/toolkit/themes/osx/reftests/reftest.list b/toolkit/themes/osx/reftests/reftest-chrome.list
rename from toolkit/themes/osx/reftests/reftest.list
rename to toolkit/themes/osx/reftests/reftest-chrome.list
