# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  f48c70d196a3075f87815038b905f867f6e04d12
logging actor cleanup

diff --git a/devtools/client/framework/target.js b/devtools/client/framework/target.js
--- a/devtools/client/framework/target.js
+++ b/devtools/client/framework/target.js
@@ -699,18 +699,16 @@ TabWebProgressListener.prototype = {
     this.target._navWindow = null;
     this.target = null;
   }
 };
 
 function WorkerTarget(workerClient) {
   EventEmitter.decorate(this);
   this._workerClient = workerClient;
-  console.trace();
-  console.log("WorkerTarget created in target.js", this._workerClient);
 }
 
 /**
  * A WorkerTarget represents a worker. Unlike TabTarget, which can represent
  * either a local or remote tab, WorkerTarget always represents a remote worker.
  * Moreover, unlike TabTarget, which is constructed with a placeholder object
  * for remote tabs (from which a TabClient can then be lazily obtained),
  * WorkerTarget is constructed with a WorkerClient directly.
@@ -738,17 +736,16 @@ WorkerTarget.prototype = {
     return this._workerClient.url;
   },
 
   get isWorkerTarget() {
     return true;
   },
 
   get form() {
-    console.log("get form()", this._workerClient);
     return {
       from: this._workerClient.actor,
       consoleActor: this._workerClient.webConsoleActor,
       type: "attached",
       isFrozen: this._workerClient.isFrozen,
       url: this._workerClient.url
     };
   },
@@ -767,11 +764,10 @@ WorkerTarget.prototype = {
     return false;
   },
 
   getTrait: function() {
     return undefined;
   },
 
   makeRemote: function() {
-    console.log("makeRemote()", this);
   }
 };
diff --git a/devtools/server/actors/common.js b/devtools/server/actors/common.js
--- a/devtools/server/actors/common.js
+++ b/devtools/server/actors/common.js
@@ -237,16 +237,20 @@ ActorPool.prototype = {
       }
       aActor.actorID = this.conn.allocID(prefix || undefined);
     }
 
     if (aActor.registeredPool) {
       aActor.registeredPool.removeActor(aActor);
     }
     aActor.registeredPool = this;
+    if (isWorker) {
+    dump("addActor actor!" + aActor.actorID + "\n\n\n");
+      
+    }
 
     this._actors[aActor.actorID] = aActor;
     if (aActor.disconnect) {
       this._cleanups[aActor.actorID] = aActor;
     }
   },
 
   get: function AP_get(aActorID) {
@@ -263,16 +267,20 @@ ActorPool.prototype = {
   isEmpty: function AP_isEmpty() {
     return Object.keys(this._actors).length == 0;
   },
 
   /**
    * Remove an actor from the actor pool.
    */
   removeActor: function AP_remove(aActor) {
+    if (isWorker) {
+    dump("removeActor actor!" + aActor.actorID + "\n\n\n");
+
+    }
     delete this._actors[aActor.actorID];
     delete this._cleanups[aActor.actorID];
   },
 
   /**
    * Match the api expected by the protocol library.
    */
   unmanage: function(aActor) {
diff --git a/devtools/server/actors/webconsole.js b/devtools/server/actors/webconsole.js
--- a/devtools/server/actors/webconsole.js
+++ b/devtools/server/actors/webconsole.js
@@ -321,16 +321,18 @@ WebConsoleActor.prototype =
   _findProtoChain: ThreadActor.prototype._findProtoChain,
   _removeFromProtoChain: ThreadActor.prototype._removeFromProtoChain,
 
   /**
    * Destroy the current WebConsoleActor instance.
    */
   disconnect: function WCA_disconnect()
   {
+    console.log("DISCONNECTING!!!");
+    console.trace();
     if (this.consoleServiceListener) {
       this.consoleServiceListener.destroy();
       this.consoleServiceListener = null;
     }
     if (this.consoleAPIListener) {
       this.consoleAPIListener.destroy();
       this.consoleAPIListener = null;
     }
