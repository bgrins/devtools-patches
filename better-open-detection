# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  89ead81478c3fc8833584256929156f149b73566

diff --git a/toolkit/content/widgets/menu.js b/toolkit/content/widgets/menu.js
--- a/toolkit/content/widgets/menu.js
+++ b/toolkit/content/widgets/menu.js
@@ -1,31 +1,65 @@
+
 {
 /* globals MozBaseText */
+const {XPCOMUtils} = ChromeUtils.import("resource://gre/modules/XPCOMUtils.jsm");
 
-// const openPopups = new Set();
-// window.addEventListener("popupshowing", (e) => {
-//   if (e.originalTarget.ownerDocument != document) {
-//     return;
-//   }
-//   openPopups.add(e.originalTarget);
-//   for (let menuitem of e.originalTarget.querySelectorAll("menuitem")) {
-//     if (menuitem.render) {
-//       menuitem.render();
-//     } else {
-//       // Let's see if this can happen. if it can (i.e. when inside of XBL anon content),
-//       // then we can do customElements.upgrade(menuitem)
-//       throw new Error("Can this happen?");
-//     }
-//   }
-// }, { capture: true });
+
+let timeInRender = 0;
+let timeInAttr = 0;
+
+window.addEventListener("load", () => {
+  console.log(`Spent ${timeInRender} and ${timeInAttr}`);
+});
+
+// XXX remove this line: https://searchfox.org/mozilla-central/rev/c43240cef5829b8a2dec118faff8a5e1fec6ae1b/accessible/xul/XULMenuAccessible.cpp#41
+let frags = {};
+XPCOMUtils.defineLazyGetter(frags, "iconicNoAccel", () => {
+  return MozXULElement.parseXULToFragment(`
+    <hbox class="menu-iconic-left" align="center" pack="center" role="none">
+      <image class="menu-iconic-icon" role="none"/>
+    </hbox>
+    <label class="menu-iconic-text" flex="1" crop="right" role="none"/>
+    <label class="menu-iconic-highlightable-text" crop="right" role="none"/>
+  `);
+});
 
-// window.addEventListener("popuphidden", (e) => {
-//   openPopups.delete(e.originalTarget);
-// }, { capture: true });
+XPCOMUtils.defineLazyGetter(frags, "iconicAccel", () => {
+  return MozXULElement.parseXULToFragment(`
+    <hbox class="menu-accel-container" role="none">
+      <label class="menu-iconic-accel" role="none"/>
+    </hbox>
+  `);
+});
+
+XPCOMUtils.defineLazyGetter(frags, "labels", () => {
+  return MozXULElement.parseXULToFragment(`
+  <label class="menu-iconic-text" flex="1" crop="right" role="none"/>
+  <label class="menu-iconic-highlightable-text" crop="right" role="none"/>
+  `);
+});
+
+XPCOMUtils.defineLazyGetter(frags, "plain", () => {
+  return MozXULElement.parseXULToFragment(`
+    <label class="menu-text" crop="right" role="none"/>
+    <hbox class="menu-accel-container" role="none">
+      <label class="menu-accel" role="none"/>
+    </hbox>
+  `);
+});
+
+window.addEventListener("popupshowing", (e) => {
+  if (e.originalTarget.ownerDocument != document) {
+    return;
+  }
+  for (let menuitem of e.originalTarget.querySelectorAll("menuitem")) {
+    menuitem.render();
+  }
+}, { capture: true });
 
 class MozMenuItemBase extends MozElements.BaseText {
   set value(val) {
     this.setAttribute("value", val);
     return val;
   }
 
   get value() {
@@ -57,145 +91,146 @@ class MozMenuItemBase extends MozElement
     }
     return null;
   }
 }
 
 MozXULElement.implementCustomInterface(MozMenuItemBase, [Ci.nsIDOMXULSelectControlItemElement, Ci.nsIDOMXULContainerItemElement]);
 
 class MozMenuItem extends MozMenuItemBase {
+  constructor() {
+    super();
+
+    this.renderedOnce = false;
+    XPCOMUtils.defineLazyGetter(this, "needsEagerRender", () => {
+      // XXX include open menupopups (probably want an attr to check here)
+      return this.closest("menulist") || this.closest("[sizetopopup]");
+    });
+  }
+
   static get observedAttributes() {
     return ["label", "crop", "accesskey", "highlightable"];
   }
 
   attributeChangedCallback(name, oldValue, newValue) {
-    if (oldValue === newValue) {
+    if (!this.renderedOnce || oldValue === newValue) {
       return;
     }
 
     this._updateAttributes();
   }
 
-  // get isInsideOpenPopup() {
-  //   for (let popup of openPopups) {
-  //     if (popup.contains(this)) {
-  //       return true;
-  //     }
-  //   }
-  //   return false;
-  // }
-
   connectedCallback() {
     // We typically don't want to eagerly render (instead wait for the
     // popup to be shown). But if this is selected, we'll want it to render
     // so the preview text shows properly in the menulist.
     // XXX: why? this can be seen on the font size dropdown on about:preferences
-    // if (!this.isInsideOpenPopup) {
-    //   return;
-    // }
+    if (!this.needsEagerRender) {
+      return;
+    }
 
     if (this.delayConnectedCallback()) {
       return;
     }
 
-    this.render();
+    this.lightweightRender();
+    // this.render();
+  }
+
+  lightweightRender() {
+    this.textContent = this.getAttribute("label");
   }
 
   _updateAttributes() {
     if (!this.renderedOnce) {
       return;
     }
 
-    if (this.menuText) {
-      this.inheritAttribute(this.menuText, "value=label");
-      this.inheritAttribute(this.menuText, "crop");
-      this.inheritAttribute(this.menuText, "accesskey");
-      this.inheritAttribute(this.menuText, "highlightable");
-    }
+    let t = Date.now();
 
-    if (this.menuHighlightableText) {
-      this.inheritAttribute(this.menuHighlightableText, "text=label");
-      this.inheritAttribute(this.menuHighlightableText, "crop");
-      this.inheritAttribute(this.menuHighlightableText, "accesskey");
-      this.inheritAttribute(this.menuHighlightableText, "highlightable");
-    }
+    // if (this.menuText) {
+    //   this.inheritAttribute(this.menuText, "value=label");
+    //   this.inheritAttribute(this.menuText, "crop");
+    //   this.inheritAttribute(this.menuText, "accesskey");
+    //   this.inheritAttribute(this.menuText, "highlightable");
+    // }
+
+    // if (this.menuHighlightableText) {
+    //   this.inheritAttribute(this.menuHighlightableText, "text=label");
+    //   this.inheritAttribute(this.menuHighlightableText, "crop");
+    //   this.inheritAttribute(this.menuHighlightableText, "accesskey");
+    //   this.inheritAttribute(this.menuHighlightableText, "highlightable");
+    // }
 
-    if (this.menuAccel) {
-      this.inheritAttribute(this.menuAccel, "value=acceltext");
-    }
+    // if (this.menuAccel) {
+    //   this.inheritAttribute(this.menuAccel, "value=acceltext");
+    // }
 
-    if (this.menuIconContainer) {
-      this.inheritAttribute(this.menuIconContainer, "selected");
-      // XXX: is this safe for both variations?
-      this.inheritAttribute(this.menuIconContainer, "_moz-menuactive");
-      this.inheritAttribute(this.menuIconContainer, "disabled");
-      this.inheritAttribute(this.menuIconContainer, "checked");
-    }
+    // if (this.menuIconContainer) {
+    //   this.inheritAttribute(this.menuIconContainer, "selected");
+    //   // XXX: is this safe for both variations?
+    //   this.inheritAttribute(this.menuIconContainer, "_moz-menuactive");
+    //   this.inheritAttribute(this.menuIconContainer, "disabled");
+    //   this.inheritAttribute(this.menuIconContainer, "checked");
+    // }
 
-    if (this.menuIcon) {
-      this.inheritAttribute(this.menuIcon, "image", "src");
-      this.inheritAttribute(this.menuIcon, "validate");
-      this.inheritAttribute(this.menuIcon, "triggeringprincipal=iconloadingprincipal");
-    }
+    // if (this.menuIcon) {
+    //   this.inheritAttribute(this.menuIcon, "image", "src");
+    //   this.inheritAttribute(this.menuIcon, "validate");
+    //   // XXX: This seems unused?
+    //   // this.inheritAttribute(this.menuIcon, "triggeringprincipal=iconloadingprincipal");
+    // }
+
+    timeInAttr += (Date.now() - t);
   }
 
   get isIconic() {
     return this.matches(`menuitem[type="checkbox"], menuitem[type="radio"], menuitem.menuitem-iconic`);
   }
 
   get isIconicNoAccel() {
     return this.matches("menulist > menupopup > menuitem");
   }
 
   render() {
     if (this.renderedOnce) {
       return;
     }
+
+    let l1 = document.createXULElement("label");
+    l1.hidden = true;
+    let l2 = document.createXULElement("label");
+    l2.hidden = true;
+    var t = Date.now();
+
     this.renderedOnce = true;
-    // Add role="none" on all DOM
-    // XXX remove this line: https://searchfox.org/mozilla-central/rev/c43240cef5829b8a2dec118faff8a5e1fec6ae1b/accessible/xul/XULMenuAccessible.cpp#41
-    if (this.isIconicNoAccel) {
-      this.append(MozXULElement.parseXULToFragment(`
-        <hbox class="menu-iconic-left" align="center" pack="center" role="none">
-          <image class="menu-iconic-icon" role="none"/>
-        </hbox>
-        <label class="menu-iconic-text" flex="1" crop="right" role="none"/>
-        <label class="menu-iconic-highlightable-text" crop="right" role="none"/>
-      `));
-      this.menuText = this.querySelector(".menu-iconic-text");
-      this.menuIconContainer = this.querySelector(".menu-iconic-left");
-      this.menuIcon = this.querySelector(".menu-iconic-icon");
-      this.menuHighlightableText = this.querySelector(".menu-iconic-highlightable-text");
-    } else if (this.isIconic) {
-      this.prepend(MozXULElement.parseXULToFragment(`
-        <hbox class="menu-iconic-left" align="center" pack="center" role="none">
-          <image class="menu-iconic-icon" role="none"/>
-        </hbox>
-        <label class="menu-iconic-text" flex="1" crop="right" role="none"/>
-        <label class="menu-iconic-highlightable-text" crop="right" role="none"/>
-      `));
-      this.append(MozXULElement.parseXULToFragment(`
-        <hbox class="menu-accel-container" role="none">
-          <label class="menu-iconic-accel" role="none"/>
-        </hbox>
-      `));
-      this.menuText = this.querySelector(".menu-iconic-text");
-      this.menuHighlightableText = this.querySelector(".menu-iconic-highlightable-text");
-      this.menuAccel = this.querySelector(".menu-iconic-accel");
-      this.menuIconContainer = this.querySelector(".menu-iconic-left");
-      this.menuIcon = this.querySelector(".menu-iconic-icon");
-    } else {
-      this.append(MozXULElement.parseXULToFragment(`
-        <label class="menu-text" crop="right" role="none"/>
-        <hbox class="menu-accel-container" role="none">
-          <label class="menu-accel" role="none"/>
-        </hbox>
-      `));
-      this.menuText = this.querySelector(".menu-text");
-      this.menuAccel = this.querySelector(".menu-accel");
-    }
+
+    this.appendChild(l1);
+    this.appendChild(l2);
+    // this.append(document.importNode(frags.labels, true));
+    // if (this.isIconicNoAccel) {
+    //   this.append(document.importNode(frags.iconicNoAccel, true));
+    //   this.menuText = this.querySelector(".menu-iconic-text");
+    //   this.menuIconContainer = this.querySelector(".menu-iconic-left");
+    //   this.menuIcon = this.querySelector(".menu-iconic-icon");
+    //   this.menuHighlightableText = this.querySelector(".menu-iconic-highlightable-text");
+    // } else if (this.isIconic) {
+    //   this.prepend(document.importNode(frags.iconicNoAccel, true));
+    //   this.append(document.importNode(frags.iconicAccel, true));
+    //   this.menuText = this.querySelector(".menu-iconic-text");
+    //   this.menuHighlightableText = this.querySelector(".menu-iconic-highlightable-text");
+    //   this.menuAccel = this.querySelector(".menu-iconic-accel");
+    //   this.menuIconContainer = this.querySelector(".menu-iconic-left");
+    //   this.menuIcon = this.querySelector(".menu-iconic-icon");
+    // } else {
+    //   this.append(document.importNode(frags.plain, true));
+    //   this.menuText = this.querySelector(".menu-text");
+    //   this.menuAccel = this.querySelector(".menu-accel");
+    // }
+
+    timeInRender += (Date.now() - t);
 
     this._updateAttributes();
   }
 }
 
 customElements.define("menuitem", MozMenuItem);
 }
