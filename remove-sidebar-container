# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  e7e81a32c2ab11f089f9c53eab71da94902f8e6d

diff --git a/accessible/generic/Accessible.cpp b/accessible/generic/Accessible.cpp
--- a/accessible/generic/Accessible.cpp
+++ b/accessible/generic/Accessible.cpp
@@ -342,18 +342,21 @@ uint64_t Accessible::VisibilityState() c
     nsDeckFrame* deckFrame = do_QueryFrame(parentFrame);
     if (deckFrame && deckFrame->GetSelectedBox() != curFrame) {
 #if defined(ANDROID)
       // In Fennec instead of a <tabpanels> container there is a <deck>
       // with direct <browser> children.
       if (curFrame->GetContent()->IsXULElement(nsGkAtoms::browser))
         return states::OFFSCREEN;
 #else
-      if (deckFrame->GetContent()->IsXULElement(nsGkAtoms::tabpanels))
-        return states::OFFSCREEN;
+      printf("HERE\n");
+      if (deckFrame->GetContent()->IsXULElement(nsGkAtoms::tabpanels)) {
+       printf("THERE\n");
+        // return states::OFFSCREEN;
+      }
 #endif
 
       MOZ_ASSERT_UNREACHABLE(
           "Children of not selected deck panel are not accessible.");
       return states::INVISIBLE;
     }
 
     // If contained by scrollable frame then check that at least 12 pixels
diff --git a/browser/base/content/tabbrowser.js b/browser/base/content/tabbrowser.js
--- a/browser/base/content/tabbrowser.js
+++ b/browser/base/content/tabbrowser.js
@@ -695,21 +695,23 @@ window._gBrowser = {
     return this._outerWindowIDBrowserMap.get(aID);
   },
 
   getTabForBrowser(aBrowser) {
     return this._tabForBrowser.get(aBrowser);
   },
 
   getPanel(aBrowser) {
+    console.trace(this.getBrowserContainer(aBrowser).parentNode)
     return this.getBrowserContainer(aBrowser).parentNode;
   },
 
   getBrowserContainer(aBrowser) {
-    return (aBrowser || this.selectedBrowser).parentNode.parentNode;
+    // console.log((aBrowser || this.selectedBrowser).parentNode, (aBrowser || this.selectedBrowser).parentNode.parentNode);
+    return (aBrowser || this.selectedBrowser).parentNode;
   },
 
   getNotificationBox(aBrowser) {
     let browser = aBrowser || this.selectedBrowser;
     if (!browser._notificationBox) {
       browser._notificationBox = new MozElements.NotificationBox(element => {
         element.setAttribute("notificationside", "top");
         this.getBrowserContainer(browser).prepend(element);
@@ -1943,19 +1945,19 @@ window._gBrowser = {
     stack.setAttribute("flex", "10000");
 
     let browserContainer = document.createXULElement("vbox");
     browserContainer.className = "browserContainer";
     browserContainer.appendChild(notificationbox);
     browserContainer.appendChild(stack);
     browserContainer.setAttribute("flex", "10000");
 
-    let browserSidebarContainer = document.createXULElement("hbox");
-    browserSidebarContainer.className = "browserSidebarContainer";
-    browserSidebarContainer.appendChild(browserContainer);
+    // let browserSidebarContainer = document.createXULElement("hbox");
+    // browserSidebarContainer.className = "browserSidebarContainer";
+    // browserSidebarContainer.appendChild(browserContainer);
 
     // Prevent the superfluous initial load of a blank document
     // if we're going to load something other than about:blank.
     if (!uriIsAboutBlank) {
       b.setAttribute("nodefaultsrc", "true");
     }
 
     return b;
