# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  e7e81a32c2ab11f089f9c53eab71da94902f8e6d
Bug XXX - Remove browserSidebarContainer to flatten out the DOM hierarchy one more level

diff --git a/browser/base/content/tabbrowser.js b/browser/base/content/tabbrowser.js
--- a/browser/base/content/tabbrowser.js
+++ b/browser/base/content/tabbrowser.js
@@ -695,17 +695,17 @@ window._gBrowser = {
     return this._outerWindowIDBrowserMap.get(aID);
   },
 
   getTabForBrowser(aBrowser) {
     return this._tabForBrowser.get(aBrowser);
   },
 
   getPanel(aBrowser) {
-    return this.getBrowserContainer(aBrowser).parentNode;
+    return this.getBrowserContainer(aBrowser);
   },
 
   getBrowserContainer(aBrowser) {
     return (aBrowser || this.selectedBrowser).parentNode.parentNode;
   },
 
   getNotificationBox(aBrowser) {
     let browser = aBrowser || this.selectedBrowser;
@@ -1834,16 +1834,17 @@ window._gBrowser = {
     recordExecution,
     remoteType,
     replayExecution,
     sameProcessAsFrameLoader,
     uriIsAboutBlank,
     userContextId,
   } = {}) {
     let b = document.createXULElement("browser");
+    b.setAttribute("flex", "10000");
     // Use the JSM global to create the permanentKey, so that if the
     // permanentKey is held by something after this window closes, it
     // doesn't keep the window alive.
     b.permanentKey = new (Cu.getGlobalForObject(Services).Object);
 
     const defaultBrowserAttributes = {
       contextmenu: "contentAreaContextMenu",
       datetimepicker: "DateTimePickerPanel",
@@ -1926,36 +1927,30 @@ window._gBrowser = {
       // XXX: The `name` property is special in HTML and XUL. Should
       // we use a different attribute name for this?
       b.setAttribute("name", name);
     }
 
     let notificationbox = document.createXULElement("notificationbox");
     notificationbox.setAttribute("notificationside", "top");
 
-    // We set large flex on both containers to allow the devtools toolbox to
+    // We set large flex on the stack and the browser itself to allow the devtools toolbox to
     // set a flex attribute. We don't want the toolbox to actually take up free
     // space, but we do want it to collapse when the window shrinks, and with
     // flex=0 it can't. When the toolbox is on the bottom it's a sibling of
-    // browserStack, and when it's on the side it's a sibling of
-    // browserContainer.
-    let stack = document.createXULElement("stack");
+    // browserStack, and when it's on the side it's a sibling of the browser.
+    let stack = document.createXULElement("hbox");
     stack.className = "browserStack";
     stack.appendChild(b);
     stack.setAttribute("flex", "10000");
 
     let browserContainer = document.createXULElement("vbox");
     browserContainer.className = "browserContainer";
     browserContainer.appendChild(notificationbox);
     browserContainer.appendChild(stack);
-    browserContainer.setAttribute("flex", "10000");
-
-    let browserSidebarContainer = document.createXULElement("hbox");
-    browserSidebarContainer.className = "browserSidebarContainer";
-    browserSidebarContainer.appendChild(browserContainer);
 
     // Prevent the superfluous initial load of a blank document
     // if we're going to load something other than about:blank.
     if (!uriIsAboutBlank) {
       b.setAttribute("nodefaultsrc", "true");
     }
 
     return b;
diff --git a/browser/base/content/test/general/browser_bug462673.js b/browser/base/content/test/general/browser_bug462673.js
--- a/browser/base/content/test/general/browser_bug462673.js
+++ b/browser/base/content/test/general/browser_bug462673.js
@@ -24,13 +24,13 @@ add_task(async function() {
   var newBrowser = newTab.linkedBrowser;
   win.gBrowser.removeTab(tab);
   ok(!win.closed, "Window stays open");
   if (!win.closed) {
     is(win.gBrowser.tabContainer.childElementCount, 1, "Window has one tab");
     is(win.gBrowser.browsers.length, 1, "Window has one browser");
     is(win.gBrowser.selectedTab, newTab, "Remaining tab is selected");
     is(win.gBrowser.selectedBrowser, newBrowser, "Browser for remaining tab is selected");
-    is(win.gBrowser.tabbox.selectedPanel, newBrowser.parentNode.parentNode.parentNode, "Panel for remaining tab is selected");
+    is(win.gBrowser.tabbox.selectedPanel, newBrowser.parentNode.parentNode, "Panel for remaining tab is selected");
   }
 
   await promiseWindowClosed(win);
 });
diff --git a/devtools/client/framework/toolbox-hosts.js b/devtools/client/framework/toolbox-hosts.js
--- a/devtools/client/framework/toolbox-hosts.js
+++ b/devtools/client/framework/toolbox-hosts.js
@@ -130,39 +130,40 @@ class SidebarHost {
   /**
    * Create a box in the sidebar of the host tab.
    */
   async create() {
     await gDevToolsBrowser.loadBrowserStyleSheet(this.hostTab.ownerGlobal);
     const gBrowser = this.hostTab.ownerDocument.defaultView.gBrowser;
     const ownerDocument = gBrowser.ownerDocument;
     this._browserContainer = gBrowser.getBrowserContainer(this.hostTab.linkedBrowser);
-    this._browserPanel = gBrowser.getPanel(this.hostTab.linkedBrowser);
+    this._browser = this.hostTab.linkedBrowser;
+    this._browserStack = this._browser.parentNode; // gBrowser.getPanel(this.hostTab.linkedBrowser);
 
     this._splitter = ownerDocument.createXULElement("splitter");
     this._splitter.setAttribute("class", "devtools-side-splitter");
 
     this.frame = createDevToolsFrame(ownerDocument, "devtools-toolbox-side-iframe");
     this.frame.width = Math.min(
       Services.prefs.getIntPref(this.widthPref),
-      this._browserPanel.clientWidth - MIN_PAGE_SIZE
+      this._browserStack.clientWidth - MIN_PAGE_SIZE
     );
 
     // We should consider the direction when changing the dock position.
     const topWindow = this.hostTab.ownerDocument.defaultView.top;
     const topDoc = topWindow.document.documentElement;
     const isLTR = topWindow.getComputedStyle(topDoc).direction === "ltr";
 
     if (isLTR && this.type == "right" ||
         !isLTR && this.type == "left") {
-      this._browserPanel.appendChild(this._splitter);
-      this._browserPanel.appendChild(this.frame);
+      this._browserStack.appendChild(this._splitter);
+      this._browserStack.appendChild(this.frame);
     } else {
-      this._browserPanel.insertBefore(this.frame, this._browserContainer);
-      this._browserPanel.insertBefore(this._splitter, this._browserContainer);
+      this._browserStack.insertBefore(this.frame, this._browser);
+      this._browserStack.insertBefore(this._splitter, this._browser);
     }
 
     this.frame.setAttribute("src", "about:blank");
 
     const frame = await new Promise(resolve => {
       const domHelper = new DOMHelpers(this.frame.contentWindow);
       const frameLoad = () => {
         this.emit("ready", this.frame);
@@ -191,18 +192,18 @@ class SidebarHost {
   /**
    * Destroy the sidebar.
    */
   destroy() {
     if (!this._destroyed) {
       this._destroyed = true;
 
       Services.prefs.setIntPref(this.widthPref, this.frame.width);
-      this._browserPanel.removeChild(this._splitter);
-      this._browserPanel.removeChild(this.frame);
+      this._browserStack.removeChild(this._splitter);
+      this._browserStack.removeChild(this.frame);
     }
 
     return promise.resolve(null);
   }
 }
 
 /**
  * Host object for the in-browser left sidebar
