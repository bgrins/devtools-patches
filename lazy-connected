# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  729d9bd53cab8ac9159c7c797fab8e74db60e790

diff --git a/toolkit/content/customElements.js b/toolkit/content/customElements.js
--- a/toolkit/content/customElements.js
+++ b/toolkit/content/customElements.js
@@ -26,29 +26,48 @@ class MozXULElement extends XULElement {
     // while (proto.constructor.name != "MozXULElement") {
     //   console.log(Object.getOwnPropertyDescriptors(proto));
     //   proto = proto.__proto__;
     // }
 
     // console.log(this, this.prototype);
     if (this.lazyConnectedCallback) {
       this._lazyConnectedCallbackWrapper = () => {
-        if (this.isConnected) {
-          this.lazyConnectedCallback();
+        if (!this.isConnected) {
+          return;
         }
+        // console.log(this, this.closest("panel[hidden]"));
+        // console.trace();
+        // if (this.closest("panel[hidden]")) {
+        //   console.log("Adding event listenr");
+        //   // document.addEventListener("popupshowing", () => {
+        //   //   console.log("POPPUP SHOWING");
+        //   //   this.lazyConnectedCallback();
+        //   // }, { capture: true, once: true });
+        //   this.closest("panel[hidden]").addEventListener("popupshowing", () => {
+        //     console.log("POPPUP SHOWING");
+        //     this.lazyConnectedCallback();
+        //   }, { capture: true, once: true, mozSystemGroup: true });
+        // } else {
+        this.lazyConnectedCallback();
       };
     }
   }
 
   /**
    * If a Custom Element requests it, then don't fire connectedCallback until after
    * DOMContentLoaded fires
    **/
   connectedCallback() {
     if (this._lazyConnectedCallbackWrapper) {
+      // Hidden panel will re-fire connectedCallback later when opening
+      if (this.closest(".cui-widget-panel[hidden]")) {
+        return;
+      }
+
       if (document.readyState == "uninitialized") {
         document.addEventListener("DOMContentLoaded", this._lazyConnectedCallbackWrapper, { once: true });
       } else {
         this._lazyConnectedCallbackWrapper();
       }
     }
   }
 
