# vim: se ft=diff :
# HG changeset patch
# User Nicolas Chevobbe <chevobbe.nicolas@gmail.com>
# Date 2016-04-29 13:17
Bug 1260283 - Implement new console output frontend behind a pref. r=linclark

diff --git a/devtools/client/webconsole/new-console-output/components/message-container.js b/devtools/client/webconsole/new-console-output/components/message-container.js
index 0ac1eea..2694f08 100644
--- a/devtools/client/webconsole/new-console-output/components/message-container.js
+++ b/devtools/client/webconsole/new-console-output/components/message-container.js
@@ -31,16 +31,19 @@ function getMessageComponent(messageType) {
   let MessageComponent;
   switch (messageType) {
     case "ConsoleApiCall":
       MessageComponent = require("devtools/client/webconsole/new-console-output/components/message-types/console-api-call").ConsoleApiCall;
       break;
     case "EvaluationResult":
       MessageComponent = require("devtools/client/webconsole/new-console-output/components/message-types/evaluation-result").EvaluationResult;
       break;
+    case "PageError":
+      MessageComponent = require("devtools/client/webconsole/new-console-output/components/message-types/page-error").PageError;
+      break;
   }
   return MessageComponent;
 }
 
 module.exports.MessageContainer = MessageContainer;
 
 // Exported so we can test it with unit tests.
 module.exports.getMessageComponent = getMessageComponent;
diff --git a/devtools/client/webconsole/new-console-output/components/message-types/moz.build b/devtools/client/webconsole/new-console-output/components/message-types/moz.build
index 98040c8..2f93902 100644
--- a/devtools/client/webconsole/new-console-output/components/message-types/moz.build
+++ b/devtools/client/webconsole/new-console-output/components/message-types/moz.build
@@ -3,9 +3,10 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 DevToolsModules(
     'console-api-call.js',
     'date-preview.js',
     'default-renderer.js',
     'evaluation-result.js',
+    'page-error.js',
 )
diff --git a/devtools/client/webconsole/new-console-output/components/message-types/page-error.js b/devtools/client/webconsole/new-console-output/components/message-types/page-error.js
new file mode 100644
index 0000000..149e2d4
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/components/message-types/page-error.js
@@ -0,0 +1,45 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+// React & Redux
+const {
+  createElement,
+  DOM: dom,
+  PropTypes
+} = require("devtools/client/shared/vendor/react");
+const { MessageRepeat } = require("devtools/client/webconsole/new-console-output/components/message-repeat");
+
+PageError.displayName = "PageError";
+
+PageError.propTypes = {
+  message: PropTypes.object.isRequired,
+};
+
+function PageError(props) {
+  const { message } = props;
+  const messageBody =
+    dom.span({className: "message-body devtools-monospace"},
+      message.data.errorMessage);
+  const repeat = createElement(MessageRepeat, {repeat: message.repeat});
+  const children = [
+    messageBody,
+    repeat
+  ];
+
+  return dom.div({ className: "message cm-s-mozilla"},
+    dom.span({className: "message-body-wrapper"},
+      dom.span({},
+        dom.span({className: "message-flex-body"},
+          children
+        )
+      )
+    )
+  );
+}
+
+module.exports.PageError = PageError;
diff --git a/devtools/client/webconsole/new-console-output/utils/messages.js b/devtools/client/webconsole/new-console-output/utils/messages.js
index 6b85bc5..eed34bd 100644
--- a/devtools/client/webconsole/new-console-output/utils/messages.js
+++ b/devtools/client/webconsole/new-console-output/utils/messages.js
@@ -3,20 +3,24 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const {
   CATEGORY_CLASS_FRAGMENTS,
+  CATEGORY_JS,
   CATEGORY_WEBDEV,
   CATEGORY_OUTPUT,
   LEVELS,
   SEVERITY_CLASS_FRAGMENTS,
+  SEVERITY_ERROR,
+  SEVERITY_WARNING,
+  SEVERITY_INFO,
   SEVERITY_LOG,
 } = require("../constants");
 const WebConsoleUtils = require("devtools/shared/webconsole/utils").Utils;
 
 function prepareMessage(packet) {
   // @TODO turn this into an Immutable Record.
   let allowRepeating;
   let category;
@@ -31,16 +35,31 @@ function prepareMessage(packet) {
       data = Object.assign({}, packet.message);
       allowRepeating = true;
       category = CATEGORY_CLASS_FRAGMENTS[CATEGORY_WEBDEV];
       messageType = "ConsoleApiCall";
       repeat = 1;
       repeatId = getRepeatId(data);
       severity = SEVERITY_CLASS_FRAGMENTS[LEVELS[data.level]];
       break;
+    case "pageError":
+      data = Object.assign({}, packet.pageError);
+      allowRepeating = true;
+      category = CATEGORY_CLASS_FRAGMENTS[CATEGORY_JS];
+      messageType = "PageError";
+      repeat = 1;
+      repeatId = getRepeatId(data);
+
+      severity = SEVERITY_CLASS_FRAGMENTS[SEVERITY_ERROR];
+      if (data.warning || data.strict) {
+        severity = SEVERITY_CLASS_FRAGMENTS[SEVERITY_WARNING];
+      } else if (data.info) {
+        severity = SEVERITY_CLASS_FRAGMENTS[SEVERITY_LOG];
+      }
+      break;
     case "evaluationResult":
     default:
       data = Object.assign({}, packet.result);
       allowRepeating = true;
       category = CATEGORY_CLASS_FRAGMENTS[CATEGORY_OUTPUT];
       messageType = "EvaluationResult";
       repeat = 1;
       repeatId = getRepeatId(data);
diff --git a/devtools/client/webconsole/webconsole.js b/devtools/client/webconsole/webconsole.js
index d67245f..988648b 100644
--- a/devtools/client/webconsole/webconsole.js
+++ b/devtools/client/webconsole/webconsole.js
@@ -3344,16 +3344,20 @@ WebConsoleConnectionProxy.prototype = {
    * @private
    * @param string type
    *        Message type.
    * @param object packet
    *        The message received from the server.
    */
   _onPageError: function(type, packet) {
     if (this.webConsoleFrame && packet.from == this._consoleActor) {
+      if (this.webConsoleFrame.SUPER_FRONTEND_EXPERIMENT) {
+        this.webConsoleFrame.newConsoleOutput.dispatchMessageAdd(packet);
+        return;
+      }
       this.webConsoleFrame.handlePageError(packet.pageError);
     }
   },
 
   /**
    * The "logMessage" message type handler. We redirect any message to the UI
    * for displaying.
    *
