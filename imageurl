# HG changeset patch
# Parent 8f381ac7ad780f688fdac58b70add3db32c406d1
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 921686 - Firefox css inspector doesn't find the correct url for some images.

diff --git a/browser/devtools/styleinspector/rule-view.js b/browser/devtools/styleinspector/rule-view.js
--- a/browser/devtools/styleinspector/rule-view.js
+++ b/browser/devtools/styleinspector/rule-view.js
@@ -1743,18 +1743,18 @@ function TextPropertyEditor(aRuleEditor,
   this.ruleEditor = aRuleEditor;
   this.doc = this.ruleEditor.doc;
   this.popup = this.ruleEditor.ruleView.popup;
   this.prop = aProperty;
   this.prop.editor = this;
   this.browserWindow = this.doc.defaultView.top;
   this.removeOnRevert = this.prop.value === "";
 
-  let sheet = this.prop.rule.sheet;
-  let href = sheet ? (sheet.href || sheet.nodeHref) : null;
+  let domRule = this.prop.rule.domRule;
+  let href = domRule ? domRule.href : null;
   if (href) {
     this.sheetURI = IOService.newURI(href, null, null);
   }
 
   this._onEnableClicked = this._onEnableClicked.bind(this);
   this._onExpandClicked = this._onExpandClicked.bind(this);
   this._onStartEditing = this._onStartEditing.bind(this);
   this._onNameDone = this._onNameDone.bind(this);
diff --git a/browser/devtools/styleinspector/test/browser_styleinspector_bug_677930_urls_clickable.html b/browser/devtools/styleinspector/test/browser_styleinspector_bug_677930_urls_clickable.html
--- a/browser/devtools/styleinspector/test/browser_styleinspector_bug_677930_urls_clickable.html
+++ b/browser/devtools/styleinspector/test/browser_styleinspector_bug_677930_urls_clickable.html
@@ -9,13 +9,15 @@
   <body>
 
     <div class="relative">Background image with relative path (loaded from external css)</div>
 
     <div class="absolute">Background image with absolute path (loaded from external css)</div>
 
     <div class="base64">Background image with base64 url (loaded from external css)</div>
 
-    <div class="inline" style="background: url(test-image.png);">Background image with relative path (loaded from style attribute)</div>';
+    <div class="inline" style="background: url(test-image.png);">Background image with relative path (loaded from style attribute)</div>
+
+    <div class="inline-resolved" style="background-image: url(./test-image.png)">Background image with resolved relative path (loaded from style attribute)</div>
 
     <div class="noimage">No background image :(</div>
   </body>
 </html>
diff --git a/browser/devtools/styleinspector/test/browser_styleinspector_bug_677930_urls_clickable.js b/browser/devtools/styleinspector/test/browser_styleinspector_bug_677930_urls_clickable.js
--- a/browser/devtools/styleinspector/test/browser_styleinspector_bug_677930_urls_clickable.js
+++ b/browser/devtools/styleinspector/test/browser_styleinspector_bug_677930_urls_clickable.js
@@ -21,22 +21,24 @@ function selectNode(aInspector, aRuleVie
   let sidebar = inspector.sidebar;
   let contentDoc = aRuleView.doc;
 
   let relative = doc.querySelector(".relative");
   let absolute = doc.querySelector(".absolute");
   let inline = doc.querySelector(".inline");
   let base64 = doc.querySelector(".base64");
   let noimage = doc.querySelector(".noimage");
+  let inlineresolved = doc.querySelector(".inline-resolved");
 
   ok(relative, "captain, we have the relative div");
   ok(absolute, "captain, we have the absolute div");
   ok(inline, "captain, we have the inline div");
   ok(base64, "captain, we have the base64 div");
   ok(noimage, "captain, we have the noimage div");
+  ok(inlineresolved, "captain, we have the inlineresolved div");
 
   inspector.selection.setNode(relative);
   inspector.once("inspector-updated", () => {
     is(inspector.selection.node, relative, "selection matches the relative element");
     let relativeLink = contentDoc.querySelector(".ruleview-propertycontainer a");
     ok (relativeLink, "Link exists for relative node");
     ok (relativeLink.getAttribute("href"), TEST_IMAGE);
 
@@ -56,22 +58,30 @@ function selectNode(aInspector, aRuleVie
 
         inspector.selection.setNode(base64);
         inspector.once("inspector-updated", () => {
           is(inspector.selection.node, base64, "selection matches the base64 element");
           let base64Link = contentDoc.querySelector(".ruleview-propertycontainer a");
           ok (base64Link, "Link exists for base64 node");
           ok (base64Link.getAttribute("href"), BASE_64_URL);
 
-          inspector.selection.setNode(noimage);
+          inspector.selection.setNode(inlineresolved);
           inspector.once("inspector-updated", () => {
-            is(inspector.selection.node, noimage, "selection matches the inline element");
-            let noimageLink = contentDoc.querySelector(".ruleview-propertycontainer a");
-            ok (!noimageLink, "There is no link for the node with no background image");
-            finishUp();
+            is(inspector.selection.node, inlineresolved, "selection matches the style tag element");
+            let inlineResolvedLink = contentDoc.querySelector(".ruleview-propertycontainer a");
+            ok (inlineResolvedLink, "Link exists for style tag node");
+            ok (inlineResolvedLink.getAttribute("href"), TEST_IMAGE);
+
+            inspector.selection.setNode(noimage);
+            inspector.once("inspector-updated", () => {
+              is(inspector.selection.node, noimage, "selection matches the inline element");
+              let noimageLink = contentDoc.querySelector(".ruleview-propertycontainer a");
+              ok (!noimageLink, "There is no link for the node with no background image");
+              finishUp();
+            });
           });
         });
       });
     });
   });
 }
 
 function finishUp()
