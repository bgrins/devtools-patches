# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  fef67977843c8823fbfb8682106a8917f613a8a1

diff --git a/security/manager/pki/resources/content/certViewer.xul b/security/manager/pki/resources/content/certViewer.xul
--- a/security/manager/pki/resources/content/certViewer.xul
+++ b/security/manager/pki/resources/content/certViewer.xul
@@ -138,17 +138,17 @@
           <treecols>
             <treecol flex="1" id="certDataCol" primary="true" hideheader="true"/>
           </treecols>
           <treechildren/>
         </tree>
 
         <label class="header" data-l10n-id="certmgr-fields" control="certDumpVal"/>
         <html:textarea id="certDumpVal" flex="1" readonly="true"
-                       style="height: 11em; font-family: -moz-fixed;"/>
+                       style="height: 11em; font-family: -moz-fixed;" spellcheck="true"/>
         <separator class="thin"/>
         <hbox>
           <button id="export_cert" class="normal" data-l10n-id="certmgr-export"
                   oncommand="exportToFile(window, getCurrentCert());"/>
         </hbox>
       </vbox>
     </tabpanels>
   </tabbox>
diff --git a/toolkit/content/widgets/textbox.js b/toolkit/content/widgets/textbox.js
--- a/toolkit/content/widgets/textbox.js
+++ b/toolkit/content/widgets/textbox.js
@@ -2,16 +2,89 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 // This is loaded into chrome windows with the subscript loader. Wrap in
 // a block to prevent accidentally leaking globals onto `window`.
 {
+
+  let sharedPopup = null;
+  let sharedSpellcheckPopup = null;
+  function createSharedPopupIfNeeded(spellcheck) {
+    if (sharedPopup) {
+      return;
+    }
+
+    let popupset = document.querySelector("popupset");
+    if (!popupset) {
+      popupset = document.createXULElement("popupset");
+      document.documentElement.appendChild(popupset);
+    }
+
+    popupset.appendChild(document.importNode(cachedFragments.normal, true));
+    sharedPopup = popupset.lastElementChild;
+    sharedPopup.addEventListener("popupshowing", () => {
+      var children = sharedPopup.children;
+      for (var i = 0; i < children.length; i++) {
+        var command = children[i].getAttribute("cmd");
+        if (command) {
+          var controller = document.commandDispatcher.getControllerForCommand(command);
+          var enabled = controller.isCommandEnabled(command);
+          if (enabled)
+            children[i].removeAttribute("disabled");
+          else
+            children[i].setAttribute("disabled", "true");
+        }
+      }
+    });
+
+    sharedPopup.addEventListener("command", event => {
+      var cmd = event.originalTarget.getAttribute("cmd");
+      if (cmd) {
+        window.docShell.doCommand(cmd);
+        event.stopPropagation();
+      }
+    });
+  }
+
+  function openContextMenu(target, screenX, screenY) {
+    let spellcheck = target.hasAttribute("spellcheck");
+    if (spellcheck) {
+      // createSharedSpellcheckPopupIfNeeded(spellcheck);
+      // sharedSpellcheckPopup.openPopupAtScreen(screenX, screenY, true);
+    } else {
+      createSharedPopupIfNeeded(spellcheck);
+      sharedPopup.openPopupAtScreen(screenX, screenY, true);
+    }
+  }
+
+  window.addEventListener("contextmenu", (e) => {
+    if (e.target.ownerDocument != document) {
+      return;
+    }
+
+    if (e.target.localName == "textarea") {
+      openContextMenu(e.target, e.screenX, e.screenY);
+    }
+
+    // XXX: There are consumers instrumenting the menu inside the moz-input-box direcly (i.e. urlbar).
+    // So let them use the fragment themseleves.
+    // else {
+    //   let inputBox = e.target.closest("moz-input-box");
+    //   if (inputBox) {
+    //     if (document.commandDispatcher.focusedElement != inputBox.input) {
+    //       inputBox.input.focus();
+    //     }
+    //     openContextMenu(inputBox.input, e.screenX, e.screenY);
+    //   }
+    // }
+  });
+
 const cachedFragments = {
   get entities() {
     return [
       "chrome://global/locale/textcontext.dtd",
     ];
   },
   get editMenuItems() {
     return `
@@ -50,30 +123,38 @@ const cachedFragments = {
         </menu>
       </menupopup>
     `, this.entities);
     return this.spellcheck;
   },
 };
 
 class MozInputBox extends MozXULElement {
+  constructor() {
+    super();
+  }
+
   static get observedAttributes() {
     return ["spellcheck"];
   }
 
   attributeChangedCallback(name, oldValue, newValue) {
     if (name === "spellcheck" && oldValue != newValue) {
       this._initUI();
     }
   }
 
   connectedCallback() {
     this._initUI();
   }
 
+  get input() {
+    return this.getElementsByAttribute("anonid", "input")[0];
+  }
+
   _initUI() {
     this.spellcheck = this.hasAttribute("spellcheck");
     if (this.menupopup) {
       this.menupopup.remove();
     }
 
     this.setAttribute("context", "_child");
     this.appendChild(this.spellcheck ? cachedFragments.spellcheck.cloneNode(true) :
