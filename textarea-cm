# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  fef67977843c8823fbfb8682106a8917f613a8a1

diff --git a/devtools/client/webconsole/webconsole-wrapper.js b/devtools/client/webconsole/webconsole-wrapper.js
--- a/devtools/client/webconsole/webconsole-wrapper.js
+++ b/devtools/client/webconsole/webconsole-wrapper.js
@@ -224,17 +224,18 @@ class WebConsoleWrapper {
       };
 
       serviceContainer.openEditContextMenu = (e) => {
         const { screenX, screenY } = e;
         const menu = createEditContextMenu(window, "webconsole-menu");
         // Emit the "menu-open" event for testing.
         menu.once("open", () => this.emit("menu-open"));
         menu.popup(screenX, screenY, { doc: this.owner.chromeWindow.document });
-
+        e.stopPropagation();
+        e.preventDefault();
         return menu;
       };
 
       if (this.toolbox) {
         this.toolbox.threadClient.addListener("paused", this.dispatchPaused.bind(this));
         this.toolbox.threadClient.addListener(
           "progress", this.dispatchProgress.bind(this));
 
diff --git a/security/manager/pki/resources/content/certViewer.xul b/security/manager/pki/resources/content/certViewer.xul
--- a/security/manager/pki/resources/content/certViewer.xul
+++ b/security/manager/pki/resources/content/certViewer.xul
@@ -138,17 +138,17 @@
           <treecols>
             <treecol flex="1" id="certDataCol" primary="true" hideheader="true"/>
           </treecols>
           <treechildren/>
         </tree>
 
         <label class="header" data-l10n-id="certmgr-fields" control="certDumpVal"/>
         <html:textarea id="certDumpVal" flex="1" readonly="true"
-                       style="height: 11em; font-family: -moz-fixed;"/>
+                       style="height: 11em; font-family: -moz-fixed;" spellcheck="true"/>
         <separator class="thin"/>
         <hbox>
           <button id="export_cert" class="normal" data-l10n-id="certmgr-export"
                   oncommand="exportToFile(window, getCurrentCert());"/>
         </hbox>
       </vbox>
     </tabpanels>
   </tabbox>
diff --git a/toolkit/content/widgets/textbox.js b/toolkit/content/widgets/textbox.js
--- a/toolkit/content/widgets/textbox.js
+++ b/toolkit/content/widgets/textbox.js
@@ -2,16 +2,144 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 // This is loaded into chrome windows with the subscript loader. Wrap in
 // a block to prevent accidentally leaking globals onto `window`.
 {
+  // function spellCheckerUI(textbox) {
+  //   if (!textbox._spellCheckInitialized) {
+  //     textbox._spellCheckInitialized = true;
+
+  //     if (ChromeUtils.getClassName(document) != "XULDocument")
+  //       return null;
+
+  //     try {
+  //       let {InlineSpellChecker} = ChromeUtils.import("resource://gre/modules/InlineSpellChecker.jsm", {});
+  //       textbox.InlineSpellCheckerUI = new InlineSpellChecker(textbox.editor);
+  //     } catch (ex) {}
+  //   }
+
+  //   return textbox.InlineSpellCheckerUI;
+  // }
+
+
+  function doPopupShowing(popupNode, targetInput) {
+    let children = popupNode.children;
+    for (let i = 0; i < children.length; i++) {
+      let command = children[i].getAttribute("cmd");
+      if (command) {
+        let controller = document.commandDispatcher.getControllerForCommand(command);
+        let enabled = controller.isCommandEnabled(command);
+        if (enabled)
+          children[i].removeAttribute("disabled");
+        else
+          children[i].setAttribute("disabled", "true");
+      }
+    }
+
+    let spellui = targetInput._spellCheckerUI;
+    if (!spellui || !spellui.canSpellCheck) {
+      popupNode.querySelector('[anonid="spell-no-suggestions"]').hidden = false;
+      popupNode.querySelector('[anonid="spell-check-enabled"]').hidden = false;
+      popupNode.querySelector('[anonid="spell-check-separator"]').hidden = false;
+      popupNode.querySelector('[anonid="spell-add-to-dictionary"]').hidden = false;
+      popupNode.querySelector('[anonid="spell-undo-add-to-dictionary"]').hidden = false;
+      popupNode.querySelector('[anonid="spell-suggestions-separator"]').hidden = false;
+      popupNode.querySelector('[anonid="spell-dictionaries"]').hidden = false;
+      return;
+    }
+
+    spellui.initFromEvent(document.popupRangeParent, document.popupRangeOffset);
+
+    let enabled = spellui.enabled;
+    let showUndo = spellui.canSpellCheck && spellui.canUndo();
+
+    let enabledCheckbox = popupNode.querySelector('[anonid="spell-check-enabled"]');
+    enabledCheckbox.setAttribute("checked", enabled);
+
+    let overMisspelling = spellui.overMisspelling;
+    popupNode.querySelector('[anonid="spell-add-to-dictionary"]').hidden = overMisspelling;
+    popupNode.querySelector('[anonid="spell-undo-add-to-dictionary"]').hidden = showUndo;
+    popupNode.querySelector('[anonid="spell-suggestions-separator"]').hidden = overMisspelling || showUndo;
+
+    // suggestion list
+    let suggestionsSeparator = popupNode.querySelector('[anonid="spell-no-suggestions"]');
+    let numsug = spellui.addSuggestionsToMenu(popupNode, suggestionsSeparator, 5);
+    popupNode.querySelector('[anonid="spell-no-suggestions"]').hidden = overMisspelling && numsug == 0;
+
+    // dictionary list
+    let dictionariesMenu = popupNode.querySelector('[anonid="spell-dictionaries-menu"]');
+    let numdicts = spellui.addDictionaryListToMenu(dictionariesMenu, null);
+    popupNode.querySelector('[anonid="spell-dictionaries"]').hidden = enabled && numdicts > 1;
+  }
+
+  let sharedPopup = null;
+  let gTarget = null;
+
+  function appendToPopupset(frag) {
+    let popupset = document.querySelector("popupset");
+    if (!popupset) {
+      popupset = document.createXULElement("popupset");
+      document.documentElement.appendChild(popupset);
+    }
+    popupset.appendChild(document.importNode(frag, true));
+    return popupset.lastElementChild;
+  }
+
+  function getSharedPopup(frag) {
+    if (sharedPopup) {
+      return sharedPopup;
+    }
+
+    sharedPopup = appendToPopupset(document.importNode(frag, true));
+    sharedPopup.addEventListener("popupshowing", (event) => {
+      doPopupShowing(event.target, gTarget);
+    });
+
+    sharedPopup.addEventListener("command", event => {
+      var cmd = event.originalTarget.getAttribute("cmd");
+      if (cmd) {
+        window.docShell.doCommand(cmd);
+        event.stopPropagation();
+      }
+    });
+
+    return sharedPopup;
+  }
+
+  function openContextMenu(target, screenX, screenY) {
+    let spellcheck = target.hasAttribute("spellcheck");
+    if (!spellcheck) {
+      target._spellCheckerUI = null;
+    }
+    if (spellcheck && !target._spellCheckerUI && ChromeUtils.getClassName(document) == "XULDocument") {
+      try {
+        let {InlineSpellChecker} = ChromeUtils.import("resource://gre/modules/InlineSpellChecker.jsm", {});
+        target._spellCheckerUI = new InlineSpellChecker(target.editor);
+      } catch (ex) {}
+    }
+
+    gTarget = target;
+    let popup = getSharedPopup(cachedFragments.spellcheck);
+    popup.openPopupAtScreen(screenX, screenY, true);
+  }
+
+  window.addEventListener("contextmenu", (e) => {
+    if (e.target.ownerDocument != document) {
+      return;
+    }
+
+    if (e.target.localName == "textarea") {
+      openContextMenu(e.target, e.screenX, e.screenY);
+    }
+  });
+
 const cachedFragments = {
   get entities() {
     return [
       "chrome://global/locale/textcontext.dtd",
     ];
   },
   get editMenuItems() {
     return `
@@ -64,137 +192,58 @@ class MozInputBox extends MozXULElement 
       this._initUI();
     }
   }
 
   connectedCallback() {
     this._initUI();
   }
 
+  get input() {
+    return this.getElementsByAttribute("anonid", "input")[0];
+  }
+
   _initUI() {
     this.spellcheck = this.hasAttribute("spellcheck");
+    if (!this.spellcheck) {
+      this.input._spellCheckerUI = null;
+    } else if (!this.input._spellCheckerUI && ChromeUtils.getClassName(document) == "XULDocument") {
+      try {
+        let {InlineSpellChecker} = ChromeUtils.import("resource://gre/modules/InlineSpellChecker.jsm", {});
+        this.input._spellCheckerUI = new InlineSpellChecker(this.input.editor);
+      } catch (ex) {}
+    }
+
     if (this.menupopup) {
       this.menupopup.remove();
     }
 
     this.setAttribute("context", "_child");
-    this.appendChild(this.spellcheck ? cachedFragments.spellcheck.cloneNode(true) :
-                                       cachedFragments.normal.cloneNode(true));
+    this.appendChild(document.importNode(this.spellcheck ? cachedFragments.spellcheck :
+                                                           cachedFragments.normal, true));
     this.menupopup = this.querySelector(".textbox-contextmenu");
 
     this.menupopup.addEventListener("popupshowing", event => {
-      var input = this.getElementsByAttribute("anonid", "input")[0];
+      let input = this.input;
       if (document.commandDispatcher.focusedElement != input)
         input.focus();
-      this._doPopupItemEnabling(event.target);
+      doPopupShowing(event.target, input);
     });
 
-    if (this.spellcheck) {
-      this.menupopup.addEventListener("popuphiding", event => {
-        if (this.spellCheckerUI) {
-          this.spellCheckerUI.clearSuggestionsFromMenu();
-          this.spellCheckerUI.clearDictionaryListFromMenu();
-        }
-      });
-    }
+    this.menupopup.addEventListener("popuphiding", event => {
+      if (this.input._spellCheckerUI) {
+        this.input._spellCheckerUI.clearSuggestionsFromMenu();
+        this.input._spellCheckerUI.clearDictionaryListFromMenu();
+      }
+    });
 
     this.menupopup.addEventListener("command", event => {
       var cmd = event.originalTarget.getAttribute("cmd");
       if (cmd) {
-        this.doCommand(cmd);
+        window.docShell.doCommand(cmd);
         event.stopPropagation();
       }
     });
   }
-
-  _doPopupItemEnablingSpell(popupNode) {
-    var spellui = this.spellCheckerUI;
-    if (!spellui || !spellui.canSpellCheck) {
-      this._setMenuItemVisibility("spell-no-suggestions", false);
-      this._setMenuItemVisibility("spell-check-enabled", false);
-      this._setMenuItemVisibility("spell-check-separator", false);
-      this._setMenuItemVisibility("spell-add-to-dictionary", false);
-      this._setMenuItemVisibility("spell-undo-add-to-dictionary", false);
-      this._setMenuItemVisibility("spell-suggestions-separator", false);
-      this._setMenuItemVisibility("spell-dictionaries", false);
-      return;
-    }
-
-    spellui.initFromEvent(document.popupRangeParent,
-      document.popupRangeOffset);
-
-    var enabled = spellui.enabled;
-    var showUndo = spellui.canSpellCheck && spellui.canUndo();
-
-    var enabledCheckbox = this.getMenuItem("spell-check-enabled");
-    enabledCheckbox.setAttribute("checked", enabled);
-
-    var overMisspelling = spellui.overMisspelling;
-    this._setMenuItemVisibility("spell-add-to-dictionary", overMisspelling);
-    this._setMenuItemVisibility("spell-undo-add-to-dictionary", showUndo);
-    this._setMenuItemVisibility("spell-suggestions-separator", overMisspelling || showUndo);
-
-    // suggestion list
-    var suggestionsSeparator = this.getMenuItem("spell-no-suggestions");
-    var numsug = spellui.addSuggestionsToMenu(popupNode, suggestionsSeparator, 5);
-    this._setMenuItemVisibility("spell-no-suggestions", overMisspelling && numsug == 0);
-
-    // dictionary list
-    var dictionariesMenu = this.getMenuItem("spell-dictionaries-menu");
-    var numdicts = spellui.addDictionaryListToMenu(dictionariesMenu, null);
-    this._setMenuItemVisibility("spell-dictionaries", enabled && numdicts > 1);
-  }
-
-  _doPopupItemEnabling(popupNode) {
-    if (this.spellcheck) {
-      this._doPopupItemEnablingSpell(popupNode);
-    }
-
-    var children = popupNode.childNodes;
-    for (var i = 0; i < children.length; i++) {
-      var command = children[i].getAttribute("cmd");
-      if (command) {
-        var controller = document.commandDispatcher.getControllerForCommand(command);
-        var enabled = controller.isCommandEnabled(command);
-        if (enabled)
-          children[i].removeAttribute("disabled");
-        else
-          children[i].setAttribute("disabled", "true");
-      }
-    }
-  }
-
-  get spellCheckerUI() {
-    if (!this._spellCheckInitialized) {
-      this._spellCheckInitialized = true;
-
-      if (ChromeUtils.getClassName(document) != "XULDocument")
-        return null;
-
-      var textbox = document.getBindingParent(this);
-      if (!textbox || textbox.localName != "textbox")
-        return null;
-
-      try {
-        ChromeUtils.import("resource://gre/modules/InlineSpellChecker.jsm", this);
-        this.InlineSpellCheckerUI = new this.InlineSpellChecker(textbox.editor);
-      } catch (ex) {}
-    }
-
-    return this.InlineSpellCheckerUI;
-  }
-
-  getMenuItem(anonid) {
-    return this.querySelector(`[anonid="${anonid}"]`);
-  }
-
-  _setMenuItemVisibility(anonid, visible) {
-    this.getMenuItem(anonid).hidden = !visible;
-  }
-
-  doCommand(command) {
-    var controller = document.commandDispatcher.getControllerForCommand(command);
-    controller.doCommand(command);
-  }
 }
 
 customElements.define("moz-input-box", MozInputBox);
 }
