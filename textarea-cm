# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  030883b69b7cc43bb5def04f1fc49d6b3b475a89

diff --git a/toolkit/content/widgets/textbox.js b/toolkit/content/widgets/textbox.js
--- a/toolkit/content/widgets/textbox.js
+++ b/toolkit/content/widgets/textbox.js
@@ -2,16 +2,60 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 // This is loaded into chrome windows with the subscript loader. Wrap in
 // a block to prevent accidentally leaking globals onto `window`.
 {
+  function openContextMenu(target, screenX, screenY) {
+    let popupset = document.querySelector("popupset");
+    if (!popupset) {
+      popupset = document.createXULElement("popupset");
+      document.documentElement.appendChild(popupset);
+    }
+
+    let popup = document.getElementById("textbox-edit");
+    if (!popup) {
+      popupset.appendChild(document.importNode(cachedFragments.normal, true));
+      popup = document.getElementById("textbox-edit");
+      popup.addEventListener("popupshowing", () => {
+        var children = popup.childNodes;
+        for (var i = 0; i < children.length; i++) {
+          var command = children[i].getAttribute("cmd");
+          if (command) {
+            var controller = document.commandDispatcher.getControllerForCommand(command);
+            var enabled = controller.isCommandEnabled(command);
+            if (enabled)
+              children[i].removeAttribute("disabled");
+            else
+              children[i].setAttribute("disabled", "true");
+          }
+        }
+      });
+
+      popup.addEventListener("command", event => {
+        var cmd = event.originalTarget.getAttribute("cmd");
+        if (cmd) {
+          window.docShell.doCommand(cmd);
+          event.stopPropagation();
+        }
+      });
+    }
+
+    popup.openPopupAtScreen(screenX, screenY, true);
+  }
+
+  window.addEventListener("contextmenu", (e) => {
+    if (e.target.ownerDocument == document && e.target.localName == "textarea") {
+      openContextMenu(e.target, e.screenX, e.screenY);
+    }
+  });
+
 const cachedFragments = {
   get entities() {
     return [
       "chrome://global/locale/textcontext.dtd",
     ];
   },
   get editMenuItems() {
     return `
@@ -23,26 +67,26 @@ const cachedFragments = {
       <menuitem label="&deleteCmd.label;" accesskey="&deleteCmd.accesskey;" cmd="cmd_delete"></menuitem>
       <menuseparator></menuseparator>
       <menuitem label="&selectAllCmd.label;" accesskey="&selectAllCmd.accesskey;" cmd="cmd_selectAll"></menuitem>
     `;
   },
   get normal() {
     delete this.normal;
     this.normal = MozXULElement.parseXULToFragment(`
-      <menupopup class="textbox-contextmenu">
+      <menupopup id="textbox-edit" class="textbox-contextmenu">
         ${this.editMenuItems}
       </menupopup>
     `, this.entities);
     return this.normal;
   },
   get spellcheck() {
     delete this.spellcheck;
     this.spellcheck = MozXULElement.parseXULToFragment(`
-      <menupopup class="textbox-contextmenu">
+      <menupopup id="textbox-edit-spellcheck" class="textbox-contextmenu">
         <menuitem label="&spellNoSuggestions.label;" anonid="spell-no-suggestions" disabled="true"></menuitem>
         <menuitem label="&spellAddToDictionary.label;" accesskey="&spellAddToDictionary.accesskey;" anonid="spell-add-to-dictionary" oncommand="this.parentNode.parentNode.spellCheckerUI.addToDictionary();"></menuitem>
         <menuitem label="&spellUndoAddToDictionary.label;" accesskey="&spellUndoAddToDictionary.accesskey;" anonid="spell-undo-add-to-dictionary" oncommand="this.parentNode.parentNode.spellCheckerUI.undoAddToDictionary();"></menuitem>
         <menuseparator anonid="spell-suggestions-separator"></menuseparator>
         ${this.editMenuItems}
         <menuseparator anonid="spell-check-separator"></menuseparator>
         <menuitem label="&spellCheckToggle.label;" type="checkbox" accesskey="&spellCheckToggle.accesskey;" anonid="spell-check-enabled" oncommand="this.parentNode.parentNode.spellCheckerUI.toggleEnabled();"></menuitem>
         <menu label="&spellDictionaries.label;" accesskey="&spellDictionaries.accesskey;" anonid="spell-dictionaries">
@@ -50,29 +94,36 @@ const cachedFragments = {
         </menu>
       </menupopup>
     `, this.entities);
     return this.spellcheck;
   },
 };
 
 class MozInputBox extends MozXULElement {
-  static get observedAttributes() {
-    return ["spellcheck"];
-  }
 
-  attributeChangedCallback(name, oldValue, newValue) {
-    if (name === "spellcheck" && oldValue != newValue) {
-      this._initUI();
-    }
+  constructor() {
+    super();
+    this.addEventListener("contextmenu", (e) => {
+      openContextMenu(this, e.screenX, e.screenY);
+    })
   }
+  // static get observedAttributes() {
+  //   return ["spellcheck"];
+  // }
 
-  connectedCallback() {
-    this._initUI();
-  }
+  // attributeChangedCallback(name, oldValue, newValue) {
+  //   if (name === "spellcheck" && oldValue != newValue) {
+  //     this._initUI();
+  //   }
+  // }
+
+  // connectedCallback() {
+  //   this._initUI();
+  // }
 
   _initUI() {
     this.spellcheck = this.hasAttribute("spellcheck");
     if (this.menupopup) {
       this.menupopup.remove();
     }
 
     this.setAttribute("context", "_child");
