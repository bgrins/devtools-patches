# HG changeset patch
# Parent a404daa686f8b719a040c6281280e5b6bd6697c0
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  c0262092fed258760ba2c55975c0cac6020fa408
Bug 1026479 - Add a unified search across all tools in the toolbox

diff --git a/browser/devtools/debugger/debugger-panes.js b/browser/devtools/debugger/debugger-panes.js
--- a/browser/devtools/debugger/debugger-panes.js
+++ b/browser/devtools/debugger/debugger-panes.js
@@ -2877,17 +2877,17 @@ GlobalSearchView.prototype = Heritage.ex
       }
     }
 
     // Rebuild the results, then signal if there are any matches.
     if (globalResults.matchCount) {
       this.hidden = false;
       this._currentlyFocusedMatch = -1;
       this._createGlobalResultsUI(globalResults);
-      window.emit(EVENTS.GLOBAL_SEARCH_MATCH_FOUND);
+      window.emit(EVENTS.GLOBAL_SEARCH_MATCH_FOUND, globalResults);
     } else {
       window.emit(EVENTS.GLOBAL_SEARCH_MATCH_NOT_FOUND);
     }
   },
 
   /**
    * Creates global search results entries and adds them to this container.
    *
diff --git a/browser/devtools/framework/moz.build b/browser/devtools/framework/moz.build
--- a/browser/devtools/framework/moz.build
+++ b/browser/devtools/framework/moz.build
@@ -10,13 +10,14 @@ EXTRA_JS_MODULES.devtools += [
     'gDevTools.jsm',
     'ToolboxProcess.jsm',
 ]
 
 EXTRA_JS_MODULES.devtools.framework += [
     'selection.js',
     'sidebar.js',
     'target.js',
+    'toolbox-find.js',
     'toolbox-highlighter-utils.js',
     'toolbox-hosts.js',
     'toolbox-options.js',
     'toolbox.js',
 ]
diff --git a/browser/devtools/framework/toolbox-find.js b/browser/devtools/framework/toolbox-find.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/framework/toolbox-find.js
@@ -0,0 +1,249 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const {Cu, Cc, Ci} = require("chrome");
+const Services = require("Services");
+const EventEmitter = require("devtools/toolkit/event-emitter");
+Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+XPCOMUtils.defineLazyModuleGetter(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm");
+
+exports.FindPane = FindPane;
+
+/**
+ *
+ */
+function FindPane(toolbox) {
+  EventEmitter.decorate(this);
+  this.toolbox = toolbox;
+  this.isReady = false;
+
+  this._finding = false;
+
+  this.findAll = this.findAll.bind(this);
+  this.endFindAll = this.endFindAll.bind(this);
+  this.toggleFindAll = this.toggleFindAll.bind(this);
+  this._findTextBoxInput = this._findTextBoxInput.bind(this);
+  this._onFindKeyPress = this._onFindKeyPress.bind(this);
+  this._onFindBeforeNavigate = this._onFindBeforeNavigate.bind(this);
+  this._onResultClicked = this._onResultClicked.bind(this);
+
+  this._findPanel = this.doc.getElementById("toolbox-find");
+  this._findBoxContainer = this.doc.getElementById("toolbox-find-box-container");
+  this._findSplitter = this.doc.getElementById("toolbox-find-splitter");
+
+  this._findResultPanel = this.doc.getElementById("find-results");
+  this._findResultPanel.addEventListener("click", this._onResultClicked, false);
+
+  this._findAllKey = this.doc.getElementById("toolbox-find-all-key");
+  this._findAllKey.addEventListener("command", this.toggleFindAll, true);
+
+  this._findClose = this.doc.getElementById("find-close");
+  this._findClose.addEventListener("click", this.endFindAll, false);
+
+  this._findButton = this.doc.getElementById("find-go");
+  this._findButton.addEventListener("click", this.findAll, false);
+
+  this._findTextBox = this.doc.getElementById("find-box");
+  this._findTextBox.addEventListener("select", this._findTextBoxInput, false);
+  this._findTextBox.addEventListener("input", this._findTextBoxInput, false);
+  this._findTextBox.addEventListener("keypress", this._onFindKeyPress, false);
+  // this._findTextBox.addEventListener("blur", this._onBlur, false);
+  // this._findTextBox.addEventListener("click", this._onClick, false);
+
+  this.selectedFindTools = this.doc.getElementById("selected-find-tools");
+  this.getAllFindableTools().forEach(([id, toolDefinition]) => {
+    let check = this.doc.createElement("checkbox");
+    check.id = "find-selected-" + id;
+    check.setAttribute("label", id);
+    check.setAttribute("checked", "true");
+    this.selectedFindTools.appendChild(check);
+  });
+
+  this.toolbox.on("options-selected", this.endFindAll);
+
+
+  this.target.on("will-navigate", this._onFindBeforeNavigate);
+
+}
+
+FindPane.prototype = {
+
+  get doc() {
+    return this.toolbox.doc;
+  },
+
+  get target() {
+    return this.toolbox.target;
+  },
+
+  get finding() {
+    return this._finding;
+  },
+
+  destroy: function() {
+    this.toolbox.off("options-selected", this.endFindAll);
+    this.target.off("will-navigate", this._onFindBeforeNavigate);
+
+    this._findResultPanel.removeEventListener("click", this._onResultClicked, false);
+    this._findAllKey.removeEventListener("command", this.toggleFindAll, true);
+    this._findClose.removeEventListener("click", this.endFindAll, false);
+    this._findButton.removeEventListener("click", this.findAll, false);
+    this._findTextBox.removeEventListener("select", this._findTextBoxInput, false);
+    this._findTextBox.removeEventListener("input", this._findTextBoxInput, false);
+    this._findTextBox.removeEventListener("keypress", this._onFindKeyPress, false);
+  },
+
+  getAllFindableTools: function() {
+    let findableTools = [];
+    for (let [id, toolDefinition] of gDevTools.getToolDefinitionMap()) {
+      if (toolDefinition.searchable) {
+        findableTools.push([id, toolDefinition]);
+      }
+    }
+    return findableTools;
+  },
+
+  getSelectedFindableTools: function() {
+    let findableTools = this.getAllFindableTools();
+    return findableTools.filter(([id]) => {
+      return this.doc.getElementById("find-selected-" + id).getAttribute("checked") == "true";
+    })
+  },
+
+  openAllSelectedFindableTools: function() {
+    let findableTools = this.getSelectedFindableTools();
+    let toolLoaders = findableTools.map(([id, toolDefinition]) => {
+      return this.toolbox.loadTool(id);
+    });
+
+    return Promise.all(toolLoaders).then(() => {
+      return findableTools;
+    });
+  },
+
+  toggleFindAll: function() {
+    if (this._finding) {
+      this.endFindAll();
+    } else {
+      this.beginFindAll();
+    }
+  },
+
+  beginFindAll: function(e) {
+    if (this._finding) {
+      return;
+    }
+    this._finding = true;
+    this.openAllSelectedFindableTools();
+
+    this._findBoxContainer.removeAttribute("collapsed");
+    this._findSplitter.removeAttribute("hidden");
+
+    this._findTextBox.focus();
+
+    if (this._findResultPanel.innerHTML != "") {
+      this._findResultPanel.removeAttribute("hidden");
+    }
+  },
+
+  endFindAll: function() {
+    if (!this._finding) {
+      return;
+    }
+    this._finding = false;
+    this._findPanel.setAttribute("collapsed", "true");
+    this._findBoxContainer.setAttribute("collapsed", "true");
+    this._findSplitter.setAttribute("hidden", "true");
+  },
+
+  findAll: function() {
+    this.openAllSelectedFindableTools().then((findableTools) => {
+      let value = this._findTextBox.value;
+
+      console.log("Searching for string " + value + " in " + findableTools.map(([id]) => {return id }).join(","));
+
+      this._findPanel.removeAttribute("collapsed");
+
+      this._findResultPanel.removeAttribute("hidden");
+      this._findResultPanel.innerHTML = "";
+
+      let results = [];
+      findableTools.forEach(([id, toolDefinition]) => {
+        let p = toolDefinition.onsearch(value, this.toolbox.getPanel(id), this);
+        if (!p || !p.then) {
+          return;
+        }
+        console.log("Waiting for " + id + " results");
+        p.then(r => {
+          if (!r) {
+            return;
+          }
+          console.log("Received " + r.length + " results for " + id);
+          r.forEach(result=> {
+            let node;
+            if (result.render) {
+              node = result.render();
+            } else {
+              node = result;
+            }
+            let clickableNode = this.doc.createElement("box");
+            clickableNode.classList.add("find-result");
+            clickableNode.appendChild(node);
+            this._findResultPanel.appendChild(clickableNode);
+          });
+        });
+      });
+
+
+      // XXX: populating with fake data
+      // for (let i = 0; i < 100; i++) {
+      //   let box = this.doc.createElement("box");
+      //   box.textContent = "Search result #" + i + ": " + value;
+      //   results.push(box);
+      // }
+
+      // results.forEach(result=> {
+      //   findResultPanel.appendChild(result);
+      // });
+    });
+  },
+
+  _onFindBeforeNavigate: function() {
+
+  },
+
+  _onResultClicked: function(e) {
+    console.log("Result has been clicked", e.target, e.originalTarget);
+    let el = closest(e.originalTarget, ".find-result");
+    if (el) {
+      // XXX: an element matched, need to notify the panel or somehow
+      // deep link into it to highlight the result
+    }
+  },
+
+  _onFindKeyPress: function(e) {
+    if (e.keyCode === e.DOM_VK_RETURN) {
+      this.findAll();
+    }
+  },
+
+  _findTextBoxInput: function() {
+  },
+
+};
+
+function closest(elem, selector) {
+
+   var matchesSelector = elem.mozMatchesSelector;
+    while (elem) {
+        if (matchesSelector.bind(elem)(selector)) {
+            return elem;
+        } else {
+            elem = elem.parentElement;
+        }
+    }
+    return false;
+}
diff --git a/browser/devtools/framework/toolbox.js b/browser/devtools/framework/toolbox.js
--- a/browser/devtools/framework/toolbox.js
+++ b/browser/devtools/framework/toolbox.js
@@ -16,16 +16,17 @@ const SCREENSIZE_HISTOGRAM = "DEVTOOLS_S
 
 let {Cc, Ci, Cu} = require("chrome");
 let {Promise: promise} = require("resource://gre/modules/Promise.jsm");
 let EventEmitter = require("devtools/toolkit/event-emitter");
 let Telemetry = require("devtools/shared/telemetry");
 let {getHighlighterUtils} = require("devtools/framework/toolbox-highlighter-utils");
 let HUDService = require("devtools/webconsole/hudservice");
 let {showDoorhanger} = require("devtools/shared/doorhanger");
+let {FindPane} = require("devtools/framework/toolbox-find");
 
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource:///modules/devtools/gDevTools.jsm");
 Cu.import("resource:///modules/devtools/scratchpad-manager.jsm");
 Cu.import("resource:///modules/devtools/DOMHelpers.jsm");
 Cu.import("resource://gre/modules/Task.jsm");
 
@@ -106,17 +107,17 @@ function Toolbox(target, selectedTool, h
   this._toolPanels = new Map();
   this._telemetry = new Telemetry();
 
   this._toolRegistered = this._toolRegistered.bind(this);
   this._toolUnregistered = this._toolUnregistered.bind(this);
   this._refreshHostTitle = this._refreshHostTitle.bind(this);
   this.selectFrame = this.selectFrame.bind(this);
   this._updateFrames = this._updateFrames.bind(this);
-  this._splitConsoleOnKeypress = this._splitConsoleOnKeypress.bind(this);
+  this._onDocKeypress = this._onDocKeypress.bind(this);
   this.destroy = this.destroy.bind(this);
   this.highlighterUtils = getHighlighterUtils(this);
   this._highlighterReady = this._highlighterReady.bind(this);
   this._highlighterHidden = this._highlighterHidden.bind(this);
   this._prefChanged = this._prefChanged.bind(this);
   this._saveSplitConsoleHeight = this._saveSplitConsoleHeight.bind(this);
   this._onFocus = this._onFocus.bind(this);
   this._showDevEditionPromo = this._showDevEditionPromo.bind(this);
@@ -336,16 +337,17 @@ Toolbox.prototype = {
         this._addReloadKeys();
         this._addHostListeners();
         if (this._hostOptions && this._hostOptions.zoom === false) {
           this._disableZoomKeys();
         } else {
           this._addZoomKeys();
           this._loadInitialZoom();
         }
+        this.findPane = new FindPane(this);
 
         this.webconsolePanel = this.doc.querySelector("#toolbox-panel-webconsole");
         this.webconsolePanel.height =
           Services.prefs.getIntPref(SPLITCONSOLE_HEIGHT_PREF);
         this.webconsolePanel.addEventListener("resize",
           this._saveSplitConsoleHeight);
 
         let buttonsPromise = this._buildButtons();
@@ -414,18 +416,24 @@ Toolbox.prototype = {
 
   _buildOptions: function() {
     let key = this.doc.getElementById("toolbox-options-key");
     key.addEventListener("command", () => {
       this.selectTool("options");
     }, true);
   },
 
-  _splitConsoleOnKeypress: function(e) {
+  _onDocKeypress: function(e) {
     if (e.keyCode === e.DOM_VK_ESCAPE) {
+
+      if (this.findPane.finding) {
+        this.endFindAll();
+        return;
+      }
+
       this.toggleSplitConsole();
       // If the debugger is paused, don't let the ESC key stop any pending
       // navigation.
       let jsdebugger = this.getPanel("jsdebugger");
       if (jsdebugger && jsdebugger.panelWin.gThreadClient.state == "paused") {
         e.preventDefault();
       }
     }
@@ -447,17 +455,17 @@ Toolbox.prototype = {
   _addHostListeners: function() {
     let nextKey = this.doc.getElementById("toolbox-next-tool-key");
     nextKey.addEventListener("command", this.selectNextTool.bind(this), true);
     let prevKey = this.doc.getElementById("toolbox-previous-tool-key");
     prevKey.addEventListener("command", this.selectPreviousTool.bind(this), true);
 
     // Split console uses keypress instead of command so the event can be
     // cancelled with stopPropagation on the keypress, and not preventDefault.
-    this.doc.addEventListener("keypress", this._splitConsoleOnKeypress, false);
+    this.doc.addEventListener("keypress", this._onDocKeypress, false);
 
     this.doc.addEventListener("focus", this._onFocus, true);
   },
 
   _saveSplitConsoleHeight: function() {
     Services.prefs.setIntPref(SPLITCONSOLE_HEIGHT_PREF,
       this.webconsolePanel.height);
   },
@@ -1640,17 +1648,17 @@ Toolbox.prototype = {
    * Destroy the current host, and remove event listeners from its frame.
    *
    * @return {promise} to be resolved when the host is destroyed.
    */
   destroyHost: function() {
     // The host iframe's contentDocument may already be gone.
     if (this.doc) {
       this.doc.removeEventListener("keypress",
-        this._splitConsoleOnKeypress, false);
+        this._onDocKeypress, false);
       this.doc.removeEventListener("focus", this._onFocus, true);
     }
     return this._host.destroy();
   },
 
   /**
    * Remove all UI elements, detach from target and clear up
    */
@@ -1668,16 +1676,18 @@ Toolbox.prototype = {
     this.off("select", this._refreshHostTitle);
     this.off("host-changed", this._refreshHostTitle);
 
     gDevTools.off("tool-registered", this._toolRegistered);
     gDevTools.off("tool-unregistered", this._toolUnregistered);
 
     gDevTools.off("pref-changed", this._prefChanged);
 
+    this.findPane.destroy();
+
     this._lastFocusedElement = null;
     if (this.webconsolePanel) {
       this._saveSplitConsoleHeight();
       this.webconsolePanel.removeEventListener("resize",
         this._saveSplitConsoleHeight);
     }
     this.closeButton.removeEventListener("command", this.destroy, true);
 
diff --git a/browser/devtools/framework/toolbox.xul b/browser/devtools/framework/toolbox.xul
--- a/browser/devtools/framework/toolbox.xul
+++ b/browser/devtools/framework/toolbox.xul
@@ -58,16 +58,20 @@
     <key id="toolbox-reload-key2"
          keycode="VK_F5"
          oncommand="void(0);"
          modifiers=""/>
     <key id="toolbox-force-reload-key2"
          keycode="VK_F5"
          oncommand="void(0);"
          modifiers="accel"/>
+    <key id="toolbox-find-all-key"
+         key="&toolboxFindAll.key;"
+         oncommand="void(0);"
+         modifiers="accel alt"/>
   </keyset>
 
   <notificationbox id="toolbox-notificationbox" flex="1">
     <toolbar class="devtools-tabbar">
       <hbox id="toolbox-picker-container" />
       <hbox id="toolbox-tabs" flex="1" role="tablist" />
       <hbox id="toolbox-buttons" pack="end">
         <toolbarbutton id="command-button-frames"
@@ -90,11 +94,37 @@
     <vbox flex="1">
       <!-- Set large flex to allow the toolbox-panel-webconsole to have a
            height set to a small value without flexing to fill up extra
            space. There must be a flex on both to ensure that the console
            panel itself is sized properly -->
       <deck id="toolbox-deck" flex="1000" minheight="75" />
       <splitter id="toolbox-console-splitter" class="devtools-horizontal-splitter" hidden="true" />
       <box minheight="75" flex="1" id="toolbox-panel-webconsole" collapsed="true" />
+      <splitter id="toolbox-find-splitter" class="devtools-horizontal-splitter" hidden="true" />
+      <vbox id="toolbox-find"
+            collapsed="true"
+            flex="1"
+            class="theme-body"
+            style="overflow: auto; min-height: 20px;">
+        <scrollbox id="find-results"
+                   orient="vertical">
+        </scrollbox>
+      </vbox>
+      <toolbar id="toolbox-find-box-container"
+               collapsed="true"
+               class="devtools-toolbar"
+               style="max-height: 24px; min-height: 24px;">
+        <textbox id="find-box"
+                 class="devtools-searchinput" type="search"/>
+        <toolbarbutton id="find-go"
+                       label="Search"
+                       class="devtools-toolbarbutton" />
+        <hbox id="selected-find-tools">
+
+        </hbox>
+        <spacer flex="1" />
+        <toolbarbutton id="find-close"
+                       class="devtools-closebutton" />
+       </toolbar>
     </vbox>
   </notificationbox>
 </window>
diff --git a/browser/devtools/main.js b/browser/devtools/main.js
--- a/browser/devtools/main.js
+++ b/browser/devtools/main.js
@@ -96,16 +96,41 @@ Tools.inspector = {
   modifiers: osString == "Darwin" ? "accel,alt" : "accel,shift",
   icon: "chrome://browser/skin/devtools/tool-inspector.svg",
   invertIconForLightTheme: true,
   url: "chrome://browser/content/devtools/inspector/inspector.xul",
   label: l10n("inspector.label", inspectorStrings),
   panelLabel: l10n("inspector.panelLabel", inspectorStrings),
   tooltip: l10n("inspector.tooltip", inspectorStrings),
   inMenu: true,
+  searchable: true,
+  onsearch: function(value, panel, toolbox) {
+
+    // XXX: This is the API that we will want to proved to panels.
+    let def = Promise.defer();
+    let result = { // maybe `new SearchResult()` instead?
+      label: "body",
+      render: function() {
+        let b = toolbox.doc.createElement("box");
+        b.textContent = this.label;
+        return b
+      }
+    }
+    let result2 = { // maybe `new SearchResult()` instead?
+      label: "html -> Some fake result",
+      render: function() {
+        let b = toolbox.doc.createElement("box");
+        b.textContent = this.label;
+        return b
+      }
+    }
+
+    def.resolve([result, result2]);
+    return def.promise;
+  },
   commands: [
     "devtools/resize-commands",
     "devtools/inspector/inspector-commands",
     "devtools/eyedropper/commands.js"
   ],
 
   preventClosingOnKey: true,
   onkey: function(panel) {
@@ -164,16 +189,40 @@ Tools.jsdebugger = {
   invertIconForLightTheme: true,
   highlightedicon: "chrome://browser/skin/devtools/tool-debugger-paused.svg",
   url: "chrome://browser/content/devtools/debugger.xul",
   label: l10n("ToolboxDebugger.label", debuggerStrings),
   panelLabel: l10n("ToolboxDebugger.panelLabel", debuggerStrings),
   tooltip: l10n("ToolboxDebugger.tooltip", debuggerStrings),
   inMenu: true,
   commands: "devtools/debugger/debugger-commands",
+  searchable: true,
+  onsearch: function(value, panel, toolbox) {
+    let def = Promise.defer();
+
+    // XXX: this is bridging the existing debugger search events into the new
+    // search API
+
+    panel.panelWin.on(panel.panelWin.EVENTS.GLOBAL_SEARCH_MATCH_FOUND, function(e, globalResults) {
+      let containers = [];
+      for (let lineResults of globalResults._store) {
+        let container = toolbox.doc.createElement("box");
+        lineResults.createView(container, {});
+        containers.push(container);
+      }
+      def.resolve(containers);
+    });
+
+    panel.panelWin.on(panel.panelWin.EVENTS.GLOBAL_SEARCH_MATCH_NOT_FOUND, () => {
+      def.resolve();
+    });
+
+    panel.panelWin.DebuggerView.GlobalSearch.scheduleSearch(value);
+    return def.promise;
+  },
 
   isTargetSupported: function(target) {
     return true;
   },
 
   build: function(iframeWindow, toolbox) {
     return new DebuggerPanel(iframeWindow, toolbox);
   }
diff --git a/browser/locales/en-US/chrome/browser/devtools/toolbox.dtd b/browser/locales/en-US/chrome/browser/devtools/toolbox.dtd
--- a/browser/locales/en-US/chrome/browser/devtools/toolbox.dtd
+++ b/browser/locales/en-US/chrome/browser/devtools/toolbox.dtd
@@ -13,16 +13,17 @@
 <!ENTITY toolboxPreviousTool.key       "[">
 
 <!ENTITY toolboxZoomIn.key             "+">
 <!ENTITY toolboxZoomIn.key2            "="> <!-- + is above this key on many keyboards -->
 <!ENTITY toolboxZoomOut.key            "-">
 <!ENTITY toolboxZoomReset.key          "0">
 
 <!ENTITY toolboxReload.key             "r">
+<!ENTITY toolboxFindAll.key            "f">
 <!-- LOCALIZATION NOTE (toolboxFramesButton): This is the label for
   -  the iframes menu list that appears only when the document has some.
   -  It allows you to switch the context of the whole toolbox. -->
 <!ENTITY toolboxFramesTooltip          "Select an iframe as the currently targeted document">
 
 <!-- LOCALIZATION NOTE (browserToolboxErrorMessage): This is the label
   -  shown next to error details when the Browser Toolbox is unable to open. -->
 <!ENTITY browserToolboxErrorMessage          "Error opening Browser Toolbox:">
diff --git a/browser/themes/shared/devtools/toolbars.inc.css b/browser/themes/shared/devtools/toolbars.inc.css
--- a/browser/themes/shared/devtools/toolbars.inc.css
+++ b/browser/themes/shared/devtools/toolbars.inc.css
@@ -38,16 +38,20 @@
 .devtools-toolbar checkbox .checkbox-label-box {
   border: none !important; /* overrides .checkbox-label-box from checkbox.css */
 }
 .devtools-toolbar checkbox .checkbox-label-box .checkbox-label {
   margin: 0 6px !important; /* overrides .checkbox-label from checkbox.css */
   padding: 0;
 }
 
+#toolbox-find-box-container {
+  border-bottom-width: 0;
+}
+
 /* Toolbar buttons */
 .devtools-menulist,
 .devtools-toolbarbutton {
   -moz-appearance: none;
   -moz-box-align: center;
   background: transparent;
   min-width: 78px;
   min-height: 18px;
