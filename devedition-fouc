# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  506323d5ecc3e5a9654cd5413da0b392c81bea1c
Bug 1141326 - Get rid of flash of unstyled content for DevEdition theme;r=Gijs

diff --git a/browser/base/content/browser-devedition.js b/browser/base/content/browser-devedition.js
--- a/browser/base/content/browser-devedition.js
+++ b/browser/base/content/browser-devedition.js
@@ -6,22 +6,49 @@
  * Listeners for the DevEdition theme.  This adds an extra stylesheet
  * to browser.xul if a pref is set and no other themes are applied.
  */
 let DevEdition = {
   _devtoolsThemePrefName: "devtools.theme",
   styleSheetLocation: "chrome://browser/skin/devedition.css",
   styleSheet: null,
 
+  get isStyleSheetEnabled() {
+    return !this.styleSheet.disabled;
+  },
+
   get isThemeCurrentlyApplied() {
     let theme = LightweightThemeManager.currentTheme;
     return theme && theme.id == "firefox-devedition@mozilla.org";
   },
 
   init: function () {
+
+    for (let i = document.styleSheets.length - 1; i >= 0; i--) {
+      let sheet = document.styleSheets[i];
+      if (sheet.href == "chrome://browser/skin/devedition.css") {
+        this.styleSheet = sheet;
+        break;
+      }
+    }
+
+    // This should never happen since this is added in browser.xul,
+    // but just to be safe, we don't want to throw.
+    if (!this.styleSheet) {
+      console.error("DevEdition - no stylesheet detected");
+      return;
+    }
+
+    // A hack was needed to disable the stylesheet loaded in browser.xul.
+    // Instead of setting disabled which isn't allowed, we set media="none".
+    // Clear that out now, and use disabled for the rest of the file.
+    // http://www.w3.org/TR/xml-stylesheet/#dt-xml-stylesheet
+    this.styleSheet.disabled = true;
+    this.styleSheet.media.mediaText = "";
+
     Services.prefs.addObserver(this._devtoolsThemePrefName, this, false);
     Services.obs.addObserver(this, "lightweight-theme-styling-update", false);
     this._updateDevtoolsThemeAttribute();
 
     if (this.isThemeCurrentlyApplied) {
       this._toggleStyleSheet(true);
     }
   },
@@ -39,17 +66,17 @@ let DevEdition = {
     if (topic == "nsPref:changed" && data == this._devtoolsThemePrefName) {
       this._updateDevtoolsThemeAttribute();
     }
   },
 
   _inferBrightness: function() {
     ToolbarIconColor.inferFromText();
     // Get an inverted full screen button if the dark theme is applied.
-    if (this.styleSheet &&
+    if (this.isStyleSheetEnabled &&
         document.documentElement.getAttribute("devtoolstheme") == "dark") {
       document.documentElement.setAttribute("brighttitlebarforeground", "true");
     } else {
       document.documentElement.removeAttribute("brighttitlebarforeground");
     }
   },
 
   _updateDevtoolsThemeAttribute: function() {
@@ -58,43 +85,29 @@ let DevEdition = {
     let devtoolsTheme = Services.prefs.getCharPref(this._devtoolsThemePrefName);
     if (devtoolsTheme != "dark") {
       devtoolsTheme = "light";
     }
     document.documentElement.setAttribute("devtoolstheme", devtoolsTheme);
     this._inferBrightness();
   },
 
-  handleEvent: function(e) {
-    if (e.type === "load") {
-      this.styleSheet.removeEventListener("load", this);
+  _toggleStyleSheet: function(deveditionThemeEnabled) {
+    let wasEnabled = this.isStyleSheetEnabled;
+    if (deveditionThemeEnabled && !wasEnabled) {
+      this.styleSheet.disabled = false;
       gBrowser.tabContainer._positionPinnedTabs();
       this._inferBrightness();
-    }
-  },
-
-  _toggleStyleSheet: function(deveditionThemeEnabled) {
-    if (deveditionThemeEnabled && !this.styleSheet) {
-      let styleSheetAttr = `href="${this.styleSheetLocation}" type="text/css"`;
-      this.styleSheet = document.createProcessingInstruction(
-        'xml-stylesheet', styleSheetAttr);
-      this.styleSheet.addEventListener("load", this);
-      document.insertBefore(this.styleSheet, document.documentElement);
-      // NB: we'll notify observers once the stylesheet has fully loaded, see
-      // handleEvent above.
-    } else if (!deveditionThemeEnabled && this.styleSheet) {
-      this.styleSheet.removeEventListener("load", this);
-      this.styleSheet.remove();
-      this.styleSheet = null;
+    } else if (!deveditionThemeEnabled && wasEnabled) {
+      this.styleSheet.disabled = true;
       gBrowser.tabContainer._positionPinnedTabs();
       this._inferBrightness();
     }
   },
 
   uninit: function () {
-    Services.prefs.removeObserver(this._devtoolsThemePrefName, this);
-    Services.obs.removeObserver(this, "lightweight-theme-styling-update", false);
     if (this.styleSheet) {
-      this.styleSheet.removeEventListener("load", this);
+      Services.prefs.removeObserver(this._devtoolsThemePrefName, this);
+      Services.obs.removeObserver(this, "lightweight-theme-styling-update", false);
+      this.styleSheet = null;
     }
-    this.styleSheet = null;
   }
 };
diff --git a/browser/base/content/browser.xul b/browser/base/content/browser.xul
--- a/browser/base/content/browser.xul
+++ b/browser/base/content/browser.xul
@@ -7,16 +7,17 @@
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 <?xml-stylesheet href="chrome://browser/content/browser.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/content/places/places.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/skin/devtools/common.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/skin/customizableui/panelUIOverlay.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/skin/" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/skin/browser-lightweightTheme.css" type="text/css"?>
+<?xml-stylesheet href="chrome://browser/skin/devedition.css" media="none" type="text/css"?>
 
 <?xul-overlay href="chrome://global/content/editMenuOverlay.xul"?>
 <?xul-overlay href="chrome://browser/content/baseMenuOverlay.xul"?>
 <?xul-overlay href="chrome://browser/content/places/placesOverlay.xul"?>
 
 # All DTD information is stored in a separate file so that it can be shared by
 # hiddenWindow.xul.
 #include browser-doctype.inc
diff --git a/browser/base/content/test/general/browser_devedition.js b/browser/base/content/test/general/browser_devedition.js
--- a/browser/base/content/test/general/browser_devedition.js
+++ b/browser/base/content/test/general/browser_devedition.js
@@ -22,63 +22,63 @@ registerCleanupFunction(() => {
   LightweightThemeManager.clearBuiltInThemes();
 });
 
 add_task(function* startTests() {
   Services.prefs.setCharPref(PREF_DEVTOOLS_THEME, "dark");
 
   info ("Setting the current theme to null");
   LightweightThemeManager.currentTheme = null;
-  ok (!DevEdition.styleSheet, "There is no devedition style sheet when no lw theme is applied.");
+  ok (!DevEdition.isStyleSheetEnabled, "There is no devedition style sheet when no lw theme is applied.");
 
   info ("Adding a lightweight theme.");
   LightweightThemeManager.currentTheme = dummyLightweightTheme("preview0");
-  ok (!DevEdition.styleSheet, "The devedition stylesheet has been removed when a lightweight theme is applied.");
+  ok (!DevEdition.isStyleSheetEnabled, "The devedition stylesheet has been removed when a lightweight theme is applied.");
 
   info ("Applying the devedition lightweight theme.");
   let onAttributeAdded = waitForBrightTitlebarAttribute();
   LightweightThemeManager.currentTheme = LightweightThemeManager.getUsedTheme("firefox-devedition@mozilla.org");
-  ok (DevEdition.styleSheet, "The devedition stylesheet has been added when the devedition lightweight theme is applied");
+  ok (DevEdition.isStyleSheetEnabled, "The devedition stylesheet has been added when the devedition lightweight theme is applied");
   yield onAttributeAdded;
   is (document.documentElement.getAttribute("brighttitlebarforeground"), "true",
      "The brighttitlebarforeground attribute is set on the window.");
 
   info ("Unapplying all themes.");
   LightweightThemeManager.currentTheme = null;
-  ok (!DevEdition.styleSheet, "There is no devedition style sheet when no lw theme is applied.");
+  ok (!DevEdition.isStyleSheetEnabled, "There is no devedition style sheet when no lw theme is applied.");
 
   info ("Applying the devedition lightweight theme.");
   onAttributeAdded = waitForBrightTitlebarAttribute();
   LightweightThemeManager.currentTheme = LightweightThemeManager.getUsedTheme("firefox-devedition@mozilla.org");
-  ok (DevEdition.styleSheet, "The devedition stylesheet has been added when the devedition lightweight theme is applied");
+  ok (DevEdition.isStyleSheetEnabled, "The devedition stylesheet has been added when the devedition lightweight theme is applied");
   yield onAttributeAdded;
   ok (document.documentElement.hasAttribute("brighttitlebarforeground"),
      "The brighttitlebarforeground attribute is set on the window with dark devtools theme.");
 });
 
 add_task(function* testDevtoolsTheme() {
   info ("Checking stylesheet and :root attributes based on devtools theme.");
   Services.prefs.setCharPref(PREF_DEVTOOLS_THEME, "light");
   is (document.documentElement.getAttribute("devtoolstheme"), "light",
     "The documentElement has an attribute based on devtools theme.");
-  ok (DevEdition.styleSheet, "The devedition stylesheet is still there with the light devtools theme.");
+  ok (DevEdition.isStyleSheetEnabled, "The devedition stylesheet is still there with the light devtools theme.");
   ok (!document.documentElement.hasAttribute("brighttitlebarforeground"),
      "The brighttitlebarforeground attribute is not set on the window with light devtools theme.");
 
   Services.prefs.setCharPref(PREF_DEVTOOLS_THEME, "dark");
   is (document.documentElement.getAttribute("devtoolstheme"), "dark",
     "The documentElement has an attribute based on devtools theme.");
-  ok (DevEdition.styleSheet, "The devedition stylesheet is still there with the dark devtools theme.");
+  ok (DevEdition.isStyleSheetEnabled, "The devedition stylesheet is still there with the dark devtools theme.");
   is (document.documentElement.getAttribute("brighttitlebarforeground"), "true",
      "The brighttitlebarforeground attribute is set on the window with dark devtools theme.");
 
   Services.prefs.setCharPref(PREF_DEVTOOLS_THEME, "foobar");
   is (document.documentElement.getAttribute("devtoolstheme"), "light",
     "The documentElement has 'light' as a default for the devtoolstheme attribute");
-  ok (DevEdition.styleSheet, "The devedition stylesheet is still there with the foobar devtools theme.");
+  ok (DevEdition.isStyleSheetEnabled, "The devedition stylesheet is still there with the foobar devtools theme.");
   ok (!document.documentElement.hasAttribute("brighttitlebarforeground"),
      "The brighttitlebarforeground attribute is not set on the window with light devtools theme.");
 });
 
 function dummyLightweightTheme(id) {
   return {
     id: id,
     name: id,
@@ -87,33 +87,33 @@ function dummyLightweightTheme(id) {
     textcolor: "red",
     accentcolor: "blue"
   };
 }
 
 add_task(function* testLightweightThemePreview() {
   info ("Setting devedition to current and the previewing others");
   LightweightThemeManager.currentTheme = LightweightThemeManager.getUsedTheme("firefox-devedition@mozilla.org");
-  ok (DevEdition.styleSheet, "The devedition stylesheet is enabled.");
+  ok (DevEdition.isStyleSheetEnabled, "The devedition stylesheet is enabled.");
   LightweightThemeManager.previewTheme(dummyLightweightTheme("preview0"));
-  ok (!DevEdition.styleSheet, "The devedition stylesheet is not enabled after a lightweight theme preview.");
+  ok (!DevEdition.isStyleSheetEnabled, "The devedition stylesheet is not enabled after a lightweight theme preview.");
   LightweightThemeManager.resetPreview();
   LightweightThemeManager.previewTheme(dummyLightweightTheme("preview1"));
-  ok (!DevEdition.styleSheet, "The devedition stylesheet is not enabled after a second lightweight theme preview.");
+  ok (!DevEdition.isStyleSheetEnabled, "The devedition stylesheet is not enabled after a second lightweight theme preview.");
   LightweightThemeManager.resetPreview();
-  ok (DevEdition.styleSheet, "The devedition stylesheet is enabled again after resetting the preview.");
+  ok (DevEdition.isStyleSheetEnabled, "The devedition stylesheet is enabled again after resetting the preview.");
   LightweightThemeManager.currentTheme = null;
-  ok (!DevEdition.styleSheet, "The devedition stylesheet is gone after removing the current theme.");
+  ok (!DevEdition.isStyleSheetEnabled, "The devedition stylesheet is gone after removing the current theme.");
 
   info ("Previewing the devedition theme");
   LightweightThemeManager.previewTheme(LightweightThemeManager.getUsedTheme("firefox-devedition@mozilla.org"));
-  ok (DevEdition.styleSheet, "The devedition stylesheet is enabled.");
+  ok (DevEdition.isStyleSheetEnabled, "The devedition stylesheet is enabled.");
   LightweightThemeManager.previewTheme(dummyLightweightTheme("preview2"));
   LightweightThemeManager.resetPreview();
-  ok (!DevEdition.styleSheet, "The devedition stylesheet is now disabled after resetting the preview.");
+  ok (!DevEdition.isStyleSheetEnabled, "The devedition stylesheet is now disabled after resetting the preview.");
 });
 
 // Use a mutation observer to wait for the brighttitlebarforeground
 // attribute to change.  Using this instead of waiting for the load
 // event on the DevEdition styleSheet.
 function waitForBrightTitlebarAttribute() {
   return new Promise((resolve, reject) => {
     let mutationObserver = new MutationObserver(function (mutations) {
