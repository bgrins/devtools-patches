# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  4178f1b3a96c30aec00334d8dba9802517f284cf

diff --git a/browser/base/content/test/forms/browser_selectpopup.js b/browser/base/content/test/forms/browser_selectpopup.js
--- a/browser/base/content/test/forms/browser_selectpopup.js
+++ b/browser/base/content/test/forms/browser_selectpopup.js
@@ -324,17 +324,17 @@ async function doSelectTests(contentType
 add_task(async function setup() {
   await SpecialPowers.pushPrefEnv({
     set: [
       ["dom.select_popup_in_parent.enabled", true],
       ["dom.forms.select.customstyling", true],
     ],
   });
 });
-
+/*
 add_task(async function() {
   await doSelectTests("text/html", PAGECONTENT);
 });
 
 add_task(async function() {
   await doSelectTests("application/xhtml+xml", XHTML_DTD + "\n" + PAGECONTENT);
 });
 
@@ -601,17 +601,17 @@ add_task(async function test_event_order
 
         EventUtils.synthesizeKey("KEY_ArrowDown");
         await hideSelectPopup(selectPopup, mode);
         await eventsPromise;
       }
     }
   );
 });
-
+*/
 async function performLargePopupTests(win) {
   let browser = win.gBrowser.selectedBrowser;
 
   await ContentTask.spawn(browser, null, async function() {
     let doc = content.document;
     let select = doc.getElementById("one");
     for (var i = 0; i < 180; i++) {
       select.add(new content.Option("Test" + i));
@@ -620,23 +620,26 @@ async function performLargePopupTests(wi
     select.options[60].selected = true;
     select.focus();
   });
 
   let selectPopup = win.document.getElementById("ContentSelectDropdown")
     .menupopup;
   let browserRect = browser.getBoundingClientRect();
 
+/*
   // Check if a drag-select works and scrolls the list.
   await openSelectPopup(selectPopup, "mousedown", "select", win);
 
-  let getScrollPos = () => selectPopup.scrollBox.scrollbox.scrollTop;
+  let getScrollPos = () => {
+    selectPopup.getBoundingClientRect();
+    return selectPopup.scrollBox.scrollbox.scrollTop;
+  };
   let scrollPos = getScrollPos();
   let popupRect = selectPopup.getBoundingClientRect();
-
   // First, check that scrolling does not occur when the mouse is moved over the
   // anchor button but not the popup yet.
   EventUtils.synthesizeMouseAtPoint(
     popupRect.left + 5,
     popupRect.top - 10,
     { type: "mousemove" },
     win
   );
@@ -770,17 +773,17 @@ async function performLargePopupTests(wi
   );
   is(
     getScrollPos(),
     scrollPos,
     "scroll position at mousemove after mouseup should not change"
   );
 
   await hideSelectPopup(selectPopup, "escape", win);
-
+*/
   let positions = [
     "margin-top: 300px;",
     "position: fixed; bottom: 200px;",
     "width: 100%; height: 9999px;",
   ];
 
   let position;
   while (positions.length) {
@@ -814,16 +817,28 @@ async function performLargePopupTests(wi
       // accuracy, and only care about the final pixel value, so we add a
       // fuzz-factor of 1.
       SimpleTest.isfuzzy(
         selectPopup.children[selectedOption].getBoundingClientRect().bottom,
         selectPopup.getBoundingClientRect().bottom - bpBottom,
         1,
         "Popup scroll at correct position " + bpBottom
       );
+      if (selectPopup.getBoundingClientRect().bottom - bpBottom == 378) {
+        console.log(
+          positions[0],
+          selectPopup.children[selectedOption].getBoundingClientRect()
+        );
+        setTimeout(() => {
+          console.log(
+            selectPopup.children[selectedOption].getBoundingClientRect()
+          );
+        }, 1000)
+        await new Promise(r => r);
+      }
     }
 
     await hideSelectPopup(selectPopup, "enter", win);
 
     position = positions.shift();
 
     let contentPainted = BrowserTestUtils.contentPainted(browser);
     await ContentTask.spawn(browser, position, async function(contentPosition) {
