# HG changeset patch
# User Victor Porof <vporof@mozilla.com>
# Date 1542349191 -3600
#      Fri Nov 16 07:19:51 2018 +0100
# Node ID f6e564663f1e384c595856a5b1eb55b2805b8bdc
# Parent  0051c8d339a969d80b66e6ce243091a9dbb6a319
Bug 1503827 - Migrate the treebody binding into a custom element, r=bgrins

diff --git a/toolkit/content/widgets/tree.js b/toolkit/content/widgets/tree.js
--- a/toolkit/content/widgets/tree.js
+++ b/toolkit/content/widgets/tree.js
@@ -7,6 +7,163 @@
   // This is loaded into all XUL windows. Wrap in a block to prevent
   // leaking to window scope.
   {
+  class MozTreeChildren extends MozElements.BaseControl {
+    constructor() {
+      super();
+
+      /**
+       * If there is no modifier key, we select on mousedown, not
+       * click, so that drags work correctly.
+       */
+      this.addEventListener("mousedown", (event) => {
+        if (this.parentNode.disabled)
+          return;
+        if (((!event.getModifierState("Accel") ||
+              !this.parentNode.pageUpOrDownMovesSelection) &&
+            !event.shiftKey && !event.metaKey) ||
+          this.parentNode.view.selection.single) {
+          var b = this.parentNode.treeBoxObject;
+          var cell = b.getCellAt(event.clientX, event.clientY);
+          var view = this.parentNode.view;
+
+          // save off the last selected row
+          this._lastSelectedRow = cell.row;
+
+          if (cell.row == -1)
+            return;
+
+          if (cell.childElt == "twisty")
+            return;
+
+          if (cell.col && event.button == 0) {
+            if (cell.col.cycler) {
+              view.cycleCell(cell.row, cell.col);
+              return;
+            } else if (cell.col.type == window.TreeColumn.TYPE_CHECKBOX) {
+              if (this.parentNode.editable && cell.col.editable &&
+                view.isEditable(cell.row, cell.col)) {
+                var value = view.getCellValue(cell.row, cell.col);
+                value = value == "true" ? "false" : "true";
+                view.setCellValue(cell.row, cell.col, value);
+                return;
+              }
+            }
+          }
+
+          if (!view.selection.isSelected(cell.row)) {
+            view.selection.select(cell.row);
+            b.ensureRowIsVisible(cell.row);
+          }
+        }
+      });
+
+      /**
+       * On a click (up+down on the same item), deselect everything
+       * except this item.
+       */
+      this.addEventListener("click", (event) => {
+        if (event.button != 0) { return; }
+        if (this.parentNode.disabled)
+          return;
+        var b = this.parentNode.treeBoxObject;
+        var cell = b.getCellAt(event.clientX, event.clientY);
+        var view = this.parentNode.view;
+
+        if (cell.row == -1)
+          return;
+
+        if (cell.childElt == "twisty") {
+          if (view.selection.currentIndex >= 0 &&
+            view.isContainerOpen(cell.row)) {
+            var parentIndex = view.getParentIndex(view.selection.currentIndex);
+            while (parentIndex >= 0 && parentIndex != cell.row)
+              parentIndex = view.getParentIndex(parentIndex);
+            if (parentIndex == cell.row) {
+              var parentSelectable = true;
+              if (parentSelectable)
+                view.selection.select(parentIndex);
+            }
+          }
+          this.parentNode.changeOpenState(cell.row);
+          return;
+        }
+
+        if (!view.selection.single) {
+          var augment = event.getModifierState("Accel");
+          if (event.shiftKey) {
+            view.selection.rangedSelect(-1, cell.row, augment);
+            b.ensureRowIsVisible(cell.row);
+            return;
+          }
+          if (augment) {
+            view.selection.toggleSelect(cell.row);
+            b.ensureRowIsVisible(cell.row);
+            view.selection.currentIndex = cell.row;
+            return;
+          }
+        }
+
+        /* We want to deselect all the selected items except what was
+          clicked, UNLESS it was a right-click.  We have to do this
+          in click rather than mousedown so that you can drag a
+          selected group of items */
+
+        if (!cell.col) return;
+
+        // if the last row has changed in between the time we
+        // mousedown and the time we click, don't fire the select handler.
+        // see bug #92366
+        if (!cell.col.cycler && this._lastSelectedRow == cell.row &&
+          cell.col.type != window.TreeColumn.TYPE_CHECKBOX) {
+          view.selection.select(cell.row);
+          b.ensureRowIsVisible(cell.row);
+        }
+      });
+
+      /**
+       * double-click
+       */
+      this.addEventListener("dblclick", (event) => {
+        if (this.parentNode.disabled)
+          return;
+        var tbo = this.parentNode.treeBoxObject;
+        var view = this.parentNode.view;
+        var row = view.selection.currentIndex;
+
+        if (row == -1)
+          return;
+
+        var cell = tbo.getCellAt(event.clientX, event.clientY);
+
+        if (cell.childElt != "twisty") {
+          view.selection.currentColumn = cell.col;
+          this.parentNode.startEditing(row, cell.col);
+        }
+
+        if (this.parentNode._editingColumn || !view.isContainer(row))
+          return;
+
+        // Cyclers and twisties respond to single clicks, not double clicks
+        if (cell.col && !cell.col.cycler && cell.childElt != "twisty")
+          this.parentNode.changeOpenState(row);
+      });
+
+    }
+
+    connectedCallback() {
+      if (this.delayConnectedCallback()) {
+        return;
+      }
+
+      this._lastSelectedRow = -1;
+
+      if ("_ensureColumnOrder" in this.parentNode)
+        this.parentNode._ensureColumnOrder();
+
+    }
+  }
+
+  customElements.define("treechildren", MozTreeChildren);
 
   class MozTreecol extends MozElements.BaseControl {
     static get observedAttributes() {
diff --git a/toolkit/content/widgets/tree.xml b/toolkit/content/widgets/tree.xml
--- a/toolkit/content/widgets/tree.xml
+++ b/toolkit/content/widgets/tree.xml
@@ -972,157 +972,6 @@
     </handlers>
   </binding>
 
-  <binding id="treebody" extends="chrome://global/content/bindings/general.xml#basecontrol">
-    <implementation>
-      <constructor>
-        if ("_ensureColumnOrder" in this.parentNode)
-          this.parentNode._ensureColumnOrder();
-      </constructor>
-
-      <field name="_lastSelectedRow">
-        -1
-      </field>
-    </implementation>
-    <handlers>
-      <!-- If there is no modifier key, we select on mousedown, not
-           click, so that drags work correctly. -->
-      <handler event="mousedown" clickcount="1">
-      <![CDATA[
-         if (this.parentNode.disabled)
-           return;
-         if (((!event.getModifierState("Accel") ||
-             !this.parentNode.pageUpOrDownMovesSelection) &&
-             !event.shiftKey && !event.metaKey) ||
-             this.parentNode.view.selection.single) {
-           var b = this.parentNode.treeBoxObject;
-           var cell = b.getCellAt(event.clientX, event.clientY);
-           var view = this.parentNode.view;
-
-           // save off the last selected row
-           this._lastSelectedRow = cell.row;
-
-           if (cell.row == -1)
-             return;
-
-           if (cell.childElt == "twisty")
-             return;
-
-           if (cell.col && event.button == 0) {
-             if (cell.col.cycler) {
-               view.cycleCell(cell.row, cell.col);
-               return;
-             } else if (cell.col.type == window.TreeColumn.TYPE_CHECKBOX) {
-               if (this.parentNode.editable && cell.col.editable &&
-                   view.isEditable(cell.row, cell.col)) {
-                 var value = view.getCellValue(cell.row, cell.col);
-                 value = value == "true" ? "false" : "true";
-                 view.setCellValue(cell.row, cell.col, value);
-                 return;
-               }
-             }
-           }
-
-           if (!view.selection.isSelected(cell.row)) {
-             view.selection.select(cell.row);
-             b.ensureRowIsVisible(cell.row);
-           }
-         }
-      ]]>
-      </handler>
-
-      <!-- On a click (up+down on the same item), deselect everything
-           except this item. -->
-      <handler event="click" button="0" clickcount="1">
-      <![CDATA[
-        if (this.parentNode.disabled)
-          return;
-        var b = this.parentNode.treeBoxObject;
-        var cell = b.getCellAt(event.clientX, event.clientY);
-        var view = this.parentNode.view;
-
-        if (cell.row == -1)
-          return;
-
-        if (cell.childElt == "twisty") {
-          if (view.selection.currentIndex >= 0 &&
-              view.isContainerOpen(cell.row)) {
-            var parentIndex = view.getParentIndex(view.selection.currentIndex);
-            while (parentIndex >= 0 && parentIndex != cell.row)
-              parentIndex = view.getParentIndex(parentIndex);
-            if (parentIndex == cell.row) {
-              var parentSelectable = true;
-              if (parentSelectable)
-                view.selection.select(parentIndex);
-            }
-          }
-          this.parentNode.changeOpenState(cell.row);
-          return;
-        }
-
-        if (!view.selection.single) {
-          var augment = event.getModifierState("Accel");
-          if (event.shiftKey) {
-            view.selection.rangedSelect(-1, cell.row, augment);
-            b.ensureRowIsVisible(cell.row);
-            return;
-          }
-          if (augment) {
-            view.selection.toggleSelect(cell.row);
-            b.ensureRowIsVisible(cell.row);
-            view.selection.currentIndex = cell.row;
-            return;
-          }
-        }
-
-        /* We want to deselect all the selected items except what was
-          clicked, UNLESS it was a right-click.  We have to do this
-          in click rather than mousedown so that you can drag a
-          selected group of items */
-
-        if (!cell.col) return;
-
-        // if the last row has changed in between the time we
-        // mousedown and the time we click, don't fire the select handler.
-        // see bug #92366
-        if (!cell.col.cycler && this._lastSelectedRow == cell.row &&
-            cell.col.type != window.TreeColumn.TYPE_CHECKBOX) {
-          view.selection.select(cell.row);
-          b.ensureRowIsVisible(cell.row);
-        }
-      ]]>
-      </handler>
-
-      <!-- double-click -->
-      <handler event="click" clickcount="2">
-      <![CDATA[
-        if (this.parentNode.disabled)
-          return;
-        var tbo = this.parentNode.treeBoxObject;
-        var view = this.parentNode.view;
-        var row = view.selection.currentIndex;
-
-        if (row == -1)
-          return;
-
-        var cell = tbo.getCellAt(event.clientX, event.clientY);
-
-        if (cell.childElt != "twisty") {
-          view.selection.currentColumn = cell.col;
-          this.parentNode.startEditing(row, cell.col);
-        }
-
-        if (this.parentNode._editingColumn || !view.isContainer(row))
-          return;
-
-        // Cyclers and twisties respond to single clicks, not double clicks
-        if (cell.col && !cell.col.cycler && cell.childElt != "twisty")
-          this.parentNode.changeOpenState(row);
-      ]]>
-      </handler>
-
-    </handlers>
-  </binding>
-
   <binding id="columnpicker" display="xul:button"
            extends="chrome://global/content/bindings/general.xml#basecontrol">
     <content>
diff --git a/toolkit/content/xul.css b/toolkit/content/xul.css
--- a/toolkit/content/xul.css
+++ b/toolkit/content/xul.css
@@ -448,7 +448,6 @@ treecol {
 
 tree > treechildren {
   display: -moz-box;
-  -moz-binding: url("chrome://global/content/bindings/tree.xml#treebody");
   -moz-user-select: none;
   -moz-box-flex: 1;
 }
