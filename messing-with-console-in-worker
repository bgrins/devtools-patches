# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  b78ed9a4fd28e7584d7b703ae4037bd69623122e
Bug

diff --git a/devtools/client/framework/target.js b/devtools/client/framework/target.js
--- a/devtools/client/framework/target.js
+++ b/devtools/client/framework/target.js
@@ -878,10 +878,25 @@ WorkerTarget.prototype = {
   hasActor: function (name) {
     return false;
   },
 
   getTrait: function (name) {
     return undefined;
   },
 
-  makeRemote: function () {}
+  makeRemote: function () {
+    console.log("Worker target being made remote", this.client, this, this._form);
+
+    let attachConsole = () => {
+      this.client.attachConsole(this._form.consoleActor,
+                                 [ "NetworkActivity" ],
+                                 (aResponse, aWebConsoleClient) => {
+        if (!aWebConsoleClient) {
+          this._remote.reject("Unable to attach to the console");
+          return;
+        }
+        this.activeConsole = aWebConsoleClient;
+        this._remote.resolve(null);
+      });
+    };
+  }
 };
diff --git a/devtools/client/webconsole/panel.js b/devtools/client/webconsole/panel.js
--- a/devtools/client/webconsole/panel.js
+++ b/devtools/client/webconsole/panel.js
@@ -80,25 +80,27 @@ WebConsolePanel.prototype = {
     // 3. Open the Web Console.
     return deferredIframe.promise
       .then(() => promiseTarget)
       .then((aTarget) => {
         this._frameWindow._remoteTarget = aTarget;
 
         let webConsoleUIWindow = iframe.contentWindow.wrappedJSObject;
         let chromeWindow = iframe.ownerDocument.defaultView;
+        debugger;
         return HUDService.openWebConsole(this.target, webConsoleUIWindow,
                                          chromeWindow);
       })
       .then((aWebConsole) => {
         this.hud = aWebConsole;
         this._isReady = true;
         this.emit("ready");
         return this;
       }, (aReason) => {
+        debugger;
         let msg = "WebConsolePanel open failed. " +
                   aReason.error + ": " + aReason.message;
         dump(msg + "\n");
         Cu.reportError(msg);
       });
   },
 
   get target()
diff --git a/devtools/server/main.js b/devtools/server/main.js
--- a/devtools/server/main.js
+++ b/devtools/server/main.js
@@ -422,16 +422,17 @@ var DebuggerServer = {
 
   /**
    * Install tab actors in documents loaded in content childs
    */
   addChildActors: function () {
     // In case of apps being loaded in parent process, DebuggerServer is already
     // initialized and browser actors are already loaded,
     // but childtab.js hasn't been loaded yet.
+    // console.log("Adding child actors", DebuggerServer,);
     if (!DebuggerServer.tabActorFactories.hasOwnProperty("consoleActor")) {
       this.addTabActors();
     }
     // But webbrowser.js and childtab.js aren't loaded from shell.js.
     if (!this.isModuleRegistered("devtools/server/actors/webbrowser")) {
       this.registerModule("devtools/server/actors/webbrowser");
     }
     if (!("ContentActor" in this)) {
diff --git a/devtools/server/worker.js b/devtools/server/worker.js
--- a/devtools/server/worker.js
+++ b/devtools/server/worker.js
@@ -68,16 +68,22 @@ this.addEventListener("message",  functi
       get sources() {
         if (sources === null) {
           sources = new TabSources(actor);
         }
         return sources;
       }
     }, global);
 
+    // console.log("Connecting to worker", actor, connection);
+    dump("Connecting " + actor + "\n");
+    // if (!this._consoleActor) {
+    //   this._consoleActor = new WebConsoleActor(this.conn, this);
+    //   this._contextPool.addActor(this._consoleActor);
+    // }
     pool.addActor(actor);
 
     // Step 5: Attach to the thread actor.
     //
     // This will cause a packet to be sent over the connection to the parent.
     // Because this connection uses WorkerDebuggerTransport internally, this
     // packet will be sent using WorkerDebuggerGlobalScope.postMessage, causing
     // an onMessage event to be fired on the WorkerDebugger in the main thread.
diff --git a/devtools/shared/client/main.js b/devtools/shared/client/main.js
--- a/devtools/shared/client/main.js
+++ b/devtools/shared/client/main.js
@@ -660,16 +660,17 @@ DebuggerClient.prototype = {
    *                     rejected if any (unexpected) errors occur.
    *                     This object also emits "progress" events for each chunk
    *                     that is copied.  See stream-utils.js.
    */
   request: function (aRequest, aOnResponse) {
     if (!this.mainRoot) {
       throw Error("Have not yet received a hello packet from the server.");
     }
+    console.log(aRequest, aOnResponse);
     if (!aRequest.to) {
       let type = aRequest.type || "";
       throw Error("'" + type + "' request packet has no destination.");
     }
 
     let request = new Request(aRequest);
     request.format = "json";
     request.stack = components.stack;
