# HG changeset patch
# User Lin Clark <lclark@mozilla.com>
Bug 1294505 - New console frontend: Update stubs. r=me



diff --git a/devtools/client/webconsole/new-console-output/test/actions/messages.test.js b/devtools/client/webconsole/new-console-output/test/actions/messages.test.js
index e4f8784..3dca858 100644
--- a/devtools/client/webconsole/new-console-output/test/actions/messages.test.js
+++ b/devtools/client/webconsole/new-console-output/test/actions/messages.test.js
@@ -21,19 +21,19 @@ describe("Message actions:", () => {
       const packet = {
         "from": "server1.conn4.child1/consoleActor2",
         "type": "consoleAPICall",
         "message": {
           "arguments": [
             "foobar",
             "test"
           ],
-          "columnNumber": 1,
+          "columnNumber": 27,
           "counter": null,
-          "filename": "file:///test.html",
+          "filename": "http://example.com/browser/devtools/client/webconsole/new-console-output/test/fixtures/stub-generators/test-tempfile.js",
           "functionName": "",
           "groupName": "",
           "level": "log",
           "lineNumber": 1,
           "private": false,
           "styles": [],
           "timeStamp": 1455064271115,
           "timer": null,
@@ -42,22 +42,17 @@ describe("Message actions:", () => {
         }
       };
       const action = actions.messageAdd(packet);
       const expected = {
         type: constants.MESSAGE_ADD,
         message: stubConsoleMessages.get("console.log('foobar', 'test')")
       };
 
-      // Some values on the message are generated by prepareMessage. Manually set
-      // these on the expected message to match.
-      expected.message = expected.message.set("repeatId", getRepeatId(expected.message));
-      expected.message = expected.message.set("id", "1");
-
-      expect(action).toEqual(expected);
+      expect(action.message.toJS()).toEqual(expected.message.toJS());
     });
   });
 
   describe("messagesClear", () => {
     it("creates expected action", () => {
       const action = actions.messagesClear();
       const expected = {
         type: constants.MESSAGES_CLEAR,
diff --git a/devtools/client/webconsole/new-console-output/test/fixtures/stubs-bu.js b/devtools/client/webconsole/new-console-output/test/fixtures/stubs-bu.js
new file mode 100644
index 0000000..3eac96e
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/test/fixtures/stubs-bu.js
@@ -0,0 +1,150 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+const {
+  MESSAGE_SOURCE,
+  MESSAGE_TYPE,
+  MESSAGE_LEVEL,
+} = require("devtools/client/webconsole/new-console-output/constants");
+
+const { ConsoleMessage } = require("devtools/client/webconsole/new-console-output/types");
+
+exports.stubConsoleMessages = new Map([
+  [
+    "console.log('foobar', 'test')",
+    new ConsoleMessage({
+      allowRepeating: true,
+      source: MESSAGE_SOURCE.CONSOLE_API,
+      type: MESSAGE_TYPE.LOG,
+      level: MESSAGE_LEVEL.LOG,
+      messageText: null,
+      parameters: ["foobar", "test"],
+      repeat: 1,
+      repeatId: null,
+      stacktrace: undefined
+    })
+  ],
+  [
+    "console.warn('danger, will robinson!')",
+    new ConsoleMessage({
+      allowRepeating: true,
+      source: MESSAGE_SOURCE.CONSOLE_API,
+      type: MESSAGE_TYPE.LOG,
+      level: MESSAGE_LEVEL.WARN,
+      messageText: null,
+      parameters: ["danger, will robinson!"],
+      repeat: 1,
+      repeatId: null,
+    })
+  ],
+  [
+    "console.log(undefined)",
+    new ConsoleMessage({
+      allowRepeating: true,
+      source: MESSAGE_SOURCE.CONSOLE_API,
+      type: MESSAGE_TYPE.LOG,
+      level: MESSAGE_LEVEL.LOG,
+      messageText: null,
+      parameters: [
+        { type: "undefined" }
+      ],
+      repeat: 1,
+      repeatId: null,
+    })
+  ],
+  [
+    "console.log(NaN)",
+    new ConsoleMessage({
+      allowRepeating: true,
+      source: MESSAGE_SOURCE.CONSOLE_API,
+      type: MESSAGE_TYPE.LOG,
+      level: MESSAGE_LEVEL.LOG,
+      messageText: null,
+      parameters: [
+        { type: "NaN" }
+      ],
+      repeat: 1,
+      repeatId: null,
+    })
+  ],
+  [
+    "console.log(null)",
+    new ConsoleMessage({
+      allowRepeating: true,
+      source: MESSAGE_SOURCE.CONSOLE_API,
+      type: MESSAGE_TYPE.LOG,
+      level: MESSAGE_LEVEL.LOG,
+      messageText: null,
+      parameters: [
+        { type: "null" }
+      ],
+      repeat: 1,
+      repeatId: null,
+    })
+  ],
+  [
+    "console.clear()",
+    new ConsoleMessage({
+      allowRepeating: true,
+      source: MESSAGE_SOURCE.CONSOLE_API,
+      type: MESSAGE_TYPE.CLEAR,
+      level: MESSAGE_LEVEL.LOG,
+      messageText: null,
+      parameters: ["Console cleared."],
+      repeat: 1,
+      repeatId: null,
+    })
+  ],
+  [
+    "console.count('bar')",
+    new ConsoleMessage({
+      allowRepeating: true,
+      source: MESSAGE_SOURCE.CONSOLE_API,
+      type: MESSAGE_TYPE.LOG,
+      level: MESSAGE_LEVEL.DEBUG,
+      messageText: "bar: 1",
+      parameters: null,
+      repeat: 1,
+      repeatId: null,
+    })
+  ],
+  [
+    "new Date(0)",
+    new ConsoleMessage({
+      allowRepeating: true,
+      source: MESSAGE_SOURCE.JAVASCRIPT,
+      type: MESSAGE_TYPE.RESULT,
+      level: MESSAGE_LEVEL.LOG,
+      messageText: null,
+      parameters: {
+        "type": "object",
+        "class": "Date",
+        "actor": "server2.conn0.obj115",
+        "extensible": true,
+        "frozen": false,
+        "sealed": false,
+        "ownPropertyLength": 0,
+        "preview": {
+          "timestamp": 0
+        }
+      },
+      repeat: 1,
+      repeatId: null,
+    })
+  ],
+  [
+    "ReferenceError",
+    new ConsoleMessage({
+      allowRepeating: true,
+      source: MESSAGE_SOURCE.JAVASCRIPT,
+      type: MESSAGE_TYPE.LOG,
+      level: MESSAGE_LEVEL.ERROR,
+      messageText: "ReferenceError: asdf is not defined",
+      parameters: null,
+      repeat: 1,
+      repeatId: null,
+    })
+  ]
+]);
diff --git a/devtools/client/webconsole/new-console-output/test/fixtures/stubs.js b/devtools/client/webconsole/new-console-output/test/fixtures/stubs.js
index 8730a5c..6c922d8 100644
--- a/devtools/client/webconsole/new-console-output/test/fixtures/stubs.js
+++ b/devtools/client/webconsole/new-console-output/test/fixtures/stubs.js
@@ -1,155 +1,198 @@
 /* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
+  http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
 const {
   MESSAGE_SOURCE,
   MESSAGE_TYPE,
   MESSAGE_LEVEL,
 } = require("devtools/client/webconsole/new-console-output/constants");
 
 const { ConsoleMessage } = require("devtools/client/webconsole/new-console-output/types");
 
-exports.stubConsoleMessages = new Map([
-  [
-    "console.log('foobar', 'test')",
-    new ConsoleMessage({
-      allowRepeating: true,
-      source: MESSAGE_SOURCE.CONSOLE_API,
-      type: MESSAGE_TYPE.LOG,
-      level: MESSAGE_LEVEL.LOG,
-      messageText: null,
-      parameters: ["foobar", "test"],
-      repeat: 1,
-      repeatId: null,
-      stacktrace: undefined,
-      frame: {
-        source: "file:///test.html",
-        line: 1,
-        column: 1
-      }
-    })
-  ],
-  [
-    "console.warn('danger, will robinson!')",
-    new ConsoleMessage({
-      allowRepeating: true,
-      source: MESSAGE_SOURCE.CONSOLE_API,
-      type: MESSAGE_TYPE.LOG,
-      level: MESSAGE_LEVEL.WARN,
-      messageText: null,
-      parameters: ["danger, will robinson!"],
-      repeat: 1,
-      repeatId: null,
-    })
-  ],
-  [
-    "console.log(undefined)",
-    new ConsoleMessage({
-      allowRepeating: true,
-      source: MESSAGE_SOURCE.CONSOLE_API,
-      type: MESSAGE_TYPE.LOG,
-      level: MESSAGE_LEVEL.LOG,
-      messageText: null,
-      parameters: [
-        { type: "undefined" }
-      ],
-      repeat: 1,
-      repeatId: null,
-    })
-  ],
-  [
-    "console.log(NaN)",
-    new ConsoleMessage({
-      allowRepeating: true,
-      source: MESSAGE_SOURCE.CONSOLE_API,
-      type: MESSAGE_TYPE.LOG,
-      level: MESSAGE_LEVEL.LOG,
-      messageText: null,
-      parameters: [
-        { type: "NaN" }
-      ],
-      repeat: 1,
-      repeatId: null,
-    })
-  ],
-  [
-    "console.log(null)",
-    new ConsoleMessage({
-      allowRepeating: true,
-      source: MESSAGE_SOURCE.CONSOLE_API,
-      type: MESSAGE_TYPE.LOG,
-      level: MESSAGE_LEVEL.LOG,
-      messageText: null,
-      parameters: [
-        { type: "null" }
-      ],
-      repeat: 1,
-      repeatId: null,
-    })
-  ],
-  [
-    "console.clear()",
-    new ConsoleMessage({
-      allowRepeating: true,
-      source: MESSAGE_SOURCE.CONSOLE_API,
-      type: MESSAGE_TYPE.CLEAR,
-      level: MESSAGE_LEVEL.LOG,
-      messageText: null,
-      parameters: ["Console cleared."],
-      repeat: 1,
-      repeatId: null,
-    })
-  ],
-  [
-    "console.count('bar')",
-    new ConsoleMessage({
-      allowRepeating: true,
-      source: MESSAGE_SOURCE.CONSOLE_API,
-      type: MESSAGE_TYPE.LOG,
-      level: MESSAGE_LEVEL.DEBUG,
-      messageText: "bar: 1",
-      parameters: null,
-      repeat: 1,
-      repeatId: null,
-    })
-  ],
-  [
-    "new Date(0)",
-    new ConsoleMessage({
-      allowRepeating: true,
-      source: MESSAGE_SOURCE.JAVASCRIPT,
-      type: MESSAGE_TYPE.RESULT,
-      level: MESSAGE_LEVEL.LOG,
-      messageText: null,
-      parameters: {
-        "type": "object",
-        "class": "Date",
-        "actor": "server2.conn0.obj115",
-        "extensible": true,
-        "frozen": false,
-        "sealed": false,
-        "ownPropertyLength": 0,
-        "preview": {
-          "timestamp": 0
-        }
-      },
-      repeat: 1,
-      repeatId: null,
-    })
-  ],
-  [
-    "ReferenceError",
-    new ConsoleMessage({
-      allowRepeating: true,
-      source: MESSAGE_SOURCE.JAVASCRIPT,
-      type: MESSAGE_TYPE.LOG,
-      level: MESSAGE_LEVEL.ERROR,
-      messageText: "ReferenceError: asdf is not defined",
-      parameters: null,
-      repeat: 1,
-      repeatId: null,
-    })
-  ]
-]);
+let stubConsoleMessages = new Map();
+
+stubConsoleMessages.set("console.log('foobar', 'test')", new ConsoleMessage({
+	"id": "1",
+	"allowRepeating": true,
+	"source": "console-api",
+	"type": "log",
+	"level": "log",
+	"messageText": null,
+	"parameters": [
+		"foobar",
+		"test"
+	],
+	"repeat": 1,
+	"repeatId": "{\"id\":null,\"allowRepeating\":true,\"source\":\"console-api\",\"type\":\"log\",\"level\":\"log\",\"messageText\":null,\"parameters\":[\"foobar\",\"test\"],\"repeatId\":null,\"stacktrace\":null,\"frame\":{\"source\":\"http://example.com/browser/devtools/client/webconsole/new-console-output/test/fixtures/stub-generators/test-tempfile.js\",\"line\":1,\"column\":27}}",
+	"stacktrace": null,
+	"frame": {
+		"source": "http://example.com/browser/devtools/client/webconsole/new-console-output/test/fixtures/stub-generators/test-tempfile.js",
+		"line": 1,
+		"column": 27
+	}
+}));
+
+stubConsoleMessages.set("console.log(undefined)", new ConsoleMessage({
+	"id": "1",
+	"allowRepeating": true,
+	"source": "console-api",
+	"type": "log",
+	"level": "log",
+	"messageText": null,
+	"parameters": [
+		{
+			"type": "undefined"
+		}
+	],
+	"repeat": 1,
+	"repeatId": "{\"id\":null,\"allowRepeating\":true,\"source\":\"console-api\",\"type\":\"log\",\"level\":\"log\",\"messageText\":null,\"parameters\":[{\"type\":\"undefined\"}],\"repeatId\":null,\"stacktrace\":null,\"frame\":{\"source\":\"http://example.com/browser/devtools/client/webconsole/new-console-output/test/fixtures/stub-generators/test-tempfile.js\",\"line\":1,\"column\":27}}",
+	"stacktrace": null,
+	"frame": {
+		"source": "http://example.com/browser/devtools/client/webconsole/new-console-output/test/fixtures/stub-generators/test-tempfile.js",
+		"line": 1,
+		"column": 27
+	}
+}));
+
+stubConsoleMessages.set("console.warn('danger, will robinson!')", new ConsoleMessage({
+	"id": "1",
+	"allowRepeating": true,
+	"source": "console-api",
+	"type": "warn",
+	"level": "warn",
+	"messageText": null,
+	"parameters": [
+		"danger, will robinson!"
+	],
+	"repeat": 1,
+	"repeatId": "{\"id\":null,\"allowRepeating\":true,\"source\":\"console-api\",\"type\":\"warn\",\"level\":\"warn\",\"messageText\":null,\"parameters\":[\"danger, will robinson!\"],\"repeatId\":null,\"stacktrace\":null,\"frame\":{\"source\":\"http://example.com/browser/devtools/client/webconsole/new-console-output/test/fixtures/stub-generators/test-tempfile.js\",\"line\":1,\"column\":27}}",
+	"stacktrace": null,
+	"frame": {
+		"source": "http://example.com/browser/devtools/client/webconsole/new-console-output/test/fixtures/stub-generators/test-tempfile.js",
+		"line": 1,
+		"column": 27
+	}
+}));
+
+stubConsoleMessages.set("console.log(NaN)", new ConsoleMessage({
+	"id": "1",
+	"allowRepeating": true,
+	"source": "console-api",
+	"type": "log",
+	"level": "log",
+	"messageText": null,
+	"parameters": [
+		{
+			"type": "NaN"
+		}
+	],
+	"repeat": 1,
+	"repeatId": "{\"id\":null,\"allowRepeating\":true,\"source\":\"console-api\",\"type\":\"log\",\"level\":\"log\",\"messageText\":null,\"parameters\":[{\"type\":\"NaN\"}],\"repeatId\":null,\"stacktrace\":null,\"frame\":{\"source\":\"http://example.com/browser/devtools/client/webconsole/new-console-output/test/fixtures/stub-generators/test-tempfile.js\",\"line\":1,\"column\":27}}",
+	"stacktrace": null,
+	"frame": {
+		"source": "http://example.com/browser/devtools/client/webconsole/new-console-output/test/fixtures/stub-generators/test-tempfile.js",
+		"line": 1,
+		"column": 27
+	}
+}));
+
+stubConsoleMessages.set("console.log(null)", new ConsoleMessage({
+	"id": "1",
+	"allowRepeating": true,
+	"source": "console-api",
+	"type": "log",
+	"level": "log",
+	"messageText": null,
+	"parameters": [
+		{
+			"type": "null"
+		}
+	],
+	"repeat": 1,
+	"repeatId": "{\"id\":null,\"allowRepeating\":true,\"source\":\"console-api\",\"type\":\"log\",\"level\":\"log\",\"messageText\":null,\"parameters\":[{\"type\":\"null\"}],\"repeatId\":null,\"stacktrace\":null,\"frame\":{\"source\":\"http://example.com/browser/devtools/client/webconsole/new-console-output/test/fixtures/stub-generators/test-tempfile.js\",\"line\":1,\"column\":27}}",
+	"stacktrace": null,
+	"frame": {
+		"source": "http://example.com/browser/devtools/client/webconsole/new-console-output/test/fixtures/stub-generators/test-tempfile.js",
+		"line": 1,
+		"column": 27
+	}
+}));
+
+stubConsoleMessages.set("console.clear()", new ConsoleMessage({
+	"id": "1",
+	"allowRepeating": true,
+	"source": "console-api",
+	"type": "clear",
+	"level": "log",
+	"messageText": null,
+	"parameters": [
+		"Console was cleared."
+	],
+	"repeat": 1,
+	"repeatId": "{\"id\":null,\"allowRepeating\":true,\"source\":\"console-api\",\"type\":\"clear\",\"level\":\"log\",\"messageText\":null,\"parameters\":[\"Console was cleared.\"],\"repeatId\":null,\"stacktrace\":null,\"frame\":{\"source\":\"http://example.com/browser/devtools/client/webconsole/new-console-output/test/fixtures/stub-generators/test-tempfile.js\",\"line\":1,\"column\":27}}",
+	"stacktrace": null,
+	"frame": {
+		"source": "http://example.com/browser/devtools/client/webconsole/new-console-output/test/fixtures/stub-generators/test-tempfile.js",
+		"line": 1,
+		"column": 27
+	}
+}));
+
+stubConsoleMessages.set("console.count('bar')", new ConsoleMessage({
+	"id": "1",
+	"allowRepeating": true,
+	"source": "console-api",
+	"type": "log",
+	"level": "debug",
+	"messageText": "bar: 1",
+	"parameters": null,
+	"repeat": 1,
+	"repeatId": "{\"id\":null,\"allowRepeating\":true,\"source\":\"console-api\",\"type\":\"log\",\"level\":\"debug\",\"messageText\":\"bar: 1\",\"parameters\":null,\"repeatId\":null,\"stacktrace\":null,\"frame\":{\"source\":\"http://example.com/browser/devtools/client/webconsole/new-console-output/test/fixtures/stub-generators/test-tempfile.js\",\"line\":1,\"column\":27}}",
+	"stacktrace": null,
+	"frame": {
+		"source": "http://example.com/browser/devtools/client/webconsole/new-console-output/test/fixtures/stub-generators/test-tempfile.js",
+		"line": 1,
+		"column": 27
+	}
+}));
+
+
+// Temporarily hardcode these
+stubConsoleMessages.set("new Date(0)", new ConsoleMessage({
+	allowRepeating: true,
+	source: MESSAGE_SOURCE.JAVASCRIPT,
+	type: MESSAGE_TYPE.RESULT,
+	level: MESSAGE_LEVEL.LOG,
+	messageText: null,
+	parameters: {
+		"type": "object",
+		"class": "Date",
+		"actor": "server2.conn0.obj115",
+		"extensible": true,
+		"frozen": false,
+		"sealed": false,
+		"ownPropertyLength": 0,
+		"preview": {
+			"timestamp": 0
+		}
+	},
+	repeat: 1,
+	repeatId: null,
+}));
+
+stubConsoleMessages.set("ReferenceError", new ConsoleMessage({
+	allowRepeating: true,
+	source: MESSAGE_SOURCE.JAVASCRIPT,
+	type: MESSAGE_TYPE.LOG,
+	level: MESSAGE_LEVEL.ERROR,
+	messageText: "ReferenceError: asdf is not defined",
+	parameters: null,
+	repeat: 1,
+	repeatId: null,
+}));
+
+module.exports = {
+  stubConsoleMessages
+}
\ No newline at end of file
diff --git a/devtools/client/webconsole/new-console-output/test/store/messages.test.js b/devtools/client/webconsole/new-console-output/test/store/messages.test.js
index 097159b..4092335 100644
--- a/devtools/client/webconsole/new-console-output/test/store/messages.test.js
+++ b/devtools/client/webconsole/new-console-output/test/store/messages.test.js
@@ -73,17 +73,17 @@ describe("Message reducer:", () => {
       "console.log(undefined)"
     ]);
 
     dispatch(actions.messageAdd(stubConsoleMessages.get("console.clear()")));
 
     const messages = getAllMessages(getState());
 
     expect(messages.size).toBe(1);
-    expect(messages.first().parameters[0]).toBe("Console cleared.");
+    expect(messages.first().parameters[0]).toBe("Console was cleared.");
   });
 
   it("limits the number of messages displayed", () => {
     const { dispatch, getState } = setupStore([]);
 
     const logLimit = 1000;
     const baseMessage = stubConsoleMessages.get("console.log(undefined)");
     for (let i = 1; i <= logLimit + 1; i++) {
diff --git a/devtools/client/webconsole/new-console-output/utils/messages.js b/devtools/client/webconsole/new-console-output/utils/messages.js
index cd1aee5..eb45e51 100644
--- a/devtools/client/webconsole/new-console-output/utils/messages.js
+++ b/devtools/client/webconsole/new-console-output/utils/messages.js
@@ -69,17 +69,17 @@ function transformPacket(packet) {
       };
 
       return new ConsoleMessage({
         source: MESSAGE_SOURCE.CONSOLE_API,
         type,
         level,
         parameters,
         messageText,
-        stacktrace: message.stacktrace,
+        stacktrace: message.stacktrace ? message.stacktrace : null,
         frame
       });
     }
 
     case "pageError": {
       let { pageError } = packet;
       let level = MESSAGE_LEVEL.ERROR;
       if (pageError.warning || pageError.strict) {
