# HG changeset patch
# Parent  dd328684ee1e46c94e0ce0988c641b18ef329f39

diff --git a/devtools/client/webconsole/console-output.js b/devtools/client/webconsole/console-output.js
--- a/devtools/client/webconsole/console-output.js
+++ b/devtools/client/webconsole/console-output.js
@@ -1180,16 +1180,18 @@ Messages.Extended.prototype = Heritage.e
    * @param object options
    *        Options for displaying the value. Available options:
    *        - noStringQuotes - boolean that tells the renderer to not use quotes
    *        around strings.
    *        - concise - boolean that tells the renderer to compactly display the
    *        grip. This is typically set to true when the object needs to be
    *        displayed in an array preview, or as a property value in object
    *        previews, etc.
+   *        - shorten - boolean that tells the renderer to display a truncated
+   *        grip.
    * @return DOMElement
    *         The DOM element that displays the given grip.
    */
   _renderValueGrip: function(grip, options = {})
   {
     let isPrimitive = VariablesView.isPrimitive({ value: grip });
     let isActorGrip = WebConsoleUtils.isActorGrip(grip);
     let noStringQuotes = !this._quoteStrings;
@@ -1204,20 +1206,25 @@ Messages.Extended.prototype = Heritage.e
         return this._renderObjectActor(grip, options);
       }
       if (grip.type == "longString") {
         let widget = new Widgets.LongString(this, grip, options).render();
         return widget.element;
       }
     }
 
+    let unshortenedGrip = grip;
+    if (options.shorten) {
+      grip = this.shortenValueGrip(grip)
+    }
+
     let result = this.document.createElementNS(XHTML_NS, "span");
     if (isPrimitive) {
       if (Widgets.URLString.prototype.containsURL.call(Widgets.URLString.prototype, grip)) {
-        let widget = new Widgets.URLString(this, grip, options).render();
+        let widget = new Widgets.URLString(this, grip, unshortenedGrip).render();
         return widget.element;
       }
 
       let className = this.getClassNameForValueGrip(grip);
       if (className) {
         result.className = className;
       }
 
@@ -2194,21 +2201,24 @@ Widgets.MessageTimestamp.prototype = Her
  * The URLString widget, for rendering strings where at least one token is a
  * URL.
  *
  * @constructor
  * @param object message
  *        The owning message.
  * @param string str
  *        The string, which contains at least one valid URL.
+ * @param string unshortenedStr
+ *        The unshortened form of the string, if it was shortened.
  */
-Widgets.URLString = function(message, str)
+Widgets.URLString = function(message, str, unshortenedStr)
 {
   Widgets.BaseWidget.call(this, message);
   this.str = str;
+  this.unshortenedStr = unshortenedStr;
 };
 
 Widgets.URLString.prototype = Heritage.extend(Widgets.BaseWidget.prototype,
 {
   /**
    * The string to format, which contains at least one valid URL.
    * @type string
    */
@@ -2223,26 +2233,35 @@ Widgets.URLString.prototype = Heritage.e
     // The rendered URLString will be a <span> containing a number of text
     // <spans> for non-URL tokens and <a>'s for URL tokens.
     this.element = this.el("span", {
       class: "console-string"
     });
     this.element.appendChild(this._renderText("\""));
 
     // As we walk through the tokens of the source string, we make sure to preserve
-    // the original whitespace that seperated the tokens.
+    // the original whitespace that separated the tokens.
     let tokens = this.str.split(/\s+/);
     let textStart = 0;
+    let tokenIx = 0;
     let tokenStart;
-    for (let token of tokens) {
+    for (let i = 0; i < tokens.length; i++) {
+      let token = tokens[i];
+      let unshortenedToken;
       tokenStart = this.str.indexOf(token, textStart);
       if (this._isURL(token)) {
+        // The last URL in the string might be shortened.  If so get the full
+        // URL so the rendered link can point to it.
+        if (i === tokens.length - 1 && this.unshortenedStr) {
+          let unshortenedTokens = this.unshortenedStr.split(/\s+/);
+          unshortenedToken = unshortenedTokens[i];
+        }
         this.element.appendChild(this._renderText(this.str.slice(textStart, tokenStart)));
         textStart = tokenStart + token.length;
-        this.element.appendChild(this._renderURL(token));
+        this.element.appendChild(this._renderURL(token, unshortenedToken));
       }
     }
 
     // Clean up any non-URL text at the end of the source string.
     this.element.appendChild(this._renderText(this.str.slice(textStart, this.str.length)));
     this.element.appendChild(this._renderText("\""));
 
     return this;
@@ -2284,25 +2303,28 @@ Widgets.URLString.prototype = Heritage.e
     }
   },
 
   /**
    * Renders a string as a URL.
    *
    * @param string url
    *        The string to be rendered as a url.
+   * @param string fullUrl
+   *        The unshortened form of the URL, if it was shortened.
    * @return DOMElement
    *         An element containing the rendered string.
    */
-  _renderURL: function(url)
+  _renderURL: function(url, fullUrl)
   {
+    let unshortened = fullUrl || url;
     let result = this.el("a", {
       class: "url",
-      title: url,
-      href: url,
+      title: unshortened,
+      href: unshortened,
       draggable: false
     }, url);
     this.message._addLinkCallback(result);
     return result;
   },
 
   _renderText: function(text) {
     return this.el("span", text);
@@ -2409,18 +2431,17 @@ Widgets.JSObject.prototype = Heritage.ex
     }
 
     container.appendChild(this.el("span.cm-property", key));
     this._text(": ");
 
     if (valueIsText) {
       this._text(value);
     } else {
-      let shortVal = this.message.shortenValueGrip(value);
-      let valueElem = this.message._renderValueGrip(shortVal, { concise: true });
+      let valueElem = this.message._renderValueGrip(value, { concise: true, shorten: true });
       container.appendChild(valueElem);
     }
   },
 
   /**
    * Render this object's properties.
    *
    * @param nsIDOMNode container
@@ -2803,18 +2824,17 @@ Widgets.ObjectRenderers.add({
         renderSeparator();
         isFirst = false;
 
         if (emptySlots) {
           this._renderEmptySlots(emptySlots);
           emptySlots = 0;
         }
 
-        let shortVal = this.message.shortenValueGrip(item);
-        let elem = this.message._renderValueGrip(shortVal, { concise: true });
+        let elem = this.message._renderValueGrip(item, { concise: true, shorten: true });
         this.element.appendChild(elem);
       }
     }
 
     if (emptySlots) {
       renderSeparator();
       this._renderEmptySlots(emptySlots, false);
     }
diff --git a/devtools/client/webconsole/test/browser_webconsole_clickable_urls.js b/devtools/client/webconsole/test/browser_webconsole_clickable_urls.js
--- a/devtools/client/webconsole/test/browser_webconsole_clickable_urls.js
+++ b/devtools/client/webconsole/test/browser_webconsole_clickable_urls.js
@@ -68,16 +68,37 @@ var inputTests = [
   },
 
   // 8: URL with invalid scheme does not open page when clicked.
   {
     input: "'foo://example.com'",
     output: "foo://example.com",
   },
 
+  // 9: Shortened URL in an array
+  {
+    input: "['http://example.com/abcdefghijabcdefghij some other text']",
+    output: "Array [ \"http://example.com/abcdefghijabcdef\u2026\" ]",
+    printOutput: "http://example.com/abcdefghijabcdefghij some other text",
+    expectedTab: "http://example.com/abcdefghijabcdefghij",
+    getClickableNode: (msg) => msg.querySelectorAll("a")[1],
+  },
+
+  // 10: Shortened URL in an object
+  {
+    input: "{test: 'http://example.com/abcdefghijabcdefghij some other text'}",
+    output: "Object { test: \"http://example.com/abcdefghijabcdef\u2026\" }",
+    printOutput: "[object Object]",
+    evalOutput: "http://example.com/abcdefghijabcdefghij some other text",
+    noClick: true,
+    consoleLogClick: true,
+    expectedTab: "http://example.com/abcdefghijabcdefghij",
+    getClickableNode: (msg) => msg.querySelectorAll("a")[1],
+  },
+
 ];
 
 function test() {
   Task.spawn(function*() {
     let {tab} = yield loadTab(TEST_URI);
     let hud = yield openConsole(tab);
     yield checkOutputForInputs(hud, inputTests);
     inputTests = null;
diff --git a/devtools/client/webconsole/test/head.js b/devtools/client/webconsole/test/head.js
--- a/devtools/client/webconsole/test/head.js
+++ b/devtools/client/webconsole/test/head.js
@@ -1449,18 +1449,23 @@ function checkOutputForInputs(hud, input
       messages: [{
         name: "console.log() output: " + consoleOutput,
         text: consoleOutput,
         category: CATEGORY_WEBDEV,
         severity: SEVERITY_LOG,
       }],
     });
 
+    let msg = [...result.matched][0];
+
+    if (entry.consoleLogClick) {
+      yield checkObjectClick(entry, msg);
+    }
+
     if (typeof entry.inspectorIcon == "boolean") {
-      let msg = [...result.matched][0];
       info("Checking Inspector Link: " + entry.input);
       yield checkLinkToInspector(entry.inspectorIcon, msg);
     }
   }
 
   function checkPrintOutput(entry) {
     info("Printing: " + entry.input);
     hud.jsterm.clearOutput();
@@ -1478,39 +1483,46 @@ function checkOutputForInputs(hud, input
     });
   }
 
   function* checkJSEval(entry) {
     info("Evaluating: " + entry.input);
     hud.jsterm.clearOutput();
     hud.jsterm.execute(entry.input);
 
+    let evalOutput = entry.evalOutput || entry.output;
+
     let [result] = yield waitForMessages({
       webconsole: hud,
       messages: [{
-        name: "JS eval output: " + entry.output,
-        text: entry.output,
+        name: "JS eval output: " + entry.evalOutput,
+        text: entry.evalOutput,
         category: CATEGORY_OUTPUT,
       }],
     });
 
     let msg = [...result.matched][0];
     if (!entry.noClick) {
       yield checkObjectClick(entry, msg);
     }
     if (typeof entry.inspectorIcon == "boolean") {
       info("Checking Inspector Link: " + entry.input);
       yield checkLinkToInspector(entry.inspectorIcon, msg);
     }
   }
 
   function* checkObjectClick(entry, msg) {
     info("Clicking: " + entry.input);
-    let body = msg.querySelector(".message-body a") ||
-               msg.querySelector(".message-body");
+    let body;
+    if (entry.getClickableNode) {
+      body = entry.getClickableNode(msg);
+    } else {
+      body = msg.querySelector(".message-body a") ||
+             msg.querySelector(".message-body");
+    }
     ok(body, "the message body");
 
     let deferredVariablesView = promise.defer();
     entry._onVariablesViewOpen = onVariablesViewOpen.bind(null, entry,
                                                           deferredVariablesView);
     hud.jsterm.on("variablesview-open", entry._onVariablesViewOpen);
 
     let deferredTab = promise.defer();
