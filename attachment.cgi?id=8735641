# HG changeset patch
# User Steve Melia <steve.j.melia@gmail.com>
# Date 1459208906 -3600
#      Tue Mar 29 00:48:26 2016 +0100
# Node ID 3e5a920f91ff67495f103b644c14680c1e9d8c4f
# Parent  2572bf0929df26a694f58cc8765da73abea0f655
Bug 1259126 - Use a <box> intead of a <deck> for toolbox tabs

diff --git a/devtools/client/framework/test/browser_toolbox_select_event.js b/devtools/client/framework/test/browser_toolbox_select_event.js
--- a/devtools/client/framework/test/browser_toolbox_select_event.js
+++ b/devtools/client/framework/test/browser_toolbox_select_event.js
@@ -1,100 +1,59 @@
 /* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/ */
 
-var toolbox;
+add_task(function*() {
+  let toolbox = yield openNewTabAndToolbox("data:text/html;charset=utf-8,test select events");
 
-function test() {
-  addTab("about:blank").then(function() {
-    let target = TargetFactory.forTab(gBrowser.selectedTab);
-    gDevTools.showToolbox(target, "webconsole").then(testSelect);
-  });
-}
-
-var called = {
-  inspector: false,
-  webconsole: false,
-  styleeditor: false,
-  //jsdebugger: false,
-}
-
-function testSelect(aToolbox) {
-  toolbox = aToolbox;
-
-  info("Toolbox fired a `ready` event");
-
-  toolbox.on("select", selectCB);
-
-  toolbox.selectTool("inspector");
-  toolbox.selectTool("webconsole");
-  toolbox.selectTool("styleeditor");
-  //toolbox.selectTool("jsdebugger");
-}
-
-function selectCB(event, id) {
-  called[id] = true;
-  info("toolbox-select event from " + id);
-
-  for (let tool in called) {
-    if (!called[tool]) {
-      return;
-    }
-  }
-
-  ok(true, "All the tools fired a 'select event'");
-  toolbox.off("select", selectCB);
-
-  reselect();
-}
-
-function reselect() {
-  for (let tool in called) {
-    called[tool] = false;
-  }
-
-  toolbox.once("inspector-selected", function() {
-    tidyUpIfAllCalled("inspector");
+  yield new Promise(resolve => {
+    toolbox.once("select", (event, id) => {
+      is(id, "inspector", "inspector selected");
+      resolve();
+    });
+    toolbox.selectTool("inspector");
   });
 
-  toolbox.once("webconsole-selected", function() {
-    tidyUpIfAllCalled("webconsole");
+  yield new Promise(resolve => {
+    toolbox.once("select", (event, id) => {
+      is(id, "webconsole", "webconsole selected");
+      resolve();
+    });
+    toolbox.selectTool("webconsole");
   });
 
-  /*
-  toolbox.once("jsdebugger-selected", function() {
-    tidyUpIfAllCalled("jsdebugger");
-  });
-  */
-
-  toolbox.once("styleeditor-selected", function() {
-    tidyUpIfAllCalled("styleeditor");
+  yield new Promise(resolve => {
+    toolbox.once("select", (event, id) => {
+      is(id, "styleeditor", "styleeditor selected");
+      resolve();
+    });
+    toolbox.selectTool("styleeditor");
   });
 
-  toolbox.selectTool("inspector");
-  toolbox.selectTool("webconsole");
-  toolbox.selectTool("styleeditor");
-  //toolbox.selectTool("jsdebugger");
-}
+  yield new Promise(resolve => {
+    toolbox.once("inspector-selected", () => {
+      is(toolbox.currentToolId, "inspector", "inspector selected");
+      resolve();
+    });
+    toolbox.selectTool("inspector");
+  });
 
-function tidyUpIfAllCalled(id) {
-  called[id] = true;
-  info("select event from " + id);
+  yield new Promise(resolve => {
+    toolbox.once("webconsole-selected", () => {
+      is(toolbox.currentToolId, "webconsole", "webconsole selected");
+      resolve();
+    });
+    toolbox.selectTool("webconsole");
+  });
 
-  for (let tool in called) {
-    if (!called[tool]) {
-      return;
-    }
-  }
+  yield new Promise(resolve => {
+    toolbox.once("styleeditor-selected", () => {
+      is(toolbox.currentToolId, "styleeditor", "styleeditor selected");
+      resolve();
+    });
+    toolbox.selectTool("styleeditor");
+  });
 
-  ok(true, "All the tools fired a {id}-selected event");
-  tidyUp();
-}
+  yield closeToolboxAndTab(toolbox);
+});
 
-function tidyUp() {
-  toolbox.destroy();
-  gBrowser.removeCurrentTab();
-
-  toolbox = null;
-  finish();
-}
diff --git a/devtools/client/framework/toolbox.js b/devtools/client/framework/toolbox.js
--- a/devtools/client/framework/toolbox.js
+++ b/devtools/client/framework/toolbox.js
@@ -1278,44 +1278,55 @@ Toolbox.prototype = {
     // we use the chromeEventHandler. We can't use a listener
     // on the DOM node every time because this won't work
     // if the (xul chrome) iframe is loaded in a content docshell.
     if (iframe.contentWindow) {
       let domHelper = new DOMHelpers(iframe.contentWindow);
       domHelper.onceDOMReady(onLoad);
     } else {
       let callback = () => {
-        iframe.removeEventListener("DOMContentLoaded", callback);
+        iframe.removeEventListener("DOMFrameContentLoaded", callback);
         onLoad();
       };
-      iframe.addEventListener("DOMContentLoaded", callback);
+      iframe.addEventListener("DOMFrameContentLoaded", callback);
     }
 
     return deferred.promise;
   },
 
   /**
+   * Mark all in collectionSelector as unselected; and id as selected
+   * @param {string} collectionSelector
+   *        CSS selector for the collection of items to unselect
+   * @param {string} id
+   *        The Id of the item to select
+   */
+  selectItem: function(collectionSelector, id) {
+    let selected = this.doc.querySelector(collectionSelector + "[selected]");
+    if (selected) {
+      selected.removeAttribute("selected");
+      selected.setAttribute("aria-selected", "false");
+    }
+
+    let tab = this.doc.getElementById(id);
+    tab.setAttribute("selected", "true");
+    tab.setAttribute("aria-selected", "true");
+  },
+
+  /**
    * Switch to the tool with the given id
    *
    * @param {string} id
    *        The id of the tool to switch to
    */
   selectTool: function(id) {
     this.emit("before-select", id);
 
-    let selected = this.doc.querySelector(".devtools-tab[selected]");
-    if (selected) {
-      selected.removeAttribute("selected");
-      selected.setAttribute("aria-selected", "false");
-    }
-
-    let tab = this.doc.getElementById("toolbox-tab-" + id);
-    tab.setAttribute("selected", "true");
-    tab.setAttribute("aria-selected", "true");
-
+    this.selectItem(".devtools-tab", "toolbox-tab-" + id);
+    
     // If options is selected, the separator between it and the
     // command buttons should be hidden.
     let sep = this.doc.getElementById("toolbox-controls-separator");
     if (id === "options") {
       sep.setAttribute("invisible", "true");
     } else {
       sep.removeAttribute("invisible");
     }
@@ -1327,17 +1338,17 @@ Toolbox.prototype = {
       // Return the existing panel in order to have a consistent return value.
       return promise.resolve(this._toolPanels.get(id));
     }
 
     if (!this.isReady) {
       throw new Error("Can't select tool, wait for toolbox 'ready' event");
     }
 
-    tab = this.doc.getElementById("toolbox-tab-" + id);
+    let tab = this.doc.getElementById("toolbox-tab-" + id);
 
     if (tab) {
       if (this.currentToolId) {
         this._telemetry.toolClosed(this.currentToolId);
       }
       this._telemetry.toolOpened(id);
     } else {
       throw new Error("No tool found");
@@ -1345,27 +1356,26 @@ Toolbox.prototype = {
 
     let tabstrip = this.doc.getElementById("toolbox-tabs");
 
     // select the right tab, making 0th index the default tab if right tab not
     // found.
     tabstrip.selectedItem = tab || tabstrip.childNodes[0];
 
     // and select the right iframe
-    let deck = this.doc.getElementById("toolbox-deck");
-    let panel = this.doc.getElementById("toolbox-panel-" + id);
-    deck.selectedPanel = panel;
+    this.selectItem(".toolbox-panel", "toolbox-panel-" + id);
 
     this.lastUsedToolId = this.currentToolId;
     this.currentToolId = id;
     this._refreshConsoleDisplay();
     if (id != "options") {
       Services.prefs.setCharPref(this._prefs.LAST_TOOL, id);
     }
 
+    let panel = this.doc.getElementById("toolbox-panel-" + id);
     return this.loadTool(id).then(panel => {
       // focus the tool's frame to start receiving key events
       this.focusTool(id);
 
       this.emit("select", id);
       this.emit(id + "-selected", panel);
       return panel;
     });
diff --git a/devtools/client/framework/toolbox.xul b/devtools/client/framework/toolbox.xul
--- a/devtools/client/framework/toolbox.xul
+++ b/devtools/client/framework/toolbox.xul
@@ -137,15 +137,15 @@
                        tooltiptext="&toolboxCloseButton.tooltip;"/>
       </hbox>
     </toolbar>
     <vbox flex="1" class="theme-body">
       <!-- Set large flex to allow the toolbox-panel-webconsole to have a
            height set to a small value without flexing to fill up extra
            space. There must be a flex on both to ensure that the console
            panel itself is sized properly -->
-      <deck id="toolbox-deck" flex="1000" minheight="75" />
+      <box id="toolbox-deck" flex="1000" minheight="75" />
       <splitter id="toolbox-console-splitter" class="devtools-horizontal-splitter" hidden="true" />
       <box minheight="75" flex="1" id="toolbox-panel-webconsole" collapsed="true" />
     </vbox>
     <tooltip id="aHTMLTooltip" page="true" />
   </notificationbox>
 </window>
diff --git a/devtools/client/themes/toolbars.css b/devtools/client/themes/toolbars.css
--- a/devtools/client/themes/toolbars.css
+++ b/devtools/client/themes/toolbars.css
@@ -829,16 +829,25 @@
 .theme-dark .devtools-tabbar {
   box-shadow: 0 -2px 0 rgba(0,0,0,.1) inset;
 }
 
 #toolbox-tabs {
   margin: 0;
 }
 
+.toolbox-panel {
+  display: none;
+  -moz-box-flex: 1;
+}
+
+.toolbox-panel[selected] {
+  display: -moz-box;
+}
+
 .devtools-tab {
   -moz-appearance: none;
   -moz-binding: url("chrome://global/content/bindings/general.xml#control-item");
   -moz-box-align: center;
   min-width: 32px;
   min-height: 24px;
   max-width: 100px;
   margin: 0;
