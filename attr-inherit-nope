# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  34254cf06441e33aadee86ba5d98f0053b539e02

diff --git a/toolkit/content/customElements.js b/toolkit/content/customElements.js
--- a/toolkit/content/customElements.js
+++ b/toolkit/content/customElements.js
@@ -344,16 +344,19 @@
         }
 
         // Clear out any existing cached elements:
         this._inheritedElements = null;
 
         this.initializedAttributeInheritance = true;
         for (let attr in flippedInheritedAttributes) {
           if (this.hasAttribute(attr)) {
+            // if (this.tagName == "panel") {
+            //   console.log(attr, this.id, this.getAttribute(attr));
+            // }
             this.inheritAttribute(flippedInheritedAttributes[attr], attr);
           }
         }
       }
 
       /*
        * Implements attribute value inheritance by child elements.
        *
diff --git a/toolkit/content/widgets/panel.js b/toolkit/content/widgets/panel.js
--- a/toolkit/content/widgets/panel.js
+++ b/toolkit/content/widgets/panel.js
@@ -4,20 +4,20 @@
 
 "use strict";
 
 // This is loaded into all XUL windows. Wrap in a block to prevent
 // leaking to window scope.
 {
   class MozPanel extends MozElements.MozElementMixin(XULPopupElement) {
     connectedCallback() {
-      if (this.hasConnected) {
+      // Already connected once:
+      if (this.shadowRoot) {
         return;
       }
-      this.hasConnected = true;
       this._prevFocus = 0;
 
       this.addEventListener("popupshowing", this);
       this.addEventListener("popupshown", this);
       this.addEventListener("popuphiding", this);
       this.addEventListener("popuphidden", this);
       this.addEventListener("popuppositioned", this);
 
@@ -37,41 +37,63 @@
       }
       if (!this.hasAttribute("position")) {
         this.setAttribute("position", "bottomcenter topleft");
       }
       if (!this.hasAttribute("consumeoutsideclicks")) {
         this.setAttribute("consumeoutsideclicks", "false");
       }
 
-      this.initializeAttributeInheritance();
+      // this.initializeAttributeInheritance();
 
       this._fadeTimer = null;
     }
 
     get fragment() {
       if (!this.constructor.hasOwnProperty("_fragment")) {
         this.constructor._fragment = MozXULElement.parseXULToFragment(`
         <html:link rel="stylesheet" href="chrome://global/skin/global.css"/>
+        <html:style>
+          :host([orient="vertical"]) .inherit-box-properties { -moz-box-orient: vertical; }
+          :host([orient="horizontal"]) .inherit-box-properties { -moz-box-orient: horizontal; }
+          :host([align="start"]) .inherit-box-properties { -moz-box-align: start; }
+          :host([align="center"]) .inherit-box-properties { -moz-box-align: center; }
+          :host([align="end"]) .inherit-box-properties { -moz-box-align: end; }
+          :host([align="baseline"]) .inherit-box-properties { -moz-box-align: baseline; }
+          :host([align="stretch"]) .inherit-box-properties { -moz-box-align: stretch; }
+          :host([pack="start"]) .inherit-box-properties { -moz-box-pack: start; }
+          :host([pack="center"]) .inherit-box-properties { -moz-box-pack: center; }
+          :host([pack="end"]) .inherit-box-properties { -moz-box-pack: end; }
+
+
+        </html:style>
         <vbox class="panel-arrowcontainer" flex="1">
           <box class="panel-arrowbox" part="arrowbox">
             <image class="panel-arrow" part="arrow"/>
           </box>
-          <box class="panel-arrowcontent" flex="1" part="arrowcontent"><html:slot/></box>
+          <box class="panel-arrowcontent" class="inherit-box-properties" flex="1" part="arrowcontent"><html:slot/></box>
         </vbox>
       `);
       }
       return document.importNode(this.constructor._fragment, true);
     }
 
-    static get inheritedAttributes() {
-      return {
-        ".panel-arrowcontent": "side,align,dir,orient,pack",
-      };
-    }
+    // getElementForAttrInheritance() {
+    //   return this.shadowRoot.querySelector(".panel-arrowcontent");
+    //   let elem = this.shadowRoot && this.shadowRoot.lastElementChild;
+    //   if (elem) {
+    //     return elem.lastElementChild;
+    //   }
+    // }
+
+    // static get inheritedAttributes() {
+    //   return {
+    //     ".panel-arrowcontent": "align,dir,pack",
+    //   };
+    // }
 
     get isArrowPanel() {
       return this.getAttribute("type") == "arrow";
     }
 
     adjustArrowPosition() {
       if (!this.isArrowPanel) {
         return;
