# HG changeset patch
# User Adrian Aichner <adrian.aichner@gmail.com>

Bug 1058183 - Expose code folding as an option for all editor instances. r=bgrins

---
 browser/app/profile/firefox.js                     |    2 +-
 browser/devtools/debugger/debugger-view.js         |    3 +-
 browser/devtools/scratchpad/scratchpad.js          |    5 +-
 browser/devtools/sourceeditor/editor.js            |   51 ++++++++++++++++---
 .../sourceeditor/test/browser_editor_prefs.js      |   17 +++++++
 5 files changed, 65 insertions(+), 13 deletions(-)

diff --git a/browser/app/profile/firefox.js b/browser/app/profile/firefox.js
index 685631d..ce0c717 100644
--- a/browser/app/profile/firefox.js
+++ b/browser/app/profile/firefox.js
@@ -1400,17 +1400,16 @@ pref("devtools.tilt.outro_transition", true);
 //                  stored. Setting this preference to 0 will not
 //                  clear any recent files, but rather hide the
 //                  'Open Recent'-menu.
 // - showTrailingSpace: Whether to highlight trailing space or not.
 // - enableCodeFolding: Whether to enable code folding or not.
 // - enableAutocompletion: Whether to enable JavaScript autocompletion.
 pref("devtools.scratchpad.recentFilesMax", 10);
 pref("devtools.scratchpad.showTrailingSpace", false);
-pref("devtools.scratchpad.enableCodeFolding", true);
 pref("devtools.scratchpad.enableAutocompletion", true);
 
 // Enable the Storage Inspector
 pref("devtools.storage.enabled", false);
 
 // Enable the Style Editor.
 pref("devtools.styleeditor.enabled", true);
 pref("devtools.styleeditor.source-maps-enabled", false);
@@ -1510,16 +1509,17 @@ pref("devtools.eyedropper.zoom", 6);
 // - keymap: which keymap to use (can be 'default', 'emacs' or 'vim')
 // - autoclosebrackets: whether to permit automatic bracket/quote closing.
 // - detectindentation: whether to detect the indentation from the file
 pref("devtools.editor.tabsize", 2);
 pref("devtools.editor.expandtab", true);
 pref("devtools.editor.keymap", "default");
 pref("devtools.editor.autoclosebrackets", true);
 pref("devtools.editor.detectindentation", true);
+pref("devtools.editor.enableCodeFolding", true);
 pref("devtools.editor.autocomplete", true);
 
 // Enable the Font Inspector
 pref("devtools.fontinspector.enabled", true);
 
 // Pref to store the browser version at the time of a telemetry ping for an
 // opened developer tool. This allows us to ping telemetry just once per browser
 // version for each user.
diff --git a/browser/devtools/debugger/debugger-view.js b/browser/devtools/debugger/debugger-view.js
index fe6d3a1..8141469 100644
--- a/browser/devtools/debugger/debugger-view.js
+++ b/browser/devtools/debugger/debugger-view.js
@@ -228,17 +228,18 @@ let DebuggerView = {
 
     this.editor = new Editor({
       mode: Editor.modes.text,
       readOnly: true,
       lineNumbers: true,
       showAnnotationRuler: true,
       gutters: gutters,
       extraKeys: extraKeys,
-      contextMenu: "sourceEditorContextMenu"
+      contextMenu: "sourceEditorContextMenu",
+      enableCodeFolding: false
     });
 
     this.editor.appendTo(document.getElementById("editor")).then(() => {
       this.editor.extend(DebuggerEditor);
       this._loadingText = L10N.getStr("loadingText");
       this._onEditorLoad(aCallback);
     });
 
diff --git a/browser/devtools/scratchpad/scratchpad.js b/browser/devtools/scratchpad/scratchpad.js
index 59f21de..a297821 100644
--- a/browser/devtools/scratchpad/scratchpad.js
+++ b/browser/devtools/scratchpad/scratchpad.js
@@ -29,18 +29,18 @@ const EVAL_FUNCTION_TIMEOUT      = 1000; // milliseconds
 const MAXIMUM_FONT_SIZE = 96;
 const MINIMUM_FONT_SIZE = 6;
 const NORMAL_FONT_SIZE = 12;
 
 const SCRATCHPAD_L10N = "chrome://browser/locale/devtools/scratchpad.properties";
 const DEVTOOLS_CHROME_ENABLED = "devtools.chrome.enabled";
 const PREF_RECENT_FILES_MAX = "devtools.scratchpad.recentFilesMax";
 const SHOW_TRAILING_SPACE = "devtools.scratchpad.showTrailingSpace";
-const ENABLE_CODE_FOLDING = "devtools.scratchpad.enableCodeFolding";
 const ENABLE_AUTOCOMPLETION = "devtools.scratchpad.enableAutocompletion";
+const TAB_SIZE = "devtools.editor.tabsize";
 
 const VARIABLES_VIEW_URL = "chrome://browser/content/devtools/widgets/VariablesView.xul";
 
 const require   = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools.require;
 
 const Telemetry = require("devtools/shared/telemetry");
 const Editor    = require("devtools/sourceeditor/editor");
 const TargetFactory = require("devtools/framework/target").TargetFactory;
@@ -650,17 +650,17 @@ var Scratchpad = {
    * Pretty print the source text inside the scratchpad.
    *
    * @return Promise
    *         A promise resolved with the pretty printed code, or rejected with
    *         an error.
    */
   prettyPrint: function SP_prettyPrint() {
     const uglyText = this.getText();
-    const tabsize = Services.prefs.getIntPref("devtools.editor.tabsize");
+    const tabsize = Services.prefs.getIntPref(TAB_SIZE);
     const id = Math.random();
     const deferred = promise.defer();
 
     const onReply = ({ data }) => {
       if (data.id !== id) {
         return;
       }
       this.prettyPrintWorker.removeEventListener("message", onReply, false);
@@ -1599,17 +1599,16 @@ var Scratchpad = {
     }
 
     let config = {
       mode: Editor.modes.js,
       value: initialText,
       lineNumbers: true,
       contextMenu: "scratchpad-text-popup",
       showTrailingSpace: Services.prefs.getBoolPref(SHOW_TRAILING_SPACE),
-      enableCodeFolding: Services.prefs.getBoolPref(ENABLE_CODE_FOLDING),
       autocomplete: Services.prefs.getBoolPref(ENABLE_AUTOCOMPLETION),
     };
 
     this.editor = new Editor(config);
     let editorElement = document.querySelector("#scratchpad-editor");
     this.editor.appendTo(editorElement).then(() => {
       var lines = initialText.split("\n");
 
diff --git a/browser/devtools/sourceeditor/editor.js b/browser/devtools/sourceeditor/editor.js
index 23225b2..33115ca 100644
--- a/browser/devtools/sourceeditor/editor.js
+++ b/browser/devtools/sourceeditor/editor.js
@@ -4,16 +4,17 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const { Cu, Cc, Ci, components } = require("chrome");
 
 const TAB_SIZE    = "devtools.editor.tabsize";
+const ENABLE_CODE_FOLDING = "devtools.editor.enableCodeFolding";
 const EXPAND_TAB  = "devtools.editor.expandtab";
 const KEYMAP      = "devtools.editor.keymap";
 const AUTO_CLOSE  = "devtools.editor.autoclosebrackets";
 const AUTOCOMPLETE  = "devtools.editor.autocomplete";
 const DETECT_INDENT = "devtools.editor.detectindentation";
 const DETECT_INDENT_MAX_LINES = 500;
 const L10N_BUNDLE = "chrome://browser/locale/devtools/sourceeditor.properties";
 const XUL_NS      = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
@@ -137,16 +138,17 @@ Editor.modes = {
  * This object is also an event emitter.
  *
  * CodeMirror docs: http://codemirror.net/doc/manual.html
  */
 function Editor(config) {
   const tabSize = Services.prefs.getIntPref(TAB_SIZE);
   const useTabs = !Services.prefs.getBoolPref(EXPAND_TAB);
   const useAutoClose = Services.prefs.getBoolPref(AUTO_CLOSE);
+  const useCodeFolding = Services.prefs.getBoolPref(ENABLE_CODE_FOLDING);
 
   this.version = null;
   this.config = {
     value:             "",
     mode:              Editor.modes.text,
     indentUnit:        tabSize,
     tabSize:           tabSize,
     contextMenu:       null,
@@ -183,25 +185,28 @@ function Editor(config) {
     if (!config.extraKeys)
       return;
 
     Object.keys(config.extraKeys).forEach((key) => {
       this.config.extraKeys[key] = config.extraKeys[key];
     });
   });
 
-  // Set the code folding gutter, if needed.
-  if (this.config.enableCodeFolding) {
-    this.config.foldGutter = true;
-
-    if (!this.config.gutters) {
-      this.config.gutters = this.config.lineNumbers ? ["CodeMirror-linenumbers"] : [];
-      this.config.gutters.push("CodeMirror-foldgutter");
-    }
+  if (!this.config.gutters) {
+    this.config.gutters = [];
   }
+  if (this.config.lineNumbers
+      && this.config.gutters.indexOf("CodeMirror-linenumbers") === -1) {
+    this.config.gutters.push("CodeMirror-linenumbers");
+  }
+  // config options must already contain user-provided overwrites.
+  // onLoad already calls reloadPreferences, but that is too late.
+  // An editor needs to be created with all necessary gutters, then they can be
+  // toggled.
+  this.config.gutters.push("CodeMirror-foldgutter");
 
   // Remember the initial value of autoCloseBrackets.
   this.config.autoCloseBracketsSaved = this.config.autoCloseBrackets;
 
   // Overwrite default tab behavior. If something is selected,
   // indent those lines. If nothing is selected and we're
   // indenting with tabs, insert one tab. Otherwise insert N
   // whitespaces where N == indentUnit option.
@@ -328,16 +333,17 @@ Editor.prototype = {
       this.reloadPreferences = this.reloadPreferences.bind(this);
       this._prefObserver = new PrefObserver("devtools.editor.");
       this._prefObserver.on(TAB_SIZE, this.reloadPreferences);
       this._prefObserver.on(EXPAND_TAB, this.reloadPreferences);
       this._prefObserver.on(KEYMAP, this.reloadPreferences);
       this._prefObserver.on(AUTO_CLOSE, this.reloadPreferences);
       this._prefObserver.on(AUTOCOMPLETE, this.reloadPreferences);
       this._prefObserver.on(DETECT_INDENT, this.reloadPreferences);
+      this._prefObserver.on(ENABLE_CODE_FOLDING, this.reloadPreferences);
 
       this.reloadPreferences();
       def.resolve();
     };
 
     env.addEventListener("load", onLoad, true);
     env.setAttribute("src", CM_IFRAME);
     el.appendChild(env);
@@ -425,16 +431,17 @@ Editor.prototype = {
       useAutoClose ? this.config.autoCloseBracketsSaved : false);
 
     // If alternative keymap is provided, use it.
     const keyMap = Services.prefs.getCharPref(KEYMAP);
     if (VALID_KEYMAPS.has(keyMap))
       this.setOption("keyMap", keyMap)
     else
       this.setOption("keyMap", "default");
+    this.updateCodeFoldingGutter();
 
     this.resetIndentUnit();
     this.setupAutoCompletion();
   },
 
   /**
    * Set the editor's indentation based on the current prefs and
    * re-detect indentation if we should.
@@ -938,16 +945,21 @@ Editor.prototype = {
   /**
    * Sets an option for the editor.  For most options it just defers to
    * CodeMirror.setOption, but certain ones are maintained within the editor
    * instance.
    */
   setOption: function(o, v) {
     let cm = editors.get(this);
 
+    if (o === "enableCodeFolding") {
+      cm.setOption("foldGutter", v);
+      return;
+    }
+
     // Save the state of a valid autoCloseBrackets string, so we can reset
     // it if it gets preffed off and back on.
     if (o === "autoCloseBrackets" && v) {
       this.config.autoCloseBracketsSaved = v;
     }
 
     if (o === "autocomplete") {
       this.config.autocomplete = v;
@@ -959,16 +971,19 @@ Editor.prototype = {
 
   /**
    * Gets an option for the editor.  For most options it just defers to
    * CodeMirror.getOption, but certain ones are maintained within the editor
    * instance.
    */
   getOption: function(o) {
     let cm = editors.get(this);
+    if (o === "enableCodeFolding") {
+      return cm.getOption("foldGutter");
+    }
     if (o === "autocomplete") {
       return this.config.autocomplete;
     } else {
       return cm.getOption(o);
     }
   },
 
   /**
@@ -1031,20 +1046,40 @@ Editor.prototype = {
 
     if (this._prefObserver) {
       this._prefObserver.off(TAB_SIZE, this.reloadPreferences);
       this._prefObserver.off(EXPAND_TAB, this.reloadPreferences);
       this._prefObserver.off(KEYMAP, this.reloadPreferences);
       this._prefObserver.off(AUTO_CLOSE, this.reloadPreferences);
       this._prefObserver.off(AUTOCOMPLETE, this.reloadPreferences);
       this._prefObserver.off(DETECT_INDENT, this.reloadPreferences);
+      this._prefObserver.off(ENABLE_CODE_FOLDING, this.reloadPreferences);
       this._prefObserver.destroy();
     }
 
     this.emit("destroy");
+  },
+
+  updateCodeFoldingGutter: function () {
+    let codeFoldingPref = Services.prefs.getBoolPref(ENABLE_CODE_FOLDING),
+        shouldFoldGutter = this.config.enableCodeFolding,
+        foldGutterIndex = this.config.gutters.indexOf("CodeMirror-foldgutter"),
+        cm = editors.get(this);
+    if (shouldFoldGutter === undefined) {
+      shouldFoldGutter = codeFoldingPref;
+    }
+    if (shouldFoldGutter) {
+      this.setOption("enableCodeFolding", true);
+    } else {
+      if (cm) {
+        // No code should remain folded when folding is off.
+        cm.execCommand("unfoldAll");
+      }
+      this.setOption("enableCodeFolding", false);
+    }
   }
 };
 
 // Since Editor is a thin layer over CodeMirror some methods
 // are mapped directly—without any changes.
 
 CM_MAPPING.forEach(function (name) {
   Editor.prototype[name] = function (...args) {
diff --git a/browser/devtools/sourceeditor/test/browser_editor_prefs.js b/browser/devtools/sourceeditor/test/browser_editor_prefs.js
index 04e55b0e..6f4d2cb 100644
--- a/browser/devtools/sourceeditor/test/browser_editor_prefs.js
+++ b/browser/devtools/sourceeditor/test/browser_editor_prefs.js
@@ -2,16 +2,17 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
 // Test to make sure that the editor reacts to preference changes
 
 const TAB_SIZE    = "devtools.editor.tabsize";
+const ENABLE_CODE_FOLDING = "devtools.editor.enableCodeFolding";
 const EXPAND_TAB  = "devtools.editor.expandtab";
 const KEYMAP      = "devtools.editor.keymap";
 const AUTO_CLOSE  = "devtools.editor.autoclosebrackets";
 const AUTOCOMPLETE  = "devtools.editor.autocomplete";
 const DETECT_INDENT = "devtools.editor.detectindentation";
 
 function test() {
   waitForExplicitFinish();
@@ -19,46 +20,62 @@ function test() {
 
     ed.setText("Checking preferences.");
 
     info ("Turning prefs off");
 
     ed.setOption("autocomplete", true);
 
     Services.prefs.setIntPref(TAB_SIZE, 2);
+    Services.prefs.setBoolPref(ENABLE_CODE_FOLDING, false);
     Services.prefs.setBoolPref(EXPAND_TAB, false);
     Services.prefs.setCharPref(KEYMAP, "default");
     Services.prefs.setBoolPref(AUTO_CLOSE, false);
     Services.prefs.setBoolPref(AUTOCOMPLETE, false);
     Services.prefs.setBoolPref(DETECT_INDENT, false);
 
     is(ed.getOption("tabSize"), 2, "tabSize is correct");
     is(ed.getOption("indentUnit"), 2, "indentUnit is correct");
+    is(ed.getOption("foldGutter"), false, "foldGutter is correct");
+    is(ed.getOption("enableCodeFolding"), false, "enableCodeFolding is correct");
     is(ed.getOption("indentWithTabs"), true, "indentWithTabs is correct");
     is(ed.getOption("keyMap"), "default", "keyMap is correct");
     is(ed.getOption("autoCloseBrackets"), "", "autoCloseBrackets is correct");
     is(ed.getOption("autocomplete"), true, "autocomplete is correct");
     ok(!ed.isAutocompletionEnabled(), "Autocompletion is not enabled");
 
     info ("Turning prefs on");
 
     Services.prefs.setIntPref(TAB_SIZE, 4);
+    Services.prefs.setBoolPref(ENABLE_CODE_FOLDING, true);
     Services.prefs.setBoolPref(EXPAND_TAB, true);
     Services.prefs.setCharPref(KEYMAP, "sublime");
     Services.prefs.setBoolPref(AUTO_CLOSE, true);
     Services.prefs.setBoolPref(AUTOCOMPLETE, true);
 
     is(ed.getOption("tabSize"), 4, "tabSize is correct");
     is(ed.getOption("indentUnit"), 4, "indentUnit is correct");
+    is(ed.getOption("foldGutter"), true, "foldGutter is correct");
+    is(ed.getOption("enableCodeFolding"), true, "enableCodeFolding is correct");
     is(ed.getOption("indentWithTabs"), false, "indentWithTabs is correct");
     is(ed.getOption("keyMap"), "sublime", "keyMap is correct");
     is(ed.getOption("autoCloseBrackets"), "()[]{}''\"\"", "autoCloseBrackets is correct");
     is(ed.getOption("autocomplete"), true, "autocomplete is correct");
     ok(ed.isAutocompletionEnabled(), "Autocompletion is enabled");
 
+    info ("Turning foldGutter off using enableCodeFolding");
+
+    ed.setOption("enableCodeFolding", false);
+    is(ed.getOption("foldGutter"), false, "foldGutter is correct");
+
+    info ("Turning enableCodeFolding on using foldGutter");
+
+    ed.setOption("foldGutter", true);
+    is(ed.getOption("enableCodeFolding"), true, "enableCodeFolding is correct");
+
     info ("Checking indentation detection");
 
     Services.prefs.setBoolPref(DETECT_INDENT, true);
 
     ed.setText("Detecting\n\tTabs");
     is(ed.getOption("indentWithTabs"), true, "indentWithTabs is correct");
     is(ed.getOption("indentUnit"), 4, "indentUnit is correct");
 
-- 
1.7.9

