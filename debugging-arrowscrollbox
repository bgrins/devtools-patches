# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  2e077d6d7f94576cf79bcb8c4e366378e77668cb

diff --git a/browser/base/content/browser.xhtml b/browser/base/content/browser.xhtml
--- a/browser/base/content/browser.xhtml
+++ b/browser/base/content/browser.xhtml
@@ -728,17 +728,25 @@
                   is="tabbrowser-tabs"
                   flex="1"
                   setfocus="false"
                   tooltip="tabbrowser-tab-tooltip"
                   stopwatchid="FX_TAB_CLICK_MS">
               <hbox class="tab-drop-indicator-box">
                 <image class="tab-drop-indicator" hidden="true"/>
               </hbox>
-              <arrowscrollbox orient="horizontal" flex="1" style="min-width: 1px;" clicktoscroll="true" class="tabbrowser-arrowscrollbox" scrolledtostart="true" scrolledtoend="true" />
+              <arrowscrollbox orient="horizontal" flex="1" style="min-width: 1px;" clicktoscroll="true" class="tabbrowser-arrowscrollbox" scrolledtostart="true" scrolledtoend="true">
+                 <tab is="tabbrowser-tab" class="tabbrowser-tab" selected="true" visuallyselected="true" fadein="true"/>
+               <toolbarbutton id="tabs-newtab-button"
+                              class="toolbarbutton-1"
+                              command="cmd_newNavigatorTab"
+                              onclick="checkForMiddleClick(this, event);"
+                              tooltip="dynamic-shortcut-tooltip"/>
+                    </arrowscrollbox>
+
               <html:span id="tabbrowser-tab-a11y-desc" hidden="true"/>
             </tabs>
 
             <toolbarbutton id="new-tab-button"
                            class="toolbarbutton-1 chromeclass-toolbar-additional"
                            label="&tabCmd.label;"
                            command="cmd_newNavigatorTab"
                            onclick="checkForMiddleClick(this, event);"
diff --git a/browser/base/content/tabbrowser-tabs.js b/browser/base/content/tabbrowser-tabs.js
--- a/browser/base/content/tabbrowser-tabs.js
+++ b/browser/base/content/tabbrowser-tabs.js
@@ -28,28 +28,28 @@
       this.addEventListener("drop", this);
       this.addEventListener("dragend", this);
       this.addEventListener("dragexit", this);
     }
 
     init() {
       this.arrowScrollbox = this.querySelector("arrowscrollbox");
       // XXX: Shadow DOM slotting gets confused if this is inline in browser.xhtml:
-      this.arrowScrollbox.prepend(
-        MozXULElement.parseXULToFragment(
-          `<tab is="tabbrowser-tab" class="tabbrowser-tab" selected="true" visuallyselected="true" fadein="true"/>
-            <toolbarbutton id="tabs-newtab-button"
-                          class="tabs-newtab-button toolbarbutton-1"
-                          command="cmd_newNavigatorTab"
-                          onclick="checkForMiddleClick(this, event);"
-                          tooltip="dynamic-shortcut-tooltip"/>
-            <spacer class="closing-tabs-spacer" style="width: 0;"/>
-          `
-        )
-      );
+      // this.arrowScrollbox.prepend(
+      //   MozXULElement.parseXULToFragment(
+      //     `<tab is="tabbrowser-tab" class="tabbrowser-tab" selected="true" visuallyselected="true" fadein="true"/>
+      //       <toolbarbutton id="tabs-newtab-button"
+      //                     class="tabs-newtab-button toolbarbutton-1"
+      //                     command="cmd_newNavigatorTab"
+      //                     onclick="checkForMiddleClick(this, event);"
+      //                     tooltip="dynamic-shortcut-tooltip"/>
+      //       <spacer class="closing-tabs-spacer" style="width: 0;"/>
+      //     `
+      //   )
+      // );
 
       this.baseConnect();
 
       this._firstTab = null;
       this._lastTab = null;
       this._beforeSelectedTab = null;
       this._beforeHoveredTab = null;
       this._afterHoveredTab = null;
@@ -73,16 +73,17 @@
       this._hiddenSoundPlayingTabs = new Set();
 
       let strId = PrivateBrowsingUtils.isWindowPrivate(window)
         ? "emptyPrivateTabTitle"
         : "emptyTabTitle";
       this.emptyTabTitle = gTabBrowserBundle.GetStringFromName("tabs." + strId);
 
       var tab = this.allTabs[0];
+      console.log(tab, this.allTabs.length);
       tab.label = this.emptyTabTitle;
 
       window.addEventListener("resize", this);
 
       this.boundObserve = (...args) => this.observe(...args);
       Services.prefs.addObserver("privacy.userContext", this.boundObserve);
       this.observe(null, "nsPref:changed", "privacy.userContext.enabled");
 
@@ -921,16 +922,17 @@
     get newTabButton() {
       return this.querySelector("#tabs-newtab-button");
     }
 
     // Accessor for tabs.  arrowScrollbox has two non-tab elements at the
     // end, everything else is <tab>s
     get allTabs() {
       let children = Array.from(this.arrowScrollbox.children);
+      console.log(children.length, this.arrowScrollbox.children.length,  this.arrowScrollbox);
       children.pop();
       children.pop();
       return children;
     }
 
     appendChild(tab) {
       return this.insertBefore(tab, null);
     }
diff --git a/toolkit/components/extensions/test/browser/browser_ext_themes_toolbarbutton_colors.js b/toolkit/components/extensions/test/browser/browser_ext_themes_toolbarbutton_colors.js
--- a/toolkit/components/extensions/test/browser/browser_ext_themes_toolbarbutton_colors.js
+++ b/toolkit/components/extensions/test/browser/browser_ext_themes_toolbarbutton_colors.js
@@ -25,28 +25,30 @@ add_task(async function test_button_back
     },
     files: {
       "image1.png": BACKGROUND,
     },
   });
 
   await extension.startup();
 
+  await new Promise(r=>setTimeout(r, 1000));
+
   let toolbarButton = document.querySelector("#home-button");
   let toolbarButtonIcon = toolbarButton.icon;
   let toolbarButtonIconCS = window.getComputedStyle(toolbarButtonIcon);
 
   InspectorUtils.addPseudoClassLock(toolbarButton, ":hover");
 
   Assert.equal(
     toolbarButtonIconCS.getPropertyValue("background-color"),
     `rgb(${hexToRGB(BUTTON_BACKGROUND_HOVER).join(", ")})`,
     "Toolbar button hover background is set."
   );
-
+await new Promise(r=>r);
   InspectorUtils.addPseudoClassLock(toolbarButton, ":active");
 
   Assert.equal(
     toolbarButtonIconCS.getPropertyValue("background-color"),
     `rgb(${hexToRGB(BUTTON_BACKGROUND_ACTIVE).join(", ")})`,
     "Toolbar button active background is set!"
   );
 
diff --git a/toolkit/content/widgets/arrowscrollbox.js b/toolkit/content/widgets/arrowscrollbox.js
--- a/toolkit/content/widgets/arrowscrollbox.js
+++ b/toolkit/content/widgets/arrowscrollbox.js
@@ -10,27 +10,16 @@
   const { Services } = ChromeUtils.import(
     "resource://gre/modules/Services.jsm"
   );
 
   class MozArrowScrollbox extends MozElements.BaseControl {
     constructor() {
       super();
       this.attachShadow({ mode: "open" });
-      this.shadowRoot.appendChild(this.fragment);
-
-      this.scrollbox = this.shadowRoot.querySelector(
-        ".arrowscrollbox-scrollbox"
-      );
-      this._scrollButtonUp = this.shadowRoot.querySelector(".scrollbutton-up");
-      this._scrollButtonDown = this.shadowRoot.querySelector(
-        ".scrollbutton-down"
-      );
-
-      this.initializeAttributeInheritance();
       this._scrollIndex = 0;
 
       this._arrowScrollAnim = {
         scrollbox: this,
         requestHandle: 0,
         /* 0 indicates there is no pending request */
         start: function arrowSmoothScroll_start() {
           this.lastFrameTime = window.performance.now();
@@ -57,21 +46,16 @@
         },
       };
 
       this._scrollIncrement = null;
 
       this._startEndProps =
         this.orient == "vertical" ? ["top", "bottom"] : ["left", "right"];
 
-      this._isRTLScrollbox =
-        this.orient != "vertical" &&
-        document.defaultView.getComputedStyle(this.scrollbox).direction ==
-          "rtl";
-
       this._ensureElementIsVisibleAnimationFrame = 0;
 
       this._prevMouseScrolls = [null, null];
 
       this._touchStart = -1;
 
       this._scrollButtonUpdatePending = false;
 
@@ -336,21 +320,37 @@
         <html:slot></html:slot>
       </scrollbox>
       <spacer part="arrowscrollbox-overflow-end-indicator"></spacer>
       <toolbarbutton class="scrollbutton-down" part="scrollbutton-down"/>
     `;
     }
 
     connectedCallback() {
-      if (this.hasConnected) {
+      if (this.delayConnectedCallback() || this.hasConnected) {
         return;
       }
 
       this.hasConnected = true;
+      this.shadowRoot.appendChild(this.fragment);
+
+      this.scrollbox = this.shadowRoot.querySelector(
+        ".arrowscrollbox-scrollbox"
+      );
+      this._scrollButtonUp = this.shadowRoot.querySelector(".scrollbutton-up");
+      this._scrollButtonDown = this.shadowRoot.querySelector(
+        ".scrollbutton-down"
+      );
+
+      this._isRTLScrollbox =
+        this.orient != "vertical" &&
+        document.defaultView.getComputedStyle(this.scrollbox).direction ==
+          "rtl";
+
+      this.initializeAttributeInheritance();
 
       if (!this.hasAttribute("smoothscroll")) {
         this.smoothScroll = Services.prefs.getBoolPref(
           "toolkit.scrollbox.smoothScroll",
           true
         );
       }
 
