# HG changeset patch
# User Gabriel Luong <gabriel.luong@gmail.com>
# Parent  ca32123d93c0cd03da69a231c2f3719eefb3ec94
Part 4: Add unit tests for highlighting new filter style matches when rule properties are added and modified r=bgrins

diff --git a/browser/devtools/styleinspector/test/browser.ini b/browser/devtools/styleinspector/test/browser.ini
--- a/browser/devtools/styleinspector/test/browser.ini
+++ b/browser/devtools/styleinspector/test/browser.ini
@@ -126,31 +126,35 @@
 [browser_ruleview_refresh-on-style-change.js]
 [browser_ruleview_search-filter-computed-list_01.js]
 [browser_ruleview_search-filter-computed-list_02.js]
 [browser_ruleview_search-filter-computed-list_03.js]
 [browser_ruleview_search-filter-computed-list_04.js]
 [browser_ruleview_search-filter-computed-list_05.js]
 [browser_ruleview_search-filter-computed-list_06.js]
 [browser_ruleview_search-filter-computed-list_07.js]
+[browser_ruleview_search-filter-computed-list_08.js]
 [browser_ruleview_search-filter-computed-list_clear.js]
 [browser_ruleview_search-filter-computed-list_expander.js]
 [browser_ruleview_search-filter_01.js]
 [browser_ruleview_search-filter_02.js]
 [browser_ruleview_search-filter_03.js]
 [browser_ruleview_search-filter_04.js]
 [browser_ruleview_search-filter_05.js]
 [browser_ruleview_search-filter_06.js]
 [browser_ruleview_search-filter_07.js]
 [browser_ruleview_search-filter_08.js]
 [browser_ruleview_search-filter_09.js]
 [browser_ruleview_search-filter_10.js]
 [browser_ruleview_search-filter_11.js]
 [browser_ruleview_search-filter_12.js]
 [browser_ruleview_search-filter_13.js]
+[browser_ruleview_search-filter_14.js]
+[browser_ruleview_search-filter_15.js]
+[browser_ruleview_search-filter_16.js]
 [browser_ruleview_search-filter_clear.js]
 [browser_ruleview_search-filter_context-menu.js]
 [browser_ruleview_search-filter_escape-keypress.js]
 [browser_ruleview_select-and-copy-styles.js]
 [browser_ruleview_selector-highlighter_01.js]
 [browser_ruleview_selector-highlighter_02.js]
 [browser_ruleview_selector-highlighter_03.js]
 [browser_ruleview_selector_highlight.js]
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_08.js b/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_08.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_08.js
@@ -0,0 +1,70 @@
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+ http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Tests that the rule view search filter works properly in the computed list
+// for newly modified property values.
+
+const SEARCH = "0px";
+
+let TEST_URI = [
+  "<style type='text/css'>",
+  "  #testid {",
+  "    margin: 4px;",
+  "    top: 0px;",
+  "  }",
+  "</style>",
+  "<h1 id='testid'>Styled Node</h1>"
+].join("\n");
+
+add_task(function*() {
+  yield addTab("data:text/html;charset=utf-8," + encodeURIComponent(TEST_URI));
+  let {inspector, view} = yield openRuleView();
+  yield selectNode("#testid", inspector);
+  yield testModifyPropertyValueFilter(inspector, view);
+});
+
+function* testModifyPropertyValueFilter(inspector, view) {
+  info("Setting filter text to \"" + SEARCH + "\"");
+
+  let win = view.doc.defaultView;
+  let searchField = view.searchField;
+  let onRuleViewFiltered = inspector.once("ruleview-filtered");
+
+  searchField.focus();
+  synthesizeKeys(SEARCH, win);
+  yield onRuleViewFiltered;
+
+  let rule = getRuleViewRuleEditor(view, 1).rule;
+  let propEditor = rule.textProps[0].editor;
+  let computed = propEditor.computed;
+  let editor = yield focusEditableField(view, propEditor.valueSpan);
+
+  info("Check that the correct rules are visible");
+  is(rule.selectorText, "#testid", "Second rule is #testid.");
+  ok(!propEditor.container.classList.contains("ruleview-highlight"),
+    "margin text property is not highlighted.");
+  ok(rule.textProps[1].editor.container.classList.contains("ruleview-highlight"),
+    "top text property is correctly highlighted.");
+
+  let onBlur = once(editor.input, "blur");
+  let onModification = rule._applyingModifications;
+  EventUtils.sendString("4px 0px", win);
+  EventUtils.synthesizeKey("VK_RETURN", {});
+  yield onBlur;
+  yield onModification;
+
+  ok(propEditor.container.classList.contains("ruleview-highlight"),
+    "margin text property is correctly highlighted.");
+  ok(!computed.hasAttribute("filter-open"), "margin computed list is closed.");
+  ok(!computed.children[0].classList.contains("ruleview-highlight"),
+    "margin-top computed property is not highlighted.");
+  ok(computed.children[1].classList.contains("ruleview-highlight"),
+    "margin-right computed property is correctly highlighted.");
+  ok(!computed.children[2].classList.contains("ruleview-highlight"),
+    "margin-bottom computed property is not highlighted.");
+  ok(computed.children[3].classList.contains("ruleview-highlight"),
+    "margin-left computed property is correctly highlighted.");
+}
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_search-filter_14.js b/browser/devtools/styleinspector/test/browser_ruleview_search-filter_14.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/styleinspector/test/browser_ruleview_search-filter_14.js
@@ -0,0 +1,63 @@
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+ http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Tests that the rule view search filter works properly for newly modified
+// property value.
+
+const SEARCH = "100%";
+
+let TEST_URI = [
+  "<style type='text/css'>",
+  "  #testid {",
+  "    width: 100%;",
+  "    height: 50%;",
+  "  }",
+  "</style>",
+  "<h1 id='testid'>Styled Node</h1>"
+].join("\n");
+
+add_task(function*() {
+  yield addTab("data:text/html;charset=utf-8," + encodeURIComponent(TEST_URI));
+  let {inspector, view} = yield openRuleView();
+  yield selectNode("#testid", inspector);
+  yield testModifyPropertyValueFilter(inspector, view);
+});
+
+function* testModifyPropertyValueFilter(inspector, view) {
+  info("Setting filter text to \"" + SEARCH + "\"");
+
+  let win = view.doc.defaultView;
+  let searchField = view.searchField;
+  let onvRuleViewFiltered = inspector.once("ruleview-filtered");
+
+  searchField.focus();
+  synthesizeKeys(SEARCH, win);
+  yield onvRuleViewFiltered;
+
+  let ruleEditor = getRuleViewRuleEditor(view, 1);
+  let rule = ruleEditor.rule;
+  let propEditor = rule.textProps[1].editor;
+  let editor = yield focusEditableField(view, propEditor.valueSpan);
+
+  info("Check that the correct rules are visible");
+  is(view.element.children.length, 2, "Should have 2 rules.");
+  is(rule.selectorText, "#testid", "Second rule is #testid.");
+  ok(rule.textProps[0].editor.container.classList.contains("ruleview-highlight"),
+    "width text property is correctly highlighted.");
+  ok(!propEditor.container.classList.contains("ruleview-highlight"),
+    "height text property is not highlighted.");
+
+  let onBlur = once(editor.input, "blur");
+  let onModification = rule._applyingModifications;
+  EventUtils.sendString("100%", win);
+  EventUtils.synthesizeKey("VK_RETURN", {});
+  yield onBlur;
+  yield onModification;
+
+  ok(propEditor.container.classList.contains("ruleview-highlight"),
+    "height text property is correctly highlighted.");
+}
+
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_search-filter_15.js b/browser/devtools/styleinspector/test/browser_ruleview_search-filter_15.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/styleinspector/test/browser_ruleview_search-filter_15.js
@@ -0,0 +1,63 @@
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+ http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Tests that the rule view search filter works properly for newly modified
+// property name.
+
+const SEARCH = "e";
+
+let TEST_URI = [
+  "<style type='text/css'>",
+  "  #testid {",
+  "    width: 100%;",
+  "    height: 50%;",
+  "  }",
+  "</style>",
+  "<h1 id='testid'>Styled Node</h1>"
+].join("\n");
+
+add_task(function*() {
+  yield addTab("data:text/html;charset=utf-8," + encodeURIComponent(TEST_URI));
+  let {inspector, view} = yield openRuleView();
+  yield selectNode("#testid", inspector);
+  yield testModifyPropertyNameFilter(inspector, view);
+});
+
+function* testModifyPropertyNameFilter(inspector, view) {
+  info("Setting filter text to \"" + SEARCH + "\"");
+
+  let win = view.doc.defaultView;
+  let searchField = view.searchField;
+  let onRuleViewFiltered = inspector.once("ruleview-filtered");
+
+  searchField.focus();
+  synthesizeKeys(SEARCH, win);
+  yield onRuleViewFiltered;
+
+  let ruleEditor = getRuleViewRuleEditor(view, 1);
+  let rule = ruleEditor.rule;
+  let propEditor = rule.textProps[0].editor;
+  let editor = yield focusEditableField(view, propEditor.nameSpan);
+
+  info("Check that the correct rules are visible");
+  is(view.element.children.length, 2, "Should have 2 rules.");
+  is(rule.selectorText, "#testid", "Second rule is #testid.");
+  ok(!propEditor.container.classList.contains("ruleview-highlight"),
+    "width text property is not highlighted.");
+  ok(rule.textProps[1].editor.container.classList.contains("ruleview-highlight"),
+    "height text property is correctly highlighted.");
+
+  let onBlur = once(editor.input, "blur");
+  let onModification = rule._applyingModifications;
+  EventUtils.sendString("margin-left", win);
+  EventUtils.synthesizeKey("VK_RETURN", {});
+  yield onBlur;
+  yield onModification;
+
+  ok(propEditor.container.classList.contains("ruleview-highlight"),
+    "margin-left text property is correctly highlighted.");
+}
+
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_search-filter_16.js b/browser/devtools/styleinspector/test/browser_ruleview_search-filter_16.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/styleinspector/test/browser_ruleview_search-filter_16.js
@@ -0,0 +1,79 @@
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+ http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Tests that the rule view search filter works properly for newly added
+// property.
+
+const SEARCH = "100%";
+
+let TEST_URI = [
+  "<style type='text/css'>",
+  "  #testid {",
+  "    width: 100%;",
+  "    height: 50%;",
+  "  }",
+  "</style>",
+  "<h1 id='testid'>Styled Node</h1>"
+].join("\n");
+
+add_task(function*() {
+  yield addTab("data:text/html;charset=utf-8," + encodeURIComponent(TEST_URI));
+  let {inspector, view} = yield openRuleView();
+  yield selectNode("#testid", inspector);
+  yield testNewPropertyFilter(inspector, view);
+});
+
+function* testNewPropertyFilter(inspector, view) {
+  info("Setting filter text to \"" + SEARCH + "\"");
+
+  let win = view.doc.defaultView;
+  let searchField = view.searchField;
+  let onRuleViewFiltered = inspector.once("ruleview-filtered");
+
+  searchField.focus();
+  synthesizeKeys(SEARCH, win);
+  yield onRuleViewFiltered;
+
+  let ruleEditor = getRuleViewRuleEditor(view, 1);
+  let rule = ruleEditor.rule;
+  let editor = yield focusEditableField(view, ruleEditor.closeBrace);
+
+  info("Check that the correct rules are visible");
+  is(view.element.children.length, 2, "Should have 2 rules.");
+  is(rule.selectorText, "#testid", "Second rule is #testid.");
+  ok(rule.textProps[0].editor.container.classList.contains("ruleview-highlight"),
+    "width text property is correctly highlighted.");
+  ok(!rule.textProps[1].editor.container.classList.contains("ruleview-highlight"),
+    "height text property is not highlighted.");
+
+  info("Test creating a new property");
+
+  info("Entering margin-left in the property name editor");
+  editor.input.value = "margin-left";
+
+  info("Pressing return to commit and focus the new value field");
+  let onValueFocus = once(ruleEditor.element, "focus", true);
+  let onModifications = ruleEditor.rule._applyingModifications;
+  EventUtils.synthesizeKey("VK_RETURN", {}, win);
+  yield onValueFocus;
+  yield onModifications;
+
+  // Getting the new value editor after focus
+  editor = inplaceEditor(view.doc.activeElement);
+  let propEditor = ruleEditor.rule.textProps[2].editor;
+
+  info("Entering a value and bluring the field to expect a rule change");
+  editor.input.value = "100%";
+  let onBlur = once(editor.input, "blur");
+  onModifications = ruleEditor.rule._applyingModifications;
+  editor.input.blur();
+  yield onBlur;
+  yield onModifications;
+
+  ok(propEditor.container.classList.contains("ruleview-highlight"),
+    "margin-left text property is correctly highlighted.");
+}
+
