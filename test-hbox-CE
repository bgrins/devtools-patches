# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  bdb64cf16b68c4a7212ba16aef425bce66d8f4ca
Test hbox as custom element

diff --git a/browser/base/content/browser.xhtml b/browser/base/content/browser.xhtml
--- a/browser/base/content/browser.xhtml
+++ b/browser/base/content/browser.xhtml
@@ -1365,17 +1365,17 @@
         <searchbar id="searchbar" flex="1"/>
         <toolbartabstop/>
       </toolbaritem>
     </toolbarpalette>
   </toolbox>
 
   <hbox id="fullscr-toggler" hidden="true"/>
 
-  <hbox flex="1" id="browser" renderroot="content">
+  <html:moz-hbox flex="1" id="browser" renderroot="content">
     <vbox id="browser-border-start" hidden="true" layer="true"/>
     <vbox id="sidebar-box" hidden="true" class="chromeclass-extrachrome">
       <sidebarheader id="sidebar-header" align="center">
         <toolbarbutton id="sidebar-switcher-target" flex="1" class="tabbable">
           <image id="sidebar-icon" consumeanchor="sidebar-switcher-target"/>
           <label id="sidebar-title" crop="end" flex="1" control="sidebar"/>
           <image id="sidebar-switcher-arrow"/>
         </toolbarbutton>
@@ -1396,17 +1396,17 @@
       <!-- gHighPriorityNotificationBox will be added here lazily. -->
       <tabbox id="tabbrowser-tabbox"
               flex="1" tabcontainer="tabbrowser-tabs">
         <tabpanels id="tabbrowser-tabpanels"
                     flex="1" class="plain" selectedIndex="0"/>
       </tabbox>
     </vbox>
     <vbox id="browser-border-end" hidden="true" layer="true"/>
-  </hbox>
+  </html:moz-hbox>
 
   <box id="customization-container" flex="1" renderroot="content" hidden="true"><![CDATA[
 #include ../../components/customizableui/content/customizeMode.inc.xul
   ]]></box>
 
 # Everything that needs to straddle the line between chrome and content, without being
 # its own widget-level window, needs to go in here, and set the renderroot="popover"
 # attribute, or it will fail to render properly in WebRender.
diff --git a/toolkit/content/customElements.js b/toolkit/content/customElements.js
--- a/toolkit/content/customElements.js
+++ b/toolkit/content/customElements.js
@@ -611,16 +611,17 @@
     Object.defineProperty(MozElementBase, "name", { value: `Moz${Base.name}` });
     if (instrumentedBaseClasses) {
       instrumentedBaseClasses.add(MozElementBase);
     }
     return MozElementBase;
   };
 
   const MozXULElement = MozElements.MozElementMixin(XULElement);
+  const MozHTMLElement = MozElements.MozElementMixin(HTMLElement);
 
   /**
    * Given an object, add a proxy that reflects interface implementations
    * onto the object itself.
    */
   function getInterfaceProxy(obj) {
     /* globals MozQueryInterface */
     if (!obj._customInterfaceProxy) {
@@ -732,16 +733,17 @@
           : this.getAttribute("accesskey");
       }
     };
   MozElements.BaseTextMixin = BaseTextMixin;
   MozElements.BaseText = BaseTextMixin(MozXULElement);
 
   // Attach the base class to the window so other scripts can use it:
   window.MozXULElement = MozXULElement;
+  window.MozHTMLElement = MozHTMLElement;
 
   customElements.setElementCreationCallback("browser", () => {
     Services.scriptloader.loadSubScript(
       "chrome://global/content/elements/browser-custom-element.js",
       window
     );
   });
 
diff --git a/toolkit/content/widgets/general.js b/toolkit/content/widgets/general.js
--- a/toolkit/content/widgets/general.js
+++ b/toolkit/content/widgets/general.js
@@ -2,16 +2,41 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 // This is loaded into chrome windows with the subscript loader. Wrap in
 // a block to prevent accidentally leaking globals onto `window`.
 {
+  customElements.define(
+    "moz-hbox",
+    class extends MozHTMLElement {
+      static get observedAttributes() {
+        return super.observedAttributes.concat(["flex"]);
+      }
+      attributeChangedCallback(name, oldValue, newValue) {
+        // if (name == "flex") {
+        // }
+        // console.log(this.tagName, name, oldValue, newValue);
+      }
+    }
+  );
+  customElements.define(
+    "moz-vbox",
+    class extends MozHTMLElement {
+      static get observedAttributes() {
+        return super.observedAttributes.concat(["flex"]);
+      }
+      attributeChangedCallback(name, oldValue, newValue) {
+        // console.log(this.tagName, name, oldValue, newValue);
+      }
+    }
+  );
+
   class MozDeck extends MozXULElement {
     set selectedIndex(val) {
       if (this.selectedIndex == val) {
         return val;
       }
       this.setAttribute("selectedIndex", val);
       var event = document.createEvent("Events");
       event.initEvent("select", true, true);
diff --git a/toolkit/content/xul.css b/toolkit/content/xul.css
--- a/toolkit/content/xul.css
+++ b/toolkit/content/xul.css
@@ -617,16 +617,51 @@ tabmodalprompt {
 
 .menulist-highlightable-label:not([highlightable="true"]),
 .menulist-label[highlightable="true"],
 .menu-iconic-highlightable-text:not([highlightable="true"]),
 .menu-iconic-text[highlightable="true"] {
   display: none;
 }
 
+html|moz-hbox,
+html|moz-vbox {
+  -moz-user-focus: ignore;
+  -moz-user-select: none;
+  display: -moz-box;
+  box-sizing: border-box;
+}
+
+/* hide the content and destroy the frame */
+html|moz-hbox[hidden="true"] {
+  display: none;
+}
+
+/* hide the content, but don't destroy the frames */
+html|moz-hbox[collapsed="true"] {
+  visibility: collapse;
+}
+
+html|moz-hbox[orient="vertical"] { -moz-box-orient: vertical; }
+html|moz-hbox[orient="horizontal"] { -moz-box-orient: horizontal; }
+
+html|moz-hbox[dir="reverse"] { -moz-box-direction: reverse; }
+
+html|moz-hbox[align="start"] { -moz-box-align: start; }
+html|moz-hbox[align="center"] { -moz-box-align: center; }
+html|moz-hbox[align="end"] { -moz-box-align: end; }
+html|moz-hbox[align="baseline"] { -moz-box-align: baseline; }
+html|moz-hbox[align="stretch"] { -moz-box-align: stretch; }
+
+html|moz-hbox[pack="start"] { -moz-box-pack: start; }
+html|moz-hbox[pack="center"] { -moz-box-pack: center; }
+html|moz-hbox[pack="end"] { -moz-box-pack: end; }
+
+html|moz-hbox[flex="1"] { -moz-box-flex: 1; }
+
 @supports -moz-bool-pref("layout.css.emulate-moz-box-with-flex") {
   /* Support common XUL attributes in the emulated flex mode so we can
      test the browser in this configuration without mass-changing existing
      markup and CSS. */
   [orient="vertical"] { -moz-box-orient: vertical; }
   [orient="horizontal"] { -moz-box-orient: horizontal; }
 
   [dir="reverse"] { -moz-box-direction: reverse; }
