diff --git a/intl/l10n/DOMLocalization.jsm b/intl/l10n/DOMLocalization.jsm
--- a/intl/l10n/DOMLocalization.jsm
+++ b/intl/l10n/DOMLocalization.jsm
@@ -471,12 +471,19 @@
    * @param {Object<string, string>} args    - KVP list of l10n arguments
    * @returns {Element}
    */
-  setAttributes(element, id, args) {
-    element.setAttribute(L10NID_ATTR_NAME, id);
+  setAttributes(element, id, args = null) {
+    if (element.getAttribute(L10NID_ATTR_NAME) !== id) {
+      element.setAttribute(L10NID_ATTR_NAME, id);
+    }
     if (args) {
-      element.setAttribute(L10NARGS_ATTR_NAME, JSON.stringify(args));
+      let argsString = JSON.stringify(args);
+      if (argsString !== element.getAttribute(L10NARGS_ATTR_NAME)) {
+        element.setAttribute(L10NARGS_ATTR_NAME, argsString);
+      }
     } else {
-      element.removeAttribute(L10NARGS_ATTR_NAME);
+      if (element.hasAttribute(L10NARGS_ATTR_NAME)) {
+        element.removeAttribute(L10NARGS_ATTR_NAME);
+      }
     }
     return element;
   }
diff --git a/intl/l10n/DocumentL10n.cpp b/intl/l10n/DocumentL10n.cpp
--- a/intl/l10n/DocumentL10n.cpp
+++ b/intl/l10n/DocumentL10n.cpp
@@ -284,10 +284,11 @@
                                  const nsAString& aId,
                                  const Optional<JS::Handle<JSObject*>>& aArgs,
                                  ErrorResult& aRv) {
-  aElement.SetAttribute(NS_LITERAL_STRING("data-l10n-id"), aId, aRv);
-  if (aRv.Failed()) {
-    return;
+  if (!aElement.AttrValueIs(kNameSpaceID_None, nsGkAtoms::datal10nid, aId,
+                            eCaseMatters)) {
+    aElement.SetAttr(kNameSpaceID_None, nsGkAtoms::datal10nid, aId, true);
   }
+
   if (aArgs.WasPassed()) {
     nsAutoString data;
     JS::Rooted<JS::Value> val(aCx, JS::ObjectValue(*aArgs.Value()));
@@ -295,9 +296,14 @@
       aRv.Throw(NS_ERROR_DOM_SYNTAX_ERR);
       return;
     }
-    aElement.SetAttribute(NS_LITERAL_STRING("data-l10n-args"), data, aRv);
+    if (!aElement.AttrValueIs(kNameSpaceID_None, nsGkAtoms::datal10nargs, data,
+                              eCaseMatters)) {
+      aElement.SetAttr(kNameSpaceID_None, nsGkAtoms::datal10nargs, data, true);
+    }
   } else {
-    aElement.RemoveAttribute(NS_LITERAL_STRING("data-l10n-args"), aRv);
+    if (aElement.HasAttr(kNameSpaceID_None, nsGkAtoms::datal10nargs)) {
+      aElement.UnsetAttr(kNameSpaceID_None, nsGkAtoms::datal10nargs, true);
+    }
   }
 }
 
diff --git a/intl/l10n/test/chrome.ini b/intl/l10n/test/chrome.ini
--- a/intl/l10n/test/chrome.ini
+++ b/intl/l10n/test/chrome.ini
@@ -26,3 +26,6 @@
 [dom/test_docl10n.html]
 [dom/test_docl10n_ready_rejected.html]
 [dom/test_docl10n_removeResourceIds.html]
+
+[dom_overlays/test_same_id.html]
+[dom_overlays/test_same_id_args.html]
diff --git a/intl/l10n/test/dom_overlays/test_same_id.html b/intl/l10n/test/dom_overlays/test_same_id.html
new file mode 100644
--- /dev/null
+++ b/intl/l10n/test/dom_overlays/test_same_id.html
@@ -0,0 +1,54 @@
+<!DOCTYPE HTML>
+<html>
+<head>
+  <meta charset="utf-8">
+  <title>Test Amount of mutations generated from DOM Overlays</title>
+  <script type="application/javascript" src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
+  <link rel="stylesheet" type="text/css" href="chrome://mochikit/content/tests/SimpleTest/test.css">
+  <link rel="localization" href="browser/aboutConfig.ftl"/>
+  <script type="application/javascript">
+  "use strict";
+  SimpleTest.waitForExplicitFinish();
+
+  let config = {
+    attributes: true,
+    attributeOldValue: true,
+    characterData: true,
+    characterDataOldValue: true,
+    childList: true,
+    subtree: true
+  };
+  let allMutations = [];
+
+  document.addEventListener("DOMContentLoaded", async function() {
+    await document.l10n.ready;
+
+    let inputElem = document.getElementById("search-input");
+
+    // Test for initial localization applied.
+    is(inputElem.getAttribute("placeholder").length > 0, true);
+
+    let observer = new MutationObserver((mutations) => {
+      for (let mutation of mutations) {
+        allMutations.push(mutation);
+      }
+    });
+    observer.observe(inputElem, config);
+
+    document.l10n.setAttributes(inputElem, "about-config-search-input");
+
+    // We expect that since the localization is loaded
+    // the next mutation will happen before animation frame.
+    requestAnimationFrame(() => {
+      // Since the l10n-id is the same as the previous one
+      // no mutation should happen in result.
+      is(allMutations.length, 0);
+      SimpleTest.finish();
+    })
+  }, { once: true});
+  </script>
+</head>
+<body>
+  <input id="search-input" data-l10n-id="about-config-search-input"></input>
+</body>
+</html>
diff --git a/intl/l10n/test/dom_overlays/test_same_id_args.html b/intl/l10n/test/dom_overlays/test_same_id_args.html
new file mode 100644
--- /dev/null
+++ b/intl/l10n/test/dom_overlays/test_same_id_args.html
@@ -0,0 +1,54 @@
+<!DOCTYPE HTML>
+<html>
+<head>
+  <meta charset="utf-8">
+  <title>Test Amount of mutations generated from DOM Overlays</title>
+  <script type="application/javascript" src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
+  <link rel="stylesheet" type="text/css" href="chrome://mochikit/content/tests/SimpleTest/test.css">
+  <link rel="localization" href="browser/aboutConfig.ftl"/>
+  <script type="application/javascript">
+  "use strict";
+  SimpleTest.waitForExplicitFinish();
+
+  let config = {
+    attributes: true,
+    attributeOldValue: true,
+    characterData: true,
+    characterDataOldValue: true,
+    childList: true,
+    subtree: true
+  };
+  let allMutations = [];
+
+  document.addEventListener("DOMContentLoaded", async function() {
+    await document.l10n.ready;
+
+    let inputElem = document.getElementById("search-input");
+
+    // Test for initial localization applied.
+    is(inputElem.getAttribute("aria-label").length > 0, true);
+
+    let observer = new MutationObserver((mutations) => {
+      for (let mutation of mutations) {
+        allMutations.push(mutation);
+      }
+    });
+    observer.observe(inputElem, config);
+
+    document.l10n.setAttributes(inputElem, "about-config-pref-accessible-value-default", {value: "Test"});
+
+    // We expect that since the localization is loaded
+    // the next mutation will happen before animation frame.
+    requestAnimationFrame(() => {
+      // Since the l10n-id is the same as the previous one
+      // no mutation should happen in result.
+      is(allMutations.length, 0);
+      SimpleTest.finish();
+    })
+  }, { once: true});
+  </script>
+</head>
+<body>
+  <input id="search-input" data-l10n-id="about-config-pref-accessible-value-default" data-l10n-args='{"value":"Test"}'></input>
+</body>
+</html>

