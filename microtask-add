# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  b75acf9652937ce79a9bf02de843c100db0e5ec7
Bug 1466833

diff --git a/browser/components/search/content/search.xml b/browser/components/search/content/search.xml
--- a/browser/components/search/content/search.xml
+++ b/browser/components/search/content/search.xml
@@ -1105,17 +1105,16 @@
                       accesskey="&searchInNewTab.accesskey;"/>
         <xul:menuitem anonid="search-one-offs-context-set-default"
                       label="&searchSetAsDefault.label;"
                       accesskey="&searchSetAsDefault.accesskey;"/>
       </xul:menupopup>
     </content>
 
     <implementation implements="nsIObserver,nsIWeakReference">
-
       <!-- Width in pixels of the one-off buttons.  49px is the min-width of
            each search engine button, adapt this const when changing the css.
            It's actually 48px + 1px of right border. -->
       <property name="buttonWidth" readonly="true" onget="return 49;"/>
 
       <field name="_popup">null</field>
 
       <!-- The popup that contains the one-offs.  This is required, so it should
@@ -1254,17 +1253,17 @@
           return this.getAttribute("compact") == "true";
         ]]></getter>
       </property>
 
       <field name="buttons" readonly="true">
         document.getAnonymousElementByAttribute(this, "anonid", "search-panel-one-offs");
       </field>
       <field name="header" readonly="true">
-        document.getAnonymousElementByAttribute(this, "anonid", "search-panel-one-offs-header");
+        (console.log("Getting header") || console.trace() || document.getAnonymousElementByAttribute(this, "anonid", "search-panel-one-offs-header"))
       </field>
       <field name="addEngines" readonly="true">
         document.getAnonymousElementByAttribute(this, "anonid", "add-engines");
       </field>
       <field name="settingsButton" readonly="true">
         document.getAnonymousElementByAttribute(this, "anonid", "search-settings");
       </field>
       <field name="settingsButtonCompact" readonly="true">
@@ -1283,16 +1282,18 @@
         ]]></getter>
       </property>
 
       <!-- When a context menu is opened on a one-off button, this is set to the
            engine of that button for use with the context menu actions. -->
       <field name="_contextEngine">null</field>
 
       <constructor><![CDATA[
+        console.log("CONSTRUCTOR");
+        console.trace();
         // Prevent popup events from the context menu from reaching the autocomplete
         // binding (or other listeners).
         let menu = document.getAnonymousElementByAttribute(this, "anonid", "search-one-offs-context-menu");
         let listener = aEvent => aEvent.stopPropagation();
         menu.addEventListener("popupshowing", listener);
         menu.addEventListener("popuphiding", listener);
         menu.addEventListener("popupshown", aEvent => {
           this._ignoreMouseEvents = true;
diff --git a/dom/xbl/nsXBLBinding.cpp b/dom/xbl/nsXBLBinding.cpp
--- a/dom/xbl/nsXBLBinding.cpp
+++ b/dom/xbl/nsXBLBinding.cpp
@@ -620,16 +620,20 @@ nsXBLBinding::AttributeChanged(nsAtom* a
     mPrototypeBinding->AttributeChanged(aAttribute, aNameSpaceID, aRemoveFlag,
                                         mBoundElement, mContent, aNotify);
   }
 }
 
 void
 nsXBLBinding::ExecuteAttachedHandler()
 {
+  {
+    // Try to perform a microtask checkpoint
+    nsAutoMicroTask mt;
+  }
   if (mNextBinding)
     mNextBinding->ExecuteAttachedHandler();
 
   if (AllowScripts())
     mPrototypeBinding->BindingAttached(mBoundElement);
 }
 
 void
diff --git a/toolkit/content/widgets/general.js b/toolkit/content/widgets/general.js
--- a/toolkit/content/widgets/general.js
+++ b/toolkit/content/widgets/general.js
@@ -2,16 +2,25 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 {
 
 class MozDeck extends MozXULElement {
+  constructor() {
+    super();
+    console.log("Custom Element constructed", this, this.hasOwnProperty("selectedIndex"));
+  }
+  connectedCallback() {
+    console.log("Custom Element connectedCallback", this, this.hasOwnProperty("selectedIndex"));
+  }
+
+
   set selectedIndex(val) {
     if (this.selectedIndex == val) return val;
     this.setAttribute("selectedIndex", val);
     var event = document.createEvent("Events");
     event.initEvent("select", true, true);
     this.dispatchEvent(event);
     return val;
   }
