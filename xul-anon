# HG changeset patch
# Parent 8b35d3ba140d75c881286468d733110402f0a454
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 1093875 - Allow XBL anonymous content inspection inside of an HTML document;r=pbrosset

diff --git a/toolkit/devtools/server/actors/inspector.js b/toolkit/devtools/server/actors/inspector.js
--- a/toolkit/devtools/server/actors/inspector.js
+++ b/toolkit/devtools/server/actors/inspector.js
@@ -3219,20 +3219,19 @@ DocumentWalker.prototype = {
     let node = this.walker.nextSibling();
     while (node && this.filter(node) === Ci.nsIDOMNodeFilter.FILTER_SKIP) {
       node = this.walker.nextSibling();
     }
     return node;
   }
 };
 
-function isXULDocument(doc) {
-  return doc &&
-         doc.documentElement &&
-         doc.documentElement.namespaceURI === XUL_NS;
+function isXULElement(el) {
+  return el &&
+         el.namespaceURI === XUL_NS;
 }
 
 /**
  * A tree walker filter for avoiding empty whitespace text nodes.
  */
 function nodeFilter(aNode) {
   // Ignore empty whitespace text nodes.
   if (aNode.nodeType == Ci.nsIDOMNode.TEXT_NODE &&
@@ -3242,17 +3241,17 @@ function nodeFilter(aNode) {
 
   // Ignore all native anonymous content (like internals for form
   // controls).  Except for:
   //   1) Anonymous content in a XUL document. This is needed for all
   //      elements within the Browser Toolbox to properly show up.
   //   2) ::before/::after - we do want this to show in the walker so
   //      they can be inspected.
   if (LayoutHelpers.isNativeAnonymous(aNode) &&
-      !isXULDocument(aNode.ownerDocument) &&
+      !isXULElement(aNode.parentNode) &&
       (
         aNode.nodeName !== "_moz_generated_content_before" &&
         aNode.nodeName !== "_moz_generated_content_after")
       ) {
     return Ci.nsIDOMNodeFilter.FILTER_SKIP;
   }
 
   return Ci.nsIDOMNodeFilter.FILTER_ACCEPT;
diff --git a/toolkit/devtools/server/tests/mochitest/test_inspector-anonymous.html b/toolkit/devtools/server/tests/mochitest/test_inspector-anonymous.html
--- a/toolkit/devtools/server/tests/mochitest/test_inspector-anonymous.html
+++ b/toolkit/devtools/server/tests/mochitest/test_inspector-anonymous.html
@@ -12,16 +12,17 @@ https://bugzilla.mozilla.org/show_bug.cg
   <script type="application/javascript;version=1.8" src="inspector-helpers.js"></script>
   <script type="application/javascript;version=1.8">
 window.onload = function() {
   Components.utils.import("resource://gre/modules/devtools/Loader.jsm");
   const {Promise: promise} =
     Components.utils.import("resource://gre/modules/Promise.jsm", {});
   const {InspectorFront} =
     devtools.require("devtools/server/actors/inspector");
+  const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
 
   Services.prefs.setBoolPref("dom.webcomponents.enabled", true);
   SimpleTest.waitForExplicitFinish();
   SimpleTest.registerCleanupFunction(() => {
     Services.prefs.clearUserPref("dom.webcomponents.enabled");
   });
 
   let gWalker = null;
@@ -37,16 +38,30 @@ window.onload = function() {
       promiseDone(inspector.getWalker().then(walker => {
         ok(walker, "getWalker() should return an actor.");
         gClient = client;
         gWalker = walker;
       }).then(runNextTest));
     });
   });
 
+  addAsyncTest(function* testXBLAnonymousInHTMLDocument() {
+    info ("Testing XBL anonymous in an HTML document.");
+    let rawToolbarbutton = gInspectee.createElementNS(XUL_NS, "toolbarbutton");
+    gInspectee.documentElement.appendChild(rawToolbarbutton);
+
+    let toolbarbutton = yield gWalker.querySelector(gWalker.rootNode, "toolbarbutton");
+    let children = yield gWalker.children(toolbarbutton);
+
+    is (toolbarbutton.numChildren, 3, "XBL content is visible even in HTML doc");
+    is (children.nodes.length, 3, "XBL content is returned even in HTML doc");
+
+    runNextTest();
+  });
+
   addAsyncTest(function* testNativeAnonymous() {
     info ("Testing native anonymous content with walker.");
 
     let select = yield gWalker.querySelector(gWalker.rootNode, "select");
     let children = yield gWalker.children(select);
 
     is (select.numChildren, 2, "No native anon content for form control");
     is (children.nodes.length, 2, "No native anon content for form control");
