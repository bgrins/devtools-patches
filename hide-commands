# HG changeset patch
# Parent ca871fe4c350bc5420206876974aa759e71b15fc
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 974947 - Add preferences to hide command buttons on DevTools tabbar

diff --git a/browser/app/profile/firefox.js b/browser/app/profile/firefox.js
--- a/browser/app/profile/firefox.js
+++ b/browser/app/profile/firefox.js
@@ -1106,16 +1106,23 @@ pref("devtools.appmanager.manifestEditor
 pref("devtools.toolbox.footer.height", 250);
 pref("devtools.toolbox.sidebar.width", 500);
 pref("devtools.toolbox.host", "bottom");
 pref("devtools.toolbox.selectedTool", "webconsole");
 pref("devtools.toolbox.toolbarSpec", '["splitconsole", "paintflashing toggle","tilt toggle","scratchpad","resize toggle"]');
 pref("devtools.toolbox.sideEnabled", true);
 pref("devtools.toolbox.zoomValue", "1");
 
+// Command Button preferences
+pref("devtools.command-button-splitconsole.enabled", true);
+pref("devtools.command-button-paintflashing.enabled", false);
+pref("devtools.command-button-tilt.enabled", false);
+pref("devtools.command-button-scratchpad.enabled", false);
+pref("devtools.command-button-responsive.enabled", true);
+
 // Inspector preferences
 // Enable the Inspector
 pref("devtools.inspector.enabled", true);
 // What was the last active sidebar in the inspector
 pref("devtools.inspector.activeSidebar", "ruleview");
 // Enable the markup preview
 pref("devtools.inspector.markupPreview", false);
 pref("devtools.inspector.remote", false);
diff --git a/browser/devtools/framework/options-panel.css b/browser/devtools/framework/options-panel.css
--- a/browser/devtools/framework/options-panel.css
+++ b/browser/devtools/framework/options-panel.css
@@ -42,17 +42,12 @@
 
 .options-citation-label {
   font-size: 1rem !important;
   /* !important is required otherwise font-size will still be 1.4rem */
   font-style: italic;
   padding: 4px 0 0; /* To align it with the checkbox */
 }
 
-.options-citation-label + label {
-  padding: 3px 0 0 !important; /* To align it with the checkbox */
-  font-style: italic;
-}
-
 .hidden-labels-box:not(.visible) > label,
 .hidden-labels-box.visible ~ .hidden-labels-box > label:last-child {
   display: none;
 }
diff --git a/browser/devtools/framework/toolbox-options.js b/browser/devtools/framework/toolbox-options.js
--- a/browser/devtools/framework/toolbox-options.js
+++ b/browser/devtools/framework/toolbox-options.js
@@ -8,16 +8,18 @@ const {Cu, Cc, Ci} = require("chrome");
 
 let promise = require("sdk/core/promise");
 let EventEmitter = require("devtools/shared/event-emitter");
 
 Cu.import('resource://gre/modules/XPCOMUtils.jsm');
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource:///modules/devtools/gDevTools.jsm");
 
+loader.lazyImporter(this, "CommandUtils", "resource:///modules/devtools/DeveloperToolbar.jsm");
+
 exports.OptionsPanel = OptionsPanel;
 
 XPCOMUtils.defineLazyGetter(this, "l10n", function() {
   let bundle = Services.strings.createBundle("chrome://browser/locale/devtools/toolbox.properties");
   let l10n = function(aName, ...aArgs) {
     try {
       if (aArgs.length == 0) {
         return bundle.GetStringFromName(aName);
@@ -56,16 +58,17 @@ OptionsPanel.prototype = {
     if (!this.target.isRemote) {
       targetPromise = this.target.makeRemote();
     } else {
       targetPromise = promise.resolve(this.target);
     }
 
     return targetPromise.then(() => {
       this.setupToolsList();
+      this.setupCommandsList();
       this.populatePreferences();
 
       this._disableJSClicked = this._disableJSClicked.bind(this);
       this._disableCacheClicked = this._disableCacheClicked.bind(this);
 
       let disableJSNode = this.panelDoc.getElementById("devtools-disable-javascript");
       disableJSNode.addEventListener("click", this._disableJSClicked, false);
 
@@ -76,34 +79,84 @@ OptionsPanel.prototype = {
       this.emit("ready");
       return this;
     }).then(null, function onError(aReason) {
       Cu.reportError("OptionsPanel open failed. " +
                      aReason.error + ": " + aReason.message);
     });
   },
 
+  setupCommandsList: function() {
+    let enabledCommandsBox = this.panelDoc.getElementById("enabled-commands-box");
+    enabledCommandsBox.textContent = "";
+
+    let toggleableCommands = this.toolbox.commandButtons.map(button => {
+      console.log("devtools." + button.id + ".enabled");
+      return {
+        id: button.id,
+        // XXX: Use something other than tooltip text
+        label: button.getAttribute("tooltiptext"),
+        visibilityswitch: "devtools." + button.id + ".enabled"
+      };
+    });
+
+    let toggleButtonVisibility = (id, on) => {
+        console.log(on, this.toolbox);
+        let node = this.toolbox.doc.getElementById(id);
+        if (node) {
+          if (on) {
+            node.removeAttribute("hidden");
+          } else {
+            node.setAttribute("hidden", "true");
+          }
+        }
+    };
+
+    let onCheckboxClick = function(id) {
+      let toolDefinition = toggleableCommands.filter(tool=>tool.id === id)[0];
+      console.log(toolDefinition);
+      Services.prefs.setBoolPref(toolDefinition.visibilityswitch, this.checked);
+      toggleButtonVisibility(id, this.checked);
+    };
+
+    let createCommandCheckbox = tool => {
+      let checkbox = this.panelDoc.createElement("checkbox");
+      checkbox.setAttribute("label", tool.label);
+      checkbox.setAttribute("checked", this.getBoolPref(tool.visibilityswitch));
+      checkbox.addEventListener("command", onCheckboxClick.bind(checkbox, tool.id));
+      return checkbox;
+    };
+
+    let spec = CommandUtils.getCommandbarSpec("devtools.toolbox.toolbarSpec");
+
+    console.log(spec, this);
+
+    for (let tool of toggleableCommands) {
+      enabledCommandsBox.appendChild(createCommandCheckbox(tool));
+    }
+  },
+
+  getBoolPref: function(key) {
+    try {
+      return Services.prefs.getBoolPref(key);
+    }
+    catch (ex) {
+      return true;
+    }
+  },
+
   setupToolsList: function() {
     let defaultToolsBox = this.panelDoc.getElementById("default-tools-box");
     let additionalToolsBox = this.panelDoc.getElementById("additional-tools-box");
     let toolsNotSupportedLabel = this.panelDoc.getElementById("tools-not-supported-label");
     let atleastOneToolNotSupported = false;
 
     defaultToolsBox.textContent = "";
     additionalToolsBox.textContent = "";
 
-    let pref = function(key) {
-      try {
-        return Services.prefs.getBoolPref(key);
-      }
-      catch (ex) {
-        return true;
-      }
-    };
-
     let onCheckboxClick = function(id) {
       let toolDefinition = gDevTools._tools.get(id);
       // Set the kill switch pref boolean to true
       Services.prefs.setBoolPref(toolDefinition.visibilityswitch, this.checked);
       if (this.checked) {
         gDevTools.emit("tool-registered", id);
       }
       else {
@@ -119,17 +172,17 @@ OptionsPanel.prototype = {
         checkbox.setAttribute("label", tool.label);
       }
       else {
         atleastOneToolNotSupported = true;
         checkbox.setAttribute("label",
                               l10n("options.toolNotSupportedMarker", tool.label));
         checkbox.setAttribute("unsupported", "");
       }
-      checkbox.setAttribute("checked", pref(tool.visibilityswitch));
+      checkbox.setAttribute("checked", this.getBoolPref(tool.visibilityswitch));
       checkbox.addEventListener("command", onCheckboxClick.bind(checkbox, tool.id));
       return checkbox;
     };
 
     // Populating the default tools lists
     let toggleableTools = gDevTools.getDefaultTools().filter(tool => {
       return tool.visibilityswitch
     });
diff --git a/browser/devtools/framework/toolbox-options.xul b/browser/devtools/framework/toolbox-options.xul
--- a/browser/devtools/framework/toolbox-options.xul
+++ b/browser/devtools/framework/toolbox-options.xul
@@ -18,16 +18,19 @@
       <vbox id="tools-box" class="options-vertical-pane" flex="1">
         <label value="&options.selectDefaultTools.label;"/>
         <vbox id="default-tools-box" class="options-groupbox" tabindex="0"/>
         <label value="&options.selectAdditionalTools.label;"/>
         <vbox id="additional-tools-box" class="options-groupbox"/>
         <label id="tools-not-supported-label"
                class="options-citation-label theme-comment"
                value="&options.toolNotSupported.label;"/>
+        <label value="&options.selectEnabledCommands.label;"/>
+        <vbox id="enabled-commands-box" class="options-groupbox" tabindex="0"/>
+
       </vbox>
       <vbox class="options-vertical-pane" flex="1">
         <label value="&options.selectDevToolsTheme.label;"/>
         <radiogroup id="devtools-theme-box"
                     class="options-groupbox"
                     data-pref="devtools.theme"
                     orient="horizontal">
           <radio value="light" label="&options.lightTheme.label;"/>
diff --git a/browser/devtools/framework/toolbox.js b/browser/devtools/framework/toolbox.js
--- a/browser/devtools/framework/toolbox.js
+++ b/browser/devtools/framework/toolbox.js
@@ -537,19 +537,19 @@ Toolbox.prototype = {
     if (!this.target.isLocalTab) {
       return;
     }
 
     let spec = CommandUtils.getCommandbarSpec("devtools.toolbox.toolbarSpec");
     let env = CommandUtils.createEnvironment(this.target.tab.ownerDocument,
                                              this.target.window.document);
     let req = new Requisition(env);
-    let buttons = CommandUtils.createButtons(spec, this._target, this.doc, req);
+    this.commandButtons = CommandUtils.createButtons(spec, this._target, this.doc, req);
     let container = this.doc.getElementById("toolbox-buttons");
-    buttons.forEach(container.appendChild.bind(container));
+    this.commandButtons.forEach(container.appendChild.bind(container));
   },
 
   /**
    * Adding the element picker button is done here unlike the other buttons
    * since we want it to work for remote targets too
    */
   _buildPickerButton: function() {
     this._pickerButton = this.doc.createElement("toolbarbutton");
@@ -560,16 +560,38 @@ Toolbox.prototype = {
     let container = this.doc.querySelector("#toolbox-buttons");
     container.appendChild(this._pickerButton);
 
     this._togglePicker = this.highlighterUtils.togglePicker.bind(this.highlighterUtils);
     this._pickerButton.addEventListener("command", this._togglePicker, false);
   },
 
   /**
+   * Return all toolbox buttons (command buttons, plus any others that were
+   * added in a different way).
+   */
+  get toggleableToolboxButtons() {
+    return [
+      "command-button-pick",
+      "command-button-splitconsole",
+      "command-button-paintflashing",
+      "command-button-tilt",
+      "command-button-scratchpad",
+      "command-button-responsive"
+    ].map(id=> {
+      let button = this.doc.getElementById(id);
+      return {
+        id: id,
+        label: button.getAttribute("tooltiptext"),
+        visibilityswitch: "devtools." + id + ".enabled"
+      }
+    });
+  },
+
+  /**
    * Build a tab for one tool definition and add to the toolbox
    *
    * @param {string} toolDefinition
    *        Tool definition of the tool to build a tab for.
    */
   _buildTabForTool: function(toolDefinition) {
     if (!toolDefinition.isTargetSupported(this._target)) {
       return;
diff --git a/browser/locales/en-US/chrome/browser/devtools/toolbox.dtd b/browser/locales/en-US/chrome/browser/devtools/toolbox.dtd
--- a/browser/locales/en-US/chrome/browser/devtools/toolbox.dtd
+++ b/browser/locales/en-US/chrome/browser/devtools/toolbox.dtd
@@ -87,16 +87,21 @@
 <!ENTITY options.selectDefaultTools.label     "Default Firefox Developer Tools">
 
 <!-- LOCALIZATION NOTE (options.selectAdditionalTools.label): This is the label for
   -  the heading of group of checkboxes corresponding to the developer tools
   -  added by add-ons. This heading is hidden when there is no developer tool
   -  installed by add-ons. -->
 <!ENTITY options.selectAdditionalTools.label  "Developer Tools installed by add-ons">
 
+<!-- LOCALIZATION NOTE (options.selectCommands.label): This is the label for
+  -  the heading of group of checkboxes corresponding to the default developer
+  -  tools. -->
+<!ENTITY options.selectEnabledCommands.label     "Available Toolbar Commands">
+
 <!-- LOCALIZATION NOTE (options.toolNotSupported.label): This is the label for
   -  the explanation of the * marker on a tool which is currently not supported
   -  for the target of the toolbox. -->
 <!ENTITY options.toolNotSupported.label  "* Not supported for current toolbox target">
 
 <!-- LOCALIZATION NOTE (options.selectDevToolsTheme.label): This is the label for
   -  the heading of the radiobox corresponding to the theme of the developer
   -  tools. -->
