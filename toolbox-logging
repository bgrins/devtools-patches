# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  6e31ad566396a9332747e654d92dcd9e62c98b9a

diff --git a/devtools/client/framework/toolbox-host-manager.js b/devtools/client/framework/toolbox-host-manager.js
--- a/devtools/client/framework/toolbox-host-manager.js
+++ b/devtools/client/framework/toolbox-host-manager.js
@@ -71,16 +71,17 @@ ToolboxHostManager.prototype = {
     this.host.frame.ownerDocument.defaultView.addEventListener("message", this);
     // We have to listen on capture as no event fires on bubble
     this.host.frame.addEventListener("unload", this, true);
 
     const msSinceProcessStart = parseInt(this.telemetry.msSinceProcessStart(), 10);
     const toolbox = new Toolbox(this.target, toolId, this.host.type,
                                 this.host.frame.contentWindow, this.frameId,
                                 msSinceProcessStart);
+    toolbox.frameElement = this.host.frame; // XXX: find a better way to keep this in sync
 
     // Prevent reloading the toolbox when loading the tools in a tab
     // (e.g. from about:debugging)
     const location = this.host.frame.contentWindow.location;
     if (!location.href.startsWith("about:devtools-toolbox")) {
       this.host.frame.setAttribute("src", "about:devtools-toolbox");
     }
 
@@ -229,16 +230,17 @@ ToolboxHostManager.prototype = {
 
     this.setMinWidthWithZoom();
 
     if (hostType !== Toolbox.HostType.CUSTOM &&
         hostType !== Toolbox.HostType.PAGE) {
       Services.prefs.setCharPref(LAST_HOST, hostType);
     }
 
+    newIframe.contentWindow.gToolbox.frameElement = newIframe; // XXX: find a better way to keep this in sync
     // Tell the toolbox the host changed
     this.postMessage({
       name: "switched-host",
       hostType,
     });
   },
 
   /**
diff --git a/devtools/client/framework/toolbox-hosts.js b/devtools/client/framework/toolbox-hosts.js
--- a/devtools/client/framework/toolbox-hosts.js
+++ b/devtools/client/framework/toolbox-hosts.js
@@ -54,17 +54,17 @@ BottomHost.prototype = {
       gBrowser.getBrowserContainer(this.hostTab.linkedBrowser);
 
     this._splitter = ownerDocument.createXULElement("splitter");
     this._splitter.setAttribute("class", "devtools-horizontal-splitter");
     // Avoid resizing notification containers
     this._splitter.setAttribute("resizebefore", "flex");
 
     this.frame = ownerDocument.createXULElement("iframe");
-    this.frame.setAttribute("type", "content");
+    // this.frame.setAttribute("type", "content");
     this.frame.flex = 1; // Required to be able to shrink when the window shrinks
     this.frame.className = "devtools-toolbox-bottom-iframe";
     this.frame.height = Math.min(
       Services.prefs.getIntPref(this.heightPref),
       this._browserContainer.clientHeight - MIN_PAGE_SIZE
     );
 
     this._browserContainer.appendChild(this._splitter);
@@ -141,17 +141,17 @@ class SidebarHost {
     const ownerDocument = gBrowser.ownerDocument;
     this._browserContainer = gBrowser.getBrowserContainer(this.hostTab.linkedBrowser);
     this._browserPanel = gBrowser.getPanel(this.hostTab.linkedBrowser);
 
     this._splitter = ownerDocument.createXULElement("splitter");
     this._splitter.setAttribute("class", "devtools-side-splitter");
 
     this.frame = ownerDocument.createXULElement("iframe");
-    this.frame.setAttribute("type", "content");
+    // this.frame.setAttribute("type", "content");
     this.frame.flex = 1; // Required to be able to shrink when the window shrinks
     this.frame.className = "devtools-toolbox-side-iframe";
 
     this.frame.width = Math.min(
       Services.prefs.getIntPref(this.widthPref),
       this._browserPanel.clientWidth - MIN_PAGE_SIZE
     );
 
diff --git a/devtools/client/framework/toolbox.js b/devtools/client/framework/toolbox.js
--- a/devtools/client/framework/toolbox.js
+++ b/devtools/client/framework/toolbox.js
@@ -99,16 +99,17 @@ loader.lazyGetter(this, "reloadAndStopRe
  * @param {Number} msSinceProcessStart
  *        the number of milliseconds since process start using monotonic
  *        timestamps (unaffected by system clock changes).
  */
 function Toolbox(target, selectedTool, hostType, contentWindow, frameId,
                  msSinceProcessStart) {
   this._target = target;
   this._win = contentWindow;
+  this._win.gToolbox = this; // XXX
   this.frameId = frameId;
   this.telemetry = new Telemetry();
 
   // The session ID is used to determine which telemetry events belong to which
   // toolbox session. Because we use Amplitude to analyse the telemetry data we
   // must use the time since the system wide epoch as the session ID.
   this.sessionId = msSinceProcessStart;
 
@@ -1149,22 +1150,25 @@ Toolbox.prototype = {
 
     this.component.setCurrentHostType(this.hostType);
     this.component.setHostTypes(hostTypes);
   },
 
   postMessage: function(msg) {
     // We sometime try to send messages in middle of destroy(), where the
     // toolbox iframe may already be detached and no longer have a parent.
-    if (this.topWindow) {
-      // Toolbox document is still chrome and disallow identifying message
-      // origin via event.source as it is null. So use a custom id.
-      msg.frameId = this.frameId;
-      this.topWindow.postMessage(msg, "*");
+    if (this._destroyer || !this.topWindow) {
+      return;
     }
+
+    console.log("XXX Brian", this.frameElement, this.topWindow.location.toString(), this.frameElement)
+    // Toolbox document is still chrome and disallow identifying message
+    // origin via event.source as it is null. So use a custom id.
+    msg.frameId = this.frameId;
+    this.topWindow.postMessage(msg, "*");
   },
 
   /**
    * Initiate ToolboxTabs React component and all it's properties. Do the initial render.
    */
   _buildTabs: async function() {
     // Get the initial list of tab definitions. This list can be amended at a later time
     // by tools registering themselves.
@@ -2618,18 +2622,19 @@ Toolbox.prototype = {
     this.postMessage({
       name: "switch-host",
       hostType,
     });
 
     return this.once("host-changed");
   },
 
-  _onSwitchedHost: function({ hostType }) {
+  _onSwitchedHost: function({ hostType, frameElement }) {
     this._hostType = hostType;
+    this.frameElement = frameElement;
 
     this._buildDockOptions();
     this._addKeysToWindow();
 
     // We blurred the tools at start of switchHost, but also when clicking on
     // host switching button. We now have to restore the focus.
     this.focusTool(this.currentToolId, true);
 
diff --git a/devtools/client/inspector/computed/computed.js b/devtools/client/inspector/computed/computed.js
--- a/devtools/client/inspector/computed/computed.js
+++ b/devtools/client/inspector/computed/computed.js
@@ -472,53 +472,60 @@ CssComputedView.prototype = {
 
   /**
    * Refresh the panel content.
    */
   refreshPanel: function() {
     if (!this._viewedElement) {
       return promise.resolve();
     }
+    dump("PRINTING\n")
+    console.log("0");
 
     // Capture the current viewed element to return from the promise handler
     // early if it changed
     const viewedElement = this._viewedElement;
 
+    console.log("0.1");
     return promise.all([
       this._createPropertyViews(),
       this.pageStyle.getComputed(this._viewedElement, {
         filter: this._sourceFilter,
         onlyMatched: !this.includeBrowserStyles,
         markMatched: true,
       }),
     ]).then(([, computed]) => {
+      console.log("1");
       if (viewedElement !== this._viewedElement) {
         return promise.resolve();
       }
+      console.log("2");
 
       this._matchedProperties = new Set();
       for (const name in computed) {
         if (computed[name].matched) {
           this._matchedProperties.add(name);
         }
       }
+      console.log("3");
       this._computed = computed;
 
       if (this._refreshProcess) {
         this._refreshProcess.cancel();
       }
 
       this.noResults.hidden = true;
 
       // Reset visible property count
       this.numVisibleProperties = 0;
 
       // Reset zebra striping.
       this._darkStripe = true;
 
+      console.log("4");
       return new Promise((resolve, reject) => {
         this._refreshProcess = new UpdateProcess(
           this.styleWindow, this.propertyViews, {
             onItem: (propView) => {
               propView.refresh();
             },
             onCancel: () => {
               reject("_refreshProcess of computed view cancelled");
@@ -536,17 +543,19 @@ CssComputedView.prototype = {
                                 .remove("devtools-style-searchbox-no-match");
               }
 
               this.inspector.emit("computed-view-refreshed");
               resolve(undefined);
             },
           }
         );
+        console.log("5");
         this._refreshProcess.schedule();
+        console.log("6");
       });
     }).catch(console.error);
   },
 
   /**
    * Handle the shortcut events in the computed view.
    */
   _onShortcut: function(name, event) {
diff --git a/devtools/client/shared/browser-loader.js b/devtools/client/shared/browser-loader.js
--- a/devtools/client/shared/browser-loader.js
+++ b/devtools/client/shared/browser-loader.js
@@ -181,16 +181,19 @@ function BrowserLoaderBuilder({ baseURI,
         lazyGetter: devtools.lazyGetter,
         lazyImporter: devtools.lazyImporter,
         lazyServiceGetter: devtools.lazyServiceGetter,
         lazyRequireGetter: this.lazyRequireGetter.bind(this),
       },
     },
   };
 
+  console.trace();
+  console.log("Loaded browser loader", window.location.toString());
+
   const mainModule = loaders.Module(baseURI, joinURI(baseURI, "main.js"));
   this.loader = loaders.Loader(opts);
   // When running tests, expose the BrowserLoader instance for metrics tests.
   if (flags.testing) {
     window.getBrowserLoaderForWindow = () => this;
   }
   this.require = loaders.Require(this.loader, mainModule);
 }
