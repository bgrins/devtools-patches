# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  73119a9a7da215431a8b4c8b31a28cb8dd78d3bb
Bug 1224073 - Use 'this' instead of 'global' for proper debugger object referencing in webconsole for workers;r=ejpbruel

diff --git a/devtools/client/debugger/test/mochitest/browser_dbg_worker-console.js b/devtools/client/debugger/test/mochitest/browser_dbg_worker-console.js
--- a/devtools/client/debugger/test/mochitest/browser_dbg_worker-console.js
+++ b/devtools/client/debugger/test/mochitest/browser_dbg_worker-console.js
@@ -37,16 +37,21 @@ add_task(function* testNormalExecution()
   let {client,tab,tabClient,workerClient,toolbox,gDebugger} =
     yield initWorkerDebugger(TAB_URL, WORKER_URL);
 
   let jsterm = yield getSplitConsole(toolbox);
   let executed = yield jsterm.execute("this.location.toString()");
   ok(executed.textContent.includes(WORKER_URL),
       "Evaluating the global's location works");
 
+  info ("Throwing an error")
+  executed = yield jsterm.execute("throw new Error('thrown foobar')");
+  ok(executed.textContent.includes("Error: thrown foobar"),
+      "User thrown error executed successfully");
+
   yield gDevTools.closeToolbox(TargetFactory.forWorker(workerClient));
   terminateWorkerInTab(tab, WORKER_URL);
   yield waitForWorkerClose(workerClient);
   yield close(client);
   yield removeTab(tab);
 });
 
 add_task(function* testWhilePaused() {
@@ -83,19 +88,18 @@ add_task(function* testWhilePaused() {
 
   info ("Trying to get the result of command2");
   executed = yield command2;
   ok(executed.textContent.includes("10003"),
       "command2 executed successfully");
 
   info ("Trying to get the result of command3")
   executed = yield command3;
-  // XXXworkers This is failing until Bug 1215120 is resolved.
-  todo(executed.textContent.includes("ReferenceError: foobar is not defined"),
-      "command3 executed successfully");
+  ok(executed.textContent.includes("ReferenceError: foobar is not defined"),
+      "command3 (reference error) executed successfully");
 
   let onceResumed = gTarget.once("thread-resumed");
   EventUtils.sendMouseEvent({ type: "mousedown" }, gResumeButton, gDebugger);
   yield onceResumed;
 
   yield gDevTools.closeToolbox(TargetFactory.forWorker(workerClient));
   terminateWorkerInTab(tab, WORKER_URL);
   yield waitForWorkerClose(workerClient);
diff --git a/devtools/server/worker.js b/devtools/server/worker.js
--- a/devtools/server/worker.js
+++ b/devtools/server/worker.js
@@ -68,20 +68,20 @@ this.addEventListener("message",  functi
 
       get sources() {
         if (sources === null) {
           sources = new TabSources(threadActor);
         }
         return sources;
       },
 
-      window: global
+      window: this
     };
 
-    let threadActor = new ThreadActor(parent, global);
+    let threadActor = new ThreadActor(parent, this);
     pool.addActor(threadActor);
 
     let consoleActor = new WebConsoleActor(connection, parent);
     pool.addActor(consoleActor);
 
     // Step 5: Send a response packet to the parent to notify
     // it that a connection has been established.
     postMessage(JSON.stringify({
