# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  c77962add953a48bdbcbbcd3d157d63d1267cd8e
Bug 1543710

diff --git a/browser/base/content/webext-panels.js b/browser/base/content/webext-panels.js
--- a/browser/base/content/webext-panels.js
+++ b/browser/base/content/webext-panels.js
@@ -43,34 +43,34 @@ function getBrowser(panel) {
   browser.setAttribute("autocompletepopup", "PopupAutoComplete");
   browser.setAttribute("selectmenulist", "ContentSelectDropdown");
 
   // Ensure that the browser is going to run in the same process of the other
   // extension pages from the same addon.
   browser.sameProcessAsFrameLoader = panel.extension.groupFrameLoader;
 
   let readyPromise;
-  if (panel.extension.remote) {
+  if (true || panel.extension.remote) {
     browser.setAttribute("remote", "true");
     browser.setAttribute("remoteType",
                          E10SUtils.getRemoteTypeForURI(panel.uri, true,
                                                        E10SUtils.EXTENSION_REMOTE_TYPE));
     readyPromise = promiseEvent(browser, "XULFrameLoaderCreated");
-
-    window.messageManager.addMessageListener("contextmenu", openContextMenu);
-    window.addEventListener("unload", () => {
-      window.messageManager.removeMessageListener("contextmenu", openContextMenu);
-    }, {once: true});
+    // window.messageManager.addMessageListener("contextmenu", openContextMenu);
+    // window.addEventListener("unload", () => {
+    //   window.messageManager.removeMessageListener("contextmenu", openContextMenu);
+    // }, {once: true});
   } else {
     readyPromise = Promise.resolve();
   }
 
   stack.appendChild(browser);
 
   return readyPromise.then(() => {
+    console.log("about to request");
     browser.messageManager.loadFrameScript("chrome://browser/content/content.js", false, true);
     ExtensionParent.apiManager.emit("extension-browser-inserted", browser, panel.browserInsertedData);
 
     browser.messageManager.loadFrameScript(
       "chrome://extensions/content/ext-browser-content.js", false, true);
 
     let options = panel.browserStyle !== false ? {stylesheets: ExtensionParent.extensionStylesheets} : {};
     browser.messageManager.sendAsyncMessage("Extension:InitBrowser", options);
diff --git a/devtools/client/framework/toolbox-hosts.js b/devtools/client/framework/toolbox-hosts.js
--- a/devtools/client/framework/toolbox-hosts.js
+++ b/devtools/client/framework/toolbox-hosts.js
@@ -410,16 +410,17 @@ function focusTab(tab) {
 /**
  * Create an iframe that can be used to load DevTools via about:devtools-toolbox.
  */
 function createDevToolsFrame(doc, className) {
   const frame = doc.createXULElement("iframe");
   frame.flex = 1; // Required to be able to shrink when the window shrinks
   frame.className = className;
   frame.tooltip = "aHTMLTooltip";
+  frame.setAttribute("type", "content");
   return frame;
 }
 
 exports.Hosts = {
   "bottom": BottomHost,
   "left": LeftHost,
   "right": RightHost,
   "window": WindowHost,
diff --git a/devtools/client/framework/toolbox.js b/devtools/client/framework/toolbox.js
--- a/devtools/client/framework/toolbox.js
+++ b/devtools/client/framework/toolbox.js
@@ -1857,16 +1857,20 @@ Toolbox.prototype = {
         return;
       }
 
       iframe = this.doc.createXULElement("iframe");
       iframe.className = "toolbox-panel-iframe";
       iframe.id = "toolbox-panel-iframe-" + id;
       iframe.setAttribute("flex", 1);
       iframe.setAttribute("forceOwnRefreshDriver", "");
+      // if (definition.extensionId) {
+        console.log("XXX setting type content ");
+        // iframe.setAttribute("type", "content");
+      // }
       iframe.tooltip = "aHTMLTooltip";
       iframe.style.visibility = "hidden";
 
       gDevTools.emit(id + "-init", this, iframe);
       this.emit(id + "-init", iframe);
 
       // If no parent yet, append the frame into default location.
       if (!iframe.parentNode) {
diff --git a/dom/base/nsFrameLoader.cpp b/dom/base/nsFrameLoader.cpp
--- a/dom/base/nsFrameLoader.cpp
+++ b/dom/base/nsFrameLoader.cpp
@@ -2507,16 +2507,17 @@ bool nsFrameLoader::TryRemoteBrowser() {
 
   // <iframe mozbrowser> gets to skip these checks.
   // iframes for JS plugins also get to skip these checks. We control the URL
   // that gets loaded, but the load is triggered from the document containing
   // the plugin.
   // out of process iframes also get to skip this check.
   if (!OwnerIsMozBrowserFrame() && !XRE_IsContentProcess()) {
     if (parentDocShell->ItemType() != nsIDocShellTreeItem::typeChrome) {
+      printf("Hit the case0\n");
       // Allow about:addon an exception to this rule so it can load remote
       // extension options pages.
       //
       // Note that the new frame's message manager will not be a child of the
       // chrome window message manager, and, the values of window.top and
       // window.parent will be different than they would be for a non-remote
       // frame.
       nsCOMPtr<nsIWebNavigation> parentWebNav;
@@ -2527,16 +2528,17 @@ bool nsFrameLoader::TryRemoteBrowser() {
             NS_SUCCEEDED(
                 NS_NewURI(getter_AddRefs(aboutAddons), "about:addons")) &&
             NS_SUCCEEDED(
                 parentWebNav->GetCurrentURI(getter_AddRefs(parentURI))) &&
             NS_SUCCEEDED(parentURI->EqualsExceptRef(aboutAddons, &equals)) &&
             equals)) {
         return false;
       }
+      printf("Hit the case1\n");
     }
 
     if (!mOwnerContent->IsXULElement()) {
       return false;
     }
 
     if (!mOwnerContent->AttrValueIs(kNameSpaceID_None, nsGkAtoms::type,
                                     nsGkAtoms::content, eIgnoreCase)) {
diff --git a/js/xpconnect/tests/chrome/chrome.ini b/js/xpconnect/tests/chrome/chrome.ini
--- a/js/xpconnect/tests/chrome/chrome.ini
+++ b/js/xpconnect/tests/chrome/chrome.ini
@@ -86,16 +86,17 @@ skip-if = os == 'win' || os == 'mac' || 
 [test_bug1074863.html]
 [test_bug1092477.xul]
 [test_bug1124898.html]
 [test_bug1126911.html]
 [test_bug1281071.xul]
 [test_bug1390159.xul]
 [test_bug1430164.html]
 [test_bug1516237.html]
+[test_chrome.html]
 [test_chrometoSource.xul]
 [test_cloneInto.xul]
 [test_cows.xul]
 [test_discardSystemSource.xul]
 [test_documentdomain.xul]
 [test_doublewrappedcompartments.xul]
 [test_evalInSandbox.xul]
 [test_evalInWindow.xul]
