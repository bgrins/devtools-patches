# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  8c5f9b08938ed193c756b6bc9884a353b796a55f

diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -5476,16 +5476,17 @@ var XULBrowserWindow = {
         gCustomizeMode.exit();
       }
 
       CFRPageActions.updatePageActions(gBrowser.selectedBrowser);
     }
     Services.obs.notifyObservers(null, "touchbar-location-change", location);
     UpdateBackForwardCommands(gBrowser.webNavigation);
     ReaderParent.updateReaderButton(gBrowser.selectedBrowser);
+    document.querySelector("#a11y-mode-button").setAttribute("hidden", false);
 
     if (!gMultiProcessBrowser) {
       // Bug 1108553 - Cannot rotate images with e10s
       gGestureSupport.restoreRotationState();
     }
 
     // See bug 358202, when tabs are switched during a drag operation,
     // timers don't fire on windows (bug 203573)
diff --git a/browser/base/content/browser.xhtml b/browser/base/content/browser.xhtml
--- a/browser/base/content/browser.xhtml
+++ b/browser/base/content/browser.xhtml
@@ -999,16 +999,21 @@
                   <image id="cfr-button"
                          class="urlbar-icon urlbar-page-action"
                          role="presentation"/>
                 </hbox>
                 <hbox id="userContext-icons" hidden="true">
                   <label id="userContext-label"/>
                   <image id="userContext-indicator"/>
                 </hbox>
+                <image id="a11y-mode-button"
+                       class="urlbar-icon urlbar-page-action"
+                       tooltip="dynamic-shortcut-tooltip"
+                       role="button"
+                       onclick="ReaderParent.buttonClick(event);"/>
                 <image id="reader-mode-button"
                        class="urlbar-icon urlbar-page-action"
                        tooltip="dynamic-shortcut-tooltip"
                        role="button"
                        hidden="true"
                        onclick="ReaderParent.buttonClick(event);"/>
                 <toolbarbutton id="urlbar-zoom-button"
                        onclick="FullZoom.reset();"
diff --git a/browser/components/BrowserGlue.jsm b/browser/components/BrowserGlue.jsm
--- a/browser/components/BrowserGlue.jsm
+++ b/browser/components/BrowserGlue.jsm
@@ -65,16 +65,30 @@ let ACTORS = {
         AboutLoginsSyncEnable: { wantUntrusted: true },
         AboutLoginsSyncOptions: { wantUntrusted: true },
         AboutLoginsUpdateLogin: { wantUntrusted: true },
       },
     },
     matches: ["about:logins", "about:logins?*"],
   },
 
+  A11YMode: {
+    parent: {
+      moduleURI: "resource:///actors/A11YModeParent.jsm",
+    },
+    child: {
+      moduleURI: "resource:///actors/A11YModeChild.jsm",
+      events: {
+        DOMWindowCreated: {},
+      },
+    },
+
+    allFrames: true,
+  },
+
   BlockedSite: {
     parent: {
       moduleURI: "resource:///actors/BlockedSiteParent.jsm",
     },
     child: {
       moduleURI: "resource:///actors/BlockedSiteChild.jsm",
       events: {
         AboutBlockedLoaded: { wantUntrusted: true },
diff --git a/browser/components/a11ymode/A11YModeChild.jsm b/browser/components/a11ymode/A11YModeChild.jsm
new file mode 100644
--- /dev/null
+++ b/browser/components/a11ymode/A11YModeChild.jsm
@@ -0,0 +1,20 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const EXPORTED_SYMBOLS = ["A11YModeChild"];
+
+// const { Services } = ChromeUtils.import("resource://gre/modules/Services.jsm");
+
+// See stuff like https://searchfox.org/mozilla-central/source/devtools/server/actors/accessibility/walker.js#499
+
+class A11YModeChild extends JSWindowActorChild {
+  receiveMessage(message) {
+    console.log("Message", message.name);
+  }
+  handleEvent(event) {
+    console.log("event", event);
+  }
+}
diff --git a/browser/components/a11ymode/A11YModeParent.jsm b/browser/components/a11ymode/A11YModeParent.jsm
new file mode 100644
--- /dev/null
+++ b/browser/components/a11ymode/A11YModeParent.jsm
@@ -0,0 +1,25 @@
+/* vim: set ts=2 sw=2 sts=2 et tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+var EXPORTED_SYMBOLS = ["A11YModeParent"];
+
+const { BrowserWindowTracker } = ChromeUtils.import(
+  "resource:///modules/BrowserWindowTracker.jsm"
+);
+const { E10SUtils } = ChromeUtils.import(
+  "resource://gre/modules/E10SUtils.jsm"
+);
+const { Services } = ChromeUtils.import("resource://gre/modules/Services.jsm");
+const { AppConstants } = ChromeUtils.import(
+  "resource://gre/modules/AppConstants.jsm"
+);
+
+console.trace();
+class A11YModeParent extends JSWindowActorParent {
+  receiveMessage(message) {
+    console.log(message.name);
+  }
+}
diff --git a/browser/components/a11ymode/content/a11ymode.css b/browser/components/a11ymode/content/a11ymode.css
new file mode 100644
--- /dev/null
+++ b/browser/components/a11ymode/content/a11ymode.css
@@ -0,0 +1,14 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+html,
+body,
+#browser-container,
+#browser {
+  width: 100%;
+  height: 100%;
+  margin: 0;
+  padding: 0;
+  overflow: hidden;
+}
diff --git a/browser/components/a11ymode/content/a11ymode.html b/browser/components/a11ymode/content/a11ymode.html
new file mode 100644
--- /dev/null
+++ b/browser/components/a11ymode/content/a11ymode.html
@@ -0,0 +1,19 @@
+<!-- This Source Code Form is subject to the terms of the Mozilla Public
+   - License, v. 2.0. If a copy of the MPL was not distributed with this
+   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
+
+<!DOCTYPE html>
+
+<html width="800" height="600">
+<head>
+<link rel="stylesheet" href="chrome://global/skin/">
+<link rel="stylesheet" href="a11ymode.css">
+</head>
+<body>
+  Hello, world
+  <!--
+    <div id="browser-container"></div>
+    <script type="text/javascript" src="a11ymode.js"></script>
+  -->
+</body>
+</html>
diff --git a/browser/components/a11ymode/content/a11ymode.js b/browser/components/a11ymode/content/a11ymode.js
new file mode 100644
--- /dev/null
+++ b/browser/components/a11ymode/content/a11ymode.js
@@ -0,0 +1,251 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+const { XPCOMUtils } = ChromeUtils.import(
+  "resource://gre/modules/XPCOMUtils.jsm"
+);
+
+XPCOMUtils.defineLazyModuleGetters(this, {
+  BrowserUtils: "resource://gre/modules/BrowserUtils.jsm",
+  Services: "resource://gre/modules/Services.jsm",
+  SiteSpecificBrowser: "resource:///modules/SiteSpecificBrowserService.jsm",
+  BrowserWindowTracker: "resource:///modules/BrowserWindowTracker.jsm",
+  WindowsSupport: "resource:///modules/ssb/WindowsSupport.jsm",
+});
+
+let gSSBBrowser = null;
+var gSSB = null;
+
+function init() {
+  gSSB = SiteSpecificBrowser.get(window.arguments[0]);
+
+  let uri = gSSB.startURI;
+  if (window.arguments.length > 1) {
+    uri = Services.io.newURI(window.arguments[1]);
+  }
+
+  window.browserDOMWindow = new BrowserDOMWindow();
+
+  gSSBBrowser = document.createXULElement("browser");
+  gSSBBrowser.setAttribute("id", "browser");
+  gSSBBrowser.setAttribute("type", "content");
+  gSSBBrowser.setAttribute("remote", "true");
+  gSSBBrowser.setAttribute("nodefaultsrc", "true");
+  document.getElementById("browser-container").appendChild(gSSBBrowser);
+
+  // Give our actor the SSB's ID.
+  let actor = gSSBBrowser.browsingContext.currentWindowGlobal.getActor(
+    "SiteSpecificBrowser"
+  );
+  actor.sendAsyncMessage("SetSSB", gSSB.id);
+
+  gSSBBrowser.addProgressListener(
+    new ProgressListener(),
+    Ci.nsIWebProgress.NOTIFY_STATE_ALL
+  );
+  gSSBBrowser.src = uri.spec;
+}
+
+class ProgressListener {
+  constructor() {
+    this.isInitial = true;
+  }
+
+  /**
+   * Called when the load state changes
+   *
+   * @param {nsIWebProgress} webProgress
+   * @param {nsIRequest} request
+   * @param {Number} state
+   * @param {Number} status
+   */
+  async onStateChange(webProgress, request, state, status) {
+    if (!webProgress.isTopLevel) {
+      return;
+    }
+
+    let final =
+      Ci.nsIWebProgressListener.STATE_IS_WINDOW +
+      Ci.nsIWebProgressListener.STATE_STOP;
+    if ((state & final) != final) {
+      return;
+    }
+
+    // Load complete. Does the SSB need an update?
+    let { isInitial } = this;
+    this.isInitial = false;
+    if (isInitial && gSSB.needsUpdate) {
+      await gSSB.updateFromBrowser(gSSBBrowser);
+      if (Services.appinfo.OS == "WINNT") {
+        WindowsSupport.applyOSIntegration(gSSB, window);
+      }
+    }
+
+    // So the testing harness knows when the ssb is properly initialized.
+    let event = new CustomEvent("SSBLoad");
+    gSSBBrowser.dispatchEvent(event);
+  }
+}
+
+ProgressListener.prototype.QueryInterface = ChromeUtils.generateQI([
+  Ci.nsIWebProgressListener,
+  Ci.nsISupportsWeakReference,
+]);
+
+class BrowserDOMWindow {
+  /**
+   * Called when a page in the main process needs a new window to display a new
+   * page in.
+   *
+   * @param {nsIURI?} uri
+   * @param {Window} opener
+   * @param {Number} where
+   * @param {Number} flags
+   * @param {nsIPrincipal} triggeringPrincipal
+   * @param {nsIContentSecurityPolicy?} csp
+   * @return {BrowsingContext} the BrowsingContext the URI should be loaded in.
+   */
+  createContentWindow(uri, opener, where, flags, triggeringPrincipal, csp) {
+    console.error(
+      "createContentWindow should never be called from a remote browser"
+    );
+    throw Cr.NS_ERROR_FAILURE;
+  }
+
+  /**
+   * Called from a page in the main process to open a new URI.
+   *
+   * @param {nsIURI} uri
+   * @param {Window} opener
+   * @param {Number} where
+   * @param {Number} flags
+   * @param {nsIPrincipal} triggeringPrincipal
+   * @param {nsIContentSecurityPolicy?} csp
+   * @return {BrowsingContext} the BrowsingContext the URI should be loaded in.
+   */
+  openURI(uri, opener, where, flags, triggeringPrincipal, csp) {
+    console.error("openURI should never be called from a remote browser");
+    throw Cr.NS_ERROR_FAILURE;
+  }
+
+  /**
+   * Finds a new frame to load some content in.
+   *
+   * @param {nsIURI?} uri
+   * @param {nsIOpenURIInFrameParams} params
+   * @param {Number} where
+   * @param {Number} flags
+   * @param {Number} nextRemoteTabId
+   * @param {string} name
+   * @param {boolean} shouldOpen should the load start or not.
+   * @return {Element} the frame element the URI should be loaded in.
+   */
+  getContentWindowOrOpenURIInFrame(
+    uri,
+    params,
+    where,
+    flags,
+    nextRemoteTabId,
+    name,
+    shouldOpen
+  ) {
+    // It's been determined that this load needs to happen in a new frame.
+    // Either onBeforeLinkTraversal set this correctly or this is the result
+    // of a window.open call.
+
+    // If this ssb can load the url then just load it internally.
+    if (gSSB.canLoad(uri)) {
+      return gSSBBrowser;
+    }
+
+    // Try and find a browser window to open in.
+    let win = BrowserWindowTracker.getTopWindow({
+      private: params.isPrivate,
+      allowPopups: false,
+    });
+
+    if (win) {
+      // Just hand off to the window's handler
+      win.focus();
+      return win.browserDOMWindow.openURIInFrame(
+        shouldOpen ? uri : null,
+        params,
+        where,
+        flags,
+        nextRemoteTabId,
+        name
+      );
+    }
+
+    // We need to open a new browser window and a tab in it. That's an
+    // asychronous operation but luckily if we return null here the platform
+    // handles doing that for us.
+    return null;
+  }
+
+  /**
+   * Gets an nsFrameLoaderOwner to load some new content in.
+   *
+   * @param {nsIURI?} uri
+   * @param {nsIOpenURIInFrameParams} params
+   * @param {Number} where
+   * @param {Number} flags
+   * @param {Number} nextRemoteTabId
+   * @param {string} name
+   * @return {Element} the frame element the URI should be loaded in.
+   */
+  createContentWindowInFrame(uri, params, where, flags, nextRemoteTabId, name) {
+    return this.getContentWindowOrOpenURIInFrame(
+      uri,
+      params,
+      where,
+      flags,
+      nextRemoteTabId,
+      name,
+      false
+    );
+  }
+
+  /**
+   * Create a new nsFrameLoaderOwner and load some content into it.
+   *
+   * @param {nsIURI} uri
+   * @param {nsIOpenURIInFrameParams} params
+   * @param {Number} where
+   * @param {Number} flags
+   * @param {Number} nextRemoteTabId
+   * @param {string} name
+   * @return {Element} the frame element the URI is loading in.
+   */
+  openURIInFrame(uri, params, where, flags, nextRemoteTabId, name) {
+    return this.getContentWindowOrOpenURIInFrame(
+      uri,
+      params,
+      where,
+      flags,
+      nextRemoteTabId,
+      name,
+      true
+    );
+  }
+
+  isTabContentWindow(window) {
+    // This method is probably not needed anymore: bug 1602915
+    return gSSBBrowser.contentWindow == window;
+  }
+
+  canClose() {
+    return BrowserUtils.canCloseWindow(window);
+  }
+
+  get tabCount() {
+    return 1;
+  }
+}
+
+BrowserDOMWindow.prototype.QueryInterface = ChromeUtils.generateQI([
+  Ci.nsIBrowserDOMWindow,
+]);
+
+window.addEventListener("DOMContentLoaded", init, true);
diff --git a/browser/components/a11ymode/content/jar.mn b/browser/components/a11ymode/content/jar.mn
new file mode 100644
--- /dev/null
+++ b/browser/components/a11ymode/content/jar.mn
@@ -0,0 +1,8 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+browser.jar:
+    content/browser/a11ymode/a11ymode.html
+    content/browser/a11ymode/a11ymode.js
+    content/browser/a11ymode/a11ymode.css
diff --git a/browser/components/a11ymode/moz.build b/browser/components/a11ymode/moz.build
new file mode 100644
--- /dev/null
+++ b/browser/components/a11ymode/moz.build
@@ -0,0 +1,12 @@
+# -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+JAR_MANIFESTS += ['content/jar.mn']
+
+FINAL_TARGET_FILES.actors += [
+    'A11YModeChild.jsm',
+    'A11YModeParent.jsm',
+]
diff --git a/browser/components/moz.build b/browser/components/moz.build
--- a/browser/components/moz.build
+++ b/browser/components/moz.build
@@ -25,16 +25,17 @@ with Files("safebrowsing/**"):
 with Files('controlcenter/**'):
     BUG_COMPONENT = ('Firefox', 'General')
 
 
 DIRS += [
     'about',
     'aboutconfig',
     'aboutlogins',
+    'a11ymode',
     'attribution',
     'contextualidentity',
     'customizableui',
     'dirprovider',
     'downloads',
     'enterprisepolicies',
     'extensions',
     'fxmonitor',
diff --git a/browser/themes/shared/urlbar-searchbar.inc.css b/browser/themes/shared/urlbar-searchbar.inc.css
--- a/browser/themes/shared/urlbar-searchbar.inc.css
+++ b/browser/themes/shared/urlbar-searchbar.inc.css
@@ -809,16 +809,29 @@
 }
 #urlbar[cfr-recommendation-state="expanded"] #urlbar-input {
   mask-position-x: calc(var(--cfr-label-width) * -1);
 }
 #urlbar[cfr-recommendation-state="expanded"] #urlbar-input:-moz-locale-dir(rtl) {
   mask-position-x: calc(var(--cfr-label-width));
 }
 
+/* a11y mode icon */
+
+#a11y-mode-button {
+  list-style-image: url(chrome://browser/skin/readerMode.svg);
+  fill: orange;
+  fill-opacity: 1;
+}
+
+#a11y-mode-button[readeractive] {
+  fill: var(--toolbarbutton-icon-fill-attention);
+  fill-opacity: 1;
+}
+
 /* Reader mode icon */
 
 #reader-mode-button {
   list-style-image: url(chrome://browser/skin/readerMode.svg);
 }
 
 #reader-mode-button[readeractive] {
   fill: var(--toolbarbutton-icon-fill-attention);
