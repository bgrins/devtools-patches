# HG changeset patch
# Parent f20a704b7ef339a2cc03e327a7928ce196e97222
# User Patrick Brosset <pbrosset@mozilla.com>
Bug 1063463 - Simplify how case is preserved when editing attributes in the inspector; r=bgrins

diff --git a/browser/devtools/markupview/markup-view.js b/browser/devtools/markupview/markup-view.js
--- a/browser/devtools/markupview/markup-view.js
+++ b/browser/devtools/markupview/markup-view.js
@@ -2182,72 +2182,40 @@ function truncateString(str, maxLength) 
   if (str.length <= maxLength) {
     return str;
   }
 
   return str.substring(0, Math.ceil(maxLength / 2)) +
          "â€¦" +
          str.substring(str.length - Math.floor(maxLength / 2));
 }
+
 /**
  * Parse attribute names and values from a string.
  *
  * @param  {String} attr
  *         The input string for which names/values are to be parsed.
  * @param  {HTMLDocument} doc
  *         A document that can be used to test valid attributes.
  * @return {Array}
  *         An array of attribute names and their values.
  */
 function parseAttributeValues(attr, doc) {
   attr = attr.trim();
 
-  // Prepare other versions of the string to be parsed by appending a " or '
-  // and using those if the first one fails to parse without these characters
-  let stringsToParse = [
-    "<div " + attr + "></div>",
-    "<div " + attr + "\"></div>",
-    "<div " + attr + "'></div>"
-  ];
-
-  // Try to parse as XML, this way, if the string is wellformed, this will
-  // preserve the case.
-  let parsedAttributes = [];
-  for (let str of stringsToParse) {
-    let parsed = DOMParser.parseFromString(str, "text/xml");
-    // The XML parser generates a valid XML document even when parsing errors
-    // occur, in which case the document contains a <parsererror> node, so check
-    // that the document contains our expected DIV
-    if (parsed.childNodes[0].localName === "div") {
-      for (let {name, value} of parsed.childNodes[0].attributes) {
-        parsedAttributes.push({ name, value });
-      }
-      break;
-    }
-  }
-
-  // If the XML parsing failed, parse as HTML to get malformed attributes
-  if (parsedAttributes.length === 0) {
-    for (let str of stringsToParse) {
-      let parsed = DOMParser.parseFromString(str, "text/html");
-      // Check that the parsed document does contain the expected DIV as a child
-      // of <body>
-      if (parsed.body.childNodes[0]) {
-        for (let {name, value} of parsed.body.childNodes[0].attributes) {
-          parsedAttributes.push({ name, value });
-        }
-        break;
-      }
-    }
-  }
+  // Handle bad user inputs by appending a " or ' if it fails to parse without
+  // them. Also note that a SVG tag is used to make sure the HTML parser
+  // preserves mixed-case attributes
+  let el = DOMParser.parseFromString("<svg " + attr + "></svg>", "text/html").body.childNodes[0] ||
+           DOMParser.parseFromString("<svg " + attr + "\"></svg>", "text/html").body.childNodes[0] ||
+           DOMParser.parseFromString("<svg " + attr + "'></svg>", "text/html").body.childNodes[0];
 
   let div = doc.createElement("div");
-
   let attributes = [];
-  for (let {name, value} of parsedAttributes) {
+  for (let {name, value} of el.attributes) {
     // Try to set on an element in the document, throws exception on bad input.
     // Prevents InvalidCharacterError - "String contains an invalid character".
     try {
       div.setAttribute(name, value);
       attributes.push({ name, value });
     }
     catch(e) { }
   }
diff --git a/browser/devtools/markupview/test/browser_markupview_tag_edit_09.js b/browser/devtools/markupview/test/browser_markupview_tag_edit_09.js
--- a/browser/devtools/markupview/test/browser_markupview_tag_edit_09.js
+++ b/browser/devtools/markupview/test/browser_markupview_tag_edit_09.js
@@ -40,21 +40,18 @@ function* testWellformedMixedCase(inspec
   assertAttributes("svg", {
     "viewBox": "0 0 1 1",
     "width": "200",
     "height": "200"
   });
 }
 
 function* testMalformedMixedCase(inspector) {
-  info("Modifying a mixed-case attribute, making sure to generate a parsing" +
-    "error, and  expecting the attribute's case to NOT be preserved");
-  // See /browser/devtools/markupview/markup-view.js:parseAttributeValues
-  // When attributes are malformed, they cannot be parsed with the XML parser
-  // and so we fall back to the HTML parser which lowercases attributes.
+  info("Modifying a malformed, mixed-case attribute, " +
+    "expecting the attribute's case to be preserved");
 
   info("Listening to markup mutations");
   let onMutated = inspector.once("markupmutation");
 
   info("Focusing the viewBox attribute editor");
   let {editor} = yield getContainerForSelector("svg", inspector);
   let attr = editor.attrs["viewBox"].querySelector(".editable");
   attr.focus();
@@ -62,13 +59,13 @@ function* testMalformedMixedCase(inspect
 
   info("Editing the attribute value and waiting for the mutation event");
   let input = inplaceEditor(attr).input;
   input.value = "viewBox=\"<>\"";
   EventUtils.sendKey("return", inspector.panelWin);
   yield onMutated;
 
   assertAttributes("svg", {
-    "viewbox": "<>",
+    "viewBox": "<>",
     "width": "200",
     "height": "200"
   });
 }
