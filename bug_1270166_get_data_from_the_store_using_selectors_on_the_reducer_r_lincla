# HG changeset patch
# User Nicolas Chevobbe <chevobbe.nicolas@gmail.com>
# Date 1462390329 25200
#      Wed May 04 12:32:09 2016 -0700
# Node ID 452f393357bd1a1312acfe013c9c2818307b0c42
# Parent  217746cce0e6db6caf838fb91fbccdce44746cca
Bug 1270166 - Get data from the store using selectors on the reducer. r=linclark

MozReview-Commit-ID: DuZzU5BWcKr

diff --git a/devtools/client/webconsole/new-console-output/components/console-output.js b/devtools/client/webconsole/new-console-output/components/console-output.js
--- a/devtools/client/webconsole/new-console-output/components/console-output.js
+++ b/devtools/client/webconsole/new-console-output/components/console-output.js
@@ -7,16 +7,17 @@ const {
   createClass,
   createFactory,
   DOM: dom,
   PropTypes
 } = require("devtools/client/shared/vendor/react");
 const ReactDOM = require("devtools/client/shared/vendor/react-dom");
 const { connect } = require("devtools/client/shared/vendor/react-redux");
 
+const { getAllMessages } = require("devtools/client/webconsole/new-console-output/selectors/messages");
 const MessageContainer = createFactory(require("devtools/client/webconsole/new-console-output/components/message-container").MessageContainer);
 
 const ConsoleOutput = createClass({
 
   propTypes: {
     jsterm: PropTypes.object.isRequired,
     // This function is created in mergeProps
     openVariablesView: PropTypes.func.isRequired,
@@ -56,13 +57,13 @@ function isScrolledToBottom(outputNode, 
   let lastNodeHeight = outputNode.lastChild ?
                        outputNode.lastChild.clientHeight : 0;
   return scrollNode.scrollTop + scrollNode.clientHeight >=
          scrollNode.scrollHeight - lastNodeHeight / 2;
 }
 
 function mapStateToProps(state) {
   return {
-    messages: state.messages
+    messages: getAllMessages(state)
   };
 }
 
 module.exports = connect(mapStateToProps)(ConsoleOutput);
diff --git a/devtools/client/webconsole/new-console-output/moz.build b/devtools/client/webconsole/new-console-output/moz.build
--- a/devtools/client/webconsole/new-console-output/moz.build
+++ b/devtools/client/webconsole/new-console-output/moz.build
@@ -2,16 +2,17 @@
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 DIRS += [
     'actions',
     'components',
     'reducers',
+    'selectors',
     'utils',
 ]
 
 DevToolsModules(
     'constants.js',
     'main.js',
     'new-console-output-wrapper.js',
     'store.js',
diff --git a/devtools/client/webconsole/new-console-output/selectors/messages.js b/devtools/client/webconsole/new-console-output/selectors/messages.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/selectors/messages.js
@@ -0,0 +1,12 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+function getAllMessages(state) {
+  return state.messages;
+}
+
+exports.getAllMessages = getAllMessages;
diff --git a/devtools/client/webconsole/new-console-output/selectors/moz.build b/devtools/client/webconsole/new-console-output/selectors/moz.build
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/selectors/moz.build
@@ -0,0 +1,8 @@
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+DevToolsModules(
+    'messages.js',
+)
diff --git a/devtools/client/webconsole/new-console-output/test/store/test_messages.js b/devtools/client/webconsole/new-console-output/test/store/test_messages.js
--- a/devtools/client/webconsole/new-console-output/test/store/test_messages.js
+++ b/devtools/client/webconsole/new-console-output/test/store/test_messages.js
@@ -3,49 +3,50 @@
 "use strict";
 
 const actions = require("devtools/client/webconsole/new-console-output/actions/messages");
 const packet = testPackets.get("console.log");
 const {
   getRepeatId,
   prepareMessage
 } = require("devtools/client/webconsole/new-console-output/utils/messages");
+const { getAllMessages } = require("devtools/client/webconsole/new-console-output/selectors/messages");
 
 function run_test() {
   run_next_test();
 }
 
 /**
  * Test adding a message to the store.
  */
 add_task(function*() {
   const { getState, dispatch } = storeFactory();
 
   dispatch(actions.messageAdd(packet));
 
   const expectedMessage = prepareMessage(packet);
 
-  deepEqual(getState().messages, [expectedMessage],
+  deepEqual(getAllMessages(getState()), [expectedMessage],
     "MESSAGE_ADD action adds a message");
 });
 
 /**
  * Test repeating messages in the store.
  */
 add_task(function*() {
   const { getState, dispatch } = storeFactory();
 
   dispatch(actions.messageAdd(packet));
   dispatch(actions.messageAdd(packet));
   dispatch(actions.messageAdd(packet));
 
   const expectedMessage = prepareMessage(packet);
   expectedMessage.repeat = 3;
 
-  deepEqual(getState().messages, [expectedMessage],
+  deepEqual(getAllMessages(getState()), [expectedMessage],
     "Adding same message to the store twice results in repeated message");
 });
 
 /**
  * Test getRepeatId().
  */
 add_task(function*() {
   const message1 = prepareMessage(packet);
