From cce6f825012564212180637341e06bff9aa60f80 Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Wed, 6 Aug 2014 18:15:37 +0100
Subject: [PATCH] Bug 1013356 - Make CSS coverage report exportable; r=harth

---
 browser/devtools/commandline/test/browser.ini      |  41 +++++---
 .../test/browser_cmd_csscoverage_clipboard.js      | 113 +++++++++++++++++++++
 browser/devtools/framework/gDevTools.jsm           |  23 +++--
 browser/devtools/framework/toolbox.js              |  15 ++-
 browser/devtools/styleeditor/styleeditor.xul       |   2 +
 toolkit/devtools/gcli/commands/csscoverage.js      |  15 +++
 .../en-US/chrome/global/devtools/csscoverage.dtd   |   2 +
 7 files changed, 177 insertions(+), 34 deletions(-)
 create mode 100644 browser/devtools/commandline/test/browser_cmd_csscoverage_clipboard.js

diff --git a/browser/devtools/commandline/test/browser.ini b/browser/devtools/commandline/test/browser.ini
index 9a42d35..8cece6f 100644
--- a/browser/devtools/commandline/test/browser.ini
+++ b/browser/devtools/commandline/test/browser.ini
@@ -32,31 +32,40 @@ support-files =
 [browser_cmd_commands.js]
 [browser_cmd_cookie.js]
 support-files =
- browser_cmd_cookie.html
+  browser_cmd_cookie.html
+[browser_cmd_csscoverage_clipboard.js]
+support-files =
+  browser_cmd_csscoverage_page1.html
+  browser_cmd_csscoverage_page2.html
+  browser_cmd_csscoverage_page3.html
+  browser_cmd_csscoverage_sheetA.css
+  browser_cmd_csscoverage_sheetB.css
+  browser_cmd_csscoverage_sheetC.css
+  browser_cmd_csscoverage_sheetD.css
 [browser_cmd_csscoverage_oneshot.js]
 support-files =
- browser_cmd_csscoverage_page1.html
- browser_cmd_csscoverage_page2.html
- browser_cmd_csscoverage_page3.html
- browser_cmd_csscoverage_sheetA.css
- browser_cmd_csscoverage_sheetB.css
- browser_cmd_csscoverage_sheetC.css
- browser_cmd_csscoverage_sheetD.css
+  browser_cmd_csscoverage_page1.html
+  browser_cmd_csscoverage_page2.html
+  browser_cmd_csscoverage_page3.html
+  browser_cmd_csscoverage_sheetA.css
+  browser_cmd_csscoverage_sheetB.css
+  browser_cmd_csscoverage_sheetC.css
+  browser_cmd_csscoverage_sheetD.css
 [browser_cmd_csscoverage_startstop.js]
 support-files =
- browser_cmd_csscoverage_page1.html
- browser_cmd_csscoverage_page2.html
- browser_cmd_csscoverage_page3.html
- browser_cmd_csscoverage_sheetA.css
- browser_cmd_csscoverage_sheetB.css
- browser_cmd_csscoverage_sheetC.css
- browser_cmd_csscoverage_sheetD.css
+  browser_cmd_csscoverage_page1.html
+  browser_cmd_csscoverage_page2.html
+  browser_cmd_csscoverage_page3.html
+  browser_cmd_csscoverage_sheetA.css
+  browser_cmd_csscoverage_sheetB.css
+  browser_cmd_csscoverage_sheetC.css
+  browser_cmd_csscoverage_sheetD.css
 [browser_cmd_folder.js]
 [browser_cmd_highlight_01.js]
 [browser_cmd_highlight_02.js]
 [browser_cmd_inject.js]
 support-files =
- browser_cmd_inject.html
+  browser_cmd_inject.html
 [browser_cmd_csscoverage_util.js]
 [browser_cmd_jsb.js]
 support-files =
diff --git a/browser/devtools/commandline/test/browser_cmd_csscoverage_clipboard.js b/browser/devtools/commandline/test/browser_cmd_csscoverage_clipboard.js
new file mode 100644
index 0000000..59e7f82
--- /dev/null
+++ b/browser/devtools/commandline/test/browser_cmd_csscoverage_clipboard.js
@@ -0,0 +1,113 @@
+/* Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/ */
+
+// Tests that the addon commands works as they should
+
+const csscoverage = require("devtools/server/actors/csscoverage");
+const clipboard = require("sdk/clipboard");
+
+const PAGE_1 = TEST_BASE_HTTPS + "browser_cmd_csscoverage_page1.html";
+const PAGE_2 = TEST_BASE_HTTPS + "browser_cmd_csscoverage_page2.html";
+const PAGE_3 = TEST_BASE_HTTPS + "browser_cmd_csscoverage_page3.html";
+
+const SHEET_A = TEST_BASE_HTTPS + "browser_cmd_csscoverage_sheetA.css";
+const SHEET_B = TEST_BASE_HTTPS + "browser_cmd_csscoverage_sheetB.css";
+const SHEET_C = TEST_BASE_HTTPS + "browser_cmd_csscoverage_sheetC.css";
+const SHEET_D = TEST_BASE_HTTPS + "browser_cmd_csscoverage_sheetD.css";
+
+let test = asyncTest(function*() {
+  let options = yield helpers.openTab("about:blank");
+  yield helpers.openToolbar(options);
+
+  let usage = yield csscoverage.getUsage(options.target);
+
+  yield execCommand(options, "csscoverage start");
+  ok(usage.isRunning(), "csscoverage is running");
+
+  yield navigate(usage, options);
+
+  // This test works fine, but an interesting addition would be to stop
+  // coverage running by finding the notification bar and closing it.
+  yield execCommand(options, "csscoverage stop");
+  ok(!usage.isRunning(), "csscoverage not is running");
+
+  let toolbox = yield gDevTools.showToolbox(options.target, "styleeditor");
+  ok(toolbox != null, "toolbox is open");
+
+  yield execCommand(options, "csscoverage report");
+
+  let doc = toolbox.getCurrentPanel()._panelDoc;
+  let button = doc.querySelector(".csscoverage-report .csscoverage-report-copy");
+
+  yield click(button);
+
+  let contents = clipboard.get();
+  // strip the whitespace to make it easier to test against
+  contents = contents.replace(/\s/g, '');
+
+  ok(contents.match(/<style>/, 'copy check 1.1'));
+  ok(contents.match(/<\/style>/, 'copy check 1.2'));
+
+  ok(contents.match(/.page2-test1{color:rgb\(0,34,17\);}/, 'copy check 2.1'));
+  ok(contents.match(/.sheetA-test1{color:rgb\(0,170,17\);}/, 'copy check 2.2'));
+  ok(contents.match(/.sheetA-test4{color:rgb\(0,170,68\);}/, 'copy check 2.3'));
+  ok(contents.match(/.sheetB-test1{color:rgb\(0,187,17\);}/, 'copy check 2.4'));
+  ok(contents.match(/.sheetB-test4{color:rgb\(0,187,68\);}/, 'copy check 2.5'));
+  ok(contents.match(/.sheetC-test1{color:rgb\(0,204,17\);}/, 'copy check 2.6'));
+  ok(contents.match(/.sheetC-test4{color:rgb\(0,204,68\);}/, 'copy check 2.7'));
+  ok(contents.match(/.sheetD-test1{color:rgb\(0,221,17\);}/, 'copy check 2.8'));
+  ok(contents.match(/.sheetD-test4{color:rgb\(0,221,68\);}/, 'copy check 2.9'));
+
+  ok(!contents.match(/page1-test1/, 'copy check 3.1'));
+  ok(!contents.match(/page2-test2/, 'copy check 3.2'));
+  ok(!contents.match(/page3-test1/, 'copy check 3.3'));
+  ok(!contents.match(/sheetA-test2/, 'copy check 3.4'));
+  ok(!contents.match(/sheetA-test3/, 'copy check 3.5'));
+  ok(!contents.match(/sheetA-test5/, 'copy check 3.6'));
+
+  yield toolbox.destroy();
+  yield helpers.closeToolbar(options);
+  yield helpers.closeTab(options);
+});
+
+/**
+ * Visit all the pages in the test
+ */
+function* navigate(usage, options) {
+  yield helpers.navigate(PAGE_1, options);
+
+  // Wait for the test pages to auto-cycle
+  let ev = yield helpers.listenOnce(options.browser, "load", true);
+  is(ev.target.location.href, PAGE_1, "page 1 loaded");
+
+  ev = yield helpers.listenOnce(options.browser, "load", true);
+  is(ev.target.location.href, PAGE_3, "page 3 loaded");
+}
+
+/**
+ * An easy way to execute a GCLI command
+ */
+function* execCommand(options, typed) {
+  return helpers.audit(options, [
+    {
+      setup: typed,
+      exec: { output: '' }
+    }
+  ]);
+}
+
+/**
+ * Click a button and return a promise of the event handlers being done
+ */
+function* click(element) {
+  return new Promise(resolve => {
+    let handler = ev => {
+      element.removeEventListener('click', handler);
+      executeSoon(() => {
+        resolve(ev);
+      });
+    };
+    element.addEventListener('click', handler);
+    element.click();
+  });
+}
diff --git a/browser/devtools/framework/gDevTools.jsm b/browser/devtools/framework/gDevTools.jsm
index ab7d31e..60ce4aa 100644
--- a/browser/devtools/framework/gDevTools.jsm
+++ b/browser/devtools/framework/gDevTools.jsm
@@ -250,27 +250,32 @@ DevTools.prototype = {
    *        The toolbox that was opened
    */
   showToolbox: function(target, toolId, hostType, hostOptions) {
-    let deferred = promise.defer();
-
     let toolbox = this._toolboxes.get(target);
     if (toolbox) {
+      let toolboxReady = toolbox.isReady ?
+          promise.resolve(null) :
+          toolbox.once("ready");
 
-      let hostPromise = (hostType != null && toolbox.hostType != hostType) ?
-          toolbox.switchHost(hostType) :
-          promise.resolve(null);
+      if (hostType != null && toolbox.hostType != hostType) {
+        toolboxReady = toolboxReady.then(function() {
+          return toolbox.switchHost(hostType);
+        });
+      }
 
       if (toolId != null && toolbox.currentToolId != toolId) {
-        hostPromise = hostPromise.then(function() {
+        toolboxReady = toolboxReady.then(function() {
           return toolbox.selectTool(toolId);
         });
       }
 
-      return hostPromise.then(function() {
+      return toolboxReady.then(function() {
         toolbox.raise();
         return toolbox;
       });
     }
     else {
+      let deferred = promise.defer();
+
       // No toolbox for target, create one
       toolbox = new devtools.Toolbox(target, toolId, hostType, hostOptions);
 
@@ -287,9 +292,9 @@ DevTools.prototype = {
         deferred.resolve(toolbox);
         this.emit("toolbox-ready", toolbox);
       });
-    }
 
-    return deferred.promise;
+      return deferred.promise;
+    }
   },
 
   /**
diff --git a/browser/devtools/framework/toolbox.js b/browser/devtools/framework/toolbox.js
index 9c9090b..e38029a 100644
--- a/browser/devtools/framework/toolbox.js
+++ b/browser/devtools/framework/toolbox.js
@@ -234,8 +234,6 @@ Toolbox.prototype = {
    * Open the toolbox
    */
   open: function() {
-    let deferred = promise.defer();
-
     return this._host.create().then(iframe => {
       let deferred = promise.defer();
 
@@ -277,6 +275,7 @@ Toolbox.prototype = {
             splitConsolePromise,
             buttonsPromise
           ]).then(() => {
+            this.isReady = true
             this.emit("ready");
             deferred.resolve();
           }, deferred.reject);
@@ -899,10 +898,6 @@ Toolbox.prototype = {
       selected.setAttribute("aria-selected", "false");
     }
 
-    let tab = this.doc.getElementById("toolbox-tab-" + id);
-    tab.setAttribute("selected", "true");
-    tab.setAttribute("aria-selected", "true");
-
     // If options is selected, the separator between it and the
     // command buttons should be hidden.
     let sep = this.doc.getElementById("toolbox-controls-separator");
@@ -924,9 +919,11 @@ Toolbox.prototype = {
       throw new Error("Can't select tool, wait for toolbox 'ready' event");
     }
 
-    tab = this.doc.getElementById("toolbox-tab-" + id);
-
+    let tab = this.doc.getElementById("toolbox-tab-" + id);
     if (tab) {
+      tab.setAttribute("selected", "true");
+      tab.setAttribute("aria-selected", "true");
+
       if (this.currentToolId) {
         this._telemetry.toolClosed(this.currentToolId);
       }
@@ -1139,7 +1136,7 @@ Toolbox.prototype = {
    */
   switchHost: function(hostType) {
     if (hostType == this._host.type || !this._target.isLocalTab) {
-      return null;
+      return Promise.resolve(null);
     }
 
     let newHost = this._createHost(hostType);
diff --git a/browser/devtools/styleeditor/styleeditor.xul b/browser/devtools/styleeditor/styleeditor.xul
index 411f141..e95a84b 100644
--- a/browser/devtools/styleeditor/styleeditor.xul
+++ b/browser/devtools/styleeditor/styleeditor.xul
@@ -200,6 +200,8 @@
                 <textarea>&lt;style>
 <loop foreach="rule in ${page.rules}"
                       onclick="${rule.onclick}">${rule.formattedCssText}</loop>&lt;/style></textarea>
+                <button class="csscoverage-report-copy"
+                    onclick="${page.oncopy}">&csscoverage.copyButton;</button>
               </div>
             </div>
             <p>
diff --git a/toolkit/devtools/gcli/commands/csscoverage.js b/toolkit/devtools/gcli/commands/csscoverage.js
index 7ef8387..7b70808 100644
--- a/toolkit/devtools/gcli/commands/csscoverage.js
+++ b/toolkit/devtools/gcli/commands/csscoverage.js
@@ -9,6 +9,7 @@ const { Cc, Ci } = require("chrome");
 const { gDevTools } = require("resource:///modules/devtools/gDevTools.jsm");
 const promise = require("resource://gre/modules/Promise.jsm").Promise;
 
+const clipboard = require("sdk/clipboard");
 const domtemplate = require("gcli/util/domtemplate");
 const csscoverage = require("devtools/server/actors/csscoverage");
 const l10n = csscoverage.l10n;
@@ -161,10 +162,21 @@ exports.items = [
         };
       };
 
+      let addOnCopy = page => {
+        page.oncopy = function() {
+          let styles = page.rules.map(rule => {
+            return rule.formattedCssText;
+          }).join("\n");
+          clipboard.set("<style>\n" + styles + "</style>\n");
+        };
+      };
+
       data.preload.forEach(page => {
+        addOnCopy(page);
         page.rules.forEach(addOnClick);
       });
       data.unused.forEach(page => {
+        addOnCopy(page);
         page.rules.forEach(addOnClick);
       });
 
@@ -189,6 +201,9 @@ exports.items = [
       container.appendChild(chart.node);
 
       host.hidden = false;
+
+      // The UI is shown in the toolbox, return an empty node for GCLI
+      return context.document.createElement('span');
     }
   }
 ];
diff --git a/toolkit/locales/en-US/chrome/global/devtools/csscoverage.dtd b/toolkit/locales/en-US/chrome/global/devtools/csscoverage.dtd
index 5f104e7..f94646e 100644
--- a/toolkit/locales/en-US/chrome/global/devtools/csscoverage.dtd
+++ b/toolkit/locales/en-US/chrome/global/devtools/csscoverage.dtd
@@ -16,6 +16,8 @@
   -  Text on the button to go back to the main style editor -->
 <!ENTITY csscoverage.backButton "Back">
 
+<!ENTITY csscoverage.copyButton "Copy">
+
 <!-- LOCALIZATION NOTE (csscoverage.unused, csscoverage.noMatches):
   -  This is the heading and body text for the CSS usage part of the report -->
 <!ENTITY csscoverage.unused "Unused Rules">
-- 
2.0.4

