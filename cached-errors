# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  22b421afcf73faf3db5bf2e39b291bbc300e1d9a
Bug 1225828 - Avoid 'Object in compartment marked as invisible to Debugger' exceptions in the Browser Console / Browser Toolbox;r=jryans

diff --git a/devtools/server/actors/webconsole.js b/devtools/server/actors/webconsole.js
--- a/devtools/server/actors/webconsole.js
+++ b/devtools/server/actors/webconsole.js
@@ -418,26 +418,28 @@ WebConsoleActor.prototype =
    * @param boolean aUseObjectGlobal
    *        If |true| the object global is determined and added as a debuggee,
    *        otherwise |this.window| is used when makeDebuggeeValue() is invoked.
    * @return object
    *         Debuggee value for |aValue|.
    */
   makeDebuggeeValue: function WCA_makeDebuggeeValue(aValue, aUseObjectGlobal)
   {
-    let global = this.window;
     if (aUseObjectGlobal && typeof aValue == "object") {
       try {
-        global = Cu.getGlobalForObject(aValue);
+        let global = Cu.getGlobalForObject(aValue);
+        let dbgGlobal = this.dbg.makeGlobalObjectReference(global);
+        return dbgGlobal.makeDebuggeeValue(aValue);
       }
       catch (ex) {
-        // The above can throw an exception if aValue is not an actual object.
+        // The above can throw an exception if aValue is not an actual object
+        // or 'Object in compartment marked as invisible to Debugger'
       }
     }
-    let dbgGlobal = this.dbg.makeGlobalObjectReference(global);
+    let dbgGlobal = this.dbg.makeGlobalObjectReference(this.window);
     return dbgGlobal.makeDebuggeeValue(aValue);
   },
 
   /**
    * Create a grip for the given object.
    *
    * @param object aObject
    *        The object you want.
diff --git a/devtools/shared/DevToolsUtils.js b/devtools/shared/DevToolsUtils.js
--- a/devtools/shared/DevToolsUtils.js
+++ b/devtools/shared/DevToolsUtils.js
@@ -320,18 +320,23 @@ exports.getProperty = function getProper
  * @param Object aDesc
  *        The descriptor to check for a safe getter.
  * @return Boolean
  *         Whether a safe getter was found.
  */
 exports.hasSafeGetter = function hasSafeGetter(aDesc) {
   // Scripted functions that are CCWs will not appear scripted until after
   // unwrapping.
-  let fn = aDesc.get.unwrap();
-  return fn && fn.callable && fn.class == "Function" && fn.script === undefined;
+  try {
+    let fn = aDesc.get.unwrap();
+    return fn && fn.callable && fn.class == "Function" && fn.script === undefined;
+  } catch(e) {
+    // Avoid exception 'Object in compartment marked as invisible to Debugger'
+    return false;
+  }
 };
 
 /**
  * Check if it is safe to read properties and execute methods from the given JS
  * object. Safety is defined as being protected from unintended code execution
  * from content scripts (or cross-compartment code).
  *
  * See bugs 945920 and 946752 for discussion.
diff --git a/devtools/shared/webconsole/test/chrome.ini b/devtools/shared/webconsole/test/chrome.ini
--- a/devtools/shared/webconsole/test/chrome.ini
+++ b/devtools/shared/webconsole/test/chrome.ini
@@ -21,16 +21,17 @@ support-files =
 [test_console_styling.html]
 [test_file_uri.html]
 [test_reflow.html]
 [test_jsterm.html]
 [test_jsterm_autocomplete.html]
 [test_jsterm_cd_iframe.html]
 [test_jsterm_last_result.html]
 [test_jsterm_queryselector.html]
+[test_make_debuggee_value.html]
 [test_network_get.html]
 [test_network_longstring.html]
 [test_network_post.html]
 [test_network_security-hpkp.html]
 [test_network_security-hsts.html]
 [test_nsiconsolemessage.html]
 [test_object_actor.html]
 [test_object_actor_native_getters.html]
diff --git a/devtools/shared/webconsole/test/test_consoleapi.html b/devtools/shared/webconsole/test/test_consoleapi.html
--- a/devtools/shared/webconsole/test/test_consoleapi.html
+++ b/devtools/shared/webconsole/test/test_consoleapi.html
@@ -23,16 +23,20 @@ function doConsoleCalls(aState)
   top.console.log("foobarBaz-log", undefined);
   top.console.info("foobarBaz-info", null);
   top.console.warn("foobarBaz-warn", top.document.documentElement);
   top.console.debug(null);
   top.console.trace();
   top.console.dir(top.document, top.location);
   top.console.log("foo", longString);
 
+  let sandbox = new Cu.Sandbox(null, { invisibleToDebugger: true });
+  let sandboxObj = sandbox.eval("new Object");
+  top.console.log(sandboxObj);
+
   function fromAsmJS() {
       top.console.error("foobarBaz-asmjs-error", undefined);
   }
 
   (function(global, foreign) {
     "use asm";
     var fromAsmJS = foreign.fromAsmJS;
     function inAsmJS2() { fromAsmJS() }
@@ -115,16 +119,29 @@ function doConsoleCalls(aState)
           initial: longString.substring(0,
             DebuggerServer.LONG_STRING_INITIAL_LENGTH),
           length: longString.length,
           actor: /[a-z]/,
         },
       ],
     },
     {
+      level: "log",
+      filename: /test_consoleapi/,
+      functionName: "doConsoleCalls",
+      timeStamp: /^\d+$/,
+      arguments: [
+        {
+          type: "object",
+          actor: /[a-z]/,
+          class: "Object",
+        },
+      ],
+    },
+    {
       level: "error",
       filename: /test_consoleapi/,
       functionName: "fromAsmJS",
       timeStamp: /^\d+$/,
       arguments: ["foobarBaz-asmjs-error", { type: "undefined" }],
 
       stacktrace: [
         {
diff --git a/devtools/shared/webconsole/test/test_make_debuggee_value.html b/devtools/shared/webconsole/test/test_make_debuggee_value.html
new file mode 100644
--- /dev/null
+++ b/devtools/shared/webconsole/test/test_make_debuggee_value.html
@@ -0,0 +1,80 @@
+<!DOCTYPE HTML>
+<html lang="en">
+<head>
+  <meta charset="utf8">
+  <title>Test for JavaScript terminal functionality</title>
+  <script type="text/javascript" src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
+  <script type="text/javascript;version=1.8" src="common.js"></script>
+  <!-- Any copyright is dedicated to the Public Domain.
+     - http://creativecommons.org/publicdomain/zero/1.0/ -->
+</head>
+<body>
+<p>Test for JavaScript terminal functionality</p>
+
+<script class="testbody" type="text/javascript;version=1.8">
+SimpleTest.waitForExplicitFinish();
+
+let gState;
+
+// This test runs all of its assertions twice - once with
+// evaluateJS and once with evaluateJSAsync.
+let evaluatingSync = true;
+function evaluateJS(input, options = {}) {
+  return new Promise((resolve, reject) => {
+    if (evaluatingSync) {
+      gState.client.evaluateJS(input, resolve, options);
+    } else {
+      gState.client.evaluateJSAsync(input, resolve, options);
+    }
+  });
+}
+
+function startTest()
+{
+  removeEventListener("load", startTest);
+
+  attachConsoleToTab(["PageError"], onAttach);
+}
+
+function onAttach(aState, aResponse)
+{
+  gState = aState;
+  let tests = [doSimpleEval].map(t => {
+                 return Task.async(t);
+               });
+
+  runTests(tests, testEnd);
+}
+
+function* doSimpleEval() {
+  const sandbox = new Cu.Sandbox(null, { invisibleToDebugger: true });
+  const sandboxObj = sandbox.eval("new Object");
+
+  console.log(gState.actor);
+  console.log(gState.actor.makeDebuggeeValue(sandboxObj, sandbox));
+  // WCA_makeDebuggeeValue(sandboxObj, sandbox);
+  // info("test eval '2+2'");
+  // let response = yield evaluateJS("2+2");
+  // checkObject(response, {
+  //   from: gState.actor,
+  //   input: "2+2",
+  //   result: 4,
+  // });
+
+  // ok(!response.exception, "no eval exception");
+  // ok(!response.helperResult, "no helper result");
+
+  // nextTest();
+}
+
+function testEnd() {
+  closeDebugger(gState, function() {
+    SimpleTest.finish();
+  });
+}
+
+
+addEventListener("load", startTest);
+</script>
+</body>
+</html>
