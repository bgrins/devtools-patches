# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  c03346d41db6fa6893b040aec92fd9d324158285
Bug 1211038 - Cmd-F does not focus the debugger search input

diff --git a/devtools/client/debugger/debugger-view.js b/devtools/client/debugger/debugger-view.js
--- a/devtools/client/debugger/debugger-view.js
+++ b/devtools/client/debugger/debugger-view.js
@@ -278,17 +278,20 @@ var DebuggerView = {
     bindKey("_doGlobalSearch", "globalSearchKey", { alt: true });
     bindKey("_doFunctionSearch", "functionSearchKey");
     extraKeys[Editor.keyFor("jumpToLine")] = false;
     extraKeys["Esc"] = false;
 
     function bindKey(func, key, modifiers = {}) {
       key = document.getElementById(key).getAttribute("key");
       let shortcut = Editor.accel(key, modifiers);
-      extraKeys[shortcut] = () => DebuggerView.Filtering[func]();
+      extraKeys[shortcut] = () => {
+        console.log("Running extra key for " + shortcut, func)
+        DebuggerView.Filtering[func]();
+      }
     }
 
     let gutters = ["breakpoints"];
 
     this.editor = new Editor({
       mode: Editor.modes.text,
       readOnly: true,
       lineNumbers: true,
diff --git a/devtools/client/debugger/views/filter-view.js b/devtools/client/debugger/views/filter-view.js
--- a/devtools/client/debugger/views/filter-view.js
+++ b/devtools/client/debugger/views/filter-view.js
@@ -286,17 +286,17 @@ FilterView.prototype = {
   },
 
   /**
    * The key press listener for the search container.
    */
   _onKeyPress: function(e) {
     // This attribute is not implemented in Gecko at this time, see bug 680830.
     e.char = String.fromCharCode(e.charCode);
-
+    console.log("_onKeyPress", e);
     // Perform the required action based on the specified operator.
     let [operator, args] = this.searchData;
     let isGlobalSearch = operator == SEARCH_GLOBAL_FLAG;
     let isFunctionSearch = operator == SEARCH_FUNCTION_FLAG;
     let isVariableSearch = operator == SEARCH_VARIABLE_FLAG;
     let isTokenSearch = operator == SEARCH_TOKEN_FLAG;
     let isLineSearch = operator == SEARCH_LINE_FLAG;
     let isFileOnlySearch = !operator && args.length == 1;
@@ -423,16 +423,17 @@ FilterView.prototype = {
 
   /**
    * Called when a filtering key sequence was pressed.
    *
    * @param string aOperator
    *        The operator to use for filtering.
    */
   _doSearch: function(aOperator = "", aText = "") {
+    console.log("_doSearch", this._searchbox);
     this._searchbox.focus();
     this._searchbox.value = ""; // Need to clear value beforehand. Bug 779738.
 
     if (aText) {
       this._searchbox.value = aOperator + aText;
       return;
     }
     if (this.DebuggerView.editor.somethingSelected()) {
@@ -449,16 +450,19 @@ FilterView.prototype = {
       if (identifier && identifier.name) {
         this._searchbox.value = aOperator + identifier.name;
         this._searchbox.select();
         this._searchbox.selectionStart += aOperator.length;
         return;
       }
     }
     this._searchbox.value = aOperator;
+    setTimeout(() => {
+      this._searchbox.focus();
+    }, 100)
   },
 
   /**
    * Called when the source location filter key sequence was pressed.
    */
   _doFileSearch: function() {
     this._doSearch();
     this._searchboxHelpPanel.openPopup(this._searchbox);
diff --git a/devtools/client/sourceeditor/codemirror/addon/search/search.js b/devtools/client/sourceeditor/codemirror/addon/search/search.js
--- a/devtools/client/sourceeditor/codemirror/addon/search/search.js
+++ b/devtools/client/sourceeditor/codemirror/addon/search/search.js
@@ -116,18 +116,18 @@
       let doc = cm.getWrapperElement().ownerDocument;
       let inp = doc.createElement("input");
 
       inp.type = "search";
       inp.placeholder = cm.l10n("findCmd.promptMessage");
       inp.style.MozMarginStart = "1em";
       inp.style.MozMarginEnd = "1em";
       inp.style.flexGrow = "1";
-      inp.addEventListener("focus", () => inp.select());
-
+      // inp.addEventListener("focus", () => inp.select());
+// 
       queryDialog = doc.createElement("div");
       queryDialog.appendChild(inp);
       queryDialog.style.display = "flex";
     }
 
     var state = getSearchState(cm);
     if (state.query) return findNext(cm, rev);
     var q = cm.getSelection() || state.lastQuery;
diff --git a/devtools/client/sourceeditor/editor.js b/devtools/client/sourceeditor/editor.js
--- a/devtools/client/sourceeditor/editor.js
+++ b/devtools/client/sourceeditor/editor.js
@@ -355,17 +355,20 @@ Editor.prototype = {
             cm.execCommand("findPrev");
           } else {
             cm.execCommand("findNext");
           }
         }
       });
 
 
-      cm.on("focus", () => this.emit("focus"));
+      cm.on("focus", () => {
+        console.log("EDITOR FOCUS");
+        this.emit("focus");
+      });
       cm.on("scroll", () => this.emit("scroll"));
       cm.on("change", () => {
         this.emit("change");
         if (!this._lastDirty) {
           this._lastDirty = true;
           this.emit("dirty-change");
         }
       });
