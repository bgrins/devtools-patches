# HG changeset patch
# Parent dc94b330d2e22eea40aa7fce946d4063a9a6a62b
# User Brian Grinstead <bgrinstead@mozilla.com>
try: -b do -p linux,linux64,macosx64,win32 -u xpcshell,mochitests -t all

diff --git a/browser/devtools/markupview/markup-view.js b/browser/devtools/markupview/markup-view.js
--- a/browser/devtools/markupview/markup-view.js
+++ b/browser/devtools/markupview/markup-view.js
@@ -520,16 +520,17 @@ MarkupView.prototype = {
 
     // Retain the node so we can undo this...
     this.walker.retainNode(aNode).then(() => {
       let parent = aNode.parentNode();
       let nextSibling = null;
       this.undo.do(() => {
         this.walker.removeNode(aNode).then(siblings => {
           let focusNode = siblings.previousSibling || parent;
+          console.log(siblings, siblings.previousSibling);
           nextSibling = siblings.nextSibling;
           if (container.selected) {
             this.navigate(this.getContainer(focusNode));
           }
         });
       }, () => {
         this.walker.insertBefore(aNode, parent, nextSibling);
       });
diff --git a/toolkit/devtools/server/actors/inspector.js b/toolkit/devtools/server/actors/inspector.js
--- a/toolkit/devtools/server/actors/inspector.js
+++ b/toolkit/devtools/server/actors/inspector.js
@@ -2121,42 +2121,39 @@ var WalkerActor = protocol.ActorClass({
     response: {}
   }),
 
   /**
    * Removes a node from its parent node.
    *
    * @returns The node's nextSibling before it was removed.
    */
+
   removeNode: method(function(node) {
     if ((node.rawNode.ownerDocument &&
          node.rawNode.ownerDocument.documentElement === this.rawNode) ||
          node.rawNode.nodeType === Ci.nsIDOMNode.DOCUMENT_NODE) {
       throw Error("Cannot remove document or document elements.");
     }
-    let previousSibling = this.previousSibling(node);
     let nextSibling = this.nextSibling(node);
     if (node.rawNode.parentNode) {
       node.rawNode.parentNode.removeChild(node.rawNode);
       // Mutation events will take care of the rest.
     }
-    return {
-      previousSibling: previousSibling,
-      nextSibling: nextSibling,
-    };
+    return nextSibling;
   }, {
     request: {
       node: Arg(0, "domnode")
     },
-    response: RetVal(types.addDictType("siblings", {
-      previousSibling: RetVal("nullable:domnode"),
+    response: {
       nextSibling: RetVal("nullable:domnode")
-    })),
+    }
   }),
 
+
   /**
    * Insert a node into the DOM.
    */
   insertBefore: method(function(node, parent, sibling) {
     parent.rawNode.insertBefore(node.rawNode, sibling ? sibling.rawNode : null);
   }, {
     request: {
       node: Arg(0, "domnode"),
@@ -2878,32 +2875,24 @@ var WalkerFront = exports.WalkerFront = 
     if (top !== this.rootNode) {
       // Imported an already-orphaned node.
       this._orphaned.add(top);
       walkerActor._orphaned.add(this.conn._transport._serverConnection.getActor(top.actorID));
     }
     return returnNode;
   },
 
-  removeNode: protocol.custom(function(node) {
-    return this._removeNode(node).then(siblings => {
-      if (siblings && siblings.previousSibling !== undefined) {
-        return siblings;
-      }
-      // For old server `removeNode` returns `nextSibling`.
-      // So we manually retrieve `previousSibling`.
-      let nextSibling = siblings;
-      return this.previousSibling(nextSibling).then(previousSibling => {
-        return {
-          previousSibling: previousSibling,
-          nextSibling: nextSibling,
-        };
-      });
-    });
-  }, {
+  removeNode: protocol.custom(Task.async(function*(node) {
+    let previousSibling = yield this.previousSibling(node);
+    let nextSibling = yield this._removeNode(node);
+    return {
+      nextSibling: nextSibling,
+      previousSibling: previousSibling,
+    };
+  }), {
     impl: "_removeNode"
   }),
 });
 
 /**
  * Convenience API for building a list of attribute modifications
  * for the `modifyAttributes` request.
  */
