# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  7d94ea57d5a0bd964e65eb4db9b778dbfcab0dc3
asdfads

diff --git a/browser/app/profile/firefox.js b/browser/app/profile/firefox.js
--- a/browser/app/profile/firefox.js
+++ b/browser/app/profile/firefox.js
@@ -1313,16 +1313,17 @@ pref("services.sync.prefs.sync.lightweig
 pref("services.sync.prefs.sync.lightweightThemes.usedThemes", true);
 pref("services.sync.prefs.sync.network.cookie.cookieBehavior", true);
 pref("services.sync.prefs.sync.network.cookie.lifetimePolicy", true);
 pref("services.sync.prefs.sync.permissions.default.image", true);
 pref("services.sync.prefs.sync.pref.advanced.images.disable_button.view_image", true);
 pref("services.sync.prefs.sync.pref.advanced.javascript.disable_button.advanced", true);
 pref("services.sync.prefs.sync.pref.downloads.disable_button.edit_actions", true);
 pref("services.sync.prefs.sync.pref.privacy.disable_button.cookie_exceptions", true);
+pref("services.sync.prefs.sync.pref.privacy.disable_button.trackingprotection_exceptions", true);
 pref("services.sync.prefs.sync.privacy.clearOnShutdown.cache", true);
 pref("services.sync.prefs.sync.privacy.clearOnShutdown.cookies", true);
 pref("services.sync.prefs.sync.privacy.clearOnShutdown.downloads", true);
 pref("services.sync.prefs.sync.privacy.clearOnShutdown.formdata", true);
 pref("services.sync.prefs.sync.privacy.clearOnShutdown.history", true);
 pref("services.sync.prefs.sync.privacy.clearOnShutdown.offlineApps", true);
 pref("services.sync.prefs.sync.privacy.clearOnShutdown.passwords", true);
 pref("services.sync.prefs.sync.privacy.clearOnShutdown.sessions", true);
diff --git a/browser/components/preferences/in-content/privacy.js b/browser/components/preferences/in-content/privacy.js
--- a/browser/components/preferences/in-content/privacy.js
+++ b/browser/components/preferences/in-content/privacy.js
@@ -92,16 +92,18 @@ var gPrivacyPane = {
       return false;
     });
     setEventListener("historyDontRememberClear", "click", function () {
       gPrivacyPane.clearPrivateDataNow(true);
       return false;
     });
     setEventListener("privateBrowsingAutoStart", "command",
                      gPrivacyPane.updateAutostart);
+    setEventListener("trackingProtectionExceptions", "command",
+                     gPrivacyPane.showTrackingProtectionExceptions);
     setEventListener("cookieExceptions", "command",
                      gPrivacyPane.showCookieExceptions);
     setEventListener("showCookiesButton", "command",
                      gPrivacyPane.showCookies);
     setEventListener("clearDataSettings", "command",
                      gPrivacyPane.showClearPrivateDataSettings);
   },
 
@@ -467,16 +469,34 @@ var gPrivacyPane = {
       case "never":
         return 1;
       default:
         return undefined;
     }
   },
 
   /**
+   * Displays fine-grained, per-site preferences for tracking protection.
+   */
+  showTrackingProtectionExceptions: function ()
+  {
+    var bundlePreferences = document.getElementById("bundlePreferences");
+    var params = { blockVisible   : false,
+                   sessionVisible : false,
+                   allowVisible   : true,
+                   prefilledHost  : "",
+                   permissionType : "trackingprotection",
+                   windowTitle    : bundlePreferences.getString("trackingprojectionpermissionstitle"),
+                   introText      : bundlePreferences.getString("trackingprojectionpermissionstext") };
+    gSubDialog.open("chrome://browser/content/preferences/permissions.xul",
+                    null, params);
+  },
+
+
+  /**
    * Displays fine-grained, per-site preferences for cookies.
    */
   showCookieExceptions: function ()
   {
     var bundlePreferences = document.getElementById("bundlePreferences");
     var params = { blockVisible   : true,
                    sessionVisible : true,
                    allowVisible   : true,
diff --git a/browser/components/preferences/in-content/privacy.xul b/browser/components/preferences/in-content/privacy.xul
--- a/browser/components/preferences/in-content/privacy.xul
+++ b/browser/components/preferences/in-content/privacy.xul
@@ -16,16 +16,19 @@
   <preference id="privacy.trackingprotection.enabled"
               name="privacy.trackingprotection.enabled"
               type="bool"/>
 
   <!-- XXX button prefs -->
   <preference id="pref.privacy.disable_button.cookie_exceptions"
               name="pref.privacy.disable_button.cookie_exceptions"
               type="bool"/>
+  <preference id="pref.privacy.disable_button.trackingprotection_exceptions"
+              name="pref.privacy.disable_button.trackingprotection_exceptions"
+              type="bool"/>
   <preference id="pref.privacy.disable_button.view_cookies"
               name="pref.privacy.disable_button.view_cookies"
               type="bool"/>
 
   <!-- Location Bar -->
   <preference id="browser.urlbar.autocomplete.enabled"
               name="browser.urlbar.autocomplete.enabled"
               type="bool"/>
@@ -78,23 +81,28 @@
       hidden="true"
       data-category="panePrivacy">
   <label class="header-name">&panePrivacy.title;</label>
 </hbox>
 
 <!-- Tracking -->
 <groupbox id="trackingGroup" data-category="panePrivacy" hidden="true" align="start">
   <caption><label>&tracking.label;</label></caption>
-  <vbox id="trackingprotectionbox" hidden="true">
-    <hbox align="center">
+  <vbox id="trackingprotectionbox" hidden="true" flex="1">
+    <hbox align="center" flex="1">
       <checkbox id="trackingProtection"
                 preference="privacy.trackingprotection.enabled"
                 accesskey="&trackingProtection.accesskey;"
                 label="&trackingProtection.label;" />
       <image id="trackingProtectionImage"/>
+      <spacer flex="1" />
+      <button id="trackingProtectionExceptions"
+              label="&trackingProtectionExceptions.label;"
+              accesskey="&trackingProtectionExceptions.accesskey;"
+              preference="pref.privacy.disable_button.trackingprotection_exceptions"/>
     </hbox>
     <hbox align="center"
           class="indent">
       <label id="trackingProtectionLearnMore"
              class="text-link"
              value="&trackingProtectionLearnMore.label;"/>
     </hbox>
   </vbox>
diff --git a/browser/components/preferences/in-content/subdialogs.js b/browser/components/preferences/in-content/subdialogs.js
--- a/browser/components/preferences/in-content/subdialogs.js
+++ b/browser/components/preferences/in-content/subdialogs.js
@@ -61,41 +61,41 @@ let gSubDialog = {
     return dialog;
   },
 
   close: function(aEvent = null) {
     if (this._isClosing) {
       return;
     }
     this._isClosing = true;
-
-    if (this._closingCallback) {
-      try {
-        this._closingCallback.call(null, aEvent);
-      } catch (ex) {
-        Cu.reportError(ex);
-      }
-      this._closingCallback = null;
-    }
-
     this._removeDialogEventListeners();
 
     this._overlay.style.visibility = "";
     // Clear the sizing inline styles.
     this._frame.removeAttribute("style");
     // Clear the sizing attributes
     this._box.removeAttribute("width");
     this._box.removeAttribute("height");
     this._box.style.removeProperty("min-height");
     this._box.style.removeProperty("min-width");
 
     setTimeout(() => {
       // Unload the dialog after the event listeners run so that the load of about:blank isn't
       // cancelled by the ESC <key>.
       this._frame.loadURI("about:blank");
+
+      if (this._closingCallback) {
+        try {
+          this._closingCallback.call(null, aEvent);
+        } catch (ex) {
+          Cu.reportError(ex);
+        }
+        this._closingCallback = null;
+      }
+
     }, 0);
   },
 
   handleEvent: function(aEvent) {
     switch (aEvent.type) {
       case "command":
         this.close(aEvent);
         break;
diff --git a/browser/components/preferences/in-content/tests/browser.ini b/browser/components/preferences/in-content/tests/browser.ini
--- a/browser/components/preferences/in-content/tests/browser.ini
+++ b/browser/components/preferences/in-content/tests/browser.ini
@@ -12,16 +12,18 @@ support-files =
 [browser_bug1018066_resetScrollPosition.js]
 [browser_bug1020245_openPreferences_to_paneContent.js]
 [browser_change_app_handler.js]
 skip-if = os != "win" # This test tests the windows-specific app selection dialog, so can't run on non-Windows
 [browser_connection.js]
 [browser_connection_bug388287.js]
 [browser_healthreport.js]
 skip-if = !healthreport || (os == 'linux' && debug)
+[browser_permissions_dialog_1.js]
+[browser_permissions_dialog_2.js]
 [browser_proxy_backup.js]
 [browser_privacypane_1.js]
 [browser_privacypane_3.js]
 [browser_privacypane_4.js]
 [browser_privacypane_5.js]
 [browser_privacypane_8.js]
 skip-if = e10s # Bug ?????? -  "leaked until shutdown [nsGlobalWindow #99 about:preferences]"
 [browser_sanitizeOnShutdown_prefLocked.js]
diff --git a/browser/components/preferences/in-content/tests/browser_permissions_dialog_1.js b/browser/components/preferences/in-content/tests/browser_permissions_dialog_1.js
new file mode 100644
--- /dev/null
+++ b/browser/components/preferences/in-content/tests/browser_permissions_dialog_1.js
@@ -0,0 +1,56 @@
+/* Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Test that the permissions dialog opens and supports basic functionality.
+// This isn't confirming that the actual permissions (for example, cookie)
+// exceptions) work as expected.
+
+add_task(function*() {
+  let content = yield open_preferences();
+
+  let {dialog, closePromise} = yield getDialog();
+  is (dialog.document.getElementById("permissionsText").textContent,
+      "Test Intro", "The intro has been set correctly");
+
+  info ("Waiting for the DOMTitleChanged event");
+  yield once(gBrowser, "DOMTitleChanged");
+  is (content.document.getElementById("dialogTitle").textContent,
+      "Test Title", "The title has been set correctly");
+
+  dialog.close();
+  yield closePromise;
+
+  gBrowser.removeCurrentTab();
+});
+
+function* getDialog() {
+  let url = "chrome://browser/content/preferences/permissions.xul";
+  let opts = { blockVisible   : true,
+               sessionVisible : true,
+               allowVisible   : true,
+               prefilledHost  : "",
+               permissionType : "cookie",
+               windowTitle    : "Test Title",
+               introText      : "Test Intro" };
+  let deferredClose = Promise.defer();
+  let closePromise = deferredClose.promise;
+  let closeCallback = aEvent => dialogClosingCallback(deferredClose, aEvent);
+  let dialog = yield openAndLoadSubDialog(url, null, opts, closeCallback);
+
+  return {dialog, closePromise};
+}
+
+function dialogClosingCallback(aPromise, aEvent) {
+  // Wait for the close handler to unload the page
+  waitForEvent(content.gSubDialog._frame, "load", 4000).then((aEvt) => {
+    info("Load event happened: " + !(aEvt instanceof Error));
+    is_element_hidden(content.gSubDialog._overlay, "Overlay is not visible");
+    is(content.gSubDialog._frame.getAttribute("style"), "",
+       "Check that inline styles were cleared");
+    is(content.gSubDialog._frame.contentWindow.location.toString(), "about:blank",
+      "Check the sub-dialog was unloaded");
+    aPromise.resolve();
+  }, Cu.reportError);
+}
diff --git a/browser/components/preferences/in-content/tests/browser_permissions_dialog_2.js b/browser/components/preferences/in-content/tests/browser_permissions_dialog_2.js
new file mode 100644
--- /dev/null
+++ b/browser/components/preferences/in-content/tests/browser_permissions_dialog_2.js
@@ -0,0 +1,176 @@
+/* Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Test that the permissions dialog opens and supports basic functionality.
+// This isn't confirming that the actual permissions (for example, cookie)
+// exceptions) work as expected.
+
+const TESTS = [
+  {
+    test: function(params) {
+      is(params.tree.view.rowCount, 0, "no cookie exceptions");
+      params.url.value = "test.com";
+      params.btnAllow.doCommand();
+      is(params.tree.view.rowCount, 1, "added exception shows up in treeview");
+      is(params.tree.view.getCellText(0, params.statusCol), params.allowText,
+                                      "permission text should be set correctly");
+      params.btnApplyChanges.doCommand();
+    },
+    observances: [{ type: "cookie", host: "test.com", data: "added",
+                    capability: Ci.nsIPermissionManager.ALLOW_ACTION }],
+  },
+  {
+    test: function(params) {
+      params.url.value = "test.com";
+      params.btnBlock.doCommand();
+      is(params.tree.view.getCellText(0, params.statusCol), params.denyText,
+                                      "permission should change to deny in UI");
+      params.btnApplyChanges.doCommand();
+    },
+    observances: [{ type: "cookie", host: "test.com", data: "changed",
+                    capability: Ci.nsIPermissionManager.DENY_ACTION  }],
+  },
+  {
+    test: function(params) {
+      params.url.value = "test.com";
+      params.btnAllow.doCommand();
+      is(params.tree.view.getCellText(0, params.statusCol), params.allowText,
+                                      "permission should revert back to allow");
+      params.btnApplyChanges.doCommand();
+    },
+    observances: [{ type: "cookie", host: "test.com", data: "changed",
+                    capability: Ci.nsIPermissionManager.ALLOW_ACTION }],
+  },
+  {
+    test: function(params) {
+      params.url.value = "test.com";
+      params.btnRemove.doCommand();
+      is(params.tree.view.rowCount, 0, "exception should be removed");
+      params.btnApplyChanges.doCommand();
+    },
+    observances: [{ type: "cookie", host: "test.com", data: "deleted" }],
+  },
+  {
+    test: function(params) {
+      let uri = params.ioService.newURI("http://test.com", null, null);
+      params.pm.add(uri, "popup", Ci.nsIPermissionManager.DENY_ACTION);
+      is(params.tree.view.rowCount, 0, "adding unrelated permission should not change display");
+      params.btnApplyChanges.doCommand();
+    },
+    observances: [{ type: "popup", host: "test.com", data: "added",
+                    capability: Ci.nsIPermissionManager.DENY_ACTION }],
+    cleanUp: function(params) {
+      params.pm.remove("test.com", "popup");
+    },
+  },
+];
+
+add_task(function*() {
+  let content = yield open_preferences();
+
+  for (let i = 0; i < TESTS.length; i++) {
+    info ("Running case " + (i+1) + " of " + TESTS.length);
+    let {dialog, closePromise} = yield getDialog();
+    yield runTestCase(TESTS[i], dialog);
+    yield closePromise;
+  }
+
+  gBrowser.removeCurrentTab();
+});
+
+function runTestCase(test, dialog) {
+
+  let params = {
+    doc: dialog.document,
+    tree: dialog.document.getElementById("permissionsTree"),
+    statusCol: dialog.document.getElementById("permissionsTree").treeBoxObject.columns.getColumnAt(1),
+    url: dialog.document.getElementById("url"),
+    btnAllow: dialog.document.getElementById("btnAllow"),
+    btnBlock: dialog.document.getElementById("btnBlock"),
+    btnApplyChanges: dialog.document.getElementById("btnApplyChanges"),
+    btnRemove: dialog.document.getElementById("removePermission"),
+    pm: Cc["@mozilla.org/permissionmanager;1"]
+               .getService(Ci.nsIPermissionManager),
+    ioService: Cc["@mozilla.org/network/io-service;1"]
+                      .getService(Ci.nsIIOService),
+    allowText: dialog.gPermissionManager._getCapabilityString(
+                        Ci.nsIPermissionManager.ALLOW_ACTION),
+    denyText: dialog.gPermissionManager._getCapabilityString(
+                       Ci.nsIPermissionManager.DENY_ACTION),
+    allow: Ci.nsIPermissionManager.ALLOW_ACTION,
+    deny: Ci.nsIPermissionManager.DENY_ACTION,
+  };
+
+  return new Promise(function(resolve, reject) {
+
+    let permObserver = {
+      observe: function(aSubject, aTopic, aData) {
+        if (aTopic != "perm-changed")
+          return;
+
+        if (test.observances.length == 0) {
+          // Should fail here as we are not expecting a notification, but we don't.
+          // See bug 1063410.
+          return;
+        }
+
+        let permission = aSubject.QueryInterface(Ci.nsIPermission);
+        let expected = test.observances.shift();
+
+        is(aData, expected.data, "type of message should be the same");
+        for each (let prop in ["type", "host", "capability"]) {
+          if (expected[prop])
+            is(permission[prop], expected[prop],
+              "property: \"" + prop  + "\" should be equal");
+        }
+
+        os.removeObserver(permObserver, "perm-changed");
+
+        if (test.cleanup) {
+          test.cleanup();
+        }
+
+        resolve();
+      },
+    };
+
+    let os = Cc["@mozilla.org/observer-service;1"]
+               .getService(Ci.nsIObserverService);
+
+    os.addObserver(permObserver, "perm-changed", false);
+
+    test.test(params);
+  });
+}
+
+function* getDialog() {
+  let url = "chrome://browser/content/preferences/permissions.xul";
+  let opts = { blockVisible   : true,
+               sessionVisible : true,
+               allowVisible   : true,
+               prefilledHost  : "",
+               permissionType : "cookie",
+               windowTitle    : "Test Title",
+               introText      : "Test Intro" };
+  let deferredClose = Promise.defer();
+  let closePromise = deferredClose.promise;
+  let closeCallback = aEvent => dialogClosingCallback(deferredClose, aEvent);
+  let dialog = yield openAndLoadSubDialog(url, null, opts, closeCallback);
+
+  return {dialog, closePromise};
+}
+
+function dialogClosingCallback(aPromise, aEvent) {
+  // Wait for the close handler to unload the page
+  waitForEvent(content.gSubDialog._frame, "load", 4000).then((aEvt) => {
+    info("Load event happened: " + !(aEvt instanceof Error));
+    is_element_hidden(content.gSubDialog._overlay, "Overlay is not visible");
+    is(content.gSubDialog._frame.getAttribute("style"), "",
+       "Check that inline styles were cleared");
+    is(content.gSubDialog._frame.contentWindow.location.toString(), "about:blank",
+      "Check the sub-dialog was unloaded");
+    aPromise.resolve();
+  }, Cu.reportError);
+}
diff --git a/browser/components/preferences/in-content/tests/head.js b/browser/components/preferences/in-content/tests/head.js
--- a/browser/components/preferences/in-content/tests/head.js
+++ b/browser/components/preferences/in-content/tests/head.js
@@ -1,12 +1,13 @@
 /* Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/ */
 
 Components.utils.import("resource://gre/modules/Promise.jsm");
+const {console} = Cu.import("resource://gre/modules/devtools/Console.jsm", {});
 
 const kDefaultWait = 2000;
 
 function is_hidden(aElement) {
   var style = aElement.ownerDocument.defaultView.getComputedStyle(aElement, "");
   if (style.display == "none")
     return true;
   if (style.visibility != "visible")
@@ -25,22 +26,27 @@ function is_element_visible(aElement, aM
 }
 
 function is_element_hidden(aElement, aMsg) {
   isnot(aElement, null, "Element should not be null, when checking visibility");
   ok(is_hidden(aElement), aMsg);
 }
 
 function open_preferences(aCallback) {
-  gBrowser.selectedTab = gBrowser.addTab("about:preferences");
-  let newTabBrowser = gBrowser.getBrowserForTab(gBrowser.selectedTab);
-  newTabBrowser.addEventListener("Initialized", function () {
-    newTabBrowser.removeEventListener("Initialized", arguments.callee, true);
-    aCallback(gBrowser.contentWindow);
-  }, true);
+  return new Promise((resolve, reject) => {
+    gBrowser.selectedTab = gBrowser.addTab("about:preferences");
+    let newTabBrowser = gBrowser.getBrowserForTab(gBrowser.selectedTab);
+    newTabBrowser.addEventListener("Initialized", function () {
+      newTabBrowser.removeEventListener("Initialized", arguments.callee, true);
+      if (aCallback) {
+        aCallback(gBrowser.contentWindow);
+      }
+      resolve(gBrowser.contentWindow);
+    }, true);
+  });
 }
 
 function openAndLoadSubDialog(aURL, aFeatures = null, aParams = null, aClosingCallback = null) {
   let promise = promiseLoadSubDialog(aURL);
   content.gSubDialog.open(aURL, aFeatures, aParams, aClosingCallback);
   return promise;
 }
 
@@ -158,8 +164,40 @@ function waitForCondition(aConditionFn, 
     }
     function tryAgain() {
       setTimeout(tryNow, aCheckInterval);
     }
     let tries = 0;
     tryAgain();
   });
 }
+
+/**
+ * Wait for eventName on target.
+ * @param {Object} target An observable object that either supports on/off or
+ * addEventListener/removeEventListener
+ * @param {String} eventName
+ * @param {Boolean} useCapture Optional, for addEventListener/removeEventListener
+ * @return A promise that resolves when the event has been handled
+ */
+function once(target, eventName, useCapture=false) {
+  info("Waiting for event: '" + eventName + "' on " + target + ".");
+
+  let deferred = Promise.defer();
+
+  for (let [add, remove] of [
+    ["addEventListener", "removeEventListener"],
+    ["addListener", "removeListener"],
+    ["on", "off"]
+  ]) {
+    if ((add in target) && (remove in target)) {
+      target[add](eventName, function onEvent(...aArgs) {
+        info("Got event: '" + eventName + "' on " + target + ".");
+        target[remove](eventName, onEvent, useCapture);
+        deferred.resolve.apply(deferred, aArgs);
+      }, useCapture);
+      break;
+    }
+  }
+
+  return deferred.promise;
+}
+
diff --git a/browser/components/preferences/in-content/tests/privacypane_tests_perwindow.js b/browser/components/preferences/in-content/tests/privacypane_tests_perwindow.js
--- a/browser/components/preferences/in-content/tests/privacypane_tests_perwindow.js
+++ b/browser/components/preferences/in-content/tests/privacypane_tests_perwindow.js
@@ -65,16 +65,18 @@ function test_dependent_elements(win) {
     win.document.getElementById("acceptThirdPartyLabel"),
     win.document.getElementById("acceptThirdPartyMenu")
   ];
   independents.forEach(function(control) {
     ok(control, "the independent controls should exist");
   });
   let cookieexceptions = win.document.getElementById("cookieExceptions");
   ok(cookieexceptions, "the cookie exceptions button should exist");
+  let trackingprotectionexceptions = win.document.getElementById("trackingProtectionExceptions");
+  ok(trackingprotectionexceptions, "the tracking protection exceptions button should exist");
   let keepuntil = win.document.getElementById("keepCookiesUntil");
   ok(keepuntil, "the keep cookies until menulist should exist");
   let alwaysclear = win.document.getElementById("alwaysClear");
   ok(alwaysclear, "the clear data on close checkbox should exist");
   let rememberhistory = win.document.getElementById("rememberHistory");
   ok(rememberhistory, "the remember history checkbox should exist");
   let rememberforms = win.document.getElementById("rememberForms");
   ok(rememberforms, "the remember forms checkbox should exist");
diff --git a/browser/components/preferences/privacy.js b/browser/components/preferences/privacy.js
--- a/browser/components/preferences/privacy.js
+++ b/browser/components/preferences/privacy.js
@@ -434,16 +434,34 @@ var gPrivacyPane = {
       case "never":
         return 1;
       default:
         return undefined;
     }
   },
 
   /**
+   * Displays fine-grained, per-site preferences for tracking protection.
+   */
+  showTrackingProtectionExceptions: function ()
+  {
+    var bundlePreferences = document.getElementById("bundlePreferences");
+    var params = { blockVisible   : false,
+                   sessionVisible : false,
+                   allowVisible   : true,
+                   prefilledHost  : "",
+                   permissionType : "trackingprotection",
+                   windowTitle    : bundlePreferences.getString("trackingprojectionpermissionstitle"),
+                   introText      : bundlePreferences.getString("trackingprojectionpermissionstext") };
+    document.documentElement.openWindow("Browser:Permissions",
+                                        "chrome://browser/content/preferences/permissions.xul",
+                                        "resizable", params);
+  },
+
+  /**
    * Displays fine-grained, per-site preferences for cookies.
    */
   showCookieExceptions: function ()
   {
     var bundlePreferences = document.getElementById("bundlePreferences");
     var params = { blockVisible   : true, 
                    sessionVisible : true, 
                    allowVisible   : true, 
diff --git a/browser/components/preferences/privacy.xul b/browser/components/preferences/privacy.xul
--- a/browser/components/preferences/privacy.xul
+++ b/browser/components/preferences/privacy.xul
@@ -29,16 +29,19 @@
       <preference id="privacy.trackingprotection.enabled"
                   name="privacy.trackingprotection.enabled"
                   type="bool"/>
 
       <!-- XXX button prefs -->
       <preference id="pref.privacy.disable_button.cookie_exceptions"
                   name="pref.privacy.disable_button.cookie_exceptions"
                   type="bool"/>
+      <preference id="pref.privacy.disable_button.trackingprotection_exceptions"
+                  name="pref.privacy.disable_button.trackingprotection_exceptions"
+                  type="bool"/>
       <preference id="pref.privacy.disable_button.view_cookies"
                   name="pref.privacy.disable_button.view_cookies"
                   type="bool"/>
 
       <!-- Location Bar -->
       <preference id="browser.urlbar.autocomplete.enabled"
                   name="browser.urlbar.autocomplete.enabled"
                   type="bool"/>
@@ -95,16 +98,21 @@
       <vbox id="trackingprotectionbox" hidden="true">
         <hbox align="center">
           <checkbox id="trackingProtection"
                     preference="privacy.trackingprotection.enabled"
                     accesskey="&trackingProtection.accesskey;"
                     label="&trackingProtection.label;" />
           <image id="trackingProtectionImage"
                  src="chrome://browser/skin/bad-content-blocked-16.png"/>
+          <button id="trackingProtectionExceptions"
+                  oncommand="gPrivacyPane.showTrackingProtectionExceptions();"
+                  label="&trackingProtectionExceptions.label;"
+                  accesskey="&trackingProtectionExceptions.accesskey;"
+                  preference="pref.privacy.disable_button.trackingprotection_exceptions"/>
         </hbox>
         <hbox align="center"
               class="indent">
           <label id="trackingProtectionLearnMore"
                  class="text-link"
                  value="&trackingProtectionLearnMore.label;"/>
         </hbox>
       </vbox>
diff --git a/browser/components/preferences/tests/privacypane_tests_perwindow.js b/browser/components/preferences/tests/privacypane_tests_perwindow.js
--- a/browser/components/preferences/tests/privacypane_tests_perwindow.js
+++ b/browser/components/preferences/tests/privacypane_tests_perwindow.js
@@ -72,16 +72,18 @@ function test_dependent_elements(win) {
     win.document.getElementById("acceptThirdPartyLabel"),
     win.document.getElementById("acceptThirdPartyMenu")
   ];
   independents.forEach(function(control) {
     ok(control, "the independent controls should exist");
   });
   let cookieexceptions = win.document.getElementById("cookieExceptions");
   ok(cookieexceptions, "the cookie exceptions button should exist");
+  let trackingprotectionexceptions = win.document.getElementById("trackingProtectionExceptions");
+  ok(trackingprotectionexceptions, "the tracking protection exceptions button should exist");
   let keepuntil = win.document.getElementById("keepCookiesUntil");
   ok(keepuntil, "the keep cookies until menulist should exist");
   let alwaysclear = win.document.getElementById("alwaysClear");
   ok(alwaysclear, "the clear data on close checkbox should exist");
   let rememberhistory = win.document.getElementById("rememberHistory");
   ok(rememberhistory, "the remember history checkbox should exist");
   let rememberforms = win.document.getElementById("rememberForms");
   ok(rememberforms, "the remember forms checkbox should exist");
diff --git a/browser/locales/en-US/chrome/browser/preferences/preferences.properties b/browser/locales/en-US/chrome/browser/preferences/preferences.properties
--- a/browser/locales/en-US/chrome/browser/preferences/preferences.properties
+++ b/browser/locales/en-US/chrome/browser/preferences/preferences.properties
@@ -14,16 +14,18 @@ phishBeforeText=Selecting this option wi
 labelDefaultFont=Default (%S)
 
 veryLargeMinimumFontTitle=Large minimum font size
 veryLargeMinimumFontWarning=You have selected a very large minimum font size (more than 24 pixels). This may make it difficult or impossible to use some important configuration pages like this one.
 acceptVeryLargeMinimumFont=Keep my changes anyway
 
 #### Permissions Manager
 
+trackingprojectionpermissionstext=You can specify which websites are always allowed to use tracking protection.  Type the exact address of the site you want to allow and then click Allow.
+trackingprojectionpermissionstitle=Exceptions - Tracking Protection
 cookiepermissionstext=You can specify which websites are always or never allowed to use cookies.  Type the exact address of the site you want to manage and then click Block, Allow for Session, or Allow.
 cookiepermissionstitle=Exceptions - Cookies
 addonspermissionstext=You can specify which websites are allowed to install add-ons. Type the exact address of the site you want to allow and then click Allow.
 addons_permissions_title=Allowed Sites - Add-ons Installation
 popuppermissionstext=You can specify which websites are allowed to open pop-up windows. Type the exact address of the site you want to allow and then click Allow.
 popuppermissionstitle=Allowed Sites - Pop-ups
 invalidURI=Please enter a valid hostname
 invalidURITitle=Invalid Hostname Entered
diff --git a/browser/locales/en-US/chrome/browser/preferences/privacy.dtd b/browser/locales/en-US/chrome/browser/preferences/privacy.dtd
--- a/browser/locales/en-US/chrome/browser/preferences/privacy.dtd
+++ b/browser/locales/en-US/chrome/browser/preferences/privacy.dtd
@@ -39,16 +39,19 @@
 
 <!ENTITY  expire.label                  "they expire">
 <!ENTITY  close.label                   "I close &brandShortName;">
 <!ENTITY  askEachTime.label             "ask me every time">
 
 <!ENTITY  cookieExceptions.label        "Exceptions…">
 <!ENTITY  cookieExceptions.accesskey    "E">
 
+<!ENTITY  trackingProtectionExceptions.label        "Exceptions…">
+<!ENTITY  trackingProtectionExceptions.accesskey    "E">
+
 <!ENTITY  showCookies.label             "Show Cookies…">
 <!ENTITY  showCookies.accesskey         "S">
 
 <!ENTITY  historyHeader.pre.label          "&brandShortName; will:">
 <!ENTITY  historyHeader.pre.accesskey      "w">
 <!ENTITY  historyHeader.remember.label     "Remember history">
 <!ENTITY  historyHeader.dontremember.label "Never remember history">
 <!ENTITY  historyHeader.custom.label       "Use custom settings for history">
