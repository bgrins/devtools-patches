# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  cd5b4e44e260a2f8bdbd7f1f4505443702e48ff9
Bug 1159929 - Cache the pref value for devtools.dump.emit in event emitter;r=fitzgen

diff --git a/toolkit/devtools/event-emitter.js b/toolkit/devtools/event-emitter.js
--- a/toolkit/devtools/event-emitter.js
+++ b/toolkit/devtools/event-emitter.js
@@ -20,16 +20,26 @@
 }).call(this, function (require, exports, module) {
 
 this.EventEmitter = function EventEmitter() {};
 module.exports = EventEmitter;
 
 const { Cu, components } = require("chrome");
 const Services = require("Services");
 const promise = require("promise");
+let loggingEnabled = true;
+
+if (!isWorker) {
+  loggingEnabled = Services.prefs.getBoolPref("devtools.dump.emit");
+  Services.prefs.addObserver("devtools.dump.emit", {
+    observe: () => {
+      loggingEnabled = Services.prefs.getBoolPref("devtools.dump.emit");
+    }
+  }, false);
+}
 
 /**
  * Decorate an object with event emitter functionality.
  *
  * @param Object aObjectToDecorate
  *        Bind all public methods of EventEmitter to
  *        the aObjectToDecorate object.
  */
@@ -142,66 +152,66 @@ EventEmitter.prototype = {
           Cu.reportError(msg);
           dump(msg + "\n");
         }
       }
     }
   },
 
   logEvent: function(aEvent, args) {
-    let logging = isWorker ? true : Services.prefs.getBoolPref("devtools.dump.emit");
+    if (!loggingEnabled) {
+      return;
+    }
 
-    if (logging) {
-      let caller, func, path;
-      if (!isWorker) {
-        caller = components.stack.caller.caller;
-        func = caller.name;
-        let file = caller.filename;
-        if (file.includes(" -> ")) {
-          file = caller.filename.split(/ -> /)[1];
+    let caller, func, path;
+    if (!isWorker) {
+      caller = components.stack.caller.caller;
+      func = caller.name;
+      let file = caller.filename;
+      if (file.includes(" -> ")) {
+        file = caller.filename.split(/ -> /)[1];
+      }
+      path = file + ":" + caller.lineNumber;
+    }
+
+    let argOut = "(";
+    if (args.length === 1) {
+      argOut += aEvent;
+    }
+
+    let out = "EMITTING: ";
+
+    // We need this try / catch to prevent any dead object errors.
+    try {
+      for (let i = 1; i < args.length; i++) {
+        if (i === 1) {
+          argOut = "(" + aEvent + ", ";
+        } else {
+          argOut += ", ";
         }
-        path = file + ":" + caller.lineNumber;
+
+        let arg = args[i];
+        argOut += arg;
+
+        if (arg && arg.nodeName) {
+          argOut += " (" + arg.nodeName;
+          if (arg.id) {
+            argOut += "#" + arg.id;
+          }
+          if (arg.className) {
+            argOut += "." + arg.className;
+          }
+          argOut += ")";
+        }
       }
+    } catch(e) {
+      // Object is dead so the toolbox is most likely shutting down,
+      // do nothing.
+    }
 
-      let argOut = "(";
-      if (args.length === 1) {
-        argOut += aEvent;
-      }
+    argOut += ")";
+    out += "emit" + argOut + " from " + func + "() -> " + path + "\n";
 
-      let out = "EMITTING: ";
-
-      // We need this try / catch to prevent any dead object errors.
-      try {
-        for (let i = 1; i < args.length; i++) {
-          if (i === 1) {
-            argOut = "(" + aEvent + ", ";
-          } else {
-            argOut += ", ";
-          }
-
-          let arg = args[i];
-          argOut += arg;
-
-          if (arg && arg.nodeName) {
-            argOut += " (" + arg.nodeName;
-            if (arg.id) {
-              argOut += "#" + arg.id;
-            }
-            if (arg.className) {
-              argOut += "." + arg.className;
-            }
-            argOut += ")";
-          }
-        }
-      } catch(e) {
-        // Object is dead so the toolbox is most likely shutting down,
-        // do nothing.
-      }
-
-      argOut += ")";
-      out += "emit" + argOut + " from " + func + "() -> " + path + "\n";
-
-      dump(out);
-    }
+    dump(out);
   },
 };
 
 });
