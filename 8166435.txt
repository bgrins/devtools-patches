diff --git a/browser/devtools/styleinspector/rule-view.js b/browser/devtools/styleinspector/rule-view.js
--- a/browser/devtools/styleinspector/rule-view.js
+++ b/browser/devtools/styleinspector/rule-view.js
@@ -638,17 +638,19 @@ Rule.prototype = {
 
       this.elementStyle.markOverriddenAll();
 
       if (promise === this._applyingModifications) {
         this._applyingModifications = null;
       }
 
       this.elementStyle._changed();
-    }).then(null, promiseWarn);
+    }).then(() => {
+      this.editor.ruleView.refreshPanel();
+    }).catch(promiseWarn);
 
     this._applyingModifications = promise;
     return promise;
   },
 
   /**
    * Renames a property.
    *
diff --git a/toolkit/devtools/server/protocol.js b/toolkit/devtools/server/protocol.js
--- a/toolkit/devtools/server/protocol.js
+++ b/toolkit/devtools/server/protocol.js
@@ -1,16 +1,17 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 let Services = require("Services");
-let promise = require("devtools/toolkit/deprecated-sync-thenables");
+let promise = require("promise");
+// let promise = require("devtools/toolkit/deprecated-sync-thenables");
 let {Class} = require("sdk/core/heritage");
 let {EventTarget} = require("sdk/event/target");
 let events = require("sdk/event/core");
 let object = require("sdk/util/object");
 
 exports.emit = events.emit;
 
 // Waiting for promise.done() to be added, see bug 851321
diff --git a/toolkit/modules/Promise-backend.js b/toolkit/modules/Promise-backend.js
--- a/toolkit/modules/Promise-backend.js
+++ b/toolkit/modules/Promise-backend.js
@@ -338,16 +338,18 @@ this.Promise = function Promise(aExecuto
      * a rejection callback, this contains an array
      * - {string} id An id for use with |PendingErrors|;
      * - {FinalizationWitness} witness A witness broadcasting |id| on
      *   notification "promise-finalization-witness".
      */
     witness: undefined
   }});
 
+  this.stack = new Error().stack;
+
   Object.seal(this);
 
   let resolve = PromiseWalker.completePromise
                              .bind(PromiseWalker, this, STATUS_RESOLVED);
   let reject = PromiseWalker.completePromise
                             .bind(PromiseWalker, this, STATUS_REJECTED);
 
   try {
@@ -670,16 +672,18 @@ this.PromiseWalker = {
     // Change the promise status and schedule our handlers for processing.
     aPromise[N_INTERNALS].status = aStatus;
     aPromise[N_INTERNALS].value = aValue;
     if (aPromise[N_INTERNALS].handlers.length > 0) {
       this.schedulePromise(aPromise);
     } else if (aStatus == STATUS_REJECTED) {
       // This is a rejection and the promise is the last in the chain.
       // For the time being we therefore have an uncaught error.
+      dump(">>>>>>>>>> UNCAUGHT PROMISE REJECTION <<<<<<<<<<\n" + aPromise.stack + "\n");
+
       let id = PendingErrors.register(aValue);
       let witness =
           FinalizationWitnessService.make("promise-finalization-witness", id);
       aPromise[N_INTERNALS].witness = [id, witness];
     }
   },
 
   /**
