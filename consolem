# HG changeset patch
# Parent c95bb70fac9875b276289d206bd737204e2aaba3
# User Brian Grinstead <bgrinstead@mozilla.com>
Add new console method

diff --git a/browser/devtools/webconsole/webconsole.js b/browser/devtools/webconsole/webconsole.js
--- a/browser/devtools/webconsole/webconsole.js
+++ b/browser/devtools/webconsole/webconsole.js
@@ -121,16 +121,17 @@ const LEVELS = {
   error: SEVERITY_ERROR,
   exception: SEVERITY_ERROR,
   assert: SEVERITY_ERROR,
   warn: SEVERITY_WARNING,
   info: SEVERITY_INFO,
   log: SEVERITY_LOG,
   trace: SEVERITY_LOG,
   table: SEVERITY_LOG,
+  mihai: SEVERITY_LOG,
   debug: SEVERITY_LOG,
   dir: SEVERITY_LOG,
   group: SEVERITY_LOG,
   groupCollapsed: SEVERITY_LOG,
   groupEnd: SEVERITY_LOG,
   time: SEVERITY_LOG,
   timeEnd: SEVERITY_LOG,
   count: SEVERITY_LOG
@@ -1231,16 +1232,22 @@ WebConsoleFrame.prototype = {
         node = msg.init(this.output).render().element;
         break;
       }
       case "table": {
         let msg = new Messages.ConsoleTable(aMessage);
         node = msg.init(this.output).render().element;
         break;
       }
+      case "mihai": {
+        aMessage["arguments"] = ["https://en.wikipedia.org/wiki/Futurama"];
+        let msg = new Messages.ConsoleGeneric(aMessage);
+        node = msg.init(this.output).render().element;
+        break;
+      }
       case "trace": {
         let msg = new Messages.ConsoleTrace(aMessage);
         node = msg.init(this.output).render().element;
         break;
       }
       case "dir": {
         body = { arguments: args };
         let clipboardArray = [];
diff --git a/dom/base/Console.cpp b/dom/base/Console.cpp
--- a/dom/base/Console.cpp
+++ b/dom/base/Console.cpp
@@ -708,16 +708,17 @@ Console::WrapObject(JSContext* aCx)
 
 METHOD(Log, "log")
 METHOD(Info, "info")
 METHOD(Warn, "warn")
 METHOD(Error, "error")
 METHOD(Exception, "exception")
 METHOD(Debug, "debug")
 METHOD(Table, "table")
+METHOD(Mihai, "mihai")
 
 void
 Console::Trace(JSContext* aCx)
 {
   const Sequence<JS::Value> data;
   Method(aCx, MethodTrace, NS_LITERAL_STRING("trace"), data);
 }
 
@@ -824,16 +825,17 @@ Console::Assert(JSContext* aCx, bool aCo
 {
   if (!aCondition) {
     Method(aCx, MethodAssert, NS_LITERAL_STRING("assert"), aData);
   }
 }
 
 METHOD(Count, "count")
 
+
 void
 Console::__noSuchMethod__()
 {
   // Nothing to do.
 }
 
 static
 nsresult
diff --git a/dom/base/Console.h b/dom/base/Console.h
--- a/dom/base/Console.h
+++ b/dom/base/Console.h
@@ -96,16 +96,19 @@ public:
 
   void
   Assert(JSContext* aCx, bool aCondition, const Sequence<JS::Value>& aData);
 
   void
   Count(JSContext* aCx, const Sequence<JS::Value>& aData);
 
   void
+  Mihai(JSContext* aCx, const Sequence<JS::Value>& aData);
+
+  void
   __noSuchMethod__();
 
 private:
   enum MethodName
   {
     MethodLog,
     MethodInfo,
     MethodWarn,
@@ -116,17 +119,18 @@ private:
     MethodTrace,
     MethodDir,
     MethodGroup,
     MethodGroupCollapsed,
     MethodGroupEnd,
     MethodTime,
     MethodTimeEnd,
     MethodAssert,
-    MethodCount
+    MethodCount,
+    MethodMihai,
   };
 
   void
   Method(JSContext* aCx, MethodName aName, const nsAString& aString,
          const Sequence<JS::Value>& aData);
 
   void
   ProcessCallData(ConsoleCallData* aData);
diff --git a/dom/base/test/test_console.xul b/dom/base/test/test_console.xul
--- a/dom/base/test/test_console.xul
+++ b/dom/base/test/test_console.xul
@@ -11,16 +11,17 @@
   </body>
 
   <!-- test code goes here -->
   <script type="application/javascript"><![CDATA[
 
   ok("console" in window, "Console exists");
   window.console.log(42);
   ok("table" in console, "Console has the 'table' method.");
+  ok("mihai" in console, "Console has the 'mihai' method.");
   window.console = 42;
   is(window.console, 42, "Console is replacable");
 
   var frame = document.getElementById("iframe");
   ok(frame, "Frame must exist");
   frame.src="http://mochi.test:8888/tests/dom/base/test/file_empty.html";
   frame.onload = function() {
     ok("console" in frame.contentWindow, "Console exists in the iframe");
diff --git a/dom/webidl/Console.webidl b/dom/webidl/Console.webidl
--- a/dom/webidl/Console.webidl
+++ b/dom/webidl/Console.webidl
@@ -22,16 +22,17 @@ interface Console {
   void time(optional any time);
   void timeEnd(optional any time);
 
   void profile(any... data);
   void profileEnd(any... data);
 
   void assert(boolean condition, any... data);
   void count(any... data);
+  void mihai(any... data);
 
   void ___noSuchMethod__();
 };
 
 // This is used to propagate console events to the observers.
 dictionary ConsoleEvent {
   (unsigned long or DOMString) ID;
   (unsigned long or DOMString) innerID;
