# HG changeset patch
# User Nick Fitzgerald <fitzgen@gmail.com>

Bug 1210090 - Create DAMP tests for saving and reading heap snapshots; r=bgrins,jmaher

diff --git a/testing/talos/.gitignore b/testing/talos/.gitignore
new file mode 100644
index 0000000..0f5592a
--- /dev/null
+++ b/testing/talos/.gitignore
@@ -0,0 +1,8 @@
+.Python
+bin/
+include/
+lib/
+talos.egg-info
+talos/tests/tp5n.zip
+talos/tests/tp5n
+talos/tests/devtools/damp.manifest.develop
diff --git a/testing/talos/talos/tests/devtools/addon/content/damp.html b/testing/talos/talos/tests/devtools/addon/content/damp.html
index e81bd1c..535231c 100644
--- a/testing/talos/talos/tests/devtools/addon/content/damp.html
+++ b/testing/talos/talos/tests/devtools/addon/content/damp.html
@@ -11,26 +11,28 @@ var defaultConfig = {
   rest: 100,
   subtests: {
     webconsoleOpen: true,
     inspectorOpen: true,
     debuggerOpen: true,
     styleEditorOpen: true,
     performanceOpen: true,
     netmonitorOpen: true,
+    saveAndReadHeapSnapshot: true,
   }
 };
 
 var testsInfo = {
   webconsoleOpen: "Measure open/close toolbox on webconsole panel",
   inspectorOpen: "Measure open/close toolbox on inspector panel",
   debuggerOpen: "Measure open/close toolbox on debugger panel",
   styleEditorOpen: "Measure open/close toolbox on style editor panel",
   performanceOpen: "Measure open/close toolbox on performance panel",
-  netmonitorOpen: "Measure open/close toolbox on network monitor panel"
+  netmonitorOpen: "Measure open/close toolbox on network monitor panel",
+  saveAndReadHeapSnapshot: "Measure open/close toolbox on memory panel and save/read heap snapshot",
 };
 
 function updateConfig() {
   config = {subtests: []};
   for (var test in defaultConfig.subtests) {
     if ($("subtest-" + test).checked) {
       config.subtests.push(test);
     }
diff --git a/testing/talos/talos/tests/devtools/addon/content/damp.js b/testing/talos/talos/tests/devtools/addon/content/damp.js
index 08645c0..d991417 100644
--- a/testing/talos/talos/tests/devtools/addon/content/damp.js
+++ b/testing/talos/talos/tests/devtools/addon/content/damp.js
@@ -1,19 +1,24 @@
-
 Components.utils.import("resource:///modules/devtools/client/framework/gDevTools.jsm");
 const {devtools} =
   Components.utils.import("resource://gre/modules/devtools/shared/Loader.jsm", {});
 const { getActiveTab } = devtools.require("sdk/tabs/utils");
 const { getMostRecentBrowserWindow } = devtools.require("sdk/window/utils");
+const { ThreadSafeChromeUtils } = devtools.require("ThreadSafeChromeUtils");
 
 const SIMPLE_URL = "chrome://damp/content/pages/simple.html";
 const COMPLICATED_URL = "http://localhost/tests/tp5n/bild.de/www.bild.de/index.html";
 
 function Damp() {
+  // Path to the temp file where the heap snapshot file is saved. Set by
+  // saveHeapSnapshot and read by readHeapSnapshot.
+  this._heapSnapshotFilePath = null;
+  // HeapSnapshot instance. Set by readHeapSnapshot, used by takeCensus.
+  this._snapshot = null;
 }
 
 Damp.prototype = {
 
   addTab: function(url) {
     return new Promise((resolve, reject) => {
       let tab = this._win.gBrowser.selectedTab = this._win.gBrowser.addTab(url);
       let browser = tab.linkedBrowser;
@@ -64,23 +69,91 @@ Damp.prototype = {
     let startRecordTimestamp = performance.now();
     let closePromise = gDevTools.closeToolbox(target);
     return closePromise.then(() => {
       let stopRecordTimestamp = performance.now();
       this._results.push({name: name + ".close.DAMP", value: stopRecordTimestamp - startRecordTimestamp});
     });
   },
 
+  saveHeapSnapshot: function(label) {
+    let tab = getActiveTab(getMostRecentBrowserWindow());
+    let target = devtools.TargetFactory.forTab(tab);
+    let toolbox = devtools.getToolbox(target);
+    let panel = toolbox.getCurrentPanel();
+    let memoryFront = panel.panelWin.gFront;
+
+    let start = performance.now();
+    return memoryFront.saveHeapSnapshot().then(filePath => {
+      this._heapSnapshotFilePath = filePath;
+      let end = performance.now();
+      this._results.push({
+        name: label + ".saveHeapSnapshot",
+        value: end - start
+      });
+    });
+  },
+
+  readHeapSnapshot: function(label) {
+    let start = performance.now();
+    this._snapshot = ThreadSafeChromeUtils.readHeapSnapshot(this._heapSnapshotFilePath);
+    let end = performance.now();
+    this._results.push({
+      name: label + ".readHeapSnapshot",
+      value: end - start
+    });
+    return Promise.resolve();
+  },
+
+  takeCensus: function(label) {
+    let start = performance.now();
+
+    this._snapshot.takeCensus({
+      breakdown: {
+        by: "coarseType",
+        objects: {
+          by: "objectClass",
+          then: { by: "count", bytes: true, count: true },
+          other: { by: "count", bytes: true, count: true }
+        },
+        strings: {
+          by: "internalType",
+          then: { by: "count", bytes: true, count: true }
+        },
+        scripts: {
+          by: "internalType",
+          then: { by: "count", bytes: true, count: true }
+        },
+        other: {
+          by: "internalType",
+          then: { by: "count", bytes: true, count: true }
+        }
+      }
+    });
+
+    let end = performance.now();
+
+    this._results.push({
+      name: label + ".takeCensus",
+      value: end - start
+    });
+
+    return Promise.resolve();
+  },
+
   _startTest: function() {
 
     var self = this;
     var openToolbox = this.openToolbox.bind(this);
     var closeToolbox = this.closeToolbox.bind(this);
     var reloadPage = this.reloadPage.bind(this);
     var next = this._nextCommand.bind(this);
+    var saveHeapSnapshot = this.saveHeapSnapshot.bind(this);
+    var readHeapSnapshot = this.readHeapSnapshot.bind(this);
+    var takeCensus = this.takeCensus.bind(this);
     var config = this._config;
     var rest = config.rest; // How long to wait in between opening the tab and starting the test.
 
     let tests = getTestsForURL(SIMPLE_URL, "simple");
     tests = tests.concat(getTestsForURL(COMPLICATED_URL, "complicated"));
 
     this._doSequence(tests, this._doneInternal);
 
@@ -130,16 +203,24 @@ Damp.prototype = {
         ],
 
         netmonitorOpen: [
           () => { openToolbox(label + ".netmonitor", "netmonitor").then(next); },
           () => { reloadPage(label + ".netmonitor").then(next); },
           () => { closeToolbox(label + ".netmonitor").then(next); },
         ],
 
+        saveAndReadHeapSnapshot: [
+          () => { openToolbox(label + ".memory", "memory").then(next); },
+          () => { reloadPage(label + ".memory").then(next); },
+          () => { saveHeapSnapshot(label).then(next); },
+          () => { readHeapSnapshot(label).then(next); },
+          () => { takeCensus(label).then(next); },
+          () => { closeToolbox(label + ".memory").then(next); },
+        ]
       };
 
       // Construct the sequence array: config.repeat times config.subtests,
       // where each subtest implicitly starts with init.
       sequenceArray = [];
       for (var i in config.subtests) {
         for (var r = 0; r < config.repeat; r++) {
           sequenceArray = sequenceArray.concat(init);

