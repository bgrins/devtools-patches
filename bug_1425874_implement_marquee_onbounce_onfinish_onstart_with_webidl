# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1541625583 28800
#      Wed Nov 07 13:19:43 2018 -0800
# Node ID caa6860daa4876c816b543a8e916f6aa10bc191b
# Parent  0a7de8afed8c2e6897c72ffde6b70bb321a660e0
Bug 1425874 - Implement marquee onbounce, onfinish, onstart with WebIDL

Differential Revision: https://phabricator.services.mozilla.com/D9970

diff --git a/dom/base/nsContentUtils.h b/dom/base/nsContentUtils.h
--- a/dom/base/nsContentUtils.h
+++ b/dom/base/nsContentUtils.h
@@ -172,16 +172,17 @@ const nsCString& EmptyCString();
 enum EventNameType {
   EventNameType_None = 0x0000,
   EventNameType_HTML = 0x0001,
   EventNameType_XUL = 0x0002,
   EventNameType_SVGGraphic = 0x0004, // svg graphic elements
   EventNameType_SVGSVG = 0x0008, // the svg element
   EventNameType_SMIL = 0x0010, // smil elements
   EventNameType_HTMLBodyOrFramesetOnly = 0x0020,
+  EventNameType_HTMLMarqueeOnly = 0x0040,
 
   EventNameType_HTMLXUL = 0x0003,
   EventNameType_All = 0xFFFF
 };
 
 struct EventNameMapping
 {
   // This holds pointers to nsGkAtoms members, and is therefore safe as a
diff --git a/dom/events/EventNameList.h b/dom/events/EventNameList.h
--- a/dom/events/EventNameList.h
+++ b/dom/events/EventNameList.h
@@ -147,16 +147,20 @@
 #define BEFOREUNLOAD_EVENT WINDOW_EVENT
 #define DEFINED_BEFOREUNLOAD_EVENT
 #endif /* BEFOREUNLOAD_EVENT */
 
 EVENT(abort,
       eImageAbort,
       EventNameType_All,
       eBasicEventClass)
+EVENT(bounce,
+      eMarqueeBounce,
+      EventNameType_HTMLMarqueeOnly,
+      eBasicEventClass)
 EVENT(canplay,
       eCanPlay,
       EventNameType_HTML,
       eBasicEventClass)
 EVENT(canplaythrough,
       eCanPlayThrough,
       EventNameType_HTML,
       eBasicEventClass)
@@ -237,16 +241,20 @@ EVENT(durationchange,
 EVENT(emptied,
       eEmptied,
       EventNameType_HTML,
       eBasicEventClass)
 EVENT(ended,
       eEnded,
       EventNameType_HTML,
       eBasicEventClass)
+EVENT(finish,
+      eMarqueeFinish,
+      EventNameType_HTMLMarqueeOnly,
+      eBasicEventClass)
 EVENT(fullscreenchange,
       eFullscreenChange,
       EventNameType_HTML,
       eBasicEventClass)
 EVENT(fullscreenerror,
       eFullscreenError,
       EventNameType_HTML,
       eBasicEventClass)
@@ -436,16 +444,20 @@ EVENT(select,
 EVENT(show,
       eShow,
       EventNameType_HTML,
       eBasicEventClass)
 EVENT(stalled,
       eStalled,
       EventNameType_HTML,
       eBasicEventClass)
+EVENT(start,
+      eMarqueeStart,
+      EventNameType_HTMLMarqueeOnly,
+      eBasicEventClass)
 EVENT(submit,
       eFormSubmit,
       EventNameType_HTMLXUL,
       eBasicEventClass)
 EVENT(suspend,
       eSuspend,
       EventNameType_HTML,
       eBasicEventClass)
diff --git a/dom/html/HTMLMarqueeElement.cpp b/dom/html/HTMLMarqueeElement.cpp
--- a/dom/html/HTMLMarqueeElement.cpp
+++ b/dom/html/HTMLMarqueeElement.cpp
@@ -44,16 +44,24 @@ static const nsAttrValue::EnumTable kDir
   { "up", 3 },
   { "down", 4 },
   { nullptr, 0 }
 };
 
 // Default direction value is "left".
 static const nsAttrValue::EnumTable* kDefaultDirection = &kDirectionTable[0];
 
+bool
+HTMLMarqueeElement::IsEventAttributeNameInternal(nsAtom *aName)
+{
+  return nsContentUtils::IsEventAttributeName(aName,
+                                              EventNameType_HTML |
+                                              EventNameType_HTMLMarqueeOnly);
+}
+
 JSObject*
 HTMLMarqueeElement::WrapNode(JSContext *aCx, JS::Handle<JSObject*> aGivenProto)
 {
   return dom::HTMLMarqueeElement_Binding::Wrap(aCx, this, aGivenProto);
 }
 
 void
 HTMLMarqueeElement::SetStartStopCallback(FunctionStringCallback* aCallback)
@@ -134,16 +142,52 @@ HTMLMarqueeElement::IsAttributeMapped(co
 }
 
 nsMapRuleToAttributesFunc
 HTMLMarqueeElement::GetAttributeMappingFunction() const
 {
   return &MapAttributesIntoRule;
 }
 
+EventHandlerNonNull*
+HTMLMarqueeElement::GetOnbounce()
+{
+  return EventTarget::GetEventHandler(nsGkAtoms::onbounce);
+}
+
+void
+HTMLMarqueeElement::SetOnbounce(EventHandlerNonNull* aCallback)
+{
+  EventTarget::SetEventHandler(nsGkAtoms::onbounce, aCallback);
+}
+
+EventHandlerNonNull*
+HTMLMarqueeElement::GetOnfinish()
+{
+  return EventTarget::GetEventHandler(nsGkAtoms::onfinish);
+}
+
+void
+HTMLMarqueeElement::SetOnfinish(EventHandlerNonNull* aCallback)
+{
+  EventTarget::SetEventHandler(nsGkAtoms::onfinish, aCallback);
+}
+
+EventHandlerNonNull*
+HTMLMarqueeElement::GetOnstart()
+{
+  return EventTarget::GetEventHandler(nsGkAtoms::onstart);
+}
+
+void
+HTMLMarqueeElement::SetOnstart(EventHandlerNonNull* aCallback)
+{
+  EventTarget::SetEventHandler(nsGkAtoms::onstart, aCallback);
+}
+
 void
 HTMLMarqueeElement::Start()
 {
   if (mStartStopCallback) {
     mStartStopCallback->Call(NS_LITERAL_STRING("start"));
   }
 }
 
diff --git a/dom/html/HTMLMarqueeElement.h b/dom/html/HTMLMarqueeElement.h
--- a/dom/html/HTMLMarqueeElement.h
+++ b/dom/html/HTMLMarqueeElement.h
@@ -26,16 +26,18 @@ public:
     : nsGenericHTMLElement(std::move(aNodeInfo))
   {
   }
 
   static const int kDefaultLoop = -1;
   static const int kDefaultScrollAmount = 6;
   static const int kDefaultScrollDelayMS = 85;
 
+  virtual bool IsEventAttributeNameInternal(nsAtom *aName) override;
+
   void SetStartStopCallback(FunctionStringCallback* aCallback);
 
   void GetBehavior(nsAString& aValue);
   void SetBehavior(const nsAString& aValue, ErrorResult& aError)
   {
     SetHTMLAttr(nsGkAtoms::behavior, aValue, aError);
   }
 
@@ -120,16 +122,25 @@ public:
   {
     return GetIntAttr(nsGkAtoms::vspace, 0);
   }
   void SetVspace(uint32_t aValue, ErrorResult& aError)
   {
     SetUnsignedIntAttr(nsGkAtoms::vspace, aValue, 0, aError);
   }
 
+  mozilla::dom::EventHandlerNonNull* GetOnbounce();
+  void SetOnbounce(mozilla::dom::EventHandlerNonNull* aCallback);
+
+  mozilla::dom::EventHandlerNonNull* GetOnfinish();
+  void SetOnfinish(mozilla::dom::EventHandlerNonNull* aCallback);
+
+  mozilla::dom::EventHandlerNonNull* GetOnstart();
+  void SetOnstart(mozilla::dom::EventHandlerNonNull* aCallback);
+
   void Start();
   void Stop();
 
   bool ParseAttribute(int32_t aNamespaceID,
                               nsAtom* aAttribute,
                               const nsAString& aValue,
                               nsIPrincipal* aMaybeScriptedPrincipal,
                               nsAttrValue& aResult) override;
diff --git a/dom/webidl/HTMLMarqueeElement.webidl b/dom/webidl/HTMLMarqueeElement.webidl
--- a/dom/webidl/HTMLMarqueeElement.webidl
+++ b/dom/webidl/HTMLMarqueeElement.webidl
@@ -21,19 +21,19 @@ interface HTMLMarqueeElement : HTMLEleme
   [CEReactions, SetterThrows] attribute unsigned long hspace;
   [CEReactions, SetterThrows] attribute long loop;
   [CEReactions, SetterThrows] attribute unsigned long scrollAmount;
   [CEReactions, SetterThrows] attribute unsigned long scrollDelay;
   [CEReactions, SetterThrows] attribute boolean trueSpeed;
   [CEReactions, SetterThrows] attribute unsigned long vspace;
   [CEReactions, SetterThrows] attribute DOMString width;
 
-  //attribute EventHandler onbounce;
-  //attribute EventHandler onfinish;
-  //attribute EventHandler onstart;
+  attribute EventHandler onbounce;
+  attribute EventHandler onfinish;
+  attribute EventHandler onstart;
 
   void start();
   void stop();
 
   [Func="IsChromeOrXBL"]
   void setStartStopCallback(FunctionStringCallback? callback);
 };
 
diff --git a/layout/style/xbl-marquee/xbl-marquee.xml b/layout/style/xbl-marquee/xbl-marquee.xml
--- a/layout/style/xbl-marquee/xbl-marquee.xml
+++ b/layout/style/xbl-marquee/xbl-marquee.xml
@@ -11,45 +11,16 @@
 
 
   <binding id="marquee" bindToUntrustedContent="true">
 
     <resources>
       <stylesheet src="chrome://xbl-marquee/content/xbl-marquee.css"/>
     </resources>
     <implementation>
-      <property name="onstart" exposeToUntrustedContent="true">
-        <getter>
-          return this.getAttribute("onstart");
-        </getter>
-        <setter>
-          this._setEventListener("start", val, true);
-          this.setAttribute("onstart", val);
-        </setter>
-      </property>
-
-      <property name="onfinish" exposeToUntrustedContent="true">
-        <getter>
-          return this.getAttribute("onfinish");
-        </getter>
-        <setter>
-          this._setEventListener("finish", val, true);
-          this.setAttribute("onfinish", val);
-        </setter>
-      </property>
-
-      <property name="onbounce" exposeToUntrustedContent="true">
-        <getter>
-          return this.getAttribute("onbounce");
-        </getter>
-        <setter>
-          this._setEventListener("bounce", val, true);
-          this.setAttribute("onbounce", val);
-        </setter>
-      </property>
 
       <property name="outerDiv"
         onget="return document.getAnonymousNodes(this)[0]"
       />
 
       <property name="innerDiv"
         onget="return document.getAnonymousElementByAttribute(this, 'class', 'innerDiv');"
       />
@@ -84,83 +55,16 @@
             clearTimeout(this.runId);
           }
 
           this.runId = 0;
         ]]>
         </body>
       </method>
 
-      <method name="_setEventListener">
-        <parameter name="aName"/>
-        <parameter name="aValue"/>
-        <parameter name="aIgnoreNextCall"/>
-        <body>
-          <![CDATA[
-          // _setEventListener is only used for setting the attribute event
-          // handlers, which we want to ignore if our document is sandboxed
-          // without the allow-scripts keyword.
-          if (document.hasScriptsBlockedBySandbox) {
-            return true;
-          }
-
-          // attribute event handlers should only be added if the
-          // document's CSP allows it.
-          if (!document.inlineScriptAllowedByCSP) {
-            return true;
-          }
-
-          if (this._ignoreNextCall) {
-            return this._ignoreNextCall = false;
-          }
-
-          if (aIgnoreNextCall) {
-            this._ignoreNextCall = true;
-          }
-
-          if (typeof this["_on" + aName] == 'function') {
-            this.removeEventListener(aName, this["_on" + aName]);
-          }
-
-          switch (typeof aValue)
-          {
-            case "function":
-              this["_on" + aName] = aValue;
-              this.addEventListener(aName, this["_on" + aName]);
-            break;
-
-            case "string":
-              if (!aIgnoreNextCall) {
-                try {
-                  // Function Xrays make this simple and safe. \o/
-                  this["_on" + aName] = new window.Function("event", aValue);
-                }
-                catch(e) {
-                  return false;
-                }
-                this.addEventListener(aName, this["_on" + aName]);
-              }
-              else {
-                this["_on" + aName] = aValue;
-              }
-            break;
-
-            case "object":
-              this["_on" + aName] = aValue;
-            break;
-
-            default:
-              this._ignoreNextCall = false;
-              throw new Error("Invalid argument for Marquee::on" + aName);
-          }
-          return true;
-          ]]>
-        </body>
-      </method>
-
       <method name="_fireEvent">
         <parameter name="aName"/>
         <parameter name="aBubbles"/>
         <parameter name="aCancelable"/>
         <body>
         <![CDATA[
           var e = document.createEvent("Events");
           e.initEvent(aName, aBubbles, aCancelable);
@@ -359,25 +263,16 @@
               target.invalidateCache = true;
               switch (attrName) {
                 case "loop":
                   target._currentLoop = target.loop;
                   break;
                 case "direction":
                   target._currentDirection = target.direction;
                   break;
-                case "onstart":
-                  target._setEventListener("start", newValue);
-                  break;
-                case "onfinish":
-                  target._setEventListener("finish", newValue);
-                  break;
-                case "onbounce":
-                  target._setEventListener("bounce", newValue);
-                  break;
               }
             }
           }
         ]]>
         </body>
       </method>
 
       <constructor>
@@ -401,25 +296,21 @@
           this.runId = 0;
           this.originalHeight = 0;
           this.invalidateCache = true;
 
           // hack needed to fix js error, see bug 386470
           var myThis = this;
           var lambda = function myScopeFunction() { if (myThis.init) myThis.init(); }
 
-          this._setEventListener("start", this.getAttribute("onstart"));
-          this._setEventListener("finish", this.getAttribute("onfinish"));
-          this._setEventListener("bounce", this.getAttribute("onbounce"));
-
           this._mutationObserver = new MutationObserver(this._mutationActor);
           this._mutationObserver.observe(this, { attributes: true,
             attributeOldValue: true,
             attributeFilter: ['loop', '', 'behavior',
-              'direction', 'width', 'height', 'onstart', 'onfinish', 'onbounce'] });
+              'direction', 'width', 'height'] });
 
           // init needs to be run after the page has loaded in order to calculate
           // the correct height/width
           if (document.readyState == "complete") {
             lambda();
           } else {
             window.addEventListener("load", lambda);
           }
diff --git a/testing/web-platform/meta/html/dom/interfaces.https.html.ini b/testing/web-platform/meta/html/dom/interfaces.https.html.ini
--- a/testing/web-platform/meta/html/dom/interfaces.https.html.ini
+++ b/testing/web-platform/meta/html/dom/interfaces.https.html.ini
@@ -611,34 +611,16 @@
     expected: FAIL
 
   [HTMLCanvasElement interface: operation transferControlToOffscreen()]
     expected: FAIL
 
   [HTMLCanvasElement interface: document.createElement("canvas") must inherit property "transferControlToOffscreen()" with the proper type]
     expected: FAIL
 
-  [HTMLMarqueeElement interface: attribute onbounce]
-    expected: FAIL
-
-  [HTMLMarqueeElement interface: attribute onfinish]
-    expected: FAIL
-
-  [HTMLMarqueeElement interface: attribute onstart]
-    expected: FAIL
-
-  [HTMLMarqueeElement interface: document.createElement("marquee") must inherit property "onbounce" with the proper type]
-    expected: FAIL
-
-  [HTMLMarqueeElement interface: document.createElement("marquee") must inherit property "onfinish" with the proper type]
-    expected: FAIL
-
-  [HTMLMarqueeElement interface: document.createElement("marquee") must inherit property "onstart" with the proper type]
-    expected: FAIL
-
   [HTMLFrameSetElement interface: attribute onrejectionhandled]
     expected: FAIL
 
   [HTMLFrameSetElement interface: attribute onunhandledrejection]
     expected: FAIL
 
   [HTMLFrameSetElement interface: document.createElement("frameset") must inherit property "onrejectionhandled" with the proper type]
     expected: FAIL
diff --git a/testing/web-platform/meta/html/obsolete/requirements-for-implementations/the-marquee-element-0/marquee-scrollamount.html.ini b/testing/web-platform/meta/html/obsolete/requirements-for-implementations/the-marquee-element-0/marquee-scrollamount.html.ini
deleted file mode 100644
--- a/testing/web-platform/meta/html/obsolete/requirements-for-implementations/the-marquee-element-0/marquee-scrollamount.html.ini
+++ /dev/null
@@ -1,1 +0,0 @@
-[marquee-scrollamount.html]
\ No newline at end of file
diff --git a/testing/web-platform/meta/html/obsolete/requirements-for-implementations/the-marquee-element-0/marquee-scrolldelay.html.ini b/testing/web-platform/meta/html/obsolete/requirements-for-implementations/the-marquee-element-0/marquee-scrolldelay.html.ini
deleted file mode 100644
--- a/testing/web-platform/meta/html/obsolete/requirements-for-implementations/the-marquee-element-0/marquee-scrolldelay.html.ini
+++ /dev/null
@@ -1,1 +0,0 @@
-[marquee-scrolldelay.html]
\ No newline at end of file
diff --git a/widget/EventMessageList.h b/widget/EventMessageList.h
--- a/widget/EventMessageList.h
+++ b/widget/EventMessageList.h
@@ -460,12 +460,17 @@ NS_EVENT_MESSAGE(eSelectionChange)
 NS_EVENT_MESSAGE(eVisibilityChange)
 
 // Details element events.
 NS_EVENT_MESSAGE(eToggle)
 
 // Dialog element events.
 NS_EVENT_MESSAGE(eClose)
 
+// Marquee element events.
+NS_EVENT_MESSAGE(eMarqueeBounce)
+NS_EVENT_MESSAGE(eMarqueeStart)
+NS_EVENT_MESSAGE(eMarqueeFinish)
+
 #ifdef UNDEF_NS_EVENT_MESSAGE_FIRST_LAST
 #undef UNDEF_NS_EVENT_MESSAGE_FIRST_LAST
 #undef NS_EVENT_MESSAGE_FIRST_LAST
 #endif
