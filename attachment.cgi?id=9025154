# HG changeset patch
# User Gabriele Svelto <gsvelto@mozilla.com>
# Date 1542229756 -3600
#      Wed Nov 14 22:09:16 2018 +0100
# Node ID 47b9b84419d942b7ccf147681595d312635f07bd
# Parent  f97d54f24e0299ed1a87383ba61519c30a8c243a
Bug 1505944 - Use the same timestamp for StartupTimeline records and corresponding profiler markers

diff --git a/toolkit/components/startup/StartupTimeline.h b/toolkit/components/startup/StartupTimeline.h
--- a/toolkit/components/startup/StartupTimeline.h
+++ b/toolkit/components/startup/StartupTimeline.h
@@ -28,16 +28,19 @@ mozilla_StartupTimeline_Event(PROFILE_BE
 #ifndef mozilla_StartupTimeline
 #define mozilla_StartupTimeline
 
 #include "mozilla/TimeStamp.h"
 #include "nscore.h"
 
 #ifdef MOZILLA_INTERNAL_API
 #include "GeckoProfiler.h"
+#ifdef MOZ_GECKO_PROFILER
+# include "ProfilerMarkerPayload.h"
+#endif
 #endif
 
 namespace mozilla {
 
 void RecordShutdownEndTimeStamp();
 void RecordShutdownStartTimeStamp();
 
 class StartupTimeline {
@@ -54,18 +57,20 @@ public:
   }
 
   static const char *Describe(Event ev) {
     return sStartupTimelineDesc[ev];
   }
 
 #ifdef MOZILLA_INTERNAL_API
   static void Record(Event ev) {
-    PROFILER_ADD_MARKER(Describe(ev));
-    Record(ev, TimeStamp::Now());
+    TimeStamp now = TimeStamp::Now();
+    profiler_add_marker(Describe(ev),
+                        MakeUnique<StartupTimelineMarkerPayload>(now));
+    Record(ev, now);
   }
 
   static void Record(Event ev, TimeStamp when) {
     sStartupTimeline[ev] = when;
   }
 
   static void RecordOnce(Event ev);
 #endif
diff --git a/tools/profiler/core/ProfilerMarkerPayload.cpp b/tools/profiler/core/ProfilerMarkerPayload.cpp
--- a/tools/profiler/core/ProfilerMarkerPayload.cpp
+++ b/tools/profiler/core/ProfilerMarkerPayload.cpp
@@ -272,8 +272,16 @@ StyleMarkerPayload::StreamPayload(Splice
 void
 LongTaskMarkerPayload::StreamPayload(SpliceableJSONWriter& aWriter,
                                      const TimeStamp& aProcessStartTime,
                                      UniqueStacks& aUniqueStacks)
 {
   StreamCommonProps("MainThreadLongTask", aWriter, aProcessStartTime, aUniqueStacks);
   aWriter.StringProperty("category", "LongTask");
 }
+
+void
+StartupTimelineMarkerPayload::StreamPayload(SpliceableJSONWriter& aWriter,
+                                            const TimeStamp& aProcessStartTime,
+                                            UniqueStacks& aUniqueStacks)
+{
+  StreamType("StartupTimelineEvent", aWriter);
+}
diff --git a/tools/profiler/public/ProfilerMarkerPayload.h b/tools/profiler/public/ProfilerMarkerPayload.h
--- a/tools/profiler/public/ProfilerMarkerPayload.h
+++ b/tools/profiler/public/ProfilerMarkerPayload.h
@@ -405,9 +405,19 @@ public:
                         const mozilla::TimeStamp& aEndTime)
     : ProfilerMarkerPayload(aStartTime, aEndTime)
   {
   }
 
   DECL_STREAM_PAYLOAD
 };
 
+class StartupTimelineMarkerPayload : public ProfilerMarkerPayload
+{
+public:
+  explicit StartupTimelineMarkerPayload(mozilla::TimeStamp aEventTimestamp)
+    : ProfilerMarkerPayload(aEventTimestamp, aEventTimestamp)
+  {}
+
+  DECL_STREAM_PAYLOAD
+};
+
 #endif // ProfilerMarkerPayload_h
