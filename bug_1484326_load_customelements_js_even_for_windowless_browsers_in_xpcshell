# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1534539932 25200
#      Fri Aug 17 14:05:32 2018 -0700
# Node ID 1619509969de54cae52dd898b6e70a38e9468d4d
# Parent  131363332762842ba327166bdc361c6fffc4858f
Bug 1484326 - Load customElements.js even for windowless browsers in xpcshell tests;r=kmag

Differential Revision: https://phabricator.services.mozilla.com/D3660

diff --git a/toolkit/components/extensions/ExtensionXPCShellUtils.jsm b/toolkit/components/extensions/ExtensionXPCShellUtils.jsm
--- a/toolkit/components/extensions/ExtensionXPCShellUtils.jsm
+++ b/toolkit/components/extensions/ExtensionXPCShellUtils.jsm
@@ -24,26 +24,31 @@ ChromeUtils.defineModuleGetter(this, "Fi
 ChromeUtils.defineModuleGetter(this, "MessageChannel",
                                "resource://gre/modules/MessageChannel.jsm");
 ChromeUtils.defineModuleGetter(this, "Schemas",
                                "resource://gre/modules/Schemas.jsm");
 ChromeUtils.defineModuleGetter(this, "Services",
                                "resource://gre/modules/Services.jsm");
 ChromeUtils.defineModuleGetter(this, "TestUtils",
                                "resource://testing-common/TestUtils.jsm");
+ChromeUtils.defineModuleGetter(this, "CustomElementsListener",
+                               "resource://gre/modules/CustomElementsListener.jsm");
 
 XPCOMUtils.defineLazyGetter(this, "Management", () => {
   const {Management} = ChromeUtils.import("resource://gre/modules/Extension.jsm", {});
   return Management;
 });
 
 Services.mm.loadFrameScript("chrome://global/content/browser-content.js", true, true);
 
 ActorManagerParent.flush();
 
+// Windowless browsers can create documents that rely on XUL Custom Elements:
+CustomElementsListener.listen();
+
 /* exported ExtensionTestUtils */
 
 const {
   promiseDocumentLoaded,
   promiseEvent,
   promiseObserved,
 } = ExtensionUtils;
 
diff --git a/toolkit/components/processsingleton/CustomElementsListener.jsm b/toolkit/components/processsingleton/CustomElementsListener.jsm
new file mode 100644
--- /dev/null
+++ b/toolkit/components/processsingleton/CustomElementsListener.jsm
@@ -0,0 +1,46 @@
+/* -*-  indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+var EXPORTED_SYMBOLS = [ "CustomElementsListener" ];
+
+ChromeUtils.defineModuleGetter(this, "Services",
+                               "resource://gre/modules/Services.jsm");
+
+// Set up Custom Elements for XUL and XHTML documents before anything else
+// happens. Anything loaded here should be considered part of core XUL functionality.
+// Any window-specific elements can be registered via <script> tags at the
+// top of individual documents.
+const observer = {
+  observe(subject, topic) {
+    switch (topic) {
+      case "document-element-inserted":
+        const doc = subject;
+        if (doc.nodePrincipal.isSystemPrincipal && (
+          doc.contentType == "application/vnd.mozilla.xul+xml" ||
+          doc.contentType == "application/xhtml+xml"
+        )) {
+          Services.scriptloader.loadSubScript(
+            "chrome://global/content/customElements.js", doc.ownerGlobal);
+        }
+        break;
+
+      case "xpcom-shutdown":
+        Services.obs.removeObserver(observer, "xpcom-shutdown");
+        Services.obs.removeObserver(observer, "document-element-inserted");
+        break;
+    }
+  }
+};
+
+let listening = false;
+this.CustomElementsListener = {
+  listen() {
+    if (!listening) {
+      listening = true;
+      Services.obs.addObserver(observer, "xpcom-shutdown");
+      Services.obs.addObserver(observer, "document-element-inserted");
+    }
+  }
+};
diff --git a/toolkit/components/processsingleton/MainProcessSingleton.js b/toolkit/components/processsingleton/MainProcessSingleton.js
--- a/toolkit/components/processsingleton/MainProcessSingleton.js
+++ b/toolkit/components/processsingleton/MainProcessSingleton.js
@@ -4,16 +4,18 @@
 
 "use strict";
 
 ChromeUtils.import("resource://gre/modules/Services.jsm");
 ChromeUtils.import("resource://gre/modules/XPCOMUtils.jsm");
 
 ChromeUtils.defineModuleGetter(this, "NetUtil",
                                "resource://gre/modules/NetUtil.jsm");
+ChromeUtils.defineModuleGetter(this, "CustomElementsListener",
+                              "resource://gre/modules/CustomElementsListener.jsm");
 
 function MainProcessSingleton() {}
 MainProcessSingleton.prototype = {
   classID: Components.ID("{0636a680-45cb-11e4-916c-0800200c9a66}"),
   QueryInterface: ChromeUtils.generateQI([Ci.nsIObserver,
                                           Ci.nsISupportsWeakReference]),
 
   // Called when a webpage calls window.external.AddSearchProvider
@@ -55,44 +57,28 @@ MainProcessSingleton.prototype = {
 
       Services.search.addEngine(engineURL.spec, null, iconURL ? iconURL.spec : null, true);
     });
   },
 
   observe(subject, topic, data) {
     switch (topic) {
     case "app-startup": {
+      CustomElementsListener.listen();
       Services.obs.addObserver(this, "xpcom-shutdown");
-      Services.obs.addObserver(this, "document-element-inserted");
 
       // Load this script early so that console.* is initialized
       // before other frame scripts.
       Services.mm.loadFrameScript("chrome://global/content/browser-content.js", true, true);
       Services.ppmm.loadProcessScript("chrome://global/content/process-content.js", true, true);
       Services.mm.addMessageListener("Search:AddEngine", this.addSearchEngine);
       Services.ppmm.loadProcessScript("resource:///modules/ContentObservers.js", true);
       break;
     }
 
-    case "document-element-inserted":
-      // Set up Custom Elements for XUL and XHTML documents before anything else
-      // happens. Anything loaded here should be considered part of core XUL functionality.
-      // Any window-specific elements can be registered via <script> tags at the
-      // top of individual documents.
-      const doc = subject;
-      if (doc.nodePrincipal.isSystemPrincipal && (
-            doc.contentType == "application/vnd.mozilla.xul+xml" ||
-            doc.contentType == "application/xhtml+xml"
-        )) {
-        Services.scriptloader.loadSubScript(
-          "chrome://global/content/customElements.js", doc.ownerGlobal);
-      }
-      break;
-
     case "xpcom-shutdown":
       Services.mm.removeMessageListener("Search:AddEngine", this.addSearchEngine);
-      Services.obs.removeObserver(this, "document-element-inserted");
       break;
     }
   },
 };
 
 this.NSGetFactory = XPCOMUtils.generateNSGetFactory([MainProcessSingleton]);
diff --git a/toolkit/components/processsingleton/moz.build b/toolkit/components/processsingleton/moz.build
--- a/toolkit/components/processsingleton/moz.build
+++ b/toolkit/components/processsingleton/moz.build
@@ -7,8 +7,12 @@
 with Files('**'):
     BUG_COMPONENT = ('Toolkit', 'General')
 
 EXTRA_COMPONENTS += [
     'ContentProcessSingleton.js',
     'MainProcessSingleton.js',
     'ProcessSingleton.manifest',
 ]
+
+EXTRA_JS_MODULES += [
+    'CustomElementsListener.jsm',
+]
