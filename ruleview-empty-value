# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  bf544e556f37d71bbf943812156236f01f2b3f32
Bug 1150780 - Don't create a new inplace editor for an element if one already exists;r=pbrosset

diff --git a/browser/devtools/shared/inplace-editor.js b/browser/devtools/shared/inplace-editor.js
--- a/browser/devtools/shared/inplace-editor.js
+++ b/browser/devtools/shared/inplace-editor.js
@@ -82,17 +82,19 @@ Cu.import("resource://gre/modules/devtoo
  *       If true, shift tab will not advance the editor to the previous
  *       focusable element.
  *    {string} trigger: The DOM event that should trigger editing,
  *      defaults to "click"
  */
 function editableField(aOptions)
 {
   return editableItem(aOptions, function(aElement, aEvent) {
-    new InplaceEditor(aOptions, aEvent);
+    if (!aOptions.element.inplaceEditor) {
+      new InplaceEditor(aOptions, aEvent);
+    }
   });
 }
 
 exports.editableField = editableField;
 
 /**
  * Handle events for an element that should respond to
  * clicks and sit in the editing tab order, and call
@@ -277,17 +279,17 @@ InplaceEditor.prototype = {
     this.input.removeEventListener("keypress", this._onKeyPress, false);
     this.input.removeEventListener("keyup", this._onKeyup, false);
     this.input.removeEventListener("oninput", this._onInput, false);
     this._stopAutosize();
 
     this.elt.style.display = this.originalDisplay;
     this.elt.focus();
 
-    this.elt.parentNode.removeChild(this.input);
+    this.input.remove();
     this.input = null;
 
     delete this.elt.inplaceEditor;
     delete this.elt;
 
     if (this.destroy) {
       this.destroy();
     }
@@ -322,17 +324,17 @@ InplaceEditor.prototype = {
   /**
    * Clean up the mess created by _autosize().
    */
   _stopAutosize: function InplaceEditor_stopAutosize()
   {
     if (!this._measurement) {
       return;
     }
-    this._measurement.parentNode.removeChild(this._measurement);
+    this._measurement.remove();
     delete this._measurement;
   },
 
   /**
    * Size the editor to fit its current contents.
    */
   _updateSize: function InplaceEditor_updateSize()
   {
diff --git a/browser/devtools/shared/test/browser_inplace-editor.js b/browser/devtools/shared/test/browser_inplace-editor.js
--- a/browser/devtools/shared/test/browser_inplace-editor.js
+++ b/browser/devtools/shared/test/browser_inplace-editor.js
@@ -8,24 +8,43 @@ let {Promise: promise} = Cu.import("reso
 let {editableField, getInplaceEditorForSpan: inplaceEditor} = devtools.require("devtools/shared/inplace-editor");
 
 // Test the inplace-editor behavior.
 
 add_task(function*() {
   yield promiseTab("data:text/html;charset=utf-8,inline editor tests");
   let [host, win, doc] = yield createHost();
 
+  yield testMultipleInitialization(doc);
   yield testReturnCommit(doc);
   yield testBlurCommit(doc);
   yield testAdvanceCharCommit(doc);
 
   host.destroy();
   gBrowser.removeCurrentTab();
 });
 
+function testMultipleInitialization(doc) {
+  clearBody(doc);
+  let options = {};
+  let span = options.element = createSpan(doc);
+
+  info("Creating an inplace-editor field");
+  editableField(options);
+  editableField(options);
+
+  info("Clicking on the inplace-editor field to turn to edit mode");
+  span.click();
+
+  is (span.style.display, "none", "The original <span> is hidden");
+  is (doc.querySelectorAll("input").length, 1, "Only one <input>");
+  is (doc.querySelectorAll("span").length, 2, "Correct number of <span> elements");
+  is (doc.querySelectorAll("span.autosizer").length, 1, "There is an autosizer element");
+}
+
 function testReturnCommit(doc) {
   info("Testing that pressing return commits the new value");
   let def = promise.defer();
 
   createInplaceEditorAndClick({
     initial: "explicit initial",
     start: function(editor) {
       is(editor.input.value, "explicit initial", "Explicit initial value should be used.");
