# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  de8fbc5c1c0e0d174f910cd1072f7d026a25297b
Bug 1448936 - Remove unused server side logging code;r=jryans

MozReview-Commit-ID: 3X14cDdj0qp

diff --git a/devtools/client/webconsole/test/mochitest/browser.ini b/devtools/client/webconsole/test/mochitest/browser.ini
--- a/devtools/client/webconsole/test/mochitest/browser.ini
+++ b/devtools/client/webconsole/test/mochitest/browser.ini
@@ -60,19 +60,16 @@ support-files =
   test-console-group.html
   test-console-iframes.html
   test-console-output-02.html
   test-console-output-03.html
   test-console-output-04.html
   test-console-output-dom-elements.html
   test-console-output-events.html
   test-console-replaced-api.html
-  test-console-server-logging-array.sjs
-  test-console-server-logging-backtrace.sjs
-  test-console-server-logging.sjs
   test-console-table.html
   test-console-trace-async.html
   test-console-workers.html
   test-console.html
   test-cu-reporterror.js
   test-data.json
   test-data.json^headers^
   test-duplicate-error.html
diff --git a/devtools/client/webconsole/test/mochitest/test-console-server-logging-array.sjs b/devtools/client/webconsole/test/mochitest/test-console-server-logging-array.sjs
deleted file mode 100644
--- a/devtools/client/webconsole/test/mochitest/test-console-server-logging-array.sjs
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- * Any copyright is dedicated to the Public Domain.
- * http://creativecommons.org/publicdomain/zero/1.0/
- */
-
-function handleRequest(request, response)
-{
-  var page = "<!DOCTYPE html><html>" +
-    "<head><meta charset='utf-8'></head>" +
-    "<body><p>hello world!</p></body>" +
-    "</html>";
-
-  var data = {
-    "version": "4.1.0",
-    "columns": ["log", "backtrace", "type"],
-    "rows":[[
-      [{ "best": "Firefox", "reckless": "Chrome", "new_ie": "Safari", "new_new_ie": "Edge"}],
-      "C:\\src\\www\\serverlogging\\test7.php:4:1",
-      ""
-    ]],
-  };
-
-  // Put log into headers.
-  var value = b64EncodeUnicode(JSON.stringify(data));
-  response.setHeader("X-ChromeLogger-Data", value, false);
-
-  response.write(page);
-}
-
-function b64EncodeUnicode(str) {
-  return btoa(unescape(encodeURIComponent(str)));
-}
diff --git a/devtools/client/webconsole/test/mochitest/test-console-server-logging-backtrace.sjs b/devtools/client/webconsole/test/mochitest/test-console-server-logging-backtrace.sjs
deleted file mode 100644
--- a/devtools/client/webconsole/test/mochitest/test-console-server-logging-backtrace.sjs
+++ /dev/null
@@ -1,44 +0,0 @@
-/*
- * Any copyright is dedicated to the Public Domain.
- * http://creativecommons.org/publicdomain/zero/1.0/
- */
-
-function handleRequest(request, response)
-{
-  var page = "<!DOCTYPE html><html>" +
-    "<head><meta charset='utf-8'></head>" +
-    "<body><p>hello world!</p></body>" +
-    "</html>";
-
-  var data = {
-    "version": "4.1.0",
-    "columns": ["log", "backtrace", "type"],
-    "rows":[[
-      ["correct 1"],
-      "/some/path/to/file.py   :     33",
-      "error"
-    ], [
-      ["correct 2"],
-      "/some/path/to/file.py:33",
-      "error"
-    ], [
-      ["wrong 1"],
-      "/some/path/to/file.py:33wrong",
-      "error"
-    ], [
-      ["wrong 2"],
-      "/some/path/to/file.py",
-      "error"
-    ]],
-  };
-
-  // Put log into headers.
-  var value = b64EncodeUnicode(JSON.stringify(data));
-  response.setHeader("X-ChromeLogger-Data", value, false);
-
-  response.write(page);
-}
-
-function b64EncodeUnicode(str) {
-  return btoa(unescape(encodeURIComponent(str)));
-}
diff --git a/devtools/client/webconsole/test/mochitest/test-console-server-logging.sjs b/devtools/client/webconsole/test/mochitest/test-console-server-logging.sjs
deleted file mode 100644
--- a/devtools/client/webconsole/test/mochitest/test-console-server-logging.sjs
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- * Any copyright is dedicated to the Public Domain.
- * http://creativecommons.org/publicdomain/zero/1.0/
- */
-
-function handleRequest(request, response)
-{
-  var page = "<!DOCTYPE html><html>" +
-    "<head><meta charset='utf-8'></head>" +
-    "<body><p>hello world!</p></body>" +
-    "</html>";
-
-  var data = {
-    "version": "4.1.0",
-    "columns": ["log", "backtrace", "type"],
-    "rows": [[
-      ["values: %s %o %i %f %s","string",{"a":10,"___class_name":"Object"},123,1.12, "\u2713"],
-      "C:\\src\\www\\serverlogging\\test7.php:4:1",
-      ""
-    ]]
-  };
-
-  // Put log into headers.
-  var value = b64EncodeUnicode(JSON.stringify(data));
-  response.setHeader("X-ChromeLogger-Data", value, false);
-
-  response.write(page);
-}
-
-function b64EncodeUnicode(str) {
-  return btoa(unescape(encodeURIComponent(str)));
-}
diff --git a/devtools/client/webconsole/webconsole-connection-proxy.js b/devtools/client/webconsole/webconsole-connection-proxy.js
--- a/devtools/client/webconsole/webconsole-connection-proxy.js
+++ b/devtools/client/webconsole/webconsole-connection-proxy.js
@@ -28,17 +28,16 @@ function WebConsoleConnectionProxy(webCo
 
   this._onPageError = this._onPageError.bind(this);
   this._onLogMessage = this._onLogMessage.bind(this);
   this._onConsoleAPICall = this._onConsoleAPICall.bind(this);
   this._onNetworkEvent = this._onNetworkEvent.bind(this);
   this._onNetworkEventUpdate = this._onNetworkEventUpdate.bind(this);
   this._onFileActivity = this._onFileActivity.bind(this);
   this._onReflowActivity = this._onReflowActivity.bind(this);
-  this._onServerLogCall = this._onServerLogCall.bind(this);
   this._onTabNavigated = this._onTabNavigated.bind(this);
   this._onTabWillNavigate = this._onTabWillNavigate.bind(this);
   this._onAttachConsole = this._onAttachConsole.bind(this);
   this._onCachedMessages = this._onCachedMessages.bind(this);
   this._connectionTimeout = this._connectionTimeout.bind(this);
   this._onLastPrivateContextExited =
     this._onLastPrivateContextExited.bind(this);
 }
@@ -134,17 +133,16 @@ WebConsoleConnectionProxy.prototype = {
 
     let client = this.client = this.target.client;
 
     client.addListener("logMessage", this._onLogMessage);
     client.addListener("pageError", this._onPageError);
     client.addListener("consoleAPICall", this._onConsoleAPICall);
     client.addListener("fileActivity", this._onFileActivity);
     client.addListener("reflowActivity", this._onReflowActivity);
-    client.addListener("serverLogCall", this._onServerLogCall);
     client.addListener("lastPrivateContextExited",
                        this._onLastPrivateContextExited);
 
     this.target.on("will-navigate", this._onTabWillNavigate);
     this.target.on("navigate", this._onTabNavigated);
 
     this._consoleActor = this.target.form.consoleActor;
     if (this.target.isTabActor) {
@@ -412,36 +410,16 @@ WebConsoleConnectionProxy.prototype = {
     }
     if (this.webConsoleFrame.NEW_CONSOLE_OUTPUT_ENABLED) {
       // TODO: Implement for new console
     } else {
       this.webConsoleFrame.handleReflowActivity(packet);
     }
   },
   /**
-   * The "serverLogCall" message type handler. We redirect any message to
-   * the UI for displaying.
-   *
-   * @private
-   * @param string type
-   *        Message type.
-   * @param object packet
-   *        The message received from the server.
-   */
-  _onServerLogCall: function(type, packet) {
-    if (!this.webConsoleFrame || packet.from != this._consoleActor) {
-      return;
-    }
-    if (this.webConsoleFrame.NEW_CONSOLE_OUTPUT_ENABLED) {
-      // TODO: Implement for new console
-    } else {
-      this.webConsoleFrame.handleConsoleAPICall(packet.message);
-    }
-  },
-  /**
    * The "lastPrivateContextExited" message type handler. When this message is
    * received the Web Console UI is cleared.
    *
    * @private
    * @param string type
    *        Message type.
    * @param object packet
    *        The message received from the server.
@@ -512,17 +490,16 @@ WebConsoleConnectionProxy.prototype = {
       return this._disconnecter.promise;
     }
 
     this.client.removeListener("logMessage", this._onLogMessage);
     this.client.removeListener("pageError", this._onPageError);
     this.client.removeListener("consoleAPICall", this._onConsoleAPICall);
     this.client.removeListener("fileActivity", this._onFileActivity);
     this.client.removeListener("reflowActivity", this._onReflowActivity);
-    this.client.removeListener("serverLogCall", this._onServerLogCall);
     this.client.removeListener("lastPrivateContextExited",
                                this._onLastPrivateContextExited);
     this.webConsoleClient.off("networkEvent", this._onNetworkEvent);
     this.webConsoleClient.off("networkEventUpdate", this._onNetworkEventUpdate);
     this.target.off("will-navigate", this._onTabWillNavigate);
     this.target.off("navigate", this._onTabNavigated);
 
     this.client = null;
diff --git a/devtools/server/actors/webconsole.js b/devtools/server/actors/webconsole.js
--- a/devtools/server/actors/webconsole.js
+++ b/devtools/server/actors/webconsole.js
@@ -17,17 +17,16 @@ const { LongStringActor } = require("dev
 const { createValueGrip, stringIsLong } = require("devtools/server/actors/object/utils");
 const DevToolsUtils = require("devtools/shared/DevToolsUtils");
 const ErrorDocs = require("devtools/server/actors/errordocs");
 
 loader.lazyRequireGetter(this, "NetworkMonitor", "devtools/shared/webconsole/network-monitor", true);
 loader.lazyRequireGetter(this, "NetworkMonitorChild", "devtools/shared/webconsole/network-monitor", true);
 loader.lazyRequireGetter(this, "ConsoleProgressListener", "devtools/shared/webconsole/network-monitor", true);
 loader.lazyRequireGetter(this, "StackTraceCollector", "devtools/shared/webconsole/network-monitor", true);
-loader.lazyRequireGetter(this, "ServerLoggingListener", "devtools/shared/webconsole/server-logger", true);
 loader.lazyRequireGetter(this, "JSPropertyProvider", "devtools/shared/webconsole/js-property-provider", true);
 loader.lazyRequireGetter(this, "Parser", "resource://devtools/shared/Parser.jsm", true);
 loader.lazyRequireGetter(this, "NetUtil", "resource://gre/modules/NetUtil.jsm", true);
 loader.lazyRequireGetter(this, "addWebConsoleCommands", "devtools/server/actors/webconsole/utils", true);
 loader.lazyRequireGetter(this, "CONSOLE_WORKER_IDS", "devtools/server/actors/webconsole/utils", true);
 loader.lazyRequireGetter(this, "WebConsoleUtils", "devtools/server/actors/webconsole/utils", true);
 loader.lazyRequireGetter(this, "EnvironmentActor", "devtools/server/actors/environment", true);
 loader.lazyRequireGetter(this, "EventEmitter", "devtools/shared/event-emitter");
@@ -367,20 +366,16 @@ WebConsoleActor.prototype =
     if (this.consoleProgressListener) {
       this.consoleProgressListener.destroy();
       this.consoleProgressListener = null;
     }
     if (this.consoleReflowListener) {
       this.consoleReflowListener.destroy();
       this.consoleReflowListener = null;
     }
-    if (this.serverLoggingListener) {
-      this.serverLoggingListener.destroy();
-      this.serverLoggingListener = null;
-    }
     if (this.contentProcessListener) {
       this.contentProcessListener.destroy();
       this.contentProcessListener = null;
     }
 
     EventEmitter.off(this.parentActor, "changed-toplevel-document",
                this._onChangedToplevelDocument);
 
@@ -667,27 +662,16 @@ WebConsoleActor.prototype =
             break;
           }
           if (!this.consoleReflowListener) {
             this.consoleReflowListener =
               new ConsoleReflowListener(this.window, this);
           }
           startedListeners.push(listener);
           break;
-        case "ServerLogging":
-          // Workers don't support this message type
-          if (isWorker) {
-            break;
-          }
-          if (!this.serverLoggingListener) {
-            this.serverLoggingListener =
-              new ServerLoggingListener(this.window, this);
-          }
-          startedListeners.push(listener);
-          break;
         case "ContentProcessMessages":
           // Workers don't support this message type
           if (isWorker) {
             break;
           }
           if (!this.contentProcessListener) {
             this.contentProcessListener = new ContentProcessListener(this);
           }
@@ -727,17 +711,17 @@ WebConsoleActor.prototype =
    */
   onStopListeners: function(request) {
     let stoppedListeners = [];
 
     // If no specific listeners are requested to be detached, we stop all
     // listeners.
     let toDetach = request.listeners ||
       ["PageError", "ConsoleAPI", "NetworkActivity",
-       "FileActivity", "ServerLogging", "ContentProcessMessages"];
+       "FileActivity", "ContentProcessMessages"];
 
     while (toDetach.length > 0) {
       let listener = toDetach.shift();
       switch (listener) {
         case "PageError":
           if (this.consoleServiceListener) {
             this.consoleServiceListener.destroy();
             this.consoleServiceListener = null;
@@ -776,23 +760,16 @@ WebConsoleActor.prototype =
           break;
         case "ReflowActivity":
           if (this.consoleReflowListener) {
             this.consoleReflowListener.destroy();
             this.consoleReflowListener = null;
           }
           stoppedListeners.push(listener);
           break;
-        case "ServerLogging":
-          if (this.serverLoggingListener) {
-            this.serverLoggingListener.destroy();
-            this.serverLoggingListener = null;
-          }
-          stoppedListeners.push(listener);
-          break;
         case "ContentProcessMessages":
           if (this.contentProcessListener) {
             this.contentProcessListener.destroy();
             this.contentProcessListener = null;
           }
           stoppedListeners.push(listener);
           break;
         case "DocumentEvents":
@@ -1794,49 +1771,16 @@ WebConsoleActor.prototype =
       sourceURL: reflowInfo.sourceURL,
       sourceLine: reflowInfo.sourceLine,
       functionName: reflowInfo.functionName
     };
 
     this.conn.send(packet);
   },
 
-  /**
-   * Handler for server logging. This method forwards log events to the
-   * remote Web Console client.
-   *
-   * @see ServerLoggingListener
-   * @param object message
-   *        The console API call on the server we need to send to the remote client.
-   */
-  onServerLogCall: function(message) {
-    // Clone all data into the content scope (that's where
-    // passed arguments comes from).
-    let msg = Cu.cloneInto(message, this.window);
-
-    // All arguments within the message need to be converted into
-    // debuggees to properly send it to the client side.
-    // Use the default target: this.window as the global object
-    // since that's the correct scope for data in the message.
-    // The 'false' argument passed into prepareConsoleMessageForRemote()
-    // ensures that makeDebuggeeValue uses content debuggee.
-    // See also:
-    // * makeDebuggeeValue()
-    // * prepareConsoleMessageForRemote()
-    msg = this.prepareConsoleMessageForRemote(msg, false);
-
-    let packet = {
-      from: this.actorID,
-      type: "serverLogCall",
-      message: msg,
-    };
-
-    this.conn.send(packet);
-  },
-
   // End of event handlers for various listeners.
 
   /**
    * Prepare a message from the console API to be sent to the remote Web Console
    * instance.
    *
    * @param object message
    *        The original message received from console-api-log-event.
diff --git a/devtools/shared/webconsole/moz.build b/devtools/shared/webconsole/moz.build
--- a/devtools/shared/webconsole/moz.build
+++ b/devtools/shared/webconsole/moz.build
@@ -8,12 +8,10 @@ if CONFIG['OS_TARGET'] != 'Android':
     MOCHITEST_CHROME_MANIFESTS += ['test/chrome.ini']
     XPCSHELL_TESTS_MANIFESTS += ['test/unit/xpcshell.ini']
 
 DevToolsModules(
     'client.js',
     'js-property-provider.js',
     'network-helper.js',
     'network-monitor.js',
-    'server-logger-monitor.js',
-    'server-logger.js',
     'throttle.js',
 )
diff --git a/devtools/shared/webconsole/server-logger-monitor.js b/devtools/shared/webconsole/server-logger-monitor.js
deleted file mode 100644
--- a/devtools/shared/webconsole/server-logger-monitor.js
+++ /dev/null
@@ -1,191 +0,0 @@
-/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
-/* vim: set ft= javascript ts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-"use strict";
-
-const {Ci} = require("chrome");
-const Services = require("Services");
-
-const {makeInfallible} = require("devtools/shared/DevToolsUtils");
-
-loader.lazyGetter(this, "NetworkHelper", () => require("devtools/shared/webconsole/network-helper"));
-
-// Helper tracer. Should be generic sharable by other modules (bug 1171927)
-const trace = {
-  log: function(...args) {
-  }
-};
-
-const acceptableHeaders = ["x-chromelogger-data"];
-
-/**
- * This object represents HTTP events observer. It's intended to be
- * used in e10s enabled browser only.
- *
- * Since child processes can't register HTTP event observer they use
- * this module to do the observing in the parent process. This monitor
- * is loaded through DebuggerServerConnection.setupInParent() that is
- * executed from within the child process. The execution is done by
- * {@ServerLoggingListener}.  The monitor listens to HTTP events and
- * forwards it into the right child process.
- *
- * Read more about the architecture:
- * https://github.com/mozilla/gecko-dev/blob/fx-team/devtools/server/docs/actor-e10s-handling.md
- */
-var ServerLoggerMonitor = {
-  // Initialization
-
-  initialize: function() {
-    this.onChildMessage = this.onChildMessage.bind(this);
-    this.onExamineResponse = this.onExamineResponse.bind(this);
-
-    // Set of registered child frames (loggers).
-    this.targets = new Set();
-  },
-
-  // Parent Child Relationship
-
-  attach: makeInfallible(function({ mm, prefix }) {
-    trace.log("ServerLoggerMonitor.attach; ", arguments);
-
-    let setMessageManager = newMM => {
-      if (mm) {
-        mm.removeMessageListener("debug:server-logger", this.onChildMessage);
-      }
-      mm = newMM;
-      if (mm) {
-        mm.addMessageListener("debug:server-logger", this.onChildMessage);
-      }
-    };
-
-    // Start listening for messages from the {@ServerLogger} actor
-    // living in the child process.
-    setMessageManager(mm);
-
-    return {
-      onBrowserSwap: setMessageManager,
-      onDisconnected: () => {
-        trace.log("ServerLoggerMonitor.onDisconnectChild; ", arguments);
-        setMessageManager(null);
-      }
-    };
-  }),
-
-  // Child Message Handling
-
-  onChildMessage: function(msg) {
-    let method = msg.data.method;
-
-    trace.log("ServerLoggerMonitor.onChildMessage; ", method, msg);
-
-    switch (method) {
-      case "attachChild":
-        return this.onAttachChild(msg);
-      case "detachChild":
-        return this.onDetachChild(msg);
-      default:
-        trace.log("Unknown method name: ", method);
-        return undefined;
-    }
-  },
-
-  onAttachChild: function(event) {
-    let target = event.target;
-    let size = this.targets.size;
-
-    trace.log("ServerLoggerMonitor.onAttachChild; size: ", size, target);
-
-    // If this is the first child attached, register global HTTP observer.
-    if (!size) {
-      trace.log("ServerLoggerMonitor.onAttatchChild; Add HTTP Observer");
-      Services.obs.addObserver(this.onExamineResponse,
-        "http-on-examine-response");
-    }
-
-    // Collect child loggers. The frame element where the
-    // window/document lives.
-    this.targets.add(target);
-  },
-
-  onDetachChild: function(event) {
-    let target = event.target;
-    this.targets.delete(target);
-
-    let size = this.targets.size;
-    trace.log("ServerLoggerMonitor.onDetachChild; size: ", size, target);
-
-    // If this is the last child process attached, unregister
-    // the global HTTP observer.
-    if (!size) {
-      trace.log("ServerLoggerMonitor.onDetachChild; Remove HTTP Observer");
-      Services.obs.removeObserver(this.onExamineResponse,
-        "http-on-examine-response");
-    }
-  },
-
-  // HTTP Observer
-
-  onExamineResponse: makeInfallible(function(subject, topic) {
-    let httpChannel = subject.QueryInterface(Ci.nsIHttpChannel);
-
-    trace.log("ServerLoggerMonitor.onExamineResponse; ", httpChannel.name,
-      this.targets);
-
-    // Ignore requests from chrome or add-on code when we are monitoring
-    // content.
-    if (!httpChannel.loadInfo &&
-        httpChannel.loadInfo.loadingDocument === null &&
-        httpChannel.loadInfo.loadingPrincipal ===
-        Services.scriptSecurityManager.getSystemPrincipal()) {
-      return;
-    }
-
-    let requestFrame = NetworkHelper.getTopFrameForRequest(httpChannel);
-    if (!requestFrame) {
-      return;
-    }
-
-    // Ignore requests from parent frames that aren't registered.
-    if (!this.targets.has(requestFrame)) {
-      return;
-    }
-
-    let headers = [];
-
-    httpChannel.visitResponseHeaders((header, value) => {
-      header = header.toLowerCase();
-      if (acceptableHeaders.includes(header)) {
-        headers.push({header: header, value: value});
-      }
-    });
-
-    if (!headers.length) {
-      return;
-    }
-
-    let { messageManager } = requestFrame;
-    messageManager.sendAsyncMessage("debug:server-logger", {
-      method: "examineHeaders",
-      headers: headers,
-    });
-
-    trace.log("ServerLoggerMonitor.onExamineResponse; headers ",
-      headers.length, ", ", headers);
-  }),
-};
-
-/**
- * Executed automatically by the framework.
- */
-function setupParentProcess(event) {
-  return ServerLoggerMonitor.attach(event);
-}
-
-// Monitor initialization.
-ServerLoggerMonitor.initialize();
-
-// Exports from this module
-exports.setupParentProcess = setupParentProcess;
diff --git a/devtools/shared/webconsole/server-logger.js b/devtools/shared/webconsole/server-logger.js
deleted file mode 100644
--- a/devtools/shared/webconsole/server-logger.js
+++ /dev/null
@@ -1,509 +0,0 @@
-/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
-/* vim: set ft= javascript ts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-"use strict";
-
-const {Ci} = require("chrome");
-const Services = require("Services");
-const {DebuggerServer} = require("devtools/server/main");
-const DevToolsUtils = require("devtools/shared/DevToolsUtils");
-
-loader.lazyGetter(this, "NetworkHelper", () => require("devtools/shared/webconsole/network-helper"));
-
-// Helper tracer. Should be generic sharable by other modules (bug 1171927)
-const trace = {
-  log: function() {
-  }
-};
-
-// Constants
-const makeInfallible = DevToolsUtils.makeInfallible;
-const acceptableHeaders = ["x-chromelogger-data"];
-
-/**
- * The listener is responsible for detecting server side logs
- * within HTTP headers and sending them to the client.
- *
- * The logic is based on "http-on-examine-response" event that is
- * sent when a response from the server is received. Consequently HTTP
- * headers are parsed to find server side logs.
- *
- * A listeners for "http-on-examine-response" is registered when
- * the listener starts and removed when destroy is executed.
- *
- * @param {Object} win (nsIDOMWindow):
- *        filter network requests by the associated window object.
- *        If null (i.e. in the browser context) log everything
- * @param {Object} owner
- *        The {@WebConsoleActor} instance
- */
-function ServerLoggingListener(win, owner) {
-  trace.log("ServerLoggingListener.initialize; ", owner.actorID,
-    ", child process: ", DebuggerServer.isInChildProcess);
-
-  this.owner = owner;
-  this.window = win;
-
-  this.onExamineResponse = this.onExamineResponse.bind(this);
-  this.onExamineHeaders = this.onExamineHeaders.bind(this);
-  this.onParentMessage = this.onParentMessage.bind(this);
-
-  this.attach();
-}
-
-ServerLoggingListener.prototype = {
-  /**
-   * The destroy is called by the parent WebConsoleActor actor.
-   */
-  destroy: function() {
-    trace.log("ServerLoggingListener.destroy; ", this.owner.actorID,
-      ", child process: ", DebuggerServer.isInChildProcess);
-
-    this.detach();
-  },
-
-  /**
-   * The main responsibility of this method is registering a listener for
-   * "http-on-examine-response" events.
-   */
-  attach: makeInfallible(function() {
-    trace.log("ServerLoggingListener.attach; child process: ",
-      DebuggerServer.isInChildProcess);
-
-    // Setup the child <-> parent communication if this actor module
-    // is running in a child process. If e10s is disabled (this actor
-    // running in the same process as everything else) register observer
-    // listener just like in good old pre e10s days.
-    if (DebuggerServer.isInChildProcess) {
-      this.attachParentProcess();
-    } else {
-      Services.obs.addObserver(this.onExamineResponse,
-        "http-on-examine-response");
-    }
-  }),
-
-  /**
-   * Remove the "http-on-examine-response" listener.
-   */
-  detach: makeInfallible(function() {
-    trace.log("ServerLoggingListener.detach; ", this.owner.actorID);
-
-    if (DebuggerServer.isInChildProcess) {
-      this.detachParentProcess();
-    } else {
-      Services.obs.removeObserver(this.onExamineResponse,
-        "http-on-examine-response");
-    }
-  }),
-
-  // Parent Child Relationship
-
-  attachParentProcess: function() {
-    trace.log("ServerLoggingListener.attachParentProcess;");
-
-    this.owner.conn.setupInParent({
-      module: "devtools/shared/webconsole/server-logger-monitor",
-      setupParent: "setupParentProcess"
-    });
-
-    let mm = this.owner.conn.parentMessageManager;
-    let { addMessageListener, sendSyncMessage } = mm;
-
-    // It isn't possible to register HTTP-* event observer inside
-    // a child process (in case of e10s), so listen for messages
-    // coming from the {@ServerLoggerMonitor} that lives inside
-    // the parent process.
-    addMessageListener("debug:server-logger", this.onParentMessage);
-
-    // Attach to the {@ServerLoggerMonitor} object to subscribe events.
-    sendSyncMessage("debug:server-logger", {
-      method: "attachChild"
-    });
-  },
-
-  detachParentProcess: makeInfallible(function() {
-    trace.log("ServerLoggingListener.detachParentProcess;");
-
-    let mm = this.owner.conn.parentMessageManager;
-    let { removeMessageListener, sendSyncMessage } = mm;
-
-    sendSyncMessage("debug:server-logger", {
-      method: "detachChild",
-    });
-
-    removeMessageListener("debug:server-logger", this.onParentMessage);
-  }),
-
-  onParentMessage: makeInfallible(function(msg) {
-    if (!msg.data) {
-      return;
-    }
-
-    let method = msg.data.method;
-    trace.log("ServerLogger.onParentMessage; ", method, msg.data);
-
-    switch (method) {
-      case "examineHeaders":
-        this.onExamineHeaders(msg);
-        break;
-      default:
-        trace.log("Unknown method name: ", method);
-    }
-  }),
-
-  // HTTP Observer
-
-  onExamineHeaders: function(event) {
-    let headers = event.data.headers;
-
-    trace.log("ServerLoggingListener.onExamineHeaders;", headers);
-
-    let parsedMessages = [];
-
-    for (let item of headers) {
-      let header = item.header;
-      let value = item.value;
-
-      let messages = this.parse(header, value);
-      if (messages) {
-        parsedMessages.push(...messages);
-      }
-    }
-
-    if (!parsedMessages.length) {
-      return;
-    }
-
-    for (let message of parsedMessages) {
-      this.sendMessage(message);
-    }
-  },
-
-  onExamineResponse: makeInfallible(function(subject) {
-    let httpChannel = subject.QueryInterface(Ci.nsIHttpChannel);
-
-    trace.log("ServerLoggingListener.onExamineResponse; ", httpChannel.name,
-      ", ", this.owner.actorID, httpChannel);
-
-    if (!this._matchRequest(httpChannel)) {
-      trace.log("ServerLoggerMonitor.onExamineResponse; No matching request!");
-      return;
-    }
-
-    let headers = [];
-
-    httpChannel.visitResponseHeaders((header, value) => {
-      header = header.toLowerCase();
-      if (acceptableHeaders.includes(header)) {
-        headers.push({header: header, value: value});
-      }
-    });
-
-    this.onExamineHeaders({
-      data: {
-        headers: headers,
-      }
-    });
-  }),
-
-  /**
-   * Check if a given network request should be logged by this network monitor
-   * instance based on the current filters.
-   *
-   * @private
-   * @param nsIHttpChannel channel
-   *        Request to check.
-   * @return boolean
-   *         True if the network request should be logged, false otherwise.
-   */
-  _matchRequest: function(channel) {
-    trace.log("_matchRequest ", this.window, ", ", this.topFrame);
-
-    // Log everything if the window is null (it's null in the browser context)
-    if (!this.window) {
-      return true;
-    }
-
-    // Ignore requests from chrome or add-on code when we are monitoring
-    // content.
-    if (!channel.loadInfo &&
-        channel.loadInfo.loadingDocument === null &&
-        channel.loadInfo.loadingPrincipal ===
-        Services.scriptSecurityManager.getSystemPrincipal()) {
-      return false;
-    }
-
-    // Since frames support, this.window may not be the top level content
-    // frame, so that we can't only compare with win.top.
-    let win = NetworkHelper.getWindowForRequest(channel);
-    while (win) {
-      if (win == this.window) {
-        return true;
-      }
-      if (win.parent == win) {
-        break;
-      }
-      win = win.parent;
-    }
-
-    return false;
-  },
-
-  // Server Logs
-
-  /**
-   * Search through HTTP headers to catch all server side logs.
-   * Learn more about the data structure:
-   * https://craig.is/writing/chrome-logger/techspecs
-   */
-  parse: function(header, value) {
-    let data;
-
-    try {
-      let result = decodeURIComponent(escape(atob(value)));
-      data = JSON.parse(result);
-    } catch (err) {
-      console.error("Failed to parse HTTP log data! " + err);
-      return null;
-    }
-
-    let parsedMessage = [];
-    let columnMap = this.getColumnMap(data);
-
-    trace.log("ServerLoggingListener.parse; ColumnMap", columnMap);
-    trace.log("ServerLoggingListener.parse; data", data);
-
-    let lastLocation;
-
-    for (let row of data.rows) {
-      let backtrace = row[columnMap.get("backtrace")];
-      let rawLogs = row[columnMap.get("log")];
-      let type = row[columnMap.get("type")] || "log";
-
-      // Old version of the protocol includes a label.
-      // If this is the old version do some converting.
-      if (data.columns.includes("label")) {
-        let label = row[columnMap.get("label")];
-        let showLabel = label && typeof label === "string";
-
-        rawLogs = [rawLogs];
-
-        if (showLabel) {
-          rawLogs.unshift(label);
-        }
-      }
-
-      // If multiple logs come from the same line only the first log
-      // has info about the backtrace. So, remember the last valid
-      // location and use it for those that not set.
-      let location = parseBacktrace(backtrace);
-      if (location) {
-        lastLocation = location;
-      } else {
-        location = lastLocation;
-      }
-
-      parsedMessage.push({
-        logs: rawLogs,
-        location: location,
-        type: type
-      });
-    }
-
-    return parsedMessage;
-  },
-
-  getColumnMap: function(data) {
-    let columnMap = new Map();
-    let columnName;
-
-    for (let key in data.columns) {
-      columnName = data.columns[key];
-      columnMap.set(columnName, key);
-    }
-
-    return columnMap;
-  },
-
-  sendMessage: function(msg) {
-    trace.log("ServerLoggingListener.sendMessage; message", msg);
-
-    let formatted = format(msg);
-    trace.log("ServerLoggingListener.sendMessage; formatted", formatted);
-
-    let win = this.window;
-    let innerID = win ? getInnerId(win) : null;
-    let location = msg.location;
-
-    let message = {
-      category: "server",
-      innerID: innerID,
-      level: msg.type,
-      filename: location ? location.url : null,
-      lineNumber: location ? location.line : null,
-      columnNumber: 0,
-      private: false,
-      timeStamp: Date.now(),
-      arguments: formatted ? formatted.logs : null,
-      styles: formatted ? formatted.styles : null,
-    };
-
-    // Make sure to set the group name.
-    if (msg.type == "group" && formatted && formatted.logs) {
-      message.groupName = formatted ? formatted.logs[0] : null;
-    }
-
-    // A message for console.table() method (passed in as the first
-    // argument) isn't supported. But, it's passed in by some server
-    // side libraries that implement console.* API - let's just remove it.
-    let args = message.arguments;
-    if (msg.type == "table" && args) {
-      if (typeof args[0] == "string") {
-        args.shift();
-      }
-    }
-
-    trace.log("ServerLoggingListener.sendMessage; raw: ",
-      msg.logs.join(", "), message);
-
-    this.owner.onServerLogCall(message);
-  },
-};
-
-// Helpers
-
-/**
- * Parse printf-like specifiers ("%f", "%d", ...) and
- * format the logs according to them.
- */
-function format(msg) {
-  if (!msg.logs || !msg.logs[0]) {
-    return null;
-  }
-
-  // Initialize the styles array (used for the "%c" specifier).
-  msg.styles = [];
-
-  // Remove and get the first log (in which the specifiers are).
-  // Note that the first string doesn't have to be specified.
-  // An example of a log on the server side:
-  // ChromePhp::log("server info: ", $_SERVER);
-  // ChromePhp::log($_SERVER);
-  let firstString = "";
-  if (typeof msg.logs[0] == "string") {
-    firstString = msg.logs.shift();
-  }
-
-  // All the specifiers present in the first string.
-  let splitLogRegExp = /(.*?)(%[oOcsdif]|$)/g;
-  let splitLogRegExpRes;
-  let concatString = "";
-  let pushConcatString = () => {
-    if (concatString) {
-      rebuiltLogArray.push(concatString);
-    }
-    concatString = "";
-  };
-
-  // This array represents the string of the log, in which the specifiers
-  // are replaced. It alternates strings and objects (%o;%O).
-  let rebuiltLogArray = [];
-
-  // Get the strings before the specifiers (or the last chunk before the end
-  // of the string).
-  while ((splitLogRegExpRes = splitLogRegExp.exec(firstString)) !== null) {
-    let [, log, specifier] = splitLogRegExpRes;
-
-    // We may start with a specifier or add consecutively several ones. In such
-    // a case, there is no log.
-    // Example: "%ctest" => first iteration: log = "", specifier = "%c".
-    //                   => second iteration: log = "test", specifier = "".
-    if (log) {
-      concatString += log;
-    }
-
-    // Break now if there is no specifier anymore
-    // (means that we have reached the end of the string).
-    if (!specifier) {
-      break;
-    }
-
-    let argument = msg.logs.shift();
-    switch (specifier) {
-      case "%i":
-      case "%d":
-        // Parse into integer.
-        concatString += (argument | 0);
-        break;
-      case "%f":
-        // Parse into float.
-        concatString += (+argument);
-        break;
-      case "%o":
-      case "%O":
-        // Push the concatenated string and reinitialize concatString.
-        pushConcatString();
-        // Push the object.
-        rebuiltLogArray.push(argument);
-        break;
-      case "%s":
-        concatString += argument;
-        break;
-      case "%c":
-        pushConcatString();
-        let fillNullArrayLength = rebuiltLogArray.length - msg.styles.length;
-        let fillNullArray = Array(fillNullArrayLength).fill(null);
-        msg.styles.push(...fillNullArray, argument);
-        break;
-    }
-  }
-
-  if (concatString) {
-    rebuiltLogArray.push(concatString);
-  }
-
-  // Append the rest of arguments that don't have corresponding
-  // specifiers to the message logs.
-  msg.logs.unshift(...rebuiltLogArray);
-
-  // Remove special ___class_name property that isn't supported
-  // by the current implementation. This property represents object class
-  // allowing custom rendering in the console panel.
-  for (let log of msg.logs) {
-    if (typeof log == "object") {
-      delete log.___class_name;
-    }
-  }
-
-  return msg;
-}
-
-function parseBacktrace(backtrace) {
-  if (!backtrace) {
-    return null;
-  }
-
-  let result = backtrace.match(/^(.+?)\s*:\s*(\d+)$/);
-  if (!result || result.length != 3) {
-    return { url: backtrace };
-  }
-
-  return {
-    url: result[1],
-    line: parseInt(result[2], 10)
-  };
-}
-
-// These helper are cloned from SDK to avoid loading to
-// much SDK modules just because of two functions.
-function getInnerId(win) {
-  return win.QueryInterface(Ci.nsIInterfaceRequestor)
-    .getInterface(Ci.nsIDOMWindowUtils).currentInnerWindowID;
-}
-
-// Exports from this module
-exports.ServerLoggingListener = ServerLoggingListener;
-exports.parseBacktrace = parseBacktrace;
