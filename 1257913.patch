# HG changeset patch
# User Jaideep Bhoosreddy <jaideepb@buffalo.edu>
# Parent  199230f44725b8e4919a5014b9649a9951383355

diff --git a/devtools/client/framework/toolbox-options.js b/devtools/client/framework/toolbox-options.js
--- a/devtools/client/framework/toolbox-options.js
+++ b/devtools/client/framework/toolbox-options.js
@@ -152,45 +152,83 @@ OptionsPanel.prototype = {
 
     let toggleableButtons = this.toolbox.toolboxButtons;
     let setToolboxButtonsVisibility =
       this.toolbox.setToolboxButtonsVisibility.bind(this.toolbox);
 
     let onCheckboxClick = (checkbox) => {
       let toolDefinition = toggleableButtons.filter(
         toggleableButton => toggleableButton.id === checkbox.id)[0];
-      Services.prefs.setBoolPref(
-        toolDefinition.visibilityswitch, checkbox.checked);
-      setToolboxButtonsVisibility();
+      if (typeof toolDefinition != "undefined") {
+        Services.prefs.setBoolPref(
+            toolDefinition.visibilityswitch, checkbox.checked);
+        setToolboxButtonsVisibility();
+      } else {
+        Services.prefs.setBoolPref("devtools.screenshot-clipboard.enabled",
+            checkbox.checked);
+        const toolbarPref = "devtools.toolbox.toolbarSpec";
+        let toolbarSpec = JSON.parse(GetPref(toolbarPref));
+        let newToolbarSpec = Object.assign([], toolbarSpec);
+        if (checkbox.checked) {
+          newToolbarSpec[5] = "screenshot --clipboard";
+        } else {
+          newToolbarSpec[5] = "screenshot --fullpage";
+        }
+        setPrefAndEmit(toolbarPref, JSON.stringify(newToolbarSpec));
+      }
+      if (checkbox.id == "command-button-screenshot") {
+        while (enabledToolbarButtonsBox.firstChild) {
+          enabledToolbarButtonsBox.removeChild(
+              enabledToolbarButtonsBox.firstChild
+          );
+        }
+        this.setupToolbarButtonsList();
+      }
     };
 
     let createCommandCheckbox = tool => {
       let checkboxLabel = this.panelDoc.createElement("label");
       let checkboxSpanLabel = this.panelDoc.createElement("span");
       checkboxSpanLabel.textContent = tool.label;
       let checkboxInput = this.panelDoc.createElement("input");
       checkboxInput.setAttribute("type", "checkbox");
       checkboxInput.setAttribute("id", tool.id);
       if (InfallibleGetBoolPref(tool.visibilityswitch)) {
         checkboxInput.setAttribute("checked", true);
       }
+      if (tool.disabled) {
+        checkboxInput.setAttribute("disabled", true);
+      }
       checkboxInput.addEventListener("change",
         onCheckboxClick.bind(this, checkboxInput));
 
       checkboxLabel.appendChild(checkboxInput);
       checkboxLabel.appendChild(checkboxSpanLabel);
       return checkboxLabel;
     };
 
     for (let tool of toggleableButtons) {
       if (!tool.isTargetSupported(this.toolbox.target)) {
         continue;
       }
 
       enabledToolbarButtonsBox.appendChild(createCommandCheckbox(tool));
+
+      if (tool.id == "command-button-screenshot") {
+        let clipboardTool = Object.assign({}, tool, {
+          label: "Copy screenshot to clipboard",
+          id: "command-button-screenshot-clipboard",
+          visibilityswitch: "devtools.screenshot-clipboard.enabled",
+          disabled: false
+        });
+        const disabled =
+            !InfallibleGetBoolPref("devtools.command-button-screenshot.enabled");
+        clipboardTool.disabled = disabled;
+        enabledToolbarButtonsBox.appendChild(createCommandCheckbox(clipboardTool));
+      }
     }
   },
 
   setupToolsList: function () {
     let defaultToolsBox = this.panelDoc.getElementById("default-tools-box");
     let additionalToolsBox = this.panelDoc.getElementById(
       "additional-tools-box");
     let toolsNotSupportedLabel = this.panelDoc.getElementById(
diff --git a/devtools/client/framework/toolbox.js b/devtools/client/framework/toolbox.js
--- a/devtools/client/framework/toolbox.js
+++ b/devtools/client/framework/toolbox.js
@@ -519,16 +519,19 @@ Toolbox.prototype = {
   _prefChanged: function (event, data) {
     switch (data.pref) {
       case "devtools.cache.disabled":
         this._applyCacheSettings();
         break;
       case "devtools.serviceWorkers.testing.enabled":
         this._applyServiceWorkersTestingSettings();
         break;
+      case "devtools.toolbox.toolbarSpec":
+        this._rebuildButtons();
+        break;
     }
   },
 
   _buildOptions: function (shortcuts) {
     let selectOptions = (name, event) => {
       // Flip back to the last used panel if we are already
       // on the options panel.
       if (this.currentToolId === "options" &&
@@ -1044,16 +1047,27 @@ Toolbox.prototype = {
                                             }
                                           });
                                           this.setToolboxButtonsVisibility();
                                         });
     });
   },
 
   /**
+   * Rebuild toolbox buttons again, if needed to reload from Spec.
+   */
+  _rebuildButtons: function () {
+    let container = this.doc.getElementById("toolbox-buttons");
+    while (container.firstChild) {
+      container.removeChild(container.firstChild);
+    }
+    this._buildButtons();
+  },
+
+  /**
    * Adding the element picker button is done here unlike the other buttons
    * since we want it to work for remote targets too
    */
   _buildPickerButton: function () {
     this._pickerButton = this.doc.createElement("toolbarbutton");
     this._pickerButton.id = "command-button-pick";
     this._pickerButton.className = "command-button command-button-invertable";
     this._pickerButton.setAttribute("tooltiptext", toolboxStrings("pickButton.tooltip"));
diff --git a/devtools/client/preferences/devtools.js b/devtools/client/preferences/devtools.js
--- a/devtools/client/preferences/devtools.js
+++ b/devtools/client/preferences/devtools.js
@@ -25,17 +25,17 @@ pref("devtools.toolbar.visible", false);
 pref("devtools.webide.enabled", true);
 
 // Toolbox preferences
 pref("devtools.toolbox.footer.height", 250);
 pref("devtools.toolbox.sidebar.width", 500);
 pref("devtools.toolbox.host", "bottom");
 pref("devtools.toolbox.previousHost", "side");
 pref("devtools.toolbox.selectedTool", "webconsole");
-pref("devtools.toolbox.toolbarSpec", '["splitconsole", "paintflashing toggle","scratchpad","resize toggle","eyedropper","screenshot --fullpage", "rulers", "measure"]');
+pref("devtools.toolbox.toolbarSpec", '["splitconsole", "paintflashing toggle","scratchpad","resize toggle","eyedropper","screenshot --clipboard", "rulers", "measure"]');
 pref("devtools.toolbox.sideEnabled", true);
 pref("devtools.toolbox.zoomValue", "1");
 pref("devtools.toolbox.splitconsoleEnabled", false);
 pref("devtools.toolbox.splitconsoleHeight", 100);
 
 // Toolbox Button preferences
 pref("devtools.command-button-pick.enabled", true);
 pref("devtools.command-button-frames.enabled", true);
@@ -339,8 +339,11 @@ pref("devtools.telemetry.tools.opened.ve
 pref("devtools.jsonview.enabled", false);
 #else
 pref("devtools.jsonview.enabled", true);
 #endif
 
 // Disable the HTML responsive design tool by default.  Currently disabled until
 // ready to replace the legacy XUL version.
 pref("devtools.responsive.html.enabled", false);
+
+// Copy screenshot to clipboard preference flag
+pref("devtools.screenshot-clipboard.enabled", false);
\ No newline at end of file
diff --git a/devtools/shared/gcli/commands/screenshot.js b/devtools/shared/gcli/commands/screenshot.js
--- a/devtools/shared/gcli/commands/screenshot.js
+++ b/devtools/shared/gcli/commands/screenshot.js
@@ -311,17 +311,22 @@ function createScreenshotData(document, 
   ctx.scale(ratio, ratio);
   ctx.drawWindow(window, left, top, width, height, "#fff");
   const data = canvas.toDataURL("image/png", "");
 
   // See comment above on bug 961832
   if (args.fullpage) {
     window.scrollTo(currentX, currentY);
   }
-
+  const BASE_URL = "resource://devtools/client/responsive.html";
+  const audioCamera = new window.Audio(`${BASE_URL}/audio/camera-click.mp3`);
+  audioCamera.play();
+  const selector = args.selector ? args.selector : "html";
+  const node = document.querySelector(selector);
+  node.animate({ opacity: [ 0, 1 ] }, 500);
   return Promise.resolve({
     destinations: [],
     data: data,
     height: height,
     width: width,
     filename: getFilename(args.filename),
   });
 }
