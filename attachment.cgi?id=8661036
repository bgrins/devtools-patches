# HG changeset patch
# User jarjun <arjun.jain@duke.edu>
# Parent  a2ad0230946a4acc5c5cf9f6fa76d93aa7b2b861

patch for bug: 1039482

diff --git a/devtools/client/projecteditor/lib/tree.js b/devtools/client/projecteditor/lib/tree.js
--- a/devtools/client/projecteditor/lib/tree.js
+++ b/devtools/client/projecteditor/lib/tree.js
@@ -241,19 +241,29 @@ var TreeView = Class({
    *          Rejected if it is cancelled
    */
   promptNew: function(initial, parent, sibling=null) {
     let deferred = promise.defer();
 
     let parentContainer = this._containers.get(parent);
     let item = this.doc.createElement("li");
     item.className = "child";
+
+    let inputholder = this.doc.createElementNS(HTML_NS, "div");
+    inputholder.className = "child entry";
+    item.appendChild(inputholder);
+
+    let expander = this.doc.createElementNS(HTML_NS, "span");
+    expander.className = "arrow expander";
+    expander.setAttribute("invisible", "");
+    inputholder.appendChild(expander);
+
     let placeholder = this.doc.createElementNS(HTML_NS, "div");
     placeholder.className = "child";
-    item.appendChild(placeholder);
+    inputholder.appendChild(placeholder);
 
     let children = parentContainer.children;
     sibling = sibling ? this._containers.get(sibling).elt : null;
     parentContainer.children.insertBefore(item, sibling ? sibling.nextSibling : children.firstChild);
 
     new InplaceEditor({
       element: placeholder,
       initial: initial,
@@ -284,25 +294,47 @@ var TreeView = Class({
    * @param resource
    *
    * @returns Promise
    *          Resolves once the prompt has been successful,
    *          Rejected if it is cancelled
    */
   promptEdit: function(initial, resource) {
     let deferred = promise.defer();
-    let placeholder = this._containers.get(resource).elt;
+    let item = this._containers.get(resource).elt;
+    let originalText = item.childNodes[0];
+
+    let inputholder = this.doc.createElementNS(HTML_NS, "div");
+    inputholder.className = "child entry";
+    item.insertBefore(inputholder, originalText);
+
+    let expander = this.doc.createElementNS(HTML_NS, "span");
+    expander.className = "arrow expander";
+    expander.setAttribute("invisible", "");
+    inputholder.appendChild(expander);
+
+    let placeholder = this.doc.createElementNS(HTML_NS, "div");
+    placeholder.className = "child";
+    inputholder.appendChild(placeholder);
+
+    item.removeChild(originalText);
 
     new InplaceEditor({
       element: placeholder,
       initial: initial,
       start: editor => {
         editor.input.select();
       },
       done: function(val, commit) {
+        if(val==initial){
+          item.insertBefore(originalText, inputholder);
+        }
+
+        item.removeChild(inputholder);
+
         if (commit) {
           deferred.resolve(val);
         } else {
           deferred.reject(val);
         }
       },
     });
 
diff --git a/devtools/client/shared/inplace-editor.js b/devtools/client/shared/inplace-editor.js
--- a/devtools/client/shared/inplace-editor.js
+++ b/devtools/client/shared/inplace-editor.js
@@ -275,16 +275,17 @@ InplaceEditor.CONTENT_TYPES = CONTENT_TY
 InplaceEditor.prototype = {
 
   get currentInputValue() {
     let val = this.trimOutput ? this.input.value.trim() : this.input.value;
     return val;
   },
 
   _createInput: function() {
+
     this.input =
       this.doc.createElementNS(HTML_NS, this.multiline ? "textarea" : "input");
     this.input.inplaceEditor = this;
     this.input.classList.add("styleinspector-propertyeditor");
     this.input.value = this.initial;
 
     copyTextStyles(this.elt, this.input);
   },
@@ -995,17 +996,16 @@ InplaceEditor.prototype = {
         // If the next node to be focused has been tagged as an editable
         // node, trigger editing using the configured event
         if (next && next.ownerDocument === this.doc && next._editable) {
           let e = this.doc.createEvent("Event");
           e.initEvent(next._trigger, true, true);
           next.dispatchEvent(e);
         }
       }
-
       this._clear();
     } else if (event.keyCode === Ci.nsIDOMKeyEvent.DOM_VK_ESCAPE) {
       // Cancel and blur ourselves.
       // Now we don't want to suggest anything as we are moving out.
       this._preventSuggestions = true;
       // Close the popup if open
       if (this.popup && this.popup.isOpen) {
         this.popup.hidePopup();
@@ -1215,20 +1215,17 @@ InplaceEditor.prototype = {
 };
 
 /**
  * Copy text-related styles from one element to another.
  */
 function copyTextStyles(from, to) {
   let win = from.ownerDocument.defaultView;
   let style = win.getComputedStyle(from);
-  to.style.fontFamily = style.getPropertyCSSValue("font-family").cssText;
-  to.style.fontSize = style.getPropertyCSSValue("font-size").cssText;
-  to.style.fontWeight = style.getPropertyCSSValue("font-weight").cssText;
-  to.style.fontStyle = style.getPropertyCSSValue("font-style").cssText;
+  to.style.font = style.font;
 }
 
 /**
  * Trigger a focus change similar to pressing tab/shift-tab.
  */
 function moveFocus(win, direction) {
   return focusManager.moveFocus(win, null, direction, 0);
 }
diff --git a/devtools/client/themes/projecteditor/projecteditor.css b/devtools/client/themes/projecteditor/projecteditor.css
--- a/devtools/client/themes/projecteditor/projecteditor.css
+++ b/devtools/client/themes/projecteditor/projecteditor.css
@@ -52,17 +52,17 @@
 
   /* Allows this to expand inside of parent xul element, while
      still supporting child flexbox elements, including ellipses. */
   -moz-box-flex: 1;
   display: block;
 }
 
 .sources-tree input {
-  margin: 2px;
+  margin: -1px;
   border: 1px solid gray;
 }
 
 #main-deck .sources-tree {
   background: rgb(225, 225, 225);
   min-width: 100px;
 }
 
