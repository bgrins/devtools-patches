
# HG changeset patch
# User Emilio Cobos √Ålvarez <emilio@crisal.io>
# Date 1584010236 -3600
# Node ID e5846fa0e13da8d0a837147bd70d7f2061649df5
# Parent  f05a0084c5f20abf47fa332ab5ec5c953ba48eb1
Add basic OpaqueShadowRoot interface.

diff --git a/dom/base/Element.cpp b/dom/base/Element.cpp
--- a/dom/base/Element.cpp
+++ b/dom/base/Element.cpp
@@ -121,16 +121,17 @@
 #include "nsDOMMutationObserver.h"
 #include "nsWrapperCacheInlines.h"
 #include "xpcpublic.h"
 #include "nsIScriptError.h"
 #include "mozilla/Telemetry.h"
 
 #include "mozilla/CORSMode.h"
 #include "mozilla/dom/ShadowRoot.h"
+#include "mozilla/dom/OpaqueShadowRoot.h"
 #include "mozilla/dom/NodeListBinding.h"
 
 #include "nsStyledElement.h"
 #include "nsITextControlFrame.h"
 #include "nsISupportsImpl.h"
 #include "mozilla/dom/CSSPseudoElement.h"
 #include "mozilla/dom/DocumentFragment.h"
 #include "mozilla/dom/ElementBinding.h"
@@ -1118,16 +1119,28 @@ already_AddRefed<ShadowRoot> Element::At
   }
 
   /**
    * 6. Return shadow.
    */
   return shadowRoot.forget();
 }
 
+already_AddRefed<OpaqueShadowRoot> Element::AttachOpaqueShadow(
+    ErrorResult& aRv) {
+  ShadowRootInit init;
+  init.mMode = ShadowRootMode::Closed;
+  RefPtr<ShadowRoot> shadow = AttachShadow(init, aRv);
+  if (aRv.Failed()) {
+    return nullptr;
+  }
+  auto opaque = MakeRefPtr<OpaqueShadowRoot>(std::move(shadow));
+  return opaque.forget();
+}
+
 void Element::AttachAndSetUAShadowRoot() {
   MOZ_DIAGNOSTIC_ASSERT(!CanAttachShadowDOM(),
                         "Cannot be used to attach UI shadow DOM");
 
   // Attach the UA Widget Shadow Root in a runnable so that the code runs
   // in the same order of NotifyUAWidget* calls.
   nsContentUtils::AddScriptRunner(NS_NewRunnableFunction(
       "Element::AttachAndSetUAShadowRoot::Runnable",
diff --git a/dom/base/Element.h b/dom/base/Element.h
--- a/dom/base/Element.h
+++ b/dom/base/Element.h
@@ -85,16 +85,17 @@ struct ScrollToOptions;
 class DOMIntersectionObserver;
 class DOMMatrixReadOnly;
 class Element;
 class ElementOrCSSPseudoElement;
 class UnrestrictedDoubleOrKeyframeAnimationOptions;
 enum class CallerType : uint32_t;
 typedef nsDataHashtable<nsRefPtrHashKey<DOMIntersectionObserver>, int32_t>
     IntersectionObserverList;
+class OpaqueShadowRoot;
 }  // namespace dom
 }  // namespace mozilla
 
 // Declared here because of include hell.
 extern "C" bool Servo_Element_IsDisplayContents(const mozilla::dom::Element*);
 
 already_AddRefed<nsContentList> NS_GetContentList(nsINode* aRootNode,
                                                   int32_t aMatchNameSpaceId,
@@ -1250,16 +1251,18 @@ class Element : public FragmentOrElement
   MOZ_CAN_RUN_SCRIPT already_AddRefed<DOMRectList> GetClientRects();
   MOZ_CAN_RUN_SCRIPT already_AddRefed<DOMRect> GetBoundingClientRect();
 
   // Shadow DOM v1
   already_AddRefed<ShadowRoot> AttachShadow(const ShadowRootInit& aInit,
                                             ErrorResult& aError);
   bool CanAttachShadowDOM() const;
 
+  already_AddRefed<OpaqueShadowRoot> AttachOpaqueShadow(ErrorResult&);
+
   already_AddRefed<ShadowRoot> AttachShadowWithoutNameChecks(
       ShadowRootMode aMode);
 
   // Attach UA Shadow Root if it is not attached.
   void AttachAndSetUAShadowRoot();
 
   // Dispatch an event to UAWidgetsChild, triggering construction
   // or onchange callback on the existing widget.
diff --git a/dom/base/OpaqueShadowRoot.cpp b/dom/base/OpaqueShadowRoot.cpp
new file mode 100644
--- /dev/null
+++ b/dom/base/OpaqueShadowRoot.cpp
@@ -0,0 +1,37 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "OpaqueShadowRoot.h"
+#include "mozilla/dom/ShadowRoot.h"
+#include "mozilla/dom/OpaqueShadowRootBinding.h"
+
+namespace mozilla {
+namespace dom {
+
+
+NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE(OpaqueShadowRoot, mShadowRoot)
+
+NS_IMPL_CYCLE_COLLECTION_ROOT_NATIVE(OpaqueShadowRoot, AddRef)
+NS_IMPL_CYCLE_COLLECTION_UNROOT_NATIVE(OpaqueShadowRoot, Release)
+
+nsISupports* OpaqueShadowRoot::GetParentObject() const {
+  return ToSupports(mShadowRoot);
+}
+
+OpaqueShadowRoot::OpaqueShadowRoot(RefPtr<ShadowRoot> aRoot)
+  : mShadowRoot(std::move(aRoot)) {
+  MOZ_ASSERT(mShadowRoot);
+}
+
+void OpaqueShadowRoot::Render() { /* TODO */ }
+
+JSObject* OpaqueShadowRoot::WrapObject(JSContext* aCx,
+                                       JS::Handle<JSObject*> aGivenProto) {
+  return OpaqueShadowRoot_Binding::Wrap(aCx, this, aGivenProto);
+}
+
+}
+}
diff --git a/dom/base/OpaqueShadowRoot.h b/dom/base/OpaqueShadowRoot.h
new file mode 100644
--- /dev/null
+++ b/dom/base/OpaqueShadowRoot.h
@@ -0,0 +1,40 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_dom_OpaqueShadowRoot_h__
+#define mozilla_dom_OpaqueShadowRoot_h__
+
+#include "nsWrapperCache.h"
+#include "nsCycleCollectionParticipant.h"
+
+namespace mozilla {
+
+namespace dom {
+
+class ShadowRoot;
+
+class OpaqueShadowRoot final : public nsWrapperCache {
+  NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING(OpaqueShadowRoot)
+  NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_NATIVE_CLASS(OpaqueShadowRoot)
+
+ public:
+  explicit OpaqueShadowRoot(RefPtr<ShadowRoot>);
+  void Render();
+
+  nsISupports* GetParentObject() const;
+  JSObject* WrapObject(JSContext*, JS::Handle<JSObject*> aGivenProto) final;
+
+ private:
+  virtual ~OpaqueShadowRoot() = default;
+
+  RefPtr<ShadowRoot> mShadowRoot;
+};
+
+} // namespace dom
+
+} // namespace mozilla
+
+#endif
diff --git a/dom/base/UseCounters.conf b/dom/base/UseCounters.conf
--- a/dom/base/UseCounters.conf
+++ b/dom/base/UseCounters.conf
@@ -115,16 +115,17 @@ custom HTMLDocumentNamedGetterHit calls 
 
 custom FilteredCrossOriginIFrame cross-origin <iframe> within a CSS/SVG filter
 
 // Custom Elements
 method CustomElementRegistry.define
 
 // Shadow DOM
 method Element.attachShadow
+method Element.attachOpaqueShadow
 
 // Media Device Access
 method MediaDevices.enumerateDevices
 custom EnumerateDevicesInsec calls MediaDevices.enumerateDevices from an insecure context
 custom EnumerateDevicesUnfocused calls MediaDevices.enumerateDevices from a unfocused document
 method MediaDevices.getUserMedia
 method Navigator.mozGetUserMedia
 custom GetUserMediaUnfocused calls MediaDevices.getUserMedia from an unfocused document
diff --git a/dom/base/moz.build b/dom/base/moz.build
--- a/dom/base/moz.build
+++ b/dom/base/moz.build
@@ -206,16 +206,17 @@ EXPORTS.mozilla.dom += [
     'MimeType.h',
     'MozQueryInterface.h',
     'MutationObservers.h',
     'NameSpaceConstants.h',
     'Navigator.h',
     'NodeInfo.h',
     'NodeInfoInlines.h',
     'NodeIterator.h',
+    'OpaqueShadowRoot.h',
     'ParentProcessMessageManager.h',
     'PlacesBookmark.h',
     'PlacesBookmarkAddition.h',
     'PlacesBookmarkRemoved.h',
     'PlacesEvent.h',
     'PlacesObservers.h',
     'PlacesVisit.h',
     'PlacesWeakCallbackWrapper.h',
@@ -384,16 +385,17 @@ UNIFIED_SOURCES += [
     'nsTraversal.cpp',
     'nsTreeSanitizer.cpp',
     'nsViewportInfo.cpp',
     'nsWindowMemoryReporter.cpp',
     'nsWindowRoot.cpp',
     'nsWrapperCache.cpp',
     'nsXHTMLContentSerializer.cpp',
     'nsXMLContentSerializer.cpp',
+    'OpaqueShadowRoot.cpp',
     'ParentProcessMessageManager.cpp',
     'PopupBlocker.cpp',
     'Pose.cpp',
     'PostMessageEvent.cpp',
     'ProcessMessageManager.cpp',
     'RangeUtils.cpp',
     'RemoteOuterWindowProxy.cpp',
     'ResizeObserver.cpp',
diff --git a/dom/webidl/Element.webidl b/dom/webidl/Element.webidl
--- a/dom/webidl/Element.webidl
+++ b/dom/webidl/Element.webidl
@@ -260,16 +260,20 @@ dictionary ShadowRootInit {
   required ShadowRootMode mode;
 };
 
 // https://dom.spec.whatwg.org/#element
 partial interface Element {
   // Shadow DOM v1
   [Throws, UseCounter]
   ShadowRoot attachShadow(ShadowRootInit shadowRootInitDict);
+
+  [Throws, UseCounter]
+  OpaqueShadowRoot attachOpaqueShadow();
+
   [BinaryName="shadowRootByMode"]
   readonly attribute ShadowRoot? shadowRoot;
 
   [Func="Document::IsCallerChromeOrAddon", BinaryName="shadowRoot"]
   readonly attribute ShadowRoot? openOrClosedShadowRoot;
 
   [BinaryName="assignedSlotByMode"]
   readonly attribute HTMLSlotElement? assignedSlot;
diff --git a/dom/webidl/OpaqueShadowRoot.webidl b/dom/webidl/OpaqueShadowRoot.webidl
new file mode 100644
--- /dev/null
+++ b/dom/webidl/OpaqueShadowRoot.webidl
@@ -0,0 +1,10 @@
+/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+[Exposed=Window]
+interface OpaqueShadowRoot {
+  void render();
+};
diff --git a/dom/webidl/moz.build b/dom/webidl/moz.build
--- a/dom/webidl/moz.build
+++ b/dom/webidl/moz.build
@@ -723,16 +723,17 @@ WEBIDL_FILES = [
     'NodeIterator.webidl',
     'NodeList.webidl',
     'Notification.webidl',
     'NotificationEvent.webidl',
     'NotifyPaintEvent.webidl',
     'OfflineAudioContext.webidl',
     'OfflineResourceList.webidl',
     'OffscreenCanvas.webidl',
+    'OpaqueShadowRoot.webidl',
     'OscillatorNode.webidl',
     'PaintRequest.webidl',
     'PaintRequestList.webidl',
     'PaintWorkletGlobalScope.webidl',
     'PannerNode.webidl',
     'ParentNode.webidl',
     'PaymentAddress.webidl',
     'PaymentMethodChangeEvent.webidl',

