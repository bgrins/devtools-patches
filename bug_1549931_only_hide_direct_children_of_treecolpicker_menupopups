# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1557422255 25200
#      Thu May 09 10:17:35 2019 -0700
# Node ID 5fbe47e5a313c0c6d8014fc299ad83aecd3f6123
# Parent  34b343ca6c2a44e1fd4402a0d7eb247cc2c6df2e
Bug 1549931 - Only hide direct children of treecolpicker menupopups

Since the menuitem DOM is not anonymous anymore, without scoping the selector
we end up hiding contents of menuitems as well.

Differential Revision: https://phabricator.services.mozilla.com/D30521

diff --git a/toolkit/content/tests/widgets/tree_shared.js b/toolkit/content/tests/widgets/tree_shared.js
--- a/toolkit/content/tests/widgets/tree_shared.js
+++ b/toolkit/content/tests/widgets/tree_shared.js
@@ -20,17 +20,17 @@ var columns_hiertree =
 
 // XXXndeakin still to add some tests for:
 //   cycler columns, checkbox cells
 
 // this test function expects a tree to have 8 rows in it when it isn't
 // expanded. The tree should only display four rows at a time. If editable,
 // the cell at row 1 and column 0 must be editable, and the cell at row 2 and
 // column 1 must not be editable.
-function testtag_tree(treeid, treerowinfoid, seltype, columnstype, testid) {
+async function testtag_tree(treeid, treerowinfoid, seltype, columnstype, testid) {
   // Stop keystrokes that aren't handled by the tree from leaking out and
   // scrolling the main Mochitests window!
   function preventDefault(event) {
     event.preventDefault();
   }
   document.addEventListener("keypress", preventDefault);
 
   var multiple = (seltype == "multiple");
@@ -43,17 +43,17 @@ function testtag_tree(treeid, treerowinf
   else
     rowInfo = convertDOMtoTreeRowInfo(treerowinfo, 0, { value: -1 });
   var columnInfo = (columnstype == "simple") ? columns_simpletree : columns_hiertree;
 
   is(tree.selType, seltype == "multiple" ? "" : seltype, testid + " seltype");
 
   // note: the functions below should be in this order due to changes made in later tests
 
-  testtag_tree_columns(tree, columnInfo, testid);
+  await testtag_tree_columns(tree, columnInfo, testid);
   testtag_tree_TreeSelection(tree, testid, multiple);
   testtag_tree_TreeSelection_UI(tree, testid, multiple);
   testtag_tree_TreeView(tree, testid, rowInfo);
 
   is(tree.editable, false, "tree should not be editable");
   // currently, the editable flag means that tree editing cannot be invoked
   // by the user. However, editing can still be started with a script.
   is(tree.editingRow, -1, testid + " initial editingRow");
@@ -115,19 +115,42 @@ function testtag_tree(treeid, treerowinf
 
   testtag_tree_wheel(tree);
 
   document.removeEventListener("keypress", preventDefault);
 
   SimpleTest.finish();
 }
 
-function testtag_tree_columns(tree, expectedColumns, testid) {
+async function testtag_tree_columns(tree, expectedColumns, testid) {
   testid += " ";
 
+  let treecolpicker = tree.querySelector("treecolpicker");
+  let treecolpickerMenupopup = treecolpicker.querySelector("menupopup");
+
+  function assertTreecolpicker() {
+    let menuitems = treecolpicker.querySelectorAll("menuitem");
+    // Ignore the last "Restore Column Order" menu
+    is(menuitems.length - 1, expectedColumns.length, "Same number of columns");
+    for (var c = 0; c < expectedColumns.length; c++) {
+      is(menuitems[c].textContent, expectedColumns[c].label, "treecolpicker menu matches");
+    }
+  }
+
+  await new Promise(resolve => {
+    treecolpickerMenupopup.addEventListener("popupshown", resolve, { once: true });
+    treecolpicker.click();
+  });
+  assertTreecolpicker();
+  await new Promise(resolve => {
+    treecolpickerMenupopup.addEventListener("popuphidden", resolve, { once: true });
+    treecolpickerMenupopup.hidePopup();
+  });
+  assertTreecolpicker();
+
   var columns = tree.columns;
 
   is(columns instanceof TreeColumns, true, testid + "columns is a TreeColumns");
   is(columns.count, expectedColumns.length, testid + "TreeColumns count");
   is(columns.length, expectedColumns.length, testid + "TreeColumns length");
 
   var treecols = tree.getElementsByTagName("treecols")[0];
   var treecol = treecols.getElementsByTagName("treecol");
diff --git a/toolkit/content/widgets/tree.js b/toolkit/content/widgets/tree.js
--- a/toolkit/content/widgets/tree.js
+++ b/toolkit/content/widgets/tree.js
@@ -236,17 +236,17 @@
             popupChild.setAttribute("checked", "true");
           if (currCol.primary)
             popupChild.setAttribute("disabled", "true");
           aPopup.insertBefore(popupChild, refChild);
         }
       }
 
       var hidden = !tree.enableColumnDrag;
-      aPopup.querySelectorAll(":not([colindex])").forEach((e) => { e.hidden = hidden; });
+      aPopup.querySelectorAll(":scope > :not([colindex])").forEach((e) => { e.hidden = hidden; });
     }
   }
 
   customElements.define("treecolpicker", MozTreecolPicker);
 
   class MozTreecol extends MozElements.BaseControl {
     static get inheritedAttributes() {
       return {
