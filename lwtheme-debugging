# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  c113a12800202e13d07c52f7b28a02383ea7f5f2
asdfsa

diff --git a/browser/components/nsBrowserGlue.js b/browser/components/nsBrowserGlue.js
--- a/browser/components/nsBrowserGlue.js
+++ b/browser/components/nsBrowserGlue.js
@@ -192,16 +192,33 @@ function recordDefaultSearchEngine() {
   } else {
     name = "UNDEFINED";
   }
 
   let engines = Services.telemetry.getKeyedHistogramById("SEARCH_DEFAULT_ENGINE");
   engines.add(name, true)
 }
 
+
+#ifndef RELEASE_BUILD
+    let themeName = gBrowserBundle.GetStringFromName("deveditionTheme.name");
+    let vendorShortName = gBrandBundle.GetStringFromName("vendorShortName");
+
+    LightweightThemeManager.addBuiltInTheme({
+      id: "firefox-devedition@mozilla.org",
+      name: themeName,
+#ifdef XP_WIN
+      accentcolor: "transparent",
+#endif
+      headerURL: "resource:///chrome/browser/content/browser/defaultthemes/devedition.header.png",
+      iconURL: "resource:///chrome/browser/content/browser/defaultthemes/devedition.icon.png",
+      author: vendorShortName,
+    });
+#endif
+
 // Factory object
 const BrowserGlueServiceFactory = {
   _instance: null,
   createInstance: function BGSF_createInstance(outer, iid) {
     if (outer != null)
       throw Components.results.NS_ERROR_NO_AGGREGATION;
     return this._instance == null ?
       this._instance = new BrowserGlue() : this._instance;
@@ -727,32 +744,16 @@ BrowserGlue.prototype = {
     ReaderParent.init();
 
     SelfSupportBackend.init();
 
 #ifdef NIGHTLY_BUILD
     Services.prefs.addObserver(POLARIS_ENABLED, this, false);
 #endif
 
-#ifndef RELEASE_BUILD
-    let themeName = gBrowserBundle.GetStringFromName("deveditionTheme.name");
-    let vendorShortName = gBrandBundle.GetStringFromName("vendorShortName");
-
-    LightweightThemeManager.addBuiltInTheme({
-      id: "firefox-devedition@mozilla.org",
-      name: themeName,
-#ifdef XP_WIN
-      accentcolor: "transparent",
-#endif
-      headerURL: "resource:///chrome/browser/content/browser/defaultthemes/devedition.header.png",
-      iconURL: "resource:///chrome/browser/content/browser/defaultthemes/devedition.icon.png",
-      author: vendorShortName,
-    });
-#endif
-
 #ifdef MOZ_CRASHREPORTER
     TabCrashReporter.init();
     PluginCrashReporter.init();
 #endif
 
     Services.obs.notifyObservers(null, "browser-ui-startup-complete", "");
 
 #ifdef NIGHTLY_BUILD
diff --git a/toolkit/mozapps/extensions/LightweightThemeManager.jsm b/toolkit/mozapps/extensions/LightweightThemeManager.jsm
--- a/toolkit/mozapps/extensions/LightweightThemeManager.jsm
+++ b/toolkit/mozapps/extensions/LightweightThemeManager.jsm
@@ -308,25 +308,35 @@ this.LightweightThemeManager = {
     Services.obs.notifyObservers(null, "lightweight-theme-changed", null);
   },
 
   /**
    * Starts the Addons provider and enables the new lightweight theme if
    * necessary.
    */
   startup: function LightweightThemeManager_startup() {
+    const {console} = Components.utils.import("resource://gre/modules/devtools/Console.jsm", {});
+    console.log("Startup");
     if (Services.prefs.prefHasUserValue(PREF_LWTHEME_TO_SELECT)) {
       let id = Services.prefs.getCharPref(PREF_LWTHEME_TO_SELECT);
       if (id)
         this.themeChanged(this.getUsedTheme(id));
       else
         this.themeChanged(null);
       Services.prefs.clearUserPref(PREF_LWTHEME_TO_SELECT);
     }
 
+
+    let currentTheme = this.currentTheme;
+    console.log("HERE", currentTheme, new AddonWrapper(currentTheme));
+    if (currentTheme) {
+      // let addon = this.getAddonByID(currentTheme.id);
+      // console.log("HERE2", addon);
+    }
+
     _prefs.addObserver("", _prefObserver, false);
   },
 
   /**
    * Shuts down the provider.
    */
   shutdown: function LightweightThemeManager_shutdown() {
     _prefs.removeObserver("", _prefObserver);
