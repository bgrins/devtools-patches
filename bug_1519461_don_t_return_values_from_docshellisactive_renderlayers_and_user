# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1547253298 28800
#      Fri Jan 11 16:34:58 2019 -0800
# Node ID be794f4c0cb8bfd78b6feb53463730c43f4463c7
# Parent  b7d621aacdce8dce9cae6ed75f1ba69c81b4d780
Bug 1519461 - Don't return values from docShellIsActive, renderLayers, and userTypedValue setters;r=mconley

This is more consistent with other setters, and lets us handle the null frameLoader
case a bit more simply.

Differential Revision: https://phabricator.services.mozilla.com/D16370

diff --git a/browser/base/content/tabbrowser.js b/browser/base/content/tabbrowser.js
--- a/browser/base/content/tabbrowser.js
+++ b/browser/base/content/tabbrowser.js
@@ -487,17 +487,17 @@ window._gBrowser = {
     return this.selectedBrowser.textZoom;
   },
 
   get isSyntheticDocument() {
     return this.selectedBrowser.isSyntheticDocument;
   },
 
   set userTypedValue(val) {
-    return this.selectedBrowser.userTypedValue = val;
+    this.selectedBrowser.userTypedValue = val;
   },
 
   get userTypedValue() {
     return this.selectedBrowser.userTypedValue;
   },
 
   _setFindbarData() {
     // Ensure we know what the find bar key is in the content process:
diff --git a/toolkit/content/widgets/browser-custom-element.js b/toolkit/content/widgets/browser-custom-element.js
--- a/toolkit/content/widgets/browser-custom-element.js
+++ b/toolkit/content/widgets/browser-custom-element.js
@@ -374,23 +374,21 @@ class MozBrowser extends MozElementMixin
   get dateTimePicker() {
     return document.getElementById(this.getAttribute("datetimepicker"));
   }
 
   set docShellIsActive(val) {
     if (this.isRemoteBrowser) {
       let { frameLoader } = this;
       if (frameLoader && frameLoader.tabParent) {
-        return frameLoader.tabParent.docShellIsActive = val;
+        frameLoader.tabParent.docShellIsActive = val;
       }
-      return false;
+    } else if (this.docShell) {
+      this.docShell.isActive = val;
     }
-    if (this.docShell)
-      return this.docShell.isActive = val;
-    return false;
   }
 
   get docShellIsActive() {
     if (this.isRemoteBrowser) {
       let { frameLoader } = this;
       if (frameLoader && frameLoader.tabParent) {
         return frameLoader.tabParent.docShellIsActive;
       }
@@ -398,21 +396,21 @@ class MozBrowser extends MozElementMixin
     }
     return this.docShell && this.docShell.isActive;
   }
 
   set renderLayers(val) {
     if (this.isRemoteBrowser) {
       let { frameLoader } = this;
       if (frameLoader && frameLoader.tabParent) {
-        return frameLoader.tabParent.renderLayers = val;
+        frameLoader.tabParent.renderLayers = val;
       }
-      return false;
+    } else {
+      this.docShellIsActive = val;
     }
-    return this.docShellIsActive = val;
   }
 
   get renderLayers() {
     if (this.isRemoteBrowser) {
       let { frameLoader } = this;
       if (frameLoader && frameLoader.tabParent) {
         return frameLoader.tabParent.renderLayers;
       }
@@ -729,17 +727,16 @@ class MozBrowser extends MozElementMixin
     }
 
     return this.docShell.securityUI;
   }
 
   set userTypedValue(val) {
     this.urlbarChangeTracker.userTyped();
     this._userTypedValue = val;
-    return val;
   }
 
   get userTypedValue() {
     return this._userTypedValue;
   }
 
   get dontPromptAndDontUnload() {
     return 1;
