# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  bc0fd25cfca517105de975504726c430c2e87948

diff --git a/toolkit/content/widgets/radio.js b/toolkit/content/widgets/radio.js
--- a/toolkit/content/widgets/radio.js
+++ b/toolkit/content/widgets/radio.js
@@ -305,56 +305,57 @@ class MozRadiogroup extends MozBaseContr
       children[i].doCommand();
     }
   }
 
   _getRadioChildren() {
     if (this._radioChildren)
       return this._radioChildren;
 
-    var radioChildren = [];
-    var doc = this.ownerDocument;
-
     if (this.hasChildNodes()) {
+      return this._radioChildren = [...this.querySelectorAll("radio")];
       // Don't store the collected child nodes immediately,
       // collecting the child nodes could trigger constructors
       // which would blow away our list.
 
-      var iterator = doc.createTreeWalker(this,
-        NodeFilter.SHOW_ELEMENT,
-        this._filterRadioGroup);
-      while (iterator.nextNode())
-        radioChildren.push(iterator.currentNode);
-      return this._radioChildren = radioChildren;
+      // var iterator = doc.createTreeWalker(this,
+      //   NodeFilter.SHOW_ELEMENT,
+      //   this._filterRadioGroup);
+      // while (iterator.nextNode())
+      //   radioChildren.push(iterator.currentNode);
+      // return this._radioChildren = radioChildren;
     }
 
+    var radioChildren = [];
+    var doc = this.ownerDocument;
+
     // We don't have child nodes.
     const XUL_NS = "http://www.mozilla.org/keymaster/" +
       "gatekeeper/there.is.only.xul";
     var elems = doc.getElementsByAttribute("group", this.id);
     for (var i = 0; i < elems.length; i++) {
       if ((elems[i].namespaceURI == XUL_NS) &&
         (elems[i].localName == "radio")) {
         radioChildren.push(elems[i]);
       }
     }
     return this._radioChildren = radioChildren;
   }
 
-  _filterRadioGroup(node) {
-    switch (node.localName) {
-      case "radio":
-        return NodeFilter.FILTER_ACCEPT;
-      case "template":
-      case "radiogroup":
-        return NodeFilter.FILTER_REJECT;
-      default:
-        return NodeFilter.FILTER_SKIP;
-    }
-  }
+  // _filterRadioGroup(node) {
+  //   switch (node.localName) {
+  //     case "radio":
+  //       return NodeFilter.FILTER_ACCEPT;
+  //     case "template":
+  //     case "radiogroup":
+  //       return NodeFilter.FILTER_REJECT;
+  //     default:
+  //       return NodeFilter.FILTER_SKIP;
+  //   }
+  // }
 
   getIndexOfItem(item) {
     return this._getRadioChildren().indexOf(item);
   }
 
   getItemAtIndex(index) {
     var children = this._getRadioChildren();
     return (index >= 0 && index < children.length) ? children[index] : null;
