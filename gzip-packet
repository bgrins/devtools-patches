# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  892c8916ba32b7733e06bfbfdd4083ffae3ca028
Bug 1391077

diff --git a/devtools/shared/client/main.js b/devtools/shared/client/main.js
--- a/devtools/shared/client/main.js
+++ b/devtools/shared/client/main.js
@@ -942,16 +942,18 @@ DebuggerClient.prototype = {
 
   /**
    * Called by DebuggerTransport to dispatch incoming packets as appropriate.
    *
    * @param packet object
    *        The incoming packet.
    */
   onPacket: function (packet) {
+    dump("onPacket " + packet + " from: " + packet.from + " \n\n");
+    console.trace();
     if (!packet.from) {
       DevToolsUtils.reportException(
         "onPacket",
         new Error("Server did not specify an actor, dropping packet: " +
                   JSON.stringify(packet)));
       return;
     }
 
diff --git a/devtools/shared/transport/transport.js b/devtools/shared/transport/transport.js
--- a/devtools/shared/transport/transport.js
+++ b/devtools/shared/transport/transport.js
@@ -17,17 +17,17 @@
     factory.call(this, require, this);
   } else {
     // Cu.import
     const Cu = Components.utils;
     const { require } = Cu.import("resource://devtools/shared/Loader.jsm", {});
     factory.call(this, require, this);
   }
 }).call(this, function (require, exports) {
-  const { Cc, Cr, CC } = require("chrome");
+  const { Cc, Cr, CC, Cu, Ci } = require("chrome");
   const DevToolsUtils = require("devtools/shared/DevToolsUtils");
   const { dumpn, dumpv } = DevToolsUtils;
   const flags = require("devtools/shared/flags");
   const StreamUtils = require("devtools/shared/transport/stream-utils");
   const { Packet, JSONPacket, BulkPacket } =
   require("devtools/shared/transport/packets");
   const promise = require("promise");
   const defer = require("devtools/shared/defer");
@@ -37,18 +37,67 @@
     return CC("@mozilla.org/pipe;1", "nsIPipe", "init");
   });
 
   DevToolsUtils.defineLazyGetter(this, "ScriptableInputStream", () => {
     return CC("@mozilla.org/scriptableinputstream;1",
             "nsIScriptableInputStream", "init");
   });
 
+  const {NetUtil} = Cu.import("resource://gre/modules/NetUtil.jsm", {});
+
   const PACKET_HEADER_MAX = 200;
 
+
+  function gzip(string, compress) {
+    let observer = {
+      buffer: "",
+      onStreamComplete(loader, context, status, length, result) {
+        // From: https://github.com/mozilla/activity-stream/issues/3099#issuecomment-320419772
+
+        dump("LENGTH: " + length + "\n");
+        for (let i = 0; i < length; i += 500000) {
+          this.buffer += String.fromCharCode.apply(null, result.slice(i, i + 500000));
+        }
+         // for (let i = 0; i < result.length; i++) this.buffer += String.fromCharCode(result[i]);
+
+        // dump
+
+        // this.buffer = String.fromCharCode(...result);
+      }
+    };
+
+    let scs = Cc["@mozilla.org/streamConverters;1"]
+              .getService(Ci.nsIStreamConverterService);
+    let listener = Cc["@mozilla.org/network/stream-loader;1"]
+                  .createInstance(Ci.nsIStreamLoader);
+    listener.init(observer);
+
+    let to = compress ? "uncompressed" : "gzip";
+    let from = compress ? "gzip" : "uncompressed";
+    let converter = scs.asyncConvertData(to, from,
+                                         listener, null);
+    let stringStream = Cc["@mozilla.org/io/string-input-stream;1"]
+                       .createInstance(Ci.nsIStringInputStream);
+
+
+
+    stringStream.data = string;
+    converter.onStartRequest(null, null);
+    converter.onDataAvailable(null, null, stringStream, 0, string.length);
+    converter.onStopRequest(null, null, null);
+
+    // let count = stringStream.available();
+
+    // dump("BRIAN::::: " + NetUtil.readInputStreamToString(stringStream, count, { charset: 'utf-8' }) + "\n\n");
+
+
+    return observer.buffer;
+  }
+
   /**
    * An adapter that handles data transfers between the debugger client and
    * server. It can work with both nsIPipe and nsIServerSocket transports so
    * long as the properly created input and output streams are specified.
    * (However, for intra-process connections, LocalDebuggerTransport, below,
    * is more efficient than using an nsIPipe pair with DebuggerTransport.)
    *
    * @param input nsIAsyncInputStream
@@ -753,23 +802,38 @@
     close: function () {
       this._removeListener();
       this.emit("close");
       this.hooks.onClosed();
     },
 
     receiveMessage: function ({data}) {
       this.emit("packet", data);
+
+      if (data.gzipped) {
+        let unzipped = gzip(data.gzipped, false);
+        data = JSON.parse(unzipped);
+        dump("\nReceived zipped packet" + data.length + "\n");
+      }
       this.hooks.onPacket(data);
     },
 
     send: function (packet) {
       this.emit("send", packet);
+
+      let sendPacket = {
+        from: packet.from,
+        to: packet.to,
+        gzipped: gzip(JSON.stringify(packet), true)
+      };
+      // dump("DONE " + " " + JSON.stringify(packet) + " " + JSON.stringify(sendPacket) + "\n"); // gzip(sendPacket.gzipped, false) + "\n");
+
+
       try {
-        this._mm.sendAsyncMessage(this._messageName, packet);
+        this._mm.sendAsyncMessage(this._messageName, sendPacket);
       } catch (e) {
         if (e.result != Cr.NS_ERROR_NULL_POINTER) {
           throw e;
         }
         // In some cases, especially when using messageManagers in non-e10s mode, we reach
         // this point with a dead messageManager which only throws errors but does not
         // seem to indicate in any other way that it is dead.
       }
