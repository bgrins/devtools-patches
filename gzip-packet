# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  892c8916ba32b7733e06bfbfdd4083ffae3ca028
Bug 1391077

diff --git a/devtools/shared/transport/transport.js b/devtools/shared/transport/transport.js
--- a/devtools/shared/transport/transport.js
+++ b/devtools/shared/transport/transport.js
@@ -17,17 +17,17 @@
     factory.call(this, require, this);
   } else {
     // Cu.import
     const Cu = Components.utils;
     const { require } = Cu.import("resource://devtools/shared/Loader.jsm", {});
     factory.call(this, require, this);
   }
 }).call(this, function (require, exports) {
-  const { Cc, Cr, CC } = require("chrome");
+  const { Cc, Cr, CC, Cu, Ci } = require("chrome");
   const DevToolsUtils = require("devtools/shared/DevToolsUtils");
   const { dumpn, dumpv } = DevToolsUtils;
   const flags = require("devtools/shared/flags");
   const StreamUtils = require("devtools/shared/transport/stream-utils");
   const { Packet, JSONPacket, BulkPacket } =
   require("devtools/shared/transport/packets");
   const promise = require("promise");
   const defer = require("devtools/shared/defer");
@@ -758,16 +758,77 @@
 
     receiveMessage: function ({data}) {
       this.emit("packet", data);
       this.hooks.onPacket(data);
     },
 
     send: function (packet) {
       this.emit("send", packet);
+
+
+function gzipCompressString(string) {
+  let observer = {
+    buffer: "",
+    onStreamComplete(loader, context, status, length, result) {
+      this.buffer = String.fromCharCode.apply(this, result);
+    }
+  };
+
+  let scs = Cc["@mozilla.org/streamConverters;1"]
+            .getService(Ci.nsIStreamConverterService);
+  let listener = Cc["@mozilla.org/network/stream-loader;1"]
+                .createInstance(Ci.nsIStreamLoader);
+  listener.init(observer);
+  let converter = scs.asyncConvertData("uncompressed", "gzip",
+                                       listener, null);
+  let stringStream = Cc["@mozilla.org/io/string-input-stream;1"]
+                     .createInstance(Ci.nsIStringInputStream);
+  stringStream.data = string;
+  converter.onStartRequest(null, null);
+  converter.onDataAvailable(null, null, stringStream, 0, string.length);
+  converter.onStopRequest(null, null, null);
+  return observer.buffer;
+}
+
+
+      // function StringStream(string) {
+      //   let stream = Cc["@mozilla.org/io/string-input-stream;1"]
+      //     .createInstance(Ci.nsIStringInputStream);
+
+      //   stream.data = string;
+      //   return stream;
+      // }
+
+      // const {NetUtil} = Cu.import("resource://gre/modules/NetUtil.jsm", {});
+      // const convService = Cc["@mozilla.org/streamConverters;1"]
+      //   .getService(Ci.nsIStreamConverterService);
+      // let stream = StringStream(JSON.stringify(packet));
+      // let resultStream = convService.convert(stream, "uncompressed", "gzip", null);
+      // let result = NetUtil.readInputStreamToString(resultStream, resultStream.available());
+      dump("DONE " + " " + JSON.stringify(packet) + " " + gzipCompressString(JSON.stringify(packet)) + "\n");
+
+
+      // let scs = Cc["@mozilla.org/streamConverters;1"]
+      //           .getService(Ci.nsIStreamConverterService);
+      // let listener = Cc["@mozilla.org/network/stream-loader;1"]
+      //               .createInstance(Ci.nsIStreamLoader);
+      // listener.init(observer);
+      // let data = scs.convert("uncompressed", "gzip",
+      //                              listener, null);
+      // dump
+      // let stringStream = Cc["@mozilla.org/io/string-input-stream;1"]
+      //                    .createInstance(Ci.nsIStringInputStream);
+      // stringStream.data = string;
+      // converter.onStartRequest(null, null);
+      // converter.onDataAvailable(null, null, stringStream, 0, string.length);
+      // converter.onStopRequest(null, null, null);
+      // return observer.buffer;
+
+
       try {
         this._mm.sendAsyncMessage(this._messageName, packet);
       } catch (e) {
         if (e.result != Cr.NS_ERROR_NULL_POINTER) {
           throw e;
         }
         // In some cases, especially when using messageManagers in non-e10s mode, we reach
         // this point with a dead messageManager which only throws errors but does not
