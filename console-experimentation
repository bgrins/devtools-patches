# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  8bf46ba0297dfecfdbae08edc1166d8a10bbadf8
Bug XXX - Webconsole creation in frames

diff --git a/devtools/server/actors/webbrowser.js b/devtools/server/actors/webbrowser.js
--- a/devtools/server/actors/webbrowser.js
+++ b/devtools/server/actors/webbrowser.js
@@ -1084,17 +1084,17 @@ TabActor.prototype = {
     return {};
   },
 
   onListFrames: function BTA_onListFrames(aRequest) {
     let windows = this._docShellsToWindows(this.docShells);
     return { frames: windows };
   },
 
-  onListWorkers: function BTA_onListWorkers(aRequest) {
+  onListWorkers: function BTA_onListWorkers(aRequest, hacky) {
     if (this._workerActorList === null) {
       this._workerActorList = new WorkerActorList({
         type: Ci.nsIWorkerDebugger.TYPE_DEDICATED,
         window: this.window
       });
     }
 
     return this._workerActorList.getList().then((actors) => {
@@ -1104,26 +1104,32 @@ TabActor.prototype = {
       }
 
       this.conn.removeActorPool(this._workerActorPool);
       this._workerActorPool = pool;
       this.conn.addActorPool(this._workerActorPool);
 
       this._workerActorList.onListChanged = this._onWorkerActorListChanged;
 
+      if (hacky) {
+        return {
+          "workers": actors
+        };
+      }
       return {
         "from": this.actorID,
         "workers": actors.map((actor) => actor.form())
       };
     });
   },
 
   _onWorkerActorListChanged: function () {
     this._workerActorList.onListChanged = null;
     this.conn.sendActorEvent(this.actorID, "workerListChanged");
+    events.emit("workerListChanged");
   },
 
   observe: function (aSubject, aTopic, aData) {
     // Ignore any event that comes before/after the tab actor is attached
     // That typically happens during firefox shutdown.
     if (!this.attached) {
       return;
     }
diff --git a/devtools/server/actors/webconsole.js b/devtools/server/actors/webconsole.js
--- a/devtools/server/actors/webconsole.js
+++ b/devtools/server/actors/webconsole.js
@@ -56,16 +56,38 @@ function WebConsoleActor(aConnection, aP
 
   this._actorPool = new ActorPool(this.conn);
   this.conn.addActorPool(this._actorPool);
 
   this._prefs = {};
 
   this.dbg = this.parentActor.makeDebugger();
 
+  if (this.parentActor.window) {
+    console.log("WebConsoleActor being initialized", this.parentActor);
+    console.trace();
+    this.parentActor.onListWorkers(null, true).then(res => {
+      console.log("List workers done", res);
+      res.workers.forEach(w => {
+        let r = w.onAttach();
+        let c = w.onConnect({
+          options:  {}
+        });
+        console.log("Worker attached", w, w._consoleActor, r);
+      });
+    });
+    events.on(this.parentActor, "workerListChanged", () => {
+      console.log("workerListChanged");
+    });
+    // this.parentActor.on("workerListChanged", () => {
+    //   console.log("workerListChanged")
+    // })
+  }
+
+  dump("WEBCONSOLE ACTOR CREATED " + isWorker + " " + aParentActor.actorPrefix + " \n");
   this._netEvents = new Map();
   this._gripDepth = 0;
   this._listeners = new Set();
   this._lastConsoleInputEvaluation = undefined;
 
   this.objectGrip = this.objectGrip.bind(this);
   this._onWillNavigate = this._onWillNavigate.bind(this);
   this._onChangedToplevelDocument = this._onChangedToplevelDocument.bind(this);
