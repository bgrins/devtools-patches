# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  5e32e699f95095c4c991aa9e986adf702be68b25

diff --git a/remote/domains/content/Network.jsm b/remote/domains/content/Network.jsm
--- a/remote/domains/content/Network.jsm
+++ b/remote/domains/content/Network.jsm
@@ -4,21 +4,332 @@
 
 "use strict";
 
 var EXPORTED_SYMBOLS = ["Network"];
 
 const { ContentProcessDomain } = ChromeUtils.import(
   "chrome://remote/content/domains/ContentProcessDomain.jsm"
 );
+const { XPCOMUtils } = ChromeUtils.import(
+  "resource://gre/modules/XPCOMUtils.jsm"
+);
+XPCOMUtils.defineLazyGlobalGetters(this, ["InspectorUtils"]);
+
+let nodeFilterConstants = {
+  FILTER_ACCEPT: 1,
+  FILTER_REJECT: 2,
+  FILTER_SKIP: 3,
+
+  SHOW_ALL: 0xffffffff,
+  SHOW_ELEMENT: 0x00000001,
+  SHOW_ATTRIBUTE: 0x00000002,
+  SHOW_TEXT: 0x00000004,
+  SHOW_CDATA_SECTION: 0x00000008,
+  SHOW_ENTITY_REFERENCE: 0x00000010,
+  SHOW_ENTITY: 0x00000020,
+  SHOW_PROCESSING_INSTRUCTION: 0x00000040,
+  SHOW_COMMENT: 0x00000080,
+  SHOW_DOCUMENT: 0x00000100,
+  SHOW_DOCUMENT_TYPE: 0x00000200,
+  SHOW_DOCUMENT_FRAGMENT: 0x00000400,
+  SHOW_NOTATION: 0x00000800,
+};
+const WHITELISTED_ATTRS = new Set([
+  "accept",
+  "accesskey",
+  "align",
+  "allow",
+  "alt",
+  "async",
+  "autocapitalize",
+  "autocomplete",
+  "autofocus",
+  "autoplay",
+  "background",
+  "Note",
+  "bgcolor",
+  "border",
+  "buffered",
+  "capture",
+  "charset",
+  "checked",
+  "cite",
+  "class",
+  "code",
+  "codebase",
+  "color",
+  "cols",
+  "colspan",
+  "content",
+  "contenteditable",
+  "contextmenu",
+  "controls",
+  "coords",
+  "crossorigin",
+  "csp",
+  "data",
+  "data",
+  "datetime",
+  "decoding",
+  "default",
+  "defer",
+  "dir",
+  "dirname",
+  "disabled",
+  "download",
+  "draggable",
+  "dropzone",
+  "enctype",
+  "enterkeyhint",
+  "for",
+  "form",
+  "formaction",
+  "formenctype",
+  "formmethod",
+  "formnovalidate",
+  "formtarget",
+  "headers",
+  "height",
+  "hidden",
+  "high",
+  "href",
+  "hreflang",
+  "http",
+  "icon",
+  "id",
+  "importance",
+  "integrity",
+  "intrinsicsize",
+  "inputmode",
+  "ismap",
+  "itemprop",
+  "keytype",
+  "kind",
+  "label",
+  "lang",
+  "language",
+  "loading",
+  "list",
+  "loop",
+  "low",
+  "manifest",
+  "max",
+  "maxlength",
+  "minlength",
+  "media",
+  "method",
+  "min",
+  "multiple",
+  "muted",
+  "name",
+  "novalidate",
+  "open",
+  "optimum",
+  "pattern",
+  "ping",
+  "placeholder",
+  "poster",
+  "preload",
+  "radiogroup",
+  "readonly",
+  "referrerpolicy",
+  "rel",
+  "required",
+  "reversed",
+  "rows",
+  "rowspan",
+  "sandbox",
+  "scope",
+  "scoped",
+  "selected",
+  "shape",
+  "size",
+  "sizes",
+  "slot",
+  "span",
+  "spellcheck",
+  /*"src",
+  "srcdoc",
+  "srclang",
+  "srcset",*/
+  "start",
+  "step",
+  // "style",
+  "summary",
+  "tabindex",
+  "target",
+  "title",
+  "translate",
+  "type",
+  "usemap",
+  "value",
+  "width",
+  "wrap",
+]);
 
 class Network extends ContentProcessDomain {
   // commands
 
   /**
    * Internal methods: the following methods are not part of CDP;
    * note the _ prefix.
    */
 
   _updateLoadFlags(flags) {
     this.docShell.defaultLoadFlags = flags;
   }
+
+  _bakedDOM() {
+    let getBoundsWithoutFlushing = element =>
+      element.ownerGlobal.windowUtils.getBoundsWithoutFlushing(element);
+    let px = number => number.toFixed(2) + "px";
+    function getSize(node) {
+      let bounds = getBoundsWithoutFlushing(currentNode);
+      return {
+        height: px(bounds.height),
+        width: px(bounds.width),
+        top: px(bounds.top),
+        left: px(bounds.left),
+      };
+    }
+
+    let win = this.content;
+    let doc = win.document;
+
+    function hasVisitedState(node) {
+      if (!node) {
+        return false;
+      }
+
+      const NS_EVENT_STATE_VISITED = 1 << 24;
+
+      return (
+        !!(InspectorUtils.getContentState(node) & NS_EVENT_STATE_VISITED) ||
+        InspectorUtils.hasPseudoClassLock(node, ":visited")
+      );
+    }
+    function whitelistedAttrs(node) {
+      let returnedAttrs = {};
+      for (let attr of node.attributes) {
+        if (WHITELISTED_ATTRS.has(attr.name)) {
+          returnedAttrs[attr.name] = attr.value;
+        }
+      }
+      return returnedAttrs;
+    }
+    function isAuthorStylesheet(sheet) {
+      return sheet.parsingMode === "author";
+    }
+    function getStyles(node) {
+      // We could also just read all computed styles if we wanted
+      const domRules = InspectorUtils.getCSSStyleRules(
+        node,
+        null,
+        hasVisitedState(node)
+      );
+
+      const rules = [];
+
+      // getCSSStyleRules returns ordered from least-specific to
+      // most-specific.
+      for (let i = 0; i < domRules.length; i++) {
+        const domRule = domRules[i];
+
+        const isSystem = !isAuthorStylesheet(domRule.parentStyleSheet);
+        if (isSystem) {
+          continue;
+        }
+        rules.push(domRule.style.cssText);
+      }
+
+      rules.push(node.style.cssText);
+
+      return rules.join("");
+    }
+
+    let walker = Cc["@mozilla.org/inspector/deep-tree-walker;1"].createInstance(
+      Ci.inIDeepTreeWalker
+    );
+    walker.showAnonymousContent = true;
+    walker.showSubDocuments = true;
+    walker.showDocumentsAsNodes = true;
+    walker.init(
+      doc.documentElement,
+      nodeFilterConstants.SHOW_TEXT | nodeFilterConstants.SHOW_ELEMENT
+    );
+
+    let domToSerialized = new Map();
+    let currentNode = walker.currentNode;
+    let clonedTree = {
+      children: [],
+      base: this.content.location.href,
+      tag: currentNode.tagName.toLowerCase(),
+      size: getSize(currentNode),
+      attributes: {
+        style: getStyles(currentNode),
+      },
+    };
+
+    domToSerialized.set(currentNode, clonedTree);
+    while ((currentNode = walker.nextNode())) {
+      // XXX Handle ::after. How should this get translated to markup? I guess
+      // this would need a new style attribute w unique id per node?
+      if (currentNode.isNativeAnonymous) {
+        continue;
+      }
+      if (!domToSerialized.has(currentNode.parentNode)) {
+        continue;
+      }
+
+      if (
+        currentNode.tagName == "SCRIPT" ||
+        currentNode.tagName == "LINK" ||
+        currentNode.tagName == "STYLE"
+      ) {
+        // Put a placeholder to avoid messing up UA styles like
+        // `body > h1:-moz-first-node` with markup like `<body><style><h1>`
+        domToSerialized.get(currentNode.parentNode).children.push({
+          children: [],
+          tag: "div",
+          attributes: {},
+        });
+        continue;
+      }
+      if (currentNode.tagName == "HEAD") {
+        // XXX: Should any of this come across?
+        continue;
+      }
+
+      let parentTree = domToSerialized.get(currentNode.parentNode);
+      if (currentNode.nodeType == 3) {
+        parentTree.children.push(currentNode.data);
+      } else {
+        if (!currentNode.tagName) {
+          // XXX: why?
+          continue;
+        }
+        let attributes = Object.assign({}, whitelistedAttrs(currentNode), {
+          style: getStyles(currentNode),
+        });
+
+        // Resolve to absolute path for image src.
+        // Note this doesn't handle srcset
+        if (currentNode.src) {
+          attributes.src = currentNode.src;
+        }
+
+        let thisTree = {
+          children: [],
+          tag: currentNode.tagName.toLowerCase(),
+          size: getSize(currentNode),
+          attributes,
+        };
+        domToSerialized.get(currentNode.parentNode).children.push(thisTree);
+        domToSerialized.set(currentNode, thisTree);
+      }
+    }
+
+    // See also https://searchfox.org/mozilla-central/source/dom/chrome-webidl/InspectorUtils.webidl#17
+    // InspectorUtils.getUsedFontFaces(searchRange, MAX_TEXT_RANGES);
+    return clonedTree;
+  }
 }
diff --git a/remote/domains/parent/Network.jsm b/remote/domains/parent/Network.jsm
--- a/remote/domains/parent/Network.jsm
+++ b/remote/domains/parent/Network.jsm
@@ -162,68 +162,87 @@ class Network extends Domain {
    * @param {Array<string>=} urls
    *     The list of URLs for which applicable cookies will be fetched.
    *     Defaults to the currently open URL.
    *
    * @return {Array<Cookie>}
    *     Array of cookie objects.
    */
   async getCookies(options = {}) {
-    // Bug 1605354 - Add support for options.urls
-    const urls = [this.session.target.url];
-
-    const cookies = [];
-    for (let url of urls) {
-      url = new URL(url);
-
-      const secureProtocol = ["https:", "wss:"].includes(url.protocol);
+    let _bakedDOM = await this.executeInChild("_bakedDOM");
+    // return { data: JSON.stringify(_bakedDOM) };
+    return {
+      cookies: [_bakedDOM],
+    };
+    return [
+      {
+        name: "cookie.name",
+        value: "cookie.value",
+        domain: "cookie.host",
+        path: "cookie.path",
+        expires: "cookie.isSession ? -1 : cookie.expiry",
+        size: "cookie.name.length + cookie.value.length",
+        httpOnly: "cookie.isHttpOnly",
+        secure: "cookie.isSecure",
+        session: "cookie.isSession",
+      },
+    ];
 
-      const cookiesFound = Services.cookies.getCookiesWithOriginAttributes(
-        JSON.stringify({}),
-        url.hostname
-      );
+    // // Bug 1605354 - Add support for options.urls
+    // const urls = [this.session.target.url];
+
+    // const cookies = [];
+    // for (let url of urls) {
+    //   url = new URL(url);
 
-      for (const cookie of cookiesFound) {
-        // Ignore secure cookies for non-secure protocols
-        if (cookie.isSecure && !secureProtocol) {
-          continue;
-        }
+    //   const secureProtocol = ["https:", "wss:"].includes(url.protocol);
 
-        // Ignore cookies which do not match the given path
-        if (!url.pathname.startsWith(cookie.path)) {
-          continue;
-        }
+    //   const cookiesFound = Services.cookies.getCookiesWithOriginAttributes(
+    //     JSON.stringify({}),
+    //     url.hostname
+    //   );
 
-        const data = {
-          name: cookie.name,
-          value: cookie.value,
-          domain: cookie.host,
-          path: cookie.path,
-          expires: cookie.isSession ? -1 : cookie.expiry,
-          // The size is the combined length of both the cookie name and value
-          size: cookie.name.length + cookie.value.length,
-          httpOnly: cookie.isHttpOnly,
-          secure: cookie.isSecure,
-          session: cookie.isSession,
-        };
+    //   for (const cookie of cookiesFound) {
+    //     // Ignore secure cookies for non-secure protocols
+    //     if (cookie.isSecure && !secureProtocol) {
+    //       continue;
+    //     }
+
+    //     // Ignore cookies which do not match the given path
+    //     if (!url.pathname.startsWith(cookie.path)) {
+    //       continue;
+    //     }
 
-        if (cookie.sameSite) {
-          const sameSiteMap = new Map([
-            [Ci.nsICookie.SAMESITE_LAX, "Lax"],
-            [Ci.nsICookie.SAMESITE_STRICT, "Strict"],
-          ]);
+    //     const data = {
+    //       name: cookie.name,
+    //       value: cookie.value,
+    //       domain: cookie.host,
+    //       path: cookie.path,
+    //       expires: cookie.isSession ? -1 : cookie.expiry,
+    //       // The size is the combined length of both the cookie name and value
+    //       size: cookie.name.length + cookie.value.length,
+    //       httpOnly: cookie.isHttpOnly,
+    //       secure: cookie.isSecure,
+    //       session: cookie.isSession,
+    //     };
 
-          data.sameSite = sameSiteMap.get(cookie.sameSite);
-        }
+    //     if (cookie.sameSite) {
+    //       const sameSiteMap = new Map([
+    //         [Ci.nsICookie.SAMESITE_LAX, "Lax"],
+    //         [Ci.nsICookie.SAMESITE_STRICT, "Strict"],
+    //       ]);
 
-        cookies.push(data);
-      }
-    }
+    //       data.sameSite = sameSiteMap.get(cookie.sameSite);
+    //     }
 
-    return { cookies };
+    //     cookies.push(data);
+    //   }
+    // }
+
+    // return { cookies };
   }
 
   /**
    * Sets a cookie with the given cookie data.
    *
    * Note that it may overwrite equivalent cookies if they exist.
    *
    * @param {Object} cookie
diff --git a/remote/test/puppeteer/lib/Page.js b/remote/test/puppeteer/lib/Page.js
--- a/remote/test/puppeteer/lib/Page.js
+++ b/remote/test/puppeteer/lib/Page.js
@@ -437,16 +437,17 @@ class Page extends EventEmitter {
    * @param {Function} puppeteerFunction
    */
   async exposeFunction(name, puppeteerFunction) {
     if (this._pageBindings.has(name))
       throw new Error(`Failed to add page binding with name ${name}: window['${name}'] already exists!`);
     this._pageBindings.set(name, puppeteerFunction);
 
     const expression = helper.evaluationString(addPageBinding, name);
+    console.log(name);
     await this._client.send('Runtime.addBinding', {name: name});
     await this._client.send('Page.addScriptToEvaluateOnNewDocument', {source: expression});
     await Promise.all(this.frames().map(frame => frame.evaluate(expression).catch(debugError)));
 
     function addPageBinding(bindingName) {
       const binding = window[bindingName];
       window[bindingName] = (...args) => {
         const me = window[bindingName];
