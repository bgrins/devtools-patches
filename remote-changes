# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  272e3c98d0029fe73c0a57c45bc3b11ffa0e2bee

diff --git a/remote/domains/content/Network.jsm b/remote/domains/content/Network.jsm
--- a/remote/domains/content/Network.jsm
+++ b/remote/domains/content/Network.jsm
@@ -4,21 +4,581 @@
 
 "use strict";
 
 var EXPORTED_SYMBOLS = ["Network"];
 
 const { ContentProcessDomain } = ChromeUtils.import(
   "chrome://remote/content/domains/ContentProcessDomain.jsm"
 );
+const { ExtensionUtils } = ChromeUtils.import(
+  "resource://gre/modules/ExtensionUtils.jsm"
+);
+const { XPCOMUtils } = ChromeUtils.import(
+  "resource://gre/modules/XPCOMUtils.jsm"
+);
+XPCOMUtils.defineLazyGlobalGetters(this, ["InspectorUtils"]);
+
+let contentDOMState = new WeakMap();
+
+let nodeFilterConstants = {
+  FILTER_ACCEPT: 1,
+  FILTER_REJECT: 2,
+  FILTER_SKIP: 3,
+
+  SHOW_ALL: 0xffffffff,
+  SHOW_ELEMENT: 0x00000001,
+  SHOW_ATTRIBUTE: 0x00000002,
+  SHOW_TEXT: 0x00000004,
+  SHOW_CDATA_SECTION: 0x00000008,
+  SHOW_ENTITY_REFERENCE: 0x00000010,
+  SHOW_ENTITY: 0x00000020,
+  SHOW_PROCESSING_INSTRUCTION: 0x00000040,
+  SHOW_COMMENT: 0x00000080,
+  SHOW_DOCUMENT: 0x00000100,
+  SHOW_DOCUMENT_TYPE: 0x00000200,
+  SHOW_DOCUMENT_FRAGMENT: 0x00000400,
+  SHOW_NOTATION: 0x00000800,
+};
+
+// TODO: Remove some of these and add others like aria-*
+const WHITELISTED_ATTRS = new Set([
+  "accept",
+  "accesskey",
+  "align",
+  "allow",
+  "alt",
+  "async",
+  "autocapitalize",
+  "autocomplete",
+  "autofocus",
+  "autoplay",
+  "background",
+  "Note",
+  "bgcolor",
+  "border",
+  "buffered",
+  "capture",
+  "charset",
+  "checked",
+  "cite",
+  "class",
+  "code",
+  "codebase",
+  "color",
+  "cols",
+  "colspan",
+  "content",
+  "contenteditable",
+  "contextmenu",
+  "controls",
+  "coords",
+  "crossorigin",
+  "csp",
+  "data",
+  "data",
+  "datetime",
+  "decoding",
+  "default",
+  "defer",
+  "dir",
+  "dirname",
+  "disabled",
+  "download",
+  "draggable",
+  "dropzone",
+  "enctype",
+  "enterkeyhint",
+  "for",
+  "form",
+  "formaction",
+  "formenctype",
+  "formmethod",
+  "formnovalidate",
+  "formtarget",
+  "headers",
+  "height",
+  "hidden",
+  "high",
+  "href",
+  "hreflang",
+  "http",
+  "icon",
+  // "id",
+  "importance",
+  "integrity",
+  "intrinsicsize",
+  "inputmode",
+  "ismap",
+  "itemprop",
+  "keytype",
+  "kind",
+  "label",
+  "lang",
+  "language",
+  "loading",
+  "list",
+  "loop",
+  "low",
+  "manifest",
+  "max",
+  "maxlength",
+  "minlength",
+  "media",
+  "method",
+  "min",
+  "multiple",
+  "muted",
+  "name",
+  "novalidate",
+  "open",
+  "optimum",
+  "pattern",
+  "ping",
+  "placeholder",
+  "poster",
+  "preload",
+  "radiogroup",
+  "readonly",
+  "referrerpolicy",
+  "rel",
+  "required",
+  "reversed",
+  "rows",
+  "rowspan",
+  "sandbox",
+  "scope",
+  "scoped",
+  "selected",
+  "shape",
+  "size",
+  "sizes",
+  "slot",
+  "span",
+  "spellcheck",
+  /*"src",
+  "srcdoc",
+  "srclang",
+  "srcset",*/
+  "start",
+  "step",
+  // "style",
+  "summary",
+  "tabindex",
+  "target",
+  "title",
+  "translate",
+  "type",
+  "usemap",
+  "value",
+  "width",
+  "wrap",
+]);
+
+class DOMBaker {
+  constructor(networkDomain) {
+    this.network = networkDomain;
+    this.win = this.network.content;
+    this.doc = this.win.document;
+
+    this.$idsToNodes = new Map();
+    this.$nodesToIds = new WeakMap();
+    this.$nodesToVirtualNodes = new WeakMap();
+  }
+
+  stopWatching() {
+    // Do we actually need to bother if the document is going to be GC'ed?
+    if (this.observer) {
+      this.observer.disconnect();
+      this.observer = null;
+    }
+  }
+
+  startWatching() {
+    const { $nodesToIds } = this;
+
+    const handleAddedNodes = ({ addedNodes }, bucket) => {
+      // TODO: Should all added nodes be appended? Not sure how mutation observers work.
+      //    No, see MutationRecord.previousSibling and MutationRecord.nextSibling
+      for (const node of addedNodes) {
+        // XXX: This isn't implemented on the instance yet
+        let virtualNode = this.createVirtualNode(node);
+        if (virtualNode) {
+          // Also, this needs to invalidate styles since it could change selectors like
+          // :empty
+          bucket.added.push(virtualNode);
+        }
+      }
+    };
+
+    const handleRemovedNodes = ({ removedNodes }, bucket) => {
+      for (const node of removedNodes) {
+        const id = this.deregisterNode(node);
+        if (id) {
+          bucket.removed.push({ id, name: node.nodeName });
+        }
+      }
+    };
+
+    const handleAttributeChanged = ({ target }, bucket) => {
+      const id = $nodesToIds.get(target);
+      // XXX: This really needs to invalidate children & siblings as well,
+      // since it could change which CSS selectors are applying. For now we'll
+      // just update this one
+      bucket.updates.push({ id, virtualNode: this.getVirtualNodeBase(target) });
+    };
+
+    const handleCharacterDataChanged = ({ target }, bucket) => {
+      const id = $nodesToIds.get(target);
+      if (id) {
+        bucket.wrote.push({ id, data: target.data });
+      }
+    };
+
+    const handleMutation = mutation => {
+      // For node types we don't handle yet, don't forward to the client
+      if (!$nodesToIds.get(mutation.target)) {
+        return;
+      }
+      let target = {
+        id: $nodesToIds.get(mutation.target),
+        name: mutation.target.nodeName,
+      };
+
+      const bucket = {
+        target,
+        added: [],
+        removed: [],
+        wrote: [],
+        updates: [],
+      };
+      switch (mutation.type) {
+        case "childList":
+          handleAddedNodes(mutation, bucket);
+          handleRemovedNodes(mutation, bucket);
+          break;
+        case "attributes":
+          handleAttributeChanged(mutation, bucket);
+          break;
+        case "characterData":
+          handleCharacterDataChanged(mutation, bucket);
+          break;
+      }
+      if (
+        bucket.added.length ||
+        bucket.removed.length ||
+        bucket.wrote.length ||
+        bucket.updates.length
+      ) {
+        return [bucket];
+      }
+      return [];
+    };
+
+    const onMutations = mutationList => {
+      const mutations = mutationList.flatMap(handleMutation);
+      if (mutations.length) {
+        this.network.emitToUAServer({
+          overriddenType: "mutations",
+          data: mutations,
+        });
+      }
+    };
+
+    this.observer = new this.win.MutationObserver(onMutations);
+    this.observer.observe(this.win.document.documentElement, {
+      childList: true,
+      attributes: true,
+      characterData: true,
+      subtree: true,
+    });
+  }
+  deregisterNode(node) {
+    const { $idsToNodes, $nodesToIds } = this;
+    const id = $nodesToIds.get(node);
+    if (!id) {
+      return null;
+    }
+    $idsToNodes.delete(id);
+    $nodesToIds.delete(node);
+    return id;
+  }
+
+  registerNode(node) {
+    const { $idsToNodes, $nodesToIds } = this;
+    const id = ExtensionUtils.getUniqueId();
+    $idsToNodes.set(id, node);
+    $nodesToIds.set(node, id);
+    return id;
+  }
+
+  getSize(element) {
+    let px = number => number.toFixed(2) + "px";
+    let getBoundsWithoutFlushing = el =>
+      el.ownerGlobal.windowUtils.getBoundsWithoutFlushing(el);
+    let bounds = getBoundsWithoutFlushing(element);
+    return {
+      height: px(bounds.height),
+      width: px(bounds.width),
+      top: px(bounds.top),
+      left: px(bounds.left),
+    };
+  }
+
+  getStyles(node) {
+    function hasVisitedState(node) {
+      if (!node) {
+        return false;
+      }
+
+      const NS_EVENT_STATE_VISITED = 1 << 24;
+
+      return (
+        !!(InspectorUtils.getContentState(node) & NS_EVENT_STATE_VISITED) ||
+        InspectorUtils.hasPseudoClassLock(node, ":visited")
+      );
+    }
+    function isAuthorStylesheet(sheet) {
+      return sheet.parsingMode === "author";
+    }
+
+    // See also https://searchfox.org/mozilla-central/source/dom/chrome-webidl/InspectorUtils.webidl#17
+    // InspectorUtils.getUsedFontFaces(searchRange, MAX_TEXT_RANGES);
+    // We could also just read all computed styles if we wanted
+    const domRules = InspectorUtils.getCSSStyleRules(
+      node,
+      null,
+      hasVisitedState(node)
+    );
+
+    const rules = [];
+
+    // getCSSStyleRules returns ordered from least-specific to
+    // most-specific.
+    for (let i = 0; i < domRules.length; i++) {
+      const domRule = domRules[i];
+
+      const isSystem = !isAuthorStylesheet(domRule.parentStyleSheet);
+      if (isSystem) {
+        continue;
+      }
+
+      let cssText = domRule.style.cssText;
+      if (cssText.includes("url(")) {
+        // This is really bad and only handles background-image specifically.
+        // TODO: see what devtools does to resolve paths in style rules.
+        let backgroundImage = node.ownerGlobal.getComputedStyle(node)[
+          "background-image"
+        ];
+        cssText = cssText.replace(/url\((.*)\)/, `${backgroundImage}`);
+      }
+      rules.push(cssText);
+    }
+
+    rules.push(node.style.cssText);
+
+    return rules.join("");
+  }
+
+  getVirtualNodeBase(node) {
+    function whitelistedAttrs(node) {
+      let returnedAttrs = {};
+      for (let attr of node.attributes) {
+        if (WHITELISTED_ATTRS.has(attr.name)) {
+          returnedAttrs[attr.name] = attr.value;
+        }
+      }
+      return returnedAttrs;
+    }
+    let attributes = Object.assign({}, whitelistedAttrs(node), {
+      style: this.getStyles(node),
+    });
+
+    // Resolve to absolute path for image src.
+    // Note this doesn't handle srcset
+    if (node.src) {
+      attributes.src = node.src;
+    }
+
+    return {
+      tag: node.tagName.toLowerCase(),
+      size: this.getSize(node),
+      attributes,
+    };
+  }
+
+  createVirtualNode(node) {
+    let { $nodesToVirtualNodes } = this;
+    let isDocElement = node == this.doc.documentElement;
+
+    const parentTree = $nodesToVirtualNodes.get(node.parentNode);
+    if (!parentTree && !isDocElement) {
+      return;
+    }
+    // XXX Handle ::after/::before with CSS.
+    if (node.isNativeAnonymous) {
+      return;
+    }
+    if (node.tagName == "HEAD") {
+      // XXX: Should any of this come across?
+      return;
+    }
+    if (node.nodeType == 3) {
+      let thisTree = {
+        id: this.registerNode(node),
+        nodeType: node.nodeType,
+        data: node.data,
+      };
+      parentTree.children.push(thisTree);
+      return;
+    }
+    if (!node.tagName) {
+      // XXX: why does this happen?
+      return;
+    }
+
+    if (
+      node.tagName == "IFRAME" ||
+      node.tagName == "VIDEO" ||
+      node.tagName == "SCRIPT" ||
+      node.tagName == "LINK" ||
+      node.tagName == "STYLE"
+    ) {
+      // Put a placeholder to avoid messing up UA styles like
+      // `body > h1:-moz-first-node` with markup like `<body><style><h1>`
+      parentTree.children.push({
+        children: [],
+        tag: "div",
+        attributes: {
+          originalTag: node.tagName.toLowerCase(),
+        },
+      });
+    } else {
+      let thisTree = this.getVirtualNodeBase(node);
+      Object.assign(thisTree, {
+        id: this.registerNode(node),
+        children: [],
+      });
+      if (!isDocElement) {
+        parentTree.children.push(thisTree);
+      }
+      $nodesToVirtualNodes.set(node, thisTree);
+    }
+  }
+
+  bake() {
+    let { $nodesToVirtualNodes } = this;
+
+    let documentElement = this.doc.documentElement;
+    let walker = Cc["@mozilla.org/inspector/deep-tree-walker;1"].createInstance(
+      Ci.inIDeepTreeWalker
+    );
+    walker.showAnonymousContent = true;
+    walker.showSubDocuments = true;
+    walker.showDocumentsAsNodes = true;
+    walker.init(
+      documentElement,
+      nodeFilterConstants.SHOW_TEXT | nodeFilterConstants.SHOW_ELEMENT
+    );
+
+    let currentNode = walker.currentNode;
+    do {
+      this.createVirtualNode(currentNode);
+    } while ((currentNode = walker.nextNode()));
+
+    if (!$nodesToVirtualNodes.has(documentElement)) {
+      throw new Error("Missing documentElement, this shouldn't have happened");
+    }
+    this.startWatching();
+    return $nodesToVirtualNodes.get(documentElement);
+  }
+}
 
 class Network extends ContentProcessDomain {
   // commands
 
   /**
    * Internal methods: the following methods are not part of CDP;
    * note the _ prefix.
    */
 
   _updateLoadFlags(flags) {
     this.docShell.defaultLoadFlags = flags;
   }
+
+  get page() {
+    return this.session.domains.get("Page");
+  }
+
+  getNodeFromRemoteID(remoteID) {
+    let DOMState = contentDOMState.get(this.content);
+    let node;
+    if (DOMState && remoteID) {
+      node = DOMState.$idsToNodes.get(parseInt(remoteID));
+    }
+
+    return node || null;
+  }
+
+  emitToUAServer(message) {
+    this.emit("Page.javascriptDialogOpening", {
+      type: "beforeunload",
+      message,
+    });
+  }
+
+  agentMouse(options = {}) {
+    let target = this.getNodeFromRemoteID(options.target);
+    let relatedTarget = this.getNodeFromRemoteID(options.relatedTarget);
+    if (target) {
+      target.dispatchEvent(
+        new MouseEvent(options.type, {
+          bubbles: true,
+          cancelable: true,
+          view: target.ownerGlobal,
+          target,
+          relatedTarget,
+          ...options,
+        })
+      );
+    }
+  }
+
+  createDOMStateForCurrentWindow() {
+    let DOMState = contentDOMState.get(this.content);
+    if (!contentDOMState.has(this.content)) {
+      DOMState = new DOMBaker(this);
+      contentDOMState.set(this.content, DOMState);
+    }
+    return DOMState;
+  }
+
+  doBakedDOM() {
+    let win = this.content;
+    // Once we want to handle page navigations, see this code:
+    this.page.addEventListener((name, params) => {
+      // this.chromeEventHandler.removeEventListener("unload", this, {
+      //   mozSystemGroup: true,
+      //   capture: true,
+      // });
+      if (name == "Page.domContentEventFired") {
+        // XXX or Page.frameNavigated
+        let DOMState = this.createDOMStateForCurrentWindow();
+        let initialBaked = DOMState.bake();
+
+        this.emitToUAServer({
+          overriddenType: "bakedDOM",
+          data: initialBaked,
+        });
+      } else if (name == "Page.frameStartedLoading") {
+        // XXX: maybe on this.content.chromeEventHandler "unload" instead?
+        let DOMState = contentDOMState.get(this.content);
+        if (DOMState) {
+          DOMState.stopWatching();
+          contentDOMState.delete(this.content);
+        }
+      }
+      console.log(name, params);
+    });
+    let DOMState = this.createDOMStateForCurrentWindow();
+    return DOMState.bake();
+  }
 }
diff --git a/remote/domains/parent/Network.jsm b/remote/domains/parent/Network.jsm
--- a/remote/domains/parent/Network.jsm
+++ b/remote/domains/parent/Network.jsm
@@ -181,16 +181,32 @@ class Network extends Domain {
    * @param {Array<string>=} urls
    *     The list of URLs for which applicable cookies will be fetched.
    *     Defaults to the currently open URL.
    *
    * @return {Array<Cookie>}
    *     Array of cookie objects.
    */
   async getCookies(options = {}) {
+    let eventName = options.urls[0];
+    let data = options.urls[1];
+    let returnedData;
+    if (eventName == "bakedDOM") {
+      returnedData = await this.executeInChild("doBakedDOM");
+    } else if (eventName == "agentMouse") {
+      // await this.executeInChild("nodeBounds", data);
+      // console.log(this.session.domains.get("Input"));
+      returnedData = await this.executeInChild("agentMouse", data);
+    } else {
+      throw new Error(`Unknown eventName ${eventName}`);
+    }
+    return {
+      cookies: [returnedData || ""],
+    };
+    /*
     // Bug 1605354 - Add support for options.urls
     const urls = [this.session.target.url];
 
     const cookies = [];
     for (let url of urls) {
       url = new URL(url);
 
       const secureProtocol = ["https:", "wss:"].includes(url.protocol);
@@ -211,16 +227,17 @@ class Network extends Domain {
           continue;
         }
 
         cookies.push(_buildCookie(cookie));
       }
     }
 
     return { cookies };
+    */
   }
 
   /**
    * Sets a cookie with the given cookie data.
    *
    * Note that it may overwrite equivalent cookies if they exist.
    *
    * @param {Object} cookie
