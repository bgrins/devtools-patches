# HG changeset patch
# Parent 630fc81e865e909a298df238620e769071bbd3d1
# User Heather Arthur <fayearthur@gmail.com>
Bug 1105572 - Font inspector should display fonts using their font weight and style; r=bgrins

diff --git a/browser/devtools/fontinspector/test/browser_fontinspector.html b/browser/devtools/fontinspector/test/browser_fontinspector.html
--- a/browser/devtools/fontinspector/test/browser_fontinspector.html
+++ b/browser/devtools/fontinspector/test/browser_fontinspector.html
@@ -22,9 +22,10 @@
     font-family: bar;
     font-weight: 800;
   }
 </style>
 
 <body>
   BODY
   <div>DIV</div>
+  <div class="bold-text">BOLD DIV</div>
 </body>
diff --git a/browser/devtools/fontinspector/test/browser_fontinspector.js b/browser/devtools/fontinspector/test/browser_fontinspector.js
--- a/browser/devtools/fontinspector/test/browser_fontinspector.js
+++ b/browser/devtools/fontinspector/test/browser_fontinspector.js
@@ -34,40 +34,58 @@ add_task(function*() {
 
   yield testShowAllFonts(inspector);
 
   view = viewDoc = null;
 });
 
 function* testBodyFonts(inspector) {
   let s = viewDoc.querySelectorAll("#all-fonts > section");
-  is(s.length, 2, "Found 2 fonts");
+  is(s.length, 3, "Found 3 fonts");
 
   // test first web font
   is(s[0].querySelector(".font-name").textContent,
      "Ostrich Sans Medium", "font 0: Right font name");
   ok(s[0].classList.contains("is-remote"),
      "font 0: is remote");
   is(s[0].querySelector(".font-url").value,
      "http://mochi.test:8888/browser/browser/devtools/fontinspector/test/ostrich-regular.ttf",
      "font 0: right url");
   is(s[0].querySelector(".font-format").textContent,
      "truetype", "font 0: right font format");
   is(s[0].querySelector(".font-css-name").textContent,
      "bar", "font 0: right css name");
 
+  // test bold web font
+  is(s[1].querySelector(".font-name").textContent,
+     "Ostrich Sans Black", "font 1: Right font name");
+  ok(s[1].classList.contains("is-remote"),
+     "font 1: is remote");
+  is(s[1].querySelector(".font-url").value,
+     "http://mochi.test:8888/browser/browser/devtools/fontinspector/test/ostrich-black.ttf",
+     "font 1: right url");
+  ok(s[1].querySelector(".font-format").hidden,
+     "font 1 format is hidden");
+  is(s[1].querySelector(".font-css-name").textContent,
+     "bar", "font 1: right css name");
+
+  // test that the bold and regular fonts have different previews
+  let regSrc = s[0].querySelector(".font-preview").src;
+  let boldSrc = s[1].querySelector(".font-preview").src;
+  isnot(regSrc, boldSrc, "preview for bold font is different from regular");
+
   // test system font
-  let font2Name = s[1].querySelector(".font-name").textContent;
-  let font2CssName = s[1].querySelector(".font-css-name").textContent;
+  let font2Name = s[2].querySelector(".font-name").textContent;
+  let font2CssName = s[2].querySelector(".font-css-name").textContent;
 
   // On Linux test machines, the Arial font doesn't exist.
   // The fallback is "Liberation Sans"
   ok((font2Name == "Arial") || (font2Name == "Liberation Sans"),
      "font 1: Right font name");
-  ok(s[1].classList.contains("is-local"), "font 2: is local");
+  ok(s[2].classList.contains("is-local"), "font 2: is local");
   ok((font2CssName == "Arial") || (font2CssName == "Liberation Sans"),
      "Arial", "font 2: right css name");
 }
 
 function* testDivFonts(inspector) {
   let updated = inspector.once("fontinspector-updated");
   yield selectNode("div", inspector);
   yield updated;
@@ -82,10 +100,10 @@ function* testShowAllFonts(inspector) {
   info("testing showing all fonts");
 
   let updated = inspector.once("fontinspector-updated");
   viewDoc.querySelector("#showall").click();
   yield updated;
 
   is(inspector.selection.nodeFront.nodeName, "BODY", "Show all fonts selected the body node");
   let sections = viewDoc.querySelectorAll("#all-fonts > section");
-  is(sections.length, 2, "And font-inspector still shows 2 fonts for body");
+  is(sections.length, 3, "And font-inspector still shows 3 fonts for body");
 }
diff --git a/toolkit/devtools/server/actors/styles.js b/toolkit/devtools/server/actors/styles.js
--- a/toolkit/devtools/server/actors/styles.js
+++ b/toolkit/devtools/server/actors/styles.js
@@ -35,16 +35,18 @@ exports.PSEUDO_ELEMENTS = PSEUDO_ELEMENT
 const PSEUDO_ELEMENTS_TO_READ = PSEUDO_ELEMENTS.filter(pseudo => {
   return pseudo !== ":before" && pseudo !== ":after";
 });
 
 const XHTML_NS = "http://www.w3.org/1999/xhtml";
 const FONT_PREVIEW_TEXT = "Abc";
 const FONT_PREVIEW_FONT_SIZE = 40;
 const FONT_PREVIEW_FILLSTYLE = "black";
+const REGULAR_FONT_WEIGHT = 400;
+const BOLD_FONT_WEIGHT = 700;
 
 // Predeclare the domnode actor type for use in requests.
 types.addActorType("domnode");
 
 // Predeclare the domstylerule actor type
 types.addActorType("domstylerule");
 
 /**
@@ -271,34 +273,55 @@ var PageStyleActor = protocol.ActorClass
       }
 
       // If this font comes from a @font-face rule
       if (font.rule) {
         fontFace.rule = StyleRuleActor(this, font.rule);
         fontFace.ruleText = font.rule.cssText;
       }
 
+      // Get the weight and style of this font for the preview and sort order
+      let weight = REGULAR_FONT_WEIGHT, style = "";
+      if (font.rule) {
+        weight = font.rule.style.getPropertyValue("font-weight")
+                 || REGULAR_FONT_WEIGHT;
+        if (weight == "bold") {
+          weight = BOLD_FONT_WEIGHT;
+        } else if (weight == "regular") {
+          weight = REGULAR_FONT_WEIGHT;
+        }
+        style = font.rule.style.getPropertyValue("font-style") || "";
+      }
+      fontFace.weight = weight;
+      fontFace.style = style;
+
       if (options.includePreviews) {
+        let fontStyle = weight + " " + style;
+
         let opts = {
           previewText: options.previewText,
           previewFontSize: options.previewFontSize,
+          fontStyle: fontStyle,
           fillStyle: options.previewFillStyle
         }
         let { dataURL, size } = getFontPreviewData(font.CSSFamilyName,
                                                    contentDocument, opts);
         fontFace.preview = {
           data: LongStringActor(this.conn, dataURL),
           size: size
         };
       }
       fontsArray.push(fontFace);
     }
 
     // @font-face fonts at the top, then alphabetically, then by weight
     fontsArray.sort(function(a, b) {
+      return a.weight > b.weight ? 1 : -1;
+    });
+    fontsArray.sort(function(a, b) {
       if (a.CSSFamilyName == b.CSSFamilyName) {
         return 0;
       }
       return a.CSSFamilyName > b.CSSFamilyName ? 1 : -1;
     });
     fontsArray.sort(function(a, b) {
       if ((a.rule && b.rule) || (!a.rule && !b.rule)) {
         return 0;
