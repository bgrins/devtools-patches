# HG changeset patch
# Parent 90267d87c37592209e879db91a6c636d501f9c96
# User Willian Gustavo Veiga <contact@willianveiga.com>
# Parent  d8af4615191992192bfa2f6e40aa6cac27fdb047
Bug 992947 - Add "Open Link In New Tab" item to stylesheet list. r=bgrins

diff --git a/browser/devtools/styleeditor/StyleEditorUI.jsm b/browser/devtools/styleeditor/StyleEditorUI.jsm
--- a/browser/devtools/styleeditor/StyleEditorUI.jsm
+++ b/browser/devtools/styleeditor/StyleEditorUI.jsm
@@ -70,16 +70,18 @@ function StyleEditorUI(debuggee, target,
   this._onOptionsPopupShowing = this._onOptionsPopupShowing.bind(this);
   this._onOptionsPopupHiding = this._onOptionsPopupHiding.bind(this);
   this._onStyleSheetCreated = this._onStyleSheetCreated.bind(this);
   this._onNewDocument = this._onNewDocument.bind(this);
   this._onMediaPrefChanged = this._onMediaPrefChanged.bind(this);
   this._updateMediaList = this._updateMediaList.bind(this);
   this._clear = this._clear.bind(this);
   this._onError = this._onError.bind(this);
+  this._updateOpenLinkItem = this._updateOpenLinkItem.bind(this);
+  this._openLinkNewTab = this._openLinkNewTab.bind(this);
 
   this._prefObserver = new PrefObserver("devtools.styleeditor.");
   this._prefObserver.on(PREF_ORIG_SOURCES, this._onNewDocument);
   this._prefObserver.on(PREF_MEDIA_SIDEBAR, this._onMediaPrefChanged);
 }
 
 StyleEditorUI.prototype = {
   /**
@@ -159,29 +161,42 @@ StyleEditorUI.prototype = {
       this._debuggee.addStyleSheet(null).then(this._onStyleSheetCreated);
     });
 
     wire(this._view.rootElement, ".style-editor-importButton", ()=> {
       this._importFromFile(this._mockImportFile || null, this._window);
     });
 
     this._optionsButton = this._panelDoc.getElementById("style-editor-options");
+    this._panelDoc.addEventListener("contextmenu", () => {
+      this._contextMenuStyleSheet = null;
+    }, true);
+
+    this._contextMenu = this._panelDoc.getElementById("sidebar-context");
+    this._contextMenu.addEventListener("popupshowing",
+                                       this._updateOpenLinkItem);
+
     this._optionsMenu = this._panelDoc.getElementById("style-editor-options-popup");
     this._optionsMenu.addEventListener("popupshowing",
                                        this._onOptionsPopupShowing);
     this._optionsMenu.addEventListener("popuphiding",
                                        this._onOptionsPopupHiding);
 
     this._sourcesItem = this._panelDoc.getElementById("options-origsources");
     this._sourcesItem.addEventListener("command",
                                        this._toggleOrigSources);
+
     this._mediaItem = this._panelDoc.getElementById("options-show-media");
     this._mediaItem.addEventListener("command",
                                      this._toggleMediaSidebar);
 
+    this._openLinkNewTabItem = this._panelDoc.getElementById("context-openlinknewtab");
+    this._openLinkNewTabItem.addEventListener("command",
+                                              this._openLinkNewTab);
+
     let nav = this._panelDoc.querySelector(".splitview-controller");
     nav.setAttribute("width", Services.prefs.getIntPref(PREF_NAV_WIDTH));
   },
 
   /**
    * Listener handling the 'gear menu' popup showing event.
    * Update options menu items to reflect current preference settings.
    */
@@ -407,16 +422,39 @@ StyleEditorUI.prototype = {
   /**
    * Toggle the @media sidebar in each editor depending on the setting.
    */
   _onMediaPrefChanged: function() {
     this.editors.forEach(this._updateMediaList);
   },
 
   /**
+   * This method handles the following cases related to the context menu item "_openLinkNewTabItem":
+   *
+   * 1) There was a stylesheet clicked on and it is external: show and enable the context menu item
+   * 2) There was a stylesheet clicked on and it is inline: show and disable the context menu item
+   * 3) There was no stylesheet clicked on (the right click happened below the list): hide the context menu
+   */
+  _updateOpenLinkItem: function() {
+    this._openLinkNewTabItem.setAttribute("hidden", !this._contextMenuStyleSheet);
+    if (this._contextMenuStyleSheet) {
+      this._openLinkNewTabItem.setAttribute("disabled", !this._contextMenuStyleSheet.href);
+    }
+  },
+
+  /**
+   * Open a particular stylesheet in a new tab.
+   */
+  _openLinkNewTab: function() {
+    if (this._contextMenuStyleSheet) {
+      this._window.openUILinkIn(this._contextMenuStyleSheet.href, "tab");
+    }
+  },
+
+  /**
    * Remove a particular stylesheet editor from the UI
    *
    * @param {StyleSheetEditor}  editor
    *        The editor to remove.
    */
   _removeStyleSheetEditor: function(editor) {
     if (editor.summary) {
       this._view.removeItem(editor.summary);
@@ -488,16 +526,20 @@ StyleEditorUI.prototype = {
           event.stopPropagation();
           event.target.blur();
 
           editor.saveToFile(editor.savedFile);
         });
 
         this._updateSummaryForEditor(editor, summary);
 
+        summary.addEventListener("contextmenu", (event) => {
+          this._contextMenuStyleSheet = editor.styleSheet;
+        }, false);
+
         summary.addEventListener("focus", function onSummaryFocus(event) {
           if (event.target == summary) {
             // autofocus the stylesheet name
             summary.querySelector(".stylesheet-name").focus();
           }
         }, false);
 
         let sidebar = details.querySelector(".stylesheet-sidebar");
diff --git a/browser/devtools/styleeditor/styleeditor.xul b/browser/devtools/styleeditor/styleeditor.xul
--- a/browser/devtools/styleeditor/styleeditor.xul
+++ b/browser/devtools/styleeditor/styleeditor.xul
@@ -25,16 +25,17 @@
 
 <xul:window xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
         xmlns="http://www.w3.org/1999/xhtml"
         id="style-editor-chrome-window">
 
   <script type="application/javascript;version=1.8"
           src="chrome://browser/content/devtools/theme-switching.js"/>
   <xul:script type="application/javascript" src="chrome://global/content/globalOverlay.js"/>
+  <xul:script type="application/javascript" src="chrome://browser/content/utilityOverlay.js"/>
   <xul:script type="application/javascript">
     function goUpdateSourceEditorMenuItems() {
       goUpdateGlobalEditMenuItems();
 
       ['cmd_undo', 'cmd_redo', 'cmd_cut', 'cmd_paste',
        'cmd_delete', 'cmd_find', 'cmd_findAgain'].forEach(goUpdateCommand);
     }
   </xul:script>
@@ -56,16 +57,20 @@
       <xul:menuitem id="cMenu_findAgain"/>
       <xul:menuseparator/>
       <xul:menuitem id="se-menu-gotoLine"
           label="&gotoLineCmd.label;"
           accesskey="&gotoLineCmd.accesskey;"
           key="key_gotoLine"
           command="cmd_gotoLine"/>
     </xul:menupopup>
+    <xul:menupopup id="sidebar-context">
+      <xul:menuitem id="context-openlinknewtab"
+        label="&openLinkNewTab.label;"/>
+    </xul:menupopup>
     <xul:menupopup id="style-editor-options-popup"
                    position="before_start">
       <xul:menuitem id="options-origsources"
                     type="checkbox"
                     label="&showOriginalSources.label;"
                     accesskey="&showOriginalSources.accesskey;"/>
       <xul:menuitem id="options-show-media"
                     type="checkbox"
diff --git a/browser/devtools/styleeditor/test/browser.ini b/browser/devtools/styleeditor/test/browser.ini
--- a/browser/devtools/styleeditor/test/browser.ini
+++ b/browser/devtools/styleeditor/test/browser.ini
@@ -63,16 +63,17 @@ skip-if = e10s # Bug 1055333 - style edi
 [browser_styleeditor_init.js]
 [browser_styleeditor_inline_friendly_names.js]
 [browser_styleeditor_loading.js]
 [browser_styleeditor_media_sidebar.js]
 [browser_styleeditor_media_sidebar_sourcemaps.js]
 [browser_styleeditor_navigate.js]
 [browser_styleeditor_new.js]
 [browser_styleeditor_nostyle.js]
+[browser_styleeditor_opentab.js]
 [browser_styleeditor_pretty.js]
 [browser_styleeditor_private_perwindowpb.js]
 [browser_styleeditor_reload.js]
 [browser_styleeditor_sv_keynav.js]
 [browser_styleeditor_sv_resize.js]
 [browser_styleeditor_selectstylesheet.js]
 [browser_styleeditor_sourcemaps.js]
 [browser_styleeditor_sourcemap_large.js]
diff --git a/browser/devtools/styleeditor/test/browser_styleeditor_opentab.js b/browser/devtools/styleeditor/test/browser_styleeditor_opentab.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/styleeditor/test/browser_styleeditor_opentab.js
@@ -0,0 +1,121 @@
+/* vim: set ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+// A test to check the 'Open Link in new tab' functionality in the
+// context menu item for stylesheets (bug 992947).
+const TESTCASE_URI = TEST_BASE_HTTPS + "simple.html";
+waitForExplicitFinish();
+
+add_task(function*() {
+  let panel = yield addTabAndOpenStyleEditors(2, null, TESTCASE_URI);
+  let ui = panel.UI;
+
+  yield rightClickStyleSheet(ui, ui.editors[0]);
+  is(ui._openLinkNewTabItem.getAttribute("disabled"), "false", "The menu item is not disabled");
+  is(ui._openLinkNewTabItem.getAttribute("hidden"), "false", "The menu item is not hidden");
+
+  let url = "https://example.com/browser/browser/devtools/styleeditor/test/simple.css";
+  is(ui._contextMenuStyleSheet.href, url, "Correct URL for sheet");
+
+  let tabOpened = onNewTabOpened();
+  ui._openLinkNewTabItem.click();
+
+  info (`Waiting for a tab to open - ${url}`);
+  yield tabOpened;
+  is(gBrowser.selectedBrowser.currentURI.spec, url, "The opened tab is correct");
+  gBrowser.removeCurrentTab();
+
+  yield rightClickInlineStyleSheet(ui, ui.editors[1]);
+  is(ui._openLinkNewTabItem.getAttribute("disabled"), "true", "The menu item is disabled");
+  is(ui._openLinkNewTabItem.getAttribute("hidden"), "false", "The menu item is not hidden");
+
+  yield rightClickNoStyleSheet(ui);
+  is(ui._openLinkNewTabItem.getAttribute("hidden"), "true", "The menu item is not hidden");
+});
+
+function onNewTabOpened() {
+  let tabOpened = promise.defer();
+  gBrowser.tabContainer.addEventListener("TabOpen", function open(e) {
+    gBrowser.tabContainer.removeEventListener("TabOpen", open, false);
+    let browser = gBrowser.getBrowserForTab(e.target);
+    browser.addEventListener("load", function load() {
+      browser.removeEventListener("load", load, true);
+      tabOpened.resolve();
+    }, true);
+  }, false);
+
+  return tabOpened.promise;
+}
+
+function onPopupShow(contextMenu) {
+  let defer = promise.defer();
+  contextMenu.addEventListener("popupshown", function onpopupshown() {
+    contextMenu.removeEventListener("popupshown", onpopupshown);
+    defer.resolve();
+  });
+  return defer.promise;
+}
+
+function onPopupHide(contextMenu) {
+  let defer = promise.defer();
+  contextMenu.addEventListener("popuphidden", function popuphidden() {
+    contextMenu.removeEventListener("popuphidden", popuphidden);
+    defer.resolve();
+  });
+  return defer.promise;
+}
+
+function rightClickStyleSheet(ui, editor) {
+  let defer = promise.defer();
+
+  onPopupShow(ui._contextMenu).then(()=> {
+    onPopupHide(ui._contextMenu).then(() => {
+      defer.resolve();
+    });
+    ui._contextMenu.hidePopup();
+  });
+
+  EventUtils.synthesizeMouseAtCenter(
+    editor.summary.querySelector(".stylesheet-name"),
+    {button: 2, type: "contextmenu"},
+    gPanelWindow);
+
+  return defer.promise;
+}
+
+function rightClickInlineStyleSheet(ui, editor) {
+  let defer = promise.defer();
+
+  onPopupShow(ui._contextMenu).then(()=> {
+    onPopupHide(ui._contextMenu).then(() => {
+      defer.resolve();
+    });
+    ui._contextMenu.hidePopup();
+  });
+
+  EventUtils.synthesizeMouseAtCenter(
+    editor.summary.querySelector(".stylesheet-name"),
+    {button: 2, type: "contextmenu"},
+    gPanelWindow);
+
+  return defer.promise;
+}
+
+function rightClickNoStyleSheet(ui) {
+  let defer = promise.defer();
+
+  onPopupShow(ui._contextMenu).then(()=> {
+    onPopupHide(ui._contextMenu).then(() => {
+      defer.resolve();
+    });
+    ui._contextMenu.hidePopup();
+  });
+
+  EventUtils.synthesizeMouseAtCenter(
+    ui._panelDoc.querySelector("#splitview-tpl-summary-stylesheet"),
+    {button: 2, type: "contextmenu"},
+    gPanelWindow);
+
+  return defer.promise;
+}
diff --git a/browser/devtools/styleeditor/test/simple.html b/browser/devtools/styleeditor/test/simple.html
--- a/browser/devtools/styleeditor/test/simple.html
+++ b/browser/devtools/styleeditor/test/simple.html
@@ -1,11 +1,12 @@
 <!doctype html>
 <html>
 <head>
+  <meta charset="utf-8">
   <title>simple testcase</title>
   <link rel="stylesheet" charset="UTF-8" type="text/css" media="screen" href="simple.css"/>
   <style type="text/css">
   body {
     background: white;
   }
 
   div {
diff --git a/browser/locales/en-US/chrome/browser/devtools/styleeditor.dtd b/browser/locales/en-US/chrome/browser/devtools/styleeditor.dtd
--- a/browser/locales/en-US/chrome/browser/devtools/styleeditor.dtd
+++ b/browser/locales/en-US/chrome/browser/devtools/styleeditor.dtd
@@ -56,8 +56,12 @@
      tip sentence shown when there is no stylesheet. It suggests to create a new
      stylesheet and provides an action link to do so. -->
 <!ENTITY noStyleSheet-tip-start.label  "Perhaps you'd like to ">
 <!-- LOCALICATION NOTE  (noStyleSheet-tip-action.label): This is text for the
      link that triggers creation of a new stylesheet. -->
 <!ENTITY noStyleSheet-tip-action.label "append a new style sheet">
 <!-- LOCALICATION NOTE  (noStyleSheet-tip-end.label): End of the tip sentence -->
 <!ENTITY noStyleSheet-tip-end.label    "?">
+
+<!-- LOCALIZATION NOTE (openLinkNewTab.label): This is the text for the
+     context menu item that opens a stylesheet in a new tab -->
+<!ENTITY openLinkNewTab.label     "Open Link In New Tab">
