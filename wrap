# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  4a699b34f3c36dfd5b8af1e213ba91918bdad7f0

diff --git a/toolkit/content/widgets/browser.js b/toolkit/content/widgets/browser.js
--- a/toolkit/content/widgets/browser.js
+++ b/toolkit/content/widgets/browser.js
@@ -31,20 +31,61 @@ class MozBrowser extends XULFrameElement
       this.destroy();
       this.construct();
     }
   }
 
   constructor() {
     super();
 
+    let wrap = (f, n) => {
+      return (...args) => {
+        if (n == "finder") {
+          console.log("Returning for", n, this.isConnected);
+        }
+        // console.log("Returning for", n, this.isConnected);
+        if (!this.isConnected) {
+          return undefined;
+        }
+
+        return f.apply(this, args);
+      };
+    };
+
+    // Wrap every function, getter, and setter into a function that simulates
+    // XBL behavior when disconnected.
+    let descriptors = Object.getOwnPropertyDescriptors(MozBrowser.prototype);
+    for (let name in descriptors) {
+      if (name == "destroy") {
+        continue;
+      }
+      let descriptor = descriptors[name];
+      let newDescriptor = Object.assign({}, descriptor);
+      if (typeof descriptor.value == "function") {
+        newDescriptor.value = wrap(descriptor.value, name);
+      }
+      if (typeof descriptor.get == "function") {
+        newDescriptor.get = wrap(descriptor.get, name);
+      }
+      if (typeof descriptor.set == "function") {
+        newDescriptor.set = wrap(descriptor.set, name);
+      }
+
+      if (name == "finder") {
+        console.log("Finder", descriptor, newDescriptor);
+      }
+
+      delete this[name];
+      Object.defineProperty(this, name, newDescriptor);
+    }
+
     this.browserNumber = browserNumber++;
     LOG("constructor() called", this.logString);
 
-    this.destroyOnUnload = this.destroyOnUnload.bind(this);
+    // this.destroyOnUnload = this.destroyOnUnload.bind(this);
 
 
     /**
      * These are managed by the tabbrowser
      */
     this.droppedLinkHandler = null;
 
     this.mIconURL = null;
@@ -323,16 +364,17 @@ class MozBrowser extends XULFrameElement
 
   get webBrowserFind() {
     if (!this._webBrowserFind)
       this._webBrowserFind = this.docShell.QueryInterface(Ci.nsIInterfaceRequestor).getInterface(Ci.nsIWebBrowserFind);
     return this._webBrowserFind;
   }
 
   get finder() {
+    console.log("Calling actual finder()", this.isConnected);
     if (this.isRemoteBrowser) {
       if (!this._remoteFinder) {
         // Don't attempt to create the remote finder if the
         // messageManager has already gone away
         if (!this.messageManager)
           return null;
 
         let jsm = "resource://gre/modules/FinderParent.jsm";
diff --git a/toolkit/content/widgets/findbar.js b/toolkit/content/widgets/findbar.js
--- a/toolkit/content/widgets/findbar.js
+++ b/toolkit/content/widgets/findbar.js
@@ -388,16 +388,17 @@ class MozFindbar extends XULElement {
    * needs to be explicitly called in this case
    */
   destroy() {
     if (this._destroyed)
       return;
     window.removeEventListener("unload", this.destroy);
     this._destroyed = true;
 
+    console.log("Destroying findbar", this.browser, this.browser.finder);
     if (this.browser && this.browser.finder)
       this.browser.finder.destroy();
 
     this.browser = null;
 
     let prefsvc = this._prefsvc;
     prefsvc.removeObserver("accessibility.typeaheadfind",
                             this._observer);
