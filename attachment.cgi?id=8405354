# HG changeset patch
# Parent d8c1b10c3a3dc57e9fa9ff47db13950a59befc64
# User Patrick Brosset <pbrosset@mozilla.com>
Bug 984880 - Display authored styles in the devtools rule-view; r=bgrins

diff --git a/browser/app/profile/firefox.js b/browser/app/profile/firefox.js
--- a/browser/app/profile/firefox.js
+++ b/browser/app/profile/firefox.js
@@ -1132,16 +1132,18 @@ pref("devtools.inspector.enabled", true)
 pref("devtools.inspector.activeSidebar", "ruleview");
 // Enable the markup preview
 pref("devtools.inspector.markupPreview", false);
 pref("devtools.inspector.remote", false);
 // Expand pseudo-elements by default in the rule-view
 pref("devtools.inspector.show_pseudo_elements", true);
 // The default size for image preview tooltips in the rule-view/computed-view/markup-view
 pref("devtools.inspector.imagePreviewTooltipSize", 300);
+// Display styles as authored in the inspector's rule view
+pref("devtools.inspector.authoredStyles", false);
 
 // DevTools default color unit
 pref("devtools.defaultColorUnit", "hex");
 
 // Enable the Responsive UI tool
 pref("devtools.responsiveUI.no-reload-notification", false);
 
 // Enable the Debugger
diff --git a/browser/devtools/framework/options-panel.css b/browser/devtools/framework/options-panel.css
--- a/browser/devtools/framework/options-panel.css
+++ b/browser/devtools/framework/options-panel.css
@@ -16,18 +16,18 @@
 }
 
 .options-vertical-pane > label {
   display: block;
 }
 
 .options-vertical-pane {
   margin: 5px;
-  width: calc(50% - 30px);
-  min-width: 350px;
+  width: calc(33% - 30px);
+  min-width: 300px;
   -moz-padding-start: 5px;
 }
 
 .options-vertical-pane > label {
   padding: 2px 0;
   font-size: 1.4rem;
 }
 
diff --git a/browser/devtools/framework/toolbox-options.xul b/browser/devtools/framework/toolbox-options.xul
--- a/browser/devtools/framework/toolbox-options.xul
+++ b/browser/devtools/framework/toolbox-options.xul
@@ -22,31 +22,56 @@
         <vbox id="additional-tools-box" class="options-groupbox"/>
         <label value="&options.selectEnabledToolboxButtons.label;"/>
         <vbox id="enabled-toolbox-buttons-box" class="options-groupbox"/>
         <label id="tools-not-supported-label"
                class="options-citation-label theme-comment"
                value="&options.toolNotSupported.label;"/>
 
       </vbox>
+
       <vbox class="options-vertical-pane" flex="1">
         <label value="&options.selectDevToolsTheme.label;"/>
         <radiogroup id="devtools-theme-box"
                     class="options-groupbox"
                     data-pref="devtools.theme"
                     orient="horizontal">
           <radio value="light" label="&options.lightTheme.label;"/>
           <radio value="dark" label="&options.darkTheme.label;"/>
         </radiogroup>
         <label value="&options.commonPrefs.label;"/>
         <vbox id="commonprefs-options" class="options-groupbox">
           <checkbox label="&options.enablePersistentLogging.label;"
                     tooltiptext="&options.enablePersistentLogging.tooltip;"
                     data-pref="devtools.webconsole.persistlog"/>
         </vbox>
+        <label value="&options.context.advancedSettings;"/>
+        <vbox id="context-options" class="options-groupbox">
+          <checkbox id="devtools-disable-cache"
+                    label="&options.disableCache.label;"
+                    tooltiptext="&options.disableCache.tooltip;"/>
+          <checkbox id="devtools-disable-javascript"
+                    label="&options.disableJavaScript.label;"
+                    tooltiptext="&options.disableJavaScript.tooltip;"/>
+          <hbox class="hidden-labels-box">
+            <checkbox label="&options.enableChrome.label4;"
+                      tooltiptext="&options.enableChrome.tooltip2;"
+                      data-pref="devtools.chrome.enabled"/>
+          </hbox>
+          <hbox class="hidden-labels-box">
+            <checkbox label="&options.enableRemote.label3;"
+                      tooltiptext="&options.enableRemote.tooltip;"
+                      data-pref="devtools.debugger.remote-enabled"/>
+          </hbox>
+          <label class="options-citation-label"
+                 value="&options.context.triggersPageRefresh;"/>
+        </vbox>
+      </vbox>
+
+      <vbox class="options-vertical-pane" flex="1">
         <label value="&options.context.inspector;"/>
         <vbox id="inspector-options" class="options-groupbox">
           <hbox align="center">
             <label value="&options.defaultColorUnit.label;"
               control="defaultColorUnitMenuList"
               accesskey="&options.defaultColorUnit.accesskey;"/>
             <menulist id="defaultColorUnitMenuList"
                       label="&options.defaultColorUnit.label;"
@@ -54,16 +79,20 @@
               <menupopup>
                 <menuitem label="&options.defaultColorUnit.hex;" value="hex"/>
                 <menuitem label="&options.defaultColorUnit.hsl;" value="hsl"/>
                 <menuitem label="&options.defaultColorUnit.rgb;" value="rgb"/>
                 <menuitem label="&options.defaultColorUnit.name;" value="name"/>
               </menupopup>
             </menulist>
           </hbox>
+          <checkbox id="inspector-authored-styles"
+                    label="&options.authoredStyles.label;"
+                    tooltiptext="&options.authoredStyles.tooltip;"
+                    data-pref="devtools.inspector.authoredStyles"/>
         </vbox>
         <label value="&options.webconsole.label;"/>
         <vbox id="webconsole-options" class="options-groupbox">
           <checkbox id="webconsole-timestamp-messages"
                     label="&options.timestampMessages.label;"
                     tooltiptext="&options.timestampMessages.tooltip;"
                     data-pref="devtools.webconsole.timestampMessages"/>
         </vbox>
@@ -77,33 +106,12 @@
                     data-pref="devtools.styleeditor.autocompletion-enabled"/>
         </vbox>
         <label value="&options.profiler.label;"/>
         <vbox id="profiler-options" class="options-groupbox">
           <checkbox label="&options.showPlatformData.label;"
                     tooltiptext="&options.showPlatformData.tooltip;"
                     data-pref="devtools.profiler.ui.show-platform-data"/>
         </vbox>
-        <label value="&options.context.advancedSettings;"/>
-        <vbox id="context-options" class="options-groupbox">
-          <checkbox id="devtools-disable-cache"
-                    label="&options.disableCache.label;"
-                    tooltiptext="&options.disableCache.tooltip;"/>
-          <checkbox id="devtools-disable-javascript"
-                    label="&options.disableJavaScript.label;"
-                    tooltiptext="&options.disableJavaScript.tooltip;"/>
-          <hbox class="hidden-labels-box">
-            <checkbox label="&options.enableChrome.label4;"
-                      tooltiptext="&options.enableChrome.tooltip2;"
-                      data-pref="devtools.chrome.enabled"/>
-          </hbox>
-          <hbox class="hidden-labels-box">
-            <checkbox label="&options.enableRemote.label3;"
-                      tooltiptext="&options.enableRemote.tooltip;"
-                      data-pref="devtools.debugger.remote-enabled"/>
-          </hbox>
-          <label class="options-citation-label"
-                 value="&options.context.triggersPageRefresh;"/>
-        </vbox>
       </vbox>
     </hbox>
   </hbox>
 </window>
diff --git a/browser/devtools/layoutview/view.js b/browser/devtools/layoutview/view.js
--- a/browser/devtools/layoutview/view.js
+++ b/browser/devtools/layoutview/view.js
@@ -12,17 +12,17 @@ const Cc = Components.classes;
 
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource://gre/modules/Task.jsm");
 Cu.import("resource://gre/modules/devtools/Loader.jsm");
 Cu.import("resource://gre/modules/devtools/Console.jsm");
 
 const promise = devtools.require("sdk/core/promise");
 const {InplaceEditor, editableItem} = devtools.require("devtools/shared/inplace-editor");
-const {parseDeclarations} = devtools.require("devtools/styleinspector/css-parsing-utils");
+const {parseDeclarations} = devtools.require("devtools/css-parsing-utils");
 
 const NUMERIC = /^-?[\d\.]+$/;
 
 /**
  * An instance of EditingSession tracks changes that have been made during the
  * modification of box model values. All of these changes can be reverted by
  * calling revert.
  *
diff --git a/browser/devtools/sourceeditor/css-autocompleter.js b/browser/devtools/sourceeditor/css-autocompleter.js
--- a/browser/devtools/sourceeditor/css-autocompleter.js
+++ b/browser/devtools/sourceeditor/css-autocompleter.js
@@ -1,14 +1,14 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 const { Cc, Ci, Cu } = require('chrome');
-const cssTokenizer  = require("devtools/sourceeditor/css-tokenizer");
+const cssTokenizer  = require("devtools/css-tokenizer");
 const promise = Cu.import("resource://gre/modules/Promise.jsm");
 
 /**
  * Here is what this file (+ ./css-tokenizer.js) do.
  *
  * The main objective here is to provide as much suggestions to the user editing
  * a stylesheet in Style Editor. The possible things that can be suggested are:
  *  - CSS property names
diff --git a/browser/devtools/sourceeditor/moz.build b/browser/devtools/sourceeditor/moz.build
--- a/browser/devtools/sourceeditor/moz.build
+++ b/browser/devtools/sourceeditor/moz.build
@@ -6,13 +6,12 @@
 
 TEST_DIRS += ['test']
 
 JS_MODULES_PATH = 'modules/devtools/sourceeditor'
 
 EXTRA_JS_MODULES += [
     'autocomplete.js',
     'css-autocompleter.js',
-    'css-tokenizer.js',
     'debugger.js',
     'editor.js'
 ]
 
diff --git a/browser/devtools/styleinspector/rule-view.js b/browser/devtools/styleinspector/rule-view.js
--- a/browser/devtools/styleinspector/rule-view.js
+++ b/browser/devtools/styleinspector/rule-view.js
@@ -10,23 +10,27 @@ const {Cc, Ci, Cu} = require("chrome");
 const {Promise: promise} = Cu.import("resource://gre/modules/Promise.jsm", {});
 const {CssLogic} = require("devtools/styleinspector/css-logic");
 const {InplaceEditor, editableField, editableItem} = require("devtools/shared/inplace-editor");
 const {ELEMENT_STYLE, PSEUDO_ELEMENTS} = require("devtools/server/actors/styles");
 const {gDevTools} = Cu.import("resource:///modules/devtools/gDevTools.jsm", {});
 const {Tooltip, SwatchColorPickerTooltip} = require("devtools/shared/widgets/Tooltip");
 const {OutputParser} = require("devtools/output-parser");
 const {PrefObserver, PREF_ORIG_SOURCES} = require("devtools/styleeditor/utils");
-const {parseSingleValue, parseDeclarations} = require("devtools/styleinspector/css-parsing-utils");
+const {parseSingleValue, parseDeclarations} = require("devtools/css-parsing-utils");
 
+Cu.import("resource://gre/modules/Task.jsm");
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 
 const HTML_NS = "http://www.w3.org/1999/xhtml";
 const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
+const PREF_AUTHORED_STYLES = "devtools.inspector.authoredStyles";
+const PREF_IMAGE_PREVIEW_SIZE = "devtools.inspector.imagePreviewTooltipSize";
+const PREF_DEFAULT_COLOR_UNIT = "devtools.defaultColorUnit";
 
 /**
  * These regular expressions are adapted from firebug's css.js, and are
  * used to parse CSSStyleDeclaration's cssText attribute.
  */
 
 // Used to split on css line separators
 const CSS_LINE_RE = /(?:[^;\(]*(?:\([^\)]*?\))?[^;\(]*)*;?/g;
@@ -180,101 +184,96 @@ ElementStyle.prototype = {
    * Upon completion, this.rules[] will hold a list of Rule objects.
    *
    * Returns a promise that will be resolved when the elementStyle is
    * ready.
    */
   populate: function() {
     let populated = this.pageStyle.getApplied(this.element, {
       inherited: true,
-      matchedSelectors: true
-    }).then(entries => {
+      matchedSelectors: true,
+      authored: Services.prefs.getBoolPref(PREF_AUTHORED_STYLES)
+    }).then(Task.async(function*(entries) {
       // Make sure the dummy element has been created before continuing...
-      return this.dummyElementPromise.then(() => {
-        if (this.populated != populated) {
-          // Don't care anymore.
-          return promise.reject("unused");
-        }
+      yield this.dummyElementPromise;
 
-        // Store the current list of rules (if any) during the population
-        // process.  They will be reused if possible.
-        this._refreshRules = this.rules;
+      if (this.populated != populated) {
+        // Don't care anymore.
+        return promise.reject("unused");
+      }
 
-        this.rules = [];
+      // Store the current list of rules (if any) during the population
+      // process.  They will be reused if possible.
+      this._refreshRules = this.rules;
 
-        for (let entry of entries) {
-          this._maybeAddRule(entry);
-        }
+      this.rules = [];
 
-        // Mark overridden computed styles.
-        this.markOverriddenAll();
+      for (let entry of entries) {
+        this._maybeAddRule(entry);
+      }
 
-        this._sortRulesForPseudoElement();
+      // Mark overridden computed styles.
+      this.markOverriddenAll();
 
-        // We're done with the previous list of rules.
-        delete this._refreshRules;
+      this._sortRulesForPseudoElement();
 
-        return null;
-      });
-    }).then(null, promiseWarn);
+      // We're done with the previous list of rules.
+      delete this._refreshRules;
+
+      return null;
+    }).bind(this)).then(null, promiseWarn);
     this.populated = populated;
     return this.populated;
   },
 
   /**
    * Put pseudo elements in front of others.
    */
    _sortRulesForPseudoElement: function() {
       this.rules = this.rules.sort((a, b) => {
         return (a.pseudoElement || "z") > (b.pseudoElement || "z");
       });
    },
 
   /**
-   * Add a rule if it's one we care about.  Filters out duplicates and
-   * inherited styles with no inherited properties.
-   *
-   * @param {object} aOptions
-   *        Options for creating the Rule, see the Rule constructor.
-   *
-   * @return {bool} true if we added the rule.
+   * Add a rule if it's one we care about. Filters out duplicates and inherited
+   * styles with no inherited properties.
+   * @param {object} options Options for creating the Rule, see the Rule constructor.
    */
-  _maybeAddRule: function(aOptions) {
-    // If we've already included this domRule (for example, when a
-    // common selector is inherited), ignore it.
-    if (aOptions.rule &&
-        this.rules.some(function(rule) rule.domRule === aOptions.rule)) {
+  _maybeAddRule: function(options) {
+    // If we've already included this domRule (for example, when a common selector
+    // is inherited), ignore it
+    if (options.rule && this.rules.some(rule => rule.domRule === options.rule)) {
       return false;
     }
 
-    if (aOptions.system) {
+    if (options.system) {
       return false;
     }
 
     let rule = null;
 
-    // If we're refreshing and the rule previously existed, reuse the
-    // Rule object.
+    // If we're refreshing and the rule previously existed, reuse the Rule object
     if (this._refreshRules) {
       for (let r of this._refreshRules) {
-        if (r.matches(aOptions)) {
+        if (r.matches(options)) {
           rule = r;
-          rule.refresh(aOptions);
+          rule.refresh(options);
           break;
         }
       }
     }
 
     // If this is a new rule, create its Rule object.
     if (!rule) {
-      rule = new Rule(this, aOptions);
+      rule = new Rule(this, options);
     }
 
     // Ignore inherited rules with no properties.
-    if (aOptions.inherited && rule.textProps.length == 0) {
+    if (options.inherited && rule.textProps.length == 0) {
       return false;
     }
 
     this.rules.push(rule);
     return true;
   },
 
   /**
@@ -393,25 +392,29 @@ ElementStyle.prototype = {
 
 /**
  * A single style rule or declaration.
  *
  * @param {ElementStyle} aElementStyle
  *        The ElementStyle to which this rule belongs.
  * @param {object} aOptions
  *        The information used to construct this rule.  Properties include:
- *          rule: A StyleRuleActor
- *          inherited: An element this rule was inherited from.  If omitted,
- *            the rule applies directly to the current element.
+ *        - rule: A StyleRuleActor
+ *        - inherited: An element this rule was inherited from.  If omitted, the
+ *          rule applies directly to the current element.
  * @constructor
  */
 function Rule(aElementStyle, aOptions) {
   this.elementStyle = aElementStyle;
   this.domRule = aOptions.rule || null;
   this.style = aOptions.rule;
+  this.cssText = this.style.cssText;
+  if (Services.prefs.getBoolPref(PREF_AUTHORED_STYLES) && this.style.authoredText) {
+    this.cssText = this.style.authoredText;
+  }
   this.matchedSelectors = aOptions.matchedSelectors || [];
   this.pseudoElement = aOptions.pseudoElement || "";
 
   this.inherited = aOptions.inherited || null;
   this._modificationDepth = 0;
 
   if (this.domRule) {
     let parentRule = this.domRule.parentRule;
@@ -586,17 +589,17 @@ Rule.prototype = {
     if (disabledProps.length > 0) {
       disabled.set(this.style, disabledProps);
     } else {
       disabled.delete(this.style);
     }
 
     let promise = aModifications.apply().then(() => {
       let cssProps = {};
-      for (let cssProp of parseDeclarations(this.style.cssText)) {
+      for (let cssProp of parseDeclarations(this.cssText)) {
         cssProps[cssProp.name] = cssProp;
       }
 
       for (let textProp of this.textProps) {
         if (!textProp.enabled) {
           continue;
         }
         let cssProp = cssProps[textProp.name];
@@ -720,17 +723,18 @@ Rule.prototype = {
 
   /**
    * Get the list of TextProperties from the style.  Needs
    * to parse the style's cssText.
    */
   _getTextProperties: function() {
     let textProps = [];
     let store = this.elementStyle.store;
-    let props = parseDeclarations(this.style.cssText);
+    let props = parseDeclarations(this.cssText);
+
     for (let prop of props) {
       let name = prop.name;
       if (this.inherited && !domUtils.isInheritedProperty(name)) {
         continue;
       }
       let value = store.userProperties.getProperty(this.style, name, prop.value);
       let textProp = new TextProperty(this, name, value, prop.priority);
       textProps.push(textProp);
@@ -1202,17 +1206,17 @@ CssRuleView.prototype = {
     }
 
     if (tooltipType === "transform") {
       return this.previewTooltip.setCssTransformContent(target.textProperty.value,
         this.pageStyle, this._viewedElement);
     }
     if (tooltipType === "image") {
       let prop = target.parentNode.textProperty;
-      let dim = Services.prefs.getIntPref("devtools.inspector.imagePreviewTooltipSize");
+      let dim = Services.prefs.getIntPref(PREF_IMAGE_PREVIEW_SIZE);
       let uri = CssLogic.getBackgroundImageUriFromProperty(prop.value, prop.rule.domRule.href);
       return this.previewTooltip.setRelativeImageContent(uri, this.inspector.inspector, dim);
     }
     if (tooltipType === "font") {
       this.previewTooltip.setFontFamilyContent(target.textContent);
       return true;
     }
 
@@ -1328,17 +1332,17 @@ CssRuleView.prototype = {
    * Return {bool} true if the rule view currently has an input editor visible.
    */
   get isEditing() {
     return this.element.querySelectorAll(".styleinspector-propertyeditor").length > 0
       || this.colorPicker.tooltip.isShown();
   },
 
   _handlePrefChange: function(event, data) {
-    if (data.pref == "devtools.defaultColorUnit") {
+    if (data.pref == PREF_DEFAULT_COLOR_UNIT || data.pref == PREF_AUTHORED_STYLES) {
       let element = this._viewedElement;
       this._viewedElement = null;
       this.highlight(element);
     }
   },
 
   _onSourcePrefChanged: function() {
     if (this.menuitemSources) {
diff --git a/browser/devtools/styleinspector/test/browser.ini b/browser/devtools/styleinspector/test/browser.ini
--- a/browser/devtools/styleinspector/test/browser.ini
+++ b/browser/devtools/styleinspector/test/browser.ini
@@ -36,16 +36,17 @@ support-files =
 [browser_computedview_select-and-copy-styles.js]
 [browser_computedview_style-editor-link.js]
 [browser_ruleview_add-property-and-reselect.js]
 [browser_ruleview_add-property-cancel_01.js]
 [browser_ruleview_add-property-cancel_02.js]
 [browser_ruleview_add-property-cancel_03.js]
 [browser_ruleview_add-property_01.js]
 [browser_ruleview_add-property_02.js]
+[browser_ruleview_authored-styles-option.js]
 [browser_ruleview_colorpicker-and-image-tooltip_01.js]
 [browser_ruleview_colorpicker-and-image-tooltip_02.js]
 [browser_ruleview_colorpicker-appears-on-swatch-click.js]
 [browser_ruleview_colorpicker-commit-on-ENTER.js]
 [browser_ruleview_colorpicker-edit-gradient.js]
 [browser_ruleview_colorpicker-hides-on-tooltip.js]
 [browser_ruleview_colorpicker-multiple-changes.js]
 [browser_ruleview_colorpicker-revert-on-ESC.js]
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_authored-styles-option.js b/browser/devtools/styleinspector/test/browser_ruleview_authored-styles-option.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/styleinspector/test/browser_ruleview_authored-styles-option.js
@@ -0,0 +1,22 @@
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+ http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Test that the authored style option exists in the option panel
+
+let test = asyncTest(function*() {
+  yield addTab("data:text/html;charset=utf-8,authored styles");
+
+  let target = TargetFactory.forTab(gBrowser.selectedTab);
+  let toolbox = yield gDevTools.showToolbox(target, "options");
+  yield waitForToolboxFrameFocus(toolbox);
+
+  let optionTool = toolbox.getPanel("options");
+  let doc = optionTool.panelDoc;
+
+  let checkbox = doc.querySelector("checkbox#inspector-authored-styles");
+  ok(checkbox, "The authored-styles checkbox element exists");
+  ok(checkbox.getAttribute("data-pref"), "The checkbox has a preference defined");
+});
diff --git a/browser/devtools/styleinspector/test/moz.build b/browser/devtools/styleinspector/test/moz.build
--- a/browser/devtools/styleinspector/test/moz.build
+++ b/browser/devtools/styleinspector/test/moz.build
@@ -1,8 +1,7 @@
 # -*- Mode: python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*-
 # vim: set filetype=python:
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 BROWSER_CHROME_MANIFESTS += ['browser.ini']
-XPCSHELL_TESTS_MANIFESTS += ['unit/xpcshell.ini']
diff --git a/browser/devtools/styleinspector/test/unit/test_parseDeclarations.js b/browser/devtools/styleinspector/test/unit/test_parseDeclarations.js
deleted file mode 100644
--- a/browser/devtools/styleinspector/test/unit/test_parseDeclarations.js
+++ /dev/null
@@ -1,206 +0,0 @@
-/* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ts=2 et sw=2 tw=80: */
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-const Cu = Components.utils;
-Cu.import("resource://gre/modules/devtools/Loader.jsm");
-const {parseDeclarations} = devtools.require("devtools/styleinspector/css-parsing-utils");
-
-const TEST_DATA = [
-  // Simple test
-  {
-    input: "p:v;",
-    expected: [{name: "p", value: "v", priority: ""}]
-  },
-  // Simple test
-  {
-    input: "this:is;a:test;",
-    expected: [
-      {name: "this", value: "is", priority: ""},
-      {name: "a", value: "test", priority: ""}
-    ]
-  },
-  // Test a single declaration with semi-colon
-  {
-    input: "name:value;",
-    expected: [{name: "name", value: "value", priority: ""}]
-  },
-  // Test a single declaration without semi-colon
-  {
-    input: "name:value",
-    expected: [{name: "name", value: "value", priority: ""}]
-  },
-  // Test multiple declarations separated by whitespaces and carriage returns and tabs
-  {
-    input: "p1 : v1 ; \t\t  \n p2:v2;   \n\n\n\n\t  p3    :   v3;",
-    expected: [
-      {name: "p1", value: "v1", priority: ""},
-      {name: "p2", value: "v2", priority: ""},
-      {name: "p3", value: "v3", priority: ""},
-    ]
-  },
-  // Test simple priority
-  {
-    input: "p1: v1; p2: v2 !important;",
-    expected: [
-      {name: "p1", value: "v1", priority: ""},
-      {name: "p2", value: "v2", priority: "important"}
-    ]
-  },
-  // Test simple priority
-  {
-    input: "p1: v1 !important; p2: v2",
-    expected: [
-      {name: "p1", value: "v1", priority: "important"},
-      {name: "p2", value: "v2", priority: ""}
-    ]
-  },
-  // Test simple priority
-  {
-    input: "p1: v1 !  important; p2: v2 ! important;",
-    expected: [
-      {name: "p1", value: "v1", priority: "important"},
-      {name: "p2", value: "v2", priority: "important"}
-    ]
-  },
-  // Test invalid priority
-  {
-    input: "p1: v1 important;",
-    expected: [
-      {name: "p1", value: "v1 important", priority: ""}
-    ]
-  },
-  // Test various types of background-image urls
-  {
-    input: "background-image: url(../../relative/image.png)",
-    expected: [{name: "background-image", value: "url(\"../../relative/image.png\")", priority: ""}]
-  },
-  {
-    input: "background-image: url(http://site.com/test.png)",
-    expected: [{name: "background-image", value: "url(\"http://site.com/test.png\")", priority: ""}]
-  },
-  {
-    input: "background-image: url(wow.gif)",
-    expected: [{name: "background-image", value: "url(\"wow.gif\")", priority: ""}]
-  },
-  // Test that urls with :;{} characters in them are parsed correctly
-  {
-    input: "background: red url(\"http://site.com/image{}:;.png?id=4#wat\") repeat top right",
-    expected: [
-      {name: "background", value: "red url(\"http://site.com/image{}:;.png?id=4#wat\") repeat top right", priority: ""}
-    ]
-  },
-  // Test that an empty string results in an empty array
-  {input: "", expected: []},
-  // Test that a string comprised only of whitespaces results in an empty array
-  {input: "       \n \n   \n   \n \t  \t\t\t  ", expected: []},
-  // Test that a null input throws an exception
-  {input: null, throws: true},
-  // Test that a undefined input throws an exception
-  {input: undefined, throws: true},
-  // Test that :;{} characters in quoted content are not parsed as multiple declarations
-  {
-    input: "content: \";color:red;}selector{color:yellow;\"",
-    expected: [
-      {name: "content", value: "\";color:red;}selector{color:yellow;\"", priority: ""}
-    ]
-  },
-  // Test that rules aren't parsed, just declarations. So { and } found after a
-  // property name should be part of the property name, same for values.
-  {
-    input: "body {color:red;} p {color: blue;}",
-    expected: [
-      {name: "body {color", value: "red", priority: ""},
-      {name: "} p {color", value: "blue", priority: ""},
-      {name: "}", value: "", priority: ""}
-    ]
-  },
-  // Test unbalanced : and ;
-  {
-    input: "color :red : font : arial;",
-    expected : [
-      {name: "color", value: "red : font : arial", priority: ""}
-    ]
-  },
-  {input: "background: red;;;;;", expected: [{name: "background", value: "red", priority: ""}]},
-  {input: "background:;", expected: [{name: "background", value: "", priority: ""}]},
-  {input: ";;;;;", expected: []},
-  {input: ":;:;", expected: []},
-  // Test name only
-  {input: "color", expected: [
-    {name: "color", value: "", priority: ""}
-  ]},
-  // Test trailing name without :
-  {input: "color:blue;font", expected: [
-    {name: "color", value: "blue", priority: ""},
-    {name: "font", value: "", priority: ""}
-  ]},
-  // Test trailing name with :
-  {input: "color:blue;font:", expected: [
-    {name: "color", value: "blue", priority: ""},
-    {name: "font", value: "", priority: ""}
-  ]},
-  // Test leading value
-  {input: "Arial;color:blue;", expected: [
-    {name: "", value: "Arial", priority: ""},
-    {name: "color", value: "blue", priority: ""}
-  ]},
-  // Test hex colors
-  {input: "color: #333", expected: [{name: "color", value: "#333", priority: ""}]},
-  {input: "color: #456789", expected: [{name: "color", value: "#456789", priority: ""}]},
-  {input: "wat: #XYZ", expected: [{name: "wat", value: "#XYZ", priority: ""}]},
-  // Test string/url quotes escaping
-  {input: "content: \"this is a 'string'\"", expected: [{name: "content", value: "\"this is a 'string'\"", priority: ""}]},
-  {input: 'content: "this is a \\"string\\""', expected: [{name: "content", value: '\'this is a "string"\'', priority: ""}]},
-  {input: "content: 'this is a \"string\"'", expected: [{name: "content", value: '\'this is a "string"\'', priority: ""}]},
-  {input: "content: 'this is a \\'string\\'", expected: [{name: "content", value: '"this is a \'string\'"', priority: ""}]},
-  {input: "content: 'this \\' is a \" really strange string'", expected: [{name: "content", value: '"this \' is a \" really strange string"', priority: ""}]},
-  {
-    input: "content: \"a not s\\\
-          o very long title\"",
-    expected: [
-      {name: "content", value: '"a not s\
-          o very long title"', priority: ""}
-    ]
-  }
-];
-
-function run_test() {
-  for (let test of TEST_DATA) {
-    do_print("Test input string " + test.input);
-    let output;
-    try {
-      output = parseDeclarations(test.input);
-    } catch (e) {
-      do_print("parseDeclarations threw an exception with the given input string");
-      if (test.throws) {
-        do_print("Exception expected");
-        do_check_true(true);
-      } else {
-        do_print("Exception unexpected\n" + e);
-        do_check_true(false);
-      }
-    }
-    if (output) {
-      assertOutput(output, test.expected);
-    }
-  }
-}
-
-function assertOutput(actual, expected) {
-  if (actual.length === expected.length) {
-    for (let i = 0; i < expected.length; i ++) {
-      do_check_true(!!actual[i]);
-      do_print("Check that the output item has the expected name, value and priority");
-      do_check_eq(expected[i].name, actual[i].name);
-      do_check_eq(expected[i].value, actual[i].value);
-      do_check_eq(expected[i].priority, actual[i].priority);
-    }
-  } else {
-    for (let prop of actual) {
-      do_print("Actual output contained: {name: "+prop.name+", value: "+prop.value+", priority: "+prop.priority+"}");
-    }
-    do_check_eq(actual.length, expected.length);
-  }
-}
diff --git a/browser/devtools/styleinspector/test/unit/test_parseSingleValue.js b/browser/devtools/styleinspector/test/unit/test_parseSingleValue.js
deleted file mode 100644
--- a/browser/devtools/styleinspector/test/unit/test_parseSingleValue.js
+++ /dev/null
@@ -1,76 +0,0 @@
-/* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ts=2 et sw=2 tw=80: */
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-const Cu = Components.utils;
-Cu.import("resource://gre/modules/devtools/Loader.jsm");
-const {parseSingleValue} = devtools.require("devtools/styleinspector/css-parsing-utils");
-
-const TEST_DATA = [
-  {input: null, throws: true},
-  {input: undefined, throws: true},
-  {input: "", expected: {value: "", priority: ""}},
-  {input: "  \t \t \n\n  ", expected: {value: "", priority: ""}},
-  {input: "blue", expected: {value: "blue", priority: ""}},
-  {input: "blue !important", expected: {value: "blue", priority: "important"}},
-  {input: "blue!important", expected: {value: "blue", priority: "important"}},
-  {input: "blue ! important", expected: {value: "blue", priority: "important"}},
-  {input: "blue !  important", expected: {value: "blue", priority: "important"}},
-  {input: "blue !", expected: {value: "blue", priority: ""}},
-  {input: "blue !mportant", expected: {value: "blue !mportant", priority: ""}},
-  {input: "  blue   !important ", expected: {value: "blue", priority: "important"}},
-  {
-    input: "url(\"http://url.com/whyWouldYouDoThat!important.png\") !important",
-    expected: {
-      value: "url(\"http://url.com/whyWouldYouDoThat!important.png\")",
-      priority: "important"
-    }
-  },
-  {
-    input: "url(\"http://url.com/whyWouldYouDoThat!important.png\")",
-    expected: {
-      value: "url(\"http://url.com/whyWouldYouDoThat!important.png\")",
-      priority: ""
-    }
-  },
-  {
-    input: "\"content!important\" !important",
-    expected: {
-      value: "\"content!important\"",
-      priority: "important"
-    }
-  },
-  {
-    input: "\"content!important\"",
-    expected: {
-      value: "\"content!important\"",
-      priority: ""
-    }
-  }
-];
-
-function run_test() {
-  for (let test of TEST_DATA) {
-    do_print("Test input value " + test.input);
-    try {
-      let output = parseSingleValue(test.input);
-      assertOutput(output, test.expected);
-    } catch (e) {
-      do_print("parseSingleValue threw an exception with the given input value");
-      if (test.throws) {
-        do_print("Exception expected");
-        do_check_true(true);
-      } else {
-        do_print("Exception unexpected\n" + e);
-        do_check_true(false);
-      }
-    }
-  }
-}
-
-function assertOutput(actual, expected) {
-  do_print("Check that the output has the expected value and priority");
-  do_check_eq(expected.value, actual.value);
-  do_check_eq(expected.priority, actual.priority);
-}
diff --git a/browser/devtools/styleinspector/test/unit/xpcshell.ini b/browser/devtools/styleinspector/test/unit/xpcshell.ini
deleted file mode 100644
--- a/browser/devtools/styleinspector/test/unit/xpcshell.ini
+++ /dev/null
@@ -1,7 +0,0 @@
-[DEFAULT]
-head =
-tail =
-firefox-appdir = browser
-
-[test_parseDeclarations.js]
-[test_parseSingleValue.js]
diff --git a/browser/locales/en-US/chrome/browser/devtools/toolbox.dtd b/browser/locales/en-US/chrome/browser/devtools/toolbox.dtd
--- a/browser/locales/en-US/chrome/browser/devtools/toolbox.dtd
+++ b/browser/locales/en-US/chrome/browser/devtools/toolbox.dtd
@@ -47,16 +47,21 @@
   -  'Default color unit' dropdown list and is visible in the options panel. -->
 <!ENTITY options.defaultColorUnit.rgb "RGB(A)">
 
 <!-- LOCALIZATION NOTE (options.defaultColorUnit.name): This is used in
   -  the 'Default color unit' dropdown list and is visible in the options panel.
   -  -->
 <!ENTITY options.defaultColorUnit.name "Color Names">
 
+<!-- LOCALIZATION NOTE (options.authoredStyles.label): This is the
+   - label for the checkbox that toggles authored styles in the inspector -->
+<!ENTITY options.authoredStyles.label      "Display styles as authored">
+<!ENTITY options.authoredStyles.tooltip    "If you enable this option styles in the inspector will be displayed as authored">
+
 <!-- LOCALIZATION NOTE (options.context.triggersPageRefresh): This is the
   -  triggers page refresh footnote under the advanced settings group in the
   -  options panel and is used for settings that trigger page reload. -->
 <!ENTITY options.context.triggersPageRefresh  "* Current session only, reloads the page">
 
 <!-- LOCALIZATION NOTE (options.enableChrome.label4): This is the label for the
   -  checkbox that toggles chrome debugging, i.e. devtools.chrome.enabled
   -  boolean preference in about:config, in the options panel. -->
diff --git a/toolkit/devtools/Loader.jsm b/toolkit/devtools/Loader.jsm
--- a/toolkit/devtools/Loader.jsm
+++ b/toolkit/devtools/Loader.jsm
@@ -63,16 +63,18 @@ BuiltinProvider.prototype = {
         "devtools": "resource:///modules/devtools",
         "devtools/toolkit": "resource://gre/modules/devtools",
         "devtools/server": "resource://gre/modules/devtools/server",
         "devtools/toolkit/webconsole": "resource://gre/modules/devtools/toolkit/webconsole",
         "devtools/app-actor-front": "resource://gre/modules/devtools/app-actor-front.js",
         "devtools/styleinspector/css-logic": "resource://gre/modules/devtools/styleinspector/css-logic",
         "devtools/css-color": "resource://gre/modules/devtools/css-color",
         "devtools/output-parser": "resource://gre/modules/devtools/output-parser",
+        "devtools/css-parsing-utils": "resource://gre/modules/devtools/css-parsing-utils",
+        "devtools/css-tokenizer": "resource://gre/modules/devtools/css-tokenizer",
         "devtools/touch-events": "resource://gre/modules/devtools/touch-events",
         "devtools/client": "resource://gre/modules/devtools/client",
         "devtools/pretty-fast": "resource://gre/modules/devtools/pretty-fast.js",
         "devtools/async-utils": "resource://gre/modules/devtools/async-utils",
         "devtools/content-observer": "resource://gre/modules/devtools/content-observer",
         "gcli": "resource://gre/modules/devtools/gcli",
         "acorn": "resource://gre/modules/devtools/acorn",
         "acorn/util/walk": "resource://gre/modules/devtools/acorn/walk.js",
@@ -113,16 +115,18 @@ SrcdirProvider.prototype = {
     let devtoolsURI = this.fileURI(devtoolsDir);
     let toolkitURI = this.fileURI(toolkitDir);
     let serverURI = this.fileURI(OS.Path.join(toolkitDir, "server"));
     let webconsoleURI = this.fileURI(OS.Path.join(toolkitDir, "webconsole"));
     let appActorURI = this.fileURI(OS.Path.join(toolkitDir, "apps", "app-actor-front.js"));
     let cssLogicURI = this.fileURI(OS.Path.join(toolkitDir, "styleinspector", "css-logic"));
     let cssColorURI = this.fileURI(OS.Path.join(toolkitDir, "css-color"));
     let outputParserURI = this.fileURI(OS.Path.join(toolkitDir, "output-parser"));
+    let cssParsingUtilsURI = this.fileURI(OS.Path.join(toolkitDir, "css-parsing-utils"));
+    let cssTokenizerURI = this.fileURI(OS.Path.join(toolkitDir, "css-tokenizer"));
     let touchEventsURI = this.fileURI(OS.Path.join(toolkitDir, "touch-events"));
     let clientURI = this.fileURI(OS.Path.join(toolkitDir, "client"));
     let prettyFastURI = this.fileURI(OS.Path.join(toolkitDir), "pretty-fast.js");
     let asyncUtilsURI = this.fileURI(OS.Path.join(toolkitDir), "async-utils.js");
     let contentObserverURI = this.fileURI(OS.Path.join(toolkitDir), "content-observer.js");
     let gcliURI = this.fileURI(OS.Path.join(toolkitDir, "gcli", "source", "lib", "gcli"));
     let acornURI = this.fileURI(OS.Path.join(toolkitDir, "acorn"));
     let acornWalkURI = OS.Path.join(acornURI, "walk.js");
@@ -138,16 +142,18 @@ SrcdirProvider.prototype = {
         "devtools": devtoolsURI,
         "devtools/toolkit": toolkitURI,
         "devtools/server": serverURI,
         "devtools/toolkit/webconsole": webconsoleURI,
         "devtools/app-actor-front": appActorURI,
         "devtools/styleinspector/css-logic": cssLogicURI,
         "devtools/css-color": cssColorURI,
         "devtools/output-parser": outputParserURI,
+        "devtools/css-parsing-utils": cssParsingUtilsURI,
+        "devtools/css-tokenizer": cssTokenizerURI,
         "devtools/touch-events": touchEventsURI,
         "devtools/client": clientURI,
         "devtools/pretty-fast": prettyFastURI,
         "devtools/async-utils": asyncUtilsURI,
         "devtools/content-observer": contentObserverURI,
         "gcli": gcliURI,
         "acorn": acornURI,
         "acorn/util/walk": acornWalkURI
diff --git a/browser/devtools/styleinspector/css-parsing-utils.js b/toolkit/devtools/css-parsing-utils.js
rename from browser/devtools/styleinspector/css-parsing-utils.js
rename to toolkit/devtools/css-parsing-utils.js
--- a/browser/devtools/styleinspector/css-parsing-utils.js
+++ b/toolkit/devtools/css-parsing-utils.js
@@ -1,17 +1,25 @@
 /* -*- Mode: javascript; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* vim: set ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
-const cssTokenizer  = require("devtools/sourceeditor/css-tokenizer");
+/**
+ * This module contains various devtools css parsing helper functions.
+ * Import it like so:
+ *
+ * const {devtools} = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
+ * const {parseDeclarations, parseSingleValue} = devtools.require("devtools/css-parsing-utils");
+ */
+
+const cssTokenizer = require("devtools/css-tokenizer");
 
 /**
  * Returns the string enclosed in quotes
  */
 function quoteString(string) {
   let hasDoubleQuotes = string.contains('"');
   let hasSingleQuotes = string.contains("'");
 
@@ -146,8 +154,83 @@ exports.parseDeclarations = parseDeclara
 function parseSingleValue(value) {
   let declaration = parseDeclarations("a: " + value + ";")[0];
   return {
     value: declaration ? declaration.value : "",
     priority: declaration ? declaration.priority : ""
   };
 };
 exports.parseSingleValue = parseSingleValue;
+
+/**
+ * Get the text content of a rule given some CSS text, a line and a column
+ * Consider the following example:
+ * body {
+ *  color: red;
+ * }
+ * p {
+ *  line-height: 2em;
+ *  color: blue;
+ * }
+ * Calling the function with the whole text above and line=3 and column=0 would
+ * return "line-height: 2em; color: blue;"
+ * @param {String} text
+ * @param {Number} line
+ * @param {Number} column
+ * @return {String} The text content of the rule
+ */
+function getRuleText(text, line, column) {
+  let {start, end} = getRuleRange(text, line, column);
+  return text.substring(start, end);
+}
+exports.getRuleText = getRuleText;
+
+/**
+ * Given some css text and the line/column pair that corresponds to the position
+ * of a rule, return the {start, end} index range for the rule's text
+ * @param {String} text
+ * @param {Number} line
+ * @param {Number} column
+ * @return {Object} A {start, end} position object
+ */
+function getRuleRange(text, line, column) {
+  let start = locationToPosition(text, line, column);
+  start = text.indexOf("{", start) + 1;
+  let end = getRuleEndPosition(text, start);
+  return {start: start, end: end + 1};
+}
+
+/**
+ * Get the position that corresponds to a line/column pair in a string
+ * @param {String} text
+ * @param {Number} line
+ * @param {Number} column
+ * @return {Number} the index in text that corresponds to line and column
+ */
+function locationToPosition(text, line, column) {
+  let lines = text.split("\n");
+  lines.splice(line - 1);
+  return lines.join("\n").length + column;
+}
+
+/**
+ * Given some css text and a start position, return the position where the current
+ * rule closes
+ * @param {String} text
+ * @param {Number} startPosition
+ * @param {Number} The position where the rule closes
+ */
+function getRuleEndPosition(text, startPosition) {
+  text = text.substring(startPosition);
+  let tokens = cssTokenizer(text, {loc: true});
+  let endLoc;
+
+  for (let token of tokens) {
+    if (token.tokenType === "}" || token.tokenType === "EOF") {
+      endLoc = token.loc.start;
+      break;
+    }
+  }
+
+  let endPosition = locationToPosition(text, endLoc.line, endLoc.column);
+
+  return startPosition + endPosition - 1;
+}
diff --git a/browser/devtools/sourceeditor/css-tokenizer.js b/toolkit/devtools/css-tokenizer.js
rename from browser/devtools/sourceeditor/css-tokenizer.js
rename to toolkit/devtools/css-tokenizer.js
diff --git a/toolkit/devtools/server/actors/styles.js b/toolkit/devtools/server/actors/styles.js
--- a/toolkit/devtools/server/actors/styles.js
+++ b/toolkit/devtools/server/actors/styles.js
@@ -6,21 +6,23 @@
 
 const {Cc, Ci, Cu} = require("chrome");
 const Services = require("Services");
 const {Promise: promise} = Cu.import("resource://gre/modules/Promise.jsm", {});
 const protocol = require("devtools/server/protocol");
 const {Arg, Option, method, RetVal, types} = protocol;
 const events = require("sdk/event/core");
 const object = require("sdk/util/object");
-const { Class } = require("sdk/core/heritage");
-const { StyleSheetActor } = require("devtools/server/actors/stylesheets");
+const {Class} = require("sdk/core/heritage");
+const {StyleSheetActor} = require("devtools/server/actors/stylesheets");
+const {getRuleText} = require("devtools/css-parsing-utils");
 
 loader.lazyGetter(this, "CssLogic", () => require("devtools/styleinspector/css-logic").CssLogic);
 loader.lazyGetter(this, "DOMUtils", () => Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils));
+loader.lazyImporter(this, "Task", "resource://gre/modules/Task.jsm");
 
 // The PageStyle actor flattens the DOM CSS objects a little bit, merging
 // Rules and their Styles into one actor.  For elements (which have a style
 // but no associated rule) we fake a rule with the following style id.
 const ELEMENT_STYLE = 100;
 exports.ELEMENT_STYLE = ELEMENT_STYLE;
 
 const PSEUDO_ELEMENTS = [":first-line", ":first-letter", ":before", ":after", ":-moz-selection"];
@@ -273,28 +275,30 @@ var PageStyleActor = protocol.ActorClass
       }
       result += ".style"
     }
     return result;
   },
 
   /**
    * Get the set of styles that apply to a given node.
-   * @param NodeActor node
-   * @param string property
-   * @param object options
-   *   `filter`: A string filter that affects the "matched" handling.
-   *     'user': Include properties from user style sheets.
-   *     'ua': Include properties from user and user-agent sheets.
-   *     Default value is 'ua'
-   *   `inherited`: Include styles inherited from parent nodes.
-   *   `matchedSeletors`: Include an array of specific selectors that
-   *     caused this rule to match its node.
+   * @param {NodeActor} node
+   * @param {Object} options, the following properties are accepted:
+   *        - filter: A string filter that affects the "matched" handling. One
+   *          of 'user' (includes properties from user style sheets) or 'ua'
+   *          (includes properties from user and user-agent sheets). Defaults
+   *          to 'ua',
+   *        - inherited: Include styles inherited from parent nodes,
+   *        - matchedSeletors: Include an array of specific selectors that
+   *          caused this rule to match its node,
+   *        - authored: get the styles as authored rather than just applied
+   *          (the cssText and authoredText is available in each rule's form
+   *          object).
    */
-  getApplied: method(function(node, options) {
+  getApplied: method(Task.async(function*(node, options) {
     let entries = [];
 
     this.addElementRules(node.rawNode, undefined, options, entries);
 
     if (options.inherited) {
       let parent = this.walker.parentNode(node);
       while (parent && parent.rawNode.nodeType != Ci.nsIDOMNode.DOCUMENT_NODE) {
         this.addElementRules(parent.rawNode, parent, options, entries);
@@ -321,27 +325,35 @@ var PageStyleActor = protocol.ActorClass
       }
     }
 
     let rules = new Set;
     let sheets = new Set;
     entries.forEach(entry => rules.add(entry.rule));
     this.expandSets(rules, sheets);
 
+    if (options.authored) {
+      for (let rule of rules) {
+        let text = yield rule.getAuthoredCssText();
+        rule.authoredText = text;
+      }
+    }
+
     return {
       entries: entries,
       rules: [...rules],
       sheets: [...sheets]
     }
-  }, {
+  }), {
     request: {
       node: Arg(0, "domnode"),
       inherited: Option(1, "boolean"),
       matchedSelectors: Option(1, "boolean"),
-      filter: Option(1, "string")
+      filter: Option(1, "string"),
+      authored: Option(1, "boolean")
     },
     response: RetVal(types.addDictType("appliedStylesReturn", {
       entries: "array:appliedstyle",
       rules: "array:domstylerule",
       sheets: "array:stylesheet"
     }))
   }),
 
@@ -614,16 +626,19 @@ var StyleRuleActor = protocol.ActorClass
     if (this.rawRule.parentStyleSheet) {
       form.parentStyleSheet = this.pageStyle._sheetRef(this.rawRule.parentStyleSheet).actorID;
     }
 
     switch (this.type) {
       case Ci.nsIDOMCSSRule.STYLE_RULE:
         form.selectors = CssLogic.getSelectors(this.rawRule);
         form.cssText = this.rawStyle.cssText || "";
+        if (this.authoredText) {
+          form.authoredText = this.authoredText;
+        }
         break;
       case ELEMENT_STYLE:
         // Elements don't have a parent stylesheet, and therefore
         // don't have an associated URI.  Provide a URI for
         // those.
         form.href = this.rawNode.ownerDocument.location.href;
         form.cssText = this.rawStyle.cssText || "";
         break;
@@ -640,17 +655,42 @@ var StyleRuleActor = protocol.ActorClass
         }
         break;
     }
 
     return form;
   },
 
   /**
-   * Modify a rule's properties.  Passed an array of modifications:
+   * While the actor form contains a cssText property that corresponds to the
+   * applied css declarations, this method returns the authored css declarations.
+   */
+  getAuthoredCssText: method(Task.async(function*() {
+    if (this.type !== Ci.nsIDOMCSSRule.STYLE_RULE || !this.rawRule.parentStyleSheet) {
+      return "";
+    }
+
+    if (this.authoredText) {
+      return this.authoredText;
+    }
+
+    let parentStyleSheet = this.pageStyle._sheetRef(this.rawRule.parentStyleSheet);
+    let {str: cssText} = yield parentStyleSheet.getText();
+    cssText = getRuleText(cssText, this.line, this.column);
+
+    // Cache the result on the rule actor to avoid pasing again next time
+    return this.authoredText = cssText.replace(/\n/g, "").trim();
+  }), {
+    response: {
+      text: RetVal("string")
+    }
+  }),
+
+  /**
+   * Modify a rule's properties. Passed an array of modifications:
    * {
    *   type: "set",
    *   name: <string>,
    *   value: <string>,
    *   priority: <optional string>
    * }
    *  or
    * {
@@ -734,16 +774,19 @@ var StyleRuleFront = protocol.FrontClass
   },
 
   get type() this._form.type,
   get line() this._form.line || -1,
   get column() this._form.column || -1,
   get cssText() {
     return this._form.cssText;
   },
+  get authoredText() {
+    return this._form.authoredText;
+  },
   get selectors() {
     return this._form.selectors;
   },
   get media() {
     return this._form.media;
   },
   get mediaText() {
     if (!this._form.media) {
@@ -852,9 +895,8 @@ var RuleModificationList = Class({
   },
   removeProperty: function(name) {
     this.modifications.push({
       type: "remove",
       name: name
     });
   }
 });
-
diff --git a/toolkit/devtools/tests/unit/test_getRuleText.js b/toolkit/devtools/tests/unit/test_getRuleText.js
new file mode 100644
--- /dev/null
+++ b/toolkit/devtools/tests/unit/test_getRuleText.js
@@ -0,0 +1,96 @@
+/* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+const {devtools} = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
+const {getRuleText} = devtools.require("devtools/css-parsing-utils");
+
+const TEST_DATA = [
+  // Empty input
+  {
+    input: "",
+    line: 0,
+    column: 0,
+    expected: ""
+  },
+  // Simplest test case
+  {
+    input: "#id{color:red;background:yellow;}",
+    line: 0,
+    column: 0,
+    expected: "color:red;background:yellow;"
+  },
+  // Multiple rules test case
+  {
+    input: "#id{color:red;background:yellow;}.class-one .class-two { position:absolute; line-height: 45px}",
+    line: 0,
+    column: 33,
+    expected: " position:absolute; line-height: 45px"
+  },
+  // Unclosed rule
+  {
+    input: "#id{color:red;background:yellow;",
+    line: 0,
+    column: 0,
+    expected: "color:red;background:yellow;"
+  },
+  // Null input
+  {
+    input: null,
+    line: 0,
+    column: 0,
+    throws: true
+  },
+  // Missing loc
+  {
+    input: "#id{color:red;background:yellow;}",
+    throws: true
+  },
+  // Multi-lines rules
+  {
+    input: [
+      "/* this is a multi line css */",
+      "body {",
+      "  color: green;",
+      "  background-repeat: no-repeat",
+      "}",
+      " /*something else here",
+      "* {",
+      "  color: purple;",
+      "}"
+    ].join("\n"),
+    line: 6,
+    column: 0,
+    expected: "  color: purple;"
+  },
+  // Content string containing a } character
+  {
+    input: "   #id{border:1px solid red;content: '}';color:red;}",
+    line: 0,
+    column: 3,
+    expected: "border:1px solid red;content: '}';color:red;"
+  }
+];
+
+function run_test() {
+  for (let test of TEST_DATA) {
+    do_print("Test input string " + test.input);
+    let output;
+    try {
+      output = getRuleText(test.input, test.line, test.column);
+    } catch (e) {
+      do_print("getRuleText threw an exception with the given input string");
+      if (test.throws) {
+        do_print("Exception expected");
+        do_check_true(true);
+      } else {
+        do_print("Exception unexpected\n" + e);
+        do_check_true(false);
+      }
+    }
+    if (output) {
+      do_check_eq(output, test.expected);
+    }
+  }
+}
diff --git a/toolkit/devtools/tests/unit/test_parseDeclarations.js b/toolkit/devtools/tests/unit/test_parseDeclarations.js
new file mode 100644
--- /dev/null
+++ b/toolkit/devtools/tests/unit/test_parseDeclarations.js
@@ -0,0 +1,205 @@
+/* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+const {devtools} = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
+const {parseDeclarations} = devtools.require("devtools/css-parsing-utils");
+
+const TEST_DATA = [
+  // Simple test
+  {
+    input: "p:v;",
+    expected: [{name: "p", value: "v", priority: ""}]
+  },
+  // Simple test
+  {
+    input: "this:is;a:test;",
+    expected: [
+      {name: "this", value: "is", priority: ""},
+      {name: "a", value: "test", priority: ""}
+    ]
+  },
+  // Test a single declaration with semi-colon
+  {
+    input: "name:value;",
+    expected: [{name: "name", value: "value", priority: ""}]
+  },
+  // Test a single declaration without semi-colon
+  {
+    input: "name:value",
+    expected: [{name: "name", value: "value", priority: ""}]
+  },
+  // Test multiple declarations separated by whitespaces and carriage returns and tabs
+  {
+    input: "p1 : v1 ; \t\t  \n p2:v2;   \n\n\n\n\t  p3    :   v3;",
+    expected: [
+      {name: "p1", value: "v1", priority: ""},
+      {name: "p2", value: "v2", priority: ""},
+      {name: "p3", value: "v3", priority: ""},
+    ]
+  },
+  // Test simple priority
+  {
+    input: "p1: v1; p2: v2 !important;",
+    expected: [
+      {name: "p1", value: "v1", priority: ""},
+      {name: "p2", value: "v2", priority: "important"}
+    ]
+  },
+  // Test simple priority
+  {
+    input: "p1: v1 !important; p2: v2",
+    expected: [
+      {name: "p1", value: "v1", priority: "important"},
+      {name: "p2", value: "v2", priority: ""}
+    ]
+  },
+  // Test simple priority
+  {
+    input: "p1: v1 !  important; p2: v2 ! important;",
+    expected: [
+      {name: "p1", value: "v1", priority: "important"},
+      {name: "p2", value: "v2", priority: "important"}
+    ]
+  },
+  // Test invalid priority
+  {
+    input: "p1: v1 important;",
+    expected: [
+      {name: "p1", value: "v1 important", priority: ""}
+    ]
+  },
+  // Test various types of background-image urls
+  {
+    input: "background-image: url(../../relative/image.png)",
+    expected: [{name: "background-image", value: "url(\"../../relative/image.png\")", priority: ""}]
+  },
+  {
+    input: "background-image: url(http://site.com/test.png)",
+    expected: [{name: "background-image", value: "url(\"http://site.com/test.png\")", priority: ""}]
+  },
+  {
+    input: "background-image: url(wow.gif)",
+    expected: [{name: "background-image", value: "url(\"wow.gif\")", priority: ""}]
+  },
+  // Test that urls with :;{} characters in them are parsed correctly
+  {
+    input: "background: red url(\"http://site.com/image{}:;.png?id=4#wat\") repeat top right",
+    expected: [
+      {name: "background", value: "red url(\"http://site.com/image{}:;.png?id=4#wat\") repeat top right", priority: ""}
+    ]
+  },
+  // Test that an empty string results in an empty array
+  {input: "", expected: []},
+  // Test that a string comprised only of whitespaces results in an empty array
+  {input: "       \n \n   \n   \n \t  \t\t\t  ", expected: []},
+  // Test that a null input throws an exception
+  {input: null, throws: true},
+  // Test that a undefined input throws an exception
+  {input: undefined, throws: true},
+  // Test that :;{} characters in quoted content are not parsed as multiple declarations
+  {
+    input: "content: \";color:red;}selector{color:yellow;\"",
+    expected: [
+      {name: "content", value: "\";color:red;}selector{color:yellow;\"", priority: ""}
+    ]
+  },
+  // Test that rules aren't parsed, just declarations. So { and } found after a
+  // property name should be part of the property name, same for values.
+  {
+    input: "body {color:red;} p {color: blue;}",
+    expected: [
+      {name: "body {color", value: "red", priority: ""},
+      {name: "} p {color", value: "blue", priority: ""},
+      {name: "}", value: "", priority: ""}
+    ]
+  },
+  // Test unbalanced : and ;
+  {
+    input: "color :red : font : arial;",
+    expected : [
+      {name: "color", value: "red : font : arial", priority: ""}
+    ]
+  },
+  {input: "background: red;;;;;", expected: [{name: "background", value: "red", priority: ""}]},
+  {input: "background:;", expected: [{name: "background", value: "", priority: ""}]},
+  {input: ";;;;;", expected: []},
+  {input: ":;:;", expected: []},
+  // Test name only
+  {input: "color", expected: [
+    {name: "color", value: "", priority: ""}
+  ]},
+  // Test trailing name without :
+  {input: "color:blue;font", expected: [
+    {name: "color", value: "blue", priority: ""},
+    {name: "font", value: "", priority: ""}
+  ]},
+  // Test trailing name with :
+  {input: "color:blue;font:", expected: [
+    {name: "color", value: "blue", priority: ""},
+    {name: "font", value: "", priority: ""}
+  ]},
+  // Test leading value
+  {input: "Arial;color:blue;", expected: [
+    {name: "", value: "Arial", priority: ""},
+    {name: "color", value: "blue", priority: ""}
+  ]},
+  // Test hex colors
+  {input: "color: #333", expected: [{name: "color", value: "#333", priority: ""}]},
+  {input: "color: #456789", expected: [{name: "color", value: "#456789", priority: ""}]},
+  {input: "wat: #XYZ", expected: [{name: "wat", value: "#XYZ", priority: ""}]},
+  // Test string/url quotes escaping
+  {input: "content: \"this is a 'string'\"", expected: [{name: "content", value: "\"this is a 'string'\"", priority: ""}]},
+  {input: 'content: "this is a \\"string\\""', expected: [{name: "content", value: '\'this is a "string"\'', priority: ""}]},
+  {input: "content: 'this is a \"string\"'", expected: [{name: "content", value: '\'this is a "string"\'', priority: ""}]},
+  {input: "content: 'this is a \\'string\\'", expected: [{name: "content", value: '"this is a \'string\'"', priority: ""}]},
+  {input: "content: 'this \\' is a \" really strange string'", expected: [{name: "content", value: '"this \' is a \" really strange string"', priority: ""}]},
+  {
+    input: "content: \"a not s\\\
+          o very long title\"",
+    expected: [
+      {name: "content", value: '"a not s\
+          o very long title"', priority: ""}
+    ]
+  }
+];
+
+function run_test() {
+  for (let test of TEST_DATA) {
+    do_print("Test input string " + test.input);
+    let output;
+    try {
+      output = parseDeclarations(test.input);
+    } catch (e) {
+      do_print("parseDeclarations threw an exception with the given input string");
+      if (test.throws) {
+        do_print("Exception expected");
+        do_check_true(true);
+      } else {
+        do_print("Exception unexpected\n" + e);
+        do_check_true(false);
+      }
+    }
+    if (output) {
+      assertOutput(output, test.expected);
+    }
+  }
+}
+
+function assertOutput(actual, expected) {
+  if (actual.length === expected.length) {
+    for (let i = 0; i < expected.length; i ++) {
+      do_check_true(!!actual[i]);
+      do_print("Check that the output item has the expected name, value and priority");
+      do_check_eq(expected[i].name, actual[i].name);
+      do_check_eq(expected[i].value, actual[i].value);
+      do_check_eq(expected[i].priority, actual[i].priority);
+    }
+  } else {
+    for (let prop of actual) {
+      do_print("Actual output contained: {name: "+prop.name+", value: "+prop.value+", priority: "+prop.priority+"}");
+    }
+    do_check_eq(actual.length, expected.length);
+  }
+}
diff --git a/toolkit/devtools/tests/unit/test_parseSingleValue.js b/toolkit/devtools/tests/unit/test_parseSingleValue.js
new file mode 100644
--- /dev/null
+++ b/toolkit/devtools/tests/unit/test_parseSingleValue.js
@@ -0,0 +1,75 @@
+/* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+const {devtools} = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
+const {parseSingleValue} = devtools.require("devtools/css-parsing-utils");
+
+const TEST_DATA = [
+  {input: null, throws: true},
+  {input: undefined, throws: true},
+  {input: "", expected: {value: "", priority: ""}},
+  {input: "  \t \t \n\n  ", expected: {value: "", priority: ""}},
+  {input: "blue", expected: {value: "blue", priority: ""}},
+  {input: "blue !important", expected: {value: "blue", priority: "important"}},
+  {input: "blue!important", expected: {value: "blue", priority: "important"}},
+  {input: "blue ! important", expected: {value: "blue", priority: "important"}},
+  {input: "blue !  important", expected: {value: "blue", priority: "important"}},
+  {input: "blue !", expected: {value: "blue", priority: ""}},
+  {input: "blue !mportant", expected: {value: "blue !mportant", priority: ""}},
+  {input: "  blue   !important ", expected: {value: "blue", priority: "important"}},
+  {
+    input: "url(\"http://url.com/whyWouldYouDoThat!important.png\") !important",
+    expected: {
+      value: "url(\"http://url.com/whyWouldYouDoThat!important.png\")",
+      priority: "important"
+    }
+  },
+  {
+    input: "url(\"http://url.com/whyWouldYouDoThat!important.png\")",
+    expected: {
+      value: "url(\"http://url.com/whyWouldYouDoThat!important.png\")",
+      priority: ""
+    }
+  },
+  {
+    input: "\"content!important\" !important",
+    expected: {
+      value: "\"content!important\"",
+      priority: "important"
+    }
+  },
+  {
+    input: "\"content!important\"",
+    expected: {
+      value: "\"content!important\"",
+      priority: ""
+    }
+  }
+];
+
+function run_test() {
+  for (let test of TEST_DATA) {
+    do_print("Test input value " + test.input);
+    try {
+      let output = parseSingleValue(test.input);
+      assertOutput(output, test.expected);
+    } catch (e) {
+      do_print("parseSingleValue threw an exception with the given input value");
+      if (test.throws) {
+        do_print("Exception expected");
+        do_check_true(true);
+      } else {
+        do_print("Exception unexpected\n" + e);
+        do_check_true(false);
+      }
+    }
+  }
+}
+
+function assertOutput(actual, expected) {
+  do_print("Check that the output has the expected value and priority");
+  do_check_eq(expected.value, actual.value);
+  do_check_eq(expected.priority, actual.priority);
+}
diff --git a/toolkit/devtools/tests/unit/xpcshell.ini b/toolkit/devtools/tests/unit/xpcshell.ini
--- a/toolkit/devtools/tests/unit/xpcshell.ini
+++ b/toolkit/devtools/tests/unit/xpcshell.ini
@@ -1,9 +1,12 @@
 [DEFAULT]
 head = head_devtools.js
 tail =
 
+[test_async-utils.js]
+[test_defineLazyPrototypeGetter.js]
+[test_getRuleText.js]
 [test_independent_loaders.js]
 [test_invisible_loader.js]
+[test_parseDeclarations.js]
+[test_parseSingleValue.js]
 [test_safeErrorString.js]
-[test_defineLazyPrototypeGetter.js]
-[test_async-utils.js]
