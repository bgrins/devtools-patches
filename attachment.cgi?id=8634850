# HG changeset patch
# User Gabriel Luong <gabriel.luong@gmail.com>
# Parent  6022d00aee555c02b7720fd597a3c496b6f5d334
Bug 1167669 - Part 2: Highlight new filter style matches when rules and properties are added or modified r=bgrins

diff --git a/browser/devtools/styleinspector/rule-view.js b/browser/devtools/styleinspector/rule-view.js
--- a/browser/devtools/styleinspector/rule-view.js
+++ b/browser/devtools/styleinspector/rule-view.js
@@ -2273,40 +2273,25 @@
   },
 
   /**
    * Highlights the rule if it matches the filter search value.
    *
    * @return {bool} true if the rule was highlighted, false otherwise.
    */
   updateRuleHighlight: function() {
-    if (!this.ruleView.searchValue) {
-      return;
-    }
-
     let isRuleSelectorHighlighted = this._highlightRuleSelector();
     let isStyleSheetHighlighted = this._highlightStyleSheet();
     let isHighlighted = isRuleSelectorHighlighted || isStyleSheetHighlighted;
 
     // Highlight search matches in the rule properties
     for (let textProp of this.rule.textProps) {
-      let isPropertyHighlighted = textProp.editor._highlightRuleProperty();
-      let isComputedHighlighted = textProp.editor._highlightComputedProperty();
-
-      if (isPropertyHighlighted || isComputedHighlighted) {
+      if (textProp.editor._updateRulePropertyHighlight()) {
         isHighlighted = true;
       }
-
-      // Expand the computed list if a computed property is highlighted and the
-      // property rule is not highlighted
-      if (!isPropertyHighlighted && isComputedHighlighted &&
-          !textProp.editor.computed.hasAttribute("user-open")) {
-        textProp.editor.expandForFilter();
-        this.ruleView._editorsExpandedForFilter.push(textProp.editor);
-      }
     }
 
     return isHighlighted;
   },
 
   /**
    * Highlights the rule selector that matches the given search value and
    * returns a boolean indicating whether or not the selector was highlighted.
@@ -2994,16 +2979,26 @@
           onCommit: () => this._onValueDone(this.valueSpan.textContent, true),
           onRevert: () => this._onValueDone(undefined, false)
         }, outputParser, parserOptions);
       }
     }
 
     // Populate the computed styles.
     this._updateComputed();
+
+    // Highlight the new property if it matches the current search value
+    // and remove the no search match indicator from the search field if
+    // a property or computed property was highlighted
+    if (this._updateRulePropertyHighlight() &&
+        this.ruleView.searchField.classList.contains(
+          "devtools-style-searchbox-no-match")) {
+      this.ruleView.searchField.classList.remove(
+        "devtools-style-searchbox-no-match");
+    }
   },
 
   _onStartEditing: function() {
     this.element.classList.remove("ruleview-overridden");
     this._previewValue(this.prop.value);
   },
 
   /**
@@ -3067,26 +3062,61 @@
     if (showExpander) {
       this.expander.style.visibility = "visible";
     } else {
       this.expander.style.visibility = "hidden";
     }
   },
 
   /**
+   * Clear the rule property highlight for the current TextProperty.
+   */
+  _clearRulePropertyHighlights: function() {
+    for (let element of this.element.querySelectorAll(".ruleview-highlight")) {
+      element.classList.remove("ruleview-highlight");
+    }
+
+    if (this.ruleView._editorsExpandedForFilter.includes(this)) {
+      this.collapseForFilter();
+      this.ruleView._editorsExpandedForFilter.splice(
+        this.ruleView._editorsExpandedForFilter.indexOf(this), 1);
+    }
+  },
+
+  /**
+   * Update the rule property highlight after changes to the TextProperty.
+   */
+  _updateRulePropertyHighlight: function() {
+    this._clearRulePropertyHighlights();
+
+    let isPropertyHighlighted = this._highlightRuleProperty();
+    let isComputedHighlighted = this._highlightComputedProperty();
+
+    // Expand the computed list if a computed property is highlighted and the
+    // property rule is not highlighted
+    if (!isPropertyHighlighted && isComputedHighlighted &&
+        !this.computed.hasAttribute("user-open")) {
+      this.expandForFilter();
+      this.ruleView._editorsExpandedForFilter.push(this);
+    }
+
+    return isPropertyHighlighted || isComputedHighlighted;
+  },
+
+  /**
    * Highlights the rule property that matches the filter search value
    * and returns a boolean indicating whether or not the property was
    * highlighted.
    *
    * @return {bool} true if the rule property was highlighted, false otherwise.
    */
   _highlightRuleProperty: function() {
     // Get the actual property value displayed in the rule view
-    let propertyValue = this.valueSpan.textContent.toLowerCase();
-    let propertyName = this.prop.name.toLowerCase();
+    let propertyValue = this.committed.value.toLowerCase();
+    let propertyName = this.committed.name.toLowerCase();
 
     let isPropertyHighlighted = this._highlightMatches(this.container, {
       searchName: this.ruleView.searchPropertyName,
       searchValue: this.ruleView.searchPropertyValue,
       propertyName: propertyName,
       propertyValue: propertyValue,
       propertyMatch: this.ruleView.searchPropertyMatch
     });
