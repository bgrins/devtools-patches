# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  9015ebea629332d283c11fdb8c525d5c1d20c8d2
Bug 1257613 - (move this to bug 1266478) - integrate menu api with inspector

diff --git a/devtools/client/framework/menu-item.js b/devtools/client/framework/menu-item.js
--- a/devtools/client/framework/menu-item.js
+++ b/devtools/client/framework/menu-item.js
@@ -39,20 +39,22 @@ function MenuItem({
     accesskey = null,
     checked = false,
     click = () => {},
     disabled = false,
     label = "",
     id = null,
     submenu = null,
     type = "normal",
+    visible = true,
 } = { }) {
   this.accesskey = accesskey;
   this.checked = checked;
   this.click = click;
   this.disabled = disabled;
   this.id = id;
   this.label = label;
   this.submenu = submenu;
   this.type = type;
+  this.visible = visible;
 }
 
 module.exports = MenuItem;
diff --git a/devtools/client/framework/menu.js b/devtools/client/framework/menu.js
--- a/devtools/client/framework/menu.js
+++ b/devtools/client/framework/menu.js
@@ -87,16 +87,20 @@ Menu.prototype.popup = function(screenX,
 
   doc.querySelector("popupset").appendChild(popup);
   popup.openPopupAtScreen(screenX, screenY, true);
 };
 
 Menu.prototype._createMenuItems = function(parent) {
   let doc = parent.ownerDocument;
   this.menuitems.forEach(item => {
+    if (!item.visible) {
+      return;
+    }
+
     if (item.submenu) {
       let menupopup = doc.createElement("menupopup");
       item.submenu._createMenuItems(menupopup);
 
       let menu = doc.createElement("menu");
       menu.appendChild(menupopup);
       menu.setAttribute("label", item.label);
       parent.appendChild(menu);
diff --git a/devtools/client/inspector/inspector-panel.js b/devtools/client/inspector/inspector-panel.js
--- a/devtools/client/inspector/inspector-panel.js
+++ b/devtools/client/inspector/inspector-panel.js
@@ -10,16 +10,19 @@ const {Cc, Ci, Cu} = require("chrome");
 
 var Services = require("Services");
 var promise = require("promise");
 var EventEmitter = require("devtools/shared/event-emitter");
 var clipboard = require("sdk/clipboard");
 var {HostType} = require("devtools/client/framework/toolbox").Toolbox;
 const {executeSoon} = require("devtools/shared/DevToolsUtils");
 
+const Menu = require("devtools/client/framework/menu");
+const MenuItem = require("devtools/client/framework/menu-item");
+
 loader.lazyRequireGetter(this, "CSS", "CSS");
 
 loader.lazyGetter(this, "MarkupView", () => require("devtools/client/inspector/markup/markup").MarkupView);
 loader.lazyGetter(this, "HTMLBreadcrumbs", () => require("devtools/client/inspector/breadcrumbs").HTMLBreadcrumbs);
 loader.lazyGetter(this, "ToolSidebar", () => require("devtools/client/framework/sidebar").ToolSidebar);
 loader.lazyGetter(this, "InspectorSearch", () => require("devtools/client/inspector/inspector-search").InspectorSearch);
 loader.lazyGetter(this, "RuleViewTool", () => require("devtools/client/inspector/rules/rules").RuleViewTool);
 loader.lazyGetter(this, "ComputedViewTool", () => require("devtools/client/inspector/computed/computed").ComputedViewTool);
@@ -80,16 +83,17 @@ function InspectorPanel(iframeWindow, to
   this.panelDoc = iframeWindow.document;
   this.panelWin = iframeWindow;
   this.panelWin.inspector = this;
 
   this.nodeMenuTriggerInfo = null;
 
   this._onBeforeNavigate = this._onBeforeNavigate.bind(this);
   this.onNewRoot = this.onNewRoot.bind(this);
+  this._onContextMenu = this._onContextMenu.bind(this);
   this._setupNodeMenu = this._setupNodeMenu.bind(this);
   this._resetNodeMenu = this._resetNodeMenu.bind(this);
   this._updateSearchResultsLabel = this._updateSearchResultsLabel.bind(this);
   this.onNewSelection = this.onNewSelection.bind(this);
   this.onBeforeNewSelection = this.onBeforeNewSelection.bind(this);
   this.onDetached = this.onDetached.bind(this);
   this.onPaneToggleButtonClicked = this.onPaneToggleButtonClicked.bind(this);
   this._onMarkupFrameLoad = this._onMarkupFrameLoad.bind(this);
@@ -693,16 +697,275 @@ InspectorPanel.prototype = {
       let content = clipboard.get();
       if (content && content.trim().length > 0) {
         return content;
       }
     }
     return null;
   },
 
+  _onContextMenu: function(e) {
+    e.preventDefault();
+    this.fakePopupNode = e.target;
+
+    let menu = new Menu()
+    menu.append(new MenuItem({
+      id: "node-menu-edithtml",
+      label: strings.GetStringFromName("inspectorHTMLEdit.label"),
+      accesskey: strings.GetStringFromName("inspectorHTMLEdit.accesskey"),
+      click: () => {
+        this.editHTML()
+      },
+    }));
+    menu.append(new MenuItem({
+      id: "node-menu-add",
+      label: strings.GetStringFromName("inspectorAddNode.label"),
+      accesskey: strings.GetStringFromName("inspectorAddNode.accesskey"),
+      click: () => {
+        this.addNode()
+      },
+    }));
+    menu.append(new MenuItem({
+      id: "node-menu-duplicatenode",
+      label: strings.GetStringFromName("inspectorDuplicateNode.label"),
+      click: () => {
+        this.duplicateNode()
+      },
+    }));
+    menu.append(new MenuItem({
+      id: "node-menu-delete",
+      label: strings.GetStringFromName("inspectorHTMLDelete.label"),
+      accesskey: strings.GetStringFromName("inspectorHTMLDelete.accesskey"),
+      click: () => {
+        this.deleteNode()
+      },
+    }));
+
+    let attributesSubmenu = new Menu()
+    attributesSubmenu.append(new MenuItem({
+      id: "node-menu-add-attribute",
+      label: strings.GetStringFromName("inspectorAddAttribute.label"),
+      accesskey: strings.GetStringFromName("inspectorAddAttribute.accesskey"),
+      click: () => {
+        this.onAddAttribute()
+      },
+    }));
+    attributesSubmenu.append(new MenuItem({
+      id: "node-menu-edit-attribute",
+      label: strings.GetStringFromName("inspectorEditAttribute.label"),
+      accesskey: strings.GetStringFromName("inspectorEditAttribute.accesskey"),
+      click: () => {
+        this.onEditAttribute()
+      },
+    }));
+    attributesSubmenu.append(new MenuItem({
+      id: "node-menu-remove-attribute",
+      label: strings.GetStringFromName("inspectorRemoveAttribute.label"),
+      accesskey: strings.GetStringFromName("inspectorRemoveAttribute.accesskey"),
+      click: () => {
+        this.onRemoveAttribute()
+      },
+    }));
+
+    menu.append(new MenuItem({
+      label: strings.GetStringFromName("inspectorAttributesSubmenu.label"),
+      accesskey: strings.GetStringFromName("inspectorAttributesSubmenu.accesskey"),
+      submenu: attributesSubmenu,
+    }));
+
+    menu.append(new MenuItem({
+      type: "separator",
+    }));
+
+    menu.append(new MenuItem({
+      id: "node-menu-pseudo-hover",
+      label: ":hover",
+      type: "checkbox",
+      click: () => {
+        this.togglePseudoClass(':hover')
+      },
+    }));
+    menu.append(new MenuItem({
+      id: "node-menu-pseudo-active",
+      label: ":active",
+      type: "checkbox",
+      click: () => {
+        this.togglePseudoClass(':active')
+      },
+    }));
+    menu.append(new MenuItem({
+      id: "node-menu-pseudo-focus",
+      label: ":focus",
+      type: "checkbox",
+      click: () => {
+        this.togglePseudoClass(':focus')
+      },
+    }));
+
+    menu.append(new MenuItem({
+      type: "separator",
+    }));
+
+    let copySubmenu = new Menu()
+    copySubmenu.append(new MenuItem({
+      id: "node-menu-copyinner",
+      label: strings.GetStringFromName("inspectorCopyInnerHTML.label"),
+      accesskey: strings.GetStringFromName("inspectorCopyInnerHTML.accesskey"),
+      click: () => {
+        this.copyInnerHTML()
+      },
+    }));
+    copySubmenu.append(new MenuItem({
+      id: "node-menu-copyouter",
+      label: strings.GetStringFromName("inspectorCopyOuterHTML.label"),
+      accesskey: strings.GetStringFromName("inspectorCopyOuterHTML.accesskey"),
+      click: () => {
+        this.copyOuterHTML()
+      },
+    }));
+    copySubmenu.append(new MenuItem({
+      id: "node-menu-copyuniqueselector",
+      label: strings.GetStringFromName("inspectorCopyCSSSelector.label"),
+      accesskey: strings.GetStringFromName("inspectorCopyCSSSelector.accesskey"),
+      click: () => {
+        this.copyUniqueSelector()
+      },
+    }));
+    copySubmenu.append(new MenuItem({
+      id: "node-menu-copyimagedatauri",
+      label: strings.GetStringFromName("inspectorImageDataUri.label"),
+      click: () => {
+        this.copyImageDataUri()
+      },
+    }));
+
+    menu.append(new MenuItem({
+      label: strings.GetStringFromName("inspectorCopyHTMLSubmenu.label"),
+      submenu: copySubmenu,
+    }));
+
+    let pasteSubmenu = new Menu();
+    pasteSubmenu.append(new MenuItem({
+      id: "node-menu-pasteinnerhtml",
+      label: strings.GetStringFromName("inspectorPasteInnerHTML.label"),
+      accesskey: strings.GetStringFromName("inspectorPasteInnerHTML.accesskey"),
+      click: () => {
+        this.pasteInnerHTML()
+      },
+    }));
+    pasteSubmenu.append(new MenuItem({
+      id: "node-menu-pasteouterhtml",
+      label: strings.GetStringFromName("inspectorPasteOuterHTML.label"),
+      accesskey: strings.GetStringFromName("inspectorPasteOuterHTML.accesskey"),
+      click: () => {
+        this.pasteOuterHTML()
+      },
+    }));
+    pasteSubmenu.append(new MenuItem({
+      id: "node-menu-pastebefore",
+      label: strings.GetStringFromName("inspectorHTMLPasteBefore.label"),
+      accesskey: strings.GetStringFromName("inspectorHTMLPasteBefore.accesskey"),
+      click: () => {
+        this.pasteAdjacentHTML('beforeBegin')
+      },
+    }));
+    pasteSubmenu.append(new MenuItem({
+      id: "node-menu-pasteafter",
+      label: strings.GetStringFromName("inspectorHTMLPasteAfter.label"),
+      accesskey: strings.GetStringFromName("inspectorHTMLPasteAfter.accesskey"),
+      click: () => {
+        this.pasteAdjacentHTML('afterEnd')
+      },
+    }));
+    pasteSubmenu.append(new MenuItem({
+      id: "node-menu-pastefirstchild",
+      label: strings.GetStringFromName("inspectorHTMLPasteFirstChild.label"),
+      accesskey: strings.GetStringFromName("inspectorHTMLPasteFirstChild.accesskey"),
+      click: () => {
+        this.pasteAdjacentHTML('afterBegin')
+      },
+    }));
+    pasteSubmenu.append(new MenuItem({
+      id: "node-menu-pastelastchild",
+      label: strings.GetStringFromName("inspectorHTMLPasteLastChild.label"),
+      accesskey: strings.GetStringFromName("inspectorHTMLPasteLastChild.accesskey"),
+      click: () => {
+        this.pasteAdjacentHTML('beforeEnd')
+      },
+    }));
+
+    menu.append(new MenuItem({
+      label: strings.GetStringFromName("inspectorPasteHTMLSubmenu.label"),
+      submenu: pasteSubmenu,
+    }));
+
+    menu.append(new MenuItem({
+      type: "separator",
+    }));
+
+    menu.append(new MenuItem({
+      id: "node-menu-expand",
+      label: strings.GetStringFromName("inspectorExpandNode.label"),
+      click: () => {
+        this.expandNode()
+      },
+    }));
+    menu.append(new MenuItem({
+      id: "node-menu-collapse",
+      label: strings.GetStringFromName("inspectorCollapseNode.label"),
+      click: () => {
+        this.collapseNode()
+      },
+    }));
+
+    menu.append(new MenuItem({
+      type: "separator",
+    }));
+
+    menu.append(new MenuItem({
+      id: "node-menu-scrollnodeintoview",
+      label: strings.GetStringFromName("inspectorScrollNodeIntoView.label"),
+      accesskey: strings.GetStringFromName("inspectorScrollNodeIntoView.accesskey"),
+      click: () => {
+        this.scrollNodeIntoView()
+      },
+    }));
+    menu.append(new MenuItem({
+      id: "node-menu-screenshotnode",
+      label: strings.GetStringFromName("inspectorScreenshotNode.label"),
+      click: () => {
+        this.screenshotNode()
+      },
+    }));
+    menu.append(new MenuItem({
+      id: "node-menu-useinconsole",
+      label: strings.GetStringFromName("inspectorUseInConsole.label"),
+      click: () => {
+        this.useInConsole()
+      },
+    }));
+    menu.append(new MenuItem({
+      id: "node-menu-showdomproperties",
+      label: strings.GetStringFromName("inspectorShowDOMProperties.label"),
+      click: () => {
+        this.showDOMProperties()
+      },
+    }));
+
+    // XXX: Can we make this more sync (possibly caching actorHasMethod call on startup)
+    this._getNodeLinkMenuItems().then(items => {
+      console.log("Received", items);
+      for (let menuitem of items) {
+        console.log("APpending ", menuitem, menuitem.visible);
+        menu.append(menuitem);
+      }
+
+      menu.popup(e.screenX, e.screenY, this._toolbox);
+    });
+  },
   /**
    * Update, enable, disable, hide, show any menu item depending on the current
    * element.
    */
   _setupNodeMenu: function(event) {
     let markupContainer = this.markup.getContainer(this.selection.nodeFront);
     this.nodeMenuTriggerInfo =
       markupContainer.editor.getInfoAtNode(event.target.triggerNode);
@@ -799,17 +1062,17 @@ InspectorPanel.prototype = {
 
     if (isScreenshotable) {
       screenshot.removeAttribute("disabled");
     } else {
       screenshot.setAttribute("disabled", "true");
     }
 
     // Enable/Disable the link open/copy items.
-    this._setupNodeLinkMenu();
+    this._getNodeLinkMenuItems();
 
     // Enable the "edit HTML" item if the selection is an element and the root
     // actor has the appropriate trait (isOuterHTMLEditable)
     let editHTML = this.panelDoc.getElementById("node-menu-edithtml");
     if (isEditableElement && this.isOuterHTMLEditable) {
       editHTML.removeAttribute("disabled");
     } else {
       editHTML.setAttribute("disabled", "true");
@@ -903,79 +1166,97 @@ InspectorPanel.prototype = {
       toDelete.parentNode.removeChild(toDelete);
     }
   },
 
   /**
    * Link menu items can be shown or hidden depending on the context and
    * selected node, and their labels can vary.
    */
-  _setupNodeLinkMenu: function() {
-    let linkSeparator = this.panelDoc.getElementById("node-menu-link-separator");
-    let linkFollow = this.panelDoc.getElementById("node-menu-link-follow");
-    let linkCopy = this.panelDoc.getElementById("node-menu-link-copy");
+  _getNodeLinkMenuItems: function() {
+    return new Promise(resolve => {
+      let linkSeparator = new MenuItem({
+        id: "node-menu-link-separator",
+        type: "separator",
+        visible: false,
+      });
+      let linkFollow = new MenuItem({
+        id: "node-menu-link-follow",
+        visible: false,
+        click: () => {
+          this.onFollowLink();
+        },
+      });
+      let linkCopy = new MenuItem({
+        id: "node-menu-link-copy",
+        visible: false,
+        click: () => {
+          this.onCopyLink();
+        },
+      });
 
-    // Hide all by default.
-    linkSeparator.setAttribute("hidden", "true");
-    linkFollow.setAttribute("hidden", "true");
-    linkCopy.setAttribute("hidden", "true");
+      // Get information about the right-clicked node.
+      let popupNode = this.fakePopupNode;
+      if (!popupNode || !popupNode.classList.contains("link")) {
+        resolve([linkSeparator, linkFollow, linkCopy]);
+        return;
+      }
 
-    // Get information about the right-clicked node.
-    let popupNode = this.panelDoc.popupNode;
-    if (!popupNode || !popupNode.classList.contains("link")) {
-      return;
-    }
+      let type = popupNode.dataset.type;
+      if (type === "uri" || type === "cssresource" || type === "jsresource") {
+        // First make sure the target can resolve relative URLs.
+        this.target.actorHasMethod("inspector", "resolveRelativeURL").then(canResolve => {
+          if (!canResolve) {
+            resolve([linkSeparator, linkFollow, linkCopy]);
+            return;
+          }
+  console.log("Making visible");
+          linkSeparator.visible = true;
 
-    let type = popupNode.dataset.type;
-    if (type === "uri" || type === "cssresource" || type === "jsresource") {
-      // First make sure the target can resolve relative URLs.
-      this.target.actorHasMethod("inspector", "resolveRelativeURL").then(canResolve => {
-        if (!canResolve) {
-          return;
-        }
+          // Links can't be opened in new tabs in the browser toolbox.
+          if (type === "uri" && !this.target.chrome) {
+            linkFollow.visible = true;
+            linkFollow.label = strings.GetStringFromName(
+              "inspector.menu.openUrlInNewTab.label");
+          } else if (type === "cssresource") {
+            linkFollow.visible = true;
+            linkFollow.label = toolboxStrings.GetStringFromName(
+              "toolbox.viewCssSourceInStyleEditor.label");
+          } else if (type === "jsresource") {
+            linkFollow.visible = true;
+            linkFollow.label = toolboxStrings.GetStringFromName(
+              "toolbox.viewJsSourceInDebugger.label");
+          }
 
-        linkSeparator.removeAttribute("hidden");
+          linkCopy.visible = true;
+          linkCopy.label = strings.GetStringFromName(
+            "inspector.menu.copyUrlToClipboard.label");
+          resolve([linkSeparator, linkFollow, linkCopy]);
+        }, console.error);
+      } else if (type === "idref") {
+        linkSeparator.visible = true;
+        linkFollow.visible = true;
+        linkFollow.label = strings.formatStringFromName(
+          "inspector.menu.selectElement.label", [popupNode.dataset.link], 1);
+      }
 
-        // Links can't be opened in new tabs in the browser toolbox.
-        if (type === "uri" && !this.target.chrome) {
-          linkFollow.removeAttribute("hidden");
-          linkFollow.setAttribute("label", strings.GetStringFromName(
-            "inspector.menu.openUrlInNewTab.label"));
-        } else if (type === "cssresource") {
-          linkFollow.removeAttribute("hidden");
-          linkFollow.setAttribute("label", toolboxStrings.GetStringFromName(
-            "toolbox.viewCssSourceInStyleEditor.label"));
-        } else if (type === "jsresource") {
-          linkFollow.removeAttribute("hidden");
-          linkFollow.setAttribute("label", toolboxStrings.GetStringFromName(
-            "toolbox.viewJsSourceInDebugger.label"));
-        }
-
-        linkCopy.removeAttribute("hidden");
-        linkCopy.setAttribute("label", strings.GetStringFromName(
-          "inspector.menu.copyUrlToClipboard.label"));
-      }, console.error);
-    } else if (type === "idref") {
-      linkSeparator.removeAttribute("hidden");
-      linkFollow.removeAttribute("hidden");
-      linkFollow.setAttribute("label", strings.formatStringFromName(
-        "inspector.menu.selectElement.label", [popupNode.dataset.link], 1));
-    }
+      resolve([linkSeparator, linkFollow, linkCopy]);
+    });
   },
 
   _initMarkup: function() {
     let doc = this.panelDoc;
 
     this._markupBox = doc.getElementById("markup-box");
 
     // create tool iframe
     this._markupFrame = doc.createElement("iframe");
     this._markupFrame.setAttribute("flex", "1");
     this._markupFrame.setAttribute("tooltip", "aHTMLTooltip");
-    this._markupFrame.setAttribute("context", "inspector-node-popup");
+    this._markupFrame.addEventListener("contextmenu", this._onContextMenu, true);
 
     // This is needed to enable tooltips inside the iframe document.
     this._markupFrame.addEventListener("load", this._onMarkupFrameLoad, true);
 
     this._markupBox.setAttribute("collapsed", true);
     this._markupBox.appendChild(this._markupFrame);
     this._markupFrame.setAttribute("src", "chrome://devtools/content/inspector/markup/markup.xhtml");
     this._markupFrame.setAttribute("aria-label", strings.GetStringFromName("inspector.panelLabel.markupView"));
@@ -994,16 +1275,17 @@ InspectorPanel.prototype = {
     this.emit("markuploaded");
   },
 
   _destroyMarkup: function() {
     let destroyPromise;
 
     if (this._markupFrame) {
       this._markupFrame.removeEventListener("load", this._onMarkupFrameLoad, true);
+      this._markupFrame.removeEventListener("contextmenu", this._onContextMenu, true);
     }
 
     if (this.markup) {
       destroyPromise = this.markup.destroy();
       this.markup = null;
     } else {
       destroyPromise = promise.resolve();
     }
@@ -1372,35 +1654,35 @@ InspectorPanel.prototype = {
     this.markup.collapseNode(this.selection.nodeFront);
   },
 
   /**
    * This method is here for the benefit of the node-menu-link-follow menu item
    * in the inspector contextual-menu.
    */
   onFollowLink: function() {
-    let type = this.panelDoc.popupNode.dataset.type;
-    let link = this.panelDoc.popupNode.dataset.link;
+    let type = this.fakePopupNode.dataset.type;
+    let link = this.fakePopupNode.dataset.link;
 
     this.followAttributeLink(type, link);
   },
 
   /**
    * Given a type and link found in a node's attribute in the markup-view,
    * attempt to follow that link (which may result in opening a new tab, the
    * style editor or debugger).
    */
   followAttributeLink: function(type, link) {
     if (!type || !link) {
       return;
     }
 
     if (type === "uri" || type === "cssresource" || type === "jsresource") {
       // Open link in a new tab.
-      // When the inspector menu was setup on click (see _setupNodeLinkMenu), we
+      // When the inspector menu was setup on click (see _getNodeLinkMenuItems), we
       // already checked that resolveRelativeURL existed.
       this.inspector.resolveRelativeURL(link, this.selection.nodeFront).then(url => {
         if (type === "uri") {
           let browserWin = this.target.tab.ownerDocument.defaultView;
           browserWin.openUILinkIn(url, "tab");
         } else if (type === "cssresource") {
           return this.toolbox.viewSourceInStyleEditor(url);
         } else if (type === "jsresource") {
@@ -1421,24 +1703,24 @@ InspectorPanel.prototype = {
     }
   },
 
   /**
    * This method is here for the benefit of the node-menu-link-copy menu item
    * in the inspector contextual-menu.
    */
   onCopyLink: function() {
-    let link = this.panelDoc.popupNode.dataset.link;
+    let link = this.fakePopupNode.dataset.link;
 
     this.copyAttributeLink(link);
   },
 
   /**
    * This method is here for the benefit of copying links.
    */
   copyAttributeLink: function(link) {
-    // When the inspector menu was setup on click (see _setupNodeLinkMenu), we
+    // When the inspector menu was setup on click (see _getNodeLinkMenuItems), we
     // already checked that resolveRelativeURL existed.
     this.inspector.resolveRelativeURL(link, this.selection.nodeFront).then(url => {
       clipboardHelper.copyString(url);
     }, console.error);
   }
 };
diff --git a/devtools/client/inspector/inspector.xul b/devtools/client/inspector/inspector.xul
--- a/devtools/client/inspector/inspector.xul
+++ b/devtools/client/inspector/inspector.xul
@@ -35,16 +35,17 @@
       key="&inspectorSearchHTML.key;"
       modifiers="accel"
       command="nodeSearchCommand"/>
   </keyset>
 
   <popupset id="inspectorPopupSet">
     <!-- Used by the Markup Panel, the Highlighter and the Breadcrumbs -->
     <menupopup id="inspector-node-popup">
+      <!--
       <menuitem id="node-menu-edithtml"
         label="&inspectorHTMLEdit.label;"
         accesskey="&inspectorHTMLEdit.accesskey;"
         oncommand="inspector.editHTML()"/>
       <menuitem id="node-menu-add"
         label="&inspectorAddNode.label;"
         accesskey="&inspectorAddNode.accesskey;"
         oncommand="inspector.addNode()"/>
@@ -151,16 +152,17 @@
       <menuitem id="node-menu-showdomproperties"
         label="&inspectorShowDOMProperties.label;"
         oncommand="inspector.showDOMProperties()"/>
       <menuseparator id="node-menu-link-separator"/>
       <menuitem id="node-menu-link-follow"
         oncommand="inspector.onFollowLink()"/>
       <menuitem id="node-menu-link-copy"
         oncommand="inspector.onCopyLink()"/>
+     -->
     </menupopup>
   </popupset>
 
   <box flex="1" class="devtools-responsive-container theme-body">
     <vbox flex="1" class="devtools-main-content">
       <toolbar id="inspector-toolbar"
         class="devtools-toolbar"
         nowindowdrag="true">
diff --git a/devtools/client/locales/en-US/inspector.properties b/devtools/client/locales/en-US/inspector.properties
--- a/devtools/client/locales/en-US/inspector.properties
+++ b/devtools/client/locales/en-US/inspector.properties
@@ -98,45 +98,191 @@ inspector.searchResultsNone=No matches
 inspector.menu.openUrlInNewTab.label=Open Link in New Tab
 
 # LOCALIZATION NOTE (inspector.menu.copyUrlToClipboard.label): This is the label
 # of a menu item in the inspector contextual-menu that appears when the user
 # right-clicks on the attribute of a node in the inspector that is a URL, and
 # that allows to copy that URL in the clipboard.
 inspector.menu.copyUrlToClipboard.label=Copy Link Address
 
-# LOCALIZATION NOTE (inspector.menu.selectElement.label): This is the label of a
-# menu item in the inspector contextual-menu that appears when the user right-
-# clicks on the attribute of a node in the inspector that is the ID of another
-# element in the DOM (like with <label for="input-id">), and that allows to
-# select that element in the inspector.
-inspector.menu.selectElement.label=Select Element #%S
+# LOCALIZATION NOTE (inspectorHTMLEdit.label): This is the label shown
+# in the inspector contextual-menu for the item that lets users edit the
+# (outer) HTML of the current node
+inspectorHTMLEdit.label=Edit As HTML
+inspectorHTMLEdit.accesskey=E
 
-# LOCALIZATION NOTE (inspector.menu.editAttribute.label): This is the label of a
-# sub-menu "Attribute" in the inspector contextual-menu that appears
-# when the user right-clicks on the node in the inspector, and that allows
-# to edit an attribute on this node.
-inspector.menu.editAttribute.label=Edit Attribute %S
+# LOCALIZATION NOTE (inspectorCopyInnerHTML.label): This is the label shown
+# in the inspector contextual-menu for the item that lets users copy the
+# inner HTML of the current node
+inspectorCopyInnerHTML.label=Inner HTML
+inspectorCopyInnerHTML.accesskey=I
 
-# LOCALIZATION NOTE (inspector.menu.removeAttribute.label): This is the label of a
-# sub-menu "Attribute" in the inspector contextual-menu that appears
-# when the user right-clicks on the attribute of a node in the inspector,
-# and that allows to remove this attribute.
-inspector.menu.removeAttribute.label=Remove Attribute %S
+# LOCALIZATION NOTE (inspectorCopyOuterHTML.label): This is the label shown
+# in the inspector contextual-menu for the item that lets users copy the
+# outer HTML of the current node
+inspectorCopyOuterHTML.label=Outer HTML
+inspectorCopyOuterHTML.accesskey=O
 
-# LOCALIZATION NOTE (inspector.nodePreview.selectNodeLabel):
-# This string is displayed in a tooltip that is shown when hovering over a DOM
-# node preview (e.g. something like "div#foo.bar").
-# DOM node previews can be displayed in places like the animation-inspector, the
-# console or the object inspector.
-# The tooltip invites the user to click on the node in order to select it in the
-# inspector panel.
-inspector.nodePreview.selectNodeLabel=Click to select this node in the Inspector
+# LOCALIZATION NOTE (inspectorCopyCSSSelector.label): This is the label
+# shown in the inspector contextual-menu for the item that lets users copy
+# the CSS Selector of the current node
+inspectorCopyCSSSelector.label=CSS Selector
+inspectorCopyCSSSelector.accesskey=S
 
-# LOCALIZATION NOTE (inspector.nodePreview.highlightNodeLabel):
-# This string is displayed in a tooltip that is shown when hovering over a the
-# inspector icon displayed next to a DOM node preview (e.g. next to something
-# like "div#foo.bar").
-# DOM node previews can be displayed in places like the animation-inspector, the
-# console or the object inspector.
-# The tooltip invites the user to click on the icon in order to highlight the
-# node in the page.
-inspector.nodePreview.highlightNodeLabel=Click to highlight this node in the page
+# LOCALIZATION NOTE (inspectorPasteOuterHTML.label): This is the label shown
+# in the inspector contextual-menu for the item that lets users paste outer
+# HTML in the current node
+inspectorPasteOuterHTML.label=Outer HTML
+inspectorPasteOuterHTML.accesskey=O
+
+# LOCALIZATION NOTE (inspectorPasteInnerHTML.label): This is the label shown
+# in the inspector contextual-menu for the item that lets users paste inner
+# HTML in the current node
+inspectorPasteInnerHTML.label=Inner HTML
+inspectorPasteInnerHTML.accesskey=I
+
+# LOCALIZATION NOTE (inspectorHTMLPasteExtraSubmenu.label): This is the label
+# shown in the inspector contextual-menu for the sub-menu of the other Paste
+# items, which allow to paste HTML:
+# - before the current node
+# - after the current node
+# - as the first child of the current node
+# - as the last child of the current node
+inspectorHTMLPasteExtraSubmenu.label=Paste…
+inspectorHTMLPasteExtraSubmenu.accesskey=t
+
+# LOCALIZATION NOTE (inspectorHTMLPasteBefore.label): This is the label shown
+# in the inspector contextual-menu for the item that lets users paste
+# the HTML before the current node
+inspectorHTMLPasteBefore.label=Before
+inspectorHTMLPasteBefore.accesskey=B
+
+# LOCALIZATION NOTE (inspectorHTMLPasteAfter.label): This is the label shown
+# in the inspector contextual-menu for the item that lets users paste
+# the HTML after the current node
+inspectorHTMLPasteAfter.label=After
+inspectorHTMLPasteAfter.accesskey=A
+
+# LOCALIZATION NOTE (inspectorHTMLPasteFirstChild.label): This is the label
+# shown in the inspector contextual-menu for the item that lets users paste
+# the HTML as the first child the current node
+inspectorHTMLPasteFirstChild.label=As First Child
+inspectorHTMLPasteFirstChild.accesskey=F
+
+# LOCALIZATION NOTE (inspectorHTMLPasteLastChild.label): This is the label
+# shown in the inspector contextual-menu for the item that lets users paste
+# the HTML as the last child the current node
+inspectorHTMLPasteLastChild.label=As Last Child
+inspectorHTMLPasteLastChild.accesskey=L
+
+# LOCALIZATION NOTE (inspectorScrollNodeIntoView.label): This is the label
+# shown in the inspector contextual-menu for the item that lets users scroll
+# the current node into view
+inspectorScrollNodeIntoView.label=Scroll Into View
+inspectorScrollNodeIntoView.accesskey=S
+
+# LOCALIZATION NOTE (inspectorHTMLDelete.label): This is the label shown in
+# the inspector contextual-menu for the item that lets users delete the
+# current node
+inspectorHTMLDelete.label=Delete Node
+inspectorHTMLDelete.accesskey=D
+
+# LOCALIZATION NOTE (inspectorAttributesSubmenu.label): This is the label
+# shown in the inspector contextual-menu for the sub-menu of the other
+# attribute items, which allow to:
+# - add new attribute
+# - edit attribute
+# - remove attribute
+inspectorAttributesSubmenu.label=Attributes
+inspectorAttributesSubmenu.accesskey=A
+
+# LOCALIZATION NOTE (inspectorAddAttribute.label): This is the label shown in
+# the inspector contextual-menu for the item that lets users add attribute
+# to current node
+inspectorAddAttribute.label=Add Attribute
+inspectorAddAttribute.accesskey=A
+
+# LOCALIZATION NOTE (inspectorEditAttribute.label): This is the label shown in
+# the inspector contextual-menu for the item that lets users edit attribute
+# for current node
+inspectorEditAttribute.label=Edit Attribute
+inspectorEditAttribute.accesskey=E
+
+# LOCALIZATION NOTE (inspectorRemoveAttribute.label): This is the label shown in
+# the inspector contextual-menu for the item that lets users delete attribute
+# from current node
+inspectorRemoveAttribute.label=Remove Attribute
+inspectorRemoveAttribute.accesskey=R
+
+# LOCALIZATION NOTE (inspectorSearchHTML.label2): This is the label shown as
+# the placeholder in inspector search box
+inspectorSearchHTML.label2=Search with CSS Selectors
+inspectorSearchHTML.key=F
+
+# LOCALIZATION NOTE (inspectorSearchHTML.label3): This is the label that is
+# shown as the placeholder for the markup view search in the inspector.
+inspectorSearchHTML.label3=Search HTML
+
+# LOCALIZATION NOTE (inspectorImageDataUri.label): This is the label
+# shown in the inspector contextual-menu for the item that lets users copy
+# the URL embedding the image data encoded in Base 64 (what we name
+# here Image Data URL). For more information:
+# https://developer.mozilla.org/en-US/docs/Web/HTTP/data_URIs
+inspectorImageDataUri.label=Image Data-URL
+
+# LOCALIZATION NOTE (inspectorShowDOMProperties.label): This is the label
+# shown in the inspector contextual-menu for the item that lets users see
+# the DOM properties of the current node. When triggered, this item
+# opens the split Console and displays the properties in its side panel.
+inspectorShowDOMProperties.label=Show DOM Properties
+
+# LOCALIZATION NOTE (inspectorUseInConsole.label): This is the label
+# shown in the inspector contextual-menu for the item that outputs a
+# variable for the current node to the console. When triggered,
+# this item opens the split Console.
+inspectorUseInConsole.label=Use in Console
+
+# LOCALIZATION NOTE (inspectorExpandNode.label): This is the label
+# shown in the inspector contextual-menu for recursively expanding
+# mark-up elements
+inspectorExpandNode.label=Expand All
+
+# LOCALIZATION NOTE (inspectorCollapseNode.label): This is the label
+# shown in the inspector contextual-menu for recursively collapsing
+# mark-up elements
+inspectorCollapseNode.label=Collapse
+
+# LOCALIZATION NOTE (inspectorScreenshotNode.label): This is the label
+# shown in the inspector contextual-menu for the item that lets users take
+# a screenshot of the currently selected node.
+inspectorScreenshotNode.label=Screenshot Node
+
+# LOCALIZATION NOTE (inspectorDuplicateNode.label): This is the label
+# shown in the inspector contextual-menu for the item that lets users
+# duplicate the currently selected node.
+inspectorDuplicateNode.label=Duplicate Node
+
+# LOCALIZATION NOTE (inspectorAddNode.label): This is the label shown in
+# the inspector toolbar for the button that lets users add elements to the
+# DOM (as children of the currently selected element).
+inspectorAddNode.label=Create New Node
+inspectorAddNode.accesskey=C
+
+# LOCALIZATION NOTE (inspectorCopyHTMLSubmenu.label): This is the label
+# shown in the inspector contextual-menu for the sub-menu of the other
+# copy items, which allow to:
+# - Copy Inner HTML
+# - Copy Outer HTML
+# - Copy Unique selector
+# - Copy Image data URI
+inspectorCopyHTMLSubmenu.label=Copy
+
+# LOCALIZATION NOTE (inspectorPasteHTMLSubmenu.label): This is the label
+# shown in the inspector contextual-menu for the sub-menu of the other
+# paste items, which allow to:
+# - Paste Inner HTML
+# - Paste Outer HTML
+# - Before
+# - After
+# - As First Child
+# - As Last Child
+inspectorPasteHTMLSubmenu.label=Paste
+
