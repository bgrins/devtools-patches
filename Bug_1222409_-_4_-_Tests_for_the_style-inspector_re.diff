# vim: se ft=diff :
# HG changeset patch
# User Patrick Brosset <pbrosset@mozilla.com>
# Date 1448064024 -3600
Bug 1222409 - 4 - Tests for the style-inspector refresh on window resize

diff --git a/devtools/client/responsivedesign/test/browser.ini b/devtools/client/responsivedesign/test/browser.ini
--- a/devtools/client/responsivedesign/test/browser.ini
+++ b/devtools/client/responsivedesign/test/browser.ini
@@ -2,16 +2,14 @@
 tags = devtools
 subsuite = devtools
 support-files =
   head.js
   touch.html
 
 [browser_responsive_cmd.js]
 [browser_responsivecomputedview.js]
-skip-if = e10s # Bug ??????
 [browser_responsiveruleview.js]
-skip-if = e10s # Bug ??????
 [browser_responsiveui.js]
 skip-if = e10s && os == 'win'
 [browser_responsiveui_touch.js]
 [browser_responsiveuiaddcustompreset.js]
 [browser_responsive_devicewidth.js]
diff --git a/devtools/client/responsivedesign/test/browser_responsivecomputedview.js b/devtools/client/responsivedesign/test/browser_responsivecomputedview.js
--- a/devtools/client/responsivedesign/test/browser_responsivecomputedview.js
+++ b/devtools/client/responsivedesign/test/browser_responsivecomputedview.js
@@ -1,100 +1,66 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
-function test() {
-  let instance;
+"use strict";
 
-  let computedView;
-  let inspector;
+// Check that when the viewport is resized, the computed-view refreshes.
 
-  waitForExplicitFinish();
-  let mgr = ResponsiveUI.ResponsiveUIManager;
+const TEST_URI = "data:text/html;charset=utf-8,<html><style>" +
+                 "div {" +
+                 "  width: 500px;" +
+                 "  height: 10px;" +
+                 "  background: purple;" +
+                 "} " +
+                 "@media screen and (max-width: 200px) {" +
+                 "  div { " +
+                 "    width: 100px;" +
+                 "  }" +
+                 "};" +
+                 "</style><div></div></html>";
 
-  gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function onload() {
-    gBrowser.selectedBrowser.removeEventListener("load", onload, true);
-    startTest();
-  }, true);
+add_task(function*() {
+  yield addTab(TEST_URI);
 
-  content.location = "data:text/html;charset=utf-8,<html><style>" +
-    "div {" +
-    "  width: 500px;" +
-    "  height: 10px;" +
-    "  background: purple;" +
-    "} " +
-    "@media screen and (max-width: 200px) {" +
-    "  div { " +
-    "    width: 100px;" +
-    "  }" +
-    "};" +
-    "</style><div></div></html>"
+  info("Open the responsive design mode and set its size to 500x500 to start");
+  let {rdm} = yield openRDM();
+  rdm.setSize(500, 500);
 
-  function computedWidth() {
-    for (let prop of computedView.propertyViews) {
-      if (prop.name === "width") {
-        return prop.valueNode.textContent;
-      }
+  info("Open the inspector, computed-view and select the test node");
+  let {inspector, view} = yield openComputedView();
+  yield selectNode("div", inspector);
+
+  info("Try shrinking the viewport and checking the applied styles");
+  yield testShrink(view, inspector, rdm);
+
+  info("Try growing the viewport and checking the applied styles");
+  yield testGrow(view, inspector, rdm);
+
+  gBrowser.removeCurrentTab();
+});
+
+function* testShrink(computedView, inspector, rdm) {
+  is(computedWidth(computedView), "500px", "Should show 500px initially.");
+
+  let onRefresh = inspector.once("computed-view-refreshed");
+  rdm.setSize(100, 100);
+  yield onRefresh;
+
+  is(computedWidth(computedView), "100px", "Should be 100px after shrinking.");
+}
+
+function* testGrow(computedView, inspector, rdm) {
+  let onRefresh = inspector.once("computed-view-refreshed");
+  rdm.setSize(500, 500);
+  yield onRefresh;
+
+  is(computedWidth(computedView), "500px", "Should be 500px after growing.");
+}
+
+function computedWidth(computedView) {
+  for (let prop of computedView.propertyViews) {
+    if (prop.name === "width") {
+      return prop.valueNode.textContent;
     }
-    return null;
   }
-
-  function startTest() {
-    document.getElementById("Tools:ResponsiveUI").doCommand();
-    executeSoon(onUIOpen);
-  }
-
-  function onUIOpen() {
-    instance = mgr.getResponsiveUIForTab(gBrowser.selectedTab);
-    ok(instance, "instance of the module is attached to the tab.");
-
-    instance.stack.setAttribute("notransition", "true");
-    registerCleanupFunction(function() {
-      instance.stack.removeAttribute("notransition");
-    });
-
-    instance.setSize(500, 500);
-
-    openComputedView().then(onInspectorUIOpen);
-  }
-
-  function onInspectorUIOpen(args) {
-    inspector = args.inspector;
-    computedView = args.view;
-    ok(inspector, "Got inspector instance");
-
-    let div = content.document.getElementsByTagName("div")[0];
-
-    inspector.selection.setNode(div);
-    inspector.once("inspector-updated", testShrink);
-  }
-
-  function testShrink() {
-    is(computedWidth(), "500px", "Should show 500px initially.");
-
-    inspector.once("computed-view-refreshed", function onShrink() {
-      is(computedWidth(), "100px", "div should be 100px after shrinking.");
-      testGrow();
-    });
-
-    instance.setSize(100, 100);
-  }
-
-  function testGrow() {
-    inspector.once("computed-view-refreshed", function onGrow() {
-      is(computedWidth(), "500px", "Should be 500px after growing.");
-      finishUp();
-    });
-
-    instance.setSize(500, 500);
-  }
-
-  function finishUp() {
-    document.getElementById("Tools:ResponsiveUI").doCommand();
-
-    // Menus are correctly updated?
-    is(document.getElementById("Tools:ResponsiveUI").getAttribute("checked"), "false", "menu unchecked");
-
-    gBrowser.removeCurrentTab();
-    finish();
-  }
+  return null;
 }
diff --git a/devtools/client/responsivedesign/test/browser_responsiveruleview.js b/devtools/client/responsivedesign/test/browser_responsiveruleview.js
--- a/devtools/client/responsivedesign/test/browser_responsiveruleview.js
+++ b/devtools/client/responsivedesign/test/browser_responsiveruleview.js
@@ -1,107 +1,99 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
-function test() {
-  let instance;
+"use strict";
 
-  let ruleView;
-  let inspector;
-  let mgr = ResponsiveUI.ResponsiveUIManager;
+// Check that when the viewport is resized, the rule-view refreshes.
+// Also test that ESC does open the split-console, and that the RDM menu item
+// gets updated correctly when needed.
+// TODO: split this test.
 
-  waitForExplicitFinish();
+const TEST_URI = "data:text/html;charset=utf-8,<html><style>" +
+                 "div {" +
+                 "  width: 500px;" +
+                 "  height: 10px;" +
+                 "  background: purple;" +
+                 "} " +
+                 "@media screen and (max-width: 200px) {" +
+                 "  div { " +
+                 "    width: 100px;" +
+                 "  }" +
+                 "};" +
+                 "</style><div></div></html>";
 
-  gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", startTest, true);
+add_task(function*() {
+  yield addTab(TEST_URI);
 
-  content.location = "data:text/html;charset=utf-8,<html><style>" +
-    "div {" +
-    "  width: 500px;" +
-    "  height: 10px;" +
-    "  background: purple;" +
-    "} " +
-    "@media screen and (max-width: 200px) {" +
-    "  div { " +
-    "    width: 100px;" +
-    "  }" +
-    "};" +
-    "</style><div></div></html>"
+  info("Open the responsive design mode and set its size to 500x500 to start");
+  let {rdm, manager} = yield openRDM();
+  rdm.setSize(500, 500);
 
-  function numberOfRules() {
-    return ruleView.element.querySelectorAll(".ruleview-code").length;
-  }
+  info("Open the inspector, rule-view and select the test node");
+  let {inspector, view} = yield openRuleView();
+  yield selectNode("div", inspector);
 
-  function startTest() {
-    gBrowser.selectedBrowser.removeEventListener("load", startTest, true);
-    document.getElementById("Tools:ResponsiveUI").doCommand();
-    executeSoon(onUIOpen);
-  }
+  info("Try shrinking the viewport and checking the applied styles");
+  yield testShrink(view, rdm);
 
-  function onUIOpen() {
-    instance = mgr.getResponsiveUIForTab(gBrowser.selectedTab);
-    ok(instance, "instance of the module is attached to the tab.");
+  info("Try growing the viewport and checking the applied styles");
+  yield testGrow(view, rdm);
 
-    instance.stack.setAttribute("notransition", "true");
-    registerCleanupFunction(function() {
-      instance.stack.removeAttribute("notransition");
-    });
+  info("Check that ESC still opens the split console");
+  yield testEscapeOpensSplitConsole(inspector);
 
-    instance.setSize(500, 500);
+  info("Test the state of the RDM menu item");
+  yield testMenuItem(manager);
 
-    openRuleView().then(onInspectorUIOpen);
-  }
+  Services.prefs.clearUserPref("devtools.toolbox.splitconsoleEnabled");
+  gBrowser.removeCurrentTab();
+});
 
-  function onInspectorUIOpen(args) {
-    inspector = args.inspector;
-    ruleView = args.view;
-    ok(inspector, "Got inspector instance");
+function* testShrink(ruleView, rdm) {
+  is(numberOfRules(ruleView), 2, "Should have two rules initially.");
 
-    let div = content.document.getElementsByTagName("div")[0];
-    inspector.selection.setNode(div);
-    inspector.once("inspector-updated", testShrink);
-  }
+  info("Resize to 100x100 and wait for the rule-view to update");
+  let onRefresh = ruleView.once("ruleview-refreshed");
+  rdm.setSize(100, 100);
+  yield onRefresh;
 
-  function testShrink() {
+  is(numberOfRules(ruleView), 3, "Should have three rules after shrinking.");
+}
 
-    is(numberOfRules(), 2, "Should have two rules initially.");
+function* testGrow(ruleView, rdm) {
+  info("Resize to 500x500 and wait for the rule-view to update");
+  let onRefresh = ruleView.once("ruleview-refreshed");
+  rdm.setSize(500, 500);
+  yield onRefresh;
 
-    ruleView.on("ruleview-refreshed", function refresh() {
-      ruleView.off("ruleview-refreshed", refresh, false);
-      is(numberOfRules(), 3, "Should have three rules after shrinking.");
-      testGrow();
-    }, false);
+  is(numberOfRules(ruleView), 2, "Should have two rules after growing.");
+}
 
-    instance.setSize(100, 100);
-  }
+function* testEscapeOpensSplitConsole(inspector) {
+  ok(!inspector._toolbox._splitConsole, "Console is not split.");
 
-  function testGrow() {
-    ruleView.on("ruleview-refreshed", function refresh() {
-      ruleView.off("ruleview-refreshed", refresh, false);
-      is(numberOfRules(), 2, "Should have two rules after growing.");
-      testEscapeOpensSplitConsole();
-    }, false);
+  info("Press escape");
+  let onSplit = inspector._toolbox.once("split-console");
+  EventUtils.synthesizeKey("VK_ESCAPE", {});
+  yield onSplit;
 
-    instance.setSize(500, 500);
-  }
+  ok(inspector._toolbox._splitConsole, "Console is split after pressing ESC.");
+}
 
-  function testEscapeOpensSplitConsole() {
-    is(document.getElementById("Tools:ResponsiveUI").getAttribute("checked"), "true", "menu checked");
-    ok(!inspector._toolbox._splitConsole, "Console is not split.");
+function* testMenuItem(manager) {
+  is(document.getElementById("Tools:ResponsiveUI").getAttribute("checked"),
+     "true",
+     "The menu item is checked");
 
-    inspector._toolbox.once("split-console", function() {
-      mgr.once("off", function() {executeSoon(finishUp)});
-      mgr.toggle(window, gBrowser.selectedTab);
-    });
-    EventUtils.synthesizeKey("VK_ESCAPE", {});
-  }
+  info("Toggle off the RDM");
+  let onManagerOff = manager.once("off");
+  manager.toggle(window, gBrowser.selectedTab);
+  yield onManagerOff;
 
-  function finishUp() {
-    ok(inspector._toolbox._splitConsole, "Console is split after pressing escape.");
+  is(document.getElementById("Tools:ResponsiveUI").getAttribute("checked"),
+     "false",
+     "The menu item is unchecked");
+}
 
-    // Menus are correctly updated?
-    is(document.getElementById("Tools:ResponsiveUI").getAttribute("checked"), "false", "menu unchecked");
-
-    Services.prefs.clearUserPref("devtools.toolbox.splitconsoleEnabled");
-    gBrowser.removeCurrentTab();
-    finish();
-  }
+function numberOfRules(ruleView) {
+  return ruleView.element.querySelectorAll(".ruleview-code").length;
 }
diff --git a/devtools/client/responsivedesign/test/head.js b/devtools/client/responsivedesign/test/head.js
--- a/devtools/client/responsivedesign/test/head.js
+++ b/devtools/client/responsivedesign/test/head.js
@@ -14,16 +14,36 @@ DevToolsUtils.testing = true;
 registerCleanupFunction(() => {
   DevToolsUtils.testing = false;
   while (gBrowser.tabs.length > 1) {
     gBrowser.removeCurrentTab();
   }
 });
 
 /**
+ * Open the Responsive Design Mode
+ * @param {Tab} The browser tab to open it into (defaults to the selected tab).
+ * @return {Promise} Resolves to the instance of the responsive design mode.
+ */
+function openRDM(tab = gBrowser.selectedTab) {
+  return new Promise(resolve => {
+    let manager = ResponsiveUI.ResponsiveUIManager;
+    document.getElementById("Tools:ResponsiveUI").doCommand();
+    executeSoon(() => {
+      let rdm = manager.getResponsiveUIForTab(tab);
+      rdm.stack.setAttribute("notransition", "true");
+      registerCleanupFunction(function() {
+        rdm.stack.removeAttribute("notransition");
+      });
+      resolve({rdm, manager});
+    });
+  });
+}
+
+/**
  * Open the toolbox, with the inspector tool visible.
  * @return a promise that resolves when the inspector is ready
  */
 var openInspector = Task.async(function*() {
   info("Opening the inspector");
   let target = TargetFactory.forTab(gBrowser.selectedTab);
 
   let inspector, toolbox;
@@ -120,17 +140,16 @@ function openComputedView() {
  * sidebar tab selected.
  * @return a promise that resolves when the inspector is ready and the rule
  * view is visible and ready
  */
 function openRuleView() {
   return openInspectorSideBar("ruleview");
 }
 
-
 /**
  * Add a new test tab in the browser and load the given url.
  * @param {String} url The url to be loaded in the new tab
  * @return a promise that resolves to the tab object when the url is loaded
  */
 var addTab = Task.async(function* (url) {
   info("Adding a new tab with URL: '" + url + "'");
 
@@ -211,8 +230,41 @@ function waitForDocLoadComplete(aBrowser
     },
     QueryInterface: XPCOMUtils.generateQI([Ci.nsIWebProgressListener,
                                            Ci.nsISupportsWeakReference])
   };
   aBrowser.addProgressListener(progressListener);
   info("Waiting for browser load");
   return deferred.promise;
 }
+
+/**
+ * Get the NodeFront for a node that matches a given css selector, via the
+ * protocol.
+ * @param {String|NodeFront} selector
+ * @param {InspectorPanel} inspector The instance of InspectorPanel currently
+ * loaded in the toolbox
+ * @return {Promise} Resolves to the NodeFront instance
+ */
+function getNodeFront(selector, {walker}) {
+  if (selector._form) {
+    return selector;
+  }
+  return walker.querySelector(walker.rootNode, selector);
+}
+
+/**
+ * Set the inspector's current selection to the first match of the given css
+ * selector
+ * @param {String|NodeFront} selector
+ * @param {InspectorPanel} inspector The instance of InspectorPanel currently
+ * loaded in the toolbox
+ * @param {String} reason Defaults to "test" which instructs the inspector not
+ * to highlight the node upon selection
+ * @return {Promise} Resolves when the inspector is updated with the new node
+ */
+var selectNode = Task.async(function*(selector, inspector, reason = "test") {
+  info("Selecting the node for '" + selector + "'");
+  let nodeFront = yield getNodeFront(selector, inspector);
+  let updated = inspector.once("inspector-updated");
+  inspector.selection.setNodeFront(nodeFront, reason);
+  yield updated;
+});
diff --git a/devtools/server/actors/layout.js b/devtools/server/actors/layout.js
--- a/devtools/server/actors/layout.js
+++ b/devtools/server/actors/layout.js
@@ -346,17 +346,17 @@ LayoutChangesObserver.prototype = {
   /**
    * Start the event loop, which regularly checks if there are any observer
    * events to be sent as batched events
    * Calls itself in a loop.
    */
   _startEventLoop: function() {
     // Avoid emitting events if the tabActor has been detached (may happen
     // during shutdown)
-    if (!this.tabActor.attached) {
+    if (!this.tabActor || !this.tabActor.attached) {
       return;
     }
 
     // Send any reflows we have
     if (this.reflows && this.reflows.length) {
       this.emit("reflows", this.reflows);
       this.reflows = [];
     }
diff --git a/devtools/server/tests/mochitest/chrome.ini b/devtools/server/tests/mochitest/chrome.ini
--- a/devtools/server/tests/mochitest/chrome.ini
+++ b/devtools/server/tests/mochitest/chrome.ini
@@ -71,16 +71,17 @@ skip-if = buildapp == 'mulet'
 [test_inspector-mutations-attr.html]
 [test_inspector-mutations-childlist.html]
 [test_inspector-mutations-frameload.html]
 [test_inspector-mutations-value.html]
 [test_inspector-pseudoclass-lock.html]
 [test_inspector-release.html]
 [test_inspector-reload.html]
 [test_inspector-remove.html]
+[test_inspector-resize.html]
 [test_inspector-resolve-url.html]
 [test_inspector-retain.html]
 [test_inspector-search.html]
 [test_inspector-search-front.html]
 [test_inspector-scroll-into-view.html]
 [test_inspector-traversal.html]
 [test_makeGlobalObjectReference.html]
 [test_memory.html]
diff --git a/devtools/server/tests/mochitest/test_inspector-resize.html b/devtools/server/tests/mochitest/test_inspector-resize.html
new file mode 100644
--- /dev/null
+++ b/devtools/server/tests/mochitest/test_inspector-resize.html
@@ -0,0 +1,78 @@
+<!DOCTYPE HTML>
+<html>
+<!--
+Test that the inspector actor emits "resize" events when the page is resized.
+https://bugzilla.mozilla.org/show_bug.cgi?id=1222409
+-->
+<head>
+  <meta charset="utf-8">
+  <title>Test for Bug 1222409</title>
+  <script type="application/javascript" src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
+  <link rel="stylesheet" type="text/css" href="chrome://mochikit/content/tests/SimpleTest/test.css">
+  <script type="application/javascript;version=1.8" src="inspector-helpers.js"></script>
+  <script type="application/javascript;version=1.8">
+window.onload = function() {
+  const Cu = Components.utils;
+  Cu.import("resource://gre/modules/devtools/Loader.jsm");
+  const {Promise: promise} =
+    Cu.import("resource://gre/modules/Promise.jsm", {});
+  const {InspectorFront} =
+    devtools.require("devtools/server/actors/inspector");
+  const {console} =
+    Cu.import("resource://gre/modules/devtools/shared/Console.jsm", {});
+
+  SimpleTest.waitForExplicitFinish();
+
+  let win = null;
+  let inspector = null;
+
+  addAsyncTest(function* setup() {
+    info ("Setting up inspector and walker actors.");
+
+    let url = document.getElementById("inspectorContent").href;
+
+    yield new Promise(resolve => {
+      attachURL(url, function(err, client, tab, doc) {
+        win = doc.defaultView;
+        inspector = InspectorFront(client, tab);
+        resolve();
+      });
+    });
+
+    runNextTest();
+  });
+
+  addAsyncTest(function*() {
+    // We can't receive events if we haven't first executed a method on the
+    // actor to initialize it.
+    yield inspector.getWalker();
+
+    let {outerWidth, outerHeight} = win;
+    let onResize = new Promise(resolve => {
+      inspector.once("resize", () => {
+        resolve();
+      });
+    });
+    win.resizeTo(800, 600);
+    yield onResize;
+
+    ok(true, "The resize event was emitted");
+    win.resizeTo(outerWidth, outerHeight);
+
+    runNextTest();
+  });
+
+  runNextTest();
+};
+  </script>
+</head>
+<body>
+<a id="inspectorContent" target="_blank" href="inspector-search-data.html">Test Document</a>
+<p id="display"></p>
+<div id="content" style="display: none">
+
+</div>
+<pre id="test">
+</pre>
+</body>
+</html>
