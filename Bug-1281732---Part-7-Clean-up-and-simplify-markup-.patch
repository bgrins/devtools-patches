# vim: se ft=diff :
# HG changeset patch
# User Jarda Snajdr <jsnajdr@gmail.com>
# Date 2016-06-24 09:28
Bug 1281732 - Part 7: Clean up and simplify markup of webconsole messages r=bgrins

diff --git a/devtools/client/webconsole/console-output.js b/devtools/client/webconsole/console-output.js
index e1a4595..c52a603 100644
--- a/devtools/client/webconsole/console-output.js
+++ b/devtools/client/webconsole/console-output.js
@@ -776,16 +776,25 @@ Messages.Simple.prototype = extend(Messages.BaseMessage.prototype, {
    * The raw message displayed by this Message object. This can be a function,
    * DOM node or a string.
    *
    * @private
    * @type mixed
    */
   _message: null,
 
+  /**
+   * The message's "attachment" element to be displayed under the message.
+   * Used for things like stack traces or tables in console.table().
+   *
+   * @private
+   * @type DOMElement|null
+   */
+  _attachment: null,
+
   _objectActors: null,
   _groupDepthCompat: 0,
 
   /**
    * Message timestamp.
    *
    * @type number
    *       Milliseconds elapsed since 1 January 1970 00:00:00 UTC.
@@ -895,20 +904,16 @@ Messages.Simple.prototype = extend(Messages.BaseMessage.prototype, {
     // Apply the current group by indenting appropriately.
     // TODO: remove this once bug 778766 is fixed.
     let indent = this._groupDepthCompat * COMPAT.GROUP_INDENT;
     let indentNode = this.document.createElementNS(XHTML_NS, "span");
     indentNode.className = "indent";
     indentNode.style.width = indent + "px";
 
     let body = this._renderBody();
-    this._repeatID.textContent += "|" + body.textContent;
-
-    let repeatNode = this._renderRepeatNode();
-    let location = this._renderLocation();
 
     Messages.BaseMessage.prototype.render.call(this);
     if (this._className) {
       this.element.className += " " + this._className;
     }
 
     this.element.appendChild(timestamp.element);
     this.element.appendChild(indentNode);
@@ -924,22 +929,16 @@ Messages.Simple.prototype = extend(Messages.BaseMessage.prototype, {
       twisty.title = l10n.getStr("messageToggleDetails");
       twisty.addEventListener("click", this._onClickCollapsible);
       this.element.appendChild(twisty);
       this.collapsible = true;
       this.element.setAttribute("collapsible", true);
     }
 
     this.element.appendChild(body);
-    if (repeatNode) {
-      this.element.appendChild(repeatNode);
-    }
-    if (location) {
-      this.element.appendChild(location);
-    }
 
     this.element.appendChild(this.document.createTextNode("\n"));
 
     this.element.clipboardText = this.element.textContent;
 
     if (this.private) {
       this.element.setAttribute("private", true);
     }
@@ -954,46 +953,66 @@ Messages.Simple.prototype = extend(Messages.BaseMessage.prototype, {
 
   /**
    * Render the message body DOM element.
    * @private
    * @return Element
    */
   _renderBody: function ()
   {
+    let bodyWrapper = this.document.createElementNS(XHTML_NS, "span");
+    bodyWrapper.className = "message-body-wrapper";
+
+    let bodyFlex = this.document.createElementNS(XHTML_NS, "span");
+    bodyFlex.className = "message-flex-body";
+    bodyWrapper.appendChild(bodyFlex);
+
     let body = this.document.createElementNS(XHTML_NS, "span");
-    body.className = "message-body-wrapper message-body devtools-monospace";
+    body.className = "message-body devtools-monospace";
+    bodyFlex.appendChild(body);
 
-    let bodyInner = this.document.createElementNS(XHTML_NS, "span");
-    body.appendChild(bodyInner);
-
-    let anchor, container = bodyInner;
+    let anchor, container = body;
     if (this._link || this._linkCallback) {
       container = anchor = this.document.createElementNS(XHTML_NS, "a");
       anchor.href = this._link || "#";
       anchor.draggable = false;
       this._addLinkCallback(anchor, this._linkCallback);
-      bodyInner.appendChild(anchor);
+      body.appendChild(anchor);
     }
 
     if (typeof this._message == "function") {
       container.appendChild(this._message(this));
     } else if (this._message instanceof Ci.nsIDOMNode) {
       container.appendChild(this._message);
     } else {
       container.textContent = this._message;
     }
 
+    // do this before repeatNode is rendered - it has no effect afterwards
+    this._repeatID.textContent += "|" + container.textContent;
+
+    let repeatNode = this._renderRepeatNode();
+    let location = this._renderLocation();
+
+    if (repeatNode) {
+      bodyFlex.appendChild(repeatNode);
+    }
+    if (location) {
+      bodyFlex.appendChild(location);
+    }
+
     if (this.stack) {
-      let stack = new Widgets.Stacktrace(this, this.stack).render().element;
-      body.appendChild(this.document.createTextNode("\n"));
-      body.appendChild(stack);
+      this._attachment = new Widgets.Stacktrace(this, this.stack).render().element;
     }
 
-    return body;
+    if (this._attachment) {
+      bodyWrapper.appendChild(this._attachment);
+    }
+
+    return bodyWrapper;
   },
 
   /**
    * Render the repeat bubble DOM element part of the message.
    * @private
    * @return Element
    */
   _renderRepeatNode: function ()
@@ -1023,19 +1042,17 @@ Messages.Simple.prototype = extend(Messages.BaseMessage.prototype, {
 
     let {url, line, column} = this.location;
     if (IGNORED_SOURCE_URLS.indexOf(url) != -1) {
       return null;
     }
 
     // The ConsoleOutput owner is a WebConsoleFrame instance from webconsole.js.
     // TODO: move createLocationNode() into this file when bug 778766 is fixed.
-    return this.output.owner.createLocationNode({url: url,
-                                                 line: line,
-                                                 column: column});
+    return this.output.owner.createLocationNode({url, line, column });
   },
 
   /**
    * The click event handler for the message expander arrow element. This method
    * toggles the display of message details.
    *
    * @private
    * @param nsIDOMEvent ev
@@ -1427,57 +1444,27 @@ Messages.ConsoleGeneric.prototype = extend(Messages.Extended.prototype, {
 
   _renderBodyPieceSeparator: function ()
   {
     return this.document.createTextNode(" ");
   },
 
   render: function ()
   {
-    let msg = this.document.createElementNS(XHTML_NS, "span");
-    msg.className = "message-body devtools-monospace";
-
-    this._renderBodyPieces(msg);
-
-    let repeatNode = Messages.Simple.prototype._renderRepeatNode.call(this);
-    let location = Messages.Simple.prototype._renderLocation.call(this);
-    if (location) {
-      location.target = "jsdebugger";
-    }
-
-    let flex = this.document.createElementNS(XHTML_NS, "span");
-    flex.className = "message-flex-body";
-
-    flex.appendChild(msg);
-
-    if (repeatNode) {
-      flex.appendChild(repeatNode);
-    }
-    if (location) {
-      flex.appendChild(location);
-    }
-
     let result = this.document.createDocumentFragment();
-    result.appendChild(flex);
+    this._renderBodyPieces(result);
 
     this._message = result;
     this._stacktrace = null;
 
     Messages.Simple.prototype.render.call(this);
 
     return this;
   },
 
-  _renderBody: function ()
-  {
-    let body = Messages.Simple.prototype._renderBody.apply(this, arguments);
-    body.classList.remove("devtools-monospace", "message-body");
-    return body;
-  },
-
   _renderBodyPieces: function (container)
   {
     let lastStyle = null;
     let stylePieces = this._styles.length > 0 ? this._styles.length : 1;
 
     for (let i = 0; i < this._messagePieces.length; i++) {
       // Pieces with an associated style definition come from "%c" formatting.
       // For body pieces beyond that, add a separator before each one.
@@ -1515,21 +1502,16 @@ Messages.ConsoleGeneric.prototype = extend(Messages.Extended.prototype, {
         span.appendChild(elem);
         result = span;
       }
     }
 
     return result;
   },
 
-  // no-op for the message location and .repeats elements.
-  // |this.render()| handles customized message output.
-  _renderLocation: function () { },
-  _renderRepeatNode: function () { },
-
   /**
    * Given a style attribute value, return a cleaned up version of the string
    * such that:
    *
    * - no external URL is allowed to load. See RE_CLEANUP_STYLES.
    * - only some of the properties are allowed, based on a whitelist. See
    *   RE_ALLOWED_STYLES.
    *
@@ -1589,18 +1571,17 @@ Messages.ConsoleTrace = function (packet)
     private: packet.private,
     filterDuplicates: true,
     location: {
       url: packet.filename,
       line: packet.lineNumber,
     },
   };
 
-  this._renderStack = this._renderStack.bind(this);
-  Messages.Simple.call(this, this._renderStack, options);
+  Messages.Simple.call(this, null, options);
 
   this._repeatID.consoleApiLevel = packet.level;
   this._stacktrace = this._repeatID.stacktrace = packet.stacktrace;
   this._arguments = packet.arguments;
 };
 
 Messages.ConsoleTrace.prototype = extend(Messages.Simple.prototype, {
   /**
@@ -1633,83 +1614,55 @@ Messages.ConsoleTrace.prototype = extend(Messages.Simple.prototype, {
         }
       }
     }
     this._arguments = null;
 
     return result;
   },
 
-  render: function ()
-  {
+  render: function () {
+    this._message = this._renderMessage();
+    this._attachment = this._renderStack();
+
     Messages.Simple.prototype.render.apply(this, arguments);
     this.element.setAttribute("open", true);
     return this;
   },
 
   /**
-   * Render the stack frames.
-   *
-   * @private
-   * @return DOMElement
+   * Render the console messageNode
    */
-  _renderStack: function ()
-  {
+  _renderMessage: function () {
     let cmvar = this.document.createElementNS(XHTML_NS, "span");
     cmvar.className = "cm-variable";
     cmvar.textContent = "console";
 
     let cmprop = this.document.createElementNS(XHTML_NS, "span");
     cmprop.className = "cm-property";
     cmprop.textContent = "trace";
 
-    let title = this.document.createElementNS(XHTML_NS, "span");
-    title.className = "message-body devtools-monospace";
-    title.appendChild(cmvar);
-    title.appendChild(this.document.createTextNode("."));
-    title.appendChild(cmprop);
-    title.appendChild(this.document.createTextNode("():"));
-
-    let repeatNode = Messages.Simple.prototype._renderRepeatNode.call(this);
-    let location = Messages.Simple.prototype._renderLocation.call(this);
-    if (location) {
-      location.target = "jsdebugger";
-    }
-
-    let widget = new Widgets.Stacktrace(this, this._stacktrace).render();
-
-    let body = this.document.createElementNS(XHTML_NS, "span");
-    body.className = "message-flex-body";
-    body.appendChild(title);
-    if (repeatNode) {
-      body.appendChild(repeatNode);
-    }
-    if (location) {
-      body.appendChild(location);
-    }
-    body.appendChild(this.document.createTextNode("\n"));
-
     let frag = this.document.createDocumentFragment();
-    frag.appendChild(body);
-    frag.appendChild(widget.element);
+    frag.appendChild(cmvar);
+    frag.appendChild(this.document.createTextNode("."));
+    frag.appendChild(cmprop);
+    frag.appendChild(this.document.createTextNode("():"));
 
     return frag;
   },
 
-  _renderBody: function ()
-  {
-    let body = Messages.Simple.prototype._renderBody.apply(this, arguments);
-    body.classList.remove("devtools-monospace", "message-body");
-    return body;
+  /**
+   * Render the stack frames.
+   *
+   * @private
+   * @return DOMElement
+   */
+  _renderStack: function () {
+    return new Widgets.Stacktrace(this, this._stacktrace).render().element;
   },
-
-  // no-op for the message location and .repeats elements.
-  // |this._renderStack| handles customized message output.
-  _renderLocation: function () { },
-  _renderRepeatNode: function () { },
 }); // Messages.ConsoleTrace.prototype
 
 /**
  * The ConsoleTable message is used for console.table() calls.
  *
  * @constructor
  * @extends Messages.Extended
  * @param object packet
@@ -1726,18 +1679,18 @@ Messages.ConsoleTable = function (packet)
     filterDuplicates: false,
     location: {
       url: packet.filename,
       line: packet.lineNumber,
     },
   };
 
   this._populateTableData = this._populateTableData.bind(this);
-  this._renderTable = this._renderTable.bind(this);
-  Messages.Extended.call(this, [this._renderTable], options);
+  this._renderMessage = this._renderMessage.bind(this);
+  Messages.Extended.call(this, [this._renderMessage], options);
 
   this._repeatID.consoleApiLevel = packet.level;
   this._arguments = packet.arguments;
 };
 
 Messages.ConsoleTable.prototype = extend(Messages.Extended.prototype, {
   /**
    * Holds the arguments the content script passed to the console.table()
@@ -1958,63 +1911,48 @@ Messages.ConsoleTable.prototype = extend(Messages.Extended.prototype, {
       deferred.resolve();
     }
 
     return deferred.promise;
   },
 
   render: function ()
   {
+    this._attachment = this._renderTable();
     Messages.Extended.prototype.render.apply(this, arguments);
     this.element.setAttribute("open", true);
     return this;
   },
 
-  /**
-   * Render the table.
-   *
-   * @private
-   * @return DOMElement
-   */
-  _renderTable: function ()
-  {
+  _renderMessage: function () {
     let cmvar = this.document.createElementNS(XHTML_NS, "span");
     cmvar.className = "cm-variable";
     cmvar.textContent = "console";
 
     let cmprop = this.document.createElementNS(XHTML_NS, "span");
     cmprop.className = "cm-property";
     cmprop.textContent = "table";
 
-    let title = this.document.createElementNS(XHTML_NS, "span");
-    title.className = "message-body devtools-monospace";
-    title.appendChild(cmvar);
-    title.appendChild(this.document.createTextNode("."));
-    title.appendChild(cmprop);
-    title.appendChild(this.document.createTextNode("():"));
+    let frag = this.document.createDocumentFragment();
+    frag.appendChild(cmvar);
+    frag.appendChild(this.document.createTextNode("."));
+    frag.appendChild(cmprop);
+    frag.appendChild(this.document.createTextNode("():"));
 
-    let repeatNode = Messages.Simple.prototype._renderRepeatNode.call(this);
-    let location = Messages.Simple.prototype._renderLocation.call(this);
-    if (location) {
-      location.target = "jsdebugger";
-    }
-
-    let body = this.document.createElementNS(XHTML_NS, "span");
-    body.className = "message-flex-body";
-    body.appendChild(title);
-    if (repeatNode) {
-      body.appendChild(repeatNode);
-    }
-    if (location) {
-      body.appendChild(location);
-    }
-    body.appendChild(this.document.createTextNode("\n"));
+    return frag;
+  },
 
+  /**
+   * Render the table.
+   *
+   * @private
+   * @return DOMElement
+   */
+  _renderTable: function () {
     let result = this.document.createElementNS(XHTML_NS, "div");
-    result.appendChild(body);
 
     if (this._populatePromise) {
       this._populatePromise.then(() => {
         if (this._data.length > 0) {
           let widget = new Widgets.Table(this, this._data, this._columns).render();
           result.appendChild(widget.element);
         }
 
@@ -2030,28 +1968,16 @@ Messages.ConsoleTable.prototype = extend(Messages.Extended.prototype, {
           }
         }
         this._arguments = null;
       });
     }
 
     return result;
   },
-
-  _renderBody: function ()
-  {
-    let body = Messages.Simple.prototype._renderBody.apply(this, arguments);
-    body.classList.remove("devtools-monospace", "message-body");
-    return body;
-  },
-
-  // no-op for the message location and .repeats elements.
-  // |this._renderTable| handles customized message output.
-  _renderLocation: function () { },
-  _renderRepeatNode: function () { },
 }); // Messages.ConsoleTable.prototype
 
 var Widgets = {};
 
 /**
  * The base widget class.
  *
  * @constructor

