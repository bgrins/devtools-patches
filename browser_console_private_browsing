# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  77adb8b281e1a65f248ba7cd58e16363f8a44ac4
browser_console_private_browsing

diff --git a/devtools/client/webconsole/test/browser_console_private_browsing.js b/devtools/client/webconsole/test/browser_console_private_browsing.js
--- a/devtools/client/webconsole/test/browser_console_private_browsing.js
+++ b/devtools/client/webconsole/test/browser_console_private_browsing.js
@@ -10,17 +10,17 @@
 "use strict";
 
 function test() {
   const TEST_URI = "data:text/html;charset=utf8,<p>hello world! bug 874061" +
                    "<button onclick='console.log(\"foobar bug 874061\");" +
                    "fooBazBaz.yummy()'>click</button>";
   let ConsoleAPIStorage = Cc["@mozilla.org/consoleAPI-storage;1"]
                             .getService(Ci.nsIConsoleAPIStorage);
-  let privateWindow, privateBrowser, privateTab, privateContent;
+  let privateWindow, privateBrowser, privateTab;
   let hud, expectedMessages, nonPrivateMessage;
 
   // This test is slightly more involved: it opens the web console twice,
   // a new private window once, and the browser console twice. We can get
   // a timeout with debug builds on slower machines.
   requestLongerTimeout(2);
   start();
 
@@ -33,18 +33,20 @@ function test() {
   function onLoadTab() {
     gBrowser.selectedBrowser.removeEventListener("load", onLoadTab, true);
     info("onLoadTab()");
 
     // Make sure we have a clean state to start with.
     Services.console.reset();
     ConsoleAPIStorage.clearEvents();
 
-    // Add a non-private message to the browser console.
-    content.console.log("bug874061-not-private");
+    ContentTask.spawn(gBrowser.selectedBrowser, {}, function*() {
+      // Add a non-private message to the browser console.
+      content.console.log("bug874061-not-private");
+    });
 
     nonPrivateMessage = {
       name: "console message from a non-private window",
       text: "bug874061-not-private",
       category: CATEGORY_WEBDEV,
       severity: SEVERITY_LOG,
     };
 
@@ -58,27 +60,27 @@ function test() {
   function onPrivateWindowReady() {
     info("private browser window opened");
     privateBrowser = privateWindow.gBrowser;
 
     privateTab = privateBrowser.selectedTab = privateBrowser.addTab(TEST_URI);
     privateBrowser.selectedBrowser.addEventListener("load", function onLoad() {
       info("private tab opened");
       privateBrowser.selectedBrowser.removeEventListener("load", onLoad, true);
-      privateContent = privateBrowser.selectedBrowser.contentWindow;
       ok(PrivateBrowsingUtils.isBrowserPrivate(privateBrowser.selectedBrowser),
          "tab window is private");
       openConsole(privateTab).then(consoleOpened);
     }, true);
   }
 
   function addMessages() {
-    let button = privateContent.document.querySelector("button");
-    ok(button, "button in page");
-    EventUtils.synthesizeMouse(button, 2, 2, {}, privateContent);
+    ContentTask.spawn(privateBrowser.selectedBrowser, {}, function*() {
+      let button = content.document.querySelector("button");
+      button.click();
+    });
   }
 
   function consoleOpened(aHud) {
     hud = aHud;
     ok(hud, "web console opened");
 
     addMessages();
     expectedMessages = [
