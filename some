# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  8f1920a8cb27f46b121cdf4cb0eebebb3fbfd18c
Rewrite _some_ callers that read properties off the global this

diff --git a/browser/components/customizableui/CustomizableUI.jsm b/browser/components/customizableui/CustomizableUI.jsm
--- a/browser/components/customizableui/CustomizableUI.jsm
+++ b/browser/components/customizableui/CustomizableUI.jsm
@@ -4439,18 +4439,18 @@ var CustomizableUI = {
 
     parent.appendChild(aSubview);
   },
 
   getCustomizationTarget(aElement) {
     return CustomizableUIInternal.getCustomizationTarget(aElement);
   },
 };
-Object.freeze(this.CustomizableUI);
-Object.freeze(this.CustomizableUI.windows);
+Object.freeze(CustomizableUI);
+Object.freeze(CustomizableUI.windows);
 
 /**
  * All external consumers of widgets are really interacting with these wrappers
  * which provide a common interface.
  */
 
 /**
  * WidgetGroupWrapper is the common interface for interacting with an entire
diff --git a/browser/components/downloads/DownloadsCommon.jsm b/browser/components/downloads/DownloadsCommon.jsm
--- a/browser/components/downloads/DownloadsCommon.jsm
+++ b/browser/components/downloads/DownloadsCommon.jsm
@@ -657,20 +657,20 @@ var DownloadsCommon = {
       s.unblockButtonConfirmBlock,
       null,
       {}
     );
     return [firstButtonAction, "cancel", "confirmBlock"][rv];
   },
 };
 
-XPCOMUtils.defineLazyGetter(this.DownloadsCommon, "log", () => {
+XPCOMUtils.defineLazyGetter(DownloadsCommon, "log", () => {
   return DownloadsLogger.log.bind(DownloadsLogger);
 });
-XPCOMUtils.defineLazyGetter(this.DownloadsCommon, "error", () => {
+XPCOMUtils.defineLazyGetter(DownloadsCommon, "error", () => {
   return DownloadsLogger.error.bind(DownloadsLogger);
 });
 
 /**
  * Returns true if we are executing on Windows Vista or a later version.
  */
 XPCOMUtils.defineLazyGetter(DownloadsCommon, "isWinVistaOrHigher", function() {
   let os = Services.appinfo.OS;
diff --git a/browser/components/translation/Translation.jsm b/browser/components/translation/Translation.jsm
--- a/browser/components/translation/Translation.jsm
+++ b/browser/components/translation/Translation.jsm
@@ -500,9 +500,9 @@ var TranslationTelemetry = {
   },
 
   _recordOpportunity(language, success) {
     this.HISTOGRAMS.OPPORTUNITIES().add(success);
     this.HISTOGRAMS.OPPORTUNITIES_BY_LANG().add(language, success);
   },
 };
 
-this.TranslationTelemetry.init();
+TranslationTelemetry.init();
diff --git a/browser/components/uitour/UITour.jsm b/browser/components/uitour/UITour.jsm
--- a/browser/components/uitour/UITour.jsm
+++ b/browser/components/uitour/UITour.jsm
@@ -2013,17 +2013,17 @@ var UITour = {
         let global = contextToVisit.currentWindowGlobal;
         let actor = global.getActor("UITour");
         actor.sendAsyncMessage("UITour:SendPageNotification", detail);
       }
     }
   },
 };
 
-this.UITour.init();
+UITour.init();
 
 /**
  * UITour Health Report
  */
 /**
  * Public API to be called by the UITour code
  */
 const UITourHealthReport = {
diff --git a/browser/extensions/formautofill/FormAutofillHeuristics.jsm b/browser/extensions/formautofill/FormAutofillHeuristics.jsm
--- a/browser/extensions/formautofill/FormAutofillHeuristics.jsm
+++ b/browser/extensions/formautofill/FormAutofillHeuristics.jsm
@@ -1213,38 +1213,34 @@ this.FormAutofillHeuristics = {
     // {REGEX_SEPARATOR, FIELD_NONE, 0},
 
     // Phone: <phone> (Ext: <ext>)?
     // {REGEX_PHONE, FIELD_PHONE, 0},
     // {REGEX_SEPARATOR, FIELD_NONE, 0},
   ],
 };
 
-XPCOMUtils.defineLazyGetter(this.FormAutofillHeuristics, "RULES", () => {
+XPCOMUtils.defineLazyGetter(FormAutofillHeuristics, "RULES", () => {
   let sandbox = {};
   const HEURISTICS_REGEXP = "chrome://formautofill/content/heuristicsRegexp.js";
   Services.scriptloader.loadSubScript(HEURISTICS_REGEXP, sandbox);
   return sandbox.HeuristicsRegExp.RULES;
 });
 
-XPCOMUtils.defineLazyGetter(this.FormAutofillHeuristics, "_prefEnabled", () => {
+XPCOMUtils.defineLazyGetter(FormAutofillHeuristics, "_prefEnabled", () => {
   return Services.prefs.getBoolPref(PREF_HEURISTICS_ENABLED);
 });
 
 Services.prefs.addObserver(PREF_HEURISTICS_ENABLED, () => {
   this.FormAutofillHeuristics._prefEnabled = Services.prefs.getBoolPref(
     PREF_HEURISTICS_ENABLED
   );
 });
 
-XPCOMUtils.defineLazyGetter(
-  this.FormAutofillHeuristics,
-  "_sectionEnabled",
-  () => {
-    return Services.prefs.getBoolPref(PREF_SECTION_ENABLED);
-  }
-);
+XPCOMUtils.defineLazyGetter(FormAutofillHeuristics, "_sectionEnabled", () => {
+  return Services.prefs.getBoolPref(PREF_SECTION_ENABLED);
+});
 
 Services.prefs.addObserver(PREF_SECTION_ENABLED, () => {
   this.FormAutofillHeuristics._sectionEnabled = Services.prefs.getBoolPref(
     PREF_SECTION_ENABLED
   );
 });
diff --git a/layout/tools/reftest/globals.jsm b/layout/tools/reftest/globals.jsm
--- a/layout/tools/reftest/globals.jsm
+++ b/layout/tools/reftest/globals.jsm
@@ -158,10 +158,10 @@ for (let [key, val] of Object.entries({
 
     manifestsLoaded: {},
     // Only dump the sandbox once, because it doesn't depend on the
     // manifest URL (yet!).
     dumpedConditionSandbox: false,
   }
 })) {
   this[key] = val;
-  this.EXPORTED_SYMBOLS.push(key);
+  EXPORTED_SYMBOLS.push(key);
 }
diff --git a/toolkit/components/asyncshutdown/AsyncShutdown.jsm b/toolkit/components/asyncshutdown/AsyncShutdown.jsm
--- a/toolkit/components/asyncshutdown/AsyncShutdown.jsm
+++ b/toolkit/components/asyncshutdown/AsyncShutdown.jsm
@@ -1071,9 +1071,9 @@ if (!isContent) {
 // makes it easier to cause shutdown hangs.
 
 // All processes
 this.AsyncShutdown.webWorkersShutdown = getPhase("web-workers-shutdown");
 this.AsyncShutdown.xpcomWillShutdown = getPhase("xpcom-will-shutdown");
 
 this.AsyncShutdown.Barrier = Barrier;
 
-Object.freeze(this.AsyncShutdown);
+Object.freeze(AsyncShutdown);
diff --git a/toolkit/components/crashes/CrashManager.jsm b/toolkit/components/crashes/CrashManager.jsm
--- a/toolkit/components/crashes/CrashManager.jsm
+++ b/toolkit/components/crashes/CrashManager.jsm
@@ -1518,17 +1518,17 @@ CrashRecord.prototype = Object.freeze({
 });
 
 /**
  * Obtain the global CrashManager instance used by the running application.
  *
  * CrashManager is likely only ever instantiated once per application lifetime.
  * The main reason it's implemented as a reusable type is to facilitate testing.
  */
-XPCOMUtils.defineLazyGetter(this.CrashManager, "Singleton", function() {
+XPCOMUtils.defineLazyGetter(CrashManager, "Singleton", function() {
   if (gCrashManager) {
     return gCrashManager;
   }
 
   gCrashManager = new CrashManager({
     telemetryStoreSizeKey: "CRASH_STORE_COMPRESSED_BYTES",
   });
 
diff --git a/toolkit/components/crashmonitor/CrashMonitor.jsm b/toolkit/components/crashmonitor/CrashMonitor.jsm
--- a/toolkit/components/crashmonitor/CrashMonitor.jsm
+++ b/toolkit/components/crashmonitor/CrashMonitor.jsm
@@ -218,9 +218,9 @@ var CrashMonitor = {
     if (NOTIFICATIONS.every(elem => elem in CrashMonitorInternal.checkpoints)) {
       // All notifications received, unregister observers
       NOTIFICATIONS.forEach(function(aTopic) {
         Services.obs.removeObserver(this, aTopic);
       }, this);
     }
   },
 };
-Object.freeze(this.CrashMonitor);
+Object.freeze(CrashMonitor);
diff --git a/toolkit/components/extensions/ExtensionPreferencesManager.jsm b/toolkit/components/extensions/ExtensionPreferencesManager.jsm
--- a/toolkit/components/extensions/ExtensionPreferencesManager.jsm
+++ b/toolkit/components/extensions/ExtensionPreferencesManager.jsm
@@ -59,27 +59,27 @@ XPCOMUtils.defineLazyGetter(this, "defau
   return new Preferences({ defaultBranch: true });
 });
 
 /* eslint-disable mozilla/balanced-listeners */
 Management.on("uninstall", async (type, { id }) => {
   // Ensure managed preferences are cleared if they were
   // not cleared at the module level.
   await Management.asyncLoadSettingsModules();
-  return this.ExtensionPreferencesManager.removeAll(id);
+  return ExtensionPreferencesManager.removeAll(id);
 });
 
 Management.on("disable", async (type, id) => {
   await Management.asyncLoadSettingsModules();
-  return this.ExtensionPreferencesManager.disableAll(id);
+  return ExtensionPreferencesManager.disableAll(id);
 });
 
 Management.on("enabling", async (type, id) => {
   await Management.asyncLoadSettingsModules();
-  return this.ExtensionPreferencesManager.enableAll(id);
+  return ExtensionPreferencesManager.enableAll(id);
 });
 /* eslint-enable mozilla/balanced-listeners */
 
 const STORE_TYPE = "prefs";
 
 // Definitions of settings, each of which correspond to a different API.
 let settingsMap = new Map();
 
diff --git a/toolkit/components/osfile/modules/osfile_async_front.jsm b/toolkit/components/osfile/modules/osfile_async_front.jsm
--- a/toolkit/components/osfile/modules/osfile_async_front.jsm
+++ b/toolkit/components/osfile/modules/osfile_async_front.jsm
@@ -1582,17 +1582,17 @@ this.OS.Shared = {
   Type: SysAll.Type,
   get DEBUG() {
     return SharedAll.Config.DEBUG;
   },
   set DEBUG(x) {
     return (SharedAll.Config.DEBUG = x);
   },
 };
-Object.freeze(this.OS.Shared);
+Object.freeze(OS.Shared);
 this.OS.Path = Path;
 
 // Returns a resolved promise when all the queued operation have been completed.
 Object.defineProperty(OS.File, "queue", {
   get() {
     return Scheduler.queue;
   },
 });
diff --git a/toolkit/components/osfile/modules/ospath.jsm b/toolkit/components/osfile/modules/ospath.jsm
--- a/toolkit/components/osfile/modules/ospath.jsm
+++ b/toolkit/components/osfile/modules/ospath.jsm
@@ -39,12 +39,12 @@ if (typeof Components == "undefined") {
   if (Scope.OS.Constants.Win) {
     ChromeUtils.import("resource://gre/modules/osfile/ospath_win.jsm", Path);
   } else {
     ChromeUtils.import("resource://gre/modules/osfile/ospath_unix.jsm", Path);
   }
 
   this.EXPORTED_SYMBOLS = [];
   for (let k in Path) {
-    this.EXPORTED_SYMBOLS.push(k);
+    EXPORTED_SYMBOLS.push(k);
     this[k] = Path[k];
   }
 }
diff --git a/toolkit/components/passwordmgr/InsecurePasswordUtils.jsm b/toolkit/components/passwordmgr/InsecurePasswordUtils.jsm
--- a/toolkit/components/passwordmgr/InsecurePasswordUtils.jsm
+++ b/toolkit/components/passwordmgr/InsecurePasswordUtils.jsm
@@ -230,13 +230,13 @@ this.InsecurePasswordUtils = {
 
     Services.telemetry
       .getHistogramById("PWMGR_LOGIN_PAGE_SAFETY")
       .add(passwordSafety);
   },
 };
 
 XPCOMUtils.defineLazyPreferenceGetter(
-  this.InsecurePasswordUtils,
+  InsecurePasswordUtils,
   "_ignoreLocalIPAddress",
   "security.insecure_field_warning.ignore_local_ip_address",
   true
 );
diff --git a/toolkit/components/passwordmgr/LoginManagerAuthPrompter.jsm b/toolkit/components/passwordmgr/LoginManagerAuthPrompter.jsm
--- a/toolkit/components/passwordmgr/LoginManagerAuthPrompter.jsm
+++ b/toolkit/components/passwordmgr/LoginManagerAuthPrompter.jsm
@@ -264,17 +264,17 @@ LoginManagerAuthPromptFactory.prototype 
           /* Just ignore exceptions from the callback */
         }
       }
     }
   },
 }; // end of LoginManagerAuthPromptFactory implementation
 
 XPCOMUtils.defineLazyGetter(
-  this.LoginManagerAuthPromptFactory.prototype,
+  LoginManagerAuthPromptFactory.prototype,
   "log",
   () => {
     let logger = LoginHelper.createLogger("LoginManagerAuthPromptFactory");
     return logger.log.bind(logger);
   }
 );
 
 /* ==================== LoginManagerAuthPrompter ==================== */
@@ -1376,21 +1376,17 @@ LoginManagerAuthPrompter.prototype = {
         this.callback.onAuthCancelled(this.context, false);
         this.callback = null;
         this.context = null;
       },
     };
   },
 }; // end of LoginManagerAuthPrompter implementation
 
-XPCOMUtils.defineLazyGetter(
-  this.LoginManagerAuthPrompter.prototype,
-  "log",
-  () => {
-    let logger = LoginHelper.createLogger("LoginManagerAuthPrompter");
-    return logger.log.bind(logger);
-  }
-);
+XPCOMUtils.defineLazyGetter(LoginManagerAuthPrompter.prototype, "log", () => {
+  let logger = LoginHelper.createLogger("LoginManagerAuthPrompter");
+  return logger.log.bind(logger);
+});
 
 const EXPORTED_SYMBOLS = [
   "LoginManagerAuthPromptFactory",
   "LoginManagerAuthPrompter",
 ];
diff --git a/toolkit/components/search/SearchSuggestionController.jsm b/toolkit/components/search/SearchSuggestionController.jsm
--- a/toolkit/components/search/SearchSuggestionController.jsm
+++ b/toolkit/components/search/SearchSuggestionController.jsm
@@ -503,33 +503,33 @@ this.SearchSuggestionController.prototyp
 this.SearchSuggestionController.engineOffersSuggestions = function(engine) {
   return engine.supportsResponseType(SEARCH_RESPONSE_SUGGESTION_JSON);
 };
 
 /**
  * The maximum time (ms) to wait before giving up on a remote suggestions.
  */
 XPCOMUtils.defineLazyPreferenceGetter(
-  this.SearchSuggestionController.prototype,
+  SearchSuggestionController.prototype,
   "remoteTimeout",
   REMOTE_TIMEOUT_PREF,
   REMOTE_TIMEOUT_DEFAULT
 );
 
 /**
  * Whether or not remote suggestions are turned on.
  */
 XPCOMUtils.defineLazyPreferenceGetter(
-  this.SearchSuggestionController.prototype,
+  SearchSuggestionController.prototype,
   "suggestionsEnabled",
   BROWSER_SUGGEST_PREF,
   true
 );
 
 /**
  * Whether or not remote suggestions are turned on in private browsing mode.
  */
 XPCOMUtils.defineLazyPreferenceGetter(
-  this.SearchSuggestionController.prototype,
+  SearchSuggestionController.prototype,
   "suggestionsInPrivateBrowsingEnabled",
   BROWSER_SUGGEST_PRIVATE_PREF,
   false
 );
diff --git a/toolkit/mozapps/extensions/AddonManager.jsm b/toolkit/mozapps/extensions/AddonManager.jsm
--- a/toolkit/mozapps/extensions/AddonManager.jsm
+++ b/toolkit/mozapps/extensions/AddonManager.jsm
@@ -4746,20 +4746,20 @@ AMTelemetry = {
     } catch (err) {
       // If the telemetry throws just log the error so it doesn't break any
       // functionality.
       Cu.reportError(err);
     }
   },
 };
 
-this.AddonManager.init();
+AddonManager.init();
 
 // Setup the AMTelemetry once the AddonManager has been started.
-this.AddonManager.addManagerListener(AMTelemetry);
+AddonManager.addManagerListener(AMTelemetry);
 
 // load the timestamps module into AddonManagerInternal
 ChromeUtils.import(
   "resource://gre/modules/TelemetryTimestamps.jsm",
   AddonManagerInternal
 );
 Object.freeze(AddonManagerInternal);
 Object.freeze(AddonManagerPrivate);
