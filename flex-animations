# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  4e2ea1a75e878ae392e4775f2eddd9f83d1b008e

diff --git a/browser/base/content/tabbrowser.js b/browser/base/content/tabbrowser.js
--- a/browser/base/content/tabbrowser.js
+++ b/browser/base/content/tabbrowser.js
@@ -2359,16 +2359,19 @@ window._gBrowser = {
     this.tabContainer._unlockTabSizing();
 
     // When overflowing, new tabs are scrolled into view smoothly, which
     // doesn't go well together with the width transition. So we skip the
     // transition in that case.
     let animate = !skipAnimation && !pinned &&
       this.tabContainer.getAttribute("overflow") != "true" &&
       this.animationsEnabled;
+    console.log(`animate? ${animate}`, !skipAnimation, !pinned,
+    this.tabContainer.getAttribute("overflow") != "true",
+    this.animationsEnabled);
     if (!animate) {
       t.setAttribute("fadein", "true");
 
       // Call _handleNewTab asynchronously as it needs to know if the
       // new tab is selected.
       setTimeout(function(tabContainer) {
         tabContainer._handleNewTab(t);
       }, 0, this.tabContainer);
diff --git a/browser/base/content/tabbrowser.xml b/browser/base/content/tabbrowser.xml
--- a/browser/base/content/tabbrowser.xml
+++ b/browser/base/content/tabbrowser.xml
@@ -53,19 +53,21 @@
         tabs._positionPinnedTabs();
       ]]></handler>
       <handler event="overflow"><![CDATA[
         // Ignore overflow events:
         // - from nested scrollable elements
         // - for vertical orientation
         if (event.originalTarget != this.scrollbox ||
             event.detail == 0) {
+          console.log("ignoring overflow", event.originalTarget.tagName);
           return;
         }
 
+        console.log("Setting overflow", this);
         var tabs = document.getBindingParent(this);
         tabs.setAttribute("overflow", "true");
         tabs._positionPinnedTabs();
         tabs._handleTabSelect(true);
       ]]></handler>
     </handlers>
   </binding>
 
