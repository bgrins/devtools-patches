# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  0cf9eded35d8150796eda1f892666d0a778bd488

diff --git a/toolkit/content/widgets/scrollbox.xml b/toolkit/content/widgets/scrollbox.xml
--- a/toolkit/content/widgets/scrollbox.xml
+++ b/toolkit/content/widgets/scrollbox.xml
@@ -1,86 +1,59 @@
+
 <?xml version="1.0"?>
 <!-- This Source Code Form is subject to the terms of the Mozilla Public
    - License, v. 2.0. If a copy of the MPL was not distributed with this
    - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
 
 
 <bindings id="arrowscrollboxBindings"
    xmlns="http://www.mozilla.org/xbl"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
    xmlns:xbl="http://www.mozilla.org/xbl">
 
   <binding id="arrowscrollbox" extends="chrome://global/content/bindings/general.xml#basecontrol">
     <content>
       <xul:toolbarbutton class="scrollbutton-up"
                          anonid="scrollbutton-up"
-                         xbl:inherits="orient,collapsed=notoverflowing,disabled=scrolledtostart"/>
+                         xbl:inherits="orient,collapsed=notoverflowing,disabled=scrolledtostart"
+                         onclick="_onButtonClick(event);"
+                         onmousedown="_onButtonMouseDown(event, -1);"
+                         onmouseup="_onButtonMouseUp(event);"
+                         onmouseover="_onButtonMouseOver(-1);"
+                         onmouseout="_onButtonMouseOut();"/>
       <xul:spacer class="arrowscrollbox-overflow-start-indicator"
                   xbl:inherits="collapsed=scrolledtostart"/>
       <xul:scrollbox class="arrowscrollbox-scrollbox"
                      anonid="scrollbox"
                      flex="1"
                      xbl:inherits="orient,align,pack,dir,smoothscroll">
         <children/>
       </xul:scrollbox>
       <xul:spacer class="arrowscrollbox-overflow-end-indicator"
                   xbl:inherits="collapsed=scrolledtoend"/>
       <xul:toolbarbutton class="scrollbutton-down"
                          anonid="scrollbutton-down"
-                         xbl:inherits="orient,collapsed=notoverflowing,disabled=scrolledtoend"/>
+                         xbl:inherits="orient,collapsed=notoverflowing,disabled=scrolledtoend"
+                         onclick="_onButtonClick(event);"
+                         onmousedown="_onButtonMouseDown(event, 1);"
+                         onmouseup="_onButtonMouseUp(event);"
+                         onmouseover="_onButtonMouseOver(1);"
+                         onmouseout="_onButtonMouseOut();"/>
     </content>
 
     <implementation>
       <constructor><![CDATA[
         if (!this.hasAttribute("smoothscroll")) {
           this.smoothScroll = this._prefBranch
                                   .getBoolPref("toolkit.scrollbox.smoothScroll", true);
         }
 
         this.setAttribute("notoverflowing", "true");
         this._updateScrollButtonsDisabledState();
-
-        // Ultimately Bug 1514926 will convert arrowscrollbox binding to a custom element.
-        // For the needs of Bug 1497189, where we apply a custom CSP to about:addons, we had
-        // to remove inline handlers and hence added event listeners for mouse events here.
-        this.addEventListener("click", (e) => {
-          if (e.originalTarget != this._scrollButtonUp && e.originalTarget != this._scrollButtonDown) {
-            return;
-          }
-          this._onButtonClick(e);
-        });
-        this.addEventListener("mousedown", (e) => {
-          if (e.originalTarget == this._scrollButtonUp) {
-            this._onButtonMouseDown(e, -1);
-          }
-          if (e.originalTarget == this._scrollButtonDown) {
-            this._onButtonMouseDown(e, 1);
-          }
-        });
-        this.addEventListener("mouseup", (e) => {
-          if (e.originalTarget != this._scrollButtonUp && e.originalTarget != this._scrollButtonDown) {
-            return;
-          }
-          this._onButtonMouseUp(e);
-        });
-        this.addEventListener("mouseover", (e) => {
-          if (e.originalTarget == this._scrollButtonUp) {
-            this._onButtonMouseOver(-1);
-          }
-          if (e.originalTarget == this._scrollButtonDown) {
-            this._onButtonMouseOver(1);
-          }
-        });
-        this.addEventListener("mouseout", (e) => {
-          if (e.originalTarget != this._scrollButtonUp && e.originalTarget != this._scrollButtonDown) {
-            return;
-          }
-          this._onButtonMouseOut();
-        });
       ]]></constructor>
 
       <destructor><![CDATA[
         // Release timer to avoid reference cycles.
         if (this._scrollTimer) {
           this._scrollTimer.cancel();
           this._scrollTimer = null;
         }
@@ -352,26 +325,21 @@
             return;
 
           this.ensureElementIsVisible(targetElement, aInstant);
         ]]></body>
       </method>
 
       <method name="_getScrollableElements">
         <body><![CDATA[
-          let nodes = this.children;
-          if (nodes.length == 1) {
-            let node = nodes[0];
-            if (node.localName == "children" &&
-                node.namespaceURI == "http://www.mozilla.org/xbl") {
-              nodes = document.getBindingParent(this).children;
-            } else if (node.localName == "slot" &&
-                       node.namespaceURI == "http://www.w3.org/1999/xhtml") {
-              nodes = node.getRootNode().host.children;
-            }
+          var nodes = this.children;
+          if (nodes.length == 1 &&
+              nodes[0].localName == "children" &&
+              nodes[0].namespaceURI == "http://www.mozilla.org/xbl") {
+            nodes = document.getBindingParent(this).children;
           }
 
           return Array.prototype.filter.call(nodes, this._canScrollToElement, this);
         ]]></body>
       </method>
 
       <method name="_elementFromPoint">
         <parameter name="aX"/>
