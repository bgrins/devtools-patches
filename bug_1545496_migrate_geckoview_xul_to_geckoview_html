# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1568753802 25200
#      Tue Sep 17 13:56:42 2019 -0700
# Node ID 1a23fff896e9c75e3470e8eeef5f3470d6ea36d0
# Parent  9596d7f4a7457bccc78cadf9c39bcc9c4b5b97f8
Bug 1545496 - Migrate geckoview.xul to geckoview.html

Differential Revision: https://phabricator.services.mozilla.com/D46223

diff --git a/mobile/android/app/mobile.js b/mobile/android/app/mobile.js
--- a/mobile/android/app/mobile.js
+++ b/mobile/android/app/mobile.js
@@ -26,17 +26,17 @@
 //
 pref("toolkit.browser.cacheRatioWidth", 2000);
 pref("toolkit.browser.cacheRatioHeight", 3000);
 
 // How long before a content view (a handle to a remote scrollable object)
 // expires.
 pref("toolkit.browser.contentViewExpire", 3000);
 
-pref("toolkit.defaultChromeURI", "chrome://geckoview/content/geckoview.xul");
+pref("toolkit.defaultChromeURI", "chrome://geckoview/content/geckoview.html");
 pref("browser.chromeURL", "chrome://browser/content/");
 
 // If a tab has not been active for this long (seconds), then it may be
 // turned into a zombie tab to preemptively free up memory. -1 disables time-based
 // expiration (but low-memory conditions may still require the tab to be zombified).
 pref("browser.tabs.expireTime", 900);
 
 // Disables zombification of background tabs under memory pressure.
diff --git a/mobile/android/chrome/geckoview/geckoview.xul b/mobile/android/chrome/geckoview/geckoview.html
rename from mobile/android/chrome/geckoview/geckoview.xul
rename to mobile/android/chrome/geckoview/geckoview.html
--- a/mobile/android/chrome/geckoview/geckoview.xul
+++ b/mobile/android/chrome/geckoview/geckoview.html
@@ -1,13 +1,13 @@
-<?xml version="1.0"?>
 <!-- This Source Code Form is subject to the terms of the Mozilla Public
    - License, v. 2.0. If a copy of the MPL was not distributed with this
    - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
-
-<window id="main-window"
-        windowtype="navigator:geckoview"
-        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
-  <script type="application/javascript" src="chrome://geckoview/content/geckoview.js"/>
-  <script>
-    window.addEventListener("DOMContentLoaded", startup, { once: true });
-  </script>
-</window>
+<!DOCTYPE html>
+<html id="main-window"
+      windowtype="navigator:geckoview"
+      style="overflow: hidden;">
+  <head>
+    <meta charset="utf-8" />
+    <script src="chrome://geckoview/content/geckoview.js"></script>
+  </head>
+  <body></body>
+</html>
diff --git a/mobile/android/chrome/geckoview/geckoview.js b/mobile/android/chrome/geckoview/geckoview.js
--- a/mobile/android/chrome/geckoview/geckoview.js
+++ b/mobile/android/chrome/geckoview/geckoview.js
@@ -61,17 +61,17 @@ var ModuleManager = {
               manager: self,
               ...module,
             }),
           ];
         }
       })()
     );
 
-    window.document.documentElement.appendChild(aBrowser);
+    window.document.body.appendChild(aBrowser);
 
     WindowEventDispatcher.registerListener(this, [
       "GeckoView:UpdateModuleState",
       "GeckoView:UpdateInitData",
       "GeckoView:UpdateSettings",
     ]);
 
     this.messageManager.addMessageListener(
@@ -421,17 +421,17 @@ class ModuleInfo {
 function createBrowser() {
   const browser = (window.browser = document.createXULElement("browser"));
   // Identify this `<browser>` element uniquely to Marionette, devtools, etc.
   browser.permanentKey = {};
 
   browser.setAttribute("nodefaultsrc", "true");
   browser.setAttribute("type", "content");
   browser.setAttribute("primary", "true");
-  browser.setAttribute("flex", "1");
+  browser.setAttribute("style", "height: 100vh; width: 100vw;");
 
   const settings = window.arguments[0].QueryInterface(Ci.nsIAndroidView)
     .initData.settings;
   if (settings.useMultiprocess) {
     if (
       Services.prefs.getBoolPref(
         "dom.w3c_pointer_events.multiprocess.android.enabled"
       )
@@ -563,8 +563,10 @@ function startup() {
       )
     );
   });
 
   // Move focus to the content window at the end of startup,
   // so things like text selection can work properly.
   browser.focus();
 }
+
+window.addEventListener("DOMContentLoaded", startup, { once: true });
diff --git a/mobile/android/chrome/geckoview/jar.mn b/mobile/android/chrome/geckoview/jar.mn
--- a/mobile/android/chrome/geckoview/jar.mn
+++ b/mobile/android/chrome/geckoview/jar.mn
@@ -5,17 +5,17 @@
 geckoview.jar:
 % content geckoview %content/
 
   content/config.xhtml
   content/config.js
 % override chrome://global/content/config.xul chrome://geckoview/content/config.xhtml
 
   content/ErrorPageEventHandler.js
-  content/geckoview.xul
+  content/geckoview.html
   content/geckoview.js
   content/GeckoViewContentBlockingChild.js
   content/GeckoViewContentChild.js
   content/GeckoViewMediaChild.js
   content/GeckoViewNavigationChild.js
   content/GeckoViewProgressChild.js
   content/GeckoViewPromptChild.js
   content/GeckoViewScrollChild.js
diff --git a/widget/android/nsWindow.cpp b/widget/android/nsWindow.cpp
--- a/widget/android/nsWindow.cpp
+++ b/widget/android/nsWindow.cpp
@@ -1238,17 +1238,17 @@ void nsWindow::GeckoViewSupport::Open(
   MOZ_RELEASE_ASSERT(ww);
 
   nsAutoCString url;
   if (aChromeURI) {
     url = aChromeURI->ToCString();
   } else {
     nsresult rv = Preferences::GetCString("toolkit.defaultChromeURI", url);
     if (NS_FAILED(rv)) {
-      url = NS_LITERAL_CSTRING("chrome://geckoview/content/geckoview.xul");
+      url = NS_LITERAL_CSTRING("chrome://geckoview/content/geckoview.html");
     }
   }
 
   // Prepare an nsIAndroidView to pass as argument to the window.
   RefPtr<AndroidView> androidView = new AndroidView();
   androidView->mEventDispatcher->Attach(
       java::EventDispatcher::Ref::From(aDispatcher), nullptr);
   androidView->mInitData = java::GeckoBundle::Ref::From(aInitData);
