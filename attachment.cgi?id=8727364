diff --git a/browser/base/content/test/general/browser.ini b/browser/base/content/test/general/browser.ini
--- a/browser/base/content/test/general/browser.ini
+++ b/browser/base/content/test/general/browser.ini
@@ -273,17 +273,17 @@ tags = mcb
 [browser_bug832435.js]
 [browser_bug839103.js]
 [browser_bug880101.js]
 [browser_bug882977.js]
 [browser_bug902156.js]
 tags = mcb
 [browser_bug906190.js]
 tags = mcb
-skip-if = buildapp == "mulet" || e10s # Bug 1093642 - test manipulates content and relies on content focus
+skip-if = buildapp == "mulet"
 [browser_mixedContentFromOnunload.js]
 tags = mcb
 [browser_mixedContentFramesOnHttp.js]
 tags = mcb
 [browser_bug970746.js]
 [browser_bug1015721.js]
 skip-if = os == 'win'
 [browser_bug1064280_changeUrlInPinnedTab.js]
diff --git a/browser/base/content/test/general/browser_bug906190.js b/browser/base/content/test/general/browser_bug906190.js
--- a/browser/base/content/test/general/browser_bug906190.js
+++ b/browser/base/content/test/general/browser_bug906190.js
@@ -29,35 +29,43 @@ function* doTest(parentTabSpec, childTab
     });
 
     // Disable the Mixed Content Blocker for the page, which reloads it.
     let promiseReloaded = BrowserTestUtils.browserLoaded(browser);
     gIdentityHandler.disableMixedContentProtection();
     yield promiseReloaded;
 
     // Wait for the script in the page to update the contents of the test div.
-    let testDiv = content.document.getElementById('mctestdiv');
-    yield promiseWaitForCondition(
-      () => testDiv.innerHTML == "Mixed Content Blocker disabled");
+    yield ContentTask.spawn(browser, childTabSpec, function* (childTabSpec) {
+      let testDiv = content.document.getElementById("mctestdiv");
+      yield ContentTaskUtils.waitForCondition(function () {
+        if (testDiv.innerHTML != "Mixed Content Blocker disabled") {
+          return false;
+        }
 
-    // Add the link for the child tab to the page.
-    let mainDiv = content.document.createElement("div");
-    mainDiv.innerHTML =
-      '<p><a id="linkToOpenInNewTab" href="' + childTabSpec + '">Link</a></p>';
-    content.document.body.appendChild(mainDiv);
+        // Add the link for the child tab to the page.
+        let mainDiv = content.document.createElement("div");
+        mainDiv.innerHTML =
+          '<p><a id="linkToOpenInNewTab" href="' + childTabSpec + '">Link</a></p>';
+        content.document.body.appendChild(mainDiv);
+
+        return true;
+      }, "Wait for the script in the page to update the contents of the test div");
+    });
 
     // Execute the test in the child tabs with the two methods to open it.
     for (let openFn of [simulateCtrlClick, simulateContextMenuOpenInTab]) {
-      let promiseTabLoaded = waitForSomeTabToLoad();
+      let tabOpenPromise = waitForNewTabEvent(gBrowser);
       openFn(browser);
-      yield promiseTabLoaded;
+      let tab = (yield tabOpenPromise).target;
+      yield promiseTabLoaded(tab);
       gBrowser.selectTabAtIndex(2);
 
       if (waitForMetaRefresh) {
-        yield waitForSomeTabToLoad();
+        yield promiseTabLoaded(tab);
       }
 
       yield testTaskFn();
 
       gBrowser.removeCurrentTab();
     }
   });
 }
@@ -75,31 +83,16 @@ function simulateContextMenuOpenInTab(br
     event.target.hidePopup();
     return true;
   });
   BrowserTestUtils.synthesizeMouseAtCenter("#linkToOpenInNewTab",
                                            { type: "contextmenu", button: 2 },
                                            browser);
 }
 
-// Waits for a load event somewhere in the browser but ignore events coming
-// from <xul:browser>s without a tab assigned. That are most likely browsers
-// that preload the new tab page.
-function waitForSomeTabToLoad() {
-  return new Promise(resolve => {
-    gBrowser.addEventListener("load", function onLoad(event) {
-      let tab = gBrowser._getTabForContentWindow(event.target.defaultView.top);
-      if (tab) {
-        gBrowser.removeEventListener("load", onLoad, true);
-        resolve();
-      }
-    }, true);
-  });
-}
-
 /**
  * Ensure the Mixed Content Blocker is enabled.
  */
 add_task(function* test_initialize() {
   yield new Promise(resolve => SpecialPowers.pushPrefEnv({
     "set": [["security.mixed_content.block_active_content", true]],
   }, resolve));
 });
@@ -115,18 +108,20 @@ add_task(function* test_same_origin() {
                gHttpTestRoot1 + "file_bug906190_2.html", function* () {
     // The doorhanger should appear but activeBlocked should be >> NOT << true,
     // because our decision of disabling the mixed content blocker is persistent
     // across tabs.
     yield assertMixedContentBlockingState(gBrowser, {
       activeLoaded: true, activeBlocked: false, passiveLoaded: false,
     });
 
-    is(content.document.getElementById('mctestdiv').innerHTML,
-       "Mixed Content Blocker disabled", "OK: Executed mixed script");
+    yield ContentTask.spawn(gBrowser.selectedBrowser, null, function* () {
+      is(content.document.getElementById('mctestdiv').innerHTML,
+         "Mixed Content Blocker disabled", "OK: Executed mixed script");
+    });
   });
 });
 
 /**
  * 2. - Load a html page which has mixed content
  *    - Doorhanger to disable protection appears - we disable it
  *    - Load a new page from a different origin in a new tab simulating a click
  *    - Doorhanger >> SHOULD << appear again!
@@ -136,18 +131,20 @@ add_task(function* test_different_origin
                gHttpTestRoot2 + "file_bug906190_2.html", function* () {
     // The doorhanger should appear and activeBlocked should be >> TRUE <<,
     // because our decision of disabling the mixed content blocker should only
     // persist if pages are from the same domain.
     yield assertMixedContentBlockingState(gBrowser, {
       activeLoaded: false, activeBlocked: true, passiveLoaded: false,
     });
 
-    is(content.document.getElementById('mctestdiv').innerHTML,
-       "Mixed Content Blocker enabled", "OK: Blocked mixed script");
+    yield ContentTask.spawn(gBrowser.selectedBrowser, null, function* () {
+      is(content.document.getElementById('mctestdiv').innerHTML,
+         "Mixed Content Blocker enabled", "OK: Blocked mixed script");
+    });
   });
 });
 
 /**
  * 3. - Load a html page which has mixed content
  *    - Doorhanger to disable protection appears - we disable it
  *    - Load a new page from the same origin in a new tab simulating a click
  *    - Redirect to another page from the same origin using meta-refresh
@@ -157,18 +154,20 @@ add_task(function* test_same_origin_meta
   // file_bug906190_3_4.html redirects to page test1.example.com/* using meta-refresh
   yield doTest(gHttpTestRoot1 + "file_bug906190_1.html",
                gHttpTestRoot1 + "file_bug906190_3_4.html", function* () {
     // The doorhanger should appear but activeBlocked should be >> NOT << true!
     yield assertMixedContentBlockingState(gBrowser, {
       activeLoaded: true, activeBlocked: false, passiveLoaded: false,
     });
 
-    is(content.document.getElementById('mctestdiv').innerHTML,
-       "Mixed Content Blocker disabled", "OK: Executed mixed script");
+    yield ContentTask.spawn(gBrowser.selectedBrowser, null, function* () {
+      is(content.document.getElementById('mctestdiv').innerHTML,
+         "Mixed Content Blocker disabled", "OK: Executed mixed script");
+    });
   }, true);
 });
 
 /**
  * 4. - Load a html page which has mixed content
  *    - Doorhanger to disable protection appears - we disable it
  *    - Load a new page from the same origin in a new tab simulating a click
  *    - Redirect to another page from a different origin using meta-refresh
@@ -177,18 +176,20 @@ add_task(function* test_same_origin_meta
 add_task(function* test_same_origin_metarefresh_different_origin() {
   yield doTest(gHttpTestRoot2 + "file_bug906190_1.html",
                gHttpTestRoot2 + "file_bug906190_3_4.html", function* () {
     // The doorhanger should appear and activeBlocked should be >> TRUE <<.
     yield assertMixedContentBlockingState(gBrowser, {
       activeLoaded: false, activeBlocked: true, passiveLoaded: false,
     });
 
-    is(content.document.getElementById('mctestdiv').innerHTML,
-       "Mixed Content Blocker enabled", "OK: Blocked mixed script");
+    yield ContentTask.spawn(gBrowser.selectedBrowser, null, function* () {
+      is(content.document.getElementById('mctestdiv').innerHTML,
+         "Mixed Content Blocker enabled", "OK: Blocked mixed script");
+    });
   }, true);
 });
 
 /**
  * 5. - Load a html page which has mixed content
  *    - Doorhanger to disable protection appears - we disable it
  *    - Load a new page from the same origin in a new tab simulating a click
  *    - Redirect to another page from the same origin using 302 redirect
@@ -220,12 +221,14 @@ add_task(function* test_same_origin_302r
   // the sjs files returns a 302 redirect - note, different origins
   yield doTest(gHttpTestRoot2 + "file_bug906190_1.html",
                gHttpTestRoot2 + "file_bug906190.sjs", function* () {
     // The doorhanger should appear and activeBlocked should be >> TRUE <<.
     yield assertMixedContentBlockingState(gBrowser, {
       activeLoaded: false, activeBlocked: true, passiveLoaded: false,
     });
 
-    is(content.document.getElementById('mctestdiv').innerHTML,
-       "Mixed Content Blocker enabled", "OK: Blocked mixed script");
+    yield ContentTask.spawn(gBrowser.selectedBrowser, null, function* () {
+      is(content.document.getElementById('mctestdiv').innerHTML,
+         "Mixed Content Blocker enabled", "OK: Blocked mixed script");
+    });
   });
 });
