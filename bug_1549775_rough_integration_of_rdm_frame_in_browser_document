# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1557255066 25200
#      Tue May 07 11:51:06 2019 -0700
# Node ID f60f058558881998201b6a454cd9214acf44bb0b
# Parent  f1082516d62f3b8ff6ed1ec44c1e2328bd2a3977
Bug 1549775 - Rough integration of RDM frame in browser document

This is a proof of concept of hooking up the RDM controls into the tabbrowser.
It creates a single shared frame intended to render only the toolbar in RDM,
and then toggles the visibility based on  whether the existing RDM is active.

There's a lot to do here:
- it doesn't actually render the toolbar (need to tease apart the bootstrapping logic in the existing RDM to allow for not swapping, etc)
- it doesn't send the browser's state into the tools.xhtml window in order to sync values between tab changes
- it doesn't replace the existing RDM connection or UI (and even relies on it for tracking visibility)
- it doesn't center the <browser> and provide resize handles for it
- and more, I'm sure

What it does do, hopefully, is provide a starting point for figuring out some unknowns
to help decide if this is a path we want to go (as opposed to adding fission support
to the existing message forwarding, etc that's needed for the current impl).

Differential Revision: https://phabricator.services.mozilla.com/D30241

diff --git a/browser/base/content/browser.xul b/browser/base/content/browser.xul
--- a/browser/base/content/browser.xul
+++ b/browser/base/content/browser.xul
@@ -1326,16 +1326,17 @@
           <toolbarbutton id="sidebar-close" class="close-icon tabbable" tooltiptext="&sidebarCloseButton.tooltip;" oncommand="SidebarUI.hide();"/>
         </sidebarheader>
         <browser id="sidebar" flex="1" autoscroll="false" disablehistory="true" disablefullscreen="true"
                   style="min-width: 14em; width: 18em; max-width: 36em;" tooltip="aHTMLTooltip"/>
       </vbox>
 
       <splitter id="sidebar-splitter" class="chromeclass-extrachrome sidebar-splitter" hidden="true"/>
       <vbox id="appcontent" flex="1">
+        <!-- Responsive design frame will be added here lazily -->
         <!-- gHighPriorityNotificationBox will be added here lazily. -->
         <tabbox id="tabbrowser-tabbox"
                 flex="1" tabcontainer="tabbrowser-tabs">
           <tabpanels id="tabbrowser-tabpanels"
                      flex="1" class="plain" selectedIndex="0"/>
         </tabbox>
       </vbox>
       <vbox id="browser-border-end" hidden="true" layer="true"/>
diff --git a/devtools/client/framework/devtools-browser.js b/devtools/client/framework/devtools-browser.js
--- a/devtools/client/framework/devtools-browser.js
+++ b/devtools/client/framework/devtools-browser.js
@@ -687,16 +687,17 @@ var gDevToolsBrowser = exports.gDevTools
 
     const tabContainer = win.gBrowser.tabContainer;
     tabContainer.removeEventListener("TabSelect", this);
   },
 
   handleEvent(event) {
     switch (event.type) {
       case "TabSelect":
+        ResponsiveUIManager.toggleRDMVisibility(event.target);
         gDevToolsBrowser._updateMenu();
         break;
       case "unload":
         // top-level browser window unload
         gDevToolsBrowser._forgetBrowserWindow(event.target.defaultView);
         break;
     }
   },
diff --git a/devtools/client/jar.mn b/devtools/client/jar.mn
--- a/devtools/client/jar.mn
+++ b/devtools/client/jar.mn
@@ -46,16 +46,17 @@ devtools.jar:
     content/shared/widgets/cubic-bezier.css (shared/widgets/cubic-bezier.css)
     content/shared/widgets/filter-widget.css (shared/widgets/filter-widget.css)
     content/shared/widgets/spectrum.css (shared/widgets/spectrum.css)
     content/aboutdebugging/aboutdebugging.xhtml (aboutdebugging/aboutdebugging.xhtml)
     content/aboutdebugging/aboutdebugging.css (aboutdebugging/aboutdebugging.css)
     content/aboutdebugging-new/index.html (aboutdebugging-new/index.html)
     content/aboutdebugging-new/aboutdebugging.css (aboutdebugging-new/aboutdebugging.css)
     content/responsive.html/index.xhtml (responsive.html/index.xhtml)
+    content/responsive.html/tools.xhtml (responsive.html/tools.xhtml)
     content/dom/index.html (dom/index.html)
     content/dom/main.js (dom/main.js)
     content/accessibility/index.html (accessibility/index.html)
     content/accessibility/main.js (accessibility/main.js)
 %   skin devtools classic/1.0 %skin/
     skin/devtools-browser.css (themes/devtools-browser.css)
     skin/dark-theme.css (themes/dark-theme.css)
     skin/light-theme.css (themes/light-theme.css)
diff --git a/devtools/client/responsive.html/manager.js b/devtools/client/responsive.html/manager.js
--- a/devtools/client/responsive.html/manager.js
+++ b/devtools/client/responsive.html/manager.js
@@ -60,20 +60,31 @@ const ResponsiveUIManager = exports.Resp
    * @return Promise
    *         Resolved when the toggling has completed.  If the UI has opened,
    *         it is resolved to the ResponsiveUI instance for this tab.  If the
    *         the UI has closed, there is no resolution value.
    */
   toggle(window, tab, options = {}) {
     const action = this.isActiveForTab(tab) ? "close" : "open";
     const completed = this[action + "IfNeeded"](window, tab, options);
-    completed.catch(console.error);
+    completed.catch(console.error).then(() => {
+      this.toggleRDMVisibility(window.gBrowser.selectedTab);
+    });
     return completed;
   },
 
+  toggleRDMVisibility(tab) {
+    const doc = tab.ownerDocument;
+    const rdmFrame = doc.querySelector("#rdm-frame");
+    if (rdmFrame) {
+      const isRDMActive = ResponsiveUIManager.isActiveForTab(tab);
+      rdmFrame.hidden = !isRDMActive;
+    }
+  },
+
   /**
    * Opens the responsive UI, if not already open.
    *
    * @param window
    *        The main browser chrome window.
    * @param tab
    *        The browser tab.
    * @param options
@@ -86,16 +97,28 @@ const ResponsiveUIManager = exports.Resp
    *         Resolved to the ResponsiveUI instance for this tab when opening is
    *         complete.
    */
   async openIfNeeded(window, tab, options = {}) {
     if (!tab.linkedBrowser.isRemoteBrowser) {
       await this.showRemoteOnlyNotification(window, tab, options);
       return promise.reject(new Error("RDM only available for remote tabs."));
     }
+
+    const doc = window.document;
+    let rdmFrame = doc.querySelector("#rdm-frame");
+    if (!rdmFrame) {
+      rdmFrame = doc.createElement("iframe");
+      rdmFrame.id = "rdm-frame";
+      rdmFrame.src = "chrome://devtools/content/responsive.html/tools.xhtml";
+      rdmFrame.style.height = rdmFrame.style.minHeight = "30px";
+      doc.querySelector("#appcontent").prepend(rdmFrame);
+      // XXX: wait for load
+    }
+
     if (!this.isActiveForTab(tab)) {
       this.initMenuCheckListenerFor(window);
 
       const ui = new ResponsiveUI(window, tab);
       this.activeTabs.set(tab, ui);
 
       // Explicitly not await on telemetry to avoid delaying RDM opening
       this.recordTelemetryOpen(window, tab, options);
diff --git a/devtools/client/responsive.html/tools.xhtml b/devtools/client/responsive.html/tools.xhtml
new file mode 100644
--- /dev/null
+++ b/devtools/client/responsive.html/tools.xhtml
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- This Source Code Form is subject to the terms of the Mozilla Public
+   - License, v. 2.0. If a copy of the MPL was not distributed with this
+   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
+<!DOCTYPE html>
+<html xmlns="http://www.w3.org/1999/xhtml">
+  <head>
+    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
+    <link rel="stylesheet" type="text/css"
+          href="resource://devtools/client/responsive.html/index.css"/>
+    <script src="chrome://devtools/content/shared/theme-switching.js"></script>
+    <script src="resource://devtools/client/responsive.html/index.js"></script>
+  </head>
+  <body class="theme-toolbar" style="background: red;" role="application">
+    XXX: Bootstrap just the tools here
+  </body>
+</html>
