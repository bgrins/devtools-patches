From 5b1519c847ec8511f5f46d5b9a1edf3a5e4336ee Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Fri, 13 Feb 2015 20:38:32 +0000
Subject: [PATCH 01/38] Make generator functions have a *

---
 browser/devtools/commandline/test/browser_cmd_addon.js            | 2 +-
 browser/devtools/commandline/test/browser_cmd_appcache_invalid.js | 2 +-
 browser/devtools/commandline/test/browser_cmd_appcache_valid.js   | 2 +-
 browser/devtools/commandline/test/browser_cmd_calllog.js          | 2 +-
 browser/devtools/commandline/test/browser_cmd_calllog_chrome.js   | 2 +-
 browser/devtools/commandline/test/browser_cmd_commands.js         | 2 +-
 browser/devtools/commandline/test/browser_cmd_jsb.js              | 2 +-
 browser/devtools/commandline/test/browser_cmd_media.js            | 2 +-
 browser/devtools/commandline/test/browser_cmd_pagemod_export.js   | 2 +-
 browser/devtools/commandline/test/browser_cmd_pref1.js            | 2 +-
 browser/devtools/commandline/test/browser_cmd_pref2.js            | 2 +-
 browser/devtools/commandline/test/browser_cmd_pref3.js            | 2 +-
 browser/devtools/commandline/test/browser_cmd_screenshot.js       | 2 +-
 browser/devtools/commandline/test/browser_cmd_settings.js         | 2 +-
 browser/devtools/commandline/test/browser_gcli_async.js           | 2 +-
 browser/devtools/commandline/test/browser_gcli_canon.js           | 2 +-
 browser/devtools/commandline/test/browser_gcli_cli1.js            | 2 +-
 browser/devtools/commandline/test/browser_gcli_cli2.js            | 2 +-
 browser/devtools/commandline/test/browser_gcli_completion1.js     | 2 +-
 browser/devtools/commandline/test/browser_gcli_completion2.js     | 2 +-
 browser/devtools/commandline/test/browser_gcli_context.js         | 2 +-
 browser/devtools/commandline/test/browser_gcli_date.js            | 2 +-
 browser/devtools/commandline/test/browser_gcli_exec.js            | 2 +-
 browser/devtools/commandline/test/browser_gcli_fail.js            | 2 +-
 browser/devtools/commandline/test/browser_gcli_file.js            | 2 +-
 browser/devtools/commandline/test/browser_gcli_fileparser.js      | 2 +-
 browser/devtools/commandline/test/browser_gcli_filesystem.js      | 2 +-
 browser/devtools/commandline/test/browser_gcli_focus.js           | 2 +-
 browser/devtools/commandline/test/browser_gcli_history.js         | 2 +-
 browser/devtools/commandline/test/browser_gcli_incomplete.js      | 2 +-
 browser/devtools/commandline/test/browser_gcli_inputter.js        | 2 +-
 browser/devtools/commandline/test/browser_gcli_intro.js           | 2 +-
 browser/devtools/commandline/test/browser_gcli_js.js              | 2 +-
 browser/devtools/commandline/test/browser_gcli_keyboard1.js       | 2 +-
 browser/devtools/commandline/test/browser_gcli_keyboard2.js       | 2 +-
 browser/devtools/commandline/test/browser_gcli_keyboard3.js       | 2 +-
 browser/devtools/commandline/test/browser_gcli_keyboard4.js       | 2 +-
 browser/devtools/commandline/test/browser_gcli_keyboard5.js       | 2 +-
 browser/devtools/commandline/test/browser_gcli_keyboard6.js       | 2 +-
 browser/devtools/commandline/test/browser_gcli_menu.js            | 2 +-
 browser/devtools/commandline/test/browser_gcli_node.js            | 2 +-
 browser/devtools/commandline/test/browser_gcli_pref1.js           | 2 +-
 browser/devtools/commandline/test/browser_gcli_pref2.js           | 2 +-
 browser/devtools/commandline/test/browser_gcli_remotews.js        | 2 +-
 browser/devtools/commandline/test/browser_gcli_remotexhr.js       | 2 +-
 browser/devtools/commandline/test/browser_gcli_resource.js        | 2 +-
 browser/devtools/commandline/test/browser_gcli_short.js           | 2 +-
 browser/devtools/commandline/test/browser_gcli_spell.js           | 2 +-
 browser/devtools/commandline/test/browser_gcli_split.js           | 2 +-
 browser/devtools/commandline/test/browser_gcli_string.js          | 2 +-
 browser/devtools/commandline/test/browser_gcli_tokenize.js        | 2 +-
 browser/devtools/commandline/test/browser_gcli_tooltip.js         | 2 +-
 browser/devtools/commandline/test/browser_gcli_types.js           | 2 +-
 browser/devtools/commandline/test/browser_gcli_union.js           | 2 +-
 browser/devtools/commandline/test/browser_gcli_url.js             | 2 +-
 toolkit/devtools/gcli/commands/screenshot.js                      | 2 +-
 56 files changed, 56 insertions(+), 56 deletions(-)

diff --git a/browser/devtools/commandline/test/browser_cmd_addon.js b/browser/devtools/commandline/test/browser_cmd_addon.js
index 14fb93e..cd07c9e 100644
--- a/browser/devtools/commandline/test/browser_cmd_addon.js
+++ b/browser/devtools/commandline/test/browser_cmd_addon.js
@@ -7,7 +7,7 @@ function test() {
   return Task.spawn(spawnTest).then(finish, helpers.handleError);
 }
 
-function spawnTest() {
+function* spawnTest() {
   let options = yield helpers.openTab("about:blank");
   yield helpers.openToolbar(options);
 
diff --git a/browser/devtools/commandline/test/browser_cmd_appcache_invalid.js b/browser/devtools/commandline/test/browser_cmd_appcache_invalid.js
index 15cade6..d0e0a7f 100644
--- a/browser/devtools/commandline/test/browser_cmd_appcache_invalid.js
+++ b/browser/devtools/commandline/test/browser_cmd_appcache_invalid.js
@@ -11,7 +11,7 @@ function test() {
   return Task.spawn(spawnTest).then(finish, helpers.handleError);
 }
 
-function spawnTest() {
+function* spawnTest() {
   let lines = [
     'Manifest has a character encoding of ISO-8859-1. Manifests must have the ' +
       'utf-8 character encoding.',
diff --git a/browser/devtools/commandline/test/browser_cmd_appcache_valid.js b/browser/devtools/commandline/test/browser_cmd_appcache_valid.js
index e9a11ea..6643f93 100644
--- a/browser/devtools/commandline/test/browser_cmd_appcache_valid.js
+++ b/browser/devtools/commandline/test/browser_cmd_appcache_valid.js
@@ -10,7 +10,7 @@ function test() {
   return Task.spawn(spawnTest).then(finish, helpers.handleError);
 }
 
-function spawnTest() {
+function* spawnTest() {
   let options = yield helpers.openTab(TEST_URI);
   yield helpers.openToolbar(options);
 
diff --git a/browser/devtools/commandline/test/browser_cmd_calllog.js b/browser/devtools/commandline/test/browser_cmd_calllog.js
index 2ca225e..85a7e37 100644
--- a/browser/devtools/commandline/test/browser_cmd_calllog.js
+++ b/browser/devtools/commandline/test/browser_cmd_calllog.js
@@ -8,7 +8,7 @@ const TEST_URI = "data:text/html;charset=utf-8,gcli-calllog";
 let tests = {};
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
 
diff --git a/browser/devtools/commandline/test/browser_cmd_calllog_chrome.js b/browser/devtools/commandline/test/browser_cmd_calllog_chrome.js
index 1bc9d61..066588f 100644
--- a/browser/devtools/commandline/test/browser_cmd_calllog_chrome.js
+++ b/browser/devtools/commandline/test/browser_cmd_calllog_chrome.js
@@ -8,7 +8,7 @@ const TEST_URI = "data:text/html;charset=utf-8,cmd-calllog-chrome";
 let tests = {};
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
 
diff --git a/browser/devtools/commandline/test/browser_cmd_commands.js b/browser/devtools/commandline/test/browser_cmd_commands.js
index 78dc0a4..83c219a 100644
--- a/browser/devtools/commandline/test/browser_cmd_commands.js
+++ b/browser/devtools/commandline/test/browser_cmd_commands.js
@@ -9,7 +9,7 @@ function test() {
   return Task.spawn(spawnTest).then(finish, helpers.handleError);
 }
 
-function spawnTest() {
+function* spawnTest() {
   let options = yield helpers.openTab(TEST_URI);
   yield helpers.openToolbar(options);
 
diff --git a/browser/devtools/commandline/test/browser_cmd_jsb.js b/browser/devtools/commandline/test/browser_cmd_jsb.js
index cf2a9da..16fe902 100644
--- a/browser/devtools/commandline/test/browser_cmd_jsb.js
+++ b/browser/devtools/commandline/test/browser_cmd_jsb.js
@@ -10,7 +10,7 @@ function test() {
   return Task.spawn(testTask).then(finish, helpers.handleError);
 }
 
-function testTask() {
+function* testTask() {
   let options = yield helpers.openTab("about:blank");
   yield helpers.openToolbar(options);
 
diff --git a/browser/devtools/commandline/test/browser_cmd_media.js b/browser/devtools/commandline/test/browser_cmd_media.js
index 41973c3..c4bb3fe 100644
--- a/browser/devtools/commandline/test/browser_cmd_media.js
+++ b/browser/devtools/commandline/test/browser_cmd_media.js
@@ -74,7 +74,7 @@ let tests = {
 };
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
 
diff --git a/browser/devtools/commandline/test/browser_cmd_pagemod_export.js b/browser/devtools/commandline/test/browser_cmd_pagemod_export.js
index c405a29..31e477c 100644
--- a/browser/devtools/commandline/test/browser_cmd_pagemod_export.js
+++ b/browser/devtools/commandline/test/browser_cmd_pagemod_export.js
@@ -10,7 +10,7 @@ function test() {
   return Task.spawn(spawnTest).then(finish, helpers.handleError);
 }
 
-function spawnTest() {
+function* spawnTest() {
   let options = yield helpers.openTab(TEST_URI);
   yield helpers.openToolbar(options);
 
diff --git a/browser/devtools/commandline/test/browser_cmd_pref1.js b/browser/devtools/commandline/test/browser_cmd_pref1.js
index 4e2aa41..0c059ee 100644
--- a/browser/devtools/commandline/test/browser_cmd_pref1.js
+++ b/browser/devtools/commandline/test/browser_cmd_pref1.js
@@ -13,7 +13,7 @@ function test() {
   return Task.spawn(spawnTest).then(finish, helpers.handleError);
 }
 
-function spawnTest() {
+function* spawnTest() {
   let options = yield helpers.openTab(TEST_URI);
   yield helpers.openToolbar(options);
 
diff --git a/browser/devtools/commandline/test/browser_cmd_pref2.js b/browser/devtools/commandline/test/browser_cmd_pref2.js
index 74ed916..64dafbf 100644
--- a/browser/devtools/commandline/test/browser_cmd_pref2.js
+++ b/browser/devtools/commandline/test/browser_cmd_pref2.js
@@ -13,7 +13,7 @@ function test() {
   return Task.spawn(spawnTest).then(finish, helpers.handleError);
 }
 
-function spawnTest() {
+function* spawnTest() {
   let options = yield helpers.openTab(TEST_URI);
   yield helpers.openToolbar(options);
 
diff --git a/browser/devtools/commandline/test/browser_cmd_pref3.js b/browser/devtools/commandline/test/browser_cmd_pref3.js
index fea31d9..073eb92 100644
--- a/browser/devtools/commandline/test/browser_cmd_pref3.js
+++ b/browser/devtools/commandline/test/browser_cmd_pref3.js
@@ -16,7 +16,7 @@ function test() {
   return Task.spawn(spawnTest).then(finish, helpers.handleError);
 }
 
-function spawnTest() {
+function* spawnTest() {
   let options = yield helpers.openTab(TEST_URI);
   yield helpers.openToolbar(options);
 
diff --git a/browser/devtools/commandline/test/browser_cmd_screenshot.js b/browser/devtools/commandline/test/browser_cmd_screenshot.js
index 437daa9..73727bf 100644
--- a/browser/devtools/commandline/test/browser_cmd_screenshot.js
+++ b/browser/devtools/commandline/test/browser_cmd_screenshot.js
@@ -11,7 +11,7 @@ function test() {
   return Task.spawn(spawnTest).then(finish, helpers.handleError);
 }
 
-function spawnTest() {
+function* spawnTest() {
   waitForExplicitFinish();
 
   info("RUN TEST: non-private window");
diff --git a/browser/devtools/commandline/test/browser_cmd_settings.js b/browser/devtools/commandline/test/browser_cmd_settings.js
index 8b4e272..46196e6 100644
--- a/browser/devtools/commandline/test/browser_cmd_settings.js
+++ b/browser/devtools/commandline/test/browser_cmd_settings.js
@@ -16,7 +16,7 @@ function test() {
   return Task.spawn(spawnTest).then(finish, helpers.handleError);
 }
 
-function spawnTest() {
+function* spawnTest() {
   // Setup
   let options = yield helpers.openTab(TEST_URI);
 
diff --git a/browser/devtools/commandline/test/browser_gcli_async.js b/browser/devtools/commandline/test/browser_gcli_async.js
index 590bb2c..9abae93 100644
--- a/browser/devtools/commandline/test/browser_gcli_async.js
+++ b/browser/devtools/commandline/test/browser_gcli_async.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testAsync.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_canon.js b/browser/devtools/commandline/test/browser_gcli_canon.js
index 613e5b2..e524e40 100644
--- a/browser/devtools/commandline/test/browser_gcli_canon.js
+++ b/browser/devtools/commandline/test/browser_gcli_canon.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testCanon.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_cli1.js b/browser/devtools/commandline/test/browser_gcli_cli1.js
index cb4d52e7..41ae6a2 100644
--- a/browser/devtools/commandline/test/browser_gcli_cli1.js
+++ b/browser/devtools/commandline/test/browser_gcli_cli1.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testCli1.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_cli2.js b/browser/devtools/commandline/test/browser_gcli_cli2.js
index f1a0a9e..ffc8e6c 100644
--- a/browser/devtools/commandline/test/browser_gcli_cli2.js
+++ b/browser/devtools/commandline/test/browser_gcli_cli2.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testCli2.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_completion1.js b/browser/devtools/commandline/test/browser_gcli_completion1.js
index 0df7962..2ed6c69 100644
--- a/browser/devtools/commandline/test/browser_gcli_completion1.js
+++ b/browser/devtools/commandline/test/browser_gcli_completion1.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testCompletion1.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_completion2.js b/browser/devtools/commandline/test/browser_gcli_completion2.js
index b27b8e7..3b90c8d 100644
--- a/browser/devtools/commandline/test/browser_gcli_completion2.js
+++ b/browser/devtools/commandline/test/browser_gcli_completion2.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testCompletion2.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_context.js b/browser/devtools/commandline/test/browser_gcli_context.js
index 1aed285..1d835da 100644
--- a/browser/devtools/commandline/test/browser_gcli_context.js
+++ b/browser/devtools/commandline/test/browser_gcli_context.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testContext.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_date.js b/browser/devtools/commandline/test/browser_gcli_date.js
index 352679c..36f7cf0 100644
--- a/browser/devtools/commandline/test/browser_gcli_date.js
+++ b/browser/devtools/commandline/test/browser_gcli_date.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testDate.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_exec.js b/browser/devtools/commandline/test/browser_gcli_exec.js
index 0b1f47d..3f5a8b1 100644
--- a/browser/devtools/commandline/test/browser_gcli_exec.js
+++ b/browser/devtools/commandline/test/browser_gcli_exec.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testExec.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_fail.js b/browser/devtools/commandline/test/browser_gcli_fail.js
index c0b94f49..71de5c9 100644
--- a/browser/devtools/commandline/test/browser_gcli_fail.js
+++ b/browser/devtools/commandline/test/browser_gcli_fail.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testFail.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_file.js b/browser/devtools/commandline/test/browser_gcli_file.js
index 1317d9c..8f746ae 100644
--- a/browser/devtools/commandline/test/browser_gcli_file.js
+++ b/browser/devtools/commandline/test/browser_gcli_file.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testFile.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_fileparser.js b/browser/devtools/commandline/test/browser_gcli_fileparser.js
index 219b793a..2d3b927 100644
--- a/browser/devtools/commandline/test/browser_gcli_fileparser.js
+++ b/browser/devtools/commandline/test/browser_gcli_fileparser.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testFileparser.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_filesystem.js b/browser/devtools/commandline/test/browser_gcli_filesystem.js
index 23c8dda..72ab21f 100644
--- a/browser/devtools/commandline/test/browser_gcli_filesystem.js
+++ b/browser/devtools/commandline/test/browser_gcli_filesystem.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testFilesystem.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_focus.js b/browser/devtools/commandline/test/browser_gcli_focus.js
index 48def81..f4e0e21 100644
--- a/browser/devtools/commandline/test/browser_gcli_focus.js
+++ b/browser/devtools/commandline/test/browser_gcli_focus.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testFocus.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_history.js b/browser/devtools/commandline/test/browser_gcli_history.js
index 590353c..f938422 100644
--- a/browser/devtools/commandline/test/browser_gcli_history.js
+++ b/browser/devtools/commandline/test/browser_gcli_history.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testHistory.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_incomplete.js b/browser/devtools/commandline/test/browser_gcli_incomplete.js
index c443bbd..d9622f1 100644
--- a/browser/devtools/commandline/test/browser_gcli_incomplete.js
+++ b/browser/devtools/commandline/test/browser_gcli_incomplete.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testIncomplete.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_inputter.js b/browser/devtools/commandline/test/browser_gcli_inputter.js
index e8d1c21..c142866 100644
--- a/browser/devtools/commandline/test/browser_gcli_inputter.js
+++ b/browser/devtools/commandline/test/browser_gcli_inputter.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testInputter.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_intro.js b/browser/devtools/commandline/test/browser_gcli_intro.js
index 263000e..7917071 100644
--- a/browser/devtools/commandline/test/browser_gcli_intro.js
+++ b/browser/devtools/commandline/test/browser_gcli_intro.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testIntro.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_js.js b/browser/devtools/commandline/test/browser_gcli_js.js
index 4128c46..3508872 100644
--- a/browser/devtools/commandline/test/browser_gcli_js.js
+++ b/browser/devtools/commandline/test/browser_gcli_js.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testJs.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_keyboard1.js b/browser/devtools/commandline/test/browser_gcli_keyboard1.js
index 0de7794..d016d89 100644
--- a/browser/devtools/commandline/test/browser_gcli_keyboard1.js
+++ b/browser/devtools/commandline/test/browser_gcli_keyboard1.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testKeyboard1.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_keyboard2.js b/browser/devtools/commandline/test/browser_gcli_keyboard2.js
index 7f510f08..20509c5 100644
--- a/browser/devtools/commandline/test/browser_gcli_keyboard2.js
+++ b/browser/devtools/commandline/test/browser_gcli_keyboard2.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testKeyboard2.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_keyboard3.js b/browser/devtools/commandline/test/browser_gcli_keyboard3.js
index c1bfc15..09bfc5b 100644
--- a/browser/devtools/commandline/test/browser_gcli_keyboard3.js
+++ b/browser/devtools/commandline/test/browser_gcli_keyboard3.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testKeyboard3.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_keyboard4.js b/browser/devtools/commandline/test/browser_gcli_keyboard4.js
index 5a358f4..6431151 100644
--- a/browser/devtools/commandline/test/browser_gcli_keyboard4.js
+++ b/browser/devtools/commandline/test/browser_gcli_keyboard4.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testKeyboard4.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_keyboard5.js b/browser/devtools/commandline/test/browser_gcli_keyboard5.js
index 41e36a4..a4c5110 100644
--- a/browser/devtools/commandline/test/browser_gcli_keyboard5.js
+++ b/browser/devtools/commandline/test/browser_gcli_keyboard5.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testKeyboard5.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_keyboard6.js b/browser/devtools/commandline/test/browser_gcli_keyboard6.js
index d53a855..6e878e1 100644
--- a/browser/devtools/commandline/test/browser_gcli_keyboard6.js
+++ b/browser/devtools/commandline/test/browser_gcli_keyboard6.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testKeyboard6.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_menu.js b/browser/devtools/commandline/test/browser_gcli_menu.js
index 8e3eb16..f03a24e 100644
--- a/browser/devtools/commandline/test/browser_gcli_menu.js
+++ b/browser/devtools/commandline/test/browser_gcli_menu.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testMenu.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_node.js b/browser/devtools/commandline/test/browser_gcli_node.js
index 7be07ba..934f217 100644
--- a/browser/devtools/commandline/test/browser_gcli_node.js
+++ b/browser/devtools/commandline/test/browser_gcli_node.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testNode.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_pref1.js b/browser/devtools/commandline/test/browser_gcli_pref1.js
index ee9c51d..629dd63 100644
--- a/browser/devtools/commandline/test/browser_gcli_pref1.js
+++ b/browser/devtools/commandline/test/browser_gcli_pref1.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testPref1.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_pref2.js b/browser/devtools/commandline/test/browser_gcli_pref2.js
index 0192830..0fd5922 100644
--- a/browser/devtools/commandline/test/browser_gcli_pref2.js
+++ b/browser/devtools/commandline/test/browser_gcli_pref2.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testPref2.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_remotews.js b/browser/devtools/commandline/test/browser_gcli_remotews.js
index 7b9237e..bbc9bef 100644
--- a/browser/devtools/commandline/test/browser_gcli_remotews.js
+++ b/browser/devtools/commandline/test/browser_gcli_remotews.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testRemoteWs.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_remotexhr.js b/browser/devtools/commandline/test/browser_gcli_remotexhr.js
index b89b9d5..a635202 100644
--- a/browser/devtools/commandline/test/browser_gcli_remotexhr.js
+++ b/browser/devtools/commandline/test/browser_gcli_remotexhr.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testRemoteXhr.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_resource.js b/browser/devtools/commandline/test/browser_gcli_resource.js
index 2a23253..eeae607 100644
--- a/browser/devtools/commandline/test/browser_gcli_resource.js
+++ b/browser/devtools/commandline/test/browser_gcli_resource.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testResource.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_short.js b/browser/devtools/commandline/test/browser_gcli_short.js
index 812d6ef..3b5bcae 100644
--- a/browser/devtools/commandline/test/browser_gcli_short.js
+++ b/browser/devtools/commandline/test/browser_gcli_short.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testShort.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_spell.js b/browser/devtools/commandline/test/browser_gcli_spell.js
index bcd130f..cb4a741 100644
--- a/browser/devtools/commandline/test/browser_gcli_spell.js
+++ b/browser/devtools/commandline/test/browser_gcli_spell.js
@@ -24,7 +24,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testSpell.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_split.js b/browser/devtools/commandline/test/browser_gcli_split.js
index 5e32cbf..000afae 100644
--- a/browser/devtools/commandline/test/browser_gcli_split.js
+++ b/browser/devtools/commandline/test/browser_gcli_split.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testSplit.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_string.js b/browser/devtools/commandline/test/browser_gcli_string.js
index 5f992df..bc30e99 100644
--- a/browser/devtools/commandline/test/browser_gcli_string.js
+++ b/browser/devtools/commandline/test/browser_gcli_string.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testString.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_tokenize.js b/browser/devtools/commandline/test/browser_gcli_tokenize.js
index dae64af..5a833c5 100644
--- a/browser/devtools/commandline/test/browser_gcli_tokenize.js
+++ b/browser/devtools/commandline/test/browser_gcli_tokenize.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testTokenize.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_tooltip.js b/browser/devtools/commandline/test/browser_gcli_tooltip.js
index 10aa558..434c5b5 100644
--- a/browser/devtools/commandline/test/browser_gcli_tooltip.js
+++ b/browser/devtools/commandline/test/browser_gcli_tooltip.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testTooltip.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_types.js b/browser/devtools/commandline/test/browser_gcli_types.js
index 01c11c3..3b95dea 100644
--- a/browser/devtools/commandline/test/browser_gcli_types.js
+++ b/browser/devtools/commandline/test/browser_gcli_types.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testTypes.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_union.js b/browser/devtools/commandline/test/browser_gcli_union.js
index 9f3dd08..a9ed03b 100644
--- a/browser/devtools/commandline/test/browser_gcli_union.js
+++ b/browser/devtools/commandline/test/browser_gcli_union.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testUnion.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/browser/devtools/commandline/test/browser_gcli_url.js b/browser/devtools/commandline/test/browser_gcli_url.js
index 1fec41e..af3c319 100644
--- a/browser/devtools/commandline/test/browser_gcli_url.js
+++ b/browser/devtools/commandline/test/browser_gcli_url.js
@@ -25,7 +25,7 @@ var exports = {};
 var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testUrl.js</p>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
     gcli.addItems(mockCommands.items);
diff --git a/toolkit/devtools/gcli/commands/screenshot.js b/toolkit/devtools/gcli/commands/screenshot.js
index 202f69d..4a279ae 100644
--- a/toolkit/devtools/gcli/commands/screenshot.js
+++ b/toolkit/devtools/gcli/commands/screenshot.js
@@ -98,7 +98,7 @@ exports.items = [
                              args.fullpage, args.selector);
     },
     grabScreen: function(document, filename, clipboard, fullpage, node) {
-      return Task.spawn(function() {
+      return Task.spawn(function*() {
         let window = document.defaultView;
         let canvas = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
         let left = 0;

From 893afc33b741b6a20cca184330960cb0514f9d0c Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Thu, 29 Jan 2015 18:07:11 +0000
Subject: [PATCH 02/38] Use l10n module for l10n rather than gcli

Initially GCLI had a couple of helper function (lookup and lookupFormat)
for l10n, but this is bad for 2 (related) reasons: It's a failure to
separate concerns, and practically it means GCLI is loaded more eagerly
than it needs to be.

This change uses a separate l10n module.

Signed-off-by: Joe Walker <jwalker@mozilla.com>
---
 browser/devtools/debugger/debugger-commands.js     | 78 +++++++++++-----------
 browser/devtools/eyedropper/commands.js            |  8 +--
 browser/devtools/inspector/inspector-commands.js   | 10 +--
 .../devtools/responsivedesign/resize-commands.js   | 24 +++----
 browser/devtools/scratchpad/scratchpad-commands.js |  4 +-
 .../devtools/styleeditor/styleeditor-commands.js   | 10 +--
 browser/devtools/tilt/tilt-commands.js             | 70 +++++++++----------
 browser/devtools/webconsole/console-commands.js    | 14 ++--
 toolkit/devtools/gcli/commands/addon.js            | 36 +++++-----
 toolkit/devtools/gcli/commands/appcache.js         | 46 ++++++-------
 toolkit/devtools/gcli/commands/calllog.js          | 41 ++++++------
 toolkit/devtools/gcli/commands/cmd.js              | 15 +++--
 toolkit/devtools/gcli/commands/cookie.js           | 58 ++++++++--------
 toolkit/devtools/gcli/commands/folder.js           | 16 ++---
 toolkit/devtools/gcli/commands/highlight.js        | 42 ++++++------
 toolkit/devtools/gcli/commands/inject.js           | 12 ++--
 toolkit/devtools/gcli/commands/jsb.js              | 38 +++++------
 toolkit/devtools/gcli/commands/listen.js           | 14 ++--
 toolkit/devtools/gcli/commands/media.js            | 12 ++--
 toolkit/devtools/gcli/commands/pagemod.js          | 54 +++++++--------
 toolkit/devtools/gcli/commands/paintflashing.js    | 21 +++---
 toolkit/devtools/gcli/commands/restart.js          | 10 +--
 toolkit/devtools/gcli/commands/screenshot.js       | 46 ++++++-------
 toolkit/devtools/gcli/commands/tools.js            | 25 +++----
 .../devtools/gcli/source/docs/writing-commands.md  |  3 +-
 .../gcli/source/lib/gcli/commands/commands.js      |  2 -
 toolkit/devtools/gcli/source/lib/gcli/index.js     | 41 ------------
 27 files changed, 356 insertions(+), 394 deletions(-)

diff --git a/browser/devtools/debugger/debugger-commands.js b/browser/devtools/debugger/debugger-commands.js
index 72824c4..1a6feb2 100644
--- a/browser/devtools/debugger/debugger-commands.js
+++ b/browser/devtools/debugger/debugger-commands.js
@@ -5,7 +5,7 @@
 "use strict";
 
 const { Cc, Ci, Cu } = require("chrome");
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 
 loader.lazyImporter(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm");
 
@@ -67,8 +67,8 @@ function getAllSources(dbg) {
  */
 exports.items.push({
   name: "break",
-  description: gcli.lookup("breakDesc"),
-  manual: gcli.lookup("breakManual")
+  description: l10n.lookup("breakDesc"),
+  manual: l10n.lookup("breakManual")
 });
 
 /**
@@ -76,7 +76,7 @@ exports.items.push({
  */
 exports.items.push({
   name: "break list",
-  description: gcli.lookup("breaklistDesc"),
+  description: l10n.lookup("breaklistDesc"),
   returnType: "breakpoints",
   exec: function(args, context) {
     let dbg = getPanel(context, "jsdebugger", { ensureOpened: true });
@@ -102,7 +102,7 @@ exports.items.push({
     } else {
       return context.createView({
         html: "<p>${message}</p>",
-        data: { message: gcli.lookup("breaklistNone") }
+        data: { message: l10n.lookup("breaklistNone") }
       });
     }
   }
@@ -126,7 +126,7 @@ var breakListHtml = "" +
       "            data-command='break del ${breakpoint.label}'" +
       "            onclick='${onclick}'" +
       "            ondblclick='${ondblclick}'>" +
-      "        " + gcli.lookup("breaklistOutRemove") + "</span>" +
+      "        " + l10n.lookup("breaklistOutRemove") + "</span>" +
       "    </td>" +
       "  </tr>" +
       " </tbody>" +
@@ -141,8 +141,8 @@ var MAX_LABEL_LENGTH = 20;
  */
 exports.items.push({
   name: "break add",
-  description: gcli.lookup("breakaddDesc"),
-  manual: gcli.lookup("breakaddManual")
+  description: l10n.lookup("breakaddDesc"),
+  manual: l10n.lookup("breakaddManual")
 });
 
 /**
@@ -150,7 +150,7 @@ exports.items.push({
  */
 exports.items.push({
   name: "break add line",
-  description: gcli.lookup("breakaddlineDesc"),
+  description: l10n.lookup("breakaddlineDesc"),
   params: [
     {
       name: "file",
@@ -160,19 +160,19 @@ exports.items.push({
           return getAllSources(getPanel(context, "jsdebugger"));
         }
       },
-      description: gcli.lookup("breakaddlineFileDesc")
+      description: l10n.lookup("breakaddlineFileDesc")
     },
     {
       name: "line",
       type: { name: "number", min: 1, step: 10 },
-      description: gcli.lookup("breakaddlineLineDesc")
+      description: l10n.lookup("breakaddlineLineDesc")
     }
   ],
   returnType: "string",
   exec: function(args, context) {
     let dbg = getPanel(context, "jsdebugger");
     if (!dbg) {
-      return gcli.lookup("debuggerStopped");
+      return l10n.lookup("debuggerStopped");
     }
 
     let deferred = context.defer();
@@ -182,9 +182,9 @@ exports.items.push({
     let position = { actor: item.value, line: args.line };
 
     dbg.addBreakpoint(position).then(() => {
-      deferred.resolve(gcli.lookup("breakaddAdded"));
+      deferred.resolve(l10n.lookup("breakaddAdded"));
     }, aError => {
-      deferred.resolve(gcli.lookupFormat("breakaddFailed", [aError]));
+      deferred.resolve(l10n.lookupFormat("breakaddFailed", [aError]));
     });
 
     return deferred.promise;
@@ -196,7 +196,7 @@ exports.items.push({
  */
 exports.items.push({
   name: "break del",
-  description: gcli.lookup("breakdelDesc"),
+  description: l10n.lookup("breakdelDesc"),
   params: [
     {
       name: "breakpoint",
@@ -214,14 +214,14 @@ exports.items.push({
           }));
         }
       },
-      description: gcli.lookup("breakdelBreakidDesc")
+      description: l10n.lookup("breakdelBreakidDesc")
     }
   ],
   returnType: "string",
   exec: function(args, context) {
     let dbg = getPanel(context, "jsdebugger");
     if (!dbg) {
-      return gcli.lookup("debuggerStopped");
+      return l10n.lookup("debuggerStopped");
     }
 
     let source = dbg._view.Sources.getItemForAttachment(a => {
@@ -233,9 +233,9 @@ exports.items.push({
                      line: args.breakpoint.lineNumber };
 
     dbg.removeBreakpoint(position).then(() => {
-      deferred.resolve(gcli.lookup("breakdelRemoved"));
+      deferred.resolve(l10n.lookup("breakdelRemoved"));
     }, () => {
-      deferred.resolve(gcli.lookup("breakNotFound"));
+      deferred.resolve(l10n.lookup("breakNotFound"));
     });
 
     return deferred.promise;
@@ -247,8 +247,8 @@ exports.items.push({
  */
 exports.items.push({
   name: "dbg",
-  description: gcli.lookup("dbgDesc"),
-  manual: gcli.lookup("dbgManual")
+  description: l10n.lookup("dbgDesc"),
+  manual: l10n.lookup("dbgManual")
 });
 
 /**
@@ -256,7 +256,7 @@ exports.items.push({
  */
 exports.items.push({
   name: "dbg open",
-  description: gcli.lookup("dbgOpen"),
+  description: l10n.lookup("dbgOpen"),
   params: [],
   exec: function(args, context) {
     let target = context.environment.target;
@@ -269,7 +269,7 @@ exports.items.push({
  */
 exports.items.push({
   name: "dbg close",
-  description: gcli.lookup("dbgClose"),
+  description: l10n.lookup("dbgClose"),
   params: [],
   exec: function(args, context) {
     if (!getPanel(context, "jsdebugger")) {
@@ -285,12 +285,12 @@ exports.items.push({
  */
 exports.items.push({
   name: "dbg interrupt",
-  description: gcli.lookup("dbgInterrupt"),
+  description: l10n.lookup("dbgInterrupt"),
   params: [],
   exec: function(args, context) {
     let dbg = getPanel(context, "jsdebugger");
     if (!dbg) {
-      return gcli.lookup("debuggerStopped");
+      return l10n.lookup("debuggerStopped");
     }
 
     let controller = dbg._controller;
@@ -306,12 +306,12 @@ exports.items.push({
  */
 exports.items.push({
   name: "dbg continue",
-  description: gcli.lookup("dbgContinue"),
+  description: l10n.lookup("dbgContinue"),
   params: [],
   exec: function(args, context) {
     let dbg = getPanel(context, "jsdebugger");
     if (!dbg) {
-      return gcli.lookup("debuggerStopped");
+      return l10n.lookup("debuggerStopped");
     }
 
     let controller = dbg._controller;
@@ -327,8 +327,8 @@ exports.items.push({
  */
 exports.items.push({
   name: "dbg step",
-  description: gcli.lookup("dbgStepDesc"),
-  manual: gcli.lookup("dbgStepManual")
+  description: l10n.lookup("dbgStepDesc"),
+  manual: l10n.lookup("dbgStepManual")
 });
 
 /**
@@ -336,12 +336,12 @@ exports.items.push({
  */
 exports.items.push({
   name: "dbg step over",
-  description: gcli.lookup("dbgStepOverDesc"),
+  description: l10n.lookup("dbgStepOverDesc"),
   params: [],
   exec: function(args, context) {
     let dbg = getPanel(context, "jsdebugger");
     if (!dbg) {
-      return gcli.lookup("debuggerStopped");
+      return l10n.lookup("debuggerStopped");
     }
 
     let controller = dbg._controller;
@@ -357,12 +357,12 @@ exports.items.push({
  */
 exports.items.push({
   name: 'dbg step in',
-  description: gcli.lookup("dbgStepInDesc"),
+  description: l10n.lookup("dbgStepInDesc"),
   params: [],
   exec: function(args, context) {
     let dbg = getPanel(context, "jsdebugger");
     if (!dbg) {
-      return gcli.lookup("debuggerStopped");
+      return l10n.lookup("debuggerStopped");
     }
 
     let controller = dbg._controller;
@@ -378,12 +378,12 @@ exports.items.push({
  */
 exports.items.push({
   name: 'dbg step out',
-  description: gcli.lookup("dbgStepOutDesc"),
+  description: l10n.lookup("dbgStepOutDesc"),
   params: [],
   exec: function(args, context) {
     let dbg = getPanel(context, "jsdebugger");
     if (!dbg) {
-      return gcli.lookup("debuggerStopped");
+      return l10n.lookup("debuggerStopped");
     }
 
     let controller = dbg._controller;
@@ -399,13 +399,13 @@ exports.items.push({
  */
 exports.items.push({
   name: "dbg list",
-  description: gcli.lookup("dbgListSourcesDesc"),
+  description: l10n.lookup("dbgListSourcesDesc"),
   params: [],
   returnType: "dom",
   exec: function(args, context) {
     let dbg = getPanel(context, "jsdebugger");
     if (!dbg) {
-      return gcli.lookup("debuggerClosed");
+      return l10n.lookup("debuggerClosed");
     }
 
     let sources = getAllSources(dbg);
@@ -440,7 +440,7 @@ exports.items.push({
   }
 ].forEach(function(cmd) {
   const lookup = function(id) {
-    return gcli.lookup(cmd.l10nPrefix + id);
+    return l10n.lookup(cmd.l10nPrefix + id);
   };
 
   exports.items.push({
@@ -475,7 +475,7 @@ exports.items.push({
       const dbg = getPanel(context, "jsdebugger");
       const doc = context.environment.chromeDocument;
       if (!dbg) {
-        throw new Error(gcli.lookup("debuggerClosed"));
+        throw new Error(l10n.lookup("debuggerClosed"));
       }
 
       const { promise, resolve, reject } = context.defer();
diff --git a/browser/devtools/eyedropper/commands.js b/browser/devtools/eyedropper/commands.js
index 7b8ac206..7d0c29a 100644
--- a/browser/devtools/eyedropper/commands.js
+++ b/browser/devtools/eyedropper/commands.js
@@ -2,7 +2,7 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 const EventEmitter = require("devtools/toolkit/event-emitter");
 const eventEmitter = new EventEmitter();
 
@@ -13,11 +13,11 @@ let { Eyedropper, EyedropperManager } = require("devtools/eyedropper/eyedropper"
  */
 exports.items = [{
   name: "eyedropper",
-  description: gcli.lookup("eyedropperDesc"),
-  manual: gcli.lookup("eyedropperManual"),
+  description: l10n.lookup("eyedropperDesc"),
+  manual: l10n.lookup("eyedropperManual"),
   buttonId: "command-button-eyedropper",
   buttonClass: "command-button command-button-invertable",
-  tooltipText: gcli.lookup("eyedropperTooltip"),
+  tooltipText: l10n.lookup("eyedropperTooltip"),
   state: {
     isChecked: function(target) {
       let chromeWindow = target.tab.ownerDocument.defaultView;
diff --git a/browser/devtools/inspector/inspector-commands.js b/browser/devtools/inspector/inspector-commands.js
index 793935b..9598a9b 100644
--- a/browser/devtools/inspector/inspector-commands.js
+++ b/browser/devtools/inspector/inspector-commands.js
@@ -4,18 +4,18 @@
 
 "use strict";
 
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 
 exports.items = [{
   name: "inspect",
-  description: gcli.lookup("inspectDesc"),
-  manual: gcli.lookup("inspectManual"),
+  description: l10n.lookup("inspectDesc"),
+  manual: l10n.lookup("inspectManual"),
   params: [
     {
       name: "selector",
       type: "node",
-      description: gcli.lookup("inspectNodeDesc"),
-      manual: gcli.lookup("inspectNodeManual")
+      description: l10n.lookup("inspectNodeDesc"),
+      manual: l10n.lookup("inspectNodeManual")
     }
   ],
   exec: function(args, context) {
diff --git a/browser/devtools/responsivedesign/resize-commands.js b/browser/devtools/responsivedesign/resize-commands.js
index c4bdb42..8175d53 100644
--- a/browser/devtools/responsivedesign/resize-commands.js
+++ b/browser/devtools/responsivedesign/resize-commands.js
@@ -11,32 +11,32 @@ const BRAND_SHORT_NAME = Cc["@mozilla.org/intl/stringbundle;1"].
                          createBundle("chrome://branding/locale/brand.properties").
                          GetStringFromName("brandShortName");
 
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 
 exports.items = [
   {
     name: 'resize',
-    description: gcli.lookup('resizeModeDesc')
+    description: l10n.lookup('resizeModeDesc')
   },
   {
     name: 'resize on',
-    description: gcli.lookup('resizeModeOnDesc'),
-    manual: gcli.lookupFormat('resizeModeManual2', [BRAND_SHORT_NAME]),
+    description: l10n.lookup('resizeModeOnDesc'),
+    manual: l10n.lookupFormat('resizeModeManual2', [BRAND_SHORT_NAME]),
     exec: gcli_cmd_resize
   },
   {
     name: 'resize off',
-    description: gcli.lookup('resizeModeOffDesc'),
-    manual: gcli.lookupFormat('resizeModeManual2', [BRAND_SHORT_NAME]),
+    description: l10n.lookup('resizeModeOffDesc'),
+    manual: l10n.lookupFormat('resizeModeManual2', [BRAND_SHORT_NAME]),
     exec: gcli_cmd_resize
   },
   {
     name: 'resize toggle',
     buttonId: "command-button-responsive",
     buttonClass: "command-button command-button-invertable",
-    tooltipText: gcli.lookup("resizeModeToggleTooltip"),
-    description: gcli.lookup('resizeModeToggleDesc'),
-    manual: gcli.lookupFormat('resizeModeManual2', [BRAND_SHORT_NAME]),
+    tooltipText: l10n.lookup("resizeModeToggleTooltip"),
+    description: l10n.lookup('resizeModeToggleDesc'),
+    manual: l10n.lookupFormat('resizeModeManual2', [BRAND_SHORT_NAME]),
     state: {
       isChecked: function(aTarget) {
         let browserWindow = aTarget.tab.ownerDocument.defaultView;
@@ -62,17 +62,17 @@ exports.items = [
   },
   {
     name: 'resize to',
-    description: gcli.lookup('resizeModeToDesc'),
+    description: l10n.lookup('resizeModeToDesc'),
     params: [
       {
         name: 'width',
         type: 'number',
-        description: gcli.lookup("resizePageArgWidthDesc"),
+        description: l10n.lookup("resizePageArgWidthDesc"),
       },
       {
         name: 'height',
         type: 'number',
-        description: gcli.lookup("resizePageArgHeightDesc"),
+        description: l10n.lookup("resizePageArgHeightDesc"),
       },
     ],
     exec: gcli_cmd_resize
diff --git a/browser/devtools/scratchpad/scratchpad-commands.js b/browser/devtools/scratchpad/scratchpad-commands.js
index 8bfa0fe..8732bbf 100644
--- a/browser/devtools/scratchpad/scratchpad-commands.js
+++ b/browser/devtools/scratchpad/scratchpad-commands.js
@@ -4,13 +4,13 @@
 
 "use strict";
 
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 
 exports.items = [{
   name: "scratchpad",
   buttonId: "command-button-scratchpad",
   buttonClass: "command-button command-button-invertable",
-  tooltipText: gcli.lookup("scratchpadOpenTooltip"),
+  tooltipText: l10n.lookup("scratchpadOpenTooltip"),
   hidden: true,
   exec: function(args, context) {
     let Scratchpad = context.environment.chromeWindow.Scratchpad;
diff --git a/browser/devtools/styleeditor/styleeditor-commands.js b/browser/devtools/styleeditor/styleeditor-commands.js
index dd2c75b..15cf62f 100644
--- a/browser/devtools/styleeditor/styleeditor-commands.js
+++ b/browser/devtools/styleeditor/styleeditor-commands.js
@@ -4,12 +4,12 @@
 
 "use strict";
 
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 
 exports.items = [{
   name: "edit",
-  description: gcli.lookup("editDesc"),
-  manual: gcli.lookup("editManual2"),
+  description: l10n.lookup("editDesc"),
+  manual: l10n.lookup("editManual2"),
   params: [
      {
        name: 'resource',
@@ -17,7 +17,7 @@ exports.items = [{
          name: 'resource',
          include: 'text/css'
        },
-       description: gcli.lookup("editResourceDesc")
+       description: l10n.lookup("editResourceDesc")
      },
      {
        name: "line",
@@ -27,7 +27,7 @@ exports.items = [{
          min: 1,
          step: 10
        },
-       description: gcli.lookup("editLineToJumpToDesc")
+       description: l10n.lookup("editLineToJumpToDesc")
      }
    ],
    exec: function(args, context) {
diff --git a/browser/devtools/tilt/tilt-commands.js b/browser/devtools/tilt/tilt-commands.js
index 9c82828..16b6f60 100644
--- a/browser/devtools/tilt/tilt-commands.js
+++ b/browser/devtools/tilt/tilt-commands.js
@@ -4,7 +4,7 @@
 
 "use strict";
 
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 
 // Fetch TiltManager using the current loader, but don't save a
 // reference to it, because it might change with a tool reload.
@@ -19,18 +19,18 @@ Object.defineProperty(this, "TiltManager", {
 exports.items = [
 {
   name: 'tilt',
-  description: gcli.lookup("tiltDesc"),
-  manual: gcli.lookup("tiltManual"),
+  description: l10n.lookup("tiltDesc"),
+  manual: l10n.lookup("tiltManual"),
   hidden: true
 },
 {
   name: 'tilt open',
-  description: gcli.lookup("tiltOpenDesc"),
-  manual: gcli.lookup("tiltOpenManual"),
+  description: l10n.lookup("tiltOpenDesc"),
+  manual: l10n.lookup("tiltOpenManual"),
   hidden: true,
   exec: function(args, context) {
     if (isMultiProcess(context)) {
-      return gcli.lookupFormat("notAvailableInE10S", [this.name]);
+      return l10n.lookupFormat("notAvailableInE10S", [this.name]);
     }
 
     let chromeWindow = context.environment.chromeDocument.defaultView;
@@ -44,7 +44,7 @@ exports.items = [
   name: "tilt toggle",
   buttonId: "command-button-tilt",
   buttonClass: "command-button command-button-invertable",
-  tooltipText: gcli.lookup("tiltToggleTooltip"),
+  tooltipText: l10n.lookup("tiltToggleTooltip"),
   hidden: true,
   state: {
     isChecked: function(aTarget) {
@@ -66,7 +66,7 @@ exports.items = [
   },
   exec: function(args, context) {
     if (isMultiProcess(context)) {
-      return gcli.lookupFormat("notAvailableInE10S", [this.name]);
+      return l10n.lookupFormat("notAvailableInE10S", [this.name]);
     }
 
     let chromeWindow = context.environment.chromeDocument.defaultView;
@@ -76,28 +76,28 @@ exports.items = [
 },
 {
   name: 'tilt translate',
-  description: gcli.lookup("tiltTranslateDesc"),
-  manual: gcli.lookup("tiltTranslateManual"),
+  description: l10n.lookup("tiltTranslateDesc"),
+  manual: l10n.lookup("tiltTranslateManual"),
   hidden: true,
   params: [
     {
       name: "x",
       type: "number",
       defaultValue: 0,
-      description: gcli.lookup("tiltTranslateXDesc"),
-      manual: gcli.lookup("tiltTranslateXManual")
+      description: l10n.lookup("tiltTranslateXDesc"),
+      manual: l10n.lookup("tiltTranslateXManual")
     },
     {
       name: "y",
       type: "number",
       defaultValue: 0,
-      description: gcli.lookup("tiltTranslateYDesc"),
-      manual: gcli.lookup("tiltTranslateYManual")
+      description: l10n.lookup("tiltTranslateYDesc"),
+      manual: l10n.lookup("tiltTranslateYManual")
     }
   ],
   exec: function(args, context) {
     if (isMultiProcess(context)) {
-      return gcli.lookupFormat("notAvailableInE10S", [this.name]);
+      return l10n.lookupFormat("notAvailableInE10S", [this.name]);
     }
 
     let chromeWindow = context.environment.chromeDocument.defaultView;
@@ -109,35 +109,35 @@ exports.items = [
 },
 {
   name: 'tilt rotate',
-  description: gcli.lookup("tiltRotateDesc"),
-  manual: gcli.lookup("tiltRotateManual"),
+  description: l10n.lookup("tiltRotateDesc"),
+  manual: l10n.lookup("tiltRotateManual"),
   hidden: true,
   params: [
     {
       name: "x",
       type: { name: 'number', min: -360, max: 360, step: 10 },
       defaultValue: 0,
-      description: gcli.lookup("tiltRotateXDesc"),
-      manual: gcli.lookup("tiltRotateXManual")
+      description: l10n.lookup("tiltRotateXDesc"),
+      manual: l10n.lookup("tiltRotateXManual")
     },
     {
       name: "y",
       type: { name: 'number', min: -360, max: 360, step: 10 },
       defaultValue: 0,
-      description: gcli.lookup("tiltRotateYDesc"),
-      manual: gcli.lookup("tiltRotateYManual")
+      description: l10n.lookup("tiltRotateYDesc"),
+      manual: l10n.lookup("tiltRotateYManual")
     },
     {
       name: "z",
       type: { name: 'number', min: -360, max: 360, step: 10 },
       defaultValue: 0,
-      description: gcli.lookup("tiltRotateZDesc"),
-      manual: gcli.lookup("tiltRotateZManual")
+      description: l10n.lookup("tiltRotateZDesc"),
+      manual: l10n.lookup("tiltRotateZManual")
     }
   ],
   exec: function(args, context) {
     if (isMultiProcess(context)) {
-      return gcli.lookupFormat("notAvailableInE10S", [this.name]);
+      return l10n.lookupFormat("notAvailableInE10S", [this.name]);
     }
 
     let chromeWindow = context.environment.chromeDocument.defaultView;
@@ -149,20 +149,20 @@ exports.items = [
 },
 {
   name: 'tilt zoom',
-  description: gcli.lookup("tiltZoomDesc"),
-  manual: gcli.lookup("tiltZoomManual"),
+  description: l10n.lookup("tiltZoomDesc"),
+  manual: l10n.lookup("tiltZoomManual"),
   hidden: true,
   params: [
     {
       name: "zoom",
       type: { name: 'number' },
-      description: gcli.lookup("tiltZoomAmountDesc"),
-      manual: gcli.lookup("tiltZoomAmountManual")
+      description: l10n.lookup("tiltZoomAmountDesc"),
+      manual: l10n.lookup("tiltZoomAmountManual")
     }
   ],
   exec: function(args, context) {
     if (isMultiProcess(context)) {
-      return gcli.lookupFormat("notAvailableInE10S", [this.name]);
+      return l10n.lookupFormat("notAvailableInE10S", [this.name]);
     }
 
     let chromeWindow = context.environment.chromeDocument.defaultView;
@@ -175,12 +175,12 @@ exports.items = [
 },
 {
   name: 'tilt reset',
-  description: gcli.lookup("tiltResetDesc"),
-  manual: gcli.lookup("tiltResetManual"),
+  description: l10n.lookup("tiltResetDesc"),
+  manual: l10n.lookup("tiltResetManual"),
   hidden: true,
   exec: function(args, context) {
     if (isMultiProcess(context)) {
-      return gcli.lookupFormat("notAvailableInE10S", [this.name]);
+      return l10n.lookupFormat("notAvailableInE10S", [this.name]);
     }
 
     let chromeWindow = context.environment.chromeDocument.defaultView;
@@ -193,12 +193,12 @@ exports.items = [
 },
 {
   name: 'tilt close',
-  description: gcli.lookup("tiltCloseDesc"),
-  manual: gcli.lookup("tiltCloseManual"),
+  description: l10n.lookup("tiltCloseDesc"),
+  manual: l10n.lookup("tiltCloseManual"),
   hidden: true,
   exec: function(args, context) {
     if (isMultiProcess(context)) {
-      return gcli.lookupFormat("notAvailableInE10S", [this.name]);
+      return l10n.lookupFormat("notAvailableInE10S", [this.name]);
     }
 
     let chromeWindow = context.environment.chromeDocument.defaultView;
diff --git a/browser/devtools/webconsole/console-commands.js b/browser/devtools/webconsole/console-commands.js
index 471362c..b6424a5 100644
--- a/browser/devtools/webconsole/console-commands.js
+++ b/browser/devtools/webconsole/console-commands.js
@@ -4,7 +4,7 @@
 
 "use strict";
 
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 const { gDevTools } = require("resource:///modules/devtools/gDevTools.jsm");
 
 exports.items = [
@@ -13,7 +13,7 @@ exports.items = [
     hidden: true,
     buttonId: "command-button-splitconsole",
     buttonClass: "command-button command-button-invertable",
-    tooltipText: gcli.lookup("splitconsoleTooltip"),
+    tooltipText: l10n.lookup("splitconsoleTooltip"),
     isRemoteSafe: true,
     state: {
       isChecked: function(target) {
@@ -51,12 +51,12 @@ exports.items = [
   },
   {
     name: "console",
-    description: gcli.lookup("consoleDesc"),
-    manual: gcli.lookup("consoleManual")
+    description: l10n.lookup("consoleDesc"),
+    manual: l10n.lookup("consoleManual")
   },
   {
     name: "console clear",
-    description: gcli.lookup("consoleclearDesc"),
+    description: l10n.lookup("consoleclearDesc"),
     exec: function(args, context) {
       let toolbox = gDevTools.getToolbox(context.environment.target);
       if (toolbox == null) {
@@ -73,14 +73,14 @@ exports.items = [
   },
   {
     name: "console close",
-    description: gcli.lookup("consolecloseDesc"),
+    description: l10n.lookup("consolecloseDesc"),
     exec: function(args, context) {
       return gDevTools.closeToolbox(context.environment.target);
     }
   },
   {
     name: "console open",
-    description: gcli.lookup("consoleopenDesc"),
+    description: l10n.lookup("consoleopenDesc"),
     exec: function(args, context) {
       return gDevTools.showToolbox(context.environment.target, "webconsole");
     }
diff --git a/toolkit/devtools/gcli/commands/addon.js b/toolkit/devtools/gcli/commands/addon.js
index 765f476..c79a053 100644
--- a/toolkit/devtools/gcli/commands/addon.js
+++ b/toolkit/devtools/gcli/commands/addon.js
@@ -6,7 +6,7 @@
 
 const { Cc, Ci, Cu } = require("chrome");
 const { AddonManager } = Cu.import("resource://gre/modules/AddonManager.jsm", {});
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 const { Promise: promise } = require("resource://gre/modules/Promise.jsm");
 
 const BRAND_SHORT_NAME = Cc["@mozilla.org/intl/stringbundle;1"]
@@ -76,11 +76,11 @@ exports.items = [
   },
   {
     name: "addon",
-    description: gcli.lookup("addonDesc")
+    description: l10n.lookup("addonDesc")
   },
   {
     name: "addon list",
-    description: gcli.lookup("addonListDesc"),
+    description: l10n.lookup("addonListDesc"),
     returnType: "addonsInfo",
     params: [{
       name: "type",
@@ -89,7 +89,7 @@ exports.items = [
         data: [ "dictionary", "extension", "locale", "plugin", "theme", "all" ]
       },
       defaultValue: "all",
-      description: gcli.lookup("addonListTypeDesc")
+      description: l10n.lookup("addonListTypeDesc")
     }],
     exec: function(args, context) {
       let types = (args.type === "all") ? null : [ args.type ];
@@ -114,7 +114,7 @@ exports.items = [
       if (!addonsInfo.addons.length) {
         return context.createView({
           html: "<p>${message}</p>",
-          data: { message: gcli.lookup("addonNoneOfType") }
+          data: { message: l10n.lookup("addonNoneOfType") }
         });
       }
 
@@ -126,7 +126,7 @@ exports.items = [
         "theme": "addonListThemeHeading",
         "all": "addonListAllHeading"
       };
-      let header = gcli.lookup(headerLookups[addonsInfo.type] ||
+      let header = l10n.lookup(headerLookups[addonsInfo.type] ||
                                "addonListUnknownHeading");
 
       let operationLookups = {
@@ -138,7 +138,7 @@ exports.items = [
       };
       function lookupOperation(opName) {
         let lookupName = operationLookups[opName];
-        return lookupName ? gcli.lookup(lookupName) : opName;
+        return lookupName ? l10n.lookup(lookupName) : opName;
       }
 
       function arrangeAddons(addons) {
@@ -193,14 +193,14 @@ exports.items = [
               status: addon.isActive ? "enabled" : "disabled",
               version: addon.version,
               pendingOperations: addon.pendingOperations.length ?
-                (" (" + gcli.lookup("addonPending") + ": "
+                (" (" + l10n.lookup("addonPending") + ": "
                  + addon.pendingOperations.map(lookupOperation).join(", ")
                  + ")") :
                 "",
               toggleActionName: isActiveForToggle(addon) ? "disable": "enable",
               toggleActionMessage: isActiveForToggle(addon) ?
-                gcli.lookup("addonListOutDisable") :
-                gcli.lookup("addonListOutEnable")
+                l10n.lookup("addonListOutDisable") :
+                l10n.lookup("addonListOutEnable")
             };
           }),
           onclick: context.update,
@@ -211,32 +211,32 @@ exports.items = [
   },
   {
     name: "addon enable",
-    description: gcli.lookup("addonEnableDesc"),
+    description: l10n.lookup("addonEnableDesc"),
     params: [
       {
         name: "addon",
         type: "addon",
-        description: gcli.lookup("addonNameDesc")
+        description: l10n.lookup("addonNameDesc")
       }
     ],
     exec: function(args, context) {
       let name = (args.addon.name + " " + args.addon.version).trim();
       if (args.addon.userDisabled) {
         args.addon.userDisabled = false;
-        return gcli.lookupFormat("addonEnabled", [ name ]);
+        return l10n.lookupFormat("addonEnabled", [ name ]);
       }
 
-      return gcli.lookupFormat("addonAlreadyEnabled", [ name ]);
+      return l10n.lookupFormat("addonAlreadyEnabled", [ name ]);
     }
   },
   {
     name: "addon disable",
-    description: gcli.lookup("addonDisableDesc"),
+    description: l10n.lookup("addonDisableDesc"),
     params: [
       {
         name: "addon",
         type: "addon",
-        description: gcli.lookup("addonNameDesc")
+        description: l10n.lookup("addonNameDesc")
       }
     ],
     exec: function(args, context) {
@@ -247,10 +247,10 @@ exports.items = [
       if (!args.addon.userDisabled ||
           args.addon.userDisabled === AddonManager.STATE_ASK_TO_ACTIVATE) {
         args.addon.userDisabled = true;
-        return gcli.lookupFormat("addonDisabled", [ name ]);
+        return l10n.lookupFormat("addonDisabled", [ name ]);
       }
 
-      return gcli.lookupFormat("addonAlreadyDisabled", [ name ]);
+      return l10n.lookupFormat("addonAlreadyDisabled", [ name ]);
     }
   }
 ];
diff --git a/toolkit/devtools/gcli/commands/appcache.js b/toolkit/devtools/gcli/commands/appcache.js
index af98663..a2b9e82 100644
--- a/toolkit/devtools/gcli/commands/appcache.js
+++ b/toolkit/devtools/gcli/commands/appcache.js
@@ -4,19 +4,19 @@
 
 "use strict";
 
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 
 loader.lazyImporter(this, "AppCacheUtils", "resource:///modules/devtools/AppCacheUtils.jsm");
 
 exports.items = [
   {
     name: "appcache",
-    description: gcli.lookup("appCacheDesc")
+    description: l10n.lookup("appCacheDesc")
   },
   {
     name: "appcache validate",
-    description: gcli.lookup("appCacheValidateDesc"),
-    manual: gcli.lookup("appCacheValidateManual"),
+    description: l10n.lookup("appCacheValidateDesc"),
+    manual: l10n.lookup("appCacheValidateManual"),
     returnType: "appcacheerrors",
     params: [{
       group: "options",
@@ -24,7 +24,7 @@ exports.items = [
         {
           type: "string",
           name: "uri",
-          description: gcli.lookup("appCacheValidateUriDesc"),
+          description: l10n.lookup("appCacheValidateUriDesc"),
           defaultValue: null,
         }
       ]
@@ -53,7 +53,7 @@ exports.items = [
     exec: function([errors, manifestURI], context) {
       if (errors.length == 0) {
         return context.createView({
-          html: "<span>" + gcli.lookup("appCacheValidatedSuccessfully") + "</span>"
+          html: "<span>" + l10n.lookup("appCacheValidatedSuccessfully") + "</span>"
         });
       }
 
@@ -74,19 +74,19 @@ exports.items = [
   },
   {
     name: "appcache clear",
-    description: gcli.lookup("appCacheClearDesc"),
-    manual: gcli.lookup("appCacheClearManual"),
+    description: l10n.lookup("appCacheClearDesc"),
+    manual: l10n.lookup("appCacheClearManual"),
     exec: function(args, context) {
       let utils = new AppCacheUtils(args.uri);
       utils.clearAll();
 
-      return gcli.lookup("appCacheClearCleared");
+      return l10n.lookup("appCacheClearCleared");
     }
   },
   {
     name: "appcache list",
-    description: gcli.lookup("appCacheListDesc"),
-    manual: gcli.lookup("appCacheListManual"),
+    description: l10n.lookup("appCacheListDesc"),
+    manual: l10n.lookup("appCacheListManual"),
     returnType: "appcacheentries",
     params: [{
       group: "options",
@@ -94,7 +94,7 @@ exports.items = [
         {
           type: "string",
           name: "search",
-          description: gcli.lookup("appCacheListSearchDesc"),
+          description: l10n.lookup("appCacheListSearchDesc"),
           defaultValue: null,
         },
       ]
@@ -115,35 +115,35 @@ exports.items = [
           "  <li foreach='entry in ${entries}'>" +
           "    <table class='gcli-appcache-detail'>" +
           "      <tr>" +
-          "        <td>" + gcli.lookup("appCacheListKey") + "</td>" +
+          "        <td>" + l10n.lookup("appCacheListKey") + "</td>" +
           "        <td>${entry.key}</td>" +
           "      </tr>" +
           "      <tr>" +
-          "        <td>" + gcli.lookup("appCacheListFetchCount") + "</td>" +
+          "        <td>" + l10n.lookup("appCacheListFetchCount") + "</td>" +
           "        <td>${entry.fetchCount}</td>" +
           "      </tr>" +
           "      <tr>" +
-          "        <td>" + gcli.lookup("appCacheListLastFetched") + "</td>" +
+          "        <td>" + l10n.lookup("appCacheListLastFetched") + "</td>" +
           "        <td>${entry.lastFetched}</td>" +
           "      </tr>" +
           "      <tr>" +
-          "        <td>" + gcli.lookup("appCacheListLastModified") + "</td>" +
+          "        <td>" + l10n.lookup("appCacheListLastModified") + "</td>" +
           "        <td>${entry.lastModified}</td>" +
           "      </tr>" +
           "      <tr>" +
-          "        <td>" + gcli.lookup("appCacheListExpirationTime") + "</td>" +
+          "        <td>" + l10n.lookup("appCacheListExpirationTime") + "</td>" +
           "        <td>${entry.expirationTime}</td>" +
           "      </tr>" +
           "      <tr>" +
-          "        <td>" + gcli.lookup("appCacheListDataSize") + "</td>" +
+          "        <td>" + l10n.lookup("appCacheListDataSize") + "</td>" +
           "        <td>${entry.dataSize}</td>" +
           "      </tr>" +
           "      <tr>" +
-          "        <td>" + gcli.lookup("appCacheListDeviceID") + "</td>" +
+          "        <td>" + l10n.lookup("appCacheListDeviceID") + "</td>" +
           "        <td>${entry.deviceID} <span class='gcli-out-shortcut' " +
           "onclick='${onclick}' ondblclick='${ondblclick}' " +
           "data-command='appcache viewentry ${entry.key}'" +
-          ">" + gcli.lookup("appCacheListViewEntry") + "</span>" +
+          ">" + l10n.lookup("appCacheListViewEntry") + "</span>" +
           "        </td>" +
           "      </tr>" +
           "    </table>" +
@@ -159,13 +159,13 @@ exports.items = [
   },
   {
     name: "appcache viewentry",
-    description: gcli.lookup("appCacheViewEntryDesc"),
-    manual: gcli.lookup("appCacheViewEntryManual"),
+    description: l10n.lookup("appCacheViewEntryDesc"),
+    manual: l10n.lookup("appCacheViewEntryManual"),
     params: [
       {
         type: "string",
         name: "key",
-        description: gcli.lookup("appCacheViewEntryKey"),
+        description: l10n.lookup("appCacheViewEntryKey"),
         defaultValue: null,
       }
     ],
diff --git a/toolkit/devtools/gcli/commands/calllog.js b/toolkit/devtools/gcli/commands/calllog.js
index 30c944d..086f6d5 100644
--- a/toolkit/devtools/gcli/commands/calllog.js
+++ b/toolkit/devtools/gcli/commands/calllog.js
@@ -6,6 +6,7 @@
 
 const { Cc, Ci, Cu } = require("chrome");
 const TargetFactory = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools.TargetFactory;
+const l10n = require("gcli/l10n");
 const gcli = require("gcli/index");
 
 loader.lazyImporter(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm");
@@ -24,11 +25,11 @@ let sandboxes = [];
 exports.items = [
   {
     name: "calllog",
-    description: gcli.lookup("calllogDesc")
+    description: l10n.lookup("calllogDesc")
   },
   {
     name: "calllog start",
-    description: gcli.lookup("calllogStartDesc"),
+    description: l10n.lookup("calllogStartDesc"),
 
     exec: function(args, context) {
       let contentWindow = context.environment.window;
@@ -45,7 +46,7 @@ exports.items = [
       let target = TargetFactory.forTab(gBrowser.selectedTab);
       gDevTools.showToolbox(target, "webconsole");
 
-      return gcli.lookup("calllogStartReply");
+      return l10n.lookup("calllogStartReply");
     },
 
     callDescription: function(frame) {
@@ -73,12 +74,12 @@ exports.items = [
   },
   {
     name: "calllog stop",
-    description: gcli.lookup("calllogStopDesc"),
+    description: l10n.lookup("calllogStopDesc"),
 
     exec: function(args, context) {
       let numDebuggers = debuggers.length;
       if (numDebuggers == 0) {
-        return gcli.lookup("calllogStopNoLogging");
+        return l10n.lookup("calllogStopNoLogging");
       }
 
       for (let dbg of debuggers) {
@@ -86,12 +87,12 @@ exports.items = [
       }
       debuggers = [];
 
-      return gcli.lookupFormat("calllogStopReply", [ numDebuggers ]);
+      return l10n.lookupFormat("calllogStopReply", [ numDebuggers ]);
     }
   },
   {
     name: "calllog chromestart",
-    description: gcli.lookup("calllogChromeStartDesc"),
+    description: l10n.lookup("calllogChromeStartDesc"),
     get hidden() gcli.hiddenByChromePref(),
     params: [
       {
@@ -104,8 +105,8 @@ exports.items = [
       {
         name: "source",
         type: "string",
-        description: gcli.lookup("calllogChromeSourceTypeDesc"),
-        manual: gcli.lookup("calllogChromeSourceTypeManual"),
+        description: l10n.lookup("calllogChromeSourceTypeDesc"),
+        manual: l10n.lookup("calllogChromeSourceTypeManual"),
       }
     ],
     exec: function(args, context) {
@@ -117,20 +118,20 @@ exports.items = [
           globalObj = Cu.import(args.source);
         }
         catch (e) {
-          return gcli.lookup("callLogChromeInvalidJSM");
+          return l10n.lookup("callLogChromeInvalidJSM");
         }
       } else if (args.sourceType == "content-variable") {
         if (args.source in contentWindow) {
           globalObj = Cu.getGlobalForObject(contentWindow[args.source]);
         } else {
-          throw new Error(gcli.lookup("callLogChromeVarNotFoundContent"));
+          throw new Error(l10n.lookup("callLogChromeVarNotFoundContent"));
         }
       } else if (args.sourceType == "chrome-variable") {
         let chromeWin = context.environment.chromeDocument.defaultView;
         if (args.source in chromeWin) {
           globalObj = Cu.getGlobalForObject(chromeWin[args.source]);
         } else {
-          return gcli.lookup("callLogChromeVarNotFoundChrome");
+          return l10n.lookup("callLogChromeVarNotFoundChrome");
         }
       } else {
         let chromeWin = context.environment.chromeDocument.defaultView;
@@ -147,13 +148,13 @@ exports.items = [
         } catch(e) {
           // We need to save the message before cleaning up else e contains a dead
           // object.
-          let msg = gcli.lookup("callLogChromeEvalException") + ": " + e;
+          let msg = l10n.lookup("callLogChromeEvalException") + ": " + e;
           Cu.nukeSandbox(sandbox);
           return msg;
         }
 
         if (typeof returnVal == "undefined") {
-          return gcli.lookup("callLogChromeEvalNeedsObject");
+          return l10n.lookup("callLogChromeEvalNeedsObject");
         }
 
         globalObj = Cu.getGlobalForObject(returnVal);
@@ -164,7 +165,7 @@ exports.items = [
 
       dbg.onEnterFrame = function(frame) {
         // BUG 773652 -  Make the output from the GCLI calllog command nicer
-        contentWindow.console.log(gcli.lookup("callLogChromeMethodCall") +
+        contentWindow.console.log(l10n.lookup("callLogChromeMethodCall") +
                                   ": " + this.callDescription(frame));
       }.bind(this);
 
@@ -172,7 +173,7 @@ exports.items = [
       let target = TargetFactory.forTab(gBrowser.selectedTab);
       gDevTools.showToolbox(target, "webconsole");
 
-      return gcli.lookup("calllogChromeStartReply");
+      return l10n.lookup("calllogChromeStartReply");
     },
 
     valueToString: function(value) {
@@ -182,19 +183,19 @@ exports.items = [
     },
 
     callDescription: function(frame) {
-      let name = frame.callee.name || gcli.lookup("callLogChromeAnonFunction");
+      let name = frame.callee.name || l10n.lookup("callLogChromeAnonFunction");
       let args = frame.arguments.map(this.valueToString).join(", ");
       return name + "(" + args + ")";
     }
   },
   {
     name: "calllog chromestop",
-    description: gcli.lookup("calllogChromeStopDesc"),
+    description: l10n.lookup("calllogChromeStopDesc"),
     get hidden() gcli.hiddenByChromePref(),
     exec: function(args, context) {
       let numDebuggers = chromeDebuggers.length;
       if (numDebuggers == 0) {
-        return gcli.lookup("calllogChromeStopNoLogging");
+        return l10n.lookup("calllogChromeStopNoLogging");
       }
 
       for (let dbg of chromeDebuggers) {
@@ -207,7 +208,7 @@ exports.items = [
       chromeDebuggers = [];
       sandboxes = [];
 
-      return gcli.lookupFormat("calllogChromeStopReply", [ numDebuggers ]);
+      return l10n.lookupFormat("calllogChromeStopReply", [ numDebuggers ]);
     }
   }
 ];
diff --git a/toolkit/devtools/gcli/commands/cmd.js b/toolkit/devtools/gcli/commands/cmd.js
index dfa066e..2d19336 100644
--- a/toolkit/devtools/gcli/commands/cmd.js
+++ b/toolkit/devtools/gcli/commands/cmd.js
@@ -11,6 +11,7 @@ const { Promise: promise } = require("resource://gre/modules/Promise.jsm");
 const { OS } = Cu.import("resource://gre/modules/osfile.jsm", {});
 const { TextEncoder, TextDecoder } = Cu.import('resource://gre/modules/commonjs/toolkit/loader.js', {});
 const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 
 loader.lazyGetter(this, "prefBranch", function() {
   let prefService = Cc["@mozilla.org/preferences-service;1"].getService(Ci.nsIPrefService);
@@ -127,11 +128,11 @@ exports.items = [
     get hidden() {
       return !prefBranch.prefHasUserValue(PREF_DIR);
     },
-    description: gcli.lookup("cmdDesc")
+    description: l10n.lookup("cmdDesc")
   },
   {
     name: "cmd refresh",
-    description: gcli.lookup("cmdRefreshDesc"),
+    description: l10n.lookup("cmdRefreshDesc"),
     get hidden() {
       return !prefBranch.prefHasUserValue(PREF_DIR);
     },
@@ -140,17 +141,17 @@ exports.items = [
 
       let dirName = prefBranch.getComplexValue(PREF_DIR,
                                               Ci.nsISupportsString).data.trim();
-      return gcli.lookupFormat("cmdStatus3", [ dirName ]);
+      return l10n.lookupFormat("cmdStatus3", [ dirName ]);
     }
   },
   {
     name: "cmd setdir",
-    description: gcli.lookup("cmdSetdirDesc"),
-    manual: gcli.lookup("cmdSetdirManual2"),
+    description: l10n.lookup("cmdSetdirDesc"),
+    manual: l10n.lookup("cmdSetdirManual2"),
     params: [
       {
         name: "directory",
-        description: gcli.lookup("cmdSetdirDirectoryDesc"),
+        description: l10n.lookup("cmdSetdirDirectoryDesc"),
         type: {
           name: "file",
           filetype: "directory",
@@ -169,7 +170,7 @@ exports.items = [
 
       gcli.load();
 
-      return gcli.lookupFormat("cmdStatus3", [ args.directory ]);
+      return l10n.lookupFormat("cmdStatus3", [ args.directory ]);
     }
   }
 ];
diff --git a/toolkit/devtools/gcli/commands/cookie.js b/toolkit/devtools/gcli/commands/cookie.js
index ffbd6cf..67390c9 100644
--- a/toolkit/devtools/gcli/commands/cookie.js
+++ b/toolkit/devtools/gcli/commands/cookie.js
@@ -5,7 +5,7 @@
 "use strict";
 
 const { Cc, Ci, Cu } = require("chrome");
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 const cookieMgr = Cc["@mozilla.org/cookiemanager;1"].getService(Ci.nsICookieManager2);
 
 /**
@@ -13,7 +13,7 @@ const cookieMgr = Cc["@mozilla.org/cookiemanager;1"].getService(Ci.nsICookieMana
  */
 function translateExpires(expires) {
   if (expires == 0) {
-    return gcli.lookup("cookieListOutSession");
+    return l10n.lookup("cookieListOutSession");
   }
   return new Date(expires).toLocaleString();
 }
@@ -36,18 +36,18 @@ function isCookieAtHost(cookie, host) {
 exports.items = [
   {
     name: "cookie",
-    description: gcli.lookup("cookieDesc"),
-    manual: gcli.lookup("cookieManual")
+    description: l10n.lookup("cookieDesc"),
+    manual: l10n.lookup("cookieManual")
   },
   {
     name: "cookie list",
-    description: gcli.lookup("cookieListDesc"),
-    manual: gcli.lookup("cookieListManual"),
+    description: l10n.lookup("cookieListDesc"),
+    manual: l10n.lookup("cookieListManual"),
     returnType: "cookies",
     exec: function(args, context) {
       let host = context.environment.document.location.host;
       if (host == null || host == "") {
-        throw new Error(gcli.lookup("cookieListOutNonePage"));
+        throw new Error(l10n.lookup("cookieListOutNonePage"));
       }
 
       let enm = cookieMgr.getCookiesFromHost(host);
@@ -74,13 +74,13 @@ exports.items = [
   },
   {
     name: "cookie remove",
-    description: gcli.lookup("cookieRemoveDesc"),
-    manual: gcli.lookup("cookieRemoveManual"),
+    description: l10n.lookup("cookieRemoveDesc"),
+    manual: l10n.lookup("cookieRemoveManual"),
     params: [
       {
         name: "name",
         type: "string",
-        description: gcli.lookup("cookieRemoveKeyDesc"),
+        description: l10n.lookup("cookieRemoveKeyDesc"),
       }
     ],
     exec: function(args, context) {
@@ -105,7 +105,7 @@ exports.items = [
     exec: function(cookies, context) {
       if (cookies.length == 0) {
         let host = context.environment.document.location.host;
-        let msg = gcli.lookupFormat("cookieListOutNoneHost", [ host ]);
+        let msg = l10n.lookupFormat("cookieListOutNoneHost", [ host ]);
         return context.createView({ html: "<span>" + msg + "</span>" });
       }
 
@@ -116,7 +116,7 @@ exports.items = [
         cookie.attrs = (cookie.secure ? "secure" : " ") +
                        (cookie.httpOnly ? "httpOnly" : " ") +
                        (cookie.sameDomain ? "sameDomain" : " ") +
-                       (noAttrs ? gcli.lookup("cookieListOutNone") : " ");
+                       (noAttrs ? l10n.lookup("cookieListOutNone") : " ");
       }
 
       return context.createView({
@@ -126,29 +126,29 @@ exports.items = [
           "    <div>${cookie.name}=${cookie.value}</div>" +
           "    <table class='gcli-cookielist-detail'>" +
           "      <tr>" +
-          "        <td>" + gcli.lookup("cookieListOutHost") + "</td>" +
+          "        <td>" + l10n.lookup("cookieListOutHost") + "</td>" +
           "        <td>${cookie.host}</td>" +
           "      </tr>" +
           "      <tr>" +
-          "        <td>" + gcli.lookup("cookieListOutPath") + "</td>" +
+          "        <td>" + l10n.lookup("cookieListOutPath") + "</td>" +
           "        <td>${cookie.path}</td>" +
           "      </tr>" +
           "      <tr>" +
-          "        <td>" + gcli.lookup("cookieListOutExpires") + "</td>" +
+          "        <td>" + l10n.lookup("cookieListOutExpires") + "</td>" +
           "        <td>${cookie.expires}</td>" +
           "      </tr>" +
           "      <tr>" +
-          "        <td>" + gcli.lookup("cookieListOutAttributes") + "</td>" +
+          "        <td>" + l10n.lookup("cookieListOutAttributes") + "</td>" +
           "        <td>${cookie.attrs}</td>" +
           "      </tr>" +
           "      <tr><td colspan='2'>" +
           "        <span class='gcli-out-shortcut' onclick='${onclick}'" +
           "            data-command='cookie set ${cookie.name} '" +
-          "            >" + gcli.lookup("cookieListOutEdit") + "</span>" +
+          "            >" + l10n.lookup("cookieListOutEdit") + "</span>" +
           "        <span class='gcli-out-shortcut'" +
           "            onclick='${onclick}' ondblclick='${ondblclick}'" +
           "            data-command='cookie remove ${cookie.name}'" +
-          "            >" + gcli.lookup("cookieListOutRemove") + "</span>" +
+          "            >" + l10n.lookup("cookieListOutRemove") + "</span>" +
           "      </td></tr>" +
           "    </table>" +
           "  </li>" +
@@ -164,54 +164,54 @@ exports.items = [
   },
   {
     name: "cookie set",
-    description: gcli.lookup("cookieSetDesc"),
-    manual: gcli.lookup("cookieSetManual"),
+    description: l10n.lookup("cookieSetDesc"),
+    manual: l10n.lookup("cookieSetManual"),
     params: [
       {
         name: "name",
         type: "string",
-        description: gcli.lookup("cookieSetKeyDesc")
+        description: l10n.lookup("cookieSetKeyDesc")
       },
       {
         name: "value",
         type: "string",
-        description: gcli.lookup("cookieSetValueDesc")
+        description: l10n.lookup("cookieSetValueDesc")
       },
       {
-        group: gcli.lookup("cookieSetOptionsDesc"),
+        group: l10n.lookup("cookieSetOptionsDesc"),
         params: [
           {
             name: "path",
             type: { name: "string", allowBlank: true },
             defaultValue: "/",
-            description: gcli.lookup("cookieSetPathDesc")
+            description: l10n.lookup("cookieSetPathDesc")
           },
           {
             name: "domain",
             type: "string",
             defaultValue: null,
-            description: gcli.lookup("cookieSetDomainDesc")
+            description: l10n.lookup("cookieSetDomainDesc")
           },
           {
             name: "secure",
             type: "boolean",
-            description: gcli.lookup("cookieSetSecureDesc")
+            description: l10n.lookup("cookieSetSecureDesc")
           },
           {
             name: "httpOnly",
             type: "boolean",
-            description: gcli.lookup("cookieSetHttpOnlyDesc")
+            description: l10n.lookup("cookieSetHttpOnlyDesc")
           },
           {
             name: "session",
             type: "boolean",
-            description: gcli.lookup("cookieSetSessionDesc")
+            description: l10n.lookup("cookieSetSessionDesc")
           },
           {
             name: "expires",
             type: "string",
             defaultValue: "Jan 17, 2038",
-            description: gcli.lookup("cookieSetExpiresDesc")
+            description: l10n.lookup("cookieSetExpiresDesc")
           },
         ]
       }
diff --git a/toolkit/devtools/gcli/commands/folder.js b/toolkit/devtools/gcli/commands/folder.js
index cef0d81..719743c 100644
--- a/toolkit/devtools/gcli/commands/folder.js
+++ b/toolkit/devtools/gcli/commands/folder.js
@@ -6,7 +6,7 @@
 
 const { Cc, Ci, Cu, CC } = require("chrome");
 const { Services } = require("resource://gre/modules/Services.jsm");
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 const dirService = Cc["@mozilla.org/file/directory_service;1"]
                       .getService(Ci.nsIProperties);
 
@@ -19,29 +19,29 @@ function showFolder(aPath) {
 
     if (file.exists()) {
       file.reveal();
-      return gcli.lookupFormat("folderOpenDirResult", [aPath]);
+      return l10n.lookupFormat("folderOpenDirResult", [aPath]);
     } else {
-      return gcli.lookup("folderInvalidPath");
+      return l10n.lookup("folderInvalidPath");
     }
   } catch (e) {
-    return gcli.lookup("folderInvalidPath");
+    return l10n.lookup("folderInvalidPath");
   }
 }
 
 exports.items = [
   {
     name: "folder",
-    description: gcli.lookup("folderDesc")
+    description: l10n.lookup("folderDesc")
   },
   {
     name: "folder open",
-    description: gcli.lookup("folderOpenDesc"),
+    description: l10n.lookup("folderOpenDesc"),
     params: [
       {
         name: "path",
         type: { name: "string", allowBlank: true },
         defaultValue: "~",
-        description: gcli.lookup("folderOpenDir")
+        description: l10n.lookup("folderOpenDir")
       }
     ],
     returnType: "string",
@@ -61,7 +61,7 @@ exports.items = [
   },
   {
     name: "folder openprofile",
-    description: gcli.lookup("folderOpenProfileDesc"),
+    description: l10n.lookup("folderOpenProfileDesc"),
     returnType: "string",
     exec: function(args, context) {
       // Get the profile directory.
diff --git a/toolkit/devtools/gcli/commands/highlight.js b/toolkit/devtools/gcli/commands/highlight.js
index 716b9d8..c0f238e 100644
--- a/toolkit/devtools/gcli/commands/highlight.js
+++ b/toolkit/devtools/gcli/commands/highlight.js
@@ -5,7 +5,7 @@
 "use strict";
 
 const {Cc, Ci, Cu} = require("chrome");
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 require("devtools/server/actors/inspector");
 const {BoxModelHighlighter} = require("devtools/server/actors/highlighter");
 
@@ -35,35 +35,35 @@ function unhighlightAll() {
 exports.items = [
   {
     name: "highlight",
-    description: gcli.lookup("highlightDesc"),
-    manual: gcli.lookup("highlightManual"),
+    description: l10n.lookup("highlightDesc"),
+    manual: l10n.lookup("highlightManual"),
     params: [
       {
         name: "selector",
         type: "nodelist",
-        description: gcli.lookup("highlightSelectorDesc"),
-        manual: gcli.lookup("highlightSelectorManual")
+        description: l10n.lookup("highlightSelectorDesc"),
+        manual: l10n.lookup("highlightSelectorManual")
       },
       {
-        group: gcli.lookup("highlightOptionsDesc"),
+        group: l10n.lookup("highlightOptionsDesc"),
         params: [
           {
             name: "hideguides",
             type: "boolean",
-            description: gcli.lookup("highlightHideGuidesDesc"),
-            manual: gcli.lookup("highlightHideGuidesManual")
+            description: l10n.lookup("highlightHideGuidesDesc"),
+            manual: l10n.lookup("highlightHideGuidesManual")
           },
           {
             name: "showinfobar",
             type: "boolean",
-            description: gcli.lookup("highlightShowInfoBarDesc"),
-            manual: gcli.lookup("highlightShowInfoBarManual")
+            description: l10n.lookup("highlightShowInfoBarDesc"),
+            manual: l10n.lookup("highlightShowInfoBarManual")
           },
           {
             name: "showall",
             type: "boolean",
-            description: gcli.lookup("highlightShowAllDesc"),
-            manual: gcli.lookup("highlightShowAllManual")
+            description: l10n.lookup("highlightShowAllDesc"),
+            manual: l10n.lookup("highlightShowAllManual")
           },
           {
             name: "region",
@@ -71,22 +71,22 @@ exports.items = [
               name: "selection",
               data: ["content", "padding", "border", "margin"]
             },
-            description: gcli.lookup("highlightRegionDesc"),
-            manual: gcli.lookup("highlightRegionManual"),
+            description: l10n.lookup("highlightRegionDesc"),
+            manual: l10n.lookup("highlightRegionManual"),
             defaultValue: "border"
           },
           {
             name: "fill",
             type: "string",
-            description: gcli.lookup("highlightFillDesc"),
-            manual: gcli.lookup("highlightFillManual"),
+            description: l10n.lookup("highlightFillDesc"),
+            manual: l10n.lookup("highlightFillManual"),
             defaultValue: null
           },
           {
             name: "keep",
             type: "boolean",
-            description: gcli.lookup("highlightKeepDesc"),
-            manual: gcli.lookup("highlightKeepManual"),
+            description: l10n.lookup("highlightKeepDesc"),
+            manual: l10n.lookup("highlightKeepManual"),
           }
         ]
       }
@@ -133,7 +133,7 @@ exports.items = [
       let output = PluralForm.get(args.selector.length, highlightText)
                              .replace("%1$S", args.selector.length);
       if (args.selector.length > i) {
-        output = gcli.lookupFormat("highlightOutputMaxReached",
+        output = l10n.lookupFormat("highlightOutputMaxReached",
           ["" + args.selector.length, "" + i]);
       }
 
@@ -142,8 +142,8 @@ exports.items = [
   },
   {
     name: "unhighlight",
-    description: gcli.lookup("unhighlightDesc"),
-    manual: gcli.lookup("unhighlightManual"),
+    description: l10n.lookup("unhighlightDesc"),
+    manual: l10n.lookup("unhighlightManual"),
     exec: unhighlightAll
   }
 ];
diff --git a/toolkit/devtools/gcli/commands/inject.js b/toolkit/devtools/gcli/commands/inject.js
index 5f79b7b..ba53159 100644
--- a/toolkit/devtools/gcli/commands/inject.js
+++ b/toolkit/devtools/gcli/commands/inject.js
@@ -6,13 +6,13 @@
 
 const { Services } = require("resource://gre/modules/Services.jsm");
 const { listenOnce } = require("devtools/async-utils");
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 
 exports.items = [
   {
     name: "inject",
-    description: gcli.lookup("injectDesc"),
-    manual: gcli.lookup("injectManual2"),
+    description: l10n.lookup("injectDesc"),
+    manual: l10n.lookup("injectManual2"),
     params: [{
       name: "library",
       type: {
@@ -49,7 +49,7 @@ exports.items = [
           }
         ]
       },
-      description: gcli.lookup("injectLibraryDesc")
+      description: l10n.lookup("injectLibraryDesc")
     }],
     exec: function*(args, context) {
       let document = context.environment.document;
@@ -67,7 +67,7 @@ exports.items = [
         // Check if URI is valid
         Services.io.newURI(src, null, null);
       } catch(e) {
-        return gcli.lookupFormat("injectFailed", [name]);
+        return l10n.lookupFormat("injectFailed", [name]);
       }
 
       let newSource = document.createElement("script");
@@ -78,7 +78,7 @@ exports.items = [
 
       yield loadPromise;
 
-      return gcli.lookupFormat("injectLoaded", [name]);
+      return l10n.lookupFormat("injectLoaded", [name]);
     }
   }
 ];
diff --git a/toolkit/devtools/gcli/commands/jsb.js b/toolkit/devtools/gcli/commands/jsb.js
index f5409a0..a3d1029 100644
--- a/toolkit/devtools/gcli/commands/jsb.js
+++ b/toolkit/devtools/gcli/commands/jsb.js
@@ -5,7 +5,7 @@
 "use strict";
 
 const { Cc, Ci, Cu } = require("chrome");
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 const XMLHttpRequest = Cc["@mozilla.org/xmlextras/xmlhttprequest;1"];
 const { devtools } = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
 
@@ -16,22 +16,22 @@ devtools.lazyRequireGetter(this, "beautify", "devtools/jsbeautify");
 exports.items = [
   {
     name: "jsb",
-    description: gcli.lookup("jsbDesc"),
+    description: l10n.lookup("jsbDesc"),
     returnValue:"string",
     params: [
       {
         name: "url",
         type: "string",
-        description: gcli.lookup("jsbUrlDesc")
+        description: l10n.lookup("jsbUrlDesc")
       },
       {
-        group: gcli.lookup("jsbOptionsDesc"),
+        group: l10n.lookup("jsbOptionsDesc"),
         params: [
           {
             name: "indentSize",
             type: "number",
-            description: gcli.lookup("jsbIndentSizeDesc"),
-            manual: gcli.lookup("jsbIndentSizeManual"),
+            description: l10n.lookup("jsbIndentSizeDesc"),
+            manual: l10n.lookup("jsbIndentSizeManual"),
             defaultValue: Preferences.get("devtools.editor.tabsize", 2),
           },
           {
@@ -43,27 +43,27 @@ exports.items = [
                 { name: "tab", value: "\t" }
               ]
             },
-            description: gcli.lookup("jsbIndentCharDesc"),
-            manual: gcli.lookup("jsbIndentCharManual"),
+            description: l10n.lookup("jsbIndentCharDesc"),
+            manual: l10n.lookup("jsbIndentCharManual"),
             defaultValue: " ",
           },
           {
             name: "doNotPreserveNewlines",
             type: "boolean",
-            description: gcli.lookup("jsbDoNotPreserveNewlinesDesc")
+            description: l10n.lookup("jsbDoNotPreserveNewlinesDesc")
           },
           {
             name: "preserveMaxNewlines",
             type: "number",
-            description: gcli.lookup("jsbPreserveMaxNewlinesDesc"),
-            manual: gcli.lookup("jsbPreserveMaxNewlinesManual"),
+            description: l10n.lookup("jsbPreserveMaxNewlinesDesc"),
+            manual: l10n.lookup("jsbPreserveMaxNewlinesManual"),
             defaultValue: -1
           },
           {
             name: "jslintHappy",
             type: "boolean",
-            description: gcli.lookup("jsbJslintHappyDesc"),
-            manual: gcli.lookup("jsbJslintHappyManual")
+            description: l10n.lookup("jsbJslintHappyDesc"),
+            manual: l10n.lookup("jsbJslintHappyManual")
           },
           {
             name: "braceStyle",
@@ -71,20 +71,20 @@ exports.items = [
               name: "selection",
               data: ["collapse", "expand", "end-expand", "expand-strict"]
             },
-            description: gcli.lookup("jsbBraceStyleDesc2"),
-            manual: gcli.lookup("jsbBraceStyleManual2"),
+            description: l10n.lookup("jsbBraceStyleDesc2"),
+            manual: l10n.lookup("jsbBraceStyleManual2"),
             defaultValue: "collapse"
           },
           {
             name: "noSpaceBeforeConditional",
             type: "boolean",
-            description: gcli.lookup("jsbNoSpaceBeforeConditionalDesc")
+            description: l10n.lookup("jsbNoSpaceBeforeConditionalDesc")
           },
           {
             name: "unescapeStrings",
             type: "boolean",
-            description: gcli.lookup("jsbUnescapeStringsDesc"),
-            manual: gcli.lookup("jsbUnescapeStringsManual")
+            description: l10n.lookup("jsbUnescapeStringsDesc"),
+            manual: l10n.lookup("jsbUnescapeStringsManual")
           }
         ]
       }
@@ -107,7 +107,7 @@ exports.items = [
       try {
         xhr.open("GET", args.url, true);
       } catch(e) {
-        return gcli.lookup("jsbInvalidURL");
+        return l10n.lookup("jsbInvalidURL");
       }
 
       let deferred = context.defer();
diff --git a/toolkit/devtools/gcli/commands/listen.js b/toolkit/devtools/gcli/commands/listen.js
index e9bfdf2..42bfead 100644
--- a/toolkit/devtools/gcli/commands/listen.js
+++ b/toolkit/devtools/gcli/commands/listen.js
@@ -6,7 +6,7 @@
 
 const { Cc, Ci, Cu } = require("chrome");
 const Services = require("Services");
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 const { XPCOMUtils } = require("resource://gre/modules/XPCOMUtils.jsm");
 XPCOMUtils.defineLazyModuleGetter(this, "DevToolsLoader",
   "resource://gre/modules/devtools/Loader.jsm");
@@ -35,8 +35,8 @@ XPCOMUtils.defineLazyGetter(this, "debuggerServer", () => {
 exports.items = [
   {
     name: "listen",
-    description: gcli.lookup("listenDesc"),
-    manual: gcli.lookupFormat("listenManual2", [ BRAND_SHORT_NAME ]),
+    description: l10n.lookup("listenDesc"),
+    manual: l10n.lookupFormat("listenManual2", [ BRAND_SHORT_NAME ]),
     params: [
       {
         name: "port",
@@ -44,23 +44,23 @@ exports.items = [
         get defaultValue() {
           return Services.prefs.getIntPref("devtools.debugger.chrome-debugging-port");
         },
-        description: gcli.lookup("listenPortDesc"),
+        description: l10n.lookup("listenPortDesc"),
       }
     ],
     exec: function(args, context) {
       var listener = debuggerServer.createListener();
       if (!listener) {
-        throw new Error(gcli.lookup("listenDisabledOutput"));
+        throw new Error(l10n.lookup("listenDisabledOutput"));
       }
 
       listener.portOrPath = args.port;
       listener.open();
 
       if (debuggerServer.initialized) {
-        return gcli.lookupFormat("listenInitOutput", [ "" + args.port ]);
+        return l10n.lookupFormat("listenInitOutput", [ "" + args.port ]);
       }
 
-      return gcli.lookup("listenNoInitOutput");
+      return l10n.lookup("listenNoInitOutput");
     },
   }
 ];
diff --git a/toolkit/devtools/gcli/commands/media.js b/toolkit/devtools/gcli/commands/media.js
index 04b8d2a..28dfe96 100644
--- a/toolkit/devtools/gcli/commands/media.js
+++ b/toolkit/devtools/gcli/commands/media.js
@@ -4,21 +4,21 @@
 
 "use strict";
 
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 
 exports.items = [
   {
     name: "media",
-    description: gcli.lookup("mediaDesc")
+    description: l10n.lookup("mediaDesc")
   },
   {
     name: "media emulate",
-    description: gcli.lookup("mediaEmulateDesc"),
-    manual: gcli.lookup("mediaEmulateManual"),
+    description: l10n.lookup("mediaEmulateDesc"),
+    manual: l10n.lookup("mediaEmulateManual"),
     params: [
       {
         name: "type",
-        description: gcli.lookup("mediaEmulateType"),
+        description: l10n.lookup("mediaEmulateType"),
         type: {
            name: "selection",
            data: [
@@ -36,7 +36,7 @@ exports.items = [
   },
   {
     name: "media reset",
-    description: gcli.lookup("mediaResetDesc"),
+    description: l10n.lookup("mediaResetDesc"),
     exec: function(args, context) {
       let markupDocumentViewer = context.environment.chromeWindow
                                         .gBrowser.markupDocumentViewer;
diff --git a/toolkit/devtools/gcli/commands/pagemod.js b/toolkit/devtools/gcli/commands/pagemod.js
index 8f3e2897..33b5f1a 100644
--- a/toolkit/devtools/gcli/commands/pagemod.js
+++ b/toolkit/devtools/gcli/commands/pagemod.js
@@ -5,58 +5,58 @@
 "use strict";
 
 const { Cc, Ci, Cu } = require("chrome");
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 
 exports.items = [
   {
     name: "pagemod",
-    description: gcli.lookup("pagemodDesc"),
+    description: l10n.lookup("pagemodDesc"),
   },
   {
     name: "pagemod replace",
-    description: gcli.lookup("pagemodReplaceDesc"),
+    description: l10n.lookup("pagemodReplaceDesc"),
     params: [
       {
         name: "search",
         type: "string",
-        description: gcli.lookup("pagemodReplaceSearchDesc"),
+        description: l10n.lookup("pagemodReplaceSearchDesc"),
       },
       {
         name: "replace",
         type: "string",
-        description: gcli.lookup("pagemodReplaceReplaceDesc"),
+        description: l10n.lookup("pagemodReplaceReplaceDesc"),
       },
       {
         name: "ignoreCase",
         type: "boolean",
-        description: gcli.lookup("pagemodReplaceIgnoreCaseDesc"),
+        description: l10n.lookup("pagemodReplaceIgnoreCaseDesc"),
       },
       {
         name: "selector",
         type: "string",
-        description: gcli.lookup("pagemodReplaceSelectorDesc"),
+        description: l10n.lookup("pagemodReplaceSelectorDesc"),
         defaultValue: "*:not(script):not(style):not(embed):not(object):not(frame):not(iframe):not(frameset)",
       },
       {
         name: "root",
         type: "node",
-        description: gcli.lookup("pagemodReplaceRootDesc"),
+        description: l10n.lookup("pagemodReplaceRootDesc"),
         defaultValue: null,
       },
       {
         name: "attrOnly",
         type: "boolean",
-        description: gcli.lookup("pagemodReplaceAttrOnlyDesc"),
+        description: l10n.lookup("pagemodReplaceAttrOnlyDesc"),
       },
       {
         name: "contentOnly",
         type: "boolean",
-        description: gcli.lookup("pagemodReplaceContentOnlyDesc"),
+        description: l10n.lookup("pagemodReplaceContentOnlyDesc"),
       },
       {
         name: "attributes",
         type: "string",
-        description: gcli.lookup("pagemodReplaceAttributesDesc"),
+        description: l10n.lookup("pagemodReplaceAttributesDesc"),
         defaultValue: null,
       },
     ],
@@ -114,39 +114,39 @@ exports.items = [
         }
       }
 
-      return gcli.lookupFormat("pagemodReplaceResult",
+      return l10n.lookupFormat("pagemodReplaceResult",
                               [elements.length, replacedTextNodes,
                                 replacedAttributes]);
     }
   },
   {
     name: "pagemod remove",
-    description: gcli.lookup("pagemodRemoveDesc"),
+    description: l10n.lookup("pagemodRemoveDesc"),
   },
   {
     name: "pagemod remove element",
-    description: gcli.lookup("pagemodRemoveElementDesc"),
+    description: l10n.lookup("pagemodRemoveElementDesc"),
     params: [
       {
         name: "search",
         type: "string",
-        description: gcli.lookup("pagemodRemoveElementSearchDesc"),
+        description: l10n.lookup("pagemodRemoveElementSearchDesc"),
       },
       {
         name: "root",
         type: "node",
-        description: gcli.lookup("pagemodRemoveElementRootDesc"),
+        description: l10n.lookup("pagemodRemoveElementRootDesc"),
         defaultValue: null,
       },
       {
         name: "stripOnly",
         type: "boolean",
-        description: gcli.lookup("pagemodRemoveElementStripOnlyDesc"),
+        description: l10n.lookup("pagemodRemoveElementStripOnlyDesc"),
       },
       {
         name: "ifEmptyOnly",
         type: "boolean",
-        description: gcli.lookup("pagemodRemoveElementIfEmptyOnlyDesc"),
+        description: l10n.lookup("pagemodRemoveElementIfEmptyOnlyDesc"),
       },
     ],
     exec: function(args, context) {
@@ -171,34 +171,34 @@ exports.items = [
         }
       }
 
-      return gcli.lookupFormat("pagemodRemoveElementResultMatchedAndRemovedElements",
+      return l10n.lookupFormat("pagemodRemoveElementResultMatchedAndRemovedElements",
                               [elements.length, removed]);
     }
   },
   {
     name: "pagemod remove attribute",
-    description: gcli.lookup("pagemodRemoveAttributeDesc"),
+    description: l10n.lookup("pagemodRemoveAttributeDesc"),
     params: [
       {
         name: "searchAttributes",
         type: "string",
-        description: gcli.lookup("pagemodRemoveAttributeSearchAttributesDesc"),
+        description: l10n.lookup("pagemodRemoveAttributeSearchAttributesDesc"),
       },
       {
         name: "searchElements",
         type: "string",
-        description: gcli.lookup("pagemodRemoveAttributeSearchElementsDesc"),
+        description: l10n.lookup("pagemodRemoveAttributeSearchElementsDesc"),
       },
       {
         name: "root",
         type: "node",
-        description: gcli.lookup("pagemodRemoveAttributeRootDesc"),
+        description: l10n.lookup("pagemodRemoveAttributeRootDesc"),
         defaultValue: null,
       },
       {
         name: "ignoreCase",
         type: "boolean",
-        description: gcli.lookup("pagemodRemoveAttributeIgnoreCaseDesc"),
+        description: l10n.lookup("pagemodRemoveAttributeIgnoreCaseDesc"),
       },
     ],
     exec: function(args, context) {
@@ -225,18 +225,18 @@ exports.items = [
         }
       }
 
-      return gcli.lookupFormat("pagemodRemoveAttributeResult",
+      return l10n.lookupFormat("pagemodRemoveAttributeResult",
                               [elements.length, removed]);
     }
   },
   // This command allows the user to export the page to HTML after DOM changes
   {
     name: "export",
-    description: gcli.lookup("exportDesc"),
+    description: l10n.lookup("exportDesc"),
   },
   {
     name: "export html",
-    description: gcli.lookup("exportHtmlDesc"),
+    description: l10n.lookup("exportHtmlDesc"),
     params: [
       {
         name: "destination",
diff --git a/toolkit/devtools/gcli/commands/paintflashing.js b/toolkit/devtools/gcli/commands/paintflashing.js
index 6ed86d6..892e368 100644
--- a/toolkit/devtools/gcli/commands/paintflashing.js
+++ b/toolkit/devtools/gcli/commands/paintflashing.js
@@ -14,6 +14,7 @@ const EventEmitter = require("devtools/toolkit/event-emitter");
 const eventEmitter = new EventEmitter();
 
 const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 
 function onPaintFlashingChanged(context) {
   let tab = context.environment.chromeWindow.gBrowser.selectedTab;
@@ -40,12 +41,12 @@ function onPaintFlashingChanged(context) {
 exports.items = [
   {
     name: "paintflashing",
-    description: gcli.lookup("paintflashingDesc")
+    description: l10n.lookup("paintflashingDesc")
   },
   {
     name: "paintflashing on",
-    description: gcli.lookup("paintflashingOnDesc"),
-    manual: gcli.lookup("paintflashingManual"),
+    description: l10n.lookup("paintflashingOnDesc"),
+    manual: l10n.lookup("paintflashingManual"),
     params: [{
       group: "options",
       params: [
@@ -53,7 +54,7 @@ exports.items = [
           type: "boolean",
           name: "chrome",
           get hidden() gcli.hiddenByChromePref(),
-          description: gcli.lookup("paintflashingChromeDesc"),
+          description: l10n.lookup("paintflashingChromeDesc"),
         }
       ]
     }],
@@ -70,8 +71,8 @@ exports.items = [
   },
   {
     name: "paintflashing off",
-    description: gcli.lookup("paintflashingOffDesc"),
-    manual: gcli.lookup("paintflashingManual"),
+    description: l10n.lookup("paintflashingOffDesc"),
+    manual: l10n.lookup("paintflashingManual"),
     params: [{
       group: "options",
       params: [
@@ -79,7 +80,7 @@ exports.items = [
           type: "boolean",
           name: "chrome",
           get hidden() gcli.hiddenByChromePref(),
-          description: gcli.lookup("paintflashingChromeDesc"),
+          description: l10n.lookup("paintflashingChromeDesc"),
         }
       ]
     }],
@@ -121,9 +122,9 @@ exports.items = [
         eventEmitter.off("changed", aChangeHandler);
       },
     },
-    tooltipText: gcli.lookup("paintflashingTooltip"),
-    description: gcli.lookup("paintflashingToggleDesc"),
-    manual: gcli.lookup("paintflashingManual"),
+    tooltipText: l10n.lookup("paintflashingTooltip"),
+    description: l10n.lookup("paintflashingToggleDesc"),
+    manual: l10n.lookup("paintflashingManual"),
     exec: function(args, context) {
       let window = context.environment.window;
       let wUtils = window.QueryInterface(Ci.nsIInterfaceRequestor).
diff --git a/toolkit/devtools/gcli/commands/restart.js b/toolkit/devtools/gcli/commands/restart.js
index 1871dff..ce3a5b6 100644
--- a/toolkit/devtools/gcli/commands/restart.js
+++ b/toolkit/devtools/gcli/commands/restart.js
@@ -5,7 +5,7 @@
 "use strict";
 
 const { Cc, Ci, Cu } = require("chrome");
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 const Services = require("Services");
 
 const BRAND_SHORT_NAME = Cc["@mozilla.org/intl/stringbundle;1"]
@@ -28,12 +28,12 @@ const BRAND_SHORT_NAME = Cc["@mozilla.org/intl/stringbundle;1"]
 exports.items = [
   {
     name: "restart",
-    description: gcli.lookupFormat("restartBrowserDesc", [ BRAND_SHORT_NAME ]),
+    description: l10n.lookupFormat("restartBrowserDesc", [ BRAND_SHORT_NAME ]),
     params: [
       {
         name: "nocache",
         type: "boolean",
-        description: gcli.lookup("restartBrowserNocacheDesc")
+        description: l10n.lookup("restartBrowserNocacheDesc")
       }
     ],
     returnType: "string",
@@ -42,7 +42,7 @@ exports.items = [
                       .createInstance(Ci.nsISupportsPRBool);
       Services.obs.notifyObservers(canceled, "quit-application-requested", "restart");
       if (canceled.data) {
-        return gcli.lookup("restartBrowserRequestCancelled");
+        return l10n.lookup("restartBrowserRequestCancelled");
       }
 
       // disable loading content from cache.
@@ -54,7 +54,7 @@ exports.items = [
       Cc["@mozilla.org/toolkit/app-startup;1"]
           .getService(Ci.nsIAppStartup)
           .quit(Ci.nsIAppStartup.eAttemptQuit | Ci.nsIAppStartup.eRestart);
-      return gcli.lookupFormat("restartBrowserRestarting", [ BRAND_SHORT_NAME ]);
+      return l10n.lookupFormat("restartBrowserRestarting", [ BRAND_SHORT_NAME ]);
     }
   }
 ];
diff --git a/toolkit/devtools/gcli/commands/screenshot.js b/toolkit/devtools/gcli/commands/screenshot.js
index 4a279ae..6c99978 100644
--- a/toolkit/devtools/gcli/commands/screenshot.js
+++ b/toolkit/devtools/gcli/commands/screenshot.js
@@ -5,7 +5,7 @@
 "use strict";
 
 const { Cc, Ci, Cu } = require("chrome");
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 
 loader.lazyImporter(this, "Downloads", "resource://gre/modules/Downloads.jsm");
 loader.lazyImporter(this, "LayoutHelpers", "resource://gre/modules/devtools/LayoutHelpers.jsm");
@@ -24,54 +24,54 @@ const FILENAME_DEFAULT_VALUE = " ";
 exports.items = [
   {
     name: "screenshot",
-    description: gcli.lookup("screenshotDesc"),
-    manual: gcli.lookup("screenshotManual"),
+    description: l10n.lookup("screenshotDesc"),
+    manual: l10n.lookup("screenshotManual"),
     returnType: "dom",
     buttonId: "command-button-screenshot",
     buttonClass: "command-button command-button-invertable",
-    tooltipText: gcli.lookup("screenshotTooltip"),
+    tooltipText: l10n.lookup("screenshotTooltip"),
     params: [
       {
         name: "filename",
         type: "string",
         defaultValue: FILENAME_DEFAULT_VALUE,
-        description: gcli.lookup("screenshotFilenameDesc"),
-        manual: gcli.lookup("screenshotFilenameManual")
+        description: l10n.lookup("screenshotFilenameDesc"),
+        manual: l10n.lookup("screenshotFilenameManual")
       },
       {
-        group: gcli.lookup("screenshotGroupOptions"),
+        group: l10n.lookup("screenshotGroupOptions"),
         params: [
           {
             name: "clipboard",
             type: "boolean",
-            description: gcli.lookup("screenshotClipboardDesc"),
-            manual: gcli.lookup("screenshotClipboardManual")
+            description: l10n.lookup("screenshotClipboardDesc"),
+            manual: l10n.lookup("screenshotClipboardManual")
           },
           {
             name: "chrome",
             type: "boolean",
-            description: gcli.lookupFormat("screenshotChromeDesc2", [BRAND_SHORT_NAME]),
-            manual: gcli.lookupFormat("screenshotChromeManual2", [BRAND_SHORT_NAME])
+            description: l10n.lookupFormat("screenshotChromeDesc2", [BRAND_SHORT_NAME]),
+            manual: l10n.lookupFormat("screenshotChromeManual2", [BRAND_SHORT_NAME])
           },
           {
             name: "delay",
             type: { name: "number", min: 0 },
             defaultValue: 0,
-            description: gcli.lookup("screenshotDelayDesc"),
-            manual: gcli.lookup("screenshotDelayManual")
+            description: l10n.lookup("screenshotDelayDesc"),
+            manual: l10n.lookup("screenshotDelayManual")
           },
           {
             name: "fullpage",
             type: "boolean",
-            description: gcli.lookup("screenshotFullPageDesc"),
-            manual: gcli.lookup("screenshotFullPageManual")
+            description: l10n.lookup("screenshotFullPageDesc"),
+            manual: l10n.lookup("screenshotFullPageManual")
           },
           {
             name: "selector",
             type: "node",
             defaultValue: null,
-            description: gcli.lookup("inspectNodeDesc"),
-            manual: gcli.lookup("inspectNodeManual")
+            description: l10n.lookup("inspectNodeDesc"),
+            manual: l10n.lookup("inspectNodeManual")
           }
         ]
       }
@@ -81,7 +81,7 @@ exports.items = [
         // Node screenshot with chrome option does not work as intended
         // Refer https://bugzilla.mozilla.org/show_bug.cgi?id=659268#c7
         // throwing for now.
-        throw new Error(gcli.lookup("screenshotSelectorChromeConflict"));
+        throw new Error(l10n.lookup("screenshotSelectorChromeConflict"));
       }
       var document = args.chrome? context.environment.chromeDocument
                                 : context.environment.document;
@@ -184,10 +184,10 @@ exports.items = [
             let clipid = Ci.nsIClipboard;
             let clip = Cc["@mozilla.org/widget/clipboard;1"].getService(clipid);
             clip.setData(trans, null, clipid.kGlobalClipboard);
-            div.textContent = gcli.lookup("screenshotCopied");
+            div.textContent = l10n.lookup("screenshotCopied");
           }
           catch (ex) {
-            div.textContent = gcli.lookup("screenshotErrorCopying");
+            div.textContent = l10n.lookup("screenshotErrorCopying");
           }
           throw new Task.Result(div);
         }
@@ -206,7 +206,7 @@ exports.items = [
             return part;
           }).join("-");
           let timeString = date.toTimeString().replace(/:/g, ".").split(" ")[0];
-          filename = gcli.lookupFormat("screenshotGeneratedFilename",
+          filename = l10n.lookupFormat("screenshotGeneratedFilename",
                                       [dateString, timeString]) + ".png";
         }
         // Check there is a .png extension to filename
@@ -222,7 +222,7 @@ exports.items = [
         try {
           file.initWithPath(filename);
         } catch (ex) {
-          div.textContent = gcli.lookup("screenshotErrorSavingToFile") + " " + filename;
+          div.textContent = l10n.lookup("screenshotErrorSavingToFile") + " " + filename;
           throw new Task.Result(div);
         }
 
@@ -238,7 +238,7 @@ exports.items = [
         let source = ioService.newURI(data, "UTF8", null);
         persist.saveURI(source, null, null, 0, null, null, file, loadContext);
 
-        div.textContent = gcli.lookup("screenshotSavedToFile") + " \"" + filename +
+        div.textContent = l10n.lookup("screenshotSavedToFile") + " \"" + filename +
                           "\"";
         div.addEventListener("click", function openFile() {
           div.removeEventListener("click", openFile);
diff --git a/toolkit/devtools/gcli/commands/tools.js b/toolkit/devtools/gcli/commands/tools.js
index 641e1ca..ea9237b 100644
--- a/toolkit/devtools/gcli/commands/tools.js
+++ b/toolkit/devtools/gcli/commands/tools.js
@@ -9,6 +9,7 @@ const Services = require("Services");
 const { OS } = require("resource://gre/modules/osfile.jsm");
 const { devtools } = require("resource://gre/modules/devtools/Loader.jsm");
 const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 
 const BRAND_SHORT_NAME = Cc["@mozilla.org/intl/stringbundle;1"]
                            .getService(Ci.nsIStringBundleService)
@@ -18,14 +19,14 @@ const BRAND_SHORT_NAME = Cc["@mozilla.org/intl/stringbundle;1"]
 exports.items = [
   {
     name: "tools",
-    description: gcli.lookupFormat("toolsDesc2", [ BRAND_SHORT_NAME ]),
-    manual: gcli.lookupFormat("toolsManual2", [ BRAND_SHORT_NAME ]),
+    description: l10n.lookupFormat("toolsDesc2", [ BRAND_SHORT_NAME ]),
+    manual: l10n.lookupFormat("toolsManual2", [ BRAND_SHORT_NAME ]),
     get hidden() gcli.hiddenByChromePref(),
   },
   {
     name: "tools srcdir",
-    description: gcli.lookup("toolsSrcdirDesc"),
-    manual: gcli.lookupFormat("toolsSrcdirManual2", [ BRAND_SHORT_NAME ]),
+    description: l10n.lookup("toolsSrcdirDesc"),
+    manual: l10n.lookupFormat("toolsSrcdirManual2", [ BRAND_SHORT_NAME ]),
     get hidden() gcli.hiddenByChromePref(),
     params: [
       {
@@ -35,7 +36,7 @@ exports.items = [
           filetype: "directory",
           existing: "yes"
         } */,
-        description: gcli.lookup("toolsSrcdirDir")
+        description: l10n.lookup("toolsSrcdirDir")
       }
     ],
     returnType: "string",
@@ -50,29 +51,29 @@ exports.items = [
                                          Ci.nsISupportsString, str);
           devtools.reload();
 
-          let msg = gcli.lookupFormat("toolsSrcdirReloaded", [ args.srcdir ]);
+          let msg = l10n.lookupFormat("toolsSrcdirReloaded", [ args.srcdir ]);
           throw new Error(msg);
         }
 
-        return gcli.lookupFormat("toolsSrcdirNotFound", [ args.srcdir ]);
+        return l10n.lookupFormat("toolsSrcdirNotFound", [ args.srcdir ]);
       });
     }
   },
   {
     name: "tools builtin",
-    description: gcli.lookup("toolsBuiltinDesc"),
-    manual: gcli.lookup("toolsBuiltinManual"),
+    description: l10n.lookup("toolsBuiltinDesc"),
+    manual: l10n.lookup("toolsBuiltinManual"),
     get hidden() gcli.hiddenByChromePref(),
     returnType: "string",
     exec: function(args, context) {
       Services.prefs.clearUserPref("devtools.loader.srcdir");
       devtools.reload();
-      return gcli.lookup("toolsBuiltinReloaded");
+      return l10n.lookup("toolsBuiltinReloaded");
     }
   },
   {
     name: "tools reload",
-    description: gcli.lookup("toolsReloadDesc"),
+    description: l10n.lookup("toolsReloadDesc"),
     get hidden() {
       return gcli.hiddenByChromePref() ||
              !Services.prefs.prefHasUserValue("devtools.loader.srcdir");
@@ -81,7 +82,7 @@ exports.items = [
     returnType: "string",
     exec: function(args, context) {
       devtools.reload();
-      return gcli.lookup("toolsReloaded2");
+      return l10n.lookup("toolsReloaded2");
     }
   }
 ];
diff --git a/toolkit/devtools/gcli/source/docs/writing-commands.md b/toolkit/devtools/gcli/source/docs/writing-commands.md
index 8edcf3a..e8acaa5 100644
--- a/toolkit/devtools/gcli/source/docs/writing-commands.md
+++ b/toolkit/devtools/gcli/source/docs/writing-commands.md
@@ -89,7 +89,8 @@ depends on what context you are writing your command for.
 GCLI supports Mozilla style localization. To add a command that will only ever
 be used embedded in Firefox, this is the way to go. Your strings should be
 stored in ``browser/locales/en-US/chrome/browser/devtools/gclicommands.properties``,
-And you should access them using ``gcli.lookup(...)`` or ``gcli.lookupFormat()``
+And you should access them using ``let l10n = require("gcli/l10n")`` and then
+``l10n.lookup(...)`` or ``l10n.lookupFormat()``
 
 For examples of existing commands, take a look in
 ``browser/devtools/webconsole/GcliCommands.jsm``, which contains most of the
diff --git a/toolkit/devtools/gcli/source/lib/gcli/commands/commands.js b/toolkit/devtools/gcli/source/lib/gcli/commands/commands.js
index be2cf77..a1f073e 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/commands/commands.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/commands/commands.js
@@ -344,8 +344,6 @@ function Commands(types) {
 
 /**
  * Add a command to the list of known commands.
- * This function is exposed to the outside world (via gcli/index). It is
- * documented in docs/index.md for all the world to see.
  * @param commandSpec The command and its metadata.
  * @return The new command
  */
diff --git a/toolkit/devtools/gcli/source/lib/gcli/index.js b/toolkit/devtools/gcli/source/lib/gcli/index.js
index dc034be..c56e10e 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/index.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/index.js
@@ -134,44 +134,3 @@ var prefBranch = prefSvc.getBranch(null).QueryInterface(Ci.nsIPrefBranch2);
 exports.hiddenByChromePref = function() {
   return !prefBranch.prefHasUserValue('devtools.chrome.enabled');
 };
-
-
-try {
-  var Services = Cu.import('resource://gre/modules/Services.jsm', {}).Services;
-  var stringBundle = Services.strings.createBundle(
-          'chrome://browser/locale/devtools/gclicommands.properties');
-
-  /**
-   * Lookup a string in the GCLI string bundle
-   */
-  exports.lookup = function(name) {
-    try {
-      return stringBundle.GetStringFromName(name);
-    }
-    catch (ex) {
-      throw new Error('Failure in lookup(\'' + name + '\')');
-    }
-  };
-
-  /**
-   * Lookup a string in the GCLI string bundle
-   */
-  exports.lookupFormat = function(name, swaps) {
-    try {
-      return stringBundle.formatStringFromName(name, swaps, swaps.length);
-    }
-    catch (ex) {
-      throw new Error('Failure in lookupFormat(\'' + name + '\')');
-    }
-  };
-}
-catch (ex) {
-  console.error('Using string fallbacks', ex);
-
-  exports.lookup = function(name) {
-    return name;
-  };
-  exports.lookupFormat = function(name, swaps) {
-    return name;
-  };
-}

From ca8c00ece6406e6aed1a4f75449a3717684cc513 Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Thu, 29 Jan 2015 18:11:17 +0000
Subject: [PATCH 03/38] Be clearer about uses of the gcli/index module

Previously the 'gcli' object (from gcli/index) was re-exported from the helpers
module, this change stops that, so the only test directory that was actually
using gcli now gets it directly.

The next step is to make the individual tests that need 'gcli' import it
directly.

Signed-off-by: Joe Walker <jwalker@mozilla.com>
---
 browser/devtools/commandline/test/browser_cmd_settings.js     | 8 ++++----
 browser/devtools/commandline/test/browser_gcli_async.js       | 4 ++--
 browser/devtools/commandline/test/browser_gcli_canon.js       | 4 ++--
 browser/devtools/commandline/test/browser_gcli_cli1.js        | 4 ++--
 browser/devtools/commandline/test/browser_gcli_cli2.js        | 4 ++--
 browser/devtools/commandline/test/browser_gcli_completion1.js | 4 ++--
 browser/devtools/commandline/test/browser_gcli_completion2.js | 4 ++--
 browser/devtools/commandline/test/browser_gcli_context.js     | 4 ++--
 browser/devtools/commandline/test/browser_gcli_date.js        | 4 ++--
 browser/devtools/commandline/test/browser_gcli_exec.js        | 4 ++--
 browser/devtools/commandline/test/browser_gcli_fail.js        | 4 ++--
 browser/devtools/commandline/test/browser_gcli_file.js        | 4 ++--
 browser/devtools/commandline/test/browser_gcli_fileparser.js  | 4 ++--
 browser/devtools/commandline/test/browser_gcli_filesystem.js  | 4 ++--
 browser/devtools/commandline/test/browser_gcli_focus.js       | 4 ++--
 browser/devtools/commandline/test/browser_gcli_history.js     | 4 ++--
 browser/devtools/commandline/test/browser_gcli_incomplete.js  | 4 ++--
 browser/devtools/commandline/test/browser_gcli_inputter.js    | 4 ++--
 browser/devtools/commandline/test/browser_gcli_intro.js       | 4 ++--
 browser/devtools/commandline/test/browser_gcli_js.js          | 4 ++--
 browser/devtools/commandline/test/browser_gcli_keyboard1.js   | 4 ++--
 browser/devtools/commandline/test/browser_gcli_keyboard2.js   | 4 ++--
 browser/devtools/commandline/test/browser_gcli_keyboard3.js   | 4 ++--
 browser/devtools/commandline/test/browser_gcli_keyboard4.js   | 4 ++--
 browser/devtools/commandline/test/browser_gcli_keyboard5.js   | 4 ++--
 browser/devtools/commandline/test/browser_gcli_keyboard6.js   | 4 ++--
 browser/devtools/commandline/test/browser_gcli_menu.js        | 4 ++--
 browser/devtools/commandline/test/browser_gcli_node.js        | 4 ++--
 browser/devtools/commandline/test/browser_gcli_pref1.js       | 4 ++--
 browser/devtools/commandline/test/browser_gcli_pref2.js       | 4 ++--
 browser/devtools/commandline/test/browser_gcli_remotews.js    | 4 ++--
 browser/devtools/commandline/test/browser_gcli_remotexhr.js   | 4 ++--
 browser/devtools/commandline/test/browser_gcli_resource.js    | 4 ++--
 browser/devtools/commandline/test/browser_gcli_short.js       | 4 ++--
 browser/devtools/commandline/test/browser_gcli_spell.js       | 4 ++--
 browser/devtools/commandline/test/browser_gcli_split.js       | 4 ++--
 browser/devtools/commandline/test/browser_gcli_string.js      | 4 ++--
 browser/devtools/commandline/test/browser_gcli_tokenize.js    | 4 ++--
 browser/devtools/commandline/test/browser_gcli_tooltip.js     | 4 ++--
 browser/devtools/commandline/test/browser_gcli_types.js       | 4 ++--
 browser/devtools/commandline/test/browser_gcli_union.js       | 4 ++--
 browser/devtools/commandline/test/browser_gcli_url.js         | 4 ++--
 browser/devtools/commandline/test/helpers.js                  | 5 ++---
 43 files changed, 88 insertions(+), 89 deletions(-)

diff --git a/browser/devtools/commandline/test/browser_cmd_settings.js b/browser/devtools/commandline/test/browser_cmd_settings.js
index 46196e6..3ad7f9f 100644
--- a/browser/devtools/commandline/test/browser_cmd_settings.js
+++ b/browser/devtools/commandline/test/browser_cmd_settings.js
@@ -20,10 +20,10 @@ function* spawnTest() {
   // Setup
   let options = yield helpers.openTab(TEST_URI);
 
-  require("devtools/commandline/commands-index");
-  let gcli = require("gcli/index");
-  yield gcli.load();
-  let settings = gcli.settings;
+  let gcliInit = require("devtools/commandline/commands-index");
+  let system = yield gcliInit.load();
+
+  let settings = system.settings;
 
   let hideIntroEnabled = settings.get("devtools.gcli.hideIntro");
   let tabSize = settings.get("devtools.editor.tabsize");
diff --git a/browser/devtools/commandline/test/browser_gcli_async.js b/browser/devtools/commandline/test/browser_gcli_async.js
index 9abae93..cc49fff 100644
--- a/browser/devtools/commandline/test/browser_gcli_async.js
+++ b/browser/devtools/commandline/test/browser_gcli_async.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_canon.js b/browser/devtools/commandline/test/browser_gcli_canon.js
index e524e40..326ea9e 100644
--- a/browser/devtools/commandline/test/browser_gcli_canon.js
+++ b/browser/devtools/commandline/test/browser_gcli_canon.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_cli1.js b/browser/devtools/commandline/test/browser_gcli_cli1.js
index 41ae6a2..d506a4b 100644
--- a/browser/devtools/commandline/test/browser_gcli_cli1.js
+++ b/browser/devtools/commandline/test/browser_gcli_cli1.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_cli2.js b/browser/devtools/commandline/test/browser_gcli_cli2.js
index ffc8e6c..1e17e75 100644
--- a/browser/devtools/commandline/test/browser_gcli_cli2.js
+++ b/browser/devtools/commandline/test/browser_gcli_cli2.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_completion1.js b/browser/devtools/commandline/test/browser_gcli_completion1.js
index 2ed6c69..406b7c7 100644
--- a/browser/devtools/commandline/test/browser_gcli_completion1.js
+++ b/browser/devtools/commandline/test/browser_gcli_completion1.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_completion2.js b/browser/devtools/commandline/test/browser_gcli_completion2.js
index 3b90c8d..1e9ec217 100644
--- a/browser/devtools/commandline/test/browser_gcli_completion2.js
+++ b/browser/devtools/commandline/test/browser_gcli_completion2.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_context.js b/browser/devtools/commandline/test/browser_gcli_context.js
index 1d835da..c981ce9 100644
--- a/browser/devtools/commandline/test/browser_gcli_context.js
+++ b/browser/devtools/commandline/test/browser_gcli_context.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_date.js b/browser/devtools/commandline/test/browser_gcli_date.js
index 36f7cf0..6598b11 100644
--- a/browser/devtools/commandline/test/browser_gcli_date.js
+++ b/browser/devtools/commandline/test/browser_gcli_date.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_exec.js b/browser/devtools/commandline/test/browser_gcli_exec.js
index 3f5a8b1..d0f8150 100644
--- a/browser/devtools/commandline/test/browser_gcli_exec.js
+++ b/browser/devtools/commandline/test/browser_gcli_exec.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_fail.js b/browser/devtools/commandline/test/browser_gcli_fail.js
index 71de5c9..f591c04 100644
--- a/browser/devtools/commandline/test/browser_gcli_fail.js
+++ b/browser/devtools/commandline/test/browser_gcli_fail.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_file.js b/browser/devtools/commandline/test/browser_gcli_file.js
index 8f746ae..e03c4c7 100644
--- a/browser/devtools/commandline/test/browser_gcli_file.js
+++ b/browser/devtools/commandline/test/browser_gcli_file.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_fileparser.js b/browser/devtools/commandline/test/browser_gcli_fileparser.js
index 2d3b927..e75ab37 100644
--- a/browser/devtools/commandline/test/browser_gcli_fileparser.js
+++ b/browser/devtools/commandline/test/browser_gcli_fileparser.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_filesystem.js b/browser/devtools/commandline/test/browser_gcli_filesystem.js
index 72ab21f..7de64ea 100644
--- a/browser/devtools/commandline/test/browser_gcli_filesystem.js
+++ b/browser/devtools/commandline/test/browser_gcli_filesystem.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_focus.js b/browser/devtools/commandline/test/browser_gcli_focus.js
index f4e0e21..0f4d936 100644
--- a/browser/devtools/commandline/test/browser_gcli_focus.js
+++ b/browser/devtools/commandline/test/browser_gcli_focus.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_history.js b/browser/devtools/commandline/test/browser_gcli_history.js
index f938422..b89b979 100644
--- a/browser/devtools/commandline/test/browser_gcli_history.js
+++ b/browser/devtools/commandline/test/browser_gcli_history.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_incomplete.js b/browser/devtools/commandline/test/browser_gcli_incomplete.js
index d9622f1..4a92e88 100644
--- a/browser/devtools/commandline/test/browser_gcli_incomplete.js
+++ b/browser/devtools/commandline/test/browser_gcli_incomplete.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_inputter.js b/browser/devtools/commandline/test/browser_gcli_inputter.js
index c142866..d82d812 100644
--- a/browser/devtools/commandline/test/browser_gcli_inputter.js
+++ b/browser/devtools/commandline/test/browser_gcli_inputter.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_intro.js b/browser/devtools/commandline/test/browser_gcli_intro.js
index 7917071..6f1da40 100644
--- a/browser/devtools/commandline/test/browser_gcli_intro.js
+++ b/browser/devtools/commandline/test/browser_gcli_intro.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_js.js b/browser/devtools/commandline/test/browser_gcli_js.js
index 3508872..7a30f40 100644
--- a/browser/devtools/commandline/test/browser_gcli_js.js
+++ b/browser/devtools/commandline/test/browser_gcli_js.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_keyboard1.js b/browser/devtools/commandline/test/browser_gcli_keyboard1.js
index d016d89..d8e7fe4 100644
--- a/browser/devtools/commandline/test/browser_gcli_keyboard1.js
+++ b/browser/devtools/commandline/test/browser_gcli_keyboard1.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_keyboard2.js b/browser/devtools/commandline/test/browser_gcli_keyboard2.js
index 20509c5..42292d5 100644
--- a/browser/devtools/commandline/test/browser_gcli_keyboard2.js
+++ b/browser/devtools/commandline/test/browser_gcli_keyboard2.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_keyboard3.js b/browser/devtools/commandline/test/browser_gcli_keyboard3.js
index 09bfc5b..ef4d2da 100644
--- a/browser/devtools/commandline/test/browser_gcli_keyboard3.js
+++ b/browser/devtools/commandline/test/browser_gcli_keyboard3.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_keyboard4.js b/browser/devtools/commandline/test/browser_gcli_keyboard4.js
index 6431151..0c8d9c2 100644
--- a/browser/devtools/commandline/test/browser_gcli_keyboard4.js
+++ b/browser/devtools/commandline/test/browser_gcli_keyboard4.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_keyboard5.js b/browser/devtools/commandline/test/browser_gcli_keyboard5.js
index a4c5110..f6bab08 100644
--- a/browser/devtools/commandline/test/browser_gcli_keyboard5.js
+++ b/browser/devtools/commandline/test/browser_gcli_keyboard5.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_keyboard6.js b/browser/devtools/commandline/test/browser_gcli_keyboard6.js
index 6e878e1..4924684 100644
--- a/browser/devtools/commandline/test/browser_gcli_keyboard6.js
+++ b/browser/devtools/commandline/test/browser_gcli_keyboard6.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_menu.js b/browser/devtools/commandline/test/browser_gcli_menu.js
index f03a24e..fa9b7b3 100644
--- a/browser/devtools/commandline/test/browser_gcli_menu.js
+++ b/browser/devtools/commandline/test/browser_gcli_menu.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_node.js b/browser/devtools/commandline/test/browser_gcli_node.js
index 934f217..8d4d67f 100644
--- a/browser/devtools/commandline/test/browser_gcli_node.js
+++ b/browser/devtools/commandline/test/browser_gcli_node.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_pref1.js b/browser/devtools/commandline/test/browser_gcli_pref1.js
index 629dd63..535b812 100644
--- a/browser/devtools/commandline/test/browser_gcli_pref1.js
+++ b/browser/devtools/commandline/test/browser_gcli_pref1.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_pref2.js b/browser/devtools/commandline/test/browser_gcli_pref2.js
index 0fd5922..8d0c405 100644
--- a/browser/devtools/commandline/test/browser_gcli_pref2.js
+++ b/browser/devtools/commandline/test/browser_gcli_pref2.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_remotews.js b/browser/devtools/commandline/test/browser_gcli_remotews.js
index bbc9bef..dc47ba5 100644
--- a/browser/devtools/commandline/test/browser_gcli_remotews.js
+++ b/browser/devtools/commandline/test/browser_gcli_remotews.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_remotexhr.js b/browser/devtools/commandline/test/browser_gcli_remotexhr.js
index a635202..77c7863 100644
--- a/browser/devtools/commandline/test/browser_gcli_remotexhr.js
+++ b/browser/devtools/commandline/test/browser_gcli_remotexhr.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_resource.js b/browser/devtools/commandline/test/browser_gcli_resource.js
index eeae607..97eb51d 100644
--- a/browser/devtools/commandline/test/browser_gcli_resource.js
+++ b/browser/devtools/commandline/test/browser_gcli_resource.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_short.js b/browser/devtools/commandline/test/browser_gcli_short.js
index 3b5bcae..c81482a 100644
--- a/browser/devtools/commandline/test/browser_gcli_short.js
+++ b/browser/devtools/commandline/test/browser_gcli_short.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_spell.js b/browser/devtools/commandline/test/browser_gcli_spell.js
index cb4a741..765ee09 100644
--- a/browser/devtools/commandline/test/browser_gcli_spell.js
+++ b/browser/devtools/commandline/test/browser_gcli_spell.js
@@ -27,11 +27,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_split.js b/browser/devtools/commandline/test/browser_gcli_split.js
index 000afae..a52556c 100644
--- a/browser/devtools/commandline/test/browser_gcli_split.js
+++ b/browser/devtools/commandline/test/browser_gcli_split.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_string.js b/browser/devtools/commandline/test/browser_gcli_string.js
index bc30e99..a281f97 100644
--- a/browser/devtools/commandline/test/browser_gcli_string.js
+++ b/browser/devtools/commandline/test/browser_gcli_string.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_tokenize.js b/browser/devtools/commandline/test/browser_gcli_tokenize.js
index 5a833c5..bcbf11a 100644
--- a/browser/devtools/commandline/test/browser_gcli_tokenize.js
+++ b/browser/devtools/commandline/test/browser_gcli_tokenize.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_tooltip.js b/browser/devtools/commandline/test/browser_gcli_tooltip.js
index 434c5b5..217a67c 100644
--- a/browser/devtools/commandline/test/browser_gcli_tooltip.js
+++ b/browser/devtools/commandline/test/browser_gcli_tooltip.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_types.js b/browser/devtools/commandline/test/browser_gcli_types.js
index 3b95dea..ced96d7 100644
--- a/browser/devtools/commandline/test/browser_gcli_types.js
+++ b/browser/devtools/commandline/test/browser_gcli_types.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_union.js b/browser/devtools/commandline/test/browser_gcli_union.js
index a9ed03b..b30858e 100644
--- a/browser/devtools/commandline/test/browser_gcli_union.js
+++ b/browser/devtools/commandline/test/browser_gcli_union.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_url.js b/browser/devtools/commandline/test/browser_gcli_url.js
index af3c319..1dc0dfd2 100644
--- a/browser/devtools/commandline/test/browser_gcli_url.js
+++ b/browser/devtools/commandline/test/browser_gcli_url.js
@@ -28,11 +28,11 @@ function test() {
   return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/helpers.js b/browser/devtools/commandline/test/helpers.js
index dc33b18..14de3ae 100644
--- a/browser/devtools/commandline/test/helpers.js
+++ b/browser/devtools/commandline/test/helpers.js
@@ -18,7 +18,7 @@
 
 // A copy of this code exists in firefox mochitests. They should be kept
 // in sync. Hence the exports synonym for non AMD contexts.
-var { helpers, gcli, assert } = (function() {
+var { helpers, assert } = (function() {
 
 var helpers = {};
 
@@ -30,7 +30,6 @@ var util = require('gcli/util/util');
 var Promise = require('gcli/util/promise').Promise;
 var cli = require('gcli/cli');
 var KeyEvent = require('gcli/util/util').KeyEvent;
-var gcli = require('gcli/index');
 
 /**
  * See notes in helpers.checkOptions()
@@ -1270,5 +1269,5 @@ function log(message) {
   }
 }
 
-return { helpers: helpers, gcli: gcli, assert: assert };
+return { helpers: helpers, assert: assert };
 })();

From 04636866025b99b6ec886be29b33c05520f9f511 Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Thu, 29 Jan 2015 18:16:13 +0000
Subject: [PATCH 04/38] Refactor the startup process to move all module
 discovery to one place

Previously there was commands-index and gcli/index, but now all the
module discovery all happens in commands-index. This means that the
DeveloperToolbar can create Requisitions and FFDisplay objects itself
without the need of helpers (in order to get access to the 'system').

Signed-off-by: Joe Walker <jwalker@mozilla.com>
---
 browser/devtools/commandline/commands-index.js | 114 ++++++++++++++++++++++---
 browser/devtools/shared/DeveloperToolbar.jsm   |  16 ++--
 toolkit/devtools/gcli/source/lib/gcli/index.js | 107 -----------------------
 3 files changed, 112 insertions(+), 125 deletions(-)

diff --git a/browser/devtools/commandline/commands-index.js b/browser/devtools/commandline/commands-index.js
index 6cf7f57..886eaa5 100644
--- a/browser/devtools/commandline/commands-index.js
+++ b/browser/devtools/commandline/commands-index.js
@@ -4,9 +4,73 @@
 
 "use strict";
 
-const gcli = require("gcli/index");
+const defaultTools = require("main").defaultTools;
+const api = require('gcli/api');
+
+/**
+ * This is the basic list of modules that should be loaded into each
+ * requisition instance
+ */
+exports.baseModules = [
+  'gcli/types/delegate',
+  'gcli/types/selection',
+  'gcli/types/array',
+
+  'gcli/types/boolean',
+  'gcli/types/command',
+  'gcli/types/date',
+  'gcli/types/file',
+  'gcli/types/javascript',
+  'gcli/types/node',
+  'gcli/types/number',
+  'gcli/types/resource',
+  'gcli/types/setting',
+  'gcli/types/string',
+  'gcli/types/union',
+  'gcli/types/url',
+
+  'gcli/fields/fields',
+  'gcli/fields/delegate',
+  'gcli/fields/selection',
+
+  'gcli/ui/focus',
+  'gcli/ui/intro',
+
+  'gcli/converters/converters',
+  'gcli/converters/basic',
+  // 'gcli/converters/html',      // Prevent use of innerHTML
+  'gcli/converters/terminal',
+
+  'gcli/languages/command',
+  'gcli/languages/javascript',
+
+  // 'gcli/connectors/direct',    // No need for loopback testing
+  // 'gcli/connectors/rdp',       // Needs fixing
+  // 'gcli/connectors/websocket', // Not from chrome
+  // 'gcli/connectors/xhr',       // Not from chrome
 
-const commandModules = [
+  // 'gcli/cli',                  // No need for '{' with web console
+  'gcli/commands/clear',
+  // 'gcli/commands/connect',     // We need to fix our RDP connector
+  'gcli/commands/context',
+  // 'gcli/commands/exec',        // No exec in Firefox yet
+  'gcli/commands/global',
+  'gcli/commands/help',
+  // 'gcli/commands/intro',       // No need for intro command
+  'gcli/commands/lang',
+  // 'gcli/commands/mocks',       // Only for testing
+  'gcli/commands/pref',
+  // 'gcli/commands/preflist',    // Too slow in Firefox
+  // 'gcli/commands/test',        // Only for testing
+
+  // No demo or node commands
+];
+
+/**
+ * Some commands belong to a tool (see getToolModules). This is a list of the
+ * modules that are *not* owned by a tool.
+ */
+exports.devtoolsModules = [
   "devtools/tilt/tilt-commands",
   "gcli/commands/addon",
   "gcli/commands/appcache",
@@ -27,15 +91,43 @@ const commandModules = [
   "gcli/commands/tools",
 ];
 
-gcli.addItemsByModule(commandModules, { delayedLoad: true });
+/**
+ * Find the tools that have 'command: [ "some/module" ]' definitions, and
+ * flatten them into a single array of module names.
+ */
+exports.getToolModules = function() {
+  return defaultTools.map(definition => definition.commands || [])
+                     .reduce((prev, curr) => prev.concat(curr), []);
+};
 
-const defaultTools = require("main").defaultTools;
-for (let definition of defaultTools) {
-  if (definition.commands) {
-    gcli.addItemsByModule(definition.commands, { delayedLoad: true });
-  }
-}
+/**
+ * Builds on #getModuleNames() by registering the items with GCLI including
+ * the items that come from the mozcmd directory
+ */
+exports.addAllItems = function(system) {
+  system.addItemsByModule(exports.baseModules, { delayedLoad: true });
+  system.addItemsByModule(exports.devtoolsModules, { delayedLoad: true });
+  system.addItemsByModule(exports.getToolModules(), { delayedLoad: true });
+
+  let { mozDirLoader } = require("gcli/commands/cmd");
+  system.addItemsByModule("mozcmd", { delayedLoad: true, loader: mozDirLoader });
+};
 
-const { mozDirLoader } = require("gcli/commands/cmd");
+/**
+ * Cache of the system we created
+ */
+var system;
+
+/**
+ * Setup a system if we need to and make sure all the registered modules are
+ * loaded.
+ */
+exports.load = function() {
+  if (system == null) {
+    console.log('Creating GCLI system');
+    system = api.createSystem();
+    exports.addAllItems(system);
+  }
 
-gcli.addItemsByModule("mozcmd", { delayedLoad: true, loader: mozDirLoader });
+  return system.load().then(() => system);
+};
diff --git a/browser/devtools/shared/DeveloperToolbar.jsm b/browser/devtools/shared/DeveloperToolbar.jsm
index 9c2375e..37ac505 100644
--- a/browser/devtools/shared/DeveloperToolbar.jsm
+++ b/browser/devtools/shared/DeveloperToolbar.jsm
@@ -39,11 +39,11 @@ XPCOMUtils.defineLazyGetter(this, "toolboxStrings", function () {
 
 const Telemetry = require("devtools/shared/telemetry");
 
+// TODO: Use XPCOMUtils.defineLazyModuleGetter
 // This lazy getter is needed to prevent a require loop
-XPCOMUtils.defineLazyGetter(this, "gcli", () => {
+XPCOMUtils.defineLazyGetter(this, "gcliInit", () => {
   try {
-    require("devtools/commandline/commands-index");
-    return require("gcli/index");
+    return require("devtools/commandline/commands-index");
   }
   catch (ex) {
     console.error(ex);
@@ -72,8 +72,9 @@ let CommandUtils = {
    * Utility to ensure that things are loaded in the correct order
    */
   createRequisition: function(environment) {
-    return gcli.load().then(() => {
-      return gcli.createRequisition({ environment: environment });
+    return gcliInit.load().then(system => {
+      var Requisition = require('gcli/cli').Requisition;
+      return new Requisition(system, { environment: environment });
     });
   },
 
@@ -408,8 +409,9 @@ DeveloperToolbar.prototype.show = function(focus) {
 
       this._doc.getElementById("Tools:DevToolbar").setAttribute("checked", "true");
 
-      return gcli.load().then(() => {
-        this.display = gcli.createDisplay({
+      return gcliInit.load().then(system => {
+        var FFDisplay = require('gcli/mozui/ffdisplay').FFDisplay;
+        this.display = new FFDisplay(system, {
           contentDocument: this._chromeWindow.gBrowser.contentDocument,
           chromeDocument: this._doc,
           chromeWindow: this._chromeWindow,
diff --git a/toolkit/devtools/gcli/source/lib/gcli/index.js b/toolkit/devtools/gcli/source/lib/gcli/index.js
index c56e10e..0b889b6 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/index.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/index.js
@@ -18,114 +18,7 @@
 
 var Cc = require('chrome').Cc;
 var Ci = require('chrome').Ci;
-var Cu = require('chrome').Cu;
 
-/*
- * GCLI is built from a number of components (called items) composed as
- * required for each environment.
- * When adding to or removing from this list, we should keep the basics in sync
- * with the other environments.
- * See:
- * - lib/gcli/index.js: Generic basic set (without commands)
- * - lib/gcli/demo.js: Adds demo commands to basic set for use in web demo
- * - gcli.js: Add commands to basic set for use in Node command line
- * - lib/gcli/index.js: (mozmaster branch) From scratch listing for Firefox
- * - lib/gcli/connectors/index.js: Client only items when executing remotely
- * - lib/gcli/connectors/direct.js: Test items for connecting to in-process GCLI
- */
-exports.items = [
-  require('./types/delegate').items,
-  require('./types/selection').items,
-  require('./types/array').items,
-
-  require('./types/boolean').items,
-  require('./types/command').items,
-  require('./types/date').items,
-  require('./types/file').items,
-  require('./types/javascript').items,
-  require('./types/node').items,
-  require('./types/number').items,
-  require('./types/resource').items,
-  require('./types/setting').items,
-  require('./types/string').items,
-  require('./types/union').items,
-  require('./types/url').items,
-
-  require('./fields/fields').items,
-  require('./fields/delegate').items,
-  require('./fields/selection').items,
-
-  require('./ui/focus').items,
-  require('./ui/intro').items,
-
-  require('./converters/converters').items,
-  require('./converters/basic').items,
-  // require('./converters/html').items, // Prevent use of innerHTML
-  require('./converters/terminal').items,
-
-  require('./languages/command').items,
-  require('./languages/javascript').items,
-
-  // require('./connectors/direct').items, // No need for loopback testing
-  // require('./connectors/rdp').items, // Needs fixing
-  // require('./connectors/websocket').items, // Not from chrome
-  // require('./connectors/xhr').items, // Not from chrome
-
-  // require('./cli').items, // No need for '{' with web console
-  require('./commands/clear').items,
-  // require('./commands/connect').items, // We need to fix our RDP connector
-  require('./commands/context').items,
-  // require('./commands/exec').items, // No exec in Firefox yet
-  require('./commands/global').items,
-  require('./commands/help').items,
-  // require('./commands/intro').items, // No need for intro command
-  require('./commands/lang').items,
-  // require('./commands/mocks').items, // Only for testing
-  require('./commands/pref').items,
-  // require('./commands/preflist').items, // Too slow in Firefox
-  // require('./commands/test').items, // Only for testing
-
-  // No demo or node commands
-
-].reduce(function(prev, curr) { return prev.concat(curr); }, []);
-
-var api = require('./api');
-var system = api.createSystem();
-
-// Export the system API by adding it to our exports
-Object.keys(system).forEach(function(key) {
-  exports[key] = system[key];
-});
-
-system.addItems(exports.items);
-
-var host = require('./util/host');
-
-exports.useTarget = host.script.useTarget;
-
-/**
- * This code is internal and subject to change without notice.
- * createDisplay() for Firefox requires an options object with the following
- * members:
- * - contentDocument: From the window of the attached tab
- * - chromeDocument: GCLITerm.document
- * - environment.hudId: GCLITerm.hudId
- * - jsEnvironment.globalObject: 'window'
- * - jsEnvironment.evalFunction: 'eval' in a sandbox
- * - inputElement: GCLITerm.inputNode
- * - completeElement: GCLITerm.completeNode
- * - hintElement: GCLITerm.hintNode
- * - inputBackgroundElement: GCLITerm.inputStack
- */
-exports.createDisplay = function(options) {
-  var FFDisplay = require('./mozui/ffdisplay').FFDisplay;
-  return new FFDisplay(system, options);
-};
-
-exports.createRequisition = function(options) {
-  var Requisition = require('./cli').Requisition;
-  return new Requisition(system, options);
-};
 
 var prefSvc = Cc['@mozilla.org/preferences-service;1']
                         .getService(Ci.nsIPrefService);

From b83c04abf941ea337b03cce742547b1b569cdad8 Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Fri, 30 Jan 2015 14:55:42 +0000
Subject: [PATCH 05/38] Inline getEvalCommand.

Didn't add anything, but served to confuse what was happening to
requisition.system, which we want to be dynamically swappable.

Signed-off-by: Joe Walker <jwalker@mozilla.com>
---
 toolkit/devtools/gcli/source/lib/gcli/cli.js | 14 ++------------
 1 file changed, 2 insertions(+), 12 deletions(-)

diff --git a/toolkit/devtools/gcli/source/lib/gcli/cli.js b/toolkit/devtools/gcli/source/lib/gcli/cli.js
index d00a437..9ca6251 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/cli.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/cli.js
@@ -101,16 +101,6 @@ var removeMapping = function(requisition) {
 };
 
 /**
- * Some manual intervention is needed in parsing the { command.
- */
-function getEvalCommand(commands) {
-  if (getEvalCommand._cmd == null) {
-    getEvalCommand._cmd = commands.get(evalCmd.name);
-  }
-  return getEvalCommand._cmd;
-}
-
-/**
  * Assignment is a link between a parameter and the data for that parameter.
  * The data for the parameter is available as in the preferred type and as
  * an Argument for the CLI.
@@ -1786,8 +1776,8 @@ Requisition.prototype._split = function(args) {
   if (args[0].type === 'ScriptArgument') {
     // Special case: if the user enters { console.log('foo'); } then we need to
     // use the hidden 'eval' command
-    conversion = new Conversion(getEvalCommand(this.system.commands),
-                                new ScriptArgument());
+    var evalCmd = this.system.commands.get(evalCmd.name)
+    conversion = new Conversion(evalCmd, new ScriptArgument());
     this._setAssignmentInternal(this.commandAssignment, conversion);
     return;
   }

From 356f5dbe270cf6c1fbfc272ef7f646cfaddf1732 Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Fri, 30 Jan 2015 14:56:18 +0000
Subject: [PATCH 06/38] Output doesn't need the context object; remove it.

Signed-off-by: Joe Walker <jwalker@mozilla.com>
---
 toolkit/devtools/gcli/source/lib/gcli/cli.js | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/toolkit/devtools/gcli/source/lib/gcli/cli.js b/toolkit/devtools/gcli/source/lib/gcli/cli.js
index 9ca6251..b4546fb 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/cli.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/cli.js
@@ -2035,7 +2035,7 @@ Requisition.prototype.exec = function(options) {
     typed = typed.replace(/\s*}\s*$/, '');
   }
 
-  var output = new Output(this.conversionContext, {
+  var output = new Output({
     command: command,
     args: args,
     typed: typed,
@@ -2128,14 +2128,13 @@ exports.Requisition = Requisition;
 /**
  * A simple object to hold information about the output of a command
  */
-function Output(context, options) {
+function Output(options) {
   options = options || {};
   this.command = options.command || '';
   this.args = options.args || {};
   this.typed = options.typed || '';
   this.canonical = options.canonical || '';
   this.hidden = options.hidden === true ? true : false;
-  this.converters = context.system.converters;
 
   this.type = undefined;
   this.data = undefined;
@@ -2180,7 +2179,8 @@ Output.prototype.complete = function(data, error) {
  * Call converters.convert using the data in this Output object
  */
 Output.prototype.convert = function(type, conversionContext) {
-  return this.converters.convert(this.data, this.type, type, conversionContext);
+  var converters = conversionContext.system.converters;
+  return converters.convert(this.data, this.type, type, conversionContext);
 };
 
 Output.prototype.toJson = function() {

From 50306fad707f14ee581562ec0fc3181821adbe2d Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Fri, 30 Jan 2015 14:54:19 +0000
Subject: [PATCH 07/38] =?UTF-8?q?Variable=20rename=20gcli=20=E2=86=92=20sy?=
 =?UTF-8?q?stem.?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Make it clearer what were acting on here

Signed-off-by: Joe Walker <jwalker@mozilla.com>
---
 toolkit/devtools/gcli/source/lib/gcli/connectors/index.js | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/toolkit/devtools/gcli/source/lib/gcli/connectors/index.js b/toolkit/devtools/gcli/source/lib/gcli/connectors/index.js
index 5857344..0609bca 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/connectors/index.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/connectors/index.js
@@ -132,10 +132,10 @@ exports.connect = function(options) {
   });
 };
 
-exports.addItems = function(gcli, specs, connection) {
-  exports.removeRemoteItems(gcli, connection);
+exports.addItems = function(system, specs, connection) {
+  exports.removeRemoteItems(system, connection);
   var remoteItems = exports.addLocalFunctions(specs, connection);
-  gcli.addItems(remoteItems);
+  system.addItems(remoteItems);
 };
 
 /**
@@ -176,10 +176,10 @@ exports.addLocalFunctions = function(specs, connection) {
   return specs;
 };
 
-exports.removeRemoteItems = function(gcli, connection) {
-  gcli.commands.getAll().forEach(function(command) {
+exports.removeRemoteItems = function(system, connection) {
+  system.commands.getAll().forEach(function(command) {
     if (command.connection === connection) {
-      gcli.commands.remove(command);
+      system.commands.remove(command);
     }
   });
 };

From 517c9a9adc99bb023e9b1c2199c1fb2f6d460f1e Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Fri, 6 Feb 2015 15:46:55 +0000
Subject: [PATCH 08/38] Merge from GCLI web

This is an import of all the changes made in the GCLI repo. See here:
  https://github.com/joewalker/gcli/commits/master
The changes are those from 4 Feb 2015 (d59796b) to 12 Feb 2015 (fd63021)
---
 toolkit/devtools/gcli/source/lib/gcli/api.js       | 217 --------------
 toolkit/devtools/gcli/source/lib/gcli/cli.js       |   9 +-
 .../gcli/source/lib/gcli/commands/commands.js      |  15 +-
 .../gcli/source/lib/gcli/commands/connect.js       |  40 ++-
 .../gcli/source/lib/gcli/connectors/connectors.js  |  13 +-
 .../gcli/source/lib/gcli/connectors/index.js       | 184 +++---------
 .../gcli/source/lib/gcli/connectors/protocol.js    |  22 +-
 .../gcli/source/lib/gcli/connectors/remoted.js     | 205 ++++++++++---
 .../gcli/source/lib/gcli/converters/basic.js       |  16 ++
 .../gcli/source/lib/gcli/converters/converters.js  |   9 +
 .../devtools/gcli/source/lib/gcli/fields/fields.js |   7 +
 .../gcli/source/lib/gcli/languages/command.js      |   7 +-
 .../gcli/source/lib/gcli/languages/languages.js    |  12 +-
 toolkit/devtools/gcli/source/lib/gcli/settings.js  |   1 -
 toolkit/devtools/gcli/source/lib/gcli/system.js    | 316 +++++++++++++++++++++
 .../gcli/source/lib/gcli/types/delegate.js         |  29 +-
 .../gcli/source/lib/gcli/types/selection.js        |  32 ++-
 .../devtools/gcli/source/lib/gcli/types/setting.js |   3 +
 .../devtools/gcli/source/lib/gcli/types/types.js   |   4 +-
 toolkit/devtools/gcli/source/lib/gcli/ui/menu.js   |   2 +-
 20 files changed, 650 insertions(+), 493 deletions(-)
 delete mode 100644 toolkit/devtools/gcli/source/lib/gcli/api.js
 create mode 100644 toolkit/devtools/gcli/source/lib/gcli/system.js

diff --git a/toolkit/devtools/gcli/source/lib/gcli/api.js b/toolkit/devtools/gcli/source/lib/gcli/api.js
deleted file mode 100644
index c2d0f71..0000000
--- a/toolkit/devtools/gcli/source/lib/gcli/api.js
+++ /dev/null
@@ -1,217 +0,0 @@
-/*
- * Copyright 2012, Mozilla Foundation and contributors
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-'use strict';
-
-var Promise = require('./util/promise').Promise;
-var Commands = require('./commands/commands').Commands;
-var Connectors = require('./connectors/connectors').Connectors;
-var Converters = require('./converters/converters').Converters;
-var Fields = require('./fields/fields').Fields;
-var Languages = require('./languages/languages').Languages;
-var Settings = require('./settings').Settings;
-var Types = require('./types/types').Types;
-
-/**
- * This is the heart of the API that we expose to the outside
- */
-exports.createSystem = function() {
-
-  var components = {
-    connector: new Connectors(),
-    converter: new Converters(),
-    field: new Fields(),
-    language: new Languages(),
-    type: new Types()
-  };
-  components.setting = new Settings(components.type);
-  components.command = new Commands(components.type);
-
-  var getItemType = function(item) {
-    if (item.item) {
-      return item.item;
-    }
-    // Some items are registered using the constructor so we need to check
-    // the prototype for the the type of the item
-    return (item.prototype && item.prototype.item) ?
-           item.prototype.item : 'command';
-  };
-
-  var addItem = function(item) {
-    components[getItemType(item)].add(item);
-  };
-
-  var removeItem = function(item) {
-    components[getItemType(item)].remove(item);
-  };
-
-  /**
-   * loadableModules is a lookup of names to module loader functions (like
-   * the venerable 'require') to which we can pass a name and get back a
-   * JS object (or a promise of a JS object). This allows us to have custom
-   * loaders to get stuff from the filesystem etc.
-   */
-  var loadableModules = {};
-
-  /**
-   * loadedModules is a lookup by name of the things returned by the functions
-   * in loadableModules so we can track what we need to unload / reload.
-   */
-  var loadedModules = {};
-
-  var unloadModule = function(name) {
-    var existingModule = loadedModules[name];
-    if (existingModule != null) {
-      existingModule.items.forEach(removeItem);
-    }
-    delete loadedModules[name];
-  };
-
-  var loadModule = function(name) {
-    var existingModule = loadedModules[name];
-    unloadModule(name);
-
-    // And load the new items
-    try {
-      var loader = loadableModules[name];
-      return Promise.resolve(loader(name)).then(function(newModule) {
-        if (existingModule === newModule) {
-          return;
-        }
-
-        if (newModule == null) {
-          throw 'Module \'' + name + '\' not found';
-        }
-
-        if (newModule.items == null || typeof newModule.items.forEach !== 'function') {
-          console.log('Exported properties: ' + Object.keys(newModule).join(', '));
-          throw 'Module \'' + name + '\' has no \'items\' array export';
-        }
-
-        newModule.items.forEach(addItem);
-
-        loadedModules[name] = newModule;
-      });
-    }
-    catch (ex) {
-      console.error(ex);
-      return Promise.reject('Failure when loading \'' + name + '\'');
-    }
-  };
-
-  var pendingChanges = false;
-
-  var api = {
-    addItems: function(items) {
-      items.forEach(addItem);
-    },
-
-    removeItems: function(items) {
-      items.forEach(removeItem);
-    },
-
-    addItemsByModule: function(names, options) {
-      options = options || {};
-      if (typeof names === 'string') {
-        names = [ names ];
-      }
-      names.forEach(function(name) {
-        if (options.loader == null) {
-          options.loader = function(name) {
-            return require(name);
-          };
-        }
-        loadableModules[name] = options.loader;
-
-        if (options.delayedLoad) {
-          pendingChanges = true;
-        }
-        else {
-          loadModule(name).then(null, console.error);
-        }
-      });
-    },
-
-    removeItemsByModule: function(name) {
-      delete loadableModules[name];
-      unloadModule(name);
-    },
-
-    load: function() {
-      if (!pendingChanges) {
-        return Promise.resolve();
-      }
-
-      // clone loadedModules, so we can remove what is left at the end
-      var modules = Object.keys(loadedModules).map(function(name) {
-        return loadedModules[name];
-      });
-
-      var promises = Object.keys(loadableModules).map(function(name) {
-        delete modules[name];
-        return loadModule(name);
-      });
-
-      Object.keys(modules).forEach(unloadModule);
-      pendingChanges = false;
-
-      return Promise.all(promises);
-    }
-  };
-
-  Object.defineProperty(api, 'commands', {
-    get: function() { return components.command; },
-    set: function(commands) { components.command = commands; },
-    enumerable: true
-  });
-
-  Object.defineProperty(api, 'connectors', {
-    get: function() { return components.connector; },
-    enumerable: true
-  });
-
-  Object.defineProperty(api, 'converters', {
-    get: function() { return components.converter; },
-    enumerable: true
-  });
-
-  Object.defineProperty(api, 'fields', {
-    get: function() { return components.field; },
-    enumerable: true
-  });
-
-  Object.defineProperty(api, 'languages', {
-    get: function() { return components.language; },
-    enumerable: true
-  });
-
-  Object.defineProperty(api, 'settings', {
-    get: function() { return components.setting; },
-    enumerable: true
-  });
-
-  Object.defineProperty(api, 'types', {
-    get: function() { return components.type; },
-    set: function(types) {
-      components.type = types;
-      components.command.types = types;
-      components.setting.types = types;
-    },
-    enumerable: true
-  });
-
-  return api;
-};
diff --git a/toolkit/devtools/gcli/source/lib/gcli/cli.js b/toolkit/devtools/gcli/source/lib/gcli/cli.js
index b4546fb..64b1893 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/cli.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/cli.js
@@ -308,7 +308,7 @@ var evalCmd = {
     var reply = customEval(args.javascript);
     return context.typedData(typeof reply, reply);
   },
-  isCommandRegexp: /^\s*{\s*/
+  isCommandRegexp: /^\s*\{\s*/
 };
 
 exports.items = [ evalCmd ];
@@ -694,7 +694,8 @@ Object.defineProperty(Requisition.prototype, 'status', {
  */
 Requisition.prototype.getStatusMessage = function() {
   if (this.commandAssignment.getStatus() !== Status.VALID) {
-    return l10n.lookup('cliUnknownCommand');
+    return l10n.lookupFormat('cliUnknownCommand2',
+                             [ this.commandAssignment.arg.text ]);
   }
 
   var assignments = this.getAssignments();
@@ -1776,8 +1777,8 @@ Requisition.prototype._split = function(args) {
   if (args[0].type === 'ScriptArgument') {
     // Special case: if the user enters { console.log('foo'); } then we need to
     // use the hidden 'eval' command
-    var evalCmd = this.system.commands.get(evalCmd.name)
-    conversion = new Conversion(evalCmd, new ScriptArgument());
+    var command = this.system.commands.get(evalCmd.name);
+    conversion = new Conversion(command, new ScriptArgument());
     this._setAssignmentInternal(this.commandAssignment, conversion);
     return;
   }
diff --git a/toolkit/devtools/gcli/source/lib/gcli/commands/commands.js b/toolkit/devtools/gcli/source/lib/gcli/commands/commands.js
index a1f073e..0cc4cfb 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/commands/commands.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/commands/commands.js
@@ -327,9 +327,14 @@ exports.Parameter = Parameter;
 
 /**
  * A store for a list of commands
+ * @param types Each command uses a set of Types to parse its parameters so the
+ * Commands container needs access to the list of available types.
+ * @param location String that, if set will force all commands to have a
+ * matching runAt property to be accepted
  */
-function Commands(types) {
+function Commands(types, location) {
   this.types = types;
+  this.location = location;
 
   // A lookup hash of our registered commands
   this._commands = {};
@@ -345,9 +350,15 @@ function Commands(types) {
 /**
  * Add a command to the list of known commands.
  * @param commandSpec The command and its metadata.
- * @return The new command
+ * @return The new command, or null if a location property has been set and the
+ * commandSpec doesn't have a matching runAt property.
  */
 Commands.prototype.add = function(commandSpec) {
+  if (this.location != null && commandSpec.runAt != null &&
+      commandSpec.runAt !== this.location) {
+    return;
+  }
+
   if (this._commands[commandSpec.name] != null) {
     // Roughly commands.remove() without the event call, which we do later
     delete this._commands[commandSpec.name];
diff --git a/toolkit/devtools/gcli/source/lib/gcli/commands/connect.js b/toolkit/devtools/gcli/source/lib/gcli/commands/connect.js
index bc7d718..beb2408 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/commands/connect.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/commands/connect.js
@@ -18,11 +18,12 @@
 
 var l10n = require('../util/l10n');
 var cli = require('../cli');
+var GcliFront = require('../connectors/remoted').GcliFront;
 
 /**
  * A lookup of the current connection
  */
-var connections = {};
+var fronts = {};
 
 /**
  * 'connection' type
@@ -32,8 +33,8 @@ var connection = {
   name: 'connection',
   parent: 'selection',
   lookup: function() {
-    return Object.keys(connections).map(function(prefix) {
-      return { name: prefix, value: connections[prefix] };
+    return Object.keys(fronts).map(function(prefix) {
+      return { name: prefix, value: fronts[prefix] };
     });
   }
 };
@@ -87,19 +88,19 @@ var connect = {
   returnType: 'string',
 
   exec: function(args, context) {
-    if (connections[args.prefix] != null) {
+    if (fronts[args.prefix] != null) {
       throw new Error(l10n.lookupFormat('connectDupReply', [ args.prefix ]));
     }
 
-    var connector = args.method || context.system.connectors.get('xhr');
+    args.method = args.method || context.system.connectors.get('xhr');
 
-    return connector.connect(args.url).then(function(connection) {
-      // Nasty: stash the prefix on the connection to help us tidy up
-      connection.prefix = args.prefix;
-      connections[args.prefix] = connection;
+    return GcliFront.create(args.method, args.url).then(function(front) {
+      // Nasty: stash the prefix on the front to help us tidy up
+      front.prefix = args.prefix;
+      fronts[args.prefix] = front;
 
-      return connection.call('specs').then(function(specs) {
-        var remoter = this.createRemoter(args.prefix, connection);
+      return front.specs().then(function(specs) {
+        var remoter = this.createRemoter(args.prefix, front);
         var commands = cli.getMapping(context).requisition.system.commands;
         commands.addProxyCommands(specs, remoter, args.prefix, args.url);
 
@@ -116,7 +117,7 @@ var connect = {
    * When we register a set of remote commands, we need to provide a proxy
    * executor. This is that executor.
    */
-  createRemoter: function(prefix, connection) {
+  createRemoter: function(prefix, front) {
     return function(cmdArgs, context) {
       var typed = context.typed;
 
@@ -126,12 +127,7 @@ var connect = {
         typed = typed.substring(prefix.length).replace(/^ */, '');
       }
 
-      var data = {
-        typed: typed,
-        args: cmdArgs
-      };
-
-      return connection.call('execute', data).then(function(reply) {
+      return front.execute(typed).then(function(reply) {
         var typedData = context.typedData(reply.type, reply.data);
         if (!reply.error) {
           return typedData;
@@ -162,11 +158,11 @@ var disconnect = {
   returnType: 'string',
 
   exec: function(args, context) {
-    var connection = args.prefix;
-    return connection.disconnect().then(function() {
+    var front = args.prefix;
+    return front.connection.disconnect().then(function() {
       var commands = cli.getMapping(context).requisition.system.commands;
-      var removed = commands.removeProxyCommands(connection.prefix);
-      delete connections[connection.prefix];
+      var removed = commands.removeProxyCommands(front.prefix);
+      delete fronts[front.prefix];
       return l10n.lookupFormat('disconnectReply', [ removed.length ]);
     });
   }
diff --git a/toolkit/devtools/gcli/source/lib/gcli/connectors/connectors.js b/toolkit/devtools/gcli/source/lib/gcli/connectors/connectors.js
index cf54382..1578f9c 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/connectors/connectors.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/connectors/connectors.js
@@ -138,14 +138,21 @@ Connectors.prototype.getAll = function() {
   }.bind(this));
 };
 
+var defaultConnectorName;
+
 /**
- * Get access to a connector by name. If name is undefined then use the first
- * registered connector as a default.
+ * Get access to a connector by name. If name is undefined then first try to
+ * use the same connector that we used last time, and if there was no last
+ * time, then just use the first registered connector as a default.
  */
 Connectors.prototype.get = function(name) {
   if (name == null) {
-    name = Object.keys(this._registered)[0];
+    name = (defaultConnectorName == null) ?
+        Object.keys(this._registered)[0] :
+        defaultConnectorName;
   }
+
+  defaultConnectorName = name;
   return this._registered[name];
 };
 
diff --git a/toolkit/devtools/gcli/source/lib/gcli/connectors/index.js b/toolkit/devtools/gcli/source/lib/gcli/connectors/index.js
index 0609bca..156c5c3 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/connectors/index.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/connectors/index.js
@@ -16,170 +16,52 @@
 
 'use strict';
 
-var api = require('../api');
-var Commands = require('../commands/commands').Commands;
-var Types = require('../types/types').Types;
+var createSystem = require('../system').createSystem;
+var connectSystems = require('../system').connectSystems;
 
 // Patch-up IE9
 require('../util/legacy');
 
-/*
- * GCLI is built from a number of components (called items) composed as
- * required for each environment.
- * When adding to or removing from this list, we should keep the basics in sync
- * with the other environments.
- * See:
- * - lib/gcli/index.js: Generic basic set (without commands)
- * - lib/gcli/demo.js: Adds demo commands to basic set for use in web demo
- * - gcli.js: Add commands to basic set for use in Node command line
- * - lib/gcli/index.js: (mozmaster branch) From scratch listing for Firefox
- * - lib/gcli/connectors/index.js: Client only items when executing remotely
- * - lib/gcli/connectors/direct.js: Test items for connecting to in-process GCLI
- */
-var items = [
-  // First we need to add the local types which other types depend on
-  require('../types/delegate').items,
-  require('../types/selection').items,
-  require('../types/array').items,
-
-  require('../types/boolean').items,
-  require('../types/command').items,
-  require('../types/date').items,
-  require('../types/file').items,
-  require('../types/javascript').items,
-  require('../types/node').items,
-  require('../types/number').items,
-  require('../types/resource').items,
-  require('../types/setting').items,
-  require('../types/string').items,
-  require('../types/union').items,
-  require('../types/url').items,
-
-  require('../fields/fields').items,
-  require('../fields/delegate').items,
-  require('../fields/selection').items,
-
-  require('../ui/intro').items,
-  require('../ui/focus').items,
-
-  require('../converters/converters').items,
-  require('../converters/basic').items,
-  require('../converters/html').items,
-  require('../converters/terminal').items,
-
-  require('../languages/command').items,
-  require('../languages/javascript').items,
-
-  require('./direct').items,
-  // require('./rdp').items, // Firefox remote debug protocol
-  require('./websocket').items,
-  require('./xhr').items,
-
-  require('../commands/context').items,
-
-].reduce(function(prev, curr) { return prev.concat(curr); }, []);
-
-/**
- * These are the commands stored on the remote side that have converters which
- * we'll need to present the data
- */
-var requiredConverters = [
-  require('../cli').items,
-
-  require('../commands/clear').items,
-  require('../commands/connect').items,
-  require('../commands/exec').items,
-  require('../commands/global').items,
-  require('../commands/help').items,
-  require('../commands/intro').items,
-  require('../commands/lang').items,
-  require('../commands/preflist').items,
-  require('../commands/pref').items,
-  require('../commands/test').items,
-
-].reduce(function(prev, curr) { return prev.concat(curr); }, [])
- .filter(function(item) { return item.item === 'converter'; });
-
 /**
  * Connect to a remote system and setup the commands/types/converters etc needed
  * to make it all work
  */
-exports.connect = function(options) {
+exports.createSystem = function(options) {
   options = options || {};
 
-  var system = api.createSystem();
-
-  // Ugly hack, to aid testing
-  exports.api = system;
-
-  options.types = system.types = new Types();
-  options.commands = system.commands = new Commands(system.types);
+  var system = createSystem();
 
+  // The items that are always needed on the client
+  var items = [
+    require('../items/basic').items,
+    require('../items/ui').items,
+    require('../items/remote').items,
+    // The context command makes no sense on the server
+    require('../commands/context').items,
+  ].reduce(function(prev, curr) { return prev.concat(curr); }, []);
   system.addItems(items);
-  system.addItems(requiredConverters);
-
-  var connector = system.connectors.get(options.connector);
-  return connector.connect(options.url).then(function(connection) {
-    options.connection = connection;
-    connection.on('commandsChanged', function(specs) {
-      exports.addItems(system, specs, connection);
-    });
 
-    return connection.call('specs').then(function(specs) {
-      exports.addItems(system, specs, connection);
-      return connection;
-    });
-  });
-};
-
-exports.addItems = function(system, specs, connection) {
-  exports.removeRemoteItems(system, connection);
-  var remoteItems = exports.addLocalFunctions(specs, connection);
-  system.addItems(remoteItems);
-};
-
-/**
- * Take the data from the 'specs' command (or the 'commandsChanged' event) and
- * add function to proxy the execution back over the connection
- */
-exports.addLocalFunctions = function(specs, connection) {
-  // Inject an 'exec' function into the commands, and the connection into
-  // all the remote types
-  specs.forEach(function(commandSpec) {
-    //
-    commandSpec.connection = connection;
-    commandSpec.params.forEach(function(param) {
-      param.type.connection = connection;
-    });
-
-    if (!commandSpec.isParent) {
-      commandSpec.exec = function(args, context) {
-        var data = {
-          typed: (context.prefix ? context.prefix + ' ' : '') + context.typed
-        };
-
-        return connection.call('execute', data).then(function(reply) {
-          var typedData = context.typedData(reply.type, reply.data);
-          if (!reply.error) {
-            return typedData;
-          }
-          else {
-            throw typedData;
-          }
-        });
-      };
-    }
-
-    commandSpec.isProxy = true;
-  });
-
-  return specs;
-};
+  // These are the commands stored on the remote side that have converters which
+  // we'll need to present the data. Ideally front.specs() would transfer these,
+  // that doesn't happen yet so we add them manually
+  var requiredConverters = [
+    require('../cli').items,
+    require('../commands/clear').items,
+    require('../commands/connect').items,
+    require('../commands/exec').items,
+    require('../commands/global').items,
+    require('../commands/help').items,
+    require('../commands/intro').items,
+    require('../commands/lang').items,
+    require('../commands/preflist').items,
+    require('../commands/pref').items,
+    require('../commands/test').items,
+  ].reduce(function(prev, curr) { return prev.concat(curr); }, [])
+   .filter(function(item) { return item.item === 'converter'; });
+  system.addItems(requiredConverters);
 
-exports.removeRemoteItems = function(system, connection) {
-  system.commands.getAll().forEach(function(command) {
-    if (command.connection === connection) {
-      system.commands.remove(command);
-    }
+  var connector = system.connectors.get(options.method);
+  return connectSystems(system, connector, options.url).then(function() {
+    return system;
   });
 };
diff --git a/toolkit/devtools/gcli/source/lib/gcli/connectors/protocol.js b/toolkit/devtools/gcli/source/lib/gcli/connectors/protocol.js
index a6a1382..acb1f49 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/connectors/protocol.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/connectors/protocol.js
@@ -38,19 +38,15 @@ exports.method = function(func, spec) {
   };
 };
 
-var Arg = exports.Arg = function(index, type) {
-  if (this == null) {
-    return new Arg(index, type);
-  }
-
-  this.index = index;
-  this.type = type;
+exports.Arg = function(index, type) {
+  return {
+    index: index,
+    type: type
+  };
 };
 
-var RetVal = exports.RetVal = function(type) {
-  if (this == null) {
-    return new RetVal(type);
-  }
-
-  this.type = type;
+exports.RetVal = function(type) {
+  return {
+    type: type
+  };
 };
diff --git a/toolkit/devtools/gcli/source/lib/gcli/connectors/remoted.js b/toolkit/devtools/gcli/source/lib/gcli/connectors/remoted.js
index 91e6900..339f8af 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/connectors/remoted.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/connectors/remoted.js
@@ -127,7 +127,7 @@ Remoter.prototype.exposed = {
    * - message: The message to display to the user
    * - predictions: An array of suggested values for the given parameter
    */
-  typeparse: method(function(typed, param) {
+  parseType: method(function(typed, param) {
     return this.requisition.update(typed).then(function() {
       var assignment = this.requisition.getAssignment(param);
 
@@ -151,14 +151,13 @@ Remoter.prototype.exposed = {
    * Get the incremented value of some type
    * @return a promise of a string containing the new argument text
    */
-  typeincrement: method(function(typed, param) {
+  incrementType: method(function(typed, param) {
     return this.requisition.update(typed).then(function() {
       var assignment = this.requisition.getAssignment(param);
       return this.requisition.increment(assignment).then(function() {
-        var arg = assignment.arg;
-        return arg == null ? undefined : arg.text;
+        return assignment.arg == null ? undefined : assignment.arg.text;
       });
-    });
+    }.bind(this));
   }, {
     request: {
       typed: Arg(0, "string"), // The command string
@@ -168,16 +167,15 @@ Remoter.prototype.exposed = {
   }),
 
   /**
-   * See typeincrement
+   * See incrementType
    */
-  typedecrement: method(function(typed, param) {
+  decrementType: method(function(typed, param) {
     return this.requisition.update(typed).then(function() {
       var assignment = this.requisition.getAssignment(param);
       return this.requisition.decrement(assignment).then(function() {
-        var arg = assignment.arg;
-        return arg == null ? undefined : arg.text;
+        return assignment.arg == null ? undefined : assignment.arg.text;
       });
-    });
+    }.bind(this));
   }, {
     request: {
       typed: Arg(0, "string"), // The command string
@@ -189,36 +187,35 @@ Remoter.prototype.exposed = {
   /**
    * Perform a lookup on a selection type to get the allowed values
    */
-  selectioninfo: method(function(commandName, paramName, action) {
-    var command = this.requisition.system.commands.get(commandName);
-    if (command == null) {
-      throw new Error('No command called \'' + commandName + '\'');
-    }
+  getSelectionLookup: method(function(commandName, paramName) {
+    var type = getType(this.requisition, commandName, paramName);
 
-    var type;
-    command.params.forEach(function(param) {
-      if (param.name === paramName) {
-        type = param.type;
-      }
+    var context = this.requisition.executionContext;
+    return type.lookup(context).map(function(info) {
+      // lookup returns an array of objects with name/value properties and
+      // the values might not be JSONable, so remove them
+      return { name: info.name };
     });
-    if (type == null) {
-      throw new Error('No parameter called \'' + paramName + '\' in \'' +
-                      commandName + '\'');
-    }
+  }, {
+    request: {
+      commandName: Arg(0, "string"), // The command containing the parameter in question
+      paramName: Arg(1, "string"),   // The name of the parameter
+    },
+    response: RetVal("json")
+  }),
 
-    switch (action) {
-      case 'lookup':
-        return type.lookup(this.requisition.executionContext);
-      case 'data':
-        return type.data(this.requisition.executionContext);
-      default:
-        throw new Error('Action must be either \'lookup\' or \'data\'');
-    }
+  /**
+   * Perform a lookup on a selection type to get the allowed values
+   */
+  getSelectionData: method(function(commandName, paramName) {
+    var type = getType(this.requisition, commandName, paramName);
+
+    var context = this.requisition.executionContext;
+    return type.data(context);
   }, {
     request: {
       commandName: Arg(0, "string"), // The command containing the parameter in question
-      paramName: Arg(1, "string"), // The name of the parameter
-      action: Arg(2, "string") // 'lookup' or 'data' depending on the function to call
+      paramName: Arg(1, "string"),   // The name of the parameter
     },
     response: RetVal("json")
   }),
@@ -243,7 +240,7 @@ Remoter.prototype.exposed = {
   /**
    * Examine the filesystem for file matches
    */
-  parsefile: method(function(typed, filetype, existing, matches) {
+  parseFile: method(function(typed, filetype, existing, matches) {
     var options = {
       filetype: filetype,
       existing: existing,
@@ -271,5 +268,141 @@ Remoter.prototype.exposed = {
       matches: Arg(3, "json") // String of a regular expression which the result should match
     },
     response: RetVal("json")
-  })
+  }),
 };
+
+/**
+ * Helper for #getSelectionLookup and #getSelectionData that finds a type
+ * instance given a commandName and paramName
+ */
+function getType(requisition, commandName, paramName) {
+  var command = requisition.system.commands.get(commandName);
+  if (command == null) {
+    throw new Error('No command called \'' + commandName + '\'');
+  }
+
+  var type;
+  command.params.forEach(function(param) {
+    if (param.name === paramName) {
+      type = param.type;
+    }
+  });
+
+  if (type == null) {
+    throw new Error('No parameter called \'' + paramName + '\' in \'' +
+                    commandName + '\'');
+  }
+
+  return type;
+}
+
+/**
+ * Asynchronous construction. Use GcliFront();
+ * @private
+ */
+function GcliFront() {
+  throw new Error('Use GcliFront.create().then(front => ...)');
+}
+
+/**
+ *
+ */
+GcliFront.create = function(connector, url) {
+  return connector.connect(url).then(function(connection) {
+    var front = Object.create(GcliFront.prototype);
+    return front._init(connection);
+  });
+};
+
+/**
+ * Asynchronous construction. Use GcliFront();
+ * @private
+ */
+GcliFront.prototype._init = function(connection) {
+  this.connection = connection;
+  return this;
+};
+
+GcliFront.prototype.on = function(eventName, action) {
+  this.connection.on(eventName, action);
+};
+
+GcliFront.prototype.off = function(eventName, action) {
+  this.connection.off(eventName, action);
+};
+
+
+GcliFront.prototype.specs = function() {
+  var data = {
+  };
+  return this.connection.call('specs', data);
+};
+
+GcliFront.prototype.execute = function(typed) {
+  var data = {
+    typed: typed
+  };
+  return this.connection.call('execute', data);
+};
+
+GcliFront.prototype.parseFile = function(typed, filetype, existing, matches) {
+  var data = {
+    typed: typed,
+    filetype: filetype,
+    existing: existing,
+    matches: matches
+  };
+  return this.connection.call('parseFile', data);
+};
+
+GcliFront.prototype.parseType = function(typed, param) {
+  var data = {
+    typed: typed,
+    param: param
+  };
+  return this.connection.call('parseType', data);
+};
+
+GcliFront.prototype.incrementType = function(typed, param) {
+  var data = {
+    typed: typed,
+    param: param
+  };
+  return this.connection.call('incrementType', data);
+};
+
+GcliFront.prototype.decrementType = function(typed, param) {
+  var data = {
+    typed: typed,
+    param: param
+  };
+  return this.connection.call('decrementType', data);
+};
+
+GcliFront.prototype.getSelectionLookup = function(commandName, paramName) {
+  var data = {
+    commandName: commandName,
+    paramName: paramName
+  };
+  return this.connection.call('getSelectionLookup', data);
+};
+
+GcliFront.prototype.getSelectionData = function(commandName, paramName) {
+  var data = {
+    commandName: commandName,
+    paramName: paramName
+  };
+  return this.connection.call('getSelectionData', data);
+};
+
+GcliFront.prototype.system = function(cmd, args, cwd, env) {
+  var data = {
+    cmd: cmd,
+    args: args,
+    cwd: cwd,
+    env: env
+  };
+  return this.connection.call('system', data);
+};
+
+exports.GcliFront = GcliFront;
diff --git a/toolkit/devtools/gcli/source/lib/gcli/converters/basic.js b/toolkit/devtools/gcli/source/lib/gcli/converters/basic.js
index fdb41d4..2efd9ab 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/converters/basic.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/converters/basic.js
@@ -56,6 +56,14 @@ exports.items = [
   },
   {
     item: 'converter',
+    from: 'json',
+    to: 'dom',
+    exec: function(json, conversionContext) {
+      return nodeFromDataToString(JSON.stringify(json), conversionContext);
+    }
+  },
+  {
+    item: 'converter',
     from: 'number',
     to: 'string',
     exec: function(data) { return '' + data; }
@@ -71,5 +79,13 @@ exports.items = [
     from: 'undefined',
     to: 'string',
     exec: function(data) { return ''; }
+  },
+  {
+    item: 'converter',
+    from: 'json',
+    to: 'string',
+    exec: function(json, conversionContext) {
+      return JSON.stringify(json);
+    }
   }
 ];
diff --git a/toolkit/devtools/gcli/source/lib/gcli/converters/converters.js b/toolkit/devtools/gcli/source/lib/gcli/converters/converters.js
index 38b2bdc..545755a 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/converters/converters.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/converters/converters.js
@@ -209,6 +209,15 @@ Converters.prototype.get = function(from, to) {
 };
 
 /**
+ * Get all the registered converters. Most for debugging
+ */
+Converters.prototype.getAll = function() {
+  return Object.keys(this._registered.from).map(function(name) {
+    return this._registered.from[name];
+  }.bind(this));
+};
+
+/**
  * Helper for get to pick the best fallback converter
  */
 Converters.prototype._getFallbackConverter = function(from, to) {
diff --git a/toolkit/devtools/gcli/source/lib/gcli/fields/fields.js b/toolkit/devtools/gcli/source/lib/gcli/fields/fields.js
index d8897b27..c971847 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/fields/fields.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/fields/fields.js
@@ -199,6 +199,13 @@ Fields.prototype.get = function(type, options) {
   return new FieldConstructor(type, options);
 };
 
+/**
+ * Get all the registered fields. Most for debugging
+ */
+Fields.prototype.getAll = function() {
+  return this._fieldCtors.slice();
+};
+
 exports.Fields = Fields;
 
 /**
diff --git a/toolkit/devtools/gcli/source/lib/gcli/languages/command.js b/toolkit/devtools/gcli/source/lib/gcli/languages/command.js
index f423a8e..0a950c8 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/languages/command.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/languages/command.js
@@ -184,7 +184,7 @@ var commandLanguage = exports.commandLanguage = {
       var isNew = (this.assignment !== newAssignment);
 
       this.assignment = newAssignment;
-      this.terminal.updateCompletion();
+      this.terminal.updateCompletion().then(null, util.errorHandler);
 
       if (isNew) {
         this.updateHints();
@@ -286,7 +286,10 @@ var commandLanguage = exports.commandLanguage = {
     }
 
     this.terminal.history.add(input);
-    this.terminal.unsetChoice();
+    this.terminal.unsetChoice().then(null, util.errorHandler);
+
+    this.terminal.inputElement.value = '';
+    this.terminal_previousValue = this.terminal.inputElement.value;
 
     return this.requisition.exec().then(function() {
       this.textChanged();
diff --git a/toolkit/devtools/gcli/source/lib/gcli/languages/languages.js b/toolkit/devtools/gcli/source/lib/gcli/languages/languages.js
index 49e0f1e..738c7f9 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/languages/languages.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/languages/languages.js
@@ -51,8 +51,9 @@ var baseLanguage = {
   },
 
   handleTab: function() {
-    this.terminal.unsetChoice();
-    return RESOLVED;
+    return this.terminal.unsetChoice().then(function() {
+      return RESOLVED;
+    }, util.errorHandler);
   },
 
   handleInput: function(input) {
@@ -62,8 +63,9 @@ var baseLanguage = {
       }.bind(this));
     }
 
-    this.terminal.unsetChoice();
-    return RESOLVED;
+    return this.terminal.unsetChoice().then(function() {
+      return RESOLVED;
+    }, util.errorHandler);
   },
 
   handleReturn: function(input) {
@@ -80,7 +82,7 @@ var baseLanguage = {
 
       this.focusManager.outputted();
 
-      this.terminal.unsetChoice();
+      this.terminal.unsetChoice().then(null, util.errorHandler);
       this.terminal.inputElement.value = '';
     }.bind(this));
   },
diff --git a/toolkit/devtools/gcli/source/lib/gcli/settings.js b/toolkit/devtools/gcli/source/lib/gcli/settings.js
index eb5c7f5..ab5f738 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/settings.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/settings.js
@@ -106,7 +106,6 @@ Settings.prototype.getAll = function(filter) {
 
 /**
  * Add a new setting
- * @return The new Setting object
  */
 Settings.prototype.add = function(prefSpec) {
   var setting = new Setting(this, prefSpec);
diff --git a/toolkit/devtools/gcli/source/lib/gcli/system.js b/toolkit/devtools/gcli/source/lib/gcli/system.js
new file mode 100644
index 0000000..1cd4655
--- /dev/null
+++ b/toolkit/devtools/gcli/source/lib/gcli/system.js
@@ -0,0 +1,316 @@
+/*
+ * Copyright 2012, Mozilla Foundation and contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+'use strict';
+
+var Promise = require('./util/promise').Promise;
+var Commands = require('./commands/commands').Commands;
+var Connectors = require('./connectors/connectors').Connectors;
+var Converters = require('./converters/converters').Converters;
+var Fields = require('./fields/fields').Fields;
+var Languages = require('./languages/languages').Languages;
+var Settings = require('./settings').Settings;
+var Types = require('./types/types').Types;
+var GcliFront = require('./connectors/remoted').GcliFront;
+
+/**
+ * This is the heart of the API that we expose to the outside.
+ * @param options Object that customizes how the system acts. Valid properties:
+ * - commands, connectors, converters, fields, languages, settings, types:
+ *   Custom configured manager objects for these item types
+ * - location: a system with a location will ignore commands that don't have a
+ *   matching runAt property. This is principly for client/server setups where
+ *   we import commands from the server to the client, so a system with
+ *   `{ location: 'client' }` will silently ignore commands with
+ *   `{ runAt: 'server' }`. Any system without a location will accept commands
+ *   with any runAt property (including none).
+ */
+exports.createSystem = function(options) {
+  options = options || {};
+  var location = options.location;
+
+  // The plural/singular thing may make you want to scream, but it allows us
+  // to say components[getItemType(item)], so a lookup here (and below) saves
+  // multiple lookups in the middle of the code
+  var components = {
+    connector: options.connectors || new Connectors(),
+    converter: options.converters || new Converters(),
+    field: options.fields || new Fields(),
+    language: options.languages || new Languages(),
+    type: options.types || new Types()
+  };
+  components.setting = new Settings(components.type);
+  components.command = new Commands(components.type, location);
+
+  var getItemType = function(item) {
+    if (item.item) {
+      return item.item;
+    }
+    // Some items are registered using the constructor so we need to check
+    // the prototype for the the type of the item
+    return (item.prototype && item.prototype.item) ?
+           item.prototype.item : 'command';
+  };
+
+  var addItem = function(item) {
+    try {
+      components[getItemType(item)].add(item);
+    }
+    catch (ex) {
+      console.error('While adding: ' + item.name);
+      throw ex;
+    }
+  };
+
+  var removeItem = function(item) {
+    components[getItemType(item)].remove(item);
+  };
+
+  /**
+   * loadableModules is a lookup of names to module loader functions (like
+   * the venerable 'require') to which we can pass a name and get back a
+   * JS object (or a promise of a JS object). This allows us to have custom
+   * loaders to get stuff from the filesystem etc.
+   */
+  var loadableModules = {};
+
+  /**
+   * loadedModules is a lookup by name of the things returned by the functions
+   * in loadableModules so we can track what we need to unload / reload.
+   */
+  var loadedModules = {};
+
+  var unloadModule = function(name) {
+    var existingModule = loadedModules[name];
+    if (existingModule != null) {
+      existingModule.items.forEach(removeItem);
+    }
+    delete loadedModules[name];
+  };
+
+  var loadModule = function(name) {
+    var existingModule = loadedModules[name];
+    unloadModule(name);
+
+    // And load the new items
+    try {
+      var loader = loadableModules[name];
+      return Promise.resolve(loader(name)).then(function(newModule) {
+        if (existingModule === newModule) {
+          return;
+        }
+
+        if (newModule == null) {
+          throw 'Module \'' + name + '\' not found';
+        }
+
+        if (newModule.items == null || typeof newModule.items.forEach !== 'function') {
+          console.log('Exported properties: ' + Object.keys(newModule).join(', '));
+          throw 'Module \'' + name + '\' has no \'items\' array export';
+        }
+
+        newModule.items.forEach(addItem);
+
+        loadedModules[name] = newModule;
+      });
+    }
+    catch (ex) {
+      console.error(ex);
+      return Promise.reject('Failure when loading \'' + name + '\'');
+    }
+  };
+
+  var pendingChanges = false;
+
+  var system = {
+    addItems: function(items) {
+      items.forEach(addItem);
+    },
+
+    removeItems: function(items) {
+      items.forEach(removeItem);
+    },
+
+    addItemsByModule: function(names, options) {
+      options = options || {};
+      if (typeof names === 'string') {
+        names = [ names ];
+      }
+      names.forEach(function(name) {
+        if (options.loader == null) {
+          options.loader = function(name) {
+            return require(name);
+          };
+        }
+        loadableModules[name] = options.loader;
+
+        if (options.delayedLoad) {
+          pendingChanges = true;
+        }
+        else {
+          loadModule(name).then(null, console.error);
+        }
+      });
+    },
+
+    removeItemsByModule: function(name) {
+      delete loadableModules[name];
+      unloadModule(name);
+    },
+
+    load: function() {
+      if (!pendingChanges) {
+        return Promise.resolve();
+      }
+
+      // clone loadedModules, so we can remove what is left at the end
+      var modules = Object.keys(loadedModules).map(function(name) {
+        return loadedModules[name];
+      });
+
+      var promises = Object.keys(loadableModules).map(function(name) {
+        delete modules[name];
+        return loadModule(name);
+      });
+
+      Object.keys(modules).forEach(unloadModule);
+      pendingChanges = false;
+
+      return Promise.all(promises);
+    },
+
+    toString: function() {
+      return 'System [' +
+             'commands:' + components.command.getAll().length + ', ' +
+             'connectors:' + components.connector.getAll().length + ', ' +
+             'converters:' + components.converter.getAll().length + ', ' +
+             'fields:' + components.field.getAll().length + ', ' +
+             'settings:' + components.setting.getAll().length + ', ' +
+             'types:' + components.type.getTypeNames().length + ']';
+    }
+  };
+
+  Object.defineProperty(system, 'commands', {
+    get: function() { return components.command; },
+    enumerable: true
+  });
+
+  Object.defineProperty(system, 'connectors', {
+    get: function() { return components.connector; },
+    enumerable: true
+  });
+
+  Object.defineProperty(system, 'converters', {
+    get: function() { return components.converter; },
+    enumerable: true
+  });
+
+  Object.defineProperty(system, 'fields', {
+    get: function() { return components.field; },
+    enumerable: true
+  });
+
+  Object.defineProperty(system, 'languages', {
+    get: function() { return components.language; },
+    enumerable: true
+  });
+
+  Object.defineProperty(system, 'settings', {
+    get: function() { return components.setting; },
+    enumerable: true
+  });
+
+  Object.defineProperty(system, 'types', {
+    get: function() { return components.type; },
+    enumerable: true
+  });
+
+  return system;
+};
+
+/**
+ * Connect a local system with another at the other end of a connector
+ */
+exports.connectSystems = function(system, connector, url) {
+  return GcliFront.create(connector, url).then(function(front) {
+    front.on('commandsChanged', function(specs) {
+      syncItems(system, specs, front);
+    });
+
+    return front.specs().then(function(specs) {
+      syncItems(system, specs, front);
+      return system;
+    });
+  });
+};
+
+/**
+ * Remove the items in this system that came from a previous sync action, and
+ * re-add them
+ */
+function syncItems(system, specs, front) {
+  // Go through all the commands removing any that are associated with the given
+  // front. The method of association is the hack in addLocalFunctions.
+  system.commands.getAll().forEach(function(command) {
+    if (command.front === front) {
+      system.commands.remove(command);
+    }
+  });
+
+  var remoteItems = addLocalFunctions(specs, front);
+  system.addItems(remoteItems);
+}
+
+/**
+ * Take the data from the 'specs' command (or the 'commandsChanged' event) and
+ * add function to proxy the execution back over the front
+ */
+function addLocalFunctions(specs, front) {
+  // Inject an 'exec' function into the commands, and the front into
+  // all the remote types
+  specs.forEach(function(commandSpec) {
+    // HACK: Tack the front to the command so we know how to remove it
+    // in syncItems() below
+    commandSpec.front = front;
+
+    // TODO: syncItems() doesn't remove types, so do we need this?
+    commandSpec.params.forEach(function(param) {
+      if (typeof param.type !== 'string') {
+        param.type.front = front;
+      }
+    });
+
+    if (!commandSpec.isParent) {
+      commandSpec.exec = function(args, context) {
+        var typed = (context.prefix ? context.prefix + ' ' : '') + context.typed;
+
+        return front.execute(typed).then(function(reply) {
+          var typedData = context.typedData(reply.type, reply.data);
+          if (!reply.error) {
+            return typedData;
+          }
+          else {
+            throw typedData;
+          }
+        });
+      };
+    }
+
+    commandSpec.isProxy = true;
+  });
+
+  return specs;
+}
diff --git a/toolkit/devtools/gcli/source/lib/gcli/types/delegate.js b/toolkit/devtools/gcli/source/lib/gcli/types/delegate.js
index 50597f6..1e9cb99 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/types/delegate.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/types/delegate.js
@@ -29,14 +29,6 @@ exports.items = [
     item: 'type',
     name: 'delegate',
 
-    constructor: function() {
-      if (typeof this.delegateType !== 'function' &&
-          typeof this.delegateType !== 'string') {
-        throw new Error('Instances of DelegateType need typeSpec.delegateType' +
-                        ' to be a function that returns a type');
-      }
-    },
-
     getSpec: function(commandName, paramName) {
       return {
         name: 'delegate',
@@ -47,9 +39,7 @@ exports.items = [
     // Child types should implement this method to return an instance of the type
     // that should be used. If no type is available, or some sort of temporary
     // placeholder is required, BlankType can be used.
-    delegateType: function(context) {
-      throw new Error('Not implemented');
-    },
+    delegateType: undefined,
 
     stringify: function(value, context) {
       return this.getType(context).then(function(delegated) {
@@ -80,6 +70,10 @@ exports.items = [
     },
 
     getType: function(context) {
+      if (this.delegateType === undefined) {
+        return Promise.resolve(this.types.createType('blank'));
+      }
+
       var type = this.delegateType(context);
       if (typeof type.parse !== 'function') {
         type = this.types.createType(type);
@@ -87,8 +81,8 @@ exports.items = [
       return Promise.resolve(type);
     },
 
-    // DelegateType is designed to be inherited from, so DelegateField needs a way
-    // to check if something works like a delegate without using 'name'
+    // DelegateType is designed to be inherited from, so DelegateField needs a
+    // way to check if something works like a delegate without using 'name'
     isDelegate: true,
 
     // Technically we perhaps should proxy this, except that properties are
@@ -114,8 +108,7 @@ exports.items = [
     },
 
     parse: function(arg, context) {
-      var args = { typed: context.typed, param: this.param };
-      return this.connection.call('typeparse', args).then(function(json) {
+      return this.front.parseType(context.typed, this.param).then(function(json) {
         var status = Status.fromString(json.status);
         var val = { stringified: arg.text };
         return new Conversion(val, arg, status, json.message, json.predictions);
@@ -123,15 +116,13 @@ exports.items = [
     },
 
     decrement: function(value, context) {
-      var args = { typed: context.typed, param: this.param };
-      return this.connection.call('typedecrement', args).then(function(json) {
+      return this.front.decrementType(context.typed, this.param).then(function(json) {
         return { stringified: json.arg };
       });
     },
 
     increment: function(value, context) {
-      var args = { typed: context.typed, param: this.param };
-      return this.connection.call('typeincrement', args).then(function(json) {
+      return this.front.incrementType(context.typed, this.param).then(function(json) {
         return { stringified: json.arg };
       });
     }
diff --git a/toolkit/devtools/gcli/source/lib/gcli/types/selection.js b/toolkit/devtools/gcli/source/lib/gcli/types/selection.js
index 5ec3d38..1ab4fea 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/types/selection.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/types/selection.js
@@ -126,19 +126,11 @@ SelectionType.prototype.getLookup = function(context) {
   var reply;
 
   if (this.remoteLookup) {
-    reply = this.connection.call('selectioninfo', {
-      action: 'lookup',
-      commandName: this.commandName,
-      paramName: this.paramName
-    });
+    reply = this.front.getSelectionLookup(this.commandName, this.paramName);
     reply = resolve(reply, context);
   }
   else if (this.remoteData) {
-    reply = this.connection.call('selectioninfo', {
-      action: 'data',
-      commandName: this.commandName,
-      paramName: this.paramName
-    });
+    reply = this.front.getSelectionData(this.commandName, this.paramName);
     reply = resolve(reply, context).then(this._dataToLookup);
   }
   else if (typeof this.lookup === 'function') {
@@ -227,7 +219,7 @@ exports.findPredictions = function(arg, lookup) {
   }
 
   // Exact hidden matches. If 'hidden: true' then we only allow exact matches
-  // All the tests after here check that !option.value.hidden
+  // All the tests after here check that !isHidden(option)
   for (i = 0; i < lookup.length && predictions.length < maxPredictions; i++) {
     option = lookup[i];
     if (option.name === arg.text) {
@@ -238,7 +230,7 @@ exports.findPredictions = function(arg, lookup) {
   // Start with prefix matching
   for (i = 0; i < lookup.length && predictions.length < maxPredictions; i++) {
     option = lookup[i];
-    if (option._gcliLowerName.indexOf(match) === 0 && !option.value.hidden) {
+    if (option._gcliLowerName.indexOf(match) === 0 && !isHidden(option)) {
       if (predictions.indexOf(option) === -1) {
         predictions.push(option);
       }
@@ -249,7 +241,7 @@ exports.findPredictions = function(arg, lookup) {
   if (predictions.length < (maxPredictions / 2)) {
     for (i = 0; i < lookup.length && predictions.length < maxPredictions; i++) {
       option = lookup[i];
-      if (option._gcliLowerName.indexOf(match) !== -1 && !option.value.hidden) {
+      if (option._gcliLowerName.indexOf(match) !== -1 && !isHidden(option)) {
         if (predictions.indexOf(option) === -1) {
           predictions.push(option);
         }
@@ -261,7 +253,7 @@ exports.findPredictions = function(arg, lookup) {
   if (predictions.length === 0) {
     var names = [];
     lookup.forEach(function(opt) {
-      if (!opt.value.hidden) {
+      if (!isHidden(opt)) {
         names.push(opt.name);
       }
     });
@@ -306,11 +298,21 @@ exports.convertPredictions = function(arg, predictions) {
                         Promise.resolve(predictions));
 };
 
+/**
+ * Checking that an option is hidden involves messing in properties on the
+ * value right now (which isn't a good idea really) we really should be marking
+ * that on the option, so this encapsulates the problem
+ */
+function isHidden(option) {
+  return option.hidden === true ||
+         (option.value != null && option.value.hidden);
+}
+
 SelectionType.prototype.getBlank = function(context) {
   var predictFunc = function(context2) {
     return Promise.resolve(this.getLookup(context2)).then(function(lookup) {
       return lookup.filter(function(option) {
-        return !option.value.hidden;
+        return !isHidden(option);
       }).slice(0, Conversion.maxPredictions - 1);
     });
   }.bind(this);
diff --git a/toolkit/devtools/gcli/source/lib/gcli/types/setting.js b/toolkit/devtools/gcli/source/lib/gcli/types/setting.js
index 509b951..26c6f40 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/types/setting.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/types/setting.js
@@ -25,12 +25,15 @@ exports.items = [
     cacheable: true,
     lookup: function(context) {
       var settings = context.system.settings;
+
+      // Lazily add a settings.onChange listener to clear the cache
       if (!this._registeredListener) {
         settings.onChange.add(function(ev) {
           this.clearCache();
         }, this);
         this._registeredListener = true;
       }
+
       return settings.getAll().map(function(setting) {
         return { name: setting.name, value: setting };
       });
diff --git a/toolkit/devtools/gcli/source/lib/gcli/types/types.js b/toolkit/devtools/gcli/source/lib/gcli/types/types.js
index e92d262..5b672c7 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/types/types.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/types/types.js
@@ -946,8 +946,8 @@ function Type() {
 }
 
 /**
- * Get a JSONable data structure that entirely describes this type
- * @param commandName/paramName The names of the command and parameter which we
+ * Get a JSONable data structure that entirely describes this type.
+ * commandName and paramName are the names of the command and parameter which we
  * are remoting to help the server get back to the remoted action.
  */
 Type.prototype.getSpec = function(commandName, paramName) {
diff --git a/toolkit/devtools/gcli/source/lib/gcli/ui/menu.js b/toolkit/devtools/gcli/source/lib/gcli/ui/menu.js
index fef0210..6ba00e7 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/ui/menu.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/ui/menu.js
@@ -256,7 +256,7 @@ function getHighlightingProxy(item, match, document) {
 }
 
 /**
- * @return The current choice index
+ * @return {int} current choice index
  */
 Menu.prototype.getChoiceIndex = function() {
   return this._choice == null ? 0 : this._choice;

From 78a9636ac913219af45585c66bced73376f2e79f Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Fri, 30 Jan 2015 10:05:18 +0000
Subject: [PATCH 09/38] Refactor DeveloperToolbar code to fit GCLI import

commands-index.js Now has 2 functions which create 'system' objects:
loadForServer() which is designed to be called by GcliActor and loadForTarget()
which is designed to be called by the DeveloperToolbar and the Toolbox.

Some of the changes to GcliActor are to sync with the changes in GCLI.
---
 browser/devtools/commandline/commands-index.js     |  87 ++++++++++-----
 .../commandline/test/browser_cmd_settings.js       |   2 +-
 browser/devtools/framework/toolbox.js              |   2 +-
 browser/devtools/shared/DeveloperToolbar.jsm       |  31 +++---
 toolkit/devtools/gcli/moz.build                    |   2 +-
 toolkit/devtools/server/actors/gcli.js             | 119 ++++++++++++---------
 6 files changed, 143 insertions(+), 100 deletions(-)

diff --git a/browser/devtools/commandline/commands-index.js b/browser/devtools/commandline/commands-index.js
index 886eaa5..93d2c51 100644
--- a/browser/devtools/commandline/commands-index.js
+++ b/browser/devtools/commandline/commands-index.js
@@ -5,11 +5,12 @@
 "use strict";
 
 const defaultTools = require("main").defaultTools;
-const api = require('gcli/api');
+const createSystem = require('gcli/system').createSystem;
+const connectSystems = require('gcli/system').connectSystems;
 
 /**
  * This is the basic list of modules that should be loaded into each
- * requisition instance
+ * requisition instance whether server side or client side
  */
 exports.baseModules = [
   'gcli/types/delegate',
@@ -38,26 +39,27 @@ exports.baseModules = [
 
   'gcli/converters/converters',
   'gcli/converters/basic',
-  // 'gcli/converters/html',      // Prevent use of innerHTML
   'gcli/converters/terminal',
 
   'gcli/languages/command',
   'gcli/languages/javascript',
 
-  // 'gcli/connectors/direct',    // No need for loopback testing
-  // 'gcli/connectors/rdp',       // Needs fixing
-  // 'gcli/connectors/websocket', // Not from chrome
-  // 'gcli/connectors/xhr',       // Not from chrome
+  'gcli/commands/context',
+];
 
+/**
+ * TODO: Are they really client only modules, we should really filter with
+ * runAt=client or something
+ */
+exports.clientModules = [
   // 'gcli/cli',                  // No need for '{' with web console
   'gcli/commands/clear',
   // 'gcli/commands/connect',     // We need to fix our RDP connector
-  'gcli/commands/context',
   // 'gcli/commands/exec',        // No exec in Firefox yet
-  'gcli/commands/global',
+  // 'gcli/commands/global',
   'gcli/commands/help',
   // 'gcli/commands/intro',       // No need for intro command
-  'gcli/commands/lang',
+  // 'gcli/commands/lang',
   // 'gcli/commands/mocks',       // Only for testing
   'gcli/commands/pref',
   // 'gcli/commands/preflist',    // Too slow in Firefox
@@ -101,33 +103,62 @@ exports.getToolModules = function() {
 };
 
 /**
- * Builds on #getModuleNames() by registering the items with GCLI including
- * the items that come from the mozcmd directory
+ * Cache of the system we created
  */
-exports.addAllItems = function(system) {
-  system.addItemsByModule(exports.baseModules, { delayedLoad: true });
-  system.addItemsByModule(exports.devtoolsModules, { delayedLoad: true });
-  system.addItemsByModule(exports.getToolModules(), { delayedLoad: true });
+var systemForServer;
 
-  let { mozDirLoader } = require("gcli/commands/cmd");
-  system.addItemsByModule("mozcmd", { delayedLoad: true, loader: mozDirLoader });
+/**
+ * Setup a system for use in a content process and make sure all the
+ * `runAt=server` modules are registered.
+ */
+exports.loadForServer = function() {
+  if (systemForServer == null) {
+    console.log('Creating GCLI system for server');
+    systemForServer = createSystem({ location: 'server' });
+
+    systemForServer.addItemsByModule(exports.baseModules, { delayedLoad: true });
+    systemForServer.addItemsByModule(exports.clientModules, { delayedLoad: true });
+    systemForServer.addItemsByModule(exports.devtoolsModules, { delayedLoad: true });
+    systemForServer.addItemsByModule(exports.getToolModules(), { delayedLoad: true });
+
+    let { mozDirLoader } = require("gcli/commands/cmd");
+    systemForServer.addItemsByModule("mozcmd", { delayedLoad: true, loader: mozDirLoader });
+  }
+
+  return systemForServer.load().then(() => systemForServer);
 };
 
 /**
- * Cache of the system we created
+ * WeakMap<Target, Promise<System>>
  */
-var system;
+var systemForTarget = new WeakMap();
 
 /**
- * Setup a system if we need to and make sure all the registered modules are
- * loaded.
+ * Create a system which connects to a GCLI in a remote target
  */
-exports.load = function() {
-  if (system == null) {
-    console.log('Creating GCLI system');
-    system = api.createSystem();
-    exports.addAllItems(system);
+exports.loadForTarget = function(target) {
+  let promise = systemForTarget.get(target);
+  if (promise != null) {
+    return promise;
   }
 
-  return system.load().then(() => system);
+  console.log('Creating GCLI system for ' + target.url);
+  let system = createSystem({ location: 'client' });
+
+  system.addItemsByModule(exports.baseModules, { delayedLoad: true });
+  system.addItemsByModule(exports.clientModules, { delayedLoad: true });
+  system.addItemsByModule(exports.devtoolsModules, { delayedLoad: true });
+  system.addItemsByModule(exports.getToolModules(), { delayedLoad: true });
+
+  let { mozDirLoader } = require("gcli/commands/cmd");
+  system.addItemsByModule("mozcmd", { delayedLoad: true, loader: mozDirLoader });
+
+  // Load the client system
+  promise = system.load().then(() => {
+    let connector = system.connectors.get('direct');
+    return connectSystems(system, connector).then(() => system);
+  });
+
+  systemForTarget.set(target, promise);
+  return promise;
 };
diff --git a/browser/devtools/commandline/test/browser_cmd_settings.js b/browser/devtools/commandline/test/browser_cmd_settings.js
index 3ad7f9f..38eb52e1 100644
--- a/browser/devtools/commandline/test/browser_cmd_settings.js
+++ b/browser/devtools/commandline/test/browser_cmd_settings.js
@@ -21,7 +21,7 @@ function* spawnTest() {
   let options = yield helpers.openTab(TEST_URI);
 
   let gcliInit = require("devtools/commandline/commands-index");
-  let system = yield gcliInit.load();
+  let system = yield gcliInit.loadForServer();
 
   let settings = system.settings;
 
diff --git a/browser/devtools/framework/toolbox.js b/browser/devtools/framework/toolbox.js
index 374240a..2fb86e8 100644
--- a/browser/devtools/framework/toolbox.js
+++ b/browser/devtools/framework/toolbox.js
@@ -675,7 +675,7 @@ Toolbox.prototype = {
 
     let spec = CommandUtils.getCommandbarSpec("devtools.toolbox.toolbarSpec");
     let environment = CommandUtils.createEnvironment(this, '_target');
-    return CommandUtils.createRequisition(environment).then(requisition => {
+    return CommandUtils.createRequisition(environment, this.target).then(requisition => {
       this._requisition = requisition;
       return CommandUtils.createButtons(spec, this.target, this.doc,
                                         requisition).then(buttons => {
diff --git a/browser/devtools/shared/DeveloperToolbar.jsm b/browser/devtools/shared/DeveloperToolbar.jsm
index 37ac505..ca0e423 100644
--- a/browser/devtools/shared/DeveloperToolbar.jsm
+++ b/browser/devtools/shared/DeveloperToolbar.jsm
@@ -39,14 +39,15 @@ XPCOMUtils.defineLazyGetter(this, "toolboxStrings", function () {
 
 const Telemetry = require("devtools/shared/telemetry");
 
-// TODO: Use XPCOMUtils.defineLazyModuleGetter
-// This lazy getter is needed to prevent a require loop
-XPCOMUtils.defineLazyGetter(this, "gcliInit", () => {
+//XPCOMUtils.defineLazyModuleGetter(this, "gcliInit",
+//                                  "devtools/commandline/commands-index");
+
+XPCOMUtils.defineLazyGetter(this, "gcliInit", function () {
   try {
     return require("devtools/commandline/commands-index");
   }
   catch (ex) {
-    console.error(ex);
+    console.log(ex);
   }
 });
 
@@ -71,8 +72,8 @@ let CommandUtils = {
   /**
    * Utility to ensure that things are loaded in the correct order
    */
-  createRequisition: function(environment) {
-    return gcliInit.load().then(system => {
+  createRequisition: function(environment, target) {
+    return gcliInit.loadForTarget(target).then(system => {
       var Requisition = require('gcli/cli').Requisition;
       return new Requisition(system, { environment: environment });
     });
@@ -256,6 +257,9 @@ this.DeveloperToolbar = function DeveloperToolbar(aChromeWindow, aToolbarElement
 {
   this._chromeWindow = aChromeWindow;
 
+  // target is dynamic because the selectedTab changes
+  this.target = TargetFactory.forTab(this._chromeWindow.gBrowser.selectedTab);
+
   this._element = aToolbarElement;
   this._element.hidden = true;
   this._doc = this._element.ownerDocument;
@@ -293,16 +297,6 @@ const NOTIFICATIONS = {
 DeveloperToolbar.prototype.NOTIFICATIONS = NOTIFICATIONS;
 
 /**
- * target is dynamic because the selectedTab changes
- */
-Object.defineProperty(DeveloperToolbar.prototype, "target", {
-  get: function() {
-    return TargetFactory.forTab(this._chromeWindow.gBrowser.selectedTab);
-  },
-  enumerable: true
-});
-
-/**
  * Is the toolbar open?
  */
 Object.defineProperty(DeveloperToolbar.prototype, 'visible', {
@@ -409,7 +403,8 @@ DeveloperToolbar.prototype.show = function(focus) {
 
       this._doc.getElementById("Tools:DevToolbar").setAttribute("checked", "true");
 
-      return gcliInit.load().then(system => {
+      this.target = TargetFactory.forTab(this._chromeWindow.gBrowser.selectedTab);
+      return gcliInit.loadForTarget(this.target).then(system => {
         var FFDisplay = require('gcli/mozui/ffdisplay').FFDisplay;
         this.display = new FFDisplay(system, {
           contentDocument: this._chromeWindow.gBrowser.contentDocument,
@@ -625,6 +620,8 @@ DeveloperToolbar.prototype._notify = function(topic) {
 DeveloperToolbar.prototype.handleEvent = function(ev) {
   if (ev.type == "TabSelect" || ev.type == "load") {
     if (this.visible) {
+      this.target = TargetFactory.forTab(this._chromeWindow.gBrowser.selectedTab);
+
       this.display.reattach({
         contentDocument: this._chromeWindow.gBrowser.contentDocument
       });
diff --git a/toolkit/devtools/gcli/moz.build b/toolkit/devtools/gcli/moz.build
index a2359d3..ac46b80 100644
--- a/toolkit/devtools/gcli/moz.build
+++ b/toolkit/devtools/gcli/moz.build
@@ -119,11 +119,11 @@ EXTRA_JS_MODULES.devtools.gcli.util += [
 ]
 
 EXTRA_JS_MODULES.devtools.gcli += [
-    'source/lib/gcli/api.js',
     'source/lib/gcli/cli.js',
     'source/lib/gcli/index.js',
     'source/lib/gcli/l10n.js',
     'source/lib/gcli/settings.js',
+    'source/lib/gcli/system.js',
 ]
 
 EXTRA_JS_MODULES.devtools += [
diff --git a/toolkit/devtools/server/actors/gcli.js b/toolkit/devtools/server/actors/gcli.js
index f35d8c9..0b4d2f1 100644
--- a/toolkit/devtools/server/actors/gcli.js
+++ b/toolkit/devtools/server/actors/gcli.js
@@ -7,26 +7,14 @@
 var Cu = require('chrome').Cu;
 var XPCOMUtils = Cu.import("resource://gre/modules/XPCOMUtils.jsm", {}).XPCOMUtils;
 
-XPCOMUtils.defineLazyModuleGetter(this, "console",
-                                  "resource://gre/modules/devtools/Console.jsm");
-XPCOMUtils.defineLazyModuleGetter(this, "CommandUtils",
-                                  "resource:///modules/devtools/DeveloperToolbar.jsm");
-
 XPCOMUtils.defineLazyGetter(this, "Requisition", function() {
   return require("gcli/cli").Requisition;
 });
 
-XPCOMUtils.defineLazyGetter(this, "centralCanon", function() {
-  return require("gcli/commands/commands").centralCanon;
-});
-
 var util = require('gcli/util/util');
 
 var protocol = require("devtools/server/protocol");
-var method = protocol.method;
-var Arg = protocol.Arg;
-var Option = protocol.Option;
-var RetVal = protocol.RetVal;
+var { method, Arg, Option, RetVal } = protocol;
 
 /**
  * Manage remote connections that want to talk to GCLI
@@ -46,14 +34,17 @@ var GcliActor = exports.GcliActor = protocol.ActorClass({
       document: browser.contentDocument
     };
 
-    this.requisition = new Requisition({ environment: env });
+    return gcliInit.loadForServer().then(system => {
+      var Requisition = require('gcli/cli').Requisition;
+      this.requisition = new Requisition(system, { environment: environment });
+    });
   },
 
   /**
    * Retrieve a list of the remotely executable commands
    */
   specs: method(function() {
-    return this.requisition.canon.getCommandSpecs();
+    return this.requisition.system.commands.getCommandSpecs();
   }, {
     request: {},
     response: RetVal("json")
@@ -81,9 +72,9 @@ var GcliActor = exports.GcliActor = protocol.ActorClass({
    * Get the state of an input string. i.e. requisition.getStateData()
    */
   state: method(function(typed, start, rank) {
-    return this.requisition.update(typed).then(() => {
+    return this.requisition.update(typed).then(function() {
       return this.requisition.getStateData(start, rank);
-    });
+    }.bind(this));
   }, {
     request: {
       typed: Arg(0, "string"), // The command string
@@ -100,18 +91,18 @@ var GcliActor = exports.GcliActor = protocol.ActorClass({
    * - message: The message to display to the user
    * - predictions: An array of suggested values for the given parameter
    */
-  typeparse: method(function(typed, param) {
+  parseType: method(function(typed, param) {
     return this.requisition.update(typed).then(function() {
       var assignment = this.requisition.getAssignment(param);
 
-      return promise.resolve(assignment.predictions).then(function(predictions) {
+      return Promise.resolve(assignment.predictions).then(function(predictions) {
         return {
           status: assignment.getStatus().toString(),
           message: assignment.message,
           predictions: predictions
         };
       });
-    });
+    }.bind(this));
   }, {
     request: {
       typed: Arg(0, "string"), // The command string
@@ -124,13 +115,13 @@ var GcliActor = exports.GcliActor = protocol.ActorClass({
    * Get the incremented value of some type
    * @return a promise of a string containing the new argument text
    */
-  typeincrement: method(function(typed, param) {
+  incrementType: method(function(typed, param) {
     return this.requisition.update(typed).then(function() {
       var assignment = this.requisition.getAssignment(param);
       return this.requisition.increment(assignment).then(function() {
         return assignment.arg == null ? undefined : assignment.arg.text;
       });
-    });
+    }.bind(this));
   }, {
     request: {
       typed: Arg(0, "string"), // The command string
@@ -140,15 +131,15 @@ var GcliActor = exports.GcliActor = protocol.ActorClass({
   }),
 
   /**
-   * See typeincrement
+   * See incrementType
    */
-  typedecrement: method(function(typed, param) {
+  decrementType: method(function(typed, param) {
     return this.requisition.update(typed).then(function() {
       var assignment = this.requisition.getAssignment(param);
       return this.requisition.decrement(assignment).then(function() {
         return assignment.arg == null ? undefined : assignment.arg.text;
       });
-    });
+    }.bind(this));
   }, {
     request: {
       typed: Arg(0, "string"), // The command string
@@ -160,41 +151,65 @@ var GcliActor = exports.GcliActor = protocol.ActorClass({
   /**
    * Perform a lookup on a selection type to get the allowed values
    */
-  selectioninfo: method(function(commandName, paramName, action) {
-    var command = this.requisition.canon.getCommand(commandName);
-    if (command == null) {
-      throw new Error('No command called \'' + commandName + '\'');
-    }
-
-    var type;
-    command.params.forEach(function(param) {
-      if (param.name === paramName) {
-        type = param.type;
-      }
+  getSelectionLookup: method(function(commandName, paramName) {
+    var type = getType(this.requisition, commandName, paramName);
+
+    var context = this.requisition.executionContext;
+    return type.lookup(context).map(function(info) {
+      // lookup returns an array of objects with name/value properties and
+      // the values might not be JSONable, so remove them
+      return { name: info.name };
     });
-    if (type == null) {
-      throw new Error('No parameter called \'' + paramName + '\' in \'' +
-                      commandName + '\'');
-    }
+  }, {
+    request: {
+      commandName: Arg(0, "string"), // The command containing the parameter in question
+      paramName: Arg(1, "string"),   // The name of the parameter
+    },
+    response: RetVal("json")
+  }),
 
-    switch (action) {
-      case 'lookup':
-        return type.lookup(context);
-      case 'data':
-        return type.data(context);
-      default:
-        throw new Error('Action must be either \'lookup\' or \'data\'');
-    }
+  /**
+   * Perform a lookup on a selection type to get the allowed values
+   */
+  getSelectionData: method(function(commandName, paramName) {
+    var type = getType(this.requisition, commandName, paramName);
+
+    var context = this.requisition.executionContext;
+    return type.data(context);
   }, {
     request: {
-      typed: Arg(0, "string"), // The command containing the parameter in question
-      param: Arg(1, "string"), // The name of the parameter
-      action: Arg(1, "string") // 'lookup' or 'data' depending on the function to call
+      commandName: Arg(0, "string"), // The command containing the parameter in question
+      paramName: Arg(1, "string"),   // The name of the parameter
     },
     response: RetVal("json")
-  })
+  }),
 });
 
+/**
+ * Helper for #getSelectionLookup and #getSelectionData that finds a type
+ * instance given a commandName and paramName
+ */
+function getType(requisition, commandName, paramName) {
+  var command = requisition.system.commands.get(commandName);
+  if (command == null) {
+    throw new Error('No command called \'' + commandName + '\'');
+  }
+
+  var type;
+  command.params.forEach(function(param) {
+    if (param.name === paramName) {
+      type = param.type;
+    }
+  });
+
+  if (type == null) {
+    throw new Error('No parameter called \'' + paramName + '\' in \'' +
+                    commandName + '\'');
+  }
+
+  return type;
+}
+
 exports.GcliFront = protocol.FrontClass(GcliActor, {
   initialize: function(client, tabForm) {
     protocol.Front.prototype.initialize.call(this, client);

From 5672d652684939d4b99bf24407969cc38558c17d Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Thu, 12 Feb 2015 09:54:15 +0000
Subject: [PATCH 10/38] Make sure all commands have a 'runAt' property

---
 browser/devtools/debugger/debugger-commands.js     | 26 ++++++++++++++++++++++
 browser/devtools/eyedropper/commands.js            |  2 ++
 browser/devtools/inspector/inspector-commands.js   |  2 ++
 .../devtools/responsivedesign/resize-commands.js   |  8 +++++++
 browser/devtools/scratchpad/scratchpad-commands.js |  2 ++
 .../devtools/styleeditor/styleeditor-commands.js   |  2 ++
 browser/devtools/webconsole/console-commands.js    |  8 +++++++
 toolkit/devtools/gcli/commands/addon.js            |  4 ++++
 toolkit/devtools/gcli/commands/appcache.js         |  9 ++++++++
 toolkit/devtools/gcli/commands/calllog.js          |  8 +++++++
 toolkit/devtools/gcli/commands/cmd.js              |  4 ++++
 toolkit/devtools/gcli/commands/cookie.js           |  6 +++++
 toolkit/devtools/gcli/commands/folder.js           |  4 ++++
 toolkit/devtools/gcli/commands/highlight.js        |  2 ++
 toolkit/devtools/gcli/commands/inject.js           |  2 ++
 toolkit/devtools/gcli/commands/jsb.js              |  2 ++
 toolkit/devtools/gcli/commands/listen.js           |  2 ++
 toolkit/devtools/gcli/commands/media.js            |  4 ++++
 toolkit/devtools/gcli/commands/pagemod.js          |  8 +++++++
 toolkit/devtools/gcli/commands/paintflashing.js    |  6 +++++
 toolkit/devtools/gcli/commands/restart.js          |  2 ++
 toolkit/devtools/gcli/commands/screenshot.js       |  2 ++
 toolkit/devtools/gcli/commands/tools.js            |  6 +++++
 .../gcli/source/lib/gcli/commands/clear.js         |  1 +
 .../gcli/source/lib/gcli/commands/global.js        |  1 +
 .../devtools/gcli/source/lib/gcli/commands/help.js |  1 +
 .../devtools/gcli/source/lib/gcli/commands/pref.js |  3 +++
 27 files changed, 127 insertions(+)

diff --git a/browser/devtools/debugger/debugger-commands.js b/browser/devtools/debugger/debugger-commands.js
index 1a6feb2..a045964 100644
--- a/browser/devtools/debugger/debugger-commands.js
+++ b/browser/devtools/debugger/debugger-commands.js
@@ -76,6 +76,8 @@ exports.items.push({
  */
 exports.items.push({
   name: "break list",
+  item: "command",
+  runAt: "client",
   description: l10n.lookup("breaklistDesc"),
   returnType: "breakpoints",
   exec: function(args, context) {
@@ -149,6 +151,8 @@ exports.items.push({
  * 'break add line' command
  */
 exports.items.push({
+  item: "command",
+  runAt: "client",
   name: "break add line",
   description: l10n.lookup("breakaddlineDesc"),
   params: [
@@ -195,6 +199,8 @@ exports.items.push({
  * 'break del' command
  */
 exports.items.push({
+  item: "command",
+  runAt: "client",
   name: "break del",
   description: l10n.lookup("breakdelDesc"),
   params: [
@@ -255,6 +261,8 @@ exports.items.push({
  * 'dbg open' command
  */
 exports.items.push({
+  item: "command",
+  runAt: "client",
   name: "dbg open",
   description: l10n.lookup("dbgOpen"),
   params: [],
@@ -268,6 +276,8 @@ exports.items.push({
  * 'dbg close' command
  */
 exports.items.push({
+  item: "command",
+  runAt: "client",
   name: "dbg close",
   description: l10n.lookup("dbgClose"),
   params: [],
@@ -284,6 +294,8 @@ exports.items.push({
  * 'dbg interrupt' command
  */
 exports.items.push({
+  item: "command",
+  runAt: "client",
   name: "dbg interrupt",
   description: l10n.lookup("dbgInterrupt"),
   params: [],
@@ -305,6 +317,8 @@ exports.items.push({
  * 'dbg continue' command
  */
 exports.items.push({
+  item: "command",
+  runAt: "client",
   name: "dbg continue",
   description: l10n.lookup("dbgContinue"),
   params: [],
@@ -326,6 +340,8 @@ exports.items.push({
  * 'dbg step' command
  */
 exports.items.push({
+  item: "command",
+  runAt: "client",
   name: "dbg step",
   description: l10n.lookup("dbgStepDesc"),
   manual: l10n.lookup("dbgStepManual")
@@ -335,6 +351,8 @@ exports.items.push({
  * 'dbg step over' command
  */
 exports.items.push({
+  item: "command",
+  runAt: "client",
   name: "dbg step over",
   description: l10n.lookup("dbgStepOverDesc"),
   params: [],
@@ -356,6 +374,8 @@ exports.items.push({
  * 'dbg step in' command
  */
 exports.items.push({
+  item: "command",
+  runAt: "client",
   name: 'dbg step in',
   description: l10n.lookup("dbgStepInDesc"),
   params: [],
@@ -377,6 +397,8 @@ exports.items.push({
  * 'dbg step over' command
  */
 exports.items.push({
+  item: "command",
+  runAt: "client",
   name: 'dbg step out',
   description: l10n.lookup("dbgStepOutDesc"),
   params: [],
@@ -398,6 +420,8 @@ exports.items.push({
  * 'dbg list' command
  */
 exports.items.push({
+  item: "command",
+  runAt: "client",
   name: "dbg list",
   description: l10n.lookup("dbgListSourcesDesc"),
   params: [],
@@ -444,6 +468,8 @@ exports.items.push({
   };
 
   exports.items.push({
+    item: "command",
+    runAt: "client",
     name: "dbg " + cmd.name,
     description: lookup("Desc"),
     params: [
diff --git a/browser/devtools/eyedropper/commands.js b/browser/devtools/eyedropper/commands.js
index 7d0c29a..e2df89e 100644
--- a/browser/devtools/eyedropper/commands.js
+++ b/browser/devtools/eyedropper/commands.js
@@ -12,6 +12,8 @@ let { Eyedropper, EyedropperManager } = require("devtools/eyedropper/eyedropper"
  * 'eyedropper' command
  */
 exports.items = [{
+  item: "command",
+  runAt: "server",
   name: "eyedropper",
   description: l10n.lookup("eyedropperDesc"),
   manual: l10n.lookup("eyedropperManual"),
diff --git a/browser/devtools/inspector/inspector-commands.js b/browser/devtools/inspector/inspector-commands.js
index 9598a9b..db70708 100644
--- a/browser/devtools/inspector/inspector-commands.js
+++ b/browser/devtools/inspector/inspector-commands.js
@@ -7,6 +7,8 @@
 const l10n = require("gcli/l10n");
 
 exports.items = [{
+  item: "command",
+  runAt: "server",
   name: "inspect",
   description: l10n.lookup("inspectDesc"),
   manual: l10n.lookup("inspectManual"),
diff --git a/browser/devtools/responsivedesign/resize-commands.js b/browser/devtools/responsivedesign/resize-commands.js
index 8175d53..7ccdf25 100644
--- a/browser/devtools/responsivedesign/resize-commands.js
+++ b/browser/devtools/responsivedesign/resize-commands.js
@@ -19,18 +19,24 @@ exports.items = [
     description: l10n.lookup('resizeModeDesc')
   },
   {
+    item: "command",
+    runAt: "server",
     name: 'resize on',
     description: l10n.lookup('resizeModeOnDesc'),
     manual: l10n.lookupFormat('resizeModeManual2', [BRAND_SHORT_NAME]),
     exec: gcli_cmd_resize
   },
   {
+    item: "command",
+    runAt: "server",
     name: 'resize off',
     description: l10n.lookup('resizeModeOffDesc'),
     manual: l10n.lookupFormat('resizeModeManual2', [BRAND_SHORT_NAME]),
     exec: gcli_cmd_resize
   },
   {
+    item: "command",
+    runAt: "server",
     name: 'resize toggle',
     buttonId: "command-button-responsive",
     buttonClass: "command-button command-button-invertable",
@@ -61,6 +67,8 @@ exports.items = [
     exec: gcli_cmd_resize
   },
   {
+    item: "command",
+    runAt: "server",
     name: 'resize to',
     description: l10n.lookup('resizeModeToDesc'),
     params: [
diff --git a/browser/devtools/scratchpad/scratchpad-commands.js b/browser/devtools/scratchpad/scratchpad-commands.js
index 8732bbf..13da7ef 100644
--- a/browser/devtools/scratchpad/scratchpad-commands.js
+++ b/browser/devtools/scratchpad/scratchpad-commands.js
@@ -7,6 +7,8 @@
 const l10n = require("gcli/l10n");
 
 exports.items = [{
+  item: "command",
+  runAt: "server",
   name: "scratchpad",
   buttonId: "command-button-scratchpad",
   buttonClass: "command-button command-button-invertable",
diff --git a/browser/devtools/styleeditor/styleeditor-commands.js b/browser/devtools/styleeditor/styleeditor-commands.js
index 15cf62f..262a0c1 100644
--- a/browser/devtools/styleeditor/styleeditor-commands.js
+++ b/browser/devtools/styleeditor/styleeditor-commands.js
@@ -7,6 +7,8 @@
 const l10n = require("gcli/l10n");
 
 exports.items = [{
+  item: "command",
+  runAt: "client",
   name: "edit",
   description: l10n.lookup("editDesc"),
   manual: l10n.lookup("editManual2"),
diff --git a/browser/devtools/webconsole/console-commands.js b/browser/devtools/webconsole/console-commands.js
index b6424a5..588d6a9 100644
--- a/browser/devtools/webconsole/console-commands.js
+++ b/browser/devtools/webconsole/console-commands.js
@@ -9,6 +9,8 @@ const { gDevTools } = require("resource:///modules/devtools/gDevTools.jsm");
 
 exports.items = [
   {
+    item: "command",
+    runAt: "client",
     name: 'splitconsole',
     hidden: true,
     buttonId: "command-button-splitconsole",
@@ -55,6 +57,8 @@ exports.items = [
     manual: l10n.lookup("consoleManual")
   },
   {
+    item: "command",
+    runAt: "client",
     name: "console clear",
     description: l10n.lookup("consoleclearDesc"),
     exec: function(args, context) {
@@ -72,6 +76,8 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "client",
     name: "console close",
     description: l10n.lookup("consolecloseDesc"),
     exec: function(args, context) {
@@ -79,6 +85,8 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "client",
     name: "console open",
     description: l10n.lookup("consoleopenDesc"),
     exec: function(args, context) {
diff --git a/toolkit/devtools/gcli/commands/addon.js b/toolkit/devtools/gcli/commands/addon.js
index c79a053..ac67e22 100644
--- a/toolkit/devtools/gcli/commands/addon.js
+++ b/toolkit/devtools/gcli/commands/addon.js
@@ -210,6 +210,8 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "client",
     name: "addon enable",
     description: l10n.lookup("addonEnableDesc"),
     params: [
@@ -230,6 +232,8 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "client",
     name: "addon disable",
     description: l10n.lookup("addonDisableDesc"),
     params: [
diff --git a/toolkit/devtools/gcli/commands/appcache.js b/toolkit/devtools/gcli/commands/appcache.js
index a2b9e82..40e1b16e 100644
--- a/toolkit/devtools/gcli/commands/appcache.js
+++ b/toolkit/devtools/gcli/commands/appcache.js
@@ -10,10 +10,13 @@ loader.lazyImporter(this, "AppCacheUtils", "resource:///modules/devtools/AppCach
 
 exports.items = [
   {
+    item: "command",
     name: "appcache",
     description: l10n.lookup("appCacheDesc")
   },
   {
+    item: "command",
+    runAt: "client",
     name: "appcache validate",
     description: l10n.lookup("appCacheValidateDesc"),
     manual: l10n.lookup("appCacheValidateManual"),
@@ -73,6 +76,8 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "client",
     name: "appcache clear",
     description: l10n.lookup("appCacheClearDesc"),
     manual: l10n.lookup("appCacheClearManual"),
@@ -84,6 +89,8 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "client",
     name: "appcache list",
     description: l10n.lookup("appCacheListDesc"),
     manual: l10n.lookup("appCacheListManual"),
@@ -158,6 +165,8 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "client",
     name: "appcache viewentry",
     description: l10n.lookup("appCacheViewEntryDesc"),
     manual: l10n.lookup("appCacheViewEntryManual"),
diff --git a/toolkit/devtools/gcli/commands/calllog.js b/toolkit/devtools/gcli/commands/calllog.js
index 086f6d5..13ffee8 100644
--- a/toolkit/devtools/gcli/commands/calllog.js
+++ b/toolkit/devtools/gcli/commands/calllog.js
@@ -28,6 +28,8 @@ exports.items = [
     description: l10n.lookup("calllogDesc")
   },
   {
+    item: "command",
+    runAt: "client",
     name: "calllog start",
     description: l10n.lookup("calllogStartDesc"),
 
@@ -73,6 +75,8 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "client",
     name: "calllog stop",
     description: l10n.lookup("calllogStopDesc"),
 
@@ -91,6 +95,8 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "client",
     name: "calllog chromestart",
     description: l10n.lookup("calllogChromeStartDesc"),
     get hidden() gcli.hiddenByChromePref(),
@@ -189,6 +195,8 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "client",
     name: "calllog chromestop",
     description: l10n.lookup("calllogChromeStopDesc"),
     get hidden() gcli.hiddenByChromePref(),
diff --git a/toolkit/devtools/gcli/commands/cmd.js b/toolkit/devtools/gcli/commands/cmd.js
index 2d19336..697a596 100644
--- a/toolkit/devtools/gcli/commands/cmd.js
+++ b/toolkit/devtools/gcli/commands/cmd.js
@@ -131,6 +131,8 @@ exports.items = [
     description: l10n.lookup("cmdDesc")
   },
   {
+    item: "command",
+    runAt: "client",
     name: "cmd refresh",
     description: l10n.lookup("cmdRefreshDesc"),
     get hidden() {
@@ -145,6 +147,8 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "client",
     name: "cmd setdir",
     description: l10n.lookup("cmdSetdirDesc"),
     manual: l10n.lookup("cmdSetdirManual2"),
diff --git a/toolkit/devtools/gcli/commands/cookie.js b/toolkit/devtools/gcli/commands/cookie.js
index 67390c9..e357a35 100644
--- a/toolkit/devtools/gcli/commands/cookie.js
+++ b/toolkit/devtools/gcli/commands/cookie.js
@@ -40,6 +40,8 @@ exports.items = [
     manual: l10n.lookup("cookieManual")
   },
   {
+    item: "command",
+    runAt: "server",
     name: "cookie list",
     description: l10n.lookup("cookieListDesc"),
     manual: l10n.lookup("cookieListManual"),
@@ -73,6 +75,8 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "server",
     name: "cookie remove",
     description: l10n.lookup("cookieRemoveDesc"),
     manual: l10n.lookup("cookieRemoveManual"),
@@ -163,6 +167,8 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "server",
     name: "cookie set",
     description: l10n.lookup("cookieSetDesc"),
     manual: l10n.lookup("cookieSetManual"),
diff --git a/toolkit/devtools/gcli/commands/folder.js b/toolkit/devtools/gcli/commands/folder.js
index 719743c..e120b9b 100644
--- a/toolkit/devtools/gcli/commands/folder.js
+++ b/toolkit/devtools/gcli/commands/folder.js
@@ -34,6 +34,8 @@ exports.items = [
     description: l10n.lookup("folderDesc")
   },
   {
+    item: "command",
+    runAt: "client",
     name: "folder open",
     description: l10n.lookup("folderOpenDesc"),
     params: [
@@ -60,6 +62,8 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "client",
     name: "folder openprofile",
     description: l10n.lookup("folderOpenProfileDesc"),
     returnType: "string",
diff --git a/toolkit/devtools/gcli/commands/highlight.js b/toolkit/devtools/gcli/commands/highlight.js
index c0f238e..65b072b 100644
--- a/toolkit/devtools/gcli/commands/highlight.js
+++ b/toolkit/devtools/gcli/commands/highlight.js
@@ -34,6 +34,8 @@ function unhighlightAll() {
 
 exports.items = [
   {
+    item: "command",
+    runAt: "server",
     name: "highlight",
     description: l10n.lookup("highlightDesc"),
     manual: l10n.lookup("highlightManual"),
diff --git a/toolkit/devtools/gcli/commands/inject.js b/toolkit/devtools/gcli/commands/inject.js
index ba53159..75ac998 100644
--- a/toolkit/devtools/gcli/commands/inject.js
+++ b/toolkit/devtools/gcli/commands/inject.js
@@ -10,6 +10,8 @@ const l10n = require("gcli/l10n");
 
 exports.items = [
   {
+    item: "command",
+    runAt: "server",
     name: "inject",
     description: l10n.lookup("injectDesc"),
     manual: l10n.lookup("injectManual2"),
diff --git a/toolkit/devtools/gcli/commands/jsb.js b/toolkit/devtools/gcli/commands/jsb.js
index a3d1029..2a40a24f 100644
--- a/toolkit/devtools/gcli/commands/jsb.js
+++ b/toolkit/devtools/gcli/commands/jsb.js
@@ -15,6 +15,8 @@ devtools.lazyRequireGetter(this, "beautify", "devtools/jsbeautify");
 
 exports.items = [
   {
+    item: "command",
+    runAt: "server",
     name: "jsb",
     description: l10n.lookup("jsbDesc"),
     returnValue:"string",
diff --git a/toolkit/devtools/gcli/commands/listen.js b/toolkit/devtools/gcli/commands/listen.js
index 42bfead..f17c720 100644
--- a/toolkit/devtools/gcli/commands/listen.js
+++ b/toolkit/devtools/gcli/commands/listen.js
@@ -34,6 +34,8 @@ XPCOMUtils.defineLazyGetter(this, "debuggerServer", () => {
 
 exports.items = [
   {
+    item: "command",
+    runAt: "client",
     name: "listen",
     description: l10n.lookup("listenDesc"),
     manual: l10n.lookupFormat("listenManual2", [ BRAND_SHORT_NAME ]),
diff --git a/toolkit/devtools/gcli/commands/media.js b/toolkit/devtools/gcli/commands/media.js
index 28dfe96..e3fe91c 100644
--- a/toolkit/devtools/gcli/commands/media.js
+++ b/toolkit/devtools/gcli/commands/media.js
@@ -12,6 +12,8 @@ exports.items = [
     description: l10n.lookup("mediaDesc")
   },
   {
+    item: "command",
+    runAt: "server",
     name: "media emulate",
     description: l10n.lookup("mediaEmulateDesc"),
     manual: l10n.lookup("mediaEmulateManual"),
@@ -35,6 +37,8 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "server",
     name: "media reset",
     description: l10n.lookup("mediaResetDesc"),
     exec: function(args, context) {
diff --git a/toolkit/devtools/gcli/commands/pagemod.js b/toolkit/devtools/gcli/commands/pagemod.js
index 33b5f1a..184ab1e 100644
--- a/toolkit/devtools/gcli/commands/pagemod.js
+++ b/toolkit/devtools/gcli/commands/pagemod.js
@@ -13,6 +13,8 @@ exports.items = [
     description: l10n.lookup("pagemodDesc"),
   },
   {
+    item: "command",
+    runAt: "server",
     name: "pagemod replace",
     description: l10n.lookup("pagemodReplaceDesc"),
     params: [
@@ -124,6 +126,8 @@ exports.items = [
     description: l10n.lookup("pagemodRemoveDesc"),
   },
   {
+    item: "command",
+    runAt: "server",
     name: "pagemod remove element",
     description: l10n.lookup("pagemodRemoveElementDesc"),
     params: [
@@ -176,6 +180,8 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "server",
     name: "pagemod remove attribute",
     description: l10n.lookup("pagemodRemoveAttributeDesc"),
     params: [
@@ -235,6 +241,8 @@ exports.items = [
     description: l10n.lookup("exportDesc"),
   },
   {
+    item: "command",
+    runAt: "server",
     name: "export html",
     description: l10n.lookup("exportHtmlDesc"),
     params: [
diff --git a/toolkit/devtools/gcli/commands/paintflashing.js b/toolkit/devtools/gcli/commands/paintflashing.js
index 892e368..e42f5af 100644
--- a/toolkit/devtools/gcli/commands/paintflashing.js
+++ b/toolkit/devtools/gcli/commands/paintflashing.js
@@ -44,6 +44,8 @@ exports.items = [
     description: l10n.lookup("paintflashingDesc")
   },
   {
+    item: "command",
+    runAt: "server",
     name: "paintflashing on",
     description: l10n.lookup("paintflashingOnDesc"),
     manual: l10n.lookup("paintflashingManual"),
@@ -70,6 +72,8 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "server",
     name: "paintflashing off",
     description: l10n.lookup("paintflashingOffDesc"),
     manual: l10n.lookup("paintflashingManual"),
@@ -96,6 +100,8 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "server",
     name: "paintflashing toggle",
     hidden: true,
     buttonId: "command-button-paintflashing",
diff --git a/toolkit/devtools/gcli/commands/restart.js b/toolkit/devtools/gcli/commands/restart.js
index ce3a5b6..fb8985f 100644
--- a/toolkit/devtools/gcli/commands/restart.js
+++ b/toolkit/devtools/gcli/commands/restart.js
@@ -27,6 +27,8 @@ const BRAND_SHORT_NAME = Cc["@mozilla.org/intl/stringbundle;1"]
  */
 exports.items = [
   {
+    item: "command",
+    runAt: "client",
     name: "restart",
     description: l10n.lookupFormat("restartBrowserDesc", [ BRAND_SHORT_NAME ]),
     params: [
diff --git a/toolkit/devtools/gcli/commands/screenshot.js b/toolkit/devtools/gcli/commands/screenshot.js
index 6c99978..aeae3e8 100644
--- a/toolkit/devtools/gcli/commands/screenshot.js
+++ b/toolkit/devtools/gcli/commands/screenshot.js
@@ -23,6 +23,8 @@ const FILENAME_DEFAULT_VALUE = " ";
 
 exports.items = [
   {
+    item: "command",
+    runAt: "server",
     name: "screenshot",
     description: l10n.lookup("screenshotDesc"),
     manual: l10n.lookup("screenshotManual"),
diff --git a/toolkit/devtools/gcli/commands/tools.js b/toolkit/devtools/gcli/commands/tools.js
index ea9237b..dc9fc56 100644
--- a/toolkit/devtools/gcli/commands/tools.js
+++ b/toolkit/devtools/gcli/commands/tools.js
@@ -24,6 +24,8 @@ exports.items = [
     get hidden() gcli.hiddenByChromePref(),
   },
   {
+    item: "command",
+    runAt: "client",
     name: "tools srcdir",
     description: l10n.lookup("toolsSrcdirDesc"),
     manual: l10n.lookupFormat("toolsSrcdirManual2", [ BRAND_SHORT_NAME ]),
@@ -60,6 +62,8 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "client",
     name: "tools builtin",
     description: l10n.lookup("toolsBuiltinDesc"),
     manual: l10n.lookup("toolsBuiltinManual"),
@@ -72,6 +76,8 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "client",
     name: "tools reload",
     description: l10n.lookup("toolsReloadDesc"),
     get hidden() {
diff --git a/toolkit/devtools/gcli/source/lib/gcli/commands/clear.js b/toolkit/devtools/gcli/source/lib/gcli/commands/clear.js
index 2122f6b..8f93270 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/commands/clear.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/commands/clear.js
@@ -22,6 +22,7 @@ exports.items = [
   {
     // A command to clear the output area
     item: 'command',
+    runAt: 'client',
     name: 'clear',
     description: l10n.lookup('clearDesc'),
     returnType: 'clearoutput',
diff --git a/toolkit/devtools/gcli/source/lib/gcli/commands/global.js b/toolkit/devtools/gcli/source/lib/gcli/commands/global.js
index 4965a36..9bb738f 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/commands/global.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/commands/global.js
@@ -39,6 +39,7 @@ exports.items = [
   {
     // A command to switch JS globals
     item: 'command',
+    runAt: 'client',
     name: 'global',
     description: l10n.lookup('globalDesc'),
     params: [
diff --git a/toolkit/devtools/gcli/source/lib/gcli/commands/help.js b/toolkit/devtools/gcli/source/lib/gcli/commands/help.js
index 596724e..a5c3914 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/commands/help.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/commands/help.js
@@ -205,6 +205,7 @@ exports.items = [
     // 'help' command
     item: 'command',
     name: 'help',
+    runAt: 'client',
     description: l10n.lookup('helpDesc'),
     manual: l10n.lookup('helpManual'),
     params: [
diff --git a/toolkit/devtools/gcli/source/lib/gcli/commands/pref.js b/toolkit/devtools/gcli/source/lib/gcli/commands/pref.js
index 5b1f6e9..387b1f8 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/commands/pref.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/commands/pref.js
@@ -30,6 +30,7 @@ exports.items = [
     // 'pref show' command
     item: 'command',
     name: 'pref show',
+    runAt: 'client',
     description: l10n.lookup('prefShowDesc'),
     manual: l10n.lookup('prefShowManual'),
     params: [
@@ -49,6 +50,7 @@ exports.items = [
     // 'pref set' command
     item: 'command',
     name: 'pref set',
+    runAt: 'client',
     description: l10n.lookup('prefSetDesc'),
     manual: l10n.lookup('prefSetManual'),
     params: [
@@ -73,6 +75,7 @@ exports.items = [
     // 'pref reset' command
     item: 'command',
     name: 'pref reset',
+    runAt: 'client',
     description: l10n.lookup('prefResetDesc'),
     manual: l10n.lookup('prefResetManual'),
     params: [

From 60062e302c5dd7935219bede630d0bfbea32a4f7 Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Fri, 13 Feb 2015 20:44:31 +0000
Subject: [PATCH 11/38] mozilla-central uses " rather than '

---
 browser/devtools/commandline/commands-index.js | 104 +++++++++++++------------
 1 file changed, 53 insertions(+), 51 deletions(-)

diff --git a/browser/devtools/commandline/commands-index.js b/browser/devtools/commandline/commands-index.js
index 93d2c51..e5174e8 100644
--- a/browser/devtools/commandline/commands-index.js
+++ b/browser/devtools/commandline/commands-index.js
@@ -4,47 +4,49 @@
 
 "use strict";
 
-const defaultTools = require("main").defaultTools;
-const createSystem = require('gcli/system').createSystem;
-const connectSystems = require('gcli/system').connectSystems;
+const createSystem = require("gcli/system").createSystem;
+const connectFront = require("gcli/system").connectFront;
+const GcliFront = require("devtools/server/actors/gcli").GcliFront;
+
+console.log('GcliFront', GcliFront);
 
 /**
  * This is the basic list of modules that should be loaded into each
  * requisition instance whether server side or client side
  */
 exports.baseModules = [
-  'gcli/types/delegate',
-  'gcli/types/selection',
-  'gcli/types/array',
-
-  'gcli/types/boolean',
-  'gcli/types/command',
-  'gcli/types/date',
-  'gcli/types/file',
-  'gcli/types/javascript',
-  'gcli/types/node',
-  'gcli/types/number',
-  'gcli/types/resource',
-  'gcli/types/setting',
-  'gcli/types/string',
-  'gcli/types/union',
-  'gcli/types/url',
-
-  'gcli/fields/fields',
-  'gcli/fields/delegate',
-  'gcli/fields/selection',
-
-  'gcli/ui/focus',
-  'gcli/ui/intro',
-
-  'gcli/converters/converters',
-  'gcli/converters/basic',
-  'gcli/converters/terminal',
-
-  'gcli/languages/command',
-  'gcli/languages/javascript',
-
-  'gcli/commands/context',
+  "gcli/types/delegate",
+  "gcli/types/selection",
+  "gcli/types/array",
+
+  "gcli/types/boolean",
+  "gcli/types/command",
+  "gcli/types/date",
+  "gcli/types/file",
+  "gcli/types/javascript",
+  "gcli/types/node",
+  "gcli/types/number",
+  "gcli/types/resource",
+  "gcli/types/setting",
+  "gcli/types/string",
+  "gcli/types/union",
+  "gcli/types/url",
+
+  "gcli/fields/fields",
+  "gcli/fields/delegate",
+  "gcli/fields/selection",
+
+  "gcli/ui/focus",
+  "gcli/ui/intro",
+
+  "gcli/converters/converters",
+  "gcli/converters/basic",
+  "gcli/converters/terminal",
+
+  "gcli/languages/command",
+  "gcli/languages/javascript",
+
+  "gcli/commands/context",
 ];
 
 /**
@@ -52,18 +54,18 @@ exports.baseModules = [
  * runAt=client or something
  */
 exports.clientModules = [
-  // 'gcli/cli',                  // No need for '{' with web console
-  'gcli/commands/clear',
-  // 'gcli/commands/connect',     // We need to fix our RDP connector
-  // 'gcli/commands/exec',        // No exec in Firefox yet
-  // 'gcli/commands/global',
-  'gcli/commands/help',
-  // 'gcli/commands/intro',       // No need for intro command
-  // 'gcli/commands/lang',
-  // 'gcli/commands/mocks',       // Only for testing
-  'gcli/commands/pref',
-  // 'gcli/commands/preflist',    // Too slow in Firefox
-  // 'gcli/commands/test',        // Only for testing
+  // "gcli/cli",                  // No need for "{" with web console
+  "gcli/commands/clear",
+  // "gcli/commands/connect",     // We need to fix our RDP connector
+  // "gcli/commands/exec",        // No exec in Firefox yet
+  // "gcli/commands/global",
+  "gcli/commands/help",
+  // "gcli/commands/intro",       // No need for intro command
+  // "gcli/commands/lang",
+  // "gcli/commands/mocks",       // Only for testing
+  "gcli/commands/pref",
+  // "gcli/commands/preflist",    // Too slow in Firefox
+  // "gcli/commands/test",        // Only for testing
 
   // No demo or node commands
 ];
@@ -113,8 +115,8 @@ var systemForServer;
  */
 exports.loadForServer = function() {
   if (systemForServer == null) {
-    console.log('Creating GCLI system for server');
-    systemForServer = createSystem({ location: 'server' });
+    console.log("Creating GCLI system for server");
+    systemForServer = createSystem({ location: "server" });
 
     systemForServer.addItemsByModule(exports.baseModules, { delayedLoad: true });
     systemForServer.addItemsByModule(exports.clientModules, { delayedLoad: true });
@@ -142,8 +144,8 @@ exports.loadForTarget = function(target) {
     return promise;
   }
 
-  console.log('Creating GCLI system for ' + target.url);
-  let system = createSystem({ location: 'client' });
+  console.log("Creating GCLI system for " + target.url);
+  let system = createSystem({ location: "client" });
 
   system.addItemsByModule(exports.baseModules, { delayedLoad: true });
   system.addItemsByModule(exports.clientModules, { delayedLoad: true });

From 5243ff53cd9a71739f162c28c034f2039405cf84 Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Mon, 16 Feb 2015 17:36:33 +0000
Subject: [PATCH 12/38] Remove unwanted console.log

---
 browser/devtools/commandline/commands-index.js | 1 -
 1 file changed, 1 deletion(-)

diff --git a/browser/devtools/commandline/commands-index.js b/browser/devtools/commandline/commands-index.js
index e5174e8..13f9cd7 100644
--- a/browser/devtools/commandline/commands-index.js
+++ b/browser/devtools/commandline/commands-index.js
@@ -115,7 +115,6 @@ var systemForServer;
  */
 exports.loadForServer = function() {
   if (systemForServer == null) {
-    console.log("Creating GCLI system for server");
     systemForServer = createSystem({ location: "server" });
 
     systemForServer.addItemsByModule(exports.baseModules, { delayedLoad: true });

From 515f07d5ebb74f1b2b60e212e09f1db231e31185 Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Fri, 13 Feb 2015 20:45:08 +0000
Subject: [PATCH 13/38] Remove files not used in Firefox

---
 toolkit/devtools/gcli/moz.build                    |   4 -
 .../gcli/source/lib/gcli/connectors/index.js       |  67 ----
 .../gcli/source/lib/gcli/connectors/protocol.js    |  52 ---
 .../gcli/source/lib/gcli/connectors/rdp.js         | 145 --------
 .../gcli/source/lib/gcli/connectors/remoted.js     | 408 ---------------------
 5 files changed, 676 deletions(-)
 delete mode 100644 toolkit/devtools/gcli/source/lib/gcli/connectors/index.js
 delete mode 100644 toolkit/devtools/gcli/source/lib/gcli/connectors/protocol.js
 delete mode 100644 toolkit/devtools/gcli/source/lib/gcli/connectors/rdp.js
 delete mode 100644 toolkit/devtools/gcli/source/lib/gcli/connectors/remoted.js

diff --git a/toolkit/devtools/gcli/moz.build b/toolkit/devtools/gcli/moz.build
index ac46b80..9ada6ee 100644
--- a/toolkit/devtools/gcli/moz.build
+++ b/toolkit/devtools/gcli/moz.build
@@ -42,10 +42,6 @@ EXTRA_JS_MODULES.devtools.gcli.commands += [
 
 EXTRA_JS_MODULES.devtools.gcli.connectors += [
     'source/lib/gcli/connectors/connectors.js',
-    'source/lib/gcli/connectors/index.js',
-    'source/lib/gcli/connectors/protocol.js',
-    'source/lib/gcli/connectors/rdp.js',
-    'source/lib/gcli/connectors/remoted.js',
 ]
 
 EXTRA_JS_MODULES.devtools.gcli.converters += [
diff --git a/toolkit/devtools/gcli/source/lib/gcli/connectors/index.js b/toolkit/devtools/gcli/source/lib/gcli/connectors/index.js
deleted file mode 100644
index 156c5c3..0000000
--- a/toolkit/devtools/gcli/source/lib/gcli/connectors/index.js
+++ /dev/null
@@ -1,67 +0,0 @@
-/*
- * Copyright 2012, Mozilla Foundation and contributors
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-'use strict';
-
-var createSystem = require('../system').createSystem;
-var connectSystems = require('../system').connectSystems;
-
-// Patch-up IE9
-require('../util/legacy');
-
-/**
- * Connect to a remote system and setup the commands/types/converters etc needed
- * to make it all work
- */
-exports.createSystem = function(options) {
-  options = options || {};
-
-  var system = createSystem();
-
-  // The items that are always needed on the client
-  var items = [
-    require('../items/basic').items,
-    require('../items/ui').items,
-    require('../items/remote').items,
-    // The context command makes no sense on the server
-    require('../commands/context').items,
-  ].reduce(function(prev, curr) { return prev.concat(curr); }, []);
-  system.addItems(items);
-
-  // These are the commands stored on the remote side that have converters which
-  // we'll need to present the data. Ideally front.specs() would transfer these,
-  // that doesn't happen yet so we add them manually
-  var requiredConverters = [
-    require('../cli').items,
-    require('../commands/clear').items,
-    require('../commands/connect').items,
-    require('../commands/exec').items,
-    require('../commands/global').items,
-    require('../commands/help').items,
-    require('../commands/intro').items,
-    require('../commands/lang').items,
-    require('../commands/preflist').items,
-    require('../commands/pref').items,
-    require('../commands/test').items,
-  ].reduce(function(prev, curr) { return prev.concat(curr); }, [])
-   .filter(function(item) { return item.item === 'converter'; });
-  system.addItems(requiredConverters);
-
-  var connector = system.connectors.get(options.method);
-  return connectSystems(system, connector, options.url).then(function() {
-    return system;
-  });
-};
diff --git a/toolkit/devtools/gcli/source/lib/gcli/connectors/protocol.js b/toolkit/devtools/gcli/source/lib/gcli/connectors/protocol.js
deleted file mode 100644
index acb1f49..0000000
--- a/toolkit/devtools/gcli/source/lib/gcli/connectors/protocol.js
+++ /dev/null
@@ -1,52 +0,0 @@
-/*
- * Copyright 2012, Mozilla Foundation and contributors
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-'use strict';
-
-/**
- * This is a quick and dirty stub that allows us to write code in remoted.js
- * that looks like gcli.js
- */
-exports.method = function(func, spec) {
-  // An array of strings, being the names of the parameters
-  var argSpecs = [];
-  if (spec.request != null) {
-    Object.keys(spec.request).forEach(function(name) {
-      var arg = spec.request[name];
-      argSpecs[arg.index] = name;
-    });
-  }
-
-  return function(data) {
-    var args = (data == null) ?
-               [] :
-               argSpecs.map(function(name) { return data[name]; });
-    return func.apply(this, args);
-  };
-};
-
-exports.Arg = function(index, type) {
-  return {
-    index: index,
-    type: type
-  };
-};
-
-exports.RetVal = function(type) {
-  return {
-    type: type
-  };
-};
diff --git a/toolkit/devtools/gcli/source/lib/gcli/connectors/rdp.js b/toolkit/devtools/gcli/source/lib/gcli/connectors/rdp.js
deleted file mode 100644
index abfe7b3..0000000
--- a/toolkit/devtools/gcli/source/lib/gcli/connectors/rdp.js
+++ /dev/null
@@ -1,145 +0,0 @@
-/*
- * Copyright 2012, Mozilla Foundation and contributors
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-'use strict';
-
-var Cu = require('chrome').Cu;
-
-var DebuggerClient = Cu.import('resource://gre/modules/devtools/dbg-client.jsm', {}).DebuggerClient;
-var { Task } = Cu.import("resource://gre/modules/Task.jsm", {});
-
-var Promise = require('../util/promise').Promise;
-var Connection = require('./connectors').Connection;
-
-/**
- * What port should we use by default?
- */
-Object.defineProperty(exports, 'defaultPort', {
-  get: function() {
-    var Services = Cu.import('resource://gre/modules/Services.jsm', {}).Services;
-    try {
-      return Services.prefs.getIntPref('devtools.debugger.chrome-debugging-port');
-    }
-    catch (ex) {
-      console.error('Can\'t use default port from prefs. Using 9999');
-      return 9999;
-    }
-  },
-  enumerable: true
-});
-
-exports.items = [
-  {
-    item: 'connector',
-    name: 'rdp',
-
-    connect: function(url) {
-      return RdpConnection.create(url);
-    }
-  }
-];
-
-/**
- * RdpConnection uses the Firefox Remote Debug Protocol
- */
-function RdpConnection(url) {
-  throw new Error('Use RdpConnection.create');
-}
-
-/**
- * Asynchronous construction
- */
-RdpConnection.create = Task.async(function*(url) {
-  this.host = url;
-  this.port = undefined; // TODO: Split out the port number
-
-  this.requests = {};
-  this.nextRequestId = 0;
-
-  this._emit = this._emit.bind(this);
-
-  let transport = yield DebuggerClient.socketConnect({
-    host: this.host,
-    port: this.port
-  });
-
-  return new Promise(function(resolve, reject) {
-    this.client = new DebuggerClient(transport);
-    this.client.connect(function() {
-      this.client.listTabs(function(response) {
-        this.actor = response.gcliActor;
-        resolve();
-      }.bind(this));
-    }.bind(this));
-  }.bind(this));
-});
-
-RdpConnection.prototype = Object.create(Connection.prototype);
-
-RdpConnection.prototype.call = function(command, data) {
-  return new Promise(function(resolve, reject) {
-    var request = { to: this.actor, type: command, data: data };
-
-    this.client.request(request, function(response) {
-      resolve(response.commandSpecs);
-    });
-  }.bind(this));
-};
-
-RdpConnection.prototype.disconnect = function() {
-  return new Promise(function(resolve, reject) {
-    this.client.close(function() {
-      resolve();
-    });
-
-    delete this._emit;
-  }.bind(this));
-};
-
-
-/**
- * A Request is a command typed at the client which lives until the command
- * has finished executing on the server
- */
-function Request(actor, typed, args) {
-  this.json = {
-    to: actor,
-    type: 'execute',
-    typed: typed,
-    args: args,
-    requestId: 'id-' + Request._nextRequestId++,
-  };
-
-  this.promise = new Promise(function(resolve, reject) {
-    this._resolve = resolve;
-  }.bind(this));
-}
-
-Request._nextRequestId = 0;
-
-/**
- * Called by the connection when a remote command has finished executing
- * @param error boolean indicating output state
- * @param type the type of the returned data
- * @param data the data itself
- */
-Request.prototype.complete = function(error, type, data) {
-  this._resolve({
-    error: error,
-    type: type,
-    data: data
-  });
-};
diff --git a/toolkit/devtools/gcli/source/lib/gcli/connectors/remoted.js b/toolkit/devtools/gcli/source/lib/gcli/connectors/remoted.js
deleted file mode 100644
index 339f8af..0000000
--- a/toolkit/devtools/gcli/source/lib/gcli/connectors/remoted.js
+++ /dev/null
@@ -1,408 +0,0 @@
-/*
- * Copyright 2012, Mozilla Foundation and contributors
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/* jshint quotmark:false, newcap:false */
-
-'use strict';
-
-var Promise = require('../util/promise').Promise;
-var host = require('../util/host');
-var fileparser = require('../util/fileparser');
-
-var protocol = require('./protocol');
-var method = protocol.method;
-var Arg = protocol.Arg;
-var RetVal = protocol.RetVal;
-
-/**
- * Provide JSON mapping services to remote functionality of a Requisition
- */
-var Remoter = exports.Remoter = function(requisition) {
-  this.requisition = requisition;
-  this._listeners = [];
-};
-
-/**
- * Add a new listener
- */
-Remoter.prototype.addListener = function(action) {
-  var listener = {
-    action: action,
-    caller: function() {
-      var commands = this.requisition.system.commands;
-      action('commandsChanged', commands.getCommandSpecs());
-    }.bind(this)
-  };
-  this._listeners.push(listener);
-
-  this.requisition.system.commands.onCommandsChange.add(listener.caller);
-};
-
-/**
- * Remove an existing listener
- */
-Remoter.prototype.removeListener = function(action) {
-  var listener;
-
-  this._listeners = this._listeners.filter(function(li) {
-    if (li.action === action) {
-      listener = li;
-      return false;
-    }
-    return true;
-  });
-
-  if (listener == null) {
-    throw new Error('action not a known listener');
-  }
-
-  this.requisition.system.commands.onCommandsChange.remove(listener.caller);
-};
-
-/**
- * These functions are designed to be remoted via RDP/XHR/websocket, etc
- */
-Remoter.prototype.exposed = {
-  /**
-   * Retrieve a list of the remotely executable commands
-   */
-  specs: method(function() {
-    return this.requisition.system.commands.getCommandSpecs();
-  }, {
-    request: {},
-    response: RetVal("json")
-  }),
-
-  /**
-   * Execute a GCLI command
-   * @return a promise of an object with the following properties:
-   * - data: The output of the command
-   * - type: The type of the data to allow selection of a converter
-   * - error: True if the output was considered an error
-   */
-  execute: method(function(typed) {
-    return this.requisition.updateExec(typed).then(function(output) {
-      return output.toJson();
-    });
-  }, {
-    request: {
-      typed: Arg(0, "string") // The command string
-    },
-    response: RetVal("json")
-  }),
-
-  /**
-   * Get the state of an input string. i.e. requisition.getStateData()
-   */
-  state: method(function(typed, start, rank) {
-    return this.requisition.update(typed).then(function() {
-      return this.requisition.getStateData(start, rank);
-    }.bind(this));
-  }, {
-    request: {
-      typed: Arg(0, "string"), // The command string
-      start: Arg(1, "number"), // Cursor start position
-      rank: Arg(2, "number") // The prediction offset (# times UP/DOWN pressed)
-    },
-    response: RetVal("json")
-  }),
-
-  /**
-   * Call type.parse to check validity. Used by the remote type
-   * @return a promise of an object with the following properties:
-   * - status: Of of the following strings: VALID|INCOMPLETE|ERROR
-   * - message: The message to display to the user
-   * - predictions: An array of suggested values for the given parameter
-   */
-  parseType: method(function(typed, param) {
-    return this.requisition.update(typed).then(function() {
-      var assignment = this.requisition.getAssignment(param);
-
-      return Promise.resolve(assignment.predictions).then(function(predictions) {
-        return {
-          status: assignment.getStatus().toString(),
-          message: assignment.message,
-          predictions: predictions
-        };
-      });
-    }.bind(this));
-  }, {
-    request: {
-      typed: Arg(0, "string"), // The command string
-      param: Arg(1, "string") // The name of the parameter to parse
-    },
-    response: RetVal("json")
-  }),
-
-  /**
-   * Get the incremented value of some type
-   * @return a promise of a string containing the new argument text
-   */
-  incrementType: method(function(typed, param) {
-    return this.requisition.update(typed).then(function() {
-      var assignment = this.requisition.getAssignment(param);
-      return this.requisition.increment(assignment).then(function() {
-        return assignment.arg == null ? undefined : assignment.arg.text;
-      });
-    }.bind(this));
-  }, {
-    request: {
-      typed: Arg(0, "string"), // The command string
-      param: Arg(1, "string") // The name of the parameter to parse
-    },
-    response: RetVal("string")
-  }),
-
-  /**
-   * See incrementType
-   */
-  decrementType: method(function(typed, param) {
-    return this.requisition.update(typed).then(function() {
-      var assignment = this.requisition.getAssignment(param);
-      return this.requisition.decrement(assignment).then(function() {
-        return assignment.arg == null ? undefined : assignment.arg.text;
-      });
-    }.bind(this));
-  }, {
-    request: {
-      typed: Arg(0, "string"), // The command string
-      param: Arg(1, "string") // The name of the parameter to parse
-    },
-    response: RetVal("string")
-  }),
-
-  /**
-   * Perform a lookup on a selection type to get the allowed values
-   */
-  getSelectionLookup: method(function(commandName, paramName) {
-    var type = getType(this.requisition, commandName, paramName);
-
-    var context = this.requisition.executionContext;
-    return type.lookup(context).map(function(info) {
-      // lookup returns an array of objects with name/value properties and
-      // the values might not be JSONable, so remove them
-      return { name: info.name };
-    });
-  }, {
-    request: {
-      commandName: Arg(0, "string"), // The command containing the parameter in question
-      paramName: Arg(1, "string"),   // The name of the parameter
-    },
-    response: RetVal("json")
-  }),
-
-  /**
-   * Perform a lookup on a selection type to get the allowed values
-   */
-  getSelectionData: method(function(commandName, paramName) {
-    var type = getType(this.requisition, commandName, paramName);
-
-    var context = this.requisition.executionContext;
-    return type.data(context);
-  }, {
-    request: {
-      commandName: Arg(0, "string"), // The command containing the parameter in question
-      paramName: Arg(1, "string"),   // The name of the parameter
-    },
-    response: RetVal("json")
-  }),
-
-  /**
-   * Execute a system command
-   * @return a promise of a string containing the output of the command
-   */
-  system: method(function(cmd, args, cwd, env) {
-    var context = this.requisition.executionContext;
-    return host.spawn(context, { cmd: cmd, args: args, cwd: cwd, env: env });
-  }, {
-    request: {
-      cmd: Arg(0, "string"), // The executable to call
-      args: Arg(1, "array:string"), // Arguments to the executable
-      cwd: Arg(2, "string"), // The working directory
-      env: Arg(3, "json") // A map of environment variables
-    },
-    response: RetVal("json")
-  }),
-
-  /**
-   * Examine the filesystem for file matches
-   */
-  parseFile: method(function(typed, filetype, existing, matches) {
-    var options = {
-      filetype: filetype,
-      existing: existing,
-      matches: new RegExp(matches)
-    };
-
-    var context = this.requisition.executionContext;
-    return fileparser.parse(context, typed, options).then(function(reply) {
-      reply.status = reply.status.toString();
-      if (reply.predictor == null) {
-        return reply;
-      }
-
-      return reply.predictor().then(function(predictions) {
-        delete reply.predictor;
-        reply.predictions = predictions;
-        return reply;
-      });
-    });
-  }, {
-    request: {
-      typed: Arg(0, "string"), // The filename as typed by the user
-      filetype: Arg(1, "array:string"), // The expected filetype
-      existing: Arg(2, "string"), // Boolean which defines if a file/directory is expected to exist
-      matches: Arg(3, "json") // String of a regular expression which the result should match
-    },
-    response: RetVal("json")
-  }),
-};
-
-/**
- * Helper for #getSelectionLookup and #getSelectionData that finds a type
- * instance given a commandName and paramName
- */
-function getType(requisition, commandName, paramName) {
-  var command = requisition.system.commands.get(commandName);
-  if (command == null) {
-    throw new Error('No command called \'' + commandName + '\'');
-  }
-
-  var type;
-  command.params.forEach(function(param) {
-    if (param.name === paramName) {
-      type = param.type;
-    }
-  });
-
-  if (type == null) {
-    throw new Error('No parameter called \'' + paramName + '\' in \'' +
-                    commandName + '\'');
-  }
-
-  return type;
-}
-
-/**
- * Asynchronous construction. Use GcliFront();
- * @private
- */
-function GcliFront() {
-  throw new Error('Use GcliFront.create().then(front => ...)');
-}
-
-/**
- *
- */
-GcliFront.create = function(connector, url) {
-  return connector.connect(url).then(function(connection) {
-    var front = Object.create(GcliFront.prototype);
-    return front._init(connection);
-  });
-};
-
-/**
- * Asynchronous construction. Use GcliFront();
- * @private
- */
-GcliFront.prototype._init = function(connection) {
-  this.connection = connection;
-  return this;
-};
-
-GcliFront.prototype.on = function(eventName, action) {
-  this.connection.on(eventName, action);
-};
-
-GcliFront.prototype.off = function(eventName, action) {
-  this.connection.off(eventName, action);
-};
-
-
-GcliFront.prototype.specs = function() {
-  var data = {
-  };
-  return this.connection.call('specs', data);
-};
-
-GcliFront.prototype.execute = function(typed) {
-  var data = {
-    typed: typed
-  };
-  return this.connection.call('execute', data);
-};
-
-GcliFront.prototype.parseFile = function(typed, filetype, existing, matches) {
-  var data = {
-    typed: typed,
-    filetype: filetype,
-    existing: existing,
-    matches: matches
-  };
-  return this.connection.call('parseFile', data);
-};
-
-GcliFront.prototype.parseType = function(typed, param) {
-  var data = {
-    typed: typed,
-    param: param
-  };
-  return this.connection.call('parseType', data);
-};
-
-GcliFront.prototype.incrementType = function(typed, param) {
-  var data = {
-    typed: typed,
-    param: param
-  };
-  return this.connection.call('incrementType', data);
-};
-
-GcliFront.prototype.decrementType = function(typed, param) {
-  var data = {
-    typed: typed,
-    param: param
-  };
-  return this.connection.call('decrementType', data);
-};
-
-GcliFront.prototype.getSelectionLookup = function(commandName, paramName) {
-  var data = {
-    commandName: commandName,
-    paramName: paramName
-  };
-  return this.connection.call('getSelectionLookup', data);
-};
-
-GcliFront.prototype.getSelectionData = function(commandName, paramName) {
-  var data = {
-    commandName: commandName,
-    paramName: paramName
-  };
-  return this.connection.call('getSelectionData', data);
-};
-
-GcliFront.prototype.system = function(cmd, args, cwd, env) {
-  var data = {
-    cmd: cmd,
-    args: args,
-    cwd: cwd,
-    env: env
-  };
-  return this.connection.call('system', data);
-};
-
-exports.GcliFront = GcliFront;

From a7a75328845edb28aa6426cb6dd6be71870e244e Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Fri, 13 Feb 2015 20:46:34 +0000
Subject: [PATCH 14/38] Dependency on main.js was causing problems, workaround
 for now

---
 browser/devtools/commandline/commands-index.js | 54 ++++++++++++++++++++++----
 1 file changed, 46 insertions(+), 8 deletions(-)

diff --git a/browser/devtools/commandline/commands-index.js b/browser/devtools/commandline/commands-index.js
index 13f9cd7..b232a57 100644
--- a/browser/devtools/commandline/commands-index.js
+++ b/browser/devtools/commandline/commands-index.js
@@ -96,13 +96,51 @@ exports.devtoolsModules = [
 ];
 
 /**
- * Find the tools that have 'command: [ "some/module" ]' definitions, and
- * flatten them into a single array of module names.
+ * Some commands belong to a tool (see getToolModules). This is a list of the
+ * modules that are *not* owned by a tool.
  */
-exports.getToolModules = function() {
-  return defaultTools.map(definition => definition.commands || [])
-                     .reduce((prev, curr) => prev.concat(curr), []);
-};
+exports.devtoolsModules = [
+  "devtools/tilt/tilt-commands",
+  "gcli/commands/addon",
+  "gcli/commands/appcache",
+  "gcli/commands/calllog",
+  "gcli/commands/cmd",
+  "gcli/commands/cookie",
+  "gcli/commands/csscoverage",
+  "gcli/commands/folder",
+  "gcli/commands/highlight",
+  "gcli/commands/inject",
+  "gcli/commands/jsb",
+  "gcli/commands/listen",
+  "gcli/commands/media",
+  "gcli/commands/pagemod",
+  "gcli/commands/paintflashing",
+  "gcli/commands/restart",
+  "gcli/commands/screenshot",
+  "gcli/commands/tools",
+];
+
+/**
+ * Register commands from tools with 'command: [ "some/module" ]' definitions.
+ * We'd like to do this:
+ *
+ *     const defaultTools = require("main").defaultTools;
+ *     return defaultTools.map(definition => definition.commands || [])
+ *                        .reduce((prev, curr) => prev.concat(curr), []);
+ *
+ * Except that requiring 'main' from the server causes it to attempt to
+ * re-register a bunch of already registered things.
+ * TODO: Find a way to require("main") without require("main")
+ */
+exports.devtoolsToolModules = [
+  "devtools/webconsole/console-commands",
+  "devtools/resize-commands",
+  "devtools/inspector/inspector-commands",
+  "devtools/eyedropper/commands",
+  "devtools/debugger/debugger-commands",
+  "devtools/styleeditor/styleeditor-commands",
+  "devtools/scratchpad/scratchpad-commands",
+];
 
 /**
  * Cache of the system we created
@@ -120,7 +158,7 @@ exports.loadForServer = function() {
     systemForServer.addItemsByModule(exports.baseModules, { delayedLoad: true });
     systemForServer.addItemsByModule(exports.clientModules, { delayedLoad: true });
     systemForServer.addItemsByModule(exports.devtoolsModules, { delayedLoad: true });
-    systemForServer.addItemsByModule(exports.getToolModules(), { delayedLoad: true });
+    systemForServer.addItemsByModule(exports.devtoolsToolModules, { delayedLoad: true });
 
     let { mozDirLoader } = require("gcli/commands/cmd");
     systemForServer.addItemsByModule("mozcmd", { delayedLoad: true, loader: mozDirLoader });
@@ -149,7 +187,7 @@ exports.loadForTarget = function(target) {
   system.addItemsByModule(exports.baseModules, { delayedLoad: true });
   system.addItemsByModule(exports.clientModules, { delayedLoad: true });
   system.addItemsByModule(exports.devtoolsModules, { delayedLoad: true });
-  system.addItemsByModule(exports.getToolModules(), { delayedLoad: true });
+  system.addItemsByModule(exports.devtoolsToolModules, { delayedLoad: true });
 
   let { mozDirLoader } = require("gcli/commands/cmd");
   system.addItemsByModule("mozcmd", { delayedLoad: true, loader: mozDirLoader });

From 36c7fad6d698156159d6c85af39d4b9754999e05 Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Fri, 13 Feb 2015 20:48:11 +0000
Subject: [PATCH 15/38] 'system' should use a GcliFront not a connector (from
 GCLI)

GCLI in general should rely on a front rather than a connector which is
a much lower level thing.
---
 browser/devtools/commandline/commands-index.js  |  5 +++--
 toolkit/devtools/gcli/source/lib/gcli/system.js | 17 +++++++----------
 2 files changed, 10 insertions(+), 12 deletions(-)

diff --git a/browser/devtools/commandline/commands-index.js b/browser/devtools/commandline/commands-index.js
index b232a57..303e1c6 100644
--- a/browser/devtools/commandline/commands-index.js
+++ b/browser/devtools/commandline/commands-index.js
@@ -194,8 +194,9 @@ exports.loadForTarget = function(target) {
 
   // Load the client system
   promise = system.load().then(() => {
-    let connector = system.connectors.get('direct');
-    return connectSystems(system, connector).then(() => system);
+    return GcliFront.create(target).then(front => {
+      return connectFront(system, front).then(() => system);
+    });
   });
 
   systemForTarget.set(target, promise);
diff --git a/toolkit/devtools/gcli/source/lib/gcli/system.js b/toolkit/devtools/gcli/source/lib/gcli/system.js
index 1cd4655..034bf501 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/system.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/system.js
@@ -24,7 +24,6 @@ var Fields = require('./fields/fields').Fields;
 var Languages = require('./languages/languages').Languages;
 var Settings = require('./settings').Settings;
 var Types = require('./types/types').Types;
-var GcliFront = require('./connectors/remoted').GcliFront;
 
 /**
  * This is the heart of the API that we expose to the outside.
@@ -244,16 +243,14 @@ exports.createSystem = function(options) {
 /**
  * Connect a local system with another at the other end of a connector
  */
-exports.connectSystems = function(system, connector, url) {
-  return GcliFront.create(connector, url).then(function(front) {
-    front.on('commandsChanged', function(specs) {
-      syncItems(system, specs, front);
-    });
+exports.connectFront = function(system, front) {
+  front.on('commandsChanged', function(specs) {
+    syncItems(system, specs, front);
+  });
 
-    return front.specs().then(function(specs) {
-      syncItems(system, specs, front);
-      return system;
-    });
+  return front.specs().then(function(specs) {
+    syncItems(system, specs, front);
+    return system;
   });
 };
 

From 2a963b09ad8b77d39378c5d351c591831f153bd7 Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Fri, 13 Feb 2015 20:48:33 +0000
Subject: [PATCH 16/38] Be less brutal with errors

When registering modules it's bad to take the nuclear option because
then nothing works on a small error, so we log instead.
---
 toolkit/devtools/gcli/source/lib/gcli/system.js | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/toolkit/devtools/gcli/source/lib/gcli/system.js b/toolkit/devtools/gcli/source/lib/gcli/system.js
index 034bf501..fd227e7 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/system.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/system.js
@@ -127,8 +127,8 @@ exports.createSystem = function(options) {
       });
     }
     catch (ex) {
-      console.error(ex);
-      return Promise.reject('Failure when loading \'' + name + '\'');
+      console.error('Failed to load module ' + name + ': ' + ex);
+      console.error(ex.stack);
     }
   };
 

From 19178eb762872d6dafa203971a531583a0faccc5 Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Fri, 13 Feb 2015 20:49:38 +0000
Subject: [PATCH 17/38] Significant work on GcliActor

---
 toolkit/devtools/server/actors/gcli.js | 242 +++++++++++++++++++++------------
 1 file changed, 158 insertions(+), 84 deletions(-)

diff --git a/toolkit/devtools/server/actors/gcli.js b/toolkit/devtools/server/actors/gcli.js
index 0b4d2f1..bcbfd8e 100644
--- a/toolkit/devtools/server/actors/gcli.js
+++ b/toolkit/devtools/server/actors/gcli.js
@@ -4,47 +4,45 @@
 
 "use strict";
 
-var Cu = require('chrome').Cu;
-var XPCOMUtils = Cu.import("resource://gre/modules/XPCOMUtils.jsm", {}).XPCOMUtils;
-
-XPCOMUtils.defineLazyGetter(this, "Requisition", function() {
-  return require("gcli/cli").Requisition;
-});
-
-var util = require('gcli/util/util');
-
-var protocol = require("devtools/server/protocol");
-var { method, Arg, Option, RetVal } = protocol;
+const { Task } = require('resource://gre/modules/Task.jsm');
+const {
+  method, Arg, Option, RetVal, Front, FrontClass, Actor, ActorClass
+} = require("devtools/server/protocol");
 
 /**
  * Manage remote connections that want to talk to GCLI
  */
-var GcliActor = exports.GcliActor = protocol.ActorClass({
+const GcliActor = ActorClass({
   typeName: "gcli",
 
+  events: {
+    "commands-changed" : {
+      type: "commandsChanged",
+      commandsChanged: Arg(0, "json")
+    }
+  },
+
   initialize: function(conn, tabActor) {
-    protocol.Actor.prototype.initialize.call(this, conn);
-    this.tabActor = tabActor;
-    let browser = tabActor.browser;
-
-    let environment = {
-      chromeWindow: browser.ownerGlobal,
-      chromeDocument: browser.ownerDocument,
-      window: browser.contentWindow,
-      document: browser.contentDocument
-    };
-
-    return gcliInit.loadForServer().then(system => {
-      var Requisition = require('gcli/cli').Requisition;
-      this.requisition = new Requisition(system, { environment: environment });
-    });
+    Actor.prototype.initialize.call(this, conn);
+
+    this._tabActor = tabActor;
+    this._requisitionPromise = undefined; // see _getRequisition()
+  },
+
+  destroy: function() {
+    this._requisitionPromise = undefined;
+    this._tabActor = undefined;
+
+    protocol.Actor.prototype.destroy.call(this);
   },
 
   /**
    * Retrieve a list of the remotely executable commands
    */
   specs: method(function() {
-    return this.requisition.system.commands.getCommandSpecs();
+    return this._getRequisition().then(requisition => {
+      return requisition.system.commands.getCommandSpecs();
+    });
   }, {
     request: {},
     response: RetVal("json")
@@ -58,8 +56,10 @@ var GcliActor = exports.GcliActor = protocol.ActorClass({
    * - error: True if the output was considered an error
    */
   execute: method(function(typed) {
-    return this.requisition.updateExec(typed).then(function(output) {
-      return output.toJson();
+    return this._getRequisition().then(requisition => {
+      return requisition.updateExec(typed).then(function(output) {
+        return output.toJson();
+      });
     });
   }, {
     request: {
@@ -72,9 +72,11 @@ var GcliActor = exports.GcliActor = protocol.ActorClass({
    * Get the state of an input string. i.e. requisition.getStateData()
    */
   state: method(function(typed, start, rank) {
-    return this.requisition.update(typed).then(function() {
-      return this.requisition.getStateData(start, rank);
-    }.bind(this));
+    return this._getRequisition().then(requisition => {
+      return requisition.update(typed).then(() => {
+        return requisition.getStateData(start, rank);
+      });
+    });
   }, {
     request: {
       typed: Arg(0, "string"), // The command string
@@ -92,17 +94,18 @@ var GcliActor = exports.GcliActor = protocol.ActorClass({
    * - predictions: An array of suggested values for the given parameter
    */
   parseType: method(function(typed, param) {
-    return this.requisition.update(typed).then(function() {
-      var assignment = this.requisition.getAssignment(param);
-
-      return Promise.resolve(assignment.predictions).then(function(predictions) {
-        return {
-          status: assignment.getStatus().toString(),
-          message: assignment.message,
-          predictions: predictions
-        };
+    return this._getRequisition().then(requisition => {
+      return requisition.update(typed).then(() => {
+        let assignment = requisition.getAssignment(param);
+        return Promise.resolve(assignment.predictions).then(function(predictions) {
+          return {
+            status: assignment.getStatus().toString(),
+            message: assignment.message,
+            predictions: predictions
+          };
+        });
       });
-    }.bind(this));
+    });
   }, {
     request: {
       typed: Arg(0, "string"), // The command string
@@ -116,12 +119,14 @@ var GcliActor = exports.GcliActor = protocol.ActorClass({
    * @return a promise of a string containing the new argument text
    */
   incrementType: method(function(typed, param) {
-    return this.requisition.update(typed).then(function() {
-      var assignment = this.requisition.getAssignment(param);
-      return this.requisition.increment(assignment).then(function() {
-        return assignment.arg == null ? undefined : assignment.arg.text;
+    return this._getRequisition().then(requisition => {
+      return requisition.update(typed).then(() => {
+        let assignment = requisition.getAssignment(param);
+        return requisition.increment(assignment).then(function() {
+          return assignment.arg == null ? undefined : assignment.arg.text;
+        });
       });
-    }.bind(this));
+    });
   }, {
     request: {
       typed: Arg(0, "string"), // The command string
@@ -134,12 +139,14 @@ var GcliActor = exports.GcliActor = protocol.ActorClass({
    * See incrementType
    */
   decrementType: method(function(typed, param) {
-    return this.requisition.update(typed).then(function() {
-      var assignment = this.requisition.getAssignment(param);
-      return this.requisition.decrement(assignment).then(function() {
-        return assignment.arg == null ? undefined : assignment.arg.text;
+    return this._getRequisition().then(requisition => {
+      return requisition.update(typed).then(() => {
+        let assignment = requisition.getAssignment(param);
+        return requisition.decrement(assignment).then(function() {
+          return assignment.arg == null ? undefined : assignment.arg.text;
+        });
       });
-    }.bind(this));
+    });
   }, {
     request: {
       typed: Arg(0, "string"), // The command string
@@ -152,13 +159,15 @@ var GcliActor = exports.GcliActor = protocol.ActorClass({
    * Perform a lookup on a selection type to get the allowed values
    */
   getSelectionLookup: method(function(commandName, paramName) {
-    var type = getType(this.requisition, commandName, paramName);
+    return this._getRequisition().then(requisition => {
+      let type = this._getType(requisition, commandName, paramName);
 
-    var context = this.requisition.executionContext;
-    return type.lookup(context).map(function(info) {
-      // lookup returns an array of objects with name/value properties and
-      // the values might not be JSONable, so remove them
-      return { name: info.name };
+      let context = requisition.executionContext;
+      return type.lookup(context).map(function(info) {
+        // lookup returns an array of objects with name/value properties and
+        // the values might not be JSONable, so remove them
+        return { name: info.name };
+      });
     });
   }, {
     request: {
@@ -172,10 +181,12 @@ var GcliActor = exports.GcliActor = protocol.ActorClass({
    * Perform a lookup on a selection type to get the allowed values
    */
   getSelectionData: method(function(commandName, paramName) {
-    var type = getType(this.requisition, commandName, paramName);
+    return this._getRequisition().then(requisition => {
+      let type = this._getType(requisition, commandName, paramName);
 
-    var context = this.requisition.executionContext;
-    return type.data(context);
+      let context = requisition.executionContext;
+      return type.data(context);
+    });
   }, {
     request: {
       commandName: Arg(0, "string"), // The command containing the parameter in question
@@ -183,36 +194,79 @@ var GcliActor = exports.GcliActor = protocol.ActorClass({
     },
     response: RetVal("json")
   }),
-});
 
-/**
- * Helper for #getSelectionLookup and #getSelectionData that finds a type
- * instance given a commandName and paramName
- */
-function getType(requisition, commandName, paramName) {
-  var command = requisition.system.commands.get(commandName);
-  if (command == null) {
-    throw new Error('No command called \'' + commandName + '\'');
-  }
+  /**
+   * Lazy init
+   * @param tabActor
+   */
+  _getRequisition: function() {
+    if (this._requisitionPromise != null) {
+      return this._requisitionPromise;
+    }
+
+    let gcliInit = require("devtools/commandline/commands-index");
+    let Requisition = require('gcli/cli').Requisition;
+
+    this._requisitionPromise = gcliInit.loadForServer().then(system => {
+      let environment = {};
 
-  var type;
-  command.params.forEach(function(param) {
-    if (param.name === paramName) {
-      type = param.type;
+      /*
+      this._tabActor is "unavailable"
+      Maybe that's a startup sequence thing?
+      */
+      try {
+        console.log('create env');
+        console.log(this._tabActor.docShell);
+
+        environment.chromeWindow = this._tabActor.docShell.topWindow;
+        environment.chromeDocument = this._tabActor.docShell.topWindow.document;
+        environment.window = this._tabActor.window;
+        environment.document = this._tabActor.window.document;
+      }
+      catch (ex) {
+        console.log(ex);
+      }
+
+      return new Requisition(system, { environment: environment });
+    });
+
+    return this._requisitionPromise;
+  },
+
+  /**
+   * Helper for #getSelectionLookup and #getSelectionData that finds a type
+   * instance given a commandName and paramName
+   */
+  _getType: function(requisition, commandName, paramName) {
+    let command = requisition.system.commands.get(commandName);
+    if (command == null) {
+      throw new Error('No command called \'' + commandName + '\'');
     }
-  });
 
-  if (type == null) {
-    throw new Error('No parameter called \'' + paramName + '\' in \'' +
-                    commandName + '\'');
+    let type;
+    command.params.forEach(function(param) {
+      if (param.name === paramName) {
+        type = param.type;
+      }
+    });
+
+    if (type == null) {
+      throw new Error('No parameter called \'' + paramName + '\' in \'' +
+                      commandName + '\'');
+    }
+
+    return type;
   }
+});
 
-  return type;
-}
+exports.GcliActor = GcliActor;
 
-exports.GcliFront = protocol.FrontClass(GcliActor, {
+/**
+ * 
+ */
+const GcliFront = exports.GcliFront = FrontClass(GcliActor, {
   initialize: function(client, tabForm) {
-    protocol.Front.prototype.initialize.call(this, client);
+    Front.prototype.initialize.call(this, client);
     this.actorID = tabForm.gcliActor;
 
     // XXX: This is the first actor type in its hierarchy to use the protocol
@@ -220,3 +274,23 @@ exports.GcliFront = protocol.FrontClass(GcliActor, {
     this.manage(this);
   },
 });
+
+// A cache of created fronts: WeakMap<Target, Front>
+// TODO: CSSUsageFront has WeakMap<Target, Client> is there a good reason?
+const knownFronts = new WeakMap();
+
+/**
+ * Create a GcliFront only when needed (returns a promise)
+ * For notes on target.makeRemote(), see
+ * https://bugzilla.mozilla.org/show_bug.cgi?id=1016330#c7
+ */
+exports.GcliFront.create = function(target) {
+  return target.makeRemote().then(() => {
+    let front = knownFronts.get(target);
+    if (front == null && target.form.gcliActor != null) {
+      front = new GcliFront(target.client, target.form);
+      knownFronts.set(target, front);
+    }
+    return front;
+  });
+};

From 48ab1ca3b8075dd91e79b3946facd7396bb284dc Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Sun, 15 Feb 2015 12:50:06 +0000
Subject: [PATCH 18/38] Improve support for custom properties for commands

(Imported from GCLI commit with additional changes to uses of the
'specs' function in Firefox)

GCLI has allowed (by turning a blind eye) to commands and other items
that have additional properties. This is used by Firefox to allow
commands to be placed in the toolbox and toolbar buttons with custom
icons.

With remote GCLI it's important that these custom properties are
transferred along with the standard command metadata. This change allows
the 'specs' function to take an array of custom properties which should
be transferred.
---
 browser/devtools/commandline/commands-index.js     | 10 +++--
 .../gcli/source/lib/gcli/commands/commands.js      | 22 +++++++--
 toolkit/devtools/gcli/source/lib/gcli/system.js    | 44 ++++++++++--------
 toolkit/devtools/server/actors/gcli.js             | 52 +++++++++++-----------
 4 files changed, 79 insertions(+), 49 deletions(-)

diff --git a/browser/devtools/commandline/commands-index.js b/browser/devtools/commandline/commands-index.js
index 303e1c6..b85b9cf 100644
--- a/browser/devtools/commandline/commands-index.js
+++ b/browser/devtools/commandline/commands-index.js
@@ -8,8 +8,6 @@ const createSystem = require("gcli/system").createSystem;
 const connectFront = require("gcli/system").connectFront;
 const GcliFront = require("devtools/server/actors/gcli").GcliFront;
 
-console.log('GcliFront', GcliFront);
-
 /**
  * This is the basic list of modules that should be loaded into each
  * requisition instance whether server side or client side
@@ -173,6 +171,12 @@ exports.loadForServer = function() {
 var systemForTarget = new WeakMap();
 
 /**
+ * The toolbox uses the following properties on a command to allow it to be
+ * added to the toolbox toolbar
+ */
+var customProperties = [ "buttonId", "buttonClass", "tooltipText" ];
+
+/**
  * Create a system which connects to a GCLI in a remote target
  */
 exports.loadForTarget = function(target) {
@@ -195,7 +199,7 @@ exports.loadForTarget = function(target) {
   // Load the client system
   promise = system.load().then(() => {
     return GcliFront.create(target).then(front => {
-      return connectFront(system, front).then(() => system);
+      return connectFront(system, front, customProperties).then(() => system);
     });
   });
 
diff --git a/toolkit/devtools/gcli/source/lib/gcli/commands/commands.js b/toolkit/devtools/gcli/source/lib/gcli/commands/commands.js
index 0cc4cfb..e76ea8b 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/commands/commands.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/commands/commands.js
@@ -161,8 +161,11 @@ function Command(types, commandSpec) {
 
 /**
  * JSON serializer that avoids non-serializable data
+ * @param customProps Array of strings containing additional properties which,
+ * if specified in the command spec, will be included in the JSON. Normally we
+ * transfer only the properties required for GCLI to function.
  */
-Command.prototype.toJson = function() {
+Command.prototype.toJson = function(customProps) {
   var json = {
     item: 'command',
     name: this.name,
@@ -170,6 +173,7 @@ Command.prototype.toJson = function() {
     returnType: this.returnType,
     isParent: (this.exec == null)
   };
+
   if (this.description !==  l10n.lookup('canonDescNone')) {
     json.description = this.description;
   }
@@ -179,6 +183,15 @@ Command.prototype.toJson = function() {
   if (this.hidden != null) {
     json.hidden = this.hidden;
   }
+
+  if (Array.isArray(customProps)) {
+    customProps.forEach(function(prop) {
+      if (this[prop] != null) {
+        json[prop] = this[prop];
+      }
+    }.bind(this));
+  }
+
   return json;
 };
 
@@ -425,14 +438,17 @@ Commands.prototype.getAll = function() {
 /**
  * Get access to the stored commandMetaDatas (i.e. before they were made into
  * instances of Command/Parameters) so we can remote them.
+ * @param customProps Array of strings containing additional properties which,
+ * if specified in the command spec, will be included in the JSON. Normally we
+ * transfer only the properties required for GCLI to function.
  */
-Commands.prototype.getCommandSpecs = function() {
+Commands.prototype.getCommandSpecs = function(customProps) {
   var commandSpecs = [];
 
   Object.keys(this._commands).forEach(function(name) {
     var command = this._commands[name];
     if (!command.noRemote) {
-      commandSpecs.push(command.toJson());
+      commandSpecs.push(command.toJson(customProps));
     }
   }.bind(this));
 
diff --git a/toolkit/devtools/gcli/source/lib/gcli/system.js b/toolkit/devtools/gcli/source/lib/gcli/system.js
index fd227e7..0bbc543 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/system.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/system.js
@@ -17,6 +17,7 @@
 'use strict';
 
 var Promise = require('./util/promise').Promise;
+var util = require('./util/util');
 var Commands = require('./commands/commands').Commands;
 var Connectors = require('./connectors/connectors').Connectors;
 var Converters = require('./converters/converters').Converters;
@@ -242,34 +243,41 @@ exports.createSystem = function(options) {
 
 /**
  * Connect a local system with another at the other end of a connector
+ * @param system System to which we're adding commands
+ * @param front Front which allows access to the remote system from which we
+ * import commands
+ * @param customProps Array of strings specifying additional properties defined
+ * on remote commands that should be considered part of the metadata for the
+ * commands imported into the local system
  */
-exports.connectFront = function(system, front) {
+exports.connectFront = function(system, front, customProps) {
   front.on('commandsChanged', function(specs) {
-    syncItems(system, specs, front);
+    syncItems(system, front, customProps).then(null, util.errorHandler);
   });
 
-  return front.specs().then(function(specs) {
-    syncItems(system, specs, front);
-    return system;
-  });
+  return syncItems(system, front, customProps);
 };
 
 /**
  * Remove the items in this system that came from a previous sync action, and
- * re-add them
+ * re-add them. See connectFront() for explanation of properties
  */
-function syncItems(system, specs, front) {
-  // Go through all the commands removing any that are associated with the given
-  // front. The method of association is the hack in addLocalFunctions.
-  system.commands.getAll().forEach(function(command) {
-    if (command.front === front) {
-      system.commands.remove(command);
-    }
-  });
+function syncItems(system, front, customProps) {
+  return front.specs(customProps).then(function(specs) {
+    // Go through all the commands removing any that are associated with the
+    // given front. The method of association is the hack in addLocalFunctions.
+    system.commands.getAll().forEach(function(command) {
+      if (command.front === front) {
+        system.commands.remove(command);
+      }
+    });
 
-  var remoteItems = addLocalFunctions(specs, front);
-  system.addItems(remoteItems);
-}
+    var remoteItems = addLocalFunctions(specs, front);
+    system.addItems(remoteItems);
+
+    return system;
+  });
+};
 
 /**
  * Take the data from the 'specs' command (or the 'commandsChanged' event) and
diff --git a/toolkit/devtools/server/actors/gcli.js b/toolkit/devtools/server/actors/gcli.js
index bcbfd8e..0ef5cce 100644
--- a/toolkit/devtools/server/actors/gcli.js
+++ b/toolkit/devtools/server/actors/gcli.js
@@ -8,6 +8,7 @@ const { Task } = require('resource://gre/modules/Task.jsm');
 const {
   method, Arg, Option, RetVal, Front, FrontClass, Actor, ActorClass
 } = require("devtools/server/protocol");
+const events = require("sdk/event/core");
 
 /**
  * Manage remote connections that want to talk to GCLI
@@ -25,6 +26,8 @@ const GcliActor = ActorClass({
   initialize: function(conn, tabActor) {
     Actor.prototype.initialize.call(this, conn);
 
+    this._commandsChanged = this._commandsChanged.bind(this);
+
     this._tabActor = tabActor;
     this._requisitionPromise = undefined; // see _getRequisition()
   },
@@ -34,17 +37,28 @@ const GcliActor = ActorClass({
     this._tabActor = undefined;
 
     protocol.Actor.prototype.destroy.call(this);
+
+    return this._getRequisition().then(requisition => {
+      requisition.system.commands.onCommandsChange.remove(this._commandsChanged);
+      this._commandsChanged = undefined;
+    });
   },
 
   /**
    * Retrieve a list of the remotely executable commands
+   * @param customProps Array of strings containing additional properties which,
+   * if specified in the command spec, will be included in the JSON. Normally we
+   * transfer only the properties required for GCLI to function.
    */
-  specs: method(function() {
+  specs: method(function(customProps) {
+    this._lastCustomProps = customProps;
     return this._getRequisition().then(requisition => {
-      return requisition.system.commands.getCommandSpecs();
+      return requisition.system.commands.getCommandSpecs(customProps);
     });
   }, {
-    request: {},
+    request: {
+      customProps: Arg(0, "nullable:array:string")
+    },
     response: RetVal("json")
   }),
 
@@ -196,8 +210,7 @@ const GcliActor = ActorClass({
   }),
 
   /**
-   * Lazy init
-   * @param tabActor
+   * Lazy init for a Requisition
    */
   _getRequisition: function() {
     if (this._requisitionPromise != null) {
@@ -205,29 +218,18 @@ const GcliActor = ActorClass({
     }
 
     let gcliInit = require("devtools/commandline/commands-index");
-    let Requisition = require('gcli/cli').Requisition;
+    let Requisition = require("gcli/cli").Requisition;
 
     this._requisitionPromise = gcliInit.loadForServer().then(system => {
-      let environment = {};
-
-      /*
-      this._tabActor is "unavailable"
-      Maybe that's a startup sequence thing?
-      */
-      try {
-        console.log('create env');
-        console.log(this._tabActor.docShell);
-
-        environment.chromeWindow = this._tabActor.docShell.topWindow;
-        environment.chromeDocument = this._tabActor.docShell.topWindow.document;
-        environment.window = this._tabActor.window;
-        environment.document = this._tabActor.window.document;
-      }
-      catch (ex) {
-        console.log(ex);
-      }
+      let environment = {
+        get window() this._tabActor.window,
+        get document() this._tabActor.window.document
+      };
+
+      let requisition = new Requisition(system, { environment: environment });
+      requisition.system.commands.onCommandsChange.add(this._commandsChanged);
 
-      return new Requisition(system, { environment: environment });
+      return requisition;
     });
 
     return this._requisitionPromise;

From 2d0bc4c4669b10edc2e1cf31eddd2030f48ea663 Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Sun, 15 Feb 2015 12:50:26 +0000
Subject: [PATCH 19/38] Firefox uses " rather than '

---
 toolkit/devtools/server/actors/gcli.js | 15 +++++++++++----
 1 file changed, 11 insertions(+), 4 deletions(-)

diff --git a/toolkit/devtools/server/actors/gcli.js b/toolkit/devtools/server/actors/gcli.js
index 0ef5cce..7fefe1d 100644
--- a/toolkit/devtools/server/actors/gcli.js
+++ b/toolkit/devtools/server/actors/gcli.js
@@ -4,7 +4,7 @@
 
 "use strict";
 
-const { Task } = require('resource://gre/modules/Task.jsm');
+const { Task } = require("resource://gre/modules/Task.jsm");
 const {
   method, Arg, Option, RetVal, Front, FrontClass, Actor, ActorClass
 } = require("devtools/server/protocol");
@@ -236,13 +236,20 @@ const GcliActor = ActorClass({
   },
 
   /**
+   * Pass events from requisition.system.commands.onCommandsChange upwards
+   */
+  _commandsChanged: function() {
+    events.emit(this, "commands-changed");
+  },
+
+  /**
    * Helper for #getSelectionLookup and #getSelectionData that finds a type
    * instance given a commandName and paramName
    */
   _getType: function(requisition, commandName, paramName) {
     let command = requisition.system.commands.get(commandName);
     if (command == null) {
-      throw new Error('No command called \'' + commandName + '\'');
+      throw new Error("No command called '" + commandName + "'");
     }
 
     let type;
@@ -253,8 +260,8 @@ const GcliActor = ActorClass({
     });
 
     if (type == null) {
-      throw new Error('No parameter called \'' + paramName + '\' in \'' +
-                      commandName + '\'');
+      throw new Error("No parameter called '" + paramName + "' in '" +
+                      commandName + "'");
     }
 
     return type;

From d182883f7bc32f368ca3f7b451ac8176eee5e520 Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Mon, 16 Feb 2015 14:57:29 +0000
Subject: [PATCH 20/38] Allow remote commands in the toolbox toolbar

---
 browser/devtools/shared/DeveloperToolbar.jsm | 6 ------
 1 file changed, 6 deletions(-)

diff --git a/browser/devtools/shared/DeveloperToolbar.jsm b/browser/devtools/shared/DeveloperToolbar.jsm
index ca0e423..116b133 100644
--- a/browser/devtools/shared/DeveloperToolbar.jsm
+++ b/browser/devtools/shared/DeveloperToolbar.jsm
@@ -107,12 +107,6 @@ let CommandUtils = {
           throw new Error("No command '" + typed + "'");
         }
 
-        // Do not build a button for a non-remote safe command in a non-local target.
-        if (!target.isLocalTab && !command.isRemoteSafe) {
-          requisition.clear();
-          return;
-        }
-
         if (command.buttonId != null) {
           button.id = command.buttonId;
           if (command.buttonClass != null) {

From 1907c2b2047fe2b62bf7cce998337b457ad31b82 Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Mon, 16 Feb 2015 14:58:22 +0000
Subject: [PATCH 21/38] Add warning message on use of deprecated functions in
 environment

---
 browser/devtools/shared/DeveloperToolbar.jsm | 10 +++++++---
 1 file changed, 7 insertions(+), 3 deletions(-)

diff --git a/browser/devtools/shared/DeveloperToolbar.jsm b/browser/devtools/shared/DeveloperToolbar.jsm
index 116b133..915e159 100644
--- a/browser/devtools/shared/DeveloperToolbar.jsm
+++ b/browser/devtools/shared/DeveloperToolbar.jsm
@@ -205,19 +205,23 @@ let CommandUtils = {
       },
 
       get chromeWindow() {
+        console.error('use of chromeWindow is deprecated from commands');
         return this.target.tab.ownerDocument.defaultView;
       },
 
       get chromeDocument() {
-        return this.chromeWindow.document;
+        console.error('use of chromeDocument is deprecated from commands');
+        return this.target.tab.ownerDocument.defaultView.document;
       },
 
       get window() {
-        return this.chromeWindow.gBrowser.selectedBrowser.contentWindow;
+        console.error('use of window is deprecated from commands');
+        return this.target.tab.ownerDocument.defaultView.gBrowser.selectedBrowser.contentWindow;
       },
 
       get document() {
-        return this.window.document;
+        console.error('use of document is deprecated from commands');
+        return this.target.tab.ownerDocument.defaultView.gBrowser.selectedBrowser.contentWindow.document;
       }
     };
   },

From 20642d6a87f8918932c2d96b153594cd75f06027 Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Mon, 16 Feb 2015 14:59:59 +0000
Subject: [PATCH 22/38] Remove lots of dead code from the init of FFDisplay

Really we should kill FFDisplay entirely, and move the mozui code into
the browser/devtools/commandline folder, but that's for another day.
---
 browser/devtools/shared/DeveloperToolbar.jsm       |  27 ++--
 .../gcli/source/lib/gcli/mozui/ffdisplay.js        | 171 +++------------------
 .../gcli/source/lib/gcli/mozui/inputter.js         |   4 +-
 .../devtools/gcli/source/lib/gcli/mozui/tooltip.js |   7 +-
 4 files changed, 39 insertions(+), 170 deletions(-)

diff --git a/browser/devtools/shared/DeveloperToolbar.jsm b/browser/devtools/shared/DeveloperToolbar.jsm
index 915e159..f38403b 100644
--- a/browser/devtools/shared/DeveloperToolbar.jsm
+++ b/browser/devtools/shared/DeveloperToolbar.jsm
@@ -403,20 +403,21 @@ DeveloperToolbar.prototype.show = function(focus) {
 
       this.target = TargetFactory.forTab(this._chromeWindow.gBrowser.selectedTab);
       return gcliInit.loadForTarget(this.target).then(system => {
+        let Requisition = require('gcli/cli').Requisition;
+        this.requisition = new Requisition(system, {
+          environment: CommandUtils.createEnvironment(this, "target"),
+          document: this.outputPanel.document,
+        });
+
         var FFDisplay = require('gcli/mozui/ffdisplay').FFDisplay;
         this.display = new FFDisplay(system, {
+          requisition: this.requisition,
           contentDocument: this._chromeWindow.gBrowser.contentDocument,
           chromeDocument: this._doc,
-          chromeWindow: this._chromeWindow,
           hintElement: this.tooltipPanel.hintElement,
           inputElement: this._input,
           completeElement: this._doc.querySelector(".gclitoolbar-complete-node"),
           backgroundElement: this._doc.querySelector(".gclitoolbar-stack-node"),
-          outputDocument: this.outputPanel.document,
-          environment: CommandUtils.createEnvironment(this, "target"),
-          tooltipClass: "gcliterm-tooltip",
-          eval: null,
-          scratchpad: null
         });
 
         this.display.focusManager.addMonitoredElement(this.outputPanel._frame);
@@ -449,7 +450,9 @@ DeveloperToolbar.prototype.show = function(focus) {
         this._notify(NOTIFICATIONS.SHOW);
 
         if (!DeveloperToolbar.introShownThisSession) {
-          this.display.maybeShowIntro();
+          let intro = require('gcli/ui/intro');
+          intro.maybeShowIntro(this.requisition.commandOutputManager,
+                               this.requisition.conversionContext);
           DeveloperToolbar.introShownThisSession = true;
         }
 
@@ -587,6 +590,7 @@ DeveloperToolbar.prototype.destroy = function() {
   this.display.onVisibilityChange.remove(this.tooltipPanel._visibilityChanged, this.tooltipPanel);
   this.display.onOutput.remove(this.outputPanel._outputChanged, this.outputPanel);
   this.display.destroy();
+  this.requisition.destroy();
   this.outputPanel.destroy();
   this.tooltipPanel.destroy();
   delete this._input;
@@ -619,11 +623,12 @@ DeveloperToolbar.prototype.handleEvent = function(ev) {
   if (ev.type == "TabSelect" || ev.type == "load") {
     if (this.visible) {
       this.target = TargetFactory.forTab(this._chromeWindow.gBrowser.selectedTab);
-
-      this.display.reattach({
-        contentDocument: this._chromeWindow.gBrowser.contentDocument
+      gcliInit.loadForTarget(this.target).then(system => {
+        this.requisition.system = system;
       });
 
+      this.display.setContentDocument(this._chromeWindow.gBrowser.contentDocument);
+
       if (ev.type == "TabSelect") {
         this._initErrorsCount(ev.target);
       }
@@ -977,7 +982,7 @@ OutputPanel.prototype._update = function() {
   }
 
   if (this.displayedOutput.data != null) {
-    let context = this._devtoolbar.display.requisition.conversionContext;
+    let context = this._devtoolbar.requisition.conversionContext;
     this.displayedOutput.convert('dom', context).then(node => {
       if (node == null) {
         return;
diff --git a/toolkit/devtools/gcli/source/lib/gcli/mozui/ffdisplay.js b/toolkit/devtools/gcli/source/lib/gcli/mozui/ffdisplay.js
index 97a87f2..d34f7dd 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/mozui/ffdisplay.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/mozui/ffdisplay.js
@@ -21,65 +21,32 @@ var Completer = require('./completer').Completer;
 var Tooltip = require('./tooltip').Tooltip;
 var FocusManager = require('../ui/focus').FocusManager;
 
-var Requisition = require('../cli').Requisition;
-
 var cli = require('../cli');
-var jstype = require('../types/javascript');
 var nodetype = require('../types/node');
 var resource = require('../types/resource');
-var intro = require('../ui/intro');
-
-var CommandOutputManager = require('../commands/commands').CommandOutputManager;
-
-/**
- * Handy utility to inject the content document (i.e. for the viewed page,
- * not for chrome) into the various components.
- */
-function setContentDocument(document) {
-  if (document) {
-    nodetype.setDocument(document);
-    resource.setDocument(document);
-  }
-  else {
-    resource.unsetDocument();
-    nodetype.unsetDocument();
-    jstype.unsetGlobalObject();
-  }
-}
 
 /**
  * FFDisplay is responsible for generating the UI for GCLI, this implementation
  * is a special case for use inside Firefox
  * @param options A configuration object containing the following:
- * - contentDocument (optional)
+ * - requisition
+ * - contentDocument
  * - chromeDocument
  * - hintElement
  * - inputElement
  * - completeElement
  * - backgroundElement
- * - outputDocument
- * - consoleWrap (optional)
- * - eval (optional)
- * - environment
- * - chromeWindow
- * - commandOutputManager (optional)
  */
 function FFDisplay(system, options) {
-  if (options.eval) {
-    cli.setEvalFunction(options.eval);
-  }
-  setContentDocument(options.contentDocument);
+  this.setContentDocument(options.contentDocument);
 
-  this.requisition = new Requisition(system, {
-    environment: options.environment,
-    document: options.outputDocument
-  });
+  this.requisition = options.requisition;
   this.onOutput = this.requisition.commandOutputManager.onOutput;
 
   this.focusManager = new FocusManager(options.chromeDocument, system.settings);
   this.onVisibilityChange = this.focusManager.onVisibilityChange;
 
-  this.inputter = new Inputter(options, {
+  this.inputter = new Inputter({
     requisition: this.requisition,
     focusManager: this.focusManager,
     element: options.inputElement
@@ -92,7 +59,7 @@ function FFDisplay(system, options) {
     element: options.completeElement
   });
 
-  this.tooltip = new Tooltip(options, {
+  this.tooltip = new Tooltip({
     requisition: this.requisition,
     focusManager: this.focusManager,
     inputter: this.inputter,
@@ -100,138 +67,40 @@ function FFDisplay(system, options) {
   });
 
   this.inputter.tooltip = this.tooltip;
-
-  if (options.consoleWrap) {
-    this.resizer = this.resizer.bind(this);
-
-    this.consoleWrap = options.consoleWrap;
-    var win = options.consoleWrap.ownerDocument.defaultView;
-    win.addEventListener('resize', this.resizer, false);
-  }
-
-  this.options = options;
 }
 
 /**
- * The main Display calls this as part of startup since it registers listeners
- * for output first. The firefox display can't do this, so it has to be a
- * separate method
- */
-FFDisplay.prototype.maybeShowIntro = function() {
-  intro.maybeShowIntro(this.requisition.commandOutputManager,
-                       this.requisition.conversionContext);
-};
-
-/**
- * Called when the page to which we're attached changes
- * @params options Object with the following properties:
- * - contentDocument: Points to the page that we should now work against
+ * Handy utility to inject the content document (i.e. for the viewed page,
+ * not for chrome) into the various components.
  */
-FFDisplay.prototype.reattach = function(options) {
-  setContentDocument(options.contentDocument);
+FFDisplay.prototype.setContentDocument = function(document) {
+  if (document) {
+    nodetype.setDocument(document);
+    resource.setDocument(document);
+  }
+  else {
+    resource.unsetDocument();
+    nodetype.unsetDocument();
+  }
 };
 
 /**
  * Avoid memory leaks
  */
 FFDisplay.prototype.destroy = function() {
-  if (this.consoleWrap) {
-    var win = this.options.consoleWrap.ownerDocument.defaultView;
-    win.removeEventListener('resize', this.resizer, false);
-  }
-
   this.tooltip.destroy();
   this.completer.destroy();
   this.inputter.destroy();
   this.focusManager.destroy();
 
-  this.requisition.destroy();
-
-  setContentDocument(null);
-  cli.unsetEvalFunction();
-
-  delete this.options;
+  this.setContentDocument(null);
 
   // We could also delete the following objects if we have hard-to-track-down
   // memory leaks, as a belt-and-braces approach, however this prevents our
   // DOM node hunter script from looking in all the nooks and crannies, so it's
   // better if we can be leak-free without deleting them:
-  // - consoleWrap, resizer, tooltip, completer, inputter,
-  // - focusManager, onVisibilityChange, requisition, commandOutputManager
-};
-
-/**
- * Called on chrome window resize, or on divider slide
- */
-FFDisplay.prototype.resizer = function() {
-  // Bug 705109: There are several numbers hard-coded in this function.
-  // This is simpler than calculating them, but error-prone when the UI setup,
-  // the styling or display settings change.
-
-  var parentRect = this.options.consoleWrap.getBoundingClientRect();
-  // Magic number: 64 is the size of the toolbar above the output area
-  var parentHeight = parentRect.bottom - parentRect.top - 64;
-
-  // Magic number: 100 is the size at which we decide the hints are too small
-  // to be useful, so we hide them
-  if (parentHeight < 100) {
-    this.options.hintElement.classList.add('gcliterm-hint-nospace');
-  }
-  else {
-    this.options.hintElement.classList.remove('gcliterm-hint-nospace');
-    this.options.hintElement.style.overflowY = null;
-    this.options.hintElement.style.borderBottomColor = 'white';
-  }
-
-  // We also try to make the max-width of any GCLI elements so they don't
-  // extend outside the scroll area.
-  var doc = this.options.hintElement.ownerDocument;
-
-  var outputNode = this.options.hintElement.parentNode.parentNode.children[1];
-  var listItems = outputNode.getElementsByClassName('hud-msg-node');
-
-  // This is an top-side estimate. We could try to calculate it, maybe using
-  // something along these lines http://www.alexandre-gomes.com/?p=115 However
-  // experience has shown this to be hard to get to work reliably
-  // Also we don't need to be precise. If we use a number that is too big then
-  // the only down-side is too great a right margin
-  var scrollbarWidth = 20;
-
-  if (listItems.length > 0) {
-    var parentWidth = outputNode.getBoundingClientRect().width - scrollbarWidth;
-    var otherWidth;
-    var body;
-
-    for (var i = 0; i < listItems.length; ++i) {
-      var listItem = listItems[i];
-      // a.k.a 'var otherWidth = 132'
-      otherWidth = 0;
-      body = null;
-
-      for (var j = 0; j < listItem.children.length; j++) {
-        var child = listItem.children[j];
-
-        if (child.classList.contains('gcliterm-msg-body')) {
-          body = child.children[0];
-        }
-        else {
-          otherWidth += child.getBoundingClientRect().width;
-        }
-
-        var styles = doc.defaultView.getComputedStyle(child, null);
-        otherWidth += parseInt(styles.borderLeftWidth, 10) +
-                      parseInt(styles.borderRightWidth, 10) +
-                      parseInt(styles.paddingLeft, 10) +
-                      parseInt(styles.paddingRight, 10) +
-                      parseInt(styles.marginLeft, 10) +
-                      parseInt(styles.marginRight, 10);
-      }
-
-      if (body) {
-        body.style.width = (parentWidth - otherWidth) + 'px';
-      }
-    }
-  }
+  // - tooltip, completer, inputter,
+  // - focusManager, onVisibilityChange, requisition
 };
 
 exports.FFDisplay = FFDisplay;
diff --git a/toolkit/devtools/gcli/source/lib/gcli/mozui/inputter.js b/toolkit/devtools/gcli/source/lib/gcli/mozui/inputter.js
index 282fc51..9cfb327 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/mozui/inputter.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/mozui/inputter.js
@@ -27,14 +27,12 @@ var RESOLVED = Promise.resolve(true);
 
 /**
  * A wrapper to take care of the functions concerning an input element
- * @param options Object containing user customization properties, including:
- * - promptWidth (default=22px)
  * @param components Object that links to other UI components. GCLI provided:
  * - requisition
  * - focusManager
  * - element
  */
-function Inputter(options, components) {
+function Inputter(components) {
   this.requisition = components.requisition;
   this.focusManager = components.focusManager;
 
diff --git a/toolkit/devtools/gcli/source/lib/gcli/mozui/tooltip.js b/toolkit/devtools/gcli/source/lib/gcli/mozui/tooltip.js
index b31f05d..dd7a105 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/mozui/tooltip.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/mozui/tooltip.js
@@ -33,9 +33,6 @@ var tooltipHtml =
 /**
  * A widget to display an inline dialog which allows the user to fill out
  * the arguments to a command.
- * @param options Object containing user customization properties, including:
- * - tooltipClass (default='gcli-tooltip'): Custom class name when generating
- *   the top level element which allows different layout systems
  * @param components Object that links to other UI components. GCLI provided:
  * - requisition: The Requisition to fill out
  * - inputter: An instance of Inputter
@@ -43,13 +40,13 @@ var tooltipHtml =
  * - panelElement (optional): The element to show/hide on visibility events
  * - element: The root element to populate
  */
-function Tooltip(options, components) {
+function Tooltip(components) {
   this.inputter = components.inputter;
   this.requisition = components.requisition;
   this.focusManager = components.focusManager;
 
   this.element = components.element;
-  this.element.classList.add(options.tooltipClass || 'gcli-tooltip');
+  this.element.classList.add('gcliterm-tooltip');
   this.document = this.element.ownerDocument;
 
   this.panelElement = components.panelElement;

From a5b09c3b32bbc6ed0c996f01686fc0ca99ef335f Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Mon, 16 Feb 2015 16:59:14 +0000
Subject: [PATCH 23/38] Make addon.js safe to load in a child process.

---
 toolkit/devtools/gcli/commands/addon.js | 30 ++++++++++++++++++++++++++++--
 1 file changed, 28 insertions(+), 2 deletions(-)

diff --git a/toolkit/devtools/gcli/commands/addon.js b/toolkit/devtools/gcli/commands/addon.js
index ac67e22..b489f03 100644
--- a/toolkit/devtools/gcli/commands/addon.js
+++ b/toolkit/devtools/gcli/commands/addon.js
@@ -4,8 +4,32 @@
 
 "use strict";
 
+/**
+ * You can't require the AddonManager in a child process, but GCLI wants to
+ * check for 'items' in all processes, so we return empty array if the
+ * AddonManager is not available
+ */
+function getAddonManager() {
+  try {
+    return {
+      AddonManager: require("resource://gre/modules/AddonManager.jsm").AddonManager,
+      addonManagerActive: true
+    };
+  }
+  catch (ex) {
+    // Fake up an AddonManager just enough to let the file load
+    return {
+      AddonManager: {
+        getAllAddons() {},
+        getAddonsByTypes() {}
+      },
+      addonManagerActive: false
+    };
+  }
+}
+
 const { Cc, Ci, Cu } = require("chrome");
-const { AddonManager } = Cu.import("resource://gre/modules/AddonManager.jsm", {});
+const { AddonManager, addonManagerActive } = getAddonManager();
 const l10n = require("gcli/l10n");
 const { Promise: promise } = require("resource://gre/modules/Promise.jsm");
 
@@ -49,7 +73,7 @@ function pendingOperations(addon) {
   }, []);
 }
 
-exports.items = [
+var items = [
   {
     item: "type",
     name: "addon",
@@ -258,3 +282,5 @@ exports.items = [
     }
   }
 ];
+
+exports.items = addonManagerActive ? items : [];

From 3f7cfecf89dafe941968235de6ddea532bbd8da3 Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Mon, 16 Feb 2015 16:59:43 +0000
Subject: [PATCH 24/38] Make cookie.js safe to load in a child process

cookie.js should not use environment.document
---
 toolkit/devtools/gcli/commands/cookie.js | 16 ++++++++++------
 1 file changed, 10 insertions(+), 6 deletions(-)

diff --git a/toolkit/devtools/gcli/commands/cookie.js b/toolkit/devtools/gcli/commands/cookie.js
index e357a35..e6238a2 100644
--- a/toolkit/devtools/gcli/commands/cookie.js
+++ b/toolkit/devtools/gcli/commands/cookie.js
@@ -4,9 +4,13 @@
 
 "use strict";
 
-const { Cc, Ci, Cu } = require("chrome");
 const l10n = require("gcli/l10n");
-const cookieMgr = Cc["@mozilla.org/cookiemanager;1"].getService(Ci.nsICookieManager2);
+const URL = require("sdk/url").URL;
+
+XPCOMUtils.defineLazyGetter(this, "cookieMgr", function() {
+  const { Cc, Ci } = require("chrome");
+  return Cc["@mozilla.org/cookiemanager;1"].getService(Ci.nsICookieManager2);
+});
 
 /**
  * The cookie 'expires' value needs converting into something more readable
@@ -41,13 +45,13 @@ exports.items = [
   },
   {
     item: "command",
-    runAt: "server",
+    runAt: "client",
     name: "cookie list",
     description: l10n.lookup("cookieListDesc"),
     manual: l10n.lookup("cookieListManual"),
     returnType: "cookies",
     exec: function(args, context) {
-      let host = context.environment.document.location.host;
+      let host = new URL(context.environment.target.url).host;
       if (host == null || host == "") {
         throw new Error(l10n.lookup("cookieListOutNonePage"));
       }
@@ -88,7 +92,7 @@ exports.items = [
       }
     ],
     exec: function(args, context) {
-      let host = context.environment.document.location.host;
+      let host = new URL(context.environment.target.url).host;
       let enm = cookieMgr.getCookiesFromHost(host);
 
       let cookies = [];
@@ -223,7 +227,7 @@ exports.items = [
       }
     ],
     exec: function(args, context) {
-      let host = context.environment.document.location.host;
+      let host = new URL(context.environment.target.url).host;
       let time = Date.parse(args.expires) / 1000;
 
       cookieMgr.add(args.domain ? "." + args.domain : host,

From e1ac183c508fd980a7c37c7823ada2eb18747892 Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Wed, 18 Feb 2015 09:36:34 +0000
Subject: [PATCH 25/38] Use fat arrow functions

---
 toolkit/devtools/server/actors/gcli.js | 14 ++++++--------
 1 file changed, 6 insertions(+), 8 deletions(-)

diff --git a/toolkit/devtools/server/actors/gcli.js b/toolkit/devtools/server/actors/gcli.js
index 7fefe1d..5859259 100644
--- a/toolkit/devtools/server/actors/gcli.js
+++ b/toolkit/devtools/server/actors/gcli.js
@@ -71,9 +71,7 @@ const GcliActor = ActorClass({
    */
   execute: method(function(typed) {
     return this._getRequisition().then(requisition => {
-      return requisition.updateExec(typed).then(function(output) {
-        return output.toJson();
-      });
+      return requisition.updateExec(typed).then(output => output.toJson());
     });
   }, {
     request: {
@@ -111,7 +109,7 @@ const GcliActor = ActorClass({
     return this._getRequisition().then(requisition => {
       return requisition.update(typed).then(() => {
         let assignment = requisition.getAssignment(param);
-        return Promise.resolve(assignment.predictions).then(function(predictions) {
+        return Promise.resolve(assignment.predictions).then(predictions => {
           return {
             status: assignment.getStatus().toString(),
             message: assignment.message,
@@ -136,7 +134,7 @@ const GcliActor = ActorClass({
     return this._getRequisition().then(requisition => {
       return requisition.update(typed).then(() => {
         let assignment = requisition.getAssignment(param);
-        return requisition.increment(assignment).then(function() {
+        return requisition.increment(assignment).then(() => {
           return assignment.arg == null ? undefined : assignment.arg.text;
         });
       });
@@ -156,7 +154,7 @@ const GcliActor = ActorClass({
     return this._getRequisition().then(requisition => {
       return requisition.update(typed).then(() => {
         let assignment = requisition.getAssignment(param);
-        return requisition.decrement(assignment).then(function() {
+        return requisition.decrement(assignment).then(() => {
           return assignment.arg == null ? undefined : assignment.arg.text;
         });
       });
@@ -177,7 +175,7 @@ const GcliActor = ActorClass({
       let type = this._getType(requisition, commandName, paramName);
 
       let context = requisition.executionContext;
-      return type.lookup(context).map(function(info) {
+      return type.lookup(context).map(info => {
         // lookup returns an array of objects with name/value properties and
         // the values might not be JSONable, so remove them
         return { name: info.name };
@@ -253,7 +251,7 @@ const GcliActor = ActorClass({
     }
 
     let type;
-    command.params.forEach(function(param) {
+    command.params.forEach(param => {
       if (param.name === paramName) {
         type = param.type;
       }

From 180aed0711f1e4d4971a283c2d07c5549899b942 Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Wed, 18 Feb 2015 09:37:40 +0000
Subject: [PATCH 26/38] The entire devtoolsModules definition was duplicated.
 De-dupe

I suspect a merge error.
---
 browser/devtools/commandline/commands-index.js | 25 -------------------------
 1 file changed, 25 deletions(-)

diff --git a/browser/devtools/commandline/commands-index.js b/browser/devtools/commandline/commands-index.js
index b85b9cf..70dfc6a 100644
--- a/browser/devtools/commandline/commands-index.js
+++ b/browser/devtools/commandline/commands-index.js
@@ -94,31 +94,6 @@ exports.devtoolsModules = [
 ];
 
 /**
- * Some commands belong to a tool (see getToolModules). This is a list of the
- * modules that are *not* owned by a tool.
- */
-exports.devtoolsModules = [
-  "devtools/tilt/tilt-commands",
-  "gcli/commands/addon",
-  "gcli/commands/appcache",
-  "gcli/commands/calllog",
-  "gcli/commands/cmd",
-  "gcli/commands/cookie",
-  "gcli/commands/csscoverage",
-  "gcli/commands/folder",
-  "gcli/commands/highlight",
-  "gcli/commands/inject",
-  "gcli/commands/jsb",
-  "gcli/commands/listen",
-  "gcli/commands/media",
-  "gcli/commands/pagemod",
-  "gcli/commands/paintflashing",
-  "gcli/commands/restart",
-  "gcli/commands/screenshot",
-  "gcli/commands/tools",
-];
-
-/**
  * Register commands from tools with 'command: [ "some/module" ]' definitions.
  * We'd like to do this:
  *

From 0d7c3562caae5b7d50ae484a45cf2652f4d03793 Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Wed, 18 Feb 2015 09:40:52 +0000
Subject: [PATCH 27/38] Merge clientModules into baseModules

Historically they were separate because we thought you might want to
register commands in different places, but now we have the 'location'
system then don't need to be separate.

Also we were previously importing everything and then commenting where
we didn't want the import. Now we're just importing what we need. There
doesn't seem much benefit in saying (badly) what we don't need. More
useful is to just say what we do.
---
 browser/devtools/commandline/commands-index.js | 22 +---------------------
 1 file changed, 1 insertion(+), 21 deletions(-)

diff --git a/browser/devtools/commandline/commands-index.js b/browser/devtools/commandline/commands-index.js
index 70dfc6a..0c8b21b 100644
--- a/browser/devtools/commandline/commands-index.js
+++ b/browser/devtools/commandline/commands-index.js
@@ -44,28 +44,10 @@ exports.baseModules = [
   "gcli/languages/command",
   "gcli/languages/javascript",
 
-  "gcli/commands/context",
-];
-
-/**
- * TODO: Are they really client only modules, we should really filter with
- * runAt=client or something
- */
-exports.clientModules = [
-  // "gcli/cli",                  // No need for "{" with web console
   "gcli/commands/clear",
-  // "gcli/commands/connect",     // We need to fix our RDP connector
-  // "gcli/commands/exec",        // No exec in Firefox yet
-  // "gcli/commands/global",
+  "gcli/commands/context",
   "gcli/commands/help",
-  // "gcli/commands/intro",       // No need for intro command
-  // "gcli/commands/lang",
-  // "gcli/commands/mocks",       // Only for testing
   "gcli/commands/pref",
-  // "gcli/commands/preflist",    // Too slow in Firefox
-  // "gcli/commands/test",        // Only for testing
-
-  // No demo or node commands
 ];
 
 /**
@@ -129,7 +111,6 @@ exports.loadForServer = function() {
     systemForServer = createSystem({ location: "server" });
 
     systemForServer.addItemsByModule(exports.baseModules, { delayedLoad: true });
-    systemForServer.addItemsByModule(exports.clientModules, { delayedLoad: true });
     systemForServer.addItemsByModule(exports.devtoolsModules, { delayedLoad: true });
     systemForServer.addItemsByModule(exports.devtoolsToolModules, { delayedLoad: true });
 
@@ -164,7 +145,6 @@ exports.loadForTarget = function(target) {
   let system = createSystem({ location: "client" });
 
   system.addItemsByModule(exports.baseModules, { delayedLoad: true });
-  system.addItemsByModule(exports.clientModules, { delayedLoad: true });
   system.addItemsByModule(exports.devtoolsModules, { delayedLoad: true });
   system.addItemsByModule(exports.devtoolsToolModules, { delayedLoad: true });
 

From 524cbabb4c54644d3430cfa86afcb07ba7d6aabd Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Wed, 18 Feb 2015 09:41:37 +0000
Subject: [PATCH 28/38] The eyedropper command needs access to chrome not
 content

---
 browser/devtools/eyedropper/commands.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/browser/devtools/eyedropper/commands.js b/browser/devtools/eyedropper/commands.js
index e2df89e..a7f71e5 100644
--- a/browser/devtools/eyedropper/commands.js
+++ b/browser/devtools/eyedropper/commands.js
@@ -13,7 +13,7 @@ let { Eyedropper, EyedropperManager } = require("devtools/eyedropper/eyedropper"
  */
 exports.items = [{
   item: "command",
-  runAt: "server",
+  runAt: "client",
   name: "eyedropper",
   description: l10n.lookup("eyedropperDesc"),
   manual: l10n.lookup("eyedropperManual"),

From d63b81fcd56e345d6b4e71fbdd204bff242c2c73 Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Wed, 18 Feb 2015 09:44:16 +0000
Subject: [PATCH 29/38] Cache the actor

'this' would be the environment and not the gcliActor, so enclose the
tabActor so be sure what we're accessing.
---
 toolkit/devtools/server/actors/gcli.js | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/toolkit/devtools/server/actors/gcli.js b/toolkit/devtools/server/actors/gcli.js
index 5859259..27c77b6 100644
--- a/toolkit/devtools/server/actors/gcli.js
+++ b/toolkit/devtools/server/actors/gcli.js
@@ -217,11 +217,12 @@ const GcliActor = ActorClass({
 
     let gcliInit = require("devtools/commandline/commands-index");
     let Requisition = require("gcli/cli").Requisition;
+    let tabActor = this._tabActor;
 
     this._requisitionPromise = gcliInit.loadForServer().then(system => {
       let environment = {
-        get window() this._tabActor.window,
-        get document() this._tabActor.window.document
+        get window() tabActor.window,
+        get document() tabActor.window.document,
       };
 
       let requisition = new Requisition(system, { environment: environment });

From f2218e042f0df669aa11a679cde2273f9f6a2efb Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Wed, 18 Feb 2015 09:45:17 +0000
Subject: [PATCH 30/38] 2 types that commands might use need informing about
 the document.

---
 toolkit/devtools/server/actors/gcli.js | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/toolkit/devtools/server/actors/gcli.js b/toolkit/devtools/server/actors/gcli.js
index 27c77b6..abbaf50 100644
--- a/toolkit/devtools/server/actors/gcli.js
+++ b/toolkit/devtools/server/actors/gcli.js
@@ -219,6 +219,11 @@ const GcliActor = ActorClass({
     let Requisition = require("gcli/cli").Requisition;
     let tabActor = this._tabActor;
 
+    let nodetype = require('gcli/types/node');
+    nodetype.setDocument(tabActor.window.document);
+    let resource = require('gcli/types/resource');
+    resource.setDocument(tabActor.window.document);
+
     this._requisitionPromise = gcliInit.loadForServer().then(system => {
       let environment = {
         get window() tabActor.window,

From e02453dec6c5b3d10821e252a3c41212278faa9e Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Wed, 18 Feb 2015 09:59:42 +0000
Subject: [PATCH 31/38] Remove commented out code (and an extra space)

---
 browser/devtools/shared/DeveloperToolbar.jsm | 5 +----
 1 file changed, 1 insertion(+), 4 deletions(-)

diff --git a/browser/devtools/shared/DeveloperToolbar.jsm b/browser/devtools/shared/DeveloperToolbar.jsm
index f38403b..1186f33 100644
--- a/browser/devtools/shared/DeveloperToolbar.jsm
+++ b/browser/devtools/shared/DeveloperToolbar.jsm
@@ -39,10 +39,7 @@ XPCOMUtils.defineLazyGetter(this, "toolboxStrings", function () {
 
 const Telemetry = require("devtools/shared/telemetry");
 
-//XPCOMUtils.defineLazyModuleGetter(this, "gcliInit",
-//                                  "devtools/commandline/commands-index");
-
-XPCOMUtils.defineLazyGetter(this, "gcliInit", function () {
+XPCOMUtils.defineLazyGetter(this, "gcliInit", function() {
   try {
     return require("devtools/commandline/commands-index");
   }

From ba3e1d9654d3273e27c52ac92728e97a4db376d7 Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Thu, 19 Feb 2015 15:10:16 +0000
Subject: [PATCH 32/38] There's no point in setting up the target in the
 constructor

We need to do it in the show() function anyway, so leave it to there.
---
 browser/devtools/shared/DeveloperToolbar.jsm | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/browser/devtools/shared/DeveloperToolbar.jsm b/browser/devtools/shared/DeveloperToolbar.jsm
index 1186f33..863fefc 100644
--- a/browser/devtools/shared/DeveloperToolbar.jsm
+++ b/browser/devtools/shared/DeveloperToolbar.jsm
@@ -252,8 +252,7 @@ this.DeveloperToolbar = function DeveloperToolbar(aChromeWindow, aToolbarElement
 {
   this._chromeWindow = aChromeWindow;
 
-  // target is dynamic because the selectedTab changes
-  this.target = TargetFactory.forTab(this._chromeWindow.gBrowser.selectedTab);
+  this.target = null; // Will be setup when show() is called
 
   this._element = aToolbarElement;
   this._element.hidden = true;

From c410a08e845f598b4ef2b6a8706d6c4333673253 Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Thu, 19 Feb 2015 15:11:19 +0000
Subject: [PATCH 33/38] Split the screenshot command to have a separate
 converter for e10s

---
 toolkit/devtools/gcli/commands/screenshot.js | 94 +++++++++++++++++++++-------
 1 file changed, 70 insertions(+), 24 deletions(-)

diff --git a/toolkit/devtools/gcli/commands/screenshot.js b/toolkit/devtools/gcli/commands/screenshot.js
index aeae3e8..227362c 100644
--- a/toolkit/devtools/gcli/commands/screenshot.js
+++ b/toolkit/devtools/gcli/commands/screenshot.js
@@ -23,12 +23,61 @@ const FILENAME_DEFAULT_VALUE = " ";
 
 exports.items = [
   {
+    /**
+     * Format an 'imageSummary' (as output by the screenshot command).
+     * An 'imageSummary' is a simple JSON object that looks like this:
+     *
+     * {
+     *   title: "...",     // Required description of the location of the image
+     *   data: "...",      // Optional Base64 encoded image data
+     *   height: 768,      // The height and width of the image data, required
+     *   width: 1024,      //     if data != null
+     *   action: "reveal", // Optional action when the thumbnail is clicked
+     *                     //     Currently "reveal" is the only option
+     *   filename: "...",  // The path for use with `action:"reveal"`
+     * }
+     */
+    item: "converter",
+    from: "imageSummary",
+    to: "dom",
+    exec: function(imageSummary, context) {
+      const div = context.document.createElementNS("http://www.w3.org/1999/xhtml", "div");
+      div.textContent = imageSummary.title;
+
+      if (imageSummary.data != null) {
+        const image = context.document.createElement("div");
+        const previewHeight = parseInt(256 * imageSummary.height / imageSummary.width);
+        const style = "" +
+            "width: 256px;" +
+            "height: " + previewHeight + "px;" +
+            "max-height: 256px;" +
+            "background-image: url('" + imageSummary.data + "');" +
+            "background-size: 256px " + previewHeight + "px;" +
+            "margin: 4px;" +
+            "display: block;";
+        image.setAttribute("style", style);
+        div.appendChild(image);
+      }
+
+      if (imageSummary.action === "reveal") {
+        div.style.cursor = "pointer";
+        div.addEventListener("click", () => {
+          const file = Cc["@mozilla.org/file/local;1"].createInstance(Ci.nsILocalFile);
+          file.initWithPath(imageSummary.filename);
+          file.reveal();
+        });
+      }
+
+      return div;
+    }
+  },
+  {
     item: "command",
     runAt: "server",
     name: "screenshot",
     description: l10n.lookup("screenshotDesc"),
     manual: l10n.lookup("screenshotManual"),
-    returnType: "dom",
+    returnType: "imageSummary",
     buttonId: "command-button-screenshot",
     buttonClass: "command-button command-button-invertable",
     tooltipText: l10n.lookup("screenshotTooltip"),
@@ -107,7 +156,6 @@ exports.items = [
         let top = 0;
         let width;
         let height;
-        let div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
         let currentX = window.scrollX;
         let currentY = window.scrollY;
 
@@ -186,12 +234,18 @@ exports.items = [
             let clipid = Ci.nsIClipboard;
             let clip = Cc["@mozilla.org/widget/clipboard;1"].getService(clipid);
             clip.setData(trans, null, clipid.kGlobalClipboard);
-            div.textContent = l10n.lookup("screenshotCopied");
+
+            return {
+              height: height,
+              width: width,
+              data: data,
+              title: l10n.lookup("screenshotCopied")
+            };
           }
           catch (ex) {
-            div.textContent = l10n.lookup("screenshotErrorCopying");
+            console.error(ex);
+            throw new Error(l10n.lookup("screenshotErrorCopying"));
           }
-          throw new Task.Result(div);
         }
 
         let file = Cc["@mozilla.org/file/local;1"].createInstance(Ci.nsILocalFile);
@@ -224,8 +278,8 @@ exports.items = [
         try {
           file.initWithPath(filename);
         } catch (ex) {
-          div.textContent = l10n.lookup("screenshotErrorSavingToFile") + " " + filename;
-          throw new Task.Result(div);
+          console.error(ex);
+          throw new Error(l10n.lookup("screenshotErrorSavingToFile") + " " + filename);
         }
 
         let ioService = Cc["@mozilla.org/network/io-service;1"]
@@ -237,26 +291,18 @@ exports.items = [
         persist.persistFlags = Persist.PERSIST_FLAGS_REPLACE_EXISTING_FILES |
                                Persist.PERSIST_FLAGS_AUTODETECT_APPLY_CONVERSION;
 
+        // TODO: UTF8? For an image?
         let source = ioService.newURI(data, "UTF8", null);
         persist.saveURI(source, null, null, 0, null, null, file, loadContext);
 
-        div.textContent = l10n.lookup("screenshotSavedToFile") + " \"" + filename +
-                          "\"";
-        div.addEventListener("click", function openFile() {
-          div.removeEventListener("click", openFile);
-          file.reveal();
-        });
-        div.style.cursor = "pointer";
-        let image = document.createElement("div");
-        let previewHeight = parseInt(256*height/width);
-        image.setAttribute("style",
-                          "width:256px; height:" + previewHeight + "px;" +
-                          "max-height: 256px;" +
-                          "background-image: url('" + data + "');" +
-                          "background-size: 256px " + previewHeight + "px;" +
-                          "margin: 4px; display: block");
-        div.appendChild(image);
-        throw new Task.Result(div);
+        return {
+          height: height,
+          width: width,
+          data: data,
+          title: l10n.lookup("screenshotSavedToFile") + " \"" + filename + "\"",
+          action: "reveal",
+          filename: filename
+        };
       });
     }
   }

From 43fc4b947e0a0edf598a1f42b875540f6e015d4b Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Thu, 19 Feb 2015 16:29:50 +0000
Subject: [PATCH 34/38] Include imgur support

We've had this attachment [1] to bug 992386, outstanding for ages. I'm
just totally breaking it, to the point where if we don't include it now
then it will rot forever, so I'm including it now.

This is a basic port of something that was close to r+, so my hunch is
that this changeset doesn't need a significant review. I'm checking this
is now so you can see the steps.

That said, there are some things that I know I've broken here, so you
might want to check ahead to the end result.

It's also possible that by the end this will probably look a lot clearer
viewed from scratch.

[1]: https://bugzilla.mozilla.org/page.cgi?id=splinter.html&bug=992386&attachment=8507127
---
 browser/app/profile/firefox.js                     |   5 +
 .../browser/devtools/gclicommands.properties       |  18 +++
 toolkit/devtools/gcli/commands/screenshot.js       | 176 ++++++++++++++-------
 3 files changed, 140 insertions(+), 59 deletions(-)

diff --git a/browser/app/profile/firefox.js b/browser/app/profile/firefox.js
index 8d01c49..534459a 100644
--- a/browser/app/profile/firefox.js
+++ b/browser/app/profile/firefox.js
@@ -1596,6 +1596,11 @@ pref("devtools.fontinspector.enabled", true);
 // version for each user.
 pref("devtools.telemetry.tools.opened.version", "{}");
 
+// Set imgur upload client ID
+pref("devtools.gcli.imgurClientID", '0df414e888d7240');
+// Imgur's upload URL
+pref("devtools.gcli.imgurUploadURL", "https://api.imgur.com/3/image");
+
 // Whether the character encoding menu is under the main Firefox button. This
 // preference is a string so that localizers can alter it.
 pref("browser.menu.showCharacterEncoding", "chrome://browser/locale/browser.properties");
diff --git a/browser/locales/en-US/chrome/browser/devtools/gclicommands.properties b/browser/locales/en-US/chrome/browser/devtools/gclicommands.properties
index c2e12f7..9591a87 100644
--- a/browser/locales/en-US/chrome/browser/devtools/gclicommands.properties
+++ b/browser/locales/en-US/chrome/browser/devtools/gclicommands.properties
@@ -132,6 +132,24 @@ screenshotCopied=Copied to clipboard.
 # LOCALIZATION NOTE (screenshotTooltip) Text displayed as tooltip for screenshot button in devtools ToolBox.
 screenshotTooltip=Take a fullpage screenshot
 
+# LOCALIZATION NOTE (screenshotImgurDesc) A very short string to describe
+# the 'imgur' parameter to the 'screenshot' command, which is displayed in
+# a dialog when the user is using this command.
+screenshotImgurDesc=Upload to imgur.com
+
+# LOCALIZATION NOTE (screenshotImgurManual) A fuller description of the
+# 'imgur' parameter to the 'screenshot' command, displayed when the user
+# asks for help on what it does.
+screenshotImgurManual=Use if you want to upload to imgur.com instead of saving to disk
+
+# LOCALIZATION NOTE (screenshotImgurError) Text displayed to user upon
+# encountering error while uploading the screenshot to imgur.com.
+screenshotImgurError=Could not reach imgur API
+
+# LOCALIZATION NOTE (screenshotImgurUploading) Text displayed to user when the
+# screenshot is successfully sent to imgur but the program is waiting on a response.
+screenshotImgurUploading=Form submitted... Awaiting response
+
 # LOCALIZATION NOTE (highlightDesc) A very short description of the
 # 'highlight' command. See highlightManual for a fuller description of what
 # it does. This string is designed to be shown in a menu alongside the
diff --git a/toolkit/devtools/gcli/commands/screenshot.js b/toolkit/devtools/gcli/commands/screenshot.js
index 227362c..f9a00d8 100644
--- a/toolkit/devtools/gcli/commands/screenshot.js
+++ b/toolkit/devtools/gcli/commands/screenshot.js
@@ -6,6 +6,7 @@
 
 const { Cc, Ci, Cu } = require("chrome");
 const l10n = require("gcli/l10n");
+const { Services } = require("resource://gre/modules/Services.jsm");
 
 loader.lazyImporter(this, "Downloads", "resource://gre/modules/Downloads.jsm");
 loader.lazyImporter(this, "LayoutHelpers", "resource://gre/modules/devtools/LayoutHelpers.jsm");
@@ -28,22 +29,33 @@ exports.items = [
      * An 'imageSummary' is a simple JSON object that looks like this:
      *
      * {
-     *   title: "...",     // Required description of the location of the image
-     *   data: "...",      // Optional Base64 encoded image data
-     *   height: 768,      // The height and width of the image data, required
-     *   width: 1024,      //     if data != null
-     *   action: "reveal", // Optional action when the thumbnail is clicked
-     *                     //     Currently "reveal" is the only option
-     *   filename: "...",  // The path for use with `action:"reveal"`
+     *   destinations: [ "..." ], // Required array of descriptions of the
+     *                            // locations of the result image (the command
+     *                            // can have multiple outputs)
+     *   data: "...",             // Optional Base64 encoded image data
+     *   width:1024, height:768,  // Dimensions of the image data, required
+     *                            // if data != null
+     *   filename: "...",         // If set, clicking the image will open the
+     *                            // folder containing the given file
+     *   href: "...",             // If set, clicking the image will open the
+     *                            // link in a new tab
      * }
      */
     item: "converter",
     from: "imageSummary",
     to: "dom",
     exec: function(imageSummary, context) {
-      const div = context.document.createElementNS("http://www.w3.org/1999/xhtml", "div");
-      div.textContent = imageSummary.title;
+      const document = context.document;
+      const root = document.createElement("div");
 
+      // Add a line to the result for each destination
+      imageSummary.destinations.forEach(destination => {
+        const title = document.createElement("div");
+        title.textContent = destination;
+        root.appendChild(title);
+      });
+
+      // Add the thumbnail image
       if (imageSummary.data != null) {
         const image = context.document.createElement("div");
         const previewHeight = parseInt(256 * imageSummary.height / imageSummary.width);
@@ -56,19 +68,22 @@ exports.items = [
             "margin: 4px;" +
             "display: block;";
         image.setAttribute("style", style);
-        div.appendChild(image);
+        root.appendChild(image);
       }
 
-      if (imageSummary.action === "reveal") {
-        div.style.cursor = "pointer";
-        div.addEventListener("click", () => {
-          const file = Cc["@mozilla.org/file/local;1"].createInstance(Ci.nsILocalFile);
-          file.initWithPath(imageSummary.filename);
-          file.reveal();
+      // Click handler
+      if (imageSummary.filename) {
+        root.style.cursor = "pointer";
+        root.addEventListener("click", () => {
+          if (imageSummary.filename) {
+            const file = Cc["@mozilla.org/file/local;1"].createInstance(Ci.nsILocalFile);
+            file.initWithPath(imageSummary.filename);
+            file.reveal();
+          }
         });
       }
 
-      return div;
+      return root;
     }
   },
   {
@@ -99,6 +114,12 @@ exports.items = [
             manual: l10n.lookup("screenshotClipboardManual")
           },
           {
+            name: "imgur",
+            type: "boolean",
+            description: gcli.lookup("screenshotImgurDesc"),
+            manual: gcli.lookup("screenshotImgurManual")
+          },
+          {
             name: "chrome",
             type: "boolean",
             description: l10n.lookupFormat("screenshotChromeDesc2", [BRAND_SHORT_NAME]),
@@ -146,10 +167,13 @@ exports.items = [
       }
 
       return this.grabScreen(document, args.filename, args.clipboard,
-                             args.fullpage, args.selector);
+                             args.fullpage, args.selector, args.imgur, context);
     },
-    grabScreen: function(document, filename, clipboard, fullpage, node) {
+    grabScreen: function(document, filename, clipboard, fullpage, node, imgur, context) {
       return Task.spawn(function*() {
+        // Check for default save to file functionality
+        const saveToFile = (!imgur && !clipboard);
+
         let window = document.defaultView;
         let canvas = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
         let left = 0;
@@ -193,10 +217,19 @@ exports.items = [
         ctx.drawWindow(window, left, top, width, height, "#fff");
         let data = canvas.toDataURL("image/png", "");
 
-        if(fullpage) {
+        // See comment above on bug 961832
+        if (fullpage) {
           window.scrollTo(currentX, currentY);
         }
 
+        const reply = {
+          destinations: [],
+          data: data,
+          height: height,
+          width: width,
+          filename: filename
+        };
+
         let loadContext = document.defaultView
                                   .QueryInterface(Ci.nsIInterfaceRequestor)
                                   .getInterface(Ci.nsIWebNavigation)
@@ -235,16 +268,11 @@ exports.items = [
             let clip = Cc["@mozilla.org/widget/clipboard;1"].getService(clipid);
             clip.setData(trans, null, clipid.kGlobalClipboard);
 
-            return {
-              height: height,
-              width: width,
-              data: data,
-              title: l10n.lookup("screenshotCopied")
-            };
+            reply.destinations.push(l10n.lookup("screenshotCopied"));
           }
           catch (ex) {
             console.error(ex);
-            throw new Error(l10n.lookup("screenshotErrorCopying"));
+            reply.destinations.push(l10n.lookup("screenshotErrorCopying"));
           }
         }
 
@@ -265,44 +293,74 @@ exports.items = [
           filename = l10n.lookupFormat("screenshotGeneratedFilename",
                                       [dateString, timeString]) + ".png";
         }
-        // Check there is a .png extension to filename
-        else if (!filename.match(/.png$/i)) {
-          filename += ".png";
-        }
-        // If the filename is relative, tack it onto the download directory
-        if (!filename.match(/[\\\/]/)) {
-          let preferredDir = yield Downloads.getPreferredDownloadsDirectory();
-          filename = OS.Path.join(preferredDir, filename);
-        }
 
-        try {
-          file.initWithPath(filename);
-        } catch (ex) {
-          console.error(ex);
-          throw new Error(l10n.lookup("screenshotErrorSavingToFile") + " " + filename);
+        // Upload to imgur if desired
+        if (imgur) {
+          try {
+            var xhr = Cc["@mozilla.org/xmlextras/xmlhttprequest;1"].createInstance(Ci.nsIXMLHttpRequest);
+            var fd = Cc["@mozilla.org/files/formdata;1"].createInstance(Ci.nsIDOMFormData);
+            fd.append("image", data.split(',')[1]);
+            fd.append("type", "base64");
+            fd.append("title", filename);
+
+            var postURL = Services.prefs.getCharPref("devtools.gcli.imgurUploadURL");
+            var clientID = 'Client-ID ' + Services.prefs.getCharPref("devtools.gcli.imgurClientID");
+            xhr.open("POST", postURL);
+            xhr.setRequestHeader('Authorization', clientID);
+            xhr.send(fd);
+            xhr.responseType = "json";
+
+            div.textContent = gcli.lookup("screenshotImgurUploading");
+
+            xhr.onreadystatechange = function() {
+              if (xhr.readyState==4 && xhr.status==200) {
+                reply.destinations.push(xhr.response.data.link);
+              }
+            }
+          }
+          catch(ex) {
+            if (ex) {
+              div.textContent = gcli.lookup("screenshotImgurError");
+            }
+          }
         }
 
-        let ioService = Cc["@mozilla.org/network/io-service;1"]
-                          .getService(Ci.nsIIOService);
+        // If not imgur and not clipboard: save to file
+        if (saveToFile) {
+          // Check there is a .png extension to filename
+          if (!filename.match(/.png$/i)) {
+            filename += ".png";
+          }
+          // If the filename is relative, tack it onto the download directory
+          if (!filename.match(/[\\\/]/)) {
+            let preferredDir = yield Downloads.getPreferredDownloadsDirectory();
+            filename = OS.Path.join(preferredDir, filename);
+          }
 
-        let Persist = Ci.nsIWebBrowserPersist;
-        let persist = Cc["@mozilla.org/embedding/browser/nsWebBrowserPersist;1"]
-                        .createInstance(Persist);
-        persist.persistFlags = Persist.PERSIST_FLAGS_REPLACE_EXISTING_FILES |
-                               Persist.PERSIST_FLAGS_AUTODETECT_APPLY_CONVERSION;
+          try {
+            file.initWithPath(filename);
+          } catch (ex) {
+            console.error(ex);
+            throw new Error(l10n.lookup("screenshotErrorSavingToFile") + " " + filename);
+          }
 
-        // TODO: UTF8? For an image?
-        let source = ioService.newURI(data, "UTF8", null);
-        persist.saveURI(source, null, null, 0, null, null, file, loadContext);
+          let ioService = Cc["@mozilla.org/network/io-service;1"]
+                            .getService(Ci.nsIIOService);
 
-        return {
-          height: height,
-          width: width,
-          data: data,
-          title: l10n.lookup("screenshotSavedToFile") + " \"" + filename + "\"",
-          action: "reveal",
-          filename: filename
-        };
+          let Persist = Ci.nsIWebBrowserPersist;
+          let persist = Cc["@mozilla.org/embedding/browser/nsWebBrowserPersist;1"]
+                          .createInstance(Persist);
+          persist.persistFlags = Persist.PERSIST_FLAGS_REPLACE_EXISTING_FILES |
+                                 Persist.PERSIST_FLAGS_AUTODETECT_APPLY_CONVERSION;
+
+          // TODO: UTF8? For an image?
+          let source = ioService.newURI(data, "UTF8", null);
+          persist.saveURI(source, null, null, 0, null, null, file, loadContext);
+
+          reply.destinations.push(l10n.lookup("screenshotSavedToFile") + " \"" + filename + "\"");
+        }
+
+        return reply;
       });
     }
   }

From 24d29d1106c4fb0e43884c5ff750a80f526f0ac0 Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Fri, 20 Feb 2015 10:19:02 +0000
Subject: [PATCH 35/38] Complete pass 1 of tidying up the screenshot command

But we're not done yet. Currently neither the clipboard option nor the
imgur option works, this could have something to do with running in a
content process, and perhaps with sandboxing even if that's not a
problem now, then it will be in the future, so maybe we need to move
that to the converter.

Also the --chrome option is probably not going to work in the content
process, so since commands can only run in a single process, I think
we're going to need some sort of a 'chromescreenshot' command, which can
probably share almost all the code with the 'screenshot' command, but
needs a different document to work from.
---
 .../browser/devtools/gclicommands.properties       |   5 +-
 toolkit/devtools/gcli/commands/screenshot.js       | 415 ++++++++++++---------
 2 files changed, 237 insertions(+), 183 deletions(-)

diff --git a/browser/locales/en-US/chrome/browser/devtools/gclicommands.properties b/browser/locales/en-US/chrome/browser/devtools/gclicommands.properties
index 9591a87..cd99fa1 100644
--- a/browser/locales/en-US/chrome/browser/devtools/gclicommands.properties
+++ b/browser/locales/en-US/chrome/browser/devtools/gclicommands.properties
@@ -147,8 +147,9 @@ screenshotImgurManual=Use if you want to upload to imgur.com instead of saving t
 screenshotImgurError=Could not reach imgur API
 
 # LOCALIZATION NOTE (screenshotImgurUploading) Text displayed to user when the
-# screenshot is successfully sent to imgur but the program is waiting on a response.
-screenshotImgurUploading=Form submitted... Awaiting response
+# screenshot is successfully sent to Imgur but the program is waiting on a response.
+# The argument (%1$S) is a new image URL at Imgur.
+screenshotImgurUploaded=Uploaded to %1$S
 
 # LOCALIZATION NOTE (highlightDesc) A very short description of the
 # 'highlight' command. See highlightManual for a fuller description of what
diff --git a/toolkit/devtools/gcli/commands/screenshot.js b/toolkit/devtools/gcli/commands/screenshot.js
index f9a00d8..1ec9fa3 100644
--- a/toolkit/devtools/gcli/commands/screenshot.js
+++ b/toolkit/devtools/gcli/commands/screenshot.js
@@ -109,15 +109,17 @@ exports.items = [
         params: [
           {
             name: "clipboard",
+            hidden: true, // Hidden because it fails with 
             type: "boolean",
             description: l10n.lookup("screenshotClipboardDesc"),
             manual: l10n.lookup("screenshotClipboardManual")
           },
           {
             name: "imgur",
+            hidden: true, // Hidden because it fails with "Could not reach imgur API"
             type: "boolean",
-            description: gcli.lookup("screenshotImgurDesc"),
-            manual: gcli.lookup("screenshotImgurManual")
+            description: l10n.lookup("screenshotImgurDesc"),
+            manual: l10n.lookup("screenshotImgurManual")
           },
           {
             name: "chrome",
@@ -155,213 +157,264 @@ exports.items = [
         // throwing for now.
         throw new Error(l10n.lookup("screenshotSelectorChromeConflict"));
       }
-      var document = args.chrome? context.environment.chromeDocument
-                                : context.environment.document;
+
       if (args.delay > 0) {
-        var deferred = context.defer();
-        document.defaultView.setTimeout(() => {
-          this.grabScreen(document, args.filename, args.clipboard,
-                          args.fullpage).then(deferred.resolve, deferred.reject);
-        }, args.delay * 1000);
-        return deferred.promise;
+        return new Promise((resolve, reject) => {
+          document.defaultView.setTimeout(() => {
+            this.execInternal(args, context).then(resolve, reject);
+          }, args.delay * 1000);
+        });
       }
+      else {
+        return this.execInternal(args, context);
+      }
+    },
 
-      return this.grabScreen(document, args.filename, args.clipboard,
-                             args.fullpage, args.selector, args.imgur, context);
+    /**
+     * This is just like exec, except the 'delay' has been handled already so
+     * this is where we do that actual work of process the screenshot
+     */
+    execInternal: function(args, context) {
+      const document = args.chrome ? context.environment.chromeDocument
+                                   : context.environment.document;
+
+      const reply = this.createScreenshotData(args, document);
+
+      const loadContext = document.defaultView
+                                .QueryInterface(Ci.nsIInterfaceRequestor)
+                                .getInterface(Ci.nsIWebNavigation)
+                                .QueryInterface(Ci.nsILoadContext);
+
+      return Promise.all([
+        this.maybeSaveToClipboard(args, loadContext, reply),
+        this.maybeUploadToImgur(args, reply),
+        Task.spawn(() => this.maybeSaveToFile(args, loadContext, reply)),
+      ]).then(() => reply);
     },
-    grabScreen: function(document, filename, clipboard, fullpage, node, imgur, context) {
-      return Task.spawn(function*() {
-        // Check for default save to file functionality
-        const saveToFile = (!imgur && !clipboard);
-
-        let window = document.defaultView;
-        let canvas = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
-        let left = 0;
-        let top = 0;
-        let width;
-        let height;
-        let currentX = window.scrollX;
-        let currentY = window.scrollY;
-
-        if (fullpage) {
-          // Bug 961832: GCLI screenshot shows fixed position element in wrong
-          // position if we don't scroll to top
-          window.scrollTo(0,0);
-          width = window.innerWidth + window.scrollMaxX;
-          height = window.innerHeight + window.scrollMaxY;
-        } else if (node) {
-          let lh = new LayoutHelpers(window);
-          let rect = lh.getRect(node, window);
-          top = rect.top;
-          left = rect.left;
-          width = rect.width;
-          height = rect.height;
-        } else {
-          left = window.scrollX;
-          top = window.scrollY;
-          width = window.innerWidth;
-          height = window.innerHeight;
-        }
 
-        let winUtils = window.QueryInterface(Ci.nsIInterfaceRequestor)
-                             .getInterface(Ci.nsIDOMWindowUtils);
-        let scrollbarHeight = {};
-        let scrollbarWidth = {};
-        winUtils.getScrollbarSize(false, scrollbarWidth, scrollbarHeight);
-        width -= scrollbarWidth.value;
-        height -= scrollbarHeight.value;
-
-        canvas.width = width;
-        canvas.height = height;
-        let ctx = canvas.getContext("2d");
-        ctx.drawWindow(window, left, top, width, height, "#fff");
-        let data = canvas.toDataURL("image/png", "");
-
-        // See comment above on bug 961832
-        if (fullpage) {
-          window.scrollTo(currentX, currentY);
+    /**
+     * This does the dirty work of creating a base64 string out of an
+     * area of the browser window
+     */
+    createScreenshotData: function(args, document) {
+      const window = document.defaultView;
+      let left = 0;
+      let top = 0;
+      let width;
+      let height;
+      const currentX = window.scrollX;
+      const currentY = window.scrollY;
+
+      if (args.fullpage) {
+        // Bug 961832: GCLI screenshot shows fixed position element in wrong
+        // position if we don't scroll to top
+        window.scrollTo(0,0);
+        width = window.innerWidth + window.scrollMaxX;
+        height = window.innerHeight + window.scrollMaxY;
+      }
+      else if (args.selector) {
+        const lh = new LayoutHelpers(window);
+        ({ top, left, width, height }) = lh.getRect(args.selector, window);
+      }
+      else {
+        left = window.scrollX;
+        top = window.scrollY;
+        width = window.innerWidth;
+        height = window.innerHeight;
+      }
+
+      const winUtils = window.QueryInterface(Ci.nsIInterfaceRequestor)
+                           .getInterface(Ci.nsIDOMWindowUtils);
+      const scrollbarHeight = {};
+      const scrollbarWidth = {};
+      winUtils.getScrollbarSize(false, scrollbarWidth, scrollbarHeight);
+      width -= scrollbarWidth.value;
+      height -= scrollbarHeight.value;
+
+      const canvas = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
+      canvas.width = width;
+      canvas.height = height;
+      const ctx = canvas.getContext("2d");
+      ctx.drawWindow(window, left, top, width, height, "#fff");
+      const data = canvas.toDataURL("image/png", "");
+
+      // See comment above on bug 961832
+      if (args.fullpage) {
+        window.scrollTo(currentX, currentY);
+      }
+
+      return {
+        destinations: [],
+        data: data,
+        height: height,
+        width: width,
+        filename: this.getFilename(args),
+      };
+    },
+
+    /**
+     * We may have a filename specified in args, or we might have to generate
+     * one.
+     */
+    getFilename: function(args) {
+      // Create a name for the file if not present
+      if (args.filename != FILENAME_DEFAULT_VALUE) {
+        return args.filename;
+      }
+
+      const date = new Date();
+      let dateString = date.getFullYear() + "-" + (date.getMonth() + 1) +
+                      "-" + date.getDate();
+      dateString = dateString.split("-").map(function(part) {
+        if (part.length == 1) {
+          part = "0" + part;
         }
+        return part;
+      }).join("-");
 
-        const reply = {
-          destinations: [],
-          data: data,
-          height: height,
-          width: width,
-          filename: filename
-        };
-
-        let loadContext = document.defaultView
-                                  .QueryInterface(Ci.nsIInterfaceRequestor)
-                                  .getInterface(Ci.nsIWebNavigation)
-                                  .QueryInterface(Ci.nsILoadContext);
-
-        if (clipboard) {
-          try {
-            let io = Cc["@mozilla.org/network/io-service;1"]
+      const timeString = date.toTimeString().replace(/:/g, ".").split(" ")[0];
+      return l10n.lookupFormat("screenshotGeneratedFilename",
+                               [ dateString, timeString ]) + ".png";
+    },
+
+    /**
+     * Save the image data to the clipboard. This returns a promise, so it can
+     * be treated exactly like imgur / file processing, but it's really sync
+     * for now.
+     */
+    maybeSaveToClipboard: function(args, loadContext, reply) {
+      if (!args.clipboard) {
+        return Promise.resolve();
+      }
+
+      try {
+        const io = Cc["@mozilla.org/network/io-service;1"]
                       .getService(Ci.nsIIOService);
-            let channel = io.newChannel2(data,
-                                         null,
-                                         null,
-                                         null,      // aLoadingNode
-                                         Services.scriptSecurityManager.getSystemPrincipal(),
-                                         null,      // aTriggeringPrincipal
-                                         Ci.nsILoadInfo.SEC_NORMAL,
-                                         Ci.nsIContentPolicy.TYPE_IMAGE);
-            let input = channel.open();
-            let imgTools = Cc["@mozilla.org/image/tools;1"]
+        const channel = io.newChannel2(reply.data, null, null,
+                                       null,      // aLoadingNode
+                                       Services.scriptSecurityManager.getSystemPrincipal(),
+                                       null,      // aTriggeringPrincipal
+                                       Ci.nsILoadInfo.SEC_NORMAL,
+                                       Ci.nsIContentPolicy.TYPE_IMAGE);
+        const input = channel.open();
+        const imgTools = Cc["@mozilla.org/image/tools;1"]
                             .getService(Ci.imgITools);
 
-            let container = {};
-            imgTools.decodeImageData(input, channel.contentType, container);
+        const container = {};
+        imgTools.decodeImageData(input, channel.contentType, container);
 
-            let wrapped = Cc["@mozilla.org/supports-interface-pointer;1"]
-                            .createInstance(Ci.nsISupportsInterfacePointer);
-            wrapped.data = container.value;
+        const wrapped = Cc["@mozilla.org/supports-interface-pointer;1"]
+                          .createInstance(Ci.nsISupportsInterfacePointer);
+        wrapped.data = container.value;
 
-            let trans = Cc["@mozilla.org/widget/transferable;1"]
-                          .createInstance(Ci.nsITransferable);
-            trans.init(loadContext);
-            trans.addDataFlavor(channel.contentType);
-            trans.setTransferData(channel.contentType, wrapped, -1);
+        const trans = Cc["@mozilla.org/widget/transferable;1"]
+                        .createInstance(Ci.nsITransferable);
+        trans.init(loadContext);
+        trans.addDataFlavor(channel.contentType);
+        trans.setTransferData(channel.contentType, wrapped, -1);
 
-            let clipid = Ci.nsIClipboard;
-            let clip = Cc["@mozilla.org/widget/clipboard;1"].getService(clipid);
-            clip.setData(trans, null, clipid.kGlobalClipboard);
+        const clip = Cc["@mozilla.org/widget/clipboard;1"]
+                        .getService(Ci.nsIClipboard);
+        clip.setData(trans, null, Ci.nsIClipboard.kGlobalClipboard);
 
-            reply.destinations.push(l10n.lookup("screenshotCopied"));
-          }
-          catch (ex) {
-            console.error(ex);
-            reply.destinations.push(l10n.lookup("screenshotErrorCopying"));
-          }
-        }
+        reply.destinations.push(l10n.lookup("screenshotCopied"));
+      }
+      catch (ex) {
+        console.error(ex);
+        reply.destinations.push(l10n.lookup("screenshotErrorCopying"));
+      }
 
-        let file = Cc["@mozilla.org/file/local;1"].createInstance(Ci.nsILocalFile);
+      return Promise.resolve();
+    },
 
-        // Create a name for the file if not present
-        if (filename == FILENAME_DEFAULT_VALUE) {
-          let date = new Date();
-          let dateString = date.getFullYear() + "-" + (date.getMonth() + 1) +
-                          "-" + date.getDate();
-          dateString = dateString.split("-").map(function(part) {
-            if (part.length == 1) {
-              part = "0" + part;
-            }
-            return part;
-          }).join("-");
-          let timeString = date.toTimeString().replace(/:/g, ".").split(" ")[0];
-          filename = l10n.lookupFormat("screenshotGeneratedFilename",
-                                      [dateString, timeString]) + ".png";
-        }
+    /**
+     * Upload screenshot data to Imgur if requested, returning a promise of a
+     * URL (as a string)
+     */
+    maybeUploadToImgur: function(args, reply) {
+      if (!args.imgur) {
+        return Promise.resolve();
+      }
 
-        // Upload to imgur if desired
-        if (imgur) {
-          try {
-            var xhr = Cc["@mozilla.org/xmlextras/xmlhttprequest;1"].createInstance(Ci.nsIXMLHttpRequest);
-            var fd = Cc["@mozilla.org/files/formdata;1"].createInstance(Ci.nsIDOMFormData);
-            fd.append("image", data.split(',')[1]);
-            fd.append("type", "base64");
-            fd.append("title", filename);
-
-            var postURL = Services.prefs.getCharPref("devtools.gcli.imgurUploadURL");
-            var clientID = 'Client-ID ' + Services.prefs.getCharPref("devtools.gcli.imgurClientID");
-            xhr.open("POST", postURL);
-            xhr.setRequestHeader('Authorization', clientID);
-            xhr.send(fd);
-            xhr.responseType = "json";
-
-            div.textContent = gcli.lookup("screenshotImgurUploading");
-
-            xhr.onreadystatechange = function() {
-              if (xhr.readyState==4 && xhr.status==200) {
-                reply.destinations.push(xhr.response.data.link);
-              }
+      return new Promise((resolve, reject) => {
+        const xhr = Cc["@mozilla.org/xmlextras/xmlhttprequest;1"]
+                      .createInstance(Ci.nsIXMLHttpRequest);
+        const fd = Cc["@mozilla.org/files/formdata;1"]
+                      .createInstance(Ci.nsIDOMFormData);
+        fd.append("image", reply.data.split(",")[1]);
+        fd.append("type", "base64");
+        fd.append("title", reply.filename);
+
+        const postURL = Services.prefs.getCharPref("devtools.gcli.imgurUploadURL");
+        const clientID = "Client-ID " + Services.prefs.getCharPref("devtools.gcli.imgurClientID");
+
+        xhr.open("POST", postURL);
+        xhr.setRequestHeader("Authorization", clientID);
+        xhr.send(fd);
+        xhr.responseType = "json";
+
+        xhr.onreadystatechange = function() {
+          if (xhr.readyState == 4) {
+            if (xhr.status == 200) {
+              reply.href = xhr.response.data.link;
+              reply.destinations.push(l10n.lookupFormat("screenshotImgurError",
+                                                        [ reply.href ]));
             }
-          }
-          catch(ex) {
-            if (ex) {
-              div.textContent = gcli.lookup("screenshotImgurError");
+            else {
+              reply.destinations.push(l10n.lookup("screenshotImgurError"));
             }
+
+            resolve();
           }
         }
+      });
+    },
 
-        // If not imgur and not clipboard: save to file
-        if (saveToFile) {
-          // Check there is a .png extension to filename
-          if (!filename.match(/.png$/i)) {
-            filename += ".png";
-          }
-          // If the filename is relative, tack it onto the download directory
-          if (!filename.match(/[\\\/]/)) {
-            let preferredDir = yield Downloads.getPreferredDownloadsDirectory();
-            filename = OS.Path.join(preferredDir, filename);
-          }
+    /**
+     * Save the screenshot data to disk if needed, returning a promise which
+     * is resolved on completion
+     */
+    maybeSaveToFile: function*(args, loadContext, reply) {
+      if (args.filename == FILENAME_DEFAULT_VALUE &&
+          (args.imgur || args.clipboard)) {
+        return Promise.resolve();
+      }
 
-          try {
-            file.initWithPath(filename);
-          } catch (ex) {
-            console.error(ex);
-            throw new Error(l10n.lookup("screenshotErrorSavingToFile") + " " + filename);
-          }
+      try {
+        let filename = reply.filename;
+        // Check there is a .png extension to filename
+        if (!filename.match(/.png$/i)) {
+          filename += ".png";
+        }
 
-          let ioService = Cc["@mozilla.org/network/io-service;1"]
-                            .getService(Ci.nsIIOService);
+        // If the filename is relative, tack it onto the download directory
+        if (!filename.match(/[\\\/]/)) {
+          const preferredDir = yield Downloads.getPreferredDownloadsDirectory();
+          filename = OS.Path.join(preferredDir, filename);
+        }
 
-          let Persist = Ci.nsIWebBrowserPersist;
-          let persist = Cc["@mozilla.org/embedding/browser/nsWebBrowserPersist;1"]
-                          .createInstance(Persist);
-          persist.persistFlags = Persist.PERSIST_FLAGS_REPLACE_EXISTING_FILES |
-                                 Persist.PERSIST_FLAGS_AUTODETECT_APPLY_CONVERSION;
+        const file = Cc["@mozilla.org/file/local;1"].createInstance(Ci.nsILocalFile);
+        file.initWithPath(filename);
 
-          // TODO: UTF8? For an image?
-          let source = ioService.newURI(data, "UTF8", null);
-          persist.saveURI(source, null, null, 0, null, null, file, loadContext);
+        const ioService = Cc["@mozilla.org/network/io-service;1"]
+                          .getService(Ci.nsIIOService);
 
-          reply.destinations.push(l10n.lookup("screenshotSavedToFile") + " \"" + filename + "\"");
-        }
+        const Persist = Ci.nsIWebBrowserPersist;
+        const persist = Cc["@mozilla.org/embedding/browser/nsWebBrowserPersist;1"]
+                        .createInstance(Persist);
+        persist.persistFlags = Persist.PERSIST_FLAGS_REPLACE_EXISTING_FILES |
+                               Persist.PERSIST_FLAGS_AUTODETECT_APPLY_CONVERSION;
 
-        return reply;
-      });
+        // TODO: UTF8? For an image?
+        const source = ioService.newURI(reply.data, "UTF8", null);
+        persist.saveURI(source, null, null, 0, null, null, file, loadContext);
+
+        reply.destinations.push(l10n.lookup("screenshotSavedToFile") + " \"" + filename + "\"");
+      }
+      catch (ex) {
+        console.error(ex);
+        reply.destinations.push(l10n.lookup("screenshotErrorSavingToFile") + " " + filename);
+      }
     }
   }
 ];

From 14b4567aa6419d1ddce08675a7936bb9cc2b4243 Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Fri, 6 Mar 2015 13:17:55 +0000
Subject: [PATCH 36/38] Remove hard-coded module list from commands-index

Expected review fix:
https://github.com/joewalker/gecko-dev/commit/a7a75328845edb28aa6426cb6dd6be71870e244e

This splits main.js so the definitions are in definitions.js.

We can't load gDevTools in a child process so the command modules that
load it need to lazyLoad it instead, which is fine because they never
actually need it in the child process.

I've not yet worked out why we need to require(Services) in
console-output. We require it in enough other places that I don't see
the problem with requiring it, but I still don't get it.

It's used here:
https://dxr.mozilla.org/mozilla-central/source/browser/devtools/webconsole/console-output.js#30
And should be defined here:
https://dxr.mozilla.org/mozilla-central/source/toolkit/devtools/Loader.jsm?from=Loader.jsm#31
---
 browser/devtools/commandline/commands-index.js  |  22 +-
 browser/devtools/definitions.js                 | 471 +++++++++++++++++++++++
 browser/devtools/main.js                        | 491 +-----------------------
 browser/devtools/moz.build                      |   1 +
 browser/devtools/webconsole/console-commands.js |   2 +-
 browser/devtools/webconsole/console-output.js   |   2 +
 toolkit/devtools/Loader.jsm                     |   3 +
 toolkit/devtools/gcli/commands/csscoverage.js   |   3 +-
 8 files changed, 498 insertions(+), 497 deletions(-)
 create mode 100644 browser/devtools/definitions.js

diff --git a/browser/devtools/commandline/commands-index.js b/browser/devtools/commandline/commands-index.js
index 0c8b21b..c25d11c 100644
--- a/browser/devtools/commandline/commands-index.js
+++ b/browser/devtools/commandline/commands-index.js
@@ -77,25 +77,11 @@ exports.devtoolsModules = [
 
 /**
  * Register commands from tools with 'command: [ "some/module" ]' definitions.
- * We'd like to do this:
- *
- *     const defaultTools = require("main").defaultTools;
- *     return defaultTools.map(definition => definition.commands || [])
- *                        .reduce((prev, curr) => prev.concat(curr), []);
- *
- * Except that requiring 'main' from the server causes it to attempt to
- * re-register a bunch of already registered things.
- * TODO: Find a way to require("main") without require("main")
+ * The map/reduce incantation squashes the array of arrays to a single array.
  */
-exports.devtoolsToolModules = [
-  "devtools/webconsole/console-commands",
-  "devtools/resize-commands",
-  "devtools/inspector/inspector-commands",
-  "devtools/eyedropper/commands",
-  "devtools/debugger/debugger-commands",
-  "devtools/styleeditor/styleeditor-commands",
-  "devtools/scratchpad/scratchpad-commands",
-];
+const defaultTools = require("definitions").defaultTools;
+exports.devtoolsToolModules = defaultTools.map(def => def.commands || [])
+                                 .reduce((prev, curr) => prev.concat(curr), []);
 
 /**
  * Cache of the system we created
diff --git a/browser/devtools/definitions.js b/browser/devtools/definitions.js
new file mode 100644
index 0000000..499444f
--- /dev/null
+++ b/browser/devtools/definitions.js
@@ -0,0 +1,471 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const {Cc, Ci, Cu} = require("chrome");
+
+const { Services } = require("resource://gre/modules/Services.jsm");
+
+loader.lazyGetter(this, "osString", () => Cc["@mozilla.org/xre/app-info;1"].getService(Ci.nsIXULRuntime).OS);
+
+// Panels
+loader.lazyGetter(this, "OptionsPanel", () => require("devtools/framework/toolbox-options").OptionsPanel);
+loader.lazyGetter(this, "InspectorPanel", () => require("devtools/inspector/inspector-panel").InspectorPanel);
+loader.lazyGetter(this, "WebConsolePanel", () => require("devtools/webconsole/panel").WebConsolePanel);
+loader.lazyGetter(this, "DebuggerPanel", () => require("devtools/debugger/panel").DebuggerPanel);
+loader.lazyGetter(this, "StyleEditorPanel", () => require("devtools/styleeditor/styleeditor-panel").StyleEditorPanel);
+loader.lazyGetter(this, "ShaderEditorPanel", () => require("devtools/shadereditor/panel").ShaderEditorPanel);
+loader.lazyGetter(this, "CanvasDebuggerPanel", () => require("devtools/canvasdebugger/panel").CanvasDebuggerPanel);
+loader.lazyGetter(this, "WebAudioEditorPanel", () => require("devtools/webaudioeditor/panel").WebAudioEditorPanel);
+loader.lazyGetter(this, "ProfilerPanel", () => require("devtools/profiler/panel").ProfilerPanel);
+loader.lazyGetter(this, "PerformancePanel", () => require("devtools/performance/panel").PerformancePanel);
+loader.lazyGetter(this, "TimelinePanel", () => require("devtools/timeline/panel").TimelinePanel);
+loader.lazyGetter(this, "NetMonitorPanel", () => require("devtools/netmonitor/panel").NetMonitorPanel);
+loader.lazyGetter(this, "StoragePanel", () => require("devtools/storage/panel").StoragePanel);
+loader.lazyGetter(this, "ScratchpadPanel", () => require("devtools/scratchpad/scratchpad-panel").ScratchpadPanel);
+
+// Strings
+const toolboxProps = "chrome://browser/locale/devtools/toolbox.properties";
+const inspectorProps = "chrome://browser/locale/devtools/inspector.properties";
+const webConsoleProps = "chrome://browser/locale/devtools/webconsole.properties";
+const debuggerProps = "chrome://browser/locale/devtools/debugger.properties";
+const styleEditorProps = "chrome://browser/locale/devtools/styleeditor.properties";
+const shaderEditorProps = "chrome://browser/locale/devtools/shadereditor.properties";
+const canvasDebuggerProps = "chrome://browser/locale/devtools/canvasdebugger.properties";
+const webAudioEditorProps = "chrome://browser/locale/devtools/webaudioeditor.properties";
+const profilerProps = "chrome://browser/locale/devtools/profiler.properties";
+const timelineProps = "chrome://browser/locale/devtools/timeline.properties";
+const netMonitorProps = "chrome://browser/locale/devtools/netmonitor.properties";
+const storageProps = "chrome://browser/locale/devtools/storage.properties";
+const scratchpadProps = "chrome://browser/locale/devtools/scratchpad.properties";
+
+loader.lazyGetter(this, "toolboxStrings", () => Services.strings.createBundle(toolboxProps));
+loader.lazyGetter(this, "profilerStrings",() => Services.strings.createBundle(profilerProps));
+loader.lazyGetter(this, "webConsoleStrings", () => Services.strings.createBundle(webConsoleProps));
+loader.lazyGetter(this, "debuggerStrings", () => Services.strings.createBundle(debuggerProps));
+loader.lazyGetter(this, "styleEditorStrings", () => Services.strings.createBundle(styleEditorProps));
+loader.lazyGetter(this, "shaderEditorStrings", () => Services.strings.createBundle(shaderEditorProps));
+loader.lazyGetter(this, "canvasDebuggerStrings", () => Services.strings.createBundle(canvasDebuggerProps));
+loader.lazyGetter(this, "webAudioEditorStrings", () => Services.strings.createBundle(webAudioEditorProps));
+loader.lazyGetter(this, "inspectorStrings", () => Services.strings.createBundle(inspectorProps));
+loader.lazyGetter(this, "timelineStrings", () => Services.strings.createBundle(timelineProps));
+loader.lazyGetter(this, "netMonitorStrings", () => Services.strings.createBundle(netMonitorProps));
+loader.lazyGetter(this, "storageStrings", () => Services.strings.createBundle(storageProps));
+loader.lazyGetter(this, "scratchpadStrings", () => Services.strings.createBundle(scratchpadProps));
+
+let Tools = {};
+exports.Tools = Tools;
+
+// Definitions
+Tools.options = {
+  id: "options",
+  ordinal: 0,
+  url: "chrome://browser/content/devtools/framework/toolbox-options.xul",
+  icon: "chrome://browser/skin/devtools/tool-options.svg",
+  invertIconForLightTheme: true,
+  bgTheme: "theme-body",
+  label: l10n("options.label", toolboxStrings),
+  iconOnly: true,
+  panelLabel: l10n("options.panelLabel", toolboxStrings),
+  tooltip: l10n("optionsButton.tooltip", toolboxStrings),
+  inMenu: false,
+
+  isTargetSupported: function(target) {
+    return true;
+  },
+
+  build: function(iframeWindow, toolbox) {
+    return new OptionsPanel(iframeWindow, toolbox);
+  }
+}
+
+Tools.inspector = {
+  id: "inspector",
+  accesskey: l10n("inspector.accesskey", inspectorStrings),
+  key: l10n("inspector.commandkey", inspectorStrings),
+  ordinal: 1,
+  modifiers: osString == "Darwin" ? "accel,alt" : "accel,shift",
+  icon: "chrome://browser/skin/devtools/tool-inspector.svg",
+  invertIconForLightTheme: true,
+  url: "chrome://browser/content/devtools/inspector/inspector.xul",
+  label: l10n("inspector.label", inspectorStrings),
+  panelLabel: l10n("inspector.panelLabel", inspectorStrings),
+  tooltip: l10n("inspector.tooltip", inspectorStrings),
+  inMenu: true,
+  commands: [
+    "devtools/resize-commands",
+    "devtools/inspector/inspector-commands",
+    "devtools/eyedropper/commands.js"
+  ],
+
+  preventClosingOnKey: true,
+  onkey: function(panel) {
+    panel.toolbox.highlighterUtils.togglePicker();
+  },
+
+  isTargetSupported: function(target) {
+    return target.hasActor("inspector");
+  },
+
+  build: function(iframeWindow, toolbox) {
+    return new InspectorPanel(iframeWindow, toolbox);
+  }
+};
+
+Tools.webConsole = {
+  id: "webconsole",
+  key: l10n("cmd.commandkey", webConsoleStrings),
+  accesskey: l10n("webConsoleCmd.accesskey", webConsoleStrings),
+  modifiers: Services.appinfo.OS == "Darwin" ? "accel,alt" : "accel,shift",
+  ordinal: 2,
+  icon: "chrome://browser/skin/devtools/tool-webconsole.svg",
+  invertIconForLightTheme: true,
+  url: "chrome://browser/content/devtools/webconsole.xul",
+  label: l10n("ToolboxTabWebconsole.label", webConsoleStrings),
+  menuLabel: l10n("MenuWebconsole.label", webConsoleStrings),
+  panelLabel: l10n("ToolboxWebConsole.panelLabel", webConsoleStrings),
+  tooltip: l10n("ToolboxWebconsole.tooltip", webConsoleStrings),
+  inMenu: true,
+  commands: "devtools/webconsole/console-commands",
+
+  preventClosingOnKey: true,
+  onkey: function(panel, toolbox) {
+    if (toolbox.splitConsole)
+      return toolbox.focusConsoleInput();
+
+    panel.focusInput();
+  },
+
+  isTargetSupported: function(target) {
+    return true;
+  },
+
+  build: function(iframeWindow, toolbox) {
+    return new WebConsolePanel(iframeWindow, toolbox);
+  }
+};
+
+Tools.jsdebugger = {
+  id: "jsdebugger",
+  key: l10n("debuggerMenu.commandkey", debuggerStrings),
+  accesskey: l10n("debuggerMenu.accesskey", debuggerStrings),
+  modifiers: osString == "Darwin" ? "accel,alt" : "accel,shift",
+  ordinal: 3,
+  icon: "chrome://browser/skin/devtools/tool-debugger.svg",
+  invertIconForLightTheme: true,
+  highlightedicon: "chrome://browser/skin/devtools/tool-debugger-paused.svg",
+  url: "chrome://browser/content/devtools/debugger.xul",
+  label: l10n("ToolboxDebugger.label", debuggerStrings),
+  panelLabel: l10n("ToolboxDebugger.panelLabel", debuggerStrings),
+  tooltip: l10n("ToolboxDebugger.tooltip", debuggerStrings),
+  inMenu: true,
+  commands: "devtools/debugger/debugger-commands",
+
+  isTargetSupported: function(target) {
+    return true;
+  },
+
+  build: function(iframeWindow, toolbox) {
+    return new DebuggerPanel(iframeWindow, toolbox);
+  }
+};
+
+Tools.styleEditor = {
+  id: "styleeditor",
+  key: l10n("open.commandkey", styleEditorStrings),
+  ordinal: 4,
+  accesskey: l10n("open.accesskey", styleEditorStrings),
+  modifiers: "shift",
+  icon: "chrome://browser/skin/devtools/tool-styleeditor.svg",
+  invertIconForLightTheme: true,
+  url: "chrome://browser/content/devtools/styleeditor.xul",
+  label: l10n("ToolboxStyleEditor.label", styleEditorStrings),
+  panelLabel: l10n("ToolboxStyleEditor.panelLabel", styleEditorStrings),
+  tooltip: l10n("ToolboxStyleEditor.tooltip2", styleEditorStrings),
+  inMenu: true,
+  commands: "devtools/styleeditor/styleeditor-commands",
+
+  isTargetSupported: function(target) {
+    return target.hasActor("styleEditor") || target.hasActor("styleSheets");
+  },
+
+  build: function(iframeWindow, toolbox) {
+    return new StyleEditorPanel(iframeWindow, toolbox);
+  }
+};
+
+Tools.shaderEditor = {
+  id: "shadereditor",
+  ordinal: 5,
+  visibilityswitch: "devtools.shadereditor.enabled",
+  icon: "chrome://browser/skin/devtools/tool-styleeditor.svg",
+  invertIconForLightTheme: true,
+  url: "chrome://browser/content/devtools/shadereditor.xul",
+  label: l10n("ToolboxShaderEditor.label", shaderEditorStrings),
+  panelLabel: l10n("ToolboxShaderEditor.panelLabel", shaderEditorStrings),
+  tooltip: l10n("ToolboxShaderEditor.tooltip", shaderEditorStrings),
+
+  isTargetSupported: function(target) {
+    return target.hasActor("webgl");
+  },
+
+  build: function(iframeWindow, toolbox) {
+    return new ShaderEditorPanel(iframeWindow, toolbox);
+  }
+};
+
+Tools.canvasDebugger = {
+  id: "canvasdebugger",
+  ordinal: 6,
+  visibilityswitch: "devtools.canvasdebugger.enabled",
+  icon: "chrome://browser/skin/devtools/tool-styleeditor.svg",
+  invertIconForLightTheme: true,
+  url: "chrome://browser/content/devtools/canvasdebugger.xul",
+  label: l10n("ToolboxCanvasDebugger.label", canvasDebuggerStrings),
+  panelLabel: l10n("ToolboxCanvasDebugger.panelLabel", canvasDebuggerStrings),
+  tooltip: l10n("ToolboxCanvasDebugger.tooltip", canvasDebuggerStrings),
+
+  // Hide the Canvas Debugger in the Add-on Debugger and Browser Toolbox
+  // (bug 1047520).
+  isTargetSupported: function(target) {
+    return target.hasActor("canvas") && !target.chrome;
+  },
+
+  build: function (iframeWindow, toolbox) {
+    return new CanvasDebuggerPanel(iframeWindow, toolbox);
+  }
+};
+
+Tools.jsprofiler = {
+  id: "jsprofiler",
+  accesskey: l10n("profiler.accesskey", profilerStrings),
+  key: l10n("profiler.commandkey2", profilerStrings),
+  ordinal: 7,
+  modifiers: "shift",
+  visibilityswitch: "devtools.profiler.enabled",
+  icon: "chrome://browser/skin/devtools/tool-profiler.svg",
+  invertIconForLightTheme: true,
+  url: "chrome://browser/content/devtools/profiler.xul",
+  label: l10n("profiler.label2", profilerStrings),
+  panelLabel: l10n("profiler.panelLabel2", profilerStrings),
+  tooltip: l10n("profiler.tooltip2", profilerStrings),
+  inMenu: true,
+
+  isTargetSupported: function (target) {
+    // Hide the profiler when debugging devices pre bug 1046394,
+    // that don't expose profiler actor in content processes.
+    return target.hasActor("profiler");
+  },
+
+  build: function (frame, target) {
+    return new ProfilerPanel(frame, target);
+  }
+};
+
+Tools.performance = {
+  id: "performance",
+  ordinal: 19,
+  icon: "chrome://browser/skin/devtools/tool-profiler.svg",
+  invertIconForLightTheme: true,
+  url: "chrome://browser/content/devtools/performance.xul",
+  // TODO bug 1082695 audit the Performance tools labels
+  label: "Performance++", //l10n("profiler.label2", profilerStrings),
+  panelLabel: "Performance++", //l10n("profiler.panelLabel2", profilerStrings),
+  tooltip: l10n("profiler.tooltip2", profilerStrings),
+  accesskey: l10n("profiler.accesskey", profilerStrings),
+  key: l10n("profiler.commandkey2", profilerStrings),
+  modifiers: "shift",
+  inMenu: true,
+
+  isTargetSupported: function (target) {
+    return target.hasActor("profiler");
+  },
+
+  build: function (frame, target) {
+    return new PerformancePanel(frame, target);
+  }
+};
+
+Tools.timeline = {
+  id: "timeline",
+  ordinal: 8,
+  visibilityswitch: "devtools.timeline.enabled",
+  icon: "chrome://browser/skin/devtools/tool-network.svg",
+  invertIconForLightTheme: true,
+  url: "chrome://browser/content/devtools/timeline/timeline.xul",
+  label: l10n("timeline.label", timelineStrings),
+  panelLabel: l10n("timeline.panelLabel", timelineStrings),
+  tooltip: l10n("timeline.tooltip", timelineStrings),
+
+  isTargetSupported: function(target) {
+    return target.hasActor("timeline");
+  },
+
+  build: function (iframeWindow, toolbox) {
+    let panel = new TimelinePanel(iframeWindow, toolbox);
+    return panel.open();
+  }
+};
+
+Tools.netMonitor = {
+  id: "netmonitor",
+  accesskey: l10n("netmonitor.accesskey", netMonitorStrings),
+  key: l10n("netmonitor.commandkey", netMonitorStrings),
+  ordinal: 9,
+  modifiers: osString == "Darwin" ? "accel,alt" : "accel,shift",
+  visibilityswitch: "devtools.netmonitor.enabled",
+  icon: "chrome://browser/skin/devtools/tool-network.svg",
+  invertIconForLightTheme: true,
+  url: "chrome://browser/content/devtools/netmonitor.xul",
+  label: l10n("netmonitor.label", netMonitorStrings),
+  panelLabel: l10n("netmonitor.panelLabel", netMonitorStrings),
+  tooltip: l10n("netmonitor.tooltip", netMonitorStrings),
+  inMenu: true,
+
+  isTargetSupported: function(target) {
+    return target.getTrait("networkMonitor");
+  },
+
+  build: function(iframeWindow, toolbox) {
+    return new NetMonitorPanel(iframeWindow, toolbox);
+  }
+};
+
+Tools.storage = {
+  id: "storage",
+  key: l10n("storage.commandkey", storageStrings),
+  ordinal: 10,
+  accesskey: l10n("storage.accesskey", storageStrings),
+  modifiers: "shift",
+  visibilityswitch: "devtools.storage.enabled",
+  icon: "chrome://browser/skin/devtools/tool-storage.svg",
+  invertIconForLightTheme: true,
+  url: "chrome://browser/content/devtools/storage.xul",
+  label: l10n("storage.label", storageStrings),
+  menuLabel: l10n("storage.menuLabel", storageStrings),
+  panelLabel: l10n("storage.panelLabel", storageStrings),
+  tooltip: l10n("storage.tooltip2", storageStrings),
+  inMenu: true,
+
+  isTargetSupported: function(target) {
+    return target.isLocalTab ||
+           ( target.hasActor("storage") &&
+             target.getTrait("storageInspector") );
+  },
+
+  build: function(iframeWindow, toolbox) {
+    return new StoragePanel(iframeWindow, toolbox);
+  }
+};
+
+Tools.webAudioEditor = {
+  id: "webaudioeditor",
+  ordinal: 11,
+  visibilityswitch: "devtools.webaudioeditor.enabled",
+  icon: "chrome://browser/skin/devtools/tool-webaudio.svg",
+  invertIconForLightTheme: true,
+  url: "chrome://browser/content/devtools/webaudioeditor.xul",
+  label: l10n("ToolboxWebAudioEditor1.label", webAudioEditorStrings),
+  panelLabel: l10n("ToolboxWebAudioEditor1.panelLabel", webAudioEditorStrings),
+  tooltip: l10n("ToolboxWebAudioEditor1.tooltip", webAudioEditorStrings),
+
+  isTargetSupported: function(target) {
+    return !target.chrome && target.hasActor("webaudio");
+  },
+
+  build: function(iframeWindow, toolbox) {
+    return new WebAudioEditorPanel(iframeWindow, toolbox);
+  }
+};
+
+Tools.scratchpad = {
+  id: "scratchpad",
+  ordinal: 12,
+  visibilityswitch: "devtools.scratchpad.enabled",
+  icon: "chrome://browser/skin/devtools/tool-scratchpad.svg",
+  invertIconForLightTheme: true,
+  url: "chrome://browser/content/devtools/scratchpad.xul",
+  label: l10n("scratchpad.label", scratchpadStrings),
+  panelLabel: l10n("scratchpad.panelLabel", scratchpadStrings),
+  tooltip: l10n("scratchpad.tooltip", scratchpadStrings),
+  inMenu: false,
+  commands: "devtools/scratchpad/scratchpad-commands",
+
+  isTargetSupported: function(target) {
+    return target.isRemote;
+  },
+
+  build: function(iframeWindow, toolbox) {
+    return new ScratchpadPanel(iframeWindow, toolbox);
+  }
+};
+
+let defaultTools = [
+  Tools.options,
+  Tools.webConsole,
+  Tools.inspector,
+  Tools.jsdebugger,
+  Tools.styleEditor,
+  Tools.shaderEditor,
+  Tools.canvasDebugger,
+  Tools.webAudioEditor,
+  Tools.jsprofiler,
+  Tools.timeline,
+  Tools.netMonitor,
+  Tools.storage,
+  Tools.scratchpad
+];
+
+// Only enable in-development performance tools if `--enable-devtools-perf`
+// used in build, turning on `devtools.performance_dev.enabled`.
+// Add to normal `defaultTools` when ready for normal release,
+// pull out MOZ_DEVTOOLS_PERFTOOLS setting in `./configure.in`, and
+// leave config on in `./browser/app/profile/firefox.js`, and always
+// build in `./browser/devtools/moz.build`.
+if (Services.prefs.getBoolPref("devtools.performance_dev.enabled")) {
+  defaultTools.push(Tools.performance);
+}
+
+exports.defaultTools = defaultTools;
+
+Tools.darkTheme = {
+  id: "dark",
+  label: l10n("options.darkTheme.label", toolboxStrings),
+  ordinal: 1,
+  stylesheets: ["chrome://browser/skin/devtools/dark-theme.css"],
+  classList: ["theme-dark"],
+};
+
+Tools.lightTheme = {
+  id: "light",
+  label: l10n("options.lightTheme.label", toolboxStrings),
+  ordinal: 2,
+  stylesheets: ["chrome://browser/skin/devtools/light-theme.css"],
+  classList: ["theme-light"],
+};
+
+exports.defaultThemes = [
+  Tools.darkTheme,
+  Tools.lightTheme,
+];
+
+/**
+ * Lookup l10n string from a string bundle.
+ *
+ * @param {string} name
+ *        The key to lookup.
+ * @param {StringBundle} bundle
+ *        The key to lookup.
+ * @returns A localized version of the given key.
+ */
+function l10n(name, bundle)
+{
+  try {
+    return bundle.GetStringFromName(name);
+  } catch (ex) {
+    Services.console.logStringMessage("Error reading '" + name + "'");
+    throw new Error("l10n error with " + name);
+  }
+}
diff --git a/browser/devtools/main.js b/browser/devtools/main.js
index 3c9aa84..166d12f 100644
--- a/browser/devtools/main.js
+++ b/browser/devtools/main.js
@@ -4,11 +4,19 @@
 
 "use strict";
 
-const {Cc, Ci, Cu} = require("chrome");
+const { Services } = require("resource://gre/modules/Services.jsm");
+const { gDevTools } = require("resource:///modules/devtools/gDevTools.jsm");
 
-Cu.import("resource://gre/modules/XPCOMUtils.jsm");
-Cu.import("resource://gre/modules/Services.jsm");
-Cu.import("resource:///modules/devtools/gDevTools.jsm");
+const { defaultTools, defaultThemes } = require("definitions");
+
+defaultTools.forEach(definition => gDevTools.registerTool(definition));
+defaultThemes.forEach(definition => gDevTools.registerTheme(definition));
+
+// Re-export for backwards compatibility, but we should probably the
+// definitions from require("definitions") in the future
+exports.defaultTools = require("definitions").defaultTools;
+exports.defaultThemes = require("definitions").defaultThemes;
+exports.Tools = require("definitions").Tools;
 
 Object.defineProperty(exports, "Toolbox", {
   get: () => require("devtools/framework/toolbox").Toolbox
@@ -17,460 +25,7 @@ Object.defineProperty(exports, "TargetFactory", {
   get: () => require("devtools/framework/target").TargetFactory
 });
 
-loader.lazyGetter(this, "osString", () => Cc["@mozilla.org/xre/app-info;1"].getService(Ci.nsIXULRuntime).OS);
-
-let events = require("sdk/system/events");
-
-// Panels
-loader.lazyGetter(this, "OptionsPanel", () => require("devtools/framework/toolbox-options").OptionsPanel);
-loader.lazyGetter(this, "InspectorPanel", () => require("devtools/inspector/inspector-panel").InspectorPanel);
-loader.lazyGetter(this, "WebConsolePanel", () => require("devtools/webconsole/panel").WebConsolePanel);
-loader.lazyGetter(this, "DebuggerPanel", () => require("devtools/debugger/panel").DebuggerPanel);
-loader.lazyGetter(this, "StyleEditorPanel", () => require("devtools/styleeditor/styleeditor-panel").StyleEditorPanel);
-loader.lazyGetter(this, "ShaderEditorPanel", () => require("devtools/shadereditor/panel").ShaderEditorPanel);
-loader.lazyGetter(this, "CanvasDebuggerPanel", () => require("devtools/canvasdebugger/panel").CanvasDebuggerPanel);
-loader.lazyGetter(this, "WebAudioEditorPanel", () => require("devtools/webaudioeditor/panel").WebAudioEditorPanel);
-loader.lazyGetter(this, "ProfilerPanel", () => require("devtools/profiler/panel").ProfilerPanel);
-loader.lazyGetter(this, "PerformancePanel", () => require("devtools/performance/panel").PerformancePanel);
-loader.lazyGetter(this, "TimelinePanel", () => require("devtools/timeline/panel").TimelinePanel);
-loader.lazyGetter(this, "NetMonitorPanel", () => require("devtools/netmonitor/panel").NetMonitorPanel);
-loader.lazyGetter(this, "StoragePanel", () => require("devtools/storage/panel").StoragePanel);
-loader.lazyGetter(this, "ScratchpadPanel", () => require("devtools/scratchpad/scratchpad-panel").ScratchpadPanel);
-
-// Strings
-const toolboxProps = "chrome://browser/locale/devtools/toolbox.properties";
-const inspectorProps = "chrome://browser/locale/devtools/inspector.properties";
-const webConsoleProps = "chrome://browser/locale/devtools/webconsole.properties";
-const debuggerProps = "chrome://browser/locale/devtools/debugger.properties";
-const styleEditorProps = "chrome://browser/locale/devtools/styleeditor.properties";
-const shaderEditorProps = "chrome://browser/locale/devtools/shadereditor.properties";
-const canvasDebuggerProps = "chrome://browser/locale/devtools/canvasdebugger.properties";
-const webAudioEditorProps = "chrome://browser/locale/devtools/webaudioeditor.properties";
-const profilerProps = "chrome://browser/locale/devtools/profiler.properties";
-const timelineProps = "chrome://browser/locale/devtools/timeline.properties";
-const netMonitorProps = "chrome://browser/locale/devtools/netmonitor.properties";
-const storageProps = "chrome://browser/locale/devtools/storage.properties";
-const scratchpadProps = "chrome://browser/locale/devtools/scratchpad.properties";
-
-loader.lazyGetter(this, "toolboxStrings", () => Services.strings.createBundle(toolboxProps));
-loader.lazyGetter(this, "profilerStrings",() => Services.strings.createBundle(profilerProps));
-loader.lazyGetter(this, "webConsoleStrings", () => Services.strings.createBundle(webConsoleProps));
-loader.lazyGetter(this, "debuggerStrings", () => Services.strings.createBundle(debuggerProps));
-loader.lazyGetter(this, "styleEditorStrings", () => Services.strings.createBundle(styleEditorProps));
-loader.lazyGetter(this, "shaderEditorStrings", () => Services.strings.createBundle(shaderEditorProps));
-loader.lazyGetter(this, "canvasDebuggerStrings", () => Services.strings.createBundle(canvasDebuggerProps));
-loader.lazyGetter(this, "webAudioEditorStrings", () => Services.strings.createBundle(webAudioEditorProps));
-loader.lazyGetter(this, "inspectorStrings", () => Services.strings.createBundle(inspectorProps));
-loader.lazyGetter(this, "timelineStrings", () => Services.strings.createBundle(timelineProps));
-loader.lazyGetter(this, "netMonitorStrings", () => Services.strings.createBundle(netMonitorProps));
-loader.lazyGetter(this, "storageStrings", () => Services.strings.createBundle(storageProps));
-loader.lazyGetter(this, "scratchpadStrings", () => Services.strings.createBundle(scratchpadProps));
-
-let Tools = {};
-exports.Tools = Tools;
-
-// Definitions
-Tools.options = {
-  id: "options",
-  ordinal: 0,
-  url: "chrome://browser/content/devtools/framework/toolbox-options.xul",
-  icon: "chrome://browser/skin/devtools/tool-options.svg",
-  invertIconForLightTheme: true,
-  bgTheme: "theme-body",
-  label: l10n("options.label", toolboxStrings),
-  iconOnly: true,
-  panelLabel: l10n("options.panelLabel", toolboxStrings),
-  tooltip: l10n("optionsButton.tooltip", toolboxStrings),
-  inMenu: false,
-
-  isTargetSupported: function(target) {
-    return true;
-  },
-
-  build: function(iframeWindow, toolbox) {
-    return new OptionsPanel(iframeWindow, toolbox);
-  }
-}
-
-Tools.inspector = {
-  id: "inspector",
-  accesskey: l10n("inspector.accesskey", inspectorStrings),
-  key: l10n("inspector.commandkey", inspectorStrings),
-  ordinal: 1,
-  modifiers: osString == "Darwin" ? "accel,alt" : "accel,shift",
-  icon: "chrome://browser/skin/devtools/tool-inspector.svg",
-  invertIconForLightTheme: true,
-  url: "chrome://browser/content/devtools/inspector/inspector.xul",
-  label: l10n("inspector.label", inspectorStrings),
-  panelLabel: l10n("inspector.panelLabel", inspectorStrings),
-  tooltip: l10n("inspector.tooltip", inspectorStrings),
-  inMenu: true,
-  commands: [
-    "devtools/resize-commands",
-    "devtools/inspector/inspector-commands",
-    "devtools/eyedropper/commands.js"
-  ],
-
-  preventClosingOnKey: true,
-  onkey: function(panel) {
-    panel.toolbox.highlighterUtils.togglePicker();
-  },
-
-  isTargetSupported: function(target) {
-    return target.hasActor("inspector");
-  },
-
-  build: function(iframeWindow, toolbox) {
-    return new InspectorPanel(iframeWindow, toolbox);
-  }
-};
-
-Tools.webConsole = {
-  id: "webconsole",
-  key: l10n("cmd.commandkey", webConsoleStrings),
-  accesskey: l10n("webConsoleCmd.accesskey", webConsoleStrings),
-  modifiers: Services.appinfo.OS == "Darwin" ? "accel,alt" : "accel,shift",
-  ordinal: 2,
-  icon: "chrome://browser/skin/devtools/tool-webconsole.svg",
-  invertIconForLightTheme: true,
-  url: "chrome://browser/content/devtools/webconsole.xul",
-  label: l10n("ToolboxTabWebconsole.label", webConsoleStrings),
-  menuLabel: l10n("MenuWebconsole.label", webConsoleStrings),
-  panelLabel: l10n("ToolboxWebConsole.panelLabel", webConsoleStrings),
-  tooltip: l10n("ToolboxWebconsole.tooltip", webConsoleStrings),
-  inMenu: true,
-  commands: "devtools/webconsole/console-commands",
-
-  preventClosingOnKey: true,
-  onkey: function(panel, toolbox) {
-    if (toolbox.splitConsole)
-      return toolbox.focusConsoleInput();
-
-    panel.focusInput();
-  },
-
-  isTargetSupported: function(target) {
-    return true;
-  },
-
-  build: function(iframeWindow, toolbox) {
-    return new WebConsolePanel(iframeWindow, toolbox);
-  }
-};
-
-Tools.jsdebugger = {
-  id: "jsdebugger",
-  key: l10n("debuggerMenu.commandkey", debuggerStrings),
-  accesskey: l10n("debuggerMenu.accesskey", debuggerStrings),
-  modifiers: osString == "Darwin" ? "accel,alt" : "accel,shift",
-  ordinal: 3,
-  icon: "chrome://browser/skin/devtools/tool-debugger.svg",
-  invertIconForLightTheme: true,
-  highlightedicon: "chrome://browser/skin/devtools/tool-debugger-paused.svg",
-  url: "chrome://browser/content/devtools/debugger.xul",
-  label: l10n("ToolboxDebugger.label", debuggerStrings),
-  panelLabel: l10n("ToolboxDebugger.panelLabel", debuggerStrings),
-  tooltip: l10n("ToolboxDebugger.tooltip", debuggerStrings),
-  inMenu: true,
-  commands: "devtools/debugger/debugger-commands",
-
-  isTargetSupported: function(target) {
-    return true;
-  },
-
-  build: function(iframeWindow, toolbox) {
-    return new DebuggerPanel(iframeWindow, toolbox);
-  }
-};
-
-Tools.styleEditor = {
-  id: "styleeditor",
-  key: l10n("open.commandkey", styleEditorStrings),
-  ordinal: 4,
-  accesskey: l10n("open.accesskey", styleEditorStrings),
-  modifiers: "shift",
-  icon: "chrome://browser/skin/devtools/tool-styleeditor.svg",
-  invertIconForLightTheme: true,
-  url: "chrome://browser/content/devtools/styleeditor.xul",
-  label: l10n("ToolboxStyleEditor.label", styleEditorStrings),
-  panelLabel: l10n("ToolboxStyleEditor.panelLabel", styleEditorStrings),
-  tooltip: l10n("ToolboxStyleEditor.tooltip2", styleEditorStrings),
-  inMenu: true,
-  commands: "devtools/styleeditor/styleeditor-commands",
-
-  isTargetSupported: function(target) {
-    return target.hasActor("styleEditor") || target.hasActor("styleSheets");
-  },
-
-  build: function(iframeWindow, toolbox) {
-    return new StyleEditorPanel(iframeWindow, toolbox);
-  }
-};
-
-Tools.shaderEditor = {
-  id: "shadereditor",
-  ordinal: 5,
-  visibilityswitch: "devtools.shadereditor.enabled",
-  icon: "chrome://browser/skin/devtools/tool-styleeditor.svg",
-  invertIconForLightTheme: true,
-  url: "chrome://browser/content/devtools/shadereditor.xul",
-  label: l10n("ToolboxShaderEditor.label", shaderEditorStrings),
-  panelLabel: l10n("ToolboxShaderEditor.panelLabel", shaderEditorStrings),
-  tooltip: l10n("ToolboxShaderEditor.tooltip", shaderEditorStrings),
-
-  isTargetSupported: function(target) {
-    return target.hasActor("webgl");
-  },
-
-  build: function(iframeWindow, toolbox) {
-    return new ShaderEditorPanel(iframeWindow, toolbox);
-  }
-};
-
-Tools.canvasDebugger = {
-  id: "canvasdebugger",
-  ordinal: 6,
-  visibilityswitch: "devtools.canvasdebugger.enabled",
-  icon: "chrome://browser/skin/devtools/tool-styleeditor.svg",
-  invertIconForLightTheme: true,
-  url: "chrome://browser/content/devtools/canvasdebugger.xul",
-  label: l10n("ToolboxCanvasDebugger.label", canvasDebuggerStrings),
-  panelLabel: l10n("ToolboxCanvasDebugger.panelLabel", canvasDebuggerStrings),
-  tooltip: l10n("ToolboxCanvasDebugger.tooltip", canvasDebuggerStrings),
-
-  // Hide the Canvas Debugger in the Add-on Debugger and Browser Toolbox
-  // (bug 1047520).
-  isTargetSupported: function(target) {
-    return target.hasActor("canvas") && !target.chrome;
-  },
-
-  build: function (iframeWindow, toolbox) {
-    return new CanvasDebuggerPanel(iframeWindow, toolbox);
-  }
-};
-
-Tools.jsprofiler = {
-  id: "jsprofiler",
-  accesskey: l10n("profiler.accesskey", profilerStrings),
-  key: l10n("profiler.commandkey2", profilerStrings),
-  ordinal: 7,
-  modifiers: "shift",
-  visibilityswitch: "devtools.profiler.enabled",
-  icon: "chrome://browser/skin/devtools/tool-profiler.svg",
-  invertIconForLightTheme: true,
-  url: "chrome://browser/content/devtools/profiler.xul",
-  label: l10n("profiler.label2", profilerStrings),
-  panelLabel: l10n("profiler.panelLabel2", profilerStrings),
-  tooltip: l10n("profiler.tooltip2", profilerStrings),
-  inMenu: true,
-
-  isTargetSupported: function (target) {
-    // Hide the profiler when debugging devices pre bug 1046394,
-    // that don't expose profiler actor in content processes.
-    return target.hasActor("profiler");
-  },
-
-  build: function (frame, target) {
-    return new ProfilerPanel(frame, target);
-  }
-};
-
-Tools.performance = {
-  id: "performance",
-  ordinal: 19,
-  icon: "chrome://browser/skin/devtools/tool-profiler.svg",
-  invertIconForLightTheme: true,
-  url: "chrome://browser/content/devtools/performance.xul",
-  // TODO bug 1082695 audit the Performance tools labels
-  label: "Performance++", //l10n("profiler.label2", profilerStrings),
-  panelLabel: "Performance++", //l10n("profiler.panelLabel2", profilerStrings),
-  tooltip: l10n("profiler.tooltip2", profilerStrings),
-  accesskey: l10n("profiler.accesskey", profilerStrings),
-  key: l10n("profiler.commandkey2", profilerStrings),
-  modifiers: "shift",
-  inMenu: true,
-
-  isTargetSupported: function (target) {
-    return target.hasActor("profiler");
-  },
-
-  build: function (frame, target) {
-    return new PerformancePanel(frame, target);
-  }
-};
-
-Tools.timeline = {
-  id: "timeline",
-  ordinal: 8,
-  visibilityswitch: "devtools.timeline.enabled",
-  icon: "chrome://browser/skin/devtools/tool-network.svg",
-  invertIconForLightTheme: true,
-  url: "chrome://browser/content/devtools/timeline/timeline.xul",
-  label: l10n("timeline.label", timelineStrings),
-  panelLabel: l10n("timeline.panelLabel", timelineStrings),
-  tooltip: l10n("timeline.tooltip", timelineStrings),
-
-  isTargetSupported: function(target) {
-    return target.hasActor("timeline");
-  },
-
-  build: function (iframeWindow, toolbox) {
-    let panel = new TimelinePanel(iframeWindow, toolbox);
-    return panel.open();
-  }
-};
-
-Tools.netMonitor = {
-  id: "netmonitor",
-  accesskey: l10n("netmonitor.accesskey", netMonitorStrings),
-  key: l10n("netmonitor.commandkey", netMonitorStrings),
-  ordinal: 9,
-  modifiers: osString == "Darwin" ? "accel,alt" : "accel,shift",
-  visibilityswitch: "devtools.netmonitor.enabled",
-  icon: "chrome://browser/skin/devtools/tool-network.svg",
-  invertIconForLightTheme: true,
-  url: "chrome://browser/content/devtools/netmonitor.xul",
-  label: l10n("netmonitor.label", netMonitorStrings),
-  panelLabel: l10n("netmonitor.panelLabel", netMonitorStrings),
-  tooltip: l10n("netmonitor.tooltip", netMonitorStrings),
-  inMenu: true,
-
-  isTargetSupported: function(target) {
-    return target.getTrait("networkMonitor");
-  },
-
-  build: function(iframeWindow, toolbox) {
-    return new NetMonitorPanel(iframeWindow, toolbox);
-  }
-};
-
-Tools.storage = {
-  id: "storage",
-  key: l10n("storage.commandkey", storageStrings),
-  ordinal: 10,
-  accesskey: l10n("storage.accesskey", storageStrings),
-  modifiers: "shift",
-  visibilityswitch: "devtools.storage.enabled",
-  icon: "chrome://browser/skin/devtools/tool-storage.svg",
-  invertIconForLightTheme: true,
-  url: "chrome://browser/content/devtools/storage.xul",
-  label: l10n("storage.label", storageStrings),
-  menuLabel: l10n("storage.menuLabel", storageStrings),
-  panelLabel: l10n("storage.panelLabel", storageStrings),
-  tooltip: l10n("storage.tooltip2", storageStrings),
-  inMenu: true,
-
-  isTargetSupported: function(target) {
-    return target.isLocalTab ||
-           ( target.hasActor("storage") &&
-             target.getTrait("storageInspector") );
-  },
-
-  build: function(iframeWindow, toolbox) {
-    return new StoragePanel(iframeWindow, toolbox);
-  }
-};
-
-Tools.webAudioEditor = {
-  id: "webaudioeditor",
-  ordinal: 11,
-  visibilityswitch: "devtools.webaudioeditor.enabled",
-  icon: "chrome://browser/skin/devtools/tool-webaudio.svg",
-  invertIconForLightTheme: true,
-  url: "chrome://browser/content/devtools/webaudioeditor.xul",
-  label: l10n("ToolboxWebAudioEditor1.label", webAudioEditorStrings),
-  panelLabel: l10n("ToolboxWebAudioEditor1.panelLabel", webAudioEditorStrings),
-  tooltip: l10n("ToolboxWebAudioEditor1.tooltip", webAudioEditorStrings),
-
-  isTargetSupported: function(target) {
-    return !target.chrome && target.hasActor("webaudio");
-  },
-
-  build: function(iframeWindow, toolbox) {
-    return new WebAudioEditorPanel(iframeWindow, toolbox);
-  }
-};
-
-Tools.scratchpad = {
-  id: "scratchpad",
-  ordinal: 12,
-  visibilityswitch: "devtools.scratchpad.enabled",
-  icon: "chrome://browser/skin/devtools/tool-scratchpad.svg",
-  invertIconForLightTheme: true,
-  url: "chrome://browser/content/devtools/scratchpad.xul",
-  label: l10n("scratchpad.label", scratchpadStrings),
-  panelLabel: l10n("scratchpad.panelLabel", scratchpadStrings),
-  tooltip: l10n("scratchpad.tooltip", scratchpadStrings),
-  inMenu: false,
-  commands: "devtools/scratchpad/scratchpad-commands",
-
-  isTargetSupported: function(target) {
-    return target.isRemote;
-  },
-
-  build: function(iframeWindow, toolbox) {
-    return new ScratchpadPanel(iframeWindow, toolbox);
-  }
-};
-
-let defaultTools = [
-  Tools.options,
-  Tools.webConsole,
-  Tools.inspector,
-  Tools.jsdebugger,
-  Tools.styleEditor,
-  Tools.shaderEditor,
-  Tools.canvasDebugger,
-  Tools.webAudioEditor,
-  Tools.jsprofiler,
-  Tools.timeline,
-  Tools.netMonitor,
-  Tools.storage,
-  Tools.scratchpad
-];
-
-// Only enable in-development performance tools if `--enable-devtools-perf`
-// used in build, turning on `devtools.performance_dev.enabled`.
-// Add to normal `defaultTools` when ready for normal release,
-// pull out MOZ_DEVTOOLS_PERFTOOLS setting in `./configure.in`, and
-// leave config on in `./browser/app/profile/firefox.js`, and always
-// build in `./browser/devtools/moz.build`.
-if (Services.prefs.getBoolPref("devtools.performance_dev.enabled")) {
-  defaultTools.push(Tools.performance);
-}
-
-exports.defaultTools = defaultTools;
-
-for (let definition of defaultTools) {
-  gDevTools.registerTool(definition);
-}
-
-Tools.darkTheme = {
-  id: "dark",
-  label: l10n("options.darkTheme.label", toolboxStrings),
-  ordinal: 1,
-  stylesheets: ["chrome://browser/skin/devtools/dark-theme.css"],
-  classList: ["theme-dark"],
-};
-
-Tools.lightTheme = {
-  id: "light",
-  label: l10n("options.lightTheme.label", toolboxStrings),
-  ordinal: 2,
-  stylesheets: ["chrome://browser/skin/devtools/light-theme.css"],
-  classList: ["theme-light"],
-};
-
-let defaultThemes = [
-  Tools.darkTheme,
-  Tools.lightTheme,
-];
-
-for (let definition of defaultThemes) {
-  gDevTools.registerTheme(definition);
-}
-
-var unloadObserver = {
+const unloadObserver = {
   observe: function(subject, topic, data) {
     if (subject.wrappedJSObject === require("@loader/unload")) {
       Services.obs.removeObserver(unloadObserver, "sdk:loader:destroy");
@@ -485,23 +40,5 @@ var unloadObserver = {
 };
 Services.obs.addObserver(unloadObserver, "sdk:loader:destroy", false);
 
+const events = require("sdk/system/events");
 events.emit("devtools-loaded", {});
-
-/**
- * Lookup l10n string from a string bundle.
- *
- * @param {string} name
- *        The key to lookup.
- * @param {StringBundle} bundle
- *        The key to lookup.
- * @returns A localized version of the given key.
- */
-function l10n(name, bundle)
-{
-  try {
-    return bundle.GetStringFromName(name);
-  } catch (ex) {
-    Services.console.logStringMessage("Error reading '" + name + "'");
-    throw new Error("l10n error with " + name);
-  }
-}
diff --git a/browser/devtools/moz.build b/browser/devtools/moz.build
index 5791934..af3930b 100644
--- a/browser/devtools/moz.build
+++ b/browser/devtools/moz.build
@@ -45,5 +45,6 @@ EXTRA_COMPONENTS += [
 JAR_MANIFESTS += ['jar.mn']
 
 EXTRA_JS_MODULES.devtools += [
+    'definitions.js',
     'main.js',
 ]
diff --git a/browser/devtools/webconsole/console-commands.js b/browser/devtools/webconsole/console-commands.js
index 588d6a9..d0257f8 100644
--- a/browser/devtools/webconsole/console-commands.js
+++ b/browser/devtools/webconsole/console-commands.js
@@ -5,7 +5,7 @@
 "use strict";
 
 const l10n = require("gcli/l10n");
-const { gDevTools } = require("resource:///modules/devtools/gDevTools.jsm");
+loader.lazyGetter(this, "gDevTools", () => require("resource:///modules/devtools/gDevTools.jsm").gDevTools);
 
 exports.items = [
   {
diff --git a/browser/devtools/webconsole/console-output.js b/browser/devtools/webconsole/console-output.js
index f78e24cb..2a74125 100644
--- a/browser/devtools/webconsole/console-output.js
+++ b/browser/devtools/webconsole/console-output.js
@@ -7,6 +7,8 @@
 
 const {Cc, Ci, Cu} = require("chrome");
 
+const { Services } = require("resource://gre/modules/Services.jsm");
+
 loader.lazyImporter(this, "VariablesView", "resource:///modules/devtools/VariablesView.jsm");
 loader.lazyImporter(this, "escapeHTML", "resource:///modules/devtools/VariablesView.jsm");
 loader.lazyImporter(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm");
diff --git a/toolkit/devtools/Loader.jsm b/toolkit/devtools/Loader.jsm
index 4c9e0cb..1496f28 100644
--- a/toolkit/devtools/Loader.jsm
+++ b/toolkit/devtools/Loader.jsm
@@ -79,6 +79,7 @@ BuiltinProvider.prototype = {
         // corresponding addition to the SrcdirProvider mapping below as well.
         "": "resource://gre/modules/commonjs/",
         "main": "resource:///modules/devtools/main.js",
+        "definitions": "resource:///modules/devtools/definitions.js",
         "devtools": "resource:///modules/devtools",
         "devtools/toolkit": "resource://gre/modules/devtools",
         "devtools/server": "resource://gre/modules/devtools/server",
@@ -135,6 +136,7 @@ SrcdirProvider.prototype = {
     let devtoolsDir = OS.Path.join(srcdir, "browser", "devtools");
     let toolkitDir = OS.Path.join(srcdir, "toolkit", "devtools");
     let mainURI = this.fileURI(OS.Path.join(devtoolsDir, "main.js"));
+    let definitionsURI = this.fileURI(OS.Path.join(devtoolsDir, "definitions.js"));
     let devtoolsURI = this.fileURI(devtoolsDir);
     let toolkitURI = this.fileURI(toolkitDir);
     let serverURI = this.fileURI(OS.Path.join(toolkitDir, "server"));
@@ -161,6 +163,7 @@ SrcdirProvider.prototype = {
       paths: {
         "": "resource://gre/modules/commonjs/",
         "main": mainURI,
+        "definitions": definitionsURI,
         "devtools": devtoolsURI,
         "devtools/toolkit": toolkitURI,
         "devtools/server": serverURI,
diff --git a/toolkit/devtools/gcli/commands/csscoverage.js b/toolkit/devtools/gcli/commands/csscoverage.js
index 7ef8387..6bd9a7c 100644
--- a/toolkit/devtools/gcli/commands/csscoverage.js
+++ b/toolkit/devtools/gcli/commands/csscoverage.js
@@ -6,7 +6,8 @@
 
 const { Cc, Ci } = require("chrome");
 
-const { gDevTools } = require("resource:///modules/devtools/gDevTools.jsm");
+loader.lazyGetter(this, "gDevTools", () => require("resource:///modules/devtools/gDevTools.jsm").gDevTools);
+
 const promise = require("resource://gre/modules/Promise.jsm").Promise;
 
 const domtemplate = require("gcli/util/domtemplate");

From 10eb93cb9e019ecf7127c3be9e402d67419dc5bc Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Fri, 6 Mar 2015 16:53:34 +0000
Subject: [PATCH 37/38] Use WeakMap<Client, Front> rather than WeakMap<Target,
 Front>

The front belongs to the client rather than the target

Fix for:
https://github.com/joewalker/gecko-dev/commit/19178eb762872d6dafa203971a531583a0faccc5#commitcomment-9875837
---
 toolkit/devtools/server/actors/gcli.js | 7 +++----
 1 file changed, 3 insertions(+), 4 deletions(-)

diff --git a/toolkit/devtools/server/actors/gcli.js b/toolkit/devtools/server/actors/gcli.js
index abbaf50..c95e0b1 100644
--- a/toolkit/devtools/server/actors/gcli.js
+++ b/toolkit/devtools/server/actors/gcli.js
@@ -288,8 +288,7 @@ const GcliFront = exports.GcliFront = FrontClass(GcliActor, {
   },
 });
 
-// A cache of created fronts: WeakMap<Target, Front>
-// TODO: CSSUsageFront has WeakMap<Target, Client> is there a good reason?
+// A cache of created fronts: WeakMap<Client, Front>
 const knownFronts = new WeakMap();
 
 /**
@@ -299,10 +298,10 @@ const knownFronts = new WeakMap();
  */
 exports.GcliFront.create = function(target) {
   return target.makeRemote().then(() => {
-    let front = knownFronts.get(target);
+    let front = knownFronts.get(target.client);
     if (front == null && target.form.gcliActor != null) {
       front = new GcliFront(target.client, target.form);
-      knownFronts.set(target, front);
+      knownFronts.set(target.client, front);
     }
     return front;
   });

From bfe777941ded5ecb48ac5d62acec8a61c9781be4 Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Fri, 6 Mar 2015 17:11:33 +0000
Subject: [PATCH 38/38] Firefox uses " rather than '

A fix for
https://github.com/joewalker/gecko-dev/commit/20642d6a87f8918932c2d96b153594cd75f06027#commitcomment-9879830
---
 browser/devtools/shared/DeveloperToolbar.jsm | 42 ++++++++++++++--------------
 1 file changed, 21 insertions(+), 21 deletions(-)

diff --git a/browser/devtools/shared/DeveloperToolbar.jsm b/browser/devtools/shared/DeveloperToolbar.jsm
index 863fefc..b957e89 100644
--- a/browser/devtools/shared/DeveloperToolbar.jsm
+++ b/browser/devtools/shared/DeveloperToolbar.jsm
@@ -60,7 +60,7 @@ Object.defineProperty(this, "ConsoleServiceListener", {
   enumerable: true
 });
 
-const promise = Cu.import('resource://gre/modules/Promise.jsm', {}).Promise;
+const promise = Cu.import("resource://gre/modules/Promise.jsm", {}).Promise;
 
 /**
  * A collection of utilities to help working with commands
@@ -71,7 +71,7 @@ let CommandUtils = {
    */
   createRequisition: function(environment, target) {
     return gcliInit.loadForTarget(target).then(system => {
-      var Requisition = require('gcli/cli').Requisition;
+      var Requisition = require("gcli/cli").Requisition;
       return new Requisition(system, { environment: environment });
     });
   },
@@ -185,39 +185,39 @@ let CommandUtils = {
    * @param targetContainer An object containing a 'target' property which
    * reflects the current debug target
    */
-  createEnvironment: function(container, targetProperty='target') {
+  createEnvironment: function(container, targetProperty="target") {
     if (!container[targetProperty].toString ||
         !/TabTarget/.test(container[targetProperty].toString())) {
-      throw new Error('Missing target');
+      throw new Error("Missing target");
     }
 
     return {
       get target() {
         if (!container[targetProperty].toString ||
             !/TabTarget/.test(container[targetProperty].toString())) {
-          throw new Error('Removed target');
+          throw new Error("Removed target");
         }
 
         return container[targetProperty];
       },
 
       get chromeWindow() {
-        console.error('use of chromeWindow is deprecated from commands');
+        console.error("use of chromeWindow is deprecated from commands");
         return this.target.tab.ownerDocument.defaultView;
       },
 
       get chromeDocument() {
-        console.error('use of chromeDocument is deprecated from commands');
+        console.error("use of chromeDocument is deprecated from commands");
         return this.target.tab.ownerDocument.defaultView.document;
       },
 
       get window() {
-        console.error('use of window is deprecated from commands');
+        console.error("use of window is deprecated from commands");
         return this.target.tab.ownerDocument.defaultView.gBrowser.selectedBrowser.contentWindow;
       },
 
       get document() {
-        console.error('use of document is deprecated from commands');
+        console.error("use of document is deprecated from commands");
         return this.target.tab.ownerDocument.defaultView.gBrowser.selectedBrowser.contentWindow.document;
       }
     };
@@ -293,7 +293,7 @@ DeveloperToolbar.prototype.NOTIFICATIONS = NOTIFICATIONS;
 /**
  * Is the toolbar open?
  */
-Object.defineProperty(DeveloperToolbar.prototype, 'visible', {
+Object.defineProperty(DeveloperToolbar.prototype, "visible", {
   get: function DT_visible() {
     return !this._element.hidden;
   },
@@ -305,7 +305,7 @@ let _gSequenceId = 0;
 /**
  * Getter for a unique ID.
  */
-Object.defineProperty(DeveloperToolbar.prototype, 'sequenceId', {
+Object.defineProperty(DeveloperToolbar.prototype, "sequenceId", {
   get: function DT_visible() {
     return _gSequenceId++;
   },
@@ -399,13 +399,13 @@ DeveloperToolbar.prototype.show = function(focus) {
 
       this.target = TargetFactory.forTab(this._chromeWindow.gBrowser.selectedTab);
       return gcliInit.loadForTarget(this.target).then(system => {
-        let Requisition = require('gcli/cli').Requisition;
+        let Requisition = require("gcli/cli").Requisition;
         this.requisition = new Requisition(system, {
           environment: CommandUtils.createEnvironment(this, "target"),
           document: this.outputPanel.document,
         });
 
-        var FFDisplay = require('gcli/mozui/ffdisplay').FFDisplay;
+        var FFDisplay = require("gcli/mozui/ffdisplay").FFDisplay;
         this.display = new FFDisplay(system, {
           requisition: this.requisition,
           contentDocument: this._chromeWindow.gBrowser.contentDocument,
@@ -446,7 +446,7 @@ DeveloperToolbar.prototype.show = function(focus) {
         this._notify(NOTIFICATIONS.SHOW);
 
         if (!DeveloperToolbar.introShownThisSession) {
-          let intro = require('gcli/ui/intro');
+          let intro = require("gcli/ui/intro");
           intro.maybeShowIntro(this.requisition.commandOutputManager,
                                this.requisition.conversionContext);
           DeveloperToolbar.introShownThisSession = true;
@@ -749,7 +749,7 @@ DeveloperToolbar.prototype.resetErrorsCount = function(tab) {
  * Creating a OutputPanel is asynchronous
  */
 function OutputPanel() {
-  throw new Error('Use OutputPanel.create()');
+  throw new Error("Use OutputPanel.create()");
 }
 
 /**
@@ -835,8 +835,8 @@ OutputPanel.prototype._init = function(devtoolbar) {
     this.document = this._frame.contentDocument;
 
     this._div = this.document.getElementById("gcli-output-root");
-    this._div.classList.add('gcli-row-out');
-    this._div.setAttribute('aria-live', 'assertive');
+    this._div.classList.add("gcli-row-out");
+    this._div.setAttribute("aria-live", "assertive");
 
     let styles = this._toolbar.ownerDocument.defaultView
                     .getComputedStyle(this._toolbar);
@@ -979,7 +979,7 @@ OutputPanel.prototype._update = function() {
 
   if (this.displayedOutput.data != null) {
     let context = this._devtoolbar.requisition.conversionContext;
-    this.displayedOutput.convert('dom', context).then(node => {
+    this.displayedOutput.convert("dom", context).then(node => {
       if (node == null) {
         return;
       }
@@ -988,9 +988,9 @@ OutputPanel.prototype._update = function() {
         this._div.removeChild(this._div.firstChild);
       }
 
-      var links = node.querySelectorAll('*[href]');
+      var links = node.querySelectorAll("*[href]");
       for (var i = 0; i < links.length; i++) {
-        links[i].setAttribute('target', '_blank');
+        links[i].setAttribute("target", "_blank");
       }
 
       this._div.appendChild(node);
@@ -1057,7 +1057,7 @@ OutputPanel.prototype._visibilityChanged = function(ev) {
  * Creating a TooltipPanel is asynchronous
  */
 function TooltipPanel() {
-  throw new Error('Use TooltipPanel.create()');
+  throw new Error("Use TooltipPanel.create()");
 }
 
 /**
