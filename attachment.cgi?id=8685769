# HG changeset patch
# User Alexey Novak <alexey.novak.mail@gmail.com>
# Parent  e402ff476e1b9ff5764aeec44442ab3213c2efc6
Bug 1164195 - $x should accept the resultType argument. r=bgrins

diff --git a/devtools/shared/webconsole/test/chrome.ini b/devtools/shared/webconsole/test/chrome.ini
--- a/devtools/shared/webconsole/test/chrome.ini
+++ b/devtools/shared/webconsole/test/chrome.ini
@@ -20,16 +20,17 @@ support-files =
 [test_console_serviceworker.html]
 [test_console_styling.html]
 [test_file_uri.html]
 [test_reflow.html]
 [test_jsterm.html]
 [test_jsterm_autocomplete.html]
 [test_jsterm_cd_iframe.html]
 [test_jsterm_last_result.html]
+[test_jsterm_xpath.html]
 [test_jsterm_queryselector.html]
 [test_network_get.html]
 [test_network_longstring.html]
 [test_network_post.html]
 [test_network_security-hpkp.html]
 [test_network_security-hsts.html]
 [test_nsiconsolemessage.html]
 [test_object_actor.html]
diff --git a/devtools/shared/webconsole/test/test_jsterm_xpath.html b/devtools/shared/webconsole/test/test_jsterm_xpath.html
new file mode 100644
--- /dev/null
+++ b/devtools/shared/webconsole/test/test_jsterm_xpath.html
@@ -0,0 +1,118 @@
+<!DOCTYPE HTML>
+<html lang="en">
+<head>
+  <meta charset="utf8">
+  <title>Test for the $x helper</title>
+  <script type="text/javascript" src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
+  <script type="text/javascript;version=1.8" src="common.js"></script>
+  <!-- Any copyright is dedicated to the Public Domain.
+     - http://creativecommons.org/publicdomain/zero/1.0/ -->
+</head>
+<body>
+<p>Test for the $x helper</p>
+
+<script class="testbody" type="text/javascript;version=1.8">
+SimpleTest.waitForExplicitFinish();
+let gState;
+let gWin;
+
+function evaluateJS(input) {
+  return new Promise((resolve) => gState.client.evaluateJS(input, resolve));
+}
+
+function startTest() {
+  removeEventListener("load", startTest);
+  attachConsoleToTab([], state => {
+    gState = state;
+    let tests = [checkBasic,checkContext,checkResultType];
+    runTests(tests, testEnd);
+  });
+}
+
+let checkBasic = Task.async(function*() {
+  info ("$x returns an array");
+  let response = yield evaluateJS("$x('*')");
+  basicResultCheck(response, "$x('*')", {
+    type: "object",
+    class: "Array",
+    preview: {
+      length: 1,
+      items: [
+        { class: "HTMLHtmlElement" },
+      ]
+    }
+  });
+  nextTest();
+});
+
+let checkContext = Task.async(function*() {
+  info ("$x context parameter works");
+  let cmd =
+   "var div = document.createElement('div');" +
+   "div.innerHTML = '<span></span><p></p>';" +
+   "$x('*', div);";
+  let response = yield evaluateJS(cmd);
+  basicResultCheck(response, cmd, {
+    type: "object",
+    class: "Array",
+    preview: {
+      length: 2,
+      items: [
+        { class: "HTMLSpanElement" },
+        { class: "HTMLParagraphElement" },
+      ]
+    }
+  });
+  nextTest();
+});
+
+let checkResultType = Task.async(function*() {
+  info ("$x resultType parameter works");
+
+  let cmd =
+   "var div = document.createElement('div');" +
+   "div.innerHTML = '<p><div><p></p></div><div><p></p></div></p>';" +
+   "$x('.//p', div, 'node');";
+  let response = yield evaluateJS(cmd);
+  console.log('---------------------------------->>>>>>>>>>>>' + JSON.stringify(response.result));
+  basicResultCheck(response, cmd, {
+    type: "object",
+    class: "Array",
+    preview: {
+      length: 4,
+      items: [
+        { class: "HTMLParagraphElement" },
+        { class: "HTMLParagraphElement" },
+        { class: "HTMLParagraphElement" },
+        { class: "HTMLParagraphElement" },
+      ]
+    }
+  });
+
+  //response = yield evaluateJS(cmd);
+  nextTest();
+});
+
+function basicResultCheck(response, input, output) {
+  checkObject(response, {
+    from: gState.actor,
+    input: input,
+    result: output,
+  });
+  ok(!response.exception, "no eval exception");
+  ok(!response.helperResult, "no helper result");
+}
+
+function testEnd() {
+  closeDebugger(gState, function() {
+    gState = null;
+    SimpleTest.finish();
+  });
+}
+
+gWin = window.open("data:text/html,");
+info ("Waiting for content window to load");
+gWin.onload = startTest;
+</script>
+</body>
+</html>
diff --git a/devtools/shared/webconsole/utils.js b/devtools/shared/webconsole/utils.js
--- a/devtools/shared/webconsole/utils.js
+++ b/devtools/shared/webconsole/utils.js
@@ -1218,29 +1218,32 @@ WebConsoleCommands._registerOriginal("$_
 
 /**
  * Runs an xPath query and returns all matched nodes.
  *
  * @param string aXPath
  *        xPath search query to execute.
  * @param [optional] nsIDOMNode aContext
  *        Context to run the xPath query on. Uses window.document if not set.
+ * @param [optional] nsIDOMXPathResult aResultType
+ *        Object type returned by the function. List of accepted values:
+ *        {"number", "string", "bool", "node", "nodes"}.
+ *        Uses Ci.nsIDOMXPathResult.ANY_TYPE if not set.
  * @return array of nsIDOMNode
  */
-WebConsoleCommands._registerOriginal("$x", function JSTH_$x(aOwner, aXPath, aContext)
+WebConsoleCommands._registerOriginal("$x", function JSTH_$x(aOwner, aXPath, aContext, aResultType = Ci.nsIDOMXPathResult.ANY_TYPE)
 {
   let nodes = new aOwner.window.Array();
 
   // Not waiving Xrays, since we want the original Document.evaluate function,
   // instead of anything that's been redefined.
   let doc =  aOwner.window.document;
   aContext = aContext || doc;
 
-  let results = doc.evaluate(aXPath, aContext, null,
-                             Ci.nsIDOMXPathResult.ANY_TYPE, null);
+  let results = doc.evaluate(aXPath, aContext, null, aResultType, null);
   let node;
   while ((node = results.iterateNext())) {
     nodes.push(node);
   }
 
   return nodes;
 });
 
