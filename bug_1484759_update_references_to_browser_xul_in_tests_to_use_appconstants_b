# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1534787020 25200
#      Mon Aug 20 10:43:40 2018 -0700
# Node ID cea73f8c9fd4f486367e60d6d5b6d327aca36947
# Parent  a955df76e2b636889a1c37a7863739d6306520eb
Bug 1484759 - Update references to browser.xul in tests to use AppConstants.BROWSER_CHROME_URL;r=Gijs

This only includes functions that seem to be using it to reference a window.
There are other instances where it's used as a generic chrome URI, and those
are left unchanged.

Differential Revision: https://phabricator.services.mozilla.com/D3806

diff --git a/devtools/client/webide/test/head.js b/devtools/client/webide/test/head.js
--- a/devtools/client/webide/test/head.js
+++ b/devtools/client/webide/test/head.js
@@ -1,23 +1,24 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
 const { require } = ChromeUtils.import("resource://devtools/shared/Loader.jsm", {});
+ChromeUtils.import("resource://gre/modules/AppConstants.jsm");
 const { FileUtils } = require("resource://gre/modules/FileUtils.jsm");
 const { gDevTools } = require("devtools/client/framework/devtools");
 const Services = require("Services");
 const { AppProjects } = require("devtools/client/webide/modules/app-projects");
 const DevToolsUtils = require("devtools/shared/DevToolsUtils");
 const { DebuggerServer } = require("devtools/server/main");
 
 var TEST_BASE;
-if (window.location === "chrome://browser/content/browser.xul") {
+if (window.location === AppConstants.BROWSER_CHROME_URL) {
   TEST_BASE = "chrome://mochitests/content/browser/devtools/client/webide/test/";
 } else {
   TEST_BASE = "chrome://mochitests/content/chrome/devtools/client/webide/test/";
 }
 
 Services.prefs.setBoolPref("devtools.webide.enabled", true);
 Services.prefs.setBoolPref("devtools.webide.enableLocalRuntime", true);
 
diff --git a/dom/base/test/test_openDialogChromeOnly.html b/dom/base/test/test_openDialogChromeOnly.html
--- a/dom/base/test/test_openDialogChromeOnly.html
+++ b/dom/base/test/test_openDialogChromeOnly.html
@@ -8,17 +8,17 @@ https://bugzilla.mozilla.org/show_bug.cg
   <title>Test for Bug 931768</title>
   <script type="application/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
   <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css"/>
   <script type="application/javascript">
 
   /** Test for Bug 931768 **/
 
   try {
-    openDialog("chrome://browser/content/browser.xul");
+    openDialog(AppConstants.BROWSER_CHROME_URL);
     ok(false, "Calling openDialog from unprivileged script should throw.");
   } catch (e) {
     ok(e instanceof ReferenceError,
        "openDialog shouldn't be available to unprivileged script.");
   }
 </script>
 </body>
 
diff --git a/testing/mochitest/BrowserTestUtils/BrowserTestUtils.jsm b/testing/mochitest/BrowserTestUtils/BrowserTestUtils.jsm
--- a/testing/mochitest/BrowserTestUtils/BrowserTestUtils.jsm
+++ b/testing/mochitest/BrowserTestUtils/BrowserTestUtils.jsm
@@ -572,17 +572,17 @@ var BrowserTestUtils = {
 
         if (!anyWindow) {
           Services.ww.unregisterNotification(observe);
         }
 
         if (url) {
           await this.waitForEvent(win, "DOMContentLoaded");
 
-          if (win.document.documentURI != "chrome://browser/content/browser.xul") {
+          if (win.document.documentURI != AppConstants.BROWSER_CHROME_URL) {
             return;
           }
         }
 
         let promises = [
           TestUtils.topicObserved("browser-delayed-startup-finished",
                                   subject => subject == win),
         ];
diff --git a/testing/mochitest/api.js b/testing/mochitest/api.js
--- a/testing/mochitest/api.js
+++ b/testing/mochitest/api.js
@@ -27,17 +27,17 @@ const windowTracker = {
   async observe(window, topic, data) {
     if (topic === "chrome-document-global-created") {
       await new Promise(resolve =>
         window.addEventListener("DOMContentLoaded", resolve, {once: true}));
 
       let {document} = window;
       let {documentURI} = document;
 
-      if (documentURI !== "chrome://browser/content/browser.xul") {
+      if (documentURI !== AppConstants.BROWSER_CHROME_URL) {
         return;
       }
       loadChromeScripts(window);
     }
   },
 };
 
 function androidStartup() {
diff --git a/testing/mochitest/browser-test.js b/testing/mochitest/browser-test.js
--- a/testing/mochitest/browser-test.js
+++ b/testing/mochitest/browser-test.js
@@ -360,17 +360,17 @@ function takeInstrumentation() {
   gSaveInstrumentationData = saveData;
 
   Services.ww.registerNotification((win, topic, data) => {
     if (topic != "domwindowopened") {
       return;
     }
 
     win.addEventListener("load", () => {
-      if (win.location.href != "chrome://browser/content/browser.xul") {
+      if (win.location.href != AppConstants.BROWSER_CHROME_URL) {
         return;
       }
 
       scanWindow(win);
       observeWindow(win);
     }, { once: true });
   });
 }
diff --git a/testing/talos/talos/bootstrap.js b/testing/talos/talos/bootstrap.js
--- a/testing/talos/talos/bootstrap.js
+++ b/testing/talos/talos/bootstrap.js
@@ -6,33 +6,34 @@
 //
 // The canonical version of this file lives in testing/talos/talos, and
 // is duplicated in a number of test add-ons in directories below it.
 // Please do not update one withput updating all.
 
 // Reads the chrome.manifest from a legacy non-restartless extension and loads
 // its overlays into the appropriate top-level windows.
 
+ChromeUtils.import("resource://gre/modules/AppConstants.jsm");
 ChromeUtils.import("resource://gre/modules/NetUtil.jsm");
 ChromeUtils.import("resource://gre/modules/Services.jsm");
 
 const windowTracker = {
   init() {
     Services.ww.registerNotification(this);
   },
 
   async observe(window, topic, data) {
     if (topic === "domwindowopened") {
       await new Promise(resolve =>
         window.addEventListener("DOMWindowCreated", resolve, {once: true}));
 
       let {document} = window;
       let {documentURI} = document;
 
-      if (documentURI !== "chrome://browser/content/browser.xul") {
+      if (documentURI !== AppConstants.BROWSER_CHROME_URL) {
         return;
       }
       initializeBrowser(window);
     }
   },
 };
 
 function readSync(uri) {
diff --git a/testing/talos/talos/pageloader/chrome/pageloader.js b/testing/talos/talos/pageloader/chrome/pageloader.js
--- a/testing/talos/talos/pageloader/chrome/pageloader.js
+++ b/testing/talos/talos/pageloader/chrome/pageloader.js
@@ -1,16 +1,17 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 /* import-globals-from report.js */
 /* eslint mozilla/avoid-Date-timing: "off" */
 
 ChromeUtils.import("resource://gre/modules/Services.jsm");
+ChromeUtils.import("resource://gre/modules/AppConstants.jsm");
 ChromeUtils.import("resource://gre/modules/E10SUtils.jsm");
 
 var NUM_CYCLES = 5;
 var numPageCycles = 1;
 
 var numRetries = 0;
 var maxRetries = 3;
 
@@ -176,17 +177,17 @@ function plInit() {
       .createInstance(Ci.nsISupportsString);
     blank.data = "about:blank";
 
     let toolbars = "all";
     if (!useBrowserChrome) {
       toolbars = "titlebar,resizable";
     }
 
-    browserWindow = Services.ww.openWindow(null, "chrome://browser/content/", "_blank",
+    browserWindow = Services.ww.openWindow(null, AppConstants.BROWSER_CHROME_URL, "_blank",
        `chrome,${toolbars},dialog=no,width=${winWidth},height=${winHeight}`, blank);
 
     gPaintWindow = browserWindow;
     // get our window out of the way
     window.resizeTo(10, 10);
 
     var browserLoadFunc = function(ev) {
       browserWindow.removeEventListener("load", browserLoadFunc, true);
diff --git a/testing/talos/talos/tests/devtools/addon/bootstrap.js b/testing/talos/talos/tests/devtools/addon/bootstrap.js
--- a/testing/talos/talos/tests/devtools/addon/bootstrap.js
+++ b/testing/talos/talos/tests/devtools/addon/bootstrap.js
@@ -6,32 +6,33 @@
 //
 // The canonical version of this file lives in testing/talos/talos, and
 // is duplicated in a number of test add-ons in directories below it.
 // Please do not update one withput updating all.
 
 // Reads the chrome.manifest from a legacy non-restartless extension and loads
 // its overlays into the appropriate top-level windows.
 
+ChromeUtils.import("resource://gre/modules/AppConstants.jsm");
 ChromeUtils.import("resource://gre/modules/Services.jsm");
 
 const windowTracker = {
   init() {
     Services.ww.registerNotification(this);
   },
 
   async observe(window, topic, data) {
     if (topic === "domwindowopened") {
       await new Promise(resolve =>
         window.addEventListener("DOMWindowCreated", resolve, {once: true}));
 
       let {document} = window;
       let {documentURI} = document;
 
-      if (documentURI !== "chrome://browser/content/browser.xul") {
+      if (documentURI !== AppConstants.BROWSER_CHROME_URL) {
         return;
       }
       initializeBrowser(window);
     }
   },
 };
 
 function startup(data, reason) {
diff --git a/testing/talos/talos/tests/tart/addon/bootstrap.js b/testing/talos/talos/tests/tart/addon/bootstrap.js
--- a/testing/talos/talos/tests/tart/addon/bootstrap.js
+++ b/testing/talos/talos/tests/tart/addon/bootstrap.js
@@ -6,33 +6,34 @@
 //
 // The canonical version of this file lives in testing/talos/talos, and
 // is duplicated in a number of test add-ons in directories below it.
 // Please do not update one withput updating all.
 
 // Reads the chrome.manifest from a legacy non-restartless extension and loads
 // its overlays into the appropriate top-level windows.
 
+ChromeUtils.import("resource://gre/modules/AppConstants.jsm");
 ChromeUtils.import("resource://gre/modules/NetUtil.jsm");
 ChromeUtils.import("resource://gre/modules/Services.jsm");
 
 const windowTracker = {
   init() {
     Services.ww.registerNotification(this);
   },
 
   async observe(window, topic, data) {
     if (topic === "domwindowopened") {
       await new Promise(resolve =>
         window.addEventListener("DOMWindowCreated", resolve, {once: true}));
 
       let {document} = window;
       let {documentURI} = document;
 
-      if (documentURI !== "chrome://browser/content/browser.xul") {
+      if (documentURI !== AppConstants.BROWSER_CHROME_URL) {
         return;
       }
       initializeBrowser(window);
     }
   },
 };
 
 function readSync(uri) {
