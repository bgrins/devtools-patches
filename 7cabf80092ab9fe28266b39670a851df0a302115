
# HG changeset patch
# User Emma Malysz <emalysz@mozilla.com>
# Date 1575314182 0
# Node ID 7cabf80092ab9fe28266b39670a851df0a302115
# Parent  7a96ae2e2bbee5dd40572f09749195c29db72418
Bug 1597847, rename remaining misc xul files from within /view, /gfx, /extensions, and /testing to .xhtml format r=marionette-reviewers,bgrins,whimboo,gbrown

Differential Revision: https://phabricator.services.mozilla.com/D54035

diff --git a/.eslintrc.js b/.eslintrc.js
--- a/.eslintrc.js
+++ b/.eslintrc.js
@@ -115,16 +115,17 @@ module.exports = {
     ],
     "rules": {
       "mozilla/reject-importGlobalProperties": "off",
       "mozilla/use-default-preference-values": "off",
       "mozilla/use-services": "off",
       "no-array-constructor": "off",
       "no-undef": "off",
       "no-unused-vars": "off",
+      "no-useless-concat": "off",
       "no-redeclare": "off",
       "no-global-assign": "off",
     }
   }, {
     "files": [
       "netwerk/cookie/test/browser/**",
       "netwerk/test/browser/**",
       "netwerk/test/mochitests/**",
@@ -355,16 +356,45 @@ module.exports = {
       "no-redeclare": "off",
       "no-sequences": "off",
       "no-shadow": "off",
       "no-unused-vars": "off",
       "no-useless-call": "off",
     }
   }, {
     "files": [
+      "testing/mochitest/browser-harness.xhtml",
+      "testing/mochitest/chrome/test_chromeGetTestFile.xhtml",
+      "testing/mochitest/chrome/test_sanityEventUtils.xhtml",
+      "testing/mochitest/chrome/test_sanityException.xhtml",
+      "testing/mochitest/chrome/test_sanityException2.xhtml",
+      "testing/mochitest/harness.xhtml",
+    ],
+    "rules": {
+      "dot-notation": "off",
+      "object-shorthand": "off",
+      "mozilla/use-services": "off",
+      "mozilla/no-compare-against-boolean-literals": "off",
+      "mozilla/no-useless-parameters": "off",
+      "mozilla/no-useless-removeEventListener": "off",
+      "mozilla/use-cc-etc": "off",
+      "consistent-return": "off",
+      "no-fallthrough": "off",
+      "no-nested-ternary": "off",
+      "no-redeclare": "off",
+      "no-sequences": "off",
+      "no-shadow": "off",
+      "no-throw-literal": "off",
+      "no-undef": "off",
+      "no-unsanitized/property": "off",
+      "no-unused-vars": "off",
+      "no-useless-call": "off",
+    }
+  }, {
+    "files": [
       "docshell/test/chrome/bug113934_window.xhtml",
       "docshell/test/chrome/bug215405_window.xhtml",
       "docshell/test/chrome/bug293235_window.xhtml",
       "docshell/test/chrome/bug294258_window.xhtml",
       "docshell/test/chrome/bug298622_window.xhtml",
       "docshell/test/chrome/bug301397_window.xhtml",
       "docshell/test/chrome/bug303267_window.xhtml",
       "docshell/test/chrome/bug311007_window.xhtml",
diff --git a/browser/base/content/test/static/browser_all_files_referenced.js b/browser/base/content/test/static/browser_all_files_referenced.js
--- a/browser/base/content/test/static/browser_all_files_referenced.js
+++ b/browser/base/content/test/static/browser_all_files_referenced.js
@@ -169,19 +169,19 @@ var whitelist = [
   // Bug 1339424 (wontfix?)
   {
     file: "chrome://browser/locale/taskbar.properties",
     platforms: ["linux", "macosx"],
   },
   // Bug 1356031 (only used by devtools)
   { file: "chrome://global/skin/icons/error-16.png" },
   // Bug 1344267
-  { file: "chrome://marionette/content/test.xul" },
+  { file: "chrome://marionette/content/test.xhtml" },
   { file: "chrome://marionette/content/test_dialog.properties" },
-  { file: "chrome://marionette/content/test_dialog.xul" },
+  { file: "chrome://marionette/content/test_dialog.xhtml" },
   // Bug 1348533
   {
     file: "chrome://mozapps/skin/downloads/buttons.png",
     platforms: ["macosx"],
   },
   {
     file: "chrome://mozapps/skin/downloads/downloadButtons.png",
     platforms: ["linux", "win"],
diff --git a/extensions/spellcheck/tests/chrome/chrome.ini b/extensions/spellcheck/tests/chrome/chrome.ini
--- a/extensions/spellcheck/tests/chrome/chrome.ini
+++ b/extensions/spellcheck/tests/chrome/chrome.ini
@@ -1,10 +1,10 @@
 [DEFAULT]
 skip-if = os == 'android'
 
-[test_add_remove_dictionaries.xul]
+[test_add_remove_dictionaries.xhtml]
 skip-if = verify
 support-files =
   base/base_utf.dic
   base/base_utf.aff
   map/maputf.dic
   map/maputf.aff
diff --git a/extensions/spellcheck/tests/chrome/test_add_remove_dictionaries.xul b/extensions/spellcheck/tests/chrome/test_add_remove_dictionaries.xhtml
rename from extensions/spellcheck/tests/chrome/test_add_remove_dictionaries.xul
rename to extensions/spellcheck/tests/chrome/test_add_remove_dictionaries.xhtml
diff --git a/gfx/tests/crashtests/593526.xul b/gfx/tests/crashtests/593526.xhtml
rename from gfx/tests/crashtests/593526.xul
rename to gfx/tests/crashtests/593526.xhtml
diff --git a/gfx/tests/crashtests/crashtests.list b/gfx/tests/crashtests/crashtests.list
--- a/gfx/tests/crashtests/crashtests.list
+++ b/gfx/tests/crashtests/crashtests.list
@@ -81,17 +81,17 @@ load 538065-1.html
 load 546870-1.html
 load 557348-1.html
 load 563740-1.html
 load 580100-1.html
 load 580212-1.html
 load 580233-1.html
 load 580719-1.html
 load 593526.html
-load chrome://reftest/content/crashtests/gfx/tests/crashtests/593526.xul
+load chrome://reftest/content/crashtests/gfx/tests/crashtests/593526.xhtml
 load 594654-1.xhtml
 load 595042-1.html
 load 595727-1.html
 load 624198.xhtml
 load 633322-1.html
 load 633453-1.html
 load 662467-1.html
 load 665218.html
diff --git a/testing/marionette/chrome/test.xul b/testing/marionette/chrome/test.xhtml
rename from testing/marionette/chrome/test.xul
rename to testing/marionette/chrome/test.xhtml
--- a/testing/marionette/chrome/test.xul
+++ b/testing/marionette/chrome/test.xhtml
@@ -14,14 +14,14 @@
 
       <vbox id="things">
         <checkbox id="testBox"  label="box" />
         <input xmlns="http://www.w3.org/1999/xhtml" id="textInput"  size="6" value="test" label="input" />
         <input xmlns="http://www.w3.org/1999/xhtml" id="textInput2"  size="6" value="test" label="input" />
         <input xmlns="http://www.w3.org/1999/xhtml" id="textInput3" class="asdf" size="6" value="test" label="input" />
       </vbox>
 
-      <iframe id="iframe" name="iframename" src="chrome://marionette/content/test2.xul"/>
-      <iframe id="iframe" name="iframename" src="chrome://marionette/content/test_nested_iframe.xul"/>
+      <iframe id="iframe" name="iframename" src="chrome://marionette/content/test2.xhtml"/>
+      <iframe id="iframe" name="iframename" src="chrome://marionette/content/test_nested_iframe.xhtml"/>
       <hbox id="testXulBox"/>
-      <browser id='aBrowser' src="chrome://marionette/content/test2.xul"/>
+      <browser id='aBrowser' src="chrome://marionette/content/test2.xhtml"/>
     </dialog>
 </window>
diff --git a/testing/marionette/chrome/test2.xul b/testing/marionette/chrome/test2.xhtml
rename from testing/marionette/chrome/test2.xul
rename to testing/marionette/chrome/test2.xhtml
diff --git a/testing/marionette/chrome/test_dialog.xul b/testing/marionette/chrome/test_dialog.xhtml
rename from testing/marionette/chrome/test_dialog.xul
rename to testing/marionette/chrome/test_dialog.xhtml
diff --git a/testing/marionette/chrome/test_nested_iframe.xul b/testing/marionette/chrome/test_nested_iframe.xhtml
rename from testing/marionette/chrome/test_nested_iframe.xul
rename to testing/marionette/chrome/test_nested_iframe.xhtml
--- a/testing/marionette/chrome/test_nested_iframe.xul
+++ b/testing/marionette/chrome/test_nested_iframe.xhtml
@@ -1,9 +1,9 @@
 <?xml version="1.0"?>
 <!-- This Source Code Form is subject to the terms of the Mozilla Public
    - License, v. 2.0. If a copy of the MPL was not distributed with this
    - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
 
 <!DOCTYPE window [
 ]>
 
-  <iframe id="iframe" name="iframename" src="test2.xul"/>
+  <iframe id="iframe" name="iframename" src="test2.xhtml"/>
diff --git a/testing/marionette/harness/marionette_harness/tests/unit/test_checkbox_chrome.py b/testing/marionette/harness/marionette_harness/tests/unit/test_checkbox_chrome.py
--- a/testing/marionette/harness/marionette_harness/tests/unit/test_checkbox_chrome.py
+++ b/testing/marionette/harness/marionette_harness/tests/unit/test_checkbox_chrome.py
@@ -11,17 +11,17 @@ from marionette_harness import Marionett
 
 class TestSelectedChrome(WindowManagerMixin, MarionetteTestCase):
 
     def setUp(self):
         super(TestSelectedChrome, self).setUp()
 
         self.marionette.set_context("chrome")
 
-        new_window = self.open_chrome_window("chrome://marionette/content/test.xul")
+        new_window = self.open_chrome_window("chrome://marionette/content/test.xhtml")
         self.marionette.switch_to_window(new_window)
 
     def tearDown(self):
         try:
             self.close_all_windows()
         finally:
             super(TestSelectedChrome, self).tearDown()
 
diff --git a/testing/marionette/harness/marionette_harness/tests/unit/test_click_chrome.py b/testing/marionette/harness/marionette_harness/tests/unit/test_click_chrome.py
--- a/testing/marionette/harness/marionette_harness/tests/unit/test_click_chrome.py
+++ b/testing/marionette/harness/marionette_harness/tests/unit/test_click_chrome.py
@@ -17,17 +17,17 @@ class TestClickChrome(WindowManagerMixin
         self.marionette.set_context("chrome")
 
     def tearDown(self):
         self.close_all_windows()
 
         super(TestClickChrome, self).tearDown()
 
     def test_click(self):
-        win = self.open_chrome_window("chrome://marionette/content/test.xul")
+        win = self.open_chrome_window("chrome://marionette/content/test.xhtml")
         self.marionette.switch_to_window(win)
 
         def checked():
             return self.marionette.execute_script(
                 "return arguments[0].checked",
                 script_args=[box])
 
         box = self.marionette.find_element(By.ID, "testBox")
diff --git a/testing/marionette/harness/marionette_harness/tests/unit/test_element_state_chrome.py b/testing/marionette/harness/marionette_harness/tests/unit/test_element_state_chrome.py
--- a/testing/marionette/harness/marionette_harness/tests/unit/test_element_state_chrome.py
+++ b/testing/marionette/harness/marionette_harness/tests/unit/test_element_state_chrome.py
@@ -11,17 +11,17 @@ from marionette_harness import Marionett
 
 class TestElementState(WindowManagerMixin, MarionetteTestCase):
 
     def setUp(self):
         super(TestElementState, self).setUp()
 
         self.marionette.set_context("chrome")
 
-        self.win = self.open_chrome_window("chrome://marionette/content/test.xul")
+        self.win = self.open_chrome_window("chrome://marionette/content/test.xhtml")
         self.marionette.switch_to_window(self.win)
 
     def tearDown(self):
         self.close_all_windows()
 
         super(TestElementState, self).tearDown()
 
     @skip("Switched off in bug 896043, and to be turned on in bug 896046")
diff --git a/testing/marionette/harness/marionette_harness/tests/unit/test_elementsize_chrome.py b/testing/marionette/harness/marionette_harness/tests/unit/test_elementsize_chrome.py
--- a/testing/marionette/harness/marionette_harness/tests/unit/test_elementsize_chrome.py
+++ b/testing/marionette/harness/marionette_harness/tests/unit/test_elementsize_chrome.py
@@ -11,17 +11,17 @@ from marionette_harness import Marionett
 
 class TestElementSizeChrome(WindowManagerMixin, MarionetteTestCase):
 
     def setUp(self):
         super(TestElementSizeChrome, self).setUp()
 
         self.marionette.set_context("chrome")
 
-        new_window = self.open_chrome_window("chrome://marionette/content/test2.xul")
+        new_window = self.open_chrome_window("chrome://marionette/content/test2.xhtml")
         self.marionette.switch_to_window(new_window)
 
     def tearDown(self):
         self.close_all_windows()
         super(TestElementSizeChrome, self).tearDown()
 
     def testShouldReturnTheSizeOfAnInput(self):
         shrinko = self.marionette.find_element(By.ID, 'textInput')
diff --git a/testing/marionette/harness/marionette_harness/tests/unit/test_execute_script.py b/testing/marionette/harness/marionette_harness/tests/unit/test_execute_script.py
--- a/testing/marionette/harness/marionette_harness/tests/unit/test_execute_script.py
+++ b/testing/marionette/harness/marionette_harness/tests/unit/test_execute_script.py
@@ -368,17 +368,17 @@ class TestExecuteChrome(WindowManagerMix
         super(TestExecuteChrome, self).tearDown()
 
     def test_permission(self):
         self.marionette.execute_script(
             "Components.classes['@mozilla.org/preferences-service;1']")
 
     def test_unmarshal_element_collection(self):
         try:
-            win = self.open_chrome_window("chrome://marionette/content/test.xul")
+            win = self.open_chrome_window("chrome://marionette/content/test.xhtml")
             self.marionette.switch_to_window(win)
 
             expected = self.marionette.find_elements(By.TAG_NAME, "input")
             actual = self.marionette.execute_script(
                 "return document.querySelectorAll('input')")
             self.assertTrue(len(expected) > 0)
             self.assertEqual(expected, actual)
 
diff --git a/testing/marionette/harness/marionette_harness/tests/unit/test_findelement_chrome.py b/testing/marionette/harness/marionette_harness/tests/unit/test_findelement_chrome.py
--- a/testing/marionette/harness/marionette_harness/tests/unit/test_findelement_chrome.py
+++ b/testing/marionette/harness/marionette_harness/tests/unit/test_findelement_chrome.py
@@ -13,17 +13,17 @@ from marionette_harness import Marionett
 
 class TestElementsChrome(WindowManagerMixin, MarionetteTestCase):
 
     def setUp(self):
         super(TestElementsChrome, self).setUp()
 
         self.marionette.set_context("chrome")
 
-        win = self.open_chrome_window("chrome://marionette/content/test.xul")
+        win = self.open_chrome_window("chrome://marionette/content/test.xhtml")
         self.marionette.switch_to_window(win)
 
     def tearDown(self):
         self.close_all_windows()
 
         super(TestElementsChrome, self).tearDown()
 
     def test_id(self):
diff --git a/testing/marionette/harness/marionette_harness/tests/unit/test_get_current_url_chrome.py b/testing/marionette/harness/marionette_harness/tests/unit/test_get_current_url_chrome.py
--- a/testing/marionette/harness/marionette_harness/tests/unit/test_get_current_url_chrome.py
+++ b/testing/marionette/harness/marionette_harness/tests/unit/test_get_current_url_chrome.py
@@ -25,17 +25,17 @@ class TestGetCurrentUrlChrome(WindowMana
         with self.marionette.using_context("content"):
             self.marionette.navigate(url)
             self.assertEqual(self.marionette.get_url(), url)
 
         chrome_url = self.marionette.execute_script("return window.location.href;")
         self.assertEqual(self.marionette.get_url(), chrome_url)
 
     def test_no_browser_window(self):
-        win = self.open_chrome_window("chrome://marionette/content/test.xul")
+        win = self.open_chrome_window("chrome://marionette/content/test.xhtml")
         self.marionette.switch_to_window(win)
 
         chrome_url = self.marionette.execute_script("return window.location.href;")
         self.assertEqual(self.marionette.get_url(), chrome_url)
 
         # With no tabbrowser available an exception will be thrown
         with self.assertRaises(NoSuchWindowException):
             with self.marionette.using_context("content"):
diff --git a/testing/marionette/harness/marionette_harness/tests/unit/test_pagesource_chrome.py b/testing/marionette/harness/marionette_harness/tests/unit/test_pagesource_chrome.py
--- a/testing/marionette/harness/marionette_harness/tests/unit/test_pagesource_chrome.py
+++ b/testing/marionette/harness/marionette_harness/tests/unit/test_pagesource_chrome.py
@@ -8,17 +8,17 @@ from marionette_harness import Marionett
 
 
 class TestPageSourceChrome(WindowManagerMixin, MarionetteTestCase):
 
     def setUp(self):
         super(TestPageSourceChrome, self).setUp()
         self.marionette.set_context("chrome")
 
-        new_window = self.open_chrome_window("chrome://marionette/content/test.xul")
+        new_window = self.open_chrome_window("chrome://marionette/content/test.xhtml")
         self.marionette.switch_to_window(new_window)
 
     def tearDown(self):
         self.close_all_windows()
         super(TestPageSourceChrome, self).tearDown()
 
     def testShouldReturnXULDetails(self):
         source = self.marionette.page_source
diff --git a/testing/marionette/harness/marionette_harness/tests/unit/test_screenshot.py b/testing/marionette/harness/marionette_harness/tests/unit/test_screenshot.py
--- a/testing/marionette/harness/marionette_harness/tests/unit/test_screenshot.py
+++ b/testing/marionette/harness/marionette_harness/tests/unit/test_screenshot.py
@@ -132,17 +132,17 @@ class TestScreenCaptureChrome(WindowMana
     def window_dimensions(self):
         return tuple(self.marionette.execute_script("""
             let el = document.documentElement;
             let rect = el.getBoundingClientRect();
             return [rect.width, rect.height];
             """))
 
     def open_dialog(self):
-        return self.open_chrome_window("chrome://marionette/content/test_dialog.xul")
+        return self.open_chrome_window("chrome://marionette/content/test_dialog.xhtml")
 
     def test_capture_different_context(self):
         """Check that screenshots in content and chrome are different."""
         with self.marionette.using_context("content"):
             screenshot_content = self.marionette.screenshot()
         screenshot_chrome = self.marionette.screenshot()
         self.assertNotEqual(screenshot_content, screenshot_chrome)
 
diff --git a/testing/marionette/harness/marionette_harness/tests/unit/test_switch_frame_chrome.py b/testing/marionette/harness/marionette_harness/tests/unit/test_switch_frame_chrome.py
--- a/testing/marionette/harness/marionette_harness/tests/unit/test_switch_frame_chrome.py
+++ b/testing/marionette/harness/marionette_harness/tests/unit/test_switch_frame_chrome.py
@@ -10,43 +10,43 @@ from marionette_harness import Marionett
 
 
 class TestSwitchFrameChrome(WindowManagerMixin, MarionetteTestCase):
 
     def setUp(self):
         super(TestSwitchFrameChrome, self).setUp()
         self.marionette.set_context("chrome")
 
-        new_window = self.open_chrome_window("chrome://marionette/content/test.xul")
+        new_window = self.open_chrome_window("chrome://marionette/content/test.xhtml")
         self.marionette.switch_to_window(new_window)
         self.assertNotEqual(self.start_window, self.marionette.current_chrome_window_handle)
 
     def tearDown(self):
         self.close_all_windows()
         super(TestSwitchFrameChrome, self).tearDown()
 
     def test_switch_simple(self):
-        self.assertIn("test.xul", self.marionette.get_url(), "Initial navigation has failed")
+        self.assertIn("test.xhtml", self.marionette.get_url(), "Initial navigation has failed")
         self.marionette.switch_to_frame(0)
-        self.assertIn("test2.xul", self.marionette.get_url(),"Switching by index failed")
+        self.assertIn("test2.xhtml", self.marionette.get_url(),"Switching by index failed")
         self.marionette.switch_to_frame()
         self.assertEqual(None, self.marionette.get_active_frame(), "Switiching by null failed")
-        self.assertIn("test.xul", self.marionette.get_url(), "Switching by null failed")
+        self.assertIn("test.xhtml", self.marionette.get_url(), "Switching by null failed")
         self.marionette.switch_to_frame("iframe")
-        self.assertIn("test2.xul", self.marionette.get_url(), "Switching by name failed")
+        self.assertIn("test2.xhtml", self.marionette.get_url(), "Switching by name failed")
         self.marionette.switch_to_frame()
-        self.assertIn("test.xul", self.marionette.get_url(), "Switching by null failed")
+        self.assertIn("test.xhtml", self.marionette.get_url(), "Switching by null failed")
         self.marionette.switch_to_frame("iframename")
-        self.assertIn("test2.xul", self.marionette.get_url(), "Switching by name failed")
+        self.assertIn("test2.xhtml", self.marionette.get_url(), "Switching by name failed")
         iframe_element = self.marionette.get_active_frame()
         self.marionette.switch_to_frame()
-        self.assertIn("test.xul", self.marionette.get_url(), "Switching by null failed")
+        self.assertIn("test.xhtml", self.marionette.get_url(), "Switching by null failed")
         self.marionette.switch_to_frame(iframe_element)
-        self.assertIn("test2.xul", self.marionette.get_url(), "Switching by element failed")
+        self.assertIn("test2.xhtml", self.marionette.get_url(), "Switching by element failed")
 
     def test_stack_trace(self):
-        self.assertIn("test.xul", self.marionette.get_url(), "Initial navigation has failed")
+        self.assertIn("test.xhtml", self.marionette.get_url(), "Initial navigation has failed")
         self.marionette.switch_to_frame(0)
         self.assertRaises(JavascriptException, self.marionette.execute_async_script, "foo();")
         try:
             self.marionette.execute_async_script("foo();")
         except JavascriptException as e:
             self.assertIn("foo", e.message)
diff --git a/testing/marionette/harness/marionette_harness/tests/unit/test_title_chrome.py b/testing/marionette/harness/marionette_harness/tests/unit/test_title_chrome.py
--- a/testing/marionette/harness/marionette_harness/tests/unit/test_title_chrome.py
+++ b/testing/marionette/harness/marionette_harness/tests/unit/test_title_chrome.py
@@ -15,14 +15,14 @@ class TestTitleChrome(WindowManagerMixin
         self.marionette.set_context("chrome")
 
     def tearDown(self):
         self.close_all_windows()
 
         super(TestTitleChrome, self).tearDown()
 
     def test_get_chrome_title(self):
-        win = self.open_chrome_window("chrome://marionette/content/test.xul")
+        win = self.open_chrome_window("chrome://marionette/content/test.xhtml")
         self.marionette.switch_to_window(win)
 
         title = self.marionette.execute_script(
             "return window.document.documentElement.getAttribute('title');")
         self.assertEqual(title, self.marionette.title)
diff --git a/testing/marionette/harness/marionette_harness/tests/unit/test_window_close_chrome.py b/testing/marionette/harness/marionette_harness/tests/unit/test_window_close_chrome.py
--- a/testing/marionette/harness/marionette_harness/tests/unit/test_window_close_chrome.py
+++ b/testing/marionette/harness/marionette_harness/tests/unit/test_window_close_chrome.py
@@ -26,17 +26,17 @@ class TestCloseWindow(WindowManagerMixin
 
         self.assertNotIn(new_window, self.marionette.window_handles)
         chrome_window_handles = self.marionette.close_chrome_window()
         self.assertNotIn(new_window, chrome_window_handles)
         self.assertListEqual(self.start_windows, chrome_window_handles)
         self.assertNotIn(new_window, self.marionette.window_handles)
 
     def test_close_chrome_window_for_non_browser_window(self):
-        win = self.open_chrome_window("chrome://marionette/content/test.xul")
+        win = self.open_chrome_window("chrome://marionette/content/test.xhtml")
         self.marionette.switch_to_window(win)
 
         self.assertIn(win, self.marionette.chrome_window_handles)
         self.assertNotIn(win, self.marionette.window_handles)
         chrome_window_handles = self.marionette.close_chrome_window()
         self.assertNotIn(win, chrome_window_handles)
         self.assertListEqual(self.start_windows, chrome_window_handles)
         self.assertNotIn(win, self.marionette.chrome_window_handles)
diff --git a/testing/marionette/harness/marionette_harness/tests/unit/test_window_close_content.py b/testing/marionette/harness/marionette_harness/tests/unit/test_window_close_content.py
--- a/testing/marionette/harness/marionette_harness/tests/unit/test_window_close_content.py
+++ b/testing/marionette/harness/marionette_harness/tests/unit/test_window_close_content.py
@@ -29,17 +29,17 @@ class TestCloseWindow(WindowManagerMixin
 
         self.assertIn(new_window, self.marionette.chrome_window_handles)
         chrome_window_handles = self.marionette.close_chrome_window()
         self.assertNotIn(new_window, chrome_window_handles)
         self.assertListEqual(self.start_windows, chrome_window_handles)
         self.assertNotIn(new_window, self.marionette.window_handles)
 
     def test_close_chrome_window_for_non_browser_window(self):
-        new_window = self.open_chrome_window("chrome://marionette/content/test.xul")
+        new_window = self.open_chrome_window("chrome://marionette/content/test.xhtml")
         self.marionette.switch_to_window(new_window)
 
         self.assertIn(new_window, self.marionette.chrome_window_handles)
         self.assertNotIn(new_window, self.marionette.window_handles)
         chrome_window_handles = self.marionette.close_chrome_window()
         self.assertNotIn(new_window, chrome_window_handles)
         self.assertListEqual(self.start_windows, chrome_window_handles)
         self.assertNotIn(new_window, self.marionette.window_handles)
diff --git a/testing/marionette/harness/marionette_harness/tests/unit/test_window_handles_chrome.py b/testing/marionette/harness/marionette_harness/tests/unit/test_window_handles_chrome.py
--- a/testing/marionette/harness/marionette_harness/tests/unit/test_window_handles_chrome.py
+++ b/testing/marionette/harness/marionette_harness/tests/unit/test_window_handles_chrome.py
@@ -11,17 +11,17 @@ from marionette_driver import errors
 from marionette_harness import MarionetteTestCase, WindowManagerMixin
 
 
 class TestWindowHandles(WindowManagerMixin, MarionetteTestCase):
 
     def setUp(self):
         super(TestWindowHandles, self).setUp()
 
-        self.xul_dialog = "chrome://marionette/content/test_dialog.xul"
+        self.chrome_dialog = "chrome://marionette/content/test_dialog.xhtml"
 
         self.marionette.set_context("chrome")
 
     def tearDown(self):
         self.close_all_windows()
         self.close_all_tabs()
 
         super(TestWindowHandles, self).tearDown()
@@ -41,43 +41,43 @@ class TestWindowHandles(WindowManagerMix
 
     def test_chrome_window_handles_with_scopes(self):
         new_browser = self.open_window()
         self.assert_window_handles()
         self.assertEqual(len(self.marionette.chrome_window_handles), len(self.start_windows) + 1)
         self.assertIn(new_browser, self.marionette.chrome_window_handles)
         self.assertEqual(self.marionette.current_chrome_window_handle, self.start_window)
 
-        new_dialog = self.open_chrome_window(self.xul_dialog)
+        new_dialog = self.open_chrome_window(self.chrome_dialog)
         self.assert_window_handles()
         self.assertEqual(len(self.marionette.chrome_window_handles), len(self.start_windows) + 2)
         self.assertIn(new_dialog, self.marionette.chrome_window_handles)
         self.assertEqual(self.marionette.current_chrome_window_handle, self.start_window)
 
         chrome_window_handles_in_chrome_scope = self.marionette.chrome_window_handles
         window_handles_in_chrome_scope = self.marionette.window_handles
 
         with self.marionette.using_context("content"):
             self.assertEqual(self.marionette.chrome_window_handles,
                              chrome_window_handles_in_chrome_scope)
             self.assertEqual(self.marionette.window_handles,
                              window_handles_in_chrome_scope)
 
     def test_chrome_window_handles_after_opening_new_chrome_window(self):
-        new_window = self.open_chrome_window(self.xul_dialog)
+        new_window = self.open_chrome_window(self.chrome_dialog)
         self.assert_window_handles()
         self.assertEqual(len(self.marionette.chrome_window_handles), len(self.start_windows) + 1)
         self.assertIn(new_window, self.marionette.chrome_window_handles)
         self.assertEqual(self.marionette.current_chrome_window_handle, self.start_window)
 
         # Check that the new chrome window has the correct URL loaded
         self.marionette.switch_to_window(new_window)
         self.assert_window_handles()
         self.assertEqual(self.marionette.current_chrome_window_handle, new_window)
-        self.assertEqual(self.marionette.get_url(), self.xul_dialog)
+        self.assertEqual(self.marionette.get_url(), self.chrome_dialog)
 
         # Close the chrome window, and carry on in our original window.
         self.marionette.close_chrome_window()
         self.assert_window_handles()
         self.assertEqual(len(self.marionette.chrome_window_handles), len(self.start_windows))
         self.assertNotIn(new_window, self.marionette.chrome_window_handles)
 
         self.marionette.switch_to_window(self.start_window)
@@ -153,25 +153,25 @@ class TestWindowHandles(WindowManagerMix
         self.assertEqual(len(self.marionette.window_handles), len(self.start_tabs))
         self.assertNotIn(new_tab, self.marionette.window_handles)
 
         self.marionette.switch_to_window(self.start_tab)
         self.assert_window_handles()
         self.assertEqual(self.marionette.current_window_handle, self.start_tab)
 
     def test_window_handles_after_opening_new_chrome_window(self):
-        new_window = self.open_chrome_window(self.xul_dialog)
+        new_window = self.open_chrome_window(self.chrome_dialog)
         self.assert_window_handles()
         self.assertEqual(len(self.marionette.window_handles), len(self.start_tabs))
         self.assertNotIn(new_window, self.marionette.window_handles)
         self.assertEqual(self.marionette.current_window_handle, self.start_tab)
 
         self.marionette.switch_to_window(new_window)
         self.assert_window_handles()
-        self.assertEqual(self.marionette.get_url(), self.xul_dialog)
+        self.assertEqual(self.marionette.get_url(), self.chrome_dialog)
 
         # Check that the opened dialog is not accessible via window handles
         with self.assertRaises(errors.NoSuchWindowException):
             self.marionette.current_window_handle
         with self.assertRaises(errors.NoSuchWindowException):
             self.marionette.close()
 
         # Close the dialog and carry on in our original tab.
diff --git a/testing/marionette/harness/marionette_harness/tests/unit/test_window_handles_content.py b/testing/marionette/harness/marionette_harness/tests/unit/test_window_handles_content.py
--- a/testing/marionette/harness/marionette_harness/tests/unit/test_window_handles_content.py
+++ b/testing/marionette/harness/marionette_harness/tests/unit/test_window_handles_content.py
@@ -16,17 +16,17 @@ def inline(doc):
     return "data:text/html;charset=utf-8,{}".format(urllib.quote(doc))
 
 
 class TestWindowHandles(WindowManagerMixin, MarionetteTestCase):
 
     def setUp(self):
         super(TestWindowHandles, self).setUp()
 
-        self.xul_dialog = "chrome://marionette/content/test_dialog.xul"
+        self.chrome_dialog = "chrome://marionette/content/test_dialog.xhtml"
 
     def tearDown(self):
         self.close_all_tabs()
 
         super(TestWindowHandles, self).tearDown()
 
     def assert_window_handles(self):
         try:
@@ -74,17 +74,17 @@ class TestWindowHandles(WindowManagerMix
         self.assert_window_handles()
         self.assertEqual(len(self.marionette.window_handles), len(self.start_tabs))
 
         self.marionette.switch_to_window(self.start_tab)
         self.assert_window_handles()
         self.assertEqual(self.marionette.current_window_handle, self.start_tab)
 
     def tst_window_handles_after_opening_new_non_browser_window(self):
-        new_window = self.open_chrome_window(self.xul_dialog)
+        new_window = self.open_chrome_window(self.chrome_dialog)
         self.assert_window_handles()
         self.assertEqual(len(self.marionette.window_handles), len(self.start_tabs))
         self.assertEqual(self.marionette.current_window_handle, self.start_tab)
         self.assertNotIn(new_window, self.marionette.window_handles)
 
         self.marionette.switch_to_window(new_window)
         self.assert_window_handles()
 
diff --git a/testing/marionette/harness/marionette_harness/tests/unit/test_window_management.py b/testing/marionette/harness/marionette_harness/tests/unit/test_window_management.py
--- a/testing/marionette/harness/marionette_harness/tests/unit/test_window_management.py
+++ b/testing/marionette/harness/marionette_harness/tests/unit/test_window_management.py
@@ -34,17 +34,17 @@ class TestNoSuchWindowContent(WindowMana
                     self.marionette.current_window_handle
 
         self.marionette.switch_to_window(self.start_window)
 
         with self.assertRaises(NoSuchWindowException):
             self.marionette.switch_to_window(new_window)
 
     def test_closed_chrome_window_while_in_frame(self):
-        new_window = self.open_chrome_window("chrome://marionette/content/test.xul")
+        new_window = self.open_chrome_window("chrome://marionette/content/test.xhtml")
         self.marionette.switch_to_window(new_window)
         with self.marionette.using_context("chrome"):
             self.marionette.switch_to_frame("iframe")
         self.marionette.close_chrome_window()
 
         with self.assertRaises(NoSuchWindowException):
             self.marionette.current_window_handle
         with self.assertRaises(NoSuchWindowException):
diff --git a/testing/marionette/harness/marionette_harness/tests/unit/test_window_status_content.py b/testing/marionette/harness/marionette_harness/tests/unit/test_window_status_content.py
--- a/testing/marionette/harness/marionette_harness/tests/unit/test_window_status_content.py
+++ b/testing/marionette/harness/marionette_harness/tests/unit/test_window_status_content.py
@@ -34,17 +34,17 @@ class TestNoSuchWindowContent(WindowMana
                     self.marionette.current_window_handle
 
         self.marionette.switch_to_window(self.start_window)
 
         with self.assertRaises(NoSuchWindowException):
             self.marionette.switch_to_window(new_window)
 
     def test_closed_chrome_window_while_in_frame(self):
-        new_window = self.open_chrome_window("chrome://marionette/content/test.xul")
+        new_window = self.open_chrome_window("chrome://marionette/content/test.xhtml")
         self.marionette.switch_to_window(new_window)
 
         with self.marionette.using_context("chrome"):
             self.marionette.switch_to_frame("iframe")
         self.marionette.close_chrome_window()
 
         with self.assertRaises(NoSuchWindowException):
             self.marionette.current_window_handle
diff --git a/testing/marionette/harness/marionette_harness/tests/unit/test_window_type_chrome.py b/testing/marionette/harness/marionette_harness/tests/unit/test_window_type_chrome.py
--- a/testing/marionette/harness/marionette_harness/tests/unit/test_window_type_chrome.py
+++ b/testing/marionette/harness/marionette_harness/tests/unit/test_window_type_chrome.py
@@ -15,14 +15,14 @@ class TestWindowTypeChrome(WindowManager
         self.marionette.set_context("chrome")
 
     def tearDown(self):
         self.close_all_windows()
 
         super(TestWindowTypeChrome, self).tearDown()
 
     def test_get_window_type(self):
-        win = self.open_chrome_window("chrome://marionette/content/test.xul")
+        win = self.open_chrome_window("chrome://marionette/content/test.xhtml")
         self.marionette.switch_to_window(win)
 
         window_type = self.marionette.execute_script(
             "return window.document.documentElement.getAttribute('windowtype');")
         self.assertEqual(window_type, self.marionette.get_window_type())
diff --git a/testing/marionette/jar.mn b/testing/marionette/jar.mn
--- a/testing/marionette/jar.mn
+++ b/testing/marionette/jar.mn
@@ -28,24 +28,24 @@ marionette.jar:
   content/log.js (log.js)
   content/message.js (message.js)
   content/modal.js (modal.js)
   content/navigate.js (navigate.js)
   content/packets.js (packets.js)
   content/prefs.js (prefs.js)
   content/proxy.js (proxy.js)
   content/reftest.js (reftest.js)
-  content/reftest.xul (reftest.xul)
+  content/reftest.xhtml (reftest.xhtml)
   content/server.js (server.js)
   content/stream-utils.js (stream-utils.js)
   content/sync.js (sync.js)
   content/transport.js (transport.js)
 #ifdef ENABLE_TESTS
-  content/test.xul (chrome/test.xul)
-  content/test2.xul (chrome/test2.xul)
+  content/test.xhtml (chrome/test.xhtml)
+  content/test2.xhtml (chrome/test2.xhtml)
   content/test_dialog.dtd (chrome/test_dialog.dtd)
   content/test_dialog.properties (chrome/test_dialog.properties)
-  content/test_dialog.xul (chrome/test_dialog.xul)
-  content/test_nested_iframe.xul (chrome/test_nested_iframe.xul)
+  content/test_dialog.xhtml (chrome/test_dialog.xhtml)
+  content/test_nested_iframe.xhtml (chrome/test_nested_iframe.xhtml)
 #ifdef MOZ_CODE_COVERAGE
   content/PerTestCoverageUtils.jsm (../../tools/code-coverage/PerTestCoverageUtils.jsm)
 #endif
 #endif
diff --git a/testing/marionette/reftest.js b/testing/marionette/reftest.js
--- a/testing/marionette/reftest.js
+++ b/testing/marionette/reftest.js
@@ -132,17 +132,17 @@ reftest.Runner = class {
     return reftestWin;
   }
 
   async openWindow(width, height) {
     assert.positiveInteger(width);
     assert.positiveInteger(height);
 
     let reftestWin = this.parentWindow.open(
-      "chrome://marionette/content/reftest.xul",
+      "chrome://marionette/content/reftest.xhtml",
       "reftest",
       `chrome,height=${height},width=${width}`
     );
 
     await new Promise(resolve => {
       reftestWin.addEventListener("load", resolve, { once: true });
     });
     return reftestWin;
diff --git a/testing/marionette/reftest.xul b/testing/marionette/reftest.xhtml
rename from testing/marionette/reftest.xul
rename to testing/marionette/reftest.xhtml
diff --git a/testing/mochitest/baselinecoverage/chrome/chrome.ini b/testing/mochitest/baselinecoverage/chrome/chrome.ini
--- a/testing/mochitest/baselinecoverage/chrome/chrome.ini
+++ b/testing/mochitest/baselinecoverage/chrome/chrome.ini
@@ -1,4 +1,4 @@
 [DEFAULT]
 
-[test_baselinecoverage.xul]
+[test_baselinecoverage.xhtml]
 run-if = ccov && verify
\ No newline at end of file
diff --git a/testing/mochitest/baselinecoverage/chrome/test_baselinecoverage.xul b/testing/mochitest/baselinecoverage/chrome/test_baselinecoverage.xhtml
rename from testing/mochitest/baselinecoverage/chrome/test_baselinecoverage.xul
rename to testing/mochitest/baselinecoverage/chrome/test_baselinecoverage.xhtml
diff --git a/testing/mochitest/browser-harness.xul b/testing/mochitest/browser-harness.xhtml
rename from testing/mochitest/browser-harness.xul
rename to testing/mochitest/browser-harness.xhtml
--- a/testing/mochitest/browser-harness.xul
+++ b/testing/mochitest/browser-harness.xhtml
@@ -67,17 +67,17 @@
 
     var gDumper = {
       get fileLogger() {
         let logger = null;
         if (gConfig.logFile) {
           try {
             logger = new MozillaFileLogger(gConfig.logFile)
           } catch (ex) {
-            dump("TEST-UNEXPECTED-FAIL | (browser-harness.xul) | " +
+            dump("TEST-UNEXPECTED-FAIL | (browser-harness.xhtml) | " +
                  "Error trying to log to " + gConfig.logFile + ": " + ex + "\n");
           }
         }
         delete this.fileLogger;
         return this.fileLogger = logger;
       },
       structuredLogger: TestRunner.structuredLogger,
       dump: function (str) {
diff --git a/testing/mochitest/browser-test.js b/testing/mochitest/browser-test.js
--- a/testing/mochitest/browser-test.js
+++ b/testing/mochitest/browser-test.js
@@ -92,17 +92,17 @@ function testInit() {
 
     var sstring = Cc["@mozilla.org/supports-string;1"].createInstance(
       Ci.nsISupportsString
     );
     sstring.data = location.search;
 
     Services.ww.openWindow(
       window,
-      "chrome://mochikit/content/browser-harness.xul",
+      "chrome://mochikit/content/browser-harness.xhtml",
       "browserTest",
       "chrome,centerscreen,dialog=no,resizable,titlebar,toolbar=no,width=800,height=600",
       sstring
     );
   } else {
     // This code allows us to redirect without requiring specialpowers for chrome and a11y tests.
     let messageHandler = function(m) {
       // eslint-disable-next-line no-undef
diff --git a/testing/mochitest/chrome/chrome.ini b/testing/mochitest/chrome/chrome.ini
--- a/testing/mochitest/chrome/chrome.ini
+++ b/testing/mochitest/chrome/chrome.ini
@@ -1,18 +1,18 @@
 [DEFAULT]
 prefs =
   plugin.load_flash_only=false
 skip-if = os == 'android'
 support-files = test-dir/test-file
 
-[test_sample.xul]
-[test_sanityEventUtils.xul]
+[test_sample.xhtml]
+[test_sanityEventUtils.xhtml]
 [test_sanityPluginUtils.html]
-[test_sanityException.xul]
-[test_sanityException2.xul]
-[test_sanityManifest.xul]
+[test_sanityException.xhtml]
+[test_sanityException2.xhtml]
+[test_sanityManifest.xhtml]
 fail-if = true
-[test_sanityManifest_pf.xul]
+[test_sanityManifest_pf.xhtml]
 fail-if = true
-[test_chromeGetTestFile.xul]
-[test_tasks_skip.xul]
-[test_tasks_skipall.xul]
+[test_chromeGetTestFile.xhtml]
+[test_tasks_skip.xhtml]
+[test_tasks_skipall.xhtml]
diff --git a/testing/mochitest/chrome/test_chromeGetTestFile.xul b/testing/mochitest/chrome/test_chromeGetTestFile.xhtml
rename from testing/mochitest/chrome/test_chromeGetTestFile.xul
rename to testing/mochitest/chrome/test_chromeGetTestFile.xhtml
--- a/testing/mochitest/chrome/test_chromeGetTestFile.xul
+++ b/testing/mochitest/chrome/test_chromeGetTestFile.xhtml
@@ -12,31 +12,31 @@
   <![CDATA[
     let {Promise} = ChromeUtils.import("resource://gre/modules/Promise.jsm");
     const {OS} = ChromeUtils.import("resource://gre/modules/osfile.jsm");
     let decoder = new TextDecoder();
 
     SimpleTest.waitForExplicitFinish();
 
     SimpleTest.doesThrow(function () {
-      getTestFilePath("/test_chromeGetTestFile.xul")
+      getTestFilePath("/test_chromeGetTestFile.xhtml")
     }, "getTestFilePath rejects absolute paths");
 
     Promise.all([
-      OS.File.exists(getTestFilePath("test_chromeGetTestFile.xul"))
+      OS.File.exists(getTestFilePath("test_chromeGetTestFile.xhtml"))
         .then(function (exists) {
           ok(exists, "getTestFilePath consider the path as being relative");
         }),
 
-      OS.File.exists(getTestFilePath("./test_chromeGetTestFile.xul"))
+      OS.File.exists(getTestFilePath("./test_chromeGetTestFile.xhtml"))
         .then(function (exists) {
           ok(exists, "getTestFilePath also accepts explicit relative path");
         }),
 
-      OS.File.exists(getTestFilePath("./test_chromeGetTestFileTypo.xul"))
+      OS.File.exists(getTestFilePath("./test_chromeGetTestFileTypo.xhtml"))
         .then(function (exists) {
           ok(!exists, "getTestFilePath do not throw if the file doesn't exists");
         }),
 
       OS.File.read(getTestFilePath("test-dir/test-file"))
         .then(function (array) {
           is(decoder.decode(array), "foo\n", "getTestFilePath can reach sub-folder files 1/2");
         }),
diff --git a/testing/mochitest/chrome/test_sample.xul b/testing/mochitest/chrome/test_sample.xhtml
rename from testing/mochitest/chrome/test_sample.xul
rename to testing/mochitest/chrome/test_sample.xhtml
diff --git a/testing/mochitest/chrome/test_sanityEventUtils.xul b/testing/mochitest/chrome/test_sanityEventUtils.xhtml
rename from testing/mochitest/chrome/test_sanityEventUtils.xul
rename to testing/mochitest/chrome/test_sanityEventUtils.xhtml
diff --git a/testing/mochitest/chrome/test_sanityException.xul b/testing/mochitest/chrome/test_sanityException.xhtml
rename from testing/mochitest/chrome/test_sanityException.xul
rename to testing/mochitest/chrome/test_sanityException.xhtml
diff --git a/testing/mochitest/chrome/test_sanityException2.xul b/testing/mochitest/chrome/test_sanityException2.xhtml
rename from testing/mochitest/chrome/test_sanityException2.xul
rename to testing/mochitest/chrome/test_sanityException2.xhtml
diff --git a/testing/mochitest/chrome/test_sanityManifest.xul b/testing/mochitest/chrome/test_sanityManifest.xhtml
rename from testing/mochitest/chrome/test_sanityManifest.xul
rename to testing/mochitest/chrome/test_sanityManifest.xhtml
diff --git a/testing/mochitest/chrome/test_sanityManifest_pf.xul b/testing/mochitest/chrome/test_sanityManifest_pf.xhtml
rename from testing/mochitest/chrome/test_sanityManifest_pf.xul
rename to testing/mochitest/chrome/test_sanityManifest_pf.xhtml
diff --git a/testing/mochitest/chrome/test_tasks_skip.xul b/testing/mochitest/chrome/test_tasks_skip.xhtml
rename from testing/mochitest/chrome/test_tasks_skip.xul
rename to testing/mochitest/chrome/test_tasks_skip.xhtml
diff --git a/testing/mochitest/chrome/test_tasks_skipall.xul b/testing/mochitest/chrome/test_tasks_skipall.xhtml
rename from testing/mochitest/chrome/test_tasks_skipall.xul
rename to testing/mochitest/chrome/test_tasks_skipall.xhtml
diff --git a/testing/mochitest/harness.xul b/testing/mochitest/harness.xhtml
rename from testing/mochitest/harness.xul
rename to testing/mochitest/harness.xhtml
diff --git a/testing/mochitest/moz.build b/testing/mochitest/moz.build
--- a/testing/mochitest/moz.build
+++ b/testing/mochitest/moz.build
@@ -17,21 +17,21 @@ USE_EXTENSION_MANIFEST = True
 
 FINAL_TARGET_FILES += [
     'api.js',
     'manifest.json',
     'schema.json',
 ]
 
 FINAL_TARGET_FILES.content += [
-    'browser-harness.xul',
+    'browser-harness.xhtml',
     'browser-test.js',
     'chrome-harness.js',
     'chunkifyTests.js',
-    'harness.xul',
+    'harness.xhtml',
     'manifestLibrary.js',
     'mochitest-e10s-utils.js',
     'redirect.html',
     'server.js',
     'shutdown-leaks-collector.js',
     'ShutdownLeaksCollector.jsm',
 ]
 
@@ -84,22 +84,22 @@ BROWSER_CHROME_MANIFESTS += [
 TEST_HARNESS_FILES.testing.mochitest += [
     '/build/mobile/remoteautomation.py',
     '/build/pgo/server-locations.txt',
     '/build/valgrind/cross-architecture.sup',
     '/build/valgrind/i386-pc-linux-gnu.sup',
     '/build/valgrind/x86_64-pc-linux-gnu.sup',
     '/netwerk/test/httpserver/httpd.js',
     'bisection.py',
-    'browser-harness.xul',
+    'browser-harness.xhtml',
     'browser-test.js',
     'chrome-harness.js',
     'chunkifyTests.js',
     'favicon.ico',
-    'harness.xul',
+    'harness.xhtml',
     'leaks.py',
     'mach_test_package_commands.py',
     'manifest.webapp',
     'manifestLibrary.js',
     'mochitest_options.py',
     'pywebsocket_wrapper.py',
     'redirect.html',
     'runjunit.py',
diff --git a/testing/mochitest/redirect.html b/testing/mochitest/redirect.html
--- a/testing/mochitest/redirect.html
+++ b/testing/mochitest/redirect.html
@@ -12,17 +12,17 @@
           "data": aURL + location.search,
           "type": "loadURI",
         },
       });
       document.dispatchEvent(event);
     }
 
     function redirectToHarness() {
-      redirect("chrome://mochikit/content/harness.xul");
+      redirect("chrome://mochikit/content/harness.xhtml");
     }
 
     function onLoad() {
       setTimeout(redirectToHarness, 0);
       // In case the listener is not ready, re-try periodically
       setInterval(redirectToHarness, 5000);
     }
   </script>
diff --git a/testing/mochitest/tests/SimpleTest/SimpleTest.js b/testing/mochitest/tests/SimpleTest/SimpleTest.js
--- a/testing/mochitest/tests/SimpleTest/SimpleTest.js
+++ b/testing/mochitest/tests/SimpleTest/SimpleTest.js
@@ -29,18 +29,18 @@ try {
   dump("TEST-UNEXPECTED-FAIL, Exception caught: " + e.message +
                 ", at: " + e.fileName + " (" + e.lineNumber +
                 "), location: " + window.location.href + "\n");
 }
 // Finds the TestRunner for this test run and the SpecialPowers object (in
 // case it is not defined) from a parent/opener window.
 //
 // Finding the SpecialPowers object is needed when we have ChromePowers in
-// harness.xul and we need SpecialPowers in the iframe, and also for tests
-// like test_focus.xul where we open a window which opens another window which
+// harness.xhtml and we need SpecialPowers in the iframe, and also for tests
+// like test_focus.xhtml where we open a window which opens another window which
 // includes SimpleTest.js.
 (function() {
     function ancestor(w) {
         return w.parent != w ? w.parent : w.opener || w.arguments && w.arguments[0];
     }
 
     var w = ancestor(window);
     while (w && (!parentRunner || !window.SpecialPowers)) {
diff --git a/testing/mozharness/mozharness/mozilla/testing/codecoverage.py b/testing/mozharness/mozharness/mozilla/testing/codecoverage.py
--- a/testing/mozharness/mozharness/mozilla/testing/codecoverage.py
+++ b/testing/mozharness/mozharness/mozilla/testing/codecoverage.py
@@ -186,18 +186,18 @@ class CodeCoverageMixin(SingleTestMixin)
             '.html': {
                 'test': 'testing/mochitest/baselinecoverage/plain/test_baselinecoverage.html',
                 'suite': 'mochitest-plain'
             },
             '.js': {
                 'test': 'testing/mochitest/baselinecoverage/browser_chrome/browser_baselinecoverage.js',  # NOQA: E501
                 'suite': 'mochitest-browser-chrome'
             },
-            '.xul': {
-                'test': 'testing/mochitest/baselinecoverage/chrome/test_baselinecoverage.xul',
+            '.xhtml': {
+                'test': 'testing/mochitest/baselinecoverage/chrome/test_baselinecoverage.xhtml',
                 'suite': 'mochitest-chrome'
             }
         }
 
         baseline_tests_by_suite = {
             'mochitest-browser-chrome': 'testing/mochitest/baselinecoverage/browser_chrome/'
                                         'browser_baselinecoverage_browser-chrome.js'
         }
diff --git a/testing/talos/talos/pageloader/api.js b/testing/talos/talos/pageloader/api.js
--- a/testing/talos/talos/pageloader/api.js
+++ b/testing/talos/talos/pageloader/api.js
@@ -56,19 +56,19 @@ XPCOMUtils.defineLazyServiceGetter(
 XPCOMUtils.defineLazyServiceGetter(
   this,
   "env",
   "@mozilla.org/process/environment;1",
   "nsIEnvironment"
 );
 
 async function talosStart() {
-  // Tests are driven from pageloader.xul.  We need to be careful to open
-  // pageloader.xul before dismissing the default browser window or we
-  // may inadvertently cause the browser to exit before the pageloader.xul
+  // Tests are driven from pageloader.xhtml.  We need to be careful to open
+  // pageloader.xhtml before dismissing the default browser window or we
+  // may inadvertently cause the browser to exit before the pageloader.xhtml
   // window is opened.  Start by finding or waiting for the default window.
   let defaultWin = Services.wm.getMostRecentWindow("navigator:browser");
   if (!defaultWin) {
     defaultWin = await new Promise(resolve => {
       const listener = {
         onOpenWindow(win) {
           if (
             win.docShell.domWindow.location.href ==
@@ -79,18 +79,18 @@ async function talosStart() {
           }
         },
       };
       Services.wm.addListener(listener);
     });
   }
 
   // Wwe've got the default window, it is time for pageloader to take over.
-  // Open pageloader.xul in a new window and then close the default window.
-  let chromeURL = "chrome://pageloader/content/pageloader.xul";
+  // Open pageloader.xhtml in a new window and then close the default window.
+  let chromeURL = "chrome://pageloader/content/pageloader.xhtml";
 
   let args = {};
   args.wrappedJSObject = args;
   let newWin = Services.ww.openWindow(
     null,
     chromeURL,
     "_blank",
     "chrome,dialog=no,all",
diff --git a/testing/talos/talos/pageloader/chrome/pageloader.xul b/testing/talos/talos/pageloader/chrome/pageloader.xhtml
rename from testing/talos/talos/pageloader/chrome/pageloader.xul
rename to testing/talos/talos/pageloader/chrome/pageloader.xhtml
diff --git a/testing/talos/talos/xtalos/xperf_whitelist.json b/testing/talos/talos/xtalos/xperf_whitelist.json
--- a/testing/talos/talos/xtalos/xperf_whitelist.json
+++ b/testing/talos/talos/xtalos/xperf_whitelist.json
@@ -375,17 +375,17 @@
     "maxbytes": 125200
   },
   "{profile}\\extensions\\pageloader@mozilla.org\\chrome\\pageloader.js": {
     "mincount": 0,
     "maxcount": 2,
     "minbytes": 0,
     "maxbytes": 127000
   },
-  "{profile}\\extensions\\pageloader@mozilla.org\\chrome\\pageloader.xul": {
+  "{profile}\\extensions\\pageloader@mozilla.org\\chrome\\pageloader.xhtml": {
     "mincount": 0,
     "maxcount": 4,
     "minbytes": 0,
     "maxbytes": 127000
   },
   "{profile}\\extensions\\pageloader@mozilla.org\\chrome\\profiler.js": {
     "mincount": 0,
     "maxcount": 4,
diff --git a/view/crashtests/382756-1.xul b/view/crashtests/382756-1.xhtml
rename from view/crashtests/382756-1.xul
rename to view/crashtests/382756-1.xhtml
diff --git a/view/crashtests/38589-1.xul b/view/crashtests/38589-1.xhtml
rename from view/crashtests/38589-1.xul
rename to view/crashtests/38589-1.xhtml
diff --git a/view/crashtests/crashtests.list b/view/crashtests/crashtests.list
--- a/view/crashtests/crashtests.list
+++ b/view/crashtests/crashtests.list
@@ -1,9 +1,9 @@
-load chrome://reftest/content/crashtests/view/crashtests/38589-1.xul
+load chrome://reftest/content/crashtests/view/crashtests/38589-1.xhtml
 load 64049-1.html
 load 281743-1.html
 load 323497-1.html
-load chrome://reftest/content/crashtests/view/crashtests/382756-1.xul
+load chrome://reftest/content/crashtests/view/crashtests/382756-1.xhtml
 load 387745-1.svg
 load 399852.html
 load 429315-1.html
 load 507563-1.html
