# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  88e397a5cc15bb4db0698665191c2992e407a1d1

diff --git a/toolkit/content/widgets/menu.js b/toolkit/content/widgets/menu.js
--- a/toolkit/content/widgets/menu.js
+++ b/toolkit/content/widgets/menu.js
@@ -1,27 +1,27 @@
 {
 /* globals MozBaseText */
 
 // const openPopups = new Set();
-// window.addEventListener("popupshowing", (e) => {
-//   if (e.originalTarget.ownerDocument != document) {
-//     return;
-//   }
-//   openPopups.add(e.originalTarget);
-//   for (let menuitem of e.originalTarget.querySelectorAll("menuitem")) {
-//     if (menuitem.render) {
-//       menuitem.render();
-//     } else {
-//       // Let's see if this can happen. if it can (i.e. when inside of XBL anon content),
-//       // then we can do customElements.upgrade(menuitem)
-//       throw new Error("Can this happen?");
-//     }
-//   }
-// }, { capture: true });
+window.addEventListener("popupshowing", (e) => {
+  if (e.originalTarget.ownerDocument != document) {
+    return;
+  }
+  // openPopups.add(e.originalTarget);
+  for (let menuitem of e.originalTarget.querySelectorAll("menuitem")) {
+    if (menuitem.render) {
+      menuitem.render();
+    } else {
+      // Let's see if this can happen. if it can (i.e. when inside of XBL anon content),
+      // then we can do customElements.upgrade(menuitem)
+      throw new Error("Can this happen?");
+    }
+  }
+}, { capture: true });
 
 // window.addEventListener("popuphidden", (e) => {
 //   openPopups.delete(e.originalTarget);
 // }, { capture: true });
 
 class MozMenuItemBase extends MozElements.BaseText {
   set value(val) {
     this.setAttribute("value", val);
@@ -76,31 +76,31 @@ class MozMenuItem extends MozMenuItemBas
   //   for (let popup of openPopups) {
   //     if (popup.contains(this)) {
   //       return true;
   //     }
   //   }
   //   return false;
   // }
 
-  connectedCallback() {
-    // We typically don't want to eagerly render (instead wait for the
-    // popup to be shown). But if this is selected, we'll want it to render
-    // so the preview text shows properly in the menulist.
-    // XXX: why? this can be seen on the font size dropdown on about:preferences
-    // if (!this.isInsideOpenPopup) {
-    //   return;
-    // }
+  // connectedCallback() {
+  //   // We typically don't want to eagerly render (instead wait for the
+  //   // popup to be shown). But if this is selected, we'll want it to render
+  //   // so the preview text shows properly in the menulist.
+  //   // XXX: why? this can be seen on the font size dropdown on about:preferences
+  //   // if (!this.isInsideOpenPopup) {
+  //   //   return;
+  //   // }
 
-    if (this.delayConnectedCallback()) {
-      return;
-    }
+  //   if (this.delayConnectedCallback()) {
+  //     return;
+  //   }
 
-    this.render();
-  }
+  //   this.render();
+  // }
 
   _updateAttributes() {
     if (!this.renderedOnce) {
       return;
     }
 
     if (this.menuText) {
       this.inheritAttribute(this.menuText, "value=label");
