# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1571160850 25200
#      Tue Oct 15 10:34:10 2019 -0700
# Node ID c73c823f474b4ea5d8057755580f748ed824bf5c
# Parent  8aa8bbbf0bee82ac6dfeac05da5ee15a1e497d07
Bug 1588855 - Remove browser-instrumentation job

Differential Revision: https://phabricator.services.mozilla.com/D49326

diff --git a/taskcluster/ci/test/mochitest.yml b/taskcluster/ci/test/mochitest.yml
--- a/taskcluster/ci/test/mochitest.yml
+++ b/taskcluster/ci/test/mochitest.yml
@@ -117,32 +117,16 @@ mochitest-browser-chrome:
             default: 3600
     mozharness:
         mochitest-flavor: browser
         chunked: true
     # Bug 1281241: migrating to m3.large instances
     instance-size: default
     allow-software-gl-layers: false
 
-browser-instrumentation:
-    description: "Extra instrumentation for a browser-chrome run (XUL, XBL, etc)"
-    suite:
-        name: mochitest-browser-chrome-instrumentation
-    treeherder-symbol: M(inst)
-    loopback-video: true
-    tier: 3
-    run-on-projects:
-        by-test-platform:
-            windows.*-(?:nightly|shippable)/.*: ["mozilla-central"]
-            default: []
-    max-run-time: 14400
-    mozharness:
-        mochitest-flavor: browser
-    allow-software-gl-layers: false
-
 browser-screenshots:
     description: "Browser Screenshots"
     suite:
         name: mochitest-browser-chrome-screenshots
     treeherder-symbol: M(ss)
     loopback-video: true
     run-on-projects:
         by-test-platform:
diff --git a/taskcluster/ci/test/test-platforms.yml b/taskcluster/ci/test/test-platforms.yml
--- a/taskcluster/ci/test/test-platforms.yml
+++ b/taskcluster/ci/test/test-platforms.yml
@@ -224,17 +224,16 @@ windows10-64-ref-hw-2017/opt:
         - browsertime-firefox
         - talos-ref-hw
 
 windows10-64-shippable/opt:
     build-platform: win64-shippable/opt
     test-sets:
         - awsy
         - desktop-screenshot-capture
-        - desktop-instrumentation
         - windows-talos
         - marionette-gpu-tests
         - windows-tests
         - web-platform-tests
         - web-platform-tests-wdspec-headless
         - raptor-chrome
         - raptor-chromium
         - raptor-firefox
diff --git a/taskcluster/ci/test/test-sets.yml b/taskcluster/ci/test/test-sets.yml
--- a/taskcluster/ci/test/test-sets.yml
+++ b/taskcluster/ci/test/test-sets.yml
@@ -498,19 +498,16 @@ macosx64-talos:
     # - talos-h1 # too long to unpack profile- Bug 1442893
 
 linux32-tests:
     - web-platform-tests
 
 desktop-screenshot-capture:
     - browser-screenshots
 
-desktop-instrumentation:
-    - browser-instrumentation
-
 android-x86_64-tests:
     - cppunit
     - crashtest
     - geckoview-junit
     - gtest
     - mochitest
     - mochitest-gpu
     - reftest
diff --git a/testing/mochitest/browser-test.js b/testing/mochitest/browser-test.js
--- a/testing/mochitest/browser-test.js
+++ b/testing/mochitest/browser-test.js
@@ -2,17 +2,16 @@
 
 /* eslint-env mozilla/browser-window */
 /* import-globals-from chrome-harness.js */
 /* import-globals-from mochitest-e10s-utils.js */
 
 // Test timeout (seconds)
 var gTimeoutSeconds = 45;
 var gConfig;
-var gSaveInstrumentationData = null;
 
 var { AppConstants } = ChromeUtils.import(
   "resource://gre/modules/AppConstants.jsm"
 );
 var { Services } = ChromeUtils.import("resource://gre/modules/Services.jsm");
 
 ChromeUtils.defineModuleGetter(
   this,
@@ -140,289 +139,16 @@ function testInit() {
     Services.mm.loadFrameScript(
       "chrome://mochikit/content/shutdown-leaks-collector.js",
       true
     );
   } else {
     // In non-e10s, only run the ShutdownLeaksCollector in the parent process.
     ChromeUtils.import("chrome://mochikit/content/ShutdownLeaksCollector.jsm");
   }
-
-  var testSuite = Cc["@mozilla.org/process/environment;1"]
-    .getService(Ci.nsIEnvironment)
-    .get("TEST_SUITE");
-  if (testSuite == "browser-chrome-instrumentation") {
-    takeInstrumentation();
-  }
-}
-
-function takeInstrumentation() {
-  let instrumentData = {
-    elements: {},
-  };
-
-  function pad(str, length) {
-    if (str.length >= length) {
-      return str;
-    }
-
-    return str + " ".repeat(length - str.length);
-  }
-
-  function byCount(a, b) {
-    return b[1] - a[1];
-  }
-
-  function getSummaryText() {
-    let summary = [];
-    let allData = {};
-    for (let selector of Object.keys(instrumentData.elements)) {
-      allData[selector] = instrumentData.elements[selector];
-    }
-
-    let selectors = Object.keys(allData);
-    let elements = selectors.map(s => allData[s]);
-
-    let namespaceMap = new Map();
-    let bindingMap = new Map();
-
-    for (let element of elements) {
-      if (!bindingMap.has(element.binding)) {
-        bindingMap.set(element.binding, 1);
-      } else {
-        bindingMap.set(element.binding, bindingMap.get(element.binding) + 1);
-      }
-
-      if (!namespaceMap.has(element.namespaceURI)) {
-        namespaceMap.set(element.namespaceURI, new Map());
-      }
-
-      let localNameMap = namespaceMap.get(element.namespaceURI);
-      if (!localNameMap.has(element.localName)) {
-        localNameMap.set(element.localName, 1);
-      } else {
-        localNameMap.set(
-          element.localName,
-          localNameMap.get(element.localName) + 1
-        );
-      }
-    }
-
-    for (let [namespace, localNameMap] of namespaceMap) {
-      summary.push(`Elements in namespace ${namespace}`);
-
-      let entries = Array.from(localNameMap);
-      entries.sort(byCount);
-      for (let entry of entries) {
-        summary.push(`  ${pad(entry[1] + "", 5)} ${entry[0]}`);
-      }
-    }
-
-    summary.push("XBL bindings");
-    let bindings = Array.from(bindingMap);
-    bindings.sort(byCount);
-    let bindingsJSON = {};
-    for (let binding of bindings) {
-      summary.push(`  ${pad(binding[1] + "", 5)} ${binding[0]}`);
-      if (binding[0]) {
-        bindingsJSON[binding[0].split("#")[1].split('"')[0]] = binding[1];
-      }
-    }
-
-    summary.push("XBL bindings as JSON");
-    summary.push(JSON.stringify(bindingsJSON, null, 2));
-
-    return summary.join("\n");
-  }
-
-  // Saves instrumantation data
-  function saveData() {
-    let path = Cc["@mozilla.org/process/environment;1"]
-      .getService(Ci.nsIEnvironment)
-      .get("MOZ_UPLOAD_DIR");
-    let encoder = new TextEncoder();
-
-    let instrumentPath = OS.Path.join(path, "xulinstrument.txt");
-    OS.File.writeAtomic(
-      instrumentPath,
-      encoder.encode(JSON.stringify(instrumentData, null, 2))
-    );
-
-    let summaryPath = OS.Path.join(path, "xulsummary.txt");
-    OS.File.writeAtomic(summaryPath, encoder.encode(getSummaryText()));
-  }
-
-  // An iterator over an element and its ancestors
-  function* elementPath(element) {
-    yield element;
-    while ((element = element.parentNode) && element instanceof Element) {
-      yield element;
-    }
-  }
-
-  // Returns the information we care about for an element
-  function getElementInfo(element) {
-    let style = element.ownerGlobal.getComputedStyle(element);
-    let binding = style && style.getPropertyValue("-moz-binding");
-
-    return {
-      namespaceURI: element.namespaceURI,
-      localName: element.localName,
-      binding: binding && binding != "none" ? binding : null,
-    };
-  }
-
-  // The selector for just this element
-  function immediateSelector(element) {
-    if (
-      element.localName == "notificationbox" &&
-      element.parentNode &&
-      element.parentNode.id == "tabbrowser-tabpanels"
-    ) {
-      // Don't do a full selector for a tabpanel's notificationbox
-      return element.localName;
-    }
-
-    if (
-      element.localName == "tab" &&
-      element.classList.contains("tabbrowser-tab")
-    ) {
-      // Don't do a full selector for a tab
-      return element.localName;
-    }
-
-    if (element.id) {
-      return `#${element.id}`;
-    }
-
-    let selector = element.localName;
-
-    if (element.classList.length) {
-      selector += `.${Array.from(element.classList).join(".")}`;
-    }
-
-    for (let attr of ["src", "label"]) {
-      if (element.hasAttribute(attr)) {
-        selector += `[${attr}=${JSON.stringify(element.getAttribute(attr))}]`;
-      }
-    }
-
-    return selector;
-  }
-
-  // The selector chain for the element
-  function elementSelector(element) {
-    return Array.from(elementPath(element))
-      .reverse()
-      .map(immediateSelector)
-      .join(" > ");
-  }
-
-  // An iterator over all elements in the window
-  function* windowElements(win) {
-    yield* elementDescendants(win.document.documentElement);
-  }
-
-  // An iterator over an element and all of its descendants
-  function* elementDescendants(element) {
-    let walker = Cc["@mozilla.org/inspector/deep-tree-walker;1"].createInstance(
-      Ci.inIDeepTreeWalker
-    );
-    walker.showAnonymousContent = true;
-    walker.showSubDocuments = false;
-    walker.showDocumentsAsNodes = false;
-    walker.init(element, NodeFilter.SHOW_ELEMENT);
-
-    yield element;
-    while (walker.nextNode()) {
-      if (walker.currentNode instanceof Element) {
-        yield walker.currentNode;
-      }
-    }
-  }
-
-  // Checks if we've seen an element and if not adds it to the instrumentation data
-  function instrumentElement(element) {
-    if (element.__instrumentSeen) {
-      return;
-    }
-
-    let selector = elementSelector(element);
-    element.__instrumentSeen = true;
-
-    if (selector in instrumentData.elements) {
-      return;
-    }
-
-    instrumentData.elements[selector] = getElementInfo(element);
-  }
-
-  // Instruments every element in a window
-  function scanWindow(win) {
-    Array.from(windowElements(win)).forEach(instrumentElement);
-  }
-
-  // Instruments every element in an element's descendants
-  function scanElement(element) {
-    Array.from(elementDescendants(element)).forEach(instrumentElement);
-  }
-
-  function handleMutation(mutation) {
-    if (mutation.type != "childList") {
-      return;
-    }
-
-    for (let node of mutation.addedNodes) {
-      if (node instanceof Element) {
-        scanElement(node);
-      }
-    }
-  }
-  // Watches a window for new elements to instrument
-  function observeWindow(win) {
-    let observer = new MutationObserver(mutations => {
-      mutations.forEach(handleMutation);
-    });
-
-    observer.observe(win.document, {
-      childList: true,
-      subtree: true,
-    });
-
-    win.addEventListener(
-      "unload",
-      () => {
-        observer.takeRecords().forEach(handleMutation);
-      },
-      { once: true }
-    );
-  }
-
-  scanWindow(window);
-  observeWindow(window);
-  gSaveInstrumentationData = saveData;
-
-  Services.ww.registerNotification((win, topic, data) => {
-    if (topic != "domwindowopened") {
-      return;
-    }
-
-    win.addEventListener(
-      "load",
-      () => {
-        if (win.location.href != AppConstants.BROWSER_CHROME_URL) {
-          return;
-        }
-
-        scanWindow(win);
-        observeWindow(win);
-      },
-      { once: true }
-    );
-  });
 }
 
 function isGenerator(value) {
   return value && typeof value === "object" && typeof value.next === "function";
 }
 
 function Tester(aTests, structuredLogger, aCallback) {
   this.structuredLogger = structuredLogger;
@@ -794,20 +520,16 @@ Tester.prototype = {
       );
     }
     this.structuredLogger.info("*** End BrowserChrome Test Results ***");
 
     // Tests complete, notify the callback and return
     this.callback(this.tests);
     this.callback = null;
     this.tests = null;
-
-    if (gSaveInstrumentationData) {
-      gSaveInstrumentationData();
-    }
   },
 
   haltTests: function Tester_haltTests() {
     // Do not run any further tests
     this.currentTestIndex = this.tests.length - 1;
     this.repeat = 0;
   },
 
diff --git a/testing/mozharness/configs/unittests/linux_unittest.py b/testing/mozharness/configs/unittests/linux_unittest.py
--- a/testing/mozharness/configs/unittests/linux_unittest.py
+++ b/testing/mozharness/configs/unittests/linux_unittest.py
@@ -164,17 +164,16 @@ config = {
         "mochitest-media": ["--subsuite=media"],
         "mochitest-chrome": ["--flavor=chrome", "--disable-e10s"],
         "mochitest-chrome-gpu": ["--flavor=chrome", "--subsuite=gpu", "--disable-e10s"],
         "mochitest-chrome-chunked": ["--flavor=chrome", "--chunk-by-dir=4", "--disable-e10s"],
         "mochitest-browser-chrome": ["--flavor=browser"],
         "mochitest-browser-chrome-chunked": ["--flavor=browser", "--chunk-by-runtime"],
         "mochitest-browser-chrome-coverage": ["--flavor=browser", "--chunk-by-runtime", "--timeout=1200"],
         "mochitest-browser-chrome-screenshots": ["--flavor=browser", "--subsuite=screenshots"],
-        "mochitest-browser-chrome-instrumentation": ["--flavor=browser"],
         "mochitest-webgl1-core": ["--subsuite=webgl1-core"],
         "mochitest-webgl1-ext": ["--subsuite=webgl1-ext"],
         "mochitest-webgl2-core": ["--subsuite=webgl2-core"],
         "mochitest-webgl2-ext": ["--subsuite=webgl2-ext"],
         "mochitest-webgl2-deqp": ["--subsuite=webgl2-deqp"],
         "mochitest-devtools-chrome": ["--flavor=browser", "--subsuite=devtools"],
         "mochitest-devtools-chrome-chunked": ["--flavor=browser", "--subsuite=devtools", "--chunk-by-runtime"],
         "mochitest-devtools-chrome-coverage": ["--flavor=browser", "--subsuite=devtools", "--chunk-by-runtime", "--timeout=1200"],
diff --git a/testing/mozharness/configs/unittests/mac_unittest.py b/testing/mozharness/configs/unittests/mac_unittest.py
--- a/testing/mozharness/configs/unittests/mac_unittest.py
+++ b/testing/mozharness/configs/unittests/mac_unittest.py
@@ -131,17 +131,16 @@ config = {
         "mochitest-plain-chunked": ["--chunk-by-dir=4"],
         "mochitest-media": ["--subsuite=media"],
         "mochitest-chrome": ["--flavor=chrome", "--disable-e10s"],
         "mochitest-chrome-gpu": ["--flavor=chrome", "--subsuite=gpu", "--disable-e10s"],
         "mochitest-chrome-chunked": ["--flavor=chrome", "--chunk-by-dir=4", "--disable-e10s"],
         "mochitest-browser-chrome": ["--flavor=browser"],
         "mochitest-browser-chrome-chunked": ["--flavor=browser", "--chunk-by-runtime"],
         "mochitest-browser-chrome-screenshots": ["--flavor=browser", "--subsuite=screenshots"],
-        "mochitest-browser-chrome-instrumentation": ["--flavor=browser"],
         "mochitest-webgl1-core": ["--subsuite=webgl1-core"],
         "mochitest-webgl1-ext": ["--subsuite=webgl1-ext"],
         "mochitest-webgl2-core": ["--subsuite=webgl2-core"],
         "mochitest-webgl2-ext": ["--subsuite=webgl2-ext"],
         "mochitest-webgl2-deqp": ["--subsuite=webgl2-deqp"],
         "mochitest-devtools-chrome": ["--flavor=browser", "--subsuite=devtools"],
         "mochitest-devtools-chrome-chunked": ["--flavor=browser", "--subsuite=devtools", "--chunk-by-runtime"],
         "mochitest-devtools-chrome-webreplay": ["--flavor=browser", "--subsuite=devtools-webreplay"],
diff --git a/testing/mozharness/configs/unittests/win_unittest.py b/testing/mozharness/configs/unittests/win_unittest.py
--- a/testing/mozharness/configs/unittests/win_unittest.py
+++ b/testing/mozharness/configs/unittests/win_unittest.py
@@ -154,17 +154,16 @@ config = {
         "mochitest-plain-chunked": ["--chunk-by-dir=4"],
         "mochitest-media": ["--subsuite=media"],
         "mochitest-chrome": ["--flavor=chrome", "--disable-e10s"],
         "mochitest-chrome-gpu": ["--flavor=chrome", "--subsuite=gpu", "--disable-e10s"],
         "mochitest-chrome-chunked": ["--flavor=chrome", "--chunk-by-dir=4", "--disable-e10s"],
         "mochitest-browser-chrome": ["--flavor=browser"],
         "mochitest-browser-chrome-chunked": ["--flavor=browser", "--chunk-by-runtime"],
         "mochitest-browser-chrome-screenshots": ["--flavor=browser", "--subsuite=screenshots"],
-        "mochitest-browser-chrome-instrumentation": ["--flavor=browser"],
         "mochitest-webgl1-core": ["--subsuite=webgl1-core"],
         "mochitest-webgl1-ext": ["--subsuite=webgl1-ext"],
         "mochitest-webgl2-core": ["--subsuite=webgl2-core"],
         "mochitest-webgl2-ext": ["--subsuite=webgl2-ext"],
         "mochitest-webgl2-deqp": ["--subsuite=webgl2-deqp"],
         "mochitest-devtools-chrome": ["--flavor=browser", "--subsuite=devtools"],
         "mochitest-devtools-chrome-chunked": ["--flavor=browser", "--subsuite=devtools", "--chunk-by-runtime"],
         "mochitest-a11y": ["--flavor=a11y", "--disable-e10s"],
diff --git a/tools/tryselect/test/test_mozharness_integration.py b/tools/tryselect/test/test_mozharness_integration.py
--- a/tools/tryselect/test/test_mozharness_integration.py
+++ b/tools/tryselect/test/test_mozharness_integration.py
@@ -37,17 +37,16 @@ MOZHARNESS_SCRIPTS = {
         'xfail': [
             'cppunittest',
             'gtest',
             'jittest',
             'jittest-chunked',
             'jittest1',
             'jittest2',
             'jsreftest',
-            'mochitest-browser-chrome-instrumentation',
             'mochitest-devtools-chrome-webreplay',
             'mochitest-valgrind-plain',
             'reftest-gpu',
             'reftest-no-accel',
             'reftest-qr',
         ],
     },
 }
