# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  ff3ed362e82fae365afc440ccc3b662bcfcd0435

diff --git a/browser/base/content/test/popups/browser_popupUI.js b/browser/base/content/test/popups/browser_popupUI.js
--- a/browser/base/content/test/popups/browser_popupUI.js
+++ b/browser/base/content/test/popups/browser_popupUI.js
@@ -5,33 +5,34 @@ function test() {
   let popupOpened = BrowserTestUtils.waitForNewWindow({url: "about:blank"});
   BrowserTestUtils.openNewForegroundTab(gBrowser,
     "data:text/html,<html><script>popup=open('about:blank','','width=300,height=200')</script>"
   );
   popupOpened.then((win) => testPopupUI(win));
 }
 
 function testPopupUI(win) {
-  var doc = win.document;
+  console.log("READY TO TEST!");
+  // var doc = win.document;
 
-  ok(win.gURLBar, "location bar exists in the popup");
-  isnot(win.gURLBar.clientWidth, 0, "location bar is visible in the popup");
-  ok(win.gURLBar.readOnly, "location bar is read-only in the popup");
-  isnot(doc.getElementById("Browser:OpenLocation").getAttribute("disabled"), "true",
-     "'open location' command is not disabled in the popup");
+  // ok(win.gURLBar, "location bar exists in the popup");
+  // isnot(win.gURLBar.clientWidth, 0, "location bar is visible in the popup");
+  // ok(win.gURLBar.readOnly, "location bar is read-only in the popup");
+  // isnot(doc.getElementById("Browser:OpenLocation").getAttribute("disabled"), "true",
+  //    "'open location' command is not disabled in the popup");
 
-  let historyButton = doc.getAnonymousElementByAttribute(win.gURLBar, "anonid",
-                                                         "historydropmarker");
-  is(historyButton.clientWidth, 0, "history dropdown button is hidden in the popup");
+  // let historyButton = doc.getAnonymousElementByAttribute(win.gURLBar, "anonid",
+  //                                                        "historydropmarker");
+  // is(historyButton.clientWidth, 0, "history dropdown button is hidden in the popup");
 
-  EventUtils.synthesizeKey("t", { accelKey: true }, win);
-  is(win.gBrowser.browsers.length, 1, "Accel+T doesn't open a new tab in the popup");
-  is(gBrowser.browsers.length, 3, "Accel+T opened a new tab in the parent window");
-  gBrowser.removeCurrentTab();
+  // EventUtils.synthesizeKey("t", { accelKey: true }, win);
+  // is(win.gBrowser.browsers.length, 1, "Accel+T doesn't open a new tab in the popup");
+  // is(gBrowser.browsers.length, 3, "Accel+T opened a new tab in the parent window");
+  // gBrowser.removeCurrentTab();
 
-  EventUtils.synthesizeKey("w", { accelKey: true }, win);
-  ok(win.closed, "Accel+W closes the popup");
+  // EventUtils.synthesizeKey("w", { accelKey: true }, win);
+  // ok(win.closed, "Accel+W closes the popup");
 
-  if (!win.closed)
-    win.close();
-  gBrowser.removeCurrentTab();
-  finish();
+  // if (!win.closed)
+  //   win.close();
+  // gBrowser.removeCurrentTab();
+  // finish();
 }
diff --git a/modules/libpref/init/all.js b/modules/libpref/init/all.js
--- a/modules/libpref/init/all.js
+++ b/modules/libpref/init/all.js
@@ -954,17 +954,17 @@ pref("accessibility.browsewithcaret_shor
 // 1 focuses text controls, 2 focuses other form elements, 4 adds links.
 // Most users will want 1, 3, or 7.
 // On OS X, we use Full Keyboard Access system preference,
 // unless accessibility.tabfocus is set by the user.
 pref("accessibility.tabfocus", 7);
 pref("accessibility.tabfocus_applies_to_xul", false);
 #else
 // Only on mac tabfocus is expected to handle UI widgets as well as web content
-pref("accessibility.tabfocus_applies_to_xul", true);
+pref("accessibility.tabfocus_applies_to_xul", false);
 #endif
 
 // We follow the "Click in the scrollbar to:" system preference on OS X and
 // "gtk-primary-button-warps-slider" property with GTK (since 2.24 / 3.6),
 // unless this preference is explicitly set.
 #if !defined(XP_MACOSX) && !defined(MOZ_WIDGET_GTK)
 pref("ui.scrollToClick", 0);
 #endif
diff --git a/testing/mochitest/BrowserTestUtils/BrowserTestUtils.jsm b/testing/mochitest/BrowserTestUtils/BrowserTestUtils.jsm
--- a/testing/mochitest/BrowserTestUtils/BrowserTestUtils.jsm
+++ b/testing/mochitest/BrowserTestUtils/BrowserTestUtils.jsm
@@ -574,23 +574,33 @@ var BrowserTestUtils = {
           return;
         }
 
         if (!anyWindow) {
           Services.ww.unregisterNotification(observe);
         }
 
         if (url) {
+          console.log("Waiting for window", url, win.document.documentURI, win.document.readyState)
+
           await this.waitForEvent(win, "DOMContentLoaded");
 
+          console.log("Waited for window", url, win.document.documentURI, win.document.readyState)
+
           if (win.document.documentURI != AppConstants.BROWSER_CHROME_URL) {
+            console.log("Early returnM");
             return;
           }
         }
 
+        TestUtils.topicObserved("browser-delayed-startup-finished",
+        subject => subject == win).then(r=>console.log("browser-delayed-startup-finished"));
+      this.waitForEvent(win, "focus").then(e=>console.log("focus", e.originalTarget == win.gBrowser));
+      this.waitForEvent(win, "activate").then(e=>console.log("activate", e.originalTarget == win.gBrowser));
+
         let promises = [
           TestUtils.topicObserved("browser-delayed-startup-finished",
                                   subject => subject == win),
           this.waitForEvent(win, "focus"),
           this.waitForEvent(win, "activate"),
         ];
 
         if (url) {
