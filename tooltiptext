# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  8270ad2298ebf7bb4d11a3a33f202901a5ee3edd
Bug 1187022 - Add hover tooltip for tracking protection shield icon;r=MattN

diff --git a/browser/base/content/browser-trackingprotection.js b/browser/base/content/browser-trackingprotection.js
--- a/browser/base/content/browser-trackingprotection.js
+++ b/browser/base/content/browser-trackingprotection.js
@@ -14,16 +14,19 @@ let TrackingProtection = {
     this.container = $("#tracking-protection-container");
     this.content = $("#tracking-protection-content");
     this.icon = $("#tracking-protection-icon");
 
     this.updateEnabled();
     Services.prefs.addObserver(this.PREF_ENABLED_GLOBALLY, this, false);
     Services.prefs.addObserver(this.PREF_ENABLED_IN_PRIVATE_WINDOWS, this, false);
 
+    this.activeTooltipText = gNavigatorBundle.getString("trackingProtection.icon.activeTooltiptext")
+    this.disabledTooltipText = gNavigatorBundle.getString("trackingProtection.icon.disabledTooltiptext");
+
     this.enabledHistogram.add(this.enabledGlobally);
   },
 
   uninit() {
     Services.prefs.removeObserver(this.PREF_ENABLED_GLOBALLY, this);
     Services.prefs.removeObserver(this.PREF_ENABLED_IN_PRIVATE_WINDOWS, this);
   },
 
@@ -61,38 +64,39 @@ let TrackingProtection = {
     // Only animate the shield if the event was not fired directly from
     // the tabbrowser (due to a browser change).
     if (isSimulated) {
       this.icon.removeAttribute("animate");
     } else {
       this.icon.setAttribute("animate", "true");
     }
 
-    let {
-      STATE_BLOCKED_TRACKING_CONTENT, STATE_LOADED_TRACKING_CONTENT
-    } = Ci.nsIWebProgressListener;
+    let isBlocking = state & Ci.nsIWebProgressListener.STATE_BLOCKED_TRACKING_CONTENT;
+    let isAllowing = state & Ci.nsIWebProgressListener.STATE_LOADED_TRACKING_CONTENT;
 
-    for (let element of [this.icon, this.content]) {
-      if (state & STATE_BLOCKED_TRACKING_CONTENT) {
-        element.setAttribute("state", "blocked-tracking-content");
-      } else if (state & STATE_LOADED_TRACKING_CONTENT) {
-        element.setAttribute("state", "loaded-tracking-content");
-      } else {
-        element.removeAttribute("state");
-      }
-    }
+    if (isBlocking) {
+      this.icon.setAttribute("tooltiptext", this.activeTooltipText);
+      this.icon.setAttribute("state", "blocked-tracking-content");
+      this.content.setAttribute("state", "blocked-tracking-content");
 
-    if (state & STATE_BLOCKED_TRACKING_CONTENT) {
       // Open the tracking protection introduction panel, if applicable.
       let introCount = gPrefService.getIntPref("privacy.trackingprotection.introCount");
       if (introCount < TrackingProtection.MAX_INTROS) {
         gPrefService.setIntPref("privacy.trackingprotection.introCount", ++introCount);
         gPrefService.savePrefFile(null);
         this.showIntroPanel();
       }
+    } else if (isAllowing) {
+      this.icon.setAttribute("tooltiptext", this.disabledTooltipText);
+      this.icon.setAttribute("state", "loaded-tracking-content");
+      this.content.setAttribute("state", "loaded-tracking-content");
+    } else {
+      this.icon.removeAttribute("tooltiptext");
+      this.icon.removeAttribute("state");
+      this.content.removeAttribute("state");
     }
 
     // Telemetry for state change.
     this.eventsHistogram.add(0);
   },
 
   disableForCurrentPage() {
     // Convert document URI into the format used by
diff --git a/browser/base/content/test/general/browser_trackingUI_1.js b/browser/base/content/test/general/browser_trackingUI_1.js
--- a/browser/base/content/test/general/browser_trackingUI_1.js
+++ b/browser/base/content/test/general/browser_trackingUI_1.js
@@ -41,16 +41,17 @@ function clickButton(sel) {
   el.doCommand();
 }
 
 function testBenignPage() {
   info("Non-tracking content must not be blocked");
   ok(!TrackingProtection.container.hidden, "The container is visible");
   ok(!TrackingProtection.content.hasAttribute("state"), "content: no state");
   ok(!TrackingProtection.icon.hasAttribute("state"), "icon: no state");
+  ok(!TrackingProtection.icon.hasAttribute("tooltiptext"), "icon: no tooltip");
 
   ok(hidden("#tracking-protection-icon"), "icon is hidden");
   ok(hidden("#tracking-action-block"), "blockButton is hidden");
   ok(hidden("#tracking-action-unblock"), "unblockButton is hidden");
 
   // Make sure that the no tracking elements message appears
   ok(!hidden("#tracking-not-detected"), "labelNoTracking is visible");
   ok(hidden("#tracking-loaded"), "labelTrackingLoaded is hidden");
@@ -59,16 +60,18 @@ function testBenignPage() {
 
 function testTrackingPage(window) {
   info("Tracking content must be blocked");
   ok(!TrackingProtection.container.hidden, "The container is visible");
   is(TrackingProtection.content.getAttribute("state"), "blocked-tracking-content",
       'content: state="blocked-tracking-content"');
   is(TrackingProtection.icon.getAttribute("state"), "blocked-tracking-content",
       'icon: state="blocked-tracking-content"');
+  is(TrackingProtection.icon.getAttribute("tooltiptext"),
+     gNavigatorBundle.getString("trackingProtection.icon.activeTooltiptext"), "correct tooltip");
 
   ok(!hidden("#tracking-protection-icon"), "icon is visible");
   ok(hidden("#tracking-action-block"), "blockButton is hidden");
 
 
   if (PrivateBrowsingUtils.isWindowPrivate(window)) {
     ok(hidden("#tracking-action-unblock"), "unblockButton is hidden");
     ok(!hidden("#tracking-action-unblock-private"), "unblockButtonPrivate is visible");
@@ -85,16 +88,18 @@ function testTrackingPage(window) {
 
 function testTrackingPageUnblocked() {
   info("Tracking content must be white-listed and not blocked");
   ok(!TrackingProtection.container.hidden, "The container is visible");
   is(TrackingProtection.content.getAttribute("state"), "loaded-tracking-content",
       'content: state="loaded-tracking-content"');
   is(TrackingProtection.icon.getAttribute("state"), "loaded-tracking-content",
       'icon: state="loaded-tracking-content"');
+  is(TrackingProtection.icon.getAttribute("tooltiptext"),
+     gNavigatorBundle.getString("trackingProtection.icon.disabledTooltiptext"), "correct tooltip");
 
   ok(!hidden("#tracking-protection-icon"), "icon is visible");
   ok(!hidden("#tracking-action-block"), "blockButton is visible");
   ok(hidden("#tracking-action-unblock"), "unblockButton is hidden");
 
   // Make sure that the blocked tracking elements message appears
   ok(hidden("#tracking-not-detected"), "labelNoTracking is hidden");
   ok(!hidden("#tracking-loaded"), "labelTrackingLoaded is visible");
diff --git a/browser/locales/en-US/chrome/browser/browser.properties b/browser/locales/en-US/chrome/browser/browser.properties
--- a/browser/locales/en-US/chrome/browser/browser.properties
+++ b/browser/locales/en-US/chrome/browser/browser.properties
@@ -338,16 +338,19 @@ identity.unknown.tooltip=This website do
 
 trackingProtection.intro.title=How Tracking Protection works
 # LOCALIZATION NOTE (trackingProtection.intro.description): %S is brandShortName
 trackingProtection.intro.description=When the shield is visible, that means Firefox is actively blocking content that tracks you.
 # LOCALIZATION NOTE (trackingProtection.intro.step1of3): Indicates that the intro panel is step one of three in a tour.
 trackingProtection.intro.step1of3=1 of 3
 trackingProtection.intro.nextButton.label=Next
 
+trackingProtection.icon.activeTooltiptext=Tracking attempts blocked.
+trackingProtection.icon.disabledTooltiptext=Tracking content detected.
+
 # Edit Bookmark UI
 editBookmarkPanel.pageBookmarkedTitle=Page Bookmarked
 editBookmarkPanel.pageBookmarkedDescription=%S will always remember this page for you.
 editBookmarkPanel.bookmarkedRemovedTitle=Bookmark Removed
 editBookmarkPanel.editBookmarkTitle=Edit This Bookmark
 
 # LOCALIZATION NOTE (editBookmark.removeBookmarks.label): Semicolon-separated list of plural forms.
 # See: http://developer.mozilla.org/en/docs/Localization_and_Plurals
