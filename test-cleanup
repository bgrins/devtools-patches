# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  e6c859b335b5389552d0237a34a7272b5879d327
Bug 1175239 - Tracking Protection test cleanup;r=ttaubert

diff --git a/browser/base/content/test/general/browser_trackingUI_1.js b/browser/base/content/test/general/browser_trackingUI_1.js
--- a/browser/base/content/test/general/browser_trackingUI_1.js
+++ b/browser/base/content/test/general/browser_trackingUI_1.js
@@ -30,44 +30,47 @@ function hidden(sel) {
 function clickButton(sel) {
   let win = gBrowser.ownerGlobal;
   let evt = new win.Event("command");
   let el = win.document.querySelector(sel);
   el.dispatchEvent(evt);
 }
 
 function testBenignPage() {
+  info("Non-tracking content must not be blocked");
   ok (!TrackingProtection.content.hasAttribute("block-disabled"), "blocking not disabled");
   ok (!TrackingProtection.content.hasAttribute("block-active"), "blocking is not active");
 
   // Make sure that the no tracking elements message appears
   ok (!hidden("#tracking-not-detected"), "labelNoTracking is visible");
   ok (hidden("#tracking-loaded"), "labelTrackingLoaded is hidden");
   ok (hidden("#tracking-blocked"), "labelTrackingBlocked is hidden");
 
   // Check button visibility
   ok (hidden("#tracking-action-block"), "blockButton is hidden");
   ok (hidden("#tracking-action-unblock"), "unblockButton is hidden");
 }
 
 function testTrackingPage() {
+  info("Tracking content must be blocked");
   ok (!TrackingProtection.content.hasAttribute("block-disabled"), "blocking not disabled");
   ok (TrackingProtection.content.hasAttribute("block-active"), "blocking is active");
 
   // Make sure that the blocked tracking elements message appears
   ok (hidden("#tracking-not-detected"), "labelNoTracking is hidden");
   ok (hidden("#tracking-loaded"), "labelTrackingLoaded is hidden");
   ok (!hidden("#tracking-blocked"), "labelTrackingBlocked is visible");
 
   // Check button visibility
   ok (hidden("#tracking-action-block"), "blockButton is hidden");
   ok (!hidden("#tracking-action-unblock"), "unblockButton is visible");
 }
 
 function testTrackingPageWhitelisted() {
+  info("Tracking content must be white-listed and not blocked");
   ok (TrackingProtection.content.hasAttribute("block-disabled"), "blocking is disabled");
   ok (!TrackingProtection.content.hasAttribute("block-active"), "blocking is not active");
 
   // Make sure that the blocked tracking elements message appears
   ok (hidden("#tracking-not-detected"), "labelNoTracking is hidden");
   ok (!hidden("#tracking-loaded"), "labelTrackingLoaded is visible");
   ok (hidden("#tracking-blocked"), "labelTrackingBlocked is hidden");
 
@@ -79,42 +82,35 @@ function testTrackingPageWhitelisted() {
 add_task(function* () {
   yield updateTrackingProtectionDatabase();
 
   let tab = gBrowser.selectedTab = gBrowser.addTab();
 
   TrackingProtection = gBrowser.ownerGlobal.TrackingProtection;
   ok (TrackingProtection, "Functionality is attached to the browser window");
   is (TrackingProtection.enabled, Services.prefs.getBoolPref(PREF),
-    "The initial enabled value is based on the default pref value");
+    "TP.enabled is based on the original pref value");
 
-  info("Enable Tracking Protection");
   Services.prefs.setBoolPref(PREF, true);
-  ok (TrackingProtection.enabled, "Functionality is enabled after setting the pref");
+  ok (TrackingProtection.enabled, "TP is enabled after setting the pref");
 
-  info("Point tab to a test page NOT containing tracking elements");
+  info("Load a test page not containing tracking elements");
   yield promiseTabLoadEvent(tab, BENIGN_PAGE);
   testBenignPage();
 
-  info("Point tab to a test page containing tracking elements");
+  info("Load a test page containing tracking elements");
   yield promiseTabLoadEvent(tab, TRACKING_PAGE);
-
-  info("Tracking content must be blocked");
   testTrackingPage();
 
-  info("Disable Tracking Content Protection for the page (which reloads the page)");
+  info("Disable TP for the page (which reloads the page)");
   clickButton("#tracking-action-unblock");
 
-  info("Wait for tab to reload following tracking-protection page white-listing");
+  info("Wait for tab to reload following TP white-listing");
   yield promiseTabLoadEvent(tab);
-
-  info("Tracking content must be white-listed (NOT blocked)");
   testTrackingPageWhitelisted();
 
-  info("Re-enable Tracking Content Protection for the page (which reloads the page)");
+  info("Re-enable TP for the page (which reloads the page)");
   clickButton("#tracking-action-block");
 
-  info("Wait for tab to reload following tracking-protection page white-listing");
+  info("Wait for tab to reload following TP black-listing");
   yield promiseTabLoadEvent(tab);
-
-  info("Tracking content must be blocked");
   testTrackingPage();
 });
diff --git a/browser/base/content/test/general/browser_trackingUI_2.js b/browser/base/content/test/general/browser_trackingUI_2.js
--- a/browser/base/content/test/general/browser_trackingUI_2.js
+++ b/browser/base/content/test/general/browser_trackingUI_2.js
@@ -12,38 +12,37 @@ let TRACKING_PAGE = "http://tracking.exa
 let TrackingProtection = null;
 
 registerCleanupFunction(function() {
   TrackingProtection = null;
   Services.prefs.clearUserPref(PREF);
   gBrowser.removeCurrentTab();
 });
 
-function testTrackingPageOFF() {
+function testTrackingPageOff() {
   ok (TrackingProtection.container.hidden, "The container is hidden");
 }
 
-function testBenignPageOFF() {
+function testBenignPageOff() {
   ok (TrackingProtection.container.hidden, "The container is hidden");
 }
 
 add_task(function* () {
   yield updateTrackingProtectionDatabase();
 
   let tab = gBrowser.selectedTab = gBrowser.addTab();
 
   TrackingProtection = gBrowser.ownerGlobal.TrackingProtection;
-  ok (TrackingProtection, "Functionality is attached to the browser window");
+  ok (TrackingProtection, "TP is attached to the browser window");
   is (TrackingProtection.enabled, Services.prefs.getBoolPref(PREF),
-    "The initial enabled value is based on the default pref value");
+    "TP.enabled is based on the original pref value");
 
-  info ("Disable Tracking Protection");
   Services.prefs.setBoolPref(PREF, false);
-  ok (!TrackingProtection.enabled, "Functionality is disabled after setting the pref");
+  ok (!TrackingProtection.enabled, "TP is disabled after setting the pref");
 
-  info ("Point tab to a test page containing tracking elements");
+  info("Load a test page containing tracking elements");
   yield promiseTabLoadEvent(tab, TRACKING_PAGE);
-  testTrackingPageOFF();
+  testTrackingPageOff();
 
-  info ("Point tab to a test page NOT containing tracking elements");
+  info("Load a test page not containing tracking elements");
   yield promiseTabLoadEvent(tab, BENIGN_PAGE);
-  testBenignPageOFF();
+  testBenignPageOff();
 });
