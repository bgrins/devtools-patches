# HG changeset patch
# User Nicolas Chevobbe <chevobbe.nicolas@gmail.com>
Bug 1305499 - Part 1: Defer NewConsoleOutput initialization until everything is ready. r=linclark


diff --git a/devtools/client/webconsole/new-console-output/new-console-output-wrapper.js b/devtools/client/webconsole/new-console-output/new-console-output-wrapper.js
index 19eac9c..8f0fa21 100644
--- a/devtools/client/webconsole/new-console-output/new-console-output-wrapper.js
+++ b/devtools/client/webconsole/new-console-output/new-console-output-wrapper.js
@@ -12,47 +12,57 @@ const actions = require("devtools/client/webconsole/new-console-output/actions/i
 const { configureStore } = require("devtools/client/webconsole/new-console-output/store");
 
 const ConsoleOutput = React.createFactory(require("devtools/client/webconsole/new-console-output/components/console-output"));
 const FilterBar = React.createFactory(require("devtools/client/webconsole/new-console-output/components/filter-bar"));
 
 const store = configureStore();
 
 function NewConsoleOutputWrapper(parentNode, jsterm, toolbox, owner) {
-  const sourceMapService = toolbox ? toolbox._sourceMapService : null;
-  let childComponent = ConsoleOutput({
-    jsterm,
-    sourceMapService,
-    onViewSourceInDebugger: frame => toolbox.viewSourceInDebugger.call(
-      toolbox,
-      frame.url,
-      frame.line
-    ),
-    openNetworkPanel: (requestId) => {
-      return toolbox.selectTool("netmonitor").then(panel => {
-        return panel.panelWin.NetMonitorController.inspectRequest(requestId);
-      });
-    },
-    openLink: (url) => {
-      owner.openLink(url);
-    },
-  });
-  let filterBar = FilterBar({});
-  let provider = React.createElement(
-    Provider,
-    { store },
-    React.DOM.div(
-      {className: "webconsole-output-wrapper"},
-      filterBar,
-      childComponent
-  ));
-  this.body = ReactDOM.render(provider, parentNode);
+  this.parentNode = parentNode;
+  this.jsterm = jsterm;
+  this.toolbox = toolbox;
+  this.owner = owner;
+
+  this.init = this.init.bind(this);
 }
 
 NewConsoleOutputWrapper.prototype = {
+  init: function () {
+    const sourceMapService = this.toolbox ? this.toolbox._sourceMapService : null;
+
+    let childComponent = ConsoleOutput({
+      hudProxyClient: this.jsterm.hud.proxy.client,
+      sourceMapService,
+      onViewSourceInDebugger: frame => this.toolbox.viewSourceInDebugger.call(
+        this.toolbox,
+        frame.url,
+        frame.line
+      ),
+      openNetworkPanel: (requestId) => {
+        return this.toolbox.selectTool("netmonitor").then(panel => {
+          return panel.panelWin.NetMonitorController.inspectRequest(requestId);
+        });
+      },
+      openLink: (url) => {
+        this.owner.openLink(url);
+      },
+    });
+    let filterBar = FilterBar({});
+    let provider = React.createElement(
+      Provider,
+      { store },
+      React.DOM.div(
+        {className: "webconsole-output-wrapper"},
+        filterBar,
+        childComponent
+    ));
+
+    this.body = ReactDOM.render(provider, this.parentNode);
+  },
   dispatchMessageAdd: (message) => {
     store.dispatch(actions.messageAdd(message));
   },
   dispatchMessagesAdd: (messages) => {
     const batchedActions = messages.map(message => actions.messageAdd(message));
     store.dispatch(actions.batchActions(batchedActions));
   },
   dispatchMessagesClear: () => {
diff --git a/devtools/client/webconsole/webconsole.js b/devtools/client/webconsole/webconsole.js
index 92ac455..37ddd97 100644
--- a/devtools/client/webconsole/webconsole.js
+++ b/devtools/client/webconsole/webconsole.js
@@ -489,16 +489,20 @@ WebConsoleFrame.prototype = {
     // the returned promise because the console panel needs to be attached
     // to the toolbox before the web-console-created event is receieved.
     let notifyObservers = () => {
       let id = WebConsoleUtils.supportsString(this.hudId);
       Services.obs.notifyObservers(id, "web-console-created", null);
     };
     allReady.then(notifyObservers, notifyObservers);
 
+    if (this.NEW_CONSOLE_OUTPUT_ENABLED) {
+      allReady.then(this.newConsoleOutput.init);
+    }
+
     return allReady;
   },
 
   /**
    * Connect to the server using the remote debugging protocol.
    *
    * @private
    * @return object
