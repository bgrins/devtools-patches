# HG changeset patch
# User Lin Clark <lclark@mozilla.com>
Bug 1305788 - Part 3: Update mocha tests. r=me


diff --git a/devtools/client/webconsole/new-console-output/test/components/filter-button.test.js b/devtools/client/webconsole/new-console-output/test/components/filter-button.test.js
index f8ab7ed..3eb0cdc 100644
--- a/devtools/client/webconsole/new-console-output/test/components/filter-button.test.js
+++ b/devtools/client/webconsole/new-console-output/test/components/filter-button.test.js
@@ -15,20 +15,20 @@ describe("FilterButton component:", () => {
     active: true,
     label: "Error",
     filterKey: MESSAGE_LEVEL.ERROR,
   };
 
   it("displays as active when turned on", () => {
     const wrapper = render(FilterButton(props));
     expect(wrapper.html()).toBe(
-      "<button class=\"menu-filter-button checked\">Error</button>"
+      "<button class=\"menu-filter-button error checked\">Error</button>"
     );
   });
 
   it("displays as inactive when turned off", () => {
     const inactiveProps = Object.assign({}, props, { active: false });
     const wrapper = render(FilterButton(inactiveProps));
     expect(wrapper.html()).toBe(
-      "<button class=\"menu-filter-button\">Error</button>"
+      "<button class=\"menu-filter-button error\">Error</button>"
     );
   });
 });
diff --git a/devtools/client/webconsole/new-console-output/test/fixtures/Services.js b/devtools/client/webconsole/new-console-output/test/fixtures/Services.js
index e91d66b..61b3d5e 100644
--- a/devtools/client/webconsole/new-console-output/test/fixtures/Services.js
+++ b/devtools/client/webconsole/new-console-output/test/fixtures/Services.js
@@ -1,21 +1,27 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
+const { PREFS } = require("devtools/client/webconsole/new-console-output/constants");
+
 module.exports = {
   prefs: {
     getIntPref: pref => {
       switch (pref) {
         case "devtools.hud.loglimit":
           return 1000;
       }
     },
     getBoolPref: pref => {
-      switch (pref) {
-        default:
-          return true;
-      }
-    }
+      const falsey = [
+        PREFS.FILTER.NET,
+        PREFS.FILTER.NETXHR,
+        PREFS.UI.FILTER_BAR,
+      ];
+      return !falsey.includes(pref);
+    },
+    setBoolPref: () => {},
+    clearUserPref: () => {},
   }
 };
diff --git a/devtools/client/webconsole/new-console-output/test/store/filters.test.js b/devtools/client/webconsole/new-console-output/test/store/filters.test.js
index 04fa55a..d2ce21e 100644
--- a/devtools/client/webconsole/new-console-output/test/store/filters.test.js
+++ b/devtools/client/webconsole/new-console-output/test/store/filters.test.js
@@ -60,33 +60,33 @@ describe("Filtering", () => {
       expect(messages.size).toEqual(numMessages - 1);
     });
 
     it("filters xhr messages", () => {
       let message = stubPreparedMessages.get("XHR GET request");
       store.dispatch(messageAdd(message));
 
       let messages = getAllMessages(store.getState());
-      expect(messages.size).toEqual(numMessages + 1);
+      expect(messages.size).toEqual(numMessages);
 
       store.dispatch(actions.filterToggle("netxhr"));
       messages = getAllMessages(store.getState());
-      expect(messages.size).toEqual(numMessages);
+      expect(messages.size).toEqual(numMessages + 1);
     });
 
     it("filters network messages", () => {
       let message = stubPreparedMessages.get("GET request");
       store.dispatch(messageAdd(message));
 
       let messages = getAllMessages(store.getState());
-      expect(messages.size).toEqual(numMessages + 1);
+      expect(messages.size).toEqual(numMessages);
 
-      store.dispatch(actions.filterToggle("network"));
+      store.dispatch(actions.filterToggle("net"));
       messages = getAllMessages(store.getState());
-      expect(messages.size).toEqual(numMessages);
+      expect(messages.size).toEqual(numMessages + 1);
     });
   });
 
   describe("Text filter", () => {
     it("matches on value grips", () => {
       store.dispatch(actions.filterTextSet("danger"));
 
       let messages = getAllMessages(store.getState());
@@ -166,32 +166,32 @@ describe("Clear filters", () => {
     store.dispatch(actions.filterTextSet("foobar"));
 
     let filters = getAllFilters(store.getState());
     expect(filters.toJS()).toEqual({
       "debug": true,
       "error": false,
       "info": true,
       "log": true,
-      "network": true,
-      "netxhr": false,
+      "net": false,
+      "netxhr": true,
       "warn": true,
       "text": "foobar"
     });
 
     store.dispatch(actions.filtersClear());
 
     filters = getAllFilters(store.getState());
     expect(filters.toJS()).toEqual({
       "debug": true,
       "error": true,
       "info": true,
       "log": true,
-      "network": true,
-      "netxhr": true,
+      "net": false,
+      "netxhr": false,
       "warn": true,
       "text": ""
     });
   });
 });
 
 function prepareBaseStore() {
   const store = setupStore([
