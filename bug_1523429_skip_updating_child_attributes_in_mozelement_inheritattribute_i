# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1548717010 28800
#      Mon Jan 28 15:10:10 2019 -0800
# Node ID 319712dbe9691dbe44246dd886aa5d55732a2b1d
# Parent  f039f8426b5f90e3811f0cd8d0c3ccfd3abdfb13
Bug 1523429 - Skip updating child attributes in MozElement.inheritAttribute if the host attribute hasn't changed

Differential Revision: https://phabricator.services.mozilla.com/D17887

diff --git a/toolkit/content/customElements.js b/toolkit/content/customElements.js
--- a/toolkit/content/customElements.js
+++ b/toolkit/content/customElements.js
@@ -65,22 +65,48 @@ const MozElementMixin = Base => class Mo
   inheritAttribute(child, attr) {
     let attrName = attr;
     let attrNewName = attr;
     let split = attrName.split("=");
     if (split.length == 2) {
       attrName = split[1];
       attrNewName = split[0];
     }
+    let hasAttr = this.hasAttribute(attrName);
+    let attrValue = this.getAttribute(attrName);
 
+    // If our attribute hasn't changed since we last inherited, we don't want to
+    // propagate it down to the child. This prevents overriding an attribute that's
+    // been changed on the child (for instance, [checked]).
+    if (!this._inheritedAttributesMap) {
+      this._inheritedAttributesMap = new WeakMap();
+    }
+    if (!this._inheritedAttributesMap.has(child)) {
+      this._inheritedAttributesMap.set(child, {});
+    }
+    let lastInheritedAttributes = this._inheritedAttributesMap.get(child);
+
+    if ((hasAttr && attrValue === lastInheritedAttributes[attrName]) ||
+        (!hasAttr && !lastInheritedAttributes.hasOwnProperty(attrName))) {
+      // We got a request to inherit an unchanged attribute - bail.
+      return;
+    }
+
+    // Store the value we're about to pass down to the child.
+    if (hasAttr) {
+      lastInheritedAttributes[attrName] = attrValue;
+    } else {
+      delete lastInheritedAttributes[attrName];
+    }
+
+    // Actually set the attribute.
     if (attrNewName === "text") {
-      child.textContent =
-        this.hasAttribute(attrName) ? this.getAttribute(attrName) : "";
-    } else if (this.hasAttribute(attrName)) {
-      child.setAttribute(attrNewName, this.getAttribute(attrName));
+      child.textContent = hasAttr ? attrValue : "";
+    } else if (hasAttr) {
+      child.setAttribute(attrNewName, attrValue);
     } else {
       child.removeAttribute(attrNewName);
     }
   }
 
   /**
    * Sometimes an element may not want to run connectedCallback logic during
    * parse. This could be because we don't want to initialize the element before
diff --git a/toolkit/content/tests/chrome/test_custom_element_base.xul b/toolkit/content/tests/chrome/test_custom_element_base.xul
--- a/toolkit/content/tests/chrome/test_custom_element_base.xul
+++ b/toolkit/content/tests/chrome/test_custom_element_base.xul
@@ -103,17 +103,40 @@
        "attribute inheritance: boo");
 
     el.setAttribute("label", "label-test");
     is(el.label.textContent, "label-test",
        "attribute inheritance: text=label attribute change");
 
     el.setAttribute("bar", "bar-test");
     is(el.label.getAttribute("bardo"), "bar-test",
-       "attribute inheritance: bardo=bar");
+       "attribute inheritance: `=` mapping");
+
+    el.label.setAttribute("bardo", "changed-from-child");
+    el.inherit();
+    is(el.label.getAttribute("bardo"), "changed-from-child",
+       "attribute inheritance: doesn't apply when host attr hasn't changed and child attr was changed");
+
+    el.label.removeAttribute("bardo");
+    el.inherit();
+    ok(!el.label.hasAttribute("bardo"),
+       "attribute inheritance: doesn't apply when host attr hasn't changed and child attr was removed");
+
+    el.setAttribute("bar", "changed-from-host");
+    is(el.label.getAttribute("bardo"), "changed-from-host",
+       "attribute inheritance: does apply when host attr has changed and child attr was changed");
+
+    el.removeAttribute("bar");
+    ok(!el.label.hasAttribute("bardo"),
+       "attribute inheritance: does apply when host attr has been removed");
+
+    el.setAttribute("bar", "changed-from-host-2");
+    is(el.label.getAttribute("bardo"), "changed-from-host-2",
+       "attribute inheritance: does apply when host attr has changed after being removed");
+
   }
 
   async function testCustomInterface() {
     class SimpleElement extends MozXULElement {
       get disabled() {
         return this.getAttribute("disabled") == "true";
       }
 
