# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  805232b9fac3e87cd641f9a04817ae7a3c0dea52

diff --git a/toolkit/content/widgets/arrowscrollbox.js b/toolkit/content/widgets/arrowscrollbox.js
--- a/toolkit/content/widgets/arrowscrollbox.js
+++ b/toolkit/content/widgets/arrowscrollbox.js
@@ -77,46 +77,31 @@
       this.addEventListener("touchend", this.on_touchend);
 
       this.shadowRoot.addEventListener(
         "underflow",
         this.on_underflow.bind(this),
         true
       );
       this.shadowRoot.addEventListener(
-        "onoverflow",
+        "overflow",
         this.on_overflow.bind(this),
         true
       );
       this.scrollbox.addEventListener("scroll", this.on_scroll.bind(this));
 
       this.shadowRoot.addEventListener(
         "scrollend",
         this.on_scrollend.bind(this)
       );
 
-      this.shadowRoot.addEventListener("click", this.on_click.bind(this));
-      this.shadowRoot.addEventListener(
-        "mousedown",
-        this.on_mousedown.bind(this)
-      );
-      this.shadowRoot.addEventListener(
-        "mouseover",
-        this.on_mouseover.bind(this)
-      );
-      this.shadowRoot.addEventListener("mouseout", this.on_mouseout.bind(this));
-
-      // Ultimately Bug 1514926 will convert arrowscrollbox binding to a custom element.
-      // For the needs of Bug 1497189, where we apply a custom CSP to about:addons, we had
-      // to remove inline handlers and hence added event listeners for mouse events here.
-      this.shadowRoot.addEventListener("click", e => {});
-      this.shadowRoot.addEventListener("mousedown", e => {});
-      this.shadowRoot.addEventListener("mouseup", e => {});
-      this.shadowRoot.addEventListener("mouseover", e => {});
-      this.shadowRoot.addEventListener("mouseout", e => {});
+      this.addEventListener("click", this.on_click);
+      this.addEventListener("mousedown", this.on_mousedown);
+      this.addEventListener("mouseover", this.on_mouseover);
+      this.addEventListener("mouseout", this.on_mouseout);
     }
 
     static get inheritedAttributes() {
       return {
         ".scrollbutton-up": "orient,disabled=scrolledtostart",
         "[part=scrollbox]": "orient,align,pack,dir,smoothscroll",
         ".scrollbutton-down": "orient,disabled=scrolledtoend",
       };
@@ -140,25 +125,34 @@
         <html:slot></html:slot>
       </scrollbox>
       <spacer part="arrowscrollbox-overflow-end-indicator"></spacer>
       <toolbarbutton class="scrollbutton-down" part="scrollbutton-down"/>
     `;
     }
 
     connectedCallback() {
-      if (!this.hasConnected) {
-        this.setAttribute("notoverflowing", "true");
+      if (this.hasConnected) {
+        return;
       }
       this.hasConnected = true;
 
+      if (!this.hasAttribute("smoothscroll")) {
+        this.smoothScroll = Services.prefs.getBoolPref(
+          "toolkit.scrollbox.smoothScroll",
+          true
+        );
+      }
+
+      this.setAttribute("notoverflowing", "true");
       this._updateScrollButtonsDisabledState();
     }
 
     get _clickToScroll() {
+      return true;
       return this.hasAttribute("clicktoscroll");
     }
 
     get _scrollDelay() {
       if (this._clickToScroll) {
         return Services.prefs.getIntPref(
           "toolkit.scrollbox.clickToScroll.scrollDelay",
           150
@@ -198,23 +192,17 @@
     }
 
     set smoothScroll(val) {
       this.setAttribute("smoothscroll", !!val);
       return val;
     }
 
     get smoothScroll() {
-      if (!this.hasAttribute("smoothscroll")) {
-        this.smoothScroll = Services.prefs.getBoolPref(
-          "toolkit.scrollbox.smoothScroll",
-          true
-        );
-      }
-
+      return false;
       return this.getAttribute("smoothscroll") == "true";
     }
 
     get scrollClientRect() {
       return this.scrollbox.getBoundingClientRect();
     }
 
     get scrollClientSize() {
@@ -258,16 +246,17 @@
 
     _onButtonMouseUp(event) {
       if (this._clickToScroll && event.button == 0) {
         this._stopScroll();
       }
     }
 
     _onButtonMouseOver(index) {
+      console.log("HERE", this._clickToScroll);
       if (this._clickToScroll) {
         this._continueScroll(index);
       } else {
         this._startScroll(index);
       }
     }
 
     _onButtonMouseOut() {
@@ -783,19 +772,19 @@
         if (event.detail == 1) {
           ignore = true;
         }
       } else if (event.detail == 0) {
         // horizontal scrollbox
         ignore = true;
       }
 
-      if (!ignore) {
-        this.setAttribute("notoverflowing", "true");
-        this._updateScrollButtonsDisabledState();
+      if (ignore) {
+      this.setAttribute("notoverflowing", "true");
+      this._updateScrollButtonsDisabledState();
       }
       this.dispatchEvent(new Event("underflow"));
     }
 
     on_overflow(event) {
       // Ignore overflow events:
       // - from nested scrollable elements
       if (event.target != this.scrollbox) {
