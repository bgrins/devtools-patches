# HG changeset patch
# User Gabriel Luong <gabriel.luong@gmail.com>
# Parent  fad6863f66950a7c4bf21076118f952673608a4e

diff --git a/devtools/client/inspector/inspector.js b/devtools/client/inspector/inspector.js
--- a/devtools/client/inspector/inspector.js
+++ b/devtools/client/inspector/inspector.js
@@ -2294,18 +2294,18 @@ Inspector.prototype = {
    */
   copyAttributeLink: function (link) {
     this.inspector.resolveRelativeURL(link, this.selection.nodeFront).then(url => {
       clipboardHelper.copyString(url);
     }, console.error);
   },
 
   /**
-   * Returns an object containing the shared handler functions used in the box
-   * model and grid React components.
+   * Returns an object containing the shared handler functions used in the markup,
+   * box model and grid React components.
    */
   getCommonComponentProps() {
     return {
       setSelectedNode: this.selection.setNodeFront,
       onShowBoxModelHighlighterForNode: this.onShowBoxModelHighlighterForNode,
     };
   },
 
@@ -2315,17 +2315,18 @@ Inspector.prototype = {
    *
    * @param  {NodeFront} nodeFront
    *         The node to highlight.
    * @param  {Object} options
    *         Options passed to the highlighter actor.
    */
   onShowBoxModelHighlighterForNode(nodeFront, options) {
     let toolbox = this.toolbox;
-    toolbox.highlighterUtils.highlightNodeFront(nodeFront, options);
+    toolbox.highlighterUtils.highlightNodeFront(nodeFront, options)
+      .catch(e => console.error(e));
   },
 
   /**
    * Returns a value indicating whether a node can be deleted.
    *
    * @param {NodeFront} nodeFront
    *        The node to test for deletion
    */
diff --git a/devtools/client/inspector/inspector.xhtml b/devtools/client/inspector/inspector.xhtml
--- a/devtools/client/inspector/inspector.xhtml
+++ b/devtools/client/inspector/inspector.xhtml
@@ -11,16 +11,17 @@
   <link rel="stylesheet" href="chrome://devtools/skin/breadcrumbs.css"/>
   <link rel="stylesheet" href="chrome://devtools/skin/inspector.css"/>
   <link rel="stylesheet" href="chrome://devtools/skin/rules.css"/>
   <link rel="stylesheet" href="chrome://devtools/skin/computed.css"/>
   <link rel="stylesheet" href="chrome://devtools/skin/fonts.css"/>
   <link rel="stylesheet" href="chrome://devtools/skin/boxmodel.css"/>
   <link rel="stylesheet" href="chrome://devtools/skin/layout.css"/>
   <link rel="stylesheet" href="chrome://devtools/skin/animation.css"/>
+  <link rel="stylesheet" href="chrome://devtools/skin/new-markup.css"/>
   <link rel="stylesheet" href="resource://devtools/client/shared/components/tabs/Tabs.css"/>
   <link rel="stylesheet" href="resource://devtools/client/shared/components/tabs/TabBar.css"/>
   <link rel="stylesheet" href="resource://devtools/client/shared/components/SidebarToggle.css"/>
   <link rel="stylesheet" href="resource://devtools/client/inspector/components/InspectorTabPanel.css"/>
   <link rel="stylesheet" href="resource://devtools/client/shared/components/splitter/SplitBox.css"/>
   <link rel="stylesheet" href="resource://devtools/client/inspector/layout/components/Accordion.css"/>
   <link rel="stylesheet" href="resource://devtools/client/shared/components/reps/reps.css"/>
   <link rel="stylesheet" href="resource://devtools/client/shared/components/tree/TreeView.css"/>
diff --git a/devtools/client/inspector/markup/actions/index.js b/devtools/client/inspector/markup/actions/index.js
--- a/devtools/client/inspector/markup/actions/index.js
+++ b/devtools/client/inspector/markup/actions/index.js
@@ -3,11 +3,19 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const { createEnum } = require("devtools/client/shared/enum");
 
 createEnum([
 
+  "UPDATE_COLLAPSE_ATTRIBUTES",
+
+  "UPDATE_COLLAPSE_ATTRIBUTE_LENGTH",
+
+  "UPDATE_HOVERED_NODE",
+
   "UPDATE_MARKUP",
 
+  "UPDATE_SELECTED_NODE",
+
 ], module.exports);
diff --git a/devtools/client/inspector/markup/actions/markup.js b/devtools/client/inspector/markup/actions/markup.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/inspector/markup/actions/markup.js
@@ -0,0 +1,55 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const {
+  UPDATE_COLLAPSE_ATTRIBUTES,
+  UPDATE_COLLAPSE_ATTRIBUTE_LENGTH,
+  UPDATE_HOVERED_NODE,
+  UPDATE_MARKUP,
+  UPDATE_SELECTED_NODE,
+} = require("./index");
+
+module.exports = {
+
+  updateCollapseAttributes(enabled) {
+    return {
+      type: UPDATE_COLLAPSE_ATTRIBUTES,
+      enabled,
+    };
+  },
+
+  updateCollapseAttributeLength(length) {
+    return {
+      type: UPDATE_COLLAPSE_ATTRIBUTE_LENGTH,
+      length,
+    };
+  },
+
+  updateHoveredNode(hoveredNode) {
+    return {
+      type: UPDATE_HOVERED_NODE,
+      hoveredNode,
+    };
+  },
+
+  updateMarkup({ hoveredNode, rootNode, selectedNode, tree }) {
+    return {
+      type: UPDATE_MARKUP,
+      hoveredNode,
+      rootNode,
+      selectedNode,
+      tree,
+    };
+  },
+
+  updateSelectedNode(selectedNode) {
+    return {
+      type: UPDATE_SELECTED_NODE,
+      selectedNode,
+    };
+  },
+
+};
diff --git a/devtools/client/inspector/markup/actions/moz.build b/devtools/client/inspector/markup/actions/moz.build
--- a/devtools/client/inspector/markup/actions/moz.build
+++ b/devtools/client/inspector/markup/actions/moz.build
@@ -1,9 +1,10 @@
 # -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
 # vim: set filetype=python:
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 DevToolsModules(
     'index.js',
+    'markup.js',
 )
diff --git a/devtools/client/inspector/markup/components/DocTypeNode.js b/devtools/client/inspector/markup/components/DocTypeNode.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/inspector/markup/components/DocTypeNode.js
@@ -0,0 +1,29 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const { PureComponent } = require("devtools/client/shared/vendor/react");
+const dom = require("devtools/client/shared/vendor/react-dom-factories");
+const PropTypes = require("devtools/client/shared/vendor/react-prop-types");
+
+class DocTypeNode extends PureComponent {
+  static get propTypes() {
+    return {
+      node: PropTypes.object.isRequired,
+    };
+  }
+
+  render() {
+    const { node } = this.props;
+
+    return dom.span({ className: "comment doctype editor" },
+      dom.span({ className: "tag", tabIndex: -1 },
+        node.doctypeString
+      )
+    );
+  }
+}
+
+module.exports = DocTypeNode;
diff --git a/devtools/client/inspector/markup/components/ElementNode.js b/devtools/client/inspector/markup/components/ElementNode.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/inspector/markup/components/ElementNode.js
@@ -0,0 +1,133 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const { createFactory, PureComponent } = require("devtools/client/shared/vendor/react");
+const dom = require("devtools/client/shared/vendor/react-dom-factories");
+const PropTypes = require("devtools/client/shared/vendor/react-prop-types");
+
+const NodeAttribute = createFactory(require("./NodeAttribute"));
+const TextNode = createFactory(require("./TextNode"));
+
+const { getStr } = require("../utils/l10n");
+
+// Contains only void (without end tag) HTML elements
+const HTML_VOID_ELEMENTS = [
+  "area", "base", "br", "col", "command", "embed",
+  "hr", "img", "input", "keygen", "link", "meta", "param", "source",
+  "track", "wbr" ];
+
+class ElementNode extends PureComponent {
+  static get propTypes() {
+    return {
+      markup: PropTypes.object.isRequired,
+      node: PropTypes.object.isRequired,
+    };
+  }
+
+  renderCloseTag() {
+    const { node } = this.props;
+    const isVoidElement = HTML_VOID_ELEMENTS.includes(node.displayName);
+
+    if (node.isInHTMLDocument && isVoidElement) {
+      return null;
+    }
+
+    return (
+      dom.span({ className: "close" },
+        "</",
+        dom.span({ className: "tag theme-fg-color3" }, node.displayName),
+        ">"
+      )
+    );
+  }
+
+  renderEventTooltip() {
+    const { node } = this.props;
+
+    if (!node.hasEventListeners) {
+      return null;
+    }
+
+    return (
+      dom.div(
+        {
+          className: "markupview-events",
+          title: getStr("markupView.event.tooltiptext"),
+          "data-event": true,
+        },
+        "ev"
+      )
+    );
+  }
+
+  renderInlineTextChild() {
+    const { node } = this.props;
+
+    if (!node.inlineTextChild) {
+      return null;
+    }
+
+    return (
+      TextNode({
+        node: node.inlineTextChild,
+        type: "text",
+      })
+    );
+  }
+
+  render() {
+    const {
+      markup,
+      node,
+    } = this.props;
+    const attributes = node.attributes.sort(compareAttributeNames);
+
+    return dom.span({ className: "editor" },
+      dom.span({ className: "open" },
+        "<",
+        dom.span({ className: "tag theme-fg-color3", tabIndex: -1 },
+          node.nodeName.toLowerCase()
+        ),
+        dom.span({},
+          attributes.map(attribute => {
+            return NodeAttribute({
+              key: attribute.name,
+              attribute,
+              markup,
+              node,
+            });
+          })
+        ),
+        dom.span({ className: "newattr", tabIndex: -1 }),
+        dom.span({ className: "closing-bracket"}, ">")
+      ),
+      this.renderInlineTextChild(),
+      this.renderCloseTag(),
+      this.renderEventTooltip()
+    );
+  }
+}
+
+/**
+ * A compare function to be used when sorting the array of node attributes. This will
+ * prioritize "id" and "class" being at the front of the array.
+ */
+function compareAttributeNames(a, b) {
+  let nameA = a.name.toLowerCase();
+  let nameB = b.name.toLowerCase();
+
+  if (nameA === "id" || nameA === "class") {
+    return -1;
+  }
+
+  if (nameB === "id" || nameB === "class") {
+    return 1;
+  }
+
+  return 0;
+}
+
+module.exports = ElementNode;
diff --git a/devtools/client/inspector/markup/components/MarkupApp.js b/devtools/client/inspector/markup/components/MarkupApp.js
--- a/devtools/client/inspector/markup/components/MarkupApp.js
+++ b/devtools/client/inspector/markup/components/MarkupApp.js
@@ -1,25 +1,48 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
-const { PureComponent } = require("devtools/client/shared/vendor/react");
+const { createFactory, PureComponent } = require("devtools/client/shared/vendor/react");
 const dom = require("devtools/client/shared/vendor/react-dom-factories");
+const PropTypes = require("devtools/client/shared/vendor/react-prop-types");
 const { connect } = require("devtools/client/shared/vendor/react-redux");
 
+const TreeView = createFactory(require("./TreeView"));
+
 class MarkupApp extends PureComponent {
   static get propTypes() {
-    return {};
+    return {
+      markup: PropTypes.object.isRequired,
+      onSelectNode: PropTypes.func.isRequired,
+      onToggleNodeExpanded: PropTypes.func.isRequired,
+    };
   }
 
   render() {
+    const {
+      markup,
+      onSelectNode,
+      onToggleNodeExpanded,
+    } = this.props;
+    const { tree } = markup;
+
     return dom.div(
       {
         id: "markup-container",
-      }
+        className: "theme-body devtools-monospace",
+      },
+      tree.size ?
+        TreeView({
+          markup,
+          onSelectNode,
+          onToggleNodeExpanded,
+        })
+        :
+        null
     );
   }
 }
 
 module.exports = connect(state => state)(MarkupApp);
diff --git a/devtools/client/inspector/markup/components/Node.js b/devtools/client/inspector/markup/components/Node.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/inspector/markup/components/Node.js
@@ -0,0 +1,244 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const { createElement, createFactory, PureComponent } = require("devtools/client/shared/vendor/react");
+const dom = require("devtools/client/shared/vendor/react-dom-factories");
+const PropTypes = require("devtools/client/shared/vendor/react-prop-types");
+const {
+  COMMENT_NODE,
+  DOCUMENT_TYPE_NODE,
+  ELEMENT_NODE,
+  TEXT_NODE,
+} = require("devtools/shared/dom-node-constants");
+
+const DocTypeNode = createFactory(require("./DocTypeNode"));
+const ElementNode = createFactory(require("./ElementNode"));
+const PseudoElement = createFactory(require("./PseudoElement"));
+const ReadOnlyNode = createFactory(require("./ReadOnlyNode"));
+const TextNode = createFactory(require("./TextNode"));
+
+// This component is equivalent to MarkupContainer.
+
+class Node extends PureComponent {
+  static get propTypes() {
+    return {
+      markup: PropTypes.object.isRequired,
+      node: PropTypes.object.isRequired,
+      onSelectNode: PropTypes.func.isRequired,
+      onToggleNodeExpanded: PropTypes.func.isRequired,
+    };
+  }
+
+  constructor(props) {
+    super(props);
+
+    this.state = {
+      isHovered: false,
+    };
+
+    this.onExpanderToggle = this.onExpanderToggle.bind(this);
+    this.onSelectNodeClick = this.onSelectNodeClick.bind(this);
+    this.onMouseMove = this.onMouseMove.bind(this);
+    this.onMouseOut = this.onMouseOut.bind(this);
+  }
+
+  onExpanderToggle(event) {
+    event.stopPropagation();
+
+    const {
+      markup,
+      node,
+      onToggleNodeExpanded,
+    } = this.props;
+    const { tree } = markup;
+    const { isExpanded } = tree.get(node);
+    onToggleNodeExpanded(node, isExpanded);
+  }
+
+  onMouseMove(event) {
+    this.setState({ isHovered: true });
+  }
+
+  onMouseOut(event) {
+    this.setState({ isHovered: false });
+  }
+
+  onSelectNodeClick(event) {
+    event.stopPropagation();
+
+    const {
+      node,
+      onSelectNode,
+    } = this.props;
+
+    onSelectNode(node);
+  }
+
+  /**
+   * Renders the children of the current node.
+   */
+  renderChildren() {
+    const {
+      markup,
+      node,
+      onSelectNode,
+      onToggleNodeExpanded,
+    } = this.props;
+    const { tree } = markup;
+
+    if (!tree.has(node) || node.inlineTextChild) {
+      return null;
+    }
+
+    const children = tree.get(node).children || [];
+
+    return children.map(child => {
+      return createElement(Node, {
+        key: child.actorID,
+        markup,
+        node: child,
+        onSelectNode,
+        onToggleNodeExpanded,
+      });
+    });
+  }
+
+  /**
+   * Renders the closing tag of the current node.
+   */
+  renderClosingTag() {
+    const { node } = this.props;
+    const { isHovered } = this.state;
+    // Whether or not the node can be expander - True if Nnde has children and child is
+    // not an inline text node.
+    const canExpand = node.hasChildren && !node.inlineTextChild;
+
+    if (!canExpand) {
+      return null;
+    }
+
+    return (
+      dom.div({ className: "tag-line", role: "presentation" },
+        dom.div({ className: "tag-state" + (isHovered ? " tag-hover" : "") }),
+        dom.span({ className: "close" },
+          "</",
+          dom.span({ className: "tag theme-fg-color3" }, node.displayName),
+          ">"
+        )
+      )
+    );
+  }
+
+  renderComponent() {
+    const {
+      markup,
+      node,
+    } = this.props;
+
+    let component = null;
+    if (node.isPseudoElement) {
+      component = PseudoElement({ node });
+    } else if (node.nodeType == DOCUMENT_TYPE_NODE) {
+      component = DocTypeNode({ node });
+    } else if (node.nodeType == ELEMENT_NODE) {
+      component = ElementNode({
+        markup,
+        node
+      });
+    } else if (node.nodeType == COMMENT_NODE) {
+      component = TextNode({
+        node,
+        type: "comment",
+      });
+    } else if (node.nodeType == TEXT_NODE) {
+      component = TextNode({
+        node,
+        type: "text",
+      });
+    } else {
+      component = ReadOnlyNode({ node });
+    }
+
+    return component;
+  }
+
+  render() {
+    const {
+      markup,
+      node,
+    } = this.props;
+    const {
+      hoveredNode,
+      rootNode,
+      selectedNode,
+      tree,
+    } = markup;
+    // const { isHovered } = this.state;
+    let isHovered = hoveredNode == node;
+
+    const { parent, isExpanded } = tree.get(node);
+    // Whether or not the node can be expander - True if Nnde has children and child is
+    // not an inline text node.
+    const canExpand = node.hasChildren && !node.inlineTextChild;
+    // Whether or not to the show the expander - True if node can expand and the parent
+    // node is not the root node.
+    const showExpander = canExpand && parent !== rootNode;
+    let isSelected = node === selectedNode;
+
+    return dom.li(
+      {
+        className: "child" +
+                   (!isExpanded || node.inlineTextChild ? " collapsed" : "") +
+                   (!node.isDisplayed || node.hidden ? " not-displayed" : "") +
+                   (showExpander ? " expandable" : ""),
+        role: "presentation",
+        onClick: this.onSelectNodeClick,
+        // onMouseMove: this.onMouseMove,
+        // onMouseLeave: this.onMouseOut,
+        // onMouseOut: this.onMouseOut,
+      },
+      dom.div(
+        {
+          className: "tag-line" +
+                     (isSelected ? " selected" : ""),
+          role: "treeitem",
+        },
+        dom.span(
+          {
+            className: "tag-state" +
+                       (isSelected ? " theme-selected" : "") +
+                       (!isSelected && isHovered ? " tag-hover" : ""),
+            role: "presentation",
+          }
+        ),
+        node.hasChildren ?
+          dom.span(
+            {
+              className: "theme-twisty expander" +
+                         (isExpanded ? " open" : ""),
+              style: {
+                visibility: showExpander ? "visible" : "hidden",
+              },
+              onClick: this.onExpanderToggle,
+            }
+          )
+          :
+          null,
+        this.renderComponent()
+      ),
+      dom.ul(
+        {
+          className: "children",
+          role: node.hasChildren ? "group" : "",
+        },
+        this.renderChildren()
+      ),
+      this.renderClosingTag()
+    );
+  }
+}
+
+module.exports = Node;
diff --git a/devtools/client/inspector/markup/components/NodeAttribute.js b/devtools/client/inspector/markup/components/NodeAttribute.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/inspector/markup/components/NodeAttribute.js
@@ -0,0 +1,92 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const { PureComponent } = require("devtools/client/shared/vendor/react");
+const dom = require("devtools/client/shared/vendor/react-dom-factories");
+const PropTypes = require("devtools/client/shared/vendor/react-prop-types");
+
+const { truncateString } = require("devtools/client/inspector/markup/utils");
+const { parseAttribute } = require("devtools/client/shared/node-attribute-parser");
+
+const COLLAPSE_DATA_URL_REGEX = /^data.+base64/;
+const COLLAPSE_DATA_URL_LENGTH = 60;
+
+class NodeAttribute extends PureComponent {
+  static get propTypes() {
+    return {
+      attribute: PropTypes.object.isRequired,
+      markup: PropTypes.object.isRequired,
+      node: PropTypes.object.isRequired,
+    };
+  }
+
+  /**
+   * Truncates the given attribute value if it is a base65 data URL or the
+   * collapse attributes pref is enabled.
+   *
+   * @param  {String} value
+   *         Attribute value.
+   * @return {String} truncated attribute value.
+   */
+  truncateValue(value) {
+    if (value && value.match(COLLAPSE_DATA_URL_REGEX)) {
+      return truncateString(value, COLLAPSE_DATA_URL_LENGTH);
+    }
+
+    const {
+      collapseAttributes,
+      collapseAttributeLength,
+    } = this.props.markup;
+
+    return collapseAttributes ? truncateString(value, collapseAttributeLength) : value;
+  }
+
+  render() {
+    const {
+      attribute,
+      node,
+    } = this.props;
+
+    // Parse the attribute value to detect whether there are linkable parts in it
+    let parsedLinksData = parseAttribute(node.namespaceURI, node.tagName,
+      node.attributes, attribute.name);
+
+    let value;
+    for (let token of parsedLinksData) {
+      if (token.type === "string") {
+        value = this.truncateValue(token.value);
+      } else {
+        value = (
+          dom.span(
+            {
+              className: "link",
+              "data-link": token.value,
+              "data-type": token.type,
+            },
+            token.value
+          )
+        );
+      }
+    }
+
+    return dom.span(
+      {
+        className: "attreditor",
+        "data-attr": attribute.name,
+        "data-value": attribute.value,
+      },
+      " ",
+      dom.span({ className: "editable", tabIndex: 0 },
+        dom.span({ className: "attr-name theme-fg-color2" }, attribute.name),
+        "=\"",
+        dom.span({ className: "attr-value theme-fg-color6" }, value),
+        "\""
+      )
+    );
+  }
+}
+
+module.exports = NodeAttribute;
diff --git a/devtools/client/inspector/markup/components/PseudoElement.js b/devtools/client/inspector/markup/components/PseudoElement.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/inspector/markup/components/PseudoElement.js
@@ -0,0 +1,29 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const { PureComponent } = require("devtools/client/shared/vendor/react");
+const dom = require("devtools/client/shared/vendor/react-dom-factories");
+const PropTypes = require("devtools/client/shared/vendor/react-prop-types");
+
+class PseudoElement extends PureComponent {
+  static get propTypes() {
+    return {
+      node: PropTypes.object.isRequired,
+    };
+  }
+
+  render() {
+    const { node } = this.props;
+
+    return dom.span({ className: "editor" },
+      dom.span({ className: "tag theme-fg-color5", tabIndex: -1 },
+        node.isBeforePseudoElement ? "::before" : "::after"
+      )
+    );
+  }
+}
+
+module.exports = PseudoElement;
diff --git a/devtools/client/inspector/markup/components/ReadOnlyNode.js b/devtools/client/inspector/markup/components/ReadOnlyNode.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/inspector/markup/components/ReadOnlyNode.js
@@ -0,0 +1,29 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const { PureComponent } = require("devtools/client/shared/vendor/react");
+const dom = require("devtools/client/shared/vendor/react-dom-factories");
+const PropTypes = require("devtools/client/shared/vendor/react-prop-types");
+
+class ReadOnlyNode extends PureComponent {
+  static get propTypes() {
+    return {
+      node: PropTypes.object.isRequired,
+    };
+  }
+
+  render() {
+    const { node } = this.props;
+
+    return dom.span({ className: "editor" },
+      dom.span({ className: "tag" },
+        node.nodeName
+      )
+    );
+  }
+}
+
+module.exports = ReadOnlyNode;
diff --git a/devtools/client/inspector/markup/components/TextNode.js b/devtools/client/inspector/markup/components/TextNode.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/inspector/markup/components/TextNode.js
@@ -0,0 +1,106 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const { PureComponent } = require("devtools/client/shared/vendor/react");
+const dom = require("devtools/client/shared/vendor/react-dom-factories");
+const PropTypes = require("devtools/client/shared/vendor/react-prop-types");
+
+const { getFormatStr } = require("../utils/l10n");
+
+const COMMENT = "comment";
+
+class TextNode extends PureComponent {
+  static get propTypes() {
+    return {
+      node: PropTypes.object.isRequired,
+      type: PropTypes.string.isRequired,
+    };
+  }
+
+  constructor(props) {
+    super(props);
+
+    this.state = {
+      // The String value of the node.
+      value: "",
+      // Whether or not the value of the node is whitespace only.
+      isWhiteSpace: false,
+    };
+  }
+
+  componentWillMount() {
+    this.updateState();
+  }
+
+  componentWillReceiveProps(nextProps) {
+    if (this.props.node !== nextProps.node) {
+      this.updateState();
+    }
+  }
+
+  shouldComponentUpdate(nextProps, nextState) {
+    return this.state.value !== nextState.value ||
+           this.state.isWhiteSpace !== nextState.isWhiteSpace;
+  }
+
+  async updateState() {
+    const { node } = this.props;
+
+    let value, isWhiteSpace;
+    try {
+      let longstr = await node.getNodeValue();
+      value = await longstr.string();
+      longstr.release();
+      isWhiteSpace = !/[^\s]/.exec(value);
+    } catch (e) {
+      console.error(e);
+      return;
+    }
+
+    this.setState({
+      value,
+      isWhiteSpace,
+    });
+  }
+
+  render() {
+    const { type } = this.props;
+    const {
+      value,
+      isWhiteSpace,
+    } = this.state;
+
+    return dom.span({ className: "editor " + type },
+      type == COMMENT ?
+        dom.span({}, "<!--")
+        :
+        null,
+      dom.pre(
+        {
+          className: isWhiteSpace ? "whitespace" : "",
+          style: {
+            display: "inline-block",
+            "white-space": "normal",
+          },
+          tabIndex: -1,
+          title: isWhiteSpace ? getFormatStr("markupView.whitespaceOnly",
+            value.replace(/\n/g, "⏎")
+                 .replace(/\t/g, "⇥")
+                 .replace(/ /g, "◦"))
+            :
+            "",
+        },
+        value
+      ),
+      type == COMMENT ?
+        dom.span({}, "-->")
+        :
+        null
+    );
+  }
+}
+
+module.exports = TextNode;
diff --git a/devtools/client/inspector/markup/components/TreeView.js b/devtools/client/inspector/markup/components/TreeView.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/inspector/markup/components/TreeView.js
@@ -0,0 +1,52 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const { createFactory, PureComponent } = require("devtools/client/shared/vendor/react");
+const dom = require("devtools/client/shared/vendor/react-dom-factories");
+const PropTypes = require("devtools/client/shared/vendor/react-prop-types");
+
+const Node = createFactory(require("./Node"));
+
+class TreeView extends PureComponent {
+  static get propTypes() {
+    return {
+      markup: PropTypes.object.isRequired,
+      onSelectNode: PropTypes.func.isRequired,
+      onToggleNodeExpanded: PropTypes.func.isRequired,
+    };
+  }
+
+  render() {
+    const {
+      markup,
+      onSelectNode,
+      onToggleNodeExpanded,
+    } = this.props;
+    const {
+      rootNode,
+      tree,
+    } = markup;
+
+    return dom.ul(
+      {
+        "aria-dropeffect": "none",
+        role: "tree",
+        tabIndex: 0,
+      },
+      tree.get(rootNode).children.map(child => {
+        return Node({
+          key: child.actorID,
+          markup,
+          node: child,
+          onSelectNode,
+          onToggleNodeExpanded,
+        });
+      })
+    );
+  }
+}
+
+module.exports = TreeView;
diff --git a/devtools/client/inspector/markup/components/moz.build b/devtools/client/inspector/markup/components/moz.build
--- a/devtools/client/inspector/markup/components/moz.build
+++ b/devtools/client/inspector/markup/components/moz.build
@@ -1,9 +1,17 @@
 # -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
 # vim: set filetype=python:
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 DevToolsModules(
+    'DocTypeNode.js',
+    'ElementNode.js',
     'MarkupApp.js',
+    'Node.js',
+    'NodeAttribute.js',
+    'PseudoElement.js',
+    'ReadOnlyNode.js',
+    'TextNode.js',
+    'TreeView.js',
 )
diff --git a/devtools/client/inspector/markup/moz.build b/devtools/client/inspector/markup/moz.build
--- a/devtools/client/inspector/markup/moz.build
+++ b/devtools/client/inspector/markup/moz.build
@@ -3,16 +3,17 @@
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 DIRS += [
     'actions',
     'components',
     'reducers',
+    'utils',
     'views',
 ]
 
 DevToolsModules(
     'markup.js',
     'new-markup.js',
     'utils.js',
 )
diff --git a/devtools/client/inspector/markup/new-markup.js b/devtools/client/inspector/markup/new-markup.js
--- a/devtools/client/inspector/markup/new-markup.js
+++ b/devtools/client/inspector/markup/new-markup.js
@@ -1,50 +1,302 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
+const Services = require("Services");
 const { createFactory, createElement } = require("devtools/client/shared/vendor/react");
 const { Provider } = require("devtools/client/shared/vendor/react-redux");
+const {PrefObserver} = require("devtools/client/shared/prefs");
+
+const {
+  updateCollapseAttributes,
+  updateCollapseAttributeLength,
+  updateHoveredNode,
+  updateMarkup,
+  updateSelectedNode,
+} = require("./actions/markup");
 
 const MarkupApp = createFactory(require("./components/MarkupApp"));
 
 const { LocalizationHelper } = require("devtools/shared/l10n");
 const INSPECTOR_L10N =
   new LocalizationHelper("devtools/client/locales/inspector.properties");
 
+// Max number of children that will be fetched by the walker.
+const DEFAULT_MAX_CHILDREN = 100;
+const ATTR_COLLAPSE_ENABLED_PREF = "devtools.markup.collapseAttributes";
+const ATTR_COLLAPSE_LENGTH_PREF = "devtools.markup.collapseAttributeLength";
+
 class MarkupView {
   constructor(inspector, window) {
     this.document = window.document;
     this.inspector = inspector;
+    this.maxChildren = Services.prefs.getIntPref("devtools.markup.pagesize",
+      DEFAULT_MAX_CHILDREN);
+    this.prefObserver = new PrefObserver("devtools.markup");
     this.store = inspector.store;
+    this.toolbox = inspector.toolbox;
+    // A map containing the markup tree. The key to the map represents the NodeFront of
+    // a given node. The value of each item in the map contains an object representing the
+    // properties of the given node which includes the following:
+    // {
+    //   children: {Array},
+    //      An array of NodeFront objects representing the child nodes
+    //      of the given node.
+    //   parent: {NodeFront},
+    //      The NodeFront of the parent to the given node.
+    //   isExpanded: {Boolean},
+    //      Whether or not the given node is expanded in the tree.
+    // }
+    this.tree = new Map();
+    this.walker = inspector.walker;
+
+    this.onPickerNodeHover = this.onPickerNodeHover.bind(this);
+    this.onSelection = this.onSelection.bind(this);
+    this.onSelectNode = this.onSelectNode.bind(this);
+    this.onToggleNodeExpanded = this.onToggleNodeExpanded.bind(this);
+
+    this.inspector.selection.on("new-node-front", this.onSelection);
+    this.toolbox.on("picker-node-hovered", this.onPickerNodeHover);
 
     this.init();
   }
 
   init() {
     if (!this.inspector) {
       return;
     }
 
-    let markupApp = MarkupApp({});
+    this.loadMarkupSettings();
 
-    let provider = createElement(Provider, {
+    const markupApp = MarkupApp({
+      onSelectNode: this.onSelectNode,
+      onToggleNodeExpanded: this.onToggleNodeExpanded,
+    });
+
+    const provider = createElement(Provider, {
       id: "markupview",
       key: "markupview",
       store: this.store,
       title: INSPECTOR_L10N.getStr("inspector.sidebar.ruleViewTitle")
     }, markupApp);
 
     // Expose the provider to let inspector.js use it in setupSidebar.
     this.provider = provider;
   }
 
   destroy() {
+    this.inspector.selection.off("new-node-front", this.onSelection);
+    this.toolbox.off("picker-node-hovered", this.onPickerNodeHover);
+
+    this.prefObserver.destroy();
+    this.tree.clear();
+
     this.document = null;
     this.inspector = null;
+    this.maxChildren = null;
+    this.prefObserver = null;
     this.store = null;
+    this.toolbox = null;
+    this.tree = null;
+    this.walker = null;
+  }
+
+  collapseNode(node) {
+    if (!this.isPanelVisible()) {
+      return;
+    }
+
+    this.tree.get(node).isExpanded = false;
+
+    const { setSelectedNode } = this.inspector.getCommonComponentProps();
+    setSelectedNode(node);
+
+    this.store.dispatch(updateMarkup({
+      rootNode: this.walker.rootNode,
+      selectedNode: node,
+      tree: this.tree,
+    }));
+  }
+
+  async expandNode(node) {
+    if (!this.isPanelVisible()) {
+      return;
+    }
+
+    await this.getChildren(node);
+    this.tree.get(node).isExpanded = true;
+
+    const { setSelectedNode } = this.inspector.getCommonComponentProps();
+    setSelectedNode(node);
+
+    this.store.dispatch(updateMarkup({
+      rootNode: this.walker.rootNode,
+      selectedNode: node,
+      tree: this.tree,
+    }));
+  }
+
+  /**
+   * Helper function to the update() function. Fetches the children and adds them to the
+   * markup tree.
+   *
+   * @param  {NodeFront} node
+   *         The NodeFront of the node to fetch the children from.
+   * @param  {NodeFront} center
+   */
+  async getChildren(node, center = null) {
+    let children = await this.walker.children(node, {
+      maxNodes: this.maxChildren,
+      center,
+    });
+
+    this.tree.get(node).children = children.nodes;
+
+    // Add the children into the tree model. No need to fetch their children yet
+    // since they aren't expanded.
+    for (let child of children.nodes) {
+      if (!this.tree.has(child)) {
+        this.tree.set(child, {
+          parent: node,
+          isExpanded: false,
+        });
+      }
+    }
+  }
+
+  /**
+   * Returns true if the inspector is visisble, and false otherwise.
+   */
+  isPanelVisible() {
+    return this.inspector && this.inspector.toolbox &&
+           this.inspector.toolbox.currentToolId === "inspector";
+  }
+
+  loadMarkupSettings() {
+    const { dispatch } = this.store;
+
+    let collapseAttributes = Services.prefs.getBoolPref(ATTR_COLLAPSE_ENABLED_PREF);
+    let collapseAttributeLength = Services.prefs.getIntPref(ATTR_COLLAPSE_LENGTH_PREF);
+
+    dispatch(updateCollapseAttributes(collapseAttributes));
+    dispatch(updateCollapseAttributeLength(collapseAttributeLength));
+  }
+
+  async navigate(node) {
+    let current = node;
+
+    // Walk up the parent of the selected node to make sure they are known and expanded
+    // starting by the selected node itself since we want to display it expanded with its
+    // children visible.
+    while (current) {
+      // Add this node to our tree model if necessary.
+      // if (!this.tree.has(current)) {
+      this.tree.set(current, {
+        parent: current.parentNode(),
+      });
+      // }
+
+      // Mark it as expanded.
+      this.tree.get(current).isExpanded = true;
+
+      // Fetch its children.
+      if (!this.tree.get(current).children) {
+        await this.getChildren(current);
+
+        // Walk up the parent nodes until the configured root node.
+        if (current === this.walker.rootNode) {
+          break;
+        }
+
+        current = current.parentNode();
+      }
+    }
+  }
+
+  onHoverNode(node) {
+    if (!this.isPanelVisisble()) {
+      return;
+    }
+
+    this.store.dispatch(updateHoveredNode(node));
+  }
+
+  /**
+   * Handler for "picker-node-hovered" toolbox events. Navigate to the hovered node.
+   */
+  async onPickerNodeHover(event, nodeFront) {
+    await this.navigate(nodeFront);
+
+    this.store.dispatch(updateMarkup({
+      hoveredNode: nodeFront,
+      rootNode: this.walker.rootNode,
+      selectedNode: this.inspector.selection.nodeFront,
+      tree: this.tree,
+    }));
+  }
+
+  /**
+   * Handler for "new-node-front" selection events. Updates the markup view.
+   */
+  onSelection() {
+    if (!this.isPanelVisible()) {
+      return;
+    }
+
+    // TODO: Remove this in the future. We remove the selection listener because we want
+    // to decouple the events from the existing markup-view when selecting new nodes.
+    this.inspector.selection.off("new-node-front", this.onSelection);
+    this.update();
+  }
+
+  onSelectNode(node) {
+    if (!this.isPanelVisible() || this.inspector.selection.nodeFront == node) {
+      return;
+    }
+
+    const { setSelectedNode } = this.inspector.getCommonComponentProps();
+    setSelectedNode(node);
+    this.store.dispatch(updateSelectedNode(node));
+  }
+
+  /**
+   * Expands or collapses the given node based on whether or not the node is expanded.
+   * Expands the given node if the node is not expanded and vice versa.
+   *
+   * @param  {NodeFront} node
+   *         The NodeFront of the node to expand or collapse.
+   * @param  {Boolean} isExpanded
+   *         Whether or not the node is expanded.
+   */
+  onToggleNodeExpanded(node, isExpanded) {
+    if (!this.isPanelVisible()) {
+      return;
+    }
+
+    if (isExpanded) {
+      this.collapseNode(node);
+    } else {
+      this.expandNode(node);
+    }
+  }
+
+  async update() {
+    const selection = this.inspector.selection;
+
+    if (!selection.isNode()) {
+      return;
+    }
+
+    await this.navigate(selection.nodeFront);
+
+    this.store.dispatch(updateMarkup({
+      rootNode: this.walker.rootNode,
+      selectedNode: selection.nodeFront,
+      tree: this.tree,
+    }));
   }
 }
 
 module.exports = MarkupView;
diff --git a/devtools/client/inspector/markup/reducers/markup.js b/devtools/client/inspector/markup/reducers/markup.js
--- a/devtools/client/inspector/markup/reducers/markup.js
+++ b/devtools/client/inspector/markup/reducers/markup.js
@@ -1,18 +1,72 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
-const INITIAL_MARKUP = [];
+const {
+  UPDATE_COLLAPSE_ATTRIBUTES,
+  UPDATE_COLLAPSE_ATTRIBUTE_LENGTH,
+  UPDATE_HOVERED_NODE,
+  UPDATE_MARKUP,
+  UPDATE_SELECTED_NODE,
+} = require("../actions/index");
+
+const INITIAL_MARKUP = {
+  // Whether or not to collapse the attributes for nodes.
+  collapseAttributes: true,
+  // The max length of the attribute value prior to truncating the attributes.
+  collapseAttributeLength: 120,
+  // The hovered node to display in the TreeView.
+  hoveredNode: null,
+  // The root node to display in the TreeView.
+  rootNode: null,
+  // The selected node to display in the TreeView.
+  selectedNode: null,
+  // The map representation of the DOM tree.
+  tree: new Map(),
+};
 
 let reducers = {
 
+  [UPDATE_COLLAPSE_ATTRIBUTES](markup, { enabled }) {
+    return Object.assign({}, markup, {
+      collapseAttributes: enabled,
+    });
+  },
+
+  [UPDATE_COLLAPSE_ATTRIBUTE_LENGTH](markup, { length }) {
+    return Object.assign({}, markup, {
+      collapseAttributeLength: length,
+    });
+  },
+
+  [UPDATE_HOVERED_NODE](markup, { hoveredNode }) {
+    return Object.assign({}, markup, {
+      hoveredNode,
+    });
+  },
+
+  [UPDATE_MARKUP](markup, { hoveredNode, rootNode, selectedNode, tree }) {
+    return Object.assign({}, markup, {
+      hoveredNode,
+      rootNode,
+      selectedNode,
+      tree,
+    });
+  },
+
+  [UPDATE_SELECTED_NODE](markup, { selectedNode }) {
+    return Object.assign({}, markup, {
+      selectedNode,
+    });
+  },
+
 };
 
 module.exports = function (markup = INITIAL_MARKUP, action) {
   let reducer = reducers[action.type];
   if (!reducer) {
     return markup;
   }
   return reducer(markup, action);
diff --git a/devtools/client/inspector/markup/utils/l10n.js b/devtools/client/inspector/markup/utils/l10n.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/inspector/markup/utils/l10n.js
@@ -0,0 +1,15 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const { LocalizationHelper } = require("devtools/shared/l10n");
+const L10N = new LocalizationHelper("devtools/client/locales/inspector.properties");
+
+module.exports = {
+  getStr: (...args) => L10N.getStr(...args),
+  getFormatStr: (...args) => L10N.getFormatStr(...args),
+  getFormatStrWithNumbers: (...args) => L10N.getFormatStrWithNumbers(...args),
+  numberWithDecimals: (...args) => L10N.numberWithDecimals(...args),
+};
diff --git a/devtools/client/inspector/markup/utils/moz.build b/devtools/client/inspector/markup/utils/moz.build
new file mode 100644
--- /dev/null
+++ b/devtools/client/inspector/markup/utils/moz.build
@@ -0,0 +1,9 @@
+# -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+DevToolsModules(
+    'l10n.js',
+)
diff --git a/devtools/client/inspector/reducers.js b/devtools/client/inspector/reducers.js
--- a/devtools/client/inspector/reducers.js
+++ b/devtools/client/inspector/reducers.js
@@ -16,8 +16,9 @@ exports.boxModel = require("devtools/cli
 exports.changes = require("devtools/client/inspector/changes/reducers/changes");
 exports.events = require("devtools/client/inspector/events/reducers/events");
 exports.extensionsSidebar = require("devtools/client/inspector/extensions/reducers/sidebar");
 exports.flexboxes = require("devtools/client/inspector/flexbox/reducers/flexboxes");
 exports.fontOptions = require("devtools/client/inspector/fonts/reducers/font-options");
 exports.fonts = require("devtools/client/inspector/fonts/reducers/fonts");
 exports.grids = require("devtools/client/inspector/grids/reducers/grids");
 exports.highlighterSettings = require("devtools/client/inspector/grids/reducers/highlighter-settings");
+exports.markup = require("devtools/client/inspector/markup/reducers/markup");
diff --git a/devtools/client/jar.mn b/devtools/client/jar.mn
--- a/devtools/client/jar.mn
+++ b/devtools/client/jar.mn
@@ -145,16 +145,17 @@ devtools.jar:
     skin/images/command-pick.svg (themes/images/command-pick.svg)
     skin/images/command-frames.svg (themes/images/command-frames.svg)
     skin/images/command-console.svg (themes/images/command-console.svg)
     skin/images/command-eyedropper.svg (themes/images/command-eyedropper.svg)
     skin/images/command-rulers.svg (themes/images/command-rulers.svg)
     skin/images/command-measure.svg (themes/images/command-measure.svg)
     skin/images/command-noautohide.svg (themes/images/command-noautohide.svg)
     skin/markup.css (themes/markup.css)
+    skin/new-markup.css (themes/new-markup.css)
     skin/images/editor-error.png (themes/images/editor-error.png)
     skin/images/breakpoint.svg (themes/images/breakpoint.svg)
     skin/webconsole.css (themes/webconsole.css)
     skin/images/webconsole.svg (themes/images/webconsole.svg)
     skin/images/breadcrumbs-scrollbutton.svg (themes/images/breadcrumbs-scrollbutton.svg)
     skin/animation.css (themes/animation.css)
     skin/animationinspector.css (themes/animationinspector.css)
     skin/canvasdebugger.css (themes/canvasdebugger.css)
diff --git a/devtools/client/themes/common.css b/devtools/client/themes/common.css
--- a/devtools/client/themes/common.css
+++ b/devtools/client/themes/common.css
@@ -612,17 +612,19 @@ checkbox:-moz-focusring {
   outline-style: none;
 }
 
 .theme-twisty[open], .theme-twisty.open {
   background-position: -14px -14px;
 }
 
 .theme-selected ~ .theme-twisty[open],
-.theme-dark .theme-twisty[open], .theme-dark .theme-twisty.open  {
+.theme-selected ~ .theme-twisty.open,
+.theme-dark .theme-twisty[open],
+.theme-dark .theme-twisty.open {
   background-position: -42px -14px;
 }
 
 .theme-twisty[invisible] {
   visibility: hidden;
 }
 
 /* Mirror the twisty for rtl direction */
diff --git a/devtools/client/themes/markup.css b/devtools/client/themes/new-markup.css
copy from devtools/client/themes/markup.css
copy to devtools/client/themes/new-markup.css
--- a/devtools/client/themes/markup.css
+++ b/devtools/client/themes/new-markup.css
@@ -3,37 +3,40 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 :root {
   --markup-hidden-attr-name-color: #CA60AC;
   --markup-hidden-attr-value-color: #5C6D87;
   --markup-hidden-punctuation-color: #909090;
   --markup-hidden-tag-color: #97A4B3;
   --markup-outline: var(--theme-splitter-color);
+  -moz-control-character-visibility: visible;
 }
 
 .theme-dark:root {
   --markup-hidden-attr-name-color: #CC8EC8;
   --markup-hidden-attr-value-color: #9893A3;
   --markup-hidden-punctuation-color: #909090;
   --markup-hidden-tag-color: #AFB5BF;
   --markup-outline: var(--theme-selection-background);
 }
 
 * {
   padding: 0;
   margin: 0;
 }
 
-:root {
-  -moz-control-character-visibility: visible;
+body {
+  -moz-user-select: none;
 }
 
-body {
-  -moz-user-select: none;
+#markup-container {
+  height: 100%;
+  width: 100%;
+  overflow: auto;
 }
 
 /* Force height and width (possibly overflowing) from inline elements.
  * This allows long overflows of text or input fields to still be styled with
  * the container, rather than the background disappearing when scrolling */
 #root {
   float: left;
   min-width: 100%;
@@ -142,31 +145,31 @@ ul.children + .tag-line::before {
 .tag-line {
   min-height: 1.4em;
   line-height: 1.4em;
   position: relative;
   cursor: default;
   padding-left: 2px;
 }
 
-.tag-line[selected] + .children,
-.tag-line[selected] ~ .tag-line {
+.tag-line.selected + .children,
+.tag-line.selected ~ .tag-line {
   background-image: linear-gradient(to top, var(--markup-outline), var(--markup-outline));
   background-position-x: -6px;
   background-repeat: no-repeat;
   background-size: 1.5px 100%;
   border-left: 6px solid transparent;
   margin-left: -6px;
 }
 
-.tag-line[selected] + .children {
+.tag-line.selected + .children {
   background-position-y: 2px;
 }
 
-.tag-line[selected] ~ .tag-line {
+.tag-line.selected ~ .tag-line {
   background-position-y: -2px;
   /* Unset transition-property to prevent the markup outline from horizontal shifting */
   transition-property: none;
 }
 
 .html-editor-container {
   position: relative;
   min-height: 200px;
@@ -180,17 +183,17 @@ ul.children + .tag-line::before {
   left: -1000em;
   right: 0;
   height: 100%;
   z-index: 0;
 }
 
 .tag-line .tag-hover:not(.theme-selected) {
   background: var(--theme-selection-background-hover);
-  z-index: -1;
+  /*z-index: -1*/;
 }
 
 .expander {
   display: inline-block;
   margin-left: -14px;
   vertical-align: middle;
   /* Make sure the expander still appears above the tag-state */
   position: relative;
@@ -309,17 +312,17 @@ ul.children + .tag-line::before {
   color: var(--theme-body-color-inactive);
   border-radius: 3px;
   border-style: solid;
   border-width: 1px;
   text-align: center;
   vertical-align: middle;
 }
 
-.tag-line[selected] .editor.text .whitespace::before {
+.tag-line.selected .editor.text .whitespace::before {
   color: white;
 }
 
 .more-nodes {
   padding-left: 16px;
 }
 
 .styleinspector-propertyeditor {
@@ -411,16 +414,17 @@ ul.children + .tag-line::before {
 }
 
 .theme-firebug .doctype {
   color: #787878;
 }
 
 /* Events */
 .markupview-events {
+  display: inline-block;
   font-size: 8px;
   font-weight: bold;
   line-height: 10px;
   border-radius: 3px;
   padding: 0px 2px;
   margin-inline-start: 5px;
   -moz-user-select: none;
 }
