# HG changeset patch
# User Jarda Snajdr <jsnajdr@gmail.com>

Bug 1191216 - Part 1: Intermittent browser_console_error_source_click.js - fix test r=bgrins

diff --git a/devtools/client/webconsole/test/browser_console_error_source_click.js b/devtools/client/webconsole/test/browser_console_error_source_click.js
index 53f9a98..b01fcdc 100644
--- a/devtools/client/webconsole/test/browser_console_error_source_click.js
+++ b/devtools/client/webconsole/test/browser_console_error_source_click.js
@@ -9,20 +9,26 @@
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf8,<p>hello world from bug 877778 " +
                  "<button onclick='foobar.explode()' " +
                  "style='test-color: green-please'>click!</button>";
 function test() {
   let hud;
 
-  loadTab(TEST_URI).then(() => {
-    HUDService.toggleBrowserConsole().then(browserConsoleOpened);
+  let prefsPushed = new Promise(resolve => {
+    SpecialPowers.pushPrefEnv({"set": [
+      ["devtools.browserconsole.filter.cssparser", true]
+    ]}, resolve);
   });
 
+  prefsPushed.then(() => loadTab(TEST_URI))
+             .then(() => HUDService.toggleBrowserConsole())
+             .then(browserConsoleOpened);
+
   function browserConsoleOpened(hudConsole) {
     hud = hudConsole;
     ok(hud, "browser console opened");
 
     // On e10s, the exception is triggered in child process
     // and is ignored by test harness
     if (!Services.appinfo.browserTabsRemoteAutostart) {
       expectUncaughtException();
@@ -49,30 +55,33 @@ function test() {
         },
       ],
     }).then(onMessageFound);
   }
 
   function onMessageFound(results) {
     let viewSource = hud.viewSource;
     let viewSourceCalled = false;
-    hud.viewSourceInDebugger = () => {
+
+    hud.viewSource = () => {
       viewSourceCalled = true;
     };
 
     for (let result of results) {
       viewSourceCalled = false;
 
-      let msg = [...results[0].matched][0];
+      let msg = [...result.matched][0];
       ok(msg, "message element found for: " + result.text);
-      let selector = ".message > .message-location .frame-link-filename";
+      ok(!msg.classList.contains("filtered-by-type"), "message element is not filtered");
+      let selector = ".message > .message-location .frame-link-source";
       let locationNode = msg.querySelector(selector);
       ok(locationNode, "message location element found");
 
       EventUtils.synthesizeMouse(locationNode, 2, 2, {}, hud.iframeWindow);
 
       ok(viewSourceCalled, "view source opened");
     }
 
-    hud.viewSourceInDebugger = viewSource;
+    hud.viewSource = viewSource;
+
     finishTest();
   }
 }

