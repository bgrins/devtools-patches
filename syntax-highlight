# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  77433149bfdcc82287acaed94b942818785b556e
Bug 1463669 - WIP - Demonstrate syntax highlighting in console output

diff --git a/devtools/client/webconsole/components/JSTerm.js b/devtools/client/webconsole/components/JSTerm.js
--- a/devtools/client/webconsole/components/JSTerm.js
+++ b/devtools/client/webconsole/components/JSTerm.js
@@ -348,16 +348,18 @@ class JSTerm extends Component {
       }
     } else if (this.inputNode) {
       this.inputNode.addEventListener("keypress", this._keyPress);
       this.inputNode.addEventListener("input", this._inputEventHandler);
       this.inputNode.addEventListener("keyup", this._inputEventHandler);
       this.focus();
     }
 
+    this.maybeEnableOutputSyntaxHighlighting();
+
     this.inputBorderSize = this.inputNode
       ? this.inputNode.getBoundingClientRect().height - this.inputNode.clientHeight
       : 0;
 
     // Update the character and chevron width needed for the popup offset calculations.
     this._inputCharWidth = this._getInputCharWidth();
     this._chevronWidth = this.editor ? null : this._getChevronWidth();
 
@@ -367,16 +369,40 @@ class JSTerm extends Component {
 
   shouldComponentUpdate(nextProps, nextState) {
     // XXX: For now, everything is handled in an imperative way and we
     // only want React to do the initial rendering of the component.
     // This should be modified when the actual refactoring will take place.
     return false;
   }
 
+  maybeEnableOutputSyntaxHighlighting() {
+    // Syntax highlighting depends on CodeMirror being present, so bail
+    // out if it's not.
+    if (!this.editor) {
+      return;
+    }
+    const runMode = (text, node) => {
+      this.editor.CodeMirror.runMode(text, "application/javascript", node);
+    };
+
+    class CodeMirrorHighlighted extends HTMLElement {
+      connectedCallback() {
+        const div = this.querySelector("div");
+        div.classList.add("cm-s-mozilla");
+        runMode(div.textContent, div);
+      }
+    }
+
+    const customElementRegistry = this.hud.document.defaultView.customElements;
+    if (customElementRegistry) {
+      customElementRegistry.define("codemirror-highlighted", CodeMirrorHighlighted);
+    }
+  }
+
   /**
    * Getter for the element that holds the messages we display.
    * @type Element
    */
   get outputNode() {
     return this.hud.outputNode;
   }
 
diff --git a/devtools/client/webconsole/components/message-types/ConsoleCommand.js b/devtools/client/webconsole/components/message-types/ConsoleCommand.js
--- a/devtools/client/webconsole/components/message-types/ConsoleCommand.js
+++ b/devtools/client/webconsole/components/message-types/ConsoleCommand.js
@@ -2,19 +2,20 @@
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 // React & Redux
-const { createFactory } = require("devtools/client/shared/vendor/react");
+const { createFactory, createElement } = require("devtools/client/shared/vendor/react");
 const PropTypes = require("devtools/client/shared/vendor/react-prop-types");
 const Message = createFactory(require("devtools/client/webconsole/components/Message"));
+const dom = require("devtools/client/shared/vendor/react-dom-factories");
 
 ConsoleCommand.displayName = "ConsoleCommand";
 
 ConsoleCommand.propTypes = {
   message: PropTypes.object.isRequired,
   timestampsVisible: PropTypes.bool.isRequired,
   serviceContainer: PropTypes.object,
 };
@@ -29,19 +30,25 @@ function ConsoleCommand(props) {
     serviceContainer,
   } = props;
 
   const {
     indent,
     source,
     type,
     level,
-    messageText: messageBody,
+    messageText,
   } = message;
 
+  const messageBody = createElement("codemirror-highlighted", {
+    // Tell React to ignore changes inside the element.
+    // XXX - do we need to / how should we do this?
+    is: "foo",
+  }, dom.div({}, messageText));
+
   return Message({
     source,
     type,
     level,
     topLevelClasses: [],
     messageBody,
     serviceContainer,
     indent,
