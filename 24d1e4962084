
# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1522689541 25200
# Node ID 24d1e49620844298705dacdb80c31d839909397d
# Parent  c44f60c43432d468639b5fe078420e60c13fd3de
Bug 1420990 - Build the DOM for container items directly in containers.js instead of with XBL

MozReview-Commit-ID: Cmu4PYW2Zro

diff --git a/browser/components/preferences/handlers.css b/browser/components/preferences/handlers.css
--- a/browser/components/preferences/handlers.css
+++ b/browser/components/preferences/handlers.css
@@ -2,17 +2,17 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #handlersView > richlistitem {
   -moz-binding: url("chrome://browser/content/preferences/handlers.xml#handler");
 }
 
 #containersView > richlistitem {
-  -moz-binding: url("chrome://browser/content/preferences/handlers.xml#container");
+  -moz-binding: none;
 }
 
 /**
  * Make the icons appear.
  * Note: we display the icon box for every item whether or not it has an icon
  * so the labels of all the items align vertically.
  */
 .actionsMenu > menupopup > menuitem > .menu-iconic-left {
diff --git a/browser/components/preferences/handlers.xml b/browser/components/preferences/handlers.xml
--- a/browser/components/preferences/handlers.xml
+++ b/browser/components/preferences/handlers.xml
@@ -51,30 +51,16 @@
                         oncommand="gMainPane.onSelectAction(event.originalTarget)">
             <xul:menupopup/>
           </xul:menulist>
         </xul:hbox>
       </xul:hbox>
     </content>
   </binding>
 
-  <binding id="container">
-    <content>
-      <xul:hbox flex="1" equalsize="always">
-        <xul:hbox flex="1" align="center">
-          <xul:hbox xbl:inherits="data-identity-icon=containerIcon,data-identity-color=containerColor" height="24" width="24" class="userContext-icon"/>
-          <xul:label flex="1" crop="end" xbl:inherits="xbl:text=containerName,highlightable"/>
-        </xul:hbox>
-        <xul:hbox flex="1" align="right">
-          <children />
-        </xul:hbox>
-      </xul:hbox>
-    </content>
-  </binding>
-
   <binding id="offlineapp"
 	   extends="chrome://global/content/bindings/listbox.xml#listitem">
     <content>
       <children>
 	<xul:listcell xbl:inherits="label=origin"/>
 	<xul:listcell xbl:inherits="label=usage"/>
       </children>
     </content>
diff --git a/browser/components/preferences/in-content/containers.js b/browser/components/preferences/in-content/containers.js
--- a/browser/components/preferences/in-content/containers.js
+++ b/browser/components/preferences/in-content/containers.js
@@ -26,32 +26,58 @@
 
   _rebuildView() {
     const containers = ContextualIdentityService.getPublicIdentities();
     while (this._list.firstChild) {
       this._list.firstChild.remove();
     }
     for (let container of containers) {
       let item = document.createElement("richlistitem");
-      item.setAttribute("containerName", ContextualIdentityService.getUserContextLabel(container.userContextId));
-      item.setAttribute("containerIcon", container.icon);
-      item.setAttribute("containerColor", container.color);
-      item.setAttribute("userContextId", container.userContextId);
+
+      let outer = document.createElement("hbox");
+      outer.setAttribute("flex", 1);
+      outer.setAttribute("equalsize", "always");
+      item.appendChild(outer);
+
+      let inner = document.createElement("hbox");
+      inner.setAttribute("flex", 1);
+      inner.setAttribute("align", "center");
+      outer.appendChild(inner);
+
+      let userContextIcon = document.createElement("hbox");
+      userContextIcon.className = "userContext-icon";
+      userContextIcon.setAttribute("width", 24);
+      userContextIcon.setAttribute("height", 24);
+      userContextIcon.setAttribute("data-identity-icon", container.icon);
+      userContextIcon.setAttribute("data-identity-color", container.color);
+      inner.appendChild(userContextIcon);
+
+      let label = document.createElement("label");
+      label.setAttribute("flex", 1);
+      label.setAttribute("crop", "end");
+      label.textContent = ContextualIdentityService.getUserContextLabel(container.userContextId);
+      inner.appendChild(label);
+
+      let containerButtons = document.createElement("hbox");
+      containerButtons.className = "container-buttons";
+      containerButtons.setAttribute("flex", 1);
+      containerButtons.setAttribute("align", "right");
+      item.appendChild(containerButtons);
 
       let prefsButton = document.createElement("button");
       prefsButton.setAttribute("oncommand", "gContainersPane.onPreferenceCommand(event.originalTarget)");
       prefsButton.setAttribute("value", container.userContextId);
       document.l10n.setAttributes(prefsButton, "containers-preferences-button");
-      item.appendChild(prefsButton);
+      containerButtons.appendChild(prefsButton);
 
       let removeButton = document.createElement("button");
       removeButton.setAttribute("oncommand", "gContainersPane.onRemoveCommand(event.originalTarget)");
       removeButton.setAttribute("value", container.userContextId);
       document.l10n.setAttributes(removeButton, "containers-remove-button");
-      item.appendChild(removeButton);
+      containerButtons.appendChild(removeButton);
 
       this._list.appendChild(item);
     }
   },
 
   async onRemoveCommand(button) {
     let userContextId = parseInt(button.getAttribute("value"), 10);
 

