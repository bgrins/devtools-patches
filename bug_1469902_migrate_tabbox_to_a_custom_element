# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1529518565 25200
#      Wed Jun 20 11:16:05 2018 -0700
# Node ID 7add4fe5500f177e605669e39c54edbfee238148
# Parent  f14fa1652c32a9d8ba00135aa0439c7df41f3980
Bug 1469902 - Migrate <tabbox> to a Custom Element

MozReview-Commit-ID: HNDiMYmKgkg

Differential Revision: https://phabricator.services.mozilla.com/D3989

diff --git a/toolkit/content/customElements.js b/toolkit/content/customElements.js
--- a/toolkit/content/customElements.js
+++ b/toolkit/content/customElements.js
@@ -116,16 +116,17 @@ function getInterfaceProxy(obj) {
 
 // Attach the base class to the window so other scripts can use it:
 window.MozXULElement = MozXULElement;
 
 for (let script of [
   "chrome://global/content/elements/stringbundle.js",
   "chrome://global/content/elements/general.js",
   "chrome://global/content/elements/textbox.js",
+  "chrome://global/content/elements/tabbox.js",
 ]) {
   Services.scriptloader.loadSubScript(script, window);
 }
 
 customElements.setElementCreationCallback("printpreview-toolbar", type => {
   Services.scriptloader.loadSubScript(
     "chrome://global/content/printPreviewToolbar.js", window);
 });
diff --git a/toolkit/content/jar.mn b/toolkit/content/jar.mn
--- a/toolkit/content/jar.mn
+++ b/toolkit/content/jar.mn
@@ -97,15 +97,16 @@ toolkit.jar:
    content/global/bindings/toolbar.xml         (widgets/toolbar.xml)
    content/global/bindings/toolbarbutton.xml   (widgets/toolbarbutton.xml)
    content/global/bindings/tree.xml            (widgets/tree.xml)
    content/global/bindings/videocontrols.xml   (widgets/videocontrols.xml)
 *  content/global/bindings/wizard.xml          (widgets/wizard.xml)
    content/global/elements/editor.js           (widgets/editor.js)
    content/global/elements/general.js          (widgets/general.js)
    content/global/elements/stringbundle.js     (widgets/stringbundle.js)
+   content/global/elements/tabbox.js           (widgets/tabbox.js)
    content/global/elements/textbox.js          (widgets/textbox.js)
    content/global/elements/videocontrols.js    (widgets/videocontrols.js)
 #ifdef XP_MACOSX
    content/global/macWindowMenu.js
 #endif
    content/global/gmp-sources/openh264.json    (gmp-sources/openh264.json)
    content/global/gmp-sources/widevinecdm.json (gmp-sources/widevinecdm.json)
diff --git a/toolkit/content/widgets/tabbox.js b/toolkit/content/widgets/tabbox.js
--- a/toolkit/content/widgets/tabbox.js
+++ b/toolkit/content/widgets/tabbox.js
@@ -1,206 +1,184 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
-  <binding id="tabbox">
-    <resources>
-      <stylesheet src="chrome://global/skin/tabbox.css"/>
-    </resources>
+"use strict";
+
+{
 
-    <implementation>
-      <property name="handleCtrlTab">
-        <setter>
-        <![CDATA[
-          this.setAttribute("handleCtrlTab", val);
-          return val;
-        ]]>
-        </setter>
-        <getter>
-        <![CDATA[
-          return (this.getAttribute("handleCtrlTab") != "false");
-        ]]>
-        </getter>
-      </property>
+class MozTabbox extends MozXULElement {
+  constructor() {
+    super();
+    this._handleMetaAltArrows = /Mac/.test(navigator.platform);
+    this.disconnectedCallback = this.disconnectedCallback.bind(this);
+  }
+
+  connectedCallback() {
+    this._eventNode = this;
 
-      <field name="_handleMetaAltArrows" readonly="true">
-        /Mac/.test(navigator.platform)
-      </field>
-
-      <!-- _tabs and _tabpanels are deprecated, they exist only for
-           backwards compatibility. -->
-      <property name="_tabs" readonly="true" onget="return this.tabs;"/>
-      <property name="_tabpanels" readonly="true" onget="return this.tabpanels;"/>
+    switch (this.getAttribute("eventnode")) {
+      case "parent":
+        this._eventNode = this.parentNode;
+        break;
+      case "window":
+        this._eventNode = window;
+        break;
+      case "document":
+        this._eventNode = document;
+        break;
+    }
 
-      <property name="tabs" readonly="true">
-        <getter>
-        <![CDATA[
-          if (this.hasAttribute("tabcontainer")) {
-            return document.getElementById(this.getAttribute("tabcontainer"));
-          }
-          return this.getElementsByTagNameNS(
-              "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul",
-              "tabs").item(0);
-        ]]>
-        </getter>
-      </property>
+    Services.els.addSystemEventListener(this._eventNode, "keydown", this, false);
+    window.addEventListener("unload", this.disconnectedCallback, { once: true });
+  }
+
+  set handleCtrlTab(val) {
+    this.setAttribute("handleCtrlTab", val);
+    return val;
+  }
 
-      <property name="tabpanels" readonly="true">
-        <getter>
-        <![CDATA[
-          return this.getElementsByTagNameNS(
-              "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul",
-              "tabpanels").item(0);
-        ]]>
-        </getter>
-      </property>
+  get handleCtrlTab() {
+    return (this.getAttribute("handleCtrlTab") != "false");
+  }
+  /**
+   * _tabs and _tabpanels are deprecated, they exist only for
+   * backwards compatibility.
+   */
+  get _tabs() {
+    return this.tabs;
+  }
 
-      <property name="selectedIndex">
-        <getter>
-        <![CDATA[
-          var tabs = this.tabs;
-          return tabs ? tabs.selectedIndex : -1;
-        ]]>
-        </getter>
+  get _tabpanels() {
+    return this.tabpanels;
+  }
+
+  get tabs() {
+    if (this.hasAttribute("tabcontainer")) {
+      return document.getElementById(this.getAttribute("tabcontainer"));
+    }
+    return this.getElementsByTagNameNS(
+      "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul",
+      "tabs").item(0);
+  }
 
-        <setter>
-        <![CDATA[
-          var tabs = this.tabs;
-          if (tabs)
-            tabs.selectedIndex = val;
-          this.setAttribute("selectedIndex", val);
-          return val;
-        ]]>
-        </setter>
-      </property>
+  get tabpanels() {
+    return this.getElementsByTagNameNS(
+      "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul",
+      "tabpanels").item(0);
+  }
 
-      <property name="selectedTab">
-        <getter>
-        <![CDATA[
-          var tabs = this.tabs;
-          return tabs && tabs.selectedItem;
-        ]]>
-        </getter>
+  set selectedIndex(val) {
+    var tabs = this.tabs;
+    if (tabs)
+      tabs.selectedIndex = val;
+    this.setAttribute("selectedIndex", val);
+    return val;
+  }
 
-        <setter>
-        <![CDATA[
-          if (val) {
-            var tabs = this.tabs;
-            if (tabs)
-              tabs.selectedItem = val;
-          }
-          return val;
-        ]]>
-        </setter>
-      </property>
+  get selectedIndex() {
+    var tabs = this.tabs;
+    return tabs ? tabs.selectedIndex : -1;
+  }
 
-      <property name="selectedPanel">
-        <getter>
-        <![CDATA[
-          var tabpanels = this.tabpanels;
-          return tabpanels && tabpanels.selectedPanel;
-        ]]>
-        </getter>
+  set selectedTab(val) {
+    if (val) {
+      var tabs = this.tabs;
+      if (tabs)
+        tabs.selectedItem = val;
+    }
+    return val;
+  }
 
-        <setter>
-        <![CDATA[
-          if (val) {
-            var tabpanels = this.tabpanels;
-            if (tabpanels)
-              tabpanels.selectedPanel = val;
-          }
-          return val;
-        ]]>
-        </setter>
-      </property>
+  get selectedTab() {
+    var tabs = this.tabs;
+    return tabs && tabs.selectedItem;
+  }
+
+  set selectedPanel(val) {
+    if (val) {
+      var tabpanels = this.tabpanels;
+      if (tabpanels)
+        tabpanels.selectedPanel = val;
+    }
+    return val;
+  }
+
+  get selectedPanel() {
+    var tabpanels = this.tabpanels;
+    return tabpanels && tabpanels.selectedPanel;
+  }
 
-      <method name="handleEvent">
-        <parameter name="event"/>
-        <body>
-        <![CDATA[
-          if (!event.isTrusted) {
-            // Don't let untrusted events mess with tabs.
-            return;
-          }
+  set eventNode(val) {
+    if (val != this._eventNode) {
+      Services.els.addSystemEventListener(val, "keydown", this, false);
+      Services.els.removeSystemEventListener(this._eventNode, "keydown", this, false);
+      this._eventNode = val;
+    }
+    return val;
+  }
 
-          // Don't check if the event was already consumed because tab
-          // navigation should always work for better user experience.
+  get eventNode() {
+    return this._eventNode;
+  }
+
+  handleEvent(event) {
+    if (!event.isTrusted) {
+      // Don't let untrusted events mess with tabs.
+      return;
+    }
+
+    // Don't check if the event was already consumed because tab
+    // navigation should always work for better user experience.
 
-          switch (event.keyCode) {
-            case event.DOM_VK_TAB:
-              if (event.ctrlKey && !event.altKey && !event.metaKey)
-                if (this.tabs && this.handleCtrlTab) {
-                  this.tabs.advanceSelectedTab(event.shiftKey ? -1 : 1, true);
-                  event.preventDefault();
-                }
-              break;
-            case event.DOM_VK_PAGE_UP:
-              if (event.ctrlKey && !event.shiftKey && !event.altKey && !event.metaKey &&
-                  this.tabs) {
-                this.tabs.advanceSelectedTab(-1, true);
-                event.preventDefault();
-              }
-              break;
-            case event.DOM_VK_PAGE_DOWN:
-              if (event.ctrlKey && !event.shiftKey && !event.altKey && !event.metaKey &&
-                  this.tabs) {
-                this.tabs.advanceSelectedTab(1, true);
-                event.preventDefault();
-              }
-              break;
-            case event.DOM_VK_LEFT:
-              if (event.metaKey && event.altKey && !event.shiftKey && !event.ctrlKey)
-                if (this.tabs && this._handleMetaAltArrows) {
-                  var offset = window.getComputedStyle(this)
-                                     .direction == "ltr" ? -1 : 1;
-                  this.tabs.advanceSelectedTab(offset, true);
-                  event.preventDefault();
-                }
-              break;
-            case event.DOM_VK_RIGHT:
-              if (event.metaKey && event.altKey && !event.shiftKey && !event.ctrlKey)
-                if (this.tabs && this._handleMetaAltArrows) {
-                  offset = window.getComputedStyle(this)
-                                     .direction == "ltr" ? 1 : -1;
-                  this.tabs.advanceSelectedTab(offset, true);
-                  event.preventDefault();
-                }
-              break;
+    switch (event.keyCode) {
+      case event.DOM_VK_TAB:
+        if (event.ctrlKey && !event.altKey && !event.metaKey)
+          if (this.tabs && this.handleCtrlTab) {
+            this.tabs.advanceSelectedTab(event.shiftKey ? -1 : 1, true);
+            event.preventDefault();
           }
-        ]]>
-        </body>
-      </method>
-
-      <field name="_eventNode">this</field>
+        break;
+      case event.DOM_VK_PAGE_UP:
+        if (event.ctrlKey && !event.shiftKey && !event.altKey && !event.metaKey &&
+          this.tabs) {
+          this.tabs.advanceSelectedTab(-1, true);
+          event.preventDefault();
+        }
+        break;
+      case event.DOM_VK_PAGE_DOWN:
+        if (event.ctrlKey && !event.shiftKey && !event.altKey && !event.metaKey &&
+          this.tabs) {
+          this.tabs.advanceSelectedTab(1, true);
+          event.preventDefault();
+        }
+        break;
+      case event.DOM_VK_LEFT:
+        if (event.metaKey && event.altKey && !event.shiftKey && !event.ctrlKey)
+          if (this.tabs && this._handleMetaAltArrows) {
+            var offset = window.getComputedStyle(this)
+              .direction == "ltr" ? -1 : 1;
+            this.tabs.advanceSelectedTab(offset, true);
+            event.preventDefault();
+          }
+        break;
+      case event.DOM_VK_RIGHT:
+        if (event.metaKey && event.altKey && !event.shiftKey && !event.ctrlKey)
+          if (this.tabs && this._handleMetaAltArrows) {
+            offset = window.getComputedStyle(this)
+              .direction == "ltr" ? 1 : -1;
+            this.tabs.advanceSelectedTab(offset, true);
+            event.preventDefault();
+          }
+        break;
+    }
+  }
 
-      <property name="eventNode" onget="return this._eventNode;">
-        <setter>
-          <![CDATA[
-            if (val != this._eventNode) {
-              const nsIEventListenerService =
-                Ci.nsIEventListenerService;
-              let els = Cc["@mozilla.org/eventlistenerservice;1"]
-                          .getService(nsIEventListenerService);
-              els.addSystemEventListener(val, "keydown", this, false);
-              els.removeSystemEventListener(this._eventNode, "keydown", this, false);
-              this._eventNode = val;
-            }
-            return val;
-          ]]>
-        </setter>
-      </property>
+  disconnectedCallback() {
+    window.removeEventListener("unload", this.disconnectedCallback);
+    Services.els.removeSystemEventListener(this._eventNode, "keydown", this, false);
+  }
+}
 
-      <constructor>
-        switch (this.getAttribute("eventnode")) {
-          case "parent": this._eventNode = this.parentNode; break;
-          case "window": this._eventNode = window; break;
-          case "document": this._eventNode = document; break;
-        }
-        let els = Cc["@mozilla.org/eventlistenerservice;1"]
-                    .getService(Ci.nsIEventListenerService);
-        els.addSystemEventListener(this._eventNode, "keydown", this, false);
-      </constructor>
+customElements.define("tabbox", MozTabbox);
 
-      <destructor>
-        let els = Cc["@mozilla.org/eventlistenerservice;1"]
-                    .getService(Ci.nsIEventListenerService);
-        els.removeSystemEventListener(this._eventNode, "keydown", this, false);
-      </destructor>
-    </implementation>
-  </binding>
+}
diff --git a/toolkit/content/widgets/tabbox.xml b/toolkit/content/widgets/tabbox.xml
--- a/toolkit/content/widgets/tabbox.xml
+++ b/toolkit/content/widgets/tabbox.xml
@@ -4,222 +4,16 @@
    - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
 
 
 <bindings id="tabBindings"
           xmlns="http://www.mozilla.org/xbl"
           xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
           xmlns:xbl="http://www.mozilla.org/xbl">
 
-  <binding id="tabbox">
-    <resources>
-      <stylesheet src="chrome://global/skin/tabbox.css"/>
-    </resources>
-
-    <implementation>
-      <property name="handleCtrlTab">
-        <setter>
-        <![CDATA[
-          this.setAttribute("handleCtrlTab", val);
-          return val;
-        ]]>
-        </setter>
-        <getter>
-        <![CDATA[
-          return (this.getAttribute("handleCtrlTab") != "false");
-        ]]>
-        </getter>
-      </property>
-
-      <field name="_handleMetaAltArrows" readonly="true">
-        /Mac/.test(navigator.platform)
-      </field>
-
-      <!-- _tabs and _tabpanels are deprecated, they exist only for
-           backwards compatibility. -->
-      <property name="_tabs" readonly="true" onget="return this.tabs;"/>
-      <property name="_tabpanels" readonly="true" onget="return this.tabpanels;"/>
-
-      <property name="tabs" readonly="true">
-        <getter>
-        <![CDATA[
-          if (this.hasAttribute("tabcontainer")) {
-            return document.getElementById(this.getAttribute("tabcontainer"));
-          }
-          return this.getElementsByTagNameNS(
-              "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul",
-              "tabs").item(0);
-        ]]>
-        </getter>
-      </property>
-
-      <property name="tabpanels" readonly="true">
-        <getter>
-        <![CDATA[
-          return this.getElementsByTagNameNS(
-              "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul",
-              "tabpanels").item(0);
-        ]]>
-        </getter>
-      </property>
-
-      <property name="selectedIndex">
-        <getter>
-        <![CDATA[
-          var tabs = this.tabs;
-          return tabs ? tabs.selectedIndex : -1;
-        ]]>
-        </getter>
-
-        <setter>
-        <![CDATA[
-          var tabs = this.tabs;
-          if (tabs)
-            tabs.selectedIndex = val;
-          this.setAttribute("selectedIndex", val);
-          return val;
-        ]]>
-        </setter>
-      </property>
-
-      <property name="selectedTab">
-        <getter>
-        <![CDATA[
-          var tabs = this.tabs;
-          return tabs && tabs.selectedItem;
-        ]]>
-        </getter>
-
-        <setter>
-        <![CDATA[
-          if (val) {
-            var tabs = this.tabs;
-            if (tabs)
-              tabs.selectedItem = val;
-          }
-          return val;
-        ]]>
-        </setter>
-      </property>
-
-      <property name="selectedPanel">
-        <getter>
-        <![CDATA[
-          var tabpanels = this.tabpanels;
-          return tabpanels && tabpanels.selectedPanel;
-        ]]>
-        </getter>
-
-        <setter>
-        <![CDATA[
-          if (val) {
-            var tabpanels = this.tabpanels;
-            if (tabpanels)
-              tabpanels.selectedPanel = val;
-          }
-          return val;
-        ]]>
-        </setter>
-      </property>
-
-      <method name="handleEvent">
-        <parameter name="event"/>
-        <body>
-        <![CDATA[
-          if (!event.isTrusted) {
-            // Don't let untrusted events mess with tabs.
-            return;
-          }
-
-          // Don't check if the event was already consumed because tab
-          // navigation should always work for better user experience.
-
-          switch (event.keyCode) {
-            case event.DOM_VK_TAB:
-              if (event.ctrlKey && !event.altKey && !event.metaKey)
-                if (this.tabs && this.handleCtrlTab) {
-                  this.tabs.advanceSelectedTab(event.shiftKey ? -1 : 1, true);
-                  event.preventDefault();
-                }
-              break;
-            case event.DOM_VK_PAGE_UP:
-              if (event.ctrlKey && !event.shiftKey && !event.altKey && !event.metaKey &&
-                  this.tabs) {
-                this.tabs.advanceSelectedTab(-1, true);
-                event.preventDefault();
-              }
-              break;
-            case event.DOM_VK_PAGE_DOWN:
-              if (event.ctrlKey && !event.shiftKey && !event.altKey && !event.metaKey &&
-                  this.tabs) {
-                this.tabs.advanceSelectedTab(1, true);
-                event.preventDefault();
-              }
-              break;
-            case event.DOM_VK_LEFT:
-              if (event.metaKey && event.altKey && !event.shiftKey && !event.ctrlKey)
-                if (this.tabs && this._handleMetaAltArrows) {
-                  var offset = window.getComputedStyle(this)
-                                     .direction == "ltr" ? -1 : 1;
-                  this.tabs.advanceSelectedTab(offset, true);
-                  event.preventDefault();
-                }
-              break;
-            case event.DOM_VK_RIGHT:
-              if (event.metaKey && event.altKey && !event.shiftKey && !event.ctrlKey)
-                if (this.tabs && this._handleMetaAltArrows) {
-                  offset = window.getComputedStyle(this)
-                                     .direction == "ltr" ? 1 : -1;
-                  this.tabs.advanceSelectedTab(offset, true);
-                  event.preventDefault();
-                }
-              break;
-          }
-        ]]>
-        </body>
-      </method>
-
-      <field name="_eventNode">this</field>
-
-      <property name="eventNode" onget="return this._eventNode;">
-        <setter>
-          <![CDATA[
-            if (val != this._eventNode) {
-              const nsIEventListenerService =
-                Ci.nsIEventListenerService;
-              let els = Cc["@mozilla.org/eventlistenerservice;1"]
-                          .getService(nsIEventListenerService);
-              els.addSystemEventListener(val, "keydown", this, false);
-              els.removeSystemEventListener(this._eventNode, "keydown", this, false);
-              this._eventNode = val;
-            }
-            return val;
-          ]]>
-        </setter>
-      </property>
-
-      <constructor>
-        switch (this.getAttribute("eventnode")) {
-          case "parent": this._eventNode = this.parentNode; break;
-          case "window": this._eventNode = window; break;
-          case "document": this._eventNode = document; break;
-        }
-        let els = Cc["@mozilla.org/eventlistenerservice;1"]
-                    .getService(Ci.nsIEventListenerService);
-        els.addSystemEventListener(this._eventNode, "keydown", this, false);
-      </constructor>
-
-      <destructor>
-        let els = Cc["@mozilla.org/eventlistenerservice;1"]
-                    .getService(Ci.nsIEventListenerService);
-        els.removeSystemEventListener(this._eventNode, "keydown", this, false);
-      </destructor>
-    </implementation>
-  </binding>
-
   <binding id="tabs"
            extends="chrome://global/content/bindings/general.xml#basecontrol">
     <resources>
       <stylesheet src="chrome://global/skin/tabbox.css"/>
     </resources>
 
     <content>
       <xul:spacer class="tabs-left"/>
diff --git a/toolkit/content/xul.css b/toolkit/content/xul.css
--- a/toolkit/content/xul.css
+++ b/toolkit/content/xul.css
@@ -551,17 +551,16 @@ deck {
 
 stack {
   display: -moz-stack;
 }
 
 /********** tabbox *********/
 
 tabbox {
-  -moz-binding: url("chrome://global/content/bindings/tabbox.xml#tabbox");
   -moz-box-orient: vertical;
 }
 
 tabs {
   -moz-binding: url("chrome://global/content/bindings/tabbox.xml#tabs");
   -moz-box-orient: horizontal;
 }
 
