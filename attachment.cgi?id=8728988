# HG changeset patch
# User Jan Odvarko <odvarko@gmail.com>
# Date 1455297909 -3600
#      Fri Feb 12 18:25:09 2016 +0100
# Node ID 6c567e90c496cb37c225b8ccbaf844f7200bef79
# Parent  f7abc73ebddbff1d47753051faafda94c61916c3
Bug 1211525 - HTTP log inspection in the Console panel; r=jlongster, helenvholmes, bgrins, linclark

diff --git a/devtools/client/jsonview/components/json-panel.js b/devtools/client/jsonview/components/json-panel.js
--- a/devtools/client/jsonview/components/json-panel.js
+++ b/devtools/client/jsonview/components/json-panel.js
@@ -40,17 +40,17 @@ var JsonPanel = React.createClass({
   render: function() {
     var content;
     var data = this.props.data;
 
     try {
       if (typeof data == "object") {
         content = TreeView({
           data: this.props.data,
-          mode: "tiny",
+          mode: "short",
           searchFilter: this.props.searchFilter
         });
       } else {
         content = DOM.div({className: "jsonParseError"},
           data + ""
         );
       }
     } catch (err) {
diff --git a/devtools/client/jsonview/components/reps/tabs.js b/devtools/client/jsonview/components/reps/tabs.js
--- a/devtools/client/jsonview/components/reps/tabs.js
+++ b/devtools/client/jsonview/components/reps/tabs.js
@@ -4,17 +4,20 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 define(function(require, exports, module) {
 
 const React = require("devtools/client/shared/vendor/react");
+
+// Shortcuts
 const DOM = React.DOM;
+const PropTypes = React.PropTypes;
 
 /**
  * Renders simple 'tab' widget.
  *
  * Based on ReactSimpleTabs component
  * https://github.com/pedronauck/react-simpletabs
  *
  * Component markup (+CSS) example:
@@ -30,28 +33,28 @@ const DOM = React.DOM;
  *    The content of active panel here
  *  </article>
  * <div>
  */
 var Tabs = React.createClass({
   displayName: "Tabs",
 
   propTypes: {
-    className: React.PropTypes.oneOfType([
-      React.PropTypes.array,
-      React.PropTypes.string,
-      React.PropTypes.object
+    className: PropTypes.oneOfType([
+      PropTypes.array,
+      PropTypes.string,
+      PropTypes.object
     ]),
-    tabActive: React.PropTypes.number,
-    onMount: React.PropTypes.func,
-    onBeforeChange: React.PropTypes.func,
-    onAfterChange: React.PropTypes.func,
-    children: React.PropTypes.oneOfType([
-      React.PropTypes.array,
-      React.PropTypes.element
+    tabActive: PropTypes.number,
+    onMount: PropTypes.func,
+    onBeforeChange: PropTypes.func,
+    onAfterChange: PropTypes.func,
+    children: PropTypes.oneOfType([
+      PropTypes.array,
+      PropTypes.element
     ]).isRequired
   },
 
   getDefaultProps: function () {
     return {
       tabActive: 1
     };
   },
diff --git a/devtools/client/jsonview/components/reps/toolbar.js b/devtools/client/jsonview/components/reps/toolbar.js
--- a/devtools/client/jsonview/components/reps/toolbar.js
+++ b/devtools/client/jsonview/components/reps/toolbar.js
@@ -4,16 +4,18 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 define(function(require, exports, module) {
 
 const React = require("devtools/client/shared/vendor/react");
+
+// Shortcuts
 const DOM = React.DOM;
 
 /**
  * Renders a simple toolbar.
  */
 var Toolbar = React.createClass({
   displayName: "Toolbar",
 
@@ -27,25 +29,21 @@ var Toolbar = React.createClass({
 });
 
 /**
  * Renders a simple toolbar button.
  */
 var ToolbarButton = React.createClass({
   displayName: "ToolbarButton",
 
-  propTypes: {
-    active: React.PropTypes.bool,
-    disabled: React.PropTypes.bool,
-  },
-
   render: function() {
     var props = Object.assign({className: "btn"}, this.props);
     return (
       DOM.button(props, this.props.children)
     );
   },
 });
 
 // Exports from this module
 exports.Toolbar = Toolbar;
 exports.ToolbarButton = ToolbarButton;
+
 });
diff --git a/devtools/client/jsonview/components/reps/tree-view.js b/devtools/client/jsonview/components/reps/tree-view.js
--- a/devtools/client/jsonview/components/reps/tree-view.js
+++ b/devtools/client/jsonview/components/reps/tree-view.js
@@ -1,261 +1,269 @@
 /* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+// Make this available to both AMD and CJS environments
 define(function(require, exports, module) {
+  // Dependencies
+  const React = require("devtools/client/shared/vendor/react");
+  const { createFactories } = require("devtools/client/shared/components/reps/rep-utils");
+  const { Rep } = createFactories(require("devtools/client/shared/components/reps/rep"));
+  const { isCropped } = require("devtools/client/shared/components/reps/string");
 
-// Dependencies
-const React = require("devtools/client/shared/vendor/react");
-const { createFactories } = require("devtools/client/shared/components/reps/rep-utils");
-const { Rep } = createFactories(require("devtools/client/shared/components/reps/rep"));
-const { StringRep } = require("devtools/client/shared/components/reps/string");
-const DOM = React.DOM;
+  // Shortcuts
+  const DOM = React.DOM;
+  const PropTypes = React.PropTypes;
 
-var uid = 0;
+  let uid = 0;
 
-/**
- * Renders a tree view with expandable/collapsible items.
- */
-var TreeView = React.createClass({
-  displayName: "TreeView",
+  /**
+   * Renders a tree view with expandable/collapsible items.
+   */
+  let TreeView = React.createClass({
+    displayName: "TreeView",
 
-  getInitialState: function() {
-    return {
-      data: {},
-      searchFilter: null
+    propTypes: {
+      mode: PropTypes.string.isRequired,
+      data: PropTypes.object.isRequired,
+    },
+
+    getInitialState: function() {
+      return {
+        data: {},
+        searchFilter: null
+      };
+    },
+
+    // Rendering
+
+    render: function() {
+      let mode = this.props.mode;
+      let root = this.state.data;
+
+      let children = [];
+
+      if (Array.isArray(root)) {
+        for (let i = 0; i < root.length; i++) {
+          let child = root[i];
+          children.push(TreeNode({
+            key: child.key,
+            data: child,
+            mode: mode,
+            searchFilter: this.state.searchFilter || this.props.searchFilter
+          }));
+        }
+      } else {
+        children.push(React.addons.createFragment(root));
+      }
+
+      return (
+        DOM.div({className: "domTable", cellPadding: 0, cellSpacing: 0},
+          children
+        )
+      );
+    },
+
+    // Data
+
+    componentDidMount: function() {
+      let members = initMembers(this.props.data, 0);
+      this.setState({data: members, searchFilter: this.props.searchFilter});
+    },
+
+    componentWillReceiveProps: function(nextProps) {
+      let updatedState = {
+        searchFilter: nextProps.searchFilter
+      };
+
+      if (this.props.data !== nextProps.data) {
+        updatedState.data = initMembers(nextProps.data, 0);
+      }
+
+      this.setState(updatedState);
+    }
+  });
+
+  /**
+   * Represents a node within the tree.
+   */
+  let TreeNode = React.createFactory(React.createClass({
+    displayName: "TreeNode",
+
+    propTypes: {
+      mode: PropTypes.string.isRequired,
+      data: PropTypes.object.isRequired,
+    },
+
+    getInitialState: function() {
+      return {
+        data: {},
+        searchFilter: null
+      };
+    },
+
+    componentDidMount: function() {
+      this.setState({
+        data: this.props.data
+      });
+    },
+
+    render: function() {
+      let member = this.state.data;
+      let mode = this.props.mode;
+
+      let classNames = ["memberRow"];
+      classNames.push(member.type + "Row");
+
+      if (member.hasChildren) {
+        classNames.push("hasChildren");
+      }
+
+      if (member.open) {
+        classNames.push("opened");
+      }
+
+      if (!member.children) {
+        // Cropped strings are expandable, but they don't have children.
+        let isString = typeof member.value == "string";
+        if (member.hasChildren && !isString) {
+          member.children = initMembers(member.value);
+        } else {
+          member.children = [];
+        }
+      }
+
+      let children = [];
+      if (member.open && member.children.length) {
+        for (let i in member.children) {
+          let child = member.children[i];
+          children.push(TreeNode({
+            key: child.key,
+            data: child,
+            mode: mode,
+            searchFilter: this.state.searchFilter || this.props.searchFilter
+          }));
+        }
+      }
+
+      let filter = this.props.searchFilter || "";
+      let name = member.name || "";
+      let value = member.value || "";
+
+      // Filtering is case-insensitive
+      filter = filter.toLowerCase();
+      name = name.toLowerCase();
+
+      if (filter && (name.indexOf(filter) < 0)) {
+        // Cache the stringify result, so the filtering is fast
+        // the next time.
+        if (!member.valueString) {
+          member.valueString = JSON.stringify(value).toLowerCase();
+        }
+
+        if (member.valueString && member.valueString.indexOf(filter) < 0) {
+          classNames.push("hidden");
+        }
+      }
+
+      return (
+        DOM.div({className: classNames.join(" ")},
+          DOM.span({className: "memberLabelCell", onClick: this.onClick},
+            DOM.span({className: "memberIcon"}),
+            DOM.span({className: "memberLabel " + member.type + "Label"},
+              member.name)
+          ),
+          DOM.span({className: "memberValueCell"},
+            DOM.span({},
+              Rep({
+                object: member.value,
+                mode: this.props.mode,
+                member: member
+              })
+            )
+          ),
+          DOM.div({className: "memberChildren"},
+            children
+          )
+        )
+      );
+    },
+
+    onClick: function(e) {
+      let member = this.state.data;
+      member.open = !member.open;
+
+      this.setState({data: member});
+
+      e.stopPropagation();
+    },
+  }));
+
+  // Helpers
+
+  function initMembers(parent) {
+    let members = getMembers(parent);
+    return members;
+  }
+
+  function getMembers(object) {
+    let members = [];
+    getObjectProperties(object, function(prop, value) {
+      let valueType = typeof value;
+      let hasChildren = (valueType === "object" && hasProperties(value));
+
+      // Cropped strings are expandable, so the user can see the
+      // entire original value.
+      if (isCropped(value)) {
+        hasChildren = true;
+      }
+
+      let type = getType(value);
+      let member = createMember(type, prop, value, hasChildren);
+      members.push(member);
+    });
+
+    return members;
+  }
+
+  function createMember(type, name, value, hasChildren) {
+    let member = {
+      name: name,
+      type: type,
+      rowClass: "memberRow-" + type,
+      hasChildren: hasChildren,
+      value: value,
+      open: false,
+      key: uid++
     };
-  },
 
-  // Rendering
+    return member;
+  }
 
-  render: function() {
-    var mode = this.props.mode;
-    var root = this.state.data;
+  function getObjectProperties(obj, callback) {
+    for (let p in obj) {
+      try {
+        callback.call(this, p, obj[p]);
+      } catch (e) {
+        console.error(e);
+      }
+    }
+  }
 
-    var children = [];
-
-    if (Array.isArray(root)) {
-      for (var i=0; i<root.length; i++) {
-        var child = root[i];
-        children.push(TreeNode({
-          key: child.key,
-          data: child,
-          mode: mode,
-          searchFilter: this.state.searchFilter || this.props.searchFilter
-        }));
-      }
-    } else {
-      children.push(React.addons.createFragment(root));
+  function hasProperties(obj) {
+    if (typeof obj == "string") {
+      return false;
     }
 
-    return (
-      DOM.div({className: "domTable", cellPadding: 0, cellSpacing: 0},
-        children
-      )
-    );
-  },
-
-  // Data
-
-  componentDidMount: function() {
-    var members = initMembers(this.props.data, 0);
-    this.setState({data: members, searchFilter: this.props.searchFilter});
-  },
-
-  componentWillReceiveProps: function(nextProps) {
-    var updatedState = {
-      searchFilter: nextProps.searchFilter
-    };
-
-    if (this.props.data !== nextProps.data) {
-      updatedState.data = initMembers(nextProps.data, 0);
-    }
-
-    this.setState(updatedState);
-  }
-});
-
-/**
- * Represents a node within the tree.
- */
-var TreeNode = React.createFactory(React.createClass({
-  displayName: "TreeNode",
-
-  getInitialState: function() {
-    return { data: {}, searchFilter: null };
-  },
-
-  componentDidMount: function() {
-    this.setState({data: this.props.data});
-  },
-
-  render: function() {
-    var member = this.state.data;
-    var mode = this.props.mode;
-
-    var classNames = ["memberRow"];
-    classNames.push(member.type + "Row");
-
-    if (member.hasChildren) {
-      classNames.push("hasChildren");
-    }
-
-    if (member.open) {
-      classNames.push("opened");
-    }
-
-    if (!member.children) {
-      // Cropped strings are expandable, but they don't have children.
-      var isString = typeof(member.value) == "string";
-      if (member.hasChildren && !isString) {
-        member.children = initMembers(member.value);
-      } else {
-        member.children = [];
-      }
-    }
-
-    var children = [];
-    if (member.open && member.children.length) {
-      for (var i in member.children) {
-        var child = member.children[i];
-        children.push(TreeNode({
-          key: child.key,
-          data: child,
-          mode: mode,
-          searchFilter: this.state.searchFilter || this.props.searchFilter
-        }));
-      };
-    }
-
-    var filter = this.props.searchFilter || "";
-    var name = member.name || "";
-    var value = member.value || "";
-
-    // Filtering is case-insensitive
-    filter = filter.toLowerCase();
-    name = name.toLowerCase();
-
-    if (filter && (name.indexOf(filter) < 0)) {
-      // Cache the stringify result, so the filtering is fast
-      // the next time.
-      if (!member.valueString) {
-        member.valueString = JSON.stringify(value).toLowerCase();
-      }
-
-      if (member.valueString && member.valueString.indexOf(filter) < 0) {
-        classNames.push("hidden");
-      }
-    }
-
-    return (
-      DOM.div({className: classNames.join(" ")},
-        DOM.span({className: "memberLabelCell", onClick: this.onClick},
-          DOM.span({className: "memberIcon"}),
-          DOM.span({className: "memberLabel " + member.type + "Label"},
-            member.name)
-        ),
-        DOM.span({className: "memberValueCell"},
-          DOM.span({},
-            Rep({
-              object: member.value,
-              mode: this.props.mode,
-              member: member
-            })
-          )
-        ),
-        DOM.div({className: "memberChildren"},
-          children
-        )
-      )
-    )
-  },
-
-  onClick: function(e) {
-    var member = this.state.data;
-    member.open = !member.open;
-
-    this.setState({data: member});
-
-    e.stopPropagation();
-  },
-}));
-
-// Helpers
-
-function initMembers(parent) {
-  var members = getMembers(parent);
-  return members;
-}
-
-function getMembers(object) {
-  var members = [];
-  getObjectProperties(object, function(prop, value) {
-    var valueType = typeof(value);
-    var hasChildren = (valueType === "object" && hasProperties(value));
-
-    // Cropped strings are expandable, so the user can see the
-    // entire original value.
-    if (StringRep.isCropped(value)) {
-      hasChildren = true;
-    }
-
-    var type = getType(value);
-    var member = createMember(type, prop, value, hasChildren);
-    members.push(member);
-  });
-
-  return members;
-}
-
-function createMember(type, name, value, hasChildren) {
-  var member = {
-    name: name,
-    type: type,
-    rowClass: "memberRow-" + type,
-    open: "",
-    hasChildren: hasChildren,
-    value: value,
-    open: false,
-    key: uid++
-  };
-
-  return member;
-}
-
-function getObjectProperties(obj, callback) {
-  for (var p in obj) {
-    try {
-      callback.call(this, p, obj[p]);
-    }
-    catch (e) {
-      console.error(e)
-    }
-  }
-}
-
-function hasProperties(obj) {
-  if (typeof(obj) == "string") {
-    return false;
+    return Object.keys(obj).length > 1;
   }
 
-  try {
-    for (var name in obj) {
-      return true;
-    }
-  }
-  catch (exc) {
+  function getType(object) {
+    // A type provider (or a decorator) should be used here.
+    return "dom";
   }
 
-  return false;
-}
-
-function getType(object) {
-  // A type provider (or a decorator) should be used here.
-  return "dom";
-}
-
-// Exports from this module
-exports.TreeView = TreeView;
+  // Exports from this module
+  exports.TreeView = TreeView;
 });
diff --git a/devtools/client/jsonview/css/moz.build b/devtools/client/jsonview/css/moz.build
--- a/devtools/client/jsonview/css/moz.build
+++ b/devtools/client/jsonview/css/moz.build
@@ -15,10 +15,10 @@ DevToolsModules(
     'main.css',
     'read-only-prop.svg',
     'search-box.css',
     'search.svg',
     'tabs.css',
     'text-panel.css',
     'toolbar.css',
     'twisty-closed.svg',
-    'twisty-open.svg'
+    'twisty-open.svg',
 )
diff --git a/devtools/client/jsonview/css/tabs.css b/devtools/client/jsonview/css/tabs.css
--- a/devtools/client/jsonview/css/tabs.css
+++ b/devtools/client/jsonview/css/tabs.css
@@ -72,18 +72,17 @@
 
 .theme-firebug .tabs .tabs-menu-item a {
   padding: 5px 8px 4px 8px;;
   font-weight: bold;
   color: #565656;
   border-radius: 4px 4px 0 0;
 }
 
-.theme-firebug .tabs .tabs-menu-item.is-active a,
-.theme-firebug .tabs .tabs-menu-item.is-active a:focus {
+.theme-firebug .tabs .tabs-menu-item.is-active a {
   background-color: rgb(247, 251, 254);
   border: 1px solid rgb(170, 188, 207);
   border-bottom-color: transparent;
 }
 
 .theme-firebug .tabs .tabs-menu-item:hover a {
   border: 1px solid #C8C8C8;
   border-bottom: 1px solid transparent;
diff --git a/devtools/client/locales/en-US/netmonitor.properties b/devtools/client/locales/en-US/netmonitor.properties
--- a/devtools/client/locales/en-US/netmonitor.properties
+++ b/devtools/client/locales/en-US/netmonitor.properties
@@ -64,17 +64,17 @@ netmonitor.security.disabled=Disabled
 # LOCALIZATION NOTE (netmonitor.security.hostHeader):
 # This string is used as a header for section containing security information
 # related to the remote host. %S is replaced with the domain name of the remote
 # host. For example: Host example.com
 netmonitor.security.hostHeader=Host %S:
 
 # LOCALIZATION NOTE (netmonitor.security.notAvailable):
 # This string is used to indicate that a certain piece of information is not
-# available to be displayd. For example a certificate that has no organization
+# available to be displayed. For example a certificate that has no organization
 # defined:
 #   Organization: <Not Available>
 netmonitor.security.notAvailable=<Not Available>
 
 # LOCALIZATION NOTE (netmonitor.status.cached):
 # This string is used as tooltip text over the status icon when a request is
 # served from cached.
 netmonitor.status.cached=cached
@@ -263,8 +263,58 @@ charts.totalSeconds=Time: #1 second;Time
 
 # LOCALIZATION NOTE (charts.totalCached): This is the label displayed
 # in the performance analysis view for total cached responses.
 charts.totalCached=Cached responses: %S
 
 # LOCALIZATION NOTE (charts.totalCount): This is the label displayed
 # in the performance analysis view for total requests.
 charts.totalCount=Total requests: %S
+
+# LOCALIZATION NOTE (netRequest.headers): A label used for Headers tab
+# This tab displays list of HTTP headers
+netRequest.headers=Headers
+
+# LOCALIZATION NOTE (netRequest.response): A label used for Response tab
+# This tab displays HTTP response body
+netRequest.response=Response
+
+# LOCALIZATION NOTE (netRequest.rawData): A label used for a section
+# in Response tab. This section displays raw response body as it's
+# been received from the backend (debugger server)
+netRequest.rawData=Raw Data
+
+# LOCALIZATION NOTE (netRequest.xml): A label used for a section
+# in Response tab. This section displays parsed XML response body.
+netRequest.xml=XML
+
+# LOCALIZATION NOTE (netRequest.image): A label used for a section
+# in Response tab. This section displays images returned in response body.
+netRequest.image=Image
+
+# LOCALIZATION NOTE (netRequest.sizeLimitMessage): A label used
+# in Response and Post tabs in case the body is bigger than given limit.
+# It allows the user to click and fetch more from the backend.
+# The {{link}} will be replace at run-time by an active link.
+# String with ID 'netRequest.sizeLimitMessageLink' will be used as text
+# for this link.
+netRequest.sizeLimitMessage=Size limit has been reached. Click {{link}} to load more.
+netRequest.sizeLimitMessageLink=here
+
+# LOCALIZATION NOTE (netRequest.responseBodyDiscarded): A label used
+# in Response tab if the response body is not available.
+netRequest.responseBodyDiscarded=Response body is not not available.
+
+# LOCALIZATION NOTE (netRequest.requestBodyDiscarded): A label used
+# in Post tab if the post body is not available.
+netRequest.requestBodyDiscarded=Request post body is not available.
+
+# LOCALIZATION NOTE (netRequest.post): A label used for Post tab
+# This tab displays HTTP post body
+netRequest.post=Post
+
+# LOCALIZATION NOTE (netRequest.cookies): A label used for Cookies tab
+# This tab displays request and response cookies.
+netRequest.cookies=Cookies
+
+# LOCALIZATION NOTE (netRequest.params): A label used for URL parameters tab
+# This tab displays data parsed from URL query string.
+netRequest.params=Params
diff --git a/devtools/client/shared/components/reps/array.js b/devtools/client/shared/components/reps/array.js
--- a/devtools/client/shared/components/reps/array.js
+++ b/devtools/client/shared/components/reps/array.js
@@ -12,24 +12,29 @@ define(function(require, exports, module
   const React = require("devtools/client/shared/vendor/react");
   const { createFactories } = require("./rep-utils");
   const { Rep } = createFactories(require("./rep"));
   const { ObjectBox } = createFactories(require("./object-box"));
   const { Caption } = createFactories(require("./caption"));
 
   // Shortcuts
   const DOM = React.DOM;
+  const PropTypes = React.PropTypes;
 
   /**
    * Renders an array. The array is enclosed by left and right bracket
    * and the max number of rendered items depends on the current mode.
    */
   let ArrayRep = React.createClass({
     displayName: "ArrayRep",
 
+    propTypes: {
+      object: PropTypes.array.isRequired
+    },
+
     render: function() {
       let mode = this.props.mode || "short";
       let object = this.props.object;
       let items;
 
       if (mode == "tiny") {
         items = DOM.span({className: "length"}, object.length);
       } else {
diff --git a/devtools/client/shared/components/reps/caption.js b/devtools/client/shared/components/reps/caption.js
--- a/devtools/client/shared/components/reps/caption.js
+++ b/devtools/client/shared/components/reps/caption.js
@@ -5,25 +5,32 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 // Make this available to both AMD and CJS environments
 define(function(require, exports, module) {
   // Dependencies
   const React = require("devtools/client/shared/vendor/react");
+
+  // Shortcuts
   const DOM = React.DOM;
+  const PropTypes = React.PropTypes;
 
   /**
    * Renders a caption. This template is used by other components
    * that needs to distinguish between a simple text/value and a label.
    */
   const Caption = React.createClass({
     displayName: "Caption",
 
+    propTypes: {
+      object: PropTypes.string.isRequired
+    },
+
     render: function() {
       return (
         DOM.span({"className": "caption"}, this.props.object)
       );
     },
   });
 
   // Exports from this module
diff --git a/devtools/client/shared/components/reps/moz.build b/devtools/client/shared/components/reps/moz.build
--- a/devtools/client/shared/components/reps/moz.build
+++ b/devtools/client/shared/components/reps/moz.build
@@ -12,9 +12,10 @@ DevToolsModules(
     'object-box.js',
     'object-link.js',
     'object.js',
     'rep-utils.js',
     'rep.js',
     'reps.css',
     'string.js',
     'undefined.js',
+    'url.js',
 )
diff --git a/devtools/client/shared/components/reps/number.js b/devtools/client/shared/components/reps/number.js
--- a/devtools/client/shared/components/reps/number.js
+++ b/devtools/client/shared/components/reps/number.js
@@ -8,22 +8,32 @@
 
 // Make this available to both AMD and CJS environments
 define(function(require, exports, module) {
   // Dependencies
   const React = require("devtools/client/shared/vendor/react");
   const { createFactories } = require("./rep-utils");
   const { ObjectBox } = createFactories(require("./object-box"));
 
+  // Shortcuts
+  const PropTypes = React.PropTypes;
+
   /**
    * Renders a number
    */
   const Number = React.createClass({
     displayName: "Number",
 
+    propTypes: {
+      object: PropTypes.oneOfType(
+        PropTypes.number,
+        PropTypes.bool
+      )
+    },
+
     render: function() {
       let value = this.props.object;
       return (
         ObjectBox({className: "number"},
           this.stringify(value)
         )
       );
     },
diff --git a/devtools/client/shared/components/reps/object-box.js b/devtools/client/shared/components/reps/object-box.js
--- a/devtools/client/shared/components/reps/object-box.js
+++ b/devtools/client/shared/components/reps/object-box.js
@@ -7,22 +7,29 @@
 "use strict";
 
 // Make this available to both AMD and CJS environments
 define(function(require, exports, module) {
   // Dependencies
   const React = require("devtools/client/shared/vendor/react");
   const DOM = React.DOM;
 
+  // Shortcuts
+  const PropTypes = React.PropTypes;
+
   /**
    * Renders a box for given object.
    */
   const ObjectBox = React.createClass({
     displayName: "ObjectBox",
 
+    propTypes: {
+      classname: PropTypes.string.isRequired
+    },
+
     render: function() {
       let className = this.props.className;
       let boxClassName = className ? " objectBox-" + className : "";
 
       return (
         DOM.span({className: "objectBox" + boxClassName, role: "presentation"},
           this.props.children
         )
diff --git a/devtools/client/shared/components/reps/object-link.js b/devtools/client/shared/components/reps/object-link.js
--- a/devtools/client/shared/components/reps/object-link.js
+++ b/devtools/client/shared/components/reps/object-link.js
@@ -7,22 +7,29 @@
 "use strict";
 
 // Make this available to both AMD and CJS environments
 define(function(require, exports, module) {
   // Dependencies
   const React = require("devtools/client/shared/vendor/react");
   const DOM = React.DOM;
 
+  // Shortcuts
+  const PropTypes = React.PropTypes;
+
   /**
    * Renders a link for given object.
    */
   const ObjectLink = React.createClass({
     displayName: "ObjectLink",
 
+    propTypes: {
+      classname: PropTypes.string.isRequired
+    },
+
     render: function() {
       let className = this.props.className;
       let objectClassName = className ? " objectLink-" + className : "";
       let linkClassName = "objectLink" + objectClassName + " a11yFocus";
 
       return (
         DOM.a({className: linkClassName, _repObject: this.props.object},
           this.props.children
diff --git a/devtools/client/shared/components/reps/object.js b/devtools/client/shared/components/reps/object.js
--- a/devtools/client/shared/components/reps/object.js
+++ b/devtools/client/shared/components/reps/object.js
@@ -11,28 +11,42 @@ define(function(require, exports, module
   // Dependencies
   const React = require("devtools/client/shared/vendor/react");
   const { createFactories } = require("./rep-utils");
   const { ObjectBox } = createFactories(require("./object-box"));
   const { Caption } = createFactories(require("./caption"));
 
   // Shortcuts
   const DOM = React.DOM;
+  const PropTypes = React.PropTypes;
 
   /**
    * Renders an object. An object is represented by a list of its
    * properties enclosed in curly brackets.
    */
   const Obj = React.createClass({
     displayName: "Obj",
 
+    propTypes: {
+      object: PropTypes.object.isRequired
+    },
+
     render: function() {
       let object = this.props.object;
       let props = this.shortPropIterator(object);
 
+      if (this.props.mode == "tiny" || !props.length) {
+        return (
+          ObjectBox({className: "object"},
+            DOM.span({className: "objectTitle"}, this.getTitle(object)),
+            DOM.span({className: "objectLeftBrace", role: "presentation"}, "{}")
+          )
+        );
+      }
+
       return (
         ObjectBox({className: "object"},
           DOM.span({className: "objectTitle"}, this.getTitle(object)),
           DOM.span({className: "objectLeftBrace", role: "presentation"}, "{"),
           props,
           DOM.span({className: "objectRightBrace"}, "}")
         )
       );
@@ -57,18 +71,19 @@ define(function(require, exports, module
       } catch (err) {
         console.error(err);
       }
       return [];
     },
 
     propIterator: function(object, max) {
       function isInterestingProp(t, value) {
-        return (t == "boolean" || t == "number" || (t == "string" && value) ||
-          (t == "object" && value && value.toString));
+        // Displaying objects in property value can cause recursion.
+        // (e.g. when the first child object is |this|)
+        return (t == "boolean" || t == "number" || (t == "string" && value));
       }
 
       // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=945377
       if (Object.prototype.toString.call(object) === "[object Generator]") {
         object = Object.getPrototypeOf(object);
       }
 
       // Object members with non-empty values are preferred since it gives the
diff --git a/devtools/client/shared/components/reps/reps.css b/devtools/client/shared/components/reps/reps.css
--- a/devtools/client/shared/components/reps/reps.css
+++ b/devtools/client/shared/components/reps/reps.css
@@ -54,16 +54,21 @@
 }
 
 .objectLink-function,
 .objectBox-stackTrace,
 .objectLink-profile {
   color: DarkGreen;
 }
 
+.objectLink-Location {
+  font-style: italic;
+  color: #555555;
+}
+
 .objectBox-null,
 .objectBox-undefined,
 .objectBox-hint,
 .logRowHint {
   font-style: italic;
   color: #787878;
 }
 
diff --git a/devtools/client/shared/components/reps/string.js b/devtools/client/shared/components/reps/string.js
--- a/devtools/client/shared/components/reps/string.js
+++ b/devtools/client/shared/components/reps/string.js
@@ -8,22 +8,29 @@
 
 // Make this available to both AMD and CJS environments
 define(function(require, exports, module) {
   // Dependencies
   const React = require("devtools/client/shared/vendor/react");
   const { createFactories } = require("./rep-utils");
   const { ObjectBox } = createFactories(require("./object-box"));
 
+  // Shortcuts
+  const PropTypes = React.PropTypes;
+
   /**
    * Renders a string. String value is enclosed within quotes.
    */
   const StringRep = React.createClass({
     displayName: "StringRep",
 
+    propTypes: {
+      object: PropTypes.string.isRequired,
+    },
+
     render: function() {
       let text = this.props.object;
       let member = this.props.member;
       if (member && member.open) {
         return (
           ObjectBox({className: "string"},
             "\"" + text + "\""
           )
@@ -90,12 +97,16 @@ define(function(require, exports, module
   function supportsObject(object, type) {
     return (type == "string");
   }
 
   // Exports from this module
 
   exports.StringRep = {
     rep: StringRep,
-    supportsObject: supportsObject,
-    isCropped: isCropped
+    supportsObject: supportsObject
   };
+
+  exports.isCropped = isCropped;
+  exports.cropString = cropString;
+  exports.cropMultipleLines = cropMultipleLines;
+  exports.escapeNewLines = escapeNewLines;
 });
diff --git a/devtools/client/shared/components/reps/url.js b/devtools/client/shared/components/reps/url.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/shared/components/reps/url.js
@@ -0,0 +1,150 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+// Make this available to both AMD and CJS environments
+define(function(require, exports, module) {
+  let Url = {};
+
+  Url.getFileName = function(url) {
+    let split = Url.splitURLBase(url);
+    return split.name;
+  };
+
+  Url.getProtocol = function(url) {
+    let split = Url.splitURLBase(url);
+    return split.protocol;
+  };
+
+  Url.splitURLBase = function(url) {
+    if (Url.isDataURL(url)) {
+      return {};
+    }
+    return Url.splitURLTrue(url);
+  };
+
+  Url.isDataURL = function(url) {
+    return (url && url.substr(0, 5) == "data:");
+  };
+
+  const reSplitFile = /(.*?):\/{2,3}([^\/]*)(.*?)([^\/]*?)($|\?.*)/;
+  Url.splitURLTrue = function(url) {
+    let m = reSplitFile.exec(url);
+    if (!m) {
+      return {
+        name: url,
+        path: url
+      };
+    } else if (m[4] == "" && m[5] == "") {
+      return {
+        protocol: m[1],
+        domain: m[2],
+        path: m[3],
+        name: m[3] != "/" ? m[3] : m[2]
+      };
+    }
+
+    return {
+      protocol: m[1],
+      domain: m[2],
+      path: m[2] + m[3],
+      name: m[4] + m[5]
+    };
+  };
+
+  Url.getFileExtension = function(url) {
+    if (!url) {
+      return null;
+    }
+
+    // Remove query string from the URL if any.
+    let queryString = url.indexOf("?");
+    if (queryString != -1) {
+      url = url.substr(0, queryString);
+    }
+
+    // Now get the file extension.
+    let lastDot = url.lastIndexOf(".");
+    return url.substr(lastDot + 1);
+  };
+
+  Url.parseURLParams = function(url) {
+    let q = url ? url.indexOf("?") : -1;
+    if (q == -1) {
+      return [];
+    }
+
+    let search = url.substr(q + 1);
+    let h = search.lastIndexOf("#");
+    if (h != -1) {
+      search = search.substr(0, h);
+    }
+
+    if (!search) {
+      return [];
+    }
+
+    return Url.parseURLEncodedText(search);
+  };
+
+  Url.parseURLEncodedText = function(text) {
+    let params = [];
+
+    // In case the text is empty just return the empty parameters
+    if (text == "") {
+      return params;
+    }
+
+    // Unescape '+' characters that are used to encode a space.
+    // See section 2.2.in RFC 3986: http://www.ietf.org/rfc/rfc3986.txt
+    text = text.replace(/\+/g, " ");
+
+    // Unescape '&amp;' character
+    text = text.replace(/\&amp\;/g, "&");
+
+    let args = text.split("&");
+    for (let i = 0; i < args.length; ++i) {
+      try {
+        let index = args[i].indexOf("=");
+        if (index != -1) {
+          let paramName = args[i].substring(0, index);
+          let paramValue = args[i].substring(index + 1);
+
+          params.push({
+            name: decodeText(paramName),
+            value: decodeText(paramValue)
+          });
+        } else {
+          let paramName = args[i];
+          params.push({
+            name: decodeText(paramName),
+            value: ""
+          });
+        }
+      } catch (e) {
+        throw Error("Failed to parse URL encoded text");
+      }
+    }
+
+    params.sort((a, b) => {
+      return a.name <= b.name ? -1 : 1;
+    });
+
+    return params;
+  };
+
+  function decodeText(text) {
+    try {
+      return decodeURIComponent(text);
+    } catch (e) {
+      return decodeURIComponent(unescape(text));
+    }
+  }
+
+  // Exports from this module
+  exports.Url = Url;
+});
diff --git a/devtools/client/themes/webconsole.css b/devtools/client/themes/webconsole.css
--- a/devtools/client/themes/webconsole.css
+++ b/devtools/client/themes/webconsole.css
@@ -210,25 +210,26 @@ a {
 .theme-selected .console-string,
 .theme-selected .cm-number,
 .theme-selected .cm-variable,
 .theme-selected .kind-ArrayLike {
   color: #f5f7fa !important; /* Selection Text Color */
 }
 
 .message[category=network] > .indent {
-  -moz-border-end: solid #000 6px;
+  -moz-border-end: solid var(--theme-body-color-alt) 6px;
 }
 
 .message[category=network][severity=error] > .icon::before {
   background-position: -12px 0;
 }
 
 .message[category=network] > .message-body {
   display: flex;
+  flex-wrap: wrap;
 }
 
 .message[category=network] .method {
   flex: none;
 }
 
 .message[category=network]:not(.navigation-marker) .url {
   flex: 1 1 auto;
@@ -256,16 +257,17 @@ a {
 
 .message[category=network] .xhr {
   background-color: var(--theme-body-color-alt);
   color: var(--theme-body-background);
   border-radius: 3px;
   font-weight: bold;
   font-size: 10px;
   padding: 2px;
+  margin: 0 2px 0 3px;
   line-height: 10px;
   -moz-margin-end: 1ex;
 }
 
 /* CSS styles */
 .webconsole-filter-button[category="css"] > .toolbarbutton-menubutton-button:before {
   background-image: linear-gradient(#2DC3F3, #00B6F0);
   border-color: #1BA2CC;
diff --git a/devtools/client/webconsole/moz.build b/devtools/client/webconsole/moz.build
--- a/devtools/client/webconsole/moz.build
+++ b/devtools/client/webconsole/moz.build
@@ -1,16 +1,20 @@
 # -*- Mode: python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*-
 # vim: set filetype=python:
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 BROWSER_CHROME_MANIFESTS += ['test/browser.ini']
 
+DIRS += [
+    'net'
+]
+
 DevToolsModules(
     'console-commands.js',
     'console-output.js',
     'hudservice.js',
     'jsterm.js',
     'panel.js',
     'webconsole.js',
 )
diff --git a/devtools/client/webconsole/net/.eslintrc b/devtools/client/webconsole/net/.eslintrc
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/net/.eslintrc
@@ -0,0 +1,18 @@
+{
+  "globals": {
+    "Locale": true,
+    "Document": true,
+    "document": true,
+    "Node": true,
+    "Element": true,
+    "MessageEvent": true,
+    "BrowserLoader": true,
+    "addEventListener": true,
+    "DOMParser": true,
+    "dispatchEvent": true,
+    "setTimeout": true
+  },
+  "rules": {
+    "no-unused-vars": [2, {"args": "none"}],
+  }
+}
diff --git a/devtools/client/webconsole/net/components/cookies-tab.js b/devtools/client/webconsole/net/components/cookies-tab.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/net/components/cookies-tab.js
@@ -0,0 +1,69 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const React = require("devtools/client/shared/vendor/react");
+const NetInfoGroupList = React.createFactory(require("./net-info-group-list"));
+const Spinner = React.createFactory(require("./spinner"));
+
+// Shortcuts
+const DOM = React.DOM;
+const PropTypes = React.PropTypes;
+
+/**
+ * This template represents 'Cookies' tab displayed when the user
+ * expands network log in the Console panel. It's responsible for rendering
+ * sent and received cookies.
+ */
+var CookiesTab = React.createClass({
+  propTypes: {
+    actions: PropTypes.shape({
+      requestData: PropTypes.func.isRequired
+    }),
+    data: PropTypes.object.isRequired,
+  },
+
+  displayName: "CookiesTab",
+
+  render() {
+    let actions = this.props.actions;
+    let file = this.props.data;
+
+    let cookies = file.request.cookies;
+    if (!cookies || !cookies.length) {
+      // TODO: use async action objects as soon as Redux is in place
+      actions.requestData("requestCookies");
+
+      return (
+        Spinner()
+      );
+    }
+
+    // The cookie panel displays two groups of cookies:
+    // 1) Response Cookies
+    // 2) Request Cookies
+    let groups = [{
+      key: "responseCookies",
+      name: Locale.$STR("responseCookies"),
+      params: file.response.cookies
+    }, {
+      key: "requestCookies",
+      name: Locale.$STR("requestCookies"),
+      params: file.request.cookies
+    }];
+
+    return (
+      DOM.div({className: "cookiesTabBox"},
+        DOM.div({className: "panelContent"},
+          NetInfoGroupList({
+            groups: groups
+          })
+        )
+      )
+    );
+  }
+});
+
+// Exports from this module
+module.exports = CookiesTab;
diff --git a/devtools/client/webconsole/net/components/headers-tab.js b/devtools/client/webconsole/net/components/headers-tab.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/net/components/headers-tab.js
@@ -0,0 +1,73 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const React = require("devtools/client/shared/vendor/react");
+const NetInfoGroupList = React.createFactory(require("./net-info-group-list"));
+const Spinner = React.createFactory(require("./spinner"));
+
+// Shortcuts
+const DOM = React.DOM;
+const PropTypes = React.PropTypes;
+
+/**
+ * This template represents 'Headers' tab displayed when the user
+ * expands network log in the Console panel. It's responsible for rendering
+ * request and response HTTP headers.
+ */
+var HeadersTab = React.createClass({
+  propTypes: {
+    actions: PropTypes.shape({
+      requestData: PropTypes.func.isRequired
+    }),
+    data: PropTypes.object.isRequired,
+  },
+
+  displayName: "HeadersTab",
+
+  render() {
+    let {data, actions} = this.props;
+    let responseHeaders = data.response.headers;
+    let requestHeaders = data.request.headers;
+
+    // Request headers if they are not available yet.
+    // TODO: use async action objects as soon as Redux is in place
+    if (!requestHeaders) {
+      actions.requestData("requestHeaders");
+    }
+
+    if (!responseHeaders) {
+      actions.requestData("responseHeaders");
+    }
+
+    // TODO: Another groups to implement:
+    // 1) Cached Headers
+    // 2) Headers from upload stream
+    let groups = [{
+      key: "responseHeaders",
+      name: Locale.$STR("responseHeaders"),
+      params: responseHeaders
+    }, {
+      key: "requestHeaders",
+      name: Locale.$STR("requestHeaders"),
+      params: requestHeaders
+    }];
+
+    // If response headers are not available yet, display a spinner
+    if (!responseHeaders || !responseHeaders.length) {
+      groups[0].content = Spinner();
+    }
+
+    return (
+      DOM.div({className: "headersTabBox"},
+        DOM.div({className: "panelContent"},
+          NetInfoGroupList({groups: groups})
+        )
+      )
+    );
+  }
+});
+
+// Exports from this module
+module.exports = HeadersTab;
diff --git a/devtools/client/webconsole/net/components/moz.build b/devtools/client/webconsole/net/components/moz.build
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/net/components/moz.build
@@ -0,0 +1,25 @@
+# -*- Mode: python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*-
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+DevToolsModules(
+    'cookies-tab.js',
+    'headers-tab.js',
+    'net-info-body.css',
+    'net-info-body.js',
+    'net-info-group-list.js',
+    'net-info-group.css',
+    'net-info-group.js',
+    'net-info-params.css',
+    'net-info-params.js',
+    'params-tab.js',
+    'post-tab.js',
+    'response-tab.css',
+    'response-tab.js',
+    'size-limit.css',
+    'size-limit.js',
+    'spinner.css',
+    'spinner.js',
+)
diff --git a/devtools/client/webconsole/net/components/net-info-body.css b/devtools/client/webconsole/net/components/net-info-body.css
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/net/components/net-info-body.css
@@ -0,0 +1,141 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/******************************************************************************/
+/* Network Info Body */
+
+.netInfoBody {
+  font-family: var(--net-font-family);
+  font-size: var(--net-font-size);
+  margin: 10px 0 0 0;
+  width: 100%;
+  cursor: default;
+  display: block;
+}
+
+.netInfoBody *:focus {
+  outline: 0 !important;
+}
+
+.netInfoBody .panelContent {
+  word-break: break-all;
+}
+
+/******************************************************************************/
+/* Network Info Body Tabs */
+
+.netInfoBody > .tabs {
+  background-color: transparent;
+  background-image: none;
+  height: 100%;
+}
+
+.netInfoBody > .tabs .tabs-navigation {
+  font-family: var(--net-font-family);
+  font-size: var(--net-font-size);
+  border-bottom-color: var(--net-border);
+  background-color: transparent;
+  text-decoration: none;
+  padding-top: 3px;
+  padding-left: 7px;
+  padding-bottom: 1px;
+  border-bottom: 1px solid var(--net-border);
+}
+
+.netInfoBody > .tabs .tabs-menu {
+  display: table;
+  list-style: none;
+  padding: 0;
+  margin: 0;
+}
+
+/* This is the trick that makes the tab bottom border invisible */
+.netInfoBody > .tabs .tabs-menu-item {
+  position: relative;
+  bottom: -2px;
+  float: left;
+}
+
+.netInfoBody > .tabs .tabs-menu-item a {
+  display: block;
+  border: 1px solid transparent;
+  text-decoration: none;
+  padding: 5px 8px 4px 8px;;
+  font-weight: bold;
+  color: #565656;
+  border-radius: 4px 4px 0 0;
+}
+
+.netInfoBody > .tabs .tab-panel {
+  background-color: var(--theme-body-background);
+  border: 1px solid var(--net-border);
+  border-top: none;
+  padding: 10px;
+  overflow: auto;
+  height: calc(100% - 31px); /* minus the height of the tab bar */
+}
+
+.netInfoBody > .tabs .tab-panel > DIV,
+.netInfoBody > .tabs .tab-panel > DIV > DIV {
+  height: 100%;
+}
+
+.netInfoBody > .tabs .tabs-menu-item.is-active a,
+.netInfoBody > .tabs .tabs-menu-item.is-active a:focus {
+  background-color: var(--theme-body-background);
+  border: 1px solid var(--net-border);
+  border-color: var(--net-border);
+  border-bottom-color: transparent;
+}
+
+.netInfoBody > .tabs .tabs-menu-item:hover a {
+  border: 1px solid var(--net-border);
+  border-bottom: 1px solid transparent;
+  background-color: var(--theme-body-background);
+}
+
+.netInfoBody > .tabs .tabs-menu-item.is-active:hover a {
+  border: 1px solid var(--net-border);
+  border-bottom-color: transparent;
+}
+
+/******************************************************************************/
+/* Themes */
+
+.theme-dark .netInfoBody > .tabs .tabs-menu-item a {
+  color: var(--theme-body-color);
+}
+
+.theme-light .netInfoBody > .tabs .tab-panel,
+.theme-dark .netInfoBody > .tabs .tab-panel {
+  border-color: transparent;
+}
+
+.theme-dark .netInfoBody > .tabs .tabs-menu-item a,
+.theme-light .netInfoBody > .tabs .tabs-menu-item a {
+  border: 1px solid transparent;
+}
+
+.theme-light .netInfoBody > .tabs .tabs-menu-item.is-active a:focus {
+  border: 1px solid transparent;
+  border-bottom-color: var(--theme-highlight-bluegrey);
+}
+
+.theme-dark .netInfoBody > .tabs li.tabs-menu-item:hover a,
+.theme-light .netInfoBody > .tabs li.tabs-menu-item:hover a {
+  border-bottom-color: var(--net-border);
+}
+
+.theme-dark .netInfoBody > .tabs li.tabs-menu-item.is-active:hover a,
+.theme-light .netInfoBody > .tabs li.tabs-menu-item.is-active:hover a {
+  border-color: transparent;
+  border-bottom-color: var(--theme-highlight-bluegrey);
+}
+
+.theme-dark .netInfoBody > .tabs li.tabs-menu-item.is-active a,
+.theme-light .netInfoBody > .tabs li.tabs-menu-item.is-active a {
+  color: var(--theme-highlight-bluegrey);
+  border-bottom-color: var(--theme-highlight-bluegrey);
+}
+
diff --git a/devtools/client/webconsole/net/components/net-info-body.js b/devtools/client/webconsole/net/components/net-info-body.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/net/components/net-info-body.js
@@ -0,0 +1,157 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const React = require("devtools/client/shared/vendor/react");
+const { createFactories } = require("devtools/client/shared/components/reps/rep-utils");
+const { Tabs, TabPanel } = createFactories(require("devtools/client/jsonview/components/reps/tabs"));
+
+// Network
+const HeadersTab = React.createFactory(require("./headers-tab"));
+const ResponseTab = React.createFactory(require("./response-tab"));
+const ParamsTab = React.createFactory(require("./params-tab"));
+const CookiesTab = React.createFactory(require("./cookies-tab"));
+const PostTab = React.createFactory(require("./post-tab"));
+const NetUtils = require("../utils/net");
+
+// Shortcuts
+const PropTypes = React.PropTypes;
+
+/**
+ * This template renders the basic Network log info body. It's not
+ * visible by default, the user needs to expand the network log
+ * to see it.
+ *
+ * This is the set of tabs displaying details about network events:
+ * 1) Headers - request and response headers
+ * 2) Params - URL parameters
+ * 3) Response - response body
+ * 4) Cookies - request and response cookies
+ * 5) Post - posted data
+ */
+var NetInfoBody = React.createClass({
+  propTypes: {
+    tabActive: PropTypes.number.isRequired,
+    actions: PropTypes.object.isRequired,
+    data: PropTypes.shape({
+      request: PropTypes.object.isRequired,
+      response: PropTypes.object.isRequired
+    })
+  },
+
+  displayName: "NetInfoBody",
+
+  getDefaultProps() {
+    return {
+      tabActive: 1
+    };
+  },
+
+  getInitialState() {
+    return {
+      data: {
+        request: {},
+        response: {}
+      },
+      tabActive: this.props.tabActive,
+    };
+  },
+
+  onTabChanged(index) {
+    this.setState({tabActive: index});
+  },
+
+  hasCookies() {
+    let {request, response} = this.state.data;
+    return NetUtils.getHeaderValue(request.headers, "Cookie") ||
+      NetUtils.getHeaderValue(response.headers, "Cookie");
+  },
+
+  getTabPanels() {
+    let actions = this.props.actions;
+    let data = this.state.data;
+    let {request} = data;
+
+    // Flags for optional tabs. Some tabs are visible only if there
+    // are data to display.
+    let hasParams = request.queryString && request.queryString.length;
+    let hasPostData = request.bodySize > 0;
+
+    let panels = [];
+
+    // Headers tab
+    panels.push(
+      TabPanel({
+        className: "headers",
+        key: "headers",
+        title: Locale.$STR("netRequest.headers")},
+        HeadersTab({data: data, actions: actions})
+      )
+    );
+
+    // URL parameters tab
+    if (hasParams) {
+      panels.push(
+        TabPanel({
+          className: "params",
+          key: "params",
+          title: Locale.$STR("netRequest.params")},
+          ParamsTab({data: data, actions: actions})
+        )
+      );
+    }
+
+    // Posted data tab
+    if (hasPostData) {
+      panels.push(
+        TabPanel({
+          className: "post",
+          key: "post",
+          title: Locale.$STR("netRequest.post")},
+          PostTab({data: data, actions: actions})
+        )
+      );
+    }
+
+    // Response tab
+    panels.push(
+      TabPanel({className: "response", key: "response",
+        title: Locale.$STR("netRequest.response")},
+        ResponseTab({data: data, actions: actions})
+      )
+    );
+
+    // Cookies tab
+    if (this.hasCookies()) {
+      panels.push(
+        TabPanel({
+          className: "cookies",
+          key: "cookies",
+          title: Locale.$STR("netRequest.cookies")},
+          CookiesTab({
+            data: data,
+            actions: actions
+          })
+        )
+      );
+    }
+
+    return panels;
+  },
+
+  render() {
+    let tabActive = this.state.tabActive;
+    let tabPanels = this.getTabPanels();
+    return (
+      Tabs({
+        tabActive: tabActive,
+        onAfterChange: this.onTabChanged.bind(this)},
+        tabPanels
+      )
+    );
+  }
+});
+
+// Exports from this module
+module.exports = NetInfoBody;
diff --git a/devtools/client/webconsole/net/components/net-info-group-list.js b/devtools/client/webconsole/net/components/net-info-group-list.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/net/components/net-info-group-list.js
@@ -0,0 +1,47 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const React = require("devtools/client/shared/vendor/react");
+const NetInfoGroup = React.createFactory(require("./net-info-group"));
+
+// Shortcuts
+const DOM = React.DOM;
+const PropTypes = React.PropTypes;
+
+/**
+ * This template is responsible for rendering sections/groups inside tabs.
+ * It's used e.g to display Response and Request headers as separate groups.
+ */
+var NetInfoGroupList = React.createClass({
+  propTypes: {
+    groups: PropTypes.array.isRequired,
+  },
+
+  displayName: "NetInfoGroupList",
+
+  render() {
+    let groups = this.props.groups;
+
+    // Filter out empty groups.
+    groups = groups.filter(group => {
+      return group && ((group.params && group.params.length) || group.content);
+    });
+
+    // Render groups
+    groups = groups.map(group => {
+      group.type = group.key;
+      return NetInfoGroup(group);
+    });
+
+    return (
+      DOM.div({className: "netInfoGroupList"},
+        groups
+      )
+    );
+  }
+});
+
+// Exports from this module
+module.exports = NetInfoGroupList;
diff --git a/devtools/client/webconsole/net/components/net-info-group.css b/devtools/client/webconsole/net/components/net-info-group.css
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/net/components/net-info-group.css
@@ -0,0 +1,85 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/******************************************************************************/
+/* Net Info Group */
+
+.netInfoBody .netInfoGroup {
+  line-height: 13px;
+  color: #565656;
+  padding-bottom: 6px;
+}
+
+/* Last group doesn't need bottom padding */
+.netInfoBody .netInfoGroup:last-child {
+  padding-bottom: 0;
+}
+
+.netInfoBody .netInfoGroup:last-child .netInfoGroupContent {
+  padding-bottom: 0;
+}
+
+.netInfoBody .netInfoGroupTitle {
+  cursor: pointer;
+  font-weight: bold;
+  -moz-user-select: none;
+  cursor: pointer;
+  padding-left: 3px;
+}
+
+.netInfoBody .netInfoGroupTwisty {
+  background-image: url("chrome://devtools/skin/images/firebug/twisty-closed-firebug.svg");
+  background-position: 0 2px;
+  background-size: 11px 11px;
+  background-repeat: no-repeat;
+  width: 15px;
+  cursor: pointer;
+  display: inline-block;
+  vertical-align: middle;
+}
+
+.netInfoBody .netInfoGroup.opened .netInfoGroupTwisty {
+  background-image: url("chrome://devtools/skin/images/firebug/twisty-open-firebug.svg");
+  cursor: pointer;
+}
+
+/* Group content is expandable/collapsible by clicking on the title*/
+.netInfoBody .netInfoGroupContent {
+  padding-top: 7px;
+  margin-top: 3px;
+  padding-bottom: 14px;
+  border-top: 1px solid var(--net-border);
+  display: none;
+}
+
+/* Toggle group visibility */
+.netInfoBody .netInfoGroup.opened .netInfoGroupContent {
+  display: block;
+}
+
+/******************************************************************************/
+/* Themes */
+
+.theme-dark .netInfoBody .netInfoGroup {
+  color: var(--theme-body-color);
+}
+
+/* Twisties */
+.theme-dark .netInfoBody .netInfoGroup .netInfoGroupTwisty,
+.theme-light .netInfoBody .netInfoGroup .netInfoGroupTwisty {
+  background-image: url("chrome://devtools/skin/images/controls.png");
+  background-size: 56px 28px;
+  background-position: 0 -14px;
+  width: 14px;
+  height: 14px;
+}
+
+.theme-dark .netInfoBody .netInfoGroup.opened .netInfoGroupTwisty,
+.theme-light .netInfoBody .netInfoGroup.opened .netInfoGroupTwisty {
+  background-position: -14px -14px;
+}
+
+.theme-dark .netInfoBody .netInfoGroup .netInfoGroupTwisty {
+  filter: invert(1);
+}
diff --git a/devtools/client/webconsole/net/components/net-info-group.js b/devtools/client/webconsole/net/components/net-info-group.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/net/components/net-info-group.js
@@ -0,0 +1,80 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const React = require("devtools/client/shared/vendor/react");
+const NetInfoParams = React.createFactory(require("./net-info-params"));
+
+// Shortcuts
+const DOM = React.DOM;
+const PropTypes = React.PropTypes;
+
+/**
+ * This template represents a group of data within a tab. For example,
+ * Headers tab has two groups 'Request Headers' and 'Response Headers'
+ * The Response tab can also have two groups 'Raw Data' and 'JSON'
+ */
+var NetInfoGroup = React.createClass({
+  propTypes: {
+    type: PropTypes.string.isRequired,
+    name: PropTypes.string.isRequired,
+    params: PropTypes.array,
+    content: PropTypes.element,
+    open: PropTypes.bool
+  },
+
+  displayName: "NetInfoGroup",
+
+  getDefaultProps() {
+    return {
+      open: true,
+    };
+  },
+
+  getInitialState() {
+    return {
+      open: this.props.open,
+    };
+  },
+
+  onToggle(event) {
+    this.setState({
+      open: !this.state.open
+    });
+  },
+
+  render() {
+    let content = this.props.content;
+
+    if (!content && this.props.params) {
+      content = NetInfoParams({
+        params: this.props.params
+      });
+    }
+
+    let open = this.state.open;
+    let className = open ? "opened" : "";
+
+    return (
+      DOM.div({className: "netInfoGroup" + " " + className + " " +
+        this.props.type},
+        DOM.span({
+          className: "netInfoGroupTwisty",
+          onClick: this.onToggle.bind(this)
+        }),
+        DOM.span({
+          className: "netInfoGroupTitle",
+          onClick: this.onToggle.bind(this)},
+          this.props.name
+        ),
+        DOM.div({className: "netInfoGroupContent"},
+          content
+        )
+      )
+    );
+  }
+});
+
+// Exports from this module
+module.exports = NetInfoGroup;
diff --git a/devtools/client/webconsole/net/components/net-info-params.css b/devtools/client/webconsole/net/components/net-info-params.css
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/net/components/net-info-params.css
@@ -0,0 +1,19 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/******************************************************************************/
+/* Net Info Params */
+
+.netInfoBody .netInfoParamName {
+  padding: 0 10px 0 0;
+  font-weight: bold;
+  vertical-align: top;
+  text-align: right;
+  white-space: nowrap;
+}
+
+.netInfoBody .netInfoParamValue {
+  width: 100%;
+  word-wrap: break-word;
+}
diff --git a/devtools/client/webconsole/net/components/net-info-params.js b/devtools/client/webconsole/net/components/net-info-params.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/net/components/net-info-params.js
@@ -0,0 +1,58 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const React = require("devtools/client/shared/vendor/react");
+
+// Shortcuts
+const DOM = React.DOM;
+const PropTypes = React.PropTypes;
+
+/**
+ * This template renders list of parameters within a group.
+ * It's essentially a list of name + value pairs.
+ */
+var NetInfoParams = React.createClass({
+  propTypes: {
+    params: PropTypes.arrayOf(PropTypes.shape({
+      name: PropTypes.string.isRequired,
+      value: PropTypes.string.isRequired
+    })).isRequired,
+  },
+
+  displayName: "NetInfoParams",
+
+  render() {
+    let params = this.props.params || [];
+
+    params.sort(function(a, b) {
+      return a.name > b.name ? 1 : -1;
+    });
+
+    let rows = [];
+    params.forEach(param => {
+      rows.push(
+        DOM.tr({key: param.name},
+          DOM.td({className: "netInfoParamName"},
+            DOM.span({title: param.name}, param.name)
+          ),
+          DOM.td({className: "netInfoParamValue"},
+            DOM.code({}, param.value)
+          )
+        )
+      );
+    });
+
+    return (
+      DOM.table({cellPadding: 0, cellSpacing: 0},
+        DOM.tbody({},
+          rows
+        )
+      )
+    );
+  }
+});
+
+// Exports from this module
+module.exports = NetInfoParams;
diff --git a/devtools/client/webconsole/net/components/params-tab.js b/devtools/client/webconsole/net/components/params-tab.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/net/components/params-tab.js
@@ -0,0 +1,41 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const React = require("devtools/client/shared/vendor/react");
+const NetInfoParams = React.createFactory(require("./net-info-params"));
+
+// Shortcuts
+const DOM = React.DOM;
+const PropTypes = React.PropTypes;
+
+/**
+ * This template represents 'Params' tab displayed when the user
+ * expands network log in the Console panel. It's responsible for
+ * displaying URL parameters (query string).
+ */
+var ParamsTab = React.createClass({
+  propTypes: {
+    data: PropTypes.shape({
+      request: PropTypes.object.isRequired
+    })
+  },
+
+  displayName: "ParamsTab",
+
+  render() {
+    let data = this.props.data;
+
+    return (
+      DOM.div({className: "paramsTabBox"},
+        DOM.div({className: "panelContent"},
+          NetInfoParams({params: data.request.queryString})
+        )
+      )
+    );
+  }
+});
+
+// Exports from this module
+module.exports = ParamsTab;
diff --git a/devtools/client/webconsole/net/components/post-tab.js b/devtools/client/webconsole/net/components/post-tab.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/net/components/post-tab.js
@@ -0,0 +1,263 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const React = require("devtools/client/shared/vendor/react");
+
+// Reps
+const { createFactories } = require("devtools/client/shared/components/reps/rep-utils");
+const { Url } = require("devtools/client/shared/components/reps/url");
+const { TreeView } = createFactories(require("devtools/client/jsonview/components/reps/tree-view"));
+
+// Network
+const NetInfoParams = React.createFactory(require("./net-info-params"));
+const NetInfoGroupList = React.createFactory(require("./net-info-group-list"));
+const Spinner = React.createFactory(require("./spinner"));
+const SizeLimit = React.createFactory(require("./size-limit"));
+const NetUtils = require("../utils/net");
+const Json = require("../utils/json");
+
+// Shortcuts
+const DOM = React.DOM;
+const PropTypes = React.PropTypes;
+
+/**
+ * This template represents 'Post' tab displayed when the user
+ * expands network log in the Console panel. It's responsible for
+ * displaying posted data (HTTP post body).
+ */
+var PostTab = React.createClass({
+  propTypes: {
+    data: PropTypes.shape({
+      request: PropTypes.object.isRequired
+    }),
+    actions: PropTypes.object.isRequired
+  },
+
+  displayName: "PostTab",
+
+  isJson(file) {
+    let postData = file.request.postData;
+    let value = NetUtils.getHeaderValue(file.request.headers, "content-type");
+    return Json.isJSON(value, postData);
+  },
+
+  parseJson(file) {
+    let postData = file.request.postData;
+    if (!postData) {
+      return null;
+    }
+
+    let jsonString = new String(postData.text);
+    return Json.parseJSONString(jsonString, "http://" + file.request.url);
+  },
+
+  /**
+   * Render JSON post data as an expandable tree.
+   */
+  renderJson(file) {
+    let text = file.request.postData.text;
+    if (!text || isLongString(text)) {
+      return null;
+    }
+
+    if (!this.isJson(file)) {
+      return null;
+    }
+
+    let json = this.parseJson(file);
+    if (!json) {
+      return null;
+    }
+
+    return {
+      key: "json",
+      content: TreeView({data: json, mode: "tiny"}),
+      name: Locale.$STR("jsonScopeName")
+    };
+  },
+
+  parseXml(file) {
+    let text = file.request.postData.text;
+    if (isLongString(text)) {
+      return null;
+    }
+
+    return NetUtils.parseXml({
+      mimeType: NetUtils.getHeaderValue(file.request.headers, "content-type"),
+      text: text,
+    });
+  },
+
+  isXml(file) {
+    if (isLongString(file.request.postData.text)) {
+      return false;
+    }
+
+    let value = NetUtils.getHeaderValue(file.request.headers, "content-type");
+    return NetUtils.isHTML(value);
+  },
+
+  renderXml(file) {
+    let text = file.request.postData.text;
+    if (!text || isLongString(text)) {
+      return null;
+    }
+
+    if (!this.isXml(file)) {
+      return null;
+    }
+
+    let doc = this.parseXml(file);
+    if (!doc) {
+      return null;
+    }
+
+    // Proper component for rendering XML should be used (see bug 1247392)
+    return null;
+  },
+
+  /**
+   * Multipart post data are parsed and nicely rendered
+   * as an expandable tree of individual parts.
+   */
+  renderMultiPart(file) {
+    let text = file.request.postData.text;
+    if (!text || isLongString(text)) {
+      return;
+    }
+
+    if (NetUtils.isMultiPartRequest(file)) {
+      // TODO: render multi part request (bug: 1247423)
+    }
+
+    return;
+  },
+
+  /**
+   * URL encoded post data are nicely rendered as a list
+   * of parameters.
+   */
+  renderUrlEncoded(file) {
+    let text = file.request.postData.text;
+    if (!text || isLongString(text)) {
+      return null;
+    }
+
+    if (!NetUtils.isURLEncodedRequest(file)) {
+      return null;
+    }
+
+    let lines = text.split("\n");
+    let params = Url.parseURLEncodedText(lines[lines.length - 1]);
+
+    return {
+      key: "url-encoded",
+      content: NetInfoParams({params: params}),
+      name: Locale.$STR("netRequest.params")
+    };
+  },
+
+  renderRawData(file) {
+    let text = file.request.postData.text;
+
+    let group;
+
+    // The post body might reached the limit, so check if we are
+    // dealing with a long string.
+    if (typeof text == "object") {
+      group = {
+        key: "raw-longstring",
+        name: Locale.$STR("netRequest.rawData"),
+        content: DOM.div({className: "netInfoResponseContent"},
+          text.initial,
+          SizeLimit({
+            actions: this.props.actions,
+            data: file.request.postData,
+            message: Locale.$STR("netRequest.sizeLimitMessage"),
+            link: Locale.$STR("netRequest.sizeLimitMessageLink")
+          })
+        )
+      };
+    } else {
+      group = {
+        key: "raw",
+        name: Locale.$STR("netRequest.rawData"),
+        content: DOM.div({className: "netInfoResponseContent"},
+          safeString(text)
+        )
+      };
+    }
+
+    return group;
+  },
+
+  render() {
+    let actions = this.props.actions;
+    let file = this.props.data;
+
+    if (file.discardRequestBody) {
+      return DOM.span({className: "netInfoBodiesDiscarded"},
+        Locale.$STR("netRequest.requestBodyDiscarded")
+      );
+    }
+
+    let postData = file.request.postData;
+    if (!postData) {
+      // TODO: use async action objects as soon as Redux is in place
+      actions.requestData("requestPostData");
+      return (
+        Spinner()
+      );
+    }
+
+    // Render post body data. The right representation of the data
+    // is picked according to the content type.
+    let groups = [];
+    groups.push(this.renderUrlEncoded(file));
+    // TODO: render multi part request (bug: 1247423)
+    // groups.push(this.renderMultiPart(file));
+    groups.push(this.renderJson(file));
+    groups.push(this.renderXml(file));
+    groups.push(this.renderRawData(file));
+
+    // Filter out empty groups.
+    groups = groups.filter(group => group);
+
+    // The raw response is collapsed by default if a nice formatted
+    // version is available.
+    if (groups.length > 1) {
+      groups[groups.length - 1].open = false;
+    }
+
+    return (
+      DOM.div({className: "postTabBox"},
+        DOM.div({className: "panelContent"},
+          NetInfoGroupList({
+            groups: groups
+          })
+        )
+      )
+    );
+  }
+});
+
+// Helpers
+
+/**
+ * Make sure the string doesn't contains any dangerous characters
+ * (e.g. multipart post body can contain uploaded files)
+ */
+function safeString(text) {
+  text = JSON.stringify(text);
+  text = text.replace(/\\r\\n/g, "\r\n").replace(/\\"/g, "\"");
+  return text.slice(1, text.length - 1);
+}
+
+function isLongString(text) {
+  return typeof text == "object";
+}
+
+// Exports from this module
+module.exports = PostTab;
diff --git a/devtools/client/webconsole/net/components/response-tab.css b/devtools/client/webconsole/net/components/response-tab.css
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/net/components/response-tab.css
@@ -0,0 +1,21 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/******************************************************************************/
+/* Response Tab */
+
+.netInfoBody .netInfoBodiesDiscarded {
+  font-style: italic;
+  color: gray;
+}
+
+.netInfoBody .netInfoResponseContent {
+  font-family: monospace;
+  word-wrap: break-word;
+}
+
+.netInfoBody .responseTabBox img {
+  max-width: 300px;
+  max-height: 300px;
+}
diff --git a/devtools/client/webconsole/net/components/response-tab.js b/devtools/client/webconsole/net/components/response-tab.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/net/components/response-tab.js
@@ -0,0 +1,263 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const React = require("devtools/client/shared/vendor/react");
+
+// Reps
+const { createFactories } = require("devtools/client/shared/components/reps/rep-utils");
+const { TreeView } = createFactories(require("devtools/client/jsonview/components/reps/tree-view"));
+
+// Network
+const SizeLimit = React.createFactory(require("./size-limit"));
+const NetInfoGroupList = React.createFactory(require("./net-info-group-list"));
+const Spinner = React.createFactory(require("./spinner"));
+const Json = require("../utils/json");
+const NetUtils = require("../utils/net");
+
+// Shortcuts
+const DOM = React.DOM;
+const PropTypes = React.PropTypes;
+
+/**
+ * This template represents 'Response' tab displayed when the user
+ * expands network log in the Console panel. It's responsible for
+ * rendering HTTP response body.
+ *
+ * In case of supported response mime-type (e.g. application/json,
+ * text/xml, etc.), the response is parsed using appropriate parser
+ * and rendered accordingly.
+ */
+var ResponseTab = React.createClass({
+  propTypes: {
+    data: PropTypes.shape({
+      request: PropTypes.object.isRequired,
+      response: PropTypes.object.isRequired
+    }),
+    actions: PropTypes.object.isRequired
+  },
+
+  displayName: "ResponseTab",
+
+  // Response Types
+
+  isJson(content) {
+    if (isLongString(content.text)) {
+      return false;
+    }
+
+    return Json.isJSON(content.mimeType, content.text);
+  },
+
+  parseJson(file) {
+    let content = file.response.content;
+    if (isLongString(content.text)) {
+      return null;
+    }
+
+    let jsonString = new String(content.text);
+    return Json.parseJSONString(jsonString, "http://" + file.request.url);
+  },
+
+  isImage(content) {
+    if (isLongString(content.text)) {
+      return false;
+    }
+
+    return NetUtils.isImage(content.mimeType);
+  },
+
+  isXml(content) {
+    if (isLongString(content.text)) {
+      return false;
+    }
+
+    return NetUtils.isHTML(content.mimeType);
+  },
+
+  parseXml(file) {
+    let content = file.response.content;
+    if (isLongString(content.text)) {
+      return null;
+    }
+
+    return NetUtils.parseXml(content);
+  },
+
+  // Rendering
+
+  renderJson(file) {
+    let content = file.response.content;
+    if (!this.isJson(content)) {
+      return null;
+    }
+
+    let json = this.parseJson(file);
+    if (!json) {
+      return null;
+    }
+
+    return {
+      key: "json",
+      content: TreeView({data: json, mode: "tiny"}),
+      name: Locale.$STR("jsonScopeName")
+    };
+  },
+
+  renderImage(file) {
+    let content = file.response.content;
+    if (!this.isImage(content)) {
+      return null;
+    }
+
+    let dataUri = "data:" + content.mimeType + ";base64," + content.text;
+    return {
+      key: "image",
+      content: DOM.img({src: dataUri}),
+      name: Locale.$STR("netRequest.image")
+    };
+  },
+
+  renderXml(file) {
+    let content = file.response.content;
+    if (!this.isXml(content)) {
+      return null;
+    }
+
+    let doc = this.parseXml(file);
+    if (!doc) {
+      return null;
+    }
+
+    // Proper component for rendering XML should be used (see bug 1247392)
+    return null;
+  },
+
+  /**
+   * If full response text is available, let's try to parse and
+   * present nicely according to the underlying format.
+   */
+  renderFormattedResponse(file) {
+    let content = file.response.content;
+    if (typeof content.text == "object") {
+      return null;
+    }
+
+    let group = this.renderJson(file);
+    if (group) {
+      return group;
+    }
+
+    group = this.renderImage(file);
+    if (group) {
+      return group;
+    }
+
+    group = this.renderXml(file);
+    if (group) {
+      return group;
+    }
+  },
+
+  renderRawResponse(file) {
+    let group;
+    let content = file.response.content;
+
+    // The response might reached the limit, so check if we are
+    // dealing with a long string.
+    if (typeof content.text == "object") {
+      group = {
+        key: "raw-longstring",
+        name: Locale.$STR("netRequest.rawData"),
+        content: DOM.div({className: "netInfoResponseContent"},
+          content.text.initial,
+          SizeLimit({
+            actions: this.props.actions,
+            data: content,
+            message: Locale.$STR("netRequest.sizeLimitMessage"),
+            link: Locale.$STR("netRequest.sizeLimitMessageLink")
+          })
+        )
+      };
+    } else {
+      group = {
+        key: "raw",
+        name: Locale.$STR("netRequest.rawData"),
+        content: DOM.div({className: "netInfoResponseContent"},
+          content.text
+        )
+      };
+    }
+
+    return group;
+  },
+
+  /**
+   * The response panel displays two groups:
+   *
+   * 1) Formatted response (in case of supported format, e.g. JSON, XML, etc.)
+   * 2) Raw response data (always displayed if not discarded)
+   */
+  render() {
+    let actions = this.props.actions;
+    let file = this.props.data;
+
+    // If response bodies are discarded (not collected) let's just
+    // display a info message indicating what to do to collect even
+    // response bodies.
+    if (file.discardResponseBody) {
+      return DOM.span({className: "netInfoBodiesDiscarded"},
+        Locale.$STR("netRequest.responseBodyDiscarded")
+      );
+    }
+
+    // Request for the response content is done only if the response
+    // is not fetched yet - i.e. the `content.text` is undefined.
+    // Empty content.text` can also be a valid response either
+    // empty or not available yet.
+    let content = file.response.content;
+    if (!content || typeof (content.text) == "undefined") {
+      // TODO: use async action objects as soon as Redux is in place
+      actions.requestData("responseContent");
+
+      return (
+        Spinner()
+      );
+    }
+
+    // Render response body data. The right representation of the data
+    // is picked according to the content type.
+    let groups = [];
+    groups.push(this.renderFormattedResponse(file));
+    groups.push(this.renderRawResponse(file));
+
+    // Filter out empty groups.
+    groups = groups.filter(group => group);
+
+    // The raw response is collapsed by default if a nice formatted
+    // version is available.
+    if (groups.length > 1) {
+      groups[1].open = false;
+    }
+
+    return (
+      DOM.div({className: "responseTabBox"},
+        DOM.div({className: "panelContent"},
+          NetInfoGroupList({
+            groups: groups
+          })
+        )
+      )
+    );
+  }
+});
+
+// Helpers
+
+function isLongString(text) {
+  return typeof text == "object";
+}
+
+// Exports from this module
+module.exports = ResponseTab;
diff --git a/devtools/client/webconsole/net/components/size-limit.css b/devtools/client/webconsole/net/components/size-limit.css
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/net/components/size-limit.css
@@ -0,0 +1,17 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/******************************************************************************/
+/* Response Size Limit */
+
+.netInfoBody .netInfoSizeLimit {
+  font-family: var(--net-font-family);
+  font-size: var(--net-font-size);
+  font-weight: bold;
+  padding-top: 10px;
+}
+
+.netInfoBody .netInfoSizeLimit .objectLink {
+  color: var(--theme-highlight-blue);
+}
diff --git a/devtools/client/webconsole/net/components/size-limit.js b/devtools/client/webconsole/net/components/size-limit.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/net/components/size-limit.js
@@ -0,0 +1,62 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const React = require("devtools/client/shared/vendor/react");
+
+// Shortcuts
+const DOM = React.DOM;
+const PropTypes = React.PropTypes;
+
+/**
+ * This template represents a size limit notification message
+ * used e.g. in the Response tab when response body exceeds
+ * size limit. The message contains a link allowing the user
+ * to fetch the rest of the data from the backend (debugger server).
+ */
+var SizeLimit = React.createClass({
+  propTypes: {
+    data: PropTypes.object.isRequired,
+    message: PropTypes.string.isRequired,
+    link: PropTypes.string.isRequired,
+    actions: PropTypes.shape({
+      resolveString: PropTypes.func.isRequired
+    }),
+  },
+
+  displayName: "SizeLimit",
+
+  // Event Handlers
+
+  onClickLimit(event) {
+    let actions = this.props.actions;
+    let content = this.props.data;
+
+    actions.resolveString(content, "text");
+  },
+
+  // Rendering
+
+  render() {
+    let message = this.props.message;
+    let link = this.props.link;
+    let reLink = /^(.*)\{\{link\}\}(.*$)/;
+    let m = message.match(reLink);
+
+    return (
+        DOM.div({className: "netInfoSizeLimit"},
+          DOM.span({}, m[1]),
+          DOM.a({
+            className: "objectLink",
+            onClick: this.onClickLimit.bind(this)},
+              link
+          ),
+          DOM.span({}, m[2])
+        )
+    );
+  }
+});
+
+// Exports from this module
+module.exports = SizeLimit;
diff --git a/devtools/client/webconsole/net/components/spinner.css b/devtools/client/webconsole/net/components/spinner.css
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/net/components/spinner.css
@@ -0,0 +1,20 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/******************************************************************************/
+/* Spinner */
+
+.netInfoBody .spinner {
+  background-image: url("../images/loading.png");
+  width: 16px;
+  height: 16px;
+}
+
+@media (min-resolution: 1.1dppx) {
+  .netInfoBody .spinner {
+    background-image: url("../images/loading@2x.png");
+    width: 32px;
+    height: 32px;
+  }
+}
diff --git a/devtools/client/webconsole/net/components/spinner.js b/devtools/client/webconsole/net/components/spinner.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/net/components/spinner.js
@@ -0,0 +1,26 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const React = require("devtools/client/shared/vendor/react");
+
+// Shortcuts
+const DOM = React.DOM;
+
+/**
+ * This template represents a throbber displayed when the UI
+ * is waiting for data coming from the backend (debugging server).
+ */
+var Spinner = React.createClass({
+  displayName: "Spinner",
+
+  render() {
+    return (
+      DOM.div({className: "spinner"})
+    );
+  }
+});
+
+// Exports from this module
+module.exports = Spinner;
diff --git a/devtools/client/webconsole/net/data-provider.js b/devtools/client/webconsole/net/data-provider.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/net/data-provider.js
@@ -0,0 +1,66 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const promise = require("promise");
+
+/**
+ * Map of pending requests. Used mainly by tests to wait
+ * till things are ready.
+ */
+var promises = new Map();
+
+/**
+ * This object is used to fetch network data from the backend.
+ * Communication with the chrome scope is based on message
+ * exchange.
+ */
+var DataProvider = {
+  hasPendingRequests: function() {
+    return promises.size > 0;
+  },
+
+  requestData: function(client, actor, method) {
+    let key = actor + ":" + method;
+    let p = promises.get(key);
+    if (p) {
+      return p;
+    }
+
+    let deferred = promise.defer();
+    let realMethodName = "get" + method.charAt(0).toUpperCase() +
+      method.slice(1);
+
+    if (!client[realMethodName]) {
+      return null;
+    }
+
+    client[realMethodName](actor, response => {
+      promises.delete(key);
+      deferred.resolve(response);
+    });
+
+    promises.set(key, deferred.promise);
+    return deferred.promise;
+  },
+
+  resolveString: function(client, stringGrip) {
+    let key = stringGrip.actor + ":getString";
+    let p = promises.get(key);
+    if (p) {
+      return p;
+    }
+
+    p = client.getString(stringGrip).then(result => {
+      promises.delete(key);
+      return result;
+    });
+
+    promises.set(key, p);
+    return p;
+  },
+};
+
+// Exports from this module
+module.exports = DataProvider;
diff --git a/devtools/client/webconsole/net/images/loading.png b/devtools/client/webconsole/net/images/loading.png
new file mode 100644
index e69de29bb2d1d6434b8b29ae775ad8c2e48c5391..b886c73eff9239196fbe3db01116c220f726469b
GIT binary patch
literal 12585
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

diff --git a/devtools/client/webconsole/net/images/loading@2x.png b/devtools/client/webconsole/net/images/loading@2x.png
new file mode 100644
index e69de29bb2d1d6434b8b29ae775ad8c2e48c5391..ac928c585372bd72707d895c37c9e11931b327bd
GIT binary patch
literal 40165
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
FzW@#|vGM=_

diff --git a/devtools/client/webconsole/net/images/moz.build b/devtools/client/webconsole/net/images/moz.build
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/net/images/moz.build
@@ -0,0 +1,10 @@
+# -*- Mode: python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*-
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+DevToolsModules(
+    'loading.png',
+    'loading@2x.png',
+)
diff --git a/devtools/client/webconsole/net/main.js b/devtools/client/webconsole/net/main.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/net/main.js
@@ -0,0 +1,101 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+var { utils: Cu } = Components;
+
+Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+Cu.import("resource://devtools/client/shared/browser-loader.js");
+
+// Initialize module loader and load all modules of the new inline
+// preview feature. The entire code-base doesn't need any extra
+// privileges and runs entirely in content scope.
+const rootUrl = "resource://devtools/client/webconsole/net/";
+const require = BrowserLoader({
+  baseURI: rootUrl,
+  window: this}).require;
+
+const NetRequest = require("./net-request");
+const { loadSheet } = require("sdk/stylesheet/utils");
+
+// Localization
+const { Services } = Cu.import("resource://gre/modules/Services.jsm", {});
+var networkStrings = Services.strings.createBundle(
+  "chrome://devtools/locale/netmonitor.properties");
+
+// Stylesheets
+var styleSheets = [
+  "jsonview/css/dom-tree",
+  "jsonview/css/toolbar",
+  "shared/components/reps/reps",
+  "webconsole/net/net-request",
+  "webconsole/net/components/spinner",
+  "webconsole/net/components/size-limit",
+  "webconsole/net/components/net-info-body",
+  "webconsole/net/components/net-info-group",
+  "webconsole/net/components/net-info-params",
+  "webconsole/net/components/response-tab"
+];
+
+// Load theme stylesheets into the Console frame. This should be
+// done automatically by UI Components as soon as we have consensus
+// on the right CSS strategy FIXME.
+// It would also be nice to include them using @import.
+styleSheets.forEach(name => {
+  loadSheet(this, "resource://devtools/client/" + name + ".css", "author");
+});
+
+// Localization API used by React components
+// accessing strings from *.properties file.
+// Example:
+//   let localizedString = Locale.$STR('string-key');
+//
+// Resources:
+// http://l20n.org/
+// https://github.com/yahoo/react-intl
+this.Locale = {
+  $STR: key => {
+    try {
+      return networkStrings.GetStringFromName(key);
+    } catch (err) {
+      Cu.reportError(key + ": " + err);
+    }
+  }
+};
+
+// List of NetRequest instances represents the state.
+// As soon as Redux is in place it should be maintained using a reducer.
+var netRequests = new Map();
+
+/**
+ * This function handles network events received from the backend. It's
+ * executed from within the webconsole.js
+ */
+function onNetworkEvent(log) {
+  // The 'from' field is set only in case of a 'networkEventUpdate' packet.
+  // The initial 'networkEvent' packet uses 'actor'.
+  // Check if NetRequest object is already created for this event actor and
+  // if there is none make sure to create one.
+  let response = log.response;
+  let netRequest = response.from ? netRequests.get(response.from) : null;
+  if (!netRequest && !log.update) {
+    netRequest = new NetRequest(log);
+    netRequests.set(response.actor, netRequest);
+  }
+
+  if (!netRequest) {
+    return;
+  }
+
+  if (log.update) {
+    netRequest.updateBody(response);
+  }
+
+  return;
+}
+
+// Make the 'onNetworkEvent' accessible from chrome (see webconsole.js)
+this.NetRequest = {
+  onNetworkEvent: onNetworkEvent
+};
diff --git a/devtools/client/webconsole/net/moz.build b/devtools/client/webconsole/net/moz.build
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/net/moz.build
@@ -0,0 +1,17 @@
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+DIRS += [
+    'components',
+    'images',
+    'utils'
+]
+
+DevToolsModules(
+    'data-provider.js',
+    'main.js',
+    'net-request.css',
+    'net-request.js',
+)
diff --git a/devtools/client/webconsole/net/net-request.css b/devtools/client/webconsole/net/net-request.css
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/net/net-request.css
@@ -0,0 +1,47 @@
+  /* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/******************************************************************************/
+/* General */
+
+:root {
+  --net-border: #d7d7d7;
+  --net-font-family: Lucida Grande, Tahoma, sans-serif;
+  --net-font-size: 11px;
+}
+
+/* Dark and Light theme use monospace font even for labels */
+:root.theme-light,
+:root.theme-dark {
+  --net-font-family: monospace;
+}
+
+:root.theme-dark {
+  --net-border: #5f7387;
+}
+
+/******************************************************************************/
+/* Network log */
+
+/* No background if a Net log is opened */
+.netRequest.message.opened:hover {
+  background: transparent !important;
+}
+
+/******************************************************************************/
+/* Themes */
+
+.theme-dark .netRequest .message-body,
+.theme-light .netRequest .message-body {
+  background-position: 0 2px;
+}
+
+.theme-dark .netRequest.opened:hover,
+.theme-dark .netRequest.opened {
+  background: transparent;
+}
+
+.theme-firebug .netRequest.message.opened:hover {
+  background-image: linear-gradient(rgba(214, 233, 246, 0.8), rgba(255, 255, 255, 1.6)) !important;
+}
diff --git a/devtools/client/webconsole/net/net-request.js b/devtools/client/webconsole/net/net-request.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/net/net-request.js
@@ -0,0 +1,317 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+// React
+const React = require("devtools/client/shared/vendor/react");
+const ReactDOM = require("devtools/client/shared/vendor/react-dom");
+
+// Reps
+const { Url } = require("devtools/client/shared/components/reps/url");
+
+// Network
+const { cancelEvent, isLeftClick } = require("./utils/events");
+const NetInfoBody = React.createFactory(require("./components/net-info-body"));
+const DataProvider = require("./data-provider");
+
+// Constants
+const XHTML_NS = "http://www.w3.org/1999/xhtml";
+
+/**
+ * This object represents a network log in the Console panel (and in the
+ * Network panel in the future).
+ * It's associated with an existing log and so, also with an existing
+ * element in the DOM.
+ *
+ * The object neither render no request for more data by default. It only
+ * reqisters a click listener to the associated log entry (a network event)
+ * and changes the class attribute of the log entry, so a twisty icon
+ * appears to indicates that there are more details displayed if the
+ * log entry is expanded.
+ *
+ * When the user expands the log, data are requested from the backend
+ * and rendered directly within the Console iframe.
+ */
+function NetRequest(log) {
+  this.initialize(log);
+}
+
+NetRequest.prototype = {
+  initialize: function(log) {
+    this.client = log.client;
+
+    // 'this.file' field is following HAR spec.
+    // http://www.softwareishard.com/blog/har-12-spec/
+    this.file = log.response;
+    this.parentNode = log.node;
+    this.file.request.queryString = Url.parseURLParams(this.file.request.url);
+
+    // Map of fetched responses (to avoid unnecessary RDP round trip).
+    this.cachedResponses = new Map();
+
+    let doc = this.parentNode.ownerDocument;
+    let twisty = doc.createElementNS(XHTML_NS, "a");
+    twisty.className = "theme-twisty";
+    twisty.href = "#";
+
+    let messageBody = this.parentNode.querySelector(".message-body-wrapper");
+    this.parentNode.insertBefore(twisty, messageBody);
+    this.parentNode.setAttribute("collapsible", true);
+
+    this.parentNode.classList.add("netRequest");
+
+    // Register a click listener.
+    this.addClickListener();
+  },
+
+  addClickListener: function() {
+    // Add an event listener to toggle the expanded state when clicked.
+    // The event bubbling is canceled if the user clicks on the log
+    // itself (not on the expanded body), so opening of the default
+    // modal dialog is avoided.
+    this.parentNode.addEventListener("click", (event) => {
+      if (!isLeftClick(event)) {
+        return;
+      }
+
+      // Clicking on the toggle button or the method expands/collapses
+      // the body with HTTP details.
+      let classList = event.originalTarget.classList;
+      if (!(classList.contains("theme-twisty") ||
+        classList.contains("method"))) {
+        return;
+      }
+
+      // Alright, the user is clicking fine, let's open HTTP details!
+      this.onToggleBody(event);
+
+      // Avoid the default modal dialog
+      cancelEvent(event);
+    }, true);
+  },
+
+  onToggleBody: function(event) {
+    let target = event.currentTarget;
+    let logRow = getAncestorByClass(target, "netRequest");
+    logRow.classList.toggle("opened");
+
+    let twisty = this.parentNode.querySelector(".theme-twisty");
+    if (logRow.classList.contains("opened")) {
+      twisty.setAttribute("open", true);
+    } else {
+      twisty.removeAttribute("open");
+    }
+
+    let isOpen = logRow.classList.contains("opened");
+    if (isOpen) {
+      this.renderBody();
+    } else {
+      this.closeBody();
+    }
+  },
+
+  /**
+   * Executed when 'networkEventUpdate' is received from the backend.
+   */
+  updateBody: function(response) {
+    // 'networkEventUpdate' event indicates that there are new data
+    // available on the backend. The following logic checks the response
+    // cache and if this data has been already requested before they
+    // need to be updated now (re-requested).
+    let method = response.updateType;
+    let cached = this.cachedResponses.get(method);
+    if (cached) {
+      this.cachedResponses.delete(method);
+      this.requestData(method);
+    }
+  },
+
+  /**
+   * Close network inline preview body.
+   */
+  closeBody: function() {
+    this.netInfoBodyBox.parentNode.removeChild(this.netInfoBodyBox);
+  },
+
+  /**
+   * Render network inline preview body.
+   */
+  renderBody: function() {
+    let messageBody = this.parentNode.querySelector(".message-body-wrapper");
+
+    // Create box for all markup rendered by ReactJS. Since we are
+    // rendering within webconsole.xul (i.e. XUL document) we need
+    // to explicitly specify XHTML namespace.
+    let doc = messageBody.ownerDocument;
+    this.netInfoBodyBox = doc.createElementNS(XHTML_NS, "div");
+    this.netInfoBodyBox.classList.add("netInfoBody");
+    messageBody.appendChild(this.netInfoBodyBox);
+
+    // As soon as Redux is in place state and actions will come from
+    // separate modules.
+    let body = NetInfoBody({
+      actions: this
+    });
+
+    // Render net info body!
+    this.body = ReactDOM.render(body, this.netInfoBodyBox);
+
+    this.refresh();
+  },
+
+  /**
+   * Render top level ReactJS component.
+   */
+  refresh: function() {
+    if (!this.netInfoBodyBox) {
+      return;
+    }
+
+    // TODO: As soon as Redux is in place there will be reducer
+    // computing a new state.
+    let newState = Object.assign({}, this.body.state, {
+      data: this.file
+    });
+
+    this.body.setState(newState);
+  },
+
+  // Communication with the backend
+
+  requestData: function(method) {
+    // If the response has already been received bail out.
+    let response = this.cachedResponses.get(method);
+    if (response) {
+      return;
+    }
+
+    // Set an attribute indicating that this net log is waiting for
+    // data coming from the backend. Intended mainly for tests.
+    this.parentNode.setAttribute("loading", "true");
+
+    let actor = this.file.actor;
+    DataProvider.requestData(this.client, actor, method).then(args => {
+      this.cachedResponses.set(method, args);
+      this.onRequestData(method, args);
+
+      if (!DataProvider.hasPendingRequests()) {
+        this.parentNode.removeAttribute("loading");
+
+        // Fire an event indicating that all pending requests for
+        // data from the backend has finished. Intended for tests.
+        // Do it asynchronously so, it's done after all handlers
+        // for the current promise are executed.
+        setTimeout(() => {
+          let event = document.createEvent("Event");
+          event.initEvent("netlog-no-pending-requests", true, true);
+          this.parentNode.dispatchEvent(event);
+        });
+      }
+    });
+  },
+
+  onRequestData: function(method, response) {
+    // TODO: This code will be part of a reducer.
+    let result;
+    switch (method) {
+      case "requestHeaders":
+        result = this.onRequestHeaders(response);
+        break;
+      case "responseHeaders":
+        result = this.onResponseHeaders(response);
+        break;
+      case "requestCookies":
+        result = this.onRequestCookies(response);
+        break;
+      case "responseCookies":
+        result = this.onResponseCookies(response);
+        break;
+      case "responseContent":
+        result = this.onResponseContent(response);
+        break;
+      case "requestPostData":
+        result = this.onRequestPostData(response);
+        break;
+    }
+
+    result.then(() => {
+      this.refresh();
+    });
+  },
+
+  onRequestHeaders: function(response) {
+    this.file.request.headers = response.headers;
+
+    return this.resolveHeaders(this.file.request.headers);
+  },
+
+  onResponseHeaders: function(response) {
+    this.file.response.headers = response.headers;
+
+    return this.resolveHeaders(this.file.response.headers);
+  },
+
+  onResponseContent: function(response) {
+    let content = response.content;
+
+    for (let p in content) {
+      this.file.response.content[p] = content[p];
+    }
+
+    return Promise.resolve();
+  },
+
+  onRequestPostData: function(response) {
+    this.file.request.postData = response.postData;
+    return Promise.resolve();
+  },
+
+  onRequestCookies: function(response) {
+    this.file.request.cookies = response.cookies;
+    return this.resolveHeaders(this.file.request.cookies);
+  },
+
+  onResponseCookies: function(response) {
+    this.file.response.cookies = response.cookies;
+    return this.resolveHeaders(this.file.response.cookies);
+  },
+
+  resolveHeaders: function(headers) {
+    let promises = [];
+
+    for (let header of headers) {
+      if (typeof header.value == "object") {
+        promises.push(this.resolveString(header.value).then(value => {
+          header.value = value;
+        }));
+      }
+    }
+
+    return Promise.all(promises);
+  },
+
+  resolveString: function(object, propName) {
+    let stringGrip = object[propName];
+    if (typeof stringGrip == "object") {
+      DataProvider.resolveString(this.client, stringGrip).then(args => {
+        object[propName] = args;
+        this.refresh();
+      });
+    }
+  }
+};
+
+// Helpers
+
+function getAncestorByClass(node, className) {
+  for (let parent = node; parent; parent = parent.parentNode) {
+    if (parent.classList && parent.classList.contains(className)) {
+      return parent;
+    }
+  }
+  return null;
+}
+
+// Exports from this module
+module.exports = NetRequest;
diff --git a/devtools/client/webconsole/net/utils/events.js b/devtools/client/webconsole/net/utils/events.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/net/utils/events.js
@@ -0,0 +1,21 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+function isLeftClick(event, allowKeyModifiers) {
+  return event.button === 0 && (allowKeyModifiers || noKeyModifiers(event));
+}
+
+function noKeyModifiers(event) {
+  return !event.ctrlKey && !event.shiftKey && !event.altKey && !event.metaKey;
+}
+
+function cancelEvent(event) {
+  event.stopPropagation();
+  event.preventDefault();
+}
+
+// Exports from this module
+exports.isLeftClick = isLeftClick;
+exports.cancelEvent = cancelEvent;
diff --git a/devtools/client/webconsole/net/utils/json.js b/devtools/client/webconsole/net/utils/json.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/net/utils/json.js
@@ -0,0 +1,234 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+// List of JSON content types.
+const contentTypes = {
+  "text/plain": 1,
+  "text/javascript": 1,
+  "text/x-javascript": 1,
+  "text/json": 1,
+  "text/x-json": 1,
+  "application/json": 1,
+  "application/x-json": 1,
+  "application/javascript": 1,
+  "application/x-javascript": 1,
+  "application/json-rpc": 1
+};
+
+// Implementation
+var Json = {};
+
+/**
+ * Parsing JSON
+ */
+Json.parseJSONString = function(jsonString) {
+  if (!jsonString.length) {
+    return null;
+  }
+
+  let regex, matches;
+
+  let first = firstNonWs(jsonString);
+  if (first !== "[" && first !== "{") {
+    // This (probably) isn't pure JSON. Let's try to strip various sorts
+    // of XSSI protection/wrapping and see if that works better.
+
+    // Prototype-style secure requests
+    regex = /^\s*\/\*-secure-([\s\S]*)\*\/\s*$/;
+    matches = regex.exec(jsonString);
+    if (matches) {
+      jsonString = matches[1];
+
+      if (jsonString[0] === "\\" && jsonString[1] === "n") {
+        jsonString = jsonString.substr(2);
+      }
+
+      if (jsonString[jsonString.length - 2] === "\\" &&
+        jsonString[jsonString.length - 1] === "n") {
+        jsonString = jsonString.substr(0, jsonString.length - 2);
+      }
+    }
+
+    // Google-style (?) delimiters
+    if (jsonString.indexOf("&&&START&&&") !== -1) {
+      regex = /&&&START&&&([\s\S]*)&&&END&&&/;
+      matches = regex.exec(jsonString);
+      if (matches) {
+        jsonString = matches[1];
+      }
+    }
+
+    // while(1);, for(;;);, and )]}'
+    regex = /^\s*(\)\]\}[^\n]*\n|while\s*\(1\);|for\s*\(;;\);)([\s\S]*)/;
+    matches = regex.exec(jsonString);
+    if (matches) {
+      jsonString = matches[2];
+    }
+
+    // JSONP
+    regex = /^\s*([A-Za-z0-9_$.]+\s*(?:\[.*\]|))\s*\(([\s\S]*)\)/;
+    matches = regex.exec(jsonString);
+    if (matches) {
+      jsonString = matches[2];
+    }
+  }
+
+  try {
+    return JSON.parse(jsonString);
+  } catch (err) {
+    console.error(err);
+  }
+
+  // Give up if we don't have valid start, to avoid some unnecessary overhead.
+  first = firstNonWs(jsonString);
+  if (first !== "[" && first !== "{" && isNaN(first) && first !== '"') {
+    return null;
+  }
+
+  // Remove JavaScript comments, quote non-quoted identifiers, and merge
+  // multi-line structures like |{"a": 1} \n {"b": 2}| into a single JSON
+  // object [{"a": 1}, {"b": 2}].
+  jsonString = pseudoJsonToJson(jsonString);
+
+  try {
+    return JSON.parse(jsonString);
+  } catch (err) {
+    console.error(err);
+  }
+
+  return null;
+};
+
+function firstNonWs(str) {
+  for (let i = 0, len = str.length; i < len; i++) {
+    let ch = str[i];
+    if (ch !== " " && ch !== "\n" && ch !== "\t" && ch !== "\r") {
+      return ch;
+    }
+  }
+  return "";
+}
+
+function pseudoJsonToJson(json) {
+  let ret = "";
+  let at = 0, lasti = 0, lastch = "", hasMultipleParts = false;
+  for (let i = 0, len = json.length; i < len; ++i) {
+    let ch = json[i];
+    if (/\s/.test(ch)) {
+      continue;
+    }
+
+    if (ch === '"') {
+      // Consume a string.
+      ++i;
+      while (i < len) {
+        if (json[i] === "\\") {
+          ++i;
+        } else if (json[i] === '"') {
+          break;
+        }
+        ++i;
+      }
+    } else if (ch === "'") {
+      // Convert an invalid string into a valid one.
+      ret += json.slice(at, i) + "\"";
+      at = i + 1;
+      ++i;
+
+      while (i < len) {
+        if (json[i] === "\\") {
+          ++i;
+        } else if (json[i] === "'") {
+          break;
+        }
+        ++i;
+      }
+
+      if (i < len) {
+        ret += json.slice(at, i) + "\"";
+        at = i + 1;
+      }
+    } else if ((ch === "[" || ch === "{") &&
+        (lastch === "]" || lastch === "}")) {
+      // Multiple JSON messages in one... Make it into a single array by
+      // inserting a comma and setting the "multiple parts" flag.
+      ret += json.slice(at, i) + ",";
+      hasMultipleParts = true;
+      at = i;
+    } else if (lastch === "," && (ch === "]" || ch === "}")) {
+      // Trailing commas in arrays/objects.
+      ret += json.slice(at, lasti);
+      at = i;
+    } else if (lastch === "/" && lasti === i - 1) {
+      // Some kind of comment; remove it.
+      if (ch === "/") {
+        ret += json.slice(at, i - 1);
+        at = i + json.slice(i).search(/\n|\r|$/);
+        i = at - 1;
+      } else if (ch === "*") {
+        ret += json.slice(at, i - 1);
+        at = json.indexOf("*/", i + 1) + 2;
+        if (at === 1) {
+          at = len;
+        }
+        i = at - 1;
+      }
+      ch = "\0";
+    } else if (/[a-zA-Z$_]/.test(ch) && lastch !== ":") {
+      // Non-quoted identifier. Quote it.
+      ret += json.slice(at, i) + "\"";
+      at = i;
+      i = i + json.slice(i).search(/[^a-zA-Z0-9$_]|$/);
+      ret += json.slice(at, i) + "\"";
+      at = i;
+    }
+
+    lastch = ch;
+    lasti = i;
+  }
+
+  ret += json.slice(at);
+  if (hasMultipleParts) {
+    ret = "[" + ret + "]";
+  }
+
+  return ret;
+}
+
+Json.isJSON = function(contentType, data) {
+  // Workaround for JSON responses without proper content type
+  // Let's consider all responses starting with "{" as JSON. In the worst
+  // case there will be an exception when parsing. This means that no-JSON
+  // responses (and post data) (with "{") can be parsed unnecessarily,
+  // which represents a little overhead, but this happens only if the request
+  // is actually expanded by the user in the UI (Net & Console panels).
+  // Do a manual string search instead of checking (data.strip()[0] === "{")
+  // to improve performance/memory usage.
+  let len = data ? data.length : 0;
+  for (let i = 0; i < len; i++) {
+    let ch = data.charAt(i);
+    if (ch === "{") {
+      return true;
+    }
+
+    if (ch === " " || ch === "\t" || ch === "\n" || ch === "\r") {
+      continue;
+    }
+
+    break;
+  }
+
+  if (!contentType) {
+    return false;
+  }
+
+  contentType = contentType.split(";")[0];
+  contentType = contentType.trim();
+  return contentTypes[contentType];
+};
+
+// Exports from this module
+module.exports = Json;
+
diff --git a/devtools/client/webconsole/net/utils/moz.build b/devtools/client/webconsole/net/utils/moz.build
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/net/utils/moz.build
@@ -0,0 +1,11 @@
+# -*- Mode: python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*-
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+DevToolsModules(
+    'events.js',
+    'json.js',
+    'net.js',
+)
diff --git a/devtools/client/webconsole/net/utils/net.js b/devtools/client/webconsole/net/utils/net.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/net/utils/net.js
@@ -0,0 +1,126 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const mimeCategoryMap = {
+  "text/plain": "txt",
+  "application/octet-stream": "bin",
+  "text/html": "html",
+  "text/xml": "html",
+  "application/xml": "html",
+  "application/rss+xml": "html",
+  "application/atom+xml": "html",
+  "application/xhtml+xml": "html",
+  "application/mathml+xml": "html",
+  "application/rdf+xml": "html",
+  "text/css": "css",
+  "application/x-javascript": "js",
+  "text/javascript": "js",
+  "application/javascript": "js",
+  "text/ecmascript": "js",
+  "application/ecmascript": "js",
+  "image/jpeg": "image",
+  "image/jpg": "image",
+  "image/gif": "image",
+  "image/png": "image",
+  "image/bmp": "image",
+  "application/x-shockwave-flash": "plugin",
+  "application/x-silverlight-app": "plugin",
+  "video/x-flv": "media",
+  "audio/mpeg3": "media",
+  "audio/x-mpeg-3": "media",
+  "video/mpeg": "media",
+  "video/x-mpeg": "media",
+  "video/webm": "media",
+  "video/mp4": "media",
+  "video/ogg": "media",
+  "audio/ogg": "media",
+  "application/ogg": "media",
+  "application/x-ogg": "media",
+  "application/x-midi": "media",
+  "audio/midi": "media",
+  "audio/x-mid": "media",
+  "audio/x-midi": "media",
+  "music/crescendo": "media",
+  "audio/wav": "media",
+  "audio/x-wav": "media",
+  "application/x-woff": "font",
+  "application/font-woff": "font",
+  "application/x-font-woff": "font",
+  "application/x-ttf": "font",
+  "application/x-font-ttf": "font",
+  "font/ttf": "font",
+  "font/woff": "font",
+  "application/x-otf": "font",
+  "application/x-font-otf": "font"
+};
+
+var NetUtils = {};
+
+NetUtils.isImage = function(contentType) {
+  contentType = contentType.split(";")[0];
+  contentType = contentType.trim();
+  return mimeCategoryMap[contentType] == "image";
+};
+
+NetUtils.isHTML = function(contentType) {
+  contentType = contentType.split(";")[0];
+  contentType = contentType.trim();
+  return mimeCategoryMap[contentType] == "html";
+};
+
+NetUtils.getHeaderValue = function(headers, name) {
+  if (!headers) {
+    return null;
+  }
+
+  name = name.toLowerCase();
+  for (let i = 0; i < headers.length; ++i) {
+    let headerName = headers[i].name.toLowerCase();
+    if (headerName == name) {
+      return headers[i].value;
+    }
+  }
+};
+
+NetUtils.parseXml = function(content) {
+  let contentType = content.mimeType.split(";")[0];
+  contentType = contentType.trim();
+
+  let parser = new DOMParser();
+  let doc = parser.parseFromString(content.text, contentType);
+  let root = doc.documentElement;
+
+  // Error handling
+  let nsURI = "http://www.mozilla.org/newlayout/xml/parsererror.xml";
+  if (root.namespaceURI == nsURI && root.nodeName == "parsererror") {
+    return null;
+  }
+
+  return doc;
+};
+
+NetUtils.isURLEncodedRequest = function(file) {
+  let mimeType = "application/x-www-form-urlencoded";
+
+  let postData = file.request.postData;
+  if (postData && postData.text) {
+    let text = postData.text.toLowerCase();
+    if (text.startsWith("content-type: " + mimeType)) {
+      return true;
+    }
+  }
+
+  let value = NetUtils.getHeaderValue(file.request.headers, "content-type");
+  return value && value.startsWith(mimeType);
+};
+
+NetUtils.isMultiPartRequest = function(file) {
+  let mimeType = "multipart/form-data";
+  let value = NetUtils.getHeaderValue(file.request.headers, "content-type");
+  return value && value.startsWith(mimeType);
+};
+
+// Exports from this module
+module.exports = NetUtils;
diff --git a/devtools/client/webconsole/webconsole.js b/devtools/client/webconsole/webconsole.js
--- a/devtools/client/webconsole/webconsole.js
+++ b/devtools/client/webconsole/webconsole.js
@@ -1592,16 +1592,25 @@ WebConsoleFrame.prototype = {
 
     this._addMessageLinkCallback(urlNode, onClick);
     this._addMessageLinkCallback(statusNode, onClick);
 
     networkInfo.node = messageNode;
 
     this._updateNetMessage(actorId);
 
+    if (this.window.NetRequest) {
+      this.window.NetRequest.onNetworkEvent({
+        client: this.webConsoleClient,
+        response: networkInfo,
+        node: messageNode,
+        update: false
+      });
+    }
+
     return messageNode;
   },
 
   /**
    * Create a mixed content warning Node.
    *
    * @param linkNode
    *        Parent to the requested urlNode.
@@ -1797,16 +1806,25 @@ WebConsoleFrame.prototype = {
    */
   handleNetworkEventUpdate: function(networkInfo, packet) {
     if (networkInfo.node && this._updateNetMessage(packet.from)) {
       this.emit("new-messages", new Set([{
         update: true,
         node: networkInfo.node,
         response: packet,
       }]));
+
+      if (this.window.NetRequest) {
+        this.window.NetRequest.onNetworkEvent({
+          client: this.webConsoleClient,
+          response: packet,
+          node: networkInfo.node,
+          update: true
+        });
+      }
     }
 
     // For unit tests we pass the HTTP activity object to the test callback,
     // once requests complete.
     if (this.owner.lastFinishedRequestCallback &&
         networkInfo.updates.indexOf("responseContent") > -1 &&
         networkInfo.updates.indexOf("eventTimings") > -1) {
       this.owner.lastFinishedRequestCallback(networkInfo, this);
diff --git a/devtools/client/webconsole/webconsole.xul b/devtools/client/webconsole/webconsole.xul
--- a/devtools/client/webconsole/webconsole.xul
+++ b/devtools/client/webconsole/webconsole.xul
@@ -20,16 +20,17 @@
         browserConsoleTitle="&browserConsole.title;"
         windowtype="devtools:webconsole"
         width="900" height="350"
         persist="screenX screenY width height sizemode">
 
   <script type="application/javascript;version=1.8"
           src="chrome://devtools/content/shared/theme-switching.js"/>
   <script type="text/javascript" src="chrome://global/content/globalOverlay.js"/>
+  <script type="text/javascript" src="resource://devtools/client/webconsole/net/main.js"/>
   <script type="text/javascript"><![CDATA[
 function goUpdateConsoleCommands() {
   goUpdateCommand("consoleCmd_openURL");
   goUpdateCommand("consoleCmd_copyURL");
 }
   // ]]></script>
 
   <commandset id="editMenuCommands"/>
diff --git a/devtools/docs/http-inspector.md b/devtools/docs/http-inspector.md
new file mode 100644
--- /dev/null
+++ b/devtools/docs/http-inspector.md
@@ -0,0 +1,167 @@
+# HTTP Inspector (aka XHR Spy)
+This document is intended as a description of HTTP Inspector feature allowing
+inline inspection of HTTP logs displayed in the Console panel. The documents
+focuses on internal architecture.
+
+For detailed feature description see the following doc
+(many screenshots included):
+https://docs.google.com/document/d/1zQniwU_dkt-VX1qY1Vp-SWxEVA4uFcDCrtH03tGoHHM/edit#
+
+_HTTP Inspector feature is available in the Console panel (for web developers)
+as well as in the Browser Console (for devtools and extension developers)._
+
+The current implementation is based on React (no XUL) and some of the existing
+components should also be used when porting the Network panel to HTML.
+
+The entire feature lives in `devtools/client/webconsole/net` directory.
+
+## General Description
+The entry point for HTTP log inspection is represented by an expand/toggle
+button displayed in front a log in the Console panel:
+
+[+] GET XHR http://example.com/test-request.php
+
+Clicking on the [+] button expands the log and shows a body with HTTP details
+right underneath. The info body is rendered by:
+`devtools/client/webconsole/net/components/net-info-body` component.
+
+HTTP info is divided into several tabs:
+
+* Headers: send and received HTTP headers
+* Params: URL parameters (query string)
+* Post: HTTP post body
+* Response: HTTP response body
+* Cookies: Sent and received cookies
+
+### Headers Tab
+`devtools/client/webconsole/net/components/headers-tab`
+
+This is the default active tab and it's responsible for rendering
+HTTP headers. There are several header groups displayed:
+
+* Response Headers
+* Requests Headers
+* Cached Headers (not implemented yet)
+
+Individual sections are expandable/collapsible.
+
+Rendering of the groups is done by `NetInfoGroup` and `NetInfoGroupList`
+components.
+
+### Params Tab
+`devtools/client/webconsole/net/components/params-tab`
+
+This tab is responsible for rendering URL parameters (query string)
+and it's available only if the URL has any parameters. Individual
+parameters are parsed and displayed as a list of name/value pairs.
+
+Rendering of the parameter list is done by `NetInfoParams` component.
+
+### Post Tab
+`devtools/client/webconsole/net/components/post-tab`
+
+This tab is responsible for rendering HTTP post body sent to the server.
+
+### Response Tab
+`devtools/client/webconsole/net/components/response-tab`
+
+This tab is responsible for rendering HTTP response body received from
+the server. There might be more than one section displaying the data
+depending on the current response mime-type.
+
+* Raw Data: This section is always displayed. It renders data in a raw
+form just like they are received from the server.
+* JSON: This section is available in case of JSON responses [1].
+It parses the response and displays it as an expandable tree.
+* Image: This section is available in case of image responses [2].
+The response is decoded and displayed as an image.
+* XML: this section is available in case of HTML/XML responses [3]
+The response is parsed using DOM parser and displayed as an XML markup.
+
+[1] List of JSON mime-types: `devtools/client/webconsole/net/utils/json`
+[2] List of Image mime-types: `devtools/client/webconsole/net/utils/json`
+[3] List of XML/HTML mime-types: `devtools/client/webconsole/net/utils/net`
+
+Response data are fetched using `LongStringClient`, so if data are bigger
+than defined limit (see `devtools/server/main.js - LONG_STRING_LENGTH)
+the user needs to manually require the rest (there is a link at the end
+of incomplete response body that allows this).
+
+The raw section is collapsed by default if there is another presentation
+of the data.
+
+### Cookies Tab
+`devtools/client/webconsole/net/components/cookies-tab`
+
+This tab is responsible for displaying HTTP cookies.
+There are two groups:
+
+* Request Cookies
+* Response Cookies
+
+Rendering of the groups is done by `NetInfoGroup` and `NetInfoGroupList`
+components. The tab is not presented if there are no cookies.
+
+## Architecture
+This sections describes internal architecture of HTTPi feature.
+
+### Main
+`devtools/client/webconsole/net/main`
+
+This is the main module of HTTPi. It represents the root module
+of the feature.
+
+The main responsibility of the module is handling network logs forwarded
+from webconsole.js. This modules creates one instance of `NetRequest`
+object for every `NetworkEvent` (one object for every HTTP request).
+
+### NetRequest
+`devtools/client/webconsole/net/net-request`
+
+This module represents `NetRequest` object. It's the internal representation
+of HTTP request and it keeps its state. All HTTP details fetched dynamically
+from the backend are stored in this object.
+
+This object is responsible for:
+* Adding a toggle button in Console UI (displayed in front of HTTP requests)
+* Listening for a click event on the toggle button.
+* Sending messages to web console client object to request HTTP details.
+* Refreshing the UI as HTTP details are coming from the overlay.
+
+Note that `NetRequest` is using a small helper object `DataProvider` for
+requesting HTTP details. `DataProvider` is the connection between `NetRequest`
+and the backend.
+
+### Data Provider
+`devtools/client/webconsole/net/data-provider`
+
+This module is using webconsole client object to get data from the backend.
+
+### Utils
+`devtools/client/webconsole/net/utils`
+
+There are also some utility modules implementing helper functions.
+The important thing is that these modules doesn't require any chrome
+privileges and are ready to run inside content scope.
+
+### Components
+* `NetInfoBody` Renders the entire HTTP details body displayed when the
+  user expands a network log.
+* `NetInfoGroup` Renders a group (a section within tab). For example,
+  Request Headers section in Headers tab corresponds to one group.
+* `NetInfoGroupList` List of groups. There might be more groups of data
+  within one tab. For example, the Headers tab has Requested and Response
+  headers groups.
+* `NetInfoParams` List of name-value pairs. It's used e.g. by the Headers
+  or Params tab.
+* `HeadersTab` Displays HTTP headers.
+* `PostTab` Displays HTTP posted body data.
+* `ParamsTab` Displays URL query string.
+* `ResponseTab` Displays HTTP response body data.
+* `CookiesTab` Displays cookies.
+* `Spinner` Represents a throbber displayed when the UI is waiting for
+  incoming data.
+* `SizeLimit` Represents a link that can be used to fetch the
+  rest of data from the backend (debugger server). Used for HTTP post
+  and response bodies.
+* `XmlView` Renders XML markup.
