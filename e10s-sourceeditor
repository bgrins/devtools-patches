# HG changeset patch
# Parent a5be9b4e46e9eb8caaf9196340a318de876e8c81
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 1030347 - Enable devtools/sourceeditor tests with e10s;r=jwalker

diff --git a/browser/devtools/sourceeditor/test/browser.ini b/browser/devtools/sourceeditor/test/browser.ini
--- a/browser/devtools/sourceeditor/test/browser.ini
+++ b/browser/devtools/sourceeditor/test/browser.ini
@@ -1,10 +1,9 @@
 [DEFAULT]
-skip-if = e10s # Bug ?????? - devtools tests disabled with e10s
 subsuite = devtools
 support-files =
   cm_comment_test.js
   cm_doc_test.js
   cm_driver.js
   cm_emacs_test.js
   cm_mode_test.css
   cm_mode_test.js
diff --git a/browser/devtools/sourceeditor/test/browser_codemirror.js b/browser/devtools/sourceeditor/test/browser_codemirror.js
--- a/browser/devtools/sourceeditor/test/browser_codemirror.js
+++ b/browser/devtools/sourceeditor/test/browser_codemirror.js
@@ -10,29 +10,49 @@ const URI  = "http://" + HOST + "/browse
 function test() {
   requestLongerTimeout(3);
   waitForExplicitFinish();
 
   let tab = gBrowser.addTab();
   gBrowser.selectedTab = tab;
 
   let browser = gBrowser.getBrowserForTab(tab);
+  browser.addEventListener("load", function onLoad() {
+    browser.removeEventListener("load", onLoad, true);
+
+
+    dump("LOAD EVENT HAS FIED");
+
+    let mm = browser.messageManager;
+    mm.addMessageListener('setStatus', function listener({data}) {
+      let {statusMsg, type, customMsg} = data;
+      dump("SET STATUS CALLED!!!!!! " + statusMsg);
+      codeMirror_setStatus(statusMsg, type, customMsg);
+    });
+    mm.addMessageListener('done', function listener({data}) {
+      dump("DONE CALLED!!!!!!" + data.failed);
+      ok (!data.failed, "CodeMirror tests all passed");
+      while (gBrowser.tabs.length > 1) gBrowser.removeCurrentTab();
+      finish();
+    });
+    // mm.addMessageListener('check', function listener() {
+    //   mm.removeMessageListener('check', listener);
+    //   check();
+    // });
+    // mm.loadFrameScript('data:,sendAsyncMessage("check")', true);
+    mm.loadFrameScript('data:,' +
+      // 'content.document.body.textContent = "hi";'+
+      'content.mozilla_setStatus = function(statusMsg, type, customMsg) { dump("SENDING MESSAGE"); sendAsyncMessage("setStatus", {statusMsg: statusMsg, type: type, customMsg: customMsg}); };' +
+      'dump("FRAME SCRIPT LOADED" + content.location.toString());' +
+      'function check() { ' +
+      'var win = content; var doc = win.document; var out = doc.getElementById("status"); ' +
+      'if (!out || !out.classList.contains("done")) { return setTimeout(check, 100); }' +
+      'dump("FRAME SCRIPT FINISHED" + content.failed);' +
+      'sendAsyncMessage("done", { failed: win.failed });' +
+      '}' +
+      'check();'
+      , true);
+
+
+  }, true);
+  
   browser.loadURI(URI);
-
-  function check() {
-    var win = browser.contentWindow.wrappedJSObject;
-    var doc = win.document;
-    var out = doc.getElementById("status");
-    if (out && !win.mozilla_setStatus)
-      win.mozilla_setStatus = codeMirror_setStatus;
-
-    if (!out || !out.classList.contains("done"))
-      return void setTimeout(check, 100);
-
-    ok(!win.failed, "CodeMirror tests all passed");
-    win.mozilla_setStatus = null;
-
-    while (gBrowser.tabs.length > 1) gBrowser.removeCurrentTab();
-    finish();
-  }
-
-  setTimeout(check, 100);
 }
diff --git a/browser/devtools/sourceeditor/test/browser_vimemacs.js b/browser/devtools/sourceeditor/test/browser_vimemacs.js
--- a/browser/devtools/sourceeditor/test/browser_vimemacs.js
+++ b/browser/devtools/sourceeditor/test/browser_vimemacs.js
@@ -28,10 +28,15 @@ function test() {
 
     ok(!win.failed, "CodeMirror tests all passed");
     win.mozilla_setStatus = null;
 
     while (gBrowser.tabs.length > 1) gBrowser.removeCurrentTab();
     finish();
   }
 
-  setTimeout(check, 100);
+  let mm = browser.messageManager;
+  mm.addMessageListener('check', function listener() {
+    mm.removeMessageListener('check', listener);
+    check();
+  });
+  mm.loadFrameScript('data:,sendAsyncMessage("check")', true);
 }
diff --git a/browser/devtools/sourceeditor/test/cm_multi_test.js b/browser/devtools/sourceeditor/test/cm_multi_test.js
--- a/browser/devtools/sourceeditor/test/cm_multi_test.js
+++ b/browser/devtools/sourceeditor/test/cm_multi_test.js
@@ -22,17 +22,17 @@
       eqPos(sels[i].anchor, sels[i].head, "something selected for " + i);
       var head = Pos(arguments[p], arguments[p + 1]);
       eqPos(sels[i].head, head, "selection " + i);
     }
   }
 
   testCM("getSelection", function(cm) {
     select(cm, {anchor: Pos(0, 0), head: Pos(1, 2)}, {anchor: Pos(2, 2), head: Pos(2, 0)});
-    eq(cm.getSelection(), "1234\n56\n90");
+    eq(cm.getSelection(), "FAILING");
     eq(cm.getSelection(false).join("|"), "1234|56|90");
     eq(cm.getSelections().join("|"), "1234\n56|90");
   }, {value: "1234\n5678\n90"});
 
   testCM("setSelection", function(cm) {
     select(cm, Pos(3, 0), Pos(0, 0), {anchor: Pos(2, 5), head: Pos(1, 0)});
     hasSelections(cm, 0, 0, 0, 0,
                   2, 5, 1, 0,
diff --git a/browser/devtools/sourceeditor/test/codemirror.html b/browser/devtools/sourceeditor/test/codemirror.html
--- a/browser/devtools/sourceeditor/test/codemirror.html
+++ b/browser/devtools/sourceeditor/test/codemirror.html
@@ -113,16 +113,17 @@
           skipped = 0,
           bad = "",
           running = false, // Flag that states tests are running
           quit = false, // Flag to quit tests ASAP
           verbose = false, // Adds message for *every* test to output
           phantom = false;
 
       function runHarness(){
+    dump("PAGE LOADED " + window.location.toString());
         if (running) {
           quit = true;
           setStatus("Restarting tests...", '', true);
           setTimeout(function(){runHarness();}, 500);
           return;
         }
         filters = [];
         verbose = false;
@@ -204,16 +205,17 @@
             message = "All passed";
             if (skipped) {
               message += " (" + skipped + " skipped)";
             }
           }
           progressTotal.nodeValue = '';
           customMessage = true; // Hack to avoid adding to output
         }
+        dump("IS THERE A FUNCTION ??? " + window.mozilla_setStatus)
         if (window.mozilla_setStatus)
           mozilla_setStatus(message, type, customMessage);
         if (verbose && !customMessage)  customMessage = message;
         setStatus(message, type);
         if (customMessage && customMessage.length > 0) {
           addOutput(name, type, customMessage);
         }
       }
