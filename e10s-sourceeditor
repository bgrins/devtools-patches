# HG changeset patch
# Parent a5be9b4e46e9eb8caaf9196340a318de876e8c81
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 1030347 - Enable devtools/sourceeditor tests with e10s;r=jwalker

diff --git a/browser/devtools/sourceeditor/test/browser.ini b/browser/devtools/sourceeditor/test/browser.ini
--- a/browser/devtools/sourceeditor/test/browser.ini
+++ b/browser/devtools/sourceeditor/test/browser.ini
@@ -1,10 +1,9 @@
 [DEFAULT]
-skip-if = e10s # Bug ?????? - devtools tests disabled with e10s
 subsuite = devtools
 support-files =
   cm_comment_test.js
   cm_doc_test.js
   cm_driver.js
   cm_emacs_test.js
   cm_mode_test.css
   cm_mode_test.js
@@ -14,16 +13,17 @@ support-files =
   cm_test.js
   cm_vim_test.js
   codemirror.html
   css_statemachine_testcases.css
   css_statemachine_tests.json
   css_autocompletion_tests.json
   vimemacs.html
   head.js
+  helper_codemirror_runner.js
 
 [browser_editor_autocomplete_basic.js]
 [browser_editor_autocomplete_js.js]
 [browser_editor_basic.js]
 [browser_editor_cursor.js]
 [browser_editor_goto_line.js]
 [browser_editor_history.js]
 [browser_editor_markers.js]
diff --git a/browser/devtools/sourceeditor/test/browser_codemirror.js b/browser/devtools/sourceeditor/test/browser_codemirror.js
--- a/browser/devtools/sourceeditor/test/browser_codemirror.js
+++ b/browser/devtools/sourceeditor/test/browser_codemirror.js
@@ -1,38 +1,25 @@
 /* vim: set ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
 const HOST = 'mochi.test:8888';
 const URI  = "http://" + HOST + "/browser/browser/devtools/sourceeditor/test/codemirror.html";
+loadHelperScript("helper_codemirror_runner.js");
 
 function test() {
   requestLongerTimeout(3);
   waitForExplicitFinish();
 
   let tab = gBrowser.addTab();
   gBrowser.selectedTab = tab;
 
   let browser = gBrowser.getBrowserForTab(tab);
+  browser.addEventListener("load", function onLoad() {
+    browser.removeEventListener("load", onLoad, true);
+    runCodeMirrorTest(browser);
+  }, true);
+
   browser.loadURI(URI);
-
-  function check() {
-    var win = browser.contentWindow.wrappedJSObject;
-    var doc = win.document;
-    var out = doc.getElementById("status");
-    if (out && !win.mozilla_setStatus)
-      win.mozilla_setStatus = codeMirror_setStatus;
-
-    if (!out || !out.classList.contains("done"))
-      return void setTimeout(check, 100);
-
-    ok(!win.failed, "CodeMirror tests all passed");
-    win.mozilla_setStatus = null;
-
-    while (gBrowser.tabs.length > 1) gBrowser.removeCurrentTab();
-    finish();
-  }
-
-  setTimeout(check, 100);
 }
diff --git a/browser/devtools/sourceeditor/test/browser_vimemacs.js b/browser/devtools/sourceeditor/test/browser_vimemacs.js
--- a/browser/devtools/sourceeditor/test/browser_vimemacs.js
+++ b/browser/devtools/sourceeditor/test/browser_vimemacs.js
@@ -1,37 +1,24 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
 const HOST = 'mochi.test:8888';
 const URI  = "http://" + HOST + "/browser/browser/devtools/sourceeditor/test/vimemacs.html";
+loadHelperScript("helper_codemirror_runner.js");
 
 function test() {
   requestLongerTimeout(3);
   waitForExplicitFinish();
 
   let tab = gBrowser.addTab();
   gBrowser.selectedTab = tab;
 
   let browser = gBrowser.getBrowserForTab(tab);
+  browser.addEventListener("load", function onLoad() {
+    browser.removeEventListener("load", onLoad, true);
+    runCodeMirrorTest(browser);
+  }, true);
+
   browser.loadURI(URI);
-
-  function check() {
-    var win = browser.contentWindow.wrappedJSObject;
-    var doc = win.document;
-    var out = doc.getElementById("status");
-    if (out && !win.mozilla_setStatus)
-      win.mozilla_setStatus = codeMirror_setStatus;
-
-    if (!out || !out.classList.contains("done"))
-      return void setTimeout(check, 100);
-
-    ok(!win.failed, "CodeMirror tests all passed");
-    win.mozilla_setStatus = null;
-
-    while (gBrowser.tabs.length > 1) gBrowser.removeCurrentTab();
-    finish();
-  }
-
-  setTimeout(check, 100);
 }
diff --git a/browser/devtools/sourceeditor/test/head.js b/browser/devtools/sourceeditor/test/head.js
--- a/browser/devtools/sourceeditor/test/head.js
+++ b/browser/devtools/sourceeditor/test/head.js
@@ -49,16 +49,32 @@ function ch(exp, act, label) {
 
 function teardown(ed, win) {
   ed.destroy();
   win.close();
   finish();
 }
 
 /**
+ * Some tests may need to import one or more of the test helper scripts.
+ * A test helper script is simply a js file that contains common test code that
+ * is either not common-enough to be in head.js, or that is located in a separate
+ * directory.
+ * The script will be loaded synchronously and in the test's scope.
+ * @param {String} filePath The file path, relative to the current directory.
+ *                 Examples:
+ *                 - "helper_attributes_test_runner.js"
+ *                 - "../../../commandline/test/helpers.js"
+ */
+function loadHelperScript(filePath) {
+  let testDir = gTestPath.substr(0, gTestPath.lastIndexOf("/"));
+  Services.scriptloader.loadSubScript(testDir + "/" + filePath, this);
+}
+
+/**
  * This method returns the portion of the input string `source` up to the
  * [line, ch] location.
  */
 function limit(source, [line, ch]) {
   line++;
   let list = source.split("\n");
   if (list.length < line)
     return source;
diff --git a/browser/devtools/sourceeditor/test/helper_codemirror_runner.js b/browser/devtools/sourceeditor/test/helper_codemirror_runner.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/sourceeditor/test/helper_codemirror_runner.js
@@ -0,0 +1,28 @@
+
+function runCodeMirrorTest(browser) {
+  let mm = browser.messageManager;
+  mm.addMessageListener('setStatus', function listener({data}) {
+    let {statusMsg, type, customMsg} = data;
+    codeMirror_setStatus(statusMsg, type, customMsg);
+  });
+  mm.addMessageListener('done', function listener({data}) {
+    ok (!data.failed, "CodeMirror tests all passed");
+    while (gBrowser.tabs.length > 1) gBrowser.removeCurrentTab();
+    mm = null;
+    finish();
+  });
+
+  // Interact with the content iframe, giving it a function to proxy CM test
+  // harness calls into ok() calls and detecting when it finishes.
+  mm.loadFrameScript('data:,' +
+    'content.wrappedJSObject.mozilla_setStatus = function(statusMsg, type, customMsg) {' +
+    '  sendSyncMessage("setStatus", {statusMsg: statusMsg, type: type, customMsg: customMsg});' +
+    '};' +
+    'function check() { ' +
+    '  var doc = content.document; var out = doc.getElementById("status"); ' +
+    '  if (!out || !out.classList.contains("done")) { return setTimeout(check, 100); }' +
+    '  sendSyncMessage("done", { failed: content.wrappedJSObject.failed });' +
+    '}' +
+    'check();'
+  , true);
+}
\ No newline at end of file
