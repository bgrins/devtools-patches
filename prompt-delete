# HG changeset patch
# Parent 86fbf924bf86d5bf48cfbc52bd2fdf75fbbc868e
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 1021828 - Project editor: show prompt before deleting file;r=paul

diff --git a/browser/devtools/projecteditor/lib/editors.js b/browser/devtools/projecteditor/lib/editors.js
--- a/browser/devtools/projecteditor/lib/editors.js
+++ b/browser/devtools/projecteditor/lib/editors.js
@@ -181,16 +181,19 @@ var TextEditor = Class({
    */
   load: function(resource) {
     // Wait for the editor.appendTo and resource.load before proceeding.
     // They can run  in parallel.
     return promise.all([
       resource.load(),
       this.appended
     ]).then(([resourceContents])=> {
+      if (!this.editor) {
+        return;
+      }
       this.editor.setText(resourceContents);
       this.editor.setClean();
       this.emit("load");
     }, console.error);
   },
 
   /**
    * Save the resource based on the current state of the editor
diff --git a/browser/devtools/projecteditor/lib/helpers/prompts.js b/browser/devtools/projecteditor/lib/helpers/prompts.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/projecteditor/lib/helpers/prompts.js
@@ -0,0 +1,33 @@
+/* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/**
+ * This file contains helper functions for showing user prompts.
+ * See https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIPromptService
+ */
+
+const { Cu, Cc, Ci } = require("chrome");
+const { getLocalizedString } = require("projecteditor/helpers/l10n");
+const prompts = Cc["@mozilla.org/embedcomp/prompt-service;1"]
+                        .getService(Ci.nsIPromptService);
+
+/**
+ * Show a prompt.
+ *
+ * @param string title
+ *               The title to the dialog
+ * @param string message
+ *               The message to display
+ *
+ * @return bool
+ *         Whether the user has confirmed the action
+ */
+function confirm(title, message) {
+  var result = prompts.confirm(null, title || "Title of this Dialog", message || "Are you sure?");
+  return result;
+}
+exports.confirm = confirm;
+
diff --git a/browser/devtools/projecteditor/lib/plugins/delete/delete.js b/browser/devtools/projecteditor/lib/plugins/delete/delete.js
--- a/browser/devtools/projecteditor/lib/plugins/delete/delete.js
+++ b/browser/devtools/projecteditor/lib/plugins/delete/delete.js
@@ -1,38 +1,50 @@
 /* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 const { Class } = require("sdk/core/heritage");
 const { registerPlugin, Plugin } = require("projecteditor/plugins/core");
+const { confirm } = require("projecteditor/helpers/prompts");
 const { getLocalizedString } = require("projecteditor/helpers/l10n");
 
 var DeletePlugin = Class({
   extends: Plugin,
+  shouldConfirm: true,
 
   init: function(host) {
     this.host.addCommand({
       id: "cmd-delete"
     });
     this.host.createMenuItem({
       parent: "#directory-menu-popup",
       label: getLocalizedString("projecteditor.deleteLabel"),
       command: "cmd-delete"
     });
   },
 
+  confirmDelete: function() {
+    return !this.shouldConfirm || confirm(
+      getLocalizedString("projecteditor.deletePromptTitle"),
+      getLocalizedString("projecteditor.deletePromptMessage")
+    );
+  },
+
   onCommand: function(cmd) {
     if (cmd === "cmd-delete") {
+      if (!this.confirmDelete()) {
+        return;
+      }
+
       let tree = this.host.projectTree;
       let resource = tree.getSelectedResource();
-      let parent = resource.parent;
       resource.delete().then(() => {
         this.host.project.refresh();
-      })
+      });
     }
   }
 });
 
 exports.DeletePlugin = DeletePlugin;
 registerPlugin(DeletePlugin);
diff --git a/browser/devtools/projecteditor/lib/project.js b/browser/devtools/projecteditor/lib/project.js
--- a/browser/devtools/projecteditor/lib/project.js
+++ b/browser/devtools/projecteditor/lib/project.js
@@ -19,16 +19,24 @@ const url = require('sdk/url');
 
 const gDecoder = new TextDecoder();
 const gEncoder = new TextEncoder();
 
 /**
  * A Project keeps track of the opened folders using LocalStore
  * objects.  Resources are generally requested from the project,
  * even though the Store is actually keeping track of them.
+ *
+ *
+ * This object emits the following events:
+ *   - "refresh-complete": After all stores have been refreshed from disk.
+ *   - "store-added": When a store has been added to the project.
+ *   - "store-removed": When a store has been removed from the project.
+ *   - "resource-added": When a resource has been added to one of the stores.
+ *   - "resource-removed": When a resource has been removed from one of the stores.
  */
 var Project = Class({
   extends: EventTarget,
 
   /**
    * Intialize the Project.
    *
    * @param Object options
@@ -83,16 +91,17 @@ var Project = Class({
    * @returns Promise
    *          A promise that resolves when everything has been refreshed.
    */
   refresh: function() {
     return Task.spawn(function*() {
       for (let [path, store] of this.localStores) {
         yield store.refresh();
       }
+      emit(this, "refresh-complete");
     }.bind(this));
   },
 
 
   /**
    * Fetch a resource from the backing storage system for the store.
    *
    * @param string path
diff --git a/browser/devtools/projecteditor/test/browser_projecteditor_delete_file.js b/browser/devtools/projecteditor/test/browser_projecteditor_delete_file.js
--- a/browser/devtools/projecteditor/test/browser_projecteditor_delete_file.js
+++ b/browser/devtools/projecteditor/test/browser_projecteditor_delete_file.js
@@ -20,25 +20,16 @@ let test = asyncTest(function*() {
     let defer = promise.defer();
     contextMenu.addEventListener("popupshown", function onpopupshown() {
       contextMenu.removeEventListener("popupshown", onpopupshown);
       defer.resolve();
     });
     return defer.promise;
   }
 
-  function onPopupHide(contextMenu) {
-    let defer = promise.defer();
-    contextMenu.addEventListener("popuphidden", function popuphidden() {
-      contextMenu.removeEventListener("popuphidden", popuphidden);
-      defer.resolve();
-    });
-    return defer.promise;
-  }
-
   function openContextMenuOn(node) {
     EventUtils.synthesizeMouseAtCenter(
       node,
       {button: 2, type: "contextmenu"},
       node.ownerDocument.defaultView
     );
   }
 
@@ -50,31 +41,40 @@ let test = asyncTest(function*() {
     info ("Going to attempt deletion for: " + resource.path)
 
     onPopupShow(popup).then(function () {
       let deleteCommand = popup.querySelector("[command=cmd-delete]");
       ok (deleteCommand, "Delete command exists in popup");
       is (deleteCommand.getAttribute("hidden"), "", "Delete command is visible");
       is (deleteCommand.getAttribute("disabled"), "", "Delete command is enabled");
 
-      onPopupHide(popup).then(() => {
-        ok (true, "Popup has been hidden, waiting for project refresh");
-        projecteditor.project.refresh().then(() => {
+      function onConfirmShown(aSubject) {
+        info("confirm dialog observed as expected");
+        Services.obs.removeObserver(onConfirmShown, "common-dialog-loaded");
+        Services.obs.removeObserver(onConfirmShown, "tabmodal-dialog-loaded");
+
+        projecteditor.project.on("refresh-complete", function refreshComplete() {
+          projecteditor.project.off("refresh-complete", refreshComplete);
           OS.File.stat(resource.path).then(() => {
             ok (false, "The file was not deleted");
             defer.resolve();
           }, (ex) => {
             ok (ex instanceof OS.File.Error && ex.becauseNoSuchFile, "OS.File.stat promise was rejected because the file is gone");
             defer.resolve();
           });
         });
-      });
+
+        // Click the 'OK' button
+        aSubject.Dialog.ui.button0.click();
+      }
+
+      Services.obs.addObserver(onConfirmShown, "common-dialog-loaded", false);
+      Services.obs.addObserver(onConfirmShown, "tabmodal-dialog-loaded", false);
 
       deleteCommand.click();
       popup.hidePopup();
     });
 
     openContextMenuOn(container.label);
 
     return defer.promise;
   }
-
 });
\ No newline at end of file
diff --git a/browser/locales/en-US/chrome/browser/devtools/projecteditor.properties b/browser/locales/en-US/chrome/browser/devtools/projecteditor.properties
--- a/browser/locales/en-US/chrome/browser/devtools/projecteditor.properties
+++ b/browser/locales/en-US/chrome/browser/devtools/projecteditor.properties
@@ -11,16 +11,26 @@
 # A good criteria is the language in which you'd find the best
 # documentation on web development on the web.
 
 # LOCALIZATION NOTE (projecteditor.deleteLabel):
 # This string is displayed as a context menu item for allowing the selected
 # file / folder to be deleted
 projecteditor.deleteLabel=Delete
 
+# LOCALIZATION NOTE (projecteditor.deletePromptTitle):
+# This string is displayed as as the title of the confirm prompt that checks
+# to make sure if a file or folder should be removed
+projecteditor.deletePromptTitle=Delete
+
+# LOCALIZATION NOTE (projecteditor.deletePromptMessage):
+# This string is displayed as as the message of the confirm prompt that checks
+# to make sure if a file or folder should be removed
+projecteditor.deletePromptMessage=Are you sure you want to delete this?
+
 # LOCALIZATION NOTE (projecteditor.newLabel):
 # This string is displayed as a context menu item for adding a new file to
 # the directory
 projecteditor.newLabel=New…
 
 # LOCALIZATION NOTE (projecteditor.selectFileLabel):
 # This string is displayed as the title on the file picker when saving a file
 projecteditor.selectFileLabel=Select a File
