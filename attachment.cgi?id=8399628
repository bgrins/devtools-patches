# HG changeset patch
# User Thomas Andersen <thomas@mr-andersen.no>
# Date 1396298859 -7200
#      Mon Mar 31 22:47:39 2014 +0200
# Node ID 328a599878fecff6614c8624f762a7a9108469c6
# Parent  823ab3b9307bb2fe24dc84ab937b328cbb4b3b14
Bug 988283 - [rule view] Show full path to CSS file on link hover; r=bgrins

diff --git a/browser/devtools/styleinspector/rule-view.js b/browser/devtools/styleinspector/rule-view.js
--- a/browser/devtools/styleinspector/rule-view.js
+++ b/browser/devtools/styleinspector/rule-view.js
@@ -480,26 +480,31 @@ Rule.prototype = {
     return this.domRule ? this.domRule.column : null;
   },
 
   /**
    * Get display name for this rule based on the original source
    * for this rule's style sheet.
    *
    * @return {Promise}
-   *         Promise which resolves with location as a string.
+   *         Promise which resolves with location as an object containing
+   *         both the full and short version of the source string.
    */
-  getOriginalSourceString: function() {
-    if (this._originalSourceString) {
-      return promise.resolve(this._originalSourceString);
+  getOriginalSourceStrings: function() {
+    if (this._originalSourceStrings) {
+      return promise.resolve(this._originalSourceStrings);
     }
     return this.domRule.getOriginalLocation().then(({href, line}) => {
-      let string = CssLogic.shortSource({href: href}) + ":" + line;
-      this._originalSourceString = string;
-      return string;
+      let sourceStrings = {
+        full: href + ":" + line,
+        short: CssLogic.shortSource({href: href}) + ":" + line
+      };
+
+      this._originalSourceStrings = sourceStrings;
+      return sourceStrings;
     });
   },
 
   /**
    * Returns true if the rule matches the creation options
    * specified.
    *
    * @param {object} aOptions
@@ -1700,23 +1705,27 @@ RuleEditor.prototype = {
       this.newProperty();
     });
   },
 
   updateSourceLink: function RuleEditor_updateSourceLink()
   {
     let sourceLabel = this.element.querySelector(".source-link-label");
     sourceLabel.setAttribute("value", this.rule.title);
-    sourceLabel.setAttribute("tooltiptext", this.rule.title);
+
+    let sourceHref = (this.rule.sheet && this.rule.sheet.href) ?
+      this.rule.sheet.href : this.rule.title;
+
+    sourceLabel.setAttribute("tooltiptext", sourceHref);
 
     let showOrig = Services.prefs.getBoolPref(PREF_ORIG_SOURCES);
     if (showOrig && this.rule.domRule.type != ELEMENT_STYLE) {
-      this.rule.getOriginalSourceString().then((string) => {
-        sourceLabel.setAttribute("value", string);
-        sourceLabel.setAttribute("tooltiptext", string);
+      this.rule.getOriginalSourceStrings().then((strings) => {
+        sourceLabel.setAttribute("value", strings.short);
+        sourceLabel.setAttribute("tooltiptext", strings.full);
       })
     }
   },
 
   /**
    * Update the rule editor with the contents of the rule.
    */
   populate: function() {
diff --git a/browser/devtools/styleinspector/test/browser.ini b/browser/devtools/styleinspector/test/browser.ini
--- a/browser/devtools/styleinspector/test/browser.ini
+++ b/browser/devtools/styleinspector/test/browser.ini
@@ -9,16 +9,18 @@ support-files = browser_bug683672.html
 [browser_styleinspector_bug_672746_default_styles.js]
 [browser_styleinspector_bug_672744_search_filter.js]
 [browser_bug589375_keybindings.js]
 skip-if = true # awaiting promise-based init
 [browser_styleinspector_bug_689759_no_results_placeholder.js]
 [browser_bug_692400_element_style.js]
 [browser_csslogic_inherited.js]
 [browser_ruleview_734259_style_editor_link.js]
+support-files =
+  browser_ruleview_734259_style_editor_link.css
 [browser_ruleview_editor.js]
 [browser_ruleview_editor_changedvalues.js]
 [browser_ruleview_copy.js]
 [browser_ruleview_focus.js]
 [browser_ruleview_inherit.js]
 [browser_ruleview_manipulation.js]
 [browser_ruleview_multiple_properties.js]
 [browser_ruleview_override.js]
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_734259_style_editor_link.css b/browser/devtools/styleinspector/test/browser_ruleview_734259_style_editor_link.css
new file mode 100644
--- /dev/null
+++ b/browser/devtools/styleinspector/test/browser_ruleview_734259_style_editor_link.css
@@ -0,0 +1,3 @@
+div {
+  opacity: 1;
+}
\ No newline at end of file
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_734259_style_editor_link.js b/browser/devtools/styleinspector/test/browser_ruleview_734259_style_editor_link.js
--- a/browser/devtools/styleinspector/test/browser_ruleview_734259_style_editor_link.js
+++ b/browser/devtools/styleinspector/test/browser_ruleview_734259_style_editor_link.js
@@ -12,27 +12,31 @@ let tempScope = {};
 Cu.import("resource://gre/modules/Services.jsm", tempScope);
 let Services = tempScope.Services;
 
 const STYLESHEET_URL = "data:text/css,"+encodeURIComponent(
   ["#first {",
    "color: blue",
    "}"].join("\n"));
 
+const EXTERNAL_STYLESHEET_FILE_NAME = "browser_ruleview_734259_style_editor_link.css"
+const EXTERNAL_STYLESHEET_URL = TEST_BASE + EXTERNAL_STYLESHEET_FILE_NAME;
+
 const DOCUMENT_URL = "data:text/html,"+encodeURIComponent(
   ['<html>' +
    '<head>' +
    '<title>Rule view style editor link test</title>',
    '<style type="text/css"> ',
    'html { color: #000000; } ',
    'div { font-variant: small-caps; color: #000000; } ',
    '.nomatches {color: #ff0000;}</style> <div id="first" style="margin: 10em; ',
    'font-size: 14pt; font-family: helvetica, sans-serif; color: #AAA">',
    '</style>',
    '<link rel="stylesheet" type="text/css" href="'+STYLESHEET_URL+'">',
+   '<link rel="stylesheet" type="text/css" href="'+EXTERNAL_STYLESHEET_URL+'">',
    '</head>',
    '<body>',
    '<h1>Some header text</h1>',
    '<p id="salutation" style="font-size: 12pt">hi.</p>',
    '<p id="body" style="font-size: 12pt">I am a test-case. This text exists ',
    'solely to provide some things to ',
    '<span style="color: yellow" class="highlight">',
    'highlight</span> and <span style="font-weight: bold">count</span> ',
@@ -122,22 +126,36 @@ function testExternalStyleSheet(toolbox)
   let panel = toolbox.getCurrentPanel();
   panel.UI.once("editor-selected", (event, editor) => {
     is(toolbox.currentToolId, "styleeditor", "style editor tool selected");
     validateStyleEditorSheet(editor, 1);
     finishUp();
   });
 
   toolbox.selectTool("inspector").then(function () {
+    testLinkLabelInRuleView();
     let link = getLinkByIndex(1);
     link.scrollIntoView();
     link.click();
   });
 }
 
+function testLinkLabelInRuleView()
+{
+  let link = getLinkByIndex(2);
+  let labelElem = link.querySelector(".source-link-label");
+  let value = labelElem.getAttribute("value");
+  let tooltipText = labelElem.getAttribute("tooltiptext");
+
+  is(value, EXTERNAL_STYLESHEET_FILE_NAME + ":1",
+    "rule view stylesheet display value matches filename and line number");
+  is(tooltipText, EXTERNAL_STYLESHEET_URL,
+    "rule view stylesheet tooltip text matches the full URI path");
+}
+
 function validateStyleEditorSheet(aEditor, aExpectedSheetIndex)
 {
   info("validating style editor stylesheet");
   let sheet = doc.styleSheets[aExpectedSheetIndex];
   is(aEditor.styleSheet.href, sheet.href, "loaded stylesheet matches document stylesheet");
 }
 
 function getLinkByIndex(aIndex)
diff --git a/browser/devtools/styleinspector/test/head.js b/browser/devtools/styleinspector/test/head.js
--- a/browser/devtools/styleinspector/test/head.js
+++ b/browser/devtools/styleinspector/test/head.js
@@ -1,13 +1,14 @@
 /* vim:set ts=2 sw=2 sts=2 et: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+const TEST_BASE = "chrome://mochitests/content/browser/browser/devtools/styleinspector/test/";
 const TEST_BASE_HTTP = "http://example.com/browser/browser/devtools/styleinspector/test/";
 const TEST_BASE_HTTPS = "https://example.com/browser/browser/devtools/styleinspector/test/";
 
 // Services.prefs.setBoolPref("devtools.dump.emit", true);
 // Services.prefs.setBoolPref("devtools.debugger.log", true);
 
 let tempScope = {};
 
