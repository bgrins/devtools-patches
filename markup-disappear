# HG changeset patch
# Parent 5f218b62f7350fe43cf737406807d383f9b5b22e
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 1036324 - Fix markup view disappearing on reload during request;r=mratcliffe

diff --git a/browser/base/content/nsContextMenu.js b/browser/base/content/nsContextMenu.js
--- a/browser/base/content/nsContextMenu.js
+++ b/browser/base/content/nsContextMenu.js
@@ -488,16 +488,17 @@ nsContextMenu.prototype = {
   },
 
   inspectNode: function CM_inspectNode() {
     let {devtools} = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
     let gBrowser = this.browser.ownerDocument.defaultView.gBrowser;
     let tt = devtools.TargetFactory.forTab(gBrowser.selectedTab);
     return gDevTools.showToolbox(tt, "inspector").then(function(toolbox) {
       let inspector = toolbox.getCurrentPanel();
+      console.log("Setting to this", this.target);
       inspector.selection.setNode(this.target, "browser-context-menu");
     }.bind(this));
   },
 
   // Set various context menu attributes based on the state of the world.
   setTarget: function (aNode, aRangeParent, aRangeOffset) {
     // If gContextMenuContentData is not null, this event was forwarded from a
     // child process, so use that information instead.
diff --git a/browser/devtools/framework/selection.js b/browser/devtools/framework/selection.js
--- a/browser/devtools/framework/selection.js
+++ b/browser/devtools/framework/selection.js
@@ -129,16 +129,17 @@ Selection.prototype = {
     }
   },
 
   // Not remote-safe
   setNode: function(value, reason="unknown") {
     if (value) {
       value = this._walker.frontForRawNode(value);
     }
+
     this.setNodeFront(value, reason);
   },
 
   // Not remote-safe
   get node() {
     return this._node;
   },
 
@@ -163,23 +164,25 @@ Selection.prototype = {
 
     // We used to return here if the node had not changed but we now need to
     // set the node even if it is already set otherwise it is not possible to
     // e.g. highlight the same node twice.
     let rawValue = null;
     if (value && value.isLocal_toBeDeprecated()) {
       rawValue = value.rawNode();
     }
-    this.emit("before-new-node", rawValue, reason);
+    console.log("Setting node front", value, reason);
+
+    // this.emit("before-new-node", rawValue, reason);
     this.emit("before-new-node-front", value, reason);
-    let previousNode = this._node;
+    // let previousNode = this._node;
     let previousFront = this._nodeFront;
-    this._node = rawValue;
+    // this._node = rawValue;
     this._nodeFront = value;
-    this.emit("new-node", previousNode, this.reason);
+    // this.emit("new-node", previousNode, this.reason);
     this.emit("new-node-front", value, this.reason);
   },
 
   get documentFront() {
     return this._walker.document(this._nodeFront);
   },
 
   get nodeFront() {
diff --git a/browser/devtools/inspector/test/browser.ini b/browser/devtools/inspector/test/browser.ini
--- a/browser/devtools/inspector/test/browser.ini
+++ b/browser/devtools/inspector/test/browser.ini
@@ -11,17 +11,19 @@ support-files =
   browser_inspector_infobar_01.html
   browser_inspector_infobar_02.html
   doc_inspector_menu.html
   doc_inspector_remove-iframe-during-load.html
   doc_inspector_search.html
   doc_inspector_search-suggestions.html
   doc_inspector_select-last-selected-01.html
   doc_inspector_select-last-selected-02.html
+  doc_inspector_reload.html
   browser_inspector_highlight_after_transition.html
+  browser_inspector_reload.sjs
   head.js
 
 [browser_inspector_breadcrumbs.js]
 [browser_inspector_delete-selected-node-01.js]
 [browser_inspector_delete-selected-node-02.js]
 [browser_inspector_delete-selected-node-03.js]
 [browser_inspector_destroy-after-navigation.js]
 [browser_inspector_gcli-inspect-command.js]
@@ -40,16 +42,17 @@ support-files =
 [browser_inspector_menu.js]
 [browser_inspector_navigation.js]
 [browser_inspector_picker-stop-on-destroy.js]
 [browser_inspector_picker-stop-on-tool-change.js]
 [browser_inspector_pseudoclass-lock.js]
 [browser_inspector_pseudoclass-menu.js]
 [browser_inspector_reload-01.js]
 [browser_inspector_reload-02.js]
+[browser_inspector_reload-03.js]
 [browser_inspector_remove-iframe-during-load.js]
 [browser_inspector_scrolling.js]
 [browser_inspector_search-01.js]
 [browser_inspector_search-02.js]
 [browser_inspector_search-03.js]
 [browser_inspector_select-last-selected.js]
 [browser_inspector_search-navigation.js]
 [browser_inspector_sidebarstate.js]
diff --git a/browser/devtools/inspector/test/browser_inspector_reload-03.js b/browser/devtools/inspector/test/browser_inspector_reload-03.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_reload-03.js
@@ -0,0 +1,51 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+// A test to ensure reloading a page doesn't break the inspector.
+
+const TEST_URI = TEST_URL_ROOT +
+             "doc_inspector_reload.html";
+
+// Reloading then setting the current node to a dead wrapper should
+// not break the inspector.
+
+let test = asyncTest(function* () {
+  let { inspector, toolbox } = yield openInspectorForURL(TEST_URI);
+  yield selectNode("img", inspector);
+//browser_inspector_reload.sjs
+  let markupLoaded = inspector.once("markuploaded");
+
+  let salutation = getNode("img");
+
+  console.log(content.document.body.innerHTML);
+  info("Reloading page.");
+  content.location.reload();
+
+  // yield clickOnInspectMenuItem(salutation);
+
+  console.log(content.document.querySelector("img").outerHTML);
+  inspector.selection.setNode(content.document.querySelector("img"), "browser-context-menu");
+  inspector.selection.setNode(content.document.querySelector("p"), "browser-context-menu");
+
+  // Select a node during the reload
+  // yield selectNode("img", inspector);
+
+  info("Waiting for markupview to load after reload.");
+  yield markupLoaded;  inspector.selection.setNode(content.document.querySelector("p"), "browser-context-menu");
+
+
+  is(inspector.selection.node, getNode("p"), "<p> selected after reload.");
+
+  info("Selecting a node to see that inspector still works.");
+
+  // let updated = inspector.once("inspector-updated");
+  // inspector.selection.setNode(node, "test");
+  // yield updated;
+  yield promise.defer().promise;
+});
+
+
diff --git a/browser/devtools/inspector/test/browser_inspector_reload.sjs b/browser/devtools/inspector/test/browser_inspector_reload.sjs
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_reload.sjs
@@ -0,0 +1,12 @@
+
+  var timer = null;
+function handleRequest(request, response)
+{
+  response.processAsync();
+  timer = Components.classes["@mozilla.org/timer;1"].createInstance(Components.interfaces.nsITimer);
+  timer.initWithCallback(function()
+  {
+    response.write("world!");
+    response.finish();
+  }, 4000, Components.interfaces.nsITimer.TYPE_ONE_SHOT);
+}
\ No newline at end of file
diff --git a/browser/devtools/inspector/test/doc_inspector_reload.html b/browser/devtools/inspector/test/doc_inspector_reload.html
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/doc_inspector_reload.html
@@ -0,0 +1,22 @@
+<!DOCTYPE html>
+<html>
+<head>
+  <meta charset="utf-8">
+  <title>Example demonstrating Firefox bug 1036324</title>
+</head>
+<body>
+<h3>Second example demonstrating Firefox bug <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1036324">1036324</a></h3>
+<p>Instructions: </p>
+
+<p>Below is an image which is requested from http://example.com:8080, which shouldn't respond, and the page keeps trying to load it until the request timeouts.<br>
+1. Open the Inspector<br>
+2. Hit the page refresh<br>
+3. Select any element before the image timeouts<br>
+4. Wait for the page loading to finish and see if the code comes back or not</p>
+<p><img src="browser_inspector_reload.sjs" width="300" height="150" style="background: #add"></p>
+<p>Note: the results depend on that you are fast enogh to select an element to Inspector before the image loading timeouts.</p>
+</body>
+</html>
+
+
+
diff --git a/toolkit/devtools/server/actors/inspector.js b/toolkit/devtools/server/actors/inspector.js
--- a/toolkit/devtools/server/actors/inspector.js
+++ b/toolkit/devtools/server/actors/inspector.js
@@ -300,16 +300,20 @@ var NodeActor = exports.NodeActor = prot
 
   /**
    * Are event listeners that are listening on this node?
    */
   get _hasEventListeners() {
     let listeners;
 
     if (this.rawNode.nodeName.toLowerCase() === "html") {
+      if (!this.rawNode.ownerGlobal) {
+        return false;
+      }
+
       listeners = eventListenerService.getListenerInfoFor(this.rawNode.ownerGlobal);
     } else {
       listeners = eventListenerService.getListenerInfoFor(this.rawNode) || [];
     }
 
     listeners = listeners.filter(listener => {
       return listener.listenerObject && listener.type && listener.listenerObject;
     });
@@ -2949,21 +2953,23 @@ function nodeDocument(node) {
  *
  * See TreeWalker documentation for explanations of the methods.
  */
 function DocumentWalker(aNode, aRootWin, aShow, aFilter, aExpandEntityReferences) {
   if (!aRootWin.location) {
     throw new Error("Got an invalid root window in DocumentWalker");
   }
 
-  let doc = nodeDocument(aNode);
-  this.layoutHelpers = new LayoutHelpers(aRootWin);
+  this.rootWin = aRootWin;
+  let currentNode = Cu.isDeadWrapper(aNode) ? this.rootWin.document : aNode;
+  let doc = nodeDocument(currentNode);
+  this.layoutHelpers = new LayoutHelpers(this.rootWin);
   this.walker = doc.createTreeWalker(doc,
     aShow, aFilter, aExpandEntityReferences);
-  this.walker.currentNode = aNode;
+  this.walker.currentNode = currentNode;
   this.filter = aFilter;
 }
 
 DocumentWalker.prototype = {
   get node() this.walker.node,
   get whatToShow() this.walker.whatToShow,
   get expandEntityReferences() this.walker.expandEntityReferences,
   get currentNode() this.walker.currentNode,
@@ -2973,22 +2979,23 @@ DocumentWalker.prototype = {
    * Called when the new node is in a different document than
    * the current node, creates a new treewalker for the document we've
    * run in to.
    */
   _reparentWalker: function(aNewNode) {
     if (!aNewNode) {
       return null;
     }
-    let doc = nodeDocument(aNewNode);
+    let currentNode = Cu.isDeadWrapper(aNewNode) ? this.rootWin.document : aNewNode;
+    let doc = nodeDocument(currentNode);
     let walker = doc.createTreeWalker(doc,
       this.whatToShow, this.filter, this.expandEntityReferences);
-    walker.currentNode = aNewNode;
+    walker.currentNode = currentNode;
     this.walker = walker;
-    return aNewNode;
+    return currentNode;
   },
 
   parentNode: function() {
     let currentNode = this.walker.currentNode;
     let parentNode = this.walker.parentNode();
 
     if (!parentNode) {
       if (currentNode && currentNode.nodeType == Ci.nsIDOMNode.DOCUMENT_NODE
