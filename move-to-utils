# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  536865ff074b6fb33805a4694cd4a26022f39fb9
Make utils.js safe for workers

diff --git a/devtools/server/actors/webconsole.js b/devtools/server/actors/webconsole.js
--- a/devtools/server/actors/webconsole.js
+++ b/devtools/server/actors/webconsole.js
@@ -22,19 +22,20 @@ loader.lazyRequireGetter(this, "ServerLo
 for (let name of ["WebConsoleUtils", "ConsoleServiceListener",
     "ConsoleAPIListener", "addWebConsoleCommands", "JSPropertyProvider",
     "ConsoleReflowListener", "CONSOLE_WORKER_IDS"]) {
   Object.defineProperty(this, name, {
     get: function(prop) {
       if (prop == "WebConsoleUtils") {
         prop = "Utils";
       }
-      if (isWorker) {
+      if (false && isWorker) {
         return require("devtools/shared/webconsole/worker-utils")[prop];
       } else {
+        dump("About to get " + prop + "\n")
         return require("devtools/shared/webconsole/utils")[prop];
       }
     }.bind(null, name),
     configurable: true,
     enumerable: true
   });
 }
 
@@ -918,16 +919,17 @@ WebConsoleActor.prototype =
         addWebConsoleCommands(helpers);
         this._webConsoleCommandsCache =
           Object.getOwnPropertyNames(helpers.sandbox);
       }
       matches = matches.concat(this._webConsoleCommandsCache
           .filter(n => n.startsWith(result.matchProp)));
     }
 
+    dump("onAutocomplete" + JSON.stringify(aRequest) + "---" + reqText + "---" + matches.length + "\n")
     return {
       from: this.actorID,
       matches: matches.sort(),
       matchProp: result.matchProp,
     };
   },
 
   /**
diff --git a/devtools/shared/webconsole/client.js b/devtools/shared/webconsole/client.js
--- a/devtools/shared/webconsole/client.js
+++ b/devtools/shared/webconsole/client.js
@@ -616,17 +616,19 @@ WebConsoleClient.prototype = {
     this._client = null;
     this.pendingEvaluationResults.clear();
     this.pendingEvaluationResults = null;
     this.clearNetworkRequests();
     this._networkRequests = null;
   },
 
   clearNetworkRequests: function () {
-    this._networkRequests.clear();
+    if (this._networkRequests) {
+      this._networkRequests.clear();
+    }
   },
 
   /**
    * Fetches the full text of a LongString.
    *
    * @param object | string stringGrip
    *        The long string grip containing the corresponding actor.
    *        If you pass in a plain string (by accident or because you're lazy),
diff --git a/devtools/shared/webconsole/utils.js b/devtools/shared/webconsole/utils.js
--- a/devtools/shared/webconsole/utils.js
+++ b/devtools/shared/webconsole/utils.js
@@ -1,27 +1,56 @@
 /* -*- js-indent-level: 2; indent-tabs-mode: nil -*- */
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
-const {Cc, Ci, Cu, components} = require("chrome");
-const {isWindowIncluded} = require("devtools/shared/layout/utils");
+const Services = require("Services");
+const DevToolsUtils = require("devtools/shared/DevToolsUtils");
+let {Cc, Ci, Cu, components} = require("chrome");
+if (isWorker) {
+  Ci = { };
+}
 
-Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+if (isWorker) {
+  const isWindowIncluded = function() { return false; };
+} else {
+  const {isWindowIncluded} = require("devtools/shared/layout/utils");
+}
 
-loader.lazyImporter(this, "Services", "resource://gre/modules/Services.jsm");
+dump("HEY IN HERE\n\n");
 
-// TODO: Bug 842672 - browser/ imports modules from toolkit/.
-// Note that these are only used in WebConsoleCommands, see $0 and pprint().
-loader.lazyImporter(this, "VariablesView", "resource:///modules/devtools/client/shared/widgets/VariablesView.jsm");
-const DevToolsUtils = require("devtools/shared/DevToolsUtils");
+
+
+loader.lazyGetter(this, "XPCOMUtils", () => {
+  dump("LOADING XPCOMUtils \n\n");
+  if (isWorker) {
+    return {
+      generateQI: function() { }
+    };
+  } else {
+    let {XPCOMUtils} = Cu.import("resource://gre/modules/XPCOMUtils.jsm", {});
+    return XPCOMUtils;
+  }
+});
+loader.lazyGetter(this, "VariablesView", () => {
+  dump("LOADING VariablesView \n\n");
+  if (isWorker) {
+    return { };
+  } else {
+    // TODO: Bug 842672 - browser/ imports modules from toolkit/.
+    // Note that these are only used in WebConsoleCommands, see $0 and pprint().
+    let {VariablesView} = Cu.import("resource://gre/modules/VariablesView.jsm", {});
+    return VariablesView;
+  }
+});
+
 
 // Match the function name from the result of toString() or toSource().
 //
 // Examples:
 // (function foobar(a, b) { ...
 // function foobar2(a) { ...
 // function() { ...
 const REGEX_MATCH_FUNCTION_NAME = /^\(?function\s+([^(\s]+)\s*\(/;
@@ -2023,8 +2052,11 @@ ConsoleReflowListener.prototype =
   },
 };
 
 function gSequenceId()
 {
   return gSequenceId.n++;
 }
 gSequenceId.n = 0;
+
+
+dump("HEY DONE HERE\n\n");
\ No newline at end of file
