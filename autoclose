# HG changeset patch
# Parent 5bc01fa51b243d41b15c316c3e8b2864ab91eb16
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 1031472 - Allow reload of autocloseBrackets option in source editor;r=vporof

diff --git a/browser/devtools/sourceeditor/editor.js b/browser/devtools/sourceeditor/editor.js
--- a/browser/devtools/sourceeditor/editor.js
+++ b/browser/devtools/sourceeditor/editor.js
@@ -24,16 +24,17 @@ const MAX_VERTICAL_OFFSET = 3;
 
 // Match @Scratchpad/N:LINE[:COLUMN] or (LINE[:COLUMN]) anywhere at an end of
 // line in text selection.
 const RE_SCRATCHPAD_ERROR = /(?:@Scratchpad\/\d+:|\()(\d+):?(\d+)?(?:\)|\n)/;
 const RE_JUMP_TO_LINE = /^(\d+):?(\d+)?/;
 
 const {Promise: promise} = Cu.import("resource://gre/modules/Promise.jsm", {});
 const events  = require("devtools/toolkit/event-emitter");
+const { PrefObserver } = require("devtools/styleeditor/utils");
 
 Cu.import("resource://gre/modules/Services.jsm");
 const L10N = Services.strings.createBundle(L10N_BUNDLE);
 
 // CM_STYLES, CM_SCRIPTS and CM_IFRAME represent the HTML,
 // JavaScript and CSS that is injected into an iframe in
 // order to initialize a CodeMirror instance.
 
@@ -194,19 +195,18 @@ function Editor(config) {
     this.config.foldGutter = true;
 
     if (!this.config.gutters) {
       this.config.gutters = this.config.lineNumbers ? ["CodeMirror-linenumbers"] : [];
       this.config.gutters.push("CodeMirror-foldgutter");
     }
   }
 
-  // Configure automatic bracket closing.
-  if (!this.config.autoCloseEnabled)
-    this.config.autoCloseBrackets = false;
+  // Remember the initial value of autoCloseBrackets.
+  this.config.autoCloseBracketsSaved = this.config.autoCloseBrackets;
 
   // Overwrite default tab behavior. If something is selected,
   // indent those lines. If nothing is selected and we're
   // indenting with tabs, insert one tab. Otherwise insert N
   // whitespaces where N == indentUnit option.
   this.config.extraKeys.Tab = (cm) => {
     if (cm.somethingSelected()) {
       cm.indentSelection("add");
@@ -320,17 +320,26 @@ Editor.prototype = {
         return L10N.GetStringFromName(name);
       });
 
       cm.getInputField().controllers.insertControllerAt(0, controller(this));
 
       this.container = env;
       editors.set(this, cm);
 
-      this.resetIndentUnit();
+      this.reloadPreferences();
+
+      this.reloadPreferences = this.reloadPreferences.bind(this);
+      this._prefObserver = new PrefObserver("devtools.editor.");
+      this._prefObserver.on(TAB_SIZE, this.reloadPreferences);
+      this._prefObserver.on(EXPAND_TAB, this.reloadPreferences);
+      this._prefObserver.on(KEYMAP, this.reloadPreferences);
+      this._prefObserver.on(AUTO_CLOSE, this.reloadPreferences);
+      this._prefObserver.on(AUTOCOMPLETE, this.reloadPreferences);
+      this._prefObserver.on(DETECT_INDENT, this.reloadPreferences);
 
       def.resolve();
     };
 
     env.addEventListener("load", onLoad, true);
     env.setAttribute("src", CM_IFRAME);
     el.appendChild(env);
 
@@ -393,16 +402,31 @@ Editor.prototype = {
   setText: function (value) {
     let cm = editors.get(this);
     cm.setValue(value);
 
     this.resetIndentUnit();
   },
 
   /**
+   * Reload the state of the editor based on all current preferences.
+   * This is called automatically when any of the specified preferences
+   * change.
+   */
+  reloadPreferences: function() {
+    let useAutoClose = Services.prefs.getBoolPref(AUTO_CLOSE);
+    console.log("Reloading preferences!!!", this.config.autoCloseBracketsSaved, useAutoClose);
+    this.setOption("autoCloseBrackets",
+      useAutoClose ? this.config.autoCloseBracketsSaved : false);
+
+    this.resetIndentUnit();
+    this.setupAutoCompletion();
+  },
+
+  /**
    * Set the editor's indentation based on the current prefs and
    * re-detect indentation if we should.
    */
   resetIndentUnit: function() {
     let cm = editors.get(this);
 
     let indentWithTabs = !Services.prefs.getBoolPref(EXPAND_TAB);
     let indentUnit = Services.prefs.getIntPref(TAB_SIZE);
@@ -873,16 +897,23 @@ Editor.prototype = {
 
   /**
    * Sets an option for the editor.  For most options it just defers to
    * CodeMirror.setOption, but certain ones are maintained within the editor
    * instance.
    */
   setOption: function(o, v) {
     let cm = editors.get(this);
+
+    // Save the state of a valid autoCloseBrackets string, so we can reset
+    // it if it gets preffed off and back on.
+    if (o === "autoCloseBrackets" && v) {
+      this.config.autoCloseBracketsSaved = v;
+    }
+
     if (o === "autocomplete") {
       this.config.autocomplete = v;
       this.setupAutoCompletion();
     } else {
       cm.setOption(o, v);
     }
   },
 
@@ -952,16 +983,25 @@ Editor.prototype = {
       this[name] = funcs[name].bind(null, ctx);
     });
   },
 
   destroy: function () {
     this.container = null;
     this.config = null;
     this.version = null;
+
+    this._prefObserver.off(TAB_SIZE, this.reloadPreferences);
+    this._prefObserver.off(EXPAND_TAB, this.reloadPreferences);
+    this._prefObserver.off(KEYMAP, this.reloadPreferences);
+    this._prefObserver.off(AUTO_CLOSE, this.reloadPreferences);
+    this._prefObserver.off(AUTOCOMPLETE, this.reloadPreferences);
+    this._prefObserver.off(DETECT_INDENT, this.reloadPreferences);
+    this._prefObserver.destroy();
+
     this.emit("destroy");
   }
 };
 
 // Since Editor is a thin layer over CodeMirror some methods
 // are mapped directlyâ€”without any changes.
 
 CM_MAPPING.forEach(function (name) {
diff --git a/browser/devtools/sourceeditor/test/browser.ini b/browser/devtools/sourceeditor/test/browser.ini
--- a/browser/devtools/sourceeditor/test/browser.ini
+++ b/browser/devtools/sourceeditor/test/browser.ini
@@ -23,16 +23,17 @@ support-files =
 [browser_editor_autocomplete_basic.js]
 [browser_editor_autocomplete_js.js]
 [browser_editor_basic.js]
 [browser_editor_cursor.js]
 [browser_editor_goto_line.js]
 [browser_editor_history.js]
 [browser_editor_markers.js]
 [browser_editor_movelines.js]
+[browser_editor_prefs.js]
 [browser_editor_addons.js]
 [browser_codemirror.js]
 [browser_css_autocompletion.js]
 [browser_css_getInfo.js]
 [browser_css_statemachine.js]
 [browser_detectindent.js]
 [browser_vimemacs.js]
 skip-if = os == 'linux'&&debug # bug 981707
diff --git a/browser/devtools/sourceeditor/test/browser_editor_prefs.js b/browser/devtools/sourceeditor/test/browser_editor_prefs.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/sourceeditor/test/browser_editor_prefs.js
@@ -0,0 +1,52 @@
+/* vim: set ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Test to make sure that the editor reacts to preference changes
+
+const TAB_SIZE    = "devtools.editor.tabsize";
+const EXPAND_TAB  = "devtools.editor.expandtab";
+const KEYMAP      = "devtools.editor.keymap";
+const AUTO_CLOSE  = "devtools.editor.autoclosebrackets";
+const AUTOCOMPLETE  = "devtools.editor.autocomplete";
+const DETECT_INDENT = "devtools.editor.detectindentation";
+
+function test() {
+  waitForExplicitFinish();
+  setup((ed, win) => {
+
+
+  Services.prefs.setBoolPref(AUTOCOMPLETE, false);
+    ch(ed.getCursor(), { line: 0, ch: 0 }, "default cursor position is ok");
+    ed.setText("Hello.\nHow are you?");
+
+    ed.setCursor({ line: 1, ch: 5 });
+    ch(ed.getCursor(), { line: 1, ch: 5 }, "setCursor({ line, ch })");
+
+    ch(ed.getPosition(7), { line: 1, ch: 0}, "getPosition(num)");
+    ch(ed.getPosition(7, 1)[0], { line: 1, ch: 0}, "getPosition(num, num)[0]");
+    ch(ed.getPosition(7, 1)[1], { line: 0, ch: 1}, "getPosition(num, num)[1]");
+
+    ch(ed.getOffset({ line: 1, ch: 0 }), 7, "getOffset(num)");
+    ch(ed.getOffset({ line: 1, ch: 0 }, { line: 0, ch: 1 })[0], 7, "getOffset(num, num)[0]");
+    ch(ed.getOffset({ line: 1, ch: 0 }, { line: 0, ch: 1 })[0], 2, "getOffset(num, num)[1]");
+
+    is(ed.getSelection(), "", "nothing is selected");
+    ed.setSelection({ line: 0, ch: 0 }, { line: 0, ch: 5 });
+    is(ed.getSelection(), "Hello", "setSelection");
+
+    ed.dropSelection();
+    is(ed.getSelection(), "", "dropSelection");
+
+    // Check that shift-click on a gutter selects the whole line (bug 919707)
+    let iframe = win.document.querySelector("iframe");
+    let gutter = iframe.contentWindow.document.querySelector(".CodeMirror-gutters");
+
+    EventUtils.sendMouseEvent({ type: "mousedown", shiftKey: true }, gutter, iframe.contentWindow);
+    is(ed.getSelection(), "Hello.", "shift-click");
+
+    teardown(ed, win);
+  });
+}
\ No newline at end of file
