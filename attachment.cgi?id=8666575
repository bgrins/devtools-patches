# HG changeset patch
# User jarjun <arjun.jain@duke.edu>
# Parent  97254f90d33f49b0868496b74cc2e5ae5e83c848

Bug 1039482 - Changed font copying, DOM structure changed for rename and new file, added invisible arrow expander, and fixed tests. r=bgrins

diff --git a/devtools/client/projecteditor/lib/tree.js b/devtools/client/projecteditor/lib/tree.js
--- a/devtools/client/projecteditor/lib/tree.js
+++ b/devtools/client/projecteditor/lib/tree.js
@@ -221,16 +221,32 @@ var TreeView = Class({
     this.updateResource = this.updateResource.bind(this);
   },
 
   destroy: function() {
     this._destroyed = true;
     this.elt.remove();
   },
 
+  createInputContainer: function() {
+    let inputholder = this.doc.createElementNS(HTML_NS, "div");
+    inputholder.className = "child entry";
+
+    let expander = this.doc.createElementNS(HTML_NS, "span");
+    expander.className = "arrow expander";
+    expander.setAttribute("invisible", "");
+    inputholder.appendChild(expander);
+
+    let placeholder = this.doc.createElementNS(HTML_NS, "div");
+    placeholder.className = "child";
+    inputholder.appendChild(placeholder);
+
+    return {inputholder, placeholder};
+  },
+
   /**
    * Prompt the user to create a new file in the tree.
    *
    * @param string initial
    *               The suggested starting file name
    * @param Resource parent
    * @param Resource sibling
    *                 Which resource to put this next to.  If not set,
@@ -241,19 +257,19 @@ var TreeView = Class({
    *          Rejected if it is cancelled
    */
   promptNew: function(initial, parent, sibling=null) {
     let deferred = promise.defer();
 
     let parentContainer = this._containers.get(parent);
     let item = this.doc.createElement("li");
     item.className = "child";
-    let placeholder = this.doc.createElementNS(HTML_NS, "div");
-    placeholder.className = "child";
-    item.appendChild(placeholder);
+
+    let {inputholder,placeholder} = this.createInputContainer();
+    item.appendChild(inputholder);
 
     let children = parentContainer.children;
     sibling = sibling ? this._containers.get(sibling).elt : null;
     parentContainer.children.insertBefore(item, sibling ? sibling.nextSibling : children.firstChild);
 
     new InplaceEditor({
       element: placeholder,
       initial: initial,
@@ -284,25 +300,36 @@ var TreeView = Class({
    * @param resource
    *
    * @returns Promise
    *          Resolves once the prompt has been successful,
    *          Rejected if it is cancelled
    */
   promptEdit: function(initial, resource) {
     let deferred = promise.defer();
-    let placeholder = this._containers.get(resource).elt;
+    let item = this._containers.get(resource).elt;
+    let originalText = item.childNodes[0];
+
+    let {inputholder,placeholder} = this.createInputContainer();
+    item.insertBefore(inputholder, originalText);
+    item.removeChild(originalText);
 
     new InplaceEditor({
       element: placeholder,
       initial: initial,
       start: editor => {
         editor.input.select();
       },
       done: function(val, commit) {
+        if (val === initial) {
+          item.insertBefore(originalText, inputholder);
+        }
+
+        item.removeChild(inputholder);
+
         if (commit) {
           deferred.resolve(val);
         } else {
           deferred.reject(val);
         }
       },
     });
 
diff --git a/devtools/client/projecteditor/test/browser_projecteditor_rename_file.js b/devtools/client/projecteditor/test/browser_projecteditor_rename_file.js
--- a/devtools/client/projecteditor/test/browser_projecteditor_rename_file.js
+++ b/devtools/client/projecteditor/test/browser_projecteditor_rename_file.js
@@ -67,16 +67,16 @@ function renameWithContextMenu(projected
       }, (ex) => {
         ok (false, "Failed to rename file");
         defer.resolve();
       });
     });
 
     renameCommand.click();
     popup.hidePopup();
-    let input = container.elt.previousElementSibling;
+    let input = container.elt.childNodes[0].childNodes[1];
     input.value = resource.basename + newName;
     EventUtils.synthesizeKey("VK_RETURN", {}, projecteditor.window);
   });
 
   openContextMenuOn(container.label);
   return defer.promise;
 }
diff --git a/devtools/client/shared/inplace-editor.js b/devtools/client/shared/inplace-editor.js
--- a/devtools/client/shared/inplace-editor.js
+++ b/devtools/client/shared/inplace-editor.js
@@ -201,16 +201,17 @@ function InplaceEditor(options, event) {
                     ? true
                     : !!options.trimOutput;
   this.stopOnShiftTab = !!options.stopOnShiftTab;
   this.stopOnTab = !!options.stopOnTab;
   this.stopOnReturn = !!options.stopOnReturn;
   this.contentType = options.contentType || CONTENT_TYPES.PLAIN_TEXT;
   this.property = options.property;
   this.popup = options.popup;
+  this.keepTextStyles = options.popup;
 
   this._onBlur = this._onBlur.bind(this);
   this._onKeyPress = this._onKeyPress.bind(this);
   this._onInput = this._onInput.bind(this);
   this._onKeyup = this._onKeyup.bind(this);
 
   this._createInput();
   this._autosize();
@@ -808,16 +809,17 @@ InplaceEditor.prototype = {
 
     return null;
   },
 
   /**
    * Handle loss of focus by calling done if it hasn't been called yet.
    */
   _onBlur: function(event, doNotClear) {
+    return;
     if (event && this.popup && this.popup.isOpen &&
         this.popup.selectedIndex >= 0) {
       let label, preLabel;
 
       if (this._selectedIndex === undefined) {
         ({label, preLabel} =
           this.popup.getItemAtIndex(this.popup.selectedIndex));
       } else {
@@ -1215,20 +1217,22 @@ InplaceEditor.prototype = {
 };
 
 /**
  * Copy text-related styles from one element to another.
  */
 function copyTextStyles(from, to) {
   let win = from.ownerDocument.defaultView;
   let style = win.getComputedStyle(from);
+  to.style.fontFamily = "message-box";
   to.style.fontFamily = style.getPropertyCSSValue("font-family").cssText;
-  to.style.fontSize = style.getPropertyCSSValue("font-size").cssText;
-  to.style.fontWeight = style.getPropertyCSSValue("font-weight").cssText;
-  to.style.fontStyle = style.getPropertyCSSValue("font-style").cssText;
+  to.style.fontSize = style.fontFamily;
+  to.style.fontWeight = style.fontWeight;
+  to.style.fontStyle = style.fontStyle;
+  // to.style.font = style.font;
 }
 
 /**
  * Trigger a focus change similar to pressing tab/shift-tab.
  */
 function moveFocus(win, direction) {
   return focusManager.moveFocus(win, null, direction, 0);
 }
diff --git a/devtools/client/themes/projecteditor/projecteditor.css b/devtools/client/themes/projecteditor/projecteditor.css
--- a/devtools/client/themes/projecteditor/projecteditor.css
+++ b/devtools/client/themes/projecteditor/projecteditor.css
@@ -52,18 +52,20 @@
 
   /* Allows this to expand inside of parent xul element, while
      still supporting child flexbox elements, including ellipses. */
   -moz-box-flex: 1;
   display: block;
 }
 
 .sources-tree input {
-  margin: 2px;
+  margin: -1px;
   border: 1px solid gray;
+  /* Override copied text styles from inplace editor */
+  font: inherit !important;
 }
 
 #main-deck .sources-tree {
   background: rgb(225, 225, 225);
   min-width: 100px;
 }
 
 .entry {
