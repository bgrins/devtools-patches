# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  f87eeba88f1cf3f4d41095f7a58cb518a59f844c

diff --git a/browser/components/preferences/containers.js b/browser/components/preferences/containers.js
--- a/browser/components/preferences/containers.js
+++ b/browser/components/preferences/containers.js
@@ -57,17 +57,19 @@ let gContainersManager = {
   init(aParams) {
     this.userContextId = aParams.userContextId || null;
     this.identity = aParams.identity;
 
     const iconWrapper = document.getElementById("iconWrapper");
     iconWrapper.appendChild(this.createIconButtons());
 
     const colorWrapper = document.getElementById("colorWrapper");
-    colorWrapper.appendChild(this.createColorSwatches());
+    var rg = this.createColorSwatches();
+    console.log("Creating",rg);
+    colorWrapper.appendChild(rg);
 
     if (this.identity.name) {
       const name = document.getElementById("name");
       name.value = this.identity.name;
       this.checkForm();
     }
 
     // This is to prevent layout jank caused by the svgs and outlines rendering at different times
@@ -135,16 +137,17 @@ let gContainersManager = {
       document.l10n.setAttributes(colorSwatch, `containers-color-${color}`);
       let iconElement = document.createXULElement("hbox");
       iconElement.className = "userContext-icon";
       iconElement.setAttribute("data-identity-icon", "circle");
       iconElement.setAttribute("data-identity-color", color);
 
       colorSwatch.appendChild(iconElement);
       radiogroup.appendChild(colorSwatch);
+      colorSwatch = null;
     }
     return radiogroup;
   },
 
   onApplyChanges() {
     let icon = document.getElementById("icon").value;
     let color = document.getElementById("color").value;
     let name = document.getElementById("name").value;
diff --git a/toolkit/content/widgets/radio.js b/toolkit/content/widgets/radio.js
--- a/toolkit/content/widgets/radio.js
+++ b/toolkit/content/widgets/radio.js
@@ -6,16 +6,17 @@
 
 // This is loaded into all XUL windows. Wrap in a block to prevent
 // leaking to window scope.
 {
 
 class MozRadiogroup extends MozBaseControl {
   constructor() {
     super();
+    console.log("Constructing", this.id)
 
     this.addEventListener("mousedown", (event) => {
       if (this.disabled)
         event.preventDefault();
     });
 
     /**
      * keyboard navigation  Here's how keyboard navigation works in radio groups on Windows:
@@ -106,38 +107,59 @@ class MozRadiogroup extends MozBaseContr
       if (event.originalTarget != this) {
         return;
       }
       this.removeAttribute("focused");
       this.focusedItem = null;
     });
   }
 
-  connectedCallback() {
+
+  resetRadioChildren(node) {
+    if (this.id == "color") {
+      console.log("RESETTING RADIO CHILD", node, node.selected, node.control);
+      this.setSelectedIfNeeded();
+      // this._radioChildren = null;
+      // this.setSelectedIfNeeded();
+    }
+  }
+
+  setSelectedIfNeeded() {
     this._radioChildren = null;
 
     if (this.getAttribute("disabled") == "true")
       this.disabled = true;
 
     var children = this._getRadioChildren();
     var length = children.length;
+    if (this.id == "color") {
+      console.log("Connected callback", this.children, children, children.length);
+      console.trace();
+    }
+
     for (var i = 0; i < length; i++) {
       if (children[i].getAttribute("selected") == "true") {
         this.selectedIndex = i;
         return;
       }
     }
 
     var value = this.value;
     if (value)
       this.value = value;
     else
       this.selectedIndex = 0;
   }
 
+
+  connectedCallback() {
+    this.setSelectedIfNeeded();
+
+  }
+
   set value(val) {
     this.setAttribute("value", val);
     var children = this._getRadioChildren();
     for (var i = 0; i < children.length; i++) {
       if (String(children[i].value) == String(val)) {
         this.selectedItem = children[i];
         break;
       }
@@ -188,17 +210,21 @@ class MozRadiogroup extends MozBaseContr
         return i;
     }
     return -1;
   }
 
   set selectedItem(val) {
     var focused = this.getAttribute("focused") == "true";
     var alreadySelected = false;
+    if (this.id == "color") {
 
+      console.log("Setting selectedItem", focused, val);
+      console.trace();
+    }
     if (val) {
       alreadySelected = val.getAttribute("selected") == "true";
       val.setAttribute("focused", focused);
       val.setAttribute("selected", "true");
       this.setAttribute("value", val.value);
     } else {
       this.removeAttribute("value");
     }
@@ -306,20 +332,32 @@ class MozRadiogroup extends MozBaseContr
     }
   }
 
   _getRadioChildren() {
     if (this._radioChildren)
       return this._radioChildren;
 
     var radioChildren = [];
-
+    if (this.id == "color") {
+      console.log("_getRadioChildren called", this.hasChildNodes());
+    }
     if (this.hasChildNodes()) {
-      return this._radioChildren = [...this.querySelectorAll("radio")]
-        .filter(r => r.control == this);
+      radioChildren = [...this.querySelectorAll("radio")];
+        //.filter(r => r.control == this);
+      // if(this.id== "color") {
+      //   var rChildnre = [...this.querySelectorAll("radio")]
+      //   .filter(r => r.control == this);
+      //   console.log("rChildnre", rChildnre);
+      // }
+    if (this.id == "color") {
+      console.log("Resetting radiochildren", radioChildren.length, radioChildren.map(r=>r.control));
+    }
+      // console.log("Resetting radiochildren", radioChildren.length);
+      return this._radioChildren = radioChildren;
     }
 
     // We don't have child nodes.
     const XUL_NS = "http://www.mozilla.org/keymaster/" +
       "gatekeeper/there.is.only.xul";
 
     var elems = this.ownerDocument.getElementsByAttribute("group", this.id);
     for (var i = 0; i < elems.length; i++) {
diff --git a/toolkit/content/widgets/radio.xml b/toolkit/content/widgets/radio.xml
--- a/toolkit/content/widgets/radio.xml
+++ b/toolkit/content/widgets/radio.xml
@@ -20,17 +20,17 @@
     </content>
 
     <implementation implements="nsIDOMXULSelectControlItemElement">
       <constructor>
         <![CDATA[
           // Just clear out the parent's cached list of radio children
           var control = this.control;
           if (control)
-            control._radioChildren = null;
+            control.resetRadioChildren(this);
         ]]>
       </constructor>
       <destructor>
         <![CDATA[
           if (!this.control)
             return;
 
           var radioList = this.control._radioChildren;
@@ -53,16 +53,17 @@
           ]]>
         </getter>
       </property>
       <property name="radioGroup" readonly="true" onget="return this.control"/>
       <property name="control" readonly="true">
         <getter>
         <![CDATA[
           var radiogroup = this.closest("radiogroup");
+          //console.log("Checking for radiogroup", this, radiogroup);
           if (radiogroup) {
             return radiogroup;
           }
 
           var group = this.getAttribute("group");
           if (!group) {
             return null;
           }
