# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  d7306dc20870134fdec5af95c4a8bd39d755a5c7

diff --git a/devtools/server/actors/object.js b/devtools/server/actors/object.js
--- a/devtools/server/actors/object.js
+++ b/devtools/server/actors/object.js
@@ -55,32 +55,34 @@ const proto = {
    */
   initialize(obj, {
     createValueGrip: createValueGripHook,
     sources,
     createEnvironmentActor,
     getGripDepth,
     incrementGripDepth,
     decrementGripDepth,
-    getGlobalDebugObject
+    getGlobalDebugObject,
+    getGlobalDebugger,
   }, conn) {
     assert(!obj.optimizedOut,
           "Should not create object actors for optimized out values!");
     protocol.Actor.prototype.initialize.call(this, conn);
 
     this.conn = conn;
     this.obj = obj;
     this.hooks = {
       createValueGrip: createValueGripHook,
       sources,
       createEnvironmentActor,
       getGripDepth,
       incrementGripDepth,
       decrementGripDepth,
-      getGlobalDebugObject
+      getGlobalDebugObject,
+      getGlobalDebugger,
     };
   },
 
   rawValue: function() {
     return this.obj.unsafeDereference();
   },
 
   /**
diff --git a/devtools/server/actors/object/previewers.js b/devtools/server/actors/object/previewers.js
--- a/devtools/server/actors/object/previewers.js
+++ b/devtools/server/actors/object/previewers.js
@@ -73,18 +73,20 @@ const previewers = {
     }
 
     if (userDisplayName && typeof userDisplayName.value == "string" &&
         userDisplayName.value) {
       grip.userDisplayName = hooks.createValueGrip(userDisplayName.value);
     }
 
     const dbgGlobal = hooks.getGlobalDebugObject();
+    const dbg = hooks.getGlobalDebugger();
     if (dbgGlobal) {
-      const script = dbgGlobal.makeDebuggeeValue(obj.unsafeDereference()).script;
+      const script = dbg.adoptDebuggeeValue(obj).script;
+      console.log("SCRIPT", script);
       if (script) {
         grip.location = {
           url: script.url,
           line: script.startLine
         };
       }
     }
 
diff --git a/devtools/server/actors/webconsole.js b/devtools/server/actors/webconsole.js
--- a/devtools/server/actors/webconsole.js
+++ b/devtools/server/actors/webconsole.js
@@ -480,17 +480,18 @@ WebConsoleActor.prototype =
     const actor = new ObjectActor(object, {
       getGripDepth: () => this._gripDepth,
       incrementGripDepth: () => this._gripDepth++,
       decrementGripDepth: () => this._gripDepth--,
       createValueGrip: v => this.createValueGrip(v),
       sources: () => DevToolsUtils.reportException("WebConsoleActor",
         Error("sources not yet implemented")),
       createEnvironmentActor: (env) => this.createEnvironmentActor(env),
-      getGlobalDebugObject: () => this.globalDebugObject
+      getGlobalDebugObject: () => this.globalDebugObject,
+      getGlobalDebugger: () => this.dbg,
     }, this.conn);
     pool.addActor(actor);
     return actor.form();
   },
 
   /**
    * Create a grip for the given string.
    *
diff --git a/toolkit/content/widgets/general.js b/toolkit/content/widgets/general.js
--- a/toolkit/content/widgets/general.js
+++ b/toolkit/content/widgets/general.js
@@ -2,16 +2,20 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 {
 
 class MozDeck extends MozXULElement {
+  constructor() {
+    super();
+  }
+
   set selectedIndex(val) {
     if (this.selectedIndex == val) return val;
     this.setAttribute("selectedIndex", val);
     var event = document.createEvent("Events");
     event.initEvent("select", true, true);
     this.dispatchEvent(event);
     return val;
   }
