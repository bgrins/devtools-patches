exporting patch:
# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1397665199 18000
#      Wed Apr 16 11:19:59 2014 -0500
# Node ID b0d8aa3891f1fe8f1f73b1f4f514589fdb957a65
# Parent  ba0fc8bc4aa0261660509e4e8f202d4698989873
Auto open devtools

diff --git a/devtools/client/devtools-clhandler.js b/devtools/client/devtools-clhandler.js
--- a/devtools/client/devtools-clhandler.js
+++ b/devtools/client/devtools-clhandler.js
@@ -12,22 +12,26 @@ Cu.import("resource://gre/modules/XPCOMU
 XPCOMUtils.defineLazyModuleGetter(this, "Services", "resource://gre/modules/Services.jsm");
 
 function devtoolsCommandlineHandler() {
 }
 devtoolsCommandlineHandler.prototype = {
   handle: function(cmdLine) {
     let consoleFlag = cmdLine.handleFlag("jsconsole", false);
     let debuggerFlag = cmdLine.handleFlag("jsdebugger", false);
+    let devtoolsFlag = cmdLine.handleFlagWithParam("devtools", false)
     if (consoleFlag) {
       this.handleConsoleFlag(cmdLine);
     }
     if (debuggerFlag) {
       this.handleDebuggerFlag(cmdLine);
     }
+    if (devtoolsFlag) {
+      this.handleDevtoolsFlag(devtoolsFlag);
+    }
   },
 
   handleConsoleFlag: function(cmdLine) {
     let window = Services.wm.getMostRecentWindow("devtools:webconsole");
     if (!window) {
       let devtools = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools;
       // Load the browser devtools main module as the loader's main module.
       Cu.import("resource:///modules/devtools/gDevTools.jsm");
@@ -38,16 +42,33 @@ devtoolsCommandlineHandler.prototype = {
       window.focus(); // the Browser Console was already open
     }
 
     if (cmdLine.state == Ci.nsICommandLine.STATE_REMOTE_AUTO) {
       cmdLine.preventDefault = true;
     }
   },
 
+  handleDevtoolsFlag: function(devtoolsFlag) {
+    /// XXX: this adds a second toolbox when a new window is opened and a new toolbox is
+    // opened with web developer -> inspector, for instance.
+    // It also opens with every new window, which may or may not be desired
+    Services.obs.addObserver(onDocumentCreated, "content-document-global-created", false);
+    function onDocumentCreated(){
+      let gDevTools = Cu.import("resource:///modules/devtools/gDevtools.jsm", {}).gDevTools;
+      let devtools = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools;
+      let console = Cu.import("resource://gre/modules/devtools/Console.jsm", {}).console;
+
+      let window = Services.wm.getMostRecentWindow("navigator:browser");
+      let target = devtools.TargetFactory.forTab(window.gBrowser.selectedTab);
+      let toolbox = gDevTools.getToolbox(target);
+      gDevTools.showToolbox(target, devtoolsFlag || "webconsole");
+    };
+  },
+
   handleDebuggerFlag: function(cmdLine) {
     let remoteDebuggingEnabled = false;
     try {
       remoteDebuggingEnabled = kDebuggerPrefs.every((pref) => Services.prefs.getBoolPref(pref));
     } catch (ex) {
       Cu.reportError(ex);
       return;
     }
@@ -63,15 +84,16 @@ devtoolsCommandlineHandler.prototype = {
     }
 
     if (cmdLine.state == Ci.nsICommandLine.STATE_REMOTE_AUTO) {
       cmdLine.preventDefault = true;
     }
   },
 
   helpInfo : "  -jsconsole         Open the Browser Console.\n" +
-             "  -jsdebugger        Open the Browser Toolbox.\n",
+             "  -jsdebugger        Open the Browser Toolbox.\n" +
+             "  -devtools          Open DevTools to specified panel.\n",
 
   classID: Components.ID("{9e9a9283-0ce9-4e4a-8f1c-ba129a032c32}"),
   QueryInterface: XPCOMUtils.generateQI([Ci.nsICommandLineHandler]),
 };
 
 this.NSGetFactory = XPCOMUtils.generateNSGetFactory([devtoolsCommandlineHandler]);
