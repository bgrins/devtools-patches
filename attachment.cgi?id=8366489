# HG changeset patch
# Parent 83288c5ef741710656da91a4fd26f723d73ec8db
# User Kay Plößer <mail@kay.is>
Bug 961524 - Remove inline script / style in browser/devtools/debugger/debugger.xul;r=bgrins

diff --git a/browser/devtools/debugger/debugger-view.js b/browser/devtools/debugger/debugger-view.js
--- a/browser/devtools/debugger/debugger-view.js
+++ b/browser/devtools/debugger/debugger-view.js
@@ -60,16 +60,18 @@ let DebuggerView = {
     this.Sources.initialize();
     this.VariableBubble.initialize();
     this.Tracer.initialize();
     this.WatchExpressions.initialize();
     this.EventListeners.initialize();
     this.GlobalSearch.initialize();
     this._initializeVariablesView();
     this._initializeEditor(deferred.resolve);
+    this._initializeCommands();
+    this._initializeMenus();
 
     document.title = L10N.getStr("DebuggerWindowTitle");
 
     return deferred.promise;
   },
 
   /**
    * Destroys the debugger view.
@@ -80,16 +82,18 @@ let DebuggerView = {
   destroy: function() {
     if (this._shutdown) {
       return this._shutdown;
     }
 
     let deferred = promise.defer();
     this._shutdown = deferred.promise;
 
+    this._destroyMenus();
+    this._destroyCommands();
     this.Toolbar.destroy();
     this.Options.destroy();
     this.Filtering.destroy();
     this.FilteredSources.destroy();
     this.FilteredFunctions.destroy();
     this.StackFrames.destroy();
     this.StackFramesClassicList.destroy();
     this.Sources.destroy();
@@ -100,16 +104,113 @@ let DebuggerView = {
     this.GlobalSearch.destroy();
     this._destroyPanes();
     this._destroyEditor(deferred.resolve);
 
     return deferred.promise;
   },
 
   /**
+   * Initializes the listeners for all menus
+   */
+  _initializeMenus: function() {
+    let options = this.Options;
+    this._menuMapping = {
+      sourceEditorContextMenu: {
+        popupshowing: goUpdateGlobalEditMenuItems
+      },
+      debuggerPrefsContextMenu: {
+        popupshowing: options._onPopupShowing.bind(options),
+        popuphiding: options._onPopupHiding.bind(options),
+        popuphidden: options._onPopupHidden.bind(options)
+      }
+    };
+
+    for (let id in this._menuMapping) {
+      let listeners = this._menuMapping[id];
+      let menu = document.getElementById(id);
+      for (let event in listeners) {
+        menu.addEventListener(event, listeners[event]);
+      }
+    }
+  },
+
+  /**
+   * Removes the listeners for all menus
+   */
+  _destroyMenus: function() {
+    for (let id in this._menuMapping) {
+      let listeners = this._menuMapping[id];
+      let menu = document.getElementById(id);
+      for (let event in listeners) {
+        menu.removeEventListener(event, listeners[event]);
+      }
+    }
+  },
+
+  /**
+   * Initializes the listeners for all commands
+   */
+  _initializeCommands: function() {
+    let sources = this.Sources;
+    let toolbar = this.Toolbar;
+    let filtering = this.Filtering;
+    let watchExp = this.WatchExpressions;
+    let options = this.Options;
+    let tracer = this.Tracer;
+
+    this._commandMapping = {
+      blackBoxCommand: sources.toggleBlackBoxing.bind(sources),
+      unBlackBoxButton: sources._onStopBlackBoxing.bind(sources),
+      prettyPrintCommand: sources.togglePrettyPrint.bind(sources),
+      toggleBreakpointsCommand: sources.toggleBreakpoints.bind(sources),
+      resumeCommand: toolbar._onResumePressed.bind(toolbar),
+      stepOverCommand: toolbar._onStepOverPressed.bind(toolbar),
+      stepInCommand: toolbar._onStepInPressed.bind(toolbar),
+      stepOutCommand: toolbar._onStepOutPressed.bind(toolbar),
+      fileSearchCommand: filtering._doFileSearch.bind(filtering),
+      globalSearchCommand: filtering._doGlobalSearch.bind(filtering),
+      functionSearchCommand: filtering._doFunctionSearch.bind(filtering),
+      tokenSearchCommand: filtering._doTokenSearch.bind(filtering),
+      lineSearchCommand: filtering._doLineSearch.bind(filtering),
+      variableSearchCommand: filtering._doVariableSearch.bind(filtering),
+      variablesFocusCommand: filtering._doVariablesFocus.bind(filtering),
+      addBreakpointCommand: sources._onCmdAddBreakpoint.bind(sources),
+      addConditionalBreakpointCommand: sources._onCmdAddConditionalBreakpoint.bind(sources),
+      addWatchExpressionCommand: watchExp._onCmdAddExpression.bind(watchExp),
+      removeAllWatchExpressionsCommand: watchExp._onCmdRemoveAllExpressions.bind(watchExp),
+      toggleAutoPrettyPrint: options._toggleAutoPrettyPrint.bind(options),
+      togglePauseOnExceptions: options._togglePauseOnExceptions.bind(options),
+      toggleIgnoreCaughtExceptions: options._toggleIgnoreCaughtExceptions.bind(options),
+      toggleShowPanesOnStartup: options._toggleShowPanesOnStartup.bind(options),
+      toggleShowOnlyEnum: options._toggleShowVariablesOnlyEnum.bind(options),
+      toggleShowVariablesFilterBox: options._toggleShowVariablesFilterBox.bind(options),
+      toggleShowOriginalSource: options._toggleShowOriginalSource.bind(options),
+      toggleTracing: tracer._onToggleTracing.bind(tracer),
+      startTracing: tracer._onStartTracing.bind(tracer),
+      clearTraces: tracer._onClear.bind(tracer)
+    };
+
+    for (let id in this._commandMapping) {
+      let command = document.getElementById(id);
+      command.addEventListener("command", this._commandMapping[id]);
+    }
+  },
+
+  /**
+   * Removes listeners from all commands
+   */
+  _destroyCommands: function() {
+    for (let id in this._commandMapping) {
+      let command = document.getElementById(id);
+      command.removeEventListener("command", this._commandMapping[id]);
+    }
+  },
+
+  /**
    * Initializes the UI for all the displayed panes.
    */
   _initializePanes: function() {
     dumpn("Initializing the DebuggerView panes");
 
     this._body = document.getElementById("body");
     this._editorDeck = document.getElementById("editor-deck");
     this._sourcesPane = document.getElementById("sources-pane");
@@ -666,17 +767,19 @@ let DebuggerView = {
   _editorSource: {},
   _loadingText: "",
   _body: null,
   _editorDeck: null,
   _sourcesPane: null,
   _instrumentsPane: null,
   _instrumentsPaneToggleButton: null,
   _collapsePaneString: "",
-  _expandPaneString: ""
+  _expandPaneString: "",
+  _commandMapping: null,
+  _menuMapping: null
 };
 
 /**
  * A custom items container, used for displaying views like the
  * FilteredSources, FilteredFunctions etc., inheriting the generic WidgetMethods.
  */
 function ResultsPanelContainer() {
 }
diff --git a/browser/devtools/debugger/debugger.xul b/browser/devtools/debugger/debugger.xul
--- a/browser/devtools/debugger/debugger.xul
+++ b/browser/devtools/debugger/debugger.xul
@@ -27,83 +27,49 @@
   <script type="text/javascript" src="debugger-controller.js"/>
   <script type="text/javascript" src="debugger-view.js"/>
   <script type="text/javascript" src="debugger-toolbar.js"/>
   <script type="text/javascript" src="debugger-panes.js"/>
 
   <commandset id="editMenuCommands"/>
 
   <commandset id="debuggerCommands">
-    <command id="blackBoxCommand"
-             oncommand="DebuggerView.Sources.toggleBlackBoxing()"/>
-    <command id="unBlackBoxButton"
-             oncommand="DebuggerView.Sources._onStopBlackBoxing()"/>
-    <command id="prettyPrintCommand"
-             oncommand="DebuggerView.Sources.togglePrettyPrint()"/>
-    <command id="toggleBreakpointsCommand"
-             oncommand="DebuggerView.Sources.toggleBreakpoints()"/>
-    <command id="nextSourceCommand"
-             oncommand="DebuggerView.Sources.selectNextItem()"/>
-    <command id="prevSourceCommand"
-             oncommand="DebuggerView.Sources.selectPrevItem()"/>
-    <command id="resumeCommand"
-             oncommand="DebuggerView.Toolbar._onResumePressed()"/>
-    <command id="stepOverCommand"
-             oncommand="DebuggerView.Toolbar._onStepOverPressed()"/>
-    <command id="stepInCommand"
-             oncommand="DebuggerView.Toolbar._onStepInPressed()"/>
-    <command id="stepOutCommand"
-             oncommand="DebuggerView.Toolbar._onStepOutPressed()"/>
-    <command id="fileSearchCommand"
-             oncommand="DebuggerView.Filtering._doFileSearch()"/>
-    <command id="globalSearchCommand"
-             oncommand="DebuggerView.Filtering._doGlobalSearch()"/>
-    <command id="functionSearchCommand"
-             oncommand="DebuggerView.Filtering._doFunctionSearch()"/>
-    <command id="tokenSearchCommand"
-             oncommand="DebuggerView.Filtering._doTokenSearch()"/>
-    <command id="lineSearchCommand"
-             oncommand="DebuggerView.Filtering._doLineSearch()"/>
-    <command id="variableSearchCommand"
-             oncommand="DebuggerView.Filtering._doVariableSearch()"/>
-    <command id="variablesFocusCommand"
-             oncommand="DebuggerView.Filtering._doVariablesFocus()"/>
-    <command id="addBreakpointCommand"
-             oncommand="DebuggerView.Sources._onCmdAddBreakpoint()"/>
-    <command id="addConditionalBreakpointCommand"
-             oncommand="DebuggerView.Sources._onCmdAddConditionalBreakpoint()"/>
-    <command id="addWatchExpressionCommand"
-             oncommand="DebuggerView.WatchExpressions._onCmdAddExpression()"/>
-    <command id="removeAllWatchExpressionsCommand"
-             oncommand="DebuggerView.WatchExpressions._onCmdRemoveAllExpressions()"/>
-    <command id="toggleAutoPrettyPrint"
-             oncommand="DebuggerView.Options._toggleAutoPrettyPrint()"/>
-    <command id="togglePauseOnExceptions"
-             oncommand="DebuggerView.Options._togglePauseOnExceptions()"/>
-    <command id="toggleIgnoreCaughtExceptions"
-             oncommand="DebuggerView.Options._toggleIgnoreCaughtExceptions()"/>
-    <command id="toggleShowPanesOnStartup"
-             oncommand="DebuggerView.Options._toggleShowPanesOnStartup()"/>
-    <command id="toggleShowOnlyEnum"
-             oncommand="DebuggerView.Options._toggleShowVariablesOnlyEnum()"/>
-    <command id="toggleShowVariablesFilterBox"
-             oncommand="DebuggerView.Options._toggleShowVariablesFilterBox()"/>
-    <command id="toggleShowOriginalSource"
-             oncommand="DebuggerView.Options._toggleShowOriginalSource()"/>
-    <command id="toggleTracing"
-             oncommand="DebuggerView.Tracer._onToggleTracing()"/>
-    <command id="startTracing"
-             oncommand="DebuggerView.Tracer._onStartTracing()"/>
-    <command id="clearTraces"
-             oncommand="DebuggerView.Tracer._onClear()"/>
+    <command id="blackBoxCommand"/>
+    <command id="unBlackBoxButton"/>
+    <command id="prettyPrintCommand"/>
+    <command id="toggleBreakpointsCommand"/>
+    <command id="resumeCommand"/>
+    <command id="stepOverCommand"/>
+    <command id="stepInCommand"/>
+    <command id="stepOutCommand"/>
+    <command id="fileSearchCommand" oncommand=";" />
+    <command id="globalSearchCommand"/>
+    <command id="functionSearchCommand"/>
+    <command id="tokenSearchCommand"/>
+    <command id="lineSearchCommand"/>
+    <command id="variableSearchCommand"/>
+    <command id="variablesFocusCommand"/>
+    <command id="addBreakpointCommand"/>
+    <command id="addConditionalBreakpointCommand"/>
+    <command id="addWatchExpressionCommand"/>
+    <command id="removeAllWatchExpressionsCommand"/>
+    <command id="toggleAutoPrettyPrint"/>
+    <command id="togglePauseOnExceptions"/>
+    <command id="toggleIgnoreCaughtExceptions"/>
+    <command id="toggleShowPanesOnStartup"/>
+    <command id="toggleShowOnlyEnum"/>
+    <command id="toggleShowVariablesFilterBox"/>
+    <command id="toggleShowOriginalSource"/>
+    <command id="toggleTracing"/>
+    <command id="startTracing"/>
+    <command id="clearTraces"/>
   </commandset>
 
   <popupset id="debuggerPopupset">
-    <menupopup id="sourceEditorContextMenu"
-               onpopupshowing="goUpdateGlobalEditMenuItems()">
+    <menupopup id="sourceEditorContextMenu">
       <menuitem id="se-dbg-cMenu-addBreakpoint"
                 label="&debuggerUI.seMenuBreak;"
                 key="addBreakpointKey"
                 command="addBreakpointCommand"/>
       <menuitem id="se-dbg-cMenu-addConditionalBreakpoint"
                 label="&debuggerUI.seMenuCondBreak;"
                 key="addConditionalBreakpointKey"
                 command="addConditionalBreakpointCommand"/>
@@ -165,20 +131,17 @@
                 command="addWatchExpressionCommand"/>
       <menuitem id="removeAll-watch-expression"
                 label="&debuggerUI.removeAllWatch;"
                 accesskey="&debuggerUI.removeAllWatch.accesskey;"
                 key="removeAllWatchExpressionsKey"
                 command="removeAllWatchExpressionsCommand"/>
     </menupopup>
     <menupopup id="debuggerPrefsContextMenu"
-               position="before_end"
-               onpopupshowing="DebuggerView.Options._onPopupShowing()"
-               onpopuphiding="DebuggerView.Options._onPopupHiding()"
-               onpopuphidden="DebuggerView.Options._onPopupHidden()">
+               position="before_end">
       <menuitem id="auto-pretty-print"
                 type="checkbox"
                 label="&debuggerUI.autoPrettyPrint;"
                 accesskey="&debuggerUI.autoPrettyPrint.accesskey;"
                 command="toggleAutoPrettyPrint"/>
       <menuitem id="pause-on-exceptions"
                 type="checkbox"
                 label="&debuggerUI.pauseExceptions;"
@@ -208,24 +171,16 @@
                 type="checkbox"
                 label="&debuggerUI.showOriginalSource;"
                 accesskey="&debuggerUI.showOriginalSource.accesskey;"
                 command="toggleShowOriginalSource"/>
     </menupopup>
   </popupset>
 
   <keyset id="debuggerKeys">
-    <key id="nextSourceKey"
-         keycode="VK_DOWN"
-         modifiers="accel alt"
-         command="nextSourceCommand"/>
-    <key id="prevSourceKey"
-         keycode="VK_UP"
-         modifiers="accel alt"
-         command="prevSourceCommand"/>
     <key id="resumeKey"
          keycode="&debuggerUI.stepping.resume1;"
          command="resumeCommand"/>
     <key id="resumeKey2"
          keycode="&debuggerUI.stepping.resume2;"
          modifiers="accel"
          command="resumeCommand"/>
     <key id="stepOverKey"
