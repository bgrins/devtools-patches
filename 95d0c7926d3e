
# HG changeset patch
# User Jarda Snajdr <jsnajdr@gmail.com>
# Date 1471439439 -7200
# Node ID 95d0c7926d3ee45589abf09eb3ba27bbd8deceaf
# Parent  fe895421dfbe1f1f8f1fc6a39bb20774423a6d74
Bug 1294355 - Error when opening link from stack trace in console r?bgrins

MozReview-Commit-ID: D1mtM7d6GkB


diff --git a/devtools/client/shared/components/frame.js b/devtools/client/shared/components/frame.js
--- a/devtools/client/shared/components/frame.js
+++ b/devtools/client/shared/components/frame.js
@@ -49,18 +49,46 @@
     };
   },
 
-  componentWillMount() {
-    const sourceMapService = this.props.sourceMapService;
+  getInitialState() {
+    return {};
+  },
+
+  /**
+   * Ask for sourcemapped version of the frame location (async)
+   */
+  componentDidMount() {
+    const { sourceMapService } = this.props;
     if (sourceMapService) {
-      const source = this.getSource();
+      const source = this.getSource(this.props.frame);
       sourceMapService.subscribe(source, this.onSourceUpdated);
     }
   },
 
+  /**
+   * Update the sourcemapping subscription when the frame location changes
+   */
+  componentWillReceiveProps(newProps) {
+    const { sourceMapService } = this.props;
+    if (sourceMapService) {
+      const oldSource = this.getSource(this.props.frame);
+      const newSource = this.getSource(newProps.frame);
+
+      // Update sourcemap subscriptions if the frame property has changed
+      if (["url", "line", "column"].some(prop => oldSource[prop] !== newSource[prop])) {
+        this.replaceState({});
+        sourceMapService.unsubscribe(oldSource, this.onSourceUpdated);
+        sourceMapService.subscribe(newSource, this.onSourceUpdated);
+      }
+    }
+  },
+
+  /**
+   * Unsubscribe from the sourcemapping updates
+   */
   componentWillUnmount() {
-    const sourceMapService = this.props.sourceMapService;
+    const { sourceMapService } = this.props;
     if (sourceMapService) {
-      const source = this.getSource();
+      const source = this.getSource(this.props.frame);
       sourceMapService.unsubscribe(source, this.onSourceUpdated);
     }
   },
@@ -71,11 +99,8 @@
    * @param location
    */
   onSourceUpdated(event, location, resolvedLocation) {
-    const frame = this.getFrame(resolvedLocation);
-    this.setState({
-      frame,
-      isSourceMapped: true,
-    });
+    const sourceMappedFrame = this.getFrame(resolvedLocation);
+    this.setState({ sourceMappedFrame });
   },
 
   /**
@@ -85,13 +110,8 @@
    * @returns {{url: *, line: *, column: *}}
    */
   getSource(frame) {
-    frame = frame || this.props.frame;
-    const { source, line, column } = frame;
-    return {
-      url: source,
-      line,
-      column,
-    };
+    const { source: url, line, column } = frame;
+    return { url, line, column };
   },
 
   /**
@@ -100,18 +120,13 @@
    * @param source
    * @returns {{source: *, line: *, column: *, functionDisplayName: *}}
    */
-  getFrame(source) {
-    const { url, line, column } = source;
-    return {
-      source: url,
-      line,
-      column,
-      functionDisplayName: this.props.frame.functionDisplayName,
-    };
+  getFrame(src) {
+    const { url: source, line, column } = src;
+    const { functionDisplayName } = this.props.frame;
+    return { source, line, column, functionDisplayName };
   },
 
   render() {
-    let frame, isSourceMapped;
     let {
       onClick,
       showFunctionName,
@@ -121,12 +136,8 @@
       showFullSourceUrl
     } = this.props;
 
-    if (this.state && this.state.isSourceMapped) {
-      frame = this.state.frame;
-      isSourceMapped = this.state.isSourceMapped;
-    } else {
-      frame = this.props.frame;
-    }
+    let frame = this.state.sourceMappedFrame || this.props.frame;
+    let isSourceMapped = !!this.state.sourceMappedFrame;
 
     let source = frame.source ? String(frame.source) : "";
     let line = frame.line != void 0 ? Number(frame.line) : null;
diff --git a/devtools/client/shared/components/stack-trace.js b/devtools/client/shared/components/stack-trace.js
--- a/devtools/client/shared/components/stack-trace.js
+++ b/devtools/client/shared/components/stack-trace.js
@@ -50,7 +50,7 @@
       frames.push(Frame({
         frame: {
           functionDisplayName: s.functionName,
-          source: s.filename,
+          source: s.filename.split(" -> ").pop(),
           line: s.lineNumber,
           column: s.columnNumber,
         },
diff --git a/devtools/client/webconsole/console-output.js b/devtools/client/webconsole/console-output.js
--- a/devtools/client/webconsole/console-output.js
+++ b/devtools/client/webconsole/console-output.js
@@ -3551,13 +3551,6 @@
    */
   stacktrace: null,
 
-  onViewSourceInDebugger(frame) {
-    this.output.openLocationInDebugger({
-      url: frame.source,
-      line: frame.line
-    });
-  },
-
   render() {
     if (this.element) {
       return this;
@@ -3569,7 +3562,7 @@
     if (this.stacktrace) {
       this.output.owner.ReactDOM.render(this.output.owner.StackTraceView({
         stacktrace: this.stacktrace,
-        onViewSourceInDebugger: frame => this.onViewSourceInDebugger(frame)
+        onViewSourceInDebugger: frame => this.output.openLocationInDebugger(frame)
       }), result);
     }
 
diff --git a/devtools/client/webconsole/webconsole.js b/devtools/client/webconsole/webconsole.js
--- a/devtools/client/webconsole/webconsole.js
+++ b/devtools/client/webconsole/webconsole.js
@@ -2525,21 +2525,15 @@
    * Creates the anchor that displays the textual location of an incoming
    * message.
    *
-   * @param {Object} aLocation
-   *        An object containing url, line and column number of the message
-   *        source (destructured).
+   * @param {Object} location
+   *        An object containing url, line and column number of the message source.
    * @return {Element}
    *         The new anchor element, ready to be added to the message node.
    */
-  createLocationNode: function ({url, line, column}) {
+  createLocationNode: function (location) {
     let locationNode = this.document.createElementNS(XHTML_NS, "div");
     locationNode.className = "message-location devtools-monospace";
 
-    if (!url) {
-      url = "";
-    }
-
-    let fullURL = url.split(" -> ").pop();
     // Make the location clickable.
     let onClick = ({ url, line }) => {
       let category = locationNode.closest(".message").category;
@@ -2578,12 +2572,11 @@
 
     const toolbox = gDevTools.getToolbox(this.owner.target);
 
+    let { url, line, column } = location;
+    let source = url ? url.split(" -> ").pop() : "";
+
     this.ReactDOM.render(this.FrameView({
-      frame: {
-        source: fullURL,
-        line,
-        column
-      },
+      frame: { source, line, column },
       showEmptyPathAsHost: true,
       onClick,
       sourceMapService: toolbox ? toolbox._sourceMapService : null,

