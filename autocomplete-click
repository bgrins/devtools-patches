# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  6ef3ec3cb5bb9ee9c484e3f371ffa961afd40c7b
Bug 964939 - Should allow click to autocomplete in CSS autocompletion

diff --git a/browser/devtools/sourceeditor/autocomplete.js b/browser/devtools/sourceeditor/autocomplete.js
--- a/browser/devtools/sourceeditor/autocomplete.js
+++ b/browser/devtools/sourceeditor/autocomplete.js
@@ -99,21 +99,37 @@ function initializeAutoCompletion(ctx, o
     });
 
     // TODO: Integrate tern autocompletion with this autocomplete API.
     return;
   } else if (ed.config.mode == Editor.modes.css) {
     completer = new cssAutoCompleter({walker: options.walker});
   }
 
+  function insertSelectedPopupItem() {
+    if (popup && popup.isOpen && popup.selectedItem) {
+      if (!autocompleteMap.get(ed).suggestionInsertedOnce) {
+        autocompleteMap.get(ed).insertingSuggestion = true;
+        let {label, preLabel, text} = popup.selectedItem;
+        let cur = ed.getCursor();
+        ed.replaceText(text.slice(preLabel.length), cur, cur);
+      }
+      popup.hidePopup();
+      // This event is used in tests
+      ed.emit("popup-hidden");
+      return true;
+    }
+  }
+
   let popup = new AutocompletePopup(win.parent.document, {
     position: "after_start",
     fixedWidth: true,
     theme: "auto",
-    autoSelect: true
+    autoSelect: true,
+    onClick: insertSelectedPopupItem
   });
 
   let cycle = (reverse) => {
     if (popup && popup.isOpen) {
       cycleSuggestions(ed, reverse == true);
       return;
     }
 
@@ -121,30 +137,18 @@ function initializeAutoCompletion(ctx, o
   };
 
   let keyMap = {
     "Tab": cycle,
     "Down": cycle,
     "Shift-Tab": cycle.bind(null, true),
     "Up": cycle.bind(null, true),
     "Enter": () => {
-      if (popup && popup.isOpen) {
-        if (!autocompleteMap.get(ed).suggestionInsertedOnce) {
-          autocompleteMap.get(ed).insertingSuggestion = true;
-          let {label, preLabel, text} = popup.getItemAtIndex(0);
-          let cur = ed.getCursor();
-          ed.replaceText(text.slice(preLabel.length), cur, cur);
-        }
-        popup.hidePopup();
-        // This event is used in tests
-        ed.emit("popup-hidden");
-        return;
-      }
-
-      return CodeMirror.Pass;
+      let wasHandled = insertSelectedPopupItem();
+      return wasHandled ? true : CodeMirror.Pass;
     }
   };
   let autoCompleteCallback = autoComplete.bind(null, ctx);
   let keypressCallback = onEditorKeypress.bind(null, ctx);
   keyMap[autocompleteKey] = autoCompleteCallback;
   cm.addKeyMap(keyMap);
 
   cm.on("keydown", keypressCallback);
