# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1554231329 25200
#      Tue Apr 02 11:55:29 2019 -0700
# Node ID 053d5b9e02638ac1c6662755712fcbe560df4e33
# Parent  a1376da6230e106228830e76e128a793673e06ab
Bug 1540123 - Use is/isnot/ok instead of Assert.equal/Assert.notEqual/Assert.ok in browser_clientAuth_ui.js

Differential Revision: https://phabricator.services.mozilla.com/D25828

diff --git a/security/manager/ssl/tests/mochitest/browser/browser_clientAuth_ui.js b/security/manager/ssl/tests/mochitest/browser/browser_clientAuth_ui.js
--- a/security/manager/ssl/tests/mochitest/browser/browser_clientAuth_ui.js
+++ b/security/manager/ssl/tests/mochitest/browser/browser_clientAuth_ui.js
@@ -51,60 +51,49 @@ function openClientAuthDialog(cert) {
  *
  * @param {window} win The cert chooser window.
  * @param {String} notBefore
  *        The notBeforeLocalTime attribute of mochitest.client.
  * @param {String} notAfter
  *        The notAfterLocalTime attribute of mochitest.client.
  */
 function checkDialogContents(win, notBefore, notAfter) {
-  Assert.equal(win.document.getElementById("hostname").textContent,
-               `${TEST_HOSTNAME}:${TEST_PORT}`,
-               "Actual and expected hostname and port should be equal");
-  Assert.equal(win.document.getElementById("organization").textContent,
-               `Organization: “${TEST_ORG}”`,
-               "Actual and expected organization should be equal");
-  Assert.equal(win.document.getElementById("issuer").textContent,
-               `Issued Under: “${TEST_ISSUER_ORG}”`,
-               "Actual and expected issuer organization should be equal");
+  is(win.document.getElementById("hostname").textContent, `${TEST_HOSTNAME}:${TEST_PORT}`,
+     "Actual and expected hostname and port should be equal");
+  is(win.document.getElementById("organization").textContent, `Organization: “${TEST_ORG}”`,
+     "Actual and expected organization should be equal");
+  is(win.document.getElementById("issuer").textContent, `Issued Under: “${TEST_ISSUER_ORG}”`,
+     "Actual and expected issuer organization should be equal");
 
-  Assert.equal(win.document.getElementById("nicknames").label,
-               "Mochitest client [03]",
-               "Actual and expected selected cert nickname and serial should " +
-               "be equal");
-  Assert.equal(win.document.getElementById("nicknames").itemCount, 1, "correct number of items");
+  is(win.document.getElementById("nicknames").label, "Mochitest client [03]",
+     "Actual and expected selected cert nickname and serial should be equal");
+  is(win.document.getElementById("nicknames").itemCount, 1, "correct number of items");
 
   let [subject, serialNum, validity, issuer, tokenName] =
     win.document.getElementById("details").value.split("\n");
-  Assert.equal(subject, "Issued to: CN=Mochitest client",
-               "Actual and expected subject should be equal");
-  Assert.equal(serialNum, "Serial number: 03",
-               "Actual and expected serial number should be equal");
-  Assert.equal(validity, `Valid from ${notBefore} to ${notAfter}`,
-               "Actual and expected validity should be equal");
-  Assert.equal(issuer,
-               "Issued by: OU=Profile Guided Optimization,O=Mozilla Testing," +
-               "CN=Temporary Certificate Authority",
-               "Actual and expected issuer should be equal");
-  Assert.equal(tokenName, "Stored on: Software Security Device",
-               "Actual and expected token name should be equal");
+  is(subject, "Issued to: CN=Mochitest client", "Actual and expected subject should be equal");
+  is(serialNum, "Serial number: 03", "Actual and expected serial number should be equal");
+  is(validity, `Valid from ${notBefore} to ${notAfter}`, "Actual and expected validity should be equal");
+  is(issuer, "Issued by: OU=Profile Guided Optimization,O=Mozilla Testing,CN=Temporary Certificate Authority",
+     "Actual and expected issuer should be equal");
+  is(tokenName, "Stored on: Software Security Device", "Actual and expected token name should be equal");
 }
 
 function findCertByCommonName(commonName) {
   for (let cert of certDB.getCerts().getEnumerator()) {
     if (cert.commonName == commonName) {
       return cert;
     }
   }
   return null;
 }
 
 add_task(async function setup() {
   cert = findCertByCommonName("Mochitest client");
-  Assert.notEqual(cert, null, "Should be able to find the test client cert");
+  isnot(cert, null, "Should be able to find the test client cert");
 });
 
 // Test that the contents of the dialog correspond to the details of the
 // provided cert.
 add_task(async function testContents() {
   let [win] = await openClientAuthDialog(cert);
   checkDialogContents(win, cert.validity.notBeforeLocalTime,
                       cert.validity.notAfterLocalTime);
@@ -114,31 +103,27 @@ add_task(async function testContents() {
 // Test that the right values are returned when the dialog is accepted.
 add_task(async function testAcceptDialogReturnValues() {
   let [win, retVals] = await openClientAuthDialog(cert);
   win.document.getElementById("rememberBox").checked = true;
   info("Accepting dialog");
   win.document.getElementById("certAuthAsk").acceptDialog();
   await BrowserTestUtils.windowClosed(win);
 
-  Assert.ok(retVals.get("certChosen"),
-            "Return value should signal user chose a certificate");
-  Assert.equal(retVals.get("selectedIndex"), 0,
-               "0 should be returned as the selected index");
-  Assert.ok(retVals.get("rememberSelection"),
-            "Return value should signal 'Remember this decision' checkbox was" +
-            "checked");
+  ok(retVals.get("certChosen"), "Return value should signal user chose a certificate");
+  is(retVals.get("selectedIndex"), 0, "0 should be returned as the selected index");
+  ok(retVals.get("rememberSelection"),
+     "Return value should signal 'Remember this decision' checkbox was checked");
 });
 
 // Test that the right values are returned when the dialog is canceled.
 add_task(async function testCancelDialogReturnValues() {
   let [win, retVals] = await openClientAuthDialog(cert);
   win.document.getElementById("rememberBox").checked = false;
   info("Canceling dialog");
   win.document.getElementById("certAuthAsk").cancelDialog();
   await BrowserTestUtils.windowClosed(win);
 
-  Assert.ok(!retVals.get("certChosen"),
-            "Return value should signal user did not choose a certificate");
-  Assert.ok(!retVals.get("rememberSelection"),
-            "Return value should signal 'Remember this decision' checkbox was" +
-            "unchecked");
+  ok(!retVals.get("certChosen"),
+     "Return value should signal user did not choose a certificate");
+  ok(!retVals.get("rememberSelection"),
+     "Return value should signal 'Remember this decision' checkbox was unchecked");
 });
