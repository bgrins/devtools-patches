# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1550015771 28800
#      Tue Feb 12 15:56:11 2019 -0800
# Node ID 2fff5342ceca577dbb600089fbf80e71b0f9a9e6
# Parent  81ed4642f71fca7e4bae572ef1c9d58affd4cd7b
Bug 1519502 - Convert menu bindings to custom elements

Differential Revision: https://phabricator.services.mozilla.com/D19593

diff --git a/toolkit/content/widgets/menu.js b/toolkit/content/widgets/menu.js
--- a/toolkit/content/widgets/menu.js
+++ b/toolkit/content/widgets/menu.js
@@ -158,9 +158,110 @@ class MozMenuCaption extends MozMenuBase
     for (let el of this.querySelectorAll("[inherits]")) {
       this._inheritedAttributeMap.set(el, el.getAttribute("inherits").split(","));
     }
     this._updateAttributes();
   }
 }
 
 customElements.define("menucaption", MozMenuCaption);
+
+class MozMenu extends MozMenuBase {
+  static get observedAttributes() {
+    return ["label", "accesskey", "crop", "acceltext", "_moz-menuactive", "disabled"];
+  }
+
+  _updateAttributes() {
+    if (!this._inheritedAttributeMap) {
+      return;
+    }
+
+    for (let [ el, attrs ] of this._inheritedAttributeMap.entries()) {
+      for (let attr of attrs) {
+        this.inheritAttribute(el, attr);
+      }
+    }
+  }
+
+  attributeChangedCallback(name, oldValue, newValue) {
+    if (oldValue === newValue) {
+      return;
+    }
+
+    this._updateAttributes();
+  }
+
+  get isInMenubar() {
+    return this.closest("menubar");
+  }
+
+  get isIconic() {
+    return this.classList.contains("menu-iconic");
+  }
+
+  connectedCallback() {
+    if (this.delayConnectedCallback()) {
+      return;
+    }
+
+    if (this.connectedOnce) {
+      return;
+    }
+
+    this.connectedOnce = true;
+    let {isInMenubar, isIconic} = this;
+    let markup = null;
+    if (isInMenubar && isIconic) {
+      markup = `
+        <image class="menubar-left" inherits="src=image"/>
+        <label class="menubar-text" inherits="value=label,accesskey,crop" crop="right"/>
+      `;
+    }
+    if (isInMenubar && !isIconic) {
+      markup = `
+        <label class="menubar-text" inherits="value=label,accesskey,crop" crop="right"/>
+      `;
+    }
+    if (!isInMenubar && isIconic) {
+      markup = `
+        <hbox class="menu-iconic-left" align="center" pack="center">
+          <image class="menu-iconic-icon" inherits="src=image"/>
+        </hbox>
+        <label class="menu-iconic-text" flex="1" inherits="value=label,accesskey,crop,highlightable" crop="right"/>
+        <label class="menu-iconic-highlightable-text" inherits="xbl:text=label,crop,accesskey,highlightable" crop="right"/>
+        <hbox class="menu-accel-container" anonid="accel">
+          <label class="menu-iconic-accel" inherits="value=acceltext"/>
+        </hbox>
+        <hbox align="center" class="menu-right" inherits="_moz-menuactive,disabled">
+          <image/>
+        </hbox>
+      `;
+    }
+    if (!isInMenubar && !isIconic) {
+      markup = `
+        <label class="menu-text" inherits="value=label,accesskey,crop" crop="right"/>
+        <hbox class="menu-accel-container" anonid="accel">
+          <label class="menu-accel" inherits="value=acceltext"/>
+        </hbox>
+        <hbox align="center" class="menu-right" inherits="_moz-menuactive,disabled">
+          <image/>
+        </hbox>
+      `;
+    }
+
+    this.prepend(MozXULElement.parseXULToFragment(markup));
+
+    // this.menuText = this.querySelector(".menu-text");
+    // this.menuAccelContainer = this.querySelector(".menu-accel-container");
+    // this.menuAccel = this.querySelector(".menu-accel");
+    // this.menuRight = this.querySelector(".menu-right");
+
+    // XXX: Use this or explicit setup?
+    this._inheritedAttributeMap = new Map();
+    for (let el of this.querySelectorAll("[inherits]")) {
+      this._inheritedAttributeMap.set(el, el.getAttribute("inherits").split(","));
+    }
+    this._updateAttributes();
+  }
 }
+
+customElements.define("menu", MozMenu);
+}
diff --git a/toolkit/content/widgets/menu.xml b/toolkit/content/widgets/menu.xml
--- a/toolkit/content/widgets/menu.xml
+++ b/toolkit/content/widgets/menu.xml
@@ -39,141 +39,25 @@
             }
           }
           return null;
         </getter>
       </property>
     </implementation>
   </binding>
 
-  <binding id="menu-base"
-           extends="chrome://global/content/bindings/menu.xml#menuitem-base">
-
-    <implementation implements="nsIDOMXULContainerElement">
-      <property name="open" onget="return this.hasAttribute('open');">
-        <setter><![CDATA[
-          this.openMenu(val);
-          return val;
-        ]]></setter>
-      </property>
-
-      <!-- nsIDOMXULContainerElement interface -->
-      <method name="appendItem">
-        <parameter name="aLabel"/>
-        <parameter name="aValue"/>
-        <body>
-          var menupopup = this.menupopup;
-          if (!menupopup) {
-            menupopup = this.ownerDocument.createXULElement("menupopup");
-            this.appendChild(menupopup);
-          }
-
-          var menuitem = this.ownerDocument.createXULElement("menuitem");
-          menuitem.setAttribute("label", aLabel);
-          menuitem.setAttribute("value", aValue);
-
-          return menupopup.appendChild(menuitem);
-        </body>
-      </method>
-
-      <property name="itemCount" readonly="true">
-        <getter>
-          var menupopup = this.menupopup;
-          return menupopup ? menupopup.children.length : 0;
-        </getter>
-      </property>
-
-      <method name="getIndexOfItem">
-        <parameter name="aItem"/>
-        <body>
-        <![CDATA[
-          var menupopup = this.menupopup;
-          if (menupopup) {
-            var items = menupopup.children;
-            var length = items.length;
-            for (var index = 0; index < length; ++index) {
-              if (items[index] == aItem)
-                return index;
-            }
-          }
-          return -1;
-        ]]>
-        </body>
-      </method>
-
-      <method name="getItemAtIndex">
-        <parameter name="aIndex"/>
-        <body>
-        <![CDATA[
-          var menupopup = this.menupopup;
-          if (!menupopup || aIndex < 0 || aIndex >= menupopup.children.length)
-            return null;
-
-          return menupopup.children[aIndex];
-        ]]>
-        </body>
-      </method>
-
-      <property name="menupopup" readonly="true">
-        <getter>
-        <![CDATA[
-          const XUL_NS =
-            "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
-
-          for (var child = this.firstElementChild; child; child = child.nextElementSibling) {
-            if (child.namespaceURI == XUL_NS && child.localName == "menupopup")
-              return child;
-          }
-          return null;
-        ]]>
-        </getter>
-      </property>
-    </implementation>
-  </binding>
-
-  <binding id="menu"
-           extends="chrome://global/content/bindings/menu.xml#menu-base">
-    <content>
-      <xul:label class="menu-text" xbl:inherits="value=label,accesskey,crop" crop="right"/>
-      <xul:hbox class="menu-accel-container" anonid="accel">
-        <xul:label class="menu-accel" xbl:inherits="value=acceltext"/>
-      </xul:hbox>
-      <xul:hbox align="center" class="menu-right" xbl:inherits="_moz-menuactive,disabled">
-        <xul:image/>
-      </xul:hbox>
-      <children includes="menupopup"/>
-    </content>
-  </binding>
-
   <binding id="menuitem" extends="chrome://global/content/bindings/menu.xml#menuitem-base">
     <content>
       <xul:label class="menu-text" xbl:inherits="value=label,accesskey,crop,highlightable" crop="right"/>
       <xul:hbox class="menu-accel-container" anonid="accel">
         <xul:label class="menu-accel" xbl:inherits="value=acceltext"/>
       </xul:hbox>
     </content>
   </binding>
 
-  <binding id="menu-menubar"
-           extends="chrome://global/content/bindings/menu.xml#menu-base">
-    <content>
-      <xul:label class="menubar-text" xbl:inherits="value=label,accesskey,crop" crop="right"/>
-      <children includes="menupopup"/>
-    </content>
-  </binding>
-
-  <binding id="menu-menubar-iconic"
-           extends="chrome://global/content/bindings/menu.xml#menu-base">
-    <content>
-      <xul:image class="menubar-left" xbl:inherits="src=image"/>
-      <xul:label class="menubar-text" xbl:inherits="value=label,accesskey,crop" crop="right"/>
-      <children includes="menupopup"/>
-    </content>
-  </binding>
-
   <binding id="menuitem-iconic" extends="chrome://global/content/bindings/menu.xml#menuitem">
     <content>
       <xul:hbox class="menu-iconic-left" align="center" pack="center"
                 xbl:inherits="selected,_moz-menuactive,disabled,checked">
         <xul:image class="menu-iconic-icon" xbl:inherits="src=image,triggeringprincipal=iconloadingprincipal,validate"/>
       </xul:hbox>
       <xul:label class="menu-iconic-text" flex="1" xbl:inherits="value=label,accesskey,crop,highlightable" crop="right"/>
       <xul:label class="menu-iconic-highlightable-text" xbl:inherits="xbl:text=label,crop,accesskey,highlightable" crop="right"/>
@@ -189,26 +73,9 @@
                 xbl:inherits="selected,disabled,checked">
         <xul:image class="menu-iconic-icon" xbl:inherits="src=image,validate"/>
       </xul:hbox>
       <xul:label class="menu-iconic-text" flex="1" xbl:inherits="value=label,accesskey,crop,highlightable" crop="right"/>
       <xul:label class="menu-iconic-highlightable-text" xbl:inherits="xbl:text=label,crop,accesskey,highlightable" crop="right"/>
     </content>
   </binding>
 
-  <binding id="menu-iconic"
-           extends="chrome://global/content/bindings/menu.xml#menu-base">
-    <content>
-      <xul:hbox class="menu-iconic-left" align="center" pack="center">
-        <xul:image class="menu-iconic-icon" xbl:inherits="src=image"/>
-      </xul:hbox>
-      <xul:label class="menu-iconic-text" flex="1" xbl:inherits="value=label,accesskey,crop,highlightable" crop="right"/>
-      <xul:label class="menu-iconic-highlightable-text" xbl:inherits="xbl:text=label,crop,accesskey,highlightable" crop="right"/>
-      <xul:hbox class="menu-accel-container" anonid="accel">
-        <xul:label class="menu-iconic-accel" xbl:inherits="value=acceltext"/>
-      </xul:hbox>
-      <xul:hbox align="center" class="menu-right" xbl:inherits="_moz-menuactive,disabled">
-        <xul:image/>
-      </xul:hbox>
-      <children includes="menupopup|template"/>
-    </content>
-  </binding>
 </bindings>
diff --git a/toolkit/content/xul.css b/toolkit/content/xul.css
--- a/toolkit/content/xul.css
+++ b/toolkit/content/xul.css
@@ -251,32 +251,16 @@ toolbar[type="menubar"] {
 %endif
 
 toolbarspring {
   -moz-box-flex: 1000;
 }
 
 /********* menu ***********/
 
-menubar > menu {
-  -moz-binding: url("chrome://global/content/bindings/menu.xml#menu-menubar");
-}
-
-menubar > menu.menu-iconic {
-  -moz-binding: url("chrome://global/content/bindings/menu.xml#menu-menubar-iconic");
-}
-
-menu {
-  -moz-binding: url("chrome://global/content/bindings/menu.xml#menu");
-}
-
-menu.menu-iconic {
-  -moz-binding: url("chrome://global/content/bindings/menu.xml#menu-iconic");
-}
-
 menubar > menu:empty {
   visibility: collapse;
 }
 
 /********* menuitem ***********/
 
 menuitem {
   -moz-binding: url("chrome://global/content/bindings/menu.xml#menuitem");
