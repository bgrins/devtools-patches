# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1550015771 28800
#      Tue Feb 12 15:56:11 2019 -0800
# Node ID c9842dd8861d747535e0d6095579e1b23b5d2167
# Parent  4d15e90af575a68815975bac8c2b602f78d76ee8
Bug 1519502 - Convert menu bindings to custom elements

Differential Revision: https://phabricator.services.mozilla.com/D19593

diff --git a/toolkit/content/customElements.js b/toolkit/content/customElements.js
--- a/toolkit/content/customElements.js
+++ b/toolkit/content/customElements.js
@@ -423,17 +423,17 @@ const BaseControlMixin = Base => {
       if (val) {
         this.setAttribute("tabindex", val);
       } else {
         this.removeAttribute("tabindex");
       }
     }
   }
 
-  Base.implementCustomInterface(BaseControl,
+  MozXULElement.implementCustomInterface(BaseControl,
                                 [Ci.nsIDOMXULControlElement]);
   return BaseControl;
 };
 MozElements.BaseControl = BaseControlMixin(MozXULElement);
 
 const BaseTextMixin = Base => class extends BaseControlMixin(Base) {
   set label(val) {
     this.setAttribute("label", val);
@@ -481,16 +481,17 @@ const BaseTextMixin = Base => class exte
     }
     return val;
   }
 
   get accessKey() {
     return this.labelElement ? this.labelElement.accessKey : this.getAttribute("accesskey");
   }
 };
+MozElements.BaseTextMixin = BaseTextMixin;
 MozElements.BaseText = BaseTextMixin(MozXULElement);
 
 // Attach the base class to the window so other scripts can use it:
 window.BaseControlMixin = BaseControlMixin;
 window.MozElementMixin = MozElementMixin;
 window.MozXULElement = MozXULElement;
 window.MozElements = MozElements;
 
diff --git a/toolkit/content/widgets/menu.js b/toolkit/content/widgets/menu.js
--- a/toolkit/content/widgets/menu.js
+++ b/toolkit/content/widgets/menu.js
@@ -2,120 +2,124 @@
   * License, v. 2.0. If a copy of the MPL was not distributed with this
   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 // This is loaded into all XUL windows. Wrap in a block to prevent
 // leaking to window scope.
 {
-class MozMenuItemBase extends MozElements.BaseText {
-  // nsIDOMXULSelectControlItemElement
-  set value(val) {
-    this.setAttribute("value", val);
-  }
-  get value() {
-    return this.getAttribute("value");
-  }
+const MozMenuItemBaseMixin = Base => {
+  class MozMenuItemBase extends MozElements.BaseTextMixin(Base) {
+    // nsIDOMXULSelectControlItemElement
+    set value(val) {
+      this.setAttribute("value", val);
+    }
+    get value() {
+      return this.getAttribute("value");
+    }
 
-  // nsIDOMXULSelectControlItemElement
-  get selected() {
-    return this.getAttribute("selected") == "true";
-  }
+    // nsIDOMXULSelectControlItemElement
+    get selected() {
+      return this.getAttribute("selected") == "true";
+    }
 
-  // nsIDOMXULSelectControlItemElement
-  get control() {
-    var parent = this.parentNode;
-    // Return the parent if it is a menu or menulist.
-    if (parent && parent.parentNode instanceof XULMenuElement) {
-      return parent.parentNode;
+    // nsIDOMXULSelectControlItemElement
+    get control() {
+      var parent = this.parentNode;
+      // Return the parent if it is a menu or menulist.
+      if (parent && parent.parentNode instanceof XULMenuElement) {
+        return parent.parentNode;
+      }
+      return null;
     }
-    return null;
-  }
 
-  // nsIDOMXULContainerItemElement
-  get parentContainer() {
-    for (var parent = this.parentNode; parent; parent = parent.parentNode) {
-      if (parent instanceof XULMenuElement) {
-        return parent;
+    // nsIDOMXULContainerItemElement
+    get parentContainer() {
+      for (var parent = this.parentNode; parent; parent = parent.parentNode) {
+        if (parent instanceof XULMenuElement) {
+          return parent;
+        }
       }
+      return null;
     }
-    return null;
   }
-}
-
-MozXULElement.implementCustomInterface(MozMenuItemBase, [Ci.nsIDOMXULSelectControlItemElement, Ci.nsIDOMXULContainerItemElement]);
-
-class MozMenuBase extends MozMenuItemBase {
-  set open(val) {
-    this.openMenu(val);
-    return val;
-  }
-
-  get open() {
-    return this.hasAttribute("open");
-  }
+  MozXULElement.implementCustomInterface(MozMenuItemBase, [Ci.nsIDOMXULSelectControlItemElement, Ci.nsIDOMXULContainerItemElement]);
+  return MozMenuItemBase;
+};
 
-  get itemCount() {
-    var menupopup = this.menupopup;
-    return menupopup ? menupopup.children.length : 0;
-  }
-
-  get menupopup() {
-    const XUL_NS =
-      "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
+const MozMenuBaseMixin = Base => {
+  class MozMenuBase extends MozMenuItemBaseMixin(Base) {
+    set open(val) {
+      this.openMenu(val);
+      return val;
+    }
 
-    for (var child = this.firstElementChild; child; child = child.nextElementSibling) {
-      if (child.namespaceURI == XUL_NS && child.localName == "menupopup")
-        return child;
-    }
-    return null;
-  }
-
-  appendItem(aLabel, aValue) {
-    var menupopup = this.menupopup;
-    if (!menupopup) {
-      menupopup = this.ownerDocument.createXULElement("menupopup");
-      this.appendChild(menupopup);
+    get open() {
+      return this.hasAttribute("open");
     }
 
-    var menuitem = this.ownerDocument.createXULElement("menuitem");
-    menuitem.setAttribute("label", aLabel);
-    menuitem.setAttribute("value", aValue);
+    get itemCount() {
+      var menupopup = this.menupopup;
+      return menupopup ? menupopup.children.length : 0;
+    }
+
+    get menupopup() {
+      const XUL_NS =
+        "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
 
-    return menupopup.appendChild(menuitem);
-  }
+      for (var child = this.firstElementChild; child; child = child.nextElementSibling) {
+        if (child.namespaceURI == XUL_NS && child.localName == "menupopup")
+          return child;
+      }
+      return null;
+    }
+
+    appendItem(aLabel, aValue) {
+      var menupopup = this.menupopup;
+      if (!menupopup) {
+        menupopup = this.ownerDocument.createXULElement("menupopup");
+        this.appendChild(menupopup);
+      }
+
+      var menuitem = this.ownerDocument.createXULElement("menuitem");
+      menuitem.setAttribute("label", aLabel);
+      menuitem.setAttribute("value", aValue);
 
-  getIndexOfItem(aItem) {
-    var menupopup = this.menupopup;
-    if (menupopup) {
-      var items = menupopup.children;
-      var length = items.length;
-      for (var index = 0; index < length; ++index) {
-        if (items[index] == aItem)
-          return index;
+      return menupopup.appendChild(menuitem);
+    }
+
+    getIndexOfItem(aItem) {
+      var menupopup = this.menupopup;
+      if (menupopup) {
+        var items = menupopup.children;
+        var length = items.length;
+        for (var index = 0; index < length; ++index) {
+          if (items[index] == aItem)
+            return index;
+        }
       }
+      return -1;
     }
-    return -1;
+
+    getItemAtIndex(aIndex) {
+      var menupopup = this.menupopup;
+      if (!menupopup || aIndex < 0 || aIndex >= menupopup.children.length)
+        return null;
+
+      return menupopup.children[aIndex];
+    }
   }
-
-  getItemAtIndex(aIndex) {
-    var menupopup = this.menupopup;
-    if (!menupopup || aIndex < 0 || aIndex >= menupopup.children.length)
-      return null;
-
-    return menupopup.children[aIndex];
-  }
-}
-
-MozXULElement.implementCustomInterface(MozMenuBase, [Ci.nsIDOMXULContainerElement]);
+  MozXULElement.implementCustomInterface(MozMenuBase, [Ci.nsIDOMXULContainerElement]);
+  return MozMenuBase;
+};
 
 // The <menucaption> element is used for rendering <html:optgroup> inside of <html:select>,
 // See SelectParentHelper.jsm.
-class MozMenuCaption extends MozMenuBase {
+class MozMenuCaption extends MozMenuBaseMixin(MozXULElement) {
   static get inheritedAttributes() {
     return {
       ".menu-iconic-left": "selected,disabled,checked",
       ".menu-iconic-icon": "src=image,validate,src",
       ".menu-iconic-text": "value=label,crop,highlightable",
       ".menu-iconic-highlightable-text": "text=label,crop,highlightable",
     };
   }
@@ -149,9 +153,90 @@ class MozMenuCaption extends MozMenuBase
       <label class="menu-iconic-text" flex="1" crop="right" role="none"></label>
       <label class="menu-iconic-highlightable-text" crop="right" role="none"></label>
     `));
     this.initializeAttributeInheritance();
   }
 }
 
 customElements.define("menucaption", MozMenuCaption);
+
+class MozMenu extends MozMenuBaseMixin(MozElementMixin(XULMenuElement)) {
+  static get inheritedAttributes() {
+    return {
+      ".menubar-text": "value=label,accesskey,crop",
+      ".menu-iconic-text": "value=label,accesskey,crop,highlightable",
+      ".menu-text": "value=label,accesskey,crop,highlightable",
+      ".menu-iconic-highlightable-text": "text=label,crop,accesskey,highlightable",
+      ".menubar-left": "src=image",
+      ".menu-iconic-icon": "src=image",
+      ".menu-iconic-accel": "value=acceltext",
+      ".menu-right": "_moz-menuactive,disabled",
+      ".menu-accel": "value=acceltext",
+    };
+  }
+
+  get isInMenubar() {
+    return this.closest("menubar");
+  }
+
+  get isIconic() {
+    return this.classList.contains("menu-iconic");
+  }
+
+  connectedCallback() {
+    if (this.delayConnectedCallback()) {
+      return;
+    }
+
+    if (this.connectedOnce) {
+      return;
+    }
+
+    this.connectedOnce = true;
+
+    let {isInMenubar, isIconic} = this;
+    let markup = null;
+    if (isInMenubar && isIconic) {
+      markup = `
+        <image class="menubar-left"/>
+        <label class="menubar-text" crop="right"/>
+      `;
+    }
+    if (isInMenubar && !isIconic) {
+      markup = `
+        <label class="menubar-text" crop="right"/>
+      `;
+    }
+    if (!isInMenubar && isIconic) {
+      markup = `
+        <hbox class="menu-iconic-left" align="center" pack="center">
+          <image class="menu-iconic-icon"/>
+        </hbox>
+        <label class="menu-iconic-text" flex="1" crop="right"/>
+        <label class="menu-iconic-highlightable-text" crop="right"/>
+        <hbox class="menu-accel-container" anonid="accel">
+          <label class="menu-iconic-accel"/>
+        </hbox>
+        <hbox align="center" class="menu-right">
+          <image/>
+        </hbox>
+      `;
+    }
+    if (!isInMenubar && !isIconic) {
+      markup = `
+        <label class="menu-text" crop="right"/>
+        <hbox class="menu-accel-container" anonid="accel">
+          <label class="menu-accel"/>
+        </hbox>
+        <hbox align="center" class="menu-right">
+          <image/>
+        </hbox>
+      `;
+    }
+
+    this.prepend(MozXULElement.parseXULToFragment(markup));
+    this.initializeAttributeInheritance();
+  }
 }
+
+customElements.define("menu", MozMenu);
+}
diff --git a/toolkit/content/widgets/menu.xml b/toolkit/content/widgets/menu.xml
--- a/toolkit/content/widgets/menu.xml
+++ b/toolkit/content/widgets/menu.xml
@@ -39,141 +39,25 @@
             }
           }
           return null;
         </getter>
       </property>
     </implementation>
   </binding>
 
-  <binding id="menu-base"
-           extends="chrome://global/content/bindings/menu.xml#menuitem-base">
-
-    <implementation implements="nsIDOMXULContainerElement">
-      <property name="open" onget="return this.hasAttribute('open');">
-        <setter><![CDATA[
-          this.openMenu(val);
-          return val;
-        ]]></setter>
-      </property>
-
-      <!-- nsIDOMXULContainerElement interface -->
-      <method name="appendItem">
-        <parameter name="aLabel"/>
-        <parameter name="aValue"/>
-        <body>
-          var menupopup = this.menupopup;
-          if (!menupopup) {
-            menupopup = this.ownerDocument.createXULElement("menupopup");
-            this.appendChild(menupopup);
-          }
-
-          var menuitem = this.ownerDocument.createXULElement("menuitem");
-          menuitem.setAttribute("label", aLabel);
-          menuitem.setAttribute("value", aValue);
-
-          return menupopup.appendChild(menuitem);
-        </body>
-      </method>
-
-      <property name="itemCount" readonly="true">
-        <getter>
-          var menupopup = this.menupopup;
-          return menupopup ? menupopup.children.length : 0;
-        </getter>
-      </property>
-
-      <method name="getIndexOfItem">
-        <parameter name="aItem"/>
-        <body>
-        <![CDATA[
-          var menupopup = this.menupopup;
-          if (menupopup) {
-            var items = menupopup.children;
-            var length = items.length;
-            for (var index = 0; index < length; ++index) {
-              if (items[index] == aItem)
-                return index;
-            }
-          }
-          return -1;
-        ]]>
-        </body>
-      </method>
-
-      <method name="getItemAtIndex">
-        <parameter name="aIndex"/>
-        <body>
-        <![CDATA[
-          var menupopup = this.menupopup;
-          if (!menupopup || aIndex < 0 || aIndex >= menupopup.children.length)
-            return null;
-
-          return menupopup.children[aIndex];
-        ]]>
-        </body>
-      </method>
-
-      <property name="menupopup" readonly="true">
-        <getter>
-        <![CDATA[
-          const XUL_NS =
-            "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
-
-          for (var child = this.firstElementChild; child; child = child.nextElementSibling) {
-            if (child.namespaceURI == XUL_NS && child.localName == "menupopup")
-              return child;
-          }
-          return null;
-        ]]>
-        </getter>
-      </property>
-    </implementation>
-  </binding>
-
-  <binding id="menu"
-           extends="chrome://global/content/bindings/menu.xml#menu-base">
-    <content>
-      <xul:label class="menu-text" xbl:inherits="value=label,accesskey,crop" crop="right"/>
-      <xul:hbox class="menu-accel-container" anonid="accel">
-        <xul:label class="menu-accel" xbl:inherits="value=acceltext"/>
-      </xul:hbox>
-      <xul:hbox align="center" class="menu-right" xbl:inherits="_moz-menuactive,disabled">
-        <xul:image/>
-      </xul:hbox>
-      <children includes="menupopup"/>
-    </content>
-  </binding>
-
   <binding id="menuitem" extends="chrome://global/content/bindings/menu.xml#menuitem-base">
     <content>
       <xul:label class="menu-text" xbl:inherits="value=label,accesskey,crop,highlightable" crop="right"/>
       <xul:hbox class="menu-accel-container" anonid="accel">
         <xul:label class="menu-accel" xbl:inherits="value=acceltext"/>
       </xul:hbox>
     </content>
   </binding>
 
-  <binding id="menu-menubar"
-           extends="chrome://global/content/bindings/menu.xml#menu-base">
-    <content>
-      <xul:label class="menubar-text" xbl:inherits="value=label,accesskey,crop" crop="right"/>
-      <children includes="menupopup"/>
-    </content>
-  </binding>
-
-  <binding id="menu-menubar-iconic"
-           extends="chrome://global/content/bindings/menu.xml#menu-base">
-    <content>
-      <xul:image class="menubar-left" xbl:inherits="src=image"/>
-      <xul:label class="menubar-text" xbl:inherits="value=label,accesskey,crop" crop="right"/>
-      <children includes="menupopup"/>
-    </content>
-  </binding>
-
   <binding id="menuitem-iconic" extends="chrome://global/content/bindings/menu.xml#menuitem">
     <content>
       <xul:hbox class="menu-iconic-left" align="center" pack="center"
                 xbl:inherits="selected,_moz-menuactive,disabled,checked">
         <xul:image class="menu-iconic-icon" xbl:inherits="src=image,triggeringprincipal=iconloadingprincipal,validate"/>
       </xul:hbox>
       <xul:label class="menu-iconic-text" flex="1" xbl:inherits="value=label,accesskey,crop,highlightable" crop="right"/>
       <xul:label class="menu-iconic-highlightable-text" xbl:inherits="xbl:text=label,crop,accesskey,highlightable" crop="right"/>
@@ -189,26 +73,9 @@
                 xbl:inherits="selected,disabled,checked">
         <xul:image class="menu-iconic-icon" xbl:inherits="src=image,validate"/>
       </xul:hbox>
       <xul:label class="menu-iconic-text" flex="1" xbl:inherits="value=label,accesskey,crop,highlightable" crop="right"/>
       <xul:label class="menu-iconic-highlightable-text" xbl:inherits="xbl:text=label,crop,accesskey,highlightable" crop="right"/>
     </content>
   </binding>
 
-  <binding id="menu-iconic"
-           extends="chrome://global/content/bindings/menu.xml#menu-base">
-    <content>
-      <xul:hbox class="menu-iconic-left" align="center" pack="center">
-        <xul:image class="menu-iconic-icon" xbl:inherits="src=image"/>
-      </xul:hbox>
-      <xul:label class="menu-iconic-text" flex="1" xbl:inherits="value=label,accesskey,crop,highlightable" crop="right"/>
-      <xul:label class="menu-iconic-highlightable-text" xbl:inherits="xbl:text=label,crop,accesskey,highlightable" crop="right"/>
-      <xul:hbox class="menu-accel-container" anonid="accel">
-        <xul:label class="menu-iconic-accel" xbl:inherits="value=acceltext"/>
-      </xul:hbox>
-      <xul:hbox align="center" class="menu-right" xbl:inherits="_moz-menuactive,disabled">
-        <xul:image/>
-      </xul:hbox>
-      <children includes="menupopup|template"/>
-    </content>
-  </binding>
 </bindings>
diff --git a/toolkit/content/xul.css b/toolkit/content/xul.css
--- a/toolkit/content/xul.css
+++ b/toolkit/content/xul.css
@@ -245,32 +245,16 @@ toolbar[type="menubar"] {
 %endif
 
 toolbarspring {
   -moz-box-flex: 1000;
 }
 
 /********* menu ***********/
 
-menubar > menu {
-  -moz-binding: url("chrome://global/content/bindings/menu.xml#menu-menubar");
-}
-
-menubar > menu.menu-iconic {
-  -moz-binding: url("chrome://global/content/bindings/menu.xml#menu-menubar-iconic");
-}
-
-menu {
-  -moz-binding: url("chrome://global/content/bindings/menu.xml#menu");
-}
-
-menu.menu-iconic {
-  -moz-binding: url("chrome://global/content/bindings/menu.xml#menu-iconic");
-}
-
 menubar > menu:empty {
   visibility: collapse;
 }
 
 /********* menuitem ***********/
 
 menuitem {
   -moz-binding: url("chrome://global/content/bindings/menu.xml#menuitem");
