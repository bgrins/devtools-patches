# vim: se ft=diff :
# HG changeset patch
# User Jarda Snajdr <jsnajdr@gmail.com>
# Date 2016-06-24 09:10
# Parent  e774866bf8a12537e451ccc4b38ffbf0610b5d49
Bug 1281732 - Part 1: React components for displaying stack traces and frames r=linclark
* * *
Bug 1281732 - Part 8: Fix webconsole tests that inspect the stack frames r=bgrins
* * *
Bug 1281732 - Part 2: Fix tests that look at the Frame component markup r=linclark
* * *
Bug 1281732 - Part 3: Remove duplicate styles for stack frames in Performance tool r=bgrins
* * *
Bug 1281732 - Part 4: Add stack trace tab to HTTP console log message r=Honza
* * *
Bug 1281732 - Part 5: Style cleanup for HTTP console log messages r=Honza
* * *
Bug 1281732 - Part 6: Use StackTrace React component in webconsole, cleanup message-location r=bgrins
* * *
Bug 1281732 - Part 7: Clean up and simplify markup of webconsole messages r=bgrins

diff --git a/devtools/client/locales/en-US/netmonitor.properties b/devtools/client/locales/en-US/netmonitor.properties
--- a/devtools/client/locales/en-US/netmonitor.properties
+++ b/devtools/client/locales/en-US/netmonitor.properties
@@ -315,8 +315,13 @@ netRequest.post=POST
 
 # LOCALIZATION NOTE (netRequest.cookies): A label used for Cookies tab
 # This tab displays request and response cookies.
 netRequest.cookies=Cookies
 
 # LOCALIZATION NOTE (netRequest.params): A label used for URL parameters tab
 # This tab displays data parsed from URL query string.
 netRequest.params=Params
+
+# LOCALIZATION NOTE (netRequest.callstack): A label used for request stacktrace tab
+# This tab displays the request's JavaScript stack trace. Should be identical to
+# debuggerUI.tabs.callstack
+netRequest.callstack=Call Stack
diff --git a/devtools/client/performance/components/test/head.js b/devtools/client/performance/components/test/head.js
--- a/devtools/client/performance/components/test/head.js
+++ b/devtools/client/performance/components/test/head.js
@@ -123,17 +123,17 @@ OPTS_DATA_GENERAL.forEach(site => {
 });
 
 
 function checkOptimizationHeader(name, file, line) {
   is($(".optimization-header .header-function-name").textContent, name,
     "correct optimization header function name");
   is($(".optimization-header .frame-link-filename").textContent, file,
     "correct optimization header file name");
-  is($(".optimization-header .frame-link-line").textContent, line,
+  is($(".optimization-header .frame-link-line").textContent, `:${line}`,
     "correct optimization header line");
 }
 
 function checkOptimizationTree(rowData) {
   let rows = $$(".tree .tree-node");
 
   for (let i = 0; i < rowData.length; i++) {
     let row = rows[i];
diff --git a/devtools/client/shared/components/frame.js b/devtools/client/shared/components/frame.js
--- a/devtools/client/shared/components/frame.js
+++ b/devtools/client/shared/components/frame.js
@@ -4,48 +4,64 @@
 
 "use strict";
 
 const { DOM: dom, createClass, PropTypes } = require("devtools/client/shared/vendor/react");
 const { getSourceNames, parseURL, isScratchpadScheme } = require("devtools/client/shared/source-utils");
 const { LocalizationHelper } = require("devtools/client/shared/l10n");
 
 const l10n = new LocalizationHelper("chrome://devtools/locale/components.properties");
+const webl10n = new LocalizationHelper("chrome://devtools/locale/webconsole.properties");
 
 module.exports = createClass({
   displayName: "Frame",
 
   propTypes: {
     // SavedFrame, or an object containing all the required properties.
     frame: PropTypes.shape({
       functionDisplayName: PropTypes.string,
       source: PropTypes.string.isRequired,
       line: PropTypes.oneOfType([ PropTypes.string, PropTypes.number ]),
       column: PropTypes.oneOfType([ PropTypes.string, PropTypes.number ]),
-      showEmptyPathAsHost: PropTypes.bool,
     }).isRequired,
     // Clicking on the frame link -- probably should link to the debugger.
     onClick: PropTypes.func.isRequired,
     // Option to display a function name before the source link.
     showFunctionName: PropTypes.bool,
+    // Option to display a function name even if it's anonymous.
+    showAnonymousFunctionName: PropTypes.bool,
     // Option to display a host name after the source link.
     showHost: PropTypes.bool,
+    // Option to display a host name if the filename is empty or just '/'
+    showEmptyPathAsHost: PropTypes.bool,
+    // Option to display a full source instead of just the filename.
+    showFullSourceUrl: PropTypes.bool,
   },
 
   getDefaultProps() {
     return {
       showFunctionName: false,
+      showAnonymousFunctionName: false,
       showHost: false,
       showEmptyPathAsHost: false,
+      showFullSourceUrl: false,
     };
   },
 
   render() {
-    let { onClick, frame, showFunctionName, showHost } = this.props;
-    let { showEmptyPathAsHost } = frame;
+    let {
+      onClick,
+      frame,
+      showFunctionName,
+      showAnonymousFunctionName,
+      showHost,
+      showEmptyPathAsHost,
+      showFullSourceUrl
+    } = this.props;
+
     let source = frame.source ? String(frame.source) : "";
     let line = frame.line != void 0 ? Number(frame.line) : null;
     let column = frame.column != void 0 ? Number(frame.column) : null;
 
     const { short, long, host } = getSourceNames(source);
     // Reparse the URL to determine if we should link this; `getSourceNames`
     // has already cached this indirectly. We don't want to attempt to
     // link to "self-hosted" and "(unknown)". However, we do want to link
@@ -68,59 +84,66 @@ module.exports = createClass({
       }
     }
 
     let attributes = {
       "data-url": long,
       className: "frame-link",
     };
 
-    if (showFunctionName && frame.functionDisplayName) {
-      elements.push(
-        dom.span({ className: "frame-link-function-display-name" },
-                 frame.functionDisplayName)
-      );
+    if (showFunctionName) {
+      let functionDisplayName = frame.functionDisplayName;
+      if (!functionDisplayName && showAnonymousFunctionName) {
+        functionDisplayName = webl10n.getStr("stacktrace.anonymousFunction");
+      }
+
+      if (functionDisplayName) {
+        elements.push(
+          dom.span({ className: "frame-link-function-display-name" },
+            functionDisplayName)
+        );
+      }
     }
 
-    let displaySource = short;
-    if (showEmptyPathAsHost && (short === "" || short === "/")) {
+    let displaySource = showFullSourceUrl ? long : short;
+    if (showEmptyPathAsHost && (displaySource === "" || displaySource === "/")) {
       displaySource = host;
     }
+
     sourceElements.push(dom.span({
       className: "frame-link-filename",
     }, displaySource));
 
     // If source is linkable, and we have a line number > 0
     if (isLinkable && line) {
-      sourceElements.push(dom.span({ className: "frame-link-colon" }, ":"));
-      sourceElements.push(dom.span({ className: "frame-link-line" }, line));
+      let lineInfo = `:${line}`;
+      // Add `data-line` attribute for testing
+      attributes["data-line"] = line;
+
       // Intentionally exclude 0
       if (column) {
-        sourceElements.push(dom.span({ className: "frame-link-colon" }, ":"));
-        sourceElements.push(
-          dom.span({ className: "frame-link-column" }, column)
-        );
+        lineInfo += `:${column}`;
         // Add `data-column` attribute for testing
         attributes["data-column"] = column;
       }
 
-      // Add `data-line` attribute for testing
-      attributes["data-line"] = line;
+      sourceElements.push(dom.span({ className: "frame-link-line" }, lineInfo));
     }
 
     // If source is not a URL (self-hosted, eval, etc.), don't make
     // it an anchor link, as we can't link to it.
     if (isLinkable) {
       sourceEl = dom.a({
         onClick: e => {
           e.preventDefault();
-          onClick(e);
+          onClick(frame);
         },
         href: source,
         className: "frame-link-source",
+        draggable: false,
         title: l10n.getFormatStr("frame.viewsourceindebugger", tooltip)
       }, sourceElements);
     } else {
       sourceEl = dom.span({
         className: "frame-link-source",
         title: tooltip,
       }, sourceElements);
     }
diff --git a/devtools/client/shared/components/moz.build b/devtools/client/shared/components/moz.build
--- a/devtools/client/shared/components/moz.build
+++ b/devtools/client/shared/components/moz.build
@@ -10,13 +10,14 @@ DIRS += [
     'tree'
 ]
 
 DevToolsModules(
     'frame.js',
     'h-split-box.js',
     'notification-box.css',
     'notification-box.js',
+    'stack-trace.js',
     'tree.js',
 )
 
 MOCHITEST_CHROME_MANIFESTS += ['test/mochitest/chrome.ini']
 BROWSER_CHROME_MANIFESTS += ['test/browser/browser.ini']
diff --git a/devtools/client/shared/components/stack-trace.js b/devtools/client/shared/components/stack-trace.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/shared/components/stack-trace.js
@@ -0,0 +1,68 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const React = require("devtools/client/shared/vendor/react");
+const { DOM: dom, createClass, createFactory, PropTypes } = React;
+const { LocalizationHelper } = require("devtools/client/shared/l10n");
+const Frame = createFactory(require("./frame"));
+
+const l10n = new LocalizationHelper("chrome://devtools/locale/webconsole.properties");
+
+const AsyncFrame = createFactory(createClass({
+  displayName: "AsyncFrame",
+
+  PropTypes: {
+    asyncCause: PropTypes.string.isRequired
+  },
+
+  render() {
+    let { asyncCause } = this.props;
+
+    return dom.span(
+      { className: "frame-link-async-cause" },
+      l10n.getFormatStr("stacktrace.asyncStack", asyncCause)
+    );
+  }
+}));
+
+const StackTrace = createClass({
+  displayName: "StackTrace",
+
+  PropTypes: {
+    stacktrace: PropTypes.array.isRequired,
+    onViewSourceInDebugger: PropTypes.func.isRequired
+  },
+
+  render() {
+    let { stacktrace, onViewSourceInDebugger } = this.props;
+
+    let frames = [];
+    stacktrace.forEach(s => {
+      if (s.asyncCause) {
+        frames.push(AsyncFrame({
+          asyncCause: s.asyncCause
+        }));
+      }
+
+      frames.push(Frame({
+        frame: {
+          functionDisplayName: s.functionName,
+          source: s.filename,
+          line: s.lineNumber,
+          column: s.columnNumber,
+        },
+        showFunctionName: true,
+        showAnonymousFunctionName: true,
+        showFullSourceUrl: true,
+        onClick: onViewSourceInDebugger
+      }));
+    });
+
+    return dom.div({ className: "stack-trace" }, frames);
+  }
+});
+
+module.exports = StackTrace;
diff --git a/devtools/client/shared/components/test/mochitest/head.js b/devtools/client/shared/components/test/mochitest/head.js
--- a/devtools/client/shared/components/test/mochitest/head.js
+++ b/devtools/client/shared/components/test/mochitest/head.js
@@ -136,44 +136,49 @@ var TEST_TREE = {
     O: "N"
   },
   expanded: new Set(),
 };
 
 /**
  * Frame
  */
-function checkFrameString({ frame, file, line, column, source, shouldLink, tooltip }) {
+function checkFrameString({ frame, file, line, column, source, functionName, shouldLink, tooltip }) {
   let el = frame.getDOMNode();
   let $ = selector => el.querySelector(selector);
 
+  let $func = $(".frame-link-function-display-name");
   let $source = $(".frame-link-source");
   let $filename = $(".frame-link-filename");
   let $line = $(".frame-link-line");
-  let $column = $(".frame-link-column");
 
   is($filename.textContent, file, "Correct filename");
   is(el.getAttribute("data-line"), line ? `${line}` : null, "Expected `data-line` found");
   is(el.getAttribute("data-column"), column ? `${column}` : null, "Expected `data-column` found");
   is($source.getAttribute("title"), tooltip, "Correct tooltip");
   is($source.tagName, shouldLink ? "A" : "SPAN", "Correct linkable status");
   if (shouldLink) {
     is($source.getAttribute("href"), source, "Correct source");
   }
 
   if (line != null) {
-    is(+$line.textContent, +line);
+    let lineText = `:${line}`;
+    if (column != null) {
+      lineText += `:${column}`;
+    }
+
+    is($line.textContent, lineText);
   } else {
     ok(!$line, "Should not have an element for `line`");
   }
 
-  if (column != null) {
-    is(+$column.textContent, +column);
+  if (functionName != null) {
+    is($func.textContent, functionName);
   } else {
-    ok(!$column, "Should not have an element for `column`");
+    ok(!$func, "Should not have an element for `functionName`");
   }
 }
 
 function renderComponent(component, props) {
   const el = React.createElement(component, props, {});
   // By default, renderIntoDocument() won't work for stateless components, but
   // it will work if the stateless component is wrapped in a stateful one.
   // See https://github.com/facebook/react/issues/4839
diff --git a/devtools/client/shared/components/test/mochitest/test_frame_01.html b/devtools/client/shared/components/test/mochitest/test_frame_01.html
--- a/devtools/client/shared/components/test/mochitest/test_frame_01.html
+++ b/devtools/client/shared/components/test/mochitest/test_frame_01.html
@@ -15,168 +15,258 @@ with optional columns, unknown and non-U
 <script src="head.js" type="application/javascript;version=1.8"></script>
 <script type="application/javascript;version=1.8">
 window.onload = Task.async(function* () {
   try {
     let ReactDOM = browserRequire("devtools/client/shared/vendor/react-dom");
     let React = browserRequire("devtools/client/shared/vendor/react");
     let Frame = React.createFactory(browserRequire("devtools/client/shared/components/frame"));
     ok(Frame, "Should get Frame");
-    let frame;
 
     // Check when there's a column
     yield checkFrameComponent({
-      source: "http://myfile.com/mahscripts.js",
-      line: 55,
-      column: 10,
+      frame: {
+        source: "http://myfile.com/mahscripts.js",
+        line: 55,
+        column: 10,
+      }
     }, {
       file: "mahscripts.js",
       line: 55,
       column: 10,
       shouldLink: true,
       tooltip: "View source in Debugger → http://myfile.com/mahscripts.js:55:10",
     });
 
     // Check when there's no column
     yield checkFrameComponent({
-      source: "http://myfile.com/mahscripts.js",
-      line: 55,
+      frame: {
+        source: "http://myfile.com/mahscripts.js",
+        line: 55,
+      }
     }, {
       file: "mahscripts.js",
       line: 55,
       shouldLink: true,
       tooltip: "View source in Debugger → http://myfile.com/mahscripts.js:55",
     });
 
     // Check when column === 0
     yield checkFrameComponent({
-      source: "http://myfile.com/mahscripts.js",
-      line: 55,
-      column: 0,
+      frame: {
+        source: "http://myfile.com/mahscripts.js",
+        line: 55,
+        column: 0,
+      }
     }, {
       file: "mahscripts.js",
       line: 55,
       shouldLink: true,
       tooltip: "View source in Debugger → http://myfile.com/mahscripts.js:55",
     });
 
     // Check when there's no parseable URL source;
     // should not render line/columns
     yield checkFrameComponent({
-      source: "self-hosted",
-      line: 1,
+      frame: {
+        source: "self-hosted",
+        line: 1,
+      }
     }, {
       file: "self-hosted",
       shouldLink: false,
       tooltip: "self-hosted",
     });
 
     // Check when there's no source;
     // should not render line/columns
     yield checkFrameComponent({
-      line: 1,
+      frame: {
+        line: 1,
+      }
     }, {
       file: "(unknown)",
       shouldLink: false,
       tooltip: "(unknown)",
     });
 
     // Check when there's a column, but no number;
     // no line/column info should render
     yield checkFrameComponent({
-      source: "http://myfile.com/mahscripts.js",
-      column: 55,
+      frame: {
+        source: "http://myfile.com/mahscripts.js",
+        column: 55,
+      }
     }, {
       file: "mahscripts.js",
       shouldLink: true,
       tooltip: "View source in Debugger → http://myfile.com/mahscripts.js",
     });
 
     // Check when line is 0; this should be an invalid
     // line option, so don't render line/column
     yield checkFrameComponent({
-      source: "http://myfile.com/mahscripts.js",
-      line: 0,
-      column: 55,
+      frame: {
+        source: "http://myfile.com/mahscripts.js",
+        line: 0,
+        column: 55,
+      }
     }, {
       file: "mahscripts.js",
       shouldLink: true,
       tooltip: "View source in Debugger → http://myfile.com/mahscripts.js",
     });
 
     // Check when source is via Scratchpad; we should render out the
     // lines and columns as this is linkable.
     yield checkFrameComponent({
-      source: "Scratchpad/1",
-      line: 10,
-      column: 50,
+      frame: {
+        source: "Scratchpad/1",
+        line: 10,
+        column: 50,
+      }
     }, {
       file: "Scratchpad/1",
       line: 10,
       column: 50,
       shouldLink: true,
       tooltip: "View source in Debugger → Scratchpad/1:10:50",
     });
 
     // Check that line and column can be strings
     yield checkFrameComponent({
-      source: "http://myfile.com/mahscripts.js",
-      line: "10",
-      column: "55",
+      frame: {
+        source: "http://myfile.com/mahscripts.js",
+        line: "10",
+        column: "55",
+      }
     }, {
       file: "mahscripts.js",
       line: 10,
       column: 55,
       shouldLink: true,
       tooltip: "View source in Debugger → http://myfile.com/mahscripts.js:10:55",
     });
 
     // Check that line and column can be strings,
     // and that the `0` rendering rules apply when they are strings as well
     yield checkFrameComponent({
-      source: "http://myfile.com/mahscripts.js",
-      line: "0",
-      column: "55",
+      frame: {
+        source: "http://myfile.com/mahscripts.js",
+        line: "0",
+        column: "55",
+      }
     }, {
       file: "mahscripts.js",
       shouldLink: true,
       tooltip: "View source in Debugger → http://myfile.com/mahscripts.js",
     });
 
+    // Check that the showFullSourceUrl option works correctly
+    yield checkFrameComponent({
+      frame: {
+        source: "http://myfile.com/mahscripts.js",
+        line: 0,
+      },
+      showFullSourceUrl: true
+    }, {
+      file: "http://myfile.com/mahscripts.js",
+      shouldLink: true,
+      tooltip: "View source in Debugger → http://myfile.com/mahscripts.js",
+    });
+
+    // Check that the showFunctionName option works correctly
+    yield checkFrameComponent({
+      frame: {
+        functionDisplayName: "myfun",
+        source: "http://myfile.com/mahscripts.js",
+        line: 0,
+      }
+    }, {
+      functionName: null,
+      file: "mahscripts.js",
+      shouldLink: true,
+      tooltip: "View source in Debugger → http://myfile.com/mahscripts.js",
+    });
+
+    yield checkFrameComponent({
+      frame: {
+        functionDisplayName: "myfun",
+        source: "http://myfile.com/mahscripts.js",
+        line: 0,
+      },
+      showFunctionName: true
+    }, {
+      functionName: "myfun",
+      file: "mahscripts.js",
+      shouldLink: true,
+      tooltip: "View source in Debugger → http://myfile.com/mahscripts.js",
+    });
+
+    // Check that anonymous function name is not displayed unless explicitly enabled
+    yield checkFrameComponent({
+      frame: {
+        source: "http://myfile.com/mahscripts.js",
+        line: 0,
+      },
+      showFunctionName: true
+    }, {
+      functionName: null,
+      file: "mahscripts.js",
+      shouldLink: true,
+      tooltip: "View source in Debugger → http://myfile.com/mahscripts.js",
+    });
+
+    yield checkFrameComponent({
+      frame: {
+        source: "http://myfile.com/mahscripts.js",
+        line: 0,
+      },
+      showFunctionName: true,
+      showAnonymousFunctionName: true
+    }, {
+      functionName: "<anonymous>",
+      file: "mahscripts.js",
+      shouldLink: true,
+      tooltip: "View source in Debugger → http://myfile.com/mahscripts.js",
+    });
+
     // Check if file is rendered with "/" for root documents when showEmptyPathAsHost is false
     yield checkFrameComponent({
-      source: "http://www.cnn.com/",
-      line: "1",
+      frame: {
+        source: "http://www.cnn.com/",
+        line: "1",
+      },
       showEmptyPathAsHost: false,
     }, {
       file: "/",
       line: "1",
       shouldLink: true,
       tooltip: "View source in Debugger → http://www.cnn.com/:1",
     });
 
     // Check if file is rendered with hostname for root documents when showEmptyPathAsHost is true
     yield checkFrameComponent({
-      source: "http://www.cnn.com/",
-      line: "1",
+      frame: {
+        source: "http://www.cnn.com/",
+        line: "1",
+      },
       showEmptyPathAsHost: true,
     }, {
       file: "www.cnn.com",
       line: "1",
       shouldLink: true,
       tooltip: "View source in Debugger → http://www.cnn.com/:1",
     });
 
-    function* checkFrameComponent (input, expected) {
-      let frame = ReactDOM.render(Frame({
-        frame: input,
-        onClick: () => {},
-      }), window.document.body);
+    function* checkFrameComponent(input, expected) {
+      let props = Object.assign({ onClick: () => {} }, input);
+      let frame = ReactDOM.render(Frame(props), window.document.body);
       yield forceRender(frame);
-      let source = input.source;
+      let { source } = input.frame;
       checkFrameString(Object.assign({ frame, source }, expected));
     }
 
   } catch (e) {
     ok(false, "Got an error: " + DevToolsUtils.safeErrorString(e));
   } finally {
     SimpleTest.finish();
   }
diff --git a/devtools/client/themes/components-frame.css b/devtools/client/themes/components-frame.css
--- a/devtools/client/themes/components-frame.css
+++ b/devtools/client/themes/components-frame.css
@@ -4,58 +4,50 @@
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 /**
  * Frame Component
  * Styles for React component at `devtools/client/shared/components/frame.js`
  */
 
 .frame-link {
-  margin-left: 7px;
   display: flex;
+  justify-content: space-between;
+}
+
+.frame-link-async-cause {
+  color: var(--theme-body-color-inactive);
 }
 
 .frame-link .frame-link-source {
-  display: flex;
+  flex: initial;
+  color: var(--theme-highlight-blue);
 }
+
 .frame-link a.frame-link-source {
   cursor: pointer;
   text-decoration: none;
-}
-.frame-link a.frame-link-source:hover {
-  text-decoration: underline;
+  font-style: normal;
 }
 
-.frame-link .frame-link-filename {
-  color: var(--theme-highlight-blue);
-  text-overflow: ellipsis;
-  overflow: hidden;
-  flex: 1;
-  text-align: right;
-  /* overrides styling some tools have with anchors */
-  text-decoration: none;
-  font-style: normal;
+.frame-link a.frame-link-source:hover {
+  text-decoration: underline;
 }
 
 .frame-link .frame-link-host {
   margin-inline-start: 5px;
   font-size: 90%;
   color: var(--theme-content-color2);
 }
 
 .frame-link .frame-link-function-display-name {
   margin-inline-end: 5px;
 }
 
-.frame-link .frame-link-column,
-.frame-link .frame-link-line,
-.frame-link .frame-link-colon {
+.frame-link .frame-link-line {
   color: var(--theme-highlight-orange);
-  display: block;
 }
 
-.focused .frame-link .frame-link-filename,
-.focused .frame-link .frame-link-column,
+.focused .frame-link .frame-link-source,
 .focused .frame-link .frame-link-line,
-.focused .frame-link .frame-link-host,
-.focused .frame-link .frame-link-colon {
+.focused .frame-link .frame-link-host {
   color: var(--theme-selection-color);
 }
diff --git a/devtools/client/themes/jit-optimizations.css b/devtools/client/themes/jit-optimizations.css
--- a/devtools/client/themes/jit-optimizations.css
+++ b/devtools/client/themes/jit-optimizations.css
@@ -98,44 +98,11 @@
   margin: 1px 6px 0 0;
 }
 
 .opt-icon.warning::before {
   background-position: -24px -24px;
 }
 
 /* Frame Component */
-.focused .frame-link-filename,
-.focused .frame-link-column,
-.focused .frame-link-line,
-.focused .frame-link-host,
-.focused .frame-link-colon {
-  color: var(--theme-selection-color);
-}
-
 .frame-link {
   margin-inline-start: 7px;
 }
-
-.frame-link-filename {
-  color: var(--theme-highlight-blue);
-  cursor: pointer;
-}
-
-.frame-link-filename:hover {
-  text-decoration: underline;
-}
-
-.frame-link-column,
-.frame-link-line,
-.frame-link-colon {
-  color: var(--theme-highlight-orange);
-}
-
-.frame-link-host {
-  margin-inline-start: 5px;
-  font-size: 90%;
-  color: var(--theme-content-color2);
-}
-
-.frame-link-function-display-name {
-  margin-inline-end: 5px;
-}
diff --git a/devtools/client/themes/webconsole.css b/devtools/client/themes/webconsole.css
--- a/devtools/client/themes/webconsole.css
+++ b/devtools/client/themes/webconsole.css
@@ -19,17 +19,16 @@ a {
 }
 
 /* Workaround for Bug 575675 - FindChildWithRules aRelevantLinkVisited
  * assertion when loading HTML page with links in XUL iframe */
 *:visited { }
 
 .message {
   display: flex;
-  flex: none;
   padding: 0 7px;
   width: 100%;
   box-sizing: border-box;
 }
 
 .message > .prefix,
 .message > .timestamp {
   flex: none;
@@ -74,17 +73,18 @@ a {
   display: inline-block;
 }
 
 .theme-light .message > .icon::before {
   background-image: url(chrome://devtools/skin/images/webconsole.svg#light-icons);
 }
 
 .message > .message-body-wrapper {
-  flex: 1 1 100%;
+  flex: auto;
+  min-width: 0px;
   margin: 3px;
 }
 
 .message-body-wrapper .table-widget-body {
   overflow: visible;
 }
 
 /* The red bubble that shows the number of times a message is repeated */
@@ -102,58 +102,46 @@ a {
   font-weight: 600;
 }
 
 .message-repeats[value="1"] {
   display: none;
 }
 
 .message-location {
-  display: flex;
-  flex: none;
-  align-self: flex-start;
-  justify-content: flex-end;
-  width: 10em;
-  margin-top: 3px;
-  color: -moz-nativehyperlinktext;
-  text-decoration: none;
-  white-space: nowrap;
+  max-width: 40%;
 }
 
-/* More space for the location data for location URL */
-.theme-firebug .message-location {
-  width: 13em;
+.stack-trace .frame-link-source,
+.message-location .frame-link-source {
+  direction: rtl;
+  white-space: nowrap;
+  overflow: hidden;
+  text-overflow: ellipsis;
 }
 
-.message-location:hover,
-.message-location:focus {
-  text-decoration: underline;
-}
-
-.message-location > .frame-link .frame-link-source {
-  width: 10em;
+.stack-trace .frame-link-function-display-name {
+  max-width: 50%;
+  white-space: nowrap;
+  overflow: hidden;
+  text-overflow: ellipsis;
 }
 
 .message-flex-body {
   display: flex;
 }
 
 .message-body > * {
   white-space: pre-wrap;
   word-wrap: break-word;
 }
 
 .message-flex-body > .message-body {
   display: block;
-  flex: 1 1 auto;
-  vertical-align: middle;
-}
-
-.message-flex-body > .message-location {
-  margin-top: 0;
+  flex: auto;
 }
 
 #output-wrapper {
   direction: ltr;
   overflow: auto;
   -moz-user-select: text;
 }
 
@@ -494,20 +482,18 @@ a {
 }
 
 .theme-light .navigation-marker .url {
   background: #fff;
 }
 
 .stacktrace {
   display: none;
-  list-style: none;
-  padding: 0 1em 0 1.5em;
+  padding: 5px 10px;
   margin: 5px 0 0 0;
-  max-height: 10em;
   overflow-y: auto;
   border: 1px solid var(--theme-splitter-color);
   border-radius: 3px;
 }
 
 .consoletable {
   margin: 5px 0 0 0;
 }
@@ -526,26 +512,16 @@ a {
 
 .message .theme-twisty {
   display: inline-block;
   vertical-align: middle;
   margin: 3px 0 0 0;
   flex-shrink: 0;
 }
 
-.stacktrace li {
-  display: flex;
-  margin: 0;
-}
-
-.stacktrace .function {
-  display: block;
-  flex: 1 1 auto;
-}
-
 .cm-s-mozilla a[class] {
   font-style: italic;
   text-decoration: none;
 }
 
 .cm-s-mozilla a[class]:hover,
 .cm-s-mozilla a[class]:focus {
   text-decoration: underline;
diff --git a/devtools/client/webconsole/console-output.js b/devtools/client/webconsole/console-output.js
--- a/devtools/client/webconsole/console-output.js
+++ b/devtools/client/webconsole/console-output.js
@@ -776,16 +776,25 @@ Messages.Simple.prototype = extend(Messa
    * The raw message displayed by this Message object. This can be a function,
    * DOM node or a string.
    *
    * @private
    * @type mixed
    */
   _message: null,
 
+  /**
+   * The message's "attachment" element to be displayed under the message.
+   * Used for things like stack traces or tables in console.table().
+   *
+   * @private
+   * @type DOMElement|null
+   */
+  _attachment: null,
+
   _objectActors: null,
   _groupDepthCompat: 0,
 
   /**
    * Message timestamp.
    *
    * @type number
    *       Milliseconds elapsed since 1 January 1970 00:00:00 UTC.
@@ -895,20 +904,16 @@ Messages.Simple.prototype = extend(Messa
     // Apply the current group by indenting appropriately.
     // TODO: remove this once bug 778766 is fixed.
     let indent = this._groupDepthCompat * COMPAT.GROUP_INDENT;
     let indentNode = this.document.createElementNS(XHTML_NS, "span");
     indentNode.className = "indent";
     indentNode.style.width = indent + "px";
 
     let body = this._renderBody();
-    this._repeatID.textContent += "|" + body.textContent;
-
-    let repeatNode = this._renderRepeatNode();
-    let location = this._renderLocation();
 
     Messages.BaseMessage.prototype.render.call(this);
     if (this._className) {
       this.element.className += " " + this._className;
     }
 
     this.element.appendChild(timestamp.element);
     this.element.appendChild(indentNode);
@@ -924,22 +929,16 @@ Messages.Simple.prototype = extend(Messa
       twisty.title = l10n.getStr("messageToggleDetails");
       twisty.addEventListener("click", this._onClickCollapsible);
       this.element.appendChild(twisty);
       this.collapsible = true;
       this.element.setAttribute("collapsible", true);
     }
 
     this.element.appendChild(body);
-    if (repeatNode) {
-      this.element.appendChild(repeatNode);
-    }
-    if (location) {
-      this.element.appendChild(location);
-    }
 
     this.element.appendChild(this.document.createTextNode("\n"));
 
     this.element.clipboardText = this.element.textContent;
 
     if (this.private) {
       this.element.setAttribute("private", true);
     }
@@ -954,46 +953,66 @@ Messages.Simple.prototype = extend(Messa
 
   /**
    * Render the message body DOM element.
    * @private
    * @return Element
    */
   _renderBody: function ()
   {
+    let bodyWrapper = this.document.createElementNS(XHTML_NS, "span");
+    bodyWrapper.className = "message-body-wrapper";
+
+    let bodyFlex = this.document.createElementNS(XHTML_NS, "span");
+    bodyFlex.className = "message-flex-body";
+    bodyWrapper.appendChild(bodyFlex);
+
     let body = this.document.createElementNS(XHTML_NS, "span");
-    body.className = "message-body-wrapper message-body devtools-monospace";
-
-    let bodyInner = this.document.createElementNS(XHTML_NS, "span");
-    body.appendChild(bodyInner);
-
-    let anchor, container = bodyInner;
+    body.className = "message-body devtools-monospace";
+    bodyFlex.appendChild(body);
+
+    let anchor, container = body;
     if (this._link || this._linkCallback) {
       container = anchor = this.document.createElementNS(XHTML_NS, "a");
       anchor.href = this._link || "#";
       anchor.draggable = false;
       this._addLinkCallback(anchor, this._linkCallback);
-      bodyInner.appendChild(anchor);
+      body.appendChild(anchor);
     }
 
     if (typeof this._message == "function") {
       container.appendChild(this._message(this));
     } else if (this._message instanceof Ci.nsIDOMNode) {
       container.appendChild(this._message);
     } else {
       container.textContent = this._message;
     }
 
+    // do this before repeatNode is rendered - it has no effect afterwards
+    this._repeatID.textContent += "|" + container.textContent;
+
+    let repeatNode = this._renderRepeatNode();
+    let location = this._renderLocation();
+
+    if (repeatNode) {
+      bodyFlex.appendChild(repeatNode);
+    }
+    if (location) {
+      bodyFlex.appendChild(location);
+    }
+
     if (this.stack) {
-      let stack = new Widgets.Stacktrace(this, this.stack).render().element;
-      body.appendChild(this.document.createTextNode("\n"));
-      body.appendChild(stack);
+      this._attachment = new Widgets.Stacktrace(this, this.stack).render().element;
     }
 
-    return body;
+    if (this._attachment) {
+      bodyWrapper.appendChild(this._attachment);
+    }
+
+    return bodyWrapper;
   },
 
   /**
    * Render the repeat bubble DOM element part of the message.
    * @private
    * @return Element
    */
   _renderRepeatNode: function ()
@@ -1023,19 +1042,17 @@ Messages.Simple.prototype = extend(Messa
 
     let {url, line, column} = this.location;
     if (IGNORED_SOURCE_URLS.indexOf(url) != -1) {
       return null;
     }
 
     // The ConsoleOutput owner is a WebConsoleFrame instance from webconsole.js.
     // TODO: move createLocationNode() into this file when bug 778766 is fixed.
-    return this.output.owner.createLocationNode({url: url,
-                                                 line: line,
-                                                 column: column});
+    return this.output.owner.createLocationNode({url, line, column });
   },
 
   /**
    * The click event handler for the message expander arrow element. This method
    * toggles the display of message details.
    *
    * @private
    * @param nsIDOMEvent ev
@@ -1427,57 +1444,27 @@ Messages.ConsoleGeneric.prototype = exte
 
   _renderBodyPieceSeparator: function ()
   {
     return this.document.createTextNode(" ");
   },
 
   render: function ()
   {
-    let msg = this.document.createElementNS(XHTML_NS, "span");
-    msg.className = "message-body devtools-monospace";
-
-    this._renderBodyPieces(msg);
-
-    let repeatNode = Messages.Simple.prototype._renderRepeatNode.call(this);
-    let location = Messages.Simple.prototype._renderLocation.call(this);
-    if (location) {
-      location.target = "jsdebugger";
-    }
-
-    let flex = this.document.createElementNS(XHTML_NS, "span");
-    flex.className = "message-flex-body";
-
-    flex.appendChild(msg);
-
-    if (repeatNode) {
-      flex.appendChild(repeatNode);
-    }
-    if (location) {
-      flex.appendChild(location);
-    }
-
     let result = this.document.createDocumentFragment();
-    result.appendChild(flex);
+    this._renderBodyPieces(result);
 
     this._message = result;
     this._stacktrace = null;
 
     Messages.Simple.prototype.render.call(this);
 
     return this;
   },
 
-  _renderBody: function ()
-  {
-    let body = Messages.Simple.prototype._renderBody.apply(this, arguments);
-    body.classList.remove("devtools-monospace", "message-body");
-    return body;
-  },
-
   _renderBodyPieces: function (container)
   {
     let lastStyle = null;
     let stylePieces = this._styles.length > 0 ? this._styles.length : 1;
 
     for (let i = 0; i < this._messagePieces.length; i++) {
       // Pieces with an associated style definition come from "%c" formatting.
       // For body pieces beyond that, add a separator before each one.
@@ -1515,21 +1502,16 @@ Messages.ConsoleGeneric.prototype = exte
         span.appendChild(elem);
         result = span;
       }
     }
 
     return result;
   },
 
-  // no-op for the message location and .repeats elements.
-  // |this.render()| handles customized message output.
-  _renderLocation: function () { },
-  _renderRepeatNode: function () { },
-
   /**
    * Given a style attribute value, return a cleaned up version of the string
    * such that:
    *
    * - no external URL is allowed to load. See RE_CLEANUP_STYLES.
    * - only some of the properties are allowed, based on a whitelist. See
    *   RE_ALLOWED_STYLES.
    *
@@ -1589,18 +1571,17 @@ Messages.ConsoleTrace = function (packet
     private: packet.private,
     filterDuplicates: true,
     location: {
       url: packet.filename,
       line: packet.lineNumber,
     },
   };
 
-  this._renderStack = this._renderStack.bind(this);
-  Messages.Simple.call(this, this._renderStack, options);
+  Messages.Simple.call(this, null, options);
 
   this._repeatID.consoleApiLevel = packet.level;
   this._stacktrace = this._repeatID.stacktrace = packet.stacktrace;
   this._arguments = packet.arguments;
 };
 
 Messages.ConsoleTrace.prototype = extend(Messages.Simple.prototype, {
   /**
@@ -1633,83 +1614,55 @@ Messages.ConsoleTrace.prototype = extend
         }
       }
     }
     this._arguments = null;
 
     return result;
   },
 
-  render: function ()
-  {
+  render: function () {
+    this._message = this._renderMessage();
+    this._attachment = this._renderStack();
+
     Messages.Simple.prototype.render.apply(this, arguments);
     this.element.setAttribute("open", true);
     return this;
   },
 
   /**
+   * Render the console messageNode
+   */
+  _renderMessage: function () {
+    let cmvar = this.document.createElementNS(XHTML_NS, "span");
+    cmvar.className = "cm-variable";
+    cmvar.textContent = "console";
+
+    let cmprop = this.document.createElementNS(XHTML_NS, "span");
+    cmprop.className = "cm-property";
+    cmprop.textContent = "trace";
+
+    let frag = this.document.createDocumentFragment();
+    frag.appendChild(cmvar);
+    frag.appendChild(this.document.createTextNode("."));
+    frag.appendChild(cmprop);
+    frag.appendChild(this.document.createTextNode("():"));
+
+    return frag;
+  },
+
+  /**
    * Render the stack frames.
    *
    * @private
    * @return DOMElement
    */
-  _renderStack: function ()
-  {
-    let cmvar = this.document.createElementNS(XHTML_NS, "span");
-    cmvar.className = "cm-variable";
-    cmvar.textContent = "console";
-
-    let cmprop = this.document.createElementNS(XHTML_NS, "span");
-    cmprop.className = "cm-property";
-    cmprop.textContent = "trace";
-
-    let title = this.document.createElementNS(XHTML_NS, "span");
-    title.className = "message-body devtools-monospace";
-    title.appendChild(cmvar);
-    title.appendChild(this.document.createTextNode("."));
-    title.appendChild(cmprop);
-    title.appendChild(this.document.createTextNode("():"));
-
-    let repeatNode = Messages.Simple.prototype._renderRepeatNode.call(this);
-    let location = Messages.Simple.prototype._renderLocation.call(this);
-    if (location) {
-      location.target = "jsdebugger";
-    }
-
-    let widget = new Widgets.Stacktrace(this, this._stacktrace).render();
-
-    let body = this.document.createElementNS(XHTML_NS, "span");
-    body.className = "message-flex-body";
-    body.appendChild(title);
-    if (repeatNode) {
-      body.appendChild(repeatNode);
-    }
-    if (location) {
-      body.appendChild(location);
-    }
-    body.appendChild(this.document.createTextNode("\n"));
-
-    let frag = this.document.createDocumentFragment();
-    frag.appendChild(body);
-    frag.appendChild(widget.element);
-
-    return frag;
+  _renderStack: function () {
+    return new Widgets.Stacktrace(this, this._stacktrace).render().element;
   },
-
-  _renderBody: function ()
-  {
-    let body = Messages.Simple.prototype._renderBody.apply(this, arguments);
-    body.classList.remove("devtools-monospace", "message-body");
-    return body;
-  },
-
-  // no-op for the message location and .repeats elements.
-  // |this._renderStack| handles customized message output.
-  _renderLocation: function () { },
-  _renderRepeatNode: function () { },
 }); // Messages.ConsoleTrace.prototype
 
 /**
  * The ConsoleTable message is used for console.table() calls.
  *
  * @constructor
  * @extends Messages.Extended
  * @param object packet
@@ -1726,18 +1679,18 @@ Messages.ConsoleTable = function (packet
     filterDuplicates: false,
     location: {
       url: packet.filename,
       line: packet.lineNumber,
     },
   };
 
   this._populateTableData = this._populateTableData.bind(this);
-  this._renderTable = this._renderTable.bind(this);
-  Messages.Extended.call(this, [this._renderTable], options);
+  this._renderMessage = this._renderMessage.bind(this);
+  Messages.Extended.call(this, [this._renderMessage], options);
 
   this._repeatID.consoleApiLevel = packet.level;
   this._arguments = packet.arguments;
 };
 
 Messages.ConsoleTable.prototype = extend(Messages.Extended.prototype, {
   /**
    * Holds the arguments the content script passed to the console.table()
@@ -1958,63 +1911,48 @@ Messages.ConsoleTable.prototype = extend
       deferred.resolve();
     }
 
     return deferred.promise;
   },
 
   render: function ()
   {
+    this._attachment = this._renderTable();
     Messages.Extended.prototype.render.apply(this, arguments);
     this.element.setAttribute("open", true);
     return this;
   },
 
+  _renderMessage: function () {
+    let cmvar = this.document.createElementNS(XHTML_NS, "span");
+    cmvar.className = "cm-variable";
+    cmvar.textContent = "console";
+
+    let cmprop = this.document.createElementNS(XHTML_NS, "span");
+    cmprop.className = "cm-property";
+    cmprop.textContent = "table";
+
+    let frag = this.document.createDocumentFragment();
+    frag.appendChild(cmvar);
+    frag.appendChild(this.document.createTextNode("."));
+    frag.appendChild(cmprop);
+    frag.appendChild(this.document.createTextNode("():"));
+
+    return frag;
+  },
+
   /**
    * Render the table.
    *
    * @private
    * @return DOMElement
    */
-  _renderTable: function ()
-  {
-    let cmvar = this.document.createElementNS(XHTML_NS, "span");
-    cmvar.className = "cm-variable";
-    cmvar.textContent = "console";
-
-    let cmprop = this.document.createElementNS(XHTML_NS, "span");
-    cmprop.className = "cm-property";
-    cmprop.textContent = "table";
-
-    let title = this.document.createElementNS(XHTML_NS, "span");
-    title.className = "message-body devtools-monospace";
-    title.appendChild(cmvar);
-    title.appendChild(this.document.createTextNode("."));
-    title.appendChild(cmprop);
-    title.appendChild(this.document.createTextNode("():"));
-
-    let repeatNode = Messages.Simple.prototype._renderRepeatNode.call(this);
-    let location = Messages.Simple.prototype._renderLocation.call(this);
-    if (location) {
-      location.target = "jsdebugger";
-    }
-
-    let body = this.document.createElementNS(XHTML_NS, "span");
-    body.className = "message-flex-body";
-    body.appendChild(title);
-    if (repeatNode) {
-      body.appendChild(repeatNode);
-    }
-    if (location) {
-      body.appendChild(location);
-    }
-    body.appendChild(this.document.createTextNode("\n"));
-
+  _renderTable: function () {
     let result = this.document.createElementNS(XHTML_NS, "div");
-    result.appendChild(body);
 
     if (this._populatePromise) {
       this._populatePromise.then(() => {
         if (this._data.length > 0) {
           let widget = new Widgets.Table(this, this._data, this._columns).render();
           result.appendChild(widget.element);
         }
 
@@ -2030,28 +1968,16 @@ Messages.ConsoleTable.prototype = extend
           }
         }
         this._arguments = null;
       });
     }
 
     return result;
   },
-
-  _renderBody: function ()
-  {
-    let body = Messages.Simple.prototype._renderBody.apply(this, arguments);
-    body.classList.remove("devtools-monospace", "message-body");
-    return body;
-  },
-
-  // no-op for the message location and .repeats elements.
-  // |this._renderTable| handles customized message output.
-  _renderLocation: function () { },
-  _renderRepeatNode: function () { },
 }); // Messages.ConsoleTable.prototype
 
 var Widgets = {};
 
 /**
  * The base widget class.
  *
  * @constructor
@@ -3604,95 +3530,53 @@ Widgets.LongString.prototype = extend(Wi
  * @constructor
  * @extends Widgets.BaseWidget
  * @param object message
  *        The owning message.
  * @param array stacktrace
  *        The stacktrace to display, array of frames as supplied by the server,
  *        over the remote protocol.
  */
-Widgets.Stacktrace = function (message, stacktrace)
-{
+Widgets.Stacktrace = function (message, stacktrace) {
   Widgets.BaseWidget.call(this, message);
   this.stacktrace = stacktrace;
 };
 
 Widgets.Stacktrace.prototype = extend(Widgets.BaseWidget.prototype, {
   /**
    * The stackframes received from the server.
    * @type array
    */
   stacktrace: null,
 
-  render: function ()
-  {
+  onViewSourceInDebugger(frame) {
+    this.output.openLocationInDebugger({
+      url: frame.source,
+      line: frame.line
+    });
+  },
+
+  render() {
     if (this.element) {
       return this;
     }
 
-    let result = this.element = this.document.createElementNS(XHTML_NS, "ul");
+    let result = this.element = this.document.createElementNS(XHTML_NS, "div");
     result.className = "stacktrace devtools-monospace";
 
     if (this.stacktrace) {
-      for (let frame of this.stacktrace) {
-        result.appendChild(this._renderFrame(frame));
-      }
+      this.output.owner.ReactDOM.render(this.output.owner.StackTraceView({
+        stacktrace: this.stacktrace,
+        onViewSourceInDebugger: frame => this.onViewSourceInDebugger(frame)
+      }), result);
     }
 
     return this;
-  },
-
-  /**
-   * Render a frame object received from the server.
-   *
-   * @param object frame
-   *        The stack frame to display. This object should have the following
-   *        properties: functionName, filename and lineNumber.
-   * @return DOMElement
-   *         The DOM element to display for the given frame.
-   */
-  _renderFrame: function (frame)
-  {
-    let fn = this.document.createElementNS(XHTML_NS, "span");
-    fn.className = "function";
-
-    let asyncCause = "";
-    if (frame.asyncCause) {
-      asyncCause =
-        l10n.getFormatStr("stacktrace.asyncStack", [frame.asyncCause]) + " ";
-    }
-
-    if (frame.functionName) {
-      let span = this.document.createElementNS(XHTML_NS, "span");
-      span.className = "cm-variable";
-      span.textContent = asyncCause + frame.functionName;
-      fn.appendChild(span);
-      fn.appendChild(this.document.createTextNode("()"));
-    } else {
-      fn.classList.add("cm-comment");
-      fn.textContent = asyncCause + l10n.getStr("stacktrace.anonymousFunction");
-    }
-
-    let location = this.output.owner.createLocationNode({url: frame.filename,
-                                                        line: frame.lineNumber});
-
-    // .devtools-monospace sets font-size to 80%, however .body already has
-    // .devtools-monospace. If we keep it here, the location would be rendered
-    // smaller.
-    location.classList.remove("devtools-monospace");
-
-    let elem = this.document.createElementNS(XHTML_NS, "li");
-    elem.appendChild(fn);
-    elem.appendChild(location);
-    elem.appendChild(this.document.createTextNode("\n"));
-
-    return elem;
-  },
-}); // Widgets.Stacktrace.prototype
-
+  }
+});
 
 /**
  * The table widget.
  *
  * @constructor
  * @extends Widgets.BaseWidget
  * @param object message
  *        The owning message.
diff --git a/devtools/client/webconsole/net/components/moz.build b/devtools/client/webconsole/net/components/moz.build
--- a/devtools/client/webconsole/net/components/moz.build
+++ b/devtools/client/webconsole/net/components/moz.build
@@ -16,9 +16,10 @@ DevToolsModules(
     'net-info-params.js',
     'params-tab.js',
     'post-tab.js',
     'response-tab.css',
     'response-tab.js',
     'size-limit.css',
     'size-limit.js',
     'spinner.js',
+    'stacktrace-tab.js',
 )
diff --git a/devtools/client/webconsole/net/components/net-info-body.css b/devtools/client/webconsole/net/components/net-info-body.css
--- a/devtools/client/webconsole/net/components/net-info-body.css
+++ b/devtools/client/webconsole/net/components/net-info-body.css
@@ -1,18 +1,16 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 /******************************************************************************/
 /* Network Info Body */
 
 .netInfoBody {
-  font-family: var(--net-font-family);
-  font-size: var(--net-font-size);
   margin: 10px 0 0 0;
   width: 100%;
   cursor: default;
   display: block;
 }
 
 .netInfoBody *:focus {
   outline: 0 !important;
@@ -27,18 +25,16 @@
 
 .netInfoBody > .tabs {
   background-color: transparent;
   background-image: none;
   height: 100%;
 }
 
 .netInfoBody > .tabs .tabs-navigation {
-  font-family: var(--net-font-family);
-  font-size: var(--net-font-size);
   border-bottom-color: var(--net-border);
   background-color: transparent;
   text-decoration: none;
   padding-top: 3px;
   padding-left: 7px;
   padding-bottom: 1px;
   border-bottom: 1px solid var(--net-border);
 }
diff --git a/devtools/client/webconsole/net/components/net-info-body.js b/devtools/client/webconsole/net/components/net-info-body.js
--- a/devtools/client/webconsole/net/components/net-info-body.js
+++ b/devtools/client/webconsole/net/components/net-info-body.js
@@ -8,16 +8,17 @@ const { createFactories } = require("dev
 const { Tabs, TabPanel } = createFactories(require("devtools/client/shared/components/tabs/tabs"));
 
 // Network
 const HeadersTab = React.createFactory(require("./headers-tab"));
 const ResponseTab = React.createFactory(require("./response-tab"));
 const ParamsTab = React.createFactory(require("./params-tab"));
 const CookiesTab = React.createFactory(require("./cookies-tab"));
 const PostTab = React.createFactory(require("./post-tab"));
+const StackTraceTab = React.createFactory(require("./stacktrace-tab"));
 const NetUtils = require("../utils/net");
 
 // Shortcuts
 const PropTypes = React.PropTypes;
 
 /**
  * This template renders the basic Network log info body. It's not
  * visible by default, the user needs to expand the network log
@@ -63,16 +64,21 @@ var NetInfoBody = React.createClass({
   },
 
   hasCookies() {
     let {request, response} = this.state.data;
     return NetUtils.getHeaderValue(request.headers, "Cookie") ||
       NetUtils.getHeaderValue(response.headers, "Cookie");
   },
 
+  hasStackTrace() {
+    let {cause} = this.state.data;
+    return cause && cause.stacktrace && cause.stacktrace.length > 0;
+  },
+
   getTabPanels() {
     let actions = this.props.actions;
     let data = this.state.data;
     let {request} = data;
 
     // Flags for optional tabs. Some tabs are visible only if there
     // are data to display.
     let hasParams = request.queryString && request.queryString.length;
@@ -132,16 +138,31 @@ var NetInfoBody = React.createClass({
           CookiesTab({
             data: data,
             actions: actions
           })
         )
       );
     }
 
+    // Stacktrace tab
+    if (this.hasStackTrace()) {
+      panels.push(
+        TabPanel({
+          className: "stacktrace-tab",
+          key: "stacktrace",
+          title: Locale.$STR("netRequest.callstack")},
+          StackTraceTab({
+            data: data,
+            actions: actions
+          })
+        )
+      );
+    }
+
     return panels;
   },
 
   render() {
     let tabActive = this.state.tabActive;
     let tabPanels = this.getTabPanels();
     return (
       Tabs({
diff --git a/devtools/client/webconsole/net/components/net-info-group.css b/devtools/client/webconsole/net/components/net-info-group.css
--- a/devtools/client/webconsole/net/components/net-info-group.css
+++ b/devtools/client/webconsole/net/components/net-info-group.css
@@ -1,18 +1,16 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 /******************************************************************************/
 /* Net Info Group */
 
 .netInfoBody .netInfoGroup {
-  line-height: 13px;
-  color: var(--theme-body-color);
   padding-bottom: 6px;
 }
 
 /* Last group doesn't need bottom padding */
 .netInfoBody .netInfoGroup:last-child {
   padding-bottom: 0;
 }
 
diff --git a/devtools/client/webconsole/net/components/net-info-params.css b/devtools/client/webconsole/net/components/net-info-params.css
--- a/devtools/client/webconsole/net/components/net-info-params.css
+++ b/devtools/client/webconsole/net/components/net-info-params.css
@@ -12,8 +12,12 @@
   text-align: right;
   white-space: nowrap;
 }
 
 .netInfoBody .netInfoParamValue {
   width: 100%;
   word-wrap: break-word;
 }
+
+.netInfoBody .netInfoParamValue > code {
+  font-family: var(--monospace-font-family);
+}
diff --git a/devtools/client/webconsole/net/components/response-tab.css b/devtools/client/webconsole/net/components/response-tab.css
--- a/devtools/client/webconsole/net/components/response-tab.css
+++ b/devtools/client/webconsole/net/components/response-tab.css
@@ -6,16 +6,16 @@
 /* Response Tab */
 
 .netInfoBody .netInfoBodiesDiscarded {
   font-style: italic;
   color: gray;
 }
 
 .netInfoBody .netInfoResponseContent {
-  font-family: monospace;
+  font-family: var(--monospace-font-family);
   word-wrap: break-word;
 }
 
 .netInfoBody .responseTabBox img {
   max-width: 300px;
   max-height: 300px;
 }
diff --git a/devtools/client/webconsole/net/components/size-limit.css b/devtools/client/webconsole/net/components/size-limit.css
--- a/devtools/client/webconsole/net/components/size-limit.css
+++ b/devtools/client/webconsole/net/components/size-limit.css
@@ -1,17 +1,15 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 /******************************************************************************/
 /* Response Size Limit */
 
 .netInfoBody .netInfoSizeLimit {
-  font-family: var(--net-font-family);
-  font-size: var(--net-font-size);
   font-weight: bold;
   padding-top: 10px;
 }
 
 .netInfoBody .netInfoSizeLimit .objectLink {
   color: var(--theme-highlight-blue);
 }
diff --git a/devtools/client/webconsole/net/components/stacktrace-tab.js b/devtools/client/webconsole/net/components/stacktrace-tab.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/net/components/stacktrace-tab.js
@@ -0,0 +1,29 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const { PropTypes, createClass, createFactory } = require("devtools/client/shared/vendor/react");
+const StackTrace = createFactory(require("devtools/client/shared/components/stack-trace"));
+
+const StackTraceTab = createClass({
+  displayName: "StackTraceTab",
+
+  propTypes: {
+    data: PropTypes.object.isRequired,
+    actions: PropTypes.shape({
+      onViewSourceInDebugger: PropTypes.func.isRequired
+    })
+  },
+
+  render() {
+    let { stacktrace } = this.props.data.cause;
+    let { actions } = this.props;
+    let onViewSourceInDebugger = actions.onViewSourceInDebugger.bind(actions);
+
+    return StackTrace({ stacktrace, onViewSourceInDebugger });
+  }
+});
+
+// Exports from this module
+module.exports = StackTraceTab;
diff --git a/devtools/client/webconsole/net/net-request.css b/devtools/client/webconsole/net/net-request.css
--- a/devtools/client/webconsole/net/net-request.css
+++ b/devtools/client/webconsole/net/net-request.css
@@ -2,22 +2,16 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 /******************************************************************************/
 /* General */
 
 :root {
   --net-border: #d7d7d7;
-  --net-font-family: monospace;
-  --net-font-size: 11px;
-}
-
-:root.theme-firebug {
-  --net-font-family: Lucida Grande, Tahoma, sans-serif;
 }
 
 :root.theme-dark {
   --net-border: #5f7387;
 }
 
 /******************************************************************************/
 /* Network log */
diff --git a/devtools/client/webconsole/net/net-request.js b/devtools/client/webconsole/net/net-request.js
--- a/devtools/client/webconsole/net/net-request.js
+++ b/devtools/client/webconsole/net/net-request.js
@@ -34,17 +34,18 @@ const XHTML_NS = "http://www.w3.org/1999
  * and rendered directly within the Console iframe.
  */
 function NetRequest(log) {
   this.initialize(log);
 }
 
 NetRequest.prototype = {
   initialize: function (log) {
-    this.client = log.client;
+    this.client = log.consoleFrame.webConsoleClient;
+    this.owner = log.consoleFrame.owner;
 
     // 'this.file' field is following HAR spec.
     // http://www.softwareishard.com/blog/har-12-spec/
     this.file = log.response;
     this.parentNode = log.node;
     this.file.request.queryString = parseURLParams(this.file.request.url);
 
     // Map of fetched responses (to avoid unnecessary RDP round trip).
@@ -272,16 +273,20 @@ NetRequest.prototype = {
     return this.resolveHeaders(this.file.request.cookies);
   },
 
   onResponseCookies: function (response) {
     this.file.response.cookies = response.cookies;
     return this.resolveHeaders(this.file.response.cookies);
   },
 
+  onViewSourceInDebugger: function (frame) {
+    this.owner.viewSourceInDebugger(frame.source, frame.line);
+  },
+
   resolveHeaders: function (headers) {
     let promises = [];
 
     for (let header of headers) {
       if (typeof header.value == "object") {
         promises.push(this.resolveString(header.value).then(value => {
           header.value = value;
         }));
diff --git a/devtools/client/webconsole/test/browser_console_addonsdk_loader_exception.js b/devtools/client/webconsole/test/browser_console_addonsdk_loader_exception.js
--- a/devtools/client/webconsole/test/browser_console_addonsdk_loader_exception.js
+++ b/devtools/client/webconsole/test/browser_console_addonsdk_loader_exception.js
@@ -53,17 +53,17 @@ function test() {
       }],
     });
 
     fixToolbox();
 
     let msg = [...result.matched][0];
     ok(msg, "message element found");
     let locationNode = msg
-      .querySelector(".message > .message-location > .frame-link");
+      .querySelector(".message .message-location > .frame-link");
     ok(locationNode, "message location element found");
 
     let url = locationNode.getAttribute("data-url");
     info("location node url: " + url);
     ok(url.indexOf("resource://") === 0, "error comes from a subscript");
 
     let viewSource = browserconsole.viewSource;
     let URL = null;
diff --git a/devtools/client/webconsole/test/browser_console_error_source_click.js b/devtools/client/webconsole/test/browser_console_error_source_click.js
--- a/devtools/client/webconsole/test/browser_console_error_source_click.js
+++ b/devtools/client/webconsole/test/browser_console_error_source_click.js
@@ -59,17 +59,17 @@ add_task(function* () {
   };
 
   for (let result of results) {
     viewSourceCalled = false;
 
     let msg = [...result.matched][0];
     ok(msg, "message element found for: " + result.text);
     ok(!msg.classList.contains("filtered-by-type"), "message element is not filtered");
-    let selector = ".message > .message-location .frame-link-source";
+    let selector = ".message .message-location .frame-link-source";
     let locationNode = msg.querySelector(selector);
     ok(locationNode, "message location element found");
 
     EventUtils.synthesizeMouse(locationNode, 2, 2, {}, hud.iframeWindow);
 
     ok(viewSourceCalled, "view source opened");
   }
 
diff --git a/devtools/client/webconsole/test/browser_webconsole_console_trace_duplicates.js b/devtools/client/webconsole/test/browser_webconsole_console_trace_duplicates.js
--- a/devtools/client/webconsole/test/browser_webconsole_console_trace_duplicates.js
+++ b/devtools/client/webconsole/test/browser_webconsole_console_trace_duplicates.js
@@ -20,31 +20,31 @@ function test() {
     // NB: Now that stack frames include a column number multiple invocations
     //     on the same line are considered unique. ie:
     //       |foo(); foo();|
     //     will generate two distinct trace entries.
     yield waitForMessages({
       webconsole: hud,
       messages: [{
         name: "console.trace output for foo1()",
-        text: "foo1()",
+        text: "foo1",
         consoleTrace: {
           file: "test-bug_939783_console_trace_duplicates.html",
-          fn: "foo3()",
+          fn: "foo3",
         },
       }, {
         name: "console.trace output for foo1()",
-        text: "foo1()",
+        text: "foo1",
         consoleTrace: {
           file: "test-bug_939783_console_trace_duplicates.html",
-          fn: "foo3()",
+          fn: "foo3",
         },
       }, {
         name: "console.trace output for foo1b()",
-        text: "foo1b()",
+        text: "foo1b",
         consoleTrace: {
           file: "test-bug_939783_console_trace_duplicates.html",
-          fn: "foo3()",
+          fn: "foo3",
         },
       }],
     });
   }
 }
diff --git a/devtools/client/webconsole/test/browser_webconsole_jsterm.js b/devtools/client/webconsole/test/browser_webconsole_jsterm.js
--- a/devtools/client/webconsole/test/browser_webconsole_jsterm.js
+++ b/devtools/client/webconsole/test/browser_webconsole_jsterm.js
@@ -144,31 +144,31 @@ function* testJSTerm(hud) {
   yield checkResult("undefined", "undefined is printed");
 
   // check that thrown strings produce error messages,
   // and the message text matches that of a stringified error object
   // bug 1099071
   jsterm.clearOutput();
   yield jsterm.execute("throw '';");
   yield checkResult((node) => {
-    return node.parentNode.getAttribute("severity") === "error" &&
+    return node.closest(".message").getAttribute("severity") === "error" &&
       node.textContent === new Error("").toString();
   }, "thrown empty string generates error message");
 
   jsterm.clearOutput();
   yield jsterm.execute("throw 'tomatoes';");
   yield checkResult((node) => {
-    return node.parentNode.getAttribute("severity") === "error" &&
+    return node.closest(".message").getAttribute("severity") === "error" &&
       node.textContent === new Error("tomatoes").toString();
   }, "thrown non-empty string generates error message");
 
   jsterm.clearOutput();
   yield jsterm.execute("throw { foo: 'bar' };");
   yield checkResult((node) => {
-    return node.parentNode.getAttribute("severity") === "error" &&
+    return node.closest(".message").getAttribute("severity") === "error" &&
       node.textContent === Object.prototype.toString();
   }, "thrown object generates error message");
 
   // check that errors with entires in errordocs.js display links
   // alongside their messages.
   const ErrorDocs = require("devtools/server/actors/errordocs");
 
   const ErrorDocStatements = {
diff --git a/devtools/client/webconsole/test/browser_webconsole_view_source.js b/devtools/client/webconsole/test/browser_webconsole_view_source.js
--- a/devtools/client/webconsole/test/browser_webconsole_view_source.js
+++ b/devtools/client/webconsole/test/browser_webconsole_view_source.js
@@ -1,54 +1,42 @@
 /* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/ */
 
 // Tests that source URLs in the Web Console can be clicked to display the
-// standard View Source window.
+// standard View Source window. As JS exceptions and console.log() messages always
+// have their locations opened in Debugger, we need to test a security message in
+// order to have it opened in the standard View Source window.
 
 "use strict";
 
-const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
-                 "test/test-error.html";
+const TEST_URI = "https://example.com/browser/devtools/client/webconsole/" +
+                 "test/test-mixedcontent-securityerrors.html";
 
 add_task(function* () {
   yield loadTab(TEST_URI);
   let hud = yield openConsole(null);
   info("console opened");
 
-
-  // On e10s, the exception is triggered in child process
-  // and is ignored by test harness
-  if (!Services.appinfo.browserTabsRemoteAutostart) {
-    expectUncaughtException();
-  }
-
-  ContentTask.spawn(gBrowser.selectedBrowser, {}, function* () {
-    let button = content.document.querySelector("button");
-    ok(button, "we have the button on the page");
-    button.click();
-  });
-
   let [result] = yield waitForMessages({
     webconsole: hud,
     messages: [{
-      text: "fooBazBaz is not defined",
-      category: CATEGORY_JS,
+      text: "Blocked loading mixed active content",
+      category: CATEGORY_SECURITY,
       severity: SEVERITY_ERROR,
     }],
   });
 
   let msg = [...result.matched][0];
   ok(msg, "error message");
   let locationNode = msg.querySelector(".message-location .frame-link-filename");
   ok(locationNode, "location node");
 
   let onTabOpen = waitForTab();
 
   EventUtils.sendMouseEvent({ type: "click" }, locationNode);
 
   let tab = yield onTabOpen;
-  ok(true, "the view source tab was opened in response to clicking " +
-           "the location node");
+  ok(true, "the view source tab was opened in response to clicking the location node");
   gBrowser.removeTab(tab);
 });
diff --git a/devtools/client/webconsole/test/head.js b/devtools/client/webconsole/test/head.js
--- a/devtools/client/webconsole/test/head.js
+++ b/devtools/client/webconsole/test/head.js
@@ -1027,17 +1027,17 @@ function waitForMessages(options) {
     if (!location) {
       return false;
     }
 
     if (!checkText(rule.source.url, location.url)) {
       return false;
     }
 
-    if ("line" in rule.source && location.line === rule.source.line) {
+    if ("line" in rule.source && location.line != rule.source.line) {
       return false;
     }
 
     return true;
   }
 
   function checkCollapsible(rule, element) {
     let msg = element._messageObject;
@@ -1045,51 +1045,51 @@ function waitForMessages(options) {
       return false;
     }
 
     return true;
   }
 
   function checkStacktrace(rule, element) {
     let stack = rule.stacktrace;
-    let frames = element.querySelectorAll(".stacktrace > li");
+    let frames = element.querySelectorAll(".stacktrace > .stack-trace > .frame-link");
     if (!frames.length) {
       return false;
     }
 
     for (let i = 0; i < stack.length; i++) {
       let frame = frames[i];
       let expected = stack[i];
       if (!frame) {
         ok(false, "expected frame #" + i + " but didnt find it");
         return false;
       }
 
       if (expected.file) {
-        let url = getRenderedSource(frame).url;
+        let url = frame.getAttribute("data-url");
         if (!checkText(expected.file, url)) {
           ok(false, "frame #" + i + " does not match file name: " +
                     expected.file + " != " + url);
           displayErrorContext(rule, element);
           return false;
         }
       }
 
       if (expected.fn) {
-        let fn = frame.querySelector(".function").textContent;
+        let fn = frame.querySelector(".frame-link-function-display-name").textContent;
         if (!checkText(expected.fn, fn)) {
           ok(false, "frame #" + i + " does not match the function name: " +
                     expected.fn + " != " + fn);
           displayErrorContext(rule, element);
           return false;
         }
       }
 
       if (expected.line) {
-        let line = getRenderedSource(frame).line;
+        let line = frame.getAttribute("data-line");
         if (!checkText(expected.line, line)) {
           ok(false, "frame #" + i + " does not match the line number: " +
                     expected.line + " != " + line);
           displayErrorContext(rule, element);
           return false;
         }
       }
     }
diff --git a/devtools/client/webconsole/webconsole.js b/devtools/client/webconsole/webconsole.js
--- a/devtools/client/webconsole/webconsole.js
+++ b/devtools/client/webconsole/webconsole.js
@@ -240,16 +240,17 @@ function WebConsoleFrame(webConsoleOwner
   let require = BrowserLoaderModule.BrowserLoader({
     window: this.window,
     useOnlyShared: true
   }).require;
 
   this.React = require("devtools/client/shared/vendor/react");
   this.ReactDOM = require("devtools/client/shared/vendor/react-dom");
   this.FrameView = this.React.createFactory(require("devtools/client/shared/components/frame"));
+  this.StackTraceView = this.React.createFactory(require("devtools/client/shared/components/stack-trace"));
 
   this._telemetry = new Telemetry();
 
   EventEmitter.decorate(this);
 }
 exports.WebConsoleFrame = WebConsoleFrame;
 
 WebConsoleFrame.prototype = {
@@ -1626,17 +1627,17 @@ WebConsoleFrame.prototype = {
     this._addMessageLinkCallback(statusNode, onClick);
 
     networkInfo.node = messageNode;
 
     this._updateNetMessage(actorId);
 
     if (this.window.NetRequest) {
       this.window.NetRequest.onNetworkEvent({
-        client: this.webConsoleClient,
+        consoleFrame: this,
         response: networkInfo,
         node: messageNode,
         update: false
       });
     }
 
     return messageNode;
   },
@@ -2559,28 +2560,27 @@ WebConsoleFrame.prototype = {
    *
    * @param {Object} aLocation
    *        An object containing url, line and column number of the message
    *        source (destructured).
    * @return {Element}
    *         The new anchor element, ready to be added to the message node.
    */
   createLocationNode: function ({url, line, column}) {
+    let locationNode = this.document.createElementNS(XHTML_NS, "div");
+    locationNode.className = "message-location devtools-monospace";
+
     if (!url) {
       url = "";
     }
 
     let fullURL = url.split(" -> ").pop();
-    let locationNode = this.document.createElementNS(XHTML_NS, "a");
-    locationNode.draggable = false;
-    locationNode.className = "message-location devtools-monospace";
-
     // Make the location clickable.
     let onClick = () => {
-      let category = locationNode.parentNode.category;
+      let category = locationNode.closest(".message").category;
       let target = null;
 
       if (category === CATEGORY_CSS) {
         target = "styleeditor";
       } else if (category === CATEGORY_JS || category === CATEGORY_WEBDEV) {
         target = "jsdebugger";
       } else if (/^Scratchpad\/\d+$/.test(url)) {
         target = "scratchpad";
@@ -2604,19 +2604,19 @@ WebConsoleFrame.prototype = {
       // No matching tool found; use old school view-source
       this.owner.viewSource(fullURL, line);
     };
 
     this.ReactDOM.render(this.FrameView({
       frame: {
         source: fullURL,
         line,
-        column,
-        showEmptyPathAsHost: true,
+        column
       },
+      showEmptyPathAsHost: true,
       onClick,
     }), locationNode);
 
     return locationNode;
   },
 
   /**
    * Adjusts the category and severity of the given message.
