# vim: se ft=diff :
# HG changeset patch
# User Jarda Snajdr <jsnajdr@gmail.com>
# Date 2016-06-24 09:10
Bug 1281732 - Part 1: React components for displaying stack traces and frames r=linclark

diff --git a/devtools/client/shared/components/frame.js b/devtools/client/shared/components/frame.js
index b1dbe4c..ed74302 100644
--- a/devtools/client/shared/components/frame.js
+++ b/devtools/client/shared/components/frame.js
@@ -4,48 +4,64 @@
 
 "use strict";
 
 const { DOM: dom, createClass, PropTypes } = require("devtools/client/shared/vendor/react");
 const { getSourceNames, parseURL, isScratchpadScheme } = require("devtools/client/shared/source-utils");
 const { LocalizationHelper } = require("devtools/client/shared/l10n");
 
 const l10n = new LocalizationHelper("chrome://devtools/locale/components.properties");
+const webl10n = new LocalizationHelper("chrome://devtools/locale/webconsole.properties");
 
 module.exports = createClass({
   displayName: "Frame",
 
   propTypes: {
     // SavedFrame, or an object containing all the required properties.
     frame: PropTypes.shape({
       functionDisplayName: PropTypes.string,
       source: PropTypes.string.isRequired,
       line: PropTypes.oneOfType([ PropTypes.string, PropTypes.number ]),
       column: PropTypes.oneOfType([ PropTypes.string, PropTypes.number ]),
-      showEmptyPathAsHost: PropTypes.bool,
     }).isRequired,
     // Clicking on the frame link -- probably should link to the debugger.
     onClick: PropTypes.func.isRequired,
     // Option to display a function name before the source link.
     showFunctionName: PropTypes.bool,
+    // Option to display a function name even if it's anonymous.
+    showAnonymousFunctionName: PropTypes.bool,
     // Option to display a host name after the source link.
     showHost: PropTypes.bool,
+    // Option to display a host name if the filename is empty or just '/'
+    showEmptyPathAsHost: PropTypes.bool,
+    // Option to display a full source instead of just the filename.
+    showFullSourceUrl: PropTypes.bool,
   },
 
   getDefaultProps() {
     return {
       showFunctionName: false,
+      showAnonymousFunctionName: false,
       showHost: false,
       showEmptyPathAsHost: false,
+      showFullSourceUrl: false,
     };
   },
 
   render() {
-    let { onClick, frame, showFunctionName, showHost } = this.props;
-    let { showEmptyPathAsHost } = frame;
+    let {
+      onClick,
+      frame,
+      showFunctionName,
+      showAnonymousFunctionName,
+      showHost,
+      showEmptyPathAsHost,
+      showFullSourceUrl
+    } = this.props;
+
     let source = frame.source ? String(frame.source) : "";
     let line = frame.line != void 0 ? Number(frame.line) : null;
     let column = frame.column != void 0 ? Number(frame.column) : null;
 
     const { short, long, host } = getSourceNames(source);
     // Reparse the URL to determine if we should link this; `getSourceNames`
     // has already cached this indirectly. We don't want to attempt to
     // link to "self-hosted" and "(unknown)". However, we do want to link
@@ -68,59 +84,66 @@ module.exports = createClass({
       }
     }
 
     let attributes = {
       "data-url": long,
       className: "frame-link",
     };
 
-    if (showFunctionName && frame.functionDisplayName) {
-      elements.push(
-        dom.span({ className: "frame-link-function-display-name" },
-                 frame.functionDisplayName)
-      );
+    if (showFunctionName) {
+      let functionDisplayName = frame.functionDisplayName;
+      if (!functionDisplayName && showAnonymousFunctionName) {
+        functionDisplayName = webl10n.getStr("stacktrace.anonymousFunction");
+      }
+
+      if (functionDisplayName) {
+        elements.push(
+          dom.span({ className: "frame-link-function-display-name" },
+            functionDisplayName)
+        );
+      }
     }
 
-    let displaySource = short;
-    if (showEmptyPathAsHost && (short === "" || short === "/")) {
+    let displaySource = showFullSourceUrl ? long : short;
+    if (showEmptyPathAsHost && (displaySource === "" || displaySource === "/")) {
       displaySource = host;
     }
+
     sourceElements.push(dom.span({
       className: "frame-link-filename",
     }, displaySource));
 
     // If source is linkable, and we have a line number > 0
     if (isLinkable && line) {
-      sourceElements.push(dom.span({ className: "frame-link-colon" }, ":"));
-      sourceElements.push(dom.span({ className: "frame-link-line" }, line));
-      // Intentionally exclude 0
-      if (column) {
-        sourceElements.push(dom.span({ className: "frame-link-colon" }, ":"));
-        sourceElements.push(
-          dom.span({ className: "frame-link-column" }, column)
-        );
-        // Add `data-column` attribute for testing
-        attributes["data-column"] = column;
-      }
-
+      let lineInfo = `:${line}`;
       // Add `data-line` attribute for testing
       attributes["data-line"] = line;
+
+      // Intentionally exclude 0
+      if (column) {
+        lineInfo += `:${column}`;
+        // Add `data-column` attribute for testing
+        attributes["data-column"] = column;
+      }
+
+      sourceElements.push(dom.span({ className: "frame-link-line" }, lineInfo));
     }
 
     // If source is not a URL (self-hosted, eval, etc.), don't make
     // it an anchor link, as we can't link to it.
     if (isLinkable) {
       sourceEl = dom.a({
         onClick: e => {
           e.preventDefault();
-          onClick(e);
+          onClick(frame);
         },
         href: source,
         className: "frame-link-source",
+        draggable: false,
         title: l10n.getFormatStr("frame.viewsourceindebugger", tooltip)
       }, sourceElements);
     } else {
       sourceEl = dom.span({
         className: "frame-link-source",
         title: tooltip,
       }, sourceElements);
     }
diff --git a/devtools/client/shared/components/moz.build b/devtools/client/shared/components/moz.build
index 3e3ec7a..e2a47d1 100644
--- a/devtools/client/shared/components/moz.build
+++ b/devtools/client/shared/components/moz.build
@@ -10,13 +10,14 @@ DIRS += [
     'tree'
 ]
 
 DevToolsModules(
     'frame.js',
     'h-split-box.js',
     'notification-box.css',
     'notification-box.js',
+    'stack-trace.js',
     'tree.js',
 )
 
 MOCHITEST_CHROME_MANIFESTS += ['test/mochitest/chrome.ini']
 BROWSER_CHROME_MANIFESTS += ['test/browser/browser.ini']
diff --git a/devtools/client/shared/components/stack-trace.js b/devtools/client/shared/components/stack-trace.js
new file mode 100644
index 0000000..91ff7b1
--- /dev/null
+++ b/devtools/client/shared/components/stack-trace.js
@@ -0,0 +1,68 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const React = require("devtools/client/shared/vendor/react");
+const { DOM: dom, createClass, createFactory, PropTypes } = React;
+const { LocalizationHelper } = require("devtools/client/shared/l10n");
+const Frame = createFactory(require("./frame"));
+
+const l10n = new LocalizationHelper("chrome://devtools/locale/webconsole.properties");
+
+const AsyncFrame = createFactory(createClass({
+  displayName: "AsyncFrame",
+
+  PropTypes: {
+    asyncCause: PropTypes.string.isRequired
+  },
+
+  render() {
+    let { asyncCause } = this.props;
+
+    return dom.span(
+      { className: "frame-link-async-cause" },
+      l10n.getFormatStr("stacktrace.asyncStack", asyncCause)
+    );
+  }
+}));
+
+const StackTrace = createClass({
+  displayName: "StackTrace",
+
+  PropTypes: {
+    stacktrace: PropTypes.array.isRequired,
+    onViewSourceInDebugger: PropTypes.func.isRequired
+  },
+
+  render() {
+    let { stacktrace, onViewSourceInDebugger } = this.props;
+
+    let frames = [];
+    stacktrace.forEach(s => {
+      if (s.asyncCause) {
+        frames.push(AsyncFrame({
+          asyncCause: s.asyncCause
+        }));
+      }
+
+      frames.push(Frame({
+        frame: {
+          functionDisplayName: s.functionName,
+          source: s.filename,
+          line: s.lineNumber,
+          column: s.columnNumber,
+        },
+        showFunctionName: true,
+        showAnonymousFunctionName: true,
+        showFullSourceUrl: true,
+        onClick: onViewSourceInDebugger
+      }));
+    });
+
+    return dom.div({ className: "stack-trace" }, frames);
+  }
+});
+
+module.exports = StackTrace;
diff --git a/devtools/client/shared/components/test/mochitest/head.js b/devtools/client/shared/components/test/mochitest/head.js
index 882933c..42df4c9 100644
--- a/devtools/client/shared/components/test/mochitest/head.js
+++ b/devtools/client/shared/components/test/mochitest/head.js
@@ -135,44 +135,49 @@ var TEST_TREE = {
     O: "N"
   },
   expanded: new Set(),
 };
 
 /**
  * Frame
  */
-function checkFrameString({ frame, file, line, column, source, shouldLink, tooltip }) {
+function checkFrameString({ frame, file, line, column, source, functionName, shouldLink, tooltip }) {
   let el = frame.getDOMNode();
   let $ = selector => el.querySelector(selector);
 
+  let $func = $(".frame-link-function-display-name");
   let $source = $(".frame-link-source");
   let $filename = $(".frame-link-filename");
   let $line = $(".frame-link-line");
-  let $column = $(".frame-link-column");
 
   is($filename.textContent, file, "Correct filename");
   is(el.getAttribute("data-line"), line ? `${line}` : null, "Expected `data-line` found");
   is(el.getAttribute("data-column"), column ? `${column}` : null, "Expected `data-column` found");
   is($source.getAttribute("title"), tooltip, "Correct tooltip");
   is($source.tagName, shouldLink ? "A" : "SPAN", "Correct linkable status");
   if (shouldLink) {
     is($source.getAttribute("href"), source, "Correct source");
   }
 
   if (line != null) {
-    is(+$line.textContent, +line);
+    let lineText = `:${line}`;
+    if (column != null) {
+      lineText += `:${column}`;
+    }
+
+    is($line.textContent, lineText);
   } else {
     ok(!$line, "Should not have an element for `line`");
   }
 
-  if (column != null) {
-    is(+$column.textContent, +column);
+  if (functionName != null) {
+    is($func.textContent, functionName);
   } else {
-    ok(!$column, "Should not have an element for `column`");
+    ok(!$func, "Should not have an element for `functionName`");
   }
 }
 
 function renderComponent(component, props) {
   const el = React.createElement(component, props, {});
   // By default, renderIntoDocument() won't work for stateless components, but
   // it will work if the stateless component is wrapped in a stateful one.
   // See https://github.com/facebook/react/issues/4839
diff --git a/devtools/client/shared/components/test/mochitest/test_frame_01.html b/devtools/client/shared/components/test/mochitest/test_frame_01.html
index 6ba66b5..715131e 100644
--- a/devtools/client/shared/components/test/mochitest/test_frame_01.html
+++ b/devtools/client/shared/components/test/mochitest/test_frame_01.html
@@ -15,168 +15,258 @@ with optional columns, unknown and non-URL sources.
 <script src="head.js" type="application/javascript;version=1.8"></script>
 <script type="application/javascript;version=1.8">
 window.onload = Task.async(function* () {
   try {
     let ReactDOM = browserRequire("devtools/client/shared/vendor/react-dom");
     let React = browserRequire("devtools/client/shared/vendor/react");
     let Frame = React.createFactory(browserRequire("devtools/client/shared/components/frame"));
     ok(Frame, "Should get Frame");
-    let frame;
 
     // Check when there's a column
     yield checkFrameComponent({
-      source: "http://myfile.com/mahscripts.js",
-      line: 55,
-      column: 10,
+      frame: {
+        source: "http://myfile.com/mahscripts.js",
+        line: 55,
+        column: 10,
+      }
     }, {
       file: "mahscripts.js",
       line: 55,
       column: 10,
       shouldLink: true,
       tooltip: "View source in Debugger → http://myfile.com/mahscripts.js:55:10",
     });
 
     // Check when there's no column
     yield checkFrameComponent({
-      source: "http://myfile.com/mahscripts.js",
-      line: 55,
+      frame: {
+        source: "http://myfile.com/mahscripts.js",
+        line: 55,
+      }
     }, {
       file: "mahscripts.js",
       line: 55,
       shouldLink: true,
       tooltip: "View source in Debugger → http://myfile.com/mahscripts.js:55",
     });
 
     // Check when column === 0
     yield checkFrameComponent({
-      source: "http://myfile.com/mahscripts.js",
-      line: 55,
-      column: 0,
+      frame: {
+        source: "http://myfile.com/mahscripts.js",
+        line: 55,
+        column: 0,
+      }
     }, {
       file: "mahscripts.js",
       line: 55,
       shouldLink: true,
       tooltip: "View source in Debugger → http://myfile.com/mahscripts.js:55",
     });
 
     // Check when there's no parseable URL source;
     // should not render line/columns
     yield checkFrameComponent({
-      source: "self-hosted",
-      line: 1,
+      frame: {
+        source: "self-hosted",
+        line: 1,
+      }
     }, {
       file: "self-hosted",
       shouldLink: false,
       tooltip: "self-hosted",
     });
 
     // Check when there's no source;
     // should not render line/columns
     yield checkFrameComponent({
-      line: 1,
+      frame: {
+        line: 1,
+      }
     }, {
       file: "(unknown)",
       shouldLink: false,
       tooltip: "(unknown)",
     });
 
     // Check when there's a column, but no number;
     // no line/column info should render
     yield checkFrameComponent({
-      source: "http://myfile.com/mahscripts.js",
-      column: 55,
+      frame: {
+        source: "http://myfile.com/mahscripts.js",
+        column: 55,
+      }
     }, {
       file: "mahscripts.js",
       shouldLink: true,
       tooltip: "View source in Debugger → http://myfile.com/mahscripts.js",
     });
 
     // Check when line is 0; this should be an invalid
     // line option, so don't render line/column
     yield checkFrameComponent({
-      source: "http://myfile.com/mahscripts.js",
-      line: 0,
-      column: 55,
+      frame: {
+        source: "http://myfile.com/mahscripts.js",
+        line: 0,
+        column: 55,
+      }
     }, {
       file: "mahscripts.js",
       shouldLink: true,
       tooltip: "View source in Debugger → http://myfile.com/mahscripts.js",
     });
 
     // Check when source is via Scratchpad; we should render out the
     // lines and columns as this is linkable.
     yield checkFrameComponent({
-      source: "Scratchpad/1",
-      line: 10,
-      column: 50,
+      frame: {
+        source: "Scratchpad/1",
+        line: 10,
+        column: 50,
+      }
     }, {
       file: "Scratchpad/1",
       line: 10,
       column: 50,
       shouldLink: true,
       tooltip: "View source in Debugger → Scratchpad/1:10:50",
     });
 
     // Check that line and column can be strings
     yield checkFrameComponent({
-      source: "http://myfile.com/mahscripts.js",
-      line: "10",
-      column: "55",
+      frame: {
+        source: "http://myfile.com/mahscripts.js",
+        line: "10",
+        column: "55",
+      }
     }, {
       file: "mahscripts.js",
       line: 10,
       column: 55,
       shouldLink: true,
       tooltip: "View source in Debugger → http://myfile.com/mahscripts.js:10:55",
     });
 
     // Check that line and column can be strings,
     // and that the `0` rendering rules apply when they are strings as well
     yield checkFrameComponent({
-      source: "http://myfile.com/mahscripts.js",
-      line: "0",
-      column: "55",
+      frame: {
+        source: "http://myfile.com/mahscripts.js",
+        line: "0",
+        column: "55",
+      }
     }, {
       file: "mahscripts.js",
       shouldLink: true,
       tooltip: "View source in Debugger → http://myfile.com/mahscripts.js",
     });
 
+    // Check that the showFullSourceUrl option works correctly
+    yield checkFrameComponent({
+      frame: {
+        source: "http://myfile.com/mahscripts.js",
+        line: 0,
+      },
+      showFullSourceUrl: true
+    }, {
+      file: "http://myfile.com/mahscripts.js",
+      shouldLink: true,
+      tooltip: "View source in Debugger → http://myfile.com/mahscripts.js",
+    });
+
+    // Check that the showFunctionName option works correctly
+    yield checkFrameComponent({
+      frame: {
+        functionDisplayName: "myfun",
+        source: "http://myfile.com/mahscripts.js",
+        line: 0,
+      }
+    }, {
+      functionName: null,
+      file: "mahscripts.js",
+      shouldLink: true,
+      tooltip: "View source in Debugger → http://myfile.com/mahscripts.js",
+    });
+
+    yield checkFrameComponent({
+      frame: {
+        functionDisplayName: "myfun",
+        source: "http://myfile.com/mahscripts.js",
+        line: 0,
+      },
+      showFunctionName: true
+    }, {
+      functionName: "myfun",
+      file: "mahscripts.js",
+      shouldLink: true,
+      tooltip: "View source in Debugger → http://myfile.com/mahscripts.js",
+    });
+
+    // Check that anonymous function name is not displayed unless explicitly enabled
+    yield checkFrameComponent({
+      frame: {
+        source: "http://myfile.com/mahscripts.js",
+        line: 0,
+      },
+      showFunctionName: true
+    }, {
+      functionName: null,
+      file: "mahscripts.js",
+      shouldLink: true,
+      tooltip: "View source in Debugger → http://myfile.com/mahscripts.js",
+    });
+
+    yield checkFrameComponent({
+      frame: {
+        source: "http://myfile.com/mahscripts.js",
+        line: 0,
+      },
+      showFunctionName: true,
+      showAnonymousFunctionName: true
+    }, {
+      functionName: "<anonymous>",
+      file: "mahscripts.js",
+      shouldLink: true,
+      tooltip: "View source in Debugger → http://myfile.com/mahscripts.js",
+    });
+
     // Check if file is rendered with "/" for root documents when showEmptyPathAsHost is false
     yield checkFrameComponent({
-      source: "http://www.cnn.com/",
-      line: "1",
+      frame: {
+        source: "http://www.cnn.com/",
+        line: "1",
+      },
       showEmptyPathAsHost: false,
     }, {
       file: "/",
       line: "1",
       shouldLink: true,
       tooltip: "View source in Debugger → http://www.cnn.com/:1",
     });
 
     // Check if file is rendered with hostname for root documents when showEmptyPathAsHost is true
     yield checkFrameComponent({
-      source: "http://www.cnn.com/",
-      line: "1",
+      frame: {
+        source: "http://www.cnn.com/",
+        line: "1",
+      },
       showEmptyPathAsHost: true,
     }, {
       file: "www.cnn.com",
       line: "1",
       shouldLink: true,
       tooltip: "View source in Debugger → http://www.cnn.com/:1",
     });
 
-    function* checkFrameComponent (input, expected) {
-      let frame = ReactDOM.render(Frame({
-        frame: input,
-        onClick: () => {},
-      }), window.document.body);
+    function* checkFrameComponent(input, expected) {
+      let props = Object.assign({ onClick: () => {} }, input);
+      let frame = ReactDOM.render(Frame(props), window.document.body);
       yield forceRender(frame);
-      let source = input.source;
+      let { source } = input.frame;
       checkFrameString(Object.assign({ frame, source }, expected));
     }
 
   } catch (e) {
     ok(false, "Got an error: " + DevToolsUtils.safeErrorString(e));
   } finally {
     SimpleTest.finish();
   }
diff --git a/devtools/client/themes/components-frame.css b/devtools/client/themes/components-frame.css
index e4bc9f4..cbdc3d2 100644
--- a/devtools/client/themes/components-frame.css
+++ b/devtools/client/themes/components-frame.css
@@ -4,58 +4,50 @@
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 /**
  * Frame Component
  * Styles for React component at `devtools/client/shared/components/frame.js`
  */
 
 .frame-link {
-  margin-left: 7px;
   display: flex;
+  justify-content: space-between;
+}
+
+.frame-link-async-cause {
+  color: var(--theme-body-color-inactive);
 }
 
 .frame-link .frame-link-source {
-  display: flex;
+  flex: initial;
+  color: var(--theme-highlight-blue);
 }
+
 .frame-link a.frame-link-source {
   cursor: pointer;
   text-decoration: none;
+  font-style: normal;
 }
+
 .frame-link a.frame-link-source:hover {
   text-decoration: underline;
 }
 
-.frame-link .frame-link-filename {
-  color: var(--theme-highlight-blue);
-  text-overflow: ellipsis;
-  overflow: hidden;
-  flex: 1;
-  text-align: right;
-  /* overrides styling some tools have with anchors */
-  text-decoration: none;
-  font-style: normal;
-}
-
 .frame-link .frame-link-host {
   margin-inline-start: 5px;
   font-size: 90%;
   color: var(--theme-content-color2);
 }
 
 .frame-link .frame-link-function-display-name {
   margin-inline-end: 5px;
 }
 
-.frame-link .frame-link-column,
-.frame-link .frame-link-line,
-.frame-link .frame-link-colon {
+.frame-link .frame-link-line {
   color: var(--theme-highlight-orange);
-  display: block;
 }
 
-.focused .frame-link .frame-link-filename,
-.focused .frame-link .frame-link-column,
+.focused .frame-link .frame-link-source,
 .focused .frame-link .frame-link-line,
-.focused .frame-link .frame-link-host,
-.focused .frame-link .frame-link-colon {
+.focused .frame-link .frame-link-host {
   color: var(--theme-selection-color);
 }

