# vim: se ft=diff :
# HG changeset patch
# User Gabriel Luong <gabriel.luong@gmail.com>
# Date 2015-12-09 11:29
Bug 1231362 - Part 5: Upgrade existing CodeMirror tests to 5.9.0 r=bgrins

diff --git a/devtools/client/sourceeditor/test/codemirror/comment_test.js b/devtools/client/sourceeditor/test/codemirror/comment_test.js
--- a/devtools/client/sourceeditor/test/codemirror/comment_test.js
+++ b/devtools/client/sourceeditor/test/codemirror/comment_test.js
@@ -74,17 +74,17 @@ namespace = "comment_";
                                        "// " + multiLineInlineBlock[2]].join("\n"));

   test("commentRange", "javascript", function(cm) {
     cm.blockComment(Pos(1, 2), Pos(1, 13), {fullLines: false});
   }, simpleProg, "function foo() {\n  /*return bar;*/\n}");

   test("indented", "javascript", function(cm) {
     cm.lineComment(Pos(1, 0), Pos(2), {indent: true});
-  }, simpleProg, "function foo() {\n  // return bar;\n  // }");
+  }, simpleProg, "function foo() {\n//   return bar;\n// }");

   test("singleEmptyLine", "javascript", function(cm) {
     cm.setCursor(1);
     cm.execCommand("toggleComment");
   }, "a;\n\nb;", "a;\n// \nb;");

   test("dontMessWithStrings", "javascript", function(cm) {
     cm.execCommand("toggleComment");
diff --git a/devtools/client/sourceeditor/test/codemirror/emacs_test.js b/devtools/client/sourceeditor/test/codemirror/emacs_test.js
--- a/devtools/client/sourceeditor/test/codemirror/emacs_test.js
+++ b/devtools/client/sourceeditor/test/codemirror/emacs_test.js
@@ -14,17 +14,17 @@
       if (type == "Ctrl-") ctrl = true;
       else if (type == "Alt-") alt = true;
       else if (type == "Shift-") shift = true;
       return "";
     });
     var code;
     for (var c in CodeMirror.keyNames)
       if (CodeMirror.keyNames[c] == key) { code = c; break; }
-    if (c == null) throw new Error("Unknown key: " + key);
+    if (code == null) throw new Error("Unknown key: " + key);

     return eventCache[keyName] = {
       type: "keydown", keyCode: code, ctrlKey: ctrl, shiftKey: shift, altKey: alt,
       preventDefault: function(){}, stopPropagation: function(){}
     };
   }

   function sim(name, start /*, actions... */) {
diff --git a/devtools/client/sourceeditor/test/codemirror/mode/javascript/test.js b/devtools/client/sourceeditor/test/codemirror/mode/javascript/test.js
--- a/devtools/client/sourceeditor/test/codemirror/mode/javascript/test.js
+++ b/devtools/client/sourceeditor/test/codemirror/mode/javascript/test.js
@@ -1,95 +1,95 @@
 // CodeMirror, copyright (c) by Marijn Haverbeke and others
 // Distributed under an MIT license: http://codemirror.net/LICENSE

 (function() {
   var mode = CodeMirror.getMode({indentUnit: 2}, "javascript");
   function MT(name) { test.mode(name, mode, Array.prototype.slice.call(arguments, 1)); }

   MT("locals",
-     "[keyword function] [variable foo]([def a], [def b]) { [keyword var] [def c] [operator =] [number 10]; [keyword return] [variable-2 a] [operator +] [variable-2 c] [operator +] [variable d]; }");
+     "[keyword function] [def foo]([def a], [def b]) { [keyword var] [def c] [operator =] [number 10]; [keyword return] [variable-2 a] [operator +] [variable-2 c] [operator +] [variable d]; }");

   MT("comma-and-binop",
      "[keyword function](){ [keyword var] [def x] [operator =] [number 1] [operator +] [number 2], [def y]; }");

   MT("destructuring",
      "([keyword function]([def a], [[[def b], [def c] ]]) {",
      "  [keyword let] {[def d], [property foo]: [def c][operator =][number 10], [def x]} [operator =] [variable foo]([variable-2 a]);",
      "  [[[variable-2 c], [variable y] ]] [operator =] [variable-2 c];",
      "})();");

   MT("class_body",
-     "[keyword class] [variable Foo] {",
+     "[keyword class] [def Foo] {",
      "  [property constructor]() {}",
      "  [property sayName]() {",
      "    [keyword return] [string-2 `foo${][variable foo][string-2 }oo`];",
      "  }",
      "}");

   MT("class",
-     "[keyword class] [variable Point] [keyword extends] [variable SuperThing] {",
+     "[keyword class] [def Point] [keyword extends] [variable SuperThing] {",
      "  [property get] [property prop]() { [keyword return] [number 24]; }",
      "  [property constructor]([def x], [def y]) {",
      "    [keyword super]([string 'something']);",
      "    [keyword this].[property x] [operator =] [variable-2 x];",
      "  }",
      "}");

   MT("import",
-     "[keyword function] [variable foo]() {",
+     "[keyword function] [def foo]() {",
      "  [keyword import] [def $] [keyword from] [string 'jquery'];",
      "  [keyword import] { [def encrypt], [def decrypt] } [keyword from] [string 'crypto'];",
      "}");

   MT("const",
-     "[keyword function] [variable f]() {",
+     "[keyword function] [def f]() {",
      "  [keyword const] [[ [def a], [def b] ]] [operator =] [[ [number 1], [number 2] ]];",
      "}");

   MT("for/of",
-     "[keyword for]([keyword let] [variable of] [keyword of] [variable something]) {}");
+     "[keyword for]([keyword let] [def of] [keyword of] [variable something]) {}");

   MT("generator",
-     "[keyword function*] [variable repeat]([def n]) {",
+     "[keyword function*] [def repeat]([def n]) {",
      "  [keyword for]([keyword var] [def i] [operator =] [number 0]; [variable-2 i] [operator <] [variable-2 n]; [operator ++][variable-2 i])",
      "    [keyword yield] [variable-2 i];",
      "}");

   MT("quotedStringAddition",
-     "[keyword let] [variable f] [operator =] [variable a] [operator +] [string 'fatarrow'] [operator +] [variable c];");
+     "[keyword let] [def f] [operator =] [variable a] [operator +] [string 'fatarrow'] [operator +] [variable c];");

   MT("quotedFatArrow",
-     "[keyword let] [variable f] [operator =] [variable a] [operator +] [string '=>'] [operator +] [variable c];");
+     "[keyword let] [def f] [operator =] [variable a] [operator +] [string '=>'] [operator +] [variable c];");

   MT("fatArrow",
      "[variable array].[property filter]([def a] [operator =>] [variable-2 a] [operator +] [number 1]);",
      "[variable a];", // No longer in scope
-     "[keyword let] [variable f] [operator =] ([[ [def a], [def b] ]], [def c]) [operator =>] [variable-2 a] [operator +] [variable-2 c];",
+     "[keyword let] [def f] [operator =] ([[ [def a], [def b] ]], [def c]) [operator =>] [variable-2 a] [operator +] [variable-2 c];",
      "[variable c];");

   MT("spread",
-     "[keyword function] [variable f]([def a], [meta ...][def b]) {",
+     "[keyword function] [def f]([def a], [meta ...][def b]) {",
      "  [variable something]([variable-2 a], [meta ...][variable-2 b]);",
      "}");

   MT("comprehension",
-     "[keyword function] [variable f]() {",
+     "[keyword function] [def f]() {",
      "  [[([variable x] [operator +] [number 1]) [keyword for] ([keyword var] [def x] [keyword in] [variable y]) [keyword if] [variable pred]([variable-2 x]) ]];",
      "  ([variable u] [keyword for] ([keyword var] [def u] [keyword of] [variable generateValues]()) [keyword if] ([variable-2 u].[property color] [operator ===] [string 'blue']));",
      "}");

   MT("quasi",
      "[variable re][string-2 `fofdlakj${][variable x] [operator +] ([variable re][string-2 `foo`]) [operator +] [number 1][string-2 }fdsa`] [operator +] [number 2]");

   MT("quasi_no_function",
      "[variable x] [operator =] [string-2 `fofdlakj${][variable x] [operator +] [string-2 `foo`] [operator +] [number 1][string-2 }fdsa`] [operator +] [number 2]");

   MT("indent_statement",
-     "[keyword var] [variable x] [operator =] [number 10]",
+     "[keyword var] [def x] [operator =] [number 10]",
      "[variable x] [operator +=] [variable y] [operator +]",
      "  [atom Infinity]",
      "[keyword debugger];");

   MT("indent_if",
      "[keyword if] ([number 1])",
      "  [keyword break];",
      "[keyword else] [keyword if] ([number 2])",
@@ -100,24 +100,24 @@
      "  [keyword break];",
      "} [keyword else] [keyword if] ([number 2]) {",
      "  [keyword continue];",
      "} [keyword else] {",
      "  [number 10];",
      "}");

   MT("indent_for",
-     "[keyword for] ([keyword var] [variable i] [operator =] [number 0];",
+     "[keyword for] ([keyword var] [def i] [operator =] [number 0];",
      "     [variable i] [operator <] [number 100];",
      "     [variable i][operator ++])",
      "  [variable doSomething]([variable i]);",
      "[keyword debugger];");

   MT("indent_c_style",
-     "[keyword function] [variable foo]()",
+     "[keyword function] [def foo]()",
      "{",
      "  [keyword debugger];",
      "}");

   MT("indent_else",
      "[keyword for] (;;)",
      "  [keyword if] ([variable foo])",
      "    [keyword if] ([variable bar])",
@@ -135,34 +135,42 @@

   MT("indent_below_if",
      "[keyword for] (;;)",
      "  [keyword if] ([variable foo])",
      "    [number 1];",
      "[number 2];");

   MT("multilinestring",
-     "[keyword var] [variable x] [operator =] [string 'foo\\]",
+     "[keyword var] [def x] [operator =] [string 'foo\\]",
      "[string bar'];");

   MT("scary_regexp",
      "[string-2 /foo[[/]]bar/];");

   MT("indent_strange_array",
-     "[keyword var] [variable x] [operator =] [[",
+     "[keyword var] [def x] [operator =] [[",
      "  [number 1],,",
      "  [number 2],",
      "]];",
      "[number 10];");

   MT("param_default",
-     "[keyword function] [variable foo]([def x] [operator =] [string-2 `foo${][number 10][string-2 }bar`]) {",
+     "[keyword function] [def foo]([def x] [operator =] [string-2 `foo${][number 10][string-2 }bar`]) {",
      "  [keyword return] [variable-2 x];",
      "}");

+  MT("new_target",
+     "[keyword function] [def F]([def target]) {",
+     "  [keyword if] ([variable-2 target] [operator &&] [keyword new].[keyword target].[property name]) {",
+     "    [keyword return] [keyword new]",
+     "      .[keyword target];",
+     "  }",
+     "}");
+
   var jsonld_mode = CodeMirror.getMode(
     {indentUnit: 2},
     {name: "javascript", jsonld: true}
   );
   function LD(name) {
     test.mode(name, jsonld_mode, Array.prototype.slice.call(arguments, 1));
   }

diff --git a/devtools/client/sourceeditor/test/codemirror/test.js b/devtools/client/sourceeditor/test/codemirror/test.js
--- a/devtools/client/sourceeditor/test/codemirror/test.js
+++ b/devtools/client/sourceeditor/test/codemirror/test.js
@@ -1474,34 +1474,34 @@ testCM("lineWidgetChanged", function(cm)
     // If the widget is measured at a width much narrower than it is displayed at, the underHalf children will span two lines and break the test.
     // If the widget is measured at a width much wider than it is displayed at, the overHalf children will combine and break the test.
     // Note that this test only checks widgets where coverGutter is true, because these require extra styling to get the width right.
     // It may also be worthwhile to check this for non-coverGutter widgets.
     // Visually:
     // Good:
     // | ------------- display width ------------- |
     // | ------- widget-width when measured ------ |
-    // | | -- under-half -- | | -- under-half -- | |
+    // | | -- under-half -- | | -- under-half -- | |
     // | | --- over-half --- |                     |
     // | | --- over-half --- |                     |
     // Height: measured as 3 lines, same as it will be when actually displayed

     // Bad (too narrow):
     // | ------------- display width ------------- |
     // | ------ widget-width when measured ----- |  < -- uh oh
     // | | -- under-half -- |                    |
     // | | -- under-half -- |                    |  < -- when measured, shoved to next line
     // | | --- over-half --- |                   |
     // | | --- over-half --- |                   |
     // Height: measured as 4 lines, more than expected . Will be displayed as 3 lines!

     // Bad (too wide):
     // | ------------- display width ------------- |
     // | -------- widget-width when measured ------- | < -- uh oh
-    // | | -- under-half -- | | -- under-half -- |   |
+    // | | -- under-half -- | | -- under-half -- |   |
     // | | --- over-half --- | | --- over-half --- | | < -- when measured, combined on one line
     // Height: measured as 2 lines, less than expected. Will be displayed as 3 lines!

     var barelyUnderHalfWidthHtml = '<div style="display: inline-block; height: 1px; width: '+(285 - halfScrollbarWidth)+'px;"></div>';
     var barelyOverHalfWidthHtml = '<div style="display: inline-block; height: 1px; width: '+(305 - halfScrollbarWidth)+'px;"></div>';
     node.innerHTML = new Array(3).join(barelyUnderHalfWidthHtml) + new Array(3).join(barelyOverHalfWidthHtml);
     node.style.cssText = "background: yellow;font-size:0;line-height: " + (expectedWidgetHeight/expectedLinesInWidget) + "px;";
     return node;
