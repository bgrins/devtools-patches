# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1579282821 28800
#      Fri Jan 17 09:40:21 2020 -0800
# Node ID 7fcc9b2ef422cd9e31ffee42f73656e13ba3ab6b
# Parent  3f72a81bd12cb6048f03a96e5b403621f7fac052
ordinal on columns

Differential Revision: https://phabricator.services.mozilla.com/D60289

diff --git a/toolkit/content/widgets/tree.js b/toolkit/content/widgets/tree.js
--- a/toolkit/content/widgets/tree.js
+++ b/toolkit/content/widgets/tree.js
@@ -371,20 +371,24 @@
     connectedCallback() {
       if (this.delayConnectedCallback()) {
         return;
       }
 
       this.textContent = "";
       this.appendChild(this.content);
       this.initializeAttributeInheritance();
+      if (this.hasAttribute("ordinal")) {
+        this.style.MozBoxOrdinalGroup = this.getAttribute("ordinal");
+      }
     }
 
     set ordinal(val) {
       this.style.MozBoxOrdinalGroup = val;
+      this.setAttribute("ordinal", val);
       return val;
     }
 
     get ordinal() {
       var val = this.style.MozBoxOrdinalGroup;
       if (val == "") {
         return "1";
       }
@@ -1123,71 +1127,64 @@
         for (
           let col = this.columns.getFirstColumn();
           col;
           col = col.getNext()
         ) {
           cols.push(col.element);
         }
         for (let i = 0; i < cols.length; ++i) {
-          cols[i].style.MozBoxOrdinalGroup = i * 2 + 1;
+          cols[i].ordinal = i * 2 + 1;
         }
         // update the ordinal positions of splitters to even numbers, so that
         // they are in between columns
         var splitters = this.getElementsByTagName("splitter");
         for (let i = 0; i < splitters.length; ++i) {
           splitters[i].style.MozBoxOrdinalGroup = (i + 1) * 2;
         }
       }
     }
 
     _reorderColumn(aColMove, aColBefore, aBefore) {
       this._ensureColumnOrder();
 
       var i;
       var cols = [];
       var col = this.columns.getColumnFor(aColBefore);
-      if (
-        parseInt(aColBefore.style.MozBoxOrdinalGroup) <
-        parseInt(aColMove.style.MozBoxOrdinalGroup)
-      ) {
+      if (parseInt(aColBefore.ordinal) < parseInt(aColMove.ordinal)) {
         if (aBefore) {
           cols.push(aColBefore);
         }
         for (
           col = col.getNext();
           col.element != aColMove;
           col = col.getNext()
         ) {
           cols.push(col.element);
         }
 
-        aColMove.style.MozBoxOrdinalGroup = cols[0].style.MozBoxOrdinalGroup;
+        aColMove.ordinal = cols[0].ordinal;
         for (i = 0; i < cols.length; ++i) {
-          cols[i].style.MozBoxOrdinalGroup =
-            parseInt(cols[i].style.MozBoxOrdinalGroup) + 2;
+          cols[i].ordinal = parseInt(cols[i].ordinal) + 2;
         }
-      } else if (
-        aColBefore.style.MozBoxOrdinalGroup != aColMove.style.MozBoxOrdinalGroup
-      ) {
+      } else if (aColBefore.ordinal != aColMove.ordinal) {
         if (!aBefore) {
           cols.push(aColBefore);
         }
         for (
           col = col.getPrevious();
           col.element != aColMove;
           col = col.getPrevious()
         ) {
           cols.push(col.element);
         }
 
-        aColMove.style.MozBoxOrdinalGroup = cols[0].style.MozBoxOrdinalGroup;
+        aColMove.ordinal = cols[0].ordinal;
         for (i = 0; i < cols.length; ++i) {
-          cols[i].style.MozBoxOrdinalGroup =
-            parseInt(cols[i].style.MozBoxOrdinalGroup) - 2;
+          cols[i].ordinal = parseInt(cols[i].ordinal) - 2;
         }
       }
     }
 
     _getColumnAtX(aX, aThresh, aPos) {
       let isRTL = this.isRTL;
 
       if (aPos) {
