# HG changeset patch
# Parent db64c18d6ecc82d27772ea351e3c5512969483fe
# User Brian Grinstead <bgrinstead@mozilla.com>
added some debugging


diff --git a/browser/devtools/markupview/markup-view.js b/browser/devtools/markupview/markup-view.js
--- a/browser/devtools/markupview/markup-view.js
+++ b/browser/devtools/markupview/markup-view.js
@@ -506,22 +506,23 @@ MarkupView.prototype = {
     if (!aNode) {
       return null;
     }
 
     if (this._containers.has(aNode)) {
       return this._containers.get(aNode);
     }
 
+    let container;
     if (aNode === this.walker.rootNode) {
-      var container = new RootContainer(this, aNode);
+      container = new RootContainer(this, aNode);
       this._elt.appendChild(container.elt);
       this._rootNode = aNode;
     } else {
-      var container = new MarkupContainer(this, aNode, this._inspector);
+      container = new MarkupContainer(this, aNode, this._inspector);
       if (aFlashNode) {
         container.flashMutation();
       }
     }
 
     this._containers.set(aNode, container);
     container.childrenDirty = true;
 
@@ -990,16 +991,20 @@ MarkupView.prototype = {
 
       // If children are dirty, we got a change notification for this node
       // while the request was in progress, we need to do it again.
       if (aContainer.childrenDirty) {
         return this._updateChildren(aContainer, {expand: centered});
       }
 
       let fragment = this.doc.createDocumentFragment();
+      console.log("CHILDREN NODES", children)
+      let span = aContainer.elt.ownerDocument.createElement("span");
+      span.textContent = children.nodes.length;
+      fragment.appendChild(span);
 
       for (let child of children.nodes) {
         let container = this.importNode(child, flash);
         fragment.appendChild(container.elt);
       }
 
       while (aContainer.children.firstChild) {
         aContainer.children.removeChild(aContainer.children.firstChild);
diff --git a/toolkit/devtools/server/actors/inspector.js b/toolkit/devtools/server/actors/inspector.js
--- a/toolkit/devtools/server/actors/inspector.js
+++ b/toolkit/devtools/server/actors/inspector.js
@@ -1157,24 +1157,26 @@ var WalkerActor = protocol.ActorClass({
     let maxNodes = options.maxNodes || -1;
     if (maxNodes == -1) {
       maxNodes = Number.MAX_VALUE;
     }
 
     // We're going to create a few document walkers with the same filter,
     // make it easier.
     let filteredWalker = (node) => {
-      return documentWalker(node, this.rootWin, options.whatToShow);
+      return documentWalker(node, this.rootWin);
     };
 
+
     // Need to know the first and last child.
     let rawNode = node.rawNode;
     let firstChild = filteredWalker(rawNode).firstChild();
     let lastChild = filteredWalker(rawNode).lastChild();
 
+    console.log(node.rawNode, firstChild, lastChild);
     if (!firstChild) {
       // No children, we're done.
       return { hasFirst: true, hasLast: true, nodes: [] };
     }
 
     let start;
     if (options.center) {
       start = options.center.rawNode;
