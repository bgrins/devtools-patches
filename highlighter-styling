# HG changeset patch
# Parent e4e65a1c0dd6ae9298cb0a72464ce584cfc09845
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 938188 - Add highlight-on-hover to box model tab

diff --git a/browser/devtools/layoutview/view.js b/browser/devtools/layoutview/view.js
--- a/browser/devtools/layoutview/view.js
+++ b/browser/devtools/layoutview/view.js
@@ -509,17 +509,17 @@ LayoutView.prototype = {
 
 let elts;
 let tooltip;
 
 let onmouseover = function(e) {
   let region = e.target.getAttribute("data-box");
 
   tooltip.textContent = e.target.getAttribute("tooltip");
-  this.layoutview.showBoxModel({region});
+  this.layoutview.showBoxModel({region, showOnly: region});
 
   return false;
 }.bind(window);
 
 let onmouseout = function(e) {
   tooltip.textContent = "";
   this.layoutview.hideBoxModel();
 
diff --git a/toolkit/devtools/server/actors/highlighter.css b/toolkit/devtools/server/actors/highlighter.css
--- a/toolkit/devtools/server/actors/highlighter.css
+++ b/toolkit/devtools/server/actors/highlighter.css
@@ -21,20 +21,42 @@
 }
 
 :-moz-native-anonymous .highlighter-container [hidden] {
   display: none;
 }
 
 /* Box model highlighter */
 
-:-moz-native-anonymous .box-model-regions {
+:-moz-native-anonymous .box-model-regions > polygon {
   opacity: 0.6;
 }
 
+/*
+:-moz-native-anonymous .box-model-regions > polygon[foo=faded] {
+  opacity: 0.2;
+}*/
+
+/* desaturate 50% 
+:-moz-native-anonymous .box-model-content[foo=faded] {
+  fill: #aabfc8;
+}
+
+:-moz-native-anonymous .box-model-padding[foo=faded] {
+  fill: #919097;
+}
+
+:-moz-native-anonymous .box-model-border[foo=faded] {
+  fill: #444444;
+}
+
+:-moz-native-anonymous .box-model-margin[foo=faded] {
+  fill: #cfd88b;
+}
+*/
 :-moz-native-anonymous .box-model-content {
   fill: #87ceeb;
 }
 
 :-moz-native-anonymous .box-model-padding {
   fill: #6a5acd;
 }
 
diff --git a/toolkit/devtools/server/actors/highlighter.js b/toolkit/devtools/server/actors/highlighter.js
--- a/toolkit/devtools/server/actors/highlighter.js
+++ b/toolkit/devtools/server/actors/highlighter.js
@@ -819,32 +819,58 @@ BoxModelHighlighter.prototype = Heritage
         "width": "100%",
         "height": "100%",
         "style": "width:100%;height:100%;",
         "hidden": "true"
       },
       prefix: this.ID_CLASS_PREFIX
     });
 
+    let defs = createSVGNode(this.win, {
+      nodeType: "defs",
+      parent: svg
+    });
     let regions = createSVGNode(this.win, {
       nodeType: "g",
       parent: svg,
       attributes: {
         "class": "regions"
       },
       prefix: this.ID_CLASS_PREFIX
     });
 
     for (let region of BOX_MODEL_REGIONS) {
       createSVGNode(this.win, {
         nodeType: "polygon",
         parent: regions,
         attributes: {
           "class": region,
-          "id": region
+          "id": region,
+          "clip-path": "url(#" + this.ID_CLASS_PREFIX + "mask-" + region + ")"
+        },
+        prefix: this.ID_CLASS_PREFIX
+      });
+
+      let nodeMask = createSVGNode(this.win, {
+        nodeType: "clipPath",
+        parent: defs,
+        attributes: {
+          "class": "mask-" + region,
+          "id": "mask-" + region
+        },
+        prefix: this.ID_CLASS_PREFIX
+      });
+
+      let nodeMaskPath = createSVGNode(this.win, {
+        nodeType: "polygon",
+        parent: nodeMask,
+        attributes: {
+          "class": "mask-polygon-" + region,
+          "id": "mask-polygon-" + region,
+          "fill": "red"
         },
         prefix: this.ID_CLASS_PREFIX
       });
     }
 
     for (let side of BOX_MODEL_SIDES) {
       createSVGNode(this.win, {
         nodeType: "line",
@@ -926,17 +952,17 @@ BoxModelHighlighter.prototype = Heritage
       nodeType: "span",
       parent: texthbox,
       attributes: {
         "class": "nodeinfobar-dimensions",
         "id": "nodeinfobar-dimensions"
       },
       prefix: this.ID_CLASS_PREFIX
     });
-
+console.log("BUILD HIGHLIGHTER CONTAINER", highlighterContainer.outerHTML);
     return highlighterContainer;
   },
 
   /**
    * Destroy the nodes. Remove listeners.
    */
   destroy: function() {
     AutoRefreshHighlighter.prototype.destroy.call(this);
@@ -1051,43 +1077,77 @@ BoxModelHighlighter.prototype = Heritage
    * Update the box model as per the current node.
    *
    * @return {boolean}
    *         True if the current node has a box model to be highlighted
    */
   _updateBoxModel: function() {
     this.options.region = this.options.region || "content";
 
+    console.log("UPDATE BOX MODEL!!", this.options.region);
+    let lastBoxType = null;
     if (this._nodeNeedsHighlighting()) {
       for (let boxType of BOX_MODEL_REGIONS) {
         let {p1, p2, p3, p4} = this.currentQuads[boxType];
 
+        if (this.options.showOnly && this.options.showOnly === boxType) {
+          this.markup.setAttributeForElement(this.ID_CLASS_PREFIX + boxType,
+            "foo", "faded");
+        } else {
+          this.markup.setAttributeForElement(this.ID_CLASS_PREFIX + boxType,
+            "foo", "");
+        }
+
         if (this.regionFill[boxType]) {
           this.markup.setAttributeForElement(this.ID_CLASS_PREFIX + boxType,
             "style", "fill:" + this.regionFill[boxType]);
         } else {
           this.markup.setAttributeForElement(this.ID_CLASS_PREFIX + boxType,
             "style", "");
         }
 
-        if (!this.options.showOnly || this.options.showOnly === boxType) {
-          this.markup.setAttributeForElement(this.ID_CLASS_PREFIX + boxType,
+        this.markup.setAttributeForElement(this.ID_CLASS_PREFIX + boxType,
+          "points", p1.x + "," + p1.y + " " +
+                    p2.x + "," + p2.y + " " +
+                    p3.x + "," + p3.y + " " +
+                    p4.x + "," + p4.y);
+
+        console.log("Processing last ", lastBoxType);
+        if (lastBoxType) {
+
+          let lastBoxMask = this.ID_CLASS_PREFIX + "mask-" + lastBoxType;
+
+          console.log(lastBoxMask, lastBoxMask );
+          this.markup.setAttributeForElement(this.ID_CLASS_PREFIX + "mask-polygon-" + lastBoxType,
             "points", p1.x + "," + p1.y + " " +
                       p2.x + "," + p2.y + " " +
                       p3.x + "," + p3.y + " " +
                       p4.x + "," + p4.y);
-        } else {
-          this.markup.removeAttributeForElement(this.ID_CLASS_PREFIX + boxType, "points");
+          // this.markup.setAttributeForElement(this.ID_CLASS_PREFIX + lastBoxType,
+          //   "mask", "url(#" + lastBoxMask + ")");
+
+
         }
+        // if (!this.options.showOnly || this.options.showOnly === boxType) {
+        //   this.markup.setAttributeForElement(this.ID_CLASS_PREFIX + boxType,
+        //     "points", p1.x + "," + p1.y + " " +
+        //               p2.x + "," + p2.y + " " +
+        //               p3.x + "," + p3.y + " " +
+        //               p4.x + "," + p4.y);
+        // } else {
+        //   this.markup.removeAttributeForElement(this.ID_CLASS_PREFIX + boxType, "points");
+        // }
 
         if (boxType === this.options.region && !this.options.hideGuides) {
           this._showGuides(p1, p2, p3, p4);
         } else if (this.options.hideGuides) {
           this._hideGuides();
         }
+
+        lastBoxType = boxType;
       }
 
       // Un-zoom the root wrapper if the page was zoomed.
       let rootId = this.ID_CLASS_PREFIX + "root";
       this.markup.scaleRootElement(this.currentNode, rootId);
 
       return true;
     }
