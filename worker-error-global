# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  e4d573fb1fc1864531bc84c1a57ce61b79b9c076
Bug 1224073 - Use worker global instead of this.window for making debugger values for workers in console;r=ejpbruel

diff --git a/devtools/server/actors/webconsole.js b/devtools/server/actors/webconsole.js
--- a/devtools/server/actors/webconsole.js
+++ b/devtools/server/actors/webconsole.js
@@ -48,17 +48,17 @@ for (let name of ["WebConsoleUtils", "Co
  *        The connection to the client, DebuggerServerConnection.
  * @param object [aParentActor]
  *        Optional, the parent actor.
  */
 function WebConsoleActor(aConnection, aParentActor)
 {
   this.conn = aConnection;
   this.parentActor = aParentActor;
-
+  dump("CREATED NEW WCA " + aParentActor.actorPrefix + "\n");
   this._actorPool = new ActorPool(this.conn);
   this.conn.addActorPool(this._actorPool);
 
   this._prefs = {};
 
   this.dbg = this.parentActor.makeDebugger();
 
   this._netEvents = new Map();
@@ -294,16 +294,17 @@ WebConsoleActor.prototype =
    * @private
    * @type array
    */
   _webConsoleCommandsCache: null,
 
   actorPrefix: "console",
 
   get globalDebugObject() {
+
     return this.parentActor.threadActor.globalDebugObject;
   },
 
   grip: function WCA_grip()
   {
     return { actor: this.actorID };
   },
 
@@ -418,17 +419,20 @@ WebConsoleActor.prototype =
    * @param boolean aUseObjectGlobal
    *        If |true| the object global is determined and added as a debuggee,
    *        otherwise |this.window| is used when makeDebuggeeValue() is invoked.
    * @return object
    *         Debuggee value for |aValue|.
    */
   makeDebuggeeValue: function WCA_makeDebuggeeValue(aValue, aUseObjectGlobal)
   {
-    let global = this.window;
+    let glob = this.window;
+    if (isWorker) {
+      glob = this.parentActor.threadActor.global;
+    }
     if (aUseObjectGlobal && typeof aValue == "object") {
       try {
         global = Cu.getGlobalForObject(aValue);
       }
       catch (ex) {
         // The above can throw an exception if aValue is not an actual object.
       }
     }
@@ -1146,17 +1150,22 @@ WebConsoleActor.prototype =
 
     // If we've been given a frame actor in whose scope we should evaluate the
     // expression, be sure to use that frame's Debugger (that is, the JavaScript
     // debugger's Debugger) for the whole operation, not the console's Debugger.
     // (One Debugger will treat a different Debugger's Debugger.Object instances
     // as ordinary objects, not as references to be followed, so mixing
     // debuggers causes strange behaviors.)
     let dbg = frame ? frameActor.threadActor.dbg : this.dbg;
-    let dbgWindow = dbg.makeGlobalObjectReference(this.evalWindow);
+    let glob = this.evalWindow;
+    dump("EVALING IN WORKER " + this.globalDebugObject);
+    if (isWorker) {
+      glob = this.parentActor.threadActor.global;
+    }
+    let dbgWindow = dbg.makeGlobalObjectReference(glob);
 
     // If we have an object to bind to |_self|, create a Debugger.Object
     // referring to that object, belonging to dbg.
     let bindSelf = null;
     if (aOptions.bindObjectActor || aOptions.selectedObjectActor) {
       let objActor = this.getActorByID(aOptions.bindObjectActor ||
                                        aOptions.selectedObjectActor);
       if (objActor) {
diff --git a/devtools/server/worker.js b/devtools/server/worker.js
--- a/devtools/server/worker.js
+++ b/devtools/server/worker.js
@@ -68,21 +68,22 @@ this.addEventListener("message",  functi
 
       get sources() {
         if (sources === null) {
           sources = new TabSources(threadActor);
         }
         return sources;
       },
 
-      window: global
+      window: this
     };
 
-    let threadActor = new ThreadActor(parent, global);
+    let threadActor = new ThreadActor(parent, this);
     pool.addActor(threadActor);
+    parent.threadActor = threadActor;
 
     let consoleActor = new WebConsoleActor(connection, parent);
     pool.addActor(consoleActor);
 
     // Step 5: Send a response packet to the parent to notify
     // it that a connection has been established.
     postMessage(JSON.stringify({
       type: "connected",
diff --git a/devtools/shared/worker/loader.js b/devtools/shared/worker/loader.js
--- a/devtools/shared/worker/loader.js
+++ b/devtools/shared/worker/loader.js
@@ -478,16 +478,17 @@ var {
 
 // Create the default instance of the worker loader, using the APIs we defined
 // above.
 
 this.worker = new WorkerDebuggerLoader({
   createSandbox: createSandbox,
   globals: {
     "isWorker": true,
+    "workerGlobal": this,
     "dump": dump,
     "loader": loader,
     "reportError": reportError,
     "rpc": rpc,
     "setImmediate": setImmediate
   },
   loadSubScript: loadSubScript,
   modules: {
