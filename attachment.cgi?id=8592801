# vim: se ft=diff :
# HG changeset patch
# User Tim Nguyen <ntim.bugs@gmail.com>
# Date 2015-02-18 03:39
# Parent  7b33db8e73dbf67eff7456755b281c102583d9c2
Bug 1029371 - Make style editor media sidebar interact with media sidebar. r=bgrins, paul

diff --git a/browser/devtools/responsivedesign/responsivedesign.jsm b/browser/devtools/responsivedesign/responsivedesign.jsm
--- a/browser/devtools/responsivedesign/responsivedesign.jsm
+++ b/browser/devtools/responsivedesign/responsivedesign.jsm
@@ -46,16 +46,28 @@ this.ResponsiveUIManager = {
    *
    * @param aWindow the main window.
    * @param aTab the tab targeted.
    */
   toggle: function(aWindow, aTab) {
     if (this.isActiveForTab(aTab)) {
       ActiveTabs.get(aTab).close();
     } else {
+      this.launch(aWindow, aTab);
+    }
+  },
+
+  /**
+   * Launches the responsive mode.
+   *
+   * @param aWindow the main window.
+   * @param aTab the tab targeted.
+   */
+  launch: function(aWindow, aTab) {
+    if (!this.isActiveForTab(aTab)) {
       new ResponsiveUI(aWindow, aTab);
     }
   },
 
   /**
    * Returns true if responsive view is active for the provided tab.
    *
    * @param aTab the tab targeted.
@@ -78,23 +90,23 @@ this.ResponsiveUIManager = {
    * @param aTab the tab targeted.
    * @param aCommand the command name.
    * @param aArgs command arguments.
    */
   handleGcliCommand: function(aWindow, aTab, aCommand, aArgs) {
     switch (aCommand) {
       case "resize to":
         if (!this.isActiveForTab(aTab)) {
-          new ResponsiveUI(aWindow, aTab);
+          this.launch(aWindow, aTab);
         }
         ActiveTabs.get(aTab).setSize(aArgs.width, aArgs.height);
         break;
       case "resize on":
         if (!this.isActiveForTab(aTab)) {
-          new ResponsiveUI(aWindow, aTab);
+          this.launch(aWindow, aTab);
         }
         break;
       case "resize off":
         if (this.isActiveForTab(aTab)) {
           ActiveTabs.get(aTab).close();
         }
         break;
       case "resize toggle":
@@ -855,46 +867,48 @@ ResponsiveUI.prototype = {
 
   /**
    * Change the size of the browser.
    *
    * @param aWidth width of the browser.
    * @param aHeight height of the browser.
    */
   setSize: function RUI_setSize(aWidth, aHeight) {
+    this.setWidth(aWidth);
+    this.setHeight(aHeight);
+  },
+
+  setWidth: function RUI_setWidth(aWidth) {
     aWidth = Math.min(Math.max(aWidth, MIN_WIDTH), MAX_WIDTH);
-    aHeight = Math.min(Math.max(aHeight, MIN_HEIGHT), MAX_HEIGHT);
+    this.stack.style.maxWidth = this.stack.style.minWidth = aWidth + "px";
 
-    // We resize the containing stack.
-    let style = "max-width: %width;" +
-                "min-width: %width;" +
-                "max-height: %height;" +
-                "min-height: %height;";
-
-    style = style.replace(/%width/g, aWidth + "px");
-    style = style.replace(/%height/g, aHeight + "px");
-
-    this.stack.setAttribute("style", style);
-
-    if (!this.ignoreY)
-      this.resizeBarV.setAttribute("top", Math.round(aHeight / 2));
     if (!this.ignoreX)
       this.resizeBarH.setAttribute("left", Math.round(aWidth / 2));
 
     let selectedPreset = this.menuitems.get(this.selectedItem);
 
-    // We update the custom menuitem if we are using it
     if (selectedPreset.custom) {
       selectedPreset.width = aWidth;
-      selectedPreset.height = aHeight;
-
       this.setMenuLabel(this.selectedItem, selectedPreset);
     }
   },
 
+  setHeight: function RUI_setHeight(aHeight) {
+    aHeight = Math.min(Math.max(aHeight, MIN_HEIGHT), MAX_HEIGHT);
+    this.stack.style.maxHeight = this.stack.style.minHeight = aHeight + "px";
+
+    if (!this.ignoreY)
+      this.resizeBarV.setAttribute("top", Math.round(aHeight / 2));
+
+    let selectedPreset = this.menuitems.get(this.selectedItem);
+    if (selectedPreset.custom) {
+      selectedPreset.height = aHeight;
+      this.setMenuLabel(this.selectedItem, selectedPreset);
+    }
+  },
   /**
    * Start the process of resizing the browser.
    *
    * @param aEvent
    */
   startResizing: function RUI_startResizing(aEvent) {
     let selectedPreset = this.menuitems.get(this.selectedItem);
 
diff --git a/browser/devtools/styleeditor/StyleEditorUI.jsm b/browser/devtools/styleeditor/StyleEditorUI.jsm
--- a/browser/devtools/styleeditor/StyleEditorUI.jsm
+++ b/browser/devtools/styleeditor/StyleEditorUI.jsm
@@ -16,16 +16,17 @@ Cu.import("resource://gre/modules/Servic
 Cu.import("resource://gre/modules/NetUtil.jsm");
 Cu.import("resource://gre/modules/osfile.jsm");
 Cu.import("resource://gre/modules/Task.jsm");
 Cu.import("resource://gre/modules/devtools/event-emitter.js");
 Cu.import("resource:///modules/devtools/gDevTools.jsm");
 Cu.import("resource:///modules/devtools/StyleEditorUtil.jsm");
 Cu.import("resource:///modules/devtools/SplitView.jsm");
 Cu.import("resource:///modules/devtools/StyleSheetEditor.jsm");
+Cu.import("resource:///modules/devtools/responsivedesign.jsm");
 const { Promise: promise } = Cu.import("resource://gre/modules/Promise.jsm", {});
 
 XPCOMUtils.defineLazyModuleGetter(this, "PluralForm",
                                   "resource://gre/modules/PluralForm.jsm");
 
 const require = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools.require;
 const { PrefObserver, PREF_ORIG_SOURCES } = require("devtools/styleeditor/utils");
 const csscoverage = require("devtools/server/actors/csscoverage");
@@ -828,20 +829,24 @@ StyleEditorUI.prototype = {
         inSource = true;
 
         let div = this._panelDoc.createElement("div");
         div.className = "media-rule-label";
         div.addEventListener("click", this._jumpToLocation.bind(this, location));
 
         let cond = this._panelDoc.createElement("div");
         cond.textContent = rule.conditionText;
-        cond.className = "media-rule-condition"
+        cond.className = "media-rule-condition";
         if (!rule.matches) {
           cond.classList.add("media-condition-unmatched");
         }
+        if (this._target._tab.tagName == "tab") {
+          cond.innerHTML = cond.textContent.replace(/(min\-|max\-)(width|height):\s\d+(px)/ig, "<a href='#' class='media-responsive-mode-toggle'>" + "$&".replace(/<|>|"|'/g, "") + "</a>");
+          cond.addEventListener("click", this._onMediaConditionClick.bind(this));
+        }
         div.appendChild(cond);
 
         let link = this._panelDoc.createElement("div");
         link.className = "media-rule-line theme-link";
         if (location.line != -1) {
           link.textContent = ":" + location.line;
         }
         div.appendChild(link);
@@ -851,16 +856,59 @@ StyleEditorUI.prototype = {
 
       sidebar.hidden = !showSidebar || !inSource;
 
       this.emit("media-list-changed", editor);
     }.bind(this)).then(null, Cu.reportError);
   },
 
   /**
+    * Called when a media condition is clicked
+    * If a responsive mode link is clicked, it will launch it.
+    *
+    * @param {object} e
+    *        Event object
+    */
+  _onMediaConditionClick: function(e) {
+    if (!e.target.matches(".media-responsive-mode-toggle")) {
+      return;
+    }
+    let conditionText = e.target.textContent;
+    let isWidthCond = conditionText.toLowerCase().indexOf("width") > -1;
+    let mediaVal = parseInt(/\d+/.exec(conditionText));
+
+    let options = isWidthCond ? {width: mediaVal} : {height: mediaVal};
+    this._launchResponsiveMode(options);
+    e.preventDefault();
+    e.stopPropagation();
+  },
+
+  /**
+   * Launches the responsive mode with a specific width or height
+   *
+   * @param  {object} options
+   *         Object with width or/and height properties.
+   */
+  _launchResponsiveMode: function(options = {}) {
+    let tab = this._target.tab;
+    let win = this._target.tab.ownerGlobal;
+
+    ResponsiveUIManager.launch(win, tab);
+    if (options.width && options.height) {
+      ResponsiveUIManager.getResponsiveUIForTab(tab).setSize(options.width, options.height);
+    }
+    else if (options.width) {
+      ResponsiveUIManager.getResponsiveUIForTab(tab).setWidth(options.width);
+    }
+    else if (options.height) {
+      ResponsiveUIManager.getResponsiveUIForTab(tab).setHeight(options.height);
+    }
+  },
+
+  /**
    * Jump cursor to the editor for a stylesheet and line number for a rule.
    *
    * @param  {object} location
    *         Location object with 'line', 'column', and 'source' properties.
    */
   _jumpToLocation: function(location) {
     let source = location.styleSheet || location.source;
     this.selectStyleSheet(source, location.line - 1, location.column - 1);
diff --git a/browser/devtools/styleeditor/test/browser_styleeditor_media_sidebar.js b/browser/devtools/styleeditor/test/browser_styleeditor_media_sidebar.js
--- a/browser/devtools/styleeditor/test/browser_styleeditor_media_sidebar.js
+++ b/browser/devtools/styleeditor/test/browser_styleeditor_media_sidebar.js
@@ -1,12 +1,12 @@
 /* vim: set ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
-
+Cu.import("resource:///modules/devtools/responsivedesign.jsm");
 // https rather than chrome to improve coverage
 const TESTCASE_URI = TEST_BASE_HTTPS + "media-rules.html";
 const MEDIA_PREF = "devtools.styleeditor.showMediaSidebar";
 
 const RESIZE = 300;
 const LABELS = ["not all", "all", "(max-width: 400px)", "(max-width: 600px)"];
 const LINE_NOS = [1, 7, 19, 25];
 const NEW_RULE = "\n@media (max-width: 600px) { div { color: blue; } }";
@@ -26,16 +26,19 @@ add_task(function*() {
   // Test editor with @media rules
   let mediaEditor = ui.editors[1];
   yield openEditor(mediaEditor);
   testMediaEditor(mediaEditor);
 
   // Test that sidebar hides when flipping pref
   yield testShowHide(ui, mediaEditor);
 
+  // Test linkified media sidebar labels
+  yield testLinkifiedConditions(mediaEditor, gBrowser.selectedTab);
+
   // Test adding a rule updates the list
   yield testMediaRuleAdded(ui, mediaEditor);
 
   // Test resizing and seeing @media matching state change
   let originalWidth = window.outerWidth;
   let originalHeight = window.outerHeight;
 
   let onMatchesChange = listenForMediaChange(ui);
@@ -52,32 +55,67 @@ function testPlainEditor(editor) {
   is(sidebar.hidden, true, "sidebar is hidden on editor without @media");
 }
 
 function testMediaEditor(editor) {
   let sidebar = editor.details.querySelector(".stylesheet-sidebar");
   is(sidebar.hidden, false, "sidebar is showing on editor with @media");
 
   let entries = [...sidebar.querySelectorAll(".media-rule-label")];
-  is(entries.length, 3, "three @media rules displayed in sidebar");
+  is(entries.length, 6, "six @media rules displayed in sidebar");
 
   testRule(entries[0], LABELS[0], false, LINE_NOS[0]);
   testRule(entries[1], LABELS[1], true, LINE_NOS[1]);
   testRule(entries[2], LABELS[2], false, LINE_NOS[2]);
 }
 
 function testMediaMatchChanged(editor) {
   let sidebar = editor.details.querySelector(".stylesheet-sidebar");
 
   let cond = sidebar.querySelectorAll(".media-rule-condition")[2];
   is(cond.textContent, "(max-width: 400px)", "third rule condition text is correct");
   ok(!cond.classList.contains("media-condition-unmatched"),
      "media rule is now matched after resizing");
 }
 
+function testLinkifiedConditions(editor, tab) {
+  let sidebar = editor.details.querySelector(".stylesheet-sidebar");
+  let conditions = sidebar.querySelectorAll(".media-rule-condition");
+  let responsiveModeToggleClass = ".media-responsive-mode-toggle";
+
+  ok(!conditions[0].querySelector(responsiveModeToggleClass),
+    "There should be no links in the first media rule.");
+
+  ok(!conditions[1].querySelector(responsiveModeToggleClass),
+    "There should be no links in the second media rule.")
+
+  ok(conditions[2].querySelector(responsiveModeToggleClass),
+     "media width rule should have a link to toggle responsive mode");
+
+  conditions[2].querySelector(responsiveModeToggleClass).click();
+  ResponsiveUIManager.on("on", () => {
+    ok(ResponsiveUIManager.isActiveForTab(tab), "Responsive mode should be active.");
+    ok(!conditions[2].classList.contains("media-condition-unmatched"),
+         "media rule should now be matched after responsive mode is active");
+    ResponsiveUIManager.toggle(window, tab);
+  });
+
+  ResponsiveUIManager.on("off", () => {
+    ok(!ResponsiveUIManager.isActiveForTab(tab), "Responsive mode should no longer be active.");
+    ok(conditions[2].classList.contains("media-condition-unmatched"),
+       "media rule should now be unmatched after responsive mode is closed");
+
+    is(conditions[3].querySelectorAll(responsiveModeToggleClass).length, 2,
+       "There should be 2 linkified items in the media rule");
+
+    is(conditions[4].querySelectorAll(responsiveModeToggleClass).length, 2,
+       "There should be 2 linkified items in the media rule");
+  });
+}
+
 function* testShowHide(UI, editor) {
   let sidebarChange = listenForMediaChange(UI);
   Services.prefs.setBoolPref(MEDIA_PREF, false);
   yield sidebarChange;
 
   let sidebar = editor.details.querySelector(".stylesheet-sidebar");
   is(sidebar.hidden, true, "sidebar is hidden after flipping pref");
 
@@ -94,19 +132,19 @@ function* testMediaRuleAdded(UI, editor)
   text += NEW_RULE;
 
   let listChange = listenForMediaChange(UI);
   editor.sourceEditor.setText(text);
   yield listChange;
 
   let sidebar = editor.details.querySelector(".stylesheet-sidebar");
   let entries = [...sidebar.querySelectorAll(".media-rule-label")];
-  is(entries.length, 4, "four @media rules after changing text");
+  is(entries.length, 5, "five @media rules after changing text");
 
-  testRule(entries[3], LABELS[3], false, LINE_NOS[3]);
+  testRule(entries[5], LABELS[3], false, LINE_NOS[3]);
 }
 
 function testRule(rule, text, matches, lineno) {
   let cond = rule.querySelector(".media-rule-condition");
   is(cond.textContent, text, "media label is correct for " + text);
 
   let matched = !cond.classList.contains("media-condition-unmatched");
   ok(matches ? matched : !matched,
diff --git a/browser/devtools/styleeditor/test/media-rules.css b/browser/devtools/styleeditor/test/media-rules.css
--- a/browser/devtools/styleeditor/test/media-rules.css
+++ b/browser/devtools/styleeditor/test/media-rules.css
@@ -16,8 +16,20 @@ div {
   background-color: ghostwhite;
 }
 
 @media (max-width: 400px) {
   div {
     color: green;
   }
 }
+
+@media (min-width: 300px) and (max-width: 200px) {
+  div {
+    color: gray;
+  }
+}
+
+@media (min-height: 200px) and (max-height: 400px) {
+  div {
+    color: orange;
+  }
+}
\ No newline at end of file
diff --git a/browser/themes/shared/devtools/styleeditor.css b/browser/themes/shared/devtools/styleeditor.css
--- a/browser/themes/shared/devtools/styleeditor.css
+++ b/browser/themes/shared/devtools/styleeditor.css
@@ -86,26 +86,27 @@
 }
 
 .media-rule-label {
   padding: 4px;
   cursor: pointer;
   border-bottom: 1px solid;
 }
 
+.media-responsive-mode-toggle {
+  color: var(--theme-highlight-blue);
+  text-decoration: underline;
+}
+
 .media-rule-line {
   -moz-padding-start: 4px;
 }
 
-.theme-light .media-condition-unmatched {
-  color: grey;
-}
-
-.theme-dark .media-condition-unmatched {
-  color: #606C75;
+.media-condition-unmatched {
+  opacity: 0.4;
 }
 
 .stylesheet-enabled {
   padding: 8px 0;
   margin: 0 8px;
   background-image: url(itemToggle.png);
   background-repeat: no-repeat;
   background-clip: content-box;
