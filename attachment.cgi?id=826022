# HG changeset patch
# User Panos Astithas <past@mozilla.com>
# Date 1383329390 -7200
#      Fri Nov 01 20:09:50 2013 +0200
# Node ID e10ec6f822d5edd4729856efefc734e7d14ce47f
# Parent  56b9fc3905ee9619dbe6628571d1e37f1c224455
Small cleanups and fixes for browser_dbg_clean-exit-window.js (bug 932880); r=fitzgen

diff --git a/browser/devtools/debugger/test/browser_dbg_clean-exit-window.js b/browser/devtools/debugger/test/browser_dbg_clean-exit-window.js
--- a/browser/devtools/debugger/test/browser_dbg_clean-exit-window.js
+++ b/browser/devtools/debugger/test/browser_dbg_clean-exit-window.js
@@ -13,33 +13,31 @@ function test() {
   addWindow(TAB_URL)
     .then(win => initDebugger(TAB_URL, win))
     .then(([aTab, aDebuggee, aPanel, aWindow]) => {
       gDebuggee = aDebuggee;
       gPanel = aPanel;
       gDebugger = gPanel.panelWin;
       gWindow = aWindow;
 
-      return testCleanExit(gWindow);
+      return testCleanExit();
     })
     .then(null, aError => {
       ok(false, "Got an error: " + aError.message + "\n" + aError.stack);
     });
 }
 
-function testCleanExit(aWindow) {
+function testCleanExit() {
   let deferred = promise.defer();
 
-  gWindow = aWindow;
   ok(!!gWindow, "Second window created.");
 
   gWindow.focus();
 
-  let topWindow = Services.wm.getMostRecentWindow("navigator:browser");
-  is(topWindow, gWindow,
+  is(Services.wm.getMostRecentWindow("navigator:browser"), gWindow,
     "The second window is on top.");
 
   let isActive = promise.defer();
   let isLoaded = promise.defer();
 
   promise.all([isActive.promise, isLoaded.promise]).then(() => {
     gWindow.BrowserChromeTest.runWhenReady(() => {
       waitForSourceAndCaretAndScopes(gPanel, ".html", 16).then(() => {
@@ -62,18 +60,17 @@ function testCleanExit(aWindow) {
       }
       gWindow.removeEventListener("activate", onActivate, true);
       isActive.resolve();
     }, true);
   } else {
     isActive.resolve();
   }
 
-  let contentLocation = gWindow.content.location.href;
-  if (contentLocation != TAB_URL) {
+  if (gWindow.content.location.href != TAB_URL) {
     gWindow.document.addEventListener("load", function onLoad(aEvent) {
       if (aEvent.target.documentURI != TAB_URL) {
         return;
       }
       gWindow.document.removeEventListener("load", onLoad, true);
       isLoaded.resolve();
     }, true);
   } else {
diff --git a/toolkit/devtools/server/actors/webbrowser.js b/toolkit/devtools/server/actors/webbrowser.js
--- a/toolkit/devtools/server/actors/webbrowser.js
+++ b/toolkit/devtools/server/actors/webbrowser.js
@@ -542,17 +542,22 @@ BrowserTabActor.prototype = {
   },
 
   /**
    * Getter for the tab URL.
    * @return string
    *         Tab URL.
    */
   get url() {
-    return this.browser.currentURI.spec;
+    if (this.browser.currentURI) {
+      return this.browser.currentURI.spec;
+    }
+    // Abrupt closing of the browser window may leave callbacks without a
+    // currentURI.
+    return null;
   },
 
   /**
    * Getter for the tab content window, will be used by child actors to target
    * the right window.
    * @return nsIDOMWindow
    *         Tab content window.
    */
