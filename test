# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  04144901baf68f0f8e4957b15bf29ccdce286fc8
asdf

diff --git a/browser/devtools/markupview/test/browser_markupview_dragdrop_isDragging.js b/browser/devtools/markupview/test/browser_markupview_dragdrop_isDragging.js
--- a/browser/devtools/markupview/test/browser_markupview_dragdrop_isDragging.js
+++ b/browser/devtools/markupview/test/browser_markupview_dragdrop_isDragging.js
@@ -20,27 +20,42 @@ add_task(function*() {
   el._onMouseDown({
     target: el.tagLine,
     pageX: rect.x,
     pageY: rect.y,
     stopPropagation: function() {},
     preventDefault: function() {}
   });
 
-  is(el.isDragging, false, "isDragging should not be set to true immedietly");
+  ok(!el.isDragging, "isDragging should not be set to true immediately");
 
   info("Waiting " + (GRAB_DELAY + 1) + "ms");
   yield wait(GRAB_DELAY + 1);
   ok(el.isDragging, "isDragging true after GRAB_DELAY has passed");
 
   let dropCompleted = once(inspector.markup, "drop-completed");
 
   info("Simulating mouseUp on #test");
   el._onMouseUp({
     target: el.tagLine,
     pageX: rect.x,
     pageY: rect.y
   });
 
   yield dropCompleted;
 
-  is(el.isDragging, false, "isDragging false after mouseUp");
+  ok(!el.isDragging, "isDragging false after mouseUp");
+
+  info("Simulating middle click on #test");
+  el._onMouseDown({
+    target: el.tagLine,
+    button: 1,
+    pageX: rect.x,
+    pageY: rect.y,
+    stopPropagation: function() {},
+    preventDefault: function() {}
+  });
+  ok(!el.isDragging, "isDragging should not be set to true immediately");
+
+  info("Waiting " + (GRAB_DELAY + 1) + "ms");
+  yield wait(GRAB_DELAY + 1);
+  ok(!el.isDragging, "isDragging never starts after middle click after mouseUp");
 });
diff --git a/browser/devtools/markupview/test/browser_markupview_links_07.js b/browser/devtools/markupview/test/browser_markupview_links_07.js
--- a/browser/devtools/markupview/test/browser_markupview_links_07.js
+++ b/browser/devtools/markupview/test/browser_markupview_links_07.js
@@ -3,31 +3,38 @@
  http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
 // Tests that a middle-click or meta/ctrl-click on links in attributes actually
 // do follows the link.
 
 const TEST_URL = TEST_URL_ROOT + "doc_markup_links.html";
+const GRAB_DELAY = 400;
 
 add_task(function*() {
   let {inspector} = yield addTab(TEST_URL).then(openInspector);
 
   info("Select a node with a URI attribute");
   yield selectNode("video", inspector);
 
   info("Find the link element from the markup-view");
-  let {editor} = yield getContainerForSelector("video", inspector);
+  let container = yield getContainerForSelector("video", inspector);
+  let editor = container.editor;
   let linkEl = editor.attrElements.get("poster").querySelector(".link");
 
   info("Follow the link with middle-click and wait for the new tab to open");
   yield followLinkWaitForTab(linkEl, false,
                              TEST_URL_ROOT + "doc_markup_tooltip.png");
 
+  ok(!container.isDragging, "isDragging shouldn't be true");
+  info("Waiting " + (GRAB_DELAY + 1) + "ms");
+  yield wait(GRAB_DELAY + 1);
+  ok(!container.isDragging, "isDragging shouldn't be true");
+
   info("Follow the link with meta/ctrl-click and wait for the new tab to open");
   yield followLinkWaitForTab(linkEl, true,
                              TEST_URL_ROOT + "doc_markup_tooltip.png");
 
   info("Select a node with a IDREF attribute");
   yield selectNode("label", inspector);
 
   info("Find the link element from the markup-view that contains the ref");
