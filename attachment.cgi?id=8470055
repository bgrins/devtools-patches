# HG changeset patch
# Parent 3391c2e2a00c0408e62f841cbf7c2dcfd40c6d09
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  e965a1a534ecb6635975fae33a929dc6c06bcb50
Bug 1045075 - Add ability to create new folders in WebIDE

diff --git a/browser/devtools/projecteditor/lib/plugins/new/new.js b/browser/devtools/projecteditor/lib/plugins/new/new.js
--- a/browser/devtools/projecteditor/lib/plugins/new/new.js
+++ b/browser/devtools/projecteditor/lib/plugins/new/new.js
@@ -8,68 +8,85 @@ const { Class } = require("sdk/core/heri
 const { registerPlugin, Plugin } = require("projecteditor/plugins/core");
 const { getLocalizedString } = require("projecteditor/helpers/l10n");
 
 // Handles the new command.
 var NewFile = Class({
   extends: Plugin,
 
   init: function() {
-    this.command = this.host.addCommand(this, {
-      id: "cmd-new",
-      key: getLocalizedString("projecteditor.new.commandkey"),
+    this.commandNewFile = this.host.addCommand(this, {
+      id: "cmd-new-file",
+      key: getLocalizedString("projecteditor.newFile.commandkey"),
       modifiers: "accel"
     });
+    this.commandNewFolder = this.host.addCommand(this, {
+      id: "cmd-new-folder",
+    });
     this.host.createMenuItem({
       parent: this.host.fileMenuPopup,
-      label: getLocalizedString("projecteditor.newLabel"),
-      command: "cmd-new",
-      key: "key_cmd-new"
+      label: getLocalizedString("projecteditor.newFileLabel"),
+      command: "cmd-new-file",
+      key: "key_cmd-new-file"
     });
     this.host.createMenuItem({
       parent: this.host.contextMenuPopup,
-      label: getLocalizedString("projecteditor.newLabel"),
-      command: "cmd-new"
+      label: getLocalizedString("projecteditor.newFileLabel"),
+      command: "cmd-new-file"
+    });
+    this.host.createMenuItem({
+      parent: this.host.contextMenuPopup,
+      label: getLocalizedString("projecteditor.newFolderLabel"),
+      command: "cmd-new-folder"
     });
   },
 
   onCommand: function(cmd) {
-    if (cmd === "cmd-new") {
-      let tree = this.host.projectTree;
-      let resource = tree.getSelectedResource();
-      parent = resource.isDir ? resource : resource.parent;
-      sibling = resource.isDir ? null : resource;
+    let tree = this.host.projectTree;
+    let resource = tree.getSelectedResource();
+    let parent = resource.isDir ? resource : resource.parent;
+    let sibling = resource.isDir ? null : resource;
 
-      if (!("createChild" in parent)) {
-        return;
-      }
+    if (cmd === "cmd-new-folder") {
+      let template = "folder{1}";
+      let name = this.suggestName(parent, template);
+      tree.promptNew(name, parent, sibling).then(name => {
+        name = this.ensureUniqueName(parent, name, template);
+        return parent.createDirectory(name);
+      }).then(resource => {
+        tree.selectResource(resource);
+      }).then(null, console.error);
+    }
+    if (cmd === "cmd-new-file") {
 
       let extension = sibling ? sibling.contentCategory : parent.store.defaultCategory;
       let template = "untitled{1}." + extension;
       let name = this.suggestName(parent, template);
 
       tree.promptNew(name, parent, sibling).then(name => {
+        name = this.ensureUniqueName(parent, name, template);
 
-        // XXX: sanitize bad file names.
-
-        // If the name is already taken, just add/increment a number.
-        if (parent.hasChild(name)) {
-          let matches = name.match(/([^\d.]*)(\d*)([^.]*)(.*)/);
-          template = matches[1] + "{1}" + matches[3] + matches[4];
-          name = this.suggestName(parent, template, parseInt(matches[2]) || 2);
-        }
-
-        return parent.createChild(name);
+        return parent.createTextFile(name);
       }).then(resource => {
         tree.selectResource(resource);
         this.host.currentEditor.focus();
       }).then(null, console.error);
     }
   },
 
+  ensureUniqueName: function(parent, name, template) {
+    // XXX: sanitize bad file names.
+    if (parent.hasChild(name)) {
+      let matches = name.match(/([^\d.]*)(\d*)([^.]*)(.*)/);
+      template = matches[1] + "{1}" + matches[3] + matches[4];
+      name = this.suggestName(parent, template, parseInt(matches[2]) || 2);
+    }
+    return name;
+  },
+
   suggestName: function(parent, template, start=1) {
     let i = start;
     let name;
     do {
       name = template.replace("\{1\}", i === 1 ? "" : i);
       i++;
     } while (parent.hasChild(name));
 
diff --git a/browser/devtools/projecteditor/lib/stores/local.js b/browser/devtools/projecteditor/lib/stores/local.js
--- a/browser/devtools/projecteditor/lib/stores/local.js
+++ b/browser/devtools/projecteditor/lib/stores/local.js
@@ -27,17 +27,17 @@ const IGNORE_REGEX = /(^\.)|(\~$)|(^node
  *
  * This object emits the following events:
  *   - "resource-added": When a resource is added
  *   - "resource-removed": When a resource is removed
  */
 var LocalStore = Class({
   extends: Store,
 
-  defaultCategory: "js",
+  defaultCategory: "html",
 
   initialize: function(path) {
     this.initStore();
     this.path = OS.Path.normalize(path);
     this.rootPath = this.path;
     this.displayName = this.path;
     this.root = this._forPath(this.path);
     this.notifyAdd(this.root);
diff --git a/browser/devtools/projecteditor/lib/stores/resource.js b/browser/devtools/projecteditor/lib/stores/resource.js
--- a/browser/devtools/projecteditor/lib/stores/resource.js
+++ b/browser/devtools/projecteditor/lib/stores/resource.js
@@ -281,29 +281,56 @@ var FileResource = Class({
     if (this.isDir) {
       return OS.File.removeDir(this.path);
     } else {
       return OS.File.remove(this.path);
     }
   },
 
   /**
+   * Add a directory child of this FileResource.
+   * This instance must be a directory.
+   *
+   * @param string name
+   *               The folder name (path will be generated based on this.path).
+   * @returns Promise
+   *          Resolves with the new FileResource once it has
+   *          been written to disk.
+   *          Rejected if this is not a directory.
+   */
+  createDirectory: function(name) {
+    if (!this.isDir) {
+      return promise.reject(new Error("Cannot add child to a regular file"));
+    }
+    let newPath = OS.Path.join(this.path, name);
+    return OS.File.makeDir(newPath).then(() => {
+      return this.store.refresh();
+    }).then(() => {
+      let resource = this.store.resources.get(newPath);
+      if (!resource) {
+        throw new Error("Error creating " + newPath);
+      }
+      return resource;
+    });
+  },
+
+  /**
    * Add a text file as a child of this FileResource.
    * This instance must be a directory.
    *
    * @param string name
    *               The filename (path will be generated based on this.path).
    *        string initial
    *               The content to write to the new file.
    * @returns Promise
    *          Resolves with the new FileResource once it has
    *          been written to disk.
    *          Rejected if this is not a directory.
    */
-  createChild: function(name, initial="") {
+  createTextFile: function(name, initial="") {
     if (!this.isDir) {
       return promise.reject(new Error("Cannot add child to a regular file"));
     }
 
     let newPath = OS.Path.join(this.path, name);
 
     let buffer = initial ? gEncoder.encode(initial) : "";
     return OS.File.writeAtomic(newPath, buffer, {
diff --git a/browser/devtools/projecteditor/lib/tree.js b/browser/devtools/projecteditor/lib/tree.js
--- a/browser/devtools/projecteditor/lib/tree.js
+++ b/browser/devtools/projecteditor/lib/tree.js
@@ -247,16 +247,18 @@ var TreeView = Class({
     let item = this.doc.createElement("li");
     item.className = "child";
     let placeholder = this.doc.createElementNS(HTML_NS, "div");
     placeholder.className = "child";
     item.appendChild(placeholder);
 
     let children = parentContainer.children;
     sibling = sibling ? this._containers.get(sibling).elt : null;
+
+    parentContainer.expanded = true;
     parentContainer.children.insertBefore(item, sibling ? sibling.nextSibling : children.firstChild);
 
     new InplaceEditor({
       element: placeholder,
       initial: initial,
       start: editor => {
         editor.input.select();
       },
diff --git a/browser/devtools/projecteditor/test/browser_projecteditor_delete_file.js b/browser/devtools/projecteditor/test/browser_projecteditor_delete_file.js
--- a/browser/devtools/projecteditor/test/browser_projecteditor_delete_file.js
+++ b/browser/devtools/projecteditor/test/browser_projecteditor_delete_file.js
@@ -1,57 +1,47 @@
 /* vim: set ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
  http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
-// Test tree selection functionality
+// Test deleting files and folders from the context menu
 
 add_task(function*() {
   let projecteditor = yield addProjectEditorTabForTempDirectory();
-  ok(true, "ProjectEditor has loaded");
+  ok(projecteditor, "ProjectEditor has loaded");
 
   let root = [...projecteditor.project.allStores()][0].root;
   is(root.path, TEMP_PATH, "The root store is set to the correct temp path.");
   for (let child of root.children) {
     yield deleteWithContextMenu(projecteditor, projecteditor.projectTree.getViewContainer(child));
   }
 
   yield testDeleteOnRoot(projecteditor, projecteditor.projectTree.getViewContainer(root));
 });
 
-
-function openContextMenuOn(node) {
-  EventUtils.synthesizeMouseAtCenter(
-    node,
-    {button: 2, type: "contextmenu"},
-    node.ownerDocument.defaultView
-  );
-}
-
 function testDeleteOnRoot(projecteditor, container) {
   let popup = projecteditor.contextMenuPopup;
-  let oncePopupShown = onPopupShow(popup);
-  openContextMenuOn(container.label);
-  yield oncePopupShown;
+  let contextMenuOpened = openContextMenuOn(container.label, popup);
 
   let deleteCommand = popup.querySelector("[command=cmd-delete]");
   ok (deleteCommand, "Delete command exists in popup");
   is (deleteCommand.getAttribute("hidden"), "true", "Delete command is hidden");
+
+  return contextMenuOpened;
 }
 
 function deleteWithContextMenu(projecteditor, container) {
   let defer = promise.defer();
-
   let popup = projecteditor.contextMenuPopup;
   let resource = container.resource;
   info ("Going to attempt deletion for: " + resource.path);
 
-  onPopupShow(popup).then(function () {
+  openContextMenuOn(container.label, popup).then(() => {
     let deleteCommand = popup.querySelector("[command=cmd-delete]");
     ok (deleteCommand, "Delete command exists in popup");
     is (deleteCommand.getAttribute("hidden"), "", "Delete command is visible");
     is (deleteCommand.getAttribute("disabled"), "", "Delete command is enabled");
 
     function onConfirmShown(aSubject) {
       info("confirm dialog observed as expected");
       Services.obs.removeObserver(onConfirmShown, "common-dialog-loaded");
@@ -74,12 +64,10 @@ function deleteWithContextMenu(projected
 
     Services.obs.addObserver(onConfirmShown, "common-dialog-loaded", false);
     Services.obs.addObserver(onConfirmShown, "tabmodal-dialog-loaded", false);
 
     deleteCommand.click();
     popup.hidePopup();
   });
 
-  openContextMenuOn(container.label);
-
   return defer.promise;
 }
diff --git a/browser/devtools/projecteditor/test/browser_projecteditor_menubar_02.js b/browser/devtools/projecteditor/test/browser_projecteditor_menubar_02.js
--- a/browser/devtools/projecteditor/test/browser_projecteditor_menubar_02.js
+++ b/browser/devtools/projecteditor/test/browser_projecteditor_menubar_02.js
@@ -15,17 +15,17 @@ add_task(function*() {
   // let projecteditor = yield addProjectEditorTabForTempDirectory();
   ok(projecteditor, "ProjectEditor has loaded");
 
   let fileMenu = menubar.querySelector("#file-menu");
   let editMenu = menubar.querySelector("#edit-menu");
   ok (fileMenu, "The menu has loaded in the projecteditor document");
   ok (editMenu, "The menu has loaded in the projecteditor document");
 
-  let cmdNew = fileMenu.querySelector("[command=cmd-new]");
+  let cmdNew = fileMenu.querySelector("[command=cmd-new-file]");
   let cmdSave = fileMenu.querySelector("[command=cmd-save]");
   let cmdSaveas = fileMenu.querySelector("[command=cmd-saveas]");
 
   let cmdUndo = editMenu.querySelector("[command=cmd_undo]");
   let cmdRedo = editMenu.querySelector("[command=cmd_redo]");
   let cmdCut = editMenu.querySelector("[command=cmd_cut]");
   let cmdCopy = editMenu.querySelector("[command=cmd_copy]");
   let cmdPaste = editMenu.querySelector("[command=cmd_paste]");
diff --git a/browser/devtools/projecteditor/test/browser_projecteditor_new_file.js b/browser/devtools/projecteditor/test/browser_projecteditor_new_file.js
--- a/browser/devtools/projecteditor/test/browser_projecteditor_new_file.js
+++ b/browser/devtools/projecteditor/test/browser_projecteditor_new_file.js
@@ -1,13 +1,43 @@
 /* vim: set ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
  http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
-// Test tree selection functionality
+// Test adding new files from the context menu
 
 add_task(function*() {
   let projecteditor = yield addProjectEditorTabForTempDirectory();
   ok(projecteditor, "ProjectEditor has loaded");
 
-});
\ No newline at end of file
+  let root = [...projecteditor.project.allStores()][0].root;
+  is(root.path, TEMP_PATH, "The root store is set to the correct temp path.");
+  for (let child of root.children) {
+    yield newFileWithContextMenu(projecteditor, projecteditor.projectTree.getViewContainer(child));
+  }
+
+  yield testNewOnRoot(projecteditor, projecteditor.projectTree.getViewContainer(root));
+});
+
+
+function testNewOnRoot(projecteditor, container) {
+  let popup = projecteditor.contextMenuPopup;
+  let contextMenuOpened = openContextMenuOn(container.label, popup);
+
+  let newFileCommand = popup.querySelector("[command=cmd-new-file]");
+  ok (newFileCommand, "New file command exists in popup");
+  is (newFileCommand.hasAttribute("hidden"), false, "New file command is not hidden");
+
+  let newFolderCommand = popup.querySelector("[command=cmd-new-folder]");
+  ok (newFolderCommand, "New folder command exists in popup");
+  is (newFolderCommand.hasAttribute("hidden"), false, "New folder command is not hidden");
+
+  return contextMenuOpened;
+}
+
+function newFileWithContextMenu(projecteditor, container) {
+  let defer = promise.defer();
+  // XXX: TODO - implement this - see projecteditor_delete_file for a similar test
+  defer.resolve();
+  return defer.promise;
+}
diff --git a/browser/devtools/projecteditor/test/browser_projecteditor_rename_file.js b/browser/devtools/projecteditor/test/browser_projecteditor_rename_file.js
--- a/browser/devtools/projecteditor/test/browser_projecteditor_rename_file.js
+++ b/browser/devtools/projecteditor/test/browser_projecteditor_rename_file.js
@@ -34,31 +34,23 @@ add_task(function*() {
     childrenList.push(child.basename + ".ren\u0061\u0308med");
   }
   for (let child of root.children) {
     is (childrenList.indexOf(child.basename) == -1, false,
         "Failed to update tree with non-ascii character");
   }
 });
 
-function openContextMenuOn(node) {
-  EventUtils.synthesizeMouseAtCenter(
-    node,
-    {button: 2, type: "contextmenu"},
-    node.ownerDocument.defaultView
-  );
-}
-
 function renameWithContextMenu(projecteditor, container, newName) {
   let defer = promise.defer();
   let popup = projecteditor.contextMenuPopup;
   let resource = container.resource;
   info ("Going to attempt renaming for: " + resource.path);
 
-  onPopupShow(popup).then(function () {
+  openContextMenuOn(container.label, popup).then(() => {
     let renameCommand = popup.querySelector("[command=cmd-rename]");
     ok (renameCommand, "Rename command exists in popup");
     is (renameCommand.getAttribute("hidden"), "", "Rename command is visible");
     is (renameCommand.getAttribute("disabled"), "", "Rename command is enabled");
 
     projecteditor.project.on("refresh-complete", function refreshComplete() {
       projecteditor.project.off("refresh-complete", refreshComplete);
       OS.File.stat(resource.path + newName).then(() => {
@@ -72,11 +64,10 @@ function renameWithContextMenu(projected
 
     renameCommand.click();
     popup.hidePopup();
     let input = container.elt.previousElementSibling;
     input.value = resource.basename + newName;
     EventUtils.synthesizeKey("VK_RETURN", {}, projecteditor.window);
   });
 
-  openContextMenuOn(container.label);
   return defer.promise;
 }
diff --git a/browser/devtools/projecteditor/test/head.js b/browser/devtools/projecteditor/test/head.js
--- a/browser/devtools/projecteditor/test/head.js
+++ b/browser/devtools/projecteditor/test/head.js
@@ -330,8 +330,18 @@ function onPopupHidden(menu) {
   let defer = promise.defer();
   menu.addEventListener("popuphidden", function onpopuphidden() {
     menu.removeEventListener("popuphidden", onpopuphidden);
     defer.resolve();
   });
   return defer.promise;
 }
 
+function openContextMenuOn(node, popup) {
+  let oncePopupShown = popup ? onPopupShow(popup) : promise.resolve();
+  EventUtils.synthesizeMouseAtCenter(
+    node,
+    {button: 2, type: "contextmenu"},
+    node.ownerDocument.defaultView
+  );
+  return oncePopupShown;
+}
+
diff --git a/browser/locales/en-US/chrome/browser/devtools/projecteditor.properties b/browser/locales/en-US/chrome/browser/devtools/projecteditor.properties
--- a/browser/locales/en-US/chrome/browser/devtools/projecteditor.properties
+++ b/browser/locales/en-US/chrome/browser/devtools/projecteditor.properties
@@ -36,20 +36,25 @@ projecteditor.deletePromptTitle=Delete
 # to make sure if a folder should be removed.
 projecteditor.deleteFolderPromptMessage=Are you sure you want to delete this folder?
 
 # LOCALIZATION NOTE (projecteditor.deleteFilePromptMessage):
 # This string is displayed as as the message of the confirm prompt that checks
 # to make sure if a file should be removed.
 projecteditor.deleteFilePromptMessage=Are you sure you want to delete this file?
 
-# LOCALIZATION NOTE (projecteditor.newLabel):
+# LOCALIZATION NOTE (projecteditor.newFileLabel):
 # This string is displayed as a menu item for adding a new file to
 # the directory.
-projecteditor.newLabel=New…
+projecteditor.newFileLabel=New File
+
+# LOCALIZATION NOTE (projecteditor.newFolderLabel):
+# This string is displayed as a menu item for adding a new folder to
+# the directory.
+projecteditor.newFolderLabel=New Folder
 
 # LOCALIZATION NOTE (projecteditor.renameLabel):
 # This string is displayed as a menu item for renaming a file in
 # the directory.
 projecteditor.renameLabel=Rename
 
 # LOCALIZATION NOTE (projecteditor.saveLabel):
 # This string is displayed as a menu item for saving the current file.
@@ -77,12 +82,12 @@ projecteditor.openFileLabel=Open a File
 # text in the files.
 projecteditor.find.commandkey=F
 
 # LOCALIZATION NOTE  (projecteditor.save.commandkey): This is the key to use in
 # conjunction with accel (Command on Mac or Ctrl on other platforms) to
 # save the file.  It is used with accel+shift to "save as".
 projecteditor.save.commandkey=S
 
-# LOCALIZATION NOTE  (projecteditor.new.commandkey): This is the key to use in
+# LOCALIZATION NOTE  (projecteditor.newFile.commandkey): This is the key to use in
 # conjunction with accel (Command on Mac or Ctrl on other platforms) to
 # create a new file.
-projecteditor.new.commandkey=N
+projecteditor.newFile.commandkey=N
