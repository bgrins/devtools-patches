
# HG changeset patch
# User Yura Zenevich <yzenevich@mozilla.com>
# Date 1456955803 18000
# Node ID 9c9c59503cb202a9ec36fa3c69f4b697dad0b95c
# Parent  c59c022943f6a7e79f6002e11fc9f56cb836f5dd
Bug 1242852 - (part 1) making top dev tools toolbar keyboard accessible.
---
 devtools/client/framework/toolbox.js        | 67 +++++++++++++++++++++++++++++
 devtools/client/shared/developer-toolbar.js |  8 ++++
 devtools/client/themes/toolbars.css         | 11 +++++
 3 files changed, 86 insertions(+)

MozReview-Commit-ID: CEBryg1vR4l

diff --git a/devtools/client/framework/toolbox.js b/devtools/client/framework/toolbox.js
--- a/devtools/client/framework/toolbox.js
+++ b/devtools/client/framework/toolbox.js
@@ -408,6 +408,7 @@
         this._addZoomKeys();
         this._loadInitialZoom();
       }
+      this._setToolbarKeyboardNavigation();
 
       this.webconsolePanel = this.doc.querySelector("#toolbox-panel-webconsole");
       this.webconsolePanel.height = Services.prefs.getIntPref(SPLITCONSOLE_HEIGHT_PREF);
@@ -899,6 +900,72 @@
   },
 
   /**
+   * Sets up keyboard navigation with and within the dev tools toolbar.
+   */
+  _setToolbarKeyboardNavigation() {
+    let toolbar = this.doc.querySelector(".devtools-tabbar");
+    // Set and track aria-activedescendant to indicate which control is
+    // currently focused within the toolbar (for accessibility purposes).
+    toolbar.addEventListener("focus", event => {
+      let { target, rangeParent } = event;
+      let control, controlID = toolbar.getAttribute("aria-activedescendant");
+
+      if (controlID) {
+        control = this.doc.getElementById(controlID);
+      }
+      if (rangeParent || !control) {
+        // If range parent is present, the focused is moved within the toolbar,
+        // simply updating aria-activedescendant. Or if aria-activedescendant is
+        // not available, set it to target.
+        toolbar.setAttribute("aria-activedescendant", target.id);
+      } else {
+        // When range parent is not present, we focused into the toolbar, move
+        // focus to current aria-activedescendant.
+        event.preventDefault();
+        control.focus();
+      }
+    }, true)
+
+    toolbar.addEventListener("keypress", event => {
+      let { key, target } = event;
+      let win = this.doc.defaultView;
+      let elm, type;
+      if (key === "Tab") {
+        // Tabbing when toolbar or its contents are focused should move focus to
+        // next/previous focusable element relative to toolbar itself.
+        if (event.shiftKey) {
+          elm = toolbar;
+          type = Services.focus.MOVEFOCUS_BACKWARD;
+        } else {
+          // To move focus to next element following the toolbar, relative
+          // element needs to be the last element in its subtree.
+          let last = toolbar.lastChild;
+          while (last && last.lastChild) {
+            last = last.lastChild;
+          }
+          elm = last;
+          type = Services.focus.MOVEFOCUS_FORWARD;
+        }
+      } else if (key === "ArrowLeft") {
+        // Using left arrow key inside toolbar should move focus to previous
+        // toolbar control.
+        elm = target;
+        type = Services.focus.MOVEFOCUS_BACKWARD;
+      } else if (key === "ArrowRight") {
+        // Using right arrow key inside toolbar should move focus to next
+        // toolbar control.
+        elm = target;
+        type = Services.focus.MOVEFOCUS_FORWARD;
+      } else {
+        // Ignore all other keys.
+        return;
+      }
+      event.preventDefault();
+      Services.focus.moveFocus(win, elm, type, 0);
+    });
+  },
+
+  /**
    * Add buttons to the UI as specified in the devtools.toolbox.toolbarSpec pref
    */
   _buildButtons: function() {
diff --git a/devtools/client/shared/developer-toolbar.js b/devtools/client/shared/developer-toolbar.js
--- a/devtools/client/shared/developer-toolbar.js
+++ b/devtools/client/shared/developer-toolbar.js
@@ -105,6 +105,14 @@
           requisition.updateExec(typed);
         }, false);
 
+        button.addEventListener("keypress", event => {
+          if (event.key === " ") {
+            // Ensure click is not fired (which happens in some cases).
+            event.preventDefault();
+            requisition.updateExec(typed);
+          }
+        }, false);
+
         // Allow the command button to be toggleable
         if (command.state) {
           button.setAttribute("autocheck", false);
diff --git a/devtools/client/themes/toolbars.css b/devtools/client/themes/toolbars.css
--- a/devtools/client/themes/toolbars.css
+++ b/devtools/client/themes/toolbars.css
@@ -486,6 +486,7 @@
   min-width: 16px;
   width: 16px;
   opacity: 0.8;
+  -moz-user-focus: normal;
 }
 
 .devtools-closebutton > image {
@@ -691,6 +692,10 @@
   margin: 0;
 }
 
+.toolbox-dock-button {
+  -moz-user-focus: normal;
+}
+
 /* Command buttons */
 
 .command-button {
@@ -700,6 +705,7 @@
   margin: 0;
   width: 32px;
   position: relative;
+  -moz-user-focus: normal;
 }
 
 .command-button:hover {
@@ -750,6 +756,10 @@
   background-image: url("chrome://devtools/skin/images/command-scratchpad.png");
 }
 
+#command-button-pick {
+  -moz-user-focus: normal;
+}
+
 #command-button-pick > image {
   background-image: url("chrome://devtools/skin/images/command-pick.png");
 }
@@ -857,6 +867,7 @@
   border-width: 0;
   -moz-border-start-width: 1px;
   -moz-box-align: center;
+  -moz-user-focus: normal;
 }
 
 .theme-dark .devtools-tab {

