# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  aff060ad3204234adae2d59b3776207c6687ebfc
Bug 1473160 - Move non browser window startup and shutdown functionality into a separate JS file;r=Gijs

These are mac-only functions used to support the dock and application menu for
non browser windows (anything that includes macWindow.inc.xul). Make this more
straightforward by splitting the code out into a new script file that gets loaded
directly by macWindow.inc.xul rather than unconditionally adding the functions
and only calling them when needed.

diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -1938,112 +1938,16 @@ var gBrowserInit = {
           .QueryInterface(Ci.nsIDocShellTreeItem).treeOwner
           .QueryInterface(Ci.nsIInterfaceRequestor)
           .getInterface(Ci.nsIXULWindow)
           .XULBrowserWindow = null;
     window.QueryInterface(Ci.nsIDOMChromeWindow).browserDOMWindow = null;
   },
 };
 
-if (AppConstants.platform == "macosx") {
-  // nonBrowserWindowStartup(), nonBrowserWindowDelayedStartup(), and
-  // nonBrowserWindowShutdown() are used for non-browser windows in
-  // macWindow.inc.xul
-  gBrowserInit.nonBrowserWindowStartup = function() {
-    // Disable inappropriate commands / submenus
-    var disabledItems = ["Browser:SavePage",
-                         "Browser:SendLink", "cmd_pageSetup", "cmd_print", "cmd_find", "cmd_findAgain",
-                         "viewToolbarsMenu", "viewSidebarMenuMenu", "Browser:Reload",
-                         "viewFullZoomMenu", "pageStyleMenu", "charsetMenu", "View:PageSource", "View:FullScreen",
-                         "viewHistorySidebar", "Browser:AddBookmarkAs", "Browser:BookmarkAllTabs",
-                         "View:PageInfo", "History:UndoCloseTab"];
-    var element;
-
-    for (let disabledItem of disabledItems) {
-      element = document.getElementById(disabledItem);
-      if (element)
-        element.setAttribute("disabled", "true");
-    }
-
-    // Show menus that are only visible in non-browser windows
-    let shownItems = ["menu_openLocation"];
-    for (let shownItem of shownItems) {
-      element = document.getElementById(shownItem);
-      if (element)
-        element.removeAttribute("hidden");
-    }
-
-    // If no windows are active (i.e. we're the hidden window), disable the close, minimize
-    // and zoom menu commands as well
-    if (window.location.href == "chrome://browser/content/hiddenWindow.xul") {
-      var hiddenWindowDisabledItems = ["cmd_close", "minimizeWindow", "zoomWindow"];
-      for (let hiddenWindowDisabledItem of hiddenWindowDisabledItems) {
-        element = document.getElementById(hiddenWindowDisabledItem);
-        if (element)
-          element.setAttribute("disabled", "true");
-      }
-
-      // also hide the window-list separator
-      element = document.getElementById("sep-window-list");
-      element.setAttribute("hidden", "true");
-
-      // Setup the dock menu.
-      let dockMenuElement = document.getElementById("menu_mac_dockmenu");
-      if (dockMenuElement != null) {
-        let nativeMenu = Cc["@mozilla.org/widget/standalonenativemenu;1"]
-                         .createInstance(Ci.nsIStandaloneNativeMenu);
-
-        try {
-          nativeMenu.init(dockMenuElement);
-
-          let dockSupport = Cc["@mozilla.org/widget/macdocksupport;1"]
-                            .getService(Ci.nsIMacDockSupport);
-          dockSupport.dockMenu = nativeMenu;
-        } catch (e) {
-        }
-      }
-    }
-
-    if (PrivateBrowsingUtils.permanentPrivateBrowsing) {
-      document.getElementById("macDockMenuNewWindow").hidden = true;
-    }
-    if (!PrivateBrowsingUtils.enabled) {
-      document.getElementById("macDockMenuNewPrivateWindow").hidden = true;
-    }
-
-    this._delayedStartupTimeoutId = setTimeout(this.nonBrowserWindowDelayedStartup.bind(this), 0);
-  };
-
-  gBrowserInit.nonBrowserWindowDelayedStartup = function() {
-    this._delayedStartupTimeoutId = null;
-
-    // initialise the offline listener
-    BrowserOffline.init();
-
-    // initialize the private browsing UI
-    gPrivateBrowsingUI.init();
-
-  };
-
-  gBrowserInit.nonBrowserWindowShutdown = function() {
-    let dockSupport = Cc["@mozilla.org/widget/macdocksupport;1"]
-                      .getService(Ci.nsIMacDockSupport);
-    dockSupport.dockMenu = null;
-
-    // If nonBrowserWindowDelayedStartup hasn't run yet, we have no work to do -
-    // just cancel the pending timeout and return;
-    if (this._delayedStartupTimeoutId) {
-      clearTimeout(this._delayedStartupTimeoutId);
-      return;
-    }
-
-    BrowserOffline.uninit();
-  };
-}
-
 function HandleAppCommandEvent(evt) {
   switch (evt.command) {
   case "Back":
     BrowserBack();
     break;
   case "Forward":
     BrowserForward();
     break;
@@ -6512,17 +6416,18 @@ var gPageStyleMenu = {
 var LanguageDetectionListener = {
   init() {
     window.messageManager.addMessageListener("Translation:DocumentState", msg => {
       Translation.documentStateReceived(msg.target, msg.data);
     });
   }
 };
 
-
+// Note that this is also called from non-browser windows on OSX, which do
+// share menu items but not much else. See nonbrowser-mac.js.
 var BrowserOffline = {
   _inited: false,
 
   // BrowserOffline Public Methods
   init() {
     if (!this._uiElement)
       this._uiElement = document.getElementById("workOfflineMenuitemState");
 
@@ -7488,16 +7393,18 @@ const gAccessibilityServiceIndicator = {
 
   uninit() {
     Services.prefs.removeObserver("accessibility.indicator.enabled", this);
     Services.obs.removeObserver(this, "a11y-init-or-shutdown");
     this.update();
   }
 };
 
+// Note that this is also called from non-browser windows on OSX, which do
+// share menu items but not much else. See nonbrowser-mac.js.
 var gPrivateBrowsingUI = {
   init: function PBUI_init() {
     // Do nothing for normal windows
     if (!PrivateBrowsingUtils.isWindowPrivate(window)) {
       return;
     }
 
     // Disable the Clear Recent History... menu item when in PB mode
diff --git a/browser/base/content/macWindow.inc.xul b/browser/base/content/macWindow.inc.xul
--- a/browser/base/content/macWindow.inc.xul
+++ b/browser/base/content/macWindow.inc.xul
@@ -10,32 +10,17 @@
 # below that are shared with browser.xul. When including this file,
 # browser-doctype.inc must also be included.
 
 # All JS files which are needed by browser.xul and other top level windows to
 # support MacOS specific features *must* go into the global-scripts.inc file so
 # that they can be shared with browser.xul.
 #include global-scripts.inc
 
-<script type="application/javascript">
-  function OpenBrowserWindowFromDockMenu(options) {
-    let win = OpenBrowserWindow(options);
-    win.addEventListener("load", function listener() {
-      win.removeEventListener("load", listener);
-      let dockSupport = Cc["@mozilla.org/widget/macdocksupport;1"]
-        .getService(Ci.nsIMacDockSupport);
-      dockSupport.activateApplication(true);
-    });
-
-    return win;
-  }
-
-  addEventListener("load",   function() { gBrowserInit.nonBrowserWindowStartup()  }, false);
-  addEventListener("unload", function() { gBrowserInit.nonBrowserWindowShutdown() }, false);
-</script>
+<script type="application/javascript" src="chrome://browser/content/nonbrowser-mac.js"></script>
 
 # All sets except for popupsets (commands, keys, stringbundles and broadcasters)
 # *must* go into the browser-sets.inc file so that they can be shared with
 # browser.xul
 #include browser-sets.inc
 
 # The entire main menubar is placed into browser-menubar.inc, so that it can be
 # shared with browser.xul.
diff --git a/browser/base/content/nonbrowser-mac.js b/browser/base/content/nonbrowser-mac.js
new file mode 100644
--- /dev/null
+++ b/browser/base/content/nonbrowser-mac.js
@@ -0,0 +1,111 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*-
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/* eslint-env mozilla/browser-window */
+
+function OpenBrowserWindowFromDockMenu(options) {
+  let win = OpenBrowserWindow(options);
+  win.addEventListener("load", function() {
+    let dockSupport = Cc["@mozilla.org/widget/macdocksupport;1"]
+      .getService(Ci.nsIMacDockSupport);
+    dockSupport.activateApplication(true);
+  }, { once: true });
+
+  return win;
+}
+
+gBrowserInit.nonBrowserWindowStartup = function() {
+  // Disable inappropriate commands / submenus
+  var disabledItems = ["Browser:SavePage",
+                       "Browser:SendLink", "cmd_pageSetup", "cmd_print", "cmd_find", "cmd_findAgain",
+                       "viewToolbarsMenu", "viewSidebarMenuMenu", "Browser:Reload",
+                       "viewFullZoomMenu", "pageStyleMenu", "charsetMenu", "View:PageSource", "View:FullScreen",
+                       "viewHistorySidebar", "Browser:AddBookmarkAs", "Browser:BookmarkAllTabs",
+                       "View:PageInfo", "History:UndoCloseTab"];
+  var element;
+
+  for (let disabledItem of disabledItems) {
+    element = document.getElementById(disabledItem);
+    if (element)
+      element.setAttribute("disabled", "true");
+  }
+
+  // Show menus that are only visible in non-browser windows
+  let shownItems = ["menu_openLocation"];
+  for (let shownItem of shownItems) {
+    element = document.getElementById(shownItem);
+    if (element)
+      element.removeAttribute("hidden");
+  }
+
+  // If no windows are active (i.e. we're the hidden window), disable the close, minimize
+  // and zoom menu commands as well
+  if (window.location.href == "chrome://browser/content/hiddenWindow.xul") {
+    var hiddenWindowDisabledItems = ["cmd_close", "minimizeWindow", "zoomWindow"];
+    for (let hiddenWindowDisabledItem of hiddenWindowDisabledItems) {
+      element = document.getElementById(hiddenWindowDisabledItem);
+      if (element)
+        element.setAttribute("disabled", "true");
+    }
+
+    // also hide the window-list separator
+    element = document.getElementById("sep-window-list");
+    element.setAttribute("hidden", "true");
+
+    // Setup the dock menu.
+    let dockMenuElement = document.getElementById("menu_mac_dockmenu");
+    if (dockMenuElement != null) {
+      let nativeMenu = Cc["@mozilla.org/widget/standalonenativemenu;1"]
+                       .createInstance(Ci.nsIStandaloneNativeMenu);
+
+      try {
+        nativeMenu.init(dockMenuElement);
+
+        let dockSupport = Cc["@mozilla.org/widget/macdocksupport;1"]
+                          .getService(Ci.nsIMacDockSupport);
+        dockSupport.dockMenu = nativeMenu;
+      } catch (e) {
+      }
+    }
+  }
+
+  if (PrivateBrowsingUtils.permanentPrivateBrowsing) {
+    document.getElementById("macDockMenuNewWindow").hidden = true;
+  }
+  if (!PrivateBrowsingUtils.enabled) {
+    document.getElementById("macDockMenuNewPrivateWindow").hidden = true;
+  }
+
+  this._delayedStartupTimeoutId = setTimeout(this.nonBrowserWindowDelayedStartup.bind(this), 0);
+};
+
+gBrowserInit.nonBrowserWindowDelayedStartup = function() {
+  this._delayedStartupTimeoutId = null;
+
+  // initialise the offline listener
+  BrowserOffline.init();
+
+  // initialize the private browsing UI
+  gPrivateBrowsingUI.init();
+
+};
+
+gBrowserInit.nonBrowserWindowShutdown = function() {
+  let dockSupport = Cc["@mozilla.org/widget/macdocksupport;1"]
+                    .getService(Ci.nsIMacDockSupport);
+  dockSupport.dockMenu = null;
+
+  // If nonBrowserWindowDelayedStartup hasn't run yet, we have no work to do -
+  // just cancel the pending timeout and return;
+  if (this._delayedStartupTimeoutId) {
+    clearTimeout(this._delayedStartupTimeoutId);
+    return;
+  }
+
+  BrowserOffline.uninit();
+};
+
+addEventListener("load",   function() { gBrowserInit.nonBrowserWindowStartup()  }, false);
+addEventListener("unload", function() { gBrowserInit.nonBrowserWindowShutdown() }, false);
diff --git a/browser/base/jar.mn b/browser/base/jar.mn
--- a/browser/base/jar.mn
+++ b/browser/base/jar.mn
@@ -99,16 +99,17 @@ browser.jar:
         content/browser/utilityOverlay.js             (content/utilityOverlay.js)
         content/browser/webext-panels.js              (content/webext-panels.js)
 *       content/browser/webext-panels.xul             (content/webext-panels.xul)
         content/browser/nsContextMenu.js              (content/nsContextMenu.js)
         content/browser/contentTheme.js               (content/contentTheme.js)
 #ifdef XP_MACOSX
 # XXX: We should exclude this one as well (bug 71895)
 *       content/browser/hiddenWindow.xul              (content/hiddenWindow.xul)
+        content/browser/nonbrowser-mac.js             (content/nonbrowser-mac.js)
 #endif
 #ifndef XP_MACOSX
 *       content/browser/webrtcIndicator.xul           (content/webrtcIndicator.xul)
         content/browser/webrtcIndicator.js            (content/webrtcIndicator.js)
 #endif
 # the following files are browser-specific overrides
 *       content/browser/license.html                  (/toolkit/content/license.html)
 % override chrome://global/content/license.html chrome://browser/content/license.html
