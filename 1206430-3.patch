# vim: se ft=diff :
# HG changeset patch
# User Gabriel Luong <gabriel.luong@gmail.com>
# Date 2016-02-16 19:10
Bug 1206430 - Part 3: Patch CodeMirror's annotatescrollbar to work with floating scrollbars r=bgrins

diff --git a/devtools/client/sourceeditor/codemirror/README b/devtools/client/sourceeditor/codemirror/README
--- a/devtools/client/sourceeditor/codemirror/README
+++ b/devtools/client/sourceeditor/codemirror/README
@@ -94,16 +94,72 @@ diff --git a/devtools/client/sourceedito
      var state = getSearchState(cm);
      if (state.query) return findNext(cm, rev);
      var q = cm.getSelection() || state.lastQuery;
      if (persistent && cm.openDialog) {
        var hiding = null
        persistentDialog(cm, queryDialog, q, function(query, event) {
          CodeMirror.e_stop(event);
          if (!query) return;
+diff --git a/devtools/client/sourceeditor/codemirror/addon/scroll/annotatescrollbar.js b/devtools/client/sourceeditor/codemirror/addon/scroll/annotatescrollbar.js
+--- a/devtools/client/sourceeditor/codemirror/addon/scroll/annotatescrollbar.js
++++ b/devtools/client/sourceeditor/codemirror/addon/scroll/annotatescrollbar.js
+@@ -19,17 +19,17 @@
+   CodeMirror.defineOption("scrollButtonHeight", 0);
+
+   function Annotation(cm, options) {
+     this.cm = cm;
+     this.options = options;
+     this.buttonHeight = options.scrollButtonHeight || cm.getOption("scrollButtonHeight");
+     this.annotations = [];
+     this.doRedraw = this.doUpdate = null;
+-    this.div = cm.getWrapperElement().appendChild(document.createElement("div"));
++    this.div = cm.getWrapperElement().querySelector(".CodeMirror-scrollbar-annotations").appendChild(document.createElement("div"));
+     this.div.style.cssText = "position: absolute; right: 0; top: 0; z-index: 7; pointer-events: none";
+     this.computeScale();
+
+     function scheduleRedraw(delay) {
+       clearTimeout(self.doRedraw);
+       self.doRedraw = setTimeout(function() { self.redraw(); }, delay);
+     }
+
+@@ -78,31 +78,31 @@
+         curLineObj = cm.getLineHandle(curLine);
+       }
+       if (wrapping && curLineObj.height > singleLineH)
+         return cm.charCoords(pos, "local")[top ? "top" : "bottom"];
+       var topY = cm.heightAtLine(curLineObj, "local");
+       return topY + (top ? 0 : curLineObj.height);
+     }
+
+-    if (cm.display.barWidth) for (var i = 0, nextTop; i < anns.length; i++) {
++    for (var i = 0, nextTop; i < anns.length; i++) {
+       var ann = anns[i];
+       var top = nextTop || getY(ann.from, true) * hScale;
+       var bottom = getY(ann.to, false) * hScale;
+       while (i < anns.length - 1) {
+         nextTop = getY(anns[i + 1].from, true) * hScale;
+         if (nextTop > bottom + .9) break;
+         ann = anns[++i];
+         bottom = getY(ann.to, false) * hScale;
+       }
+       if (bottom == top) continue;
+       var height = Math.max(bottom - top, 3);
+
+       var elt = frag.appendChild(document.createElement("div"));
+-      elt.style.cssText = "position: absolute; right: 0px; width: " + Math.max(cm.display.barWidth - 1, 2) + "px; top: "
++      elt.style.cssText = "position: absolute; right: 0px; width: 14px; top: "
+         + (top + this.buttonHeight) + "px; height: " + height + "px";
+       elt.className = this.options.className;
+       if (ann.id) {
+         elt.setAttribute("annotation-id", ann.id);
+       }
+     }
+     this.div.textContent = "";
+     this.div.appendChild(frag);
 
 # Footnotes
 
 [1] http://codemirror.net
 [2] devtools/client/sourceeditor/codemirror
 [3] devtools/client/sourceeditor/test/browser_codemirror.js
 [4] devtools/client/jar.mn
 [5] devtools/client/sourceeditor/editor.js
diff --git a/devtools/client/sourceeditor/codemirror/addon/scroll/annotatescrollbar.js b/devtools/client/sourceeditor/codemirror/addon/scroll/annotatescrollbar.js
--- a/devtools/client/sourceeditor/codemirror/addon/scroll/annotatescrollbar.js
+++ b/devtools/client/sourceeditor/codemirror/addon/scroll/annotatescrollbar.js
@@ -19,17 +19,17 @@
   CodeMirror.defineOption("scrollButtonHeight", 0);
 
   function Annotation(cm, options) {
     this.cm = cm;
     this.options = options;
     this.buttonHeight = options.scrollButtonHeight || cm.getOption("scrollButtonHeight");
     this.annotations = [];
     this.doRedraw = this.doUpdate = null;
-    this.div = cm.getWrapperElement().appendChild(document.createElement("div"));
+    this.div = cm.getWrapperElement().querySelector(".CodeMirror-scrollbar-annotations").appendChild(document.createElement("div"));
     this.div.style.cssText = "position: absolute; right: 0; top: 0; z-index: 7; pointer-events: none";
     this.computeScale();
 
     function scheduleRedraw(delay) {
       clearTimeout(self.doRedraw);
       self.doRedraw = setTimeout(function() { self.redraw(); }, delay);
     }
 
@@ -78,31 +78,31 @@
         curLineObj = cm.getLineHandle(curLine);
       }
       if (wrapping && curLineObj.height > singleLineH)
         return cm.charCoords(pos, "local")[top ? "top" : "bottom"];
       var topY = cm.heightAtLine(curLineObj, "local");
       return topY + (top ? 0 : curLineObj.height);
     }
 
-    if (cm.display.barWidth) for (var i = 0, nextTop; i < anns.length; i++) {
+    for (var i = 0, nextTop; i < anns.length; i++) {
       var ann = anns[i];
       var top = nextTop || getY(ann.from, true) * hScale;
       var bottom = getY(ann.to, false) * hScale;
       while (i < anns.length - 1) {
         nextTop = getY(anns[i + 1].from, true) * hScale;
         if (nextTop > bottom + .9) break;
         ann = anns[++i];
         bottom = getY(ann.to, false) * hScale;
       }
       if (bottom == top) continue;
       var height = Math.max(bottom - top, 3);
 
       var elt = frag.appendChild(document.createElement("div"));
-      elt.style.cssText = "position: absolute; right: 0px; width: " + Math.max(cm.display.barWidth - 1, 2) + "px; top: "
+      elt.style.cssText = "position: absolute; right: 0px; width: 14px; top: "
         + (top + this.buttonHeight) + "px; height: " + height + "px";
       elt.className = this.options.className;
       if (ann.id) {
         elt.setAttribute("annotation-id", ann.id);
       }
     }
     this.div.textContent = "";
     this.div.appendChild(frag);
diff --git a/devtools/client/sourceeditor/editor.js b/devtools/client/sourceeditor/editor.js
--- a/devtools/client/sourceeditor/editor.js
+++ b/devtools/client/sourceeditor/editor.js
@@ -396,16 +396,22 @@ Editor.prototype = {
         if (ev.shiftKey) {
           cm.setSelection(head, tail);
           return;
         }
 
         this.emit("gutterClick", line, ev.button);
       });
 
+      // Add a container for scrollbar annotation
+      let doc = cm.getWrapperElement().ownerDocument;
+      let annotations = doc.createElement("div");
+      annotations.className = "CodeMirror-scrollbar-annotations";
+      cm.getWrapperElement().appendChild(annotations);
+
       win.CodeMirror.defineExtension("l10n", (name) => {
         return L10N.GetStringFromName(name);
       });
 
       cm.getInputField().controllers.insertControllerAt(0, controller(this));
 
       this.container = env;
       editors.set(this, cm);
