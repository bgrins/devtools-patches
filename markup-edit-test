# HG changeset patch
# Parent 2829e2b8d6753b320227ae73346870a4ec6fc5dd
# User Brian Grinstead <bgrinstead@mozilla.com>
markup edit test is slow

diff --git a/browser/devtools/markupview/test/browser.ini b/browser/devtools/markupview/test/browser.ini
--- a/browser/devtools/markupview/test/browser.ini
+++ b/browser/devtools/markupview/test/browser.ini
@@ -7,19 +7,19 @@ support-files =
   browser_inspector_markup_subset.html
   browser_inspector_markup_765105_tooltip.png
   browser_inspector_markup_950732.html
   head.js
 
 [browser_bug896181_css_mixed_completion_new_attribute.js]
 # Bug 916763 - too many intermittent failures
 skip-if = true
-[browser_inspector_markup_edit.js]
+#[browser_inspector_markup_edit.js]
 # Bug 904953 - too many intermittent failures on Linux
-skip-if = os == "linux"
+#skip-if = os == "linux"
 [browser_inspector_markup_edit_outerhtml.js]
 [browser_inspector_markup_edit_outerhtml2.js]
 [browser_inspector_markup_mutation.js]
 [browser_inspector_markup_mutation_flashing.js]
 [browser_inspector_markup_navigation.js]
 [browser_inspector_markup_subset.js]
 [browser_inspector_markup_765105_tooltip.js]
 [browser_inspector_markup_950732.js]
diff --git a/browser/devtools/markupview/test/browser_inspector_markup_edit.js b/browser/devtools/markupview/test/browser_inspector_markup_edit.js
--- a/browser/devtools/markupview/test/browser_inspector_markup_edit.js
+++ b/browser/devtools/markupview/test/browser_inspector_markup_edit.js
@@ -632,17 +632,17 @@ function test() {
       }
     });
 
     markup.expandAll().then(() => {
 
       let cursor = 0;
 
       function nextEditTest() {
-        executeSoon(function() {
+        // executeSoon(function() {
           if (cursor >= edits.length) {
             addAttributes();
           } else {
             let step = edits[cursor++];
             info("START " + step.desc);
             if (step.setup) {
               step.setup();
             }
@@ -660,17 +660,17 @@ function test() {
                 inspector.once("markupmutation", () => {
                   step.after();
                   info("END " + step.desc);
                   nextEditTest();
                 });
               });
             });
           }
-        });
+        // });
       }
       nextEditTest();
     });
   }
 
   function addAttributes() {
     let test = {
       desc: "Add attributes by adding to an existing attribute's entry",
@@ -681,17 +681,18 @@ function test() {
         assertAttributes(doc.querySelector("#node18"), {
           id: "node18",
         });
       },
       execute: function(after) {
         inspector.once("markupmutation", function() {
           // needed because we need to make sure the infobar is updated
           // not just the markupview (which happens in this event loop)
-          executeSoon(after);
+          // executeSoon(after);
+          after();
         });
         let editor = getContainerForRawNode(markup, doc.querySelector("#node18")).editor;
         let attr = editor.attrs["id"].querySelector(".editable");
         editField(attr, attr.textContent + ' class="newclass" style="color:green"');
       },
       after: function() {
         assertAttributes(doc.querySelector("#node18"), {
           id: "node18",
@@ -764,36 +765,37 @@ function test() {
     test.before();
     inspector.once("inspector-updated", function BIMET_testAsyncExecNewNode() {
       test.executeCont();
       inspector.once("markupmutation", () => {
         test.after();
         undoRedo(test, callback);
       });
     });
-    executeSoon(function BIMET_setNode1() {
+    // executeSoon(function BIMET_setNode1() {
       test.execute();
-    });
+    // });
   }
 
   function testAsyncSetup(test, callback) {
     info("START " + test.desc);
 
     inspector.on("inspector-updated", function BIMET_updated(event, name) {
       if (name === "inspector-panel") {
         inspector.off("inspector-updated", BIMET_updated);
 
         test.before();
         test.execute(function() {
           test.after();
           undoRedo(test, callback);
         });
       }
     });
-    executeSoon(test.setup);
+    test.setup();
+    // executeSoon(test.setup);
   }
 
   function undoRedo(test, callback) {
     ok(markup.undo.canUndo(), "Should be able to undo.");
     markup.undo.undo();
     inspector.once("markupmutation", () => {
       test.before();
       ok(markup.undo.canRedo(), "Should be able to redo.");
