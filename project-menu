# HG changeset patch
# Parent f0b6c8f60ecbf5138ace254c28d76b7a4e4d3a54
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 1021827 - Show menu items for project editor inside of App Manager;r=paul

diff --git a/browser/devtools/projecteditor/chrome/content/projecteditor.xul b/browser/devtools/projecteditor/chrome/content/projecteditor.xul
--- a/browser/devtools/projecteditor/chrome/content/projecteditor.xul
+++ b/browser/devtools/projecteditor/chrome/content/projecteditor.xul
@@ -27,16 +27,17 @@
   <commandset id="projecteditor-commandset" />
   <commandset id="editMenuCommands"/>
   <keyset id="projecteditor-keyset" />
   <keyset id="editMenuKeys"/>
 
   <!-- Eventually we want to let plugins declare their own menu items.
        Wait unti app manager lands to deal with this integration point.
   -->
+
   <menubar id="projecteditor-menubar">
     <menu id="file-menu" label="&fileMenu.label;" accesskey="&fileMenu.accesskey;">
       <menupopup id="file-menu-popup" />
     </menu>
 
     <menu id="edit-menu" label="&editMenu.label;"
           accesskey="&editMenu.accesskey;">
       <menupopup id="edit-menu-popup">
diff --git a/browser/devtools/projecteditor/lib/projecteditor.js b/browser/devtools/projecteditor/lib/projecteditor.js
--- a/browser/devtools/projecteditor/lib/projecteditor.js
+++ b/browser/devtools/projecteditor/lib/projecteditor.js
@@ -71,24 +71,27 @@ var ProjectEditor = Class({
 
   /**
    * Initialize ProjectEditor, and load into an iframe if specified.
    *
    * @param Iframe iframe
    *        The iframe to inject the DOM into.  If this is not
    *        specified, then this.load(frame) will need to be called
    *        before accessing ProjectEditor.
+   * @param Object options
+   *         - menubar: a <menubar> element to inject menus into
    */
-  initialize: function(iframe) {
+  initialize: function(iframe, options = {}) {
     this._onTreeSelected = this._onTreeSelected.bind(this);
     this._onTreeResourceRemoved = this._onTreeResourceRemoved.bind(this);
     this._onEditorCreated = this._onEditorCreated.bind(this);
     this._onEditorActivated = this._onEditorActivated.bind(this);
     this._onEditorDeactivated = this._onEditorDeactivated.bind(this);
     this._updateEditorMenuItems = this._updateEditorMenuItems.bind(this);
+    this.menubar = options.menubar || null;
 
     if (iframe) {
       this.load(iframe);
     }
   },
 
   /**
    * Load the instance inside of a specified iframe.
@@ -152,18 +155,56 @@ var ProjectEditor = Class({
       id: "",
       name: "",
       directories: [],
       openFiles: []
     }));
 
     this._initCommands();
     this._initPlugins();
+    this._buildMenubar();
   },
 
+  _buildMenubar: function() {
+
+    let editMenu = this.document.getElementById("edit-menu");
+    editMenu.addEventListener("popupshowing", function () {
+      console.log("MENU SHOWING", editMenu.ownerDocument);
+      let window = editMenu.ownerDocument.defaultView;
+      window.goUpdateGlobalEditMenuItems();
+      let commands = ['cmd_undo', 'cmd_redo', 'cmd_delete', 'cmd_findAgain'];
+      commands.forEach(window.goUpdateCommand);
+    });
+
+    if (this.menubar) {
+      this.menubar.ownerDocument.querySelector("window").appendChild(
+         this.document.getElementById("projecteditor-commandset")
+      );
+      this.menubar.ownerDocument.querySelector("window").appendChild(
+         this.document.getElementById("projecteditor-keyset")
+      );
+      this.menubar.ownerDocument.querySelector("window").appendChild(
+         this.document.getElementById("editMenuCommands")
+      );
+      this.menubar.ownerDocument.querySelector("window").appendChild(
+         this.document.getElementById("editMenuKeys")
+      );
+
+      let menus = [...this.document.querySelectorAll("#projecteditor-menubar menu")];
+      menus.forEach(menu => {
+        console.log("IMPORTING", menu, menu.innerHTML);
+
+        // let node = this.menubar.ownerDocument.importNode(menu, true);
+        // console.log("IMported", node, this.menubar, node.innerHTML);
+        this.menubar.appendChild(menu);
+
+      });
+
+    }
+  },
 
   /**
    * Create the project tree sidebar that lists files.
    */
   _buildSidebar: function() {
     this.projectTree = new ProjectTreeView(this.document, {
       resourceVisible: this.resourceVisible.bind(this),
       resourceFormatter: this.resourceFormatter.bind(this)
@@ -380,16 +421,17 @@ var ProjectEditor = Class({
    * @param Object definition
    *               key: a key/keycode string. Example: "f".
    *               id: Unique ID.  Example: "find".
    *               modifiers: Key modifiers. Example: "accel".
    * @returns DOMElement
    *          The command element that has been created.
    */
   addCommand: function(definition) {
+    console.log("ADDING COMMAND", definition);
     let command = this.document.createElement("command");
     command.setAttribute("id", definition.id);
     if (definition.key) {
       let key = this.document.createElement("key");
       key.id = "key_" + definition.id;
 
       let keyName = definition.key;
       if (keyName.startsWith("VK_")) {
diff --git a/browser/devtools/webide/content/webide.js b/browser/devtools/webide/content/webide.js
--- a/browser/devtools/webide/content/webide.js
+++ b/browser/devtools/webide/content/webide.js
@@ -279,17 +279,19 @@ let UI = {
   // ProjectEditor & details screen
 
   getProjectEditor: function() {
     if (this.projecteditor) {
       return this.projecteditor.loaded;
     }
 
     let projecteditorIframe = document.querySelector("#projecteditor");
-    this.projecteditor = ProjectEditor.ProjectEditor(projecteditorIframe);
+    this.projecteditor = ProjectEditor.ProjectEditor(projecteditorIframe, {
+      menubar: document.querySelector("#main-menubar")
+    });
     this.projecteditor.on("onEditorSave", (editor, resource) => {
       AppManager.validateProject(AppManager.selectedProject);
     });
     return this.projecteditor.loaded;
   },
 
   updateProjectEditorHeader: function() {
     let project = AppManager.selectedProject;
diff --git a/browser/devtools/webide/content/webide.xul b/browser/devtools/webide/content/webide.xul
--- a/browser/devtools/webide/content/webide.xul
+++ b/browser/devtools/webide/content/webide.xul
@@ -2,32 +2,43 @@
 
 <!-- This Source Code Form is subject to the terms of the Mozilla Public
    - License, v. 2.0. If a copy of the MPL was not distributed with this
    - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
 
 <!DOCTYPE window [
   <!ENTITY % webideDTD SYSTEM "chrome://webide/content/webide.dtd" >
   %webideDTD;
+<!ENTITY % scratchpadDTD SYSTEM "chrome://browser/locale/devtools/scratchpad.dtd" >
+ %scratchpadDTD;
+<!ENTITY % editMenuStrings SYSTEM "chrome://global/locale/editMenuOverlay.dtd">
+%editMenuStrings;
+<!ENTITY % sourceEditorStrings SYSTEM "chrome://browser/locale/devtools/sourceeditor.dtd">
+%sourceEditorStrings;
 ]>
 
+
+<?xul-overlay href="chrome://global/content/editMenuOverlay.xul"?>
+
+
 <?xml-stylesheet href="chrome://global/skin/global.css"?>
 <?xml-stylesheet href="chrome://webide/skin/webide.css"?>
 
 <window id="webide"
         xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
         xmlns:html="http://www.w3.org/1999/xhtml"
         title="&windowTitle;"
         windowtype="devtools:webide"
         macanimationtype="document"
         fullscreenbutton="true"
         screenX="4" screenY="4"
         width="640" height="480"
         persist="screenX screenY width height">
 
+  <script type="application/javascript" src="chrome://global/content/globalOverlay.js"></script>
   <script type="application/javascript" src="webide.js"></script>
   <script type="application/javascript" src="cli.js"></script>
 
   <commandset id="mainCommandSet">
     <commandset id="editMenuCommands"/>
     <commandset id="webideCommands">
       <command id="cmd_quit" oncommand="Cmds.quit()"/>
       <command id="cmd_newApp" oncommand="Cmds.newApp()" label="&projectMenu_newApp_label;"/>
@@ -58,16 +69,26 @@
         <menuitem command="cmd_play" key="key_play" label="&projectMenu_play_label;" accesskey="&projectMenu_play_accesskey;"/>
         <menuitem command="cmd_stop" key="key_stop" label="&projectMenu_stop_label;" accesskey="&projectMenu_stop_accesskey;"/>
         <menuitem command="cmd_toggleToolbox" key="key_toggleToolbox" label="&projectMenu_debug_label;" accesskey="&projectMenu_debug_accesskey;"/>
         <menuseparator/>
         <menuitem command="cmd_removeProject" accesskey="&projectMenu_remove_accesskey;"/>
       </menupopup>
     </menu>
 
+    <menu id="menu-runtime2" label="foo" accesskey="&runtimeMenu_accesskey;">
+      <menupopup id="menu-runtime-popup2">
+        <menuitem command="cmd_takeScreenshot" accesskey="&runtimeMenu_takeScreenshot_accesskey;"/>
+        <menuitem command="cmd_showPermissionsTable" accesskey="&runtimeMenu_showPermissionTable_accesskey;"/>
+        <menuitem command="cmd_showRuntimeDetails" accesskey="&runtimeMenu_showDetails_accesskey;"/>
+        <menuseparator/>
+        <menuitem command="cmd_disconnectRuntime" accesskey="&runtimeMenu_disconnect_accesskey;"/>
+      </menupopup>
+    </menu>
+
     <menu id="menu-runtime" label="&runtimeMenu_label;" accesskey="&runtimeMenu_accesskey;">
       <menupopup id="menu-runtime-popup">
         <menuitem command="cmd_takeScreenshot" accesskey="&runtimeMenu_takeScreenshot_accesskey;"/>
         <menuitem command="cmd_showPermissionsTable" accesskey="&runtimeMenu_showPermissionTable_accesskey;"/>
         <menuitem command="cmd_showRuntimeDetails" accesskey="&runtimeMenu_showDetails_accesskey;"/>
         <menuseparator/>
         <menuitem command="cmd_disconnectRuntime" accesskey="&runtimeMenu_disconnect_accesskey;"/>
       </menupopup>
diff --git a/browser/themes/shared/devtools/projecteditor/projecteditor.css b/browser/themes/shared/devtools/projecteditor/projecteditor.css
--- a/browser/themes/shared/devtools/projecteditor/projecteditor.css
+++ b/browser/themes/shared/devtools/projecteditor/projecteditor.css
@@ -23,17 +23,17 @@
 
 .arrow[invisible] {
   visibility: hidden;
 }
 
 #projecteditor-menubar {
   /* XXX: Hide menu bar until we have option to add menu items
      to an existing one. */
-  display: none;
+  /*display: none;*/
 }
 
 #projecteditor-toolbar,
 #projecteditor-toolbar-bottom {
   display: none; /* For now don't show the status bars */
   min-height: 22px;
   height: 22px;
   background: rgb(237, 237, 237);
