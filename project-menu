# HG changeset patch
# Parent f0b6c8f60ecbf5138ace254c28d76b7a4e4d3a54
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 1021827 - Show menu items for project editor inside of App Manager;r=paul

diff --git a/browser/devtools/projecteditor/lib/plugins/new/new.js b/browser/devtools/projecteditor/lib/plugins/new/new.js
--- a/browser/devtools/projecteditor/lib/plugins/new/new.js
+++ b/browser/devtools/projecteditor/lib/plugins/new/new.js
@@ -7,19 +7,19 @@
 const { Class } = require("sdk/core/heritage");
 const { registerPlugin, Plugin } = require("projecteditor/plugins/core");
 const { getLocalizedString } = require("projecteditor/helpers/l10n");
 
 // Handles the new command.
 var NewFile = Class({
   extends: Plugin,
 
-  init: function(host) {
+  init: function() {
     this.host.createMenuItem({
-      parent: "#file-menu-popup",
+      parent: this.host.fileMenuPopup,
       label: getLocalizedString("projecteditor.newLabel"),
       command: "cmd-new",
       key: "key-new"
     });
     this.host.createMenuItem({
       parent: "#directory-menu-popup",
       label: getLocalizedString("projecteditor.newLabel"),
       command: "cmd-new"
diff --git a/browser/devtools/projecteditor/lib/projecteditor.js b/browser/devtools/projecteditor/lib/projecteditor.js
--- a/browser/devtools/projecteditor/lib/projecteditor.js
+++ b/browser/devtools/projecteditor/lib/projecteditor.js
@@ -71,24 +71,27 @@ var ProjectEditor = Class({
 
   /**
    * Initialize ProjectEditor, and load into an iframe if specified.
    *
    * @param Iframe iframe
    *        The iframe to inject the DOM into.  If this is not
    *        specified, then this.load(frame) will need to be called
    *        before accessing ProjectEditor.
+   * @param Object options
+   *         - menubar: a <menubar> element to inject menus into
    */
-  initialize: function(iframe) {
+  initialize: function(iframe, options = {}) {
     this._onTreeSelected = this._onTreeSelected.bind(this);
     this._onTreeResourceRemoved = this._onTreeResourceRemoved.bind(this);
     this._onEditorCreated = this._onEditorCreated.bind(this);
     this._onEditorActivated = this._onEditorActivated.bind(this);
     this._onEditorDeactivated = this._onEditorDeactivated.bind(this);
     this._updateEditorMenuItems = this._updateEditorMenuItems.bind(this);
+    this.menubar = options.menubar || null;
 
     if (iframe) {
       this.load(iframe);
     }
   },
 
   /**
    * Load the instance inside of a specified iframe.
@@ -138,32 +141,56 @@ var ProjectEditor = Class({
     this.shells = new ShellDeck(this, this.document);
     this.shells.on("editor-created", this._onEditorCreated);
     this.shells.on("editor-activated", this._onEditorActivated);
     this.shells.on("editor-deactivated", this._onEditorDeactivated);
 
     let shellContainer = this.document.querySelector("#shells-deck-container");
     shellContainer.appendChild(this.shells.elt);
 
-    let popup = this.document.querySelector("#edit-menu-popup");
-    popup.addEventListener("popupshowing", this.updateEditorMenuItems);
-
     // We are not allowing preset projects for now - rebuild a fresh one
     // each time.
     this.setProject(new Project({
       id: "",
       name: "",
       directories: [],
       openFiles: []
     }));
 
+    this._buildMenubar();
     this._initCommands();
     this._initPlugins();
   },
 
+  _buildMenubar: function() {
+
+    this.projectEditorCommandset = this.document.getElementById("projecteditor-commandset");
+    this.projectEditorKeyset = this.document.getElementById("projecteditor-keyset");
+
+    this.editorCommandset = this.document.getElementById("editMenuCommands");
+    this.editorKeyset = this.document.getElementById("editMenuKeys");
+
+    this.editMenu = this.document.getElementById("edit-menu");
+    this.fileMenu = this.document.getElementById("file-menu");
+
+    this.editMenuPopup = this.document.getElementById("edit-menu-popup");
+    this.fileMenuPopup = this.document.getElementById("file-menu-popup");
+
+    this.editMenu.addEventListener("popupshowing", this._updateEditorMenuItems);
+
+    if (this.menubar) {
+      let body = this.menubar.ownerDocument.body || this.menubar.ownerDocument.querySelector("window");
+      body.appendChild(this.projectEditorCommandset);
+      body.appendChild(this.projectEditorKeyset);
+      body.appendChild(this.editorCommandset);
+      body.appendChild(this.editorKeyset);
+      this.menubar.appendChild(this.fileMenu);
+      this.menubar.appendChild(this.editMenu);
+    }
+  },
 
   /**
    * Create the project tree sidebar that lists files.
    */
   _buildSidebar: function() {
     this.projectTree = new ProjectTreeView(this.document, {
       resourceVisible: this.resourceVisible.bind(this),
       resourceFormatter: this.resourceFormatter.bind(this)
@@ -174,18 +201,17 @@ var ProjectEditor = Class({
     let sourcesBox = this.document.querySelector("#sources");
     sourcesBox.appendChild(this.projectTree.elt);
   },
 
   /**
    * Set up listeners for commands to dispatch to all of the plugins
    */
   _initCommands: function() {
-    this.commands = this.document.querySelector("#projecteditor-commandset");
-    this.commands.addEventListener("command", (evt) => {
+    this.projectEditorCommandset.addEventListener("command", (evt) => {
       evt.stopPropagation();
       evt.preventDefault();
       this.pluginDispatch("onCommand", evt.target.id, evt.target);
     });
   },
 
   /**
    * Initialize each plugin in registeredPlugins
@@ -203,34 +229,36 @@ var ProjectEditor = Class({
 
     this.pluginDispatch("lateInit");
   },
 
   /**
    * Enable / disable necessary menu items using globalOverlay.js.
    */
   _updateEditorMenuItems: function() {
-    this.window.goUpdateGlobalEditMenuItems();
-    this.window.goUpdateGlobalEditMenuItems();
+    let window = this.editMenu.ownerDocument.defaultView;
+    window.goUpdateGlobalEditMenuItems();
     let commands = ['cmd_undo', 'cmd_redo', 'cmd_delete', 'cmd_findAgain'];
     commands.forEach(this.window.goUpdateCommand);
   },
 
   /**
    * Destroy all objects on the iframe unload event.
    */
   destroy: function() {
     this._plugins.forEach(plugin => { plugin.destroy(); });
 
     forget(this, this.projectTree);
     this.projectTree.destroy();
     this.projectTree = null;
 
     this.shells.destroy();
 
+    this.editMenu.removeEventListener("popupshowing", this._updateEditorMenuItems);
+
     forget(this, this.project);
     this.project.destroy();
     this.project = null;
   },
 
   /**
    * Set the current project viewed by the projecteditor.
    *
@@ -394,20 +422,20 @@ var ProjectEditor = Class({
       let keyName = definition.key;
       if (keyName.startsWith("VK_")) {
         key.setAttribute("keycode", keyName);
       } else {
         key.setAttribute("key", keyName);
       }
       key.setAttribute("modifiers", definition.modifiers);
       key.setAttribute("command", definition.id);
-      this.document.getElementById("projecteditor-keyset").appendChild(key);
+      this.projectEditorCommandset.appendChild(key);
     }
     command.setAttribute("oncommand", "void(0);"); // needed. See bug 371900
-    this.document.getElementById("projecteditor-commandset").appendChild(command);
+    this.projectEditorCommandset.appendChild(command);
     return command;
   },
 
   /**
    * Get the instance of a plugin registered with a certain type.
    *
    * @param Type pluginType
    *             The type, such as SavePlugin
diff --git a/browser/devtools/projecteditor/test/browser.ini b/browser/devtools/projecteditor/test/browser.ini
--- a/browser/devtools/projecteditor/test/browser.ini
+++ b/browser/devtools/projecteditor/test/browser.ini
@@ -5,11 +5,12 @@ support-files =
   head.js
   helper_homepage.html
 
 [browser_projecteditor_app_options.js]
 [browser_projecteditor_delete_file.js]
 [browser_projecteditor_editing_01.js]
 [browser_projecteditor_immediate_destroy.js]
 [browser_projecteditor_init.js]
+[browser_projecteditor_menubar.js]
 [browser_projecteditor_new_file.js]
 [browser_projecteditor_stores.js]
 [browser_projecteditor_tree_selection.js]
diff --git a/browser/devtools/projecteditor/test/browser_projecteditor_menubar.js b/browser/devtools/projecteditor/test/browser_projecteditor_menubar.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/projecteditor/test/browser_projecteditor_menubar.js
@@ -0,0 +1,28 @@
+/* vim: set ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+ http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Test tree selection functionality
+
+let test = asyncTest(function*() {
+  let projecteditor = yield addProjectEditorTabForTempDirectory();
+  ok(projecteditor, "ProjectEditor has loaded");
+
+  let fileMenu = projecteditor.document.getElementById("file-menu");
+  let editMenu = projecteditor.document.getElementById("edit-menu");
+  ok (fileMenu, "The menu has loaded in the projecteditor document");
+  ok (editMenu, "The menu has loaded in the projecteditor document");
+
+  let menubar = content.document.createElement('menubar');
+  let projecteditor2 = yield addProjectEditorTabForTempDirectory({
+    menubar: menubar
+  });
+  let fileMenu = projecteditor2.document.getElementById("file-menu");
+  let editMenu = projecteditor2.document.getElementById("edit-menu");
+  ok (!fileMenu, "The menu has NOT loaded in the projecteditor document");
+  ok (!editMenu, "The menu has NOT loaded in the projecteditor document");
+  ok (menubar.querySelector("#file-menu"), "The menu has loaded in the specified element");
+  ok (menubar.querySelector("#edit-menu"), "The menu has loaded in the specified element");
+});
\ No newline at end of file
diff --git a/browser/devtools/projecteditor/test/head.js b/browser/devtools/projecteditor/test/head.js
--- a/browser/devtools/projecteditor/test/head.js
+++ b/browser/devtools/projecteditor/test/head.js
@@ -67,35 +67,35 @@ function addTab(url) {
       def.resolve(tab);
     }, content);
   }, true);
   content.location = url;
 
   return def.promise;
 }
 
-function addProjectEditorTabForTempDirectory() {
+function addProjectEditorTabForTempDirectory(opts = {}) {
   TEMP_PATH = buildTempDirectoryStructure();
-  let CUSTOM_OPTS = {
+  let customOpts = {
     name: "Test",
     iconUrl: "chrome://browser/skin/devtools/tool-options.svg",
     projectOverviewURL: SAMPLE_WEBAPP_URL
   };
 
-  return addProjectEditorTab().then((projecteditor) => {
-    return projecteditor.setProjectToAppPath(TEMP_PATH, CUSTOM_OPTS).then(() => {
+  return addProjectEditorTab(opts).then((projecteditor) => {
+    return projecteditor.setProjectToAppPath(TEMP_PATH, customOpts).then(() => {
       return projecteditor;
     });
   });
 }
 
-function addProjectEditorTab() {
+function addProjectEditorTab(opts = {}) {
   return addTab("chrome://browser/content/devtools/projecteditor-test.html").then(() => {
     let iframe = content.document.getElementById("projecteditor-iframe");
-    let projecteditor = ProjectEditor.ProjectEditor(iframe);
+    let projecteditor = ProjectEditor.ProjectEditor(iframe, opts);
 
     ok (iframe, "Tab has placeholder iframe for projecteditor");
     ok (projecteditor, "ProjectEditor has been initialized");
 
     return projecteditor.loaded.then((projecteditor) => {
       return projecteditor;
     });
   });
diff --git a/browser/devtools/webide/content/webide.js b/browser/devtools/webide/content/webide.js
--- a/browser/devtools/webide/content/webide.js
+++ b/browser/devtools/webide/content/webide.js
@@ -279,17 +279,19 @@ let UI = {
   // ProjectEditor & details screen
 
   getProjectEditor: function() {
     if (this.projecteditor) {
       return this.projecteditor.loaded;
     }
 
     let projecteditorIframe = document.querySelector("#projecteditor");
-    this.projecteditor = ProjectEditor.ProjectEditor(projecteditorIframe);
+    this.projecteditor = ProjectEditor.ProjectEditor(projecteditorIframe, {
+      menubar: document.querySelector("#main-menubar")
+    });
     this.projecteditor.on("onEditorSave", (editor, resource) => {
       AppManager.validateProject(AppManager.selectedProject);
     });
     return this.projecteditor.loaded;
   },
 
   updateProjectEditorHeader: function() {
     let project = AppManager.selectedProject;
diff --git a/browser/devtools/webide/content/webide.xul b/browser/devtools/webide/content/webide.xul
--- a/browser/devtools/webide/content/webide.xul
+++ b/browser/devtools/webide/content/webide.xul
@@ -4,30 +4,33 @@
    - License, v. 2.0. If a copy of the MPL was not distributed with this
    - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
 
 <!DOCTYPE window [
   <!ENTITY % webideDTD SYSTEM "chrome://webide/content/webide.dtd" >
   %webideDTD;
 ]>
 
+<?xul-overlay href="chrome://global/content/editMenuOverlay.xul"?>
+
 <?xml-stylesheet href="chrome://global/skin/global.css"?>
 <?xml-stylesheet href="chrome://webide/skin/webide.css"?>
 
 <window id="webide"
         xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
         xmlns:html="http://www.w3.org/1999/xhtml"
         title="&windowTitle;"
         windowtype="devtools:webide"
         macanimationtype="document"
         fullscreenbutton="true"
         screenX="4" screenY="4"
         width="640" height="480"
         persist="screenX screenY width height">
 
+  <script type="application/javascript" src="chrome://global/content/globalOverlay.js"></script>
   <script type="application/javascript" src="webide.js"></script>
   <script type="application/javascript" src="cli.js"></script>
 
   <commandset id="mainCommandSet">
     <commandset id="editMenuCommands"/>
     <commandset id="webideCommands">
       <command id="cmd_quit" oncommand="Cmds.quit()"/>
       <command id="cmd_newApp" oncommand="Cmds.newApp()" label="&projectMenu_newApp_label;"/>
