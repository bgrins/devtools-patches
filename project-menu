# HG changeset patch
# Parent da15cd957a2c61b0fdf0a53297392c347d795822
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 1021827 - Show menu items for project editor inside of App Manager;r=paul

diff --git a/browser/devtools/projecteditor/chrome/content/projecteditor.xul b/browser/devtools/projecteditor/chrome/content/projecteditor.xul
--- a/browser/devtools/projecteditor/chrome/content/projecteditor.xul
+++ b/browser/devtools/projecteditor/chrome/content/projecteditor.xul
@@ -41,28 +41,22 @@
           accesskey="&editMenu.accesskey;">
       <menupopup id="edit-menu-popup">
         <menuitem id="menu_undo"/>
         <menuitem id="menu_redo"/>
         <menuseparator/>
         <menuitem id="menu_cut"/>
         <menuitem id="menu_copy"/>
         <menuitem id="menu_paste"/>
-        <menuseparator/>
-        <menuitem id="menu_selectAll"/>
-        <menuseparator/>
-        <menuitem id="menu_find"/>
-        <menuitem id="menu_findAgain"/>
       </menupopup>
     </menu>
   </menubar>
 
-
   <popupset>
-    <menupopup id="directory-menu-popup">
+    <menupopup id="context-menu-popup">
     </menupopup>
   </popupset>
 
   <deck id="main-deck" flex="1">
     <vbox flex="1" id="source-deckitem">
       <hbox id="sources-body" flex="1">
         <vbox width="250" id="sources">
           <vbox flex="1">
diff --git a/browser/devtools/projecteditor/lib/editors.js b/browser/devtools/projecteditor/lib/editors.js
--- a/browser/devtools/projecteditor/lib/editors.js
+++ b/browser/devtools/projecteditor/lib/editors.js
@@ -21,36 +21,44 @@ const XUL_NS = "http://www.mozilla.org/k
 var ItchEditor = Class({
   extends: EventTarget,
 
   /**
    * A boolean specifying if the toolbar above the editor should be hidden.
    */
   hidesToolbar: false,
 
+  /**
+   * A boolean specifying whether the editor can be edited / saved.
+   * For instance, a 'save' doesn't make sense on an image.
+   */
+  isEditable: false,
+
   toString: function() {
     return this.label || "";
   },
 
   emit: function(name, ...args) {
     emit(this, name, ...args);
   },
 
   /**
-   * Initialize the editor with a single document.  This should be called
+   * Initialize the editor with a single host.  This should be called
    * by objects extending this object with:
    * ItchEditor.prototype.initialize.apply(this, arguments)
    */
-  initialize: function(document) {
-    this.doc = document;
+  initialize: function(host) {
+    this.doc = host.document;
     this.label = "";
     this.elt = this.doc.createElement("vbox");
     this.elt.setAttribute("flex", "1");
     this.elt.editor = this;
     this.toolbar = this.doc.querySelector("#projecteditor-toolbar");
+    this.projectEditorKeyset = host.projectEditorKeyset;
+    this.projectEditorCommandset = host.projectEditorCommandset;
   },
 
   /**
    * Sets the visibility of the element that shows up above the editor
    * based on the this.hidesToolbar property.
    */
   setToolbarVisibility: function() {
     if (this.hidesToolbar) {
@@ -98,40 +106,43 @@ exports.ItchEditor = ItchEditor;
 /**
  * The main implementation of the ItchEditor class.  The TextEditor is used
  * when editing any sort of plain text file, and can be created with different
  * modes for syntax highlighting depending on the language.
  */
 var TextEditor = Class({
   extends: ItchEditor,
 
+  isEditable: true,
+
   /**
    * Extra keyboard shortcuts to use with the editor.  Shortcuts defined
    * within projecteditor should be triggered when they happen in the editor, and
    * they would usually be swallowed without registering them.
    * See "devtools/sourceeditor/editor" for more information.
    */
   get extraKeys() {
     let extraKeys = {};
 
     // Copy all of the registered keys into extraKeys object, to notify CodeMirror
     // that it should be ignoring these keys
-    [...this.doc.querySelectorAll("#projecteditor-keyset key")].forEach((key) => {
+    [...this.projectEditorKeyset.querySelectorAll("key")].forEach((key) => {
       let keyUpper = key.getAttribute("key").toUpperCase();
       let toolModifiers = key.getAttribute("modifiers");
       let modifiers = {
         alt: toolModifiers.contains("alt"),
         shift: toolModifiers.contains("shift")
       };
 
       // On the key press, we will dispatch the event within projecteditor.
       extraKeys[Editor.accel(keyUpper, modifiers)] = () => {
-        let event = this.doc.createEvent('Event');
+        let doc = this.projectEditorCommandset.ownerDocument;
+        let event = doc.createEvent('Event');
         event.initEvent('command', true, true);
-        let command = this.doc.querySelector("#" + key.getAttribute("command"));
+        let command = this.projectEditorCommandset.querySelector("#" + key.getAttribute("command"));
         command.dispatchEvent(event);
       };
     });
 
     return extraKeys;
   },
 
   initialize: function(document, mode=Editor.modes.text) {
@@ -222,32 +233,32 @@ var TextEditor = Class({
       this.editor.focus();
     });
   }
 });
 
 /**
  * Wrapper for TextEditor using JavaScript syntax highlighting.
  */
-function JSEditor(document) {
-  return TextEditor(document, Editor.modes.js);
+function JSEditor(host) {
+  return TextEditor(host, Editor.modes.js);
 }
 
 /**
  * Wrapper for TextEditor using CSS syntax highlighting.
  */
-function CSSEditor(document) {
-  return TextEditor(document, Editor.modes.css);
+function CSSEditor(host) {
+  return TextEditor(host, Editor.modes.css);
 }
 
 /**
  * Wrapper for TextEditor using HTML syntax highlighting.
  */
-function HTMLEditor(document) {
-  return TextEditor(document, Editor.modes.html);
+function HTMLEditor(host) {
+  return TextEditor(host, Editor.modes.html);
 }
 
 /**
  * Get the type of editor that can handle a particular resource.
  * @param Resource resource
  *        The single file that is going to be opened.
  * @returns Type:Editor
  *          The type of editor that can handle this resource.  The
diff --git a/browser/devtools/projecteditor/lib/plugins/app-manager/app-project-editor.js b/browser/devtools/projecteditor/lib/plugins/app-manager/app-project-editor.js
--- a/browser/devtools/projecteditor/lib/plugins/app-manager/app-project-editor.js
+++ b/browser/devtools/projecteditor/lib/plugins/app-manager/app-project-editor.js
@@ -9,17 +9,17 @@ const { Class } = require("sdk/core/heri
 const promise = require("projecteditor/helpers/promise");
 const { ItchEditor } = require("projecteditor/editors");
 
 var AppProjectEditor = Class({
   extends: ItchEditor,
 
   hidesToolbar: true,
 
-  initialize: function(document, host) {
+  initialize: function(host) {
     ItchEditor.prototype.initialize.apply(this, arguments);
     this.appended = promise.resolve();
     this.host = host;
     this.label = "app-manager";
   },
 
   destroy: function() {
     this.elt.remove();
diff --git a/browser/devtools/projecteditor/lib/plugins/delete/delete.js b/browser/devtools/projecteditor/lib/plugins/delete/delete.js
--- a/browser/devtools/projecteditor/lib/plugins/delete/delete.js
+++ b/browser/devtools/projecteditor/lib/plugins/delete/delete.js
@@ -9,21 +9,21 @@ const { registerPlugin, Plugin } = requi
 const { confirm } = require("projecteditor/helpers/prompts");
 const { getLocalizedString } = require("projecteditor/helpers/l10n");
 
 var DeletePlugin = Class({
   extends: Plugin,
   shouldConfirm: true,
 
   init: function(host) {
-    this.host.addCommand({
+    this.host.addCommand(this, {
       id: "cmd-delete"
     });
     this.host.createMenuItem({
-      parent: "#directory-menu-popup",
+      parent: this.host.contextMenuPopup,
       label: getLocalizedString("projecteditor.deleteLabel"),
       command: "cmd-delete"
     });
   },
 
   confirmDelete: function(resource) {
     let deletePromptMessage = resource.isDir ?
       getLocalizedString("projecteditor.deleteFolderPromptMessage") :
diff --git a/browser/devtools/projecteditor/lib/plugins/image-view/image-editor.js b/browser/devtools/projecteditor/lib/plugins/image-view/image-editor.js
--- a/browser/devtools/projecteditor/lib/plugins/image-view/image-editor.js
+++ b/browser/devtools/projecteditor/lib/plugins/image-view/image-editor.js
@@ -7,17 +7,17 @@
 const { Cu } = require("chrome");
 const { Class } = require("sdk/core/heritage");
 const promise = require("projecteditor/helpers/promise");
 const { ItchEditor } = require("projecteditor/editors");
 
 var ImageEditor = Class({
   extends: ItchEditor,
 
-  initialize: function(document) {
+  initialize: function() {
     ItchEditor.prototype.initialize.apply(this, arguments);
     this.label = "image";
     this.appended = promise.resolve();
   },
 
   load: function(resource) {
     let image = this.doc.createElement("image");
     image.className = "editor-image";
diff --git a/browser/devtools/projecteditor/lib/plugins/new/new.js b/browser/devtools/projecteditor/lib/plugins/new/new.js
--- a/browser/devtools/projecteditor/lib/plugins/new/new.js
+++ b/browser/devtools/projecteditor/lib/plugins/new/new.js
@@ -7,34 +7,33 @@
 const { Class } = require("sdk/core/heritage");
 const { registerPlugin, Plugin } = require("projecteditor/plugins/core");
 const { getLocalizedString } = require("projecteditor/helpers/l10n");
 
 // Handles the new command.
 var NewFile = Class({
   extends: Plugin,
 
-  init: function(host) {
-    this.host.createMenuItem({
-      parent: "#file-menu-popup",
-      label: getLocalizedString("projecteditor.newLabel"),
-      command: "cmd-new",
-      key: "key-new"
-    });
-    this.host.createMenuItem({
-      parent: "#directory-menu-popup",
-      label: getLocalizedString("projecteditor.newLabel"),
-      command: "cmd-new"
-    });
-
-    this.command = this.host.addCommand({
+  init: function() {
+    this.command = this.host.addCommand(this, {
       id: "cmd-new",
       key: getLocalizedString("projecteditor.new.commandkey"),
       modifiers: "accel"
     });
+    this.host.createMenuItem({
+      parent: this.host.fileMenuPopup,
+      label: getLocalizedString("projecteditor.newLabel"),
+      command: "cmd-new",
+      key: "key_cmd-new"
+    });
+    this.host.createMenuItem({
+      parent: this.host.contextMenuPopup,
+      label: getLocalizedString("projecteditor.newLabel"),
+      command: "cmd-new"
+    });
   },
 
   onCommand: function(cmd) {
     if (cmd === "cmd-new") {
       let tree = this.host.projectTree;
       let resource = tree.getSelectedResource();
       parent = resource.isDir ? resource : resource.parent;
       sibling = resource.isDir ? null : resource;
diff --git a/browser/devtools/projecteditor/lib/plugins/save/save.js b/browser/devtools/projecteditor/lib/plugins/save/save.js
--- a/browser/devtools/projecteditor/lib/plugins/save/save.js
+++ b/browser/devtools/projecteditor/lib/plugins/save/save.js
@@ -10,39 +10,43 @@ const picker = require("projecteditor/he
 const { getLocalizedString } = require("projecteditor/helpers/l10n");
 
 // Handles the save command.
 var SavePlugin = Class({
   extends: Plugin,
 
   init: function(host) {
 
-    this.host.addCommand({
+    this.host.addCommand(this, {
+      id: "cmd-save",
+      key: getLocalizedString("projecteditor.save.commandkey"),
+      modifiers: "accel"
+    });
+    this.host.addCommand(this, {
       id: "cmd-saveas",
       key: getLocalizedString("projecteditor.save.commandkey"),
       modifiers: "accel shift"
     });
-    this.host.addCommand({
-      id: "cmd-save",
-      key: getLocalizedString("projecteditor.save.commandkey"),
-      modifiers: "accel"
+    this.host.createMenuItem({
+      parent: this.host.fileMenuPopup,
+      label: getLocalizedString("projecteditor.saveLabel"),
+      command: "cmd-save",
+      key: "key_cmd-save"
     });
+    this.host.createMenuItem({
+      parent: this.host.fileMenuPopup,
+      label: getLocalizedString("projecteditor.saveAsLabel"),
+      command: "cmd-saveas",
+      key: "key_cmd-saveas"
+    });
+  },
 
-    // Wait until we can add things into the app manager menu
-    // this.host.createMenuItem({
-    //   parent: "#file-menu-popup",
-    //   label: "Save",
-    //   command: "cmd-save",
-    //   key: "key-save"
-    // });
-    // this.host.createMenuItem({
-    //   parent: "#file-menu-popup",
-    //   label: "Save As",
-    //   command: "cmd-saveas",
-    // });
+  isCommandEnabled: function(cmd) {
+    let currentEditor = this.host.currentEditor;
+    return currentEditor.isEditable;
   },
 
   onCommand: function(cmd) {
     if (cmd === "cmd-save") {
       this.save();
     } else if (cmd === "cmd-saveas") {
       this.saveAs();
     }
diff --git a/browser/devtools/projecteditor/lib/projecteditor.js b/browser/devtools/projecteditor/lib/projecteditor.js
--- a/browser/devtools/projecteditor/lib/projecteditor.js
+++ b/browser/devtools/projecteditor/lib/projecteditor.js
@@ -71,25 +71,34 @@ var ProjectEditor = Class({
 
   /**
    * Initialize ProjectEditor, and load into an iframe if specified.
    *
    * @param Iframe iframe
    *        The iframe to inject the DOM into.  If this is not
    *        specified, then this.load(frame) will need to be called
    *        before accessing ProjectEditor.
+   * @param Object options
+   *         - menubar: a <menubar> element to inject menus into
+   *         - menuindex: Integer child index to insert menus
    */
-  initialize: function(iframe) {
+  initialize: function(iframe, options = {}) {
     this._onTreeSelected = this._onTreeSelected.bind(this);
     this._onTreeResourceRemoved = this._onTreeResourceRemoved.bind(this);
     this._onEditorCreated = this._onEditorCreated.bind(this);
     this._onEditorActivated = this._onEditorActivated.bind(this);
     this._onEditorDeactivated = this._onEditorDeactivated.bind(this);
-    this._updateEditorMenuItems = this._updateEditorMenuItems.bind(this);
-
+    this._updateMenuItems = this._updateMenuItems.bind(this);
+    this.destroy = this.destroy.bind(this);
+    this.menubar = options.menubar || null;
+    this.menuindex = options.menuindex || null;
+    this._menuEnabled = true;
+    this._destroyed = false;
+    this._loaded = false;
+    this._pluginCommands = new Map();
     if (iframe) {
       this.load(iframe);
     }
   },
 
   /**
    * Load the instance inside of a specified iframe.
    * This can be called more than once, and it will return the promise
@@ -106,17 +115,22 @@ var ProjectEditor = Class({
       return this.loaded;
     }
 
     let deferred = promise.defer();
     this.loaded = deferred.promise;
     this.iframe = iframe;
 
     let domReady = () => {
+      if (this._destroyed) {
+        deferred.reject("Error: ProjectEditor has been destroyed before loading");
+        return;
+      }
       this._onLoad();
+      this._loaded = true;
       deferred.resolve(this);
     };
 
     let domHelper = new DOMHelpers(this.iframe.contentWindow);
     domHelper.onceDOMReady(domReady);
 
     this.iframe.setAttribute("src", ITCHPAD_URL);
 
@@ -125,67 +139,103 @@ var ProjectEditor = Class({
 
   /**
    * Build the projecteditor DOM inside of this.iframe.
    */
   _onLoad: function() {
     this.document = this.iframe.contentDocument;
     this.window = this.iframe.contentWindow;
 
+    this._initCommands();
+    this._buildMenubar();
     this._buildSidebar();
 
-    this.window.addEventListener("unload", this.destroy.bind(this));
+    this.window.addEventListener("unload", this.destroy, false);
 
     // Editor management
     this.shells = new ShellDeck(this, this.document);
     this.shells.on("editor-created", this._onEditorCreated);
     this.shells.on("editor-activated", this._onEditorActivated);
     this.shells.on("editor-deactivated", this._onEditorDeactivated);
 
     let shellContainer = this.document.querySelector("#shells-deck-container");
     shellContainer.appendChild(this.shells.elt);
 
-    let popup = this.document.querySelector("#edit-menu-popup");
-    popup.addEventListener("popupshowing", this.updateEditorMenuItems);
-
     // We are not allowing preset projects for now - rebuild a fresh one
     // each time.
     this.setProject(new Project({
       id: "",
       name: "",
       directories: [],
       openFiles: []
     }));
 
-    this._initCommands();
     this._initPlugins();
   },
 
+  _buildMenubar: function() {
+
+    this.editMenu = this.document.getElementById("edit-menu");
+    this.fileMenu = this.document.getElementById("file-menu");
+
+    this.editMenuPopup = this.document.getElementById("edit-menu-popup");
+    this.fileMenuPopup = this.document.getElementById("file-menu-popup");
+    this.editMenu.addEventListener("popupshowing", this._updateMenuItems);
+    this.fileMenu.addEventListener("popupshowing", this._updateMenuItems);
+
+    if (this.menubar) {
+      let body = this.menubar.ownerDocument.body ||
+                 this.menubar.ownerDocument.querySelector("window");
+      body.appendChild(this.projectEditorCommandset);
+      body.appendChild(this.projectEditorKeyset);
+      body.appendChild(this.editorCommandset);
+      body.appendChild(this.editorKeyset);
+      body.appendChild(this.contextMenuPopup);
+
+      let index = this.menuindex || 0;
+      this.menubar.insertBefore(this.editMenu, this.menubar.children[index]);
+      this.menubar.insertBefore(this.fileMenu, this.menubar.children[index]);
+    }
+
+    // Insert a controller to allow enabling and disabling of menu items.
+    this._commandWindow = this.editorCommandset.ownerDocument.defaultView;
+    this._commandController = getCommandController(this);
+    this._commandWindow.controllers.insertControllerAt(0, this._commandController);
+  },
 
   /**
    * Create the project tree sidebar that lists files.
    */
   _buildSidebar: function() {
     this.projectTree = new ProjectTreeView(this.document, {
       resourceVisible: this.resourceVisible.bind(this),
-      resourceFormatter: this.resourceFormatter.bind(this)
+      resourceFormatter: this.resourceFormatter.bind(this),
+      contextMenuPopup: this.contextMenuPopup
     });
     on(this, this.projectTree, "selection", this._onTreeSelected);
     on(this, this.projectTree, "resource-removed", this._onTreeResourceRemoved);
 
     let sourcesBox = this.document.querySelector("#sources > vbox");
     sourcesBox.appendChild(this.projectTree.elt);
   },
 
   /**
    * Set up listeners for commands to dispatch to all of the plugins
    */
   _initCommands: function() {
-    this.commands = this.document.querySelector("#projecteditor-commandset");
-    this.commands.addEventListener("command", (evt) => {
+
+    this.projectEditorCommandset = this.document.getElementById("projecteditor-commandset");
+    this.projectEditorKeyset = this.document.getElementById("projecteditor-keyset");
+
+    this.editorCommandset = this.document.getElementById("editMenuCommands");
+    this.editorKeyset = this.document.getElementById("editMenuKeys");
+
+    this.contextMenuPopup = this.document.getElementById("context-menu-popup");
+
+    this.projectEditorCommandset.addEventListener("command", (evt) => {
       evt.stopPropagation();
       evt.preventDefault();
       this.pluginDispatch("onCommand", evt.target.id, evt.target);
     });
   },
 
   /**
    * Initialize each plugin in registeredPlugins
@@ -202,38 +252,68 @@ var ProjectEditor = Class({
     }
 
     this.pluginDispatch("lateInit");
   },
 
   /**
    * Enable / disable necessary menu items using globalOverlay.js.
    */
-  _updateEditorMenuItems: function() {
-    this.window.goUpdateGlobalEditMenuItems();
-    this.window.goUpdateGlobalEditMenuItems();
-    let commands = ['cmd_undo', 'cmd_redo', 'cmd_delete', 'cmd_findAgain'];
-    commands.forEach(this.window.goUpdateCommand);
+  _updateMenuItems: function() {
+    let window = this.editMenu.ownerDocument.defaultView;
+    let commands = ['cmd_undo', 'cmd_redo', 'cmd_delete', 'cmd_find', 'cmd_findAgain'];
+    commands.forEach(window.goUpdateCommand);
+
+    for (let c of this._pluginCommands.keys()) {
+      window.goUpdateCommand(c);
+    }
   },
 
   /**
    * Destroy all objects on the iframe unload event.
    */
   destroy: function() {
+    this._destroyed = true;
+
+
+    // If been destroyed before the iframe finished loading, then
+    // the properties below will not exist.
+    if (!this._loaded) {
+      this.iframe.setAttribute("src", "about:blank");
+      return;
+    }
+
+    // Reset the src for the iframe so if it reused for a new ProjectEditor
+    // instance, the load will fire properly.
+    this.window.removeEventListener("unload", this.destroy, false);
+    this.iframe.setAttribute("src", "about:blank");
+
     this._plugins.forEach(plugin => { plugin.destroy(); });
 
     forget(this, this.projectTree);
     this.projectTree.destroy();
     this.projectTree = null;
 
     this.shells.destroy();
 
+    this.projectEditorCommandset.remove();
+    this.projectEditorKeyset.remove();
+    this.editorCommandset.remove();
+    this.editorKeyset.remove();
+    this.contextMenuPopup.remove();
+    this.editMenu.remove();
+    this.fileMenu.remove();
+
+    this._commandWindow.controllers.removeController(this._commandController);
+    this._commandController = null;
+
     forget(this, this.project);
     this.project.destroy();
     this.project = null;
+
   },
 
   /**
    * Set the current project viewed by the projecteditor.
    *
    * @param Project project
    *        The project to set.
    */
@@ -379,35 +459,37 @@ var ProjectEditor = Class({
    *
    * @param Object definition
    *               key: a key/keycode string. Example: "f".
    *               id: Unique ID.  Example: "find".
    *               modifiers: Key modifiers. Example: "accel".
    * @returns DOMElement
    *          The command element that has been created.
    */
-  addCommand: function(definition) {
-    let command = this.document.createElement("command");
+  addCommand: function(plugin, definition) {
+    this._pluginCommands.set(definition.id, plugin);
+    let document = this.projectEditorKeyset.ownerDocument;
+    let command = document.createElement("command");
     command.setAttribute("id", definition.id);
     if (definition.key) {
-      let key = this.document.createElement("key");
+      let key = document.createElement("key");
       key.id = "key_" + definition.id;
 
       let keyName = definition.key;
       if (keyName.startsWith("VK_")) {
         key.setAttribute("keycode", keyName);
       } else {
         key.setAttribute("key", keyName);
       }
       key.setAttribute("modifiers", definition.modifiers);
       key.setAttribute("command", definition.id);
-      this.document.getElementById("projecteditor-keyset").appendChild(key);
+      this.projectEditorKeyset.appendChild(key);
     }
     command.setAttribute("oncommand", "void(0);"); // needed. See bug 371900
-    this.document.getElementById("projecteditor-commandset").appendChild(command);
+    this.projectEditorCommandset.appendChild(command);
     return command;
   },
 
   /**
    * Get the instance of a plugin registered with a certain type.
    *
    * @param Type pluginType
    *             The type, such as SavePlugin
@@ -605,11 +687,54 @@ var ProjectEditor = Class({
 
   get currentShell() {
     return this.shells.currentShell;
   },
 
   get currentEditor() {
     return this.shells.currentEditor;
   },
+
+  /**
+   * Whether or not menu items should be able to be enabled.
+   * Note that even if this is true, certain menu items will not be
+   * enabled until the correct state is achieved (for instance, the
+   * 'copy' menu item is only enabled when there is a selection).
+   * But if this is false, then nothing will be enabled.
+   */
+  set menuEnabled(val) {
+    this._menuEnabled = val;
+    this._updateMenuItems();
+  },
+
+  get menuEnabled() {
+    return this._menuEnabled;
+  }
 });
 
+
+/**
+ * Returns a controller object that can be used for
+ * editor-specific commands such as find, jump to line,
+ * copy/paste, etc.
+ */
+function getCommandController(host) {
+  return {
+    supportsCommand: function (cmd) {
+      return host._pluginCommands.get(cmd);
+    },
+
+    isCommandEnabled: function (cmd) {
+      if (!host.menuEnabled) {
+        return false;
+      }
+      let plugin = host._pluginCommands.get(cmd);
+      if (plugin && plugin.isCommandEnabled) {
+        return plugin.isCommandEnabled(cmd);
+      }
+      return true;
+    },
+    doCommand: function(cmd) {
+    }
+  };
+}
+
 exports.ProjectEditor = ProjectEditor;
diff --git a/browser/devtools/projecteditor/lib/shells.js b/browser/devtools/projecteditor/lib/shells.js
--- a/browser/devtools/projecteditor/lib/shells.js
+++ b/browser/devtools/projecteditor/lib/shells.js
@@ -31,17 +31,17 @@ var Shell = Class({
     this.host = host;
     this.doc = host.document;
     this.resource = resource;
     this.elt = this.doc.createElement("vbox");
     this.elt.shell = this;
 
     let constructor = this._editorTypeForResource();
 
-    this.editor = constructor(this.doc, this.host);
+    this.editor = constructor(this.host);
     this.editor.shell = this;
     this.editorAppended = this.editor.appended;
 
     let loadDefer = promise.defer();
     this.editor.on("load", () => {
       loadDefer.resolve();
     });
 
diff --git a/browser/devtools/projecteditor/lib/tree.js b/browser/devtools/projecteditor/lib/tree.js
--- a/browser/devtools/projecteditor/lib/tree.js
+++ b/browser/devtools/projecteditor/lib/tree.js
@@ -101,17 +101,17 @@ var ResourceContainer = Class({
    * Open the context menu when right clicking on the view.
    * XXX: We could pass this to plugins to allow themselves
    * to be register/remove items from the context menu if needed.
    *
    * @param Event e
    */
   openContextMenu: function(ev) {
     ev.preventDefault();
-    let popup = this.tree.doc.getElementById("directory-menu-popup");
+    let popup = this.tree.options.contextMenuPopup;
     popup.openPopupAtScreen(ev.screenX, ev.screenY, true);
   },
 
   /**
    * Update the view based on the current state of the Resource.
    */
   update: function() {
     let visible = this.tree.options.resourceVisible ?
@@ -203,39 +203,40 @@ var ResourceContainer = Class({
  * Use ProjectTreeView instead.
  */
 var TreeView = Class({
   extends: EventTarget,
 
   /**
    * @param Document document
    * @param Object options
+   *               - contextMenuPopup: a <menupopup> element
    *               - resourceFormatter: a function(Resource, DOMNode)
    *                 that renders the resource into the view
    *               - resourceVisible: a function(Resource) -> Boolean
    *                 that determines if the resource should show up.
    */
-  initialize: function(document, options) {
-    this.doc = document;
+  initialize: function(doc, options) {
+    this.doc = doc;
     this.options = merge({
       resourceFormatter: function(resource, elt) {
         elt.textContent = resource.toString();
       }
     }, options);
     this.models = new Set();
     this.roots = new Set();
     this._containers = new Map();
-    this.elt = document.createElementNS(HTML_NS, "div");
+    this.elt = this.doc.createElementNS(HTML_NS, "div");
     this.elt.tree = this;
     this.elt.className = "sources-tree";
     this.elt.setAttribute("with-arrows", "true");
     this.elt.setAttribute("theme", "dark");
     this.elt.setAttribute("flex", "1");
 
-    this.children = document.createElementNS(HTML_NS, "ul");
+    this.children = this.doc.createElementNS(HTML_NS, "ul");
     this.elt.appendChild(this.children);
 
     this.resourceChildrenChanged = this.resourceChildrenChanged.bind(this);
     this.removeResource = this.removeResource.bind(this);
     this.updateResource = this.updateResource.bind(this);
   },
 
   destroy: function() {
diff --git a/browser/devtools/projecteditor/test/browser.ini b/browser/devtools/projecteditor/test/browser.ini
--- a/browser/devtools/projecteditor/test/browser.ini
+++ b/browser/devtools/projecteditor/test/browser.ini
@@ -4,11 +4,12 @@ support-files =
   head.js
   helper_homepage.html
 
 [browser_projecteditor_app_options.js]
 [browser_projecteditor_delete_file.js]
 [browser_projecteditor_editing_01.js]
 [browser_projecteditor_immediate_destroy.js]
 [browser_projecteditor_init.js]
+[browser_projecteditor_menubar.js]
 [browser_projecteditor_new_file.js]
 [browser_projecteditor_stores.js]
 [browser_projecteditor_tree_selection.js]
diff --git a/browser/devtools/projecteditor/test/browser_projecteditor_delete_file.js b/browser/devtools/projecteditor/test/browser_projecteditor_delete_file.js
--- a/browser/devtools/projecteditor/test/browser_projecteditor_delete_file.js
+++ b/browser/devtools/projecteditor/test/browser_projecteditor_delete_file.js
@@ -32,17 +32,17 @@ let test = asyncTest(function*() {
       node.ownerDocument.defaultView
     );
   }
 
   function deleteWithContextMenu(container) {
     let defer = promise.defer();
 
     let resource = container.resource;
-    let popup = projecteditor.document.getElementById("directory-menu-popup");
+    let popup = projecteditor.document.getElementById("context-menu-popup");
     info ("Going to attempt deletion for: " + resource.path)
 
     onPopupShow(popup).then(function () {
       let deleteCommand = popup.querySelector("[command=cmd-delete]");
       ok (deleteCommand, "Delete command exists in popup");
       is (deleteCommand.getAttribute("hidden"), "", "Delete command is visible");
       is (deleteCommand.getAttribute("disabled"), "", "Delete command is enabled");
 
diff --git a/browser/devtools/projecteditor/test/browser_projecteditor_immediate_destroy.js b/browser/devtools/projecteditor/test/browser_projecteditor_immediate_destroy.js
--- a/browser/devtools/projecteditor/test/browser_projecteditor_immediate_destroy.js
+++ b/browser/devtools/projecteditor/test/browser_projecteditor_immediate_destroy.js
@@ -51,12 +51,35 @@ let test = asyncTest(function* () {
     ok (projecteditor, "ProjectEditor has been initialized");
 
     return projecteditor.load(iframe).then(() => {
       info ("Closing the tab after a load has been requested and finished");
       gBrowser.removeCurrentTab();
     });
   });
 
+  yield addTab("chrome://browser/content/devtools/projecteditor-test.html").then(() => {
+    let iframe = content.document.getElementById("projecteditor-iframe");
+    ok (iframe, "Tab has placeholder iframe for projecteditor");
+
+    let projecteditor = ProjectEditor.ProjectEditor(iframe);
+    ok (projecteditor, "ProjectEditor has been initialized");
+
+    let loadedDone = promise.defer();
+    projecteditor.loaded.then(() => {
+      ok (false, "Loaded has finished after destroy() has been called");
+      loadedDone.resolve();
+    }, () => {
+      ok (true, "Loaded has been rejected after destroy() has been called");
+      loadedDone.resolve();
+    });
+
+    projecteditor.destroy();
+
+    return loadedDone.promise.then(() => {
+      gBrowser.removeCurrentTab();
+    });
+  });
+
   finish();
 });
 
 
diff --git a/browser/devtools/projecteditor/test/browser_projecteditor_menubar.js b/browser/devtools/projecteditor/test/browser_projecteditor_menubar.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/projecteditor/test/browser_projecteditor_menubar.js
@@ -0,0 +1,28 @@
+/* vim: set ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+ http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Test tree selection functionality
+
+let test = asyncTest(function*() {
+  let projecteditor = yield addProjectEditorTabForTempDirectory();
+  ok(projecteditor, "ProjectEditor has loaded");
+
+  let fileMenu = projecteditor.document.getElementById("file-menu");
+  let editMenu = projecteditor.document.getElementById("edit-menu");
+  ok (fileMenu, "The menu has loaded in the projecteditor document");
+  ok (editMenu, "The menu has loaded in the projecteditor document");
+
+  let menubar = content.document.createElement('menubar');
+  let projecteditor2 = yield addProjectEditorTabForTempDirectory({
+    menubar: menubar
+  });
+  let fileMenu = projecteditor2.document.getElementById("file-menu");
+  let editMenu = projecteditor2.document.getElementById("edit-menu");
+  ok (!fileMenu, "The menu has NOT loaded in the projecteditor document");
+  ok (!editMenu, "The menu has NOT loaded in the projecteditor document");
+  ok (menubar.querySelector("#file-menu"), "The menu has loaded in the specified element");
+  ok (menubar.querySelector("#edit-menu"), "The menu has loaded in the specified element");
+});
\ No newline at end of file
diff --git a/browser/devtools/projecteditor/test/head.js b/browser/devtools/projecteditor/test/head.js
--- a/browser/devtools/projecteditor/test/head.js
+++ b/browser/devtools/projecteditor/test/head.js
@@ -67,35 +67,35 @@ function addTab(url) {
       def.resolve(tab);
     }, content);
   }, true);
   content.location = url;
 
   return def.promise;
 }
 
-function addProjectEditorTabForTempDirectory() {
+function addProjectEditorTabForTempDirectory(opts = {}) {
   TEMP_PATH = buildTempDirectoryStructure();
-  let CUSTOM_OPTS = {
+  let customOpts = {
     name: "Test",
     iconUrl: "chrome://browser/skin/devtools/tool-options.svg",
     projectOverviewURL: SAMPLE_WEBAPP_URL
   };
 
-  return addProjectEditorTab().then((projecteditor) => {
-    return projecteditor.setProjectToAppPath(TEMP_PATH, CUSTOM_OPTS).then(() => {
+  return addProjectEditorTab(opts).then((projecteditor) => {
+    return projecteditor.setProjectToAppPath(TEMP_PATH, customOpts).then(() => {
       return projecteditor;
     });
   });
 }
 
-function addProjectEditorTab() {
+function addProjectEditorTab(opts = {}) {
   return addTab("chrome://browser/content/devtools/projecteditor-test.html").then(() => {
     let iframe = content.document.getElementById("projecteditor-iframe");
-    let projecteditor = ProjectEditor.ProjectEditor(iframe);
+    let projecteditor = ProjectEditor.ProjectEditor(iframe, opts);
 
     ok (iframe, "Tab has placeholder iframe for projecteditor");
     ok (projecteditor, "ProjectEditor has been initialized");
 
     return projecteditor.loaded.then((projecteditor) => {
       return projecteditor;
     });
   });
diff --git a/browser/devtools/webide/content/webide.js b/browser/devtools/webide/content/webide.js
--- a/browser/devtools/webide/content/webide.js
+++ b/browser/devtools/webide/content/webide.js
@@ -57,16 +57,20 @@ let UI = {
     AppManager.on("app-manager-update", this.appManagerUpdate);
 
     this.updateCommands();
     this.updateRuntimeList();
 
     this.onfocus = this.onfocus.bind(this);
     window.addEventListener("focus", this.onfocus, true);
 
+    this.toggleProjectEditorMenus = this.toggleProjectEditorMenus.bind(this);
+    this.deck = document.querySelector("#deck");
+    this.deck.addEventListener("select", this.toggleProjectEditorMenus);
+
     AppProjects.load().then(() => {
       this.openLastProject();
     });
 
     // Auto install the ADB Addon Helper. Only once.
     // If the user decides to uninstall the addon, we won't install it again.
     let autoInstallADBHelper = Services.prefs.getBoolPref("devtools.webide.autoinstallADBHelper");
     if (autoInstallADBHelper && !Devices.helperAddonInstalled) {
@@ -88,16 +92,17 @@ let UI = {
       }
     } else {
       AppManager.selectedProject = null;
     }
   },
 
   uninit: function() {
     window.removeEventListener("focus", this.onfocus, true);
+    this.deck.addEventListener("select", this.toggleProjectEditorMenus);
     AppManager.off("app-manager-update", this.appManagerUpdate);
     AppManager.uninit();
     window.removeEventListener("message", this.onMessage);
   },
 
   onfocus: function() {
     // Because we can't track the activity in the folder project,
     // we need to validate the project regularly. Let's assume that
@@ -316,23 +321,44 @@ let UI = {
       buttonNode.classList.remove("no-project");
       labelNode.setAttribute("value", project.name);
       imageNode.setAttribute("src", project.icon);
     }
   },
 
   // ProjectEditor & details screen
 
+  destroyProjectEditor: function() {
+    if (this.projecteditor) {
+      this.projecteditor.destroy();
+      this.projecteditor = null;
+    }
+  },
+
+  toggleProjectEditorMenus: function() {
+    if (this.projecteditor) {
+      let panel = this.deck.selectedPanel;
+      if (panel && panel.id == "projecteditor") {
+        this.projecteditor.menuEnabled = true;
+      } else {
+        this.projecteditor.menuEnabled = false;
+      }
+    }
+  },
+
   getProjectEditor: function() {
     if (this.projecteditor) {
       return this.projecteditor.loaded;
     }
 
     let projecteditorIframe = document.querySelector("#deck-panel-projecteditor");
-    this.projecteditor = ProjectEditor.ProjectEditor(projecteditorIframe);
+    this.projecteditor = ProjectEditor.ProjectEditor(projecteditorIframe, {
+      menubar: document.querySelector("#main-menubar"),
+      menuindex: 1
+    });
     this.projecteditor.on("onEditorSave", (editor, resource) => {
       AppManager.validateProject(AppManager.selectedProject);
     });
     return this.projecteditor.loaded;
   },
 
   updateProjectEditorHeader: function() {
     let project = AppManager.selectedProject;
@@ -401,25 +427,24 @@ let UI = {
 
   resetFocus: function() {
     document.commandDispatcher.focusedElement = document.documentElement;
   },
 
   selectDeckPanel: function(id) {
     this.hidePanels();
     this.resetFocus();
-    let deck = document.querySelector("#deck");
-    let panel = deck.querySelector("#deck-panel-" + id);
-    deck.selectedPanel = panel;
+    let panel = this.deck.querySelector("#deck-panel-" + id);
+    this.deck.selectedPanel = panel;
   },
 
   resetDeck: function() {
     this.resetFocus();
-    let deck = document.querySelector("#deck");
-    deck.selectedPanel = null;
+    this.deck.selectedPanel = null;
+    this.toggleProjectEditorMenus();
   },
 
   /********** COMMANDS **********/
 
   updateCommands: function() {
 
     if (document.querySelector("window").classList.contains("busy")) {
       document.querySelector("#cmd_newApp").setAttribute("disabled", "true");
@@ -817,17 +842,21 @@ let Cmds = {
     }
   },
 
   removeProject: function() {
     return AppManager.removeSelectedProject();
   },
 
   toggleEditors: function() {
-    Services.prefs.setBoolPref("devtools.webide.showProjectEditor", !UI.isProjectEditorEnabled());
+    let isNowEnabled = !UI.isProjectEditorEnabled();
+    Services.prefs.setBoolPref("devtools.webide.showProjectEditor", isNowEnabled);
+    if (!isNowEnabled) {
+      UI.destroyProjectEditor();
+    }
     UI.openProject();
   },
 
   showTroubleShooting: function() {
     UI.openInBrowser(HELP_URL);
   },
 
   showAddons: function() {
diff --git a/browser/devtools/webide/content/webide.xul b/browser/devtools/webide/content/webide.xul
--- a/browser/devtools/webide/content/webide.xul
+++ b/browser/devtools/webide/content/webide.xul
@@ -4,30 +4,33 @@
    - License, v. 2.0. If a copy of the MPL was not distributed with this
    - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
 
 <!DOCTYPE window [
   <!ENTITY % webideDTD SYSTEM "chrome://webide/content/webide.dtd" >
   %webideDTD;
 ]>
 
+<?xul-overlay href="chrome://global/content/editMenuOverlay.xul"?>
+
 <?xml-stylesheet href="chrome://global/skin/global.css"?>
 <?xml-stylesheet href="chrome://webide/skin/webide.css"?>
 
 <window id="webide"
         xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
         xmlns:html="http://www.w3.org/1999/xhtml"
         title="&windowTitle;"
         windowtype="devtools:webide"
         macanimationtype="document"
         fullscreenbutton="true"
         screenX="4" screenY="4"
         width="640" height="480"
         persist="screenX screenY width height">
 
+  <script type="application/javascript" src="chrome://global/content/globalOverlay.js"></script>
   <script type="application/javascript" src="webide.js"></script>
   <script type="application/javascript" src="cli.js"></script>
 
   <commandset id="mainCommandSet">
     <commandset id="editMenuCommands"/>
     <commandset id="webideCommands">
       <command id="cmd_quit" oncommand="Cmds.quit()"/>
       <command id="cmd_newApp" oncommand="Cmds.newApp()" label="&projectMenu_newApp_label;"/>
diff --git a/browser/locales/en-US/chrome/browser/devtools/projecteditor.properties b/browser/locales/en-US/chrome/browser/devtools/projecteditor.properties
--- a/browser/locales/en-US/chrome/browser/devtools/projecteditor.properties
+++ b/browser/locales/en-US/chrome/browser/devtools/projecteditor.properties
@@ -27,20 +27,29 @@ projecteditor.deletePromptTitle=Delete
 projecteditor.deleteFolderPromptMessage=Are you sure you want to delete this folder?
 
 # LOCALIZATION NOTE (projecteditor.deleteFilePromptMessage):
 # This string is displayed as as the message of the confirm prompt that checks
 # to make sure if a file should be removed.
 projecteditor.deleteFilePromptMessage=Are you sure you want to delete this file?
 
 # LOCALIZATION NOTE (projecteditor.newLabel):
-# This string is displayed as a context menu item for adding a new file to
+# This string is displayed as a menu item for adding a new file to
 # the directory.
 projecteditor.newLabel=New…
 
+# LOCALIZATION NOTE (projecteditor.saveLabel):
+# This string is displayed as a menu item for saving the current file.
+projecteditor.saveLabel=Save
+
+# LOCALIZATION NOTE (projecteditor.saveAsLabel):
+# This string is displayed as a menu item for saving the current file
+# with a new name.
+projecteditor.saveAsLabel=Save As…
+
 # LOCALIZATION NOTE (projecteditor.selectFileLabel):
 # This string is displayed as the title on the file picker when saving a file.
 projecteditor.selectFileLabel=Select a File
 
 # LOCALIZATION NOTE (projecteditor.openFolderLabel):
 # This string is displayed as the title on the file picker when opening a folder.
 projecteditor.openFolderLabel=Select a Folder
 
