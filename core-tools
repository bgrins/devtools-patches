# HG changeset patch
# Parent e8dbe7aabcc898f3b8da44a8da692414c276bf0a
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 938172 - Do not allow disabling of "core" developer tools from options panel;r=dcamp

diff --git a/browser/devtools/devtools-clhandler.js b/browser/devtools/devtools-clhandler.js
--- a/browser/devtools/devtools-clhandler.js
+++ b/browser/devtools/devtools-clhandler.js
@@ -25,17 +25,17 @@ devtoolsCommandlineHandler.prototype = {
     }
   },
 
   handleConsoleFlag: function(cmdLine) {
     let window = Services.wm.getMostRecentWindow("devtools:webconsole");
     if (!window) {
       let devtools = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools;
       // Load the browser devtools main module as the loader's main module.
-      devtools.main("main");
+      Cu.import("resource:///modules/devtools/gDevTools.jsm");
       let hudservice = devtools.require("devtools/webconsole/hudservice");
       let console = Cu.import("resource://gre/modules/devtools/Console.jsm", {}).console;
       hudservice.toggleBrowserConsole().then(null, console.error);
     } else {
       window.focus(); // the Browser Console was already open
     }
 
     if (cmdLine.state == Ci.nsICommandLine.STATE_REMOTE_AUTO) {
diff --git a/browser/devtools/framework/gDevTools.jsm b/browser/devtools/framework/gDevTools.jsm
--- a/browser/devtools/framework/gDevTools.jsm
+++ b/browser/devtools/framework/gDevTools.jsm
@@ -47,16 +47,17 @@ DevTools.prototype = {
    * See it as a "manifest".
    * The only actual code lives in the build() function, which will be used to
    * start an instance of this tool.
    *
    * Each toolDefinition has the following properties:
    * - id: Unique identifier for this tool (string|required)
    * - visibilityswitch: Property name to allow us to hide this tool from the
    *                     DevTools Toolbox.
+   *                     A falsy value indicates that it cannot be hidden.
    * - icon: URL pointing to a graphic which will be used as the src for an
    *         16x16 img tag (string|required)
    * - url: URL pointing to a XUL/XHTML document containing the user interface
    *        (string|required)
    * - label: Localized name for the tool to be displayed to the user
    *          (string|required)
    * - build: Function that takes an iframe, which has been populated with the
    *          markup from |url|, and also the toolbox containing the panel.
@@ -64,18 +65,23 @@ DevTools.prototype = {
    */
   registerTool: function DT_registerTool(toolDefinition) {
     let toolId = toolDefinition.id;
 
     if (!toolId || FORBIDDEN_IDS.has(toolId)) {
       throw new Error("Invalid definition.id");
     }
 
-    toolDefinition.visibilityswitch = toolDefinition.visibilityswitch ||
-        "devtools." + toolId + ".enabled";
+    // Make sure that additional tools will always be able to be hidden.
+    // When being called from main.js, defaultTools has not yet been exported.
+    // But, we can assume that in this case, it is a default tool.
+    if (devtools.defaultTools && devtools.defaultTools.indexOf(toolDefinition) == -1) {
+      toolDefinition.visibilityswitch = "devtools." + toolId + ".enabled";
+    }
+
     this._tools.set(toolId, toolDefinition);
 
     this.emit("tool-registered", toolId);
   },
 
   /**
    * Removes all tools that match the given |toolId|
    * Needed so that add-ons can remove themselves when they are deactivated
@@ -134,17 +140,17 @@ DevTools.prototype = {
    *
    * @return {ToolDefinition|null} tool
    *         The ToolDefinition for the id or null.
    */
   getToolDefinition: function DT_getToolDefinition(toolId) {
     let tool = this._tools.get(toolId);
     if (!tool) {
       return null;
-    } else if (tool.id == "options") {
+    } else if (!tool.visibilityswitch) {
       return tool;
     }
 
     let enabled;
     try {
       enabled = Services.prefs.getBoolPref(tool.visibilityswitch);
     } catch (e) {
       enabled = true;
@@ -546,17 +552,18 @@ let gDevToolsBrowser = {
   _addToolToWindows: function DT_addToolToWindows(toolDefinition) {
     // No menu item or global shortcut is required for options panel.
     if (!toolDefinition.inMenu) {
       return;
     }
 
     // Skip if the tool is disabled.
     try {
-      if (!Services.prefs.getBoolPref(toolDefinition.visibilityswitch)) {
+      if (toolDefinition.visibilityswitch &&
+         !Services.prefs.getBoolPref(toolDefinition.visibilityswitch)) {
         return;
       }
     } catch(e) {}
 
     // We need to insert the new tool in the right place, which means knowing
     // the tool that comes before the tool that we're trying to add
     let allDefs = gDevTools.getToolDefinitionArray();
     let prevDef;
diff --git a/browser/devtools/framework/test/browser_toolbox_options.js b/browser/devtools/framework/test/browser_toolbox_options.js
--- a/browser/devtools/framework/test/browser_toolbox_options.js
+++ b/browser/devtools/framework/test/browser_toolbox_options.js
@@ -100,18 +100,25 @@ function testMouseClick(node, prefValue)
 
   return deferred.promise;
 }
 
 function testToggleTools() {
   let toolNodes = panelWin.document.querySelectorAll("#default-tools-box > checkbox:not([unsupported])");
   let enabledTools = Array.prototype.filter.call(toolNodes, node => node.checked);
 
+  let toggleableTools = gDevTools.getDefaultTools().filter(tool=>tool.visibilityswitch);
+  for (let node of toolNodes) {
+    let id = node.getAttribute("id");
+    ok (toggleableTools.some(tool=>tool.id === id),
+      "There should be a toggle checkbox for: " + id);
+  }
+
   // Store modified pref names so that they can be cleared on error.
-  for (let tool of gDevTools.getDefaultTools()) {
+  for (let tool of toggleableTools) {
     let pref = tool.visibilityswitch;
     modifiedPrefs.push(pref);
   }
 
   // Toggle each tool
   let p = promise.resolve();
   for (let node of toolNodes) {
     p = p.then(toggleTool.bind(null, node));
diff --git a/browser/devtools/framework/toolbox-options.js b/browser/devtools/framework/toolbox-options.js
--- a/browser/devtools/framework/toolbox-options.js
+++ b/browser/devtools/framework/toolbox-options.js
@@ -110,20 +110,20 @@ OptionsPanel.prototype = {
         checkbox.setAttribute("unsupported", "");
       }
       checkbox.setAttribute("checked", pref(tool.visibilityswitch));
       checkbox.addEventListener("command", onCheckboxClick.bind(checkbox, tool.id));
       return checkbox;
     };
 
     // Populating the default tools lists
-    for (let tool of gDevTools.getDefaultTools()) {
-      if (tool.id == "options") {
-        continue;
-      }
+    let toggleableTools = gDevTools.getDefaultTools().filter(tool => {
+      return tool.visibilityswitch
+    });
+    for (let tool of toggleableTools) {
       defaultToolsBox.appendChild(createToolCheckbox(tool));
     }
 
     // Populating the additional tools list that came from add-ons.
     let atleastOneAddon = false;
     for (let tool of gDevTools.getAdditionalTools()) {
       atleastOneAddon = true;
       additionalToolsBox.appendChild(createToolCheckbox(tool));
diff --git a/browser/devtools/main.js b/browser/devtools/main.js
--- a/browser/devtools/main.js
+++ b/browser/devtools/main.js
@@ -124,17 +124,16 @@ Tools.inspector = {
 };
 
 Tools.jsdebugger = {
   id: "jsdebugger",
   key: l10n("debuggerMenu.commandkey", debuggerStrings),
   accesskey: l10n("debuggerMenu.accesskey", debuggerStrings),
   modifiers: osString == "Darwin" ? "accel,alt" : "accel,shift",
   ordinal: 3,
-  visibilityswitch: "devtools.debugger.enabled",
   icon: "chrome://browser/skin/devtools/tool-debugger.png",
   highlightedicon: "chrome://browser/skin/devtools/tool-debugger-paused.png",
   url: "chrome://browser/content/devtools/debugger.xul",
   label: l10n("ToolboxDebugger.label", debuggerStrings),
   tooltip: l10n("ToolboxDebugger.tooltip", debuggerStrings),
   inMenu: true,
 
   isTargetSupported: function(target) {
