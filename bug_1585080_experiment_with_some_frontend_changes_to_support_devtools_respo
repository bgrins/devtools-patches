# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1571967561 25200
#      Thu Oct 24 18:39:21 2019 -0700
# Node ID 5c1c4f9e755ed67f401cea88055c09ebb5c295f3
# Parent  782f341be605f1a30e8a9bfbfc13ce389e620a24
Bug 1585080 - Experiment with some frontend changes to support devtools.responsive.browserUI.enabled

Differential Revision: https://phabricator.services.mozilla.com/D50559

diff --git a/devtools/client/responsive/responsive-browser.css b/devtools/client/responsive/responsive-browser.css
--- a/devtools/client/responsive/responsive-browser.css
+++ b/devtools/client/responsive/responsive-browser.css
@@ -9,19 +9,40 @@
 
 #appcontent[devtoolstheme="dark"] {
   --rdm-browser-container-background: #18181a; /* This should map to --theme-toolbar-background. */
   --rdm-browser-box-shadow: 0 4px 4px 0 rgba(105, 105, 105, 0.26);
 }
 
 .browserContainer.responsive-mode {
   background-color: var(--rdm-browser-container-background);
-  overflow: auto;
 }
 
-.browserContainer.responsive-mode browser {
-  border: 1px solid var(--devtools-splitter-color);
-  box-shadow: var(--rdm-browser-box-shadow);
+.browserContainer.responsive-mode > .rdm-controls {
+  border: none;
+  height: 30px;
 }
 
 .browserContainer.responsive-mode > .browserStack {
-  margin-top: 15px;
+  min-height: 0;
+  overflow: auto;
+
+  /* These will get overridden with px values from RDM */
+  --rdm-height: 100%;
+  --rdm-width: 100%;
+
+  /* This could go post https://bugzilla.mozilla.org/show_bug.cgi?id=1576946 */
+  display: grid;
 }
+
+.browserContainer.responsive-mode > .browserStack > * {
+  align-self: center;
+  justify-self: center;
+  /* This could go post https://bugzilla.mozilla.org/show_bug.cgi?id=1576946 */
+  grid-area: 1 / 1;
+}
+
+.browserContainer.responsive-mode > .browserStack > browser {
+  border: 1px solid var(--devtools-splitter-color);
+  box-shadow: var(--rdm-browser-box-shadow);
+  height: var(--rdm-height);
+  width: var(--rdm-width);
+}
diff --git a/devtools/client/responsive/ui.js b/devtools/client/responsive/ui.js
--- a/devtools/client/responsive/ui.js
+++ b/devtools/client/responsive/ui.js
@@ -226,18 +226,17 @@ class ResponsiveUI {
 
   /**
    * Initialize the RDM iframe inside of the browser document.
    */
   initRDMFrame() {
     const { document: doc, gBrowser } = this.browserWindow;
     const rdmFrame = doc.createElement("iframe");
     rdmFrame.src = "chrome://devtools/content/responsive/toolbar.xhtml";
-    rdmFrame.style.height = rdmFrame.style.minHeight = "30px";
-    rdmFrame.style.borderStyle = "none";
+    rdmFrame.classList.add("rdm-controls");
 
     this.browserContainerEl = gBrowser.getBrowserContainer(
       gBrowser.getBrowserForTab(this.tab)
     );
     this.browserStackEl = this.browserContainerEl.querySelector(
       ".browserStack"
     );
 
@@ -303,18 +302,18 @@ class ResponsiveUI {
     if (!this.isBrowserUIEnabled) {
       this.tab.linkedBrowser.removeEventListener("FullZoomChange", this);
       this.toolWindow.removeEventListener("message", this);
     } else {
       this.rdmFrame.contentWindow.removeEventListener("message", this);
       this.rdmFrame.remove();
 
       this.browserContainerEl.classList.remove("responsive-mode");
-      this.browserStackEl.style.maxWidth = this.browserStackEl.style.minWidth = null;
-      this.browserStackEl.style.maxHeight = this.browserStackEl.style.minHeight = null;
+      this.browserStackEl.style.removeProperty("--rdm-width");
+      this.browserStackEl.style.removeProperty("--rdm-height");
     }
 
     if (!this.isBrowserUIEnabled && !isTabContentDestroying) {
       // Notify the inner browser to stop the frame script
       await message.request(this.toolWindow, "stop-frame-script");
     }
 
     // Ensure the tab is reloaded if required when exiting RDM so that no emulated
@@ -757,18 +756,21 @@ class ResponsiveUI {
    * @param {Number} height
    *        The viewport's height.
    */
   updateViewportSize(width, height) {
     if (!this.isBrowserUIEnabled) {
       return;
     }
 
-    this.browserStackEl.style.maxWidth = this.browserStackEl.style.minWidth = `${width}px`;
-    this.browserStackEl.style.maxHeight = this.browserStackEl.style.minHeight = `${height}px`;
+    // XXX: Setting this with a variable on the stack instead of directly as width/height
+    // on the <browser> because I think we might need to use this for the alert dialog as well,
+    // though I haven't tested (it may not be needed).
+    this.browserStackEl.style.setProperty("--rdm-width", `${width}px`);
+    this.browserStackEl.style.setProperty("--rdm-height", `${height}px`);
   }
 
   /**
    * Helper for tests. Assumes a single viewport for now.
    */
   getViewportSize() {
     return this.toolWindow.getViewportSize();
   }
