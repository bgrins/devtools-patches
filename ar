# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  5a8bb8c71dfedf959e7873df9185537fb681a6d4

diff --git a/modules/libpref/Preferences.cpp b/modules/libpref/Preferences.cpp
--- a/modules/libpref/Preferences.cpp
+++ b/modules/libpref/Preferences.cpp
@@ -4546,16 +4546,21 @@ nsresult Preferences::InitInitialObjects
     // Load $gre/greprefs.js.
     nsCOMPtr<nsIFile> greprefsFile;
     rv = NS_GetSpecialDirectory(NS_GRE_DIR, getter_AddRefs(greprefsFile));
     NS_ENSURE_SUCCESS(rv, rv);
 
     rv = greprefsFile->AppendNative(NS_LITERAL_CSTRING("greprefs.js"));
     NS_ENSURE_SUCCESS(rv, rv);
 
+    // XXX: This wasn't getting set properly earlier, but seems to be working now.
+    nsAutoString tempPath;
+    rv = greprefsFile->GetPath(tempPath);
+    printf("prefs: %s\n", NS_LossyConvertUTF16toASCII(tempPath).get());
+
     rv = openPrefFile(greprefsFile, PrefValueKind::Default);
     if (NS_FAILED(rv)) {
       NS_WARNING(
           "Error parsing GRE default preferences. Is this an old-style "
           "embedding app?");
     }
   }
 
diff --git a/toolkit/xre/nsAppRunner.cpp b/toolkit/xre/nsAppRunner.cpp
--- a/toolkit/xre/nsAppRunner.cpp
+++ b/toolkit/xre/nsAppRunner.cpp
@@ -4691,18 +4691,20 @@ int XREMain::XRE_main(int argc, char* ar
 
   AUTO_BASE_PROFILER_LABEL("XREMain::XRE_main (around Gecko Profiler)", OTHER);
   AUTO_PROFILER_INIT;
   AUTO_PROFILER_LABEL("XREMain::XRE_main", OTHER);
 
   nsresult rv = NS_OK;
 
   if (aConfig.appData) {
+    printf("AppData\n");
     mAppData = MakeUnique<XREAppData>(*aConfig.appData);
   } else {
+    printf("AppDataPath\n");
     MOZ_RELEASE_ASSERT(aConfig.appDataPath);
     nsCOMPtr<nsIFile> appini;
     rv = XRE_GetFileFromPath(aConfig.appDataPath, getter_AddRefs(appini));
     if (NS_FAILED(rv)) {
       Output(true, "Error: unrecognized path: %s\n", aConfig.appDataPath);
       return 1;
     }
 
@@ -4712,51 +4714,69 @@ int XREMain::XRE_main(int argc, char* ar
       Output(true, "Couldn't read application.ini");
       return 1;
     }
 
     appini->GetParent(getter_AddRefs(mAppData->directory));
   }
 
   if (!mAppData->remotingName) {
+    printf("No remoting name\n");
     mAppData->remotingName = mAppData->name;
   }
   // used throughout this file
   gAppData = mAppData.get();
 
   nsCOMPtr<nsIFile> binFile;
   rv = XRE_GetBinaryPath(getter_AddRefs(binFile));
   NS_ENSURE_SUCCESS(rv, 1);
 
   rv = binFile->GetPath(gAbsoluteArgv0Path);
   NS_ENSURE_SUCCESS(rv, 1);
 
   if (!mAppData->xreDirectory) {
+    printf("No xreDirectory\n");
     nsCOMPtr<nsIFile> greDir;
     rv = binFile->GetParent(getter_AddRefs(greDir));
     if (NS_FAILED(rv)) return 2;
 
 #ifdef XP_MACOSX
     nsCOMPtr<nsIFile> parent;
     greDir->GetParent(getter_AddRefs(parent));
     greDir = parent.forget();
     greDir->AppendNative(NS_LITERAL_CSTRING("Resources"));
+    printf("appended resources\n");
 #endif
 
     mAppData->xreDirectory = greDir;
   }
 
+  printf("%s - %s\n", aConfig.appData, aConfig.appDataPath);
   if (aConfig.appData && aConfig.appDataPath) {
+
     mAppData->xreDirectory->Clone(getter_AddRefs(mAppData->directory));
     mAppData->directory->AppendNative(nsDependentCString(aConfig.appDataPath));
   }
 
+  nsAutoString tempPath;
   if (!mAppData->directory) {
-    mAppData->directory = mAppData->xreDirectory;
-  }
+    printf("mAppData missing\n");
+
+    // mAppData->directory = mAppData->xreDirectory;
+    // XXX: This is missing for some reason.
+    mAppData->xreDirectory->Clone(getter_AddRefs(mAppData->directory));
+    mAppData->directory->AppendNative(nsLiteralCString("browser"));
+  }
+
+  rv = mAppData->directory->GetPath(tempPath);
+  printf("mAppData: %s\n", NS_LossyConvertUTF16toASCII(tempPath).get());
+
+  rv = mAppData->xreDirectory->GetPath(tempPath);
+    printf("xreDirectory: %s\n", NS_LossyConvertUTF16toASCII(tempPath).get());
+
 
 #if defined(XP_WIN) && defined(MOZ_SANDBOX)
   mAppData->sandboxBrokerServices = aConfig.sandboxBrokerServices;
   mAppData->sandboxPermissionsService = aConfig.sandboxPermissionsService;
 #endif
 
   mozilla::IOInterposerInit ioInterposerGuard;
 
diff --git a/toolkit/xre/nsXREDirProvider.cpp b/toolkit/xre/nsXREDirProvider.cpp
--- a/toolkit/xre/nsXREDirProvider.cpp
+++ b/toolkit/xre/nsXREDirProvider.cpp
@@ -1153,16 +1153,21 @@ nsresult nsXREDirProvider::GetInstallHas
   nsCOMPtr<nsIFile> installDir;
   nsCOMPtr<nsIFile> appFile;
   bool per = false;
   nsresult rv = GetFile(XRE_EXECUTABLE_FILE, &per, getter_AddRefs(appFile));
   NS_ENSURE_SUCCESS(rv, rv);
   rv = appFile->GetParent(getter_AddRefs(installDir));
   NS_ENSURE_SUCCESS(rv, rv);
 
+  // XXX: This wasn't getting set properly earlier, but seems to be working now.
+  nsAutoString tempPath;
+  rv = installDir->GetPath(tempPath);
+  printf("installDir: %s\n", NS_LossyConvertUTF16toASCII(tempPath).get());
+
   // It is possible that the path we have is on a case insensitive
   // filesystem in which case the path may vary depending on how the
   // application is called. We want to normalize the case somehow.
 #ifdef XP_WIN
   // Windows provides a way to get the correct case.
   if (!mozilla::widget::WinUtils::ResolveJunctionPointsAndSymLinks(
           installDir)) {
     NS_WARNING("Failed to resolve install directory.");
