# HG changeset patch
# User Gabriel Luong <gabriel.luong@gmail.com>
# Parent  9eb5507b8da690af534935c13b6f57aa95c9e6bd
Bug 1120616 - Part 2: Adjust the styles in the computed view's filter style r=bgrins

diff --git a/browser/devtools/styleinspector/computed-view.js b/browser/devtools/styleinspector/computed-view.js
--- a/browser/devtools/styleinspector/computed-view.js
+++ b/browser/devtools/styleinspector/computed-view.js
@@ -491,16 +491,23 @@
       let deferred = promise.defer();
       this._refreshProcess = new UpdateProcess(this.styleWindow, this.propertyViews, {
         onItem: (aPropView) => {
           aPropView.refresh();
         },
         onDone: () => {
           this._refreshProcess = null;
           this.noResults.hidden = this.numVisibleProperties > 0;
+
+          if (this.searchField.value.length > 0 && !this.numVisibleProperties) {
+            this.searchField.classList.add("devtools-style-searchbox-no-match");
+          } else {
+            this.searchField.classList.remove("devtools-style-searchbox-no-match");
+          }
+
           this.inspector.emit("computed-view-refreshed");
           deferred.resolve(undefined);
         }
       });
       this._refreshProcess.schedule();
       return deferred.promise;
     }).then(null, (err) => console.error(err));
   },
@@ -514,16 +521,23 @@
   {
     let win = this.styleWindow;

     if (this._filterChangedTimeout) {
       win.clearTimeout(this._filterChangedTimeout);
     }

     this._filterChangedTimeout = win.setTimeout(() => {
+      if (this.searchField.value.length > 0) {
+        this.searchField.setAttribute("filled", true);
+      } else {
+        this.searchField.removeAttribute("filled");
+        this.searchField.classList.remove("devtools-style-searchbox-no-match");
+      }
+
       this.refreshPanel();
       this._filterChangeTimeout = null;
     }, FILTER_CHANGED_TIMEOUT);
   },

   /**
    * The change event handler for the includeBrowserStyles checkbox.
    *
diff --git a/browser/devtools/styleinspector/computedview.xhtml b/browser/devtools/styleinspector/computedview.xhtml
--- a/browser/devtools/styleinspector/computedview.xhtml
+++ b/browser/devtools/styleinspector/computedview.xhtml
@@ -44,45 +44,47 @@
           this.computedview.destroy();
         }
       }
     </script>
   </head>

   <body>

+    <!-- The output from #templateRoot (below) is inserted here. -->
+    <div id="root" class="devtools-monospace">
+    </div>
+
     <!-- The output from #templateProperty (below) is appended here. -->
     <div id="propertyContainer" class="devtools-monospace">
     </div>

     <!-- When no properties are found the following block is displayed. -->
     <div id="noResults" hidden="">
       &noPropertiesFound;
     </div>

-    <!-- The output from #templateRoot (below) is inserted here. -->
-    <div id="root" class="devtools-monospace"></div>
-
     <!--
     To visually debug the templates without running firefox, alter the display:none
     -->
     <div style="display:none;">
       <!--
       templateRoot sits at the top of the window and contains the "include default
       styles" checkbox. For data it needs an instance of CssHtmlTree.
       -->
       <div id="templateRoot">
         <xul:hbox class="devtools-toolbar" flex="1" align="center">
+          <xul:textbox class="devtools-searchinput devtools-style-searchbox"
+                       type="search" save="${searchField}"
+                       placeholder="&userStylesSearch;" flex="1"
+                       oncommand="${filterChanged}"/>
           <xul:checkbox class="includebrowserstyles"
                         save="${includeBrowserStylesCheckbox}"
                         oncommand="${includeBrowserStylesChanged}" checked="false"
                         label="&browserStylesLabel;"/>
-          <xul:textbox class="devtools-searchinput" type="search" save="${searchField}"
-                      placeholder="&userStylesSearch;" flex="1"
-                      oncommand="${filterChanged}"/>
         </xul:hbox>
       </div>


       <!--
       A templateMatchedSelectors sits inside each templateProperties showing the
       list of selectors that affect that property. Each needs data like this:
       {
