# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  aa2aea7491a8037cb6005f0ae4cafb19d8c18e1a
TEMP logging for webconsole response

diff --git a/devtools/client/webconsole/webconsole.js b/devtools/client/webconsole/webconsole.js
--- a/devtools/client/webconsole/webconsole.js
+++ b/devtools/client/webconsole/webconsole.js
@@ -1823,16 +1823,21 @@ WebConsoleFrame.prototype = {
     if (networkInfo.node && this._updateNetMessage(packet.from)) {
       this.emit("new-messages", new Set([{
         update: true,
         node: networkInfo.node,
         response: packet,
       }]));
     }
 
+
+    if (!this.owner._browserConsole) {
+      console.log(networkInfo, networkInfo.discardResponseBody);
+    }
+
     // For unit tests we pass the HTTP activity object to the test callback,
     // once requests complete.
     if (this.owner.lastFinishedRequestCallback &&
         networkInfo.updates.indexOf("responseContent") > -1 &&
         networkInfo.updates.indexOf("eventTimings") > -1) {
       this.owner.lastFinishedRequestCallback(networkInfo, this);
     }
   },
@@ -5031,20 +5036,23 @@ WebConsoleConnectionProxy.prototype = {
                      response.message);
       this._connectDefer.reject(response);
       return;
     }
 
     this.webConsoleClient = webConsoleClient;
     this._hasNativeConsoleAPI = response.nativeConsoleAPI;
 
+    console.log("_onAttachConsole");
+    console.trace();
     // There is no way to view response bodies from the Browser Console, so do
     // not waste the memory.
     let saveBodies = !this.webConsoleFrame.owner._browserConsole;
     this.webConsoleFrame.setSaveRequestAndResponseBodies(saveBodies).then(() => {
+      console.log("Started up with bodies?", saveBodies);
       this.webConsoleClient.on("networkEvent", this._onNetworkEvent);
       this.webConsoleClient.on("networkEventUpdate", this._onNetworkEventUpdate);
 
       let msgs = ["PageError", "ConsoleAPI"];
       this.webConsoleClient.getCachedMessages(msgs, this._onCachedMessages);
 
       this.webConsoleFrame._onUpdateListeners();
     });
diff --git a/devtools/server/actors/webconsole.js b/devtools/server/actors/webconsole.js
--- a/devtools/server/actors/webconsole.js
+++ b/devtools/server/actors/webconsole.js
@@ -69,16 +69,17 @@ function WebConsoleActor(aConnection, aP
   this.objectGrip = this.objectGrip.bind(this);
   this._onWillNavigate = this._onWillNavigate.bind(this);
   this._onChangedToplevelDocument = this._onChangedToplevelDocument.bind(this);
   events.on(this.parentActor, "changed-toplevel-document", this._onChangedToplevelDocument);
   this._onObserverNotification = this._onObserverNotification.bind(this);
   if (this.parentActor.isRootActor) {
     Services.obs.addObserver(this._onObserverNotification,
                              "last-pb-context-exited", false);
+
   }
 
   this.traits = {
     customNetworkRequest: !this._parentIsContentActor,
     evaluateJSAsync: true,
     transferredResponseSize: true,
     selectedObjectActor: true, // 44+
   };
@@ -215,16 +216,17 @@ WebConsoleActor.prototype =
   _handleNewWindow: function WCA__handleNewWindow(window)
   {
     if (window) {
       if (this._hadChromeWindow) {
         let contextChangedMsg = WebConsoleActor.l10n.getStr("evaluationContextChanged");
         Services.console.logStringMessage(contextChangedMsg);
       }
       this._lastChromeWindow = Cu.getWeakReference(window);
+      this._lastChromeWindow2 = window;
       this._hadChromeWindow = true;
     } else {
       this._lastChromeWindow = null;
     }
   },
 
   /**
    * Whether we've been using a window before.
@@ -590,16 +592,19 @@ WebConsoleActor.prototype =
               this.networkMonitor =
                 new NetworkMonitorChild(appId, messageManager,
                                         this.parentActor.actorID, this);
             }
             else {
               this.networkMonitor = new NetworkMonitor({ window: window }, this);
             }
             this.networkMonitor.init();
+            if (this.parentActor.isRootActor) {
+              console.log("ROOT ACTOR STARTING UP NETMONITOR", this.actorID);
+            }
           }
           startedListeners.push(listener);
           break;
         case "FileActivity":
           if (this.window instanceof Ci.nsIDOMWindow) {
             if (!this.consoleProgressListener) {
               this.consoleProgressListener =
                 new ConsoleProgressListener(this.window, this);
@@ -1001,21 +1006,30 @@ WebConsoleActor.prototype =
   /**
    * The "setPreferences" request handler.
    *
    * @param object aRequest
    *        The request message - which preferences need to be updated.
    */
   onSetPreferences: function WCA_onSetPreferences(aRequest)
   {
+    console.log("onSetPreferences called for",
+        this.actorID,
+        "Current value", this.networkMonitor.saveRequestAndResponseBodies,
+        "Current pref", this._prefs["NetworkMonitor.saveRequestAndResponseBodies"],
+        "New pref", aRequest.preferences["NetworkMonitor.saveRequestAndResponseBodies"])
     for (let key in aRequest.preferences) {
       this._prefs[key] = aRequest.preferences[key];
 
       if (key == "NetworkMonitor.saveRequestAndResponseBodies" &&
           this.networkMonitor) {
+      // if (this._lastChromeWindow) {
+      //   console.log("GOT A CHROME WIN", this._lastChromeWindow2.location.toString());
+      //   console.trace();
+      // }
         this.networkMonitor.saveRequestAndResponseBodies = this._prefs[key];
       }
     }
     return { updated: Object.keys(aRequest.preferences) };
   },
 
   //////////////////
   // End of request handlers.
@@ -2094,16 +2108,17 @@ NetworkEventActor.prototype =
   function NEA_addResponseContent(aContent, aDiscardedResponseBody)
   {
     this._response.content = aContent;
     aContent.text = this.parent._createStringGrip(aContent.text);
     if (typeof aContent.text == "object") {
       this._longStringActors.add(aContent.text);
     }
 
+console.log("ADDING ", aContent, aDiscardedResponseBody)
     let packet = {
       from: this.actorID,
       type: "networkEventUpdate",
       updateType: "responseContent",
       mimeType: aContent.mimeType,
       contentSize: aContent.size,
       encoding: aContent.encoding,
       transferredSize: aContent.transferredSize,
diff --git a/devtools/shared/client/main.js b/devtools/shared/client/main.js
--- a/devtools/shared/client/main.js
+++ b/devtools/shared/client/main.js
@@ -514,16 +514,18 @@ DebuggerClient.prototype = {
    * @param array aListeners
    *        The console listeners you want to start.
    * @param function aOnResponse
    *        Called with the response packet and a WebConsoleClient
    *        instance (which will be undefined on error).
    */
   attachConsole:
   function (aConsoleActor, aListeners, aOnResponse = noop) {
+    console.log("ATTACHING FROM CLIENT", aConsoleActor);
+    console.trace();
     let packet = {
       to: aConsoleActor,
       type: "startListeners",
       listeners: aListeners,
     };
 
     this.request(packet, (aResponse) => {
       let consoleClient;
diff --git a/devtools/shared/webconsole/client.js b/devtools/shared/webconsole/client.js
--- a/devtools/shared/webconsole/client.js
+++ b/devtools/shared/webconsole/client.js
@@ -126,17 +126,17 @@ WebConsoleClient.prototype = {
   _onNetworkEventUpdate: function (type, packet)
   {
     let networkInfo = this.getNetworkRequest(packet.from);
     if (!networkInfo) {
       return;
     }
 
     networkInfo.updates.push(packet.updateType);
-
+console.log("UPDATE TYPE", packet.updateType)
     switch (packet.updateType) {
       case "requestHeaders":
         networkInfo.request.headersSize = packet.headersSize;
         break;
       case "requestPostData":
         networkInfo.discardRequestBody = packet.discardRequestBody;
         networkInfo.request.bodySize = packet.dataSize;
         break;
diff --git a/devtools/shared/webconsole/test/test_network_longstring.html b/devtools/shared/webconsole/test/test_network_longstring.html
--- a/devtools/shared/webconsole/test/test_network_longstring.html
+++ b/devtools/shared/webconsole/test/test_network_longstring.html
@@ -14,17 +14,17 @@
 <iframe src="http://example.com/chrome/devtools/shared/webconsole/test/network_requests_iframe.html"></iframe>
 
 <script class="testbody" type="text/javascript;version=1.8">
 SimpleTest.waitForExplicitFinish();
 
 function startTest()
 {
   removeEventListener("load", startTest);
-
+ 
   attachConsoleToTab(["NetworkActivity"], onAttach);
 }
 
 function onAttach(aState, aResponse)
 {
   info("set long string length");
 
   window.ORIGINAL_LONG_STRING_LENGTH = DebuggerServer.LONG_STRING_LENGTH;
