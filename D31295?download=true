diff --git a/accessible/tests/mochitest/treeupdate/test_listbox.xul b/accessible/tests/mochitest/treeupdate/test_listbox.xul
--- a/accessible/tests/mochitest/treeupdate/test_listbox.xul
+++ b/accessible/tests/mochitest/treeupdate/test_listbox.xul
@@ -24,8 +24,8 @@
     {
       this.listboxNode = getNode(aListboxID);
 
-      this.listitemNode = document.createElement("richlistitem");
-      var label = document.createElement("label");
+      this.listitemNode = document.createXULElement("richlistitem");
+      var label = document.createXULElement("label");
       label.setAttribute("value", "item1");
       this.listitemNode.appendChild(label);
 
diff --git a/browser/base/content/test/general/browser_clipboard_pastefile.js b/browser/base/content/test/general/browser_clipboard_pastefile.js
--- a/browser/base/content/test/general/browser_clipboard_pastefile.js
+++ b/browser/base/content/test/general/browser_clipboard_pastefile.js
@@ -2,7 +2,7 @@
 // event.clipboardData.
 
 add_task(async function() {
-  var textbox = document.createElement("textbox");
+  var textbox = document.createXULElement("textbox");
   document.documentElement.appendChild(textbox);
 
   textbox.focus();
diff --git a/browser/base/content/test/general/browser_gestureSupport.js b/browser/base/content/test/general/browser_gestureSupport.js
--- a/browser/base/content/test/general/browser_gestureSupport.js
+++ b/browser/base/content/test/general/browser_gestureSupport.js
@@ -336,7 +336,7 @@
 }
 
 function test_addCommand(prefName, id) {
-  let cmd = test_commandset.appendChild(document.createElement("command"));
+  let cmd = test_commandset.appendChild(document.createXULElement("command"));
   cmd.setAttribute("id", id);
   cmd.setAttribute("oncommand", "this.callCount++;");
 
diff --git a/browser/components/BrowserGlue.jsm b/browser/components/BrowserGlue.jsm
--- a/browser/components/BrowserGlue.jsm
+++ b/browser/components/BrowserGlue.jsm
@@ -3374,16 +3374,16 @@
 
   _createPopup(win, notNowStrings, neverStrings) {
     let doc = win.document;
-    let popup = doc.createElement("menupopup");
+    let popup = doc.createXULElement("menupopup");
     popup.id = this.OPTIONPOPUP;
 
-    let notNowItem = doc.createElement("menuitem");
+    let notNowItem = doc.createXULElement("menuitem");
     notNowItem.id = "defaultBrowserNotNow";
     notNowItem.setAttribute("label", notNowStrings.label);
     notNowItem.setAttribute("accesskey", notNowStrings.accesskey);
     popup.appendChild(notNowItem);
 
-    let neverItem = doc.createElement("menuitem");
+    let neverItem = doc.createXULElement("menuitem");
     neverItem.id = "defaultBrowserNever";
     neverItem.setAttribute("label", neverStrings.label);
     neverItem.setAttribute("accesskey", neverStrings.accesskey);
diff --git a/browser/components/migration/content/migration.js b/browser/components/migration/content/migration.js
--- a/browser/components/migration/content/migration.js
+++ b/browser/components/migration/content/migration.js
@@ -217,7 +217,7 @@
       var sourceProfiles = this.spinResolve(this._migrator.getSourceProfiles());
 
       for (let profile of sourceProfiles) {
-        var item = document.createElement("radio");
+        var item = document.createXULElement("radio");
         item.id = profile.id;
         item.setAttribute("label", profile.name);
         profiles.appendChild(item);
@@ -258,7 +258,7 @@
     for (var i = 0; i < 16; ++i) {
       var itemID = (items >> i) & 0x1 ? Math.pow(2, i) : 0;
       if (itemID > 0) {
-        var checkbox = document.createElement("checkbox");
+        var checkbox = document.createXULElement("checkbox");
         checkbox.id = itemID;
         checkbox.setAttribute("label",
           MigrationUtils.getLocalizedString(itemID + "_" + this._source));
@@ -344,7 +344,7 @@
     for (var i = 0; i < 16; ++i) {
       itemID = (this._itemsFlags >> i) & 0x1 ? Math.pow(2, i) : 0;
       if (itemID > 0) {
-        var label = document.createElement("label");
+        var label = document.createXULElement("label");
         label.id = itemID + "_migrated";
         try {
           label.setAttribute("value",
diff --git a/browser/components/newtab/lib/CFRPageActions.jsm b/browser/components/newtab/lib/CFRPageActions.jsm
--- a/browser/components/newtab/lib/CFRPageActions.jsm
+++ b/browser/components/newtab/lib/CFRPageActions.jsm
@@ -291,7 +291,7 @@
   }
 
   _createElementAndAppend({type, id}, parent) {
-    let element = this.window.document.createElement(type);
+    let element = this.window.document.createXULElement(type);
     if (id) {
       element.setAttribute("id", id);
     }
@@ -397,12 +397,12 @@
         stepsContainer.remove();
         stepsContainer = stepsContainer.cloneNode(false);
       } else {
-        stepsContainer = this.window.document.createElement("vbox");
+        stepsContainer = this.window.document.createXULElement("vbox");
         stepsContainer.setAttribute("id", stepsContainerId);
       }
       footerText.parentNode.appendChild(stepsContainer);
       for (let step of content.descriptionDetails.steps) {
-        const li = this.window.document.createElement("li");
+        const li = this.window.document.createXULElement("li");
         this._l10n.setAttributes(li, step.string_id);
         stepsContainer.appendChild(li);
       }
diff --git a/browser/components/places/content/places.js b/browser/components/places/content/places.js
--- a/browser/components/places/content/places.js
+++ b/browser/components/places/content/places.js
@@ -487,7 +487,7 @@
         }
 
         let backupDate = PlacesBackups.getDateForFile(backupFiles[i]);
-        let m = restorePopup.insertBefore(document.createElement("menuitem"),
+        let m = restorePopup.insertBefore(document.createXULElement("menuitem"),
                                           document.getElementById("restoreFromFile"));
         m.setAttribute("label", dateFormatter.format(backupDate) + sizeInfo);
         m.setAttribute("value", OS.Path.basename(backupFiles[i]));
@@ -496,7 +496,7 @@
       }
 
       // Add the restoreFromFile item.
-      restorePopup.insertBefore(document.createElement("menuseparator"),
+      restorePopup.insertBefore(document.createXULElement("menuseparator"),
                                 document.getElementById("restoreFromFile"));
     })();
   },
@@ -972,7 +972,7 @@
     var columns = content.columns;
     for (var i = 0; i < columns.count; ++i) {
       var column = columns.getColumnAt(i).element;
-      var menuitem = document.createElement("menuitem");
+      var menuitem = document.createXULElement("menuitem");
       menuitem.id = "menucol_" + column.id;
       menuitem.column = column;
       var label = column.getAttribute("label");
diff --git a/browser/components/preferences/browserLanguages.js b/browser/components/preferences/browserLanguages.js
--- a/browser/components/preferences/browserLanguages.js
+++ b/browser/components/preferences/browserLanguages.js
@@ -170,11 +170,11 @@
   }
 
   createItem({id, label, value}) {
-    let listitem = document.createElement("richlistitem");
+    let listitem = document.createXULElement("richlistitem");
     listitem.id = id;
     listitem.setAttribute("value", value);
 
-    let labelEl = document.createElement("label");
+    let labelEl = document.createXULElement("label");
     labelEl.textContent = label;
     listitem.appendChild(labelEl);
 
@@ -249,7 +249,7 @@
   }
 
   createItem({label, value, className, disabled}) {
-    let item = document.createElement("menuitem");
+    let item = document.createXULElement("menuitem");
     item.setAttribute("label", label);
     if (value)
       item.value = value;
diff --git a/devtools/client/performance/modules/marker-dom-utils.js b/devtools/client/performance/modules/marker-dom-utils.js
--- a/devtools/client/performance/modules/marker-dom-utils.js
+++ b/devtools/client/performance/modules/marker-dom-utils.js
@@ -39,14 +39,14 @@
   buildTitle: function(doc, marker) {
     const blueprint = MarkerBlueprintUtils.getBlueprintFor(marker);
 
-    const hbox = doc.createElement("hbox");
+    const hbox = doc.createXULElement("hbox");
     hbox.setAttribute("align", "center");
 
-    const bullet = doc.createElement("hbox");
+    const bullet = doc.createXULElement("hbox");
     bullet.className = `marker-details-bullet marker-color-${blueprint.colorName}`;
 
     const title = MarkerBlueprintUtils.getMarkerLabel(marker);
-    const label = doc.createElement("label");
+    const label = doc.createXULElement("label");
     label.className = "marker-details-type";
     label.setAttribute("value", title);
 
@@ -87,15 +87,15 @@
    * @return Node
    */
   buildNameValueLabel: function(doc, field, value) {
-    const hbox = doc.createElement("hbox");
+    const hbox = doc.createXULElement("hbox");
     hbox.className = "marker-details-labelcontainer";
 
-    const nameLabel = doc.createElement("label");
+    const nameLabel = doc.createXULElement("label");
     nameLabel.className = "plain marker-details-name-label";
     nameLabel.setAttribute("value", field);
     hbox.appendChild(nameLabel);
 
-    const valueLabel = doc.createElement("label");
+    const valueLabel = doc.createXULElement("label");
     valueLabel.className = "plain marker-details-value-label";
     valueLabel.setAttribute("value", value);
     hbox.appendChild(valueLabel);
@@ -119,7 +119,7 @@
     container.className = "marker-details-stack";
     container.setAttribute("type", type);
 
-    const nameLabel = doc.createElement("label");
+    const nameLabel = doc.createXULElement("label");
     nameLabel.className = "plain marker-details-name-label";
     nameLabel.setAttribute("value", L10N.getStr(`marker.field.${type}`));
     container.appendChild(nameLabel);
@@ -144,8 +144,8 @@
       // cause is in this frame and should be displayed.
       if (wasAsyncParent) {
         const asyncStr = L10N.getFormatStr("marker.field.asyncStack", frame.asyncCause);
-        const asyncBox = doc.createElement("hbox");
-        const asyncLabel = doc.createElement("label");
+        const asyncBox = doc.createXULElement("hbox");
+        const asyncLabel = doc.createXULElement("label");
         asyncLabel.className = "devtools-monospace";
         asyncLabel.setAttribute("value", asyncStr);
         asyncBox.appendChild(asyncLabel);
@@ -153,28 +153,28 @@
         wasAsyncParent = false;
       }
 
-      const hbox = doc.createElement("hbox");
+      const hbox = doc.createXULElement("hbox");
 
       if (displayName) {
-        const functionLabel = doc.createElement("label");
+        const functionLabel = doc.createXULElement("label");
         functionLabel.className = "devtools-monospace";
         functionLabel.setAttribute("value", displayName);
         hbox.appendChild(functionLabel);
       }
 
       if (url) {
-        const linkNode = doc.createElement("a");
+        const linkNode = doc.createXULElement("a");
         linkNode.className = "waterfall-marker-location devtools-source-link";
         linkNode.href = url;
         linkNode.draggable = false;
         linkNode.setAttribute("title", url);
 
-        const urlLabel = doc.createElement("label");
+        const urlLabel = doc.createXULElement("label");
         urlLabel.className = "filename";
         urlLabel.setAttribute("value", getSourceNames(url).short);
         linkNode.appendChild(urlLabel);
 
-        const lineLabel = doc.createElement("label");
+        const lineLabel = doc.createXULElement("label");
         lineLabel.className = "line-number";
         lineLabel.setAttribute("value", `:${line}`);
         linkNode.appendChild(lineLabel);
@@ -191,7 +191,7 @@
       }
 
       if (!displayName && !url) {
-        const unknownLabel = doc.createElement("label");
+        const unknownLabel = doc.createXULElement("label");
         unknownLabel.setAttribute("value", L10N.getStr("marker.value.unknownFrame"));
         hbox.appendChild(unknownLabel);
       }
@@ -221,10 +221,10 @@
     const elements = [];
 
     if (options.allocations && shouldShowAllocationsTrigger(marker)) {
-      const hbox = doc.createElement("hbox");
+      const hbox = doc.createXULElement("hbox");
       hbox.className = "marker-details-customcontainer";
 
-      const label = doc.createElement("label");
+      const label = doc.createXULElement("label");
       label.className = "custom-button";
       label.setAttribute("value", "Show allocation triggers");
       label.setAttribute("type", "show-allocations");
diff --git a/devtools/client/performance/modules/widgets/tree-view.js b/devtools/client/performance/modules/widgets/tree-view.js
--- a/devtools/client/performance/modules/widgets/tree-view.js
+++ b/devtools/client/performance/modules/widgets/tree-view.js
@@ -199,7 +199,7 @@
                                           this.level));
     }
 
-    const targetNode = document.createElement("hbox");
+    const targetNode = document.createXULElement("hbox");
     targetNode.className = "call-tree-item";
     targetNode.setAttribute("origin", frameInfo.isContent ? "content" : "chrome");
     targetNode.setAttribute("category", frameInfo.categoryData.abbrev || "");
@@ -243,7 +243,7 @@
    * Invoked by `_displaySelf`.
    */
   _createCell: function(doc, value, type) {
-    const cell = doc.createElement("description");
+    const cell = doc.createXULElement("description");
     cell.className = "plain call-tree-cell";
     cell.setAttribute("type", type);
     cell.setAttribute("crop", "end");
@@ -253,7 +253,7 @@
   },
 
   _createFunctionCell: function(doc, arrowNode, frameName, frameInfo, frameLevel) {
-    const cell = doc.createElement("hbox");
+    const cell = doc.createXULElement("hbox");
     cell.className = "call-tree-cell";
     cell.style.marginInlineStart = (frameLevel * CALL_TREE_INDENTATION) + "px";
     cell.setAttribute("type", "function");
@@ -262,7 +262,7 @@
     // Render optimization hint if this frame has opt data.
     if (this.root.showOptimizationHint && frameInfo.hasOptimizations &&
         !frameInfo.isMetaCategory) {
-      const icon = doc.createElement("description");
+      const icon = doc.createXULElement("description");
       icon.setAttribute("tooltiptext", VIEW_OPTIMIZATIONS_TOOLTIP);
       icon.className = "opt-icon";
       cell.appendChild(icon);
@@ -271,7 +271,7 @@
     // Don't render a name label node if there's no function name. A different
     // location label node will be rendered instead.
     if (frameName) {
-      const nameNode = doc.createElement("description");
+      const nameNode = doc.createXULElement("description");
       nameNode.className = "plain call-tree-name";
       nameNode.textContent = frameName;
       cell.appendChild(nameNode);
@@ -304,7 +304,7 @@
 
   _appendFunctionDetailsCells: function(doc, cell, frameInfo) {
     if (frameInfo.fileName) {
-      const urlNode = doc.createElement("description");
+      const urlNode = doc.createXULElement("description");
       urlNode.className = "plain call-tree-url";
       urlNode.textContent = frameInfo.fileName;
       urlNode.setAttribute("tooltiptext", URL_LABEL_TOOLTIP + " → " + frameInfo.url);
@@ -313,28 +313,28 @@
     }
 
     if (frameInfo.line) {
-      const lineNode = doc.createElement("description");
+      const lineNode = doc.createXULElement("description");
       lineNode.className = "plain call-tree-line";
       lineNode.textContent = ":" + frameInfo.line;
       cell.appendChild(lineNode);
     }
 
     if (frameInfo.column) {
-      const columnNode = doc.createElement("description");
+      const columnNode = doc.createXULElement("description");
       columnNode.className = "plain call-tree-column";
       columnNode.textContent = ":" + frameInfo.column;
       cell.appendChild(columnNode);
     }
 
     if (frameInfo.host) {
-      const hostNode = doc.createElement("description");
+      const hostNode = doc.createXULElement("description");
       hostNode.className = "plain call-tree-host";
       hostNode.textContent = frameInfo.host;
       cell.appendChild(hostNode);
     }
 
     if (frameInfo.categoryData.label) {
-      const categoryNode = doc.createElement("description");
+      const categoryNode = doc.createXULElement("description");
       categoryNode.className = "plain call-tree-category";
       categoryNode.style.color = frameInfo.categoryData.color;
       categoryNode.textContent = frameInfo.categoryData.label;
diff --git a/devtools/client/shared/widgets/AbstractTreeItem.jsm b/devtools/client/shared/widgets/AbstractTreeItem.jsm
--- a/devtools/client/shared/widgets/AbstractTreeItem.jsm
+++ b/devtools/client/shared/widgets/AbstractTreeItem.jsm
@@ -37,7 +37,7 @@
  *
  * MyCustomTreeItem.prototype = extend(AbstractTreeItem.prototype, {
  *   _displaySelf: function(document, arrowNode) {
- *     let node = document.createElement("hbox");
+ *     let node = document.createXULElement("hbox");
  *     ...
  *     // Append the provided arrow node wherever you want.
  *     node.appendChild(arrowNode);
@@ -443,7 +443,7 @@
 
     const document = this.document;
 
-    const arrowNode = this._arrowNode = document.createElement("hbox");
+    const arrowNode = this._arrowNode = document.createXULElement("hbox");
     arrowNode.className = "arrow theme-twisty";
     arrowNode.addEventListener("mousedown", this._onArrowClick);
 
diff --git a/devtools/client/styleeditor/StyleEditorUI.jsm b/devtools/client/styleeditor/StyleEditorUI.jsm
--- a/devtools/client/styleeditor/StyleEditorUI.jsm
+++ b/devtools/client/styleeditor/StyleEditorUI.jsm
@@ -38,6 +38,8 @@
 const PREF_NAV_WIDTH = "devtools.styleeditor.navSidebarWidth";
 const PREF_ORIG_SOURCES = "devtools.source-map.client-service.enabled";
 
+const HTML_NS = "http://www.w3.org/1999/xhtml";
+
 /**
  * StyleEditorUI is controls and builds the UI of the Style Editor, including
  * maintaining a list of editors for each stylesheet on a debuggee.
@@ -897,12 +899,12 @@
         }
         inSource = true;
 
-        const div = this._panelDoc.createElement("div");
+        const div = this._panelDoc.createElementNS(HTML_NS, "div");
         div.className = "media-rule-label";
         div.addEventListener("click",
                              this._jumpToLocation.bind(this, location));
 
-        const cond = this._panelDoc.createElement("div");
+        const cond = this._panelDoc.createElementNS(HTML_NS, "div");
         cond.className = "media-rule-condition";
         if (!rule.matches) {
           cond.classList.add("media-condition-unmatched");
@@ -914,7 +916,7 @@
         }
         div.appendChild(cond);
 
-        const link = this._panelDoc.createElement("div");
+        const link = this._panelDoc.createElementNS(HTML_NS, "div");
         link.className = "media-rule-line theme-link";
         if (location.line != -1) {
           link.textContent = ":" + location.line;
@@ -950,7 +952,7 @@
       );
       element.appendChild(node);
 
-      const link = this._panelDoc.createElement("a");
+      const link = this._panelDoc.createElementNS(HTML_NS, "a");
       link.href = "#";
       link.className = "media-responsive-mode-toggle";
       link.textContent = rawText.substring(match.index, matchEnd);
diff --git a/devtools/client/webide/content/newapp.js b/devtools/client/webide/content/newapp.js
--- a/devtools/client/webide/content/newapp.js
+++ b/devtools/client/webide/content/newapp.js
@@ -37,14 +37,14 @@
     const templatelistNode = document.querySelector("#templatelist");
     templatelistNode.innerHTML = "";
     for (const template of list) {
-      const richlistitemNode = document.createElement("richlistitem");
-      const imageNode = document.createElement("image");
+      const richlistitemNode = document.createXULElement("richlistitem");
+      const imageNode = document.createXULElement("image");
       imageNode.setAttribute("src", template.icon);
-      const labelNode = document.createElement("label");
+      const labelNode = document.createXULElement("label");
       labelNode.setAttribute("value", template.name);
-      const descriptionNode = document.createElement("description");
+      const descriptionNode = document.createXULElement("description");
       descriptionNode.textContent = template.description;
-      const vboxNode = document.createElement("vbox");
+      const vboxNode = document.createXULElement("vbox");
       vboxNode.setAttribute("flex", "1");
       richlistitemNode.appendChild(imageNode);
       vboxNode.appendChild(labelNode);
diff --git a/devtools/shared/fronts/css-properties.js b/devtools/shared/fronts/css-properties.js
--- a/devtools/shared/fronts/css-properties.js
+++ b/devtools/shared/fronts/css-properties.js
@@ -124,7 +124,7 @@
   isValidOnClient(name, value, doc) {
     let dummyElement = this._dummyElements.get(doc);
     if (!dummyElement) {
-      dummyElement = doc.createElement("div");
+      dummyElement = doc.createElementNS("http://www.w3.org/1999/xhtml", "div");
       this._dummyElements.set(doc, dummyElement);
     }
 
diff --git a/devtools/shared/tests/browser/browser_l10n_localizeMarkup.js b/devtools/shared/tests/browser/browser_l10n_localizeMarkup.js
--- a/devtools/shared/tests/browser/browser_l10n_localizeMarkup.js
+++ b/devtools/shared/tests/browser/browser_l10n_localizeMarkup.js
@@ -6,6 +6,7 @@
 // Tests that the markup localization works properly.
 
 const { localizeMarkup, LocalizationHelper } = require("devtools/shared/l10n");
+const HTML_NS = "http://www.w3.org/1999/xhtml";
 
 add_task(async function() {
   info("Check that the strings used for this test are still valid");
@@ -19,38 +20,38 @@
   ok(str1 && str2 && str3, "If this failed, strings should be updated in the test");
 
   info("Create the test markup");
-  const div = document.createElement("div");
+  const div = document.createElementNS(HTML_NS, "div");
   div.setAttribute("data-localization-bundle",
                    "devtools/client/locales/startup.properties");
-  const div0 = document.createElement("div");
+  const div0 = document.createElementNS(HTML_NS, "div");
   div0.setAttribute("id", "d0");
   div0.setAttribute("data-localization", "content=inspector.someInvalidKey");
   div.appendChild(div0);
-  const div1 = document.createElement("div");
+  const div1 = document.createElementNS(HTML_NS, "div");
   div1.setAttribute("id", "d1");
   div1.setAttribute("data-localization", "content=inspector.label");
   div.appendChild(div1);
   div1.append("Text will disappear");
-  const div2 = document.createElement("div");
+  const div2 = document.createElementNS(HTML_NS, "div");
   div2.setAttribute("id", "d2");
   div2.setAttribute("data-localization",
                     "content=inspector.label;title=inspector.accesskey");
   div.appendChild(div2);
-  const div3 = document.createElement("div");
+  const div3 = document.createElementNS(HTML_NS, "div");
   div3.setAttribute("id", "d3");
   div3.setAttribute("data-localization",
                     "content=inspector.label;title=inspector.accesskey");
   div.appendChild(div3);
-  const div4 = document.createElement("div");
+  const div4 = document.createElementNS(HTML_NS, "div");
   div4.setAttribute("id", "d4");
   div4.setAttribute("data-localization", "aria-label=inspector.label");
   div.appendChild(div4);
   div4.append("Some content");
-  const toolboxDiv = document.createElement("div");
+  const toolboxDiv = document.createElementNS(HTML_NS, "div");
   toolboxDiv.setAttribute("data-localization-bundle",
                           "devtools/client/locales/toolbox.properties");
   div.appendChild(toolboxDiv);
-  const div5 = document.createElement("div");
+  const div5 = document.createElementNS(HTML_NS, "div");
   div5.setAttribute("id", "d5");
   div5.setAttribute("data-localization", "content=toolbox.defaultTitle");
   toolboxDiv.appendChild(div5);
diff --git a/docshell/test/chrome/test_bug453650.xul b/docshell/test/chrome/test_bug453650.xul
--- a/docshell/test/chrome/test_bug453650.xul
+++ b/docshell/test/chrome/test_bug453650.xul
@@ -20,7 +20,7 @@
   nextTest();
 
   function* runTests() {
-    var iframe = document.createElement("iframe");
+    var iframe = document.createXULElement("iframe");
     iframe.style.width = "300px";
     iframe.style.height = "300px";
     iframe.setAttribute("src", "data:text/html,<h1 id='h'>hello</h1>");
diff --git a/docshell/test/chrome/test_bug846906.xul b/docshell/test/chrome/test_bug846906.xul
--- a/docshell/test/chrome/test_bug846906.xul
+++ b/docshell/test/chrome/test_bug846906.xul
@@ -38,7 +38,7 @@
   var document = webNavigation.document;
   ok(document, "Should be able to get document");
 
-  var iframe = document.createElement("iframe");
+  var iframe = document.createXULElement("iframe");
   ok(iframe, "Should be able to create iframe");
 
   iframe.onload = function () {
diff --git a/docshell/test/chrome/test_principalInherit.xul b/docshell/test/chrome/test_principalInherit.xul
--- a/docshell/test/chrome/test_principalInherit.xul
+++ b/docshell/test/chrome/test_principalInherit.xul
@@ -38,7 +38,7 @@
 // matters when these tests fail (produces better error messages).
 var tests = [
   function testInheritFromParent(cb) {
-    gFrame = document.createElement("iframe");
+    gFrame = document.createXULElement("iframe");
     loadListener(gFrame, function () {
       is(window.inheritedFromParent, true, "load in type=content iframe inherited principal of same type parent");
       cb();
@@ -63,7 +63,7 @@
                     '<window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"/>';
     let newWin = window.openDialog(xulWinURL, "chrome_window", "chrome");
     loadListener(newWin, function () {
-      let frame = newWin.document.createElement("iframe");
+      let frame = newWin.document.createXULElement("iframe");
       frame.setAttribute("type", "content");
       frame.setAttribute("src", "javascript:'1';");
       loadListener(frame, function () {
diff --git a/dom/base/test/chrome/file_bug549682.xul b/dom/base/test/chrome/file_bug549682.xul
--- a/dom/base/test/chrome/file_bug549682.xul
+++ b/dom/base/test/chrome/file_bug549682.xul
@@ -173,7 +173,7 @@
     messageManager.removeDelayedFrameScript(toBeRemovedScript);
 
     var oldValue = globalListenerCallCount;
-    var b = document.createElement("browser");
+    var b = document.createXULElement("browser");
     b.setAttribute("type", "content");
     document.documentElement.appendChild(b);
     is(globalListenerCallCount, oldValue + 1,
diff --git a/dom/base/test/chrome/file_bug990812-1.xul b/dom/base/test/chrome/file_bug990812-1.xul
--- a/dom/base/test/chrome/file_bug990812-1.xul
+++ b/dom/base/test/chrome/file_bug990812-1.xul
@@ -45,7 +45,7 @@
         }
       });
 
-      var browser = document.createElement("browser");
+      var browser = document.createXULElement("browser");
       browser.setAttribute("messagemanagergroup", "test");
       browser.setAttribute("src", "about:mozilla");
       browser.setAttribute("type", "content");
diff --git a/dom/base/test/chrome/file_bug990812.xul b/dom/base/test/chrome/file_bug990812.xul
--- a/dom/base/test/chrome/file_bug990812.xul
+++ b/dom/base/test/chrome/file_bug990812.xul
@@ -39,7 +39,7 @@
         }
       });
 
-      var browser = document.createElement("browser");
+      var browser = document.createXULElement("browser");
       browser.setAttribute("messagemanagergroup", "test");
       browser.setAttribute("src", "about:mozilla");
       browser.setAttribute("type", "content");
diff --git a/dom/base/test/chrome/test_bug120684.xul b/dom/base/test/chrome/test_bug120684.xul
--- a/dom/base/test/chrome/test_bug120684.xul
+++ b/dom/base/test/chrome/test_bug120684.xul
@@ -45,7 +45,7 @@
   is(list[1], undefined);
 
   // Removing element which isn't in the list shouldn't do anything.
-  list.remove(document.createElement("foo"));
+  list.remove(document.createXULElement("foo"));
   is(list.length, 1, "Length should be 1.");
   is(list[0], document.documentElement);
 
@@ -53,9 +53,9 @@
   is(list.length, 0, "Length should be 0.");
   is(list[0], undefined);
 
-  var e1 = document.createElement("foo");
-  var e2 = document.createElement("foo");
-  var e3 = document.createElement("foo");
+  var e1 = document.createXULElement("foo");
+  var e2 = document.createXULElement("foo");
+  var e3 = document.createXULElement("foo");
 
   list.append(e1);
   list.append(e2);
diff --git a/dom/base/test/chrome/test_bug683852.xul b/dom/base/test/chrome/test_bug683852.xul
--- a/dom/base/test/chrome/test_bug683852.xul
+++ b/dom/base/test/chrome/test_bug683852.xul
@@ -40,7 +40,7 @@
     is(box.contains(anon), false, "Element should not contain anonymous element in it!");
     is(anon.contains(anon), true, "Anonymous element should contain itself.")
     is(document.documentElement.contains(box), true, "Element should contain element in it!");
-    is(document.contains(document.createElement("foo")), false, "Document shouldn't contain element which is't in the document");
+    is(document.contains(document.createXULElement("foo")), false, "Document shouldn't contain element which is't in the document");
     is(document.contains(document.createTextNode("foo")), false, "Document shouldn't contain text node which is't in the document");
 
     var link = document.getElementById("link");
diff --git a/dom/base/test/test_domrequesthelper.xul b/dom/base/test/test_domrequesthelper.xul
--- a/dom/base/test/test_domrequesthelper.xul
+++ b/dom/base/test/test_domrequesthelper.xul
@@ -141,7 +141,7 @@
         }
       };
 
-      let frame = document.createElement("iframe");
+      let frame = document.createXULElement("iframe");
       frame.onload = function() {
         obs.addObserver(observer, TOPIC);
         // Create dummy DOMRequestHelper specific to checkWindowDestruction()
diff --git a/dom/events/test/bug418986-3.js b/dom/events/test/bug418986-3.js
--- a/dom/events/test/bug418986-3.js
+++ b/dom/events/test/bug418986-3.js
@@ -43,7 +43,7 @@
         // The following code creates a new div for each event in eventDefs,
         // attaches a listener to listen for the event, and then generates
         // a fake event at the center of the div.
-        let div = document.createElement("div");
+        let div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
         div.style.width = "10px";
         div.style.height = "10px";
         div.style.backgroundColor = "red";
diff --git a/dom/l10n/DOMOverlays.cpp b/dom/l10n/DOMOverlays.cpp
--- a/dom/l10n/DOMOverlays.cpp
+++ b/dom/l10n/DOMOverlays.cpp
@@ -314,9 +314,11 @@
   // Start with an empty element of the same type to remove nested children
   // and non-localizable attributes defined by the translation.
 
+  nsAutoString nameSpaceURI;
+  aElement->NodeInfo()->GetNamespaceURI(nameSpaceURI);
   ElementCreationOptionsOrString options;
-  RefPtr<Element> clone = aElement->OwnerDoc()->CreateElement(
-      aElement->NodeInfo()->LocalName(), options, aRv);
+  RefPtr<Element> clone = aElement->OwnerDoc()->CreateElementNS(
+      nameSpaceURI, aElement->NodeInfo()->LocalName(), options, aRv);
   if (NS_WARN_IF(aRv.Failed())) {
     return nullptr;
   }
diff --git a/dom/l10n/tests/mochitest/test_domoverlays.xul b/dom/l10n/tests/mochitest/test_domoverlays.xul
--- a/dom/l10n/tests/mochitest/test_domoverlays.xul
+++ b/dom/l10n/tests/mochitest/test_domoverlays.xul
@@ -20,7 +20,7 @@
 
   function elem(name) {
     return function(str) {
-      const element = document.createElement(name);
+      const element = document.createXULElement(name);
       // eslint-disable-next-line no-unsanitized/property
       element.innerHTML = str;
       return element;
diff --git a/dom/messagechannel/tests/test_messageChannel.xul b/dom/messagechannel/tests/test_messageChannel.xul
--- a/dom/messagechannel/tests/test_messageChannel.xul
+++ b/dom/messagechannel/tests/test_messageChannel.xul
@@ -22,7 +22,7 @@
     SimpleTest.finish();
   }
 
-  var ifr = document.createElement('browser');
+  var ifr = document.createXULElement('browser');
   ifr.setAttribute("src", "iframe_messageChannel_chrome.html");
   ifr.setAttribute("flex", "1");
   ifr.addEventListener('load', function() {
diff --git a/dom/tests/browser/browser_bug396843.js b/dom/tests/browser/browser_bug396843.js
--- a/dom/tests/browser/browser_bug396843.js
+++ b/dom/tests/browser/browser_bug396843.js
@@ -6,7 +6,7 @@
 
     // HTML
     function HTML_TAG(name) {
-        allNodes.push(doc.createElement(name));
+        allNodes.push(doc.createElementNS("http://www.w3.org/1999/xhtml", name));
     }
 
     /* List copy/pasted from nsHTMLTagList.h */
diff --git a/dom/tests/browser/browser_xhr_sandbox.js b/dom/tests/browser/browser_xhr_sandbox.js
--- a/dom/tests/browser/browser_xhr_sandbox.js
+++ b/dom/tests/browser/browser_xhr_sandbox.js
@@ -24,7 +24,7 @@
 add_task(async function test() {
   let newWin = await BrowserTestUtils.openNewBrowserWindow();
 
-  let frame = newWin.document.createElement("iframe");
+  let frame = newWin.document.createXULElement("iframe");
   frame.setAttribute("type", "content");
   frame.setAttribute("src", "http://mochi.test:8888/browser/dom/tests/browser/browser_xhr_sandbox.js");
 
diff --git a/dom/tests/mochitest/chrome/DOMWindowCreated_chrome.xul b/dom/tests/mochitest/chrome/DOMWindowCreated_chrome.xul
--- a/dom/tests/mochitest/chrome/DOMWindowCreated_chrome.xul
+++ b/dom/tests/mochitest/chrome/DOMWindowCreated_chrome.xul
@@ -25,7 +25,7 @@
 }, false);
 
 var root = getRootDirectory(window.location.href);
-var el = document.createElement("iframe");
+var el = document.createXULElement("iframe");
 el.setAttribute('type', 'content');
 el.setAttribute('src', root + 'DOMWindowCreated_content.html');
 document.documentElement.appendChild(el);
diff --git a/dom/tests/mochitest/chrome/window_focus.xul b/dom/tests/mochitest/chrome/window_focus.xul
--- a/dom/tests/mochitest/chrome/window_focus.xul
+++ b/dom/tests/mochitest/chrome/window_focus.xul
@@ -791,10 +791,10 @@
 
   setFocusTo("t1", window);
 
-  var textbox1 = document.createElement("textbox");
+  var textbox1 = document.createXULElement("textbox");
   $("innerbox").appendChild(textbox1);
 
-  var textbox2 = document.createElement("textbox");
+  var textbox2 = document.createXULElement("textbox");
   $("innerbox").appendChild(textbox2);
 
   gLastFocusMethod = 0;
diff --git a/dom/tests/mochitest/general/test_offsets.js b/dom/tests/mochitest/general/test_offsets.js
--- a/dom/tests/mochitest/general/test_offsets.js
+++ b/dom/tests/mochitest/general/test_offsets.js
@@ -23,7 +23,7 @@
     testElement(element);
   }
 
-  var nonappended = document.createElement("div");
+  var nonappended = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
   nonappended.id = "nonappended";
   nonappended.setAttribute("_offsetParent", "null");
   testElement(nonappended);
diff --git a/dom/tests/mochitest/webcomponents/test_custom_element_namespace.xul b/dom/tests/mochitest/webcomponents/test_custom_element_namespace.xul
--- a/dom/tests/mochitest/webcomponents/test_custom_element_namespace.xul
+++ b/dom/tests/mochitest/webcomponents/test_custom_element_namespace.xul
@@ -71,8 +71,8 @@
       element = document.getElementById("xul2");
       checkElement(element, HTML_NS, false, "parsed XUL as HTML");
 
-      element = document.createElement("test-xul-element");
-      checkElement(element, XUL_NS, true, "document.createElement(XUL)");
+      element = document.createXULElement("test-xul-element");
+      checkElement(element, XUL_NS, true, "document.createXULElement(XUL)");
 
       element = document.createXULElement("test-xul-element");
       checkElement(element, XUL_NS, true, "document.createXULElement(XUL)");
@@ -101,8 +101,8 @@
       element = document.getElementById("html4");
       checkElement(element, HTML_NS, true, "parsed HTML as HTML");
 
-      element = document.createElement("test-html-element");
-      checkElement(element, XUL_NS, false, "document.createElement(HTML)");
+      element = document.createXULElement("test-html-element");
+      checkElement(element, XUL_NS, false, "document.createXULElement(HTML)");
 
       element = document.createXULElement("test-html-element");
       checkElement(element, XUL_NS, false, "document.createXULElement(HTML)");
diff --git a/dom/xbl/crashtests/406900-1.xul b/dom/xbl/crashtests/406900-1.xul
--- a/dom/xbl/crashtests/406900-1.xul
+++ b/dom/xbl/crashtests/406900-1.xul
@@ -22,7 +22,7 @@
   var anon = document.getAnonymousNodes(x)[0];
   document.documentElement.removeChild(x);
   document.documentElement.appendChild(x);
-  var hbox = document.createElement('hbox');
+  var hbox = document.createXULElement('hbox');
   anon.appendChild(hbox);
 }
 
diff --git a/dom/xbl/test/test_bug398492.xul b/dom/xbl/test/test_bug398492.xul
--- a/dom/xbl/test/test_bug398492.xul
+++ b/dom/xbl/test/test_bug398492.xul
@@ -50,7 +50,7 @@
       var anonKids = document.getAnonymousNodes(n2);
       is(anonKids, null, "No XBL binding attached to cloned node");
 
-      var n3 = document.createElement("hbox");
+      var n3 = document.createXULElement("hbox");
       document.documentElement.appendChild(n3);
       var kid3 = document.createTextNode("Text");
       n3.appendChild(kid3);
diff --git a/dom/xul/test/test_import_xul_to_content.xul b/dom/xul/test/test_import_xul_to_content.xul
--- a/dom/xul/test/test_import_xul_to_content.xul
+++ b/dom/xul/test/test_import_xul_to_content.xul
@@ -55,7 +55,7 @@
     });
 
     // We add some XUL to a content document. This should generate a warning.
-    var elt = document.createElement("label");
+    var elt = document.createXULElement("label");
     var newElt = doc.importNode(elt, false);
     expectWarning(true, "appending XUL", function() {
       doc.documentElement.appendChild(newElt);
diff --git a/js/xpconnect/tests/chrome/test_weakmap_keys_preserved2.xul b/js/xpconnect/tests/chrome/test_weakmap_keys_preserved2.xul
--- a/js/xpconnect/tests/chrome/test_weakmap_keys_preserved2.xul
+++ b/js/xpconnect/tests/chrome/test_weakmap_keys_preserved2.xul
@@ -27,12 +27,12 @@
 
   let wrappers_as_keys_test = function () {
     let e = new MessageEvent("foo", { bubbles: false, cancellable: false,
-                                      data: { dummy: document.createElement("foo") }});
+                                      data: { dummy: document.createXULElement("foo") }});
     window.eeeevent = e;
 
     let live_dom = e.data.dummy;
-    let dead_dom = document.createElement("div");
-    let dead_child = document.createElement("div");
+    let dead_dom = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
+    let dead_child = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
     dead_dom.appendChild(dead_child);
     is(dead_dom.children.length, 1, "children have wrong length");
     let wrappee = new Object();
diff --git a/layout/base/tests/browser_bug617076.js b/layout/base/tests/browser_bug617076.js
--- a/layout/base/tests/browser_bug617076.js
+++ b/layout/base/tests/browser_bug617076.js
@@ -16,7 +16,7 @@
   // insert button into test page content
   await ContentTask.spawn(gBrowser.selectedBrowser, null, async function() {
     let doc = content.document;
-    let e = doc.createElement("button");
+    let e = doc.createXULElement("button");
     e.setAttribute("label", "hello");
     e.setAttribute("tooltiptext", "world");
     e.setAttribute("id", "test-button");
diff --git a/layout/reftests/bugs/272646-1.xul b/layout/reftests/bugs/272646-1.xul
--- a/layout/reftests/bugs/272646-1.xul
+++ b/layout/reftests/bugs/272646-1.xul
@@ -2,7 +2,7 @@
 <window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
         xmlns:nc="http://home.netscape.com/NC-rdf#"
         title="insertBefore - Weirdness"
-        onload="var atab = document.createElement('tab'); atab.setAttribute('label','new'); document.getElementById('tabs-id').insertBefore(atab,document.getElementById('tabs-id').lastChild);" >
+        onload="var atab = document.createXULElement('tab'); atab.setAttribute('label','new'); document.getElementById('tabs-id').insertBefore(atab,document.getElementById('tabs-id').lastChild);" >
 <tabbox>
  <tabs id="tabs-id">
   <tab label="foo" />
diff --git a/layout/reftests/bugs/472020-1a.xul b/layout/reftests/bugs/472020-1a.xul
--- a/layout/reftests/bugs/472020-1a.xul
+++ b/layout/reftests/bugs/472020-1a.xul
@@ -1,6 +1,6 @@
 <?xml version="1.0"?>
 <window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
-	onload="document.getElementById('o').appendChild(document.createElement('box'));">
+	onload="document.getElementById('o').appendChild(document.createXULElement('box'));">
 
 <style xmlns="http://www.w3.org/1999/xhtml"><![CDATA[
   outer {
diff --git a/layout/reftests/bugs/472020-1b.xul b/layout/reftests/bugs/472020-1b.xul
--- a/layout/reftests/bugs/472020-1b.xul
+++ b/layout/reftests/bugs/472020-1b.xul
@@ -1,6 +1,6 @@
 <?xml version="1.0"?>
 <window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
-	onload="var p = document.getElementById('o'); p.insertBefore(document.createElement('box'), p.firstChild);">
+	onload="var p = document.getElementById('o'); p.insertBefore(document.createXULElement('box'), p.firstChild);">
 
 <style xmlns="http://www.w3.org/1999/xhtml"><![CDATA[
   outer {
diff --git a/layout/reftests/bugs/472020-2.xul b/layout/reftests/bugs/472020-2.xul
--- a/layout/reftests/bugs/472020-2.xul
+++ b/layout/reftests/bugs/472020-2.xul
@@ -1,6 +1,6 @@
 <?xml version="1.0"?>
 <window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
-	onload="document.getElementById('o').appendChild(document.createElement('box'));">
+	onload="document.getElementById('o').appendChild(document.createXULElement('box'));">
 
 <style xmlns="http://www.w3.org/1999/xhtml"><![CDATA[
   outer {
diff --git a/layout/style/test/chrome/bug418986-2.js b/layout/style/test/chrome/bug418986-2.js
--- a/layout/style/test/chrome/bug418986-2.js
+++ b/layout/style/test/chrome/bug418986-2.js
@@ -145,7 +145,7 @@
     function ([key, offVal, onVal]) {
       let val = resisting ? onVal : offVal;
       if (val) {
-        let div = document.createElement("div");
+        let div = document.createElementNS(HTML_NS, "div");
         div.setAttribute("class", "spoof");
         div.setAttribute("id", key);
         div.textContent = key;
@@ -154,14 +154,14 @@
     });
   suppressed_toggles.forEach(
     function (key) {
-      let div = document.createElement("div");
+      let div = document.createElementNS(HTML_NS, "div");
       div.setAttribute("class", "suppress");
       div.setAttribute("id", key);
       div.textContent = key;
       fragment.appendChild(div);
     });
   if (OS === "WINNT") {
-    let div = document.createElement("div");
+    let div = document.createElementNS(HTML_NS, "div");
     div.setAttribute("class", "windows");
     div.setAttribute("id", "-moz-os-version");
     div.textContent = "-moz-os-version";
@@ -253,7 +253,7 @@
 // When fingerprinting resistance is enabled, the `getComputedStyle`
 // should always return `undefined` for `MozOSXFontSmoothing`.
 var testOSXFontSmoothing = function (resisting) {
-  let div = document.createElement("div");
+  let div = document.createElementNS(HTML_NS, "div");
   div.style.MozOsxFontSmoothing = "unset";
   document.documentElement.appendChild(div);
   let readBack = window.getComputedStyle(div).MozOsxFontSmoothing;
diff --git a/layout/xul/crashtests/538308-1.xul b/layout/xul/crashtests/538308-1.xul
--- a/layout/xul/crashtests/538308-1.xul
+++ b/layout/xul/crashtests/538308-1.xul
@@ -17,7 +17,7 @@
     <script type="text/javascript"><![CDATA[
     function run() {
         group = document.getElementById("group");
-        tc = document.createElement("treechildren");
+        tc = document.createXULElement("treechildren");
         group.appendChild(tc);
 
         v = document.getElementById("victim");
diff --git a/layout/xul/grid/examples/dynamicgrid.xul b/layout/xul/grid/examples/dynamicgrid.xul
--- a/layout/xul/grid/examples/dynamicgrid.xul
+++ b/layout/xul/grid/examples/dynamicgrid.xul
@@ -63,7 +63,7 @@
 
    function createButton(str)
    {
-	 var b = document.createElement("button");
+	 var b = document.createXULElement("button");
 	 b.setAttribute("label", str+count);
 	 count++;
 	 addCellSelectionHandle(b);
@@ -72,7 +72,7 @@
 
    function createRow()
    {
-	 var b = document.createElement("row");
+	 var b = document.createXULElement("row");
  	 b.setAttribute("dynamic","true");
 
 	 addRowColumnSelectionHandle(b);
@@ -81,7 +81,7 @@
 
    function createColumn()
    {
-	 var b = document.createElement("column");
+	 var b = document.createXULElement("column");
 	 b.setAttribute("dynamic","true");
 	 addRowColumnSelectionHandle(b);
 	 return b;
@@ -89,7 +89,7 @@
 
    function createText(str)
    {
-	 var text = document.createElement("text");
+	 var text = document.createXULElement("text");
 	 text.setAttribute("value", str+count);
 	 count++;
 	 text.setAttribute("style", "font-size: 40pt");
diff --git a/layout/xul/grid/examples/javascriptappend.xul b/layout/xul/grid/examples/javascriptappend.xul
--- a/layout/xul/grid/examples/javascriptappend.xul
+++ b/layout/xul/grid/examples/javascriptappend.xul
@@ -16,7 +16,7 @@
     function start()
 	{
 	   var row = document.getElementById("row");
-	   var text = document.createElement("text");
+	   var text = document.createXULElement("text");
 	   text.setAttribute("value", "foo");
 	   row.appendChild(text);
 	}
diff --git a/mobile/android/chrome/content/browser.js b/mobile/android/chrome/content/browser.js
--- a/mobile/android/chrome/content/browser.js
+++ b/mobile/android/chrome/content/browser.js
@@ -3615,7 +3615,7 @@
 
     aParams = aParams || {};
 
-    this.browser = document.createElement("browser");
+    this.browser = document.createXULElement("browser");
     this.browser.setAttribute("type", "content");
     this.browser.setAttribute("messagemanagergroup", "browsers");
 
diff --git a/mobile/android/chrome/geckoview/geckoview.js b/mobile/android/chrome/geckoview/geckoview.js
--- a/mobile/android/chrome/geckoview/geckoview.js
+++ b/mobile/android/chrome/geckoview/geckoview.js
@@ -378,7 +378,7 @@
 }
 
 function createBrowser() {
-  const browser = window.browser = document.createElement("browser");
+  const browser = window.browser = document.createXULElement("browser");
   // Identify this `<browser>` element uniquely to Marionette, devtools, etc.
   browser.permanentKey = {};
 
diff --git a/testing/marionette/harness/marionette_harness/tests/unit/test_findelement_chrome.py b/testing/marionette/harness/marionette_harness/tests/unit/test_findelement_chrome.py
--- a/testing/marionette/harness/marionette_harness/tests/unit/test_findelement_chrome.py
+++ b/testing/marionette/harness/marionette_harness/tests/unit/test_findelement_chrome.py
@@ -85,7 +85,7 @@
         self.marionette.timeout.implicit = 4
         self.marionette.execute_script("""
             window.setTimeout(function () {
-              var b = window.document.createElement('button');
+              var b = window.document.createXULElement('button');
               b.id = 'myid';
               document.getElementById('things').appendChild(b);
             }, 1000); """)
diff --git a/toolkit/components/extensions/ExtensionXPCShellUtils.jsm b/toolkit/components/extensions/ExtensionXPCShellUtils.jsm
--- a/toolkit/components/extensions/ExtensionXPCShellUtils.jsm
+++ b/toolkit/components/extensions/ExtensionXPCShellUtils.jsm
@@ -151,7 +151,7 @@
 
     let chromeDoc = await promiseDocumentLoaded(chromeShell.document);
 
-    let browser = chromeDoc.createElement("browser");
+    let browser = chromeDoc.createXULElement("browser");
     browser.setAttribute("type", "content");
     browser.setAttribute("disableglobalhistory", "true");
     if (this.userContextId) {
diff --git a/toolkit/content/tests/chrome/test_bug437844.xul b/toolkit/content/tests/chrome/test_bug437844.xul
--- a/toolkit/content/tests/chrome/test_bug437844.xul
+++ b/toolkit/content/tests/chrome/test_bug437844.xul
@@ -63,7 +63,7 @@
       let cleanupFunc = createManifestTemporarily(tempProfileDir, manifest);
 
       // Load about:plugins in an iframe
-      let frame = document.createElement("iframe");
+      let frame = document.createXULElement("iframe");
       frame.setAttribute("src", "about:plugins");
       frame.addEventListener("load", function () {
           frame.removeEventListener("load", arguments.callee, false);
@@ -74,7 +74,7 @@
                                       QueryInterface(Ci.nsIProperties);
           let tmpd = gDirSvc.get("ProfD", Ci.nsIFile);
 
-          frame = document.createElement("iframe");
+          frame = document.createXULElement("iframe");
           frame.setAttribute("src", "file://" + tmpd.path); // a file:// URI, bug 348233
           frame.addEventListener("load", function () {
               frame.removeEventListener("load", arguments.callee, false);
diff --git a/toolkit/content/tests/chrome/test_custom_element_base.xul b/toolkit/content/tests/chrome/test_custom_element_base.xul
--- a/toolkit/content/tests/chrome/test_custom_element_base.xul
+++ b/toolkit/content/tests/chrome/test_custom_element_base.xul
@@ -64,7 +64,7 @@
     await testCustomInterface();
 
     let htmlWin = await new Promise(resolve => {
-      let htmlIframe = document.createElement("iframe");
+      let htmlIframe = document.createXULElement("iframe");
       htmlIframe.src = "file_empty.xhtml";
       htmlIframe.onload = () => resolve(htmlIframe.contentWindow);
       document.documentElement.appendChild(htmlIframe);
diff --git a/toolkit/content/tests/chrome/window_largemenu.xul b/toolkit/content/tests/chrome/window_largemenu.xul
--- a/toolkit/content/tests/chrome/window_largemenu.xul
+++ b/toolkit/content/tests/chrome/window_largemenu.xul
@@ -73,7 +73,7 @@
     // add some more menuitems so that scrolling will be necessary
     var moreItemCount = Math.round(screen.height / popup.firstChild.getBoundingClientRect().height);
     for (var t = 1; t <= moreItemCount; t++) {
-      var menu = document.createElement("menuitem");
+      var menu = document.createXULElement("menuitem");
       menu.setAttribute("label", "More" + t);
       popup.appendChild(menu);
     }
@@ -299,7 +299,7 @@
     var height = popup.getBoundingClientRect().height;
     var itemheight = document.getElementById("firstitem").getBoundingClientRect().height;
     while (height < desiredHeight) {
-      var menu = document.createElement("menuitem");
+      var menu = document.createXULElement("menuitem");
       menu.setAttribute("label", "Item");
       popup.appendChild(menu);
       height += itemheight;
diff --git a/toolkit/content/tests/chrome/window_panel.xul b/toolkit/content/tests/chrome/window_panel.xul
--- a/toolkit/content/tests/chrome/window_panel.xul
+++ b/toolkit/content/tests/chrome/window_panel.xul
@@ -91,12 +91,12 @@
 
 function createPanel(attrs)
 {
-  var panel = document.createElement("panel");
+  var panel = document.createXULElement("panel");
   for (var a in attrs) {
     panel.setAttribute(a, attrs[a]);
   }
 
-  var button = document.createElement("button");
+  var button = document.createXULElement("button");
   panel.appendChild(button);
   button.label = "OK";
   button.width = 120;
diff --git a/toolkit/content/tests/chrome/xul_selectcontrol.js b/toolkit/content/tests/chrome/xul_selectcontrol.js
--- a/toolkit/content/tests/chrome/xul_selectcontrol.js
+++ b/toolkit/content/tests/chrome/xul_selectcontrol.js
@@ -84,7 +84,7 @@
   is(element.getIndexOfItem(firstitem), 0, testid + "getIndexOfItem - first item at index 0");
   is(element.getIndexOfItem(seconditem), 1, testid + "getIndexOfItem - second item at index 1");
 
-  var otheritem = element.ownerDocument.createElement(childtag);
+  var otheritem = element.ownerDocument.createXULElement(childtag);
   is(element.getIndexOfItem(otheritem), -1, testid + "getIndexOfItem - other item not found");
 
   // 'getItemAtIndex' - check if getItemAtIndex returns the right item
diff --git a/toolkit/content/widgets/tree.js b/toolkit/content/widgets/tree.js
--- a/toolkit/content/widgets/tree.js
+++ b/toolkit/content/widgets/tree.js
@@ -226,7 +226,7 @@
         // it is not being shown.
         var currElement = currCol.element;
         if (!currElement.hasAttribute("ignoreincolumnpicker")) {
-          var popupChild = document.createElement("menuitem");
+          var popupChild = document.createXULElement("menuitem");
           popupChild.setAttribute("type", "checkbox");
           var columnName = currElement.getAttribute("display") ||
             currElement.getAttribute("label");
diff --git a/toolkit/modules/CharsetMenu.jsm b/toolkit/modules/CharsetMenu.jsm
--- a/toolkit/modules/CharsetMenu.jsm
+++ b/toolkit/modules/CharsetMenu.jsm
@@ -123,7 +123,7 @@
                          "https://bugzilla.mozilla.org/show_bug.cgi?id=1088710");
     }
     function createDOMNode(doc, nodeInfo) {
-      let node = doc.createElement("menuitem");
+      let node = doc.createXULElement("menuitem");
       node.setAttribute("type", "radio");
       node.setAttribute("name", nodeInfo.name + "Group");
       node.setAttribute(nodeInfo.name, nodeInfo.value);
@@ -142,22 +142,22 @@
     let doc = parent.ownerDocument;
 
     if (showDetector) {
-      let menuNode = doc.createElement("menu");
+      let menuNode = doc.createXULElement("menu");
       menuNode.setAttribute("label", gBundle.GetStringFromName("charsetMenuAutodet"));
       menuNode.setAttribute("accesskey", gBundle.GetStringFromName("charsetMenuAutodet.key"));
       parent.appendChild(menuNode);
 
-      let menuPopupNode = doc.createElement("menupopup");
+      let menuPopupNode = doc.createXULElement("menupopup");
       menuNode.appendChild(menuPopupNode);
       menuPopupNode.addEventListener("command", SetDetector);
       menuPopupNode.addEventListener("popupshown", UpdateDetectorMenu);
 
       gDetectorInfoCache.forEach(detectorInfo => menuPopupNode.appendChild(createDOMNode(doc, detectorInfo)));
-      parent.appendChild(doc.createElement("menuseparator"));
+      parent.appendChild(doc.createXULElement("menuseparator"));
     }
 
     gPinnedInfoCache.forEach(charsetInfo => parent.appendChild(createDOMNode(doc, charsetInfo)));
-    parent.appendChild(doc.createElement("menuseparator"));
+    parent.appendChild(doc.createXULElement("menuseparator"));
     gCharsetInfoCache.forEach(charsetInfo => parent.appendChild(createDOMNode(doc, charsetInfo)));
   },
 
diff --git a/toolkit/mozapps/extensions/test/browser/browser_html_message_bar.js b/toolkit/mozapps/extensions/test/browser/browser_html_message_bar.js
--- a/toolkit/mozapps/extensions/test/browser/browser_html_message_bar.js
+++ b/toolkit/mozapps/extensions/test/browser/browser_html_message_bar.js
@@ -6,13 +6,15 @@
 
 let htmlAboutAddonsWindow;
 
+const HTML_NS = "http://www.w3.org/1999/xhtml";
+
 function clickElement(el) {
   el.dispatchEvent(new CustomEvent("click"));
 }
 
 function createMessageBar(messageBarStack, {attrs, children, onclose} = {}) {
   const win = messageBarStack.ownerGlobal;
-  const messageBar = win.document.createElement("message-bar");
+  const messageBar = win.document.createElementNS(HTML_NS, "message-bar");
   if (attrs) {
     for (const [k, v] of Object.entries(attrs)) {
       messageBar.setAttribute(k, v);
@@ -61,9 +63,9 @@
   const win = htmlAboutAddonsWindow;
   const messageBarStack = win.document.querySelector("message-bar-stack");
 
-  let messageEl = win.document.createElement("span");
+  let messageEl = win.document.createElementNS(HTML_NS, "span");
   messageEl.textContent = "A message bar text";
-  let buttonEl = win.document.createElement("button");
+  let buttonEl = win.document.createElementNS(HTML_NS, "button");
   buttonEl.textContent = "An action button";
 
   let messageBar;
@@ -100,7 +102,7 @@
   const messageBarStack = win.document.querySelector("message-bar-stack");
 
   info("Create a new message-bar");
-  let messageElement = document.createElement("span");
+  let messageElement = document.createElementNS(HTML_NS, "span");
   messageElement = "message bar label";
 
   let onceMessageBarClosed = new Promise(resolve => {
diff --git a/toolkit/mozapps/handling/content/dialog.js b/toolkit/mozapps/handling/content/dialog.js
--- a/toolkit/mozapps/handling/content/dialog.js
+++ b/toolkit/mozapps/handling/content/dialog.js
@@ -155,7 +155,7 @@
     var preferredHandler = this._handlerInfo.preferredApplicationHandler;
     for (let i = possibleHandlers.length - 1; i >= 0; --i) {
       let app = possibleHandlers.queryElementAt(i, Ci.nsIHandlerApp);
-      let elm = document.createElement("richlistitem", {is: "mozapps-handler"});
+      let elm = document.createXULElement("richlistitem", {is: "mozapps-handler"});
       elm.setAttribute("name", app.name);
       elm.obj = app;
 
@@ -203,7 +203,7 @@
     }
 
     if (this._handlerInfo.hasDefaultHandler) {
-      let elm = document.createElement("richlistitem", {is: "mozapps-handler"});
+      let elm = document.createXULElement("richlistitem", {is: "mozapps-handler"});
       elm.id = "os-default-handler";
       elm.setAttribute("name", this._handlerInfo.defaultDescription);
 
@@ -234,7 +234,7 @@
           }
         }
         if (!appAlreadyInHandlers) {
-          let elm = document.createElement("richlistitem", {is: "mozapps-handler"});
+          let elm = document.createXULElement("richlistitem", {is: "mozapps-handler"});
           elm.setAttribute("name", handler.name);
           elm.obj = handler;
           items.insertBefore(elm, this._itemChoose);
@@ -275,7 +275,7 @@
           }
         }
 
-        let elm = document.createElement("richlistitem", {is: "mozapps-handler"});
+        let elm = document.createXULElement("richlistitem", {is: "mozapps-handler"});
         elm.setAttribute("name", fp.file.leafName);
         elm.setAttribute("image", "moz-icon://" + uri.spec + "?size=32");
         elm.obj = handlerApp;

