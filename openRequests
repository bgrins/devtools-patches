# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  ff83fde8be946eabcf27ea97d4676f601c122194
Bug 1361140 - Key openRequests by channel instead of id for faster lookups;r=Honza

diff --git a/devtools/shared/webconsole/network-monitor.js b/devtools/shared/webconsole/network-monitor.js
--- a/devtools/shared/webconsole/network-monitor.js
+++ b/devtools/shared/webconsole/network-monitor.js
@@ -1173,23 +1173,17 @@ NetworkMonitor.prototype = {
    * Find an HTTP activity object for the channel.
    *
    * @param nsIHttpChannel channel
    *        The HTTP channel whose activity object we want to find.
    * @return object
    *        The HTTP activity object, or null if it is not found.
    */
   _findActivityObject: function (channel) {
-    for (let id in this.openRequests) {
-      let item = this.openRequests[id];
-      if (item.channel === channel) {
-        return item;
-      }
-    }
-    return null;
+    return this.openRequests[channel] || null;
   },
 
   /**
    * Find an existing HTTP activity object, or create a new one. This
    * object is used for storing all the request and response
    * information.
    *
    * This is a HAR-like object. Conformance to the spec is not guaranteed at
@@ -1221,17 +1215,17 @@ NetworkMonitor.prototype = {
         // internal timing information, see observeActivity()
         timings: {},
         // see _onResponseHeader()
         responseStatus: null,
         // the activity owner which is notified when changes happen
         owner: null,
       };
 
-      this.openRequests[httpActivity.id] = httpActivity;
+      this.openRequests[channel] = httpActivity;
     }
 
     return httpActivity;
   },
 
   /**
    * Setup the network response listener for the given HTTP activity. The
    * NetworkResponseListener is responsible for storing the response body.
@@ -1372,17 +1366,17 @@ NetworkMonitor.prototype = {
    *
    * @private
    * @param object httpActivity
    *        The HTTP activity object we work with.
    */
   _onTransactionClose: function (httpActivity) {
     let result = this._setupHarTimings(httpActivity);
     httpActivity.owner.addEventTimings(result.total, result.timings);
-    delete this.openRequests[httpActivity.id];
+    delete this.openRequests[httpActivity.channel];
   },
 
   /**
    * Update the HTTP activity object to include timing information as in the HAR
    * spec. The HTTP activity object holds the raw timing information in
    * |timings| - these are timings stored for each activity notification. The
    * HAR timing information is constructed based on these lower level
    * data.
