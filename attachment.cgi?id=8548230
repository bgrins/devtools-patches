# HG changeset patch
# User Patrick Brosset <pbrosset@mozilla.com>
# Parent  da4496952aa1fb76b491c2ef082339488720a810
Bug 1120852 - 2 - Don't start the animation timeline UI before the animation delay has passed

diff --git a/browser/devtools/animationinspector/animation-panel.js b/browser/devtools/animationinspector/animation-panel.js
--- a/browser/devtools/animationinspector/animation-panel.js
+++ b/browser/devtools/animationinspector/animation-panel.js
@@ -188,47 +188,52 @@ PlayerWidget.prototype = {
     let titleEl = createNode({
       parent: this.el,
       attributes: {
         "class": "animation-title"
       }
     });
     let titleHTML = "";
 
-    // Name
+    // Name.
     if (state.name) {
-      // Css animations have names
+      // Css animations have names.
       titleHTML += L10N.getStr("player.animationNameLabel");
       titleHTML += "<strong>" + state.name + "</strong>";
     } else {
-      // Css transitions don't
+      // Css transitions don't.
       titleHTML += L10N.getStr("player.transitionNameLabel");
     }
 
-    // Duration and iteration count
+    // Duration, delay and iteration count.
     titleHTML += "<span class='meta-data'>";
     titleHTML += L10N.getStr("player.animationDurationLabel");
     titleHTML += "<strong>" + L10N.getFormatStr("player.timeLabel",
       this.getFormattedTime(state.duration)) + "</strong>";
+    if (state.delay) {
+      titleHTML += L10N.getStr("player.animationDelayLabel");
+      titleHTML += "<strong>" + L10N.getFormatStr("player.timeLabel",
+        this.getFormattedTime(state.delay)) + "</strong>";
+    }
     titleHTML += L10N.getStr("player.animationIterationCountLabel");
     let count = state.iterationCount || L10N.getStr("player.infiniteIterationCount");
     titleHTML += "<strong>" + count + "</strong>";
     titleHTML += "</span>"
 
     titleEl.innerHTML = titleHTML;
 
-    // Timeline widget
+    // Timeline widget.
     let timelineEl = createNode({
       parent: this.el,
       attributes: {
         "class": "timeline"
       }
     });
 
-    // Playback control buttons container
+    // Playback control buttons container.
     let playbackControlsEl = createNode({
       parent: timelineEl,
       attributes: {
         "class": "playback-controls"
       }
     });
 
     // Control buttons (when currentTime becomes settable, rewind and
@@ -236,66 +241,67 @@ PlayerWidget.prototype = {
     this.playPauseBtnEl = createNode({
       parent: playbackControlsEl,
       nodeType: "button",
       attributes: {
         "class": "toggle devtools-button"
       }
     });
 
-    // Sliders container
+    // Sliders container.
     let slidersContainerEl = createNode({
       parent: timelineEl,
       attributes: {
         "class": "sliders-container",
       }
     });
 
-    let max = state.duration; // Infinite iterations
+    let max = state.duration; // Infinite iterations.
     if (state.iterationCount) {
-      // Finite iterations
+      // Finite iterations.
       max = state.iterationCount * state.duration;
     }
 
     // For now, keyframes aren't exposed by the actor. So the only range <input>
     // displayed in the container is the currentTime. When keyframes are
     // available, one input per keyframe can be added here.
     this.currentTimeEl = createNode({
       nodeType: "input",
       parent: slidersContainerEl,
       attributes: {
         "type": "range",
         "class": "current-time",
         "min": "0",
         "max": max,
         "step": "10",
+        "value": "0",
         // The currentTime isn't settable yet, so disable the timeline slider
         "disabled": "true"
       }
     });
 
     // Time display
     this.timeDisplayEl = createNode({
       parent: timelineEl,
       attributes: {
         "class": "time-display"
       }
     });
     this.timeDisplayEl.textContent = L10N.getFormatStr("player.timeLabel",
-      this.getFormattedTime());
+      this.getFormattedTime(0));
 
     this.containerEl.appendChild(this.el);
   },
 
   /**
    * Format time as a string.
    * @param {Number} time Defaults to the player's currentTime.
    * @return {String} The formatted time, e.g. "10.55"
    */
-  getFormattedTime: function(time=this.player.state.currentTime) {
+  getFormattedTime: function(time) {
     let str = time/1000 + "";
     str = str.split(".");
     if (str.length === 1) {
       return str[0] + ".00";
     } else {
       return str[0] + "." + str[1].substring(0, 2);
     }
   },
@@ -385,16 +391,22 @@ PlayerWidget.prototype = {
   },
 
   /**
    * Display the time in the timeDisplayEl and in the currentTimeEl slider.
    */
   displayTime: function(time) {
     let state = this.player.state;
 
+    // If the animation is delayed, don't start displaying the time until the
+    // delay has passed.
+    if (state.delay) {
+      time = Math.max(0, time - state.delay);
+    }
+
     this.timeDisplayEl.textContent = L10N.getFormatStr("player.timeLabel",
       this.getFormattedTime(time));
     if (!state.iterationCount && time !== state.duration) {
       this.currentTimeEl.value = time % state.duration;
     } else {
       this.currentTimeEl.value = time;
     }
   },
diff --git a/browser/devtools/animationinspector/test/browser.ini b/browser/devtools/animationinspector/test/browser.ini
--- a/browser/devtools/animationinspector/test/browser.ini
+++ b/browser/devtools/animationinspector/test/browser.ini
@@ -6,13 +6,16 @@ support-files =
   head.js
 
 [browser_animation_empty_on_invalid_nodes.js]
 [browser_animation_panel_exists.js]
 [browser_animation_participate_in_inspector_update.js]
 [browser_animation_play_pause_button.js]
 [browser_animation_playerFronts_are_refreshed.js]
 [browser_animation_playerWidgets_destroy.js]
+[browser_animation_playerWidgets_meta_data.js]
 [browser_animation_refresh_when_active.js]
 [browser_animation_same_nb_of_playerWidgets_and_playerFronts.js]
 [browser_animation_shows_player_on_valid_node.js]
+[browser_animation_time_formatting.js]
 [browser_animation_timeline_animates.js]
-[browser_animation_ui_updates_when_animation_changes.js]
+[browser_animation_timeline_waits_for_delay.js]
+[browser_animation_ui_updates_when_animation_changes.js]
\ No newline at end of file
diff --git a/browser/devtools/animationinspector/test/browser_animation_playerWidgets_meta_data.js b/browser/devtools/animationinspector/test/browser_animation_playerWidgets_meta_data.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/animationinspector/test/browser_animation_playerWidgets_meta_data.js
@@ -0,0 +1,49 @@
+/* vim: set ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+ http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Test that player widgets show the right player meta-data (name, duration,
+// iteration count, delay).
+
+add_task(function*() {
+  yield addTab(TEST_URL_ROOT + "doc_simple_animation.html");
+  let {inspector, panel} = yield openAnimationInspector();
+
+  info("Select the simple animated node");
+  yield selectNode(".animated", inspector);
+
+  let titleEl = panel.playerWidgets[0].el.querySelector(".animation-title");
+  ok(titleEl,
+    "The player widget has a title element, where meta-data should be displayed");
+
+  let nameEl = titleEl.querySelector("strong");
+  ok(nameEl, "The first <strong> tag was retrieved, it should contain the name");
+  is(nameEl.textContent, "simple-animation", "The animation name is correct");
+
+  let metaDataEl = titleEl.querySelector(".meta-data");
+  ok(metaDataEl, "The meta-data element exists");
+
+  let metaDataEls = metaDataEl.querySelectorAll("strong");
+  is(metaDataEls.length, 2, "2 meta-data elements were found");
+  is(metaDataEls[0].textContent, "2.00s",
+    "The first meta-data is the duration, and is correct");
+
+  info("Select the node with the delayed animation");
+  yield selectNode(".delayed", inspector);
+
+  titleEl = panel.playerWidgets[0].el.querySelector(".animation-title");
+  nameEl = titleEl.querySelector("strong");
+  is(nameEl.textContent, "simple-animation", "The animation name is correct");
+
+  metaDataEls = titleEl.querySelectorAll(".meta-data strong");
+  is(metaDataEls.length, 3,
+    "3 meta-data elements were found for the delayed animation");
+  is(metaDataEls[0].textContent, "3.00s",
+    "The first meta-data is the duration, and is correct");
+  is(metaDataEls[1].textContent, "60.00s",
+    "The second meta-data is the delay, and is correct");
+  is(metaDataEls[2].textContent, "10",
+    "The third meta-data is the iteration count, and is correct");
+});
diff --git a/browser/devtools/animationinspector/test/browser_animation_time_formatting.js b/browser/devtools/animationinspector/test/browser_animation_time_formatting.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/animationinspector/test/browser_animation_time_formatting.js
@@ -0,0 +1,19 @@
+/* vim: set ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+ http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Test the time formatting helper function.
+
+add_task(function*() {
+  yield addTab(TEST_URL_ROOT + "doc_simple_animation.html");
+  let {inspector, panel} = yield openAnimationInspector();
+  yield selectNode(".animated", inspector);
+  let widget = panel.playerWidgets[0];
+
+  is(widget.getFormattedTime(0), "0.00");
+  is(widget.getFormattedTime(1000), "1.00");
+  is(widget.getFormattedTime(5.123765827635872635), "0.00");
+  is(widget.getFormattedTime(5124), "5.12");
+});
diff --git a/browser/devtools/animationinspector/test/browser_animation_timeline_waits_for_delay.js b/browser/devtools/animationinspector/test/browser_animation_timeline_waits_for_delay.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/animationinspector/test/browser_animation_timeline_waits_for_delay.js
@@ -0,0 +1,24 @@
+/* vim: set ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+ http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Test that the currentTime timeline doesn't move if the animation is currently
+// waiting for an animation-delay.
+
+add_task(function*() {
+  yield addTab(TEST_URL_ROOT + "doc_simple_animation.html");
+  let {inspector, panel} = yield openAnimationInspector();
+
+  info("Select the delayed animation node");
+  yield selectNode(".delayed", inspector);
+
+  let widget = panel.playerWidgets[0];
+
+  let timeline = widget.currentTimeEl;
+  is(timeline.value, 0, "The timeline is at 0 since the animation hasn't started");
+
+  let timeLabel = widget.timeDisplayEl;
+  is(timeLabel.textContent, "0.00s", "The current time is 0");
+});
diff --git a/browser/devtools/animationinspector/test/doc_simple_animation.html b/browser/devtools/animationinspector/test/doc_simple_animation.html
--- a/browser/devtools/animationinspector/test/doc_simple_animation.html
+++ b/browser/devtools/animationinspector/test/doc_simple_animation.html
@@ -1,42 +1,50 @@
 <!DOCTYPE html>
 <html lang="en">
 <head>
   <meta charset="UTF-8">
   <style>
     .ball {
-      width: 100px;
-      height: 100px;
+      width: 80px;
+      height: 80px;
       border-radius: 50%;
       background: #f06;
 
       position: absolute;
     }
 
     .still {
-      top: 50px;
-      left: 50px;
+      top: 0;
+      left: 10px;
     }
 
     .animated {
-      top: 200px;
-      left: 200px;
+      top: 100px;
+      left: 10px;
 
       animation: simple-animation 2s infinite alternate;
     }
 
     .multi {
-      top: 100px;
-      left: 400px;
+      top: 200px;
+      left: 10px;
 
       animation: simple-animation 2s infinite alternate,
                  other-animation 5s infinite alternate;
     }
 
+    .delayed {
+      top: 300px;
+      left: 10px;
+      background: rebeccapurple;
+
+      animation: simple-animation 3s 60s 10;
+    }
+
     @keyframes simple-animation {
       100% {
         transform: translateX(300px);
       }
     }
 
     @keyframes other-animation {
       100% {
@@ -45,10 +53,11 @@
     }
   </style>
 </head>
 <body>
   <!-- Comment node -->
   <div class="ball still"></div>
   <div class="ball animated"></div>
   <div class="ball multi"></div>
+  <div class="ball delayed"></div>
 </body>
 </html>
diff --git a/browser/locales/en-US/chrome/browser/devtools/animationinspector.properties b/browser/locales/en-US/chrome/browser/devtools/animationinspector.properties
--- a/browser/locales/en-US/chrome/browser/devtools/animationinspector.properties
+++ b/browser/locales/en-US/chrome/browser/devtools/animationinspector.properties
@@ -21,16 +21,21 @@ player.animationNameLabel=Animation:
 # transition
 player.transitionNameLabel=Transition
 
 # LOCALIZATION NOTE (player.animationDurationLabel):
 # This string is displayed in each animation player widget. It is the label
 # displayed before the animation duration.
 player.animationDurationLabel=Duration:
 
+# LOCALIZATION NOTE (player.animationDelayLabel):
+# This string is displayed in each animation player widget. It is the label
+# displayed before the animation delay.
+player.animationDelayLabel=Delay:
+
 # LOCALIZATION NOTE (player.animationIterationCountLabel):
 # This string is displayed in each animation player widget. It is the label
 # displayed before the number of times the animation is set to repeat.
 player.animationIterationCountLabel=Repeats:
 
 # LOCALIZATION NOTE (player.infiniteIterationCount):
 # In case the animation repeats infinitely, this string is displayed next to the
 # player.animationIterationCountLabel string, instead of a number.
