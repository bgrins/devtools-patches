# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  db1b6b8ed0be3828e8782064e2801b38d8afd85a
shared-head.js

diff --git a/browser/devtools/fontinspector/test/head.js b/browser/devtools/fontinspector/test/head.js
--- a/browser/devtools/fontinspector/test/head.js
+++ b/browser/devtools/fontinspector/test/head.js
@@ -1,62 +1,19 @@
  /* vim: set ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
-const Cu = Components.utils;
-const Ci = Components.interfaces;
-const Cc = Components.classes;
-
-const { Promise: promise } = Cu.import("resource://gre/modules/Promise.jsm", {});
-
-let {devtools} = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
-let TargetFactory = devtools.TargetFactory;
-const DevToolsUtils = devtools.require("devtools/toolkit/DevToolsUtils");
+// shared-head.js handles imports, constants, and utility functions
+Services.scriptloader.loadSubScript("chrome://mochitests/content/browser/browser/devtools/framework/test/shared-head.js", this);
 
 const BASE_URI = "http://mochi.test:8888/browser/browser/devtools/fontinspector/test/"
 
-// All test are asynchronous
-waitForExplicitFinish();
-
-DevToolsUtils.testing = true;
-SimpleTest.registerCleanupFunction(() => {
-  DevToolsUtils.testing = false;
-});
-
-registerCleanupFunction(function*() {
-  let target = TargetFactory.forTab(gBrowser.selectedTab);
-  yield gDevTools.closeToolbox(target);
-
-  while (gBrowser.tabs.length > 1) {
-    gBrowser.removeCurrentTab();
-  }
-});
-
-/**
- * Add a new test tab in the browser and load the given url.
- * @param {String} url The url to be loaded in the new tab
- * @return a promise that resolves to the tab object when the url is loaded
- */
-function loadTab(url) {
-  let deferred = promise.defer();
-
-  let tab = gBrowser.selectedTab = gBrowser.addTab(url);
-  let browser = gBrowser.getBrowserForTab(tab);
-
-  browser.addEventListener("load", function onLoad() {
-    browser.removeEventListener("load", onLoad, true);
-    deferred.resolve({tab: tab, browser: browser});
-  }, true);
-
-  return deferred.promise;
-}
-
 /**
  * Open the toolbox, with the inspector tool visible.
  * @param {Function} cb Optional callback, if you don't want to use the returned
  * promise
  * @return a promise that resolves when the inspector is ready
  */
 let openInspector = Task.async(function*(cb) {
   info("Opening the inspector");
@@ -109,17 +66,17 @@ let openInspector = Task.async(function*
  *  {
  *    toolbox,
  *    inspector,
  *    fontInspector
  *  }
  */
 let openFontInspectorForURL = Task.async(function* (url) {
   info("Opening tab " + url);
-  yield loadTab(url);
+  yield addTab(url);
 
   let { toolbox, inspector } = yield openInspector();
 
   /**
    * Call selectNode to trigger font-inspector update so that we don't timeout
    * if following conditions hold
    * a) the initial 'fontinspector-updated' was emitted while we were waiting
    *    for openInspector to resolve
diff --git a/browser/devtools/framework/test/shared-head.js b/browser/devtools/framework/test/shared-head.js
--- a/browser/devtools/framework/test/shared-head.js
+++ b/browser/devtools/framework/test/shared-head.js
@@ -1,16 +1,20 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 // This shared-head.js file is used for multiple directories in devtools.
+const {classes: Cc, interfaces: Ci, utils: Cu, results: Cr} = Components;
+const {Services} = Cu.import("resource://gre/modules/Services.jsm", {});
+const {gDevTools} = Cu.import("resource:///modules/devtools/gDevTools.jsm", {});
 const {console} = Cu.import("resource://gre/modules/devtools/Console.jsm", {});
 const {Promise: promise} = Cu.import("resource://gre/modules/Promise.jsm", {});
 const {devtools} = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
+const {require} = devtools;
 const {ScratchpadManager} = Cu.import("resource:///modules/devtools/scratchpad-manager.jsm", {});
 const {TargetFactory} = devtools;
 const DevToolsUtils = devtools.require("devtools/toolkit/DevToolsUtils");
 
 const TEST_DIR = gTestPath.substr(0, gTestPath.lastIndexOf("/"));
 const CHROME_URL_ROOT = TEST_DIR + "/";
 const URL_ROOT = CHROME_URL_ROOT.replace("chrome://mochitests/content/", "http://example.com/");
 
@@ -33,39 +37,40 @@ function getFrameScript() {
 DevToolsUtils.testing = true;
 registerCleanupFunction(() => {
   DevToolsUtils.testing = false;
   Services.prefs.clearUserPref("devtools.dump.emit");
   Services.prefs.clearUserPref("devtools.toolbox.host");
   Services.prefs.clearUserPref("devtools.toolbox.previousHost");
 });
 
-registerCleanupFunction(function cleanup() {
+registerCleanupFunction(function* cleanup() {
+  let target = TargetFactory.forTab(gBrowser.selectedTab);
+  yield gDevTools.closeToolbox(target);
+
   while (gBrowser.tabs.length > 1) {
     gBrowser.removeCurrentTab();
   }
 });
 
-
 /**
  * Add a new test tab in the browser and load the given url.
  * @param {String} url The url to be loaded in the new tab
  * @return a promise that resolves to the tab object when the url is loaded
  */
 function addTab(url) {
   info("Adding a new tab with URL: '" + url + "'");
   let def = promise.defer();
 
-  let tab = gBrowser.selectedTab = gBrowser.addTab();
+  let tab = gBrowser.selectedTab = gBrowser.addTab(url);
   gBrowser.selectedBrowser.addEventListener("load", function onload() {
     gBrowser.selectedBrowser.removeEventListener("load", onload, true);
     info("URL '" + url + "' loading complete");
     def.resolve(tab);
   }, true);
-  content.location = url;
 
   return def.promise;
 }
 
 function synthesizeKeyFromKeyTag(aKeyId, document) {
   let key = document.getElementById(aKeyId);
   isnot(key, null, "Successfully retrieved the <key> node");
 
