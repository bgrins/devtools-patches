# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1554469598 25200
#      Fri Apr 05 06:06:38 2019 -0700
# Node ID 6afff3e678479ea74857acef311dd74453e81658
# Parent  508226e06989d72458c095b6dac510a9f95b80c4
Bug 1540285 - Add wpt support for addtest

# web-platform-tests (wpt-specific arguments previously on wpt-create
# can be passed in if you pass the wpt subcommand).
./mach addtest testing/web-platform/tests/accelerometer/test.html
./mach addtest wpt testing/web-platform/tests/accelerometer/test.html

Differential Revision: https://phabricator.services.mozilla.com/D26297

diff --git a/testing/addtest.py b/testing/addtest.py
--- a/testing/addtest.py
+++ b/testing/addtest.py
@@ -74,16 +74,134 @@ class MochitestCreator():
 
         if not os.path.isfile(manifest_file):
             print('Could not open manifest file {}'.format(manifest_file))
             return
 
         write_to_ini_file(manifest_file, filename)
 
 
+class WebPlatformTestsCreator():
+    template_prefix = """<!doctype html>
+%(documentElement)s<meta charset=utf-8>
+"""
+    template_long_timeout = "<meta name=timeout content=long>\n"
+
+    template_body_th = """<title></title>
+<script src=/resources/testharness.js></script>
+<script src=/resources/testharnessreport.js></script>
+<script>
+
+</script>
+"""
+
+    template_body_reftest = """<title></title>
+<link rel=%(match)s href=%(ref)s>
+"""
+
+    template_body_reftest_wait = """<script src="/common/reftest-wait.js"></script>
+"""
+
+    def rel_path(self, path):
+        if path is None:
+            return
+
+        abs_path = os.path.normpath(os.path.abspath(path))
+        return os.path.relpath(abs_path, self.topsrcdir)
+
+    def rel_url(self, rel_path):
+        upstream_path = os.path.join("testing", "web-platform", "tests")
+        local_path = os.path.join("testing", "web-platform", "mozilla", "tests")
+
+        if rel_path.startswith(upstream_path):
+            return rel_path[len(upstream_path):].replace(os.path.sep, "/")
+        elif rel_path.startswith(local_path):
+            return "/_mozilla" + rel_path[len(local_path):].replace(os.path.sep, "/")
+        else:
+            return None
+
+    def add_test(self, path, no_editor, editor, long_timeout, reftest,
+                 ref, mismatch, wait, overwrite):
+        import subprocess
+
+        ref_path = self.rel_path(ref)
+
+        if ref:
+            reftest = True
+
+        if self.rel_url(path) is None:
+            print("""Test path %s is not in wpt directories:
+testing/web-platform/tests for tests that may be shared
+testing/web-platform/mozilla/tests for Gecko-only tests""" % path)
+            return 1
+
+        if ref_path and self.rel_url(ref_path) is None:
+            print("""Reference path %s is not in wpt directories:
+testing/web-platform/tests for tests that may be shared
+            testing/web-platform/mozilla/tests for Gecko-only tests""" % ref_path)
+            return 1
+
+        if os.path.exists(path) and not overwrite:
+            print("Test path already exists, pass --overwrite to replace")
+            return 1
+
+        if mismatch and not reftest:
+            print("--mismatch only makes sense for a reftest")
+            return 1
+
+        if wait and not reftest:
+            print("--wait only makes sense for a reftest")
+            return 1
+
+        args = {"documentElement": "<html class=reftest-wait>\n" if wait else ""}
+        template = self.template_prefix % args
+        if long_timeout:
+            template += self.template_long_timeout
+
+        if reftest:
+            args = {"match": "match" if not mismatch else "mismatch",
+                    "ref": self.rel_url(ref_path) if ref else '""'}
+            template += self.template_body_reftest % args
+            if wait:
+                template += self.template_body_reftest_wait
+        else:
+            template += self.template_body_th
+        try:
+            os.makedirs(os.path.dirname(path))
+        except OSError:
+            pass
+        with open(path, "w") as f:
+            f.write(template)
+
+        ref_path = ref
+        if ref_path and not os.path.exists(ref_path):
+            with open(ref_path, "w") as f:
+                f.write(self.template_prefix % {"documentElement": ""})
+
+        if no_editor:
+            editor = None
+        elif editor:
+            editor = editor
+        elif "VISUAL" in os.environ:
+            editor = os.environ["VISUAL"]
+        elif "EDITOR" in os.environ:
+            editor = os.environ["EDITOR"]
+        else:
+            editor = None
+
+        proc = None
+        if editor:
+            if ref_path:
+                path = "%s %s" % (path, ref_path)
+            proc = subprocess.Popen("%s %s" % (editor, path), shell=True)
+
+        if proc:
+            proc.wait()
+
+
 def write_to_ini_file(manifest_file, filename):
     # Insert a new test in the right place within a given manifest file
     manifest = manifestparser.TestManifest(manifests=[manifest_file])
     insert_before = None
     for test in manifest.tests:
         if (test.get('name') == filename):
             print("{} is already in the manifest.".format(filename))
             return
diff --git a/testing/mach_commands.py b/testing/mach_commands.py
--- a/testing/mach_commands.py
+++ b/testing/mach_commands.py
@@ -24,16 +24,17 @@ from mozbuild.base import (
     MachCommandBase,
     MachCommandConditions as conditions,
 )
 from moztest.resolve import TEST_SUITES
 
 from addtest import (
     MochitestCreator,
     XpcshellCreator,
+    WebPlatformTestsCreator,
 )
 
 UNKNOWN_TEST = '''
 I was unable to find tests from the given argument(s).
 
 You should specify a test directory, filename, test suite name, or
 abbreviation. If no arguments are given, there must be local file
 changes and corresponding IMPACTED_TESTS annotations in moz.build
@@ -84,27 +85,27 @@ def get_test_parser():
                         help="Extra arguments to pass to the underlying test command(s). "
                              "If an underlying command doesn't recognize the argument, it "
                              "will fail.")
     add_logging_group(parser)
     return parser
 
 
 ADD_TEST_SUPPORTED_SUITES = ['mochitest-chrome', 'mochitest-plain', 'mochitest-browser',
-                             'xpcshell']
+                             'wpt', 'xpcshell']
 ADD_TEST_SUPPORTED_DOCS = ['js', 'html', 'xhtml', 'xul']
 
 
 @CommandProvider
 class AddTest(MachCommandBase):
     @Command('addtest', category='testing',
              description='Generate tests based on templates')
     @CommandArgument('--suite',
                      choices=ADD_TEST_SUPPORTED_SUITES,
-                     help='suite for the test (currently only mochitests and xpcshell '
+                     help='suite for the test (currently only mochitests, xpcshell, and wpt '
                           'are supported). If you pass a `test` argument this will be determined'
                           'based on the filename and the folder it is in')
     @CommandArgument('-o', '--overwrite',
                      action='store_true',
                      help='Overwrite an existing file if it exists.')
     @CommandArgument('--doc',
                      choices=ADD_TEST_SUPPORTED_DOCS,
                      help='Document type for the test (if applicable).'
@@ -142,16 +143,20 @@ class AddTest(MachCommandBase):
                   .format(ADD_TEST_SUPPORTED_SUITES))
             return 1
 
         if doc not in ADD_TEST_SUPPORTED_DOCS:
             print("Error: invalid `doc`. Either pass in a test with a valid extension"
                   "({}) or pass in the `doc` argument".format(ADD_TEST_SUPPORTED_DOCS))
             return 1
 
+        # These are handled in a special way (see `./mach addtest wpt --help`).
+        if suite == "wpt":
+            return self.addtest_wpt(test, overwrite)
+
         creator = None
         if suite == "xpcshell":
             creator = XpcshellCreator()
         elif (suite == "mochitest-browser" or
               suite == "mochitest-chrome" or
               suite == "mochitest-plain"):
             creator = MochitestCreator()
         else:
@@ -185,32 +190,67 @@ class AddTest(MachCommandBase):
         guessed_suite = None
         dir = os.path.dirname(abs_test)
         filename = os.path.basename(abs_test)
 
         has_browser_ini = os.path.isfile(os.path.join(dir, "browser.ini"))
         has_chrome_ini = os.path.isfile(os.path.join(dir, "chrome.ini"))
         has_plain_ini = os.path.isfile(os.path.join(dir, "mochitest.ini"))
         has_xpcshell_ini = os.path.isfile(os.path.join(dir, "xpcshell.ini"))
+        in_wpt_folder = abs_test.startswith(
+            os.path.abspath(os.path.join("testing", "web-platform")))
 
-        if filename.startswith("test_") and has_xpcshell_ini:
+        if in_wpt_folder:
+            guessed_suite = "wpt"
+        elif filename.startswith("test_") and has_xpcshell_ini:
             guessed_suite = "xpcshell"
         else:
             if filename.startswith("browser_") and has_browser_ini:
                 guessed_suite = "mochitest-browser"
             elif filename.startswith("test_"):
                 if has_chrome_ini and has_plain_ini:
                     err = ("Error: directory contains both a chrome.ini and mochitest.ini. "
                            "Please set --suite=mochitest-chrome or --suite=mochitest-plain.")
                 elif has_chrome_ini:
                     guessed_suite = "mochitest-chrome"
                 elif has_plain_ini:
                     guessed_suite = "mochitest-plain"
         return guessed_suite, err
 
+    @SubCommand('addtest',
+                'wpt',
+                description='Create a new web-platform test.')
+    @CommandArgument('test',
+                     nargs='?',
+                     help=('Test to create.'))
+    @CommandArgument("--no-editor", action="store_true",
+                     help="Don't try to open the test in an editor")
+    @CommandArgument("-e", "--editor", action="store", help="Editor to use")
+    @CommandArgument("--long-timeout", action="store_true",
+                     help="Test should be given a long timeout "
+                          "(typically 60s rather than 10s, but varies depending on environment)")
+    @CommandArgument("-r", "--reftest", action="store_true",
+                     help="Create a reftest rather than a testharness (js) test")
+    @CommandArgument("-m", "--reference", dest="ref", help="Path to the reference file")
+    @CommandArgument("--mismatch", action="store_true",
+                     help="Create a mismatch reftest")
+    @CommandArgument("--wait", action="store_true",
+                     help="Create a reftest that waits until takeScreenshot() is called")
+    @CommandArgument('-o', '--overwrite',
+                     action='store_true',
+                     help='Overwrite an existing file if it exists.')
+    def addtest_wpt(self, test, overwrite=False, no_editor=False, editor=False,
+                    long_timeout=False, reftest=False, ref=None, mismatch=False, wait=False):
+        if not test:
+            print("Error: must specify a test path")
+            return 1
+        wpt_creator = WebPlatformTestsCreator()
+        return wpt_creator.add_test(
+            test, no_editor, editor, long_timeout, reftest, ref, mismatch, wait, overwrite)
+
 
 class Test(MachCommandBase):
     @Command('test', category='testing',
              description='Run tests (detects the kind of test and runs it).',
              parser=get_test_parser)
     def test(self, what, extra_args, **log_args):
         """Run tests from names or paths.
 
diff --git a/testing/web-platform/mach_commands.py b/testing/web-platform/mach_commands.py
--- a/testing/web-platform/mach_commands.py
+++ b/testing/web-platform/mach_commands.py
@@ -191,133 +191,16 @@ class WebPlatformTestsUpdater(MozbuildOb
             update.run_update(logger, **kwargs)
         except Exception:
             import pdb
             import traceback
             traceback.print_exc()
 #            pdb.post_mortem()
 
 
-class WebPlatformTestsCreator(MozbuildObject):
-    template_prefix = """<!doctype html>
-%(documentElement)s<meta charset=utf-8>
-"""
-    template_long_timeout = "<meta name=timeout content=long>\n"
-
-    template_body_th = """<title></title>
-<script src=/resources/testharness.js></script>
-<script src=/resources/testharnessreport.js></script>
-<script>
-
-</script>
-"""
-
-    template_body_reftest = """<title></title>
-<link rel=%(match)s href=%(ref)s>
-"""
-
-    template_body_reftest_wait = """<script src="/common/reftest-wait.js"></script>
-"""
-
-    def rel_path(self, path):
-        if path is None:
-            return
-
-        abs_path = os.path.normpath(os.path.abspath(path))
-        return os.path.relpath(abs_path, self.topsrcdir)
-
-    def rel_url(self, rel_path):
-        upstream_path = os.path.join("testing", "web-platform", "tests")
-        local_path = os.path.join("testing", "web-platform", "mozilla", "tests")
-
-        if rel_path.startswith(upstream_path):
-            return rel_path[len(upstream_path):].replace(os.path.sep, "/")
-        elif rel_path.startswith(local_path):
-            return "/_mozilla" + rel_path[len(local_path):].replace(os.path.sep, "/")
-        else:
-            return None
-
-    def run_create(self, context, **kwargs):
-        import subprocess
-
-        path = self.rel_path(kwargs["path"])
-        ref_path = self.rel_path(kwargs["ref"])
-
-        if kwargs["ref"]:
-            kwargs["reftest"] = True
-
-        if self.rel_url(path) is None:
-            print("""Test path %s is not in wpt directories:
-testing/web-platform/tests for tests that may be shared
-testing/web-platform/mozilla/tests for Gecko-only tests""" % path)
-            return 1
-
-        if ref_path and self.rel_url(ref_path) is None:
-            print("""Reference path %s is not in wpt directories:
-testing/web-platform/tests for tests that may be shared
-            testing/web-platform/mozilla/tests for Gecko-only tests""" % ref_path)
-            return 1
-
-        if os.path.exists(path) and not kwargs["overwrite"]:
-            print("Test path already exists, pass --overwrite to replace")
-            return 1
-
-        if kwargs["mismatch"] and not kwargs["reftest"]:
-            print("--mismatch only makes sense for a reftest")
-            return 1
-
-        if kwargs["wait"] and not kwargs["reftest"]:
-            print("--wait only makes sense for a reftest")
-            return 1
-
-        args = {"documentElement": "<html class=reftest-wait>\n" if kwargs["wait"] else ""}
-        template = self.template_prefix % args
-        if kwargs["long_timeout"]:
-            template += self.template_long_timeout
-
-        if kwargs["reftest"]:
-            args = {"match": "match" if not kwargs["mismatch"] else "mismatch",
-                    "ref": self.rel_url(ref_path) if kwargs["ref"] else '""'}
-            template += self.template_body_reftest % args
-            if kwargs["wait"]:
-                template += self.template_body_reftest_wait
-        else:
-            template += self.template_body_th
-        try:
-            os.makedirs(os.path.dirname(path))
-        except OSError:
-            pass
-        with open(path, "w") as f:
-            f.write(template)
-
-        ref_path = kwargs["ref"]
-        if ref_path and not os.path.exists(ref_path):
-            with open(ref_path, "w") as f:
-                f.write(self.template_prefix % {"documentElement": ""})
-
-        if kwargs["no_editor"]:
-            editor = None
-        elif kwargs["editor"]:
-            editor = kwargs["editor"]
-        elif "VISUAL" in os.environ:
-            editor = os.environ["VISUAL"]
-        elif "EDITOR" in os.environ:
-            editor = os.environ["EDITOR"]
-        else:
-            editor = None
-
-        proc = None
-        if editor:
-            if ref_path:
-                path = "%s %s" % (path, ref_path)
-            proc = subprocess.Popen("%s %s" % (editor, path), shell=True)
-
-        if proc:
-            proc.wait()
-
 
 def create_parser_update():
     from update import updatecommandline
     return updatecommandline.create_parser()
 
 
 def create_parser_create():
     import argparse
@@ -401,32 +284,16 @@ class MachCommands(MachCommandBase):
 
     @Command("wpt-update",
              category="testing",
              description="Update web-platform-test metadata.",
              parser=create_parser_update)
     def update_wpt(self, **params):
         return self.update_web_platform_tests(**params)
 
-    @Command("web-platform-tests-create",
-             category="testing",
-             description="Create a new web-platform test.",
-             parser=create_parser_create)
-    def create_web_platform_test(self, **params):
-        self.setup()
-        wpt_creator = self._spawn(WebPlatformTestsCreator)
-        wpt_creator.run_create(self._mach_context, **params)
-
-    @Command("wpt-create",
-             category="testing",
-             description="Create a new web-platform test.",
-             parser=create_parser_create)
-    def create_wpt(self, **params):
-        return self.create_web_platform_test(**params)
-
     @Command("wpt-manifest-update",
              category="testing",
              description="Update web-platform-test manifests.",
              parser=create_parser_manifest_update)
     def wpt_manifest_update(self, **params):
         self.setup()
         wpt_setup = self._spawn(WebPlatformTestsRunnerSetup)
         wpt_runner = WebPlatformTestsRunner(wpt_setup)
