# HG changeset patch
# User Florent Fayolle <fayolle-florent@orange.fr>
# Parent  0f1d42a6745a82ef4118c23b2913637e6f92c26c
Bug 1050691 - Click on a function on the console should go to the debugger

diff --git a/browser/devtools/shared/widgets/VariablesView.jsm b/browser/devtools/shared/widgets/VariablesView.jsm
--- a/browser/devtools/shared/widgets/VariablesView.jsm
+++ b/browser/devtools/shared/widgets/VariablesView.jsm
@@ -1603,17 +1603,17 @@ Scope.prototype = {
 
   /**
    * Sort in ascending order
    * This only needs to compare non-numbers since it is dealing with an array
    * which numeric-based indices are placed in order.
    *
    * @param string a
    * @param string b
-   * @return number 
+   * @return number
    *         -1 if a is less than b, 0 if no change in order, +1 if a is greater than 0
    */
   _naturalSort: function(a,b) {
     if (isNaN(parseFloat(a)) && isNaN(parseFloat(b))) {
       return a < b ? -1 : 1;
     }
    },
 
diff --git a/browser/devtools/webconsole/console-output.js b/browser/devtools/webconsole/console-output.js
--- a/browser/devtools/webconsole/console-output.js
+++ b/browser/devtools/webconsole/console-output.js
@@ -337,16 +337,20 @@ ConsoleOutput.prototype = {
    * Open an URL in a new tab.
    * @see WebConsole.openLink() in hudservice.js
    */
   openLink: function()
   {
     this.owner.owner.openLink.apply(this.owner.owner, arguments);
   },
 
+  openLocationInDebugger: function ({url, line}) {
+    return this.owner.owner.viewSourceInDebugger(url, line);
+  },
+
   /**
    * Open the variables view to inspect an object actor.
    * @see JSTerm.openVariablesView() in webconsole.js
    */
   openVariablesView: function()
   {
     this.owner.jsterm.openVariablesView.apply(this.owner.jsterm, arguments);
   },
@@ -2666,16 +2670,27 @@ Widgets.ObjectRenderers.add({
         this._text(", ");
       }
       this.element.appendChild(this.el("span.cm-def", param));
       shown++;
     }
 
     this._text(")");
   },
+
+  _onClick: function () {
+    if (!this.objectActor.location) {
+      // TODO This case happens when we have received the packet but not
+      // opened the debugger yet. In this case, we should force the debugger
+      // to load and request the source location of the function again.
+      console.error('Open the debugger and type again your function, sorry :(');
+      return;
+    }
+    this.output.openLocationInDebugger(this.objectActor.location);
+  }
 }); // Widgets.ObjectRenderers.byClass.Function
 
 /**
  * The widget used for displaying ArrayLike objects.
  */
 Widgets.ObjectRenderers.add({
   byKind: "ArrayLike",
 
diff --git a/toolkit/devtools/server/actors/script.js b/toolkit/devtools/server/actors/script.js
--- a/toolkit/devtools/server/actors/script.js
+++ b/toolkit/devtools/server/actors/script.js
@@ -3843,16 +3843,27 @@ DebuggerServer.ObjectActorPreviewers = {
       dumpn(e);
     }
 
     if (userDisplayName && typeof userDisplayName.value == "string" &&
         userDisplayName.value) {
       aGrip.userDisplayName = threadActor.createValueGrip(userDisplayName.value);
     }
 
+    let dbgGlobal = threadActor.globalDebugObject;
+    if (dbgGlobal) {
+      let script = dbgGlobal.makeDebuggeeValue(obj.unsafeDereference()).script;
+      if (script) {
+        aGrip.location = {
+          url: script.url,
+          line: script.startLine
+        };
+      }
+    }
+
     return true;
   }],
 
   RegExp: [function({obj, threadActor}, aGrip) {
     // Avoid having any special preview for the RegExp.prototype itself.
     if (!obj.proto || obj.proto.class != "RegExp") {
       return false;
     }
diff --git a/toolkit/devtools/server/actors/webconsole.js b/toolkit/devtools/server/actors/webconsole.js
--- a/toolkit/devtools/server/actors/webconsole.js
+++ b/toolkit/devtools/server/actors/webconsole.js
@@ -297,16 +297,20 @@ WebConsoleActor.prototype =
    * The Web Console Commands names cache.
    * @private
    * @type array
    */
   _webConsoleCommandsCache: null,
 
   actorPrefix: "console",
 
+  get globalDebugObject() {
+    return this.parentActor.threadActor.globalDebugObject;
+  },
+
   grip: function WCA_grip()
   {
     return { actor: this.actorID };
   },
 
   hasNativeConsoleAPI: function WCA_hasNativeConsoleAPI(aWindow) {
     let isNative = false;
     try {
