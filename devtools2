# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  a46e0f1e5f17ba6f7f41e03e832af983c63dc91c
Bug 1150215 - Add devtools test for talos

diff --git a/talos/page_load_test/devtools/addon/chrome.manifest b/talos/page_load_test/devtools/addon/chrome.manifest
new file mode 100644
--- /dev/null
+++ b/talos/page_load_test/devtools/addon/chrome.manifest
@@ -0,0 +1,2 @@
+content devtools content/
+overlay chrome://browser/content/browser.xul chrome://devtools/content/devtools.overlay.xul
diff --git a/talos/page_load_test/devtools/addon/content/Profiler.js b/talos/page_load_test/devtools/addon/content/Profiler.js
new file mode 100644
--- /dev/null
+++ b/talos/page_load_test/devtools/addon/content/Profiler.js
@@ -0,0 +1,134 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+// - NOTE: This file is duplicated verbatim at:
+//         - talos/scripts/Profiler.js
+//         - talos/pageloader/chrome/Profiler.js
+//         - talos/page_load_test/devtools/addon/content/Profiler.js
+//         - talos/startup_test/tresize/addon/content/Profiler.js
+//
+//  - Please keep these copies in sync.
+//  - Please make sure your changes apply cleanly to all use cases.
+
+// Finer grained profiler control
+//
+// Use this object to pause and resume the profiler so that it only profiles the
+// relevant parts of our tests.
+var Profiler;
+
+(function(){
+  var _profiler;
+
+  // If this script is loaded in a framescript context, there won't be a
+  // document object, so just use a fallback value in that case.
+  var test_name = this.document ? this.document.location.pathname : "unknown";
+
+  // Whether Profiler has been initialized. Until that happens, most calls
+  // will be ignored.
+  var enabled = false;
+
+  // The subtest name that beginTest() was called with.
+  var currentTest = "";
+
+  // Profiling settings.
+  var profiler_interval, profiler_entries, profiler_threadsArray, profiler_dir;
+
+  try {
+    // Outside of talos, this throws a security exception which no-op this file.
+    // (It's not required nor allowed for addons since Firefox 17)
+    // It's used inside talos from non-privileged pages (like during tscroll),
+    // and it works because talos disables all/most security measures.
+    netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
+  } catch (e) {}
+
+  try {
+    _profiler = Components.classes["@mozilla.org/tools/profiler;1"].getService(Components.interfaces.nsIProfiler);
+  } catch (ex) { (typeof(dumpLog) == "undefined" ? dump : dumpLog)(ex + "\n"); }
+
+  // Parses an url query string into a JS object.
+  function searchToObject(locationSearch) {
+    var pairs = locationSearch.substring(1).split("&");
+    var result = {};
+
+    for (var i in pairs) {
+      if (pairs[i] !== "") {
+        var pair = pairs[i].split("=");
+        result[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || "");
+      }
+    }
+
+    return result;
+  }
+
+  Profiler = {
+    /**
+     * Initialize the profiler using profiler settings supplied in a JS object.
+     * The following properties on the object are respected:
+     *  - sps_profile_interval
+     *  - sps_profile_entries
+     *  - sps_profile_threads
+     *  - sps_profile_dir
+     */
+    initFromObject: function Profiler__initFromObject (obj) {
+      if (obj &&
+          ("sps_profile_dir" in obj) && typeof obj.sps_profile_dir == "string" &&
+          ("sps_profile_interval" in obj) && Number.isFinite(obj.sps_profile_interval * 1) &&
+          ("sps_profile_entries" in obj) && Number.isFinite(obj.sps_profile_entries * 1) &&
+          ("sps_profile_threads" in obj) && typeof obj.sps_profile_threads == "string") {
+        profiler_interval = obj.sps_profile_interval;
+        profiler_entries = obj.sps_profile_entries;
+        profiler_threadsArray = obj.sps_profile_threads.split(",");
+        profiler_dir = obj.sps_profile_dir;
+        enabled = true;
+      }
+    },
+    initFromURLQueryParams: function Profiler__initFromURLQueryParams (locationSearch) {
+      this.initFromObject(searchToObject(locationSearch));
+    },
+    beginTest: function Profiler__beginTest (testName) {
+      currentTest = testName;
+      if (_profiler && enabled) {
+        _profiler.StartProfiler(profiler_entries, profiler_interval,
+                                ["js", "leaf", "stackwalk", "threads"], 4,
+                                profiler_threadsArray, profiler_threadsArray.length);
+        if (_profiler.PauseSampling) {
+          _profiler.PauseSampling();
+        }
+      }
+    },
+    finishTest: function Profiler__finishTest () {
+      if (_profiler && enabled) {
+        _profiler.dumpProfileToFile(profiler_dir + "/" + currentTest + ".sps");
+        _profiler.StopProfiler();
+      }
+    },
+    finishStartupProfiling: function Profiler__finishStartupProfiling () {
+      if (_profiler && enabled) {
+        _profiler.dumpProfileToFile(profiler_dir + "/startup.sps");
+        _profiler.StopProfiler();
+      }
+    },
+    resume: function Profiler__resume (name, explicit) {
+      if (_profiler) {
+        if (_profiler.ResumeSampling) {
+          _profiler.ResumeSampling();
+        }
+        _profiler.AddMarker(explicit ? name : 'Start of test "' + (name || test_name) + '"');
+      }
+    },
+    pause: function Profiler__pause (name, explicit) {
+      if (_profiler) {
+        if (_profiler.PauseSampling) {
+          _profiler.PauseSampling();
+        }
+        _profiler.AddMarker(explicit ? name : 'End of test "' + (name || test_name) + '"');
+      }
+    },
+    mark: function Profiler__mark (marker, explicit) {
+      if (_profiler) {
+        _profiler.AddMarker(explicit ? marker : 'Profiler: "' + (marker || test_name) + '"');
+      }
+    }
+  };
+})();
diff --git a/talos/page_load_test/devtools/addon/content/addon-test-frontend.js b/talos/page_load_test/devtools/addon/content/addon-test-frontend.js
new file mode 100644
--- /dev/null
+++ b/talos/page_load_test/devtools/addon/content/addon-test-frontend.js
@@ -0,0 +1,192 @@
+
+function $(id) {
+  return document.getElementById(id);
+}
+
+// Executes command at the chrome process.
+// Limited to one argument (data), which is enough for TART.
+// doneCallback will be called once done and, if applicable, with the result as argument.
+// Execution might finish quickly (e.g. when setting prefs) or
+// take a while (e.g. when triggering the test run)
+function chromeExec(commandName, data, doneCallback) {
+  // dispatch an event to the framescript which will take it from there.
+  doneCallback = doneCallback || function dummy(){};
+  dispatchEvent(
+    new CustomEvent("devtools@mozilla.org:chrome-exec-event", {
+      bubbles: true,
+      detail: {
+        command: {
+          name: commandName,
+          data: data,
+        },
+        doneCallback: doneCallback
+      }
+    })
+  );
+}
+
+function setASAP() {
+  chromeExec("setASAP");
+}
+
+function unsetASAP() {
+  chromeExec("unsetASAP");
+}
+
+function toClipboard(text) {
+  chromeExec("toClipboard", text);
+}
+
+function runTest(config, doneCallback) {
+  chromeExec("runTest", config, doneCallback);
+}
+
+
+function sum(values) {
+  return values.reduce(function(a, b){return a + b;});
+}
+
+function average(values) {
+  return values.length ? sum(values) / values.length : 999999999;
+}
+
+function stddev(values, avg) {
+  if (undefined == avg) avg = average(values);
+  if (values.length <= 1) return 0;
+
+  return Math.sqrt(
+    values.map(function (v) { return Math.pow(v - avg, 2); })
+          .reduce(function (a, b) { return a + b; }) / (values.length - 1));
+}
+
+var lastResults = '["[no results collected]"]';
+
+function doneTest(dispResult) {
+  $("hide-during-run").style.display = "block";
+  $("show-during-run").style.display = "none";
+  if (dispResult) {
+    // Array of test results, each element has .name and .value (test name and test result).
+    // Test result may also be an array of numeric values (all the intervals)
+
+    lastResults = JSON.stringify(dispResult); // for "Copy to clipboard" button
+
+    var stats = {}; // Used for average, stddev when repeat!=1
+    var isRepeat = false;
+
+    for (var i in dispResult) {
+      var di = dispResult[i];
+      var disp = [].concat(di.value).map(function(a){return " " + (isNaN(a) ? -1 : a.toFixed(1));}).join("&nbsp;&nbsp;");
+      dispResult[i] = String(di.name) + ": " + disp;
+      if (di.name.indexOf(".half")>=0 || di.name.indexOf(".all")>=0)
+        dispResult[i] = "<b>"+dispResult[i]+"</b>";
+      if (di.name.indexOf(".raw")>=0)
+        dispResult[i] = "<br/>" + dispResult[i]; // Add space before raw results (which are the first result of an animation)
+
+      // stats:
+      if (di.name.indexOf(".raw") < 0) {
+        if (!stats[di.name]) {
+          stats[di.name] = [];
+        } else {
+          isRepeat = true;
+        }
+
+        stats[di.name].push(di.value);
+      }
+    }
+
+    var dispStats = "";
+    if (isRepeat) {
+      dispStats = "<hr/><b>Aggregated</b>:<br/>";
+      for (var s in stats) {
+        if (s.indexOf(".half") >= 0 )
+          dispStats += "<br/>";
+        dispStats += s + "&nbsp;&nbsp;&nbsp;&nbsp;Average (" + stats[s].length + "): " + average(stats[s]).toFixed(2) + " stddev: " + stddev(stats[s]).toFixed(2) + "<br/>";
+      }
+
+      dispStats +="<hr/><b>Individual animations</b>:<br/>";
+    }
+    $("run-results").innerHTML = "<hr/><br/>Results <button onclick='toClipboard(lastResults)'>[ Copy to clipboard as JSON ]</button>:<br/>" + dispStats + dispResult.join("<br/>");
+  }
+}
+
+var config = {subtests: [], repeat: 1}; // Empty subtests interpreted as all subtests, since otherwise meaningless.
+
+function triggerStart() {
+  updateConfig();
+  $("hide-during-run").style.display = "none";
+  $("show-during-run").style.display = "block";
+  $("run-results").innerHTML = "";
+
+  runTest(config, doneTest);
+}
+
+function deselectAll() {
+  for (var test in defaultConfig.subtests) {
+    $("subtest-" + test).checked = false;
+  }
+}
+
+function updateConfig() {
+  config = {subtests: []};
+  for (var test in defaultConfig.subtests) {
+    if ($("subtest-" + test).checked) {
+      config.subtests.push(test);
+    }
+  }
+
+  var repeat = $("repeat").value;
+  config.repeat = isNaN(repeat) ? 1 : repeat;
+
+  var rest = $("rest").value;
+  config.rest = isNaN(rest) ? 500 : (rest ? rest : 1); // 500ms default, use 1ms as minimum
+
+  config.tickle = $("tickle").checked;
+
+  config.controlProfiler = $("controlProfiler").checked;
+}
+
+// E.g. returns "world" for key "hello", "2014" for key "year", and "" for key "dummy":
+// http://localhost/x.html#hello=world&x=12&year=2014
+function getUriHashValue(key) {
+  var k = String(key) + "=";
+  var uriVars = document.location.hash.substr(1).split("&");
+  for (var i in uriVars) {
+    if (uriVars[i].indexOf(k) == 0)
+      return uriVars[i].substr(k.length);
+  }
+  return "";
+}
+
+// URL e.g. chrome://devtools/content/devtools.html#auto&tests=["simple","iconFadeDpiCurrent"]
+// Note - there's no error checking for arguments parsing errors.
+//        Any errors will express as either javascript errors or not reading the args correctly.
+//        This is not an "official" part of the UI, and when used in talos, will fail early
+//        enough to not cause "weird" issues too late.
+function updateOptionsFromUrl() {
+  var uriTests = getUriHashValue("tests");
+  var tests = uriTests ? JSON.parse(uriTests) : [];
+
+  if (tests.length) {
+    for (var d in defaultConfig.subtests) {
+      $("subtest-" + d).checked = false;
+      for (var t in tests) {
+        if (tests[t] == d) {
+          $("subtest-" + d).checked = true;
+        }
+      }
+    }
+  }
+
+  var cp = getUriHashValue("controlProfiler");
+  if (cp.length)
+    $("controlProfiler").checked = (cp == "true");
+}
+
+function init() {
+  updateOptionsFromUrl();
+  if (document.location.hash.indexOf("#auto") == 0) {
+    triggerStart();
+  }
+}
+
+addEventListener("load", init);
\ No newline at end of file
diff --git a/talos/page_load_test/devtools/addon/content/blank.icon.html b/talos/page_load_test/devtools/addon/content/blank.icon.html
new file mode 100644
--- /dev/null
+++ b/talos/page_load_test/devtools/addon/content/blank.icon.html
@@ -0,0 +1,7 @@
+<html>
+<head>
+<meta charset="UTF-8"/>
+<link id="tart-icon" rel="icon" href="devtools.ico"/>
+<title>Just another blank DART page with an icon</title>
+</head>
+</html>
diff --git a/talos/page_load_test/devtools/addon/content/devtools.html b/talos/page_load_test/devtools/addon/content/devtools.html
new file mode 100644
--- /dev/null
+++ b/talos/page_load_test/devtools/addon/content/devtools.html
@@ -0,0 +1,70 @@
+<html>
+<head>
+
+<meta charset="UTF-8"/>
+<link id="tart-icon" rel="icon" href="devtools.ico"/>
+<title>DART - Devtools Automated peRformance Test</title>
+
+<script type="application/x-javascript">
+
+var defaultConfig = {
+      repeat: 1,
+      rest: 500,
+      tickle: true,
+      controlProfiler: true,  // If true, pause the profiler when not measuring. Else just add markers.
+      subtests: {
+        webconsoleOpen: true,
+        inspectorOpen: true,
+        debuggerOpen: true,
+        styleEditorOpen: true,
+        netmonitorOpen: true,
+      }
+    };
+
+var simpleInfo = "Measure open/close of a new tab of about:blank";
+
+var testsInfo = {
+  simple: simpleInfo
+};
+
+
+</script>
+
+<script src="addon-test-frontend.js"></script>
+</head>
+<body style="font-family:sans-serif;">
+<h4>DART - Devtools Automated peRformance Test</h4>
+<div id="hide-during-run">
+   Visit <a href="https://wiki.mozilla.org/Buildbot/Talos/Tests#TART.2FCART">talos/TART</a> for detailed info.<br/>
+  <ul>
+    <li><b>If you just opened the browser</b> - give Firefox few seconds to settle down before testing.</li>
+    <li><button onclick="setASAP()">Set ASAP mode</button> <button onclick="unsetASAP()">Restore default</button> (requires restart to take effect). TART runs best (and in talos) with vsync disabled - to measure maximum throughput (ASAP mode). This means the preferences layout.frame_rate = 0 and docshell.event_starvation_delay_hint = 1</li>
+    <li>In talos, TART runs with a single tab. If you wish to test a specific animation with several tabs open, you can do so as well by manually opening few tabs before starting the test.</li>
+  </ul>
+
+Utilities:
+  <a href="blank.icon.html">blank with icon</a>&nbsp;&nbsp;&nbsp;
+  <a href="about:config?filter=/newtab|_rate|devP|offmain|docshell.event_starvation_delay_hint|rce-en/">about:config (already filtered with relevant prefs)</a>
+<br/><br/>
+<b>Configure TART</b> (CTRL-F5 to reset to talos defaults) <button type="button" onclick="deselectAll()">Deselect all tests</button><br/>
+<script>
+  for (var test in defaultConfig.subtests) {
+    document.write('<input type="checkbox" id="subtest-' + test + '" ' + (defaultConfig.subtests[test] ? "" : "un") + 'checked>'
+                  + test + '</input>'
+                  + '<span style="color:grey">&nbsp;&nbsp;&nbsp;' + testsInfo[test] + '</span>'
+                  + '<br/>');
+  }
+  $("subtest-simple3open3closeDpiCurrent").checked = false; // Disabled by default for talos
+</script>
+  <br/>
+  Repeat: <input id="repeat" type="text" size=2 value="1" onchange="updateConfig()"/> times<br/>
+  Delay before starting a measured animation: <input id="rest" type="text" size=4 value="500"/> ms<br/>
+  <input id="controlProfiler" type="checkbox" checked>Pause the profiler during animations which are <b>not</b> measured.</input><br/>
+  <input id="tickle" type="checkbox" checked>Accurate first recorded frame (tickle the Back button before measurements)</iinput><br/>
+
+  <button type="button" id="start-test-button" onclick="triggerStart()">Start Tab Animation tests</button>&nbsp;&nbsp;&nbsp;
+  <div id="run-results"></div>
+</div>
+<div id="show-during-run" style="display:none">Testing in progress ...</div>
+</body>
+</html>
diff --git a/talos/page_load_test/devtools/addon/content/devtools.ico b/talos/page_load_test/devtools/addon/content/devtools.ico
new file mode 100644
index e69de29bb2d1d6434b8b29ae775ad8c2e48c5391..5575a55913ef26ebb3e25e239992226054698f70
GIT binary patch
literal 1150
zc${NkU<5(|0R|wcz>vYhz#zuJz@P!dKp~(AL>w2md*{wNYG9#Uq5mLEjM{se(*LpP
zCDsgT>%Vp9=6YOu1+!WIBh%RQ<HI0*=z3w86#d9%;KSw&|5qW?P<?wy(GSDe+)t$a
yn_>Ei#q}I>uTw)mvfr`cNXz5@Kp3BXLVB^8L5Y5lUKl3U3{t`dAI4cQ5D5T#)biH=

diff --git a/talos/page_load_test/devtools/addon/content/devtools.js b/talos/page_load_test/devtools/addon/content/devtools.js
new file mode 100644
--- /dev/null
+++ b/talos/page_load_test/devtools/addon/content/devtools.js
@@ -0,0 +1,374 @@
+// TODO:
+// V - Read transition duration from style instead of hardcoded 250ms (mconley)
+// V - Remove caret from devtools.html (unfocus url bar)
+// V - Add fade-only tests (added icon @DPI2/current, simple @dpi current, lastTab @current. only icon@dpi2 runs on talos by default)
+// V - Output JSON results (OK to log, check with MattN if that's enough)
+// V - UI: Add tests descriptions, button to deselect all, Notice about profiling and Accurate 1st frame, copy JSON to clipboard.
+// V - Add profiler markers as start/done:[test-name]
+// V - Add custom subtests for talos by URL (devtools.html)
+// V - Change repeat order from column to row major
+//     (now repeats each test N times then advances to next test - instead of repeating the entire set N times)
+// V - Objectify
+// V - make sure of window size (use pinned tart tab - enough even in scale 2 with australis)
+// V - Make sure test-cases work on australis (min tab width for 8th tab)
+// V - pref - disable paint starvation: docshell.event_starvation_delay_hint=1 -> will be set by talos or by the user
+// V - For manual test: display: relevent prefs instructions (rate, starve hint), instructions for many-tabs
+// V - allow API-less intervals recording (using rAF, since the API is b0rked with OMTC)
+//     (but using rAF appears to record spurious very short intervals which I think are not really frames)
+// V - Optimize cases (minimize test count without hurting cover):
+//     - v1: only single tab, open + close, DPI1: about:blank, with-icon-and-long-title. DPI2: only the icon case
+// V - Log output
+// X - Support scroll into view (no end event)
+// X - have preview images: hard to make work across versions
+// - Tests:
+//   V - With favicon
+//   V - Different DPIs
+//   V - with fade only (no tab open/close overhead)
+//   X - tab drag
+//   X - tab remove from the middle
+//   X - Without add-tab button -> can be hidden while testing manually. in talos always with the button
+
+dump("devtools.js loaded\n\n");
+
+Components.utils.import("resource:///modules/devtools/gDevTools.jsm");
+const {devtools} =
+  Components.utils.import("resource://gre/modules/devtools/Loader.jsm", {});
+const { getActiveTab } = devtools.require("sdk/tabs/utils");
+const { getMostRecentBrowserWindow } = devtools.require("sdk/window/utils");
+
+const targetFor = target => {
+  target = target || getActiveTab(getMostRecentBrowserWindow());
+  return devtools.TargetFactory.forTab(target);
+};
+
+function openToolbox(tool = "webconsole") {
+  return gDevTools.showToolbox(targetFor(), tool);
+}
+function closeToolbox() {
+  return gDevTools.closeToolbox(targetFor());
+}
+
+function Tart() {
+}
+
+Tart.prototype = {
+
+  USE_RECORDING_API: true, // true for Start[/Stop]FrameTimeRecording, otherwise record using rAF - which will also work with OMTC
+                           // but (currently) also records iterations without paint invalidations
+
+  _win: undefined,
+  _tartTab: undefined,
+  _results: [],
+  _config: {subtests: [], repeat: 1, rest: 500, tickle: true, controlProfiler: true},
+
+  _animate: function(preWaitMs, triggerFunc, onDoneCallback, isReportResult, name, referenceDuration) {
+    var self = this;
+    var recordingHandle;
+    var timeoutId = 0;
+    var detector; //will be assigned after calling trigger.
+    var rAF = window.requestAnimationFrame || window.mozRequestAnimationFrame;
+    const Ci = Components.interfaces;
+    const Cc = Components.classes;
+
+    var _recording = [];
+    var _abortRecording = false;
+    var startRecordTimestamp;
+    function startRecord() {
+      if (self._config.controlProfiler) {
+        if (isReportResult)
+          Profiler.resume(name);
+      } else {
+        Profiler.mark("Start: " + (isReportResult ? name : "[warmup]"), true);
+      }
+      startRecordTimestamp = window.performance.now();
+      if (self.USE_RECORDING_API) {
+        return window.QueryInterface(Ci.nsIInterfaceRequestor)
+                     .getInterface(Ci.nsIDOMWindowUtils)
+                     .startFrameTimeRecording();
+      }
+
+      _recording = [];
+      _abortRecording = false;
+
+      var last = performance.now();
+      function rec() {
+        //self._win.getComputedStyle(self._win.gBrowser.selectedTab).width; // force draw - not good - too much regression
+        if (_abortRecording) return;
+
+        var now = performance.now();
+        _recording.push(now - last);
+        last = now;
+        rAF(rec);
+      }
+
+      rAF(rec);
+
+      return 1; // dummy
+    }
+
+    var recordingAbsoluteDuration;
+    function stopRecord(Handle) {
+      recordingAbsoluteDuration =  window.performance.now() - startRecordTimestamp;
+      if (self._config.controlProfiler) {
+        if (isReportResult)
+          Profiler.pause(name);
+      } else {
+        Profiler.mark("End: " + (isReportResult ? name : "[warmup]"), true);
+      }
+      if (self.USE_RECORDING_API) {
+        var paints = {};
+        return window.QueryInterface(Ci.nsIInterfaceRequestor)
+                     .getInterface(Ci.nsIDOMWindowUtils)
+                     .stopFrameTimeRecording(recordingHandle, paints);
+
+      }
+
+      _abortRecording = true;
+      return _recording.slice(0); // clone
+    }
+
+
+    function addResult(intervals) {
+      // For each animation sequence (intervals) we report 3 values:
+      // 1. Average interval for the last 50% of the reference duration
+      //    (e.g. if the reference duration is 250ms then average of the last 125ms,
+      //     regardless of the actual animation duration in practice)
+      // 2. Average interval for the entire animation.
+      // 3. Absolute difference between reference duration to actual diration.
+
+      var sumLastHalf = 0;
+      var countLastHalf = 0;
+      var sumMost = 0;
+      var countMost = 0;
+      var sum = 0;
+      for (var i = intervals.length - 1; i >= 0; i--) {
+        sum += intervals[i];
+        if (sumLastHalf < referenceDuration / 2) {
+          sumLastHalf += intervals[i];
+          countLastHalf++;
+        }
+        if (sumMost < referenceDuration * .85) {
+          sumMost += intervals[i];
+          countMost++;
+        }
+      }
+      dump("overall: " + sum + "\n");
+
+      var averageLastHalf = countLastHalf ? sumLastHalf / countLastHalf : 0;
+      var averageMost    = countMost ? sumMost / countMost : 0;
+      var averageOverall = intervals.length ? sum / intervals.length : 0;
+      var durationDiff = Math.abs(recordingAbsoluteDuration - referenceDuration);
+
+      self._results.push({name: name + ".raw.TART",   value: intervals}); // Just for display if running manually - Not collected for talos.
+      self._results.push({name: name + ".half.TART",  value: averageLastHalf});
+      self._results.push({name: name + ".all.TART",   value: averageOverall});
+      self._results.push({name: name + ".error.TART", value: durationDiff});
+    }
+
+    function transEnd(e) {
+      if (e) {
+        let isMeasureNow = detector.measureNow(e);
+
+        if (isMeasureNow) {
+          // Get the recorded frame intervals and append result if required
+          let intervals = stopRecord(recordingHandle);
+          if (isReportResult) {
+            addResult(intervals);
+          }
+        }
+
+        // If detector supports keepListening, use it, otherwise - measurement indicates the end.
+        if (detector.keepListening ? detector.keepListening(e) : !isMeasureNow){
+          return;
+        }
+      } else {
+        // No event == timeout
+        dump("TART: TIMEOUT\n");
+      }
+
+      // Cleanup
+      detector.cleanup(transEnd, self._win);
+      clearTimeout(timeoutId);
+
+      onDoneCallback();
+    }
+
+    function trigger(f) {
+      if (!self.USE_RECORDING_API)
+        return rAF(f);
+
+      // When using the recording API, the first interval is to last frame, which could have been a while ago.
+      // To make sure the first interval is counted correctly, we "tickle" a widget
+      // and immidiatly afterwards start the test, such the last frame timestamp prior to the recording is now.
+      // However, on some systems, modifying the widget once isn't always enough, hence the tickle loop.
+      //
+      var id = "back-button";
+      var orig = self._win.document.getElementById(id).style.opacity;
+      var i = 0;
+
+      function tickleLoop() {
+        if (i++ < ((isReportResult && self._config.tickle) ? 17 : 0)) {
+          self._win.document.getElementById(id).style.opacity = i%10 /10 + .05; // just some style modification which will force redraw
+          return rAF(tickleLoop);
+        }
+
+        self._win.document.getElementById(id).style.opacity = orig;
+        return rAF(f);
+      }
+
+      tickleLoop();
+
+    }
+
+    setTimeout(function() {
+      trigger(function() {
+        timeoutId = setTimeout(transEnd, 3000);
+        recordingHandle = startRecord();
+        triggerFunc(); // also chooses detector
+        detector = self._endDetection;
+        detector.arm(transEnd, self._win);
+      });
+    }, preWaitMs);
+
+  },
+
+
+  _nextCommandIx: 0,
+  _commands: [],
+  _onSequenceComplete: 0,
+  _nextCommand: function() {
+    if (this._nextCommandIx >= this._commands.length) {
+      this._onSequenceComplete();
+      return;
+    }
+    this._commands[this._nextCommandIx++]();
+  },
+  // Each command at the array a function which must call nextCommand once it's done
+  _doSequence: function(commands, onComplete) {
+    this._commands = commands;
+    this._onSequenceComplete = onComplete;
+    this._results = [];
+    this._nextCommandIx = 0;
+
+    this._nextCommand();
+  },
+
+  _log: function(str) {
+    if (window.MozillaFileLogger && window.MozillaFileLogger.log)
+      window.MozillaFileLogger.log(str);
+
+    window.dump(str);
+  },
+
+  _logLine: function(str) {
+    return this._log(str + "\n");
+  },
+
+  _reportAllResults: function() {
+    var testNames = [];
+    var testResults = [];
+
+    var out = "";
+    for (var i in this._results) {
+      res = this._results[i];
+      var disp = [].concat(res.value).map(function(a){return (isNaN(a) ? -1 : a.toFixed(1));}).join(" ");
+      out += res.name + ": " + disp + "\n";
+
+      if (!Array.isArray(res.value)) { // Waw intervals array is not reported to talos
+        testNames.push(res.name);
+        testResults.push(res.value);
+      }
+    }
+    this._log("\n" + out);
+
+    if (content && content.tpRecordTime) {
+      content.tpRecordTime(testResults.join(','), 0, testNames.join(','));
+    } else {
+      //alert(out);
+    }
+  },
+
+  _onTestComplete: null,
+
+  _doneInternal: function() {
+    this._logLine("TART_RESULTS_JSON=" + JSON.stringify(this._results));
+    this._reportAllResults();
+    this._win.gBrowser.selectedTab = this._tartTab;
+
+    if (this._onTestComplete) {
+      this._onTestComplete(JSON.parse(JSON.stringify(this._results))); // Clone results
+    }
+  },
+
+  _startTest: function() {
+
+    var self = this;
+    var animate = this._animate.bind(this);
+    var next = this._nextCommand.bind(this);
+    var rest = 500; //500ms default rest before measuring an animation
+    if (this._config.rest) {
+      rest = this._config.rest;
+    }
+
+    var subtests = {
+      init: [
+        // This is called before each subtest, so it's safe to assume the following prefs:
+        function(){next();}
+      ],
+
+      restore: [
+        // Restore prefs which were modified during the test
+        function(){closeToolbox().then(next);}
+      ],
+
+      webconsoleOpen: [
+        function() {openToolbox("webconsole").then(next);},
+      ],
+      inspectorOpen: [
+        function() {openToolbox("inspector").then(next);},
+      ],
+      debuggerOpen: [
+        function() {openToolbox("jsdebugger").then(next);},
+      ],
+      styleEditorOpen: [
+        function() {openToolbox("styleeditor").then(next);},
+      ],
+      netmonitorOpen: [
+        function() {openToolbox("netmonitor").then(next);},
+      ],
+
+    };
+
+    // Construct the sequence array: config.repeat times config.subtests,
+    // where each subtest implicitly starts with init.
+    sequenceArray = [];
+    for (var i in this._config.subtests) {
+      for (var r = 0; r < this._config.repeat; r++) {
+        sequenceArray = sequenceArray.concat(subtests["init"]);
+        sequenceArray = sequenceArray.concat(subtests[this._config.subtests[i]]);
+        sequenceArray = sequenceArray.concat(subtests["restore"]);
+      }
+    }
+    // sequenceArray = sequenceArray.concat(subtests["restore"]);
+
+    this._doSequence(sequenceArray, this._doneInternal);
+  },
+
+  startTest: function(doneCallback, config) {
+    this._onTestComplete = function (results) {
+      Profiler.mark("DART - end", true);
+      doneCallback(results);
+    };
+    this._config = config;
+
+    const Ci = Components.interfaces;
+    var wm = Components.classes["@mozilla.org/appshell/window-mediator;1"].getService(Ci.nsIWindowMediator);
+    this._win = wm.getMostRecentWindow("navigator:browser");
+    this._tartTab = this._win.gBrowser.selectedTab;
+    this._win.gBrowser.selectedBrowser.focus(); // Unfocus the URL bar to avoid caret blink
+
+    Profiler.mark("DART - start", true);
+
+    return this._startTest();
+  }
+}
diff --git a/talos/page_load_test/devtools/addon/content/devtools.overlay.xul b/talos/page_load_test/devtools/addon/content/devtools.overlay.xul
new file mode 100644
--- /dev/null
+++ b/talos/page_load_test/devtools/addon/content/devtools.overlay.xul
@@ -0,0 +1,64 @@
+<?xml version="1.0"?>
+<overlay id="Scrapper-Overlay" xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
+
+<script type="application/x-javascript" src="Profiler.js" />
+<script type="application/x-javascript" src="devtools.js" />
+<script type="application/x-javascript">
+
+(function(){
+  const Cc = Components.classes;
+  const Ci = Components.interfaces;
+  var prefs = Cc["@mozilla.org/preferences-service;1"].getService(Ci.nsIPrefBranch);
+
+  const PREFIX = "devtools@mozilla.org:";
+
+  // "services" which the framescript can execute at the chrome process
+  var proxiedServices = {
+    runTest: function(config, callback) {
+      (new Tart()).startTest(callback, config);
+    },
+
+    setASAP: function() {
+      prefs.setIntPref("layout.frame_rate", 0);
+      prefs.setIntPref("docshell.event_starvation_delay_hint", 1);
+    },
+
+    unsetASAP: function() {
+      prefs.clearUserPref("layout.frame_rate");
+      prefs.clearUserPref("docshell.event_starvation_delay_hint");
+    },
+
+    toClipboard: function(text) {
+      const gClipboardHelper = Cc["@mozilla.org/widget/clipboardhelper;1"]
+                               .getService(Ci.nsIClipboardHelper);
+      gClipboardHelper.copyString(text);
+    }
+  };
+
+  var groupMM = window.getGroupMessageManager("browsers");
+  groupMM.loadFrameScript("chrome://devtools/content/framescript.js", true);
+
+  // listener/executor on the chrome process for devtools.html
+  groupMM.addMessageListener(PREFIX + "chrome-exec-message", function listener(m) {
+    function sendResult(result) {
+      groupMM.broadcastAsyncMessage(PREFIX + "chrome-exec-reply", {
+        id: m.data.id,
+        result: result
+      });
+    }
+
+    var command = m.data.command;
+    if (!proxiedServices.hasOwnProperty(command.name))
+      throw new Error("TART: service doesn't exist: '" + command.name + "'");
+
+    var service = proxiedServices[command.name];
+    if (command.name == "runTest") // Needs async execution
+      service(command.data, sendResult);
+    else
+      sendResult(service(command.data));
+
+  });
+})();
+
+</script>
+</overlay>
diff --git a/talos/page_load_test/devtools/addon/content/framescript.js b/talos/page_load_test/devtools/addon/content/framescript.js
new file mode 100644
--- /dev/null
+++ b/talos/page_load_test/devtools/addon/content/framescript.js
@@ -0,0 +1,24 @@
+(function() {
+  const PREFIX = "devtools@mozilla.org:";
+
+  addEventListener(PREFIX + "chrome-exec-event", function (e) {
+    if (content.document.documentURI.indexOf("chrome://devtools/content/devtools.html")) {
+      // Can have url fragment. Backward compatible version of !str.startsWidth("prefix")
+      throw new Error("Cannot be used outside of TART's launch page");
+    }
+
+    var uniqueMessageId = PREFIX + content.document.documentURI + Date.now() + Math.random();
+
+    addMessageListener(PREFIX + "chrome-exec-reply", function done(reply) {
+      if (reply.data.id == uniqueMessageId) {
+        removeMessageListener(PREFIX + "chrome-exec-reply", done);
+        e.detail.doneCallback(reply.data.result);
+      }
+    });
+
+    sendAsyncMessage(PREFIX + "chrome-exec-message", {
+      command: e.detail.command,
+      id: uniqueMessageId
+    });
+  }, false);
+})()
\ No newline at end of file
diff --git a/talos/page_load_test/devtools/addon/install.rdf b/talos/page_load_test/devtools/addon/install.rdf
new file mode 100644
--- /dev/null
+++ b/talos/page_load_test/devtools/addon/install.rdf
@@ -0,0 +1,20 @@
+<?xml version="1.0"?><RDF xmlns="http://www.w3.org/1999/02/22-rdf-syntax-ns#"     xmlns:em="http://www.mozilla.org/2004/em-rdf#"><Description about="urn:mozilla:install-manifest">
+
+<!-- Required Items -->
+<em:id>bug1150215@mozilla.org</em:id>
+<em:name>DART - Devtools Automated peRformance Test</em:name>
+<em:version>0.0.1</em:version>
+
+<em:targetApplication>
+    <Description>
+        <em:id>{ec8030f7-c20a-464f-9b0e-13a3a9e97384}</em:id>
+        <em:minVersion>1.5</em:minVersion>
+        <em:maxVersion>99.0.*</em:maxVersion>
+    </Description>
+</em:targetApplication>
+
+<!-- Optional Items -->
+<em:creator>Brian Grinstead</em:creator>
+<em:description>Bug 1150215.  To run: navigate to chrome://devtools/content/devtools.html</em:description>
+<em:homepageURL>https://bugzilla.mozilla.org/show_bug.cgi?id=1150215</em:homepageURL>
+</Description></RDF>
diff --git a/talos/page_load_test/devtools/devtools.manifest b/talos/page_load_test/devtools/devtools.manifest
new file mode 100644
--- /dev/null
+++ b/talos/page_load_test/devtools/devtools.manifest
@@ -0,0 +1,1 @@
+% chrome://devtools/content/devtools.html
diff --git a/talos/test.py b/talos/test.py
--- a/talos/test.py
+++ b/talos/test.py
@@ -329,16 +329,37 @@ class cart(PageloaderTest):
     sps_profile_entries = 10000000
     win_counters = w7_counters = linux_counters = mac_counters = remote_counters = None
     """ ASAP mode """
     preferences = {'layout.frame_rate': 0,
                    'docshell.event_starvation_delay_hint': 1,
                    'dom.send_after_paint_to_content': False}
     filters = [["ignore_first", [1]], ['median', []]]
 
+
+class devtools(PageloaderTest):
+    """
+    XXXX
+    """
+    tpmanifest = '${talos}/page_load_test/devtools/devtools.manifest'
+    extensions = '${talos}/page_load_test/devtools/addon'
+    tpcycles = 1
+    tptimeout = 100
+    tppagecycles = 1
+    tploadnocache = True
+    tpmozafterpaint = False
+    sps_profile_interval = 1
+    sps_profile_entries = 10000000
+    win_counters = w7_counters = linux_counters = mac_counters = remote_counters = None
+    """ ASAP mode """
+    preferences = {'layout.frame_rate': 0,
+                   'docshell.event_starvation_delay_hint': 1,
+                   'dom.send_after_paint_to_content': False}
+    filters = [["ignore_first", [1]], ['median', []]]
+
 class glterrain(PageloaderTest):
     """
     Simple rotating WebGL scene with moving light source over a textured terrain.
     Measures average frame intervals.
     The same sequence is measured 4 times for combinations of alpha and antialias as canvas properties.
     Each of these 4 runs is reported as a different test name.
     """
     tpmanifest = '${talos}/page_load_test/webgl/glterrain.manifest'
@@ -677,11 +698,12 @@ class a11yr(PageloaderTest):
 
 # global test data
 tests = [ts_paint, ts, tsvg, tdhtml, ts_paint_cold,
          tp4m, tp5n, tp5o, tpaint, tresize, tp5o_scroll,
          trobopan, tcheckerboard, tprovider, tcheck2, tcanvasmark,
          dromaeo_css, dromaeo_dom, v8_7, kraken, media_tests,
          tdhtmlr, tsvgr, tsvgr_opacity, tscrollr, a11yr,
          tsvgx, tscrollx, tart, cart, glterrain,
-         sessionrestore, sessionrestore_no_auto_restore
+         sessionrestore, sessionrestore_no_auto_restore,
+         devtools
          ]
 test_dict = dict([(i.name(), i) for i in tests])
