# HG changeset patch
# Parent 9463811dd71a1252c4deb14c6733c40349cbd48d
# User Brian Grinstead <bgrinstead@mozilla.com>
try disabling things to remove  iASSERTION: we should be in a pseudo-element that is expected to contain elements (:before)

diff --git a/browser/devtools/fontinspector/font-inspector.js b/browser/devtools/fontinspector/font-inspector.js
--- a/browser/devtools/fontinspector/font-inspector.js
+++ b/browser/devtools/fontinspector/font-inspector.js
@@ -13,16 +13,17 @@ function FontInspector(inspector, window
 {
   this.inspector = inspector;
   this.chromeDoc = window.document;
   this.init();
 }
 
 FontInspector.prototype = {
   init: function FI_init() {
+    return;
     this.update = this.update.bind(this);
     this.onNewNode = this.onNewNode.bind(this);
     this.inspector.selection.on("new-node", this.onNewNode);
     this.inspector.sidebar.on("fontinspector-selected", this.onNewNode);
     this.showAll = this.showAll.bind(this);
     this.showAllButton = this.chromeDoc.getElementById("showall");
     this.showAllButton.addEventListener("click", this.showAll);
     this.update();
diff --git a/browser/devtools/layoutview/view.js b/browser/devtools/layoutview/view.js
--- a/browser/devtools/layoutview/view.js
+++ b/browser/devtools/layoutview/view.js
@@ -144,16 +144,17 @@ function LayoutView(inspector, win) {
   this.sizeLabel = this.doc.querySelector(".size > span");
   this.sizeHeadingLabel = this.doc.getElementById("element-size");
 
   this.init();
 }
 
 LayoutView.prototype = {
   init: function() {
+    return;
     this.update = this.update.bind(this);
 
     this.onNewSelection = this.onNewSelection.bind(this);
     this.inspector.selection.on("new-node-front", this.onNewSelection);
 
     this.onNewNode = this.onNewNode.bind(this);
     this.inspector.sidebar.on("layoutview-selected", this.onNewNode);
 
diff --git a/browser/devtools/markupview/markup-view.js b/browser/devtools/markupview/markup-view.js
--- a/browser/devtools/markupview/markup-view.js
+++ b/browser/devtools/markupview/markup-view.js
@@ -581,16 +581,20 @@ MarkupView.prototype = {
     }
 
     if (this._containers.has(aNode)) {
       return this.getContainer(aNode);
     }
 
     let container;
     let {nodeType, isPseudoElement} = aNode;
+
+    if (isPseudoElement) {
+      return null;
+    }
     if (aNode === this.walker.rootNode) {
       container = new RootContainer(this, aNode);
       this._elt.appendChild(container.elt);
       this._rootNode = aNode;
     } else if (nodeType == Ci.nsIDOMNode.ELEMENT_NODE && !isPseudoElement) {
       container = new MarkupElementContainer(this, aNode, this._inspector);
     } else if (nodeType == Ci.nsIDOMNode.COMMENT_NODE ||
                nodeType == Ci.nsIDOMNode.TEXT_NODE) {
@@ -753,16 +757,19 @@ MarkupView.prototype = {
 
   /**
    * Make sure the given node's parents are expanded and the
    * node is scrolled on to screen.
    */
   showNode: function(aNode, centered) {
     let parent = aNode;
 
+    if (aNode.isPseudoElement) {
+      return promise.resolve();
+    }
     this.importNode(aNode);
 
     while ((parent = parent.parentNode())) {
       this.importNode(parent);
       this.expandNode(parent);
     }
 
     return this._waitForChildren().then(() => {
diff --git a/browser/devtools/styleinspector/computed-view.js b/browser/devtools/styleinspector/computed-view.js
--- a/browser/devtools/styleinspector/computed-view.js
+++ b/browser/devtools/styleinspector/computed-view.js
@@ -402,16 +402,17 @@ CssHtmlTree.prototype = {
   /**
    * Refresh the panel content.
    */
   refreshPanel: function CssHtmlTree_refreshPanel()
   {
     if (!this.viewedElement) {
       return promise.resolve();
     }
+      return promise.resolve();
 
     return promise.all([
       this._createPropertyViews(),
       this.pageStyle.getComputed(this.viewedElement, {
         filter: this._sourceFilter,
         onlyMatched: !this.includeBrowserStyles,
         markMatched: true
       })
diff --git a/browser/devtools/styleinspector/rule-view.js b/browser/devtools/styleinspector/rule-view.js
--- a/browser/devtools/styleinspector/rule-view.js
+++ b/browser/devtools/styleinspector/rule-view.js
@@ -185,16 +185,17 @@ ElementStyle.prototype = {
   /**
    * Refresh the list of rules to be displayed for the active element.
    * Upon completion, this.rules[] will hold a list of Rule objects.
    *
    * Returns a promise that will be resolved when the elementStyle is
    * ready.
    */
   populate: function() {
+    return promise.resolve();
     let populated = this.pageStyle.getApplied(this.element, {
       inherited: true,
       matchedSelectors: true,
       filter: this.showUserAgentStyles ? "ua" : undefined,
     }).then(entries => {
       // Make sure the dummy element has been created before continuing...
       return this.dummyElementPromise.then(() => {
         if (this.populated != populated) {
diff --git a/toolkit/devtools/server/actors/highlighter.js b/toolkit/devtools/server/actors/highlighter.js
--- a/toolkit/devtools/server/actors/highlighter.js
+++ b/toolkit/devtools/server/actors/highlighter.js
@@ -114,16 +114,17 @@ let HighlighterActor = exports.Highlight
    * method several times won't display several highlighters, it will just move
    * the highlighter instance to these nodes.
    *
    * @param NodeActor The node to be highlighted
    * @param Options See the request part for existing options. Note that not
    * all options may be supported by all types of highlighters.
    */
   showBoxModel: method(function(node, options={}) {
+    return;
     if (node && isNodeValid(node.rawNode)) {
       this._boxModelHighlighter.show(node.rawNode, options);
     } else {
       this._boxModelHighlighter.hide();
     }
   }, {
     request: {
       node: Arg(0, "domnode"),
diff --git a/toolkit/devtools/server/actors/inspector.js b/toolkit/devtools/server/actors/inspector.js
--- a/toolkit/devtools/server/actors/inspector.js
+++ b/toolkit/devtools/server/actors/inspector.js
@@ -308,16 +308,18 @@ var NodeActor = exports.NodeActor = prot
 
   get computedStyle() {
     if (Cu.isDeadWrapper(this.rawNode) ||
         this.rawNode.nodeType !== Ci.nsIDOMNode.ELEMENT_NODE ||
         !this.rawNode.ownerDocument ||
         !this.rawNode.ownerDocument.defaultView) {
       return null;
     }
+
+    return null;
     return this.rawNode.ownerDocument.defaultView.getComputedStyle(this.rawNode);
   },
 
   /**
    * Is the node's display computed style value other than "none"
    */
   get isDisplayed() {
     let style = this.computedStyle;
@@ -3082,19 +3084,19 @@ function nodeFilter(aNode) {
   // controls).  Except for:
   //   1) Anonymous content in a XUL document. This is needed for all
   //      elements within the Browser Toolbox to properly show up.
   //   2) ::before/::after - we do want this to show in the walker so
   //      they can be inspected.
   if (LayoutHelpers.isNativeAnonymous(aNode) &&
       !isXULDocument(aNode.ownerDocument) &&
       (
-        aNode.nodeName !== "_moz_generated_content_before" &&
-        aNode.nodeName !== "_moz_generated_content_after")
-      ) {
+       aNode.nodeName !== "_moz_generated_content_before" &&
+       aNode.nodeName !== "_moz_generated_content_after"
+      )) {
     return Ci.nsIDOMNodeFilter.FILTER_SKIP;
   }
 
   return Ci.nsIDOMNodeFilter.FILTER_ACCEPT;
 }
 
 /**
  * Given an image DOMNode, return the image data-uri.
diff --git a/toolkit/devtools/server/actors/styles.js b/toolkit/devtools/server/actors/styles.js
--- a/toolkit/devtools/server/actors/styles.js
+++ b/toolkit/devtools/server/actors/styles.js
@@ -399,16 +399,18 @@ var PageStyleActor = protocol.ActorClass
    * @param string pseudo
    * @param DOMNode inherited
    * @param object options
    *
    * @returns Array
    */
   _getElementRules: function (node, pseudo, inherited, options) {
     let domRules = DOMUtils.getCSSStyleRules(node, pseudo);
+
+    return [];
     if (!domRules) {
       return [];
     }
 
     let rules = [];
 
     // getCSSStyleRules returns ordered from least-specific to
     // most-specific.
