# HG changeset patch
# Parent daa84204a11ac7300fd31882163b923c0acef6aa
# User Gabriel Luong <gabriel.luong@gmail.com>
Bug 1059015 - Provide an option to the TableWidget to specify the first column to appear r=bgrins

diff --git a/browser/devtools/shared/test/browser_tableWidget_basic.js b/browser/devtools/shared/test/browser_tableWidget_basic.js
--- a/browser/devtools/shared/test/browser_tableWidget_basic.js
+++ b/browser/devtools/shared/test/browser_tableWidget_basic.js
@@ -31,16 +31,17 @@ function test() {
           col2: "Column 2",
           col3: "Column 3",
           col4: "Column 4"
         },
         uniqueId: "col1",
         emptyText: "This is dummy empty text",
         highlightUpdated: true,
         removableColumns: true,
+        firstColumn: "col1"
       });
       startTests();
     });
   });
 }
 
 function endTests() {
   table.destroy();
diff --git a/browser/devtools/shared/widgets/TableWidget.js b/browser/devtools/shared/widgets/TableWidget.js
--- a/browser/devtools/shared/widgets/TableWidget.js
+++ b/browser/devtools/shared/widgets/TableWidget.js
@@ -35,26 +35,27 @@ const MAX_VISIBLE_STRING_SIZE = 100;
  *        - initialColumns: map of key vs display name for initial columns of
  *                          the table. See @setupColumns for more info.
  *        - uniqueId: the column which will be the unique identifier of each
  *                    entry in the table. Default: name.
  *        - emptyText: text to display when no entries in the table to display.
  *        - highlightUpdated: true to highlight the changed/added row.
  *        - removableColumns: Whether columns are removeable. If set to true,
  *                            the context menu in the headers will not appear.
+ *        - firstColumn: key of the first column that should appear.
  */
 function TableWidget(node, options={}) {
   EventEmitter.decorate(this);
 
   this.document = node.ownerDocument;
   this.window = this.document.defaultView;
   this._parent = node;
 
-  let {initialColumns, emptyText, uniqueId, highlightUpdated, removableColumns} =
-      options;
+  let {initialColumns, emptyText, uniqueId, highlightUpdated, removableColumns,
+       firstColumn} = options;
   this.emptyText = emptyText || "";
   this.uniqueId = uniqueId || "name";
   this.highlightUpdated = highlightUpdated || false;
   this.removableColumns = removableColumns || false;
 
   this.tbody = this.document.createElementNS(XUL_NS, "hbox");
   this.tbody.className = "table-widget-body theme-body";
   this.tbody.setAttribute("flex", "1");
@@ -71,17 +72,17 @@ function TableWidget(node, options={}) {
 
   // Setup the column headers context menu to allow users to hide columns at will
   if (this.removableColumns) {
     this.onPopupCommand = this.onPopupCommand.bind(this)
     this.setupHeadersContextMenu();
   }
 
   if (initialColumns) {
-    this.setColumns(initialColumns, uniqueId);
+    this.setColumns(initialColumns, uniqueId, firstColumn);
   } else if (this.emptyText) {
     this.setPlaceholderText(this.emptyText);
   }
 
   this.bindSelectedRow = (event, id) => {
     this.selectedRow = id;
   };
   this.on(EVENTS.ROW_SELECTED, this.bindSelectedRow);
@@ -218,34 +219,50 @@ TableWidget.prototype = {
    * be inserted into the table unless `initialColumns` was supplied.
    *
    * @param {object} columns
    *        A key value pair representing the columns of the table. Where the
    *        key represents the id of the column and the value is the displayed
    *        label in the header of the column.
    * @param {string} sortOn
    *        The id of the column on which the table will be initially sorted on.
+   * @param {string} firstColumn
+   *        The id of the column that should appear first.
    * @param {array} hiddenColumns
    *        Ids of all the columns that are hidden by default.
    */
-  setColumns: function(columns, sortOn = this.sortedOn, hiddenColumns = []) {
+  setColumns: function(columns, sortOn = this.sortedOn, firstColumn, hiddenColumns = []) {
     for (let column of this.columns.values()) {
       column.destroy();
     }
 
     this.columns.clear();
 
     if (!(sortOn in columns)) {
       sortOn = null;
     }
 
+    if (!(firstColumn in columns)) {
+      firstColumn = null;
+    }
+
+    if (firstColumn) {
+      this.columns.set(firstColumn,
+        new Column(this, firstColumn, columns[firstColumn]));
+    }
+
     for (let id in columns) {
       if (!sortOn) {
         sortOn = id;
       }
+
+      if (firstColumn && id == firstColumn) {
+        continue;
+      }
+
       this.columns.set(id, new Column(this, id, columns[id]));
       if (hiddenColumns.indexOf(id) > -1) {
         this.columns.get(id).toggleColumn();
       }
     }
     this.sortedOn = sortOn;
     this.sortBy(this.sortedOn);
     this.populateMenuPopup();
