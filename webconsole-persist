# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  1b384f2e773b3c84b63e7ec1c4f71a17df0c9c1e
Bug 1307881 - Part 2 - Provide a UI within the Web Console for managing persistence

MozReview-Commit-ID: GVkOms1o74c

diff --git a/devtools/client/locales/en-US/webconsole.properties b/devtools/client/locales/en-US/webconsole.properties
--- a/devtools/client/locales/en-US/webconsole.properties
+++ b/devtools/client/locales/en-US/webconsole.properties
@@ -304,8 +304,13 @@ webconsole.requestsFilterButton.label=Re
 # This is a semi-colon list of plural forms.
 # See: http://developer.mozilla.org/en/docs/Localization_and_Plurals
 # example: 345 items hidden by filters.
 webconsole.filteredMessages.label=#1 item hidden by filters;#1 items hidden by filters
 
 # Label used as the text of the "Reset filters" button in the "filtered messages" bar.
 # It resets the default filters of the console to their original values.
 webconsole.resetFiltersButton.label=Reset filters
+
+# LOCALIZATION NOTE (webconsole.enablePersistentLogs.label)
+webconsole.enablePersistentLogs.label=Persist Logs
+# LOCALIZATION NOTE (webconsole.enablePersistentLogs.tooltip)
+webconsole.enablePersistentLogs.tooltip=If you enable this option the output will not be cleared each time you navigate to a new page
diff --git a/devtools/client/webconsole/new-console-output/actions/ui.js b/devtools/client/webconsole/new-console-output/actions/ui.js
--- a/devtools/client/webconsole/new-console-output/actions/ui.js
+++ b/devtools/client/webconsole/new-console-output/actions/ui.js
@@ -6,33 +6,45 @@
 
 "use strict";
 
 const { getAllUi } = require("devtools/client/webconsole/new-console-output/selectors/ui");
 const Services = require("Services");
 
 const {
   FILTER_BAR_TOGGLE,
+  PERSIST_TOGGLE,
   PREFS,
   TIMESTAMPS_TOGGLE,
 } = require("devtools/client/webconsole/new-console-output/constants");
 
 function filterBarToggle(show) {
   return (dispatch, getState) => {
     dispatch({
       type: FILTER_BAR_TOGGLE,
     });
     const uiState = getAllUi(getState());
     Services.prefs.setBoolPref(PREFS.UI.FILTER_BAR, uiState.get("filterBarVisible"));
   };
 }
 
+function persistToggle(show) {
+  return (dispatch, getState) => {
+    dispatch({
+      type: PERSIST_TOGGLE,
+    });
+    const uiState = getAllUi(getState());
+    Services.prefs.setBoolPref(PREFS.UI.PERSIST, uiState.get("persistLogs"));
+  };
+}
+
 function timestampsToggle(visible) {
   return {
     type: TIMESTAMPS_TOGGLE,
     visible,
   };
 }
 
 module.exports = {
   filterBarToggle,
+  persistToggle,
   timestampsToggle,
 };
diff --git a/devtools/client/webconsole/new-console-output/components/filter-bar.js b/devtools/client/webconsole/new-console-output/components/filter-bar.js
--- a/devtools/client/webconsole/new-console-output/components/filter-bar.js
+++ b/devtools/client/webconsole/new-console-output/components/filter-bar.js
@@ -7,90 +7,95 @@ const {
   createClass,
   DOM: dom,
   PropTypes
 } = require("devtools/client/shared/vendor/react");
 const { connect } = require("devtools/client/shared/vendor/react-redux");
 const { getAllFilters } = require("devtools/client/webconsole/new-console-output/selectors/filters");
 const { getFilteredMessagesCount } = require("devtools/client/webconsole/new-console-output/selectors/messages");
 const { getAllUi } = require("devtools/client/webconsole/new-console-output/selectors/ui");
-const {
-  filterBarToggle,
-  defaultFiltersReset,
-  filterTextSet,
-  messagesClear,
-} = require("devtools/client/webconsole/new-console-output/actions/index");
+const actions = require("devtools/client/webconsole/new-console-output/actions/index");
 const { l10n } = require("devtools/client/webconsole/new-console-output/utils/messages");
 const { PluralForm } = require("devtools/shared/plural-form");
 const {
   DEFAULT_FILTERS,
   FILTERS,
 } = require("../constants");
 
 const FilterButton = require("devtools/client/webconsole/new-console-output/components/filter-button");
+const FilterCheckbox = require("devtools/client/webconsole/new-console-output/components/filter-checkbox");
 
 const FilterBar = createClass({
 
   displayName: "FilterBar",
 
   propTypes: {
     dispatch: PropTypes.func.isRequired,
     filter: PropTypes.object.isRequired,
     serviceContainer: PropTypes.shape({
       attachRefToHud: PropTypes.func.isRequired,
     }).isRequired,
     filterBarVisible: PropTypes.bool.isRequired,
+    persistLogs: PropTypes.bool.isRequired,
     filteredMessagesCount: PropTypes.object.isRequired,
   },
 
   shouldComponentUpdate(nextProps, nextState) {
     if (nextProps.filter !== this.props.filter) {
       return true;
     }
 
     if (nextProps.filterBarVisible !== this.props.filterBarVisible) {
       return true;
     }
 
+    if (nextProps.persistLogs !== this.props.persistLogs) {
+      return true;
+    }
+
     if (
       JSON.stringify(nextProps.filteredMessagesCount)
       !== JSON.stringify(this.props.filteredMessagesCount)
     ) {
       return true;
     }
 
     return false;
   },
 
   componentDidMount() {
     this.props.serviceContainer.attachRefToHud("filterBox",
       this.wrapperNode.querySelector(".text-filter"));
   },
 
   onClickMessagesClear: function () {
-    this.props.dispatch(messagesClear());
+    this.props.dispatch(actions.messagesClear());
   },
 
   onClickFilterBarToggle: function () {
-    this.props.dispatch(filterBarToggle());
+    this.props.dispatch(actions.filterBarToggle());
   },
 
   onClickRemoveAllFilters: function () {
-    this.props.dispatch(defaultFiltersReset());
+    this.props.dispatch(actions.defaultFiltersReset());
   },
 
   onClickRemoveTextFilter: function () {
-    this.props.dispatch(filterTextSet(""));
+    this.props.dispatch(actions.filterTextSet(""));
   },
 
   onSearchInput: function (e) {
-    this.props.dispatch(filterTextSet(e.target.value));
+    this.props.dispatch(actions.filterTextSet(e.target.value));
   },
 
-  renderFiltersConfigBar() {
+  onChangePersistToggle: function () {
+    this.props.dispatch(actions.persistToggle());
+  },
+
+  renderFiltersConfigBar({ persistLogs }) {
     const {
       dispatch,
       filter,
       filteredMessagesCount,
     } = this.props;
 
     const getLabel = (baseLabel, filterKey) => {
       const count = filteredMessagesCount[filterKey];
@@ -155,16 +160,25 @@ const FilterBar = createClass({
         filterKey: FILTERS.NETXHR,
         dispatch
       }),
       FilterButton({
         active: filter[FILTERS.NET],
         label: l10n.getStr("webconsole.requestsFilterButton.label"),
         filterKey: FILTERS.NET,
         dispatch
+      }),
+      dom.span({
+        className: "devtools-separator",
+      }),
+      FilterCheckbox({
+        label: l10n.getStr("webconsole.enablePersistentLogs.label"),
+        title: l10n.getStr("webconsole.enablePersistentLogs.tooltip"),
+        onChange: this.onChangePersistToggle,
+        checked: persistLogs,
       })
     );
   },
 
   renderFilteredMessagesBar() {
     const {
       filteredMessagesCount
     } = this.props;
@@ -197,16 +211,17 @@ const FilterBar = createClass({
       }, l10n.getStr("webconsole.resetFiltersButton.label"))
     );
   },
 
   render() {
     const {
       filter,
       filterBarVisible,
+      persistLogs,
       filteredMessagesCount,
     } = this.props;
 
     let children = [
       dom.div({
         className: "devtools-toolbar webconsole-filterbar-primary",
         key: "primary-bar",
       },
@@ -231,32 +246,34 @@ const FilterBar = createClass({
       )
     ];
 
     if (filteredMessagesCount.global > 0) {
       children.push(this.renderFilteredMessagesBar());
     }
 
     if (filterBarVisible) {
-      children.push(this.renderFiltersConfigBar());
+      children.push(this.renderFiltersConfigBar({ persistLogs }));
     }
 
     return (
       dom.div({
         className: "webconsole-filteringbar-wrapper",
         ref: node => {
           this.wrapperNode = node;
         }
       }, ...children
       )
     );
   }
 });
 
 function mapStateToProps(state) {
+  let uiState = getAllUi(state);
   return {
     filter: getAllFilters(state),
-    filterBarVisible: getAllUi(state).filterBarVisible,
+    filterBarVisible: uiState.filterBarVisible,
+    persistLogs: uiState.persistLogs,
     filteredMessagesCount: getFilteredMessagesCount(state),
   };
 }
 
 module.exports = connect(mapStateToProps)(FilterBar);
diff --git a/devtools/client/webconsole/new-console-output/components/filter-checkbox.js b/devtools/client/webconsole/new-console-output/components/filter-checkbox.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/components/filter-checkbox.js
@@ -0,0 +1,30 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const {
+  DOM: dom,
+  PropTypes
+} = require("devtools/client/shared/vendor/react");
+const actions = require("devtools/client/webconsole/new-console-output/actions/index");
+
+FilterCheckbox.displayName = "FilterCheckbox";
+
+FilterCheckbox.propTypes = {
+  label: PropTypes.string.isRequired,
+  title: PropTypes.string,
+  checked: PropTypes.bool.isRequired,
+  onChange: PropTypes.func.isRequired,
+};
+
+function FilterCheckbox(props) {
+  const {checked, label, title, onChange} = props;
+  return dom.label({ title }, dom.input({
+    type: "checkbox",
+    checked,
+    onChange,
+  }), label);
+}
+
+module.exports = FilterCheckbox;
diff --git a/devtools/client/webconsole/new-console-output/components/moz.build b/devtools/client/webconsole/new-console-output/components/moz.build
--- a/devtools/client/webconsole/new-console-output/components/moz.build
+++ b/devtools/client/webconsole/new-console-output/components/moz.build
@@ -8,15 +8,16 @@ DIRS += [
 ]
 
 DevToolsModules(
     'collapse-button.js',
     'console-output.js',
     'console-table.js',
     'filter-bar.js',
     'filter-button.js',
+    'filter-checkbox.js',
     'grip-message-body.js',
     'message-container.js',
     'message-icon.js',
     'message-indent.js',
     'message-repeat.js',
     'message.js'
 )
diff --git a/devtools/client/webconsole/new-console-output/constants.js b/devtools/client/webconsole/new-console-output/constants.js
--- a/devtools/client/webconsole/new-console-output/constants.js
+++ b/devtools/client/webconsole/new-console-output/constants.js
@@ -17,32 +17,34 @@ const actionTypes = {
   MESSAGE_OBJECT_ENTRIES_RECEIVE: "MESSAGE_OBJECT_ENTRIES_RECEIVE",
   REMOVED_ACTORS_CLEAR: "REMOVED_ACTORS_CLEAR",
   TIMESTAMPS_TOGGLE: "TIMESTAMPS_TOGGLE",
   FILTER_TOGGLE: "FILTER_TOGGLE",
   FILTER_TEXT_SET: "FILTER_TEXT_SET",
   FILTERS_CLEAR: "FILTERS_CLEAR",
   DEFAULT_FILTERS_RESET: "DEFAULT_FILTERS_RESET",
   FILTER_BAR_TOGGLE: "FILTER_BAR_TOGGLE",
+  PERSIST_TOGGLE: "PERSIST_TOGGLE",
 };
 
 const prefs = {
   PREFS: {
     FILTER: {
       ERROR: "devtools.webconsole.filter.error",
       WARN: "devtools.webconsole.filter.warn",
       INFO: "devtools.webconsole.filter.info",
       LOG: "devtools.webconsole.filter.log",
       DEBUG: "devtools.webconsole.filter.debug",
       CSS: "devtools.webconsole.filter.css",
       NET: "devtools.webconsole.filter.net",
       NETXHR: "devtools.webconsole.filter.netxhr",
     },
     UI: {
-      FILTER_BAR: "devtools.webconsole.ui.filterbar"
+      FILTER_BAR: "devtools.webconsole.ui.filterbar",
+      PERSIST: "devtools.webconsole.persistlog",
     }
   }
 };
 
 const FILTERS = {
   CSS: "css",
   DEBUG: "debug",
   ERROR: "error",
diff --git a/devtools/client/webconsole/new-console-output/reducers/ui.js b/devtools/client/webconsole/new-console-output/reducers/ui.js
--- a/devtools/client/webconsole/new-console-output/reducers/ui.js
+++ b/devtools/client/webconsole/new-console-output/reducers/ui.js
@@ -2,30 +2,34 @@
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const {
   FILTER_BAR_TOGGLE,
+  PERSIST_TOGGLE,
   TIMESTAMPS_TOGGLE
 } = require("devtools/client/webconsole/new-console-output/constants");
 const Immutable = require("devtools/client/shared/vendor/immutable");
 
 const UiState = Immutable.Record({
   filterBarVisible: false,
+  persistLogs: false,
   filteredMessageVisible: false,
   timestampsVisible: true,
 });
 
 function ui(state = new UiState(), action) {
   switch (action.type) {
     case FILTER_BAR_TOGGLE:
       return state.set("filterBarVisible", !state.filterBarVisible);
+    case PERSIST_TOGGLE:
+      return state.set("persistLogs", !state.persistLogs);
     case TIMESTAMPS_TOGGLE:
       return state.set("timestampsVisible", action.visible);
   }
 
   return state;
 }
 
 module.exports = {
diff --git a/devtools/client/webconsole/new-console-output/store.js b/devtools/client/webconsole/new-console-output/store.js
--- a/devtools/client/webconsole/new-console-output/store.js
+++ b/devtools/client/webconsole/new-console-output/store.js
@@ -37,16 +37,17 @@ function configureStore(hud, options = {
       debug: Services.prefs.getBoolPref(PREFS.FILTER.DEBUG),
       log: Services.prefs.getBoolPref(PREFS.FILTER.LOG),
       css: Services.prefs.getBoolPref(PREFS.FILTER.CSS),
       net: Services.prefs.getBoolPref(PREFS.FILTER.NET),
       netxhr: Services.prefs.getBoolPref(PREFS.FILTER.NETXHR),
     }),
     ui: new UiState({
       filterBarVisible: Services.prefs.getBoolPref(PREFS.UI.FILTER_BAR),
+      persistLogs: Services.prefs.getBoolPref(PREFS.UI.PERSIST),
     })
   };
 
   return createStore(
     createRootReducer(),
     initialState,
     compose(applyMiddleware(thunk), enableActorReleaser(hud), enableBatching())
   );
