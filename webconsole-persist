# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  4f74e2bdb42ee86f1bf5055e9cb31c8a860fd03c
Bug 1307881 - Part 2 - Provide a UI within the Web Console for managing persistence

MozReview-Commit-ID: GVkOms1o74c

diff --git a/devtools/client/locales/en-US/webconsole.properties b/devtools/client/locales/en-US/webconsole.properties
--- a/devtools/client/locales/en-US/webconsole.properties
+++ b/devtools/client/locales/en-US/webconsole.properties
@@ -304,8 +304,13 @@ webconsole.requestsFilterButton.label=Re
 # This is a semi-colon list of plural forms.
 # See: http://developer.mozilla.org/en/docs/Localization_and_Plurals
 # example: 345 items hidden by filters.
 webconsole.filteredMessages.label=#1 item hidden by filters;#1 items hidden by filters
 
 # Label used as the text of the "Reset filters" button in the "filtered messages" bar.
 # It resets the default filters of the console to their original values.
 webconsole.resetFiltersButton.label=Reset filters
+
+# LOCALIZATION NOTE (webconsole.enablePersistentLogs.label)
+webconsole.enablePersistentLogs.label=Persist Logs
+# LOCALIZATION NOTE (webconsole.enablePersistentLogs.tooltip)
+webconsole.enablePersistentLogs.tooltip=If you enable this option the output will not be cleared each time you navigate to a new page
diff --git a/devtools/client/themes/webconsole.css b/devtools/client/themes/webconsole.css
--- a/devtools/client/themes/webconsole.css
+++ b/devtools/client/themes/webconsole.css
@@ -772,22 +772,28 @@ a.learn-more-link.webconsole-learn-more-
   so we don't allow to shrink it */
   flex: 1 0 200px;
 }
 
 .devtools-toolbar.webconsole-filterbar-secondary {
   display: flex;
   width: 100%;
   align-items: center;
+  -moz-user-select: none;
 }
 
 .webconsole-filterbar-primary .devtools-plaininput {
   flex: 1 1 100%;
 }
 
+.webconsole-filterbar-primary .filter-checkbox {
+  flex-shrink: 0;
+  margin: 0 3px;
+}
+
 .webconsole-filterbar-secondary .devtools-separator {
   margin: 0 5px;
 }
 
 .webconsole-filterbar-filtered-messages {
   /* Needed so the bar takes the whole horizontal space when it is wrapped */
   flex-grow: 1;
   color: var(--theme-comment);
diff --git a/devtools/client/webconsole/new-console-output/actions/ui.js b/devtools/client/webconsole/new-console-output/actions/ui.js
--- a/devtools/client/webconsole/new-console-output/actions/ui.js
+++ b/devtools/client/webconsole/new-console-output/actions/ui.js
@@ -6,33 +6,45 @@
 
 "use strict";
 
 const { getAllUi } = require("devtools/client/webconsole/new-console-output/selectors/ui");
 const Services = require("Services");
 
 const {
   FILTER_BAR_TOGGLE,
+  PERSIST_TOGGLE,
   PREFS,
   TIMESTAMPS_TOGGLE,
 } = require("devtools/client/webconsole/new-console-output/constants");
 
 function filterBarToggle(show) {
   return (dispatch, getState) => {
     dispatch({
       type: FILTER_BAR_TOGGLE,
     });
     const uiState = getAllUi(getState());
     Services.prefs.setBoolPref(PREFS.UI.FILTER_BAR, uiState.get("filterBarVisible"));
   };
 }
 
+function persistToggle(show) {
+  return (dispatch, getState) => {
+    dispatch({
+      type: PERSIST_TOGGLE,
+    });
+    const uiState = getAllUi(getState());
+    Services.prefs.setBoolPref(PREFS.UI.PERSIST, uiState.get("persistLogs"));
+  };
+}
+
 function timestampsToggle(visible) {
   return {
     type: TIMESTAMPS_TOGGLE,
     visible,
   };
 }
 
 module.exports = {
   filterBarToggle,
+  persistToggle,
   timestampsToggle,
 };
diff --git a/devtools/client/webconsole/new-console-output/components/filter-bar.js b/devtools/client/webconsole/new-console-output/components/filter-bar.js
--- a/devtools/client/webconsole/new-console-output/components/filter-bar.js
+++ b/devtools/client/webconsole/new-console-output/components/filter-bar.js
@@ -7,87 +7,92 @@ const {
   createClass,
   DOM: dom,
   PropTypes
 } = require("devtools/client/shared/vendor/react");
 const { connect } = require("devtools/client/shared/vendor/react-redux");
 const { getAllFilters } = require("devtools/client/webconsole/new-console-output/selectors/filters");
 const { getFilteredMessagesCount } = require("devtools/client/webconsole/new-console-output/selectors/messages");
 const { getAllUi } = require("devtools/client/webconsole/new-console-output/selectors/ui");
-const {
-  filterBarToggle,
-  defaultFiltersReset,
-  filterTextSet,
-  messagesClear,
-} = require("devtools/client/webconsole/new-console-output/actions/index");
+const actions = require("devtools/client/webconsole/new-console-output/actions/index");
 const { l10n } = require("devtools/client/webconsole/new-console-output/utils/messages");
 const { PluralForm } = require("devtools/shared/plural-form");
 const {
   DEFAULT_FILTERS,
   FILTERS,
 } = require("../constants");
 
 const FilterButton = require("devtools/client/webconsole/new-console-output/components/filter-button");
+const FilterCheckbox = require("devtools/client/webconsole/new-console-output/components/filter-checkbox");
 
 const FilterBar = createClass({
 
   displayName: "FilterBar",
 
   propTypes: {
     dispatch: PropTypes.func.isRequired,
     filter: PropTypes.object.isRequired,
     serviceContainer: PropTypes.shape({
       attachRefToHud: PropTypes.func.isRequired,
     }).isRequired,
     filterBarVisible: PropTypes.bool.isRequired,
+    persistLogs: PropTypes.bool.isRequired,
     filteredMessagesCount: PropTypes.object.isRequired,
   },
 
   shouldComponentUpdate(nextProps, nextState) {
     if (nextProps.filter !== this.props.filter) {
       return true;
     }
 
     if (nextProps.filterBarVisible !== this.props.filterBarVisible) {
       return true;
     }
 
+    if (nextProps.persistLogs !== this.props.persistLogs) {
+      return true;
+    }
+
     if (
       JSON.stringify(nextProps.filteredMessagesCount)
       !== JSON.stringify(this.props.filteredMessagesCount)
     ) {
       return true;
     }
 
     return false;
   },
 
   componentDidMount() {
     this.props.serviceContainer.attachRefToHud("filterBox",
       this.wrapperNode.querySelector(".text-filter"));
   },
 
   onClickMessagesClear: function () {
-    this.props.dispatch(messagesClear());
+    this.props.dispatch(actions.messagesClear());
   },
 
   onClickFilterBarToggle: function () {
-    this.props.dispatch(filterBarToggle());
+    this.props.dispatch(actions.filterBarToggle());
   },
 
   onClickRemoveAllFilters: function () {
-    this.props.dispatch(defaultFiltersReset());
+    this.props.dispatch(actions.defaultFiltersReset());
   },
 
   onClickRemoveTextFilter: function () {
-    this.props.dispatch(filterTextSet(""));
+    this.props.dispatch(actions.filterTextSet(""));
   },
 
   onSearchInput: function (e) {
-    this.props.dispatch(filterTextSet(e.target.value));
+    this.props.dispatch(actions.filterTextSet(e.target.value));
+  },
+
+  onChangePersistToggle: function () {
+    this.props.dispatch(actions.persistToggle());
   },
 
   renderFiltersConfigBar() {
     const {
       dispatch,
       filter,
       filteredMessagesCount,
     } = this.props;
@@ -155,17 +160,17 @@ const FilterBar = createClass({
         filterKey: FILTERS.NETXHR,
         dispatch
       }),
       FilterButton({
         active: filter[FILTERS.NET],
         label: l10n.getStr("webconsole.requestsFilterButton.label"),
         filterKey: FILTERS.NET,
         dispatch
-      })
+      }),
     );
   },
 
   renderFilteredMessagesBar() {
     const {
       filteredMessagesCount
     } = this.props;
     const {
@@ -197,16 +202,17 @@ const FilterBar = createClass({
       }, l10n.getStr("webconsole.resetFiltersButton.label"))
     );
   },
 
   render() {
     const {
       filter,
       filterBarVisible,
+      persistLogs,
       filteredMessagesCount,
     } = this.props;
 
     let children = [
       dom.div({
         className: "devtools-toolbar webconsole-filterbar-primary",
         key: "primary-bar",
       },
@@ -222,16 +228,22 @@ const FilterBar = createClass({
           onClick: this.onClickFilterBarToggle
         }),
         dom.input({
           className: "devtools-plaininput text-filter",
           type: "search",
           value: filter.text,
           placeholder: l10n.getStr("webconsole.filterInput.placeholder"),
           onInput: this.onSearchInput
+        }),
+        FilterCheckbox({
+          label: l10n.getStr("webconsole.enablePersistentLogs.label"),
+          title: l10n.getStr("webconsole.enablePersistentLogs.tooltip"),
+          onChange: this.onChangePersistToggle,
+          checked: persistLogs,
         })
       )
     ];
 
     if (filteredMessagesCount.global > 0) {
       children.push(this.renderFilteredMessagesBar());
     }
 
@@ -247,16 +259,18 @@ const FilterBar = createClass({
         }
       }, ...children
       )
     );
   }
 });
 
 function mapStateToProps(state) {
+  let uiState = getAllUi(state);
   return {
     filter: getAllFilters(state),
-    filterBarVisible: getAllUi(state).filterBarVisible,
+    filterBarVisible: uiState.filterBarVisible,
+    persistLogs: uiState.persistLogs,
     filteredMessagesCount: getFilteredMessagesCount(state),
   };
 }
 
 module.exports = connect(mapStateToProps)(FilterBar);
diff --git a/devtools/client/webconsole/new-console-output/components/filter-checkbox.js b/devtools/client/webconsole/new-console-output/components/filter-checkbox.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/components/filter-checkbox.js
@@ -0,0 +1,30 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const {
+  DOM: dom,
+  PropTypes
+} = require("devtools/client/shared/vendor/react");
+const actions = require("devtools/client/webconsole/new-console-output/actions/index");
+
+FilterCheckbox.displayName = "FilterCheckbox";
+
+FilterCheckbox.propTypes = {
+  label: PropTypes.string.isRequired,
+  title: PropTypes.string,
+  checked: PropTypes.bool.isRequired,
+  onChange: PropTypes.func.isRequired,
+};
+
+function FilterCheckbox(props) {
+  const {checked, label, title, onChange} = props;
+  return dom.label({ title, className: "filter-checkbox" }, dom.input({
+    type: "checkbox",
+    checked,
+    onChange,
+  }), label);
+}
+
+module.exports = FilterCheckbox;
diff --git a/devtools/client/webconsole/new-console-output/components/moz.build b/devtools/client/webconsole/new-console-output/components/moz.build
--- a/devtools/client/webconsole/new-console-output/components/moz.build
+++ b/devtools/client/webconsole/new-console-output/components/moz.build
@@ -8,15 +8,16 @@ DIRS += [
 ]
 
 DevToolsModules(
     'collapse-button.js',
     'console-output.js',
     'console-table.js',
     'filter-bar.js',
     'filter-button.js',
+    'filter-checkbox.js',
     'grip-message-body.js',
     'message-container.js',
     'message-icon.js',
     'message-indent.js',
     'message-repeat.js',
     'message.js'
 )
diff --git a/devtools/client/webconsole/new-console-output/constants.js b/devtools/client/webconsole/new-console-output/constants.js
--- a/devtools/client/webconsole/new-console-output/constants.js
+++ b/devtools/client/webconsole/new-console-output/constants.js
@@ -17,32 +17,34 @@ const actionTypes = {
   MESSAGE_OBJECT_ENTRIES_RECEIVE: "MESSAGE_OBJECT_ENTRIES_RECEIVE",
   REMOVED_ACTORS_CLEAR: "REMOVED_ACTORS_CLEAR",
   TIMESTAMPS_TOGGLE: "TIMESTAMPS_TOGGLE",
   FILTER_TOGGLE: "FILTER_TOGGLE",
   FILTER_TEXT_SET: "FILTER_TEXT_SET",
   FILTERS_CLEAR: "FILTERS_CLEAR",
   DEFAULT_FILTERS_RESET: "DEFAULT_FILTERS_RESET",
   FILTER_BAR_TOGGLE: "FILTER_BAR_TOGGLE",
+  PERSIST_TOGGLE: "PERSIST_TOGGLE",
 };
 
 const prefs = {
   PREFS: {
     FILTER: {
       ERROR: "devtools.webconsole.filter.error",
       WARN: "devtools.webconsole.filter.warn",
       INFO: "devtools.webconsole.filter.info",
       LOG: "devtools.webconsole.filter.log",
       DEBUG: "devtools.webconsole.filter.debug",
       CSS: "devtools.webconsole.filter.css",
       NET: "devtools.webconsole.filter.net",
       NETXHR: "devtools.webconsole.filter.netxhr",
     },
     UI: {
-      FILTER_BAR: "devtools.webconsole.ui.filterbar"
+      FILTER_BAR: "devtools.webconsole.ui.filterbar",
+      PERSIST: "devtools.webconsole.persistlog",
     }
   }
 };
 
 const FILTERS = {
   CSS: "css",
   DEBUG: "debug",
   ERROR: "error",
diff --git a/devtools/client/webconsole/new-console-output/reducers/ui.js b/devtools/client/webconsole/new-console-output/reducers/ui.js
--- a/devtools/client/webconsole/new-console-output/reducers/ui.js
+++ b/devtools/client/webconsole/new-console-output/reducers/ui.js
@@ -2,29 +2,33 @@
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const {
   FILTER_BAR_TOGGLE,
+  PERSIST_TOGGLE,
   TIMESTAMPS_TOGGLE
 } = require("devtools/client/webconsole/new-console-output/constants");
 const Immutable = require("devtools/client/shared/vendor/immutable");
 
 const UiState = Immutable.Record({
   filterBarVisible: false,
+  persistLogs: false,
   timestampsVisible: true,
 });
 
 function ui(state = new UiState(), action) {
   switch (action.type) {
     case FILTER_BAR_TOGGLE:
       return state.set("filterBarVisible", !state.filterBarVisible);
+    case PERSIST_TOGGLE:
+      return state.set("persistLogs", !state.persistLogs);
     case TIMESTAMPS_TOGGLE:
       return state.set("timestampsVisible", action.visible);
   }
 
   return state;
 }
 
 module.exports = {
diff --git a/devtools/client/webconsole/new-console-output/store.js b/devtools/client/webconsole/new-console-output/store.js
--- a/devtools/client/webconsole/new-console-output/store.js
+++ b/devtools/client/webconsole/new-console-output/store.js
@@ -37,16 +37,17 @@ function configureStore(hud, options = {
       debug: Services.prefs.getBoolPref(PREFS.FILTER.DEBUG),
       log: Services.prefs.getBoolPref(PREFS.FILTER.LOG),
       css: Services.prefs.getBoolPref(PREFS.FILTER.CSS),
       net: Services.prefs.getBoolPref(PREFS.FILTER.NET),
       netxhr: Services.prefs.getBoolPref(PREFS.FILTER.NETXHR),
     }),
     ui: new UiState({
       filterBarVisible: Services.prefs.getBoolPref(PREFS.UI.FILTER_BAR),
+      persistLogs: Services.prefs.getBoolPref(PREFS.UI.PERSIST),
     })
   };
 
   return createStore(
     createRootReducer(),
     initialState,
     compose(applyMiddleware(thunk), enableActorReleaser(hud), enableBatching())
   );
diff --git a/devtools/client/webconsole/new-console-output/test/components/filter-bar.test.js b/devtools/client/webconsole/new-console-output/test/components/filter-bar.test.js
--- a/devtools/client/webconsole/new-console-output/test/components/filter-bar.test.js
+++ b/devtools/client/webconsole/new-console-output/test/components/filter-bar.test.js
@@ -205,17 +205,17 @@ describe("FilterBar component:", () => {
     );
 
     let buttons = [
       filterBtn({ label: "Errors", filterKey: FILTERS.ERROR }),
       filterBtn({ label: "Warnings", filterKey: FILTERS.WARN }),
       filterBtn({ label: "Logs", filterKey: FILTERS.LOG }),
       filterBtn({ label: "Info", filterKey: FILTERS.INFO }),
       filterBtn({ label: "Debug", filterKey: FILTERS.DEBUG }),
-      DOM.span({
+      DOM.div({
         className: "devtools-separator",
       }),
       filterBtn({ label: "CSS", filterKey: "css", active: false }),
       filterBtn({ label: "XHR", filterKey: "netxhr", active: false }),
       filterBtn({ label: "Requests", filterKey: "net", active: false }),
     ];
 
     secondaryBar.children().forEach((child, index) => {
@@ -237,9 +237,20 @@ describe("FilterBar component:", () => {
 
   it("sets filter text when text is typed", () => {
     const store = setupStore([]);
 
     const wrapper = mount(Provider({store}, FilterBar({ serviceContainer })));
     wrapper.find(".devtools-plaininput").simulate("input", { target: { value: "a" } });
     expect(store.getState().filters.text).toBe("a");
   });
+
+  it("toggles persist logs when checkbox is clicked", () => {
+    const store = setupStore([]);
+
+    expect(getAllUi(store.getState()).persistLogs).toBe(false);
+
+    const wrapper = mount(Provider({store}, FilterBar({ serviceContainer })));
+    wrapper.find(".filter-checkbox input").simulate("change");
+
+    expect(getAllUi(store.getState()).persistLogs).toBe(true);
+  });
 });
diff --git a/devtools/client/webconsole/new-console-output/test/fixtures/Services.js b/devtools/client/webconsole/new-console-output/test/fixtures/Services.js
--- a/devtools/client/webconsole/new-console-output/test/fixtures/Services.js
+++ b/devtools/client/webconsole/new-console-output/test/fixtures/Services.js
@@ -15,15 +15,16 @@ module.exports = {
       return null;
     },
     getBoolPref: pref => {
       const falsey = [
         PREFS.FILTER.CSS,
         PREFS.FILTER.NET,
         PREFS.FILTER.NETXHR,
         PREFS.UI.FILTER_BAR,
+        PREFS.UI.PERSIST,
       ];
       return !falsey.includes(pref);
     },
     setBoolPref: () => {},
     clearUserPref: () => {},
   }
 };
diff --git a/devtools/client/webconsole/new-console-output/test/mochitest/browser.ini b/devtools/client/webconsole/new-console-output/test/mochitest/browser.ini
--- a/devtools/client/webconsole/new-console-output/test/mochitest/browser.ini
+++ b/devtools/client/webconsole/new-console-output/test/mochitest/browser.ini
@@ -49,16 +49,17 @@ skip-if = (os == 'linux' && bits == 32 &
 [browser_webconsole_location_styleeditor_link.js]
 [browser_webconsole_logErrorInPage.js]
 [browser_webconsole_network_messages_click.js]
 [browser_webconsole_nodes_highlight.js]
 [browser_webconsole_nodes_select.js]
 [browser_webconsole_object_inspector_entries.js]
 [browser_webconsole_object_inspector.js]
 [browser_webconsole_observer_notifications.js]
+[browser_webconsole_persist.js]
 [browser_webconsole_scroll.js]
 [browser_webconsole_shows_reqs_in_netmonitor.js]
 [browser_webconsole_sourcemap_error.js]
 [browser_webconsole_sourcemap_nosource.js]
 [browser_webconsole_stacktrace_location_debugger_link.js]
 [browser_webconsole_stacktrace_location_scratchpad_link.js]
 [browser_webconsole_string.js]
 [browser_webconsole_timestamps.js]
diff --git a/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_persist.js b/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_persist.js
new file mode 100644
diff --git a/devtools/client/webconsole/test/browser_console_clear_on_reload.js b/devtools/client/webconsole/test/browser_console_clear_on_reload.js
--- a/devtools/client/webconsole/test/browser_console_clear_on_reload.js
+++ b/devtools/client/webconsole/test/browser_console_clear_on_reload.js
@@ -3,84 +3,105 @@
 /* Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/ */
 
 // Check that clear output on page reload works - bug 705921.
 // Check that clear output and page reload remove the sidebar - bug 971967.
 
 "use strict";
 
-add_task(function* () {
-  const PREF = "devtools.webconsole.persistlog";
-  const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
-                   "test/test-console.html";
+const TEST_URI = "http://example.com/browser/devtools/client/webconsole/new-console-output/test/mochitest/test-console.html";
 
-  Services.prefs.setBoolPref(PREF, false);
-  registerCleanupFunction(() => Services.prefs.clearUserPref(PREF));
+add_task(async function () {
+  await SpecialPowers.pushPrefEnv({"set": [
+    ["devtools.webconsole.persistlog", false]
+  ]});
 
-  yield loadTab(TEST_URI);
-
-  let hud = yield openConsole();
-  ok(hud, "Web Console opened");
+  let hud = await openNewTabAndConsole(TEST_URI);
+  ok(findMessages(hud, "").length == 5,
+    "Messages of all levels shown when filters are on.");
+  await closeToolbox();
+});
 
-  yield openSidebar("fooObj", { name: "testProp", value: "testValue" });
+add_task(async function () {
+  await SpecialPowers.pushPrefEnv({"set": [
+    ["devtools.webconsole.persistlog", true]
+  ]});
 
-  let sidebarClosed = hud.jsterm.once("sidebar-closed");
-  hud.jsterm.clearOutput();
-  yield sidebarClosed;
+  let hud = await openNewTabAndConsole(TEST_URI);
+});
 
-  hud.jsterm.execute("console.log('foobarz1')");
+// add_task(function* () {
+//   const PREF = "devtools.webconsole.persistlog";
+//   const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
+//                    "test/test-console.html";
+
+//   Services.prefs.setBoolPref(PREF, false);
+//   registerCleanupFunction(() => Services.prefs.clearUserPref(PREF));
+
+//   yield loadTab(TEST_URI);
 
-  yield waitForMessages({
-    webconsole: hud,
-    messages: [{
-      text: "foobarz1",
-      category: CATEGORY_WEBDEV,
-      severity: SEVERITY_LOG,
-    }],
-  });
+//   let hud = yield openConsole();
+//   ok(hud, "Web Console opened");
+
+//   yield openSidebar("fooObj", { name: "testProp", value: "testValue" });
 
-  yield openSidebar("fooObj", { name: "testProp", value: "testValue" });
-
-  BrowserReload();
+//   let sidebarClosed = hud.jsterm.once("sidebar-closed");
+//   hud.jsterm.clearOutput();
+//   yield sidebarClosed;
 
-  sidebarClosed = hud.jsterm.once("sidebar-closed");
-  loadBrowser(gBrowser.selectedBrowser);
-  yield sidebarClosed;
+//   hud.jsterm.execute("console.log('foobarz1')");
 
-  hud.jsterm.execute("console.log('foobarz2')");
+//   yield waitForMessages({
+//     webconsole: hud,
+//     messages: [{
+//       text: "foobarz1",
+//       category: CATEGORY_WEBDEV,
+//       severity: SEVERITY_LOG,
+//     }],
+//   });
 
-  yield waitForMessages({
-    webconsole: hud,
-    messages: [{
-      text: "test-console.html",
-      category: CATEGORY_NETWORK,
-    },
-    {
-      text: "foobarz2",
-      category: CATEGORY_WEBDEV,
-      severity: SEVERITY_LOG,
-    }],
-  });
+//   yield openSidebar("fooObj", { name: "testProp", value: "testValue" });
+
+//   BrowserReload();
 
-  is(hud.outputNode.textContent.indexOf("foobarz1"), -1,
-     "foobarz1 has been removed from output");
+//   sidebarClosed = hud.jsterm.once("sidebar-closed");
+//   loadBrowser(gBrowser.selectedBrowser);
+//   yield sidebarClosed;
+
+//   hud.jsterm.execute("console.log('foobarz2')");
 
-  function* openSidebar(objName, expectedObj) {
-    let msg = yield hud.jsterm.execute(objName);
-    ok(msg, "output message found");
+//   yield waitForMessages({
+//     webconsole: hud,
+//     messages: [{
+//       text: "test-console.html",
+//       category: CATEGORY_NETWORK,
+//     },
+//     {
+//       text: "foobarz2",
+//       category: CATEGORY_WEBDEV,
+//       severity: SEVERITY_LOG,
+//     }],
+//   });
 
-    let anchor = msg.querySelector("a");
-    let body = msg.querySelector(".message-body");
-    ok(anchor, "object anchor");
-    ok(body, "message body");
+//   is(hud.outputNode.textContent.indexOf("foobarz1"), -1,
+//      "foobarz1 has been removed from output");
 
-    yield EventUtils.synthesizeMouse(anchor, 2, 2, {}, hud.iframeWindow);
+//   function* openSidebar(objName, expectedObj) {
+//     let msg = yield hud.jsterm.execute(objName);
+//     ok(msg, "output message found");
 
-    let vviewVar = yield hud.jsterm.once("variablesview-fetched");
-    let vview = vviewVar._variablesView;
-    ok(vview, "variables view object exists");
+//     let anchor = msg.querySelector("a");
+//     let body = msg.querySelector(".message-body");
+//     ok(anchor, "object anchor");
+//     ok(body, "message body");
 
-    yield findVariableViewProperties(vviewVar, [
-      expectedObj,
-    ], { webconsole: hud });
-  }
-});
+//     yield EventUtils.synthesizeMouse(anchor, 2, 2, {}, hud.iframeWindow);
+
+//     let vviewVar = yield hud.jsterm.once("variablesview-fetched");
+//     let vview = vviewVar._variablesView;
+//     ok(vview, "variables view object exists");
+
+//     yield findVariableViewProperties(vviewVar, [
+//       expectedObj,
+//     ], { webconsole: hud });
+//   }
+// });
