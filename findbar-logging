# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  b439c4d28cf77ad583781f6a55b5250be3474ea2

diff --git a/browser/base/content/tabbrowser.js b/browser/base/content/tabbrowser.js
--- a/browser/base/content/tabbrowser.js
+++ b/browser/base/content/tabbrowser.js
@@ -2995,16 +2995,17 @@ window._gBrowser = {
     this._tabFilters.delete(aTab);
     this._tabListeners.delete(aTab);
 
     var browser = this.getBrowserForTab(aTab);
 
     if (aTab.linkedPanel) {
       this._outerWindowIDBrowserMap.delete(browser.outerWindowID);
 
+      // XXX: Update this comment
       // Because of the way XBL works (fields just set JS
       // properties on the element) and the code we have in place
       // to preserve the JS objects for any elements that have
       // JS properties set on them, the browser element won't be
       // destroyed until the document goes away.  So we force a
       // cleanup ourselves.
       // This has to happen before we remove the child so that the
       // XBL implementation of nsIObserver still works.
diff --git a/toolkit/content/widgets/browser.js b/toolkit/content/widgets/browser.js
--- a/toolkit/content/widgets/browser.js
+++ b/toolkit/content/widgets/browser.js
@@ -3,21 +3,28 @@
   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 // This is loaded into all XUL windows. Wrap in a block to prevent
 // leaking to window scope.
 {
 
-let LOG = () => { };// console.log.bind(null, "browser logging:");
+function LOG() {
+  console.log.apply(null, ["browser logging:", ...arguments]);
+}
+
 let browserNumber = 0;
 const WINDOW_ID = window.windowUtils.currentInnerWindowID;
 /* globals XULFrameElement */
 
+// window.addEventListener("unload", () => {
+
+// })
+
 class MozBrowser extends XULFrameElement {
 
   static get observedAttributes() {
     return ["remote"];
   }
 
   get logString() {
     return `<browser remote='${this.isRemoteBrowser ? "true" : "false"}'> #${this.browserNumber} in window: ${WINDOW_ID}`;
@@ -150,29 +157,29 @@ class MozBrowser extends XULFrameElement
         event.stopPropagation();
       }
     });
 
   }
 
   destroyOnUnload(e) {
     if (e.originalTarget == document) {
-      window.removeEventListener("unload", this.destroyOnUnload, { mozSystemGroup: true, capture: true });
+      window.removeEventListener("unload", this.destroyOnUnload, { mozSystemGroup: true });
       LOG("Destroying due to unload", this.logString);
       this.destroy();
     }
   }
 
   disconnectedCallback() {
-    window.removeEventListener("unload", this.destroyOnUnload, { mozSystemGroup: true, capture: true });
+    window.removeEventListener("unload", this.destroyOnUnload, { mozSystemGroup: true });
     this.destroy();
   }
 
   connectedCallback() {
-    window.addEventListener("unload", this.destroyOnUnload, { mozSystemGroup: true, capture: true });
+    window.addEventListener("unload", this.destroyOnUnload, { mozSystemGroup: true });
     this.construct();
   }
 
   get autoscrollEnabled() {
     if (this.getAttribute("autoscroll") == "false")
       return false;
 
     return this.mPrefs.getBoolPref("general.autoScroll", true);
diff --git a/toolkit/content/widgets/findbar.js b/toolkit/content/widgets/findbar.js
--- a/toolkit/content/widgets/findbar.js
+++ b/toolkit/content/widgets/findbar.js
@@ -384,17 +384,17 @@ class MozFindbar extends XULElement {
   /**
    * This is necessary because the destructor isn't called when
    * we are removed from a document that is not destroyed. This
    * needs to be explicitly called in this case
    */
   destroy() {
     if (this._destroyed)
       return;
-    window.removeEventListener("unload", this.destroy);
+    window.removeEventListener("unload", this.destroy, true);
     this._destroyed = true;
 
     if (this.browser && this.browser.finder)
       this.browser.finder.destroy();
 
     this.browser = null;
 
     let prefsvc = this._prefsvc;
diff --git a/toolkit/modules/Finder.jsm b/toolkit/modules/Finder.jsm
--- a/toolkit/modules/Finder.jsm
+++ b/toolkit/modules/Finder.jsm
@@ -464,16 +464,17 @@ Finder.prototype = {
       current: 0,
       _currentFound: false,
     };
   },
 
   _getWindow() {
     if (!this._docShell)
       return null;
+    console.log(this._docShell);
     return this._docShell.domWindow;
   },
 
   /**
    * Get the bounding selection rect in CSS px relative to the origin of the
    * top-level content document.
    */
   _getResultRect() {
