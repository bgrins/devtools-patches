# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  f5b4481c9fd50becb35cef02b599198b766fb1bb
Bug 1053898 - traverse light dom

diff --git a/devtools/server/actors/inspector.js b/devtools/server/actors/inspector.js
--- a/devtools/server/actors/inspector.js
+++ b/devtools/server/actors/inspector.js
@@ -3064,24 +3064,34 @@ function isNodeDead(node) {
 function DocumentWalker(node, rootWin,
     whatToShow = nodeFilterConstants.SHOW_ALL,
     filter = standardTreeWalkerFilter,
     skipTo = SKIP_TO_PARENT) {
   if (Cu.isDeadWrapper(rootWin) || !rootWin.location) {
     throw new Error("Got an invalid root window in DocumentWalker");
   }
 
-  this.walker = Cc["@mozilla.org/inspector/deep-tree-walker;1"]
-    .createInstance(Ci.inIDeepTreeWalker);
-  this.walker.showAnonymousContent = true;
-  this.walker.showSubDocuments = true;
-  this.walker.showDocumentsAsNodes = true;
-  this.walker.init(rootWin.document, whatToShow);
+  this.restartWalker = (node) => {
+    let showAnonymousContent = true;
+    if (node.shadowRoot) {
+      showAnonymousContent = false;
+    }
+
+    this.walker = Cc["@mozilla.org/inspector/deep-tree-walker;1"]
+      .createInstance(Ci.inIDeepTreeWalker);
+    this.walker.showAnonymousContent = showAnonymousContent;
+    this.walker.showSubDocuments = false;
+    this.walker.showDocumentsAsNodes = true;
+    this.walker.init(rootWin.document, whatToShow);
+  }
+
   this.filter = filter;
 
+  this.restartWalker(node);
+
   // Make sure that the walker knows about the initial node (which could
   // be skipped due to a filter).
   this.walker.currentNode = this.getStartingNode(node, skipTo);
 }
 
 DocumentWalker.prototype = {
   get whatToShow() {
     return this.walker.whatToShow;
