
# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1538155105 25200
# Node ID 172a7228b43d77a24551d9bfb1391a41cc4c60fe
# Parent  e28e2921e6f4b5e51eefab0642962210a2d81391
Bug XXX - Don't wipe out radioChildren on the radiogroup when a radio is created

For <radio> elements in the markup, we already were working around this nulling
out. All radio elements added after the fact need to go through radiogroup.appendItem,
which takes care of nulling it out anyway

diff --git a/toolkit/content/widgets/radio.js b/toolkit/content/widgets/radio.js
--- a/toolkit/content/widgets/radio.js
+++ b/toolkit/content/widgets/radio.js
@@ -6,16 +6,20 @@
 
 // This is loaded into all XUL windows. Wrap in a block to prevent
 // leaking to window scope.
 {
 
 class MozRadiogroup extends MozBaseControl {
   constructor() {
     super();
+    this._radioChildren = null;
+    this._mutationObserver = new MutationObserver(() => {
+      this._radioChildren = null;
+    });
 
     this.addEventListener("mousedown", (event) => {
       if (this.disabled)
         event.preventDefault();
     });
 
     /**
      * keyboard navigation  Here's how keyboard navigation works in radio groups on Windows:
@@ -105,19 +109,22 @@ class MozRadiogroup extends MozBaseContr
     this.addEventListener("blur", (event) => {
       if (event.originalTarget != this) {
         return;
       }
       this.removeAttribute("focused");
       this.focusedItem = null;
     });
   }
+  disconnectedCallback() {
+    this._mutationObserver.disconnect();
+  }
 
   connectedCallback() {
-    this._radioChildren = null;
+    this._mutationObserver.observe(this, { childList: true });
 
     if (this.getAttribute("disabled") == "true")
       this.disabled = true;
 
     var children = this._getRadioChildren();
     var length = children.length;
     for (var i = 0; i < length; i++) {
       if (children[i].getAttribute("selected") == "true") {
@@ -309,20 +316,16 @@ class MozRadiogroup extends MozBaseContr
   _getRadioChildren() {
     if (this._radioChildren)
       return this._radioChildren;
 
     var radioChildren = [];
     var doc = this.ownerDocument;
 
     if (this.hasChildNodes()) {
-      // Don't store the collected child nodes immediately,
-      // collecting the child nodes could trigger constructors
-      // which would blow away our list.
-
       var iterator = doc.createTreeWalker(this,
         NodeFilter.SHOW_ELEMENT,
         this._filterRadioGroup);
       while (iterator.nextNode())
         radioChildren.push(iterator.currentNode);
       return this._radioChildren = radioChildren;
     }
 
diff --git a/toolkit/content/widgets/radio.xml b/toolkit/content/widgets/radio.xml
--- a/toolkit/content/widgets/radio.xml
+++ b/toolkit/content/widgets/radio.xml
@@ -15,40 +15,16 @@
       <xul:image class="radio-check" xbl:inherits="disabled,selected"/>
       <xul:hbox class="radio-label-box" align="center" flex="1">
         <xul:image class="radio-icon" xbl:inherits="src"/>
         <xul:label class="radio-label" xbl:inherits="xbl:text=label,accesskey,crop" flex="1"/>
       </xul:hbox>
     </content>
 
     <implementation implements="nsIDOMXULSelectControlItemElement">
-      <constructor>
-        <![CDATA[
-          // Just clear out the parent's cached list of radio children
-          var control = this.control;
-          if (control)
-            control._radioChildren = null;
-        ]]>
-      </constructor>
-      <destructor>
-        <![CDATA[
-          if (!this.control)
-            return;
-
-          var radioList = this.control._radioChildren;
-          if (!radioList)
-            return;
-          for (var i = 0; i < radioList.length; ++i) {
-            if (radioList[i] == this) {
-              radioList.splice(i, 1);
-              return;
-            }
-          }
-        ]]>
-      </destructor>
       <property name="value" onset="this.setAttribute('value', val); return val;"
                              onget="return this.getAttribute('value');"/>
       <property name="selected" readonly="true">
         <getter>
           <![CDATA[
             return this.hasAttribute("selected");
           ]]>
         </getter>
