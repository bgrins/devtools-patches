# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  a629a6c47b05fd7ac5f5834620356a40b5b6a32b
Bug 1213932 - Restrict ServiceWorker logging to windows that match navigator.serviceWorker.controller.scriptURL;r=past

diff --git a/devtools/client/shared/frame-script-utils.js b/devtools/client/shared/frame-script-utils.js
--- a/devtools/client/shared/frame-script-utils.js
+++ b/devtools/client/shared/frame-script-utils.js
@@ -28,16 +28,36 @@ addMessageListener("devtools:test:reload
   content.location.reload(data.forceget);
 });
 
 addMessageListener("devtools:test:console", function ({ data }) {
   let method = data.shift();
   content.console[method].apply(content.console, data);
 });
 
+// A helper frame-script for service worker tests.
+addMessageListener("devtools:sw-test:register", function(msg) {
+  content.navigator.serviceWorker.register("serviceworker.js")
+    .then(swr => {
+      sendAsyncMessage("devtools:sw-test:register", {success: true});
+    }, error => {
+      sendAsyncMessage("devtools:sw-test:register", {success: false});
+    });
+});
+
+addMessageListener("devtools:sw-test:unregister", function(msg) {
+  content.navigator.serviceWorker.getRegistration().then(swr => {
+    swr.unregister().then(result => {
+      sendAsyncMessage("devtools:sw-test:unregister",
+                       {success: result ? true : false});
+    });
+  });
+});
+
+
 /**
  * Performs a single XMLHttpRequest and returns a promise that resolves once
  * the request has loaded.
  *
  * @param Object data
  *        { method: the request method (default: "GET"),
  *          url: the url to request (default: content.location.href),
  *          body: the request body to send (default: ""),
diff --git a/devtools/shared/webconsole/test/chrome.ini b/devtools/shared/webconsole/test/chrome.ini
--- a/devtools/shared/webconsole/test/chrome.ini
+++ b/devtools/shared/webconsole/test/chrome.ini
@@ -1,15 +1,16 @@
 [DEFAULT]
 tags = devtools
 skip-if = buildapp == 'b2g'
 support-files =
   common.js
   data.json
   data.json^headers^
+  helper_serviceworker.js
   network_requests_iframe.html
   sandboxed_iframe.html
   console-test-worker.js
 
 [test_basics.html]
 [test_bug819670_getter_throws.html]
 [test_cached_messages.html]
 [test_commands_other.html]
diff --git a/devtools/shared/webconsole/test/helper_serviceworker.js b/devtools/shared/webconsole/test/helper_serviceworker.js
new file mode 100644
--- /dev/null
+++ b/devtools/shared/webconsole/test/helper_serviceworker.js
@@ -0,0 +1,1 @@
+console.log("Hello from serviceworker");
diff --git a/devtools/shared/webconsole/test/test_consoleapi_innerID.html b/devtools/shared/webconsole/test/test_consoleapi_innerID.html
--- a/devtools/shared/webconsole/test/test_consoleapi_innerID.html
+++ b/devtools/shared/webconsole/test/test_consoleapi_innerID.html
@@ -5,16 +5,17 @@
   <title>Test for the innerID property of the Console API</title>
   <script type="text/javascript" src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
   <script type="text/javascript;version=1.8" src="common.js"></script>
   <!-- Any copyright is dedicated to the Public Domain.
      - http://creativecommons.org/publicdomain/zero/1.0/ -->
 </head>
 <body>
 <p>Test for the Console API</p>
+<iframe id="content-iframe" src="https://example.com/chrome/devtools/shared/webconsole/test/sandboxed_iframe.html"></iframe>
 
 <script class="testbody" type="text/javascript;version=1.8">
 SimpleTest.waitForExplicitFinish();
 
 let expectedConsoleCalls = [];
 
 function doConsoleCalls(aState)
 {
@@ -109,17 +110,22 @@ function doConsoleCalls(aState)
           type: "longString",
           initial: longString.substring(0,
             DebuggerServer.LONG_STRING_INITIAL_LENGTH),
           length: longString.length,
           actor: /[a-z]/,
         },
       ],
     },
+    {
+      level: "log",
+      filename: /helper_serviceworker/,
+    }
   ];
+
 }
 
 function startTest()
 {
   removeEventListener("load", startTest);
 
   attachConsoleToTab(["ConsoleAPI"], onAttach);
 }
@@ -153,12 +159,20 @@ function onConsoleAPICall(aState, aType,
 
   consoleCalls = [];
 
   closeDebugger(aState, function() {
     SimpleTest.finish();
   });
 }
 
+document.getElementById("content-iframe").addEventListener("load", (e) => {
+  // console.log(e);
+  e.target.contentWindow.navigator.serviceWorker.register("https://example.com/chrome/devtools/shared/webconsole/test/helper_serviceworker.js").then(swr => {
+    dump("BRIAN1\n");
+    }, error => {
+    dump("BRIAN2" + error + "\n");
+    });
+});
 addEventListener("load", startTest);
 </script>
 </body>
 </html>
diff --git a/devtools/shared/webconsole/utils.js b/devtools/shared/webconsole/utils.js
--- a/devtools/shared/webconsole/utils.js
+++ b/devtools/shared/webconsole/utils.js
@@ -111,16 +111,43 @@ var WebConsoleUtils = {
     let style = win.getComputedStyle(aFrom);
     aTo.style.fontFamily = style.getPropertyCSSValue("font-family").cssText;
     aTo.style.fontSize = style.getPropertyCSSValue("font-size").cssText;
     aTo.style.fontWeight = style.getPropertyCSSValue("font-weight").cssText;
     aTo.style.fontStyle = style.getPropertyCSSValue("font-style").cssText;
   },
 
   /**
+   */
+  getServiceWorkerScriptURL: function(aWindow)
+  {
+    let swController = aWindow && aWindow.window.navigator.serviceWorker.controller;
+    return swController && swController.scriptURL;
+  },
+
+
+  /**
+   *
+   */
+  getServiceWorkerScriptURLForFrames: function(aWindow)
+  {
+    let innerWindowID = this.getServiceWorkerScriptURL(aWindow);
+    let ids = [innerWindowID];
+
+    if (aWindow.frames) {
+      for (let i = 0; i < aWindow.frames.length; i++) {
+        let frame = aWindow.frames[i];
+        ids = ids.concat(this.getServiceWorkerScriptURLForFrames(frame));
+      }
+    }
+
+    return ids;
+  },
+
+  /**
    * Gets the ID of the inner window of this DOM window.
    *
    * @param nsIDOMWindow aWindow
    * @return integer
    *         Inner ID for the given aWindow.
    */
   getInnerWindowId: function WCU_getInnerWindowId(aWindow)
   {
@@ -930,31 +957,60 @@ ConsoleAPIListener.prototype =
     if (!this.owner) {
       return;
     }
 
     // Here, wrappedJSObject is not a security wrapper but a property defined
     // by the XPCOM component which allows us to unwrap the XPCOM interface and
     // access the underlying JSObject.
     let apiMessage = aMessage.wrappedJSObject;
-    if (this.window && CONSOLE_WORKER_IDS.indexOf(apiMessage.innerID) == -1) {
-      let msgWindow = Services.wm.getCurrentInnerWindowWithId(apiMessage.innerID);
-      if (!msgWindow || !isWindowIncluded(this.window, msgWindow)) {
-        // Not the same window!
-        return;
-      }
-    }
-    if (this.consoleID && apiMessage.consoleID != this.consoleID) {
+
+    if (!this.isMessageRelevant(apiMessage)) {
       return;
     }
 
     this.owner.onConsoleAPICall(apiMessage);
   },
 
   /**
+   * Given a message, return false if it's a ServiceWorker message
+   * but it's not applicable to this window.
+   *
+   * @param message
+   *        The message from the Storage Service
+   * @return bool
+   *         Do we care about this message?
+   */
+  isMessageRelevant: function(message) {
+    // For messages from Service Workers, message.ID is the
+    // script URL for the worker.
+    if (message.innerID === "ServiceWorker" && this.window) {
+      let scriptUrls = WebConsoleUtils.getServiceWorkerScriptURLForFrames(this.window);
+      console.log(scriptUrls);
+      if (scriptUrls.indexOf(message.ID) === -1) {
+        return false;
+      }
+    }
+
+    if (this.window && CONSOLE_WORKER_IDS.indexOf(message.innerID) === -1) {
+      let msgWindow = Services.wm.getCurrentInnerWindowWithId(message.innerID);
+      if (!msgWindow || !isWindowIncluded(this.window, msgWindow)) {
+        // Not the same window!
+        return false;
+      }
+    }
+
+    if (this.consoleID && message.consoleID !== this.consoleID) {
+      return false;
+    }
+
+    return true;
+  },
+
+  /**
    * Get the cached messages for the current inner window and its (i)frames.
    *
    * @param boolean [aIncludePrivate=false]
    *        Tells if you want to also retrieve messages coming from private
    *        windows. Defaults to false.
    * @return array
    *         The array of cached messages.
    */
@@ -974,19 +1030,19 @@ ConsoleAPIListener.prototype =
         messages = messages.concat(ConsoleAPIStorage.getEvents(id));
       });
     }
 
     CONSOLE_WORKER_IDS.forEach((id) => {
       messages = messages.concat(ConsoleAPIStorage.getEvents(id));
     });
 
-    if (this.consoleID) {
-      messages = messages.filter((m) => m.consoleID == this.consoleID);
-    }
+    messages = messages.filter(msg => {
+      return this.isMessageRelevant(msg);
+    });
 
     if (aIncludePrivate) {
       return messages;
     }
 
     return messages.filter((m) => !m.private);
   },
 
