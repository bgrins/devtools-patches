# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  7894e641adfa9f527b58b91ad2d194bd73ab18e5
Bug 1213932 - Service Worker logs in webconsole show up in all tabs (even ones that aren't on the same origin as the worker)

diff --git a/devtools/shared/webconsole/utils.js b/devtools/shared/webconsole/utils.js
--- a/devtools/shared/webconsole/utils.js
+++ b/devtools/shared/webconsole/utils.js
@@ -937,23 +937,42 @@ ConsoleAPIListener.prototype =
     let apiMessage = aMessage.wrappedJSObject;
     if (this.window && CONSOLE_WORKER_IDS.indexOf(apiMessage.innerID) == -1) {
       let msgWindow = Services.wm.getCurrentInnerWindowWithId(apiMessage.innerID);
       if (!msgWindow || !isWindowIncluded(this.window, msgWindow)) {
         // Not the same window!
         return;
       }
     }
+
+    if (!this.doesServiceWorkerMessageApply(apiMessage)) {
+      return;
+    }
+
     if (this.consoleID && apiMessage.consoleID != this.consoleID) {
       return;
     }
 
     this.owner.onConsoleAPICall(apiMessage);
   },
 
+  /*
+
+   */
+  doesServiceWorkerMessageApply: function(message) {
+    // For messages from Service Workers, message.ID is the
+    // script URL for the worker.
+    if (message.innerID !== "ServiceWorker" || !this.window) {
+      return true;
+    }
+
+    let swController = this.window.navigator.serviceWorker.controller;
+    return swController && message.ID === swController.scriptURL;
+  },
+
   /**
    * Get the cached messages for the current inner window and its (i)frames.
    *
    * @param boolean [aIncludePrivate=false]
    *        Tells if you want to also retrieve messages coming from private
    *        windows. Defaults to false.
    * @return array
    *         The array of cached messages.
@@ -971,17 +990,20 @@ ConsoleAPIListener.prototype =
     } else {
       let ids = WebConsoleUtils.getInnerWindowIDsForFrames(this.window);
       ids.forEach((id) => {
         messages = messages.concat(ConsoleAPIStorage.getEvents(id));
       });
     }
 
     CONSOLE_WORKER_IDS.forEach((id) => {
-      messages = messages.concat(ConsoleAPIStorage.getEvents(id));
+      let forWindow = ConsoleAPIStorage.getEvents(id).filter(msg => {
+        return this.doesServiceWorkerMessageApply(msg);
+      });
+      messages = messages.concat(forWindow);
     });
 
     if (this.consoleID) {
       messages = messages.filter((m) => m.consoleID == this.consoleID);
     }
 
     if (aIncludePrivate) {
       return messages;
