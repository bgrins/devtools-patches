
# HG changeset patch
# User Julian Descottes <jdescottes@mozilla.com>
# Date 1480334364 -3600
# Node ID f3510cebedb5bdbfc2d7fd5d7bc61a9ec03e5464
# Parent  98271e6b562e39ad3c8a514b8154c681e0584225
Bug 1291049 - devtools local toolbox integration

MozReview-Commit-ID: Cuphp7VS2OT

diff --git a/devtools/client/inspector/bin/dev-server.js b/devtools/client/inspector/bin/dev-server.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/inspector/bin/dev-server.js
@@ -0,0 +1,66 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/* global __dirname */
+
+"use strict";
+
+const toolbox = require("../node_modules/devtools-local-toolbox/index");
+const feature = require("devtools-config");
+const envConfig = require("../configs/development.json");
+
+const fs = require("fs");
+const path = require("path");
+
+feature.setConfig(envConfig);
+const webpackConfig = require("../webpack.config")(envConfig);
+
+let {app} = toolbox.startDevServer(envConfig, webpackConfig);
+
+function sendFile(res, src, encoding) {
+  const filePath = path.join(__dirname, src);
+  const file = encoding ? fs.readFileSync(filePath, encoding) : fs.readFileSync(filePath);
+  res.send(file);
+}
+
+function addFileRoute(from, to) {
+  app.get(from, function (req, res) {
+    sendFile(res, to, "utf-8");
+  });
+}
+
+// Routes
+addFileRoute("/", "../inspector.xhtml");
+addFileRoute("/markup/markup.xhtml", "../markup/markup.xhtml");
+addFileRoute("/inspector-html-bootstrap.js", "../inspector-html-bootstrap.js");
+
+app.get("/devtools/skin/images/:file.png", function (req, res) {
+  res.contentType("image/png");
+  sendFile(res, "../../themes/images/" + req.params.file + ".png");
+});
+
+app.get("/devtools/skin/images/:file.svg", function (req, res) {
+  res.contentType("image/svg+xml");
+  sendFile(res, "../../themes/images/" + req.params.file + ".svg", "utf-8");
+});
+
+app.get("/images/:file.svg", function (req, res) {
+  res.contentType("image/svg+xml");
+  sendFile(res, "../../themes/images/" + req.params.file + ".svg", "utf-8");
+});
+
+// Redirect chrome:devtools/skin/file.css to ../../themes/file.css
+app.get("/devtools/skin/:file.css", function (req, res) {
+  res.contentType("text/css; charset=utf-8");
+  sendFile(res, "../../themes/" + req.params.file + ".css", "utf-8");
+});
+
+// Redirect chrome:devtools/client/path/to/file.css to ../../path/to/file.css
+//      and chrome:devtools/content/path/to/file.css to ../../path/to/file.css
+app.get(/^\/devtools\/(?:client|content)\/(.*)\.css$/, function (req, res) {
+  res.contentType("text/css; charset=utf-8");
+  sendFile(res, "../../" + req.params[0] + ".css");
+});
diff --git a/devtools/client/inspector/configs/development.json b/devtools/client/inspector/configs/development.json
new file mode 100644
--- /dev/null
+++ b/devtools/client/inspector/configs/development.json
@@ -0,0 +1,22 @@
+{
+  "title": "Inspector",
+  "environment": "development",
+  "baseWorkerURL": "public/build/",
+  "theme": "light",
+  "host": "",
+  "logging": {
+    "client": false,
+    "firefoxProxy": false
+  },
+  "features": {
+  },
+  "firefox": {
+    "proxyHost": "localhost:9000",
+    "webSocketConnection": false,
+    "webSocketHost": "localhost:6080"
+  },
+  "development": {
+    "serverPort": 8000,
+    "customIndex": true
+  }
+}
\ No newline at end of file
diff --git a/devtools/client/inspector/package.json b/devtools/client/inspector/package.json
new file mode 100644
--- /dev/null
+++ b/devtools/client/inspector/package.json
@@ -0,0 +1,18 @@
+{
+  "name": "inspector.html",
+  "version": "0.0.1",
+  "description": "The Firefox Inspector",
+  "scripts": {
+    "start": "node bin/dev-server"
+  },
+  "author": "",
+  "license": "ISC",
+  "dependencies": {
+    "devtools-local-toolbox": "0.0.10",
+    "devtools-modules": "0.0.9",
+    "devtools-sham-modules": "0.0.9",
+    "devtools-config": "0.0.9",
+    "raw-loader": "^0.5.1",
+    "json-loader": "^0.5.4"
+  }
+}
diff --git a/devtools/client/inspector/toolbox.js b/devtools/client/inspector/toolbox.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/inspector/toolbox.js
@@ -0,0 +1,50 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/* global window, document */
+
+"use strict";
+
+const React = require("devtools/client/shared/vendor/react");
+const ReactDOM = require("devtools/client/shared/vendor/react-dom");
+
+const { bootstrap } = require("devtools-local-toolbox");
+const { buildFakeToolbox, Inspector } = require("./inspector");
+
+function onConnect(arg) {
+  if (!arg || !arg.client) {
+    return;
+  }
+
+  let client = arg.client;
+
+  const tabTarget = client.getTabTarget();
+  let threadClient = { paused: false };
+  buildFakeToolbox(
+    tabTarget,
+    () => threadClient,
+    { React, ReactDOM, browserRequire: () => {} }
+  ).then(function (fakeToolbox) {
+    let inspector = new Inspector(fakeToolbox);
+    inspector.init();
+  });
+}
+
+window.addEventListener("DOMContentLoaded", function onInspectorDOMLoaded() {
+  window.removeEventListener("DOMContentLoaded", onInspectorDOMLoaded);
+
+  const hasFirefoxTabParam = window.location.href.indexOf("firefox-tab") != -1;
+  if (!hasFirefoxTabParam) {
+    const inspectorRoot = document.querySelector(".inspector");
+    // Remove the inspector specific markup and add the landing page root element.
+    inspectorRoot.remove();
+    let mount = document.createElement("div");
+    mount.setAttribute("id", "mount");
+    document.body.appendChild(mount);
+  }
+
+  let dummyEl = document.createElement("div");
+  dummyEl.style.display = "none";
+  bootstrap(React, ReactDOM, dummyEl).then(onConnect);
+});
diff --git a/devtools/client/inspector/webpack.config.js b/devtools/client/inspector/webpack.config.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/inspector/webpack.config.js
@@ -0,0 +1,142 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/* global __dirname */
+
+"use strict";
+
+const {toolboxConfig} = require("devtools-local-toolbox/index");
+
+const path = require("path");
+const webpack = require("webpack");
+
+module.exports = envConfig => {
+  let webpackConfig = {
+    bail: true,
+    entry: [
+      path.join(__dirname, "toolbox.js")
+    ],
+    output: {
+      path: path.join(__dirname, "assets/build"),
+      filename: "inspector.js",
+      publicPath: "/"
+    },
+    module: {
+      // Disable handling of unknown requires
+      unknownContextRegExp: /$^/,
+      unknownContextCritical: false,
+
+      // Disable handling of requires with a single expression
+      exprContextRegExp: /$^/,
+      exprContextCritical: false,
+
+      // Warn for every expression in require
+      wrappedContextCritical: true,
+
+      loaders: [
+        {
+          test: /event-emitter/,
+          exclude: /node_modules/,
+          loaders: [path.join(__dirname, "./webpack/rewrite-event-emitter")],
+        }, {
+          // Replace all references to this.browserRequire() by require() in
+          // client/inspector/*.js files
+          test: /client\/inspector\/.*\.js$/,
+          loaders: [path.join(__dirname, "./webpack/rewrite-browser-require")],
+        }
+      ]
+    },
+    resolveLoader: {
+      root: [
+        path.resolve("./node_modules"),
+        path.resolve("./webpack"),
+      ]
+    },
+    resolve: {
+      alias: {
+        "acorn/util/walk": path.join(__dirname, "../../shared/acorn/walk"),
+        "acorn": path.join(__dirname, "../../shared/acorn"),
+        "devtools/client/framework/about-devtools-toolbox":
+          path.join(__dirname, "./webpack/about-devtools-sham.js"),
+        "devtools/client/framework/attach-thread":
+          path.join(__dirname, "./webpack/attach-thread-sham.js"),
+        "devtools/client/framework/target-from-url":
+          path.join(__dirname, "./webpack/target-from-url-sham.js"),
+        "devtools/client/jsonview/main":
+          path.join(__dirname, "./webpack/jsonview-sham.js"),
+        "devtools/client/sourceeditor/editor":
+          path.join(__dirname, "./webpack/editor-sham.js"),
+        "devtools/client/locales": path.join(__dirname, "../locales/en-US"),
+        "devtools/shared/locales": path.join(__dirname, "../../shared/locales/en-US"),
+        "devtools/shared/platform": path.join(__dirname, "../../shared/platform/content"),
+        "devtools": path.join(__dirname, "../../"),
+        "gcli": path.join(__dirname, "../../shared/gcli/source/lib/gcli"),
+        "method": path.join(__dirname, "../../../addon-sdk/source/lib/method"),
+        "modules/libpref/init/all":
+          path.join(__dirname, "../../../modules/libpref/init/all.js"),
+        "sdk/system/unload": path.join(__dirname, "./webpack/system-unload-sham.js"),
+        "sdk": path.join(__dirname, "../../../addon-sdk/source/lib/sdk"),
+        "Services": path.join(__dirname, "../shared/shim/Services.js"),
+        "toolkit/locales":
+          path.join(__dirname, "../../../toolkit/locales/en-US/chrome/global"),
+      },
+    },
+
+    plugins: [
+      new webpack.DefinePlugin({
+        "isWorker": JSON.stringify(false),
+        "reportError": "console.error",
+        "AppConstants": "{ DEBUG: true, DEBUG_JS_MODULES: true }",
+        "loader": `{
+                      lazyRequireGetter: () => {},
+                      lazyGetter: () => {}
+                    }`,
+        "dump": "console.log",
+      }),
+    ]
+  };
+
+  webpackConfig.externals = [
+    /codemirror\//,
+    {
+      "promise": "var Promise",
+      "devtools/server/main": "{}",
+
+      // Just trying to get build to work.  These should be removed eventually:
+      "chrome": "{}",
+
+      // In case you end up in chrome-land you can use this to help track down issues.
+      // SDK for instance does a bunch of this so if you somehow end up importing an SDK
+      // dependency this might help for debugging:
+      // "chrome": `{
+      //   Cc: {
+      //     "@mozilla.org/uuid-generator;1": { getService: () => { return {} } },
+      //     "@mozilla.org/observer-service;1": { getService: () => { return {} } },
+      //   },
+      //   Ci: {},
+      //   Cr: {},
+      //   Cm: {},
+      //   components: { classesByID: () => {} , ID: () => {} }
+      // }`,
+
+      "resource://gre/modules/XPCOMUtils.jsm": "{}",
+      "resource://devtools/client/styleeditor/StyleEditorUI.jsm": "{}",
+      "resource://devtools/client/styleeditor/StyleEditorUtil.jsm": "{}",
+      "devtools/client/inspector/inspector-panel": "{}",
+      "devtools/server/actors/utils/audionodes.json": "{}",
+
+      "devtools/client/shared/developer-toolbar": "{}",
+
+      // From sdk.
+      "resource://gre/modules/Preferences.jsm": "{}",
+      "@loader/options": "{}",
+      "@loader/unload": "{}",
+    },
+  ];
+
+  // Exclude all files from devtools/ or addon-sdk/ or modules/ .
+  webpackConfig.babelExcludes = /(devtools\/|addon-sdk\/|modules\/)/;
+
+  return toolboxConfig(webpackConfig, envConfig);
+};
diff --git a/devtools/client/inspector/webpack/about-devtools-sham.js b/devtools/client/inspector/webpack/about-devtools-sham.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/inspector/webpack/about-devtools-sham.js
@@ -0,0 +1,12 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+module.exports = {
+  register: () => {},
+  unregister: () => {},
+};
diff --git a/devtools/client/inspector/webpack/attach-thread-sham.js b/devtools/client/inspector/webpack/attach-thread-sham.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/inspector/webpack/attach-thread-sham.js
@@ -0,0 +1,11 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+module.exports = {
+  attachThread: () => {},
+};
diff --git a/devtools/client/inspector/webpack/editor-sham.js b/devtools/client/inspector/webpack/editor-sham.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/inspector/webpack/editor-sham.js
@@ -0,0 +1,13 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+Editor.modes = {};
+function Editor() {}
+Editor.prototype.appendToLocalElement = () => {};
+
+module.exports = Editor;
diff --git a/devtools/client/inspector/webpack/jsonview-sham.js b/devtools/client/inspector/webpack/jsonview-sham.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/inspector/webpack/jsonview-sham.js
@@ -0,0 +1,14 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+module.exports = {
+  JsonView: {
+    initialize: () => {},
+    destroy: () => {},
+  }
+};
diff --git a/devtools/client/inspector/webpack/prefs-loader.js b/devtools/client/inspector/webpack/prefs-loader.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/inspector/webpack/prefs-loader.js
@@ -0,0 +1,58 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+// Rewrite devtools.js or all.js, leaving just the relevant pref() calls.
+
+"use strict";
+
+const PREF_RX = new RegExp("^ *pref\\(\"devtools");
+
+module.exports = function (content) {
+  this.cacheable && this.cacheable();
+
+  // If we're reading devtools.js we have to do some reprocessing.
+  // If we're reading all.js we just assume we can dump all the
+  // conditionals.
+  let isDevtools = this.request.endsWith("/devtools.js");
+
+  // This maps the text of a "#if" to its truth value.  This has to
+  // cover all uses of #if in devtools.js.
+  const ifMap = {
+    "#if MOZ_UPDATE_CHANNEL == beta": false,
+    "#if defined(NIGHTLY_BUILD)": false,
+    "#ifdef NIGHTLY_BUILD": false,
+    "#ifdef MOZ_DEV_EDITION": false,
+    "#ifdef RELEASE_OR_BETA": true,
+    "#ifdef RELEASE_BUILD": true,
+  };
+
+  let lines = content.split("\n");
+  let ignoring = false;
+  let newLines = [];
+  let continuation = false;
+  for (let line of lines) {
+    if (line.startsWith("sticky_pref")) {
+      line = line.slice(7);
+    }
+
+    if (isDevtools) {
+      if (line.startsWith("#if")) {
+        if (!(line in ifMap)) {
+          throw new Error("missing line in ifMap: " + line);
+        }
+        ignoring = !ifMap[line];
+      } else if (line.startsWith("#else")) {
+        ignoring = !ignoring;
+      }
+    }
+
+    if (continuation || (!ignoring && PREF_RX.test(line))) {
+      newLines.push(line);
+
+      // The call to pref(...); might span more than one line.
+      continuation = !/\);/.test(line);
+    }
+  }
+  return newLines.join("\n");
+};
diff --git a/devtools/client/inspector/webpack/rewrite-browser-require.js b/devtools/client/inspector/webpack/rewrite-browser-require.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/inspector/webpack/rewrite-browser-require.js
@@ -0,0 +1,12 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+// Replace all occurrences of "this.browserRequire(" by "require(".
+
+"use strict";
+
+module.exports = function (content) {
+  this.cacheable && this.cacheable();
+  return content.replace(/this\.browserRequire\(/g, "require(");
+};
diff --git a/devtools/client/inspector/webpack/rewrite-event-emitter.js b/devtools/client/inspector/webpack/rewrite-event-emitter.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/inspector/webpack/rewrite-event-emitter.js
@@ -0,0 +1,26 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+// Remove the header code from event-emitter.js.  This code confuses
+// webpack.
+
+"use strict";
+
+module.exports = function (content) {
+  this.cacheable && this.cacheable();
+
+  let lines = content.split("\n");
+  let ignoring = false;
+  let newLines = [];
+  for (let line of lines) {
+    if (/function \(factory\)/.test(line)) {
+      ignoring = true;
+    } else if (/call\(this, function /.test(line)) {
+      ignoring = false;
+    } else if (!ignoring && line !== "});") {
+      newLines.push(line);
+    }
+  }
+  return newLines.join("\n");
+};
diff --git a/devtools/client/inspector/webpack/system-unload-sham.js b/devtools/client/inspector/webpack/system-unload-sham.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/inspector/webpack/system-unload-sham.js
@@ -0,0 +1,11 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+module.exports = {
+  when: () => {},
+};
diff --git a/devtools/client/inspector/webpack/target-from-url-sham.js b/devtools/client/inspector/webpack/target-from-url-sham.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/inspector/webpack/target-from-url-sham.js
@@ -0,0 +1,11 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+module.exports = {
+  targetFromURL: () => {},
+};

