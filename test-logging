# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  9c2dcae33a1f3af5eedec120ac4b0b51262a27b7

diff --git a/dom/tests/browser/browser_bug1316330.js b/dom/tests/browser/browser_bug1316330.js
--- a/dom/tests/browser/browser_bug1316330.js
+++ b/dom/tests/browser/browser_bug1316330.js
@@ -12,25 +12,29 @@ const URL =
   "  document.body.setAttribute('data-press', ++press);" +
   "  if (e.charCode == 'p'.charCodeAt(0)) while (Date.now() - startTime < 500) {}" +
   "};" +
   "</script>";
 
 add_task(async function() {
   let tab = await BrowserTestUtils.openNewForegroundTab(gBrowser, URL);
   let browser = tab.linkedBrowser;
-
+is(1, 2, "fail 1");
   await EventUtils.synthesizeAndWaitKey("d", {repeat: 3});
 
+  is(1, 2, "fail 2");
   await ContentTask.spawn(browser, null, async function() {
     is(content.document.body.getAttribute("data-down"), "2", "Correct number of events");
     is(content.document.body.getAttribute("data-press"), "2", "Correct number of events");
   });
+  is(1, 2, "fail 3");
 
   await EventUtils.synthesizeAndWaitKey("p", {repeat: 3});
 
+  is(1, 2, "fail 4");
   await ContentTask.spawn(browser, null, async function() {
     is(content.document.body.getAttribute("data-down"), "4", "Correct number of events");
     is(content.document.body.getAttribute("data-press"), "4", "Correct number of events");
   });
 
+  is(1, 2, "fail 5");
   gBrowser.removeCurrentTab();
 });
diff --git a/testing/mochitest/tests/SimpleTest/EventUtils.js b/testing/mochitest/tests/SimpleTest/EventUtils.js
--- a/testing/mochitest/tests/SimpleTest/EventUtils.js
+++ b/testing/mochitest/tests/SimpleTest/EventUtils.js
@@ -894,35 +894,39 @@ function synthesizeKey(aKey, aEvent = un
  */
 function synthesizeAndWaitKey(aKey, aEvent, aWindow = window,
                               checkBeforeSynthesize, checkAfterSynthesize)
 {
   let browser = gBrowser.selectedTab.linkedBrowser;
   let mm = browser.messageManager;
   let keyCode = _createKeyboardEventDictionary(aKey, aEvent, null, aWindow).dictionary.keyCode;
   let ContentTask = _EU_Cu.import("resource://testing-common/ContentTask.jsm", null).ContentTask;
-
+console.log("HERE 1");
   let keyRegisteredPromise = new Promise(resolve => {
     mm.addMessageListener("Test:KeyRegistered", function processed(message) {
       mm.removeMessageListener("Test:KeyRegistered", processed);
+      console.log("HERE 5");
       resolve();
     });
   });
   let keyReceivedPromise = ContentTask.spawn(browser, keyCode, (keyCode) => {
+    console.log("HERE 2");
     return new Promise(resolve => {
       addEventListener("keyup", function onKeyEvent(e) {
+        console.log("HERE 3");
         if (e.keyCode == keyCode) {
           removeEventListener("keyup", onKeyEvent);
           resolve();
         }
       });
       sendAsyncMessage("Test:KeyRegistered");
     });
   });
   keyRegisteredPromise.then(() => {
+    console.log("HERE 4");
     if (checkBeforeSynthesize) {
       checkBeforeSynthesize();
     }
     synthesizeKey(aKey, aEvent, aWindow);
     if (checkAfterSynthesize) {
       checkAfterSynthesize();
     }
   });
