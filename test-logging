# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  8ac8754df36eba38438adeab2fddb7646310e4dd

diff --git a/browser/components/search/content/search.xml b/browser/components/search/content/search.xml
--- a/browser/components/search/content/search.xml
+++ b/browser/components/search/content/search.xml
@@ -552,17 +552,19 @@
         }
 
         // Show the current default engine in the top header of the panel.
         this.updateHeader();
       ]]></handler>
 
       <handler event="popuphiding"><![CDATA[
         this._isHiding = true;
+        console.log("POPUP HIDING 1");
         Services.tm.dispatchToMainThread(() => {
+        console.log("POPUP HIDING 2");
           this._isHiding = false;
         });
       ]]></handler>
 
       <!-- This handles clicks on the topmost "Foo Search" header in the
            popup (hbox[anonid="searchbar-engine"]). -->
       <handler event="click"><![CDATA[
         if (event.button == 2) {
diff --git a/browser/components/search/content/searchbar.js b/browser/components/search/content/searchbar.js
--- a/browser/components/search/content/searchbar.js
+++ b/browser/components/search/content/searchbar.js
@@ -85,16 +85,18 @@ class MozSearchbar extends MozXULElement
   }
 
   connectedCallback() {
     // Don't initialize if this isn't going to be visible
     if (this.closest("#BrowserToolbarPalette")) {
       return;
     }
 
+    console.log("Connected", this.connectedOnce);
+
     this.appendChild(document.importNode(this.content, true));
     this.inheritAttributes();
     window.addEventListener("unload", this.destroy);
     this._ignoreFocus = false;
 
     this._clickClosedPopup = false;
 
     this._stringBundle = this.querySelector("stringbundle");
@@ -439,27 +441,30 @@ class MozSearchbar extends MozXULElement
         return;
 
       this.openSuggestionsPanel();
     }, true);
 
     this.addEventListener("mousedown", (event) => {
       if (event.originalTarget.classList.contains("searchbar-search-button")) {
         this._clickClosedPopup = this._textbox.popup._isHiding;
+        console.log("Checking clickClosedPopup", this._textbox.popup.state);
       }
     }, true);
 
     this.addEventListener("mousedown", (event) => {
       // Ignore clicks on the search go button.
       if (event.originalTarget.classList.contains("search-go-button")) {
         return;
       }
 
       let isIconClick = event.originalTarget.classList.contains("searchbar-search-button");
 
+      console.log("Mousedown happened", event.originalTarget, isIconClick, this._clickClosedPopup);
+      console.trace();
       // Ignore clicks on the icon if they were made to close the popup
       if (isIconClick && this._clickClosedPopup) {
         return;
       }
 
       // Open the suggestions whenever clicking on the search icon or if there
       // is text in the textbox.
       if (isIconClick || this._textbox.value) {
diff --git a/browser/components/search/test/browser_searchbar_openpopup.js b/browser/components/search/test/browser_searchbar_openpopup.js
--- a/browser/components/search/test/browser_searchbar_openpopup.js
+++ b/browser/components/search/test/browser_searchbar_openpopup.js
@@ -116,42 +116,49 @@ function context_click(target) {
 
 // Right clicking the icon should not open the popup.
 add_no_popup_task(async function open_icon_context() {
   gURLBar.focus();
   let toolbarPopup = document.getElementById("toolbar-context-menu");
 
   let promise = promiseEvent(toolbarPopup, "popupshown");
   context_click(searchIcon);
+
+  await new Promise(r=>r);
   await promise;
 
   promise = promiseEvent(toolbarPopup, "popuphidden");
   toolbarPopup.hidePopup();
   await promise;
 });
 
 // With no text in the search box left clicking the icon should open the popup.
 // Clicking the icon again should hide the popup and not show it again.
 add_task(async function open_empty() {
   gURLBar.focus();
+  // await new Promise(r=>r);
 
   let promise = promiseEvent(searchPopup, "popupshown");
   info("Clicking icon");
+  console.log("HERE", searchIcon);
   EventUtils.synthesizeMouseAtCenter(searchIcon, {});
   await promise;
+
   is(searchPopup.getAttribute("showonlysettings"), "true", "Should only show the settings");
   is(textbox.mController.searchString, "", "Should be an empty search string");
 
   // By giving the textbox some text any next attempt to open the search popup
   // from the click handler will try to search for this text.
   textbox.value = "foo";
 
+  await new Promise(r=>setTimeout(r, 1000));
   promise = promiseEvent(searchPopup, "popuphidden");
 
   info("Hiding popup");
+  console.log("There", searchIcon);
   await synthesizeNativeMouseClick(searchIcon);
   await promise;
 
   is(textbox.mController.searchString, "", "Should not have started to search for the new text");
 
   // Cancel the search if it started.
   if (textbox.mController.searchString != "") {
     textbox.mController.stopSearch();
