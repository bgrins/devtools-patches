# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  a9817114ad8c41ec2a07e8b7dfcb2d5947e8bec9
asdf

diff --git a/browser/devtools/shared/widgets/SideMenuWidget.jsm b/browser/devtools/shared/widgets/SideMenuWidget.jsm
--- a/browser/devtools/shared/widgets/SideMenuWidget.jsm
+++ b/browser/devtools/shared/widgets/SideMenuWidget.jsm
@@ -135,17 +135,27 @@ SideMenuWidget.prototype = {
   /**
    * Checks to see if the list is scrolled all the way to the bottom.
    * Uses getBoundsWithoutFlushing to limit the performance impact
    * of this function.
    *
    * @return bool
    */
   isScrolledToBottom: function() {
-    return this._list.scrollTop + this._list.clientHeight >= this._list.scrollHeight;
+    if (this._list.lastElementChild) {
+      let domUtils = this.window.QueryInterface(Ci.nsIInterfaceRequestor)
+                                .getInterface(Ci.nsIDOMWindowUtils);
+      let childRect = domUtils.getBoundsWithoutFlushing(this._list.lastElementChild);
+      let listRect = domUtils.getBoundsWithoutFlushing(this._list);
+
+      // Cheap way to check if it's scrolled all the way to the bottom.
+      return (childRect.height + childRect.top) <= listRect.bottom;
+    }
+
+    return false;
   },
 
   /**
    * Scroll the list to the bottom after a timeout.
    * If the user scrolls in the meantime, cancel this operation.
    */
   scrollToBottom: function() {
     // Lazily attach this functionality to the object, so it won't get
@@ -159,21 +169,22 @@ SideMenuWidget.prototype = {
       this._scrollToBottomTask = new DeferredTask(() => {
         ignoreNextScroll = true;
         this._list.scrollTop = this._list.scrollHeight;
         this.emit("scroll-to-bottom");
       }, SCROLL_FREQUENCY);
 
       // On a user scroll, cancel any pending calls to the scroll function.
       this._list.addEventListener("scroll", () => {
-        if (ignoreNextScroll) {
-          ignoreNextScroll = false;
-        } else {
+        if (!ignoreNextScroll &&
+            this._scrollToBottomTask.isArmed &&
+            !this.isScrolledToBottom()) {
           this._scrollToBottomTask.disarm();
         }
+        ignoreNextScroll = false;
       }, true);
     }
 
     this._scrollToBottomTask.arm();
   },
 
   /**
    * Returns the child node in this container situated at the specified index.
