# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  ff1d6a5608e00765dce1ef9650a1e2ffac675fb6
Prototype mach testgen command

diff --git a/python/mozbuild/mozbuild/mach_commands.py b/python/mozbuild/mozbuild/mach_commands.py
--- a/python/mozbuild/mozbuild/mach_commands.py
+++ b/python/mozbuild/mozbuild/mach_commands.py
@@ -17,17 +17,19 @@ import shutil
 import subprocess
 import sys
 import tempfile
 import xml.etree.ElementTree as ET
 import yaml
 
 from collections import OrderedDict
 
-import mozpack.path as mozpath
+# import mozpack.path as mozpath
+# import mozinfo
+# from manifestparser import TestManifest
 
 from mach.decorators import (
     CommandArgument,
     CommandArgumentGroup,
     CommandProvider,
     Command,
     SettingsProvider,
     SubCommand,
@@ -792,16 +794,90 @@ class ClangCommands(MachCommandBase):
         print_from_variable('COMPILE_CXXFLAGS')
 
         print('-I%s/ipc/chromium/src' % self.topsrcdir)
         print('-I%s/ipc/glue' % self.topsrcdir)
         print('-I%s/ipc/ipdl/_ipdlheaders' % self.topobjdir)
 
 
 @CommandProvider
+class Testgen(MachCommandBase):
+    """Tools for adding new tests."""
+
+    @Command('testgen', category='build-dev',
+        description='XXXTools for adding new tests')
+    @CommandArgument('-v', '--verbose', action='store_true',
+        help='Verbose output for what commands the packaging process is running.')
+    @CommandArgument('-c', '--copy',
+                     default=None,
+        help='Copy an existing test.')
+    @CommandArgument('-m', '--move', action='store_true',
+        help='Move an existing test.')
+    @CommandArgument('test',
+        nargs='+',
+        help=('Test to create.'
+              'XXX.'))
+    def package(self, verbose=False, copy=None, move=False, test=None):
+        ret = 0
+        test = test[0]
+        if copy and move:
+            print("You can't use `copy` and `move` together.")
+            return 1
+
+        print("testgen:", test)
+        if copy:
+            copy = os.path.abspath(copy)
+            copy_name = os.path.basename(copy)
+            dir = os.path.dirname(copy)
+            ini = os.path.join(dir, 'browser.ini')
+            # XXX: Support full path having already been included (for now this assumes the
+            # test is just browser_foo.js and the dir is inherited from the copy).
+            dest = os.path.join(dir, test)
+            print("testgen:", copy, copy_name, dir, ini, dest)
+
+            with open(ini) as f:
+                content = f.readlines()
+
+            for x in content:
+                if x.strip() == "[" + copy_name "]":
+                    print("FOUND IT")
+
+            # you may also want to remove whitespace characters like `\n` at the end of each line
+            #content = [print(x.strip()) for x in content]
+
+            shutil.copyfile(copy, dest)
+
+
+            print(content)
+
+
+            # XXX: How can we correctly find the test manifest for a given
+            # test path? For now just look for browser.ini as a proof of concept:
+            # print(dir)
+            # f = open( os.path.join(dir, 'browser.ini'), "w" )
+            # print(f)
+            # f.write('\n')
+            # f.flush()
+
+            # from moztest.resolve import TestResolver
+            # resolver = self._spawn(TestResolver)
+            # print(resolver.tests_with_flavor('mochitest-browser'))
+            # mp = TestManifest()
+            # mp.tests.extend(test_objects)
+            # filters = []
+            # tests = mp.active_tests(
+            #     filters=filters,
+            #     disabled=False,
+            #     python=self.virtualenv_manager.version_info[0],
+            #     **mozinfo.info)
+           # print("performing copy", tests)
+
+        return ret
+
+@CommandProvider
 class Package(MachCommandBase):
     """Package the built product for distribution."""
 
     @Command('package', category='post-build',
         description='Package the built product for distribution as an APK, DMG, etc.')
     @CommandArgument('-v', '--verbose', action='store_true',
         help='Verbose output for what commands the packaging process is running.')
     def package(self, verbose=False):
