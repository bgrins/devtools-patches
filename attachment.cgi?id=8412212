# HG changeset patch
# Parent dbb1d4de276cad10a793d523fafa99838d7c8aaa
# User Manish Goregaokar <manishearth@gmail.com>
Bug 994134 - Warn first time users on pasting code into the console;r=jruderman

diff --git a/browser/app/profile/firefox.js b/browser/app/profile/firefox.js
--- a/browser/app/profile/firefox.js
+++ b/browser/app/profile/firefox.js
@@ -1360,16 +1360,20 @@ pref("devtools.browserconsole.filter.war
 pref("devtools.browserconsole.filter.info", true);
 pref("devtools.browserconsole.filter.log", true);
 pref("devtools.browserconsole.filter.secerror", true);
 pref("devtools.browserconsole.filter.secwarn", true);
 
 // Text size in the Web Console. Use 0 for the system default size.
 pref("devtools.webconsole.fontSize", 0);
 
+// Number of usages of the web console or scratchpad.
+// If this is less than 10, then pasting code into the web console or scratchpad is disabled
+pref("devtools.selfxss.count", 0);
+
 // Persistent logging: |true| if you want the Web Console to keep all of the
 // logged messages after reloading the page, |false| if you want the output to
 // be cleared each time page navigation happens.
 pref("devtools.webconsole.persistlog", false);
 
 // Web Console timestamp: |true| if you want the logs and instructions
 // in the Web Console to display a timestamp, or |false| to not display
 // any timestamps.
diff --git a/browser/devtools/scratchpad/scratchpad.js b/browser/devtools/scratchpad/scratchpad.js
--- a/browser/devtools/scratchpad/scratchpad.js
+++ b/browser/devtools/scratchpad/scratchpad.js
@@ -63,19 +63,16 @@ XPCOMUtils.defineLazyModuleGetter(this, 
   "resource:///modules/devtools/VariablesViewController.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "EnvironmentClient",
   "resource://gre/modules/devtools/dbg-client.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "ObjectClient",
   "resource://gre/modules/devtools/dbg-client.jsm");
 
-XPCOMUtils.defineLazyModuleGetter(this, "WebConsoleUtils",
-  "resource://gre/modules/devtools/WebConsoleUtils.jsm");
-
 XPCOMUtils.defineLazyModuleGetter(this, "DebuggerServer",
   "resource://gre/modules/devtools/dbg-server.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "DebuggerClient",
   "resource://gre/modules/devtools/dbg-client.jsm");
 
 XPCOMUtils.defineLazyGetter(this, "REMOTE_TIMEOUT", () =>
   Services.prefs.getIntPref("devtools.debugger.remote-timeout"));
@@ -86,16 +83,18 @@ XPCOMUtils.defineLazyModuleGetter(this, 
 XPCOMUtils.defineLazyModuleGetter(this, "Reflect",
   "resource://gre/modules/reflect.jsm");
 
 // Because we have no constructor / destructor where we can log metrics we need
 // to do so here.
 let telemetry = new Telemetry();
 telemetry.toolOpened("scratchpad");
 
+let WebConsoleUtils = require("devtools/toolkit/webconsole/utils").Utils;
+
 /**
  * The scratchpad object handles the Scratchpad window functionality.
  */
 var Scratchpad = {
   _instanceId: null,
   _initialWindowTitle: document.title,
   _dirty: false,
 
@@ -488,16 +487,19 @@ var Scratchpad = {
    * Execute the selected text (if any) or the entire editor content in the
    * current context.
    *
    * @return Promise
    *         The promise for the script evaluation result.
    */
   execute: function SP_execute()
   {
+    if (WebConsoleUtils.usageCount <= 10) {
+      WebConsoleUtils.usageCount++;
+    }
     let selection = this.editor.getSelection() || this.getText();
     return this.evaluate(selection);
   },
 
   /**
    * Execute the selected text (if any) or the entire editor content in the
    * current context.
    *
@@ -1606,20 +1608,24 @@ var Scratchpad = {
       value: initialText,
       lineNumbers: true,
       showTrailingSpace: Services.prefs.getBoolPref(SHOW_TRAILING_SPACE),
       enableCodeFolding: Services.prefs.getBoolPref(ENABLE_CODE_FOLDING),
       contextMenu: "scratchpad-text-popup"
     };
 
     this.editor = new Editor(config);
-    this.editor.appendTo(document.querySelector("#scratchpad-editor")).then(() => {
+    let editorElement = document.querySelector("#scratchpad-editor");
+    this.editor.appendTo(editorElement).then(() => {
       var lines = initialText.split("\n");
 
       this.editor.on("change", this._onChanged);
+      this._paste = WebConsoleUtils.pasteHandlerGen(editorElement, document.querySelector('#scratchpad-notificationbox'));
+      editorElement.addEventListener("paste", this._paste);
+      editorElement.addEventListener("drop", this._paste);
       this.editor.on("save", () => this.saveFile());
       this.editor.focus();
       this.editor.setCursor({ line: lines.length, ch: lines.pop().length });
 
       if (state)
         this.dirty = !state.saved;
 
       this.initialized = true;
@@ -1681,17 +1687,21 @@ var Scratchpad = {
     // This event is created only after user uses 'reload and run' feature.
     if (this._reloadAndRunEvent && this.gBrowser) {
       this.gBrowser.selectedBrowser.removeEventListener("load",
           this._reloadAndRunEvent, true);
     }
 
     PreferenceObserver.uninit();
     CloseObserver.uninit();
-
+    if (this._paste) {
+      let ed = document.querySelector("#scratchpad-editor");
+      ed.removeEventListener("paste", this._paste);
+      ed.removeEventListener("drop", this._paste);
+    }
     this.editor.off("change", this._onChanged);
     this.editor.destroy();
     this.editor = null;
 
     if (this._sidebar) {
       this._sidebar.destroy();
       this._sidebar = null;
     }
diff --git a/browser/devtools/webconsole/webconsole.js b/browser/devtools/webconsole/webconsole.js
--- a/browser/devtools/webconsole/webconsole.js
+++ b/browser/devtools/webconsole/webconsole.js
@@ -3127,17 +3127,20 @@ JSTerm.prototype = {
     this.completeNode = doc.querySelector(".jsterm-complete-node");
     this.inputNode = doc.querySelector(".jsterm-input-node");
 
     if (this.hud.owner._browserConsole &&
         !Services.prefs.getBoolPref("devtools.chrome.enabled")) {
       inputContainer.style.display = "none";
     }
     else {
+      this._paste = WebConsoleUtils.pasteHandlerGen(this.inputNode, doc.getElementById("webconsole-notificationbox"));
       this.inputNode.addEventListener("keypress", this._keyPress, false);
+      this.inputNode.addEventListener("paste", this._paste);
+      this.inputNode.addEventListener("drop", this._paste);
       this.inputNode.addEventListener("input", this._inputEventHandler, false);
       this.inputNode.addEventListener("keyup", this._inputEventHandler, false);
       this.inputNode.addEventListener("focus", this._focusEventHandler, false);
     }
 
     this.hud.window.addEventListener("blur", this._blurEventHandler, false);
     this.lastInputValue && this.setInputValue(this.lastInputValue);
   },
@@ -3266,16 +3269,19 @@ JSTerm.prototype = {
     let options = { frame: this.SELECTED_FRAME };
     this.requestEvaluation(aExecuteString, options).then(onResult, onResult);
 
     // Append a new value in the history of executed code, or overwrite the most
     // recent entry. The most recent entry may contain the last edited input
     // value that was not evaluated yet.
     this.history[this.historyIndex++] = aExecuteString;
     this.historyPlaceHolder = this.history.length;
+    if (WebConsoleUtils.usageCount <= 10) {
+      WebConsoleUtils.usageCount++;
+    }
     this.setInputValue("");
     this.clearCompletion();
   },
 
   /**
    * Request a JavaScript string evaluation from the server.
    *
    * @param string aString
@@ -4518,16 +4524,21 @@ JSTerm.prototype = {
     this.autocompletePopup = null;
 
     let popup = this.hud.owner.chromeWindow.document
                 .getElementById("webConsole_autocompletePopup");
     if (popup) {
       popup.parentNode.removeChild(popup);
     }
 
+    if (this._paste) {
+      this.inputNode.removeEventListener("paste", this._paste, false);
+      this.inputNode.removeEventListener("drop", this._paste, false);
+    }
+
     this.inputNode.removeEventListener("keypress", this._keyPress, false);
     this.inputNode.removeEventListener("input", this._inputEventHandler, false);
     this.inputNode.removeEventListener("keyup", this._inputEventHandler, false);
     this.inputNode.removeEventListener("focus", this._focusEventHandler, false);
     this.hud.window.removeEventListener("blur", this._blurEventHandler, false);
 
     this.hud = null;
   },
diff --git a/browser/devtools/webconsole/webconsole.xul b/browser/devtools/webconsole/webconsole.xul
--- a/browser/devtools/webconsole/webconsole.xul
+++ b/browser/devtools/webconsole/webconsole.xul
@@ -77,118 +77,119 @@ function goUpdateConsoleCommands() {
       <menuitem id="cMenu_copy"/>
       <menuitem id="cMenu_selectAll"/>
     </menupopup>
   </popupset>
 
   <tooltip id="aHTMLTooltip" page="true"/>
 
   <box class="hud-outer-wrapper devtools-responsive-container theme-body" flex="1">
-    <vbox class="hud-console-wrapper" flex="1">
-      <toolbar class="hud-console-filter-toolbar devtools-toolbar" mode="full">
-        <toolbarbutton label="&btnPageNet.label;" type="menu-button"
-                       category="net" class="devtools-toolbarbutton webconsole-filter-button"
-                       tooltiptext="&btnPageNet.tooltip;"
-                       accesskeyMacOSX="&btnPageNet.accesskeyMacOSX;"
-                       accesskey="&btnPageNet.accesskey;"
-                       tabindex="3">
-          <menupopup>
-            <menuitem label="&btnConsoleErrors;" type="checkbox" autocheck="false"
-                      prefKey="network"/>
-            <menuitem label="&btnConsoleWarnings;" type="checkbox" autocheck="false"
-                      prefKey="netwarn"/>
-            <menuitem label="&btnConsoleLog;" type="checkbox" autocheck="false"
-                      prefKey="networkinfo"/>
-            <menuseparator id="saveBodiesSeparator" />
-            <menuitem id="saveBodies" type="checkbox" label="&saveBodies.label;"
-                      accesskey="&saveBodies.accesskey;"/>
-          </menupopup>
-        </toolbarbutton>
-        <toolbarbutton label="&btnPageCSS.label;" type="menu-button"
-                       category="css" class="devtools-toolbarbutton webconsole-filter-button"
-                       tooltiptext="&btnPageCSS.tooltip;"
-                       accesskey="&btnPageCSS.accesskey;"
-                       tabindex="4">
-          <menupopup>
-            <menuitem label="&btnConsoleErrors;" type="checkbox" autocheck="false"
-                      prefKey="csserror"/>
-            <menuitem label="&btnConsoleWarnings;" type="checkbox"
-                      autocheck="false" prefKey="cssparser"/>
-            <menuitem label="&btnConsoleReflows;" type="checkbox"
-                      autocheck="false" prefKey="csslog"/>
-          </menupopup>
-        </toolbarbutton>
-        <toolbarbutton label="&btnPageJS.label;" type="menu-button"
-                       category="js" class="devtools-toolbarbutton webconsole-filter-button"
-                       tooltiptext="&btnPageJS.tooltip;"
-                       accesskey="&btnPageJS.accesskey;"
-                       tabindex="5">
-          <menupopup>
-            <menuitem label="&btnConsoleErrors;" type="checkbox"
-                      autocheck="false" prefKey="exception"/>
-            <menuitem label="&btnConsoleWarnings;" type="checkbox"
-                      autocheck="false" prefKey="jswarn"/>
-            <menuitem label="&btnConsoleLog;" type="checkbox"
-                      autocheck="false" prefKey="jslog"/>
-          </menupopup>
-        </toolbarbutton>
-        <toolbarbutton label="&btnPageSecurity.label;" type="menu-button"
-                       category="security" class="devtools-toolbarbutton webconsole-filter-button"
-                       tooltiptext="&btnPageSecurity.tooltip;"
-                       accesskey="&btnPageSecurity.accesskey;"
-                       tabindex="6">
-          <menupopup>
-            <menuitem label="&btnConsoleErrors;" type="checkbox"
-                      autocheck="false" prefKey="secerror"/>
-            <menuitem label="&btnConsoleWarnings;" type="checkbox"
-                      autocheck="false" prefKey="secwarn"/>
-          </menupopup>
-        </toolbarbutton>
-        <toolbarbutton label="&btnPageLogging.label;" type="menu-button"
-                       category="logging" class="devtools-toolbarbutton webconsole-filter-button"
-                       tooltiptext="&btnPageLogging.tooltip;"
-                       accesskey="&btnPageLogging.accesskey3;"
-                       tabindex="7">
-          <menupopup>
-            <menuitem label="&btnConsoleErrors;" type="checkbox"
-                      autocheck="false" prefKey="error"/>
-            <menuitem label="&btnConsoleWarnings;" type="checkbox"
-                      autocheck="false" prefKey="warn"/>
-            <menuitem label="&btnConsoleInfo;" type="checkbox" autocheck="false"
-                      prefKey="info"/>
-            <menuitem label="&btnConsoleLog;" type="checkbox" autocheck="false"
-                      prefKey="log"/>
-          </menupopup>
-        </toolbarbutton>
+      <vbox class="hud-console-wrapper" flex="1">
+        <toolbar class="hud-console-filter-toolbar devtools-toolbar" mode="full">
+          <toolbarbutton label="&btnPageNet.label;" type="menu-button"
+                         category="net" class="devtools-toolbarbutton webconsole-filter-button"
+                         tooltiptext="&btnPageNet.tooltip;"
+                         accesskeyMacOSX="&btnPageNet.accesskeyMacOSX;"
+                         accesskey="&btnPageNet.accesskey;"
+                         tabindex="3">
+            <menupopup>
+              <menuitem label="&btnConsoleErrors;" type="checkbox" autocheck="false"
+                        prefKey="network"/>
+              <menuitem label="&btnConsoleWarnings;" type="checkbox" autocheck="false"
+                        prefKey="netwarn"/>
+              <menuitem label="&btnConsoleLog;" type="checkbox" autocheck="false"
+                        prefKey="networkinfo"/>
+              <menuseparator id="saveBodiesSeparator" />
+              <menuitem id="saveBodies" type="checkbox" label="&saveBodies.label;"
+                        accesskey="&saveBodies.accesskey;"/>
+            </menupopup>
+          </toolbarbutton>
+          <toolbarbutton label="&btnPageCSS.label;" type="menu-button"
+                         category="css" class="devtools-toolbarbutton webconsole-filter-button"
+                         tooltiptext="&btnPageCSS.tooltip;"
+                         accesskey="&btnPageCSS.accesskey;"
+                         tabindex="4">
+            <menupopup>
+              <menuitem label="&btnConsoleErrors;" type="checkbox" autocheck="false"
+                        prefKey="csserror"/>
+              <menuitem label="&btnConsoleWarnings;" type="checkbox"
+                        autocheck="false" prefKey="cssparser"/>
+              <menuitem label="&btnConsoleReflows;" type="checkbox"
+                        autocheck="false" prefKey="csslog"/>
+            </menupopup>
+          </toolbarbutton>
+          <toolbarbutton label="&btnPageJS.label;" type="menu-button"
+                         category="js" class="devtools-toolbarbutton webconsole-filter-button"
+                         tooltiptext="&btnPageJS.tooltip;"
+                         accesskey="&btnPageJS.accesskey;"
+                         tabindex="5">
+            <menupopup>
+              <menuitem label="&btnConsoleErrors;" type="checkbox"
+                        autocheck="false" prefKey="exception"/>
+              <menuitem label="&btnConsoleWarnings;" type="checkbox"
+                        autocheck="false" prefKey="jswarn"/>
+              <menuitem label="&btnConsoleLog;" type="checkbox"
+                        autocheck="false" prefKey="jslog"/>
+            </menupopup>
+          </toolbarbutton>
+          <toolbarbutton label="&btnPageSecurity.label;" type="menu-button"
+                         category="security" class="devtools-toolbarbutton webconsole-filter-button"
+                         tooltiptext="&btnPageSecurity.tooltip;"
+                         accesskey="&btnPageSecurity.accesskey;"
+                         tabindex="6">
+            <menupopup>
+              <menuitem label="&btnConsoleErrors;" type="checkbox"
+                        autocheck="false" prefKey="secerror"/>
+              <menuitem label="&btnConsoleWarnings;" type="checkbox"
+                        autocheck="false" prefKey="secwarn"/>
+            </menupopup>
+          </toolbarbutton>
+          <toolbarbutton label="&btnPageLogging.label;" type="menu-button"
+                         category="logging" class="devtools-toolbarbutton webconsole-filter-button"
+                         tooltiptext="&btnPageLogging.tooltip;"
+                         accesskey="&btnPageLogging.accesskey3;"
+                         tabindex="7">
+            <menupopup>
+              <menuitem label="&btnConsoleErrors;" type="checkbox"
+                        autocheck="false" prefKey="error"/>
+              <menuitem label="&btnConsoleWarnings;" type="checkbox"
+                        autocheck="false" prefKey="warn"/>
+              <menuitem label="&btnConsoleInfo;" type="checkbox" autocheck="false"
+                        prefKey="info"/>
+              <menuitem label="&btnConsoleLog;" type="checkbox" autocheck="false"
+                        prefKey="log"/>
+            </menupopup>
+          </toolbarbutton>
 
-        <toolbarbutton class="webconsole-clear-console-button devtools-toolbarbutton"
-                       label="&btnClear.label;" tooltiptext="&btnClear.tooltip;"
-                       accesskey="&btnClear.accesskey;"
-                       tabindex="8"/>
+          <toolbarbutton class="webconsole-clear-console-button devtools-toolbarbutton"
+                         label="&btnClear.label;" tooltiptext="&btnClear.tooltip;"
+                         accesskey="&btnClear.accesskey;"
+                         tabindex="8"/>
 
-        <spacer flex="1"/>
+          <spacer flex="1"/>
 
-        <textbox class="compact hud-filter-box devtools-searchinput" type="search"
-                 placeholder="&filterOutput.placeholder;" tabindex="2"/>
-      </toolbar>
+          <textbox class="compact hud-filter-box devtools-searchinput" type="search"
+                   placeholder="&filterOutput.placeholder;" tabindex="2"/>
+        </toolbar>
 
-      <hbox id="output-wrapper" flex="1" context="output-contextmenu" tooltip="aHTMLTooltip">
-        <div xmlns="http://www.w3.org/1999/xhtml" id="output-container" tabindex="1" />
-      </hbox>
+        <hbox id="output-wrapper" flex="1" context="output-contextmenu" tooltip="aHTMLTooltip">
+          <div xmlns="http://www.w3.org/1999/xhtml" id="output-container" tabindex="1" />
+        </hbox>
 
-      <hbox class="jsterm-input-container" style="direction:ltr">
-        <stack class="jsterm-stack-node" flex="1">
-          <textbox class="jsterm-complete-node devtools-monospace"
-                   multiline="true" rows="1" tabindex="-1"/>
-          <textbox class="jsterm-input-node devtools-monospace"
-                   multiline="true" rows="1" tabindex="0"/>
-        </stack>
-      </hbox>
-    </vbox>
-
+    <notificationbox id="webconsole-notificationbox">
+        <hbox class="jsterm-input-container" style="direction:ltr">
+          <stack class="jsterm-stack-node" flex="1">
+            <textbox class="jsterm-complete-node devtools-monospace"
+                     multiline="true" rows="1" tabindex="-1"/>
+            <textbox class="jsterm-input-node devtools-monospace"
+                     multiline="true" rows="1" tabindex="0"/>
+          </stack>
+        </hbox>
+    </notificationbox>
+      </vbox>
     <splitter class="devtools-side-splitter"/>
 
     <tabbox id="webconsole-sidebar" class="devtools-sidebar-tabs" hidden="true" width="300">
       <tabs/>
       <tabpanels flex="1"/>
     </tabbox>
   </box>
 </window>
diff --git a/browser/locales/en-US/chrome/browser/devtools/webconsole.properties b/browser/locales/en-US/chrome/browser/devtools/webconsole.properties
--- a/browser/locales/en-US/chrome/browser/devtools/webconsole.properties
+++ b/browser/locales/en-US/chrome/browser/devtools/webconsole.properties
@@ -218,12 +218,22 @@ messageRepeats.tooltip2=#1 repeat;#1 rep
 # tooltip when hovering over the inspector icon next to a DOM Node in the console
 # output
 openNodeInInspector=Click to select the node in the inspector
 
 # LOCALIZATION NOTE (cdFunctionInvalidArgument): the text that is displayed when
 # cd() is invoked with an invalid argument.
 cdFunctionInvalidArgument=Cannot cd() to the given window. Invalid argument.
 
+# LOCALIZATION NOTE (selfxss.msg): the text that is displayed when
+# a new user of the developer tools pastes code into the console
+# %1 is the text of selfxss.okstring
+selfxss.msg=Scam Warning: Take care when pasting things you don't understand. This could allow attackers to steal your identity or take control of your computer. Please type '%S' below to allow pasting.
+
+# LOCALIZATION NOTE (selfxss.msg): the string to be typed
+# in by a new user of the developer tools when they receive the sefxss.msg prompt.
+# Please avoid using non-keyboard characters here
+selfxss.okstring=allow pasting
+
 # LOCALIZATION NOTE (messageToggleDetails): the text that is displayed when
 # you hover the arrow for expanding/collapsing the message details. For
 # console.error() and other messages we show the stacktrace.
 messageToggleDetails=Show/hide message details.
diff --git a/toolkit/devtools/webconsole/utils.js b/toolkit/devtools/webconsole/utils.js
--- a/toolkit/devtools/webconsole/utils.js
+++ b/toolkit/devtools/webconsole/utils.js
@@ -525,17 +525,92 @@ let WebConsoleUtils = {
    *        Value you want to check if it is a grip with an actor.
    * @return boolean
    *         True if the given value is a grip with an actor.
    */
   isActorGrip: function WCU_isActorGrip(aGrip)
   {
     return aGrip && typeof(aGrip) == "object" && aGrip.actor;
   },
+  /**
+   * Value of devtools.selfxss.count preference
+   *
+   * @type int
+   */
+  _usageCount: 0,
+  get usageCount() {
+    if (WebConsoleUtils._usageCount <= 10) {
+      WebConsoleUtils._usageCount = Services.prefs.getIntPref("devtools.selfxss.count")
+      return WebConsoleUtils._usageCount;
+    }
+    return 11;
+  },
+  set usageCount(newUC) {
+      WebConsoleUtils._usageCount = newUC;
+      Services.prefs.setIntPref("devtools.selfxss.count", newUC);
+  },
+  /**
+   * The inputNode "paste" event handler generator. Helps prevent self-xss attacks
+   *
+   * @param nsIDOMElement inputField
+   * @param nsIDOMElement notificationBox
+   */
+  pasteHandlerGen: function WCU_pasteHandlerGen(inputField, notificationBox){
+    let handler = function WCU_pasteHandler(aEvent) {
+      if (WebConsoleUtils.usageCount > 10) {
+        inputField.removeEventListener("paste", handler);
+        inputField.removeEventListener("drop", handler);
+        return true;
+      }
+      if (notificationBox.getNotificationWithValue("selfxss-notification")) {
+        aEvent.preventDefault();
+        aEvent.stopPropagation();
+        return false;
+      }
+      let l10n = Services.strings.createBundle("chrome://browser/locale/devtools/webconsole.properties");
+      let okstring = l10n.GetStringFromName("selfxss.okstring");
+      let msg = l10n.formatStringFromName("selfxss.msg", [okstring], 1);
+
+      let notification = notificationBox.appendNotification(msg,
+        "selfxss-notification", null, notificationBox.PRIORITY_WARNING_HIGH, null,
+        function(eventType) {
+          // Cleanup function if notification is dismissed
+          if (eventType == "removed") {
+            inputField.removeEventListener("keypress", pasteKeyHandler);
+          }
+        });
+
+      let typePosition = 0;
+      function pasteKeyHandler(aEvent2) {
+        if (aEvent2.charCode == okstring.charCodeAt(typePosition)){
+          typePosition++;
+        }
+        if (aEvent2.keyCode == 8 && typePosition > 0) { // Backspace
+          typePosition--;
+        }
+        if (typePosition == okstring.length) {
+          notificationBox.removeNotification(notification);
+          inputField.removeEventListener("keypress", pasteKeyHandler);
+          WebConsoleUtils.usageCount = 11;
+          inputField.removeEventListener("paste", handler);
+          inputField.removeEventListener("drop", handler);
+        }
+      }
+      inputField.addEventListener("keypress", pasteKeyHandler);
+
+      aEvent.preventDefault();
+      aEvent.stopPropagation();
+      return false;
+      }
+      return handler;
+  },
+
+
 };
+
 exports.Utils = WebConsoleUtils;
 
 //////////////////////////////////////////////////////////////////////////
 // Localization
 //////////////////////////////////////////////////////////////////////////
 
 WebConsoleUtils.l10n = function WCU_l10n(aBundleURI)
 {
