# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  6276ec7ebbf33e3484997b189f20fc1511534187
Bug 1454445 - Add helper to get window by URL

diff --git a/browser/modules/RecentWindow.jsm b/browser/modules/RecentWindow.jsm
--- a/browser/modules/RecentWindow.jsm
+++ b/browser/modules/RecentWindow.jsm
@@ -55,11 +55,22 @@ var RecentWindow = {
     }
     let windowList = Services.wm.getZOrderDOMWindowEnumerator("navigator:browser", true);
     while (windowList.hasMoreElements()) {
       let win = windowList.getNext();
       if (isSuitableBrowserWindow(win))
         return win;
     }
     return null;
-  }
+  },
+
+  getWindowByURL(aURL) {
+    let windowList = Services.wm.getZOrderDOMWindowEnumerator(null, true);
+    while (windowList.hasMoreElements()) {
+      let win = windowList.getNext();
+      if (win.location == aURL) {
+        return win;
+      }
+    }
+    return null;
+  },
 };
 
diff --git a/devtools/client/webconsole/browserconsole.xul b/devtools/client/webconsole/browserconsole.xul
--- a/devtools/client/webconsole/browserconsole.xul
+++ b/devtools/client/webconsole/browserconsole.xul
@@ -3,14 +3,13 @@
 <!-- This Source Code Form is subject to the terms of the Mozilla Public
    - License, v. 2.0. If a copy of the MPL was not distributed with this
    - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
 <window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
         id="devtools-webconsole"
         macanimationtype="document"
         fullscreenbutton="true"
         title=""
-        windowtype="devtools:webconsole"
         width="900" height="350"
         persist="screenX screenY width height sizemode">
   <popupset></popupset>
   <iframe src="webconsole.html" flex="1"></iframe>
 </window>
\ No newline at end of file
diff --git a/devtools/server/actors/webconsole.js b/devtools/server/actors/webconsole.js
--- a/devtools/server/actors/webconsole.js
+++ b/devtools/server/actors/webconsole.js
@@ -18,16 +18,17 @@ const { createValueGrip, stringIsLong } 
 const DevToolsUtils = require("devtools/shared/DevToolsUtils");
 const ErrorDocs = require("devtools/server/actors/errordocs");
 
 loader.lazyRequireGetter(this, "NetworkMonitor", "devtools/shared/webconsole/network-monitor", true);
 loader.lazyRequireGetter(this, "NetworkMonitorChild", "devtools/shared/webconsole/network-monitor", true);
 loader.lazyRequireGetter(this, "ConsoleProgressListener", "devtools/shared/webconsole/network-monitor", true);
 loader.lazyRequireGetter(this, "StackTraceCollector", "devtools/shared/webconsole/network-monitor", true);
 loader.lazyRequireGetter(this, "JSPropertyProvider", "devtools/shared/webconsole/js-property-provider", true);
+loader.lazyRequireGetter(this, "RecentWindow", "resource:///modules/RecentWindow.jsm", true);
 loader.lazyRequireGetter(this, "Parser", "resource://devtools/shared/Parser.jsm", true);
 loader.lazyRequireGetter(this, "NetUtil", "resource://gre/modules/NetUtil.jsm", true);
 loader.lazyRequireGetter(this, "addWebConsoleCommands", "devtools/server/actors/webconsole/utils", true);
 loader.lazyRequireGetter(this, "CONSOLE_WORKER_IDS", "devtools/server/actors/webconsole/utils", true);
 loader.lazyRequireGetter(this, "WebConsoleUtils", "devtools/server/actors/webconsole/utils", true);
 loader.lazyRequireGetter(this, "EnvironmentActor", "devtools/server/actors/environment", true);
 loader.lazyRequireGetter(this, "EventEmitter", "devtools/shared/event-emitter");
 
@@ -188,17 +189,17 @@ WebConsoleActor.prototype =
   _getWindowForBrowserConsole: function() {
     // Check if our last used chrome window is still live.
     let window = this._lastChromeWindow && this._lastChromeWindow.get();
     // If not, look for a new one.
     if (!window || window.closed) {
       window = this.parentActor.window;
       if (!window) {
         // Try to find the Browser Console window to use instead.
-        window = Services.wm.getMostRecentWindow("devtools:webconsole");
+        window = RecentWindow.getWindowByURL("chrome://devtools/content/webconsole/browserconsole.xul");
         // We prefer the normal chrome window over the console window,
         // so we'll look for those windows in order to replace our reference.
         let onChromeWindowOpened = () => {
           // We'll look for this window when someone next requests window()
           Services.obs.removeObserver(onChromeWindowOpened, "domwindowopened");
           this._lastChromeWindow = null;
         };
         Services.obs.addObserver(onChromeWindowOpened, "domwindowopened");
diff --git a/devtools/startup/devtools-startup.js b/devtools/startup/devtools-startup.js
--- a/devtools/startup/devtools-startup.js
+++ b/devtools/startup/devtools-startup.js
@@ -39,16 +39,18 @@ const { XPCOMUtils } = ChromeUtils.impor
 ChromeUtils.defineModuleGetter(this, "Services",
                                "resource://gre/modules/Services.jsm");
 ChromeUtils.defineModuleGetter(this, "AppConstants",
                                "resource://gre/modules/AppConstants.jsm");
 ChromeUtils.defineModuleGetter(this, "CustomizableUI",
                                "resource:///modules/CustomizableUI.jsm");
 ChromeUtils.defineModuleGetter(this, "CustomizableWidgets",
                                "resource:///modules/CustomizableWidgets.jsm");
+ChromeUtils.defineModuleGetter(this, "RecentWindow",
+                               "resource:///modules/RecentWindow.jsm");
 
 // We don't want to spend time initializing the full loader here so we create
 // our own lazy require.
 XPCOMUtils.defineLazyGetter(this, "Telemetry", function() {
   const { require } = ChromeUtils.import("resource://devtools/shared/Loader.jsm", {});
   const Telemetry = require("devtools/client/shared/telemetry");
 
   return Telemetry;
@@ -692,17 +694,17 @@ DevToolsStartup.prototype = {
       url += "?" + params.join("&");
     }
 
     // Set relatedToCurrent: true to open the tab next to the current one.
     gBrowser.selectedTab = gBrowser.addTab(url, {relatedToCurrent: true});
   },
 
   handleConsoleFlag: function(cmdLine) {
-    let window = Services.wm.getMostRecentWindow("devtools:webconsole");
+    let window = RecentWindow.getWindowByURL("chrome://devtools/content/webconsole/browserconsole.xul");
     if (!window) {
       let require = this.initDevTools("CommandLine");
       let { HUDService } = require("devtools/client/webconsole/hudservice");
       HUDService.toggleBrowserConsole().catch(console.error);
     } else {
       // the Browser Console was already open
       window.focus();
     }
