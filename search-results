# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  e37dcb50abc2ed405a480087cf2f63f77f575310
Bug 1225514 - Handle incorrectly matched tags

diff --git a/devtools/client/inspector/inspector-search.js b/devtools/client/inspector/inspector-search.js
--- a/devtools/client/inspector/inspector-search.js
+++ b/devtools/client/inspector/inspector-search.js
@@ -383,16 +383,18 @@ SelectorAutocompleter.prototype = {
 
   /**
    * Populates the suggestions list and show the suggestion popup.
    */
   _showPopup: function(list, firstPart, aState) {
     let total = 0;
     let query = this.searchBox.value;
     let items = [];
+    console.log("_showPopup", list, firstPart, aState);
+    console.trace();
 
     for (let [value, /*count*/, state] of list) {
       // for cases like 'div ' or 'div >' or 'div+'
       if (query.match(/[\s>+]$/)) {
         value = query + value;
       }
       // for cases like 'div #a' or 'div .a' or 'div > d' and likewise
       else if (query.match(/[\s>+][\.#a-zA-Z][^\s>+\.#]*$/)) {
@@ -405,16 +407,18 @@ SelectorAutocompleter.prototype = {
         value = query.slice(0, -1 * lastPart.length + 1) + value;
       }
 
       let item = {
         preLabel: query,
         label: value
       };
 
+      console.log(item);
+
       // In case of tagNames, change the case to small
       if (value.match(/.*[\.#][^\.#]{0,}$/) == null) {
         item.label = value.toLowerCase();
       }
 
       // In case the query's state is tag and the item's state is id or class
       // adjust the preLabel
       if (aState === this.States.TAG && state === this.States.CLASS) {
@@ -474,34 +478,44 @@ SelectorAutocompleter.prototype = {
       query = query.slice(0, query.length - firstPart.length - 1);
     }
     // TODO: implement some caching so that over the wire request is not made
     // everytime.
     if (/[\s+>~]$/.test(query)) {
       query += "*";
     }
 
+    console.log("Getting suggestions for",
+      "query: " + query,
+      "firstPart: " + firstPart,
+      "state: " + state);
+
     this._lastQuery = this.walker.getSuggestionsForQuery(query, firstPart, state).then(result => {
       this.emit("processing-done");
       if (result.query !== query) {
         // This means that this response is for a previous request and the user
         // as since typed something extra leading to a new request.
         return;
       }
 
       if (state === this.States.CLASS) {
         firstPart = "." + firstPart;
       } else if (state === this.States.ID) {
         firstPart = "#" + firstPart;
       }
 
+      if (!firstPart) {
+        result.suggestions = [];
+      }
+
+      console.log("Got suggestions!", result.suggestions, firstPart, firstPart.startsWith(result.suggestions[0] && result.suggestions[0][0]))
       // If there is a single tag match and it's what the user typed, then
       // don't need to show a popup.
       if (result.suggestions.length === 1 &&
-          result.suggestions[0][0] === firstPart) {
+          firstPart.startsWith(result.suggestions[0][0])) {
         result.suggestions = [];
       }
 
 
       this._showPopup(result.suggestions, firstPart, state);
     });
 
     return this._lastQuery;
