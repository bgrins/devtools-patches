# HG changeset patch
# Parent b0c0a3322e3668ffd146954108e4fa443cf192cc
# User Patrick Brosset <pbrosset@mozilla.com>
Bug 1008584 - Preserve case when editing attributes in the inspector; r=bgrins

diff --git a/browser/devtools/markupview/markup-view.js b/browser/devtools/markupview/markup-view.js
--- a/browser/devtools/markupview/markup-view.js
+++ b/browser/devtools/markupview/markup-view.js
@@ -2195,32 +2195,60 @@ function truncateString(str, maxLength) 
  * @param  {HTMLDocument} doc
  *         A document that can be used to test valid attributes.
  * @return {Array}
  *         An array of attribute names and their values.
  */
 function parseAttributeValues(attr, doc) {
   attr = attr.trim();
 
-  // Handle bad user inputs by appending a " or ' if it fails to parse without them.
-  let el = DOMParser.parseFromString("<div " + attr + "></div>", "text/html").body.childNodes[0] ||
-           DOMParser.parseFromString("<div " + attr + "\"></div>", "text/html").body.childNodes[0] ||
-           DOMParser.parseFromString("<div " + attr + "'></div>", "text/html").body.childNodes[0];
+  // Prepare other versions of the string to be parsed by appending a " or '
+  // and using those if the first one fails to parse without these characters
+  let stringsToParse = [
+    "<div " + attr + "></div>",
+    "<div " + attr + "\"></div>",
+    "<div " + attr + "'></div>"
+  ];
+
+  // Try to parse as XML, this way, if the string is wellformed, this will
+  // preserve the case.
+  let parsedAttributes = [];
+  for (let str of stringsToParse) {
+    let parsed = DOMParser.parseFromString(str, "text/xml");
+    if (parsed.childNodes[0].localName === "div") {
+      for (let {name, value} of parsed.childNodes[0].attributes) {
+        parsedAttributes.push({ name, value });
+      }
+      break;
+    }
+  }
+
+  // If the XML parsing failed, parse as HTML to get malformed attributes
+  if (parsedAttributes.length === 0) {
+    for (let str of stringsToParse) {
+      let parsed = DOMParser.parseFromString(str, "text/html");
+      if (parsed.body.childNodes[0] &&
+          parsed.body.childNodes[0].localName === "div") {
+        for (let {name, value} of parsed.body.childNodes[0].attributes) {
+          parsedAttributes.push({ name, value });
+        }
+        break;
+      }
+    }
+  }
+
   let div = doc.createElement("div");
 
   let attributes = [];
-  for (let attribute of el.attributes) {
+  for (let {name, value} of parsedAttributes) {
     // Try to set on an element in the document, throws exception on bad input.
     // Prevents InvalidCharacterError - "String contains an invalid character".
     try {
-      div.setAttribute(attribute.name, attribute.value);
-      attributes.push({
-        name: attribute.name,
-        value: attribute.value
-      });
+      div.setAttribute(name, value);
+      attributes.push({ name, value });
     }
     catch(e) { }
   }
 
   // Attributes return from DOMParser in reverse order from how they are entered.
   return attributes.reverse();
 }
 
diff --git a/browser/devtools/markupview/test/browser.ini b/browser/devtools/markupview/test/browser.ini
--- a/browser/devtools/markupview/test/browser.ini
+++ b/browser/devtools/markupview/test/browser.ini
@@ -7,16 +7,17 @@ support-files =
   doc_markup_events-overflow.html
   doc_markup_flashing.html
   doc_markup_mutation.html
   doc_markup_navigation.html
   doc_markup_not_displayed.html
   doc_markup_pagesize_01.html
   doc_markup_pagesize_02.html
   doc_markup_search.html
+  doc_markup_svg_attributes.html
   doc_markup_toggle.html
   doc_markup_tooltip.png
   head.js
   helper_attributes_test_runner.js
   helper_events_test_runner.js
   helper_outerhtml_test_runner.js
   lib_jquery_1.0.js
   lib_jquery_1.1.js
@@ -75,12 +76,13 @@ skip-if = e10s # Bug 1036409 - The last 
 [browser_markupview_tag_edit_02.js]
 [browser_markupview_tag_edit_03.js]
 skip-if = e10s # Bug 1036421 - Tag editing isn't remote-safe
 [browser_markupview_tag_edit_04.js]
 [browser_markupview_tag_edit_05.js]
 [browser_markupview_tag_edit_06.js]
 [browser_markupview_tag_edit_07.js]
 [browser_markupview_tag_edit_08.js]
+[browser_markupview_tag_edit_09.js]
 [browser_markupview_textcontent_edit_01.js]
 [browser_markupview_toggle_01.js]
 [browser_markupview_toggle_02.js]
 [browser_markupview_toggle_03.js]
diff --git a/browser/devtools/markupview/test/browser_markupview_tag_edit_09.js b/browser/devtools/markupview/test/browser_markupview_tag_edit_09.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/markupview/test/browser_markupview_tag_edit_09.js
@@ -0,0 +1,43 @@
+/* vim: set ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+ http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Test that editing a mixed-case attribute preserves the case
+
+const TEST_URL = TEST_URL_ROOT + "doc_markup_svg_attributes.html";
+
+let test = asyncTest(function*() {
+  let {inspector} = yield addTab(TEST_URL).then(openInspector);
+
+  yield inspector.markup.expandAll();
+  yield selectNode("svg", inspector);
+
+  assertAttributes("svg", {
+    "viewBox": "0 0 2 2",
+    "width": "200",
+    "height": "200"
+  });
+
+  info("Listening to markup mutations");
+  let onMutated = inspector.once("markupmutation");
+
+  info("Focusing the viewBox attribute editor");
+  let {editor} = yield getContainerForSelector("svg", inspector);
+  let attr = editor.attrs["viewBox"].querySelector(".editable");
+  attr.focus();
+  EventUtils.sendKey("return", inspector.panelWin);
+
+  info("Editing the attribute value and waiting for the mutation event");
+  let input = inplaceEditor(attr).input;
+  input.value = "viewBox=\"0 0 1 1\"";
+  EventUtils.sendKey("return", inspector.panelWin);
+  yield onMutated;
+
+  assertAttributes("svg", {
+    "viewBox": "0 0 1 1",
+    "width": "200",
+    "height": "200"
+  });
+});
diff --git a/browser/devtools/markupview/test/doc_markup_svg_attributes.html b/browser/devtools/markupview/test/doc_markup_svg_attributes.html
new file mode 100644
--- /dev/null
+++ b/browser/devtools/markupview/test/doc_markup_svg_attributes.html
@@ -0,0 +1,8 @@
+<!DOCTYPE html>
+<html>
+  <body>
+    <svg viewBox="0 0 2 2" width=200 height=200>
+      <circle cx=1 cy=1 r=1 fill=lime/>
+    </svg>
+  </body>
+</html>
