# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  a3978751f45108ff1ae002ecebdc0fa23fc52b84
Bug 1308216 - Fixup test_render_perf.html to make local perf testing easier

diff --git a/devtools/client/webconsole/new-console-output/test/chrome/test_render_perf.html b/devtools/client/webconsole/new-console-output/test/chrome/test_render_perf.html
--- a/devtools/client/webconsole/new-console-output/test/chrome/test_render_perf.html
+++ b/devtools/client/webconsole/new-console-output/test/chrome/test_render_perf.html
@@ -11,17 +11,17 @@
 <body>
 <p>Test for render perf</p>
 <div id="output"></div>
 
 <script type="text/javascript;version=1.8">
 "use strict";
 
 const testPackets = [];
-const numMessages = 1000;
+const numMessages = 10000;
 for (let id = 0; id < numMessages; id++) {
   let message = "Odd text";
   if (id % 2 === 0) {
     message = "Even text";
   }
   testPackets.push({
     "from": "server1.conn4.child1/consoleActor2",
     "type": "consoleAPICall",
@@ -47,47 +47,56 @@ for (let id = 0; id < numMessages; id++)
     }
   });
 }
 
 function timeit(cb) {
   // Return a Promise that resolves the number of seconds cb takes.
   return new Promise(resolve => {
     let start = performance.now();
-    cb();
-    let elapsed = performance.now() - start;
-    resolve(elapsed / 1000);
+    cb().then(() => {
+      let elapsed = performance.now() - start;
+      resolve(elapsed / 1000);
+    })
   });
 }
 
 window.onload = Task.async(function* () {
   const { configureStore } = browserRequire(
     "devtools/client/webconsole/new-console-output/store");
   const { filterTextSet, filtersClear } = browserRequire(
     "devtools/client/webconsole/new-console-output/actions/index");
   const NewConsoleOutputWrapper = browserRequire(
     "devtools/client/webconsole/new-console-output/new-console-output-wrapper");
-  const wrapper = new NewConsoleOutputWrapper(document.querySelector("#output"), {});
-
+  const wrapper = new NewConsoleOutputWrapper(document.querySelector("#output"), { hud: { emit: () => {}, proxy: {} } }, {}, {}, {});
+  wrapper.init();
   const store = configureStore();
 
   let time = yield timeit(() => {
-    testPackets.forEach((message) => {
-      wrapper.dispatchMessageAdd(message);
-    });
+    return Promise.all(
+      testPackets.map((message) => {
+        return wrapper.dispatchMessageAdd(message);
+      })
+    );
   });
   info("took " + time + " seconds to render messages");
 
   time = yield timeit(() => {
-    store.dispatch(filterTextSet("Odd text"));
+    return new Promise(resolve => {
+      store.dispatch(filterTextSet("Odd text"));
+      resolve();
+    });
   });
   info("took " + time + " seconds to search filter half the messages");
 
   time = yield timeit(() => {
-    store.dispatch(filtersClear());
+    return new Promise(resolve => {
+      store.dispatch(filtersClear());
+      resolve();
+    });
   });
   info("took " + time + " seconds to clear the filter");
 
   ok(true, "Yay, it didn't time out!");
 
   SimpleTest.finish();
 });
 </script>
