# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  a46e0f1e5f17ba6f7f41e03e832af983c63dc91c
Bug 1150215 - Add devtools test for talos

diff --git a/talos/page_load_test/devtools/addon/chrome.manifest b/talos/page_load_test/devtools/addon/chrome.manifest
new file mode 100644
--- /dev/null
+++ b/talos/page_load_test/devtools/addon/chrome.manifest
@@ -0,0 +1,2 @@
+content devtools content/
+overlay chrome://browser/content/browser.xul chrome://devtools/content/devtools.overlay.xul
diff --git a/talos/page_load_test/devtools/addon/content/devtools.js b/talos/page_load_test/devtools/addon/content/devtools.js
new file mode 100644
--- /dev/null
+++ b/talos/page_load_test/devtools/addon/content/devtools.js
@@ -0,0 +1,33 @@
+
+var self = {};
+var name ="dt";
+var intervals = averageOverall = averageLastHalf = durationDiff = 0;
+self._results = [];
+self._results.push({name: name + ".raw.TART",   value: intervals}); // Just for display if running manually - Not collected for talos.
+self._results.push({name: name + ".half.TART",  value: averageLastHalf});
+self._results.push({name: name + ".all.TART",   value: averageOverall});
+self._results.push({name: name + ".error.TART", value: durationDiff});
+
+function reportAllResults() {
+var testNames = [];
+var testResults = [];
+
+var out = "";
+for (var i in self._results) {
+  res = self._results[i];
+  var disp = [].concat(res.value).map(function(a){return (isNaN(a) ? -1 : a.toFixed(1));}).join(" ");
+  out += res.name + ": " + disp + "\n";
+
+  if (!Array.isArray(res.value)) { // Waw intervals array is not reported to talos
+    testNames.push(res.name);
+    testResults.push(res.value);
+  }
+}
+console.log("\n" + out, content);
+
+if (content && content.tpRecordTime) {
+  content.tpRecordTime(testResults.join(','), 0, testNames.join(','));
+} else {
+  //alert(out);
+}
+}
diff --git a/talos/page_load_test/devtools/addon/content/devtools.overlay.xul b/talos/page_load_test/devtools/addon/content/devtools.overlay.xul
new file mode 100644
--- /dev/null
+++ b/talos/page_load_test/devtools/addon/content/devtools.overlay.xul
@@ -0,0 +1,64 @@
+<?xml version="1.0"?>
+<overlay id="Scrapper-Overlay" xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
+
+<script type="application/x-javascript" src="Profiler.js" />
+<script type="application/x-javascript" src="tart.js" />
+<script type="application/x-javascript">
+
+(function(){
+  const Cc = Components.classes;
+  const Ci = Components.interfaces;
+  var prefs = Cc["@mozilla.org/preferences-service;1"].getService(Ci.nsIPrefBranch);
+
+  const TART_PREFIX = "tart@mozilla.org:";
+
+  // "services" which the framescript can execute at the chrome process
+  var proxiedServices = {
+    runTest: function(config, callback) {
+      (new Tart()).startTest(callback, config);
+    },
+
+    setASAP: function() {
+      prefs.setIntPref("layout.frame_rate", 0);
+      prefs.setIntPref("docshell.event_starvation_delay_hint", 1);
+    },
+
+    unsetASAP: function() {
+      prefs.clearUserPref("layout.frame_rate");
+      prefs.clearUserPref("docshell.event_starvation_delay_hint");
+    },
+
+    toClipboard: function(text) {
+      const gClipboardHelper = Cc["@mozilla.org/widget/clipboardhelper;1"]
+                               .getService(Ci.nsIClipboardHelper);
+      gClipboardHelper.copyString(text);
+    }
+  };
+
+  var groupMM = window.getGroupMessageManager("browsers");
+  groupMM.loadFrameScript("chrome://tart/content/framescript.js", true);
+
+  // listener/executor on the chrome process for tart.html
+  groupMM.addMessageListener(TART_PREFIX + "chrome-exec-message", function listener(m) {
+    function sendResult(result) {
+      groupMM.broadcastAsyncMessage(TART_PREFIX + "chrome-exec-reply", {
+        id: m.data.id,
+        result: result
+      });
+    }
+
+    var command = m.data.command;
+    if (!proxiedServices.hasOwnProperty(command.name))
+      throw new Error("TART: service doesn't exist: '" + command.name + "'");
+
+    var service = proxiedServices[command.name];
+    if (command.name == "runTest") // Needs async execution
+      service(command.data, sendResult);
+    else
+      sendResult(service(command.data));
+
+  });
+})();
+
+</script>
+</overlay>
diff --git a/talos/page_load_test/devtools/addon/content/index.html b/talos/page_load_test/devtools/addon/content/index.html
new file mode 100644
--- /dev/null
+++ b/talos/page_load_test/devtools/addon/content/index.html
@@ -0,0 +1,28 @@
+<!DOCTYPE html>
+<html lang="en">
+   <head>
+      <title>Devtools</title>
+   </head>
+   <body>
+      <script src="devtools.js"></script>
+      <script>
+netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
+Components.utils.import("resource:///modules/devtools/gDevTools.jsm");
+const {devtools} =
+  Components.utils.import("resource://gre/modules/devtools/Loader.jsm", {});
+const { getActiveTab } = devtools.require("sdk/tabs/utils");
+const { getMostRecentBrowserWindow } = devtools.require("sdk/window/utils");
+
+const targetFor = target => {
+  target = target || getActiveTab(getMostRecentBrowserWindow());
+  return devtools.TargetFactory.forTab(target);
+};
+
+gDevTools.showToolbox(targetFor(), "inspector").then(() => {
+  reportAllResults();
+});
+      </script>
+
+      talos -n -d --develop --executablePath /Users/bgrinstead/Code/fx-team/obj-x86_64-apple-darwin14.1.0/dist/Nightly.app/Contents/MacOS/firefox --activeTests devtools --output ts_desktop.yml
+   </body>
+</html>
diff --git a/talos/page_load_test/devtools/addon/content/index2.html b/talos/page_load_test/devtools/addon/content/index2.html
new file mode 100644
--- /dev/null
+++ b/talos/page_load_test/devtools/addon/content/index2.html
@@ -0,0 +1,24 @@
+<!DOCTYPE html>
+<html lang="en">
+   <head>
+      <title>Devtools</title>
+   </head>
+   <body>
+      <script>
+netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
+Components.utils.import("resource:///modules/devtools/gDevTools.jsm");
+const {devtools} =
+  Components.utils.import("resource://gre/modules/devtools/Loader.jsm", {});
+const { getActiveTab } = devtools.require("sdk/tabs/utils");
+const { getMostRecentBrowserWindow } = devtools.require("sdk/window/utils");
+
+const targetFor = target => {
+  target = target || getActiveTab(getMostRecentBrowserWindow());
+  return devtools.TargetFactory.forTab(target);
+};
+
+gDevTools.showToolbox(targetFor(), "inspector");
+      </script>
+2
+   </body>
+</html>
diff --git a/talos/page_load_test/devtools/addon/install.rdf b/talos/page_load_test/devtools/addon/install.rdf
new file mode 100644
--- /dev/null
+++ b/talos/page_load_test/devtools/addon/install.rdf
@@ -0,0 +1,20 @@
+<?xml version="1.0"?><RDF xmlns="http://www.w3.org/1999/02/22-rdf-syntax-ns#"     xmlns:em="http://www.mozilla.org/2004/em-rdf#"><Description about="urn:mozilla:install-manifest">
+
+<!-- Required Items -->
+<em:id>bug1150215@mozilla.org</em:id>
+<em:name>DUMP - Devtools Usage M P</em:name>
+<em:version>0.1.1</em:version>
+
+<em:targetApplication>
+    <Description>
+        <em:id>{ec8030f7-c20a-464f-9b0e-13a3a9e97384}</em:id>
+        <em:minVersion>1.5</em:minVersion>
+        <em:maxVersion>99.0.*</em:maxVersion>
+    </Description>
+</em:targetApplication>
+
+<!-- Optional Items -->
+<em:creator>Brian Grinstead</em:creator>
+<em:description>Bug 1150215. To run: navigate to chrome://devtools/content/index.html</em:description>
+<em:homepageURL>https://bugzilla.mozilla.org/show_bug.cgi?id=1150215</em:homepageURL>
+</Description></RDF>
diff --git a/talos/page_load_test/devtools/devtools.manifest b/talos/page_load_test/devtools/devtools.manifest
new file mode 100644
--- /dev/null
+++ b/talos/page_load_test/devtools/devtools.manifest
@@ -0,0 +1,4 @@
+% chrome://devtools/content/index.html#auto
+
+#% http://localhost/page_load_test/devtools/index.html?auto=true
+#% http://localhost/page_load_test/devtools/index2.html?auto=true
diff --git a/talos/test.py b/talos/test.py
--- a/talos/test.py
+++ b/talos/test.py
@@ -640,16 +640,26 @@ class tscrollr(PageloaderTest):
     """
     Like tscroll, this test does some scrolly thing. Unlike tscroll, this
     test is row-based instead of column based.
     """
     tpmanifest = '${talos}/page_load_test/scroll/scroll.manifest'
     tpcycles = 1
     tppagecycles = 25
 
+class devtools(PageloaderTest):
+    """
+    XXXX
+    """
+    tpmanifest = '${talos}/page_load_test/devtools/devtools.manifest'
+    extensions = '${talos}/page_load_test/devtools/addon'
+    tpcycles = 1
+    mobile = False
+    tppagecycles = 25
+
 class tscrollx(PageloaderTest):
     """
     Like tscroll, this test does some scrolly thing. Unlike tscroll, this
     test is row-based instead of column based.
     """
     tpmanifest = '${talos}/page_load_test/scroll/scroll.manifest'
     tpcycles = 1
     tppagecycles = 25
@@ -677,11 +687,12 @@ class a11yr(PageloaderTest):
 
 # global test data
 tests = [ts_paint, ts, tsvg, tdhtml, ts_paint_cold,
          tp4m, tp5n, tp5o, tpaint, tresize, tp5o_scroll,
          trobopan, tcheckerboard, tprovider, tcheck2, tcanvasmark,
          dromaeo_css, dromaeo_dom, v8_7, kraken, media_tests,
          tdhtmlr, tsvgr, tsvgr_opacity, tscrollr, a11yr,
          tsvgx, tscrollx, tart, cart, glterrain,
-         sessionrestore, sessionrestore_no_auto_restore
+         sessionrestore, sessionrestore_no_auto_restore,
+         devtools
          ]
 test_dict = dict([(i.name(), i) for i in tests])
