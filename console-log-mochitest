# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  138bfb083317b9834a4776e28a71c710c6d73181
Bug 1175318 - Import Console.jsm for mochitests;r=ted

diff --git a/dom/base/ConsoleAPIStorage.js b/dom/base/ConsoleAPIStorage.js
--- a/dom/base/ConsoleAPIStorage.js
+++ b/dom/base/ConsoleAPIStorage.js
@@ -109,16 +109,19 @@ ConsoleAPIStorageService.prototype = {
   },
 
   /**
    * Record an event associated with the given window ID.
    *
    * @param string aId
    *        The ID of the inner window for which the event occurred or "jsm" for
    *        messages logged from JavaScript modules..
+   * @param string aOuterId
+   *        This ID is used as 3rd parameters for the console-api-log-event
+   *        notification.
    * @param object aEvent
    *        A JavaScript object you want to store.
    */
   recordEvent: function CS_recordEvent(aId, aOuterId, aEvent)
   {
     if (!_consoleStorage.has(aId)) {
       _consoleStorage.set(aId, []);
     }
diff --git a/dom/tests/browser/browser_ConsoleStoragePBTest_perwindowpb.js b/dom/tests/browser/browser_ConsoleStoragePBTest_perwindowpb.js
--- a/dom/tests/browser/browser_ConsoleStoragePBTest_perwindowpb.js
+++ b/dom/tests/browser/browser_ConsoleStoragePBTest_perwindowpb.js
@@ -45,17 +45,17 @@ function test() {
               aCallback();
             });
           }
         }
       };
 
       aWindow.Services.obs.addObserver(
         consoleObserver, "console-api-log-event", false);
-      aWindow.console.log("foo bar baz (private: " + aIsPrivateMode + ")");
+      aWindow.nativeConsole.log("foo bar baz (private: " + aIsPrivateMode + ")");
     }, true);
 
     // We expect that console API messages are always stored.
     storageShouldOccur = true;
     innerID = getInnerWindowId(aWindow);
     beforeEvents = ConsoleAPIStorage.getEvents(innerID);
     aWindow.gBrowser.selectedBrowser.loadURI(testURI);
   }
diff --git a/testing/mochitest/browser-test.js b/testing/mochitest/browser-test.js
--- a/testing/mochitest/browser-test.js
+++ b/testing/mochitest/browser-test.js
@@ -24,16 +24,20 @@ XPCOMUtils.defineLazyModuleGetter(this, 
   "resource:///modules/CustomizationTabPreloader.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "ContentSearch",
   "resource:///modules/ContentSearch.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "SelfSupportBackend",
   "resource:///modules/SelfSupportBackend.jsm");
 
+var nativeConsole = console;
+XPCOMUtils.defineLazyModuleGetter(this, "console",
+  "resource://gre/modules/devtools/Console.jsm");
+
 const SIMPLETEST_OVERRIDES =
   ["ok", "is", "isnot", "todo", "todo_is", "todo_isnot", "info", "expectAssertions", "requestCompleteLog"];
 
 window.addEventListener("load", function testOnLoad() {
   window.removeEventListener("load", testOnLoad);
   window.addEventListener("MozAfterPaint", function testOnMozAfterPaint() {
     window.removeEventListener("MozAfterPaint", testOnMozAfterPaint);
     setTimeout(testInit, 0);
diff --git a/toolkit/devtools/webconsole/test/test_basics.html b/toolkit/devtools/webconsole/test/test_basics.html
--- a/toolkit/devtools/webconsole/test/test_basics.html
+++ b/toolkit/devtools/webconsole/test/test_basics.html
@@ -13,17 +13,17 @@
 
 <script class="testbody" type="text/javascript;version=1.8">
 SimpleTest.waitForExplicitFinish();
 
 function startTest()
 {
   removeEventListener("load", startTest);
 
-  attachConsole(["PageError"], onStartPageError);
+  attachConsole(["PageError"], onStartPageError, true);
 }
 
 function onStartPageError(aState, aResponse)
 {
   is(aResponse.startedListeners.length, 1, "startedListeners.length");
   is(aResponse.startedListeners[0], "PageError", "startedListeners: PageError");
   ok(aResponse.nativeConsoleAPI, "nativeConsoleAPI");
 
@@ -40,27 +40,28 @@ function onStartPageErrorAndConsoleAPI(a
   let startedListeners = aResponse.startedListeners;
   is(startedListeners.length, 2, "startedListeners.length");
   isnot(startedListeners.indexOf("PageError"), -1, "startedListeners: PageError");
   isnot(startedListeners.indexOf("ConsoleAPI"), -1,
         "startedListeners: ConsoleAPI");
   is(startedListeners.indexOf("foo"), -1, "startedListeners: no foo");
   ok(!aResponse.nativeConsoleAPI, "!nativeConsoleAPI");
 
+  top.console = top.console_;
   aState.client.stopListeners(["ConsoleAPI", "foo"],
                               onStopConsoleAPI.bind(null, aState));
 }
 
 function onStopConsoleAPI(aState, aResponse)
 {
   is(aResponse.stoppedListeners.length, 1, "stoppedListeners.length");
   is(aResponse.stoppedListeners[0], "ConsoleAPI", "stoppedListeners: ConsoleAPI");
 
   closeDebugger(aState, function() {
-    attachConsole(["ConsoleAPI"], onStartConsoleAPI);
+    attachConsole(["ConsoleAPI"], onStartConsoleAPI, true);
   });
 }
 
 function onStartConsoleAPI(aState, aResponse)
 {
   is(aResponse.startedListeners.length, 1, "startedListeners.length");
   is(aResponse.startedListeners[0], "ConsoleAPI", "startedListeners: ConsoleAPI");
   ok(aResponse.nativeConsoleAPI, "nativeConsoleAPI");
