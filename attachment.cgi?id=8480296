# HG changeset patch
# User James Teh <jamie@nvaccess.org>
# Date 1409186405 -36000
#      Thu Aug 28 10:40:05 2014 +1000
# Node ID 0814757c2b59fc4f47f791d72d7993dd63729668
# Parent  7bd309e55a3dfe86debfa3fe06eeb2ca50e95694
Bug 977267 - [a11y] Make autocomplete suggestions accessible to screen readers

diff --git a/browser/devtools/shared/autocomplete-popup.js b/browser/devtools/shared/autocomplete-popup.js
--- a/browser/devtools/shared/autocomplete-popup.js
+++ b/browser/devtools/shared/autocomplete-popup.js
@@ -60,16 +60,18 @@ function AutocompletePopup(aDocument, aO
     this._panel.className = "devtools-autocomplete-popup devtools-monospace "
                             + theme + "-theme";
 
     this._panel.setAttribute("noautofocus", "true");
     this._panel.setAttribute("level", "top");
     if (!aOptions.onKeypress) {
       this._panel.setAttribute("ignorekeys", "true");
     }
+    // Stop this appearing as an alert to accessibility.
+    this._panel.setAttribute("role", "presentation");
 
     let mainPopupSet = this._document.getElementById("mainPopupSet");
     if (mainPopupSet) {
       mainPopupSet.appendChild(this._panel);
     }
     else {
       this._document.documentElement.appendChild(this._panel);
     }
@@ -101,16 +103,17 @@ function AutocompletePopup(aDocument, aO
 
   if (this.onClick) {
     this._list.addEventListener("click", this.onClick, false);
   }
 
   if (this.onKeypress) {
     this._list.addEventListener("keypress", this.onKeypress, false);
   }
+  this._itemIdCounter = 0;
 }
 exports.AutocompletePopup = AutocompletePopup;
 
 AutocompletePopup.prototype = {
   _document: null,
   _panel: null,
   _list: null,
   __scrollbarWidth: null,
@@ -143,16 +146,18 @@ AutocompletePopup.prototype = {
     }
   },
 
   /**
    * Hide the autocomplete popup panel.
    */
   hidePopup: function AP_hidePopup()
   {
+    // Return accessibility focus to the input.
+    this._document.activeElement.removeAttribute("aria-activedescendant");
     this._panel.hidePopup();
   },
 
   /**
    * Check if the autocomplete popup is open.
    */
   get isOpen() {
     return this._panel &&
@@ -291,16 +296,33 @@ AutocompletePopup.prototype = {
       return;
     }
 
     this._list.style.width = (this._maxLabelLength + 3) +"ch";
     this._list.ensureIndexIsVisible(this._list.selectedIndex);
   },
 
   /**
+   * Update accessibility appropriately when the selected item is changed.
+   *
+   * @private
+   */
+  _updateAriaActiveDescendant: function AP__updateAriaActiveDescendant()
+  {
+    if (!this._list.selectedItem) {
+      // Return accessibility focus to the input.
+      this._document.activeElement.removeAttribute("aria-activedescendant");
+      return;
+    }
+    // Focus this for accessibility so users know about the selected item.
+    this._document.activeElement.setAttribute("aria-activedescendant",
+                                              this._list.selectedItem.id);
+  },
+
+  /**
    * Clear all the items from the autocomplete list.
    */
   clearItems: function AP_clearItems()
   {
     // Reset the selectedIndex to -1 before clearing the list
     this.selectedIndex = -1;
 
     while (this._list.hasChildNodes()) {
@@ -335,16 +357,17 @@ AutocompletePopup.prototype = {
    * @param number aIndex
    *        The number (index) of the item you want to select in the list.
    */
   set selectedIndex(aIndex) {
     this._list.selectedIndex = aIndex;
     if (this.isOpen && this._list.ensureIndexIsVisible) {
       this._list.ensureIndexIsVisible(this._list.selectedIndex);
     }
+    this._updateAriaActiveDescendant();
   },
 
   /**
    * Getter for the selected item.
    * @type object
    */
   get selectedItem() {
     return this._list.selectedItem ?
@@ -357,16 +380,17 @@ AutocompletePopup.prototype = {
    * @param object aItem
    *        The object you want selected in the list.
    */
   set selectedItem(aItem) {
     this._list.selectedItem = this._findListItem(aItem);
     if (this.isOpen) {
       this._list.ensureIndexIsVisible(this._list.selectedIndex);
     }
+    this._updateAriaActiveDescendant();
   },
 
   /**
    * Append an item into the autocomplete list.
    *
    * @param object aItem
    *        The item you want appended to the list.
    *        The item object can have the following properties:
@@ -378,16 +402,18 @@ AutocompletePopup.prototype = {
    *                   present, |preLabel.length| starting characters will be
    *                   removed from label.
    *        - count {Number} [Optional] The number to represent the count of
    *                autocompleted label.
    */
   appendItem: function AP_appendItem(aItem)
   {
     let listItem = this._document.createElementNS(XUL_NS, "richlistitem");
+    // Items must have an id for accessibility.
+    listItem.id = this._panel.id + "_item_" + this._itemIdCounter++;
     if (this.direction) {
       listItem.setAttribute("dir", this.direction);
     }
     let label = this._document.createElementNS(XUL_NS, "label");
     label.setAttribute("value", aItem.label);
     label.setAttribute("class", "autocomplete-value");
     if (aItem.preLabel) {
       let preDesc = this._document.createElementNS(XUL_NS, "label");
diff --git a/browser/devtools/webconsole/test/browser_webconsole_bug_585991_autocomplete_popup.js b/browser/devtools/webconsole/test/browser_webconsole_bug_585991_autocomplete_popup.js
--- a/browser/devtools/webconsole/test/browser_webconsole_bug_585991_autocomplete_popup.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_bug_585991_autocomplete_popup.js
@@ -17,79 +17,98 @@ function consoleOpened(HUD) {
   let items = [
     {label: "item0", value: "value0"},
     {label: "item1", value: "value1"},
     {label: "item2", value: "value2"},
   ];
 
   let popup = HUD.jsterm.autocompletePopup;
 
+  let input = popup._document.activeElement;
+  function getActiveDescendant() {
+    return input.ownerDocument.getElementById(
+      input.getAttribute("aria-activedescendant"));
+  }
+
   ok(!popup.isOpen, "popup is not open");
+  ok(!input.hasAttribute("aria-activedescendant"), "no aria-activedescendant");
 
   popup._panel.addEventListener("popupshown", function() {
     popup._panel.removeEventListener("popupshown", arguments.callee, false);
 
     ok(popup.isOpen, "popup is open");
 
     is(popup.itemCount, 0, "no items");
+    ok(!input.hasAttribute("aria-activedescendant"),
+       "no aria-activedescendant");
 
     popup.setItems(items);
 
     is(popup.itemCount, items.length, "items added");
 
     let sameItems = popup.getItems();
     is(sameItems.every(function(aItem, aIndex) {
       return aItem === items[aIndex];
     }), true, "getItems returns back the same items");
 
     is(popup.selectedIndex, 2,
        "Index of the first item from bottom is selected.");
     is(popup.selectedItem, items[2], "First item from bottom is selected");
+    ok(getActiveDescendant().selected, "aria-activedescendant is correct");
 
     popup.selectedIndex = 1;
 
     is(popup.selectedIndex, 1, "index 1 is selected");
     is(popup.selectedItem, items[1], "item1 is selected");
+    ok(getActiveDescendant().selected, "aria-activedescendant is correct");
 
     popup.selectedItem = items[2];
 
     is(popup.selectedIndex, 2, "index 2 is selected");
     is(popup.selectedItem, items[2], "item2 is selected");
+    ok(getActiveDescendant().selected, "aria-activedescendant is correct");
 
     is(popup.selectPreviousItem(), items[1], "selectPreviousItem() works");
 
     is(popup.selectedIndex, 1, "index 1 is selected");
     is(popup.selectedItem, items[1], "item1 is selected");
+    ok(getActiveDescendant().selected, "aria-activedescendant is correct");
 
     is(popup.selectNextItem(), items[2], "selectPreviousItem() works");
 
     is(popup.selectedIndex, 2, "index 2 is selected");
     is(popup.selectedItem, items[2], "item2 is selected");
+    ok(getActiveDescendant().selected, "aria-activedescendant is correct");
 
     ok(popup.selectNextItem(), "selectPreviousItem() works");
 
     is(popup.selectedIndex, 0, "index 0 is selected");
     is(popup.selectedItem, items[0], "item0 is selected");
+    ok(getActiveDescendant().selected, "aria-activedescendant is correct");
 
     items.push({label: "label3", value: "value3"});
     popup.appendItem(items[3]);
 
     is(popup.itemCount, items.length, "item3 appended");
 
     popup.selectedIndex = 3;
     is(popup.selectedItem, items[3], "item3 is selected");
+    ok(getActiveDescendant().selected, "aria-activedescendant is correct");
 
     popup.removeItem(items[2]);
 
     is(popup.selectedIndex, 2, "index2 is selected");
     is(popup.selectedItem, items[3], "item3 is still selected");
+    ok(getActiveDescendant().selected, "aria-activedescendant is correct");
     is(popup.itemCount, items.length - 1, "item2 removed");
 
     popup.clearItems();
     is(popup.itemCount, 0, "items cleared");
+    ok(!input.hasAttribute("aria-activedescendant"),
+       "no aria-activedescendant");
 
     popup.hidePopup();
     finishTest();
   }, false);
 
   popup.openPopup();
 }
 
diff --git a/browser/devtools/webconsole/webconsole.xul b/browser/devtools/webconsole/webconsole.xul
--- a/browser/devtools/webconsole/webconsole.xul
+++ b/browser/devtools/webconsole/webconsole.xul
@@ -178,17 +178,18 @@ function goUpdateConsoleCommands() {
              tabindex="0" role="document" aria-live="polite" />
       </hbox>
       <notificationbox id="webconsole-notificationbox">
         <hbox class="jsterm-input-container" style="direction:ltr">
           <stack class="jsterm-stack-node" flex="1">
             <textbox class="jsterm-complete-node devtools-monospace"
                      multiline="true" rows="1" tabindex="-1"/>
             <textbox class="jsterm-input-node devtools-monospace"
-                     multiline="true" rows="1" tabindex="0"/>
+                     multiline="true" rows="1" tabindex="0"
+                     aria-autocomplete="list"/>
           </stack>
         </hbox>
       </notificationbox>
     </vbox>
 
     <splitter class="devtools-side-splitter"/>
 
     <tabbox id="webconsole-sidebar" class="devtools-sidebar-tabs" hidden="true" width="300">
