# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  2fa0d21f1f52ded8409f2c374c8aa7a5d8672072
Remove tab drag indicator from startup images

diff --git a/browser/base/content/browser.xhtml b/browser/base/content/browser.xhtml
--- a/browser/base/content/browser.xhtml
+++ b/browser/base/content/browser.xhtml
@@ -725,17 +725,17 @@
           <hbox id="TabsToolbar-customization-target" flex="1">
             <tabs id="tabbrowser-tabs"
                   is="tabbrowser-tabs"
                   flex="1"
                   setfocus="false"
                   tooltip="tabbrowser-tab-tooltip"
                   stopwatchid="FX_TAB_CLICK_MS">
               <hbox class="tab-drop-indicator-box">
-                <image class="tab-drop-indicator" collapsed="true"></image>
+                <image class="tab-drop-indicator" hidden="true"></image>
               </hbox>
               <arrowscrollbox orient="horizontal" flex="1" style="min-width: 1px;" clicktoscroll="true" class="tabbrowser-arrowscrollbox">
                 <tab is="tabbrowser-tab" class="tabbrowser-tab" selected="true" visuallyselected="true" fadein="true"/>
                 <toolbarbutton class="tabs-newtab-button toolbarbutton-1" command="cmd_newNavigatorTab" onclick="checkForMiddleClick(this, event);"></toolbarbutton>
                 <spacer class="closing-tabs-spacer" style="width: 0;" />
               </arrowscrollbox>
             </tabs>
 
diff --git a/browser/base/content/tabbrowser-tabs.js b/browser/base/content/tabbrowser-tabs.js
--- a/browser/base/content/tabbrowser-tabs.js
+++ b/browser/base/content/tabbrowser-tabs.js
@@ -441,17 +441,17 @@ class MozTabbrowserTabs extends MozEleme
       event.stopPropagation();
     });
 
     this.addEventListener("dragover", (event) => {
       var effects = this._getDropEffectForTabDrag(event);
 
       var ind = this._tabDropIndicator;
       if (effects == "" || effects == "none") {
-        ind.collapsed = true;
+        ind.hidden = true;
         return;
       }
       event.preventDefault();
       event.stopPropagation();
 
       var arrowScrollbox = this.arrowScrollbox;
 
       // autoscroll the tab strip if we drag over the scroll
@@ -470,17 +470,17 @@ class MozTabbrowserTabs extends MozEleme
         }
         if (pixelsToScroll)
           arrowScrollbox.scrollByPixels((RTL_UI ? -1 : 1) * pixelsToScroll, true);
       }
 
       let draggedTab = event.dataTransfer.mozGetDataAt(TAB_DROP_TYPE, 0);
       if ((effects == "move" || effects == "copy") &&
           this == draggedTab.container) {
-            ind.collapsed = true;
+            ind.hidden = true;
 
             if (!this._isGroupTabsAnimationOver()) {
               // Wait for grouping tabs animation to finish
               return;
             }
             this._finishGroupSelectedTabs(draggedTab);
 
             if (effects == "move") {
@@ -493,17 +493,17 @@ class MozTabbrowserTabs extends MozEleme
 
       if (effects == "link") {
         let tab = this._getDragTargetTab(event, true);
         if (tab) {
           if (!this._dragTime)
             this._dragTime = Date.now();
           if (Date.now() >= this._dragTime + this._dragOverDelay)
             this.selectedItem = tab;
-          ind.collapsed = true;
+          ind.hidden = true;
           return;
         }
       }
 
       var rect = arrowScrollbox.getBoundingClientRect();
       var newMargin;
       if (pixelsToScroll) {
         // if we are scrolling, put the drop indicator at the edge
@@ -532,17 +532,17 @@ class MozTabbrowserTabs extends MozEleme
           if (RTL_UI) {
             newMargin = rect.right - tabRect.right;
           } else {
             newMargin = tabRect.left - rect.left;
           }
         }
       }
 
-      ind.collapsed = false;
+      ind.hidden = false;
 
       newMargin += ind.clientWidth / 2;
       if (RTL_UI) {
         newMargin *= -1;
       }
 
       ind.style.transform = "translate(" + Math.round(newMargin) + "px)";
       ind.style.marginInlineStart = (-ind.clientWidth) + "px";
@@ -557,17 +557,17 @@ class MozTabbrowserTabs extends MozEleme
         draggedTab = dt.mozGetDataAt(TAB_DROP_TYPE, 0);
         // not our drop then
         if (!draggedTab)
           return;
         movingTabs = draggedTab._dragData.movingTabs;
         draggedTab.container._finishGroupSelectedTabs(draggedTab);
       }
 
-      this._tabDropIndicator.collapsed = true;
+      this._tabDropIndicator.hidden = true;
       event.stopPropagation();
       if (draggedTab && dropEffect == "copy") {
         // copy the dropped tab (wherever it's from)
         let newIndex = this._getDropIndex(event, false);
         let draggedTabCopy;
         for (let tab of movingTabs) {
           let newTab = gBrowser.duplicateTab(tab);
           gBrowser.moveTabTo(newTab, newIndex++);
@@ -784,17 +784,17 @@ class MozTabbrowserTabs extends MozEleme
 
       // This does not work at all (see bug 458613)
       var target = event.relatedTarget;
       while (target && target != this)
         target = target.parentNode;
       if (target)
         return;
 
-      this._tabDropIndicator.collapsed = true;
+      this._tabDropIndicator.hidden = true;
       event.stopPropagation();
     });
   }
 
   get tabbox() {
     return document.getElementById("tabbrowser-tabbox");
   }
 
diff --git a/browser/base/content/test/performance/browser_startup_images.js b/browser/base/content/test/performance/browser_startup_images.js
--- a/browser/base/content/test/performance/browser_startup_images.js
+++ b/browser/base/content/test/performance/browser_startup_images.js
@@ -27,28 +27,16 @@ const whitelist = [
   },
 
   {
     file: "chrome://browser/skin/places/toolbarDropMarker.png",
     platforms: ["linux", "win", "macosx"],
   },
 
   {
-    file: "chrome://browser/skin/tabbrowser/tabDragIndicator.png",
-    hidpi: "chrome://browser/skin/tabbrowser/tabDragIndicator@2x.png",
-    platforms: ["macosx"],
-  },
-
-  {
-    file: "chrome://browser/skin/tabbrowser/tabDragIndicator.png",
-    hidpi: "<not loaded>",
-    platforms: ["linux", "win"],
-  },
-
-  {
     file: "resource://gre-resources/loading-image.png",
     platforms: ["win", "macosx"],
     intermittentNotLoaded: ["win", "macosx"],
   },
   {
     file: "resource://gre-resources/broken-image.png",
     platforms: ["win", "macosx"],
     intermittentNotLoaded: ["win", "macosx"],
