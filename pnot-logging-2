# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  9e907ed33366b6d858d3a7dbb7e22a05d33fb96d

diff --git a/toolkit/content/customElements.js b/toolkit/content/customElements.js
--- a/toolkit/content/customElements.js
+++ b/toolkit/content/customElements.js
@@ -66,25 +66,38 @@ const MozElementMixin = Base => class Mo
     let attrName = attr;
     let attrNewName = attr;
     let split = attrName.split("=");
     if (split.length == 2) {
       attrName = split[1];
       attrNewName = split[0];
     }
 
+    let hasAttr = this.hasAttribute(attrName);
+    if (hasAttr &&
+        (attrNewName === "hidden" || attrNewName === "checked" || attrNewName === "disabled") &&
+        this.getAttribute(attrName) === "false") {
+      console.log("Hit special case here", attrName, attrNewName);
+      hasAttr = false;
+    }
+
     if (attrNewName === "text") {
       child.textContent =
         this.hasAttribute(attrName) ? this.getAttribute(attrName) : "";
-    } else if (this.hasAttribute(attrName)) {
+    } else if (hasAttr) {
+      // if (attrNewName === "checked"
+      // if (attrName.includes("check")) {
+      //   console.log("BRIAN CHECKED", attrName, attrNewName, this.getAttribute(attrName));
+      // }
       child.setAttribute(attrNewName, this.getAttribute(attrName));
-    } else if (attrName !== "class") {
+    } else if (attrNewName !== "class") {
       // XXX: We don't want to empty out the existing 'class' if iconclass wasn't passed in.
       // How does XBL handle this? Does it never empty it out, or only do it if it was originally
       // set by the host, or what?
+      console.log("REMOVING NEW NAME ON CHILD", attrNewName);
       child.removeAttribute(attrNewName);
     }
   }
 
   /**
    * Sometimes an element may not want to run connectedCallback logic during
    * parse. This could be because we don't want to initialize the element before
    * the element's contents have been fully parsed, or for performance reasons.
diff --git a/toolkit/content/widgets/popupnotification.js b/toolkit/content/widgets/popupnotification.js
--- a/toolkit/content/widgets/popupnotification.js
+++ b/toolkit/content/widgets/popupnotification.js
@@ -49,16 +49,18 @@ class MozPopupNotification extends MozXU
     ];
   }
 
   attributeChangedCallback(o, v, n) {
     if (!this._hasSlotted) {
       return;
     }
 
+    console.log("ATTRIBUTE CHANGED", o, v, n);
+
     this.inheritAttributes();
   }
 
   inheritAttributes() {
     for (let el of this.querySelectorAll("[inherits]")) {
       for (let attr of el.getAttribute("inherits").split(",")) {
         this.inheritAttribute(el, attr);
       }
