# HG changeset patch
# User Gabriel Luong <gabriel.luong@gmail.com>
# Parent  88ae0ab5db05ac41f395dd22c5f10502862c040b
Bug 1186138 - Part 2: Ensure the property remains disabled after ESC editing a disabled property r=bgrins

diff --git a/browser/devtools/styleinspector/rule-view.js b/browser/devtools/styleinspector/rule-view.js
--- a/browser/devtools/styleinspector/rule-view.js
+++ b/browser/devtools/styleinspector/rule-view.js
@@ -3277,32 +3277,42 @@
    * commits it.
    *
    * @param {string} aValue
    *        The value contained in the editor.
    * @param {boolean} aCommit
    *        True if the change should be applied.
    */
   _onNameDone: function(aValue, aCommit) {
-    if (aCommit && !this.ruleEditor.isEditing) {
-      // Unlike the value editor, if a name is empty the entire property
-      // should always be removed.
-      if (aValue.trim() === "") {
-        this.remove();
-      } else {
-        // Adding multiple rules inside of name field overwrites the current
-        // property with the first, then adds any more onto the property list.
-        let properties = parseDeclarations(aValue);
-
-        if (properties.length) {
-          this.prop.setName(properties[0].name);
-          if (properties.length > 1) {
-            this.prop.setValue(properties[0].value, properties[0].priority);
-            this.ruleEditor.addProperties(properties.slice(1), this.prop);
-          }
+    if ((!aCommit && this.ruleEditor.isEditing) ||
+        this.committed.name == aValue) {
+      // Disable the property if the property was originally disabled.
+      if (!this.prop.enabled) {
+        this.rule.setPropertyEnabled(this.prop, this.prop.enabled);
+      }
+
+      return;
+    }
+
+    // Unlike the value editor, if a name is empty the entire property
+    // should always be removed.
+    if (aValue.trim() === "") {
+      this.remove();
+    } else {
+      // Adding multiple rules inside of name field overwrites the current
+      // property with the first, then adds any more onto the property list.
+      let properties = parseDeclarations(aValue);
+
+      if (properties.length) {
+        this.prop.setName(properties[0].name);
+        this.committed.name = this.prop.name;
+
+        if (properties.length > 1) {
+          this.prop.setValue(properties[0].value, properties[0].priority);
+          this.ruleEditor.addProperties(properties.slice(1), this.prop);
         }
       }
     }
   },
 
   /**
    * Remove property from style and the editors from DOM.
    * Begin editing next available property.
@@ -3326,27 +3336,24 @@
    * revert to the value this property had before editing.
    *
    * @param {string} aValue
    *        The value contained in the editor.
    * @param {bool} aCommit
    *        True if the change should be applied.
    */
   _onValueDone: function(aValue, aCommit) {
-    if (!aCommit && !this.ruleEditor.isEditing) {
+    if ((!aCommit && !this.ruleEditor.isEditing) ||
+        this.committed.value == aValue) {
       // A new property should be removed when escape is pressed.
       if (this.removeOnRevert) {
         this.remove();
       } else {
-        // update the editor back to committed value
-        this.update();
-
-        // undo the preview in content style
-        this.ruleEditor.rule.previewPropertyValue(this.prop,
-          this.prop.value, this.prop.priority);
+        // Disable the property if the property was originally disabled.
+        this.rule.setPropertyEnabled(this.prop, this.prop.enabled);
       }
       return;
     }
 
     let {propertiesToAdd, firstValue} =
         this._getValueAndExtraProperties(aValue);
 
     // First, set this property value (common case, only modified a property)
