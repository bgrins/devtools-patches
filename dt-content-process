# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  52e3ff20f1a7128bf1432a770ea434af4490deaf

diff --git a/devtools/server/actors/targets/frame-proxy.js b/devtools/server/actors/targets/frame-proxy.js
--- a/devtools/server/actors/targets/frame-proxy.js
+++ b/devtools/server/actors/targets/frame-proxy.js
@@ -53,19 +53,19 @@ FrameTargetActorProxy.prototype = {
     };
 
     await this._unzombifyIfNeeded();
 
     const connect = DebuggerServer.connectToFrame(this._conn, this._browser, onDestroy);
     const form = await connect;
 
     this._form = form;
-    if (this.options.favicons) {
-      this._form.favicon = await this.getFaviconData();
-    }
+    // if (this.options.favicons) {
+    //   this._form.favicon = await this.getFaviconData();
+    // }
 
     return this;
   },
 
   get _tabbrowser() {
     if (this._browser && typeof this._browser.getTabBrowser == "function") {
       return this._browser.getTabBrowser();
     }
diff --git a/devtools/startup/aboutdevtoolstoolbox-registration.js b/devtools/startup/aboutdevtoolstoolbox-registration.js
--- a/devtools/startup/aboutdevtoolstoolbox-registration.js
+++ b/devtools/startup/aboutdevtoolstoolbox-registration.js
@@ -26,15 +26,17 @@ AboutDevtoolsToolbox.prototype = {
     const chan = Services.io.newChannelFromURIWithLoadInfo(this.uri, loadInfo);
     chan.owner = Services.scriptSecurityManager.getSystemPrincipal();
     return chan;
   },
 
   getURIFlags: function(uri) {
     return nsIAboutModule.ALLOW_SCRIPT |
            nsIAboutModule.ENABLE_INDEXED_DB |
-           nsIAboutModule.HIDE_FROM_ABOUTABOUT;
+           nsIAboutModule.HIDE_FROM_ABOUTABOUT |
+           nsIAboutModule.URI_MUST_LOAD_IN_CHILD |
+           nsIAboutModule.URI_CAN_LOAD_IN_PRIVILEGED_CHILD;
   },
 };
 
 this.NSGetFactory = XPCOMUtils.generateNSGetFactory([
   AboutDevtoolsToolbox,
 ]);
diff --git a/toolkit/components/telemetry/app/TelemetryEnvironment.jsm b/toolkit/components/telemetry/app/TelemetryEnvironment.jsm
--- a/toolkit/components/telemetry/app/TelemetryEnvironment.jsm
+++ b/toolkit/components/telemetry/app/TelemetryEnvironment.jsm
@@ -13,18 +13,18 @@ const myScope = this;
 const {Log} = ChromeUtils.import("resource://gre/modules/Log.jsm");
 const {Services} = ChromeUtils.import("resource://gre/modules/Services.jsm");
 ChromeUtils.import("resource://gre/modules/TelemetryUtils.jsm", this);
 const {ObjectUtils} = ChromeUtils.import("resource://gre/modules/ObjectUtils.jsm");
 const {AppConstants} = ChromeUtils.import("resource://gre/modules/AppConstants.jsm");
 
 const Utils = TelemetryUtils;
 
-const { AddonManager } = ChromeUtils.import("resource://gre/modules/AddonManager.jsm");
-
+ChromeUtils.defineModuleGetter(this, "AddonManager",
+                                     "resource://gre/modules/AddonManager.jsm");
 ChromeUtils.defineModuleGetter(this, "AttributionCode",
                                "resource:///modules/AttributionCode.jsm");
 ChromeUtils.defineModuleGetter(this, "ctypes",
                                "resource://gre/modules/ctypes.jsm");
 ChromeUtils.defineModuleGetter(this, "LightweightThemeManager",
                                "resource://gre/modules/LightweightThemeManager.jsm");
 ChromeUtils.defineModuleGetter(this, "ProfileAge",
                                "resource://gre/modules/ProfileAge.jsm");
diff --git a/toolkit/components/xulstore/XULStore.js b/toolkit/components/xulstore/XULStore.js
--- a/toolkit/components/xulstore/XULStore.js
+++ b/toolkit/components/xulstore/XULStore.js
@@ -13,17 +13,18 @@ const XULSTORE_CID = Components.ID("{6f4
 const STOREDB_FILENAME = "xulstore.json";
 
 const {Services} = ChromeUtils.import("resource://gre/modules/Services.jsm");
 const {XPCOMUtils} = ChromeUtils.import("resource://gre/modules/XPCOMUtils.jsm");
 
 ChromeUtils.defineModuleGetter(this, "OS", "resource://gre/modules/osfile.jsm");
 
 function XULStore() {
-  if (!Services.appinfo.inSafeMode)
+  if (!Services.appinfo.inSafeMode &&
+      Services.appinfo.processType == Ci.nsIXULRuntime.PROCESS_TYPE_DEFAULT)
     this.load();
 }
 
 XULStore.prototype = {
   classID: XULSTORE_CID,
   QueryInterface: ChromeUtils.generateQI([Ci.nsIObserver, Ci.nsIXULStore,
                                           Ci.nsISupportsWeakReference]),
   _xpcom_factory: XPCOMUtils.generateSingletonFactory(XULStore),
diff --git a/toolkit/mozapps/extensions/AddonManager.jsm b/toolkit/mozapps/extensions/AddonManager.jsm
--- a/toolkit/mozapps/extensions/AddonManager.jsm
+++ b/toolkit/mozapps/extensions/AddonManager.jsm
@@ -5,21 +5,21 @@
 "use strict";
 
 // Cannot use Services.appinfo here, or else xpcshell-tests will blow up, as
 // most tests later register different nsIAppInfo implementations, which
 // wouldn't be reflected in Services.appinfo anymore, as the lazy getter
 // underlying it would have been initialized if we used it here.
 if ("@mozilla.org/xre/app-info;1" in Cc) {
   // eslint-disable-next-line mozilla/use-services
-  let runtime = Cc["@mozilla.org/xre/app-info;1"].getService(Ci.nsIXULRuntime);
-  if (runtime.processType != Ci.nsIXULRuntime.PROCESS_TYPE_DEFAULT) {
-    // Refuse to run in child processes.
-    throw new Error("You cannot use the AddonManager in child processes!");
-  }
+  // let runtime = Cc["@mozilla.org/xre/app-info;1"].getService(Ci.nsIXULRuntime);
+  // if (runtime.processType != Ci.nsIXULRuntime.PROCESS_TYPE_DEFAULT) {
+  //   // Refuse to run in child processes.
+  //   throw new Error("You cannot use the AddonManager in child processes!");
+  // }
 }
 
 const {AppConstants} = ChromeUtils.import("resource://gre/modules/AppConstants.jsm");
 
 const MOZ_COMPATIBILITY_NIGHTLY = !["aurora", "beta", "release", "esr"].includes(AppConstants.MOZ_UPDATE_CHANNEL);
 
 const PREF_BLOCKLIST_PINGCOUNTVERSION = "extensions.blocklist.pingCountVersion";
 const PREF_EM_UPDATE_ENABLED          = "extensions.update.enabled";
