
# HG changeset patch
# User Emilio Cobos √Ålvarez <emilio@crisal.io>
# Date 1584030919 -3600
# Node ID b628c12b324a4ad770f64fb0533019e5edb44121
# Parent  64fdb7ff7a649757ed60f4e7bc83e25f893e7551
WIP

diff --git a/dom/base/OpaqueShadowRoot.cpp b/dom/base/OpaqueShadowRoot.cpp
--- a/dom/base/OpaqueShadowRoot.cpp
+++ b/dom/base/OpaqueShadowRoot.cpp
@@ -2,19 +2,24 @@
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "OpaqueShadowRoot.h"
 #include "nsHashKeys.h"
 #include "nsTextNode.h"
+#include "mozilla/dom/Document.h"
 #include "mozilla/dom/Element.h"
 #include "mozilla/dom/ShadowRoot.h"
 #include "mozilla/dom/OpaqueShadowRootBinding.h"
+#include "nsIFrame.h"
+#include "nsIScriptError.h"
+
+#include <condition_variable>
 
 namespace mozilla {
 namespace dom {
 
 NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE(OpaqueShadowRoot, mShadowRoot,
                                       mIdentifierMap)
 
 NS_IMPL_CYCLE_COLLECTION_ROOT_NATIVE(OpaqueShadowRoot, AddRef)
@@ -28,129 +33,206 @@ OpaqueShadowRoot::OpaqueShadowRoot(RefPt
     : mShadowRoot(std::move(aRoot)) {
   MOZ_ASSERT(mShadowRoot);
 }
 
 void OpaqueShadowRoot::Render(const nsTArray<Change>& aChanges,
                               ErrorResult& aError) {
   for (auto& change : aChanges) {
     if (change.mId.IsEmpty()) {
-      aError.ThrowTypeError("Need the id");
-      return;
+      return aError.ThrowTypeError("Need the id");
     }
 
     switch (change.mType) {
       case ChangeType::CreateElement: {
         if (!change.mTagName.WasPassed() || change.mTagName.Value().IsEmpty()) {
           aError.ThrowTypeError("Need a non-empty tagName for CreateElement");
           return;
         }
         RefPtr<nsINode>& node = mIdentifierMap.GetOrInsert(change.mId);
         if (node) {
-          aError.ThrowTypeError("Already have a node with this id");
-          return;
+          return aError.ThrowTypeError("Already have a node with this id");
         }
         RefPtr<Element> element = mShadowRoot->OwnerDoc()->CreateElement(
             change.mTagName.Value(), ElementCreationOptionsOrString(), aError);
         if (aError.Failed()) {
           return;
         }
         element->SetId(change.mId);
         node = element.forget();
         break;
       }
       case ChangeType::CreateTextNode: {
         if (!change.mTextContent.WasPassed()) {
-          aError.ThrowTypeError("Need textContent for CreateTextNode");
-          return;
+          return aError.ThrowTypeError("Need textContent for CreateTextNode");
         }
         RefPtr<nsINode>& node = mIdentifierMap.GetOrInsert(change.mId);
         if (node) {
-          aError.ThrowTypeError("Already have a node with this id");
-          return;
+          return aError.ThrowTypeError("Already have a node with this id");
         }
         node = mShadowRoot->OwnerDoc()->CreateTextNode(
             change.mTextContent.Value());
         break;
       }
       case ChangeType::Append: {
         nsINode* parent;
         if (!change.mParentId.WasPassed() ||
             change.mParentId.Value().IsEmpty()) {
           parent = mShadowRoot;
         } else {
           parent = mIdentifierMap.GetWeak(change.mParentId.Value());
           if (!parent) {
-            aError.ThrowTypeError("Appending to a non-existent parent");
-            return;
+            return aError.ThrowTypeError("Appending to a non-existent parent");
           }
         }
 
         nsINode* child = mIdentifierMap.GetWeak(change.mId);
         if (!child) {
-          aError.ThrowTypeError("Appending a non-existent child");
-          return;
+          return aError.ThrowTypeError("Appending a non-existent child");
         }
 
         parent->AppendChild(*child, aError);
         break;
       }
       case ChangeType::Remove: {
         nsCOMPtr<nsINode> node = mIdentifierMap.Get(change.mId);
         if (!node) {
-          aError.ThrowTypeError("Removing a non-existent node");
-          return;
+          return aError.ThrowTypeError("Removing a non-existent node");
         }
         node->Remove();
         // FIXME Do we want to remove node from mIdentifierMap here?
         break;
       }
       case ChangeType::SetTextContent: {
         nsINode* node = mIdentifierMap.GetWeak(change.mId);
         if (!node) {
-          aError.ThrowTypeError("Setting textContent on a non-existent node");
-          return;
+          return aError.ThrowTypeError("Setting textContent on a non-existent node");
         }
         if (!change.mTextContent.WasPassed()) {
-          aError.ThrowTypeError("Need textContent for SetTextContent");
-          return;
+          return aError.ThrowTypeError("Need textContent for SetTextContent");
         }
 
         node->SetTextContent(change.mTextContent.Value(), aError);
         break;
       }
       case ChangeType::SetAttribute: {
         nsINode* node = mIdentifierMap.GetWeak(change.mId);
-        if (!node || !node->IsElement()) {
-          if (node) {
-            aError.ThrowTypeError(
-                "Setting attribute on a node that's not an element");
-          } else {
-            aError.ThrowTypeError("Setting attribute on a non-existent node");
-          }
-          return;
+        if (!node) {
+          return aError.ThrowTypeError("Setting attribute on a non-existent node");
+        }
+        if (!node->IsElement()) {
+          return aError.ThrowTypeError(
+              "Setting attribute on a node that's not an element");
         }
         if (!change.mAttributes.WasPassed()) {
-          aError.ThrowTypeError(
+          return aError.ThrowTypeError(
               "Need the attribute names and values for SetAttribute");
-          return;
         }
         for (auto& attr : change.mAttributes.Value().Entries()) {
           node->AsElement()->SetAttribute(attr.mKey, attr.mValue, aError);
           if (aError.Failed()) {
             return;
           }
         }
         break;
       }
       case ChangeType::EndGuard_:
         break;
     }
   }
 }
 
+static void ReportError(const nsINode& aChild,
+                        nsIFrame::CanBeReflowRoot aError) {
+  nsAutoString message;
+  message.Append(aChild.NodeInfo()->LocalName());
+  if (auto* element = Element::FromNode(aChild)) {
+    if (nsAtom* id = element->GetID()) {
+      message.AppendLiteral(u" with id '");
+      message.Append(nsDependentAtomString(id));
+      message.Append(char16_t('\''));
+    }
+  }
+
+  message.AppendLiteral(u" can't be laid out in parallel because ");
+  switch (aError) {
+    case nsIFrame::CanBeReflowRoot::NotEnabled:
+      message.AppendLiteral(u"dynamic reflow roots are not enabled");
+      break;
+    case nsIFrame::CanBeReflowRoot::FlexBasis:
+      message.AppendLiteral(u"it is a flex item with non-fixed flex-basis");
+      break;
+    case nsIFrame::CanBeReflowRoot::InlineOrRubyOrTableOrXul:
+      message.AppendLiteral(
+          u"it is a box which depends on its context (text, table, inline, "
+          u"ruby, xul)");
+      break;
+    case nsIFrame::CanBeReflowRoot::NonFixedSize:
+      message.AppendLiteral(u"it doesn't have a fixed size");
+      break;
+    case nsIFrame::CanBeReflowRoot::NotFixedContainingBlock:
+      message.AppendLiteral(
+          u"it is not a containing-block for fixed-position descendants");
+      break;
+    case nsIFrame::CanBeReflowRoot::NotFlowRoot:
+      message.AppendLiteral(
+          u"it is not a flow-root: floats can bleed through and margins can "
+          u"collapse around it");
+      break;
+    case nsIFrame::CanBeReflowRoot::Subgrid:
+      message.AppendLiteral(u"it is a subgrid");
+      break;
+    case nsIFrame::CanBeReflowRoot::Yes:
+      MOZ_ASSERT_UNREACHABLE("How?");
+      break;
+  }
+
+  nsContentUtils::ReportToConsoleNonLocalized(
+      message, nsIScriptError::warningFlag, NS_LITERAL_CSTRING("DOM Core"),
+      aChild.OwnerDoc());
+}
+
+void OpaqueShadowRoot::AfterRender() {
+  // We flush style and frame changes synchronously here, to figure out whether
+  // we can do layout off the main thread.
+  //
+  // We could theoretically also run styling off the main thread, with some
+  // constraints like:
+  //
+  //  * It couldn't inherit from the outside. So that's not amazing.
+  //  * It couldn't use stuff like :host() selectors with descendant combinators
+  //    and so on.
+  //
+  // Frame construction changes are much harder, because you do need to know the
+  // boxes of your ancestors for a bunch of stuff. You could optimistically
+  // assume that you're not display: none and you're not going to be in one of
+  // these uncommon cases, not getting you blockified, etc...
+  //
+  // For our purposes, for now, update style synchronously here and if we get
+  // the right frame kind to schedule.
+  mShadowRoot->OwnerDoc()->FlushPendingNotifications(FlushType::Frames);
+
+  for (auto* child = mShadowRoot->GetFirstChild(); child;
+       child = child->GetNextSibling()) {
+    auto* frame = child->AsContent()->GetPrimaryFrame();
+    if (!frame) {
+      continue;
+    }
+    auto dynamicReflowRoot = frame->CanBeDynamicReflowRoot();
+    if (dynamicReflowRoot != nsIFrame::CanBeReflowRoot::Yes) {
+      ReportError(*child, dynamicReflowRoot);
+      continue;
+    }
+
+    auto dirtyRoots = frame->PresShell()->TakeDirtyRootsUnder(frame);
+    if (dirtyRoots.IsEmpty()) {
+      continue;
+    }
+  }
+}
+
 JSObject* OpaqueShadowRoot::WrapObject(JSContext* aCx,
                                        JS::Handle<JSObject*> aGivenProto) {
   return OpaqueShadowRoot_Binding::Wrap(aCx, this, aGivenProto);
 }
 
 }  // namespace dom
 }  // namespace mozilla
diff --git a/dom/base/OpaqueShadowRoot.h b/dom/base/OpaqueShadowRoot.h
--- a/dom/base/OpaqueShadowRoot.h
+++ b/dom/base/OpaqueShadowRoot.h
@@ -31,16 +31,17 @@ class OpaqueShadowRoot final : public ns
   explicit OpaqueShadowRoot(RefPtr<ShadowRoot>);
   void Render(const nsTArray<Change>& aChanges, ErrorResult& aError);
 
   nsISupports* GetParentObject() const;
   JSObject* WrapObject(JSContext*, JS::Handle<JSObject*> aGivenProto) final;
 
  private:
   virtual ~OpaqueShadowRoot() = default;
+  void AfterRender();
 
   RefPtr<ShadowRoot> mShadowRoot;
   nsRefPtrHashtable<nsStringHashKey, nsINode> mIdentifierMap;
 };
 
 }  // namespace dom
 
 }  // namespace mozilla
diff --git a/dom/base/ShadowRoot.h b/dom/base/ShadowRoot.h
--- a/dom/base/ShadowRoot.h
+++ b/dom/base/ShadowRoot.h
@@ -253,16 +253,18 @@ class ShadowRoot final : public Document
   }
 
  protected:
   // FIXME(emilio): This will need to become more fine-grained.
   void ApplicableRulesChanged();
 
   virtual ~ShadowRoot();
 
+  nsresult Clone(dom::NodeInfo*, nsINode** aResult) const override;
+
   const ShadowRootMode mMode;
 
   // The computed data from the style sheets.
   UniquePtr<RawServoAuthorStyles> mServoStyles;
   UniquePtr<mozilla::ServoStyleRuleMap> mStyleRuleMap;
 
   using SlotArray = TreeOrderedArray<HTMLSlotElement>;
   // Map from name of slot to an array of all slots in the shadow DOM with with
@@ -270,16 +272,14 @@ class ShadowRoot final : public Document
   // are in the shadow tree and should be kept alive by its parent.
   nsClassHashtable<nsStringHashKey, SlotArray> mSlotMap;
 
   // Unordered array of all elements that have a part attribute in this shadow
   // tree.
   nsTArray<const Element*> mParts;
 
   bool mIsUAWidget;
-
-  nsresult Clone(dom::NodeInfo*, nsINode** aResult) const override;
 };
 
 }  // namespace dom
 }  // namespace mozilla
 
 #endif  // mozilla_dom_shadowroot_h__
diff --git a/layout/base/PresShell.cpp b/layout/base/PresShell.cpp
--- a/layout/base/PresShell.cpp
+++ b/layout/base/PresShell.cpp
@@ -617,35 +617,65 @@ nsIFrame* PresShell::DirtyRootsList::Pop
 void PresShell::DirtyRootsList::Clear() { mList.Clear(); }
 
 bool PresShell::DirtyRootsList::Contains(nsIFrame* aFrame) const {
   return mList.Contains(aFrame);
 }
 
 bool PresShell::DirtyRootsList::IsEmpty() const { return mList.IsEmpty(); }
 
+static bool IsOrIsAncestorOf(nsIFrame* aPossibleAncestor, nsIFrame* aPossibleDescendant) {
+  do {
+    if (aPossibleAncestor == aPossibleDescendant) {
+      return true;
+    }
+    aPossibleDescendant = aPossibleDescendant->GetParent();
+  } while (aPossibleDescendant);
+
+  return false;
+}
+
 bool PresShell::DirtyRootsList::FrameIsAncestorOfDirtyRoot(
     nsIFrame* aFrame) const {
   MOZ_ASSERT(aFrame);
 
   // Look for a path from any dirty roots to aFrame, following GetParent().
   // This check mirrors what FrameNeedsReflow() would have done if the reflow
   // root didn't get in the way.
   for (nsIFrame* dirtyFrame : mList) {
-    do {
-      if (dirtyFrame == aFrame) {
-        return true;
-      }
-      dirtyFrame = dirtyFrame->GetParent();
-    } while (dirtyFrame);
+    if (IsOrIsAncestorOf(aFrame, dirtyFrame)) {
+      return true;
+    }
   }
 
   return false;
 }
 
+auto PresShell::DirtyRootsList::TakeRootsUnder(nsIFrame* aFrame) -> DirtyRootsList {
+  DirtyRootsList list;
+  AutoTArray<size_t, 10> indicesToRemove;
+  for (size_t i = 0; i < mList.Length(); ++i) {
+    auto& root = mList[i];
+    if (IsOrIsAncestorOf(aFrame, root.mFrame)) {
+      list.mList.AppendElement(root);
+      indicesToRemove.AppendElement(i);
+    }
+  }
+
+  for (size_t index : Reversed(indicesToRemove)) {
+    mList.RemoveElementAt(index);
+  }
+
+  return list;
+}
+
+auto PresShell::TakeDirtyRootsUnder(nsIFrame* aFrame) -> DirtyRootsList {
+  return mDirtyRoots.TakeRootsUnder(aFrame);
+}
+
 bool PresShell::sDisableNonTestMouseEvents = false;
 
 LazyLogModule PresShell::gLog("PresShell");
 
 TimeStamp PresShell::EventHandler::sLastInputCreated;
 TimeStamp PresShell::EventHandler::sLastInputProcessed;
 StaticRefPtr<Element> PresShell::EventHandler::sLastKeyDownEventTargetElement;
 
diff --git a/layout/base/PresShell.h b/layout/base/PresShell.h
--- a/layout/base/PresShell.h
+++ b/layout/base/PresShell.h
@@ -486,18 +486,16 @@ class PresShell final : public nsStubDoc
   void FlushPendingScrollAnchorSelections();
   void PostPendingScrollAnchorAdjustment(
       layout::ScrollAnchorContainer* aContainer);
 
   void CancelAllPendingReflows();
 
   MOZ_CAN_RUN_SCRIPT_BOUNDARY void NotifyCounterStylesAreDirty();
 
-  bool FrameIsAncestorOfDirtyRoot(nsIFrame* aFrame) const;
-
   /**
    * Destroy the frames for aElement, and reconstruct them asynchronously if
    * needed.
    *
    * Note that this may destroy frames for an ancestor instead.
    */
   void DestroyFramesForAndRestyle(Element* aElement);
 
@@ -2859,16 +2857,18 @@ class PresShell final : public nsStubDoc
     void Clear();
     // Is this frame one of the dirty roots?
     bool Contains(nsIFrame* aFrame) const;
     // Are there no dirty roots?
     bool IsEmpty() const;
     // Is the given frame an ancestor of any dirty root?
     bool FrameIsAncestorOfDirtyRoot(nsIFrame* aFrame) const;
 
+    DirtyRootsList TakeRootsUnder(nsIFrame*);
+
    private:
     struct FrameAndDepth {
       nsIFrame* mFrame;
       const uint32_t mDepth;
 
       // Easy conversion to nsIFrame*, as it's the most likely need.
       operator nsIFrame*() const { return mFrame; }
 
@@ -2886,16 +2886,24 @@ class PresShell final : public nsStubDoc
     };
     // List of all known dirty roots, sorted by decreasing depths.
     nsTArray<FrameAndDepth> mList;
   };
 
   // Reflow roots that need to be reflowed.
   DirtyRootsList mDirtyRoots;
 
+
+ public:
+
+  bool FrameIsAncestorOfDirtyRoot(nsIFrame* aFrame) const;
+  DirtyRootsList TakeDirtyRootsUnder(nsIFrame* aFrame);
+
+ private:
+
 #ifdef MOZ_GECKO_PROFILER
   // These two fields capture call stacks of any changes that require a restyle
   // or a reflow. Only the first change per restyle / reflow is recorded (the
   // one that caused a call to SetNeedStyleFlush() / SetNeedLayoutFlush()).
   UniqueProfilerBacktrace mStyleCause;
   UniqueProfilerBacktrace mReflowCause;
 #endif
 
diff --git a/layout/generic/ReflowInput.cpp b/layout/generic/ReflowInput.cpp
--- a/layout/generic/ReflowInput.cpp
+++ b/layout/generic/ReflowInput.cpp
@@ -736,17 +736,17 @@ void ReflowInput::InitResizeFlags(nsPres
   if (mFrame->GetStateBits() & NS_FRAME_IS_DIRTY) {
     // If we're reflowing everything, then we'll find out if we need
     // to re-set this.
     mFrame->RemoveStateBits(NS_FRAME_CONTAINS_RELATIVE_BSIZE);
   }
 }
 
 void ReflowInput::InitDynamicReflowRoot() {
-  if (mFrame->CanBeDynamicReflowRoot()) {
+  if (mFrame->CanBeDynamicReflowRoot() == nsIFrame::CanBeReflowRoot::Yes) {
     mFrame->AddStateBits(NS_FRAME_DYNAMIC_REFLOW_ROOT);
   } else {
     mFrame->RemoveStateBits(NS_FRAME_DYNAMIC_REFLOW_ROOT);
   }
 }
 
 nscoord ReflowInput::GetContainingBlockContentISize(
     WritingMode aWritingMode) const {
diff --git a/layout/generic/nsIFrame.h b/layout/generic/nsIFrame.h
--- a/layout/generic/nsIFrame.h
+++ b/layout/generic/nsIFrame.h
@@ -864,17 +864,38 @@ class nsIFrame : public nsQueryFrame {
   already_AddRefed<ComputedStyle> ComputeSelectionStyle(
       int16_t aSelectionStatus) const;
 
   /**
    * Accessor functions for geometric parent.
    */
   nsContainerFrame* GetParent() const { return mParent; }
 
-  bool CanBeDynamicReflowRoot() const;
+  enum class CanBeReflowRoot {
+    // Reflow roots are not enabled.
+    NotEnabled,
+    // We're an inline, ruby, table part, or xul frame, so depend on our
+    // containing block.
+    InlineOrRubyOrTableOrXul,
+    // The frame doesn't have a fixed size.
+    NonFixedSize,
+    // The frame is a flex item and doesn't have a fixed flex-basis.
+    FlexBasis,
+    // The frame isn't a fixed-pos containing block, and thus could have
+    // escaping descendants.
+    NotFixedContainingBlock,
+    // Not a flow root: Floats can escape from us and collapse around us.
+    NotFlowRoot,
+    // Subgrid can't be a reflow root.
+    Subgrid,
+    // We can be a reflow root!
+    Yes,
+  };
+
+  CanBeReflowRoot CanBeDynamicReflowRoot() const;
 
   /**
    * Gets the parent of a frame, using the parent of the placeholder for
    * out-of-flow frames.
    */
   inline nsContainerFrame* GetInFlowParent() const;
 
   /**

