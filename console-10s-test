# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  5e1af7792acd90379d9b5f9d5e479e5f9f873857

diff --git a/devtools/shared/webconsole/test/chrome.ini b/devtools/shared/webconsole/test/chrome.ini
--- a/devtools/shared/webconsole/test/chrome.ini
+++ b/devtools/shared/webconsole/test/chrome.ini
@@ -22,16 +22,17 @@ support-files =
 [test_console_serviceworker.html]
 [test_console_serviceworker_cached.html]
 [test_console_styling.html]
 [test_console_worker.html]
 [test_file_uri.html]
 [test_reflow.html]
 [test_jsterm.html]
 [test_jsterm_autocomplete.html]
+[test_jsterm_cpows.html]
 [test_jsterm_cd_iframe.html]
 [test_jsterm_last_result.html]
 [test_jsterm_queryselector.html]
 [test_network_get.html]
 [test_network_longstring.html]
 [test_network_post.html]
 [test_network_security-hpkp.html]
 [test_network_security-hsts.html]
diff --git a/devtools/shared/webconsole/test/common.js b/devtools/shared/webconsole/test/common.js
--- a/devtools/shared/webconsole/test/common.js
+++ b/devtools/shared/webconsole/test/common.js
@@ -264,8 +264,32 @@ function withActiveServiceWorker(win, ur
         if (sw.state === "activated") {
           sw.removeEventListener("statechange", stateHandler);
           resolve(swr);
         }
       });
     });
   });
 }
+
+// This test needs to add tabs that are controlled by a service worker
+// so use some special powers to dig around and find gBrowser
+let {gBrowser} = SpecialPowers._getTopChromeWindow(SpecialPowers.window.get());
+
+SimpleTest.registerCleanupFunction(() => {
+  while (gBrowser.tabs.length > 1) {
+    gBrowser.removeCurrentTab();
+  }
+});
+
+function addTab(url) {
+  info("Adding a new tab with URL: '" + url + "'");
+  return new Promise(resolve => {
+    let tab = gBrowser.selectedTab = gBrowser.addTab(url, {
+      triggeringPrincipal: Services.scriptSecurityManager.getSystemPrincipal(),
+    });
+    gBrowser.selectedBrowser.addEventListener("load", function () {
+      info("URL '" + url + "' loading complete");
+      resolve(tab);
+    }, {capture: true, once: true});
+  });
+}
+
diff --git a/devtools/shared/webconsole/test/test_console_serviceworker_cached.html b/devtools/shared/webconsole/test/test_console_serviceworker_cached.html
--- a/devtools/shared/webconsole/test/test_console_serviceworker_cached.html
+++ b/devtools/shared/webconsole/test/test_console_serviceworker_cached.html
@@ -85,34 +85,11 @@ let startTest = Task.async(function*() {
   });
 
   yield swr.unregister();
 
   SimpleTest.finish();
 });
 addEventListener("load", startTest);
 
-// This test needs to add tabs that are controlled by a service worker
-// so use some special powers to dig around and find gBrowser
-let {gBrowser} = SpecialPowers._getTopChromeWindow(SpecialPowers.window.get());
-
-SimpleTest.registerCleanupFunction(() => {
-  while (gBrowser.tabs.length > 1) {
-    gBrowser.removeCurrentTab();
-  }
-});
-
-function addTab(url) {
-  info("Adding a new tab with URL: '" + url + "'");
-  return new Promise(resolve => {
-    let tab = gBrowser.selectedTab = gBrowser.addTab(url, {
-      triggeringPrincipal: Services.scriptSecurityManager.getSystemPrincipal(),
-    });
-    gBrowser.selectedBrowser.addEventListener("load", function () {
-      info("URL '" + url + "' loading complete");
-      resolve(tab);
-    }, {capture: true, once: true});
-  });
-}
-
 </script>
 </body>
 </html>
diff --git a/devtools/shared/webconsole/test/test_jsterm_cpows.html b/devtools/shared/webconsole/test/test_jsterm_cpows.html
new file mode 100644
--- /dev/null
+++ b/devtools/shared/webconsole/test/test_jsterm_cpows.html
@@ -0,0 +1,80 @@
+<!DOCTYPE HTML>
+<html lang="en">
+<head>
+  <meta charset="utf8">
+  <title>Test for CPOWs</title>
+  <script type="text/javascript" src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
+  <script type="text/javascript" src="common.js"></script>
+  <!-- Any copyright is dedicated to the Public Domain.
+     - http://creativecommons.org/publicdomain/zero/1.0/ -->
+</head>
+<body>
+<p>Test for CPOWs</p>
+
+<script class="testbody" type="text/javascript">
+SimpleTest.waitForExplicitFinish();
+let gState;
+const CONTENT_TAB_URL = "http://example.com/chrome/devtools/shared/webconsole/test/sandboxed_iframe.html";
+
+function evaluateJS(input, options = {}) {
+  return gState.client.evaluateJSAsync(input, null, options);
+}
+
+function startTest() {
+  removeEventListener("load", startTest);
+  attachConsole(["PageError"], Task.async(function*(aState) {
+    gState = aState;
+    info("Adding a remote content tab");
+    let tab1 = yield addTab(CONTENT_TAB_URL);
+    yield doSimpleEval();
+
+    closeDebugger(gState, () => {
+      gState = null;
+      SimpleTest.finish();
+    });
+  }));
+}
+
+function* doSimpleEval() {
+  // info("test eval '2+2'");
+  // let response = yield evaluateJS("2+2");
+  // checkObject(response, {
+  //   from: gState.actor,
+  //   input: "2+2",
+  //   result: 4,
+  // });
+
+  // ok(!response.exception, "no eval exception");
+  // ok(!response.helperResult, "no helper result");
+
+  response = yield evaluateJS("gBrowser.selectedBrowser._contentWindow");
+  console.log(response, response.result.actor);
+
+  yield new Promise(resolve => { });
+  yield new Promise(resolve => {
+    let client = new ObjectClient(gState.dbgClient, {
+      actor: response.result.actor
+    });
+    client.getPrototypeAndProperties(function(r) {
+      console.log(r);
+      if (r.error) {
+        ok(false, "Failed to retrieve the object properties from the " +
+                      "server. Error: " + r.error)
+      } else {
+        is(r, "foo", "Expected result");
+      }
+      resolve();
+
+    });
+
+    // gState.client.inspectObjectProperties(response.result.actor, function (r) {
+    //   console.log(r);
+    //   resolve();
+    // });
+  });
+}
+
+addEventListener("load", startTest);
+</script>
+</body>
+</html>
