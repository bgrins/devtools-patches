# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  b7f409bd51c8ae7260c1675785c698a9cb061244

diff --git a/toolkit/content/tests/browser/browser_findbar.js b/toolkit/content/tests/browser/browser_findbar.js
--- a/toolkit/content/tests/browser/browser_findbar.js
+++ b/toolkit/content/tests/browser/browser_findbar.js
@@ -9,16 +9,17 @@ const E10S_PARENT_TEST_PAGE_URI = "javas
 /**
  * Makes sure that the findbar hotkeys (' and /) event listeners
  * are added to the system event group and do not get blocked
  * by calling stopPropagation on a keypress event on a page.
  */
 add_task(async function test_hotkey_event_propagation() {
   info("Ensure hotkeys are not affected by stopPropagation.");
 
+
   // Opening new tab
   let tab = await BrowserTestUtils.openNewForegroundTab(gBrowser, TEST_PAGE_URI);
   let browser = gBrowser.getBrowserForTab(tab);
   let findbar = await gBrowser.getFindBar();
 
   // Pressing these keys open the findbar.
   const HOTKEYS = ["/", "'"];
 
diff --git a/toolkit/content/widgets/findbar.js b/toolkit/content/widgets/findbar.js
--- a/toolkit/content/widgets/findbar.js
+++ b/toolkit/content/widgets/findbar.js
@@ -21,16 +21,25 @@ class MozFindbar extends XULElement {
     this.addEventListener("keypress", (event) => {
       if (event.keyCode == event.DOM_VK_ESCAPE) {
         if (this.close)
           this.close();
         event.preventDefault();
       }
     }, true);
 
+    // this.addEventListener("focus", (event) => {
+    //   if (event.originalTarget.closest(".findbar-textbox")) {
+    //     if (/Mac/.test(navigator.platform)) {
+    //       this._onFindFieldFocus();
+    //     }
+    //     this._updateBrowserWithState();
+    //   }
+    // }, true);
+
     this.content = MozXULElement.parseXULToFragment(`
       <hbox anonid="findbar-container" class="findbar-container" flex="1" align="center">
         <hbox anonid="findbar-textbox-wrapper" align="stretch">
           <textbox anonid="findbar-textbox" class="findbar-textbox findbar-find-fast" />
           <toolbarbutton anonid="find-previous" class="findbar-find-previous tabbable" data-l10n-attrs="tooltiptext" data-l10n-id="findbar-previous" oncommand="onFindAgainCommand(true);" disabled="true" />
           <toolbarbutton anonid="find-next" class="findbar-find-next tabbable" data-l10n-id="findbar-next" oncommand="onFindAgainCommand(false);" disabled="true" />
         </hbox>
         <toolbarbutton anonid="highlight" class="findbar-highlight findbar-button tabbable" data-l10n-id="findbar-highlight-all" oncommand="toggleHighlight(this.checked);" type="checkbox" />
@@ -247,22 +256,22 @@ class MozFindbar extends XULElement {
     });
 
     this._findField.addEventListener("blur", (event) => {
       // Note: This code used to remove the selection
       // if it matched an editable.
       this.browser.finder.enableSelection();
     });
 
-    this._findField.addEventListener("focus", (event) => {
-      if (/Mac/.test(navigator.platform)) {
-        this._onFindFieldFocus();
-      }
-      this._updateBrowserWithState();
-    });
+    // this._findField.addEventListener("focus", (event) => {
+    //   if (/Mac/.test(navigator.platform)) {
+    //     this._onFindFieldFocus();
+    //   }
+    //   this._updateBrowserWithState();
+    // });
 
     this._findField.addEventListener("compositionstart", (event) => {
       // Don't close the find toolbar while IME is composing.
       let findbar = this;
       findbar._isIMEComposing = true;
       if (findbar._quickFindTimeout) {
         clearTimeout(findbar._quickFindTimeout);
         findbar._quickFindTimeout = null;
