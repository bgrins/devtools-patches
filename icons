# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  ea0f3fa6453fc3c1555fd1b6dd8427834ca279f6
Bug 1193006 - Show icons next to permissions in main view;r=paolo

diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -7352,20 +7352,27 @@ var gIdentityHandler = {
     menulist.setAttribute("id", "identity-popup-permission:" + aPermission);
 
     let label = document.createElement("label");
     label.setAttribute("flex", "1");
     label.setAttribute("class", "identity-popup-permission-label");
     label.setAttribute("control", menulist.getAttribute("id"));
     label.setAttribute("value", SitePermissions.getPermissionLabel(aPermission));
 
+    let image = document.createElement("image");
+    image.setAttribute("showing", "true");
+    image.setAttribute("class", SitePermissions.getIconClass(aPermission) +
+                                " notification-anchor-icon");
+
     let container = document.createElement("hbox");
     container.setAttribute("align", "center");
+    container.appendChild(image);
     container.appendChild(label);
     container.appendChild(menulist);
+
     return container;
   }
 };
 
 function getNotificationBox(aWindow) {
   var foundBrowser = gBrowser.getBrowserForDocument(aWindow.document);
   if (foundBrowser)
     return gBrowser.getNotificationBox(foundBrowser)
diff --git a/browser/base/content/test/general/browser_permissions.js b/browser/base/content/test/general/browser_permissions.js
--- a/browser/base/content/test/general/browser_permissions.js
+++ b/browser/base/content/test/general/browser_permissions.js
@@ -27,14 +27,20 @@ add_task(function* testMainViewVisible()
   gIdentityHandler._identityBox.click();
   ok(!is_hidden(gIdentityHandler._permissionsContainer), "The container is visible");
   let menulists = gIdentityHandler._permissionsContainer.querySelectorAll("menulist");
   is(menulists.length, 1, "One permission visible in main view");
   is(menulists[0].id, "identity-popup-permission:install", "Install permission visible");
   is(menulists[0].value, "1", "Correct value on install menulist");
   gIdentityHandler._identityPopup.hidden = true;
 
+  let image = menulists[0].parentNode.querySelector("image");
+  ok(image, "There is an image for the permissions");
+  is(gBrowser.ownerGlobal.getComputedStyle(image).getPropertyValue("list-style-image"),
+      'url("chrome://browser/skin/addons/addon-install-anchor.svg#default")',
+      "Correct image is visible");
+
   gIdentityHandler.setPermission("install", SitePermissions.getDefault("install"));
 
   gIdentityHandler._identityBox.click();
   ok(is_hidden(gIdentityHandler._permissionsContainer), "The container is hidden");
   gIdentityHandler._identityPopup.hidden = true;
 });
diff --git a/browser/modules/SitePermissions.jsm b/browser/modules/SitePermissions.jsm
--- a/browser/modules/SitePermissions.jsm
+++ b/browser/modules/SitePermissions.jsm
@@ -91,16 +91,27 @@ this.SitePermissions = {
    */
   remove: function (aURI, aPermissionID) {
     if (!this.isSupportedURI(aURI))
       return;
 
     Services.perms.remove(aURI, aPermissionID);
   },
 
+  /* Returns the class name used to represent the given permission,
+   * set by iconClass property on the gPermissionObject data.
+   */
+  getIconClass: function (aPermissionID) {
+    if (!(aPermissionID in gPermissionObject)) {
+      throw "Invalid permission ID: " + aPermissionID;
+    }
+
+    return gPermissionObject[aPermissionID].iconClass;
+  },
+
   /* Returns the localized label for the permission with the given ID, to be
    * used in a UI for managing permissions.
    */
   getPermissionLabel: function (aPermissionID) {
     return gStringBundle.GetStringFromName("permission." + aPermissionID + ".label");
   },
 
   /* Returns the localized label for the given permission state, to be used in
@@ -131,66 +142,85 @@ let gPermissionObject = {
    *    Allows sub domains to have their own permissions.
    *    Defaults to false.
    *
    *  - getDefault
    *    Called to get the permission's default state.
    *    Defaults to UNKNOWN, indicating that the user will be asked each time
    *    a page asks for that permissions.
    *
+   *  - iconClass
+   *    The class to use for the .notification-anchor-icon image showing next
+   *    to the permission.
+   *
    *  - states
    *    Array of permission states to be exposed to the user.
    *    Defaults to ALLOW, BLOCK and the default state (see getDefault).
    */
 
   "image": {
     getDefault: function () {
       return Services.prefs.getIntPref("permissions.default.image") == 2 ?
                SitePermissions.BLOCK : SitePermissions.ALLOW;
-    }
+    },
+    iconClass: "",
   },
 
   "cookie": {
     states: [ SitePermissions.ALLOW, SitePermissions.SESSION, SitePermissions.BLOCK ],
     getDefault: function () {
       if (Services.prefs.getIntPref("network.cookie.cookieBehavior") == 2)
         return SitePermissions.BLOCK;
 
       if (Services.prefs.getIntPref("network.cookie.lifetimePolicy") == 2)
         return SitePermissions.SESSION;
 
       return SitePermissions.ALLOW;
-    }
+    },
+    iconClass: "",
   },
 
-  "desktop-notification": {},
+  "desktop-notification": {
+    iconClass: "webapps-notification-icon",
+  },
 
-  "camera": {},
-  "microphone": {},
+  "camera": {
+    iconClass: "webRTC-shareDevices-notification-icon",
+  },
+  "microphone": {
+    iconClass: "webRTC-shareMicrophone-notification-icon",
+  },
 
   "popup": {
     getDefault: function () {
       return Services.prefs.getBoolPref("dom.disable_open_during_load") ?
                SitePermissions.BLOCK : SitePermissions.ALLOW;
-    }
+    },
+    iconClass: "",
   },
 
   "install": {
     getDefault: function () {
       return Services.prefs.getBoolPref("xpinstall.whitelist.required") ?
                SitePermissions.BLOCK : SitePermissions.ALLOW;
-    }
+    },
+    iconClass: "addons-notification-icon",
   },
 
   "geo": {
-    exactHostMatch: true
+    exactHostMatch: true,
+    iconClass: "webRTC-shareDevices-notification-icon",
   },
 
-  "indexedDB": {},
+  "indexedDB": {
+    iconClass: "indexedDB-notification-icon",
+  },
 
   "pointerLock": {
-    exactHostMatch: true
+    exactHostMatch: true,
+    iconClass: "pointerLock-notification-icon",
   },
 
   "push": {
-    exactHostMatch: true
+    exactHostMatch: true,
+    iconClass: "push-notification-icon",
   }
 };
diff --git a/browser/modules/test/xpcshell/test_SitePermissions.js b/browser/modules/test/xpcshell/test_SitePermissions.js
--- a/browser/modules/test/xpcshell/test_SitePermissions.js
+++ b/browser/modules/test/xpcshell/test_SitePermissions.js
@@ -1,14 +1,24 @@
 /* Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 "use strict";
 
 Components.utils.import("resource:///modules/SitePermissions.jsm");
 
 add_task(function* testPermissionsListing() {
-  Assert.deepEqual(SitePermissions.listPermissions().sort(),
-    ["camera","cookie","desktop-notification","geo","image",
-     "indexedDB","install","microphone","pointerLock","popup",
-     "push"],
-    "Correct list of all permissions");
+  Assert.deepEqual(SitePermissions.listPermissions().sort().map(p=> {
+    return p + "|" + SitePermissions.getIconClass(p);
+  }),
+    ["camera|webRTC-shareDevices-notification-icon",
+     "cookie|",
+     "desktop-notification|webapps-notification-icon",
+     "geo|webRTC-shareDevices-notification-icon",
+     "image|",
+     "indexedDB|indexedDB-notification-icon",
+     "install|addons-notification-icon",
+     "microphone|webRTC-shareMicrophone-notification-icon",
+     "pointerLock|pointerLock-notification-icon",
+     "popup|",
+     "push|push-notification-icon"],
+    "Correct list of all permissions and icons");
 });
diff --git a/browser/themes/shared/controlcenter/panel.inc.css b/browser/themes/shared/controlcenter/panel.inc.css
--- a/browser/themes/shared/controlcenter/panel.inc.css
+++ b/browser/themes/shared/controlcenter/panel.inc.css
@@ -283,16 +283,19 @@ description#identity-popup-content-verif
 }
 
 /* PERMISSIONS */
 
 #identity-popup-permissions-content {
   background-image: url(chrome://browser/skin/controlcenter/permissions.svg);
 }
 
+#identity-popup-permission-list .notification-anchor-icon {
+  margin: 0;
+}
+
 #identity-popup-permission-list {
   margin-top: 5px;
 }
 
 .identity-popup-permission-label {
-  -moz-margin-start: 0;
+  -moz-margin-start: 3px;
 }
-
diff --git a/browser/themes/shared/notification-icons.inc.css b/browser/themes/shared/notification-icons.inc.css
--- a/browser/themes/shared/notification-icons.inc.css
+++ b/browser/themes/shared/notification-icons.inc.css
@@ -137,20 +137,25 @@
   /* XXX: need HiDPI version */
 }
 
 .geo-notification-icon,
 #geo-notification-icon {
   list-style-image: url(chrome://browser/skin/Geolocation-16.png);
 }
 
+.push-notification-icon,
 #push-notification-icon {
   list-style-image: url(chrome://browser/skin/Push-16.png);
 }
 
+/* Use :root to steal specificity from .notification-anchor-icon inside the
+   hidpi media query
+ */
+:root .addons-notification-icon,
 #addons-notification-icon {
   list-style-image: url(chrome://browser/skin/addons/addon-install-anchor.svg#default);
 }
 
 #addons-notification-icon:hover {
   list-style-image: url(chrome://browser/skin/addons/addon-install-anchor.svg#hover);
 }
 
@@ -364,16 +369,17 @@
 
 %ifdef XP_MACOSX
 /* OSX only until we have icons for Windows and Linux */
   .geo-notification-icon,
   #geo-notification-icon {
     list-style-image: url(chrome://browser/skin/Geolocation-16@2x.png);
   }
 
+  .push-notification-icon,
   #push-notification-icon {
     list-style-image: url(chrome://browser/skin/Push-16@2x.png);
   }
 
   .indexedDB-notification-icon,
   #indexedDB-notification-icon {
     list-style-image: url(chrome://global/skin/icons/question-32.png);
   }
