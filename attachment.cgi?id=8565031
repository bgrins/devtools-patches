# HG changeset patch
# Parent 057842bdc786d2aab11c039b1aa64039357f2899
# User Tim Nguyen <ntim.bugs@gmail.com>
Bug 1029371 - Make style editor media sidebar interact with media sidebar. r=bgrins, paul

diff --git a/browser/devtools/responsivedesign/responsivedesign.jsm b/browser/devtools/responsivedesign/responsivedesign.jsm
--- a/browser/devtools/responsivedesign/responsivedesign.jsm
+++ b/browser/devtools/responsivedesign/responsivedesign.jsm
@@ -46,16 +46,28 @@ this.ResponsiveUIManager = {
    *
    * @param aWindow the main window.
    * @param aTab the tab targeted.
    */
   toggle: function(aWindow, aTab) {
     if (this.isActiveForTab(aTab)) {
       ActiveTabs.get(aTab).close();
     } else {
+      this.launch(aWindow, aTab);
+    }
+  },
+
+  /**
+   * Launches the responsive mode.
+   *
+   * @param aWindow the main window.
+   * @param aTab the tab targeted.
+   */
+  launch: function(aWindow, aTab) {
+    if (!this.isActiveForTab(aTab)) {
       new ResponsiveUI(aWindow, aTab);
     }
   },
 
   /**
    * Returns true if responsive view is active for the provided tab.
    *
    * @param aTab the tab targeted.
@@ -78,34 +90,45 @@ this.ResponsiveUIManager = {
    * @param aTab the tab targeted.
    * @param aCommand the command name.
    * @param aArgs command arguments.
    */
   handleGcliCommand: function(aWindow, aTab, aCommand, aArgs) {
     switch (aCommand) {
       case "resize to":
         if (!this.isActiveForTab(aTab)) {
-          new ResponsiveUI(aWindow, aTab);
+          this.launch(aWindow, aTab);
         }
         ActiveTabs.get(aTab).setSize(aArgs.width, aArgs.height);
         break;
       case "resize on":
         if (!this.isActiveForTab(aTab)) {
-          new ResponsiveUI(aWindow, aTab);
+          this.launch(aWindow, aTab);
         }
         break;
       case "resize off":
         if (this.isActiveForTab(aTab)) {
           ActiveTabs.get(aTab).close();
         }
         break;
       case "resize toggle":
           this.toggle(aWindow, aTab);
       default:
     }
+  },
+
+  /**
+   * Sets the responsive mode size for a specific tab
+   *
+   * @param aTab the tab targeted.
+   * @param aWidth width of the browser.
+   * @param aHeight height of the browser.
+   */
+  setSize: function(aTab, aWidth, aHeight) {
+    ActiveTabs.get(aTab).setSize(aWidth, aHeight);
   }
 }
 
 EventEmitter.decorate(ResponsiveUIManager);
 
 let presets = [
   // Phones
   {key: "320x480", width: 320, height: 480},    // iPhone, B2G, with <meta viewport>
diff --git a/browser/devtools/styleeditor/StyleEditorUI.jsm b/browser/devtools/styleeditor/StyleEditorUI.jsm
--- a/browser/devtools/styleeditor/StyleEditorUI.jsm
+++ b/browser/devtools/styleeditor/StyleEditorUI.jsm
@@ -16,16 +16,17 @@ Cu.import("resource://gre/modules/Servic
 Cu.import("resource://gre/modules/NetUtil.jsm");
 Cu.import("resource://gre/modules/osfile.jsm");
 Cu.import("resource://gre/modules/Task.jsm");
 Cu.import("resource://gre/modules/devtools/event-emitter.js");
 Cu.import("resource:///modules/devtools/gDevTools.jsm");
 Cu.import("resource:///modules/devtools/StyleEditorUtil.jsm");
 Cu.import("resource:///modules/devtools/SplitView.jsm");
 Cu.import("resource:///modules/devtools/StyleSheetEditor.jsm");
+Cu.import("resource:///modules/devtools/responsivedesign.jsm");
 const { Promise: promise } = Cu.import("resource://gre/modules/Promise.jsm", {});
 
 XPCOMUtils.defineLazyModuleGetter(this, "PluralForm",
                                   "resource://gre/modules/PluralForm.jsm");
 
 const require = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools.require;
 const { PrefObserver, PREF_ORIG_SOURCES } = require("devtools/styleeditor/utils");
 const csscoverage = require("devtools/server/actors/csscoverage");
@@ -813,21 +814,37 @@ StyleEditorUI.prototype = {
         inSource = true;
 
         let div = this._panelDoc.createElement("div");
         div.className = "media-rule-label";
         div.addEventListener("click", this._jumpToLocation.bind(this, location));
 
         let cond = this._panelDoc.createElement("div");
         cond.textContent = rule.conditionText;
-        cond.className = "media-rule-condition"
+        cond.className = "media-rule-condition";
         if (!rule.matches) {
           cond.classList.add("media-condition-unmatched");
         }
         div.appendChild(cond);
+        if (this._target._tab.tagName == "tab") {
+          cond.innerHTML = cond.textContent.replace(/(min\-|max\-)(width|height):\s\d+(px)/ig, "<a href='#' class='media-responsive-mode-toggle'>$&</a>");
+          var widthAndHeightCond = cond.querySelectorAll(".media-responsive-mode-toggle");
+          for (let $el of widthAndHeightCond) {
+            $el.addEventListener("click", (event) => {
+              let conditionText = event.target.textContent;
+              let isWidthCond = conditionText.indexOf("width") > -1;
+              let mediaVal = parseInt(/\d+/.exec(conditionText));
+
+              let options = isWidthCond ? {width: mediaVal} : {height: mediaVal};
+              this._launchResponsiveMode(options);
+              event.preventDefault();
+              event.stopPropagation();
+            });
+          }
+        }
 
         let link = this._panelDoc.createElement("div");
         link.className = "media-rule-line theme-link";
         if (location.line != -1) {
           link.textContent = ":" + location.line;
         }
         div.appendChild(link);
 
@@ -836,16 +853,38 @@ StyleEditorUI.prototype = {
 
       sidebar.hidden = !showSidebar || !inSource;
 
       this.emit("media-list-changed", editor);
     }.bind(this)).then(null, Cu.reportError);
   },
 
   /**
+   * Launches the responsive mode with a specific width or height
+   *
+   * @param  {object} options
+   *         Object with width or/and height properties.
+   */
+  _launchResponsiveMode: function(options = {}) {
+    let tab = this._target._tab;
+    let win = this._target._tab.ownerGlobal;
+
+    ResponsiveUIManager.launch(win, tab);
+    if (options.width && options.height) {
+      ResponsiveUIManager.setSize(tab, options.width, options.height);
+    }
+    else if (options.width) {
+      ResponsiveUIManager.setSize(tab, options.width, 480);
+    }
+    else if (options.height) {
+      ResponsiveUIManager.setSize(tab, 1000, options.height);
+    }
+  },
+
+  /**
    * Jump cursor to the editor for a stylesheet and line number for a rule.
    *
    * @param  {object} location
    *         Location object with 'line', 'column', and 'source' properties.
    */
   _jumpToLocation: function(location) {
     let source = location.styleSheet || location.source;
     this.selectStyleSheet(source, location.line - 1, location.column - 1);
diff --git a/browser/themes/shared/devtools/styleeditor.css b/browser/themes/shared/devtools/styleeditor.css
--- a/browser/themes/shared/devtools/styleeditor.css
+++ b/browser/themes/shared/devtools/styleeditor.css
@@ -86,16 +86,21 @@
 }
 
 .media-rule-label {
   padding: 4px;
   cursor: pointer;
   border-bottom: 1px solid;
 }
 
+.media-responsive-mode-toggle {
+  color: var(--theme-highlight-blue);
+  text-decoration: underline;
+}
+
 .media-rule-line {
   -moz-padding-start: 4px;
 }
 
 .theme-light .media-condition-unmatched {
   color: grey;
 }
 
