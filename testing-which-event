# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  a1d0e6f7185b93a372f83f9de8c8a7f75dbb02e9

diff --git a/browser/base/content/tabbrowser.js b/browser/base/content/tabbrowser.js
--- a/browser/base/content/tabbrowser.js
+++ b/browser/base/content/tabbrowser.js
@@ -4393,24 +4393,34 @@ window._gBrowser = {
         this._tabAttrModified(tab, ["activemedia-blocked"]);
         let hist = Services.telemetry.getHistogramById("TAB_AUDIO_INDICATOR_USED");
         hist.add(2 /* unblockByVisitingTab */ );
         tab.finishMediaBlockTimer();
       }
     });
 
     this.tabpanels.addEventListener("select", (event) => {
+      if (gMultiProcessBrowser) {
+        const relatedElement = this.tabpanels.getRelatedElement(
+          this.tabpanels.selectedPanel);
+        gBrowser._getSwitcher().requestTab(relatedElement);
+      }
+
       if (event.target == this.tabpanels) {
         gBrowser.updateCurrentBrowser();
       }
     });
 
     this.tabpanels.addEventListener("preselect", (event) => {
       if (gMultiProcessBrowser) {
-        gBrowser._getSwitcher().requestTab(event.detail);
+        // gBrowser._getSwitcher().requestTab(event.detail);
+        
+        const relatedElement = this.tabpanels.getRelatedElement(
+          this.tabpanels.selectedPanel);
+        gBrowser._getSwitcher().requestTab(relatedElement);
       }
     });
   },
 };
 
 /**
  * A web progress listener object definition for a given tab.
  */
diff --git a/toolkit/content/widgets/tabbox.xml b/toolkit/content/widgets/tabbox.xml
--- a/toolkit/content/widgets/tabbox.xml
+++ b/toolkit/content/widgets/tabbox.xml
@@ -610,24 +610,24 @@
         ]]>
         </getter>
 
         <setter>
         <![CDATA[
           if (val < 0 || val >= this.childNodes.length)
             return val;
 
+
+          var panel = this._selectedPanel;
+          this._selectedPanel = this.childNodes[val];
+          this.setAttribute("selectedIndex", val);
           // Give the tabbrowser a chance to run logic regardless of
           // whether the panel is going to change:
           this.dispatchEvent(new CustomEvent("preselect",
             { detail: this.getRelatedElement(this.childNodes[val]) }));
-
-          var panel = this._selectedPanel;
-          this._selectedPanel = this.childNodes[val];
-          this.setAttribute("selectedIndex", val);
           if (this._selectedPanel != panel) {
             var event = document.createEvent("Events");
             event.initEvent("select", true, true);
             this.dispatchEvent(event);
           }
           return val;
         ]]>
         </setter>
