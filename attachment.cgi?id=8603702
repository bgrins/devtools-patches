# HG changeset patch
# User Till Schneidereit <till@tillschneidereit.net>
# Date 1401102295 -7200
#      Mon May 26 13:04:55 2014 +0200
# Node ID 926f62ff49a7c714029adddb6bff19da73bda441
# Parent  ab2a587e3f58307d9435dbe4a1aad2de43127fe3
Bug 861219 - Part 1: Make Date.prototype not be a Date object.

diff --git a/browser/devtools/webconsole/test/browser_webconsole_output_05.js b/browser/devtools/webconsole/test/browser_webconsole_output_05.js
--- a/browser/devtools/webconsole/test/browser_webconsole_output_05.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_output_05.js
@@ -59,20 +59,20 @@ let inputTests = [
     printOutput: "Invalid Date",
     inspectable: true,
     variablesViewLabel: "Invalid Date",
   },
 
   // 7
   {
     input: "Date.prototype",
-    output: "Date",
+    output: /Object {.*}/,
     printOutput: "Invalid Date",
     inspectable: true,
-    variablesViewLabel: "Date",
+    variablesViewLabel: "Object",
   },
 
   // 8
   {
     input: "new Number(43)",
     output: "43",
     inspectable: true,
   },
diff --git a/js/src/jit-test/tests/auto-regress/bug771946.js b/js/src/jit-test/tests/auto-regress/bug771946.js
--- a/js/src/jit-test/tests/auto-regress/bug771946.js
+++ b/js/src/jit-test/tests/auto-regress/bug771946.js
@@ -1,4 +1,4 @@
 // Binary: cache/js-dbg-64-221f1a184f67-linux
 // Flags:
 //
-Date.prototype.setFullYear(Math.cos(1))
+new Date().setFullYear(Math.cos(1))
diff --git a/js/src/jit-test/tests/basic/testCrossCompartmentTransparency.js b/js/src/jit-test/tests/basic/testCrossCompartmentTransparency.js
--- a/js/src/jit-test/tests/basic/testCrossCompartmentTransparency.js
+++ b/js/src/jit-test/tests/basic/testCrossCompartmentTransparency.js
@@ -10,55 +10,55 @@ var proxyStr = "Proxy.create(           
 "    defineProperty: () =>assertEq(true,false),            "+
 "    delete: () =>assertEq(true,false),                    "+
 "    fix: () =>assertEq(true,false), },                    "+
 "  Object.prototype                                        "+
 ");                                                        ";
 var proxy1 = g1.eval(proxyStr);
 var proxy2 = g2.eval(proxyStr);
 
-function test(str, f) {
+function test(str, f, isGeneric = false) {
     "use strict";
 
     var x = f(eval(str));
     assertEq(x, f(g1.eval(str)));
     assertEq(x, f(g2.eval(str)));
 
     var threw = false;
     try {
         f(g1.eval("new Object()"));
     } catch (e) {
         assertEq(Object.prototype.toString.call(e), "[object Error]");
         threw = true;
     }
-    assertEq(threw, true);
+    assertEq(threw, !isGeneric);
     threw = false;
     try {
         f(g2.eval("new Object()"));
     } catch (e) {
         assertEq(Object.prototype.toString.call(e), "[object Error]");
         threw = true;
     }
-    assertEq(threw, true);
+    assertEq(threw, !isGeneric);
     threw = false;
     try {
         f(proxy1);
     } catch (e) {
         assertEq(Object.prototype.toString.call(e), "[object Error]");
         threw = true;
     }
-    assertEq(threw, true);
+    assertEq(threw, !isGeneric);
     threw = false;
     try {
         f(proxy2);
     } catch (e) {
         assertEq(Object.prototype.toString.call(e), "[object Error]");
         threw = true;
     }
-    assertEq(threw, true);
+    assertEq(threw, !isGeneric);
 }
 
 test("new Boolean(true)", b => Boolean.prototype.toSource.call(b));
 test("new Boolean(true)", b => Boolean.prototype.toString.call(b));
 test("new Boolean(true)", b => Boolean.prototype.valueOf.call(b));
 test("new Number(1)", n => Number.prototype.toSource.call(n));
 test("new Number(1)", n => Number.prototype.toString.call(n));
 test("new Number(1)", n => Number.prototype.valueOf.call(n));
@@ -148,12 +148,12 @@ test("new Date()", d => justDontThrow(Da
 test("new Date()", d => justDontThrow(Date.prototype.toISOString.call(d)));
 test("new Date()", d => justDontThrow(Date.prototype.toLocaleString.call(d)));
 test("new Date()", d => justDontThrow(Date.prototype.toLocaleDateString.call(d)));
 test("new Date()", d => justDontThrow(Date.prototype.toLocaleTimeString.call(d)));
 test("new Date()", d => justDontThrow(Date.prototype.toLocaleFormat.call(d)));
 test("new Date()", d => justDontThrow(Date.prototype.toTimeString.call(d)));
 test("new Date()", d => justDontThrow(Date.prototype.toDateString.call(d)));
 test("new Date()", d => justDontThrow(Date.prototype.toSource.call(d)));
-test("new Date()", d => justDontThrow(Date.prototype.toString.call(d)));
+test("new Date()", d => justDontThrow(Date.prototype.toString.call(d)), true);
 test("new Date()", d => justDontThrow(Date.prototype.valueOf.call(d)));
 
 throw "done";
diff --git a/js/src/jsdate.cpp b/js/src/jsdate.cpp
--- a/js/src/jsdate.cpp
+++ b/js/src/jsdate.cpp
@@ -2872,28 +2872,36 @@ date_toSource_impl(JSContext* cx, CallAr
 static bool
 date_toSource(JSContext* cx, unsigned argc, Value* vp)
 {
     CallArgs args = CallArgsFromVp(argc, vp);
     return CallNonGenericMethod<IsDate, date_toSource_impl>(cx, args);
 }
 #endif
 
-MOZ_ALWAYS_INLINE bool
-date_toString_impl(JSContext* cx, CallArgs args)
-{
-    return date_format(cx, args.thisv().toObject().as<DateObject>().UTCTime().toNumber(),
-                       FORMATSPEC_FULL, args.rval());
-}
-
+// ES6 final draft 20.3.4.41.
 static bool
 date_toString(JSContext* cx, unsigned argc, Value* vp)
 {
     CallArgs args = CallArgsFromVp(argc, vp);
-    return CallNonGenericMethod<IsDate, date_toString_impl>(cx, args);
+    // Step 2.a. (reordered)
+    double tv = GenericNaN();
+    if (args.thisv().isObject()) {
+        // Step 1.
+        RootedObject obj(cx, &args.thisv().toObject());
+        // Step 2.
+        if (ObjectClassIs(obj, ESClass_Date, cx)) {
+            // Step 3.a.
+            RootedValue unboxed(cx);
+            Unbox(cx, obj, &unboxed);
+            tv = unboxed.toNumber();
+        }
+    }
+    // Step 4.
+    return date_format(cx, tv, FORMATSPEC_FULL, args.rval());
 }
 
 MOZ_ALWAYS_INLINE bool
 date_valueOf_impl(JSContext* cx, CallArgs args)
 {
     Rooted<DateObject*> dateObj(cx, &args.thisv().toObject().as<DateObject>());
     args.rval().set(dateObj->UTCTime());
     return true;
@@ -3123,30 +3131,35 @@ js::DateConstructor(JSContext* cx, unsig
         return DateNoArguments(cx, args);
 
     if (args.length() == 1)
         return DateOneArgument(cx, args);
 
     return DateMultipleArguments(cx, args);
 }
 
+// ES6 final draft 20.3.4.
+static JSObject*
+CreateDatePrototype(JSContext* cx, JSProtoKey key)
+{
+    return cx->global()->createBlankPrototype(cx, &DateObject::protoClass_);
+}
+
 static bool
 FinishDateClassInit(JSContext* cx, HandleObject ctor, HandleObject proto)
 {
-    proto->as<DateObject>().setUTCTime(GenericNaN());
-
     /*
      * Date.prototype.toGMTString has the same initial value as
      * Date.prototype.toUTCString.
      */
     RootedValue toUTCStringFun(cx);
     RootedId toUTCStringId(cx, NameToId(cx->names().toUTCString));
     RootedId toGMTStringId(cx, NameToId(cx->names().toGMTString));
-    return NativeGetProperty(cx, proto.as<DateObject>(), toUTCStringId, &toUTCStringFun) &&
-           NativeDefineProperty(cx, proto.as<DateObject>(), toGMTStringId, toUTCStringFun,
+    return NativeGetProperty(cx, proto.as<NativeObject>(), toUTCStringId, &toUTCStringFun) &&
+           NativeDefineProperty(cx, proto.as<NativeObject>(), toGMTStringId, toUTCStringFun,
                                 nullptr, nullptr, 0);
 }
 
 const Class DateObject::class_ = {
     js_Date_str,
     JSCLASS_HAS_RESERVED_SLOTS(RESERVED_SLOTS) |
     JSCLASS_HAS_CACHED_PROTO(JSProto_Date),
     nullptr, /* addProperty */
@@ -3159,25 +3172,46 @@ const Class DateObject::class_ = {
     date_convert,
     nullptr, /* finalize */
     nullptr, /* call */
     nullptr, /* hasInstance */
     nullptr, /* construct */
     nullptr, /* trace */
     {
         GenericCreateConstructor<DateConstructor, 7, gc::AllocKind::FUNCTION>,
-        GenericCreatePrototype,
+        CreateDatePrototype,
         date_static_methods,
         nullptr,
         date_methods,
         nullptr,
         FinishDateClassInit
     }
 };
 
+const Class DateObject::protoClass_ = {
+    js_Object_str,
+    JSCLASS_HAS_CACHED_PROTO(JSProto_Date),
+    nullptr, /* addProperty */
+    nullptr, /* delProperty */
+    nullptr, /* getProperty */
+    nullptr, /* setProperty */
+    nullptr, /* enumerate */
+    nullptr, /* resolve */
+    nullptr, /* mayResolve */
+    nullptr, /* convert */
+    nullptr, /* finalize */
+    nullptr, /* call */
+    nullptr, /* hasInstance */
+    nullptr, /* construct */
+    nullptr, /* trace  */
+    {
+        DELEGATED_CLASSSPEC(&DateObject::class_.spec)
+    }
+};
+
 JS_FRIEND_API(JSObject*)
 js::NewDateObjectMsec(JSContext* cx, double msec_time)
 {
     JSObject* obj = NewBuiltinClassInstance(cx, &DateObject::class_);
     if (!obj)
         return nullptr;
     obj->as<DateObject>().setUTCTime(msec_time);
     return obj;
diff --git a/js/src/tests/ecma/Date/15.9.5.2-2-n.js b/js/src/tests/ecma/Date/15.9.5.2-2-n.js
deleted file mode 100644
--- a/js/src/tests/ecma/Date/15.9.5.2-2-n.js
+++ /dev/null
@@ -1,50 +0,0 @@
-/* -*- tab-width: 2; indent-tabs-mode: nil; js-indent-level: 2 -*- */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-
-/**
-   File Name:          15.9.5.2-2.js
-   ECMA Section:       15.9.5.2 Date.prototype.toString
-   Description:
-   This function returns a string value. The contents of the string are
-   implementation dependent, but are intended to represent the Date in a
-   convenient, human-readable form in the current time zone.
-
-   The toString function is not generic; it generates a runtime error if its
-   this value is not a Date object. Therefore it cannot be transferred to
-   other kinds of objects for use as a method.
-
-
-   This verifies that calling toString on an object that is not a string
-   generates a runtime error.
-
-   Author:             christine@netscape.com
-   Date:               12 november 1997
-*/
-
-var SECTION = "15.9.5.2-2";
-var VERSION = "ECMA_1";
-startTest();
-var TITLE   = "Date.prototype.toString";
-
-writeHeaderToLog( SECTION + " "+ TITLE);
-
-var OBJ = new MyObject( new Date(0) );
-
-DESCRIPTION = "var OBJ = new MyObject( new Date(0) ); OBJ.toString()";
-EXPECTED = "error";
-
-new TestCase( SECTION,
-	      "var OBJ = new MyObject( new Date(0) ); OBJ.toString()",
-	      "error",
-	      eval("OBJ.toString()") );
-test();
-
-function MyObject( value ) {
-  this.value = value;
-  this.valueOf = new Function( "return this.value" );
-  this.toString = Date.prototype.toString;
-  return this;
-}
diff --git a/js/src/tests/ecma/Date/15.9.5.js b/js/src/tests/ecma/Date/15.9.5.js
--- a/js/src/tests/ecma/Date/15.9.5.js
+++ b/js/src/tests/ecma/Date/15.9.5.js
@@ -34,16 +34,19 @@ var TITLE   = "Properties of the Date Pr
 
 writeHeaderToLog( SECTION + " "+ TITLE);
 
 
 Date.prototype.getClass = Object.prototype.toString;
 
 new TestCase( SECTION,
 	      "Date.prototype.getClass",
-	      "[object Date]",
+	      "[object Object]",
 	      Date.prototype.getClass() );
 new TestCase( SECTION,
 	      "Date.prototype.valueOf()",
-	      NaN,
-	      Date.prototype.valueOf() );
+	      "TypeError",
+	      (function() { try { Date.prototype.valueOf() } catch (e) { return e.constructor.name; } })());
+new TestCase( SECTION,
+          "Date.prototype.__proto__ == Object.prototype",
+          true,
+          Date.prototype.__proto__ == Object.prototype );
 test();
-
diff --git a/js/src/tests/ecma/extensions/15.9.5.js b/js/src/tests/ecma/extensions/15.9.5.js
deleted file mode 100644
--- a/js/src/tests/ecma/extensions/15.9.5.js
+++ /dev/null
@@ -1,42 +0,0 @@
-/* -*- tab-width: 2; indent-tabs-mode: nil; js-indent-level: 2 -*- */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-
-/**
-   File Name:          15.9.5.js
-   ECMA Section:       15.9.5 Properties of the Date prototype object
-   Description:
-
-   The Date prototype object is itself a Date object (its [[Class]] is
-   "Date") whose value is NaN.
-
-   The value of the internal [[Prototype]] property of the Date prototype
-   object is the Object prototype object (15.2.3.1).
-
-   In following descriptions of functions that are properties of the Date
-   prototype object, the phrase "this Date object" refers to the object that
-   is the this value for the invocation of the function; it is an error if
-   this does not refer to an object for which the value of the internal
-   [[Class]] property is "Date". Also, the phrase "this time value" refers
-   to the number value for the time represented by this Date object, that is,
-   the value of the internal [[Value]] property of this Date object.
-
-   Author:             christine@netscape.com
-   Date:               12 november 1997
-*/
-
-var SECTION = "15.9.5";
-var VERSION = "ECMA_1";
-startTest();
-var TITLE   = "Properties of the Date Prototype Object";
-
-writeHeaderToLog( SECTION + " "+ TITLE);
-
-new TestCase( SECTION,
-	      "Date.prototype.__proto__ == Object.prototype",
-	      true,
-	      Date.prototype.__proto__ == Object.prototype );
-test();
-
diff --git a/js/src/tests/ecma_2/Exceptions/date-001.js b/js/src/tests/ecma_2/Exceptions/date-001.js
deleted file mode 100644
--- a/js/src/tests/ecma_2/Exceptions/date-001.js
+++ /dev/null
@@ -1,60 +0,0 @@
-/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-
-/**
-   File Name:          date-001.js
-   Corresponds To:     15.9.5.2-2.js
-   ECMA Section:       15.9.5.2 Date.prototype.toString
-   Description:
-   This function returns a string value. The contents of the string are
-   implementation dependent, but are intended to represent the Date in a
-   convenient, human-readable form in the current time zone.
-
-   The toString function is not generic; it generates a runtime error if its
-   this value is not a Date object. Therefore it cannot be transferred to
-   other kinds of objects for use as a method.
-
-
-   This verifies that calling toString on an object that is not a string
-   generates a runtime error.
-
-   Author:             christine@netscape.com
-   Date:               12 november 1997
-*/
-var SECTION = "date-001";
-var VERSION = "JS1_4";
-var TITLE   = "Date.prototype.toString";
-
-startTest();
-writeHeaderToLog( SECTION + " "+ TITLE);
-
-var result = "Failed";
-var exception = "No exception thrown";
-var expect = "Passed";
-
-try {
-  var OBJ = new MyObject( new Date(0) );
-  result = OBJ.toString();
-} catch ( e ) {
-  result = expect;
-  exception = e.toString();
-}
-
-new TestCase(
-  SECTION,
-  "OBJECT = new MyObject( new Date(0)) ; result = OBJ.toString()" +
-  " (threw " + exception +")",
-  expect,
-  result );
-
-test();
-
-function MyObject( value ) {
-  this.value = value;
-  this.valueOf = new Function( "return this.value" );
-  this.toString = Date.prototype.toString;
-  return this;
-}
diff --git a/js/src/tests/ecma_5/misc/builtin-methods-reject-null-undefined-this.js b/js/src/tests/ecma_5/misc/builtin-methods-reject-null-undefined-this.js
--- a/js/src/tests/ecma_5/misc/builtin-methods-reject-null-undefined-this.js
+++ b/js/src/tests/ecma_5/misc/builtin-methods-reject-null-undefined-this.js
@@ -54,17 +54,17 @@ var ClassToMethodMap =
               /*
                * toFixed doesn't *immediately* test |this| for number or
                * Number-ness, but because the ToInteger(void 0) which arguably
                * precedes it in the toFixed algorithm won't throw in this test,
                * we don't need to specially test it.
                */
               "toFixed",
               "toExponential", "toPrecision"],
-    Date:    ["toString", "toDateString", "toTimeString", "toLocaleString",
+    Date:    ["toDateString", "toTimeString", "toLocaleString",
               "toLocaleDateString", "toLocaleTimeString", "valueOf", "getTime",
               "getFullYear", "getUTCFullYear", "getMonth", "getUTCMonth",
               "getDate", "getUTCDate", "getDay", "getUTCDay", "getHours",
               "getUTCHours", "getMinutes", "getUTCMinutes", "getSeconds",
               "getUTCSeconds", "getMilliseconds", "getUTCMilliseconds",
               /*
                * toFixed doesn't *immediately* test |this| for number or
                * Number-ness, but because the TimeClip(ToNumber(void 0)) which
diff --git a/js/src/tests/ecma_6/Date/browser.js b/js/src/tests/ecma_6/Date/browser.js
new file mode 100644
diff --git a/js/src/tests/ecma_6/Date/prototype-is-not-a-date.js b/js/src/tests/ecma_6/Date/prototype-is-not-a-date.js
new file mode 100644
--- /dev/null
+++ b/js/src/tests/ecma_6/Date/prototype-is-not-a-date.js
@@ -0,0 +1,15 @@
+/*
+ * Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/licenses/publicdomain/
+ */
+
+var BUGNUMBER = 861219;
+var summary = "Date.prototype isn't an instance of Date";
+
+print(BUGNUMBER + ": " + summary);
+
+assertEq(Date.prototype instanceof Date, false);
+assertEq(Date.prototype.__proto__, Object.prototype);
+
+if (typeof reportCompare === "function")
+  reportCompare(true, true);
diff --git a/js/src/tests/ecma_6/Date/toString-generic.js b/js/src/tests/ecma_6/Date/toString-generic.js
new file mode 100644
--- /dev/null
+++ b/js/src/tests/ecma_6/Date/toString-generic.js
@@ -0,0 +1,13 @@
+var BUGNUMBER = 861219;
+var summary = 'Date.prototype.toString is a generic function';
+
+print(BUGNUMBER + ": " + summary);
+
+for (var thisValue of [null, undefined, 0, 1.2, true, false, "foo", Symbol.iterator,
+                       {}, [], /foo/, Date.prototype, new Proxy(new Date(), {})])
+{
+  assertEq(Date.prototype.toString.call(thisValue), "Invalid Date");
+}
+
+if (typeof reportCompare === "function")
+  reportCompare(true, true);
diff --git a/js/src/tests/js1_4/Regress/date-001-n.js b/js/src/tests/js1_4/Regress/date-001-n.js
deleted file mode 100644
--- a/js/src/tests/js1_4/Regress/date-001-n.js
+++ /dev/null
@@ -1,42 +0,0 @@
-/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-
-/**
- *  File Name:          date-001-n.js
- *  Description:
- *
- *  http://scopus.mcom.com/bugsplat/show_bug.cgi?id=299903
- *
- *  Author:             christine@netscape.com
- *  Date:               11 August 1998
- */
-var SECTION = "date-001-n.js";
-var VERSION = "JS1_4";
-var TITLE   = "Regression test case for 299903";
-var BUGNUMBER="299903";
-
-startTest();
-
-writeHeaderToLog( SECTION + " "+ TITLE);
-
-function MyDate() {
-  this.foo = "bar";
-}
-MyDate.prototype = new Date();
-
-DESCRIPTION =
-  "function MyDate() { this.foo = \"bar\"; }; MyDate.prototype = new Date(); new MyDate().toString()";
-EXPECTED = "error";
-
-new TestCase(
-  SECTION,
-  "function MyDate() { this.foo = \"bar\"; }; "+
-  "MyDate.prototype = new Date(); " +
-  "new MyDate().toString()",
-  "error",
-  new MyDate().toString() );
-
-test();
diff --git a/js/src/vm/DateObject.h b/js/src/vm/DateObject.h
--- a/js/src/vm/DateObject.h
+++ b/js/src/vm/DateObject.h
@@ -35,16 +35,17 @@ class DateObject : public NativeObject
     static const uint32_t LOCAL_HOURS_SLOT   = COMPONENTS_START_SLOT + 5;
     static const uint32_t LOCAL_MINUTES_SLOT = COMPONENTS_START_SLOT + 6;
     static const uint32_t LOCAL_SECONDS_SLOT = COMPONENTS_START_SLOT + 7;
 
     static const uint32_t RESERVED_SLOTS = LOCAL_SECONDS_SLOT + 1;
 
   public:
     static const Class class_;
+    static const Class protoClass_;
 
     inline const js::Value& UTCTime() const {
         return getFixedSlot(UTC_TIME_SLOT);
     }
 
     // Set UTC time to a given time and invalidate cached local time.
     void setUTCTime(double t);
     void setUTCTime(double t, MutableHandleValue vp);
diff --git a/js/xpconnect/tests/unit/test_bug809652.js b/js/xpconnect/tests/unit/test_bug809652.js
--- a/js/xpconnect/tests/unit/test_bug809652.js
+++ b/js/xpconnect/tests/unit/test_bug809652.js
@@ -35,17 +35,16 @@ function run_test() {
   checkThrows("ArrayBuffer.prototype.__lookupGetter__('byteLength').call(ab);", sb);
   checkThrows("ArrayBuffer.prototype.slice.call(ab, 0);", sb);
   checkThrows("DataView.prototype.getInt8.call(dv, 0);", sb);
 
   /* Now that Date is on Xrays, these should all throw. */
   checkThrows("Date.prototype.getYear.call(d)", sb);
   checkThrows("Date.prototype.valueOf.call(d)", sb);
   checkThrows("d.valueOf()", sb);
-  checkThrows("Date.prototype.toString.call(d)", sb);
   checkThrows("d.toString()", sb);
 
   /* Typed arrays. */
   function testForTypedArray(t) {
     sb.curr = t;
     sb.currName = t.constructor.name;
     checkThrows("this[currName].prototype.subarray.call(curr, 0)[0]", sb);
     checkThrows("(new this[currName]).__lookupGetter__('length').call(curr)", sb);
diff --git a/toolkit/devtools/server/actors/script.js b/toolkit/devtools/server/actors/script.js
--- a/toolkit/devtools/server/actors/script.js
+++ b/toolkit/devtools/server/actors/script.js
@@ -3860,20 +3860,16 @@ DebuggerServer.ObjectActorPreviewers = {
     }
 
     let str = RegExp.prototype.toString.call(obj.unsafeDereference());
     aGrip.displayString = threadActor.createValueGrip(str);
     return true;
   }],
 
   Date: [function({obj, threadActor}, aGrip) {
-    if (!obj.proto || obj.proto.class != "Date") {
-      return false;
-    }
-
     let time = Date.prototype.getTime.call(obj.unsafeDereference());
 
     aGrip.preview = {
       timestamp: threadActor.createValueGrip(time),
     };
     return true;
   }],
 
