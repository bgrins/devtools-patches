# HG changeset patch
# Parent dc112c8c0da7229b087dd6186e6b039e9cd1d25d
# User Vikneshwar <lviknesh1993@gmail.com>
Bug 968241-Added a case to _onKeyDown function in the markup-view.js to detect the copy key event and when the event is true then call this._inspector.copyOuterHTML() in inspector-panel.js

diff --git a/browser/devtools/inspector/inspector-panel.js b/browser/devtools/inspector/inspector-panel.js
--- a/browser/devtools/inspector/inspector-panel.js
+++ b/browser/devtools/inspector/inspector-panel.js
@@ -726,17 +726,32 @@ InspectorPanel.prototype = {
    * Copy the outerHTML of the selected Node to the clipboard.
    */
   copyOuterHTML: function InspectorPanel_copyOuterHTML()
   {
     if (!this.selection.isNode()) {
       return;
     }
 
-    this._copyLongStr(this.walker.outerHTML(this.selection.nodeFront));
+
+    let node = this.selection.nodeFront;
+    console.log(node);
+    if (node.nodeType === 1) { // Element
+      this._copyLongStr(this.walker.outerHTML(node));
+    } else if (node.nodeType === 8) { // Comment
+      node.getNodeValue().then(longstr => {
+        longstr.string().then(nodeValue => {
+          longstr.release().then(null, console.error);
+          this._copyLongStr(nodeValue);
+        });
+      });
+    } else if (node.nodeType === 10) { // Doctype
+      console.log(node.docTypeString);
+    }
+
   },
 
   /**
    * Copy the data-uri for the currently selected image in the clipboard.
    */
   copyImageDataUri: function InspectorPanel_copyImageDataUri()
   {
     let container = this.markup.getContainer(this.selection.nodeFront);
diff --git a/browser/devtools/markupview/markup-view.js b/browser/devtools/markupview/markup-view.js
--- a/browser/devtools/markupview/markup-view.js
+++ b/browser/devtools/markupview/markup-view.js
@@ -403,16 +403,22 @@ MarkupView.prototype = {
         }
         this.navigate(selection);
         break;
       }
       case Ci.nsIDOMKeyEvent.DOM_VK_F2: {
         this.beginEditingOuterHTML(this._selectedContainer.node);
         break;
       }
+      case Ci.nsIDOMKeyEvent.DOM_VK_C: {
+        if (aEvent.ctrlKey || aEvent.metaKey) {
+          this._inspector.copyOuterHTML();
+        }
+        break;
+      }
       default:
         handled = false;
     }
     if (handled) {
       aEvent.stopPropagation();
       aEvent.preventDefault();
     }
   },
@@ -1589,20 +1595,17 @@ GenericEditor.prototype = {
  * Creates an editor for a DOCTYPE node.
  *
  * @param MarkupContainer aContainer The container owning this editor.
  * @param DOMNode aNode The node being edited.
  */
 function DoctypeEditor(aContainer, aNode) {
   this.elt = aContainer.doc.createElement("span");
   this.elt.className = "editor comment";
-  this.elt.textContent = '<!DOCTYPE ' + aNode.name +
-     (aNode.publicId ? ' PUBLIC "' +  aNode.publicId + '"': '') +
-     (aNode.systemId ? ' "' + aNode.systemId + '"' : '') +
-     '>';
+  this.elt.textContent = aNode.docTypeString;
 }
 
 DoctypeEditor.prototype = {
   destroy: function() {}
 };
 
 /**
  * Creates a simple text editor node, used for TEXT and COMMENT
diff --git a/toolkit/devtools/server/actors/inspector.js b/toolkit/devtools/server/actors/inspector.js
--- a/toolkit/devtools/server/actors/inspector.js
+++ b/toolkit/devtools/server/actors/inspector.js
@@ -483,16 +483,23 @@ let NodeFront = protocol.FrontClass(Node
 
   get isDocumentElement() !!this._form.isDocumentElement,
 
   // doctype properties
   get name() this._form.name,
   get publicId() this._form.publicId,
   get systemId() this._form.systemId,
 
+  get docTypeString() {
+    return '<!DOCTYPE ' + this.name +
+     (this.publicId ? ' PUBLIC "' + this.publicId + '"': '') +
+     (this.systemId ? ' "' + this.systemId + '"' : '') +
+   '>';
+  },
+
   getAttribute: function(name) {
     let attr = this._getAttribute(name);
     return attr ? attr.value : null;
   },
   hasAttribute: function(name) {
     this._cacheAttributes();
     return (name in this._attrMap);
   },
