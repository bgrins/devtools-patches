# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  1af830e99712c96e2a15f5dfbfdc205c66eda606

diff --git a/browser/extensions/formautofill/FormAutofillDoorhanger.jsm b/browser/extensions/formautofill/FormAutofillDoorhanger.jsm
--- a/browser/extensions/formautofill/FormAutofillDoorhanger.jsm
+++ b/browser/extensions/formautofill/FormAutofillDoorhanger.jsm
@@ -55,16 +55,18 @@ const CONTENT = {
         },
         get label() {
           // If sync account is not set, return null label to hide checkbox
           return Services.prefs.prefHasUserValue("services.sync.username") ?
             GetStringFromName("addressesSyncCheckbox") : null;
         },
         callback(event) {
           let checked = event.target.checked;
+          console.trace();
+          console.log("callback", event.target, checked);;
           Services.prefs.setBoolPref("services.sync.engine.addresses", checked);
           log.debug("Set addresses sync to", checked);
         },
       },
       hideClose: true,
     },
   },
   updateAddress: {
@@ -309,18 +311,21 @@ let FormAutofillDoorhanger = {
       anchorElement.setAttribute("tooltiptext", tooltiptext);
       notificationPopupBox.appendChild(anchorElement);
     }
   },
   _addCheckboxListener(browser, {notificationId, options}) {
     if (!options.checkbox) {
       return;
     }
+
+    let el = this._getNotificationElm(browser, notificationId);
     let {checkbox} = this._getNotificationElm(browser, notificationId);
 
+    console.log(checkbox, checkbox.hidden, !!el.getAttribute("checkboxhidden"), el.notification);
     if (checkbox && !checkbox.hidden) {
       checkbox.addEventListener("command", options.checkbox.callback);
     }
   },
   _removeCheckboxListener(browser, {notificationId, options}) {
     if (!options.checkbox) {
       return;
     }
diff --git a/browser/extensions/formautofill/test/browser/browser_first_time_use_doorhanger.js b/browser/extensions/formautofill/test/browser/browser_first_time_use_doorhanger.js
--- a/browser/extensions/formautofill/test/browser/browser_first_time_use_doorhanger.js
+++ b/browser/extensions/formautofill/test/browser/browser_first_time_use_doorhanger.js
@@ -105,16 +105,18 @@ add_task(async function test_first_time_
       ok(!cb.hidden, "Sync checkbox should be visible");
       is(SpecialPowers.getBoolPref(SYNC_ADDRESSES_PREF), false,
          "addresses sync should be disabled at first");
 
       is(cb.checked, false, "Checkbox state should match addresses sync state");
       cb.click();
       is(SpecialPowers.getBoolPref(SYNC_ADDRESSES_PREF), true,
          "addresses sync should be enabled after checked");
+
+         await new Promise(r=>r);
       // Open the panel via main button
       await clickDoorhangerButton(MAIN_BUTTON);
       let tab = await tabPromise;
       ok(tab, "Privacy panel opened");
       BrowserTestUtils.removeTab(tab);
     }
   );
 
diff --git a/toolkit/modules/PopupNotifications.jsm b/toolkit/modules/PopupNotifications.jsm
--- a/toolkit/modules/PopupNotifications.jsm
+++ b/toolkit/modules/PopupNotifications.jsm
@@ -1471,16 +1471,17 @@ PopupNotifications.prototype = {
   _onCheckboxCommand(event) {
     let notificationEl = getNotificationFromElement(event.originalTarget);
     let checked = notificationEl.checkbox.checked;
     let notification = notificationEl.notification;
 
     // Save checkbox state to be able to persist it when re-opening the doorhanger.
     notification._checkboxChecked = checked;
 
+    console.log("HERE", notificationEl.checkbox, checked, notification.options.checkbox.checkedState);
     if (checked) {
       this._setNotificationUIState(notificationEl, notification.options.checkbox.checkedState);
     } else {
       this._setNotificationUIState(notificationEl, notification.options.checkbox.uncheckedState);
     }
     event.stopPropagation();
   },
 
