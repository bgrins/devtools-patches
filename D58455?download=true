# HG changeset patch
# Parent  5d5751f9ca9054cf383e807ede3c153781686dc5

diff --git a/dom/base/nsGlobalWindowInner.cpp b/dom/base/nsGlobalWindowInner.cpp
--- a/dom/base/nsGlobalWindowInner.cpp
+++ b/dom/base/nsGlobalWindowInner.cpp
@@ -21,16 +21,17 @@
 #include "mozilla/dom/ContentChild.h"
 #include "mozilla/dom/ContentFrameMessageManager.h"
 #include "mozilla/dom/ContentParent.h"
 #include "mozilla/dom/CSPEvalChecker.h"
 #include "mozilla/dom/DebuggerNotification.h"
 #include "mozilla/dom/DocumentInlines.h"
 #include "mozilla/dom/DOMJSProxyHandler.h"
 #include "mozilla/dom/EventTarget.h"
+#include "mozilla/dom/WindowKeyboardShortcutBinding.h"
 #include "mozilla/dom/LocalStorage.h"
 #include "mozilla/dom/LocalStorageCommon.h"
 #include "mozilla/dom/LSObject.h"
 #include "mozilla/dom/PartitionedLocalStorage.h"
 #include "mozilla/dom/Storage.h"
 #include "mozilla/dom/IdleRequest.h"
 #include "mozilla/dom/Performance.h"
 #include "mozilla/dom/ScriptLoader.h"
@@ -246,16 +247,19 @@
 #include "mozilla/dom/WindowGlobalChild.h"
 #include "mozilla/dom/BrowserChild.h"
 
 #include "mozilla/net/CookieSettings.h"
 
 #include "AccessCheck.h"
 #include "SessionStorageCache.h"
 
+#include "mozilla/GlobalKeyListener.h"
+#include "mozilla/WindowKeyboardShortcut.h"
+
 #ifdef ANDROID
 #  include <android/log.h>
 #endif
 
 #ifdef XP_WIN
 #  include <process.h>
 #  define getpid _getpid
 #else
@@ -7191,16 +7195,50 @@ void nsGlobalWindowInner::StorageAccessG
   mCacheStorage = nullptr;
 
   // Reset the active storage principal
   if (mDoc) {
     mDoc->ClearActiveStoragePrincipal();
   }
 }
 
+already_AddRefed<Promise> nsGlobalWindowInner::RegisterKeyboardShortcut(
+    JSContext* aCx, const nsAString& aId,
+    const mozilla::dom::WindowKeyboardShortcutInfo& aInfo,
+    mozilla::dom::WindowKeyboardShortcutCallback& aCallback, ErrorResult& aError) {
+  RefPtr<Promise> promise = Promise::Create(this, aError);
+
+  if (NS_WARN_IF(aError.Failed())) {
+    return nullptr;
+  }
+
+  if ((!aInfo.mKey.WasPassed() || aInfo.mKey.Value().IsEmpty()) &&
+      (!aInfo.mKeyCode.WasPassed() || aInfo.mKeyCode.Value().IsEmpty())) {
+    promise->MaybeRejectWithUndefined();
+    return promise.forget();
+  }
+
+  if (!mJSKeyListeners) {
+    mJSKeyListeners = new JSGlobalKeyListener(this);
+  }
+
+  JSKeyEventHandler* handler = mJSKeyListeners->Register(aInfo, aCallback);
+  RefPtr<WindowKeyboardShortcut> shortcut = new WindowKeyboardShortcut(this, mJSKeyListeners, handler);
+
+  JS::Rooted<JS::Value> shortcutValue(aCx);
+  if (!ToJSValue(aCx, shortcut, &shortcutValue)) {
+    promise->MaybeRejectWithUndefined();
+    return promise.forget();
+  }
+
+  promise->MaybeResolveWithClone(aCx, shortcutValue);
+
+  return promise.forget();
+}
+
 mozilla::dom::TabGroup* nsPIDOMWindowInner::TabGroup() {
   return nsGlobalWindowInner::Cast(this)->TabGroupInner();
 }
 
 /* static */
 already_AddRefed<nsGlobalWindowInner> nsGlobalWindowInner::Create(
     nsGlobalWindowOuter* aOuterWindow, bool aIsChrome,
     WindowGlobalChild* aActor) {
diff --git a/dom/base/nsGlobalWindowInner.h b/dom/base/nsGlobalWindowInner.h
--- a/dom/base/nsGlobalWindowInner.h
+++ b/dom/base/nsGlobalWindowInner.h
@@ -90,16 +90,17 @@ class nsWindowSizes;
 class IdleRequestExecutor;
 
 class DialogValueHolder;
 
 class PromiseDocumentFlushedResolver;
 
 namespace mozilla {
 class AbstractThread;
+class JSGlobalKeyListener;
 namespace dom {
 class BarProp;
 class BrowsingContext;
 struct ChannelPixelLayout;
 class ClientSource;
 class Console;
 class Crypto;
 class CustomElementRegistry;
@@ -108,16 +109,18 @@ class External;
 class Function;
 class Gamepad;
 enum class ImageBitmapFormat : uint8_t;
 class IdleRequest;
 class IdleRequestCallback;
 class IncrementalRunnable;
 class InstallTriggerImpl;
 class IntlUtils;
+class WindowKeyboardShortcutCallback;
+struct WindowKeyboardShortcutInfo;
 class Location;
 class MediaQueryList;
 class OwningExternalOrWindowProxy;
 class Promise;
 class PostMessageEvent;
 struct RequestInit;
 class RequestOrUSVString;
 class SharedWorker;
@@ -1231,16 +1234,22 @@ class nsGlobalWindowInner final : public
   void SuspendIdleRequests();
   void ResumeIdleRequests();
 
   typedef mozilla::LinkedList<RefPtr<mozilla::dom::IdleRequest>> IdleRequests;
   void RemoveIdleCallback(mozilla::dom::IdleRequest* aRequest);
 
   void SetActiveLoadingState(bool aIsLoading) override;
 
+  already_AddRefed<mozilla::dom::Promise> RegisterKeyboardShortcut(
+      JSContext* aCx, const nsAString& aId,
+      const mozilla::dom::WindowKeyboardShortcutInfo& aInfo,
+      mozilla::dom::WindowKeyboardShortcutCallback& aCallback,
+      mozilla::ErrorResult& aError);
+
  protected:
   // Window offline status. Checked to see if we need to fire offline event
   bool mWasOffline : 1;
 
   // Represents whether the inner window's page has had a slow script notice.
   // Only used by inner windows; will always be false for outer windows.
   // This is used to implement Telemetry measures such as
   // SLOW_SCRIPT_PAGE_COUNT.
@@ -1422,16 +1431,18 @@ class nsGlobalWindowInner final : public
 
   mozilla::UniquePtr<mozilla::dom::ClientSource> mClientSource;
 
   nsTArray<RefPtr<mozilla::dom::Promise>> mPendingPromises;
 
   nsTArray<mozilla::UniquePtr<PromiseDocumentFlushedResolver>>
       mDocumentFlushedResolvers;
 
+  RefPtr<mozilla::JSGlobalKeyListener> mJSKeyListeners;
+
   static InnerWindowByIdTable* sInnerWindowsById;
 
   // Members in the mChromeFields member should only be used in chrome windows.
   // All accesses to this field should be guarded by a check of mIsChrome.
   struct ChromeFields {
     ChromeFields() : mGroupMessageManagers(1) {}
 
     RefPtr<mozilla::dom::ChromeMessageBroadcaster> mMessageManager;
diff --git a/dom/bindings/Bindings.conf b/dom/bindings/Bindings.conf
--- a/dom/bindings/Bindings.conf
+++ b/dom/bindings/Bindings.conf
@@ -1450,24 +1450,30 @@ DOMInterfaces = {
     'headerFile': 'WebrtcGlobalInformation.h',
 },
 
 'Window': {
     'nativeType': 'nsGlobalWindowInner',
     'headerFile': 'nsGlobalWindow.h',
     'implicitJSContext': [
         'createImageBitmap',
-        'requestIdleCallback'
+        'requestIdleCallback',
+        'registerKeyboardShortcut',
     ],
 },
 
 'WindowContext': {
     'concrete': True
 },
 
+'WindowKeyboardShortcut': {
+    'nativeType': 'mozilla::WindowKeyboardShortcut',
+    'headerFile': 'mozilla/WindowKeyboardShortcut.h',
+},
+
 'WindowProxy': {
     'nativeType': 'mozilla::dom::WindowProxyHolder',
     'headerFile': 'mozilla/dom/WindowProxyHolder.h',
     'concrete': False
 },
 
 'WindowRoot': {
     'nativeType': 'nsWindowRoot'
diff --git a/dom/chrome-webidl/WindowKeyboardShortcut.webidl b/dom/chrome-webidl/WindowKeyboardShortcut.webidl
new file mode 100644
--- /dev/null
+++ b/dom/chrome-webidl/WindowKeyboardShortcut.webidl
@@ -0,0 +1,24 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+callback WindowKeyboardShortcutCallback = void ();
+
+enum WindowKeyboardShortcutModifier {
+  "shift", "alt", "meta", "control", "os", "accel", "access"
+};
+
+dictionary WindowKeyboardShortcutInfo {
+  DOMString key;
+  DOMString keyCode;
+  boolean reserved;
+  sequence<WindowKeyboardShortcutModifier> modifiers;
+};
+
+[NoInterfaceObject, Exposed=Window]
+interface WindowKeyboardShortcut {
+  attribute boolean disabled;
+
+  void unregister();
+};
diff --git a/dom/chrome-webidl/moz.build b/dom/chrome-webidl/moz.build
--- a/dom/chrome-webidl/moz.build
+++ b/dom/chrome-webidl/moz.build
@@ -61,16 +61,17 @@ WEBIDL_FILES = [
     'PrecompiledScript.webidl',
     'PromiseDebugging.webidl',
     'SessionStoreUtils.webidl',
     'StructuredCloneHolder.webidl',
     'TelemetryStopwatch.webidl',
     'WebExtensionContentScript.webidl',
     'WebExtensionPolicy.webidl',
     'WindowGlobalActors.webidl',
+    'WindowKeyboardShortcut.webidl',
     'XULFrameElement.webidl',
     'XULMenuElement.webidl',
     'XULTextElement.webidl',
     'XULTreeElement.webidl'
 ]
 
 if CONFIG['MOZ_PLACES']:
     WEBIDL_FILES += [
diff --git a/dom/events/GlobalKeyListener.cpp b/dom/events/GlobalKeyListener.cpp
--- a/dom/events/GlobalKeyListener.cpp
+++ b/dom/events/GlobalKeyListener.cpp
@@ -466,16 +466,96 @@ bool GlobalKeyListener::HasHandlerForEve
 
   if (IsDisabled()) {
     return false;
   }
 
   return WalkHandlersInternal(aEvent, false, aOutReservedForChrome);
 }
 
+JSGlobalKeyListener::JSGlobalKeyListener(EventTarget* aTarget)
+    : GlobalKeyListener(aTarget) {
+  EventListenerManager* manager = aTarget->GetOrCreateListenerManager();
+  if (!manager) {
+    return;
+  }
+
+  InstallKeyboardEventListenersTo(manager);
+}
+
+JSGlobalKeyListener::~JSGlobalKeyListener() {
+  if (mHandler) {
+    delete mHandler;
+  }
+}
+
+JSKeyEventHandler*
+JSGlobalKeyListener::Register(const mozilla::dom::WindowKeyboardShortcutInfo& aInfo,
+    mozilla::dom::WindowKeyboardShortcutCallback& aCallback) {
+  JSKeyEventHandler* handler = new JSKeyEventHandler(aInfo, aCallback);
+  if (!mHandler) {
+    mHandler = handler;
+  } else {
+    KeyEventHandler* previous = mHandler;
+    while (previous->GetNextHandler()) {
+      previous = previous->GetNextHandler();
+    }
+    previous->SetNextHandler(handler);
+  }
+
+  return handler;
+}
+
+void
+JSGlobalKeyListener::Unregister(JSKeyEventHandler* aHandler) {
+  if (mHandler == aHandler) {
+    mHandler = aHandler->GetNextHandler();
+  } else {
+    KeyEventHandler* previous = mHandler;
+    while (previous && previous->GetNextHandler() != aHandler) {
+      previous = previous->GetNextHandler();
+    }
+
+    // Already unregistered? Probably shouldn't ever happen.
+    if (!previous) {
+      return;
+    }
+
+    previous->SetNextHandler(aHandler->GetNextHandler());
+  }
+
+  aHandler->SetNextHandler(nullptr);
+  delete aHandler;
+}
+
+bool JSGlobalKeyListener::CanHandle(KeyEventHandler* aHandler,
+                                    bool aWillExecute) const {
+  JSKeyEventHandler* handler = static_cast<JSKeyEventHandler*>(aHandler);
+  return !handler->Disabled();
+}
+
+bool JSGlobalKeyListener::IsReservedKey(WidgetKeyboardEvent* aKeyEvent,
+    KeyEventHandler* aHandler) {
+  JSKeyEventHandler* handler = static_cast<JSKeyEventHandler*>(aHandler);
+
+  ReservedKey reserved = handler->GetIsReserved();
+  // reserved="true" means that the key is always reserved. reserved="false"
+  // means that the key is never reserved. Otherwise, we check site-specific
+  // permissions.
+  if (reserved == ReservedKey_False) {
+    return false;
+  }
+
+  if (reserved == ReservedKey_True) {
+    return true;
+  }
+
+  return nsContentUtils::ShouldBlockReservedKeys(aKeyEvent);
+}
+
 //
 // AttachGlobalKeyHandler
 //
 // Creates a new key handler and prepares to listen to key events on the given
 // event receiver (either a document or an content node). If the receiver is
 // content, then extra work needs to be done to hook it up to the document (XXX
 // WHY??)
 //
diff --git a/dom/events/GlobalKeyListener.h b/dom/events/GlobalKeyListener.h
--- a/dom/events/GlobalKeyListener.h
+++ b/dom/events/GlobalKeyListener.h
@@ -4,16 +4,17 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #ifndef mozilla_GlobalKeyListener_h_
 #define mozilla_GlobalKeyListener_h_
 
 #include "mozilla/EventForwards.h"
 #include "mozilla/layers/KeyboardMap.h"
+#include "mozilla/dom/WindowKeyboardShortcutBinding.h"
 #include "nsIDOMEventListener.h"
 #include "nsIWeakReferenceUtils.h"
 
 class nsAtom;
 
 namespace mozilla {
 class EventListenerManager;
 class WidgetKeyboardEvent;
@@ -28,16 +29,17 @@ class Element;
 class EventTarget;
 class KeyboardEvent;
 }  // namespace dom
 
 using namespace dom;
 
 class KeyEventHandler;
 class XULKeyEventHandler;
+class JSKeyEventHandler;
 
 /**
  * A generic listener for key events.
  *
  * Maintains a list of shortcut handlers and is registered as a listener for DOM
  * key events from a target. Responsible for executing the appropriate handler
  * when a keyboard event is received.
  */
@@ -102,16 +104,35 @@ class GlobalKeyListener : public nsIDOME
 
   virtual bool IsDisabled() const { return false; }
 
   EventTarget* mTarget;  // weak ref;
 
   KeyEventHandler* mHandler;  // Linked list of event handlers.
 };
 
+class JSGlobalKeyListener final : public GlobalKeyListener {
+ public:
+  explicit JSGlobalKeyListener(EventTarget* aTarget);
+
+  JSKeyEventHandler* Register(const mozilla::dom::WindowKeyboardShortcutInfo& aInfo,
+    mozilla::dom::WindowKeyboardShortcutCallback& aCallback);
+  void Unregister(JSKeyEventHandler* aHandler);
+
+  virtual bool CanHandle(KeyEventHandler* aHandler,
+                         bool aWillExecute) const override;
+
+ protected:
+  virtual ~JSGlobalKeyListener();
+
+  virtual void EnsureHandlers() override {}
+
+  virtual bool IsReservedKey(WidgetKeyboardEvent* aKeyEvent, KeyEventHandler* aHandler) override;
+};
+
 /**
  * A listener for shortcut keys defined in XUL keyset elements.
  *
  * Listens for keyboard events from the document object and triggers the
  * appropriate XUL key elements.
  */
 class XULKeySetGlobalKeyListener final : public GlobalKeyListener {
  public:
diff --git a/dom/events/KeyEventHandler.cpp b/dom/events/KeyEventHandler.cpp
--- a/dom/events/KeyEventHandler.cpp
+++ b/dom/events/KeyEventHandler.cpp
@@ -314,23 +314,86 @@ size_t KeyEventHandler::SizeOfIncludingT
   size_t n = 0;
   for (const KeyEventHandler* handler = this; handler;
        handler = handler->mNextHandler) {
     n += aMallocSizeOf(handler);
   }
   return n;
 }
 
+JSKeyEventHandler::JSKeyEventHandler(
+    const mozilla::dom::WindowKeyboardShortcutInfo& aInfo,
+    mozilla::dom::WindowKeyboardShortcutCallback& aCallback)
+    : KeyEventHandler(),
+      mDisabled(false),
+      mCallback(&aCallback),
+      mReserved(ReservedKey_Unset) {
+  mDetail = -1;
+  mMisc = 0;
+  mKeyMask = cAllModifiers;
+  mEventName = nsGkAtoms::keypress;
+
+  if (aInfo.mModifiers.WasPassed()) {
+    for (auto modifier : aInfo.mModifiers.Value()) {
+      if (modifier == WindowKeyboardShortcutModifier::Shift) {
+        mKeyMask |= cShift | cShiftMask;
+      } else if (modifier == WindowKeyboardShortcutModifier::Alt) {
+        mKeyMask |= cAlt | cAltMask;
+      } else if (modifier == WindowKeyboardShortcutModifier::Meta) {
+        mKeyMask |= cMeta | cMetaMask;
+      } else if (modifier == WindowKeyboardShortcutModifier::Os) {
+        mKeyMask |= cOS | cOSMask;
+      } else if (modifier == WindowKeyboardShortcutModifier::Control) {
+        mKeyMask |= cControl | cControlMask;
+      } else if (modifier == WindowKeyboardShortcutModifier::Accel) {
+        mKeyMask |= AccelKeyMask();
+      } else if (modifier == WindowKeyboardShortcutModifier::Access) {
+        mKeyMask |= KeyToMask(kMenuAccessKey);
+      }
+    }
+  }
+
+  if (aInfo.mReserved.WasPassed()) {
+    mReserved = aInfo.mReserved.Value() ? ReservedKey_True : ReservedKey_False;
+  }
+
+  if (aInfo.mKey.WasPassed() && !aInfo.mKey.Value().IsEmpty()) {
+    nsString key(aInfo.mKey.Value());
+    ToLowerCase(key);
+
+    // We have a charcode.
+    mMisc = 1;
+    mDetail = key[0];
+
+    // TODO report key conflict.
+  } else if (aInfo.mKeyCode.WasPassed() && !aInfo.mKeyCode.Value().IsEmpty()) {
+    mDetail = GetMatchingKeyCode(aInfo.mKeyCode.Value());
+  }
+}
+
+bool JSKeyEventHandler::Disabled() {
+  return mDisabled;
+}
+
+void JSKeyEventHandler::SetDisabled(bool aDisabled) {
+  mDisabled = aDisabled;
+}
+
+nsresult JSKeyEventHandler::ExecuteHandler(EventTarget* aTarget, Event* aEvent) {
+  mCallback->Call();
+  return NS_OK;
+}
+
 XULKeyEventHandler::XULKeyEventHandler(Element* aKeyElement)
     : KeyEventHandler(),
       mHandlerElement(nullptr),
       mReserved(ReservedKey_Unset) {
   mDetail = -1;
   mMisc = 0;
-  mKeyMask = 0;
+  mKeyMask = cAllModifiers;
   nsAutoString modifiers;
 
   nsWeakPtr weak = do_GetWeakReference(aKeyElement);
   if (!weak) {
     return;
   }
   weak.swap(mHandlerElement);
 
@@ -355,19 +418,16 @@ XULKeyEventHandler::XULKeyEventHandler(E
                                nsGkAtoms::_true, eCaseMatters)) {
     mReserved = ReservedKey_True;
   } else if (aKeyElement->AttrValueIs(kNameSpaceID_None, nsGkAtoms::reserved,
                                       nsGkAtoms::_false, eCaseMatters)) {
     mReserved = ReservedKey_False;
   }
 
   if (!key.IsEmpty()) {
-    if (mKeyMask == 0) {
-      mKeyMask = cAllModifiers;
-    }
     ToLowerCase(key);
 
     // We have a charcode.
     mMisc = 1;
     mDetail = key[0];
     const uint8_t GTK2Modifiers = cShift | cControl | cShiftMask | cControlMask;
     if ((mKeyMask & GTK2Modifiers) == GTK2Modifiers &&
         modifiers.First() != char16_t(',') &&
@@ -382,19 +442,16 @@ XULKeyEventHandler::XULKeyEventHandler(E
          ('a' <= mDetail && mDetail <= 'z'))) {
       ReportKeyConflict(key.get(), modifiers.get(), aKeyElement,
                         "WinConflict2");
     }
   } else {
     aKeyElement->GetAttr(kNameSpaceID_None, nsGkAtoms::keycode, key);
 
     if (!key.IsEmpty()) {
-      if (mKeyMask == 0) {
-        mKeyMask = cAllModifiers;
-      }
       mDetail = GetMatchingKeyCode(key);
     }
   }
 }
 
 XULKeyEventHandler::~XULKeyEventHandler() {
   NS_IF_RELEASE(mHandlerElement);
 }
diff --git a/dom/events/KeyEventHandler.h b/dom/events/KeyEventHandler.h
--- a/dom/events/KeyEventHandler.h
+++ b/dom/events/KeyEventHandler.h
@@ -121,16 +121,36 @@ class KeyEventHandler {
   int32_t mDetail;  // For key events, contains a charcode or keycode. For
                     // mouse events, stores the button info.
 
   // Prototype handlers are chained. We own the next handler in the chain.
   KeyEventHandler* mNextHandler;
   RefPtr<nsAtom> mEventName;  // The type of the event, e.g., "keypress"
 };
 
+class JSKeyEventHandler final : public KeyEventHandler {
+ public:
+  explicit JSKeyEventHandler(
+    const mozilla::dom::WindowKeyboardShortcutInfo& aInfo,
+    mozilla::dom::WindowKeyboardShortcutCallback& aCallback);
+
+  bool Disabled();
+  void SetDisabled(bool aDisabled);
+
+  MOZ_CAN_RUN_SCRIPT
+  virtual nsresult ExecuteHandler(EventTarget* aTarget, Event* aEvent) override;
+
+  ReservedKey GetIsReserved() { return mReserved; }
+
+ protected:
+  bool mDisabled;
+  RefPtr<mozilla::dom::WindowKeyboardShortcutCallback> mCallback;
+  ReservedKey mReserved;
+};
+
 class XULKeyEventHandler final : public KeyEventHandler {
  public:
   explicit XULKeyEventHandler(Element* aKeyElement);
   virtual ~XULKeyEventHandler() override;
 
   already_AddRefed<Element> GetHandlerElement();
   void GetEventType(nsAString& aEvent);
   MOZ_CAN_RUN_SCRIPT
diff --git a/dom/events/WindowKeyboardShortcut.cpp b/dom/events/WindowKeyboardShortcut.cpp
new file mode 100644
--- /dev/null
+++ b/dom/events/WindowKeyboardShortcut.cpp
@@ -0,0 +1,56 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "WindowKeyboardShortcut.h"
+#include "mozilla/dom/WindowKeyboardShortcutBinding.h"
+
+namespace mozilla {
+
+NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE_0(WindowKeyboardShortcut)
+
+NS_IMPL_CYCLE_COLLECTION_ROOT_NATIVE(WindowKeyboardShortcut, AddRef)
+NS_IMPL_CYCLE_COLLECTION_UNROOT_NATIVE(WindowKeyboardShortcut, Release)
+
+WindowKeyboardShortcut::WindowKeyboardShortcut(nsPIDOMWindowInner* aWindow,
+    JSGlobalKeyListener* aListener, JSKeyEventHandler* aEventHandler)
+  : mWindow(aWindow),
+    mListener(aListener),
+    mEventHandler(aEventHandler) {
+}
+
+nsISupports*
+WindowKeyboardShortcut::GetParentObject() const {
+  return mWindow.get();
+}
+
+JSObject*
+WindowKeyboardShortcut::WrapObject(JSContext* aCx, JS::Handle<JSObject*> aGivenProto) {
+  return WindowKeyboardShortcut_Binding::Wrap(aCx, this, aGivenProto);
+}
+
+bool
+WindowKeyboardShortcut::Disabled() {
+  return mEventHandler ? mEventHandler->Disabled() : true;
+}
+
+void
+WindowKeyboardShortcut::SetDisabled(bool aDisabled) {
+  if (mEventHandler) {
+    mEventHandler->SetDisabled(aDisabled);
+  }
+}
+
+void
+WindowKeyboardShortcut::Unregister() {
+  if (mListener && mEventHandler) {
+    mListener->Unregister(mEventHandler);
+  }
+
+  mListener = nullptr;
+  mEventHandler = nullptr;
+}
+
+} // namespace mozilla
diff --git a/dom/events/WindowKeyboardShortcut.h b/dom/events/WindowKeyboardShortcut.h
new file mode 100644
--- /dev/null
+++ b/dom/events/WindowKeyboardShortcut.h
@@ -0,0 +1,44 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_WindowKeyboardShortcut_h_
+#define mozilla_WindowKeyboardShortcut_h_
+
+#include "nsWrapperCache.h"
+#include "nsPIDOMWindow.h"
+#include "mozilla/GlobalKeyListener.h"
+#include "mozilla/KeyEventHandler.h"
+
+namespace mozilla {
+
+class WindowKeyboardShortcut final : public nsWrapperCache {
+ public:
+  NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING(WindowKeyboardShortcut)
+  NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_NATIVE_CLASS(WindowKeyboardShortcut)
+
+  WindowKeyboardShortcut(nsPIDOMWindowInner* aWindow,
+      JSGlobalKeyListener* aListener, JSKeyEventHandler* aEventHandler);
+  nsISupports* GetParentObject() const;
+  virtual JSObject* WrapObject(JSContext* aCx, JS::Handle<JSObject*> aGivenProto) override;
+
+  bool Disabled();
+  void SetDisabled(bool aDisabled);
+
+  void Unregister();
+
+ private:
+  ~WindowKeyboardShortcut() = default;
+
+  nsCOMPtr<nsPIDOMWindowInner> mWindow;
+  RefPtr<JSGlobalKeyListener> mListener;
+
+  // This object is owned by the global listener.
+  JSKeyEventHandler* mEventHandler;
+};
+
+}  // namespace mozilla
+
+#endif
diff --git a/dom/events/moz.build b/dom/events/moz.build
--- a/dom/events/moz.build
+++ b/dom/events/moz.build
@@ -56,16 +56,17 @@ EXPORTS.mozilla += [
     'KeyEventHandler.h',
     'KeyNameList.h',
     'PendingFullscreenEvent.h',
     'PhysicalKeyCodeNameList.h',
     'ShortcutKeys.h',
     'TextComposition.h',
     'VirtualKeyCodeList.h',
     'WheelHandlingHelper.h',
+    'WindowKeyboardShortcut.h',
 ]
 
 EXPORTS.mozilla.dom += [
     'AnimationEvent.h',
     'BeforeUnloadEvent.h',
     'Clipboard.h',
     'ClipboardEvent.h',
     'CommandEvent.h',
@@ -154,16 +155,17 @@ UNIFIED_SOURCES += [
     'TextClause.cpp',
     'TextComposition.cpp',
     'Touch.cpp',
     'TouchEvent.cpp',
     'TransitionEvent.cpp',
     'UIEvent.cpp',
     'WheelEvent.cpp',
     'WheelHandlingHelper.cpp',
+    'WindowKeyboardShortcut.cpp',
     'XULCommandEvent.cpp',
 ]
 
 # nsEventStateManager.cpp should be built separately because of Mac OS X headers.
 SOURCES += [
     'EventStateManager.cpp',
 ]
 
diff --git a/dom/webidl/Window.webidl b/dom/webidl/Window.webidl
--- a/dom/webidl/Window.webidl
+++ b/dom/webidl/Window.webidl
@@ -783,8 +783,13 @@ partial interface Window {
   [SameObject, Pref="dom.visualviewport.enabled", Replaceable]
   readonly attribute VisualViewport visualViewport;
 
 };
 
 dictionary WindowPostMessageOptions : PostMessageOptions {
   USVString targetOrigin = "/";
 };
+
+partial interface Window {
+  [Throws, Func="nsGlobalWindowInner::IsPrivilegedChromeWindow"]
+  Promise<WindowKeyboardShortcut> registerKeyboardShortcut(DOMString id, WindowKeyboardShortcutInfo info, WindowKeyboardShortcutCallback callback);
+};
