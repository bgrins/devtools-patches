# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  7f482241c855860aa6509ab432d7b9b9706ad8a1
Bug 1224726 - Do not attempt to parse source file when finding if text > 1MB;r=jlongster

diff --git a/devtools/client/debugger/debugger-view.js b/devtools/client/debugger/debugger-view.js
--- a/devtools/client/debugger/debugger-view.js
+++ b/devtools/client/debugger/debugger-view.js
@@ -1,16 +1,16 @@
 /* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
-const SOURCE_SYNTAX_HIGHLIGHT_MAX_FILE_SIZE = 1048576; // 1 MB in bytes
+const LARGE_FILE_SIZE = 1048576; // 1 MB in bytes
 const SOURCE_URL_DEFAULT_MAX_LENGTH = 64; // chars
 const STACK_FRAMES_SOURCE_URL_MAX_LENGTH = 15; // chars
 const STACK_FRAMES_SOURCE_URL_TRIM_SECTION = "center";
 const STACK_FRAMES_SCROLL_DELAY = 100; // ms
 const BREAKPOINT_SMALL_WINDOW_WIDTH = 850; // px
 const RESULTS_PANEL_POPUP_POSITION = "before_end";
 const RESULTS_PANEL_MAX_RESULTS = 10;
 const FILE_SEARCH_ACTION_MAX_DELAY = 300; // ms
@@ -42,16 +42,23 @@ var actions = Object.assign(
 );
 var queries = require('./content/queries');
 var constants = require('./content/constants');
 
 /**
  * Object defining the debugger view components.
  */
 var DebuggerView = {
+
+  /**
+   * This is attached so tests can change it without needing to load an
+   * actual large file in automation
+   */
+  LARGE_FILE_SIZE: LARGE_FILE_SIZE,
+
   /**
    * Initializes the debugger view.
    *
    * @return object
    *         A promise that is resolved when the view finishes initializing.
    */
   initialize: function() {
     if (this._hasStartup) {
@@ -405,17 +412,17 @@ var DebuggerView = {
    * @param string aContentType [optional]
    *        The source content type.
    * @param string aTextContent [optional]
    *        The source text content.
    */
   _setEditorMode: function(aUrl, aContentType = "", aTextContent = "") {
     // Avoid setting the editor mode for very large files.
     // Is this still necessary? See bug 929225.
-    if (aTextContent.length >= SOURCE_SYNTAX_HIGHLIGHT_MAX_FILE_SIZE) {
+    if (aTextContent.length >= this.LARGE_FILE_SIZE) {
       return void this.editor.setMode(Editor.modes.text);
     }
 
     // Use JS mode for files with .js and .jsm extensions.
     if (SourceUtils.isJavaScript(aUrl, aContentType)) {
       return void this.editor.setMode(Editor.modes.js);
     }
 
diff --git a/devtools/client/debugger/test/mochitest/browser.ini b/devtools/client/debugger/test/mochitest/browser.ini
--- a/devtools/client/debugger/test/mochitest/browser.ini
+++ b/devtools/client/debugger/test/mochitest/browser.ini
@@ -441,16 +441,17 @@ skip-if = e10s # Bug 1093535
 skip-if = e10s && debug
 [browser_dbg_sources-eval-01.js]
 skip-if = true # non-named eval sources turned off for now, bug 1124106
 [browser_dbg_sources-eval-02.js]
 [browser_dbg_sources-keybindings.js]
 skip-if = e10s && debug
 [browser_dbg_sources-labels.js]
 skip-if = e10s && debug
+[browser_dbg_sources-large.js]
 [browser_dbg_sources-sorting.js]
 skip-if = e10s && debug
 [browser_dbg_sources-bookmarklet.js]
 skip-if = e10s && debug
 [browser_dbg_split-console-paused-reload.js]
 skip-if = e10s && debug
 [browser_dbg_stack-01.js]
 skip-if = e10s && debug
diff --git a/devtools/client/debugger/test/mochitest/browser_dbg_sources-large.js b/devtools/client/debugger/test/mochitest/browser_dbg_sources-large.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/debugger/test/mochitest/browser_dbg_sources-large.js
@@ -0,0 +1,77 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests that large files are treated differently in the debugger:
+ *   1) Syntax highlighting is turned off
+ *   2) No parsing to determine current symbol is attempted when
+ *      starting a search
+ */
+
+const TAB_URL = EXAMPLE_URL + "doc_function-search.html";
+const TOTAL_SOURCES = 4;
+
+function test() {
+  initDebugger(TAB_URL).then(([aTab, aDebuggee, aPanel]) => {
+    const gTab = aTab;
+    const gDebuggee = aDebuggee;
+    const gPanel = aPanel;
+    const gDebugger = gPanel.panelWin;
+
+    const gEditor = gDebugger.DebuggerView.editor;
+    const gSources = gDebugger.DebuggerView.Sources;
+    const Filtering = gDebugger.DebuggerView.Filtering;
+
+    // Setting max size so that code_function-search-01.js will be
+    // considered a large file on first load
+    gDebugger.DebuggerView.LARGE_FILE_SIZE = 1;
+
+    function testLargeFile() {
+      ok(gEditor.getText().length > gDebugger.DebuggerView.LARGE_FILE_SIZE,
+         "First source is considered a large file.");
+      is(gEditor.getMode().name, "text",
+         "Editor isn't syntax highlighting.");
+      ok(gEditor.getText().includes("First source!"),
+         "Editor text contents appears to be correct.");
+
+      // Press ctrl+f with the cursor in a token
+      gEditor.focus();
+      gEditor.setCursor({ line: 3, ch: 10});
+      synthesizeKeyFromKeyTag(gDebugger.document.getElementById("tokenSearchKey"));
+      is(Filtering._searchbox.value, "#",
+        "Search box is NOT prefilled with current token");
+    }
+
+    function testSmallFile() {
+      ok(gEditor.getText().length < gDebugger.DebuggerView.LARGE_FILE_SIZE,
+         "Second source is considered a small file.");
+      is(gEditor.getMode().name, "javascript",
+         "Editor is syntax highlighting.");
+      ok(gEditor.getText().includes("First source!"),
+         "Editor text contents appears to be correct.");
+
+      // Press ctrl+f with the cursor in a token
+      gEditor.focus();
+      gEditor.setCursor({ line: 3, ch: 10});
+      synthesizeKeyFromKeyTag(gDebugger.document.getElementById("tokenSearchKey"));
+      is(Filtering._searchbox.value, "#test",
+        "Search box is prefilled with current token");
+    }
+
+    Task.spawn(function*() {
+      yield waitForSourceShown(gPanel, "-01.js");
+      yield testLargeFile();
+
+      info("Making it appear as a small file and then reselecting 01.js");
+      gDebugger.DebuggerView.LARGE_FILE_SIZE = 1000;
+      gSources.selectedIndex = 1;
+      yield waitForSourceShown(gPanel, "-02.js");
+      gSources.selectedIndex = 0;
+      yield waitForSourceShown(gPanel, "-01.js");
+
+      yield testSmallFile();
+
+      closeDebuggerAndFinish(gPanel);
+    });
+  });
+}
diff --git a/devtools/client/debugger/views/filter-view.js b/devtools/client/debugger/views/filter-view.js
--- a/devtools/client/debugger/views/filter-view.js
+++ b/devtools/client/debugger/views/filter-view.js
@@ -438,19 +438,21 @@ FilterView.prototype = {
     if (aText) {
       this._searchbox.value = aOperator + aText;
       return;
     }
     if (this.DebuggerView.editor.somethingSelected()) {
       this._searchbox.value = aOperator + this.DebuggerView.editor.getSelection();
       return;
     }
-    if (SEARCH_AUTOFILL.indexOf(aOperator) != -1) {
+
+    let content = this.DebuggerView.editor.getText();
+    if (content.length < this.DebuggerView.LARGE_FILE_SIZE &&
+        SEARCH_AUTOFILL.indexOf(aOperator) != -1) {
       let cursor = this.DebuggerView.editor.getCursor();
-      let content = this.DebuggerView.editor.getText();
       let location = this.DebuggerView.Sources.selectedItem.attachment.source.url;
       let source = this.Parser.get(content, location);
       let identifier = source.getIdentifierAt({ line: cursor.line+1, column: cursor.ch });
 
       if (identifier && identifier.name) {
         this._searchbox.value = aOperator + identifier.name;
         this._searchbox.select();
         this._searchbox.selectionStart += aOperator.length;
