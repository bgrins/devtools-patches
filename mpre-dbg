# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  ee8b0e8a65dd15a6592c6206cfc90fea52ee2886

diff --git a/browser/components/search/content/search.xml b/browser/components/search/content/search.xml
--- a/browser/components/search/content/search.xml
+++ b/browser/components/search/content/search.xml
@@ -1027,17 +1027,19 @@
         }
 
         // Show the current default engine in the top header of the panel.
         this.updateHeader();
       ]]></handler>
 
       <handler event="popuphiding"><![CDATA[
         this._isHiding = true;
+        console.log("popuphiding1", this.state);
         Services.tm.dispatchToMainThread(() => {
+        console.log("popuphiding2", this.state);
           this._isHiding = false;
         });
       ]]></handler>
 
       <!-- This handles clicks on the topmost "Foo Search" header in the
            popup (hbox[anonid="searchbar-engine"]). -->
       <handler event="click"><![CDATA[
         if (event.button == 2) {
diff --git a/browser/components/search/content/searchbar.js b/browser/components/search/content/searchbar.js
--- a/browser/components/search/content/searchbar.js
+++ b/browser/components/search/content/searchbar.js
@@ -223,16 +223,20 @@ class MozSearchbar extends MozXULElement
   updateGoButtonVisibility() {
     this.querySelector(".search-go-button").hidden = !this._textbox.value;
   }
 
   openSuggestionsPanel(aShowOnlySettingsIfEmpty) {
     if (this._textbox.open)
       return;
 
+    // this._textbox.popup.addEventListener("popuphiding", e => {
+    //   console.log("HIDING");
+    //   this._hiding = true;
+    // });
     this._textbox.showHistoryPopup();
 
     if (this._textbox.value) {
       // showHistoryPopup does a startSearch("") call, ensure the
       // controller handles the text from the input box instead:
       this._textbox.mController.handleText();
     } else if (aShowOnlySettingsIfEmpty) {
       this.setAttribute("showonlysettings", "true");
@@ -436,32 +440,34 @@ class MozSearchbar extends MozXULElement
       // textbox, that will be taken care of in the click handler.
       if (Services.focus.getLastFocusMethod(window) & Services.focus.FLAG_BYMOUSE)
         return;
 
       this.openSuggestionsPanel();
     }, true);
 
     this.addEventListener("mousedown", (event) => {
-      if (event.originalTarget.classList.contains(".searchbar-search-button")) {
-        this._clickClosedPopup = this._textbox.popup._isHiding;
-      }
-    }, {capture: true, mozSystemGroup: true});
-
-    this.addEventListener("mousedown", (event) => {
       // Ignore clicks on the search go button.
       if (event.originalTarget.classList.contains("search-go-button")) {
         return;
       }
 
       let isIconClick = event.originalTarget.classList.contains("searchbar-search-button");
+      if (isIconClick) {
+        let popupState = this._textbox.popup.state;
+        console.log(popupState, this._textbox.popup._isHiding, this._textbox.popup.popupOpen);
+        // if (popupState == "open") {
+        //   console.log("CLOSING");
+        //   // this._textbox.popup.closePopup();
+        // }
+        if (this._textbox.popup._isHiding) {
+          console.log("RETURNING");
 
-      // Ignore clicks on the icon if they were made to close the popup
-      if (isIconClick && this._clickClosedPopup) {
-        return;
+          return;
+        }
       }
 
       // Open the suggestions whenever clicking on the search icon or if there
       // is text in the textbox.
       if (isIconClick || this._textbox.value) {
         this.openSuggestionsPanel(true);
       }
     });
diff --git a/browser/components/search/test/browser_searchbar_openpopup.js b/browser/components/search/test/browser_searchbar_openpopup.js
--- a/browser/components/search/test/browser_searchbar_openpopup.js
+++ b/browser/components/search/test/browser_searchbar_openpopup.js
@@ -127,16 +127,17 @@ add_no_popup_task(async function open_ic
   promise = promiseEvent(toolbarPopup, "popuphidden");
   toolbarPopup.hidePopup();
   await promise;
 });
 
 // With no text in the search box left clicking the icon should open the popup.
 // Clicking the icon again should hide the popup and not show it again.
 add_task(async function open_empty() {
+
   gURLBar.focus();
 
   let promise = promiseEvent(searchPopup, "popupshown");
   info("Clicking icon");
   EventUtils.synthesizeMouseAtCenter(searchIcon, {});
   await promise;
   is(searchPopup.getAttribute("showonlysettings"), "true", "Should only show the settings");
   is(textbox.mController.searchString, "", "Should be an empty search string");
