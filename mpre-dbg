# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  468df148a17744790f3ea964348dcfd4783552ca

diff --git a/browser/components/search/content/searchbar.js b/browser/components/search/content/searchbar.js
--- a/browser/components/search/content/searchbar.js
+++ b/browser/components/search/content/searchbar.js
@@ -436,39 +436,42 @@ class MozSearchbar extends MozXULElement
       // textbox, that will be taken care of in the click handler.
       if (Services.focus.getLastFocusMethod(window) & Services.focus.FLAG_BYMOUSE)
         return;
 
       this.openSuggestionsPanel();
     }, true);
 
     this.addEventListener("mousedown", (event) => {
+      console.log(event.originalTarget, this._textbox.popup._isHiding, this._textbox.popup.state, this._textbox.popup.isOpen);
       if (event.originalTarget.classList.contains(".searchbar-search-button")) {
         this._clickClosedPopup = this._textbox.popup._isHiding;
+        this._isOpen = this._textbox.popup.isOpen;
       }
-    }, {capture: true, mozSystemGroup: true});
+    }, { capture: true, mozSystemGroup: true});
 
     this.addEventListener("mousedown", (event) => {
+      console.log(event.originalTarget, this._textbox.popup._isHiding, this._isOpen);
       // Ignore clicks on the search go button.
       if (event.originalTarget.classList.contains("search-go-button")) {
         return;
       }
 
       let isIconClick = event.originalTarget.classList.contains("searchbar-search-button");
 
       // Ignore clicks on the icon if they were made to close the popup
-      if (isIconClick && this._clickClosedPopup) {
+      if (isIconClick && (this._clickClosedPopup || this._textbox.popup._isHiding)) {
         return;
       }
 
       // Open the suggestions whenever clicking on the search icon or if there
       // is text in the textbox.
       if (isIconClick || this._textbox.value) {
         this.openSuggestionsPanel(true);
       }
-    });
+    }, { mozSystemGroup: true });
 
   }
 }
 
 customElements.define("searchbar", MozSearchbar);
 
 }
diff --git a/browser/components/search/test/browser_searchbar_openpopup.js b/browser/components/search/test/browser_searchbar_openpopup.js
--- a/browser/components/search/test/browser_searchbar_openpopup.js
+++ b/browser/components/search/test/browser_searchbar_openpopup.js
@@ -127,37 +127,41 @@ add_no_popup_task(async function open_ic
   promise = promiseEvent(toolbarPopup, "popuphidden");
   toolbarPopup.hidePopup();
   await promise;
 });
 
 // With no text in the search box left clicking the icon should open the popup.
 // Clicking the icon again should hide the popup and not show it again.
 add_task(async function open_empty() {
+
+  await new Promise(r=>r);
   gURLBar.focus();
 
   let promise = promiseEvent(searchPopup, "popupshown");
   info("Clicking icon");
   EventUtils.synthesizeMouseAtCenter(searchIcon, {});
   await promise;
   is(searchPopup.getAttribute("showonlysettings"), "true", "Should only show the settings");
   is(textbox.mController.searchString, "", "Should be an empty search string");
 
   // By giving the textbox some text any next attempt to open the search popup
   // from the click handler will try to search for this text.
   textbox.value = "foo";
 
   promise = promiseEvent(searchPopup, "popuphidden");
 
+  await new Promise(r=>setTimeout(r, 1000));
   info("Hiding popup");
   await synthesizeNativeMouseClick(searchIcon);
   await promise;
 
   is(textbox.mController.searchString, "", "Should not have started to search for the new text");
 
+  await new Promise(r=>r);
   // Cancel the search if it started.
   if (textbox.mController.searchString != "") {
     textbox.mController.stopSearch();
   }
 
   textbox.value = "";
 });
 
