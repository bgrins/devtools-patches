# HG changeset patch
# User Gabriel Luong <gabriel.luong@gmail.com>
# Parent  e9af1f4fbf6477dc7577e1031ebc65bd15992bea
Bug 1120616 - Part 3: Adjust the styles in the computed view's filter style search r=bgrins

diff --git a/browser/devtools/styleinspector/computed-view.js b/browser/devtools/styleinspector/computed-view.js
--- a/browser/devtools/styleinspector/computed-view.js
+++ b/browser/devtools/styleinspector/computed-view.js
@@ -147,26 +147,24 @@
   this.focusWindow = this.focusWindow.bind(this);
   this._onContextMenu = this._onContextMenu.bind(this);
   this._contextMenuUpdate = this._contextMenuUpdate.bind(this);
   this._onSelectAll = this._onSelectAll.bind(this);
   this._onClick = this._onClick.bind(this);
   this._onCopy = this._onCopy.bind(this);
   this._onCopyColor = this._onCopyColor.bind(this);

-  this.styleDocument.addEventListener("copy", this._onCopy);
-  this.styleDocument.addEventListener("mousedown", this.focusWindow);
-  this.styleDocument.addEventListener("contextmenu", this._onContextMenu);
-
   // Nodes used in templating
   this.root = this.styleDocument.getElementById("root");
   this.templateRoot = this.styleDocument.getElementById("templateRoot");
   this.element = this.styleDocument.getElementById("propertyContainer");

-  // Listen for click events
+  this.styleDocument.addEventListener("copy", this._onCopy);
+  this.styleDocument.addEventListener("mousedown", this.focusWindow);
+  this.element.addEventListener("contextmenu", this._onContextMenu);
   this.element.addEventListener("click", this._onClick, false);

   // No results text.
   this.noResults = this.styleDocument.getElementById("noResults");

   // Refresh panel when color unit changed.
   this._handlePrefChange = this._handlePrefChange.bind(this);
   gDevTools.on("pref-changed", this._handlePrefChange);
@@ -491,16 +489,23 @@
       let deferred = promise.defer();
       this._refreshProcess = new UpdateProcess(this.styleWindow, this.propertyViews, {
         onItem: (aPropView) => {
           aPropView.refresh();
         },
         onDone: () => {
           this._refreshProcess = null;
           this.noResults.hidden = this.numVisibleProperties > 0;
+
+          if (this.searchField.value.length > 0 && !this.numVisibleProperties) {
+            this.searchField.classList.add("devtools-style-searchbox-no-match");
+          } else {
+            this.searchField.classList.remove("devtools-style-searchbox-no-match");
+          }
+
           this.inspector.emit("computed-view-refreshed");
           deferred.resolve(undefined);
         }
       });
       this._refreshProcess.schedule();
       return deferred.promise;
     }).then(null, (err) => console.error(err));
   },
@@ -513,20 +518,29 @@
   filterChanged: function CssHtmlTree_filterChanged(aEvent)
   {
     let win = this.styleWindow;

     if (this._filterChangedTimeout) {
       win.clearTimeout(this._filterChangedTimeout);
     }

+    let filterTimeout = (this.searchField.value.length > 0) ? FILTER_CHANGED_TIMEOUT : 0;
+
     this._filterChangedTimeout = win.setTimeout(() => {
+      if (this.searchField.value.length > 0) {
+        this.searchField.setAttribute("filled", true);
+      } else {
+        this.searchField.removeAttribute("filled");
+        this.searchField.classList.remove("devtools-style-searchbox-no-match");
+      }
+
       this.refreshPanel();
       this._filterChangeTimeout = null;
-    }, FILTER_CHANGED_TIMEOUT);
+    }, filterTimeout);
   },

   /**
    * The change event handler for the includeBrowserStyles checkbox.
    *
    * @param {Event} aEvent the DOM Event object.
    */
   includeBrowserStylesChanged:
diff --git a/browser/devtools/styleinspector/computedview.xhtml b/browser/devtools/styleinspector/computedview.xhtml
--- a/browser/devtools/styleinspector/computedview.xhtml
+++ b/browser/devtools/styleinspector/computedview.xhtml
@@ -44,45 +44,47 @@
           this.computedview.destroy();
         }
       }
     </script>
   </head>

   <body>

+    <!-- The output from #templateRoot (below) is inserted here. -->
+    <div id="root" class="devtools-monospace">
+    </div>
+
     <!-- The output from #templateProperty (below) is appended here. -->
     <div id="propertyContainer" class="devtools-monospace">
     </div>

     <!-- When no properties are found the following block is displayed. -->
     <div id="noResults" hidden="">
       &noPropertiesFound;
     </div>

-    <!-- The output from #templateRoot (below) is inserted here. -->
-    <div id="root" class="devtools-monospace"></div>
-
     <!--
     To visually debug the templates without running firefox, alter the display:none
     -->
     <div style="display:none;">
       <!--
       templateRoot sits at the top of the window and contains the "include default
       styles" checkbox. For data it needs an instance of CssHtmlTree.
       -->
       <div id="templateRoot">
         <xul:hbox class="devtools-toolbar" flex="1" align="center">
+          <xul:textbox class="devtools-searchinput devtools-style-searchbox"
+                       type="search" save="${searchField}"
+                       placeholder="&userStylesSearch;" flex="1"
+                       oncommand="${filterChanged}"/>
           <xul:checkbox class="includebrowserstyles"
                         save="${includeBrowserStylesCheckbox}"
                         oncommand="${includeBrowserStylesChanged}" checked="false"
                         label="&browserStylesLabel;"/>
-          <xul:textbox class="devtools-searchinput" type="search" save="${searchField}"
-                      placeholder="&userStylesSearch;" flex="1"
-                      oncommand="${filterChanged}"/>
         </xul:hbox>
       </div>


       <!--
       A templateMatchedSelectors sits inside each templateProperties showing the
       list of selectors that affect that property. Each needs data like this:
       {
