# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  ab30809b4c8e53b8723c062340960680ca419c7f
Bug 1392744 - Pass the port along to the browser toolbox chrome uri;r=jryans

This allows multiple browser toolboxes to be opened at once, assuming the host
profiles have different values for devtools.debugger.chrome-debugging-port

diff --git a/devtools/client/framework/ToolboxProcess.jsm b/devtools/client/framework/ToolboxProcess.jsm
--- a/devtools/client/framework/ToolboxProcess.jsm
+++ b/devtools/client/framework/ToolboxProcess.jsm
@@ -140,20 +140,17 @@ BrowserToolboxProcess.prototype = {
     this.debuggerServer.init();
     // We mainly need a root actor and tab actors for opening a toolbox, even
     // against chrome/content/addon. But the "no auto hide" button uses the
     // preference actor, so also register the browser actors.
     this.debuggerServer.registerActors({ root: true, browser: true, tab: true });
     this.debuggerServer.allowChromeProcess = true;
     dumpn("initialized and added the browser actors for the DebuggerServer.");
 
-    let chromeDebuggingPort =
-      Services.prefs.getIntPref("devtools.debugger.chrome-debugging-port");
-    let chromeDebuggingWebSocket =
-      Services.prefs.getBoolPref("devtools.debugger.chrome-debugging-websocket");
+    let {chromeDebuggingPort,chromeDebuggingWebSocket} = this._getConnectionInfo();
     let listener = this.debuggerServer.createListener();
     listener.portOrPath = chromeDebuggingPort;
     listener.webSocket = chromeDebuggingWebSocket;
     listener.open();
 
     dumpn("Finished initializing the chrome toolbox server.");
     dumpn("Started listening on port: " + chromeDebuggingPort);
   },
@@ -195,16 +192,24 @@ BrowserToolboxProcess.prototype = {
     // that, we might as well just flush directly to the new profile, which
     // always works:
     Services.prefs.savePrefFile(prefsFile);
 
     dumpn("Finished creating the chrome toolbox user profile at: " +
           this._dbgProfilePath);
   },
 
+  _getConnectionInfo() {
+    let chromeDebuggingPort =
+      Services.prefs.getIntPref("devtools.debugger.chrome-debugging-port");
+    let chromeDebuggingWebSocket =
+      Services.prefs.getBoolPref("devtools.debugger.chrome-debugging-websocket");
+    return {chromeDebuggingPort, chromeDebuggingWebSocket};
+  },
+
   /**
    * Originally, the profile was placed in `ProfLD` instead of `ProfD`.  On some systems,
    * such as macOS, `ProfLD` is in the user's Caches directory, which is not an
    * appropriate place to store supposedly persistent profile data.
    */
   _migrateProfileDir() {
     let oldDebuggingProfileDir = Services.dirsvc.get("ProfLD", Ci.nsIFile);
     let newDebuggingProfileDir = Services.dirsvc.get("ProfD", Ci.nsIFile);
@@ -237,20 +242,21 @@ BrowserToolboxProcess.prototype = {
   /**
    * Creates and initializes the profile & process for the remote debugger.
    */
   _create: function () {
     dumpn("Initializing chrome debugging process.");
 
     let command = Services.dirsvc.get("XREExeF", Ci.nsIFile).path;
 
-    let xulURI = DBG_XUL;
+    let {chromeDebuggingPort} = this._getConnectionInfo();
+    let xulURI = `${DBG_XUL}?port=${chromeDebuggingPort}`;
 
     if (this._options.addonID) {
-      xulURI += "?addonID=" + this._options.addonID;
+      xulURI += `&addonID=${this._options.addonID}`;
     }
 
     dumpn("Running chrome debugging process.");
     let args = [
       "-no-remote",
       "-foreground",
       "-profile", this._dbgProfilePath,
       "-chrome", xulURI
diff --git a/devtools/client/framework/toolbox-process-window.js b/devtools/client/framework/toolbox-process-window.js
--- a/devtools/client/framework/toolbox-process-window.js
+++ b/devtools/client/framework/toolbox-process-window.js
@@ -28,20 +28,22 @@ var Prefs = new PrefsHelper("devtools.de
   chromeDebuggingPort: ["Int", "chrome-debugging-port"],
   chromeDebuggingWebSocket: ["Bool", "chrome-debugging-websocket"],
 });
 
 var gToolbox, gClient;
 
 var connect = Task.async(function* () {
   window.removeEventListener("load", connect);
+
   // Initiate the connection
+  const params = new URLSearchParams(window.location.search);
   let transport = yield DebuggerClient.socketConnect({
     host: Prefs.chromeDebuggingHost,
-    port: Prefs.chromeDebuggingPort,
+    port: params.get("port") || Prefs.chromeDebuggingPort,
     webSocket: Prefs.chromeDebuggingWebSocket,
   });
   gClient = new DebuggerClient(transport);
   yield gClient.connect();
   let addonID = getParameterByName("addonID");
 
   if (addonID) {
     let { addons } = yield gClient.listAddons();
