# HG changeset patch
# Parent 162e125d88e492486a8154ae0d65cc8785147d76
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 1011116 - Reselect file in tree after folder is selected and file gets refocused;r=harth

diff --git a/browser/devtools/projecteditor/lib/editors.js b/browser/devtools/projecteditor/lib/editors.js
--- a/browser/devtools/projecteditor/lib/editors.js
+++ b/browser/devtools/projecteditor/lib/editors.js
@@ -163,23 +163,26 @@ var TextEditor = Class({
     this.editor = new Editor({
       mode: mode,
       lineNumbers: true,
       extraKeys: this.extraKeys,
       themeSwitching: false,
       autocomplete: true
     });
 
-    // Trigger editor specific events on `this`
+    // Trigger a few editor specific events on `this`.
     this.editor.on("change", (...args) => {
       this.emit("change", ...args);
     });
     this.editor.on("cursorActivity", (...args) => {
       this.emit("cursorActivity", ...args);
     });
+    this.editor.on("focus", (...args) => {
+      this.emit("focus", ...args);
+    });
 
     this.appended = this.editor.appendTo(this.elt);
   },
 
   /**
    * Clean up the editor.  This can have different meanings
    * depending on the type of editor.
    */
diff --git a/browser/devtools/projecteditor/lib/projecteditor.js b/browser/devtools/projecteditor/lib/projecteditor.js
--- a/browser/devtools/projecteditor/lib/projecteditor.js
+++ b/browser/devtools/projecteditor/lib/projecteditor.js
@@ -381,18 +381,19 @@ var ProjectEditor = Class({
 
   /**
    * Open a resource in a particular shell.
    *
    * @param Resource resource
    *                 The file to be opened.
    */
   openResource: function(resource) {
-    this.shells.open(resource);
+    let shell = this.shells.open(resource);
     this.projectTree.selectResource(resource);
+    shell.editor.focus();
   },
 
   /**
    * When a node is selected in the tree, open its associated editor.
    *
    * @param Resource resource
    *                 The file that has been selected
    */
@@ -541,16 +542,20 @@ var ProjectEditor = Class({
    *               The new editor instance.
    */
   _onEditorCreated: function(editor) {
     this.pluginDispatch("onEditorCreated", editor);
     this._editorListenAndDispatch(editor, "change", "onEditorChange");
     this._editorListenAndDispatch(editor, "cursorActivity", "onEditorCursorActivity");
     this._editorListenAndDispatch(editor, "load", "onEditorLoad");
     this._editorListenAndDispatch(editor, "save", "onEditorSave");
+
+    editor.on("focus", () => {
+      this.projectTree.selectResource(this.resourceFor(editor));
+    });
   },
 
   /**
    * Dispatch an onEditorActivated event and finish setting up once the
    * editor is ready to use.
    *
    * @param Editor editor
    *               The editor instance, which is now appended in the document.
@@ -579,18 +584,16 @@ var ProjectEditor = Class({
    * Also emits the same handler name on `this`.
    *
    * @param string handler
    *               Which function name to call on plugins.
    * @param ...args args
    *                All remaining parameters are passed into the handler.
    */
   pluginDispatch: function(handler, ...args) {
-    // XXX: Memory leak when console.log an Editor here
-    // console.log("DISPATCHING EVENT TO PLUGIN", handler, args);
     emit(this, handler, ...args);
     this.plugins.forEach(plugin => {
       try {
         if (handler in plugin) plugin[handler](...args);
       } catch(ex) {
         console.error(ex);
       }
     })
@@ -603,18 +606,16 @@ var ProjectEditor = Class({
    * @param Editor editor
    *               Which editor to listen to
    * @param string event
    *               Which editor event to listen for
    * @param string handler
    *               Which plugin method to call
    */
   _editorListenAndDispatch: function(editor, event, handler) {
-    /// XXX: Uncommenting this line also causes memory leak.
-    // console.log("Binding listen and dispatch", editor);
     editor.on(event, (...args) => {
       this.pluginDispatch(handler, editor, this.resourceFor(editor), ...args);
     });
   },
 
   /**
    * Find a shell for a resource.
    *
diff --git a/browser/devtools/projecteditor/test/browser.ini b/browser/devtools/projecteditor/test/browser.ini
--- a/browser/devtools/projecteditor/test/browser.ini
+++ b/browser/devtools/projecteditor/test/browser.ini
@@ -11,9 +11,10 @@ support-files =
 [browser_projecteditor_editors_image.js]
 [browser_projecteditor_external_change.js]
 [browser_projecteditor_immediate_destroy.js]
 [browser_projecteditor_init.js]
 [browser_projecteditor_menubar_01.js]
 [browser_projecteditor_menubar_02.js]
 [browser_projecteditor_new_file.js]
 [browser_projecteditor_stores.js]
-[browser_projecteditor_tree_selection.js]
+[browser_projecteditor_tree_selection_01.js]
+[browser_projecteditor_tree_selection_02.js]
diff --git a/browser/devtools/projecteditor/test/browser_projecteditor_tree_selection.js b/browser/devtools/projecteditor/test/browser_projecteditor_tree_selection_01.js
rename from browser/devtools/projecteditor/test/browser_projecteditor_tree_selection.js
rename to browser/devtools/projecteditor/test/browser_projecteditor_tree_selection_01.js
--- a/browser/devtools/projecteditor/test/browser_projecteditor_tree_selection.js
+++ b/browser/devtools/projecteditor/test/browser_projecteditor_tree_selection_01.js
@@ -54,16 +54,33 @@ function selectFileFirstLoad(projectedit
 function selectFileSubsequentLoad(projecteditor, resource) {
   ok (resource && resource.path, "A valid resource has been passed in for selection " + (resource && resource.path));
   projecteditor.projectTree.selectResource(resource);
 
   if (resource.isDir) {
     return;
   }
 
+  // Make sure text editors are focused immediately when selected.
+  let focusPromise = promise.resolve();
+  if (projecteditor.currentEditor.editor) {
+    focusPromise = onEditorFocus(projecteditor.currentEditor);
+  }
+
   // Only activated should fire the next time
   // (may add load() if we begin checking for changes from disk)
   let [editorActivated] = yield promise.all([
     onceEditorActivated(projecteditor)
   ]);
 
   is (editorActivated, projecteditor.currentEditor,  "Editor has been activated for " + resource.path);
+
+  yield focusPromise;
 }
+
+function onEditorFocus(editor) {
+  let def = promise.defer();
+  editor.on("focus", function focus() {
+    editor.off("focus", focus);
+    def.resolve();
+  });
+  return def.promise;
+}
diff --git a/browser/devtools/projecteditor/test/browser_projecteditor_tree_selection_02.js b/browser/devtools/projecteditor/test/browser_projecteditor_tree_selection_02.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/projecteditor/test/browser_projecteditor_tree_selection_02.js
@@ -0,0 +1,70 @@
+/* vim: set ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+ http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Test that files get reselected in the tree when their editor
+// is focused.  https://bugzilla.mozilla.org/show_bug.cgi?id=1011116.
+
+let test = asyncTest(function*() {
+  let projecteditor = yield addProjectEditorTabForTempDirectory();
+  let TEMP_PATH = projecteditor.project.allPaths()[0];
+
+  is (getTempFile("").path, TEMP_PATH, "Temp path is set correctly.");
+
+  ok (projecteditor.currentEditor, "There is an editor for projecteditor");
+  let resources = projecteditor.project.allResources();
+
+  is (
+    resources.map(r=>r.basename).join("|"),
+    "ProjectEditor|css|styles.css|data|img|icons|128x128.png|16x16.png|32x32.png|vector.svg|fake.png|js|script.js|index.html|LICENSE|README.md",
+    "Resources came through in proper order"
+  );
+
+  for (let i = 0; i < resources.length; i++){
+    yield selectAndRefocusFile(projecteditor, resources[i]);
+  }
+});
+
+function selectAndRefocusFile(projecteditor, resource) {
+  ok (resource && resource.path, "A valid resource has been passed in for selection " + (resource && resource.path));
+  projecteditor.projectTree.selectResource(resource);
+
+  if (resource.isDir) {
+    return;
+  }
+
+  let [editorCreated, editorLoaded, editorActivated] = yield promise.all([
+    onceEditorCreated(projecteditor),
+    onceEditorLoad(projecteditor),
+    onceEditorActivated(projecteditor)
+  ]);
+
+  if (projecteditor.currentEditor.editor) {
+    // This is a text editor.  Go ahead and select a directory then refocus
+    // the editor to make sure it is reselected in tree.
+    let treeContainer = projecteditor.projectTree.getViewContainer(getDirectoryInStore(resource));
+    treeContainer.line.click();
+    EventUtils.synthesizeMouseAtCenter(treeContainer.elt, {}, treeContainer.elt.ownerDocument.defaultView);
+    let waitForTreeSelect = onTreeSelection(projecteditor);
+    projecteditor.currentEditor.focus();
+    yield waitForTreeSelect;
+
+    is (projecteditor.projectTree.getSelectedResource(), resource, "The resource gets reselected in the tree");
+  }
+}
+
+// Return a directory to select in the tree.
+function getDirectoryInStore(resource) {
+  return resource.store.root.childrenSorted.filter(r=>r.isDir)[0];
+}
+
+function onTreeSelection(projecteditor) {
+  let def = promise.defer();
+  projecteditor.projectTree.on("selection", function selection() {
+    projecteditor.projectTree.off("focus", selection);
+    def.resolve();
+  });
+  return def.promise;
+}
