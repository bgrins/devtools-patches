# HG changeset patch
# User jarjun <arjun.jain@duke.edu>

Bug 1039482 - Changed font copying, DOM structure changed for rename and new file, added invisible arrow expander, and fixed tests. r=bgrins

---
 devtools/client/projecteditor/lib/tree.js          | 41 +++++++++++++++++++---
 .../test/browser_projecteditor_rename_file.js      |  2 +-
 devtools/client/shared/inplace-editor.js           | 10 ++++--
 .../client/themes/projecteditor/projecteditor.css  |  2 +-
 4 files changed, 47 insertions(+), 8 deletions(-)

diff --git a/devtools/client/projecteditor/lib/tree.js b/devtools/client/projecteditor/lib/tree.js
index 3369ddf..ea8fcc5 100644
--- a/devtools/client/projecteditor/lib/tree.js
+++ b/devtools/client/projecteditor/lib/tree.js
@@ -227,6 +227,25 @@ var TreeView = Class({
   },
 
   /**
+   * Helper function to create DOM elements for promptNew and promptEdit
+   */
+  createInputContainer: function() {
+    let inputholder = this.doc.createElementNS(HTML_NS, "div");
+    inputholder.className = "child entry";
+
+    let expander = this.doc.createElementNS(HTML_NS, "span");
+    expander.className = "arrow expander";
+    expander.setAttribute("invisible", "");
+    inputholder.appendChild(expander);
+
+    let placeholder = this.doc.createElementNS(HTML_NS, "div");
+    placeholder.className = "child";
+    inputholder.appendChild(placeholder);
+
+    return {inputholder, placeholder};
+  },
+
+  /**
    * Prompt the user to create a new file in the tree.
    *
    * @param string initial
@@ -246,9 +265,9 @@ var TreeView = Class({
     let parentContainer = this._containers.get(parent);
     let item = this.doc.createElement("li");
     item.className = "child";
-    let placeholder = this.doc.createElementNS(HTML_NS, "div");
-    placeholder.className = "child";
-    item.appendChild(placeholder);
+
+    let {inputholder,placeholder} = this.createInputContainer();
+    item.appendChild(inputholder);
 
     let children = parentContainer.children;
     sibling = sibling ? this._containers.get(sibling).elt : null;
@@ -257,6 +276,7 @@ var TreeView = Class({
     new InplaceEditor({
       element: placeholder,
       initial: initial,
+      preserveTextStyles: true,
       start: editor => {
         editor.input.select();
       },
@@ -289,15 +309,28 @@ var TreeView = Class({
    */
   promptEdit: function(initial, resource) {
     let deferred = promise.defer();
-    let placeholder = this._containers.get(resource).elt;
+    let item = this._containers.get(resource).elt;
+    let originalText = item.childNodes[0];
+
+    let {inputholder,placeholder} = this.createInputContainer();
+    item.insertBefore(inputholder, originalText);
+
+    item.removeChild(originalText);
 
     new InplaceEditor({
       element: placeholder,
       initial: initial,
+      preserveTextStyles: true,
       start: editor => {
         editor.input.select();
       },
       done: function(val, commit) {
+        if (val === initial) {
+          item.insertBefore(originalText, inputholder);
+        }
+
+        item.removeChild(inputholder);
+
         if (commit) {
           deferred.resolve(val);
         } else {
diff --git a/devtools/client/projecteditor/test/browser_projecteditor_rename_file.js b/devtools/client/projecteditor/test/browser_projecteditor_rename_file.js
index 0654609..76488bc 100644
--- a/devtools/client/projecteditor/test/browser_projecteditor_rename_file.js
+++ b/devtools/client/projecteditor/test/browser_projecteditor_rename_file.js
@@ -72,7 +72,7 @@ function renameWithContextMenu(projecteditor, container, newName) {
 
     renameCommand.click();
     popup.hidePopup();
-    let input = container.elt.previousElementSibling;
+    let input = container.elt.childNodes[0].childNodes[1];
     input.value = resource.basename + newName;
     EventUtils.synthesizeKey("VK_RETURN", {}, projecteditor.window);
   });
diff --git a/devtools/client/shared/inplace-editor.js b/devtools/client/shared/inplace-editor.js
index 88e00a3..cc30725 100644
--- a/devtools/client/shared/inplace-editor.js
+++ b/devtools/client/shared/inplace-editor.js
@@ -94,6 +94,8 @@ Cu.import("resource://gre/modules/devtools/shared/event-emitter.js");
  *      defaults to false
  *    {Boolean} trimOutput: Should the returned string be trimmed?
  *      defaults to true
+ *    {Boolean} preserveTextStyles: Calls copyTextStyles when false, does not when true.
+ *      defaults to false
  */
 function editableField(options) {
   return editableItem(options, function(element, event) {
@@ -206,6 +208,9 @@ function InplaceEditor(options, event) {
   this.contentType = options.contentType || CONTENT_TYPES.PLAIN_TEXT;
   this.property = options.property;
   this.popup = options.popup;
+  this.preserveTextStyles = options.preserveTextStyles === undefined
+                          ? false
+                          : !!options.preserveTextStyles;
 
   this._onBlur = this._onBlur.bind(this);
   this._onKeyPress = this._onKeyPress.bind(this);
@@ -285,8 +290,9 @@ InplaceEditor.prototype = {
     this.input.inplaceEditor = this;
     this.input.classList.add("styleinspector-propertyeditor");
     this.input.value = this.initial;
-
-    copyTextStyles(this.elt, this.input);
+    if (!this.preserveTextStyles) {
+      copyTextStyles(this.elt, this.input);
+    }
   },
 
   /**
diff --git a/devtools/client/themes/projecteditor/projecteditor.css b/devtools/client/themes/projecteditor/projecteditor.css
index 9ea540e..bf87e40 100644
--- a/devtools/client/themes/projecteditor/projecteditor.css
+++ b/devtools/client/themes/projecteditor/projecteditor.css
@@ -57,7 +57,7 @@
 }
 
 .sources-tree input {
-  margin: 2px;
+  margin: -1px;
   border: 1px solid gray;
 }
 
-- 
2.1.3.36.g8e36a6d

