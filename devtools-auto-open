# HG changeset patch
# Parent aa9e7295c850b54cfce17aacdf575798bf759da5
# User Brian Grinstead <bgrinstead@mozilla.com>
Auto open devtools

diff --git a/browser/devtools/devtools-clhandler.js b/browser/devtools/devtools-clhandler.js
--- a/browser/devtools/devtools-clhandler.js
+++ b/browser/devtools/devtools-clhandler.js
@@ -12,22 +12,26 @@ Cu.import("resource://gre/modules/XPCOMU
 XPCOMUtils.defineLazyModuleGetter(this, "Services", "resource://gre/modules/Services.jsm");
 
 function devtoolsCommandlineHandler() {
 }
 devtoolsCommandlineHandler.prototype = {
   handle: function(cmdLine) {
     let consoleFlag = cmdLine.handleFlag("jsconsole", false);
     let debuggerFlag = cmdLine.handleFlag("jsdebugger", false);
+    let toolboxFlag = cmdLine.handleFlagWithParam("toolbox", false)
     if (consoleFlag) {
       this.handleConsoleFlag(cmdLine);
     }
     if (debuggerFlag) {
       this.handleDebuggerFlag(cmdLine);
     }
+    if(toolboxFlag !== false) {
+      this.handleToolboxFlag(toolboxFlag);
+    }
   },
 
   handleConsoleFlag: function(cmdLine) {
     let window = Services.wm.getMostRecentWindow("devtools:webconsole");
     if (!window) {
       let devtools = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools;
       // Load the browser devtools main module as the loader's main module.
       Cu.import("resource:///modules/devtools/gDevTools.jsm");
@@ -37,16 +41,31 @@ devtoolsCommandlineHandler.prototype = {
     } else {
       window.focus(); // the Browser Console was already open
     }
 
     if (cmdLine.state == Ci.nsICommandLine.STATE_REMOTE_AUTO) {
       cmdLine.preventDefault = true;
     }
   },
+  
+  handleToolboxFlag: function(toolboxFlag) {
+    Services.obs.addObserver(onDocumentCreated, "content-document-global-created", false);
+    function onDocumentCreated(){
+      let gDevTools = Cu.import("resource:///modules/devtools/gDevtools.jsm", {}).gDevTools;
+      let devtools = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools;
+      let console = Cu.import("resource://gre/modules/devtools/Console.jsm", {}).console;
+  
+      let window = Services.wm.getMostRecentWindow("navigator:browser");
+      let target = devtools.TargetFactory.forTab(window.gBrowser.selectedTab);
+      let toolbox = gDevTools.getToolbox(target);
+      
+      gDevTools.showToolbox(target, toolboxFlag);
+    };
+  },
 
   handleDebuggerFlag: function(cmdLine) {
     let remoteDebuggingEnabled = false;
     try {
       remoteDebuggingEnabled = kDebuggerPrefs.every((pref) => Services.prefs.getBoolPref(pref));
     } catch (ex) {
       Cu.reportError(ex);
       return;
