# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  e00942169a4739244cd7a54e49558e972ed70250
Bug 1497599 - delay connectedCallback when possible for progressmeter;r=paolo

Doing this for textbox surfaced a potential issue with delayConnectedCallback, where
a caller from a XBL constructor expected the connectedCallback to have run. So
we now don't delay connectedCallback if

diff --git a/toolkit/content/customElements.js b/toolkit/content/customElements.js
--- a/toolkit/content/customElements.js
+++ b/toolkit/content/customElements.js
@@ -44,19 +44,28 @@ class MozXULElement extends XULElement {
    *
    *    if (this.delayConnectedCallback()) { return }
    *
    * And this at the beginning of your `attributeChangedCallback`
    *
    *    if (!this.isConnectedAndReady) { return; }
    */
   delayConnectedCallback() {
+    console.log("gIsDOMContentLoaded?", gIsDOMContentLoaded, this)
+    // If we are done with the parse, then proceed with connectionCallback as normal:
     if (gIsDOMContentLoaded) {
       return false;
     }
+
+    // If we are getting connected as a result of XBL content, it's likely
+    // that the constructor will expect us to have already run our connected logic:
+    if (document.getBindingParent(this)) {
+      return false;
+    }
+
     gElementsPendingConnection.add(this);
     return true;
   }
 
   get isConnectedAndReady() {
     return gIsDOMContentLoaded && this.isConnected;
   }
 
diff --git a/toolkit/content/tests/chrome/test_custom_element_delay_connection.xul b/toolkit/content/tests/chrome/test_custom_element_delay_connection.xul
--- a/toolkit/content/tests/chrome/test_custom_element_delay_connection.xul
+++ b/toolkit/content/tests/chrome/test_custom_element_delay_connection.xul
@@ -10,19 +10,40 @@
   <script type="application/javascript" src="chrome://mochikit/content/tests/SimpleTest/EventUtils.js"></script>
 
   <!-- test results are displayed in the html:body -->
   <body xmlns="http://www.w3.org/1999/xhtml" style="height: 300px; overflow: auto;"/>
 
   <script type="application/javascript"><![CDATA[
   let nativeDOMContentLoadedFired = false;
   document.addEventListener("DOMContentLoaded", () => {
+    ok(gXBLAnonConnectedCallbackRan,
+       "XBL anon content has run connectedCallback in runTests");
     nativeDOMContentLoadedFired = true;
   }, { once: true });
 
+  let gXBLAnonConnectedCallbackRan = false;
+  customElements.define("delayed-connection-in-xbl", class DelayedConnectionInXBL extends MozXULElement {
+    connectedCallback() {
+      ok(!nativeDOMContentLoadedFired);
+      // Skip the element inside the <xbl:binding>:
+      if (this.closest("content")) {
+        return;
+      }
+
+      // We shouldn't ever delay connectedCallback in XBL anon content:
+      if (this.delayConnectedCallback()) {
+        ok(false, "Shouldn't delay in anon content");
+        return;
+      }
+
+      gXBLAnonConnectedCallbackRan = true;
+    }
+  });
+
   // To test `delayConnectedCallback` and `isConnectedAndReady` we have to run this before
   // DOMContentLoaded, which is why this is done in a separate script that runs
   // immediately and not in `runTests`.
   let delayedConnectionPromise = new Promise(resolve => {
 
     let numSkippedAttributeChanges = 0;
     let numDelayedConnections = 0;
     let numDelayedDisconnections = 0;
@@ -88,21 +109,33 @@
     delayedConnection.setAttribute("foo", "bat");
     document.documentElement.append(delayedConnection);
   }
   ]]>
   </script>
 
   <delayed-connection></delayed-connection>
 
+  <bindings xmlns="http://www.mozilla.org/xbl"
+            xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
+    <binding id="binding">
+      <content><xul:delayed-connection-in-xbl></xul:delayed-connection-in-xbl></content>
+    </binding>
+  </bindings>
+  <foo style="-moz-binding: url('#binding');"></foo>
+
   <!-- test code goes here -->
   <script type="application/javascript"><![CDATA[
   SimpleTest.waitForExplicitFinish();
+
   mutateDelayedConnection();
 
+  // Force XBL construction by accessing the DOM node from JS:
+  document.querySelector("foo");
+
   async function runTests() {
     info("Waiting for delayed connection to fire");
     ok(nativeDOMContentLoadedFired,
        "nativeDOMContentLoadedFired is true in runTests");
     await delayedConnectionPromise;
     SimpleTest.finish();
   }
   ]]>
diff --git a/toolkit/content/widgets/progressmeter.js b/toolkit/content/widgets/progressmeter.js
--- a/toolkit/content/widgets/progressmeter.js
+++ b/toolkit/content/widgets/progressmeter.js
@@ -64,16 +64,20 @@ class MozProgressmeter extends MozXULEle
     return val;
   }
 
   isUndetermined() {
     return this.getAttribute("mode") == "undetermined";
   }
 
   connectedCallback() {
+    if (this.delayConnectedCallback()) {
+      return;
+    }
+
     this._initUI();
   }
 
   disconnectedCallback() {
     this.runAnimation = false;
   }
 
   static get observedAttributes() {
