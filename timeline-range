# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  b8b1d58af8c670684b18660ad5f6d6af50031047
Bug 1066504 - Allow timeline range selection after mouseout

diff --git a/browser/devtools/shared/widgets/FlameGraph.jsm b/browser/devtools/shared/widgets/FlameGraph.jsm
--- a/browser/devtools/shared/widgets/FlameGraph.jsm
+++ b/browser/devtools/shared/widgets/FlameGraph.jsm
@@ -145,20 +145,20 @@ function FlameGraph(parent, sharpness) {
     this._onAnimationFrame = this._onAnimationFrame.bind(this);
     this._onMouseMove = this._onMouseMove.bind(this);
     this._onMouseDown = this._onMouseDown.bind(this);
     this._onMouseUp = this._onMouseUp.bind(this);
     this._onMouseWheel = this._onMouseWheel.bind(this);
     this._onResize = this._onResize.bind(this);
     this.refresh = this.refresh.bind(this);
 
-    this._window.addEventListener("mousemove", this._onMouseMove);
-    this._window.addEventListener("mousedown", this._onMouseDown);
-    this._window.addEventListener("mouseup", this._onMouseUp);
-    this._window.addEventListener("MozMousePixelScroll", this._onMouseWheel);
+    // this._window.addEventListener("mousemove", this._onMouseMove);
+    // this._window.addEventListener("mousedown", this._onMouseDown);
+    // this._window.addEventListener("mouseup", this._onMouseUp);
+    // this._window.addEventListener("MozMousePixelScroll", this._onMouseWheel);
 
     let ownerWindow = this._parent.ownerDocument.defaultView;
     ownerWindow.addEventListener("resize", this._onResize);
 
     this._animationId = this._window.requestAnimationFrame(this._onAnimationFrame);
 
     this._ready.resolve(this);
     this.emit("ready", this);
diff --git a/browser/devtools/shared/widgets/Graphs.jsm b/browser/devtools/shared/widgets/Graphs.jsm
--- a/browser/devtools/shared/widgets/Graphs.jsm
+++ b/browser/devtools/shared/widgets/Graphs.jsm
@@ -182,25 +182,23 @@ this.AbstractCanvasGraph = function(pare
     this._selectionDragger = new GraphAreaDragger();
     this._selectionResizer = new GraphAreaResizer();
 
     this._onAnimationFrame = this._onAnimationFrame.bind(this);
     this._onMouseMove = this._onMouseMove.bind(this);
     this._onMouseDown = this._onMouseDown.bind(this);
     this._onMouseUp = this._onMouseUp.bind(this);
     this._onMouseWheel = this._onMouseWheel.bind(this);
-    this._onMouseOut = this._onMouseOut.bind(this);
     this._onResize = this._onResize.bind(this);
     this.refresh = this.refresh.bind(this);
 
     this._window.addEventListener("mousemove", this._onMouseMove);
     this._window.addEventListener("mousedown", this._onMouseDown);
     this._window.addEventListener("mouseup", this._onMouseUp);
     this._window.addEventListener("MozMousePixelScroll", this._onMouseWheel);
-    this._window.addEventListener("mouseout", this._onMouseOut);
 
     let ownerWindow = this._parent.ownerDocument.defaultView;
     ownerWindow.addEventListener("resize", this._onResize);
 
     this._animationId = this._window.requestAnimationFrame(this._onAnimationFrame);
 
     this._ready.resolve(this);
     this.emit("ready", this);
@@ -231,17 +229,16 @@ AbstractCanvasGraph.prototype = {
    */
   destroy: Task.async(function *() {
     yield this.ready();
 
     this._window.removeEventListener("mousemove", this._onMouseMove);
     this._window.removeEventListener("mousedown", this._onMouseDown);
     this._window.removeEventListener("mouseup", this._onMouseUp);
     this._window.removeEventListener("MozMousePixelScroll", this._onMouseWheel);
-    this._window.removeEventListener("mouseout", this._onMouseOut);
 
     let ownerWindow = this._parent.ownerDocument.defaultView;
     if (ownerWindow) {
       ownerWindow.removeEventListener("resize", this._onResize);
     }
 
     this._window.cancelAnimationFrame(this._animationId);
     this._iframe.remove();
@@ -540,16 +537,24 @@ AbstractCanvasGraph.prototype = {
    * @return boolean
    */
   hasSelectionInProgress: function() {
     return this._selection &&
       this._selection.start != null && this._selection.end == null;
   },
 
   /**
+   * Gets whether or not a selection is currently being dragged.
+   * @return boolean
+   */
+  hasSelectionDragInProgress: function() {
+    return this._selectionDragger && this._selectionDragger.origin != null;
+  },
+
+  /**
    * Specifies whether or not mouse selection is allowed.
    * @type boolean
    */
   selectionEnabled: true,
 
   /**
    * Sets the selection bounds.
    * Use `dropCursor` to hide the cursor.
@@ -947,16 +952,23 @@ AbstractCanvasGraph.prototype = {
 
     return { left: x, top: y };
   },
 
   /**
    * Listener for the "mousemove" event on the graph's container.
    */
   _onMouseMove: function(e) {
+    // If a mouseup happened outside the toolbox and the current operation
+    // is causing the selection to be resized or dragged, then end it.
+    if (e.buttons == 0 && (this.hasSelectionInProgress() ||
+                           this.hasSelectionDragInProgress())) {
+      return this._onMouseUp(e);
+    }
+
     let offset = this._getContainerOffset();
     let mouseX = (e.clientX - offset.left) * this._pixelRatio;
     let mouseY = (e.clientY - offset.top) * this._pixelRatio;
     this._cursor.x = mouseX;
     this._cursor.y = mouseY;
 
     let resizer = this._selectionResizer;
     if (resizer.margin != null) {
@@ -1157,33 +1169,16 @@ AbstractCanvasGraph.prototype = {
     }
 
     this._shouldRedraw = true;
     this.emit("selecting");
     this.emit("scroll");
   },
 
   /**
-   * Listener for the "mouseout" event on the graph's container.
-   */
-  _onMouseOut: function() {
-    if (this.hasSelectionInProgress()) {
-      this.dropSelection();
-    }
-
-    this._cursor.x = null;
-    this._cursor.y = null;
-    this._selectionResizer.margin = null;
-    this._selectionDragger.origin = null;
-
-    this._canvas.removeAttribute("input");
-    this._shouldRedraw = true;
-  },
-
-  /**
    * Listener for the "resize" event on the graph's parent node.
    */
   _onResize: function() {
     if (this.hasData()) {
       setNamedTimeout(this._uid, GRAPH_RESIZE_EVENTS_DRAIN, this.refresh);
     }
   }
 };
