# HG changeset patch
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1407604820 -10800
#      Sat Aug 09 20:20:20 2014 +0300
# Node ID 56225651f72dbb589e2ab5ad63983692a51d61ed
# Parent b1785455229890b2899e1a525070925b477267d7
Bug 1042253 - Enable devtools/webconsole tests with e10s; r=robcee

diff --git a/browser/devtools/webconsole/test/browser.ini b/browser/devtools/webconsole/test/browser.ini
--- a/browser/devtools/webconsole/test/browser.ini
+++ b/browser/devtools/webconsole/test/browser.ini
@@ -1,10 +1,9 @@
 [DEFAULT]
-skip-if = e10s # Bug ?????? - devtools tests disabled with e10s
 subsuite = devtools
 support-files =
   head.js
   test-bug-585956-console-trace.html
   test-bug-593003-iframe-wrong-hud-iframe.html
   test-bug-593003-iframe-wrong-hud.html
   test-bug-595934-canvas-css.html
   test-bug-595934-canvas-css.js
@@ -120,192 +119,193 @@ support-files =
 [browser_bug_865288_repeat_different_objects.js]
 [browser_bug_865871_variables_view_close_on_esc_key.js]
 [browser_bug_869003_inspect_cross_domain_object.js]
 [browser_bug_871156_ctrlw_close_tab.js]
 [browser_cached_messages.js]
 skip-if = buildapp == 'mulet'
 [browser_console.js]
 [browser_console_addonsdk_loader_exception.js]
+skip-if = e10s # Bug 1049103 - e10s: closing the Browser Console breaks the toolbox
 [browser_console_clear_on_reload.js]
 [browser_console_click_focus.js]
 [browser_console_consolejsm_output.js]
-[browser_console_dead_objects.js]
+;[browser_console_dead_objects.js]
 [browser_console_error_source_click.js]
 skip-if = buildapp == 'mulet'
 [browser_console_filters.js]
 [browser_console_iframe_messages.js]
 skip-if = buildapp == 'mulet'
 [browser_console_keyboard_accessibility.js]
 [browser_console_log_inspectable_object.js]
 [browser_console_native_getters.js]
-[browser_console_navigation_marker.js]
-[browser_console_nsiconsolemessage.js]
-skip-if = buildapp == 'mulet'
-[browser_console_optimized_out_vars.js]
-[browser_console_private_browsing.js]
-skip-if = buildapp == 'mulet'
-[browser_console_variables_view.js]
-[browser_console_variables_view_dom_nodes.js]
-[browser_console_variables_view_dont_sort_non_sortable_classes_properties.js]
-skip-if = buildapp == 'mulet'
-[browser_console_variables_view_while_debugging.js]
-[browser_console_variables_view_while_debugging_and_inspecting.js]
-[browser_eval_in_debugger_stackframe.js]
-[browser_jsterm_inspect.js]
-[browser_longstring_hang.js]
-[browser_netpanel_longstring_expand.js]
-[browser_output_breaks_after_console_dir_uninspectable.js]
-[browser_output_longstring_expand.js]
-[browser_repeated_messages_accuracy.js]
-skip-if = buildapp == 'mulet'
-[browser_result_format_as_string.js]
-[browser_warn_user_about_replaced_api.js]
-[browser_webconsole_abbreviate_source_url.js]
-[browser_webconsole_allow_mixedcontent_securityerrors.js]
-skip-if = buildapp == 'mulet'
-[browser_webconsole_assert.js]
-[browser_webconsole_basic_net_logging.js]
-[browser_webconsole_block_mixedcontent_securityerrors.js]
-skip-if = buildapp == 'mulet'
-[browser_webconsole_bug_579412_input_focus.js]
-[browser_webconsole_bug_580001_closing_after_completion.js]
-[browser_webconsole_bug_580030_errors_after_page_reload.js]
-[browser_webconsole_bug_580454_timestamp_l10n.js]
-[browser_webconsole_bug_582201_duplicate_errors.js]
-[browser_webconsole_bug_583816_No_input_and_Tab_key_pressed.js]
-[browser_webconsole_bug_585237_line_limit.js]
-[browser_webconsole_bug_585956_console_trace.js]
-[browser_webconsole_bug_585991_autocomplete_keys.js]
-[browser_webconsole_bug_585991_autocomplete_popup.js]
-[browser_webconsole_bug_586388_select_all.js]
-[browser_webconsole_bug_587617_output_copy.js]
-[browser_webconsole_bug_588342_document_focus.js]
-[browser_webconsole_bug_588730_text_node_insertion.js]
-[browser_webconsole_bug_588967_input_expansion.js]
-[browser_webconsole_bug_589162_css_filter.js]
-[browser_webconsole_bug_592442_closing_brackets.js]
-[browser_webconsole_bug_593003_iframe_wrong_hud.js]
-[browser_webconsole_bug_594477_clickable_output.js]
-[browser_webconsole_bug_594497_history_arrow_keys.js]
-[browser_webconsole_bug_595223_file_uri.js]
-[browser_webconsole_bug_595350_multiple_windows_and_tabs.js]
-[browser_webconsole_bug_595934_message_categories.js]
-[browser_webconsole_bug_597103_deactivateHUDForContext_unfocused_window.js]
-[browser_webconsole_bug_597136_external_script_errors.js]
-[browser_webconsole_bug_597136_network_requests_from_chrome.js]
-[browser_webconsole_bug_597460_filter_scroll.js]
-[browser_webconsole_bug_597756_reopen_closed_tab.js]
-[browser_webconsole_bug_599725_response_headers.js]
-[browser_webconsole_bug_600183_charset.js]
-[browser_webconsole_bug_601177_log_levels.js]
-[browser_webconsole_bug_601352_scroll.js]
-[browser_webconsole_bug_601667_filter_buttons.js]
-[browser_webconsole_bug_602572_log_bodies_checkbox.js]
-[browser_webconsole_bug_603750_websocket.js]
-[browser_webconsole_bug_611795.js]
-[browser_webconsole_bug_613013_console_api_iframe.js]
-[browser_webconsole_bug_613280_jsterm_copy.js]
-[browser_webconsole_bug_613642_maintain_scroll.js]
-[browser_webconsole_bug_613642_prune_scroll.js]
-[browser_webconsole_bug_614793_jsterm_scroll.js]
-[browser_webconsole_bug_618078_network_exceptions.js]
-[browser_webconsole_bug_618311_close_panels.js]
-[browser_webconsole_bug_621644_jsterm_dollar.js]
-[browser_webconsole_bug_622303_persistent_filters.js]
-[browser_webconsole_bug_623749_ctrl_a_select_all_winnt.js]
-run-if = os == "win"
-[browser_webconsole_bug_630733_response_redirect_headers.js]
-[browser_webconsole_bug_632275_getters_document_width.js]
-[browser_webconsole_bug_632347_iterators_generators.js]
-[browser_webconsole_bug_632817.js]
-[browser_webconsole_bug_642108_pruneTest.js]
-[browser_webconsole_autocomplete_and_selfxss.js]
-[browser_webconsole_bug_644419_log_limits.js]
-[browser_webconsole_bug_646025_console_file_location.js]
-[browser_webconsole_bug_651501_document_body_autocomplete.js]
-[browser_webconsole_bug_653531_highlighter_console_helper.js]
-[browser_webconsole_bug_658368_time_methods.js]
-[browser_webconsole_bug_659907_console_dir.js]
-[browser_webconsole_bug_660806_history_nav.js]
-[browser_webconsole_bug_664131_console_group.js]
-[browser_webconsole_bug_686937_autocomplete_JSTerm_helpers.js]
-[browser_webconsole_bug_704295.js]
-[browser_webconsole_bug_734061_No_input_change_and_Tab_key_pressed.js]
-[browser_webconsole_bug_737873_mixedcontent.js]
-[browser_webconsole_bug_762593_insecure_passwords_about_blank_web_console_warning.js]
-skip-if = buildapp == 'mulet'
-[browser_webconsole_bug_762593_insecure_passwords_web_console_warning.js]
-skip-if = buildapp == 'mulet'
-[browser_webconsole_bug_764572_output_open_url.js]
-[browser_webconsole_bug_766001_JS_Console_in_Debugger.js]
-skip-if = buildapp == 'mulet'
-[browser_webconsole_bug_770099_violation.js]
-[browser_webconsole_bug_782653_CSS_links_in_Style_Editor.js]
-skip-if = buildapp == 'mulet'
-[browser_webconsole_bug_804845_ctrl_key_nav.js]
-run-if = os == "mac"
-[browser_webconsole_bug_817834_add_edited_input_to_history.js]
-[browser_webconsole_bug_837351_securityerrors.js]
-skip-if = buildapp == 'mulet'
-[browser_webconsole_bug_846918_hsts_invalid-headers.js]
-skip-if = buildapp == 'mulet'
-[browser_webconsole_bug_915141_toggle_response_logging_with_keyboard.js]
-[browser_webconsole_bug_1006027_message_timestamps_incorrect.js]
-[browser_webconsole_bug_1010953_cspro.js]
-[browser_webconsole_cached_autocomplete.js]
-[browser_webconsole_change_font_size.js]
-[browser_webconsole_chrome.js]
-[browser_webconsole_clickable_urls.js]
-[browser_webconsole_closure_inspection.js]
-[browser_webconsole_completion.js]
-[browser_webconsole_console_extras.js]
-[browser_webconsole_console_logging_api.js]
-[browser_webconsole_count.js]
-[browser_webconsole_dont_navigate_on_doubleclick.js]
-[browser_webconsole_execution_scope.js]
-[browser_webconsole_for_of.js]
-[browser_webconsole_history.js]
-[browser_webconsole_input_field_focus_on_panel_select.js]
-[browser_webconsole_inspect-parsed-documents.js]
-[browser_webconsole_js_input_expansion.js]
-[browser_webconsole_jsterm.js]
-[browser_webconsole_live_filtering_of_message_types.js]
-[browser_webconsole_live_filtering_on_search_strings.js]
-[browser_webconsole_message_node_id.js]
-[browser_webconsole_netlogging.js]
-[browser_webconsole_network_panel.js]
-[browser_webconsole_notifications.js]
-[browser_webconsole_open-links-without-callback.js]
-[browser_webconsole_output_copy_newlines.js]
-[browser_webconsole_output_order.js]
-[browser_webconsole_property_provider.js]
-[browser_webconsole_scratchpad_panel_link.js]
-[browser_webconsole_split.js]
+;[browser_console_navigation_marker.js]
+;[browser_console_nsiconsolemessage.js]
+;skip-if = buildapp == 'mulet'
+;[browser_console_optimized_out_vars.js]
+;[browser_console_private_browsing.js]
+;skip-if = buildapp == 'mulet'
+;[browser_console_variables_view.js]
+;[browser_console_variables_view_dom_nodes.js]
+;[browser_console_variables_view_dont_sort_non_sortable_classes_properties.js]
+;skip-if = buildapp == 'mulet'
+;[browser_console_variables_view_while_debugging.js]
+;[browser_console_variables_view_while_debugging_and_inspecting.js]
+;[browser_eval_in_debugger_stackframe.js]
+;[browser_jsterm_inspect.js]
+;[browser_longstring_hang.js]
+;[browser_netpanel_longstring_expand.js]
+;[browser_output_breaks_after_console_dir_uninspectable.js]
+;[browser_output_longstring_expand.js]
+;[browser_repeated_messages_accuracy.js]
+;skip-if = buildapp == 'mulet'
+;[browser_result_format_as_string.js]
+;[browser_warn_user_about_replaced_api.js]
+;[browser_webconsole_abbreviate_source_url.js]
+;[browser_webconsole_allow_mixedcontent_securityerrors.js]
+;skip-if = buildapp == 'mulet'
+;[browser_webconsole_assert.js]
+;[browser_webconsole_basic_net_logging.js]
+;[browser_webconsole_block_mixedcontent_securityerrors.js]
+;skip-if = buildapp == 'mulet'
+;[browser_webconsole_bug_579412_input_focus.js]
+;[browser_webconsole_bug_580001_closing_after_completion.js]
+;[browser_webconsole_bug_580030_errors_after_page_reload.js]
+;[browser_webconsole_bug_580454_timestamp_l10n.js]
+;[browser_webconsole_bug_582201_duplicate_errors.js]
+;[browser_webconsole_bug_583816_No_input_and_Tab_key_pressed.js]
+;[browser_webconsole_bug_585237_line_limit.js]
+;[browser_webconsole_bug_585956_console_trace.js]
+;[browser_webconsole_bug_585991_autocomplete_keys.js]
+;[browser_webconsole_bug_585991_autocomplete_popup.js]
+;[browser_webconsole_bug_586388_select_all.js]
+;[browser_webconsole_bug_587617_output_copy.js]
+;[browser_webconsole_bug_588342_document_focus.js]
+;[browser_webconsole_bug_588730_text_node_insertion.js]
+;[browser_webconsole_bug_588967_input_expansion.js]
+;[browser_webconsole_bug_589162_css_filter.js]
+;[browser_webconsole_bug_592442_closing_brackets.js]
+;[browser_webconsole_bug_593003_iframe_wrong_hud.js]
+;[browser_webconsole_bug_594477_clickable_output.js]
+;[browser_webconsole_bug_594497_history_arrow_keys.js]
+;[browser_webconsole_bug_595223_file_uri.js]
+;[browser_webconsole_bug_595350_multiple_windows_and_tabs.js]
+;[browser_webconsole_bug_595934_message_categories.js]
+;[browser_webconsole_bug_597103_deactivateHUDForContext_unfocused_window.js]
+;[browser_webconsole_bug_597136_external_script_errors.js]
+;[browser_webconsole_bug_597136_network_requests_from_chrome.js]
+;[browser_webconsole_bug_597460_filter_scroll.js]
+;[browser_webconsole_bug_597756_reopen_closed_tab.js]
+;[browser_webconsole_bug_599725_response_headers.js]
+;[browser_webconsole_bug_600183_charset.js]
+;[browser_webconsole_bug_601177_log_levels.js]
+;[browser_webconsole_bug_601352_scroll.js]
+;[browser_webconsole_bug_601667_filter_buttons.js]
+;[browser_webconsole_bug_602572_log_bodies_checkbox.js]
+;[browser_webconsole_bug_603750_websocket.js]
+;[browser_webconsole_bug_611795.js]
+;[browser_webconsole_bug_613013_console_api_iframe.js]
+;[browser_webconsole_bug_613280_jsterm_copy.js]
+;[browser_webconsole_bug_613642_maintain_scroll.js]
+;[browser_webconsole_bug_613642_prune_scroll.js]
+;[browser_webconsole_bug_614793_jsterm_scroll.js]
+;[browser_webconsole_bug_618078_network_exceptions.js]
+;[browser_webconsole_bug_618311_close_panels.js]
+;[browser_webconsole_bug_621644_jsterm_dollar.js]
+;[browser_webconsole_bug_622303_persistent_filters.js]
+;[browser_webconsole_bug_623749_ctrl_a_select_all_winnt.js]
+;run-if = os == "win"
+;[browser_webconsole_bug_630733_response_redirect_headers.js]
+;[browser_webconsole_bug_632275_getters_document_width.js]
+;[browser_webconsole_bug_632347_iterators_generators.js]
+;[browser_webconsole_bug_632817.js]
+;[browser_webconsole_bug_642108_pruneTest.js]
+;[browser_webconsole_autocomplete_and_selfxss.js]
+;[browser_webconsole_bug_644419_log_limits.js]
+;[browser_webconsole_bug_646025_console_file_location.js]
+;[browser_webconsole_bug_651501_document_body_autocomplete.js]
+;[browser_webconsole_bug_653531_highlighter_console_helper.js]
+;[browser_webconsole_bug_658368_time_methods.js]
+;[browser_webconsole_bug_659907_console_dir.js]
+;[browser_webconsole_bug_660806_history_nav.js]
+;[browser_webconsole_bug_664131_console_group.js]
+;[browser_webconsole_bug_686937_autocomplete_JSTerm_helpers.js]
+;[browser_webconsole_bug_704295.js]
+;[browser_webconsole_bug_734061_No_input_change_and_Tab_key_pressed.js]
+;[browser_webconsole_bug_737873_mixedcontent.js]
+;[browser_webconsole_bug_762593_insecure_passwords_about_blank_web_console_warning.js]
+;skip-if = buildapp == 'mulet'
+;[browser_webconsole_bug_762593_insecure_passwords_web_console_warning.js]
+;skip-if = buildapp == 'mulet'
+;[browser_webconsole_bug_764572_output_open_url.js]
+;[browser_webconsole_bug_766001_JS_Console_in_Debugger.js]
+;skip-if = buildapp == 'mulet'
+;[browser_webconsole_bug_770099_violation.js]
+;[browser_webconsole_bug_782653_CSS_links_in_Style_Editor.js]
+;skip-if = buildapp == 'mulet'
+;[browser_webconsole_bug_804845_ctrl_key_nav.js]
+;run-if = os == "mac"
+;[browser_webconsole_bug_817834_add_edited_input_to_history.js]
+;[browser_webconsole_bug_837351_securityerrors.js]
+;skip-if = buildapp == 'mulet'
+;[browser_webconsole_bug_846918_hsts_invalid-headers.js]
+;skip-if = buildapp == 'mulet'
+;[browser_webconsole_bug_915141_toggle_response_logging_with_keyboard.js]
+;[browser_webconsole_bug_1006027_message_timestamps_incorrect.js]
+;[browser_webconsole_bug_1010953_cspro.js]
+;[browser_webconsole_cached_autocomplete.js]
+;[browser_webconsole_change_font_size.js]
+;[browser_webconsole_chrome.js]
+;[browser_webconsole_clickable_urls.js]
+;[browser_webconsole_closure_inspection.js]
+;[browser_webconsole_completion.js]
+;[browser_webconsole_console_extras.js]
+;[browser_webconsole_console_logging_api.js]
+;[browser_webconsole_count.js]
+;[browser_webconsole_dont_navigate_on_doubleclick.js]
+;[browser_webconsole_execution_scope.js]
+;[browser_webconsole_for_of.js]
+;[browser_webconsole_history.js]
+;[browser_webconsole_input_field_focus_on_panel_select.js]
+;[browser_webconsole_inspect-parsed-documents.js]
+;[browser_webconsole_js_input_expansion.js]
+;[browser_webconsole_jsterm.js]
+;[browser_webconsole_live_filtering_of_message_types.js]
+;[browser_webconsole_live_filtering_on_search_strings.js]
+;[browser_webconsole_message_node_id.js]
+;[browser_webconsole_netlogging.js]
+;[browser_webconsole_network_panel.js]
+;[browser_webconsole_notifications.js]
+;[browser_webconsole_open-links-without-callback.js]
+;[browser_webconsole_output_copy_newlines.js]
+;[browser_webconsole_output_order.js]
+;[browser_webconsole_property_provider.js]
+;[browser_webconsole_scratchpad_panel_link.js]
+;[browser_webconsole_split.js]
 [browser_webconsole_split_escape_key.js]
 [browser_webconsole_split_focus.js]
 [browser_webconsole_split_persist.js]
-[browser_webconsole_view_source.js]
-[browser_webconsole_reflow.js]
-[browser_webconsole_log_file_filter.js]
-[browser_webconsole_expandable_timestamps.js]
-[browser_webconsole_autocomplete_in_debugger_stackframe.js]
-[browser_webconsole_autocomplete_popup_close_on_tab_switch.js]
-[browser_webconsole_autocomplete-properties-with-non-alphanumeric-names.js]
-[browser_console_hide_jsterm_when_devtools_chrome_enabled_false.js]
-[browser_webconsole_output_01.js]
+;[browser_webconsole_view_source.js]
+;[browser_webconsole_reflow.js]
+;[browser_webconsole_log_file_filter.js]
+;[browser_webconsole_expandable_timestamps.js]
+;[browser_webconsole_autocomplete_in_debugger_stackframe.js]
+;[browser_webconsole_autocomplete_popup_close_on_tab_switch.js]
+;[browser_webconsole_autocomplete-properties-with-non-alphanumeric-names.js]
+;[browser_console_hide_jsterm_when_devtools_chrome_enabled_false.js]
+;[browser_webconsole_output_01.js]
 [browser_webconsole_output_02.js]
 [browser_webconsole_output_03.js]
 [browser_webconsole_output_04.js]
 [browser_webconsole_output_05.js]
 [browser_webconsole_output_06.js]
 [browser_webconsole_output_dom_elements_01.js]
-[browser_webconsole_output_dom_elements_02.js]
+;[browser_webconsole_output_dom_elements_02.js]
 [browser_webconsole_output_dom_elements_03.js]
 [browser_webconsole_output_dom_elements_04.js]
-[browser_webconsole_output_events.js]
+;[browser_webconsole_output_events.js]
 [browser_console_variables_view_highlighter.js]
 [browser_webconsole_start_netmon_first.js]
 [browser_webconsole_console_trace_duplicates.js]
 [browser_webconsole_cd_iframe.js]
 [browser_webconsole_autocomplete_crossdomain_iframe.js]
 [browser_webconsole_console_custom_styles.js]
 [browser_webconsole_console_api_stackframe.js]
diff --git a/browser/devtools/webconsole/test/browser_bug664688_sandbox_update_after_navigation.js b/browser/devtools/webconsole/test/browser_bug664688_sandbox_update_after_navigation.js
--- a/browser/devtools/webconsole/test/browser_bug664688_sandbox_update_after_navigation.js
+++ b/browser/devtools/webconsole/test/browser_bug664688_sandbox_update_after_navigation.js
@@ -2,112 +2,90 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 // Tests if the JSTerm sandbox is updated when the user navigates from one
 // domain to another, in order to avoid permission denied errors with a sandbox
 // created for a different origin.
 
-function test()
-{
+"use strict";
+
+let test = asyncTest(function* () {
   const TEST_URI1 = "http://example.com/browser/browser/devtools/webconsole/test/test-console.html";
   const TEST_URI2 = "http://example.org/browser/browser/devtools/webconsole/test/test-console.html";
 
-  let hud;
-  let msgForLocation1;
+  yield loadTab(TEST_URI1);
+  let hud = yield openConsole();
 
-  waitForExplicitFinish();
+  hud.jsterm.clearOutput();
+  hud.jsterm.execute("window.location.href");
 
-  gBrowser.selectedTab = gBrowser.addTab(TEST_URI1);
-  gBrowser.selectedBrowser.addEventListener("load", function onLoad() {
-    gBrowser.selectedBrowser.removeEventListener("load", onLoad, true);
-    openConsole(gBrowser.selectedTab, pageLoad1);
-  }, true);
+  info("wait for window.location.href");
 
-  function pageLoad1(aHud)
-  {
-    hud = aHud;
+  let msgForLocation1 = {
+    webconsole: hud,
+    messages: [
+      {
+        name: "window.location.href jsterm input",
+        text: "window.location.href",
+        category: CATEGORY_INPUT,
+      },
+      {
+        name: "window.location.href result is displayed",
+        text: TEST_URI1,
+        category: CATEGORY_OUTPUT,
+      },
+    ],
+  };
 
-    hud.jsterm.clearOutput();
-    hud.jsterm.execute("window.location.href");
+  yield waitForMessages(msgForLocation1);
 
-    info("wait for window.location.href");
+  // load second url
+  content.location = TEST_URI2;
+  yield loadBrowser(gBrowser.selectedBrowser);
 
-    msgForLocation1 = {
-      webconsole: hud,
-      messages: [
-        {
-          name: "window.location.href jsterm input",
-          text: "window.location.href",
-          category: CATEGORY_INPUT,
-        },
-        {
-          name: "window.location.href result is displayed",
-          text: TEST_URI1,
-          category: CATEGORY_OUTPUT,
-        },
-      ]
-    };
+  is(hud.outputNode.textContent.indexOf("Permission denied"), -1,
+     "no permission denied errors");
 
-    waitForMessages(msgForLocation1).then(() => {
-      gBrowser.selectedBrowser.addEventListener("load", onPageLoad2, true);
-      content.location = TEST_URI2;
-    });
-  }
+  hud.jsterm.clearOutput();
+  hud.jsterm.execute("window.location.href");
 
-  function onPageLoad2() {
-    gBrowser.selectedBrowser.removeEventListener("load", onPageLoad2, true);
+  info("wait for window.location.href after page navigation");
 
-    is(hud.outputNode.textContent.indexOf("Permission denied"), -1,
-       "no permission denied errors");
+  yield waitForMessages({
+    webconsole: hud,
+    messages: [
+      {
+        name: "window.location.href jsterm input",
+        text: "window.location.href",
+        category: CATEGORY_INPUT,
+      },
+      {
+        name: "window.location.href result is displayed",
+        text: TEST_URI2,
+        category: CATEGORY_OUTPUT,
+      },
+    ],
+  });
 
-    hud.jsterm.clearOutput();
-    hud.jsterm.execute("window.location.href");
+  is(hud.outputNode.textContent.indexOf("Permission denied"), -1,
+     "no permission denied errors");
 
-    info("wait for window.location.href after page navigation");
+  gBrowser.goBack();
 
-    waitForMessages({
-      webconsole: hud,
-      messages: [
-        {
-          name: "window.location.href jsterm input",
-          text: "window.location.href",
-          category: CATEGORY_INPUT,
-        },
-        {
-          name: "window.location.href result is displayed",
-          text: TEST_URI2,
-          category: CATEGORY_OUTPUT,
-        },
-      ]
-    }).then(() => {
-      is(hud.outputNode.textContent.indexOf("Permission denied"), -1,
-         "no permission denied errors");
-
-      gBrowser.goBack();
-      waitForSuccess(waitForBack);
-    });
-  }
-
-  let waitForBack = {
+  yield waitForSuccess({
     name: "go back",
-    validatorFn: function()
-    {
+    validator: function() {
       return content.location.href == TEST_URI1;
     },
-    successFn: function()
-    {
-      hud.jsterm.clearOutput();
-      executeSoon(() => {
-        hud.jsterm.execute("window.location.href");
-      });
+  });
 
-      info("wait for window.location.href after goBack()");
-      waitForMessages(msgForLocation1).then(() => executeSoon(() => {
-        is(hud.outputNode.textContent.indexOf("Permission denied"), -1,
-           "no permission denied errors");
-        finishTest();
-      }));
-    },
-    failureFn: finishTest,
-  };
-}
+  hud.jsterm.clearOutput();
+  executeSoon(() => {
+    hud.jsterm.execute("window.location.href");
+  });
+
+  info("wait for window.location.href after goBack()");
+  yield waitForMessages(msgForLocation1);
+  is(hud.outputNode.textContent.indexOf("Permission denied"), -1,
+     "no permission denied errors");
+});
diff --git a/browser/devtools/webconsole/test/browser_bug_638949_copy_link_location.js b/browser/devtools/webconsole/test/browser_bug_638949_copy_link_location.js
--- a/browser/devtools/webconsole/test/browser_bug_638949_copy_link_location.js
+++ b/browser/devtools/webconsole/test/browser_bug_638949_copy_link_location.js
@@ -1,118 +1,105 @@
 /* vim:set ts=2 sw=2 sts=2 et: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
-const TEST_URI = "http://example.com/browser/browser/devtools/webconsole/" +
-  "test/test-console.html?_date=" + Date.now();
-const COMMAND_NAME = "consoleCmd_copyURL";
-const CONTEXT_MENU_ID = "#menu_copyURL";
+// Test for the "Copy link location" context menu item shown when you right
+// click network requests in the output.
 
-let HUD = null;
-let output = null;
-let menu = null;
+"use strict";
 
-function test() {
-  let originalNetPref = Services.prefs.getBoolPref("devtools.webconsole.filter.networkinfo");
+let test = asyncTest(function* () {
+  const TEST_URI = "http://example.com/browser/browser/devtools/webconsole/" +
+    "test/test-console.html?_date=" + Date.now();
+  const COMMAND_NAME = "consoleCmd_copyURL";
+  const CONTEXT_MENU_ID = "#menu_copyURL";
+
   registerCleanupFunction(() => {
-    Services.prefs.setBoolPref("devtools.webconsole.filter.networkinfo", originalNetPref);
-    HUD = output = menu = null;
+    Services.prefs.clearUserPref("devtools.webconsole.filter.networkinfo");
   });
 
   Services.prefs.setBoolPref("devtools.webconsole.filter.networkinfo", true);
 
-  addTab(TEST_URI);
-  browser.addEventListener("load", function onLoad() {
-    browser.removeEventListener("load", onLoad, true);
+  yield loadTab(TEST_URI);
+  let hud = yield openConsole();
+  let output = hud.outputNode;
+  let menu = hud.iframeWindow.document.getElementById("output-contextmenu");
 
-    openConsole(null, function (aHud) {
-      HUD = aHud;
-      output = aHud.outputNode;
-      menu = HUD.iframeWindow.document.getElementById("output-contextmenu");
-
-      executeSoon(testWithoutNetActivity);
-    });
-  }, true);
-}
-
-// Return whether "Copy Link Location" command is enabled or not.
-function isEnabled() {
-  let controller = top.document.commandDispatcher
-                   .getControllerForCommand(COMMAND_NAME);
-  return controller && controller.isCommandEnabled(COMMAND_NAME);
-}
-
-function testWithoutNetActivity() {
-  HUD.jsterm.clearOutput();
+  hud.jsterm.clearOutput();
   content.console.log("bug 638949");
 
   // Test that the "Copy Link Location" command is disabled for non-network
   // messages.
-  waitForMessages({
-    webconsole: HUD,
+  let [result] = yield waitForMessages({
+    webconsole: hud,
     messages: [{
       text: "bug 638949",
       category: CATEGORY_WEBDEV,
       severity: SEVERITY_LOG,
     }],
-  }).then(onConsoleMessage);
-}
+  });
 
-function onConsoleMessage(aResults) {
   output.focus();
-  let message = [...aResults[0].matched][0];
+  let message = [...result.matched][0];
 
   goUpdateCommand(COMMAND_NAME);
-  ok(!isEnabled(), COMMAND_NAME + "is disabled");
+  ok(!isEnabled(), COMMAND_NAME + " is disabled");
 
   // Test that the "Copy Link Location" menu item is hidden for non-network
   // messages.
   message.scrollIntoView();
-  waitForContextMenu(menu, message, () => {
+
+  yield waitForContextMenu(menu, message, () => {
     let isHidden = menu.querySelector(CONTEXT_MENU_ID).hidden;
     ok(isHidden, CONTEXT_MENU_ID + " is hidden");
-  }, testWithNetActivity);
-}
+  });
 
-function testWithNetActivity() {
-  HUD.jsterm.clearOutput();
+  hud.jsterm.clearOutput();
   content.location.reload(); // Reloading will produce network logging
 
   // Test that the "Copy Link Location" command is enabled and works
   // as expected for any network-related message.
   // This command should copy only the URL.
-  waitForMessages({
-    webconsole: HUD,
+  [result] = yield waitForMessages({
+    webconsole: hud,
     messages: [{
       text: "test-console.html",
       category: CATEGORY_NETWORK,
       severity: SEVERITY_LOG,
     }],
-  }).then(onNetworkMessage);
-}
+  });
 
-function onNetworkMessage(aResults) {
   output.focus();
-  let message = [...aResults[0].matched][0];
-  HUD.ui.output.selectMessage(message);
+  message = [...result.matched][0];
+  hud.ui.output.selectMessage(message);
 
   goUpdateCommand(COMMAND_NAME);
   ok(isEnabled(), COMMAND_NAME + " is enabled");
 
   info("expected clipboard value: " + message.url);
 
+  let deferred = promise.defer();
+
   waitForClipboard((aData) => { return aData.trim() == message.url; },
-    () => { goDoCommand(COMMAND_NAME) },
-    testMenuWithNetActivity, testMenuWithNetActivity);
+    () => { goDoCommand(COMMAND_NAME); },
+    () => { deferred.resolve(null); },
+    () => { deferred.reject(null); });
 
-  function testMenuWithNetActivity() {
-    // Test that the "Copy Link Location" menu item is visible for network-related
-    // messages.
-    message.scrollIntoView();
-    waitForContextMenu(menu, message, () => {
-      let isVisible = !menu.querySelector(CONTEXT_MENU_ID).hidden;
-      ok(isVisible, CONTEXT_MENU_ID + " is visible");
-    }, finishTest);
+  yield deferred.promise;
+
+  // Test that the "Copy Link Location" menu item is visible for network-related
+  // messages.
+  message.scrollIntoView();
+
+  yield waitForContextMenu(menu, message, () => {
+    let isVisible = !menu.querySelector(CONTEXT_MENU_ID).hidden;
+    ok(isVisible, CONTEXT_MENU_ID + " is visible");
+  });
+
+  // Return whether "Copy Link Location" command is enabled or not.
+  function isEnabled() {
+    let controller = top.document.commandDispatcher
+                     .getControllerForCommand(COMMAND_NAME);
+    return controller && controller.isCommandEnabled(COMMAND_NAME);
   }
-}
-
+});
diff --git a/browser/devtools/webconsole/test/browser_bug_862916_console_dir_and_filter_off.js b/browser/devtools/webconsole/test/browser_bug_862916_console_dir_and_filter_off.js
--- a/browser/devtools/webconsole/test/browser_bug_862916_console_dir_and_filter_off.js
+++ b/browser/devtools/webconsole/test/browser_bug_862916_console_dir_and_filter_off.js
@@ -1,34 +1,31 @@
 /*
  * Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
 // Check that the output for console.dir() works even if Logging filter is off.
 
+"use strict";
+
 const TEST_URI = "data:text/html;charset=utf8,<p>test for bug 862916";
 
-function test()
-{
-  addTab(TEST_URI);
-  browser.addEventListener("load", function onLoad() {
-    browser.removeEventListener("load", onLoad, true);
-    openConsole(null, consoleOpened);
-  }, true);
-}
+let test = asyncTest(function* () {
+  yield loadTab(TEST_URI);
+  let hud = yield openConsole();
 
-function consoleOpened(hud)
-{
   ok(hud, "web console opened");
 
   hud.setFilterState("log", false);
   registerCleanupFunction(() => hud.setFilterState("log", true));
 
-  content.wrappedJSObject.fooBarz = "bug862916";
-  hud.jsterm.execute("console.dir(window)");
-  hud.jsterm.once("variablesview-fetched", (aEvent, aVar) => {
-    ok(aVar, "variables view object");
-    findVariableViewProperties(aVar, [
-      { name: "fooBarz", value: "bug862916" },
-    ], { webconsole: hud }).then(finishTest);
-  });
-}
+  hud.jsterm.execute("window.fooBarz = 'bug862916'; " +
+                     "console.dir(window)");
+
+  let varView = yield hud.jsterm.once("variablesview-fetched");
+  ok(varView, "variables view object");
+
+  yield findVariableViewProperties(varView, [
+    { name: "fooBarz", value: "bug862916" },
+  ], { webconsole: hud });
+});
+
diff --git a/browser/devtools/webconsole/test/browser_bug_865288_repeat_different_objects.js b/browser/devtools/webconsole/test/browser_bug_865288_repeat_different_objects.js
--- a/browser/devtools/webconsole/test/browser_bug_865288_repeat_different_objects.js
+++ b/browser/devtools/webconsole/test/browser_bug_865288_repeat_different_objects.js
@@ -1,81 +1,63 @@
 /*
  * Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
 // Test that makes sure messages are not considered repeated when console.log()
 // is invoked with different objects, see bug 865288.
 
+"use strict";
+
 const TEST_URI = "http://example.com/browser/browser/devtools/webconsole/test/test-repeated-messages.html";
 
-let hud = null;
+let test = asyncTest(function* () {
+  yield loadTab(TEST_URI);
+  let hud = yield openConsole();
 
-function test() {
-  addTab(TEST_URI);
-  browser.addEventListener("load", function onLoad() {
-    browser.removeEventListener("load", onLoad, true);
-    openConsole(null, consoleOpened);
-  }, true);
-}
-
-function consoleOpened(aHud) {
-  hud = aHud;
-
-  // Check that css warnings are not coalesced if they come from different lines.
   info("waiting for 3 console.log objects");
 
   hud.jsterm.clearOutput(true);
-  content.wrappedJSObject.testConsoleObjects();
+  hud.jsterm.execute("window.testConsoleObjects()");
 
-  waitForMessages({
+  let [result] = yield waitForMessages({
     webconsole: hud,
     messages: [{
       name: "3 console.log messages",
       text: "abba",
       category: CATEGORY_WEBDEV,
       severity: SEVERITY_LOG,
       count: 3,
       repeats: 1,
       objects: true,
     }],
-  }).then(checkMessages);
-}
+  });
 
-function checkMessages([result])
-{
   let msgs = [...result.matched];
   is(msgs.length, 3, "3 message elements");
-  let m = -1;
 
-  function nextMessage()
-  {
-    let msg = msgs[++m];
-    if (msg) {
-      ok(msg, "message element #" + m);
+  for (let i = 0; i < msgs.length; i++) {
+    info("test message element #" + i);
 
-      let clickable = msg.querySelector(".message-body a");
-      ok(clickable, "clickable object #" + m);
+    let msg = msgs[i];
+    let clickable = msg.querySelector(".message-body a");
+    ok(clickable, "clickable object #" + i);
 
-      msg.scrollIntoView(false);
-      clickObject(clickable);
-    }
-    else {
-      finishTest();
-    }
+    msg.scrollIntoView(false);
+    yield clickObject(clickable, i);
   }
 
-  nextMessage();
+  function* clickObject(obj, i)
+  {
+    executeSoon(() => {
+      EventUtils.synthesizeMouse(obj, 2, 2, {}, hud.iframeWindow);
+    });
 
-  function clickObject(aObject)
-  {
-    hud.jsterm.once("variablesview-fetched", onObjectFetch);
-    EventUtils.synthesizeMouse(aObject, 2, 2, {}, hud.iframeWindow);
+    let varView = yield hud.jsterm.once("variablesview-fetched");
+    ok(varView, "variables view fetched #" + i);
+
+    yield findVariableViewProperties(varView, [
+      { name: "id", value: "abba" + i },
+    ], { webconsole: hud });
   }
+});
 
-  function onObjectFetch(aEvent, aVar)
-  {
-    findVariableViewProperties(aVar, [
-      { name: "id", value: "abba" + m },
-    ], { webconsole: hud }).then(nextMessage);
-  }
-}
diff --git a/browser/devtools/webconsole/test/browser_bug_865871_variables_view_close_on_esc_key.js b/browser/devtools/webconsole/test/browser_bug_865871_variables_view_close_on_esc_key.js
--- a/browser/devtools/webconsole/test/browser_bug_865871_variables_view_close_on_esc_key.js
+++ b/browser/devtools/webconsole/test/browser_bug_865871_variables_view_close_on_esc_key.js
@@ -1,16 +1,18 @@
 /*
  * Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
 // Check that the variables view sidebar can be closed by pressing Escape in the
 // web console.
 
+"use strict";
+
 const TEST_URI = "http://example.com/browser/browser/devtools/webconsole/test/test-eval-in-stackframe.html";
 
 function test()
 {
   let hud;
 
   Task.spawn(runner).then(finishTest);
 
@@ -39,19 +41,16 @@ function test()
 
     let [result] = yield findVariableViewProperties(vviewVar, [
       { name: "testProp", value: "testValue" },
     ], { webconsole: hud });
 
     let prop = result.matchedProp;
     ok(prop, "matched the |testProp| property in the variables view");
 
-    is(content.wrappedJSObject.fooObj.testProp, result.value,
-       "|fooObj.testProp| value is correct");
-
     vview.window.focus();
 
     executeSoon(() => {
       EventUtils.synthesizeKey("VK_ESCAPE", {});
     });
     yield jsterm.once("sidebar-closed");
 
     jsterm.clearOutput();
diff --git a/browser/devtools/webconsole/test/browser_bug_869003_inspect_cross_domain_object.js b/browser/devtools/webconsole/test/browser_bug_869003_inspect_cross_domain_object.js
--- a/browser/devtools/webconsole/test/browser_bug_869003_inspect_cross_domain_object.js
+++ b/browser/devtools/webconsole/test/browser_bug_869003_inspect_cross_domain_object.js
@@ -1,99 +1,76 @@
 /*
  * Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
 // Check that users can inspect objects logged from cross-domain iframes -
 // bug 869003.
 
+"use strict";
+
 const TEST_URI = "http://example.com/browser/browser/devtools/webconsole/test/test-bug-869003-top-window.html";
 
-let gWebConsole, gJSTerm, gVariablesView;
-
-function test()
-{
+let test = asyncTest(function* () {
   // This test is slightly more involved: it opens the web console, then the
   // variables view for a given object, it updates a property in the view and
   // checks the result. We can get a timeout with debug builds on slower machines.
   requestLongerTimeout(2);
 
-  addTab("data:text/html;charset=utf8,<p>hello");
-  browser.addEventListener("load", function onLoad() {
-    browser.removeEventListener("load", onLoad, true);
-    openConsole(null, consoleOpened);
-  }, true);
-}
+  yield loadTab("data:text/html;charset=utf8,<p>hello");
+  let hud = yield openConsole();
 
-function consoleOpened(hud)
-{
-  gWebConsole = hud;
-  gJSTerm = hud.jsterm;
   content.location = TEST_URI;
 
-  waitForMessages({
+  let [result] = yield waitForMessages({
     webconsole: hud,
     messages: [{
       name: "console.log message",
       text: "foobar",
       category: CATEGORY_WEBDEV,
       severity: SEVERITY_LOG,
       objects: true,
     }],
-  }).then(onConsoleMessage);
-}
+  });
 
-function onConsoleMessage(aResults)
-{
-  let msg = [...aResults[0].matched][0];
+  let msg = [...result.matched][0];
   ok(msg, "message element");
 
   let body = msg.querySelector(".message-body");
   ok(body, "message body");
 
-  let clickable = aResults[0].clickableElements[0];
+  let clickable = result.clickableElements[0];
   ok(clickable, "clickable object found");
   ok(body.textContent.contains('{ hello: "world!",'), "message text check");
 
-  gJSTerm.once("variablesview-fetched", onObjFetch);
+  executeSoon(() => {
+    EventUtils.synthesizeMouse(clickable, 2, 2, {}, hud.iframeWindow)
+  });
 
-  EventUtils.synthesizeMouse(clickable, 2, 2, {}, gWebConsole.iframeWindow)
-}
+  let aVar = yield hud.jsterm.once("variablesview-fetched");
+  ok(aVar, "variables view fetched");
+  ok(aVar._variablesView, "variables view object");
 
-function onObjFetch(aEvent, aVar)
-{
-  gVariablesView = aVar._variablesView;
-  ok(gVariablesView, "variables view object");
-
-  findVariableViewProperties(aVar, [
+  [result] = yield findVariableViewProperties(aVar, [
     { name: "hello", value: "world!" },
     { name: "bug", value: 869003 },
-  ], { webconsole: gWebConsole }).then(onPropFound);
-}
+  ], { webconsole: hud });
 
-function onPropFound(aResults)
-{
-  let prop = aResults[0].matchedProp;
+  let prop = result.matchedProp;
   ok(prop, "matched the |hello| property in the variables view");
 
   // Check that property value updates work.
-  updateVariablesViewProperty({
+  aVar = yield updateVariablesViewProperty({
     property: prop,
     field: "value",
     string: "'omgtest'",
-    webconsole: gWebConsole,
-    callback: onFetchAfterUpdate,
+    webconsole: hud,
   });
-}
 
-function onFetchAfterUpdate(aEvent, aVar)
-{
   info("onFetchAfterUpdate");
 
-  findVariableViewProperties(aVar, [
+  yield findVariableViewProperties(aVar, [
     { name: "hello", value: "omgtest" },
     { name: "bug", value: 869003 },
-  ], { webconsole: gWebConsole }).then(() => {
-    gWebConsole = gJSTerm = gVariablesView = null;
-    finishTest();
-  });
-}
+  ], { webconsole: hud });
+});
+
diff --git a/browser/devtools/webconsole/test/browser_bug_871156_ctrlw_close_tab.js b/browser/devtools/webconsole/test/browser_bug_871156_ctrlw_close_tab.js
--- a/browser/devtools/webconsole/test/browser_bug_871156_ctrlw_close_tab.js
+++ b/browser/devtools/webconsole/test/browser_bug_871156_ctrlw_close_tab.js
@@ -1,83 +1,79 @@
 /*
  * Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
 // Check that Ctrl-W closes the Browser Console and that Ctrl-W closes the
 // current tab when using the Web Console - bug 871156.
 
-function test()
-{
+"use strict";
+
+let test = asyncTest(function* () {
   const TEST_URI = "data:text/html;charset=utf8,<title>bug871156</title>\n" +
                    "<p>hello world";
   let firstTab = gBrowser.selectedTab;
+
   Services.prefs.setBoolPref("browser.tabs.animate", false);
+  registerCleanupFunction(() => {
+    Services.prefs.clearUserPref("browser.tabs.animate");
+  });
 
-  addTab(TEST_URI);
-  browser.addEventListener("load", function onLoad() {
-    browser.removeEventListener("load", onLoad, true);
-    openConsole(null, consoleOpened);
-  }, true);
+  yield loadTab(TEST_URI);
 
-  function consoleOpened(hud)
-  {
-    ok(hud, "Web Console opened");
+  let hud = yield openConsole();
+  ok(hud, "Web Console opened");
 
-    let tabClosed = promise.defer();
-    let toolboxDestroyed = promise.defer();
-    let tabSelected = promise.defer();
+  let tabClosed = promise.defer();
+  let toolboxDestroyed = promise.defer();
+  let tabSelected = promise.defer();
 
-    let pageWindow = firstTab.linkedBrowser.contentWindow;
-    let toolbox = gDevTools.getToolbox(hud.target);
+  let target = TargetFactory.forTab(gBrowser.selectedTab);
+  let toolbox = gDevTools.getToolbox(target);
 
-    gBrowser.tabContainer.addEventListener("TabClose", function onTabClose() {
-      gBrowser.tabContainer.removeEventListener("TabClose", onTabClose);
-      info("tab closed");
-      tabClosed.resolve(null);
-    });
+  gBrowser.tabContainer.addEventListener("TabClose", function onTabClose() {
+    gBrowser.tabContainer.removeEventListener("TabClose", onTabClose);
+    info("tab closed");
+    tabClosed.resolve(null);
+  });
 
-    gBrowser.tabContainer.addEventListener("TabSelect", function onTabSelect() {
-      gBrowser.tabContainer.removeEventListener("TabSelect", onTabSelect);
-      if (gBrowser.selectedTab == firstTab) {
-        info("tab selected");
-        tabSelected.resolve(null);
-      }
-    });
+  gBrowser.tabContainer.addEventListener("TabSelect", function onTabSelect() {
+    gBrowser.tabContainer.removeEventListener("TabSelect", onTabSelect);
+    if (gBrowser.selectedTab == firstTab) {
+      info("tab selected");
+      tabSelected.resolve(null);
+    }
+  });
 
-    toolbox.once("destroyed", () => {
-      info("toolbox destroyed");
-      toolboxDestroyed.resolve(null);
-    });
+  toolbox.once("destroyed", () => {
+    info("toolbox destroyed");
+    toolboxDestroyed.resolve(null);
+  });
 
-    promise.all([tabClosed.promise, toolboxDestroyed.promise, tabSelected.promise ]).then(() => {
-      info("promise.all resolved");
-      waitForFocus(testBrowserConsole, pageWindow, true);
-    });
+  // Get out of the web console initialization.
+  executeSoon(() => {
+    EventUtils.synthesizeKey("w", { accelKey: true });
+  });
 
-    // Get out of the web console initialization.
-    executeSoon(() => {
-      EventUtils.synthesizeKey("w", { accelKey: true });
-    });
-  }
 
-  function testBrowserConsole()
-  {
-    info("test the Browser Console");
+  yield promise.all([tabClosed.promise, toolboxDestroyed.promise,
+                     tabSelected.promise]);
+  info("promise.all resolved. start testing the Browser Console");
 
-    HUDService.toggleBrowserConsole().then((hud) => {
-      ok(hud, "Browser Console opened");
+  hud = yield HUDService.toggleBrowserConsole();
+  ok(hud, "Browser Console opened");
 
-      Services.obs.addObserver(function onDestroy() {
-        Services.obs.removeObserver(onDestroy, "web-console-destroyed");
-        ok(true, "the Browser Console closed");
+  let deferred = promise.defer();
 
-        Services.prefs.clearUserPref("browser.tabs.animate");
-        waitForFocus(finish, content, true);
-      }, "web-console-destroyed", false);
+  Services.obs.addObserver(function onDestroy() {
+    Services.obs.removeObserver(onDestroy, "web-console-destroyed");
+    ok(true, "the Browser Console closed");
 
-      waitForFocus(() => {
-        EventUtils.synthesizeKey("w", { accelKey: true }, hud.iframeWindow);
-      }, hud.iframeWindow);
-    });
-  }
-}
+    deferred.resolve(null);
+  }, "web-console-destroyed", false);
+
+  waitForFocus(() => {
+    EventUtils.synthesizeKey("w", { accelKey: true }, hud.iframeWindow);
+  }, hud.iframeWindow);
+
+  yield deferred.promise;
+});
diff --git a/browser/devtools/webconsole/test/browser_cached_messages.js b/browser/devtools/webconsole/test/browser_cached_messages.js
--- a/browser/devtools/webconsole/test/browser_cached_messages.js
+++ b/browser/devtools/webconsole/test/browser_cached_messages.js
@@ -1,57 +1,49 @@
 /* vim:set ts=2 sw=2 sts=2 et: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 // Test to see if the cached messages are displayed when the console UI is opened.
 
+"use strict";
+
 const TEST_URI = "http://example.com/browser/browser/devtools/webconsole/test/test-webconsole-error-observer.html";
 
-function test()
-{
-  waitForExplicitFinish();
+let test = asyncTest(function*() {
+  expectUncaughtException();
+  yield loadTab(TEST_URI);
 
-  expectUncaughtException();
+  let messages = [
+    {
+      text: "log Bazzle",
+      category: CATEGORY_WEBDEV,
+      severity: SEVERITY_LOG,
+    },
+    {
+      text: "error Bazzle",
+      category: CATEGORY_WEBDEV,
+      severity: SEVERITY_ERROR,
+    },
+    {
+      text: "bazBug611032",
+      category: CATEGORY_JS,
+      severity: SEVERITY_ERROR,
+    },
+    {
+      text: "cssColorBug611032",
+      category: CATEGORY_CSS,
+      severity: SEVERITY_WARNING,
+    },
+  ];
 
-  addTab(TEST_URI);
-  gBrowser.selectedBrowser.addEventListener("load", function onLoad() {
-    gBrowser.selectedBrowser.removeEventListener("load", onLoad, true);
-    testOpenUI(true);
-  }, true);
-}
+  let hud = yield openConsole();
 
-function testOpenUI(aTestReopen)
-{
-  openConsole(null, function(hud) {
-    waitForMessages({
-      webconsole: hud,
-      messages: [
-        {
-          text: "log Bazzle",
-          category: CATEGORY_WEBDEV,
-          severity: SEVERITY_LOG,
-        },
-        {
-          text: "error Bazzle",
-          category: CATEGORY_WEBDEV,
-          severity: SEVERITY_ERROR,
-        },
-        {
-          text: "bazBug611032",
-          category: CATEGORY_JS,
-          severity: SEVERITY_ERROR,
-        },
-        {
-          text: "cssColorBug611032",
-          category: CATEGORY_CSS,
-          severity: SEVERITY_WARNING,
-        },
-      ],
-    }).then(() => {
-      closeConsole(gBrowser.selectedTab, function() {
-        aTestReopen && info("will reopen the Web Console");
-        executeSoon(aTestReopen ? testOpenUI : finishTest);
-      });
-    });
-  });
-}
+  yield waitForMessages({ webconsole: hud, messages: messages });
+
+  yield closeConsole();
+
+  info("will reopen the Web Console");
+
+  hud = yield openConsole();
+  yield waitForMessages({ webconsole: hud, messages: messages });
+});
diff --git a/browser/devtools/webconsole/test/browser_console.js b/browser/devtools/webconsole/test/browser_console.js
--- a/browser/devtools/webconsole/test/browser_console.js
+++ b/browser/devtools/webconsole/test/browser_console.js
@@ -1,61 +1,64 @@
 /*
  * Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
 // Test the basic features of the Browser Console, bug 587757.
 
+"use strict";
+
 const TEST_URI = "http://example.com/browser/browser/devtools/webconsole/test/test-console.html?" + Date.now();
 
-function test()
-{
+let test = asyncTest(function*() {
+  let hud = HUDService.getBrowserConsole();
+  ok(!hud, "browser console is not open");
+
+  info("wait for the browser console to open with ctrl-shift-j");
+  let deferred = promise.defer();
+  let hud;
+
   Services.obs.addObserver(function observer(aSubject) {
     Services.obs.removeObserver(observer, "web-console-created");
     aSubject.QueryInterface(Ci.nsISupportsString);
 
-    let hud = HUDService.getBrowserConsole();
+    hud = HUDService.getBrowserConsole();
     ok(hud, "browser console is open");
     is(aSubject.data, hud.hudId, "notification hudId is correct");
 
-    executeSoon(() => consoleOpened(hud));
+    deferred.resolve(null);
   }, "web-console-created", false);
 
-  let hud = HUDService.getBrowserConsole();
-  ok(!hud, "browser console is not open");
-  info("wait for the browser console to open with ctrl-shift-j");
   EventUtils.synthesizeKey("j", { accelKey: true, shiftKey: true }, window);
-}
+  yield deferred.promise;
 
-function consoleOpened(hud)
-{
   hud.jsterm.clearOutput(true);
 
   expectUncaughtException();
   executeSoon(() => {
     foobarExceptionBug587757();
   });
 
   // Add a message from a chrome window.
   hud.iframeWindow.console.log("bug587757a");
 
   // Add a message from a content window.
-  content.console.log("bug587757b");
+  hud.jsterm.execute("console.log('bug587757b')");
 
   // Test eval.
   hud.jsterm.execute("document.location.href");
 
   // Check for network requests.
   let xhr = new XMLHttpRequest();
   xhr.onload = () => console.log("xhr loaded, status is: " + xhr.status);
   xhr.open("get", TEST_URI, true);
   xhr.send();
 
-  waitForMessages({
+  yield waitForMessages({
     webconsole: hud,
     messages: [
       {
         name: "chrome window console.log() is displayed",
         text: "bug587757a",
         category: CATEGORY_WEBDEV,
         severity: SEVERITY_LOG,
       },
@@ -79,10 +82,10 @@ function consoleOpened(hud)
       },
       {
         name: "network message",
         text: "test-console.html",
         category: CATEGORY_NETWORK,
         severity: SEVERITY_LOG,
       },
     ],
-  }).then(finishTest);
-}
+  });
+});
diff --git a/browser/devtools/webconsole/test/browser_console_addonsdk_loader_exception.js b/browser/devtools/webconsole/test/browser_console_addonsdk_loader_exception.js
--- a/browser/devtools/webconsole/test/browser_console_addonsdk_loader_exception.js
+++ b/browser/devtools/webconsole/test/browser_console_addonsdk_loader_exception.js
@@ -2,16 +2,18 @@
  * Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
 // Check that exceptions from scripts loaded with the addon-sdk loader are
 // opened correctly in View Source from the Browser Console.
 // See bug 866950.
 
+"use strict";
+
 const TEST_URI = "data:text/html;charset=utf8,<p>hello world from bug 866950";
 
 function test()
 {
   requestLongerTimeout(2);
 
   let webconsole, browserconsole;
 
@@ -40,19 +42,20 @@ function test()
       executeSoon(fixToolbox);
       expectUncaughtException();
       toolbox.getToolPanels();
     });
 
     let [result] = yield waitForMessages({
       webconsole: browserconsole,
       messages: [{
-        text: "TypeError: can't convert null to object",
+        text: "can't convert null to object",
         category: CATEGORY_JS,
         severity: SEVERITY_ERROR,
+        source: { url: /\btoolbox\.js\b/ }
       }],
     });
 
     fixToolbox();
 
     let msg = [...result.matched][0];
     ok(msg, "message element found");
     let locationNode = msg.querySelector(".message-location");
diff --git a/browser/devtools/webconsole/test/browser_console_clear_on_reload.js b/browser/devtools/webconsole/test/browser_console_clear_on_reload.js
--- a/browser/devtools/webconsole/test/browser_console_clear_on_reload.js
+++ b/browser/devtools/webconsole/test/browser_console_clear_on_reload.js
@@ -1,73 +1,54 @@
 /*
  * Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
 // Check that clear output on page reload works - bug 705921.
 
-function test()
-{
+"use strict";
+
+let test = asyncTest(function*() {
   const PREF = "devtools.webconsole.persistlog";
   const TEST_URI = "http://example.com/browser/browser/devtools/webconsole/test/test-console.html";
-  let hud = null;
 
   Services.prefs.setBoolPref(PREF, false);
   registerCleanupFunction(() => Services.prefs.clearUserPref(PREF));
 
-  addTab(TEST_URI);
+  yield loadTab(TEST_URI);
 
-  browser.addEventListener("load", function onLoad() {
-    browser.removeEventListener("load", onLoad, true);
-    openConsole(null, consoleOpened);
-  }, true);
+  let hud = yield openConsole();
+  ok(hud, "Web Console opened");
 
-  function consoleOpened(aHud)
-  {
-    hud = aHud;
-    ok(hud, "Web Console opened");
+  hud.jsterm.clearOutput();
+  hud.jsterm.execute("console.log('foobarz1')");
 
-    hud.jsterm.clearOutput();
-    content.console.log("foobarz1");
-    waitForMessages({
-      webconsole: hud,
-      messages: [{
-        text: "foobarz1",
-        category: CATEGORY_WEBDEV,
-        severity: SEVERITY_LOG,
-      }],
-    }).then(onConsoleMessage);
-  }
+  yield waitForMessages({
+    webconsole: hud,
+    messages: [{
+      text: "foobarz1",
+      category: CATEGORY_WEBDEV,
+      severity: SEVERITY_LOG,
+    }],
+  });
 
-  function onConsoleMessage()
-  {
-    browser.addEventListener("load", onReload, true);
-    content.location.reload();
-  }
+  BrowserReload();
+  yield loadBrowser(gBrowser.selectedBrowser);
 
-  function onReload()
-  {
-    browser.removeEventListener("load", onReload, true);
+  hud.jsterm.execute("console.log('foobarz2')");
 
-    content.console.log("foobarz2");
+  yield waitForMessages({
+    webconsole: hud,
+    messages: [{
+      text: "test-console.html",
+      category: CATEGORY_NETWORK,
+    },
+    {
+      text: "foobarz2",
+      category: CATEGORY_WEBDEV,
+      severity: SEVERITY_LOG,
+    }],
+  });
 
-    waitForMessages({
-      webconsole: hud,
-      messages: [{
-        text: "test-console.html",
-        category: CATEGORY_NETWORK,
-      },
-      {
-        text: "foobarz2",
-        category: CATEGORY_WEBDEV,
-        severity: SEVERITY_LOG,
-      }],
-    }).then(onConsoleMessageAfterReload);
-  }
-
-  function onConsoleMessageAfterReload()
-  {
-    is(hud.outputNode.textContent.indexOf("foobarz1"), -1,
-       "foobarz1 has been removed from output");
-    finishTest();
-  }
-}
+  is(hud.outputNode.textContent.indexOf("foobarz1"), -1,
+     "foobarz1 has been removed from output");
+});
diff --git a/browser/devtools/webconsole/test/browser_console_click_focus.js b/browser/devtools/webconsole/test/browser_console_click_focus.js
--- a/browser/devtools/webconsole/test/browser_console_click_focus.js
+++ b/browser/devtools/webconsole/test/browser_console_click_focus.js
@@ -1,60 +1,55 @@
 /* vim:set ts=2 sw=2 sts=2 et: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 // Tests that the input field is focused when the console is opened.
 
+"use strict";
+
 const TEST_URI = "http://example.com/browser/browser/devtools/webconsole/test/test-console.html";
 
-function test() {
-  addTab(TEST_URI);
-  browser.addEventListener("DOMContentLoaded", testInputFocus, false);
-}
+let test = asyncTest(function*() {
+  yield loadTab(TEST_URI);
+  let hud = yield openConsole();
 
-function testInputFocus() {
-  browser.removeEventListener("DOMContentLoaded", testInputFocus, false);
+  let [result] = yield waitForMessages({
+    webconsole: hud,
+    messages: [{
+      text: "Dolske Digs Bacon",
+      category: CATEGORY_WEBDEV,
+      severity: SEVERITY_LOG,
+    }],
+  });
 
-  openConsole().then((hud) => {
-    waitForMessages({
-      webconsole: hud,
-      messages: [{
-        text: "Dolske Digs Bacon",
-        category: CATEGORY_WEBDEV,
-        severity: SEVERITY_LOG,
-      }],
-    }).then(([result]) => {
-      let msg = [...result.matched][0];
-      let outputItem = msg.querySelector(".message-body");
-      ok(outputItem, "found a logged message");
-      let inputNode = hud.jsterm.inputNode;
-      ok(inputNode.getAttribute("focused"), "input node is focused, first");
+  let msg = [...result.matched][0];
+  let outputItem = msg.querySelector(".message-body");
+  ok(outputItem, "found a logged message");
 
-      let lostFocus = () => {
-        inputNode.removeEventListener("blur", lostFocus);
-        info("input node lost focus");
-      }
+  let inputNode = hud.jsterm.inputNode;
+  ok(inputNode.getAttribute("focused"), "input node is focused, first");
 
-      inputNode.addEventListener("blur", lostFocus);
+  let lostFocus = () => {
+    inputNode.removeEventListener("blur", lostFocus);
+    info("input node lost focus");
+  }
 
-      browser.ownerDocument.getElementById("urlbar").click();
+  inputNode.addEventListener("blur", lostFocus);
 
-      ok(!inputNode.getAttribute("focused"), "input node is not focused");
+  document.getElementById("urlbar").click();
 
-      EventUtils.sendMouseEvent({type: "click"}, hud.outputNode);
+  ok(!inputNode.getAttribute("focused"), "input node is not focused");
 
-      ok(inputNode.getAttribute("focused"), "input node is focused, second time")
+  EventUtils.sendMouseEvent({type: "click"}, hud.outputNode);
 
-      // test click-drags are not focusing the input element.
-      EventUtils.sendMouseEvent({type: "mousedown", clientX: 3, clientY: 4},
-        outputItem);
-      EventUtils.sendMouseEvent({type: "click", clientX: 15, clientY: 5},
-        outputItem);
+  ok(inputNode.getAttribute("focused"), "input node is focused, second time")
 
-      executeSoon(() => {
-        todo(!inputNode.getAttribute("focused"), "input node is not focused after drag");
-        finishTest();
-      });
-    });
-  });
-}
+  // test click-drags are not focusing the input element.
+  EventUtils.sendMouseEvent({type: "mousedown", clientX: 3, clientY: 4},
+    outputItem);
+  EventUtils.sendMouseEvent({type: "click", clientX: 15, clientY: 5},
+    outputItem);
+
+  todo(!inputNode.getAttribute("focused"), "input node is not focused after drag");
+});
+
diff --git a/browser/devtools/webconsole/test/browser_console_consolejsm_output.js b/browser/devtools/webconsole/test/browser_console_consolejsm_output.js
--- a/browser/devtools/webconsole/test/browser_console_consolejsm_output.js
+++ b/browser/devtools/webconsole/test/browser_console_consolejsm_output.js
@@ -1,135 +1,137 @@
 /*
  * Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
 // Test that Console.jsm outputs messages to the Browser Console, bug 851231.
 
-function test()
-{
+"use strict";
+
+let test = asyncTest(function*() {
   let storage = Cc["@mozilla.org/consoleAPI-storage;1"].getService(Ci.nsIConsoleAPIStorage);
   storage.clearEvents();
 
   let console = Cu.import("resource://gre/modules/devtools/Console.jsm", {}).console;
   console.log("bug861338-log-cached");
 
-  HUDService.toggleBrowserConsole().then(consoleOpened);
-  let hud = null;
+  let hud = yield HUDService.toggleBrowserConsole();
 
-  function consoleOpened(aHud)
-  {
-    hud = aHud;
-    waitForMessages({
-      webconsole: hud,
-      messages: [{
-        name: "cached console.log message",
-        text: "bug861338-log-cached",
+  yield waitForMessages({
+    webconsole: hud,
+    messages: [{
+      name: "cached console.log message",
+      text: "bug861338-log-cached",
+      category: CATEGORY_WEBDEV,
+      severity: SEVERITY_LOG,
+    }],
+  });
+
+  hud.jsterm.clearOutput(true);
+
+  function testTrace() {
+    console.trace();
+  }
+
+  console.time("foobarTimer");
+  let foobar = { bug851231prop: "bug851231value" };
+
+  console.log("bug851231-log");
+  console.info("bug851231-info");
+  console.warn("bug851231-warn");
+  console.error("bug851231-error", foobar);
+  console.debug("bug851231-debug");
+  console.dir(document);
+  testTrace();
+  console.timeEnd("foobarTimer");
+
+  info("wait for the Console.jsm messages");
+
+  let results = yield waitForMessages({
+    webconsole: hud,
+    messages: [
+      {
+        name: "console.log output",
+        text: "bug851231-log",
         category: CATEGORY_WEBDEV,
         severity: SEVERITY_LOG,
-      }],
-    }).then(onCachedMessage);
-  }
+      },
+      {
+        name: "console.info output",
+        text: "bug851231-info",
+        category: CATEGORY_WEBDEV,
+        severity: SEVERITY_INFO,
+      },
+      {
+        name: "console.warn output",
+        text: "bug851231-warn",
+        category: CATEGORY_WEBDEV,
+        severity: SEVERITY_WARNING,
+      },
+      {
+        name: "console.error output",
+        text: /\bbug851231-error\b.+\{\s*bug851231prop:\s"bug851231value"\s*\}/,
+        category: CATEGORY_WEBDEV,
+        severity: SEVERITY_ERROR,
+        objects: true,
+      },
+      {
+        name: "console.debug output",
+        text: "bug851231-debug",
+        category: CATEGORY_WEBDEV,
+        severity: SEVERITY_LOG,
+      },
+      {
+        name: "console.trace output",
+        consoleTrace: {
+          file: "browser_console_consolejsm_output.js",
+          fn: "testTrace",
+        },
+      },
+      {
+        name: "console.dir output",
+        consoleDir: /XULDocument\s+.+\s+chrome:\/\/.+\/browser\.xul/,
+      },
+      {
+        name: "console.time output",
+        consoleTime: "foobarTimer",
+      },
+      {
+        name: "console.timeEnd output",
+        consoleTimeEnd: "foobarTimer",
+      },
+    ],
+  });
 
-  function onCachedMessage()
-  {
-    hud.jsterm.clearOutput(true);
+  let consoleErrorMsg = results[3];
+  ok(consoleErrorMsg, "console.error message element found");
+  let clickable = consoleErrorMsg.clickableElements[0];
+  ok(clickable, "clickable object found for console.error");
 
-    console.time("foobarTimer");
-    let foobar = { bug851231prop: "bug851231value" };
+  let deferred = promise.defer();
 
-    console.log("bug851231-log");
-    console.info("bug851231-info");
-    console.warn("bug851231-warn");
-    console.error("bug851231-error", foobar);
-    console.debug("bug851231-debug");
-    console.trace();
-    console.dir(document);
-    console.timeEnd("foobarTimer");
+  let onFetch = (aEvent, aVar) => {
+    // Skip the notification from console.dir variablesview-fetched.
+    if (aVar._variablesView != hud.jsterm._variablesView) {
+      return;
+    }
+    hud.jsterm.off("variablesview-fetched", onFetch);
 
-    info("wait for the Console.jsm messages");
+    deferred.resolve(aVar);
+  };
 
-    waitForMessages({
-      webconsole: hud,
-      messages: [
-        {
-          name: "console.log output",
-          text: "bug851231-log",
-          category: CATEGORY_WEBDEV,
-          severity: SEVERITY_LOG,
-        },
-        {
-          name: "console.info output",
-          text: "bug851231-info",
-          category: CATEGORY_WEBDEV,
-          severity: SEVERITY_INFO,
-        },
-        {
-          name: "console.warn output",
-          text: "bug851231-warn",
-          category: CATEGORY_WEBDEV,
-          severity: SEVERITY_WARNING,
-        },
-        {
-          name: "console.error output",
-          text: /\bbug851231-error\b.+\{\s*bug851231prop:\s"bug851231value"\s*\}/,
-          category: CATEGORY_WEBDEV,
-          severity: SEVERITY_ERROR,
-          objects: true,
-        },
-        {
-          name: "console.debug output",
-          text: "bug851231-debug",
-          category: CATEGORY_WEBDEV,
-          severity: SEVERITY_LOG,
-        },
-        {
-          name: "console.trace output",
-          consoleTrace: {
-            file: "browser_console_consolejsm_output.js",
-            fn: "onCachedMessage",
-          },
-        },
-        {
-          name: "console.dir output",
-          consoleDir: /XULDocument\s+.+\s+chrome:\/\/.+\/browser\.xul/,
-        },
-        {
-          name: "console.time output",
-          consoleTime: "foobarTimer",
-        },
-        {
-          name: "console.timeEnd output",
-          consoleTimeEnd: "foobarTimer",
-        },
-      ],
-    }).then((aResults) => {
-      let consoleErrorMsg = aResults[3];
-      ok(consoleErrorMsg, "console.error message element found");
-      let clickable = consoleErrorMsg.clickableElements[0];
-      ok(clickable, "clickable object found for console.error");
+  hud.jsterm.on("variablesview-fetched", onFetch);
 
-      let onFetch = (aEvent, aVar) => {
-        // Skip the notification from console.dir variablesview-fetched.
-        if (aVar._variablesView != hud.jsterm._variablesView) {
-          return;
-        }
-        hud.jsterm.off("variablesview-fetched", onFetch);
+  clickable.scrollIntoView(false);
 
-        ok(aVar, "object inspector opened on click");
+  info("wait for variablesview-fetched");
+  executeSoon(() =>
+    EventUtils.synthesizeMouse(clickable, 2, 2, {}, hud.iframeWindow));
 
-        findVariableViewProperties(aVar, [{
-          name: "bug851231prop",
-          value: "bug851231value",
-        }], { webconsole: hud }).then(finishTest);
-      };
+  let varView = yield deferred.promise;
+  ok(varView, "object inspector opened on click");
 
-      hud.jsterm.on("variablesview-fetched", onFetch);
-
-      clickable.scrollIntoView(false);
-
-      info("wait for variablesview-fetched");
-      executeSoon(() =>
-        EventUtils.synthesizeMouse(clickable, 2, 2, {}, hud.iframeWindow));
-    });
-  }
-}
+  yield findVariableViewProperties(varView, [{
+    name: "bug851231prop",
+    value: "bug851231value",
+  }], { webconsole: hud });
+});
diff --git a/browser/devtools/webconsole/test/browser_console_dead_objects.js b/browser/devtools/webconsole/test/browser_console_dead_objects.js
--- a/browser/devtools/webconsole/test/browser_console_dead_objects.js
+++ b/browser/devtools/webconsole/test/browser_console_dead_objects.js
@@ -7,16 +7,18 @@
 // This test does:
 // - opens a new tab,
 // - opens the Browser Console,
 // - stores a reference to the content document of the tab on the chrome window object,
 // - closes the tab,
 // - tries to use the object that was pointing to the now-defunct content
 // document. This is the dead object.
 
+"use strict";
+
 const TEST_URI = "data:text/html;charset=utf8,<p>dead objects!";
 
 function test()
 {
   let hud = null;
 
   registerCleanupFunction(() => {
     Services.prefs.clearUserPref("devtools.chrome.enabled");
@@ -32,21 +34,17 @@ function test()
 
     hud = yield HUDService.toggleBrowserConsole();
     ok(hud, "browser console opened");
 
     hud.jsterm.clearOutput();
 
     // Add the reference to the content document.
 
-    yield execute("Cu = Components.utils;" +
-                  "Cu.import('resource://gre/modules/Services.jsm');" +
-                  "chromeWindow = Services.wm.getMostRecentWindow('navigator:browser');" +
-                  "foobarzTezt = chromeWindow.content.document;" +
-                  "delete chromeWindow");
+    yield execute("foobarzTezt = content.document.documentElement");
 
     gBrowser.removeCurrentTab();
 
     let msg = yield execute("foobarzTezt");
 
     isnot(hud.outputNode.textContent.indexOf("[object DeadObject]"), -1,
           "dead object found");
 
@@ -56,16 +54,18 @@ function test()
       EventUtils.synthesizeKey(c, {}, hud.iframeWindow);
     }
 
     yield execute();
 
     isnot(hud.outputNode.textContent.indexOf("can't access dead object"), -1,
           "'cannot access dead object' message found");
 
+    yield promise.defer().promise;
+
     // Click the second execute output.
     let clickable = msg.querySelector("a");
     ok(clickable, "clickable object found");
     isnot(clickable.textContent.indexOf("[object DeadObject]"), -1,
           "message text check");
 
     msg.scrollIntoView();
 
diff --git a/browser/devtools/webconsole/test/browser_console_error_source_click.js b/browser/devtools/webconsole/test/browser_console_error_source_click.js
--- a/browser/devtools/webconsole/test/browser_console_error_source_click.js
+++ b/browser/devtools/webconsole/test/browser_console_error_source_click.js
@@ -1,75 +1,69 @@
 /*
  * Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
 // Check that JS errors and CSS warnings open view source when their source link
 // is clicked in the Browser Console. See bug 877778.
 
+"use strict";
+
 const TEST_URI = "data:text/html;charset=utf8,<p>hello world from bug 877778 " +
                  "<button onclick='foobar.explode()' " +
                  "style='test-color: green-please'>click!</button>";
-function test()
-{
-  let hud;
 
-  addTab(TEST_URI);
-  browser.addEventListener("load", function onLoad() {
-    browser.removeEventListener("load", onLoad, true);
-    HUDService.toggleBrowserConsole().then(browserConsoleOpened);
-  }, true);
+let test = asyncTest(function*() {
+  yield loadTab(TEST_URI);
 
-  function browserConsoleOpened(aHud)
-  {
-    hud = aHud;
-    ok(hud, "browser console opened");
+  let hud = yield HUDService.toggleBrowserConsole();
 
-    let button = content.document.querySelector("button");
-    ok(button, "button element found");
+  let prefix = hud.ui._filterPrefsPrefix;
+  ok(prefix, "filter prefs prefix");
+  hud.setFilterState("cssparser", true);
 
-    info("generate exception and wait for the message");
-    executeSoon(() => {
-      expectUncaughtException();
-      button.click();
-    });
+  registerCleanupFunction(() => {
+    Services.prefs.clearUserPref(prefix + "cssparser");
+  });
 
-    waitForMessages({
-      webconsole: hud,
-      messages: [
-        {
-          text: "ReferenceError: foobar is not defined",
-          category: CATEGORY_JS,
-          severity: SEVERITY_ERROR,
-        },
-        {
-          text: "Unknown property 'test-color'",
-          category: CATEGORY_CSS,
-          severity: SEVERITY_WARNING,
-        },
-      ],
-    }).then(onMessageFound);
+  ok(hud, "browser console opened");
+
+  info("generate exception and wait for the message");
+
+  expectUncaughtException();
+  hud.jsterm.execute("content.document.querySelector('button').click()");
+
+  let results = yield waitForMessages({
+    webconsole: hud,
+    messages: [
+      {
+        text: "ReferenceError: foobar is not defined",
+        category: CATEGORY_JS,
+        severity: SEVERITY_ERROR,
+      },
+      {
+        text: "Unknown property 'test-color'",
+        category: CATEGORY_CSS,
+        severity: SEVERITY_WARNING,
+      },
+    ],
+  });
+
+  let viewSource = hud.viewSource;
+  let viewSourceCalled = false;
+  hud.viewSource = () => viewSourceCalled = true;
+
+  for (let result of results) {
+    viewSourceCalled = false;
+
+    let msg = [...result.matched][0];
+    ok(msg, "message element found for: " + result.text);
+    let locationNode = msg.querySelector(".message-location");
+    ok(locationNode, "message location element found");
+
+    EventUtils.synthesizeMouse(locationNode, 2, 2, {}, hud.iframeWindow);
+
+    ok(viewSourceCalled, "view source opened");
   }
 
-  function onMessageFound(results)
-  {
-    let viewSource = hud.viewSource;
-    let viewSourceCalled = false;
-    hud.viewSource = () => viewSourceCalled = true;
-
-    for (let result of results) {
-      viewSourceCalled = false;
-
-      let msg = [...results[0].matched][0];
-      ok(msg, "message element found for: " + result.text);
-      let locationNode = msg.querySelector(".message-location");
-      ok(locationNode, "message location element found");
-
-      EventUtils.synthesizeMouse(locationNode, 2, 2, {}, hud.iframeWindow);
-
-      ok(viewSourceCalled, "view source opened");
-    }
-
-    hud.viewSource = viewSource;
-    finishTest();
-  }
-}
+  hud.viewSource = viewSource;
+});
diff --git a/browser/devtools/webconsole/test/browser_console_filters.js b/browser/devtools/webconsole/test/browser_console_filters.js
--- a/browser/devtools/webconsole/test/browser_console_filters.js
+++ b/browser/devtools/webconsole/test/browser_console_filters.js
@@ -1,32 +1,27 @@
 /*
  * Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
 // Check that the Browser Console does not use the same filter prefs as the Web
 // Console. See bug 878186.
 
+"use strict";
+
 const TEST_URI = "data:text/html;charset=utf8,<p>browser console filters";
 const WEB_CONSOLE_PREFIX = "devtools.webconsole.filter.";
 const BROWSER_CONSOLE_PREFIX = "devtools.browserconsole.filter.";
 
-function test()
-{
-  addTab(TEST_URI);
-  browser.addEventListener("load", function onLoad() {
-    browser.removeEventListener("load", onLoad, true);
-    info("open the web console");
-    openConsole(null, consoleOpened);
-  }, true);
-}
+let test = asyncTest(function*() {
+  yield loadTab(TEST_URI);
 
-function consoleOpened(hud)
-{
+  info("open the web console");
+  let hud = yield openConsole();
   ok(hud, "web console opened");
 
   is(Services.prefs.getBoolPref(BROWSER_CONSOLE_PREFIX + "exception"), true,
      "'exception' filter is enabled (browser console)");
   is(Services.prefs.getBoolPref(WEB_CONSOLE_PREFIX + "exception"), true,
      "'exception' filter is enabled (web console)");
 
   info("toggle 'exception' filter");
@@ -34,38 +29,32 @@ function consoleOpened(hud)
 
   is(Services.prefs.getBoolPref(BROWSER_CONSOLE_PREFIX + "exception"), true,
      "'exception' filter is enabled (browser console)");
   is(Services.prefs.getBoolPref(WEB_CONSOLE_PREFIX + "exception"), false,
      "'exception' filter is disabled (web console)");
 
   hud.setFilterState("exception", true);
 
-  executeSoon(() => closeConsole(null, onWebConsoleClose));
-}
+  // We need to let the console opening event loop to finish.
+  let deferred = promise.defer();
+  executeSoon(() => closeConsole().then(() => deferred.resolve(null)));
+  yield deferred.promise;
 
-function onWebConsoleClose()
-{
   info("web console closed");
-  HUDService.toggleBrowserConsole().then(onBrowserConsoleOpen);
-}
-
-function onBrowserConsoleOpen(hud)
-{
+  hud = yield HUDService.toggleBrowserConsole();
   ok(hud, "browser console opened");
 
   is(Services.prefs.getBoolPref(BROWSER_CONSOLE_PREFIX + "exception"), true,
      "'exception' filter is enabled (browser console)");
   is(Services.prefs.getBoolPref(WEB_CONSOLE_PREFIX + "exception"), true,
      "'exception' filter is enabled (web console)");
 
   info("toggle 'exception' filter");
   hud.setFilterState("exception", false);
 
   is(Services.prefs.getBoolPref(BROWSER_CONSOLE_PREFIX + "exception"), false,
      "'exception' filter is disabled (browser console)");
   is(Services.prefs.getBoolPref(WEB_CONSOLE_PREFIX + "exception"), true,
      "'exception' filter is enabled (web console)");
 
   hud.setFilterState("exception", true);
-
-  executeSoon(finishTest);
-}
+});
diff --git a/browser/devtools/webconsole/test/browser_console_iframe_messages.js b/browser/devtools/webconsole/test/browser_console_iframe_messages.js
--- a/browser/devtools/webconsole/test/browser_console_iframe_messages.js
+++ b/browser/devtools/webconsole/test/browser_console_iframe_messages.js
@@ -1,15 +1,17 @@
 /*
  * Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
 // Check that cached messages from nested iframes are displayed in the
-// Web/Browser Console.
+// Web Console.
+
+"use strict";
 
 const TEST_URI = "http://example.com/browser/browser/devtools/webconsole/test/test-consoleiframes.html";
 
 let expectedMessages = [
   {
     text: "main file",
     category: CATEGORY_WEBDEV,
     severity: SEVERITY_LOG,
@@ -47,61 +49,32 @@ let expectedMessagesAny = [
     name: "iframe 1 (repeats: 2)",
     text: "iframe 1",
     category: CATEGORY_WEBDEV,
     severity: SEVERITY_LOG,
     repeats: 2
   },
 ];
 
-function test()
-{
+let test = asyncTest(function*() {
   expectUncaughtException();
-  addTab(TEST_URI);
-  browser.addEventListener("load", function onLoad() {
-    browser.removeEventListener("load", onLoad, true);
-    info("open web console");
-    openConsole(null, consoleOpened);
-  }, true);
-}
+  yield loadTab(TEST_URI);
 
-function consoleOpened(hud)
-{
+  info("open web console");
+  let hud = yield openConsole();
   ok(hud, "web console opened");
 
-  waitForMessages({
+  yield waitForMessages({
     webconsole: hud,
     messages: expectedMessages,
-  }).then(() => {
-    info("first messages matched");
-    waitForMessages({
-      webconsole: hud,
-      messages: expectedMessagesAny,
-      matchCondition: "any",
-    }).then(() => {
-      closeConsole(null, onWebConsoleClose);
-    });
   });
-}
 
-function onWebConsoleClose()
-{
+  info("first messages matched");
+
+  yield waitForMessages({
+    webconsole: hud,
+    messages: expectedMessagesAny,
+    matchCondition: "any",
+  });
+
+  yield closeConsole();
   info("web console closed");
-  HUDService.toggleBrowserConsole().then(onBrowserConsoleOpen);
-}
-
-function onBrowserConsoleOpen(hud)
-{
-  ok(hud, "browser console opened");
-  waitForMessages({
-    webconsole: hud,
-    messages: expectedMessages,
-  }).then(() => {
-    info("first messages matched");
-    waitForMessages({
-      webconsole: hud,
-      messages: expectedMessagesAny,
-      matchCondition: "any",
-    }).then(() => {
-      closeConsole(null, finishTest);
-    });
-  });
-}
+});
diff --git a/browser/devtools/webconsole/test/browser_console_keyboard_accessibility.js b/browser/devtools/webconsole/test/browser_console_keyboard_accessibility.js
--- a/browser/devtools/webconsole/test/browser_console_keyboard_accessibility.js
+++ b/browser/devtools/webconsole/test/browser_console_keyboard_accessibility.js
@@ -1,90 +1,79 @@
 /*
  * Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
 // Check that basic keyboard shortcuts work in the web console.
 
-function test()
-{
+"use strict";
+
+let test = asyncTest(function*() {
   const TEST_URI = "http://example.com/browser/browser/devtools/webconsole/test/test-console.html";
-  let hud = null;
 
-  addTab(TEST_URI);
+  yield loadTab(TEST_URI);
 
-  browser.addEventListener("load", function onLoad() {
-    browser.removeEventListener("load", onLoad, true);
-    openConsole(null, consoleOpened);
-  }, true);
+  let hud = yield openConsole();
+  ok(hud, "Web Console opened");
 
-  function consoleOpened(aHud)
-  {
-    hud = aHud;
-    ok(hud, "Web Console opened");
+  info("dump some spew into the console for scrolling");
+  hud.jsterm.execute("(function() { for (var i = 0; i < 100; i++) { " +
+                     "console.log('foobarz' + i);" +
+                     "}})();");
 
-    info("dump some spew into the console for scrolling");
-    for (let i = 0; i < 100; i++)
-      content.console.log("foobarz" + i);
-    waitForMessages({
-      webconsole: hud,
-      messages: [{
-        text: "foobarz99",
-        category: CATEGORY_WEBDEV,
-        severity: SEVERITY_LOG,
-      }],
-    }).then(onConsoleMessage);
+  yield waitForMessages({
+    webconsole: hud,
+    messages: [{
+      text: "foobarz99",
+      category: CATEGORY_WEBDEV,
+      severity: SEVERITY_LOG,
+    }],
+  });
+
+  let currentPosition = hud.outputNode.parentNode.scrollTop;
+  let bottom = currentPosition;
+
+  EventUtils.synthesizeKey("VK_PAGE_UP", {});
+  isnot(hud.outputNode.parentNode.scrollTop, currentPosition, "scroll position changed after page up");
+
+  currentPosition = hud.outputNode.parentNode.scrollTop;
+  EventUtils.synthesizeKey("VK_PAGE_DOWN", {});
+  ok(hud.outputNode.parentNode.scrollTop > currentPosition, "scroll position now at bottom");
+
+  EventUtils.synthesizeKey("VK_HOME", {});
+  is(hud.outputNode.parentNode.scrollTop, 0, "scroll position now at top");
+
+  EventUtils.synthesizeKey("VK_END", {});
+
+  let scrollTop = hud.outputNode.parentNode.scrollTop;
+  ok(scrollTop > 0 && Math.abs(scrollTop - bottom) <= 5,
+     "scroll position now at bottom");
+
+  info("try ctrl-l to clear output");
+  executeSoon(() => { EventUtils.synthesizeKey("l", { ctrlKey: true }); });
+  yield hud.jsterm.once("messages-cleared");
+
+  is(hud.outputNode.textContent.indexOf("foobarz1"), -1, "output cleared");
+  is(hud.jsterm.inputNode.getAttribute("focused"), "true",
+     "jsterm input is focused");
+
+  info("try ctrl-f to focus filter");
+  EventUtils.synthesizeKey("F", { accelKey: true });
+  ok(!hud.jsterm.inputNode.getAttribute("focused"),
+     "jsterm input is not focused");
+  is(hud.ui.filterBox.getAttribute("focused"), "true",
+     "filter input is focused");
+
+  if (Services.appinfo.OS == "Darwin") {
+    ok(hud.ui.getFilterState("network"), "network category is enabled");
+    EventUtils.synthesizeKey("t", { ctrlKey: true });
+    ok(!hud.ui.getFilterState("network"), "accesskey for Network works");
+    EventUtils.synthesizeKey("t", { ctrlKey: true });
+    ok(hud.ui.getFilterState("network"), "accesskey for Network works (again)");
   }
-
-  function onConsoleMessage()
-  {
-    let currentPosition = hud.outputNode.parentNode.scrollTop;
-    let bottom = currentPosition;
-
-    EventUtils.synthesizeKey("VK_PAGE_UP", {});
-    isnot(hud.outputNode.parentNode.scrollTop, currentPosition, "scroll position changed after page up");
-
-    currentPosition = hud.outputNode.parentNode.scrollTop;
-    EventUtils.synthesizeKey("VK_PAGE_DOWN", {});
-    ok(hud.outputNode.parentNode.scrollTop > currentPosition, "scroll position now at bottom");
-
-    EventUtils.synthesizeKey("VK_HOME", {});
-    is(hud.outputNode.parentNode.scrollTop, 0, "scroll position now at top");
-
-    EventUtils.synthesizeKey("VK_END", {});
-    is(hud.outputNode.parentNode.scrollTop, bottom, "scroll position now at bottom");
-
-    hud.jsterm.once("messages-cleared", onClear);
-    info("try ctrl-l to clear output");
-    EventUtils.synthesizeKey("l", { ctrlKey: true });
+  else {
+    EventUtils.synthesizeKey("N", { altKey: true });
+    let net = hud.ui.document.querySelector("toolbarbutton[category=net]");
+    is(hud.ui.document.activeElement, net,
+       "accesskey for Network category focuses the Net button");
   }
-
-  function onClear()
-  {
-    is(hud.outputNode.textContent.indexOf("foobarz1"), -1, "output cleared");
-    is(hud.jsterm.inputNode.getAttribute("focused"), "true",
-       "jsterm input is focused");
-
-    info("try ctrl-f to focus filter");
-    EventUtils.synthesizeKey("F", { accelKey: true });
-    ok(!hud.jsterm.inputNode.getAttribute("focused"),
-       "jsterm input is not focused");
-    is(hud.ui.filterBox.getAttribute("focused"), "true",
-       "filter input is focused");
-
-    if (Services.appinfo.OS == "Darwin") {
-      ok(hud.ui.getFilterState("network"), "network category is enabled");
-      EventUtils.synthesizeKey("t", { ctrlKey: true });
-      ok(!hud.ui.getFilterState("network"), "accesskey for Network works");
-      EventUtils.synthesizeKey("t", { ctrlKey: true });
-      ok(hud.ui.getFilterState("network"), "accesskey for Network works (again)");
-    }
-    else {
-      EventUtils.synthesizeKey("N", { altKey: true });
-      let net = hud.ui.document.querySelector("toolbarbutton[category=net]");
-      is(hud.ui.document.activeElement, net,
-         "accesskey for Network category focuses the Net button");
-    }
-
-    finishTest();
-  }
-}
+});
diff --git a/browser/devtools/webconsole/test/browser_console_log_inspectable_object.js b/browser/devtools/webconsole/test/browser_console_log_inspectable_object.js
--- a/browser/devtools/webconsole/test/browser_console_log_inspectable_object.js
+++ b/browser/devtools/webconsole/test/browser_console_log_inspectable_object.js
@@ -1,58 +1,50 @@
 /* vim:set ts=2 sw=2 sts=2 et: */
 /* Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/ */
 
 // Test that objects given to console.log() are inspectable.
 
-function test()
-{
-  waitForExplicitFinish();
+"use strict";
 
-  addTab("data:text/html;charset=utf8,test for bug 676722 - inspectable objects for window.console");
+let test = asyncTest(function*() {
+  yield loadTab("data:text/html;charset=utf8,test for bug 676722 - inspectable objects for window.console");
 
-  gBrowser.selectedBrowser.addEventListener("load", function onLoad() {
-    gBrowser.selectedBrowser.removeEventListener("load", onLoad, true);
-    openConsole(null, performTest);
-  }, true);
-}
-
-function performTest(hud)
-{
+  let hud = yield openConsole();
   hud.jsterm.clearOutput(true);
 
   hud.jsterm.execute("myObj = {abba: 'omgBug676722'}");
   hud.jsterm.execute("console.log('fooBug676722', myObj)");
 
-  waitForMessages({
+  let [result] = yield waitForMessages({
     webconsole: hud,
     messages: [{
       text: "fooBug676722",
       category: CATEGORY_WEBDEV,
       severity: SEVERITY_LOG,
       objects: true,
     }],
-  }).then(([result]) => {
-    let msg = [...result.matched][0];
-    ok(msg, "message element");
-    let body = msg.querySelector(".message-body");
-    ok(body, "message body");
-    let clickable = result.clickableElements[0];
-    ok(clickable, "the console.log() object anchor was found");
-    ok(body.textContent.contains('{ abba: "omgBug676722" }'),
-       "clickable node content is correct");
+  });
 
-    hud.jsterm.once("variablesview-fetched",
-      (aEvent, aVar) => {
-        ok(aVar, "object inspector opened on click");
+  let msg = [...result.matched][0];
+  ok(msg, "message element");
 
-        findVariableViewProperties(aVar, [{
-          name: "abba",
-          value: "omgBug676722",
-        }], { webconsole: hud }).then(finishTest);
-      });
+  let body = msg.querySelector(".message-body");
+  ok(body, "message body");
 
-    executeSoon(function() {
-      EventUtils.synthesizeMouse(clickable, 2, 2, {}, hud.iframeWindow);
-    });
+  let clickable = result.clickableElements[0];
+  ok(clickable, "the console.log() object anchor was found");
+  ok(body.textContent.contains('{ abba: "omgBug676722" }'),
+     "clickable node content is correct");
+
+  executeSoon(() => {
+    EventUtils.synthesizeMouse(clickable, 2, 2, {}, hud.iframeWindow);
   });
-}
+
+  let varView = yield hud.jsterm.once("variablesview-fetched");
+  ok(varView, "object inspector opened on click");
+
+  yield findVariableViewProperties(varView, [{
+    name: "abba",
+    value: "omgBug676722",
+  }], { webconsole: hud });
+});
diff --git a/browser/devtools/webconsole/test/browser_console_native_getters.js b/browser/devtools/webconsole/test/browser_console_native_getters.js
--- a/browser/devtools/webconsole/test/browser_console_native_getters.js
+++ b/browser/devtools/webconsole/test/browser_console_native_getters.js
@@ -1,121 +1,99 @@
 /*
  * Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
 // Check that native getters and setters for DOM elements work as expected in
 // variables view - bug 870220.
 
+"use strict";
+
 const TEST_URI = "data:text/html;charset=utf8,<title>bug870220</title>\n" +
                  "<p>hello world\n<p>native getters!";
 
-let gWebConsole, gJSTerm, gVariablesView;
+let test = asyncTest(function*() {
+  yield loadTab(TEST_URI);
+  let hud = yield openConsole();
+  let jsterm = hud.jsterm;
 
-function test()
-{
-  addTab(TEST_URI);
-  browser.addEventListener("load", function onLoad() {
-    browser.removeEventListener("load", onLoad, true);
-    openConsole(null, consoleOpened);
-  }, true);
-}
+  jsterm.execute("document");
 
-function consoleOpened(hud)
-{
-  gWebConsole = hud;
-  gJSTerm = hud.jsterm;
-
-  gJSTerm.execute("document");
-
-  waitForMessages({
+  let [result] = yield waitForMessages({
     webconsole: hud,
     messages: [{
       text: "HTMLDocument \u2192 data:text/html;charset=utf8",
       category: CATEGORY_OUTPUT,
       objects: true,
     }],
-  }).then(onEvalResult);
-}
+  });
 
-function onEvalResult(aResults)
-{
-  let clickable = aResults[0].clickableElements[0];
+  let clickable = result.clickableElements[0];
   ok(clickable, "clickable object found");
 
-  gJSTerm.once("variablesview-fetched", onDocumentFetch);
-  EventUtils.synthesizeMouse(clickable, 2, 2, {}, gWebConsole.iframeWindow)
-}
+  executeSoon(() => {
+    EventUtils.synthesizeMouse(clickable, 2, 2, {}, hud.iframeWindow);
+  });
 
-function onDocumentFetch(aEvent, aVar)
-{
-  gVariablesView = aVar._variablesView;
-  ok(gVariablesView, "variables view object");
+  let fetchedVar = yield jsterm.once("variablesview-fetched");
 
-  findVariableViewProperties(aVar, [
+  let variablesView = fetchedVar._variablesView;
+  ok(variablesView, "variables view object");
+
+  let results = yield findVariableViewProperties(fetchedVar, [
     { name: "title", value: "bug870220" },
     { name: "bgColor" },
-  ], { webconsole: gWebConsole }).then(onDocumentPropsFound);
-}
+  ], { webconsole: hud });
 
-function onDocumentPropsFound(aResults)
-{
-  let prop = aResults[1].matchedProp;
+  let prop = results[1].matchedProp;
   ok(prop, "matched the |bgColor| property in the variables view");
 
   // Check that property value updates work.
-  updateVariablesViewProperty({
+  let updatedVar = yield updateVariablesViewProperty({
     property: prop,
     field: "value",
     string: "'red'",
-    webconsole: gWebConsole,
-    callback: onFetchAfterBackgroundUpdate,
+    webconsole: hud,
   });
-}
 
-function onFetchAfterBackgroundUpdate(aEvent, aVar)
-{
-  info("onFetchAfterBackgroundUpdate");
+  info("on fetch after background update");
 
-  is(content.document.bgColor, "red", "document background color changed");
+  jsterm.clearOutput(true);
+  jsterm.execute("document.bgColor");
 
-  findVariableViewProperties(aVar, [
+  [result] = yield waitForMessages({
+    webconsole: hud,
+    messages: [{
+      text: "red",
+      category: CATEGORY_OUTPUT,
+    }],
+  });
+
+  yield findVariableViewProperties(updatedVar, [
     { name: "bgColor", value: "red" },
-  ], { webconsole: gWebConsole }).then(testParagraphs);
-}
+  ], { webconsole: hud });
 
-function testParagraphs()
-{
-  gJSTerm.execute("$$('p')");
+  jsterm.execute("$$('p')");
 
-  waitForMessages({
-    webconsole: gWebConsole,
+  [result] = yield waitForMessages({
+    webconsole: hud,
     messages: [{
       text: "NodeList [",
       category: CATEGORY_OUTPUT,
       objects: true,
     }],
-  }).then(onEvalNodeList);
-}
+  });
 
-function onEvalNodeList(aResults)
-{
-  let clickable = aResults[0].clickableElements[0];
+  clickable = result.clickableElements[0];
   ok(clickable, "clickable object found");
 
-  gJSTerm.once("variablesview-fetched", onNodeListFetch);
-  EventUtils.synthesizeMouse(clickable, 2, 2, {}, gWebConsole.iframeWindow)
-}
+  executeSoon(() => {
+    EventUtils.synthesizeMouse(clickable, 2, 2, {}, hud.iframeWindow);
+  });
 
-function onNodeListFetch(aEvent, aVar)
-{
-  gVariablesView = aVar._variablesView;
-  ok(gVariablesView, "variables view object");
+  fetchedVar = yield jsterm.once("variablesview-fetched");
 
-  findVariableViewProperties(aVar, [
+  yield findVariableViewProperties(fetchedVar, [
     { name: "0.textContent", value: /hello world/ },
     { name: "1.textContent", value: /native getters/ },
-  ], { webconsole: gWebConsole }).then(() => {
-    gWebConsole = gJSTerm = gVariablesView = null;
-    finishTest();
-  });
-}
+  ], { webconsole: hud });
+});
diff --git a/browser/devtools/webconsole/test/browser_console_variables_view_highlighter.js b/browser/devtools/webconsole/test/browser_console_variables_view_highlighter.js
--- a/browser/devtools/webconsole/test/browser_console_variables_view_highlighter.js
+++ b/browser/devtools/webconsole/test/browser_console_variables_view_highlighter.js
@@ -7,21 +7,21 @@
 // selecting DOM nodes
 
 const TEST_URI = "http://example.com/browser/browser/devtools/webconsole/test/test-bug-952277-highlight-nodes-in-vview.html";
 
 let gWebConsole, gJSTerm, gVariablesView, gToolbox;
 
 function test()
 {
-  addTab(TEST_URI);
-  browser.addEventListener("load", function onLoad() {
-    browser.removeEventListener("load", onLoad, true);
-    openConsole(null, consoleOpened);
-  }, true);
+  loadTab(TEST_URI).then(() => {
+    openConsole().then(hud => {
+      consoleOpened(hud);
+    })
+  });
 }
 
 function consoleOpened(hud)
 {
   gWebConsole = hud;
   gJSTerm = hud.jsterm;
   gToolbox = gDevTools.getToolbox(hud.target);
   gJSTerm.execute("document.querySelectorAll('p')", onQSAexecuted);
diff --git a/browser/devtools/webconsole/test/head.js b/browser/devtools/webconsole/test/head.js
--- a/browser/devtools/webconsole/test/head.js
+++ b/browser/devtools/webconsole/test/head.js
@@ -10,16 +10,17 @@ let {console} = Cu.import("resource://gr
 let {Promise: promise} = Cu.import("resource://gre/modules/Promise.jsm", {});
 let {Task} = Cu.import("resource://gre/modules/Task.jsm", {});
 let {devtools} = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
 let {require, TargetFactory} = devtools;
 let {Utils: WebConsoleUtils} = require("devtools/toolkit/webconsole/utils");
 let {Messages} = require("devtools/webconsole/console-output");
 
 // promise._reportErrors = true; // please never leave me.
+//Services.prefs.setBoolPref("devtools.debugger.log", true);
 
 let gPendingOutputTest = 0;
 
 // The various categories of messages.
 const CATEGORY_NETWORK = 0;
 const CATEGORY_CSS = 1;
 const CATEGORY_JS = 2;
 const CATEGORY_WEBDEV = 3;
@@ -35,51 +36,24 @@ const SEVERITY_LOG = 3;
 
 // The indent of a console group in pixels.
 const GROUP_INDENT = 12;
 
 const WEBCONSOLE_STRINGS_URI = "chrome://browser/locale/devtools/webconsole.properties";
 let WCU_l10n = new WebConsoleUtils.l10n(WEBCONSOLE_STRINGS_URI);
 
 gDevTools.testing = true;
-SimpleTest.registerCleanupFunction(() => {
-  gDevTools.testing = false;
-});
 
 /**
  * Define an async test based on a generator function
  */
 function asyncTest(generator) {
-  return () => Task.spawn(generator).then(null, ok.bind(null, false)).then(finishTest);
-}
-
-function log(aMsg)
-{
-  dump("*** WebConsoleTest: " + aMsg + "\n");
-}
-
-function pprint(aObj)
-{
-  for (let prop in aObj) {
-    if (typeof aObj[prop] == "function") {
-      log("function " + prop);
-    }
-    else {
-      log(prop + ": " + aObj[prop]);
-    }
-  }
-}
-
-let tab, browser, hudId, hud, hudBox, filterBox, outputNode, cs;
-
-function addTab(aURL)
-{
-  gBrowser.selectedTab = gBrowser.addTab(aURL);
-  tab = gBrowser.selectedTab;
-  browser = gBrowser.getBrowserForTab(tab);
+  return () => {
+    Task.spawn(generator).then(finishTest);
+  };
 }
 
 function loadTab(url) {
   let deferred = promise.defer();
 
   let tab = gBrowser.selectedTab = gBrowser.addTab(url);
   let browser = gBrowser.getBrowserForTab(tab);
 
@@ -91,17 +65,17 @@ function loadTab(url) {
   return deferred.promise;
 }
 
 function loadBrowser(browser) {
   let deferred = promise.defer();
 
   browser.addEventListener("load", function onLoad() {
     browser.removeEventListener("load", onLoad, true);
-    deferred.resolve(null)
+    deferred.resolve(null);
   }, true);
 
   return deferred.promise;
 }
 
 function closeTab(tab) {
   let deferred = promise.defer();
 
@@ -200,95 +174,89 @@ function findLogEntry(aString)
  *        Optional tab element for which you want open the Web Console. The
  *        default tab is taken from the global variable |tab|.
  * @param function [aCallback]
  *        Optional function to invoke after the Web Console completes
  *        initialization (web-console-created).
  * @return object
  *         A promise that is resolved once the web console is open.
  */
-function openConsole(aTab, aCallback = function() { })
-{
-  let deferred = promise.defer();
-  let target = TargetFactory.forTab(aTab || tab);
-  gDevTools.showToolbox(target, "webconsole").then(function(toolbox) {
-    let hud = toolbox.getCurrentPanel().hud;
-    hud.jsterm._lazyVariablesView = false;
-    aCallback(hud);
-    deferred.resolve(hud);
-  });
-  return deferred.promise;
-}
+let openConsole = Task.async(function* (aTab) {
+  let target = TargetFactory.forTab(aTab || gBrowser.selectedTab);
+  let toolbox = yield gDevTools.showToolbox(target, "webconsole");
+  let hud = toolbox.getCurrentPanel().hud;
+  hud.jsterm._lazyVariablesView = false;
+  return hud;
+});
 
 /**
  * Close the Web Console for the given tab.
  *
  * @param nsIDOMElement [aTab]
  *        Optional tab element for which you want close the Web Console. The
  *        default tab is taken from the global variable |tab|.
  * @param function [aCallback]
  *        Optional function to invoke after the Web Console completes
  *        closing (web-console-destroyed).
  * @return object
  *         A promise that is resolved once the web console is closed.
  */
-function closeConsole(aTab, aCallback = function() { })
-{
-  let target = TargetFactory.forTab(aTab || tab);
+let closeConsole = Task.async(function* (aTab) {
+  let target = TargetFactory.forTab(aTab || gBrowser.selectedTab);
   let toolbox = gDevTools.getToolbox(target);
   if (toolbox) {
-    let panel = toolbox.getPanel("webconsole");
-    if (panel) {
-      let hudId = panel.hud.hudId;
-      return toolbox.destroy().then(aCallback.bind(null, hudId)).then(null, console.debug);
-    }
-    return toolbox.destroy().then(aCallback.bind(null));
+    yield toolbox.destroy();
   }
-
-  aCallback();
-  return promise.resolve(null);
-}
+});
 
 /**
  * Wait for a context menu popup to open.
  *
  * @param nsIDOMElement aPopup
  *        The XUL popup you expect to open.
  * @param nsIDOMElement aButton
  *        The button/element that receives the contextmenu event. This is
  *        expected to open the popup.
  * @param function aOnShown
  *        Function to invoke on popupshown event.
  * @param function aOnHidden
  *        Function to invoke on popuphidden event.
+ * @return object
+ *         A Promise object that is resolved after the popuphidden event
+ *         callback is invoked.
  */
 function waitForContextMenu(aPopup, aButton, aOnShown, aOnHidden)
 {
   function onPopupShown() {
     info("onPopupShown");
     aPopup.removeEventListener("popupshown", onPopupShown);
 
-    aOnShown();
+    aOnShown && aOnShown();
 
     // Use executeSoon() to get out of the popupshown event.
     aPopup.addEventListener("popuphidden", onPopupHidden);
     executeSoon(() => aPopup.hidePopup());
   }
   function onPopupHidden() {
     info("onPopupHidden");
     aPopup.removeEventListener("popuphidden", onPopupHidden);
-    aOnHidden();
+
+    aOnHidden && aOnHidden();
+
+    deferred.resolve(aPopup);
   }
 
+  let deferred = promise.defer();
   aPopup.addEventListener("popupshown", onPopupShown);
 
   info("wait for the context menu to open");
   let eventDetails = { type: "contextmenu", button: 2};
   EventUtils.synthesizeMouse(aButton, 2, 2, eventDetails,
                              aButton.ownerDocument.defaultView);
+  return deferred.promise;
 }
 
 /**
  * Dump the output of all open Web Consoles - used only for debugging purposes.
  */
 function dumpConsoles()
 {
   if (gPendingOutputTest) {
@@ -328,120 +296,109 @@ function dumpMessageElement(aMessage)
                 "class", aMessage.className,
                 "category", aMessage.category,
                 "severity", aMessage.severity,
                 "repeats", repeats,
                 "clipboardText", aMessage.clipboardText,
                 "text", text);
 }
 
-function finishTest()
-{
-  browser = hudId = hud = filterBox = outputNode = cs = hudBox = null;
-
+let finishTest = Task.async(function* () {
   dumpConsoles();
 
   let browserConsole = HUDService.getBrowserConsole();
   if (browserConsole) {
     if (browserConsole.jsterm) {
       browserConsole.jsterm.clearOutput(true);
     }
-    HUDService.toggleBrowserConsole().then(finishTest);
-    return;
+    yield HUDService.toggleBrowserConsole();
   }
 
-  let hud = HUDService.getHudByWindow(content);
-  if (!hud) {
-    finish();
-    return;
-  }
+  let target = TargetFactory.forTab(gBrowser.selectedTab);
+  yield gDevTools.closeToolbox(target);
 
-  if (hud.jsterm) {
-    hud.jsterm.clearOutput(true);
-  }
-
-  closeConsole(hud.target.tab, finish);
-
-  hud = null;
-}
+  finish();
+});
 
 function tearDown()
 {
+  gDevTools.testing = false;
+
   dumpConsoles();
 
   if (HUDService.getBrowserConsole()) {
     HUDService.toggleBrowserConsole();
   }
 
   let target = TargetFactory.forTab(gBrowser.selectedTab);
   gDevTools.closeToolbox(target);
+
   while (gBrowser.tabs.length > 1) {
     gBrowser.removeCurrentTab();
   }
-  WCU_l10n = tab = browser = hudId = hud = filterBox = outputNode = cs = null;
 }
 
 registerCleanupFunction(tearDown);
 
 waitForExplicitFinish();
 
 /**
  * Polls a given function waiting for it to become true.
  *
  * @param object aOptions
  *        Options object with the following properties:
- *        - validatorFn
+ *        - validator
  *        A validator function that returns a boolean. This is called every few
- *        milliseconds to check if the result is true. When it is true, succesFn
- *        is called and polling stops. If validatorFn never returns true, then
- *        polling timeouts after several tries and a failure is recorded.
- *        - successFn
- *        A function called when the validator function returns true.
- *        - failureFn
- *        A function called if the validator function timeouts - fails to return
- *        true in the given time.
+ *        milliseconds to check if the result is true. When it is true, the
+ *        promise is resolved and polling stops. If validator never returns
+ *        true, then polling timeouts after several tries and the promise is
+ *        rejected.
  *        - name
  *        Name of test. This is used to generate the success and failure
  *        messages.
  *        - timeout
  *        Timeout for validator function, in milliseconds. Default is 5000.
+ * @return object
+ *         A Promise object that is resolved based on the validator function.
  */
 function waitForSuccess(aOptions)
 {
+  let deferred = promise.defer();
   let start = Date.now();
   let timeout = aOptions.timeout || 5000;
+  let {validator} = aOptions;
 
-  function wait(validatorFn, successFn, failureFn)
+  function wait()
   {
     if ((Date.now() - start) > timeout) {
       // Log the failure.
       ok(false, "Timed out while waiting for: " + aOptions.name);
-      failureFn(aOptions);
+      deferred.reject(null);
       return;
     }
 
-    if (validatorFn(aOptions)) {
+    if (validator(aOptions)) {
       ok(true, aOptions.name);
-      successFn();
+      deferred.resolve(null);
     }
     else {
-      setTimeout(function() wait(validatorFn, successFn, failureFn), 100);
+      setTimeout(wait, 100);
     }
   }
 
-  wait(aOptions.validatorFn, aOptions.successFn, aOptions.failureFn);
+  setTimeout(wait, 100);
+
+  return deferred.promise;
 }
 
-function openInspector(aCallback, aTab = gBrowser.selectedTab)
-{
+let openInspector = Task.async(function* (aTab = gBrowser.selectedTab) {
   let target = TargetFactory.forTab(aTab);
-  gDevTools.showToolbox(target, "inspector").then(function(toolbox) {
-    aCallback(toolbox.getCurrentPanel());
-  });
-}
+  let toolbox = yield gDevTools.showToolbox(target, "inspector");
+  return toolbox.getCurrentPanel();
+});
 
 /**
  * Find variables or properties in a VariablesView instance.
  *
  * @param object aView
  *        The VariablesView instance.
  * @param array aRules
  *        The array of rules you want to match. Each rule is an object with:
@@ -775,54 +732,61 @@ function variablesViewExpandTo(aOptions)
  * @param object aOptions
  *        Options for the property update:
  *        - property: the property you want to change.
  *        - field: string that tells what you want to change:
  *          - use "name" to change the property name,
  *          - or "value" to change the property value.
  *        - string: the new string to write into the field.
  *        - webconsole: reference to the Web Console instance we work with.
- *        - callback: function to invoke after the property is updated.
+ * @return object
+ *         A Promise object that is resolved once the property is updated.
  */
-function updateVariablesViewProperty(aOptions)
-{
+let updateVariablesViewProperty = Task.async(function* (aOptions) {
   let view = aOptions.property._variablesView;
   view.window.focus();
   aOptions.property.focus();
 
   switch (aOptions.field) {
     case "name":
       EventUtils.synthesizeKey("VK_RETURN", { shiftKey: true }, view.window);
       break;
     case "value":
       EventUtils.synthesizeKey("VK_RETURN", {}, view.window);
       break;
     default:
       throw new Error("options.field is incorrect");
-      return;
   }
 
+  let deferred = promise.defer();
+
   executeSoon(() => {
     EventUtils.synthesizeKey("A", { accelKey: true }, view.window);
 
     for (let c of aOptions.string) {
-      EventUtils.synthesizeKey(c, {}, gVariablesView.window);
+      EventUtils.synthesizeKey(c, {}, view.window);
     }
 
     if (aOptions.webconsole) {
-      aOptions.webconsole.jsterm.once("variablesview-fetched", aOptions.callback);
+      aOptions.webconsole.jsterm.once("variablesview-fetched").then((varView) => {
+        deferred.resolve(varView);
+      });
     }
 
     EventUtils.synthesizeKey("VK_RETURN", {}, view.window);
 
     if (!aOptions.webconsole) {
-      executeSoon(aOptions.callback);
+      executeSoon(() => {
+        deferred.resolve(null);
+      });
     }
   });
-}
+
+  return deferred.promise;
+});
 
 /**
  * Open the JavaScript debugger.
  *
  * @param object aOptions
  *        Options for opening the debugger:
  *        - tab: the tab you want to open the debugger for.
  * @return object
