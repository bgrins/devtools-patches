# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  da134e30510ce0c5aa0e6dbbb07ca6d493389040

diff --git a/toolkit/content/tests/chrome/popup_trigger.js b/toolkit/content/tests/chrome/popup_trigger.js
--- a/toolkit/content/tests/chrome/popup_trigger.js
+++ b/toolkit/content/tests/chrome/popup_trigger.js
@@ -386,16 +386,17 @@ var popupTests = [
 {
   testname: "activate menuitem with mouse",
   events: [ "DOMMenuInactive thepopup", "command item3",
             "popuphiding thepopup", "popuphidden thepopup",
             "DOMMenuItemInactive item3" ],
   test(testname, step) {
     var item3 = document.getElementById("item3");
     synthesizeMouse(item3, 4, 4, { });
+
   },
   result(testname, step) { checkClosed("trigger", testname); },
 },
 {
   testname: "close popup",
   condition() { return false; },
   events: [ "popuphiding thepopup", "popuphidden thepopup",
             "DOMMenuInactive thepopup" ],
@@ -583,275 +584,277 @@ var popupTests = [
   testname: "menuitem with non accelerator single",
   events: [ "DOMMenuItemInactive item1", "DOMMenuItemActive amenu",
             "DOMMenuItemInactive amenu", "DOMMenuInactive thepopup",
             "command amenu", "popuphiding thepopup", "popuphidden thepopup",
             "DOMMenuItemInactive amenu",
            ],
   test() { sendString("M"); },
   result(testname) {
-    checkClosed("trigger", testname);
-    checkActive(gMenuPopup, "", testname);
-  },
-},
-{
-  testname: "open context popup at screen with all modifiers set",
-  events: [ "popupshowing thepopup 1111", "popupshown thepopup" ],
-  autohide: "thepopup",
-  test(testname, step) {
-    gMenuPopup.openPopupAtScreen(gScreenX + 8, gScreenY + 16, true, gCachedEvent2);
-  },
-},
-{
-  testname: "open popup with open property",
-  events: [ "popupshowing thepopup", "popupshown thepopup" ],
-  test(testname, step) { openMenu(gTrigger); },
-  result(testname, step) {
-    checkOpen("trigger", testname);
-    if (gIsMenu)
-      compareEdge(gTrigger, gMenuPopup, "after_start", 0, 0, testname);
-  },
-},
-{
-  testname: "open submenu with open property",
-  events: [ "popupshowing submenupopup", "DOMMenuItemActive submenu",
-            "popupshown submenupopup" ],
-  test(testname, step) { openMenu(document.getElementById("submenu")); },
-  result(testname, step) {
-    checkOpen("trigger", testname);
-    checkOpen("submenu", testname);
-    // XXXndeakin
-    // getBoundingClientRect doesn't seem to working right for submenus
-    // so disable this test for now
-    // compareEdge(document.getElementById("submenu"),
-    //             document.getElementById("submenupopup"), "end_before", 0, 0, testname);
-  },
-},
-{
-  testname: "hidePopup hides entire chain",
-  events: [ "popuphiding submenupopup", "popuphidden submenupopup",
-            "popuphiding thepopup", "popuphidden thepopup",
-            "DOMMenuInactive submenupopup",
-            "DOMMenuItemInactive submenu", "DOMMenuItemInactive submenu",
-            "DOMMenuInactive thepopup" ],
-  test() { gMenuPopup.hidePopup(); },
-  result(testname, step) {
-    checkClosed("trigger", testname);
-    checkClosed("submenu", testname);
-  },
-},
-{
-  testname: "open submenu with open property without parent open",
-  test(testname, step) { openMenu(document.getElementById("submenu")); },
-  result(testname, step) {
+    console.log("HERE");
     checkClosed("trigger", testname);
-    checkClosed("submenu", testname);
-  },
-},
-{
-  testname: "open popup with open property and position",
-  condition() { return gIsMenu; },
-  events: [ "popupshowing thepopup", "popupshown thepopup" ],
-  test(testname, step) {
-    gMenuPopup.setAttribute("position", "before_start");
-    openMenu(gTrigger);
-  },
-  result(testname, step) {
-    compareEdge(gTrigger, gMenuPopup, "before_start", 0, 0, testname);
-  },
-},
-{
-  testname: "close popup with open property",
-  condition() { return gIsMenu; },
-  events: [ "popuphiding thepopup", "popuphidden thepopup",
-            "DOMMenuInactive thepopup" ],
-  test(testname, step) { closeMenu(gTrigger, gMenuPopup); },
-  result(testname, step) { checkClosed("trigger", testname); },
-},
-{
-  testname: "open popup with open property, position, anchor and alignment",
-  condition() { return gIsMenu; },
-  events: [ "popupshowing thepopup", "popupshown thepopup" ],
-  autohide: "thepopup",
-  test(testname, step) {
-    gMenuPopup.setAttribute("position", "start_after");
-    gMenuPopup.setAttribute("popupanchor", "topright");
-    gMenuPopup.setAttribute("popupalign", "bottomright");
-    openMenu(gTrigger);
-  },
-  result(testname, step) {
-    compareEdge(gTrigger, gMenuPopup, "start_after", 0, 0, testname);
-  },
-},
-{
-  testname: "open popup with open property, anchor and alignment",
-  condition() { return gIsMenu; },
-  events: [ "popupshowing thepopup", "popupshown thepopup" ],
-  autohide: "thepopup",
-  test(testname, step) {
-    gMenuPopup.removeAttribute("position");
-    gMenuPopup.setAttribute("popupanchor", "bottomright");
-    gMenuPopup.setAttribute("popupalign", "topright");
-    openMenu(gTrigger);
-  },
-  result(testname, step) {
-    compareEdge(gTrigger, gMenuPopup, "after_end", 0, 0, testname);
-    gMenuPopup.removeAttribute("popupanchor");
-    gMenuPopup.removeAttribute("popupalign");
-  },
-},
-{
-  testname: "focus and cursor down on trigger",
-  condition() { return gIsMenu; },
-  events: [ "popupshowing thepopup", "popupshown thepopup" ],
-  autohide: "thepopup",
-  test(testname, step) {
-    gTrigger.focus();
-    synthesizeKey("KEY_ArrowDown", {altKey: !platformIsMac()});
-  },
-  result(testname, step) {
-    checkOpen("trigger", testname);
-    checkActive(gMenuPopup, "", testname);
+    console.log("THERE");
+    // checkActive(gMenuPopup, "", testname);
   },
 },
-{
-  testname: "focus and cursor up on trigger",
-  condition() { return gIsMenu; },
-  events: [ "popupshowing thepopup", "popupshown thepopup" ],
-  test(testname, step) {
-    gTrigger.focus();
-    synthesizeKey("KEY_ArrowUp", {altKey: !platformIsMac()});
-  },
-  result(testname, step) {
-    checkOpen("trigger", testname);
-    checkActive(gMenuPopup, "", testname);
-  },
-},
-{
-  testname: "select and enter on menuitem",
-  condition() { return gIsMenu; },
-  events: [ "DOMMenuItemActive item1", "DOMMenuItemInactive item1",
-            "DOMMenuInactive thepopup", "command item1",
-            "popuphiding thepopup", "popuphidden thepopup",
-            "DOMMenuItemInactive item1" ],
-  test(testname, step) {
-    synthesizeKey("KEY_ArrowDown");
-    synthesizeKey("KEY_Enter");
-  },
-  result(testname, step) { checkClosed("trigger", testname); },
-},
-{
-  testname: "focus trigger and key to open",
-  condition() { return gIsMenu; },
-  events: [ "popupshowing thepopup", "popupshown thepopup" ],
-  autohide: "thepopup",
-  test(testname, step) {
-    gTrigger.focus();
-    synthesizeKey(platformIsMac() ? " " : "KEY_F4");
-  },
-  result(testname, step) {
-    checkOpen("trigger", testname);
-    checkActive(gMenuPopup, "", testname);
-  },
-},
-{
-  // the menu should only open when the meta or alt key is not pressed
-  testname: "focus trigger and key wrong modifier",
-  condition() { return gIsMenu; },
-  test(testname, step) {
-    gTrigger.focus();
-    if (platformIsMac())
-      synthesizeKey("KEY_F4", {altKey: true});
-    else
-      synthesizeKey("", { metaKey: true });
-  },
-  result(testname, step) {
-    checkClosed("trigger", testname);
-  },
-},
-{
-  testname: "mouse click on disabled menu",
-  condition() { return gIsMenu; },
-  test(testname, step) {
-    gTrigger.setAttribute("disabled", "true");
-    synthesizeMouse(gTrigger, 4, 4, { });
-  },
-  result(testname, step) {
-    checkClosed("trigger", testname);
-    gTrigger.removeAttribute("disabled");
-  },
-},
-{
-  // openPopup using object as position argument
-  testname: "openPopup with object argument",
-  events: [ "popupshowing thepopup 0000", "popupshown thepopup" ],
-  autohide: "thepopup",
-  test(testname, step) {
-    gMenuPopup.openPopup(gTrigger, { position: "before_start", x: 5, y: 7 });
-    checkOpen("trigger", testname);
-  },
-  result(testname, step) {
-    var triggerrect = gTrigger.getBoundingClientRect();
-    var popuprect = gMenuPopup.getBoundingClientRect();
-    is(Math.round(popuprect.left), Math.round(triggerrect.left + 5), testname + " x position ");
-    is(Math.round(popuprect.bottom), Math.round(triggerrect.top + 7), testname + " y position ");
-  },
-},
-{
-  // openPopup using object as position argument with event
-  testname: "openPopup with object argument with event",
-  events: [ "popupshowing thepopup 1000", "popupshown thepopup" ],
-  autohide: "thepopup",
-  test(testname, step) {
-    gMenuPopup.openPopup(gTrigger, { position: "after_start", x: 0, y: 0,
-                                     triggerEvent: new MouseEvent("mousedown", { altKey: true }),
-                                    });
-    checkOpen("trigger", testname);
-  },
-},
-{
-  // openPopup with no arguments
-  testname: "openPopup with no arguments",
-  events: [ "popupshowing thepopup", "popupshown thepopup" ],
-  autohide: "thepopup",
-  test(testname, step) {
-    gMenuPopup.openPopup();
-  },
-  result(testname, step) {
-    let isMenu = gTrigger.type == "menu";
-    // With no arguments, open in default menu position
-    var triggerrect = gTrigger.getBoundingClientRect();
-    var popuprect = gMenuPopup.getBoundingClientRect();
-    is(Math.round(popuprect.left), isMenu ? Math.round(triggerrect.left) : 0, testname + " x position ");
-    is(Math.round(popuprect.top), isMenu ? Math.round(triggerrect.bottom) : 0, testname + " y position ");
-  },
-},
-{
-  // openPopup should open the menu synchronously, however popupshown
-  // is fired asynchronously
-  testname: "openPopup synchronous",
-  events: [ "popupshowing thepopup", "popupshowing submenupopup",
-            "popupshown thepopup", "DOMMenuItemActive submenu",
-            "popupshown submenupopup" ],
-  test(testname, step) {
-    gMenuPopup.openPopup(gTrigger, "after_start", 0, 0, false, true);
-    document.getElementById("submenupopup").
-      openPopup(gTrigger, "end_before", 0, 0, false, true);
-    checkOpen("trigger", testname);
-    checkOpen("submenu", testname);
-  },
-},
-{
-  // remove the content nodes for the popup
-  testname: "remove content",
-  test(testname, step) {
-    var submenupopup = document.getElementById("submenupopup");
-    submenupopup.remove();
-    var popup = document.getElementById("thepopup");
-    popup.remove();
-  },
-},
+// {
+//   testname: "open context popup at screen with all modifiers set",
+//   events: [ "popupshowing thepopup 1111", "popupshown thepopup" ],
+//   autohide: "thepopup",
+//   test(testname, step) {
+//     gMenuPopup.openPopupAtScreen(gScreenX + 8, gScreenY + 16, true, gCachedEvent2);
+//   },
+// },
+// {
+//   testname: "open popup with open property",
+//   events: [ "popupshowing thepopup", "popupshown thepopup" ],
+//   test(testname, step) { openMenu(gTrigger); },
+//   result(testname, step) {
+//     checkOpen("trigger", testname);
+//     if (gIsMenu)
+//       compareEdge(gTrigger, gMenuPopup, "after_start", 0, 0, testname);
+//   },
+// },
+// {
+//   testname: "open submenu with open property",
+//   events: [ "popupshowing submenupopup", "DOMMenuItemActive submenu",
+//             "popupshown submenupopup" ],
+//   test(testname, step) { openMenu(document.getElementById("submenu")); },
+//   result(testname, step) {
+//     checkOpen("trigger", testname);
+//     checkOpen("submenu", testname);
+//     // XXXndeakin
+//     // getBoundingClientRect doesn't seem to working right for submenus
+//     // so disable this test for now
+//     // compareEdge(document.getElementById("submenu"),
+//     //             document.getElementById("submenupopup"), "end_before", 0, 0, testname);
+//   },
+// },
+// {
+//   testname: "hidePopup hides entire chain",
+//   events: [ "popuphiding submenupopup", "popuphidden submenupopup",
+//             "popuphiding thepopup", "popuphidden thepopup",
+//             "DOMMenuInactive submenupopup",
+//             "DOMMenuItemInactive submenu", "DOMMenuItemInactive submenu",
+//             "DOMMenuInactive thepopup" ],
+//   test() { gMenuPopup.hidePopup(); },
+//   result(testname, step) {
+//     checkClosed("trigger", testname);
+//     checkClosed("submenu", testname);
+//   },
+// },
+// {
+//   testname: "open submenu with open property without parent open",
+//   test(testname, step) { openMenu(document.getElementById("submenu")); },
+//   result(testname, step) {
+//     checkClosed("trigger", testname);
+//     checkClosed("submenu", testname);
+//   },
+// },
+// {
+//   testname: "open popup with open property and position",
+//   condition() { return gIsMenu; },
+//   events: [ "popupshowing thepopup", "popupshown thepopup" ],
+//   test(testname, step) {
+//     gMenuPopup.setAttribute("position", "before_start");
+//     openMenu(gTrigger);
+//   },
+//   result(testname, step) {
+//     compareEdge(gTrigger, gMenuPopup, "before_start", 0, 0, testname);
+//   },
+// },
+// {
+//   testname: "close popup with open property",
+//   condition() { return gIsMenu; },
+//   events: [ "popuphiding thepopup", "popuphidden thepopup",
+//             "DOMMenuInactive thepopup" ],
+//   test(testname, step) { closeMenu(gTrigger, gMenuPopup); },
+//   result(testname, step) { checkClosed("trigger", testname); },
+// },
+// {
+//   testname: "open popup with open property, position, anchor and alignment",
+//   condition() { return gIsMenu; },
+//   events: [ "popupshowing thepopup", "popupshown thepopup" ],
+//   autohide: "thepopup",
+//   test(testname, step) {
+//     gMenuPopup.setAttribute("position", "start_after");
+//     gMenuPopup.setAttribute("popupanchor", "topright");
+//     gMenuPopup.setAttribute("popupalign", "bottomright");
+//     openMenu(gTrigger);
+//   },
+//   result(testname, step) {
+//     compareEdge(gTrigger, gMenuPopup, "start_after", 0, 0, testname);
+//   },
+// },
+// {
+//   testname: "open popup with open property, anchor and alignment",
+//   condition() { return gIsMenu; },
+//   events: [ "popupshowing thepopup", "popupshown thepopup" ],
+//   autohide: "thepopup",
+//   test(testname, step) {
+//     gMenuPopup.removeAttribute("position");
+//     gMenuPopup.setAttribute("popupanchor", "bottomright");
+//     gMenuPopup.setAttribute("popupalign", "topright");
+//     openMenu(gTrigger);
+//   },
+//   result(testname, step) {
+//     compareEdge(gTrigger, gMenuPopup, "after_end", 0, 0, testname);
+//     gMenuPopup.removeAttribute("popupanchor");
+//     gMenuPopup.removeAttribute("popupalign");
+//   },
+// },
+// {
+//   testname: "focus and cursor down on trigger",
+//   condition() { return gIsMenu; },
+//   events: [ "popupshowing thepopup", "popupshown thepopup" ],
+//   autohide: "thepopup",
+//   test(testname, step) {
+//     gTrigger.focus();
+//     synthesizeKey("KEY_ArrowDown", {altKey: !platformIsMac()});
+//   },
+//   result(testname, step) {
+//     checkOpen("trigger", testname);
+//     checkActive(gMenuPopup, "", testname);
+//   },
+// },
+// {
+//   testname: "focus and cursor up on trigger",
+//   condition() { return gIsMenu; },
+//   events: [ "popupshowing thepopup", "popupshown thepopup" ],
+//   test(testname, step) {
+//     gTrigger.focus();
+//     synthesizeKey("KEY_ArrowUp", {altKey: !platformIsMac()});
+//   },
+//   result(testname, step) {
+//     checkOpen("trigger", testname);
+//     checkActive(gMenuPopup, "", testname);
+//   },
+// },
+// {
+//   testname: "select and enter on menuitem",
+//   condition() { return gIsMenu; },
+//   events: [ "DOMMenuItemActive item1", "DOMMenuItemInactive item1",
+//             "DOMMenuInactive thepopup", "command item1",
+//             "popuphiding thepopup", "popuphidden thepopup",
+//             "DOMMenuItemInactive item1" ],
+//   test(testname, step) {
+//     synthesizeKey("KEY_ArrowDown");
+//     synthesizeKey("KEY_Enter");
+//   },
+//   result(testname, step) { checkClosed("trigger", testname); },
+// },
+// {
+//   testname: "focus trigger and key to open",
+//   condition() { return gIsMenu; },
+//   events: [ "popupshowing thepopup", "popupshown thepopup" ],
+//   autohide: "thepopup",
+//   test(testname, step) {
+//     gTrigger.focus();
+//     synthesizeKey(platformIsMac() ? " " : "KEY_F4");
+//   },
+//   result(testname, step) {
+//     checkOpen("trigger", testname);
+//     checkActive(gMenuPopup, "", testname);
+//   },
+// },
+// {
+//   // the menu should only open when the meta or alt key is not pressed
+//   testname: "focus trigger and key wrong modifier",
+//   condition() { return gIsMenu; },
+//   test(testname, step) {
+//     gTrigger.focus();
+//     if (platformIsMac())
+//       synthesizeKey("KEY_F4", {altKey: true});
+//     else
+//       synthesizeKey("", { metaKey: true });
+//   },
+//   result(testname, step) {
+//     checkClosed("trigger", testname);
+//   },
+// },
+// {
+//   testname: "mouse click on disabled menu",
+//   condition() { return gIsMenu; },
+//   test(testname, step) {
+//     gTrigger.setAttribute("disabled", "true");
+//     synthesizeMouse(gTrigger, 4, 4, { });
+//   },
+//   result(testname, step) {
+//     checkClosed("trigger", testname);
+//     gTrigger.removeAttribute("disabled");
+//   },
+// },
+// {
+//   // openPopup using object as position argument
+//   testname: "openPopup with object argument",
+//   events: [ "popupshowing thepopup 0000", "popupshown thepopup" ],
+//   autohide: "thepopup",
+//   test(testname, step) {
+//     gMenuPopup.openPopup(gTrigger, { position: "before_start", x: 5, y: 7 });
+//     checkOpen("trigger", testname);
+//   },
+//   result(testname, step) {
+//     var triggerrect = gTrigger.getBoundingClientRect();
+//     var popuprect = gMenuPopup.getBoundingClientRect();
+//     is(Math.round(popuprect.left), Math.round(triggerrect.left + 5), testname + " x position ");
+//     is(Math.round(popuprect.bottom), Math.round(triggerrect.top + 7), testname + " y position ");
+//   },
+// },
+// {
+//   // openPopup using object as position argument with event
+//   testname: "openPopup with object argument with event",
+//   events: [ "popupshowing thepopup 1000", "popupshown thepopup" ],
+//   autohide: "thepopup",
+//   test(testname, step) {
+//     gMenuPopup.openPopup(gTrigger, { position: "after_start", x: 0, y: 0,
+//                                      triggerEvent: new MouseEvent("mousedown", { altKey: true }),
+//                                     });
+//     checkOpen("trigger", testname);
+//   },
+// },
+// {
+//   // openPopup with no arguments
+//   testname: "openPopup with no arguments",
+//   events: [ "popupshowing thepopup", "popupshown thepopup" ],
+//   autohide: "thepopup",
+//   test(testname, step) {
+//     gMenuPopup.openPopup();
+//   },
+//   result(testname, step) {
+//     let isMenu = gTrigger.type == "menu";
+//     // With no arguments, open in default menu position
+//     var triggerrect = gTrigger.getBoundingClientRect();
+//     var popuprect = gMenuPopup.getBoundingClientRect();
+//     is(Math.round(popuprect.left), isMenu ? Math.round(triggerrect.left) : 0, testname + " x position ");
+//     is(Math.round(popuprect.top), isMenu ? Math.round(triggerrect.bottom) : 0, testname + " y position ");
+//   },
+// },
+// {
+//   // openPopup should open the menu synchronously, however popupshown
+//   // is fired asynchronously
+//   testname: "openPopup synchronous",
+//   events: [ "popupshowing thepopup", "popupshowing submenupopup",
+//             "popupshown thepopup", "DOMMenuItemActive submenu",
+//             "popupshown submenupopup" ],
+//   test(testname, step) {
+//     gMenuPopup.openPopup(gTrigger, "after_start", 0, 0, false, true);
+//     document.getElementById("submenupopup").
+//       openPopup(gTrigger, "end_before", 0, 0, false, true);
+//     checkOpen("trigger", testname);
+//     checkOpen("submenu", testname);
+//   },
+// },
+// {
+//   // remove the content nodes for the popup
+//   testname: "remove content",
+//   test(testname, step) {
+//     var submenupopup = document.getElementById("submenupopup");
+//     submenupopup.remove();
+//     var popup = document.getElementById("thepopup");
+//     popup.remove();
+//   },
+// },
 
 ];
 
 function platformIsMac() {
     return navigator.platform.indexOf("Mac") > -1;
 }
diff --git a/toolkit/content/tests/widgets/popup_shared.js b/toolkit/content/tests/widgets/popup_shared.js
--- a/toolkit/content/tests/widgets/popup_shared.js
+++ b/toolkit/content/tests/widgets/popup_shared.js
@@ -52,22 +52,22 @@ function startPopupTests(tests) {
 
   gPopupTests = tests;
   gWindowUtils = SpecialPowers.getDOMWindowUtils(window);
 
   goNext();
 }
 
 function finish() {
-  if (window.opener) {
-    window.close();
-    window.opener.SimpleTest.finish();
-    return;
-  }
-  SimpleTest.finish();
+  // if (window.opener) {
+  //   window.close();
+  //   window.opener.SimpleTest.finish();
+  //   return;
+  // }
+  // SimpleTest.finish();
 }
 
 function ok(condition, message) {
   if (window.opener)
     window.opener.SimpleTest.ok(condition, message);
   else
     SimpleTest.ok(condition, message);
 }
@@ -83,17 +83,17 @@ function disableNonTestMouse(aDisable) {
   gWindowUtils.disableNonTestMouseEvents(aDisable);
 }
 
 function eventOccurred(event) {
   if (gPopupTests.length <= gTestIndex) {
     ok(false, "Extra " + event.type + " event fired");
     return;
   }
-
+  console.log("event occured", event.originalTarget.localName, event.target.localName);
   var test = gPopupTests[gTestIndex];
   if ("autohide" in test && gAutoHide) {
     if (event.type == "DOMMenuInactive") {
       gAutoHide = false;
       setTimeout(goNextStep, 0);
     }
     return;
   }
@@ -209,17 +209,17 @@ function goNext() {
     function() {
       setTimeout(goNextStepSync, 0);
     }
   );
 }
 
 function goNextStepSync() {
   if (gTestIndex >= 0 && "end" in gPopupTests[gTestIndex] && gPopupTests[gTestIndex].end) {
-    finish();
+    // finish();
     return;
   }
 
   gTestIndex++;
   gTestStepIndex = 0;
   if (gTestIndex < gPopupTests.length) {
     var test = gPopupTests[gTestIndex];
     // Set the location hash so it's easy to see which test is running
