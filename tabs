# HG changeset patch
# Parent 6886edadd69e5a9ed1a9aa8a9f0ea24896cd03bd
# User Brian Grinstead <bgrinstead@mozilla.com>
tabs

diff --git a/browser/devtools/projecteditor/lib/plugins/tabs/tabs.js b/browser/devtools/projecteditor/lib/plugins/tabs/tabs.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/projecteditor/lib/plugins/tabs/tabs.js
@@ -0,0 +1,80 @@
+/* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+const { Class } = require("sdk/core/heritage");
+const { registerPlugin, Plugin } = require("projecteditor/plugins/core");
+const { getLocalizedString } = require("projecteditor/helpers/l10n");
+
+// Handles the new command.
+var Tabs = Class({
+  extends: Plugin,
+
+  init: function() {
+
+    // this.scrollbox = this.host.createElement("arrowscrollbox", {
+    //   parent: "#plugin-toolbar-left",
+    //   // parent: this.tabbox,
+    //   flex: "1"
+    // });
+
+    this.tabbox = this.host.createElement("tabbox", {
+      parent: "#plugin-toolbar-left",
+      // parent: this.scrollbox,
+      flex: "1"
+    });
+    this.tabs = this.host.createElement("tabs", {
+      parent: this.tabbox,
+    });
+    this.tabs.addEventListener("select", () => {
+      console.log("Select listener", this.tabs.selectedItem, this.tabs.selectedIndex);
+      if (!this.tabs.selectedItem) {
+        return;
+      }
+
+      if (this.stuff.has(this.tabs.selectedItem)) {
+        let resource = this.stuff.get(this.tabs.selectedItem);
+        this.host.openResource(resource);
+      }
+    });
+    this.stuff = new WeakMap();
+  },
+  onEditorActivated: function(editor, resource) {
+    console.log("editor activated", resource.displayName, this.stuff.has(resource));
+    for (let i = 0; i < this.tabs.children.length; i++) {
+      let child = this.tabs.children[i];
+      let tabResource = this.stuff.get(child);
+      if (tabResource && tabResource === resource && this.tabs.selectedItem != child) {
+        console.log("Selecting for resource", i, resource.displayName, child.outerHTML,  this.tabs.selectedItem == child)
+        this.tabs.selectedItem = child;
+        return;
+      }
+    }
+    // if (this.stuff.has(resource)) {
+    //   this.tabs.selectedItem = this.stuff.get(resource);
+    // }
+  },
+  onEditorCreated: function(editor, resource) {
+    console.log("editor created", resource.displayName);
+
+    if (!resource || resource.isDir) {
+      return;
+    }
+
+    let box = this.host.createElement("tab");
+    box.textContent = resource.displayName;
+    this.tabs.appendChild(box);
+    this.stuff.set(box, resource);
+  },
+
+  destroy: function() {
+    this.tabbox.remove();
+    this.tabbox = this.tabs = this.stuff = null;
+  },
+
+});
+
+exports.Tabs = Tabs;
+registerPlugin(Tabs);
diff --git a/browser/devtools/projecteditor/lib/projecteditor.js b/browser/devtools/projecteditor/lib/projecteditor.js
--- a/browser/devtools/projecteditor/lib/projecteditor.js
+++ b/browser/devtools/projecteditor/lib/projecteditor.js
@@ -23,17 +23,18 @@ const ITCHPAD_URL = "chrome://browser/co
 
 // Enabled Plugins
 require("projecteditor/plugins/dirty/dirty");
 require("projecteditor/plugins/delete/delete");
 require("projecteditor/plugins/new/new");
 require("projecteditor/plugins/save/save");
 require("projecteditor/plugins/image-view/plugin");
 require("projecteditor/plugins/app-manager/plugin");
-require("projecteditor/plugins/status-bar/plugin");
+// require("projecteditor/plugins/status-bar/plugin");
+require("projecteditor/plugins/tabs/tabs");
 
 // Uncomment to enable logging.
 // require("projecteditor/plugins/logging/logging");
 
 /**
  * This is the main class tying together an instance of the ProjectEditor.
  * The frontend is contained inside of this.iframe, which loads projecteditor.xul.
  *
@@ -428,17 +429,17 @@ var ProjectEditor = Class({
    *               The tag name of the element to create.
    * @param Object options
    *               "command": DOMNode or string ID of a command element.
    *               "parent": DOMNode or selector of parent to append child to.
    *               anything other keys are set as an attribute as the element.
    * @returns DOMElement
    *          The element that has been created.
    */
-  createElement: function(type, options) {
+  createElement: function(type, options = {}) {
     let elt = this.document.createElement(type);
 
     let parent;
 
     for (let opt in options) {
       if (opt === "command") {
         let command = typeof(options.command) === "string" ? options.command : options.command.id;
         elt.setAttribute("command", command);
@@ -541,18 +542,18 @@ var ProjectEditor = Class({
 
   /**
    * Dispatch an onEditorCreated event, and listen for other events specific
    * to this editor instance.
    *
    * @param Editor editor
    *               The new editor instance.
    */
-  _onEditorCreated: function(editor) {
-    this.pluginDispatch("onEditorCreated", editor);
+  _onEditorCreated: function(editor, resource) {
+    this.pluginDispatch("onEditorCreated", editor, resource);
     this._editorListenAndDispatch(editor, "change", "onEditorChange");
     this._editorListenAndDispatch(editor, "cursorActivity", "onEditorCursorActivity");
     this._editorListenAndDispatch(editor, "load", "onEditorLoad");
     this._editorListenAndDispatch(editor, "save", "onEditorSave");
 
     editor.on("focus", () => {
       this.projectTree.selectResource(this.resourceFor(editor));
     });
diff --git a/browser/devtools/projecteditor/lib/shells.js b/browser/devtools/projecteditor/lib/shells.js
--- a/browser/devtools/projecteditor/lib/shells.js
+++ b/browser/devtools/projecteditor/lib/shells.js
@@ -140,17 +140,17 @@ var ShellDeck = Class({
    *
    * @returns Shell
    */
   _createShell: function(defaultResource) {
     let shell = Shell(this.host, defaultResource);
 
     shell.editorAppended.then(() => {
       this.shells.set(shell.resource, shell);
-      emit(this, "editor-created", shell.editor);
+      emit(this, "editor-created", shell.editor, shell.resource);
       if (this.currentShell === shell) {
         this.selectShell(shell);
       }
 
     });
 
     shell.load();
     this.deck.appendChild(shell.elt);
diff --git a/browser/themes/shared/devtools/projecteditor/projecteditor.css b/browser/themes/shared/devtools/projecteditor/projecteditor.css
--- a/browser/themes/shared/devtools/projecteditor/projecteditor.css
+++ b/browser/themes/shared/devtools/projecteditor/projecteditor.css
@@ -26,17 +26,17 @@
 }
 
 #projecteditor-menubar {
   display: none;
 }
 
 #projecteditor-toolbar,
 #projecteditor-toolbar-bottom {
-  display: none; /* For now don't show the status bars */
+  /*display: none; *//* For now don't show the status bars */
   min-height: 22px;
   height: 22px;
   background: rgb(237, 237, 237);
 }
 
 #sources {
   overflow: auto;
 }
