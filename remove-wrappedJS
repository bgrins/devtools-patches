# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  7bbb08844061d72ad0ab32e6477f63796bad83b1
Bug 1176653 - Remove wrappedJSObject and WebConsoleUtils.unwrap from values jsterm helper;r=bholley

diff --git a/toolkit/devtools/webconsole/test/chrome.ini b/toolkit/devtools/webconsole/test/chrome.ini
--- a/toolkit/devtools/webconsole/test/chrome.ini
+++ b/toolkit/devtools/webconsole/test/chrome.ini
@@ -6,16 +6,17 @@ support-files =
   data.json
   data.json^headers^
   network_requests_iframe.html
   sandboxed_iframe.html
 
 [test_basics.html]
 [test_bug819670_getter_throws.html]
 [test_cached_messages.html]
+[test_commands_other.html]
 [test_commands_registration.html]
 [test_consoleapi.html]
 [test_consoleapi_innerID.html]
 [test_file_uri.html]
 [test_reflow.html]
 [test_jsterm.html]
 [test_jsterm_cd_iframe.html]
 [test_jsterm_last_result.html]
diff --git a/toolkit/devtools/webconsole/test/test_commands_other.html b/toolkit/devtools/webconsole/test/test_commands_other.html
new file mode 100644
--- /dev/null
+++ b/toolkit/devtools/webconsole/test/test_commands_other.html
@@ -0,0 +1,83 @@
+<!DOCTYPE HTML>
+<html lang="en">
+<head>
+  <meta charset="utf8">
+  <title>Test for the other command helpers</title>
+  <script type="text/javascript" src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
+  <script type="text/javascript;version=1.8" src="common.js"></script>
+  <!-- Any copyright is dedicated to the Public Domain.
+     - http://creativecommons.org/publicdomain/zero/1.0/ -->
+</head>
+<body>
+<p>Test for the querySelector / querySelectorAll helpers</p>
+
+<script class="testbody" type="text/javascript;version=1.8">
+SimpleTest.waitForExplicitFinish();
+let gState;
+let gWin;
+let tests;
+
+function evaluateJS(input) {
+  return new Promise((resolve) => gState.client.evaluateJS(input, resolve));
+}
+
+function startTest() {
+  info ("Content window opened, attaching console to it");
+
+  let systemPrincipal = Cc["@mozilla.org/systemprincipal;1"].createInstance(Ci.nsIPrincipal);
+  ok (!gWin.document.nodePrincipal.equals(systemPrincipal),
+      "The test document is not using the system principal");
+
+  attachConsole([], state => {
+    gState = state;
+    runTests(tests, testEnd);
+  }, true);
+}
+
+tests = [
+  Task.async(function* keys() {
+    let response = yield evaluateJS("keys({foo: 'bar'})");
+    checkObject(response, {
+      from: gState.actor,
+      result: {
+        class: "Array",
+        preview: {
+          items: ["foo"]
+        }
+      }
+    });
+    nextTest();
+  }),
+  Task.async(function* values() {
+    let response = yield evaluateJS("values({foo: 'bar'})");
+    checkObject(response, {
+      from: gState.actor,
+      result: {
+        class: "Array",
+        preview: {
+          items: ["bar"]
+        }
+      }
+    });
+    nextTest();
+  }),
+];
+
+function testEnd() {
+  gWin.close();
+  gWin = null;
+  closeDebugger(gState, function() {
+    gState = null;
+    SimpleTest.finish();
+  });
+}
+
+window.onload = function() {
+  // Open a content window to test XRay functionality on built in functions.
+  gWin = window.open("data:text/html,");
+  info ("Waiting for content window to load");
+  gWin.onload = startTest;
+}
+</script>
+</body>
+</html>
diff --git a/toolkit/devtools/webconsole/test/test_jsterm_queryselector.html b/toolkit/devtools/webconsole/test/test_jsterm_queryselector.html
--- a/toolkit/devtools/webconsole/test/test_jsterm_queryselector.html
+++ b/toolkit/devtools/webconsole/test/test_jsterm_queryselector.html
@@ -9,34 +9,63 @@
      - http://creativecommons.org/publicdomain/zero/1.0/ -->
 </head>
 <body>
 <p>Test for the querySelector / querySelectorAll helpers</p>
 
 <script class="testbody" type="text/javascript;version=1.8">
 SimpleTest.waitForExplicitFinish();
 let gState;
+let gWin;
 
 function evaluateJS(input) {
   return new Promise((resolve) => gState.client.evaluateJS(input, resolve));
 }
 
 function startTest() {
-  removeEventListener("load", startTest);
+  info ("Content window opened, attaching console to it");
+
+  let systemPrincipal = Cc["@mozilla.org/systemprincipal;1"].createInstance(Ci.nsIPrincipal);
+  ok (!gWin.document.nodePrincipal.equals(systemPrincipal),
+      "The test document is not using the system principal");
+
   attachConsole([], state => {
     gState = state;
     let tests = [
+      setupWindow,
+      checkQuerySelector,
       checkQuerySelectorAll,
       checkQuerySelectorAllNotExist,
       checkQuerySelectorAllException
     ];
     runTests(tests, testEnd);
   }, true);
 }
 
+let setupWindow = Task.async(function*() {
+  info ("Shimming window functions for the content privileged tab");
+  yield evaluateJS("document.querySelector = function() { throw 'should not call qS'; }");
+  yield evaluateJS("document.querySelectorAll = function() { throw 'should not call qSA'; }");
+  nextTest();
+});
+
+let checkQuerySelector = Task.async(function*() {
+  info ("$ returns an DOMNode");
+  let response = yield evaluateJS("$('body')");
+  basicResultCheck(response, "$('body')", {
+    type: "object",
+    class: "HTMLBodyElement",
+    preview: {
+      kind: "DOMNode",
+      nodeName: "body"
+    }
+  });
+  nextTest();
+});
+
 let checkQuerySelectorAll = Task.async(function*() {
   info ("$$ returns an array");
   let response = yield evaluateJS("$$('body')");
   basicResultCheck(response, "$$('body')", {
     type: "object",
     class: "Array",
     preview: {
       length: 1
@@ -81,18 +110,25 @@ function basicResultCheck(response, inpu
     input: input,
     result: output,
   });
   ok(!response.exception, "no eval exception");
   ok(!response.helperResult, "no helper result");
 }
 
 function testEnd() {
+  gWin.close();
+  gWin = null;
   closeDebugger(gState, function() {
     gState = null;
     SimpleTest.finish();
   });
 }
 
-addEventListener("load", startTest);
+window.onload = function() {
+  // Open a content window to test XRay functionality on built in functions.
+  gWin = window.open("data:text/html,");
+  info ("Waiting for content window to load");
+  gWin.onload = startTest;
+}
 </script>
 </body>
 </html>
diff --git a/toolkit/devtools/webconsole/utils.js b/toolkit/devtools/webconsole/utils.js
--- a/toolkit/devtools/webconsole/utils.js
+++ b/toolkit/devtools/webconsole/utils.js
@@ -38,31 +38,16 @@ const CONSOLE_ENTRY_THRESHOLD = 5;
 const MAX_AUTOCOMPLETE_ATTEMPTS = exports.MAX_AUTOCOMPLETE_ATTEMPTS = 100000;
 
 const CONSOLE_WORKER_IDS = exports.CONSOLE_WORKER_IDS = [ 'SharedWorker', 'ServiceWorker', 'Worker' ];
 
 // Prevent iterating over too many properties during autocomplete suggestions.
 const MAX_AUTOCOMPLETIONS = exports.MAX_AUTOCOMPLETIONS = 1500;
 
 let WebConsoleUtils = {
-  /**
-   * Convenience function to unwrap a wrapped object.
-   *
-   * @param aObject the object to unwrap.
-   * @return aObject unwrapped.
-   */
-  unwrap: function WCU_unwrap(aObject)
-  {
-    try {
-      return XPCNativeWrapper.unwrap(aObject);
-    }
-    catch (ex) {
-      return aObject;
-    }
-  },
 
   /**
    * Wrap a string in an nsISupportsString object.
    *
    * @param string aString
    * @return nsISupportsString
    */
   supportsString: function WCU_supportsString(aString)
@@ -1445,16 +1430,17 @@ ConsoleAPIListener.prototype =
    *        The message topic received from the observer service.
    */
   observe: function CAL_observe(aMessage, aTopic)
   {
     if (!this.owner) {
       return;
     }
 
+    // Need the wrappedJSObject to be able to access innerID and consoleID.
     let apiMessage = aMessage.wrappedJSObject;
     if (this.window && CONSOLE_WORKER_IDS.indexOf(apiMessage.innerID) == -1) {
       let msgWindow = Services.wm.getCurrentInnerWindowWithId(apiMessage.innerID);
       if (!msgWindow || !this.layoutHelpers.isIncludedInTopLevelWindow(msgWindow)) {
         // Not the same window!
         return;
       }
     }
@@ -1636,20 +1622,25 @@ WebConsoleCommands._registerOriginal("$"
  *
  * @param string aSelector
  *        A string that is passed to window.document.querySelectorAll.
  * @return nsIDOMNodeList
  *         Returns the result of document.querySelectorAll(aSelector).
  */
 WebConsoleCommands._registerOriginal("$$", function JSTH_$$(aOwner, aSelector)
 {
-  let results = aOwner.window.document.querySelectorAll(aSelector);
-  let nodes = aOwner.window.wrappedJSObject.Array.from(results);
+  let nodes = aOwner.window.document.querySelectorAll(aSelector);
 
-  return nodes;
+  // Calling aOwner.window.Array.from() doesn't work without accessing the
+  // wrappedJSObject, so just loop through the results instead.
+  let result = new aOwner.window.Array();
+  for (let i = 0; i < nodes.length; i++) {
+    result.push(nodes[i]);
+  }
+  return result;
 });
 
 /**
  * Returns the result of the last console input evaluation
  *
  * @return object|undefined
  * Returns last console evaluation or undefined
  */
@@ -1666,18 +1657,21 @@ WebConsoleCommands._registerOriginal("$_
  * @param string aXPath
  *        xPath search query to execute.
  * @param [optional] nsIDOMNode aContext
  *        Context to run the xPath query on. Uses window.document if not set.
  * @return array of nsIDOMNode
  */
 WebConsoleCommands._registerOriginal("$x", function JSTH_$x(aOwner, aXPath, aContext)
 {
-  let nodes = new aOwner.window.wrappedJSObject.Array();
-  let doc = aOwner.window.document;
+  let nodes = new aOwner.window.Array();
+
+  // Not waiving Xrays, since we want the original Document.evaluate function,
+  // instead of anything that's been redefined.
+  let doc =  aOwner.window.document;
   aContext = aContext || doc;
 
   let results = doc.evaluate(aXPath, aContext, null,
                              Ci.nsIDOMXPathResult.ANY_TYPE, null);
   let node;
   while ((node = results.iterateNext())) {
     nodes.push(node);
   }
@@ -1721,36 +1715,40 @@ WebConsoleCommands._registerOriginal("cl
  * Returns the result of Object.keys(aObject).
  *
  * @param object aObject
  *        Object to return the property names from.
  * @return array of strings
  */
 WebConsoleCommands._registerOriginal("keys", function JSTH_keys(aOwner, aObject)
 {
-  return aOwner.window.wrappedJSObject.Object.keys(WebConsoleUtils.unwrap(aObject));
+  // Need to waive Xrays so we can iterate functions and accessor properties
+  return Cu.cloneInto(Object.keys(Cu.waiveXrays(aObject)), aOwner.window);
 });
 
 /**
  * Returns the values of all properties on aObject.
  *
  * @param object aObject
  *        Object to display the values from.
  * @return array of string
  */
 WebConsoleCommands._registerOriginal("values", function JSTH_values(aOwner, aObject)
 {
-  let arrValues = new aOwner.window.wrappedJSObject.Array();
-  let obj = WebConsoleUtils.unwrap(aObject);
+  let values = [];
+  // Need to waive Xrays so we can iterate functions and accessor properties
+  let waived = Cu.waiveXrays(aObject);
+  let names = Object.getOwnPropertyNames(waived);
 
-  for (let prop in obj) {
-    arrValues.push(obj[prop]);
+  for (let name of names) {
+    values.push(waived[name]);
+    debugger;
   }
 
-  return arrValues;
+  return Cu.cloneInto(values, aOwner.window);
 });
 
 /**
  * Opens a help window in MDN.
  */
 WebConsoleCommands._registerOriginal("help", function JSTH_help(aOwner)
 {
   aOwner.helperResult = { type: "help" };
@@ -1828,17 +1826,17 @@ WebConsoleCommands._registerOriginal("pp
   aOwner.helperResult = { rawOutput: true };
 
   if (typeof aObject == "function") {
     return aObject + "\n";
   }
 
   let output = [];
 
-  let obj = WebConsoleUtils.unwrap(aObject);
+  let obj = aObject;
   for (let name in obj) {
     let desc = WebConsoleUtils.getPropertyDescriptor(obj, name) || {};
     if (desc.get || desc.set) {
       // TODO: Bug 842672 - toolkit/ imports modules from browser/.
       let getGrip = VariablesView.getGrip(desc.get);
       let setGrip = VariablesView.getGrip(desc.set);
       let getString = VariablesView.getString(getGrip);
       let setString = VariablesView.getString(setGrip);
