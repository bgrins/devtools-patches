# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  4ce67352b2a9744ac51f0333cea0455e3d59bbf3
Bug 1420990 - Build the DOM for container items directly in containers.js instead of with XBL

diff --git a/browser/components/preferences/handlers.css b/browser/components/preferences/handlers.css
--- a/browser/components/preferences/handlers.css
+++ b/browser/components/preferences/handlers.css
@@ -5,20 +5,16 @@
 #handlersView > richlistitem {
   -moz-binding: url("chrome://browser/content/preferences/handlers.xml#handler");
 }
 
 #handlersView > richlistitem[selected="true"] {
   -moz-binding: url("chrome://browser/content/preferences/handlers.xml#handler-selected");
 }
 
-#containersView > richlistitem {
-  -moz-binding: url("chrome://browser/content/preferences/handlers.xml#container");
-}
-
 /**
  * Make the icons appear.
  * Note: we display the icon box for every item whether or not it has an icon
  * so the labels of all the items align vertically.
  */
 .actionsMenu > menupopup > menuitem > .menu-iconic-left {
   display: -moz-box;
   min-width: 16px;
diff --git a/browser/components/preferences/handlers.xml b/browser/components/preferences/handlers.xml
--- a/browser/components/preferences/handlers.xml
+++ b/browser/components/preferences/handlers.xml
@@ -1,24 +1,15 @@
 <?xml version="1.0"?>
 
 <!-- This Source Code Form is subject to the terms of the Mozilla Public
    - License, v. 2.0. If a copy of the MPL was not distributed with this
    - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
 <!-- import-globals-from in-content/main.js -->
 
-<!DOCTYPE overlay [
-  <!ENTITY % brandDTD SYSTEM "chrome://branding/locale/brand.dtd">
-  <!ENTITY % applicationsDTD SYSTEM "chrome://browser/locale/preferences/applications.dtd">
-  <!ENTITY % containersDTD SYSTEM "chrome://browser/locale/preferences/containers.dtd">
-  %brandDTD;
-  %applicationsDTD;
-  %containersDTD;
-]>
-
 <bindings id="handlerBindings"
           xmlns="http://www.mozilla.org/xbl"
           xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
           xmlns:xbl="http://www.mozilla.org/xbl">
 
   <binding id="handler-base" extends="chrome://global/content/bindings/richlistbox.xml#richlistitem">
     <implementation>
       <property name="type" readonly="true">
@@ -66,39 +57,16 @@
     <implementation>
       <constructor>
         gMainPane.rebuildActionsMenu();
       </constructor>
     </implementation>
 
   </binding>
 
-  <binding id="container">
-    <content>
-      <xul:hbox flex="1" equalsize="always">
-        <xul:hbox flex="1" align="center">
-          <xul:hbox xbl:inherits="data-identity-icon=containerIcon,data-identity-color=containerColor" height="24" width="24" class="userContext-icon"/>
-          <xul:label flex="1" crop="end" xbl:inherits="xbl:text=containerName,highlightable"/>
-        </xul:hbox>
-        <xul:hbox flex="1" align="right">
-          <xul:button anonid="preferencesButton"
-                      label="&preferencesButton.label;"
-                      xbl:inherits="value=userContextId"
-                      oncommand="gContainersPane.onPreferenceCommand(event.originalTarget)">
-          </xul:button>
-          <xul:button anonid="removeButton"
-                      label="&removeButton.label;"
-                      xbl:inherits="value=userContextId"
-                      oncommand="gContainersPane.onRemoveCommand(event.originalTarget)">
-          </xul:button>
-        </xul:hbox>
-      </xul:hbox>
-    </content>
-  </binding>
-
   <binding id="offlineapp"
 	   extends="chrome://global/content/bindings/listbox.xml#listitem">
     <content>
       <children>
 	<xul:listcell xbl:inherits="label=origin"/>
 	<xul:listcell xbl:inherits="label=usage"/>
       </children>
     </content>
diff --git a/browser/components/preferences/in-content/containers.js b/browser/components/preferences/in-content/containers.js
--- a/browser/components/preferences/in-content/containers.js
+++ b/browser/components/preferences/in-content/containers.js
@@ -28,20 +28,44 @@ let gContainersPane = {
 
   _rebuildView() {
     const containers = ContextualIdentityService.getPublicIdentities();
     while (this._list.firstChild) {
       this._list.firstChild.remove();
     }
     for (let container of containers) {
       let item = document.createElement("richlistitem");
-      item.setAttribute("containerName", ContextualIdentityService.getUserContextLabel(container.userContextId));
-      item.setAttribute("containerIcon", container.icon);
-      item.setAttribute("containerColor", container.color);
-      item.setAttribute("userContextId", container.userContextId);
+      let userContextId = container.userContextId;
+
+      item.innerHTML = `
+      <hbox flex="1" equalsize="always">
+        <hbox flex="1" align="center">
+          <hbox height="24" width="24" class="userContext-icon"/>
+          <label flex="1" crop="end" class="userContext-label"/>
+        </hbox>
+        <hbox flex="1" align="right" class="container-buttons"></hbox>
+      </hbox>`;
+
+      item.querySelector(".userContext-icon").setAttribute("data-identity-icon", container.icon);
+      item.querySelector(".userContext-icon").setAttribute("data-identity-color", container.color);
+      item.querySelector(".userContext-label").setAttribute("value", ContextualIdentityService.getUserContextLabel(userContextId));
+
+      let preferencesButton = document.createElement("button");
+      preferencesButton.setAttribute("label", "&preferencesButton.label;"); // Change this string
+      preferencesButton.setAttribute("value", userContextId);
+      preferencesButton.setAttribute("oncommand",
+        "gContainersPane.onPreferenceCommand(event.originalTarget)");
+      item.querySelector(".container-buttons").appendChild(preferencesButton);
+
+      let removeButton = document.createElement("button");
+      removeButton.setAttribute("label", "&removeButton.label;"); // Change this string
+      removeButton.setAttribute("value", userContextId);
+      removeButton.setAttribute("oncommand",
+        "gContainersPane.onRemoveCommand(event.originalTarget)");
+      item.querySelector(".container-buttons").appendChild(removeButton);
 
       this._list.appendChild(item);
     }
   },
 
   async onRemoveCommand(button) {
     let userContextId = parseInt(button.getAttribute("value"), 10);
 
