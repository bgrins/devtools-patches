# HG changeset patch
# Parent 0ed3e26cbc2be9ccc96c32ee83d67e229a731e8e
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 1046803 - Markup view: too much whitespace in text node preview WIP

diff --git a/browser/devtools/markupview/markup-view.js b/browser/devtools/markupview/markup-view.js
--- a/browser/devtools/markupview/markup-view.js
+++ b/browser/devtools/markupview/markup-view.js
@@ -1898,62 +1898,94 @@ function TextEditor(aContainer, aNode, a
   this.container = aContainer;
   this.markup = this.container.markup;
   this.node = aNode;
   this.template = this.markup.template.bind(aTemplate);
   this._selected = false;
 
   this.markup.template(aTemplate, this);
 
-  editableField({
+  let opts = {
     element: this.value,
+    initial: this.getValue(),
     stopOnReturn: true,
     trigger: "dblclick",
     multiline: true,
     done: (aVal, aCommit) => {
       if (!aCommit) {
         return;
       }
+      /// XXX: don't do this (modifying opts by reference so the next inplace
+      /// editor will pick up the changes). At least handle undos if it's going
+      /// to be done this way.
+      opts.initial = aVal;
+
       this.node.getNodeValue().then(longstr => {
         longstr.string().then(oldValue => {
           longstr.release().then(null, console.error);
 
           this.container.undo.do(() => {
             this.node.setNodeValue(aVal).then(() => {
               this.markup.nodeChanged(this.node);
             });
           }, () => {
             this.node.setNodeValue(oldValue).then(() => {
               this.markup.nodeChanged(this.node);
             })
           });
         });
       });
     }
-  });
+  };
+
+
+  editableField(opts);
 
   this.update();
 }
 
 TextEditor.prototype = {
   get selected() this._selected,
   set selected(aValue) {
     if (aValue === this._selected) {
       return;
     }
     this._selected = aValue;
     this.update();
   },
 
+  getValue: function() {
+
+    if (!this.node.incompleteValue) {
+      return this.node.shortValue;
+    }
+
+    throw "Not implemented for long values yet";
+
+  },
+
   update: function() {
     if (!this.selected || !this.node.incompleteValue) {
-      let text = this.node.shortValue;
+      let text = this.node.shortValue.replace(/\s+/g,' ');
       // XXX: internationalize the elliding
       if (this.node.incompleteValue) {
+        let endsWithSpace = text.endsWith(" ");
         text += "â€¦";
+        if (endsWithSpace) {
+          text += " ";
+        }
+      }
+
+      // XXX: Come up with a better way to determine whether
+      // it should be quoted.
+      let needsQuotes = (this.node._parent && this.node._parent.numChildren > 1) &&
+        (text.endsWith(" ") ||  text.startsWith(" "));
+
+      if (needsQuotes) {
+        text = "\"" + text + "\"";
       }
       this.value.textContent = text;
     } else {
       let longstr = null;
       this.node.getNodeValue().then(ret => {
         longstr = ret;
         return longstr.string();
       }).then(str => {
diff --git a/browser/devtools/markupview/markup-view.xhtml b/browser/devtools/markupview/markup-view.xhtml
--- a/browser/devtools/markupview/markup-view.xhtml
+++ b/browser/devtools/markupview/markup-view.xhtml
@@ -80,17 +80,17 @@
      --><span save="${name}" class="attr-name theme-fg-color2"></span><!--
      -->=&quot;<!--
      --><span save="${val}" class="attr-value theme-fg-color6"></span><!--
      -->&quot;<!--
    --></span><!--
  --></span>
 
     <span id="template-text" save="${elt}" class="editor text">
-      <pre save="${value}" style="display:inline-block;" tabindex="0"></pre>
+      <pre style="display:inline-block;" save="${value}" tabindex="0"></pre>
     </span>
 
     <span id="template-comment"
           save="${elt}"
           class="editor comment theme-comment"><!--
    --><span>&lt;!--</span><!--
    --><pre save="${value}" style="display:inline-block;" tabindex="0"></pre><!--
    --><span>--&gt;</span><!--
