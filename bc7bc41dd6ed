
# HG changeset patch
# User Yura Zenevich <yzenevich@mozilla.com>
# Date 1459370222 14400
# Node ID bc7bc41dd6ede38813b0180839348ff049a2a75d
# Parent  fbc5d286c7dcc7405d3c9f2e29fa6f00501a5a49
Bug 1242852 - (part 2) making inspector toolbar keyboard accessible.

MozReview-Commit-ID: BmLtydkQao7
---
 devtools/client/inspector/breadcrumbs.js           | 36 +++++++++++++++
 devtools/client/inspector/inspector-search.js      |  9 +++-
 devtools/client/inspector/test/browser.ini         |  3 ++
 .../browser_inspector_breadcrumbs_keyboard_trap.js | 52 ++++++++++++++++++++++
 .../inspector/test/browser_inspector_search-05.js  |  4 +-
 .../test/browser_inspector_search-navigation.js    |  8 ++--
 .../test/browser_inspector_search_keyboard_trap.js | 48 ++++++++++++++++++++
 devtools/client/inspector/test/head.js             | 15 +++++++
 8 files changed, 169 insertions(+), 6 deletions(-)
 create mode 100644 devtools/client/inspector/test/browser_inspector_breadcrumbs_keyboard_trap.js
 create mode 100644 devtools/client/inspector/test/browser_inspector_search_keyboard_trap.js

diff --git a/devtools/client/inspector/breadcrumbs.js b/devtools/client/inspector/breadcrumbs.js
--- a/devtools/client/inspector/breadcrumbs.js
+++ b/devtools/client/inspector/breadcrumbs.js
@@ -10,6 +10,7 @@
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 const Services = require("Services");
 const promise = require("promise");
+const FocusManager = Services.focus;
 
 const ENSURE_SELECTION_VISIBLE_DELAY = 50; // ms
 const ELLIPSIS = Services.prefs.getComplexValue("intl.ellipsis", Ci.nsIPrefLocalizedString).data;
@@ -72,6 +73,7 @@
     this.container.addEventListener("keypress", this, true);
     this.container.addEventListener("mouseover", this, true);
     this.container.addEventListener("mouseleave", this, true);
+    this.container.addEventListener("focus", this, true);
 
     // We will save a list of already displayed nodes in this array.
     this.nodeHierarchy = [];
@@ -290,6 +292,19 @@
       this.handleMouseOver(event);
     } else if (event.type == "mouseleave") {
       this.handleMouseLeave(event);
+    } else if (event.type == "focus") {
+      this.handleFocus(event);
+    }
+  },
+
+  handleFocus: function(event) {
+    let control = this.container.querySelector(
+      ".breadcrumbs-widget-item[checked]");
+    if (control && control !== event.target) {
+      // If we already have a selected breadcrumb and focus target is not it,
+      // move focus to selected breadcrumb.
+      event.preventDefault();
+      control.focus();
     }
   },
 
@@ -379,6 +394,26 @@
             whatToShow: Ci.nsIDOMNodeFilter.SHOW_ELEMENT
           });
           break;
+        case this.chromeWin.KeyEvent.DOM_VK_TAB:
+          // Tabbing when breadcrumbs or its contents are focused should move
+          // focus to next/previous focusable element relative to breadcrumbs
+          // themselves.
+          let elm, type;
+          if (event.shiftKey) {
+            elm = this.container;
+            type = FocusManager.MOVEFOCUS_BACKWARD;
+          } else {
+            // To move focus to next element following the breadcrumbs, relative
+            // element needs to be the last element in breadcrumbs' subtree.
+            let last = this.container.lastChild;
+            while (last && last.lastChild) {
+              last = last.lastChild;
+            }
+            elm = last;
+            type = FocusManager.MOVEFOCUS_FORWARD;
+          }
+          FocusManager.moveFocus(this.chromeWin, elm, type, 0);
+          break;
       }
 
       return navigate.then(node => this.navigateTo(node));
@@ -403,6 +438,7 @@
     this.container.removeEventListener("keypress", this, true);
     this.container.removeEventListener("mouseover", this, true);
     this.container.removeEventListener("mouseleave", this, true);
+    this.container.removeEventListener("focus", this, true);
 
     this.empty();
     this.separators.remove();
diff --git a/devtools/client/inspector/inspector-search.js b/devtools/client/inspector/inspector-search.js
--- a/devtools/client/inspector/inspector-search.js
+++ b/devtools/client/inspector/inspector-search.js
@@ -281,7 +281,6 @@
     let query = this.searchBox.value;
     switch(event.keyCode) {
       case event.DOM_VK_RETURN:
-      case event.DOM_VK_TAB:
         if (this.searchPopup.isOpen &&
             this.searchPopup.getItemAtIndex(this.searchPopup.itemCount - 1)
                 .preLabel == query) {
@@ -291,6 +290,14 @@
         }
         break;
 
+      case event.DOM_VK_TAB:
+        // When tab is pressed with focus on searchbox: do not change its value
+        // even if the popup is open, close the popup, do not prevent the
+        // default to avoid a keyboard trap.
+        this.hidePopup();
+        this.emit("processing-done");
+        return;
+
       case event.DOM_VK_UP:
         if (this.searchPopup.isOpen && this.searchPopup.itemCount > 0) {
           this.searchPopup.focus();
diff --git a/devtools/client/inspector/test/browser.ini b/devtools/client/inspector/test/browser.ini
--- a/devtools/client/inspector/test/browser.ini
+++ b/devtools/client/inspector/test/browser.ini
@@ -34,6 +34,8 @@
 [browser_inspector_breadcrumbs.js]
 [browser_inspector_breadcrumbs_highlight_hover.js]
 [browser_inspector_breadcrumbs_keybinding.js]
+[browser_inspector_breadcrumbs_keyboard_trap.js]
+skip-if = os == "mac" # Full keyboard navigation on OSX only works if Full Keyboard Access setting is set to All Control in System Keyboard Preferences
 [browser_inspector_breadcrumbs_menu.js]
 [browser_inspector_breadcrumbs_mutations.js]
 [browser_inspector_delete-selected-node-01.js]
@@ -110,6 +112,7 @@
 [browser_inspector_search-05.js]
 [browser_inspector_search-06.js]
 [browser_inspector_search-07.js]
+[browser_inspector_search_keyboard_trap.js]
 [browser_inspector_search-reserved.js]
 [browser_inspector_search-selection.js]
 [browser_inspector_select-docshell.js]
diff --git a/devtools/client/inspector/test/browser_inspector_breadcrumbs_keyboard_trap.js b/devtools/client/inspector/test/browser_inspector_breadcrumbs_keyboard_trap.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/inspector/test/browser_inspector_breadcrumbs_keyboard_trap.js
@@ -0,0 +1,52 @@
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+"use strict";
+
+const TEST_URL = URL_ROOT + "doc_inspector_breadcrumbs.html";
+
+/**
+ * Test data has the format of:
+ * [
+ *   {Boolean} flag, indicating if breadcrumbs contains focus
+ *   {String}  key event's key
+ *   {?Object} Optional event data such as shiftKey, etc
+ * ]
+ *
+ */
+const TEST_DATA = [
+  // Move the focus away from breadcrumbs to a next focusable element.
+  [ false, "VK_TAB", { } ],
+  // Move the focus back to the breadcrumbs.
+  [ true, "VK_TAB", { shiftKey: true } ],
+  // Move the focus back away from breadcrumbs to a previous focusable element.
+  [ false, "VK_TAB", { shiftKey: true } ],
+  // Move the focus back to the breadcrumbs.
+  [ true, "VK_TAB", { } ]
+];
+
+add_task(function*() {
+  let { inspector } = yield openInspectorForURL(TEST_URL);
+  let doc = inspector.panelDoc;
+
+  info("Selecting the test node");
+  yield selectNode("#i2", inspector);
+
+  info("Clicking on the corresponding breadcrumbs node to focus it");
+  let container = doc.getElementById("inspector-breadcrumbs");
+  let button = container.querySelector("button[checked]");
+  button.click();
+
+  // Ensure a breadcrumb is focused.
+  is(doc.activeElement, button, "Focus is on selected breadcrumb");
+
+  for (let [focused, ...key] of TEST_DATA) {
+    EventUtils.synthesizeKey(...key);
+    if (focused) {
+      is(doc.activeElement, button, "Focus is on selected breadcrumb");
+    } else {
+      yield inspector.once("breadcrumbs-navigation-cancelled");
+      ok(!containsFocus(doc, container), "Focus is outside of breadcrumbs");
+    }
+  }
+});
diff --git a/devtools/client/inspector/test/browser_inspector_search-05.js b/devtools/client/inspector/test/browser_inspector_search-05.js
--- a/devtools/client/inspector/test/browser_inspector_search-05.js
+++ b/devtools/client/inspector/test/browser_inspector_search-05.js
@@ -34,9 +34,9 @@
   info("Wait for search query to complete");
   yield inspector.searchSuggestions._lastQuery;
 
-  info("Press tab to fill the search input with the first suggestion");
+  info("Press enter to fill the search input with the first suggestion");
   processingDone = once(inspector.searchSuggestions, "processing-done");
-  EventUtils.synthesizeKey("VK_TAB", {}, inspector.panelWin);
+  EventUtils.synthesizeKey("VK_RETURN", {}, inspector.panelWin);
   yield processingDone;
 
   info("Press enter and expect a new selection");
diff --git a/devtools/client/inspector/test/browser_inspector_search-navigation.js b/devtools/client/inspector/test/browser_inspector_search-navigation.js
--- a/devtools/client/inspector/test/browser_inspector_search-navigation.js
+++ b/devtools/client/inspector/test/browser_inspector_search-navigation.js
@@ -15,13 +15,15 @@
   ["VK_UP", "div.c1"],
   ["VK_DOWN", "div.l1"],
   ["VK_DOWN", "div.l1"],
+  ["VK_UP", "div.l1"],
+  ["VK_TAB", "div.l1"],
   ["VK_BACK_SPACE", "div.l"],
-  ["VK_TAB", "div.l1"],
+  ["VK_RETURN", "div.l1"],
   [" ", "div.l1 "],
   ["VK_UP", "div.l1 div"],
   ["VK_UP", "div.l1 div"],
   [".", "div.l1 div."],
-  ["VK_TAB", "div.l1 div.c1"],
+  ["VK_RETURN", "div.l1 div.c1"],
   ["VK_BACK_SPACE", "div.l1 div.c"],
   ["VK_BACK_SPACE", "div.l1 div."],
   ["VK_BACK_SPACE", "div.l1 div"],
@@ -34,7 +36,7 @@
   ["VK_BACK_SPACE", "div.l1 "],
   ["VK_UP", "div.l1 div"],
   ["VK_UP", "div.l1 div"],
-  ["VK_TAB", "div.l1 div"],
+  ["VK_RETURN", "div.l1 div"],
   ["VK_BACK_SPACE", "div.l1 di"],
   ["VK_BACK_SPACE", "div.l1 d"],
   ["VK_BACK_SPACE", "div.l1 "],
diff --git a/devtools/client/inspector/test/browser_inspector_search_keyboard_trap.js b/devtools/client/inspector/test/browser_inspector_search_keyboard_trap.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/inspector/test/browser_inspector_search_keyboard_trap.js
@@ -0,0 +1,48 @@
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+"use strict";
+
+const TEST_URL = URL_ROOT + "doc_inspector_search.html";
+
+/**
+ * Test data has the format of:
+ * [
+ *   {Boolean} flag, indicating if search box contains focus
+ *   {Array}   list of keys that include key code and optional event data
+ *             (shiftKey, etc)
+ * ]
+ *
+ */
+const TEST_DATA = [
+  // Move focus to a next focusable element.
+  [ false, [ "VK_TAB", {} ] ],
+  // Move focus back to searchbox.
+  [ true, [ "VK_TAB", { shiftKey: true } ] ],
+  // Open popup and then tab away to the a next focusable element.
+  [ false, [ "c", {} ], [ "VK_TAB", {} ] ],
+  // Move focus back to searchbox.
+  [ true, [ "VK_TAB", { shiftKey: true } ] ]
+];
+
+add_task(function*() {
+  let { inspector } = yield openInspectorForURL(TEST_URL);
+  let { searchBox } = inspector;
+  let doc = inspector.panelDoc;
+
+  yield selectNode("#b1", inspector);
+  yield focusSearchBoxUsingShortcut(inspector.panelWin);
+
+  // Ensure a searchbox is focused.
+  ok(containsFocus(doc, searchBox), "Focus is in a searchbox");
+
+  for (let [focused, ...keys] of TEST_DATA) {
+    for (let key of keys) {
+      let done = !focused ?
+        inspector.searchSuggestions.once("processing-done") : Promise.resolve();
+      EventUtils.synthesizeKey(...key);
+      yield done;
+    }
+    is(containsFocus(doc, searchBox), focused, "Focus is set correctly");
+  }
+});
diff --git a/devtools/client/inspector/test/head.js b/devtools/client/inspector/test/head.js
--- a/devtools/client/inspector/test/head.js
+++ b/devtools/client/inspector/test/head.js
@@ -608,3 +608,18 @@
   SimpleTest.waitForClipboard(expected, setup, def.resolve, def.reject);
   return def.promise;
 }
+
+/**
+ * Checks if document's active element is within the given element.
+ * @param  {HTMLDocument} aDoc document with active element in question
+ * @param  {DOMNode} aElm element tested on focus containment
+ * @return {Boolean}
+ */
+function containsFocus(aDoc, aElm) {
+  let elm = aDoc.activeElement;
+  while (elm) {
+    if (elm === aElm) { return true; }
+    elm = elm.parentNode;
+  }
+  return false;
+}

