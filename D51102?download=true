# HG changeset patch
# Parent  58bb9946f9ec43c3ffa7931a69b333a67ee6e904

diff --git a/devtools/client/responsive/components/App.js b/devtools/client/responsive/components/App.js
--- a/devtools/client/responsive/components/App.js
+++ b/devtools/client/responsive/components/App.js
@@ -356,16 +356,20 @@ class App extends PureComponent {
   }
 
   onUpdateDeviceDisplayed(device, deviceType, displayed) {
     this.props.dispatch(updateDeviceDisplayed(device, deviceType, displayed));
   }
 
   onUpdateDeviceModal(isOpen, modalOpenedFromViewport) {
     this.props.dispatch(updateDeviceModal(isOpen, modalOpenedFromViewport));
+
+    if (Services.prefs.getBoolPref("devtools.responsive.browserUI.enabled")) {
+      window.postMessage({ type: "update-device-modal", isOpen }, "*");
+    }
   }
 
   render() {
     const { devices, networkThrottling, screenshot, viewports } = this.props;
 
     const {
       onAddCustomDevice,
       onBrowserMounted,
diff --git a/devtools/client/responsive/responsive-browser.css b/devtools/client/responsive/responsive-browser.css
--- a/devtools/client/responsive/responsive-browser.css
+++ b/devtools/client/responsive/responsive-browser.css
@@ -16,28 +16,36 @@
   background-color: var(--rdm-browser-container-background);
 }
 
 .browserContainer.responsive-mode > .rdm-toolbar {
   border: none;
   height: 30px;
 }
 
+.browserContainer.responsive-mode > .rdm-toolbar.device-modal-opened {
+  -moz-box-flex: 10000;
+  height: auto;
+}
+
+.browserContainer.responsive-mode > .rdm-toolbar.device-modal-opened ~ .browserStack {
+  display: none;
+}
+
 .browserContainer.responsive-mode > .browserStack {
   margin-top: 15px;
   min-height: 0;
   min-width: 0;
   overflow: auto;
 
   /* This could go post https://bugzilla.mozilla.org/show_bug.cgi?id=1576946 */
   display: grid;
 }
 
 .browserContainer.responsive-mode > .browserStack > * {
-  align-self: center;
   justify-self: center;
   /* This could go post https://bugzilla.mozilla.org/show_bug.cgi?id=1576946 */
   grid-area: 1 / 1;
   height: var(--rdm-height);
   width: var(--rdm-width);
 }
 
 .browserContainer.responsive-mode > .browserStack > browser {
diff --git a/devtools/client/responsive/ui.js b/devtools/client/responsive/ui.js
--- a/devtools/client/responsive/ui.js
+++ b/devtools/client/responsive/ui.js
@@ -311,16 +311,21 @@ class ResponsiveUI {
       this.toolWindow.removeEventListener("message", this);
     } else {
       this.rdmFrame.contentWindow.removeEventListener("message", this);
       this.rdmFrame.remove();
 
       this.browserContainerEl.classList.remove("responsive-mode");
       this.browserStackEl.style.removeProperty("--rdm-width");
       this.browserStackEl.style.removeProperty("--rdm-height");
+
+      if (this.resizeModalObserver) {
+        this.resizeModalObserver.unobserve(this.browserStackEl);
+        this.resizeModalObserver = null;
+      }
     }
 
     if (!this.isBrowserUIEnabled && !isTabContentDestroying) {
       // Notify the inner browser to stop the frame script
       await message.request(this.toolWindow, "stop-frame-script");
     }
 
     // Ensure the tab is reloaded if required when exiting RDM so that no emulated
@@ -452,16 +457,19 @@ class ResponsiveUI {
       case "viewport-orientation-change":
         this.onRotateViewport(event);
         break;
       case "viewport-resize":
         this.onResizeViewport(event);
         break;
       case "screenshot":
         this.onScreenshot();
+        break;
+      case "update-device-modal":
+        this.onUpdateDeviceModal(event);
     }
   }
 
   async onChangeDevice(event) {
     const { pixelRatio, touch, userAgent } = event.data.device;
     let reloadNeeded = false;
     await this.updateDPPX(pixelRatio);
 
@@ -570,16 +578,44 @@ class ResponsiveUI {
     if (captureScreenshotSupported) {
       const data = await this.emulationFront.captureScreenshot();
       await saveScreenshot(this.browserWindow, {}, data);
 
       message.post(this.rdmFrame.contentWindow, "screenshot-captured");
     }
   }
 
+  onUpdateDeviceModal(event) {
+    // Since the modal forces the toolbar to use fixed positioning, it cannot be
+    // re-sized responsively within its parent browser container. So we set up a
+    // ResizeObserver on the browser stack to set the height/width values on the
+    // RDM toolbar when the device modal is open.
+    // if (!this.resizeModalObserver) {
+    //   this.resizeModalObserver = new this.browserWindow.ResizeObserver(
+    //     entries => {
+    //       for (const entry of entries) {
+    //         const { width, height } = entry.contentRect;
+    //         this.rdmFrame.style.setProperty("width", `${width}px`);
+    //         this.rdmFrame.style.setProperty("height", `${height}px`);
+    //       }
+    //     }
+    //   );
+    // }
+
+    if (event.data.isOpen) {
+      this.rdmFrame.classList.add("device-modal-opened");
+      // this.resizeModalObserver.observe(this.browserStackEl);
+    } else {
+      this.rdmFrame.classList.remove("device-modal-opened");
+      // this.rdmFrame.style.setProperty("width", null);
+      // this.rdmFrame.style.setProperty("height", null);
+      // this.resizeModalObserver.unobserve(this.browserStackEl);
+    }
+  }
+
   /**
    * Restores the previous state of RDM.
    */
   async restoreState() {
     const deviceState = await asyncStorage.getItem(
       "devtools.responsive.deviceState"
     );
     if (deviceState) {
