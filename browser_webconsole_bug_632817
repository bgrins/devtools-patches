# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  c50ccab4a59a0c8d73476435a724b551ae174020
Bug 1243975 - Enable browser_webconsole_bug_632817.js in e10s;r=linclark

diff --git a/devtools/client/webconsole/test/browser.ini b/devtools/client/webconsole/test/browser.ini
--- a/devtools/client/webconsole/test/browser.ini
+++ b/devtools/client/webconsole/test/browser.ini
@@ -244,17 +244,16 @@ skip-if = e10s # Bug 1042253 - webconsol
 [browser_webconsole_bug_622303_persistent_filters.js]
 [browser_webconsole_bug_623749_ctrl_a_select_all_winnt.js]
 skip-if = os != "win"
 [browser_webconsole_bug_630733_response_redirect_headers.js]
 [browser_webconsole_bug_632275_getters_document_width.js]
 [browser_webconsole_bug_632347_iterators_generators.js]
 skip-if = e10s # Bug 1042253 - webconsole tests disabled with e10s
 [browser_webconsole_bug_632817.js]
-skip-if = e10s # Bug 1042253 - webconsole tests disabled with e10s
 [browser_webconsole_bug_642108_pruneTest.js]
 [browser_webconsole_autocomplete_and_selfxss.js]
 [browser_webconsole_bug_644419_log_limits.js]
 [browser_webconsole_bug_646025_console_file_location.js]
 [browser_webconsole_bug_651501_document_body_autocomplete.js]
 [browser_webconsole_bug_653531_highlighter_console_helper.js]
 skip-if = e10s # Bug 1042253 - webconsole tests disabled with e10s
 [browser_webconsole_bug_658368_time_methods.js]
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_632817.js b/devtools/client/webconsole/test/browser_webconsole_bug_632817.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_632817.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_632817.js
@@ -19,17 +19,17 @@ const TEST_DATA_JSON_CONTENT =
 
 const TEST_URI = "data:text/html;charset=utf-8,Web Console network logging " +
                  "tests";
 
 var lastRequest = null;
 var requestCallback = null;
 var hud, browser;
 
-function test() {
+add_task(function*() {
   const PREF = "devtools.webconsole.persistlog";
   const NET_PREF = "devtools.webconsole.filter.networkinfo";
   const NETXHR_PREF = "devtools.webconsole.filter.netxhr";
   const MIXED_AC_PREF = "security.mixed_content.block_active_content";
   let original = Services.prefs.getBoolPref(NET_PREF);
   let originalXhr = Services.prefs.getBoolPref(NETXHR_PREF);
   let originalMixedActive = Services.prefs.getBoolPref(MIXED_AC_PREF);
   Services.prefs.setBoolPref(NET_PREF, true);
@@ -38,46 +38,46 @@ function test() {
   Services.prefs.setBoolPref(PREF, true);
   registerCleanupFunction(() => {
     Services.prefs.setBoolPref(NET_PREF, original);
     Services.prefs.setBoolPref(NETXHR_PREF, originalXhr);
     Services.prefs.setBoolPref(MIXED_AC_PREF, originalMixedActive);
     Services.prefs.clearUserPref(PREF);
   });
 
-  loadTab(TEST_URI).then((tab) => {
-    browser = tab.browser;
-    openConsole().then((hudConsole) => {
-      hud = hudConsole;
+  let tab = yield loadTab(TEST_URI);
+  browser = tab.browser;
+  let hudConsole = yield openConsole();
+  hud = hudConsole;
 
-      HUDService.lastFinishedRequest.callback = function(request) {
-        lastRequest = request;
-        if (requestCallback) {
-          requestCallback();
-        }
-      };
 
-      executeSoon(testPageLoad);
-    });
-  });
-}
+  yield testPageLoad();
+  yield testPageLoadBody();
+
+  yield new Promise(r=>r);
+});
 
 function testPageLoad() {
-  requestCallback = function() {
-    // Check if page load was logged correctly.
-    ok(lastRequest, "Page load was logged");
-    is(lastRequest.request.url, TEST_NETWORK_REQUEST_URI,
-      "Logged network entry is page load");
-    is(lastRequest.request.method, "GET", "Method is correct");
-    lastRequest = null;
-    requestCallback = null;
-    executeSoon(testPageLoadBody);
-  };
 
   content.location = TEST_NETWORK_REQUEST_URI;
+  lastRequest = yield new Promise(resolve => {
+    HUDService.lastFinishedRequest.callback = function(request) {
+      resolve(request);
+    };
+  });
+
+  // Check if page load was logged correctly.
+  ok(lastRequest, "Page load was logged");
+  is(lastRequest.request.url, TEST_NETWORK_REQUEST_URI,
+    "Logged network entry is page load");
+  is(lastRequest.request.method, "GET", "Method is correct");
+  // lastRequest = null;
+  // requestCallback = null;
+  // executeSoon(testPageLoadBody);
+
 }
 
 function testPageLoadBody() {
   let loaded = false;
   let requestCallbackInvoked = false;
 
   // Turn off logging of request bodies and check again.
   requestCallback = function() {
@@ -209,21 +209,21 @@ function testLiveFilteringOnSearchString
   setStringFilter("'foo'");
   is(countMessageNodes(), 0, "the log nodes are hidden when searching for " +
     "the string 'foo'");
 
   setStringFilter("foo\"bar'baz\"boo'");
   is(countMessageNodes(), 0, "the log nodes are hidden when searching for " +
     "the string \"foo\"bar'baz\"boo'\"");
 
-  HUDService.lastFinishedRequest.callback = null;
-  lastRequest = null;
-  requestCallback = null;
-  hud = browser = null;
-  finishTest();
+  // HUDService.lastFinishedRequest.callback = null;
+  // lastRequest = null;
+  // requestCallback = null;
+  // hud = browser = null;
+  // finishTest();
 }
 
 function countMessageNodes() {
   let messageNodes = hud.outputNode.querySelectorAll(".message");
   let displayedMessageNodes = 0;
   let view = hud.iframeWindow;
   for (let i = 0; i < messageNodes.length; i++) {
     let computedStyle = view.getComputedStyle(messageNodes[i], null);
