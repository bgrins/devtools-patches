# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  978f68c17245c37283a3635629efff66d2cdcba9
Part 1 - Remove references to #content, preferring gBrowser

MozReview-Commit-ID: KbE5dlTWmS

diff --git a/browser/base/content/tabbrowser.xml b/browser/base/content/tabbrowser.xml
--- a/browser/base/content/tabbrowser.xml
+++ b/browser/base/content/tabbrowser.xml
@@ -3654,16 +3654,17 @@
       </method>
 
       <property name="selectedTab">
         <getter>
           return this.mCurrentTab;
         </getter>
         <setter>
           <![CDATA[
+          dump("Setting selected tab for tabbrowser " + gNavToolbox.collapsed + "\n");
           if (gNavToolbox.collapsed && !this._allowTabChange) {
             return this.mTabBox.selectedTab;
           }
           // Update the tab
           this.mTabBox.selectedTab = val;
           return val;
           ]]>
         </setter>
@@ -5483,16 +5484,17 @@
               break;
             }
           }
         ]]></body>
       </method>
 
       <constructor>
         <![CDATA[
+          dump("Tabbrowser constructor running!\n");
           this.mCurrentBrowser = document.getAnonymousElementByAttribute(this, "anonid", "initialBrowser");
           this.mCurrentBrowser.permanentKey = {};
 
           Services.obs.addObserver(this, "contextual-identity-updated");
 
           this.mCurrentTab = this.tabContainer.firstChild;
           const nsIEventListenerService =
             Components.interfaces.nsIEventListenerService;
@@ -5989,17 +5991,17 @@
 
       <destructor>
         <![CDATA[
           Services.prefs.removeObserver("privacy.userContext", this);
         ]]>
       </destructor>
 
       <field name="tabbrowser" readonly="true">
-        document.getElementById(this.getAttribute("tabbrowser"));
+        window.gBrowser
       </field>
 
       <field name="tabbox" readonly="true">
         this.tabbrowser.mTabBox;
       </field>
 
       <field name="contextMenu" readonly="true">
         document.getElementById("tabContextMenu");
@@ -6139,16 +6141,17 @@
 
       <method name="_setPositionalAttributes">
         <body><![CDATA[
           let visibleTabs = this.tabbrowser.visibleTabs;
 
           if (!visibleTabs.length)
             return;
 
+          dump("_setPositionalAttributes " + this.selectedIndex + " " + this.selectedItem + " " + visibleTabs.length + "\n");
           let selectedIndex = visibleTabs.indexOf(this.selectedItem);
 
           let lastVisible = visibleTabs.length - 1;
 
           if (this._afterSelectedTab)
             this._afterSelectedTab.removeAttribute("afterselected-visible");
           if (this.selectedItem.closing || selectedIndex == lastVisible) {
             this._afterSelectedTab = null;
@@ -8097,22 +8100,25 @@
   <binding id="tabbrowser-tabpanels"
            extends="chrome://global/content/bindings/tabbox.xml#tabpanels">
     <implementation>
       <field name="_selectedIndex">0</field>
 
       <property name="selectedIndex">
         <getter>
         <![CDATA[
+          dump("tabbrowser-tabpanels selectedIndex\n");
           return this._selectedIndex;
         ]]>
         </getter>
 
         <setter>
         <![CDATA[
+          dump("set: tabbrowser-tabpanels selectedIndex" + val + "\n");
+          console.trace();
           if (val < 0 || val >= this.childNodes.length)
             return val;
 
           let toTab = this.getRelatedElement(this.childNodes[val]);
 
           gBrowser._getSwitcher().requestTab(toTab);
 
           var panel = this._selectedPanel;
diff --git a/browser/components/nsBrowserGlue.js b/browser/components/nsBrowserGlue.js
--- a/browser/components/nsBrowserGlue.js
+++ b/browser/components/nsBrowserGlue.js
@@ -1257,17 +1257,17 @@ BrowserGlue.prototype = {
     let allWindowsPrivate = true;
     while (browserEnum.hasMoreElements()) {
       // XXXbz should we skip closed windows here?
       windowcount++;
 
       var browser = browserEnum.getNext();
       if (!PrivateBrowsingUtils.isWindowPrivate(browser))
         allWindowsPrivate = false;
-      var tabbrowser = browser.document.getElementById("content");
+      var tabbrowser = browser.ownerGlobal.gBrowser;
       if (tabbrowser)
         pagecount += tabbrowser.browsers.length - tabbrowser._numPinnedTabs;
     }
 
     this._saveSession = false;
     if (pagecount < 2)
       return;
 
diff --git a/browser/modules/FormValidationHandler.jsm b/browser/modules/FormValidationHandler.jsm
--- a/browser/modules/FormValidationHandler.jsm
+++ b/browser/modules/FormValidationHandler.jsm
@@ -77,17 +77,17 @@ var FormValidationHandler =
   },
 
   /*
    * Internal
    */
 
   _onPopupHiding(aEvent) {
     aEvent.originalTarget.removeEventListener("popuphiding", this, true);
-    let tabBrowser = aEvent.originalTarget.ownerDocument.getElementById("content");
+    let tabBrowser = aEvent.originalTarget.ownerGlobal.gBrowser;
     tabBrowser.selectedBrowser.removeEventListener("scroll", this, true);
     tabBrowser.selectedBrowser.removeEventListener("FullZoomChange", this);
     tabBrowser.selectedBrowser.removeEventListener("TextZoomChange", this);
     tabBrowser.selectedBrowser.removeEventListener("ZoomChangeUsingMouseWheel", this);
 
     this._panel.hidden = true;
     this._panel = null;
     this._anchor.hidden = true;
diff --git a/devtools/client/framework/devtools-browser.js b/devtools/client/framework/devtools-browser.js
--- a/devtools/client/framework/devtools-browser.js
+++ b/devtools/client/framework/devtools-browser.js
@@ -156,17 +156,17 @@ var gDevToolsBrowser = exports.gDevTools
       devtoolsTheme = "light";
     }
 
     // Style gcli and the splitter between the toolbox and page content.  This used to
     // set the attribute on the browser's root node but that regressed tpaint:
     // bug 1331449.
     win.document.getElementById("browser-bottombox")
        .setAttribute("devtoolstheme", devtoolsTheme);
-    win.document.getElementById("content")
+    win.document.getElementById("appcontent")
        .setAttribute("devtoolstheme", devtoolsTheme);
 
     // If the toolbox color changes and we have the opposite compact theme applied,
     // change it to match.  For example:
     // 1) toolbox changes to dark, and the light compact theme was applied.
     //    Switch to the dark compact theme.
     // 2) toolbox changes to light or firebug, and the dark compact theme was applied.
     //    Switch to the light compact theme.
diff --git a/devtools/client/themes/splitters.css b/devtools/client/themes/splitters.css
--- a/devtools/client/themes/splitters.css
+++ b/devtools/client/themes/splitters.css
@@ -15,22 +15,22 @@
   --devtools-splitter-top-width: 2px;
   --devtools-splitter-bottom-width: 2px;
 
   /* Small draggable area on inline-start to avoid overlaps on scrollbars.*/
   --devtools-splitter-inline-start-width: 1px;
   --devtools-splitter-inline-end-width: 4px;
 }
 
-#content[devtoolstheme="light"] {
+#appcontent[devtoolstheme="light"] {
   /* These variables are used in browser.xul but inside the toolbox they are overridden by --theme-splitter-color */
   --devtools-splitter-color: #dde1e4;
 }
 
-#content[devtoolstheme="dark"] {
+#appcontent[devtoolstheme="dark"] {
   --devtools-splitter-color: #42484f;
 }
 
 .devtools-horizontal-splitter,
 .devtools-side-splitter {
   -moz-appearance: none;
   background-image: none;
   border: 0;
diff --git a/toolkit/content/widgets/tabbox.xml b/toolkit/content/widgets/tabbox.xml
--- a/toolkit/content/widgets/tabbox.xml
+++ b/toolkit/content/widgets/tabbox.xml
@@ -53,63 +53,83 @@
       <!-- _tabs and _tabpanels are deprecated, they exist only for
            backwards compatibility. -->
       <property name="_tabs" readonly="true" onget="return this.tabs;"/>
       <property name="_tabpanels" readonly="true" onget="return this.tabpanels;"/>
 
       <property name="tabs" readonly="true">
         <getter>
         <![CDATA[
+          debugger;
+          return document.querySelector("#tabbrowser-tabs");
+          var retval = this.getElementsByTagNameNS(
+              "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul",
+              "tabs").item(0);
+          var retval2 = this.querySelector("tabs");
+          dump(`tabbox: About to run tabs getter ${retval} ${retval2} ${this.innerHTML}\n`);
+          console.trace();
+          return this.querySelector("tabs");
           return this.getElementsByTagNameNS(
               "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul",
               "tabs").item(0);
         ]]>
         </getter>
       </property>
 
       <property name="tabpanels" readonly="true">
         <getter>
         <![CDATA[
+          var retval = this.getElementsByTagNameNS(
+              "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul",
+              "tabpanels").item(0);
+          var retval2 = this.querySelector("tabpanels");
+          dump(`tabbox: About to run tabpanels getter ${retval} ${retval2}\n`);
+          return this.querySelector("tabpanels");
           return this.getElementsByTagNameNS(
               "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul",
               "tabpanels").item(0);
         ]]>
         </getter>
       </property>
 
       <property name="selectedIndex">
         <getter>
         <![CDATA[
+          dump(`tabbox: About to run selectedIndex getter\n`);
           var tabs = this.tabs;
           return tabs ? tabs.selectedIndex : -1;
         ]]>
         </getter>
 
         <setter>
         <![CDATA[
+          dump(`tabbox: About to run selectedIndex setter: ${val}\n`);
           var tabs = this.tabs;
           if (tabs)
             tabs.selectedIndex = val;
           this.setAttribute("selectedIndex", val);
           return val;
         ]]>
         </setter>
       </property>
 
       <property name="selectedTab">
         <getter>
         <![CDATA[
+          dump(`tabbox: About to run selectedTab getter\n`);
           var tabs = this.tabs;
           return tabs && tabs.selectedItem;
         ]]>
         </getter>
 
         <setter>
         <![CDATA[
+          dump(`tabbox: About to run selectedTab setter: ${val}\n`);
           if (val) {
+          debugger;
             var tabs = this.tabs;
             if (tabs)
               tabs.selectedItem = val;
           }
           return val;
         ]]>
         </setter>
       </property>
@@ -669,16 +689,17 @@
         <![CDATA[
           var indexStr = this.getAttribute("selectedIndex");
           return indexStr ? parseInt(indexStr) : -1;
         ]]>
         </getter>
 
         <setter>
         <![CDATA[
+          dump(`tabpanels: About to run selectedIndex setter: ${val}\n`);
           if (val < 0 || val >= this.childNodes.length)
             return val;
           var panel = this._selectedPanel;
           this._selectedPanel = this.childNodes[val];
           this.setAttribute("selectedIndex", val);
           if (this._selectedPanel != panel) {
             var event = document.createEvent("Events");
             event.initEvent("select", true, true);
@@ -693,16 +714,17 @@
         <getter>
           <![CDATA[
             return this._selectedPanel;
           ]]>
         </getter>
 
         <setter>
           <![CDATA[
+            dump(`tabpanels: About to run selectedPanel setter: ${val}\n`);
             var selectedIndex = -1;
             for (var panel = val; panel != null; panel = panel.previousSibling)
               ++selectedIndex;
             this.selectedIndex = selectedIndex;
             return val;
           ]]>
         </setter>
       </property>
