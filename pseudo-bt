# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  6aec99b90f85428f659777d3fcb80aedb539acab

diff --git a/devtools/client/framework/components/MeatballMenu.js b/devtools/client/framework/components/MeatballMenu.js
--- a/devtools/client/framework/components/MeatballMenu.js
+++ b/devtools/client/framework/components/MeatballMenu.js
@@ -65,16 +65,17 @@ class MeatballMenu extends PureComponent
 
       // Are we disabling the behavior where pop-ups are automatically closed
       // when clicking outside them?
       //
       // This is a tri-state value that may be true/false or undefined where
       // undefined means that the option is not relevant in this context
       // (i.e. we're not in a browser toolbox).
       disableAutohide: PropTypes.bool,
+      fluentPseudoLocale: PropTypes.string,
 
       // Function to turn the options panel on / off.
       toggleOptions: PropTypes.func.isRequired,
 
       // Function to turn the split console on / off.
       toggleSplitConsole: PropTypes.func,
 
       // Function to turn the disable pop-up autohide behavior on / off.
@@ -102,16 +103,17 @@ class MeatballMenu extends PureComponent
     // - The split console label changing between "Show Split Console" and "Hide
     //   Split Console".
     // - The "Show/Hide Split Console" entry being added removed or removed.
     //
     // The latter two cases are only likely to be noticed when "Disable pop-up
     // autohide" is active, but for completeness we handle them here.
     const didChange =
       typeof this.props.disableAutohide !== typeof prevProps.disableAutohide ||
+      typeof this.props.fluentPseudoLocale !== typeof prevProps.fluentPseudoLocale ||
       this.props.currentToolId !== prevProps.currentToolId ||
       this.props.isSplitConsoleActive !== prevProps.isSplitConsoleActive;
 
     if (didChange) {
       this.props.onResize();
     }
   }
 
@@ -191,16 +193,70 @@ class MeatballMenu extends PureComponent
             "toolbox.meatballMenu.noautohide.label"
           ),
           type: "checkbox",
           checked: this.props.disableAutohide,
           onClick: this.props.toggleNoAutohide,
           className: "iconic",
         })
       );
+
+      console.log(this.props.fluentPseudoLocale);
+
+      // items.push(
+      //   MenuItem({
+      //     id: "toolbox-meatball-menu-pseudolocalization-off",
+      //     key: "noautohide",
+      //     label: this.props.L10N.getStr(
+      //       "toolbox.meatballMenu.pseudolocalization.off.label"
+      //     ),
+      //     checked: this.props.disableAutohide,
+      //     onClick: this.props.toggleNoAutohide,
+      //     className: "iconic",
+      //   })
+      // );
+      items.push(
+        MenuItem({
+          id: "toolbox-meatball-menu-pseudolocalization-off",
+          key: "noautohide",
+          label: this.props.L10N.getStr(
+            "toolbox.meatballMenu.pseudolocalization.off.label"
+          ),
+          type: "checkbox",
+          checked: this.props.disableAutohide,
+          onClick: this.props.toggleNoAutohide,
+          // className: "iconic",
+        })
+      );
+      items.push(
+        MenuItem({
+          id: "toolbox-meatball-menu-pseudolocalization-accent",
+          key: "noautohide",
+          label: this.props.L10N.getStr(
+            "toolbox.meatballMenu.pseudolocalization.accent.label"
+          ),
+          type: "checkbox",
+          checked: this.props.disableAutohide,
+          onClick: this.props.toggleNoAutohide,
+          // className: "iconic",
+        })
+      );
+      items.push(
+        MenuItem({
+          id: "toolbox-meatball-menu-pseudolocalization-bidi",
+          key: "noautohide",
+          label: this.props.L10N.getStr(
+            "toolbox.meatballMenu.pseudolocalization.bidi.label"
+          ),
+          type: "checkbox",
+          checked: this.props.disableAutohide,
+          onClick: this.props.toggleNoAutohide,
+          // className: "iconic",
+        })
+      );
     }
 
     // Settings
     items.push(
       MenuItem({
         id: "toolbox-meatball-menu-settings",
         key: "settings",
         label: this.props.L10N.getStr("toolbox.meatballMenu.settings.label"),
diff --git a/devtools/client/framework/components/ToolboxController.js b/devtools/client/framework/components/ToolboxController.js
--- a/devtools/client/framework/components/ToolboxController.js
+++ b/devtools/client/framework/components/ToolboxController.js
@@ -32,16 +32,17 @@ class ToolboxController extends Componen
       highlightedTools: new Set(),
       panelDefinitions: [],
       hostTypes: [],
       currentHostType: undefined,
       areDockOptionsEnabled: true,
       canCloseToolbox: true,
       isSplitConsoleActive: false,
       disableAutohide: undefined,
+      fluentPseudoLocale: undefined,
       canRender: false,
       buttonIds: [],
       checkedButtonsUpdated: () => {
         this.forceUpdate();
       },
     };
 
     this.setFocusedButton = this.setFocusedButton.bind(this);
@@ -50,16 +51,17 @@ class ToolboxController extends Componen
     this.highlightTool = this.highlightTool.bind(this);
     this.unhighlightTool = this.unhighlightTool.bind(this);
     this.setHostTypes = this.setHostTypes.bind(this);
     this.setCurrentHostType = this.setCurrentHostType.bind(this);
     this.setDockOptionsEnabled = this.setDockOptionsEnabled.bind(this);
     this.setCanCloseToolbox = this.setCanCloseToolbox.bind(this);
     this.setIsSplitConsoleActive = this.setIsSplitConsoleActive.bind(this);
     this.setDisableAutohide = this.setDisableAutohide.bind(this);
+    this.setFluentPseudoLocale = this.setFluentPseudoLocale.bind(this);
     this.setCanRender = this.setCanRender.bind(this);
     this.setPanelDefinitions = this.setPanelDefinitions.bind(this);
     this.updateButtonIds = this.updateButtonIds.bind(this);
     this.updateFocusedButton = this.updateFocusedButton.bind(this);
   }
 
   shouldComponentUpdate() {
     return this.state.canRender;
@@ -161,16 +163,20 @@ class ToolboxController extends Componen
   setIsSplitConsoleActive(isSplitConsoleActive) {
     this.setState({ isSplitConsoleActive });
   }
 
   setDisableAutohide(disableAutohide) {
     this.setState({ disableAutohide });
   }
 
+  setFluentPseudoLocale(fluentPseudoLocale) {
+    this.setState({ fluentPseudoLocale });
+  }
+
   setPanelDefinitions(panelDefinitions) {
     this.setState({ panelDefinitions }, this.updateButtonIds);
   }
 
   get panelDefinitions() {
     return this.state.panelDefinitions;
   }
 
diff --git a/devtools/client/framework/components/ToolboxToolbar.js b/devtools/client/framework/components/ToolboxToolbar.js
--- a/devtools/client/framework/components/ToolboxToolbar.js
+++ b/devtools/client/framework/components/ToolboxToolbar.js
@@ -90,16 +90,21 @@ class ToolboxToolbar extends Component {
       isSplitConsoleActive: PropTypes.bool,
       // Are we disabling the behavior where pop-ups are automatically closed
       // when clicking outside them?
       //
       // This is a tri-state value that may be true/false or undefined where
       // undefined means that the option is not relevant in this context
       // (i.e. we're not in a browser toolbox).
       disableAutohide: PropTypes.bool,
+      // Are we applying a pseudo locale to chrome?
+      //
+      // This is a string or undefined where undefined means that the option
+      // is not relevant in this context (i.e. we're not in a browser toolbox).
+      fluentPseudoLocale: PropTypes.string,
       // Function to turn the options panel on / off.
       toggleOptions: PropTypes.func.isRequired,
       // Function to turn the split console on / off.
       toggleSplitConsole: PropTypes.func,
       // Function to turn the disable pop-up autohide behavior on / off.
       toggleNoAutohide: PropTypes.func,
       // Function to completely close the toolbox.
       closeToolbox: PropTypes.func,
@@ -359,16 +364,18 @@ class ToolboxToolbar extends Component {
    *        toolbox is undocked, for example.
    * @param {boolean} props.isSplitConsoleActive
    *         Is the split console currently visible?
    *        toolbox is undocked, for example.
    * @param {boolean|undefined} props.disableAutohide
    *        Are we disabling the behavior where pop-ups are automatically
    *        closed when clicking outside them?
    *        (Only defined for the browser toolbox.)
+   * @param {boolean|undefined} props.fluentPseudoLocale
+   *        Are we applying a pseudo locale to chrome?
    * @param {Function} props.selectTool
    *        Function to select a tool based on its id.
    * @param {Function} props.toggleOptions
    *        Function to turn the options panel on / off.
    * @param {Function} props.toggleSplitConsole
    *        Function to turn the split console on / off.
    * @param {Function} props.toggleNoAutohide
    *        Function to turn the disable pop-up autohide behavior on / off.
diff --git a/devtools/client/locales/en-US/toolbox.properties b/devtools/client/locales/en-US/toolbox.properties
--- a/devtools/client/locales/en-US/toolbox.properties
+++ b/devtools/client/locales/en-US/toolbox.properties
@@ -160,16 +160,20 @@ toolbox.meatballMenu.hideconsole.label=H
 
 # LOCALIZATION NOTE (toolbox.meatballMenu.noautohide.label): This is the label
 # in the "..." menu in the toolbox to force the popups/panels to stay visible on
 # blur.
 # This is only visible in the browser toolbox as it is meant for
 # addon developers and Firefox contributors.
 toolbox.meatballMenu.noautohide.label=Disable Popup Auto-Hide
 
+toolbox.meatballMenu.pseudolocalization.off.label=Off
+toolbox.meatballMenu.pseudolocalization.accent.label=Accent
+toolbox.meatballMenu.pseudolocalization.bidi.label=Bidi
+
 # LOCALIZATION NOTE (toolbox.meatballMenu.settings.label): This is the label for
 # the item in the "..." menu in the toolbox that brings up the Settings
 # (Options) panel.
 # The keyboard shortcut will be shown to the side of the label.
 toolbox.meatballMenu.settings.label=Settings
 
 # LOCALIZATION NOTE (toolbox.meatballMenu.documentation.label): This is the
 # label for the Documentation menu item.
diff --git a/devtools/client/themes/toolbox.css b/devtools/client/themes/toolbox.css
--- a/devtools/client/themes/toolbox.css
+++ b/devtools/client/themes/toolbox.css
@@ -250,16 +250,23 @@
 #toolbox-meatball-menu-splitconsole {
   --menuitem-icon-image: url("chrome://devtools/skin/images/command-console.svg");
 }
 
 #toolbox-meatball-menu-noautohide {
   --menuitem-icon-image: url("chrome://devtools/skin/images/command-noautohide.svg");
 }
 
+#toolbox-meatball-menu-pseudolocalization-off,
+#toolbox-meatball-menu-pseudolocalization-accent,
+#toolbox-meatball-menu-pseudolocalization-bidi {
+  display: inline-block;
+  width: 33%;
+
+}
 #toolbox-meatball-menu-settings {
   --menuitem-icon-image: url("chrome://devtools/skin/images/settings.svg");
 }
 
 /* Command buttons */
 
 .command-button,
 #toolbox-controls > button,
