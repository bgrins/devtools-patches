# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  873d0769d342f4733e8705f246e90eb142b08877

diff --git a/toolkit/components/processsingleton/ContentProcessSingleton.js b/toolkit/components/processsingleton/ContentProcessSingleton.js
--- a/toolkit/components/processsingleton/ContentProcessSingleton.js
+++ b/toolkit/components/processsingleton/ContentProcessSingleton.js
@@ -16,16 +16,17 @@ function ContentProcessSingleton() {}
 ContentProcessSingleton.prototype = {
   classID: Components.ID("{ca2a8470-45c7-11e4-916c-0800200c9a66}"),
   QueryInterface: ChromeUtils.generateQI([Ci.nsIObserver,
                                           Ci.nsISupportsWeakReference]),
 
   observe(subject, topic, data) {
     switch (topic) {
     case "app-startup": {
+      ChromeUtils.import("resource://gre/modules/CustomElementsListener.jsm", null);
       Services.obs.addObserver(this, "xpcom-shutdown");
       // Initialize Telemetry in the content process: use a different
       // controller depending on the platform.
       if (Services.prefs.getBoolPref("toolkit.telemetry.isGeckoViewMode", false)) {
         GeckoViewTelemetryController.setup();
         return;
       }
       // Initialize Firefox Desktop Telemetry.
diff --git a/toolkit/components/processsingleton/CustomElementsListener.jsm b/toolkit/components/processsingleton/CustomElementsListener.jsm
--- a/toolkit/components/processsingleton/CustomElementsListener.jsm
+++ b/toolkit/components/processsingleton/CustomElementsListener.jsm
@@ -6,17 +6,17 @@
 ChromeUtils.import("resource://gre/modules/Services.jsm");
 
 // Set up Custom Elements for XUL and XHTML documents before anything else
 // happens. Anything loaded here should be considered part of core XUL functionality.
 // Any window-specific elements can be registered via <script> tags at the
 // top of individual documents.
 Services.obs.addObserver({
   observe(doc) {
-    if (doc.nodePrincipal.isSystemPrincipal && (
+    if ((
       doc.contentType == "application/vnd.mozilla.xul+xml" ||
       doc.contentType == "application/xhtml+xml"
     )) {
       Services.scriptloader.loadSubScript(
         "chrome://global/content/customElements.js", doc.ownerGlobal);
     }
   },
 }, "document-element-inserted");
diff --git a/toolkit/content/widgets/tabbox.js b/toolkit/content/widgets/tabbox.js
--- a/toolkit/content/widgets/tabbox.js
+++ b/toolkit/content/widgets/tabbox.js
@@ -150,19 +150,20 @@ class MozTabbox extends MozXULElement {
             event.preventDefault();
           }
         break;
     }
   }
 }
 
 customElements.define("tabbox", MozTabbox);
-
+console.log("Loading script", document.documentURI)
 class MozTabpanels extends MozXULElement {
   connectedCallback() {
+    console.log("connected", this, this.children);
     if (this.delayConnectedCallback()) {
       return;
     }
 
     this._tabbox = null;
     this._selectedPanel = this.children.item(this.selectedIndex);
   }
 
