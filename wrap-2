# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  5119073462327d76f81e702aa482422d21a042d1

diff --git a/toolkit/content/widgets/browser.js b/toolkit/content/widgets/browser.js
--- a/toolkit/content/widgets/browser.js
+++ b/toolkit/content/widgets/browser.js
@@ -31,61 +31,20 @@ class MozBrowser extends XULFrameElement
       this.destroy();
       this.construct();
     }
   }
 
   constructor() {
     super();
 
-    let wrap = (f, n) => {
-      return (...args) => {
-        if (n == "finder") {
-          console.log("Returning for", n, this.isConnected);
-        }
-        // console.log("Returning for", n, this.isConnected);
-        if (!this.isConnected) {
-          return undefined;
-        }
-
-        return f.apply(this, args);
-      };
-    };
-
-    // Wrap every function, getter, and setter into a function that simulates
-    // XBL behavior when disconnected.
-    let descriptors = Object.getOwnPropertyDescriptors(MozBrowser.prototype);
-    for (let name in descriptors) {
-      if (name == "destroy") {
-        continue;
-      }
-      let descriptor = descriptors[name];
-      let newDescriptor = Object.assign({}, descriptor);
-      if (typeof descriptor.value == "function") {
-        newDescriptor.value = wrap(descriptor.value, name);
-      }
-      if (typeof descriptor.get == "function") {
-        newDescriptor.get = wrap(descriptor.get, name);
-      }
-      if (typeof descriptor.set == "function") {
-        newDescriptor.set = wrap(descriptor.set, name);
-      }
-
-      if (name == "finder") {
-        console.log("Finder", descriptor, newDescriptor);
-      }
-
-      delete this[name];
-      Object.defineProperty(this, name, newDescriptor);
-    }
-
     this.browserNumber = browserNumber++;
     LOG("constructor() called", this.logString);
 
-    // this.destroyOnUnload = this.destroyOnUnload.bind(this);
+    this.destroyOnUnload = this.destroyOnUnload.bind(this);
 
 
     /**
      * These are managed by the tabbrowser
      */
     this.droppedLinkHandler = null;
 
     this.mIconURL = null;
@@ -200,20 +159,47 @@ class MozBrowser extends XULFrameElement
       LOG("Destroying due to unload", this.logString);
       this.destroy();
     }
   }
 
   disconnectedCallback() {
     window.removeEventListener("unload", this.destroyOnUnload, { mozSystemGroup: true, capture: true });
     this.destroy();
+
+    // Wrap every function, getter, and setter into a function that simulates
+    // XBL behavior when disconnected.
+    let descriptors = Object.getOwnPropertyDescriptors(MozBrowser.prototype);
+    for (let name in descriptors) {
+      if (!descriptors[name].configurable) {
+        continue;
+      }
+      delete this[name];
+      // this[name] = undefined;
+      let newDescriptor = Object.assign({}, descriptors[name]);
+      // delete newDescriptor.value;
+      // delete newDescriptor.setter;
+      // delete newDescriptor.getter;
+      // newDescriptor.value = newDescriptor.setter = newDescriptor.getter = undefined;
+      Object.defineProperty(this, name, newDescriptor);
+      // // console.log("DISCONNECTED", name, this[name]);
+    }
+
+
   }
 
   connectedCallback() {
     window.addEventListener("unload", this.destroyOnUnload, { mozSystemGroup: true, capture: true });
+    let descriptors = Object.getOwnPropertyDescriptors(MozBrowser.prototype);
+    for (let name in descriptors) {
+      // delete this[name];
+      Object.defineProperty(this, name, descriptors[name]);
+      // console.log("DISCONNECTED", name);
+    }
+
     this.construct();
   }
 
   get autoscrollEnabled() {
     if (this.getAttribute("autoscroll") == "false")
       return false;
 
     return this.mPrefs.getBoolPref("general.autoScroll", true);
@@ -364,17 +350,16 @@ class MozBrowser extends XULFrameElement
 
   get webBrowserFind() {
     if (!this._webBrowserFind)
       this._webBrowserFind = this.docShell.QueryInterface(Ci.nsIInterfaceRequestor).getInterface(Ci.nsIWebBrowserFind);
     return this._webBrowserFind;
   }
 
   get finder() {
-    console.log("Calling actual finder()", this.isConnected);
     if (this.isRemoteBrowser) {
       if (!this._remoteFinder) {
         // Don't attempt to create the remote finder if the
         // messageManager has already gone away
         if (!this.messageManager)
           return null;
 
         let jsm = "resource://gre/modules/FinderParent.jsm";
