# HG changeset patch
# User Gabriel Luong <gabriel.luong@gmail.com>
# Parent  a0e2292b3f0879dec00f7a94ea2783d95ba1540d
Bug 1198327 - [Rule View] Adding a new unmatched rule should move focus to new property editor r=bgrins

diff --git a/browser/devtools/styleinspector/rule-view.js b/browser/devtools/styleinspector/rule-view.js
--- a/browser/devtools/styleinspector/rule-view.js
+++ b/browser/devtools/styleinspector/rule-view.js
@@ -2869,42 +2869,43 @@

       // Remove highlight for modified selector
       if (ruleView.highlightedSelector &&
           ruleView.highlightedSelector === this.rule.selectorText) {
         ruleView.toggleSelectorHighlighter(ruleView.lastSelectorIcon,
           ruleView.highlightedSelector);
       }

-      this._moveSelectorFocus(newRule, direction);
+      this._moveSelectorFocus(editor, direction);
     }).then(null, err => {
       this.isEditing = false;
       promiseWarn(err);
     });
   },

   /**
-   * Handle moving the focus change after pressing tab and return from the
-   * selector inplace editor. The focused element after a tab or return keypress
-   * is lost because the rule editor is replaced.
+   * Handle moving the focus change after a tab or return keypress in the
+   * selector inplace editor. The current focused element after a tab or return
+   * keypress is lost because the rule editor is replaced when modifying the
+   * selector.
    *
-   * @param {Rule} rule
-   *        The Rule object.
+   * @param {RuleEditor} ruleEditor
+   *        The RuleEditor object.
    * @param {Number} direction
    *        The move focus direction number.
    */
-  _moveSelectorFocus: function(rule, direction) {
+  _moveSelectorFocus: function(ruleEditor, direction) {
     if (!direction || direction === Ci.nsIFocusManager.MOVEFOCUS_BACKWARD) {
       return;
     }

-    if (rule.textProps.length > 0) {
-      rule.textProps[0].editor.nameSpan.click();
+    if (ruleEditor.rule.textProps.length > 0) {
+      ruleEditor.rule.textProps[0].editor.nameSpan.click();
     } else {
-      this.propertyList.click();
+      ruleEditor.propertyList.click();
     }
   }
 };

 /**
  * Create a TextPropertyEditor.
  *
  * @param {RuleEditor} ruleEditor
diff --git a/browser/devtools/styleinspector/test/browser.ini b/browser/devtools/styleinspector/test/browser.ini
--- a/browser/devtools/styleinspector/test/browser.ini
+++ b/browser/devtools/styleinspector/test/browser.ini
@@ -105,16 +105,17 @@
 [browser_ruleview_edit-property_06.js]
 [browser_ruleview_edit-property_07.js]
 [browser_ruleview_edit-selector-commit.js]
 [browser_ruleview_edit-selector_01.js]
 [browser_ruleview_edit-selector_02.js]
 [browser_ruleview_edit-selector_03.js]
 [browser_ruleview_edit-selector_04.js]
 [browser_ruleview_edit-selector_05.js]
+[browser_ruleview_edit-selector_06.js]
 [browser_ruleview_editable-field-focus_01.js]
 [browser_ruleview_editable-field-focus_02.js]
 [browser_ruleview_eyedropper.js]
 [browser_ruleview_filtereditor-appears-on-swatch-click.js]
 [browser_ruleview_filtereditor-commit-on-ENTER.js]
 [browser_ruleview_filtereditor-revert-on-ESC.js]
 skip-if = (os == "win" && debug) || e10s # bug 963492: win. bug 1040653: e10s.
 [browser_ruleview_inherited-properties_01.js]
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_edit-selector_06.js b/browser/devtools/styleinspector/test/browser_ruleview_edit-selector_06.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/styleinspector/test/browser_ruleview_edit-selector_06.js
@@ -0,0 +1,76 @@
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+ http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Testing selector inplace-editor behaviors in the rule-view with unmatched
+// selectors
+
+const TEST_URI = `
+  <style type="text/css">
+    .testclass {
+      text-align: center;
+    }
+    div {
+    }
+  </style>
+  <div class="testclass">Styled Node</div>
+`;
+
+add_task(function*() {
+  yield addTab("data:text/html;charset=utf-8," + encodeURIComponent(TEST_URI));
+  let {inspector, view} = yield openRuleView();
+  yield selectNode(".testclass", inspector);
+  yield testEditClassSelector(view);
+  yield testEditDivSelector(view);
+});
+
+function* testEditClassSelector(view) {
+  let ruleEditor = getRuleViewRuleEditor(view, 1);
+  let editor = yield focusEditableField(view, ruleEditor.selectorText);
+
+  editor.input.value = "body";
+  let onRuleViewChanged = once(view, "ruleview-changed");
+  EventUtils.synthesizeKey("VK_RETURN", {});
+  yield onRuleViewChanged;
+
+  // Get the new rule editor that replaced the original
+  ruleEditor = getRuleViewRuleEditor(view, 1);
+  let propEditor = ruleEditor.rule.textProps[0].editor;
+
+  info("Check that the correct rules are visible");
+  is(view._elementStyle.rules.length, 3, "Should have 3 rules.");
+  ok(ruleEditor.element.getAttribute("unmatched"), "Rule editor is unmatched.");
+  is(getRuleViewRule(view, ".testclass"), undefined,
+    "Rule with .testclass selector should not exist.");
+  ok(getRuleViewRule(view, "body"),
+    "Rule with body selector exists.");
+  is(inplaceEditor(propEditor.nameSpan),
+     inplaceEditor(view.styleDocument.activeElement),
+     "Focus should have moved to the property name.");
+}
+
+function* testEditDivSelector(view) {
+  let ruleEditor = getRuleViewRuleEditor(view, 2);
+  let editor = yield focusEditableField(view, ruleEditor.selectorText);
+
+  editor.input.value = "asdf";
+  let onRuleViewChanged = once(view, "ruleview-changed");
+  EventUtils.synthesizeKey("VK_RETURN", {});
+  yield onRuleViewChanged;
+
+  // Get the new rule editor that replaced the original
+  ruleEditor = getRuleViewRuleEditor(view, 2);
+
+  info("Check that the correct rules are visible");
+  is(view._elementStyle.rules.length, 3, "Should have 3 rules.");
+  ok(ruleEditor.element.getAttribute("unmatched"), "Rule editor is unmatched.");
+  is(getRuleViewRule(view, "div"), undefined,
+    "Rule with div selector should not exist.");
+  ok(getRuleViewRule(view, "asdf"),
+    "Rule with asdf selector exists.");
+  is(inplaceEditor(ruleEditor.newPropSpan),
+     inplaceEditor(view.styleDocument.activeElement),
+     "Focus should have moved to the property name.");
+}
