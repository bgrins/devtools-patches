# HG changeset patch
# Parent 66cc38d90f25acc0d946a360bd5192fc477788ac
# User Patrick Brosset <pbrosset@mozilla.com>
Bug 1105825 - 2 - Fix the toolbox/inspector/sidebar destroy sequence so that panels get destroyed

diff --git a/browser/devtools/framework/sidebar.js b/browser/devtools/framework/sidebar.js
--- a/browser/devtools/framework/sidebar.js
+++ b/browser/devtools/framework/sidebar.js
@@ -2,16 +2,17 @@
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 const {Cu} = require("chrome");
 
 Cu.import("resource://gre/modules/Services.jsm");
+Cu.import("resource://gre/modules/Task.jsm");
 
 var {Promise: promise} = require("resource://gre/modules/Promise.jsm");
 var EventEmitter = require("devtools/toolkit/event-emitter");
 var Telemetry = require("devtools/shared/telemetry");
 
 const XULNS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
 
 /**
@@ -113,33 +114,38 @@ ToolSidebar.prototype = {
     }
 
     this.emit("new-tab-registered", id);
   },
 
   /**
    * Remove an existing tab.
    */
-  removeTab: function(id) {
+  removeTab: Task.async(function*(id) {
     let tab = this._tabbox.tabs.querySelector("tab#sidebar-tab-" + id);
     if (!tab) {
       return;
     }
 
     tab.remove();
 
+    let win = this.getWindowForTab(id);
+    if ("destroy" in win) {
+      yield win.destroy();
+    }
+
     let panel = this.getTab(id);
     if (panel) {
       panel.remove();
     }
 
     this._tabs.delete(id);
 
     this.emit("tab-unregistered", id);
-  },
+  }),
 
   /**
    * Select a specific tab.
    */
   select: function ToolSidebar_select(id) {
     let tab = this._tabs.get(id);
     if (tab) {
       this._tabbox.selectedTab = tab;
@@ -236,28 +242,33 @@ ToolSidebar.prototype = {
 
     let panel = this._panelDoc.getElementById(this._tabs.get(id).linkedPanel);
     return panel.firstChild.contentWindow;
   },
 
   /**
    * Clean-up.
    */
-  destroy: function ToolSidebar_destroy() {
+  destroy: Task.async(function*() {
     if (this._destroyed) {
       return promise.resolve(null);
     }
     this._destroyed = true;
 
     Services.prefs.setIntPref("devtools.toolsidebar-width." + this._uid, this._tabbox.width);
 
     this._tabbox.tabpanels.removeEventListener("select", this, true);
 
     while (this._tabbox.tabpanels.hasChildNodes()) {
-      this._tabbox.tabpanels.removeChild(this._tabbox.tabpanels.firstChild);
+      let panel = this._tabbox.tabpanels.firstChild;
+      let win = panel.firstChild.contentWindow;
+      if ("destroy" in win) {
+        yield win.destroy();
+      }
+      panel.remove();
     }
 
     while (this._tabbox.tabs.hasChildNodes()) {
       this._tabbox.tabs.removeChild(this._tabbox.tabs.firstChild);
     }
 
     if (this._currentTool) {
       this._telemetry.toolClosed(this._currentTool);
@@ -266,10 +277,10 @@ ToolSidebar.prototype = {
     this._toolPanel.emit("sidebar-destroyed", this);
 
     this._tabs = null;
     this._tabbox = null;
     this._panelDoc = null;
     this._toolPanel = null;
 
     return promise.resolve(null);
-  },
+  }),
 }
diff --git a/browser/devtools/framework/toolbox.js b/browser/devtools/framework/toolbox.js
--- a/browser/devtools/framework/toolbox.js
+++ b/browser/devtools/framework/toolbox.js
@@ -1640,28 +1640,27 @@ Toolbox.prototype = {
         this._pickerButton.removeEventListener("command", this._togglePicker, false);
         this._pickerButton = null;
       }
     }));
 
     // We need to grab a reference to win before this._host is destroyed.
     let win = this.frame.ownerGlobal;
 
-    // Remove the host UI
-    outstanding.push(this.destroyHost());
-
     if (this._requisition) {
       this._requisition.destroy();
     }
     this._telemetry.toolClosed("toolbox");
     this._telemetry.destroy();
 
-    // Finish all outstanding tasks (successfully or not) before destroying the
+    // Finish all outstanding tasks (which means finish destroying panels and
+    // then destroying the host, successfully or not) before destroying the
     // target.
-    this._destroyer = promise.all(outstanding).then(null, console.error).then(() => {
+    this._destroyer = promise.all(outstanding)
+      .then(() => this.destroyHost()).then(null, console.error).then(() => {
       // Targets need to be notified that the toolbox is being torn down.
       // This is done after other destruction tasks since it may tear down
       // fronts and the debugger transport which earlier destroy methods may
       // require to complete.
       if (!this._target) {
         return null;
       }
       let target = this._target;
diff --git a/browser/devtools/inspector/inspector-panel.js b/browser/devtools/inspector/inspector-panel.js
--- a/browser/devtools/inspector/inspector-panel.js
+++ b/browser/devtools/inspector/inspector-panel.js
@@ -544,39 +544,44 @@ InspectorPanel.prototype = {
 
     this.target.off("will-navigate", this._onBeforeNavigate);
 
     this.target.off("thread-paused", this.updateDebuggerPausedWarning);
     this.target.off("thread-resumed", this.updateDebuggerPausedWarning);
     this._toolbox.off("select", this.updateDebuggerPausedWarning);
 
     this.sidebar.off("select", this._setDefaultSidebar);
-    this.sidebar.destroy();
+    let sidebarDestroyer = this.sidebar.destroy();
     this.sidebar = null;
 
     this.nodemenu.removeEventListener("popupshowing", this._setupNodeMenu, true);
     this.nodemenu.removeEventListener("popuphiding", this._resetNodeMenu, true);
     this.breadcrumbs.destroy();
     this.searchSuggestions.destroy();
     this.searchBox = null;
     this.selection.off("new-node-front", this.onNewSelection);
     this.selection.off("before-new-node", this.onBeforeNewSelection);
     this.selection.off("before-new-node-front", this.onBeforeNewSelection);
     this.selection.off("detached-front", this.onDetached);
-    this._panelDestroyer = this._destroyMarkup();
+    let markupDestroyer = this._destroyMarkup();
     this.panelWin.inspector = null;
     this.target = null;
     this.panelDoc = null;
     this.panelWin = null;
     this.breadcrumbs = null;
     this.searchSuggestions = null;
     this.lastNodemenuItem = null;
     this.nodemenu = null;
     this._toolbox = null;
 
+    this._panelDestroyer = promise.all([
+      sidebarDestroyer,
+      markupDestroyer
+    ]);
+
     return this._panelDestroyer;
   },
 
   /**
    * Show the node menu.
    */
   showNodeMenu: function InspectorPanel_showNodeMenu(aButton, aPosition, aExtraItems) {
     if (aExtraItems) {
diff --git a/browser/devtools/inspector/test/browser_inspector_breadcrumbs_highlight_hover.js b/browser/devtools/inspector/test/browser_inspector_breadcrumbs_highlight_hover.js
--- a/browser/devtools/inspector/test/browser_inspector_breadcrumbs_highlight_hover.js
+++ b/browser/devtools/inspector/test/browser_inspector_breadcrumbs_highlight_hover.js
@@ -30,11 +30,9 @@ add_task(function*() {
   EventUtils.synthesizeMouseAtCenter(button, {type: "mousemove"}, button.ownerDocument.defaultView);
   yield onNodeHighlighted;
 
   isVisible = yield isHighlighting(toolbox);
   ok(isVisible, "The highlighter is shown on a markup container hover");
 
   highlightedNode = yield getHighlitNode(toolbox);
   is(highlightedNode, getNode("span"), "The highlighter highlights the right node");
-
-  gBrowser.removeCurrentTab();
 });
diff --git a/browser/devtools/inspector/test/browser_inspector_highlight_after_transition.js b/browser/devtools/inspector/test/browser_inspector_highlight_after_transition.js
--- a/browser/devtools/inspector/test/browser_inspector_highlight_after_transition.js
+++ b/browser/devtools/inspector/test/browser_inspector_highlight_after_transition.js
@@ -12,18 +12,16 @@ const TEST_URI = "http://example.com/bro
 add_task(function*() {
   info("Loading the test document and opening the inspector");
 
   yield addTab(TEST_URI);
 
   let {inspector} = yield openInspector();
 
   yield checkDivHeight(inspector);
-
-  gBrowser.removeCurrentTab();
 });
 
 function* checkDivHeight(inspector) {
   let div = getNode("div");
 
   div.setAttribute("visible", "true");
 
   yield once(div, "transitionend");
diff --git a/browser/devtools/inspector/test/browser_inspector_highlighter-01.js b/browser/devtools/inspector/test/browser_inspector_highlighter-01.js
--- a/browser/devtools/inspector/test/browser_inspector_highlighter-01.js
+++ b/browser/devtools/inspector/test/browser_inspector_highlighter-01.js
@@ -23,11 +23,9 @@ add_task(function*() {
                                      inspector.markup.doc.defaultView);
   yield onHighlighterReady;
 
   isVisible = yield isHighlighting(toolbox);
   ok(isVisible, "The highlighter is shown on a markup container hover");
 
   let node = yield getHighlitNode(toolbox);
   is(node, getNode("h1"), "The highlighter highlights the right node");
-
-  gBrowser.removeCurrentTab();
 });
diff --git a/browser/devtools/inspector/test/browser_inspector_highlighter-04.js b/browser/devtools/inspector/test/browser_inspector_highlighter-04.js
--- a/browser/devtools/inspector/test/browser_inspector_highlighter-04.js
+++ b/browser/devtools/inspector/test/browser_inspector_highlighter-04.js
@@ -39,11 +39,9 @@ add_task(function*() {
       name: "id",
       actorID: getHighlighterActorID(toolbox)
     });
     is(foundId, id, "Element " + id + " found");
   }
 
   info("Hide the box-model highlighter");
   yield toolbox.highlighter.hideBoxModel();
-
-  gBrowser.removeCurrentTab();
 });
diff --git a/browser/devtools/inspector/test/browser_inspector_highlighter-by-type.js b/browser/devtools/inspector/test/browser_inspector_highlighter-by-type.js
--- a/browser/devtools/inspector/test/browser_inspector_highlighter-by-type.js
+++ b/browser/devtools/inspector/test/browser_inspector_highlighter-by-type.js
@@ -11,18 +11,16 @@ const TEST_URL = "data:text/html;charset
 
 add_task(function*() {
   let {inspector, toolbox} = yield openInspectorForURL(TEST_URL);
 
   yield onlyOneInstanceOfMainHighlighter(inspector);
   yield manyInstancesOfCustomHighlighters(inspector);
   yield showHideMethodsAreAvailable(inspector);
   yield unknownHighlighterTypeShouldntBeAccepted(inspector);
-
-  gBrowser.removeCurrentTab();
 });
 
 function* onlyOneInstanceOfMainHighlighter({inspector}) {
   info("Check that the inspector always sends back the same main highlighter");
 
   let h1 = yield inspector.getHighlighter(false);
   let h2 = yield inspector.getHighlighter(false);
   is(h1, h2, "The same highlighter front was returned");
diff --git a/browser/devtools/inspector/test/browser_inspector_highlighter-csstransform_01.js b/browser/devtools/inspector/test/browser_inspector_highlighter-csstransform_01.js
--- a/browser/devtools/inspector/test/browser_inspector_highlighter-csstransform_01.js
+++ b/browser/devtools/inspector/test/browser_inspector_highlighter-csstransform_01.js
@@ -21,18 +21,16 @@ add_task(function*() {
   yield isHiddenByDefault(highlighter, inspector);
   yield has2PolygonsAnd4Lines(highlighter, inspector);
   yield isNotShownForUntransformed(highlighter, inspector);
   yield isNotShownForInline(highlighter, inspector);
   yield isVisibleWhenShown(highlighter, inspector);
   yield linesLinkThePolygons(highlighter, inspector);
 
   yield highlighter.finalize();
-
-  gBrowser.removeCurrentTab();
 });
 
 function* isHiddenByDefault(highlighterFront, inspector) {
   info("Checking that the highlighter is hidden by default");
 
   let hidden = yield getAttribute("css-transform-elements", "hidden", highlighterFront);
   ok(hidden, "The highlighter is hidden by default");
 }
diff --git a/browser/devtools/inspector/test/browser_inspector_highlighter-csstransform_02.js b/browser/devtools/inspector/test/browser_inspector_highlighter-csstransform_02.js
--- a/browser/devtools/inspector/test/browser_inspector_highlighter-csstransform_02.js
+++ b/browser/devtools/inspector/test/browser_inspector_highlighter-csstransform_02.js
@@ -48,17 +48,15 @@ add_task(function*() {
       "p" + i + " x coordinate is correct");
     is(polygonPoints[i - 1].y, expected["p" + i].y,
       "p" + i + " y coordinate is correct");
   }
 
   info("Hiding the transform highlighter");
   yield highlighter.hide();
   yield highlighter.finalize();
-
-  gBrowser.removeCurrentTab();
 });
 
 function* getAttribute(nodeID, name, {actorID}) {
   let {data} = yield executeInContent("Test:GetHighlighterAttribute",
     {nodeID, name, actorID});
   return data;
 }
diff --git a/browser/devtools/inspector/test/browser_inspector_highlighter-options.js b/browser/devtools/inspector/test/browser_inspector_highlighter-options.js
--- a/browser/devtools/inspector/test/browser_inspector_highlighter-options.js
+++ b/browser/devtools/inspector/test/browser_inspector_highlighter-options.js
@@ -144,18 +144,16 @@ add_task(function*() {
     info("Show the box-model highlighter with options " + options);
     yield toolbox.highlighter.showBoxModel(divFront, options);
 
     yield checkHighlighter(toolbox);
 
     info("Hide the box-model highlighter");
     yield toolbox.highlighter.hideBoxModel();
   }
-
-  gBrowser.removeCurrentTab();
 });
 
 function* getAttribute(nodeID, name, toolbox) {
   let actorID = getHighlighterActorID(toolbox);
   let {data: value} = yield executeInContent("Test:GetHighlighterAttribute",
                                              {nodeID, name, actorID});
   return value;
 }
diff --git a/browser/devtools/inspector/test/browser_inspector_highlighter-rect_01.js b/browser/devtools/inspector/test/browser_inspector_highlighter-rect_01.js
--- a/browser/devtools/inspector/test/browser_inspector_highlighter-rect_01.js
+++ b/browser/devtools/inspector/test/browser_inspector_highlighter-rect_01.js
@@ -100,17 +100,16 @@ add_task(function*() {
   hidden = yield getAttribute(highlighter, "hidden");
   ok(!hidden, "The highlighter is displayed");
   style = yield getAttribute(highlighter, "style");
   is(style, "left:100px;top:200px;width:500px;height:200px;background:red;",
     "The highlighter has the right background color");
 
   yield highlighter.hide();
   yield highlighter.finalize();
-  gBrowser.removeCurrentTab();
 });
 
 function* getAttribute(highlighter, name) {
   let {data: value} = yield executeInContent("Test:GetHighlighterAttribute", {
     nodeID: "highlighted-rect",
     name: name,
     actorID: highlighter.actorID
   });
diff --git a/browser/devtools/inspector/test/browser_inspector_highlighter-rect_02.js b/browser/devtools/inspector/test/browser_inspector_highlighter-rect_02.js
--- a/browser/devtools/inspector/test/browser_inspector_highlighter-rect_02.js
+++ b/browser/devtools/inspector/test/browser_inspector_highlighter-rect_02.js
@@ -28,17 +28,16 @@ add_task(function*() {
   // The parent iframe also has margin=50px and border=10px
   // = 50 + 10 + 50 + 10 = 120px
   // The rect is aat x=50 and y=50, so left and top should be 170px
   is(style, "left:170px;top:170px;width:100px;height:100px;",
     "The highlighter is correctly positioned");
 
   yield highlighter.hide();
   yield highlighter.finalize();
-  gBrowser.removeCurrentTab();
 });
 
 function* getAttribute(highlighter, name) {
   let {data: value} = yield executeInContent("Test:GetHighlighterAttribute", {
     nodeID: "highlighted-rect",
     name: name,
     actorID: highlighter.actorID
   });
diff --git a/browser/devtools/inspector/test/browser_inspector_highlighter-selector_01.js b/browser/devtools/inspector/test/browser_inspector_highlighter-selector_01.js
--- a/browser/devtools/inspector/test/browser_inspector_highlighter-selector_01.js
+++ b/browser/devtools/inspector/test/browser_inspector_highlighter-selector_01.js
@@ -55,10 +55,9 @@ add_task(function*() {
     });
     ok(nb !== null, "The number of highlighters was retrieved");
 
     is(nb, containerCount, "The correct number of highlighers were created");
     yield highlighter.hide();
   }
 
   yield highlighter.finalize();
-  gBrowser.removeCurrentTab();
 });
diff --git a/browser/devtools/inspector/test/browser_inspector_highlighter-selector_02.js b/browser/devtools/inspector/test/browser_inspector_highlighter-selector_02.js
--- a/browser/devtools/inspector/test/browser_inspector_highlighter-selector_02.js
+++ b/browser/devtools/inspector/test/browser_inspector_highlighter-selector_02.js
@@ -53,10 +53,9 @@ add_task(function*() {
     });
     ok(nb !== null, "The number of highlighters was retrieved");
 
     is(nb, containerCount, "The correct number of highlighers were created");
     yield highlighter.hide();
   }
 
   yield highlighter.finalize();
-  gBrowser.removeCurrentTab();
 });
diff --git a/browser/devtools/inspector/test/browser_inspector_highlighter-zoom.js b/browser/devtools/inspector/test/browser_inspector_highlighter-zoom.js
--- a/browser/devtools/inspector/test/browser_inspector_highlighter-zoom.js
+++ b/browser/devtools/inspector/test/browser_inspector_highlighter-zoom.js
@@ -42,18 +42,16 @@ add_task(function*() {
   
     yield isNodeCorrectlyHighlighted(getNode("div"), toolbox);
 
     info("Check that the highlighter root wrapper node was scaled down");
 
     let style = yield getRootNodeStyle(toolbox);
     is(style, expected, "The style attribute of the root element is correct");
   }
-
-  gBrowser.removeCurrentTab();
 });
 
 function* hoverElement(selector, inspector) {
   info("Hovering node " + selector + " in the markup view");
   let container = yield getContainerForSelector(selector, inspector);
   yield hoverContainer(container, inspector);
 }
 
diff --git a/browser/devtools/inspector/test/browser_inspector_infobar_01.js b/browser/devtools/inspector/test/browser_inspector_infobar_01.js
--- a/browser/devtools/inspector/test/browser_inspector_infobar_01.js
+++ b/browser/devtools/inspector/test/browser_inspector_infobar_01.js
@@ -45,18 +45,16 @@ add_task(function*() {
       classes: ""
       // No dims as they will vary between computers
     },
   ];
 
   for (let currTest of testData) {
     yield testPosition(currTest, inspector);
   }
-
-  gBrowser.removeCurrentTab();
 });
 
 function* testPosition(test, inspector) {
   info("Testing " + test.selector);
 
   let actorID = getHighlighterActorID(inspector.toolbox);
 
   yield selectAndHighlightNode(test.selector, inspector);
diff --git a/browser/devtools/inspector/test/browser_inspector_select-docshell.js b/browser/devtools/inspector/test/browser_inspector_select-docshell.js
--- a/browser/devtools/inspector/test/browser_inspector_select-docshell.js
+++ b/browser/devtools/inspector/test/browser_inspector_select-docshell.js
@@ -59,17 +59,16 @@ add_task(function*() {
   yield selectNode("#top", inspector);
   info("Select the iframe");
   frameBtns[0].click();
 
   yield willNavigate;
   yield newRoot;
 
   Services.prefs.clearUserPref("devtools.command-button-frames.enabled");
-  gBrowser.removeCurrentTab();
 });
 
 function assertMarkupViewIsLoaded(inspector) {
   let markupViewBox = inspector.panelDoc.getElementById("markup-box");
   is(markupViewBox.childNodes.length, 1, "The markup-view is loaded");
 }
 
 function assertMarkupViewIsEmpty(inspector) {
diff --git a/browser/devtools/inspector/test/head.js b/browser/devtools/inspector/test/head.js
--- a/browser/devtools/inspector/test/head.js
+++ b/browser/devtools/inspector/test/head.js
@@ -27,25 +27,21 @@ waitForExplicitFinish();
 let {TargetFactory, require} = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools;
 let {console} = Cu.import("resource://gre/modules/devtools/Console.jsm", {});
 
 // Import the GCLI test helper
 let testDir = gTestPath.substr(0, gTestPath.lastIndexOf("/"));
 Services.scriptloader.loadSubScript(testDir + "../../../commandline/test/helpers.js", this);
 
 gDevTools.testing = true;
-SimpleTest.registerCleanupFunction(() => {
+registerCleanupFunction(() => {
   gDevTools.testing = false;
 });
 
-SimpleTest.registerCleanupFunction(() => {
-  console.error("Here we are\n");
-  let {DebuggerServer} = Cu.import("resource://gre/modules/devtools/dbg-server.jsm", {});
-  console.error("DebuggerServer open connections: " + Object.getOwnPropertyNames(DebuggerServer._connections).length);
-
+registerCleanupFunction(() => {
   Services.prefs.clearUserPref("devtools.dump.emit");
   Services.prefs.clearUserPref("devtools.inspector.activeSidebar");
 });
 
 registerCleanupFunction(function*() {
   let target = TargetFactory.forTab(gBrowser.selectedTab);
   yield gDevTools.closeToolbox(target);
 
@@ -53,17 +49,16 @@ registerCleanupFunction(function*() {
   // somewhere over inspector the pointer is considered to be there when the
   // next test begins. This might cause unexpected events to be emitted when
   // another test moves the mouse.
   EventUtils.synthesizeMouseAtPoint(1, 1, {type: "mousemove"}, window);
 
   while (gBrowser.tabs.length > 1) {
     gBrowser.removeCurrentTab();
   }
-
 });
 
 /**
  * Add a new test tab in the browser and load the given url.
  * @param {String} url The url to be loaded in the new tab
  * @return a promise that resolves to the tab object when the url is loaded
  */
 let addTab = Task.async(function* (url) {
