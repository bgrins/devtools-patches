# HG changeset patch
# Parent 26b24014464821fec04bcb58fbbc3f42b28e1357
# User Brian Grinstead <bgrinstead@mozilla.com>
trying stuff with loader


diff --git a/browser/devtools/projecteditor/chrome/content/projecteditor.xul b/browser/devtools/projecteditor/chrome/content/projecteditor.xul
--- a/browser/devtools/projecteditor/chrome/content/projecteditor.xul
+++ b/browser/devtools/projecteditor/chrome/content/projecteditor.xul
@@ -59,16 +59,17 @@
       <menuitem id="cMenu_paste"/>
       <menuitem id="cMenu_delete"/>
       <menuseparator/>
       <menuitem id="cMenu_selectAll"/>
     </menupopup>
   </popupset>
 
   <deck id="main-deck" flex="1">
+      asdf2
     <vbox flex="1" id="source-deckitem">
       <hbox id="sources-body" flex="1">
         <vbox width="250" id="sources">
           <vbox flex="1">
           </vbox>
           <toolbar id="project-toolbar" class="devtools-toolbar" hidden="true"></toolbar>
         </vbox>
         <splitter id="source-editor-splitter" class="devtools-side-splitter"/>
diff --git a/toolkit/devtools/Loader.jsm b/toolkit/devtools/Loader.jsm
--- a/toolkit/devtools/Loader.jsm
+++ b/toolkit/devtools/Loader.jsm
@@ -152,22 +152,23 @@ SrcdirProvider.prototype = {
     let outputParserURI = this.fileURI(OS.Path.join(toolkitDir, "output-parser"));
     let touchEventsURI = this.fileURI(OS.Path.join(toolkitDir, "touch-events"));
     let clientURI = this.fileURI(OS.Path.join(toolkitDir, "client"));
     let prettyFastURI = this.fileURI(OS.Path.join(toolkitDir), "pretty-fast.js");
     let jsBeautifyURI = this.fileURI(OS.Path.join(toolkitDir, "jsbeautify", "beautify.js"));
     let asyncUtilsURI = this.fileURI(OS.Path.join(toolkitDir), "async-utils.js");
     let contentObserverURI = this.fileURI(OS.Path.join(toolkitDir), "content-observer.js");
     let gcliURI = this.fileURI(OS.Path.join(toolkitDir, "gcli", "source", "lib", "gcli"));
+    let gcliCommandsURI = this.fileURI(OS.Path.join(toolkitDir, "gcli", "commands"));
     let projecteditorURI = this.fileURI(OS.Path.join(devtoolsDir, "projecteditor"));
     let acornURI = this.fileURI(OS.Path.join(toolkitDir, "acorn"));
     let acornWalkURI = OS.Path.join(acornURI, "walk.js");
     let ternURI = OS.Path.join(toolkitDir, "tern");
     let sourceMapURI = this.fileURI(OS.Path.join(toolkitDir), "SourceMap.jsm");
-    this.loader = new loader.Loader({
+    let loader2 = new loader.Loader({
       id: "fx-devtools",
       modules: loaderModules,
       paths: {
         "": "resource://gre/modules/commonjs/",
         "main": mainURI,
         "devtools": devtoolsURI,
         "devtools/toolkit": toolkitURI,
         "devtools/server": serverURI,
@@ -177,29 +178,52 @@ SrcdirProvider.prototype = {
         "devtools/css-color": cssColorURI,
         "devtools/output-parser": outputParserURI,
         "devtools/touch-events": touchEventsURI,
         "devtools/client": clientURI,
         "devtools/pretty-fast": prettyFastURI,
         "devtools/jsbeautify": jsBeautifyURI,
         "devtools/async-utils": asyncUtilsURI,
         "devtools/content-observer": contentObserverURI,
+        "gcli/commands": gcliCommandsURI,
         "gcli": gcliURI,
         "projecteditor": projecteditorURI,
         "acorn": acornURI,
         "acorn/util/walk": acornWalkURI,
         "tern": ternURI,
         "source-map": sourceMapURI,
       },
       globals: loaderGlobals,
       invisibleToDebugger: this.invisibleToDebugger,
       sharedGlobal: true,
       sharedGlobalBlacklist: sharedGlobalBlacklist
     });
 
+    this.loader = Object.create(loader2, {
+      require: function() {
+console.log("bye there");
+      }
+    });
+    let require = this.loader.require;
+console.log("hi there");
+    // this.loader.require = function() {
+      // dump("HI BRIAN");
+      // return require.apply(this.loader, arguments);
+    // };
+// 
+    // };
+    // this.loader.require = function() {
+    //     console.log("TRYING TO REQUIRE", loader2, arguments);
+    //     return loader2.require.apply(this, arguments);
+    // }
+    // this.loader.require = function() {
+    //   console.log("TRYING TO REQUIRE", arguments);
+    //   return require.apply(this, arguments);
+    // };
+    // BuiltinProvider
     return this._writeManifest(devtoolsDir).then(null, Cu.reportError);
   },
 
   unload: function(reason) {
     loader.unload(this.loader, reason);
     delete this.loader;
   },
 
