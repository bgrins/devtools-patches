# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  4b3a602408dcc52b1597675193d9647d18b2e87a
Bug 1409097 - Remove the message-body-wrapper element from the new console frontend;r=nchevobbe

MozReview-Commit-ID: Iu1gm0gvk7Y

diff --git a/devtools/client/themes/webconsole.css b/devtools/client/themes/webconsole.css
--- a/devtools/client/themes/webconsole.css
+++ b/devtools/client/themes/webconsole.css
@@ -917,16 +917,24 @@ a.learn-more-link.webconsole-learn-more-
 .theme-dark .webconsole-output-wrapper .message.warn .arrayRightBracket {
   color: var(--theme-body-color);
 }
 .theme-dark .webconsole-output-wrapper .message.error .tree.object-inspector,
 .theme-dark .webconsole-output-wrapper .message.warn .tree.object-inspector {
   --tree-indent-border-color: var(--theme-body-color);
 }
 
+/* message-body-wrapper doesn't exist in the new frontend (Bug 1409097), so
+   copy the styles onto message-flex-body instead */
+.webconsole-output-wrapper .message > .message-flex-body {
+  flex: auto;
+  min-width: 0px;
+  margin: 3px;
+}
+
 .webconsole-output-wrapper .message-flex-body > .message-body {
   display: flex;
   flex-wrap: wrap;
   max-width: 100%;
 }
 
 .webconsole-output-wrapper .message-body > * {
   flex-shrink: 0;
diff --git a/devtools/client/webconsole/new-console-output/components/ConsoleOutput.js b/devtools/client/webconsole/new-console-output/components/ConsoleOutput.js
--- a/devtools/client/webconsole/new-console-output/components/ConsoleOutput.js
+++ b/devtools/client/webconsole/new-console-output/components/ConsoleOutput.js
@@ -59,30 +59,29 @@ const ConsoleOutput = createClass({
     if (!outputNode || !outputNode.lastChild) {
       // Force a scroll to bottom when messages are added to an empty console.
       // This makes the console stay pinned to the bottom if a batch of messages
       // are added after a page refresh (Bug 1402237).
       this.shouldScrollBottom = true;
       return;
     }
 
-    const lastChild = outputNode.lastChild;
     const visibleMessagesDelta =
       nextProps.visibleMessages.length - this.props.visibleMessages.length;
     const messagesDelta =
       nextProps.messages.size - this.props.messages.size;
 
     // We need to scroll to the bottom if:
     // - the number of messages displayed changed
     //   and we are already scrolled to the bottom
     // - the number of messages in the store changed
     //   and the new message is an evaluation result.
     this.shouldScrollBottom =
       (messagesDelta > 0 && nextProps.messages.last().type === MESSAGE_TYPE.RESULT) ||
-      (visibleMessagesDelta > 0 && isScrolledToBottom(lastChild, outputNode));
+      (visibleMessagesDelta > 0 && isScrolledToBottom(outputNode));
   },
 
   componentDidUpdate() {
     if (this.shouldScrollBottom) {
       scrollToBottom(this.outputNode);
     }
   },
 
@@ -132,19 +131,19 @@ const ConsoleOutput = createClass({
     );
   }
 });
 
 function scrollToBottom(node) {
   node.scrollTop = node.scrollHeight;
 }
 
-function isScrolledToBottom(outputNode, scrollNode) {
-  let lastNodeHeight = outputNode.lastChild ?
-                       outputNode.lastChild.clientHeight : 0;
+function isScrolledToBottom(scrollNode) {
+  let lastNodeHeight = scrollNode.lastChild ?
+                       scrollNode.lastChild.clientHeight : 0;
   return scrollNode.scrollTop + scrollNode.clientHeight >=
          scrollNode.scrollHeight - lastNodeHeight / 2;
 }
 
 function mapStateToProps(state, props) {
   return {
     messages: getAllMessagesById(state),
     visibleMessages: getVisibleMessages(state),
diff --git a/devtools/client/webconsole/new-console-output/components/Message.js b/devtools/client/webconsole/new-console-output/components/Message.js
--- a/devtools/client/webconsole/new-console-output/components/Message.js
+++ b/devtools/client/webconsole/new-console-output/components/Message.js
@@ -232,31 +232,29 @@ const Message = createClass({
       ref: node => {
         this.messageNode = node;
       }
     },
       timestampEl,
       MessageIndent({indent}),
       icon,
       collapse,
-      dom.span({ className: "message-body-wrapper" },
-        dom.span({ className: "message-flex-body" },
-          // Add whitespaces for formatting when copying to the clipboard.
-          timestampEl ? " " : null,
-          dom.span({ className: "message-body devtools-monospace" },
-            ...bodyElements,
-            learnMore
-          ),
-          repeat ? " " : null,
-          repeat,
-          " ", location
+      dom.span({ className: "message-flex-body" },
+        // Add whitespaces for formatting when copying to the clipboard.
+        timestampEl ? " " : null,
+        dom.span({ className: "message-body devtools-monospace" },
+          ...bodyElements,
+          learnMore
         ),
-        // Add a newline for formatting when copying to the clipboard.
-        "\n",
-        // If an attachment is displayed, the final newline is handled by the attachment.
-        attachment,
-        ...notesNodes
-      )
+        repeat ? " " : null,
+        repeat,
+        " ", location
+      ),
+      // Add a newline for formatting when copying to the clipboard.
+      "\n",
+      // If an attachment is displayed, the final newline is handled by the attachment.
+      attachment,
+      ...notesNodes,
     );
   }
 });
 
 module.exports = Message;
diff --git a/devtools/client/webconsole/new-console-output/test/components/console-api-call.test.js b/devtools/client/webconsole/new-console-output/test/components/console-api-call.test.js
--- a/devtools/client/webconsole/new-console-output/test/components/console-api-call.test.js
+++ b/devtools/client/webconsole/new-console-output/test/components/console-api-call.test.js
@@ -27,17 +27,17 @@ const serviceContainer = require("devtoo
 describe("ConsoleAPICall component:", () => {
   describe("console.log", () => {
     it("renders string grips", () => {
       const message = stubPreparedMessages.get("console.log('foobar', 'test')");
       const wrapper = render(ConsoleApiCall({ message, serviceContainer }));
 
       expect(wrapper.find(".message-body").text()).toBe("foobar test");
       expect(wrapper.find(".objectBox-string").length).toBe(2);
-      let selector = "div.message.cm-s-mozilla span span.message-flex-body " +
+      let selector = "div.message.cm-s-mozilla span.message-flex-body " +
         "span.message-body.devtools-monospace";
       expect(wrapper.find(selector).length).toBe(1);
 
       // There should be the location
       const locationLink = wrapper.find(`.message-location`);
       expect(locationLink.length).toBe(1);
       expect(locationLink.text()).toBe("test-console-api.html:1:27");
     });
@@ -72,17 +72,17 @@ describe("ConsoleAPICall component:", ()
         message,
         serviceContainer,
         repeat: 107
       }));
 
       expect(wrapper.find(".message-repeats").text()).toBe("107");
       expect(wrapper.find(".message-repeats").prop("title")).toBe("107 repeats");
 
-      let selector = "span > span.message-flex-body > " +
+      let selector = "span.message-flex-body > " +
         "span.message-body.devtools-monospace + span.message-repeats";
       expect(wrapper.find(selector).length).toBe(1);
     });
 
     it("has the expected indent", () => {
       const message = stubPreparedMessages.get("console.log('foobar', 'test')");
 
       const indent = 10;
diff --git a/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_scroll.js b/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_scroll.js
--- a/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_scroll.js
+++ b/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_scroll.js
@@ -64,16 +64,14 @@ add_task(async function () {
   ok(hasVerticalOverflow(outputContainer), "There is a vertical overflow");
   ok(isScrolledToBottom(outputContainer), "The console is scrolled to the bottom");
 });
 
 function hasVerticalOverflow(container) {
   return container.scrollHeight > container.clientHeight;
 }
 
-function isScrolledToBottom(container) {
-  if (!container.lastChild) {
-    return true;
-  }
-  let lastNodeHeight = container.lastChild.clientHeight;
-  return container.scrollTop + container.clientHeight >=
-         container.scrollHeight - lastNodeHeight / 2;
+function isScrolledToBottom(scrollNode) {
+  let lastNodeHeight = scrollNode.lastChild ?
+                       scrollNode.lastChild.clientHeight : 0;
+  return scrollNode.scrollTop + scrollNode.clientHeight >=
+         scrollNode.scrollHeight - lastNodeHeight / 2;
 }
