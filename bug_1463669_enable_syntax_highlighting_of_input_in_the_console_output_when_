# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1534804400 25200
#      Mon Aug 20 15:33:20 2018 -0700
# Node ID b1cbdced65a6dc4bce3f3a80fb5d4b558dfd7c7b
# Parent  77433149bfdcc82287acaed94b942818785b556e
Bug 1463669 - Enable syntax highlighting of input in the console output when possible;r=nchevobbe

When you enter JS into the console, we can now syntax highlight it in
the output when CodeMirror is enabled.

Differential Revision: https://phabricator.services.mozilla.com/D3842

diff --git a/devtools/client/webconsole/components/JSTerm.js b/devtools/client/webconsole/components/JSTerm.js
--- a/devtools/client/webconsole/components/JSTerm.js
+++ b/devtools/client/webconsole/components/JSTerm.js
@@ -348,16 +348,18 @@ class JSTerm extends Component {
       }
     } else if (this.inputNode) {
       this.inputNode.addEventListener("keypress", this._keyPress);
       this.inputNode.addEventListener("input", this._inputEventHandler);
       this.inputNode.addEventListener("keyup", this._inputEventHandler);
       this.focus();
     }
 
+    this.enableOutputSyntaxHighlighting();
+
     this.inputBorderSize = this.inputNode
       ? this.inputNode.getBoundingClientRect().height - this.inputNode.clientHeight
       : 0;
 
     // Update the character and chevron width needed for the popup offset calculations.
     this._inputCharWidth = this._getInputCharWidth();
     this._chevronWidth = this.editor ? null : this._getChevronWidth();
 
@@ -367,16 +369,40 @@ class JSTerm extends Component {
 
   shouldComponentUpdate(nextProps, nextState) {
     // XXX: For now, everything is handled in an imperative way and we
     // only want React to do the initial rendering of the component.
     // This should be modified when the actual refactoring will take place.
     return false;
   }
 
+  enableOutputSyntaxHighlighting() {
+    const getEditor = () => this.editor && this.editor.CodeMirror;
+    if (!getEditor()) {
+      // Syntax highlighting depends on CodeMirror being present, so bail
+      // out if it's not.
+      return;
+    }
+
+    class CodeMirrorHighlighted extends HTMLElement {
+      connectedCallback() {
+        if (getEditor() && !this.connectedOnce) {
+          this.connectedOnce = true;
+          this.classList.add("cm-s-mozilla");
+          getEditor().runMode(this.textContent, "application/javascript", this);
+        }
+      }
+    }
+
+    const customElementRegistry = this.hud.document.defaultView.customElements;
+    if (customElementRegistry) {
+      customElementRegistry.define("codemirror-highlighted", CodeMirrorHighlighted);
+    }
+  }
+
   /**
    * Getter for the element that holds the messages we display.
    * @type Element
    */
   get outputNode() {
     return this.hud.outputNode;
   }
 
diff --git a/devtools/client/webconsole/components/message-types/ConsoleCommand.js b/devtools/client/webconsole/components/message-types/ConsoleCommand.js
--- a/devtools/client/webconsole/components/message-types/ConsoleCommand.js
+++ b/devtools/client/webconsole/components/message-types/ConsoleCommand.js
@@ -2,17 +2,17 @@
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 // React & Redux
-const { createFactory } = require("devtools/client/shared/vendor/react");
+const { createFactory, createElement } = require("devtools/client/shared/vendor/react");
 const PropTypes = require("devtools/client/shared/vendor/react-prop-types");
 const Message = createFactory(require("devtools/client/webconsole/components/Message"));
 
 ConsoleCommand.displayName = "ConsoleCommand";
 
 ConsoleCommand.propTypes = {
   message: PropTypes.object.isRequired,
   timestampsVisible: PropTypes.bool.isRequired,
@@ -29,19 +29,21 @@ function ConsoleCommand(props) {
     serviceContainer,
   } = props;
 
   const {
     indent,
     source,
     type,
     level,
-    messageText: messageBody,
+    messageText,
   } = message;
 
+  const messageBody = createElement("codemirror-highlighted", null, messageText);
+
   return Message({
     source,
     type,
     level,
     topLevelClasses: [],
     messageBody,
     serviceContainer,
     indent,
diff --git a/devtools/client/webconsole/test/mochitest/browser.ini b/devtools/client/webconsole/test/mochitest/browser.ini
--- a/devtools/client/webconsole/test/mochitest/browser.ini
+++ b/devtools/client/webconsole/test/mochitest/browser.ini
@@ -229,16 +229,17 @@ skip-if = os != 'mac' # The tested ctrl+
 [browser_jsterm_popup_close_on_tab_switch.js]
 [browser_jsterm_screenshot_command_clipboard.js]
 subsuite = clipboard
 [browser_jsterm_screenshot_command_user.js]
 subsuite = clipboard
 [browser_jsterm_screenshot_command_file.js]
 [browser_jsterm_selfxss.js]
 subsuite = clipboard
+[browser_jsterm_syntax_highlight_output.js]
 [browser_webconsole_allow_mixedcontent_securityerrors.js]
 tags = mcb
 [browser_webconsole_batching.js]
 [browser_webconsole_block_mixedcontent_securityerrors.js]
 tags = mcb
 [browser_webconsole_cached_messages.js]
 [browser_webconsole_cd_iframe.js]
 [browser_webconsole_certificate_messages.js]
diff --git a/devtools/client/webconsole/test/mochitest/browser_jsterm_syntax_highlight_output.js b/devtools/client/webconsole/test/mochitest/browser_jsterm_syntax_highlight_output.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/test/mochitest/browser_jsterm_syntax_highlight_output.js
@@ -0,0 +1,32 @@
+/* Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+const TEST_URI =
+  "data:text/html;charset=utf-8,Test syntax highlighted output";
+
+add_task(async function() {
+  // Only run this test with the CodeMirror-powered jsterm.
+  await pushPref("devtools.webconsole.jsterm.codeMirror", true);
+  await performTests();
+});
+
+async function performTests() {
+  const hud = await openNewTabAndConsole(TEST_URI);
+  const jsterm = hud.jsterm;
+
+  // Syntax highlighting is implemented with a Custom Element:
+  ok(hud.iframeWindow.customElements.get("codemirror-highlighted"));
+
+  // Check that we syntax highlight output to look like the inputed text.
+  // See Bug 1463669.
+  const onMessage = waitForMessage(hud, `var a = 'str';`);
+  jsterm.execute("var a = 'str';");
+  const message = await onMessage;
+  const highlighted = message.node.querySelectorAll("codemirror-highlighted");
+  /* eslint-disable-next-line max-len */
+  const expectedMarkup = `<codemirror-highlighted class="cm-s-mozilla"><span class="cm-keyword">var</span> <span class="cm-def">a</span> <span class="cm-operator">=</span> <span class="cm-string">'str'</span>;</codemirror-highlighted>`;
+  is(highlighted.length, 1, "1 syntax highlighted tag");
+  is(highlighted[0].outerHTML, expectedMarkup, "got expected html");
+}
