# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  e7d7cc7dbd04f65e537b78744c2fcf7afac4e0dd
Attempt to speed up the webconsole by limiting the amount of time spent adding messages in each iteration

diff --git a/browser/devtools/webconsole/webconsole.js b/browser/devtools/webconsole/webconsole.js
--- a/browser/devtools/webconsole/webconsole.js
+++ b/browser/devtools/webconsole/webconsole.js
@@ -58,17 +58,17 @@ const IGNORED_SOURCE_URLS = ["debugger e
 
 // The amount of time in milliseconds that we wait before performing a live
 // search.
 const SEARCH_DELAY = 200;
 
 // The number of lines that are displayed in the console output by default, for
 // each category. The user can change this number by adjusting the hidden
 // "devtools.hud.loglimit.{network,cssparser,exception,console}" preferences.
-const DEFAULT_LOG_LIMIT = 200;
+const DEFAULT_LOG_LIMIT = 1000;
 
 // The various categories of messages. We start numbering at zero so we can
 // use these as indexes into the MESSAGE_PREFERENCE_KEYS matrix below.
 const CATEGORY_NETWORK = 0;
 const CATEGORY_CSS = 1;
 const CATEGORY_JS = 2;
 const CATEGORY_WEBDEV = 3;
 const CATEGORY_INPUT = 4;   // always on
@@ -2166,19 +2166,25 @@ WebConsoleFrame.prototype = {
 
     // We won't bother to try to restore scroll position if this is showing
     // a lot of messages at once (and there are still items in the queue).
     // It is going to purge whatever you were looking at anyway.
     let scrolledToBottom = shouldPrune ||
                            Utils.isOutputScrolledToBottom(outputNode);
 
     // Output the current batch of messages.
+    let startTime1 = Date.now();
     let messages = new Set();
-    for (let i = 0; i < batch.length; i++) {
-      let item = batch[i];
+    for (let i = 0; i < toDisplay; i++) {
+      if ((Date.now() - startTime1) > MAX_CLEANUP_TIME) {
+        console.log("OUT OF TIME", i);;
+        break;
+      }
+
+      let item = batch.shift();
       let result = this._outputMessageFromQueue(hudIdSupportsString, item);
       if (result) {
         messages.add({
           node: result.isRepeated ? result.isRepeated : result.node,
           response: result.message,
           update: !!result.isRepeated,
         });
 
@@ -4818,19 +4824,19 @@ var Utils = {
    * @return number
    *         The number of messages allowed for the specific category.
    */
   logLimitForCategory: function Utils_logLimitForCategory(aCategory)
   {
     let logLimit = DEFAULT_LOG_LIMIT;
 
     try {
-      let prefName = CATEGORY_CLASS_FRAGMENTS[aCategory];
-      logLimit = Services.prefs.getIntPref("devtools.hud.loglimit." + prefName);
-      logLimit = Math.max(logLimit, 1);
+      // let prefName = CATEGORY_CLASS_FRAGMENTS[aCategory];
+      // logLimit = Services.prefs.getIntPref("devtools.hud.loglimit." + prefName);
+      // logLimit = Math.max(logLimit, 1);
     }
     catch (e) { }
 
     return logLimit;
   },
 };
 
 ///////////////////////////////////////////////////////////////////////////////
