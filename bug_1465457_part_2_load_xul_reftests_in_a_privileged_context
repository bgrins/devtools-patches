# HG changeset patch
# User Paolo Amadini <paolo.mozmail@amadzone.org>
# Date 1527691387 -3600
#      Wed May 30 15:43:07 2018 +0100
# Node ID 757f402225397cae2dbda9a4288a37499b1bee06
# Parent  5d886b4eb7398c1479a571bc1897b0f5e27a01a5
Bug 1465457 - Part 2 - Load XUL reftests in a privileged context.

MozReview-Commit-ID: 92yRtpn7k2g

Differential Revision: https://phabricator.services.mozilla.com/D11573

diff --git a/layout/tools/reftest/manifest.jsm b/layout/tools/reftest/manifest.jsm
--- a/layout/tools/reftest/manifest.jsm
+++ b/layout/tools/reftest/manifest.jsm
@@ -637,32 +637,43 @@ function ServeTestBase(aURL, depth) {
     // Give the testbase URI access to XUL and XBL
     Services.perms.add(testbase, "allowXULXBL", Services.perms.ALLOW_ACTION);
     return testbase;
 }
 
 function CreateUrls(test) {
     let secMan = Cc[NS_SCRIPTSECURITYMANAGER_CONTRACTID]
                     .getService(Ci.nsIScriptSecurityManager);
+    let chromeReg = Cc["@mozilla.org/chrome/chrome-registry;1"]
+                      .getService(Ci.nsIChromeRegistry);
 
     let manifestURL = g.ioService.newURI(test.manifest);
     let principal = secMan.createCodebasePrincipal(manifestURL, {});
 
     let testbase = manifestURL;
     if (test.runHttp)
         testbase = ServeTestBase(manifestURL, test.httpDepth)
 
     function FileToURI(file)
     {
         if (file === null)
             return file;
 
         var testURI = g.ioService.newURI(file, null, testbase);
         secMan.checkLoadURIWithPrincipal(principal, testURI,
                                          Ci.nsIScriptSecurityManager.DISALLOW_SCRIPT);
+
+        // Load XUL files from "chrome:" URIs to run them with privileges.
+        if (testURI.spec.endsWith(".xul")) {
+          let chromeURI = g.ioService.newURI("chrome://reftest-file/content" +
+                                             testURI.pathQueryRef);
+          chromeReg.registerChromeURLOverrideForTest(chromeURI, testURI);
+          return chromeURI;
+        }
+
         return testURI;
     }
 
     let files = [test.url1, test.url2];
     [test.url1, test.url2] = files.map(FileToURI);
 
     return test;
 }
diff --git a/layout/tools/reftest/reftest-content.js b/layout/tools/reftest/reftest-content.js
--- a/layout/tools/reftest/reftest-content.js
+++ b/layout/tools/reftest/reftest-content.js
@@ -1075,16 +1075,28 @@ function DoAssertionCheck()
         numAsserts = newAssertionCount - gAssertionCount;
         gAssertionCount = newAssertionCount;
     }
     SendAssertionCount(numAsserts);
 }
 
 function LoadURI(uri)
 {
+    if (uri.startsWith("chrome:")) {
+        // Register the override in the content process too.
+        let chromeReg = Cc["@mozilla.org/chrome/chrome-registry;1"]
+                          .getService(Ci.nsIChromeRegistry);
+        let ioService = Cc["@mozilla.org/network/io-service;1"]
+                         .getService(Ci.nsIIOService);
+        let chromeURI = ioService.newURI(uri);
+        let testURI = ioService.newURI("file://" +
+                      chromeURI.pathQueryRef.replace("/content/", "/"));
+        chromeReg.registerChromeURLOverrideForTest(chromeURI, testURI);
+    }
+
     let loadURIOptions = {
       triggeringPrincipal: Services.scriptSecurityManager.getSystemPrincipal(),
     };
     webNavigation().loadURI(uri, loadURIOptions);
 }
 
 function LogWarning(str)
 {
diff --git a/layout/tools/reftest/reftest.jsm b/layout/tools/reftest/reftest.jsm
--- a/layout/tools/reftest/reftest.jsm
+++ b/layout/tools/reftest/reftest.jsm
@@ -155,17 +155,17 @@ function OnRefTestLoad(win)
     g.pendingCrashDumpDir.append("Crash Reports");
     g.pendingCrashDumpDir.append("pending");
 
     var env = Cc["@mozilla.org/process/environment;1"].
               getService(Ci.nsIEnvironment);
 
     var prefs = Cc["@mozilla.org/preferences-service;1"].
                 getService(Ci.nsIPrefBranch);
-    g.browserIsRemote = prefs.getBoolPref("browser.tabs.remote.autostart", false);
+    g.browserIsRemote = false; // prefs.getBoolPref("browser.tabs.remote.autostart", false);
 
     g.browserIsIframe = prefs.getBoolPref("reftest.browser.iframe.enabled", false);
 
     g.logLevel = prefs.getStringPref("reftest.logLevel", "info");
 
     if (win === undefined || win == null) {
       win = window;
     }
