# HG changeset patch
# User Gabriel Luong <gabriel.luong@gmail.com>
# Parent  181d06e8c7df7530d52ddf3f6a07cdf5c4f65e6c
Bug 987365 - Add pseudo-class lock options to rule view r=bgrins

diff --git a/browser/devtools/styleinspector/cssruleview.xhtml b/browser/devtools/styleinspector/cssruleview.xhtml
--- a/browser/devtools/styleinspector/cssruleview.xhtml
+++ b/browser/devtools/styleinspector/cssruleview.xhtml
@@ -40,16 +40,22 @@
     <div id="root" class="devtools-monospace">
       <div class="devtools-toolbar">
         <div class="devtools-searchbox">
           <input id="ruleview-searchbox"
                  class="devtools-searchinput devtools-rule-searchbox"
                  type="search" placeholder="&filterStylesPlaceholder;"/>
           <button id="ruleview-searchinput-clear" class="devtools-searchinput-clear"></button>
         </div>
+        <button id="pseudo-class-panel-toggle" class="devtools-button"></button>
+      </div>
+      <div id="pseudo-class-panel" class="devtools-toolbar">
+        <label><input id="pseudo-hover-toggle" type="checkbox" value=":hover" />:hover</label>
+        <label><input id="pseudo-active-toggle" type="checkbox" value=":active" />:active</label>
+        <label><input id="pseudo-focus-toggle" type="checkbox" value=":focus" />:focus</label>
       </div>
     </div>
 
     <div id="ruleview-container" class="ruleview devtools-monospace">
     </div>
 
   </body>
 </html>
diff --git a/browser/devtools/styleinspector/rule-view.js b/browser/devtools/styleinspector/rule-view.js
--- a/browser/devtools/styleinspector/rule-view.js
+++ b/browser/devtools/styleinspector/rule-view.js
@@ -1124,28 +1124,40 @@ function CssRuleView(aInspector, aDoc, a
   this._onAddRule = this._onAddRule.bind(this);
   this._onSelectAll = this._onSelectAll.bind(this);
   this._onCopy = this._onCopy.bind(this);
   this._onCopyColor = this._onCopyColor.bind(this);
   this._onToggleOrigSources = this._onToggleOrigSources.bind(this);
   this._onFilterStyles = this._onFilterStyles.bind(this);
   this._onClearSearch = this._onClearSearch.bind(this);
   this._onFilterTextboxContextMenu = this._onFilterTextboxContextMenu.bind(this);
+  this._onTogglePseudoClassPanel = this._onTogglePseudoClassPanel.bind(this);
+  this._onTogglePseudoClass = this._onTogglePseudoClass.bind(this);
 
   this.element = this.doc.getElementById("ruleview-container");
   this.searchField = this.doc.getElementById("ruleview-searchbox");
   this.searchClearButton = this.doc.getElementById("ruleview-searchinput-clear");
-
+  this.pseudoClassPanel = this.doc.getElementById("pseudo-class-panel");
+  this.pseudoClassToggle = this.doc.getElementById("pseudo-class-panel-toggle");
+  this.hoverCheckbox = this.doc.getElementById("pseudo-hover-toggle");
+  this.activeCheckbox = this.doc.getElementById("pseudo-active-toggle");
+  this.focusCheckbox = this.doc.getElementById("pseudo-focus-toggle");
+
+  this.pseudoClassPanel.hidden = true;
   this.searchClearButton.hidden = true;
 
   this.element.addEventListener("copy", this._onCopy);
   this.element.addEventListener("contextmenu", this._onContextMenu);
   this.searchField.addEventListener("input", this._onFilterStyles);
   this.searchField.addEventListener("contextmenu", this._onFilterTextboxContextMenu);
   this.searchClearButton.addEventListener("click", this._onClearSearch);
+  this.pseudoClassToggle.addEventListener("click", this._onTogglePseudoClassPanel);
+  this.hoverCheckbox.addEventListener("click", this._onTogglePseudoClass);
+  this.activeCheckbox.addEventListener("click", this._onTogglePseudoClass);
+  this.focusCheckbox.addEventListener("click", this._onTogglePseudoClass);
 
   this._handlePrefChange = this._handlePrefChange.bind(this);
   this._onSourcePrefChanged = this._onSourcePrefChanged.bind(this);
 
   this._prefObserver = new PrefObserver("devtools.");
   this._prefObserver.on(PREF_ORIG_SOURCES, this._onSourcePrefChanged);
   this._prefObserver.on(PREF_UA_STYLES, this._handlePrefChange);
   this._prefObserver.on(PREF_DEFAULT_COLOR_UNIT, this._handlePrefChange);
@@ -1698,18 +1710,29 @@ CssRuleView.prototype = {
 
     // Remove bound listeners
     this.element.removeEventListener("copy", this._onCopy);
     this.element.removeEventListener("contextmenu", this._onContextMenu);
     this.searchField.removeEventListener("input", this._onFilterStyles);
     this.searchField.removeEventListener("contextmenu",
       this._onFilterTextboxContextMenu);
     this.searchClearButton.removeEventListener("click", this._onClearSearch);
+    this.pseudoClassToggle.removeEventListener("click",
+      this._onTogglePseudoClassPanel);
+    this.hoverCheckbox.removeEventListener("click", this._onTogglePseudoClass);
+    this.activeCheckbox.removeEventListener("click", this._onTogglePseudoClass);
+    this.focusCheckbox.removeEventListener("click", this._onTogglePseudoClass);
+
     this.searchField = null;
     this.searchClearButton = null;
+    this.pseudoClassPanel = null;
+    this.pseudoClassToggle = null;
+    this.hoverCheckbox = null;
+    this.activeCheckbox = null;
+    this.focusCheckbox = null;
 
     if (this.element.parentNode) {
       this.element.parentNode.removeChild(this.element);
     }
 
     if (this._elementStyle) {
       this._elementStyle.destroy();
     }
@@ -1769,16 +1792,49 @@ CssRuleView.prototype = {
       }
     }
 
     return promise.all(promises).then(() => {
       return this._populate(true);
     });
   },
 
+  refreshPseudoClassPanel: function() {
+    this.hoverCheckbox.checked = false;
+    this.activeCheckbox.checked = false;
+    this.focusCheckbox.checked = false;
+
+    this.hoverCheckbox.disabled = false;
+    this.activeCheckbox.disabled = false;
+    this.focusCheckbox.disabled = false;
+
+    if (this.inspector.selection.isElementNode()) {
+      for (let pseudoClassLock of this._elementStyle.element.pseudoClassLocks) {
+        switch (pseudoClassLock) {
+          case ":hover": {
+            this.hoverCheckbox.checked = true;
+            break;
+          }
+          case ":active": {
+            this.activeCheckbox.checked = true;
+            break;
+          }
+          case ":focus": {
+            this.focusCheckbox.checked = true;
+            break;
+          }
+        }
+      }
+    } else {
+      this.hoverCheckbox.disabled = true;
+      this.activeCheckbox.disabled = true;
+      this.focusCheckbox.disabled = true;
+    }
+  },
+
   _populate: function(clearRules = false) {
     let elementStyle = this._elementStyle;
     return this._elementStyle.populate().then(() => {
       if (this._elementStyle != elementStyle || this.isDestroyed) {
         return;
       }
 
       if (clearRules) {
@@ -2090,17 +2146,32 @@ CssRuleView.prototype = {
    * Clear all search filter highlights in the panel.
    */
   clearHighlight: function() {
     for (let element of this._highlightedElements) {
       element.classList.remove("ruleview-highlight");
     }
 
     this._highlightedElements = [];
-  }
+  },
+
+  _onTogglePseudoClassPanel: function() {
+    if (this.pseudoClassPanel.hidden) {
+      this.pseudoClassPanel.style.display = "-moz-box";
+    } else {
+      this.pseudoClassPanel.style.display = "none";
+    }
+
+    this.pseudoClassPanel.hidden = !this.pseudoClassPanel.hidden;
+  },
+
+  _onTogglePseudoClass: function(event) {
+    let target = event.currentTarget;
+    this.inspector.togglePseudoClass(target.value);
+   }
 };
 
 /**
  * Create a RuleEditor.
  *
  * @param {CssRuleView} aRuleView
  *        The CssRuleView containg the document holding this rule editor.
  * @param {Rule} aRule
diff --git a/browser/devtools/styleinspector/ruleview.css b/browser/devtools/styleinspector/ruleview.css
--- a/browser/devtools/styleinspector/ruleview.css
+++ b/browser/devtools/styleinspector/ruleview.css
@@ -19,21 +19,25 @@ body {
 
 #ruleview-container {
   -moz-user-select: text;
   overflow: auto;
   min-height: 0;
   flex: 1;
 }
 
-#root .devtools-toolbar {
+.devtools-toolbar {
   width: 100%;
   display: -moz-box;
 }
 
+#pseudo-class-panel {
+  display: none;
+}
+
 .ruleview {
   overflow: auto;
   -moz-user-select: text;
 }
 
 .ruleview-code {
   direction: ltr;
 }
diff --git a/browser/devtools/styleinspector/style-inspector.js b/browser/devtools/styleinspector/style-inspector.js
--- a/browser/devtools/styleinspector/style-inspector.js
+++ b/browser/devtools/styleinspector/style-inspector.js
@@ -69,27 +69,30 @@ RuleViewTool.prototype = {
       return;
     }
 
     this.view.setPageStyle(this.inspector.pageStyle);
 
     if (!this.inspector.selection.isConnected() ||
         !this.inspector.selection.isElementNode()) {
       this.view.selectElement(null);
+      this.view.refreshPseudoClassPanel();
       return;
     }
 
     if (!event || event == "new-node-front") {
       let done = this.inspector.updating("rule-view");
       this.view.selectElement(this.inspector.selection.nodeFront).then(done, done);
+      this.view.refreshPseudoClassPanel();
     }
   },
 
   refresh: function() {
     if (this.isSidebarActive()) {
+      this.view.refreshPseudoClassPanel();
       this.view.refreshPanel();
     }
   },
 
   clearUserProperties: function() {
     if (this.view && this.view.store && this.view.store.userProperties) {
       this.view.store.userProperties.clear();
     }
diff --git a/browser/devtools/styleinspector/test/browser.ini b/browser/devtools/styleinspector/test/browser.ini
--- a/browser/devtools/styleinspector/test/browser.ini
+++ b/browser/devtools/styleinspector/test/browser.ini
@@ -100,16 +100,17 @@ skip-if = (os == "win" && debug) || e10s
 [browser_ruleview_multiple_properties_01.js]
 [browser_ruleview_multiple_properties_02.js]
 [browser_ruleview_original-source-link.js]
 [browser_ruleview_cycle-color.js]
 [browser_ruleview_override.js]
 [browser_ruleview_pseudo-element_01.js]
 [browser_ruleview_pseudo-element_02.js]
 skip-if = e10s # Bug 1090340
+[browser_ruleview_pseudo_lock_options.js]
 [browser_ruleview_refresh-on-attribute-change_01.js]
 [browser_ruleview_refresh-on-attribute-change_02.js]
 [browser_ruleview_refresh-on-style-change.js]
 [browser_ruleview_search-filter_01.js]
 [browser_ruleview_search-filter_02.js]
 [browser_ruleview_search-filter_03.js]
 [browser_ruleview_search-filter_04.js]
 [browser_ruleview_search-filter_05.js]
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_pseudo_lock_options.js b/browser/devtools/styleinspector/test/browser_ruleview_pseudo_lock_options.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/styleinspector/test/browser_ruleview_pseudo_lock_options.js
@@ -0,0 +1,75 @@
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+ http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Tests that the rule view pseudo lock options work properly.
+
+let TEST_URI = [
+  '<style type="text/css">',
+  '  div {',
+  '    color: red;',
+  '  }',
+  '  div:hover {',
+  '    color: blue;',
+  '  }',
+  '  div:active {',
+  '    color: yellow;',
+  '  }',
+  '  div:focus {',
+  '    color: green;',
+  '  }',
+  '</style>',
+  '<div>test div</div>',
+].join("\n");
+
+add_task(function*() {
+  yield addTab("data:text/html;charset=utf-8," + encodeURIComponent(TEST_URI));
+  let {toolbox, inspector, view} = yield openRuleView();
+  yield selectNode("div", inspector);
+
+  info("Toggle the pseudo class panel open");
+  view.pseudoClassToggle.click();
+  ok(!view.pseudoClassPanel.hidden, "Pseudo Class Panel Opened");
+
+  yield togglePseudoClass(inspector, view, view.hoverCheckbox);
+  yield assertPseudoAdded(inspector, view, ":hover");
+  yield togglePseudoClass(inspector, view, view.hoverCheckbox);
+  yield assertPseudoRemoved(inspector, view);
+
+  yield togglePseudoClass(inspector, view, view.activeCheckbox);
+  yield assertPseudoAdded(inspector, view, ":active");
+  yield togglePseudoClass(inspector, view, view.activeCheckbox);
+  yield assertPseudoRemoved(inspector, view);
+
+  yield togglePseudoClass(inspector, view, view.focusCheckbox);
+  yield assertPseudoAdded(inspector, view, ":focus");
+  yield togglePseudoClass(inspector, view, view.focusCheckbox);
+  yield assertPseudoRemoved(inspector, view);
+
+  info("Toggle the pseudo class panel close");
+  view.pseudoClassToggle.click();
+  ok(view.pseudoClassPanel.hidden, "Pseudo Class Panel Closed");
+});
+
+function* togglePseudoClass(inspector, ruleView, pseudoClassOption) {
+  info("Toggle the pseudoclass, wait for it to be applied");
+  let onRefresh = inspector.once("rule-view-refreshed");
+  pseudoClassOption.click();
+  yield onRefresh;
+}
+
+function* assertPseudoAdded(inspector, ruleView, pseudoClass) {
+  info("Check that the ruleview contains the pseudo-class rule");
+  is(ruleView.element.children.length, 3, "Should have 3 rules.");
+  is(getRuleViewRuleEditor(ruleView, 1).rule.selectorText, "div" + pseudoClass,
+    "rule view is showing " + pseudoClass + " rule");
+}
+
+function* assertPseudoRemoved(inspector, ruleView) {
+  info("Check that the ruleview no longer contains the pseudo-class rule");
+  is(ruleView.element.children.length, 2, "Should have 2 rules.");
+  is(getRuleViewRuleEditor(ruleView, 1).rule.selectorText, "div",
+    "Second rule is div");
+}
