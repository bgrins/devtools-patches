# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  56fee5da5eba1d103fd24f099c30f4478b11f0d9

diff --git a/browser/components/enterprisepolicies/tests/browser/browser_policy_search_engine.js b/browser/components/enterprisepolicies/tests/browser/browser_policy_search_engine.js
--- a/browser/components/enterprisepolicies/tests/browser/browser_policy_search_engine.js
+++ b/browser/components/enterprisepolicies/tests/browser/browser_policy_search_engine.js
@@ -21,19 +21,18 @@ add_task(async function test_setup() {
 // it is not.
 async function test_opensearch(shouldWork) {
   let searchBar = BrowserSearch.searchBar;
 
   let rootDir = getRootDirectory(gTestPath);
   let tab = await BrowserTestUtils.openNewForegroundTab(gBrowser, rootDir + "opensearch.html");
   let searchPopup = document.getElementById("PopupSearchAutoComplete");
   let promiseSearchPopupShown = BrowserTestUtils.waitForEvent(searchPopup, "popupshown");
-  let searchBarButton = document.getAnonymousElementByAttribute(searchBar,
-                                                                "anonid",
-                                                                "searchbar-search-button");
+  let searchBarButton = searchBar.querySelector(".searchbar-search-button");
+
   searchBarButton.click();
   await promiseSearchPopupShown;
   let oneOffsContainer = document.getAnonymousElementByAttribute(searchPopup,
                                                                  "anonid",
                                                                  "search-one-off-buttons");
   let engineListElement = document.getAnonymousElementByAttribute(oneOffsContainer,
                                                                   "anonid",
                                                                   "add-engines");
diff --git a/browser/components/search/content/searchbar.js b/browser/components/search/content/searchbar.js
--- a/browser/components/search/content/searchbar.js
+++ b/browser/components/search/content/searchbar.js
@@ -1,16 +1,17 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
   * License, v. 2.0. If a copy of the MPL was not distributed with this
   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
-// This is loaded into all XUL windows. Wrap in a block to prevent
-// leaking to window scope.
+/* eslint-env mozilla/browser-window */
+/* globals XULCommandEvent */
+
 {
 
 class MozSearchbar extends MozXULElement {
   constructor() {
     super();
     this.destroy = this.destroy.bind(this);
     this._setupEventListeners();
     let searchbar = this;
@@ -27,31 +28,31 @@ class MozSearchbar extends MozXULElement
         }
       },
       QueryInterface: ChromeUtils.generateQI([Ci.nsIObserver]),
     };
     this.content = MozXULElement.parseXULToFragment(`
       <stringbundle src="chrome://browser/locale/search.properties" anonid="searchbar-stringbundle"></stringbundle>
       <textbox class="searchbar-textbox" type="autocomplete" inputtype="search" placeholder="&searchInput.placeholder;" flex="1" autocompletepopup="PopupSearchAutoComplete" autocompletesearch="search-autocomplete" autocompletesearchparam="searchbar-history" maxrows="10" completeselectedindex="true" minresultsforpopup="0" inherits="disabled,disableautocomplete,searchengine,src,newlines">
         <box>
-          <hbox class="searchbar-search-button" anonid="searchbar-search-button" inherits="addengines" tooltiptext="&searchIcon.tooltip;">
+          <hbox class="searchbar-search-button" inherits="addengines" tooltiptext="&searchIcon.tooltip;">
             <image class="searchbar-search-icon"></image>
             <image class="searchbar-search-icon-overlay"></image>
           </hbox>
         </box>
         <hbox class="search-go-container">
-          <image class="search-go-button urlbar-icon" hidden="true" anonid="search-go-button" onclick="handleSearchCommand(event);" tooltiptext="&contentSearchSubmit.tooltip;"></image>
+          <image class="search-go-button urlbar-icon" hidden="true" onclick="handleSearchCommand(event);" tooltiptext="&contentSearchSubmit.tooltip;"></image>
         </hbox>
       </textbox>
     `, ["chrome://browser/locale/browser.dtd"]);
   }
+
   connectedCallback() {
     this.appendChild(document.importNode(this.content, true));
     window.addEventListener("unload", this.destroy);
-
     this._ignoreFocus = false;
 
     this._clickClosedPopup = false;
 
     this._stringBundle = this.querySelector("[anonid=searchbar-stringbundle]");
 
     this._textboxInitialized = false;
 
@@ -173,18 +174,17 @@ class MozSearchbar extends MozXULElement
 
     var name = this.currentEngine.name;
     var text = this._stringBundle.getFormattedString("searchtip", [name]);
     this._textbox.label = text;
     this._textbox.tooltipText = text;
   }
 
   updateGoButtonVisibility() {
-    this.querySelector("[anonid=search-go-button]")
-      .hidden = !this._textbox.value;
+    this.querySelector(".search-go-button").hidden = !this._textbox.value;
   }
 
   openSuggestionsPanel(aShowOnlySettingsIfEmpty) {
     if (this._textbox.open)
       return;
 
     this._textbox.showHistoryPopup();
 
@@ -212,17 +212,17 @@ class MozSearchbar extends MozXULElement
     this.openSuggestionsPanel();
   }
 
   handleSearchCommand(aEvent, aEngine, aForceNewTab) {
     var where = "current";
     let params;
 
     // Open ctrl/cmd clicks on one-off buttons in a new background tab.
-    if (aEvent && aEvent.originalTarget.getAttribute("anonid") == "search-go-button") {
+    if (aEvent && aEvent.originalTarget.classList.contains("search-go-button")) {
       if (aEvent.button == 2)
         return;
       where = whereToOpenLink(aEvent, false, true);
     } else if (aForceNewTab) {
       where = "tab";
       if (Services.prefs.getBoolPref("browser.tabs.loadInBackground"))
         where += "-background";
     } else {
@@ -293,21 +293,21 @@ class MozSearchbar extends MozXULElement
   doSearch(aData, aWhere, aEngine, aParams, aOneOff) {
     var textBox = this._textbox;
 
     // Save the current value in the form history
     if (aData && !PrivateBrowsingUtils.isWindowPrivate(window) && this.FormHistory.enabled) {
       this.FormHistory.update({
         op: "bump",
         fieldname: textBox.getAttribute("autocompletesearchparam"),
-        value: aData
+        value: aData,
       }, {
         handleError(aError) {
           Cu.reportError("Saving search to form history failed: " + aError.message);
-        }
+        },
       });
     }
 
     let engine = aEngine || this.currentEngine;
     var submission = engine.getSubmission(aData, null, "searchbar");
     let telemetrySearchDetails = this.telemetrySearchDetails;
     this.telemetrySearchDetails = null;
     if (telemetrySearchDetails && telemetrySearchDetails.index == -1) {
@@ -372,17 +372,17 @@ class MozSearchbar extends MozXULElement
     });
 
     this.addEventListener("focus", (event) => {
       // Speculatively connect to the current engine's search URI (and
       // suggest URI, if different) to reduce request latency
       this.currentEngine.speculativeConnect({
         window,
         originAttributes: gBrowser.contentPrincipal
-          .originAttributes
+          .originAttributes,
       });
 
       if (this._ignoreFocus) {
         // This window has been re-focused, don't show the suggestions
         this._ignoreFocus = false;
         return;
       }
 
@@ -394,28 +394,28 @@ class MozSearchbar extends MozXULElement
       // textbox, that will be taken care of in the click handler.
       if (Services.focus.getLastFocusMethod(window) & Services.focus.FLAG_BYMOUSE)
         return;
 
       this.openSuggestionsPanel();
     });
 
     this.addEventListener("mousedown", (event) => {
-      if (event.originalTarget.getAttribute("anonid") == "searchbar-search-button") {
+      if (event.originalTarget.classList.contains(".searchbar-search-button")) {
         this._clickClosedPopup = this._textbox.popup._isHiding;
       }
     }, true);
 
     this.addEventListener("mousedown", (event) => {
       // Ignore clicks on the search go button.
-      if (event.originalTarget.getAttribute("anonid") == "search-go-button") {
+      if (event.originalTarget.classList.contains("search-go-button")) {
         return;
       }
 
-      let isIconClick = event.originalTarget.getAttribute("anonid") == "searchbar-search-button";
+      let isIconClick = event.originalTarget.classList.contains("searchbar-search-button");
 
       // Ignore clicks on the icon if they were made to close the popup
       if (isIconClick && this._clickClosedPopup) {
         return;
       }
 
       // Open the suggestions whenever clicking on the search icon or if there
       // is text in the textbox.
diff --git a/browser/components/search/jar.mn b/browser/components/search/jar.mn
--- a/browser/components/search/jar.mn
+++ b/browser/components/search/jar.mn
@@ -1,13 +1,13 @@
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 browser.jar:
+        content/browser/search/search.xml                           (content/search.xml)
         content/browser/search/searchbar.js                         (content/searchbar.js)
-        content/browser/search/search.xml                           (content/search.xml)
         content/browser/search/searchReset.xhtml                    (content/searchReset.xhtml)
         content/browser/search/searchReset.js                       (content/searchReset.js)
 
         searchplugins/                                              (searchplugins/**)
 
 % resource search-plugins %searchplugins/
diff --git a/browser/components/search/test/browser_426329.js b/browser/components/search/test/browser_426329.js
--- a/browser/components/search/test/browser_426329.js
+++ b/browser/components/search/test/browser_426329.js
@@ -65,18 +65,17 @@ function promiseSetEngine() {
         case "engine-added":
           var engine = ss.getEngineByName("Bug 426329");
           ok(engine, "Engine was added.");
           ss.currentEngine = engine;
           break;
         case "engine-current":
           ok(ss.currentEngine.name == "Bug 426329", "currentEngine set");
           searchBar = BrowserSearch.searchBar;
-          searchButton = document.getAnonymousElementByAttribute(searchBar,
-                             "anonid", "search-go-button");
+          searchButton = searchBar.querySelector(".search-go-button");
           ok(searchButton, "got search-go-button");
           searchBar.value = "test";
 
           Services.obs.removeObserver(observer, "browser-search-engine-modified");
           resolve();
           break;
       }
     }
diff --git a/browser/components/search/test/browser_hiddenOneOffs_diacritics.js b/browser/components/search/test/browser_hiddenOneOffs_diacritics.js
--- a/browser/components/search/test/browser_hiddenOneOffs_diacritics.js
+++ b/browser/components/search/test/browser_hiddenOneOffs_diacritics.js
@@ -12,19 +12,17 @@ var Preferences =
 
 let searchIcon;
 
 add_task(async function init() {
   let searchbar = await gCUITestUtils.addSearchBar();
   registerCleanupFunction(() => {
     gCUITestUtils.removeSearchBar();
   });
-  searchIcon = document.getAnonymousElementByAttribute(
-    searchbar, "anonid", "searchbar-search-button"
-  );
+  searchIcon = searchbar.querySelector(".searchbar-search-button");
 
   let currentEngine = Services.search.currentEngine;
   await promiseNewEngine("testEngine_diacritics.xml", {setAsCurrent: false});
   registerCleanupFunction(() => {
     Services.search.currentEngine = currentEngine;
     Services.prefs.clearUserPref("browser.search.hiddenOneOffs");
   });
 });
diff --git a/browser/components/search/test/browser_oneOffContextMenu.js b/browser/components/search/test/browser_oneOffContextMenu.js
--- a/browser/components/search/test/browser_oneOffContextMenu.js
+++ b/browser/components/search/test/browser_oneOffContextMenu.js
@@ -20,19 +20,17 @@ const searchInNewTabMenuItem = document.
 let searchbar;
 let searchIcon;
 
 add_task(async function init() {
   searchbar = await gCUITestUtils.addSearchBar();
   registerCleanupFunction(() => {
     gCUITestUtils.removeSearchBar();
   });
-  searchIcon = document.getAnonymousElementByAttribute(
-    searchbar, "anonid", "searchbar-search-button"
-  );
+  searchIcon = searchbar.querySelector(".searchbar-search-button");
 
   await promiseNewEngine(TEST_ENGINE_BASENAME, {
     setAsCurrent: false,
   });
 });
 
 add_task(async function telemetry() {
   // Open the popup.
diff --git a/browser/components/search/test/browser_oneOffContextMenu_setDefault.js b/browser/components/search/test/browser_oneOffContextMenu_setDefault.js
--- a/browser/components/search/test/browser_oneOffContextMenu_setDefault.js
+++ b/browser/components/search/test/browser_oneOffContextMenu_setDefault.js
@@ -26,19 +26,17 @@ registerCleanupFunction(resetEngine);
 
 let searchIcon;
 
 add_task(async function init() {
   let searchbar = await gCUITestUtils.addSearchBar();
   registerCleanupFunction(() => {
     gCUITestUtils.removeSearchBar();
   });
-  searchIcon = document.getAnonymousElementByAttribute(
-    searchbar, "anonid", "searchbar-search-button"
-  );
+  searchIcon = searchbar.querySelector(".searchbar-search-button");
 
   await promiseNewEngine(TEST_ENGINE_BASENAME, {
     setAsCurrent: false,
   });
 });
 
 add_task(async function test_searchBarChangeEngine() {
   let oneOffButton = await openPopupAndGetEngineButton(true, searchPopup,
diff --git a/browser/components/search/test/browser_oneOffHeader.js b/browser/components/search/test/browser_oneOffHeader.js
--- a/browser/components/search/test/browser_oneOffHeader.js
+++ b/browser/components/search/test/browser_oneOffHeader.js
@@ -53,19 +53,17 @@ function synthesizeNativeMouseMove(aElem
 let searchbar;
 let searchIcon;
 
 add_task(async function init() {
   searchbar = await gCUITestUtils.addSearchBar();
   registerCleanupFunction(() => {
     gCUITestUtils.removeSearchBar();
   });
-  searchIcon = document.getAnonymousElementByAttribute(
-    searchbar, "anonid", "searchbar-search-button"
-  );
+  searchIcon = searchbar.querySelector(".searchbar-search-button");
 
   await promiseNewEngine("testEngine.xml");
 });
 
 add_task(async function test_notext() {
   let promise = promiseEvent(searchPopup, "popupshown");
   info("Opening search panel");
   EventUtils.synthesizeMouseAtCenter(searchIcon, {});
diff --git a/browser/components/search/test/browser_searchbar_openpopup.js b/browser/components/search/test/browser_searchbar_openpopup.js
--- a/browser/components/search/test/browser_searchbar_openpopup.js
+++ b/browser/components/search/test/browser_searchbar_openpopup.js
@@ -59,22 +59,18 @@ let searchIcon;
 let goButton;
 
 add_task(async function init() {
   searchbar = await gCUITestUtils.addSearchBar();
   registerCleanupFunction(() => {
     gCUITestUtils.removeSearchBar();
   });
   textbox = searchbar._textbox;
-  searchIcon = document.getAnonymousElementByAttribute(
-    searchbar, "anonid", "searchbar-search-button"
-  );
-  goButton = document.getAnonymousElementByAttribute(
-    searchbar, "anonid", "search-go-button"
-  );
+  searchIcon = searchbar.querySelector(".searchbar-search-button");
+  goButton = searchbar.querySelector(".search-go-button");
 
   await promiseNewEngine("testEngine.xml");
 
   // First cleanup the form history in case other tests left things there.
   await new Promise((resolve, reject) => {
     info("cleanup the search history");
     searchbar.FormHistory.update({op: "remove", fieldname: "searchbar-history"},
                                  {handleCompletion: resolve,
diff --git a/browser/components/search/test/browser_searchbar_smallpanel_keyboard_navigation.js b/browser/components/search/test/browser_searchbar_smallpanel_keyboard_navigation.js
--- a/browser/components/search/test/browser_searchbar_smallpanel_keyboard_navigation.js
+++ b/browser/components/search/test/browser_searchbar_smallpanel_keyboard_navigation.js
@@ -24,19 +24,17 @@ let textbox;
 let searchIcon;
 
 add_task(async function init() {
   searchbar = await gCUITestUtils.addSearchBar();
   registerCleanupFunction(() => {
     gCUITestUtils.removeSearchBar();
   });
   textbox = searchbar._textbox;
-  searchIcon = document.getAnonymousElementByAttribute(
-    searchbar, "anonid", "searchbar-search-button"
-  );
+  searchIcon = searchbar.querySelector(".searchbar-search-button");
 
   await promiseNewEngine("testEngine.xml");
 
   // First cleanup the form history in case other tests left things there.
   await new Promise((resolve, reject) => {
     info("cleanup the search history");
     searchbar.FormHistory.update({op: "remove", fieldname: "searchbar-history"},
                                  {handleCompletion: resolve,
diff --git a/browser/components/uitour/UITour.jsm b/browser/components/uitour/UITour.jsm
--- a/browser/components/uitour/UITour.jsm
+++ b/browser/components/uitour/UITour.jsm
@@ -148,19 +148,17 @@ var UITour = {
       infoPanelOffsetX: 18,
       infoPanelPosition: "after_start",
       query: "#searchbar",
       widgetName: "search-container",
     }],
     ["searchIcon", {
       query: (aDocument) => {
         let searchbar = aDocument.getElementById("searchbar");
-        return aDocument.getAnonymousElementByAttribute(searchbar,
-                                                        "anonid",
-                                                        "searchbar-search-button");
+        return searchbar.querySelector(".searchbar-search-button");
       },
       widgetName: "search-container",
     }],
     ["searchPrefsLink", {
       query: (aDocument) => {
         let element = null;
         let popup = aDocument.getElementById("PopupSearchAutoComplete");
         if (popup.state != "open")
diff --git a/tools/lint/eslint/eslint-plugin-mozilla/lib/environments/browser-window.js b/tools/lint/eslint/eslint-plugin-mozilla/lib/environments/browser-window.js
--- a/tools/lint/eslint/eslint-plugin-mozilla/lib/environments/browser-window.js
+++ b/tools/lint/eslint/eslint-plugin-mozilla/lib/environments/browser-window.js
@@ -67,16 +67,17 @@ function getGlobalScriptsIncludes() {
   fileData = fileData.split("\n");
 
   let result = [];
 
   for (let line of fileData) {
     let match = line.match(globalScriptsRegExp);
     if (match) {
       let sourceFile = (match[1] || match[2])
+                .replace("chrome://browser/content/search/", "browser/components/search/content/")
                 .replace("chrome://browser/content/", "browser/base/content/")
                 .replace("chrome://global/content/", "toolkit/content/");
 
       for (let mapping of Object.getOwnPropertyNames(MAPPINGS)) {
         if (sourceFile.includes(mapping)) {
           sourceFile = MAPPINGS[mapping];
         }
       }
