# HG changeset patch
# User Hallvord R. M. Steen <hsteen@mozilla.com>
# Date 1441525315 -7200
#      Sun Sep 06 09:41:55 2015 +0200
# Node ID 08764b74a126afcd30f88f61c4ab025c5127f9c1
# Parent  0a191c6357a4594adbbfae0e249bdc6fc7c3a49d
enable debugger shortcuts in split console, bug 1183325

diff --git a/browser/devtools/debugger/panel.js b/browser/devtools/debugger/panel.js
--- a/browser/devtools/debugger/panel.js
+++ b/browser/devtools/debugger/panel.js
@@ -52,16 +52,23 @@ DebuggerPanel.prototype = {
 
     return targetPromise
       .then(() => this._controller.startupDebugger())
       .then(() => this._controller.connect())
       .then(() => {
         this._toolbox.on("host-changed", this.handleHostChanged);
         this.target.on("thread-paused", this.highlightWhenPaused);
         this.target.on("thread-resumed", this.unhighlightWhenResumed);
+        // Add keys from this document's keyset to the toolbox, so they
+        // can work when the split console is focused.
+        let keysToClone = ["stepOverKey", "stepOverKey2", "stepInKey",
+                           "stepInKey2", "stepOutKey", "stepOutKey2"];
+        for (let key of keysToClone) {
+          this._toolbox.useKeyWithSplitConsole(this.panelWin.document.getElementById(key), "jsdebugger");
+        }
         this.isReady = true;
         this.emit("ready");
         return this;
       })
       .then(null, function onError(aReason) {
         DevToolsUtils.reportException("DebuggerPanel.prototype.open", aReason);
       });
   },
diff --git a/browser/devtools/framework/toolbox.js b/browser/devtools/framework/toolbox.js
--- a/browser/devtools/framework/toolbox.js
+++ b/browser/devtools/framework/toolbox.js
@@ -481,16 +481,51 @@ Toolbox.prototype = {
       // navigation.
       let jsdebugger = this.getPanel("jsdebugger");
       if (jsdebugger && jsdebugger.panelWin.gThreadClient.state == "paused") {
         e.preventDefault();
       }
     }
   },
 
+  useKeyWithSplitConsole: function(keyElement, whichTool){
+    let cloned = keyElement.cloneNode();
+    cloned.setAttribute("oncommand", "void(0)");
+    cloned.removeAttribute("command");
+    cloned.addEventListener("command", (e) => {
+      // Only forward the command if the debugger is focused
+      if (this.currentToolId === whichTool) {
+        // Command might cause focus to switch to the tool the command is meant for
+        // Let's try to steal it back afterwards..
+        // var focusedElement = this.doc.commandDispatcher.focusedElement;
+        var focusedElement = Services.focus.focusedElement;
+        console.log(focusedElement == this.doc.commandDispatcher.focusedElement);
+        keyElement.doCommand();
+        // (The problem is that this code for restoring focus doesn't actually work..)
+
+        this.doc.defaultView.setTimeout(() => {
+        console.log("REFOCUSING", focusedElement, Services.focus.activeWindow);
+        Services.focus.focusedWindow = focusedElement.ownerDocument.defaultView;
+        Services.focus.setFocus(focusedElement, Ci.nsIFocusManager.FLAG_NOSCROLL);
+
+        }, 1000)
+        DevToolsUtils.executeSoon(() => {
+        console.log("current focused el", Services.focus.focusedElement);
+        debugger;
+        // focusedElement.ownerDocument.defaultView.focus();
+        Services.focus.focusedWindow = focusedElement.ownerDocument.defaultView;
+        Services.focus.setFocus(focusedElement, Ci.nsIFocusManager.FLAG_NOSCROLL);
+          // focusedElement.focus();
+          // focusedElement.ownerDocument.defaultView.focus();
+        });
+      }
+    }, true);
+    this.doc.getElementById("toolbox-keyset").appendChild(cloned);
+  },
+
   _addReloadKeys: function() {
     [
       ["toolbox-reload-key", false],
       ["toolbox-reload-key2", false],
       ["toolbox-force-reload-key", true],
       ["toolbox-force-reload-key2", true]
     ].forEach(([id, force]) => {
       this.doc.getElementById(id).addEventListener("command", () => {
