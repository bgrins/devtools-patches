# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  2903b0280572ec549faf5f4a29b728b6543336df
Bug 1234620 - Replace promise rejection handlers that use console.error with console.error.bind(console);r=jryans

diff --git a/devtools/client/devtools-clhandler.js b/devtools/client/devtools-clhandler.js
--- a/devtools/client/devtools-clhandler.js
+++ b/devtools/client/devtools-clhandler.js
@@ -44,17 +44,17 @@ devtoolsCommandlineHandler.prototype = {
   handleConsoleFlag: function(cmdLine) {
     let window = Services.wm.getMostRecentWindow("devtools:webconsole");
     if (!window) {
       let { require } = Cu.import("resource://devtools/shared/Loader.jsm", {});
       // Load the browser devtools main module as the loader's main module.
       Cu.import("resource://devtools/client/framework/gDevTools.jsm");
       let hudservice = require("devtools/client/webconsole/hudservice");
       let { console } = Cu.import("resource://gre/modules/Console.jsm", {});
-      hudservice.toggleBrowserConsole().then(null, console.error);
+      hudservice.toggleBrowserConsole().then(null, console.error.bind(console));
     } else {
       window.focus(); // the Browser Console was already open
     }
 
     if (cmdLine.state == Ci.nsICommandLine.STATE_REMOTE_AUTO) {
       cmdLine.preventDefault = true;
     }
   },
diff --git a/devtools/client/fontinspector/font-inspector.js b/devtools/client/fontinspector/font-inspector.js
--- a/devtools/client/fontinspector/font-inspector.js
+++ b/devtools/client/fontinspector/font-inspector.js
@@ -165,20 +165,20 @@ FontInspector.prototype = {
       includePreviews: true,
       previewText: this.getPreviewText(),
       previewFillStyle: fillStyle
     };
 
     let fonts = [];
     if (showAllFonts) {
       fonts = yield this.pageStyle.getAllUsedFontFaces(options)
-                      .then(null, console.error);
+                      .then(null, console.error.bind(console));
     } else {
       fonts = yield this.pageStyle.getUsedFontFaces(node, options)
-                      .then(null, console.error);
+                      .then(null, console.error.bind(console));
     }
 
     if (!fonts || !fonts.length) {
       // No fonts to display. Clear the previously shown fonts.
       this.clear();
       return;
     }
 
diff --git a/devtools/client/framework/test/browser_toolbox_custom_host.js b/devtools/client/framework/test/browser_toolbox_custom_host.js
--- a/devtools/client/framework/test/browser_toolbox_custom_host.js
+++ b/devtools/client/framework/test/browser_toolbox_custom_host.js
@@ -14,18 +14,18 @@ function test() {
 
   iframe = document.createElement("iframe");
   document.documentElement.appendChild(iframe);
 
   gBrowser.selectedBrowser.addEventListener("load", function onLoad(evt) {
     gBrowser.selectedBrowser.removeEventListener(evt.type, onLoad, true);
     let options = {customIframe: iframe};
     gDevTools.showToolbox(target, null, Toolbox.HostType.CUSTOM, options)
-             .then(testCustomHost, console.error)
-             .then(null, console.error);
+             .then(testCustomHost, console.error.bind(console))
+             .then(null, console.error.bind(console));
   }, true);
 
   content.location = "data:text/html,test custom host";
 
   function onMessage(event) {
     info("onMessage: " + event.data);
     let json = JSON.parse(event.data);
     if (json.name == "toolbox-close") {
diff --git a/devtools/client/framework/test/browser_toolbox_raise.js b/devtools/client/framework/test/browser_toolbox_raise.js
--- a/devtools/client/framework/test/browser_toolbox_raise.js
+++ b/devtools/client/framework/test/browser_toolbox_raise.js
@@ -9,35 +9,35 @@ var toolbox, target, tab1, tab2;
 function test() {
   gBrowser.selectedTab = tab1 = gBrowser.addTab();
   tab2 = gBrowser.addTab();
   target = TargetFactory.forTab(gBrowser.selectedTab);
 
   gBrowser.selectedBrowser.addEventListener("load", function onLoad(evt) {
     gBrowser.selectedBrowser.removeEventListener(evt.type, onLoad, true);
     gDevTools.showToolbox(target)
-             .then(testBottomHost, console.error)
-             .then(null, console.error);
+             .then(testBottomHost, console.error.bind(console))
+             .then(null, console.error.bind(console));
   }, true);
 
   content.location = "data:text/html,test for opening toolbox in different hosts";
 }
 
 function testBottomHost(aToolbox) {
   toolbox = aToolbox;
 
   // switch to another tab and test toolbox.raise()
   gBrowser.selectedTab = tab2;
   executeSoon(function() {
     is(gBrowser.selectedTab, tab2, "Correct tab is selected before calling raise");
     toolbox.raise();
     executeSoon(function() {
       is(gBrowser.selectedTab, tab1, "Correct tab was selected after calling raise");
 
-      toolbox.switchHost(Toolbox.HostType.WINDOW).then(testWindowHost).then(null, console.error);
+      toolbox.switchHost(Toolbox.HostType.WINDOW).then(testWindowHost).then(null, console.error.bind(console));
     });
   });
 }
 
 function testWindowHost() {
   // Make sure toolbox is not focused.
   window.addEventListener("focus", onFocus, true);
 
diff --git a/devtools/client/framework/test/browser_toolbox_sidebar.js b/devtools/client/framework/test/browser_toolbox_sidebar.js
--- a/devtools/client/framework/test/browser_toolbox_sidebar.js
+++ b/devtools/client/framework/test/browser_toolbox_sidebar.js
@@ -82,17 +82,17 @@ function test() {
         allTabsReady(panel);
       });
 
       panel.sidebar.addTab("tab1", tab1URL, true);
       panel.sidebar.addTab("tab2", tab2URL);
       panel.sidebar.addTab("tab3", tab3URL);
 
       panel.sidebar.show();
-    }).then(null, console.error);
+    }).then(null, console.error.bind(console));
   });
 
   function allTabsReady(panel) {
     if (!tab1Selected || !readyTabs.tab1 || !readyTabs.tab2 || !readyTabs.tab3) {
       return;
     }
 
     ok(registeredTabs.tab1, "tab1 registered");
diff --git a/devtools/client/framework/test/browser_toolbox_sidebar_events.js b/devtools/client/framework/test/browser_toolbox_sidebar_events.js
--- a/devtools/client/framework/test/browser_toolbox_sidebar_events.js
+++ b/devtools/client/framework/test/browser_toolbox_sidebar_events.js
@@ -63,17 +63,17 @@ function test() {
 
       panel.sidebar.once("hide", function(event, id) {
         collectedEvents.push(event);
       });
 
       panel.sidebar.once("tab1-selected", () => finishUp(panel));
       panel.sidebar.addTab("tab1", tab1URL, true);
       panel.sidebar.show();
-    }).then(null, console.error);
+    }).then(null, console.error.bind(console));
   });
 
   function finishUp(panel) {
     panel.sidebar.hide();
     panel.sidebar.destroy();
 
     let events = collectedEvents.join(":");
     is(events, "sidebar-created:show:hide:sidebar-destroyed",
diff --git a/devtools/client/framework/test/browser_toolbox_tool_ready.js b/devtools/client/framework/test/browser_toolbox_tool_ready.js
--- a/devtools/client/framework/test/browser_toolbox_tool_ready.js
+++ b/devtools/client/framework/test/browser_toolbox_tool_ready.js
@@ -38,10 +38,10 @@ function test() {
     toggleAllTools(true);
     let tab = yield addTab("about:blank");
     let target = TargetFactory.forTab(tab);
     yield target.makeRemote();
     yield performChecks(target);
     gBrowser.removeCurrentTab();
     toggleAllTools(false);
     finish();
-  }, console.error);
+  }, console.error.bind(console));
 }
diff --git a/devtools/client/framework/test/browser_toolbox_tool_remote_reopen.js b/devtools/client/framework/test/browser_toolbox_tool_remote_reopen.js
--- a/devtools/client/framework/test/browser_toolbox_tool_remote_reopen.js
+++ b/devtools/client/framework/test/browser_toolbox_tool_remote_reopen.js
@@ -125,10 +125,10 @@ function test() {
         ok(false, "Front for " + actor + " still held in pool!");
       }
     }
 
     gBrowser.removeCurrentTab();
     DebuggerServer.destroy();
     toggleAllTools(false);
     finish();
-  }, console.error);
+  }, console.error.bind(console));
 }
diff --git a/devtools/client/framework/toolbox.js b/devtools/client/framework/toolbox.js
--- a/devtools/client/framework/toolbox.js
+++ b/devtools/client/framework/toolbox.js
@@ -1252,17 +1252,17 @@ Toolbox.prototype = {
         if (typeof panel.emit == "undefined") {
           EventEmitter.decorate(panel);
         }
 
         gDevTools.emit(id + "-ready", this, panel);
         this.emit(id + "-ready", panel);
 
         deferred.resolve(panel);
-      }, console.error);
+      }, console.error.bind(console));
     };
 
     iframe.setAttribute("src", definition.url);
     if (definition.panelLabel) {
       iframe.setAttribute("aria-label", definition.panelLabel);
     }
 
     // Depending on the host, iframe.contentWindow is not always
@@ -1976,32 +1976,32 @@ Toolbox.prototype = {
       if (!this._target) {
         return null;
       }
       let target = this._target;
       this._target = null;
       this.highlighterUtils.release();
       target.off("close", this.destroy);
       return target.destroy();
-    }, console.error).then(() => {
+    }, console.error.bind(console)).then(() => {
       this.emit("destroyed");
 
       // Free _host after the call to destroyed in order to let a chance
       // to destroyed listeners to still query toolbox attributes
       this._host = null;
       this._toolPanels.clear();
 
       // Force GC to prevent long GC pauses when running tests and to free up
       // memory in general when the toolbox is closed.
       if (DevToolsUtils.testing) {
         win.QueryInterface(Ci.nsIInterfaceRequestor)
            .getInterface(Ci.nsIDOMWindowUtils)
            .garbageCollect();
       }
-    }).then(null, console.error);
+    }).then(null, console.error.bind(console));
 
     let leakCheckObserver = ({wrappedJSObject: barrier}) => {
       // Make the leak detector wait until this toolbox is properly destroyed.
       barrier.client.addBlocker("DevTools: Wait until toolbox is destroyed",
                                 this._destroyer);
     };
 
     let topic = "shutdown-leaks-before-check";
diff --git a/devtools/client/inspector/inspector-panel.js b/devtools/client/inspector/inspector-panel.js
--- a/devtools/client/inspector/inspector-panel.js
+++ b/devtools/client/inspector/inspector-panel.js
@@ -102,17 +102,17 @@ InspectorPanel.prototype = {
    */
   open: function() {
     return this.target.makeRemote().then(() => {
       return this._getPageStyle();
     }).then(() => {
       return this._getDefaultNodeForSelection();
     }).then(defaultSelection => {
       return this._deferredOpen(defaultSelection);
-    }).then(null, console.error);
+    }).then(null, console.error.bind(console));
   },
 
   get toolbox() {
     return this._toolbox;
   },
 
   get inspector() {
     return this._toolbox.inspector;
@@ -414,17 +414,17 @@ InspectorPanel.prototype = {
         if (!this.markup) {
           return;
         }
         this.markup.expandNode(this.selection.nodeFront);
         this.emit("new-root");
       });
     };
     this._pendingSelection = onNodeSelected;
-    this._getDefaultNodeForSelection().then(onNodeSelected, console.error);
+    this._getDefaultNodeForSelection().then(onNodeSelected, console.error.bind(console));
   },
 
   _selectionCssSelector: null,
 
   /**
    * Set the currently selected node unique css selector.
    * Will store the current target url along with it to allow pre-selection at
    * reload
@@ -894,17 +894,17 @@ InspectorPanel.prototype = {
           linkFollow.removeAttribute("hidden");
           linkFollow.setAttribute("label", toolboxStrings.GetStringFromName(
             "toolbox.viewJsSourceInDebugger.label"));
         }
 
         linkCopy.removeAttribute("hidden");
         linkCopy.setAttribute("label", strings.GetStringFromName(
           "inspector.menu.copyUrlToClipboard.label"));
-      }, console.error);
+      }, console.error.bind(console));
     } else if (type === "idref") {
       linkSeparator.removeAttribute("hidden");
       linkFollow.removeAttribute("hidden");
       linkFollow.setAttribute("label", strings.formatStringFromName(
         "inspector.menu.selectElement.label", [popupNode.dataset.link], 1));
     }
   },
 
@@ -1070,17 +1070,17 @@ InspectorPanel.prototype = {
 
   /**
    * Clear any pseudo-class locks applied to the current hierarchy.
    */
   clearPseudoClasses: function() {
     if (!this.walker) {
       return;
     }
-    return this.walker.clearPseudoClassLocks().then(null, console.error);
+    return this.walker.clearPseudoClassLocks().then(null, console.error.bind(console));
   },
 
   /**
    * Edit the outerHTML of the selected Node.
    */
   editHTML: function() {
     if (!this.selection.isNode()) {
       return;
@@ -1206,17 +1206,17 @@ InspectorPanel.prototype = {
    */
   copyUniqueSelector: function() {
     if (!this.selection.isNode()) {
       return;
     }
 
     this.selection.nodeFront.getUniqueSelector().then((selector) => {
       clipboardHelper.copyString(selector);
-    }).then(null, console.error);
+    }).then(null, console.error.bind(console));
   },
 
   /**
    * Initiate gcli screenshot command on selected node
    */
   screenshotNode: function() {
     CommandUtils.createRequisition(this._target, {
       environment: CommandUtils.createEnvironment(this, '_target')
@@ -1369,11 +1369,11 @@ InspectorPanel.prototype = {
   /**
    * This method is here for the benefit of copying links.
    */
   copyAttributeLink: function(link) {
     // When the inspector menu was setup on click (see _setupNodeLinkMenu), we
     // already checked that resolveRelativeURL existed.
     this.inspector.resolveRelativeURL(link, this.selection.nodeFront).then(url => {
       clipboardHelper.copyString(url);
-    }, console.error);
+    }, console.error.bind(console));
   }
 };
diff --git a/devtools/client/layoutview/view.js b/devtools/client/layoutview/view.js
--- a/devtools/client/layoutview/view.js
+++ b/devtools/client/layoutview/view.js
@@ -96,17 +96,17 @@ EditingSession.prototype = {
 
       if (property.value == "") {
         modifications.removeProperty(-1, property.name);
       } else {
         modifications.setProperty(-1, property.name, property.value, "");
       }
     }
 
-    return modifications.apply().then(null, console.error);
+    return modifications.apply().then(null, console.error.bind(console));
   },
 
   /**
    * Reverts all of the property changes made by this instance. Returns a
    * promise that will be resolved when complete.
    */
   revert: function() {
     let modifications = this._rules[0].startModifyingProperties();
@@ -114,17 +114,17 @@ EditingSession.prototype = {
     for (let [property, value] of this._modifications) {
       if (value != "") {
         modifications.setProperty(-1, property, value, "");
       } else {
         modifications.removeProperty(-1, property);
       }
     }
 
-    return modifications.apply().then(null, console.error);
+    return modifications.apply().then(null, console.error.bind(console));
   },
 
   destroy: function() {
     this._doc = null;
     this._rules = null;
     this._modifications.clear();
   }
 };
@@ -469,17 +469,17 @@ LayoutView.prototype = {
       let newValue = width + "\u00D7" + height;
       if (this.sizeLabel.textContent != newValue) {
         this.sizeLabel.textContent = newValue;
       }
 
       this.elementRules = styleEntries.map(e => e.rule);
 
       this.inspector.emit("layoutview-updated");
-    }).bind(this)).then(null, console.error);
+    }).bind(this)).then(null, console.error.bind(console));
 
     return this._lastRequest = lastRequest;
   },
 
   /**
    * Update the text in the tooltip shown when hovering over a value to provide
    * information about the source CSS rule that sets this value.
    * @param {DOMNode} el The element that will receive the tooltip.
diff --git a/devtools/client/markupview/markup-view.js b/devtools/client/markupview/markup-view.js
--- a/devtools/client/markupview/markup-view.js
+++ b/devtools/client/markupview/markup-view.js
@@ -727,17 +727,17 @@ MarkupView.prototype = {
 
           if (container.selected) {
             this.navigate(this.getContainer(focusNode));
           }
         });
       }, () => {
         this.walker.insertBefore(aNode, parent, nextSibling);
       });
-    }).then(null, console.error);
+    }).then(null, console.error.bind(console));
   },
 
   /**
    * If an editable item is focused, select its container.
    */
   _onFocus: function(aEvent) {
     let parent = aEvent.target;
     while (!parent.container) {
@@ -994,17 +994,17 @@ MarkupView.prototype = {
     return this._expandContainer(aContainer).then(() => {
       let child = aContainer.children.firstChild;
       let promises = [];
       while (child) {
         promises.push(this._expandAll(child.container));
         child = child.nextSibling;
       }
       return promise.all(promises);
-    }).then(null, console.error);
+    }).then(null, console.error.bind(console));
   },
 
   /**
    * Expand the entire tree beneath a node.
    *
    * @param aContainer The node to expand, or null
    *        to start from the top.
    */
@@ -1034,17 +1034,17 @@ MarkupView.prototype = {
     if (isOuter) {
       walkerPromise = this.walker.outerHTML(aNode);
     } else {
       walkerPromise = this.walker.innerHTML(aNode);
     }
 
     return walkerPromise.then(longstr => {
       return longstr.string().then(html => {
-        longstr.release().then(null, console.error);
+        longstr.release().then(null, console.error.bind(console));
         return html;
       });
     });
   },
 
   /**
    * Retrieve the outerHTML for a remote node.
    * @param aNode The NodeFront to get the outerHTML for.
@@ -1469,17 +1469,17 @@ MarkupView.prototype = {
         if (!children.hasLast) {
           let span = this.template("more-nodes", data);
           fragment.appendChild(span);
         }
       }
 
       aContainer.children.appendChild(fragment);
       return aContainer;
-    }).then(null, console.error);
+    }).then(null, console.error.bind(console));
     this._queuedChildUpdates.set(aContainer, updatePromise);
     return updatePromise;
   },
 
   _waitForChildren: function() {
     if (!this._queuedChildUpdates) {
       return promise.resolve(undefined);
     }
@@ -2417,17 +2417,17 @@ function TextEditor(aContainer, aNode, a
     multiline: true,
     trimOutput: false,
     done: (aVal, aCommit) => {
       if (!aCommit) {
         return;
       }
       this.node.getNodeValue().then(longstr => {
         longstr.string().then(oldValue => {
-          longstr.release().then(null, console.error);
+          longstr.release().then(null, console.error.bind(console));
 
           this.container.undo.do(() => {
             this.node.setNodeValue(aVal);
           }, () => {
             this.node.setNodeValue(oldValue);
           });
         });
       });
@@ -2458,22 +2458,22 @@ TextEditor.prototype = {
       }
       this.value.textContent = text;
     } else {
       let longstr = null;
       this.node.getNodeValue().then(ret => {
         longstr = ret;
         return longstr.string();
       }).then(str => {
-        longstr.release().then(null, console.error);
+        longstr.release().then(null, console.error.bind(console));
         if (this.selected) {
           this.value.textContent = str;
           this.markup.emit("text-expand")
         }
-      }).then(null, console.error);
+      }).then(null, console.error.bind(console));
     }
   },
 
   destroy: function() {},
 
   /**
    * Stub method for consistency with ElementEditor.
    */
diff --git a/devtools/client/markupview/test/head.js b/devtools/client/markupview/test/head.js
--- a/devtools/client/markupview/test/head.js
+++ b/devtools/client/markupview/test/head.js
@@ -121,17 +121,17 @@ function reloadPage(inspector) {
 function openToolbox(toolId) {
   info("Opening the inspector panel");
   let deferred = promise.defer();
 
   let target = TargetFactory.forTab(gBrowser.selectedTab);
   gDevTools.showToolbox(target, toolId).then(function(toolbox) {
     info("The toolbox is open");
     deferred.resolve({toolbox: toolbox});
-  }).then(null, console.error);
+  }).then(null, console.error.bind(console));
 
   return deferred.promise;
 }
 
 /**
  * Open the toolbox, with the inspector tool visible.
  * @return a promise that resolves when the inspector is ready
  */
diff --git a/devtools/client/projecteditor/lib/editors.js b/devtools/client/projecteditor/lib/editors.js
--- a/devtools/client/projecteditor/lib/editors.js
+++ b/devtools/client/projecteditor/lib/editors.js
@@ -215,17 +215,17 @@ var TextEditor = Class({
       if (!this.editor) {
         return;
       }
       this._savedResourceContents = resourceContents;
       this.editor.setText(resourceContents);
       this.editor.clearHistory();
       this.editor.setClean();
       this.emit("load");
-    }, console.error);
+    }, console.error.bind(console));
   },
 
   /**
    * Save the resource based on the current state of the editor
    *
    * @param Resource resource
    *        The single file / item to be saved
    * @returns Promise
diff --git a/devtools/client/projecteditor/lib/plugins/new/new.js b/devtools/client/projecteditor/lib/plugins/new/new.js
--- a/devtools/client/projecteditor/lib/plugins/new/new.js
+++ b/devtools/client/projecteditor/lib/plugins/new/new.js
@@ -56,17 +56,17 @@ var NewFile = Class({
           template = matches[1] + "{1}" + matches[3] + matches[4];
           name = this.suggestName(parent, template, parseInt(matches[2]) || 2);
         }
 
         return parent.createChild(name);
       }).then(resource => {
         tree.selectResource(resource);
         this.host.currentEditor.focus();
-      }).then(null, console.error);
+      }).then(null, console.error.bind(console));
     }
   },
 
   suggestName: function(parent, template, start=1) {
     let i = start;
     let name;
     do {
       name = template.replace("\{1\}", i === 1 ? "" : i);
diff --git a/devtools/client/projecteditor/lib/plugins/rename/rename.js b/devtools/client/projecteditor/lib/plugins/rename/rename.js
--- a/devtools/client/projecteditor/lib/plugins/rename/rename.js
+++ b/devtools/client/projecteditor/lib/plugins/rename/rename.js
@@ -48,17 +48,17 @@ var RenamePlugin = Class({
         }
         return parent.rename(oldName,name);
       }).then(resource => {
         this.host.project.refresh();
         tree.selectResource(resource);
         if (!resource.isDir) {
           this.host.currentEditor.focus();
         }
-      }).then(null, console.error);
+      }).then(null, console.error.bind(console));
     }
   },
 
   suggestName: function(resource, template, start=1) {
     let i = start;
     let name;
     let parent = resource.parent;
     do {
diff --git a/devtools/client/projecteditor/lib/plugins/save/save.js b/devtools/client/projecteditor/lib/plugins/save/save.js
--- a/devtools/client/projecteditor/lib/plugins/save/save.js
+++ b/devtools/client/projecteditor/lib/plugins/save/save.js
@@ -63,17 +63,17 @@ var SavePlugin = Class({
       defaultName: project ? project.basename : null,
     }).then(path => {
       return this.createResource(path);
     }).then(res => {
       resource = res;
       return this.saveResource(editor, resource);
     }).then(() => {
       this.host.openResource(resource);
-    }).then(null, console.error);
+    }).then(null, console.error.bind(console));
   },
 
   onEditorSaveRequested: function() {
     let editor = this.host.currentEditor;
     let resource = this.host.resourceFor(editor);
     if (!resource) {
       return this.saveAs();
     }
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_autocomplete.js b/devtools/client/scratchpad/test/browser_scratchpad_autocomplete.js
--- a/devtools/client/scratchpad/test/browser_scratchpad_autocomplete.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_autocomplete.js
@@ -7,17 +7,17 @@
 const source = "0x1.";
 const completions = ["toExponential", "toFixed", "toString"];
 Cu.import("resource://gre/modules/Task.jsm");
 
 function test() {
   const options = { tabContent: "test scratchpad autocomplete" };
   openTabAndScratchpad(options)
     .then(Task.async(runTests))
-    .then(finish, console.error);
+    .then(finish, console.error.bind(console));
 }
 
 
 function* runTests([win, sp]) {
   const {editor} = sp;
   const editorWin = editor.container.contentWindow;
 
   // Show the completions popup.
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_close_toolbox.js b/devtools/client/scratchpad/test/browser_scratchpad_close_toolbox.js
--- a/devtools/client/scratchpad/test/browser_scratchpad_close_toolbox.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_close_toolbox.js
@@ -8,17 +8,17 @@ var {Task} = Cu.import("resource://gre/m
 var {TargetFactory} = require("devtools/client/framework/target");
 
 function test() {
   const options = {
     tabContent: "test closing toolbox and then reusing scratchpad"
   };
   openTabAndScratchpad(options)
     .then(Task.async(runTests))
-    .then(finish, console.error);
+    .then(finish, console.error.bind(console));
 }
 
 function* runTests([win, sp]) {
   // Use the scratchpad before opening the toolbox.
   const source = "window.foobar = 7;";
   sp.setText(source);
   let [,,result] = yield sp.display();
   is(result, 7, "Display produced the expected output.");
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_disable_view_menu_items.js b/devtools/client/scratchpad/test/browser_scratchpad_disable_view_menu_items.js
--- a/devtools/client/scratchpad/test/browser_scratchpad_disable_view_menu_items.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_disable_view_menu_items.js
@@ -7,17 +7,17 @@
 var {Task} = Cu.import("resource://gre/modules/Task.jsm", {});
 
 function test() {
   const options = {
     tabContent: 'test if view menu items "Larger Font" and "Smaller Font" are enabled/disabled.'
   };
   openTabAndScratchpad(options)
     .then(Task.async(runTests))
-    .then(finish, console.error);
+    .then(finish, console.error.bind(console));
 }
 
 function* runTests([win, sp]) {
   yield testMaximumFontSize(win, sp);
 
   yield testMinimumFontSize(win, sp);
 }
 
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_inspect_primitives.js b/devtools/client/scratchpad/test/browser_scratchpad_inspect_primitives.js
--- a/devtools/client/scratchpad/test/browser_scratchpad_inspect_primitives.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_inspect_primitives.js
@@ -7,17 +7,17 @@
 var {Task} = Cu.import("resource://gre/modules/Task.jsm", {});
 
 function test() {
   const options = {
     tabContent: "test inspecting primitive values"
   };
   openTabAndScratchpad(options)
     .then(Task.async(runTests))
-    .then(finish, console.error);
+    .then(finish, console.error.bind(console));
 }
 
 function* runTests([win, sp]) {
   // Inspect a number.
   yield checkResults(sp, 7);
 
   // Inspect a string.
   yield checkResults(sp, "foobar", true);
diff --git a/devtools/client/shared/DeveloperToolbar.jsm b/devtools/client/shared/DeveloperToolbar.jsm
--- a/devtools/client/shared/DeveloperToolbar.jsm
+++ b/devtools/client/shared/DeveloperToolbar.jsm
@@ -161,17 +161,17 @@ var CommandUtils = {
 
               // isChecked would normally be synchronous. An annoying quirk
               // of the 'csscoverage toggle' command forces us to accept a
               // promise here, but doing Promise.resolve(reply).then(...) here
               // makes this async for everyone, which breaks some tests so we
               // treat non-promise replies separately to keep then synchronous.
               let reply = command.state.isChecked(target);
               if (typeof reply.then == "function") {
-                reply.then(updateChecked, console.error);
+                reply.then(updateChecked, console.error.bind(console));
               }
               else {
                 updateChecked(reply);
               }
             }
           };
 
           command.state.onChange(target, onChange);
@@ -1006,17 +1006,17 @@ OutputPanel.prototype._outputChanged = f
 
   this.displayedOutput = ev.output;
 
   if (this.displayedOutput.completed) {
     this._update();
   }
   else {
     this.displayedOutput.promise.then(this._update, this._update)
-                                .then(null, console.error);
+                                .then(null, console.error.bind(console));
   }
 };
 
 /**
  * Called when displayed Output says it's changed or from outputChanged, which
  * happens when there is a new displayed Output.
  */
 OutputPanel.prototype._update = function() {
diff --git a/devtools/client/storage/ui.js b/devtools/client/storage/ui.js
--- a/devtools/client/storage/ui.js
+++ b/devtools/client/storage/ui.js
@@ -74,17 +74,17 @@ var StorageUI = this.StorageUI = functio
 
   this.sidebar = this._panelDoc.getElementById("storage-sidebar");
   this.sidebar.setAttribute("width", "300");
   this.view = new VariablesView(this.sidebar.firstChild,
                                 GENERIC_VARIABLES_VIEW_SETTINGS);
 
   this.front.listStores().then(storageTypes => {
     this.populateStorageTree(storageTypes);
-  }).then(null, console.error);
+  }).then(null, console.error.bind(console));
 
   this.onUpdate = this.onUpdate.bind(this);
   this.front.on("stores-update", this.onUpdate);
   this.onCleared = this.onCleared.bind(this);
   this.front.on("stores-cleared", this.onCleared);
 
   this.handleKeypress = this.handleKeypress.bind(this);
   this._panelDoc.addEventListener("keypress", this.handleKeypress);
diff --git a/devtools/client/styleinspector/computed-view.js b/devtools/client/styleinspector/computed-view.js
--- a/devtools/client/styleinspector/computed-view.js
+++ b/devtools/client/styleinspector/computed-view.js
@@ -1067,17 +1067,17 @@ PropertyView.prototype = {
           }
 
           this._matchedSelectorResponse = matched;
 
           return this._buildMatchedSelectors().then(() => {
             this.matchedExpander.setAttribute("open", "");
             this.tree.inspector.emit("computed-view-property-expanded");
           });
-        }).then(null, console.error);
+        }).then(null, console.error.bind(console));
     }
 
     this.matchedSelectorsContainer.innerHTML = "";
     this.matchedExpander.removeAttribute("open");
     this.tree.inspector.emit("computed-view-property-collapsed");
     return promise.resolve(undefined);
   },
 
diff --git a/devtools/client/styleinspector/rule-view.js b/devtools/client/styleinspector/rule-view.js
--- a/devtools/client/styleinspector/rule-view.js
+++ b/devtools/client/styleinspector/rule-view.js
@@ -188,17 +188,17 @@ ElementStyle.prototype = {
         rule.editor.destroy();
       }
     }
 
     this.dummyElement = null;
     this.dummyElementPromise.then(dummyElement => {
       dummyElement.remove();
       this.dummyElementPromise = null;
-    }, console.error);
+    }, console.error.bind(console));
   },
 
   /**
    * Called by the Rule object when it has been changed through the
    * setProperty* methods.
    */
   _changed: function() {
     if (this.onChanged) {
@@ -2829,17 +2829,17 @@ RuleEditor.prototype = {
     }
 
     let showOrig = Services.prefs.getBoolPref(PREF_ORIG_SOURCES);
     if (showOrig && !this.rule.isSystem &&
         this.rule.domRule.type !== ELEMENT_STYLE) {
       this.rule.getOriginalSourceStrings().then((strings) => {
         sourceLabel.setAttribute("value", strings.short);
         sourceLabel.setAttribute("tooltiptext", strings.full);
-      }, console.error);
+      }, console.error.bind(console));
     }
   },
 
   /**
    * Update the rule editor with the contents of the rule.
    */
   populate: function() {
     // Clear out existing viewers.
diff --git a/devtools/client/webconsole/test/browser_webconsole_split.js b/devtools/client/webconsole/test/browser_webconsole_split.js
--- a/devtools/client/webconsole/test/browser_webconsole_split.js
+++ b/devtools/client/webconsole/test/browser_webconsole_split.js
@@ -157,17 +157,17 @@ function test() {
   }
 
   function openPanel(toolId) {
     let deferred = promise.defer();
     let target = TargetFactory.forTab(gBrowser.selectedTab);
     gDevTools.showToolbox(target, toolId).then(function(box) {
       toolbox = box;
       deferred.resolve();
-    }).then(null, console.error);
+    }).then(null, console.error.bind(console));
     return deferred.promise;
   }
 
   function openAndCheckPanel(toolId) {
     let deferred = promise.defer();
     openPanel(toolId).then(() => {
       info("Checking toolbox for " + toolId);
       checkToolboxUI(toolbox.getCurrentPanel());
diff --git a/devtools/client/webconsole/webconsole.js b/devtools/client/webconsole/webconsole.js
--- a/devtools/client/webconsole/webconsole.js
+++ b/devtools/client/webconsole/webconsole.js
@@ -3034,17 +3034,17 @@ JSTerm.prototype = {
         // Holds the number of entries in history. This value is incremented in
         // this.execute().
         this.historyIndex = this.history.length;
 
         // Holds the index of the history entry that the user is currently viewing.
         // This is reset to this.history.length when this.execute() is invoked.
         this.historyPlaceHolder = this.history.length;
       }
-    }, console.error);
+    }, console.error.bind(console));
   },
 
   /**
    * Clear the console history altogether.  Note that this will not affect
    * other consoles that are already opened (since they have their own copy),
    * but it will reset the array for all newly-opened consoles.
    * @returns Promise
    *          Resolves once the changes have been persisted.
diff --git a/devtools/client/webide/content/webide.js b/devtools/client/webide/content/webide.js
--- a/devtools/client/webide/content/webide.js
+++ b/devtools/client/webide/content/webide.js
@@ -93,22 +93,22 @@ var UI = {
 
     // Auto install the ADB Addon Helper and Tools Adapters. Only once.
     // If the user decides to uninstall any of this addon, we won't install it again.
     let autoinstallADBHelper = Services.prefs.getBoolPref("devtools.webide.autoinstallADBHelper");
     let autoinstallFxdtAdapters = Services.prefs.getBoolPref("devtools.webide.autoinstallFxdtAdapters");
     if (autoinstallADBHelper) {
       GetAvailableAddons().then(addons => {
         addons.adb.install();
-      }, console.error);
+      }, console.error.bind(console));
     }
     if (autoinstallFxdtAdapters) {
       GetAvailableAddons().then(addons => {
         addons.adapters.install();
-      }, console.error);
+      }, console.error.bind(console));
     }
     Services.prefs.setBoolPref("devtools.webide.autoinstallADBHelper", false);
     Services.prefs.setBoolPref("devtools.webide.autoinstallFxdtAdapters", false);
 
     if (Services.prefs.getBoolPref("devtools.webide.widget.autoinstall") &&
         !Services.prefs.getBoolPref("devtools.webide.widget.enabled")) {
       Services.prefs.setBoolPref("devtools.webide.widget.enabled", true);
       gDevToolsBrowser.moveWebIDEWidgetInNavbar();
@@ -671,18 +671,18 @@ var UI = {
       status = "error";
     }
     this.getProjectEditor().then((projecteditor) => {
       projecteditor.setProjectToAppPath(project.location, {
         name: project.name,
         iconUrl: project.icon,
         projectOverviewURL: "chrome://webide/content/details.xhtml",
         validationStatus: status
-      }).then(null, console.error);
-    }, console.error);
+      }).then(null, console.error.bind(console));
+    }, console.error.bind(console));
   },
 
   isProjectEditorEnabled: function() {
     return Services.prefs.getBoolPref("devtools.webide.showProjectEditor");
   },
 
   openProject: function() {
     let project = AppManager.selectedProject;
@@ -709,17 +709,17 @@ var UI = {
       this.selectDeckPanel("details");
       return;
     }
 
     // Show ProjectEditor
 
     this.getProjectEditor().then(() => {
       this.updateProjectEditorHeader();
-    }, console.error);
+    }, console.error.bind(console));
 
     this.selectDeckPanel("projecteditor");
   },
 
   autoStartProject: Task.async(function*() {
     let project = AppManager.selectedProject;
 
     if (!project) {
@@ -981,17 +981,17 @@ var UI = {
 
     let promise = this.toolboxPromise = AppManager.getTarget().then(target => {
       return this._showToolbox(target, iframe);
     }).then(toolbox => {
       // Destroy the toolbox on WebIDE side before
       // toolbox.destroy's promise resolves.
       toolbox.once("destroyed", this._onToolboxClosed.bind(this, promise, iframe));
       return toolbox;
-    }, console.error);
+    }, console.error.bind(console));
 
     return this.busyUntil(this.toolboxPromise, "opening toolbox");
   },
 
   _showToolbox: function(target, iframe) {
     let splitter = document.querySelector(".devtools-horizontal-splitter");
     splitter.removeAttribute("hidden");
 
@@ -1037,17 +1037,17 @@ var Cmds = {
     });
     return UI.busyUntil(disconnecting, "disconnecting from runtime");
   },
 
   takeScreenshot: function() {
     let url = AppManager.deviceFront.screenshotToDataURL();
     return UI.busyUntil(url.then(longstr => {
       return longstr.string().then(dataURL => {
-        longstr.release().then(null, console.error);
+        longstr.release().then(null, console.error.bind(console));
         UI.openInBrowser(dataURL);
       });
     }), "taking screenshot");
   },
 
   showPermissionsTable: function() {
     UI.selectDeckPanel("permissionstable");
   },
diff --git a/devtools/shared/gcli/Templater.jsm b/devtools/shared/gcli/Templater.jsm
--- a/devtools/shared/gcli/Templater.jsm
+++ b/devtools/shared/gcli/Templater.jsm
@@ -177,17 +177,17 @@ function processNode(state, node, data) 
             if (value.indexOf('${') === 0 &&
                 value.charAt(value.length - 1) === '}') {
               replacement = envEval(state, value.slice(2, -1), data, value);
               if (replacement && typeof replacement.then === 'function') {
                 node.setAttribute(name, '');
                 /* jshint loopfunc:true */
                 replacement.then(function(newValue) {
                   node.setAttribute(name, newValue);
-                }).then(null, console.error);
+                }).then(null, console.error.bind(console));
               }
               else {
                 if (state.options.blankNullUndefined && replacement == null) {
                   replacement = '';
                 }
                 node.setAttribute(name, replacement);
               }
             }
diff --git a/devtools/shared/gcli/source/lib/gcli/ui/menu.js b/devtools/shared/gcli/source/lib/gcli/ui/menu.js
--- a/devtools/shared/gcli/source/lib/gcli/ui/menu.js
+++ b/devtools/shared/gcli/source/lib/gcli/ui/menu.js
@@ -55,29 +55,29 @@ function Menu(options) {
   if (menuCssPromise == null) {
     menuCssPromise = host.staticRequire(module, './menu.css');
   }
   menuCssPromise.then(function(menuCss) {
     // Pull the HTML into the DOM, but don't add it to the document
     if (menuCss != null) {
       util.importCss(menuCss, this.document, 'gcli-menu');
     }
-  }.bind(this), console.error);
+  }.bind(this), console.error.bind(console));
 
   this.templateOptions = { blankNullUndefined: true, stack: 'menu.html' };
   if (menuHtmlPromise == null) {
     menuHtmlPromise = host.staticRequire(module, './menu.html');
   }
   menuHtmlPromise.then(function(menuHtml) {
     if (this.document == null) {
       return; // destroy() has been called
     }
 
     this.template = host.toDom(this.document, menuHtml);
-  }.bind(this), console.error);
+  }.bind(this), console.error.bind(console));
 
   // Contains the items that should be displayed
   this.items = [];
 
   this.onItemClick = util.createEvent('Menu.onItemClick');
 }
 
 /**
