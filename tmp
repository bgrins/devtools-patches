# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  6a9e31d4ae7e6c5b021a9c7822582c95be4b6b54

diff --git a/toolkit/content/customElements.js b/toolkit/content/customElements.js
--- a/toolkit/content/customElements.js
+++ b/toolkit/content/customElements.js
@@ -11,29 +11,84 @@
 {
 
 ChromeUtils.import("resource://gre/modules/Services.jsm");
 ChromeUtils.import("resource://gre/modules/AppConstants.jsm");
 
 const gXULDOMParser = new DOMParser();
 gXULDOMParser.forceEnableXULXBL();
 
+let gDOMReady = false;
+// Only lazily add this for perf:
+
+document.addEventListener("readystatechange", () => {
+  console.log(event.originalTarget.documentURI, event.originalTarget.readyState);
+});
+function addDOMReadyListener() {
+  document.addEventListener("DOMContentLoaded", function outer(event) {
+    if (event.originalTarget == document) {
+      console.log(event.originalTarget.documentURI, event.originalTarget.readyState, "DOMCONTENTLOADED");
+      document.removeEventListener("DOMContentLoaded", outer);
+      gDOMReady = true;
+
+      // let d = Date.now();
+      // for (let el of MozXULElement.pendingConnections) {
+      //   if (el.isConnected && el.connect) {
+      //     el.connect(true);
+      //   }
+      // }
+      // console.log(`Took ${Date.now() - d}ms to connect ${MozXULElement.pendingConnections.size} elements in ${document.documentURI}`, [...MozXULElement.pendingConnections]);
+      // MozXULElement.pendingConnections.clear();
+    }
+  }, { capture: true });
+}
+
 let gSomethingConnected = false;
+let gPendingConnections = new Set();
+
 class MozXULElement extends XULElement {
   constructor() {
     super();
+
     if (!gSomethingConnected && this.connected) {
       gSomethingConnected = true;
-      document.addEventListener("DOMContentLoaded", function outer(event) {
-        if (event.originalTarget == document) {
-          document.removeEventListener("DOMContentLoaded", outer);
-        }
-      }, { capture: true });
+      addDOMReadyListener();
     }
   }
+
+
+/*
+ * Elements should generally prefer to implement `connect` and let the
+ * base class handle the connectedCallback. This prevents an initial
+ * connectedCallback running synchronously during parse, when child Custom
+ * Elements aren't yet in the DOM.
+ */
+// connectedCallback() {
+//   let firstConnection = !!this._connectedOnce;
+//   this._connectedOnce = true;
+
+//   if (this.connect) {
+//     if (!MozXULElement.isDOMReady) {
+//       MozXULElement.pendingConnections.add(this);
+//     } else {
+//       this.connect(firstConnection);
+//     }
+//   }
+// }
+
+// disconnectedCallback() {
+//   if (MozXULElement.pendingConnections.has(this)) {
+//     MozXULElement.pendingConnections.delete(this);
+//   } else if (this.disconnect) {
+//     this.disconnect();
+//   }
+// }
+
+
+
   /**
    * Allows eager deterministic construction of XUL elements with XBL attached, by
    * parsing an element tree and returning a DOM fragment to be inserted in the
    * document before any of the inner elements is referenced by JavaScript.
    *
    * This process is required instead of calling the createElement method directly
    * because bindings get attached when:
    *
