# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  0a9484a091f5c7891be36a7d6e32e1a6f819cf2e
Testing layouthelpers stuf

diff --git a/browser/devtools/shared/widgets/Graphs.jsm b/browser/devtools/shared/widgets/Graphs.jsm
--- a/browser/devtools/shared/widgets/Graphs.jsm
+++ b/browser/devtools/shared/widgets/Graphs.jsm
@@ -5,16 +5,17 @@
 
 const Cu = Components.utils;
 
 Cu.import("resource:///modules/devtools/ViewHelpers.jsm");
 const promise = Cu.import("resource://gre/modules/Promise.jsm", {}).Promise;
 const {Task} = Cu.import("resource://gre/modules/Task.jsm", {});
 const {EventEmitter} = Cu.import("resource://gre/modules/devtools/event-emitter.js", {});
 const {DevToolsWorker} = Cu.import("resource://gre/modules/devtools/shared/worker.js", {});
+const {LayoutHelpers} = Cu.import("resource://gre/modules/devtools/LayoutHelpers.jsm", {});
 
 this.EXPORTED_SYMBOLS = [
   "GraphCursor",
   "GraphArea",
   "GraphAreaDragger",
   "GraphAreaResizer",
   "AbstractCanvasGraph",
   "LineGraphWidget",
@@ -958,27 +959,36 @@ AbstractCanvasGraph.prototype = {
     // object.  If so, just return this.
     if ("testX" in e && "testY" in e) {
       return {
         mouseX: e.testX * this._pixelRatio,
         mouseY: e.testY * this._pixelRatio
       };
     }
 
+    let helper = new LayoutHelpers(this._topWindow);
+    let quad1 = helper.getAdjustedQuads(this._canvas, "margin", this._topWindow.document)[0];
+    const {console} = Components.utils.import("resource://gre/modules/devtools/Console.jsm", {});
+    // console.log(quad);
+
     let quad = this._canvas.getBoxQuads({
       relativeTo: this._topWindow.document
     })[0];
 
-    let x = (e.screenX - this._topWindow.screenX) - quad.p1.x;
-    let y = (e.screenY - this._topWindow.screenY) - quad.p1.y;
+    let [xOffset,yOffset] = helper.getFrameOffsets(this._canvas);
+    console.log(xOffset, yOffset, (e.screenX - this._topWindow.screenX));
+
+    let x = ((e.screenX - this._topWindow.screenX) - xOffset) / LayoutHelpers.getCurrentZoom(this._canvas);
+    let y = (e.screenY - this._topWindow.screenY) - yOffset;
 
     // Don't allow the event coordinates to be bigger than the canvas
     // or less than 0.
     let maxX = quad.p2.x - quad.p1.x;
     let maxY = quad.p3.y - quad.p1.y;
+    console.log("MaxX", maxX, LayoutHelpers.getCurrentZoom(this._canvas));
     let mouseX = Math.max(0, Math.min(x, maxX)) * this._pixelRatio;
     let mouseY = Math.max(0, Math.min(x, maxY)) * this._pixelRatio;
 
     return {mouseX,mouseY};
   },
 
   /**
    * Listener for the "mousemove" event on the graph's container.
diff --git a/toolkit/devtools/LayoutHelpers.jsm b/toolkit/devtools/LayoutHelpers.jsm
--- a/toolkit/devtools/LayoutHelpers.jsm
+++ b/toolkit/devtools/LayoutHelpers.jsm
@@ -30,24 +30,28 @@ LayoutHelpers.prototype = {
    * @param {DOMNode} node The node for which we are to get the box model region
    * quads.
    * @param {String} region The box model region to return: "content",
    * "padding", "border" or "margin".
    * @return {Array} An array of objects that have the same structure as quads
    * returned by getBoxQuads. An empty array if the node has no quads or is
    * invalid.
    */
-  getAdjustedQuads: function(node, region) {
+  getAdjustedQuads: function(node, region, relativeTo) {
     if (!node || !node.getBoxQuads) {
       return [];
     }
 
-    let quads = node.getBoxQuads({
+    let opts = {
       box: region
-    });
+    };
+    if (relativeTo) {
+      opts.relativeTo = relativeTo;
+    }
+    let quads = node.getBoxQuads(opts);
 
     if (!quads.length) {
       return [];
     }
 
     let [xOffset, yOffset] = this.getFrameOffsets(node);
     let scale = LayoutHelpers.getCurrentZoom(node);
 
