# HG changeset patch
# Parent f270ea857a7a4db5262a0533a3223090dcaa2382
# User Brian Grinstead <bgrinstead@mozilla.com>
Eyedropper perf

diff --git a/browser/devtools/eyedropper/eyedropper.js b/browser/devtools/eyedropper/eyedropper.js
--- a/browser/devtools/eyedropper/eyedropper.js
+++ b/browser/devtools/eyedropper/eyedropper.js
@@ -186,17 +186,17 @@ Eyedropper.prototype = {
   },
 
   /**
    * Called on the first mouse move over the window. Opens the eyedropper
    * panel where the mouse is.
    */
   _onFirstMouseMove: function(event) {
     this._chromeDocument.removeEventListener("mousemove", this._onFirstMouseMove);
-
+console.log("ON FIRST MOUSEMOVE");
     this._panel = this._buildPanel();
 
     let popupSet = this._chromeDocument.querySelector("#mainPopupSet");
     popupSet.appendChild(this._panel);
 
     let { panelX, panelY } = this._getPanelCoordinates(event);
     this._panel.openPopupAtScreen(panelX, panelY);
 
@@ -268,16 +268,18 @@ Eyedropper.prototype = {
     return panel;
   },
 
   /**
    * Event handler for the panel's iframe's load event. Emits
    * a "load" event from this eyedropper object.
    */
   _onFrameLoaded: function() {
+
+    console.log("IFRAME LOASED");
     this._iframe.removeEventListener("load", this._onFrameLoaded, true);
 
     this._iframeDocument = this._iframe.contentDocument;
     this._colorPreview = this._iframeDocument.querySelector("#color-preview");
     this._colorValue = this._iframeDocument.querySelector("#color-value");
 
     // value box will be too long for hex values and too short for hsl
     let valueBox = this._iframeDocument.querySelector("#color-value-box");
@@ -371,30 +373,40 @@ Eyedropper.prototype = {
   /**
    * Event handler for a mouse move over the page we're inspecting.
    * Preview the area under the cursor, and move panel to be under the cursor.
    *
    * @param  {DOMEvent} event
    *         MouseEvent for the mouse moving
    */
   _onMouseMove: function(event) {
+
     if (!this._dragging || !this._panel || !this._canvas) {
       return;
     }
 
     if (this._OS == "Linux" && ++this._mouseMoveCounter % 2 == 0) {
       // skip every other mousemove to preserve performance.
       return;
     }
 
+    let time = new Date();
     this._setCoordinates(event);
+    // console.log("move1: " + (new Date() - time));
+    let time = new Date();
     this._drawWindow();
+    // console.log("move2: " + (new Date() - time));
+    let time = new Date();
+    let { panelX, panelY } = this._getPanelCoordinates(event);
+    // console.log("move3: " + (new Date() - time));
+    let time = new Date();
 
-    let { panelX, panelY } = this._getPanelCoordinates(event);
     this._movePanel(panelX, panelY);
+    // console.log("move4: " + (new Date() - time));
+    let time = new Date();
   },
 
   /**
    * Get coordinates of where the eyedropper panel should go based on
    * the current coordinates of the mouse cursor.
    *
    * @param {MouseEvent} event
    *        object with properties 'screenX' and 'screenY'
@@ -402,22 +414,26 @@ Eyedropper.prototype = {
    * @return {object}
   *          object with properties 'panelX', 'panelY'
    */
   _getPanelCoordinates: function({screenX, screenY}) {
     let win = this._chromeWindow;
     let offset = CANVAS_WIDTH / 2 + CANVAS_OFFSET;
 
     let panelX = screenX - offset;
-    let windowX = win.screenX + (win.outerWidth - win.innerWidth);
-    let maxX = win.screenX + win.outerWidth - offset - 1;
+    let winScreenX = win.screenX;
+    let winScreenY = win.screenY;
+    let winOuterWidth = win.outerWidth;
+    let winOuterHeight = win.outerHeight;
+    let windowX = winScreenX + (winOuterWidth - win.innerWidth);
+    let maxX = winScreenX + winOuterWidth - offset - 1;
 
     let panelY = screenY - offset;
-    let windowY = win.screenY + (win.outerHeight - win.innerHeight);
-    let maxY = win.screenY + win.outerHeight - offset - 1;
+    let windowY = winScreenY + (winOuterHeight - win.innerHeight);
+    let maxY = winScreenY + winOuterHeight - offset - 1;
 
     // don't let the panel move outside the browser window
     panelX = Math.max(windowX - offset, Math.min(panelX, maxX));
     panelY = Math.max(windowY - offset, Math.min(panelY, maxY));
 
     return { panelX: panelX, panelY: panelY };
   },
 
@@ -692,16 +708,41 @@ function toColorString(rgb, format) {
         str = hexString(rgb);
       }
       return str;
     default:
       return hexString(rgb);
   }
 }
 
+
+function setTimeout() {
+  let window = Services.appShell.hiddenDOMWindow;
+  return window.setTimeout.apply(window, arguments);
+}
+
+function clearTimeout() {
+  let window = Services.appShell.hiddenDOMWindow;
+  return window.clearTimeout.apply(window, arguments);
+}
+
+function throttle(func, wait, scope) {
+  var timer = null;
+  return function() {
+    if(timer) {
+      clearTimeout(timer);
+    }
+    var args = arguments;
+    timer = setTimeout(function() {
+      timer = null;
+      func.apply(scope, args);
+    }, wait);
+  };
+}
+
 /**
  * Produce a hex-formatted color string from rgb values.
  *
  * @param {array} rgb
  *        Rgb values of color to stringify
  *
  * @return {string}
  *        Hex formatted string for color, e.g. "#FFEE00"
