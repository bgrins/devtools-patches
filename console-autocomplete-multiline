# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  8c36f375d03b0fcd7a8b3f4c1d92a6b4e4f26e0e
Bug 1217198 - Failing test case for `foo bar`.

diff --git a/devtools/shared/webconsole/test/unit/test_js_property_provider.js b/devtools/shared/webconsole/test/unit/test_js_property_provider.js
--- a/devtools/shared/webconsole/test/unit/test_js_property_provider.js
+++ b/devtools/shared/webconsole/test/unit/test_js_property_provider.js
@@ -51,16 +51,18 @@ function run_test() {
 
   do_print("Test that suggestions are given for literal strings.");
   results = JSPropertyProvider(dbgObject, null, "'foo'.");
   test_has_result(results, "charAt");
   results = JSPropertyProvider(dbgObject, null, '"foo".');
   test_has_result(results, "charAt");
   results = JSPropertyProvider(dbgObject, null, "`foo`.");
   test_has_result(results, "charAt");
+  results = JSPropertyProvider(dbgObject, null, "`foo bar`.");
+  test_has_result(results, "charAt");
   results = JSPropertyProvider(dbgObject, null, "'[1,2,3]'.");
   test_has_result(results, "charAt");
 
   do_print("Test that suggestions are not given for syntax errors.");
   results = JSPropertyProvider(dbgObject, null, "'foo\"");
   do_check_null(results);
   results = JSPropertyProvider(dbgObject, null, "[1,',2]");
   do_check_null(results);
diff --git a/devtools/shared/webconsole/utils.js b/devtools/shared/webconsole/utils.js
--- a/devtools/shared/webconsole/utils.js
+++ b/devtools/shared/webconsole/utils.js
@@ -724,16 +724,28 @@ const OPEN_CLOSE_BODY = {
  *
  *            {
  *              state: STATE_NORMAL|STATE_QUOTE|STATE_DQUOTE,
  *              startPos: index of where the last statement begins
  *            }
  */
 function findCompletionBeginning(aStr)
 {
+  // const acorn = require("acorn/acorn");
+  // console.log(aStr, acorn);
+  // // Cu.import("resource://gre/modules/reflect.jsm");
+  // // const reflectAST = Reflect.parse(aStr);
+  // const acornAST = acorn.tokenize(aStr);
+
+  // // console.log(reflectAST, acornAST);
+  // // console.log("Reflect AST:");
+  // // console.log(JSON.stringify(reflectAST, null, 2));
+  // console.log("acorn AST:");
+  // console.log(JSON.stringify(acornAST, null, 2));
+
   let bodyStack = [];
 
   let state = STATE_NORMAL;
   let start = 0;
   let c;
   for (let i = 0; i < aStr.length; i++) {
     c = aStr[i];
 
@@ -868,21 +880,21 @@ function JSPropertyProvider(aDbgObject, 
   if (completionPart.trim() == "") {
     return null;
   }
 
   // Catch literals like [1,2,3] or "foo" and return the matches from
   // their prototypes.
   if (lastDot > 0) {
     let parser = new Parser();
-    parser.logExceptions = false;
+    // parser.logExceptions = false;
     let syntaxTree = parser.get(completionPart.slice(0, lastDot));
     let lastTree = syntaxTree.getLastSyntaxTree();
     let lastBody = lastTree && lastTree.AST.body[lastTree.AST.body.length - 1];
-
+    console.log("HERE", lastBody, lastTree, completionPart.slice(0, lastDot));
     // Finding the last expression since we've sliced up until the dot.
     // If there were parse errors this won't exist.
     if (lastBody) {
       let expression = lastBody.expression;
       let matchProp = completionPart.slice(lastDot + 1);
       if (expression.type === "ArrayExpression") {
         return getMatchedProps(Array.prototype, matchProp);
       } else if (expression.type === "Literal" &&
