# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  d0832115d79178586a1c8559835efe2635548175
debuggging for bug 1036324

diff --git a/toolkit/devtools/server/actors/inspector.js b/toolkit/devtools/server/actors/inspector.js
--- a/toolkit/devtools/server/actors/inspector.js
+++ b/toolkit/devtools/server/actors/inspector.js
@@ -1391,30 +1391,61 @@ var WalkerActor = protocol.ActorClass({
    * @param NodeActor node
    *    The node whose parents are requested.
    * @param object options
    *    Named options, including:
    *    `sameDocument`: If true, parents will be restricted to the same
    *      document as the node.
    */
   parents: method(function(node, options={}) {
+    // XXX: This will be rebased as if (isNodeDead(node)) after Bug 1121528
+    if (!node.rawNode) {
+      return;
+    }
+
+    // This handles a Bug in a local connection using the Inspect Element
+    // context menu.
+    // let sameTypeRootTreeItem = null;
+    // if (options.sameDocshellType) {
+    //   let originalNodeDocshell = nodeDocshell(node && node.rawNode);
+    //   sameTypeRootTreeItem = originalNodeDocshell &&
+    //                          originalNodeDocshell.sameTypeRootTreeItem;
+    // }
+
+// console.log("HAs same tree?", sameTypeRootTreeItem);
+
     let walker = this.getDocumentWalker(node.rawNode);
     let parents = [];
     let cur;
     while((cur = walker.parentNode())) {
-      if (options.sameDocument && cur.ownerDocument != node.rawNode.ownerDocument) {
+      if (options.sameDocument && nodeDocument(cur) != nodeDocument(node.rawNode)) {
         break;
       }
+
+      if (options.sameDocshellType &&
+          nodeDocshell(cur).sameTypeRootTreeItem != nodeDocshell(node.rawNode).sameTypeRootTreeItem) {
+        console.log("SKIPPING DOSHELLC!!");
+        break;
+      }
+
+      // if (sameTypeRootTreeItem) {
+      //   let curSameTypeRootTreeItem = nodeDocshell(cur).sameTypeRootTreeItem;
+      //   if (sameTypeRootTreeItem != curSameTypeRootTreeItem) {
+      //   console.log("SKIPPING DOSHELLC!!");
+      //     break;
+      //   }
+      // }
       parents.push(this._ref(cur));
     }
     return parents;
   }, {
     request: {
       node: Arg(0, "domnode"),
-      sameDocument: Option(1)
+      sameDocument: Option(1),
+      sameDocshellType: Option(1),
     },
     response: {
       nodes: RetVal("array:domnode")
     },
   }),
 
   parentNode: function(node) {
     let walker = this.getDocumentWalker(node.rawNode);
@@ -3125,17 +3156,17 @@ var WalkerFront = exports.WalkerFront = 
       throw Error("Could not find client side for actor " + this.actorID);
     }
     let nodeActor = walkerActor._ref(rawNode);
 
     // Pass the node through a read/write pair to create the client side actor.
     let nodeType = types.getType("domnode");
     let returnNode = nodeType.read(nodeType.write(nodeActor, walkerActor), this);
     let top = returnNode;
-    let extras = walkerActor.parents(nodeActor);
+    let extras = walkerActor.parents(nodeActor, {sameDocshellType: true});
     for (let extraActor of extras) {
       top = nodeType.read(nodeType.write(extraActor, walkerActor), this);
     }
 
     if (top !== this.rootNode) {
       // Imported an already-orphaned node.
       this._orphaned.add(top);
       walkerActor._orphaned.add(this.conn._transport._serverConnection.getActor(top.actorID));
@@ -3415,16 +3446,26 @@ var InspectorFront = exports.InspectorFr
 
 // Exported for test purposes.
 exports._documentWalker = DocumentWalker;
 
 function nodeDocument(node) {
   return node.ownerDocument || (node.nodeType == Ci.nsIDOMNode.DOCUMENT_NODE ? node : null);
 }
 
+function nodeDocshell(node) {
+  let doc = node ? nodeDocument(node) : null;
+  let win = doc ? doc.defaultView : null;
+  if (win) {
+    return win.
+           QueryInterface(Ci.nsIInterfaceRequestor).
+           getInterface(Ci.nsIDocShell);
+  }
+}
+
 /**
  * Wrapper for inDeepTreeWalker.  Adds filtering to the traversal methods.
  * See inDeepTreeWalker for more information about the methods.
  *
  * @param {DOMNode} node
  * @param {Window} rootWin
  * @param {Int} whatToShow See Ci.nsIDOMNodeFilter / inIDeepTreeWalker for options.
  * @param {Function} filter A custom filter function Taking in a DOMNode
