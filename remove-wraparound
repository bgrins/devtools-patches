# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  010374bce60670cf1348150fe493d0193318d4f6
Bug 1417708 - Remove unused wraparound attribute from numberbox;r=enndeakin+6102

MozReview-Commit-ID: C6GqHtVF6lq

diff --git a/toolkit/content/tests/chrome/test_textbox_number.xul b/toolkit/content/tests/chrome/test_textbox_number.xul
--- a/toolkit/content/tests/chrome/test_textbox_number.xul
+++ b/toolkit/content/tests/chrome/test_textbox_number.xul
@@ -6,17 +6,17 @@
   -->
 <window title="Textbox type='number' test" width="500" height="600"
         xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
   <script type="application/javascript" src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>  
   <script type="application/javascript" src="chrome://mochikit/content/tests/SimpleTest/EventUtils.js"></script>  
 
 <hbox>
   <textbox id="n1" type="number" size="4"/>
-  <textbox id="n2" type="number" value="10" min="5" max="15" wraparound="true"/>
+  <textbox id="n2" type="number" value="10" min="5" max="15"/>
 </hbox>
 <hbox>
   <textbox id="n3" type="number" size="4" value="25" min="1" max="12" increment="3"/>
 </hbox>
 <hbox>
   <textbox id="n4" type="number" size="4" value="-2" min="-8" max="18"/>
   <textbox id="n5" type="number" value="-17" min="-10" max="-3"/>
 </hbox>
@@ -57,21 +57,19 @@ function doTests() {
   testValsMinMax(n5, "initial n5", -10, -10, -3);
   testValsMinMax(n6, "initial n6", 12, 12, 12);
   testValsMinMax(n7, "initial n7", 4.68, 2, 10.5); // value should be rounded
 
   ok(n1.spinButtons != null && n1.spinButtons.localName == "spinbuttons", "spinButtons set");
   isnot(n1.decimalSymbol, "", "n1.decimalSymbol is set to something");
   n1.decimalSymbol = ".";
   SimpleTest.is(n1.decimalSymbol, ".", "n1.decimalSymbol set to '.'");
-  SimpleTest.is(n1.wrapAround, false, "wrapAround defaults to false");
   SimpleTest.is(n1.increment, 1, "increment defaults to 1");
   SimpleTest.is(n1.decimalPlaces, 0, "decimalPlaces defaults to 0");
 
-  SimpleTest.is(n2.wrapAround, true, "wrapAround when set to true");
   SimpleTest.is(n3.increment, 3, "increment when set to 1");
   SimpleTest.is(n7.decimalPlaces, 2, "decimalPlaces when set to 2");
 
   // test changing the value
   n1.value = "1700";
   testVals(n1, "set value,", 1700);
   n1.value = 1600;
   testVals(n1, "set value int,", 1600);
@@ -137,30 +135,16 @@ function doTests() {
   testIncreaseDecrease(n3, "integer with increment", 3, 0, 1, 12);
 
   n7.min = 2.7;
   n7.value = 10.1;
   n7.increment = 4.3;
   SimpleTest.is(n7.increment, 4.3, "increment changed");
   testIncreaseDecrease(n7, "integer with increment", 4.3, 2, 2.7, 10.1);
 
-  n2.value = n2.min;
-  n2.decrease();
-  testVals(n2, "integer wraparound decrease method", n2.max);
-  n2.increase();
-  testVals(n2, "integer wraparound decrease method", n2.min);
-
-  n7.wrapAround = true;
-  SimpleTest.is(n7.wrapAround, true, "change wrapAround");
-  n7.value = n7.min + 0.01;
-  n7.decrease();
-  testVals(n7, "decimal wraparound decrease method", n7.max, n7.max.toFixed(2));
-  n7.increase();
-  testVals(n7, "decimal wraparound decrease method", n7.min, n7.min.toFixed(2));
-
   n1.value = 22;
   n1.decimalPlaces = 3;
   testVals(n1, "set decimalPlaces 3", 22, "22.000");
   n1.value = 10.624;
   testVals(n1, "set decimalPlaces 3 set value,", 10.624);
   n1.decimalPlaces = 0;
   testVals(n1, "set decimalPlaces 0 set value,", 11);
   n1.decimalPlaces = Infinity;
@@ -203,31 +187,16 @@ function doTests() {
   testVals(n1, "spinbuttons up at max", 15);
 
   n1.value = 5;
   synthesizeKey("VK_DOWN", {});
   testVals(n1, "key down at min", 5);
   synthesizeMouse(sb, 2, sbbottom, {});
   testVals(n1, "spinbuttons down at min", 5);
 
-  n1.wrapAround = true;
-  n1.value = 15;
-  synthesizeKey("VK_UP", {});
-  testVals(n1, "key up wraparound at max", 5);
-  n1.value = 5;
-  synthesizeKey("VK_DOWN", {});
-  testVals(n1, "key down wraparound at min", 15);
-
-  n1.value = 15;
-  synthesizeMouse(sb, 2, 2, {});
-  testVals(n1, "spinbuttons up wraparound at max", 5);
-  n1.value = 5;
-  synthesizeMouse(sb, 2, sbbottom, {});
-  testVals(n1, "spinbuttons down wraparound at min", 15);
-
   // check read only state
   n1.readOnly = true;
   n1.min = -10;
   n1.max = 15;
   n1.value = 12;
   // no events should fire and no changes should occur when the field is read only
   synthesizeKeyExpectEvent("VK_UP", { }, n1, "!change", "key up read only");
   is(n1.value, "12", "key up read only value");
diff --git a/toolkit/content/widgets/numberbox.xml b/toolkit/content/widgets/numberbox.xml
--- a/toolkit/content/widgets/numberbox.xml
+++ b/toolkit/content/widgets/numberbox.xml
@@ -54,34 +54,16 @@
           return this._value;
         </getter>
         <setter>
           this._validateValue(val, false);
           return val;
         </setter>
       </property>
 
-      <property name="wrapAround">
-        <getter>
-        <![CDATA[
-          return (this.getAttribute("wraparound") == "true")
-        ]]>
-        </getter>
-        <setter>
-        <![CDATA[
-          if (val)
-            this.setAttribute("wraparound", "true");
-          else
-            this.removeAttribute("wraparound");
-          this._enableDisableButtons();
-          return val;
-        ]]>
-        </setter>
-      </property>
-
       <property name="min">
         <getter>
           var min = this.getAttribute("min");
           return min ? Number(min) : 0;
         </getter>
         <setter>
         <![CDATA[
           if (typeof val == "number") {
@@ -180,19 +162,17 @@
           ]]>
         </body>
       </method>
 
       <method name="_enableDisableButtons">
         <body>
           <![CDATA[
             var buttons = this.spinButtons;
-            if (this.wrapAround) {
-              buttons.decreaseDisabled = buttons.increaseDisabled = false;
-            } else if (this.disabled || this.readOnly) {
+            if (this.disabled || this.readOnly) {
               buttons.decreaseDisabled = buttons.increaseDisabled = true;
             } else {
               buttons.decreaseDisabled = (this.valueNumber <= this.min);
               buttons.increaseDisabled = (this.valueNumber >= this.max);
             }
           ]]>
         </body>
       </method>
@@ -201,32 +181,29 @@
         <parameter name="aValue"/>
         <parameter name="aIsIncDec"/>
         <body>
           <![CDATA[
             aValue = Number(aValue) || 0;
 
             var min = this.min;
             var max = this.max;
-            var wrapAround = this.wrapAround &&
-                             min != -Infinity && max != Infinity;
             if (aValue < min)
-              aValue = (aIsIncDec && wrapAround ? max : min);
+              aValue = min;
             else if (aValue > max)
-              aValue = (aIsIncDec && wrapAround ? min : max);
+              aValue = max;
 
             var places = this.decimalPlaces;
             aValue = (places == Infinity) ? "" + aValue : aValue.toFixed(places);
 
             this._valueEntered = false;
             this._value = Number(aValue);
             this.inputField.value = aValue.replace(/\./, this.decimalSymbol);
 
-            if (!wrapAround)
-              this._enableDisableButtons();
+            this._enableDisableButtons();
 
             return aValue;
           ]]>
         </body>
       </method>
 
       <method name="_fireChange">
         <body>
