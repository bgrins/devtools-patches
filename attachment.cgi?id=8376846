# HG changeset patch
# Parent 83b58d9d3bbe9907d12330ccb2727792e16e1451
# User Vikneshwar <lviknesh1993@gmail.com>
Bug 968241-Added a case _onKeyDown function in the markup-view.js to detect the copy event. Added conditions to check the type of the node in the copyOuterHTML in inspector-panel.js . Moved the logic of DOCTYPE from markup-view.js to getter in inspector.js

diff --git a/browser/devtools/inspector/inspector-panel.js b/browser/devtools/inspector/inspector-panel.js
--- a/browser/devtools/inspector/inspector-panel.js
+++ b/browser/devtools/inspector/inspector-panel.js
@@ -726,17 +726,29 @@ InspectorPanel.prototype = {
    * Copy the outerHTML of the selected Node to the clipboard.
    */
   copyOuterHTML: function InspectorPanel_copyOuterHTML()
   {
     if (!this.selection.isNode()) {
       return;
     }
 
-    this._copyLongStr(this.walker.outerHTML(this.selection.nodeFront));
+    let node=this.selection.nodeFront;
+    if (node.nodeType === 1) {
+      this._copyLongStr(this.walker.outerHTML(this.selection.nodeFront));
+    } else if (node.nodeType === 8) {
+      node.getNodeValue().then(longstr => {
+        longstr.string().then(nodeValue => {
+          longstr.release().then(null,console.error);
+          this._copyLongStr(nodeValue);
+        });
+      });
+    } else if (node.nodeType === 10) {
+      this._copyLongStr(node.doctypeString);
+    }
   },
 
   /**
    * Copy the data-uri for the currently selected image in the clipboard.
    */
   copyImageDataUri: function InspectorPanel_copyImageDataUri()
   {
     let container = this.markup.getContainer(this.selection.nodeFront);
diff --git a/browser/devtools/markupview/markup-view.js b/browser/devtools/markupview/markup-view.js
--- a/browser/devtools/markupview/markup-view.js
+++ b/browser/devtools/markupview/markup-view.js
@@ -403,16 +403,22 @@ MarkupView.prototype = {
         }
         this.navigate(selection);
         break;
       }
       case Ci.nsIDOMKeyEvent.DOM_VK_F2: {
         this.beginEditingOuterHTML(this._selectedContainer.node);
         break;
       }
+      case Ci.nsIDOMKeyEvent.DOM_VK_C: {
+        if (aEvent.ctrlKey || aEvent.metaKey) {
+          this._inspector.copyOuterHTML();
+        }
+        break;
+      }
       default:
         handled = false;
     }
     if (handled) {
       aEvent.stopPropagation();
       aEvent.preventDefault();
     }
   },
@@ -1589,20 +1595,17 @@ GenericEditor.prototype = {
  * Creates an editor for a DOCTYPE node.
  *
  * @param MarkupContainer aContainer The container owning this editor.
  * @param DOMNode aNode The node being edited.
  */
 function DoctypeEditor(aContainer, aNode) {
   this.elt = aContainer.doc.createElement("span");
   this.elt.className = "editor comment";
-  this.elt.textContent = '<!DOCTYPE ' + aNode.name +
-     (aNode.publicId ? ' PUBLIC "' +  aNode.publicId + '"': '') +
-     (aNode.systemId ? ' "' + aNode.systemId + '"' : '') +
-     '>';
+  this.elt.textContent = aNode.doctypeString;
 }
 
 DoctypeEditor.prototype = {
   destroy: function() {}
 };
 
 /**
  * Creates a simple text editor node, used for TEXT and COMMENT
diff --git a/toolkit/devtools/server/actors/inspector.js b/toolkit/devtools/server/actors/inspector.js
--- a/toolkit/devtools/server/actors/inspector.js
+++ b/toolkit/devtools/server/actors/inspector.js
@@ -215,17 +215,20 @@ var NodeActor = exports.NodeActor = prot
       namespaceURI: this.rawNode.namespaceURI,
       nodeName: this.rawNode.nodeName,
       numChildren: numChildren,
 
       // doctype attributes
       name: this.rawNode.name,
       publicId: this.rawNode.publicId,
       systemId: this.rawNode.systemId,
-
+      doctypeString: '<!DOCTYPE '+ this.rawNode.name +
+          (this.rawNode.publicId ? ' PUBLIC "' + this.rawNode.publicId + '"':'') +
+          (this.rawNode.systemId ? ' "' + this.rawNode.systemId + '"':'') + '>'
+      ,
       attrs: this.writeAttrs(),
 
       pseudoClassLocks: this.writePseudoClassLocks(),
     };
 
     if (this.isDocumentElement()) {
       form.isDocumentElement = true;
     }
