# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  89145db408d0595ccf8f6b0c878e726938ea50f7

diff --git a/layout/base/nsCSSFrameConstructor.cpp b/layout/base/nsCSSFrameConstructor.cpp
--- a/layout/base/nsCSSFrameConstructor.cpp
+++ b/layout/base/nsCSSFrameConstructor.cpp
@@ -2304,17 +2304,19 @@ nsIFrame* nsCSSFrameConstructor::Constru
   nsContainerFrame* contentFrame;
   nsIFrame* newFrame;
   bool processChildren = false;
 
   nsFrameConstructorSaveState absoluteSaveState;
 
   // Check whether we need to build a XUL box or SVG root frame
 #ifdef MOZ_XUL
-  if (aDocElement->IsXULElement()) {
+  printf("Doc element constructing %s\n", mDocument->GetDocumentURI()->GetSpecOrDefault().get());
+  if (mDocument->GetDocumentURI()->GetSpecOrDefault().EqualsLiteral("chrome://browser/content/browser.xhtml") ||
+      aDocElement->IsXULElement()) {
     contentFrame = NS_NewDocElementBoxFrame(mPresShell, computedStyle);
     InitAndRestoreFrame(state, aDocElement, mDocElementContainingBlock,
                         contentFrame);
     newFrame = contentFrame;
     processChildren = true;
   } else
 #endif
       if (aDocElement->IsSVGElement()) {
@@ -2566,17 +2568,17 @@ void nsCSSFrameConstructor::SetUpDocElem
       static_cast<nsContainerFrame*>(GetRootFrame());
   ComputedStyle* viewportPseudoStyle = viewportFrame->Style();
 
   nsContainerFrame* rootFrame = nullptr;
   PseudoStyleType rootPseudo;
 
   if (!isPaginated) {
 #ifdef MOZ_XUL
-    if (aDocElement->IsXULElement()) {
+    if (mDocument->GetDocumentURI()->GetSpecOrDefault().EqualsLiteral("chrome://browser/content/browser.xhtml") || aDocElement->IsXULElement()) {
       // pass a temporary stylecontext, the correct one will be set later
       rootFrame = NS_NewRootBoxFrame(mPresShell, viewportPseudoStyle);
     } else
 #endif
     {
       // pass a temporary stylecontext, the correct one will be set later
       rootFrame = NS_NewCanvasFrame(mPresShell, viewportPseudoStyle);
       mHasRootAbsPosContainingBlock = true;
@@ -2600,16 +2602,19 @@ void nsCSSFrameConstructor::SetUpDocElem
   // XXX Do we even need a viewport when printing to a printer?
 
   bool isHTML = aDocElement->IsHTMLElement();
   bool isXUL = false;
 
   if (!isHTML) {
     isXUL = aDocElement->IsXULElement();
   }
+  if (mDocument->GetDocumentURI()->GetSpecOrDefault().EqualsLiteral("chrome://browser/content/browser.xhtml")) {
+    isXUL = true;
+  }
 
   // Never create scrollbars for XUL documents
   bool isScrollable =
       isPaginated ? presContext->HasPaginatedScrolling() : !isXUL;
 
   // We no longer need to do overflow propagation here. It's taken care of
   // when we construct frames for the element whose overflow might be
   // propagated
@@ -3944,17 +3949,17 @@ static nsIFrame* NS_NewGridBoxFrame(Pres
   NS_NewGridLayout2(getter_AddRefs(layout));
   return NS_NewBoxFrame(aPresShell, aComputedStyle, false, layout);
 }
 
 /* static */
 const nsCSSFrameConstructor::FrameConstructionData*
 nsCSSFrameConstructor::FindXULTagData(const Element& aElement,
                                       ComputedStyle& aStyle) {
-  MOZ_ASSERT(aElement.IsXULElement());
+  // MOZ_ASSERT(aElement.IsXULElement());
 
   static const FrameConstructionDataByTag sXULTagData[] = {
 #ifdef MOZ_XUL
       SCROLLABLE_XUL_CREATE(thumb, NS_NewButtonBoxFrame),
       SCROLLABLE_XUL_CREATE(checkbox, NS_NewButtonBoxFrame),
       SCROLLABLE_XUL_CREATE(radio, NS_NewButtonBoxFrame),
       SCROLLABLE_XUL_CREATE(titlebar, NS_NewTitleBarFrame),
       SCROLLABLE_XUL_CREATE(resizer, NS_NewResizerFrame),
