# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  044e76d8d4bbd1b2fe0d2c99b87a86b11ca91aa8

diff --git a/devtools/client/webconsole/test/browser_console.js b/devtools/client/webconsole/test/browser_console.js
--- a/devtools/client/webconsole/test/browser_console.js
+++ b/devtools/client/webconsole/test/browser_console.js
@@ -174,16 +174,26 @@ function* testCPOWInspection(hud) {
 
   // Before the fix for Bug 1382833, this wouldn't resolve due to a CPOW error
   // in the ObjectActor.
   let prototypeAndProperties = yield objectClient.getPrototypeAndProperties();
 
   // Just a sanity check to make sure a valid packet came back
   is(prototypeAndProperties.prototype.class, "XBL prototype JSClass",
     "Looks like a valid response");
+
+  let contentWindowClient = new ObjectClient(hud.jsterm.hud.proxy.client, {
+    actor: prototypeAndProperties.ownProperties._contentWindow.value.actor,
+  });
+  let prototypeAndProperties2 = yield contentWindowClient.getPrototypeAndProperties();
+
+  // console.log(prototypeAndProperties.ownProperties._contentWindow.value.actor);
+// server1.conn0.obj113
+  console.log(JSON.stringify(prototypeAndProperties2, null, 2));
+  yield new Promise(r=>r);
 }
 
 function waitForConsole() {
   let deferred = promise.defer();
 
   Services.obs.addObserver(function observer(aSubject) {
     Services.obs.removeObserver(observer, "web-console-created");
     aSubject.QueryInterface(Ci.nsISupportsString);
diff --git a/devtools/server/actors/object.js b/devtools/server/actors/object.js
--- a/devtools/server/actors/object.js
+++ b/devtools/server/actors/object.js
@@ -268,16 +268,17 @@ ObjectActor.prototype = {
     let names;
     try {
       names = this.obj.getOwnPropertyNames();
     } catch (ex) {
       // The above can throw if this.obj points to a dead object.
       // TODO: we should use Cu.isDeadWrapper() - see bug 885800.
       return { from: this.actorID,
                prototype: this.hooks.createValueGrip(null),
+               foo: 'bar',
                ownProperties: ownProperties,
                safeGetterValues: Object.create(null) };
     }
     for (let name of names) {
       ownProperties[name] = this._propertyDescriptor(name);
     }
     return { from: this.actorID,
              prototype: this.hooks.createValueGrip(this.obj.proto),
@@ -298,16 +299,20 @@ ObjectActor.prototype = {
    *         An object that maps property names to safe getter descriptors as
    *         defined by the remote debugging protocol.
    */
   _findSafeGetterValues: function (ownProperties, limit = 0) {
     let safeGetterValues = Object.create(null);
     let obj = this.obj;
     let level = 0, i = 0;
 
+    if (this._isCPOW) {
+      return safeGetterValues;
+    }
+
     // Most objects don't have any safe getters but inherit some from their
     // prototype. Avoid calling getOwnPropertyNames on objects that may have
     // many properties like Array, strings or js objects. That to avoid
     // freezing firefox when doing so.
     if (TYPED_ARRAY_CLASSES.includes(this.obj.class) ||
         ["Array", "Object", "String"].includes(this.obj.class)) {
       obj = obj.proto;
       level++;
@@ -1806,17 +1811,21 @@ DebuggerServer.ObjectActorPreviewers.Obj
       filename: hooks.createValueGrip(rawObj.filename),
       lineNumber: hooks.createValueGrip(rawObj.lineNumber),
       columnNumber: hooks.createValueGrip(rawObj.columnNumber),
     };
 
     return true;
   },
 
-  function PseudoArray({obj, hooks}, grip, rawObj) {
+  function PseudoArray({obj, hooks, _isCPOW}, grip, rawObj) {
+    if (_isCPOW) {
+      return false;
+    }
+
     let length;
 
     let keys = obj.getOwnPropertyNames();
     if (keys.length == 0) {
       return false;
     }
 
     // If no item is going to be displayed in preview, better display as sparse object.
