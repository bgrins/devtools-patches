# HG changeset patch
# User Alexandre Poirot <poirot.alex@gmail.com>
# Parent  92e6520552764d4fdd9e0b77d28ccef7179311be

Bug 1233463 - Allow loading devtools in a tab or an html:iframe. r=jryans

diff --git a/devtools/client/framework/about-devtools-panel.js b/devtools/client/framework/about-devtools-panel.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/framework/about-devtools-panel.js
@@ -0,0 +1,52 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+// Register about:devtools-panel which allows to open a devtools toolbox
+// in a Firefox tab or a custom html iframe in browser.html
+
+const { Ci, Cu, components } = require("chrome");
+const Cm = components.manager.QueryInterface(Ci.nsIComponentRegistrar);
+const { XPCOMUtils } = Cu.import("resource://gre/modules/XPCOMUtils.jsm", {});
+const { Services } = Cu.import("resource://gre/modules/Services.jsm", {});
+
+function AboutURL() {
+}
+
+AboutURL.prototype = {
+  uri: Services.io.newURI("chrome://devtools/content/framework/toolbox.xul", null, null),
+  classDescription: "about:devtools-panel",
+  classID: components.ID("11342911-3135-45a8-8d71-737a2b0ad469"),
+  contractID: "@mozilla.org/network/protocol/about;1?what=devtools-panel",
+
+  QueryInterface: XPCOMUtils.generateQI([Ci.nsIAboutModule]),
+
+  newChannel : function(aURI) {
+    let chan = Services.io.newChannelFromURI(this.uri);
+    return chan;
+  },
+
+  getURIFlags: function(aURI) {
+    return 0;
+  }
+};
+
+let cls = AboutURL;
+const factory = {
+  _cls: cls,
+  createInstance: function(outer, iid) {
+    if (outer) {
+      throw Cr.NS_ERROR_NO_AGGREGATION;
+    }
+    return new cls();
+  }
+};
+
+exports.register = function () {
+  Cm.registerFactory(cls.prototype.classID, cls.prototype.classDescription, cls.prototype.contractID, factory);
+}
+exports.unregister = function () {
+  Cm.unregisterFactory(cls.prototype.classID, factory);
+}
diff --git a/devtools/client/framework/moz.build b/devtools/client/framework/moz.build
--- a/devtools/client/framework/moz.build
+++ b/devtools/client/framework/moz.build
@@ -2,16 +2,17 @@
 # vim: set filetype=python:
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 BROWSER_CHROME_MANIFESTS += ['test/browser.ini']
 
 DevToolsModules(
+    'about-devtools-panel.js',
     'attach-thread.js',
     'gDevTools.jsm',
     'selection.js',
     'sidebar.js',
     'target.js',
     'toolbox-highlighter-utils.js',
     'toolbox-hosts.js',
     'toolbox-options.js',
diff --git a/devtools/client/framework/toolbox-init.js b/devtools/client/framework/toolbox-init.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/framework/toolbox-init.js
@@ -0,0 +1,93 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const Cu = Components.utils;
+const Ci = Components.interfaces;
+
+// about: pages have broken location object and only href is set.
+let params = {};
+let search = window.location.href.split("?")[1];
+if (search) {
+  for(let kv of search.split("&")) {
+    let [k, v] = kv.split("=");
+    params[k] = decodeURIComponent(v);
+  }
+}
+
+// `host` is the frame element (xul:browser or html:iframe) loading the toolbox
+let host = window.QueryInterface(Ci.nsIInterfaceRequestor)
+                 .getInterface(Ci.nsIDOMWindowUtils)
+                 .containerElement;
+
+if (params["tab-id"]) {
+  var topWindow = window.QueryInterface(Ci.nsIInterfaceRequestor)
+                        .getInterface(Ci.nsIWebNavigation)
+                        .QueryInterface(Ci.nsIDocShellTreeItem)
+                        .rootTreeItem
+                        .QueryInterface(Ci.nsIInterfaceRequestor)
+                        .getInterface(Ci.nsIDOMWindow);
+  if (topWindow && topWindow.gBrowser) {
+    let tab = topWindow.gBrowser.tabs[parseInt(params["tab-id"]) - 1];
+    if (tab) {
+      loadTab(tab, host);
+    } else {
+      console.error("Unable to find tab #" + params["tab-id"]);
+    }
+  } else {
+    console.error("Unable to retrieve top level firefox window from toolbox document");
+  }
+} else if (params["target"]) {
+  // `iframe` is the targeted document to debug
+  let iframe = host.wrappedJSObject.target;
+  // Need to use an xray and query some interfaces to have
+  // attributes and behavior expected by devtools codebase
+  iframe = XPCNativeWrapper(iframe);
+  iframe.QueryInterface(Ci.nsIFrameLoaderOwner);
+  // Fake a xul:tab object as we don't have have.
+  // linkedBrowser is the only one attribute being queried.
+  let tab = { linkedBrowser: iframe };
+  if (iframe) {
+    loadTab(tab, host).
+      then(() => host.removeAttribute("style"));
+  } else {
+    console.error("Missing `target` attribute on the toolbox iframe");
+  }
+}
+
+function loadTab(tab, host) {
+  const {gDevTools} = Cu.import("resource://devtools/client/framework/gDevTools.jsm", {});
+  const {require} = Cu.import("resource://devtools/shared/Loader.jsm", {});
+  const {Toolbox} = require("devtools/client/framework/toolbox");
+  const {TargetFactory} = require("devtools/client/framework/target");
+  const {DebuggerServer} = require("devtools/server/main");
+  const {DebuggerClient} = require("devtools/shared/client/main");
+  const promise = require("promise");
+
+  // Setup a server if we don't have one already running
+  if (!DebuggerServer.initialized) {
+    DebuggerServer.init();
+    DebuggerServer.addBrowserActors();
+  }
+
+  let deferred = promise.defer();
+
+  let client = new DebuggerClient(DebuggerServer.connectPipe());
+  // TODO: Convert client.connect to promise
+  client.connect(() => {
+    return deferred.resolve(
+      client.getTab({ tab: tab }).then(response => {
+        let form = response.tab;
+        return TargetFactory.forRemoteTab({client, form, chrome: false})
+          .then(target => {
+          let options = {customIframe: host};
+          return gDevTools.showToolbox(target, null, Toolbox.HostType.CUSTOM, options);
+        });
+      })
+    );
+  });
+
+  return deferred.promise;
+}
diff --git a/devtools/client/framework/toolbox.js b/devtools/client/framework/toolbox.js
--- a/devtools/client/framework/toolbox.js
+++ b/devtools/client/framework/toolbox.js
@@ -173,17 +173,17 @@ exports.Toolbox = Toolbox;
 Toolbox.HostType = {
   BOTTOM: "bottom",
   SIDE: "side",
   WINDOW: "window",
   CUSTOM: "custom"
 };
 
 Toolbox.prototype = {
-  _URL: "chrome://devtools/content/framework/toolbox.xul",
+  _URL: "about:devtools-panel",
 
   _prefs: {
     LAST_HOST: "devtools.toolbox.host",
     LAST_TOOL: "devtools.toolbox.selectedTool",
     SIDE_ENABLED: "devtools.toolbox.sideEnabled",
     PREVIOUS_HOST: "devtools.toolbox.previousHost"
   },
 
@@ -348,17 +348,19 @@ Toolbox.prototype = {
   /**
    * Open the toolbox
    */
   open: function() {
     return Task.spawn(function*() {
       let iframe = yield this._host.create();
       let domReady = promise.defer();
 
-      iframe.setAttribute("src", this._URL);
+      if (iframe.getAttribute("src") != this._URL) {
+        iframe.setAttribute("src", this._URL);
+      }
       iframe.setAttribute("aria-label", toolboxStrings("toolbox.label"));
       let domHelper = new DOMHelpers(iframe.contentWindow);
       domHelper.onceDOMReady(() => domReady.resolve(), this._URL);
       // Optimization: fire up a few other things before waiting on
       // the iframe being ready (makes startup faster)
 
       // Load the toolbox-level actor fronts and utilities now
       yield this._target.makeRemote();
@@ -691,17 +693,20 @@ Toolbox.prototype = {
    * @param {number} zoomValue
    *        Zoom level e.g. 1.2
    */
   setZoom: function(zoomValue) {
     // cap zoom value
     zoomValue = Math.max(zoomValue, MIN_ZOOM);
     zoomValue = Math.min(zoomValue, MAX_ZOOM);
 
-    let contViewer = this.frame.docShell.contentViewer;
+    let docShell = this.frame.contentWindow.QueryInterface(Ci.nsIInterfaceRequestor)
+      .getInterface(Ci.nsIWebNavigation)
+      .QueryInterface(Ci.nsIDocShell);
+    let contViewer = docShell.contentViewer;
 
     contViewer.fullZoom = zoomValue;
 
     Services.prefs.setCharPref(ZOOM_PREF, zoomValue);
   },
 
   /**
    * Adds the keys and commands to the Toolbox Window in window mode.
@@ -1644,18 +1649,16 @@ Toolbox.prototype = {
    *
    * @return {Host} host
    *        The created host object
    */
   _createHost: function(hostType, options) {
     if (!Hosts[hostType]) {
       throw new Error("Unknown hostType: " + hostType);
     }
-
-    // clean up the toolbox if its window is closed
     let newHost = new Hosts[hostType](this.target.tab, options);
     newHost.on("window-closed", this.destroy);
     return newHost;
   },
 
   reload: function () {
     const {devtools} = Cu.import("resource://devtools/shared/Loader.jsm", {});
     devtools.reload(true);
diff --git a/devtools/client/framework/toolbox.xul b/devtools/client/framework/toolbox.xul
--- a/devtools/client/framework/toolbox.xul
+++ b/devtools/client/framework/toolbox.xul
@@ -19,16 +19,18 @@
 <window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
 
   <script type="application/javascript;version=1.8"
           src="chrome://devtools/content/shared/theme-switching.js"/>
   <script type="application/javascript"
           src="chrome://global/content/viewSourceUtils.js"/>
 
   <script type="application/javascript" src="chrome://global/content/globalOverlay.js"/>
+  <script type="application/javascript;version=1.8"
+          src="chrome://devtools/content/framework/toolbox-init.js"/>
 
   <commandset id="editMenuCommands"/>
   <keyset id="editMenuKeys"/>
   <keyset id="toolbox-keyset">
     <key id="toolbox-options-key"
          key="&toolboxOptionsButton.key;"
          oncommand="void(0);"
          modifiers="shift, accel"/>
diff --git a/devtools/client/jar.mn b/devtools/client/jar.mn
--- a/devtools/client/jar.mn
+++ b/devtools/client/jar.mn
@@ -114,16 +114,17 @@ devtools.jar:
     content/promisedebugger/promise-debugger.xhtml (promisedebugger/promise-debugger.xhtml)
     content/commandline/commandline.css (commandline/commandline.css)
     content/commandline/commandlineoutput.xhtml (commandline/commandlineoutput.xhtml)
     content/commandline/commandlinetooltip.xhtml (commandline/commandlinetooltip.xhtml)
     content/framework/toolbox-window.xul (framework/toolbox-window.xul)
     content/framework/toolbox-options.xul (framework/toolbox-options.xul)
     content/framework/toolbox-options.js (framework/toolbox-options.js)
     content/framework/toolbox.xul (framework/toolbox.xul)
+    content/framework/toolbox-init.js (framework/toolbox-init.js)
     content/framework/options-panel.css (framework/options-panel.css)
     content/framework/toolbox-process-window.xul (framework/toolbox-process-window.xul)
 *   content/framework/toolbox-process-window.js (framework/toolbox-process-window.js)
     content/framework/dev-edition-promo/dev-edition-promo.xul (framework/dev-edition-promo/dev-edition-promo.xul)
 *   content/framework/dev-edition-promo/dev-edition-promo.css (framework/dev-edition-promo/dev-edition-promo.css)
     content/framework/dev-edition-promo/dev-edition-logo.png (framework/dev-edition-promo/dev-edition-logo.png)
     content/inspector/inspector.xul (inspector/inspector.xul)
     content/inspector/inspector.css (inspector/inspector.css)
diff --git a/devtools/client/main.js b/devtools/client/main.js
--- a/devtools/client/main.js
+++ b/devtools/client/main.js
@@ -4,16 +4,17 @@
 
 "use strict";
 
 const { Cu } = require("chrome");
 Cu.import("resource://gre/modules/Services.jsm");
 const { gDevTools } = require("resource://devtools/client/framework/gDevTools.jsm");
 
 const { defaultTools, defaultThemes } = require("devtools/client/definitions");
+const AboutDevtools = require("devtools/client/framework/about-devtools-panel");
 
 defaultTools.forEach(definition => gDevTools.registerTool(definition));
 defaultThemes.forEach(definition => gDevTools.registerTheme(definition));
 
 // Re-export for backwards compatibility, but we should probably the
 // definitions from require("devtools/client/definitions") in the future
 exports.defaultTools = require("devtools/client/definitions").defaultTools;
 exports.defaultThemes = require("devtools/client/definitions").defaultThemes;
@@ -21,25 +22,28 @@ exports.Tools = require("devtools/client
 
 Object.defineProperty(exports, "Toolbox", {
   get: () => require("devtools/client/framework/toolbox").Toolbox
 });
 Object.defineProperty(exports, "TargetFactory", {
   get: () => require("devtools/client/framework/target").TargetFactory
 });
 
+AboutDevtools.register();
+
 const unloadObserver = {
   observe: function(subject, topic, data) {
     if (subject.wrappedJSObject === require("@loader/unload")) {
       Services.obs.removeObserver(unloadObserver, "sdk:loader:destroy");
       for (let definition of gDevTools.getToolDefinitionArray()) {
         gDevTools.unregisterTool(definition.id);
       }
       for (let definition of gDevTools.getThemeDefinitionArray()) {
         gDevTools.unregisterTheme(definition.id);
       }
+      AboutDevtools.unregister();
     }
   }
 };
 Services.obs.addObserver(unloadObserver, "sdk:loader:destroy", false);
 
 const events = require("sdk/system/events");
 events.emit("devtools-loaded", {});
