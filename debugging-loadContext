# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  38fa58b1ad08053fc307a161e7a17a5ba3650b62

diff --git a/dom/base/nsFrameLoader.cpp b/dom/base/nsFrameLoader.cpp
--- a/dom/base/nsFrameLoader.cpp
+++ b/dom/base/nsFrameLoader.cpp
@@ -3010,16 +3010,17 @@ already_AddRefed<mozilla::dom::Promise> 
 }
 
 already_AddRefed<nsITabParent> nsFrameLoader::GetTabParent() {
   return do_AddRef(mRemoteBrowser);
 }
 
 already_AddRefed<nsILoadContext> nsFrameLoader::LoadContext() {
   nsCOMPtr<nsILoadContext> loadContext;
+  printf("Load context: %d %d\n",IsRemoteFrame(), mRemoteBrowser);
   if (IsRemoteFrame() && (mRemoteBrowser || TryRemoteBrowser())) {
     loadContext = mRemoteBrowser->GetLoadContext();
   } else {
     loadContext = do_GetInterface(GetDocShell(IgnoreErrors()));
   }
   return loadContext.forget();
 }
 
diff --git a/dom/ipc/TabParent.cpp b/dom/ipc/TabParent.cpp
--- a/dom/ipc/TabParent.cpp
+++ b/dom/ipc/TabParent.cpp
@@ -2529,18 +2529,20 @@ mozilla::ipc::IPCResult TabParent::RecvR
     widget->ReportSwipeStarted(aInputBlockId, aStartSwipe);
   }
   return IPC_OK();
 }
 
 already_AddRefed<nsILoadContext> TabParent::GetLoadContext() {
   nsCOMPtr<nsILoadContext> loadContext;
   if (mLoadContext) {
+  printf("TabParent::GetLoadContext 0\n");
     loadContext = mLoadContext;
   } else {
+  printf("TabParent::GetLoadContext 1\n");
     bool isPrivate = mChromeFlags & nsIWebBrowserChrome::CHROME_PRIVATE_WINDOW;
     SetPrivateBrowsingAttributes(isPrivate);
     bool useTrackingProtection = false;
     nsCOMPtr<nsIDocShell> docShell = mFrameElement->OwnerDoc()->GetDocShell();
     if (docShell) {
       docShell->GetUseTrackingProtection(&useTrackingProtection);
     }
     loadContext = new LoadContext(
diff --git a/toolkit/content/widgets/browser.js b/toolkit/content/widgets/browser.js
--- a/toolkit/content/widgets/browser.js
+++ b/toolkit/content/widgets/browser.js
@@ -996,16 +996,18 @@ class MozBrowser extends MozElementMixin
   }
 
   didStartLoadSinceLastUserTyping() {
     return !this.inLoadURI &&
       this.urlbarChangeTracker._startedLoadSinceLastUserTyping;
   }
 
   construct() {
+    console.log("GOT FRAME LOADER DURING CONSTRUCTION", this.frameLoader);
+
     trackBrowserForUnload(this);
     this.initializeFields();
     this.mDestroyed = false;
     if (this.isRemoteBrowser) {
       /*
        * Don't try to send messages from this function. The message manager for
        * the <browser> element may not be initialized yet.
        */
@@ -1014,17 +1016,18 @@ class MozBrowser extends MozElementMixin
         .createInstance(Ci.nsIWebNavigation);
       this._remoteWebNavigationImpl = this._remoteWebNavigation.wrappedJSObject;
       this._remoteWebNavigationImpl.swapBrowser(this);
 
       // Initialize contentPrincipal to the about:blank principal for this loadcontext
       let { Services } = ChromeUtils.import("resource://gre/modules/Services.jsm", {});
       let aboutBlank = Services.io.newURI("about:blank");
       let ssm = Services.scriptSecurityManager;
-      this._contentPrincipal = ssm.getLoadContextCodebasePrincipal(aboutBlank, this.loadContext);
+      this.loadContext;
+      // this._contentPrincipal = ssm.getLoadContextCodebasePrincipal(aboutBlank, this.loadContext);
 
       this.messageManager.addMessageListener("Browser:Init", this);
       this.messageManager.addMessageListener("DOMTitleChanged", this);
       this.messageManager.addMessageListener("ImageDocumentLoaded", this);
       this.messageManager.addMessageListener("FullZoomChange", this);
       this.messageManager.addMessageListener("TextZoomChange", this);
       this.messageManager.addMessageListener("ZoomChangeUsingMouseWheel", this);
 
