# HG changeset patch
# User Tom Tromey <tromey@mozilla.com>

Bug 1154809 - remove dead css-parsing code; r=pbrosset

diff --git a/browser/devtools/shared/test/browser_css_color.js b/browser/devtools/shared/test/browser_css_color.js
index f1dd1d5..9280f79 100644
--- a/browser/devtools/shared/test/browser_css_color.js
+++ b/browser/devtools/shared/test/browser_css_color.js
@@ -37,17 +37,16 @@ function testColorUtils(canvas) {
     is(color.hex, hex, "color.hex === hex");
     is(color.hsl, hsl, "color.hsl === hsl");
     is(color.rgb, rgb, "color.rgb === rgb");
 
     testToString(color, name, hex, hsl, rgb);
     testColorMatch(name, hex, hsl, rgb, color.rgba, canvas);
   }
 
-  testProcessCSSString();
   testSetAlpha();
 }
 
 function testToString(color, name, hex, hsl, rgb) {
   color.colorUnit = colorUtils.CssColor.COLORUNIT.name;
   is(color.toString(), name, "toString() with authored type");
 
   color.colorUnit = colorUtils.CssColor.COLORUNIT.hex;
@@ -101,30 +100,16 @@ function testColorMatch(name, hex, hsl, rgb, rgba, canvas) {
   setTargetColor();
 
   test(name, "name");
   test(hex, "hex");
   test(hsl, "hsl");
   test(rgb, "rgb");
 }
 
-function testProcessCSSString() {
-  let before = "border: 1px solid red; border-radius: 5px; " +
-               "color rgb(0, 255, 0); font-weight: bold; " +
-               "background-color: transparent; " +
-               "border-top-color: rgba(0, 0, 255, 0.5);";
-  let expected = "border: 1px solid #F00; border-radius: 5px; " +
-                 "color #0F0; font-weight: bold; " +
-                 "background-color: transparent; " +
-                 "border-top-color: rgba(0, 0, 255, 0.5);";
-  let after = colorUtils.processCSSString(before);
-
-  is(after, expected, "CSS string processed correctly");
-}
-
 function testSetAlpha() {
   let values = [
     ["longhex", "#ff0000", 0.5, "rgba(255, 0, 0, 0.5)"],
     ["hex", "#f0f", 0.2, "rgba(255, 0, 255, 0.2)"],
     ["rgba", "rgba(120, 34, 23, 1)", 0.25, "rgba(120, 34, 23, 0.25)"],
     ["rgb", "rgb(120, 34, 23)", 0.25, "rgba(120, 34, 23, 0.25)"],
     ["hsl", "hsl(208, 100%, 97%)", 0.75, "rgba(239, 247, 255, 0.75)"],
     ["hsla", "hsla(208, 100%, 97%, 1)", 0.75, "rgba(239, 247, 255, 0.75)"]
diff --git a/browser/devtools/shared/widgets/Tooltip.js b/browser/devtools/shared/widgets/Tooltip.js
index 34859cd..98e8eef 100644
--- a/browser/devtools/shared/widgets/Tooltip.js
+++ b/browser/devtools/shared/widgets/Tooltip.js
@@ -30,19 +30,16 @@ XPCOMUtils.defineLazyModuleGetter(this, "clearNamedTimeout",
   "resource:///modules/devtools/ViewHelpers.jsm");
 XPCOMUtils.defineLazyModuleGetter(this, "VariablesView",
   "resource:///modules/devtools/VariablesView.jsm");
 XPCOMUtils.defineLazyModuleGetter(this, "VariablesViewController",
   "resource:///modules/devtools/VariablesViewController.jsm");
 XPCOMUtils.defineLazyModuleGetter(this, "Task",
   "resource://gre/modules/Task.jsm");
 
-const GRADIENT_RE = /\b(repeating-)?(linear|radial)-gradient\(((rgb|hsl)a?\(.+?\)|[^\)])+\)/gi;
-const BORDERCOLOR_RE = /^border-[-a-z]*color$/ig;
-const BORDER_RE = /^border(-(top|bottom|left|right))?$/ig;
 const XHTML_NS = "http://www.w3.org/1999/xhtml";
 const SPECTRUM_FRAME = "chrome://browser/content/devtools/spectrum-frame.xhtml";
 const CUBIC_BEZIER_FRAME = "chrome://browser/content/devtools/cubic-bezier-frame.xhtml";
 const MDN_DOCS_FRAME = "chrome://browser/content/devtools/mdn-docs-frame.xhtml";
 const FILTER_FRAME = "chrome://browser/content/devtools/filter-frame.xhtml";
 const ESCAPE_KEYCODE = Ci.nsIDOMKeyEvent.DOM_VK_ESCAPE;
 const RETURN_KEYCODE = Ci.nsIDOMKeyEvent.DOM_VK_RETURN;
 const POPUP_EVENTS = ["shown", "hidden", "showing", "hiding"];
diff --git a/browser/devtools/styleinspector/rule-view.js b/browser/devtools/styleinspector/rule-view.js
index 6608d99..f6db590 100644
--- a/browser/devtools/styleinspector/rule-view.js
+++ b/browser/devtools/styleinspector/rule-view.js
@@ -29,25 +29,19 @@ const PREF_ENABLE_MDN_DOCS_TOOLTIP = "devtools.inspector.mdnDocsTooltip.enabled"
 const PROPERTY_NAME_CLASS = "ruleview-propertyname";
 const FILTER_CHANGED_TIMEOUT = 150;
 
 /**
  * These regular expressions are adapted from firebug's css.js, and are
  * used to parse CSSStyleDeclaration's cssText attribute.
  */
 
-// Used to split on css line separators
-const CSS_LINE_RE = /(?:[^;\(]*(?:\([^\)]*?\))?[^;\(]*)*;?/g;
-
 // Used to parse a single property line.
 const CSS_PROP_RE = /\s*([^:\s]*)\s*:\s*(.*?)\s*(?:! (important))?;?$/;
 
-// Used to parse an external resource from a property value
-const CSS_RESOURCE_RE = /url\([\'\"]?(.*?)[\'\"]?\)/;
-
 const IOService = Cc["@mozilla.org/network/io-service;1"]
                   .getService(Ci.nsIIOService);
 
 function promiseWarn(err) {
   console.error(err);
   return promise.reject(err);
 }
 
@@ -2844,32 +2838,16 @@ TextPropertyEditor.prototype = {
   resolveURI: function(relativePath) {
     if (this.sheetURI) {
       relativePath = this.sheetURI.resolve(relativePath);
     }
     return relativePath;
   },
 
   /**
-   * Check the property value to find an external resource (if any).
-   * @return {string} the URI in the property value, or null if there is no match.
-   */
-  getResourceURI: function() {
-    let val = this.prop.value;
-    let uriMatch = CSS_RESOURCE_RE.exec(val);
-    let uri = null;
-
-    if (uriMatch && uriMatch[1]) {
-      uri = uriMatch[1];
-    }
-
-    return uri;
-  },
-
-  /**
    * Populate the span based on changes to the TextProperty.
    */
   update: function() {
     if (this.ruleEditor.ruleView.isDestroyed) {
       return;
     }
 
     if (this.prop.enabled) {
diff --git a/toolkit/devtools/css-color.js b/toolkit/devtools/css-color.js
index 4451ecb..80de9ca 100644
--- a/toolkit/devtools/css-color.js
+++ b/toolkit/devtools/css-color.js
@@ -4,35 +4,18 @@
 
 "use strict";
 
 const {Cc, Ci, Cu} = require("chrome");
 const {Services} = Cu.import("resource://gre/modules/Services.jsm", {});
 
 const COLOR_UNIT_PREF = "devtools.defaultColorUnit";
 
-const REGEX_JUST_QUOTES  = /^""$/;
 const REGEX_HSL_3_TUPLE  = /^\bhsl\(([\d.]+),\s*([\d.]+%),\s*([\d.]+%)\)$/i;
 
-/**
- * This regex matches:
- *  - #F00
- *  - #FF0000
- *  - hsl()
- *  - hsla()
- *  - rgb()
- *  - rgba()
- *  - red
- *
- *  It also matches css keywords e.g. "background-color" otherwise
- *  "background" would be replaced with #6363CE ("background" is a platform
- *  color).
- */
-const REGEX_ALL_COLORS = /#[0-9a-fA-F]{3}\b|#[0-9a-fA-F]{6}\b|hsl\(.*?\)|hsla\(.*?\)|rgba?\(.*?\)|\b[a-zA-Z-]+\b/g;
-
 const SPECIALVALUES = new Set([
   "currentcolor",
   "initial",
   "inherit",
   "transparent",
   "unset"
 ]);
 
@@ -61,29 +44,25 @@ const SPECIALVALUES = new Set([
  *   color.hsla === "hsla(0, 100%, 50%, 1)" // If alpha channel is present
  *                                             then we return this.rgba.
  *
  *   color.toString() === "#F00"; // Outputs the color type determined in the
  *                                   COLOR_UNIT_PREF constant (above).
  *   // Color objects can be reused
  *   color.newColor("green") === "#0F0"; // true
  *
- *   let processed = colorUtils.processCSSString("color:red; background-color:green;");
- *   // Returns "color:#F00; background-color:#0F0;"
- *
  *   Valid values for COLOR_UNIT_PREF are contained in CssColor.COLORUNIT.
  */
 
 function CssColor(colorValue) {
   this.newColor(colorValue);
 }
 
 module.exports.colorUtils = {
   CssColor: CssColor,
-  processCSSString: processCSSString,
   rgbToHsl: rgbToHsl,
   setAlpha: setAlpha
 };
 
 /**
  * Values used in COLOR_UNIT_PREF
  */
 CssColor.COLORUNIT = {
@@ -360,41 +339,16 @@ CssColor.prototype = {
    * This method allows comparison of CssColor objects using ===.
    */
   valueOf: function() {
     return this.rgba;
   },
 };
 
 /**
- * Process a CSS string
- *
- * @param  {String} value
- *         CSS string e.g. "color:red; background-color:green;"
- * @return {String}
- *         Converted CSS String e.g. "color:#F00; background-color:#0F0;"
- */
-function processCSSString(value) {
-  if (value && REGEX_JUST_QUOTES.test(value)) {
-    return value;
-  }
-
-  let colorPattern = REGEX_ALL_COLORS;
-
-  value = value.replace(colorPattern, function(match) {
-    let color = new CssColor(match);
-    if (color.valid) {
-      return color;
-    }
-    return match;
-  });
-  return value;
-}
-
-/**
  * Convert rgb value to hsl
  *
  * @param {array} rgb
  *         Array of rgb values
  * @return {array}
  *         Array of hsl values.
  */
 function rgbToHsl([r,g,b]) {
diff --git a/toolkit/devtools/styleinspector/css-logic.js b/toolkit/devtools/styleinspector/css-logic.js
index 9ba9c9c..e56b74e 100644
--- a/toolkit/devtools/styleinspector/css-logic.js
+++ b/toolkit/devtools/styleinspector/css-logic.js
@@ -37,24 +37,16 @@
  * - how browsers process CSS
  * @constructor
  */
 
 const { Cc, Ci, Cu } = require("chrome");
 const Services = require("Services");
 const DevToolsUtils = require("devtools/toolkit/DevToolsUtils");
 
-const RX_UNIVERSAL_SELECTOR = /\s*\*\s*/g;
-const RX_NOT = /:not\((.*?)\)/g;
-const RX_PSEUDO_CLASS_OR_ELT = /(:[\w-]+\().*?\)/g;
-const RX_CONNECTORS = /\s*[\s>+~]\s*/g;
-const RX_ID = /\s*#\w+\s*/g;
-const RX_CLASS_OR_ATTRIBUTE = /\s*(?:\.\w+|\[.+?\])\s*/g;
-const RX_PSEUDO = /\s*:?:([\w-]+)(\(?\)?)\s*/g;
-
 // This should be ok because none of the functions that use this should be used
 // on the worker thread, where Cu is not available.
 if (Cu) {
   Cu.importGlobalProperties(['CSS']);
   Cu.import("resource://gre/modules/devtools/LayoutHelpers.jsm");
 }
 
 function CssLogic()
