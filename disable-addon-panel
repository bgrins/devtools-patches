# HG changeset patch
# Parent 5487e2fdacf6b5426762f1d11cb8b7b8b2723b36
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 1060945 - Make it possible to enable/disable a devtools panel even if its visibilityswitch pref doesn't exist;r=pbrosset

diff --git a/browser/devtools/framework/test/browser_toolbox_options.js b/browser/devtools/framework/test/browser_toolbox_options.js
--- a/browser/devtools/framework/test/browser_toolbox_options.js
+++ b/browser/devtools/framework/test/browser_toolbox_options.js
@@ -1,51 +1,65 @@
 /* Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/ */
 
+// Tests that changing preferences in the options panel updates the prefs
+// and toggles appropriate things in the toolbox.
+
 let doc = null, toolbox = null, panelWin = null, modifiedPrefs = [];
 
-function test() {
+let test = asyncTest(function*() {
   const URL = "data:text/html;charset=utf8,test for dynamically registering and unregistering tools";
-  Task.spawn(function* () {
-    let tab = yield addTab(URL);
-    let target = TargetFactory.forTab(tab);
-    let toolbox = yield gDevTools.showToolbox(target);
-    yield testSelectTool(toolbox);
-    yield testOptionsShortcut();
-    yield testOptions();
-    yield testToggleTools();
-  }).then(cleanup, errorHandler);
+  registerNewTool();
+  let tab = yield addTab(URL);
+  let target = TargetFactory.forTab(tab);
+  toolbox = yield gDevTools.showToolbox(target);
+  doc = toolbox.doc;
+  yield testSelectTool();
+  yield testOptionsShortcut();
+  yield testOptions();
+  yield testToggleTools();
+  yield cleanup();
+});
+
+function registerNewTool() {
+  let toolDefinition = {
+    id: "test-tool",
+    isTargetSupported: function() true,
+    visibilityswitch: "devtools.test-tool.enabled",
+    url: "about:blank",
+    label: "someLabel"
+  };
+
+  ok(gDevTools, "gDevTools exists");
+  ok(!gDevTools.getToolDefinitionMap().has("test-tool"),
+    "The tool is not registered");
+
+  gDevTools.registerTool(toolDefinition);
+  ok(gDevTools.getToolDefinitionMap().has("test-tool"),
+    "The tool is registered");
 }
 
-function testSelectTool(aToolbox) {
-  let deferred = promise.defer();
+function* testSelectTool() {
+  info ("Checking to make sure that the options panel can be selected.");
 
-  toolbox = aToolbox;
-  doc = toolbox.doc;
-  toolbox.once("options-selected", () => {
-    ok(true, "Toolbox selected via selectTool method");
-    deferred.resolve();
-  });
+  let onceSelected = toolbox.once("options-selected");
   toolbox.selectTool("options");
-
-  return deferred.promise;
+  yield onceSelected;
+  ok(true, "Toolbox selected via selectTool method");
 }
 
-function testOptionsShortcut() {
-  let deferred = promise.defer();
+function* testOptionsShortcut() {
+  info ("Selecting another tool, then reselecting options panel with keyboard.");
 
-  toolbox.selectTool("webconsole")
+  yield toolbox.selectTool("webconsole")
          .then(() => synthesizeKeyFromKeyTag("toolbox-options-key", doc))
          .then(() => {
            ok(true, "Toolbox selected via shortcut key");
-           deferred.resolve();
          });
-
-  return deferred.promise;
 }
 
 function* testOptions() {
   let tool = toolbox.getPanel("options");
   panelWin = tool.panelWin;
   let prefNodes = tool.panelDoc.querySelectorAll("checkbox[data-pref]");
 
   // Store modified pref names so that they can be cleared on error.
@@ -98,17 +112,17 @@ function* testMenuList(menulist) {
     commandEvent.initCommandEvent("command", true, true, window, 0, false, false,
                                   false, false, null);
     menulist.dispatchEvent(commandEvent);
 
     yield deferred.promise;
   }
 }
 
-function testMouseClick(node, prefValue) {
+function* testMouseClick(node, prefValue) {
   let deferred = promise.defer();
 
   let pref = node.getAttribute("data-pref");
   gDevTools.once("pref-changed", (event, data) => {
     if (data.pref == pref) {
       ok(true, "Correct pref was changed");
       is(data.oldValue, prefValue, "Previous value is correct for " + pref);
       is(data.newValue, !prefValue, "New value is correct for " + pref);
@@ -122,85 +136,86 @@ function testMouseClick(node, prefValue)
 
   // We use executeSoon here to ensure that the element is in view and
   // clickable.
   executeSoon(function() {
     info("Click event synthesized for pref " + pref);
     EventUtils.synthesizeMouseAtCenter(node, {}, panelWin);
   });
 
-  return deferred.promise;
+  yield deferred.promise;
 }
 
-function testToggleTools() {
-  let toolNodes = panelWin.document.querySelectorAll("#default-tools-box > checkbox:not([unsupported])");
-  let enabledTools = Array.prototype.filter.call(toolNodes, node => node.checked);
+function* testToggleTools() {
+  let toolNodes = panelWin.document.querySelectorAll("#default-tools-box > checkbox:not([unsupported]), #additional-tools-box > checkbox:not([unsupported])");
+  let enabledTools = [...toolNodes].filter(node => node.checked);
 
-  let toggleableTools = gDevTools.getDefaultTools().filter(tool => tool.visibilityswitch);
+  let toggleableTools = gDevTools.getDefaultTools().filter(tool => {
+    return tool.visibilityswitch;
+  }).concat(gDevTools.getAdditionalTools());
+
   for (let node of toolNodes) {
     let id = node.getAttribute("id");
     ok (toggleableTools.some(tool => tool.id === id),
       "There should be a toggle checkbox for: " + id);
   }
 
   // Store modified pref names so that they can be cleared on error.
   for (let tool of toggleableTools) {
     let pref = tool.visibilityswitch;
     modifiedPrefs.push(pref);
   }
 
   // Toggle each tool
-  let p = promise.resolve();
   for (let node of toolNodes) {
-    p = p.then(toggleTool.bind(null, node));
+    yield toggleTool(node);
   }
   // Toggle again to reset tool enablement state
   for (let node of toolNodes) {
-    p = p.then(toggleTool.bind(null, node));
+    yield toggleTool(node);
   }
 
   // Test that a tool can still be added when no tabs are present:
   // Disable all tools
   for (let node of enabledTools) {
-    p = p.then(toggleTool.bind(null, node));
+    yield toggleTool(node);
   }
   // Re-enable the tools which are enabled by default
   for (let node of enabledTools) {
-    p = p.then(toggleTool.bind(null, node));
+    yield toggleTool(node);
   }
 
   // Toggle first, middle, and last tools to ensure that toolbox tabs are
   // inserted in order
   let firstTool  = toolNodes[0],
       middleTool = toolNodes[(toolNodes.length / 2) | 0],
       lastTool   = toolNodes[toolNodes.length - 1];
 
-  p = p.then(toggleTool.bind(null, firstTool))
-       .then(toggleTool.bind(null, firstTool))
-       .then(toggleTool.bind(null, middleTool))
-       .then(toggleTool.bind(null, middleTool))
-       .then(toggleTool.bind(null, lastTool))
-       .then(toggleTool.bind(null, lastTool));
-
-  return p;
+  yield toggleTool(firstTool);
+  yield toggleTool(firstTool);
+  yield toggleTool(middleTool);
+  yield toggleTool(middleTool);
+  yield toggleTool(lastTool);
+  yield toggleTool(lastTool);
 }
 
-function toggleTool(node) {
+function* toggleTool(node) {
   let deferred = promise.defer();
 
   let toolId = node.getAttribute("id");
+  let onRegistrationChange;
   if (node.checked) {
     gDevTools.once("tool-unregistered", checkUnregistered.bind(null, toolId, deferred));
   } else {
     gDevTools.once("tool-registered", checkRegistered.bind(null, toolId, deferred));
   }
   node.scrollIntoView();
   EventUtils.synthesizeMouseAtCenter(node, {}, panelWin);
 
-  return deferred.promise;
+  yield deferred.promise;
 }
 
 function checkUnregistered(toolId, deferred, event, data) {
   if (data.id == toolId) {
     ok(true, "Correct tool removed");
     // checking tab on the toolbox
     ok(!doc.getElementById("toolbox-tab-" + toolId), "Tab removed for " + toolId);
   } else {
@@ -244,37 +259,17 @@ function GetPref(name) {
       return Services.prefs.getIntPref(name);
     case Services.prefs.PREF_BOOL:
       return Services.prefs.getBoolPref(name);
     default:
       throw new Error("Unknown type");
   }
 }
 
-function SetPref(name, value) {
-  let type = Services.prefs.getPrefType(name);
-  switch (type) {
-    case Services.prefs.PREF_STRING:
-      return Services.prefs.setCharPref(name, value);
-    case Services.prefs.PREF_INT:
-      return Services.prefs.setIntPref(name, value);
-    case Services.prefs.PREF_BOOL:
-      return Services.prefs.setBoolPref(name, value);
-    default:
-      throw new Error("Unknown type");
+function* cleanup() {
+  gDevTools.unregisterTool("test-tool");
+  yield toolbox.destroy();
+  gBrowser.removeCurrentTab();
+  for (let pref of modifiedPrefs) {
+    Services.prefs.clearUserPref(pref);
   }
+  toolbox = doc = panelWin = modifiedPrefs = null;
 }
-
-function cleanup() {
-  toolbox.destroy().then(function() {
-    gBrowser.removeCurrentTab();
-    for (let pref of modifiedPrefs) {
-      Services.prefs.clearUserPref(pref);
-    }
-    toolbox = doc = panelWin = modifiedPrefs = null;
-    finish();
-  });
-}
-
-function errorHandler(error) {
-  ok(false, "Unexpected error: " + error);
-  cleanup();
-}
diff --git a/browser/devtools/framework/toolbox-options.js b/browser/devtools/framework/toolbox-options.js
--- a/browser/devtools/framework/toolbox-options.js
+++ b/browser/devtools/framework/toolbox-options.js
@@ -163,17 +163,17 @@ OptionsPanel.prototype = {
     enabledToolbarButtonsBox.textContent = "";
 
     let toggleableButtons = this.toolbox.toolboxButtons;
     let setToolboxButtonsVisibility =
       this.toolbox.setToolboxButtonsVisibility.bind(this.toolbox);
 
     let onCheckboxClick = (checkbox) => {
       let toolDefinition = toggleableButtons.filter(tool => tool.id === checkbox.id)[0];
-      SetPref(toolDefinition.visibilityswitch, checkbox.checked);
+      Services.prefs.setBoolPref(toolDefinition.visibilityswitch, checkbox.checked);
       setToolboxButtonsVisibility();
     };
 
     let createCommandCheckbox = tool => {
       let checkbox = this.panelDoc.createElement("checkbox");
       checkbox.setAttribute("id", tool.id);
       checkbox.setAttribute("label", tool.label);
       checkbox.setAttribute("checked", InfallibleGetBoolPref(tool.visibilityswitch));
@@ -193,17 +193,17 @@ OptionsPanel.prototype = {
     let atleastOneToolNotSupported = false;
 
     defaultToolsBox.textContent = "";
     additionalToolsBox.textContent = "";
 
     let onCheckboxClick = function(id) {
       let toolDefinition = gDevTools._tools.get(id);
       // Set the kill switch pref boolean to true
-      SetPref(toolDefinition.visibilityswitch, this.checked);
+      Services.prefs.setBoolPref(toolDefinition.visibilityswitch, this.checked);
       if (this.checked) {
         gDevTools.emit("tool-registered", id);
       }
       else {
         gDevTools.emit("tool-unregistered", toolDefinition);
       }
     };
 
