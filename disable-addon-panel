# HG changeset patch
# Parent d3142f80fcf9273e5a6ff4120d1a3db00d4ca030
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 1060945 - Make it possible to enable/disable a devtools panel even if its visibilityswitch pref doesn't exist;r=pbrosset

diff --git a/browser/devtools/framework/test/browser_toolbox_options.js b/browser/devtools/framework/test/browser_toolbox_options.js
--- a/browser/devtools/framework/test/browser_toolbox_options.js
+++ b/browser/devtools/framework/test/browser_toolbox_options.js
@@ -1,26 +1,45 @@
 /* Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/ */
 
 let doc = null, toolbox = null, panelWin = null, modifiedPrefs = [];
 
 function test() {
   const URL = "data:text/html;charset=utf8,test for dynamically registering and unregistering tools";
   Task.spawn(function* () {
+    registerNewTool();
     let tab = yield addTab(URL);
     let target = TargetFactory.forTab(tab);
     let toolbox = yield gDevTools.showToolbox(target);
     yield testSelectTool(toolbox);
     yield testOptionsShortcut();
     yield testOptions();
     yield testToggleTools();
   }).then(cleanup, errorHandler);
 }
 
+function registerNewTool() {
+  let toolDefinition = {
+    id: "test-tool",
+    isTargetSupported: function() true,
+    visibilityswitch: "devtools.test-tool.enabled",
+    url: "about:blank",
+    label: "someLabel"
+  };
+
+  ok(gDevTools, "gDevTools exists");
+  ok(!gDevTools.getToolDefinitionMap().has("test-tool"),
+    "The tool is not registered");
+
+  gDevTools.registerTool(toolDefinition);
+  ok(gDevTools.getToolDefinitionMap().has("test-tool"),
+    "The tool is registered");
+}
+
 function testSelectTool(aToolbox) {
   let deferred = promise.defer();
 
   toolbox = aToolbox;
   doc = toolbox.doc;
   toolbox.once("options-selected", () => {
     ok(true, "Toolbox selected via selectTool method");
     deferred.resolve();
@@ -126,20 +145,23 @@ function testMouseClick(node, prefValue)
     info("Click event synthesized for pref " + pref);
     EventUtils.synthesizeMouseAtCenter(node, {}, panelWin);
   });
 
   return deferred.promise;
 }
 
 function testToggleTools() {
-  let toolNodes = panelWin.document.querySelectorAll("#default-tools-box > checkbox:not([unsupported])");
-  let enabledTools = Array.prototype.filter.call(toolNodes, node => node.checked);
+  let toolNodes = panelWin.document.querySelectorAll("#default-tools-box > checkbox:not([unsupported]), #additional-tools-box > checkbox:not([unsupported])");
+  let enabledTools = [...toolNodes].filter(node => node.checked);
 
-  let toggleableTools = gDevTools.getDefaultTools().filter(tool => tool.visibilityswitch);
+  let toggleableTools = gDevTools.getDefaultTools().filter(tool => {
+    return tool.visibilityswitch;
+  }).concat(gDevTools.getAdditionalTools());
+
   for (let node of toolNodes) {
     let id = node.getAttribute("id");
     ok (toggleableTools.some(tool => tool.id === id),
       "There should be a toggle checkbox for: " + id);
   }
 
   // Store modified pref names so that they can be cleared on error.
   for (let tool of toggleableTools) {
@@ -259,16 +281,17 @@ function SetPref(name, value) {
     case Services.prefs.PREF_BOOL:
       return Services.prefs.setBoolPref(name, value);
     default:
       throw new Error("Unknown type");
   }
 }
 
 function cleanup() {
+  gDevTools.unregisterTool("test-tool");
   toolbox.destroy().then(function() {
     gBrowser.removeCurrentTab();
     for (let pref of modifiedPrefs) {
       Services.prefs.clearUserPref(pref);
     }
     toolbox = doc = panelWin = modifiedPrefs = null;
     finish();
   });
diff --git a/browser/devtools/framework/toolbox-options.js b/browser/devtools/framework/toolbox-options.js
--- a/browser/devtools/framework/toolbox-options.js
+++ b/browser/devtools/framework/toolbox-options.js
@@ -163,17 +163,17 @@ OptionsPanel.prototype = {
     enabledToolbarButtonsBox.textContent = "";
 
     let toggleableButtons = this.toolbox.toolboxButtons;
     let setToolboxButtonsVisibility =
       this.toolbox.setToolboxButtonsVisibility.bind(this.toolbox);
 
     let onCheckboxClick = (checkbox) => {
       let toolDefinition = toggleableButtons.filter(tool => tool.id === checkbox.id)[0];
-      SetPref(toolDefinition.visibilityswitch, checkbox.checked);
+      Services.prefs.setBoolPref(toolDefinition.visibilityswitch, checkbox.checked);
       setToolboxButtonsVisibility();
     };
 
     let createCommandCheckbox = tool => {
       let checkbox = this.panelDoc.createElement("checkbox");
       checkbox.setAttribute("id", tool.id);
       checkbox.setAttribute("label", tool.label);
       checkbox.setAttribute("checked", InfallibleGetBoolPref(tool.visibilityswitch));
@@ -193,17 +193,17 @@ OptionsPanel.prototype = {
     let atleastOneToolNotSupported = false;
 
     defaultToolsBox.textContent = "";
     additionalToolsBox.textContent = "";
 
     let onCheckboxClick = function(id) {
       let toolDefinition = gDevTools._tools.get(id);
       // Set the kill switch pref boolean to true
-      SetPref(toolDefinition.visibilityswitch, this.checked);
+      Services.prefs.setBoolPref(toolDefinition.visibilityswitch, this.checked);
       if (this.checked) {
         gDevTools.emit("tool-registered", id);
       }
       else {
         gDevTools.emit("tool-unregistered", toolDefinition);
       }
     };
 
