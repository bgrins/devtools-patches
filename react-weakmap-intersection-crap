# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  6803fc98a43c8236dcb29cc326fbbf09e7915ab8

diff --git a/devtools/client/webconsole/new-console-output/components/console-output.js b/devtools/client/webconsole/new-console-output/components/console-output.js
--- a/devtools/client/webconsole/new-console-output/components/console-output.js
+++ b/devtools/client/webconsole/new-console-output/components/console-output.js
@@ -86,29 +86,31 @@ const ConsoleOutput = createClass({
     } = this.props;
 
     let messageNodes = messages.map((message) => {
       const parentGroups = message.groupId ? (
         (groups.get(message.groupId) || [])
           .concat([message.groupId])
       ) : [];
 
-      return (
+      const container =
         MessageContainer({
           dispatch,
           message,
+          empty: true,
           key: message.id,
           serviceContainer,
           open: messagesUi.includes(message.id),
           tableData: messagesTableData.get(message.id),
           autoscroll,
           indent: parentGroups.length,
           timestampsVisible,
-        })
-      );
+        });
+
+      return container;
     });
 
     return (
       dom.div({
         className: "webconsole-output",
         onContextMenu: this.onContextMenu,
         ref: node => {
           this.outputNode = node;
diff --git a/devtools/client/webconsole/new-console-output/components/message-container.js b/devtools/client/webconsole/new-console-output/components/message-container.js
--- a/devtools/client/webconsole/new-console-output/components/message-container.js
+++ b/devtools/client/webconsole/new-console-output/components/message-container.js
@@ -7,31 +7,57 @@
 "use strict";
 
 // React & Redux
 const {
   createClass,
 
   PropTypes
 } = require("devtools/client/shared/vendor/react");
+const ReactDOM = require("devtools/client/shared/vendor/react-dom");
+
 
 const {
   MESSAGE_SOURCE,
   MESSAGE_TYPE
 } = require("devtools/client/webconsole/new-console-output/constants");
 
 const componentMap = new Map([
   ["ConsoleApiCall", require("./message-types/console-api-call")],
   ["ConsoleCommand", require("./message-types/console-command")],
   ["DefaultRenderer", require("./message-types/default-renderer")],
   ["EvaluationResult", require("./message-types/evaluation-result")],
   ["NetworkEventMessage", require("./message-types/network-event-message")],
   ["PageError", require("./message-types/page-error")]
 ]);
 
+const domToComponent = new WeakMap();
+
+var II;
+window.onload = function(){
+  console.log(document.body, document.querySelector('#output-container'));
+  var options = {
+    root: document.querySelector('#output-container'),
+    rootMargin: '0px',
+    threshold: 1.0
+  }
+
+  II = new IntersectionObserver(function(entries) {
+
+    entries.forEach(function(entry) {
+      var component = domToComponent.get(entry.target);
+      console.log(component);
+      component.setState({
+        visible: true,
+      });
+      component.forceUpdate();
+    });
+    console.log("Observed", arguments);
+  }, options);
+};
 const MessageContainer = createClass({
   displayName: "MessageContainer",
 
   propTypes: {
     message: PropTypes.object.isRequired,
     open: PropTypes.bool.isRequired,
     serviceContainer: PropTypes.object.isRequired,
     autoscroll: PropTypes.bool.isRequired,
@@ -42,17 +68,24 @@ const MessageContainer = createClass({
 
   getDefaultProps: function () {
     return {
       open: false,
       indent: 0,
     };
   },
 
+  componentDidMount() {
+    II.observe(ReactDOM.findDOMNode(this));
+    domToComponent.set(ReactDOM.findDOMNode(this), this);
+  },
+
   shouldComponentUpdate(nextProps, nextState) {
+    return true;
+    const emptyChanged = this.props.empty !== nextProps.empty;
     const repeatChanged = this.props.message.repeat !== nextProps.message.repeat;
     const openChanged = this.props.open !== nextProps.open;
     const tableDataChanged = this.props.tableData !== nextProps.tableData;
     const responseChanged = this.props.message.response !== nextProps.message.response;
     const totalTimeChanged = this.props.message.totalTime !== nextProps.message.totalTime;
     const timestampVisibleChanged =
       this.props.timestampsVisible !== nextProps.timestampsVisible;
 
@@ -61,16 +94,20 @@ const MessageContainer = createClass({
       || tableDataChanged
       || responseChanged
       || totalTimeChanged
       || timestampVisibleChanged;
   },
 
   render() {
     const { message } = this.props;
+    const visible = this.state && this.state.visible;
+    if (!visible) {
+      return componentMap.get("DefaultRenderer")(this.props);
+    }
 
     let MessageComponent = getMessageComponent(message);
     return MessageComponent(this.props);
   }
 });
 
 function getMessageComponent(message) {
   switch (message.source) {
diff --git a/devtools/client/webconsole/new-console-output/selectors/messages.js b/devtools/client/webconsole/new-console-output/selectors/messages.js
--- a/devtools/client/webconsole/new-console-output/selectors/messages.js
+++ b/devtools/client/webconsole/new-console-output/selectors/messages.js
@@ -17,33 +17,33 @@ const {
 function getAllMessages(state) {
   let messages = getAllMessagesById(state);
   let logLimit = getLogLimit(state);
   let filters = getAllFilters(state);
 
   let groups = getAllGroupsById(state);
   let messagesUI = getAllMessagesUiById(state);
 
-  return prune(
-    messages.filter(message => {
+  // return prune(
+  return messages.filter(message => {
       return (
         isInOpenedGroup(message, groups, messagesUI)
         && (
           isUnfilterable(message)
           || (
             matchLevelFilters(message, filters)
             && matchCssFilters(message, filters)
             && matchNetworkFilters(message, filters)
             && matchSearchFilters(message, filters)
           )
         )
       );
-    }),
-    logLimit
-  );
+    });
+    // logLimit
+  // );
 }
 
 function getAllMessagesById(state) {
   return state.messages.messagesById;
 }
 
 function getAllMessagesUiById(state) {
   return state.messages.messagesUiById;
