# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  981f4ef374c3b2a806c10dcb57dc3ccd034d5ca7
Bug 1154874 - Scaffold for debugger stepping test

diff --git a/testing/talos/talos/tests/devtools/addon/content/damp.html b/testing/talos/talos/tests/devtools/addon/content/damp.html
--- a/testing/talos/talos/tests/devtools/addon/content/damp.html
+++ b/testing/talos/talos/tests/devtools/addon/content/damp.html
@@ -5,23 +5,24 @@
 
 <script type="application/x-javascript">
 // Empty subtests interpreted as all subtests, since otherwise meaningless.
 var config = {subtests: [], repeat: 1};
 var defaultConfig = {
   repeat: 1,
   rest: 100,
   subtests: {
-    webconsoleOpen: true,
-    inspectorOpen: true,
-    debuggerOpen: true,
-    styleEditorOpen: true,
-    performanceOpen: true,
-    netmonitorOpen: true,
-    saveAndReadHeapSnapshot: true,
+    webconsoleOpen: false,
+    inspectorOpen: false,
+    debuggerOpen: false,
+    styleEditorOpen: false,
+    performanceOpen: false,
+    netmonitorOpen: false,
+    saveAndReadHeapSnapshot: false,
+    debuggerStepping: true,
   }
 };
 
 var testsInfo = {
   webconsoleOpen: "Measure open/close toolbox on webconsole panel",
   inspectorOpen: "Measure open/close toolbox on inspector panel",
   debuggerOpen: "Measure open/close toolbox on debugger panel",
   styleEditorOpen: "Measure open/close toolbox on style editor panel",
@@ -53,16 +54,17 @@ function updateConfig() {
 <div id="hide-during-run">
    Visit <a href="https://wiki.mozilla.org/Buildbot/Talos/Tests#DAMP">talos/TART</a> for detailed info.<br/>
   <ul>
     <li><b>If you just opened the browser</b> - give Firefox few seconds to settle down before testing.</li>
   </ul>
 
 Utilities:
   <a href="pages/simple.html">simple page</a>&nbsp;&nbsp;&nbsp;
+  <a href="pages/stepping.html">stepping page</a>&nbsp;&nbsp;&nbsp;
   <a href="http://localhost/tests/tp5n/bild.de/www.bild.de/index.html">complicated page</a>&nbsp;&nbsp;&nbsp;
 <br/><br/>
 <b>Configure DAMP</b> (CTRL-F5 to reset to talos defaults) <button type="button" onclick="deselectAll()">Deselect all tests</button><br/>
 <script>
   for (var test in defaultConfig.subtests) {
     document.write('<input type="checkbox" id="subtest-' + test + '" ' + (defaultConfig.subtests[test] ? "" : "un") + 'checked>'
                   + test + '</input>'
                   + '<span style="color:grey">&nbsp;&nbsp;&nbsp;' + testsInfo[test] + '</span>'
diff --git a/testing/talos/talos/tests/devtools/addon/content/damp.js b/testing/talos/talos/tests/devtools/addon/content/damp.js
--- a/testing/talos/talos/tests/devtools/addon/content/damp.js
+++ b/testing/talos/talos/tests/devtools/addon/content/damp.js
@@ -7,16 +7,17 @@ const { getActiveTab } = devtools.requir
 const { getMostRecentBrowserWindow } = devtools.require("sdk/window/utils");
 const ThreadSafeChromeUtils = devtools.require("ThreadSafeChromeUtils");
 const {Task} = Cu.import("resource://gre/modules/Task.jsm", {});
 
 const webserver = Services.prefs.getCharPref("addon.test.damp.webserver");
 
 const SIMPLE_URL = "chrome://damp/content/pages/simple.html";
 const COMPLICATED_URL = webserver + "/tests/tp5n/bild.de/www.bild.de/index.html";
+const STEPPING_URL = "chrome://damp/content/pages/stepping.html"
 
 function Damp() {
   // Path to the temp file where the heap snapshot file is saved. Set by
   // saveHeapSnapshot and read by readHeapSnapshot.
   this._heapSnapshotFilePath = null;
   // HeapSnapshot instance. Set by readHeapSnapshot, used by takeCensus.
   this._snapshot = null;
 }
@@ -41,50 +42,58 @@ Damp.prototype = {
 
   reloadPage: function() {
     let startReloadTimestamp = performance.now();
     return new Promise((resolve, reject) => {
       let browser = gBrowser.selectedBrowser;
       let self = this;
       browser.addEventListener("load", function onload() {
         browser.removeEventListener("load", onload, true);
-        let stopReloadTimestamp = performance.now();
-        resolve({
+        // Only record results if a name was passed
+        if (name) {
+          let stopReloadTimestamp = performance.now();
+          resolve({
           time: stopReloadTimestamp - startReloadTimestamp
+        }
         });
       }, true);
       browser.reload();
     });
   },
 
   openToolbox: function (tool = "webconsole") {
     let tab = getActiveTab(getMostRecentBrowserWindow());
     let target = devtools.TargetFactory.forTab(tab);
     let startRecordTimestamp = performance.now();
     let showPromise = gDevTools.showToolbox(target, tool);
 
     return showPromise.then(toolbox => {
-      let stopRecordTimestamp = performance.now();
-      return {
+      // Only record results if a name was passed
+      if (name) {
+        let stopRecordTimestamp = performance.now();
+        return {
         toolbox,
-        time: stopRecordTimestamp - startRecordTimestamp
+        time: stopRecordTimestamp - startRecordTimestamp      }
       };
     });
   },
 
   closeToolbox: function() {
     let tab = getActiveTab(getMostRecentBrowserWindow());
     let target = devtools.TargetFactory.forTab(tab);
     let startRecordTimestamp = performance.now();
     let closePromise = gDevTools.closeToolbox(target);
     return closePromise.then(() => {
-      let stopRecordTimestamp = performance.now();
-      return {
+      // Only record results if a name was passed
+      if (name) {
+        let stopRecordTimestamp = performance.now();
+        return {
         time: stopRecordTimestamp - startRecordTimestamp
       };
+      }
     });
   },
 
   saveHeapSnapshot: function(label) {
     let tab = getActiveTab(getMostRecentBrowserWindow());
     let target = devtools.TargetFactory.forTab(tab);
     let toolbox = gDevTools.getToolbox(target);
     let panel = toolbox.getCurrentPanel();
@@ -107,16 +116,52 @@ Damp.prototype = {
     let end = performance.now();
     this._results.push({
       name: label + ".readHeapSnapshot",
       value: end - start
     });
     return Promise.resolve();
   },
 
+  _getDebuggerSteppingTest: Task.async(function*() {
+    yield this.testSetup(STEPPING_URL);
+    let toolbox = yield this.openToolbox(null, "jsdebugger");
+    let stepCounter = 10;
+    let panelWin = toolbox.getPanel("jsdebugger").panelWin;
+    let gStepInbutton = panelWin.document.getElementById("step-in");
+
+    // Pause the page by clicking a button that triggers a debugger; statement.
+    // Doing it async because it's pausing this function for some reason.
+    setTimeout(() => { content.document.getElementById("start").click(); }, 0);
+    yield new Promise(resolve => {
+      panelWin.gThreadClient.addOneTimeListener("paused", resolve);
+    });
+
+    let start = performance.now();
+    for (let i = 0; i < stepCounter; i++) {
+      yield new Promise(resolve => {
+        panelWin.gThreadClient.addOneTimeListener("paused", function(type, packet) {
+          resolve(packet);
+        });
+        gStepInbutton.click();
+      });
+    }
+
+    let end = performance.now();
+
+    // Return "average milliseconds taken per 'step into' command"
+    this._results.push({
+      name: "debuggerstep",
+      value: ( end - start ) / stepCounter
+    });
+
+    yield this.closeToolbox(null);
+    yield this.testTeardown();
+  }),
+
   takeCensus: function(label) {
     let start = performance.now();
 
     this._snapshot.takeCensus({
       breakdown: {
         by: "coarseType",
         objects: {
           by: "objectClass",
@@ -265,16 +310,17 @@ Damp.prototype = {
   _nextCommandIx: 0,
   _commands: [],
   _onSequenceComplete: 0,
   _nextCommand: function() {
     if (this._nextCommandIx >= this._commands.length) {
       this._onSequenceComplete();
       return;
     }
+    console.log(this._nextCommandIx, this._commands.length, this._commands, this._commands[this._nextCommandIx+1])
     this._commands[this._nextCommandIx++].call(this);
   },
   // Each command at the array a function which must call nextCommand once it's done
   _doSequence: function(commands, onComplete) {
     this._commands = commands;
     this._onSequenceComplete = onComplete;
     this._results = [];
     this._nextCommandIx = 0;
@@ -342,11 +388,12 @@ Damp.prototype = {
     this._dampTab = this._win.gBrowser.selectedTab;
     this._win.gBrowser.selectedBrowser.focus(); // Unfocus the URL bar to avoid caret blink
 
     Profiler.mark("DAMP - start", true);
 
     let tests = [];
     tests = tests.concat(this._getToolLoadingTests(SIMPLE_URL, "simple"));
     tests = tests.concat(this._getToolLoadingTests(COMPLICATED_URL, "complicated"));
+    tests = tests.concat(this._getDebuggerSteppingTest);
     this._doSequence(tests, this._doneInternal);
   }
 }
diff --git a/testing/talos/talos/tests/devtools/addon/content/pages/stepping.html b/testing/talos/talos/tests/devtools/addon/content/pages/stepping.html
new file mode 100644
--- /dev/null
+++ b/testing/talos/talos/tests/devtools/addon/content/pages/stepping.html
@@ -0,0 +1,50 @@
+<!-- Any copyright is dedicated to the Public Domain.
+     http://creativecommons.org/publicdomain/zero/1.0/ -->
+<!doctype html>
+
+<html>
+  <head>
+    <meta charset="utf-8"/>
+    <title>Debugger test page</title>
+  </head>
+
+  <body>
+    <button id="start">Start!</button>
+
+    <script type="text/javascript">
+      function normal(aArg) {
+        debugger;
+        var r = 10;
+        var a = squareAndOne(r);
+        var b = squareUntil(r, 99999999999); //recurses 3 times, returns on 4th call
+        var c = addUntil(r, 5, 1050); // recurses 208 times and returns on the 209th call
+        return a + b + c;
+
+      }
+
+      function squareAndOne(arg){
+        return (arg * arg) + 1;
+      }
+      function squareUntil(arg, limit){
+        if(arg * arg >= limit){
+          return arg * arg;
+        }else{
+          return squareUntil(arg * arg, limit);
+        }
+      }
+
+      function addUntil(arg1, arg2, limit){
+        if(arg1 + arg2 > limit){
+          return arg1 + arg2;
+        }else{
+          return addUntil(arg1 + arg2, arg2, limit);
+        }
+      }
+
+      var normalBtn = document.getElementById("start");
+      normalBtn.addEventListener("click", normal, false);
+
+    </script>
+  </body>
+
+</html>
