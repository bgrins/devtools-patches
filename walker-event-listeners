# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  a2a37ed6a351c44291d8824d58fe7415e3a7f065
Bug 1157469 - Event listeners bubble doesn't get updated when a listener is added after it's loaded in the markup view

diff --git a/toolkit/devtools/server/actors/inspector.js b/toolkit/devtools/server/actors/inspector.js
--- a/toolkit/devtools/server/actors/inspector.js
+++ b/toolkit/devtools/server/actors/inspector.js
@@ -1166,16 +1166,21 @@ var WalkerActor = protocol.ActorClass({
     this.tabActor = tabActor;
     this.rootWin = tabActor.window;
     this.rootDoc = this.rootWin.document;
     this._refMap = new Map();
     this._pendingMutations = [];
     this._activePseudoClassLocks = new Set();
     this.showAllAnonymousContent = options.showAllAnonymousContent;
 
+    console.log("Creating walker actor");
+
+    this._onEventListenerChange = this._onEventListenerChange.bind(this);
+    eventListenerService.addListenerChangeListener(this._onEventListenerChange);
+
     this.layoutHelpers = new LayoutHelpers(this.rootWin);
 
     // Nodes which have been removed from the client's known
     // ownership tree are considered "orphaned", and stored in
     // this set.
     this._orphaned = new Set();
 
     // The client can tell the walker that it is interested in a node
@@ -1194,16 +1199,34 @@ var WalkerActor = protocol.ActorClass({
     // managed.
     this.rootNode = this.document();
 
     this.reflowObserver = getLayoutChangesObserver(this.tabActor);
     this._onReflows = this._onReflows.bind(this);
     this.reflowObserver.on("reflows", this._onReflows);
   },
 
+  // Callback for eventListenerService.addListenerChangeListener
+  _onEventListenerChange: function(array) {
+    var e = array.enumerate();
+    while (e.hasMoreElements()) {
+      var current = e.getNext();
+      if (this._refMap.has(current)) {
+        console.log("Found relevant change", current, this._refMap.get(current));
+        let actor = this._refMap.get(current);
+        let mutation = {
+          type: "events",
+          target: actor.actorID,
+          numChildren: actor.numChildren
+        };
+        this.queueMutation(mutation);
+      }
+    }
+  },
+
   // Returns the JSON representation of this object over the wire.
   form: function() {
     return {
       actor: this.actorID,
       root: this.rootNode.form()
     }
   },
 
@@ -1216,16 +1239,18 @@ var WalkerActor = protocol.ActorClass({
     let nodeFilter = this.showAllAnonymousContent ? allAnonymousContentTreeWalkerFilter : standardTreeWalkerFilter;
     return new DocumentWalker(node, this.rootWin, whatToShow, nodeFilter);
   },
 
   destroy: function() {
     try {
       this._destroyed = true;
 
+      eventListenerService.removeListenerChangeListener(this._onEventListenerChange);
+
       this.clearPseudoClassLocks();
       this._activePseudoClassLocks = null;
 
       this._hoveredNode = null;
       this.rootDoc = null;
 
       this.reflowObserver.off("reflows", this._onReflows);
       this.reflowObserver = null;
