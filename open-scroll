# HG changeset patch
# Parent 34babb974209a69d1280210b7d16b00fa84f0309
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 988102 - Opening inspector scrolls the content page all the way to the top;r=mratcliffe

diff --git a/browser/devtools/markupview/markup-view.js b/browser/devtools/markupview/markup-view.js
--- a/browser/devtools/markupview/markup-view.js
+++ b/browser/devtools/markupview/markup-view.js
@@ -267,41 +267,42 @@ MarkupView.prototype = {
    * the default node)
    * - if it's "navigateaway" (since the page is being navigated away from)
    * - if it's "test" (this is a special case for mochitest. In tests, we often
    * need to select elements but don't necessarily want the highlighter to come
    * and go after a delay as this might break test scenarios)
    * We also do not want to start a brief highlight timeout if the node is already
    * being hovered over, since in that case it will already be highlighted.
    */
-  _shouldNewSelectionBeHighlighted: function() {
-    let reason = this._inspector.selection.reason;
+  _shouldNewSelectionBeHighlighted: function(selection) {
+    let reason = selection.reason;
     let unwantedReasons = ["inspector-open", "navigateaway", "test"];
-    let isHighlitNode = this._hoveredNode === this._inspector.selection.nodeFront;
+    let isHighlitNode = this._hoveredNode === selection.nodeFront;
     return !isHighlitNode && reason && unwantedReasons.indexOf(reason) === -1;
   },
 
   /**
    * Highlight the inspector selected node.
    */
   _onNewSelection: function() {
     let selection = this._inspector.selection;
 
     this.htmlEditor.hide();
     let done = this._inspector.updating("markup-view");
     if (selection.isNode()) {
-      if (this._shouldNewSelectionBeHighlighted()) {
+      if (this._shouldNewSelectionBeHighlighted(selection)) {
         this._brieflyShowBoxModel(selection.nodeFront, {
           scrollIntoView: true
         });
       }
 
+      let reason = selection.reason;
       this.showNode(selection.nodeFront, true).then(() => {
-        if (selection.reason !== "treepanel") {
-          this.markNodeAsSelected(selection.nodeFront);
+        if (reason !== "treepanel") {
+          this.markNodeAsSelected(selection.nodeFront, reason);
         }
         done();
       });
     } else {
       this.unmarkSelectedNode();
       done();
     }
   },
