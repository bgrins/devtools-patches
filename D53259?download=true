diff --git a/dom/base/Document.h b/dom/base/Document.h
--- a/dom/base/Document.h
+++ b/dom/base/Document.h
@@ -5483,12 +5483,6 @@
     nsIURI* aDocumentURI, nsIURI* aBaseURI, nsIPrincipal* aPrincipal,
     bool aLoadedAsData, nsIGlobalObject* aEventObject, DocumentFlavor aFlavor);
 
-// This is used only for xbl documents created from the startup cache.
-// Non-cached documents are created in the same manner as xml documents.
-nsresult NS_NewXBLDocument(mozilla::dom::Document** aInstancePtrResult,
-                           nsIURI* aDocumentURI, nsIURI* aBaseURI,
-                           nsIPrincipal* aPrincipal);
-
 nsresult NS_NewPluginDocument(mozilla::dom::Document** aInstancePtrResult);
 
 inline mozilla::dom::Document* nsINode::GetOwnerDocument() const {
diff --git a/dom/xml/XMLDocument.cpp b/dom/xml/XMLDocument.cpp
--- a/dom/xml/XMLDocument.cpp
+++ b/dom/xml/XMLDocument.cpp
@@ -196,27 +196,6 @@
   return NS_OK;
 }
 
-nsresult NS_NewXBLDocument(Document** aInstancePtrResult, nsIURI* aDocumentURI,
-                           nsIURI* aBaseURI, nsIPrincipal* aPrincipal) {
-  nsresult rv = NS_NewDOMDocument(
-      aInstancePtrResult, NS_LITERAL_STRING("http://www.mozilla.org/xbl"),
-      NS_LITERAL_STRING("bindings"), nullptr, aDocumentURI, aBaseURI,
-      aPrincipal, false, nullptr, DocumentFlavorLegacyGuess);
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  Document* doc = *aInstancePtrResult;
-
-  // XBL documents must allow XUL and XBL elements in them but the usual check
-  // only checks if the document is loaded in the system principal which is
-  // sometimes not the case.
-  doc->ForceEnableXULXBL();
-
-  doc->SetLoadedAsInteractiveData(true);
-  doc->SetReadyStateInternal(Document::READYSTATE_COMPLETE);
-
-  return NS_OK;
-}
-
 namespace mozilla {
 namespace dom {
 

