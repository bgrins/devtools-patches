# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  df1cc95342be524ea4eb32f0ece1fa73d12cab14
Bug 1559192 - Example using display: grid and children in the same grid area.

This has an issue where

diff --git a/toolkit/content/widgets/general.js b/toolkit/content/widgets/general.js
--- a/toolkit/content/widgets/general.js
+++ b/toolkit/content/widgets/general.js
@@ -2,51 +2,90 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 // This is loaded into chrome windows with the subscript loader. Wrap in
 // a block to prevent accidentally leaking globals onto `window`.
 {
-  class MozDeck extends MozXULElement {
+  MozElements.MozDeck = class MozDeck extends MozXULElement {
+    constructor() {
+      super();
+      this._selectedPanel = null;
+
+      this.observer = new MutationObserver(() => {
+        if (this.selectedPanel.parentNode == this) {
+          this.selectedPanel = this.selectedPanel;
+        } else {
+          this.selectedIndex = "0";
+        }
+      });
+    }
+
+    connectedCallback() {
+      if (this.delayConnectedCallback()) {
+        return;
+      }
+
+      this.selectedIndex = this.selectedIndex;
+      this.observer.observe(this, {
+        childList: true,
+      });
+    }
+
+    disconnectedCallback() {
+      this.observer.disconnect();
+    }
+
     set selectedIndex(val) {
-      if (this.selectedIndex == val) {
+      let prevSelected = this._selectedPanel;
+      let selected = this.children[val];
+      if (prevSelected != selected) {
+        if (prevSelected) {
+          prevSelected.removeAttribute("selected");
+        }
+        if (selected) {
+          selected.setAttribute("selected", "true");
+        }
+        this._selectedPanel = selected;
+      } else if (this.selectedIndex == val) {
         return val;
       }
+
       this.setAttribute("selectedIndex", val);
-      var event = document.createEvent("Events");
+      let event = document.createEvent("Events");
       event.initEvent("select", true, true);
       this.dispatchEvent(event);
       return val;
     }
 
     get selectedIndex() {
       return this.getAttribute("selectedIndex") || "0";
     }
 
     set selectedPanel(val) {
       var selectedIndex = -1;
       for (
-        var panel = val;
+        let panel = val;
         panel != null;
         panel = panel.previousElementSibling
       ) {
         ++selectedIndex;
       }
       this.selectedIndex = selectedIndex;
       return val;
     }
 
     get selectedPanel() {
-      return this.children[this.selectedIndex];
+      return this._selectedPanel;
     }
-  }
+  };
 
-  customElements.define("deck", MozDeck);
+  customElements.define("deck", MozElements.MozDeck);
 
   class MozDropmarker extends MozXULElement {
     constructor() {
       super();
       let shadowRoot = this.attachShadow({ mode: "open" });
       let image = document.createXULElement("image");
       image.setAttribute("part", "icon");
       shadowRoot.appendChild(image);
diff --git a/toolkit/content/xul.css b/toolkit/content/xul.css
--- a/toolkit/content/xul.css
+++ b/toolkit/content/xul.css
@@ -389,17 +389,26 @@ tree:not([treelines="true"]) treechildre
 
 treechildren::-moz-tree-cell(ltr) {
   direction: ltr !important;
 }
 
 /********** deck & stack *********/
 
 deck {
-  display: -moz-deck;
+  display: grid;
+}
+
+deck > * {
+  inline-size: 100%;
+  grid-area: 1/1;
+}
+
+deck > *:not([selected]) {
+  visibility: hidden;
 }
 
 stack {
   display: -moz-stack;
 }
 
 /********** tabbox *********/
 
