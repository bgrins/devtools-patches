# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  03022751deb871cc5c69aed366beecda8fb581b9

diff --git a/browser/base/content/browser-contents.xml b/browser/base/content/browser-contents.xml
--- a/browser/base/content/browser-contents.xml
+++ b/browser/base/content/browser-contents.xml
@@ -11,608 +11,606 @@
 <!DOCTYPE window [
 #include browser-doctype.inc
 ]>
 
 <box xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
      xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
      xmlns:html="http://www.w3.org/1999/xhtml">
 
-  <popupset id="mainPopupSet">
-    <menupopup id="tabContextMenu"
-               onpopupshowing="if (event.target == this) TabContextMenu.updateContextMenu(this);"
-               onpopuphidden="if (event.target == this) TabContextMenu.contextTab = null;">
-      <menuitem id="context_reloadTab" label="&reloadTab.label;" accesskey="&reloadTab.accesskey;"
-                oncommand="gBrowser.reloadTab(TabContextMenu.contextTab);"/>
-      <menuitem id="context_reloadSelectedTabs" label="&reloadTabs.label;" hidden="true"
-                accesskey="&reloadTabs.accesskey;"
-                oncommand="gBrowser.reloadMultiSelectedTabs();"/>
-      <menuitem id="context_toggleMuteTab" oncommand="TabContextMenu.contextTab.toggleMuteAudio();"/>
-      <menuitem id="context_toggleMuteSelectedTabs" hidden="true"
-                oncommand="gBrowser.toggleMuteAudioOnMultiSelectedTabs(TabContextMenu.contextTab);"/>
-      <menuitem id="context_pinTab" label="&pinTab.label;"
-                accesskey="&pinTab.accesskey;"
-                oncommand="gBrowser.pinTab(TabContextMenu.contextTab);"/>
-      <menuitem id="context_unpinTab" label="&unpinTab.label;" hidden="true"
-                accesskey="&unpinTab.accesskey;"
-                oncommand="gBrowser.unpinTab(TabContextMenu.contextTab);"/>
-      <menuitem id="context_pinSelectedTabs" label="&pinSelectedTabs.label;" hidden="true"
-                accesskey="&pinSelectedTabs.accesskey;"
-                oncommand="gBrowser.pinMultiSelectedTabs();"/>
-      <menuitem id="context_unpinSelectedTabs" label="&unpinSelectedTabs.label;" hidden="true"
-                accesskey="&unpinSelectedTabs.accesskey;"
-                oncommand="gBrowser.unpinMultiSelectedTabs();"/>
-      <menuitem id="context_duplicateTab" label="&duplicateTab.label;"
-                accesskey="&duplicateTab.accesskey;"
-                oncommand="duplicateTabIn(TabContextMenu.contextTab, 'tab');"/>
-      <menuitem id="context_duplicateTabs" label="&duplicateTabs.label;"
-                accesskey="&duplicateTabs.accesskey;"
-                oncommand="TabContextMenu.duplicateSelectedTabs();"/>
-      <menuseparator/>
-      <menuitem id="context_selectAllTabs" label="&selectAllTabs.label;" accesskey="&selectAllTabs.accesskey;"
-                oncommand="gBrowser.selectAllTabs();"/>
-      <menuitem id="context_bookmarkSelectedTabs"
-                hidden="true"
-                label="&bookmarkSelectedTabs.label;"
-                accesskey="&bookmarkSelectedTabs.accesskey;"
-                oncommand="PlacesCommandHook.bookmarkPages(PlacesCommandHook.uniqueSelectedPages);"/>
-      <menuitem id="context_bookmarkTab"
-                label="&bookmarkTab.label;"
-                accesskey="&bookmarkTab.accesskey;"
-                oncommand="PlacesCommandHook.bookmarkPages(PlacesCommandHook.getUniquePages([TabContextMenu.contextTab]));"/>
-      <menu id="context_reopenInContainer"
-            label="&reopenInContainer.label;"
-            accesskey="&reopenInContainer.accesskey;"
-            hidden="true">
-        <menupopup oncommand="TabContextMenu.reopenInContainer(event);"
-                   onpopupshowing="TabContextMenu.createReopenInContainerMenu(event);"/>
-      </menu>
-      <menu id="context_moveTabOptions"
-            multiselectcontextlabel="&moveSelectedTabOptions.label;"
-            multiselectcontextaccesskey="&moveSelectedTabOptions.accesskey;"
-            nonmultiselectcontextlabel="&moveTabOptions.label;"
-            nonmultiselectcontextaccesskey="&moveTabOptions.accesskey;">
-        <menupopup id="moveTabOptionsMenu">
-          <menuitem id="context_moveToStart"
-                    label="&moveToStart.label;"
-                    accesskey="&moveToStart.accesskey;"
-                    tbattr="tabbrowser-multiple"
-                    oncommand="gBrowser.moveTabsToStart(TabContextMenu.contextTab);"/>
-          <menuitem id="context_moveToEnd"
-                    label="&moveToEnd.label;"
-                    accesskey="&moveToEnd.accesskey;"
-                    tbattr="tabbrowser-multiple"
-                    oncommand="gBrowser.moveTabsToEnd(TabContextMenu.contextTab);"/>
-          <menuitem id="context_openTabInWindow" label="&moveToNewWindow.label;"
-                    accesskey="&moveToNewWindow.accesskey;"
-                    tbattr="tabbrowser-multiple"
-                    oncommand="gBrowser.replaceTabsWithWindow(TabContextMenu.contextTab);"/>
-        </menupopup>
-      </menu>
-      <menu id="context_sendTabToDevice"
-            class="sync-ui-item">
-        <menupopup id="context_sendTabToDevicePopupMenu"
-                   onpopupshowing="gSync.populateSendTabToDevicesMenu(event.target, TabContextMenu.contextTab.linkedBrowser.currentURI.spec, TabContextMenu.contextTab.linkedBrowser.contentTitle, TabContextMenu.contextTab.multiselected);"/>
-      </menu>
-      <menuseparator/>
-      <menuitem id="context_closeTabsToTheEnd" label="&closeTabsToTheEnd.label;" accesskey="&closeTabsToTheEnd.accesskey;"
-                oncommand="gBrowser.removeTabsToTheEndFrom(TabContextMenu.contextTab, {animate: true});"/>
-      <menuitem id="context_closeOtherTabs" label="&closeOtherTabs.label;" accesskey="&closeOtherTabs.accesskey;"
-                oncommand="gBrowser.removeAllTabsBut(TabContextMenu.contextTab);"/>
-      <menuitem id="context_undoCloseTab"
-                label="&undoCloseTab.label;"
-                accesskey="&undoCloseTab.accesskey;"
-                observes="History:UndoCloseTab"/>
-      <menuitem id="context_closeTab" label="&closeTab.label;" accesskey="&closeTab.accesskey;"
-                oncommand="gBrowser.removeTab(TabContextMenu.contextTab, { animate: true });"/>
-      <menuitem id="context_closeSelectedTabs" label="&closeTabs.label;"
-                hidden="true" accesskey="&closeTabs.accesskey;"
-                oncommand="gBrowser.removeMultiSelectedTabs();"/>
-    </menupopup>
+  <menupopup id="tabContextMenu"
+              onpopupshowing="if (event.target == this) TabContextMenu.updateContextMenu(this);"
+              onpopuphidden="if (event.target == this) TabContextMenu.contextTab = null;">
+    <menuitem id="context_reloadTab" label="&reloadTab.label;" accesskey="&reloadTab.accesskey;"
+              oncommand="gBrowser.reloadTab(TabContextMenu.contextTab);"/>
+    <menuitem id="context_reloadSelectedTabs" label="&reloadTabs.label;" hidden="true"
+              accesskey="&reloadTabs.accesskey;"
+              oncommand="gBrowser.reloadMultiSelectedTabs();"/>
+    <menuitem id="context_toggleMuteTab" oncommand="TabContextMenu.contextTab.toggleMuteAudio();"/>
+    <menuitem id="context_toggleMuteSelectedTabs" hidden="true"
+              oncommand="gBrowser.toggleMuteAudioOnMultiSelectedTabs(TabContextMenu.contextTab);"/>
+    <menuitem id="context_pinTab" label="&pinTab.label;"
+              accesskey="&pinTab.accesskey;"
+              oncommand="gBrowser.pinTab(TabContextMenu.contextTab);"/>
+    <menuitem id="context_unpinTab" label="&unpinTab.label;" hidden="true"
+              accesskey="&unpinTab.accesskey;"
+              oncommand="gBrowser.unpinTab(TabContextMenu.contextTab);"/>
+    <menuitem id="context_pinSelectedTabs" label="&pinSelectedTabs.label;" hidden="true"
+              accesskey="&pinSelectedTabs.accesskey;"
+              oncommand="gBrowser.pinMultiSelectedTabs();"/>
+    <menuitem id="context_unpinSelectedTabs" label="&unpinSelectedTabs.label;" hidden="true"
+              accesskey="&unpinSelectedTabs.accesskey;"
+              oncommand="gBrowser.unpinMultiSelectedTabs();"/>
+    <menuitem id="context_duplicateTab" label="&duplicateTab.label;"
+              accesskey="&duplicateTab.accesskey;"
+              oncommand="duplicateTabIn(TabContextMenu.contextTab, 'tab');"/>
+    <menuitem id="context_duplicateTabs" label="&duplicateTabs.label;"
+              accesskey="&duplicateTabs.accesskey;"
+              oncommand="TabContextMenu.duplicateSelectedTabs();"/>
+    <menuseparator/>
+    <menuitem id="context_selectAllTabs" label="&selectAllTabs.label;" accesskey="&selectAllTabs.accesskey;"
+              oncommand="gBrowser.selectAllTabs();"/>
+    <menuitem id="context_bookmarkSelectedTabs"
+              hidden="true"
+              label="&bookmarkSelectedTabs.label;"
+              accesskey="&bookmarkSelectedTabs.accesskey;"
+              oncommand="PlacesCommandHook.bookmarkPages(PlacesCommandHook.uniqueSelectedPages);"/>
+    <menuitem id="context_bookmarkTab"
+              label="&bookmarkTab.label;"
+              accesskey="&bookmarkTab.accesskey;"
+              oncommand="PlacesCommandHook.bookmarkPages(PlacesCommandHook.getUniquePages([TabContextMenu.contextTab]));"/>
+    <menu id="context_reopenInContainer"
+          label="&reopenInContainer.label;"
+          accesskey="&reopenInContainer.accesskey;"
+          hidden="true">
+      <menupopup oncommand="TabContextMenu.reopenInContainer(event);"
+                  onpopupshowing="TabContextMenu.createReopenInContainerMenu(event);"/>
+    </menu>
+    <menu id="context_moveTabOptions"
+          multiselectcontextlabel="&moveSelectedTabOptions.label;"
+          multiselectcontextaccesskey="&moveSelectedTabOptions.accesskey;"
+          nonmultiselectcontextlabel="&moveTabOptions.label;"
+          nonmultiselectcontextaccesskey="&moveTabOptions.accesskey;">
+      <menupopup id="moveTabOptionsMenu">
+        <menuitem id="context_moveToStart"
+                  label="&moveToStart.label;"
+                  accesskey="&moveToStart.accesskey;"
+                  tbattr="tabbrowser-multiple"
+                  oncommand="gBrowser.moveTabsToStart(TabContextMenu.contextTab);"/>
+        <menuitem id="context_moveToEnd"
+                  label="&moveToEnd.label;"
+                  accesskey="&moveToEnd.accesskey;"
+                  tbattr="tabbrowser-multiple"
+                  oncommand="gBrowser.moveTabsToEnd(TabContextMenu.contextTab);"/>
+        <menuitem id="context_openTabInWindow" label="&moveToNewWindow.label;"
+                  accesskey="&moveToNewWindow.accesskey;"
+                  tbattr="tabbrowser-multiple"
+                  oncommand="gBrowser.replaceTabsWithWindow(TabContextMenu.contextTab);"/>
+      </menupopup>
+    </menu>
+    <menu id="context_sendTabToDevice"
+          class="sync-ui-item">
+      <menupopup id="context_sendTabToDevicePopupMenu"
+                  onpopupshowing="gSync.populateSendTabToDevicesMenu(event.target, TabContextMenu.contextTab.linkedBrowser.currentURI.spec, TabContextMenu.contextTab.linkedBrowser.contentTitle, TabContextMenu.contextTab.multiselected);"/>
+    </menu>
+    <menuseparator/>
+    <menuitem id="context_closeTabsToTheEnd" label="&closeTabsToTheEnd.label;" accesskey="&closeTabsToTheEnd.accesskey;"
+              oncommand="gBrowser.removeTabsToTheEndFrom(TabContextMenu.contextTab, {animate: true});"/>
+    <menuitem id="context_closeOtherTabs" label="&closeOtherTabs.label;" accesskey="&closeOtherTabs.accesskey;"
+              oncommand="gBrowser.removeAllTabsBut(TabContextMenu.contextTab);"/>
+    <menuitem id="context_undoCloseTab"
+              label="&undoCloseTab.label;"
+              accesskey="&undoCloseTab.accesskey;"
+              observes="History:UndoCloseTab"/>
+    <menuitem id="context_closeTab" label="&closeTab.label;" accesskey="&closeTab.accesskey;"
+              oncommand="gBrowser.removeTab(TabContextMenu.contextTab, { animate: true });"/>
+    <menuitem id="context_closeSelectedTabs" label="&closeTabs.label;"
+              hidden="true" accesskey="&closeTabs.accesskey;"
+              oncommand="gBrowser.removeMultiSelectedTabs();"/>
+  </menupopup>
 
-    <!-- bug 415444/582485: event.stopPropagation is here for the cloned version
-         of this menupopup -->
-    <menupopup id="backForwardMenu"
-               onpopupshowing="return FillHistoryMenu(event.target);"
-               oncommand="gotoHistoryIndex(event); event.stopPropagation();"
-               onclick="checkForMiddleClick(this, event);"/>
-    <tooltip id="aHTMLTooltip" page="true"/>
-    <tooltip id="remoteBrowserTooltip"/>
+  <!-- bug 415444/582485: event.stopPropagation is here for the cloned version
+        of this menupopup -->
+  <menupopup id="backForwardMenu"
+              onpopupshowing="return FillHistoryMenu(event.target);"
+              oncommand="gotoHistoryIndex(event); event.stopPropagation();"
+              onclick="checkForMiddleClick(this, event);"/>
+  <tooltip id="aHTMLTooltip" page="true"/>
+  <tooltip id="remoteBrowserTooltip"/>
 
-    <!-- for search and content formfill/pw manager -->
+  <!-- for search and content formfill/pw manager -->
 
-    <panel type="autocomplete-richlistbox"
-           id="PopupAutoComplete"
-           role="group"
-           noautofocus="true"
-           hidden="true"
-           overflowpadding="4"
-           norolluponanchor="true"
-           nomaxresults="true" />
+  <panel type="autocomplete-richlistbox"
+          id="PopupAutoComplete"
+          role="group"
+          noautofocus="true"
+          hidden="true"
+          overflowpadding="4"
+          norolluponanchor="true"
+          nomaxresults="true" />
 
-    <!-- for search with one-off buttons -->
-    <panel type="autocomplete-richlistbox"
-           id="PopupSearchAutoComplete"
-           role="group"
-           noautofocus="true"
-           hidden="true" />
+  <!-- for search with one-off buttons -->
+  <panel type="autocomplete-richlistbox"
+          id="PopupSearchAutoComplete"
+          role="group"
+          noautofocus="true"
+          hidden="true" />
 
-    <!-- for url bar autocomplete -->
-    <panel type="autocomplete-richlistbox"
-           id="PopupAutoCompleteRichResult"
-           role="group"
-           noautofocus="true"
-           hidden="true"
-           flip="none"
-           level="parent"
-           overflowpadding="15" />
+  <!-- for url bar autocomplete -->
+  <panel type="autocomplete-richlistbox"
+          id="PopupAutoCompleteRichResult"
+          role="group"
+          noautofocus="true"
+          hidden="true"
+          flip="none"
+          level="parent"
+          overflowpadding="15" />
 
-    <!-- for url bar autocomplete -->
-    <panel id="urlbar-results"
-           role="group"
-           noautofocus="true"
-           hidden="true"
-           flip="none"
-           consumeoutsideclicks="never"
-           norolluponanchor="true"
-           level="parent">
-      <html:div class="urlbarView-body-outer">
-        <html:div class="urlbarView-body-inner">
-          <!-- TODO: add search suggestions notification -->
-          <html:div class="urlbarView-results"/>
-        </html:div>
+  <!-- for url bar autocomplete -->
+  <panel id="urlbar-results"
+          role="group"
+          noautofocus="true"
+          hidden="true"
+          flip="none"
+          consumeoutsideclicks="never"
+          norolluponanchor="true"
+          level="parent">
+    <html:div class="urlbarView-body-outer">
+      <html:div class="urlbarView-body-inner">
+        <!-- TODO: add search suggestions notification -->
+        <html:div class="urlbarView-results"/>
       </html:div>
-      <hbox class="search-one-offs"
-            compact="true"
-            includecurrentengine="true"
-            disabletab="true"/>
-    </panel>
+    </html:div>
+    <hbox class="search-one-offs"
+          compact="true"
+          includecurrentengine="true"
+          disabletab="true"/>
+  </panel>
 
-    <!-- for date/time picker. consumeoutsideclicks is set to never, so that
-         clicks on the anchored input box are never consumed. -->
-    <panel id="DateTimePickerPanel"
-           type="arrow"
-           hidden="true"
-           orient="vertical"
-           noautofocus="true"
-           norolluponanchor="true"
-           consumeoutsideclicks="never"
-           level="parent"
-           tabspecific="true">
-    </panel>
+  <!-- for date/time picker. consumeoutsideclicks is set to never, so that
+        clicks on the anchored input box are never consumed. -->
+  <panel id="DateTimePickerPanel"
+          type="arrow"
+          hidden="true"
+          orient="vertical"
+          noautofocus="true"
+          norolluponanchor="true"
+          consumeoutsideclicks="never"
+          level="parent"
+          tabspecific="true">
+  </panel>
 
-    <!-- for select dropdowns. The menupopup is what shows the list of options,
-         and the popuponly menulist makes things like the menuactive attributes
-         work correctly on the menupopup. ContentSelectDropdown expects the
-         popuponly menulist to be its immediate parent. -->
-    <menulist popuponly="true" id="ContentSelectDropdown" hidden="true">
-      <menupopup rolluponmousewheel="true"
-                 activateontab="true" position="after_start"
-                 level="parent"
+  <!-- for select dropdowns. The menupopup is what shows the list of options,
+        and the popuponly menulist makes things like the menuactive attributes
+        work correctly on the menupopup. ContentSelectDropdown expects the
+        popuponly menulist to be its immediate parent. -->
+  <menulist popuponly="true" id="ContentSelectDropdown" hidden="true">
+    <menupopup rolluponmousewheel="true"
+                activateontab="true" position="after_start"
+                level="parent"
 #ifdef XP_WIN
-                 consumeoutsideclicks="false" ignorekeys="shortcuts"
+                consumeoutsideclicks="false" ignorekeys="shortcuts"
 #endif
-        />
-    </menulist>
+      />
+  </menulist>
 
-    <!-- for invalid form error message -->
-    <panel id="invalid-form-popup" type="arrow" orient="vertical" noautofocus="true" hidden="true" level="parent">
-      <description/>
-    </panel>
+  <!-- for invalid form error message -->
+  <panel id="invalid-form-popup" type="arrow" orient="vertical" noautofocus="true" hidden="true" level="parent">
+    <description/>
+  </panel>
 
-    <panel id="editBookmarkPanel"
-           type="arrow"
-           orient="vertical"
-           ignorekeys="true"
-           hidden="true"
-           tabspecific="true"
-           aria-labelledby="editBookmarkPanelTitle">
-      <box class="panel-header">
-        <label id="editBookmarkPanelTitle"/>
-      </box>
-      <html:div id="editBookmarkPanelFaviconContainer">
-        <html:img id="editBookmarkPanelFavicon"/>
-      </html:div>
-      <box id="editBookmarkPanelImage"/>
+  <panel id="editBookmarkPanel"
+          type="arrow"
+          orient="vertical"
+          ignorekeys="true"
+          hidden="true"
+          tabspecific="true"
+          aria-labelledby="editBookmarkPanelTitle">
+    <box class="panel-header">
+      <label id="editBookmarkPanelTitle"/>
+    </box>
+    <html:div id="editBookmarkPanelFaviconContainer">
+      <html:img id="editBookmarkPanelFavicon"/>
+    </html:div>
+    <box id="editBookmarkPanelImage"/>
 #include ../../components/places/content/editBookmarkPanel.inc.xul
-      <vbox id="editBookmarkPanelBottomContent"
-            flex="1">
-        <checkbox id="editBookmarkPanel_showForNewBookmarks"
-                  label="&editBookmark.showForNewBookmarks.label;"
-                  accesskey="&editBookmark.showForNewBookmarks.accesskey;"
-                  oncommand="StarUI.onShowForNewBookmarksCheckboxCommand();"/>
-      </vbox>
-      <hbox id="editBookmarkPanelBottomButtons"
-            class="panel-footer"
-            style="min-width: &editBookmark.panel.width;;">
+    <vbox id="editBookmarkPanelBottomContent"
+          flex="1">
+      <checkbox id="editBookmarkPanel_showForNewBookmarks"
+                label="&editBookmark.showForNewBookmarks.label;"
+                accesskey="&editBookmark.showForNewBookmarks.accesskey;"
+                oncommand="StarUI.onShowForNewBookmarksCheckboxCommand();"/>
+    </vbox>
+    <hbox id="editBookmarkPanelBottomButtons"
+          class="panel-footer"
+          style="min-width: &editBookmark.panel.width;;">
 #ifndef XP_UNIX
-        <button id="editBookmarkPanelDoneButton"
-                class="editBookmarkPanelBottomButton"
-                label="&editBookmark.done.label;"
-                default="true"
-                oncommand="StarUI.panel.hidePopup();"/>
-        <button id="editBookmarkPanelRemoveButton"
-                class="editBookmarkPanelBottomButton"
-                oncommand="StarUI.removeBookmarkButtonCommand();"/>
+      <button id="editBookmarkPanelDoneButton"
+              class="editBookmarkPanelBottomButton"
+              label="&editBookmark.done.label;"
+              default="true"
+              oncommand="StarUI.panel.hidePopup();"/>
+      <button id="editBookmarkPanelRemoveButton"
+              class="editBookmarkPanelBottomButton"
+              oncommand="StarUI.removeBookmarkButtonCommand();"/>
 #else
-        <button id="editBookmarkPanelRemoveButton"
-                class="editBookmarkPanelBottomButton"
-                oncommand="StarUI.removeBookmarkButtonCommand();"/>
-        <button id="editBookmarkPanelDoneButton"
-                class="editBookmarkPanelBottomButton"
-                label="&editBookmark.done.label;"
-                default="true"
-                oncommand="StarUI.panel.hidePopup();"/>
+      <button id="editBookmarkPanelRemoveButton"
+              class="editBookmarkPanelBottomButton"
+              oncommand="StarUI.removeBookmarkButtonCommand();"/>
+      <button id="editBookmarkPanelDoneButton"
+              class="editBookmarkPanelBottomButton"
+              label="&editBookmark.done.label;"
+              default="true"
+              oncommand="StarUI.panel.hidePopup();"/>
 #endif
-      </hbox>
-    </panel>
+    </hbox>
+  </panel>
 
-    <!-- UI tour experience -->
-    <panel id="UITourTooltip"
-           type="arrow"
-           hidden="true"
-           noautofocus="true"
-           noautohide="true"
-           align="start"
-           orient="vertical"
-           role="alert">
-     <vbox>
-      <hbox id="UITourTooltipBody">
-        <image id="UITourTooltipIcon"/>
-        <vbox flex="1">
-          <hbox id="UITourTooltipTitleContainer">
-            <label id="UITourTooltipTitle" flex="1"/>
-            <toolbarbutton id="UITourTooltipClose" class="close-icon"
-                           tooltiptext="&uiTour.infoPanel.close;"/>
-          </hbox>
-          <description id="UITourTooltipDescription" flex="1"/>
-        </vbox>
-      </hbox>
-      <hbox id="UITourTooltipButtons" flex="1" align="center"/>
-     </vbox>
-    </panel>
-    <!-- type="default" forces frames to be created so that the panel's size can be determined -->
-    <panel id="UITourHighlightContainer"
-           type="default"
-           hidden="true"
-           noautofocus="true"
-           noautohide="true"
-           flip="none"
-           consumeoutsideclicks="false"
-           mousethrough="always">
-      <box id="UITourHighlight"></box>
-    </panel>
+  <!-- UI tour experience -->
+  <panel id="UITourTooltip"
+          type="arrow"
+          hidden="true"
+          noautofocus="true"
+          noautohide="true"
+          align="start"
+          orient="vertical"
+          role="alert">
+    <vbox>
+    <hbox id="UITourTooltipBody">
+      <image id="UITourTooltipIcon"/>
+      <vbox flex="1">
+        <hbox id="UITourTooltipTitleContainer">
+          <label id="UITourTooltipTitle" flex="1"/>
+          <toolbarbutton id="UITourTooltipClose" class="close-icon"
+                          tooltiptext="&uiTour.infoPanel.close;"/>
+        </hbox>
+        <description id="UITourTooltipDescription" flex="1"/>
+      </vbox>
+    </hbox>
+    <hbox id="UITourTooltipButtons" flex="1" align="center"/>
+    </vbox>
+  </panel>
+  <!-- type="default" forces frames to be created so that the panel's size can be determined -->
+  <panel id="UITourHighlightContainer"
+          type="default"
+          hidden="true"
+          noautofocus="true"
+          noautohide="true"
+          flip="none"
+          consumeoutsideclicks="false"
+          mousethrough="always">
+    <box id="UITourHighlight"></box>
+  </panel>
 
-    <panel id="sidebarMenu-popup"
-           class="cui-widget-panel"
-           role="group"
-           type="arrow"
-           hidden="true"
-           flip="slide"
-           orient="vertical"
-           position="bottomcenter topleft">
-      <toolbarbutton id="sidebar-switcher-bookmarks"
-                     type="checkbox"
-                     label="&bookmarksButton.label;"
-                     class="subviewbutton subviewbutton-iconic"
-                     key="viewBookmarksSidebarKb"
-                     oncommand="SidebarUI.show('viewBookmarksSidebar');"/>
-      <toolbarbutton id="sidebar-switcher-history"
-                     type="checkbox"
-                     label="&historyButton.label;"
-                     class="subviewbutton subviewbutton-iconic"
-                     key="key_gotoHistory"
-                     oncommand="SidebarUI.show('viewHistorySidebar');"/>
-      <toolbarbutton id="sidebar-switcher-tabs"
-                     type="checkbox"
-                     label="&syncedTabs.sidebar.label;"
-                     class="subviewbutton subviewbutton-iconic sync-ui-item"
-                     oncommand="SidebarUI.show('viewTabsSidebar');"/>
-      <toolbarseparator/>
-      <!-- Extension toolbarbuttons go here. -->
-      <toolbarseparator id="sidebar-extensions-separator"/>
-      <toolbarbutton id="sidebar-reverse-position"
-                     class="subviewbutton"
-                     oncommand="SidebarUI.reversePosition()"/>
-      <toolbarseparator/>
-      <toolbarbutton label="&sidebarMenuClose.label;"
-                     class="subviewbutton"
-                     oncommand="SidebarUI.hide()"/>
-    </panel>
+  <panel id="sidebarMenu-popup"
+          class="cui-widget-panel"
+          role="group"
+          type="arrow"
+          hidden="true"
+          flip="slide"
+          orient="vertical"
+          position="bottomcenter topleft">
+    <toolbarbutton id="sidebar-switcher-bookmarks"
+                    type="checkbox"
+                    label="&bookmarksButton.label;"
+                    class="subviewbutton subviewbutton-iconic"
+                    key="viewBookmarksSidebarKb"
+                    oncommand="SidebarUI.show('viewBookmarksSidebar');"/>
+    <toolbarbutton id="sidebar-switcher-history"
+                    type="checkbox"
+                    label="&historyButton.label;"
+                    class="subviewbutton subviewbutton-iconic"
+                    key="key_gotoHistory"
+                    oncommand="SidebarUI.show('viewHistorySidebar');"/>
+    <toolbarbutton id="sidebar-switcher-tabs"
+                    type="checkbox"
+                    label="&syncedTabs.sidebar.label;"
+                    class="subviewbutton subviewbutton-iconic sync-ui-item"
+                    oncommand="SidebarUI.show('viewTabsSidebar');"/>
+    <toolbarseparator/>
+    <!-- Extension toolbarbuttons go here. -->
+    <toolbarseparator id="sidebar-extensions-separator"/>
+    <toolbarbutton id="sidebar-reverse-position"
+                    class="subviewbutton"
+                    oncommand="SidebarUI.reversePosition()"/>
+    <toolbarseparator/>
+    <toolbarbutton label="&sidebarMenuClose.label;"
+                    class="subviewbutton"
+                    oncommand="SidebarUI.hide()"/>
+  </panel>
 
-    <menupopup id="toolbar-context-menu"
-               onpopupshowing="onViewToolbarsPopupShowing(event, document.getElementById('viewToolbarsMenuSeparator')); ToolbarContextMenu.updateDownloadsAutoHide(this); ToolbarContextMenu.updateExtension(this)">
-      <menuitem oncommand="ToolbarContextMenu.openAboutAddonsForContextAction(this.parentElement)"
-                accesskey="&customizeMenu.manageExtension.accesskey;"
-                label="&customizeMenu.manageExtension.label;"
-                contexttype="toolbaritem"
-                class="customize-context-manageExtension"/>
-      <menuitem oncommand="ToolbarContextMenu.removeExtensionForContextAction(this.parentElement)"
-                accesskey="&customizeMenu.removeExtension.accesskey;"
-                label="&customizeMenu.removeExtension.label;"
-                contexttype="toolbaritem"
-                class="customize-context-removeExtension"/>
-      <menuseparator/>
-      <menuitem oncommand="gCustomizeMode.addToPanel(document.popupNode)"
-                accesskey="&customizeMenu.pinToOverflowMenu.accesskey;"
-                label="&customizeMenu.pinToOverflowMenu.label;"
-                contexttype="toolbaritem"
-                class="customize-context-moveToPanel"/>
-      <menuitem id="toolbar-context-autohide-downloads-button"
-                oncommand="ToolbarContextMenu.onDownloadsAutoHideChange(event);"
-                type="checkbox"
-                accesskey="&customizeMenu.autoHideDownloadsButton.accesskey;"
-                label="&customizeMenu.autoHideDownloadsButton.label;"
-                contexttype="toolbaritem"/>
-      <menuitem oncommand="gCustomizeMode.removeFromArea(document.popupNode)"
-                accesskey="&customizeMenu.removeFromToolbar.accesskey;"
-                label="&customizeMenu.removeFromToolbar.label;"
-                contexttype="toolbaritem"
-                class="customize-context-removeFromToolbar"/>
-      <menuitem id="toolbar-context-reloadSelectedTab"
-                contexttype="tabbar"
-                oncommand="gBrowser.reloadMultiSelectedTabs();"
-                label="&toolbarContextMenu.reloadSelectedTab.label;"
-                accesskey="&toolbarContextMenu.reloadSelectedTab.accesskey;"/>
-      <menuitem id="toolbar-context-reloadSelectedTabs"
-                contexttype="tabbar"
-                oncommand="gBrowser.reloadMultiSelectedTabs();"
-                label="&toolbarContextMenu.reloadSelectedTabs.label;"
-                accesskey="&toolbarContextMenu.reloadSelectedTabs.accesskey;"/>
-      <menuitem id="toolbar-context-bookmarkSelectedTab"
-                contexttype="tabbar"
-                oncommand="PlacesCommandHook.bookmarkPages(PlacesCommandHook.uniqueSelectedPages);"
-                label="&toolbarContextMenu.bookmarkSelectedTab.label;"
-                accesskey="&toolbarContextMenu.bookmarkSelectedTab.accesskey;"/>
-      <menuitem id="toolbar-context-bookmarkSelectedTabs"
-                contexttype="tabbar"
-                oncommand="PlacesCommandHook.bookmarkPages(PlacesCommandHook.uniqueSelectedPages);"
-                label="&toolbarContextMenu.bookmarkSelectedTabs.label;"
-                accesskey="&toolbarContextMenu.bookmarkSelectedTabs.accesskey;"/>
-      <menuitem id="toolbar-context-selectAllTabs"
-                contexttype="tabbar"
-                oncommand="gBrowser.selectAllTabs();"
-                label="&toolbarContextMenu.selectAllTabs.label;"
-                accesskey="&toolbarContextMenu.selectAllTabs.accesskey;"/>
-      <menuitem id="toolbar-context-undoCloseTab"
-                contexttype="tabbar"
-                label="&toolbarContextMenu.undoCloseTab.label;"
-                accesskey="&toolbarContextMenu.undoCloseTab.accesskey;"
-                observes="History:UndoCloseTab"/>
-      <menuseparator/>
-      <menuseparator id="viewToolbarsMenuSeparator"/>
-      <!-- XXXgijs: we're using oncommand handler here to avoid the event being
-                    redirected to the command element, thus preventing
-                    listeners on the menupopup or further up the tree from
-                    seeing the command event pass by. The observes attribute is
-                    here so that the menuitem is still disabled and re-enabled
-                    correctly. -->
-      <menuitem oncommand="gCustomizeMode.enter()"
-                observes="cmd_CustomizeToolbars"
-                class="viewCustomizeToolbar"
-                label="&viewCustomizeToolbar.label;"
-                accesskey="&viewCustomizeToolbar.accesskey;"/>
-    </menupopup>
+  <menupopup id="toolbar-context-menu"
+              onpopupshowing="onViewToolbarsPopupShowing(event, document.getElementById('viewToolbarsMenuSeparator')); ToolbarContextMenu.updateDownloadsAutoHide(this); ToolbarContextMenu.updateExtension(this)">
+    <menuitem oncommand="ToolbarContextMenu.openAboutAddonsForContextAction(this.parentElement)"
+              accesskey="&customizeMenu.manageExtension.accesskey;"
+              label="&customizeMenu.manageExtension.label;"
+              contexttype="toolbaritem"
+              class="customize-context-manageExtension"/>
+    <menuitem oncommand="ToolbarContextMenu.removeExtensionForContextAction(this.parentElement)"
+              accesskey="&customizeMenu.removeExtension.accesskey;"
+              label="&customizeMenu.removeExtension.label;"
+              contexttype="toolbaritem"
+              class="customize-context-removeExtension"/>
+    <menuseparator/>
+    <menuitem oncommand="gCustomizeMode.addToPanel(document.popupNode)"
+              accesskey="&customizeMenu.pinToOverflowMenu.accesskey;"
+              label="&customizeMenu.pinToOverflowMenu.label;"
+              contexttype="toolbaritem"
+              class="customize-context-moveToPanel"/>
+    <menuitem id="toolbar-context-autohide-downloads-button"
+              oncommand="ToolbarContextMenu.onDownloadsAutoHideChange(event);"
+              type="checkbox"
+              accesskey="&customizeMenu.autoHideDownloadsButton.accesskey;"
+              label="&customizeMenu.autoHideDownloadsButton.label;"
+              contexttype="toolbaritem"/>
+    <menuitem oncommand="gCustomizeMode.removeFromArea(document.popupNode)"
+              accesskey="&customizeMenu.removeFromToolbar.accesskey;"
+              label="&customizeMenu.removeFromToolbar.label;"
+              contexttype="toolbaritem"
+              class="customize-context-removeFromToolbar"/>
+    <menuitem id="toolbar-context-reloadSelectedTab"
+              contexttype="tabbar"
+              oncommand="gBrowser.reloadMultiSelectedTabs();"
+              label="&toolbarContextMenu.reloadSelectedTab.label;"
+              accesskey="&toolbarContextMenu.reloadSelectedTab.accesskey;"/>
+    <menuitem id="toolbar-context-reloadSelectedTabs"
+              contexttype="tabbar"
+              oncommand="gBrowser.reloadMultiSelectedTabs();"
+              label="&toolbarContextMenu.reloadSelectedTabs.label;"
+              accesskey="&toolbarContextMenu.reloadSelectedTabs.accesskey;"/>
+    <menuitem id="toolbar-context-bookmarkSelectedTab"
+              contexttype="tabbar"
+              oncommand="PlacesCommandHook.bookmarkPages(PlacesCommandHook.uniqueSelectedPages);"
+              label="&toolbarContextMenu.bookmarkSelectedTab.label;"
+              accesskey="&toolbarContextMenu.bookmarkSelectedTab.accesskey;"/>
+    <menuitem id="toolbar-context-bookmarkSelectedTabs"
+              contexttype="tabbar"
+              oncommand="PlacesCommandHook.bookmarkPages(PlacesCommandHook.uniqueSelectedPages);"
+              label="&toolbarContextMenu.bookmarkSelectedTabs.label;"
+              accesskey="&toolbarContextMenu.bookmarkSelectedTabs.accesskey;"/>
+    <menuitem id="toolbar-context-selectAllTabs"
+              contexttype="tabbar"
+              oncommand="gBrowser.selectAllTabs();"
+              label="&toolbarContextMenu.selectAllTabs.label;"
+              accesskey="&toolbarContextMenu.selectAllTabs.accesskey;"/>
+    <menuitem id="toolbar-context-undoCloseTab"
+              contexttype="tabbar"
+              label="&toolbarContextMenu.undoCloseTab.label;"
+              accesskey="&toolbarContextMenu.undoCloseTab.accesskey;"
+              observes="History:UndoCloseTab"/>
+    <menuseparator/>
+    <menuseparator id="viewToolbarsMenuSeparator"/>
+    <!-- XXXgijs: we're using oncommand handler here to avoid the event being
+                  redirected to the command element, thus preventing
+                  listeners on the menupopup or further up the tree from
+                  seeing the command event pass by. The observes attribute is
+                  here so that the menuitem is still disabled and re-enabled
+                  correctly. -->
+    <menuitem oncommand="gCustomizeMode.enter()"
+              observes="cmd_CustomizeToolbars"
+              class="viewCustomizeToolbar"
+              label="&viewCustomizeToolbar.label;"
+              accesskey="&viewCustomizeToolbar.accesskey;"/>
+  </menupopup>
 
-    <menupopup id="blockedPopupOptions"
-               onpopupshowing="gPopupBlockerObserver.fillPopupList(event);"
-               onpopuphiding="gPopupBlockerObserver.onPopupHiding(event);">
-      <menuitem id="blockedPopupAllowSite"
-                accesskey="&allowPopups.accesskey;"
-                oncommand="gPopupBlockerObserver.toggleAllowPopupsForSite(event);"/>
-      <menuitem
+  <menupopup id="blockedPopupOptions"
+              onpopupshowing="gPopupBlockerObserver.fillPopupList(event);"
+              onpopuphiding="gPopupBlockerObserver.onPopupHiding(event);">
+    <menuitem id="blockedPopupAllowSite"
+              accesskey="&allowPopups.accesskey;"
+              oncommand="gPopupBlockerObserver.toggleAllowPopupsForSite(event);"/>
+    <menuitem
 #ifdef XP_WIN
-                label="&editPopupSettings.label;"
+              label="&editPopupSettings.label;"
 #else
-                label="&editPopupSettingsUnix.label;"
+              label="&editPopupSettingsUnix.label;"
 #endif
-                accesskey="&editPopupSettings.accesskey;"
-                oncommand="gPopupBlockerObserver.editPopupSettings();"/>
-      <menuitem id="blockedPopupDontShowMessage"
-                accesskey="&dontShowMessage.accesskey;"
-                type="checkbox"
-                oncommand="gPopupBlockerObserver.dontShowMessage();"/>
-      <menuseparator id="blockedPopupsSeparator"/>
-    </menupopup>
+              accesskey="&editPopupSettings.accesskey;"
+              oncommand="gPopupBlockerObserver.editPopupSettings();"/>
+    <menuitem id="blockedPopupDontShowMessage"
+              accesskey="&dontShowMessage.accesskey;"
+              type="checkbox"
+              oncommand="gPopupBlockerObserver.dontShowMessage();"/>
+    <menuseparator id="blockedPopupsSeparator"/>
+  </menupopup>
 
-    <menupopup id="autohide-context"
-           onpopupshowing="FullScreen.getAutohide(this.firstChild);">
-      <menuitem type="checkbox" label="&fullScreenAutohide.label;"
-                accesskey="&fullScreenAutohide.accesskey;"
-                oncommand="FullScreen.setAutohide();"/>
-      <menuseparator/>
-      <menuitem label="&fullScreenExit.label;"
-                accesskey="&fullScreenExit.accesskey;"
-                oncommand="BrowserFullScreen();"/>
-    </menupopup>
+  <menupopup id="autohide-context"
+          onpopupshowing="FullScreen.getAutohide(this.firstChild);">
+    <menuitem type="checkbox" label="&fullScreenAutohide.label;"
+              accesskey="&fullScreenAutohide.accesskey;"
+              oncommand="FullScreen.setAutohide();"/>
+    <menuseparator/>
+    <menuitem label="&fullScreenExit.label;"
+              accesskey="&fullScreenExit.accesskey;"
+              oncommand="BrowserFullScreen();"/>
+  </menupopup>
 
-    <menupopup id="contentAreaContextMenu" pagemenu="#page-menu-separator"
-               onpopupshowing="if (event.target != this)
-                                 return true;
-                               gContextMenu = new nsContextMenu(this, event.shiftKey);
-                               if (gContextMenu.shouldDisplay)
-                                 updateEditUIVisibility();
-                               return gContextMenu.shouldDisplay;"
-               onpopuphiding="if (event.target != this)
-                                return;
-                              gContextMenu.hiding();
-                              gContextMenu = null;
-                              updateEditUIVisibility();">
+  <menupopup id="contentAreaContextMenu" pagemenu="#page-menu-separator"
+              onpopupshowing="if (event.target != this)
+                                return true;
+                              gContextMenu = new nsContextMenu(this, event.shiftKey);
+                              if (gContextMenu.shouldDisplay)
+                                updateEditUIVisibility();
+                              return gContextMenu.shouldDisplay;"
+              onpopuphiding="if (event.target != this)
+                              return;
+                            gContextMenu.hiding();
+                            gContextMenu = null;
+                            updateEditUIVisibility();">
 #include browser-context.inc
-    </menupopup>
+  </menupopup>
 
 #include ../../components/places/content/placesContextMenu.inc.xul
 
-    <panel id="ctrlTab-panel" hidden="true" norestorefocus="true" level="top">
-      <hbox id="ctrlTab-previews"/>
-      <hbox id="ctrlTab-showAll-container" pack="center"/>
-    </panel>
+  <panel id="ctrlTab-panel" hidden="true" norestorefocus="true" level="top">
+    <hbox id="ctrlTab-previews"/>
+    <hbox id="ctrlTab-showAll-container" pack="center"/>
+  </panel>
 
-    <panel id="pageActionPanel"
-           class="cui-widget-panel"
-           role="group"
-           type="arrow"
-           hidden="true"
-           flip="slide"
-           photon="true"
-           position="bottomcenter topright"
-           tabspecific="true"
-           noautofocus="true"
-           pocket-title="&saveToPocketCmd.label;"
-           copyURL-title="&pageAction.copyLink.label;"
-           emailLink-title="&emailPageCmd.label;"
-           sendToDevice-notReadyTitle="&sendToDevice.syncNotReady.label;"
-           shareURL-title="&pageAction.shareUrl.label;"
-           shareMore-label="&pageAction.shareMore.label;">
-      <panelmultiview id="pageActionPanelMultiView"
-                      mainViewId="pageActionPanelMainView"
-                      viewCacheId="appMenu-viewCache">
-        <panelview id="pageActionPanelMainView"
-                   context="pageActionContextMenu"
-                   class="PanelUI-subView">
-          <vbox class="panel-subview-body"/>
-        </panelview>
-      </panelmultiview>
-    </panel>
+  <panel id="pageActionPanel"
+          class="cui-widget-panel"
+          role="group"
+          type="arrow"
+          hidden="true"
+          flip="slide"
+          photon="true"
+          position="bottomcenter topright"
+          tabspecific="true"
+          noautofocus="true"
+          pocket-title="&saveToPocketCmd.label;"
+          copyURL-title="&pageAction.copyLink.label;"
+          emailLink-title="&emailPageCmd.label;"
+          sendToDevice-notReadyTitle="&sendToDevice.syncNotReady.label;"
+          shareURL-title="&pageAction.shareUrl.label;"
+          shareMore-label="&pageAction.shareMore.label;">
+    <panelmultiview id="pageActionPanelMultiView"
+                    mainViewId="pageActionPanelMainView"
+                    viewCacheId="appMenu-viewCache">
+      <panelview id="pageActionPanelMainView"
+                  context="pageActionContextMenu"
+                  class="PanelUI-subView">
+        <vbox class="panel-subview-body"/>
+      </panelview>
+    </panelmultiview>
+  </panel>
 
-    <panel id="confirmation-hint"
-           role="alert"
-           type="arrow"
-           hidden="true"
-           flip="slide"
-           position="bottomcenter topright"
-           tabspecific="true"
-           noautofocus="true">
-      <hbox id="confirmation-hint-checkmark-animation-container">
-        <image id="confirmation-hint-checkmark-image"/>
-      </hbox>
-      <label id="confirmation-hint-message"/>
-    </panel>
+  <panel id="confirmation-hint"
+          role="alert"
+          type="arrow"
+          hidden="true"
+          flip="slide"
+          position="bottomcenter topright"
+          tabspecific="true"
+          noautofocus="true">
+    <hbox id="confirmation-hint-checkmark-animation-container">
+      <image id="confirmation-hint-checkmark-image"/>
+    </hbox>
+    <label id="confirmation-hint-message"/>
+  </panel>
 
-    <menupopup id="pageActionContextMenu"
-               onpopupshowing="BrowserPageActions.onContextMenuShowing(event, this);">
-      <menuitem class="pageActionContextMenuItem builtInUnpinned"
-                label="&pageAction.addToUrlbar.label;"
-                oncommand="BrowserPageActions.togglePinningForContextAction();"/>
-      <menuitem class="pageActionContextMenuItem builtInPinned"
-                label="&pageAction.removeFromUrlbar.label;"
-                oncommand="BrowserPageActions.togglePinningForContextAction();"/>
-      <menuitem class="pageActionContextMenuItem extensionUnpinned"
-                label="&pageAction.addToUrlbar.label;"
-                oncommand="BrowserPageActions.togglePinningForContextAction();"/>
-      <menuitem class="pageActionContextMenuItem extensionPinned"
-                label="&pageAction.removeFromUrlbar.label;"
-                oncommand="BrowserPageActions.togglePinningForContextAction();"/>
-      <menuseparator class="pageActionContextMenuItem extensionPinned extensionUnpinned"/>
-      <menuitem class="pageActionContextMenuItem extensionPinned extensionUnpinned"
-                label="&pageAction.manageExtension.label;"
-                oncommand="BrowserPageActions.openAboutAddonsForContextAction();"/>
-    </menupopup>
+  <menupopup id="pageActionContextMenu"
+              onpopupshowing="BrowserPageActions.onContextMenuShowing(event, this);">
+    <menuitem class="pageActionContextMenuItem builtInUnpinned"
+              label="&pageAction.addToUrlbar.label;"
+              oncommand="BrowserPageActions.togglePinningForContextAction();"/>
+    <menuitem class="pageActionContextMenuItem builtInPinned"
+              label="&pageAction.removeFromUrlbar.label;"
+              oncommand="BrowserPageActions.togglePinningForContextAction();"/>
+    <menuitem class="pageActionContextMenuItem extensionUnpinned"
+              label="&pageAction.addToUrlbar.label;"
+              oncommand="BrowserPageActions.togglePinningForContextAction();"/>
+    <menuitem class="pageActionContextMenuItem extensionPinned"
+              label="&pageAction.removeFromUrlbar.label;"
+              oncommand="BrowserPageActions.togglePinningForContextAction();"/>
+    <menuseparator class="pageActionContextMenuItem extensionPinned extensionUnpinned"/>
+    <menuitem class="pageActionContextMenuItem extensionPinned extensionUnpinned"
+              label="&pageAction.manageExtension.label;"
+              oncommand="BrowserPageActions.openAboutAddonsForContextAction();"/>
+  </menupopup>
 
 #include ../../components/places/content/bookmarksHistoryTooltip.inc.xul
 
-    <tooltip id="tabbrowser-tab-tooltip" onpopupshowing="gBrowser.createTooltip(event);"/>
+  <tooltip id="tabbrowser-tab-tooltip" onpopupshowing="gBrowser.createTooltip(event);"/>
 
-    <tooltip id="back-button-tooltip">
-      <description class="tooltip-label" value="&backButton.tooltip;"/>
+  <tooltip id="back-button-tooltip">
+    <description class="tooltip-label" value="&backButton.tooltip;"/>
 #ifdef XP_MACOSX
-      <description class="tooltip-label" value="&backForwardButtonMenuMac.tooltip;"/>
+    <description class="tooltip-label" value="&backForwardButtonMenuMac.tooltip;"/>
 #else
-      <description class="tooltip-label" value="&backForwardButtonMenu.tooltip;"/>
+    <description class="tooltip-label" value="&backForwardButtonMenu.tooltip;"/>
 #endif
-    </tooltip>
+  </tooltip>
 
-    <tooltip id="forward-button-tooltip">
-      <description class="tooltip-label" value="&forwardButton.tooltip;"/>
+  <tooltip id="forward-button-tooltip">
+    <description class="tooltip-label" value="&forwardButton.tooltip;"/>
 #ifdef XP_MACOSX
-      <description class="tooltip-label" value="&backForwardButtonMenuMac.tooltip;"/>
+    <description class="tooltip-label" value="&backForwardButtonMenuMac.tooltip;"/>
 #else
-      <description class="tooltip-label" value="&backForwardButtonMenu.tooltip;"/>
+    <description class="tooltip-label" value="&backForwardButtonMenu.tooltip;"/>
 #endif
-    </tooltip>
+  </tooltip>
 
 #include popup-notifications.inc
 
 #include ../../components/customizableui/content/panelUI.inc.xul
 #include ../../components/controlcenter/content/panel.inc.xul
 #include ../../components/downloads/content/downloadsPanel.inc.xul
 #include browser-allTabsMenu.inc.xul
 
-    <hbox id="downloads-animation-container" mousethrough="always">
-      <vbox id="downloads-notification-anchor" hidden="true">
-        <vbox id="downloads-indicator-notification"/>
-      </vbox>
-    </hbox>
+  <hbox id="downloads-animation-container" mousethrough="always">
+    <vbox id="downloads-notification-anchor" hidden="true">
+      <vbox id="downloads-indicator-notification"/>
+    </vbox>
+  </hbox>
 
-    <tooltip id="dynamic-shortcut-tooltip"
-             onpopupshowing="UpdateDynamicShortcutTooltipText(this);"/>
+  <tooltip id="dynamic-shortcut-tooltip"
+            onpopupshowing="UpdateDynamicShortcutTooltipText(this);"/>
 
-    <menupopup id="SyncedTabsSidebarContext">
-      <menuitem label="&syncedTabs.context.open.label;"
-                accesskey="&syncedTabs.context.open.accesskey;"
-                id="syncedTabsOpenSelected" where="current"/>
-      <menuitem label="&syncedTabs.context.openInNewTab.label;"
-                accesskey="&syncedTabs.context.openInNewTab.accesskey;"
-                id="syncedTabsOpenSelectedInTab" where="tab"/>
-      <menuitem label="&syncedTabs.context.openInNewWindow.label;"
-                accesskey="&syncedTabs.context.openInNewWindow.accesskey;"
-                id="syncedTabsOpenSelectedInWindow" where="window"/>
-      <menuitem label="&syncedTabs.context.openInNewPrivateWindow.label;"
-                accesskey="&syncedTabs.context.openInNewPrivateWindow.accesskey;"
-                id="syncedTabsOpenSelectedInPrivateWindow" where="window" private="true"/>
-      <menuseparator/>
-      <menuitem label="&syncedTabs.context.bookmarkSingleTab.label;"
-                accesskey="&syncedTabs.context.bookmarkSingleTab.accesskey;"
-                id="syncedTabsBookmarkSelected"/>
-      <menuitem label="&syncedTabs.context.copy.label;"
-                accesskey="&syncedTabs.context.copy.accesskey;"
-                id="syncedTabsCopySelected"/>
-      <menuseparator/>
-      <menuitem label="&syncedTabs.context.openAllInTabs.label;"
-                accesskey="&syncedTabs.context.openAllInTabs.accesskey;"
-                id="syncedTabsOpenAllInTabs"/>
-      <menuitem label="&syncedTabs.context.managedevices.label;"
-                accesskey="&syncedTabs.context.managedevices.accesskey;"
-                id="syncedTabsManageDevices"
-                oncommand="gSync.openDevicesManagementPage('syncedtabs-sidebar');"/>
-      <menuitem label="&syncSyncNowItem.label;"
-                accesskey="&syncSyncNowItem.accesskey;"
-                id="syncedTabsRefresh"/>
-    </menupopup>
-    <menupopup id="SyncedTabsSidebarTabsFilterContext"
-               class="textbox-contextmenu">
-      <menuitem label="&undoCmd.label;"
-                accesskey="&undoCmd.accesskey;"
-                cmd="cmd_undo"/>
-      <menuseparator/>
-      <menuitem label="&cutCmd.label;"
-                accesskey="&cutCmd.accesskey;"
-                cmd="cmd_cut"/>
-      <menuitem label="&copyCmd.label;"
-                accesskey="&copyCmd.accesskey;"
-                cmd="cmd_copy"/>
-      <menuitem label="&pasteCmd.label;"
-                accesskey="&pasteCmd.accesskey;"
-                cmd="cmd_paste"/>
-      <menuitem label="&deleteCmd.label;"
-                accesskey="&deleteCmd.accesskey;"
-                cmd="cmd_delete"/>
-      <menuseparator/>
-      <menuitem label="&selectAllCmd.label;"
-                accesskey="&selectAllCmd.accesskey;"
-                cmd="cmd_selectAll"/>
-      <menuseparator/>
-      <menuitem label="&syncSyncNowItem.label;"
-                accesskey="&syncSyncNowItem.accesskey;"
-                id="syncedTabsRefreshFilter"/>
-    </menupopup>
+  <menupopup id="SyncedTabsSidebarContext">
+    <menuitem label="&syncedTabs.context.open.label;"
+              accesskey="&syncedTabs.context.open.accesskey;"
+              id="syncedTabsOpenSelected" where="current"/>
+    <menuitem label="&syncedTabs.context.openInNewTab.label;"
+              accesskey="&syncedTabs.context.openInNewTab.accesskey;"
+              id="syncedTabsOpenSelectedInTab" where="tab"/>
+    <menuitem label="&syncedTabs.context.openInNewWindow.label;"
+              accesskey="&syncedTabs.context.openInNewWindow.accesskey;"
+              id="syncedTabsOpenSelectedInWindow" where="window"/>
+    <menuitem label="&syncedTabs.context.openInNewPrivateWindow.label;"
+              accesskey="&syncedTabs.context.openInNewPrivateWindow.accesskey;"
+              id="syncedTabsOpenSelectedInPrivateWindow" where="window" private="true"/>
+    <menuseparator/>
+    <menuitem label="&syncedTabs.context.bookmarkSingleTab.label;"
+              accesskey="&syncedTabs.context.bookmarkSingleTab.accesskey;"
+              id="syncedTabsBookmarkSelected"/>
+    <menuitem label="&syncedTabs.context.copy.label;"
+              accesskey="&syncedTabs.context.copy.accesskey;"
+              id="syncedTabsCopySelected"/>
+    <menuseparator/>
+    <menuitem label="&syncedTabs.context.openAllInTabs.label;"
+              accesskey="&syncedTabs.context.openAllInTabs.accesskey;"
+              id="syncedTabsOpenAllInTabs"/>
+    <menuitem label="&syncedTabs.context.managedevices.label;"
+              accesskey="&syncedTabs.context.managedevices.accesskey;"
+              id="syncedTabsManageDevices"
+              oncommand="gSync.openDevicesManagementPage('syncedtabs-sidebar');"/>
+    <menuitem label="&syncSyncNowItem.label;"
+              accesskey="&syncSyncNowItem.accesskey;"
+              id="syncedTabsRefresh"/>
+  </menupopup>
+  <menupopup id="SyncedTabsSidebarTabsFilterContext"
+              class="textbox-contextmenu">
+    <menuitem label="&undoCmd.label;"
+              accesskey="&undoCmd.accesskey;"
+              cmd="cmd_undo"/>
+    <menuseparator/>
+    <menuitem label="&cutCmd.label;"
+              accesskey="&cutCmd.accesskey;"
+              cmd="cmd_cut"/>
+    <menuitem label="&copyCmd.label;"
+              accesskey="&copyCmd.accesskey;"
+              cmd="cmd_copy"/>
+    <menuitem label="&pasteCmd.label;"
+              accesskey="&pasteCmd.accesskey;"
+              cmd="cmd_paste"/>
+    <menuitem label="&deleteCmd.label;"
+              accesskey="&deleteCmd.accesskey;"
+              cmd="cmd_delete"/>
+    <menuseparator/>
+    <menuitem label="&selectAllCmd.label;"
+              accesskey="&selectAllCmd.accesskey;"
+              cmd="cmd_selectAll"/>
+    <menuseparator/>
+    <menuitem label="&syncSyncNowItem.label;"
+              accesskey="&syncSyncNowItem.accesskey;"
+              id="syncedTabsRefreshFilter"/>
+  </menupopup>
 
-    <hbox id="statuspanel" inactive="true" layer="true">
-      <hbox id="statuspanel-inner">
-        <label id="statuspanel-label"
-               role="status"
-               aria-live="off"
-               flex="1"
-               crop="end"/>
-      </hbox>
+  <hbox id="statuspanel" inactive="true" layer="true">
+    <hbox id="statuspanel-inner">
+      <label id="statuspanel-label"
+              role="status"
+              aria-live="off"
+              flex="1"
+              crop="end"/>
     </hbox>
-  </popupset>
+  </hbox>
 </box>
diff --git a/browser/base/content/browser-pageActions.js b/browser/base/content/browser-pageActions.js
--- a/browser/base/content/browser-pageActions.js
+++ b/browser/base/content/browser-pageActions.js
@@ -44,20 +44,20 @@ var BrowserPageActions = {
   },
 
   /**
    * Inits.  Call to init.
    */
   init() {
     this.placeAllActions();
     this._onPanelShowing = this._onPanelShowing.bind(this);
-    this.panelNode.addEventListener("popupshowing", this._onPanelShowing);
-    this.panelNode.addEventListener("popuphiding", () => {
-      this.mainButtonNode.removeAttribute("open");
-    });
+    // this.panelNode.addEventListener("popupshowing", this._onPanelShowing);
+    // this.panelNode.addEventListener("popuphiding", () => {
+    //   this.mainButtonNode.removeAttribute("open");
+    // });
   },
 
   _onPanelShowing() {
     this.placeLazyActionsInPanel();
     for (let action of PageActions.actionsInPanel(window)) {
       let buttonNode = this.panelButtonNodeForActionID(action.id);
       action.onShowingInPanel(buttonNode);
     }
diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -1281,21 +1281,21 @@ var gBrowserInit = {
           }
         });
       }
     }
 
     // Call this after we set attributes that might change toolbars' computed
     // text color.
     ToolbarIconColor.init();
-    document.documentElement.append(BrowserFragment.importToDocument(document));
   },
 
   onDOMContentLoaded() {
 
+    document.getElementById("mainPopupSet").append(BrowserFragment.importToDocument(document));
     // This needs setting up before we create the first remote browser.
     window.docShell.treeOwner
           .QueryInterface(Ci.nsIInterfaceRequestor)
           .getInterface(Ci.nsIXULWindow)
           .XULBrowserWindow = window.XULBrowserWindow;
     window.browserDOMWindow = new nsBrowserAccess();
 
     gBrowser = window._gBrowser;
diff --git a/browser/base/content/browser.xul b/browser/base/content/browser.xul
--- a/browser/base/content/browser.xul
+++ b/browser/base/content/browser.xul
@@ -127,17 +127,19 @@ xmlns="http://www.w3.org/1999/xhtml"
   window.addEventListener("DOMContentLoaded",
     gBrowserInit.onDOMContentLoaded.bind(gBrowserInit), { once: true });
 </script>
 
 # All sets except for popupsets (commands, keys, and stringbundles)
 # *must* go into the browser-sets.inc file so that they can be shared with other
 # top level windows in macWindow.inc.xul.
 #include browser-sets.inc
-<box id="appMenu-viewCache" hidden="true"/>
+
+  <popupset id="mainPopupSet"></popupset>
+  <box id="appMenu-viewCache" hidden="true"/>
 
   <toolbox id="navigator-toolbox">
 
     <vbox id="titlebar">
       <!-- Menu -->
       <toolbar type="menubar" id="toolbar-menubar"
                class="browser-toolbar chromeclass-menubar titlebar-color"
                customizable="true"
diff --git a/browser/base/content/tabbrowser.js b/browser/base/content/tabbrowser.js
--- a/browser/base/content/tabbrowser.js
+++ b/browser/base/content/tabbrowser.js
@@ -578,18 +578,18 @@ window._gBrowser = {
     let event = document.createEvent("Events");
     event.initEvent("TabFindInitialized", true, false);
     aTab.dispatchEvent(event);
 
     return findBar;
   },
 
   _appendStatusPanel() {
-    this.selectedBrowser.parentNode.insertAdjacentElement("afterend",
-                                                          StatusPanel.panel);
+    // this.selectedBrowser.parentNode.insertAdjacentElement("afterend",
+    //                                                       StatusPanel.panel);
   },
 
   _updateTabBarForPinnedTabs() {
     this.tabContainer._unlockTabSizing();
     this.tabContainer._positionPinnedTabs();
     this.tabContainer._updateCloseButtons();
   },
 
diff --git a/browser/base/content/urlbarBindings.xml b/browser/base/content/urlbarBindings.xml
--- a/browser/base/content/urlbarBindings.xml
+++ b/browser/base/content/urlbarBindings.xml
@@ -151,30 +151,31 @@ file, You can obtain one at http://mozil
           let label = Services.strings.createBundle("chrome://browser/locale/browser.properties").
                                    GetStringFromName("pasteAndGo.label");
           pasteAndGo.setAttribute("label", label);
           pasteAndGo.setAttribute("anonid", "paste-and-go");
           pasteAndGo.setAttribute("oncommand",
               "gURLBar.select(); goDoCommand('cmd_paste'); gURLBar.handleCommand();");
           cxmenu.insertBefore(pasteAndGo, insertLocation.nextElementSibling);
         }
-
+/*
         this.popup.addEventListener("popupshowing", () => {
           this._enableOrDisableOneOffSearches();
         }, {capture: true, once: true});
 
         // history dropmarker open state
         this.popup.addEventListener("popupshowing", () => {
           this.setAttribute("open", "true");
         });
         this.popup.addEventListener("popuphidden", () => {
           requestAnimationFrame(() => {
             this.removeAttribute("open");
           });
         });
+        */
       ]]></constructor>
 
       <destructor><![CDATA[
         // Somehow, it's possible for the XBL destructor to fire without the
         // constructor ever having fired. Fix:
         if (!this._prefs) {
           return;
         }
