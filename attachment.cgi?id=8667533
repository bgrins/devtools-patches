# HG changeset patch
# User Tom Tromey <tromey@mozilla.com>

Bug 979574 - don't let inherited properties override with !important

diff --git a/devtools/client/styleinspector/rule-view.js b/devtools/client/styleinspector/rule-view.js
index 80fc46b..c657d14 100644
--- a/devtools/client/styleinspector/rule-view.js
+++ b/devtools/client/styleinspector/rule-view.js
@@ -395,17 +395,19 @@ ElementStyle.prototype = {
       //  linear-gradient: ...;
       if (!computedProp.textProp.isValid()) {
         computedProp.overridden = true;
         continue;
       }
       let overridden;
       if (earlier &&
           computedProp.priority === "important" &&
-          earlier.priority !== "important") {
+          earlier.priority !== "important" &&
+          (earlier.textProp.rule.inherited ||
+           !computedProp.textProp.rule.inherited)) {
         // New property is higher priority.  Mark the earlier property
         // overridden (which will reverse its dirty state).
         earlier._overriddenDirty = !earlier._overriddenDirty;
         earlier.overridden = true;
         overridden = false;
       } else {
         overridden = !!earlier;
       }
diff --git a/devtools/client/styleinspector/test/browser.ini b/devtools/client/styleinspector/test/browser.ini
index 049e988..e2d0898 100644
--- a/devtools/client/styleinspector/test/browser.ini
+++ b/devtools/client/styleinspector/test/browser.ini
@@ -130,16 +130,17 @@ skip-if = (os == "win" && debug) || e10s # bug 963492: win. bug 1040653: e10s.
 [browser_ruleview_lineNumbers.js]
 [browser_ruleview_livepreview.js]
 [browser_ruleview_mark_overridden_01.js]
 [browser_ruleview_mark_overridden_02.js]
 [browser_ruleview_mark_overridden_03.js]
 [browser_ruleview_mark_overridden_04.js]
 [browser_ruleview_mark_overridden_05.js]
 [browser_ruleview_mark_overridden_06.js]
+[browser_ruleview_mark_overridden_07.js]
 [browser_ruleview_mathml-element.js]
 [browser_ruleview_media-queries.js]
 [browser_ruleview_multiple-properties-duplicates.js]
 [browser_ruleview_multiple-properties-priority.js]
 [browser_ruleview_multiple-properties-unfinished_01.js]
 [browser_ruleview_multiple-properties-unfinished_02.js]
 [browser_ruleview_multiple_properties_01.js]
 [browser_ruleview_multiple_properties_02.js]
diff --git a/devtools/client/styleinspector/test/browser_ruleview_mark_overridden_07.js b/devtools/client/styleinspector/test/browser_ruleview_mark_overridden_07.js
new file mode 100644
index 0000000..94596c7
--- /dev/null
+++ b/devtools/client/styleinspector/test/browser_ruleview_mark_overridden_07.js
@@ -0,0 +1,72 @@
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+ http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Tests that the rule view marks overridden rules correctly based on the
+// specificity of the rule.
+
+const TEST_URI = `
+  <style type='text/css'>
+    #testid {
+      background-color: #f0c;
+    }
+
+    div {
+      color: red;
+      background-color: chartreuse !important;
+    }
+
+    body {
+      color: seagreen !important;
+      font-size: 79px;
+    }
+
+    span {
+      font-size: 12px;
+    }
+  </style>
+  <body>
+    <span>
+      <div id='testid' class='testclass'>Styled Node</div>
+    </span>
+  </body>
+`;
+
+add_task(function*() {
+  yield addTab("data:text/html;charset=utf-8," + encodeURIComponent(TEST_URI));
+  let {inspector, view} = yield openRuleView();
+  yield selectNode("#testid", inspector);
+  yield testMarkOverridden(inspector, view);
+});
+
+function* testMarkOverridden(inspector, view) {
+  let elementStyle = view._elementStyle;
+
+  let RESULTS = [
+    // We skip the first element
+    [],
+    [{name: "background-color", value: "#f0c", overridden: true}],
+    [{name: "color", value: "red", overridden: false},
+     {name: "background-color", value: "chartreuse", overridden: false}],
+    [{name: "font-size", value: "12px", overridden: false}],
+    [{name: "color", value: "seagreen", overridden: true},
+     {name: "font-size", value: "79px", overridden: true}]
+  ];
+
+  for (let i = 1; i < RESULTS.length; ++i) {
+    let idRule = elementStyle.rules[i];
+
+    for (let propIndex in RESULTS[i]) {
+      let expected = RESULTS[i][propIndex];
+      let prop = idRule.textProps[propIndex];
+
+      info("Checking rule " + i + ", property " + propIndex);
+
+      is(prop.name, expected.name, "check property name");
+      is(prop.value, expected.value, "check property value");
+      is(prop.overridden, expected.overridden, "check property overridden");
+    }
+  }
+}
