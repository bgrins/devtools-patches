# HG changeset patch
# User Gabriel Luong <gabriel.luong@gmail.com>
# Parent  01a02f03edc388873c6b5e90c78a2fb0063dd8e8
Bug 987365 - Add panel for pseudo-class lock options to rule view r=bgrins

diff --git a/browser/devtools/styleinspector/cssruleview.xhtml b/browser/devtools/styleinspector/cssruleview.xhtml
--- a/browser/devtools/styleinspector/cssruleview.xhtml
+++ b/browser/devtools/styleinspector/cssruleview.xhtml
@@ -40,16 +40,23 @@
     <div id="root" class="devtools-monospace">
       <div class="devtools-toolbar">
         <div class="devtools-searchbox">
           <input id="ruleview-searchbox"
                  class="devtools-searchinput devtools-rule-searchbox"
                  type="search" placeholder="&userStylesSearch;"/>
           <button id="ruleview-searchinput-clear" class="devtools-searchinput-clear"></button>
         </div>
+        <xul:toolbarbutton id="pseudo-class-panel-toggle"
+                           class="devtools-toolbarbutton command-button command-button-invertable"/>
+      </div>
+      <div id="pseudo-class-panel" class="devtools-toolbar">
+        <xul:checkbox id="pseudo-hover-toggle" checked="false" label=":hover"/>
+        <xul:checkbox id="pseudo-active-toggle" checked="false" label=":active"/>
+        <xul:checkbox id="pseudo-focus-toggle" checked="false" label=":focus"/>
       </div>
     </div>
 
     <div id="ruleview-container" class="ruleview devtools-monospace">
     </div>
 
   </body>
 </html>
diff --git a/browser/devtools/styleinspector/rule-view.js b/browser/devtools/styleinspector/rule-view.js
--- a/browser/devtools/styleinspector/rule-view.js
+++ b/browser/devtools/styleinspector/rule-view.js
@@ -1124,28 +1124,38 @@
   this._onAddRule = this._onAddRule.bind(this);
   this._onSelectAll = this._onSelectAll.bind(this);
   this._onCopy = this._onCopy.bind(this);
   this._onCopyColor = this._onCopyColor.bind(this);
   this._onToggleOrigSources = this._onToggleOrigSources.bind(this);
   this._onFilterStyles = this._onFilterStyles.bind(this);
   this._onClearSearch = this._onClearSearch.bind(this);
   this._onFilterTextboxContextMenu = this._onFilterTextboxContextMenu.bind(this);
+  this._onTogglePseudoClassPanel = this._onTogglePseudoClassPanel.bind(this);
+  this._onTogglePseudoClass = this._onTogglePseudoClass.bind(this);
 
   this.element = this.doc.getElementById("ruleview-container");
   this.searchField = this.doc.getElementById("ruleview-searchbox");
   this.searchClearButton = this.doc.getElementById("ruleview-searchinput-clear");
+  this.pseudoClassToggle = this.doc.getElementById("pseudo-class-panel-toggle");
+  this.hoverCheckbox = this.doc.getElementById("pseudo-hover-toggle");
+  this.activeCheckbox = this.doc.getElementById("pseudo-active-toggle");
+  this.focusCheckbox = this.doc.getElementById("pseudo-focus-toggle");
 
   this.searchClearButton.hidden = true;
 
   this.element.addEventListener("copy", this._onCopy);
   this.element.addEventListener("contextmenu", this._onContextMenu);
   this.searchField.addEventListener("input", this._onFilterStyles);
   this.searchField.addEventListener("contextmenu", this._onFilterTextboxContextMenu);
   this.searchClearButton.addEventListener("click", this._onClearSearch);
+  this.pseudoClassToggle.addEventListener("command", this._onTogglePseudoClassPanel);
+  this.hoverCheckbox.addEventListener("command", this._onTogglePseudoClass);
+  this.activeCheckbox.addEventListener("command", this._onTogglePseudoClass);
+  this.focusCheckbox.addEventListener("command", this._onTogglePseudoClass);
 
   this._handlePrefChange = this._handlePrefChange.bind(this);
   this._onSourcePrefChanged = this._onSourcePrefChanged.bind(this);
 
   this._prefObserver = new PrefObserver("devtools.");
   this._prefObserver.on(PREF_ORIG_SOURCES, this._onSourcePrefChanged);
   this._prefObserver.on(PREF_UA_STYLES, this._handlePrefChange);
   this._prefObserver.on(PREF_DEFAULT_COLOR_UNIT, this._handlePrefChange);
@@ -1698,18 +1708,28 @@
 
     // Remove bound listeners
     this.element.removeEventListener("copy", this._onCopy);
     this.element.removeEventListener("contextmenu", this._onContextMenu);
     this.searchField.removeEventListener("input", this._onFilterStyles);
     this.searchField.removeEventListener("contextmenu",
       this._onFilterTextboxContextMenu);
     this.searchClearButton.removeEventListener("click", this._onClearSearch);
+    this.pseudoClassToggle.removeEventListener("command",
+      this._onTogglePseudoClassPanel);
+    this.hoverCheckbox.removeEventListener("command", this._onTogglePseudoClass);
+    this.activeCheckbox.removeEventListener("command", this._onTogglePseudoClass);
+    this.focusCheckbox.removeEventListener("command", this._onTogglePseudoClass);
+
     this.searchField = null;
     this.searchClearButton = null;
+    this.pseudoClassToggle = null;
+    this.hoverCheckbox = null;
+    this.activeCheckbox = null;
+    this.focusCheckbox = null;
 
     if (this.element.parentNode) {
       this.element.parentNode.removeChild(this.element);
     }
 
     if (this._elementStyle) {
       this._elementStyle.destroy();
     }
@@ -1769,16 +1789,39 @@
       }
     }
 
     return promise.all(promises).then(() => {
       return this._populate(true);
     });
   },
 
+  refreshPseudoClassPanel: function() {
+    this.hoverCheckbox.checked = false;
+    this.activeCheckbox.checked = false;
+    this.focusCheckbox.checked = false;
+
+    for (let pseudoClassLock of this._elementStyle.element.pseudoClassLocks) {
+      switch (pseudoClassLock) {
+        case ":hover": {
+          this.hoverCheckbox.checked = true;
+          break;
+        }
+        case ":active": {
+          this.activeCheckbox.checked = true;
+          break;
+        }
+        case ":focus": {
+          this.focusCheckbox.checked = true;
+          break;
+        }
+      }
+    }
+  },
+
   _populate: function(clearRules = false) {
     let elementStyle = this._elementStyle;
     return this._elementStyle.populate().then(() => {
       if (this._elementStyle != elementStyle || this.isDestroyed) {
         return;
       }
 
       if (clearRules) {
@@ -2090,17 +2133,35 @@
    * Clear all search filter highlights in the panel.
    */
   clearHighlight: function() {
     for (let element of this._highlightedElements) {
       element.classList.remove("ruleview-highlight");
     }
 
     this._highlightedElements = [];
-  }
+  },
+
+  _onTogglePseudoClassPanel: function() {
+    let panel = this.doc.getElementById("pseudo-class-panel");
+    let isOpen = panel.getAttribute("open");
+
+    if (isOpen) {
+      panel.removeAttribute("open");
+      panel.style.display = "none";
+    } else {
+      panel.setAttribute("open", "true");
+      panel.style.display = "-moz-box";
+    }
+  },
+
+  _onTogglePseudoClass: function(event) {
+    let target = event.explicitOriginalTarget;
+    this.inspector.togglePseudoClass(target.label);
+   }
 };
 
 /**
  * Create a RuleEditor.
  *
  * @param {CssRuleView} aRuleView
  *        The CssRuleView containg the document holding this rule editor.
  * @param {Rule} aRule
diff --git a/browser/devtools/styleinspector/ruleview.css b/browser/devtools/styleinspector/ruleview.css
--- a/browser/devtools/styleinspector/ruleview.css
+++ b/browser/devtools/styleinspector/ruleview.css
@@ -19,21 +19,25 @@
 
 #ruleview-container {
   -moz-user-select: text;
   overflow: auto;
   min-height: 0;
   flex: 1;
 }
 
-#root .devtools-toolbar {
+.devtools-toolbar {
   width: 100%;
   display: -moz-box;
 }
 
+#pseudo-class-panel {
+  display: none;
+}
+
 .ruleview {
   overflow: auto;
   -moz-user-select: text;
 }
 
 .ruleview-code {
   direction: ltr;
 }
diff --git a/browser/devtools/styleinspector/style-inspector.js b/browser/devtools/styleinspector/style-inspector.js
--- a/browser/devtools/styleinspector/style-inspector.js
+++ b/browser/devtools/styleinspector/style-inspector.js
@@ -75,21 +75,23 @@
         !this.inspector.selection.isElementNode()) {
       this.view.selectElement(null);
       return;
     }
 
     if (!event || event == "new-node-front") {
       let done = this.inspector.updating("rule-view");
       this.view.selectElement(this.inspector.selection.nodeFront).then(done, done);
+      this.view.refreshPseudoClassPanel();
     }
   },
 
   refresh: function() {
     if (this.isSidebarActive()) {
+      this.view.refreshPseudoClassPanel();
       this.view.refreshPanel();
     }
   },
 
   clearUserProperties: function() {
     if (this.view && this.view.store && this.view.store.userProperties) {
       this.view.store.userProperties.clear();
     }
