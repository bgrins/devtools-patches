
# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1471899616 25200
# Node ID 38dc3cdef4b381af91431c527f73bc661e39df1e
# Parent  11b5ed552ae2de47dd386eaf6aa03986f883a079
Bug 1304178 - Emit consistent args to new-messages for damp support with new frontend;r=linclark

MozReview-Commit-ID: 23PmnreOeMB

diff --git a/devtools/client/webconsole/new-console-output/test/mochitest/head.js b/devtools/client/webconsole/new-console-output/test/mochitest/head.js
--- a/devtools/client/webconsole/new-console-output/test/mochitest/head.js
+++ b/devtools/client/webconsole/new-console-output/test/mochitest/head.js
@@ -47,26 +47,29 @@ var openNewTabAndConsole = Task.async(fu
  * @param object options
  *        - hud: the webconsole
  *        - messages: Array[Object]. An array of messages to match. Current supported options:
  *            - text: Exact text match in .message-body
  */
 function waitForMessages({ hud, messages }) {
   return new Promise(resolve => {
     let numMatched = 0;
-    let receivedLog = hud.ui.on("new-messages", function messagesReceieved(e, newMessage) {
+    let receivedLog = hud.ui.on("new-messages", function messagesReceieved(e, newMessages) {
       for (let message of messages) {
         if (message.matched) {
           continue;
         }
 
-        if (newMessage.node.querySelector(".message-body").textContent == message.text) {
-          numMatched++;
-          message.matched = true;
-          info("Matched a message with text: " + message.text + ", still waiting for " + (messages.length - numMatched) + " messages");
+        for (let newMessage of newMessages) {
+          if (newMessage.node.querySelector(".message-body").textContent == message.text) {
+            numMatched++;
+            message.matched = true;
+            info("Matched a message with text: " + message.text + ", still waiting for " + (messages.length - numMatched) + " messages");
+            break;
+          }
         }
 
         if (numMatched === messages.length) {
           hud.ui.off("new-messages", messagesReceieved);
           resolve(receivedLog);
           return;
         }
       }
diff --git a/devtools/client/webconsole/webconsole.js b/devtools/client/webconsole/webconsole.js
--- a/devtools/client/webconsole/webconsole.js
+++ b/devtools/client/webconsole/webconsole.js
@@ -3265,20 +3265,20 @@ WebConsoleConnectionProxy.prototype = {
    * Dispatch a message add on the new frontend and emit an event for tests.
    */
   dispatchMessageAdd: function(packet) {
     this.webConsoleFrame.newConsoleOutput.dispatchMessageAdd(packet);
 
     // Return the last message in the DOM as the message that was just dispatched. This may not
     // always be true in the case of filtered messages, but it's close enough for our tests.
     let messageNodes = this.webConsoleFrame.experimentalOutputNode.querySelectorAll(".message");
-    this.webConsoleFrame.emit("new-messages", {
+    this.webConsoleFrame.emit("new-messages", new Set([{
       response: packet,
       node: messageNodes[messageNodes.length - 1],
-    });
+    }]));
   },
 
   /**
    * Batched dispatch of messages.
    */
   dispatchMessagesAdd: function(packets) {
     this.webConsoleFrame.newConsoleOutput.dispatchMessagesAdd(packets);
   },
diff --git a/testing/talos/talos/tests/devtools/addon/content/damp.js b/testing/talos/talos/tests/devtools/addon/content/damp.js
--- a/testing/talos/talos/tests/devtools/addon/content/damp.js
+++ b/testing/talos/talos/tests/devtools/addon/content/damp.js
@@ -109,30 +109,30 @@ Damp.prototype = {
       name: label + ".readHeapSnapshot",
       value: end - start
     });
     return Promise.resolve();
   },
 
   _consoleBulkLoggingTest: Task.async(function*() {
     let TOTAL_MESSAGES = 10;
+    let numMessages = 0;
     let tab = yield this.testSetup(SIMPLE_URL);
     let messageManager = tab.linkedBrowser.messageManager;
     let {toolbox} = yield this.openToolbox("webconsole");
     let webconsole = toolbox.getPanel("webconsole");
 
     // Resolve once the last message has been received.
     let allMessagesReceived = new Promise(resolve => {
       function receiveMessages(e, messages) {
-        for (let m of messages) {
-          if (m.node.textContent.includes("damp " + TOTAL_MESSAGES)) {
-            webconsole.hud.ui.off("new-messages", receiveMessages);
-            // Wait for the console to redraw
-            requestAnimationFrame(resolve);
-          }
+        numMessages += messages.size;
+        if (numMessages >= TOTAL_MESSAGES) {
+          webconsole.hud.ui.off("new-messages", receiveMessages);
+          // Wait for the console to redraw
+          requestAnimationFrame(resolve);
         }
       }
       webconsole.hud.ui.on("new-messages", receiveMessages);
     });
 
     // Load a frame script using a data URI so we can do logs
     // from the page.  So this is running in content.
     messageManager.loadFrameScript("data:,(" + encodeURIComponent(
