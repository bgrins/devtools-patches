# HG changeset patch
# Parent f14b47c390139d38f340918d15d95165642bde5c
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 1033855 - Do not show delete context menu item for project root;r=paul

diff --git a/browser/devtools/projecteditor/lib/plugins/delete/delete.js b/browser/devtools/projecteditor/lib/plugins/delete/delete.js
--- a/browser/devtools/projecteditor/lib/plugins/delete/delete.js
+++ b/browser/devtools/projecteditor/lib/plugins/delete/delete.js
@@ -12,33 +12,41 @@ const { getLocalizedString } = require("
 var DeletePlugin = Class({
   extends: Plugin,
   shouldConfirm: true,
 
   init: function(host) {
     this.host.addCommand(this, {
       id: "cmd-delete"
     });
-    this.host.createMenuItem({
+    this.contextMenuItem = this.host.createMenuItem({
       parent: this.host.contextMenuPopup,
       label: getLocalizedString("projecteditor.deleteLabel"),
       command: "cmd-delete"
     });
   },
 
   confirmDelete: function(resource) {
     let deletePromptMessage = resource.isDir ?
       getLocalizedString("projecteditor.deleteFolderPromptMessage") :
       getLocalizedString("projecteditor.deleteFilePromptMessage");
     return !this.shouldConfirm || confirm(
       getLocalizedString("projecteditor.deletePromptTitle"),
       deletePromptMessage
     );
   },
 
+  onContextMenuOpen: function(resource) {
+    if (!resource.parent) {
+      this.contextMenuItem.setAttribute("hidden", "true");
+    } else {
+      this.contextMenuItem.removeAttribute("hidden");
+    }
+  },
+
   onCommand: function(cmd) {
     if (cmd === "cmd-delete") {
       let tree = this.host.projectTree;
       let resource = tree.getSelectedResource();
 
       if (!this.confirmDelete(resource)) {
         return;
       }
diff --git a/browser/devtools/projecteditor/lib/projecteditor.js b/browser/devtools/projecteditor/lib/projecteditor.js
--- a/browser/devtools/projecteditor/lib/projecteditor.js
+++ b/browser/devtools/projecteditor/lib/projecteditor.js
@@ -82,16 +82,17 @@ var ProjectEditor = Class({
    */
   initialize: function(iframe, options = {}) {
     this._onTreeSelected = this._onTreeSelected.bind(this);
     this._onTreeResourceRemoved = this._onTreeResourceRemoved.bind(this);
     this._onEditorCreated = this._onEditorCreated.bind(this);
     this._onEditorActivated = this._onEditorActivated.bind(this);
     this._onEditorDeactivated = this._onEditorDeactivated.bind(this);
     this._updateMenuItems = this._updateMenuItems.bind(this);
+    this._updateContextMenuItems = this._updateContextMenuItems.bind(this);
     this.destroy = this.destroy.bind(this);
     this.menubar = options.menubar || null;
     this.menuindex = options.menuindex || null;
     this._menuEnabled = true;
     this._destroyed = false;
     this._loaded = false;
     this._pluginCommands = new Map();
     if (iframe) {
@@ -265,16 +266,23 @@ var ProjectEditor = Class({
     commands.forEach(window.goUpdateCommand);
 
     for (let c of this._pluginCommands.keys()) {
       window.goUpdateCommand(c);
     }
   },
 
   /**
+   * Enable / disable necessary menu items using globalOverlay.js.
+   */
+  _updateContextMenuItems: function() {
+    this.pluginDispatch("onContextMenuOpen");
+  },
+
+  /**
    * Destroy all objects on the iframe unload event.
    */
   destroy: function() {
     this._destroyed = true;
 
 
     // If been destroyed before the iframe finished loading, then
     // the properties below will not exist.
