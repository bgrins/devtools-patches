# HG changeset patch
# Parent f14b47c390139d38f340918d15d95165642bde5c
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 1033855 - Do not show delete context menu item for project root;r=harth

diff --git a/browser/devtools/projecteditor/lib/plugins/delete/delete.js b/browser/devtools/projecteditor/lib/plugins/delete/delete.js
--- a/browser/devtools/projecteditor/lib/plugins/delete/delete.js
+++ b/browser/devtools/projecteditor/lib/plugins/delete/delete.js
@@ -12,33 +12,46 @@ const { getLocalizedString } = require("
 var DeletePlugin = Class({
   extends: Plugin,
   shouldConfirm: true,
 
   init: function(host) {
     this.host.addCommand(this, {
       id: "cmd-delete"
     });
-    this.host.createMenuItem({
+    this.contextMenuItem = this.host.createMenuItem({
       parent: this.host.contextMenuPopup,
       label: getLocalizedString("projecteditor.deleteLabel"),
       command: "cmd-delete"
     });
   },
 
   confirmDelete: function(resource) {
     let deletePromptMessage = resource.isDir ?
       getLocalizedString("projecteditor.deleteFolderPromptMessage") :
       getLocalizedString("projecteditor.deleteFilePromptMessage");
     return !this.shouldConfirm || confirm(
       getLocalizedString("projecteditor.deletePromptTitle"),
       deletePromptMessage
     );
   },
 
+  onContextMenuOpen: function(resource) {
+    // Do not allow deletion of the top level items in the tree.  In the
+    // case of the Web IDE in particular this can leave the UI in a weird
+    // state. If we'd like to add ability to delete the project folder from
+    // the tree in the future, then the UI could be cleaned up by listening
+    // to the ProjectTree's "resource-removed" event.
+    if (!resource.parent) {
+      this.contextMenuItem.setAttribute("hidden", "true");
+    } else {
+      this.contextMenuItem.removeAttribute("hidden");
+    }
+  },
+
   onCommand: function(cmd) {
     if (cmd === "cmd-delete") {
       let tree = this.host.projectTree;
       let resource = tree.getSelectedResource();
 
       if (!this.confirmDelete(resource)) {
         return;
       }
diff --git a/browser/devtools/projecteditor/lib/projecteditor.js b/browser/devtools/projecteditor/lib/projecteditor.js
--- a/browser/devtools/projecteditor/lib/projecteditor.js
+++ b/browser/devtools/projecteditor/lib/projecteditor.js
@@ -57,16 +57,17 @@ require("projecteditor/plugins/status-ba
  *   - "onEditorDestroyed": When editor is destroyed
  *   - "onEditorSave": When editor is saved
  *   - "onEditorLoad": When editor is loaded
  *   - "onEditorActivated": When editor is activated
  *   - "onEditorChange": When editor is changed
  *   - "onEditorCursorActivity": When there is cursor activity in a text editor
  *   - "onCommand": When a command happens
  *   - "onEditorDestroyed": When editor is destroyed
+ *   - "onContextMenuOpen": When the context menu is opened on the project tree
  *
  * The events can be bound like so:
  *   projecteditor.on("onEditorCreated", (editor) => { });
  */
 var ProjectEditor = Class({
   extends: EventTarget,
 
   /**
@@ -82,16 +83,17 @@ var ProjectEditor = Class({
    */
   initialize: function(iframe, options = {}) {
     this._onTreeSelected = this._onTreeSelected.bind(this);
     this._onTreeResourceRemoved = this._onTreeResourceRemoved.bind(this);
     this._onEditorCreated = this._onEditorCreated.bind(this);
     this._onEditorActivated = this._onEditorActivated.bind(this);
     this._onEditorDeactivated = this._onEditorDeactivated.bind(this);
     this._updateMenuItems = this._updateMenuItems.bind(this);
+    this._updateContextMenuItems = this._updateContextMenuItems.bind(this);
     this.destroy = this.destroy.bind(this);
     this.menubar = options.menubar || null;
     this.menuindex = options.menuindex || null;
     this._menuEnabled = true;
     this._destroyed = false;
     this._loaded = false;
     this._pluginCommands = new Map();
     if (iframe) {
@@ -226,16 +228,17 @@ var ProjectEditor = Class({
 
     this.projectEditorCommandset = this.document.getElementById("projecteditor-commandset");
     this.projectEditorKeyset = this.document.getElementById("projecteditor-keyset");
 
     this.editorCommandset = this.document.getElementById("editMenuCommands");
     this.editorKeyset = this.document.getElementById("editMenuKeys");
 
     this.contextMenuPopup = this.document.getElementById("context-menu-popup");
+    this.contextMenuPopup.addEventListener("popupshowing", this._updateContextMenuItems);
 
     this.projectEditorCommandset.addEventListener("command", (evt) => {
       evt.stopPropagation();
       evt.preventDefault();
       this.pluginDispatch("onCommand", evt.target.id, evt.target);
     });
   },
 
@@ -265,16 +268,25 @@ var ProjectEditor = Class({
     commands.forEach(window.goUpdateCommand);
 
     for (let c of this._pluginCommands.keys()) {
       window.goUpdateCommand(c);
     }
   },
 
   /**
+   * Enable / disable necessary context menu items by passing an event
+   * onto plugins.
+   */
+  _updateContextMenuItems: function() {
+    let resource = this.projectTree.getSelectedResource();
+    this.pluginDispatch("onContextMenuOpen", resource);
+  },
+
+  /**
    * Destroy all objects on the iframe unload event.
    */
   destroy: function() {
     this._destroyed = true;
 
 
     // If been destroyed before the iframe finished loading, then
     // the properties below will not exist.
diff --git a/browser/devtools/projecteditor/test/browser_projecteditor_delete_file.js b/browser/devtools/projecteditor/test/browser_projecteditor_delete_file.js
--- a/browser/devtools/projecteditor/test/browser_projecteditor_delete_file.js
+++ b/browser/devtools/projecteditor/test/browser_projecteditor_delete_file.js
@@ -8,73 +8,78 @@
 
 let test = asyncTest(function*() {
   let projecteditor = yield addProjectEditorTabForTempDirectory();
   ok(true, "ProjectEditor has loaded");
 
   let root = [...projecteditor.project.allStores()][0].root;
   is(root.path, TEMP_PATH, "The root store is set to the correct temp path.");
   for (let child of root.children) {
-    yield deleteWithContextMenu(projecteditor.projectTree.getViewContainer(child));
+    yield deleteWithContextMenu(projecteditor, projecteditor.projectTree.getViewContainer(child));
   }
 
-  function onPopupShow(contextMenu) {
-    let defer = promise.defer();
-    contextMenu.addEventListener("popupshown", function onpopupshown() {
-      contextMenu.removeEventListener("popupshown", onpopupshown);
-      defer.resolve();
-    });
-    return defer.promise;
-  }
+  yield testDeleteOnRoot(projecteditor, projecteditor.projectTree.getViewContainer(root));
+});
 
-  function openContextMenuOn(node) {
-    EventUtils.synthesizeMouseAtCenter(
-      node,
-      {button: 2, type: "contextmenu"},
-      node.ownerDocument.defaultView
-    );
-  }
 
-  function deleteWithContextMenu(container) {
-    let defer = promise.defer();
+function openContextMenuOn(node) {
+  EventUtils.synthesizeMouseAtCenter(
+    node,
+    {button: 2, type: "contextmenu"},
+    node.ownerDocument.defaultView
+  );
+}
 
-    let resource = container.resource;
-    let popup = projecteditor.contextMenuPopup;
-    info ("Going to attempt deletion for: " + resource.path)
+function testDeleteOnRoot(projecteditor, container) {
+  let popup = projecteditor.contextMenuPopup;
+  let oncePopupShown = onPopupShow(popup);
+  openContextMenuOn(container.label);
+  yield oncePopupShown;
 
-    onPopupShow(popup).then(function () {
-      let deleteCommand = popup.querySelector("[command=cmd-delete]");
-      ok (deleteCommand, "Delete command exists in popup");
-      is (deleteCommand.getAttribute("hidden"), "", "Delete command is visible");
-      is (deleteCommand.getAttribute("disabled"), "", "Delete command is enabled");
+  let deleteCommand = popup.querySelector("[command=cmd-delete]");
+  ok (deleteCommand, "Delete command exists in popup");
+  is (deleteCommand.getAttribute("hidden"), "true", "Delete command is hidden");
+}
 
-      function onConfirmShown(aSubject) {
-        info("confirm dialog observed as expected");
-        Services.obs.removeObserver(onConfirmShown, "common-dialog-loaded");
-        Services.obs.removeObserver(onConfirmShown, "tabmodal-dialog-loaded");
+function deleteWithContextMenu(projecteditor, container) {
+  let defer = promise.defer();
 
-        projecteditor.project.on("refresh-complete", function refreshComplete() {
-          projecteditor.project.off("refresh-complete", refreshComplete);
-          OS.File.stat(resource.path).then(() => {
-            ok (false, "The file was not deleted");
-            defer.resolve();
-          }, (ex) => {
-            ok (ex instanceof OS.File.Error && ex.becauseNoSuchFile, "OS.File.stat promise was rejected because the file is gone");
-            defer.resolve();
-          });
+  let popup = projecteditor.contextMenuPopup;
+  let resource = container.resource;
+  info ("Going to attempt deletion for: " + resource.path);
+
+  onPopupShow(popup).then(function () {
+    let deleteCommand = popup.querySelector("[command=cmd-delete]");
+    ok (deleteCommand, "Delete command exists in popup");
+    is (deleteCommand.getAttribute("hidden"), "", "Delete command is visible");
+    is (deleteCommand.getAttribute("disabled"), "", "Delete command is enabled");
+
+    function onConfirmShown(aSubject) {
+      info("confirm dialog observed as expected");
+      Services.obs.removeObserver(onConfirmShown, "common-dialog-loaded");
+      Services.obs.removeObserver(onConfirmShown, "tabmodal-dialog-loaded");
+
+      projecteditor.project.on("refresh-complete", function refreshComplete() {
+        projecteditor.project.off("refresh-complete", refreshComplete);
+        OS.File.stat(resource.path).then(() => {
+          ok (false, "The file was not deleted");
+          defer.resolve();
+        }, (ex) => {
+          ok (ex instanceof OS.File.Error && ex.becauseNoSuchFile, "OS.File.stat promise was rejected because the file is gone");
+          defer.resolve();
         });
+      });
 
-        // Click the 'OK' button
-        aSubject.Dialog.ui.button0.click();
-      }
+      // Click the 'OK' button
+      aSubject.Dialog.ui.button0.click();
+    }
 
-      Services.obs.addObserver(onConfirmShown, "common-dialog-loaded", false);
-      Services.obs.addObserver(onConfirmShown, "tabmodal-dialog-loaded", false);
+    Services.obs.addObserver(onConfirmShown, "common-dialog-loaded", false);
+    Services.obs.addObserver(onConfirmShown, "tabmodal-dialog-loaded", false);
 
-      deleteCommand.click();
-      popup.hidePopup();
-    });
+    deleteCommand.click();
+    popup.hidePopup();
+  });
 
-    openContextMenuOn(container.label);
+  openContextMenuOn(container.label);
 
-    return defer.promise;
-  }
-});
\ No newline at end of file
+  return defer.promise;
+}
diff --git a/browser/devtools/projecteditor/test/browser_projecteditor_menubar_02.js b/browser/devtools/projecteditor/test/browser_projecteditor_menubar_02.js
--- a/browser/devtools/projecteditor/test/browser_projecteditor_menubar_02.js
+++ b/browser/devtools/projecteditor/test/browser_projecteditor_menubar_02.js
@@ -101,26 +101,8 @@ let test = asyncTest(function*() {
 function openAndCloseMenu(menu) {
   let shown = onPopupShow(menu)
   EventUtils.synthesizeMouseAtCenter(menu, {}, menu.ownerDocument.defaultView);
   yield shown;
   let hidden = onPopupHidden(menu)
   EventUtils.synthesizeMouseAtCenter(menu, {}, menu.ownerDocument.defaultView);
   yield hidden;
 }
-
-function onPopupShow(menu) {
-  let defer = promise.defer();
-  menu.addEventListener("popupshown", function onpopupshown() {
-    menu.removeEventListener("popupshown", onpopupshown);
-    defer.resolve();
-  });
-  return defer.promise;
-}
-
-function onPopupHidden(menu) {
-  let defer = promise.defer();
-  menu.addEventListener("popuphidden", function onpopupshown() {
-    menu.removeEventListener("popuphidden", onpopupshown);
-    defer.resolve();
-  });
-  return defer.promise;
-}
diff --git a/browser/devtools/projecteditor/test/head.js b/browser/devtools/projecteditor/test/head.js
--- a/browser/devtools/projecteditor/test/head.js
+++ b/browser/devtools/projecteditor/test/head.js
@@ -298,8 +298,27 @@ function onceEditorActivated(projectedit
 
 function onceEditorSave(projecteditor) {
   let def = promise.defer();
   projecteditor.once("onEditorSave", (editor, resource) => {
     def.resolve(resource);
   });
   return def.promise;
 }
+
+function onPopupShow(menu) {
+  let defer = promise.defer();
+  menu.addEventListener("popupshown", function onpopupshown() {
+    menu.removeEventListener("popupshown", onpopupshown);
+    defer.resolve();
+  });
+  return defer.promise;
+}
+
+function onPopupHidden(menu) {
+  let defer = promise.defer();
+  menu.addEventListener("popuphidden", function onpopuphidden() {
+    menu.removeEventListener("popuphidden", onpopuphidden);
+    defer.resolve();
+  });
+  return defer.promise;
+}
+
