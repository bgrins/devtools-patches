From: James Long <longster@gmail.com>
Bug 1191916 - only enable step in/over/out buttons if actually paused at a location


diff --git a/browser/devtools/debugger/debugger-controller.js b/browser/devtools/debugger/debugger-controller.js
index 704e8c1..26810cd 100644
--- a/browser/devtools/debugger/debugger-controller.js
+++ b/browser/devtools/debugger/debugger-controller.js
@@ -567,17 +567,20 @@ ThreadState.prototype = {
         DebuggerView.Sources.showBreakpointConditionThrownMessage(
           aLocation,
           aPacket.why.message
         );
       }
     }
 
     this.interruptedByResumeButton = false;
-    DebuggerView.Toolbar.toggleResumeButtonState(this.activeThread.state);
+    DebuggerView.Toolbar.toggleResumeButtonState(
+      this.activeThread.state,
+      aPacket ? aPacket.frame : false
+    );
 
     if (gTarget && (aEvent == "paused" || aEvent == "resumed")) {
       gTarget.emit("thread-" + aEvent);
     }
   }
 };
 
 /**
diff --git a/browser/devtools/debugger/test/browser.ini b/browser/devtools/debugger/test/browser.ini
index 2db75a3..8e1143b 100644
--- a/browser/devtools/debugger/test/browser.ini
+++ b/browser/devtools/debugger/test/browser.ini
@@ -302,16 +302,18 @@ skip-if = e10s && debug
 [browser_dbg_parser-09.js]
 skip-if = e10s && debug
 [browser_dbg_parser-10.js]
 skip-if = e10s && debug
 [browser_dbg_pause-exceptions-01.js]
 skip-if = e10s && debug
 [browser_dbg_pause-exceptions-02.js]
 skip-if = e10s && debug
+[browser_dbg_pause-no-step.js]
+skip-if = e10s && debug
 [browser_dbg_pause-resume.js]
 skip-if = e10s && debug
 [browser_dbg_pause-warning.js]
 skip-if = e10s && debug
 [browser_dbg_paused-keybindings.js]
 skip-if = e10s
 [browser_dbg_pretty-print-01.js]
 skip-if = e10s && debug
diff --git a/browser/devtools/debugger/test/browser_dbg_pause-no-step.js b/browser/devtools/debugger/test/browser_dbg_pause-no-step.js
new file mode 100644
index 0000000..de93210
--- /dev/null
+++ b/browser/devtools/debugger/test/browser_dbg_pause-no-step.js
@@ -0,0 +1,99 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests if stepping only is enabled when paused with a location
+ */
+
+const TAB_URL = EXAMPLE_URL + "doc_pause-exceptions.html";
+
+let gTab, gPanel, gDebugger;
+let gResumeButton, gStepOverButton, gStepOutButton, gStepInButton;
+let gResumeKey, gFrames, gSources;
+
+function test() {
+  initDebugger(TAB_URL).then(([aTab,, aPanel]) => {
+    gTab = aTab;
+    gPanel = aPanel;
+    gDebugger = gPanel.panelWin;
+    gResumeButton = gDebugger.document.getElementById("resume");
+    gStepOverButton = gDebugger.document.getElementById("step-over");
+    gStepInButton = gDebugger.document.getElementById("step-in");
+    gStepOutButton = gDebugger.document.getElementById("step-out");
+    gResumeKey = gDebugger.document.getElementById("resumeKey");
+    gFrames = gDebugger.DebuggerView.StackFrames;
+    gSources = gDebugger.DebuggerView.Sources;
+
+    testPause();
+  });
+}
+
+function testPause() {
+  is(gDebugger.gThreadClient.paused, false,
+    "Should be running after starting the test.");
+
+  is(gStepOutButton.disabled, true,
+     "Stepping out button should be disabled");
+
+  is(gStepInButton.disabled, true,
+     "Stepping in button should be disabled");
+
+  is(gStepOverButton.disabled, true,
+     "Stepping over button should be disabled");
+
+  gDebugger.gThreadClient.addOneTimeListener("paused", () => {
+    // Nothing should happen here because the button is disabled. If
+    // this runs any code, there will be errors and the test will fail.
+    EventUtils.sendMouseEvent({ type: "mousedown" }, gStepOverButton, gDebugger);
+
+    is(gDebugger.gThreadClient.paused, true,
+      "Should be paused after an interrupt request.");
+
+    is(gStepOutButton.disabled, true,
+       "Stepping out button should still be disabled");
+
+    is(gStepInButton.disabled, true,
+       "Stepping in button should still be disabled");
+
+    is(gStepOverButton.disabled, true,
+       "Stepping over button should still be disabled");
+
+    is(gFrames.itemCount, 0,
+       "Should have no frames when paused in the main loop.");
+
+    gDebugger.gThreadClient.resume(testBreakAtLocation);
+  });
+
+  EventUtils.sendMouseEvent({ type: "mousedown" }, gResumeButton, gDebugger);
+}
+
+function testBreakAtLocation() {
+  gDebugger.gThreadClient.addOneTimeListener("paused", () => {
+    is(gStepOutButton.disabled, false,
+       "Stepping out button should be enabled");
+
+    is(gStepInButton.disabled, false,
+       "Stepping in button should be enabled");
+
+    is(gStepOverButton.disabled, false,
+       "Stepping over button should be enabled");
+
+    resumeDebuggerThenCloseAndFinish(gPanel);
+  });
+
+  BrowserTestUtils.synthesizeMouseAtCenter('button', {}, gBrowser.selectedBrowser);
+}
+
+
+registerCleanupFunction(function() {
+  gTab = null;
+  gPanel = null;
+  gDebugger = null;
+  gResumeButton = null;
+  gStepOverButton = null;
+  gStepInButton = null;
+  gStepOutButton = null;
+  gResumeKey = null;
+  gFrames = null;
+  gSources = null;
+});
diff --git a/browser/devtools/debugger/views/toolbar-view.js b/browser/devtools/debugger/views/toolbar-view.js
index b5daaf4..6572136 100644
--- a/browser/devtools/debugger/views/toolbar-view.js
+++ b/browser/devtools/debugger/views/toolbar-view.js
@@ -59,16 +59,18 @@ ToolbarView.prototype = {
     this._resumeButton.addEventListener("mousedown", this._onResumePressed, false);
     this._stepOverButton.addEventListener("mousedown", this._onStepOverPressed, false);
     this._stepInButton.addEventListener("mousedown", this._onStepInPressed, false);
     this._stepOutButton.addEventListener("mousedown", this._onStepOutPressed, false);
 
     this._stepOverButton.setAttribute("tooltiptext", this._stepOverTooltip);
     this._stepInButton.setAttribute("tooltiptext", this._stepInTooltip);
     this._stepOutButton.setAttribute("tooltiptext", this._stepOutTooltip);
+    this._toggleButtonsState({ enabled: false });
+
     this._addCommands();
   },
 
   /**
    * Destruction function, called when the debugger is closed.
    */
   destroy: function() {
     dumpn("Destroying the ToolbarView");
@@ -107,27 +109,47 @@ ToolbarView.prototype = {
   },
 
   /**
    * Sets the resume button state based on the debugger active thread.
    *
    * @param string aState
    *        Either "paused" or "attached".
    */
-  toggleResumeButtonState: function(aState) {
+  toggleResumeButtonState: function(aState, hasLocation) {
     // If we're paused, check and show a resume label on the button.
     if (aState == "paused") {
       this._resumeButton.setAttribute("checked", "true");
       this._resumeButton.setAttribute("tooltiptext", this._resumeTooltip);
+
+      // Only enable the stepping buttons if we are paused at a
+      // specific location. In the future, hopefully we'll always be
+      // paused at a location, but currently you can pause the entire
+      // engine at any point without knowing the location.
+      if(hasLocation) {
+        this._toggleButtonsState({ enabled: true });
+      }
     }
     // If we're attached, do the opposite.
     else if (aState == "attached") {
       this._resumeButton.removeAttribute("checked");
       this._resumeButton.setAttribute("tooltiptext", this._pauseTooltip);
-    }
+      this._toggleButtonsState({ enabled: false });
+   }
+  },
+
+  _toggleButtonsState: function({ enabled }) {
+    const buttons = [
+      this._stepOutButton,
+      this._stepInButton,
+      this._stepOverButton
+    ];
+    for(let button of buttons) {
+      button.disabled = !enabled;
+    };
   },
 
   /**
    * Listener handling the toggle button click event.
    */
   _onTogglePanesPressed: function() {
     DebuggerView.toggleInstrumentsPane({
       visible: DebuggerView.instrumentsPaneHidden,
@@ -152,41 +174,42 @@ ToolbarView.prototype = {
       this.activeThread.interrupt();
     }
   },
 
   /**
    * Listener handling the step over button click event.
    */
   _onStepOverPressed: function() {
-    if (this.activeThread.paused) {
+    if (this.activeThread.paused && !this._stepOverButton.disabled) {
       this.StackFrames.currentFrameDepth = -1;
       this.activeThread.stepOver(this.resumptionWarnFunc);
     }
   },
 
   /**
    * Listener handling the step in button click event.
    */
   _onStepInPressed: function() {
-    if (this.StackFrames._currentFrameDescription != FRAME_TYPE.NORMAL) {
+    if (this.StackFrames._currentFrameDescription != FRAME_TYPE.NORMAL ||
+       this._stepInButton.disabled) {
       return;
     }
 
     if (this.activeThread.paused) {
       this.StackFrames.currentFrameDepth = -1;
       this.activeThread.stepIn(this.resumptionWarnFunc);
     }
   },
 
   /**
    * Listener handling the step out button click event.
    */
   _onStepOutPressed: function() {
-    if (this.activeThread.paused) {
+    if (this.activeThread.paused && !this._stepOutButton.disabled) {
       this.StackFrames.currentFrameDepth = -1;
       this.activeThread.stepOut(this.resumptionWarnFunc);
     }
   },
 
   _instrumentsPaneToggleButton: null,
   _resumeButton: null,
   _stepOverButton: null,
diff --git a/browser/themes/shared/devtools/debugger.css b/browser/themes/shared/devtools/debugger.css
index 523961a..97eb3b0 100644
--- a/browser/themes/shared/devtools/debugger.css
+++ b/browser/themes/shared/devtools/debugger.css
@@ -571,22 +571,22 @@
   }
 
   #resume[checked] {
     list-style-image: url(debugger-play@2x.png);
     -moz-image-region: rect(0px,64px,32px,32px);
   }
 }
 
-#resume ~ toolbarbutton {
+#debugger-controls toolbarbutton {
   transition: opacity 0.15s ease-in-out;
 }
 
-#resume:not([checked]) ~ toolbarbutton {
-  opacity: 0.5;
+#debugger-controls toolbarbutton[disabled] {
+    opacity: .5;
 }
 
 #step-over {
   list-style-image: url(debugger-step-over.png);
 }
 
 #step-in {
   list-style-image: url(debugger-step-in.png);
