# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  d5a378327e88b886d397a978e5cba2937578c9eb
Debugging lw theme

diff --git a/browser/base/content/browser-devedition.js b/browser/base/content/browser-devedition.js
--- a/browser/base/content/browser-devedition.js
+++ b/browser/base/content/browser-devedition.js
@@ -23,17 +23,20 @@ let DevEdition = {
 
   init: function () {
     this.initialized = true;
     Services.prefs.addObserver(this._devtoolsThemePrefName, this, false);
     Services.obs.addObserver(this, "lightweight-theme-styling-update", false);
     this._updateDevtoolsThemeAttribute();
 
     if (this.isThemeCurrentlyApplied) {
-      this._toggleStyleSheet(true);
+      // XXX: Officially enable the Lightweight theme, which will disable the Default
+      // theme if needed
+      LightweightThemeManager.currentTheme = LightweightThemeManager.currentTheme;
+      // this._toggleStyleSheet(true);
     }
   },
 
   createStyleSheet: function() {
     let styleSheetAttr = `href="${this.styleSheetLocation}" type="text/css"`;
     this.styleSheet = document.createProcessingInstruction(
       "xml-stylesheet", styleSheetAttr);
     this.styleSheet.addEventListener("load", this);
diff --git a/toolkit/components/telemetry/TelemetryEnvironment.jsm b/toolkit/components/telemetry/TelemetryEnvironment.jsm
--- a/toolkit/components/telemetry/TelemetryEnvironment.jsm
+++ b/toolkit/components/telemetry/TelemetryEnvironment.jsm
@@ -437,20 +437,20 @@ EnvironmentAddonBuilder.prototype = {
    * @returns Promise<Object> This returns a Promise resolved with a status object with the following members:
    *   changed - Whether the environment changed.
    *   oldEnvironment - Only set if a change occured, contains the environment data before the change.
    */
   _updateAddons: Task.async(function* () {
     this._environment._log.trace("_updateAddons");
     let personaId = null;
 #ifndef MOZ_WIDGET_GONK
-    let theme = LightweightThemeManager.currentTheme;
-    if (theme) {
-      personaId = theme.id;
-    }
+    // let theme = LightweightThemeManager.currentTheme;
+    // if (theme) {
+    //   personaId = theme.id;
+    // }
 #endif
 
     let addons = {
       activeAddons: yield this._getActiveAddons(),
       theme: yield this._getActiveTheme(),
       activePlugins: this._getActivePlugins(),
       activeGMPlugins: yield this._getActiveGMPlugins(),
       activeExperiment: this._getActiveExperiment(),
diff --git a/toolkit/modules/LightweightThemeConsumer.jsm b/toolkit/modules/LightweightThemeConsumer.jsm
--- a/toolkit/modules/LightweightThemeConsumer.jsm
+++ b/toolkit/modules/LightweightThemeConsumer.jsm
@@ -28,19 +28,19 @@ this.LightweightThemeConsumer =
   }
 
   let screen = this._win.screen;
   this._lastScreenWidth = screen.width;
   this._lastScreenHeight = screen.height;
 
   Services.obs.addObserver(this, "lightweight-theme-styling-update", false);
 
-  var temp = {};
-  Cu.import("resource://gre/modules/LightweightThemeManager.jsm", temp);
-  this._update(temp.LightweightThemeManager.currentThemeForDisplay);
+  // var temp = {};
+  // Cu.import("resource://gre/modules/LightweightThemeManager.jsm", temp);
+  // this._update(temp.LightweightThemeManager.currentThemeForDisplay);
   this._win.addEventListener("resize", this);
 }
 
 LightweightThemeConsumer.prototype = {
   _lastData: null,
   _lastScreenWidth: null,
   _lastScreenHeight: null,
   // Whether the active lightweight theme should be shown on the window.
diff --git a/toolkit/mozapps/extensions/LightweightThemeManager.jsm b/toolkit/mozapps/extensions/LightweightThemeManager.jsm
--- a/toolkit/mozapps/extensions/LightweightThemeManager.jsm
+++ b/toolkit/mozapps/extensions/LightweightThemeManager.jsm
@@ -4,16 +4,17 @@
 
 "use strict";
 
 this.EXPORTED_SYMBOLS = ["LightweightThemeManager"];
 
 const Cc = Components.classes;
 const Ci = Components.interfaces;
 
+    const {console} = Components.utils.import("resource://gre/modules/devtools/Console.jsm", {});
 Components.utils.import("resource://gre/modules/XPCOMUtils.jsm");
 Components.utils.import("resource://gre/modules/AddonManager.jsm");
 Components.utils.import("resource://gre/modules/Services.jsm");
 
 const ID_SUFFIX              = "@personas.mozilla.org";
 const PREF_LWTHEME_TO_SELECT = "extensions.lwThemeToSelect";
 const PREF_GENERAL_SKINS_SELECTEDSKIN = "general.skins.selectedSkin";
 const PREF_EM_DSS_ENABLED    = "extensions.dss.enabled";
@@ -106,16 +107,18 @@ this.LightweightThemeManager = {
                                                  Ci.nsISupportsString).data);
     } catch (e) { }
 
     themes.push(...this._builtInThemes.values());
     return themes;
   },
 
   get currentTheme () {
+    console.trace();
+    // return null;
     let selectedThemeID = null;
     try {
       selectedThemeID = _prefs.getCharPref("selectedThemeID");
     } catch (e) {}
 
     let data = null;
     if (selectedThemeID) {
       data = this.getUsedTheme(selectedThemeID);
@@ -277,16 +280,17 @@ this.LightweightThemeManager = {
 
   /**
    * Switches to a new lightweight theme.
    *
    * @param  aData
    *         The lightweight theme to switch to
    */
   themeChanged: function LightweightThemeManager_themeChanged(aData) {
+    console.trace();
     if (_previewTimer) {
       _previewTimer.cancel();
       _previewTimer = null;
     }
 
     if (aData) {
       let usedThemes = _usedThemesExceptId(aData.id);
       usedThemes.unshift(aData);
@@ -340,16 +344,18 @@ this.LightweightThemeManager = {
    *         The ID of the newly enabled add-on
    * @param  aType
    *         The type of the newly enabled add-on
    * @param  aPendingRestart
    *         true if the newly enabled add-on will only become enabled after a
    *         restart
    */
   addonChanged: function LightweightThemeManager_addonChanged(aId, aType, aPendingRestart) {
+    console.log("Addon changed", aId, aType, aPendingRestart);
+    console.trace();
     if (aType != ADDON_TYPE)
       return;
 
     let id = _getInternalID(aId);
     let current = this.currentTheme;
 
     try {
       let next = Services.prefs.getCharPref(PREF_LWTHEME_TO_SELECT);
@@ -630,16 +636,18 @@ function _getInternalID(id) {
     return null;
   let len = id.length - ID_SUFFIX.length;
   if (len > 0 && id.substring(len) == ID_SUFFIX)
     return id.substring(0, len);
   return null;
 }
 
 function _setCurrentTheme(aData, aLocal) {
+  console.log("SET CURENT THEME", aData);
+  console.trace();
   aData = _sanitizeTheme(aData, null, aLocal);
 
   let needsRestart = (ADDON_TYPE == "theme") &&
                      Services.prefs.prefHasUserValue(PREF_GENERAL_SKINS_SELECTEDSKIN);
 
   let cancel = Cc["@mozilla.org/supports-PRBool;1"].createInstance(Ci.nsISupportsPRBool);
   cancel.data = false;
   Services.obs.notifyObservers(cancel, "lightweight-theme-change-requested",
