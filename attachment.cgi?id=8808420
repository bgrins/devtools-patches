# HG changeset patch
# User Lin Clark <lclark@mozilla.com>
Add caches.


diff --git a/devtools/client/performance/test/browser_perf-console-record-02.js b/devtools/client/performance/test/browser_perf-console-record-02.js
index 36d0a54..2f73c4d 100644
--- a/devtools/client/performance/test/browser_perf-console-record-02.js
+++ b/devtools/client/performance/test/browser_perf-console-record-02.js
@@ -11,16 +11,22 @@ const { Constants } = require("devtools/client/performance/modules/constants");
 const { SIMPLE_URL } = require("devtools/client/performance/test/helpers/urls");
 const { initPerformanceInTab, initConsoleInNewTab, teardownToolboxAndRemoveTab } = require("devtools/client/performance/test/helpers/panel-utils");
 const { waitForRecordingStoppedEvents } = require("devtools/client/performance/test/helpers/actions");
 const { waitUntil } = require("devtools/client/performance/test/helpers/wait-utils");
 const { times } = require("devtools/client/performance/test/helpers/event-utils");
 const { getSelectedRecording } = require("devtools/client/performance/test/helpers/recording-utils");
 
 add_task(function* () {
+  yield SpecialPowers.pushPrefEnv({
+    "set": [
+      // Use the split console so console messages will be rendered immediately
+      ["devtools.toolbox.splitconsoleEnabled", true],
+    ]
+  });
   let { target, console } = yield initConsoleInNewTab({
     url: SIMPLE_URL,
     win: window
   });
 
   yield console.profile("rust");
   yield console.profile("rust2");
 
diff --git a/devtools/client/performance/test/browser_perf-console-record-03.js b/devtools/client/performance/test/browser_perf-console-record-03.js
index a12aab5..a921043 100644
--- a/devtools/client/performance/test/browser_perf-console-record-03.js
+++ b/devtools/client/performance/test/browser_perf-console-record-03.js
@@ -9,16 +9,22 @@
 
 const { SIMPLE_URL } = require("devtools/client/performance/test/helpers/urls");
 const { initPerformanceInTab, initConsoleInNewTab, teardownToolboxAndRemoveTab } = require("devtools/client/performance/test/helpers/panel-utils");
 const { waitForRecordingStoppedEvents } = require("devtools/client/performance/test/helpers/actions");
 const { waitUntil } = require("devtools/client/performance/test/helpers/wait-utils");
 const { getSelectedRecording } = require("devtools/client/performance/test/helpers/recording-utils");
 
 add_task(function* () {
+  yield SpecialPowers.pushPrefEnv({
+    "set": [
+      // Use the split console so console messages will be rendered immediately
+      ["devtools.toolbox.splitconsoleEnabled", true],
+    ]
+  });
   let { target, console } = yield initConsoleInNewTab({
     url: SIMPLE_URL,
     win: window
   });
 
   yield console.profile("rust");
   yield console.profileEnd("rust");
   yield console.profile("rust2");
diff --git a/devtools/client/performance/test/browser_perf-console-record-04.js b/devtools/client/performance/test/browser_perf-console-record-04.js
index 6465bc7..ff888ec 100644
--- a/devtools/client/performance/test/browser_perf-console-record-04.js
+++ b/devtools/client/performance/test/browser_perf-console-record-04.js
@@ -10,16 +10,22 @@
 const { Constants } = require("devtools/client/performance/modules/constants");
 const { SIMPLE_URL } = require("devtools/client/performance/test/helpers/urls");
 const { initPerformanceInTab, initConsoleInNewTab, teardownToolboxAndRemoveTab } = require("devtools/client/performance/test/helpers/panel-utils");
 const { waitForRecordingStartedEvents, waitForRecordingStoppedEvents } = require("devtools/client/performance/test/helpers/actions");
 const { times } = require("devtools/client/performance/test/helpers/event-utils");
 const { getSelectedRecording } = require("devtools/client/performance/test/helpers/recording-utils");
 
 add_task(function* () {
+  yield SpecialPowers.pushPrefEnv({
+    "set": [
+      // Use the split console so console messages will be rendered immediately
+      ["devtools.toolbox.splitconsoleEnabled", true],
+    ]
+  });
   let { target, console } = yield initConsoleInNewTab({
     url: SIMPLE_URL,
     win: window
   });
 
   let { panel } = yield initPerformanceInTab({ tab: target.tab });
   let { EVENTS, PerformanceController, OverviewView } = panel.panelWin;
 
diff --git a/devtools/client/performance/test/browser_perf-console-record-05.js b/devtools/client/performance/test/browser_perf-console-record-05.js
index 373fd5b..ac69b5b 100644
--- a/devtools/client/performance/test/browser_perf-console-record-05.js
+++ b/devtools/client/performance/test/browser_perf-console-record-05.js
@@ -10,16 +10,22 @@
 const { Constants } = require("devtools/client/performance/modules/constants");
 const { SIMPLE_URL } = require("devtools/client/performance/test/helpers/urls");
 const { initPerformanceInTab, initConsoleInNewTab, teardownToolboxAndRemoveTab } = require("devtools/client/performance/test/helpers/panel-utils");
 const { waitForRecordingStartedEvents, waitForRecordingStoppedEvents } = require("devtools/client/performance/test/helpers/actions");
 const { times } = require("devtools/client/performance/test/helpers/event-utils");
 const { getSelectedRecording } = require("devtools/client/performance/test/helpers/recording-utils");
 
 add_task(function* () {
+  yield SpecialPowers.pushPrefEnv({
+    "set": [
+      // Use the split console so console messages will be rendered immediately
+      ["devtools.toolbox.splitconsoleEnabled", true],
+    ]
+  });
   let { target, console } = yield initConsoleInNewTab({
     url: SIMPLE_URL,
     win: window
   });
 
   let { panel } = yield initPerformanceInTab({ tab: target.tab });
   let { EVENTS, PerformanceController, OverviewView } = panel.panelWin;
 
diff --git a/devtools/client/performance/test/browser_perf-console-record-06.js b/devtools/client/performance/test/browser_perf-console-record-06.js
index f1057c2..4198cd6 100644
--- a/devtools/client/performance/test/browser_perf-console-record-06.js
+++ b/devtools/client/performance/test/browser_perf-console-record-06.js
@@ -9,16 +9,22 @@
 const { Constants } = require("devtools/client/performance/modules/constants");
 const { SIMPLE_URL } = require("devtools/client/performance/test/helpers/urls");
 const { initPerformanceInTab, initConsoleInNewTab, teardownToolboxAndRemoveTab } = require("devtools/client/performance/test/helpers/panel-utils");
 const { waitForRecordingStartedEvents, waitForRecordingStoppedEvents } = require("devtools/client/performance/test/helpers/actions");
 const { times } = require("devtools/client/performance/test/helpers/event-utils");
 const { getSelectedRecording } = require("devtools/client/performance/test/helpers/recording-utils");
 
 add_task(function* () {
+  yield SpecialPowers.pushPrefEnv({
+    "set": [
+      // Use the split console so console messages will be rendered immediately
+      ["devtools.toolbox.splitconsoleEnabled", true],
+    ]
+  });
   let { target, console } = yield initConsoleInNewTab({
     url: SIMPLE_URL,
     win: window
   });
 
   let { panel } = yield initPerformanceInTab({ tab: target.tab });
   let { EVENTS, PerformanceController, OverviewView } = panel.panelWin;
 
diff --git a/devtools/client/performance/test/browser_perf-console-record-07.js b/devtools/client/performance/test/browser_perf-console-record-07.js
index af8dc51..e981f07 100644
--- a/devtools/client/performance/test/browser_perf-console-record-07.js
+++ b/devtools/client/performance/test/browser_perf-console-record-07.js
@@ -10,16 +10,22 @@
 
 const { SIMPLE_URL } = require("devtools/client/performance/test/helpers/urls");
 const { initPerformanceInTab, initConsoleInNewTab, teardownToolboxAndRemoveTab } = require("devtools/client/performance/test/helpers/panel-utils");
 const { waitForRecordingStartedEvents, waitForRecordingStoppedEvents } = require("devtools/client/performance/test/helpers/actions");
 const { idleWait } = require("devtools/client/performance/test/helpers/wait-utils");
 const { getSelectedRecording } = require("devtools/client/performance/test/helpers/recording-utils");
 
 add_task(function* () {
+  yield SpecialPowers.pushPrefEnv({
+    "set": [
+      // Use the split console so console messages will be rendered immediately
+      ["devtools.toolbox.splitconsoleEnabled", true],
+    ]
+  });
   let { target, console } = yield initConsoleInNewTab({
     url: SIMPLE_URL,
     win: window
   });
 
   let { panel } = yield initPerformanceInTab({ tab: target.tab });
   let { PerformanceController } = panel.panelWin;
 
diff --git a/devtools/client/performance/test/browser_perf-console-record-08.js b/devtools/client/performance/test/browser_perf-console-record-08.js
index 2ad81c4..c46cc62 100644
--- a/devtools/client/performance/test/browser_perf-console-record-08.js
+++ b/devtools/client/performance/test/browser_perf-console-record-08.js
@@ -38,16 +38,22 @@ const SELECTED = 4;
 function hasBitFlag(expected, actual) {
   return !!(expected & actual);
 }
 
 add_task(function* () {
   // This test seems to take a very long time to finish on Linux VMs.
   requestLongerTimeout(4);
 
+  yield SpecialPowers.pushPrefEnv({
+    "set": [
+      // Use the split console so console messages will be rendered immediately
+      ["devtools.toolbox.splitconsoleEnabled", true],
+    ]
+  });
   let { target, console } = yield initConsoleInNewTab({
     url: SIMPLE_URL,
     win: window
   });
 
   let { panel } = yield initPerformanceInTab({ tab: target.tab });
   let { EVENTS, PerformanceController, OverviewView } = panel.panelWin;
 
diff --git a/devtools/client/performance/test/browser_perf-console-record-09.js b/devtools/client/performance/test/browser_perf-console-record-09.js
index 06c14fa..c07524d 100644
--- a/devtools/client/performance/test/browser_perf-console-record-09.js
+++ b/devtools/client/performance/test/browser_perf-console-record-09.js
@@ -10,16 +10,22 @@
 
 const { SIMPLE_URL } = require("devtools/client/performance/test/helpers/urls");
 const { initPerformanceInTab, initConsoleInNewTab, teardownToolboxAndRemoveTab } = require("devtools/client/performance/test/helpers/panel-utils");
 const { startRecording, stopRecording } = require("devtools/client/performance/test/helpers/actions");
 const { waitForRecordingStartedEvents } = require("devtools/client/performance/test/helpers/actions");
 const { idleWait } = require("devtools/client/performance/test/helpers/wait-utils");
 
 add_task(function* () {
+  yield SpecialPowers.pushPrefEnv({
+    "set": [
+      // Use the split console so console messages will be rendered immediately
+      ["devtools.toolbox.splitconsoleEnabled", true],
+    ]
+  });
   let { target, console } = yield initConsoleInNewTab({
     url: SIMPLE_URL,
     win: window
   });
 
   let { panel } = yield initPerformanceInTab({ tab: target.tab });
   let { PerformanceController } = panel.panelWin;
 
diff --git a/devtools/client/performance/test/browser_perf-recording-notices-03.js b/devtools/client/performance/test/browser_perf-recording-notices-03.js
index eeb4396..0d264db 100644
--- a/devtools/client/performance/test/browser_perf-recording-notices-03.js
+++ b/devtools/client/performance/test/browser_perf-recording-notices-03.js
@@ -20,16 +20,22 @@ const { setSelectedRecording } = require("devtools/client/performance/test/helpe
 add_task(function* () {
   // Make sure the profiler module is stopped so we can set a new buffer limit.
   pmmLoadFrameScripts(gBrowser);
   yield pmmStopProfiler();
 
   // Keep the profiler's buffer large, but still get to 1% relatively quick.
   Services.prefs.setIntPref(PROFILER_BUFFER_SIZE_PREF, 1000000);
 
+  yield SpecialPowers.pushPrefEnv({
+    "set": [
+      // Use the split console so console messages will be rendered immediately
+      ["devtools.toolbox.splitconsoleEnabled", true],
+    ]
+  });
   let { target, console } = yield initConsoleInNewTab({
     url: SIMPLE_URL,
     win: window
   });
 
   let { panel } = yield initPerformanceInTab({ tab: target.tab });
   let {
     gFront,
diff --git a/devtools/client/performance/test/browser_perf-telemetry-04.js b/devtools/client/performance/test/browser_perf-telemetry-04.js
index 362b547..c6860ae 100644
--- a/devtools/client/performance/test/browser_perf-telemetry-04.js
+++ b/devtools/client/performance/test/browser_perf-telemetry-04.js
@@ -6,16 +6,22 @@
  * Tests that the performance telemetry module records events at appropriate times.
  */
 
 const { SIMPLE_URL } = require("devtools/client/performance/test/helpers/urls");
 const { initPerformanceInTab, initConsoleInNewTab, teardownToolboxAndRemoveTab } = require("devtools/client/performance/test/helpers/panel-utils");
 const { waitForRecordingStartedEvents, waitForRecordingStoppedEvents } = require("devtools/client/performance/test/helpers/actions");
 
 add_task(function* () {
+  yield SpecialPowers.pushPrefEnv({
+    "set": [
+      // Use the split console so console messages will be rendered immediately
+      ["devtools.toolbox.splitconsoleEnabled", true],
+    ]
+  });
   let { target, console } = yield initConsoleInNewTab({
     url: SIMPLE_URL,
     win: window
   });
 
   let { panel } = yield initPerformanceInTab({ tab: target.tab });
   let { PerformanceController } = panel.panelWin;
 
diff --git a/devtools/client/themes/webconsole.css b/devtools/client/themes/webconsole.css
index c0c0177e..4ca1cde 100644
--- a/devtools/client/themes/webconsole.css
+++ b/devtools/client/themes/webconsole.css
@@ -665,25 +665,26 @@ a.learn-more-link.webconsole-learn-more-link {
 .theme-firebug .consoletable .theme-body {
   width: 100%;
   border-top: 1px solid #D7D7D7;
   border-bottom: 2px solid #D7D7D7;
   border-left: 1px solid #D7D7D7;
   border-right: 1px solid #D7D7D7;
 }
 
-
 /* NEW CONSOLE STYLES */
 
 #output-wrapper > div {
   position: absolute;
   top: 0;
   bottom: 0;
   left: 0;
   right: 0;
+  /* Make sure scrollbar doesn't flicker when JSTerm grows vertically */
+  overflow: hidden;
 }
 
 #output-container {
   height: 100%;
 }
 
 .webconsole-output-wrapper {
   display: flex;
@@ -693,17 +694,16 @@ a.learn-more-link.webconsole-learn-more-link {
 }
 
 .webconsole-filterbar-wrapper {
   flex-grow: 0;
 }
 
 .webconsole-output {
   flex: 1;
-  overflow: auto;
 }
 
 .webconsole-filterbar-primary {
   display: flex;
 }
 
 .devtools-toolbar.webconsole-filterbar-secondary {
   height: initial;
diff --git a/devtools/client/webconsole/new-console-output/actions/filters.js b/devtools/client/webconsole/new-console-output/actions/filters.js
index 05d0802..5d01c3a 100644
--- a/devtools/client/webconsole/new-console-output/actions/filters.js
+++ b/devtools/client/webconsole/new-console-output/actions/filters.js
@@ -11,37 +11,54 @@ const Services = require("Services");
 
 const {
   FILTER_TEXT_SET,
   FILTER_TOGGLE,
   FILTERS_CLEAR,
   PREFS,
 } = require("devtools/client/webconsole/new-console-output/constants");
 
+const { cellSizeCache } = require("devtools/client/webconsole/new-console-output/utils/caches");
+
 function filterTextSet(text) {
-  return {
-    type: FILTER_TEXT_SET,
-    text
+  return (dispatch) => {
+    // The indexes in the list of messages will no longer correspond to the same messages,
+    // so clear any cached row heights used by the React Virtualized Grid.
+    cellSizeCache.clearAllRowHeights();
+
+    dispatch({
+      type: FILTER_TEXT_SET,
+      text
+    });
   };
 }
 
 function filterToggle(filter) {
   return (dispatch, getState) => {
+    // The indexes in the list of messages will no longer correspond to the same messages,
+    // so clear any cached row heights used by the React Virtualized Grid.
+    cellSizeCache.clearAllRowHeights();
+
     dispatch({
       type: FILTER_TOGGLE,
       filter,
     });
+
     const filterState = getAllFilters(getState());
     Services.prefs.setBoolPref(PREFS.FILTER[filter.toUpperCase()],
       filterState.get(filter));
   };
 }
 
 function filtersClear() {
   return (dispatch, getState) => {
+    // The indexes in the list of messages will no longer correspond to the same messages,
+    // so clear any cached row heights used by the React Virtualized Grid.
+    cellSizeCache.clearAllRowHeights();
+
     dispatch({
       type: FILTERS_CLEAR,
     });
 
     const filterState = getAllFilters(getState());
     for (let filter in filterState) {
       Services.prefs.clearUserPref(PREFS.FILTER[filter.toUpperCase()]);
     }
diff --git a/devtools/client/webconsole/new-console-output/actions/messages.js b/devtools/client/webconsole/new-console-output/actions/messages.js
index 467e275..f0aabf1 100644
--- a/devtools/client/webconsole/new-console-output/actions/messages.js
+++ b/devtools/client/webconsole/new-console-output/actions/messages.js
@@ -6,16 +6,17 @@
 
 "use strict";
 
 const {
   prepareMessage
 } = require("devtools/client/webconsole/new-console-output/utils/messages");
 const { IdGenerator } = require("devtools/client/webconsole/new-console-output/utils/id-generator");
 const { batchActions } = require("devtools/client/webconsole/new-console-output/actions/enhancers");
+const { clearCaches } = require("devtools/client/webconsole/new-console-output/utils/caches");
 const {
   MESSAGE_ADD,
   MESSAGES_CLEAR,
   MESSAGE_OPEN,
   MESSAGE_CLOSE,
   MESSAGE_TYPE,
   MESSAGE_TABLE_RECEIVE,
 } = require("../constants");
@@ -28,27 +29,38 @@ function messageAdd(packet, idGenerator = null) {
   }
   let message = prepareMessage(packet, idGenerator);
   const addMessageAction = {
     type: MESSAGE_ADD,
     message
   };
 
   if (message.type === MESSAGE_TYPE.CLEAR) {
+    // Clear all caches that React Virtualized uses.
+    clearCaches();
+
     return batchActions([
-      messagesClear(),
+      // @TODO make batchActions support thunks so we can use messagesClear() instead.
+      // See https://github.com/abc123s/redux-batch-enhancer
+      {
+        type: MESSAGES_CLEAR
+      },
       addMessageAction,
     ]);
   }
   return addMessageAction;
 }
 
 function messagesClear() {
-  return {
-    type: MESSAGES_CLEAR
+  return (dispatch) => {
+    clearCaches();
+
+    dispatch({
+      type: MESSAGES_CLEAR
+    });
   };
 }
 
 function messageOpen(id) {
   return {
     type: MESSAGE_OPEN,
     id
   };
diff --git a/devtools/client/webconsole/new-console-output/components/console-output.js b/devtools/client/webconsole/new-console-output/components/console-output.js
index 1ba7f8d..c2f091f 100644
--- a/devtools/client/webconsole/new-console-output/components/console-output.js
+++ b/devtools/client/webconsole/new-console-output/components/console-output.js
@@ -1,125 +1,243 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const {
   createClass,
+  createElement,
   createFactory,
   DOM: dom,
   PropTypes
 } = require("devtools/client/shared/vendor/react");
-const ReactDOM = require("devtools/client/shared/vendor/react-dom");
+const { findDOMNode } = require("devtools/client/shared/vendor/react-dom");
+
+const {
+  defaultCellRangeRenderer,
+  AutoSizer,
+  Grid,
+} = require("devtools/client/shared/vendor/react-virtualized");
 const { connect } = require("devtools/client/shared/vendor/react-redux");
 
 const {
   getAllMessages,
   getAllMessagesUiById,
   getAllMessagesTableDataById,
   getAllGroupsById,
+  getLastForceScrollMessageIndex,
 } = require("devtools/client/webconsole/new-console-output/selectors/messages");
-const { getScrollSetting } = require("devtools/client/webconsole/new-console-output/selectors/ui");
 const MessageContainer = createFactory(require("devtools/client/webconsole/new-console-output/components/message-container").MessageContainer);
-
+const ScrollPositionManager = require("devtools/client/webconsole/new-console-output/components/scroll-position-manager");
+
+const { cellSizeCache } = require("devtools/client/webconsole/new-console-output/utils/caches");
+
+// @TODO Get an accurate scrollbar size.
+const SCROLLBAR_SIZE = 15;
+
+/**
+ * The container for the list of messages.
+ *
+ * This component is extremely stateful, managing its state outside of React's controled
+ * props/state system. So are it's helpers, ScrollPositionManager and KeyboardPager.
+ * This is for performance reasons. If similar performance can be achieved for tasks like
+ * bulk logging and scrolling with a less stateful approach, that would be preferable.
+ * However, many of these problems will be addressed with React Fiber, so the cost of
+ * refactoring may not be worth it.
+ */
 const ConsoleOutput = createClass({
 
   displayName: "ConsoleOutput",
 
   propTypes: {
     messages: PropTypes.object.isRequired,
     messagesUi: PropTypes.object.isRequired,
     serviceContainer: PropTypes.shape({
       attachRefToHud: PropTypes.func.isRequired,
+      autocompletePopupIsOpen: PropTypes.func.isRequired,
     }),
-    autoscroll: PropTypes.bool.isRequired,
   },
 
   componentDidMount() {
-    scrollToBottom(this.outputNode);
-    this.props.serviceContainer.attachRefToHud("outputScroller", this.outputNode);
+    // Used for scrolling with the keyboard.
+    this.props.serviceContainer.attachRefToHud("outputScroller", findDOMNode(this.grid));
   },
 
-  componentWillUpdate(nextProps, nextState) {
-    if (!this.outputNode) {
-      return;
+  _updateRowHeight(id, index, node) {
+    // If this row's height hasn't been cached, or its height has changed, update it in
+    // the cache.
+    if (!cellSizeCache.hasRowHeightById(id)
+      || cellSizeCache.getRowHeightById(id) !== node.scrollHeight) {
+      cellSizeCache.setRowHeight(id, index, node.scrollHeight);
+      // If this is the widest row, update the cache.
+      if (cellSizeCache.getWidestRowDimension() < node.scrollWidth) {
+        cellSizeCache.setWidestRowDimension(node.scrollWidth);
+      }
+      // Since this is called after the render cycle is complete (from the message's
+      // componentDidMount or componentDidUpdate), we then have to force an update
+      // to ensure the message's container is rerendered. At that point, the Grid will
+      // pull the new heights from the cache using the getRowHeight function.
+      this.forceUpdate();
     }
+  },
 
-    const outputNode = this.outputNode;
-
-    // Figure out if we are at the bottom. If so, then any new message should be scrolled
-    // into view.
-    if (this.props.autoscroll && outputNode.lastChild) {
-      this.shouldScrollBottom = isScrolledToBottom(outputNode.lastChild, outputNode);
-    }
+  _recomputeGrid() {
+    this.grid.recomputeGridSize();
+    // Unfortunately calling this "private" method is required to position the scroll
+    // top after cell heights have been changed.
+    this.grid._updateScrollTopForScrollToRow();
   },
 
-  componentDidUpdate() {
-    if (this.shouldScrollBottom) {
-      scrollToBottom(this.outputNode);
-    }
+  _allowKeyboardPaging(event) {
+    // Only respond to events where JSTerm is the target and the autocomplete is not open.
+    return event.target.closest("textbox.jsterm-input-node")
+        && !this.props.serviceContainer.autocompletePopupIsOpen();
   },
 
-  render() {
+  _renderRow({ rowIndex, style }) {
     let {
       dispatch,
-      autoscroll,
       messages,
       messagesUi,
       messagesTableData,
       serviceContainer,
       groups,
     } = this.props;
 
-    let messageNodes = messages.map((message) => {
-      const parentGroups = message.groupId ? (
-        (groups.get(message.groupId) || [])
-          .concat([message.groupId])
-      ) : [];
-
-      return (
-        MessageContainer({
-          dispatch,
-          message,
-          key: message.id,
-          serviceContainer,
-          open: messagesUi.includes(message.id),
-          tableData: messagesTableData.get(message.id),
-          autoscroll,
-          indent: parentGroups.length,
-        })
-      );
+    const message = messages.get(rowIndex);
+
+    const parentGroups = message.groupId ? (
+      (groups.get(message.groupId) || [])
+        .concat([message.groupId])
+    ) : [];
+
+    return MessageContainer({
+      dispatch,
+      message,
+      key: message.id,
+      serviceContainer,
+      open: messagesUi.includes(message.id),
+      tableData: messagesTableData.get(message.id),
+      indent: parentGroups.length,
+      style,
+      updateRowHeight: this._updateRowHeight,
+      rowIndex,
     });
+  },
+
+  _renderCellRange(props) {
+    // Monkey patch is needed to ensure container scrolls to last message even when there
+    // is a horizontal scroll bar.
+    // @TODO Figure out how to do this without monkey patching.
+    const {rowSizeAndPositionManager} = props;
+    rowSizeAndPositionManager.getUpdatedOffsetForIndex = function ({
+      align,
+      containerSize,
+      currentOffset, // safe
+      targetIndex,
+      totalSize
+    }) {
+      currentOffset = this._safeOffsetToOffset({
+        containerSize,
+        offset: currentOffset
+      });
+
+      const offset = this._cellSizeAndPositionManager.getUpdatedOffsetForIndex({
+        align,
+        // We reduce the size of the container by the bottom scrollbar size. Even if the
+        // scrollbar isn't showing, the offsetToSafeOffset function will make it work.
+        containerSize: containerSize - SCROLLBAR_SIZE,
+        currentOffset,
+        targetIndex,
+        totalSize
+      });
+
+      return this._offsetToSafeOffset({
+        containerSize,
+        offset
+      });
+    };
+    rowSizeAndPositionManager.getUpdatedOffsetForIndex = rowSizeAndPositionManager.getUpdatedOffsetForIndex.bind(rowSizeAndPositionManager)
+    const children = defaultCellRangeRenderer(props);
+    return children;
+  },
+
+  _renderGrid() {
+    const { lastForceScrollMessageIndex, messages } = this.props;
+    const scrollPositionManagerProps = {
+      lastForceScrollIndex: lastForceScrollMessageIndex,
+      list: messages,
+      recomputeGrid: this._recomputeGrid,
+    };
+    return createElement(ScrollPositionManager,
+      scrollPositionManagerProps,
+      ({ onResize, onScroll, getScrollState }) => {
+        const autosizerProps = { onResize };
+        return createElement(AutoSizer,
+          autosizerProps,
+          ({ height, width }) => {
+            const widestRow = cellSizeCache.getWidestRowDimension();
+            let gridProps = {
+              cellRangeRenderer: this._renderCellRange,
+              columnCount: 1,
+              // If the widest row is wider than the container, use that. Otherwise,
+              // use the container's width.
+              columnWidth: widestRow > width ? widestRow : width,
+              height,
+              overscanRowCount: 5,
+              cellRenderer: this._renderRow,
+              rowCount: messages.size,
+              rowHeight: getRowHeight,
+              width,
+              ref: ref => {
+                this.grid = ref;
+              },
+              onScroll,
+              // Grid has a shouldComponentUpdate which does a shallow compare. We want to
+              // update whenever there is a change in the message UI state, or when table data
+              // comes in. Even though the grid doesn't use these props, we pass them in to
+              // trigger a rerender if they have changed.
+              //
+              // @TODO consider making MessageContainer a connected component which pulls
+              // these properties in directly. This could have an unpredictable effect on
+              // performance, so be sure to test.
+              uiUpdate: this.props.messagesUi,
+              tableUpdate: this.props.messagesTableData,
+            };
+            const { scrollToRow, scrollToAlignment } = getScrollState();
+            if (scrollToRow !== false) {
+              gridProps.scrollToRow = scrollToRow;
+              gridProps.scrollToAlignment = scrollToAlignment || "auto";
+            }
+            return createElement(Grid, gridProps);
+          }
+        );
+      }
+    );
+  },
+
+  render() {
     return (
       dom.div({
         className: "webconsole-output",
-        ref: node => {
-          this.outputNode = node;
-        },
-      }, messageNodes
+      },
+      this._renderGrid()
       )
     );
   }
 });
 
-function scrollToBottom(node) {
-  node.scrollTop = node.scrollHeight;
-}
-
-function isScrolledToBottom(outputNode, scrollNode) {
-  let lastNodeHeight = outputNode.lastChild ?
-                       outputNode.lastChild.clientHeight : 0;
-  return scrollNode.scrollTop + scrollNode.clientHeight >=
-         scrollNode.scrollHeight - lastNodeHeight / 2;
+function getRowHeight({ index }) {
+  return cellSizeCache.getRowHeight(index);
 }
 
 function mapStateToProps(state, props) {
   return {
     messages: getAllMessages(state),
     messagesUi: getAllMessagesUiById(state),
     messagesTableData: getAllMessagesTableDataById(state),
-    autoscroll: getScrollSetting(state),
+    lastForceScrollMessageIndex: getLastForceScrollMessageIndex(state),
     groups: getAllGroupsById(state),
   };
 }
 
 module.exports = connect(mapStateToProps)(ConsoleOutput);
diff --git a/devtools/client/webconsole/new-console-output/components/message-container.js b/devtools/client/webconsole/new-console-output/components/message-container.js
index 115e9e2..7d7cf61 100644
--- a/devtools/client/webconsole/new-console-output/components/message-container.js
+++ b/devtools/client/webconsole/new-console-output/components/message-container.js
@@ -5,18 +5,21 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 // React & Redux
 const {
   createClass,
   createFactory,
-  PropTypes
+  DOM: dom,
+  PropTypes,
 } = require("devtools/client/shared/vendor/react");
+const { findDOMNode } = require("devtools/client/shared/vendor/react-dom");
+
 
 const {
   MESSAGE_SOURCE,
   MESSAGE_TYPE
 } = require("devtools/client/webconsole/new-console-output/constants");
 
 const componentMap = new Map([
   ["ConsoleApiCall", require("./message-types/console-api-call")],
@@ -29,39 +32,50 @@ const componentMap = new Map([
 
 const MessageContainer = createClass({
   displayName: "MessageContainer",
 
   propTypes: {
     message: PropTypes.object.isRequired,
     open: PropTypes.bool.isRequired,
     serviceContainer: PropTypes.object.isRequired,
-    autoscroll: PropTypes.bool.isRequired,
     indent: PropTypes.number.isRequired,
   },
 
   getDefaultProps: function () {
     return {
       open: false,
       indent: 0,
     };
   },
 
-  shouldComponentUpdate(nextProps, nextState) {
-    const repeatChanged = this.props.message.repeat !== nextProps.message.repeat;
-    const openChanged = this.props.open !== nextProps.open;
-    const tableDataChanged = this.props.tableData !== nextProps.tableData;
-    return repeatChanged || openChanged || tableDataChanged;
+  componentDidMount() {
+    // Record the initial height of the content inside the message.
+    this._cacheMessageHeight();
+  },
+
+  componentDidUpdate() {
+    // Capture height changes from toggling.
+    this._cacheMessageHeight();
+  },
+
+  _cacheMessageHeight() {
+    const innerNode = findDOMNode(this).firstChild.firstChild;
+    this.props.updateRowHeight(this.props.message.id, this.props.rowIndex, innerNode);
   },
 
   render() {
-    const { message } = this.props;
+    const { message, style } = this.props;
 
     let MessageComponent = createFactory(getMessageComponent(message));
-    return MessageComponent(this.props);
+    // The style is passed in from React Virtualized. It is a fixed height and width for
+    // the container around the message.
+    return dom.div({ style },
+      MessageComponent(this.props)
+    );
   }
 });
 
 function getMessageComponent(message) {
   switch (message.source) {
     case MESSAGE_SOURCE.CONSOLE_API:
       return componentMap.get("ConsoleApiCall");
     case MESSAGE_SOURCE.NETWORK:
diff --git a/devtools/client/webconsole/new-console-output/components/message-types/console-api-call.js b/devtools/client/webconsole/new-console-output/components/message-types/console-api-call.js
index 7200648..7ac3e5c 100644
--- a/devtools/client/webconsole/new-console-output/components/message-types/console-api-call.js
+++ b/devtools/client/webconsole/new-console-output/components/message-types/console-api-call.js
@@ -13,32 +13,35 @@ const {
   PropTypes
 } = require("devtools/client/shared/vendor/react");
 const GripMessageBody = createFactory(require("devtools/client/webconsole/new-console-output/components/grip-message-body"));
 const ConsoleTable = createFactory(require("devtools/client/webconsole/new-console-output/components/console-table"));
 const {isGroupType, l10n} = require("devtools/client/webconsole/new-console-output/utils/messages");
 
 const Message = createFactory(require("devtools/client/webconsole/new-console-output/components/message"));
 
+const { messageBodyCache } = require("devtools/client/webconsole/new-console-output/utils/caches");
+
 ConsoleApiCall.displayName = "ConsoleApiCall";
 
 ConsoleApiCall.propTypes = {
   message: PropTypes.object.isRequired,
   open: PropTypes.bool,
   serviceContainer: PropTypes.object.isRequired,
   indent: PropTypes.number.isRequired,
 };
 
 ConsoleApiCall.defaultProps = {
   open: false,
   indent: 0,
 };
 
 function ConsoleApiCall(props) {
   const {
+    style,
     dispatch,
     message,
     open,
     tableData,
     serviceContainer,
     indent,
   } = props;
   const {
@@ -50,17 +53,21 @@ function ConsoleApiCall(props) {
     stacktrace,
     frame,
     parameters,
     messageText,
     userProvidedStyles,
   } = message;
 
   let messageBody;
-  if (type === "trace") {
+  if (messageBodyCache.hasMessageBody(messageId)) {
+    messageBody = dom.span({
+      dangerouslySetInnerHTML: {"__html": messageBodyCache.getMessageBody(messageId)}
+    });
+  } else if (type === "trace") {
     messageBody = dom.span({className: "cm-variable"}, "console.trace()");
   } else if (type === "assert") {
     let reps = formatReps(parameters);
     messageBody = dom.span({ className: "cm-variable" }, "Assertion failed: ", reps);
   } else if (type === "table") {
     // TODO: Chrome does not output anything, see if we want to keep this
     messageBody = dom.span({className: "cm-variable"}, "console.table()");
   } else if (parameters) {
@@ -85,25 +92,27 @@ function ConsoleApiCall(props) {
     collapseTitle = l10n.getStr("groupToggle");
   }
 
   const collapsible = isGroupType(type)
     || (type === "error" && Array.isArray(stacktrace));
   const topLevelClasses = ["cm-s-mozilla"];
 
   return Message({
+    style,
     messageId,
     open,
     collapsible,
     collapseTitle,
     source,
     type,
     level,
     topLevelClasses,
     messageBody,
+    cacheMessageBody: true,
     repeat,
     frame,
     stacktrace,
     attachment,
     serviceContainer,
     dispatch,
     indent,
   });
diff --git a/devtools/client/webconsole/new-console-output/components/message-types/console-command.js b/devtools/client/webconsole/new-console-output/components/message-types/console-command.js
index d87229f..8e86332 100644
--- a/devtools/client/webconsole/new-console-output/components/message-types/console-command.js
+++ b/devtools/client/webconsole/new-console-output/components/message-types/console-command.js
@@ -12,46 +12,49 @@ const {
   PropTypes
 } = require("devtools/client/shared/vendor/react");
 const Message = createFactory(require("devtools/client/webconsole/new-console-output/components/message"));
 
 ConsoleCommand.displayName = "ConsoleCommand";
 
 ConsoleCommand.propTypes = {
   message: PropTypes.object.isRequired,
-  autoscroll: PropTypes.bool.isRequired,
   indent: PropTypes.number.isRequired,
 };
 
 ConsoleCommand.defaultProps = {
   indent: 0,
 };
 
 /**
  * Displays input from the console.
  */
 function ConsoleCommand(props) {
-  const { autoscroll, indent, message } = props;
+  const {
+    indent,
+    message,
+    style,
+  } = props;
   const {
     source,
     type,
     level,
     messageText: messageBody,
   } = message;
 
   const {
     serviceContainer,
   } = props;
 
   const childProps = {
+    style,
     source,
     type,
     level,
     topLevelClasses: [],
     messageBody,
-    scrollToMessage: autoscroll,
     serviceContainer,
     indent: indent,
   };
   return Message(childProps);
 }
 
 module.exports = ConsoleCommand;
diff --git a/devtools/client/webconsole/new-console-output/components/message-types/evaluation-result.js b/devtools/client/webconsole/new-console-output/components/message-types/evaluation-result.js
index 6412545..d6a0914 100644
--- a/devtools/client/webconsole/new-console-output/components/message-types/evaluation-result.js
+++ b/devtools/client/webconsole/new-console-output/components/message-types/evaluation-result.js
@@ -21,17 +21,17 @@ EvaluationResult.propTypes = {
   indent: PropTypes.number.isRequired,
 };
 
 EvaluationResult.defaultProps = {
   indent: 0,
 };
 
 function EvaluationResult(props) {
-  const { message, serviceContainer, indent } = props;
+  const { message, serviceContainer, indent, style } = props;
   const {
     source,
     type,
     level,
     id: messageId,
     exceptionDocURL,
   } = message;
 
@@ -40,23 +40,23 @@ function EvaluationResult(props) {
     messageBody = message.messageText;
   } else {
     messageBody = GripMessageBody({grip: message.parameters});
   }
 
   const topLevelClasses = ["cm-s-mozilla"];
 
   const childProps = {
+    style,
     source,
     type,
     level,
     indent,
     topLevelClasses,
     messageBody,
     messageId,
-    scrollToMessage: props.autoscroll,
     serviceContainer,
     exceptionDocURL,
   };
   return Message(childProps);
 }
 
 module.exports = EvaluationResult;
diff --git a/devtools/client/webconsole/new-console-output/components/message-types/network-event-message.js b/devtools/client/webconsole/new-console-output/components/message-types/network-event-message.js
index e3c81a4..29d45cc 100644
--- a/devtools/client/webconsole/new-console-output/components/message-types/network-event-message.js
+++ b/devtools/client/webconsole/new-console-output/components/message-types/network-event-message.js
@@ -25,17 +25,22 @@ NetworkEventMessage.propTypes = {
   indent: PropTypes.number.isRequired,
 };
 
 NetworkEventMessage.defaultProps = {
   indent: 0,
 };
 
 function NetworkEventMessage(props) {
-  const { message, serviceContainer, indent } = props;
+  const {
+    message,
+    indent,
+    serviceContainer,
+    style,
+  } = props;
   const { actor, source, type, level, request, isXHR } = message;
 
   const topLevelClasses = [ "cm-s-mozilla" ];
 
   function onUrlClick() {
     serviceContainer.openNetworkPanel(actor);
   }
 
@@ -44,16 +49,17 @@ function NetworkEventMessage(props) {
     ? dom.span({ className: "xhr" }, l10n.getStr("webConsoleXhrIndicator"))
     : null;
   const url = dom.a({ className: "url", title: request.url, onClick: onUrlClick },
         request.url.replace(/\?.+/, ""));
 
   const messageBody = dom.span({}, method, xhr, url);
 
   const childProps = {
+    style,
     source,
     type,
     level,
     indent,
     topLevelClasses,
     messageBody,
     serviceContainer,
   };
diff --git a/devtools/client/webconsole/new-console-output/components/message-types/page-error.js b/devtools/client/webconsole/new-console-output/components/message-types/page-error.js
index 77ea75f..59b4acc 100644
--- a/devtools/client/webconsole/new-console-output/components/message-types/page-error.js
+++ b/devtools/client/webconsole/new-console-output/components/message-types/page-error.js
@@ -25,33 +25,35 @@ PageError.defaultProps = {
   open: false,
   indent: 0,
 };
 
 function PageError(props) {
   const {
     dispatch,
     message,
+    indent,
     open,
     serviceContainer,
-    indent,
+    style,
   } = props;
   const {
     id: messageId,
     source,
     type,
     level,
     messageText: messageBody,
     repeat,
     stacktrace,
     frame,
     exceptionDocURL,
   } = message;
 
   const childProps = {
+    style,
     dispatch,
     messageId,
     open,
     collapsible: Array.isArray(stacktrace),
     source,
     type,
     level,
     topLevelClasses: [],
diff --git a/devtools/client/webconsole/new-console-output/components/message.js b/devtools/client/webconsole/new-console-output/components/message.js
index 752b0e9..9e99379 100644
--- a/devtools/client/webconsole/new-console-output/components/message.js
+++ b/devtools/client/webconsole/new-console-output/components/message.js
@@ -16,57 +16,69 @@ const {
 const { l10n } = require("devtools/client/webconsole/new-console-output/utils/messages");
 const actions = require("devtools/client/webconsole/new-console-output/actions/index");
 const CollapseButton = createFactory(require("devtools/client/webconsole/new-console-output/components/collapse-button"));
 const MessageIndent = createFactory(require("devtools/client/webconsole/new-console-output/components/message-indent").MessageIndent);
 const MessageIcon = createFactory(require("devtools/client/webconsole/new-console-output/components/message-icon"));
 const MessageRepeat = createFactory(require("devtools/client/webconsole/new-console-output/components/message-repeat"));
 const FrameView = createFactory(require("devtools/client/shared/components/frame"));
 const StackTrace = createFactory(require("devtools/client/shared/components/stack-trace"));
+const {openVariablesView} = require("devtools/client/webconsole/new-console-output/utils/variables-view");
+const { messageBodyCache } = require("devtools/client/webconsole/new-console-output/utils/caches");
 
 const Message = createClass({
   displayName: "Message",
 
   propTypes: {
     open: PropTypes.bool,
     collapsible: PropTypes.bool,
     collapseTitle: PropTypes.string,
     source: PropTypes.string.isRequired,
     type: PropTypes.string.isRequired,
     level: PropTypes.string.isRequired,
     indent: PropTypes.number.isRequired,
     topLevelClasses: PropTypes.array.isRequired,
     messageBody: PropTypes.any.isRequired,
+    cacheMessageBody: PropTypes.bool,
     repeat: PropTypes.any,
     frame: PropTypes.any,
     attachment: PropTypes.any,
     stacktrace: PropTypes.any,
     messageId: PropTypes.string,
-    scrollToMessage: PropTypes.bool,
     exceptionDocURL: PropTypes.string,
     serviceContainer: PropTypes.shape({
       emitNewMessage: PropTypes.func.isRequired,
       onViewSourceInDebugger: PropTypes.func.isRequired,
       sourceMapService: PropTypes.any,
     }),
   },
 
   getDefaultProps: function () {
     return {
       indent: 0
     };
   },
 
   componentDidMount() {
     if (this.messageNode) {
-      if (this.props.scrollToMessage) {
-        this.messageNode.scrollIntoView();
+      // When lots of Reps are output in the same message, it can make scrolling janky.
+      // With virtualization, we mount the node each time it comes into view, and mounting
+      // lots of Reps is slow. To make it faster, cache message bodies as HTML strings and
+      // reuse that when scrolling. Note, this does cause issues for click handlers inside
+      // of Reps. See handleMessageClick below.
+      if (this.props.cacheMessageBody
+        && !messageBodyCache.getMessageBody(this.props.messageId)) {
+        const messageBody = this.messageNode.querySelector(".message-body").firstChild.innerHTML;
+        messageBodyCache.setMessageBody(this.props.messageId, messageBody);
       }
+
       // Event used in tests. Some message types don't pass it in because existing tests
-      // did not emit for them.
+      // did not emit for them. Note, this is not guarenteed to emit even after a message
+      // is recorded, due to virtualization. It also may emit more than once for the same
+      // message if the message is scrolled into view more than once.
       if (this.props.serviceContainer) {
         this.props.serviceContainer.emitNewMessage(this.messageNode, this.props.messageId);
       }
     }
   },
 
   onLearnMoreClick: function () {
     let {exceptionDocURL} = this.props;
@@ -144,34 +156,47 @@ const Message = createClass({
     if (exceptionDocURL) {
       learnMore = dom.a({
         className: "learn-more-link webconsole-learn-more-link",
         title: exceptionDocURL.split("?")[0],
         onClick: this.onLearnMoreClick,
       }, `[${l10n.getStr("webConsoleMoreInfoLabel")}]`);
     }
 
-    return dom.div({
-      className: topLevelClasses.join(" "),
-      ref: node => {
-        this.messageNode = node;
-      }
-    },
+    return dom.div({ },
+      dom.div({
+        className: topLevelClasses.join(" "),
+        ref: node => {
+          this.messageNode = node;
+        }
+      },
       // @TODO add timestamp
       MessageIndent({indent}),
       icon,
       collapse,
       dom.span({ className: "message-body-wrapper" },
         dom.span({ className: "message-flex-body" },
-          dom.span({ className: "message-body devtools-monospace" },
-            messageBody,
+          dom.span({ onClick: handleMessageClick, className: "message-body devtools-monospace" },
+            // This wrapping span makes it easy to select the message body contents for
+            // caching, and also matches the span required for dangerouslySetInnerHTML.
+            dom.span({}, messageBody),
             learnMore
           ),
           repeat,
           location
         ),
         attachment
       )
-    );
+    ));
   }
 });
 
+function handleMessageClick(e) {
+  if (!e.nativeEvent.explicitOriginalTarget) {
+    return;
+  }
+  let clickedNode = e.nativeEvent.explicitOriginalTarget.parentNode;
+  if (clickedNode.dataset.actor) {
+    openVariablesView(clickedNode.dataset.actor);
+  }
+}
+
 module.exports = Message;
diff --git a/devtools/client/webconsole/new-console-output/components/moz.build b/devtools/client/webconsole/new-console-output/components/moz.build
index 8c00223..dbcc49a 100644
--- a/devtools/client/webconsole/new-console-output/components/moz.build
+++ b/devtools/client/webconsole/new-console-output/components/moz.build
@@ -14,10 +14,11 @@ DevToolsModules(
     'filter-bar.js',
     'filter-button.js',
     'grip-message-body.js',
     'message-container.js',
     'message-icon.js',
     'message-indent.js',
     'message-repeat.js',
     'message.js',
+    'scroll-position-manager.js',
     'variables-view-link.js'
 )
diff --git a/devtools/client/webconsole/new-console-output/components/scroll-position-manager.js b/devtools/client/webconsole/new-console-output/components/scroll-position-manager.js
new file mode 100644
index 0000000..7019e33
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/components/scroll-position-manager.js
@@ -0,0 +1,112 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const {
+  createClass,
+  PropTypes
+} = require("devtools/client/shared/vendor/react");
+
+const { cellSizeCache } = require("devtools/client/webconsole/new-console-output/utils/caches");
+
+const ScrollPositionManager = createClass({
+  propTypes: {
+    lastForceScrollIndex: PropTypes.number.isRequired,
+    list: PropTypes.object.isRequired,
+    recomputeGrid: PropTypes.func.isRequired,
+  },
+
+  componentWillMount() {
+    // Scroll state is handled outside of controlled props/state for performance reasons.
+    this._scrollState = getInitialScrollState();
+    this._scrollState.scrollToRow = this.props.list.size;
+  },
+
+  componentWillUpdate(nextProps, nextState) {
+    if (nextProps.scrollToRow) {
+      this._scrollState.scrollToRow = nextProps.scrollToRow;
+      this._scrollState.scrollToAlignment = nextProps.scrollToAlignment;
+    }
+
+    // If a scrollToRow value is set at this point, it means that the user is scrolling
+    // with the keyboard. Do not auto/force scroll.
+    if (this._scrollState.scrollToRow !== false) {
+      return;
+    }
+
+    // Figure out if the messages should be autoscrolled.
+    if (nextProps.lastForceScrollIndex > this.props.list.size - 1
+      || this.props.list.size == 0
+      || shouldAutoscroll(this._scrollState.scrollTop,
+          this._scrollState.clientHeight, this._scrollState.scrollHeight)
+    ) {
+      this._scrollState.scrollToRow = nextProps.list.size - 1;
+    }
+  },
+
+  componentDidUpdate() {
+    if (cellSizeCache.isDirty()) {
+      cellSizeCache.clearIsDirty();
+      this.props.recomputeGrid();
+    }
+    // Clear out props/state used for imperative scrolling.
+    this._scrollState.scrollToRow = false;
+    this._scrollState.scrollToAlignment = null;
+  },
+
+  _onResize({width}) {
+    // If the container width has changed, the heights of cells may have changed. Clear
+    // the cache so they can be recalculated.
+    if (this._scrollState.resizedWidth !== width) {
+      this._scrollState.resizedWidth = width;
+      cellSizeCache.clearAllRowHeights();
+    }
+    // Force an update. If width changed, we need to recalculate all the rows. If height
+    // changed, we may need to adjust scrollTop so JSTerm doesn't cover the bottom row.
+    this.forceUpdate();
+  },
+
+  _onScroll({ clientHeight, scrollHeight, scrollTop}) {
+    this._scrollState = Object.assign(this._scrollState, {
+      clientHeight,
+      scrollHeight,
+      scrollTop
+    });
+  },
+
+  _getScrollState() {
+    return this._scrollState;
+  },
+
+  render() {
+    const { children } = this.props;
+    return children({
+      onResize: this._onResize,
+      onScroll: this._onScroll,
+      // We have to use a getter here because AutoSizer is a child of this component and
+      // thus can be rerendered without calling rerender on this component. This means it
+      // will use the previous values and force a scroll even when it shouldn't.
+      //
+      // @TODO Make this less stateful. See comment on ConsoleOutput.
+      getScrollState: this._getScrollState,
+    });
+  },
+});
+
+function getInitialScrollState() {
+  return {
+    scrollToRow: false,
+    scrollToAlignment: "auto",
+    resizedWidth: null,
+  };
+}
+
+function shouldAutoscroll(scrollTop, clientHeight, scrollHeight) {
+  return !scrollHeight
+    || scrollHeight < clientHeight
+    || Math.abs(scrollTop + clientHeight - scrollHeight) < 20;
+}
+
+module.exports = ScrollPositionManager;
diff --git a/devtools/client/webconsole/new-console-output/components/variables-view-link.js b/devtools/client/webconsole/new-console-output/components/variables-view-link.js
index 4d79c32..ecb2c78 100644
--- a/devtools/client/webconsole/new-console-output/components/variables-view-link.js
+++ b/devtools/client/webconsole/new-console-output/components/variables-view-link.js
@@ -6,29 +6,28 @@
 
 "use strict";
 
 // React & Redux
 const {
   DOM: dom,
   PropTypes
 } = require("devtools/client/shared/vendor/react");
-const {openVariablesView} = require("devtools/client/webconsole/new-console-output/utils/variables-view");
 
 VariablesViewLink.displayName = "VariablesViewLink";
 
 VariablesViewLink.propTypes = {
   object: PropTypes.object.isRequired
 };
 
 function VariablesViewLink(props) {
   const { object, children } = props;
 
   return (
     dom.a({
-      onClick: openVariablesView.bind(null, object),
       className: "cm-variable",
+      "data-actor": object.actor,
       draggable: false,
     }, children)
   );
 }
 
 module.exports = VariablesViewLink;
diff --git a/devtools/client/webconsole/new-console-output/new-console-output-wrapper.js b/devtools/client/webconsole/new-console-output/new-console-output-wrapper.js
index 17c1e76..71baf19 100644
--- a/devtools/client/webconsole/new-console-output/new-console-output-wrapper.js
+++ b/devtools/client/webconsole/new-console-output/new-console-output-wrapper.js
@@ -32,16 +32,17 @@ NewConsoleOutputWrapper.prototype = {
   init: function () {
     const attachRefToHud = (id, node) => {
       this.jsterm.hud[id] = node;
     };
 
     let childComponent = ConsoleOutput({
       serviceContainer: {
         attachRefToHud,
+        autocompletePopupIsOpen: () => this.jsterm.autocompletePopup.isOpen,
         emitNewMessage: (node, messageId) => {
           this.jsterm.hud.emit("new-messages", new Set([{
             node,
             messageId,
           }]));
         },
         hudProxyClient: this.jsterm.hud.proxy.client,
         onViewSourceInDebugger: frame => this.toolbox.viewSourceInDebugger.call(
diff --git a/devtools/client/webconsole/new-console-output/selectors/messages.js b/devtools/client/webconsole/new-console-output/selectors/messages.js
index c4b1aee..76f902d 100644
--- a/devtools/client/webconsole/new-console-output/selectors/messages.js
+++ b/devtools/client/webconsole/new-console-output/selectors/messages.js
@@ -2,46 +2,41 @@
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const { l10n } = require("devtools/client/webconsole/new-console-output/utils/messages");
 const { getAllFilters } = require("devtools/client/webconsole/new-console-output/selectors/filters");
-const { getLogLimit } = require("devtools/client/webconsole/new-console-output/selectors/prefs");
 const {
   MESSAGE_TYPE,
   MESSAGE_SOURCE
 } = require("devtools/client/webconsole/new-console-output/constants");
 
 function getAllMessages(state) {
   let messages = getAllMessagesById(state);
-  let logLimit = getLogLimit(state);
   let filters = getAllFilters(state);
 
   let groups = getAllGroupsById(state);
   let messagesUI = getAllMessagesUiById(state);
 
-  return prune(
-    messages.filter(message => {
-      return (
-        isInOpenedGroup(message, groups, messagesUI)
-        && (
-          isUnfilterable(message)
-          || (
-            matchLevelFilters(message, filters)
-            && matchNetworkFilters(message, filters)
-            && matchSearchFilters(message, filters)
-          )
+  return messages.filter(message => {
+    return (
+      isInOpenedGroup(message, groups, messagesUI)
+      && (
+        isUnfilterable(message)
+        || (
+          matchLevelFilters(message, filters)
+          && matchNetworkFilters(message, filters)
+          && matchSearchFilters(message, filters)
         )
-      );
-    }),
-    logLimit
-  );
+      )
+    );
+  });
 }
 
 function getAllMessagesById(state) {
   return state.messages.messagesById;
 }
 
 function getAllMessagesUiById(state) {
   return state.messages.messagesUiById;
@@ -54,16 +49,22 @@ function getAllMessagesTableDataById(state) {
 function getAllGroupsById(state) {
   return state.messages.groupsById;
 }
 
 function getCurrentGroup(state) {
   return state.messages.currentGroup;
 }
 
+function getLastForceScrollMessageIndex(state) {
+  return getAllMessages(state).findLastIndex(message => {
+    return [MESSAGE_TYPE.COMMAND, MESSAGE_TYPE.RESULT].includes(message.type);
+  });
+}
+
 function isUnfilterable(message) {
   return [
     MESSAGE_TYPE.COMMAND,
     MESSAGE_TYPE.RESULT,
     MESSAGE_TYPE.START_GROUP,
     MESSAGE_TYPE.START_GROUP_COLLAPSED,
   ].includes(message.type);
 }
@@ -136,33 +137,16 @@ function isTextInFrame(text, frame) {
   // @TODO Change this to Object.values once it's supported in Node's version of V8
   return Object.keys(frame)
     .map(key => frame[key])
     .join(":")
     .toLocaleLowerCase()
     .includes(text.toLocaleLowerCase());
 }
 
-function prune(messages, logLimit) {
-  let messageCount = messages.count();
-  if (messageCount > logLimit) {
-    // If the second non-pruned message is in a group,
-    // we want to return the group as the first non-pruned message.
-    let firstIndex = messages.size - logLimit;
-    let groupId = messages.get(firstIndex + 1).groupId;
-
-    if (groupId) {
-      return messages.splice(0, firstIndex + 1)
-        .unshift(
-          messages.findLast((message) => message.id === groupId)
-        );
-    }
-    return messages.splice(0, firstIndex);
-  }
-
-  return messages;
-}
-
-exports.getAllMessages = getAllMessages;
-exports.getAllMessagesUiById = getAllMessagesUiById;
-exports.getAllMessagesTableDataById = getAllMessagesTableDataById;
-exports.getAllGroupsById = getAllGroupsById;
-exports.getCurrentGroup = getCurrentGroup;
+module.exports = {
+  getAllMessages,
+  getAllMessagesUiById,
+  getAllMessagesTableDataById,
+  getAllGroupsById,
+  getCurrentGroup,
+  getLastForceScrollMessageIndex,
+};
diff --git a/devtools/client/webconsole/new-console-output/selectors/ui.js b/devtools/client/webconsole/new-console-output/selectors/ui.js
index c9729e9..89247dd 100644
--- a/devtools/client/webconsole/new-console-output/selectors/ui.js
+++ b/devtools/client/webconsole/new-console-output/selectors/ui.js
@@ -5,16 +5,11 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 function getAllUi(state) {
   return state.ui;
 }
 
-function getScrollSetting(state) {
-  return getAllUi(state).autoscroll;
-}
-
 module.exports = {
   getAllUi,
-  getScrollSetting,
 };
diff --git a/devtools/client/webconsole/new-console-output/test/components/console-api-call.test.js b/devtools/client/webconsole/new-console-output/test/components/console-api-call.test.js
index 3b4e2b19..27bb0ff 100644
--- a/devtools/client/webconsole/new-console-output/test/components/console-api-call.test.js
+++ b/devtools/client/webconsole/new-console-output/test/components/console-api-call.test.js
@@ -21,16 +21,22 @@ const {
 const { INDENT_WIDTH } = require("devtools/client/webconsole/new-console-output/components/message-indent");
 
 // Test fakes.
 const { stubPreparedMessages } = require("devtools/client/webconsole/new-console-output/test/fixtures/stubs/index");
 const serviceContainer = require("devtools/client/webconsole/new-console-output/test/fixtures/serviceContainer");
 
 const tempfilePath = "http://example.com/browser/devtools/client/webconsole/new-console-output/test/fixtures/stub-generators/test-tempfile.js";
 
+const { clearCaches } = require("devtools/client/webconsole/new-console-output/utils/caches");
+
+beforeEach(() => {
+  clearCaches();
+});
+
 describe("ConsoleAPICall component:", () => {
   describe("console.log", () => {
     it("renders string grips", () => {
       const message = stubPreparedMessages.get("console.log('foobar', 'test')");
       const wrapper = render(ConsoleApiCall({ message, serviceContainer }));
 
       expect(wrapper.find(".message-body").text()).toBe("foobar test");
       expect(wrapper.find(".objectBox-string").length).toBe(2);
diff --git a/devtools/client/webconsole/new-console-output/test/components/filter-bar.test.js b/devtools/client/webconsole/new-console-output/test/components/filter-bar.test.js
index 23f958c..1822907 100644
--- a/devtools/client/webconsole/new-console-output/test/components/filter-bar.test.js
+++ b/devtools/client/webconsole/new-console-output/test/components/filter-bar.test.js
@@ -75,17 +75,21 @@ describe("FilterBar component:", () => {
   });
 
   it("fires MESSAGES_CLEAR action when clear button is clicked", () => {
     const store = setupStore([]);
     store.dispatch = sinon.spy();
 
     const wrapper = mount(Provider({store}, FilterBar({ serviceContainer })));
     wrapper.find(".devtools-clear-icon").simulate("click");
-    const call = store.dispatch.getCall(0);
+
+    // Execute the thunk.
+    store.dispatch.getCall(0).args[0](store.dispatch);
+
+    const call = store.dispatch.getCall(1);
     expect(call.args[0]).toEqual({
       type: MESSAGES_CLEAR
     });
   });
 
   it("sets filter text when text is typed", () => {
     const store = setupStore([]);
 
diff --git a/devtools/client/webconsole/new-console-output/test/components/message-container.test.js b/devtools/client/webconsole/new-console-output/test/components/message-container.test.js
index 2377af9..5a3838c 100644
--- a/devtools/client/webconsole/new-console-output/test/components/message-container.test.js
+++ b/devtools/client/webconsole/new-console-output/test/components/message-container.test.js
@@ -13,21 +13,27 @@ const {
 const { MessageContainer } = require("devtools/client/webconsole/new-console-output/components/message-container");
 const ConsoleApiCall = require("devtools/client/webconsole/new-console-output/components/message-types/console-api-call");
 const EvaluationResult = require("devtools/client/webconsole/new-console-output/components/message-types/evaluation-result");
 const PageError = require("devtools/client/webconsole/new-console-output/components/message-types/page-error");
 
 // Test fakes.
 const { stubPreparedMessages } = require("devtools/client/webconsole/new-console-output/test/fixtures/stubs/index");
 const serviceContainer = require("devtools/client/webconsole/new-console-output/test/fixtures/serviceContainer");
+const updateRowHeight = () => {};
 
 describe("MessageContainer component:", () => {
   it("pipes data to children as expected", () => {
     const message = stubPreparedMessages.get("console.log('foobar', 'test')");
-    const rendered = renderComponent(MessageContainer, {message, serviceContainer});
+    const props = {
+      message,
+      serviceContainer,
+      updateRowHeight
+    };
+    const rendered = renderComponent(MessageContainer, props);
 
     expect(rendered.textContent.includes("foobar")).toBe(true);
   });
   it("picks correct child component", () => {
     const messageTypes = [
       {
         component: ConsoleApiCall,
         message: stubPreparedMessages.get("console.log('foobar', 'test')")
@@ -43,12 +49,12 @@ describe("MessageContainer component:", () => {
     ];
 
     messageTypes.forEach(info => {
       const { component, message } = info;
       const rendered = shallowRenderComponent(MessageContainer, {
         message,
         serviceContainer,
       });
-      expect(rendered.type).toBe(component);
+      expect(rendered.props.children.type).toBe(component);
     });
   });
 });
diff --git a/devtools/client/webconsole/new-console-output/test/mochitest/browser.ini b/devtools/client/webconsole/new-console-output/test/mochitest/browser.ini
index 9881d05..700b0a9 100644
--- a/devtools/client/webconsole/new-console-output/test/mochitest/browser.ini
+++ b/devtools/client/webconsole/new-console-output/test/mochitest/browser.ini
@@ -13,9 +13,10 @@ support-files =
 [browser_webconsole_batching.js]
 [browser_webconsole_console_group.js]
 [browser_webconsole_console_table.js]
 [browser_webconsole_filters.js]
 [browser_webconsole_init.js]
 [browser_webconsole_input_focus.js]
 [browser_webconsole_keyboard_accessibility.js]
 [browser_webconsole_observer_notifications.js]
+[browser_webconsole_scroll.js]
 [browser_webconsole_vview_close_on_esc_key.js]
diff --git a/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_batching.js b/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_batching.js
index 9a07065..fba74e1 100644
--- a/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_batching.js
+++ b/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_batching.js
@@ -4,66 +4,43 @@
  * http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
 // Check adding console calls as batch keep the order of the message.
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/new-console-output/test/mochitest/test-batching.html";
 const { l10n } = require("devtools/client/webconsole/new-console-output/utils/messages");
+const { getAllMessages } = require("devtools/client/webconsole/new-console-output/selectors/messages");
 
 add_task(function* () {
   let hud = yield openNewTabAndConsole(TEST_URI);
 
-  const store = hud.ui.newConsoleOutput.getStore();
-  // Adding loggin each time the store is modified in order to check
-  // the store state in case of failure.
-  store.subscribe(() => {
-    const messages = store.getState().messages.messagesById.toJS()
-      .map(message => {
-        return {
-          id: message.id,
-          type: message.type,
-          parameters: message.parameters,
-          messageText: message.messageText
-        };
-      }
-    );
-    info("messages : " + JSON.stringify(messages));
-  });
-
-  const messageNumber = 100;
-  yield testSimpleBatchLogging(hud, messageNumber);
-  yield testBatchLoggingAndClear(hud, messageNumber);
+  yield testBatchMessageOrder(hud);
+  yield testBatchLoggingAndClear(hud);
 });
 
-function* testSimpleBatchLogging(hud, messageNumber) {
-  yield ContentTask.spawn(gBrowser.selectedBrowser, messageNumber,
-    function (numMessages) {
-      content.wrappedJSObject.batchLog(numMessages);
+function* testBatchMessageOrder(hud) {
+  yield ContentTask.spawn(gBrowser.selectedBrowser, {}, () => {
+    for (let i = 0; i < 10000; i++) {
+      content.console.log(i);
     }
-  );
+  });
+  yield waitFor(() => findMessage(hud, "9999"));
 
-  for (let i = 0; i < messageNumber; i++) {
-    let node = yield waitFor(() => findMessageAtIndex(hud, i, i));
-    is(node.textContent, i.toString(), `message at index "${i}" is the expected one`);
-  }
+  const store = hud.ui.newConsoleOutput.getStore();
+  const messages = getAllMessages(store.getState());
+  const values = messages.toArray().map(message => message.parameters[0]);
+  ok(values.every((value, index) => value === index), "messages are in expected order");
 }
 
-function* testBatchLoggingAndClear(hud, messageNumber) {
-  yield ContentTask.spawn(gBrowser.selectedBrowser, messageNumber,
-    function (numMessages) {
-      content.wrappedJSObject.batchLogAndClear(numMessages);
-    }
-  );
+function* testBatchLoggingAndClear(hud) {
+  yield ContentTask.spawn(gBrowser.selectedBrowser, {}, () => {
+    content.wrappedJSObject.batchLogAndClear(100);
+  });
   yield waitFor(() => findMessage(hud, l10n.getStr("consoleCleared")));
   ok(true, "console cleared message is displayed");
 
   // Passing the text argument as an empty string will returns all the message,
   // whatever their content is.
   const messages = findMessages(hud, "");
   is(messages.length, 1, "console was cleared as expected");
 }
-
-function findMessageAtIndex(hud, text, index) {
-  const selector = `.message:nth-of-type(${index + 1}) .message-body`;
-  return findMessage(hud, text, selector);
-}
diff --git a/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_console_table.js b/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_console_table.js
index a90ae1a..855151b 100644
--- a/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_console_table.js
+++ b/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_console_table.js
@@ -5,169 +5,159 @@
 
 "use strict";
 
 // Check console.table calls with all the test cases shown
 // in the MDN doc (https://developer.mozilla.org/en-US/docs/Web/API/Console/table)
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/new-console-output/test/mochitest/test-console-table.html";
 
-add_task(function* () {
-  let toolbox = yield openNewTabAndToolbox(TEST_URI, "webconsole");
-  let hud = toolbox.getCurrentPanel().hud;
+function Person(firstName, lastName) {
+  this.firstName = firstName;
+  this.lastName = lastName;
+}
 
-  function Person(firstName, lastName) {
-    this.firstName = firstName;
-    this.lastName = lastName;
+const testCases = [{
+  info: "Testing when data argument is an array",
+  input: ["apples", "oranges", "bananas"],
+  expected: {
+    columns: ["(index)", "Values"],
+    rows: [
+      ["0", "apples"],
+      ["1", "oranges"],
+      ["2", "bananas"],
+    ]
   }
-
-  const testCases = [{
-    info: "Testing when data argument is an array",
-    input: ["apples", "oranges", "bananas"],
-    expected: {
-      columns: ["(index)", "Values"],
-      rows: [
-        ["0", "apples"],
-        ["1", "oranges"],
-        ["2", "bananas"],
-      ]
-    }
-  }, {
-    info: "Testing when data argument is an object",
-    input: new Person("John", "Smith"),
-    expected: {
-      columns: ["(index)", "Values"],
-      rows: [
-        ["firstName", "John"],
-        ["lastName", "Smith"],
-      ]
-    }
-  }, {
-    info: "Testing when data argument is an array of arrays",
-    input: [["Jane", "Doe"], ["Emily", "Jones"]],
-    expected: {
-      columns: ["(index)", "0", "1"],
-      rows: [
-        ["0", "Jane", "Doe"],
-        ["1", "Emily", "Jones"],
-      ]
-    }
-  }, {
-    info: "Testing when data argument is an array of objects",
-    input: [
-      new Person("Jack", "Foo"),
-      new Person("Emma", "Bar"),
-      new Person("Michelle", "Rax"),
-    ],
-    expected: {
-      columns: ["(index)", "firstName", "lastName"],
-      rows: [
-        ["0", "Jack", "Foo"],
-        ["1", "Emma", "Bar"],
-        ["2", "Michelle", "Rax"],
-      ]
-    }
-  }, {
-    info: "Testing when data argument is an object whose properties are objects",
-    input: {
-      father: new Person("Darth", "Vader"),
-      daughter: new Person("Leia", "Organa"),
-      son: new Person("Luke", "Skywalker"),
-    },
-    expected: {
-      columns: ["(index)", "firstName", "lastName"],
-      rows: [
-        ["father", "Darth", "Vader"],
-        ["daughter", "Leia", "Organa"],
-        ["son", "Luke", "Skywalker"],
-      ]
-    }
-  }, {
-    info: "Testing when data argument is a Set",
-    input: new Set(["a", "b", "c"]),
-    expected: {
-      columns: ["(iteration index)", "Values"],
-      rows: [
-        ["0", "a"],
-        ["1", "b"],
-        ["2", "c"],
-      ]
-    }
-  }, {
-    info: "Testing when data argument is a Map",
-    input: new Map([["key-a", "value-a"], ["key-b", "value-b"]]),
-    expected: {
-      columns: ["(iteration index)", "Key", "Values"],
-      rows: [
-        ["0", "key-a", "value-a"],
-        ["1", "key-b", "value-b"],
-      ]
-    }
-  }, {
-    info: "Testing restricting the columns displayed",
-    input: [
-      new Person("Sam", "Wright"),
-      new Person("Elena", "Bartz"),
-    ],
-    headers: ["firstName"],
-    expected: {
-      columns: ["(index)", "firstName"],
-      rows: [
-        ["0", "Sam"],
-        ["1", "Elena"],
-      ]
-    }
-  }];
-
-  yield ContentTask.spawn(gBrowser.selectedBrowser, testCases, function (tests) {
-    tests.forEach((test) => {
-      content.wrappedJSObject.doConsoleTable(test.input, test.headers);
-    });
-  });
-
-  let nodes = [];
-  for (let testCase of testCases) {
-    let node = yield waitFor(
-      () => findConsoleTable(hud.ui.experimentalOutputNode, testCases.indexOf(testCase))
-    );
-    nodes.push(node);
+}, {
+  info: "Testing when data argument is an object",
+  input: new Person("John", "Smith"),
+  expected: {
+    columns: ["(index)", "Values"],
+    rows: [
+      ["firstName", "John"],
+      ["lastName", "Smith"],
+    ]
+  }
+}, {
+  info: "Testing when data argument is an array of arrays",
+  input: [["Jane", "Doe"], ["Emily", "Jones"]],
+  expected: {
+    columns: ["(index)", "0", "1"],
+    rows: [
+      ["0", "Jane", "Doe"],
+      ["1", "Emily", "Jones"],
+    ]
+  }
+}, {
+  info: "Testing when data argument is an array of objects",
+  input: [
+    new Person("Jack", "Foo"),
+    new Person("Emma", "Bar"),
+    new Person("Michelle", "Rax"),
+  ],
+  expected: {
+    columns: ["(index)", "firstName", "lastName"],
+    rows: [
+      ["0", "Jack", "Foo"],
+      ["1", "Emma", "Bar"],
+      ["2", "Michelle", "Rax"],
+    ]
+  }
+}, {
+  info: "Testing when data argument is an object whose properties are objects",
+  input: {
+    father: new Person("Darth", "Vader"),
+    daughter: new Person("Leia", "Organa"),
+    son: new Person("Luke", "Skywalker"),
+  },
+  expected: {
+    columns: ["(index)", "firstName", "lastName"],
+    rows: [
+      ["father", "Darth", "Vader"],
+      ["daughter", "Leia", "Organa"],
+      ["son", "Luke", "Skywalker"],
+    ]
+  }
+}, {
+  info: "Testing when data argument is a Set",
+  input: new Set(["a", "b", "c"]),
+  expected: {
+    columns: ["(iteration index)", "Values"],
+    rows: [
+      ["0", "a"],
+      ["1", "b"],
+      ["2", "c"],
+    ]
+  }
+}, {
+  info: "Testing when data argument is a Map",
+  input: new Map([["key-a", "value-a"], ["key-b", "value-b"]]),
+  expected: {
+    columns: ["(iteration index)", "Key", "Values"],
+    rows: [
+      ["0", "key-a", "value-a"],
+      ["1", "key-b", "value-b"],
+    ]
   }
+}, {
+  info: "Testing restricting the columns displayed",
+  input: [
+    new Person("Sam", "Wright"),
+    new Person("Elena", "Bartz"),
+  ],
+  headers: ["firstName"],
+  expected: {
+    columns: ["(index)", "firstName"],
+    rows: [
+      ["0", "Sam"],
+      ["1", "Elena"],
+    ]
+  }
+}];
+
+testCases.forEach(testCase => {
+  add_task(function* () {
+    let toolbox = yield openNewTabAndToolbox(TEST_URI, "webconsole");
+    let hud = toolbox.getCurrentPanel().hud;
 
-  let consoleTableNodes = hud.ui.experimentalOutputNode.querySelectorAll(
-    ".message .new-consoletable");
+    function* doTest(testCase) {
+      yield ContentTask.spawn(gBrowser.selectedBrowser, testCase, function (test) {
+        content.wrappedJSObject.doConsoleTable(test.input, test.headers);
+      });
 
-  is(consoleTableNodes.length, testCases.length,
-    "console has the expected number of consoleTable items");
+      let node = yield waitFor(
+        () => findConsoleTable(hud.ui.experimentalOutputNode, testCase)
+      );
 
-  testCases.forEach((testCase, index) => {
-    info(testCase.info);
+      info(testCase.info);
 
-    let node = nodes[index];
-    let columns = Array.from(node.querySelectorAll("thead th"));
-    let rows = Array.from(node.querySelectorAll("tbody tr"));
+      let columns = Array.from(node.querySelectorAll("thead th"));
+      let rows = Array.from(node.querySelectorAll("tbody tr"));
 
-    is(
-      JSON.stringify(testCase.expected.columns),
-      JSON.stringify(columns.map(column => column.textContent)),
-      "table has the expected columns"
-    );
+      is(
+        JSON.stringify(testCase.expected.columns),
+        JSON.stringify(columns.map(column => column.textContent)),
+        "table has the expected columns"
+      );
 
-    is(testCase.expected.rows.length, rows.length,
-      "table has the expected number of rows");
+      is(testCase.expected.rows.length, rows.length,
+        "table has the expected number of rows");
 
-    testCase.expected.rows.forEach((expectedRow, rowIndex) => {
-      let row = rows[rowIndex];
-      let cells = row.querySelectorAll("td");
-      is(expectedRow.length, cells.length, "row has the expected number of cells");
+      testCase.expected.rows.forEach((expectedRow, rowIndex) => {
+        let row = rows[rowIndex];
+        let cells = row.querySelectorAll("td");
+        is(expectedRow.length, cells.length, "row has the expected number of cells");
 
-      expectedRow.forEach((expectedCell, cellIndex) => {
-        let cell = cells[cellIndex];
-        is(expectedCell, cell.textContent, "cell has the expected content");
+        expectedRow.forEach((expectedCell, cellIndex) => {
+          let cell = cells[cellIndex];
+          is(expectedCell, cell.textContent, "cell has the expected content");
+        });
       });
-    });
+    }
+
+    yield doTest(testCase);
   });
 });
 
-function findConsoleTable(node, index) {
-  let condition = node.querySelector(
-    `.message:nth-of-type(${index + 1}) .new-consoletable`);
+function findConsoleTable(node) {
+  let condition = node.querySelector(`.message .new-consoletable`);
   return condition;
 }
diff --git a/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_keyboard_accessibility.js b/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_keyboard_accessibility.js
index 1038194..477cdcf 100644
--- a/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_keyboard_accessibility.js
+++ b/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_keyboard_accessibility.js
@@ -5,55 +5,50 @@
 
 // Check that basic keyboard shortcuts work in the web console.
 
 "use strict";
 
 const TEST_URI =
   `data:text/html;charset=utf-8,<p>Test keyboard accessibility</p>
   <script>
-    for (let i = 1; i <= 100; i++) {
+    for (let i = 1; i <= 99; i++) {
       console.log("console message " + i);
     }
   </script>
   `;
 
 add_task(function* () {
   let hud = yield openNewTabAndConsole(TEST_URI);
   info("Web Console opened");
 
-  const outputScroller = hud.ui.outputScroller;
-
-  yield waitFor(() => findMessages(hud, "").length == 100);
-
-  let currentPosition = outputScroller.scrollTop;
-  const bottom = currentPosition;
+  yield waitFor(() => findMessage(hud, "console message 99"));
+  ok(!findMessage(hud, "console message 1"), "output is scrolled to bottom");
 
   EventUtils.sendMouseEvent({type: "click"}, hud.jsterm.inputNode);
 
   // Page up.
   EventUtils.synthesizeKey("VK_PAGE_UP", {});
-  isnot(outputScroller.scrollTop, currentPosition,
-    "scroll position changed after page up");
+  yield waitFor(() => !findMessage(hud, "console message 99"));
+  ok(true, "scroll position changed after page up");
 
   // Page down.
-  currentPosition = outputScroller.scrollTop;
   EventUtils.synthesizeKey("VK_PAGE_DOWN", {});
-  ok(outputScroller.scrollTop > currentPosition,
-     "scroll position now at bottom");
+  yield waitFor(() => findMessage(hud, "console message 99"));
+  ok(true, "scroll position changed after page down");
 
   // Home
   EventUtils.synthesizeKey("VK_HOME", {});
-  is(outputScroller.scrollTop, 0, "scroll position now at top");
+  yield waitFor(() => findMessage(hud, "console message 1"));
+  ok(true, "scroll position at top after home");
 
   // End
   EventUtils.synthesizeKey("VK_END", {});
-  let scrollTop = outputScroller.scrollTop;
-  ok(scrollTop > 0 && Math.abs(scrollTop - bottom) <= 5,
-     "scroll position now at bottom");
+  yield waitFor(() => findMessage(hud, "console message 99"));
+  ok(true, "scroll position at bottom after end");
 
   // Clear output
   info("try ctrl-l to clear output");
   let clearShortcut;
   if (Services.appinfo.OS === "Darwin") {
     clearShortcut = WCUL10n.getStr("webconsole.clear.keyOSX");
   } else {
     clearShortcut = WCUL10n.getStr("webconsole.clear.key");
@@ -61,11 +56,11 @@ add_task(function* () {
   synthesizeKeyShortcut(clearShortcut);
   yield waitFor(() => findMessages(hud, "").length == 0);
   is(hud.jsterm.inputNode.getAttribute("focused"), "true", "jsterm input is focused");
 
   // Focus filter
   info("try ctrl-f to focus filter");
   synthesizeKeyShortcut(WCUL10n.getStr("webconsole.find.key"));
   ok(!hud.jsterm.inputNode.getAttribute("focused"), "jsterm input is not focused");
-  is(hud.ui.filterBox, outputScroller.ownerDocument.activeElement,
+  is(hud.ui.filterBox, hud.jsterm.inputNode.ownerDocument.activeElement,
     "filter input is focused");
 });
diff --git a/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_scroll.js b/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_scroll.js
new file mode 100644
index 0000000..2939227
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_scroll.js
@@ -0,0 +1,59 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/ */
+
+// Test webconsole scrolling.
+
+"use strict";
+
+const TEST_URI = `data:text/html;charset=utf-8,Test scrolling
+<script>
+  for (let i = 0; i < 50; i++) {
+    content.console.log("top message " + i);
+  }
+
+  content.console.log(Array(50).fill("LongWrappingMessage").join("\n"));
+  content.console.log(Array(50).fill("LongNonwrappingMessage").join(""));
+
+  for (let i = 0; i < 50; i++) {
+    content.console.log("bottom message " + i);
+  }
+</script>`;
+
+add_task(function* () {
+  let hud = yield openNewTabAndConsole(TEST_URI);
+
+  yield waitFor(() => findMessage(hud, "bottom message 49"));
+  ok(!findMessage(hud, "top message"), "scroller is filled and scroll is at the bottom");
+
+  yield scrollToTop(hud);
+
+  // Test force scroll.
+  hud.jsterm.execute("10000+10000");
+  yield waitFor(() => findMessage(hud, "20000"));
+  ok(true, "Execution result forces scroll to bottom");
+
+  // Test autoscroll.
+  ContentTask.spawn(gBrowser.selectedBrowser, {}, function* () {
+    content.console.log("test autoscroll");
+  });
+  yield waitFor(() => findMessage(hud, "test autoscroll"));
+  ok(true, "A new log message autoscrolls if the user is at the bottom.");
+
+  // Test scroll position maintenance.
+  yield scrollToTop(hud);
+  ContentTask.spawn(gBrowser.selectedBrowser, {}, function* () {
+    content.console.log("test new log");
+  });
+  // We have no predicate we can use waitFor on, so wait for the new-messages event.
+  waitForMessages(hud, "test new log");
+  ok(!findMessage(hud, "test new log"),
+    "Scroll position maintained when a user is scrolled up and new log messages come in");
+});
+
+function* scrollToTop(hud) {
+  EventUtils.synthesizeKey("VK_HOME", {});
+  yield waitFor(() => findMessage(hud, "top message 1"));
+  info("scroll is at top");
+}
diff --git a/devtools/client/webconsole/new-console-output/test/mochitest/head.js b/devtools/client/webconsole/new-console-output/test/mochitest/head.js
index 48a2cad4..74f40f6 100644
--- a/devtools/client/webconsole/new-console-output/test/mochitest/head.js
+++ b/devtools/client/webconsole/new-console-output/test/mochitest/head.js
@@ -123,15 +123,15 @@ function findMessage(hud, text, selector = ".message") {
  * @param object hud
  *        The web console.
  * @param string text
  *        A substring that can be found in the message.
  * @param selector [optional]
  *        The selector to use in finding the message.
  */
 function findMessages(hud, text, selector = ".message") {
-  const messages = hud.ui.experimentalOutputNode.querySelectorAll(selector);
+  const messages = hud.ui.outputScroller.querySelectorAll(selector);
   const elements = Array.prototype.filter.call(
     messages,
     (el) => el.textContent.includes(text)
   );
   return elements;
 }
diff --git a/devtools/client/webconsole/new-console-output/test/mochitest/test-batching.html b/devtools/client/webconsole/new-console-output/test/mochitest/test-batching.html
index 9d12238..7b74ed6 100644
--- a/devtools/client/webconsole/new-console-output/test/mochitest/test-batching.html
+++ b/devtools/client/webconsole/new-console-output/test/mochitest/test-batching.html
@@ -4,22 +4,16 @@
     <meta charset="utf-8">
     <title>Webconsole batch console calls test page</title>
   </head>
   <body>
     <p>batch console calls test page</p>
     <script>
     "use strict";
 
-    function batchLog(numMessages = 0) {
-      for (let i = 0; i < numMessages; i++) {
-        console.log(i);
-      }
-    }
-
     function batchLogAndClear(numMessages = 0) {
       for (let i = 0; i < numMessages; i++) {
         console.log(i);
         if (i === numMessages - 1) {
           console.clear();
         }
       }
     }
diff --git a/devtools/client/webconsole/new-console-output/test/store/messages.test.js b/devtools/client/webconsole/new-console-output/test/store/messages.test.js
index 582ca36..ecebbe6 100644
--- a/devtools/client/webconsole/new-console-output/test/store/messages.test.js
+++ b/devtools/client/webconsole/new-console-output/test/store/messages.test.js
@@ -92,32 +92,16 @@ describe("Message reducer:", () => {
       ]);
 
       dispatch(actions.messagesClear());
 
       const messages = getAllMessages(getState());
       expect(messages.size).toBe(0);
     });
 
-    it("limits the number of messages displayed", () => {
-      const { dispatch, getState } = setupStore([]);
-
-      const logLimit = 1000;
-      const packet = stubPackets.get("console.log(undefined)");
-      for (let i = 1; i <= logLimit + 1; i++) {
-        packet.message.arguments = [`message num ${i}`];
-        dispatch(actions.messageAdd(packet));
-      }
-
-      const messages = getAllMessages(getState());
-      expect(messages.count()).toBe(logLimit);
-      expect(messages.first().parameters[0]).toBe(`message num 2`);
-      expect(messages.last().parameters[0]).toBe(`message num ${logLimit + 1}`);
-    });
-
     it("does not add null messages to the store", () => {
       const { dispatch, getState } = setupStore([]);
 
       const message = stubPackets.get("console.time('bar')");
       dispatch(actions.messageAdd(message));
 
       const messages = getAllMessages(getState());
       expect(messages.size).toBe(0);
@@ -176,38 +160,16 @@ describe("Message reducer:", () => {
 
       dispatch(actions.messageAdd(
         stubPackets.get("console.log('foobar', 'test')")));
 
       const messages = getAllMessages(getState());
       expect(messages.size).toBe(1);
     });
 
-    it("shows the group of the first displayed message when messages are pruned", () => {
-      const { dispatch, getState } = setupStore([]);
-
-      const logLimit = 1000;
-
-      const groupMessage = stubPreparedMessages.get("console.group('bar')");
-      dispatch(actions.messageAdd(
-        stubPackets.get("console.group('bar')")));
-
-      const packet = stubPackets.get("console.log(undefined)");
-      for (let i = 1; i <= logLimit + 1; i++) {
-        packet.message.arguments = [`message num ${i}`];
-        dispatch(actions.messageAdd(packet));
-      }
-
-      const messages = getAllMessages(getState());
-      expect(messages.count()).toBe(logLimit);
-      expect(messages.first().messageText).toBe(groupMessage.messageText);
-      expect(messages.get(1).parameters[0]).toBe(`message num 3`);
-      expect(messages.last().parameters[0]).toBe(`message num ${logLimit + 1}`);
-    });
-
     it("adds console.dirxml call as console.log", () => {
       const { dispatch, getState } = setupStore([]);
 
       const packet = stubPackets.get("console.dirxml(window)");
       dispatch(actions.messageAdd(packet));
 
       const messages = getAllMessages(getState());
       const dirxmlMessage = messages.last();
diff --git a/devtools/client/webconsole/new-console-output/utils/caches.js b/devtools/client/webconsole/new-console-output/utils/caches.js
new file mode 100644
index 0000000..57f93f8
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/utils/caches.js
@@ -0,0 +1,21 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const cellSizeCache = new (require("devtools/client/webconsole/new-console-output/utils/cell-size-cache"))();
+const messageBodyCache = new (require("devtools/client/webconsole/new-console-output/utils/message-body-cache"))();
+
+function clearCaches() {
+  messageBodyCache.clearAllMessageBodies();
+  cellSizeCache.clearAllRowHeights();
+}
+
+module.exports = {
+  cellSizeCache,
+  messageBodyCache,
+  clearCaches,
+};
diff --git a/devtools/client/webconsole/new-console-output/utils/cell-size-cache.js b/devtools/client/webconsole/new-console-output/utils/cell-size-cache.js
new file mode 100644
index 0000000..611a750
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/utils/cell-size-cache.js
@@ -0,0 +1,79 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+module.exports = class CellSizeCache {
+  constructor() {
+    this._cachedRowHeights = {};
+    this._indexToIdMap = {};
+    this._widestRowDimension = 0;
+    this._isDirty = false;
+  }
+
+  clearAllRowHeights() {
+    this._cachedRowHeights = {};
+    this._indexToIdMap = {};
+    this._widestRowDimension = 0;
+    this._isDirty = true;
+  }
+
+  clearRowHeight(index) {
+    const id = this.getIdFromIndex(index);
+    delete this._cachedRowHeights[id];
+    delete this._indexToIdMap[index];
+    this._isDirty = true;
+  }
+
+  getRowHeight(index) {
+    return this.hasRowHeight(index)
+      ? this._cachedRowHeights[this.getIdFromIndex(index)]
+      : 20;
+  }
+
+  getRowHeightById(id) {
+    return this.hasRowHeightById(id) ? this._cachedRowHeights[id] : 20;
+  }
+
+  hasRowHeight(index) {
+    return !!this._cachedRowHeights[this.getIdFromIndex(index)];
+  }
+
+  hasRowHeightById(id) {
+    return !!this._cachedRowHeights[id];
+  }
+
+  setRowHeight(id, index, height) {
+    this._indexToIdMap[index] = id;
+    this._cachedRowHeights[id] = height;
+    this._isDirty = true;
+  }
+
+  getIdFromIndex(index) {
+    return this._indexToIdMap[index];
+  }
+
+  getIndexFromId(id) {
+    return this._indexToIdMap.indexOf(id);
+  }
+
+  getWidestRowDimension() {
+    return this._widestRowDimension;
+  }
+
+  setWidestRowDimension(width) {
+    this._widestRowDimension = width;
+    this._isDirty = true;
+  }
+
+  isDirty() {
+    return this._isDirty;
+  }
+
+  clearIsDirty() {
+    this._isDirty = false;
+  }
+};
diff --git a/devtools/client/webconsole/new-console-output/utils/message-body-cache.js b/devtools/client/webconsole/new-console-output/utils/message-body-cache.js
new file mode 100644
index 0000000..4515d63
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/utils/message-body-cache.js
@@ -0,0 +1,33 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+module.exports = class MessageBodyCache {
+  constructor() {
+    this._cachedMessageBodies = {};
+  }
+
+  clearAllMessageBodies() {
+    this._cachedMessageBodies = {};
+  }
+
+  clearMessageBody(id) {
+    delete this._cachedMessageBodies[id];
+  }
+
+  getMessageBody(id) {
+    return this.hasMessageBody(id) ? this._cachedMessageBodies[id] : null;
+  }
+
+  setMessageBody(id, messageBody) {
+    this._cachedMessageBodies[id] = messageBody;
+  }
+
+  hasMessageBody(id) {
+    return !!this._cachedMessageBodies[id];
+  }
+};
diff --git a/devtools/client/webconsole/new-console-output/utils/moz.build b/devtools/client/webconsole/new-console-output/utils/moz.build
index 00378ba..071625e 100644
--- a/devtools/client/webconsole/new-console-output/utils/moz.build
+++ b/devtools/client/webconsole/new-console-output/utils/moz.build
@@ -1,10 +1,13 @@
 # vim: set filetype=python:
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 DevToolsModules(
+    'caches.js',
+    'cell-size-cache.js',
     'id-generator.js',
+    'message-body-cache.js',
     'messages.js',
     'variables-view.js',
 )
diff --git a/devtools/client/webconsole/new-console-output/utils/variables-view.js b/devtools/client/webconsole/new-console-output/utils/variables-view.js
index 3cfee87..9968de2 100644
--- a/devtools/client/webconsole/new-console-output/utils/variables-view.js
+++ b/devtools/client/webconsole/new-console-output/utils/variables-view.js
@@ -7,14 +7,14 @@
 /* global window */
 "use strict";
 
 /**
  * @TODO Remove this.
  *
  * Once JSTerm is also written in React/Redux, these will be actions.
  */
-exports.openVariablesView = (objectActor) => {
+exports.openVariablesView = (actor) => {
   window.jsterm.openVariablesView({
-    objectActor,
+    objectActor: {actor},
     autofocus: true,
   });
 };
