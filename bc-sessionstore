# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  28d364d49f99709bf0b419a58eee856354e022b8
Bug 1438487 - Restore the Browser Toolbox using session store;r=jryans

diff --git a/devtools/client/debugger/new/test/mochitest/browser_dbg-chrome-create.js b/devtools/client/debugger/new/test/mochitest/browser_dbg-chrome-create.js
--- a/devtools/client/debugger/new/test/mochitest/browser_dbg-chrome-create.js
+++ b/devtools/client/debugger/new/test/mochitest/browser_dbg-chrome-create.js
@@ -39,16 +39,17 @@ function onClose() {
 
 registerCleanupFunction(function() {
   gProcess = null;
 });
 
 add_task(async function() {
   // Windows XP and 8.1 test slaves are terribly slow at this test.
   requestLongerTimeout(5);
+  await pushPref("devtools.chrome.enabled", true);
   await pushPref("devtools.debugger.remote-enabled", true);
 
   gProcess = await initChromeDebugger();
 
   ok(
     gProcess._dbgProcess,
     "The remote debugger process wasn't created properly!"
   );
diff --git a/devtools/client/debugger/test/mochitest/browser_dbg_chrome-create.js b/devtools/client/debugger/test/mochitest/browser_dbg_chrome-create.js
--- a/devtools/client/debugger/test/mochitest/browser_dbg_chrome-create.js
+++ b/devtools/client/debugger/test/mochitest/browser_dbg_chrome-create.js
@@ -7,16 +7,17 @@
  * Tests that a chrome debugger can be created in a new process.
  */
 
 var gProcess;
 
 function test() {
   // Windows XP and 8.1 test slaves are terribly slow at this test.
   requestLongerTimeout(5);
+  Services.prefs.setBoolPref("devtools.chrome.enabled", true);
   Services.prefs.setBoolPref("devtools.debugger.remote-enabled", true);
 
   initChromeDebugger(aOnClose).then(aProcess => {
     gProcess = aProcess;
 
     info("Starting test...");
     performTest();
   });
@@ -52,11 +53,12 @@ function aOnClose() {
   info("process exit value: " + gProcess._dbgProcess.exitValue);
 
   info("profile path: " + gProcess._dbgProfilePath);
 
   finish();
 }
 
 registerCleanupFunction(function () {
+  Services.prefs.clearUserPref("devtools.chrome.enabled");
   Services.prefs.clearUserPref("devtools.debugger.remote-enabled");
   gProcess = null;
 });
diff --git a/devtools/client/framework/ToolboxProcess.jsm b/devtools/client/framework/ToolboxProcess.jsm
--- a/devtools/client/framework/ToolboxProcess.jsm
+++ b/devtools/client/framework/ToolboxProcess.jsm
@@ -86,20 +86,38 @@ this.BrowserToolboxProcess = function Br
 
 EventEmitter.decorate(BrowserToolboxProcess);
 
 /**
  * Initializes and starts a chrome toolbox process.
  * @return object
  */
 BrowserToolboxProcess.init = function (onClose, onRun, options) {
+  if (!Services.prefs.getBoolPref("devtools.chrome.enabled") ||
+      !Services.prefs.getBoolPref("devtools.debugger.remote-enabled")) {
+    console.error("Could not start Browser Toolbox, you need to enable it.");
+    return null;
+  }
   return new BrowserToolboxProcess(onClose, onRun, options);
 };
 
 /**
+ * Figure out if there are any open Browser Toolboxes that'll need to be restored.
+ * @return bool
+ */
+BrowserToolboxProcess.getBrowserToolboxSessionState = function () {
+  for (let process of processes.values()) {
+    if (!process._options || !process._options.addonID) {
+      return true;
+    }
+  }
+  return false;
+};
+
+/**
  * Passes a set of options to the BrowserAddonActors for the given ID.
  *
  * @param id string
  *        The ID of the add-on to pass the options to
  * @param options object
  *        The options.
  * @return a promise that will be resolved when complete.
  */
diff --git a/devtools/client/framework/devtools.js b/devtools/client/framework/devtools.js
--- a/devtools/client/framework/devtools.js
+++ b/devtools/client/framework/devtools.js
@@ -12,16 +12,17 @@ const {DevToolsShim} = require("chrome:/
 // Load gDevToolsBrowser toolbox lazily as they need gDevTools to be fully initialized
 loader.lazyRequireGetter(this, "TargetFactory", "devtools/client/framework/target", true);
 loader.lazyRequireGetter(this, "TabTarget", "devtools/client/framework/target", true);
 loader.lazyRequireGetter(this, "Toolbox", "devtools/client/framework/toolbox", true);
 loader.lazyRequireGetter(this, "ToolboxHostManager", "devtools/client/framework/toolbox-host-manager", true);
 loader.lazyRequireGetter(this, "gDevToolsBrowser", "devtools/client/framework/devtools-browser", true);
 loader.lazyRequireGetter(this, "HUDService", "devtools/client/webconsole/hudservice", true);
 loader.lazyImporter(this, "ScratchpadManager", "resource://devtools/client/scratchpad/scratchpad-manager.jsm");
+loader.lazyImporter(this, "BrowserToolboxProcess", "resource://devtools/client/framework/ToolboxProcess.jsm");
 
 loader.lazyRequireGetter(this, "WebExtensionInspectedWindowFront",
       "devtools/shared/fronts/webextension-inspected-window", true);
 
 const {defaultTools: DefaultTools, defaultThemes: DefaultThemes} =
   require("devtools/client/definitions");
 const EventEmitter = require("devtools/shared/old-event-emitter");
 const {Task} = require("devtools/shared/task");
@@ -392,32 +393,37 @@ DevTools.prototype = {
   /**
    * Called from SessionStore.jsm in mozilla-central when saving the current state.
    *
    * @param {Object} state
    *                 A SessionStore state object that gets modified by reference
    */
   saveDevToolsSession: function (state) {
     state.browserConsole = HUDService.getBrowserConsoleSessionState();
+    state.browserToolbox = BrowserToolboxProcess.getBrowserToolboxSessionState();
 
     // Check if the module is loaded to avoid loading ScratchpadManager for no reason.
     state.scratchpads = [];
     if (Cu.isModuleLoaded("resource://devtools/client/scratchpad/scratchpad-manager.jsm")) {
       state.scratchpads = ScratchpadManager.getSessionState();
     }
   },
 
   /**
    * Restore the devtools session state as provided by SessionStore.
    */
-  restoreDevToolsSession: function ({scratchpads, browserConsole}) {
+  restoreDevToolsSession: function ({scratchpads, browserConsole, browserToolbox}) {
     if (scratchpads) {
       ScratchpadManager.restoreSession(scratchpads);
     }
 
+    if (browserToolbox) {
+      BrowserToolboxProcess.init();
+    }
+
     if (browserConsole && !HUDService.getBrowserConsole()) {
       HUDService.toggleBrowserConsole();
     }
   },
 
   /**
    * Boolean, true, if we never opened a toolbox.
    * Used to implement the telemetry tracking toolbox opening.
diff --git a/devtools/client/framework/test/browser_browser_toolbox.js b/devtools/client/framework/test/browser_browser_toolbox.js
--- a/devtools/client/framework/test/browser_browser_toolbox.js
+++ b/devtools/client/framework/test/browser_browser_toolbox.js
@@ -1,17 +1,17 @@
 /* vim: set ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 // On debug test slave, it takes about 50s to run the test.
 requestLongerTimeout(4);
 
-add_task(function* runTest() {
-  yield new Promise(done => {
+add_task(async function() {
+  await new Promise(done => {
     let options = {"set": [
       ["devtools.debugger.prompt-connection", false],
       ["devtools.debugger.remote-enabled", true],
       ["devtools.chrome.enabled", true],
       // Test-only pref to allow passing `testScript` argument to the browser
       // toolbox
       ["devtools.browser-toolbox.allow-unsafe-script", true],
       // On debug test slave, it takes more than the default time (20s)
@@ -43,23 +43,27 @@ add_task(function* runTest() {
       .then(() => toolbox.destroy());
   };
   env.set("MOZ_TOOLBOX_TEST_SCRIPT", "new " + testScript);
   registerCleanupFunction(() => {
     env.set("MOZ_TOOLBOX_TEST_SCRIPT", "");
   });
 
   let { BrowserToolboxProcess } = ChromeUtils.import("resource://devtools/client/framework/ToolboxProcess.jsm", {});
+  is(BrowserToolboxProcess.getBrowserToolboxSessionState(), false, "No session state initially");
+
   let closePromise;
-  yield new Promise(onRun => {
+  await new Promise(onRun => {
     closePromise = new Promise(onClose => {
       info("Opening the browser toolbox\n");
       BrowserToolboxProcess.init(onClose, onRun);
     });
   });
   ok(true, "Browser toolbox started\n");
+  is(BrowserToolboxProcess.getBrowserToolboxSessionState(), true, "Has session state");
 
-  yield onCustomMessage;
+  await onCustomMessage;
   ok(true, "Received the custom message");
 
-  yield closePromise;
+  await closePromise;
   ok(true, "Browser toolbox process just closed");
+  is(BrowserToolboxProcess.getBrowserToolboxSessionState(), false, "No session state after closing");
 });
diff --git a/devtools/shim/DevToolsShim.jsm b/devtools/shim/DevToolsShim.jsm
--- a/devtools/shim/DevToolsShim.jsm
+++ b/devtools/shim/DevToolsShim.jsm
@@ -147,18 +147,19 @@ this.DevToolsShim = {
    * Called from SessionStore.jsm in mozilla-central when restoring a previous session.
    * Will always be called, even if the session does not contain DevTools related items.
    */
   restoreDevToolsSession: function (session) {
     if (!this.isEnabled()) {
       return;
     }
 
-    let {scratchpads, browserConsole} = session;
-    let hasDevToolsData = browserConsole || (scratchpads && scratchpads.length);
+    let {scratchpads, browserConsole, browserToolbox} = session;
+    let hasDevToolsData = browserConsole || browserToolbox ||
+                          (scratchpads && scratchpads.length);
     if (!hasDevToolsData) {
       // Do not initialize DevTools unless there is DevTools specific data in the session.
       return;
     }
 
     this.initDevTools();
     this._gDevTools.restoreDevToolsSession(session);
   },
