# HG changeset patch
# Parent  6c6f3fd9c5e114a1cb0ebb7fb5c19933954e94dd

diff --git a/toolkit/content/tests/chrome/test_textbox_number.xul b/toolkit/content/tests/chrome/test_textbox_number.xul
--- a/toolkit/content/tests/chrome/test_textbox_number.xul
+++ b/toolkit/content/tests/chrome/test_textbox_number.xul
@@ -24,7 +24,6 @@
   <textbox id="n6" type="number" size="4" value="9" min="12" max="8"/>
 </hbox>
 <hbox>
-  <textbox id="n7" type="number" size="4" value="4.678" min="2" max="10.5" decimalplaces="2"/>
   <textbox id="n8" type="number" hidespinbuttons="true"/>
 </hbox>
 <hbox>
@@ -48,7 +47,6 @@ function doTests() {
   var n4 = $("n4");
   var n5 = $("n5");
   var n6 = $("n6");
-  var n7 = $("n7");
 
   testValsMinMax(n1, "initial n1", 0, 0, Infinity);
   testValsMinMax(n2, "initial n2", 10, 5, 15);
@@ -56,17 +54,6 @@ function doTests() {
   testValsMinMax(n4, "initial n4", -2, -8, 18);
   testValsMinMax(n5, "initial n5", -10, -10, -3);
   testValsMinMax(n6, "initial n6", 12, 12, 12);
-  testValsMinMax(n7, "initial n7", 4.68, 2, 10.5); // value should be rounded
-
-  ok(n1.spinButtons != null && n1.spinButtons.localName == "spinbuttons", "spinButtons set");
-  isnot(n1.decimalSymbol, "", "n1.decimalSymbol is set to something");
-  n1.decimalSymbol = ".";
-  SimpleTest.is(n1.decimalSymbol, ".", "n1.decimalSymbol set to '.'");
-  SimpleTest.is(n1.increment, 1, "increment defaults to 1");
-  SimpleTest.is(n1.decimalPlaces, 0, "decimalPlaces defaults to 0");
-
-  SimpleTest.is(n3.increment, 3, "increment when set to 1");
-  SimpleTest.is(n7.decimalPlaces, 2, "decimalPlaces when set to 2");
 
   // test changing the value
   n1.value = "1700";
@@ -83,14 +70,6 @@ function doTests() {
   testVals(n2, "set value below min negative,", 5);
   n5.value = -2;
   testVals(n5, "set value above max positive,", -3);
-  n7.value = 5.999;
-  testVals(n7, "set value to decimal,", 6, "6.00");
-  n7.value = "1.42";
-  testVals(n7, "set value to decimal below min,", 2.00, "2.00");
-  n7.value = 24.1;
-  testVals(n7, "set value to decimal above max,", 10.5, "10.50");
-  n1.value = 4.75;
-  testVals(n1, "set value to decimal round,", 5);
 
   // test changing the valueNumber
   n1.valueNumber = 27;
@@ -104,93 +83,16 @@ function doTests() {
   n5.valueNumber = -8;
   n5.valueNumber = -1;
   testVals(n5, "set valueNumber above max positive,", -3);
-  n7.valueNumber = 8.23;
-  testVals(n7, "set valueNumber to decimal,", 8.23);
-  n7.valueNumber = 0.77;
-  testVals(n7, "set valueNumber to decimal below min,", 2.00, "2.00");
-  n7.valueNumber = 29.157;
-  testVals(n7, "set valueNumber to decimal above max,", 10.5, "10.50");
-  n1.value = 8.9;
-  testVals(n1, "set valueNumber to decimal round,", 9);
 
   // test changing the min
   n1.value = 6;
   n1.min = 8;
   testValsMinMax(n1, "set integer min,", 8, 8, Infinity);
-  n7.value = 5.5;
-  n7.min = 6.7;
-  testValsMinMax(n7, "set decimal min,", 6.7, 6.7, 10.5, "6.70");
 
   // test changing the max
   n1.value = 25;
   n1.max = 22;
   testValsMinMax(n1, "set integer max,", 22, 8, 22);
-  n7.value = 10.2;
-  n7.max = 10.1;
-  testValsMinMax(n7, "set decimal max,", 10.1, 6.7, 10.1, "10.10");
-
-  // test decrease() and increase() methods
-  testIncreaseDecrease(n1, "integer", 1, 0, 8, 22);
-  testIncreaseDecrease(n7, "decimal", 1, 2, 6.7, 10.1);
-  testIncreaseDecrease(n3, "integer with increment", 3, 0, 1, 12);
-
-  n7.min = 2.7;
-  n7.value = 10.1;
-  n7.increment = 4.3;
-  SimpleTest.is(n7.increment, 4.3, "increment changed");
-  testIncreaseDecrease(n7, "integer with increment", 4.3, 2, 2.7, 10.1);
-
-  n1.value = 22;
-  n1.decimalPlaces = 3;
-  testVals(n1, "set decimalPlaces 3", 22, "22.000");
-  n1.value = 10.624;
-  testVals(n1, "set decimalPlaces 3 set value,", 10.624);
-  n1.decimalPlaces = 0;
-  testVals(n1, "set decimalPlaces 0 set value,", 11);
-  n1.decimalPlaces = Infinity;
-  n1.value = 10.678123;
-  testVals(n1, "set decimalPlaces Infinity set value,", 10.678123);
-
-  n1.decimalSymbol = ",";
-  SimpleTest.is(n1.decimalSymbol, ",", "n1.decimalSymbol set to ','");
-  n1.value = "9.67";
-  testVals(n1, "set decimalPlaces set value,", 9.67);
-
-  n1.decimalSymbol = ".";
-  SimpleTest.is(n1.decimalSymbol, ".", "n1.decimalSymbol set back to '.'");
-  n1.decimalPlaces = 0;
-
-  // UI tests
-  n1.min = 5;
-  n1.max = 15;
-  n1.value = 5;
-  n1.focus();
-
-  var sb = n1.spinButtons;
-  var sbbottom = sb.getBoundingClientRect().bottom - sb.getBoundingClientRect().top - 2;
-
-  synthesizeKey("VK_UP", {});
-  testVals(n1, "key up", 6);
-
-  synthesizeKey("VK_DOWN", {});
-  testVals(n1, "key down", 5);
-
-  synthesizeMouse(sb, 2, 2, {});
-  testVals(n1, "spinbuttons up", 6);
-  synthesizeMouse(sb, 2, sbbottom, {});
-  testVals(n1, "spinbuttons down", 5);
-
-  n1.value = 15;
-  synthesizeKey("VK_UP", {});
-  testVals(n1, "key up at max", 15);
-  synthesizeMouse(sb, 2, 2, {});
-  testVals(n1, "spinbuttons up at max", 15);
-
-  n1.value = 5;
-  synthesizeKey("VK_DOWN", {});
-  testVals(n1, "key down at min", 5);
-  synthesizeMouse(sb, 2, sbbottom, {});
-  testVals(n1, "spinbuttons down at min", 5);
 
   // check read only state
   n1.readOnly = true;
@@ -203,21 +105,7 @@ function doTests() {
   synthesizeKeyExpectEvent("VK_DOWN", { }, n1, "!change", "key down read only");
   is(n1.value, "12", "key down read only value");
 
-  synthesizeMouseExpectEvent(sb, 2, 2, { }, n1, "!change", "mouse up read only");
-  is(n1.value, "12", "mouse up read only value");
-  synthesizeMouseExpectEvent(sb, 2, sbbottom, { }, n1, "!change", "mouse down read only");
-  is(n1.value, "12", "mouse down read only value");
-
   n1.readOnly = false;
-  n1.disabled = true;
-  synthesizeMouseExpectEvent(sb, 2, 2, { }, n1, "!change", "mouse up disabled");
-  is(n1.value, "12", "mouse up disabled value");
-  synthesizeMouseExpectEvent(sb, 2, sbbottom, { }, n1, "!change", "mouse down disabled");
-  is(n1.value, "12", "mouse down disabled value");
-
-  var nsbrect = $("n8").spinButtons.getBoundingClientRect();
-  ok(nsbrect.left == 0 && nsbrect.top == 0 && nsbrect.right == 0, nsbrect.bottom == 0,
-     "hidespinbuttons");
 
   var n9 = $("n9");
   is(n9.value, "0", "initial value");
@@ -256,10 +144,7 @@ function testVals(nb, name, valueNumber,
 
   SimpleTest.is(nb.value, "" + valueNumber, name + " value is '" + valueNumber + "'");
   SimpleTest.is(nb.valueNumber, valueNumber, name + " valueNumber is " + valueNumber);
-
-  // This value format depends on the localized decimal symbol.
-  var localizedValue = valueFieldNumber.replace(/\./, nb.decimalSymbol);
-  SimpleTest.is(nb.inputField.value, localizedValue,
+  SimpleTest.is(nb.inputField.value, valueFieldNumber,
       name + " inputField value is '" + localizedValue + "'");
 }
 
@@ -269,52 +154,6 @@ function testValsMinMax(nb, name, valueN
   SimpleTest.is(nb.max, max, name + " max is " + max);
 }
 
-function testIncreaseDecrease(nb, testid, increment, fixedCount, min, max)
-{
-  testid += " ";
-
-  nb.value = max;
-  nb.decrease();
-  testVals(nb, testid + "decrease method", max - increment,
-           (max - increment).toFixed(fixedCount));
-  nb.increase();
-  testVals(nb, testid + "increase method", max, max.toFixed(fixedCount));
-  nb.value = min;
-  nb.decrease();
-  testVals(nb, testid + "decrease method at min", min, min.toFixed(fixedCount));
-  nb.value = max;
-  nb.increase();
-  testVals(nb, testid + "increase method at max", max, max.toFixed(fixedCount));
-
-  nb.focus();
-  nb.value = min;
-
-  // pressing the cursor up and down keys should adjust the value
-  synthesizeKeyExpectEvent("VK_UP", { }, nb, "change", testid + "key up");
-  is(nb.value, String(min + increment), testid + "key up");
-  nb.value = max;
-  synthesizeKeyExpectEvent("VK_UP", { }, nb, "!change", testid + "key up at max");
-  is(nb.value, String(max), testid + "key up at max");
-  synthesizeKeyExpectEvent("VK_DOWN", { }, nb, "change", testid + "key down");
-  is(nb.value, String(max - increment), testid + "key down");
-  nb.value = min;
-  synthesizeKeyExpectEvent("VK_DOWN", { }, nb, "!change", testid + "key down at min");
-  is(nb.value, String(min), testid + "key down at min");
-
-  // check pressing the spinbutton arrows
-  var sb = nb.spinButtons;
-  var sbbottom = sb.getBoundingClientRect().bottom - sb.getBoundingClientRect().top - 2;
-  nb.value = min;
-  synthesizeMouseExpectEvent(sb, 2, 2, { }, nb, "change", testid + "mouse up");
-  is(nb.value, String(min + increment), testid + "mouse up");
-  nb.value = max;
-  synthesizeMouseExpectEvent(sb, 2, 2, { }, nb, "!change", testid + "mouse up at max");
-  synthesizeMouseExpectEvent(sb, 2, sbbottom, { }, nb, "change", testid + "mouse down");
-  is(nb.value, String(max - increment), testid + "mouse down");
-  nb.value = min;
-  synthesizeMouseExpectEvent(sb, 2, sbbottom, { }, nb, "!change", testid + "mouse down at min");
-}
-
 SimpleTest.waitForFocus(doTests);
 
   ]]></script>
diff --git a/toolkit/content/widgets/numberbox.xml b/toolkit/content/widgets/numberbox.xml
--- a/toolkit/content/widgets/numberbox.xml
+++ b/toolkit/content/widgets/numberbox.xml
@@ -19,36 +19,22 @@
 
     <content>
       <xul:hbox class="textbox-input-box numberbox-input-box" flex="1" xbl:inherits="context,disabled,focused">
-        <html:input class="numberbox-input textbox-input" anonid="input"
-                    xbl:inherits="value,maxlength,disabled,size,readonly,placeholder,tabindex,accesskey"/>
+        <html:input class="numberbox-input textbox-input" type="number" anonid="input"
+                    xbl:inherits="value,max,min,maxlength,disabled,size,readonly,placeholder,tabindex,accesskey"/>
       </xul:hbox>
-      <xul:spinbuttons anonid="buttons" xbl:inherits="disabled,hidden=hidespinbuttons"/>
     </content>
 
     <implementation>
       <field name="_valueEntered">false</field>
-      <field name="_spinButtons">null</field>
       <field name="_value">0</field>
-      <field name="decimalSymbol">"."</field>
 
-      <property name="spinButtons" readonly="true">
-        <getter>
-          <![CDATA[
-            if (!this._spinButtons)
-              this._spinButtons = document.getAnonymousElementByAttribute(this, "anonid", "buttons");
-            return this._spinButtons;
-          ]]>
-        </getter>
-      </property>
-
-      <property name="value" onget="return '' + this.valueNumber"
+      <property name="value" onget="return String(this.valueNumber)"
                              onset="return this.valueNumber = val;"/>
 
       <property name="valueNumber">
         <getter>
           if (this._valueEntered) {
             var newval = this.inputField.value;
-            newval = newval.replace(this.decimalSymbol, ".");
             this._validateValue(newval, false);
           }
           return this._value;
@@ -95,90 +81,8 @@
         </setter>
       </property>
 
-      <property name="decimalPlaces">
-        <getter>
-          var places = this.getAttribute("decimalplaces");
-          return places ? Number(places) : 0;
-        </getter>
-        <setter>
-          if (typeof val == "number") {
-            this.setAttribute("decimalplaces", val);
-            this._validateValue(this.valueNumber, false);
-          }
-          return val;
-        </setter>
-      </property>
-
-      <property name="increment">
-        <getter>
-          var increment = this.getAttribute("increment");
-          return increment ? Number(increment) : 1;
-        </getter>
-        <setter>
-        <![CDATA[
-          if (typeof val == "number")
-            this.setAttribute("increment", val);
-          return val;
-        ]]>
-        </setter>
-      </property>
-
-      <method name="decrease">
-        <body>
-          return this._validateValue(this.valueNumber - this.increment, true);
-        </body>
-      </method>
-
-      <method name="increase">
-        <body>
-          return this._validateValue(this.valueNumber + this.increment, true);
-        </body>
-      </method>
-
-      <method name="_modifyUp">
-        <body>
-          <![CDATA[
-            if (this.disabled || this.readOnly)
-              return;
-            var oldval = this.valueNumber;
-            var newval = this.increase();
-            this.inputField.select();
-            if (oldval != newval)
-              this._fireChange();
-          ]]>
-        </body>
-      </method>
-      <method name="_modifyDown">
-        <body>
-          <![CDATA[
-            if (this.disabled || this.readOnly)
-              return;
-            var oldval = this.valueNumber;
-            var newval = this.decrease();
-            this.inputField.select();
-            if (oldval != newval)
-              this._fireChange();
-          ]]>
-        </body>
-      </method>
-
-      <method name="_enableDisableButtons">
-        <body>
-          <![CDATA[
-            var buttons = this.spinButtons;
-            if (this.disabled || this.readOnly) {
-              buttons.decreaseDisabled = buttons.increaseDisabled = true;
-            } else {
-              buttons.decreaseDisabled = (this.valueNumber <= this.min);
-              buttons.increaseDisabled = (this.valueNumber >= this.max);
-            }
-          ]]>
-        </body>
-      </method>
-
       <method name="_validateValue">
         <parameter name="aValue"/>
-        <parameter name="aIsIncDec"/>
         <body>
           <![CDATA[
             aValue = Number(aValue) || 0;
@@ -190,14 +94,9 @@
             else if (aValue > max)
               aValue = max;
 
-            var places = this.decimalPlaces;
-            aValue = (places == Infinity) ? "" + aValue : aValue.toFixed(places);
-
             this._valueEntered = false;
             this._value = Number(aValue);
-            this.inputField.value = aValue.replace(/\./, this.decimalSymbol);
-
-            this._enableDisableButtons();
+            this.inputField.value = aValue;
 
             return aValue;
           ]]>
@@ -216,10 +115,6 @@
         if (this.max < this.min)
           this.max = this.min;
 
-        var dsymbol = (Number(5.4)).toLocaleString().match(/\D/);
-        if (dsymbol != null)
-          this.decimalSymbol = dsymbol[0];
-
         var value = this.inputField.value || 0;
         this._validateValue(value, false);
       ]]></constructor>
@@ -234,11 +129,6 @@
       <handler event="keypress">
         <![CDATA[
           if (!event.ctrlKey && !event.metaKey && !event.altKey && event.charCode) {
-            if (event.charCode == this.decimalSymbol.charCodeAt(0) &&
-                this.decimalPlaces &&
-                String(this.inputField.value).indexOf(this.decimalSymbol) == -1)
-              return;
-
             if (event.charCode == 45 && this.min < 0)
               return;
 
@@ -247,27 +137,9 @@
           }
         ]]>
       </handler>
-
-      <handler event="keypress" keycode="VK_UP">
-        this._modifyUp();
-      </handler>
-
-      <handler event="keypress" keycode="VK_DOWN">
-        this._modifyDown();
-      </handler>
-
-      <handler event="up" preventdefault="true">
-        this._modifyUp();
-      </handler>
-
-      <handler event="down" preventdefault="true">
-        this._modifyDown();
-      </handler>
-
       <handler event="change">
         if (event.originalTarget == this.inputField) {
           var newval = this.inputField.value;
-          newval = newval.replace(this.decimalSymbol, ".");
           this._validateValue(newval, false);
         }
       </handler>
diff --git a/toolkit/content/widgets/textbox.xml b/toolkit/content/widgets/textbox.xml
--- a/toolkit/content/widgets/textbox.xml
+++ b/toolkit/content/widgets/textbox.xml
@@ -188,7 +188,7 @@
           if (this.hasAttribute("focused"))
             return;
 
-          switch (event.originalTarget) {
+          switch (event.target) {
             case this:
               // Forward focus to actual HTML input
               this.inputField.focus();
diff --git a/toolkit/content/xul.css b/toolkit/content/xul.css
--- a/toolkit/content/xul.css
+++ b/toolkit/content/xul.css
@@ -786,6 +786,10 @@ textbox[type="number"] {
   -moz-binding: url("chrome://global/content/bindings/numberbox.xml#numberbox");
 }
 
+textbox[type="number"][hidespinbuttons="true"] > .numberbox-input {
+  -moz-appearance: textfield !important;
+}
+
 .textbox-contextmenu:-moz-locale-dir(rtl) {
   direction: rtl;
 }
diff --git a/toolkit/themes/linux/global/in-content/common.css b/toolkit/themes/linux/global/in-content/common.css
--- a/toolkit/themes/linux/global/in-content/common.css
+++ b/toolkit/themes/linux/global/in-content/common.css
@@ -81,10 +81,6 @@ html|input[type="checkbox"]:-moz-focusri
   outline: 1px dotted;
 }
 
-xul|spinbuttons {
-  -moz-appearance: none;
-}
-
 xul|treechildren::-moz-tree-row(multicol, odd) {
   background-color: var(--in-content-box-background-odd);
 }
diff --git a/toolkit/themes/linux/global/numberbox.css b/toolkit/themes/linux/global/numberbox.css
--- a/toolkit/themes/linux/global/numberbox.css
+++ b/toolkit/themes/linux/global/numberbox.css
@@ -19,15 +19,4 @@ textbox[type="number"] {
 
 html|*.numberbox-input {
   text-align: right;
-}
-
-.numberbox-input-box {
-  -moz-box-align: center;
-  -moz-appearance: spinner-textfield;
-  margin-right: -1px;
-  padding: 3px;
-}
-
-textbox[hidespinbuttons="true"] > .numberbox-input-box {
-  -moz-appearance: textfield;
-}
+}
\ No newline at end of file
diff --git a/toolkit/themes/osx/global/in-content/common.css b/toolkit/themes/osx/global/in-content/common.css
--- a/toolkit/themes/osx/global/in-content/common.css
+++ b/toolkit/themes/osx/global/in-content/common.css
@@ -57,11 +57,6 @@ xul|*.radio-icon {
   margin-inline-end: 0;
 }
 
-xul|*.numberbox-input-box {
-  -moz-appearance: none;
-  border-width: 0;
-}
-
 xul|*.text-link:-moz-focusring {
   color: var(--in-content-link-highlight);
   text-decoration: underline;
diff --git a/toolkit/themes/osx/global/numberbox.css b/toolkit/themes/osx/global/numberbox.css
--- a/toolkit/themes/osx/global/numberbox.css
+++ b/toolkit/themes/osx/global/numberbox.css
@@ -19,7 +19,3 @@ html|*.numberbox-input {
   padding: 0 1px !important;
 }
 
-.numberbox-input-box {
-  -moz-appearance: textfield;
-  margin-right: 4px;
-}
diff --git a/toolkit/themes/shared/in-content/common.inc.css b/toolkit/themes/shared/in-content/common.inc.css
--- a/toolkit/themes/shared/in-content/common.inc.css
+++ b/toolkit/themes/shared/in-content/common.inc.css
@@ -347,40 +347,30 @@ html|*.help-button:hover:active {
   background-color: var(--in-content-category-background-active);
 }
 
-xul|*.spinbuttons-button {
+html|*.numberbox-input::-moz-number-spin-up,
+html|*.numberbox-input::-moz-number-spin-down {
+  -moz-appearance: none;
   min-height: initial;
   margin-inline-start: 10px !important;
   margin-inline-end: 2px !important;
-}
-
-xul|*.spinbuttons-up {
-  margin-top: 2px !important;
-  border-radius: 1px 1px 0 0;
-}
-
-xul|*.spinbuttons-down  {
-  margin-bottom: 2px !important;
-  border-radius: 0 0 1px 1px;
-}
-
-xul|*.spinbuttons-button > xul|*.button-box {
   padding: 1px 5px 2px !important;
 }
 
-xul|*.spinbuttons-up > xul|*.button-box > xul|*.button-icon {
-  list-style-image: url("chrome://global/skin/arrow/arrow-up.gif");
+html|*.numberbox-input::-moz-number-spin-up {
+  margin-top: 2px !important;
+  border-radius: 1px 1px 0 0;
+  background-image: url("chrome://global/skin/arrow/arrow-up.gif");
 }
 
-xul|*.spinbuttons-up[disabled="true"] > xul|*.button-box > xul|*.button-icon {
-  list-style-image: url("chrome://global/skin/arrow/arrow-up-dis.gif");
+html|*.numberbox-input::-moz-number-spin-down  {
+  margin-bottom: 2px !important;
+  border-radius: 0 0 1px 1px;
+  background-image: url("chrome://global/skin/arrow/arrow-dn.gif");
 }
 
-xul|*.spinbuttons-down > xul|*.button-box > xul|*.button-icon {
-  list-style-image: url("chrome://global/skin/arrow/arrow-dn.gif");
-}
-
-xul|*.spinbuttons-down[disabled="true"] > xul|*.button-box > xul|*.button-icon {
-  list-style-image: url("chrome://global/skin/arrow/arrow-dn-dis.gif");
+html|*.numberbox-input:disabled::-moz-number-spin-up,
+html|*.numberbox-input:disabled::-moz-number-spin-down {
+  opacity: 0.5;
 }
 
 xul|menulist:not([editable="true"]) > xul|*.menulist-dropmarker {
diff --git a/toolkit/themes/windows/global/numberbox.css b/toolkit/themes/windows/global/numberbox.css
--- a/toolkit/themes/windows/global/numberbox.css
+++ b/toolkit/themes/windows/global/numberbox.css
@@ -18,7 +18,3 @@ html|*.numberbox-input {
   text-align: right;
 }
 
-.numberbox-input-box {
-  -moz-box-align: center;
-}
-
