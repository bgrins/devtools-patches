# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  8dbdafbe6276afcd08e31442763d61d1139271b7
Settle before reload

diff --git a/testing/talos/talos/tests/devtools/addon/content/damp.js b/testing/talos/talos/tests/devtools/addon/content/damp.js
--- a/testing/talos/talos/tests/devtools/addon/content/damp.js
+++ b/testing/talos/talos/tests/devtools/addon/content/damp.js
@@ -65,28 +65,29 @@ Damp.prototype = {
       let stopRecordTimestamp = performance.now();
       return {
         toolbox,
         time: stopRecordTimestamp - startRecordTimestamp
       };
     });
   },
 
-  closeToolbox: function() {
+  closeToolbox: Task.async(function*() {
     let tab = getActiveTab(getMostRecentBrowserWindow());
     let target = devtools.TargetFactory.forTab(tab);
+    yield this.waitForRequestsToSettle();
     let startRecordTimestamp = performance.now();
     let closePromise = gDevTools.closeToolbox(target);
     return closePromise.then(() => {
       let stopRecordTimestamp = performance.now();
       return {
         time: stopRecordTimestamp - startRecordTimestamp
       };
     });
-  },
+  }),
 
   waitForRequestsToSettle() {
     let tab = getActiveTab(getMostRecentBrowserWindow());
     let target = devtools.TargetFactory.forTab(tab);
     return target.client.waitForRequestsToSettle();
   },
 
   saveHeapSnapshot: function(label) {
@@ -119,16 +120,17 @@ Damp.prototype = {
   },
 
   _consoleBulkLoggingTest: Task.async(function*() {
     let TOTAL_MESSAGES = 10;
     let tab = yield this.testSetup(SIMPLE_URL);
     let messageManager = tab.linkedBrowser.messageManager;
     let {toolbox} = yield this.openToolbox("webconsole");
     let webconsole = toolbox.getPanel("webconsole");
+    yield this.waitForRequestsToSettle();
 
     // Resolve once the last message has been received.
     let allMessagesReceived = new Promise(resolve => {
       function receiveMessages(e, messages) {
         for (let m of messages) {
           if (m.node.textContent.includes("damp " + TOTAL_MESSAGES)) {
             webconsole.hud.ui.off("new-messages", receiveMessages);
             // Wait for the console to redraw
@@ -172,16 +174,17 @@ Damp.prototype = {
   // time per rAF.  The idea is that the console being slow can slow down
   // content (i.e. Bug 1237368).
   _consoleStreamLoggingTest: Task.async(function*() {
     let TOTAL_MESSAGES = 100;
     let tab = yield this.testSetup(SIMPLE_URL);
     let messageManager = tab.linkedBrowser.messageManager;
     let {toolbox} = yield this.openToolbox("webconsole");
     let webconsole = toolbox.getPanel("webconsole");
+    yield this.waitForRequestsToSettle();
 
     // Load a frame script using a data URI so we can do logs
     // from the page.  So this is running in content.
     messageManager.loadFrameScript("data:,(" + encodeURIComponent(
       `function () {
         let count = 0;
         let startTime = content.performance.now();
         function log() {
@@ -272,70 +275,77 @@ Damp.prototype = {
       let {time} = yield this.reloadPage();
       this._results.push({name: name + ".reload.DAMP", value: time });
     }.bind(this));
 
     let subtests = {
       webconsoleOpen: Task.async(function*() {
         yield this.testSetup(url);
         yield openToolboxAndLog(label + ".webconsole", "webconsole");
+        yield this.waitForRequestsToSettle();
         yield reloadPageAndLog(label + ".webconsole");
         yield this.waitForRequestsToSettle();
         yield closeToolboxAndLog(label + ".webconsole");
         yield this.testTeardown();
       }),
 
       inspectorOpen: Task.async(function*() {
         yield this.testSetup(url);
         yield openToolboxAndLog(label + ".inspector", "inspector");
+        yield this.waitForRequestsToSettle();
         yield reloadPageAndLog(label + ".inspector");
         yield this.waitForRequestsToSettle();
         yield closeToolboxAndLog(label + ".inspector");
         yield this.testTeardown();
       }),
 
       debuggerOpen: Task.async(function*() {
         yield this.testSetup(url);
         yield openToolboxAndLog(label + ".jsdebugger", "jsdebugger");
+        yield this.waitForRequestsToSettle();
         yield reloadPageAndLog(label + ".jsdebugger");
         yield this.waitForRequestsToSettle();
         yield closeToolboxAndLog(label + ".jsdebugger");
         yield this.testTeardown();
       }),
 
       styleEditorOpen: Task.async(function*() {
         yield this.testSetup(url);
         yield openToolboxAndLog(label + ".styleeditor", "styleeditor");
+        yield this.waitForRequestsToSettle();
         yield reloadPageAndLog(label + ".styleeditor");
         yield this.waitForRequestsToSettle();
         yield closeToolboxAndLog(label + ".styleeditor");
         yield this.testTeardown();
       }),
 
       performanceOpen: Task.async(function*() {
         yield this.testSetup(url);
         yield openToolboxAndLog(label + ".performance", "performance");
+        yield this.waitForRequestsToSettle();
         yield reloadPageAndLog(label + ".performance");
         yield this.waitForRequestsToSettle();
         yield closeToolboxAndLog(label + ".performance");
         yield this.testTeardown();
       }),
 
       netmonitorOpen: Task.async(function*() {
         yield this.testSetup(url);
         yield openToolboxAndLog(label + ".netmonitor", "netmonitor");
+        yield this.waitForRequestsToSettle();
         yield reloadPageAndLog(label + ".netmonitor");
         yield this.waitForRequestsToSettle();
         yield closeToolboxAndLog(label + ".netmonitor");
         yield this.testTeardown();
       }),
 
       saveAndReadHeapSnapshot: Task.async(function*() {
         yield this.testSetup(url);
         yield openToolboxAndLog(label + ".memory", "memory");
+        yield this.waitForRequestsToSettle();
         yield reloadPageAndLog(label + ".memory");
         yield this.saveHeapSnapshot(label);
         yield this.readHeapSnapshot(label);
         yield this.takeCensus(label);
         yield this.waitForRequestsToSettle();
         yield closeToolboxAndLog(label + ".memory");
         yield this.testTeardown();
       }),
