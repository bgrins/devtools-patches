
# HG changeset patch
# User Julian Descottes <jdescottes@mozilla.com>
# Date 1462365897 -7200
# Node ID 09874a1e6f2c942a1f9de827fedd14da7e67a6e5
# Parent  bf7a7e5b7a7d45f8b6b5d135d9f8453a6b60d7d7
Bug 1259834 - Create basic HTML tooltip API;f=bgrins

MozReview-Commit-ID: 8njiKBubLSj

diff --git a/devtools/client/jar.mn b/devtools/client/jar.mn
--- a/devtools/client/jar.mn
+++ b/devtools/client/jar.mn
@@ -129,6 +129,7 @@
     content/shared/widgets/spectrum-frame.xhtml (shared/widgets/spectrum-frame.xhtml)
     content/shared/widgets/spectrum.css (shared/widgets/spectrum.css)
     content/shared/widgets/cubic-bezier-frame.xhtml (shared/widgets/cubic-bezier-frame.xhtml)
+    content/shared/widgets/tooltip-frame.xhtml (shared/widgets/tooltip-frame.xhtml)
     content/shared/widgets/cubic-bezier.css (shared/widgets/cubic-bezier.css)
     content/shared/widgets/mdn-docs-frame.xhtml (shared/widgets/mdn-docs-frame.xhtml)
     content/shared/widgets/mdn-docs.css (shared/widgets/mdn-docs.css)
diff --git a/devtools/client/shared/test/browser.ini b/devtools/client/shared/test/browser.ini
--- a/devtools/client/shared/test/browser.ini
+++ b/devtools/client/shared/test/browser.ini
@@ -111,6 +111,9 @@
 skip-if = e10s # Bug 1221911, bug 1222289, frequent e10s timeouts
 [browser_graphs-16.js]
 skip-if = e10s # Bug 1221911, bug 1222289, frequent e10s timeouts
+[browser_html_tooltip-01.js]
+[browser_html_tooltip-02.js]
+[browser_html_tooltip-03.js]
 [browser_inplace-editor-01.js]
 [browser_inplace-editor-02.js]
 [browser_inplace-editor_maxwidth.js]
diff --git a/devtools/client/shared/test/browser_html_tooltip-01.js b/devtools/client/shared/test/browser_html_tooltip-01.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/shared/test/browser_html_tooltip-01.js
@@ -0,0 +1,65 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+const HTML_NS = "http://www.w3.org/1999/xhtml";
+const TEST_URI = `data:text/xml;charset=UTF-8,<?xml version="1.0"?>
+  <?xml-stylesheet href="chrome://global/skin/global.css"?>
+  <window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
+   title="Tooltip test">
+    <vbox flex="1">
+      <hbox id="box1" flex="1">test1</hbox>
+      <hbox id="box2" flex="1">test2</hbox>
+      <hbox id="box3" flex="1">test3</hbox>
+      <hbox id="box4" flex="1">test4</hbox>
+    </vbox>
+  </window>`;
+
+const {HTMLTooltip} = require("devtools/client/shared/widgets/HTMLTooltip");
+
+function getTooltipContent(doc) {
+  let div = doc.createElementNS(HTML_NS, "div");
+  div.style.height = "50px";
+  div.style.boxSizing = "border-box";
+  div.textContent = "tooltip";
+  return div;
+}
+
+add_task(function* () {
+  yield addTab("about:blank");
+  let [,, doc] = yield createHost("bottom", TEST_URI);
+
+  let tooltip = new HTMLTooltip({doc}, {});
+
+  info("Set tooltip content");
+  yield tooltip.setContent(getTooltipContent(doc), 100, 50);
+
+  is(tooltip.isVisible(), false, "Tooltip is not visible");
+
+  info("Show the tooltip and check the expected events are fired.");
+
+  let shown = 0;
+  tooltip.on("shown", () => shown++);
+
+  let onShown = tooltip.once("shown");
+  tooltip.show(doc.getElementById("box1"));
+
+  yield onShown;
+  is(shown, 1, "Event shown was fired once");
+
+  is(tooltip.isVisible(), true, "Tooltip is visible");
+
+  info("Hide the tooltip and check the expected events are fired.");
+
+  let hidden = 0;
+  tooltip.on("hidden", () => hidden++);
+
+  let onPopupHidden = tooltip.once("hidden");
+  tooltip.hide();
+
+  yield onPopupHidden;
+  is(hidden, 1, "Event hidden was fired once");
+
+  is(tooltip.isVisible(), false, "Tooltip is not visible");
+});
diff --git a/devtools/client/shared/test/browser_html_tooltip-02.js b/devtools/client/shared/test/browser_html_tooltip-02.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/shared/test/browser_html_tooltip-02.js
@@ -0,0 +1,115 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+const HTML_NS = "http://www.w3.org/1999/xhtml";
+const TEST_URI = `data:text/xml;charset=UTF-8,<?xml version="1.0"?>
+  <?xml-stylesheet href="chrome://global/skin/global.css"?>
+  <window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
+   title="Tooltip test">
+    <vbox flex="1">
+      <hbox id="box1" flex="1">test1</hbox>
+      <hbox id="box2" flex="1">test2</hbox>
+      <hbox id="box3" flex="1">test3</hbox>
+      <hbox id="box4" flex="1">test4</hbox>
+    </vbox>
+  </window>`;
+
+const {HTMLTooltip} = require("devtools/client/shared/widgets/HTMLTooltip");
+
+add_task(function* () {
+  yield addTab("about:blank");
+  let [,, doc] = yield createHost("bottom", TEST_URI);
+
+  yield testTooltipClosesOnOutsideClick(doc);
+  yield testTooltipNotClosingOnInsideClick(doc);
+  yield testConsumeOutsideClicksFalse(doc);
+  yield testConsumeOutsideClicksTrue(doc);
+});
+
+function* testTooltipClosesOnOutsideClick(doc) {
+  info("Test a tooltip can be closed by clicking outside");
+  let box4 = doc.getElementById("box4");
+
+  let tooltip = new HTMLTooltip({doc}, {});
+  yield tooltip.setContent(getTooltipContent(doc), 100, 50);
+  yield showTooltip(tooltip, doc);
+
+  let onHidden = tooltip.once("hidden");
+  EventUtils.synthesizeMouseAtCenter(box4, {}, doc.defaultView);
+  yield onHidden;
+  is(tooltip.isVisible(), false, "Tooltip is hidden");
+
+  tooltip.destroy();
+}
+
+function* testTooltipNotClosingOnInsideClick(doc) {
+  info("Test a tooltip is not closed when clicking inside itself");
+
+  let tooltip = new HTMLTooltip({doc}, {});
+  yield tooltip.setContent(getTooltipContent(doc), 100, 50);
+  yield showTooltip(tooltip, doc);
+
+  let onTooltipContainerClick = once(tooltip.container, "click");
+  EventUtils.synthesizeMouseAtCenter(tooltip.container, {}, doc.defaultView);
+  yield onTooltipContainerClick;
+  is(tooltip.isVisible(), true, "Tooltip is still visible");
+
+  tooltip.destroy();
+}
+
+function* testConsumeOutsideClicksFalse(doc) {
+  info("Test closing a tooltip via click with consumeOutsideClicks: false");
+  let box4 = doc.getElementById("box4");
+
+  let tooltip = new HTMLTooltip({doc}, {consumeOutsideClicks: false});
+  yield tooltip.setContent(getTooltipContent(doc), 100, 50);
+  yield showTooltip(tooltip, doc);
+
+  let onBox4Clicked = once(box4, "click");
+  let onHidden = once(tooltip, "hidden");
+  EventUtils.synthesizeMouseAtCenter(box4, {}, doc.defaultView);
+  yield onHidden;
+  yield onBox4Clicked;
+
+  is(tooltip.isVisible(), false, "Tooltip is hidden");
+
+  tooltip.destroy();
+}
+
+function* testConsumeOutsideClicksTrue(doc) {
+  info("Test closing a tooltip via click with consumeOutsideClicks: true");
+  let box4 = doc.getElementById("box4");
+
+  // Count clicks on box4
+  let box4clicks = 0;
+  box4.addEventListener("click", () => box4clicks++);
+
+  let tooltip = new HTMLTooltip({doc}, {consumeOutsideClicks: true});
+  yield tooltip.setContent(getTooltipContent(doc), 100, 50);
+  yield showTooltip(tooltip, doc);
+
+  let onHidden = once(tooltip, "hidden");
+  EventUtils.synthesizeMouseAtCenter(box4, {}, doc.defaultView);
+  yield onHidden;
+
+  is(box4clicks, 0, "box4 catched no click event");
+  is(tooltip.isVisible(), false, "Tooltip is hidden");
+
+  tooltip.destroy();
+}
+
+function getTooltipContent(doc) {
+  let div = doc.createElementNS(HTML_NS, "div");
+  div.style.height = "50px";
+  div.style.boxSizing = "border-box";
+  div.textContent = "tooltip";
+  return div;
+}
+
+function showTooltip(tooltip, doc) {
+  let onShown = once(tooltip, "shown");
+  tooltip.show(doc.getElementById("box1"));
+  return onShown;
+}
diff --git a/devtools/client/shared/test/browser_html_tooltip-03.js b/devtools/client/shared/test/browser_html_tooltip-03.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/shared/test/browser_html_tooltip-03.js
@@ -0,0 +1,97 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+const HTML_NS = "http://www.w3.org/1999/xhtml";
+const TEST_URI = `data:text/xml;charset=UTF-8,<?xml version="1.0"?>
+  <?xml-stylesheet href="chrome://global/skin/global.css"?>
+  <window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
+   title="Tooltip test">
+    <vbox flex="1">
+      <hbox id="box1" flex="1">test1</hbox>
+      <hbox id="box2" flex="1">test2</hbox>
+      <hbox id="box3" flex="1">test3</hbox>
+      <hbox id="box4" flex="1">
+        <textbox id="box4-input"></textbox>
+      </hbox>
+    </vbox>
+  </window>`;
+
+const {HTMLTooltip} = require("devtools/client/shared/widgets/HTMLTooltip");
+
+add_task(function* () {
+  yield addTab("about:blank");
+  let [,, doc] = yield createHost("bottom", TEST_URI);
+
+  yield testTooltipWithAutoFocus(doc);
+  yield testTooltipWithoutAutoFocus(doc);
+});
+
+function* testTooltipWithAutoFocus(doc) {
+  info("Test a tooltip with autofocus takes focus when displayed");
+  let textbox = doc.querySelector("textbox");
+
+  info("Focus a XUL textbox");
+  let onInputFocus = once(textbox, "focus");
+  EventUtils.synthesizeMouseAtCenter(textbox, {}, doc.defaultView);
+  yield onInputFocus;
+
+  is(getFocusedDocument(doc), doc, "Focus is in the XUL document");
+
+  let tooltip = new HTMLTooltip({doc}, {autofocus: true});
+  let tooltipNode = getTooltipContent(doc);
+  yield tooltip.setContent(tooltipNode, 150, 50);
+
+  yield showTooltip(tooltip, doc);
+  is(getFocusedDocument(doc), tooltipNode.ownerDocument,
+    "Focus is in the tooltip document");
+
+  let onHidden = tooltip.once("hidden");
+  tooltip.destroy();
+  yield onHidden;
+}
+
+function* testTooltipWithoutAutoFocus(doc) {
+  info("Test a tooltip can be closed by clicking outside");
+  let textbox = doc.querySelector("textbox");
+
+  info("Focus a XUL textbox");
+  let onInputFocus = once(textbox, "focus");
+  EventUtils.synthesizeMouseAtCenter(textbox, {}, doc.defaultView);
+  yield onInputFocus;
+
+  is(getFocusedDocument(doc), doc, "Focus is in the XUL document");
+
+  let tooltip = new HTMLTooltip({doc}, {autofocus: false});
+  let tooltipNode = getTooltipContent(doc);
+  yield tooltip.setContent(tooltipNode, 150, 50);
+
+  yield showTooltip(tooltip, doc);
+  is(getFocusedDocument(doc), doc, "Focus is still in the XUL document");
+
+  let onHidden = tooltip.once("hidden");
+  tooltip.destroy();
+  yield onHidden;
+}
+
+function showTooltip(tooltip, doc) {
+  let onShown = once(tooltip, "shown");
+  tooltip.show(doc.getElementById("box1"));
+  return onShown;
+}
+
+function getFocusedDocument(doc) {
+  let activeElement = doc.activeElement;
+  while (activeElement && activeElement.contentDocument) {
+    activeElement = activeElement.contentDocument.activeElement;
+  }
+  return activeElement.ownerDocument;
+}
+
+function getTooltipContent(doc) {
+  let div = doc.createElementNS(HTML_NS, "div");
+  div.style.height = "50px";
+  div.style.boxSizing = "border-box";
+  return div;
+}
diff --git a/devtools/client/shared/widgets/HTMLTooltip.js b/devtools/client/shared/widgets/HTMLTooltip.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/shared/widgets/HTMLTooltip.js
@@ -0,0 +1,289 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const EventEmitter = require("devtools/shared/event-emitter");
+const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
+const XHTML_NS = "http://www.w3.org/1999/xhtml";
+
+const IFRAME_URL = "chrome://devtools/content/shared/widgets/tooltip-frame.xhtml";
+const IFRAME_CONTAINER_ID = "tooltip-iframe-container";
+
+/**
+ * The HTMLTooltip can display HTML content in a tooltip popup.
+ *
+ * @param {Toolbox} toolbox
+ *        The devtools toolbox, needed to get the devtools main window.
+ * @param {Object}
+ *        - {String} type
+ *          Display type of the tooltip. Possible values: "normal"
+ *        - {Boolean} autofocus
+ *          Defaults to true. Should the tooltip be focused when opening it.
+ *        - {Boolean} consumeOutsideClicks
+ *          Defaults to true. The tooltip is closed when clicking outside.
+ *          Should this event be stopped and consumed or not.
+ */
+exports.HTMLTooltip = function (toolbox,
+  {type = "normal", autofocus = true, consumeOutsideClicks = true} = {}) {
+  EventEmitter.decorate(this);
+
+  this.document = toolbox.doc;
+  this.type = type;
+  this.autofocus = autofocus;
+  this.consumeOutsideClicks = consumeOutsideClicks;
+
+  // Use the topmost window to listen for click events to close the tooltip
+  this.topWindow = this.document.defaultView.top;
+
+  this._onClick = this._onClick.bind(this);
+
+  this.container = this._createContainer();
+
+  // Promise that will resolve when the container can be filled with content.
+  this.containerReady = new Promise(resolve => {
+    if (this._isXUL()) {
+      // In XUL context, load a placeholder document in the iframe container.
+      let onLoad = () => {
+        this.container.removeEventListener("load", onLoad, true);
+        resolve();
+      };
+
+      this.container.addEventListener("load", onLoad, true);
+      this.container.setAttribute("src", IFRAME_URL);
+    } else {
+      // In non-XUL context the container is ready to use as is.
+      resolve();
+    }
+  });
+};
+
+exports.HTMLTooltip.prototype = {
+  position: {
+    TOP: "top",
+    BOTTOM: "bottom",
+  },
+
+  /**
+   * Set the tooltip content element. The preferred width/height should also be
+   * specified here.
+   *
+   * @param {Element} content
+   *        The tooltip content, should be a HTML element.
+   * @param {Number} width
+   *        Preferred width for the tooltip container
+   * @param {Number} height
+   *        Preferred height for the tooltip container
+   * @return {Promise} a promise that will resolve when the content has been
+   *         added in the tooltip container.
+   */
+  setContent: function (content, width, height) {
+    this.preferredWidth = width;
+    this.preferredHeight = height;
+
+    return this.containerReady.then(() => {
+      let parent;
+      if (this._isXUL()) {
+        // In XUL context, we are wrapping the HTML content in an iframe.
+        let win = this.container.contentWindow.wrappedJSObject;
+        parent = win.document.getElementById(IFRAME_CONTAINER_ID);
+      } else {
+        parent = this.container;
+      }
+
+      parent.innerHTML = "";
+      parent.appendChild(content);
+    });
+  },
+
+  /**
+   * Show the tooltip next to the provided anchor element. A preferred position
+   * can be set. The event "shown" will be fired after the tooltip is displayed.
+   *
+   * @param {Element} anchor
+   *        The reference element with which the tooltip should be aligned
+   * @param {Object}
+   *        - {String} position: optional, possible values: top|bottom
+   *          If layout permits, the tooltip will be displayed on top/bottom
+   *          of the anchor. If ommitted, the tooltip will be displayed where
+   *          more space is available.
+   */
+  show: function (anchor, {position} = {}) {
+    this.containerReady.then(() => {
+      let {top, left, width, height} = this._findBestPosition(anchor, position);
+
+      if (this._isXUL()) {
+        this.container.setAttribute("width", width);
+        this.container.setAttribute("height", height);
+      } else {
+        this.container.style.width = width + "px";
+        this.container.style.height = height + "px";
+      }
+
+      this.container.style.top = top + "px";
+      this.container.style.left = left + "px";
+      this.container.style.display = "block";
+
+      if (this.autofocus) {
+        this.container.focus();
+      }
+
+      this.attachEventsTimer = this.document.defaultView.setTimeout(() => {
+        this.topWindow.addEventListener("click", this._onClick, true);
+        this.emit("shown");
+      }, 0);
+    });
+  },
+
+  /**
+   * Hide the current tooltip. The event "hidden" will be fired when the tooltip
+   * is hidden.
+   */
+  hide: function () {
+    this.document.defaultView.clearTimeout(this.attachEventsTimer);
+
+    if (this.isVisible()) {
+      this.topWindow.removeEventListener("click", this._onClick, true);
+      this.container.style.display = "none";
+      this.emit("hidden");
+    }
+  },
+
+  /**
+   * Check if the tooltip is currently displayed.
+   * @return {Boolean} true if the tooltip is visible
+   */
+  isVisible: function () {
+    return this.container.style.display != "none";
+  },
+
+  /**
+   * Destroy the tooltip instance. Hide the tooltip if displayed, remove the
+   * tooltip container from the document.
+   */
+  destroy: function () {
+    this.hide();
+    this.container.remove();
+  },
+
+  _createContainer: function () {
+    let container;
+    if (this._isXUL()) {
+      container = this.document.createElementNS(XHTML_NS, "iframe");
+      container.classList.add("devtools-tooltip-iframe");
+      this.document.querySelector("window").appendChild(container);
+    } else {
+      container = this.document.createElementNS(XHTML_NS, "div");
+      this.document.body.appendChild(container);
+    }
+
+    container.classList.add("theme-body");
+    container.classList.add("devtools-htmltooltip-container");
+
+    return container;
+  },
+
+  _onClick: function (e) {
+    if (this._isInTooltipContainer(e.target)) {
+      return;
+    }
+
+    this.hide();
+    if (this.consumeOutsideClicks) {
+      e.preventDefault();
+      e.stopPropagation();
+    }
+  },
+
+  _isInTooltipContainer: function (node) {
+    if (this._isXUL()) {
+      let win = this.container.contentWindow.wrappedJSObject;
+      if (node.ownerDocument.defaultView == win) {
+        return true;
+      }
+    } else {
+      while (node) {
+        if (node === this.container) {
+          return true;
+        }
+        node = node.parentNode;
+      }
+    }
+    return false;
+  },
+
+  _findBestPosition: function (anchor, position) {
+    let top, left;
+    let {TOP, BOTTOM} = this.position;
+
+    let {left: anchorLeft, top: anchorTop, height: anchorHeight}
+      = this._getRelativeRect(anchor, this.document);
+
+    let {bottom: docBottom, right: docRight} =
+      this.document.documentElement.getBoundingClientRect();
+
+    let height = this.preferredHeight;
+    // Check if the popup can fit above the anchor.
+    let availableTop = anchorTop;
+    let fitsAbove = availableTop >= height;
+    // Check if the popup can fit below the anchor.
+    let availableBelow = docBottom - (anchorTop + anchorHeight);
+    let fitsBelow = availableBelow >= height;
+
+    let isPositionSuitable = (fitsAbove && position == TOP)
+      || (fitsBelow && position == BOTTOM);
+    if (!isPositionSuitable) {
+      // If the preferred position does not fit the preferred height,
+      // pick the position offering the most height.
+      position = availableTop > availableBelow ? TOP : BOTTOM;
+    }
+
+    // Calculate height, capped by the maximum height available.
+    height = Math.min(height, Math.max(availableTop, availableBelow));
+    top = position == TOP ? anchorTop - height : anchorTop + anchorHeight;
+
+    let availableWidth = docRight;
+    let width = Math.min(this.preferredWidth, availableWidth);
+
+    // By default, align the tooltip's left edge with the anchor left edge.
+    if (anchorLeft + width <= docRight) {
+      left = anchorLeft;
+    } else {
+      // If the tooltip cannot fit, shift to the left just enough to fit.
+      left = docRight - width;
+    }
+
+    return {top, left, width, height};
+  },
+
+  /**
+   * Get the bounding client rectangle for a given node, relative to a custom
+   * reference element (instead of the default for getBoundingClientRect which
+   * is always the element's ownerDocument).
+   */
+  _getRelativeRect: function (node, relativeTo) {
+    // Width and Height can be taken from the rect.
+    let {width, height} = node.getBoundingClientRect();
+
+    // Find the smallest top/left coordinates from all quads.
+    let top = Infinity, left = Infinity;
+    let quads = node.getBoxQuads({relativeTo: relativeTo});
+    for (let quad of quads) {
+      top = Math.min(top, quad.bounds.top);
+      left = Math.min(left, quad.bounds.left);
+    }
+
+    // Compute right and bottom coordinates using the rest of the data.
+    let right = left + width;
+    let bottom = top + height;
+
+    return {top, right, bottom, left, width, height};
+  },
+
+  _isXUL: function () {
+    return this.document.documentElement.namespaceURI === XUL_NS;
+  },
+};
diff --git a/devtools/client/shared/widgets/moz.build b/devtools/client/shared/widgets/moz.build
--- a/devtools/client/shared/widgets/moz.build
+++ b/devtools/client/shared/widgets/moz.build
@@ -16,6 +16,7 @@
     'FlameGraph.js',
     'Graphs.js',
     'GraphsWorker.js',
+    'HTMLTooltip.js',
     'LineGraphWidget.js',
     'MdnDocsWidget.js',
     'MountainGraphWidget.js',
diff --git a/devtools/client/shared/widgets/tooltip-frame.xhtml b/devtools/client/shared/widgets/tooltip-frame.xhtml
new file mode 100644
--- /dev/null
+++ b/devtools/client/shared/widgets/tooltip-frame.xhtml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- This Source Code Form is subject to the terms of the Mozilla Public
+   - License, v. 2.0. If a copy of the MPL was not distributed with this
+   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
+<!DOCTYPE html>
+
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head>
+  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
+  <script type="application/javascript;version=1.8" src="chrome://devtools/content/shared/theme-switching.js"/>
+  <style>
+    html, body, #tooltip-iframe-container {
+      margin: 0;
+      padding: 0;
+      width: 100%;
+      height: 100%;
+      overflow: hidden;
+    }
+  </style>
+</head>
+<body role="application" class="theme-body">
+  <div id="tooltip-iframe-container"></div>
+</body>
+</html>
diff --git a/devtools/client/themes/common.css b/devtools/client/themes/common.css
--- a/devtools/client/themes/common.css
+++ b/devtools/client/themes/common.css
@@ -234,6 +234,12 @@
   background: transparent;
 }
 
+.devtools-htmltooltip-container {
+  display: none;
+  position: fixed;
+  z-index: 9999;
+}
+
 /* links to source code, like displaying `myfile.js:45` */
 
 .devtools-source-link {

