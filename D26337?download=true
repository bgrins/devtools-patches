diff --git a/devtools/client/locales/en-US/webconsole.properties b/devtools/client/locales/en-US/webconsole.properties
--- a/devtools/client/locales/en-US/webconsole.properties
+++ b/devtools/client/locales/en-US/webconsole.properties
@@ -287,6 +287,15 @@
 # LOCALIZATION NOTE (webconsole.enablePersistentLogs.tooltip)
 webconsole.enablePersistentLogs.tooltip=If you enable this option the output will not be cleared each time you navigate to a new page
 
+# LOCALIZATION NOTE (browserconsole.contentMessagesCheckbox.label)
+# Label used in the browser console filter bar. This label is used for a checkbox that
+# allows the user to show or hide console messages from the content process to be
+# displayed in the browser console.
+browserconsole.contentMessagesCheckbox.label=Show Content Messages
+# LOCALIZATION NOTE (browserconsole.contentMessagesCheckbox.tooltip)
+# Tooltip for the "Show content messages" checkbox in the Browser Console filter bar.
+browserconsole.contentMessagesCheckbox.tooltip=Enable this to display messages from the content process in the output
+
 # LOCALIZATION NOTE (webconsole.navigated): this string is used in the console when the
 # current inspected page is navigated to a new location.
 # Parameters: %S is the new URL.
diff --git a/devtools/client/preferences/devtools-client.js b/devtools/client/preferences/devtools-client.js
--- a/devtools/client/preferences/devtools-client.js
+++ b/devtools/client/preferences/devtools-client.js
@@ -286,6 +286,11 @@
 // Enable message grouping in the console, false by default
 pref("devtools.webconsole.groupWarningMessages", false);
 
+// Enable Content messages filtering in the browser console.
+pref("devtools.browserconsole.filterContentMessages", false);
+// Saved state of the Display content messages checkbox in the browser console.
+pref("devtools.browserconsole.contentMessages", false);
+
 // Enable client-side mapping service for source maps
 pref("devtools.source-map.client-service.enabled", true);
 
diff --git a/devtools/client/webconsole/actions/ui.js b/devtools/client/webconsole/actions/ui.js
--- a/devtools/client/webconsole/actions/ui.js
+++ b/devtools/client/webconsole/actions/ui.js
@@ -15,6 +15,7 @@
   PREFS,
   REVERSE_SEARCH_INPUT_TOGGLE,
   SELECT_NETWORK_MESSAGE_TAB,
+  SHOW_CONTENT_MESSAGES_TOGGLE,
   SHOW_OBJECT_IN_SIDEBAR,
   SIDEBAR_CLOSE,
   SPLIT_CONSOLE_CLOSE_BUTTON_TOGGLE,
@@ -31,6 +32,16 @@
   };
 }
 
+function contentMessagesToggle() {
+  return ({dispatch, getState, prefsService}) => {
+    dispatch({
+      type: SHOW_CONTENT_MESSAGES_TOGGLE,
+    });
+    const uiState = getAllUi(getState());
+    prefsService.setBoolPref(PREFS.UI.CONTENT_MESSAGES, uiState.showContentMessages);
+  };
+}
+
 function timestampsToggle(visible) {
   return {
     type: TIMESTAMPS_TOGGLE,
@@ -100,6 +111,7 @@
 }
 
 module.exports = {
+  contentMessagesToggle,
   initialize,
   persistToggle,
   reverseSearchInputToggle,
diff --git a/devtools/client/webconsole/components/App.js b/devtools/client/webconsole/components/App.js
--- a/devtools/client/webconsole/components/App.js
+++ b/devtools/client/webconsole/components/App.js
@@ -52,6 +52,7 @@
       reverseSearchInputVisible: PropTypes.bool,
       reverseSearchInitialValue: PropTypes.string,
       editorMode: PropTypes.bool,
+      hideShowContentMessagesCheckbox: PropTypes.bool,
     };
   }
 
@@ -204,6 +205,7 @@
       autocomplete,
       reverseSearchInitialValue,
       editorMode,
+      hideShowContentMessagesCheckbox,
     } = this.props;
 
     const classNames = ["webconsole-app"];
@@ -233,6 +235,7 @@
         div({className: "webconsole-flex-wrapper"},
           FilterBar({
             hidePersistLogsCheckbox: webConsoleUI.isBrowserConsole,
+            hideShowContentMessagesCheckbox,
             attachRefToWebConsoleUI,
             closeSplitConsole,
           }),
diff --git a/devtools/client/webconsole/components/FilterBar.js b/devtools/client/webconsole/components/FilterBar.js
--- a/devtools/client/webconsole/components/FilterBar.js
+++ b/devtools/client/webconsole/components/FilterBar.js
@@ -30,6 +30,8 @@
       attachRefToWebConsoleUI: PropTypes.func.isRequired,
       persistLogs: PropTypes.bool.isRequired,
       hidePersistLogsCheckbox: PropTypes.bool.isRequired,
+      showContentMessages: PropTypes.bool.isRequired,
+      hideShowContentMessagesCheckbox: PropTypes.bool.isRequired,
       filteredMessagesCount: PropTypes.object.isRequired,
       closeButtonVisible: PropTypes.bool,
       closeSplitConsole: PropTypes.func,
@@ -39,6 +41,7 @@
   static get defaultProps() {
     return {
       hidePersistLogsCheckbox: false,
+      hideShowContentMessagesCheckbox: true,
     };
   }
 
@@ -49,6 +52,7 @@
     this.onClickRemoveTextFilter = this.onClickRemoveTextFilter.bind(this);
     this.onSearchInput = this.onSearchInput.bind(this);
     this.onChangePersistToggle = this.onChangePersistToggle.bind(this);
+    this.onChangeShowContent = this.onChangeShowContent.bind(this);
     this.renderFiltersConfigBar = this.renderFiltersConfigBar.bind(this);
     this.renderFilteredMessagesBar = this.renderFilteredMessagesBar.bind(this);
   }
@@ -68,6 +72,7 @@
     const {
       filter,
       persistLogs,
+      showContentMessages,
       filteredMessagesCount,
       closeButtonVisible,
     } = this.props;
@@ -80,6 +85,10 @@
       return true;
     }
 
+    if (nextProps.showContentMessages !== showContentMessages) {
+      return true;
+    }
+
     if (
       JSON.stringify(nextProps.filteredMessagesCount) !==
         JSON.stringify(filteredMessagesCount)
@@ -114,6 +123,10 @@
     this.props.dispatch(actions.persistToggle());
   }
 
+  onChangeShowContent() {
+    this.props.dispatch(actions.contentMessagesToggle());
+  }
+
   renderFiltersConfigBar() {
     const {
       dispatch,
@@ -233,7 +246,9 @@
       persistLogs,
       filteredMessagesCount,
       hidePersistLogsCheckbox,
+      hideShowContentMessagesCheckbox,
       closeSplitConsole,
+      showContentMessages,
     } = this.props;
 
     const children = [
@@ -270,6 +285,12 @@
           onChange: this.onChangePersistToggle,
           checked: persistLogs,
         }),
+        !hideShowContentMessagesCheckbox && FilterCheckbox({
+          label: l10n.getStr("browserconsole.contentMessagesCheckbox.label"),
+          title: l10n.getStr("browserconsole.contentMessagesCheckbox.tooltip"),
+          onChange: this.onChangeShowContent,
+          checked: showContentMessages,
+        }),
       ),
     ];
 
@@ -313,6 +334,7 @@
   return {
     filter: getAllFilters(state),
     persistLogs: uiState.persistLogs,
+    showContentMessages: uiState.showContentMessages,
     filteredMessagesCount: getFilteredMessagesCount(state),
     closeButtonVisible: uiState.closeButtonVisible,
   };
diff --git a/devtools/client/webconsole/constants.js b/devtools/client/webconsole/constants.js
--- a/devtools/client/webconsole/constants.js
+++ b/devtools/client/webconsole/constants.js
@@ -35,6 +35,7 @@
   REVERSE_SEARCH_INPUT_TOGGLE: "REVERSE_SEARCH_INPUT_TOGGLE",
   SELECT_NETWORK_MESSAGE_TAB: "SELECT_NETWORK_MESSAGE_TAB",
   SHOW_OBJECT_IN_SIDEBAR: "SHOW_OBJECT_IN_SIDEBAR",
+  SHOW_CONTENT_MESSAGES_TOGGLE: "SHOW_CONTENT_MESSAGES_TOGGLE",
   SIDEBAR_CLOSE: "SIDEBAR_CLOSE",
   SPLIT_CONSOLE_CLOSE_BUTTON_TOGGLE: "SPLIT_CONSOLE_CLOSE_BUTTON_TOGGLE",
   TIMESTAMPS_TOGGLE: "TIMESTAMPS_TOGGLE",
@@ -67,6 +68,8 @@
       INPUT_HISTORY_COUNT: "devtools.webconsole.inputHistoryCount",
       // Is editor mode enabled.
       EDITOR: "devtools.webconsole.input.editor",
+      // Display content messages in the browser console
+      CONTENT_MESSAGES: "devtools.browserconsole.contentMessages",
     },
     FEATURES: {
       // We use the same pref to enable the sidebar on webconsole and browser console.
@@ -74,6 +77,7 @@
       JSTERM_CODE_MIRROR: "devtools.webconsole.jsterm.codeMirror",
       AUTOCOMPLETE: "devtools.webconsole.input.autocomplete",
       GROUP_WARNINGS: "devtools.webconsole.groupWarningMessages",
+      FILTER_CONTENT_MESSAGES: "devtools.browserconsole.filterContentMessages",
     },
   },
 };
diff --git a/devtools/client/webconsole/reducers/messages.js b/devtools/client/webconsole/reducers/messages.js
--- a/devtools/client/webconsole/reducers/messages.js
+++ b/devtools/client/webconsole/reducers/messages.js
@@ -96,9 +96,10 @@
  * @param {MessageState} state: The message state ( = managed by this reducer).
  * @param {FiltersState} filtersState: The filters state.
  * @param {PrefsState} prefsState: The preferences state.
+ * @param {UiState} uiState: The ui state.
  * @returns {MessageState} a new messages state.
  */
-function addMessage(newMessage, state, filtersState, prefsState) {
+function addMessage(newMessage, state, filtersState, prefsState, uiState) {
   const {
     messagesById,
     replayProgressMessages,
@@ -171,7 +172,7 @@
       // We create it and add it to the store.
       const groupMessage = createWarningGroupMessage(
         warningGroupMessageId, warningGroupType, newMessage);
-      state = addMessage(groupMessage, state, filtersState, prefsState);
+      state = addMessage(groupMessage, state, filtersState, prefsState, uiState);
       state.warningGroupsById.set(warningGroupMessageId, []);
     }
 
@@ -184,6 +185,7 @@
         messagesState: state,
         filtersState,
         prefsState,
+        uiState,
       }).visible
     ) {
       // Then we put it in the visibleMessages properties, at the position of the first
@@ -217,6 +219,7 @@
     messagesState: state,
     filtersState,
     prefsState,
+    uiState,
   });
 
   if (visible) {
@@ -257,7 +260,7 @@
   return state;
 }
 
-function messages(state = MessageState(), action, filtersState, prefsState) {
+function messages(state = MessageState(), action, filtersState, prefsState, uiState) {
   const {
     messagesById,
     messagesUiById,
@@ -302,7 +305,7 @@
 
       newState = cloneState(state);
       list.forEach(message => {
-        newState = addMessage(message, newState, filtersState, prefsState);
+        newState = addMessage(message, newState, filtersState, prefsState, uiState);
       });
 
       return limitTopLevelMessageCount(newState, logLimit);
@@ -375,6 +378,7 @@
               messagesState: openState,
               filtersState,
               prefsState,
+              uiState,
             // We want to check if the message is in an open group
             // only if it is not a direct child of the group we're opening.
               checkGroup: message.groupId !== action.id,
@@ -474,6 +478,7 @@
     case constants.FILTER_TEXT_SET:
     case constants.FILTERS_CLEAR:
     case constants.DEFAULT_FILTERS_RESET:
+    case constants.SHOW_CONTENT_MESSAGES_TOGGLE:
       const messagesToShow = [];
       const filtered = getDefaultFiltersCounter();
 
@@ -482,6 +487,7 @@
           messagesState: state,
           filtersState,
           prefsState,
+          uiState,
         });
 
         if (visible) {
@@ -732,8 +738,23 @@
     messagesState,
     filtersState,
     prefsState,
+    uiState,
     checkGroup = true,
 }) {
+  // Do not display the message if it's not from chromeContext and we don't show content
+  // messages.
+  if (
+    !uiState.showContentMessages &&
+    message.chromeContext === false &&
+    message.type !== MESSAGE_TYPE.COMMAND &&
+    message.type !== MESSAGE_TYPE.RESULT
+  ) {
+    return {
+      visible: false,
+      cause: "contentMessage",
+    };
+  }
+
   // Do not display the message if it's in closed group.
   if (
     checkGroup
diff --git a/devtools/client/webconsole/reducers/prefs.js b/devtools/client/webconsole/reducers/prefs.js
--- a/devtools/client/webconsole/reducers/prefs.js
+++ b/devtools/client/webconsole/reducers/prefs.js
@@ -10,6 +10,7 @@
   sidebarToggle: false,
   jstermCodeMirror: false,
   groupWarnings: false,
+  filterContentMessages: false,
   historyCount: 50,
 }, overrides));
 
diff --git a/devtools/client/webconsole/reducers/ui.js b/devtools/client/webconsole/reducers/ui.js
--- a/devtools/client/webconsole/reducers/ui.js
+++ b/devtools/client/webconsole/reducers/ui.js
@@ -11,6 +11,7 @@
   PERSIST_TOGGLE,
   REVERSE_SEARCH_INPUT_TOGGLE,
   SELECT_NETWORK_MESSAGE_TAB,
+  SHOW_CONTENT_MESSAGES_TOGGLE,
   SHOW_OBJECT_IN_SIDEBAR,
   SIDEBAR_CLOSE,
   SPLIT_CONSOLE_CLOSE_BUTTON_TOGGLE,
@@ -25,6 +26,7 @@
   initialized: false,
   networkMessageActiveTabId: PANELS.HEADERS,
   persistLogs: false,
+  showContentMessages: false,
   sidebarVisible: false,
   timestampsVisible: true,
   gripInSidebar: null,
@@ -37,27 +39,30 @@
 function ui(state = UiState(), action) {
   switch (action.type) {
     case PERSIST_TOGGLE:
-      return Object.assign({}, state, {persistLogs: !state.persistLogs});
+      return {...state, persistLogs: !state.persistLogs};
+    case SHOW_CONTENT_MESSAGES_TOGGLE:
+      return {...state, showContentMessages: !state.showContentMessages};
     case TIMESTAMPS_TOGGLE:
-      return Object.assign({}, state, {timestampsVisible: action.visible});
+      return {...state, timestampsVisible: action.visible};
     case SELECT_NETWORK_MESSAGE_TAB:
-      return Object.assign({}, state, {networkMessageActiveTabId: action.id});
+      return {...state, networkMessageActiveTabId: action.id};
     case SIDEBAR_CLOSE:
-      return Object.assign({}, state, {
+      return {
+        ...state,
         sidebarVisible: false,
         gripInSidebar: null,
-      });
+      };
     case INITIALIZE:
-      return Object.assign({}, state, {initialized: true});
+      return {...state, initialized: true};
     case MESSAGES_CLEAR:
-      return Object.assign({}, state, {sidebarVisible: false, gripInSidebar: null});
+      return {...state, sidebarVisible: false, gripInSidebar: null};
     case SHOW_OBJECT_IN_SIDEBAR:
       if (action.grip === state.gripInSidebar) {
         return state;
       }
-      return Object.assign({}, state, {sidebarVisible: true, gripInSidebar: action.grip});
+      return {...state, sidebarVisible: true, gripInSidebar: action.grip};
     case SPLIT_CONSOLE_CLOSE_BUTTON_TOGGLE:
-      return Object.assign({}, state, {closeButtonVisible: action.shouldDisplayButton});
+      return {...state, closeButtonVisible: action.shouldDisplayButton};
     case REVERSE_SEARCH_INPUT_TOGGLE:
       return {
         ...state,
diff --git a/devtools/client/webconsole/store.js b/devtools/client/webconsole/store.js
--- a/devtools/client/webconsole/store.js
+++ b/devtools/client/webconsole/store.js
@@ -52,6 +52,7 @@
   const autocomplete = getBoolPref(PREFS.FEATURES.AUTOCOMPLETE);
   const groupWarnings = getBoolPref(PREFS.FEATURES.GROUP_WARNINGS);
   const historyCount = getIntPref(PREFS.UI.INPUT_HISTORY_COUNT);
+  const filterContentMessages = getBoolPref(PREFS.FEATURES.FILTER_CONTENT_MESSAGES);
 
   const initialState = {
     prefs: PrefState({
@@ -61,6 +62,7 @@
       autocomplete,
       historyCount,
       groupWarnings,
+      filterContentMessages,
     }),
     filters: FilterState({
       error: getBoolPref(PREFS.FILTER.ERROR),
@@ -75,6 +77,9 @@
     ui: UiState({
       networkMessageActiveTabId: "headers",
       persistLogs: getBoolPref(PREFS.UI.PERSIST),
+      showContentMessages: webConsoleUI.isBrowserConsole && filterContentMessages
+        ? getBoolPref(PREFS.UI.CONTENT_MESSAGES)
+        : true,
       editor: getBoolPref(PREFS.UI.EDITOR),
     }),
   };
@@ -116,7 +121,7 @@
     // We want to compute the new state for all properties except
     // "messages" and "history". These two reducers are handled
     // separately since they are receiving additional arguments.
-    const newState = [...Object.entries(reducers)].reduce((res, [key, reducer]) => {
+    const newState = Object.entries(reducers).reduce((res, [key, reducer]) => {
       if (key !== "messages" && key !== "history") {
         res[key] = reducer(state[key], action);
       }
@@ -126,15 +131,16 @@
     // Pass prefs state as additional argument to the history reducer.
     newState.history = reducers.history(state.history, action, newState.prefs);
 
-    return Object.assign(newState, {
-      // specifically pass the updated filters and prefs state as additional arguments.
-      messages: reducers.messages(
-        state.messages,
-        action,
-        newState.filters,
-        newState.prefs,
-      ),
-    });
+    // Specifically pass the updated filters, prefs and ui states as additional arguments.
+    newState.messages = reducers.messages(
+      state.messages,
+      action,
+      newState.filters,
+      newState.prefs,
+      newState.ui,
+    );
+
+    return newState;
   };
 }
 
diff --git a/devtools/client/webconsole/test/mocha-test-setup.js b/devtools/client/webconsole/test/mocha-test-setup.js
--- a/devtools/client/webconsole/test/mocha-test-setup.js
+++ b/devtools/client/webconsole/test/mocha-test-setup.js
@@ -27,6 +27,8 @@
 pref("devtools.webconsole.groupWarningMessages", false);
 pref("devtools.webconsole.input.editor", false);
 pref("devtools.webconsole.input.autocomplete", true);
+pref("devtools.browserconsole.contentMessages", true);
+pref("devtools.browserconsole.filterContentMessages", false);
 
 global.loader = {
   lazyServiceGetter: () => {},
diff --git a/devtools/client/webconsole/test/mochitest/browser_console_webconsole_console_api_calls.js b/devtools/client/webconsole/test/mochitest/browser_console_webconsole_console_api_calls.js
--- a/devtools/client/webconsole/test/mochitest/browser_console_webconsole_console_api_calls.js
+++ b/devtools/client/webconsole/test/mochitest/browser_console_webconsole_console_api_calls.js
@@ -6,21 +6,41 @@
 
 "use strict";
 
-const TEST_URI = `data:text/html,<meta charset=utf8>console API calls`;
+const contentArgs = {
+  log: "MyLog",
+  warn: "MyWarn",
+  error: "MyError",
+  info: "MyInfo",
+  debug: "MyDebug",
+  counterName: "MyCounter",
+  timerName: "MyTimer",
+};
+
+const TEST_URI = `data:text/html,<meta charset=utf8>console API calls<script>
+  console.log("${contentArgs.log}");
+  console.warn("${contentArgs.warn}");
+  console.error("${contentArgs.error}");
+  console.info("${contentArgs.info}");
+  console.debug("${contentArgs.debug}");
+  console.count("${contentArgs.counterName}");
+  console.time("${contentArgs.timerName}");
+  console.timeLog("${contentArgs.timerName}");
+  console.timeEnd("${contentArgs.timerName}");
+  console.trace();
+  console.assert(false, "err");
+</script>`;
 
 add_task(async function() {
-  await addTab(TEST_URI);
-  const hud = await HUDService.toggleBrowserConsole();
+  // Enable the checkbox
+  await pushPref("devtools.browserconsole.filterContentMessages", true);
 
-  const contentArgs = {
-    log: "MyLog",
-    warn: "MyWarn",
-    error: "MyError",
-    info: "MyInfo",
-    debug: "MyDebug",
-    counterName: "MyCounter",
-    timerName: "MyTimer",
-  };
+  // Show the content messages
+  await pushPref("devtools.browserconsole.contentMessages", true);
+
+  const hud = await HUDService.toggleBrowserConsole();
+  hud.ui.clearOutput();
+
+  await addTab(TEST_URI);
 
   const expectedMessages = [
     contentArgs.log,
@@ -30,25 +50,33 @@
     contentArgs.debug,
     `${contentArgs.counterName}: 1`,
     `${contentArgs.timerName}:`,
+    `timer ended`,
     `console.trace`,
     `Assertion failed`,
   ];
-  const onAllMessages = Promise.all(expectedMessages.map(m => waitForMessage(hud, m)));
-
-  ContentTask.spawn(gBrowser.selectedBrowser, contentArgs, function(args) {
-    content.console.log(args.log);
-    content.console.warn(args.warn);
-    content.console.error(args.error);
-    content.console.info(args.info);
-    content.console.debug(args.debug);
-    content.console.count(args.counterName);
-    content.console.time(args.timerName);
-    content.console.timeEnd(args.timerName);
-    content.console.trace();
-    content.console.assert(false, "err");
-  });
-
-  await onAllMessages;
+  await waitFor(() =>
+    expectedMessages.every(expectedMessage => findMessage(hud, expectedMessage)));
 
   ok(true, "Expected messages are displayed in the browser console");
+
+  info("Uncheck the Show content messages checkbox");
+  const onContentMessagesHidden = waitFor(() => !findMessage(hud, contentArgs.log));
+  const checkbox =
+    hud.ui.outputNode.querySelector(".webconsole-filterbar-primary .filter-checkbox");
+  checkbox.click();
+  await onContentMessagesHidden;
+
+  for (const expectedMessage of expectedMessages) {
+    ok(!findMessage(hud, expectedMessage), `"${expectedMessage}" is hidden`);
+  }
+
+  info("Check the Show content messages checkbox");
+  const onContentMessagesDisplayed = waitFor(() =>
+    expectedMessages.every(expectedMessage => findMessage(hud, expectedMessage)));
+  checkbox.click();
+  await onContentMessagesDisplayed;
+
+  for (const expectedMessage of expectedMessages) {
+    ok(findMessage(hud, expectedMessage), `"${expectedMessage}" is visible`);
+  }
 });
diff --git a/devtools/client/webconsole/webconsole-wrapper.js b/devtools/client/webconsole/webconsole-wrapper.js
--- a/devtools/client/webconsole/webconsole-wrapper.js
+++ b/devtools/client/webconsole/webconsole-wrapper.js
@@ -354,6 +354,8 @@
         closeSplitConsole: this.closeSplitConsole.bind(this),
         jstermCodeMirror,
         autocomplete,
+        hideShowContentMessagesCheckbox: !webConsoleUI.isBrowserConsole ||
+          !prefs.filterContentMessages,
       });
 
       // Render the root Application component.

