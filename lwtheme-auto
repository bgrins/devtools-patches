# HG changeset patch
# Parent 58ea51266672b10e54377816fe46fb6ea40d1098
# User Brian Grinstead <bgrinstead@mozilla.com>
sadfds

diff --git a/browser/app/profile/firefox.js b/browser/app/profile/firefox.js
--- a/browser/app/profile/firefox.js
+++ b/browser/app/profile/firefox.js
@@ -1301,16 +1301,17 @@ pref("services.sync.prefs.sync.security.
 pref("services.sync.prefs.sync.security.tls.version.min", true);
 pref("services.sync.prefs.sync.security.tls.version.max", true);
 pref("services.sync.prefs.sync.signon.rememberSignons", true);
 pref("services.sync.prefs.sync.spellchecker.dictionary", true);
 pref("services.sync.prefs.sync.xpinstall.whitelist.required", true);
 #endif
 
 // Developer edition preferences
+pref("browser.devedition.theme.optedOut", false);
 #ifdef MOZ_DEV_EDITION
 pref("browser.devedition.theme.enabled", true);
 pref("browser.devedition.theme.showCustomizeButton", true);
 #else
 pref("browser.devedition.theme.enabled", false);
 pref("browser.devedition.theme.showCustomizeButton", false);
 #endif
 
diff --git a/browser/base/content/browser-devedition.js b/browser/base/content/browser-devedition.js
--- a/browser/base/content/browser-devedition.js
+++ b/browser/base/content/browser-devedition.js
@@ -6,79 +6,91 @@
  * Listeners for the DevEdition theme.  This adds an extra stylesheet
  * to browser.xul if a pref is set and no other themes are applied.
  */
 let DevEdition = {
   _prefName: "browser.devedition.theme.enabled",
   _themePrefName: "general.skins.selectedSkin",
   _lwThemePrefName: "lightweightThemes.isThemeSelected",
   _devtoolsThemePrefName: "devtools.theme",
+  _optedOutPrefName: "browser.devedition.theme.optedOut",
 
   styleSheetLocation: "chrome://browser/skin/devedition.css",
   styleSheet: null,
 
   init: function () {
-    this._updateDevtoolsThemeAttribute();
-    this._updateStyleSheetFromPrefs();
+    //  XXX: Need to detect if a particular lw theme is applied on startup
+
 
     // Listen for changes to all prefs except for complete themes.
     // No need for this since changing a complete theme requires a
     // restart.
     Services.prefs.addObserver(this._lwThemePrefName, this, false);
     Services.prefs.addObserver(this._prefName, this, false);
     Services.prefs.addObserver(this._devtoolsThemePrefName, this, false);
     Services.obs.addObserver(this, "lightweight-theme-styling-update", false);
   },
 
   observe: function (subject, topic, data) {
     if (topic == "lightweight-theme-styling-update") {
       let newTheme = JSON.parse(data);
-      if (!newTheme) {
-        // A lightweight theme has been unapplied, so just re-read prefs.
-        this._updateStyleSheetFromPrefs();
+      console.log("LW THEME UPDATE", newTheme);
+      if (!newTheme || newTheme.id != "11111") {
+        this._toggleStyleSheet(false);
+        // Services.prefs.setBoolPref(this._prefName, false);
+        // browser.devedition.theme.optedOut = true
       } else {
-        // A lightweight theme has been applied, but the pref may not be
-        // set yet if this happened from customize menu or addons page.
-        this._toggleStyleSheet(false);
+        this._toggleStyleSheet(true);
+        // Services.prefs.setBoolPref(this._prefName, true);
+        // browser.devedition.theme.optedOut = false
       }
+      // if (!newTheme) {
+      //   // A lightweight theme has been unapplied, so just re-read prefs.
+      //   this._updateStyleSheetFromPrefs();
+      // } else {
+      //   // A lightweight theme has been applied, but the pref may not be
+      //   // set yet if this happened from customize menu or addons page.
+      //   this._toggleStyleSheet(false);
+      // }
     }
 
     if (topic == "nsPref:changed") {
       if (data == this._devtoolsThemePrefName) {
         this._updateDevtoolsThemeAttribute();
       } else {
         this._updateStyleSheetFromPrefs();
       }
     }
   },
 
   _inferBrightness: function() {
     ToolbarIconColor.inferFromText();
-    // Get an inverted full screen button if the dark theme is applied.
-    if (this.styleSheet &&
-        document.documentElement.getAttribute("devtoolstheme") == "dark") {
-      document.documentElement.setAttribute("brighttitlebarforeground", "true");
-    } else {
-      document.documentElement.removeAttribute("brighttitlebarforeground");
-    }
+    // // Get an inverted full screen button if the dark theme is applied.
+    // if (this.styleSheet &&
+    //     document.documentElement.getAttribute("devtoolstheme") == "dark") {
+    //   document.documentElement.setAttribute("brighttitlebarforeground", "true");
+    // } else {
+    //   document.documentElement.removeAttribute("brighttitlebarforeground");
+    // }
   },
 
   _updateDevtoolsThemeAttribute: function() {
     // Set an attribute on root element to make it possible
     // to change colors based on the selected devtools theme.
     let devtoolsTheme = Services.prefs.getCharPref(this._devtoolsThemePrefName);
     if (devtoolsTheme != "dark") {
       devtoolsTheme = "light";
     }
     document.documentElement.setAttribute("devtoolstheme", devtoolsTheme);
     this._inferBrightness();
     this._updateStyleSheetFromPrefs();
   },
 
   _updateStyleSheetFromPrefs: function() {
+    return;
     let lightweightThemeSelected = false;
     try {
       lightweightThemeSelected = Services.prefs.getBoolPref(this._lwThemePrefName);
     } catch(e) {}
 
     let defaultThemeSelected = false;
     try {
        defaultThemeSelected = Services.prefs.getCharPref(this._themePrefName) == "classic/1.0";
diff --git a/toolkit/mozapps/extensions/LightweightThemeManager.jsm b/toolkit/mozapps/extensions/LightweightThemeManager.jsm
--- a/toolkit/mozapps/extensions/LightweightThemeManager.jsm
+++ b/toolkit/mozapps/extensions/LightweightThemeManager.jsm
@@ -68,22 +68,46 @@ this.__defineSetter__("_maxUsedThemes", 
 // permissions and pendingOperations
 var _themeIDBeingEnabled = null;
 var _themeIDBeingDisabled = null;
 
 this.LightweightThemeManager = {
   get name() "LightweightThemeManager",
 
   get usedThemes () {
+    let allThemes = [];
     try {
-      return JSON.parse(_prefs.getComplexValue("usedThemes",
+      allThemes = JSON.parse(_prefs.getComplexValue("usedThemes",
                                                Ci.nsISupportsString).data);
-    } catch (e) {
-      return [];
+    } catch (e) {}
+
+let {console} = Components.utils.import("resource://gre/modules/devtools/Console.jsm", {});
+    let devEditionInd = allThemes.findIndex(t => t.id == "11111");
+    console.log("foo", devEditionInd, allThemes.length);
+    if (devEditionInd != -1) {
+      allThemes.splice(devEditionInd, 1);
     }
+    console.log("bar", devEditionInd, allThemes.length);
+    allThemes.unshift(
+    {
+        "id":"11111",
+        "name":"Developer Edition",
+        "headerURL":"chrome://browser/skin/Toolbar-inverted.png",
+        "footerURL":"chrome://browser/skin/Toolbar-inverted.png",
+        "textcolor":"#ffffff",
+        "accentcolor":"red",
+        "iconURL":"chrome://browser/skin/Toolbar-inverted.png",
+        "previewURL":"chrome://browser/skin/Toolbar-inverted.png",
+        "author":"rallxy",
+        "description":"Developer Edition",
+        "updateURL":"https://versioncheck.addons.mozilla.org/en-US/themes/update-check/64049",
+        "version":"1.0"
+    });
+
+    return allThemes;
   },
 
   get currentTheme () {
     try {
       if (_prefs.getBoolPref("isThemeSelected"))
         var data = this.usedThemes[0];
     } catch (e) {}
 
