# HG changeset patch
# User Panos Astithas <past@mozilla.com>
# Date 1383246580 -7200
#      Thu Oct 31 21:09:40 2013 +0200
# Node ID 56b9fc3905ee9619dbe6628571d1e37f1c224455
# Parent  cd49e232a1629d12e1feb507ae55c5b534a0fe22
Make targets oblivious to inspectors (bug 932880); r=bgrins

diff --git a/browser/devtools/framework/target.js b/browser/devtools/framework/target.js
--- a/browser/devtools/framework/target.js
+++ b/browser/devtools/framework/target.js
@@ -10,18 +10,16 @@ var promise = require("sdk/core/promise"
 var EventEmitter = require("devtools/shared/event-emitter");
 
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 XPCOMUtils.defineLazyModuleGetter(this, "DebuggerServer",
   "resource://gre/modules/devtools/dbg-server.jsm");
 XPCOMUtils.defineLazyModuleGetter(this, "DebuggerClient",
   "resource://gre/modules/devtools/dbg-client.jsm");
 
-loader.lazyGetter(this, "InspectorFront", () => require("devtools/server/actors/inspector").InspectorFront);
-
 const targets = new WeakMap();
 const promiseTargets = new WeakMap();
 
 /**
  * Functions for creating Targets
  */
 exports.TargetFactory = {
   /**
@@ -248,27 +246,16 @@ TabTarget.prototype = {
   get isLocalTab() {
     return !!this._tab;
   },
 
   get isThreadPaused() {
     return !!this._isThreadPaused;
   },
 
-  get inspector() {
-    if (!this.form) {
-      throw new Error("Target.inspector requires an initialized remote actor.");
-    }
-    if (this._inspector) {
-      return this._inspector;
-    }
-    this._inspector = InspectorFront(this.client, this.form);
-    return this._inspector;
-  },
-
   /**
    * Adds remote protocol capabilities to the target, so that it can be used
    * for tools that support the Remote Debugging Protocol even for local
    * connections.
    */
   makeRemote: function TabTarget_makeRemote() {
     if (this._remote) {
       return this._remote.promise;
@@ -436,21 +423,16 @@ TabTarget.prototype = {
       return this._destroyer.promise;
     }
 
     this._destroyer = promise.defer();
 
     // Before taking any action, notify listeners that destruction is imminent.
     this.emit("close");
 
-    if (this._inspector) {
-      this._inspector.destroy();
-      this._inspector = null;
-    }
-
     // First of all, do cleanup tasks that pertain to both remoted and
     // non-remoted targets.
     this.off("thread-resumed", this._handleThreadState);
     this.off("thread-paused", this._handleThreadState);
 
     if (this._tab) {
       this._teardownListeners();
     }
diff --git a/browser/devtools/inspector/inspector-panel.js b/browser/devtools/inspector/inspector-panel.js
--- a/browser/devtools/inspector/inspector-panel.js
+++ b/browser/devtools/inspector/inspector-panel.js
@@ -13,16 +13,17 @@ let EventEmitter = require("devtools/sha
 let {CssLogic} = require("devtools/styleinspector/css-logic");
 
 loader.lazyGetter(this, "MarkupView", () => require("devtools/markupview/markup-view").MarkupView);
 loader.lazyGetter(this, "Selection", () => require("devtools/inspector/selection").Selection);
 loader.lazyGetter(this, "HTMLBreadcrumbs", () => require("devtools/inspector/breadcrumbs").HTMLBreadcrumbs);
 loader.lazyGetter(this, "Highlighter", () => require("devtools/inspector/highlighter").Highlighter);
 loader.lazyGetter(this, "ToolSidebar", () => require("devtools/framework/sidebar").ToolSidebar);
 loader.lazyGetter(this, "SelectorSearch", () => require("devtools/inspector/selector-search").SelectorSearch);
+loader.lazyGetter(this, "InspectorFront", () => require("devtools/server/actors/inspector").InspectorFront);
 
 const LAYOUT_CHANGE_TIMER = 250;
 
 /**
  * Represents an open instance of the Inspector for a tab.
  * The inspector controls the highlighter, the breadcrumbs,
  * the markup view, and the sidebar (computed view, rule view
  * and layout view).
@@ -55,16 +56,17 @@ const LAYOUT_CHANGE_TIMER = 250;
  *      Fired when the rule view updates to a new node
  */
 function InspectorPanel(iframeWindow, toolbox) {
   this._toolbox = toolbox;
   this._target = toolbox._target;
   this.panelDoc = iframeWindow.document;
   this.panelWin = iframeWindow;
   this.panelWin.inspector = this;
+  this._inspector = null;
 
   this._onBeforeNavigate = this._onBeforeNavigate.bind(this);
   this._target.on("will-navigate", this._onBeforeNavigate);
 
   EventEmitter.decorate(this);
 }
 
 exports.InspectorPanel = InspectorPanel;
@@ -78,16 +80,26 @@ InspectorPanel.prototype = {
       return this._getWalker();
     }).then(() => {
       return this._getDefaultNodeForSelection();
     }).then(defaultSelection => {
       return this._deferredOpen(defaultSelection);
     }).then(null, console.error);
   },
 
+  get inspector() {
+    if (!this._target.form) {
+      throw new Error("Target.inspector requires an initialized remote actor.");
+    }
+    if (!this._inspector) {
+      this._inspector = InspectorFront(this._target.client, this._target.form);
+    }
+    return this._inspector;
+  },
+
   _deferredOpen: function(defaultSelection) {
     let deferred = promise.defer();
 
     this.outerHTMLEditable = this._target.client.traits.editOuterHTML;
 
     this.onNewRoot = this.onNewRoot.bind(this);
     this.walker.on("new-root", this.onNewRoot);
 
@@ -179,20 +191,19 @@ InspectorPanel.prototype = {
   _onBeforeNavigate: function() {
     this._defaultNode = null;
     this.selection.setNodeFront(null);
     this._destroyMarkup();
     this.isDirty = false;
   },
 
   _getWalker: function() {
-    let inspector = this.target.inspector;
-    return inspector.getWalker().then(walker => {
+    return this.inspector.getWalker().then(walker => {
       this.walker = walker;
-      return inspector.getPageStyle();
+      return this.inspector.getPageStyle();
     }).then(pageStyle => {
       this.pageStyle = pageStyle;
     });
   },
 
   /**
    * Return a promise that will resolve to the default node for selection.
    */
@@ -495,17 +506,22 @@ InspectorPanel.prototype = {
       this.highlighter.off("unlocked", this.onLockStateChanged);
       this.highlighter.destroy();
     }
 
     delete this.onLockStateChanged;
 
     if (this.walker) {
       this.walker.off("new-root", this.onNewRoot);
-      this._destroyPromise = this.walker.release().then(null, console.error);
+      this._destroyPromise = this.walker.release()
+        .then(() => this._inspector.destroy())
+        .then(() => {
+          this._inspector = null;
+        }, console.error);
+
       delete this.walker;
       delete this.pageStyle;
     } else {
       this._destroyPromise = promise.resolve(null);
     }
 
     this.cancelUpdate();
     this.cancelLayoutChange();
diff --git a/browser/devtools/inspector/test/browser_inspector_basic_highlighter.js b/browser/devtools/inspector/test/browser_inspector_basic_highlighter.js
--- a/browser/devtools/inspector/test/browser_inspector_basic_highlighter.js
+++ b/browser/devtools/inspector/test/browser_inspector_basic_highlighter.js
@@ -72,17 +72,17 @@ function test() {
     return deferred.promise;
   }
 
   function destroyInspector() {
     return inspector.destroy();
   }
 
   function verifyNoNodeSelected() {
-    ok(doc.querySelectorAll(":-moz-devtools-highlighted").length === 0, "no node selected");
+    is(doc.querySelectorAll(":-moz-devtools-highlighted").length, 0, "no node selected");
     return promise.resolve();
   }
 
   function finishUp() {
     let h = require("devtools/inspector/highlighter");
     h._forceBasic.value = false;
     inspector = doc = null;
     gBrowser.removeCurrentTab();
