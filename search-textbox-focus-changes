# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  d99524abcad4cbe8f8557c4e4a944da845eac70e

diff --git a/toolkit/content/widgets/search-textbox.js b/toolkit/content/widgets/search-textbox.js
--- a/toolkit/content/widgets/search-textbox.js
+++ b/toolkit/content/widgets/search-textbox.js
@@ -8,16 +8,18 @@
 // leaking to window scope.
 {
 const HTML_NS = "http://www.w3.org/1999/xhtml";
 
 class MozSearchTextbox extends MozXULElement {
   constructor() {
     super();
 
+    this.inputField = document.createElementNS(HTML_NS, "input");
+
     const METHODS = ["focus", "blur", "select", "setUserInput", "setSelectionRange"];
     for (const method of METHODS) {
       this[method] = (...args) => this.inputField[method](...args);
     }
 
     const READ_WRITE_PROPERTIES = ["defaultValue", "placeholder", "readOnly",
       "size", "selectionStart", "selectionEnd"];
     for (const property of READ_WRITE_PROPERTIES) {
@@ -73,17 +75,17 @@ class MozSearchTextbox extends MozXULEle
     if (this.delayConnectedCallback()) {
       return;
     }
     this.textContent = "";
 
     const textboxSign = document.createXULElement("image");
     textboxSign.className = "textbox-search-sign";
 
-    const input = this.inputField = document.createElementNS(HTML_NS, "input");
+    const input = this.inputField;
     input.className = "textbox-input";
     input.setAttribute("mozactionhint", "search");
     input.addEventListener("focus", () => this.setAttribute("focused", "true"));
     input.addEventListener("blur", () => this.removeAttribute("focused"));
 
     const searchBtn = this._searchButtonIcon = document.createXULElement("image");
     searchBtn.className = "textbox-search-icon";
     searchBtn.addEventListener("click", (e) => this._iconClick(e));
diff --git a/toolkit/modules/SelectParentHelper.jsm b/toolkit/modules/SelectParentHelper.jsm
--- a/toolkit/modules/SelectParentHelper.jsm
+++ b/toolkit/modules/SelectParentHelper.jsm
@@ -436,18 +436,18 @@ function populateChildren(menulist, opti
   if (Services.prefs.getBoolPref("dom.forms.selectSearch") && addSearch
       && element.childElementCount > SEARCH_MINIMUM_ELEMENTS) {
     // Add a search text field as the first element of the dropdown
     let searchbox = element.ownerDocument.createXULElement("textbox", {
       is: "search-textbox",
     });
     searchbox.className = "contentSelectDropdown-searchbox";
     searchbox.addEventListener("input", onSearchInput);
-    searchbox.addEventListener("focus", onSearchFocus, true);
-    searchbox.addEventListener("blur", onSearchBlur, true);
+    searchbox.inputField.addEventListener("focus", onSearchFocus);
+    searchbox.inputField.addEventListener("blur", onSearchBlur);
     searchbox.addEventListener("command", onSearchInput);
 
     // Handle special keys for exiting search
     searchbox.addEventListener("keydown", function(event) {
       if (event.defaultPrevented) {
         return;
       }
       switch (event.key) {
@@ -539,19 +539,19 @@ function onSearchInput() {
         prevCaption.hidden = allHidden;
       }
     }
   }
 }
 
 function onSearchFocus() {
   let searchObj = this;
-  let menupopup = searchObj.parentElement;
+  let menupopup = searchObj.closest("menupopup");
   menupopup.parentElement.activeChild = null;
   menupopup.setAttribute("ignorekeys", "true");
   currentBrowser.messageManager.sendAsyncMessage("Forms:SearchFocused", {});
 }
 
 function onSearchBlur() {
   let searchObj = this;
-  let menupopup = searchObj.parentElement;
+  let menupopup = searchObj.closest("menupopup");
   menupopup.setAttribute("ignorekeys", "false");
 }
