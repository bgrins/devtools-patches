# HG changeset patch
# User Greg Tatum <tatum.creative@gmail.com>

Bug 1312236 - Fix memory tool for react update; r=linclark

MozReview-Commit-ID: 97VoPl6tXUy

diff --git a/devtools/client/memory/test/browser/browser_memory_displays_01.js b/devtools/client/memory/test/browser/browser_memory_displays_01.js
index b5f9e34..28bc2a5 100644
--- a/devtools/client/memory/test/browser/browser_memory_displays_01.js
+++ b/devtools/client/memory/test/browser/browser_memory_displays_01.js
@@ -22,20 +22,21 @@ this.test = makeMemoryTest(TEST_URL, function* ({ tab, panel }) {
 
   yield takeSnapshot(panel.panelWin);
 
   yield waitUntilState(gStore, state =>
     state.snapshots[0].census &&
     state.snapshots[0].census.state === censusState.SAVED);
 
   info("Check coarse type heap view");
+
   ["Function", "js::Shape", "Object", "strings"].forEach(findNameCell);
 
   yield setCensusDisplay(panel.panelWin, censusDisplays.allocationStack);
   info("Check allocation stack heap view");
   [L10N.getStr("tree-item.nostack")].forEach(findNameCell);
 
   function findNameCell(name) {
-    const el = $$(".tree .heap-tree-item-name span")
+    const el = $$(".tree .heap-tree-item-name")
       .find(e => e.textContent === name);
     ok(el, `Found heap tree item cell for ${name}.`);
   }
 });
diff --git a/devtools/client/memory/test/chrome/head.js b/devtools/client/memory/test/chrome/head.js
index 4ca5a7a..39a6e58 100644
--- a/devtools/client/memory/test/chrome/head.js
+++ b/devtools/client/memory/test/chrome/head.js
@@ -313,23 +313,11 @@ function renderComponent(element, container) {
     let component = ReactDOM.render(element, container,
       onNextAnimationFrame(() => {
         dumpn("Rendered = " + container.innerHTML);
         resolve(component);
       }));
   });
 }
 
-function setState(component, newState) {
-  return new Promise(resolve => {
-    component.setState(newState, onNextAnimationFrame(resolve));
-  });
-}
-
-function setProps(component, newProps) {
-  return new Promise(resolve => {
-    component.setProps(newProps, onNextAnimationFrame(resolve));
-  });
-}
-
 function dumpn(msg) {
   dump(`MEMORY-TEST: ${msg}\n`);
 }
diff --git a/devtools/client/memory/test/chrome/test_DominatorTree_03.html b/devtools/client/memory/test/chrome/test_DominatorTree_03.html
index e9656da..22c54dc 100644
--- a/devtools/client/memory/test/chrome/test_DominatorTree_03.html
+++ b/devtools/client/memory/test/chrome/test_DominatorTree_03.html
@@ -43,24 +43,26 @@ Test that expanded DominatorTreeItems are correctly rendered and updated
                 })), container);
             ok(true, "Dominator tree rendered");
 
             is(container.querySelectorAll(".tree-node").length, 2,
                 "Should display two rows");
             is(container.querySelectorAll(".arrow.open").length, 1,
                 "Should display one expanded arrow");
 
-            yield setProps(component, immutableUpdate(
-              TEST_DOMINATOR_TREE_PROPS,
-              {
-                dominatorTree: immutableUpdate(
-                  TEST_DOMINATOR_TREE_PROPS.dominatorTree,
-                  { expanded: new Set(), root }
-                )
-              }));
+            yield renderComponent(
+              DominatorTreeComponent(immutableUpdate(
+                TEST_DOMINATOR_TREE_PROPS,
+                {
+                  dominatorTree: immutableUpdate(
+                    TEST_DOMINATOR_TREE_PROPS.dominatorTree,
+                    { expanded: new Set(), root }
+                  )
+                })), container);
+
             ok(true, "Dominator tree props updated to collapse all nodes");
 
             is(container.querySelectorAll(".tree-node").length, 1,
                 "Should display only one row");
             is(container.querySelectorAll(".arrow.open").length, 0,
                 "Should display no expanded arrow");
 
           } catch(e) {

