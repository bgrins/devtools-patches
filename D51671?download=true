diff --git a/devtools/client/responsive/components/App.js b/devtools/client/responsive/components/App.js
--- a/devtools/client/responsive/components/App.js
+++ b/devtools/client/responsive/components/App.js
@@ -59,6 +59,7 @@
     return {
       devices: PropTypes.shape(Types.devices).isRequired,
       dispatch: PropTypes.func.isRequired,
+      leftAlignmentEnabled: PropTypes.bool.isRequired,
       networkThrottling: PropTypes.shape(Types.networkThrottling).isRequired,
       screenshot: PropTypes.shape(Types.screenshot).isRequired,
       viewports: PropTypes.arrayOf(PropTypes.shape(Types.viewport)).isRequired,
@@ -341,6 +342,16 @@
 
   onToggleLeftAlignment() {
     this.props.dispatch(toggleLeftAlignment());
+
+    if (Services.prefs.getBoolPref("devtools.responsive.browserUI.enabled")) {
+      window.postMessage(
+        {
+          type: "toggle-left-alignment",
+          leftAlignmentEnabled: this.props.leftAlignmentEnabled,
+        },
+        "*"
+      );
+    }
   }
 
   onToggleReloadOnTouchSimulation() {
@@ -462,4 +473,11 @@
   }
 }
 
-module.exports = connect(state => state)(App);
+const mapStateToProps = state => {
+  return {
+    ...state,
+    leftAlignmentEnabled: state.ui.leftAlignmentEnabled,
+  };
+};
+
+module.exports = connect(mapStateToProps)(App);
diff --git a/devtools/client/responsive/responsive-browser.css b/devtools/client/responsive/responsive-browser.css
--- a/devtools/client/responsive/responsive-browser.css
+++ b/devtools/client/responsive/responsive-browser.css
@@ -49,8 +49,23 @@
   width: var(--rdm-width);
 }
 
+.browserContainer.responsive-mode > .browserStack > *:not(.rdm-toolbar) {
+  margin-top: 65px;
+}
+
+.browserContainer.responsive-mode > .browserStack.left-aligned > * {
+  justify-self: start;
+}
+
+.browserContainer.responsive-mode > .browserStack.left-aligned > *:-moz-locale-dir(rtl) {
+  justify-self: end;
+}
+
+.browserContainer.responsive-mode > .browserStack.left-aligned > *:not(.rdm-toolbar) {
+  margin-left: 15px;
+}
+
 .browserContainer.responsive-mode > .browserStack > browser {
   border: 1px solid var(--devtools-splitter-color);
   box-shadow: var(--rdm-browser-box-shadow);
-  margin-top: 65px;
 }
diff --git a/devtools/client/responsive/ui.js b/devtools/client/responsive/ui.js
--- a/devtools/client/responsive/ui.js
+++ b/devtools/client/responsive/ui.js
@@ -466,6 +466,9 @@
       case "screenshot":
         this.onScreenshot();
         break;
+      case "toggle-left-alignment":
+        this.onToggleLeftAlignment(event);
+        break;
       case "update-device-modal":
         this.onUpdateDeviceModal(event);
     }
@@ -586,6 +589,10 @@
     }
   }
 
+  onToggleLeftAlignment(event) {
+    this.updateUIAlignment(event.data.leftAlignmentEnabled);
+  }
+
   onUpdateDeviceModal(event) {
     this.browserStackEl.classList.toggle(
       "device-modal-opened",
@@ -597,6 +604,16 @@
    * Restores the previous state of RDM.
    */
   async restoreState() {
+    // Restore UI alignment.
+    if (this.isBrowserUIEnabled) {
+      const leftAlignmentEnabled = Services.prefs.getBoolPref(
+        "devtools.responsive.leftAlignViewport.enabled",
+        false
+      );
+
+      this.updateUIAlignment(leftAlignmentEnabled);
+    }
+
     const deviceState = await asyncStorage.getItem(
       "devtools.responsive.deviceState"
     );
@@ -773,6 +790,16 @@
     }
   }
 
+  /**
+   * Sets whether or not the RDM UI should be left-aligned.
+   *
+   * @param {Boolean} leftAlignmentEnabled
+   *        Whether or not the UI is left-aligned.
+   */
+  updateUIAlignment(leftAlignmentEnabled) {
+    this.browserStackEl.classList.toggle("left-aligned", leftAlignmentEnabled);
+  }
+
   /**
    * Sets the browser element to be the given width and height.
    *

