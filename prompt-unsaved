# HG changeset patch
# Parent 3391c2e2a00c0408e62f841cbf7c2dcfd40c6d09
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 1039484 - Prevent closing WebIDE or switch to a new project if any file hasn't been saved;r=jryans

diff --git a/browser/devtools/projecteditor/lib/editors.js b/browser/devtools/projecteditor/lib/editors.js
--- a/browser/devtools/projecteditor/lib/editors.js
+++ b/browser/devtools/projecteditor/lib/editors.js
@@ -150,17 +150,17 @@ var TextEditor = Class({
 
     return extraKeys;
   },
 
   isClean: function() {
     if (!this.editor.isAppended()) {
       return true;
     }
-    return this.editor.isClean();
+    return this.editor.getText() === this._savedResourceContents;
   },
 
   initialize: function(document, mode=Editor.modes.text) {
     ItchEditor.prototype.initialize.apply(this, arguments);
     this.label = mode.name;
     this.editor = new Editor({
       mode: mode,
       lineNumbers: true,
@@ -207,16 +207,17 @@ var TextEditor = Class({
     // They can run  in parallel.
     return promise.all([
       resource.load(),
       this.appended
     ]).then(([resourceContents])=> {
       if (!this.editor) {
         return;
       }
+      this._savedResourceContents = resourceContents;
       this.editor.setText(resourceContents);
       this.editor.setClean();
       this.emit("load");
     }, console.error);
   },
 
   /**
    * Save the resource based on the current state of the editor
diff --git a/browser/devtools/projecteditor/lib/plugins/dirty/dirty.js b/browser/devtools/projecteditor/lib/plugins/dirty/dirty.js
--- a/browser/devtools/projecteditor/lib/plugins/dirty/dirty.js
+++ b/browser/devtools/projecteditor/lib/plugins/dirty/dirty.js
@@ -26,17 +26,22 @@ var DirtyPlugin = Class({
     if (priv.isClean !== clean) {
       let resource = editor.shell.resource;
       emit(resource, "label-change", resource);
       priv.isClean = clean;
     }
   },
 
   onAnnotate: function(resource, editor, elt) {
-    if (editor && editor.editor && !editor.editor.isClean()) {
+    // Only run on a TextEditor
+    if (!editor || !editor.editor) {
+      return;
+    }
+
+    if (!editor.isClean()) {
       elt.textContent = '*' + resource.displayName;
       return true;
     }
   }
 });
 exports.DirtyPlugin = DirtyPlugin;
 
 registerPlugin(DirtyPlugin);
diff --git a/browser/devtools/projecteditor/lib/projecteditor.js b/browser/devtools/projecteditor/lib/projecteditor.js
--- a/browser/devtools/projecteditor/lib/projecteditor.js
+++ b/browser/devtools/projecteditor/lib/projecteditor.js
@@ -15,16 +15,18 @@ const { EventTarget } = require("sdk/eve
 const { on, forget } = require("projecteditor/helpers/event");
 const { emit } = require("sdk/event/core");
 const { merge } = require("sdk/util/object");
 const promise = require("projecteditor/helpers/promise");
 const { ViewHelpers } = Cu.import("resource:///modules/devtools/ViewHelpers.jsm", {});
 const { DOMHelpers } = Cu.import("resource:///modules/devtools/DOMHelpers.jsm");
 const { Services } = Cu.import("resource://gre/modules/Services.jsm", {});
 const ITCHPAD_URL = "chrome://browser/content/devtools/projecteditor.xul";
+const { confirm } = require("projecteditor/helpers/prompts");
+const { getLocalizedString } = require("projecteditor/helpers/l10n");
 
 // Enabled Plugins
 require("projecteditor/plugins/dirty/dirty");
 require("projecteditor/plugins/delete/delete");
 require("projecteditor/plugins/new/new");
 require("projecteditor/plugins/save/save");
 require("projecteditor/plugins/image-view/plugin");
 require("projecteditor/plugins/app-manager/plugin");
@@ -723,17 +725,41 @@ var ProjectEditor = Class({
     this._menuEnabled = val;
     if (this._loaded) {
       this._updateMenuItems();
     }
   },
 
   get menuEnabled() {
     return this._menuEnabled;
+  },
+
+  /**
+   * Check with the user about navigating away with unsaved changes.
+   *
+   * @returns Boolean
+   *          True if there are no unsaved changes
+   *          Otherwise, ask the user to confirm and return the outcome.
+   */
+  confirmUnsaved: function() {
+    let anyUnsaved = this.project.allResources().some(resource=> {
+      let editor = this.editorFor(resource);
+      return editor && !editor.isClean();
+    });
+
+    if (anyUnsaved) {
+      return confirm(
+        getLocalizedString("projecteditor.confirmUnsavedTitle"),
+        getLocalizedString("projecteditor.confirmUnsavedLabel")
+      );
+    }
+
+    return true;
   }
+
 });
 
 
 /**
  * Returns a controller object that can be used for
  * editor-specific commands such as find, jump to line,
  * copy/paste, etc.
  */
diff --git a/browser/devtools/projecteditor/test/browser.ini b/browser/devtools/projecteditor/test/browser.ini
--- a/browser/devtools/projecteditor/test/browser.ini
+++ b/browser/devtools/projecteditor/test/browser.ini
@@ -2,16 +2,17 @@
 subsuite = devtools
 support-files =
   head.js
   helper_homepage.html
   helper_edits.js
 
 [browser_projecteditor_app_options.js]
 skip-if = buildapp == 'mulet'
+[browser_projecteditor_confirm_unsaved.js]
 [browser_projecteditor_contextmenu_01.js]
 [browser_projecteditor_contextmenu_02.js]
 [browser_projecteditor_delete_file.js]
 skip-if = buildapp == 'mulet'
 [browser_projecteditor_editing_01.js]
 skip-if = buildapp == 'mulet'
 [browser_projecteditor_editors_image.js]
 [browser_projecteditor_external_change.js]
diff --git a/browser/devtools/webide/content/webide.js b/browser/devtools/webide/content/webide.js
--- a/browser/devtools/webide/content/webide.js
+++ b/browser/devtools/webide/content/webide.js
@@ -95,16 +95,23 @@ let UI = {
 
   uninit: function() {
     window.removeEventListener("focus", this.onfocus, true);
     AppManager.off("app-manager-update", this.appManagerUpdate);
     AppManager.uninit();
     window.removeEventListener("message", this.onMessage);
   },
 
+  canWindowClose: function() {
+    if (this.projecteditor) {
+      return this.projecteditor.confirmUnsaved();
+    }
+    return true;
+  },
+
   onfocus: function() {
     // Because we can't track the activity in the folder project,
     // we need to validate the project regularly. Let's assume that
     // if a modification happened, it happened when the window was
     // not focused.
     if (AppManager.selectedProject &&
         AppManager.selectedProject.type != "mainProcess" &&
         AppManager.selectedProject.type != "runtimeApp") {
@@ -660,17 +667,19 @@ let UI = {
     splitter.setAttribute("hidden", "true");
     document.querySelector("#action-button-debug").removeAttribute("active");
   },
 }
 
 
 let Cmds = {
   quit: function() {
-    window.close();
+    if (UI.canWindowClose()) {
+      window.close();
+    }
   },
 
   /**
    * testOptions: {       chrome mochitest support
    *   folder: nsIFile,   where to store the app
    *   index: Number,     index of the app in the template list
    *   name: String       name of the app
    * }
diff --git a/browser/devtools/webide/content/webide.xul b/browser/devtools/webide/content/webide.xul
--- a/browser/devtools/webide/content/webide.xul
+++ b/browser/devtools/webide/content/webide.xul
@@ -9,17 +9,17 @@
   %webideDTD;
 ]>
 
 <?xul-overlay href="chrome://global/content/editMenuOverlay.xul"?>
 
 <?xml-stylesheet href="chrome://global/skin/global.css"?>
 <?xml-stylesheet href="chrome://webide/skin/webide.css"?>
 
-<window id="webide"
+<window id="webide" onclose="return UI.canWindowClose();"
         xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
         xmlns:html="http://www.w3.org/1999/xhtml"
         title="&windowTitle;"
         windowtype="devtools:webide"
         macanimationtype="document"
         fullscreenbutton="true"
         screenX="4" screenY="4"
         width="640" height="480"
diff --git a/browser/locales/en-US/chrome/browser/devtools/projecteditor.properties b/browser/locales/en-US/chrome/browser/devtools/projecteditor.properties
--- a/browser/locales/en-US/chrome/browser/devtools/projecteditor.properties
+++ b/browser/locales/en-US/chrome/browser/devtools/projecteditor.properties
@@ -9,16 +9,27 @@
 # English, or another language commonly spoken among web developers.
 # You want to make that choice consistent across the developer tools.
 # A good criteria is the language in which you'd find the best
 # documentation on web development on the web.
 
 # LOCALIZATION NOTE (projecteditor.deleteLabel):
 # This string is displayed as a context menu item for allowing the selected
 # file / folder to be deleted.
+projecteditor.confirmUnsavedLabel=You have unsaved changes that will be lost if you exit. Are you sure you want to continue?
+
+# LOCALIZATION NOTE (projecteditor.confirmUnsavedTitle):
+# This string is displayed as as the title of the confirm prompt that checks
+# to make sure if the project editor can be closed without saving changes
+projecteditor.confirmUnsavedTitle=Unsaved Changes
+
+
+# LOCALIZATION NOTE (projecteditor.deleteLabel):
+# This string is displayed as a context menu item for allowing the selected
+# file / folder to be deleted.
 projecteditor.deleteLabel=Delete
 
 # LOCALIZATION NOTE (projecteditor.deletePromptTitle):
 # This string is displayed as as the title of the confirm prompt that checks
 # to make sure if a file or folder should be removed.
 projecteditor.deletePromptTitle=Delete
 
 # LOCALIZATION NOTE (projecteditor.deleteFolderPromptMessage):
