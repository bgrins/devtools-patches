# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  39dba5141dd90c70a861299459d418d230148d9f
Bug 1501065 - Replace more hardcoded browser.xul references in tests;r=Gijs

diff --git a/browser/components/extensions/test/browser/browser_ext_browserAction_pageAction_icon_permissions.js b/browser/components/extensions/test/browser/browser_ext_browserAction_pageAction_icon_permissions.js
--- a/browser/components/extensions/test/browser/browser_ext_browserAction_pageAction_icon_permissions.js
+++ b/browser/components/extensions/test/browser/browser_ext_browserAction_pageAction_icon_permissions.js
@@ -133,17 +133,17 @@ add_task(async function testSecureURLsDe
       "browser_action": {},
       "page_action": {},
     },
 
     background: function() {
       browser.tabs.query({active: true, currentWindow: true}, tabs => {
         let tabId = tabs[0].id;
 
-        let urls = ["chrome://browser/content/browser.xul",
+        let urls = [AppConstants.BROWSER_CHROME_URL,
                     "javascript:true"];
 
         let promises = [];
         for (let url of urls) {
           for (let api of ["pageAction", "browserAction"]) {
             promises.push(
               browser.test.assertRejects(
                 browser[api].setIcon({tabId, path: url}),
@@ -164,17 +164,17 @@ add_task(async function testSecureURLsDe
   await extension.awaitFinish("setIcon security tests");
   await extension.unload();
 });
 
 
 add_task(async function testSecureManifestURLsDenied() {
   // Test URLs included in the manifest.
 
-  let urls = ["chrome://browser/content/browser.xul",
+  let urls = [AppConstants.BROWSER_CHROME_URL,
               "javascript:true"];
 
   let apis = ["browser_action", "page_action"];
 
   for (let url of urls) {
     for (let api of apis) {
       info(`TEST ${api} icon url: ${url}`);
 
diff --git a/browser/components/extensions/test/browser/browser_ext_pageAction_popup.js b/browser/components/extensions/test/browser/browser_ext_pageAction_popup.js
--- a/browser/components/extensions/test/browser/browser_ext_pageAction_popup.js
+++ b/browser/components/extensions/test/browser/browser_ext_pageAction_popup.js
@@ -207,17 +207,17 @@ add_task(async function testPageActionPo
   let panel = document.getElementById(panelId);
   is(panel, null, "pageAction panel removed from document");
 
   BrowserTestUtils.removeTab(tab);
 });
 
 
 add_task(async function testPageActionSecurity() {
-  const URL = "chrome://browser/content/browser.xul";
+  const URL = AppConstants.BROWSER_CHROME_URL;
 
   let apis = ["browser_action", "page_action"];
 
   for (let api of apis) {
     info(`TEST ${api} icon url: ${URL}`);
 
     let messages = [/Access to restricted URI denied/];
 
diff --git a/testing/talos/talos/pageloader/api.js b/testing/talos/talos/pageloader/api.js
--- a/testing/talos/talos/pageloader/api.js
+++ b/testing/talos/talos/pageloader/api.js
@@ -32,16 +32,17 @@
  * use your version of this file under the terms of the MPL, indicate your
  * decision by deleting the provisions above and replace them with the notice
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
+ChromeUtils.import("resource://gre/modules/AppConstants.jsm");
 ChromeUtils.import("resource://gre/modules/Services.jsm");
 ChromeUtils.import("resource://gre/modules/XPCOMUtils.jsm");
 ChromeUtils.import("resource://gre/modules/Timer.jsm");
 
 XPCOMUtils.defineLazyServiceGetter(this, "aomStartup",
                                    "@mozilla.org/addons/addon-manager-startup;1",
                                    "amIAddonManagerStartup");
 
@@ -51,21 +52,20 @@ XPCOMUtils.defineLazyServiceGetter(this,
 
 async function talosStart() {
   // Tests are driven from pageloader.xul.  We need to be careful to open
   // pageloader.xul before dismissing the default browser window or we
   // may inadvertently cause the browser to exit before the pageloader.xul
   // window is opened.  Start by finding or waiting for the default window.
   let defaultWin = Services.wm.getMostRecentWindow("navigator:browser");
   if (!defaultWin) {
-    const BROWSER_XUL = "chrome://browser/content/browser.xul";
     defaultWin = await new Promise(resolve => {
       const listener = {
         onOpenWindow(win) {
-          if (win.docShell.domWindow.location.href == BROWSER_XUL) {
+          if (win.docShell.domWindow.location.href == AppConstants.BROWSER_CHROME_URL) {
             Services.wm.removeListener(listener);
             resolve(win);
           }
         },
       };
       Services.wm.addListener(listener);
     });
   }
