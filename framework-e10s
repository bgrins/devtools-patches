# HG changeset patch
# Parent 3f4935675a87d764f5dc12dc69f201d5855f9f25
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 1030318 - Enable devtools/framework tests with e10s

diff --git a/browser/devtools/framework/scriptutils.js b/browser/devtools/framework/scriptutils.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/framework/scriptutils.js
@@ -0,0 +1,40 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+* License, v. 2.0. If a copy of the MPL was not distributed with this
+* file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+addMessageListener("devtools:test:navigate", function ({ data }) {
+  content.location = data.location;
+});
+addMessageListener("devtools:test:reload", function () {
+  content.location.reload();
+});
+addMessageListener("devtools:test:clickSelector", function ({data}) {
+  let {selector,iframeSelector} = data;
+  let doc = content.document;
+  if (iframeSelector) {
+    doc = doc.querySelector(iframeSelector).contentDocument;
+  }
+  doc.querySelector(selector).click();
+  sendAsyncMessage("devtools:test:clickSelectorFinished");
+
+  // dump (Object.keys(EventUtils).join("\n"));
+  // attachSpecialPowersToWindow(content);
+
+  // let sp = content.wrappedJSObject.SpecialPowers;//new SpecialPowers(content);
+  // let spAPI = new SpecialPowersAPI(content);
+  // dump (Object.keys(sp).join("\n"));
+  // dump ("****\n");
+  // dump (Object.keys(sp).join("\n"));
+  // sp.log("HI BRIAN");
+  // SpecialPowersAPI.prototype.log.call(null, "HI BRIAN");
+  // setTimeout(() => {
+  // }, 1000);
+
+
+  // sp.executeSoon(() => {
+  //   sendAsyncMessage("devtools:test:clickSelectorFinished");
+
+  // }, content);
+});
\ No newline at end of file
diff --git a/browser/devtools/framework/test/browser.ini b/browser/devtools/framework/test/browser.ini
--- a/browser/devtools/framework/test/browser.ini
+++ b/browser/devtools/framework/test/browser.ini
@@ -4,17 +4,16 @@ support-files =
   browser_toolbox_options_disable_js.html
   browser_toolbox_options_disable_js_iframe.html
   browser_toolbox_options_disable_cache.sjs
   head.js
 
 [browser_devtools_api.js]
 [browser_dynamic_tool_enabling.js]
 [browser_keybindings.js]
-skip-if = e10s # Bug 1030318
 [browser_new_activation_workflow.js]
 [browser_target_events.js]
 [browser_target_remote.js]
 [browser_toolbox_dynamic_registration.js]
 [browser_toolbox_highlight.js]
 [browser_toolbox_hosts.js]
 [browser_toolbox_options.js]
 [browser_toolbox_options_disable_buttons.js]
diff --git a/browser/devtools/framework/test/browser_keybindings.js b/browser/devtools/framework/test/browser_keybindings.js
--- a/browser/devtools/framework/test/browser_keybindings.js
+++ b/browser/devtools/framework/test/browser_keybindings.js
@@ -13,17 +13,17 @@ function test()
   let inspector;
   let keysetMap = { };
 
   gBrowser.selectedTab = gBrowser.addTab();
   gBrowser.selectedBrowser.addEventListener("load", function onload() {
     gBrowser.selectedBrowser.removeEventListener("load", onload, true);
     doc = content.document;
     node = doc.querySelector("h1");
-    waitForFocus(setupKeyBindingsTest, content);
+    waitForFocus(setupKeyBindingsTest);
   }, true);
 
   content.location = "data:text/html,<html><head><title>Test for the " +
                      "highlighter keybindings</title></head><body>" +
                      "<h1>Keybindings!</h1></body></html>";
 
   function buildDevtoolsKeysetMap(keyset) {
     [].forEach.call(keyset.querySelectorAll("key"), function(key) {
diff --git a/browser/devtools/framework/test/browser_target_events.js b/browser/devtools/framework/test/browser_target_events.js
--- a/browser/devtools/framework/test/browser_target_events.js
+++ b/browser/devtools/framework/test/browser_target_events.js
@@ -27,23 +27,25 @@ function onHidden() {
   ok(true, "Hidden event received");
   target.once("visible", onVisible);
   gBrowser.removeCurrentTab();
 }
 
 function onVisible() {
   ok(true, "Visible event received");
   target.once("will-navigate", onWillNavigate);
-  gBrowser.contentWindow.location = "data:text/html,test navigation";
+  let mm = getFrameScript();
+  mm.sendAsyncMessage("devtools:test:navigate", { location: "data:text/html,<meta charset='utf8'/>test navigation" });
 }
 
 function onWillNavigate(event, request) {
   ok(true, "will-navigate event received");
   // Wait for navigation handling to complete before removing the tab, in order
   // to avoid triggering assertions.
+
   target.once("navigate", executeSoon.bind(null, onNavigate));
 }
 
 function onNavigate() {
   ok(true, "navigate event received");
   target.once("close", onClose);
   gBrowser.removeCurrentTab();
 }
diff --git a/browser/devtools/framework/test/browser_toolbox_options_disable_cache.js b/browser/devtools/framework/test/browser_toolbox_options_disable_cache.js
--- a/browser/devtools/framework/test/browser_toolbox_options_disable_cache.js
+++ b/browser/devtools/framework/test/browser_toolbox_options_disable_cache.js
@@ -126,32 +126,40 @@ function reloadTab(tabX) {
   // once() doesn't work here so we use a standard handler instead.
   browser.addEventListener("load", function onLoad() {
     browser.removeEventListener("load", onLoad, true);
     info("Reloaded tab " + tabX.title);
     def.resolve();
   }, true);
 
   info("Reloading tab " + tabX.title);
-  content.document.location.reload(false);
+  let mm = getFrameScript();
+  mm.sendAsyncMessage("devtools:test:reload");
 
   return def.promise;
 }
 
 function* destroyTab(tabX) {
   let toolbox = gDevTools.getToolbox(tabX.target);
-
-  info("Removing tab " + tabX.title);
-  gBrowser.removeTab(tabX.tab);
-  info("Removed tab " + tabX.title);
+  console.log(tabX.toolbox, toolbox, tabX.toolbox == toolbox);
 
   if (toolbox) {
+    let onceDestroyed = gDevTools.once("toolbox-destroyed");
+
+    info("Removing tab " + tabX.title);
+    gBrowser.removeTab(tabX.tab);
+    info("Removed tab " + tabX.title);
+
     info("Waiting for toolbox-destroyed");
-    yield gDevTools.once("toolbox-destroyed");
+    yield onceDestroyed;
     info("toolbox-destroyed event received for " + tabX.title);
+  } else {
+    info("Removing tab " + tabX.title);
+    gBrowser.removeTab(tabX.tab);
+    info("Removed tab " + tabX.title);
   }
 }
 
 function* finishUp() {
   for (let tab of tabs) {
     yield destroyTab(tab);
   }
 
diff --git a/browser/devtools/framework/test/browser_toolbox_options_disable_js.js b/browser/devtools/framework/test/browser_toolbox_options_disable_js.js
--- a/browser/devtools/framework/test/browser_toolbox_options_disable_js.js
+++ b/browser/devtools/framework/test/browser_toolbox_options_disable_js.js
@@ -27,102 +27,116 @@ function testSelectTool(aToolbox) {
   toolbox.once("options-selected", testJSEnabled);
   toolbox.selectTool("options");
 }
 
 function testJSEnabled(event, tool, secondPass) {
   ok(true, "Toolbox selected via selectTool method");
   info("Testing that JS is enabled");
 
-  let logJSEnabled = doc.getElementById("logJSEnabled");
   let output = doc.getElementById("output");
 
   // We use executeSoon here because switching docSehll.allowJavascript to true
   // takes a while to become live.
   executeSoon(function() {
-    EventUtils.synthesizeMouseAtCenter(logJSEnabled, {}, doc.defaultView);
-    is(output.textContent, "JavaScript Enabled", 'Output is "JavaScript Enabled"');
-    testJSEnabledIframe(secondPass);
+    let mm = getFrameScript();
+    mm.addMessageListener("devtools:test:clickSelectorFinished", function click() {
+      mm.removeMessageListener("devtools:test:clickSelectorFinished", click);
+      is(output.textContent, "JavaScript Enabled", 'Output is "JavaScript Enabled"');
+      testJSEnabledIframe(secondPass);
+    });
+    mm.sendAsyncMessage("devtools:test:clickSelector", {selector: "#logJSEnabled"});
   });
 }
 
 function testJSEnabledIframe(secondPass) {
   info("Testing that JS is enabled in the iframe");
 
-  let iframe = doc.querySelector("iframe");
-  let iframeDoc = iframe.contentDocument;
-  let logJSEnabled = iframeDoc.getElementById("logJSEnabled");
-  let output = iframeDoc.getElementById("output");
+  let mm = getFrameScript();
+  mm.addMessageListener("devtools:test:clickSelectorFinished", function click() {
+    mm.removeMessageListener("devtools:test:clickSelectorFinished", click);
 
-  EventUtils.synthesizeMouseAtCenter(logJSEnabled, {}, iframe.contentWindow);
-  is(output.textContent, "JavaScript Enabled",
-                         'Output is "JavaScript Enabled" in iframe');
-  if (secondPass) {
-    finishUp();
-  } else {
-    toggleJS().then(testJSDisabled);
-  }
+    let iframe = doc.querySelector("iframe");
+    let iframeDoc = iframe.contentDocument;
+    let output = iframeDoc.getElementById("output");
+    console.log("OUTPUT", output.textContent);
+    is(output.textContent, "JavaScript Enabled",
+                           'Output is "JavaScript Enabled" in iframe' + "second pass? " + secondPass);
+    if (secondPass) {
+      // finishUp();
+    } else {
+      toggleJS().then(testJSDisabled);
+    }
+  });
+  mm.sendAsyncMessage("devtools:test:clickSelector",
+    {selector: "#logJSEnabled", iframeSelector: "iframe"});
 }
 
 function toggleJS() {
   let deferred = promise.defer();
   let panel = toolbox.getCurrentPanel();
   let cbx = panel.panelDoc.getElementById("devtools-disable-javascript");
 
   cbx.scrollIntoView();
 
   if (cbx.checked) {
     info("Clearing checkbox to re-enable JS");
   } else {
     info("Checking checkbox to disable JS");
   }
 
-  // After uising scrollIntoView() we need to use executeSoon() to wait for the
+  // After using scrollIntoView() we need to use executeSoon() to wait for the
   // browser to scroll.
   executeSoon(function() {
     gBrowser.selectedBrowser.addEventListener("load", function onLoad(evt) {
       gBrowser.selectedBrowser.removeEventListener(evt.type, onLoad, true);
       doc = content.document;
-
+      console.log("RELOADED!!!!!", cbx.checked);
       deferred.resolve();
     }, true);
 
-    EventUtils.synthesizeMouseAtCenter(cbx, {}, panel.panelWin);
+    cbx.click();
+    // EventUtils.synthesizeMouseAtCenter(cbx, {}, panel.panelWin);
   });
 
   return deferred.promise;
 }
 
 function testJSDisabled() {
   info("Testing that JS is disabled");
 
-  let logJSDisabled = doc.getElementById("logJSDisabled");
   let output = doc.getElementById("output");
 
-  EventUtils.synthesizeMouseAtCenter(logJSDisabled, {}, doc.defaultView);
-  ok(output.textContent !== "JavaScript Disabled",
+  let mm = getFrameScript();
+  mm.addMessageListener("devtools:test:clickSelectorFinished", function click() {
+    mm.removeMessageListener("devtools:test:clickSelectorFinished", click);    ok(output.textContent !== "JavaScript Disabled",
      'output is not "JavaScript Disabled"');
-
-  testJSDisabledIframe();
+    testJSDisabledIframe();
+  });
+  mm.sendAsyncMessage("devtools:test:clickSelector", {selector: "#logJSDisabled"});
 }
 
 function testJSDisabledIframe() {
   info("Testing that JS is disabled in the iframe");
 
   let iframe = doc.querySelector("iframe");
   let iframeDoc = iframe.contentDocument;
-  let logJSDisabled = iframeDoc.getElementById("logJSDisabled");
   let output = iframeDoc.getElementById("output");
 
-  EventUtils.synthesizeMouseAtCenter(logJSDisabled, {}, iframe.contentWindow);
-  ok(output.textContent !== "JavaScript Disabled",
-     'output is not "JavaScript Disabled" in iframe');
-  toggleJS().then(function() {
-    testJSEnabled(null, null, true);
+  let mm = getFrameScript();
+  mm.addMessageListener("devtools:test:clickSelectorFinished", function click() {
+    mm.removeMessageListener("devtools:test:clickSelectorFinished", click);
+    ok(output.textContent !== "JavaScript Disabled",
+       'output is not "JavaScript Disabled" in iframe');
+    toggleJS().then(function() {
+      testJSEnabled(null, null, true);
+    });
   });
+  mm.sendAsyncMessage("devtools:test:clickSelector",
+    {selector: "#logJSDisabled", iframeSelector: "iframe"});
 }
 
 function finishUp() {
   toolbox.destroy().then(function() {
     gBrowser.removeCurrentTab();
     toolbox = doc = null;
     finish();
   });
diff --git a/browser/devtools/framework/test/head.js b/browser/devtools/framework/test/head.js
--- a/browser/devtools/framework/test/head.js
+++ b/browser/devtools/framework/test/head.js
@@ -11,16 +11,26 @@ const { devtools } = Cu.import("resource
 let TargetFactory = devtools.TargetFactory;
 
 // All test are asynchronous
 waitForExplicitFinish();
 
 // Uncomment this pref to dump all devtools emitted events to the console.
 // Services.prefs.setBoolPref("devtools.dump.emit", true);
 
+function getFrameScript() {
+  let mm = gBrowser.selectedBrowser.messageManager;
+  let frameURL = "chrome://browser/content/devtools/framework/scriptutils.js";
+  mm.loadFrameScript(frameURL, false);
+  SimpleTest.registerCleanupFunction(() => {
+    mm = null;
+  });
+  return mm;
+}
+
 gDevTools.testing = true;
 SimpleTest.registerCleanupFunction(() => {
   gDevTools.testing = false;
   Services.prefs.clearUserPref("devtools.dump.emit");
 });
 
 /**
  * Define an async test based on a generator function
diff --git a/browser/devtools/framework/toolbox.js b/browser/devtools/framework/toolbox.js
--- a/browser/devtools/framework/toolbox.js
+++ b/browser/devtools/framework/toolbox.js
@@ -172,16 +172,17 @@ Toolbox.prototype = {
   get frame() {
     return this._host.frame;
   },
 
   /**
    * Shortcut to the document containing the toolbox UI
    */
   get doc() {
+    console.log("GETTGING DOC!!", this.frame);
     return this.frame.contentDocument;
   },
 
   /**
    * Get current zoom level of toolbox
    */
   get zoomValue() {
     return parseFloat(Services.prefs.getCharPref(ZOOM_PREF));
@@ -1319,50 +1320,60 @@ Toolbox.prototype = {
     }
 
     // Now that we are closing the toolbox we can re-enable JavaScript for the
     // current tab.
     if (this.target.activeTab) {
       this.target.activeTab.reconfigure({"cacheDisabled": false});
     }
 
+    // Removing buttons
+    this._pickerButton.removeEventListener("command", this._togglePicker, false);
+    this._pickerButton = null;
+    let container = this.doc.getElementById("toolbox-buttons");
+    while (container.firstChild) {
+      container.removeChild(container.firstChild);
+    }
+
     // Destroying the walker and inspector fronts
     outstanding.push(this.destroyInspector());
-    // Removing buttons
-    outstanding.push(() => {
-      this._pickerButton.removeEventListener("command", this._togglePicker, false);
-      this._pickerButton = null;
-      let container = this.doc.getElementById("toolbox-buttons");
-      while (container.firstChild) {
-        container.removeChild(container.firstChild);
-      }
-    });
+
     // Remove the host UI
     outstanding.push(this.destroyHost());
 
     if (this.target.isLocalTab) {
       this._requisition.destroy();
     }
     this._telemetry.toolClosed("toolbox");
     this._telemetry.destroy();
 
+    console.log("DESTROY STEP 1", outstanding.length);
+    outstanding.forEach((o, i) => {
+      console.log("Desroy waiting for outstanding " + i);
+      o.then(() => {
+        console.log("Destroy finished outstanding " + i);
+      });
+    });
+
     return this._destroyer = promise.all(outstanding).then(() => {
       // Targets need to be notified that the toolbox is being torn down.
       // This is done after other destruction tasks since it may tear down
       // fronts and the debugger transport which earlier destroy methods may
       // require to complete.
       if (!this._target) {
         return null;
       }
       let target = this._target;
       this._target = null;
       this.highlighterUtils.release();
       target.off("close", this.destroy);
+      console.log("DESTROY STEP 2", target);
       return target.destroy();
     }).then(() => {
+      console.log("DESTROY STEP 3");
       this.emit("destroyed");
       // Free _host after the call to destroyed in order to let a chance
       // to destroyed listeners to still query toolbox attributes
       this._host = null;
       this._toolPanels.clear();
     }).then(null, console.error);
   },
 
diff --git a/browser/devtools/jar.mn b/browser/devtools/jar.mn
--- a/browser/devtools/jar.mn
+++ b/browser/devtools/jar.mn
@@ -93,16 +93,17 @@ browser.jar:
     content/browser/devtools/profiler/cleopatra/images/throbber.svg    (profiler/cleopatra/images/throbber.svg)
     content/browser/devtools/profiler/cleopatra/images/treetwisty.svg  (profiler/cleopatra/images/treetwisty.svg)
     content/browser/devtools/responsivedesign/resize-commands.js       (responsivedesign/resize-commands.js)
     content/browser/devtools/commandline.css                           (commandline/commandline.css)
     content/browser/devtools/commandlineoutput.xhtml                   (commandline/commandlineoutput.xhtml)
     content/browser/devtools/commandlinetooltip.xhtml                  (commandline/commandlinetooltip.xhtml)
     content/browser/devtools/commandline/commands-index.js             (commandline/commands-index.js)
     content/browser/devtools/framework/toolbox-window.xul              (framework/toolbox-window.xul)
+    content/browser/devtools/framework/scriptutils.js              (framework/scriptutils.js)
     content/browser/devtools/framework/toolbox-options.xul             (framework/toolbox-options.xul)
     content/browser/devtools/framework/toolbox-options.js              (framework/toolbox-options.js)
     content/browser/devtools/framework/toolbox.xul                     (framework/toolbox.xul)
     content/browser/devtools/framework/options-panel.css               (framework/options-panel.css)
     content/browser/devtools/framework/toolbox-process-window.xul      (framework/toolbox-process-window.xul)
     content/browser/devtools/framework/toolbox-process-window.js       (framework/toolbox-process-window.js)
     content/browser/devtools/inspector/inspector.xul                   (inspector/inspector.xul)
     content/browser/devtools/inspector/inspector.css                   (inspector/inspector.css)
diff --git a/toolkit/devtools/server/actors/webbrowser.js b/toolkit/devtools/server/actors/webbrowser.js
--- a/toolkit/devtools/server/actors/webbrowser.js
+++ b/toolkit/devtools/server/actors/webbrowser.js
@@ -892,16 +892,19 @@ TabActor.prototype = {
   /**
    * Reload the page in this tab.
    */
   onReload: function(aRequest) {
     let force = aRequest && aRequest.options && aRequest.options.force;
     // Wait a tick so that the response packet can be dispatched before the
     // subsequent navigation event packet.
     Services.tm.currentThread.dispatch(DevToolsUtils.makeInfallible(() => {
+      if (!this.docShell) {
+        return;
+      }
       this.webNavigation.reload(force ? Ci.nsIWebNavigation.LOAD_FLAGS_BYPASS_CACHE
                                       : Ci.nsIWebNavigation.LOAD_FLAGS_NONE);
     }, "TabActor.prototype.onReload's delayed body"), 0);
     return {};
   },
 
   /**
    * Navigate this tab to a new location
diff --git a/toolkit/devtools/server/main.js b/toolkit/devtools/server/main.js
--- a/toolkit/devtools/server/main.js
+++ b/toolkit/devtools/server/main.js
@@ -635,17 +635,19 @@ var DebuggerServer = {
         // ChildDebuggerTransport...
         childTransport.close();
         childTransport = null;
         aConnection.cancelForwarding(prefix);
 
         // ... and notify the child process to clean the tab actors.
         mm.sendAsyncMessage("debug:disconnect");
       }
-      Services.obs.removeObserver(onMessageManagerDisconnect, "message-manager-disconnect");
+      try {
+        Services.obs.removeObserver(onMessageManagerDisconnect, "message-manager-disconnect");
+      } catch(e) {}
     });
 
     mm.sendAsyncMessage("debug:connect", { prefix: prefix });
 
     return deferred.promise;
   },
 
   /**
