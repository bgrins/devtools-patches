# HG changeset patch
# Parent 02b52b8da6f4c2c5323d35db8d50ae2e952753cc
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 1030318 - Enable devtools/framework tests with e10s;r=mratcliffe

diff --git a/browser/devtools/framework/test/browser.ini b/browser/devtools/framework/test/browser.ini
--- a/browser/devtools/framework/test/browser.ini
+++ b/browser/devtools/framework/test/browser.ini
@@ -4,26 +4,26 @@ support-files =
   browser_toolbox_options_disable_js.html
   browser_toolbox_options_disable_js_iframe.html
   browser_toolbox_options_disable_cache.sjs
   head.js
 
 [browser_devtools_api.js]
 [browser_dynamic_tool_enabling.js]
 [browser_keybindings.js]
-skip-if = e10s # Bug 1030318
 [browser_new_activation_workflow.js]
 [browser_target_events.js]
 [browser_target_remote.js]
 [browser_toolbox_dynamic_registration.js]
 [browser_toolbox_highlight.js]
 [browser_toolbox_hosts.js]
 [browser_toolbox_options.js]
 [browser_toolbox_options_disable_buttons.js]
 [browser_toolbox_options_disable_cache.js]
+skip-if = e10s # Bug 1030318
 [browser_toolbox_options_disable_js.js]
 # [browser_toolbox_raise.js] # Bug 962258
 # skip-if = os == "win"
 [browser_toolbox_ready.js]
 [browser_toolbox_select_event.js]
 [browser_toolbox_sidebar.js]
 [browser_toolbox_tabsswitch_shortcuts.js]
 [browser_toolbox_tool_ready.js]
diff --git a/browser/devtools/framework/test/browser_keybindings.js b/browser/devtools/framework/test/browser_keybindings.js
--- a/browser/devtools/framework/test/browser_keybindings.js
+++ b/browser/devtools/framework/test/browser_keybindings.js
@@ -13,17 +13,17 @@ function test()
   let inspector;
   let keysetMap = { };
 
   gBrowser.selectedTab = gBrowser.addTab();
   gBrowser.selectedBrowser.addEventListener("load", function onload() {
     gBrowser.selectedBrowser.removeEventListener("load", onload, true);
     doc = content.document;
     node = doc.querySelector("h1");
-    waitForFocus(setupKeyBindingsTest, content);
+    waitForFocus(setupKeyBindingsTest);
   }, true);
 
   content.location = "data:text/html,<html><head><title>Test for the " +
                      "highlighter keybindings</title></head><body>" +
                      "<h1>Keybindings!</h1></body></html>";
 
   function buildDevtoolsKeysetMap(keyset) {
     [].forEach.call(keyset.querySelectorAll("key"), function(key) {
diff --git a/browser/devtools/framework/test/browser_target_events.js b/browser/devtools/framework/test/browser_target_events.js
--- a/browser/devtools/framework/test/browser_target_events.js
+++ b/browser/devtools/framework/test/browser_target_events.js
@@ -27,17 +27,18 @@ function onHidden() {
   ok(true, "Hidden event received");
   target.once("visible", onVisible);
   gBrowser.removeCurrentTab();
 }
 
 function onVisible() {
   ok(true, "Visible event received");
   target.once("will-navigate", onWillNavigate);
-  gBrowser.contentWindow.location = "data:text/html,test navigation";
+  let mm = getFrameScript();
+  mm.sendAsyncMessage("devtools:test:navigate", { location: "data:text/html,<meta charset='utf8'/>test navigation" });
 }
 
 function onWillNavigate(event, request) {
   ok(true, "will-navigate event received");
   // Wait for navigation handling to complete before removing the tab, in order
   // to avoid triggering assertions.
   target.once("navigate", executeSoon.bind(null, onNavigate));
 }
diff --git a/browser/devtools/framework/test/browser_toolbox_options_disable_cache.js b/browser/devtools/framework/test/browser_toolbox_options_disable_cache.js
--- a/browser/devtools/framework/test/browser_toolbox_options_disable_cache.js
+++ b/browser/devtools/framework/test/browser_toolbox_options_disable_cache.js
@@ -126,33 +126,36 @@ function reloadTab(tabX) {
   // once() doesn't work here so we use a standard handler instead.
   browser.addEventListener("load", function onLoad() {
     browser.removeEventListener("load", onLoad, true);
     info("Reloaded tab " + tabX.title);
     def.resolve();
   }, true);
 
   info("Reloading tab " + tabX.title);
-  content.document.location.reload(false);
+  let mm = getFrameScript();
+  mm.sendAsyncMessage("devtools:test:reload");
 
   return def.promise;
 }
 
 function* destroyTab(tabX) {
   let toolbox = gDevTools.getToolbox(tabX.target);
 
+  let onceDestroyed = promise.resolve();
+  if (toolbox) {
+    onceDestroyed = gDevTools.once("toolbox-destroyed");
+  }
+
   info("Removing tab " + tabX.title);
   gBrowser.removeTab(tabX.tab);
   info("Removed tab " + tabX.title);
 
-  if (toolbox) {
-    info("Waiting for toolbox-destroyed");
-    yield gDevTools.once("toolbox-destroyed");
-    info("toolbox-destroyed event received for " + tabX.title);
-  }
+  info("Waiting for toolbox-destroyed");
+  yield onceDestroyed;
 }
 
 function* finishUp() {
   for (let tab of tabs) {
     yield destroyTab(tab);
   }
 
   tabs = null;
diff --git a/browser/devtools/framework/test/browser_toolbox_options_disable_js.js b/browser/devtools/framework/test/browser_toolbox_options_disable_js.js
--- a/browser/devtools/framework/test/browser_toolbox_options_disable_js.js
+++ b/browser/devtools/framework/test/browser_toolbox_options_disable_js.js
@@ -27,39 +27,35 @@ function testSelectTool(aToolbox) {
   toolbox.once("options-selected", testJSEnabled);
   toolbox.selectTool("options");
 }
 
 function testJSEnabled(event, tool, secondPass) {
   ok(true, "Toolbox selected via selectTool method");
   info("Testing that JS is enabled");
 
-  let logJSEnabled = doc.getElementById("logJSEnabled");
-  let output = doc.getElementById("output");
-
   // We use executeSoon here because switching docSehll.allowJavascript to true
   // takes a while to become live.
   executeSoon(function() {
-    EventUtils.synthesizeMouseAtCenter(logJSEnabled, {}, doc.defaultView);
+    let output = doc.getElementById("output");
+    doc.querySelector("#logJSEnabled").click();
     is(output.textContent, "JavaScript Enabled", 'Output is "JavaScript Enabled"');
     testJSEnabledIframe(secondPass);
   });
 }
 
 function testJSEnabledIframe(secondPass) {
   info("Testing that JS is enabled in the iframe");
 
   let iframe = doc.querySelector("iframe");
   let iframeDoc = iframe.contentDocument;
-  let logJSEnabled = iframeDoc.getElementById("logJSEnabled");
   let output = iframeDoc.getElementById("output");
-
-  EventUtils.synthesizeMouseAtCenter(logJSEnabled, {}, iframe.contentWindow);
+  iframeDoc.querySelector("#logJSEnabled").click();
   is(output.textContent, "JavaScript Enabled",
-                         'Output is "JavaScript Enabled" in iframe');
+                          'Output is "JavaScript Enabled" in iframe');
   if (secondPass) {
     finishUp();
   } else {
     toggleJS().then(testJSDisabled);
   }
 }
 
 function toggleJS() {
@@ -70,54 +66,45 @@ function toggleJS() {
   cbx.scrollIntoView();
 
   if (cbx.checked) {
     info("Clearing checkbox to re-enable JS");
   } else {
     info("Checking checkbox to disable JS");
   }
 
-  // After uising scrollIntoView() we need to use executeSoon() to wait for the
-  // browser to scroll.
-  executeSoon(function() {
-    gBrowser.selectedBrowser.addEventListener("load", function onLoad(evt) {
-      gBrowser.selectedBrowser.removeEventListener(evt.type, onLoad, true);
-      doc = content.document;
+  gBrowser.selectedBrowser.addEventListener("load", function onLoad(evt) {
+    gBrowser.selectedBrowser.removeEventListener(evt.type, onLoad, true);
+    doc = content.document;
+    deferred.resolve();
+  }, true);
 
-      deferred.resolve();
-    }, true);
-
-    EventUtils.synthesizeMouseAtCenter(cbx, {}, panel.panelWin);
-  });
+  cbx.click();
 
   return deferred.promise;
 }
 
 function testJSDisabled() {
   info("Testing that JS is disabled");
 
-  let logJSDisabled = doc.getElementById("logJSDisabled");
   let output = doc.getElementById("output");
+  doc.querySelector("#logJSDisabled").click();
 
-  EventUtils.synthesizeMouseAtCenter(logJSDisabled, {}, doc.defaultView);
   ok(output.textContent !== "JavaScript Disabled",
      'output is not "JavaScript Disabled"');
-
   testJSDisabledIframe();
 }
 
 function testJSDisabledIframe() {
   info("Testing that JS is disabled in the iframe");
 
   let iframe = doc.querySelector("iframe");
   let iframeDoc = iframe.contentDocument;
-  let logJSDisabled = iframeDoc.getElementById("logJSDisabled");
   let output = iframeDoc.getElementById("output");
-
-  EventUtils.synthesizeMouseAtCenter(logJSDisabled, {}, iframe.contentWindow);
+  iframeDoc.querySelector("#logJSDisabled").click();
   ok(output.textContent !== "JavaScript Disabled",
      'output is not "JavaScript Disabled" in iframe');
   toggleJS().then(function() {
     testJSEnabled(null, null, true);
   });
 }
 
 function finishUp() {
diff --git a/browser/devtools/framework/test/head.js b/browser/devtools/framework/test/head.js
--- a/browser/devtools/framework/test/head.js
+++ b/browser/devtools/framework/test/head.js
@@ -11,16 +11,26 @@ const { devtools } = Cu.import("resource
 let TargetFactory = devtools.TargetFactory;
 
 // All test are asynchronous
 waitForExplicitFinish();
 
 // Uncomment this pref to dump all devtools emitted events to the console.
 // Services.prefs.setBoolPref("devtools.dump.emit", true);
 
+function getFrameScript() {
+  let mm = gBrowser.selectedBrowser.messageManager;
+  let frameURL = "chrome://browser/content/devtools/frame-script-utils.js";
+  mm.loadFrameScript(frameURL, false);
+  SimpleTest.registerCleanupFunction(() => {
+    mm = null;
+  });
+  return mm;
+}
+
 gDevTools.testing = true;
 SimpleTest.registerCleanupFunction(() => {
   gDevTools.testing = false;
   Services.prefs.clearUserPref("devtools.dump.emit");
 });
 
 /**
  * Define an async test based on a generator function
diff --git a/browser/devtools/framework/toolbox.js b/browser/devtools/framework/toolbox.js
--- a/browser/devtools/framework/toolbox.js
+++ b/browser/devtools/framework/toolbox.js
@@ -1350,27 +1350,27 @@ Toolbox.prototype = {
     }
 
     // Now that we are closing the toolbox we can re-enable JavaScript for the
     // current tab.
     if (this.target.activeTab) {
       this.target.activeTab.reconfigure({"cacheDisabled": false});
     }
 
+    // Removing buttons
+    this._pickerButton.removeEventListener("command", this._togglePicker, false);
+    this._pickerButton = null;
+    let container = this.doc.getElementById("toolbox-buttons");
+    while (container.firstChild) {
+      container.removeChild(container.firstChild);
+    }
+
     // Destroying the walker and inspector fronts
     outstanding.push(this.destroyInspector());
-    // Removing buttons
-    outstanding.push(() => {
-      this._pickerButton.removeEventListener("command", this._togglePicker, false);
-      this._pickerButton = null;
-      let container = this.doc.getElementById("toolbox-buttons");
-      while (container.firstChild) {
-        container.removeChild(container.firstChild);
-      }
-    });
+
     // Remove the host UI
     outstanding.push(this.destroyHost());
 
     if (this.target.isLocalTab) {
       this._requisition.destroy();
     }
     this._telemetry.toolClosed("toolbox");
     this._telemetry.destroy();
diff --git a/browser/devtools/shared/frame-script-utils.js b/browser/devtools/shared/frame-script-utils.js
--- a/browser/devtools/shared/frame-script-utils.js
+++ b/browser/devtools/shared/frame-script-utils.js
@@ -2,8 +2,17 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 addMessageListener("devtools:test:history", function ({ data }) {
   content.history[data.direction]();
 });
+
+addMessageListener("devtools:test:navigate", function ({ data }) {
+  content.location = data.location;
+});
+
+addMessageListener("devtools:test:reload", function ({ data }) {
+  data = data || {};
+  content.location.reload(data.forceget);
+});
