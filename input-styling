# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  399f9492ad3c3d7f9ffc4859dfeeeacb5b555ceb
Bug 1216569 - Search box styling

diff --git a/devtools/client/styleinspector/computed-view.js b/devtools/client/styleinspector/computed-view.js
--- a/devtools/client/styleinspector/computed-view.js
+++ b/devtools/client/styleinspector/computed-view.js
@@ -173,18 +173,16 @@ function CssComputedView(inspector, docu
   this.searchField.addEventListener("input", this._onFilterStyles);
   this.searchField.addEventListener("keypress", this._onFilterKeyPress);
   this.searchField.addEventListener("contextmenu",
                                     this._onFilterTextboxContextMenu);
   this.searchClearButton.addEventListener("click", this._onClearSearch);
   this.includeBrowserStylesCheckbox.addEventListener("command",
     this._onIncludeBrowserStyles);
 
-  this.searchClearButton.hidden = true;
-
   // No results text.
   this.noResults = this.styleDocument.getElementById("noResults");
 
   // Refresh panel when color unit changed.
   this._handlePrefChange = this._handlePrefChange.bind(this);
   gDevTools.on("pref-changed", this._handlePrefChange);
 
   // Refresh panel when pref for showing original sources changes
@@ -528,25 +526,23 @@ CssComputedView.prototype = {
    */
   _onFilterStyles: function() {
     if (this._filterChangedTimeout) {
       clearTimeout(this._filterChangedTimeout);
     }
 
     let filterTimeout = (this.searchField.value.length > 0)
       ? FILTER_CHANGED_TIMEOUT : 0;
-    this.searchClearButton.hidden = this.searchField.value.length === 0;
+    if (this.searchField.value.length > 0) {
+      this.searchField.setAttribute("filled", true);
+    } else {
+      this.searchField.removeAttribute("filled");
+    }
 
     this._filterChangedTimeout = setTimeout(() => {
-      if (this.searchField.value.length > 0) {
-        this.searchField.setAttribute("filled", true);
-      } else {
-        this.searchField.removeAttribute("filled");
-      }
-
       this.refreshPanel();
       this._filterChangeTimeout = null;
     }, filterTimeout);
   },
 
   /**
    * Handle the search box's keypress event. If the escape key is pressed,
    * clear the search box field.
diff --git a/devtools/client/styleinspector/rule-view.js b/devtools/client/styleinspector/rule-view.js
--- a/devtools/client/styleinspector/rule-view.js
+++ b/devtools/client/styleinspector/rule-view.js
@@ -1336,18 +1336,16 @@ function CssRuleView(inspector, document
   this.searchField = doc.getElementById("ruleview-searchbox");
   this.searchClearButton = doc.getElementById("ruleview-searchinput-clear");
   this.pseudoClassPanel = doc.getElementById("pseudo-class-panel");
   this.pseudoClassToggle = doc.getElementById("pseudo-class-panel-toggle");
   this.hoverCheckbox = doc.getElementById("pseudo-hover-toggle");
   this.activeCheckbox = doc.getElementById("pseudo-active-toggle");
   this.focusCheckbox = doc.getElementById("pseudo-focus-toggle");
 
-  this.searchClearButton.hidden = true;
-
   this.styleDocument.addEventListener("keydown", this._onKeydown);
   this.styleDocument.addEventListener("keypress", this._onKeypress);
   this.element.addEventListener("copy", this._onCopy);
   this.element.addEventListener("contextmenu", this._onContextMenu);
   this.addRuleButton.addEventListener("click", this._onAddRule);
   this.searchField.addEventListener("input", this._onFilterStyles);
   this.searchField.addEventListener("keypress", this._onFilterKeyPress);
   this.searchField.addEventListener("contextmenu",
@@ -1775,25 +1773,23 @@ CssRuleView.prototype = {
    */
   _onFilterStyles: function() {
     if (this._filterChangedTimeout) {
       clearTimeout(this._filterChangedTimeout);
     }
 
     let filterTimeout = (this.searchValue.length > 0) ?
                         FILTER_CHANGED_TIMEOUT : 0;
-    this.searchClearButton.hidden = this.searchValue.length === 0;
+    if (this.searchField.value.length > 0) {
+      this.searchField.setAttribute("filled", true);
+    } else {
+      this.searchField.removeAttribute("filled");
+    }
 
     this._filterChangedTimeout = setTimeout(() => {
-      if (this.searchField.value.length > 0) {
-        this.searchField.setAttribute("filled", true);
-      } else {
-        this.searchField.removeAttribute("filled");
-      }
-
       this.searchData = {
         searchPropertyMatch: FILTER_PROP_RE.exec(this.searchValue),
         searchPropertyName: this.searchValue,
         searchPropertyValue: this.searchValue,
         strictSearchValue: "",
         strictSearchPropertyName: false,
         strictSearchPropertyValue: false,
         strictSearchAllValues: false
diff --git a/devtools/client/styleinspector/test/browser_ruleview_strict-search-filter_01.js b/devtools/client/styleinspector/test/browser_ruleview_strict-search-filter_01.js
--- a/devtools/client/styleinspector/test/browser_ruleview_strict-search-filter_01.js
+++ b/devtools/client/styleinspector/test/browser_ruleview_strict-search-filter_01.js
@@ -74,28 +74,32 @@ add_task(function*() {
   yield selectNode("#testid", inspector);
   yield testAddTextInFilter(inspector, view);
 });
 
 function* testAddTextInFilter(inspector, view) {
   for (let data of TEST_DATA) {
     info(data.desc);
     yield setSearchFilter(view, data.search);
+
     yield checkRules(view, data);
     yield clearSearchAndCheckRules(view);
   }
 }
 
 function* checkRules(view, data) {
   info("Check that the correct rules are visible");
   is(view.element.children.length, data.ruleCount,
     "Should have " + data.ruleCount + " rules.");
   is(getRuleViewRuleEditor(view, 0).rule.selectorText, "element",
     "First rule is inline element.");
 
+  let searchField = view.searchField;
+  ok(searchField.hasAttribute("filled"), "Search filter is filled.");
+
   let rule = getRuleViewRuleEditor(view, 1).rule;
 
   is(rule.selectorText, "#testid", "Second rule is #testid.");
   ok(rule.textProps[data.propertyIndex].editor.container.classList
     .contains("ruleview-highlight"),
     "Text property is correctly highlighted.");
 
   if (data.ruleCount > 2) {
@@ -114,12 +118,13 @@ function* clearSearchAndCheckRules(view)
   let searchClearButton = view.searchClearButton;
 
   info("Clearing the search filter");
   EventUtils.synthesizeMouseAtCenter(searchClearButton, {}, win);
   yield view.inspector.once("ruleview-filtered");
 
   info("Check the search filter is cleared and no rules are highlighted");
   is(view.element.children.length, 3, "Should have 3 rules.");
+  ok(!searchField.hasAttribute("filled"), "Search filter is cleared.");
   ok(!searchField.value, "Search filter is cleared.");
   ok(!doc.querySelectorAll(".ruleview-highlight").length,
     "No rules are higlighted.");
 }
diff --git a/devtools/client/themes/toolbars.inc.css b/devtools/client/themes/toolbars.inc.css
--- a/devtools/client/themes/toolbars.inc.css
+++ b/devtools/client/themes/toolbars.inc.css
@@ -371,39 +371,43 @@
 .devtools-searchbox {
   display: flex;
   flex: 1;
   position: relative;
 }
 
 .devtools-rule-searchbox {
   -moz-box-flex: 1;
-  padding-right: 23px;
   width: 100%;
   font: inherit;
 }
 
 .devtools-rule-searchbox[filled] {
   background-color: var(--searchbox-background-color);
   border-color: var(--searchbox-border-color);
+  padding-right: 23px;
+}
+
+.devtools-rule-searchbox:not([filled]) + .devtools-searchinput-clear {
+  display: none;
 }
 
 .devtools-style-searchbox-no-match {
   background-color: var(--searcbox-no-match-background-color) !important;
   border-color: var(--searcbox-no-match-border-color) !important;
 }
 
 .devtools-no-search-result {
   border-color: var(--theme-highlight-red) !important;
 }
 
 .devtools-searchinput-clear {
   position: absolute;
   top: 3.5px;
-  right: 7px;
+  right: 3px;
   padding: 0;
   border: 0;
   width: 16px;
   height: 16px;
   background-position: 0 0;
   background-repeat: no-repeat;
   background-color: transparent;
 }
