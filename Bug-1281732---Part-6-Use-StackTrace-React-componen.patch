# vim: se ft=diff :
# HG changeset patch
# User Jarda Snajdr <jsnajdr@gmail.com>
# Date 2016-06-29 04:06
Bug 1281732 - Part 6: Use StackTrace React component in webconsole, cleanup message-location r=linclark

diff --git a/devtools/client/themes/webconsole.css b/devtools/client/themes/webconsole.css
index cd188ae..23db832 100644
--- a/devtools/client/themes/webconsole.css
+++ b/devtools/client/themes/webconsole.css
@@ -19,17 +19,16 @@ a {
 }
 
 /* Workaround for Bug 575675 - FindChildWithRules aRelevantLinkVisited
  * assertion when loading HTML page with links in XUL iframe */
 *:visited { }
 
 .message {
   display: flex;
-  flex: none;
   padding: 0 7px;
   width: 100%;
   box-sizing: border-box;
 }
 
 .message > .prefix,
 .message > .timestamp {
   flex: none;
@@ -74,17 +73,18 @@ a {
   display: inline-block;
 }
 
 .theme-light .message > .icon::before {
   background-image: url(chrome://devtools/skin/images/webconsole.svg#light-icons);
 }
 
 .message > .message-body-wrapper {
-  flex: 1 1 100%;
+  flex: auto;
+  min-width: 0px;
   margin: 3px;
 }
 
 .message-body-wrapper .table-widget-body {
   overflow: visible;
 }
 
 /* The red bubble that shows the number of times a message is repeated */
@@ -102,58 +102,46 @@ a {
   font-weight: 600;
 }
 
 .message-repeats[value="1"] {
   display: none;
 }
 
 .message-location {
-  display: flex;
-  flex: none;
-  align-self: flex-start;
-  justify-content: flex-end;
-  width: 10em;
-  margin-top: 3px;
-  color: -moz-nativehyperlinktext;
-  text-decoration: none;
-  white-space: nowrap;
-}
-
-/* More space for the location data for location URL */
-.theme-firebug .message-location {
-  width: 13em;
+  max-width: 40%;
 }
 
-.message-location:hover,
-.message-location:focus {
-  text-decoration: underline;
+.stack-trace .frame-link-source,
+.message-location .frame-link-source {
+  direction: rtl;
+  white-space: nowrap;
+  overflow: hidden;
+  text-overflow: ellipsis;
 }
 
-.message-location > .frame-link .frame-link-source {
-  width: 10em;
+.stack-trace .frame-link-function-display-name {
+  max-width: 50%;
+  white-space: nowrap;
+  overflow: hidden;
+  text-overflow: ellipsis;
 }
 
 .message-flex-body {
   display: flex;
 }
 
 .message-body > * {
   white-space: pre-wrap;
   word-wrap: break-word;
 }
 
 .message-flex-body > .message-body {
   display: block;
-  flex: 1 1 auto;
-  vertical-align: middle;
-}
-
-.message-flex-body > .message-location {
-  margin-top: 0;
+  flex: auto;
 }
 
 #output-wrapper {
   direction: ltr;
   overflow: auto;
   -moz-user-select: text;
 }
 
@@ -494,20 +482,18 @@ a {
 }
 
 .theme-light .navigation-marker .url {
   background: #fff;
 }
 
 .stacktrace {
   display: none;
-  list-style: none;
-  padding: 0 1em 0 1.5em;
+  padding: 5px 10px;
   margin: 5px 0 0 0;
-  max-height: 10em;
   overflow-y: auto;
   border: 1px solid var(--theme-splitter-color);
   border-radius: 3px;
 }
 
 .consoletable {
   margin: 5px 0 0 0;
 }
@@ -526,26 +512,16 @@ a {
 
 .message .theme-twisty {
   display: inline-block;
   vertical-align: middle;
   margin: 3px 0 0 0;
   flex-shrink: 0;
 }
 
-.stacktrace li {
-  display: flex;
-  margin: 0;
-}
-
-.stacktrace .function {
-  display: block;
-  flex: 1 1 auto;
-}
-
 .cm-s-mozilla a[class] {
   font-style: italic;
   text-decoration: none;
 }
 
 .cm-s-mozilla a[class]:hover,
 .cm-s-mozilla a[class]:focus {
   text-decoration: underline;
diff --git a/devtools/client/webconsole/console-output.js b/devtools/client/webconsole/console-output.js
index e3fa379..e1a4595 100644
--- a/devtools/client/webconsole/console-output.js
+++ b/devtools/client/webconsole/console-output.js
@@ -3604,95 +3604,53 @@ Widgets.LongString.prototype = extend(Widgets.BaseWidget.prototype, {
  * @constructor
  * @extends Widgets.BaseWidget
  * @param object message
  *        The owning message.
  * @param array stacktrace
  *        The stacktrace to display, array of frames as supplied by the server,
  *        over the remote protocol.
  */
-Widgets.Stacktrace = function (message, stacktrace)
-{
+Widgets.Stacktrace = function (message, stacktrace) {
   Widgets.BaseWidget.call(this, message);
   this.stacktrace = stacktrace;
 };
 
 Widgets.Stacktrace.prototype = extend(Widgets.BaseWidget.prototype, {
   /**
    * The stackframes received from the server.
    * @type array
    */
   stacktrace: null,
 
-  render: function ()
-  {
+  onViewSourceInDebugger(frame) {
+    this.output.openLocationInDebugger({
+      url: frame.source,
+      line: frame.line
+    });
+  },
+
+  render() {
     if (this.element) {
       return this;
     }
 
-    let result = this.element = this.document.createElementNS(XHTML_NS, "ul");
+    let result = this.element = this.document.createElementNS(XHTML_NS, "div");
     result.className = "stacktrace devtools-monospace";
 
     if (this.stacktrace) {
-      for (let frame of this.stacktrace) {
-        result.appendChild(this._renderFrame(frame));
-      }
+      this.output.owner.ReactDOM.render(this.output.owner.StackTraceView({
+        stacktrace: this.stacktrace,
+        onViewSourceInDebugger: frame => this.onViewSourceInDebugger(frame)
+      }), result);
     }
 
     return this;
-  },
-
-  /**
-   * Render a frame object received from the server.
-   *
-   * @param object frame
-   *        The stack frame to display. This object should have the following
-   *        properties: functionName, filename and lineNumber.
-   * @return DOMElement
-   *         The DOM element to display for the given frame.
-   */
-  _renderFrame: function (frame)
-  {
-    let fn = this.document.createElementNS(XHTML_NS, "span");
-    fn.className = "function";
-
-    let asyncCause = "";
-    if (frame.asyncCause) {
-      asyncCause =
-        l10n.getFormatStr("stacktrace.asyncStack", [frame.asyncCause]) + " ";
-    }
-
-    if (frame.functionName) {
-      let span = this.document.createElementNS(XHTML_NS, "span");
-      span.className = "cm-variable";
-      span.textContent = asyncCause + frame.functionName;
-      fn.appendChild(span);
-      fn.appendChild(this.document.createTextNode("()"));
-    } else {
-      fn.classList.add("cm-comment");
-      fn.textContent = asyncCause + l10n.getStr("stacktrace.anonymousFunction");
-    }
-
-    let location = this.output.owner.createLocationNode({url: frame.filename,
-                                                        line: frame.lineNumber});
-
-    // .devtools-monospace sets font-size to 80%, however .body already has
-    // .devtools-monospace. If we keep it here, the location would be rendered
-    // smaller.
-    location.classList.remove("devtools-monospace");
-
-    let elem = this.document.createElementNS(XHTML_NS, "li");
-    elem.appendChild(fn);
-    elem.appendChild(location);
-    elem.appendChild(this.document.createTextNode("\n"));
-
-    return elem;
-  },
-}); // Widgets.Stacktrace.prototype
-
+  }
+});
 
 /**
  * The table widget.
  *
  * @constructor
  * @extends Widgets.BaseWidget
  * @param object message
  *        The owning message.
diff --git a/devtools/client/webconsole/webconsole.js b/devtools/client/webconsole/webconsole.js
index ef6ba1e..537db4a 100644
--- a/devtools/client/webconsole/webconsole.js
+++ b/devtools/client/webconsole/webconsole.js
@@ -240,16 +240,17 @@ function WebConsoleFrame(webConsoleOwner) {
   let require = BrowserLoaderModule.BrowserLoader({
     window: this.window,
     useOnlyShared: true
   }).require;
 
   this.React = require("devtools/client/shared/vendor/react");
   this.ReactDOM = require("devtools/client/shared/vendor/react-dom");
   this.FrameView = this.React.createFactory(require("devtools/client/shared/components/frame"));
+  this.StackTraceView = this.React.createFactory(require("devtools/client/shared/components/stack-trace"));
 
   this._telemetry = new Telemetry();
 
   EventEmitter.decorate(this);
 }
 exports.WebConsoleFrame = WebConsoleFrame;
 
 WebConsoleFrame.prototype = {
@@ -2335,21 +2336,27 @@ WebConsoleFrame.prototype = {
    * Cleans up a message via a node that may or may not
    * have actually been rendered in the DOM. Currently, only
    * cleans up React components.
    *
    * @param nsIDOMNode node
    *        The message node you want to clean up.
    */
   unmountMessage(node) {
-    // Select all `.message-location` within this node to ensure we get
-    // messages of stacktraces, which contain multiple location nodes.
-    for (let locationNode of node.querySelectorAll(".message-location")) {
+    // Unmount the Frame component with the message location
+    let locationNode = node.querySelector(".message-location");
+    if (locationNode) {
       this.ReactDOM.unmountComponentAtNode(locationNode);
     }
+
+    // Unmount the StackTrace component if present in the message
+    let stacktraceNode = node.querySelector(".stacktrace");
+    if (stacktraceNode) {
+      this.ReactDOM.unmountComponentAtNode(stacktraceNode);
+    }
   },
 
   /**
    * Ensures that the number of message nodes of type category don't exceed that
    * category's line limit by removing old messages as needed.
    *
    * @param integer category
    *        The category of message nodes to prune if needed.
@@ -2559,36 +2566,35 @@ WebConsoleFrame.prototype = {
    *
    * @param {Object} aLocation
    *        An object containing url, line and column number of the message
    *        source (destructured).
    * @return {Element}
    *         The new anchor element, ready to be added to the message node.
    */
   createLocationNode: function ({url, line, column}) {
+    let locationNode = this.document.createElementNS(XHTML_NS, "div");
+    locationNode.className = "message-location devtools-monospace";
+
     if (!url) {
       url = "";
     }
 
     let fullURL = url.split(" -> ").pop();
-    let locationNode = this.document.createElementNS(XHTML_NS, "a");
-    locationNode.draggable = false;
-    locationNode.className = "message-location devtools-monospace";
-
     // Make the location clickable.
     let onClick = () => {
-      let category = locationNode.parentNode.category;
+      let category = locationNode.closest(".message").category;
       let target = null;
 
-      if (category === CATEGORY_CSS) {
+      if (/^Scratchpad\/\d+$/.test(url)) {
+        target = "scratchpad";
+      } else if (category === CATEGORY_CSS) {
         target = "styleeditor";
       } else if (category === CATEGORY_JS || category === CATEGORY_WEBDEV) {
         target = "jsdebugger";
-      } else if (/^Scratchpad\/\d+$/.test(url)) {
-        target = "scratchpad";
       } else if (/\.js$/.test(fullURL)) {
         // If it ends in .js, let's attempt to open in debugger
         // anyway, as this falls back to normal view-source.
         target = "jsdebugger";
       }
 
       switch (target) {
         case "scratchpad":
@@ -2604,19 +2610,19 @@ WebConsoleFrame.prototype = {
       // No matching tool found; use old school view-source
       this.owner.viewSource(fullURL, line);
     };
 
     this.ReactDOM.render(this.FrameView({
       frame: {
         source: fullURL,
         line,
-        column,
-        showEmptyPathAsHost: true,
+        column
       },
+      showEmptyPathAsHost: true,
       onClick,
     }), locationNode);
 
     return locationNode;
   },
 
   /**
    * Adjusts the category and severity of the given message.

