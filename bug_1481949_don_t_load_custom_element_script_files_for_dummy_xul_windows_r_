# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1538068097 25200
#      Thu Sep 27 10:08:17 2018 -0700
# Node ID 3a0f42902e90dc2745ba4d8e93dfb3fe2ed52ec3
# Parent  ba2b3ed1eb96065af623415366a7729cac877350
Bug 1481949 - Don't load Custom Element script files for dummy.xul windows;r=kmag

They are unnecessary for most every element, and we load multiple dummy.xul
documents even in clean profiles.

Differential Revision: https://phabricator.services.mozilla.com/D7112

diff --git a/toolkit/content/customElements.js b/toolkit/content/customElements.js
--- a/toolkit/content/customElements.js
+++ b/toolkit/content/customElements.js
@@ -3,17 +3,17 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 /* globals MozQueryInterface */
 
 "use strict";
 
 // This is loaded into all XUL windows. Wrap in a block to prevent
 // leaking to window scope.
-{
+(() => {
 
 ChromeUtils.import("resource://gre/modules/Services.jsm");
 ChromeUtils.import("resource://gre/modules/AppConstants.jsm");
 
 const gXULDOMParser = new DOMParser();
 gXULDOMParser.forceEnableXULXBL();
 
 class MozXULElement extends XULElement {
@@ -154,16 +154,23 @@ function getInterfaceProxy(obj) {
   }
 
   return obj._customInterfaceProxy;
 }
 
 // Attach the base class to the window so other scripts can use it:
 window.MozXULElement = MozXULElement;
 
+// For now, don't load any elements in the extension dummy document.
+// We will want to load <browser> when that's migrated (bug 1441935).
+const isDummyDocument = document.documentURI == "chrome://extensions/content/dummy.xul";
+if (isDummyDocument) {
+  return;
+}
+
 for (let script of [
   "chrome://global/content/elements/general.js",
   "chrome://global/content/elements/textbox.js",
   "chrome://global/content/elements/tabbox.js",
 ]) {
   Services.scriptloader.loadSubScript(script, window);
 }
 
@@ -173,9 +180,9 @@ for (let [tag, script] of [
   ["printpreview-toolbar", "chrome://global/content/printPreviewToolbar.js"],
   ["editor", "chrome://global/content/elements/editor.js"],
 ]) {
   customElements.setElementCreationCallback(tag, () => {
     Services.scriptloader.loadSubScript(script, window);
   });
 }
 
-}
+})();
