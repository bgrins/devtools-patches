# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  d32591fc458dde997187b1ed7b03af14d12c2997
Move OSX reftests into layout/reftests

diff --git a/toolkit/themes/osx/reftests/482681-ref.xul b/layout/reftests/osx-theme/482681-ref.xul
rename from toolkit/themes/osx/reftests/482681-ref.xul
rename to layout/reftests/osx-theme/482681-ref.xul
diff --git a/toolkit/themes/osx/reftests/482681.xul b/layout/reftests/osx-theme/482681.xul
rename from toolkit/themes/osx/reftests/482681.xul
rename to layout/reftests/osx-theme/482681.xul
diff --git a/toolkit/themes/osx/reftests/baseline.xul b/layout/reftests/osx-theme/baseline.xul
rename from toolkit/themes/osx/reftests/baseline.xul
rename to layout/reftests/osx-theme/baseline.xul
diff --git a/toolkit/themes/osx/reftests/checkboxsize-ref.xul b/layout/reftests/osx-theme/checkboxsize-ref.xul
rename from toolkit/themes/osx/reftests/checkboxsize-ref.xul
rename to layout/reftests/osx-theme/checkboxsize-ref.xul
diff --git a/toolkit/themes/osx/reftests/checkboxsize.xul b/layout/reftests/osx-theme/checkboxsize.xul
rename from toolkit/themes/osx/reftests/checkboxsize.xul
rename to layout/reftests/osx-theme/checkboxsize.xul
diff --git a/toolkit/themes/osx/reftests/nostretch-ref.xul b/layout/reftests/osx-theme/nostretch-ref.xul
rename from toolkit/themes/osx/reftests/nostretch-ref.xul
rename to layout/reftests/osx-theme/nostretch-ref.xul
diff --git a/toolkit/themes/osx/reftests/nostretch.xul b/layout/reftests/osx-theme/nostretch.xul
rename from toolkit/themes/osx/reftests/nostretch.xul
rename to layout/reftests/osx-theme/nostretch.xul
diff --git a/toolkit/themes/osx/reftests/radiosize-ref.xul b/layout/reftests/osx-theme/radiosize-ref.xul
rename from toolkit/themes/osx/reftests/radiosize-ref.xul
rename to layout/reftests/osx-theme/radiosize-ref.xul
diff --git a/toolkit/themes/osx/reftests/radiosize.xul b/layout/reftests/osx-theme/radiosize.xul
rename from toolkit/themes/osx/reftests/radiosize.xul
rename to layout/reftests/osx-theme/radiosize.xul
diff --git a/toolkit/themes/osx/reftests/reftest.list b/layout/reftests/osx-theme/reftest.list
rename from toolkit/themes/osx/reftests/reftest.list
rename to layout/reftests/osx-theme/reftest.list
--- a/toolkit/themes/osx/reftests/reftest.list
+++ b/layout/reftests/osx-theme/reftest.list
@@ -1,5 +1,5 @@
 skip-if(!cocoaWidget) == 482681.xul 482681-ref.xul
 skip-if(!cocoaWidget) == radiosize.xul radiosize-ref.xul
-skip-if(!cocoaWidget) == checkboxsize.xul checkboxsize-ref.xul
+skip-if(!cocoaWidget) CHROME == chrome://reftest/content/osx-theme/checkboxsize.xul chrome://reftest/content/osx-theme/checkboxsize-ref.xul
 skip-if(!cocoaWidget) == baseline.xul about:blank
 skip-if(!cocoaWidget) == nostretch.xul nostretch-ref.xul
diff --git a/layout/reftests/reftest.list b/layout/reftests/reftest.list
--- a/layout/reftests/reftest.list
+++ b/layout/reftests/reftest.list
@@ -368,17 +368,17 @@ include text-shadow/reftest.list
 
 # text-svgglyphs/
 include text-svgglyphs/reftest.list
 
 # text-transform/
 include text-transform/reftest.list
 
 # theme (osx)
-include ../../toolkit/themes/osx/reftests/reftest.list
+include osx-theme/reftest.list
 
 include ../../toolkit/content/tests/reftests/reftest.list
 
 # -moz-transform/
 # skipping on non-e10s windows because of assertion in bug 1401228
 skip-if(winWidget&&!browserIsRemote) include transform/reftest.list
 
 # 3d transforms
diff --git a/layout/tools/reftest/jar.mn b/layout/tools/reftest/jar.mn
--- a/layout/tools/reftest/jar.mn
+++ b/layout/tools/reftest/jar.mn
@@ -1,11 +1,14 @@
 reftest.jar:
   content/moz-bool-pref.css (../../../layout/reftests/css-parsing/moz-bool-pref.css)
   content/reftest.xul (reftest.xul)
+  content/osx-theme (../../../layout/reftests/osx-theme/*)
+ # content/checkboxsize.xul (../../../layout/reftests/osx-theme/checkboxsize.xul)
+ # content/checkboxsize-ref.xul (../../../layout/reftests/osx-theme/checkboxsize-ref.xul)
 
   res/globals.jsm (globals.jsm)
   res/reftest-content.js (reftest-content.js)
   res/AsyncSpellCheckTestHelper.jsm (../../../editor/AsyncSpellCheckTestHelper.jsm)
   res/httpd.jsm (../../../netwerk/test/httpserver/httpd.js)
   res/StructuredLog.jsm (../../../testing/modules/StructuredLog.jsm)
   res/PerTestCoverageUtils.jsm (../../../tools/code-coverage/PerTestCoverageUtils.jsm)
   res/input.css (../../../editor/reftests/xul/input.css)
diff --git a/layout/tools/reftest/manifest.jsm b/layout/tools/reftest/manifest.jsm
--- a/layout/tools/reftest/manifest.jsm
+++ b/layout/tools/reftest/manifest.jsm
@@ -232,42 +232,47 @@ function ReadManifest(aURL, aFilter)
             }
         }
 
         if (minAsserts > maxAsserts) {
             throw "Bad range in manifest file " + aURL.spec + " line " + lineNo;
         }
 
         var runHttp = false;
+        var runChrome = false;
         var httpDepth;
         if (items[0] == "HTTP") {
             runHttp = (aURL.scheme == "file"); // We can't yet run the local HTTP server
                                                // for non-local reftests.
             httpDepth = 0;
             items.shift();
         } else if (items[0].match(/HTTP\(\.\.(\/\.\.)*\)/)) {
             // Accept HTTP(..), HTTP(../..), HTTP(../../..), etc.
             runHttp = (aURL.scheme == "file"); // We can't yet run the local HTTP server
                                                // for non-local reftests.
             httpDepth = (items[0].length - 5) / 3;
             items.shift();
         }
+        if (items[0] == "CHROME") {
+            console.log("Hi brian", items);
+            runChrome = true;
+            items.shift();
+        }
 
         // do not prefix the url for include commands or urls specifying
         // a protocol
-        if (urlprefix && items[0] != "include") {
+        if (urlprefix && items[0] != "include" && !runChrome) {
             if (items.length > 1 && !items[1].match(RE_PROTOCOL)) {
                 items[1] = urlprefix + items[1];
             }
             if (items.length > 2 && !items[2].match(RE_PROTOCOL)) {
                 items[2] = urlprefix + items[2];
             }
         }
-
-        var principal = secMan.createCodebasePrincipal(aURL, {});
+        var principal = runChrome ? secMan.getSystemPrincipal() : secMan.createCodebasePrincipal(aURL, {});
 
         if (items[0] == "include") {
             if (items.length != 2)
                 throw "Error in manifest file " + aURL.spec + " line " + lineNo + ": incorrect number of arguments to include";
             if (runHttp)
                 throw "Error in manifest file " + aURL.spec + " line " + lineNo + ": use of include with http";
 
             // If the expected_status is EXPECTED_PASS (the default) then allow
@@ -282,16 +287,17 @@ function ReadManifest(aURL, aFilter)
                 g.logger.info("Skipping included manifest at " + aURL.spec + " line " + lineNo + " due to matching skip condition");
             } else {
                 // poor man's assertion
                 if (expected_status != EXPECTED_PASS) {
                     throw "Error in manifest file parsing code: we should never get expected_status=" + expected_status + " when nonSkipUsed=false (from " + aURL.spec + " line " + lineNo + ")";
                 }
 
                 var incURI = g.ioService.newURI(items[1], null, listURL);
+                console.log(incURI.spec, items[1])
                 secMan.checkLoadURIWithPrincipal(principal, incURI,
                                                  Ci.nsIScriptSecurityManager.DISALLOW_SCRIPT);
                 ReadManifest(incURI, aFilter);
             }
         } else if (items[0] == TYPE_LOAD || items[0] == TYPE_SCRIPT) {
             var type = items[0];
             if (items.length != 2)
                 throw "Error in manifest file " + aURL.spec + " line " + lineNo + ": incorrect number of arguments to " + type;
@@ -639,28 +645,29 @@ function ServeTestBase(aURL, depth) {
     return testbase;
 }
 
 function CreateUrls(test) {
     let secMan = Cc[NS_SCRIPTSECURITYMANAGER_CONTRACTID]
                     .getService(Ci.nsIScriptSecurityManager);
 
     let manifestURL = g.ioService.newURI(test.manifest);
-    let principal = secMan.createCodebasePrincipal(manifestURL, {});
+    let principal = secMan.getSystemPrincipal(); //secMan.createCodebasePrincipal(manifestURL, {});
 
     let testbase = manifestURL;
     if (test.runHttp)
         testbase = ServeTestBase(manifestURL, test.httpDepth)
 
     function FileToURI(file)
     {
         if (file === null)
             return file;
 
         var testURI = g.ioService.newURI(file, null, testbase);
+        console.log(testURI.spec)
         secMan.checkLoadURIWithPrincipal(principal, testURI,
                                          Ci.nsIScriptSecurityManager.DISALLOW_SCRIPT);
         return testURI;
     }
 
     let files = [test.url1, test.url2];
     [test.url1, test.url2] = files.map(FileToURI);
 
diff --git a/layout/tools/reftest/reftest-content.js b/layout/tools/reftest/reftest-content.js
--- a/layout/tools/reftest/reftest-content.js
+++ b/layout/tools/reftest/reftest-content.js
@@ -15,16 +15,19 @@ const IO_SERVICE_CONTRACTID = "@mozilla.
 
 // "<!--CLEAR-->"
 const BLANK_URL_FOR_CLEARING = "data:text/html;charset=UTF-8,%3C%21%2D%2DCLEAR%2D%2D%3E";
 
 Cu.import("resource://gre/modules/Timer.jsm");
 Cu.import("resource://reftest/AsyncSpellCheckTestHelper.jsm");
 Cu.import("resource://gre/modules/Services.jsm");
 
+// Load that rely on chrome Custom Elements in chrome documents:
+ChromeUtils.import("resource://gre/modules/CustomElementsListener.jsm", null);
+
 var gBrowserIsRemote;
 var gIsWebRenderEnabled;
 var gHaveCanvasSnapshot = false;
 // Plugin layers can be updated asynchronously, so to make sure that all
 // layer surfaces have the right content, we need to listen for explicit
 // "MozPaintWait" and "MozPaintWaitFinished" events that signal when it's OK
 // to take snapshots. We cannot take a snapshot while the number of
 // "MozPaintWait" events fired exceeds the number of "MozPaintWaitFinished"
diff --git a/layout/tools/reftest/reftest/__init__.py b/layout/tools/reftest/reftest/__init__.py
--- a/layout/tools/reftest/reftest/__init__.py
+++ b/layout/tools/reftest/reftest/__init__.py
@@ -4,16 +4,17 @@
 
 from __future__ import unicode_literals
 
 import os
 import re
 
 RE_COMMENT = re.compile(r'\s+#')
 RE_HTTP = re.compile(r'HTTP\((\.\.(\/\.\.)*)\)')
+RE_CHROME = re.compile(r'CHROME\((\.\.(\/\.\.)*)\)')
 RE_PROTOCOL = re.compile(r'^\w+:')
 FAILURE_TYPES = (
     'fails',
     'fails-if',
     'needs-focus',
     'random',
     'random-if',
     'silentfail',
@@ -88,16 +89,18 @@ class ReftestManifest(object):
                 item = items[i]
 
                 if item.startswith(FAILURE_TYPES):
                     continue
                 if item.startswith(PREF_ITEMS):
                     continue
                 if item == 'HTTP':
                     continue
+                if item == 'CHROME':
+                    continue
 
                 m = RE_HTTP.match(item)
                 if m:
                     # Need to package the referenced directory.
                     self.dirs.add(os.path.normpath(os.path.join(
                         mdir, m.group(1))))
                     continue
 
@@ -121,13 +124,15 @@ class ReftestManifest(object):
                     break
 
             for f in tests:
                 # We can't package about: or data: URIs.
                 # Discarding data isn't correct for a parser. But retaining
                 # all data isn't currently a requirement.
                 if RE_PROTOCOL.match(f):
                     continue
+                if RE_CHROME.match(f):
+                    continue
 
                 test = os.path.normpath(os.path.join(mdir, urlprefix + f))
                 self.files.add(test)
                 self.dirs.add(os.path.dirname(test))
                 self.tests.add((test, normalized_path))
