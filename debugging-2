# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  97ccdf1de76e2d61b38e2d2c1062737d5d43ca28

diff --git a/browser/components/search/content/search.xml b/browser/components/search/content/search.xml
--- a/browser/components/search/content/search.xml
+++ b/browser/components/search/content/search.xml
@@ -984,16 +984,17 @@
           let searchbar = document.getElementById("searchbar");
           searchbar.handleSearchCommandWhere(event, engine, where, params);
         ]]></body>
       </method>
     </implementation>
 
     <handlers>
       <handler event="popupshowing"><![CDATA[
+      console.log("POpupshowing");
         // Force the panel to have the width of the searchbar rather than
         // the width of the textfield.
         let DOMUtils = window.windowUtils;
         let textboxRect = DOMUtils.getBoundsWithoutFlushing(this.mInput);
         let inputRect = DOMUtils.getBoundsWithoutFlushing(this.mInput.inputField);
 
         // Ensure the panel is wide enough to fit at least 3 engines.
         let minWidth = Math.max(textboxRect.width,
@@ -1026,16 +1027,17 @@
           this.richlistbox.collapsed = (this.matchCount == 0);
         }
 
         // Show the current default engine in the top header of the panel.
         this.updateHeader();
       ]]></handler>
 
       <handler event="popuphiding"><![CDATA[
+      console.log("Poppuphiding");
         this._isHiding = true;
         Services.tm.dispatchToMainThread(() => {
           this._isHiding = false;
         });
       ]]></handler>
 
       <!-- This handles clicks on the topmost "Foo Search" header in the
            popup (hbox[anonid="searchbar-engine"]). -->
diff --git a/browser/components/search/content/searchbar.js b/browser/components/search/content/searchbar.js
--- a/browser/components/search/content/searchbar.js
+++ b/browser/components/search/content/searchbar.js
@@ -375,16 +375,17 @@ class MozSearchbar extends MozXULElement
     this.destroy();
     while (this.firstChild) {
       this.firstChild.remove();
     }
   }
 
   _setupEventListeners() {
     this.addEventListener("command", (event) => {
+      console.log("COMMAND!!!");
       const target = event.originalTarget;
       if (target.engine) {
         this.currentEngine = target.engine;
       } else if (target.classList.contains("addengine-item")) {
         // Select the installed engine if the installation succeeds
         var installCallback = {
           onSuccess: engine => this.currentEngine = engine,
         };
@@ -433,39 +434,45 @@ class MozSearchbar extends MozXULElement
       // textbox, that will be taken care of in the click handler.
       if (Services.focus.getLastFocusMethod(window) & Services.focus.FLAG_BYMOUSE)
         return;
 
       this.openSuggestionsPanel();
     }, true);
 
     this.addEventListener("mousedown", (event) => {
-      if (event.originalTarget.classList.contains(".searchbar-search-button")) {
-        this._clickClosedPopup = this._textbox.popup._isHiding;
+      let isIconClick = event.originalTarget.classList.contains("searchbar-search-button");
+      console.log(isIconClick, this._textbox.open, this._textbox.popup.state);
+      if (isIconClick && this._textbox.open) {
+        this._textbox.popup.closePopup();
+        event.preventDefault();
+      } else if (isIconClick || this._textbox.value) {
+        this.openSuggestionsPanel(true);
+        event.preventDefault();
       }
     }, true);
 
-    this.addEventListener("mousedown", (event) => {
-      // Ignore clicks on the search go button.
-      if (event.originalTarget.classList.contains("search-go-button")) {
-        return;
-      }
-
-      let isIconClick = event.originalTarget.classList.contains("searchbar-search-button");
+    // this.addEventListener("mousedown", (event) => {
+    //   // Ignore clicks on the search go button.
+    //   if (event.originalTarget.classList.contains("search-go-button")) {
+    //     return;
+    //   }
 
-      // Ignore clicks on the icon if they were made to close the popup
-      if (isIconClick && this._clickClosedPopup) {
-        return;
-      }
+    //   let isIconClick = event.originalTarget.classList.contains("searchbar-search-button");
+    //   console.log("isIconClick?", isIconClick, this._textbox.popup.state, this._textbox.popup._isHiding);
+    //   if (isIconClick && (this._textbox.popup.state == "open" || this._textbox.popup._isHiding)) {
+    //     this._textbox.popup.closePopup();
+    //     return;
+    //   }
 
-      // Open the suggestions whenever clicking on the search icon or if there
-      // is text in the textbox.
-      if (isIconClick || this._textbox.value) {
-        this.openSuggestionsPanel(true);
-      }
-    });
+    //   // Open the suggestions whenever clicking on the search icon or if there
+    //   // is text in the textbox.
+    //   if (isIconClick || this._textbox.value) {
+    //     this.openSuggestionsPanel(true);
+    //   }
+    // });
 
   }
 }
 
 customElements.define("searchbar", MozSearchbar);
 
 }
diff --git a/browser/components/search/test/browser_searchbar_openpopup.js b/browser/components/search/test/browser_searchbar_openpopup.js
--- a/browser/components/search/test/browser_searchbar_openpopup.js
+++ b/browser/components/search/test/browser_searchbar_openpopup.js
@@ -135,26 +135,27 @@ add_task(async function open_empty() {
 
   let promise = promiseEvent(searchPopup, "popupshown");
   info("Clicking icon");
   EventUtils.synthesizeMouseAtCenter(searchIcon, {});
   await promise;
   is(searchPopup.getAttribute("showonlysettings"), "true", "Should only show the settings");
   is(textbox.mController.searchString, "", "Should be an empty search string");
 
+  await new Promise(r=>setTimeout(r, 5000))
   // By giving the textbox some text any next attempt to open the search popup
   // from the click handler will try to search for this text.
   textbox.value = "foo";
-
+  await new Promise(r=>setTimeout(r, 5000))
   promise = promiseEvent(searchPopup, "popuphidden");
 
   info("Hiding popup");
   await synthesizeNativeMouseClick(searchIcon);
   await promise;
-
+  await new Promise(r=>setTimeout(r, 5000))
   is(textbox.mController.searchString, "", "Should not have started to search for the new text");
 
   // Cancel the search if it started.
   if (textbox.mController.searchString != "") {
     textbox.mController.stopSearch();
   }
 
   textbox.value = "";
