# HG changeset patch
# Parent ccc29f6deb07c209b9cc6246fb3d36bb0cb475c3
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 1098343 - Whitelist devedition prefs to not clear user value when setting to default value

diff --git a/modules/libpref/prefapi.cpp b/modules/libpref/prefapi.cpp
--- a/modules/libpref/prefapi.cpp
+++ b/modules/libpref/prefapi.cpp
@@ -82,16 +82,20 @@ static PLDHashTableOps     pref_HashTabl
     PL_DHashStringKey,
     matchPrefEntry,
     PL_DHashMoveEntryStub,
     clearPrefEntry,
     PL_DHashFinalizeStub,
     nullptr,
 };
 
+#define KEEP_USER_VALUE(key) (\
+    strcmp(key, "browser.devedition.theme.enabled") == 0 || \
+    strcmp(key, "devtools.theme") == 0)
+
 // PR_ALIGN_OF_WORD is only defined on some platforms.  ALIGN_OF_WORD has
 // already been defined to PR_ALIGN_OF_WORD everywhere
 #ifndef PR_ALIGN_OF_WORD
 #define PR_ALIGN_OF_WORD PR_ALIGN_OF_POINTER
 #endif
 
 // making PrefName arena 8k for nice allocation
 #define PREFNAME_ARENA_SIZE 8192
@@ -333,21 +337,27 @@ pref_savePref(PLDHashTable *table, PLDHa
 
     nsAutoCString prefValue;
     nsAutoCString prefPrefix;
     prefPrefix.AssignLiteral("user_pref(\"");
 
     // where we're getting our pref from
     PrefValue* sourcePref;
 
+    // If this is a user set pref and is either:
+    // 1. Different from the default value
+    // 2. Does not have a default value
+    // 2. Part of a whitelisted set
+    // Then get the pref from userPref.
     if (PREF_HAS_USER_VALUE(pref) &&
         (pref_ValueChanged(pref->defaultPref,
                            pref->userPref,
                            (PrefType) PREF_TYPE(pref)) ||
-         !(PREF_HAS_DEFAULT_VALUE(pref)))) {
+         !(PREF_HAS_DEFAULT_VALUE(pref)) ||
+         KEEP_USER_VALUE(pref->key))) {
         sourcePref = &pref->userPref;
     } else {
         if (argData->saveTypes == SAVE_ALL_AND_DEFAULTS) {
             prefPrefix.AssignLiteral("pref(\"");
             sourcePref = &pref->defaultPref;
         }
         else
             // do not save default prefs that haven't changed
@@ -789,17 +799,18 @@ nsresult pref_HashPref(const char *key, 
         }
     }
     else
     {
         /* If new value is same as the default value, then un-set the user value.
            Otherwise, set the user value only if it has changed */
         if ((PREF_HAS_DEFAULT_VALUE(pref)) &&
             !pref_ValueChanged(pref->defaultPref, value, type) &&
-            !(flags & kPrefForceSet))
+            !(flags & kPrefForceSet) &&
+            !KEEP_USER_VALUE(key))
         {
             if (PREF_HAS_USER_VALUE(pref))
             {
                 /* XXX should we free a user-set string value if there is one? */
                 pref->flags &= ~PREF_USERSET;
                 if (!PREF_IS_LOCKED(pref)) {
                     gDirty = true;
                     valueChanged = true;
diff --git a/modules/libpref/test/unit/data/testPref.js b/modules/libpref/test/unit/data/testPref.js
--- a/modules/libpref/test/unit/data/testPref.js
+++ b/modules/libpref/test/unit/data/testPref.js
@@ -1,6 +1,8 @@
 user_pref("testPref.bool1", true);
 user_pref("testPref.bool2", false);
 user_pref("testPref.int1", 23);
 user_pref("testPref.int2", -1236);
 user_pref("testPref.char1", "_testPref");
-user_pref("testPref.char2", "älskar");
\ No newline at end of file
+user_pref("testPref.char2", "älskar");
+user_pref("testPref.char3", "light");
+user_pref("devtools.theme", "light");
\ No newline at end of file
diff --git a/modules/libpref/test/unit/test_libPrefs.js b/modules/libpref/test/unit/test_libPrefs.js
--- a/modules/libpref/test/unit/test_libPrefs.js
+++ b/modules/libpref/test/unit/test_libPrefs.js
@@ -344,16 +344,37 @@ function run_test() {
   do_check_eq(ps.getIntPref("ReadPref.int"), 230);
   do_check_eq(ps.getCharPref("ReadPref.char"), "hello");
 
   // ... and still be able to access "prior-to-readUserPrefs" preferences
   do_check_eq(pb.getBoolPref("bool1"), true);
   do_check_eq(pb.getBoolPref("bool2"), false);
   do_check_eq(pb.getIntPref("int1"), 23);
 
+
+  pb = ps.getBranch("");
+
+  // setting the default value to whitelisted user prefs should
+  // make prefHasUserValue stay true.
+  var defaultThemePref = pb.getCharPref("devtools.theme");
+  pb.setCharPref("devtools.theme", "foobar");
+  do_check_neq(pb.getCharPref("devtools.theme"), defaultThemePref);
+  pb.setCharPref("devtools.theme", defaultThemePref);
+  do_check_true(pb.prefHasUserValue("devtools.theme"));
+
+  // setting the default value to any other pref should
+  // make prefHasUserValue return false.
+  defaultThemePref = pb.getCharPref("testPref.char3");
+  pb.setCharPref("testPref.char3", "foobar");
+  do_check_neq(pb.getCharPref("testPref.char3"), defaultThemePref);
+  pb.setCharPref("testPref.char3", defaultThemePref);
+  //let {console} = Cu.import("resource://gre/modules/devtools/Console.jsm", {});
+  //console.log("Value has been set", defaultThemePref, pb.getCharPref("testPref.char3"));
+  do_check_false(pb.prefHasUserValue("testPref.char3"));
+
   //**************************************************************************//
   // preference Observers
 
   // an observer...
   var observer = {
     QueryInterface: function QueryInterface(aIID) {
       if (aIID.equals(Ci.nsIObserver) ||
           aIID.equals(Ci.nsISupports))
