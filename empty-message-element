# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  88e397a5cc15bb4db0698665191c2992e407a1d1

diff --git a/toolkit/content/widgets/menu.js b/toolkit/content/widgets/menu.js
--- a/toolkit/content/widgets/menu.js
+++ b/toolkit/content/widgets/menu.js
@@ -55,145 +55,145 @@ class MozMenuItemBase extends MozElement
     }
     return null;
   }
 }
 
 MozXULElement.implementCustomInterface(MozMenuItemBase, [Ci.nsIDOMXULSelectControlItemElement, Ci.nsIDOMXULContainerItemElement]);
 
 class MozMenuItem extends MozMenuItemBase {
-  static get observedAttributes() {
-    return ["label", "crop", "accesskey", "highlightable"];
-  }
+  // static get observedAttributes() {
+  //   return ["label", "crop", "accesskey", "highlightable"];
+  // }
 
-  attributeChangedCallback(name, oldValue, newValue) {
-    if (oldValue === newValue) {
-      return;
-    }
+  // attributeChangedCallback(name, oldValue, newValue) {
+  //   if (oldValue === newValue) {
+  //     return;
+  //   }
+
+  //   this._updateAttributes();
+  // }
 
-    this._updateAttributes();
-  }
+  // // get isInsideOpenPopup() {
+  // //   for (let popup of openPopups) {
+  // //     if (popup.contains(this)) {
+  // //       return true;
+  // //     }
+  // //   }
+  // //   return false;
+  // // }
 
-  // get isInsideOpenPopup() {
-  //   for (let popup of openPopups) {
-  //     if (popup.contains(this)) {
-  //       return true;
-  //     }
+  // connectedCallback() {
+  //   // We typically don't want to eagerly render (instead wait for the
+  //   // popup to be shown). But if this is selected, we'll want it to render
+  //   // so the preview text shows properly in the menulist.
+  //   // XXX: why? this can be seen on the font size dropdown on about:preferences
+  //   // if (!this.isInsideOpenPopup) {
+  //   //   return;
+  //   // }
+
+  //   if (this.delayConnectedCallback()) {
+  //     return;
   //   }
-  //   return false;
+
+  //   this.render();
   // }
 
-  connectedCallback() {
-    // We typically don't want to eagerly render (instead wait for the
-    // popup to be shown). But if this is selected, we'll want it to render
-    // so the preview text shows properly in the menulist.
-    // XXX: why? this can be seen on the font size dropdown on about:preferences
-    // if (!this.isInsideOpenPopup) {
-    //   return;
-    // }
+  // _updateAttributes() {
+  //   if (!this.renderedOnce) {
+  //     return;
+  //   }
 
-    if (this.delayConnectedCallback()) {
-      return;
-    }
+  //   if (this.menuText) {
+  //     this.inheritAttribute(this.menuText, "value=label");
+  //     this.inheritAttribute(this.menuText, "crop");
+  //     this.inheritAttribute(this.menuText, "accesskey");
+  //     this.inheritAttribute(this.menuText, "highlightable");
+  //   }
 
-    this.render();
-  }
+  //   if (this.menuHighlightableText) {
+  //     this.inheritAttribute(this.menuHighlightableText, "text=label");
+  //     this.inheritAttribute(this.menuHighlightableText, "crop");
+  //     this.inheritAttribute(this.menuHighlightableText, "accesskey");
+  //     this.inheritAttribute(this.menuHighlightableText, "highlightable");
+  //   }
 
-  _updateAttributes() {
-    if (!this.renderedOnce) {
-      return;
-    }
+  //   if (this.menuAccel) {
+  //     this.inheritAttribute(this.menuAccel, "value=acceltext");
+  //   }
 
-    if (this.menuText) {
-      this.inheritAttribute(this.menuText, "value=label");
-      this.inheritAttribute(this.menuText, "crop");
-      this.inheritAttribute(this.menuText, "accesskey");
-      this.inheritAttribute(this.menuText, "highlightable");
-    }
-
-    if (this.menuHighlightableText) {
-      this.inheritAttribute(this.menuHighlightableText, "text=label");
-      this.inheritAttribute(this.menuHighlightableText, "crop");
-      this.inheritAttribute(this.menuHighlightableText, "accesskey");
-      this.inheritAttribute(this.menuHighlightableText, "highlightable");
-    }
+  //   if (this.menuIconContainer) {
+  //     this.inheritAttribute(this.menuIconContainer, "selected");
+  //     // XXX: is this safe for both variations?
+  //     this.inheritAttribute(this.menuIconContainer, "_moz-menuactive");
+  //     this.inheritAttribute(this.menuIconContainer, "disabled");
+  //     this.inheritAttribute(this.menuIconContainer, "checked");
+  //   }
 
-    if (this.menuAccel) {
-      this.inheritAttribute(this.menuAccel, "value=acceltext");
-    }
+  //   if (this.menuIcon) {
+  //     this.inheritAttribute(this.menuIcon, "image", "src");
+  //     this.inheritAttribute(this.menuIcon, "validate");
+  //     this.inheritAttribute(this.menuIcon, "triggeringprincipal=iconloadingprincipal");
+  //   }
+  // }
 
-    if (this.menuIconContainer) {
-      this.inheritAttribute(this.menuIconContainer, "selected");
-      // XXX: is this safe for both variations?
-      this.inheritAttribute(this.menuIconContainer, "_moz-menuactive");
-      this.inheritAttribute(this.menuIconContainer, "disabled");
-      this.inheritAttribute(this.menuIconContainer, "checked");
-    }
+  // get isIconic() {
+  //   return this.matches(`menuitem[type="checkbox"], menuitem[type="radio"], menuitem.menuitem-iconic`);
+  // }
 
-    if (this.menuIcon) {
-      this.inheritAttribute(this.menuIcon, "image", "src");
-      this.inheritAttribute(this.menuIcon, "validate");
-      this.inheritAttribute(this.menuIcon, "triggeringprincipal=iconloadingprincipal");
-    }
-  }
+  // get isIconicNoAccel() {
+  //   return this.matches("menulist > menupopup > menuitem");
+  // }
 
-  get isIconic() {
-    return this.matches(`menuitem[type="checkbox"], menuitem[type="radio"], menuitem.menuitem-iconic`);
-  }
-
-  get isIconicNoAccel() {
-    return this.matches("menulist > menupopup > menuitem");
-  }
+  // render() {
+  //   if (this.renderedOnce) {
+  //     return;
+  //   }
+  //   this.renderedOnce = true;
+  //   // Add role="none" on all DOM
+  //   // XXX remove this line: https://searchfox.org/mozilla-central/rev/c43240cef5829b8a2dec118faff8a5e1fec6ae1b/accessible/xul/XULMenuAccessible.cpp#41
+  //   if (this.isIconicNoAccel) {
+  //     this.append(MozXULElement.parseXULToFragment(`
+  //       <hbox class="menu-iconic-left" align="center" pack="center" role="none">
+  //         <image class="menu-iconic-icon" role="none"/>
+  //       </hbox>
+  //       <label class="menu-iconic-text" flex="1" crop="right" role="none"/>
+  //       <label class="menu-iconic-highlightable-text" crop="right" role="none"/>
+  //     `));
+  //     this.menuText = this.querySelector(".menu-iconic-text");
+  //     this.menuIconContainer = this.querySelector(".menu-iconic-left");
+  //     this.menuIcon = this.querySelector(".menu-iconic-icon");
+  //     this.menuHighlightableText = this.querySelector(".menu-iconic-highlightable-text");
+  //   } else if (this.isIconic) {
+  //     this.prepend(MozXULElement.parseXULToFragment(`
+  //       <hbox class="menu-iconic-left" align="center" pack="center" role="none">
+  //         <image class="menu-iconic-icon" role="none"/>
+  //       </hbox>
+  //       <label class="menu-iconic-text" flex="1" crop="right" role="none"/>
+  //       <label class="menu-iconic-highlightable-text" crop="right" role="none"/>
+  //     `));
+  //     this.append(MozXULElement.parseXULToFragment(`
+  //       <hbox class="menu-accel-container" role="none">
+  //         <label class="menu-iconic-accel" role="none"/>
+  //       </hbox>
+  //     `));
+  //     this.menuText = this.querySelector(".menu-iconic-text");
+  //     this.menuHighlightableText = this.querySelector(".menu-iconic-highlightable-text");
+  //     this.menuAccel = this.querySelector(".menu-iconic-accel");
+  //     this.menuIconContainer = this.querySelector(".menu-iconic-left");
+  //     this.menuIcon = this.querySelector(".menu-iconic-icon");
+  //   } else {
+  //     this.append(MozXULElement.parseXULToFragment(`
+  //       <label class="menu-text" crop="right" role="none"/>
+  //       <hbox class="menu-accel-container" role="none">
+  //         <label class="menu-accel" role="none"/>
+  //       </hbox>
+  //     `));
+  //     this.menuText = this.querySelector(".menu-text");
+  //     this.menuAccel = this.querySelector(".menu-accel");
+  //   }
 
-  render() {
-    if (this.renderedOnce) {
-      return;
-    }
-    this.renderedOnce = true;
-    // Add role="none" on all DOM
-    // XXX remove this line: https://searchfox.org/mozilla-central/rev/c43240cef5829b8a2dec118faff8a5e1fec6ae1b/accessible/xul/XULMenuAccessible.cpp#41
-    if (this.isIconicNoAccel) {
-      this.append(MozXULElement.parseXULToFragment(`
-        <hbox class="menu-iconic-left" align="center" pack="center" role="none">
-          <image class="menu-iconic-icon" role="none"/>
-        </hbox>
-        <label class="menu-iconic-text" flex="1" crop="right" role="none"/>
-        <label class="menu-iconic-highlightable-text" crop="right" role="none"/>
-      `));
-      this.menuText = this.querySelector(".menu-iconic-text");
-      this.menuIconContainer = this.querySelector(".menu-iconic-left");
-      this.menuIcon = this.querySelector(".menu-iconic-icon");
-      this.menuHighlightableText = this.querySelector(".menu-iconic-highlightable-text");
-    } else if (this.isIconic) {
-      this.prepend(MozXULElement.parseXULToFragment(`
-        <hbox class="menu-iconic-left" align="center" pack="center" role="none">
-          <image class="menu-iconic-icon" role="none"/>
-        </hbox>
-        <label class="menu-iconic-text" flex="1" crop="right" role="none"/>
-        <label class="menu-iconic-highlightable-text" crop="right" role="none"/>
-      `));
-      this.append(MozXULElement.parseXULToFragment(`
-        <hbox class="menu-accel-container" role="none">
-          <label class="menu-iconic-accel" role="none"/>
-        </hbox>
-      `));
-      this.menuText = this.querySelector(".menu-iconic-text");
-      this.menuHighlightableText = this.querySelector(".menu-iconic-highlightable-text");
-      this.menuAccel = this.querySelector(".menu-iconic-accel");
-      this.menuIconContainer = this.querySelector(".menu-iconic-left");
-      this.menuIcon = this.querySelector(".menu-iconic-icon");
-    } else {
-      this.append(MozXULElement.parseXULToFragment(`
-        <label class="menu-text" crop="right" role="none"/>
-        <hbox class="menu-accel-container" role="none">
-          <label class="menu-accel" role="none"/>
-        </hbox>
-      `));
-      this.menuText = this.querySelector(".menu-text");
-      this.menuAccel = this.querySelector(".menu-accel");
-    }
-
-    this._updateAttributes();
-  }
+  //   this._updateAttributes();
+  // }
 }
 
 customElements.define("menuitem", MozMenuItem);
 }
