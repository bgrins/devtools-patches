# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  130bb81b5f4f9c98ba138ab5593148537dd77b57
Bug 1463669 - Enable syntax highlighting of input in the console output when possible;r=nchevobbe

When you enter JS into the console, we can now syntax highlight it in
the output when CodeMirror is enabled.

Differential Revision: https://phabricator.services.mozilla.com/D3842

diff --git a/devtools/client/webconsole/components/message-types/ConsoleCommand.js b/devtools/client/webconsole/components/message-types/ConsoleCommand.js
--- a/devtools/client/webconsole/components/message-types/ConsoleCommand.js
+++ b/devtools/client/webconsole/components/message-types/ConsoleCommand.js
@@ -2,17 +2,17 @@
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 // React & Redux
-const { createFactory } = require("devtools/client/shared/vendor/react");
+const { createElement, createFactory } = require("devtools/client/shared/vendor/react");
 const PropTypes = require("devtools/client/shared/vendor/react-prop-types");
 const Message = createFactory(require("devtools/client/webconsole/components/Message"));
 
 ConsoleCommand.displayName = "ConsoleCommand";
 
 ConsoleCommand.propTypes = {
   message: PropTypes.object.isRequired,
   timestampsVisible: PropTypes.bool.isRequired,
@@ -29,19 +29,22 @@ function ConsoleCommand(props) {
     serviceContainer,
   } = props;
 
   const {
     indent,
     source,
     type,
     level,
-    messageText: messageBody,
+    messageText,
   } = message;
 
+  // This uses a Custom Element to syntax highlight when possible. If it's not
+  // (no CodeMirror editor), then it will just render text.
+  const messageBody = createElement("syntax-highlighted", null, messageText);
   return Message({
     source,
     type,
     level,
     topLevelClasses: [],
     messageBody,
     serviceContainer,
     indent,
diff --git a/devtools/client/webconsole/test/mochitest/browser.ini b/devtools/client/webconsole/test/mochitest/browser.ini
--- a/devtools/client/webconsole/test/mochitest/browser.ini
+++ b/devtools/client/webconsole/test/mochitest/browser.ini
@@ -229,16 +229,17 @@ skip-if = os != 'mac' # The tested ctrl+
 [browser_jsterm_popup_close_on_tab_switch.js]
 [browser_jsterm_screenshot_command_clipboard.js]
 subsuite = clipboard
 [browser_jsterm_screenshot_command_user.js]
 subsuite = clipboard
 [browser_jsterm_screenshot_command_file.js]
 [browser_jsterm_selfxss.js]
 subsuite = clipboard
+[browser_jsterm_syntax_highlight_output.js]
 [browser_webconsole_allow_mixedcontent_securityerrors.js]
 tags = mcb
 [browser_webconsole_batching.js]
 [browser_webconsole_block_mixedcontent_securityerrors.js]
 tags = mcb
 [browser_webconsole_cached_messages.js]
 [browser_webconsole_cd_iframe.js]
 [browser_webconsole_certificate_messages.js]
diff --git a/devtools/client/webconsole/test/mochitest/browser_jsterm_syntax_highlight_output.js b/devtools/client/webconsole/test/mochitest/browser_jsterm_syntax_highlight_output.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/test/mochitest/browser_jsterm_syntax_highlight_output.js
@@ -0,0 +1,40 @@
+/* Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+const TEST_URI =
+  "data:text/html;charset=utf-8,Test syntax highlighted output";
+
+add_task(async function() {
+  // Only run this test with the CodeMirror-powered jsterm.
+  await pushPref("devtools.webconsole.jsterm.codeMirror", true);
+  await performTests();
+
+  await pushPref("devtools.webconsole.jsterm.codeMirror", false);
+  await performTests();
+});
+
+async function performTests() {
+  const hud = await openNewTabAndConsole(TEST_URI);
+  const jsterm = hud.jsterm;
+
+  // Syntax highlighting is implemented with a Custom Element:
+  ok(hud.iframeWindow.customElements.get("syntax-highlighted"));
+
+  // Check that we syntax highlight output to look like the inputed text.
+  // See Bug 1463669.
+  const onMessage = waitForMessage(hud, `var a = 'str';`);
+  jsterm.execute("var a = 'str';");
+  const message = await onMessage;
+  const highlighted = message.node.querySelectorAll("syntax-highlighted");
+  let expectedMarkup;
+  if (Services.prefs.getBoolPref("devtools.webconsole.jsterm.codeMirror")) {
+    /* eslint-disable-next-line max-len */
+    expectedMarkup = `<syntax-highlighted class="cm-s-mozilla"><span class="cm-keyword">var</span> <span class="cm-def">a</span> <span class="cm-operator">=</span> <span class="cm-string">'str'</span>;</syntax-highlighted>`;
+  } else {
+    expectedMarkup = `<syntax-highlighted>var a = 'str';</syntax-highlighted>`;
+  }
+  is(highlighted.length, 1, "1 syntax highlighted tag");
+  is(highlighted[0].outerHTML, expectedMarkup, "got expected html");
+}
diff --git a/devtools/client/webconsole/webconsole-frame.js b/devtools/client/webconsole/webconsole-frame.js
--- a/devtools/client/webconsole/webconsole-frame.js
+++ b/devtools/client/webconsole/webconsole-frame.js
@@ -240,24 +240,49 @@ WebConsoleFrame.prototype = {
     const Wrapper = this.owner.WebConsoleOutputWrapper || this.window.WebConsoleOutput;
     this.consoleOutput =
       new Wrapper(this.outputNode, this, toolbox, this.owner, this.document);
     // Toggle the timestamp on preference change
     Services.prefs.addObserver(PREF_MESSAGE_TIMESTAMP, this._onToolboxPrefChanged);
     this._onToolboxPrefChanged();
 
     this._initShortcuts();
+    this._initOutputSyntaxHighlighting();
 
     if (toolbox) {
       toolbox.on("webconsole-selected", this._onPanelSelected);
       toolbox.on("split-console", this._onChangeSplitConsoleState);
       toolbox.on("select", this._onChangeSplitConsoleState);
     }
   },
 
+  _initOutputSyntaxHighlighting: function() {
+    // Given a DOM node, we syntax highlight identically to how the input field
+    // looks. See https://codemirror.net/demo/runmode.html;
+    const syntaxHighlightNode = node => {
+      const editor = this.jsterm && this.jsterm.editor;
+      if (node && editor) {
+        node.classList.add("cm-s-mozilla");
+        editor.CodeMirror.runMode(node.textContent, "application/javascript", node);
+      }
+    };
+
+    // Use a Custom Element to handle syntax highlighting to avoid
+    // dealing with refs or innerHTML from React.
+    const win = this.window;
+    win.customElements.define("syntax-highlighted", class extends win.HTMLElement {
+      connectedCallback() {
+        if (!this.connected) {
+          this.connected = true;
+          syntaxHighlightNode(this);
+        }
+      }
+    });
+  },
+
   _initShortcuts: function() {
     const shortcuts = new KeyShortcuts({
       window: this.window
     });
 
     shortcuts.on(l10n.getStr("webconsole.find.key"),
                  event => {
                    this.filterBox.focus();
