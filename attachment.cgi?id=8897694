# HG changeset patch
# User Gabriel Luong <gabriel.luong@gmail.com>
# Parent  8952e482fe952afdf886c0ddbaefe63e5b2b4d93

diff --git a/devtools/client/inspector/fonts/components/App.js b/devtools/client/inspector/fonts/components/App.js
--- a/devtools/client/inspector/fonts/components/App.js
+++ b/devtools/client/inspector/fonts/components/App.js
@@ -71,14 +71,22 @@ const App = createClass({
             id: "font-showall",
             className: "theme-link",
             title: getStr("fontinspector.seeAll.tooltip"),
             onClick: onShowAllFont,
           },
           getStr("fontinspector.seeAll")
         )
       ),
-      FontList({ fonts })
+      fonts.length ?
+        FontList({ fonts })
+        :
+        dom.div(
+          {
+            className: "devtools-sidepanel-no-result"
+          },
+          getStr("fontinspector.noFontsOnSelectedElement")
+        )
     );
   }
 });
 
 module.exports = connect(state => state)(App);
diff --git a/devtools/client/inspector/fonts/fonts.js b/devtools/client/inspector/fonts/fonts.js
--- a/devtools/client/inspector/fonts/fonts.js
+++ b/devtools/client/inspector/fonts/fonts.js
@@ -132,34 +132,35 @@ FontInspector.prototype = {
    */
   onShowAllFont() {
     this.store.dispatch(updateShowAllFonts(true));
     this.update();
   },
 
   update: Task.async(function* () {
     let node = this.inspector.selection.nodeFront;
+    let fonts = [];
 
     if (!node ||
         !this.isPanelVisible() ||
         !this.inspector.selection.isConnected() ||
         !this.inspector.selection.isElementNode()) {
+      this.store.dispatch(updateFonts(fonts));
       return;
     }
 
     let { fontOptions } = this.store.getState();
     let { showAllFonts, previewText } = fontOptions;
 
     let options = {
       includePreviews: true,
       previewText,
       previewFillStyle: getColor("body-color")
     };
 
-    let fonts = [];
     if (showAllFonts) {
       fonts = yield this.pageStyle.getAllUsedFontFaces(options)
                       .catch(console.error);
     } else {
       fonts = yield this.pageStyle.getUsedFontFaces(node, options)
                       .catch(console.error);
     }
 
diff --git a/devtools/client/locales/en-US/font-inspector.properties b/devtools/client/locales/en-US/font-inspector.properties
--- a/devtools/client/locales/en-US/font-inspector.properties
+++ b/devtools/client/locales/en-US/font-inspector.properties
@@ -19,11 +19,15 @@ fontinspector.usedAs=Used as:
 # LOCALIZATION NOTE (fontinspector.system) This label indicates that the font is a local
 # system font.
 fontinspector.system=system
 
 # LOCALIZATION NOTE (fontinspector.remote) This label indicates that the font is a remote
 # font.
 fontinspector.remote=remote
 
-# LOCALIZATION NOTE (previewHint):
+# LOCALIZATION NOTE (fontinspector.previewHint):
 # This is the label shown as the placeholder in font inspector preview text box.
 fontinspector.previewText=Preview Text
+
+# LOCALIZATION NOTE (fontinspector.noFontsOnSelectedElement): This label is shown when
+# no fonts found on the selected element.
+fontinspector.noFontsOnSelectedElement=No fonts were found for the current element.
