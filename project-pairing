# HG changeset patch
# Parent 42250fd7fb3c85b0e27ea08ed90d1b426ce94bac
# User Brian Grinstead <bgrinstead@mozilla.com>
pairing with project editor

diff --git a/browser/devtools/projecteditor/chrome/content/projecteditor-loader.js b/browser/devtools/projecteditor/chrome/content/projecteditor-loader.js
--- a/browser/devtools/projecteditor/chrome/content/projecteditor-loader.js
+++ b/browser/devtools/projecteditor/chrome/content/projecteditor-loader.js
@@ -1,19 +1,22 @@
 const Cu = Components.utils;
 const {devtools} = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
 const {FileUtils} = Cu.import("resource://gre/modules/FileUtils.jsm", {});
 const {NetUtil} = Cu.import("resource://gre/modules/NetUtil.jsm", {});
 const require = devtools.require;
 const promise = require("projecteditor/helpers/promise");
 const ProjectEditor = require("projecteditor/projecteditor");
+const TargetFactory = require("devtools/framework/target").TargetFactory;
+const tabs = require("sdk/tabs");
+Cu.import("resource://gre/modules/Services.jsm");
+
 
 const SAMPLE_PATH = buildTempDirectoryStructure();
 const SAMPLE_NAME = "DevTools Content Application Name";
-const SAMPLE_PROJECT_URL = "http://mozilla.org";
 const SAMPLE_ICON = "chrome://browser/skin/devtools/tool-debugger.svg";
 
 /**
  * Create a workspace for working on projecteditor, available at
  * chrome://browser/content/devtools/projecteditor-loader.xul.
  * This emulates the integration points that the app manager uses.
  */
 document.addEventListener("DOMContentLoaded", function onDOMReady(e) {
@@ -47,25 +50,39 @@ document.addEventListener("DOMContentLoa
   });
   projecteditor.on("onEditorCursorActivity", (editor) => {
     console.log("editor cursor activity: " + editor);
   });
   projecteditor.on("onCommand", (cmd) => {
     console.log("Command: " + cmd);
   });
 
+
+  let topWindow = Services.wm.getMostRecentWindow("navigator:browser");
+  let gBrowser = topWindow.gBrowser;
+
+console.log(gBrowser.mCurrentTab);
   projecteditor.loaded.then(() => {
     projecteditor.setProjectToAppPath(SAMPLE_PATH, {
       name: SAMPLE_NAME,
       iconUrl: SAMPLE_ICON,
-      projectOverviewURL: SAMPLE_PROJECT_URL,
+      projectOverviewURL: "file://" + FileUtils.getFile("TmpD", ["ProjectEditor", "index.html"]).path,
       validationStatus: "valid"
     }).then(() => {
+      let root = projecteditor.project.allResources()[0];
+      let win = projecteditor.editorFor(root).iframe.contentWindow;
       let allResources = projecteditor.project.allResources();
-      console.log("All resources have been loaded", allResources, allResources.map(r=>r.basename).join("|"));
+      let tab = gBrowser.mCurrentTab;
+      let target =  TargetFactory.forTab(tab);
+      target.makeRemote().then(() => {
+        console.log("Making remote", target);
+        projecteditor.setTarget(target, win);
+      });
+
+      console.log("All resources have been loaded", allResources.map(r=>r.basename).join("|"));
     });
 
   });
 
 }, false);
 
 /**
  * Build a temporary directory as a workspace for this loader
@@ -87,21 +104,44 @@ function buildTempDirectoryStructure() {
 
   let htmlFile = FileUtils.getFile("TmpD", ["ProjectEditor", "index.html"]);
   htmlFile.createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
   writeToFile(htmlFile, [
     '<!DOCTYPE html>',
     '<html lang="en">',
     ' <head>',
     '   <meta charset="utf-8" />',
-    '   <title>ProjectEditor Temp File</title>',
-    '   <link rel="stylesheet" href="style.css" />',
+    '   <title>ProjectEditor Home Page</title>',
+    '   <link rel="stylesheet" href="css/styles.css" />',
     ' </head>',
     ' <body id="home">',
-    '   <p>ProjectEditor Temp File</p>',
+    '   <p>ProjectEditor Home Page</p>',
+    '   <button onclick="window.location.reload()">Reload Page</button>',
+    '   <a href="sample.html">Navigate to sample.html</a>',
+    ' </body>',
+    '</html>'].join("\n")
+  );
+
+  let htmlFile2 = FileUtils.getFile("TmpD", ["ProjectEditor", "sample.html"]);
+  htmlFile2.createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
+  writeToFile(htmlFile2, [
+    '<!DOCTYPE html>',
+    '<html lang="en">',
+    ' <head>',
+    '   <meta charset="utf-8" />',
+    '   <title>ProjectEditor Sample Page</title>',
+    '   <link rel="stylesheet" href="css/styles.css" />',
+    '   <style type="text/css">',
+    '   body { background: #ccf; }',
+    '   </style>',
+    ' </head>',
+    ' <body id="home">',
+    '   <p>ProjectEditor Sample Page</p>',
+    '   <button onclick="window.location.reload()">Reload Page</button>',
+    '   <a href="index.html">Navigate to index.html</a>',
     ' </body>',
     '</html>'].join("\n")
   );
 
   let readmeFile = FileUtils.getFile("TmpD", ["ProjectEditor", "README.md"]);
   readmeFile.createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
   writeToFile(readmeFile, [
     '## Readme'
@@ -116,17 +156,20 @@ function buildTempDirectoryStructure() {
    ' * file, You can obtain one at http://mozilla.org/MPL/2.0/. */'
     ].join("\n")
   );
 
   let cssFile = FileUtils.getFile("TmpD", ["ProjectEditor", "css", "styles.css"]);
   cssFile.createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
   writeToFile(cssFile, [
     'body {',
-    ' background: red;',
+    '  background: #fee;',
+    '}',
+    'p {',
+    '  padding: 10px',
     '}'
     ].join("\n")
   );
 
   FileUtils.getFile("TmpD", ["ProjectEditor", "js", "script.js"]).createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
 
   FileUtils.getFile("TmpD", ["ProjectEditor", "img", "fake.png"]).createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
   FileUtils.getFile("TmpD", ["ProjectEditor", "img", "icons", "16x16.png"]).createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
diff --git a/browser/devtools/projecteditor/lib/editors.js b/browser/devtools/projecteditor/lib/editors.js
--- a/browser/devtools/projecteditor/lib/editors.js
+++ b/browser/devtools/projecteditor/lib/editors.js
@@ -142,20 +142,20 @@ var TextEditor = Class({
       lineNumbers: true,
       extraKeys: this.extraKeys,
       themeSwitching: false,
       autocomplete: true
     });
 
     // Trigger editor specific events on `this`
     this.editor.on("change", (...args) => {
-      this.emit("change", ...args);
+      this.emit("change", this.editor.getText());
     });
     this.editor.on("cursorActivity", (...args) => {
-      this.emit("cursorActivity", ...args);
+      this.emit("cursorActivity", this.editor.getText());
     });
 
     this.appended = this.editor.appendTo(this.elt);
     this.appended.then(() => {
       if (this.editor) {
         this.editor.setupAutoCompletion();
       }
     });
@@ -197,19 +197,20 @@ var TextEditor = Class({
    *
    * @param Resource resource
    *        The single file / item to be saved
    * @returns Promise
    *          A promise that is resolved once the resource has been
    *          saved.
    */
   save: function(resource) {
-    return resource.save(this.editor.getText()).then(() => {
+    let text = this.editor.getText();
+    return resource.save(text).then(() => {
       this.editor.setClean();
-      this.emit("save", resource);
+      this.emit("save", text);
     });
   },
 
   /**
    * Give focus to the code editor.
    *
    * @returns Promise
    *          A promise that is resolved once the editor has been focused.
diff --git a/browser/devtools/projecteditor/lib/plugins/pairing/page-asset.js b/browser/devtools/projecteditor/lib/plugins/pairing/page-asset.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/projecteditor/lib/plugins/pairing/page-asset.js
@@ -0,0 +1,56 @@
+/* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const { Class } = require("sdk/core/heritage");
+const { emit } = require("sdk/event/core");
+const { EventTarget } = require("sdk/event/target");
+const { on, off, forget } = require("projecteditor/helpers/event");
+
+// Maintains the list of pairs.
+var PageAsset = Class({
+  initialize: function(front) {
+    this.front = front;
+  },
+
+  get isStyleSheet () {
+    return this.front.typeName === "stylesheet" || this.front.typeName === "old-stylesheet"
+  },
+
+  get href () {
+    let path = null;
+    if (this.isStyleSheet) {
+      path = this.front.href;
+    }
+    return path;
+  },
+
+  get basename () {
+    let splitHref = this.href.split('/')
+    let basename = splitHref[splitHref.length - 1];
+
+    return basename;
+  },
+
+  update: function(text) {
+
+    if (this.isStyleSheet) {
+      this.front.update(text, false);
+    }
+  },
+
+  belongsToWindow: function(window) {
+    if (this.isStyleSheet) {
+      let location = window.location.toString();
+      if (this.front.nodeHref !== location) {
+        return false;
+      }
+    }
+    return true;
+  }
+});
+
+exports.PageAsset = PageAsset;
diff --git a/browser/devtools/projecteditor/lib/plugins/pairing/pairing.js b/browser/devtools/projecteditor/lib/plugins/pairing/pairing.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/projecteditor/lib/plugins/pairing/pairing.js
@@ -0,0 +1,118 @@
+/* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const { Class } = require("sdk/core/heritage");
+const { registerPlugin, Plugin } = require("projecteditor/plugins/core");
+const { getStyleSheetsFront } = require("devtools/server/actors/stylesheets");
+const { getStyleEditorFront } = require("devtools/server/actors/styleeditor");
+const { CssLogic } = require("devtools/styleinspector/css-logic");
+const { ResourceMap } = require("projecteditor/plugins/pairing/resource-map");
+
+// Handles the new command.
+var Pairing = Class({
+  extends: Plugin,
+
+  init: function() {
+    this._onWillNavigate = this._onWillNavigate.bind(this);
+    this._onNavigate = this._onNavigate.bind(this);
+    this.resourceMap = new ResourceMap(this.host);
+  },
+
+  onAnnotate: function(resource, editor, elt) {
+    let assets = this.resourceMap.getPageAssetsForResource(resource);
+    if (assets && assets.length) {
+      elt.classList.add("plugin-paired");
+    } else {
+      elt.classList.remove("plugin-paired");
+    }
+  },
+
+  onEditorSave: function(host, resource, text) {
+    this.updatePageAssetsForResource(resource, text);
+  },
+  onEditorChange: function(host, resource, text) {
+    this.updatePageAssetsForResource(resource, text);
+  },
+  updatePageAssetsForResource: function (resource, text) {
+    let assets = this.resourceMap.getPageAssetsForResource(resource);
+    if (assets) {
+      assets.forEach(asset => {
+        asset.update(text, false);
+      });
+    }
+  },
+
+  get target() {
+    return this.host.target;
+  },
+
+  get targetWin() {
+    return this.host.targetWin;
+  },
+
+  newTarget: function(target) {
+
+    if (this.target.form.styleSheetsActor) {
+      this.debuggee = getStyleSheetsFront(this.target.client, this.target.form);
+    } else {
+      this.debuggee = getStyleEditorFront(this.target.client, this.target.form);
+    }
+
+    this.fetchStyleSheets(target);
+  },
+
+  fetchStyleSheets: function(target) {
+    if (!target) {
+      target = this.target;
+    }
+
+    this.debuggee.getStyleSheets().then(styleSheets => {
+      if (this.target !== target) {
+        return;
+      }
+
+      this.resourceMap.setSheets(styleSheets);
+
+      this.host.refreshResourceTree();
+      this.target.on("will-navigate", this._onWillNavigate);
+      this.target.on("navigate", this._onNavigate);
+    }).then(null, console.error);
+  },
+
+  _onWillNavigate: function() {
+    console.log("Pairing: _onWillNavigate");
+    this.resourceMap.clear();
+    this.host.refreshResourceTree();
+  },
+
+  _onNavigate: function() {
+    console.log("Pairing: _onNavigate");
+    this.fetchStyleSheets();
+  },
+
+  removeTarget: function(target) {
+    this.resourceMap.clear();
+    this.host.refreshResourceTree();
+
+    if (this.debuggee) {
+      this.debuggee.destroy();
+    }
+
+    if (this.target) {
+      this.target.off("will-navigate", this._onStyleSheetsCleared);
+      this.target.off("navigate", this._onNavigate);
+    }
+  },
+
+  destroy: function() {
+    this.removeTarget();
+    this.resourceMap.destroy();
+  }
+});
+
+registerPlugin(Pairing);
+exports.Pairing = Pairing;
diff --git a/browser/devtools/projecteditor/lib/plugins/pairing/resource-map.js b/browser/devtools/projecteditor/lib/plugins/pairing/resource-map.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/projecteditor/lib/plugins/pairing/resource-map.js
@@ -0,0 +1,177 @@
+/* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const { Class } = require("sdk/core/heritage");
+const { emit } = require("sdk/event/core");
+const { EventTarget } = require("sdk/event/target");
+const timers = require("sdk/timers");
+const { on, off, forget } = require("projecteditor/helpers/event");
+const { PageAsset } = require("projecteditor/plugins/pairing/page-asset");
+
+// Maintains the list of pairs.
+var ResourceMap = Class({
+  initialize: function(host) {
+    this.map = new Map();
+    this.styleSheetMap = new Map();
+    this.host = host;
+
+    this.scheduleRebuild = this.scheduleRebuild.bind(this);
+    this.rebuild = this.rebuild.bind(this)
+    this.watchCollection = this.watchCollection.bind(this);
+    this.unwatchCollection = this.unwatchCollection.bind(this);
+
+    [...this.host.project.allStores()].forEach(this.watchCollection);
+    on(this, this.host.project, "store-added", this.watchCollection);
+    on(this, this.host.project, "store-removed", this.unwatchCollection);
+  },
+
+  destroy: function() {
+    timers.clearTimeout(this._scheduledRebuild);
+    this._scheduledRebuild = null;
+    this.clear();
+    forget(this, this.host.project);
+  },
+
+  get target () {
+    return this.host.target;
+  },
+  get targetWin () {
+    return this.host.targetWin;
+  },
+  allResources: function() {
+    return this.host.project.allResources();
+  },
+  getPageAssetsForResource: function(resource) {
+    return this.map.get(resource);
+  },
+  clear: function() {
+    this.map.clear();
+  },
+  setSheets: function(styleSheets) {
+    this.styleSheetMap = new Map();
+    this.styleSheets = styleSheets;
+    styleSheets.forEach((sheet) => {
+      let sheetAsset = new PageAsset(sheet);
+      let processSheet = !!sheetAsset.href;
+      if (this.targetWin) {
+        processSheet = sheetAsset.belongsToWindow(this.targetWin);
+      }
+
+      if (processSheet) {
+        this.styleSheetMap.set(sheet.href, sheetAsset);
+      }
+    });
+    this.rebuild();
+  },
+
+  watchCollection: function(collection) {
+    on(this, collection, "resource-added", this.scheduleRebuild);
+    on(this, collection, "resource-removed", this.scheduleRebuild);
+  },
+
+  unwatchCollection: function(collection) {
+    forget(this, collection);
+  },
+
+  scheduleRebuild: function() {
+    if (this._scheduledRebuild) {
+      timers.clearTimeout(this._scheduledRebuild);
+    }
+    this._scheduledRebuild = timers.setTimeout(this.rebuild, 100);
+  },
+
+  /**
+  * Rebuild the project pairings.
+  */
+  rebuild: function() {
+    if (this._scheduledRebuild) {
+      timers.clearTimeout(this._scheduledRebuild);
+      this._scheduledRebuild = null;
+    }
+    let start = Date.now();
+    let newPairs = new Map();
+    this.clear();
+    for (let [path,stylesheet] of this.styleSheetMap.entries()) {
+      let resource = this._findBestResource(stylesheet);
+      if (resource) {
+        if (!this.map.get(resource)) {
+          this.map.set(resource, [stylesheet]);
+        }
+        if (this.map.get(resource).indexOf(stylesheet) === -1) {
+          needUpdate = true;
+          this.map.get(resource).push(stylesheet);
+        }
+      }
+    }
+
+    let end = Date.now();
+    console.log("Rebuilt project map in " + (end - start) + "ms");
+  },
+
+  /**
+  * Find the best resource for a page asset
+  *
+  * Right now we only have one strategy, but new strategies
+  * can be added here.
+  */
+  _findBestResource: function(asset) {
+    return this._fuzzyStrategy(asset.basename, asset.href);
+  },
+
+  /**
+  * The default fuzzy match strategy for finding a live pairing.
+  * Finds a project resources with the same basename, and chooses
+  * the one with the most path component matches.
+  */
+  _fuzzyStrategy: function(basename, path) {
+    let matches = this._findBasenameMatches(basename);
+    if (matches.length < 1) {
+      return null;
+    }
+
+    let searchPath = path.split('/').filter(item => !!item);
+    searchPath.reverse();
+
+    let bestMatch = null;
+    let bestMatchComponents = 0;
+    let bestMatchExtra = 1000;
+    for (let match of matches) {
+      let matchPath = path.split('/').filter(item => !!item);
+      matchPath.reverse();
+      let i;
+      for (i = 0; i < matchPath.length && i < searchPath.length; i++) {
+        if (matchPath[i] != searchPath[i]) {
+          break;
+        }
+      }
+
+      // In case of a tie in matched components, arbitrarily assume that
+      // resources closer to the project root are correct.
+      let remaining = matchPath.length - i;
+      if (i > bestMatchComponents ||
+          (i === bestMatchComponents && remaining < bestMatchExtra)) {
+        bestMatch = match;
+        bestMatchComponents = i;
+        bestMatchExtra = remaining;
+      }
+    }
+
+    return bestMatch;
+  },
+
+  _findBasenameMatches: function(basename) {
+    let matches = [];
+    for (let resource of this.allResources()) {
+      if (resource.basename == basename) {
+        matches.push(resource);
+      }
+    }
+    return matches;
+  }
+});
+
+exports.ResourceMap = ResourceMap;
diff --git a/browser/devtools/projecteditor/lib/projecteditor.js b/browser/devtools/projecteditor/lib/projecteditor.js
--- a/browser/devtools/projecteditor/lib/projecteditor.js
+++ b/browser/devtools/projecteditor/lib/projecteditor.js
@@ -24,16 +24,17 @@ const ITCHPAD_URL = "chrome://browser/co
 // Enabled Plugins
 require("projecteditor/plugins/dirty/dirty");
 require("projecteditor/plugins/delete/delete");
 require("projecteditor/plugins/new/new");
 require("projecteditor/plugins/save/save");
 require("projecteditor/plugins/image-view/plugin");
 require("projecteditor/plugins/app-manager/plugin");
 require("projecteditor/plugins/status-bar/plugin");
+require("projecteditor/plugins/pairing/pairing");
 
 // Uncomment to enable logging.
 // require("projecteditor/plugins/logging/logging");
 
 /**
  * This is the main class tying together an instance of the ProjectEditor.
  * The frontend is contained inside of this.iframe, which loads projecteditor.xul.
  *
@@ -282,16 +283,42 @@ var ProjectEditor = Class({
       let rootResource = this.project.localStores.get(path).root;
       emit(rootResource, "label-change", rootResource);
     }
 
     return this.project.refresh();
   },
 
   /**
+   * Set a TabTarget for pairing with the editor
+   *
+   * @param TabTarget target
+   *                  The target for pairing.
+   *                  If null, the current target will be removed.
+   * @param Window win
+   *               The window within the target that should be watched.
+   *               If null, all windows will be watched.
+   */
+  setTarget: function(target = null, win=null) {
+    if (!target) {
+      this.pluginDispatch("removeTarget", this.target);
+      this.target = this.targetWin = null;
+    } else if (target !== this.target) {
+      if (this.target) {
+        this.pluginDispatch("removeTarget", this.target, this.targetWin);
+      }
+      this.target = target;
+      // XXX: We don't really want targetWin, it's just a hack to let
+      // this work easily with the loader
+      // this.targetWin = win;
+      this.pluginDispatch("newTarget", target, win);
+    }
+  },
+
+  /**
    * Open a resource in a particular shell.
    *
    * @param Resource resource
    *                 The file to be opened.
    */
   openResource: function(resource) {
     this.shells.open(resource);
     this.projectTree.selectResource(resource);
@@ -567,16 +594,25 @@ var ProjectEditor = Class({
    * @returns Boolean
    *          True if the node should be visible, false if hidden.
    */
   resourceVisible: function(resource) {
     return true;
   },
 
   /**
+   * Refresh all the labels for resources in the resource tree view.
+   */
+  refreshResourceTree: function() {
+    this.project.allResources().forEach(resource=> {
+      emit(resource, "label-change", resource);
+    });
+  },
+
+  /**
    * Format the given node for display in the resource tree view.
    *
    * @param Resource resource
    *                 The file to be opened.
    * @param DOMNode elt
    *                The element in the tree to render into.
    */
   resourceFormatter: function(resource, elt) {
diff --git a/browser/devtools/styleeditor/styleeditor-panel.js b/browser/devtools/styleeditor/styleeditor-panel.js
--- a/browser/devtools/styleeditor/styleeditor-panel.js
+++ b/browser/devtools/styleeditor/styleeditor-panel.js
@@ -10,21 +10,21 @@ Cu.import("resource://gre/modules/XPCOMU
 Cu.import("resource://gre/modules/Services.jsm");
 
 let {Promise: promise} = Cu.import("resource://gre/modules/Promise.jsm", {});
 let EventEmitter = require("devtools/toolkit/event-emitter");
 
 Cu.import("resource:///modules/devtools/StyleEditorUI.jsm");
 Cu.import("resource:///modules/devtools/StyleEditorUtil.jsm");
 
-loader.lazyGetter(this, "StyleSheetsFront",
-  () => require("devtools/server/actors/stylesheets").StyleSheetsFront);
+loader.lazyGetter(this, "getStyleSheetsFront",
+  () => require("devtools/server/actors/stylesheets").getStyleSheetsFront);
 
-loader.lazyGetter(this, "StyleEditorFront",
-  () => require("devtools/server/actors/styleeditor").StyleEditorFront);
+loader.lazyGetter(this, "getStyleEditorFront",
+  () => require("devtools/server/actors/styleeditor").getStyleEditorFront);
 
 this.StyleEditorPanel = function StyleEditorPanel(panelWin, toolbox) {
   EventEmitter.decorate(this);
 
   this._toolbox = toolbox;
   this._target = toolbox.target;
   this._panelWin = panelWin;
   this._panelDoc = panelWin.document;
@@ -53,21 +53,21 @@ StyleEditorPanel.prototype = {
     } else {
       targetPromise = promise.resolve(this.target);
     }
 
     targetPromise.then(() => {
       this.target.on("close", this.destroy);
 
       if (this.target.form.styleSheetsActor) {
-        this._debuggee = StyleSheetsFront(this.target.client, this.target.form);
+        this._debuggee = getStyleSheetsFront(this.target.client, this.target.form);
       }
       else {
         /* We're talking to a pre-Firefox 29 server-side */
-        this._debuggee = StyleEditorFront(this.target.client, this.target.form);
+        this._debuggee = getStyleEditorFront(this.target.client, this.target.form);
       }
       this.UI = new StyleEditorUI(this._debuggee, this.target, this._panelDoc);
       this.UI.initialize().then(() => {
         this.UI.on("error", this._showError);
 
         this.isReady = true;
 
         deferred.resolve(this);
diff --git a/browser/themes/shared/devtools/projecteditor/projecteditor.css b/browser/themes/shared/devtools/projecteditor/projecteditor.css
--- a/browser/themes/shared/devtools/projecteditor/projecteditor.css
+++ b/browser/themes/shared/devtools/projecteditor/projecteditor.css
@@ -218,8 +218,19 @@
   padding-right: 10px;
   flex: 1;
 }
 
 /* Image View */
 .editor-image {
   padding: 10px;
 }
+
+/* Pairing */
+.file-label.plugin-paired:after {
+  content: "";
+  width: 10px;
+  height: 10px;
+  border-radius: 50%;
+  margin-left: 10px;
+  background: #70bf53;
+}
+
diff --git a/toolkit/devtools/server/actors/styleeditor.js b/toolkit/devtools/server/actors/styleeditor.js
--- a/toolkit/devtools/server/actors/styleeditor.js
+++ b/toolkit/devtools/server/actors/styleeditor.js
@@ -542,16 +542,23 @@ let OldStyleSheetActor = protocol.ActorC
   }, {
     request: {
       text: Arg(0, "string"),
       transition: Arg(1, "boolean")
     }
   }),
 
   /**
+   * Emit the 'style-applied' event
+   */
+  _notifyStyleApplied: function() {
+    events.emit(this, "style-applied");
+  },
+
+  /**
    * Insert a catch-all transition rule into the document. Set a timeout
    * to remove the rule after a certain time.
    */
   _insertTransistionRule: function() {
     // Insert the global transition rule
     // Use a ref count to make sure we do not add it multiple times.. and remove
     // it only when all pending StyleEditor-generated transitions ended.
     if (this._transitionRefCount == 0) {
@@ -573,17 +580,17 @@ let OldStyleSheetActor = protocol.ActorC
     */
   _onTransitionEnd: function()
   {
     if (--this._transitionRefCount == 0) {
       this.document.documentElement.classList.remove(TRANSITION_CLASS);
       this.rawSheet.deleteRule(this.rawSheet.cssRules.length - 1);
     }
 
-    events.emit(this, "style-applied");
+    this._notifyStyleApplied();
   }
 })
 
 /**
  * StyleSheetFront is the client-side counterpart to a StyleSheetActor.
  */
 var OldStyleSheetFront = protocol.FrontClass(OldStyleSheetActor, {
   initialize: function(conn, form, ctx, detail) {
@@ -753,16 +760,28 @@ function fetch(aURL, aOptions={ loadFrom
   return deferred.promise.then(source => {
     return {
       content: convertToUnicode(source, charset),
       contentType: contentType
     };
   });
 }
 
+const _knownStyleEditorFronts = new WeakMap();
+
+exports.getStyleEditorFront = function(client, form) {
+  if (_knownStyleEditorFronts.has(client))
+    return _knownStyleEditorFronts.get(client);
+
+  let front = new StyleEditorFront(client, form);
+  _knownStyleEditorFronts.set(client, front);
+  return front;
+};
+
+
 /**
  * Convert a given string, encoded in a given character set, to unicode.
  *
  * @param string aString
  *        A string.
  * @param string aCharset
  *        A character set.
  */
diff --git a/toolkit/devtools/server/actors/stylesheets.js b/toolkit/devtools/server/actors/stylesheets.js
--- a/toolkit/devtools/server/actors/stylesheets.js
+++ b/toolkit/devtools/server/actors/stylesheets.js
@@ -955,16 +955,23 @@ let StyleSheetActor = protocol.ActorClas
    */
   _onTransitionEnd: function()
   {
     if (--this._transitionRefCount == 0) {
       this.document.documentElement.classList.remove(TRANSITION_CLASS);
       this.rawSheet.deleteRule(this.rawSheet.cssRules.length - 1);
     }
 
+    this._notifyStyleApplied();
+  },
+
+  /**
+   * Emit the 'style-applied' event
+   */
+  _notifyStyleApplied: function() {
     events.emit(this, "style-applied");
   }
 })
 
 /**
  * Find the line/column for a rule.
  * This is like DOMUtils.getRule[Line|Column] except for inline <style> sheets,
  * the line number returned here is relative to the <style> tag rather than the
@@ -1265,16 +1272,27 @@ function convertToUnicode(aString, aChar
   try {
     converter.charset = aCharset || "UTF-8";
     return converter.ConvertToUnicode(aString);
   } catch(e) {
     return aString;
   }
 }
 
+const _knownStyleSheetsFronts = new WeakMap();
+
+exports.getStyleSheetsFront = function(client, form) {
+  if (_knownStyleSheetsFronts.has(client))
+    return _knownStyleSheetsFronts.get(client);
+
+  let front = new StyleSheetsFront(client, form);
+  _knownStyleSheetsFronts.set(client, front);
+  return front;
+};
+
 /**
  * Normalize multiple relative paths towards the base paths on the right.
  */
 function normalize(...aURLs) {
   let base = Services.io.newURI(aURLs.pop(), null, null);
   let url;
   while ((url = aURLs.pop())) {
     base = Services.io.newURI(url, null, base);
