# HG changeset patch
# Parent aed7dce46a117aef9e160160c58a014716cce3fc
# User Brian Grinstead <bgrinstead@mozilla.com>
pairing with project editor

diff --git a/browser/devtools/projecteditor/chrome/content/projecteditor-loader.js b/browser/devtools/projecteditor/chrome/content/projecteditor-loader.js
--- a/browser/devtools/projecteditor/chrome/content/projecteditor-loader.js
+++ b/browser/devtools/projecteditor/chrome/content/projecteditor-loader.js
@@ -1,19 +1,22 @@
 const Cu = Components.utils;
 const {devtools} = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
 const {FileUtils} = Cu.import("resource://gre/modules/FileUtils.jsm", {});
 const {NetUtil} = Cu.import("resource://gre/modules/NetUtil.jsm", {});
 const require = devtools.require;
 const promise = require("projecteditor/helpers/promise");
 const ProjectEditor = require("projecteditor/projecteditor");
+const TargetFactory = require("devtools/framework/target").TargetFactory;
+const tabs = require("sdk/tabs");
+Cu.import("resource://gre/modules/Services.jsm");
+
 
 const SAMPLE_PATH = buildTempDirectoryStructure();
 const SAMPLE_NAME = "DevTools Content Application Name";
-const SAMPLE_PROJECT_URL = "http://mozilla.org";
 const SAMPLE_ICON = "chrome://browser/skin/devtools/tool-debugger.svg";
 
 /**
  * Create a workspace for working on projecteditor, available at
  * chrome://browser/content/devtools/projecteditor-loader.xul.
  * This emulates the integration points that the app manager uses.
  */
 document.addEventListener("DOMContentLoaded", function onDOMReady(e) {
@@ -47,25 +50,39 @@ document.addEventListener("DOMContentLoa
   });
   projecteditor.on("onEditorCursorActivity", (editor) => {
     console.log("editor cursor activity: " + editor);
   });
   projecteditor.on("onCommand", (cmd) => {
     console.log("Command: " + cmd);
   });
 
+
+  let topWindow = Services.wm.getMostRecentWindow("navigator:browser");
+  let gBrowser = topWindow.gBrowser;
+
+console.log(gBrowser.mCurrentTab);
   projecteditor.loaded.then(() => {
     projecteditor.setProjectToAppPath(SAMPLE_PATH, {
       name: SAMPLE_NAME,
       iconUrl: SAMPLE_ICON,
-      projectOverviewURL: SAMPLE_PROJECT_URL,
+      projectOverviewURL: "file://" + FileUtils.getFile("TmpD", ["ProjectEditor", "index.html"]).path,
       validationStatus: "valid"
     }).then(() => {
+      let root = projecteditor.project.allResources()[0];
+      let win = projecteditor.editorFor(root).iframe.contentWindow;
       let allResources = projecteditor.project.allResources();
-      console.log("All resources have been loaded", allResources, allResources.map(r=>r.basename).join("|"));
+      let tab = gBrowser.mCurrentTab;
+      let target = TargetFactory.forTab(tab);
+      target.makeRemote().then(() => {
+        console.log("Making remote", target);
+        projecteditor.setTarget(target, win);
+      });
+
+      console.log("All resources have been loaded", allResources.map(r=>r.basename).join("|"));
     });
 
   });
 
 }, false);
 
 /**
  * Build a temporary directory as a workspace for this loader
diff --git a/browser/devtools/projecteditor/lib/plugins/pairing/pairing.js b/browser/devtools/projecteditor/lib/plugins/pairing/pairing.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/projecteditor/lib/plugins/pairing/pairing.js
@@ -0,0 +1,92 @@
+/* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+const { Class } = require("sdk/core/heritage");
+const { registerPlugin, Plugin } = require("projecteditor/plugins/core");
+const { StyleSheetsFront } = require("devtools/server/actors/stylesheets");
+const { StyleEditorFront } = require("devtools/server/actors/styleeditor");
+const {CssLogic} = require("devtools/styleinspector/css-logic");
+
+// Handles the new command.
+var Pairing = Class({
+  extends: Plugin,
+
+  init: function() {
+    console.log("PAIRING INIT");
+    this._onStyleSheetsCleared = this._onStyleSheetsCleared.bind(this);
+    this._onNavigate = this._onNavigate.bind(this);
+  },
+
+  get target() {
+    return this.host.target;
+  },
+
+  get targetWin() {
+    return this.host.targetWin;
+  },
+
+  newTarget: function(target, win) {
+    console.log("NEW PARING", target);
+
+    // XXX: Need to share style editor fronts with the style editor.
+    if (this.target.form.styleSheetsActor) {
+      this.debuggee = StyleSheetsFront(this.target.client, this.target.form);
+    } else {
+      // We're talking to a pre-firefox 29 server-side
+      this.debuggee = StyleEditorFront(this.target.client, this.target.form);
+    }
+
+    this.debuggee.getStyleSheets().then(styleSheets => {
+      if (this.target !== target) {
+        return;
+      }
+      console.log("SETTING SHEETS", this.debuggee, styleSheets);
+      // this.root.setSheets(styleSheets);
+      styleSheets.forEach((sheet) => {
+        if (this.targetWin) {
+          let location = this.targetWin.location.toString();
+          if (sheet.nodeHref === location) {
+            sheet.update("body { color: red }", true);
+          }
+        }
+      });
+      this.target.on("will-navigate", this._onStyleSheetsCleared);
+      this.target.on("navigate", this._onNavigate);
+    }).then(null, console.error);
+  },
+
+  _makeAFakeStyleSheet: function() {
+    this.debuggee.addStyleSheet("").then(sheet => {
+      console.log("SHEET", sheet);
+    });
+  },
+  _onStyleSheetsCleared: function() {
+    console.log("on stylesheets cleared");
+  },
+  _onNavigate: function() {
+    console.log("on navigate");
+  },
+  removeTarget: function(target) {
+    console.log("REMOVE PARING", target);
+    this.resources.clear();
+    this.debuggee.destroy();
+    this.target.off("will-navigate", this._onStyleSheetsCleared);
+    this.target.off("navigate", this._onNavigate);
+  }
+    // if (this.debuggee) {
+    //   this.pluginDispatch("removeTarget", target);
+    // }
+
+
+
+    // if (!target) {
+    //   return;
+    // }
+    // console.log("HAVE A TARGET", this.target.form, this.target.client, this.target )
+
+})
+exports.Pairing = Pairing;
+registerPlugin(Pairing);
diff --git a/browser/devtools/projecteditor/lib/projecteditor.js b/browser/devtools/projecteditor/lib/projecteditor.js
--- a/browser/devtools/projecteditor/lib/projecteditor.js
+++ b/browser/devtools/projecteditor/lib/projecteditor.js
@@ -24,16 +24,17 @@ const ITCHPAD_URL = "chrome://browser/co
 // Enabled Plugins
 require("projecteditor/plugins/dirty/dirty");
 require("projecteditor/plugins/delete/delete");
 require("projecteditor/plugins/new/new");
 require("projecteditor/plugins/save/save");
 require("projecteditor/plugins/image-view/plugin");
 require("projecteditor/plugins/app-manager/plugin");
 require("projecteditor/plugins/status-bar/plugin");
+require("projecteditor/plugins/pairing/pairing");
 
 // Uncomment to enable logging.
 // require("projecteditor/plugins/logging/logging");
 
 /**
  * This is the main class tying together an instance of the ProjectEditor.
  * The frontend is contained inside of this.iframe, which loads projecteditor.xul.
  *
@@ -282,16 +283,40 @@ var ProjectEditor = Class({
       let rootResource = this.project.localStores.get(path).root;
       emit(rootResource, "label-change", rootResource);
     }
 
     return this.project.refresh();
   },
 
   /**
+   * Set a TabTarget for pairing with the editor
+   *
+   * @param Target target
+   *               The target for pairing
+   * @param Window win
+   *               The window that you care about
+   */
+  setTarget: function(target, win=null) {
+    if (!target) {
+      this.pluginDispatch("removeTarget", this.target);
+      this.target = this.targetWin =null;
+    } else if (target !== this.target) {
+      if (this.target) {
+        this.pluginDispatch("removeTarget", this.target, this.targetWin);
+      }
+      this.target = target;
+      this.targetWin = win;
+      console.log("HERE", win);
+      this.pluginDispatch("newTarget", target, win);
+    }
+
+  },
+
+  /**
    * Open a resource in a particular shell.
    *
    * @param Resource resource
    *                 The file to be opened.
    */
   openResource: function(resource) {
     this.shells.open(resource);
     this.projectTree.selectResource(resource);
