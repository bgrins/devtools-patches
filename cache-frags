# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  4e96a3f76086427e1725b359e865ea5f96128b39

diff --git a/toolkit/content/widgets/textbox.js b/toolkit/content/widgets/textbox.js
--- a/toolkit/content/widgets/textbox.js
+++ b/toolkit/content/widgets/textbox.js
@@ -1,16 +1,64 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 {
 
+const cachedFragments = {
+  get entities() {
+    return `<!DOCTYPE bindings [
+      <!ENTITY % textcontextDTD SYSTEM "chrome://global/locale/textcontext.dtd">
+      %textcontextDTD;
+    ]>`;
+  },
+  get editMenuItems() {
+    return `
+      <menuitem label="&undoCmd.label;" accesskey="&undoCmd.accesskey;" cmd="cmd_undo"></menuitem>
+      <menuseparator></menuseparator>
+      <menuitem label="&cutCmd.label;" accesskey="&cutCmd.accesskey;" cmd="cmd_cut"></menuitem>
+      <menuitem label="&copyCmd.label;" accesskey="&copyCmd.accesskey;" cmd="cmd_copy"></menuitem>
+      <menuitem label="&pasteCmd.label;" accesskey="&pasteCmd.accesskey;" cmd="cmd_paste"></menuitem>
+      <menuitem label="&deleteCmd.label;" accesskey="&deleteCmd.accesskey;" cmd="cmd_delete"></menuitem>
+      <menuseparator></menuseparator>
+      <menuitem label="&selectAllCmd.label;" accesskey="&selectAllCmd.accesskey;" cmd="cmd_selectAll"></menuitem>
+    `;
+  },
+  get normal() {
+    delete this.normal;
+    this.normal = MozXULElement.parseXULToFragment(`
+      <menupopup class="textbox-contextmenu">
+        ${this.editMenuItems}
+      </menupopup>
+    `, this.entities);
+    return this.normal;
+  },
+  get spellcheck() {
+    delete this.spellcheck;
+    this.spellcheck = MozXULElement.parseXULToFragment(`
+      <menupopup class="textbox-contextmenu">
+        <menuitem label="&spellNoSuggestions.label;" anonid="spell-no-suggestions" disabled="true"></menuitem>
+        <menuitem label="&spellAddToDictionary.label;" accesskey="&spellAddToDictionary.accesskey;" anonid="spell-add-to-dictionary" oncommand="this.parentNode.parentNode.spellCheckerUI.addToDictionary();"></menuitem>
+        <menuitem label="&spellUndoAddToDictionary.label;" accesskey="&spellUndoAddToDictionary.accesskey;" anonid="spell-undo-add-to-dictionary" oncommand="this.parentNode.parentNode.spellCheckerUI.undoAddToDictionary();"></menuitem>
+        <menuseparator anonid="spell-suggestions-separator"></menuseparator>
+        ${this.editMenuItems}
+        <menuseparator anonid="spell-check-separator"></menuseparator>
+        <menuitem label="&spellCheckToggle.label;" type="checkbox" accesskey="&spellCheckToggle.accesskey;" anonid="spell-check-enabled" oncommand="this.parentNode.parentNode.spellCheckerUI.toggleEnabled();"></menuitem>
+        <menu label="&spellDictionaries.label;" accesskey="&spellDictionaries.accesskey;" anonid="spell-dictionaries">
+          <menupopup anonid="spell-dictionaries-menu" onpopupshowing="event.stopPropagation();" onpopuphiding="event.stopPropagation();"></menupopup>
+        </menu>
+      </menupopup>
+    `, this.entities);
+    return this.spellcheck;
+  }
+};
+
 class MozInputBox extends MozXULElement {
   static get observedAttributes() {
     return ["spellcheck"];
   }
 
   attributeChangedCallback(name, oldValue, newValue) {
     if (name === "spellcheck") {
       this.spellcheck = newValue;
@@ -24,18 +72,18 @@ class MozInputBox extends MozXULElement 
   }
 
   _initUI() {
     if (this.menupopup) {
       this.menupopup.remove();
     }
 
     this.setAttribute("context", "_child");
-    this.appendChild(this._getContextMenu());
-
+    this.appendChild(this.spellcheck ? cachedFragments.spellcheck.cloneNode(true) :
+                                       cachedFragments.normal.cloneNode(true));
     this.menupopup = this.querySelector(".textbox-contextmenu");
 
     this.menupopup.addEventListener("popupshowing", event => {
       var input = this.getElementsByAttribute("anonid", "input")[0];
       if (document.commandDispatcher.focusedElement != input)
         input.focus();
       this._doPopupItemEnabling(event.target);
     });
@@ -53,56 +101,16 @@ class MozInputBox extends MozXULElement 
       var cmd = event.originalTarget.getAttribute("cmd");
       if (cmd) {
         this.doCommand(cmd);
         event.stopPropagation();
       }
     });
   }
 
-  _getContextMenu() {
-    const entities = `<!DOCTYPE bindings [
-      <!ENTITY % textcontextDTD SYSTEM "chrome://global/locale/textcontext.dtd" >
-      %textcontextDTD;
-    ]>`;
-    const editMenuItems = `
-        <menuitem label="&undoCmd.label;" accesskey="&undoCmd.accesskey;" cmd="cmd_undo"></menuitem>
-        <menuseparator></menuseparator>
-        <menuitem label="&cutCmd.label;" accesskey="&cutCmd.accesskey;" cmd="cmd_cut"></menuitem>
-        <menuitem label="&copyCmd.label;" accesskey="&copyCmd.accesskey;" cmd="cmd_copy"></menuitem>
-        <menuitem label="&pasteCmd.label;" accesskey="&pasteCmd.accesskey;" cmd="cmd_paste"></menuitem>
-        <menuitem label="&deleteCmd.label;" accesskey="&deleteCmd.accesskey;" cmd="cmd_delete"></menuitem>
-        <menuseparator></menuseparator>
-        <menuitem label="&selectAllCmd.label;" accesskey="&selectAllCmd.accesskey;" cmd="cmd_selectAll"></menuitem>
-    `;
-
-    if (!this.spellcheck) {
-      return MozXULElement.parseXULToFragment(`
-        <menupopup class="textbox-contextmenu">
-          ${editMenuItems}
-        </menupopup>
-      `, entities);
-    }
-
-    return MozXULElement.parseXULToFragment(`
-      <menupopup class="textbox-contextmenu">
-        <menuitem label="&spellNoSuggestions.label;" anonid="spell-no-suggestions" disabled="true"></menuitem>
-        <menuitem label="&spellAddToDictionary.label;" accesskey="&spellAddToDictionary.accesskey;" anonid="spell-add-to-dictionary" oncommand="this.parentNode.parentNode.spellCheckerUI.addToDictionary();"></menuitem>
-        <menuitem label="&spellUndoAddToDictionary.label;" accesskey="&spellUndoAddToDictionary.accesskey;" anonid="spell-undo-add-to-dictionary" oncommand="this.parentNode.parentNode.spellCheckerUI.undoAddToDictionary();"></menuitem>
-        <menuseparator anonid="spell-suggestions-separator"></menuseparator>
-        ${editMenuItems}
-        <menuseparator anonid="spell-check-separator"></menuseparator>
-        <menuitem label="&spellCheckToggle.label;" type="checkbox" accesskey="&spellCheckToggle.accesskey;" anonid="spell-check-enabled" oncommand="this.parentNode.parentNode.spellCheckerUI.toggleEnabled();"></menuitem>
-        <menu label="&spellDictionaries.label;" accesskey="&spellDictionaries.accesskey;" anonid="spell-dictionaries">
-          <menupopup anonid="spell-dictionaries-menu" onpopupshowing="event.stopPropagation();" onpopuphiding="event.stopPropagation();"></menupopup>
-        </menu>
-      </menupopup>
-    `, entities);
-  }
-
   _doPopupItemEnablingSpell(popupNode) {
     var spellui = this.spellCheckerUI;
     if (!spellui || !spellui.canSpellCheck) {
       this._setMenuItemVisibility("spell-no-suggestions", false);
       this._setMenuItemVisibility("spell-check-enabled", false);
       this._setMenuItemVisibility("spell-check-separator", false);
       this._setMenuItemVisibility("spell-add-to-dictionary", false);
       this._setMenuItemVisibility("spell-undo-add-to-dictionary", false);
