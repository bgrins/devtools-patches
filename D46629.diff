diff --git a/browser/actors/BrowserTabParent.jsm b/browser/actors/BrowserTabParent.jsm
--- a/browser/actors/BrowserTabParent.jsm
+++ b/browser/actors/BrowserTabParent.jsm
@@ -16,8 +16,7 @@
 
     if (!gBrowser) {
       // Note: gBrowser might be null because this message might be received
-      // from the extension process. There's still an embedderElement involved,
-      // but it's the one coming from dummy.xul.
+      // from the extension process.
       // This should probably be fixed by adding support to specifying "group: 'browsers"
       // in the registerWindowActor options/. See bug 1557118.
       return;
diff --git a/toolkit/components/extensions/ExtensionParent.jsm b/toolkit/components/extensions/ExtensionParent.jsm
--- a/toolkit/components/extensions/ExtensionParent.jsm
+++ b/toolkit/components/extensions/ExtensionParent.jsm
@@ -71,7 +71,7 @@
   DefaultMap,
   DefaultWeakMap,
   ExtensionError,
-  promiseDocumentLoaded,
+
   promiseEvent,
   promiseObserved,
 } = ExtensionUtils;
@@ -1308,25 +1308,16 @@
     }
 
     let system = Services.scriptSecurityManager.getSystemPrincipal();
+
     chromeShell.createAboutBlankContentViewer(system, system);
     chromeShell.useGlobalHistory = false;
-    let loadURIOptions = {
-      triggeringPrincipal: system,
-    };
-    chromeShell.loadURI(
-      "chrome://extensions/content/dummy.xul",
-      loadURIOptions
+    chromeShell.document.ownerGlobal.isDummyExtensionDocument = true;
+
+    Services.scriptloader.loadSubScript(
+      "chrome://global/content/customElements.js",
+      windowlessBrowser.document.ownerGlobal
     );
 
-    await promiseObserved(
-      "chrome-document-global-created",
-      win => win.document == chromeShell.document
-    );
-    await promiseDocumentLoaded(windowlessBrowser.document);
-    if (this.unloaded) {
-      windowlessBrowser.close();
-      return;
-    }
     this._windowlessBrowser = windowlessBrowser;
   }
 
diff --git a/toolkit/components/extensions/ExtensionXPCShellUtils.jsm b/toolkit/components/extensions/ExtensionXPCShellUtils.jsm
--- a/toolkit/components/extensions/ExtensionXPCShellUtils.jsm
+++ b/toolkit/components/extensions/ExtensionXPCShellUtils.jsm
@@ -84,7 +84,7 @@
 
 /* exported ExtensionTestUtils */
 
-const { promiseDocumentLoaded, promiseEvent, promiseObserved } = ExtensionUtils;
+const { promiseEvent, promiseDocumentLoaded } = ExtensionUtils;
 
 var REMOTE_CONTENT_SCRIPTS = Services.prefs.getBoolPref(
   "browser.tabs.remote.autostart",
@@ -197,29 +197,22 @@
       loadContext.usePrivateBrowsing = true;
     }
 
-    let system = Services.scriptSecurityManager.getSystemPrincipal();
-
     let chromeShell = this.windowlessBrowser.docShell.QueryInterface(
       Ci.nsIWebNavigation
     );
 
+    let system = Services.scriptSecurityManager.getSystemPrincipal();
+
     chromeShell.createAboutBlankContentViewer(system, system);
     chromeShell.useGlobalHistory = false;
-    let loadURIOptions = {
-      triggeringPrincipal: system,
-    };
-    chromeShell.loadURI(
-      "chrome://extensions/content/dummy.xul",
-      loadURIOptions
-    );
+    chromeShell.document.ownerGlobal.isDummyExtensionDocument = true;
 
-    await promiseObserved(
-      "chrome-document-global-created",
-      win => win.document == chromeShell.document
+    Services.scriptloader.loadSubScript(
+      "chrome://global/content/customElements.js",
+      this.windowlessBrowser.document.ownerGlobal
     );
 
     let chromeDoc = await promiseDocumentLoaded(chromeShell.document);
-
     let browser = chromeDoc.createXULElement("browser");
     browser.setAttribute("type", "content");
     browser.setAttribute("disableglobalhistory", "true");
diff --git a/toolkit/components/extensions/dummy.xul b/toolkit/components/extensions/dummy.xul
deleted file mode 100644
--- a/toolkit/components/extensions/dummy.xul
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0"?>
-<!-- This Source Code Form is subject to the terms of the Mozilla Public
-   - License, v. 2.0. If a copy of the MPL was not distributed with this file,
-   - You can obtain one at http://mozilla.org/MPL/2.0/. -->
-
-<window id="documentElement"/>
diff --git a/toolkit/components/extensions/jar.mn b/toolkit/components/extensions/jar.mn
--- a/toolkit/components/extensions/jar.mn
+++ b/toolkit/components/extensions/jar.mn
@@ -4,7 +4,6 @@
 
 toolkit.jar:
 % content extensions %content/extensions/
-    content/extensions/dummy.xul
     content/extensions/ext-browser-content.js
     content/extensions/ext-toolkit.json
     content/extensions/parent/ext-activityLog.js (parent/ext-activityLog.js)
diff --git a/toolkit/content/customElements.js b/toolkit/content/customElements.js
--- a/toolkit/content/customElements.js
+++ b/toolkit/content/customElements.js
@@ -206,27 +206,29 @@
   // document, because the window can go away before the event is fired.
   // In that case, we don't want to initialize anything, otherwise we
   // may be leaking things because they will never be destroyed after.
-  let gIsDOMContentLoaded = false;
+  let gIsDOMContentLoaded = window.isDummyExtensionDocument;
   const gElementsPendingConnection = new Set();
-  window.addEventListener(
-    "DOMContentLoaded",
-    () => {
-      gIsDOMContentLoaded = true;
-      for (let element of gElementsPendingConnection) {
-        try {
-          if (element.isConnected) {
-            element.isRunningDelayedConnectedCallback = true;
-            element.connectedCallback();
+  if (!gIsDOMContentLoaded) {
+    window.addEventListener(
+      "DOMContentLoaded",
+      () => {
+        gIsDOMContentLoaded = true;
+        for (let element of gElementsPendingConnection) {
+          try {
+            if (element.isConnected) {
+              element.isRunningDelayedConnectedCallback = true;
+              element.connectedCallback();
+            }
+          } catch (ex) {
+            console.error(ex);
           }
-        } catch (ex) {
-          console.error(ex);
+          element.isRunningDelayedConnectedCallback = false;
         }
-        element.isRunningDelayedConnectedCallback = false;
-      }
-      gElementsPendingConnection.clear();
-    },
-    { once: true, capture: true }
-  );
+        gElementsPendingConnection.clear();
+      },
+      { once: true, capture: true }
+    );
+  }
 
   const gXULDOMParser = new DOMParser();
   gXULDOMParser.forceEnableXULXBL();
@@ -747,11 +749,9 @@
     );
   });
 
-  // For now, don't load any elements in the extension dummy document.
-  // We will want to load <browser> when that's migrated (bug 1441935).
-  const isDummyDocument =
-    document.documentURI == "chrome://extensions/content/dummy.xul";
-  if (!isDummyDocument) {
+  // The extension dummy document only needs to support the <browser> custom element,
+  // so we don't need to load anything else.
+  if (!window.isDummyExtensionDocument) {
     for (let script of [
       "chrome://global/content/elements/dialog.js",
       "chrome://global/content/elements/general.js",

