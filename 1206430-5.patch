# vim: se ft=diff :
# HG changeset patch
# User Gabriel Luong <gabriel.luong@gmail.com>
# Date 2016-02-14 16:39
Bug 1206430 - Part 5: Annotate debugger breakpoints and debug location on the scrollbar r=bgrins

diff --git a/devtools/client/debugger/debugger-view.js b/devtools/client/debugger/debugger-view.js
--- a/devtools/client/debugger/debugger-view.js
+++ b/devtools/client/debugger/debugger-view.js
@@ -414,16 +414,17 @@ var DebuggerView = {
    * @param string aTextContent
    *        The source text content.
    */
   _setEditorText: function(aTextContent = "") {
     this.editor.setMode(Editor.modes.text);
     this.editor.setText(aTextContent);
     this.editor.clearDebugLocation();
     this.editor.clearHistory();
+    this.editor.clearScrollbarAnnotations();
   },

   /**
    * Sets the proper editor mode (JS or HTML) according to the specified
    * content type, or by determining the type from the url or text content.
    *
    * @param string aUrl
    *        The source url.
diff --git a/devtools/client/sourceeditor/codemirror/mozilla.css b/devtools/client/sourceeditor/codemirror/mozilla.css
--- a/devtools/client/sourceeditor/codemirror/mozilla.css
+++ b/devtools/client/sourceeditor/codemirror/mozilla.css
@@ -77,16 +77,34 @@
 .debug-line .CodeMirror-linenumber {
   background-image: var(--breakpoint-active-background) !important;
 }

 .debug-line .CodeMirror-line {
   background-color: rgba(44,187,15,.1);
 }

+.breakpoint-annotation {
+  background: #46AFE3;
+  border-top: 1px solid #46AFE3;
+  border-bottom: 1px solid #46AFE3;
+  -moz-box-sizing: border-box;
+  box-sizing: border-box;
+  opacity: .5;
+}
+
+.debugLocation-annotation {
+  background: #2CBB0F;
+  border-top: 1px solid #2CBB0F;
+  border-bottom: 1px solid #2CBB0F;
+  -moz-box-sizing: border-box;
+  box-sizing: border-box;
+  opacity: .5;
+}
+
 .CodeMirror {
   cursor: text;
 }

 .CodeMirror-gutters {
   cursor: default;
 }

diff --git a/devtools/client/sourceeditor/debugger.js b/devtools/client/sourceeditor/debugger.js
--- a/devtools/client/sourceeditor/debugger.js
+++ b/devtools/client/sourceeditor/debugger.js
@@ -138,17 +138,24 @@ function addBreakpoint(ctx, line, cond)
     // The line does not exist in the editor. This is harmless, the
     // architecture calling this assumes the editor will handle this
     // gracefully, and make sure breakpoints exist when they need to.
     if (!info) {
       return;
     }

     ed.addLineClass(line, "breakpoint");
-    meta.breakpoints[line] = { condition: cond };
+    let annotations = [{
+      from: { line, ch: 0 },
+      to: { line, ch: 0 }
+    }];
+    meta.breakpoints[line] = {
+      annotation: ed.annotateScrollbar("breakpoint-annotation", annotations),
+      condition: cond
+    };

     // TODO(jwl): why is `info` null when breaking on page reload?
     info.handle.on("delete", function onDelete() {
       info.handle.off("delete", onDelete);
       meta.breakpoints[info.line] = null;
     });

     if (cond) {
@@ -181,16 +188,17 @@ function removeBreakpoint(ctx, line) {
   if (!hasBreakpoint(ctx, line)) {
     return;
   }

   let { ed, cm } = ctx;
   let meta = dbginfo.get(ed);
   let info = cm.lineInfo(line);

+  meta.breakpoints[info.line].annotation.clear();
   meta.breakpoints[info.line] = null;
   ed.removeLineClass(info.line, "breakpoint");
   ed.removeLineClass(info.line, "conditional");
   ed.emit("breakpointRemoved", line);
 }

 function moveBreakpoint(ctx, fromLine, toLine) {
   let { ed, cm } = ctx;
@@ -243,41 +251,49 @@ function getBreakpoints(ctx) {
  * display the line on which the Debugger is currently paused.
  */
 function setDebugLocation(ctx, line) {
   let { ed } = ctx;
   let meta = dbginfo.get(ed);

   clearDebugLocation(ctx);

-  meta.debugLocation = line;
+  let annotations = [{
+    from: {line, ch: 0},
+    to: {line, ch: 0}
+  }];
+  meta.debugLocation = {
+    annotation: ed.annotateScrollbar("debugLocation-annotation", annotations),
+    line
+  };
   ed.addLineClass(line, "debug-line");
 }

 /**
  * Returns a line number that corresponds to the current debug
  * location.
  */
 function getDebugLocation(ctx) {
   let { ed } = ctx;
   let meta = dbginfo.get(ed);

-  return meta.debugLocation;
+  return meta.debugLocation.line;
 }

 /**
  * Clears the debug location. Clearing the debug location
  * also removes a visual anchor from the breakpoints gutter.
  */
 function clearDebugLocation(ctx) {
   let { ed } = ctx;
   let meta = dbginfo.get(ed);

-  if (meta.debugLocation != null) {
-    ed.removeLineClass(meta.debugLocation, "debug-line");
+  if (meta.debugLocation) {
+    ed.removeLineClass(getDebugLocation(ctx), "debug-line");
+    meta.debugLocation.annotation.clear();
     meta.debugLocation = null;
   }
 }

 /**
  * Starts a new search.
  */
 function find(ctx, query) {
