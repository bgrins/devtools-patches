# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  cdbc9ac7e1f6acab77af898042b9ee3aba1953fd
Bug 1246847 - Give extra timeout for mozscreenshots in between devtools docking mode changes;r=MattN

diff --git a/browser/tools/mozscreenshots/mozscreenshots/extension/configurations/DevTools.jsm b/browser/tools/mozscreenshots/mozscreenshots/extension/configurations/DevTools.jsm
--- a/browser/tools/mozscreenshots/mozscreenshots/extension/configurations/DevTools.jsm
+++ b/browser/tools/mozscreenshots/mozscreenshots/extension/configurations/DevTools.jsm
@@ -5,48 +5,54 @@
 "use strict";
 
 this.EXPORTED_SYMBOLS = ["DevTools"];
 
 const {classes: Cc, interfaces: Ci, utils: Cu} = Components;
 
 Cu.import("resource://devtools/client/framework/gDevTools.jsm");
 Cu.import("resource://gre/modules/Services.jsm");
+Cu.import("resource://gre/modules/Task.jsm");
+Cu.import("resource://gre/modules/Timer.jsm");
+
 let { devtools } = Cu.import("resource://devtools/shared/Loader.jsm", {});
 let TargetFactory = devtools.TargetFactory;
 
 function getTargetForSelectedTab() {
   let browserWindow = Services.wm.getMostRecentWindow("navigator:browser");
   let target = TargetFactory.forTab(browserWindow.gBrowser.selectedTab);
   return target;
 }
 
 this.DevTools = {
   init(libDir) {
     let panels = ["options", "webconsole", "jsdebugger", "styleeditor",
                   "performance", "netmonitor"];
 
     panels.forEach(panel => {
       this.configurations[panel] = {};
-      this.configurations[panel].applyConfig = () => {
-        return gDevTools.showToolbox(getTargetForSelectedTab(), panel, "bottom");
-      };
+      this.configurations[panel].applyConfig = Task.async(function* () {
+        yield gDevTools.showToolbox(getTargetForSelectedTab(), panel, "bottom");
+      });
     });
   },
 
   configurations: {
     bottomToolbox: {
-      applyConfig() {
-        return gDevTools.showToolbox(getTargetForSelectedTab(), "inspector", "bottom");
-      },
+      applyConfig: Task.async(function* () {
+        yield gDevTools.showToolbox(getTargetForSelectedTab(), "inspector", "bottom");
+        yield new Promise(resolve => setTimeout(resolve, 500));
+      }),
     },
     sideToolbox: {
-      applyConfig() {
-        return gDevTools.showToolbox(getTargetForSelectedTab(), "inspector", "side");
-      },
+      applyConfig: Task.async(function* () {
+        yield gDevTools.showToolbox(getTargetForSelectedTab(), "inspector", "side");
+        yield new Promise(resolve => setTimeout(resolve, 500));
+      }),
     },
     undockedToolbox: {
-      applyConfig() {
-        return gDevTools.showToolbox(getTargetForSelectedTab(), "inspector", "window");
-      },
+      applyConfig: Task.async(function* () {
+        yield gDevTools.showToolbox(getTargetForSelectedTab(), "inspector", "window");
+        yield new Promise(resolve => setTimeout(resolve, 500));
+      }),
     }
   },
 };
