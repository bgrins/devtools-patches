# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  77cc225e57045f4a05c20ffb50829435f66ea7cc
1240881- [e10s] console hangs when debugging and reloading a few times

diff --git a/devtools/client/webconsole/test/browser_eval_in_debugger_stackframe2.js b/devtools/client/webconsole/test/browser_eval_in_debugger_stackframe2.js
--- a/devtools/client/webconsole/test/browser_eval_in_debugger_stackframe2.js
+++ b/devtools/client/webconsole/test/browser_eval_in_debugger_stackframe2.js
@@ -14,16 +14,17 @@ const TEST_URI = "http://example.com/bro
                  "test/test-eval-in-stackframe.html";
 add_task(function*() {
   yield loadTab(TEST_URI);
 
   info("open the web console");
   let hud = yield openConsole();
   let {jsterm} = hud;
 
+
   info("open the debugger");
   let {panelWin} = yield openDebugger();
   let {DebuggerController} = panelWin;
   let {activeThread} = DebuggerController;
 
   let firstCall = promise.defer();
   let frameAdded = promise.defer();
   executeSoon(() => {
@@ -32,16 +33,17 @@ add_task(function*() {
       executeSoon(frameAdded.resolve);
     });
     jsterm.execute("firstCall()").then(firstCall.resolve);
   });
 
   info("Waiting for a frame to be added");
   yield frameAdded.promise;
 
+yield new Promise(r=>r);
   info("Executing basic command while paused");
   yield executeAndConfirm(jsterm, "1 + 2", "3");
 
   info("Executing command using scoped variables while paused");
   yield executeAndConfirm(jsterm, "foo + foo2",
                           '"globalFooBug783499foo2SecondCall"');
 
   info("Resuming the thread");
diff --git a/devtools/client/webconsole/webconsole.js b/devtools/client/webconsole/webconsole.js
--- a/devtools/client/webconsole/webconsole.js
+++ b/devtools/client/webconsole/webconsole.js
@@ -3365,19 +3365,20 @@ JSTerm.prototype = {
         deferred.resolve(response);
       }
       else {
         deferred.reject(response);
       }
     }
 
     let frameActor = null;
-    if ("frame" in options) {
+    if (options.hasOwnProperty("frame") && options.frame != -1) {
       frameActor = this.getFrameActor(options.frame);
     }
+    console.log("requestEvaluation", options.frame, frameActor)
 
     let evalOptions = {
       bindObjectActor: options.bindObjectActor,
       frameActor: frameActor,
       selectedNodeActor: options.selectedNodeActor,
       selectedObjectActor: options.selectedObjectActor,
     };
 
