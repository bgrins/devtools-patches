# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  10dc335c2ae12507eaede2940b3b3f826585c790
Bug 1246884 - Make sure hidden graphs display isn't overridden by Graphs.js;r=vporof

MozReview-Commit-ID: DH0nt70KTQq

diff --git a/devtools/client/performance/test/browser_perf-options-enable-framerate.js b/devtools/client/performance/test/browser_perf-options-enable-framerate.js
--- a/devtools/client/performance/test/browser_perf-options-enable-framerate.js
+++ b/devtools/client/performance/test/browser_perf-options-enable-framerate.js
@@ -5,16 +5,23 @@ requestLongerTimeout(2);
 
 /**
  * Tests that `enable-framerate` toggles the visibility of the fps graph,
  * as well as enabling ticks data on the PerformanceFront.
  */
 function* spawnTest() {
   let { panel } = yield initPerformance(SIMPLE_URL);
   let { EVENTS, PerformanceController, $ } = panel.panelWin;
+
+  yield startRecording(panel);
+  yield stopRecording(panel);
+  ok(isVisible($("#time-framerate")), "fps graph is not hidden when ticks enabled before recording");
+  is(PerformanceController.getCurrentRecording().getConfiguration().withTicks, true,
+    "PerformanceFront started with ticks recording.");
+
   Services.prefs.setBoolPref(FRAMERATE_PREF, false);
 
   yield startRecording(panel);
   yield stopRecording(panel);
 
   is(PerformanceController.getCurrentRecording().getConfiguration().withTicks, false,
     "PerformanceFront started without ticks recording.");
   ok(!isVisible($("#time-framerate")), "fps graph is hidden when ticks disabled");
diff --git a/devtools/client/performance/test/head.js b/devtools/client/performance/test/head.js
--- a/devtools/client/performance/test/head.js
+++ b/devtools/client/performance/test/head.js
@@ -603,14 +603,18 @@ function synthesizeProfileForTest(sample
   let uniqueStacks = new RecordingUtils.UniqueStacks();
   return RecordingUtils.deflateThread({
     samples: samples,
     markers: []
   }, uniqueStacks);
 }
 
 function isVisible (element) {
+  if (element.ownerDocument.defaultView.getComputedStyle(element).display !== "none") {
+    return true;
+  }
+
   return !element.classList.contains("hidden") && !element.hidden;
 }
 
 function within (actual, expected, fuzz, desc) {
   ok((actual - expected) <= fuzz, `${desc}: Expected ${actual} to be within ${fuzz} of ${expected}`);
 }
diff --git a/devtools/client/themes/performance.css b/devtools/client/themes/performance.css
--- a/devtools/client/themes/performance.css
+++ b/devtools/client/themes/performance.css
@@ -20,17 +20,17 @@
   --row-hover-background-color: rgba(76,158,217,0.2);
 }
 
 /**
  * A generic class to hide elements, replacing the `element.hidden` attribute
  * that we use to hide elements that can later be active
  */
 .hidden {
-  display: none;
+  display: none !important;
   width: 0px;
   height: 0px;
 }
 
 /* Toolbar */
 
 #performance-toolbar-control-other {
   -moz-padding-end: 5px;
