# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  1f7c385693003de50881bf20e1ecdaf0ff87d99e
on top of jsprop

diff --git a/devtools/server/actors/webconsole.js b/devtools/server/actors/webconsole.js
--- a/devtools/server/actors/webconsole.js
+++ b/devtools/server/actors/webconsole.js
@@ -900,39 +900,43 @@ WebConsoleActor.prototype =
    * @return object
    *         The response message - matched properties.
    */
   onAutocomplete: function WCA_onAutocomplete(aRequest)
   {
     let frameActorId = aRequest.frameActor;
     let dbgObject = null;
     let environment = null;
+    let hadDebugee = false;
 
+    console.log("hadDebugee", hadDebugee);
     // This is the case of the paused debugger
     if (frameActorId) {
       let frameActor = this.conn.getActor(frameActorId);
       if (frameActor) {
         let frame = frameActor.frame;
         environment = frame.environment;
       }
       else {
         DevToolsUtils.reportException("onAutocomplete",
           Error("The frame actor was not found: " + frameActorId));
       }
     }
     // This is the general case (non-paused debugger)
     else {
+      hadDebugee = this.dbg.hasDebuggee(this.evalWindow);
       dbgObject = this.dbg.addDebuggee(this.evalWindow);
     }
 
     let result = JSPropertyProvider(dbgObject, environment, aRequest.text,
                                     aRequest.cursor, frameActorId) || {};
-    if (!frameActorId) {
+    if (dbgObject && !hadDebugee) {
       this.dbg.removeDebuggee(this.evalWindow);
     }
+
     let matches = result.matches || [];
     let reqText = aRequest.text.substr(0, aRequest.cursor);
 
     // We consider '$' as alphanumerc because it is used in the names of some
     // helper functions.
     let lastNonAlphaIsDot = /[.][a-zA-Z0-9$]*$/.test(reqText);
     if (!lastNonAlphaIsDot) {
       if (!this._webConsoleCommandsCache) {
diff --git a/devtools/shared/webconsole/js-property-provider.js b/devtools/shared/webconsole/js-property-provider.js
--- a/devtools/shared/webconsole/js-property-provider.js
+++ b/devtools/shared/webconsole/js-property-provider.js
@@ -221,20 +221,23 @@ function JSPropertyProvider(aDbgObject, 
   // We are completing a variable / a property lookup.
   let properties = completionPart.split(".");
   let matchProp = properties.pop().trimLeft();
   let obj = aDbgObject;
 
   // The first property must be found in the environment of the paused debugger
   // or of the global lexical scope.
   let env = anEnvironment || obj.asEnvironment();
-  if (properties.length == 0) {
-    return getMatchedPropsInEnvironment(env, matchProp);
-  }
-  obj = getVariableInEnvironment(env, properties.shift());
+  // let prop = properties.shift();
+    // console.log("BRIAN: " + matchProp + "\n", properties.length, prop);
+  // if (properties.length == 0) {
+  //   console.log("HERE: " + matchProp + "\n");
+  //   return getMatchedPropsInEnvironment(env, matchProp);
+  // }
+  // obj = getVariableInEnvironment(env, prop);
 
   if (!isObjectUsable(obj)) {
     return null;
   }
 
   // We get the rest of the properties recursively starting from the Debugger.Object
   // that wraps the first property
   for (let i = 0; i < properties.length; i++) {
@@ -243,17 +246,17 @@ function JSPropertyProvider(aDbgObject, 
       return null;
     }
 
     // Special case for 'this' since it's not part of the global's properties
     // but we want autocompletion to work properly for it
     if (prop === "this" && obj === aDbgObject && i === 0) {
       continue;
     }
-
+    console.log("HERE", prop)
     if (/\[\d+\]$/.test(prop)) {
       // The property to autocomplete is a member of array. For example
       // list[i][j]..[n]. Traverse the array to get the actual element.
       obj = getArrayMemberProperty(obj, prop);
     }
     else {
       obj = DevToolsUtils.getProperty(obj, prop);
     }
@@ -263,17 +266,17 @@ function JSPropertyProvider(aDbgObject, 
     }
   }
 
   // If the final property is a primitive
   if (typeof obj != "object") {
     return getMatchedProps(obj, matchProp);
   }
 
-  let matchedProps = getMatchedPropsInDbgObject(obj, matchProp);
+  let matchedProps = getMatchedPropsInEnvironment(obj, matchProp);
   if (properties.length !== 0 || obj !== aDbgObject) {
     let thisInd = matchedProps.matches.indexOf("this");
     if (thisInd > -1) {
       matchedProps.matches.splice(thisInd, 1)
     }
   }
 
   return matchedProps;
@@ -521,16 +524,17 @@ var DebuggerEnvironmentSupport = {
     while (aObj) {
       yield aObj;
       aObj = aObj.parent;
     }
   },
 
   getProperties: function(aObj)
   {
+    console.log("GETPROPERTIES", aObj);
     return aObj.names();
   },
 
   getProperty: function(aObj, aName)
   {
     // TODO: we should use getVariableDescriptor() here - bug 725815.
     let result = aObj.getVariable(aName);
     // FIXME: Need actual UI, bug 941287.
