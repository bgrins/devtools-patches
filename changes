# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  f44d4ba54d858c190bc5d571c2a532912529f4bb
Bug 1210090: - local changes

diff --git a/testing/talos/talos/test.py b/testing/talos/talos/test.py
--- a/testing/talos/talos/test.py
+++ b/testing/talos/talos/test.py
@@ -353,16 +353,17 @@ class damp(PageloaderTest):
     tpcycles = 1
     tppagecycles = 25
     tploadnocache = True
     tpmozafterpaint = False
     sps_profile_interval = 10
     sps_profile_entries = 1000000
     win_counters = w7_counters = linux_counters = mac_counters = None
     filters = filter.ignore_first.prepare(1) + filter.median.prepare()
+    preferences = {'devtools.memory.enabled': True}
 
 
 @register_test()
 class glterrain(PageloaderTest):
     """
     Simple rotating WebGL scene with moving light source over a
     textured terrain.
     Measures average frame intervals.
diff --git a/testing/talos/talos/tests/devtools/addon/content/damp.js b/testing/talos/talos/tests/devtools/addon/content/damp.js
--- a/testing/talos/talos/tests/devtools/addon/content/damp.js
+++ b/testing/talos/talos/tests/devtools/addon/content/damp.js
@@ -1,14 +1,14 @@
 Components.utils.import("resource:///modules/devtools/client/framework/gDevTools.jsm");
 const {devtools} =
   Components.utils.import("resource://gre/modules/devtools/shared/Loader.jsm", {});
 const { getActiveTab } = devtools.require("sdk/tabs/utils");
 const { getMostRecentBrowserWindow } = devtools.require("sdk/window/utils");
-const { ThreadSafeChromeUtils } = devtools.require("ThreadSafeChromeUtils");
+const ThreadSafeChromeUtils = devtools.require("ThreadSafeChromeUtils");
 
 const SIMPLE_URL = "chrome://damp/content/pages/simple.html";
 const COMPLICATED_URL = "http://localhost/tests/tp5n/bild.de/www.bild.de/index.html";
 
 function Damp() {
   // Path to the temp file where the heap snapshot file is saved. Set by
   // saveHeapSnapshot and read by readHeapSnapshot.
   this._heapSnapshotFilePath = null;
@@ -72,17 +72,17 @@ Damp.prototype = {
       let stopRecordTimestamp = performance.now();
       this._results.push({name: name + ".close.DAMP", value: stopRecordTimestamp - startRecordTimestamp});
     });
   },
 
   saveHeapSnapshot: function(label) {
     let tab = getActiveTab(getMostRecentBrowserWindow());
     let target = devtools.TargetFactory.forTab(tab);
-    let toolbox = devtools.getToolbox(target);
+    let toolbox = gDevTools.getToolbox(target);
     let panel = toolbox.getCurrentPanel();
     let memoryFront = panel.panelWin.gFront;
 
     let start = performance.now();
     return memoryFront.saveHeapSnapshot().then(filePath => {
       this._heapSnapshotFilePath = filePath;
       let end = performance.now();
       this._results.push({
