# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  b04b6144583b0cc74a108ab54d91af409ab1cc5a

diff --git a/browser/base/content/test/forms/browser_selectpopup.js b/browser/base/content/test/forms/browser_selectpopup.js
--- a/browser/base/content/test/forms/browser_selectpopup.js
+++ b/browser/base/content/test/forms/browser_selectpopup.js
@@ -765,16 +765,17 @@ add_task(async function test_somehidden(
 
 // This test checks that the popup is closed when the select element is blurred.
 add_task(async function test_blur_hides_popup() {
   const pageUrl = "data:text/html," + escape(PAGECONTENT_SMALL);
   let tab = await BrowserTestUtils.openNewForegroundTab(gBrowser, pageUrl);
 
   await ContentTask.spawn(tab.linkedBrowser, null, async function() {
     content.addEventListener("blur", function(event) {
+      console.log(event.originalTarget.tagName, "blur");
       event.preventDefault();
       event.stopPropagation();
     }, true);
 
     content.document.getElementById("one").focus();
   });
 
   let menulist = document.getElementById("ContentSelectDropdown");
diff --git a/toolkit/content/widgets/search-textbox.js b/toolkit/content/widgets/search-textbox.js
--- a/toolkit/content/widgets/search-textbox.js
+++ b/toolkit/content/widgets/search-textbox.js
@@ -7,17 +7,38 @@
 // This is loaded into all XUL windows. Wrap in a block to prevent
 // leaking to window scope.
 {
 const HTML_NS = "http://www.w3.org/1999/xhtml";
 
 class MozSearchTextbox extends MozXULElement {
   constructor() {
     super();
+    const input = this.inputField = document.createElementNS(HTML_NS, "input");
+    input.className = "textbox-input";
+    input.setAttribute("mozactionhint", "search");
+    input.addEventListener("focus", () => this.setAttribute("focused", "true"));
+    input.addEventListener("blur", () => this.removeAttribute("focused"));
 
+    const textboxSign = this.textboxSign = document.createXULElement("image");
+    textboxSign.className = "textbox-search-sign";
+
+    const searchBtn = this._searchButtonIcon = document.createXULElement("image");
+    searchBtn.className = "textbox-search-icon";
+    searchBtn.addEventListener("click", (e) => this._iconClick(e));
+
+    // TODO: Bug 1534799 - Convert string to Fluent and use manual DOM construction
+    let clearBtn = MozXULElement.parseXULToFragment(`
+      <image class="textbox-search-clear" label="&searchTextBox.clear.label;"/>
+    `, ["chrome://global/locale/textcontext.dtd"]);
+    clearBtn = this._searchClearIcon = clearBtn.querySelector(".textbox-search-clear");
+    clearBtn.addEventListener("click", () => this._clearSearch());
+
+    const deck = this._searchIcons = document.createXULElement("deck");
+    deck.className = "textbox-search-icons";
     const METHODS = ["focus", "blur", "select", "setUserInput", "setSelectionRange"];
     for (const method of METHODS) {
       this[method] = (...args) => this.inputField[method](...args);
     }
 
     const READ_WRITE_PROPERTIES = ["defaultValue", "placeholder", "readOnly",
       "size", "selectionStart", "selectionEnd"];
     for (const property of READ_WRITE_PROPERTIES) {
@@ -69,39 +90,22 @@ class MozSearchTextbox extends MozXULEle
     };
   }
 
   connectedCallback() {
     if (this.delayConnectedCallback()) {
       return;
     }
     this.textContent = "";
-
-    const textboxSign = document.createXULElement("image");
-    textboxSign.className = "textbox-search-sign";
-
-    const input = this.inputField = document.createElementNS(HTML_NS, "input");
-    input.className = "textbox-input";
-    input.setAttribute("mozactionhint", "search");
-    input.addEventListener("focus", () => this.setAttribute("focused", "true"));
-    input.addEventListener("blur", () => this.removeAttribute("focused"));
+    const textboxSign = this.textboxSign;
+    const input = this.inputField;
+    const deck = this._searchIcons;
+    const clearBtn = this._searchClearIcon;
+    const searchBtn = this._searchButtonIcon;
 
-    const searchBtn = this._searchButtonIcon = document.createXULElement("image");
-    searchBtn.className = "textbox-search-icon";
-    searchBtn.addEventListener("click", (e) => this._iconClick(e));
-
-    // TODO: Bug 1534799 - Convert string to Fluent and use manual DOM construction
-    let clearBtn = MozXULElement.parseXULToFragment(`
-      <image class="textbox-search-clear" label="&searchTextBox.clear.label;"/>
-    `, ["chrome://global/locale/textcontext.dtd"]);
-    clearBtn = this._searchClearIcon = clearBtn.querySelector(".textbox-search-clear");
-    clearBtn.addEventListener("click", () => this._clearSearch());
-
-    const deck = this._searchIcons = document.createXULElement("deck");
-    deck.className = "textbox-search-icons";
     deck.append(searchBtn, clearBtn);
     this.append(textboxSign, input, deck);
 
     this._timer = null;
 
     // Ensure the button state is up to date:
     this.searchButton = this.searchButton;
 
diff --git a/toolkit/modules/SelectParentHelper.jsm b/toolkit/modules/SelectParentHelper.jsm
--- a/toolkit/modules/SelectParentHelper.jsm
+++ b/toolkit/modules/SelectParentHelper.jsm
@@ -436,18 +436,18 @@ function populateChildren(menulist, opti
   if (Services.prefs.getBoolPref("dom.forms.selectSearch") && addSearch
       && element.childElementCount > SEARCH_MINIMUM_ELEMENTS) {
     // Add a search text field as the first element of the dropdown
     let searchbox = element.ownerDocument.createXULElement("textbox", {
       is: "search-textbox",
     });
     searchbox.className = "contentSelectDropdown-searchbox";
     searchbox.addEventListener("input", onSearchInput);
-    searchbox.addEventListener("focus", onSearchFocus, true);
-    searchbox.addEventListener("blur", onSearchBlur, true);
+    searchbox.inputField.addEventListener("focus", onSearchFocus);
+    searchbox.inputField.addEventListener("blur", onSearchBlur);
     searchbox.addEventListener("command", onSearchInput);
 
     // Handle special keys for exiting search
     searchbox.addEventListener("keydown", function(event) {
       if (event.defaultPrevented) {
         return;
       }
       switch (event.key) {
@@ -539,19 +539,19 @@ function onSearchInput() {
         prevCaption.hidden = allHidden;
       }
     }
   }
 }
 
 function onSearchFocus() {
   let searchObj = this;
-  let menupopup = searchObj.parentElement;
+  let menupopup = searchObj.closest("menupopup");
   menupopup.parentElement.activeChild = null;
   menupopup.setAttribute("ignorekeys", "true");
   currentBrowser.messageManager.sendAsyncMessage("Forms:SearchFocused", {});
 }
 
 function onSearchBlur() {
   let searchObj = this;
-  let menupopup = searchObj.parentElement;
+  let menupopup = searchObj.closest("menupopup")
   menupopup.setAttribute("ignorekeys", "false");
 }
