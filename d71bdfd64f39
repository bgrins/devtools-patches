
# HG changeset patch
# User Nicolas Chevobbe <nchevobbe@mozilla.com>
# Date 1525243248 -7200
# Node ID d71bdfd64f39273223b2dfc966c6a5cfa435ad1f
# Parent  5a8107262015714d2907a85abc24c847ad9b32d2
Bug 1136299 - In-line console input; r=bgrins.

With this patch, the console input takes as much space
as it can. Which means if the output has no messages, it
takes the whole space. If the output has some messages,
but the inline content is growing, the input will get taller,
up to the point that we can only see one message in the output.
In order to do that, we rely on our CSS grid, and on a
max-height on the console input which depends on the height of
the filter input.
Each time the filter input is updated, so is the CSS variable
that represents its height. This way, we always have up-to-date
information.

MozReview-Commit-ID: 6FbdfmQ3iHj

diff --git a/devtools/client/themes/webconsole.css b/devtools/client/themes/webconsole.css
--- a/devtools/client/themes/webconsole.css
+++ b/devtools/client/themes/webconsole.css
@@ -275,26 +275,29 @@
 html #webconsole-notificationbox {
   flex: 0;
   width: 100vw;
 }
 
 .jsterm-input-container {
   background-color: var(--theme-tab-toolbar-background);
   border-top: 1px solid var(--theme-splitter-color);
+  max-height: calc(100vh - var(--filter-bar-height));
+}
+
+.webconsole-output:not(:empty) ~ .jsterm-input-container {
+  max-height: calc(100vh - var(--filter-bar-height) - var(--min-message-height));
 }
 
 .jsterm-input-node {
-  /* Always allow scrolling on input - it auto expands in js by setting height,
-     but don't want it to get bigger than the window. 24px = toolbar height. */
-  max-height: calc(90vh - 24px);
+  max-height: 100%;
   background-image: var(--theme-command-line-image);
   background-repeat: no-repeat;
   background-size: 16px 16px;
-  background-position: 4px 50%;
+  background-position: 4px 4px;
   color: var(--theme-content-color1);
   box-sizing: border-box;
 }
 
 .jsterm-complete-node {
   color: var(--theme-comment);
 }
 
@@ -344,22 +347,16 @@
 
 /* Unset the bottom right radius on the jsterm inputs when the sidebar is visible */
 :root[platform="mac"] .sidebar ~ .jsterm-input-container textarea.jsterm-input-node,
 :root[platform="mac"] .sidebar ~ .jsterm-input-container textarea.jsterm-complete-node {
   border-bottom-right-radius: 0;
 }
 
 /* CodeMirror-powered JsTerm */
-.jsterm-cm .jsterm-input-container {
-  /* Always allow scrolling on input - it auto expands in js by setting height,
-     but don't want it to get bigger than the window. 24px = toolbar height. */
-  max-height: calc(90vh - 24px);
-}
-
 .jsterm-cm .jsterm-input-container > .CodeMirror {
   border: 1px solid transparent;
   font-size: inherit;
   line-height: 16px;
   padding-inline-start: 20px;
   /* input icon */
   background-image: var(--theme-command-line-image);
   background-repeat: no-repeat;
@@ -513,16 +510,17 @@
   -moz-user-focus: normal;
   color: var(--console-output-color);
   --console-output-indent-border-color: var(--theme-selection-background);
   --icon-top-margin: 3px;
   --object-inspector-hover-background: transparent;
   --attachment-margin-block-end: 3px;
   --primary-toolbar-height: 29px;
   --close-button-image: url(chrome://devtools/skin/images/close.svg);
+  --min-message-height: 19px;
 }
 
 /* Webconsole specific theme variables */
 .theme-light .webconsole-output-wrapper {
   --error-color: var(--red-70);
   --error-background-color: #FDF2F5;
   --warning-color: var(--yellow-80);
   --warning-background-color: #FFFBD5;
@@ -972,17 +970,17 @@
 
 body #output-container {
   flex: 1;
   overflow: hidden;
 }
 
 
 /*
- * Here's what the layout of the console looks like:
+ * Here's what the layout of the console looks like when codeMirror jsterm is not enabled:
  *
  *  +------------------------------+--------------+
  *  | FILTER BAR                   |              |
  *  +------------------------------+              |
  *  |                              |              |
  *  | CONSOLE OUTPUT               |   SIDEBAR    |
  *  |                              |              |
  *  +------------------------------+              |
@@ -995,16 +993,41 @@
   display: grid;
   grid-template-columns: minmax(200px, 1fr) auto;
   grid-template-rows: auto 1fr auto auto;
   height: 100%;
   max-height: 100%;
   width: 100vw;
 }
 
+/*
+ * Here's what the layout of the console looks like when codeMirror jsterm is enabled:
+ *
+ *  +------------------------------+--------------+
+ *  | FILTER BAR                   |              |
+ *  +------------------------------+              |
+ *  |                              |              |
+ *  | CONSOLE OUTPUT               |   SIDEBAR    |
+ *  |                              |              |
+ *  +------------------------------+              |
+ *  | NOTIFICATION BOX             |              |
+ *  +------------------------------+              |
+ *  |                              |              |
+ *  | JSTERM CONTAINER             |              |
+ *  |                              |              |
+ *  |                              |              |
+ *  |                              |              |
+ *  +------------------------------+--------------+
+ *
+ *  JsTerm takes all the available space left.
+ */
+.webconsole-output-wrapper.jsterm-cm {
+  grid-template-rows: auto auto auto 1fr;
+}
+
 .webconsole-output-wrapper #webconsole-notificationbox {
   grid-column: 1 / 2;
   grid-row: 3 / 4;
 }
 
 .webconsole-output-wrapper .jsterm-input-container {
   grid-column: 1 / 2;
   grid-row: -1 / -2;
diff --git a/devtools/client/webconsole/components/App.js b/devtools/client/webconsole/components/App.js
--- a/devtools/client/webconsole/components/App.js
+++ b/devtools/client/webconsole/components/App.js
@@ -2,16 +2,17 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const { Component, createFactory } = require("devtools/client/shared/vendor/react");
 const PropTypes = require("devtools/client/shared/vendor/react-prop-types");
 const dom = require("devtools/client/shared/vendor/react-dom-factories");
 const { connect } = require("devtools/client/shared/redux/visibility-handler-connect");
+const { throttle } = require("devtools/client/inspector/shared/utils");
 
 const actions = require("devtools/client/webconsole/actions/index");
 const ConsoleOutput = createFactory(require("devtools/client/webconsole/components/ConsoleOutput"));
 const FilterBar = createFactory(require("devtools/client/webconsole/components/FilterBar"));
 const SideBar = createFactory(require("devtools/client/webconsole/components/SideBar"));
 const JSTerm = createFactory(require("devtools/client/webconsole/components/JSTerm"));
 const NotificationBox = createFactory(require("devtools/client/shared/components/NotificationBox").NotificationBox);
 
@@ -46,16 +47,42 @@
       jstermCodeMirror: PropTypes.bool,
     };
   }
 
   constructor(props) {
     super(props);
 
     this.onPaste = this.onPaste.bind(this);
+    this.updateFilterContainerCssVariable =
+      this.updateFilterContainerCssVariable.bind(this);
+  }
+
+  componentDidMount() {
+    this.updateFilterContainerCssVariable();
+
+    const onResizeThrottled =
+      throttle(() => this.updateFilterContainerCssVariable(), 100, this);
+    window.addEventListener("resize", onResizeThrottled);
+  }
+
+  updateFilterContainerCssVariable(filterBarNode) {
+    if (!this.node) {
+      return;
+    }
+
+    if (!filterBarNode) {
+      filterBarNode = this.node.querySelector(".webconsole-filteringbar-wrapper");
+    }
+
+    if (!filterBarNode) {
+      return;
+    }
+
+    this.node.style.setProperty("--filter-bar-height", `${filterBarNode.clientHeight}px`);
   }
 
   onPaste(event) {
     const {
       dispatch,
       hud,
       notifications,
     } = this.props;
@@ -143,17 +170,18 @@
         ref: node => {
           this.node = node;
         }},
         FilterBar({
           hidePersistLogsCheckbox: hud.isBrowserConsole,
           serviceContainer: {
             attachRefToHud
           },
-          closeSplitConsole
+          closeSplitConsole,
+          onHeightUpdated: this.updateFilterContainerCssVariable,
         }),
         ConsoleOutput({
           serviceContainer,
           onFirstMeaningfulPaint,
         }),
         SideBar({
           serviceContainer,
         }),
diff --git a/devtools/client/webconsole/components/FilterBar.js b/devtools/client/webconsole/components/FilterBar.js
--- a/devtools/client/webconsole/components/FilterBar.js
+++ b/devtools/client/webconsole/components/FilterBar.js
@@ -30,16 +30,17 @@
         attachRefToHud: PropTypes.func.isRequired,
       }).isRequired,
       filterBarVisible: PropTypes.bool.isRequired,
       persistLogs: PropTypes.bool.isRequired,
       hidePersistLogsCheckbox: PropTypes.bool.isRequired,
       filteredMessagesCount: PropTypes.object.isRequired,
       closeButtonVisible: PropTypes.bool,
       closeSplitConsole: PropTypes.func,
+      onHeightUpdated: PropTypes.func,
     };
   }
 
   static get defaultProps() {
     return {
       hidePersistLogsCheckbox: false,
     };
   }
@@ -93,16 +94,31 @@
 
     if (nextProps.closeButtonVisible != closeButtonVisible) {
       return true;
     }
 
     return false;
   }
 
+  componentDidUpdate(prevProps) {
+    const filterBarVisibilityChanged =
+      prevProps.filterBarVisible !== this.props.filterBarVisible;
+    const filteredMessageBarVisibilityChanged =
+      prevProps.filteredMessagesCount.global !== this.props.filteredMessagesCount.global
+      && (
+        prevProps.filteredMessagesCount.global === 0
+        || this.props.filteredMessagesCount.global === 0
+      );
+
+    if (filterBarVisibilityChanged || filteredMessageBarVisibilityChanged) {
+      this.props.onHeightUpdated(this.wrapperNode);
+    }
+  }
+
   onClickMessagesClear() {
     this.props.dispatch(actions.messagesClear());
   }
 
   onClickFilterBarToggle() {
     this.props.dispatch(actions.filterBarToggle());
   }
 

