# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  988991ceac31262001892788488364d62d534fef
Bug 1315242 review suggestions

MozReview-Commit-ID: ASt8VzZTG3c

diff --git a/devtools/client/shared/components/frame.js b/devtools/client/shared/components/frame.js
--- a/devtools/client/shared/components/frame.js
+++ b/devtools/client/shared/components/frame.js
@@ -32,28 +32,25 @@ module.exports = createClass({
     // Option to display a host name after the source link.
     showHost: PropTypes.bool,
     // Option to display a host name if the filename is empty or just '/'
     showEmptyPathAsHost: PropTypes.bool,
     // Option to display a full source instead of just the filename.
     showFullSourceUrl: PropTypes.bool,
     // Service to enable the source map feature for console.
     sourceMapService: PropTypes.object,
-    // Frame is console input
-    isConsoleInput: PropTypes.bool,
   },
 
   getDefaultProps() {
     return {
       showFunctionName: false,
       showAnonymousFunctionName: false,
       showHost: false,
       showEmptyPathAsHost: false,
       showFullSourceUrl: false,
-      isConsoleInput: false,
     };
   },
 
   componentWillMount() {
     const sourceMapService = this.props.sourceMapService;
     if (sourceMapService) {
       const source = this.getSource();
       sourceMapService.subscribe(source, this.onSourceUpdated);
@@ -117,28 +114,26 @@ module.exports = createClass({
     let frame, isSourceMapped;
     let {
       onClick,
       showFunctionName,
       showAnonymousFunctionName,
       showHost,
       showEmptyPathAsHost,
       showFullSourceUrl,
-      isConsoleInput
     } = this.props;
 
     if (this.state && this.state.isSourceMapped) {
       frame = this.state.frame;
       isSourceMapped = this.state.isSourceMapped;
     } else {
       frame = this.props.frame;
     }
 
-    let source = isConsoleInput ? "console-input"
-                                : frame.source ? String(frame.source) : "";
+    let source = frame.source ? String(frame.source) : "";
     let line = frame.line != void 0 ? Number(frame.line) : null;
     let column = frame.column != void 0 ? Number(frame.column) : null;
 
     const { short, long, host } = getSourceNames(source);
     // Reparse the URL to determine if we should link this; `getSourceNames`
     // has already cached this indirectly. We don't want to attempt to
     // link to "self-hosted" and "(unknown)". However, we do want to link
     // to Scratchpad URIs.
@@ -147,24 +142,19 @@ module.exports = createClass({
     const isLinkable = !!(isScratchpadScheme(source) || parseURL(source))
       || isSourceMapped;
     const elements = [];
     const sourceElements = [];
     let sourceEl;
 
     let tooltip = long;
 
-    // If the source is linkable and line > 0
-    const shouldDisplayLine = (isConsoleInput || isLinkable) && line;
-
-    // Exclude all falsy values, including `0`, as even
-    // a number 0 for line doesn't make sense, and should not be displayed.
-    // If source isn't linkable, don't attempt to append line and column
-    // info, as this probably doesn't make sense.
-    if (shouldDisplayLine) {
+    // Exclude all falsy values, including `0`, as line numbers start
+    // with 1
+    if (line) {
       tooltip += `:${line}`;
       // Intentionally exclude 0
       if (column) {
         tooltip += `:${column}`;
       }
     }
 
     let attributes = {
@@ -193,18 +183,18 @@ module.exports = createClass({
     } else if (showEmptyPathAsHost && (displaySource === "" || displaySource === "/")) {
       displaySource = host;
     }
 
     sourceElements.push(dom.span({
       className: "frame-link-filename",
     }, displaySource));
 
-    // If source is linkable, and we have a line number > 0
-    if (shouldDisplayLine) {
+    // If we have a line number > 0
+    if (line) {
       let lineInfo = `:${line}`;
       // Add `data-line` attribute for testing
       attributes["data-line"] = line;
 
       // Intentionally exclude 0
       if (column) {
         lineInfo += `:${column}`;
         // Add `data-column` attribute for testing
diff --git a/devtools/client/webconsole/new-console-output/components/message.js b/devtools/client/webconsole/new-console-output/components/message.js
--- a/devtools/client/webconsole/new-console-output/components/message.js
+++ b/devtools/client/webconsole/new-console-output/components/message.js
@@ -125,22 +125,18 @@ const Message = createClass({
           }
         },
       });
     }
 
     const repeat = this.props.repeat ? MessageRepeat({repeat: this.props.repeat}) : null;
 
     // Configure the location.
-    const isConsoleInput = frame && frame.source === "debugger eval code";
     const location = dom.span({ className: "message-location devtools-monospace" },
-      isConsoleInput ? FrameView({
-        frame,
-        isConsoleInput,
-      }) : frame ? FrameView({
+      frame ? FrameView({
         frame,
         onClick: serviceContainer.onViewSourceInDebugger,
         showEmptyPathAsHost: true,
         sourceMapService: serviceContainer.sourceMapService
       }) : null
     );
 
     let learnMore;
diff --git a/devtools/server/actors/webconsole.js b/devtools/server/actors/webconsole.js
--- a/devtools/server/actors/webconsole.js
+++ b/devtools/server/actors/webconsole.js
@@ -932,17 +932,17 @@ WebConsoleActor.prototype =
 
         try {
           let line = error.errorLineNumber;
           let column = error.errorColumnNumber;
 
           if (typeof line === "number" && typeof column === "number") {
             // Set frame only if we have line/column numbers.
             frame = {
-              source : "debugger eval code",
+              source: "debugger eval code",
               line,
               column
             };
           }
         } catch (ex) {}
       }
     }
 
