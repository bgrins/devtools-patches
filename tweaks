# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  7adeb023d3b04291a9fef03f42bcb04210b1e21e

diff --git a/devtools/client/themes/webconsole.css b/devtools/client/themes/webconsole.css
--- a/devtools/client/themes/webconsole.css
+++ b/devtools/client/themes/webconsole.css
@@ -673,16 +673,20 @@ a.learn-more-link.webconsole-learn-more-
 /* NEW CONSOLE STYLES */
 
 #output-wrapper > div {
   position: absolute;
   top: 0;
   bottom: 0;
   left: 0;
   right: 0;
+}
+
+
+.new #output-wrapper > div {
   /* Make sure scrollbar doesn't flicker when JSTerm grows vertically */
   overflow: hidden;
 }
 
 #output-container {
   height: 100%;
 }
 
diff --git a/devtools/client/webconsole/new-console-output/actions/filters.js b/devtools/client/webconsole/new-console-output/actions/filters.js
--- a/devtools/client/webconsole/new-console-output/actions/filters.js
+++ b/devtools/client/webconsole/new-console-output/actions/filters.js
@@ -11,54 +11,37 @@ const Services = require("Services");
 
 const {
   FILTER_TEXT_SET,
   FILTER_TOGGLE,
   FILTERS_CLEAR,
   PREFS,
 } = require("devtools/client/webconsole/new-console-output/constants");
 
-const { cellSizeCache } = require("devtools/client/webconsole/new-console-output/utils/caches");
-
 function filterTextSet(text) {
-  return (dispatch) => {
-    // The indexes in the list of messages will no longer correspond to the same messages,
-    // so clear any cached row heights used by the React Virtualized Grid.
-    cellSizeCache.clearAllRowHeights();
-
-    dispatch({
-      type: FILTER_TEXT_SET,
-      text
-    });
+  return {
+    type: FILTER_TEXT_SET,
+    text
   };
 }
 
 function filterToggle(filter) {
   return (dispatch, getState) => {
-    // The indexes in the list of messages will no longer correspond to the same messages,
-    // so clear any cached row heights used by the React Virtualized Grid.
-    cellSizeCache.clearAllRowHeights();
-
     dispatch({
       type: FILTER_TOGGLE,
       filter,
     });
-
     const filterState = getAllFilters(getState());
     Services.prefs.setBoolPref(PREFS.FILTER[filter.toUpperCase()],
       filterState.get(filter));
   };
 }
 
 function filtersClear() {
   return (dispatch, getState) => {
-    // The indexes in the list of messages will no longer correspond to the same messages,
-    // so clear any cached row heights used by the React Virtualized Grid.
-    cellSizeCache.clearAllRowHeights();
-
     dispatch({
       type: FILTERS_CLEAR,
     });
 
     const filterState = getAllFilters(getState());
     for (let filter in filterState) {
       Services.prefs.clearUserPref(PREFS.FILTER[filter.toUpperCase()]);
     }
diff --git a/devtools/client/webconsole/new-console-output/components/console-output.js b/devtools/client/webconsole/new-console-output/components/console-output.js
--- a/devtools/client/webconsole/new-console-output/components/console-output.js
+++ b/devtools/client/webconsole/new-console-output/components/console-output.js
@@ -26,16 +26,17 @@ const {
   getAllGroupsById,
   getLastForceScrollMessageIndex,
 } = require("devtools/client/webconsole/new-console-output/selectors/messages");
 const MessageContainer = createFactory(require("devtools/client/webconsole/new-console-output/components/message-container").MessageContainer);
 const ScrollPositionManager = require("devtools/client/webconsole/new-console-output/components/scroll-position-manager");
 
 const { cellSizeCache } = require("devtools/client/webconsole/new-console-output/utils/caches");
 
+
 // @TODO Get an accurate scrollbar size.
 const SCROLLBAR_SIZE = 15;
 
 /**
  * The container for the list of messages.
  *
  * This component is extremely stateful, managing its state outside of React's controled
  * props/state system. So are it's helpers, ScrollPositionManager and KeyboardPager.
@@ -88,16 +89,21 @@ const ConsoleOutput = createClass({
   },
 
   _allowKeyboardPaging(event) {
     // Only respond to events where JSTerm is the target and the autocomplete is not open.
     return event.target.closest("textbox.jsterm-input-node")
         && !this.props.serviceContainer.autocompletePopupIsOpen();
   },
 
+  getRowHeight({ index }) {
+    const messageId = this.props.messages.get(index).id;
+    return cellSizeCache.getRowHeightById(messageId);
+  },
+
   _renderRow({ rowIndex, style }) {
     let {
       dispatch,
       messages,
       messagesUi,
       messagesTableData,
       serviceContainer,
       groups,
@@ -181,17 +187,17 @@ const ConsoleOutput = createClass({
               columnCount: 1,
               // If the widest row is wider than the container, use that. Otherwise,
               // use the container's width.
               columnWidth: widestRow > width ? widestRow : width,
               height,
               overscanRowCount: 5,
               cellRenderer: this._renderRow,
               rowCount: messages.size,
-              rowHeight: getRowHeight,
+              rowHeight: this.getRowHeight,
               width,
               ref: ref => {
                 this.grid = ref;
               },
               onScroll,
               // Grid has a shouldComponentUpdate which does a shallow compare. We want to
               // update whenever there is a change in the message UI state, or when table data
               // comes in. Even though the grid doesn't use these props, we pass them in to
@@ -221,20 +227,16 @@ const ConsoleOutput = createClass({
         className: "webconsole-output",
       },
       this._renderGrid()
       )
     );
   }
 });
 
-function getRowHeight({ index }) {
-  return cellSizeCache.getRowHeight(index);
-}
-
 function mapStateToProps(state, props) {
   return {
     messages: getAllMessages(state),
     messagesUi: getAllMessagesUiById(state),
     messagesTableData: getAllMessagesTableDataById(state),
     lastForceScrollMessageIndex: getLastForceScrollMessageIndex(state),
     groups: getAllGroupsById(state),
   };
diff --git a/devtools/client/webconsole/new-console-output/components/message-container.js b/devtools/client/webconsole/new-console-output/components/message-container.js
--- a/devtools/client/webconsole/new-console-output/components/message-container.js
+++ b/devtools/client/webconsole/new-console-output/components/message-container.js
@@ -52,28 +52,37 @@ const MessageContainer = createClass({
     this._cacheMessageHeight();
   },
 
   componentDidUpdate() {
     // Capture height changes from toggling.
     this._cacheMessageHeight();
   },
 
+  // shouldComponentUpdate(nextProps, nextState) {
+  //   const repeatChanged = this.props.message.repeat !== nextProps.message.repeat;
+  //   const openChanged = this.props.open !== nextProps.open;
+  //   const tableDataChanged = this.props.tableData !== nextProps.tableData;
+  //   const sizeDataChanged = this.props.style.height !== nextProps.style.height ||
+  //                           this.props.style.width !== nextProps.style.width
+  //   return repeatChanged || openChanged || tableDataChanged || sizeDataChanged;
+  // },
+
   _cacheMessageHeight() {
     const innerNode = findDOMNode(this).firstChild.firstChild;
     this.props.updateRowHeight(this.props.message.id, this.props.rowIndex, innerNode);
   },
 
   render() {
     const { message, style } = this.props;
 
     let MessageComponent = createFactory(getMessageComponent(message));
     // The style is passed in from React Virtualized. It is a fixed height and width for
     // the container around the message.
-    return dom.div({ style },
+    return dom.div({ style, 'data-id': message.id },
       MessageComponent(this.props)
     );
   }
 });
 
 function getMessageComponent(message) {
   switch (message.source) {
     case MESSAGE_SOURCE.CONSOLE_API:
diff --git a/devtools/client/webconsole/new-console-output/utils/cell-size-cache.js b/devtools/client/webconsole/new-console-output/utils/cell-size-cache.js
--- a/devtools/client/webconsole/new-console-output/utils/cell-size-cache.js
+++ b/devtools/client/webconsole/new-console-output/utils/cell-size-cache.js
@@ -26,17 +26,17 @@ module.exports = class CellSizeCache {
     delete this._cachedRowHeights[id];
     delete this._indexToIdMap[index];
     this._isDirty = true;
   }
 
   getRowHeight(index) {
     return this.hasRowHeight(index)
       ? this._cachedRowHeights[this.getIdFromIndex(index)]
-      : 20;
+      : 22;
   }
 
   getRowHeightById(id) {
     return this.hasRowHeightById(id) ? this._cachedRowHeights[id] : 20;
   }
 
   hasRowHeight(index) {
     return !!this._cachedRowHeights[this.getIdFromIndex(index)];
diff --git a/devtools/client/webconsole/webconsole.js b/devtools/client/webconsole/webconsole.js
--- a/devtools/client/webconsole/webconsole.js
+++ b/devtools/client/webconsole/webconsole.js
@@ -566,16 +566,17 @@ WebConsoleFrame.prototype = {
 
       // Remove context menu for now (see Bug 1307239).
       this.outputWrapper.removeAttribute("context");
 
       // XXX: We should actually stop output from happening on old output
       // panel, but for now let's just hide it.
       this.experimentalOutputNode = this.outputNode.cloneNode();
       this.experimentalOutputNode.removeAttribute("tabindex");
+      this.experimentalOutputNode.classList.add("new");
       this.outputNode.hidden = true;
       this.outputNode.parentNode.appendChild(this.experimentalOutputNode);
       // @TODO Once the toolbox has been converted to React, see if passing
       // in JSTerm is still necessary.
 
       this.newConsoleOutput = new this.window.NewConsoleOutput(
         this.experimentalOutputNode, this.jsterm, toolbox, this.owner, this.document);
 
