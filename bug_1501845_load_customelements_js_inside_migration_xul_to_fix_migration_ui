# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1540415513 25200
#      Wed Oct 24 14:11:53 2018 -0700
# Node ID 5467441be29e5c3e1b4ba510144a835f705d0d56
# Parent  3cc04ee79005058d817daf66da7963dfac3f0a3a
Bug 1501845 - Load customElements.js inside migration.xul to fix migration UI when running with commandline;r=paolo

This is another case of a document getting loaded before MainProcessSingleton,
similar to profile manager. There's another wrinkle here, though. The migration
UI can also be loaded _after_ startup (through Bookmarks manager), which is
actually the primary way this UI is surfaced. So we need to also handle customElements.js
getting loaded twice into the same window to avoid attempting to redefine everything.

Differential Revision: https://phabricator.services.mozilla.com/D9713

diff --git a/browser/components/migration/content/migration.xul b/browser/components/migration/content/migration.xul
--- a/browser/components/migration/content/migration.xul
+++ b/browser/components/migration/content/migration.xul
@@ -13,16 +13,17 @@
         title="&migrationWizard.title;"
         onload="MigrationWizard.init()"
         onunload="MigrationWizard.uninit()"
         style="width: 40em;"
         buttons="accept,cancel"
         branded="true"
         onwizardcancel="return MigrationWizard.onWizardCancel();">
 
+  <script type="application/javascript" src="chrome://global/content/customElements.js"/>
   <script type="application/javascript" src="chrome://browser/content/migration/migration.js"/>
 
   <wizardpage id="importSource" pageid="importSource" next="selectProfile"
               label="&importSource.title;"
               onpageadvanced="return MigrationWizard.onImportSourcePageAdvanced();">
 #ifdef XP_WIN
     <description id="importAll" control="importSourceGroup">&importFrom.label;</description>
 #else
diff --git a/toolkit/content/customElements.js b/toolkit/content/customElements.js
--- a/toolkit/content/customElements.js
+++ b/toolkit/content/customElements.js
@@ -1,19 +1,28 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
-/* globals MozQueryInterface */
+ // This file defines these globals on the window object.
+ // Define them here so that ESLint can find them:
+/* globals MozElementMixin, MozXULElement, MozBaseControl */
 
 "use strict";
 
 // This is loaded into chrome windows with the subscript loader. Wrap in
 // a block to prevent accidentally leaking globals onto `window`.
-{
+(() => {
+
+// Handle customElements.js being loaded as a script in addition to the subscriptLoader
+// from MainProcessSingleton, to handle pages that can open both before and after
+// MainProcessSingleton starts. See Bug 1501845.
+if (window.MozXULElement) {
+  return;
+}
 
 ChromeUtils.import("resource://gre/modules/Services.jsm");
 ChromeUtils.import("resource://gre/modules/AppConstants.jsm");
 
 // The listener of DOMContentLoaded must be set on window, rather than
 // document, because the window can go away before the event is fired.
 // In that case, we don't want to initialize anything, otherwise we
 // may be leaking things because they will never be destroyed after.
@@ -183,16 +192,17 @@ const MozElementMixin = Base => class Mo
 
 const MozXULElement = MozElementMixin(XULElement);
 
 /**
  * Given an object, add a proxy that reflects interface implementations
  * onto the object itself.
  */
 function getInterfaceProxy(obj) {
+  /* globals MozQueryInterface */
   if (!obj._customInterfaceProxy) {
     obj._customInterfaceProxy = new Proxy(obj, {
       get(target, prop, receiver) {
         let propOrMethod = target[prop];
         if (typeof propOrMethod == "function") {
           if (propOrMethod instanceof MozQueryInterface) {
             return Reflect.get(target, prop, receiver);
           }
@@ -261,9 +271,9 @@ if (!isDummyDocument) {
     ["printpreview-toolbar", "chrome://global/content/printPreviewToolbar.js"],
     ["editor", "chrome://global/content/elements/editor.js"],
   ]) {
     customElements.setElementCreationCallback(tag, () => {
       Services.scriptloader.loadSubScript(script, window);
     });
   }
 }
-}
+})();
