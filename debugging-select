# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  1ff80cf9f26d5406d240cb97a95391b271d5cd9e

diff --git a/toolkit/actors/SelectChild.jsm b/toolkit/actors/SelectChild.jsm
--- a/toolkit/actors/SelectChild.jsm
+++ b/toolkit/actors/SelectChild.jsm
@@ -64,17 +64,17 @@ Object.defineProperty(SelectContentHelpe
     return gOpen;
   },
 });
 
 this.SelectContentHelper.prototype = {
   init() {
     let win = this.element.ownerGlobal;
     win.addEventListener("pagehide", this, { mozSystemGroup: true });
-    this.element.addEventListener("blur", this, { mozSystemGroup: true });
+    // this.element.addEventListener("blur", this, { mozSystemGroup: true });
     this.element.addEventListener("transitionend", this, {
       mozSystemGroup: true,
     });
     let MutationObserver = this.element.ownerGlobal.MutationObserver;
     this.mut = new MutationObserver(mutations => {
       // Something changed the <select> while it was open, so
       // we'll poke a DeferredTask to update the parent sometime
       // in the very near future.
@@ -93,17 +93,17 @@ this.SelectContentHelper.prototype = {
       false
     );
   },
 
   uninit() {
     this.element.openInParentProcess = false;
     let win = this.element.ownerGlobal;
     win.removeEventListener("pagehide", this, { mozSystemGroup: true });
-    this.element.removeEventListener("blur", this, { mozSystemGroup: true });
+    // this.element.removeEventListener("blur", this, { mozSystemGroup: true });
     this.element.removeEventListener("transitionend", this, {
       mozSystemGroup: true,
     });
     this.element = null;
     this.actor = null;
     this.mut.disconnect();
     this._updateTimer.disarm();
     this._updateTimer = null;
diff --git a/toolkit/actors/SelectParent.jsm b/toolkit/actors/SelectParent.jsm
--- a/toolkit/actors/SelectParent.jsm
+++ b/toolkit/actors/SelectParent.jsm
@@ -227,25 +227,41 @@ var SelectParentHelper = {
         constraintRect.top + win.mozInnerScreenY,
         constraintRect.width,
         constraintRect.height
       );
       menupopup.setConstraintRect(constraintRect);
     } else {
       menupopup.setConstraintRect(new win.DOMRect(0, 0, 0, 0));
     }
+    console.log(
+      menupopup.scrollBox.scrollbox.scrollTop,
+      "Size:",
+      menupopup,
+      rect,
+      `temp0.openPopupAtScreenRect(
+      ${AppConstants.platform == "macosx" ? '"selection"' : '"after_start"'},
+      ${rect.left},
+      ${rect.top},
+      ${rect.width},
+      ${rect.height},
+      false,
+      false
+    );`
+    );
     menupopup.openPopupAtScreenRect(
       AppConstants.platform == "macosx" ? "selection" : "after_start",
       rect.left,
       rect.top,
       rect.width,
       rect.height,
       false,
       false
     );
+    console.log("After open ", menupopup.scrollBox.scrollbox.scrollTop);
   },
 
   hide(menulist, browser) {
     if (this._currentBrowser == browser) {
       menulist.menupopup.hidePopup();
     }
   },
 
@@ -324,16 +340,17 @@ var SelectParentHelper = {
       // opened menulist is, and what browser it belongs to...
       if (!this._currentMenulist) {
         return;
       }
 
       let scrollBox = this._currentMenulist.menupopup.scrollBox.scrollbox;
       let scrollTop = scrollBox.scrollTop;
 
+      console.log(scrollBox, scrollTop);
       let options = msg.data.options;
       let selectedIndex = msg.data.selectedIndex;
       this.populate(
         this._currentMenulist,
         options.options,
         options.uniqueStyles,
         selectedIndex,
         this._currentZoom,
