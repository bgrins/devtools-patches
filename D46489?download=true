diff --git a/accessible/generic/DocAccessible.cpp b/accessible/generic/DocAccessible.cpp
--- a/accessible/generic/DocAccessible.cpp
+++ b/accessible/generic/DocAccessible.cpp
@@ -1178,21 +1178,6 @@
       return nullptr;
     }
 
-    // Check if node is in an unselected deck panel
-    if (aNoContainerIfPruned && currNode->IsXULElement()) {
-      if (nsIFrame* frame = currNode->AsContent()->GetPrimaryFrame()) {
-        nsDeckFrame* deckFrame = do_QueryFrame(frame->GetParent());
-        if (deckFrame && deckFrame->GetSelectedBox() != frame) {
-          // If deck is not a <tabpanels>, return null
-          nsIContent* parentFrameContent = deckFrame->GetContent();
-          if (!parentFrameContent ||
-              !parentFrameContent->IsXULElement(nsGkAtoms::tabpanels)) {
-            return nullptr;
-          }
-        }
-      }
-    }
-
     if (Accessible* accessible = GetAccessible(currNode)) {
       return accessible;
     }
diff --git a/toolkit/content/tests/chrome/test_deck.xul b/toolkit/content/tests/chrome/test_deck.xul
--- a/toolkit/content/tests/chrome/test_deck.xul
+++ b/toolkit/content/tests/chrome/test_deck.xul
@@ -7,8 +7,8 @@
 <window title="Deck Test"
         onload="setTimeout(run_tests, 0);"
         xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
-  <script src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>      
-  <script src="chrome://mochikit/content/tests/SimpleTest/EventUtils.js"></script>      
+  <script src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
+  <script src="chrome://mochikit/content/tests/SimpleTest/EventUtils.js"></script>
 
 <deck id="deck1" style="padding-top: 5px; padding-bottom: 12px;">
   <button id="d1b1" label="Button One"/>
@@ -47,20 +47,26 @@
 
 SimpleTest.waitForExplicitFinish();
 
-function run_tests() {
-  test_deck();
-  test_deck_child_removal();
+async function run_tests() {
+  await test_deck();
+  await test_deck_child_removal();
   SimpleTest.finish();
 }
 
-function test_deck()
+async function test_deck()
 {
   var deck = $("deck1");
   ok(deck.selectedIndex === '0', "deck one selectedIndex");
-  // this size is the button height, 80, plus the button padding of 1px on each side,
+  // this size is the button height, 19.5, plus the button margin of 5px and 3px,
   // plus the deck's 5px top padding and the 12px bottom padding.
-  var rect = deck.getBoundingClientRect();
-  is(Math.round(rect.bottom) - Math.round(rect.top), 99, "deck size of largest child");
+  let rect = deck.getBoundingClientRect();
+  let deckStyle = window.getComputedStyle(deck);
+  let panelRect = deck.selectedPanel.getBoundingClientRect();
+  let panelStyle = window.getComputedStyle(deck.selectedPanel);
+  let panelHeight = panelRect.height +
+    parseInt(panelStyle.marginTop) + parseInt(panelStyle.marginBottom) +
+    parseInt(deckStyle.paddingTop) + parseInt(deckStyle.paddingBottom);
+  is(rect.height, panelHeight, "deck size of visible child");
   synthesizeMouseExpectEvent(deck, 12, 12, { }, $("d1b1"), "click", "mouse on deck one");
 
   // change the selected page of the deck and ensure that the mouse click goes
@@ -74,7 +80,7 @@
   synthesizeMouseExpectEvent(deck, 9, 9, { }, $("d2b2"), "click", "mouse on deck two");
 }
 
-function test_deck_child_removal()
+async function test_deck_child_removal()
 {
   // Start with a simple case where we have two child nodes in a deck, with
   // the second child (index 1) selected. Removing the first node should
@@ -86,6 +92,7 @@
   // Remove the child at the 0th index. The deck should automatically
   // set the selectedIndex to "0".
   child.remove();
+  await waitForSelect(deck);
   is(deck.selectedIndex, "0", "Should have the deck element at index 0 selected");
 
   // Now scale it up by using a deck with 7 child nodes, and remove the
@@ -99,6 +106,7 @@
   for (let i = 0; i < 3; ++i) {
     deck.firstChild.remove();
     expectedIndex--;
+    await waitForSelect(deck);
     is(deck.selectedIndex, String(expectedIndex),
        "Should have the deck element at index " + expectedIndex + " selected");
   }
@@ -125,6 +133,17 @@
        "Should have the deck element at index " + expectedIndex + " selected");
   }
 }
+
+function waitForSelect(deck)
+{
+  return new Promise((resolve) => {
+    const listener = () => {
+      deck.removeEventListener("select", listener);
+      resolve();
+    };
+    deck.addEventListener("select", listener);
+  });
+}
 ]]>
 </script>
 
diff --git a/toolkit/content/widgets/general.js b/toolkit/content/widgets/general.js
--- a/toolkit/content/widgets/general.js
+++ b/toolkit/content/widgets/general.js
@@ -8,12 +8,51 @@
 // a block to prevent accidentally leaking globals onto `window`.
 {
   class MozDeck extends MozXULElement {
+    constructor() {
+      super();
+      this._selectedPanel = null;
+
+      this.observer = new MutationObserver(() => {
+        if (this.selectedPanel.parentNode == this) {
+          this.selectedPanel = this.selectedPanel;
+        } else {
+          this.selectedIndex = "0";
+        }
+      });
+    }
+
+    connectedCallback() {
+      if (this.delayConnectedCallback()) {
+        return;
+      }
+
+      this.selectedIndex = this.selectedIndex;
+      this.observer.observe(this, {
+        childList: true,
+      });
+    }
+
+    disconnectedCallback() {
+      this.observer.disconnect();
+    }
+
     set selectedIndex(val) {
-      if (this.selectedIndex == val) {
+      let prevSelected = this._selectedPanel;
+      let selected = this.children[val];
+      if (prevSelected != selected) {
+        if (prevSelected) {
+          prevSelected.removeAttribute("selected");
+        }
+        if (selected) {
+          selected.setAttribute("selected", "true");
+        }
+        this._selectedPanel = selected;
+      } else if (this.selectedIndex == val) {
         return val;
       }
+
       this.setAttribute("selectedIndex", val);
-      var event = document.createEvent("Events");
+      let event = document.createEvent("Events");
       event.initEvent("select", true, true);
       this.dispatchEvent(event);
       return val;
@@ -26,7 +65,7 @@
     set selectedPanel(val) {
       var selectedIndex = -1;
       for (
-        var panel = val;
+        let panel = val;
         panel != null;
         panel = panel.previousElementSibling
       ) {
@@ -37,7 +76,7 @@
     }
 
     get selectedPanel() {
-      return this.children[this.selectedIndex];
+      return this._selectedPanel;
     }
   }
 
diff --git a/toolkit/content/xul.css b/toolkit/content/xul.css
--- a/toolkit/content/xul.css
+++ b/toolkit/content/xul.css
@@ -394,7 +394,15 @@
 /********** deck & stack *********/
 
 deck {
-  display: -moz-deck;
+  display: grid;
+}
+
+deck > * {
+  grid-area: 1/1;
+}
+
+deck > *:not([selected]) {
+  visibility: hidden;
 }
 
 stack {

