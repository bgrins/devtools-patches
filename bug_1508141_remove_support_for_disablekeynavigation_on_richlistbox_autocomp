# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1545242396 28800
#      Wed Dec 19 09:59:56 2018 -0800
# Node ID 92624d51e9ac11aa32abfbaefb6e58deed19f7c9
# Parent  6b4a345b50e94310091b01e8db32b3028ca58f89
Bug 1508141 - Remove support for disableKeyNavigation on richlistbox, autocomplete and tree bindings;r=timdream

Differential Revision: https://phabricator.services.mozilla.com/D14992

diff --git a/browser/base/content/urlbarBindings.xml b/browser/base/content/urlbarBindings.xml
--- a/browser/base/content/urlbarBindings.xml
+++ b/browser/base/content/urlbarBindings.xml
@@ -328,24 +328,22 @@ file, You can obtain one at http://mozil
                   // The user is explicitly making a selection, so the popup
                   // should get accessibility focus.
                   this.popup.richlistbox.suppressMenuItemEvent = false;
                 }
                 break;
             }
           }
 
-          if (!this.popup.disableKeyNavigation) {
-            if (!aNoDefer && this._shouldDeferKeyEvent(aEvent)) {
-              this._deferKeyEvent(aEvent, "onKeyPress");
-              return false;
-            }
-            if (this.popup.popupOpen && this.popup.handleKeyPress(aEvent)) {
-              return true;
-            }
+          if (!aNoDefer && this._shouldDeferKeyEvent(aEvent)) {
+            this._deferKeyEvent(aEvent, "onKeyPress");
+            return false;
+          }
+          if (this.popup.popupOpen && this.popup.handleKeyPress(aEvent)) {
+            return true;
           }
           return this.handleKeyPress(aEvent);
         ]]></body>
       </method>
 
       <!--
         Search results arrive asynchronously, which means that keypresses may
         arrive before results do and therefore not have the effect the user
diff --git a/toolkit/content/widgets/autocomplete.xml b/toolkit/content/widgets/autocomplete.xml
--- a/toolkit/content/widgets/autocomplete.xml
+++ b/toolkit/content/widgets/autocomplete.xml
@@ -303,21 +303,16 @@
                 onget="return this.getAttribute('tabscrolling') == 'true';"/>
 
       <!-- option to completely ignore any blur events while searches are
            still going on. -->
       <property name="ignoreBlurWhileSearching"
                 onset="this.setAttribute('ignoreblurwhilesearching', val); return val;"
                 onget="return this.getAttribute('ignoreblurwhilesearching') == 'true';"/>
 
-      <!-- disable key navigation handling in the popup results -->
-      <property name="disableKeyNavigation"
-                onset="this.setAttribute('disablekeynavigation', val); return val;"
-                onget="return this.getAttribute('disablekeynavigation') == 'true';"/>
-
       <!-- option to highlight entries that don't have any matches -->
       <property name="highlightNonMatches"
                 onset="this.setAttribute('highlightnonmatches', val); return val;"
                 onget="return this.getAttribute('highlightnonmatches') == 'true';"/>
 
       <!-- =================== PRIVATE MEMBERS =================== -->
 
       <!-- ::::::::::::: autocomplete controller ::::::::::::: -->
@@ -414,28 +409,28 @@
 
           const isMac = /Mac/.test(navigator.platform);
           var cancel = false;
 
           // Catch any keys that could potentially move the caret. Ctrl can be
           // used in combination with these keys on Windows and Linux; and Alt
           // can be used on OS X, so make sure the unused one isn't used.
           let metaKey = isMac ? aEvent.ctrlKey : aEvent.altKey;
-          if (!this.disableKeyNavigation && !metaKey) {
+          if (!metaKey) {
             switch (aEvent.keyCode) {
               case KeyEvent.DOM_VK_LEFT:
               case KeyEvent.DOM_VK_RIGHT:
               case KeyEvent.DOM_VK_HOME:
                 cancel = this.mController.handleKeyNavigation(aEvent.keyCode);
                 break;
             }
           }
 
           // Handle keys that are not part of a keyboard shortcut (no Ctrl or Alt)
-          if (!this.disableKeyNavigation && !aEvent.ctrlKey && !aEvent.altKey) {
+          if (!aEvent.ctrlKey && !aEvent.altKey) {
             switch (aEvent.keyCode) {
               case KeyEvent.DOM_VK_TAB:
                 if (this.tabScrolling && this.popup.popupOpen)
                   cancel = this.mController.handleKeyNavigation(aEvent.shiftKey ?
                                                                 KeyEvent.DOM_VK_UP :
                                                                 KeyEvent.DOM_VK_DOWN);
                 else if (this.forceComplete && this.mController.matchCount >= 1)
                   this.mController.handleTab();
@@ -446,17 +441,16 @@
               case KeyEvent.DOM_VK_PAGE_DOWN:
                 cancel = this.mController.handleKeyNavigation(aEvent.keyCode);
                 break;
             }
           }
 
           // Handle readline/emacs-style navigation bindings on Mac.
           if (isMac &&
-              !this.disableKeyNavigation &&
               this.popup.popupOpen &&
               aEvent.ctrlKey &&
               (aEvent.key === "n" || aEvent.key === "p")) {
 
             const effectiveKey = (aEvent.key === "p") ?
                                  KeyEvent.DOM_VK_UP :
                                  KeyEvent.DOM_VK_DOWN;
             cancel = this.mController.handleKeyNavigation(effectiveKey);
diff --git a/toolkit/content/widgets/richlistbox.xml b/toolkit/content/widgets/richlistbox.xml
--- a/toolkit/content/widgets/richlistbox.xml
+++ b/toolkit/content/widgets/richlistbox.xml
@@ -688,27 +688,16 @@
 
             // Partially visible items are also considered visible
             return (aItem.boxObject.y + aItem.boxObject.height > y) &&
                    (aItem.boxObject.y < y + this._scrollbox.boxObject.height);
           ]]>
         </body>
       </method>
 
-      <property name="disableKeyNavigation"
-                onget="return this.hasAttribute('disableKeyNavigation');">
-        <setter>
-          if (val)
-            this.setAttribute("disableKeyNavigation", "true");
-          else
-            this.removeAttribute("disableKeyNavigation");
-          return val;
-        </setter>
-      </property>
-
       <property name="suppressOnSelect"
                 onget="return this.getAttribute('suppressonselect') == 'true';"
                 onset="this.setAttribute('suppressonselect', val);"/>
 
       <property name="_selectDelay"
                 onset="this.setAttribute('_selectDelay', val);"
                 onget="return this.getAttribute('_selectDelay') || 50;"/>
 
@@ -894,18 +883,17 @@
             }
           }
           this._lastKeyTime = 0;
         ]]>
       </handler>
 
       <handler event="keypress" phase="target">
         <![CDATA[
-          if (this.disableKeyNavigation || !event.charCode ||
-              event.altKey || event.ctrlKey || event.metaKey)
+          if (!event.charCode || event.altKey || event.ctrlKey || event.metaKey)
             return;
 
           if (event.timeStamp - this._lastKeyTime > 1000)
             this._incrementalString = "";
 
           var key = String.fromCharCode(event.charCode).toLowerCase();
           this._incrementalString += key;
           this._lastKeyTime = event.timeStamp;
diff --git a/toolkit/content/widgets/tree.xml b/toolkit/content/widgets/tree.xml
--- a/toolkit/content/widgets/tree.xml
+++ b/toolkit/content/widgets/tree.xml
@@ -87,21 +87,16 @@
       <property name="inputField" readonly="true">
         <getter><![CDATA[
           if (!this._inputField)
             this._inputField = document.getAnonymousElementByAttribute(this, "anonid", "input");
           return this._inputField;
         ]]></getter>
       </property>
 
-      <property name="disableKeyNavigation"
-                onget="return this.hasAttribute('disableKeyNavigation');"
-                onset="if (val) this.setAttribute('disableKeyNavigation', 'true');
-                       else this.removeAttribute('disableKeyNavigation'); return val;"/>
-
       <field name="_editingRow">-1</field>
       <field name="_editingColumn">null</field>
 
       <property name="editingRow" readonly="true"
                 onget="return this._editingRow;"/>
       <property name="editingColumn" readonly="true"
                 onget="return this._editingColumn;"/>
 
@@ -864,17 +859,17 @@
 
          if (event.charCode == " ".charCodeAt(0)) {
            var c = this.currentIndex;
            if (!this.view.selection.isSelected(c) ||
                (!this.view.selection.single && event.getModifierState("Accel"))) {
              this.view.selection.toggleSelect(c);
              event.preventDefault();
            }
-         } else if (!this.disableKeyNavigation && event.charCode > 0 &&
+         } else if (event.charCode > 0 &&
                     !event.altKey && !event.getModifierState("Accel") &&
                     !event.metaKey && !event.ctrlKey) {
            var l = this._keyNavigate(event);
            if (l >= 0) {
              this.view.selection.timedSelect(l, this._selectDelay);
              this.treeBoxObject.ensureRowIsVisible(l);
            }
            event.preventDefault();
