
# HG changeset patch
# User jarjun <arjun.jain@duke.edu>
# Date 1444254880 25200
# Node ID 43389f2125b3b3f5dc5416d54b21a42c13df4a30
# Parent  ba28fd929617d3673936f8a31ef40e3e6017f3c8
Bug 1039482 - Changed font copying, DOM structure changed for rename and new file, added invisible arrow expander, and fixed tests. r=bgrins

---
 devtools/client/projecteditor/lib/tree.js          | 41 +++++++++++++++++++---
 .../test/browser_projecteditor_rename_file.js      |  2 +-
 devtools/client/shared/inplace-editor.js           | 10 ++++--
 .../client/themes/projecteditor/projecteditor.css  |  2 +-
 4 files changed, 47 insertions(+), 8 deletions(-)

diff --git a/devtools/client/projecteditor/lib/tree.js b/devtools/client/projecteditor/lib/tree.js
--- a/devtools/client/projecteditor/lib/tree.js
+++ b/devtools/client/projecteditor/lib/tree.js
@@ -222,16 +222,35 @@ var TreeView = Class({
   },
 
   destroy: function() {
     this._destroyed = true;
     this.elt.remove();
   },
 
   /**
+   * Helper function to create DOM elements for promptNew and promptEdit
+   */
+  createInputContainer: function() {
+    let inputholder = this.doc.createElementNS(HTML_NS, "div");
+    inputholder.className = "child entry";
+
+    let expander = this.doc.createElementNS(HTML_NS, "span");
+    expander.className = "arrow expander";
+    expander.setAttribute("invisible", "");
+    inputholder.appendChild(expander);
+
+    let placeholder = this.doc.createElementNS(HTML_NS, "div");
+    placeholder.className = "child";
+    inputholder.appendChild(placeholder);
+
+    return {inputholder, placeholder};
+  },
+
+  /**
    * Prompt the user to create a new file in the tree.
    *
    * @param string initial
    *               The suggested starting file name
    * @param Resource parent
    * @param Resource sibling
    *                 Which resource to put this next to.  If not set,
    *                 it will be put in front of all other children.
@@ -241,27 +260,28 @@ var TreeView = Class({
    *          Rejected if it is cancelled
    */
   promptNew: function(initial, parent, sibling=null) {
     let deferred = promise.defer();
 
     let parentContainer = this._containers.get(parent);
     let item = this.doc.createElement("li");
     item.className = "child";
-    let placeholder = this.doc.createElementNS(HTML_NS, "div");
-    placeholder.className = "child";
-    item.appendChild(placeholder);
+
+    let {inputholder,placeholder} = this.createInputContainer();
+    item.appendChild(inputholder);
 
     let children = parentContainer.children;
     sibling = sibling ? this._containers.get(sibling).elt : null;
     parentContainer.children.insertBefore(item, sibling ? sibling.nextSibling : children.firstChild);
 
     new InplaceEditor({
       element: placeholder,
       initial: initial,
+      preserveTextStyles: true,
       start: editor => {
         editor.input.select();
       },
       done: function(val, commit) {
         if (commit) {
           deferred.resolve(val);
         } else {
           deferred.reject(val);
@@ -284,25 +304,38 @@ var TreeView = Class({
    * @param resource
    *
    * @returns Promise
    *          Resolves once the prompt has been successful,
    *          Rejected if it is cancelled
    */
   promptEdit: function(initial, resource) {
     let deferred = promise.defer();
-    let placeholder = this._containers.get(resource).elt;
+    let item = this._containers.get(resource).elt;
+    let originalText = item.childNodes[0];
+
+    let {inputholder,placeholder} = this.createInputContainer();
+    item.insertBefore(inputholder, originalText);
+
+    item.removeChild(originalText);
 
     new InplaceEditor({
       element: placeholder,
       initial: initial,
+      preserveTextStyles: true,
       start: editor => {
         editor.input.select();
       },
       done: function(val, commit) {
+        if (val === initial) {
+          item.insertBefore(originalText, inputholder);
+        }
+
+        item.removeChild(inputholder);
+
         if (commit) {
           deferred.resolve(val);
         } else {
           deferred.reject(val);
         }
       },
     });
 
diff --git a/devtools/client/projecteditor/test/browser_projecteditor_rename_file.js b/devtools/client/projecteditor/test/browser_projecteditor_rename_file.js
--- a/devtools/client/projecteditor/test/browser_projecteditor_rename_file.js
+++ b/devtools/client/projecteditor/test/browser_projecteditor_rename_file.js
@@ -67,16 +67,16 @@ function renameWithContextMenu(projected
       }, (ex) => {
         ok (false, "Failed to rename file");
         defer.resolve();
       });
     });
 
     renameCommand.click();
     popup.hidePopup();
-    let input = container.elt.previousElementSibling;
+    let input = container.elt.childNodes[0].childNodes[1];
     input.value = resource.basename + newName;
     EventUtils.synthesizeKey("VK_RETURN", {}, projecteditor.window);
   });
 
   openContextMenuOn(container.label);
   return defer.promise;
 }
diff --git a/devtools/client/shared/inplace-editor.js b/devtools/client/shared/inplace-editor.js
--- a/devtools/client/shared/inplace-editor.js
+++ b/devtools/client/shared/inplace-editor.js
@@ -87,16 +87,18 @@ Cu.import("resource://gre/modules/devtoo
  *       If true, shift tab will not advance the editor to the previous
  *       focusable element.
  *    {String} trigger: The DOM event that should trigger editing,
  *      defaults to "click"
  *    {Boolean} multiline: Should the editor be a multiline textarea?
  *      defaults to false
  *    {Boolean} trimOutput: Should the returned string be trimmed?
  *      defaults to true
+ *    {Boolean} preserveTextStyles: Calls copyTextStyles when false, does not when true.
+ *      defaults to false
  */
 function editableField(options) {
   return editableItem(options, function(element, event) {
     if (!options.element.inplaceEditor) {
       new InplaceEditor(options, event);
     }
   });
 }
@@ -199,16 +201,19 @@ function InplaceEditor(options, event) {
                     ? true
                     : !!options.trimOutput;
   this.stopOnShiftTab = !!options.stopOnShiftTab;
   this.stopOnTab = !!options.stopOnTab;
   this.stopOnReturn = !!options.stopOnReturn;
   this.contentType = options.contentType || CONTENT_TYPES.PLAIN_TEXT;
   this.property = options.property;
   this.popup = options.popup;
+  this.preserveTextStyles = options.preserveTextStyles === undefined
+                          ? false
+                          : !!options.preserveTextStyles;
 
   this._onBlur = this._onBlur.bind(this);
   this._onKeyPress = this._onKeyPress.bind(this);
   this._onInput = this._onInput.bind(this);
   this._onKeyup = this._onKeyup.bind(this);
 
   this._createInput();
   this._autosize();
@@ -278,18 +283,19 @@ InplaceEditor.prototype = {
   },
 
   _createInput: function() {
     this.input =
       this.doc.createElementNS(HTML_NS, this.multiline ? "textarea" : "input");
     this.input.inplaceEditor = this;
     this.input.classList.add("styleinspector-propertyeditor");
     this.input.value = this.initial;
-
-    copyTextStyles(this.elt, this.input);
+    if (!this.preserveTextStyles) {
+      copyTextStyles(this.elt, this.input);
+    }
   },
 
   /**
    * Get rid of the editor.
    */
   _clear: function() {
     if (!this.input) {
       // Already cleared.
diff --git a/devtools/client/themes/projecteditor/projecteditor.css b/devtools/client/themes/projecteditor/projecteditor.css
--- a/devtools/client/themes/projecteditor/projecteditor.css
+++ b/devtools/client/themes/projecteditor/projecteditor.css
@@ -52,17 +52,17 @@
 
   /* Allows this to expand inside of parent xul element, while
      still supporting child flexbox elements, including ellipses. */
   -moz-box-flex: 1;
   display: block;
 }
 
 .sources-tree input {
-  margin: 2px;
+  margin: -1px;
   border: 1px solid gray;
 }
 
 #main-deck .sources-tree {
   background: rgb(225, 225, 225);
   min-width: 100px;
 }
 
