# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  18859d2fec94f35e924e9093a99169623e0b2d78

diff --git a/devtools/server/actors/accessibility.js b/devtools/server/actors/accessibility.js
--- a/devtools/server/actors/accessibility.js
+++ b/devtools/server/actors/accessibility.js
@@ -12,17 +12,18 @@ const { Actor, ActorClassWithSpec } = re
 const defer = require("devtools/shared/defer");
 const events = require("devtools/shared/event-emitter");
 const {
   accessibleSpec,
   accessibleWalkerSpec,
   accessibilitySpec
 } = require("devtools/shared/specs/accessibility");
 
-const { isXUL } = require("devtools/server/actors/highlighters/utils/markup");
+loader.lazyRequireGetter(this, "isXULWindow", "devtools/server/actors/inspector/utils", true);
+
 const { isWindowIncluded } = require("devtools/shared/layout/utils");
 const { CustomHighlighterActor, register } =
   require("devtools/server/actors/highlighters");
 const { getContrastRatioFor } = require("devtools/server/actors/utils/accessibility");
 const PREF_ACCESSIBILITY_FORCE_DISABLED = "accessibility.force_disabled";
 
 const nsIAccessibleEvent = Ci.nsIAccessibleEvent;
 const nsIAccessibleStateChangeEvent = Ci.nsIAccessibleStateChangeEvent;
@@ -476,18 +477,18 @@ const AccessibleWalkerActor = ActorClass
     this.targetActor = targetActor;
     this.refMap = new Map();
     this.setA11yServiceGetter();
     this.onPick = this.onPick.bind(this);
     this.onHovered = this.onHovered.bind(this);
     this.onKey = this.onKey.bind(this);
     this.onHighlighterEvent = this.onHighlighterEvent.bind(this);
 
-    this.highlighter = CustomHighlighterActor(this, isXUL(this.rootWin) ?
-      "XULWindowAccessibleHighlighter" : "AccessibleHighlighter");
+    this.highlighter = CustomHighlighterActor(this, isXULWindow(this.rootWin) ?
+       "XULWindowAccessibleHighlighter" : "AccessibleHighlighter");
 
     this.manage(this.highlighter);
     this.highlighter.on("highlighter-event", this.onHighlighterEvent);
   },
 
   setA11yServiceGetter() {
     DevToolsUtils.defineLazyGetter(this, "a11yService", () => {
       Services.obs.addObserver(this, "accessible-event");
@@ -614,17 +615,17 @@ const AccessibleWalkerActor = ActorClass
    *
    * @return {Promise}
    */
   getDocument() {
     if (!this.rootDoc || !this.rootDoc.documentElement) {
       return this.once("document-ready").then(docAcc => this.addRef(docAcc));
     }
 
-    if (isXUL(this.rootWin)) {
+    if (isXULWindow(this.rootDoc)) {
       const doc = this.addRef(this.getRawAccessibleFor(this.rootDoc));
       return Promise.resolve(doc);
     }
 
     const doc = this.getRawAccessibleFor(this.rootDoc);
     if (isStale(doc)) {
       return this.once("document-ready").then(docAcc => this.addRef(docAcc));
     }
diff --git a/devtools/server/actors/highlighters.js b/devtools/server/actors/highlighters.js
--- a/devtools/server/actors/highlighters.js
+++ b/devtools/server/actors/highlighters.js
@@ -8,17 +8,18 @@ const { Ci, Cu } = require("chrome");
 
 const ChromeUtils = require("ChromeUtils");
 const EventEmitter = require("devtools/shared/event-emitter");
 const protocol = require("devtools/shared/protocol");
 const Services = require("Services");
 const { highlighterSpec, customHighlighterSpec } = require("devtools/shared/specs/highlighters");
 
 loader.lazyRequireGetter(this, "isWindowIncluded", "devtools/shared/layout/utils", true);
-loader.lazyRequireGetter(this, "isXUL", "devtools/server/actors/highlighters/utils/markup", true);
+
+loader.lazyRequireGetter(this, "isXULWindow", "devtools/server/actors/inspector/utils", true);
 loader.lazyRequireGetter(this, "SimpleOutlineHighlighter", "devtools/server/actors/highlighters/simple-outline", true);
 loader.lazyRequireGetter(this, "BoxModelHighlighter", "devtools/server/actors/highlighters/box-model", true);
 
 const HIGHLIGHTER_PICKED_TIMER = 1000;
 const IS_OSX = Services.appinfo.OS === "Darwin";
 
 /**
  * The registration mechanism for highlighters provide a quick way to
@@ -112,18 +113,17 @@ exports.HighlighterActor = protocol.Acto
 
   form: function() {
     return {
       actor: this.actorID,
     };
   },
 
   _createHighlighter: function() {
-    this._isPreviousWindowXUL = isXUL(this._targetActor.window);
-
+    this._isPreviousWindowXUL = isXULWindow(this._targetActor.window);
     if (!this._isPreviousWindowXUL) {
       this._highlighter = new BoxModelHighlighter(this._highlighterEnv,
                                                   this._inspector);
       this._highlighter.on("ready", this._highlighterReady);
       this._highlighter.on("hide", this._highlighterHidden);
     } else {
       this._highlighter = new SimpleOutlineHighlighter(this._highlighterEnv);
     }
@@ -143,17 +143,17 @@ exports.HighlighterActor = protocol.Acto
   _onNavigate: function({isTopLevel}) {
     // Skip navigation events for non top-level windows, or if the document
     // doesn't exist anymore.
     if (!isTopLevel || !this._targetActor.window.document.documentElement) {
       return;
     }
 
     // Only rebuild the highlighter if the window type changed.
-    if (isXUL(this._targetActor.window) !== this._isPreviousWindowXUL) {
+    if (isXULWindow(this._targetActor.window) !== this._isPreviousWindowXUL) {
       this._destroyHighlighter();
       this._createHighlighter();
     }
   },
 
   destroy: function() {
     protocol.Actor.prototype.destroy.call(this);
 
@@ -447,17 +447,17 @@ exports.CustomHighlighterActor = protoco
       throw new Error(`${typeName} isn't a valid highlighter class (${list})`);
     }
 
     const constructor = require("./highlighters/" + modulePath)[typeName];
     // The assumption is that custom highlighters either need the canvasframe
     // container to append their elements and thus a non-XUL window or they have
     // to define a static XULSupported flag that indicates that the highlighter
     // supports XUL windows. Otherwise, bail out.
-    if (!isXUL(this._parent.targetActor.window) || constructor.XULSupported) {
+    if (!isXULWindow(this._parent.targetActor.window) || constructor.XULSupported) {
       this._highlighterEnv = new HighlighterEnvironment();
       this._highlighterEnv.initFromTargetActor(parent.targetActor);
       this._highlighter = new constructor(this._highlighterEnv);
       if (this._highlighter.on) {
         this._highlighter.on("highlighter-event", this._onHighlighterEvent.bind(this));
       }
     } else {
       throw new Error("Custom " + typeName +
@@ -614,17 +614,18 @@ HighlighterEnvironment.prototype = {
       Ci.nsIWebProgress.NOTIFY_STATE_DOCUMENT);
   },
 
   get isInitialized() {
     return this._win || this._targetActor;
   },
 
   get isXUL() {
-    return isXUL(this.window);
+    console.trace();
+    return isXULWindow(this.window);
   },
 
   get window() {
     if (!this.isInitialized) {
       throw new Error("Initialize HighlighterEnvironment with a targetActor " +
         "or window first");
     }
     const win = this._targetActor ? this._targetActor.window : this._win;
diff --git a/devtools/server/actors/highlighters/box-model.js b/devtools/server/actors/highlighters/box-model.js
--- a/devtools/server/actors/highlighters/box-model.js
+++ b/devtools/server/actors/highlighters/box-model.js
@@ -111,21 +111,22 @@ class BoxModelHighlighter extends AutoRe
 
     this.highlighterEnv.on("will-navigate", this.onWillNavigate);
 
     const { pageListenerTarget } = highlighterEnv;
     pageListenerTarget.addEventListener("pagehide", this.onPageHide);
   }
 
   _buildMarkup() {
-    const doc = this.win.document;
-
-    const highlighterContainer = doc.createElement("div");
-    highlighterContainer.setAttribute("role", "presentation");
-    highlighterContainer.className = "highlighter-container box-model";
+    const highlighterContainer = createNode(this.win, {
+      attributes: {
+        "class": "highlighter-container box-model",
+        "role": "presentation"
+      },
+    });
 
     // Build the root wrapper, used to adapt to the page zoom.
     const rootWrapper = createNode(this.win, {
       parent: highlighterContainer,
       attributes: {
         "id": "root",
         "class": "root",
         "role": "presentation"
diff --git a/devtools/server/actors/highlighters/utils/markup.js b/devtools/server/actors/highlighters/utils/markup.js
--- a/devtools/server/actors/highlighters/utils/markup.js
+++ b/devtools/server/actors/highlighters/utils/markup.js
@@ -9,16 +9,17 @@ const { getCurrentZoom, getWindowDimensi
   getRootBindingParent, loadSheet } = require("devtools/shared/layout/utils");
 const EventEmitter = require("devtools/shared/event-emitter");
 const InspectorUtils = require("InspectorUtils");
 
 const lazyContainer = {};
 
 loader.lazyRequireGetter(lazyContainer, "CssLogic",
   "devtools/server/actors/inspector/css-logic", true);
+loader.lazyRequireGetter(this, "isXULWindow", "devtools/server/actors/inspector/utils", true);
 exports.getComputedStyle = (node) =>
   lazyContainer.CssLogic.getComputedStyle(node);
 
 exports.getBindingElementAndPseudo = (node) =>
   lazyContainer.CssLogic.getBindingElementAndPseudo(node);
 
 exports.hasPseudoClassLock = (...args) =>
   InspectorUtils.hasPseudoClassLock(...args);
@@ -26,17 +27,16 @@ exports.hasPseudoClassLock = (...args) =
 exports.addPseudoClassLock = (...args) =>
   InspectorUtils.addPseudoClassLock(...args);
 
 exports.removePseudoClassLock = (...args) =>
   InspectorUtils.removePseudoClassLock(...args);
 
 const SVG_NS = "http://www.w3.org/2000/svg";
 const XHTML_NS = "http://www.w3.org/1999/xhtml";
-const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
 const STYLESHEET_URI = "resource://devtools/server/actors/" +
                        "highlighters.css";
 
 const _tokens = Symbol("classList/tokens");
 
 /**
  * Shims the element's `classList` for anonymous content elements; used
  * internally by `CanvasFrameAnonymousContentHelper.getElement()` method.
@@ -83,26 +83,16 @@ ClassList.prototype = {
     }
   },
   toString() {
     return this[_tokens].join(" ");
   }
 };
 
 /**
- * Is this content window a XUL window?
- * @param {Window} window
- * @return {Boolean}
- */
-function isXUL(window) {
-  return window.document.documentElement.namespaceURI === XUL_NS;
-}
-exports.isXUL = isXUL;
-
-/**
  * Returns true if a DOM node is "valid", where "valid" means that the node isn't a dead
  * object wrapper, is still attached to a document, and is of a given type.
  * @param {DOMNode} node
  * @param {Number} nodeType Optional, defaults to ELEMENT_NODE
  * @return {Boolean}
  */
 function isNodeValid(node, nodeType = Node.ELEMENT_NODE) {
   // Is it still alive?
@@ -244,17 +234,17 @@ CanvasFrameAnonymousContentHelper.protot
     // Wait for DOMContentLoaded before injecting the anonymous content.
     if (doc.readyState != "interactive" && doc.readyState != "complete") {
       doc.addEventListener("DOMContentLoaded", this._insert.bind(this),
                            { once: true });
       return;
     }
     // Reject XUL documents. Check that after DOMContentLoaded as we query
     // documentElement which is only available after this event.
-    if (isXUL(this.highlighterEnv.window)) {
+    if (isXULWindow(this.highlighterEnv.window)) {
       return;
     }
 
     // For now highlighters.css is injected in content as a ua sheet because
     // we no longer support scoped style sheets (see bug 1345702).
     // If it did, highlighters.css would be injected as an anonymous content
     // node using CanvasFrameAnonymousContentHelper instead.
     loadSheet(this.highlighterEnv.window, STYLESHEET_URI);
@@ -303,16 +293,17 @@ CanvasFrameAnonymousContentHelper.protot
    *   - when swapping frame loaders (moving tabs, toggling RDM)
    */
   _onWindowReady({isTopLevel}) {
     if (isTopLevel) {
       this._removeAllListeners();
       this.elements.clear();
       this._insert();
       this.anonymousContentDocument = this.highlighterEnv.document;
+      console.log(this.anonymousContentDocument);
     }
   },
 
   getComputedStylePropertyValue(id, property) {
     return this.content && this.content.getComputedStylePropertyValue(id, property);
   },
 
   getTextContentForElement(id) {
diff --git a/devtools/server/actors/inspector/inspector.js b/devtools/server/actors/inspector/inspector.js
--- a/devtools/server/actors/inspector/inspector.js
+++ b/devtools/server/actors/inspector/inspector.js
@@ -101,19 +101,19 @@ exports.InspectorActor = protocol.ActorC
   getWalker: function(options = {}) {
     if (this._walkerPromise) {
       return this._walkerPromise;
     }
 
     const deferred = defer();
     this._walkerPromise = deferred.promise;
 
-    const isXULDocument =
-      this.targetActor.window.document.documentElement.namespaceURI === XUL_NS;
-    const loadEvent = isXULDocument ? "load" : "DOMContentLoaded";
+    const isXULWindow =
+      InspectorActorUtils.isXULWindow(this.targetActor.window);
+    const loadEvent = isXULWindow ? "load" : "DOMContentLoaded";
 
     const window = this.window;
     const domReady = () => {
       const targetActor = this.targetActor;
       window.removeEventListener(loadEvent, domReady, true);
       this.walker = WalkerActor(this.conn, targetActor, options);
       this.manage(this.walker);
       this.walker.once("destroyed", () => {
diff --git a/devtools/server/actors/inspector/utils.js b/devtools/server/actors/inspector/utils.js
--- a/devtools/server/actors/inspector/utils.js
+++ b/devtools/server/actors/inspector/utils.js
@@ -13,17 +13,16 @@ loader.lazyRequireGetter(this, "DevTools
 loader.lazyRequireGetter(this, "nodeFilterConstants", "devtools/shared/dom-node-filter-constants");
 
 loader.lazyRequireGetter(this, "isNativeAnonymous", "devtools/shared/layout/utils", true);
 loader.lazyRequireGetter(this, "isXBLAnonymous", "devtools/shared/layout/utils", true);
 
 loader.lazyRequireGetter(this, "CssLogic", "devtools/server/actors/inspector/css-logic", true);
 
 const XHTML_NS = "http://www.w3.org/1999/xhtml";
-const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
 const IMAGE_FETCHING_TIMEOUT = 500;
 
 /**
  * Returns the properly cased version of the node's tag name, which can be
  * used when displaying said name in the UI.
  *
  * @param  {Node} rawNode
  *         Node for which we want the display name
@@ -46,21 +45,21 @@ function nodeDocument(node) {
   return node.ownerDocument ||
          (node.nodeType == Node.DOCUMENT_NODE ? node : null);
 }
 
 function isNodeDead(node) {
   return !node || !node.rawNode || Cu.isDeadWrapper(node.rawNode);
 }
 
-function isInXULDocument(el) {
-  const doc = nodeDocument(el);
-  return doc &&
-         doc.documentElement &&
-         doc.documentElement.namespaceURI === XUL_NS;
+function isXULWindow(win) {
+  console.log("Checking isXULWindow",win.document.documentURI, win && win.document &&
+  win.document.contentType == "application/vnd.mozilla.xul+xml");
+  return win && win.document &&
+    win.document.contentType == "application/vnd.mozilla.xul+xml";
 }
 
 /**
  * This DeepTreeWalker filter skips whitespace text nodes and anonymous
  * content with the exception of ::before and ::after and anonymous content
  * in XUL document (needed to show all elements in the browser toolbox).
  */
 function standardTreeWalkerFilter(node) {
@@ -73,21 +72,21 @@ function standardTreeWalkerFilter(node) 
 
   // Ignore empty whitespace text nodes that do not impact the layout.
   if (isWhitespaceTextNode(node)) {
     return nodeHasSize(node)
            ? nodeFilterConstants.FILTER_ACCEPT
            : nodeFilterConstants.FILTER_SKIP;
   }
 
-  // Ignore all native and XBL anonymous content inside a non-XUL document.
+  // Ignore all native and XBL anonymous content inside a non-chrome document.
   // We need to do this to skip things like form controls, scrollbars,
   // video controls, etc (see bug 1187482).
-  if (!isInXULDocument(node) && (isXBLAnonymous(node) ||
-                                  isNativeAnonymous(node))) {
+  if (!node.ownerDocument.nodePrincipal.isSystemPrincipal &&
+      (isXBLAnonymous(node) || isNativeAnonymous(node))) {
     return nodeFilterConstants.FILTER_SKIP;
   }
 
   return nodeFilterConstants.FILTER_ACCEPT;
 }
 
 /**
  * This DeepTreeWalker filter is like standardTreeWalkerFilter except that
@@ -307,11 +306,12 @@ function getClosestBackgroundImage(node)
 
 module.exports = {
   allAnonymousContentTreeWalkerFilter,
   getClosestBackgroundColor,
   getClosestBackgroundImage,
   getNodeDisplayName,
   imageToImageData,
   isNodeDead,
+  isXULWindow,
   nodeDocument,
   standardTreeWalkerFilter,
 };
