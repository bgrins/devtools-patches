# HG changeset patch
# User Paul Rouget <paul@mozilla.com>
Bug 1021475 - [appmgr v2] update app header in projectEditor. r=bgrins


diff --git a/browser/devtools/projecteditor/lib/plugins/app-manager/plugin.js b/browser/devtools/projecteditor/lib/plugins/app-manager/plugin.js
index d397923..668407b 100644
--- a/browser/devtools/projecteditor/lib/plugins/app-manager/plugin.js
+++ b/browser/devtools/projecteditor/lib/plugins/app-manager/plugin.js
@@ -13,48 +13,60 @@ var AppManagerRenderer = Class({
   isAppManagerProject: function() {
     return !!this.host.project.appManagerOpts;
   },
   editorForResource: function(resource) {
     if (!resource.parent && this.isAppManagerProject()) {
       return AppProjectEditor;
     }
   },
+  getUI: function(parent) {
+    let doc = parent.ownerDocument;
+    if (parent.childElementCount == 0) {
+      let image = doc.createElement("image");
+      let optionImage = doc.createElement("image");
+      let flexElement = doc.createElement("div");
+      let nameLabel = doc.createElement("span");
+      let statusElement = doc.createElement("div");
+
+      image.className = "project-image";
+      optionImage.className = "project-options";
+      optionImage.setAttribute("src", OPTION_URL);
+      nameLabel.className = "project-name-label";
+      statusElement.className = "project-status";
+      flexElement.className = "project-flex";
+
+      parent.appendChild(image);
+      parent.appendChild(nameLabel);
+      parent.appendChild(flexElement);
+      parent.appendChild(statusElement);
+      parent.appendChild(optionImage);
+    }
+
+    return {
+      image: parent.querySelector(".project-image"),
+      nameLabel: parent.querySelector(".project-name-label"),
+      statusElement: parent.querySelector(".project-status")
+    };
+  },
   onAnnotate: function(resource, editor, elt) {
     if (resource.parent || !this.isAppManagerProject()) {
       return;
     }
 
     let {appManagerOpts} = this.host.project;
     let doc = elt.ownerDocument;
-    let image = doc.createElement("image");
-    let optionImage = doc.createElement("image");
-    let flexElement = doc.createElement("div");
-    let nameLabel = doc.createElement("span");
-    let statusElement = doc.createElement("div");
-
-    image.className = "project-image";
-    optionImage.className = "project-options";
-    nameLabel.className = "project-name-label";
-    statusElement.className = "project-status";
-    flexElement.className = "project-flex";
 
+    let {image,nameLabel,statusElement} = this.getUI(elt);
     let name = appManagerOpts.name || resource.basename;
     let url = appManagerOpts.iconUrl || "icon-sample.png";
     let status = appManagerOpts.validationStatus || "unknown";
 
     nameLabel.textContent = name;
     image.setAttribute("src", url);
-    optionImage.setAttribute("src", OPTION_URL);
-    statusElement.setAttribute("status", status)
-
-    elt.innerHTML = "";
-    elt.appendChild(image);
-    elt.appendChild(nameLabel);
-    elt.appendChild(flexElement);
-    elt.appendChild(statusElement);
-    elt.appendChild(optionImage);
+    statusElement.setAttribute("status", status);
+
     return true;
   }
 });
 
 exports.AppManagerRenderer = AppManagerRenderer;
 registerPlugin(AppManagerRenderer);
diff --git a/browser/devtools/projecteditor/test/browser_projecteditor_app_options.js b/browser/devtools/projecteditor/test/browser_projecteditor_app_options.js
index 2141c19..2478c74 100644
--- a/browser/devtools/projecteditor/test/browser_projecteditor_app_options.js
+++ b/browser/devtools/projecteditor/test/browser_projecteditor_app_options.js
@@ -42,58 +42,43 @@ let test = asyncTest(function*() {
   info ("About to set project with new options.");
   yield projecteditor.setProjectToAppPath(TEMP_PATH, {
     name: "Test2",
     iconUrl: "chrome://browser/skin/devtools/tool-inspector.svg",
     projectOverviewURL: SAMPLE_WEBAPP_URL,
     validationStatus: "error"
   });
 
-  ok (!nameLabel.parentNode, "The old elements have been removed");
-
   info ("Getting ahold of and validating the project header DOM");
-  let image = header.querySelector(".project-image");
-  let nameLabel = header.querySelector(".project-name-label");
-  let statusElement = header.querySelector(".project-status");
   is (statusElement.getAttribute("status"), "error", "The status has been set correctly.");
   is (nameLabel.textContent, "Test2", "The name label has been set correctly");
   is (image.getAttribute("src"), "chrome://browser/skin/devtools/tool-inspector.svg", "The icon has been set correctly");
 
   info ("About to set project with new options.");
   yield projecteditor.setProjectToAppPath(TEMP_PATH, {
     name: "Test3",
     iconUrl: "chrome://browser/skin/devtools/tool-webconsole.svg",
     projectOverviewURL: SAMPLE_WEBAPP_URL,
     validationStatus: "warning"
   });
 
-  ok (!nameLabel.parentNode, "The old elements have been removed");
-
   info ("Getting ahold of and validating the project header DOM");
-  let image = header.querySelector(".project-image");
-  let nameLabel = header.querySelector(".project-name-label");
-  let statusElement = header.querySelector(".project-status");
   is (statusElement.getAttribute("status"), "warning", "The status has been set correctly.");
   is (nameLabel.textContent, "Test3", "The name label has been set correctly");
   is (image.getAttribute("src"), "chrome://browser/skin/devtools/tool-webconsole.svg", "The icon has been set correctly");
 
   info ("About to set project with new options.");
   yield projecteditor.setProjectToAppPath(TEMP_PATH, {
     name: "Test4",
     iconUrl: "chrome://browser/skin/devtools/tool-debugger.svg",
     projectOverviewURL: SAMPLE_WEBAPP_URL,
     validationStatus: "valid"
   });
 
-  ok (!nameLabel.parentNode, "The old elements have been removed");
-
   info ("Getting ahold of and validating the project header DOM");
-  let image = header.querySelector(".project-image");
-  let nameLabel = header.querySelector(".project-name-label");
-  let statusElement = header.querySelector(".project-status");
   is (statusElement.getAttribute("status"), "valid", "The status has been set correctly.");
   is (nameLabel.textContent, "Test4", "The name label has been set correctly");
   is (image.getAttribute("src"), "chrome://browser/skin/devtools/tool-debugger.svg", "The icon has been set correctly");
 
   info ("Test finished, cleaning up");
   projecteditor.project.off("resource-added", failIfResourceAdded);
 });
 
diff --git a/browser/devtools/webide/content/webide.js b/browser/devtools/webide/content/webide.js
index defbb9f..1e8d6ec 100644
--- a/browser/devtools/webide/content/webide.js
+++ b/browser/devtools/webide/content/webide.js
@@ -111,16 +111,17 @@ let UI = {
         break;
       case "runtime":
         this.updateRuntimeButton();
         break;
       case "project-validated":
         this.updateTitle();
         this.updateCommands();
         this.updateProjectButton();
+        this.updateProjectEditorHeader();
         break;
     };
   },
 
   openInBrowser: function(url) {
     // Open a URL in a Firefox window
     let browserWin = Services.wm.getMostRecentWindow("navigator:browser");
     if (browserWin) {
@@ -285,16 +286,35 @@ let UI = {
     let projecteditorIframe = document.querySelector("#projecteditor");
     this.projecteditor = ProjectEditor.ProjectEditor(projecteditorIframe);
     this.projecteditor.on("onEditorSave", (editor, resource) => {
       AppManager.validateProject(AppManager.selectedProject);
     });
     return this.projecteditor.loaded;
   },
 
+  updateProjectEditorHeader: function() {
+    let project = AppManager.selectedProject;
+    if (!project || !this.projecteditor) {
+      return;
+    }
+    let status = project.validationStatus || "unknown";
+    if (status == "error warning") {
+      status = "error";
+    }
+    this.getProjectEditor().then((projecteditor) => {
+      projecteditor.setProjectToAppPath(project.location, {
+        name: project.name,
+        iconUrl: project.icon,
+        projectOverviewURL: "chrome://webide/content/details.xhtml",
+        validationStatus: status
+      });
+    }, console.error);
+  },
+
   isProjectEditorEnabled: function() {
     return Services.prefs.getBoolPref("devtools.webide.showProjectEditor");
   },
 
   openProject: function() {
     let detailsIframe = document.querySelector("#details");
     let projecteditorIframe = document.querySelector("#projecteditor");
 
@@ -328,22 +348,18 @@ let UI = {
       return;
     }
 
     // Show ProjectEditor
 
     detailsIframe.setAttribute("hidden", "true");
     projecteditorIframe.removeAttribute("hidden");
 
-    this.getProjectEditor().then((projecteditor) => {
-      projecteditor.setProjectToAppPath(project.location, {
-        name: project.name,
-        iconUrl: project.icon,
-        projectOverviewURL: "chrome://webide/content/details.xhtml"
-      });
+    this.getProjectEditor().then(() => {
+      this.updateProjectEditorHeader();
     }, console.error);
 
     if (project.location) {
       Services.prefs.setCharPref("devtools.webide.lastprojectlocation", project.location);
     }
   },
 
   /********** COMMANDS **********/
