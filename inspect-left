# HG changeset patch
# Parent 7cf22ab8d6ac1668cad331671c62431d6f403d38
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 991810 - Move the inspector button to the top left;r=vporof

diff --git a/browser/devtools/debugger/test/browser_dbg_addon-panels.js b/browser/devtools/debugger/test/browser_dbg_addon-panels.js
--- a/browser/devtools/debugger/test/browser_dbg_addon-panels.js
+++ b/browser/devtools/debugger/test/browser_dbg_addon-panels.js
@@ -22,17 +22,17 @@ function test() {
     let originalPrefs = PREFS.map(pref => {
       let original = Services.prefs.getBoolPref(pref);
       Services.prefs.setBoolPref(pref, true)
       return original;
     });
 
     // Check only valid tabs are shown
     let tabs = addonDebugger.frame.contentDocument.getElementById("toolbox-tabs").children;
-    let expectedTabs = ["options", "webconsole", "jsdebugger", "scratchpad"];
+    let expectedTabs = ["webconsole", "jsdebugger", "scratchpad"];
 
     is(tabs.length, expectedTabs.length, "displaying only " + expectedTabs.length + " tabs in addon debugger");
     Array.forEach(tabs, (tab, i) => {
       let toolName = expectedTabs[i];
       is(tab.getAttribute("toolid"), toolName, "displaying " + toolName);
     });
 
     // Check no toolbox buttons are shown
diff --git a/browser/devtools/framework/test/browser_toolbox_options_disable_buttons.js b/browser/devtools/framework/test/browser_toolbox_options_disable_buttons.js
--- a/browser/devtools/framework/test/browser_toolbox_options_disable_buttons.js
+++ b/browser/devtools/framework/test/browser_toolbox_options_disable_buttons.js
@@ -53,33 +53,33 @@ function testSelectTool(aToolbox) {
   });
   toolbox.selectTool("options");
 
   return deferred.promise;
 }
 
 function testPreferenceAndUIStateIsConsistent() {
   let checkNodes = [...panelWin.document.querySelectorAll("#enabled-toolbox-buttons-box > checkbox")];
-  let toolboxButtonNodes = [...doc.querySelectorAll("#toolbox-buttons > toolbarbutton")];
+  let toolboxButtonNodes = [...doc.querySelectorAll(".command-button")];
   let toggleableTools = toolbox.toolboxButtons;
 
   for (let tool of toggleableTools) {
     let isVisible = getBoolPref(tool.visibilityswitch);
 
     let button = toolboxButtonNodes.filter(button=>button.id === tool.id)[0];
     is (!button.hasAttribute("hidden"), isVisible, "Button visibility matches pref for " + tool.id);
 
     let check = checkNodes.filter(node=>node.id === tool.id)[0];
     is (check.checked, isVisible, "Checkbox should be selected based on current pref for " + tool.id);
   }
 }
 
 function testToggleToolboxButtons() {
   let checkNodes = [...panelWin.document.querySelectorAll("#enabled-toolbox-buttons-box > checkbox")];
-  let toolboxButtonNodes = [...doc.querySelectorAll("#toolbox-buttons > toolbarbutton")];
+  let toolboxButtonNodes = [...doc.querySelectorAll(".command-button")];
   let visibleButtons = toolboxButtonNodes.filter(button=>!button.hasAttribute("hidden"));
   let toggleableTools = toolbox.toolboxButtons;
 
   is (checkNodes.length, toggleableTools.length, "All of the buttons are toggleable." );
   is (checkNodes.length, toolboxButtonNodes.length, "All of the DOM buttons are toggleable." );
 
   for (let tool of toggleableTools) {
     let id = tool.id;
diff --git a/browser/devtools/framework/toolbox.js b/browser/devtools/framework/toolbox.js
--- a/browser/devtools/framework/toolbox.js
+++ b/browser/devtools/framework/toolbox.js
@@ -550,17 +550,17 @@ Toolbox.prototype = {
    * since we want it to work for remote targets too
    */
   _buildPickerButton: function() {
     this._pickerButton = this.doc.createElement("toolbarbutton");
     this._pickerButton.id = "command-button-pick";
     this._pickerButton.className = "command-button command-button-invertable";
     this._pickerButton.setAttribute("tooltiptext", toolboxStrings("pickButton.tooltip"));
 
-    let container = this.doc.querySelector("#toolbox-buttons");
+    let container = this.doc.querySelector("#toolbox-picker-container");
     container.appendChild(this._pickerButton);
 
     this._togglePicker = this.highlighterUtils.togglePicker.bind(this.highlighterUtils);
     this._pickerButton.addEventListener("command", this._togglePicker, false);
   },
 
   /**
    * Return all toolbox buttons (command buttons, plus any others that were
@@ -685,31 +685,39 @@ Toolbox.prototype = {
     let vbox = this.doc.createElement("vbox");
     vbox.className = "toolbox-panel " + toolDefinition.bgTheme;
 
     // There is already a container for the webconsole frame.
     if (!this.doc.getElementById("toolbox-panel-" + id)) {
       vbox.id = "toolbox-panel-" + id;
     }
 
-    // If there is no tab yet, or the ordinal to be added is the largest one.
-    if (tabs.childNodes.length == 0 ||
-        +tabs.lastChild.getAttribute("ordinal") <= toolDefinition.ordinal) {
-      tabs.appendChild(radio);
+    if (id === "options") {
+      // Options panel is special.  It doesn't belong in the same container as
+      // the other tabs.
+      let optionTabContainer = this.doc.getElementById("toolbox-option-container");
+      optionTabContainer.appendChild(radio);
       deck.appendChild(vbox);
     } else {
-      // else, iterate over all the tabs to get the correct location.
-      Array.some(tabs.childNodes, (node, i) => {
-        if (+node.getAttribute("ordinal") > toolDefinition.ordinal) {
-          tabs.insertBefore(radio, node);
-          deck.insertBefore(vbox, deck.childNodes[i]);
-          return true;
-        }
-        return false;
-      });
+      // If there is no tab yet, or the ordinal to be added is the largest one.
+      if (tabs.childNodes.length == 0 ||
+          +tabs.lastChild.getAttribute("ordinal") <= toolDefinition.ordinal) {
+        tabs.appendChild(radio);
+        deck.appendChild(vbox);
+      } else {
+        // else, iterate over all the tabs to get the correct location.
+        Array.some(tabs.childNodes, (node, i) => {
+          if (+node.getAttribute("ordinal") > toolDefinition.ordinal) {
+            tabs.insertBefore(radio, node);
+            deck.insertBefore(vbox, deck.childNodes[i]);
+            return true;
+          }
+          return false;
+        });
+      }
     }
 
     this._addKeysToWindow();
   },
 
   /**
    * Ensure the tool with the given id is loaded.
    *
@@ -800,16 +808,25 @@ Toolbox.prototype = {
     let selected = this.doc.querySelector(".devtools-tab[selected]");
     if (selected) {
       selected.removeAttribute("selected");
     }
 
     let tab = this.doc.getElementById("toolbox-tab-" + id);
     tab.setAttribute("selected", "true");
 
+    // If options is selected, the separator between it and the
+    // command buttons should be hidden.
+    let sep = this.doc.getElementById("toolbox-controls-separator");
+    if (id === "options") {
+      sep.setAttribute("invisible", "true");
+    } else {
+      sep.removeAttribute("invisible");
+    }
+
     if (this.currentToolId == id) {
       // re-focus tool to get key events again
       this.focusTool(id);
 
       // Return the existing panel in order to have a consistent return value.
       return promise.resolve(this._toolPanels.get(id));
     }
 
@@ -826,30 +843,23 @@ Toolbox.prototype = {
       this._telemetry.toolOpened(id);
     } else {
       throw new Error("No tool found");
     }
 
     let tabstrip = this.doc.getElementById("toolbox-tabs");
 
     // select the right tab, making 0th index the default tab if right tab not
-    // found
-    let index = 0;
-    let tabs = tabstrip.childNodes;
-    for (let i = 0; i < tabs.length; i++) {
-      if (tabs[i] === tab) {
-        index = i;
-        break;
-      }
-    }
-    tabstrip.selectedItem = tab;
+    // found.
+    tabstrip.selectedItem = tab || tabstrip.childNodes[0];
 
     // and select the right iframe
     let deck = this.doc.getElementById("toolbox-deck");
-    deck.selectedIndex = index;
+    let panel = this.doc.getElementById("toolbox-panel-" + id);
+    deck.selectedPanel = panel;
 
     this.currentToolId = id;
     this._refreshConsoleDisplay();
     if (id != "options") {
       Services.prefs.setCharPref(this._prefs.LAST_TOOL, id);
     }
 
     return this.loadTool(id).then(panel => {
diff --git a/browser/devtools/framework/toolbox.xul b/browser/devtools/framework/toolbox.xul
--- a/browser/devtools/framework/toolbox.xul
+++ b/browser/devtools/framework/toolbox.xul
@@ -46,36 +46,27 @@
     <key id="toolbox-zoom-reset-key"
          key="&toolboxZoomReset.key;"
          oncommand="void(0);"
          modifiers="accel"/>
   </keyset>
 
   <notificationbox id="toolbox-notificationbox" flex="1">
     <toolbar class="devtools-tabbar">
-#ifdef XP_MACOSX
-      <hbox id="toolbox-controls">
-        <toolbarbutton id="toolbox-close"
-                       class="devtools-closebutton"
-                       tooltiptext="&toolboxCloseButton.tooltip;"/>
-        <hbox id="toolbox-dock-buttons"/>
-      </hbox>
-#endif
-      <hbox id="toolbox-tabs" flex="1">
-      </hbox>
+      <hbox id="toolbox-picker-container" />
+      <hbox id="toolbox-tabs" flex="1" />
       <hbox id="toolbox-buttons" pack="end"/>
-#ifndef XP_MACOSX
       <vbox id="toolbox-controls-separator"/>
+      <hbox id="toolbox-option-container"/>
       <hbox id="toolbox-controls">
         <hbox id="toolbox-dock-buttons"/>
         <toolbarbutton id="toolbox-close"
                        class="devtools-closebutton"
                        tooltiptext="&toolboxCloseButton.tooltip;"/>
       </hbox>
-#endif
     </toolbar>
     <vbox flex="1">
       <deck id="toolbox-deck" flex="1" minheight="75" />
       <splitter id="toolbox-console-splitter" class="devtools-horizontal-splitter" hidden="true" />
       <box minheight="75" flex="1" id="toolbox-panel-webconsole" collapsed="true" />
     </vbox>
   </notificationbox>
 </window>
diff --git a/browser/devtools/main.js b/browser/devtools/main.js
--- a/browser/devtools/main.js
+++ b/browser/devtools/main.js
@@ -81,17 +81,17 @@ Tools.options = {
   }
 }
 
 Tools.webConsole = {
   id: "webconsole",
   key: l10n("cmd.commandkey", webConsoleStrings),
   accesskey: l10n("webConsoleCmd.accesskey", webConsoleStrings),
   modifiers: Services.appinfo.OS == "Darwin" ? "accel,alt" : "accel,shift",
-  ordinal: 1,
+  ordinal: 2,
   icon: "chrome://browser/skin/devtools/tool-webconsole.svg",
   invertIconForLightTheme: true,
   url: "chrome://browser/content/devtools/webconsole.xul",
   label: l10n("ToolboxTabWebconsole.label", webConsoleStrings),
   menuLabel: l10n("MenuWebconsole.label", webConsoleStrings),
   tooltip: l10n("ToolboxWebconsole.tooltip", webConsoleStrings),
   inMenu: true,
   commands: "devtools/webconsole/console-commands",
@@ -112,17 +112,17 @@ Tools.webConsole = {
     return panel.open();
   }
 };
 
 Tools.inspector = {
   id: "inspector",
   accesskey: l10n("inspector.accesskey", inspectorStrings),
   key: l10n("inspector.commandkey", inspectorStrings),
-  ordinal: 2,
+  ordinal: 1,
   modifiers: osString == "Darwin" ? "accel,alt" : "accel,shift",
   icon: "chrome://browser/skin/devtools/tool-inspector.svg",
   invertIconForLightTheme: true,
   url: "chrome://browser/content/devtools/inspector/inspector.xul",
   label: l10n("inspector.label", inspectorStrings),
   tooltip: l10n("inspector.tooltip", inspectorStrings),
   inMenu: true,
   commands: [
diff --git a/browser/themes/shared/devtools/toolbars.inc.css b/browser/themes/shared/devtools/toolbars.inc.css
--- a/browser/themes/shared/devtools/toolbars.inc.css
+++ b/browser/themes/shared/devtools/toolbars.inc.css
@@ -273,17 +273,17 @@
 /* Close button */
 
 .devtools-closebutton {
   -moz-appearance: none;
   border: none;
   margin: 0 4px;
   min-width: 16px;
   width: 16px;
-  opacity: 0.6;
+  opacity: 0.8;
 }
 
 .devtools-closebutton > image {
   width: 16px;
   height: 16px;
   -moz-appearance: none;
   background-size: 16px 16px;
   background-image: url("chrome://browser/skin/devtools/close@2x.png");
@@ -297,20 +297,16 @@
   margin: -4px;
 }
 
 .devtools-closebutton > .toolbarbutton-text {
   display: none;
 }
 
 .devtools-closebutton:hover {
-  opacity: 0.8;
-}
-
-.devtools-closebutton:hover:active {
   opacity: 1;
 }
 
 /* In-tools sidebar */
 
 .devtools-sidebar-tabs {
   -moz-appearance: none;
   margin: 0;
@@ -451,20 +447,16 @@
   color: #f5f7fa;
   background-image: linear-gradient(#4c9ed9, #4c9ed9), @solidSeparatorLight@;
 }
 
 /* Toolbox - moved from toolbox.css.
  * Rules that apply to the global toolbox like command buttons,
  * devtools tabs, docking buttons, etc. */
 
-#toolbox-controls {
-  margin: 0 4px;
-}
-
 #toolbox-controls > toolbarbutton,
 #toolbox-dock-buttons > toolbarbutton {
   -moz-appearance: none;
   border: none;
   margin: 0 4px;
   min-width: 16px;
   width: 16px;
 }
@@ -494,34 +486,36 @@
 
 #toolbox-dock-window > image {
   background-image: url("chrome://browser/skin/devtools/undock@2x.png");
 }
 
 #toolbox-dock-window,
 #toolbox-dock-bottom,
 #toolbox-dock-side {
-  opacity: 0.6;
+  opacity: 0.8;
 }
 
 #toolbox-dock-window:hover,
 #toolbox-dock-bottom:hover,
 #toolbox-dock-side:hover {
   opacity: 1;
 }
 
 #toolbox-controls-separator {
-  width: 3px;
+  width: 2px;
   background-image: linear-gradient(hsla(204,45%,98%,0), hsla(204,45%,98%,.1), hsla(204,45%,98%,0)),
                     linear-gradient(hsla(206,37%,4%,0), hsla(206,37%,4%,.6), hsla(206,37%,4%,0)),
                     linear-gradient(hsla(204,45%,98%,0), hsla(204,45%,98%,.1), hsla(204,45%,98%,0));
   background-size: 1px 100%;
   background-repeat: no-repeat;
   background-position: 0, 1px, 2px;
-  -moz-margin-start: 8px;
+}
+#toolbox-controls-separator[invisible] {
+  visibility: hidden;
 }
 
 /* Command buttons */
 
 .command-button {
   -moz-appearance: none;
   border: none;
   padding: 0 8px;
@@ -644,17 +638,19 @@
   -moz-appearance: none;
   -moz-binding: url("chrome://global/content/bindings/general.xml#control-item");
   -moz-box-align: center;
   min-width: 32px;
   min-height: 28px;
   max-width: 127px;
   margin: 0;
   padding: 0;
-  -moz-border-start: 1px solid;
+  border-style: solid;
+  border-width: 0;
+  -moz-border-start-width: 1px;
   -moz-box-align: center;
 }
 
 .theme-dark .devtools-tab {
   color: #b6babf;
   border-color: #42484f;
 }
 
@@ -685,93 +681,98 @@
   background-color: hsla(99,100%,14%,.2);
   box-shadow: 0 2px 0 #7bc107 inset;
 }
 
 .theme-light .devtools-tab:not([selected])[highlighted] {
   background-color: rgba(44, 187, 15, .2);
 }
 
-.devtools-tab:first-child {
-  -moz-border-start-width: 0;
-}
-
-.theme-light .devtools-tab:last-child {
-  -moz-border-end: 1px solid #aaa;
-}
-
-.theme-dark .devtools-tab:last-child {
-  -moz-border-end: 1px solid #42484f;
-}
-
 .devtools-tab > image {
   border: none;
   -moz-margin-end: 0;
   -moz-margin-start: 4px;
   opacity: 0.6;
   max-height: 16px;
   width: 16px; /* Prevents collapse during theme switching */
 }
 
-#toolbox-tab-options > image {
-  margin: 0 8px;
-}
-
 .devtools-tab > label {
   white-space: nowrap;
 }
 
 .devtools-tab:hover > image {
   opacity: 0.8;
 }
 
 .devtools-tab:active > image,
 .devtools-tab[selected] > image {
   opacity: 1;
 }
 
-.theme-dark #toolbox-tabs .devtools-tab[selected] {
+.theme-dark .devtools-tab[selected] {
   color: #f5f7fa;
   background-color: #1a4666;
   box-shadow: 0 2px 0 #d7f1ff inset,
               0 8px 3px -5px #2b82bf inset,
               0 -2px 0 rgba(0,0,0,.2) inset;
 }
 
-.theme-light #toolbox-tabs .devtools-tab[selected] {
+.theme-light .devtools-tab[selected] {
   color: #f5f7fa;
   background-color: #4c9ed9;
   box-shadow: 0 2px 0 #d7f1ff inset,
               0 8px 3px -5px #2b82bf inset,
               0 -2px 0 rgba(0,0,0,.06) inset;
 }
 
-.devtools-tab[selected]:not(:first-child),
-.devtools-tab[highlighted]:not(:first-child) {
+#toolbox-tabs .devtools-tab[selected]:not(:first-child),
+#toolbox-tabs .devtools-tab[highlighted]:not(:first-child) {
   border-width: 0;
   -moz-padding-start: 1px;
 }
 
-.devtools-tab[selected]:last-child,
-.devtools-tab[highlighted]:last-child {
+#toolbox-tabs .devtools-tab[selected]:last-child,
+#toolbox-tabs .devtools-tab[highlighted]:last-child {
   -moz-padding-end: 1px;
 }
 
-.devtools-tab[selected] + .devtools-tab,
-.devtools-tab[highlighted] + .devtools-tab {
+#toolbox-tabs .devtools-tab[selected] + .devtools-tab,
+#toolbox-tabs .devtools-tab[highlighted] + .devtools-tab {
   -moz-border-start-width: 0;
   -moz-padding-start: 1px;
 }
 
+#toolbox-tabs .devtools-tab:first-child[selected] {
+  -moz-border-start-width: 0;
+}
+
+#toolbox-tabs .devtools-tab:last-child {
+  -moz-border-end-width: 1px;
+}
+
 .devtools-tab:not([highlighted]) > .highlighted-icon,
 .devtools-tab[selected] > .highlighted-icon,
 .devtools-tab:not([selected])[highlighted] > .default-icon {
   visibility: collapse;
 }
 
+/* The options tab is special - it doesn't live with the other tabs */
+#toolbox-option-container .devtools-tab:node([selected]) {
+  background-color: transparent;
+}
+#toolbox-option-container .devtools-tab {
+  border-color: transparent;
+  border-width: 0;
+  -moz-padding-start: 1px;
+}
+#toolbox-tab-options > image {
+  margin: 0 8px;
+}
+
 /* Invert the colors of certain dark theme images for displaying
  * inside of the light theme.
  */
 .theme-light .devtools-tab[icon-invertable] > image,
 .theme-light #toolbox-dock-buttons > toolbarbutton > image,
 .theme-light .command-button-invertable > image,
 .theme-light .command-button-invertable:active > image,
 .theme-light .devtools-closebutton > image,
