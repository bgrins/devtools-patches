# HG changeset patch
# User Nick Alexander <nalexander@mozilla.com>
# Date 1499821424 25200
#      Tue Jul 11 18:03:44 2017 -0700
# Node ID b94a64e8d363b7459f9748353a94f4aa76eb087c
# Parent  fd4ae865d7388e5c353c2784d9fb6df5f8bdd820
Turn "quick restart" into "quick reload".

MozReview-Commit-ID: LXjoCG6fH6V

diff --git a/browser/base/content/browser-sets.inc b/browser/base/content/browser-sets.inc
--- a/browser/base/content/browser-sets.inc
+++ b/browser/base/content/browser-sets.inc
@@ -11,17 +11,17 @@
 
   <stringbundleset id="stringbundleset">
     <stringbundle id="bundle_brand" src="chrome://branding/locale/brand.properties"/>
     <stringbundle id="bundle_shell" src="chrome://browser/locale/shellservice.properties"/>
     <stringbundle id="bundle_preferences" src="chrome://browser/locale/preferences/preferences.properties"/>
   </stringbundleset>
 
   <commandset id="mainCommandSet">
-    <command id="cmd_quickRestart" oncommand="QuickRestart()"/>
+    <command id="cmd_quickRestart" oncommand="QuickReload()"/>
     <command id="cmd_newNavigator" oncommand="OpenBrowserWindow()"/>
     <command id="cmd_handleBackspace" oncommand="BrowserHandleBackspace();" />
     <command id="cmd_handleShiftBackspace" oncommand="BrowserHandleShiftBackspace();" />
 
     <command id="cmd_newNavigatorTab" oncommand="BrowserOpenTab(event);"/>
     <command id="cmd_newNavigatorTabNoEvent" oncommand="BrowserOpenTab();"/>
     <command id="Browser:OpenFile"  oncommand="BrowserOpenFileWindow();"/>
     <command id="Browser:SavePage" oncommand="saveBrowser(gBrowser.selectedBrowser);"/>
diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -4134,16 +4134,47 @@ function QuickRestart() {
 
     if (canceled.data) return false;
 
     Cc['@mozilla.org/toolkit/app-startup;1'].getService(Ci.nsIAppStartup)
         .quit(Ci.nsIAppStartup.eAttemptQuit | Ci.nsIAppStartup.eRestart);
   }
 }
 
+function QuickReload() {
+  // window.location.reload() has problems (on at least Mac OS X) with
+  // the title bar, so instead let's make a new window and transfer
+  // this window's session state into that window.
+
+  const ss = Cc["@mozilla.org/browser/sessionstore;1"].getService(Ci.nsISessionStore);
+  let stateString = ss.getWindowState(window);
+
+  // Replacement window.
+  let next = OpenBrowserWindow({suppressanimation: true});
+
+  // Arrange for replacement window to get this windows session state.
+  let delayedStartupObserver = aSubject => {
+    if (aSubject == next) {
+      Services.obs.removeObserver(delayedStartupObserver, "browser-delayed-startup-finished");
+      ss.setWindowState(next, stateString, /* overwriteTabs */ true);
+
+      // We move by a few pixels so that it's clear that something has
+      // happened.  The window features are restored on the next tick,
+      // so we have to wait in order to move the window.
+      next.setTimeout(() => {
+        next.moveBy(10, 10);
+      }, 0);
+
+      // Fairly abruptly close this window.
+      closeWindow(true);
+    }
+  };
+  Services.obs.addObserver(delayedStartupObserver, "browser-delayed-startup-finished");
+}
+
 function OpenBrowserWindow(options) {
   var telemetryObj = {};
   TelemetryStopwatch.start("FX_NEW_WINDOW_MS", telemetryObj);
 
   function newDocumentShown(doc, topic, data) {
     if (topic == "document-shown" &&
         doc != document &&
         doc.defaultView == win) {
@@ -4186,17 +4217,17 @@ function OpenBrowserWindow(options) {
     extraFeatures += ",remote";
   } else if (options && options.remote === false) {
     extraFeatures += ",non-remote";
   }
 
   // If the window is maximized, we want to skip the animation, since we're
   // going to be taking up most of the screen anyways, and we want to optimize
   // for showing the user a useful window as soon as possible.
-  if (window.windowState == window.STATE_MAXIMIZED) {
+  if (window.windowState == window.STATE_MAXIMIZED || (options && options.suppressanimation)) {
     extraFeatures += ",suppressanimation";
   }
 
   // if and only if the current window is a browser window and it has a document with a character
   // set, then extract the current charset menu setting from the current document and use it to
   // initialize the new browser window...
   var win;
   if (window && (wintype == "navigator:browser") && window.content && window.content.document) {
