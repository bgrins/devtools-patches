# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  61dbb29cc188033a46dfd52670c75491f833c8fa

diff --git a/toolkit/content/widgets/menupopup.js b/toolkit/content/widgets/menupopup.js
--- a/toolkit/content/widgets/menupopup.js
+++ b/toolkit/content/widgets/menupopup.js
@@ -43,37 +43,32 @@
             }
           }
         }
         array.forEach(accel => (accel.width = width));
       });
 
       this.attachShadow({ mode: "open" });
       this.shadowRoot.appendChild(this.fragment);
-
-      this.scrollBox = this.shadowRoot.querySelector(".popup-internal-box");
+    }
 
-      // Retarget events from shadow DOM scrolbox to the popup itself.
-      this.scrollBox.addEventListener("scroll", ev =>
-        this.dispatchEvent(new Event("scroll"))
-      );
-      this.scrollBox.addEventListener("overflow", ev =>
-        this.dispatchEvent(new Event("overflow"))
-      );
-      this.scrollBox.addEventListener("underflow", ev =>
-        this.dispatchEvent(new Event("underflow"))
-      );
+    get scrollbox() {
+      if (!this._scrollbox) {
+        this._scrollbox = this.shadowRoot.querySelector(".popup-internal-box");
+      }
+      return this._scrollbox;
     }
 
     connectedCallback() {
       if (this.delayConnectedCallback() || this.hasConnected) {
         return;
       }
 
       this.hasConnected = true;
+
       if (this.parentNode && this.parentNode.localName == "menulist") {
         this._setUpMenulistPopup();
       }
     }
 
     get fragment() {
       if (!this.constructor.hasOwnProperty("_fragment")) {
         this.constructor._fragment = MozXULElement.parseXULToFragment(
@@ -84,16 +79,19 @@
     }
 
     get markup() {
       return `
         <html:link rel="stylesheet" href="chrome://global/skin/global.css"/>
         <html:style>${this.styles}</html:style>
         <arrowscrollbox class="popup-internal-box"
                         flex="1"
+                        onoverflow="this.parentNode.host.dispatchEvent(new Event('overflow'));"
+                        onunderflow="this.parentNode.host.dispatchEvent(new Event('underflow'));"
+                        onscroll="this.parentNode.host.dispatchEvent(new Event('scroll'));"
                         orient="vertical"
                         smoothscroll="false">
           <html:slot></html:slot>
         </arrowscrollbox>
       `;
     }
 
     get styles() {
