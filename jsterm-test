# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  014c53ced7b479ffb8b39c4756c69d4cbd95460a

diff --git a/devtools/shared/webconsole/test/chrome.ini b/devtools/shared/webconsole/test/chrome.ini
--- a/devtools/shared/webconsole/test/chrome.ini
+++ b/devtools/shared/webconsole/test/chrome.ini
@@ -1,12 +1,13 @@
 [DEFAULT]
 tags = devtools
 support-files =
   common.js
+  cpow_parent.xul
   data.json
   data.json^headers^
   helper_serviceworker.js
   network_requests_iframe.html
   sandboxed_iframe.html
   console-test-worker.js
   !/browser/base/content/test/general/browser_star_hsts.sjs
   !/browser/base/content/test/general/pinning_headers.sjs
diff --git a/devtools/shared/webconsole/test/test_jsterm.html b/devtools/shared/webconsole/test/test_jsterm.html
--- a/devtools/shared/webconsole/test/test_jsterm.html
+++ b/devtools/shared/webconsole/test/test_jsterm.html
@@ -30,17 +30,17 @@ function evaluateJS(input, options = {})
     return gState.client.evaluateJSAsync(input, null, options);
   }
 }
 
 function startTest()
 {
   removeEventListener("load", startTest);
 
-  attachConsoleToTab(["PageError"], onAttach);
+  attachConsole(["PageError"], onAttach);
 }
 
 function onAttach(aState, aResponse)
 {
   top.foobarObject = Object.create(null);
   top.foobarObject.foo = 1;
   top.foobarObject.foobar = 2;
   top.foobarObject.foobaz = 3;
@@ -57,20 +57,20 @@ function onAttach(aState, aResponse)
 
   top.largeObject2 = Object.create(null);
   for (let i = 0; i < MAX_AUTOCOMPLETIONS * 2; i++) {
     top.largeObject2['a' + i] = i;
   }
 
   gState = aState;
 
-  let tests = [doSimpleEval, doWindowEval, doEvalWithException,
+  let tests = [doSimpleEval, /*doWindowEval, doEvalWithException,
                doEvalWithHelper, doEvalString, doEvalLongString,
-               doEvalWithBinding, doEvalWithBindingFrame,
-               forceLexicalInit].map(t => {
+               /*doEvalWithBinding, doEvalWithBindingFrame,
+               forceLexicalInit*/].map(t => {
                  return Task.async(t);
                });
 
   runTests(tests, testEnd);
 }
 
 function* doSimpleEval() {
   info("test eval '2+2'");
@@ -283,25 +283,33 @@ function* forceLexicalInit() {
       }
   }
 
   nextTest();
 }
 
 function testEnd()
 {
+  var win = window.open("cpow_parent.xul", "", "chrome");
+  console.log(win);
+  win.onload = function() {
+    console.log("Loaded", win, win.document, win.document.querySelector("#cpowbrowser_remote"),
+
+      Components.utils.isCrossProcessWrapper(win.document.querySelector("#cpowbrowser_remote"))
+      );
+  }
   // If this is the first run, reload the page and do it again.
   // Otherwise, end the test.
-  closeDebugger(gState, function() {
-    gState = null;
-    if (evaluatingSync) {
-      evaluatingSync = false;
-      startTest();
-    } else {
-      SimpleTest.finish();
-    }
-  });
+  // closeDebugger(gState, function() {
+  //   gState = null;
+  //   if (evaluatingSync) {
+  //     evaluatingSync = false;
+  //     startTest();
+  //   } else {
+  //     SimpleTest.finish();
+  //   }
+  // });
 }
 
 addEventListener("load", startTest);
 </script>
 </body>
 </html>
