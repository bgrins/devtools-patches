# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  ce62db17d0ec0315a282f66c081aed8ee0f75e5c
Bug 1198339 - Bind F1 key to open the settings when the toolbox is focused;r=jryans

diff --git a/browser/devtools/framework/test/browser_toolbox_options.js b/browser/devtools/framework/test/browser_toolbox_options.js
--- a/browser/devtools/framework/test/browser_toolbox_options.js
+++ b/browser/devtools/framework/test/browser_toolbox_options.js
@@ -45,21 +45,25 @@ function* testSelectTool() {
   toolbox.selectTool("options");
   yield onceSelected;
   ok(true, "Toolbox selected via selectTool method");
 }
 
 function* testOptionsShortcut() {
   info ("Selecting another tool, then reselecting options panel with keyboard.");
 
-  yield toolbox.selectTool("webconsole")
-         .then(() => synthesizeKeyFromKeyTag("toolbox-options-key", doc))
-         .then(() => {
-           ok(true, "Toolbox selected via shortcut key");
-         });
+  yield toolbox.selectTool("webconsole");
+  is(toolbox.currentToolId, "webconsole", "webconsole is selected");
+  synthesizeKeyFromKeyTag("toolbox-options-key", doc);
+  is(toolbox.currentToolId, "options", "Toolbox selected via shortcut key (1)");
+
+  yield toolbox.selectTool("webconsole");
+  is(toolbox.currentToolId, "webconsole", "webconsole is selected");
+  synthesizeKeyFromKeyTag("toolbox-options-key2", doc);
+  is(toolbox.currentToolId, "options", "Toolbox selected via shortcut key (2)");
 }
 
 function* testOptions() {
   let tool = toolbox.getPanel("options");
   panelWin = tool.panelWin;
   let prefNodes = tool.panelDoc.querySelectorAll("checkbox[data-pref]");
 
   // Store modified pref names so that they can be cleared on error.
diff --git a/browser/devtools/framework/toolbox.js b/browser/devtools/framework/toolbox.js
--- a/browser/devtools/framework/toolbox.js
+++ b/browser/devtools/framework/toolbox.js
@@ -452,20 +452,21 @@ Toolbox.prototype = {
         break;
       case "devtools.serviceWorkers.testing.enabled":
         this._applyServiceWorkersTestingSettings();
         break;
     }
   },
 
   _buildOptions: function() {
+    let selectOptions = () => { this.selectTool("options"); };
     let key = this.doc.getElementById("toolbox-options-key");
-    key.addEventListener("command", () => {
-      this.selectTool("options");
-    }, true);
+    key.addEventListener("command", selectOptions, true);
+    let key2 = this.doc.getElementById("toolbox-options-key2");
+    key2.addEventListener("command", selectOptions, true);
   },
 
   _splitConsoleOnKeypress: function(e) {
     if (e.keyCode === e.DOM_VK_ESCAPE) {
       this.toggleSplitConsole();
       // If the debugger is paused, don't let the ESC key stop any pending
       // navigation.
       let jsdebugger = this.getPanel("jsdebugger");
diff --git a/browser/devtools/framework/toolbox.xul b/browser/devtools/framework/toolbox.xul
--- a/browser/devtools/framework/toolbox.xul
+++ b/browser/devtools/framework/toolbox.xul
@@ -25,16 +25,19 @@
 
   <commandset id="editMenuCommands"/>
   <keyset id="editMenuKeys"/>
   <keyset id="toolbox-keyset">
     <key id="toolbox-options-key"
          key="&toolboxOptionsButton.key;"
          oncommand="void(0);"
          modifiers="shift, accel"/>
+    <key id="toolbox-options-key2"
+         keycode="VK_F1"
+         oncommand="void(0);"/>
     <key id="toolbox-next-tool-key"
          key="&toolboxNextTool.key;"
          oncommand="void(0);"
          modifiers="accel"/>
     <key id="toolbox-previous-tool-key"
          key="&toolboxPreviousTool.key;"
          oncommand="void(0);"
          modifiers="accel"/>
diff --git a/browser/devtools/styleinspector/computed-view.js b/browser/devtools/styleinspector/computed-view.js
--- a/browser/devtools/styleinspector/computed-view.js
+++ b/browser/devtools/styleinspector/computed-view.js
@@ -950,16 +950,17 @@ PropertyView.prototype = {
     this.element.addEventListener("dblclick", this.onMatchedToggle, false);
 
     // Make it keyboard navigable
     this.element.setAttribute("tabindex", "0");
     this.onKeyDown = (event) => {
       let keyEvent = Ci.nsIDOMKeyEvent;
       if (event.keyCode === keyEvent.DOM_VK_F1) {
         this.mdnLinkClick();
+        event.preventDefault();
       }
       if (event.keyCode === keyEvent.DOM_VK_RETURN ||
         event.keyCode === keyEvent.DOM_VK_SPACE) {
         this.onMatchedToggle(event);
       }
     };
     this.element.addEventListener("keydown", this.onKeyDown, false);
 
