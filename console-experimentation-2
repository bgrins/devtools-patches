# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  8bf46ba0297dfecfdbae08edc1166d8a10bbadf8
Approaching from client level

diff --git a/devtools/client/framework/target.js b/devtools/client/framework/target.js
--- a/devtools/client/framework/target.js
+++ b/devtools/client/framework/target.js
@@ -412,17 +412,18 @@ TabTarget.prototype = {
       }
       this.activeConsole = consoleClient;
       this._remote.resolve(null);
     };
 
     let attachConsole = () => {
       this._client.attachConsole(this._form.consoleActor,
                                  [ "NetworkActivity" ],
-                                 onConsoleAttached);
+                                 onConsoleAttached,
+                                 this.isLocalTab);
     };
 
     if (this.isLocalTab) {
       this._client.connect(() => {
         this._client.getTab({ tab: this.tab }).then(response => {
           this._form = response.tab;
           attachTab();
         });
diff --git a/devtools/shared/client/main.js b/devtools/shared/client/main.js
--- a/devtools/shared/client/main.js
+++ b/devtools/shared/client/main.js
@@ -503,30 +503,30 @@ DebuggerClient.prototype = {
    *        The ID for the console actor to attach to.
    * @param array aListeners
    *        The console listeners you want to start.
    * @param function aOnResponse
    *        Called with the response packet and a WebConsoleClient
    *        instance (which will be undefined on error).
    */
   attachConsole:
-  function (aConsoleActor, aListeners, aOnResponse = noop) {
+  function (aConsoleActor, aListeners, aOnResponse = noop, isBrowserConsole) {
     let packet = {
       to: aConsoleActor,
       type: "startListeners",
       listeners: aListeners,
     };
 
     this.request(packet, (aResponse) => {
       let consoleClient;
       if (!aResponse.error) {
         if (this._clients.has(aConsoleActor)) {
           consoleClient = this._clients.get(aConsoleActor);
         } else {
-          consoleClient = new WebConsoleClient(this, aResponse);
+          consoleClient = new WebConsoleClient(this, aResponse, isBrowserConsole);
           this.registerClient(consoleClient);
         }
       }
       aOnResponse(aResponse, consoleClient);
     });
   },
 
   /**
diff --git a/devtools/shared/webconsole/client.js b/devtools/shared/webconsole/client.js
--- a/devtools/shared/webconsole/client.js
+++ b/devtools/shared/webconsole/client.js
@@ -17,30 +17,53 @@ const {LongStringClient} = require("devt
  * created on the server, hiding implementation details.
  *
  * @param object aDebuggerClient
  *        The DebuggerClient instance we live for.
  * @param object aResponse
  *        The response packet received from the "startListeners" request sent to
  *        the WebConsoleActor.
  */
-function WebConsoleClient(aDebuggerClient, aResponse)
+function WebConsoleClient(aDebuggerClient, aResponse, isLocalTab)
 {
   this._actor = aResponse.from;
   this._client = aDebuggerClient;
   this._longStrings = {};
   this.traits = aResponse.traits || {};
   this.events = [];
   this._networkRequests = new Map();
 
   this.pendingEvaluationResults = new Map();
   this.onEvaluationResult = this.onEvaluationResult.bind(this);
   this.onNetworkEvent = this._onNetworkEvent.bind(this);
   this.onNetworkEventUpdate = this._onNetworkEventUpdate.bind(this);
 
+  console.log("New client created", aDebuggerClient, isLocalTab);
+
+    function attachAllWorkers() {
+      aDebuggerClient.listWorkers(response => {
+        let workers = response.workers;
+        for (let worker of response.workers) {
+          console.log("Attaching worker ", worker);
+          aDebuggerClient.attachWorker(worker, (response, workerClient) => {
+            console.log("Attached worker", response, workerClient);
+          });
+        }
+      });
+    }
+  if (isLocalTab) {
+
+    aDebuggerClient.addListener("workerListChanged", () => {
+      console.log("workerListChanged!");
+      attachAllWorkers();
+    });
+
+    attachAllWorkers();
+  }
+
   this._client.addListener("evaluationResult", this.onEvaluationResult);
   this._client.addListener("networkEvent", this.onNetworkEvent);
   this._client.addListener("networkEventUpdate", this.onNetworkEventUpdate);
   EventEmitter.decorate(this);
 }
 
 exports.WebConsoleClient = WebConsoleClient;
 
