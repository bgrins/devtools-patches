# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  1ebcf8b0373ae87fbcea351874feb3edcd6ce397
asdf

diff --git a/browser/devtools/markupview/markup-view.js b/browser/devtools/markupview/markup-view.js
--- a/browser/devtools/markupview/markup-view.js
+++ b/browser/devtools/markupview/markup-view.js
@@ -776,27 +776,31 @@ MarkupView.prototype = {
   /**
    * Given a list of mutations returned by the mutation observer, flash the
    * corresponding containers to attract attention.
    */
   _flashMutatedNodes: function(aMutations) {
     let addedOrEditedContainers = new Set();
     let removedContainers = new Set();
 
-    for (let {type, target, added, removed, newValue} of aMutations) {
+    for (let mutation of aMutations) {
+      let {type, target, added, removed, newValue, attributeName} = mutation;
       let container = this.getContainer(target);
 
       if (container) {
         if (type === "characterData") {
           addedOrEditedContainers.add(container);
-        } else if (type === "attributes" && newValue === null) {
-          // Removed attributes should flash the entire node.
-          // New or changed attributes will flash the attribute itself
-          // in ElementEditor.flashAttribute.
-          addedOrEditedContainers.add(container);
+        } else if (type === "attributes") {
+          if (newValue === null) {
+            // Removed attributes should flash the entire node.
+            addedOrEditedContainers.add(container);
+          } else {
+            // New or changed attributes will flash the attribute itself.
+            container.editor.flashAttribute(attributeName);
+          }
         } else if (type === "childList") {
           // If there has been removals, flash the parent
           if (removed.length) {
             removedContainers.add(container);
           }
 
           // If there has been additions, flash the nodes if their associated
           // container exist (so if their parent is expanded in the inspector).
@@ -2379,26 +2383,29 @@ function ElementEditor(aContainer, aNode
   });
 
   let tagName = this.node.nodeName.toLowerCase();
   this.tag.textContent = tagName;
   this.closeTag.textContent = tagName;
   this.eventNode.style.display = this.node.hasEventListeners ? "inline-block" : "none";
 
   this.update();
-  this.initialized = true;
 }
 
 ElementEditor.prototype = {
 
   flashAttribute: function(attrName) {
     if (this.animationTimers[attrName]) {
       clearTimeout(this.animationTimers[attrName]);
     }
 
+    if (!this.attrs[attrName]) {
+      return;
+    }
+
     flashElementOn(this.getAttributeElement(attrName));
 
     this.animationTimers[attrName] = setTimeout(() => {
       flashElementOff(this.getAttributeElement(attrName));
     }, this.markup.CONTAINER_FLASHING_DURATION);
   },
 
   /**
@@ -2422,23 +2429,16 @@ ElementEditor.prototype = {
         // Just show it (it's hidden by default due to the template).
         attrsToRemove.delete(el);
         el.style.removeProperty("display");
       } else {
         // Create a new editor, because the value of an existing attribute
         // has changed.
         let attribute = this._createAttribute(attr);
         attribute.style.removeProperty("display");
-
-        // Temporarily flash the attribute to highlight the change.
-        // But not if this is the first time the editor instance has
-        // been created.
-        if (this.initialized) {
-          this.flashAttribute(attr.name);
-        }
       }
     }
 
     for (let el of attrsToRemove) {
       el.remove();
     }
   },
 
@@ -2770,19 +2770,19 @@ function parseAttributeValues(attr, doc)
  * to be used with flashElementOff as a way of drawing attention to an element.
  *
  * @param  {Node} backgroundElt
  *         The element to set the highlighted background color on.
  * @param  {Node} foregroundElt
  *         The element to set the matching foreground color on.
  *         Optional.  This will equal backgroundElt if not set.
  */
-function flashElementOn(backgroundElt, foregroundElt) {
-  if (!foregroundElt) {
-    foregroundElt = backgroundElt;
+function flashElementOn(backgroundElt, foregroundElt=backgroundElt) {
+  if (!backgroundElt || !foregroundElt) {
+    return;
   }
 
   // Make sure the animation class is not here
   backgroundElt.classList.remove("flash-out");
 
   // Change the background
   backgroundElt.classList.add("theme-bg-contrast");
 
@@ -2798,19 +2798,19 @@ function flashElementOn(backgroundElt, f
  * See flashElementOn.
  *
  * @param  {Node} backgroundElt
  *         The element to reomve the highlighted background color on.
  * @param  {Node} foregroundElt
  *         The element to remove the matching foreground color on.
  *         Optional.  This will equal backgroundElt if not set.
  */
-function flashElementOff(backgroundElt, foregroundElt) {
-  if (!foregroundElt) {
-    foregroundElt = backgroundElt;
+function flashElementOff(backgroundElt, foregroundElt=backgroundElt) {
+  if (!backgroundElt || !foregroundElt) {
+    return;
   }
 
   // Add the animation class to smoothly remove the background
   backgroundElt.classList.add("flash-out");
 
   // Remove the background
   backgroundElt.classList.remove("theme-bg-contrast");
 
