# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  c7fe30bceed65d27bda15615a1914b64e545c8c3
asdf

diff --git a/browser/devtools/markupview/markup-view.js b/browser/devtools/markupview/markup-view.js
--- a/browser/devtools/markupview/markup-view.js
+++ b/browser/devtools/markupview/markup-view.js
@@ -776,27 +776,32 @@ MarkupView.prototype = {
   /**
    * Given a list of mutations returned by the mutation observer, flash the
    * corresponding containers to attract attention.
    */
   _flashMutatedNodes: function(aMutations) {
     let addedOrEditedContainers = new Set();
     let removedContainers = new Set();
 
-    for (let {type, target, added, removed, newValue} of aMutations) {
+    for (let mutation of aMutations) {
+      let {type, target, added, removed, newValue, attributeName} = mutation;
       let container = this.getContainer(target);
 
       if (container) {
         if (type === "characterData") {
           addedOrEditedContainers.add(container);
-        } else if (type === "attributes" && newValue === null) {
+        } else if (type === "attributes") {
           // Removed attributes should flash the entire node.
           // New or changed attributes will flash the attribute itself
           // in ElementEditor.flashAttribute.
-          addedOrEditedContainers.add(container);
+          if (newValue === null) {
+            addedOrEditedContainers.add(container);
+          } else {
+            container.editor.flashAttribute(attributeName);
+          }
         } else if (type === "childList") {
           // If there has been removals, flash the parent
           if (removed.length) {
             removedContainers.add(container);
           }
 
           // If there has been additions, flash the nodes if their associated
           // container exist (so if their parent is expanded in the inspector).
@@ -2427,17 +2432,17 @@ ElementEditor.prototype = {
         // has changed.
         let attribute = this._createAttribute(attr);
         attribute.style.removeProperty("display");
 
         // Temporarily flash the attribute to highlight the change.
         // But not if this is the first time the editor instance has
         // been created.
         if (this.initialized) {
-          this.flashAttribute(attr.name);
+          // this.flashAttribute(attr.name);
         }
       }
     }
 
     for (let el of attrsToRemove) {
       el.remove();
     }
   },
