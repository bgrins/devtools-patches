# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  fe9fb92b8949e461396b2858fbd7f828a1440c74
Dedupe attribute mutation packets if possible?

diff --git a/toolkit/devtools/server/actors/inspector.js b/toolkit/devtools/server/actors/inspector.js
--- a/toolkit/devtools/server/actors/inspector.js
+++ b/toolkit/devtools/server/actors/inspector.js
@@ -2416,16 +2416,40 @@ var WalkerActor = protocol.ActorClass({
     }
   }),
 
   queueMutation: function(mutation) {
     if (!this.actorID || this._destroyed) {
       // We've been destroyed, don't bother queueing this mutation.
       return;
     }
+
+    if (!this._pendingMutationsForTarget) {
+      this._pendingMutationsForTarget = new Map();
+    }
+
+    // XXX: De dupe mutations on the same element?
+    let targetMutations = this._pendingMutationsForTarget.get(mutation.target);
+    if (!targetMutations) {
+      targetMutations = {
+        'attributes': new Map(),
+        'others': []
+      }
+      this._pendingMutationsForTarget.set(mutation.target, targetMutations);
+    }
+
+    if (mutation.type == "attributes") {
+      targetMutations.attributes.set(attributeName, mutation);
+    } else {
+      targetMutations.others.push(mutation);
+    }
+
+
+
+    this._attributeMutations.get(mutation.target mutation.attributeName)
     // We only send the `new-mutations` notification once, until the client
     // fetches mutations with the `getMutations` packet.
     let needEvent = this._pendingMutations.length === 0;
 
     this._pendingMutations.push(mutation);
 
     if (needEvent) {
       events.emit(this, "new-mutations");
@@ -2449,16 +2473,19 @@ var WalkerActor = protocol.ActorClass({
         type: change.type,
         target: targetActor.actorID,
         numChildren: targetActor.numChildren
       };
 
       if (mutation.type === "attributes") {
         mutation.attributeName = change.attributeName;
         mutation.attributeNamespace = change.attributeNamespace || undefined;
+        console.log(mutation, mutation.attributeName, targetNode.hasAttribute(mutation.attributeName) ?
+                            targetNode.getAttribute(mutation.attributeName)
+                            : null);
         mutation.newValue = targetNode.hasAttribute(mutation.attributeName) ?
                             targetNode.getAttribute(mutation.attributeName)
                             : null;
       } else if (mutation.type === "characterData") {
         if (targetNode.nodeValue.length > gValueSummaryLength) {
           mutation.newValue = targetNode.nodeValue.substring(0, gValueSummaryLength);
           mutation.incompleteValue = true;
         } else {
