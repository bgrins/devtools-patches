# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  ba6b2df32a6a63a9f124f9341d27dd978910760f
Bug 964939 -

diff --git a/browser/devtools/shared/test/doc_options-view.xul b/browser/devtools/shared/test/doc_options-view.xul
--- a/browser/devtools/shared/test/doc_options-view.xul
+++ b/browser/devtools/shared/test/doc_options-view.xul
@@ -19,9 +19,11 @@
             <menuitem id="option-autoblackbox"
                       type="checkbox"
                       data-pref="auto-black-box"
                       label="black box"/>
         </menupopup>
     </popupset>
     <button id="options-button"
             popup="options-menupopup"/>
+    <hbox id="container">hi</hbox>
+    <iframe id="foo"></iframe>
 </window>
diff --git a/browser/devtools/sourceeditor/test/browser_css_autocompletion.js b/browser/devtools/sourceeditor/test/browser_css_autocompletion.js
--- a/browser/devtools/sourceeditor/test/browser_css_autocompletion.js
+++ b/browser/devtools/sourceeditor/test/browser_css_autocompletion.js
@@ -95,19 +95,24 @@ function runTests() {
     inspector = InspectorFront(target.client, target.form);
     inspector.getWalker().then(walker => {
       completer = new cssAutoCompleter({walker: walker});
       checkStateAndMoveOn();
     });
   });
 }
 
+function testMouse() {
+  ok(false, "what");
+  finishUp();
+}
+
 function checkStateAndMoveOn() {
   if (index == tests.length) {
-    finishUp();
+    testMouse();
     return;
   }
 
   let test = tests[index];
   progress.dataset.progress = ++index;
   progressDiv.style.width = 100*index/tests.length + "%";
   completer.complete(limit(source, test[0]),
                      {line: test[0][0], ch: test[0][1]}).then(suggestions => {
diff --git a/browser/devtools/sourceeditor/test/browser_editor_autocomplete_basic.js b/browser/devtools/sourceeditor/test/browser_editor_autocomplete_basic.js
--- a/browser/devtools/sourceeditor/test/browser_editor_autocomplete_basic.js
+++ b/browser/devtools/sourceeditor/test/browser_editor_autocomplete_basic.js
@@ -1,29 +1,66 @@
 /* vim: set ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
+const {InspectorFront} = require("devtools/server/actors/inspector");
 const AUTOCOMPLETION_PREF = "devtools.editor.autocomplete";
+const TEST_URI = "data:text/html;charset=UTF-8," + encodeURIComponent(
+  ["<!DOCTYPE html>",
+   "<html>",
+   " <body>",
+   " </body>",
+   " </html>"
+  ].join("\n"));
+
+function test() {
+  waitForExplicitFinish();
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function onload() {
+    gBrowser.selectedBrowser.removeEventListener("load", onload, true);
+    runTests();
+  }, true);
+  content.location = TEST_URI;
+}
+
+function runTests() {
+  let target = devtools.TargetFactory.forTab(gBrowser.selectedTab);
+  target.makeRemote().then(() => {
+    let inspector = InspectorFront(target.client, target.form);
+    inspector.getWalker().then(walker => {
+      setup((ed, win) => {
+        let edWin = ed.container.contentWindow.wrappedJSObject;
+        testJS(ed, edWin);
+        testCSS(ed, edWin);
+        testPref(ed, edWin);
+        testMouse(ed, edWin).then(() => {
+          teardown(ed, win);
+        });
+      }, {autocompleteOpts: {walker: walker}});
+    });
+  });
+}
 
 // Test to make sure that different autocompletion modes can be created,
 // switched, and destroyed.  This doesn't test the actual autocompletion
 // popups, only their integration with the editor.
-function test() {
-  waitForExplicitFinish();
-  setup((ed, win) => {
-    let edWin = ed.container.contentWindow.wrappedJSObject;
-    testJS(ed, edWin);
-    testCSS(ed, edWin);
-    testPref(ed, edWin);
-    teardown(ed, win);
-  });
-}
+// function test() {
+//   waitForExplicitFinish();
+//   gBrowser.selectedTab = gBrowser.addTab();
+//   gBrowser.selectedBrowser.addEventListener("load", function onload() {
+//     gBrowser.selectedBrowser.removeEventListener("load", onload, true);
+//     doc = content.document;
+//     runTests();
+//   }, true);
+// }
+
+
 
 function testJS(ed, win) {
   ok (!ed.getOption("autocomplete"), "Autocompletion is not set");
   ok (!win.tern, "Tern is not defined on the window");
 
   ed.setMode(Editor.modes.js);
   ed.setOption("autocomplete", true);
 
@@ -53,8 +90,31 @@ function testPref(ed, win) {
   info ("Preffing autocompletion off");
   Services.prefs.setBoolPref(AUTOCOMPLETION_PREF, false);
 
   ok (ed.getOption("autocomplete"), "Autocompletion is still set");
   ok (!win.tern, "Tern is no longer defined on the window");
 
   Services.prefs.clearUserPref(AUTOCOMPLETION_PREF);
 }
+
+function testMouse(ed, win) {
+  ed.setMode(Editor.modes.css);
+  ed.setOption("autocomplete", true);
+  ed.focus();
+  ed.setText("b");
+  ed.setCursor({line: 1, ch: 1});
+
+  let waitForSuggestion = promise.defer();
+
+  ed.on("before-suggest", (a) => {
+    info("before-suggest has been triggered");
+    console.log(a);
+    // EventUtils.synthesizeKey("VK_RETURN", { }, win);
+    is (ed.getText(), "a.b", "Editor text has been updated");
+    // waitForSuggestion.resolve();
+  });
+
+  let autocompleteKey = Editor.keyFor("autocompletion", { noaccel: true }).toUpperCase();
+  EventUtils.synthesizeKey("VK_" + autocompleteKey, { ctrlKey: true }, win);
+
+  return waitForSuggestion.promise;
+}
\ No newline at end of file
diff --git a/browser/devtools/sourceeditor/test/head.js b/browser/devtools/sourceeditor/test/head.js
--- a/browser/devtools/sourceeditor/test/head.js
+++ b/browser/devtools/sourceeditor/test/head.js
@@ -3,42 +3,113 @@
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
 const { devtools } = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
 const { require } = devtools;
 const Editor  = require("devtools/sourceeditor/editor");
 const {Promise: promise} = Cu.import("resource://gre/modules/Promise.jsm", {});
+const {Hosts} = require("devtools/framework/toolbox-hosts");
+const {DOMHelpers} = Cu.import("resource:///modules/devtools/DOMHelpers.jsm", {});
+
 
 gDevTools.testing = true;
 SimpleTest.registerCleanupFunction(() => {
   gDevTools.testing = false;
 });
 
-function setup(cb) {
+/**
+ * Open a new tab at a URL and call a callback on load
+ */
+function addTab(aURL, aCallback)
+{
+  waitForExplicitFinish();
+
+  gBrowser.selectedTab = gBrowser.addTab();
+  content.location = aURL;
+
+  let tab = gBrowser.selectedTab;
+  let browser = gBrowser.getBrowserForTab(tab);
+
+  function onTabLoad() {
+    browser.removeEventListener("load", onTabLoad, true);
+    aCallback(browser, tab, browser.contentDocument);
+  }
+
+  browser.addEventListener("load", onTabLoad, true);
+}
+
+function promiseTab(aURL) {
+  return new Promise(resolve =>
+    addTab(aURL, resolve));
+}
+
+
+let createHost = Task.async(function*(type = "bottom", src = "data:text/html;charset=utf-8,") {
+  let host = new Hosts[type](gBrowser.selectedTab);
+  let iframe = yield host.create();
+
+  yield new Promise(resolve => {
+    let domHelper = new DOMHelpers(iframe.contentWindow);
+    iframe.setAttribute("src", src);
+    domHelper.onceDOMReady(resolve);
+  });
+
+  return [host, iframe.contentWindow, iframe.contentDocument];
+});
+
+let setup2 = Task.async(function*(cb, additionalOpts = {}) {
+  yield promiseTab("about:blank");
+const TEST_URI_ROOT = "http://example.com/browser/browser/devtools/shared/test/";
+const OPTIONS_VIEW_URL = TEST_URI_ROOT + "doc_options-view.xul";
+//chrome://test/content/new-window.xul
+  let [host, win, doc] = yield createHost("bottom", OPTIONS_VIEW_URL);
+  let opts = {
+    value: "Hello.",
+    lineNumbers: true,
+    foldGutter: true,
+    gutters: [ "CodeMirror-linenumbers", "breakpoints", "CodeMirror-foldgutter" ]
+  }
+  for (let o in additionalOpts) {
+    opts[o] = additionalOpts[o];
+  }
+
+  let editor = new Editor(opts);
+console.log(editor, doc.getElementById("container"));
+
+  editor.appendTo(doc.getElementById("container"), doc.getElementById("foo"))
+    .then(() => cb(editor, win))
+    .then(null, (err) => ok(false, err.message));
+});
+
+function setup(cb, additionalOpts = {}) {
   const opt = "chrome,titlebar,toolbar,centerscreen,resizable,dialog=no";
   const url = "data:text/xml;charset=UTF-8,<?xml version='1.0'?>" +
     "<?xml-stylesheet href='chrome://global/skin/global.css'?>" +
     "<window xmlns='http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul'" +
     " title='Editor' width='600' height='500'><box flex='1'/></window>";
 
   let win = Services.ww.openWindow(null, url, "_blank", opt, null);
+  let opts = {
+    value: "Hello.",
+    lineNumbers: true,
+    foldGutter: true,
+    gutters: [ "CodeMirror-linenumbers", "breakpoints", "CodeMirror-foldgutter" ]
+  }
+  for (let o in additionalOpts) {
+    opts[o] = additionalOpts[o];
+  }
 
   win.addEventListener("load", function onLoad() {
     win.removeEventListener("load", onLoad, false);
 
     waitForFocus(function () {
       let box = win.document.querySelector("box");
-      let editor = new Editor({
-        value: "Hello.",
-        lineNumbers: true,
-        foldGutter: true,
-        gutters: [ "CodeMirror-linenumbers", "breakpoints", "CodeMirror-foldgutter" ]
-      });
+      let editor = new Editor(opts);
 
       editor.appendTo(box)
         .then(() => cb(editor, win))
         .then(null, (err) => ok(false, err.message));
     }, win);
   }, false);
 }
 
diff --git a/toolkit/content/widgets/richlistbox.xml b/toolkit/content/widgets/richlistbox.xml
--- a/toolkit/content/widgets/richlistbox.xml
+++ b/toolkit/content/widgets/richlistbox.xml
@@ -71,18 +71,20 @@
             // preserve the index just in case no IDs are available
             if (this.currentIndex > -1)
               this._currentIndex = this.currentIndex + 1;
 
             var event = document.createEvent("Events");
             event.initEvent("select", true, true);
             this.dispatchEvent(event);
 
-            // always call this (allows a commandupdater without controller)
-            document.commandDispatcher.updateCommands("richlistbox-select");
+            if (document.commandDispatcher) {
+              // always call this (allows a commandupdater without controller)
+              document.commandDispatcher.updateCommands("richlistbox-select");
+            }
           ]]>
         </body>
       </method>
 
       <!-- We override base-listbox here because those methods don't take dir
            into account on listbox (which doesn't support dir yet) -->
       <method name="getNextItem">
         <parameter name="aStartItem"/>
