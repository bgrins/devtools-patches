# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  8db4b1b5dfae11b9681a85373de5dcc0d9cdc7b9
Bug 1307239 - Part 1 - Fix 'store as global' and 'open in variables view' menu items;r=linclark
MozReview-Commit-ID: GawlBuw7Vss

diff --git a/devtools/client/webconsole/console-output.js b/devtools/client/webconsole/console-output.js
--- a/devtools/client/webconsole/console-output.js
+++ b/devtools/client/webconsole/console-output.js
@@ -2478,31 +2478,17 @@ Widgets.JSObject.prototype = extend(Widg
       label: VariablesView.getString(this.objectActor, { concise: true }),
       objectActor: this.objectActor,
       autofocus: true,
     });
   },
 
   storeObjectInWindow: function ()
   {
-    let evalString = `{ let i = 0;
-      while (this.hasOwnProperty("temp" + i) && i < 1000) {
-        i++;
-      }
-      this["temp" + i] = _self;
-      "temp" + i;
-    }`;
-    let options = {
-      selectedObjectActor: this.objectActor.actor,
-    };
-
-    this.output.owner.jsterm.requestEvaluation(evalString, options).then((res) => {
-      this.output.owner.jsterm.focus();
-      this.output.owner.jsterm.setInputValue(res.result);
-    });
+    this.output.owner.storeObjectInGlobal(this.objectActor.actor);
   },
 
   /**
    * The click event handler for objects shown inline.
    * @private
    */
   _onClick: function ()
   {
diff --git a/devtools/client/webconsole/new-console-output/components/variables-view-link.js b/devtools/client/webconsole/new-console-output/components/variables-view-link.js
--- a/devtools/client/webconsole/new-console-output/components/variables-view-link.js
+++ b/devtools/client/webconsole/new-console-output/components/variables-view-link.js
@@ -20,15 +20,16 @@ VariablesViewLink.propTypes = {
 };
 
 function VariablesViewLink(props) {
   const { object, children } = props;
 
   return (
     dom.a({
       onClick: openVariablesView.bind(null, object),
+      "data-actor": object.actor,
       className: "cm-variable",
       draggable: false,
     }, children)
   );
 }
 
 module.exports = VariablesViewLink;
diff --git a/devtools/client/webconsole/webconsole.js b/devtools/client/webconsole/webconsole.js
--- a/devtools/client/webconsole/webconsole.js
+++ b/devtools/client/webconsole/webconsole.js
@@ -537,72 +537,93 @@ WebConsoleFrame.prototype = {
    */
   _initUI: function () {
     this.document = this.window.document;
     this.rootElement = this.document.documentElement;
     this.NEW_CONSOLE_OUTPUT_ENABLED = !this.isBrowserConsole
       && !this.owner.target.chrome
       && Services.prefs.getBoolPref(PREF_NEW_FRONTEND_ENABLED);
 
-    this._initDefaultFilterPrefs();
-
-    // Register the controller to handle "select all" properly.
-    this._commandController = new CommandController(this);
-    this.window.controllers.insertControllerAt(0, this._commandController);
-
-    this._contextMenuHandler = new ConsoleContextMenu(this);
-
     let doc = this.document;
 
     this.filterBox = doc.querySelector(".hud-filter-box");
     this.outputNode = doc.getElementById("output-container");
     this.outputWrapper = doc.getElementById("output-wrapper");
 
     this.completeNode = doc.querySelector(".jsterm-complete-node");
     this.inputNode = doc.querySelector(".jsterm-input-node");
 
-    this._setFilterTextBoxEvents();
-    this._initFilterButtons();
-
-    // Update the character width and height needed for the popup offset
-    // calculations.
-    this._updateCharSize();
-
-    let clearButton =
-      doc.getElementsByClassName("webconsole-clear-console-button")[0];
-    clearButton.addEventListener("command", () => {
-      this.owner._onClearButton();
-      this.jsterm.clearOutput(true);
-    });
-
     this.jsterm = new JSTerm(this);
     this.jsterm.init();
 
     let toolbox = gDevTools.getToolbox(this.owner.target);
 
     if (this.NEW_CONSOLE_OUTPUT_ENABLED) {
       // @TODO Remove this once JSTerm is handled with React/Redux.
       this.window.jsterm = this.jsterm;
       console.log("Entering experimental mode for console frontend");
 
       // XXX: We should actually stop output from happening on old output
       // panel, but for now let's just hide it.
       this.experimentalOutputNode = this.outputNode.cloneNode();
       this.experimentalOutputNode.removeAttribute("tabindex");
       this.outputNode.hidden = true;
       this.outputNode.parentNode.appendChild(this.experimentalOutputNode);
+
+      // Hide open in variables view menu item since clicking on it works,
+      // and we'll move object expansion out of variable view in Bug 1243802.
+      doc.getElementById("menu_openInVarView").setAttribute("hidden", "true");
+
+      // Hook up 'store in global' context menu command (implemented in old
+      // frontend in console-output).
+      let contextMenuTarget = null;
+      let storeInGlobalCmd = doc.getElementById("menu_storeAsGlobal");
+      storeInGlobalCmd.addEventListener("command", () => {
+        this.storeObjectInGlobal(contextMenuTarget.dataset.actor);
+      });
+
+      this.outputWrapper.addEventListener("contextmenu", (e) => {
+        contextMenuTarget = e.target;
+        if (contextMenuTarget.dataset && contextMenuTarget.dataset.actor) {
+          storeInGlobalCmd.removeAttribute("hidden");
+        } else {
+          storeInGlobalCmd.setAttribute("hidden", "true");
+        }
+      });
+
       // @TODO Once the toolbox has been converted to React, see if passing
       // in JSTerm is still necessary.
 
       this.newConsoleOutput = new this.window.NewConsoleOutput(
         this.experimentalOutputNode, this.jsterm, toolbox, this.owner);
       console.log("Created newConsoleOutput", this.newConsoleOutput);
 
       let filterToolbar = doc.querySelector(".hud-console-filter-toolbar");
       filterToolbar.hidden = true;
+    } else {
+      // Update the character width and height needed for the popup offset
+      // calculations.
+      this._updateCharSize();
+
+      this._initDefaultFilterPrefs();
+
+      // Register the controller to handle "select all" properly.
+      this._commandController = new CommandController(this);
+      this.window.controllers.insertControllerAt(0, this._commandController);
+
+      this._contextMenuHandler = new ConsoleContextMenu(this);
+      this._setFilterTextBoxEvents();
+      this._initFilterButtons();
+
+      let clearButton =
+        doc.getElementsByClassName("webconsole-clear-console-button")[0];
+      clearButton.addEventListener("command", () => {
+        this.owner._onClearButton();
+        this.jsterm.clearOutput(true);
+      });
     }
 
     this.resize();
     this.window.addEventListener("resize", this.resize, true);
     this.jsterm.on("sidebar-opened", this.resize);
     this.jsterm.on("sidebar-closed", this.resize);
 
     if (toolbox) {
@@ -2797,16 +2818,38 @@ WebConsoleFrame.prototype = {
     if (!item || !item.url) {
       return;
     }
 
     this.owner.openLink(item.url);
   },
 
   /**
+   * Given an actor ID, inject it into the window as a global variable
+   * and prepopulate jsterm with that variable name.
+   */
+  storeObjectInGlobal: function(actor) {
+    let evalString = `{ let i = 0;
+      while (this.hasOwnProperty("temp" + i) && i < 1000) {
+        i++;
+      }
+      this["temp" + i] = _self;
+      "temp" + i;
+    }`;
+    let options = {
+      selectedObjectActor: actor,
+    };
+
+    this.jsterm.requestEvaluation(evalString, options).then((res) => {
+      this.jsterm.focus();
+      this.jsterm.setInputValue(res.result);
+    });
+  },
+
+  /**
    * Destroy the WebConsoleFrame object. Call this method to avoid memory leaks
    * when the Web Console is closed.
    *
    * @return object
    *         A promise that is resolved when the WebConsoleFrame instance is
    *         destroyed.
    */
   destroy: function () {
