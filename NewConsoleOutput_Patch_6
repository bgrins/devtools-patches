# HG changeset patch
# User Lin Clark <lclark@mozilla.com>
Bug 1291832 - New console frontend: Remove all category/severity cruft. r=nchevobbe



diff --git a/devtools/client/locales/en-US/webconsole.properties b/devtools/client/locales/en-US/webconsole.properties
index 97ed709..6ecf927 100644
--- a/devtools/client/locales/en-US/webconsole.properties
+++ b/devtools/client/locales/en-US/webconsole.properties
@@ -253,17 +253,24 @@ table.key=Key
 table.value=Values
 
 # LOCALIZATION NOTE (severity.error, severity.warn, severity.info, severity.log):
 # tooltip for icons next to console output
 severity.error=Error
 severity.warn=Warning
 severity.info=Info
 severity.log=Log
-severity.debug=Debug
+
+# LOCALIZATION NOTE (level.error, level.warn, level.info, level.log, level.debug):
+# tooltip for icons next to console output
+level.error=Error
+level.warn=Warning
+level.info=Info
+level.log=Log
+level.debug=Debug
 
 # LOCALIZATION NOTE (webconsole.find.key)
 # Key shortcut used to focus the search box on upper right of the console
 webconsole.find.key=CmdOrCtrl+F
 
 # LOCALIZATION NOTE (webconsole.close.key)
 # Key shortcut used to close the Browser console (doesn't work in regular web console)
 webconsole.close.key=CmdOrCtrl+W
diff --git a/devtools/client/themes/webconsole.css b/devtools/client/themes/webconsole.css
index b53c3bd..7f8a964 100644
--- a/devtools/client/themes/webconsole.css
+++ b/devtools/client/themes/webconsole.css
@@ -337,39 +337,39 @@ a {
 
 /* Web Developer styles */
 .webconsole-filter-button[category="logging"] > .toolbarbutton-menubutton-button:before {
   background-image: linear-gradient(#B9B9B9, #AAAAAA);
   border-color: #929292;
 }
 
 .message[category=console] > .indent,
-.message.console > .indent {
+.message.console-api > .indent {
   border-inline-end: solid #cbcbcb 6px;
 }
 
 .message[category=console][severity=error] > .icon::before,
 .message[category=output][severity=error] > .icon::before,
 .message[category=server][severity=error] > .icon::before,
-.message.console.error > .icon::before,
+.message.console-api.error > .icon::before,
 .message.output.error > .icon::before,
 .message.server.error > .icon::before {
   background-position: -12px -36px;
 }
 
 .message[category=console][severity=warn] > .icon::before,
 .message[category=server][severity=warn] > .icon::before,
-.message.console.warn > .icon::before,
+.message.console-api.warn > .icon::before,
 .message.server.warn > .icon::before {
   background-position: -24px -36px;
 }
 
 .message[category=console][severity=info] > .icon::before,
 .message[category=server][severity=info] > .icon::before,
-.message.console.info > .icon::before,
+.message.console-api.info > .icon::before,
 .message.server.info > .icon::before {
   background-position: -36px -36px;
 }
 
 /* Server Logging Styles */
 
 .webconsole-filter-button[category="server"] > .toolbarbutton-menubutton-button:before {
   background-image: linear-gradient(rgb(144, 176, 144), rgb(99, 151, 99));
diff --git a/devtools/client/webconsole/new-console-output/components/message-icon.js b/devtools/client/webconsole/new-console-output/components/message-icon.js
index 4811c05..045a033 100644
--- a/devtools/client/webconsole/new-console-output/components/message-icon.js
+++ b/devtools/client/webconsole/new-console-output/components/message-icon.js
@@ -11,22 +11,22 @@ const {
   DOM: dom,
   PropTypes
 } = require("devtools/client/shared/vendor/react");
 const {l10n} = require("devtools/client/webconsole/new-console-output/utils/messages");
 
 MessageIcon.displayName = "MessageIcon";
 
 MessageIcon.propTypes = {
-  severity: PropTypes.string.isRequired,
+  level: PropTypes.string.isRequired,
 };
 
 function MessageIcon(props) {
-  const { severity } = props;
+  const { level } = props;
 
-  const title = l10n.getStr("severity." + severity);
+  const title = l10n.getStr("level." + level);
   return dom.div({
     className: "icon",
     title
   });
 }
 
 module.exports.MessageIcon = MessageIcon;
diff --git a/devtools/client/webconsole/new-console-output/components/message-types/console-api-call.js b/devtools/client/webconsole/new-console-output/components/message-types/console-api-call.js
index 4c0ee2f..38a1f80 100644
--- a/devtools/client/webconsole/new-console-output/components/message-types/console-api-call.js
+++ b/devtools/client/webconsole/new-console-output/components/message-types/console-api-call.js
@@ -21,53 +21,53 @@ ConsoleApiCall.displayName = "ConsoleApiCall";
 
 ConsoleApiCall.propTypes = {
   message: PropTypes.object.isRequired,
   onViewSourceInDebugger: PropTypes.func.isRequired,
 };
 
 function ConsoleApiCall(props) {
   const { message, onViewSourceInDebugger } = props;
-  const {category, severity, stacktrace, type} = message;
+  const {source, level, stacktrace, type} = message;
 
   let messageBody;
   if (type === "trace") {
     messageBody = [
       dom.span({className: "cm-variable"}, "console"),
       ".",
       dom.span({className: "cm-property"}, "trace"),
       "():"
     ];
   } else if (message.parameters) {
     messageBody = message.parameters.map((grip) => GripMessageBody({grip}));
   } else {
     messageBody = message.messageText;
   }
 
-  const icon = MessageIcon({severity: severity});
+  const icon = MessageIcon({level});
   const repeat = MessageRepeat({repeat: message.repeat});
 
   let attachment = "";
   if (stacktrace) {
     attachment = dom.div({className: "stacktrace devtools-monospace"},
       StackTrace({
         stacktrace: stacktrace,
         onViewSourceInDebugger: onViewSourceInDebugger
       })
     );
   }
 
   const classes = ["message", "cm-s-mozilla"];
 
-  if (category) {
-    classes.push(category);
+  if (source) {
+    classes.push(source);
   }
 
-  if (severity) {
-    classes.push(severity);
+  if (level) {
+    classes.push(level);
   }
 
   if (type === "trace") {
     classes.push("open");
   }
 
   return dom.div({
     className: classes.join(" ")
diff --git a/devtools/client/webconsole/new-console-output/components/message-types/console-command.js b/devtools/client/webconsole/new-console-output/components/message-types/console-command.js
index 99412bc..d1e46d8 100644
--- a/devtools/client/webconsole/new-console-output/components/message-types/console-command.js
+++ b/devtools/client/webconsole/new-console-output/components/message-types/console-command.js
@@ -21,28 +21,28 @@ ConsoleCommand.propTypes = {
   message: PropTypes.instanceOf(ConsoleCommandType).isRequired,
 };
 
 /**
  * Displays input from the console.
  */
 function ConsoleCommand(props) {
   const { message } = props;
-  const {category, severity} = message;
+  const {source, level} = message;
 
-  const icon = MessageIcon({severity: severity});
+  const icon = MessageIcon({level});
 
   const classes = ["message"];
 
-  if (category) {
-    classes.push(category);
+  if (source) {
+    classes.push(source);
   }
 
-  if (severity) {
-    classes.push(severity);
+  if (level) {
+    classes.push(level);
   }
 
   return dom.div({
     className: classes.join(" "),
     ariaLive: "off",
   },
     // @TODO add timestamp
     // @TODO add indent if necessary
diff --git a/devtools/client/webconsole/new-console-output/components/message-types/evaluation-result.js b/devtools/client/webconsole/new-console-output/components/message-types/evaluation-result.js
index 10309a5..2fa2da7 100644
--- a/devtools/client/webconsole/new-console-output/components/message-types/evaluation-result.js
+++ b/devtools/client/webconsole/new-console-output/components/message-types/evaluation-result.js
@@ -18,27 +18,27 @@ const MessageIcon = createFactory(require("devtools/client/webconsole/new-consol
 EvaluationResult.displayName = "EvaluationResult";
 
 EvaluationResult.propTypes = {
   message: PropTypes.object.isRequired,
 };
 
 function EvaluationResult(props) {
   const { message } = props;
-  const {category, severity} = message;
-  const icon = MessageIcon({severity: severity});
+  const {source, level} = message;
+  const icon = MessageIcon({level});
 
   const classes = ["message", "cm-s-mozilla"];
 
-  if (category) {
-    classes.push(category);
+  if (source) {
+    classes.push(source);
   }
 
-  if (severity) {
-    classes.push(severity);
+  if (level) {
+    classes.push(level);
   }
 
   return dom.div({
     className: classes.join(" ")
   },
     // @TODO add timestamp
     // @TODO add indent if needed with console.group
     icon,
diff --git a/devtools/client/webconsole/new-console-output/components/message-types/page-error.js b/devtools/client/webconsole/new-console-output/components/message-types/page-error.js
index f45a4db..2eca97e 100644
--- a/devtools/client/webconsole/new-console-output/components/message-types/page-error.js
+++ b/devtools/client/webconsole/new-console-output/components/message-types/page-error.js
@@ -18,29 +18,29 @@ const MessageIcon = createFactory(require("devtools/client/webconsole/new-consol
 PageError.displayName = "PageError";
 
 PageError.propTypes = {
   message: PropTypes.object.isRequired,
 };
 
 function PageError(props) {
   const { message } = props;
-  const {category, severity} = message;
+  const {source, level} = message;
 
   const repeat = MessageRepeat({repeat: message.repeat});
-  const icon = MessageIcon({severity: severity});
+  const icon = MessageIcon({level});
 
   const classes = ["message"];
 
-  if (category) {
-    classes.push(category);
+  if (source) {
+    classes.push(source);
   }
 
-  if (severity) {
-    classes.push(severity);
+  if (level) {
+    classes.push(level);
   }
 
   return dom.div({
     className: classes.join(" ")
   },
     icon,
     dom.span(
       {className: "message-body-wrapper message-body devtools-monospace"},
diff --git a/devtools/client/webconsole/new-console-output/constants.js b/devtools/client/webconsole/new-console-output/constants.js
index d3bef9e..92e16fb 100644
--- a/devtools/client/webconsole/new-console-output/constants.js
+++ b/devtools/client/webconsole/new-console-output/constants.js
@@ -9,59 +9,16 @@ const actionTypes = {
   MESSAGE_ADD: "MESSAGE_ADD",
   MESSAGES_CLEAR: "MESSAGES_CLEAR",
   FILTER_TOGGLE: "FILTER_TOGGLE",
   FILTER_TEXT_SET: "FILTER_TEXT_SET",
   FILTERS_CLEAR: "FILTERS_CLEAR",
   FILTER_BAR_TOGGLE: "FILTER_BAR_TOGGLE",
 };
 
-const categories = {
-  CATEGORY_NETWORK: "network",
-  CATEGORY_CSS: "cssparser",
-  CATEGORY_JS: "exception",
-  CATEGORY_WEBDEV: "console",
-  CATEGORY_INPUT: "input",
-  CATEGORY_OUTPUT: "output",
-  CATEGORY_SECURITY: "security",
-  CATEGORY_SERVER: "server"
-};
-
-const severities = {
-  SEVERITY_ERROR: "error",
-  SEVERITY_WARNING: "warn",
-  SEVERITY_INFO: "info",
-  SEVERITY_LOG: "log"
-};
-
-// A mapping from the console API log event levels to the Web Console
-// severities.
-const levels = {
-  LEVELS: {
-    error: severities.SEVERITY_ERROR,
-    exception: severities.SEVERITY_ERROR,
-    assert: severities.SEVERITY_ERROR,
-    warn: severities.SEVERITY_WARNING,
-    info: severities.SEVERITY_INFO,
-    log: severities.SEVERITY_LOG,
-    clear: severities.SEVERITY_LOG,
-    trace: severities.SEVERITY_LOG,
-    table: severities.SEVERITY_LOG,
-    debug: severities.SEVERITY_LOG,
-    dir: severities.SEVERITY_LOG,
-    dirxml: severities.SEVERITY_LOG,
-    group: severities.SEVERITY_LOG,
-    groupCollapsed: severities.SEVERITY_LOG,
-    groupEnd: severities.SEVERITY_LOG,
-    time: severities.SEVERITY_LOG,
-    timeEnd: severities.SEVERITY_LOG,
-    count: severities.SEVERITY_LOG
-  }
-};
-
 const chromeRDPEnums = {
   MESSAGE_SOURCE: {
     XML: "xml",
     JAVASCRIPT: "javascript",
     NETWORK: "network",
     CONSOLE_API: "console-api",
     STORAGE: "storage",
     APPCACHE: "appcache",
@@ -91,15 +48,10 @@ const chromeRDPEnums = {
     LOG: "log",
     ERROR: "error",
     WARN: "warn",
     DEBUG: "debug",
     INFO: "info"
   }
 };
 
-const filterTypes = {
-  FILTER_TOGGLE: "FILTER_TOGGLE"
-};
-
 // Combine into a single constants object
-module.exports = Object.assign({}, actionTypes, categories, severities, levels,
-  chromeRDPEnums, filterTypes);
+module.exports = Object.assign({}, actionTypes, chromeRDPEnums);
diff --git a/devtools/client/webconsole/new-console-output/selectors/messages.js b/devtools/client/webconsole/new-console-output/selectors/messages.js
index e85b5cd..d57f34c 100644
--- a/devtools/client/webconsole/new-console-output/selectors/messages.js
+++ b/devtools/client/webconsole/new-console-output/selectors/messages.js
@@ -13,24 +13,24 @@ const {
 
 function getAllMessages(state) {
   let messages = state.messages;
   let logLimit = getLogLimit(state);
   let filters = getAllFilters(state);
 
   return prune(
     search(
-      filterSeverity(messages, filters),
+      filterLevel(messages, filters),
       filters.text
     ),
     logLimit
   );
 }
 
-function filterSeverity(messages, filters) {
+function filterLevel(messages, filters) {
   return messages.filter((message) => {
     return filters[message.level] === true
       || [MESSAGE_TYPE.COMMAND, MESSAGE_TYPE.RESULT].includes(message.type);
   });
 }
 
 function search(messages, text = "") {
   if (text === "") {
diff --git a/devtools/client/webconsole/new-console-output/test/components/message-icon.test.js b/devtools/client/webconsole/new-console-output/test/components/message-icon.test.js
index 963e61f..971324a 100644
--- a/devtools/client/webconsole/new-console-output/test/components/message-icon.test.js
+++ b/devtools/client/webconsole/new-console-output/test/components/message-icon.test.js
@@ -1,23 +1,23 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 "use strict";
 
 const {
-  SEVERITY_ERROR,
+  MESSAGE_LEVEL,
 } = require("devtools/client/webconsole/new-console-output/constants");
 const { MessageIcon } = require("devtools/client/webconsole/new-console-output/components/message-icon");
 
 const expect = require("expect");
 
 const {
   renderComponent
 } = require("devtools/client/webconsole/new-console-output/test/helpers");
 
 describe("MessageIcon component:", () => {
-  it("renders icon based on severity", () => {
-    const rendered = renderComponent(MessageIcon, { severity: SEVERITY_ERROR });
+  it("renders icon based on level", () => {
+    const rendered = renderComponent(MessageIcon, { level: MESSAGE_LEVEL.ERROR });
 
     expect(rendered.classList.contains("icon")).toBe(true);
     expect(rendered.getAttribute("title")).toBe("Error");
   });
 });
diff --git a/devtools/client/webconsole/new-console-output/test/fixtures/L10n.js b/devtools/client/webconsole/new-console-output/test/fixtures/L10n.js
index 1b8eac9..23deb07 100644
--- a/devtools/client/webconsole/new-console-output/test/fixtures/L10n.js
+++ b/devtools/client/webconsole/new-console-output/test/fixtures/L10n.js
@@ -2,16 +2,16 @@
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
 // @TODO Load the actual strings from webconsole.properties instead.
 class L10n {
   getStr(str) {
     switch (str) {
-      case "severity.error":
+      case "level.error":
         return "Error";
     }
     return str;
   }
 }
 
 module.exports = L10n;
diff --git a/devtools/client/webconsole/new-console-output/test/fixtures/stubs.js b/devtools/client/webconsole/new-console-output/test/fixtures/stubs.js
index a27685a..3eac96e 100644
--- a/devtools/client/webconsole/new-console-output/test/fixtures/stubs.js
+++ b/devtools/client/webconsole/new-console-output/test/fixtures/stubs.js
@@ -2,104 +2,91 @@
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
 const {
   MESSAGE_SOURCE,
   MESSAGE_TYPE,
   MESSAGE_LEVEL,
-  // Legacy
-  CATEGORY_WEBDEV,
-  SEVERITY_LOG,
 } = require("devtools/client/webconsole/new-console-output/constants");
 
 const { ConsoleMessage } = require("devtools/client/webconsole/new-console-output/types");
 
 exports.stubConsoleMessages = new Map([
   [
     "console.log('foobar', 'test')",
     new ConsoleMessage({
       allowRepeating: true,
       source: MESSAGE_SOURCE.CONSOLE_API,
       type: MESSAGE_TYPE.LOG,
       level: MESSAGE_LEVEL.LOG,
       messageText: null,
       parameters: ["foobar", "test"],
       repeat: 1,
       repeatId: null,
-      category: CATEGORY_WEBDEV,
-      severity: SEVERITY_LOG,
       stacktrace: undefined
     })
   ],
   [
     "console.warn('danger, will robinson!')",
     new ConsoleMessage({
       allowRepeating: true,
       source: MESSAGE_SOURCE.CONSOLE_API,
       type: MESSAGE_TYPE.LOG,
       level: MESSAGE_LEVEL.WARN,
       messageText: null,
       parameters: ["danger, will robinson!"],
       repeat: 1,
       repeatId: null,
-      category: CATEGORY_WEBDEV,
-      severity: SEVERITY_LOG,
     })
   ],
   [
     "console.log(undefined)",
     new ConsoleMessage({
       allowRepeating: true,
       source: MESSAGE_SOURCE.CONSOLE_API,
       type: MESSAGE_TYPE.LOG,
       level: MESSAGE_LEVEL.LOG,
       messageText: null,
       parameters: [
         { type: "undefined" }
       ],
       repeat: 1,
       repeatId: null,
-      category: CATEGORY_WEBDEV,
-      severity: SEVERITY_LOG,
     })
   ],
   [
     "console.log(NaN)",
     new ConsoleMessage({
       allowRepeating: true,
       source: MESSAGE_SOURCE.CONSOLE_API,
       type: MESSAGE_TYPE.LOG,
       level: MESSAGE_LEVEL.LOG,
       messageText: null,
       parameters: [
         { type: "NaN" }
       ],
       repeat: 1,
       repeatId: null,
-      category: CATEGORY_WEBDEV,
-      severity: SEVERITY_LOG,
     })
   ],
   [
     "console.log(null)",
     new ConsoleMessage({
       allowRepeating: true,
       source: MESSAGE_SOURCE.CONSOLE_API,
       type: MESSAGE_TYPE.LOG,
       level: MESSAGE_LEVEL.LOG,
       messageText: null,
       parameters: [
         { type: "null" }
       ],
       repeat: 1,
       repeatId: null,
-      category: CATEGORY_WEBDEV,
-      severity: SEVERITY_LOG,
     })
   ],
   [
     "console.clear()",
     new ConsoleMessage({
       allowRepeating: true,
       source: MESSAGE_SOURCE.CONSOLE_API,
       type: MESSAGE_TYPE.CLEAR,
@@ -116,18 +103,16 @@ exports.stubConsoleMessages = new Map([
       allowRepeating: true,
       source: MESSAGE_SOURCE.CONSOLE_API,
       type: MESSAGE_TYPE.LOG,
       level: MESSAGE_LEVEL.DEBUG,
       messageText: "bar: 1",
       parameters: null,
       repeat: 1,
       repeatId: null,
-      category: CATEGORY_WEBDEV,
-      severity: SEVERITY_LOG,
     })
   ],
   [
     "new Date(0)",
     new ConsoleMessage({
       allowRepeating: true,
       source: MESSAGE_SOURCE.JAVASCRIPT,
       type: MESSAGE_TYPE.RESULT,
@@ -142,28 +127,24 @@ exports.stubConsoleMessages = new Map([
         "sealed": false,
         "ownPropertyLength": 0,
         "preview": {
           "timestamp": 0
         }
       },
       repeat: 1,
       repeatId: null,
-      category: CATEGORY_WEBDEV,
-      severity: SEVERITY_LOG,
     })
   ],
   [
     "ReferenceError",
     new ConsoleMessage({
       allowRepeating: true,
       source: MESSAGE_SOURCE.JAVASCRIPT,
       type: MESSAGE_TYPE.LOG,
       level: MESSAGE_LEVEL.ERROR,
       messageText: "ReferenceError: asdf is not defined",
       parameters: null,
       repeat: 1,
       repeatId: null,
-      category: CATEGORY_WEBDEV,
-      severity: SEVERITY_LOG,
     })
   ]
 ]);
diff --git a/devtools/client/webconsole/new-console-output/test/store/filters.test.js b/devtools/client/webconsole/new-console-output/test/store/filters.test.js
index dc5c59f..34103c3 100644
--- a/devtools/client/webconsole/new-console-output/test/store/filters.test.js
+++ b/devtools/client/webconsole/new-console-output/test/store/filters.test.js
@@ -28,17 +28,17 @@ describe("Filtering", () => {
   ]);
   // Console Command
   store.dispatch(messageAdd(new ConsoleCommand({ messageText: `console.warn("x")` })));
 
   beforeEach(() => {
     store.dispatch(actions.filtersClear());
   });
 
-  describe("Severity filter", () => {
+  describe("Level filter", () => {
     it("filters log messages", () => {
       store.dispatch(actions.filterToggle(MESSAGE_LEVEL.LOG));
 
       let messages = getAllMessages(store.getState());
       expect(messages.size).toEqual(numMessages - 2);
     });
 
     it("filters debug messages", () => {
diff --git a/devtools/client/webconsole/new-console-output/types.js b/devtools/client/webconsole/new-console-output/types.js
index 133cb36..a84a78b 100644
--- a/devtools/client/webconsole/new-console-output/types.js
+++ b/devtools/client/webconsole/new-console-output/types.js
@@ -15,26 +15,22 @@ const {
 
 exports.ConsoleCommand = Immutable.Record({
   id: null,
   allowRepeating: false,
   messageText: null,
   source: MESSAGE_SOURCE.JAVASCRIPT,
   type: MESSAGE_TYPE.COMMAND,
   level: MESSAGE_LEVEL.LOG,
-  category: "input",
-  severity: MESSAGE_TYPE.LOG,
 });
 
 exports.ConsoleMessage = Immutable.Record({
   id: null,
   allowRepeating: true,
   source: null,
   type: null,
   level: null,
   messageText: null,
   parameters: null,
   repeat: 1,
   repeatId: null,
-  category: "output",
-  severity: "log",
   stacktrace: null,
 });
diff --git a/devtools/client/webconsole/new-console-output/utils/messages.js b/devtools/client/webconsole/new-console-output/utils/messages.js
index 923aedb..af679cd 100644
--- a/devtools/client/webconsole/new-console-output/utils/messages.js
+++ b/devtools/client/webconsole/new-console-output/utils/messages.js
@@ -9,22 +9,16 @@
 const WebConsoleUtils = require("devtools/client/webconsole/utils").Utils;
 const STRINGS_URI = "chrome://devtools/locale/webconsole.properties";
 const l10n = new WebConsoleUtils.L10n(STRINGS_URI);
 
 const {
   MESSAGE_SOURCE,
   MESSAGE_TYPE,
   MESSAGE_LEVEL,
-  // Legacy
-  CATEGORY_JS,
-  CATEGORY_OUTPUT,
-  CATEGORY_WEBDEV,
-  LEVELS,
-  SEVERITY_LOG,
 } = require("../constants");
 const { ConsoleMessage } = require("../types");
 
 function prepareMessage(packet, idGenerator) {
   // This packet is already in the expected packet structure. Simply return.
   if (!packet.source) {
     packet = transformPacket(packet);
   }
@@ -44,77 +38,71 @@ function transformPacket(packet) {
   }
 
   switch (packet.type) {
     case "consoleAPICall": {
       let { message } = packet;
 
       let parameters = message.arguments;
       let type = message.level;
-      let level = LEVELS[type] || MESSAGE_TYPE.LOG;
+      let level = getLevelFromType(type);
       let messageText = null;
 
       // Special per-type conversion.
       switch (type) {
         case "clear":
           // We show a message to users when calls console.clear() is called.
           parameters = [l10n.getStr("consoleCleared")];
           break;
         case "count":
           // Chrome RDP doesn't have a special type for count.
           type = MESSAGE_TYPE.LOG;
-          level = MESSAGE_LEVEL.DEBUG;
           let {counter} = message;
           let label = counter.label ? counter.label : l10n.getStr("noCounterLabel");
           messageText = `${label}: ${counter.count}`;
           parameters = null;
           break;
       }
 
       return new ConsoleMessage({
         source: MESSAGE_SOURCE.CONSOLE_API,
         type,
         level,
         parameters,
         messageText,
-        category: CATEGORY_WEBDEV,
-        severity: level,
         stacktrace: message.stacktrace,
       });
     }
 
     case "pageError": {
       let { pageError } = packet;
       let level = MESSAGE_LEVEL.ERROR;
       if (pageError.warning || pageError.strict) {
         level = MESSAGE_LEVEL.WARN;
       } else if (pageError.info) {
         level = MESSAGE_LEVEL.INFO;
       }
 
       return new ConsoleMessage({
         source: MESSAGE_SOURCE.JAVASCRIPT,
         type: MESSAGE_TYPE.LOG,
+        level,
         messageText: pageError.errorMessage,
-        category: CATEGORY_JS,
-        severity: level,
       });
     }
 
     case "evaluationResult":
     default: {
       let { result } = packet;
 
       return new ConsoleMessage({
         source: MESSAGE_SOURCE.JAVASCRIPT,
         type: MESSAGE_TYPE.RESULT,
         level: MESSAGE_LEVEL.LOG,
         parameters: result,
-        category: CATEGORY_OUTPUT,
-        severity: SEVERITY_LOG,
       });
     }
   }
 }
 
 // Helpers
 function getRepeatId(message) {
   message = message.toJS();
@@ -133,13 +121,50 @@ function convertCachedPacket(packet) {
     convertPacket.pageError = packet;
     convertPacket.type = "pageError";
   } else {
     throw new Error("Unexpected packet type");
   }
   return convertPacket;
 }
 
+/**
+ * Maps a Firefox RDP type to its corresponding level.
+ */
+function getLevelFromType(type) {
+  const levels = {
+    LEVEL_ERROR: "error",
+    LEVEL_WARNING: "warn",
+    LEVEL_INFO: "info",
+    LEVEL_LOG: "log",
+    LEVEL_DEBUG: "debug",
+  };
+
+  // A mapping from the console API log event levels to the Web Console levels.
+  const levelMap = {
+    error: levels.LEVEL_ERROR,
+    exception: levels.LEVEL_ERROR,
+    assert: levels.LEVEL_ERROR,
+    warn: levels.LEVEL_WARNING,
+    info: levels.LEVEL_INFO,
+    log: levels.LEVEL_LOG,
+    clear: levels.LEVEL_LOG,
+    trace: levels.LEVEL_LOG,
+    table: levels.LEVEL_LOG,
+    debug: levels.LEVEL_LOG,
+    dir: levels.LEVEL_LOG,
+    dirxml: levels.LEVEL_LOG,
+    group: levels.LEVEL_LOG,
+    groupCollapsed: levels.LEVEL_LOG,
+    groupEnd: levels.LEVEL_LOG,
+    time: levels.LEVEL_LOG,
+    timeEnd: levels.LEVEL_LOG,
+    count: levels.LEVEL_DEBUG,
+  };
+
+  return levelMap[type] || MESSAGE_TYPE.LOG;
+}
+
 exports.prepareMessage = prepareMessage;
 // Export for use in testing.
 exports.getRepeatId = getRepeatId;
 
 exports.l10n = l10n;
