# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  38b3c1d03a594664c6b32c35533734283c258f43
Bug XXX - What breaks in xhtml

MozReview-Commit-ID: Kg2i75BnHCe

diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -2679,17 +2679,17 @@ function BrowserPageInfo(documentURL, in
     if (currentWindow.document.documentElement.getAttribute("relatedUrl") == documentURL) {
       currentWindow.focus();
       currentWindow.resetPageInfo(args);
       return currentWindow;
     }
   }
 
   // We didn't find a matching window, so open a new one.
-  return openDialog("chrome://browser/content/pageinfo/pageInfo.xul", "",
+  return openDialog("chrome://browser/content/pageinfo/pageInfo.xhtml", "",
                     "chrome,toolbar,dialog=no,resizable", args);
 }
 
 /**
  * Sets the URI to display in the location bar.
  *
  * @param aURI [optional]
  *        nsIURI to set. If this is unspecified, the current URI will be used.
diff --git a/browser/base/content/hiddenWindow.xul b/browser/base/content/hiddenWindow.xul
--- a/browser/base/content/hiddenWindow.xul
+++ b/browser/base/content/hiddenWindow.xul
@@ -8,13 +8,14 @@
 #ifdef XP_MACOSX
 <?xul-overlay href="chrome://browser/content/macBrowserOverlay.xul"?>
 <?xml-stylesheet href="chrome://browser/skin/webRTC-indicator.css" type="text/css"?>
 
 <window id="main-window"
         xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
         xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
 
+<popupset></popupset>
 #include browserMountPoints.inc
 
 </window>
 
 #endif
diff --git a/browser/base/content/pageinfo/pageInfo.xhtml b/browser/base/content/pageinfo/pageInfo.xhtml
new file mode 100644
--- /dev/null
+++ b/browser/base/content/pageinfo/pageInfo.xhtml
@@ -0,0 +1,258 @@
+
+<html xmlns="http://www.w3.org/1999/xhtml"
+      xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
+<body>
+  <div id="container">
+  hi
+  </div>
+  <div>
+    <xul:hbox>above</xul:hbox>
+    <xul:splitter />
+    <xul:hbox>below</xul:hbox>
+  </div>
+  <xul:popupset>
+    <xul:panel id="panel" type="arrow" orient="vertical" noautofocus="true">
+      <div>hi</div>
+    </xul:panel>
+  </xul:popupset>
+  <xul:hbox>
+  inside xul
+  </xul:hbox>
+  <xul:keyset id="mainKeyset">
+    <xul:key id="key_newNavigator"
+         key="N"
+         oncommand='document.getElementById("container").textContent = "command";'
+         modifiers="accel" reserved="true"/>
+   </xul:keyset>
+</body>
+
+<script>
+ChromeUtils.import("resource://gre/modules/Services.jsm");
+function MenuItem({
+    accesskey = null,
+    checked = false,
+    click = () => {},
+    disabled = false,
+    hover = () => {},
+    id = null,
+    label = "",
+    submenu = null,
+    type = "normal",
+    visible = true,
+} = { }) {
+  this.accesskey = accesskey;
+  this.checked = checked;
+  this.click = click;
+  this.disabled = disabled;
+  this.hover = hover;
+  this.id = id;
+  this.label = label;
+  this.submenu = submenu;
+  this.type = type;
+  this.visible = visible;
+}
+
+
+/**
+ * A partial implementation of the Menu API provided by electron:
+ * https://github.com/electron/electron/blob/master/docs/api/menu.md.
+ *
+ * Extra features:
+ *  - Emits an 'open' and 'close' event when the menu is opened/closed
+
+ * @param String id (non standard)
+ *        Needed so tests can confirm the XUL implementation is working
+ */
+function Menu({ id = null } = {}) {
+  this.menuitems = [];
+  this.id = id;
+
+  Object.defineProperty(this, "items", {
+    get() {
+      return this.menuitems;
+    }
+  });
+}
+
+/**
+ * Add an item to the end of the Menu
+ *
+ * @param {MenuItem} menuItem
+ */
+Menu.prototype.append = function (menuItem) {
+  this.menuitems.push(menuItem);
+};
+
+/**
+ * Add an item to a specified position in the menu
+ *
+ * @param {int} pos
+ * @param {MenuItem} menuItem
+ */
+Menu.prototype.insert = function (pos, menuItem) {
+  throw Error("Not implemented");
+};
+
+/**
+ * Show the Menu at a specified location on the screen
+ *
+ * Missing features:
+ *   - browserWindow - BrowserWindow (optional) - Default is null.
+ *   - positioningItem Number - (optional) OS X
+ *
+ * @param {int} screenX
+ * @param {int} screenY
+ */
+Menu.prototype.popup = function (screenX, screenY) {
+  // let doc = window.top.document;
+  let doc = Services.appShell.hiddenDOMWindow.document;
+  let popupset = doc.querySelector("popupset");
+  // See bug 1285229, on Windows, opening the same popup multiple times in a
+  // row ends up duplicating the popup. The newly inserted popup doesn't
+  // dismiss the old one. So remove any previously displayed popup before
+  // opening a new one.
+  let popup = popupset.querySelector("menupopup[menu-api=\"true\"]");
+  if (popup) {
+    popup.hidePopup();
+  }
+
+  popup = doc.createElement("menupopup");
+  popup.setAttribute("menu-api", "true");
+
+  if (this.id) {
+    popup.id = this.id;
+  }
+  this._createMenuItems(popup);
+
+  // Remove the menu from the DOM once it's hidden.
+  popup.addEventListener("popuphidden", (e) => {
+    if (e.target === popup) {
+      popup.remove();
+      // this.emit("close");
+    }
+  });
+
+  popup.addEventListener("popupshown", (e) => {
+    if (e.target === popup) {
+      popup.querySelector("menuitem").focus();
+      console.log(doc.commandDispatcher.focusedElement);
+      doc.commandDispatcher.focusedElement = popup;
+      // doc.commandDispatcher.focusedWindow = doc.defaultView;
+      doc.commandDispatcher.advanceFocus();
+
+      // doc.commandDispatcher.advanceFocusIntoSubtree(popup);
+      console.log(doc.commandDispatcher.focusedWindow, doc.commandDispatcher.focusedElement);
+      // this.emit("open");
+    }
+  });
+
+  popupset.appendChild(popup);
+  popup.openPopupAtScreen(screenX, screenY, true);
+  // popup.focus();
+  // doc.focus();
+};
+
+Menu.prototype._createMenuItems = function (parent) {
+  let doc = parent.ownerDocument;
+  this.menuitems.forEach(item => {
+    if (!item.visible) {
+      return;
+    }
+
+    if (item.submenu) {
+      let menupopup = doc.createElement("menupopup");
+      item.submenu._createMenuItems(menupopup);
+
+      let menu = doc.createElement("menu");
+      menu.appendChild(menupopup);
+      menu.setAttribute("label", item.label);
+      if (item.disabled) {
+        menu.setAttribute("disabled", "true");
+      }
+      if (item.accesskey) {
+        menu.setAttribute("accesskey", item.accesskey);
+      }
+      if (item.id) {
+        menu.id = item.id;
+      }
+      parent.appendChild(menu);
+    } else if (item.type === "separator") {
+      let menusep = doc.createElement("menuseparator");
+      parent.appendChild(menusep);
+    } else {
+      let menuitem = doc.createElement("menuitem");
+      menuitem.setAttribute("label", item.label);
+      menuitem.addEventListener("command", () => {
+        item.click();
+      });
+      menuitem.addEventListener("DOMMenuItemActive", () => {
+        item.hover();
+      });
+
+      if (item.type === "checkbox") {
+        menuitem.setAttribute("type", "checkbox");
+      }
+      if (item.type === "radio") {
+        menuitem.setAttribute("type", "radio");
+      }
+      if (item.disabled) {
+        menuitem.setAttribute("disabled", "true");
+      }
+      if (item.checked) {
+        menuitem.setAttribute("checked", "true");
+      }
+      if (item.accesskey) {
+        menuitem.setAttribute("accesskey", item.accesskey);
+      }
+      if (item.id) {
+        menuitem.id = item.id;
+      }
+
+      parent.appendChild(menuitem);
+    }
+  });
+};
+
+Menu.setApplicationMenu = () => {
+  throw Error("Not implemented");
+};
+
+Menu.sendActionToFirstResponder = () => {
+  throw Error("Not implemented");
+};
+
+Menu.buildFromTemplate = () => {
+  throw Error("Not implemented");
+};
+
+</script>
+<script>
+
+document.addEventListener("contextmenu", e => {
+  e.stopPropagation();
+  e.preventDefault();
+  let menu = new Menu({
+    id: "webconsole-menu"
+  });
+
+  // Copy URL for a network request.
+  menu.append(new MenuItem({
+    id: "console-menu-copy-url",
+    label: "hi",
+    accesskey: "h",
+    visible: true,
+    click: () => {
+      console.log("Click", this);
+    },
+  }));
+
+  let {screenX, screenY} = e;
+  menu.popup(screenX, screenY);
+});
+
+console.log("Hi", Menu);
+var container = document.getElementById("container");
+container.textContent = "run";
+document.getElementById("panel").openPopup(container)
+</script>
+</html>
\ No newline at end of file
diff --git a/browser/base/jar.mn b/browser/base/jar.mn
--- a/browser/base/jar.mn
+++ b/browser/base/jar.mn
@@ -96,16 +96,17 @@ browser.jar:
         content/browser/defaultthemes/5.preview.jpg   (content/defaultthemes/5.preview.jpg)
         content/browser/defaultthemes/compact.header.png    (content/defaultthemes/compact.header.png)
         content/browser/defaultthemes/dark.icon.svg  (content/defaultthemes/dark.icon.svg)
         content/browser/defaultthemes/light.icon.svg (content/defaultthemes/light.icon.svg)
         content/browser/newtab/newTab.xhtml           (content/newtab/newTab.xhtml)
 *       content/browser/newtab/newTab.js              (content/newtab/newTab.js)
         content/browser/newtab/newTab.css             (content/newtab/newTab.css)
         content/browser/newtab/alternativeDefaultSites.json   (content/newtab/alternativeDefaultSites.json)
+        content/browser/pageinfo/pageInfo.xhtml       (content/pageinfo/pageInfo.xhtml)
 *       content/browser/pageinfo/pageInfo.xul         (content/pageinfo/pageInfo.xul)
         content/browser/pageinfo/pageInfo.js          (content/pageinfo/pageInfo.js)
         content/browser/pageinfo/pageInfo.css         (content/pageinfo/pageInfo.css)
         content/browser/pageinfo/feeds.js             (content/pageinfo/feeds.js)
         content/browser/pageinfo/feeds.xml            (content/pageinfo/feeds.xml)
         content/browser/pageinfo/permissions.js       (content/pageinfo/permissions.js)
         content/browser/pageinfo/security.js          (content/pageinfo/security.js)
         content/browser/robot.ico                     (content/robot.ico)
