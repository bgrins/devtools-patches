# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  c030dc1f2bbec7e26a4d313f0ef4ea180ceec95d
Bug 1420229 - WIP - Add instrumentation for XBL selectors where the specificity is greater than previous rules

Run with:

./mach try fuzzy -q "browser-instrumentation"

MozReview-Commit-ID: ATj8tk9V6MZ

diff --git a/taskcluster/ci/test/mochitest.yml b/taskcluster/ci/test/mochitest.yml
--- a/taskcluster/ci/test/mochitest.yml
+++ b/taskcluster/ci/test/mochitest.yml
@@ -123,20 +123,16 @@ mochitest-browser-chrome:
             default: default
 
 browser-instrumentation:
     description: "Extra instrumentation for a browser-chrome run (XUL, XBL, etc)"
     suite: mochitest/browser-chrome-instrumentation
     treeherder-symbol: tc-M(inst)
     loopback-video: true
     tier: 3
-    run-on-projects:
-        by-test-platform:
-            windows.*-nightly/.*: ["mozilla-central"]
-            default: []
     max-run-time: 14400
     mozharness:
         mochitest-flavor: browser
     allow-software-gl-layers: false
 
 browser-screenshots:
     description: "Browser Screenshots"
     suite: mochitest/browser-chrome-screenshots
diff --git a/taskcluster/ci/test/test-platforms.yml b/taskcluster/ci/test/test-platforms.yml
--- a/taskcluster/ci/test/test-platforms.yml
+++ b/taskcluster/ci/test/test-platforms.yml
@@ -45,16 +45,17 @@ linux64/debug:
 linux64/opt:
     build-platform: linux64/opt
     test-sets:
         - common-tests
         - web-platform-tests
         - opt-only-tests
         - reftest-stylo
         - desktop-screenshot-capture
+        - desktop-instrumentation
         - talos
         - linux-talos-stylo-disabled
         - awsy
         - mochitest-headless
 linux64-nightly/opt:
     build-platform: linux64-nightly/opt
     test-sets:
         - common-tests
@@ -147,16 +148,17 @@ windows7-32/debug:
         - windows-reftest-gpu
         - windows-tests
 
 windows7-32/opt:
     build-platform: win32/opt
     test-sets:
         - awsy
         - desktop-screenshot-capture
+        - desktop-instrumentation
         - windows-reftest-gpu
         - windows-talos
         - windows-tests
 
 windows7-32-pgo/opt:
     build-platform: win32-pgo/opt
     test-sets:
         - awsy
@@ -196,16 +198,17 @@ windows10-64/debug:
         - windows-tests
         - mochitest-headless
 
 windows10-64/opt:
     build-platform: win64/opt
     test-sets:
         - awsy
         - desktop-screenshot-capture
+        - desktop-instrumentation
         - windows-talos
         - windows-tests
         - mochitest-headless
 
 windows10-64-pgo/opt:
     build-platform: win64-pgo/opt
     test-sets:
         - awsy
@@ -241,16 +244,17 @@ macosx64/debug:
         - macosx64-tests
 
 macosx64/opt:
     build-platform: macosx64/opt
     test-sets:
         - macosx64-talos
         - macosx64-tests
         - desktop-screenshot-capture
+        - desktop-instrumentation
         - awsy
 
 macosx64-nightly/opt:
     build-platform: macosx64-nightly/opt
     test-sets:
         - macosx64-tests
         - awsy
 
diff --git a/testing/mochitest/browser-test.js b/testing/mochitest/browser-test.js
--- a/testing/mochitest/browser-test.js
+++ b/testing/mochitest/browser-test.js
@@ -57,17 +57,17 @@ var TabDestroyObserver = {
     }
 
     return new Promise((resolve) => {
       this.promiseResolver = resolve;
     });
   },
 };
 
-function testInit() {
+async function testInit() {
   gConfig = readConfig();
   if (gConfig.testRoot == "browser") {
     // Make sure to launch the test harness for the first opened window only
     var prefs = Services.prefs;
     if (prefs.prefHasUserValue("testing.browserTestHarness.running"))
       return;
 
     prefs.setBoolPref("testing.browserTestHarness.running", true);
@@ -114,26 +114,27 @@ function testInit() {
   } else {
     // In non-e10s, only run the ShutdownLeaksCollector in the parent process.
     Components.utils.import("chrome://mochikit/content/ShutdownLeaksCollector.jsm");
   }
 
   let gmm = Cc["@mozilla.org/globalmessagemanager;1"].getService(Ci.nsIMessageListenerManager);
   gmm.loadFrameScript("chrome://mochikit/content/tests/SimpleTest/AsyncUtilsContent.js", true);
 
-  var testSuite = Cc["@mozilla.org/process/environment;1"].
-                    getService(Ci.nsIEnvironment).
-                    get("TEST_SUITE");
-  if (testSuite == "browser-chrome-instrumentation") {
-    takeInstrumentation();
-  }
+  // var testSuite = Cc["@mozilla.org/process/environment;1"].
+  //                   getService(Ci.nsIEnvironment).
+  //                   get("TEST_SUITE");
+  // if (testSuite == "browser-chrome-instrumentation") {
+  //   takeInstrumentation();
+  // }
+
+  takeInstrumentation();
 }
 
 function takeInstrumentation() {
-
   let instrumentData = {
     elements: {}
   };
 
   function pad(str, length) {
     if (str.length >= length)
       return str;
 
@@ -220,22 +221,77 @@ function takeInstrumentation() {
   // An iterator over an element and its ancestors
   function* elementPath(element) {
     yield element;
     while ((element = element.parentNode) && (element instanceof Element)) {
       yield element;
     }
   }
 
+  function getRules(node) {
+    const DOMUtils = Cc["@mozilla.org/inspector/dom-utils;1"]
+            .getService(Ci.inIDOMUtils);
+    let domRules = DOMUtils.getCSSStyleRules(node, null);
+    var rules = [];
+    for (var i = 0; i < domRules.Count(); i++) {
+      var domRule = domRules.GetElementAt(i);
+      let selectors = [];
+      let len = DOMUtils.getSelectorCount(domRule);
+      for (let j = 0; j < len; j++) {
+        let text = DOMUtils.getSelectorText(domRule, j);
+        let specificity = DOMUtils.getSpecificity(domRule, j);
+        let matches = DOMUtils.selectorMatchesElement(node, domRule, j);
+
+        if (matches) {
+          let sel = {text,specificity,matches,fullSelectorText: domRule.selectorText};
+          selectors.push(sel);
+        }
+      }
+
+      rules.push(selectors);
+    }
+    return rules;
+  }
+
+  function findMismatchedSpecificities(element) {
+    let rules = getRules(element);
+    let mismatched = [];
+
+    let lastMaxSelector = 0;
+    let matched = false;
+    for (let i = 0; i < rules.length; i++) {
+      let maxSelector = rules[i].sort((a, b) => {
+        return a.specificity - b.specificity;
+      })[0];
+
+      if (!maxSelector) {
+        continue;
+      }
+
+      if (maxSelector.specificity < lastMaxSelector.specificity) {
+        matched = true;
+      }
+
+      lastMaxSelector = maxSelector;
+    }
+
+    if (matched) {
+      return rules;
+    }
+
+    return null;
+  }
+
   // Returns the information we care about for an element
   function getElementInfo(element) {
     let style = element.ownerGlobal.getComputedStyle(element);
     let binding = style && style.getPropertyValue("-moz-binding");
 
     return {
+      mismatchedRules: findMismatchedSpecificities(element),
       namespaceURI: element.namespaceURI,
       localName: element.localName,
       binding: (binding && binding != "none") ? binding : null,
     }
   }
 
   // The selector for just this element
   function immediateSelector(element) {
