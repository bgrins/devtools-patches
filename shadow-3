# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  4e429d313fd2e0f9202271ee8f3fb798817ec3e7

diff --git a/devtools/server/actors/inspector.js b/devtools/server/actors/inspector.js
--- a/devtools/server/actors/inspector.js
+++ b/devtools/server/actors/inspector.js
@@ -1223,16 +1223,19 @@ var WalkerActor = protocol.ActorClassWit
       parents.push(this._ref(cur));
     }
     return parents;
   },
 
   parentNode: function (node) {
     let walker = this.getDocumentWalker(node.rawNode);
     let parent = walker.parentNode();
+    if (parent && parent.shadowRoot) {
+      parent = parent.shadowRoot;
+    }
     if (parent) {
       return this._ref(parent);
     }
     return null;
   },
 
   /**
    * If the given NodeActor only has a single text node as a child with a text
@@ -1401,16 +1404,20 @@ var WalkerActor = protocol.ActorClassWit
       return this.getDocumentWalker(documentWalkerNode, whatToShow, SKIP_TO_SIBLING);
     };
 
     // Need to know the first and last child.
     let rawNode = node.rawNode;
     let firstChild = getFilteredWalker(rawNode).firstChild();
     let lastChild = getFilteredWalker(rawNode).lastChild();
 
+    if (rawNode.shadowRoot) {
+      firstChild = lastChild = rawNode.shadowRoot;
+    }
+
     if (!firstChild) {
       // No children, we're done.
       return { hasFirst: true, hasLast: true, nodes: [] };
     }
 
     let start;
     if (options.center) {
       start = options.center.rawNode;
@@ -1476,17 +1483,18 @@ var WalkerActor = protocol.ActorClassWit
    *       https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter.
    *
    * @returns an object with three items:
    *    hasFirst: true if the first child of the node is included in the list.
    *    hasLast: true if the last child of the node is included in the list.
    *    nodes: Child nodes returned by the request.
    */
   siblings: function (node, options = {}) {
-    if (isNodeDead(node)) {
+    if (isNodeDead(node) ||
+        node.rawNode instanceof node.rawNode.ownerDocument.defaultView.ShadowRoot) {
       return { hasFirst: true, hasLast: true, nodes: [] };
     }
 
     let parentNode = this.getDocumentWalker(node.rawNode, options.whatToShow)
                          .parentNode();
     if (!parentNode) {
       return {
         hasFirst: true,
@@ -1507,17 +1515,18 @@ var WalkerActor = protocol.ActorClassWit
    * might be inefficient, be careful.
    *
    * @param object options
    *    Named options:
    *    `whatToShow`: A bitmask of node types that should be included.  See
    *       https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter.
    */
   nextSibling: function (node, options = {}) {
-    if (isNodeDead(node)) {
+    if (isNodeDead(node) ||
+        node.rawNode instanceof node.rawNode.ownerDocument.defaultView.ShadowRoot) {
       return null;
     }
 
     let walker = this.getDocumentWalker(node.rawNode, options.whatToShow);
     let sibling = walker.nextSibling();
     return sibling ? this._ref(sibling) : null;
   },
 
@@ -1526,17 +1535,18 @@ var WalkerActor = protocol.ActorClassWit
    * might be inefficient, be careful.
    *
    * @param object options
    *    Named options:
    *    `whatToShow`: A bitmask of node types that should be included.  See
    *       https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter.
    */
   previousSibling: function (node, options = {}) {
-    if (isNodeDead(node)) {
+    if (isNodeDead(node) ||
+        node.rawNode instanceof node.rawNode.ownerDocument.defaultView.ShadowRoot) {
       return null;
     }
 
     let walker = this.getDocumentWalker(node.rawNode, options.whatToShow);
     let sibling = walker.previousSibling();
     return sibling ? this._ref(sibling) : null;
   },
 
