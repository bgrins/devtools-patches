# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  9b2ebbf56577ec44c8c2304564bd003e1ccf0231
Bug 1592369 - Set [orient], [pack], [dir], and [align] styles with CSS instead of XUL layout JS-properties

diff --git a/layout/xul/nsScrollbarFrame.cpp b/layout/xul/nsScrollbarFrame.cpp
--- a/layout/xul/nsScrollbarFrame.cpp
+++ b/layout/xul/nsScrollbarFrame.cpp
@@ -365,31 +365,23 @@ nsresult nsScrollbarFrame::CreateAnonymo
     if (vertical) {
       key |= AnonymousContentKey::Flag_Vertical;
     }
 
     NS_TrustedNewXULElement(
         getter_AddRefs(mSlider),
         nodeInfoManager->GetNodeInfo(nsGkAtoms::slider, nullptr,
                                      kNameSpaceID_XUL, nsINode::ELEMENT_NODE));
-    mSlider->SetAttr(kNameSpaceID_None, nsGkAtoms::orient, orient, false);
-    mSlider->SetAttr(kNameSpaceID_None, nsGkAtoms::flex, NS_LITERAL_STRING("1"),
-                     false);
 
     aElements.AppendElement(ContentInfo(mSlider, key));
 
     NS_TrustedNewXULElement(
         getter_AddRefs(mThumb),
         nodeInfoManager->GetNodeInfo(nsGkAtoms::thumb, nullptr,
                                      kNameSpaceID_XUL, nsINode::ELEMENT_NODE));
-    mThumb->SetAttr(kNameSpaceID_None, nsGkAtoms::orient, orient, false);
-    mThumb->SetAttr(kNameSpaceID_None, nsGkAtoms::align,
-                    NS_LITERAL_STRING("center"), false);
-    mThumb->SetAttr(kNameSpaceID_None, nsGkAtoms::pack,
-                    NS_LITERAL_STRING("center"), false);
     mSlider->AppendChildTo(mThumb, false);
   }
 
   {
     AnonymousContentKey key;
     mUpBottomButton =
         MakeScrollbarButton(sbbNodeInfo, vertical, /* aBottom */ true,
                             /* aDown */ false, key);
diff --git a/toolkit/content/minimal-xul.css b/toolkit/content/minimal-xul.css
--- a/toolkit/content/minimal-xul.css
+++ b/toolkit/content/minimal-xul.css
@@ -35,16 +35,21 @@
 /* hide the content, but don't destroy the frames */
 [collapsed="true"],
 [moz-collapsed="true"] {
   visibility: collapse;
 }
 
 /* Rules required for style caching of anonymous content scrollbar parts */
 
+scrollbar[orient="vertical"],
+scrollbar[orient="vertical"] > slider {
+  -moz-box-orient: vertical;
+}
+
 scrollcorner, resizer, scrollbar, scrollbarbutton, slider {
   /* All scrollbar parts must not inherit any properties from the scrollable
    * element (except for visibility and pointer-events), for the anonymous
    * content style caching system to work.
    */
   all: initial;
   visibility: inherit;
   pointer-events: inherit;
@@ -81,20 +86,27 @@ scrollcorner, resizer, scrollbar, scroll
    * cannot match :root, so no need to duplicate them.
    */
   -moz-user-focus: ignore;
   -moz-user-select: none;
   display: -moz-box;
   box-sizing: border-box;
 }
 
+slider {
+  -moz-box-flex: 1;
+}
+
 thumb {
   /* Prevent -moz-user-modify declaration from designmode.css having an
    * effect. */
   -moz-user-modify: initial;
+
+  -moz-box-align: center;
+  -moz-box-pack: center;;
 }
 
 /* There are other rules that set direction and cursor on scrollbar,
  * expecting them to inherit into its children.  Explicitly inherit those,
  * overriding the 'all: initial; direction: ltr;' declarations above.
  */
 scrollbarbutton, slider, thumb {
   direction: inherit;
diff --git a/toolkit/content/xul.css b/toolkit/content/xul.css
--- a/toolkit/content/xul.css
+++ b/toolkit/content/xul.css
@@ -573,34 +573,35 @@ tabmodalprompt {
 
 .menulist-highlightable-label:not([highlightable="true"]),
 .menulist-label[highlightable="true"],
 .menu-iconic-highlightable-text:not([highlightable="true"]),
 .menu-iconic-text[highlightable="true"] {
   display: none;
 }
 
+[orient="vertical"] { -moz-box-orient: vertical !important; }
+[orient="horizontal"] { -moz-box-orient: horizontal !important; }
+
+[dir="reverse"] { -moz-box-direction: reverse !important; }
+
+[align="start"] { -moz-box-align: start !important; }
+[align="center"] { -moz-box-align: center !important; }
+[align="end"] { -moz-box-align: end !important; }
+[align="baseline"] { -moz-box-align: baseline !important; }
+[align="stretch"] { -moz-box-align: stretch !important; }
+
+[pack="start"] { -moz-box-pack: start !important; }
+[pack="center"] { -moz-box-pack: center !important; }
+[pack="end"] { -moz-box-pack: end !important; }
+
 @supports -moz-bool-pref("layout.css.emulate-moz-box-with-flex") {
   /* Support common XUL attributes in the emulated flex mode so we can
      test the browser in this configuration without mass-changing existing
      markup and CSS. */
-  [orient="vertical"] { -moz-box-orient: vertical; }
-  [orient="horizontal"] { -moz-box-orient: horizontal; }
-
-  [dir="reverse"] { -moz-box-direction: reverse; }
-
-  [align="start"] { -moz-box-align: start; }
-  [align="center"] { -moz-box-align: center; }
-  [align="end"] { -moz-box-align: end; }
-  [align="baseline"] { -moz-box-align: baseline; }
-  [align="stretch"] { -moz-box-align: stretch; }
-
-  [pack="start"] { -moz-box-pack: start; }
-  [pack="center"] { -moz-box-pack: center; }
-  [pack="end"] { -moz-box-pack: end; }
 
   /* This isn't a real solution for [flex] and [ordinal], but it covers enough
      cases to render the browser chrome. If we get attr() in Bug 435426 this could
      work for all cases. */
   [flex="1"] { -moz-box-flex: 1; }
   [flex="2"] { -moz-box-flex: 2; }
   [flex="3"] { -moz-box-flex: 3; }
   [flex="4"] { -moz-box-flex: 4; }
