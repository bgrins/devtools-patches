# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  907c5820ce5ab23bac14daa227522b50ca89571e

diff --git a/remote/domains/content/Network.jsm b/remote/domains/content/Network.jsm
--- a/remote/domains/content/Network.jsm
+++ b/remote/domains/content/Network.jsm
@@ -393,23 +393,90 @@ class DOMBaker {
     });
 
     // Resolve to absolute path for image src.
     // Note this doesn't handle srcset
     if (node.src) {
       attributes.src = node.src;
     }
 
+    if (
+      node.tagName == "IFRAME" ||
+      node.tagName == "VIDEO" ||
+      node.tagName == "SCRIPT" ||
+      node.tagName == "LINK" ||
+      node.tagName == "STYLE"
+    ) {
+      return {
+        children: [],
+        tag: "div",
+        originalTag: node.tagName.toLowerCase(),
+        attributes: {},
+      };
+    }
+
     return {
       tag: node.tagName.toLowerCase(),
+      nodeType: node.nodeType,
       size: this.getSize(node),
       attributes,
     };
   }
 
+  getVirtualNode(node) {
+    let { $nodesToVirtualNodes } = this;
+    let virtualNode = $nodesToVirtualNodes.get(node);
+    if (virtualNode) {
+      // Update. We want to update attributes etc
+      Object.assign(virtualNode, this.getVirtualNodeBase(node));
+      return virtualNode;
+    }
+
+    if (node == this.doc.documentElement) {
+      virtualNode = this.getVirtualNodeBase(node);
+      Object.assign(virtualNode, {
+        id: this.registerNode(node),
+        children: [],
+      });
+      $nodesToVirtualNodes.set(node, virtualNode);
+      return virtualNode;
+    }
+
+    const parentTree = $nodesToVirtualNodes.get(node.parentNode);
+
+    // XXX Handle ::after/::before with CSS.
+    if (node.isNativeAnonymous) {
+      return null;
+    }
+
+    if (node.nodeType !== 1 && node.nodeType !== 3) {
+      return null;
+    }
+
+    if (
+      node.tagName == "HEAD" ||
+      node.tagName == "STYLE" ||
+      node.tagName == "SCRIPT" ||
+      node.tagName == "LINK"
+    ) {
+      // XXX: Should any of this come across?
+      return null;
+    }
+
+    if (!parentTree) {
+      return null;
+    }
+
+    if (node.nodeType == 1) {
+    }
+
+    if (node.nodeType == 3) {
+    }
+  }
+
   createVirtualNode(node) {
     let { $nodesToVirtualNodes } = this;
     let isDocElement = node == this.doc.documentElement;
 
     const parentTree = $nodesToVirtualNodes.get(node.parentNode);
     if (!parentTree && !isDocElement) {
       return;
     }
