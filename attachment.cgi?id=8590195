# HG changeset patch
# User Michael Ratcliffe <mratcliffe@mozilla.com>
# Date 1428576697 -3600
# Parent  698da9956e202e8d0829bab5eacda91c96b76bda
Bug 1136257 - Shift-click to switch between color unit format in place r=bgrins

diff --git a/browser/devtools/shared/test/browser_css_color.js b/browser/devtools/shared/test/browser_css_color.js
--- a/browser/devtools/shared/test/browser_css_color.js
+++ b/browser/devtools/shared/test/browser_css_color.js
@@ -1,20 +1,18 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
-const COLOR_UNIT_PREF = "devtools.defaultColorUnit";
 const TEST_URI = "data:text/html;charset=utf-8,browser_css_color.js";
 let {colorUtils} = devtools.require("devtools/css-color");
 let origColorUnit;
 
 add_task(function*() {
   yield promiseTab("about:blank");
   let [host, win, doc] = yield createHost("bottom", TEST_URI);
-  origColorUnit = Services.prefs.getCharPref(COLOR_UNIT_PREF);
 
   info("Creating a test canvas element to test colors");
   let canvas = createTestCanvas(doc);
   info("Starting the test");
   testColorUtils(canvas);
 
   host.destroy();
   gBrowser.removeCurrentTab();
@@ -44,33 +42,29 @@ function testColorUtils(canvas) {
     testColorMatch(name, hex, hsl, rgb, color.rgba, canvas);
   }
 
   testProcessCSSString();
   testSetAlpha();
 }
 
 function testToString(color, name, hex, hsl, rgb) {
-  switchColorUnit(colorUtils.CssColor.COLORUNIT.name);
+  color.colorUnit = colorUtils.CssColor.COLORUNIT.name;
   is(color.toString(), name, "toString() with authored type");
 
-  switchColorUnit(colorUtils.CssColor.COLORUNIT.hex);
+  color.colorUnit = colorUtils.CssColor.COLORUNIT.hex;
   is(color.toString(), hex, "toString() with hex type");
 
-  switchColorUnit(colorUtils.CssColor.COLORUNIT.hsl);
+  color.colorUnit = colorUtils.CssColor.COLORUNIT.hsl;
   is(color.toString(), hsl, "toString() with hsl type");
 
-  switchColorUnit(colorUtils.CssColor.COLORUNIT.rgb);
+  color.colorUnit = colorUtils.CssColor.COLORUNIT.rgb;
   is(color.toString(), rgb, "toString() with rgb type");
 }
 
-function switchColorUnit(unit) {
-  Services.prefs.setCharPref(COLOR_UNIT_PREF, unit);
-}
-
 function testColorMatch(name, hex, hsl, rgb, rgba, canvas) {
   let target;
   let ctx = canvas.getContext("2d");
 
   let clearCanvas = function() {
     canvas.width = 1;
   };
   let setColor = function(aColor) {
@@ -105,17 +99,16 @@ function testColorMatch(name, hex, hsl, 
   };
 
   setTargetColor();
 
   test(name, "name");
   test(hex, "hex");
   test(hsl, "hsl");
   test(rgb, "rgb");
-  switchColorUnit(origColorUnit);
 }
 
 function testProcessCSSString() {
   let before = "border: 1px solid red; border-radius: 5px; " +
                "color rgb(0, 255, 0); font-weight: bold; " +
                "background-color: transparent; " +
                "border-top-color: rgba(0, 0, 255, 0.5);";
   let expected = "border: 1px solid #F00; border-radius: 5px; " +
diff --git a/browser/devtools/shared/widgets/Tooltip.js b/browser/devtools/shared/widgets/Tooltip.js
--- a/browser/devtools/shared/widgets/Tooltip.js
+++ b/browser/devtools/shared/widgets/Tooltip.js
@@ -962,16 +962,21 @@ SwatchBasedEditorTooltip.prototype = {
       }
       swatchEl.removeEventListener("click", this._onSwatchClick, false);
       this.swatches.delete(swatchEl);
     }
   },
 
   _onSwatchClick: function(event) {
     let swatch = this.swatches.get(event.target);
+
+    if (event.shiftKey) {
+      event.stopPropagation();
+      return;
+    }
     if (swatch) {
       this.activeSwatch = event.target;
       this.show();
       event.stopPropagation();
     }
   },
 
   /**
diff --git a/browser/devtools/styleinspector/computed-view.js b/browser/devtools/styleinspector/computed-view.js
--- a/browser/devtools/styleinspector/computed-view.js
+++ b/browser/devtools/styleinspector/computed-view.js
@@ -930,17 +930,16 @@ function createMenuItem(aMenu, aAttribut
 function PropertyView(aTree, aName)
 {
   this.tree = aTree;
   this.name = aName;
   this.getRTLAttr = aTree.getRTLAttr;
 
   this.link = "https://developer.mozilla.org/CSS/" + aName;
 
-  this.templateMatchedSelectors = aTree.styleDocument.getElementById("templateMatchedSelectors");
   this._propertyInfo = new PropertyInfo(aTree, aName);
 }
 
 PropertyView.prototype = {
   // The parent element which contains the open attribute
   element: null,
 
   // Property header node
@@ -1140,16 +1139,17 @@ PropertyView.prototype = {
 
     this.tree.numVisibleProperties++;
 
     let outputParser = this.tree._outputParser;
     let frag = outputParser.parseCssProperty(this.propertyInfo.name,
       this.propertyInfo.value,
       {
         colorSwatchClass: "computedview-colorswatch",
+        colorClass: "computedview-color",
         urlClass: "theme-link"
         // No need to use baseURI here as computed URIs are never relative.
       });
     this.valueNode.innerHTML = "";
     this.valueNode.appendChild(frag);
 
     this.refreshMatchedSelectors();
   },
@@ -1170,34 +1170,69 @@ PropertyView.prototype = {
 
     if (this.matchedExpanded && hasMatchedSelectors) {
       return this.tree.pageStyle.getMatchedSelectors(this.tree.viewedElement, this.name).then(matched => {
         if (!this.matchedExpanded) {
           return;
         }
 
         this._matchedSelectorResponse = matched;
-        CssHtmlTree.processTemplate(this.templateMatchedSelectors,
-          this.matchedSelectorsContainer, this);
+
+        this._buildMatchedSelectors();
         this.matchedExpander.setAttribute("open", "");
+
         this.tree.inspector.emit("computed-view-property-expanded");
       }).then(null, console.error);
     } else {
       this.matchedSelectorsContainer.innerHTML = "";
       this.matchedExpander.removeAttribute("open");
       this.tree.inspector.emit("computed-view-property-collapsed");
       return promise.resolve(undefined);
     }
   },
 
   get matchedSelectors()
   {
     return this._matchedSelectorResponse;
   },
 
+  _buildMatchedSelectors: function() {
+    let frag = this.element.ownerDocument.createDocumentFragment();
+
+    for (let selector of this.matchedSelectorViews) {
+      let p = createChild(frag, "p");
+      let span = createChild(p, "span", {
+        class: "rule-link"
+      });
+      let link = createChild(span, "a", {
+        target: "_blank",
+        class: "link theme-link",
+        title: selector.href,
+        sourcelocation: selector.source,
+        tabindex: "0",
+        textContent: selector.source
+      });
+      link.addEventListener("click", selector.openStyleEditor, false);
+      link.addEventListener("keydown", selector.maybeOpenStyleEditor, false);
+
+      let status = createChild(p, "span", {
+        dir: "ltr",
+        class: "rule-text theme-fg-color3 " + selector.statusClass,
+        title: selector.statusText,
+        textContent: selector.sourceText
+      });
+      let valueSpan = createChild(status, "span", {
+        class: "other-property-value theme-fg-color1"
+      });
+      valueSpan.appendChild(selector.outputFragment);
+    }
+
+    this.matchedSelectorsContainer.appendChild(frag);
+  },
+
   /**
    * Provide access to the matched SelectorViews that we are currently
    * displaying.
    */
   get matchedSelectorViews()
   {
     if (!this._matchedSelectorViews) {
       this._matchedSelectorViews = [];
@@ -1227,16 +1262,19 @@ PropertyView.prototype = {
   /**
    * The action when a user expands matched selectors.
    *
    * @param {Event} aEvent Used to determine the class name of the targets click
    * event.
    */
   onMatchedToggle: function PropertyView_onMatchedToggle(aEvent)
   {
+    if (aEvent.shiftKey) {
+      return;
+    }
     this.matchedExpanded = !this.matchedExpanded;
     this.refreshMatchedSelectors();
     aEvent.preventDefault();
   },
 
   /**
    * The action when a user clicks on the MDN help link for a property.
    */
@@ -1276,16 +1314,19 @@ PropertyView.prototype = {
  * @param aSelectorInfo
  */
 function SelectorView(aTree, aSelectorInfo)
 {
   this.tree = aTree;
   this.selectorInfo = aSelectorInfo;
   this._cacheStatusNames();
 
+  this.openStyleEditor = this.openStyleEditor.bind(this);
+  this.maybeOpenStyleEditor = this.maybeOpenStyleEditor.bind(this);
+
   this.updateSourceLink();
 }
 
 /**
  * Decode for cssInfo.rule.status
  * @see SelectorView.prototype._cacheStatusNames
  * @see CssLogic.STATUS
  */
@@ -1366,16 +1407,17 @@ SelectorView.prototype = {
     // we lose any events that are attached. This means that URLs will open in a
     // new window. At some point we should fix this by stopping using the
     // templater.
     let outputParser = this.tree._outputParser;
     let frag = outputParser.parseCssProperty(
       this.selectorInfo.name,
       this.selectorInfo.value, {
       colorSwatchClass: "computedview-colorswatch",
+      colorClass: "computedview-color",
       urlClass: "theme-link",
       baseURI: this.selectorInfo.rule.href
     });
     return frag;
   },
 
   /**
    * Update the text of the source link to reflect whether we're showing
@@ -1488,10 +1530,37 @@ SelectorView.prototype = {
           let sheet = source || href;
           toolbox.getCurrentPanel().selectStyleSheet(sheet, line, column);
         });
       }
     });
   }
 };
 
+/**
+ * Create a child element with a set of attributes.
+ *
+ * @param {Element} aParent
+ *        The parent node.
+ * @param {string} aTag
+ *        The tag name.
+ * @param {object} aAttributes
+ *        A set of attributes to set on the node.
+ */
+function createChild(aParent, aTag, aAttributes={}) {
+  let elt = aParent.ownerDocument.createElementNS(HTML_NS, aTag);
+  for (let attr in aAttributes) {
+    if (aAttributes.hasOwnProperty(attr)) {
+      if (attr === "textContent") {
+        elt.textContent = aAttributes[attr];
+      } else if(attr === "child") {
+        elt.appendChild(aAttributes[attr]);
+      } else {
+        elt.setAttribute(attr, aAttributes[attr]);
+      }
+    }
+  }
+  aParent.appendChild(elt);
+  return elt;
+}
+
 exports.CssHtmlTree = CssHtmlTree;
 exports.PropertyView = PropertyView;
diff --git a/browser/devtools/styleinspector/computedview.xhtml b/browser/devtools/styleinspector/computedview.xhtml
--- a/browser/devtools/styleinspector/computedview.xhtml
+++ b/browser/devtools/styleinspector/computedview.xhtml
@@ -75,41 +75,12 @@
                         save="${includeBrowserStylesCheckbox}"
                         oncommand="${includeBrowserStylesChanged}" checked="false"
                         label="&browserStylesLabel;"/>
           <xul:textbox class="devtools-searchinput" type="search" save="${searchField}"
                       placeholder="&userStylesSearch;" flex="1"
                       oncommand="${filterChanged}"/>
         </xul:hbox>
       </div>
-
-
-      <!--
-      A templateMatchedSelectors sits inside each templateProperties showing the
-      list of selectors that affect that property. Each needs data like this:
-      {
-        matchedSelectorViews: ..., // from cssHtmlTree.propertyViews[name].matchedSelectorViews
-      }
-      This is a template so the parent does not need to be a table, except that
-      using a div as the parent causes the DOM to muck with the tr elements
-      -->
-      <div id="templateMatchedSelectors">
-        <loop foreach="selector in ${matchedSelectorViews}">
-          <p>
-            <span class="rule-link">
-              <a target="_blank" class="link theme-link"
-                  onclick="${selector.openStyleEditor}"
-                  onkeydown="${selector.maybeOpenStyleEditor}"
-                  title="${selector.href}"
-                  sourcelocation="${selector.source}"
-                  tabindex="0">${selector.source}</a>
-            </span>
-            <span dir="ltr" class="rule-text ${selector.statusClass} theme-fg-color3" title="${selector.statusText}">
-              ${selector.sourceText}
-              <span class="other-property-value theme-fg-color1">${selector.outputFragment}</span>
-            </span>
-          </p>
-        </loop>
-      </div>
     </div>
 
   </body>
 </html>
diff --git a/browser/devtools/styleinspector/test/browser.ini b/browser/devtools/styleinspector/test/browser.ini
--- a/browser/devtools/styleinspector/test/browser.ini
+++ b/browser/devtools/styleinspector/test/browser.ini
@@ -21,16 +21,17 @@ support-files =
   doc_sourcemaps.scss
   doc_style_editor_link.css
   doc_test_image.png
   doc_urls_clickable.css
   doc_urls_clickable.html
   head.js
 
 [browser_computedview_browser-styles.js]
+[browser_computedview_cycle_color.js]
 [browser_computedview_getNodeInfo.js]
 [browser_computedview_keybindings_01.js]
 [browser_computedview_keybindings_02.js]
 [browser_computedview_matched-selectors-toggle.js]
 [browser_computedview_matched-selectors_01.js]
 [browser_computedview_matched-selectors_02.js]
 [browser_computedview_media-queries.js]
 [browser_computedview_no-results-placeholder.js]
@@ -88,16 +89,17 @@ skip-if = (os == "win" && debug) || e10s
 [browser_ruleview_media-queries.js]
 [browser_ruleview_multiple-properties-duplicates.js]
 [browser_ruleview_multiple-properties-priority.js]
 [browser_ruleview_multiple-properties-unfinished_01.js]
 [browser_ruleview_multiple-properties-unfinished_02.js]
 [browser_ruleview_multiple_properties_01.js]
 [browser_ruleview_multiple_properties_02.js]
 [browser_ruleview_original-source-link.js]
+[browser_ruleview_cycle-color.js]
 [browser_ruleview_override.js]
 [browser_ruleview_pseudo-element_01.js]
 [browser_ruleview_pseudo-element_02.js]
 skip-if = e10s # Bug 1090340
 [browser_ruleview_refresh-on-attribute-change_01.js]
 [browser_ruleview_refresh-on-attribute-change_02.js]
 [browser_ruleview_refresh-on-style-change.js]
 [browser_ruleview_select-and-copy-styles.js]
diff --git a/browser/devtools/styleinspector/test/browser_computedview_cycle_color.js b/browser/devtools/styleinspector/test/browser_computedview_cycle_color.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/styleinspector/test/browser_computedview_cycle_color.js
@@ -0,0 +1,68 @@
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+ http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Computed view color cycling test.
+
+const PAGE_CONTENT = [
+  "<style type=\"text/css\">",
+  ".matches {color: #F00;}</style>",
+  "<span id=\"matches\" class=\"matches\">Some styled text</span>",
+  "</div>"
+].join("\n");
+
+add_task(function*() {
+  yield addTab("data:text/html;charset=utf-8," +
+               "Computed view color cycling test.");
+  content.document.body.innerHTML = PAGE_CONTENT;
+
+  info("Opening the computed view");
+  let {toolbox, inspector, view} = yield openComputedView();
+
+  info("Selecting the test node");
+  yield selectNode("#matches", inspector);
+
+  info("Checking the property itself");
+  let container = getComputedViewPropertyView(view, "color").valueNode;
+  checkColorCycling(container, inspector);
+
+  info("Checking matched selectors");
+  container = yield getComputedViewMatchedRules(view, "color");
+  checkColorCycling(container, inspector);
+});
+
+function checkColorCycling(container, inspector) {
+  let swatch = container.querySelector(".computedview-colorswatch");
+  let valueNode = container.querySelector(".computedview-color");
+  let win = inspector.sidebar.getWindowForTab("computedview");
+
+  // Hex (default)
+  is(valueNode.textContent, "#F00", "Color displayed as a hex value.");
+
+  // HSL
+  EventUtils.synthesizeMouseAtCenter(swatch, {type: "mousedown", shiftKey: true}, win);
+  is(valueNode.textContent, "hsl(0, 100%, 50%)",
+                            "Color displayed as an HSL value.");
+
+  // RGB
+  EventUtils.synthesizeMouseAtCenter(swatch, {type: "mousedown", shiftKey: true}, win);
+  is(valueNode.textContent, "rgb(255, 0, 0)",
+                            "Color displayed as an RGB value.");
+
+  // Color name
+  EventUtils.synthesizeMouseAtCenter(swatch, {type: "mousedown", shiftKey: true}, win);
+  is(valueNode.textContent, "red",
+                            "Color displayed as a color name.");
+
+  // "Authored" (currently the computed value)
+  EventUtils.synthesizeMouseAtCenter(swatch, {type: "mousedown", shiftKey: true}, win);
+  is(valueNode.textContent, "rgb(255, 0, 0)",
+                            "Color displayed as an RGB value.");
+
+  // Back to hex
+  EventUtils.synthesizeMouseAtCenter(swatch, {type: "mousedown", shiftKey: true}, win);
+  is(valueNode.textContent, "#F00",
+                            "Color displayed as hex again.");
+}
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_cycle-color.js b/browser/devtools/styleinspector/test/browser_ruleview_cycle-color.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/styleinspector/test/browser_ruleview_cycle-color.js
@@ -0,0 +1,60 @@
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+ http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Test cycling color types in the rule view.
+
+const PAGE_CONTENT = [
+  "<style type=\"text/css\">",
+  "  body {",
+  "    color: #F00;",
+  "  }",
+  "</style>",
+  "Test cycling color types in the rule view!"
+].join("\n");
+
+add_task(function*() {
+  yield addTab("data:text/html;charset=utf-8,Test cycling color types in the " +
+               "rule view.");
+  content.document.body.innerHTML = PAGE_CONTENT;
+  let {toolbox, inspector, view} = yield openRuleView();
+
+  let container = getRuleViewProperty(view, "body", "color").valueSpan;
+  checkColorCycling(container, inspector);
+});
+
+function checkColorCycling(container, inspector) {
+  let swatch = container.querySelector(".ruleview-colorswatch");
+  let valueNode = container.querySelector(".ruleview-color");
+  let win = inspector.sidebar.getWindowForTab("ruleview");
+
+  // Hex (default)
+  is(valueNode.textContent, "#F00", "Color displayed as a hex value.");
+
+  // HSL
+  EventUtils.synthesizeMouseAtCenter(swatch, {type: "mousedown", shiftKey: true}, win);
+  is(valueNode.textContent, "hsl(0, 100%, 50%)",
+                            "Color displayed as an HSL value.");
+
+  // RGB
+  EventUtils.synthesizeMouseAtCenter(swatch, {type: "mousedown", shiftKey: true}, win);
+  is(valueNode.textContent, "rgb(255, 0, 0)",
+                            "Color displayed as an RGB value.");
+
+  // Color name
+  EventUtils.synthesizeMouseAtCenter(swatch, {type: "mousedown", shiftKey: true}, win);
+  is(valueNode.textContent, "red",
+                            "Color displayed as a color name.");
+
+  // "Authored" (currently the computed value)
+  EventUtils.synthesizeMouseAtCenter(swatch, {type: "mousedown", shiftKey: true}, win);
+  is(valueNode.textContent, "rgb(255, 0, 0)",
+                            "Color displayed as an RGB value.");
+
+  // Back to hex
+  EventUtils.synthesizeMouseAtCenter(swatch, {type: "mousedown", shiftKey: true}, win);
+  is(valueNode.textContent, "#F00",
+                            "Color displayed as hex again.");
+}
diff --git a/toolkit/devtools/css-color.js b/toolkit/devtools/css-color.js
--- a/toolkit/devtools/css-color.js
+++ b/toolkit/devtools/css-color.js
@@ -90,18 +90,32 @@ CssColor.COLORUNIT = {
   "authored": "authored",
   "hex": "hex",
   "name": "name",
   "rgb": "rgb",
   "hsl": "hsl"
 };
 
 CssColor.prototype = {
+  _colorUnit: null,
+
   authored: null,
 
+  get colorUnit() {
+    if (this._colorUnit === null) {
+      let defaultUnit = Services.prefs.getCharPref(COLOR_UNIT_PREF);
+      this._colorUnit = CssColor.COLORUNIT[defaultUnit];
+    }
+    return this._colorUnit;
+  },
+
+  set colorUnit(unit) {
+    this._colorUnit = unit;
+  },
+
   get hasAlpha() {
     if (!this.valid) {
       return false;
     }
     return this._getRGBATuple().a !== 1;
   },
 
   get valid() {
@@ -264,25 +278,41 @@ CssColor.prototype = {
    * @param  {String} color
    *         Any valid color string
    */
   newColor: function(color) {
     this.authored = color.toLowerCase();
     return this;
   },
 
+  nextColorUnit: function() {
+    // Reorder the formats array to have the current format at the
+    // front so we can cycle through.
+    let formats = ["authored", "hex", "hsl", "rgb", "name"];
+    let putOnEnd = formats.splice(0, formats.indexOf(this.colorUnit));
+    formats = formats.concat(putOnEnd);
+    let currentDisplayedColor = this[formats[0]];
+
+    for (let format of formats) {
+      if (this[format].toLowerCase() !== currentDisplayedColor.toLowerCase()) {
+        this.colorUnit = CssColor.COLORUNIT[format];
+        break;
+      }
+    }
+
+    return this.toString();
+  },
+
   /**
    * Return a string representing a color of type defined in COLOR_UNIT_PREF.
    */
   toString: function() {
     let color;
-    let defaultUnit = Services.prefs.getCharPref(COLOR_UNIT_PREF);
-    let unit = CssColor.COLORUNIT[defaultUnit];
 
-    switch(unit) {
+    switch(this.colorUnit) {
       case CssColor.COLORUNIT.authored:
         color = this.authored;
         break;
       case CssColor.COLORUNIT.hex:
         color = this.hex;
         break;
       case CssColor.COLORUNIT.hsl:
         color = this.hsl;
diff --git a/toolkit/devtools/output-parser.js b/toolkit/devtools/output-parser.js
--- a/toolkit/devtools/output-parser.js
+++ b/toolkit/devtools/output-parser.js
@@ -72,16 +72,18 @@ loader.lazyGetter(this, "REGEX_ALL_CSS_P
  *   let parser = new OutputParser();
  *
  *   parser.parseCssProperty("color", "red"); // Returns document fragment.
  *   parser.parseHTMLAttribute("color:red; font-size: 12px;"); // Returns document
  *                                                             // fragment.
  */
 function OutputParser() {
   this.parsed = [];
+  this.colorSwatches = new WeakMap();
+  this._onSwatchMouseDown = this._onSwatchMouseDown.bind(this);
 }
 
 exports.OutputParser = OutputParser;
 
 OutputParser.prototype = {
   /**
    * Parse a CSS property value given a property name.
    *
@@ -384,35 +386,52 @@ OutputParser.prototype = {
          "data-color": color
       });
 
       if (options.colorSwatchClass) {
         let swatch = this._createNode("span", {
           class: options.colorSwatchClass,
           style: "background-color:" + color
         });
+        this.colorSwatches.set(swatch, colorObj);
+        swatch.addEventListener("mousedown", this._onSwatchMouseDown, false);
         container.appendChild(swatch);
       }
 
       if (options.defaultColorType) {
         color = colorObj.toString();
-        container.dataset["color"] = color;
+        container.dataset.color = color;
       }
 
       let value = this._createNode("span", {
         class: options.colorClass
       }, color);
 
       container.appendChild(value);
       this.parsed.push(container);
       return true;
     }
     return false;
   },
 
+  _onSwatchMouseDown: function(event) {
+    // Prevent text selection in the case of shift-click or double-click.
+    event.preventDefault();
+
+    if (!event.shiftKey) {
+      return;
+    }
+
+    let swatch = event.target;
+    let color = this.colorSwatches.get(swatch);
+    let val = color.nextColorUnit();
+
+    swatch.nextElementSibling.textContent = val;
+  },
+
    /**
     * Append a URL to the output.
     *
     * @param  {String} match
     *         Complete match that may include "url(xxx)"
     * @param  {String} url
     *         Actual URL
     * @param  {Object} [options]
