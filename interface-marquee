# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  4f3ed2b21f75b9bad640f60c304dbc350e1097f8

diff --git a/dom/html/HTMLMarqueeElement.cpp b/dom/html/HTMLMarqueeElement.cpp
--- a/dom/html/HTMLMarqueeElement.cpp
+++ b/dom/html/HTMLMarqueeElement.cpp
@@ -45,16 +45,23 @@ static const nsAttrValue::EnumTable* kDe
 
 JSObject*
 HTMLMarqueeElement::WrapNode(JSContext *aCx, JS::Handle<JSObject*> aGivenProto)
 {
   return dom::HTMLMarqueeElement_Binding::Wrap(aCx, this, aGivenProto);
 }
 
 void
+HTMLMarqueeElement::SetStartStopCallback(AnyCallback* aHandler,
+                                         ErrorResult& aRv)
+{
+  mStartStopHandler = aHandler;
+}
+
+void
 HTMLMarqueeElement::GetBehavior(nsAString& aValue)
 {
   GetEnumAttr(nsGkAtoms::behavior, kDefaultBehavior->tag, aValue);
 }
 
 void
 HTMLMarqueeElement::GetDirection(nsAString& aValue)
 {
@@ -125,16 +132,28 @@ nsMapRuleToAttributesFunc
 HTMLMarqueeElement::GetAttributeMappingFunction() const
 {
   return &MapAttributesIntoRule;
 }
 
 void
 HTMLMarqueeElement::Start()
 {
+  if (mStartStopHandler) {
+
+    JS::Rooted<JS::Value> value(mStartStopHandler->CallbackGlobalOrNull(), JS::BooleanValue(true));
+    JS::Rooted<JS::Value> ignored(mStartStopHandler->CallbackGlobalOrNull());
+    mStartStopHandler->Call(value, &ignored);
+
+    // JS::Rooted<JS::Value> value(GetContext(), JS::BooleanValue(true));
+    // JS::Rooted<JS::Value> ignored(GetContext());
+    // mStartStopHandler->Call(value, &ignored);
+
+    printf("Got a start handler\n");
+  }
   RefPtr<CustomEvent> event = NS_NewDOMCustomEvent(this, nullptr, nullptr);
   MOZ_ASSERT(event);
   event->InitCustomEvent(nullptr, NS_LITERAL_STRING("marquee-start"), false, false, JS::NullHandleValue);
   event->SetTrusted(true);
 
   ErrorResult err;
   this->DispatchEvent(*event, err);
 }
diff --git a/dom/html/HTMLMarqueeElement.h b/dom/html/HTMLMarqueeElement.h
--- a/dom/html/HTMLMarqueeElement.h
+++ b/dom/html/HTMLMarqueeElement.h
@@ -8,28 +8,33 @@
 
 #include "mozilla/Attributes.h"
 #include "nsGenericHTMLElement.h"
 #include "nsContentUtils.h"
 
 namespace mozilla {
 namespace dom {
 
+class AnyCallback;
+
 class HTMLMarqueeElement final : public nsGenericHTMLElement
 {
 public:
   explicit HTMLMarqueeElement(already_AddRefed<dom::NodeInfo>&& aNodeInfo)
     : nsGenericHTMLElement(std::move(aNodeInfo))
   {
   }
 
   static const int kDefaultLoop = -1;
   static const int kDefaultScrollAmount = 6;
   static const int kDefaultScrollDelayMS = 85;
 
+  void SetStartStopCallback(AnyCallback* aHandler,
+                            ErrorResult& aRv);
+
   void GetBehavior(nsAString& aValue);
   void SetBehavior(const nsAString& aValue, ErrorResult& aError)
   {
     SetHTMLAttr(nsGkAtoms::behavior, aValue, aError);
   }
 
   void GetDirection(nsAString& aValue);
   void SetDirection(const nsAString& aValue, ErrorResult& aError)
@@ -71,16 +76,17 @@ public:
     return loop;
   }
   void SetLoop(int32_t aValue, ErrorResult& aError)
   {
     if (aValue == -1 || aValue > 0) {
       SetHTMLIntAttr(nsGkAtoms::loop, aValue, aError);
     }
   }
+
   uint32_t ScrollAmount()
   {
     return GetUnsignedIntAttr(nsGkAtoms::scrollamount, kDefaultScrollAmount);
   }
   void SetScrollAmount(uint32_t aValue, ErrorResult& aError)
   {
     SetUnsignedIntAttr(nsGkAtoms::scrollamount, aValue, kDefaultScrollAmount, aError);
   }
@@ -131,16 +137,17 @@ public:
   nsresult Clone(dom::NodeInfo*, nsINode** aResult) const override;
 
 protected:
   virtual ~HTMLMarqueeElement();
 
   JSObject* WrapNode(JSContext *aCx, JS::Handle<JSObject*> aGivenProto) override;
 
 private:
+  RefPtr<AnyCallback> mStartStopHandler;
   static void MapAttributesIntoRule(const nsMappedAttributes* aAttributes,
                                     MappedDeclarations&);
 };
 
 } // namespace dom
 } // namespace mozilla
 
 #endif /* HTMLMarqueeElement_h___ */
diff --git a/dom/webidl/HTMLMarqueeElement.webidl b/dom/webidl/HTMLMarqueeElement.webidl
--- a/dom/webidl/HTMLMarqueeElement.webidl
+++ b/dom/webidl/HTMLMarqueeElement.webidl
@@ -27,9 +27,12 @@ interface HTMLMarqueeElement : HTMLEleme
   [CEReactions, SetterThrows] attribute DOMString width;
 
   //attribute EventHandler onbounce;
   //attribute EventHandler onfinish;
   //attribute EventHandler onstart;
 
   void start();
   void stop();
-};
\ No newline at end of file
+
+  [Throws, Func="IsChromeOrXBL"]
+  void setStartStopCallback(AnyCallback? handler);
+};
diff --git a/layout/style/xbl-marquee/xbl-marquee.xml b/layout/style/xbl-marquee/xbl-marquee.xml
--- a/layout/style/xbl-marquee/xbl-marquee.xml
+++ b/layout/style/xbl-marquee/xbl-marquee.xml
@@ -374,16 +374,19 @@
             }
           }
         ]]>
         </body>
       </method>
 
       <constructor>
         <![CDATA[
+          this.setStartStopCallback(val => {
+            console.log("setStartStopCallback", val);
+          });
           // Set up state.
           this._currentDirection = this.direction || "left";
           this._currentLoop = this.loop;
           this.dirsign = 1;
           this.startAt = 0;
           this.stopAt = 0;
           this.newPosition = 0;
           this.runId = 0;
