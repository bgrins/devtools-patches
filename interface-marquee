# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  4f3ed2b21f75b9bad640f60c304dbc350e1097f8

diff --git a/dom/html/HTMLMarqueeElement.cpp b/dom/html/HTMLMarqueeElement.cpp
--- a/dom/html/HTMLMarqueeElement.cpp
+++ b/dom/html/HTMLMarqueeElement.cpp
@@ -45,16 +45,25 @@ static const nsAttrValue::EnumTable* kDe
 
 JSObject*
 HTMLMarqueeElement::WrapNode(JSContext *aCx, JS::Handle<JSObject*> aGivenProto)
 {
   return dom::HTMLMarqueeElement_Binding::Wrap(aCx, this, aGivenProto);
 }
 
 void
+HTMLMarqueeElement::SetStartCallback(FunctionStringCallback* aCallback,
+                                     ErrorResult& aRv)
+{
+  if (!aCallback) {
+    return;
+  }
+}
+
+void
 HTMLMarqueeElement::GetBehavior(nsAString& aValue)
 {
   GetEnumAttr(nsGkAtoms::behavior, kDefaultBehavior->tag, aValue);
 }
 
 void
 HTMLMarqueeElement::GetDirection(nsAString& aValue)
 {
diff --git a/dom/html/HTMLMarqueeElement.h b/dom/html/HTMLMarqueeElement.h
--- a/dom/html/HTMLMarqueeElement.h
+++ b/dom/html/HTMLMarqueeElement.h
@@ -8,28 +8,33 @@
 
 #include "mozilla/Attributes.h"
 #include "nsGenericHTMLElement.h"
 #include "nsContentUtils.h"
 
 namespace mozilla {
 namespace dom {
 
+class FunctionStringCallback;
+
 class HTMLMarqueeElement final : public nsGenericHTMLElement
 {
 public:
   explicit HTMLMarqueeElement(already_AddRefed<dom::NodeInfo>&& aNodeInfo)
     : nsGenericHTMLElement(std::move(aNodeInfo))
   {
   }
 
   static const int kDefaultLoop = -1;
   static const int kDefaultScrollAmount = 6;
   static const int kDefaultScrollDelayMS = 85;
 
+  void SetStartCallback(FunctionStringCallback* aCallback,
+                        ErrorResult& aRv);
+
   void GetBehavior(nsAString& aValue);
   void SetBehavior(const nsAString& aValue, ErrorResult& aError)
   {
     SetHTMLAttr(nsGkAtoms::behavior, aValue, aError);
   }
 
   void GetDirection(nsAString& aValue);
   void SetDirection(const nsAString& aValue, ErrorResult& aError)
@@ -71,16 +76,17 @@ public:
     return loop;
   }
   void SetLoop(int32_t aValue, ErrorResult& aError)
   {
     if (aValue == -1 || aValue > 0) {
       SetHTMLIntAttr(nsGkAtoms::loop, aValue, aError);
     }
   }
+
   uint32_t ScrollAmount()
   {
     return GetUnsignedIntAttr(nsGkAtoms::scrollamount, kDefaultScrollAmount);
   }
   void SetScrollAmount(uint32_t aValue, ErrorResult& aError)
   {
     SetUnsignedIntAttr(nsGkAtoms::scrollamount, aValue, kDefaultScrollAmount, aError);
   }
@@ -131,16 +137,17 @@ public:
   nsresult Clone(dom::NodeInfo*, nsINode** aResult) const override;
 
 protected:
   virtual ~HTMLMarqueeElement();
 
   JSObject* WrapNode(JSContext *aCx, JS::Handle<JSObject*> aGivenProto) override;
 
 private:
+  RefPtr<FunctionStringCallback> mCallback;
   static void MapAttributesIntoRule(const nsMappedAttributes* aAttributes,
                                     MappedDeclarations&);
 };
 
 } // namespace dom
 } // namespace mozilla
 
 #endif /* HTMLMarqueeElement_h___ */
diff --git a/dom/webidl/HTMLMarqueeElement.webidl b/dom/webidl/HTMLMarqueeElement.webidl
--- a/dom/webidl/HTMLMarqueeElement.webidl
+++ b/dom/webidl/HTMLMarqueeElement.webidl
@@ -27,9 +27,14 @@ interface HTMLMarqueeElement : HTMLEleme
   [CEReactions, SetterThrows] attribute DOMString width;
 
   //attribute EventHandler onbounce;
   //attribute EventHandler onfinish;
   //attribute EventHandler onstart;
 
   void start();
   void stop();
-};
\ No newline at end of file
+
+  //[Throws, Func="IsChromeOrXBL"]
+  //void setStartCallback(FunctionStringCallback? _callback);
+};
+
+//callback FunctionStringCallback = void ();
