# HG changeset patch
# Parent d31f7a547ab0c7393e3a50c06c4b7ec248f5a654
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 1011031 - Itchpad: Reload file that has already been opened when changed on disk;r=harth

diff --git a/browser/devtools/projecteditor/chrome/content/projecteditor-loader.js b/browser/devtools/projecteditor/chrome/content/projecteditor-loader.js
--- a/browser/devtools/projecteditor/chrome/content/projecteditor-loader.js
+++ b/browser/devtools/projecteditor/chrome/content/projecteditor-loader.js
@@ -3,17 +3,17 @@ const {devtools} = Cu.import("resource:/
 const {FileUtils} = Cu.import("resource://gre/modules/FileUtils.jsm", {});
 const {NetUtil} = Cu.import("resource://gre/modules/NetUtil.jsm", {});
 const require = devtools.require;
 const promise = require("projecteditor/helpers/promise");
 const ProjectEditor = require("projecteditor/projecteditor");
 
 const SAMPLE_PATH = buildTempDirectoryStructure();
 const SAMPLE_NAME = "DevTools Content Application Name";
-const SAMPLE_PROJECT_URL = "http://mozilla.org";
+const SAMPLE_PROJECT_URL = "data:text/html;charset=utf-8,<h1>Project Overview</h1>";
 const SAMPLE_ICON = "chrome://browser/skin/devtools/tool-debugger.svg";
 
 /**
  * Create a workspace for working on projecteditor, available at
  * chrome://browser/content/devtools/projecteditor-loader.xul.
  * This emulates the integration points that the app manager uses.
  */
 document.addEventListener("DOMContentLoaded", function onDOMReady(e) {
diff --git a/browser/devtools/projecteditor/lib/shells.js b/browser/devtools/projecteditor/lib/shells.js
--- a/browser/devtools/projecteditor/lib/shells.js
+++ b/browser/devtools/projecteditor/lib/shells.js
@@ -35,32 +35,30 @@ var Shell = Class({
     this.elt.shell = this;
 
     let constructor = this._editorTypeForResource();
 
     this.editor = constructor(this.doc, this.host);
     this.editor.shell = this;
     this.editorAppended = this.editor.appended;
 
-    let loadDefer = promise.defer();
     this.editor.on("load", () => {
-      loadDefer.resolve();
+      this.editorDeferred.resolve();
     });
-
-    this.editorLoaded = loadDefer.promise;
-
     this.elt.appendChild(this.editor.elt);
   },
 
   /**
    * Start loading the resource.  The 'load' event happens as
    * a result of this function, so any listeners to 'editorAppended'
    * need to be added before calling this.
    */
   load: function() {
+    this.editorDeferred = promise.defer();
+    this.editorLoaded = this.editorDeferred.promise;
     this.editor.load(this.resource);
   },
 
   /**
    * Make sure the correct editor is selected for the resource.
    * @returns Type:Editor
    */
   _editorTypeForResource: function() {
@@ -160,16 +158,18 @@ var ShellDeck = Class({
   selectShell: function(shell) {
     // Don't fire another activate if this is already the active shell
     if (this._activeShell != shell) {
       if (this._activeShell) {
         emit(this, "editor-deactivated", this._activeShell.editor, this._activeShell.resource);
       }
       this.deck.selectedPanel = shell.elt;
       this._activeShell = shell;
+
+      shell.load();
       shell.editorLoaded.then(() => {
         // Handle case where another shell has been requested before this
         // one is finished loading.
         if (this._activeShell === shell) {
           emit(this, "editor-activated", shell.editor, shell.resource);
         }
       });
     }
