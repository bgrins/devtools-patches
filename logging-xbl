# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  1f7a8905fa7cf88143161cb9c65ca69cb1daec65

diff --git a/browser/base/content/browser-fullZoom.js b/browser/base/content/browser-fullZoom.js
--- a/browser/base/content/browser-fullZoom.js
+++ b/browser/base/content/browser-fullZoom.js
@@ -1,15 +1,21 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 // This file is loaded into the browser window scope.
 /* eslint-env mozilla/browser-window */
 
+let gUnloaded = false;
+window.addEventListener("unload", () => {
+  console.log("UNLOADING " + window.location.toString());
+  gUnloaded = true;
+});
+
 /**
  * Controls the "full zoom" setting and its site-specific preferences.
  */
 var FullZoom = {
   // Identifies the setting in the content prefs database.
   name: "browser.content.full-zoom",
 
   // browser.zoom.siteSpecific preference cache
@@ -341,16 +347,18 @@ var FullZoom = {
     if (!this.siteSpecific || gInPrintPreviewMode) {
       this._executeSoon(aCallback);
       return;
     }
 
     // The browser is sometimes half-destroyed because this method is called
     // by content pref service callbacks, which themselves can be called at any
     // time, even after browsers are closed.
+    console.log(!aBrowser.parentNode, aBrowser.mDestroyed, gUnloaded);
+    console.trace("has no parent?");
     if (!aBrowser.parentNode || aBrowser.isSyntheticDocument) {
       this._executeSoon(aCallback);
       return;
     }
 
     if (aValue !== undefined) {
       ZoomManager.setZoomForBrowser(aBrowser, this._ensureValid(aValue));
       this._ignorePendingZoomAccesses(aBrowser);
