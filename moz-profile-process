# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  95128ad5333249902ce7d64f01c7cc80369dcbcc

diff --git a/browser/components/nsBrowserGlue.js b/browser/components/nsBrowserGlue.js
--- a/browser/components/nsBrowserGlue.js
+++ b/browser/components/nsBrowserGlue.js
@@ -9,16 +9,17 @@ const Cu = Components.utils;
 
 const XULNS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
 
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource://gre/modules/AppConstants.jsm");
 Cu.import("resource://gre/modules/AsyncPrefs.jsm");
 
+XPCOMUtils.defineLazyServiceGetter(this, "Environment", "@mozilla.org/process/environment;1", "nsIEnvironment");
 XPCOMUtils.defineLazyServiceGetter(this, "WindowsUIUtils", "@mozilla.org/windows-ui-utils;1", "nsIWindowsUIUtils");
 XPCOMUtils.defineLazyServiceGetter(this, "AlertsService", "@mozilla.org/alerts-service;1", "nsIAlertsService");
 XPCOMUtils.defineLazyGetter(this, "WeaveService", () =>
   Cc["@mozilla.org/weave/service;1"].getService().wrappedJSObject
 );
 XPCOMUtils.defineLazyModuleGetter(this, "ContextualIdentityService",
                                   "resource://gre/modules/ContextualIdentityService.jsm");
 
@@ -603,16 +604,43 @@ BrowserGlue.prototype = {
   // (i.e. before the first window is opened)
   _finalUIStartup: function BG__finalUIStartup() {
     // check if we're in safe mode
     if (Services.appinfo.inSafeMode) {
       Services.ww.openWindow(null, "chrome://browser/content/safeMode.xul",
                              "_blank", "chrome,centerscreen,modal,resizable=no", null);
     }
 
+    dump("HERE: " + Environment.get("MOZ_PROFILE_WRITE"));
+    if (Environment.get("MOZ_PROFILE_PROCESS")) {
+      // See https://github.com/devtools-html/perf.html/blob/b73eb73df04c7df51464fa50eeadef3dc7f5d4e2/docs/gecko-profile-format.md#L21
+      let settings = {
+        entries: 100000000,
+        interval: 1,
+        features: ["js"],
+        threads: ["GeckoMain"]
+      };
+
+      try {
+        Object.assign(settings, JSON.parse(Environment.get("MOZ_PROFILE_PROCESS")));
+      } catch(e) {
+        dump("Error parsing MOZ_PROFILE_PROCESS: " + e + "\n");
+      }
+
+      Services.console.logStringMessage(settings.entries);
+      Services.profiler.StartProfiler(
+        settings.entries,
+        settings.interval,
+        settings.features,
+        settings.features.length,
+        settings.threads,
+        settings.threads.length
+      );
+    }
+
     // apply distribution customizations
     // prefs are applied in _onAppDefaults()
     this._distributionCustomizer.applyCustomizations();
 
     // handle any UI migration
     this._migrateUI();
 
     listeners.init();
@@ -1030,16 +1058,33 @@ BrowserGlue.prototype = {
 
     BrowserUsageTelemetry.uninit();
 
     PageThumbs.uninit();
     AboutNewTab.uninit();
     NewTabUtils.uninit();
     AutoCompletePopup.uninit();
     DateTimePickerHelper.uninit();
+
+
+dump("MOZ_PROFILE_WRITE:" + Environment.get("MOZ_PROFILE_WRITE"));
+    if (Environment.get("MOZ_PROFILE_WRITE")) {
+    // XXX dump async to catch main thread
+    let file = FileUtils.getFile("TmpD", [`test_render_perf_${Date.now()}.json`]);
+    Services.profiler.dumpProfileToFile(file.path);
+    Services.profiler.StopProfiler();
+    dump(`
+      SAVING PROFILE: ${file.path}
+      To upload the profile, run the following commands:
+
+      gzip ${file.path}
+      curl 'https://profile-store.appspot.com/compressed-store' --compressed --data-binary @${file.path}.gz | awk '{print "Hosted at: https://perf-html.io/public/"$1}'
+
+`);
+    }
   },
 
   _initServiceDiscovery() {
     if (!Services.prefs.getBoolPref("browser.casting.enabled")) {
       return;
     }
     var rokuDevice = {
       id: "roku:ecp",
