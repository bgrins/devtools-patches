# HG changeset patch
# User Alexandre Poirot <poirot.alex@gmail.com>

Bug 977043 - Add toolbox-level frame selection to change the currently targeted document. r=bgrins,past

diff --git a/browser/app/profile/firefox.js b/browser/app/profile/firefox.js
index d82b4f1e1e..5108420 100644
--- a/browser/app/profile/firefox.js
+++ b/browser/app/profile/firefox.js
@@ -1292,16 +1292,17 @@ pref("devtools.toolbox.selectedTool", "webconsole");
 pref("devtools.toolbox.toolbarSpec", '["splitconsole", "paintflashing toggle","tilt toggle","scratchpad","resize toggle","eyedropper","screenshot --fullpage"]');
 pref("devtools.toolbox.sideEnabled", true);
 pref("devtools.toolbox.zoomValue", "1");
 pref("devtools.toolbox.splitconsoleEnabled", false);
 pref("devtools.toolbox.splitconsoleHeight", 100);
 
 // Toolbox Button preferences
 pref("devtools.command-button-pick.enabled", true);
+pref("devtools.command-button-frames.enabled", false);
 pref("devtools.command-button-splitconsole.enabled", true);
 pref("devtools.command-button-paintflashing.enabled", false);
 pref("devtools.command-button-tilt.enabled", false);
 pref("devtools.command-button-scratchpad.enabled", false);
 pref("devtools.command-button-responsive.enabled", true);
 pref("devtools.command-button-eyedropper.enabled", false);
 pref("devtools.command-button-screenshot.enabled", false);
 
diff --git a/browser/devtools/framework/target.js b/browser/devtools/framework/target.js
index dafc91f..a3932f4 100644
--- a/browser/devtools/framework/target.js
+++ b/browser/devtools/framework/target.js
@@ -365,38 +365,45 @@ TabTarget.prototype = {
     };
     this.client.addListener("tabDetached", this._onTabDetached);
 
     this._onTabNavigated = (aType, aPacket) => {
       let event = Object.create(null);
       event.url = aPacket.url;
       event.title = aPacket.title;
       event.nativeConsoleAPI = aPacket.nativeConsoleAPI;
+      event.isFakeEvent = aPacket.isFakeEvent;
       // Send any stored event payload (DOMWindow or nsIRequest) for backwards
       // compatibility with non-remotable tools.
       if (aPacket.state == "start") {
         event._navPayload = this._navRequest;
         this.emit("will-navigate", event);
         this._navRequest = null;
       } else {
         event._navPayload = this._navWindow;
         this.emit("navigate", event);
         this._navWindow = null;
       }
     };
     this.client.addListener("tabNavigated", this._onTabNavigated);
+
+    this._onFrameUpdate = (aType, aPacket) => {
+      this.emit("frame-update", aPacket);
+    };
+    this.client.addListener("frameUpdate", this._onFrameUpdate);
   },
 
   /**
    * Teardown listeners for remote debugging.
    */
   _teardownRemoteListeners: function TabTarget__teardownRemoteListeners() {
     this.client.removeListener("closed", this.destroy);
     this.client.removeListener("tabNavigated", this._onTabNavigated);
     this.client.removeListener("tabDetached", this._onTabDetached);
+    this.client.removeListener("frameUpdate", this._onFrameUpdate);
   },
 
   /**
    * Handle tabs events.
    */
   handleEvent: function (event) {
     switch (event.type) {
       case "TabClose":
diff --git a/browser/devtools/framework/toolbox.js b/browser/devtools/framework/toolbox.js
index 5d10538..4720377 100644
--- a/browser/devtools/framework/toolbox.js
+++ b/browser/devtools/framework/toolbox.js
@@ -42,16 +42,33 @@ loader.lazyGetter(this, "toolboxStrings", () => {
       return null;
     }
   };
 });
 
 loader.lazyGetter(this, "Selection", () => require("devtools/framework/selection").Selection);
 loader.lazyGetter(this, "InspectorFront", () => require("devtools/server/actors/inspector").InspectorFront);
 
+// White-list buttons that can be toggled to prevent adding prefs for
+// addons that have manually inserted toolbarbuttons into DOM.
+// (By default, supported target is only local tab)
+const ToolboxButtons = [
+  { id: "command-button-pick",
+    isTargetSupported: target => !target.isAddon },
+  { id: "command-button-frames",
+    isTargetSupported: target => (!target.isAddon && target.activeTab && target.activeTab.traits.frames) },
+  { id: "command-button-splitconsole" },
+  { id: "command-button-responsive" },
+  { id: "command-button-paintflashing" },
+  { id: "command-button-tilt" },
+  { id: "command-button-scratchpad" },
+  { id: "command-button-eyedropper" },
+  { id: "command-button-screenshot" }
+];
+
 /**
  * A "Toolbox" is the component that holds all the tools for one specific
  * target. Visually, it's a document that includes the tools tabs and all
  * the iframes where the tool panels will be living in.
  *
  * @param {object} target
  *        The object the toolbox is debugging.
  * @param {string} selectedTool
@@ -64,16 +81,18 @@ loader.lazyGetter(this, "InspectorFront", () => require("devtools/server/actors/
 function Toolbox(target, selectedTool, hostType, hostOptions) {
   this._target = target;
   this._toolPanels = new Map();
   this._telemetry = new Telemetry();
 
   this._toolRegistered = this._toolRegistered.bind(this);
   this._toolUnregistered = this._toolUnregistered.bind(this);
   this._refreshHostTitle = this._refreshHostTitle.bind(this);
+  this.selectFrame = this.selectFrame.bind(this);
+  this._updateFrames = this._updateFrames.bind(this);
   this._splitConsoleOnKeypress = this._splitConsoleOnKeypress.bind(this);
   this.destroy = this.destroy.bind(this);
   this.highlighterUtils = getHighlighterUtils(this);
   this._highlighterReady = this._highlighterReady.bind(this);
   this._highlighterHidden = this._highlighterHidden.bind(this);
   this._prefChanged = this._prefChanged.bind(this);
   this._saveSplitConsoleHeight = this._saveSplitConsoleHeight.bind(this);
 
@@ -90,16 +109,18 @@ function Toolbox(target, selectedTool, hostType, hostOptions) {
   }
   this._defaultToolId = selectedTool;
 
   this._host = this._createHost(hostType, hostOptions);
 
   EventEmitter.decorate(this);
 
   this._target.on("navigate", this._refreshHostTitle);
+  this._target.on("frame-update", this._updateFrames);
+
   this.on("host-changed", this._refreshHostTitle);
   this.on("select", this._refreshHostTitle);
 
   gDevTools.on("tool-registered", this._toolRegistered);
   gDevTools.on("tool-unregistered", this._toolUnregistered);
 }
 exports.Toolbox = Toolbox;
 
@@ -237,21 +258,28 @@ Toolbox.prototype = {
     let deferred = promise.defer();
 
     return this._host.create().then(iframe => {
       let deferred = promise.defer();
 
       let domReady = () => {
         this.isReady = true;
 
+        if (!this._target.isAddon) {
+          this._listFrames();
+        }
+
         this.closeButton = this.doc.getElementById("toolbox-close");
         this.closeButton.addEventListener("command", this.destroy, true);
 
         gDevTools.on("pref-changed", this._prefChanged);
 
+        let framesMenu = this.doc.getElementById("command-button-frames");
+        framesMenu.addEventListener("command", this.selectFrame, true);
+
         this._buildDockButtons();
         this._buildOptions();
         this._buildTabs();
         this._applyCacheSettings();
         this._addKeysToWindow();
         this._addReloadKeys();
         this._addToolSwitchingKeys();
         this._addZoomKeys();
@@ -580,16 +608,17 @@ Toolbox.prototype = {
    * Add buttons to the UI as specified in the devtools.toolbox.toolbarSpec pref
    */
   _buildButtons: function() {
     if (!this.target.isAddon) {
       this._buildPickerButton();
     }
 
     if (!this.target.isLocalTab) {
+      this.setToolboxButtonsVisibility();
       return Promise.resolve();
     }
 
     let spec = CommandUtils.getCommandbarSpec("devtools.toolbox.toolbarSpec");
     let environment = CommandUtils.createEnvironment(this, '_target');
     return CommandUtils.createRequisition(environment).then(requisition => {
       this._requisition = requisition;
       return CommandUtils.createButtons(spec, this.target, this.doc,
@@ -605,16 +634,17 @@ Toolbox.prototype = {
    * Adding the element picker button is done here unlike the other buttons
    * since we want it to work for remote targets too
    */
   _buildPickerButton: function() {
     this._pickerButton = this.doc.createElement("toolbarbutton");
     this._pickerButton.id = "command-button-pick";
     this._pickerButton.className = "command-button command-button-invertable";
     this._pickerButton.setAttribute("tooltiptext", toolboxStrings("pickButton.tooltip"));
+    this._pickerButton.setAttribute("hidden", "true");
 
     let container = this.doc.querySelector("#toolbox-picker-container");
     container.appendChild(this._pickerButton);
 
     this._togglePicker = this.highlighterUtils.togglePicker.bind(this.highlighterUtils);
     this._pickerButton.addEventListener("command", this._togglePicker, false);
   },
 
@@ -643,54 +673,47 @@ Toolbox.prototype = {
     }
   },
 
   /**
    * Return all toolbox buttons (command buttons, plus any others that were
    * added manually).
    */
   get toolboxButtons() {
-    // White-list buttons that can be toggled to prevent adding prefs for
-    // addons that have manually inserted toolbarbuttons into DOM.
-    return [
-      "command-button-pick",
-      "command-button-splitconsole",
-      "command-button-responsive",
-      "command-button-paintflashing",
-      "command-button-tilt",
-      "command-button-scratchpad",
-      "command-button-eyedropper",
-      "command-button-screenshot"
-    ].map(id => {
-      let button = this.doc.getElementById(id);
+    return ToolboxButtons.map(options => {
+      let button = this.doc.getElementById(options.id);
       // Some buttons may not exist inside of Browser Toolbox
       if (!button) {
         return false;
       }
       return {
-        id: id,
+        id: options.id,
         button: button,
         label: button.getAttribute("tooltiptext"),
-        visibilityswitch: "devtools." + id + ".enabled"
+        visibilityswitch: "devtools." + options.id + ".enabled",
+        isTargetSupported: options.isTargetSupported ? options.isTargetSupported
+                                                     : target => target.isLocalTab
       }
     }).filter(button=>button);
   },
 
   /**
    * Ensure the visibility of each toolbox button matches the
    * preference value.  Simply hide buttons that are preffed off.
    */
   setToolboxButtonsVisibility: function() {
     this.toolboxButtons.forEach(buttonSpec => {
-      let {visibilityswitch, id, button}=buttonSpec;
+      let {visibilityswitch, id, button, isTargetSupported}=buttonSpec;
       let on = true;
       try {
         on = Services.prefs.getBoolPref(visibilityswitch);
       } catch (ex) { }
 
+      on = on && isTargetSupported(this.target);
+
       if (button) {
         if (on) {
           button.removeAttribute("hidden");
         } else {
           button.setAttribute("hidden", "true");
         }
       }
     });
@@ -1101,16 +1124,101 @@ Toolbox.prototype = {
       // no tool is selected
       toolName = toolboxStrings("toolbox.defaultTitle");
     }
     let title = toolboxStrings("toolbox.titleTemplate",
                                toolName, this.target.url || this.target.name);
     this._host.setTitle(title);
   },
 
+  _listFrames: function (event) {
+    let packet = {
+      to: this._target.form.actor,
+      type: "listFrames"
+    };
+    this._target.client.request(packet, resp => {
+      this._updateFrames(null, {windows:resp.windows});
+    });
+  },
+
+  selectFrame: function (event) {
+    let windowId = event.target.getAttribute("data-window-id");
+    let packet = {
+      to: this._target.form.actor,
+      type: "switchToFrame",
+      windowId: windowId
+    };
+    this._target.client.request(packet);
+    // Wait for frameUpdate event to update the UI
+  },
+
+  _updateFrames: function (event, data) {
+    if (!Services.prefs.getBoolPref("devtools.command-button-frames.enabled")) {
+      return;
+    }
+
+    // We may receive this event before the toolbox is ready.
+    if (!this.isReady) {
+      return;
+    }
+
+    let menu = this.doc.getElementById("command-button-frames");
+
+    if (data.destroyAll) {
+      let menupopup = menu.firstChild;
+      while (menupopup.firstChild) {
+        menupopup.firstChild.remove();
+      }
+      return;
+    } else if (data.selected) {
+      let item = menu.querySelector("menuitem[data-window-id=\"" + data.selected + "\"]");
+      if (!item) {
+        return;
+      }
+      // Toggle the toolbarbutton if we selected a non top-level frame
+      if (item.hasAttribute("data-parent-id")) {
+        menu.setAttribute("checked", "true");
+      } else {
+        menu.removeAttribute("checked");
+      }
+      // Uncheck the previously selected frame
+      let selected = menu.querySelector("menuitem[checked=true]")
+      if (selected) {
+        selected.removeAttribute("checked");
+      }
+      // Check the new one
+      item.setAttribute("checked", "true");
+    } else if (data.windows) {
+      data.windows.forEach(win => {
+        let item = menu.querySelector("menuitem[data-window-id=\"" + win.id + "\"]");
+        if (win.destroy) {
+          if (item) {
+            item.remove();
+          }
+          return;
+        }
+        if (!item) {
+          item = this.doc.createElement("menuitem");
+          item.setAttribute("data-window-id", win.id);
+          if (win.parentID) {
+            item.setAttribute("data-parent-id", win.parentID);
+          }
+          // If we register a root docshell and we don't have any selected,
+          // consider it as the currently targeted one.
+          if (!win.parentID && !menu.querySelector("menuitem[checked=true]")) {
+            item.setAttribute("checked", "true");
+            menu.removeAttribute("checked");
+          }
+          menu.firstChild.appendChild(item);
+        }
+        item.setAttribute("label", win.url);
+      });
+    }
+  },
+
   /**
    * Create a host object based on the given host type.
    *
    * Warning: some hosts require that the toolbox target provides a reference to
    * the attached tab. Not all Targets have a tab property - make sure you correctly
    * mix and match hosts and targets.
    *
    * @param {string} hostType
@@ -1321,16 +1429,17 @@ Toolbox.prototype = {
   destroy: function() {
     // If several things call destroy then we give them all the same
     // destruction promise so we're sure to destroy only once
     if (this._destroyer) {
       return this._destroyer;
     }
 
     this._target.off("navigate", this._refreshHostTitle);
+    this._target.off("frame-update", this._updateFrames);
     this.off("select", this._refreshHostTitle);
     this.off("host-changed", this._refreshHostTitle);
 
     gDevTools.off("tool-registered", this._toolRegistered);
     gDevTools.off("tool-unregistered", this._toolUnregistered);
 
     gDevTools.off("pref-changed", this._prefChanged);
 
diff --git a/browser/devtools/framework/toolbox.xul b/browser/devtools/framework/toolbox.xul
index 20f1fd1..463b80e 100644
--- a/browser/devtools/framework/toolbox.xul
+++ b/browser/devtools/framework/toolbox.xul
@@ -64,17 +64,22 @@
          oncommand="void(0);"
          modifiers="accel"/>
   </keyset>
 
   <notificationbox id="toolbox-notificationbox" flex="1">
     <toolbar class="devtools-tabbar">
       <hbox id="toolbox-picker-container" />
       <hbox id="toolbox-tabs" flex="1" role="tablist" />
-      <hbox id="toolbox-buttons" pack="end"/>
+      <hbox id="toolbox-buttons" pack="end">
+        <toolbarbutton class="devtools-toolbarbutton" text-as-image="true" id="command-button-frames"
+                       label="&toolboxFramesButton;" tooltiptext="&toolboxFramesTooltip;" type="menu" hidden="true">
+          <menupopup position="bottomright topright"></menupopup>
+        </toolbarbutton>
+      </hbox>
       <vbox id="toolbox-controls-separator" class="devtools-separator"/>
       <hbox id="toolbox-option-container"/>
       <hbox id="toolbox-controls">
         <hbox id="toolbox-dock-buttons"/>
         <toolbarbutton id="toolbox-close"
                        class="devtools-closebutton"
                        tooltiptext="&toolboxCloseButton.tooltip;"/>
       </hbox>
diff --git a/browser/locales/en-US/chrome/browser/devtools/toolbox.dtd b/browser/locales/en-US/chrome/browser/devtools/toolbox.dtd
index 9fd9847..c895d3731 100644
--- a/browser/locales/en-US/chrome/browser/devtools/toolbox.dtd
+++ b/browser/locales/en-US/chrome/browser/devtools/toolbox.dtd
@@ -13,16 +13,21 @@
 <!ENTITY toolboxPreviousTool.key       "[">
 
 <!ENTITY toolboxZoomIn.key             "+">
 <!ENTITY toolboxZoomIn.key2            "="> <!-- + is above this key on many keyboards -->
 <!ENTITY toolboxZoomOut.key            "-">
 <!ENTITY toolboxZoomReset.key          "0">
 
 <!ENTITY toolboxReload.key             "r">
+<!-- LOCALIZATION NOTE (toolboxFramesButton): This is the label for
+  -  the iframes menu list that appears only when the document has some.
+  -  It allows you to switch the context of the whole toolbox. -->
+<!ENTITY toolboxFramesButton           "Frames">
+<!ENTITY toolboxFramesTooltip          "Select an iframe as the currently targeted document">
 
 <!-- LOCALIZATION NOTE (options.context.advancedSettings): This is the label for
   -  the heading of the advanced settings group in the options panel. -->
 <!ENTITY options.context.advancedSettings "Advanced settings">
 
 <!-- LOCALIZATION NOTE (options.context.inspector): This is the label for
   -  the heading of the Inspector group in the options panel. -->
 <!ENTITY options.context.inspector "Inspector">
