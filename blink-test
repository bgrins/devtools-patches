# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  64ac2491e2ac8a8ec642e3c3db1195fab46bd81f

diff --git a/toolkit/content/tests/chrome/test_menuitem_blink.xul b/toolkit/content/tests/chrome/test_menuitem_blink.xul
--- a/toolkit/content/tests/chrome/test_menuitem_blink.xul
+++ b/toolkit/content/tests/chrome/test_menuitem_blink.xul
@@ -43,16 +43,33 @@ function test_crash(when, andThen) {
   var menupopup = document.getElementById("menupopup");
   var menuitem = document.getElementById("menuitem");
   var attrChanges = { "REMOVAL": 0, "ADDITION": 0 };
   var storedEvent = null;
   menupopup.addEventListener("popupshown", function () {
     menupopup.removeEventListener("popupshown", arguments.callee, false);
     menuitem.addEventListener("mouseup", function (e) {
       menuitem.removeEventListener("mouseup", arguments.callee, true);
+
+
+      // Options for the observer (which mutations to observe)
+      var config = { attributes: true };
+
+      // Callback function to execute when mutations are observed
+      var callback = function(mutationsList, observer) {
+          for(var mutation of mutationsList) {
+            console.log('The ' + mutation.attributeName + ' attribute was modified.');
+          }
+      };
+
+      // Create an observer instance linked to the callback function
+      var observer = new MutationObserver(callback);
+      observer.observe(menuitem, config);
+
+
       menuitem.addEventListener("DOMAttrModified", function (e) {
         if (e.attrName == "_moz-menuactive") {
           if (!attrChanges[e.attrChange])
             attrChanges[e.attrChange] = 1;
           else
             attrChanges[e.attrChange]++;
           storedEvent = e;
           if (e.attrChange == e[when]) {
