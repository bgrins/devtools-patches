# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  2f7d57ccc309e1469c5bc87f563a828baef88b17

diff --git a/toolkit/components/processsingleton/CustomElementsListener.jsm b/toolkit/components/processsingleton/CustomElementsListener.jsm
--- a/toolkit/components/processsingleton/CustomElementsListener.jsm
+++ b/toolkit/components/processsingleton/CustomElementsListener.jsm
@@ -6,18 +6,24 @@
 ChromeUtils.import("resource://gre/modules/Services.jsm");
 
 // Set up Custom Elements for XUL and XHTML documents before anything else
 // happens. Anything loaded here should be considered part of core XUL functionality.
 // Any window-specific elements can be registered via <script> tags at the
 // top of individual documents.
 Services.obs.addObserver({
   observe(doc) {
-    if (doc.nodePrincipal.isSystemPrincipal && (
-      doc.contentType == "application/vnd.mozilla.xul+xml" ||
-      doc.contentType == "application/xhtml+xml" ||
-      doc.contentType == "text/html"
-    )) {
-      Services.scriptloader.loadSubScript(
-        "chrome://global/content/customElements.js", doc.ownerGlobal);
+    if (doc.nodePrincipal.isSystemPrincipal) {
+      if (
+        doc.contentType == "application/vnd.mozilla.xul+xml" ||
+        doc.contentType == "application/xhtml+xml"
+      ) {
+        Services.scriptloader.loadSubScript(
+          "chrome://global/content/customElements.js", doc.ownerGlobal);
+      } else if (doc.contentType == "text/html") {
+        doc.ownerGlobal.customElements.setElementCreationCallback("browser", () => {
+          Services.scriptloader.loadSubScript(
+            "chrome://global/content/customElements.js", doc.ownerGlobal);
+        });
+      }
     }
   },
 }, "document-element-inserted");
diff --git a/toolkit/content/customElements.js b/toolkit/content/customElements.js
--- a/toolkit/content/customElements.js
+++ b/toolkit/content/customElements.js
@@ -284,22 +284,19 @@ MozElements.BaseControl = class BaseCont
 MozXULElement.implementCustomInterface(MozElements.BaseControl,
                                        [Ci.nsIDOMXULControlElement]);
 
 // Attach the base class to the window so other scripts can use it:
 window.MozElementMixin = MozElementMixin;
 window.MozXULElement = MozXULElement;
 window.MozElements = MozElements;
 
-customElements.setElementCreationCallback("browser", () => {
-  Services.scriptloader.loadSubScript("chrome://global/content/elements/browser-custom-element.js", window);
-});
+Services.scriptloader.loadSubScript("chrome://global/content/elements/browser-custom-element.js", window);
 
-// For now, don't load any elements in the extension dummy document.
-// We will want to load <browser> when that's migrated (bug 1441935).
+// Don't load any non-browser Custom Elements in the extension dummy document:
 const isDummyDocument = document.documentURI == "chrome://extensions/content/dummy.xul";
 if (!isDummyDocument) {
   for (let script of [
     "chrome://global/content/elements/general.js",
     "chrome://global/content/elements/notificationbox.js",
     "chrome://global/content/elements/radio.js",
     "chrome://global/content/elements/textbox.js",
     "chrome://global/content/elements/tabbox.js",
