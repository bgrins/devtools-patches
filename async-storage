# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  d03d21eb8aeb8415f17568acd98d538c457de919
Add async-storage

diff --git a/browser/devtools/inspector/inspector-panel.js b/browser/devtools/inspector/inspector-panel.js
--- a/browser/devtools/inspector/inspector-panel.js
+++ b/browser/devtools/inspector/inspector-panel.js
@@ -14,16 +14,27 @@ let clipboard = require("sdk/clipboard")
 
 loader.lazyGetter(this, "MarkupView", () => require("devtools/markupview/markup-view").MarkupView);
 loader.lazyGetter(this, "HTMLBreadcrumbs", () => require("devtools/inspector/breadcrumbs").HTMLBreadcrumbs);
 loader.lazyGetter(this, "ToolSidebar", () => require("devtools/framework/sidebar").ToolSidebar);
 loader.lazyGetter(this, "SelectorSearch", () => require("devtools/inspector/selector-search").SelectorSearch);
 
 const LAYOUT_CHANGE_TIMER = 250;
 
+const asyncStorage = require("devtools/toolkit/shared/async-storage");
+
+console.log("FOOBAR", Object.keys(asyncStorage).join(", "));
+asyncStorage.setItem('key', 'newvalue', function() {
+  console.log('new value stored');
+});
+
+asyncStorage.getItem('key', function(value) {
+  console.log('The value of key is:', value);
+});
+
 /**
  * Represents an open instance of the Inspector for a tab.
  * The inspector controls the breadcrumbs, the markup view, and the sidebar
  * (computed view, rule view, font view and layout view).
  *
  * Events:
  * - ready
  *      Fired when the inspector panel is opened for the first time and ready to
diff --git a/toolkit/devtools/Loader.jsm b/toolkit/devtools/Loader.jsm
--- a/toolkit/devtools/Loader.jsm
+++ b/toolkit/devtools/Loader.jsm
@@ -78,16 +78,17 @@ BuiltinProvider.prototype = {
         // When you add a line to this mapping, don't forget to make a
         // corresponding addition to the SrcdirProvider mapping below as well.
         "": "resource://gre/modules/commonjs/",
         "main": "resource:///modules/devtools/main.js",
         "devtools": "resource:///modules/devtools",
         "devtools/toolkit": "resource://gre/modules/devtools",
         "devtools/server": "resource://gre/modules/devtools/server",
         "devtools/toolkit/webconsole": "resource://gre/modules/devtools/toolkit/webconsole",
+        "devtools/toolkit/shared": "resource://gre/modules/devtools/toolkit/shared",
         "devtools/app-actor-front": "resource://gre/modules/devtools/app-actor-front.js",
         "devtools/styleinspector/css-logic": "resource://gre/modules/devtools/styleinspector/css-logic",
         "devtools/css-color": "resource://gre/modules/devtools/css-color",
         "devtools/output-parser": "resource://gre/modules/devtools/output-parser",
         "devtools/touch-events": "resource://gre/modules/devtools/touch-events",
         "devtools/client": "resource://gre/modules/devtools/client",
         "devtools/pretty-fast": "resource://gre/modules/devtools/pretty-fast.js",
         "devtools/jsbeautify": "resource://gre/modules/devtools/jsbeautify/beautify.js",
@@ -134,16 +135,17 @@ SrcdirProvider.prototype = {
     srcdir = OS.Path.normalize(srcdir.data.trim());
     let devtoolsDir = OS.Path.join(srcdir, "browser", "devtools");
     let toolkitDir = OS.Path.join(srcdir, "toolkit", "devtools");
     let mainURI = this.fileURI(OS.Path.join(devtoolsDir, "main.js"));
     let devtoolsURI = this.fileURI(devtoolsDir);
     let toolkitURI = this.fileURI(toolkitDir);
     let serverURI = this.fileURI(OS.Path.join(toolkitDir, "server"));
     let webconsoleURI = this.fileURI(OS.Path.join(toolkitDir, "webconsole"));
+    let sharedURI = this.fileURI(OS.Path.join(toolkitDir, "shared"));
     let appActorURI = this.fileURI(OS.Path.join(toolkitDir, "apps", "app-actor-front.js"));
     let cssLogicURI = this.fileURI(OS.Path.join(toolkitDir, "styleinspector", "css-logic"));
     let cssColorURI = this.fileURI(OS.Path.join(toolkitDir, "css-color"));
     let outputParserURI = this.fileURI(OS.Path.join(toolkitDir, "output-parser"));
     let touchEventsURI = this.fileURI(OS.Path.join(toolkitDir, "touch-events"));
     let clientURI = this.fileURI(OS.Path.join(toolkitDir, "client"));
     let prettyFastURI = this.fileURI(OS.Path.join(toolkitDir), "pretty-fast.js");
     let jsBeautifyURI = this.fileURI(OS.Path.join(toolkitDir, "jsbeautify", "beautify.js"));
@@ -160,16 +162,17 @@ SrcdirProvider.prototype = {
       modules: loaderModules,
       paths: {
         "": "resource://gre/modules/commonjs/",
         "main": mainURI,
         "devtools": devtoolsURI,
         "devtools/toolkit": toolkitURI,
         "devtools/server": serverURI,
         "devtools/toolkit/webconsole": webconsoleURI,
+        "devtools/toolkit/shared": sharedURI,
         "devtools/app-actor-front": appActorURI,
         "devtools/styleinspector/css-logic": cssLogicURI,
         "devtools/css-color": cssColorURI,
         "devtools/output-parser": outputParserURI,
         "devtools/touch-events": touchEventsURI,
         "devtools/client": clientURI,
         "devtools/pretty-fast": prettyFastURI,
         "devtools/jsbeautify": jsBeautifyURI,
diff --git a/toolkit/devtools/moz.build b/toolkit/devtools/moz.build
--- a/toolkit/devtools/moz.build
+++ b/toolkit/devtools/moz.build
@@ -11,16 +11,17 @@ DIRS += [
     'discovery',
     'gcli',
     'jsbeautify',
     'pretty-fast',
     'qrcode',
     'security',
     'server',
     'sourcemap',
+    'shared',
     'styleinspector',
     'tern',
     'transport',
     'webconsole',
 ]
 
 MOCHITEST_CHROME_MANIFESTS += ['tests/mochitest/chrome.ini']
 XPCSHELL_TESTS_MANIFESTS += ['tests/unit/xpcshell.ini']
diff --git a/toolkit/devtools/shared/async-storage.js b/toolkit/devtools/shared/async-storage.js
new file mode 100644
--- /dev/null
+++ b/toolkit/devtools/shared/async-storage.js
@@ -0,0 +1,183 @@
+/* globals indexedDB */
+/**
+ * This file defines an asynchronous version of the localStorage API, backed by
+ * an IndexedDB database.  It creates a global asyncStorage object that has
+ * methods like the localStorage object.
+ *
+ * To store a value use setItem:
+ *
+ *   asyncStorage.setItem('key', 'value');
+ *
+ * If you want confirmation that the value has been stored, pass a callback
+ * function as the third argument:
+ *
+ *  asyncStorage.setItem('key', 'newvalue', function() {
+ *    console.log('new value stored');
+ *  });
+ *
+ * To read a value, call getItem(), but note that you must supply a callback
+ * function that the value will be passed to asynchronously:
+ *
+ *  asyncStorage.getItem('key', function(value) {
+ *    console.log('The value of key is:', value);
+ *  });
+ *
+ * Note that unlike localStorage, asyncStorage does not allow you to store and
+ * retrieve values by setting and querying properties directly. You cannot just
+ * write asyncStorage.key; you have to explicitly call setItem() or getItem().
+ *
+ * removeItem(), clear(), length(), and key() are like the same-named methods of
+ * localStorage, but, like getItem() and setItem() they take a callback
+ * argument.
+ *
+ * The asynchronous nature of getItem() makes it tricky to retrieve multiple
+ * values. But unlike localStorage, asyncStorage does not require the values you
+ * store to be strings.  So if you need to save multiple values and want to
+ * retrieve them together, in a single asynchronous operation, just group the
+ * values into a single object. The properties of this object may not include
+ * DOM elements, but they may include things like Blobs and typed arrays.
+ *
+ * Unit tests are in apps/gallery/test/unit/asyncStorage_test.js
+ */
+
+const {Cc, Ci, Cu, Cr} = require("chrome");
+Cu.importGlobalProperties(["indexedDB"]);
+
+module.exports = (function() {
+  'use strict';
+
+  var DBNAME = 'asyncStorage';
+  var DBVERSION = 1;
+  var STORENAME = 'keyvaluepairs';
+  var db = null;
+
+  function withDatabase(f) {
+    if (db) {
+      f();
+    } else {
+      var openreq = indexedDB.open(DBNAME, DBVERSION);
+      openreq.onerror = function withStoreOnError() {
+        console.error('asyncStorage: can\'t open database:',
+            openreq.error.name, arguments);
+      };
+      openreq.onupgradeneeded = function withStoreOnUpgradeNeeded() {
+        // First time setup: create an empty object store
+        openreq.result.createObjectStore(STORENAME);
+      };
+      openreq.onsuccess = function withStoreOnSuccess() {
+        db = openreq.result;
+        f();
+      };
+    }
+  }
+
+  function withStore(type, callback, oncomplete) {
+    withDatabase(function() {
+      var transaction = db.transaction(STORENAME, type);
+      if (oncomplete) {
+        transaction.oncomplete = oncomplete;
+      }
+      callback(transaction.objectStore(STORENAME));
+    });
+  }
+
+  function getItem(key, callback) {
+    var req;
+    withStore('readonly', function getItemBody(store) {
+      req = store.get(key);
+      req.onerror = function getItemOnError() {
+        console.error('Error in asyncStorage.getItem(): ', req.error.name);
+      };
+    }, function onComplete() {
+      var value = req.result;
+      if (value === undefined) {
+        value = null;
+      }
+      callback(value);
+    });
+  }
+
+  function setItem(key, value, callback) {
+    withStore('readwrite', function setItemBody(store) {
+      var req = store.put(value, key);
+      req.onerror = function setItemOnError() {
+        console.error('Error in asyncStorage.setItem(): ', req.error.name);
+      };
+    }, callback);
+  }
+
+  function removeItem(key, callback) {
+    withStore('readwrite', function removeItemBody(store) {
+      var req = store.delete(key);
+      req.onerror = function removeItemOnError() {
+        console.error('Error in asyncStorage.removeItem(): ', req.error.name);
+      };
+    }, callback);
+  }
+
+  function clear(callback) {
+    withStore('readwrite', function clearBody(store) {
+      var req = store.clear();
+      req.onerror = function clearOnError() {
+        console.error('Error in asyncStorage.clear(): ', req.error.name);
+      };
+    }, callback);
+  }
+
+  function length(callback) {
+    var req;
+    withStore('readonly', function lengthBody(store) {
+      req = store.count();
+      req.onerror = function lengthOnError() {
+        console.error('Error in asyncStorage.length(): ', req.error.name);
+      };
+    }, function onComplete() {
+      callback(req.result);
+    });
+  }
+
+  function key(n, callback) {
+    if (n < 0) {
+      callback(null);
+      return;
+    }
+
+    var req;
+    withStore('readonly', function keyBody(store) {
+      var advanced = false;
+      req = store.openCursor();
+      req.onsuccess = function keyOnSuccess() {
+        var cursor = req.result;
+        if (!cursor) {
+          // this means there weren't enough keys
+          return;
+        }
+        if (n === 0 || advanced) {
+          // Either 1) we have the first key, return it if that's what they
+          // wanted, or 2) we've got the nth key.
+          return;
+        }
+
+        // Otherwise, ask the cursor to skip ahead n records
+        advanced = true;
+        cursor.advance(n);
+      };
+      req.onerror = function keyOnError() {
+        console.error('Error in asyncStorage.key(): ', req.error.name);
+      };
+    }, function onComplete() {
+      var cursor = req.result;
+      callback(cursor ? cursor.key : null);
+    });
+  }
+
+  return {
+    getItem: getItem,
+    setItem: setItem,
+    removeItem: removeItem,
+    clear: clear,
+    length: length,
+    key: key
+  };
+}());
+
diff --git a/toolkit/devtools/shared/moz.build b/toolkit/devtools/shared/moz.build
new file mode 100644
--- /dev/null
+++ b/toolkit/devtools/shared/moz.build
@@ -0,0 +1,11 @@
+# -*- Mode: python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*-
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+XPCSHELL_TESTS_MANIFESTS += ['tests/unit/xpcshell.ini']
+
+EXTRA_JS_MODULES.devtools.toolkit.shared += [
+    'async-storage.js',
+]
diff --git a/toolkit/devtools/shared/tests/unit/head.js b/toolkit/devtools/shared/tests/unit/head.js
new file mode 100644
--- /dev/null
+++ b/toolkit/devtools/shared/tests/unit/head.js
@@ -0,0 +1,10 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+const Cc = Components.classes;
+const Ci = Components.interfaces;
+const Cu = Components.utils;
+const Cr = Components.results;
+const {devtools} = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
+const {require} = devtools;
\ No newline at end of file
diff --git a/toolkit/devtools/shared/tests/unit/test_async_storage_api.js b/toolkit/devtools/shared/tests/unit/test_async_storage_api.js
new file mode 100644
--- /dev/null
+++ b/toolkit/devtools/shared/tests/unit/test_async_storage_api.js
@@ -0,0 +1,193 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+const asyncStorage = require("devtools/toolkit/shared/async-storage");
+
+/**
+ * Test that async storage works
+ */
+
+function run_test() {
+  do_test_pending();
+
+  do_check_eq(typeof asyncStorage.length,'function');
+  do_check_eq(typeof asyncStorage.key, 'function');
+  do_check_eq(typeof asyncStorage.getItem, 'function');
+  do_check_eq(typeof asyncStorage.setItem, 'function');
+  do_check_eq(typeof asyncStorage.removeItem, 'function');
+  do_check_eq(typeof asyncStorage.clear, 'function');
+
+  run_basic_test();
+}
+
+function run_basic_test() {
+  // test basic set and get
+  asyncStorage.setItem('foo', 'bar', function() {
+    asyncStorage.getItem('foo', function(value) {
+      do_check_eq(value, 'bar');
+
+      // now test overwrite and get
+      asyncStorage.setItem('foo', 'overwritten', function() {
+        asyncStorage.getItem('foo', function(value) {
+          do_check_eq(value, 'overwritten');
+
+          // now test remove and get
+          asyncStorage.removeItem('foo', function() {
+            asyncStorage.getItem('foo', function(value) {
+              assert.equal(value, null);
+              run_api_test();
+            });
+          });
+        });
+      });
+    });
+  });
+}
+
+function run_api_test() {
+
+    do_test_finished();
+    /*
+
+    var object = {
+      x: 1,
+      y: 'foo',
+      z: true
+    };
+
+    function next() {
+      generator.next();
+    }
+
+    var generator = (function() {
+      yield asyncStorage.setItem('myobj', object, next);
+
+      yield asyncStorage.getItem('myobj', function(value) {
+        assert.equal(object.x, value.x);
+        assert.equal(object.y, value.y);
+        assert.equal(object.z, value.z);
+        next();
+      });
+
+      yield asyncStorage.removeItem('myobj', next);
+
+      yield asyncStorage.getItem('myobj', function(value) {
+        assert.equal(value, null);
+        done();
+      });
+    }());
+    next();*/
+
+}
+
+/*
+  exports['API'] = function() {
+    assert.typeOf(asyncStorage.length, 'function');
+    assert.typeOf(asyncStorage.key, 'function');
+    assert.typeOf(asyncStorage.getItem, 'function');
+    assert.typeOf(asyncStorage.setItem, 'function');
+    assert.typeOf(asyncStorage.removeItem, 'function');
+    assert.typeOf(asyncStorage.clear, 'function');
+  };
+
+  exports['set, get, overwrite, get, remove, get'] = function() {
+    // test basic set and get
+    asyncStorage.setItem('foo', 'bar', function() {
+      asyncStorage.getItem('foo', function(value) {
+        assert.equal(value, 'bar');
+
+        // now test overwrite and get
+        asyncStorage.setItem('foo', 'overwritten', function() {
+          asyncStorage.getItem('foo', function(value) {
+            assert.equal(value, 'overwritten');
+
+            // now test remove and get
+            asyncStorage.removeItem('foo', function() {
+              asyncStorage.getItem('foo', function(value) {
+                assert.equal(value, null);
+                done();
+              });
+            });
+          });
+        });
+      });
+    });
+  });
+
+  test('set and get object values', function(done) {
+    var object = {
+      x: 1,
+      y: 'foo',
+      z: true
+    };
+
+    function next() {
+      generator.next();
+    }
+
+    var generator = (function() {
+      yield asyncStorage.setItem('myobj', object, next);
+
+      yield asyncStorage.getItem('myobj', function(value) {
+        assert.equal(object.x, value.x);
+        assert.equal(object.y, value.y);
+        assert.equal(object.z, value.z);
+        next();
+      });
+
+      yield asyncStorage.removeItem('myobj', next);
+
+      yield asyncStorage.getItem('myobj', function(value) {
+        assert.equal(value, null);
+        done();
+      });
+    }());
+    next();
+  });
+
+  test('clear, length, key', function(done) {
+    asyncStorage.clear(function() {
+      asyncStorage.length(function(len) {
+        // length should be 0 after clearing
+        assert.equal(len, 0);
+        asyncStorage.setItem('key1', 'value1', function() {
+          asyncStorage.length(function(len) {
+            assert.equal(len, 1);
+            asyncStorage.setItem('key2', 'value2', function() {
+              asyncStorage.length(function(len) {
+                assert.equal(len, 2);
+                asyncStorage.setItem('key3', 'value3', function() {
+                  asyncStorage.length(function(len) {
+                    assert.equal(len, 3);
+                    asyncStorage.key(0, function(key) {
+                      assert.equal(key, 'key1');
+                      asyncStorage.key(1, function(key) {
+                        assert.equal(key, 'key2');
+                        asyncStorage.key(2, function(key) {
+                          assert.equal(key, 'key3');
+                          asyncStorage.key(3, function(key) {
+                            assert.equal(key, null);
+                            asyncStorage.clear(function() {
+                              asyncStorage.key(0, function(key) {
+                                assert.equal(key, null);
+                                asyncStorage.length(function(len) {
+                                  assert.equal(len, 0);
+                                  done();
+                                });
+                              });
+                            });
+                          });
+                        });
+                      });
+                    });
+                  });
+                });
+              });
+            });
+          });
+        });
+      });
+    });
+  });
+});
+*/
diff --git a/toolkit/devtools/shared/tests/unit/xpcshell.ini b/toolkit/devtools/shared/tests/unit/xpcshell.ini
new file mode 100644
--- /dev/null
+++ b/toolkit/devtools/shared/tests/unit/xpcshell.ini
@@ -0,0 +1,6 @@
+[DEFAULT]
+head = head.js
+tail =
+support-files =
+
+[test_async_storage_api.js]
