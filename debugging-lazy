# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  f726e63bb2dc5d347b5bb8fa2961d6c885dd4e68

diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -6,16 +6,21 @@
 /* eslint-env mozilla/browser-window */
 /* globals StatusPanel */
 
 ChromeUtils.import("resource://gre/modules/XPCOMUtils.jsm");
 ChromeUtils.import("resource://gre/modules/Services.jsm");
 ChromeUtils.import("resource://gre/modules/AppConstants.jsm");
 ChromeUtils.import("resource://gre/modules/NotificationDB.jsm");
 
+customElements.setElementCreationCallback("searchbar", type => {
+  Services.scriptloader.loadSubScript(
+    "chrome://browser/content/search/searchbar.js", window);
+});
+
 const {WebExtensionPolicy} = Cu.getGlobalForObject(Services);
 
 // lazy module getters
 
 XPCOMUtils.defineLazyModuleGetters(this, {
   AddonManager: "resource://gre/modules/AddonManager.jsm",
   BrowserUsageTelemetry: "resource:///modules/BrowserUsageTelemetry.jsm",
   BrowserUtils: "resource://gre/modules/BrowserUtils.jsm",
@@ -1213,17 +1218,16 @@ var gBrowserInit = {
 
       document.documentElement.setAttribute("width", width);
       document.documentElement.setAttribute("height", height);
 
       if (width < TARGET_WIDTH && height < TARGET_HEIGHT) {
         document.documentElement.setAttribute("sizemode", "maximized");
       }
     }
-
     // Update the chromemargin attribute so the window can be sized correctly.
     window.TabBarVisibility.update();
     TabsInTitlebar.init();
 
     new LightweightThemeConsumer(document);
     CompactTheme.init();
     if (window.matchMedia("(-moz-os-version: windows-win8)").matches &&
         window.matchMedia("(-moz-windows-default-theme)").matches) {
diff --git a/browser/base/content/browser.xul b/browser/base/content/browser.xul
--- a/browser/base/content/browser.xul
+++ b/browser/base/content/browser.xul
@@ -1249,17 +1249,16 @@ xmlns="http://www.w3.org/1999/xhtml"
       </toolbarbutton>
 
       <toolbaritem id="search-container"
                    class="chromeclass-toolbar-additional"
                    title="&searchItem.title;"
                    align="center"
                    flex="100"
                    persist="width">
-        <searchbar id="searchbar" flex="1"/>
       </toolbaritem>
     </toolbarpalette>
     <box id="library-animatable-box" class="toolbarbutton-animatable-box">
       <image class="toolbarbutton-animatable-image"/>
     </box>
   </toolbox>
 
   <hbox id="fullscr-toggler" hidden="true"/>
diff --git a/browser/base/content/global-scripts.inc b/browser/base/content/global-scripts.inc
--- a/browser/base/content/global-scripts.inc
+++ b/browser/base/content/global-scripts.inc
@@ -11,17 +11,16 @@
 #ifdef BROWSER_XHTML
 xmlns="http://www.w3.org/1999/xhtml"
 #endif
 >
 Components.utils.import("resource://gre/modules/Services.jsm");
 
 for (let script of [
   "chrome://browser/content/browser.js",
-  "chrome://browser/content/search/searchbar.js",
 
   "chrome://browser/content/browser-captivePortal.js",
   "chrome://browser/content/browser-compacttheme.js",
   "chrome://browser/content/browser-contentblocking.js",
   "chrome://browser/content/browser-feeds.js",
   "chrome://browser/content/browser-media.js",
   "chrome://browser/content/browser-pageActions.js",
   "chrome://browser/content/browser-places.js",
diff --git a/browser/base/content/tabbrowser.js b/browser/base/content/tabbrowser.js
--- a/browser/base/content/tabbrowser.js
+++ b/browser/base/content/tabbrowser.js
@@ -5198,16 +5198,18 @@ var StatusPanel = {
     }
   },
 };
 
 var TabBarVisibility = {
   _initialUpdateDone: false,
 
   update() {
+    console.log(document.getElementById("search-container"), document.getElementById("search-container").isConnected)
+
     let toolbar = document.getElementById("TabsToolbar");
     let collapse = false;
     if (!gBrowser /* gBrowser isn't initialized yet */ ||
         gBrowser.tabs.length - gBrowser._removingTabs.length == 1) {
       collapse = !window.toolbar.visible;
     }
 
     if (collapse == toolbar.collapsed && this._initialUpdateDone) {
diff --git a/browser/components/customizableui/SearchWidgetTracker.jsm b/browser/components/customizableui/SearchWidgetTracker.jsm
--- a/browser/components/customizableui/SearchWidgetTracker.jsm
+++ b/browser/components/customizableui/SearchWidgetTracker.jsm
@@ -15,62 +15,93 @@ ChromeUtils.import("resource://gre/modul
 ChromeUtils.defineModuleGetter(this, "CustomizableUI",
                                "resource:///modules/CustomizableUI.jsm");
 
 const WIDGET_ID = "search-container";
 const PREF_NAME = "browser.search.widget.inNavBar";
 
 const SearchWidgetTracker = {
   init() {
-    this.onWidgetAdded = this.onWidgetRemoved = (widgetId, area) => {
+    this.onWidgetAdded = this.onWidgetRemoved = (widgetId, area, _) => {
+      console.log("onWidgetAdded");
+      console.trace();
+      console.log(widgetId, area, _);
       if (widgetId == WIDGET_ID && area == CustomizableUI.AREA_NAVBAR) {
         this.syncPreferenceWithWidget();
       }
     };
     this.onWidgetReset = this.onWidgetUndoMove = node => {
+      console.log("onWidgetReset");
+      console.trace();
       if (node.id == WIDGET_ID) {
         this.syncPreferenceWithWidget();
       }
     };
     CustomizableUI.addListener(this);
     Services.prefs.addObserver(PREF_NAME,
                                () => this.syncWidgetWithPreference());
   },
 
-  onAreaNodeRegistered(aArea) {
+  onAreaNodeRegistered(aArea, aContainer) {
     // The placement of the widget always takes priority, and the preference
     // should always match the actual placement when the browser starts up - i.e.
     // once the navigation bar has been registered.
+      console.trace();
+      console.log(this.widgetIsInNavBar, aArea == CustomizableUI.AREA_NAVBAR);
+    if (this.widgetIsInNavBar) {
+      this.insertSearchbarIfNeeded(aContainer.ownerDocument);
+    }
     if (aArea == CustomizableUI.AREA_NAVBAR) {
       this.syncPreferenceWithWidget();
     }
   },
 
+  insertSearchbarIfNeeded(doc) {
+    if (doc.getElementById("searchbar")) {
+      return;
+    }
+
+      console.log(doc);
+    console.trace();
+
+    let searchbar = doc.createElement("searchbar");
+    searchbar.setAttribute("flex", "1");
+    searchbar.id = "searchbar";
+    doc.getElementById(WIDGET_ID).appendChild(searchbar);
+  },
+
+  onCustomizeStart(aWindow) {
+    this.insertSearchbarIfNeeded(aWindow.document);
+  },
+
   onCustomizeEnd() {
     // onWidgetUndoMove does not fire when the search container is moved back to
     // the customization palette as a result of an undo, so we sync again here.
     this.syncPreferenceWithWidget();
   },
 
   syncPreferenceWithWidget() {
     Services.prefs.setBoolPref(PREF_NAME, this.widgetIsInNavBar);
   },
 
   syncWidgetWithPreference() {
     let newValue = Services.prefs.getBoolPref(PREF_NAME);
+    console.trace();
     if (newValue == this.widgetIsInNavBar) {
       return;
     }
 
     if (newValue) {
       // The URL bar widget is always present in the navigation toolbar, so we
       // can simply read its position to place the search bar right after it.
+      console("ADDING");
       CustomizableUI.addWidgetToArea(WIDGET_ID, CustomizableUI.AREA_NAVBAR,
         CustomizableUI.getPlacementOfWidget("urlbar-container").position + 1);
     } else {
+      console("REMOVING");
       CustomizableUI.removeWidgetFromArea(WIDGET_ID);
     }
   },
 
   get widgetIsInNavBar() {
     let placement = CustomizableUI.getPlacementOfWidget(WIDGET_ID);
     return placement ? placement.area == CustomizableUI.AREA_NAVBAR : false;
   },
diff --git a/browser/components/search/content/searchbar.js b/browser/components/search/content/searchbar.js
--- a/browser/components/search/content/searchbar.js
+++ b/browser/components/search/content/searchbar.js
@@ -3,17 +3,18 @@
   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 /* eslint-env mozilla/browser-window */
 /* globals XULCommandEvent */
 
 {
-
+console.log("LOADING SEARCHBAR JS");
+console.trace();
 const inheritsMap = {
   ".searchbar-textbox": ["disabled", "disableautocomplete", "searchengine", "src", "newlines"],
   ".searchbar-search-button": ["addengines"],
 };
 
 function inheritAttribute(parent, child, attr) {
   if (!parent.hasAttribute(attr)) {
     child.removeAttribute(attr);
