# HG changeset patch
# Parent 871245408f214c7d03aa7f1a0c8ac0663c005eef
# User Brian Grinstead <bgrinstead@mozilla.com>
test

diff --git a/browser/devtools/itchpad/chrome/content/itchpad-loader.js b/browser/devtools/itchpad/chrome/content/itchpad-loader.js
--- a/browser/devtools/itchpad/chrome/content/itchpad-loader.js
+++ b/browser/devtools/itchpad/chrome/content/itchpad-loader.js
@@ -55,20 +55,16 @@ window.addEventListener("DOMContentLoade
   itchpad.load(iframe).then(() => {
     itchpad.setProjectToSinglePath(SAMPLE_PATH, {
       name: SAMPLE_NAME,
       version: SAMPLE_VERSION,
       iconUrl: SAMPLE_ICON,
       projectOverviewURL: SAMPLE_PROJECT_URL
     }).then(() => {
 
-      // let containers = [...itchpad.projectTree._containers].map(z=>z[0]);
-      // containers.forEach(function(container) {
-      //   itchpad.projectTree.select(container);
-      // });
     });
 
   });
 
 }, true);
 
 
 /**
diff --git a/browser/devtools/itchpad/lib/itchpad.js b/browser/devtools/itchpad/lib/itchpad.js
--- a/browser/devtools/itchpad/lib/itchpad.js
+++ b/browser/devtools/itchpad/lib/itchpad.js
@@ -67,17 +67,16 @@ require("itchpad/plugins/status-bar/lib/
   *    onCommand: When a command happens
   *    onEditorDestroyed: When editor is destroyed
   *
   */
 var Itchpad = Class({
   extends: EventTarget,
 
   initialize: function(options = {}) {
-    this.project = options.project;
     this.stores = new Set();
     this._onNodeSelection = this._onNodeSelection.bind(this);
     this._onEditorCreated = this._onEditorCreated.bind(this);
     this._onEditorActivated = this._onEditorActivated.bind(this);
     this._updateEditorMenuItems = this._updateEditorMenuItems.bind(this);
   },
 
   /**
@@ -123,25 +122,24 @@ var Itchpad = Class({
     this.shells.on("editor-activated", this._onEditorActivated);
 
     let shellContainer = this.document.querySelector("#shells-deck-container");
     shellContainer.appendChild(this.shells.elt);
 
     let popup = this.document.querySelector("#edit-menu-popup");
     popup.addEventListener("popupshowing", this.updateEditorMenuItems);
 
-    if (!this.project) {
-      this.project = new Project({
-        id: "Test",
-        name: "App",
-        directories: [],
-        openFiles: []
-      });
-    }
-    this.setProject(this.project);
+    // We are not allowing preset projects for now - rebuild a fresh one
+    // each time.
+    this.setProject(new Project({
+      id: "",
+      name: "",
+      directories: [],
+      openFiles: []
+    }));
 
     this._initCommands();
     this._initPlugins();
   },
 
 
   /**
    * Create the project tree sidebar that lists files.
@@ -484,17 +482,17 @@ var Itchpad = Class({
    * Returns a resource for the given editor
    *
    * @param Editor editor
    *               The editor to check
    * @returns Resource
    *          The resource associated with this editor
    */
   resourceFor: function(editor) {
-    return editor.shell.project;
+    return editor.shell.resource;
   },
 
   /**
    * Decide whether a given resource should be hidden in the tree.
    *
    * @param Resource resource
    *                 The resource in the tree
    * @returns Boolean
diff --git a/browser/devtools/itchpad/lib/plugins/dirty/lib/dirty.js b/browser/devtools/itchpad/lib/plugins/dirty/lib/dirty.js
--- a/browser/devtools/itchpad/lib/plugins/dirty/lib/dirty.js
+++ b/browser/devtools/itchpad/lib/plugins/dirty/lib/dirty.js
@@ -10,26 +10,27 @@ const { emit } = require("sdk/event/core
 
 var DirtyPlugin = Class({
   extends: Plugin,
 
   onEditorSave: function(editor) { this.onEditorChange(editor); },
   onEditorLoad: function(editor) { this.onEditorChange(editor); },
 
   onEditorChange: function(editor) {
+    // Only run on a TextEditor
     if (!editor || !editor.editor) {
       return;
     }
-    let tree = this.host.tree;
 
     // Dont' force a refresh unless the dirty state has changed...
     let priv = this.priv(editor);
     let clean = editor.editor.isClean();
     if (priv.isClean !== clean) {
-      let resource = editor.shell.project;
+
+      let resource = editor.shell.resource;
       emit(resource, "label-change", resource);
       priv.isClean = clean;
     }
   },
 
   onAnnotate: function(resource, editor, elt) {
     if (editor && editor.editor && !editor.editor.isClean()) {
       elt.textContent = '*' + resource.displayName;
diff --git a/browser/devtools/itchpad/lib/plugins/save/lib/save.js b/browser/devtools/itchpad/lib/plugins/save/lib/save.js
--- a/browser/devtools/itchpad/lib/plugins/save/lib/save.js
+++ b/browser/devtools/itchpad/lib/plugins/save/lib/save.js
@@ -62,38 +62,26 @@ var SavePlugin = Class({
       return this.saveResource(editor, resource);
     }).then(() => {
       this.host.openResource(resource);
     }).then(null, console.error);
   },
 
   save: function() {
     let editor = this.host.currentEditor;
-    let project = this.host.resourceFor(editor);
-    if (!project) {
+    let resource = this.host.resourceFor(editor);
+    if (!resource) {
       return this.saveAs();
     }
 
-    return this.saveResource(editor, project);
+    return this.saveResource(editor, resource);
   },
 
   createResource: function(path) {
     return this.host.project.resourceFor(path, { create: true })
   },
 
   saveResource: function(editor, resource) {
-    // If this wasn't a project editor, update the project
-    // editor.
-    let shell = this.host.shellFor(resource);
-    let projectEditor = shell ? shell.editor.project : null;
-    let text = -1;
-    if (projectEditor && projectEditor !== editor) {
-      text = editor.editor.getText();
-    }
-    return editor.save(resource).then(() => {
-      if (text != -1) {
-        projectEditor.editor.setText(text);
-      }
-    });
+    return editor.save(resource);
   }
 })
 exports.SavePlugin = SavePlugin;
 registerPlugin(SavePlugin);
diff --git a/browser/devtools/itchpad/lib/shells.js b/browser/devtools/itchpad/lib/shells.js
--- a/browser/devtools/itchpad/lib/shells.js
+++ b/browser/devtools/itchpad/lib/shells.js
@@ -12,17 +12,17 @@ const { EditorTypeForResource } = requir
 const NetworkHelper = require("devtools/toolkit/webconsole/network-helper");
 
 var Shell = Class({
   extends: EventTarget,
 
   initialize: function(host, selectedResource) {
     this.host = host;
     this.doc = host.document;
-    this.project = selectedResource;
+    this.resource = selectedResource;
     this.elt = this.doc.createElement("vbox");
     this.elt.shell = this;
 
     this.editor = null;
 
     this._ensureEditor();
   },
 
@@ -30,23 +30,23 @@ var Shell = Class({
     if (this.editor) {
       let editor = this.editor;
       editor.appended.then(() => {
         emit(this, "editor-activated", editor);
       });
       return;
     }
 
-    let project = this.project;
-    let constructor = EditorTypeForResource(project);
+    let resource = this.resource;
+    let constructor = EditorTypeForResource(resource);
 
     if (this.host.plugins) {
       this.host.plugins.forEach(plugin => {
         if (plugin.editorForResource) {
-          let pluginEditor = plugin.editorForResource(project);
+          let pluginEditor = plugin.editorForResource(resource);
           if (pluginEditor) {
             constructor = pluginEditor;
           }
         }
       });
     }
 
     let editor = constructor(this.doc, this.host);
@@ -54,17 +54,17 @@ var Shell = Class({
     editor.shell = this;
 
     this.elt.appendChild(editor.elt);
 
     editor.appended.then(() => {
       emit(this, "editor-created", editor);
       emit(this, "editor-activated", editor);
     });
-    editor.load(project);
+    editor.load(resource);
   }
 });
 
 var ShellDeck = Class({
   extends: EventTarget,
 
   initialize: function(document, host) {
     this.doc = document;
@@ -74,17 +74,17 @@ var ShellDeck = Class({
     this.elt = this.deck;
 
     this.shells = new Map();
 
     this._deactivateEditor = null;
   },
 
   open: function(defaultResource) {
-    let shell = this.shells.get(defaultResource);
+    let shell = this.shellFor(defaultResource);
     if (!shell) {
       shell = this.createShell(defaultResource);
       this.shells.set(defaultResource, shell);
     }
     this.selectShell(shell);
     return shell;
   },
 
@@ -120,17 +120,17 @@ var ShellDeck = Class({
   get currentEditor() {
     let shell = this.currentShell;
     return shell ? shell.editor : shell;
   },
 
   createShell: function(defaultResource) {
     let shell = Shell(this.host, defaultResource);
     shell.on("editor-created", (editor) => {
-      this.shells.set(shell.project, editor);
+      this.shells.set(shell.resource, shell);
       emit(this, "editor-created", editor);
     });
     shell.on("editor-activated", () => {
       if (this.currentShell === shell) {
         this.selectShell(shell);
       }
     });
 
diff --git a/browser/devtools/itchpad/lib/tree.js b/browser/devtools/itchpad/lib/tree.js
--- a/browser/devtools/itchpad/lib/tree.js
+++ b/browser/devtools/itchpad/lib/tree.js
@@ -101,16 +101,17 @@ var Container = Class({
   update: function() {
     let visible = this.tree.options.resourceVisible ?
       this.tree.options.resourceVisible(this.resource) :
       true;
 
     this.elt.hidden = !visible;
 
     this.tree.options.resourceFormatter(this.resource, this.label);
+
     this.icon.className = "file-icon";
 
     let contentCategory = this.resource.contentCategory;
     let baseName = this.resource.basename || "";
 
     if (!this.resource.parent) {
       this.icon.classList.add("icon-none");
     } else if (this.resource.isDir) {
@@ -262,21 +263,24 @@ var TreeView = Class({
     });
   },
 
   removeModel: function(model) {
     this.models.delete(model);
     this.removeResource(model.root);
   },
 
+  getViewContainer: function(resource) {
+    return this._containers.get(resource);
+  },
+
   /*
     this.containers._get(resource) is a Container
    */
   select: function(resource) {
-    console.log("Tree Select requested", resource, [...this._containers]);
     this.selectContainer(this._containers.get(resource));
   },
 
   selectContainer: function(container) {
     if (this.selectedContainer === container) {
       return;
     }
     if (this.selectedContainer) {
diff --git a/browser/devtools/itchpad/test/browser_itchpad_init_custom.js b/browser/devtools/itchpad/test/browser_itchpad_init_custom.js
--- a/browser/devtools/itchpad/test/browser_itchpad_init_custom.js
+++ b/browser/devtools/itchpad/test/browser_itchpad_init_custom.js
@@ -111,18 +111,23 @@ function* testEditFile(itchpad, filePath
   info ("Testing edit for: " + filePath);
   let initialData = yield getFileData(filePath);
   let editor = itchpad.currentEditor;
   let resource = itchpad.resourceFor(editor);
 
   is (resource.path, filePath, "Resource path is set correctly");
   is (editor.editor.getText(), initialData, "Editor is loaded with correct file contents");
 
+  let viewContainer= itchpad.projectTree.getViewContainer(resource);
+  let originalTreeLabel = viewContainer.label.textContent;
+
   editor.editor.setText(newData);
   is (editor.editor.getText(), newData, "Editor has been filled with new data");
-
+  is (viewContainer.label.textContent, "*" + originalTreeLabel, "Label is marked as changed");
   editor.save(resource);
 
   let savedResource = yield whenEditorSave(itchpad);
+  is (viewContainer.label.textContent, originalTreeLabel, "Label is unmarked as changed");
+
   let savedData = yield getFileData(filePath);
 
   is (savedData, newData, "Data has been correctly saved to disk");
 }
