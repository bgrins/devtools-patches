
# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1562192100 25200
# Node ID 05bcdba399e76d478b9f6adf8426ac1c5ea6581a
# Parent  38aa0201f6454456aa5f0077a050e0eb03335c8d
Bug XXX - Investigate using html:hbox and html:vbox

diff --git a/browser/base/content/browser-addons.js b/browser/base/content/browser-addons.js
--- a/browser/base/content/browser-addons.js
+++ b/browser/base/content/browser-addons.js
@@ -261,17 +261,17 @@ var gXPInstallObserver = {
           cancelInstallation();
           break;
         case "shown":
           let addonList = document.getElementById("addon-install-confirmation-content");
           while (addonList.firstChild)
             addonList.firstChild.remove();
 
           for (let install of installInfo.installs) {
-            let container = document.createXULElement("hbox");
+            let container = document.createElement("hbox");
 
             let name = document.createXULElement("label");
             name.setAttribute("value", install.addon.name);
             name.setAttribute("class", "addon-install-confirmation-name");
             container.appendChild(name);
 
             if (someUnsigned && install.addon.signedState <= AddonManager.SIGNEDSTATE_MISSING) {
               let unsignedLabel = document.createXULElement("label");
diff --git a/browser/base/content/browser-contentblocking.js b/browser/base/content/browser-contentblocking.js
--- a/browser/base/content/browser-contentblocking.js
+++ b/browser/base/content/browser-contentblocking.js
@@ -84,17 +84,17 @@ var Fingerprinting = {
     let isDetected = isAllowed || actions.some(([state]) => this.isBlocking(state));
 
     if (!isDetected) {
       return null;
     }
 
     let uri = Services.io.newURI(origin);
 
-    let listItem = document.createXULElement("hbox");
+    let listItem = document.createElement("hbox");
     listItem.className = "identity-popup-content-blocking-list-item";
     listItem.classList.toggle("allowed", isAllowed);
     // Repeat the host in the tooltip in case it's too long
     // and overflows in our panel.
     listItem.tooltipText = uri.host;
 
     let image = document.createXULElement("image");
     image.className = "identity-popup-fingerprintersView-icon";
@@ -197,17 +197,17 @@ var Cryptomining = {
     let isDetected = isAllowed || actions.some(([state]) => this.isBlocking(state));
 
     if (!isDetected) {
       return null;
     }
 
     let uri = Services.io.newURI(origin);
 
-    let listItem = document.createXULElement("hbox");
+    let listItem = document.createElement("hbox");
     listItem.className = "identity-popup-content-blocking-list-item";
     listItem.classList.toggle("allowed", isAllowed);
     // Repeat the host in the tooltip in case it's too long
     // and overflows in our panel.
     listItem.tooltipText = uri.host;
 
     let image = document.createXULElement("image");
     image.className = "identity-popup-cryptominersView-icon";
@@ -346,17 +346,17 @@ var TrackingProtection = {
 
     // If we don't have trackers we would usually not show the menu item
     // allowing the user to show the sub-panel. However, in the edge case
     // that we annotated trackers on the page using the strict list but did
     // not detect trackers on the page using the basic list, we currently
     // still show the panel. To reduce the confusion, tell the user that we have
     // not detected any tracker.
     if (fragment.childNodes.length == 0) {
-      let emptyBox = document.createXULElement("vbox");
+      let emptyBox = document.createElement("vbox");
       let emptyImage = document.createXULElement("image");
       emptyImage.classList.add("identity-popup-content-blocking-trackersView-empty-image");
       emptyImage.classList.add("tracking-protection-icon");
 
       let emptyLabel = document.createXULElement("label");
       emptyLabel.classList.add("identity-popup-content-blocking-empty-label");
       emptyLabel.textContent = gNavigatorBundle.getString("contentBlocking.trackersView.empty.label");
 
@@ -410,17 +410,17 @@ var TrackingProtection = {
     // Because we might use different lists for annotation vs. blocking, we
     // need to make sure that this is a tracker that we would actually have blocked
     // before showing it to the user.
     let isTracker = await this._isOnTrackingTable(uri);
     if (!isTracker) {
       return null;
     }
 
-    let listItem = document.createXULElement("hbox");
+    let listItem = document.createElement("hbox");
     listItem.className = "identity-popup-content-blocking-list-item";
     listItem.classList.toggle("allowed", isAllowed);
     // Repeat the host in the tooltip in case it's too long
     // and overflows in our panel.
     listItem.tooltipText = uri.host;
 
     let image = document.createXULElement("image");
     image.className = "identity-popup-trackersView-icon";
@@ -558,17 +558,17 @@ var ThirdPartyCookies = {
     let contentBlockingLog = await gBrowser.selectedBrowser.getContentBlockingLog();
     contentBlockingLog = JSON.parse(contentBlockingLog);
 
     let categories = this._processContentBlockingLog(contentBlockingLog);
 
     this.subViewList.textContent = "";
 
     for (let category of ["firstParty", "trackers", "thirdParty"]) {
-      let box = document.createXULElement("vbox");
+      let box = document.createElement("vbox");
       let label = document.createXULElement("label");
       label.className = "identity-popup-cookiesView-list-header";
       label.textContent = gNavigatorBundle.getString(`contentBlocking.cookiesView.${category}.label`);
       box.appendChild(label);
 
       for (let info of categories[category]) {
         box.appendChild(this._createListItem(info));
       }
@@ -691,17 +691,17 @@ var ThirdPartyCookies = {
         newLog.thirdParty.push(info);
       }
     }
 
     return newLog;
   },
 
   _createListItem({origin, isAllowed, hasException}) {
-    let listItem = document.createXULElement("hbox");
+    let listItem = document.createElement("hbox");
     listItem.className = "identity-popup-content-blocking-list-item";
     listItem.classList.toggle("allowed", isAllowed);
     // Repeat the origin in the tooltip in case it's too long
     // and overflows in our panel.
     listItem.tooltipText = origin;
 
     let image = document.createXULElement("image");
     image.className = "identity-popup-cookiesView-icon";
diff --git a/browser/base/content/browser-ctrlTab.js b/browser/base/content/browser-ctrlTab.js
--- a/browser/base/content/browser-ctrlTab.js
+++ b/browser/base/content/browser-ctrlTab.js
@@ -211,34 +211,34 @@ var ctrlTab = {
       if (event.button == 1) {
         this.remove(preview);
       } else if (AppConstants.platform == "macosx" && event.button == 2) {
         // Control+click is a right click on OS X
         this.pick(preview);
       }
     });
 
-    let previewInner = document.createXULElement("vbox");
+    let previewInner = document.createElement("vbox");
     previewInner.setAttribute("class", "ctrlTab-preview-inner");
     preview.appendChild(previewInner);
 
     if (!aIsShowAllButton) {
       let canvasWidth = this.canvasWidth;
       let canvasHeight = this.canvasHeight;
 
-      let canvas = preview._canvas = document.createXULElement("hbox");
+      let canvas = preview._canvas = document.createElement("hbox");
       canvas.setAttribute("class", "ctrlTab-canvas");
       canvas.setAttribute("width", canvasWidth);
       canvas.style.minWidth = canvasWidth + "px";
       canvas.style.maxWidth = canvasWidth + "px";
       canvas.style.minHeight = canvasHeight + "px";
       canvas.style.maxHeight = canvasHeight + "px";
       previewInner.appendChild(canvas);
 
-      let faviconContainer = document.createXULElement("hbox");
+      let faviconContainer = document.createElement("hbox");
       faviconContainer.setAttribute("class", "ctrlTab-favicon-container");
       previewInner.appendChild(faviconContainer);
 
       let favicon = preview._favicon = document.createXULElement("image");
       favicon.setAttribute("class", "ctrlTab-favicon");
       faviconContainer.appendChild(favicon);
     }
 
diff --git a/browser/base/content/browser-pageActions.js b/browser/base/content/browser-pageActions.js
--- a/browser/base/content/browser-pageActions.js
+++ b/browser/base/content/browser-pageActions.js
@@ -248,17 +248,17 @@ var BrowserPageActions = {
     });
     return buttonNode;
   },
 
   _makePanelViewNodeForAction(action, forUrlbar) {
     let panelViewNode = document.createXULElement("panelview");
     panelViewNode.id = this._panelViewNodeIDForActionID(action.id, forUrlbar);
     panelViewNode.classList.add("PanelUI-subView");
-    let bodyNode = document.createXULElement("vbox");
+    let bodyNode = document.createElement("vbox");
     bodyNode.id = panelViewNode.id + "-body";
     bodyNode.classList.add("panel-subview-body");
     panelViewNode.appendChild(bodyNode);
     return panelViewNode;
   },
 
   /**
    * Shows or hides a panel for an action.  You can supply your own panel;
diff --git a/browser/base/content/browser-siteIdentity.js b/browser/base/content/browser-siteIdentity.js
--- a/browser/base/content/browser-siteIdentity.js
+++ b/browser/base/content/browser-siteIdentity.js
@@ -1070,17 +1070,17 @@ var gIdentityHandler = {
         this._permissionReloadHint.hasAttribute("hidden")) {
       this._permissionEmptyHint.removeAttribute("hidden");
     } else {
       this._permissionEmptyHint.setAttribute("hidden", "true");
     }
   },
 
   _createPermissionItem(aPermission) {
-    let container = document.createXULElement("hbox");
+    let container = document.createElement("hbox");
     container.setAttribute("class", "identity-popup-permission-item");
     container.setAttribute("align", "center");
     container.setAttribute("role", "group");
 
     let img = document.createXULElement("image");
     img.classList.add("identity-popup-permission-icon", aPermission.id + "-icon");
     if (aPermission.state == SitePermissions.BLOCK)
       img.classList.add("blocked-permission-icon");
@@ -1116,17 +1116,17 @@ var gIdentityHandler = {
     let isPolicyPermission = [
       SitePermissions.SCOPE_POLICY, SitePermissions.SCOPE_GLOBAL,
     ].includes(aPermission.scope);
 
     if ((aPermission.id == "popup" && !isPolicyPermission) ||
         aPermission.id == "autoplay-media") {
       let menulist = document.createXULElement("menulist");
       let menupopup = document.createXULElement("menupopup");
-      let block = document.createXULElement("vbox");
+      let block = document.createElement("vbox");
       block.setAttribute("id", "identity-popup-popup-container");
       menulist.setAttribute("sizetopopup", "none");
       menulist.setAttribute("class", "identity-popup-popup-menulist");
       menulist.setAttribute("id", "identity-popup-popup-menulist");
 
       for (let state of SitePermissions.getAvailableStates(aPermission.id)) {
         let menuitem = document.createXULElement("menuitem");
         // We need to correctly display the default/unknown state, which has its
@@ -1233,17 +1233,17 @@ var gIdentityHandler = {
     });
 
     container.appendChild(button);
 
     return container;
   },
 
   _createBlockedPopupIndicator() {
-    let indicator = document.createXULElement("hbox");
+    let indicator = document.createElement("hbox");
     indicator.setAttribute("class", "identity-popup-permission-item");
     indicator.setAttribute("align", "center");
     indicator.setAttribute("id", "blocked-popup-indicator-item");
 
     let icon = document.createXULElement("image");
     icon.setAttribute("class", "popup-subitem identity-popup-permission-icon");
 
     let text = document.createXULElement("label", {is: "text-link"});
diff --git a/browser/base/content/browser.css b/browser/base/content/browser.css
--- a/browser/base/content/browser.css
+++ b/browser/base/content/browser.css
@@ -1,13 +1,13 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
-@namespace url("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul");
+@namespace xul url("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul");
 @namespace html url("http://www.w3.org/1999/xhtml");
 
 :root {
   --panelui-subview-transition-duration: 150ms;
   --lwt-additional-images: none;
   --lwt-background-alignment: right top;
   --lwt-background-tiling: no-repeat;
 
diff --git a/browser/base/content/browser.xhtml b/browser/base/content/browser.xhtml
--- a/browser/base/content/browser.xhtml
+++ b/browser/base/content/browser.xhtml
@@ -279,24 +279,24 @@
       <html:div id="editBookmarkPanelInfoArea">
         <html:div id="editBookmarkPanelRecommendation"></html:div>
         <html:div id="editBookmarkPanelFaviconContainer">
           <html:img id="editBookmarkPanelFavicon"/>
         </html:div>
         <html:div id="editBookmarkPanelImage"></html:div>
       </html:div>
 #include ../../components/places/content/editBookmarkPanel.inc.xul
-      <vbox id="editBookmarkPanelBottomContent"
+      <html:vbox id="editBookmarkPanelBottomContent"
             flex="1">
         <checkbox id="editBookmarkPanel_showForNewBookmarks"
                   label="&editBookmark.showForNewBookmarks.label;"
                   accesskey="&editBookmark.showForNewBookmarks.accesskey;"
                   oncommand="StarUI.onShowForNewBookmarksCheckboxCommand();"/>
-      </vbox>
-      <hbox id="editBookmarkPanelBottomButtons"
+      </html:vbox>
+      <html:hbox id="editBookmarkPanelBottomButtons"
             class="panel-footer"
             style="min-width: &editBookmark.panel.width;;">
 #ifndef XP_UNIX
         <button id="editBookmarkPanelDoneButton"
                 class="editBookmarkPanelBottomButton"
                 label="&editBookmark.done.label;"
                 default="true"
                 oncommand="StarUI.panel.hidePopup();"/>
@@ -308,42 +308,42 @@
                 class="editBookmarkPanelBottomButton"
                 oncommand="StarUI.removeBookmarkButtonCommand();"/>
         <button id="editBookmarkPanelDoneButton"
                 class="editBookmarkPanelBottomButton"
                 label="&editBookmark.done.label;"
                 default="true"
                 oncommand="StarUI.panel.hidePopup();"/>
 #endif
-      </hbox>
+      </html:hbox>
     </panel>
 
     <!-- UI tour experience -->
     <panel id="UITourTooltip"
            type="arrow"
            hidden="true"
            noautofocus="true"
            noautohide="true"
            align="start"
            orient="vertical"
            role="alert">
-     <vbox>
-      <hbox id="UITourTooltipBody">
+     <html:vbox>
+      <html:hbox id="UITourTooltipBody">
         <image id="UITourTooltipIcon"/>
-        <vbox flex="1">
-          <hbox id="UITourTooltipTitleContainer">
+        <html:vbox flex="1">
+          <html:hbox id="UITourTooltipTitleContainer">
             <label id="UITourTooltipTitle" flex="1"/>
             <toolbarbutton id="UITourTooltipClose" class="close-icon"
                            tooltiptext="&uiTour.infoPanel.close;"/>
-          </hbox>
+          </html:hbox>
           <description id="UITourTooltipDescription" flex="1"/>
-        </vbox>
-      </hbox>
-      <hbox id="UITourTooltipButtons" flex="1" align="center"/>
-     </vbox>
+        </html:vbox>
+      </html:hbox>
+      <html:hbox id="UITourTooltipButtons" flex="1" align="center"/>
+     </html:vbox>
     </panel>
     <!-- type="default" forces frames to be created so that the panel's size can be determined -->
     <panel id="UITourHighlightContainer"
            type="default"
            hidden="true"
            noautofocus="true"
            noautohide="true"
            flip="none"
@@ -507,18 +507,18 @@
                               gContextMenu = null;
                               updateEditUIVisibility();">
 #include browser-context.inc
     </menupopup>
 
 #include ../../components/places/content/placesContextMenu.inc.xul
 
     <panel id="ctrlTab-panel" hidden="true" norestorefocus="true" level="top">
-      <hbox id="ctrlTab-previews"/>
-      <hbox id="ctrlTab-showAll-container" pack="center"/>
+      <html:hbox id="ctrlTab-previews"/>
+      <html:hbox id="ctrlTab-showAll-container" pack="center"/>
     </panel>
 
     <panel id="pageActionPanel"
            class="cui-widget-panel"
            role="group"
            type="arrow"
            hidden="true"
            flip="slide"
@@ -535,36 +535,36 @@
            shareURL-title="&pageAction.shareUrl.label;"
            shareMore-label="&pageAction.shareMore.label;">
       <panelmultiview id="pageActionPanelMultiView"
                       mainViewId="pageActionPanelMainView"
                       viewCacheId="appMenu-viewCache">
         <panelview id="pageActionPanelMainView"
                    context="pageActionContextMenu"
                    class="PanelUI-subView">
-          <vbox class="panel-subview-body"/>
+          <html:vbox class="panel-subview-body"/>
         </panelview>
       </panelmultiview>
     </panel>
 
     <panel id="confirmation-hint"
            role="alert"
            type="arrow"
            hidden="true"
            flip="slide"
            position="bottomcenter topright"
            tabspecific="true"
            noautofocus="true">
-      <hbox id="confirmation-hint-checkmark-animation-container">
+      <html:hbox id="confirmation-hint-checkmark-animation-container">
        <image id="confirmation-hint-checkmark-image"/>
-      </hbox>
-      <vbox id="confirmation-hint-message-container">
+      </html:hbox>
+      <html:vbox id="confirmation-hint-message-container">
        <label id="confirmation-hint-message"/>
        <label id="confirmation-hint-description"/>
-      </vbox>
+      </html:vbox>
     </panel>
 
     <menupopup id="pageActionContextMenu"
                onpopupshowing="BrowserPageActions.onContextMenuShowing(event, this);">
       <menuitem class="pageActionContextMenuItem builtInUnpinned"
                 label="&pageAction.addToUrlbar.label;"
                 oncommand="BrowserPageActions.togglePinningForContextAction();"/>
       <menuitem class="pageActionContextMenuItem builtInPinned"
@@ -607,21 +607,21 @@
 #include popup-notifications.inc
 
 #include ../../components/customizableui/content/panelUI.inc.xul
 #include ../../components/controlcenter/content/identityPanel.inc.xul
 #include ../../components/controlcenter/content/protectionsPanel.inc.xul
 #include ../../components/downloads/content/downloadsPanel.inc.xul
 #include browser-allTabsMenu.inc.xul
 
-    <hbox id="downloads-animation-container" mousethrough="always">
-      <vbox id="downloads-notification-anchor" hidden="true">
-        <vbox id="downloads-indicator-notification"/>
-      </vbox>
-    </hbox>
+    <html:hbox id="downloads-animation-container" mousethrough="always">
+      <html:vbox id="downloads-notification-anchor" hidden="true">
+        <html:vbox id="downloads-indicator-notification"/>
+      </html:vbox>
+    </html:hbox>
 
     <tooltip id="dynamic-shortcut-tooltip"
              onpopupshowing="UpdateDynamicShortcutTooltipText(this);"/>
 
     <menupopup id="SyncedTabsSidebarContext">
       <menuitem data-lazy-l10n-id="synced-tabs-context-open"
                 id="syncedTabsOpenSelected" where="current"/>
       <menuitem data-lazy-l10n-id="synced-tabs-context-open-in-new-tab"
@@ -668,31 +668,31 @@
                 accesskey="&selectAllCmd.accesskey;"
                 cmd="cmd_selectAll"/>
       <menuseparator/>
       <menuitem label="&syncSyncNowItem.label;"
                 accesskey="&syncSyncNowItem.accesskey;"
                 id="syncedTabsRefreshFilter"/>
     </menupopup>
 
-    <hbox id="statuspanel" inactive="true" renderroot="content">
-      <hbox id="statuspanel-inner">
+    <html:hbox id="statuspanel" inactive="true" renderroot="content">
+      <html:hbox id="statuspanel-inner">
         <label id="statuspanel-label"
                role="status"
                aria-live="off"
                flex="1"
                crop="end"/>
-      </hbox>
-    </hbox>
+      </html:hbox>
+    </html:hbox>
   </popupset>
   <box id="appMenu-viewCache" hidden="true"/>
 
   <toolbox id="navigator-toolbox">
 
-    <vbox id="titlebar">
+    <html:vbox id="titlebar">
       <!-- Menu -->
       <toolbar type="menubar" id="toolbar-menubar"
                class="browser-toolbar chromeclass-menubar titlebar-color"
                customizable="true"
                mode="icons"
 #ifdef MENUBAR_CAN_AUTOHIDE
                toolbarname="&menubarCmd.label;"
                accesskey="&menubarCmd.accesskey;"
@@ -713,20 +713,20 @@
                fullscreentoolbar="true"
                customizable="true"
                customizationtarget="TabsToolbar-customization-target"
                mode="icons"
                aria-label="&tabsToolbar.label;"
                context="toolbar-context-menu"
                flex="1">
 
-        <hbox class="titlebar-spacer" type="pre-tabs"/>
+        <html:hbox class="titlebar-spacer" type="pre-tabs"/>
 
-        <hbox flex="1" align="end" class="toolbar-items">
-          <hbox id="TabsToolbar-customization-target" flex="1">
+        <html:hbox flex="1" align="end" class="toolbar-items">
+          <html:hbox id="TabsToolbar-customization-target" flex="1">
             <tabs id="tabbrowser-tabs"
                   flex="1"
                   setfocus="false"
                   tooltip="tabbrowser-tab-tooltip"
                   stopwatchid="FX_TAB_CLICK_MS">
               <tab is="tabbrowser-tab" class="tabbrowser-tab" selected="true" visuallyselected="true" fadein="true"/>
             </tabs>
 
@@ -745,55 +745,55 @@
 
             <toolbarbutton id="alltabs-button"
                            class="toolbarbutton-1 chromeclass-toolbar-additional tabs-alltabs-button"
                            badged="true"
                            oncommand="gTabsPanel.showAllTabsPanel();"
                            label="&listAllTabs.label;"
                            tooltiptext="&listAllTabs.label;"
                            removable="false"/>
-          </hbox>
-        </hbox>
+          </html:hbox>
+        </html:hbox>
 
-        <hbox class="titlebar-spacer" type="post-tabs"/>
+        <html:hbox class="titlebar-spacer" type="post-tabs"/>
 
 #ifndef XP_MACOSX
         <button class="accessibility-indicator" tooltiptext="&accessibilityIndicator.tooltip;"
                 aria-live="polite"/>
-        <hbox class="private-browsing-indicator"/>
+        <html:hbox class="private-browsing-indicator"/>
 #endif
 
 #include titlebar-items.inc.xul
 
 #ifdef XP_MACOSX
         <!-- OS X does not natively support RTL for its titlebar items, so we prevent this secondary
              buttonbox from reversing order in RTL by forcing an LTR direction. -->
-        <hbox id="titlebar-secondary-buttonbox" dir="ltr">
+        <html:hbox id="titlebar-secondary-buttonbox" dir="ltr">
           <button class="accessibility-indicator" tooltiptext="&accessibilityIndicator.tooltip;" aria-live="polite"/>
-          <hbox class="private-browsing-indicator"/>
-          <hbox id="titlebar-fullscreen-button"/>
-        </hbox>
+          <html:hbox class="private-browsing-indicator"/>
+          <html:hbox id="titlebar-fullscreen-button"/>
+        </html:hbox>
 #endif
       </toolbar>
 
-    </vbox>
+    </html:vbox>
 
     <toolbar id="nav-bar"
              class="browser-toolbar"
              aria-label="&navbarCmd.label;"
              fullscreentoolbar="true" mode="icons" customizable="true"
              customizationtarget="nav-bar-customization-target"
              overflowable="true"
              overflowbutton="nav-bar-overflow-button"
              overflowtarget="widget-overflow-list"
              overflowpanel="widget-overflow"
              context="toolbar-context-menu">
 
       <toolbartabstop/>
-      <hbox id="nav-bar-customization-target" flex="1">
+      <html:hbox id="nav-bar-customization-target" flex="1">
         <toolbarbutton id="back-button" class="toolbarbutton-1 chromeclass-toolbar-additional"
                        label="&backCmd.label;"
                        removable="false" overflows="false"
                        keepbroadcastattributeswhencustomizing="true"
                        command="Browser:BackOrBackDuplicate"
                        onclick="checkForMiddleClick(this, event);"
                        tooltip="back-button-tooltip"
                        context="backForwardMenu"/>
@@ -937,39 +937,39 @@
                          tooltiptext="&urlbar.webAuthnAnchor.tooltip;"/>
                   <image id="storage-access-notification-icon" class="notification-anchor-icon storage-access-icon" role="button"
                          tooltiptext="&urlbar.storageAccessAnchor.tooltip;"/>
                 </box>
                 <image id="connection-icon"/>
                 <image id="extension-icon"/>
                 <image id="remote-control-icon"
                        tooltiptext="&urlbar.remoteControlNotificationAnchor.tooltip;"/>
-                <hbox id="identity-icon-labels">
+                <html:hbox id="identity-icon-labels">
                   <label id="identity-icon-label" class="plain" flex="1"/>
                   <label id="identity-icon-country-label" class="plain"/>
-                </hbox>
+                </html:hbox>
               </box>
               <box id="urlbar-display-box" align="center">
                 <label id="switchtab" class="urlbar-display urlbar-display-switchtab" value="&urlbar.switchToTab.label;"/>
                 <label id="extension" class="urlbar-display urlbar-display-extension" value="&urlbar.extension.label;"/>
               </box>
-              <hbox id="page-action-buttons" context="pageActionContextMenu">
+              <html:hbox id="page-action-buttons" context="pageActionContextMenu">
                 <toolbartabstop/>
-                <hbox id="contextual-feature-recommendation" role="button" hidden="true">
-                  <hbox id="cfr-label-container">
+                <html:hbox id="contextual-feature-recommendation" role="button" hidden="true">
+                  <html:hbox id="cfr-label-container">
                     <label id="cfr-label"/>
-                  </hbox>
+                  </html:hbox>
                   <image id="cfr-button"
                          class="urlbar-icon urlbar-page-action"
                          role="presentation"/>
-                </hbox>
-                <hbox id="userContext-icons" hidden="true">
+                </html:hbox>
+                <html:hbox id="userContext-icons" hidden="true">
                   <label id="userContext-label"/>
                   <image id="userContext-indicator"/>
-                </hbox>
+                </html:hbox>
                 <image id="reader-mode-button"
                        class="urlbar-icon urlbar-page-action"
                        tooltip="dynamic-shortcut-tooltip"
                        role="button"
                        hidden="true"
                        onclick="ReaderParent.buttonClick(event);"/>
                 <toolbarbutton id="urlbar-zoom-button"
                        onclick="FullZoom.reset();"
@@ -977,43 +977,43 @@
                        hidden="true"/>
                 <box id="pageActionSeparator" class="urlbar-page-action"/>
                 <image id="pageActionButton"
                        class="urlbar-icon urlbar-page-action"
                        role="button"
                        tooltiptext="&pageActionButton.tooltip;"
                        onmousedown="BrowserPageActions.mainButtonClicked(event);"
                        onkeypress="BrowserPageActions.mainButtonClicked(event);"/>
-                <hbox id="pocket-button-box"
+                <html:hbox id="pocket-button-box"
                       hidden="true"
                       class="urlbar-icon-wrapper urlbar-page-action"
                       onclick="BrowserPageActions.doCommandForAction(PageActions.actionForID('pocket'), event, this);">
                   <image id="pocket-button"
                          class="urlbar-icon"
                          tooltiptext="&pocketButton.tooltiptext;"
                          role="button"/>
-                  <hbox id="pocket-button-animatable-box">
+                  <html:hbox id="pocket-button-animatable-box">
                     <image id="pocket-button-animatable-image"
                            tooltiptext="&pocketButton.tooltiptext;"
                            role="presentation"/>
-                  </hbox>
-                </hbox>
-                <hbox id="star-button-box"
+                  </html:hbox>
+                </html:hbox>
+                <html:hbox id="star-button-box"
                       hidden="true"
                       class="urlbar-icon-wrapper urlbar-page-action"
                       onclick="BrowserPageActions.doCommandForAction(PageActions.actionForID('bookmark'), event, this);">
                   <image id="star-button"
                          class="urlbar-icon"
                          role="button"/>
-                  <hbox id="star-button-animatable-box">
+                  <html:hbox id="star-button-animatable-box">
                     <image id="star-button-animatable-image"
                            role="presentation"/>
-                  </hbox>
-                </hbox>
-              </hbox>
+                  </html:hbox>
+                </html:hbox>
+              </html:hbox>
             </textbox>
             <toolbartabstop/>
         </toolbaritem>
 
         <toolbarspring cui-areatype="toolbar" class="chromeclass-toolbar-additional"/>
 
         <!-- This is a placeholder for the Downloads Indicator.  It is visible
              during the customization of the toolbar, in the palette, and before
@@ -1061,21 +1061,21 @@
                        onmousedown="gSync.toggleAccountPanel('PanelUI-fxa', event)"
                        onkeypress="gSync.toggleAccountPanel('PanelUI-fxa', event)"
                        consumeanchor="fxa-toolbar-menu-button"
                        closemenu="none"
                        label="&fxa.menu.firefoxAccount;"
                        tooltiptext="&fxa.menu.firefoxAccount;"
                        cui-areatype="toolbar"
                        removable="true">
-                       <vbox>
+                       <html:vbox>
                         <image id="fxa-avatar-image"/>
-                       </vbox>
+                       </html:vbox>
         </toolbarbutton>
-      </hbox>
+      </html:hbox>
 
       <toolbarbutton id="nav-bar-overflow-button"
                      class="toolbarbutton-1 chromeclass-toolbar-additional overflow-button"
                      skipintoolbarset="true"
                      tooltiptext="&navbarOverflow.label;">
         <box class="toolbarbutton-animatable-box">
           <image class="toolbarbutton-animatable-image"/>
         </box>
@@ -1086,17 +1086,17 @@
         <toolbarbutton id="PanelUI-menu-button"
                        class="toolbarbutton-1"
                        badged="true"
                        consumeanchor="PanelUI-button"
                        label="&brandShortName;"
                        tooltiptext="&appmenu.tooltip;"/>
       </toolbaritem>
 
-      <hbox id="window-controls" hidden="true" pack="end" skipintoolbarset="true"
+      <html:hbox id="window-controls" hidden="true" pack="end" skipintoolbarset="true"
             ordinal="1000">
         <toolbarbutton id="minimize-button"
                        tooltiptext="&fullScreenMinimize.tooltip;"
                        oncommand="window.minimize();"/>
 
         <toolbarbutton id="restore-button"
 #ifdef XP_MACOSX
 # Prior to 10.7 there wasn't a native fullscreen button so we use #restore-button
@@ -1104,17 +1104,17 @@
                        class="toolbarbutton-1"
 #endif
                        tooltiptext="&fullScreenRestore.tooltip;"
                        oncommand="BrowserFullScreen();"/>
 
         <toolbarbutton id="close-button"
                        tooltiptext="&fullScreenClose.tooltip;"
                        oncommand="BrowserTryToCloseWindow();"/>
-      </hbox>
+      </html:hbox>
 
       <box id="library-animatable-box" class="toolbarbutton-animatable-box">
         <image class="toolbarbutton-animatable-image"/>
       </box>
     </toolbar>
 
     <toolbar id="PersonalToolbar"
              mode="icons"
@@ -1131,48 +1131,48 @@
         <toolbarbutton id="bookmarks-toolbar-placeholder"
                        class="bookmark-item"
                        label="&bookmarksToolbarItem.label;"/>
         <toolbarbutton id="bookmarks-toolbar-button"
                        class="toolbarbutton-1"
                        flex="1"
                        label="&bookmarksToolbarItem.label;"
                        oncommand="PlacesToolbarHelper.onPlaceholderCommand();"/>
-        <hbox flex="1"
+        <html:hbox flex="1"
               id="PlacesToolbar"
               context="placesContext"
               onmouseup="BookmarksEventHandler.onMouseUp(event);"
               onclick="BookmarksEventHandler.onClick(event, this._placesView);"
               oncommand="BookmarksEventHandler.onCommand(event);"
               tooltip="bhTooltip"
               popupsinherittooltip="true">
-          <hbox flex="1">
-            <hbox id="PlacesToolbarDropIndicatorHolder" align="center" collapsed="true">
+          <html:hbox flex="1">
+            <html:hbox id="PlacesToolbarDropIndicatorHolder" align="center" collapsed="true">
               <image id="PlacesToolbarDropIndicator"
                      mousethrough="always"
                      collapsed="true"/>
-            </hbox>
+            </html:hbox>
             <scrollbox orient="horizontal"
                        id="PlacesToolbarItems"
                        flex="1"/>
             <toolbarbutton type="menu"
                            id="PlacesChevron"
                            class="toolbarbutton-1"
                            mousethrough="never"
                            collapsed="true"
                            tooltiptext="&bookmarksToolbarChevron.tooltip;"
                            onpopupshowing="document.getElementById('PlacesToolbar')
                                                    ._placesView._onChevronPopupShowing(event);">
               <menupopup id="PlacesChevronPopup"
                          placespopup="true"
                          tooltip="bhTooltip" popupsinherittooltip="true"
                          context="placesContext"/>
             </toolbarbutton>
-          </hbox>
-        </hbox>
+          </html:hbox>
+        </html:hbox>
       </toolbaritem>
     </toolbar>
 
     <toolbarpalette id="BrowserToolbarPalette">
 
       <toolbarbutton id="print-button" class="toolbarbutton-1 chromeclass-toolbar-additional"
 #ifdef XP_MACOSX
                      command="cmd_print"
@@ -1294,50 +1294,50 @@
                    persist="width">
         <toolbartabstop/>
         <searchbar id="searchbar" flex="1"/>
         <toolbartabstop/>
       </toolbaritem>
     </toolbarpalette>
   </toolbox>
 
-  <hbox id="fullscr-toggler" hidden="true"/>
+  <html:hbox id="fullscr-toggler" hidden="true"/>
 
-  <hbox flex="1" id="browser" renderroot="content">
-    <vbox id="browser-border-start" hidden="true" layer="true"/>
-    <vbox id="sidebar-box" hidden="true" class="chromeclass-extrachrome">
+  <html:hbox flex="1" id="browser" renderroot="content">
+    <html:vbox id="browser-border-start" hidden="true" layer="true"/>
+    <html:vbox id="sidebar-box" hidden="true" class="chromeclass-extrachrome">
       <sidebarheader id="sidebar-header" align="center">
         <toolbarbutton id="sidebar-switcher-target" flex="1" class="tabbable">
           <image id="sidebar-icon" consumeanchor="sidebar-switcher-target"/>
           <label id="sidebar-title" crop="end" flex="1" control="sidebar"/>
           <image id="sidebar-switcher-arrow"/>
         </toolbarbutton>
         <image id="sidebar-throbber"/>
 # To ensure the button label's intrinsic width doesn't expand the sidebar
 # if the label is long, the button needs flex=1.
 # To ensure the button doesn't expand unnecessarily for short labels, the
 # spacer should significantly out-flex the button.
         <spacer flex="1000"/>
         <toolbarbutton id="sidebar-close" class="close-icon tabbable" tooltiptext="&sidebarCloseButton.tooltip;" oncommand="SidebarUI.hide();"/>
       </sidebarheader>
       <browser id="sidebar" flex="1" autoscroll="false" disablehistory="true" disablefullscreen="true"
                 style="min-width: 14em; width: 18em; max-width: 36em;" tooltip="aHTMLTooltip"/>
-    </vbox>
+    </html:vbox>
 
     <splitter id="sidebar-splitter" class="chromeclass-extrachrome sidebar-splitter" hidden="true"/>
-    <vbox id="appcontent" flex="1">
+    <html:vbox id="appcontent" flex="1">
       <!-- gHighPriorityNotificationBox will be added here lazily. -->
       <tabbox id="tabbrowser-tabbox"
               flex="1" tabcontainer="tabbrowser-tabs">
         <tabpanels id="tabbrowser-tabpanels"
                     flex="1" class="plain" selectedIndex="0"/>
       </tabbox>
-    </vbox>
-    <vbox id="browser-border-end" hidden="true" layer="true"/>
-  </hbox>
+    </html:vbox>
+    <html:vbox id="browser-border-end" hidden="true" layer="true"/>
+  </html:hbox>
 
   <box id="customization-container" flex="1" renderroot="content" hidden="true"><![CDATA[
 #include ../../components/customizableui/content/customizeMode.inc.xul
   ]]></box>
 
   <html:div id="fullscreen-warning" class="pointerlockfswarning" hidden="true" renderroot="content">
     <html:div class="pointerlockfswarning-domain-text">
       &fullscreenWarning.beforeDomain.label;
@@ -1363,12 +1363,12 @@
       <html:span class="pointerlockfswarning-domain"/>
       &pointerlockWarning.afterDomain.label;
     </html:div>
     <html:div class="pointerlockfswarning-generic-text">
       &pointerlockWarning.generic.label;
     </html:div>
   </html:div>
 
-  <vbox id="browser-bottombox" layer="true" renderroot="content">
+  <html:vbox id="browser-bottombox" layer="true" renderroot="content">
     <!-- gNotificationBox will be added here lazily. -->
-  </vbox>
+  </html:vbox>
 </window>
diff --git a/browser/base/content/pageinfo/permissions.js b/browser/base/content/pageinfo/permissions.js
--- a/browser/base/content/pageinfo/permissions.js
+++ b/browser/base/content/pageinfo/permissions.js
@@ -110,28 +110,28 @@ function createRow(aPartId) {
   let labelId = "perm-" + aPartId + "-label";
   let radiogroupId = aPartId + "RadioGroup";
 
   let command = document.createXULElement("command");
   command.setAttribute("id", commandId);
   command.setAttribute("oncommand", "onRadioClick('" + aPartId + "');");
   document.getElementById("pageInfoCommandSet").appendChild(command);
 
-  let row = document.createXULElement("vbox");
+  let row = document.createElement("vbox");
   row.setAttribute("id", rowId);
   row.setAttribute("class", "permission");
 
   let label = document.createXULElement("label");
   label.setAttribute("id", labelId);
   label.setAttribute("control", radiogroupId);
   label.setAttribute("value", SitePermissions.getPermissionLabel(aPartId));
   label.setAttribute("class", "permissionLabel");
   row.appendChild(label);
 
-  let controls = document.createXULElement("hbox");
+  let controls = document.createElement("hbox");
   controls.setAttribute("role", "group");
   controls.setAttribute("aria-labelledby", labelId);
 
   let checkbox = document.createXULElement("checkbox");
   checkbox.setAttribute("id", aPartId + "Def");
   checkbox.setAttribute("oncommand", "onCheckboxClick('" + aPartId + "');");
   document.l10n.setAttributes(checkbox, "permissions-use-default");
   controls.appendChild(checkbox);
diff --git a/browser/base/content/tabbrowser.js b/browser/base/content/tabbrowser.js
--- a/browser/base/content/tabbrowser.js
+++ b/browser/base/content/tabbrowser.js
@@ -251,17 +251,17 @@ window._gBrowser = {
   },
 
   get popupAnchor() {
     if (this.selectedTab._popupAnchor) {
       return this.selectedTab._popupAnchor;
     }
     let stack = this.selectedBrowser.parentNode;
     // Create an anchor for the popup
-    let popupAnchor = document.createXULElement("hbox");
+    let popupAnchor = document.createElement("hbox");
     popupAnchor.className = "popup-anchor";
     popupAnchor.hidden = true;
     stack.appendChild(popupAnchor);
     return this.selectedTab._popupAnchor = popupAnchor;
   },
 
   set selectedTab(val) {
     if (gNavToolbox.collapsed && !this._allowTabChange) {
@@ -1938,23 +1938,23 @@ window._gBrowser = {
     // flex=0 it can't. When the toolbox is on the bottom it's a sibling of
     // browserStack, and when it's on the side it's a sibling of
     // browserContainer.
     let stack = document.createXULElement("stack");
     stack.className = "browserStack";
     stack.appendChild(b);
     stack.setAttribute("flex", "10000");
 
-    let browserContainer = document.createXULElement("vbox");
+    let browserContainer = document.createElement("vbox");
     browserContainer.className = "browserContainer";
     browserContainer.appendChild(notificationbox);
     browserContainer.appendChild(stack);
     browserContainer.setAttribute("flex", "10000");
 
-    let browserSidebarContainer = document.createXULElement("hbox");
+    let browserSidebarContainer = document.createElement("hbox");
     browserSidebarContainer.className = "browserSidebarContainer";
     browserSidebarContainer.appendChild(browserContainer);
 
     // Prevent the superfluous initial load of a blank document
     // if we're going to load something other than about:blank.
     if (!uriIsAboutBlank) {
       b.setAttribute("nodefaultsrc", "true");
     }
diff --git a/browser/components/customizableui/CustomizableWidgets.jsm b/browser/components/customizableui/CustomizableWidgets.jsm
--- a/browser/components/customizableui/CustomizableWidgets.jsm
+++ b/browser/components/customizableui/CustomizableWidgets.jsm
@@ -136,17 +136,17 @@ const CustomizableWidgets = [
       let utils = RecentlyClosedTabsAndWindowsMenuUtils;
       let method = `get${viewType}Fragment`;
       let fragment = utils[method](window, "toolbarbutton", true);
       let elementCount = fragment.childElementCount;
       this._panelMenuView._setEmptyPopupStatus(panelview, !elementCount);
       if (!elementCount)
         return;
 
-      let body = document.createXULElement("vbox");
+      let body = document.createElement("vbox");
       body.className = "panel-subview-body";
       body.appendChild(fragment);
       let footer;
       while (--elementCount >= 0) {
         let element = body.children[elementCount];
         CustomizableUI.addShortcut(element);
         element.classList.add("subviewbutton");
         if (element.classList.contains("restoreallitem")) {
diff --git a/browser/components/downloads/DownloadsSubview.jsm b/browser/components/downloads/DownloadsSubview.jsm
--- a/browser/components/downloads/DownloadsSubview.jsm
+++ b/browser/components/downloads/DownloadsSubview.jsm
@@ -107,17 +107,17 @@ class DownloadsSubview extends Downloads
 
   /**
    * DataView handler; invoked when a new download is added to the list.
    *
    * @param {Download} download
    * @param {DOMNode}  [options.insertBefore]
    */
   onDownloadAdded(download, { insertBefore } = {}) {
-    let element = this.document.createXULElement("hbox");
+    let element = this.document.createElement("hbox");
     let shell = new DownloadsSubview.Button(download, element);
     this._viewItemsForDownloads.set(download, shell);
 
     // Since newest downloads are displayed at the top, either prepend the new
     // element or insert it after the one indicated by the insertBefore option.
     if (insertBefore) {
       this._viewItemsForDownloads.get(insertBefore)
           .element.insertAdjacentElement("afterend", element);
diff --git a/browser/components/newtab/lib/CFRPageActions.jsm b/browser/components/newtab/lib/CFRPageActions.jsm
--- a/browser/components/newtab/lib/CFRPageActions.jsm
+++ b/browser/components/newtab/lib/CFRPageActions.jsm
@@ -392,17 +392,17 @@ class PageAction {
         RecommendationMap.delete(browser);
       };
       panelTitle = await this.getStrings(content.heading_text);
 
       if (stepsContainer) { // If it exists we need to empty it
         stepsContainer.remove();
         stepsContainer = stepsContainer.cloneNode(false);
       } else {
-        stepsContainer = this.window.document.createXULElement("vbox");
+        stepsContainer = this.window.document.createElement("vbox");
         stepsContainer.setAttribute("id", stepsContainerId);
       }
       footerText.parentNode.appendChild(stepsContainer);
       for (let step of content.descriptionDetails.steps) {
         // This li is a generic xul element with custom styling
         const li = this.window.document.createXULElement("li");
         this._l10n.setAttributes(li, step.string_id);
         stepsContainer.appendChild(li);
diff --git a/browser/extensions/formautofill/FormAutofillDoorhanger.jsm b/browser/extensions/formautofill/FormAutofillDoorhanger.jsm
--- a/browser/extensions/formautofill/FormAutofillDoorhanger.jsm
+++ b/browser/extensions/formautofill/FormAutofillDoorhanger.jsm
@@ -255,17 +255,17 @@ let FormAutofillDoorhanger = {
   _appendDescription(content, descriptionLabel, descriptionIcon) {
     let chromeDoc = content.ownerDocument;
     let docFragment = chromeDoc.createDocumentFragment();
 
     let descriptionLabelElement = chromeDoc.createXULElement("label");
     descriptionLabelElement.setAttribute("value", descriptionLabel);
     docFragment.appendChild(descriptionLabelElement);
 
-    let descriptionWrapper = chromeDoc.createXULElement("hbox");
+    let descriptionWrapper = chromeDoc.createElement("hbox");
     descriptionWrapper.className = "desc-message-box";
 
     if (descriptionIcon) {
       let descriptionIconElement = chromeDoc.createXULElement("image");
       descriptionWrapper.appendChild(descriptionIconElement);
     }
 
     let descriptionElement = chromeDoc.createXULElement("description");
diff --git a/browser/extensions/formautofill/FormAutofillPreferences.jsm b/browser/extensions/formautofill/FormAutofillPreferences.jsm
--- a/browser/extensions/formautofill/FormAutofillPreferences.jsm
+++ b/browser/extensions/formautofill/FormAutofillPreferences.jsm
@@ -69,25 +69,25 @@ FormAutofillPreferences.prototype = {
    *
    * @param  {XULDocument} document
    */
   createPreferenceGroup(document) {
     let learnMoreURL = Services.urlFormatter.formatURLPref("app.support.baseURL") + "autofill-card-address";
     let formAutofillFragment = document.createDocumentFragment();
     let formAutofillGroupBoxLabel = document.createXULElement("label");
     let formAutofillGroupBoxLabelHeading = document.createElementNS(HTML_NS, "h2");
-    let formAutofillGroup = document.createXULElement("vbox");
-    let addressAutofill = document.createXULElement("hbox");
-    let addressAutofillCheckboxGroup = document.createXULElement("hbox");
+    let formAutofillGroup = document.createElement("vbox");
+    let addressAutofill = document.createElement("hbox");
+    let addressAutofillCheckboxGroup = document.createElement("hbox");
     let addressAutofillCheckbox = document.createXULElement("checkbox");
     let addressAutofillLearnMore = document.createXULElement("label", {is: "text-link"});
     let savedAddressesBtn = document.createXULElement("button", {is: "highlightable-button"});
     // Wrappers are used to properly compute the search tooltip positions
-    let savedAddressesBtnWrapper = document.createXULElement("hbox");
-    let savedCreditCardsBtnWrapper = document.createXULElement("hbox");
+    let savedAddressesBtnWrapper = document.createElement("hbox");
+    let savedCreditCardsBtnWrapper = document.createElement("hbox");
 
     savedAddressesBtn.className = "accessory-button";
     addressAutofillCheckbox.className = "tail-with-learn-more";
     addressAutofillLearnMore.className = "learnMore";
 
     formAutofillGroup.id = "formAutofillGroup";
     addressAutofill.id = "addressAutofill";
     addressAutofillLearnMore.id = "addressAutofillLearnMore";
@@ -129,18 +129,18 @@ FormAutofillPreferences.prototype = {
     this.refs = {
       formAutofillFragment,
       formAutofillGroup,
       addressAutofillCheckbox,
       savedAddressesBtn,
     };
 
     if (FormAutofill.isAutofillCreditCardsAvailable) {
-      let creditCardAutofill = document.createXULElement("hbox");
-      let creditCardAutofillCheckboxGroup = document.createXULElement("hbox");
+      let creditCardAutofill = document.createElement("hbox");
+      let creditCardAutofillCheckboxGroup = document.createElement("hbox");
       let creditCardAutofillCheckbox = document.createXULElement("checkbox");
       let creditCardAutofillLearnMore = document.createXULElement("label", {is: "text-link"});
       let savedCreditCardsBtn = document.createXULElement("button", {is: "highlightable-button"});
       savedCreditCardsBtn.className = "accessory-button";
       creditCardAutofillCheckbox.className = "tail-with-learn-more";
       creditCardAutofillLearnMore.className = "learnMore";
 
       creditCardAutofill.id = "creditCardAutofill";
diff --git a/toolkit/content/xul.css b/toolkit/content/xul.css
--- a/toolkit/content/xul.css
+++ b/toolkit/content/xul.css
@@ -30,16 +30,83 @@
   -moz-control-character-visibility: visible;
   --animation-easing-function: cubic-bezier(.07, .95, 0, 1);
 }
 
 :root:-moz-locale-dir(rtl) {
   direction: rtl;
 }
 
+/* Copied from minimal-xul */
+html|hbox,
+html|vbox {
+  -moz-user-focus: ignore;
+  -moz-user-select: none;
+  display: -moz-box;
+  box-sizing: border-box;
+}
+
+/* hide the content and destroy the frame */
+html|hbox[hidden="true"],
+html|vbox[hidden="true"] {
+  display: none;
+}
+
+/* hide the content, but don't destroy the frames */
+html|hbox[collapsed="true"],
+html|vbox[collapsed="true"] {
+  visibility: collapse;
+}
+
+html|vbox {
+  -moz-box-orient: vertical;
+}
+
+/* Support common XUL attributes in the emulated flex mode so we can
+    test the browser in this configuration without mass-changing existing
+    markup and CSS. */
+window html|*[orient="vertical"] { -moz-box-orient: vertical; }
+window html|*[orient="horizontal"] { -moz-box-orient: horizontal; }
+window html|*[align="start"] { -moz-box-align: start; }
+window html|*[align="center"] { -moz-box-align: center; }
+window html|*[align="end"] { -moz-box-align: end; }
+window html|*[align="baseline"] { -moz-box-align: baseline; }
+window html|*[align="stretch"] { -moz-box-align: stretch; }
+window html|*[pack="start"] { -moz-box-pack: start; }
+window html|*[pack="center"] { -moz-box-pack: center; }
+window html|*[pack="end"] { -moz-box-pack: end; }
+
+/* This isn't a real solution for [flex] and [ordinal], but it covers enough
+    cases to render the browser chrome. If we get attr() in Bug 435426 this could
+    work for all cases. */
+window html|*[flex="1"] { -moz-box-flex: 1; }
+window html|*[flex="2"] { -moz-box-flex: 2; }
+window html|*[flex="3"] { -moz-box-flex: 3; }
+window html|*[flex="4"] { -moz-box-flex: 4; }
+window html|*[flex="5"] { -moz-box-flex: 5; }
+window html|*[flex="6"] { -moz-box-flex: 6; }
+window html|*[flex="7"] { -moz-box-flex: 7; }
+window html|*[flex="8"] { -moz-box-flex: 8; }
+window html|*[flex="9"] { -moz-box-flex: 9; }
+window html|*[flex="100"] { -moz-box-flex: 100; }
+window html|*[flex="400"] { -moz-box-flex: 400; }
+window html|*[flex="1000"] { -moz-box-flex: 1000; }
+window html|*[flex="10000"] { -moz-box-flex: 10000; }
+
+window html|*[ordinal="1"] { -moz-box-ordinal-group: 1; }
+window html|*[ordinal="2"] { -moz-box-ordinal-group: 2; }
+window html|*[ordinal="3"] { -moz-box-ordinal-group: 3; }
+window html|*[ordinal="4"] { -moz-box-ordinal-group: 4; }
+window html|*[ordinal="5"] { -moz-box-ordinal-group: 5; }
+window html|*[ordinal="6"] { -moz-box-ordinal-group: 6; }
+window html|*[ordinal="7"] { -moz-box-ordinal-group: 7; }
+window html|*[ordinal="8"] { -moz-box-ordinal-group: 8; }
+window html|*[ordinal="9"] { -moz-box-ordinal-group: 9; }
+window html|*[ordinal="1000"] { -moz-box-ordinal-group: 1000; }
+
 /* ::::::::::
    :: Rules for 'hiding' portions of the chrome for special
    :: kinds of windows (not JUST browser windows) with toolbars
    ::::: */
 
 window[chromehidden~="menubar"] .chromeclass-menubar,
 window[chromehidden~="directories"] .chromeclass-directories,
 window[chromehidden~="status"] .chromeclass-status,
diff --git a/toolkit/themes/linux/global/global.css b/toolkit/themes/linux/global/global.css
--- a/toolkit/themes/linux/global/global.css
+++ b/toolkit/themes/linux/global/global.css
@@ -5,17 +5,17 @@
 /* ===== global.css =====================================================
   == Styles that apply everywhere.
   ======================================================================= */
 
 /* all localizable skin settings shall live here */
 @import url("chrome://global/locale/intl.css");
 @import url("chrome://global/content/widgets.css");
 
-@namespace url("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul");
+@namespace xul url("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul");
 @namespace html url("http://www.w3.org/1999/xhtml");
 
 %include ../../shared/global.inc.css
 
 /* ::::: XBL bindings ::::: */
 
 @media (-moz-menubar-drag) {
   toolbar[type="menubar"] {
@@ -67,40 +67,40 @@ wizard {
 }
 
 .authentication-icon {
   list-style-image: url("chrome://global/skin/icons/Authentication.png");
 }
 
 /* ::::: iframe ::::: */
 
-iframe {
+xul|iframe {
   border: none;
   width: 100px;
   height: 100px;
   min-width: 10px;
   min-height: 10px;
 }
 
 @supports -moz-bool-pref("layout.css.emulate-moz-box-with-flex") {
   /* In emulation, <iframe> is block instead of inline, so reset the width/height */
-  iframe {
+  xul|iframe {
     width: auto;
     height: auto;
   }
 }
 
 /* XXXBlake yeah, shoot me -- these don't belong here.  I'll move them later. */
 
 sidebarheader {
   min-height: 25px;
   text-shadow: none;
 }
 
-sidebarheader > label {
+sidebarheader > xul|label {
   padding-inline-start: 4px;
 }
 
 toolbar[mode="text"] .toolbarbutton-text {
   padding: 0 !important;
   margin: 3px 5px !important;
 }
 
@@ -172,29 +172,29 @@ separator.groove[orient="vertical"] {
   border-left: 1px solid ThreeDShadow;
   border-right: 1px solid ThreeDHighlight;
   width: 0;
   margin-left: 0.4em;
   margin-right: 0.4em;
 }
 
 description,
-label {
+xul|label {
   cursor: default;
   margin-top: 1px;
   margin-bottom: 2px;
   margin-inline-start: 6px;
   margin-inline-end: 5px;
 }
 
 description {
   margin-bottom: 4px;
 }
 
-label[disabled="true"] {
+xul|label[disabled="true"] {
   color: GrayText;
 }
 
 .tooltip-label {
   margin: 0;
 }
 
 .header {
diff --git a/toolkit/themes/osx/global/global.css b/toolkit/themes/osx/global/global.css
--- a/toolkit/themes/osx/global/global.css
+++ b/toolkit/themes/osx/global/global.css
@@ -2,17 +2,17 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 /* all localizable skin settings shall live here */
 @import url("chrome://global/locale/intl.css");
 @import url("chrome://global/content/widgets.css");
 
 %include shared.inc
-@namespace url("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul");
+@namespace xul url("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul");
 @namespace html url("http://www.w3.org/1999/xhtml");
 
 %include ../../shared/global.inc.css
 
 /* ::::: Variables ::::: */
 :root {
   --arrowpanel-padding: 16px;
   --default-arrowpanel-background: #fff;
@@ -65,27 +65,27 @@ wizard {
 }
 
 .question-icon {
   list-style-image: url("chrome://global/skin/icons/question-64.png");
 }
 
 /* ::::: iframe ::::: */
 
-iframe {
+xul|iframe {
   border: none;
   width: 100px;
   height: 100px;
   min-width: 10px;
   min-height: 10px;
 }
 
 @supports -moz-bool-pref("layout.css.emulate-moz-box-with-flex") {
   /* In emulation, <iframe> is block instead of inline, so reset the width/height */
-  iframe {
+  xul|iframe {
     width: auto;
     height: auto;
   }
 }
 
 /* ::::: miscellaneous formatting ::::: */
 
 sidebarheader {
@@ -129,29 +129,29 @@ separator.groove:not([orient="vertical"]
 separator.groove[orient="vertical"] {
   border-left: 1px solid #A3A3A3;
   width: 0;
   margin-left: 0.4em;
   margin-right: 0.4em;
 }
 
 description,
-label {
+xul|label {
   cursor: default;
   margin-top: 1px;
   margin-bottom: 2px;
   margin-inline-start: 6px;
   margin-inline-end: 5px;
 }
 
 description {
   margin-bottom: 4px;
 }
 
-label[disabled="true"] {
+xul|label[disabled="true"] {
   color: GrayText;
 }
 
 .tooltip-label {
   margin: 0;
 }
 
 .header {
@@ -174,45 +174,45 @@ label[disabled="true"] {
 .text-link:hover {
   text-decoration: underline;
 }
 
 .text-link:-moz-focusring {
   box-shadow: var(--focus-ring-box-shadow);
 }
 
-notification > hbox > button {
+notification > hbox > xul|button {
   margin: 0 3px;
   padding: 1px 10px;
   min-width: 60px;
   min-height: 16px;
   -moz-appearance: none;
   border-radius: 10000px;
   border: @roundButtonBorderWidth@ @roundButtonBorderStyle@ @roundButtonBorderColor@;
   text-shadow: @loweredShadow@;
   color: @roundButtonColor@;
   background: @roundButtonBackgroundImage@;
   box-shadow: @roundButtonShadow@;
 }
 
-notification > hbox > button:active:hover {
+notification > hbox > xul|button:active:hover {
   color: @roundButtonColor@;
   background: @roundButtonPressedBackgroundImage@;
   box-shadow: @roundButtonPressedShadow@;
 }
 
-notification > hbox > button:-moz-focusring {
+notification > hbox > xul|button:-moz-focusring {
   box-shadow: var(--focus-ring-box-shadow), @roundButtonShadow@;
 }
 
-notification > hbox > button:active:hover:-moz-focusring {
+notification > hbox > xul|button:active:hover:-moz-focusring {
   box-shadow: var(--focus-ring-box-shadow), @roundButtonPressedShadow@;
 }
 
-notification > hbox > button > .button-box > .button-text {
+notification > hbox > xul|button > .button-box > .button-text {
   margin: 0 !important;
 }
 
 popupnotificationcontent {
   margin-top: .5em;
 }
 
 %include ../../shared/notification-popup.inc.css
diff --git a/toolkit/themes/shared/global.inc.css b/toolkit/themes/shared/global.inc.css
--- a/toolkit/themes/shared/global.inc.css
+++ b/toolkit/themes/shared/global.inc.css
@@ -63,53 +63,53 @@ html|textarea {
 }
 
 /* Panel footers */
 
 .panel-footer {
   background-color: var(--arrowpanel-dimmed);
 }
 
-.panel-footer > button {
+.panel-footer > xul|button {
   -moz-appearance: none;
   border-top: 1px solid var(--panel-separator-color);
   /* !important overrides :hover and :active colors from button.css: */
   color: inherit !important;
   min-width: 0;
   margin: 0;
   padding: .9em 2px;
 }
 
-.panel-footer > button[disabled] {
+.panel-footer > xul|button[disabled] {
   color: var(--panel-disabled-color) !important;
 }
 
-.panel-footer > button:-moz-focusring {
+.panel-footer > xul|button:-moz-focusring {
   outline: 1px dotted;
   outline-offset: -3px;
 }
 
-.panel-footer > button:not([disabled]):hover {
+.panel-footer > xul|button:not([disabled]):hover {
   background-color: var(--arrowpanel-dimmed);
 }
 
-.panel-footer > button:not([disabled]):hover:active,
-.panel-footer > button:not([disabled])[open] {
+.panel-footer > xul|button:not([disabled]):hover:active,
+.panel-footer > xul|button:not([disabled])[open] {
   background-color: var(--arrowpanel-dimmed-further);
   box-shadow: 0 1px 0 hsla(210,4%,10%,.05) inset;
 }
 
-.panel-footer > button:not([disabled])[default] {
+.panel-footer > xul|button:not([disabled])[default] {
   color: white !important;
   background-color: #0060df;
 }
 
-.panel-footer > button:not([disabled])[default]:hover {
+.panel-footer > xul|button:not([disabled])[default]:hover {
   background-color: #003eaa;
 }
 
-.panel-footer > button:not([disabled])[default]:hover:active {
+.panel-footer > xul|button:not([disabled])[default]:hover:active {
   background-color: #002275;
 }
 
-.panel-footer > button > .button-box {
+.panel-footer > xul|button > .button-box {
   padding: 0;
 }
diff --git a/toolkit/themes/windows/global/global.css b/toolkit/themes/windows/global/global.css
--- a/toolkit/themes/windows/global/global.css
+++ b/toolkit/themes/windows/global/global.css
@@ -5,17 +5,17 @@
 /* ===== global.css =====================================================
   == Styles that apply everywhere.
   ======================================================================= */
 
 /* all localizable skin settings shall live here */
 @import url("chrome://global/locale/intl.css");
 @import url("chrome://global/content/widgets.css");
 
-@namespace url("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul");
+@namespace xul url("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul");
 @namespace html url("http://www.w3.org/1999/xhtml");
 
 %include ../../shared/global.inc.css
 
 /* ::::: Variables ::::: */
 :root {
   --arrowpanel-padding: 10px;
   --default-arrowpanel-background: -moz-field;
@@ -70,40 +70,40 @@ wizard {
 }
 
 .question-icon {
   list-style-image: url("chrome://global/skin/icons/help.svg");
 }
 
 /* ::::: iframe ::::: */
 
-iframe {
+xul|iframe {
   border: none;
   width: 100px;
   height: 100px;
   min-width: 10px;
   min-height: 10px;
 }
 
 @supports -moz-bool-pref("layout.css.emulate-moz-box-with-flex") {
   /* In emulation, <iframe> is block instead of inline, so reset the width/height */
-  iframe {
+  xul|iframe {
     width: auto;
     height: auto;
   }
 }
 
 /* XXXBlake yeah, shoot me -- these don't belong here.  I'll move them later. */
 
 sidebarheader {
   min-height: 25px;
   text-shadow: none;
 }
 
-sidebarheader > label {
+sidebarheader > xul|label {
   padding-inline-start: 4px;
 }
 
 toolbar[mode="text"] .toolbarbutton-text {
   padding: 0 !important;
   margin: 3px 5px !important;
 }
 
@@ -174,34 +174,34 @@ separator.groove[orient="vertical"] {
   border-left: 1px solid ThreeDShadow;
   border-right: 1px solid ThreeDHighlight;
   width: 0;
   margin-left: 0.4em;
   margin-right: 0.4em;
 }
 
 description,
-label {
+xul|label {
   cursor: default;
   margin-top: 1px;
   margin-bottom: 2px;
   margin-inline-start: 6px;
   margin-inline-end: 5px;
 }
 
 description {
   margin-bottom: 4px;
 }
 
-label[disabled="true"] {
+xul|label[disabled="true"] {
   color: GrayText;
 }
 
 @media (-moz-windows-classic) {
-  label[disabled="true"] {
+  xul|label[disabled="true"] {
     color: ThreeDShadow;
     text-shadow: 1px 1px ThreeDHighlight;
   }
 }
 
 .tooltip-label {
   margin: 0;
 }

