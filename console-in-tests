# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  db2aca5464d48837e8fb72388b35b026d306e478
console commands not showing up in tests

diff --git a/browser/base/content/test/general/browser_trackingUI.js b/browser/base/content/test/general/browser_trackingUI.js
--- a/browser/base/content/test/general/browser_trackingUI.js
+++ b/browser/base/content/test/general/browser_trackingUI.js
@@ -65,28 +65,26 @@ function* testTrackingPage(gTestBrowser)
   isnot(notification, null, "Tracking Content Doorhanger did appear when protection was ON and tracking was present");
   notification.reshow();
 
   // Wait for the method to be attached after showing the popup
   yield promiseWaitForCondition(() => {
     return PopupNotifications.panel.firstChild.disableTrackingContentProtection;
   });
 
-
   // Make sure the state of the doorhanger includes blocking tracking elements
   is(PopupNotifications.panel.firstChild.isTrackingContentBlocked,
      Ci.nsIWebProgressListener.STATE_BLOCKED_TRACKING_CONTENT,
      "Tracking Content is being blocked");
 
   // Make sure the notification has no trackingblockdisabled attribute
   ok(!PopupNotifications.panel.firstChild.hasAttribute("trackingblockdisabled"),
     "Doorhanger must have no trackingblockdisabled attribute");
 
-
-console.log("HERE", PopupNotifications.panel.firstChild, PopupNotifications.panel);
+  console.log("HI BRIAN 2");
   // Disable Tracking Content Protection for the page (which reloads the page)
   PopupNotifications.panel.firstChild.disableTrackingContentProtection();
 }
 
 function testTrackingPageWhitelisted(gTestBrowser)
 {
   // Make sure the doorhanger appears
   var notification = PopupNotifications.getNotification("bad-content", gTestBrowser);
diff --git a/browser/base/content/test/general/head.js b/browser/base/content/test/general/head.js
--- a/browser/base/content/test/general/head.js
+++ b/browser/base/content/test/general/head.js
@@ -1,10 +1,10 @@
 Components.utils.import("resource://gre/modules/XPCOMUtils.jsm");
-const {console} = Components.utils.import("resource://gre/modules/devtools/Console.jsm", {});
+// const {console} = Components.utils.import("resource://gre/modules/devtools/Console.jsm", {});
 
 XPCOMUtils.defineLazyModuleGetter(this, "Promise",
   "resource://gre/modules/Promise.jsm");
 XPCOMUtils.defineLazyModuleGetter(this, "Task",
   "resource://gre/modules/Task.jsm");
 XPCOMUtils.defineLazyModuleGetter(this, "PlacesUtils",
   "resource://gre/modules/PlacesUtils.jsm");
 XPCOMUtils.defineLazyModuleGetter(this, "PlacesTestUtils",
diff --git a/testing/mochitest/browser-test.js b/testing/mochitest/browser-test.js
--- a/testing/mochitest/browser-test.js
+++ b/testing/mochitest/browser-test.js
@@ -11,16 +11,17 @@ if (Ci === undefined) {
 }
 if (Cu === undefined) {
   var Cu = Components.utils;
 }
 
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 Cu.import("resource://gre/modules/Task.jsm");
 Cu.import("resource://gre/modules/AppConstants.jsm");
+const {console} = Components.utils.import("resource://gre/modules/devtools/Console.jsm", {});
 
 XPCOMUtils.defineLazyModuleGetter(this, "Services",
   "resource://gre/modules/Services.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "CustomizationTabPreloader",
   "resource:///modules/CustomizationTabPreloader.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "ContentSearch",
@@ -389,27 +390,31 @@ Tester.prototype = {
     }
     this.openedWindows[innerID] = this.currentTest;
 
     let url = aWindow.location.href || "about:blank";
     this.openedURLs[outerID] = this.openedURLs[innerID] = url;
   },
 
   onConsoleMessage: function Tester_onConsoleMessage(aConsoleMessage) {
+    debugger;
+    this.dumper.dump("TEST-INFO: HI BRIAN \n\n\n\n");
+
     // Ignore empty messages.
     if (!aConsoleMessage.message)
       return;
 
     try {
       var msg = "Console message: " + aConsoleMessage.message;
       if (this.currentTest)
         this.currentTest.addResult(new testMessage(msg));
-      else
-        this.dumper.dump("TEST-INFO | (browser-test.js) | " + msg.replace(/\n$/, "") + "\n");
+
+      this.dumper.dump("TEST-INFO | (browser-test.js) | console.log | " + msg.replace(/\n$/, "") + "\n");
     } catch (ex) {
+      // this.dumper.dump("Caught " + ex + "\n");
       // Swallow exception so we don't lead to another error being reported,
       // throwing us into an infinite loop
     }
   },
 
   nextTest: Task.async(function*() {
     if (this.currentTest) {
       this.Promise.Debugging.flushUncaughtErrors();
