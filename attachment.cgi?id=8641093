# HG changeset patch
# User Panos Astithas <past@mozilla.com>

Enable Tracking Protection by default in Private Browsing Mode (bug 1175606). r=ttaubert

diff --git a/browser/components/privatebrowsing/content/aboutPrivateBrowsing.js b/browser/components/privatebrowsing/content/aboutPrivateBrowsing.js
index 0d18d59..b88ada0 100644
--- a/browser/components/privatebrowsing/content/aboutPrivateBrowsing.js
+++ b/browser/components/privatebrowsing/content/aboutPrivateBrowsing.js
@@ -6,23 +6,16 @@ const {classes: Cc, interfaces: Ci, utils: Cu} = Components;
 
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource://gre/modules/PrivateBrowsingUtils.jsm");
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 
 let stringBundle = Services.strings.createBundle(
                      "chrome://browser/locale/aboutPrivateBrowsing.properties");
 
-let useTour = false;
-try {
-  useTour = Services.prefs.getBoolPref("privacy.trackingprotection.ui.enabled");
-} catch (ex) {
-  // The preference is not available.
-}
-
 if (!PrivateBrowsingUtils.isContentWindowPrivate(window)) {
   document.title = stringBundle.GetStringFromName("title.normal");
   setFavIcon("chrome://global/skin/icons/question-16.png");
 } else {
   document.title = stringBundle.GetStringFromName("title");
   setFavIcon("chrome://browser/skin/Privacy-16.png");
 }
 
@@ -52,19 +45,16 @@ function setFavIcon(url) {
 document.addEventListener("DOMContentLoaded", function () {
   let formatURLPref = Cc["@mozilla.org/toolkit/URLFormatterService;1"]
                         .getService(Ci.nsIURLFormatter).formatURLPref;
   let learnMoreURL = formatURLPref("app.support.baseURL") + "private-browsing";
 
   if (!PrivateBrowsingUtils.isContentWindowPrivate(window)) {
     // Normal browsing window.
     document.body.setAttribute("class", "normal");
-  } else if (!useTour) {
-    // Private browsing window, classic version.
-    document.getElementById("learnMore").setAttribute("href", learnMoreURL);
   } else {
     // Private browsing window, Tracking Protection tour version.
     document.body.setAttribute("class", "tour");
     let tourURL = formatURLPref("privacy.trackingprotection.introURL");
     document.getElementById("startTour").setAttribute("href", tourURL);
     document.getElementById("tourLearnMore").setAttribute("href", learnMoreURL);
     // Update state that depends on preferences.
     prefObserver.observe();
diff --git a/browser/components/privatebrowsing/test/browser/browser.ini b/browser/components/privatebrowsing/test/browser/browser.ini
index 4004c62..11834c8 100644
--- a/browser/components/privatebrowsing/test/browser/browser.ini
+++ b/browser/components/privatebrowsing/test/browser/browser.ini
@@ -12,16 +12,17 @@ support-files =
   browser_privatebrowsing_protocolhandler_page.html
   browser_privatebrowsing_windowtitle_page.html
   head.js
   popup.html
   title.sjs
 
 [browser_privatebrowsing_DownloadLastDirWithCPS.js]
 [browser_privatebrowsing_about.js]
+tags = trackingprotection
 [browser_privatebrowsing_aboutHomeButtonAfterWindowClose.js]
 [browser_privatebrowsing_aboutSessionRestore.js]
 [browser_privatebrowsing_cache.js]
 [browser_privatebrowsing_certexceptionsui.js]
 [browser_privatebrowsing_concurrent.js]
 [browser_privatebrowsing_cookieacceptdialog.js]
 [browser_privatebrowsing_crh.js]
 [browser_privatebrowsing_downloadLastDir.js]
diff --git a/browser/components/privatebrowsing/test/browser/browser_privatebrowsing_about.js b/browser/components/privatebrowsing/test/browser/browser_privatebrowsing_about.js
index d9568c1..f74741e 100644
--- a/browser/components/privatebrowsing/test/browser/browser_privatebrowsing_about.js
+++ b/browser/components/privatebrowsing/test/browser/browser_privatebrowsing_about.js
@@ -37,50 +37,26 @@ function* testLinkOpensUrl({ win, tab, elementId, expectedUrl }) {
     content.document.getElementById(elementId).click();
   });
   yield loadedPromise;
   is(tab.currentURI.spec, expectedUrl,
      `Clicking ${elementId} opened ${expectedUrl} in the same tab.`);
 }
 
 /**
- * Tests the Learn More action in the classic "about:privatebrowsing" window.
- */
-add_task(function* test_classicActions() {
-  // Use classic version and change the remote URL to prevent network access.
-  Services.prefs.setBoolPref("privacy.trackingprotection.ui.enabled", false);
-  Services.prefs.setCharPref("app.support.baseURL", "https://example.com/");
-  registerCleanupFunction(function () {
-    Services.prefs.clearUserPref("app.support.baseURL");
-    Services.prefs.clearUserPref("privacy.trackingprotection.ui.enabled");
-  });
-
-  let { win, tab } = yield openAboutPrivateBrowsing();
-
-  yield testLinkOpensTab({ win, tab,
-    elementId: "learnMore",
-    expectedUrl: "https://example.com/private-browsing",
-  });
-
-  yield BrowserTestUtils.closeWindow(win);
-});
-
-/**
  * Tests the Tracking Protection tour actions in "about:privatebrowsing".
  */
 add_task(function* test_tourActions() {
   // Use tour version and change the remote URLs to prevent network access.
-  Services.prefs.setBoolPref("privacy.trackingprotection.ui.enabled", true);
   Services.prefs.setCharPref("app.support.baseURL", "https://example.com/");
   Services.prefs.setCharPref("privacy.trackingprotection.introURL",
                              "https://example.com/tour");
   registerCleanupFunction(function () {
     Services.prefs.clearUserPref("privacy.trackingprotection.introURL");
     Services.prefs.clearUserPref("app.support.baseURL");
-    Services.prefs.clearUserPref("privacy.trackingprotection.ui.enabled");
   });
 
   let { win, tab } = yield openAboutPrivateBrowsing();
 
   yield testLinkOpensTab({ win, tab,
     elementId: "showPreferences",
     expectedUrl: "about:preferences#privacy",
   });
@@ -99,22 +75,20 @@ add_task(function* test_tourActions() {
 });
 
 /**
  * Tests the action to re-enable Tracking Protection in "about:privatebrowsing"
  * when it has been disabled from the preferences.
  */
 add_task(function* test_enableTrackingProtection() {
   // Use tour version but disable Tracking Protection.
-  Services.prefs.setBoolPref("privacy.trackingprotection.ui.enabled", true);
   Services.prefs.setBoolPref("privacy.trackingprotection.pbmode.enabled",
                              false);
   registerCleanupFunction(function () {
     Services.prefs.clearUserPref("privacy.trackingprotection.pbmode.enabled");
-    Services.prefs.clearUserPref("privacy.trackingprotection.ui.enabled");
   });
 
   let { win, tab } = yield openAboutPrivateBrowsing();
 
   // Set up the observer for the preference change before triggering the action.
   let prefBranch =
       Services.prefs.getBranch("privacy.trackingprotection.pbmode.");
   let promisePrefChanged = new Promise(resolve => {
diff --git a/modules/libpref/init/all.js b/modules/libpref/init/all.js
index a130766..514e691 100644
--- a/modules/libpref/init/all.js
+++ b/modules/libpref/init/all.js
@@ -1082,17 +1082,17 @@ pref("content.sink.pending_event_mode", 0);
 //   2 = openAbused
 pref("privacy.popups.disable_from_plugins", 2);
 
 // send "do not track" HTTP header, disabled by default
 pref("privacy.donottrackheader.enabled",    false);
 // Enforce tracking protection in all modes
 pref("privacy.trackingprotection.enabled",  false);
 // Enforce tracking protection in Private Browsing mode
-pref("privacy.trackingprotection.pbmode.enabled",  false);
+pref("privacy.trackingprotection.pbmode.enabled",  true);
 
 pref("dom.event.contextmenu.enabled",       true);
 pref("dom.event.clipboardevents.enabled",   true);
 #if defined(XP_WIN) && !defined(RELEASE_BUILD)
 pref("dom.event.highrestimestamp.enabled",  true);
 #else
 pref("dom.event.highrestimestamp.enabled",  false);
 #endif
