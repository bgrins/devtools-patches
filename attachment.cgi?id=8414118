# HG changeset patch
# Parent bef43b38d6ae2baa0f18c9da53f27b9b9a6ed0b3
# User Willian Gustavo Veiga <contact@willianveiga.com>
Bug 992947 - Add "Open Link In New Tab" item to stylesheet list. r=bgrins

diff --git a/browser/devtools/styleeditor/StyleEditorUI.jsm b/browser/devtools/styleeditor/StyleEditorUI.jsm
--- a/browser/devtools/styleeditor/StyleEditorUI.jsm
+++ b/browser/devtools/styleeditor/StyleEditorUI.jsm
@@ -61,16 +61,18 @@ function StyleEditorUI(debuggee, target,
   this.selectedEditor = null;
   this.savedLocations = {};
 
   this._updateSourcesLabel = this._updateSourcesLabel.bind(this);
   this._onStyleSheetCreated = this._onStyleSheetCreated.bind(this);
   this._onNewDocument = this._onNewDocument.bind(this);
   this._clear = this._clear.bind(this);
   this._onError = this._onError.bind(this);
+  this._updateOpenLinkItem = this._updateOpenLinkItem.bind(this);
+  this._openLinkNewTab = this._openLinkNewTab.bind(this);
 
   this._prefObserver = new PrefObserver("devtools.styleeditor.");
   this._prefObserver.on(PREF_ORIG_SOURCES, this._onNewDocument);
 }
 
 StyleEditorUI.prototype = {
   /**
    * Get whether any of the editors have unsaved changes.
@@ -131,23 +133,34 @@ StyleEditorUI.prototype = {
     wire(this._view.rootElement, ".style-editor-newButton", function onNew() {
       this._debuggee.addStyleSheet(null).then(this._onStyleSheetCreated);
     }.bind(this));
 
     wire(this._view.rootElement, ".style-editor-importButton", function onImport() {
       this._importFromFile(this._mockImportFile || null, this._window);
     }.bind(this));
 
+    this._panelDoc.addEventListener("contextmenu", () => {
+      this._contextMenuStyleSheet = null;
+    }, true);
+
     this._contextMenu = this._panelDoc.getElementById("sidebar-context");
     this._contextMenu.addEventListener("popupshowing",
                                        this._updateSourcesLabel);
 
+    this._contextMenu.addEventListener("popupshowing",
+                                       this._updateOpenLinkItem);
+
     this._sourcesItem = this._panelDoc.getElementById("context-origsources");
     this._sourcesItem.addEventListener("command",
                                        this._toggleOrigSources);
+
+    this._openLinkNewTabItem = this._panelDoc.getElementById("context-openlinknewtab");
+    this._openLinkNewTabItem.addEventListener("command",
+                                              this._openLinkNewTab);
   },
 
   /**
    * Update text of context menu option to reflect whether we're showing
    * original sources (e.g. Sass files) or not.
    */
   _updateSourcesLabel: function() {
     let string = "showOriginalSources";
@@ -335,24 +348,45 @@ StyleEditorUI.prototype = {
    * @param  {string} message
    *         The full error message
    */
   _onError: function(event, errorCode, message) {
     this.emit("error", errorCode, message);
   },
 
   /**
-   *  Toggle the original sources pref.
+   * Toggle the original sources pref.
    */
   _toggleOrigSources: function() {
     let isEnabled = Services.prefs.getBoolPref(PREF_ORIG_SOURCES);
     Services.prefs.setBoolPref(PREF_ORIG_SOURCES, !isEnabled);
   },
 
   /**
+   * This method handles the following cases related to the context menu item "_openLinkNewTabItem":
+   *
+   * 1) There was a stylesheet clicked on and it is external: show and enable the context menu item
+   * 2) There was a stylesheet clicked on and it is inline: show and disable the context menu item
+   * 3) There was no stylesheet clicked on (the right click happened below the list): hide the context menu
+   */
+  _updateOpenLinkItem: function() {
+    this._openLinkNewTabItem.setAttribute("hidden", !this._contextMenuStyleSheet);
+    if (this._contextMenuStyleSheet) {
+      this._openLinkNewTabItem.setAttribute("disabled", !this._contextMenuStyleSheet.href);
+    }
+  },
+
+  /**
+   * Open a particular stylesheet in a new tab.
+   */
+  _openLinkNewTab: function() {
+    this._window.openLinkIn(this._contextMenuStyleSheet.href, "tab", {});
+  },
+
+  /**
    * Remove a particular stylesheet editor from the UI
    *
    * @param {StyleSheetEditor}  editor
    *        The editor to remove.
    */
   _removeStyleSheetEditor: function(editor) {
     if (editor.summary) {
       this._view.removeItem(editor.summary);
@@ -421,16 +455,20 @@ StyleEditorUI.prototype = {
           event.stopPropagation();
           event.target.blur();
 
           editor.saveToFile(editor.savedFile);
         });
 
         this._updateSummaryForEditor(editor, summary);
 
+        summary.addEventListener("contextmenu", (event) => {
+          this._contextMenuStyleSheet = editor.styleSheet;
+        }, false);
+
         summary.addEventListener("focus", function onSummaryFocus(event) {
           if (event.target == summary) {
             // autofocus the stylesheet name
             summary.querySelector(".stylesheet-name").focus();
           }
         }, false);
 
         Task.spawn(function* () {
diff --git a/browser/devtools/styleeditor/styleeditor.xul b/browser/devtools/styleeditor/styleeditor.xul
--- a/browser/devtools/styleeditor/styleeditor.xul
+++ b/browser/devtools/styleeditor/styleeditor.xul
@@ -21,16 +21,17 @@
 
 <xul:window xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
         xmlns="http://www.w3.org/1999/xhtml"
         id="style-editor-chrome-window">
 
   <script type="application/javascript;version=1.8"
           src="chrome://browser/content/devtools/theme-switching.js"/>
   <xul:script type="application/javascript" src="chrome://global/content/globalOverlay.js"/>
+  <xul:script type="application/javascript" src="chrome://browser/content/utilityOverlay.js"/>
   <xul:script type="application/javascript">
     function goUpdateSourceEditorMenuItems() {
       goUpdateGlobalEditMenuItems();
 
       ['cmd_undo', 'cmd_redo', 'cmd_cut', 'cmd_paste',
        'cmd_delete', 'cmd_find', 'cmd_findAgain'].forEach(goUpdateCommand);
     }
   </xul:script>
@@ -54,16 +55,18 @@
       <xul:menuitem id="se-menu-gotoLine"
           label="&gotoLineCmd.label;"
           accesskey="&gotoLineCmd.accesskey;"
           key="key_gotoLine"
           command="cmd_gotoLine"/>
     </xul:menupopup>
     <xul:menupopup id="sidebar-context">
       <xul:menuitem id="context-origsources"/>
+      <xul:menuitem id="context-openlinknewtab"
+        label="&openLinkNewTab.label;"/>
     </xul:menupopup>
   </xul:popupset>
 
   <xul:commandset id="editMenuCommands"/>
 
   <xul:commandset id="sourceEditorCommands">
     <xul:command id="cmd_gotoLine" oncommand="goDoCommand('cmd_gotoLine')"/>
     <xul:command id="cmd_find" oncommand="goDoCommand('cmd_find')"/>
diff --git a/browser/devtools/styleeditor/test/browser.ini b/browser/devtools/styleeditor/test/browser.ini
--- a/browser/devtools/styleeditor/test/browser.ini
+++ b/browser/devtools/styleeditor/test/browser.ini
@@ -42,16 +42,17 @@ skip-if = os == "linux" || "mac" # bug 9
 [browser_styleeditor_filesave.js]
 [browser_styleeditor_import.js]
 [browser_styleeditor_import_rule.js]
 [browser_styleeditor_init.js]
 [browser_styleeditor_inline_friendly_names.js]
 [browser_styleeditor_loading.js]
 [browser_styleeditor_new.js]
 [browser_styleeditor_nostyle.js]
+[browser_styleeditor_opentab.js]
 [browser_styleeditor_pretty.js]
 [browser_styleeditor_private_perwindowpb.js]
 [browser_styleeditor_reload.js]
 [browser_styleeditor_sv_keynav.js]
 [browser_styleeditor_sv_resize.js]
 [browser_styleeditor_selectstylesheet.js]
 [browser_styleeditor_sourcemaps.js]
 [browser_styleeditor_sourcemap_watching.js]
diff --git a/browser/devtools/styleeditor/test/browser_styleeditor_opentab.js b/browser/devtools/styleeditor/test/browser_styleeditor_opentab.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/styleeditor/test/browser_styleeditor_opentab.js
@@ -0,0 +1,85 @@
+/* vim: set ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+const TESTCASE_URI = TEST_BASE_HTTPS + "simple.html";
+
+let gUI;
+
+function test() {
+  waitForExplicitFinish();
+
+  addTabAndOpenStyleEditors(2, runTests);
+
+  content.location = TESTCASE_URI;
+}
+
+function runTests(panel) {
+  gUI = panel.UI;
+
+  rightClickStyleSheet(gUI.editors[0]).then(() => {
+    rightClickInlineStyleSheet(gUI.editors[1]).then(()=>{
+      finish();
+    });
+  });
+}
+
+function onPopupShow(contextMenu) {
+  let defer = promise.defer();
+  contextMenu.addEventListener("popupshown", function onpopupshown() {
+    contextMenu.removeEventListener("popupshown", onpopupshown);
+    defer.resolve();
+  });
+  return defer.promise;
+}
+function onPopupHide(contextMenu) {
+  let defer = promise.defer();
+  contextMenu.addEventListener("popuphidden", function popuphidden() {
+    contextMenu.removeEventListener("popuphidden", popuphidden);
+    defer.resolve();
+  });
+  return defer.promise;
+}
+
+function rightClickStyleSheet(aEditor) {
+  let defer = promise.defer();
+
+  onPopupShow(gUI._contextMenu).then(()=> {
+    onPopupHide(gUI._contextMenu).then(() => {
+      is(gUI._openLinkNewTabItem.getAttribute("disabled"), "false", "The menu item is not disabled");
+      is(gUI._openLinkNewTabItem.getAttribute("hidden"), "false", "The menu item is not hidden");
+      defer.resolve();
+    });
+    gUI._contextMenu.hidePopup();
+  });
+
+  EventUtils.synthesizeMouseAtCenter(
+    aEditor.summary.querySelector(".stylesheet-name"),
+    {button: 2, type: "contextmenu"},
+    gPanelWindow);
+
+  return defer.promise;
+}
+
+function rightClickInlineStyleSheet(aEditor) {
+  let defer = promise.defer();
+
+  onPopupShow(gUI._contextMenu).then(()=> {
+    onPopupHide(gUI._contextMenu).then(() => {
+      is(gUI._openLinkNewTabItem.getAttribute("disabled"), "true", "The menu item is disabled");
+      is(gUI._openLinkNewTabItem.getAttribute("hidden"), "false", "The menu item is not hidden");
+      defer.resolve();
+    });
+    gUI._contextMenu.hidePopup();
+  });
+
+  EventUtils.synthesizeMouseAtCenter(
+    aEditor.summary.querySelector(".stylesheet-name"),
+    {button: 2, type: "contextmenu"},
+    gPanelWindow);
+
+  return defer.promise;
+}
+
+registerCleanupFunction(function () {
+  gUI = null;
+});
diff --git a/browser/locales/en-US/chrome/browser/devtools/styleeditor.dtd b/browser/locales/en-US/chrome/browser/devtools/styleeditor.dtd
--- a/browser/locales/en-US/chrome/browser/devtools/styleeditor.dtd
+++ b/browser/locales/en-US/chrome/browser/devtools/styleeditor.dtd
@@ -34,8 +34,12 @@
      tip sentence shown when there is no stylesheet. It suggests to create a new
      stylesheet and provides an action link to do so. -->
 <!ENTITY noStyleSheet-tip-start.label  "Perhaps you'd like to ">
 <!-- LOCALICATION NOTE  (noStyleSheet-tip-action.label): This is text for the
      link that triggers creation of a new stylesheet. -->
 <!ENTITY noStyleSheet-tip-action.label "append a new style sheet">
 <!-- LOCALICATION NOTE  (noStyleSheet-tip-end.label): End of the tip sentence -->
 <!ENTITY noStyleSheet-tip-end.label    "?">
+
+<!-- LOCALIZATION NOTE (openLinkNewTab.label): This is the text for the
+     context menu item that opens a stylesheet in a new tab -->
+<!ENTITY openLinkNewTab.label     "Open Link In New Tab">
