# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  bfdf9fa527181a5be6dc88ce24b93433a5733fb9
Bug 1134845 - Add clearHistory jsterm helper to remove persisted console input history;r=past

diff --git a/browser/devtools/webconsole/webconsole.js b/browser/devtools/webconsole/webconsole.js
--- a/browser/devtools/webconsole/webconsole.js
+++ b/browser/devtools/webconsole/webconsole.js
@@ -3076,33 +3076,39 @@ function JSTerm(aWebConsoleFrame)
 
 JSTerm.prototype = {
   SELECTED_FRAME: -1,
 
   /**
    * Load the console history from previous sessions.
    */
   loadHistory: function() {
-    this.history = [];
-    this.historyIndex = this.historyPlaceHolder = 0;
-
     let historyFromStorage = SimpleStorage.webConsoleHistory;
     this.history =
       Array.isArray(historyFromStorage) ? historyFromStorage.slice() : [];
 
     // Holds the number of entries in history. This value is incremented in
     // this.execute().
     this.historyIndex = this.history.length;
 
     // Holds the index of the history entry that the user is currently viewing.
     // This is reset to this.history.length when this.execute() is invoked.
     this.historyPlaceHolder = this.history.length;
   },
 
   /**
+   * Clear the console history altogether.
+   */
+  clearHistory: function() {
+    this.history = [];
+    this.historyIndex = this.historyPlaceHolder = 0;
+    this.storeHistory();
+  },
+
+  /**
    * Stores the console history for future sessions.
    */
   storeHistory: function() {
     SimpleStorage.webConsoleHistory = this.history.slice();
   },
 
   /**
    * Stores the data for the last completion.
@@ -3289,16 +3295,19 @@ JSTerm.prototype = {
     let helperResult = aResponse.helperResult;
     let helperHasRawOutput = !!(helperResult || {}).rawOutput;
 
     if (helperResult && helperResult.type) {
       switch (helperResult.type) {
         case "clearOutput":
           this.clearOutput();
           break;
+        case "clearHistory":
+          this.clearHistory();
+          break;
         case "inspectObject":
           if (aAfterMessage) {
             if (!aAfterMessage._objectActors) {
               aAfterMessage._objectActors = new Set();
             }
             aAfterMessage._objectActors.add(helperResult.object.actor);
           }
           this.openVariablesView({
diff --git a/toolkit/devtools/webconsole/utils.js b/toolkit/devtools/webconsole/utils.js
--- a/toolkit/devtools/webconsole/utils.js
+++ b/toolkit/devtools/webconsole/utils.js
@@ -1592,16 +1592,26 @@ function JSTermHelpers(aOwner)
   aOwner.sandbox.clear = function JSTH_clear()
   {
     aOwner.helperResult = {
       type: "clearOutput",
     };
   };
 
   /**
+   * Clears the input history of the JSTerm.
+   */
+  aOwner.sandbox.clearHistory = function JSTH_clearHistory()
+  {
+    aOwner.helperResult = {
+      type: "clearHistory",
+    };
+  };
+
+  /**
    * Returns the result of Object.keys(aObject).
    *
    * @param object aObject
    *        Object to return the property names from.
    * @return array of strings
    */
   aOwner.sandbox.keys = function JSTH_keys(aObject)
   {
