# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1539108416 25200
#      Tue Oct 09 11:06:56 2018 -0700
# Node ID e428045372a9662a2463604c23bca4211829b745
# Parent  b2f1edb41241d3da6ded54edf38cca1d2d08325b
Bug 1495861 - WIP - Convert <radio> to a Custom Element

Differential Revision: https://phabricator.services.mozilla.com/D8121

diff --git a/toolkit/content/customElements.js b/toolkit/content/customElements.js
--- a/toolkit/content/customElements.js
+++ b/toolkit/content/customElements.js
@@ -504,29 +504,30 @@ customElements.setElementCreationCallbac
 const isDummyDocument = document.documentURI == "chrome://extensions/content/dummy.xul";
 if (!isDummyDocument) {
   for (let script of [
     "chrome://global/content/elements/general.js",
     "chrome://global/content/elements/checkbox.js",
     "chrome://global/content/elements/menu.js",
     "chrome://global/content/elements/notificationbox.js",
     "chrome://global/content/elements/popupnotification.js",
-    "chrome://global/content/elements/radio.js",
     "chrome://global/content/elements/richlistbox.js",
     "chrome://global/content/elements/autocomplete-popup.js",
     "chrome://global/content/elements/autocomplete-richlistitem.js",
     "chrome://global/content/elements/textbox.js",
     "chrome://global/content/elements/tabbox.js",
     "chrome://global/content/elements/tree.js",
     "chrome://global/content/elements/wizard.js",
   ]) {
     Services.scriptloader.loadSubScript(script, window);
   }
 
   for (let [tag, script] of [
+    ["radio", "chrome://global/content/elements/radio.js"],
+    ["radiogroup", "chrome://global/content/elements/radio.js"],
     ["findbar", "chrome://global/content/elements/findbar.js"],
     ["menulist", "chrome://global/content/elements/menulist.js"],
     ["stringbundle", "chrome://global/content/elements/stringbundle.js"],
     ["printpreview-toolbar", "chrome://global/content/printPreviewToolbar.js"],
     ["editor", "chrome://global/content/elements/editor.js"],
     ["text-link", "chrome://global/content/elements/text.js"],
   ]) {
     customElements.setElementCreationCallback(tag, () => {
diff --git a/toolkit/content/jar.mn b/toolkit/content/jar.mn
--- a/toolkit/content/jar.mn
+++ b/toolkit/content/jar.mn
@@ -66,17 +66,16 @@ toolkit.jar:
    content/global/bindings/calendar.js         (widgets/calendar.js)
    content/global/bindings/datekeeper.js       (widgets/datekeeper.js)
    content/global/bindings/datepicker.js       (widgets/datepicker.js)
    content/global/bindings/datetimebox.css     (widgets/datetimebox.css)
 *  content/global/bindings/dialog.xml          (widgets/dialog.xml)
    content/global/bindings/general.xml         (widgets/general.xml)
    content/global/bindings/menu.xml            (widgets/menu.xml)
    content/global/bindings/popup.xml           (widgets/popup.xml)
-   content/global/bindings/radio.xml           (widgets/radio.xml)
    content/global/bindings/richlistbox.xml     (widgets/richlistbox.xml)
    content/global/bindings/scrollbox.xml       (widgets/scrollbox.xml)
    content/global/bindings/spinner.js          (widgets/spinner.js)
    content/global/bindings/tabbox.xml          (widgets/tabbox.xml)
    content/global/bindings/text.xml            (widgets/text.xml)
    content/global/elements/text.js             (widgets/text.js)
 *  content/global/bindings/textbox.xml         (widgets/textbox.xml)
    content/global/bindings/timekeeper.js       (widgets/timekeeper.js)
diff --git a/toolkit/content/widgets/radio.js b/toolkit/content/widgets/radio.js
--- a/toolkit/content/widgets/radio.js
+++ b/toolkit/content/widgets/radio.js
@@ -1,20 +1,26 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
   * License, v. 2.0. If a copy of the MPL was not distributed with this
   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 // This is loaded into all XUL windows. Wrap in a block to prevent
 // leaking to window scope.
-{
+(() => {
+// Prevent re-entry since we could get loaded twice as a result of setElementCreationCallback
+if (customElements.get("radio")) {
+  return;
+}
+
 class MozRadiogroup extends MozElements.BaseControl {
   constructor() {
     super();
+    // console.log("<radiogroup> constructed", this);
 
     this.addEventListener("mousedown", (event) => {
       if (this.disabled)
         event.preventDefault();
     });
 
     /**
      * keyboard navigation  Here's how keyboard navigation works in radio groups on Windows:
@@ -117,42 +123,44 @@ class MozRadiogroup extends MozElements.
 
     this.init();
     if (!this.value) {
       this.selectedIndex = 0;
     }
   }
 
   init() {
+    // console.log("<radiogroup> init", this);
+
     this._radioChildren = null;
 
     if (this.getAttribute("disabled") == "true")
       this.disabled = true;
 
     var children = this._getRadioChildren();
+    // console.log("_getRadioChildren from init", this.id, children);
     var length = children.length;
     for (var i = 0; i < length; i++) {
       if (children[i].getAttribute("selected") == "true") {
         this.selectedIndex = i;
         return;
       }
     }
 
     var value = this.value;
+    // console.log("Got value", value, this);
     if (value)
       this.value = value;
   }
 
   /**
-   * Called when a new <radio> gets added and XBL construction happens on
-   * it. Sometimes the XBL construction happens after the <radiogroup> has
-   * already been added to the DOM. This can happen due to asynchronous XBL
-   * construction (see Bug 1496137), or just due to normal DOM appending after
-   * the <radiogroup> is created. When this happens, reinitialize the UI if
-   * necessary to make sure the state is consistent.
+   * Called when a new <radio> gets added to an already connected radiogroup.
+   * This can happen due to DOM getting appended after the <radiogroup> is created.
+   * When this happens, reinitialize the UI if necessary to make sure the state is
+   * consistent.
    *
    * @param {DOMNode} child
    *                  The <radio> element that got added
    */
   radioChildConstructed(child) {
     if (!this._radioChildren || !this._radioChildren.includes(child)) {
       this.init();
     }
@@ -386,11 +394,123 @@ class MozRadiogroup extends MozElements.
     return radio;
   }
 }
 
 MozXULElement.implementCustomInterface(MozRadiogroup, [
   Ci.nsIDOMXULSelectControlElement,
   Ci.nsIDOMXULRadioGroupElement,
 ]);
+customElements.define("radiogroup", MozRadiogroup);
 
-customElements.define("radiogroup", MozRadiogroup);
+let gRadioFrag = null;
+function getRadioFragment() {
+  if (!gRadioFrag) {
+    gRadioFrag = MozXULElement.parseXULToFragment(`
+    <image class="radio-check"></image>
+    <hbox class="radio-label-box" align="center" flex="1">
+      <image class="radio-icon"></image>
+      <label class="radio-label" flex="1"></label>
+    </hbox>
+    `);
+  }
+  return document.importNode(gRadioFrag, true);
 }
+
+class MozRadio extends MozElements.BaseText {
+  static get inheritedAttributes() {
+    return {
+      ".radio-check": "disabled,selected",
+      ".radio-label": "text=label,accesskey,crop",
+      ".radio-icon": "src",
+    };
+  }
+
+  constructor() {
+    super();
+    // console.log("<radio> constructed", this);
+
+    this.addEventListener("click", (event) => {
+      if (!this.disabled)
+        this.control.selectedItem = this;
+    });
+
+    this.addEventListener("mousedown", (event) => {
+      if (!this.disabled)
+        this.control.focusedItem = this;
+    });
+  }
+
+  connectedCallback() {
+    if (this.delayConnectedCallback()) {
+      return;
+    }
+
+    if (!this.connectedOnce) {
+      this.connectedOnce = true;
+      // If the user didn't provide custom content then append the default:
+      if (!this.firstElementChild) {
+        this.appendChild(getRadioFragment());
+        this.initializeAttributeInheritance();
+      }
+    }
+
+    var control = this.control;
+    if (control) {
+      control.radioChildConstructed(this);
+    }
+  }
+
+  disconnectedCallback() {
+    // console.log("<radio> disconnected", this, this.control);
+    if (!this.control)
+      return;
+
+    var radioList = this.control._radioChildren;
+    if (!radioList)
+      return;
+    for (var i = 0; i < radioList.length; ++i) {
+      if (radioList[i] == this) {
+        radioList.splice(i, 1);
+        return;
+      }
+    }
+  }
+
+  set value(val) {
+    this.setAttribute("value", val);
+    return val;
+  }
+
+  get value() {
+    return this.getAttribute("value");
+  }
+
+  get selected() {
+    return this.hasAttribute("selected");
+  }
+
+  get radioGroup() {
+    return this.control;
+  }
+
+  get control() {
+    var radiogroup = this.closest("radiogroup");
+    if (radiogroup) {
+      return radiogroup;
+    }
+
+    var group = this.getAttribute("group");
+    if (!group) {
+      return null;
+    }
+
+    var parent = this.ownerDocument.getElementById(group);
+    if (!parent || parent.localName != "radiogroup") {
+      parent = null;
+    }
+    return parent;
+  }
+}
+
+MozXULElement.implementCustomInterface(MozRadio, [Ci.nsIDOMXULSelectControlItemElement]);
+customElements.define("radio", MozRadio);
+})();
diff --git a/toolkit/content/xul.css b/toolkit/content/xul.css
--- a/toolkit/content/xul.css
+++ b/toolkit/content/xul.css
@@ -182,20 +182,16 @@ popupnotification {
 }
 
 /********** radio **********/
 
 radiogroup {
   -moz-box-orient: vertical;
 }
 
-radio {
-  -moz-binding: url("chrome://global/content/bindings/radio.xml#radio");
-}
-
 /******** groupbox *********/
 
 groupbox {
   -moz-box-orient: vertical;
 }
 
 /******** draggable elements *********/
 
