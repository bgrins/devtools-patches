# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  77bbeb3cc54ee2e57f85725a60b6a1129e3748f7
Bug 1417708 - Use an actual input[type=number] inside of the textbox[type=number] binding

diff --git a/toolkit/content/tests/chrome/test_textbox_number.xul b/toolkit/content/tests/chrome/test_textbox_number.xul
--- a/toolkit/content/tests/chrome/test_textbox_number.xul
+++ b/toolkit/content/tests/chrome/test_textbox_number.xul
@@ -53,17 +53,16 @@ function doTests() {
   testValsMinMax(n1, "initial n1", 0, 0, Infinity);
   testValsMinMax(n2, "initial n2", 10, 5, 15);
   testValsMinMax(n3, "initial n3", 12, 1, 12);
   testValsMinMax(n4, "initial n4", -2, -8, 18);
   testValsMinMax(n5, "initial n5", -10, -10, -3);
   testValsMinMax(n6, "initial n6", 12, 12, 12);
   testValsMinMax(n7, "initial n7", 4.68, 2, 10.5); // value should be rounded
 
-  ok(n1.spinButtons != null && n1.spinButtons.localName == "spinbuttons", "spinButtons set");
   isnot(n1.decimalSymbol, "", "n1.decimalSymbol is set to something");
   n1.decimalSymbol = ".";
   SimpleTest.is(n1.decimalSymbol, ".", "n1.decimalSymbol set to '.'");
   SimpleTest.is(n1.increment, 1, "increment defaults to 1");
   SimpleTest.is(n1.decimalPlaces, 0, "decimalPlaces defaults to 0");
 
   SimpleTest.is(n3.increment, 3, "increment when set to 1");
   SimpleTest.is(n7.decimalPlaces, 2, "decimalPlaces when set to 2");
@@ -122,16 +121,17 @@ function doTests() {
   testValsMinMax(n7, "set decimal min,", 6.7, 6.7, 10.5, "6.70");
 
   // test changing the max
   n1.value = 25;
   n1.max = 22;
   testValsMinMax(n1, "set integer max,", 22, 8, 22);
   n7.value = 10.2;
   n7.max = 10.1;
+  SimpleTest.is(n7.valueNumber, 10.1, "FOOOFFOOFOF");
   testValsMinMax(n7, "set decimal max,", 10.1, 6.7, 10.1, "10.10");
 
   // test decrease() and increase() methods
   testIncreaseDecrease(n1, "integer", 1, 0, 8, 22);
   testIncreaseDecrease(n7, "decimal", 1, 2, 6.7, 10.1);
   testIncreaseDecrease(n3, "integer with increment", 3, 0, 1, 12);
 
   n7.min = 2.7;
@@ -161,69 +161,33 @@ function doTests() {
   n1.decimalPlaces = 0;
 
   // UI tests
   n1.min = 5;
   n1.max = 15;
   n1.value = 5;
   n1.focus();
 
-  var sb = n1.spinButtons;
-  var sbbottom = sb.getBoundingClientRect().bottom - sb.getBoundingClientRect().top - 2;
-
   synthesizeKey("VK_UP", {});
   testVals(n1, "key up", 6);
 
   synthesizeKey("VK_DOWN", {});
   testVals(n1, "key down", 5);
 
-  synthesizeMouse(sb, 2, 2, {});
-  testVals(n1, "spinbuttons up", 6);
-  synthesizeMouse(sb, 2, sbbottom, {});
-  testVals(n1, "spinbuttons down", 5);
-
-  n1.value = 15;
-  synthesizeKey("VK_UP", {});
-  testVals(n1, "key up at max", 15);
-  synthesizeMouse(sb, 2, 2, {});
-  testVals(n1, "spinbuttons up at max", 15);
-
-  n1.value = 5;
-  synthesizeKey("VK_DOWN", {});
-  testVals(n1, "key down at min", 5);
-  synthesizeMouse(sb, 2, sbbottom, {});
-  testVals(n1, "spinbuttons down at min", 5);
-
   // check read only state
   n1.readOnly = true;
   n1.min = -10;
   n1.max = 15;
   n1.value = 12;
   // no events should fire and no changes should occur when the field is read only
-  synthesizeKeyExpectEvent("VK_UP", { }, n1, "!change", "key up read only");
+  synthesizeKeyExpectEvent("VK_UP", { }, n1.inputField, "!change", "key up read only");
   is(n1.value, "12", "key up read only value");
-  synthesizeKeyExpectEvent("VK_DOWN", { }, n1, "!change", "key down read only");
+  synthesizeKeyExpectEvent("VK_DOWN", { }, n1.inputField, "!change", "key down read only");
   is(n1.value, "12", "key down read only value");
 
-  synthesizeMouseExpectEvent(sb, 2, 2, { }, n1, "!change", "mouse up read only");
-  is(n1.value, "12", "mouse up read only value");
-  synthesizeMouseExpectEvent(sb, 2, sbbottom, { }, n1, "!change", "mouse down read only");
-  is(n1.value, "12", "mouse down read only value");
-
-  n1.readOnly = false;
-  n1.disabled = true;
-  synthesizeMouseExpectEvent(sb, 2, 2, { }, n1, "!change", "mouse up disabled");
-  is(n1.value, "12", "mouse up disabled value");
-  synthesizeMouseExpectEvent(sb, 2, sbbottom, { }, n1, "!change", "mouse down disabled");
-  is(n1.value, "12", "mouse down disabled value");
-
-  var nsbrect = $("n8").spinButtons.getBoundingClientRect();
-  ok(nsbrect.left == 0 && nsbrect.top == 0 && nsbrect.right == 0, nsbrect.bottom == 0,
-     "hidespinbuttons");
-
   var n9 = $("n9");
   is(n9.value, "0", "initial value");
   n9.select();
   synthesizeKey("4", {});
   is(inputEventCount, 1, "input event count");
   is(inputEventValue, "4", "input value");
   is(n9.value, "4", "updated value");
   synthesizeKey("2", {});
@@ -285,38 +249,25 @@ function testIncreaseDecrease(nb, testid
   nb.value = max;
   nb.increase();
   testVals(nb, testid + "increase method at max", max, max.toFixed(fixedCount));
 
   nb.focus();
   nb.value = min;
 
   // pressing the cursor up and down keys should adjust the value
-  synthesizeKeyExpectEvent("VK_UP", { }, nb, "change", testid + "key up");
+  synthesizeKeyExpectEvent("VK_UP", { }, nb.inputField, "change", testid + "key up");
   is(nb.value, String(min + increment), testid + "key up");
   nb.value = max;
-  synthesizeKeyExpectEvent("VK_UP", { }, nb, "!change", testid + "key up at max");
+  synthesizeKeyExpectEvent("VK_UP", { }, nb.inputField, "!change", testid + "key up at max");
   is(nb.value, String(max), testid + "key up at max");
-  synthesizeKeyExpectEvent("VK_DOWN", { }, nb, "change", testid + "key down");
+  synthesizeKeyExpectEvent("VK_DOWN", { }, nb.inputField, "change", testid + "key down");
   is(nb.value, String(max - increment), testid + "key down");
   nb.value = min;
-  synthesizeKeyExpectEvent("VK_DOWN", { }, nb, "!change", testid + "key down at min");
+  synthesizeKeyExpectEvent("VK_DOWN", { }, nb.inputField, "!change", testid + "key down at min");
   is(nb.value, String(min), testid + "key down at min");
-
-  // check pressing the spinbutton arrows
-  var sb = nb.spinButtons;
-  var sbbottom = sb.getBoundingClientRect().bottom - sb.getBoundingClientRect().top - 2;
-  nb.value = min;
-  synthesizeMouseExpectEvent(sb, 2, 2, { }, nb, "change", testid + "mouse up");
-  is(nb.value, String(min + increment), testid + "mouse up");
-  nb.value = max;
-  synthesizeMouseExpectEvent(sb, 2, 2, { }, nb, "!change", testid + "mouse up at max");
-  synthesizeMouseExpectEvent(sb, 2, sbbottom, { }, nb, "change", testid + "mouse down");
-  is(nb.value, String(max - increment), testid + "mouse down");
-  nb.value = min;
-  synthesizeMouseExpectEvent(sb, 2, sbbottom, { }, nb, "!change", testid + "mouse down at min");
 }
 
 SimpleTest.waitForFocus(doTests);
 
   ]]></script>
 
 </window>
diff --git a/toolkit/content/widgets/numberbox.xml b/toolkit/content/widgets/numberbox.xml
--- a/toolkit/content/widgets/numberbox.xml
+++ b/toolkit/content/widgets/numberbox.xml
@@ -14,38 +14,26 @@
            extends="chrome://global/content/bindings/textbox.xml#textbox">
 
     <resources>
       <stylesheet src="chrome://global/skin/numberbox.css"/>
     </resources>
 
     <content>
       <xul:hbox class="textbox-input-box numberbox-input-box" flex="1" xbl:inherits="context,disabled,focused">
-        <html:input class="numberbox-input textbox-input" anonid="input"
-                    xbl:inherits="value,maxlength,disabled,size,readonly,placeholder,tabindex,accesskey"/>
+        <html:input class="numberbox-input textbox-input" type="number" anonid="input"
+                    xbl:inherits="step=increment,min,max,value,maxlength,disabled,size,readonly,placeholder,tabindex,accesskey"/>
       </xul:hbox>
-      <xul:spinbuttons anonid="buttons" xbl:inherits="disabled,hidden=hidespinbuttons"/>
     </content>
 
     <implementation>
       <field name="_valueEntered">false</field>
-      <field name="_spinButtons">null</field>
       <field name="_value">0</field>
       <field name="decimalSymbol">"."</field>
 
-      <property name="spinButtons" readonly="true">
-        <getter>
-          <![CDATA[
-            if (!this._spinButtons)
-              this._spinButtons = document.getAnonymousElementByAttribute(this, "anonid", "buttons");
-            return this._spinButtons;
-          ]]>
-        </getter>
-      </property>
-
       <property name="value" onget="return '' + this.valueNumber"
                              onset="return this.valueNumber = val;"/>
 
       <property name="valueNumber">
         <getter>
           if (this._valueEntered) {
             var newval = this.inputField.value;
             newval = newval.replace(this.decimalSymbol, ".");
@@ -131,57 +119,16 @@
       </method>
 
       <method name="increase">
         <body>
           return this._validateValue(this.valueNumber + this.increment, true);
         </body>
       </method>
 
-      <method name="_modifyUp">
-        <body>
-          <![CDATA[
-            if (this.disabled || this.readOnly)
-              return;
-            var oldval = this.valueNumber;
-            var newval = this.increase();
-            this.inputField.select();
-            if (oldval != newval)
-              this._fireChange();
-          ]]>
-        </body>
-      </method>
-      <method name="_modifyDown">
-        <body>
-          <![CDATA[
-            if (this.disabled || this.readOnly)
-              return;
-            var oldval = this.valueNumber;
-            var newval = this.decrease();
-            this.inputField.select();
-            if (oldval != newval)
-              this._fireChange();
-          ]]>
-        </body>
-      </method>
-
-      <method name="_enableDisableButtons">
-        <body>
-          <![CDATA[
-            var buttons = this.spinButtons;
-            if (this.disabled || this.readOnly) {
-              buttons.decreaseDisabled = buttons.increaseDisabled = true;
-            } else {
-              buttons.decreaseDisabled = (this.valueNumber <= this.min);
-              buttons.increaseDisabled = (this.valueNumber >= this.max);
-            }
-          ]]>
-        </body>
-      </method>
-
       <method name="_validateValue">
         <parameter name="aValue"/>
         <parameter name="aIsIncDec"/>
         <body>
           <![CDATA[
             aValue = Number(aValue) || 0;
 
             var min = this.min;
@@ -193,18 +140,16 @@
 
             var places = this.decimalPlaces;
             aValue = (places == Infinity) ? "" + aValue : aValue.toFixed(places);
 
             this._valueEntered = false;
             this._value = Number(aValue);
             this.inputField.value = aValue.replace(/\./, this.decimalSymbol);
 
-            this._enableDisableButtons();
-
             return aValue;
           ]]>
         </body>
       </method>
 
       <method name="_fireChange">
         <body>
           var evt = document.createEvent("Events");
@@ -244,32 +189,16 @@
               return;
 
             if (event.charCode < 48 || event.charCode > 57)
               event.preventDefault();
           }
         ]]>
       </handler>
 
-      <handler event="keypress" keycode="VK_UP">
-        this._modifyUp();
-      </handler>
-
-      <handler event="keypress" keycode="VK_DOWN">
-        this._modifyDown();
-      </handler>
-
-      <handler event="up" preventdefault="true">
-        this._modifyUp();
-      </handler>
-
-      <handler event="down" preventdefault="true">
-        this._modifyDown();
-      </handler>
-
       <handler event="change">
         if (event.originalTarget == this.inputField) {
           var newval = this.inputField.value;
           newval = newval.replace(this.decimalSymbol, ".");
           this._validateValue(newval, false);
         }
       </handler>
     </handlers>
diff --git a/toolkit/content/widgets/textbox.xml b/toolkit/content/widgets/textbox.xml
--- a/toolkit/content/widgets/textbox.xml
+++ b/toolkit/content/widgets/textbox.xml
@@ -122,17 +122,20 @@
                                       onget="return this.inputField.selectionStart;"/>
       <property name="selectionEnd"   onset="this.inputField.selectionEnd = val; return val;"
                                       onget="return this.inputField.selectionEnd;"/>
 
       <method name="setSelectionRange">
         <parameter name="aSelectionStart"/>
         <parameter name="aSelectionEnd"/>
         <body>
-          this.inputField.setSelectionRange( aSelectionStart, aSelectionEnd );
+          // https://html.spec.whatwg.org/#do-not-apply
+          if (this.inputField.type === "text") {
+            this.inputField.setSelectionRange( aSelectionStart, aSelectionEnd );
+          }
         </body>
       </method>
 
       <method name="_setNewlineHandling">
         <body><![CDATA[
           var str = this.getAttribute("newlines");
           if (str && this.editor) {
             const nsIPlaintextEditor = Components.interfaces.nsIPlaintextEditor;
@@ -183,17 +186,20 @@
     </implementation>
 
     <handlers>
       <handler event="focus" phase="capturing">
         <![CDATA[
           if (this.hasAttribute("focused"))
             return;
 
-          switch (event.originalTarget) {
+          // Support focus events for input[type=number] where the originalTarget is an anonymous
+          // input inside the real input.
+          let originalTarget = event.originalTarget.closest("[anonid=input]") || event.originalTarget;
+          switch (originalTarget) {
             case this:
               // Forward focus to actual HTML input
               this.inputField.focus();
               break;
             case this.inputField:
               if (this.mIgnoreFocus) {
                 this.mIgnoreFocus = false;
               } else if (this.clickSelectsAll) {
@@ -224,17 +230,17 @@
       </handler>
 
       <handler event="mousedown">
         <![CDATA[
           this.mIgnoreClick = this.hasAttribute("focused");
 
           if (!this.mIgnoreClick) {
             this.mIgnoreFocus = true;
-            this.inputField.setSelectionRange(0, 0);
+            this.setSelectionRange(0, 0);
             if (event.originalTarget == this ||
                 event.originalTarget == this.inputField.parentNode)
               this.inputField.focus();
           }
         ]]>
       </handler>
 
       <handler event="click" action="this._maybeSelectAll();"/>
