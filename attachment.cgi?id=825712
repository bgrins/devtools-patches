# HG changeset patch
# User J. Ryan Stinnett <jryans@gmail.com>
# Date 1383275284 18000
#      Thu Oct 31 22:08:04 2013 -0500
# Node ID 06d9d9b0d9a26604afbeabea5133d15700a2856f
# Parent  82546b96471ce0ce1059f0488ae9f3415ee2e676
Bug 932880 - Fix window leaks in App Manager. r=paul

diff --git a/browser/devtools/app-manager/connection-store.js b/browser/devtools/app-manager/connection-store.js
--- a/browser/devtools/app-manager/connection-store.js
+++ b/browser/devtools/app-manager/connection-store.js
@@ -14,35 +14,38 @@ module.exports = ConnectionStore = funct
   // let's re-use the existing store.
   if (_knownConnectionStores.has(connection)) {
     return _knownConnectionStores.get(connection);
   }
   _knownConnectionStores.set(connection, this);
 
   ObservableObject.call(this, {status:null,host:null,port:null});
 
-  this._destroy = this._destroy.bind(this);
+  this.destroy = this.destroy.bind(this);
   this._feedStore = this._feedStore.bind(this);
 
   this._connection = connection;
-  this._connection.once(Connection.Events.DESTROYED, this._destroy);
+  this._connection.once(Connection.Events.DESTROYED, this.destroy);
   this._connection.on(Connection.Events.STATUS_CHANGED, this._feedStore);
   this._connection.on(Connection.Events.PORT_CHANGED, this._feedStore);
   this._connection.on(Connection.Events.HOST_CHANGED, this._feedStore);
   this._feedStore();
   return this;
 }
 
 ConnectionStore.prototype = {
-  _destroy: function() {
-    this._connection.off(Connection.Events.STATUS_CHANGED, this._feedStore);
-    this._connection.off(Connection.Events.PORT_CHANGED, this._feedStore);
-    this._connection.off(Connection.Events.HOST_CHANGED, this._feedStore);
-    _knownConnectionStores.delete(this._connection);
-    this._connection = null;
+  destroy: function() {
+    if (this._connection) {
+      this._connection.off(Connection.Events.DESTROYED, this.destroy);
+      this._connection.off(Connection.Events.STATUS_CHANGED, this._feedStore);
+      this._connection.off(Connection.Events.PORT_CHANGED, this._feedStore);
+      this._connection.off(Connection.Events.HOST_CHANGED, this._feedStore);
+      _knownConnectionStores.delete(this._connection);
+      this._connection = null;
+    }
   },
 
   _feedStore: function() {
     this.object.status = this._connection.status;
     this.object.host = this._connection.host;
     this.object.port = this._connection.port;
   }
 }
diff --git a/browser/devtools/app-manager/content/connection-footer.js b/browser/devtools/app-manager/content/connection-footer.js
--- a/browser/devtools/app-manager/content/connection-footer.js
+++ b/browser/devtools/app-manager/content/connection-footer.js
@@ -13,16 +13,21 @@ const {devtools} = Cu.import("resource:/
 const {require} = devtools;
 
 const {ConnectionManager, Connection} = require("devtools/client/connection-manager");
 const ConnectionStore = require("devtools/app-manager/connection-store");
 const DeviceStore = require("devtools/app-manager/device-store");
 const simulatorsStore = require("devtools/app-manager/simulators-store");
 const adbStore = require("devtools/app-manager/builtin-adb-store");
 
+window.addEventListener("unload", function onUnload() {
+  window.removeEventListener("unload", onUnload);
+  UI.destroy();
+});
+
 let UI = {
   init: function() {
     this.useFloatingScrollbarsIfNeeded();
     let connections = ConnectionManager.connections;
     if (connections.length > 0) {
       let hash = window.location.hash;
       if (hash) {
         let res = (/cid=([^&]+)/).exec(hash)
@@ -49,28 +54,37 @@ let UI = {
       "connection": new ConnectionStore(this.connection),
       "simulators": simulatorsStore,
       "adb": adbStore
     });
 
     let pre = document.querySelector("#logs > pre");
     pre.textContent = this.connection.logs;
     pre.scrollTop = pre.scrollTopMax;
-    this.connection.on(Connection.Events.NEW_LOG, (event, str) => {
-      pre.textContent += "\n" + str;
-      pre.scrollTop = pre.scrollTopMax;
-    });
+    this.connection.on(Connection.Events.NEW_LOG, this._onNewLog);
 
     this.template = new Template(document.body, this.store, Utils.l10n);
     this.template.start();
 
     this._onSimulatorConnected = this._onSimulatorConnected.bind(this);
     this._onSimulatorDisconnected = this._onSimulatorDisconnected.bind(this);
   },
 
+  destroy: function() {
+    this.store.destroy();
+    this.connection.off(Connection.Events.NEW_LOG, this._onNewLog);
+    this.template.destroy();
+  },
+
+  _onNewLog: function(event, str) {
+    let pre = document.querySelector("#logs > pre");
+    pre.textContent += "\n" + str;
+    pre.scrollTop = pre.scrollTopMax;
+  },
+
   useFloatingScrollbarsIfNeeded: function() {
     if (Services.appinfo.OS == "Darwin") {
       return;
     }
     let scrollbarsUrl = Services.io.newURI("chrome://browser/skin/devtools/floating-scrollbars-light.css", null, null);
     let winUtils = window.QueryInterface(Ci.nsIInterfaceRequestor).getInterface(Ci.nsIDOMWindowUtils);
     winUtils.loadSheet(scrollbarsUrl, winUtils.AGENT_SHEET);
     let computedStyle = window.getComputedStyle(document.documentElement);
diff --git a/browser/devtools/app-manager/content/device.js b/browser/devtools/app-manager/content/device.js
--- a/browser/devtools/app-manager/content/device.js
+++ b/browser/devtools/app-manager/content/device.js
@@ -27,30 +27,46 @@ window.addEventListener("message", funct
           UI.onNewConnection();
           break;
         }
       }
     }
   } catch(e) {
     Cu.reportError(e);
   }
-}, false);
+});
+
+window.addEventListener("unload", function onUnload() {
+  window.removeEventListener("unload", onUnload);
+  UI.destroy();
+});
 
 let UI = {
   init: function() {
     this.showFooterIfNeeded();
-    this._onConnectionStatusChange = this._onConnectionStatusChange.bind(this);
     this.setTab("apps");
     if (this.connection) {
       this.onNewConnection();
     } else {
       this.hide();
     }
   },
 
+  destroy: function() {
+    if (this.connection) {
+      this.connection.off(Connection.Events.STATUS_CHANGED, this._onConnectionStatusChange);
+    }
+    if (this.store) {
+      this.store.destroy();
+    }
+    if (this.template) {
+      this.template.destroy();
+    }
+  },
+
   showFooterIfNeeded: function() {
     let footer = document.querySelector("#connection-footer");
     if (window.parent == window) {
       // We're alone. Let's add a footer.
       footer.removeAttribute("hidden");
       footer.src = "chrome://browser/content/devtools/app-manager/connection-footer.xhtml";
     } else {
       footer.setAttribute("hidden", "true");
@@ -68,16 +84,19 @@ let UI = {
   onNewConnection: function() {
     this.connection.on(Connection.Events.STATUS_CHANGED, this._onConnectionStatusChange);
 
     this.store = Utils.mergeStores({
       "device": new DeviceStore(this.connection),
       "apps": new WebappsStore(this.connection),
     });
 
+    if (this.template) {
+      this.template.destroy();
+    }
     this.template = new Template(document.body, this.store, Utils.l10n);
 
     this.template.start();
     this._onConnectionStatusChange();
   },
 
   setWallpaper: function(dataurl) {
     document.getElementById("meta").style.backgroundImage = "url(" + dataurl + ")";
@@ -184,8 +203,12 @@ let UI = {
       }
       this.connection.client.request(request, (res) => {
         deferred.resolve()
       });
     }
     return deferred.promise;
   },
 }
+
+// This must be bound immediately, as it might be used via the message listener
+// before UI.init() has been called.
+UI._onConnectionStatusChange = UI._onConnectionStatusChange.bind(UI);
diff --git a/browser/devtools/app-manager/content/index.js b/browser/devtools/app-manager/content/index.js
--- a/browser/devtools/app-manager/content/index.js
+++ b/browser/devtools/app-manager/content/index.js
@@ -35,25 +35,37 @@ window.addEventListener("message", funct
 
   // Forward message
   let panels = document.querySelectorAll(".panel");
   for (let frame of panels) {
     frame.contentWindow.postMessage(event.data, "*");
   }
 }, false);
 
+window.addEventListener("unload", function onUnload() {
+  window.removeEventListener("unload", onUnload);
+  if (connection) {
+    connection.off(Connection.Status.CONNECTED, onConnected);
+    connection.off(Connection.Status.DISCONNECTED, onDisconnected);
+  }
+});
+
 function onNewConnection() {
-  connection.on(Connection.Status.CONNECTED, () => {
-    document.querySelector("#content").classList.add("connected");
-  });
-  connection.on(Connection.Status.DISCONNECTED, () => {
-    document.querySelector("#content").classList.remove("connected");
-  });
+  connection.on(Connection.Status.CONNECTED, onConnected);
+  connection.on(Connection.Status.DISCONNECTED, onDisconnected);
 }
 
+function onConnected() {
+  document.querySelector("#content").classList.add("connected");
+}
+
+function onDisconnected() {
+  document.querySelector("#content").classList.remove("connected");
+}
+
 function selectTab(id) {
   for (let type of ["button", "panel"]) {
     let oldSelection = document.querySelector("." + type + "[selected]");
     let newSelection = document.querySelector("." + id + "-" + type);
     if (oldSelection) oldSelection.removeAttribute("selected");
     if (newSelection) newSelection.setAttribute("selected", "true");
   }
   if (id != "help") {
diff --git a/browser/devtools/app-manager/content/projects.js b/browser/devtools/app-manager/content/projects.js
--- a/browser/devtools/app-manager/content/projects.js
+++ b/browser/devtools/app-manager/content/projects.js
@@ -30,17 +30,22 @@ window.addEventListener("message", funct
         if (c.uid == cid) {
           UI.connection = c;
           UI.onNewConnection();
           break;
         }
       }
     }
   } catch(e) {}
-}, false);
+});
+
+window.addEventListener("unload", function onUnload() {
+  window.removeEventListener("unload", onUnload);
+  UI.destroy();
+});
 
 let UI = {
   isReady: false,
 
   onload: function() {
     if (Services.prefs.getBoolPref(MANIFEST_EDITOR_ENABLED)) {
       document.querySelector("#lense").setAttribute("manifest-editable", "");
     }
@@ -50,18 +55,25 @@ let UI = {
 
     AppProjects.load().then(() => {
       AppProjects.store.object.projects.forEach(UI.validate);
       this.isReady = true;
       this.emit("ready");
     });
   },
 
+  destroy: function() {
+    if (this.connection) {
+      this.connection.off(Connection.Events.STATUS_CHANGED, this._onConnectionStatusChange);
+    }
+    this.template.destroy();
+  },
+
   onNewConnection: function() {
-    this.connection.on(Connection.Events.STATUS_CHANGED, () => this._onConnectionStatusChange());
+    this.connection.on(Connection.Events.STATUS_CHANGED, this._onConnectionStatusChange);
     this._onConnectionStatusChange();
   },
 
   _onConnectionStatusChange: function() {
     if (this.connection.status != Connection.Status.CONNECTED) {
       document.body.classList.remove("connected");
       this.listTabsResponse = null;
     } else {
@@ -422,9 +434,13 @@ let UI = {
 
   _showManifestEditor: function(project) {
     let editorContainer = document.querySelector("#lense .manifest-editor");
     this.manifestEditor = new ManifestEditor(project);
     return this.manifestEditor.show(editorContainer);
   }
 };
 
+// This must be bound immediately, as it might be used via the message listener
+// before UI.onload() has been called.
+UI._onConnectionStatusChange = UI._onConnectionStatusChange.bind(UI);
+
 EventEmitter.decorate(UI);
diff --git a/browser/devtools/app-manager/content/template.js b/browser/devtools/app-manager/content/template.js
--- a/browser/devtools/app-manager/content/template.js
+++ b/browser/devtools/app-manager/content/template.js
@@ -64,24 +64,31 @@ function Template(root, store, l10nResol
   // For example: "foo.bar.4.name" => Set(div1,div2)
 
   this._nodeListeners = new Map();
   this._loopListeners = new Map();
   this._forListeners = new Map();
   this._root = root;
   this._doc = this._root.ownerDocument;
 
-  this._store.on("set", (event,path,value) => this._storeChanged(path,value));
+  this._storeChanged = this._storeChanged.bind(this);
+  this._store.on("set", this._storeChanged);
 }
 
 Template.prototype = {
   start: function() {
     this._processTree(this._root);
   },
 
+  destroy: function() {
+    this._store.off("set", this._storeChanged);
+    this._root = null;
+    this._doc = null;
+  },
+
   _resolvePath: function(path, defaultValue=null) {
 
     // From the store, get the value of an object located
     // at @path.
     //
     // For example, if the store is designed as:
     //
     // {
@@ -105,17 +112,17 @@ Template.prototype = {
         obj = obj[word];
       } else {
         return defaultValue;
       }
     }
     return obj;
   },
 
-  _storeChanged: function(path, value) {
+  _storeChanged: function(event, path, value) {
 
     // The store has changed (a "set" event has been emitted).
     // We need to invalidate and rebuild the affected elements.
 
     let strpath = path.join(".");
     this._invalidate(strpath);
 
     for (let [registeredPath, set] of this._nodeListeners) {
diff --git a/browser/devtools/app-manager/content/utils.js b/browser/devtools/app-manager/content/utils.js
--- a/browser/devtools/app-manager/content/utils.js
+++ b/browser/devtools/app-manager/content/utils.js
@@ -14,29 +14,46 @@
 let Utils = (function() {
   const Cu = Components.utils;
   const {Services} = Cu.import("resource://gre/modules/Services.jsm", {});
   const {devtools} = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
   const {require} = devtools;
   const EventEmitter = require("devtools/shared/event-emitter");
 
 
-  function _forwardSetEvent(key, store, finalStore) {
-    store.on("set", function(event, path, value) {
+  function _createSetEventForwarder(key, finalStore) {
+    return function(event, path, value) {
       finalStore.emit("set", [key].concat(path), value);
-    });
+    };
   }
 
   function mergeStores(stores) {
     let finalStore = {object:{}};
+
     EventEmitter.decorate(finalStore);
+
+    let setEventForwarders = {};
+
     for (let key in stores) {
-      finalStore.object[key] = stores[key].object,
-      _forwardSetEvent(key, stores[key], finalStore);
+      let store = stores[key];
+      finalStore.object[key] = store.object;
+      setEventForwarders[key] = _createSetEventForwarder(key, finalStore);
+      store.on("set", setEventForwarders[key]);
     }
+
+    finalStore.destroy = () => {
+      for (let key in stores) {
+        let store = stores[key];
+        store.off("set", setEventForwarders[key]);
+        if (store.destroy) {
+          store.destroy();
+        }
+      }
+    };
+
     return finalStore;
   }
 
 
   let strings = Services.strings.createBundle("chrome://browser/locale/devtools/app-manager.properties");
 
   function l10n (property, args = []) {
     if (args && args.length > 0) {
diff --git a/browser/devtools/app-manager/device-store.js b/browser/devtools/app-manager/device-store.js
--- a/browser/devtools/app-manager/device-store.js
+++ b/browser/devtools/app-manager/device-store.js
@@ -20,31 +20,34 @@ module.exports = DeviceStore = function(
   }
 
   _knownDeviceStores.set(connection, this);
 
   ObservableObject.call(this, {});
 
   this._resetStore();
 
-  this._destroy = this._destroy.bind(this);
+  this.destroy = this.destroy.bind(this);
   this._onStatusChanged = this._onStatusChanged.bind(this);
 
   this._connection = connection;
-  this._connection.once(Connection.Events.DESTROYED, this._destroy);
+  this._connection.once(Connection.Events.DESTROYED, this.destroy);
   this._connection.on(Connection.Events.STATUS_CHANGED, this._onStatusChanged);
   this._onStatusChanged();
   return this;
 }
 
 DeviceStore.prototype = {
-  _destroy: function() {
-    this._connection.off(Connection.Events.STATUS_CHANGED, this._onStatusChanged);
-    _knownDeviceStores.delete(this._connection);
-    this._connection = null;
+  destroy: function() {
+    if (this._connection) {
+      this._connection.off(Connection.Events.DESTROYED, this.destroy);
+      this._connection.off(Connection.Events.STATUS_CHANGED, this._onStatusChanged);
+      _knownDeviceStores.delete(this._connection);
+      this._connection = null;
+    }
   },
 
   _resetStore: function() {
     this.object.description = {};
     this.object.permissions = [];
   },
 
   _onStatusChanged: function() {
diff --git a/browser/devtools/app-manager/test/head.js b/browser/devtools/app-manager/test/head.js
--- a/browser/devtools/app-manager/test/head.js
+++ b/browser/devtools/app-manager/test/head.js
@@ -96,28 +96,32 @@ function getManifestWindow() {
 }
 
 function waitForProjectsPanel(deferred = promise.defer()) {
   info("Wait for projects panel");
 
   let projectsWindow = getProjectsWindow();
   let projectsUI = projectsWindow.UI;
   if (!projectsUI) {
+    info("projectsUI false");
     projectsWindow.addEventListener("load", function onLoad() {
+      info("got load event");
       projectsWindow.removeEventListener("load", onLoad);
       waitForProjectsPanel(deferred);
     });
     return deferred.promise;
   }
 
   if (projectsUI.isReady) {
+    info("projectsUI ready");
     deferred.resolve();
     return deferred.promise;
   }
 
+  info("projectsUI not ready");
   projectsUI.once("ready", deferred.resolve);
   return deferred.promise;
 }
 
 function selectProjectsPanel() {
   return Task.spawn(function() {
     let projectsButton = content.document.querySelector(".projects-button");
     EventUtils.sendMouseEvent({ type: "click" }, projectsButton, content);
diff --git a/browser/devtools/app-manager/webapps-store.js b/browser/devtools/app-manager/webapps-store.js
--- a/browser/devtools/app-manager/webapps-store.js
+++ b/browser/devtools/app-manager/webapps-store.js
@@ -20,32 +20,35 @@ module.exports = WebappsStore = function
   }
 
   _knownWebappsStores.set(connection, this);
 
   ObservableObject.call(this, {});
 
   this._resetStore();
 
-  this._destroy = this._destroy.bind(this);
+  this.destroy = this.destroy.bind(this);
   this._onStatusChanged = this._onStatusChanged.bind(this);
 
   this._connection = connection;
-  this._connection.once(Connection.Events.DESTROYED, this._destroy);
+  this._connection.once(Connection.Events.DESTROYED, this.destroy);
   this._connection.on(Connection.Events.STATUS_CHANGED, this._onStatusChanged);
   this._onStatusChanged();
   return this;
 }
 
 WebappsStore.prototype = {
-  _destroy: function() {
-    this._connection.off(Connection.Events.STATUS_CHANGED, this._onStatusChanged);
-    _knownWebappsStores.delete(this._connection);
-    this._connection = null;
-  },
+  destroy: function() {
+    if (this._connection) {
+      this._connection.off(Connection.Events.DESTROYED, this.destroy);
+      this._connection.off(Connection.Events.STATUS_CHANGED, this._onStatusChanged);
+      _knownWebappsStores.delete(this._connection);
+      this._connection = null;
+    }
+  },
 
   _resetStore: function() {
     this.object.all = []; // list of app objects
     this.object.running = []; // list of manifests
   },
 
   _getAppFromManifest: function(manifest) {
     for (let app of this.object.all) {
