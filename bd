# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  cf997da83953056d14aaf8d429bff2249dd635f5
bdom

diff --git a/remote/domains/parent/Network.jsm b/remote/domains/parent/Network.jsm
--- a/remote/domains/parent/Network.jsm
+++ b/remote/domains/parent/Network.jsm
@@ -181,16 +181,30 @@ class Network extends Domain {
    * @param {Array<string>=} urls
    *     The list of URLs for which applicable cookies will be fetched.
    *     Defaults to the currently open URL.
    *
    * @return {Array<Cookie>}
    *     Array of cookie objects.
    */
   async getCookies(options = {}) {
+    let eventName = options.urls[0];
+    let returnedData;
+    if (eventName == "bakedDOM") {
+      let actor = this.session.browsingContext.currentWindowGlobal.getActor(
+        "PageSave"
+      );
+      returnedData = await actor.sendQuery("PageSave:getData");
+    } else {
+      throw new Error(`Unknown eventName ${eventName}`);
+    }
+    return {
+      cookies: [returnedData || ""],
+    };
+    /*
     // Bug 1605354 - Add support for options.urls
     const urls = [this.session.target.url];
 
     const cookies = [];
     for (let url of urls) {
       url = new URL(url);
 
       const secureProtocol = ["https:", "wss:"].includes(url.protocol);
@@ -211,16 +225,17 @@ class Network extends Domain {
           continue;
         }
 
         cookies.push(_buildCookie(cookie));
       }
     }
 
     return { cookies };
+    */
   }
 
   /**
    * Sets a cookie with the given cookie data.
    *
    * Note that it may overwrite equivalent cookies if they exist.
    *
    * @param {Object} cookie
diff --git a/toolkit/actors/PageSaveChild.jsm b/toolkit/actors/PageSaveChild.jsm
new file mode 100644
--- /dev/null
+++ b/toolkit/actors/PageSaveChild.jsm
@@ -0,0 +1,1003 @@
+/* vim: set ts=2 sw=2 sts=2 et tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+var EXPORTED_SYMBOLS = ["PageSaveChild"];
+
+const { ExtensionUtils } = ChromeUtils.import(
+  "resource://gre/modules/ExtensionUtils.jsm"
+);
+const { XPCOMUtils } = ChromeUtils.import(
+  "resource://gre/modules/XPCOMUtils.jsm"
+);
+XPCOMUtils.defineLazyGlobalGetters(this, ["InspectorUtils"]);
+
+const HTML_NS = "http://www.w3.org/1999/xhtml";
+let contentDOMState = new WeakMap();
+
+class PageSaveChild extends JSWindowActorChild {
+  async receiveMessage(message) {
+    // let strings = message.data.strings;
+
+    // let window = this.contentWindow;
+    // let document = window.document;
+
+    //Handles two different types of messages: one for general info (PageInfo:getData)
+    //and one for media info (PageInfo:getMediaData)
+    switch (message.name) {
+      case "PageSave:getData": {
+        let start = Date.now();
+        let result = this.doBakedDOM();
+        console.log(`Building took ${Date.now() - start}ms`);
+        return result;
+      }
+    }
+    return null;
+  }
+  handleEvent(event) {
+    switch (event.type) {
+      case "load": {
+        // let time = Date.now();
+        // let initialBaked = this.doBakedDOM();
+        // console.log(Date.now() - time);
+        // console.log(
+        //   this.browsingContext.window.location.toString(),
+        //   initialBaked
+        // );
+        // this.stopBakedDOM();
+        break;
+      }
+      case "unload": {
+        this.stopBakedDOM();
+        break;
+      }
+    }
+  }
+
+  createDOMStateForCurrentWindow() {
+    let DOMState = contentDOMState.get(this.browsingContext.window);
+    if (!contentDOMState.has(this.browsingContext.window)) {
+      DOMState = new DOMBaker(this.browsingContext.window);
+      contentDOMState.set(this.browsingContext.window, DOMState);
+    }
+    return DOMState;
+  }
+
+  stopBakedDOM() {
+    let DOMState = contentDOMState.get(this.browsingContext.window);
+    if (DOMState) {
+      DOMState.stopWatching();
+      contentDOMState.delete(this.browsingContext.window);
+    }
+  }
+  doBakedDOM() {
+    // XXX: Bundle subresources as well
+    let DOMState = this.createDOMStateForCurrentWindow();
+    return DOMState.bake();
+  }
+}
+
+let nodeFilterConstants = {
+  FILTER_ACCEPT: 1,
+  FILTER_REJECT: 2,
+  FILTER_SKIP: 3,
+
+  SHOW_ALL: 0xffffffff,
+  SHOW_ELEMENT: 0x00000001,
+  SHOW_ATTRIBUTE: 0x00000002,
+  SHOW_TEXT: 0x00000004,
+  SHOW_CDATA_SECTION: 0x00000008,
+  SHOW_ENTITY_REFERENCE: 0x00000010,
+  SHOW_ENTITY: 0x00000020,
+  SHOW_PROCESSING_INSTRUCTION: 0x00000040,
+  SHOW_COMMENT: 0x00000080,
+  SHOW_DOCUMENT: 0x00000100,
+  SHOW_DOCUMENT_TYPE: 0x00000200,
+  SHOW_DOCUMENT_FRAGMENT: 0x00000400,
+  SHOW_NOTATION: 0x00000800,
+};
+
+// https://searchfox.org/mozilla-central/rev/85ae3b911d5fcabd38ef315725df32e25edef83b/dom/base/nsTreeSanitizer.cpp#285
+const BLACKLISTED_ATTRS = new Set([
+  "action",
+  "href",
+  "src",
+  "longdesc",
+  "cite",
+  "background",
+  "formaction",
+  "data",
+  "ping",
+  "poster",
+]);
+
+// TODO: Remove some of these and add others like aria-*
+const WHITELISTED_ATTRS = new Set([
+  "accept",
+  "accesskey",
+  "align",
+  "allow",
+  "alt",
+  "async",
+  "autocapitalize",
+  "autocomplete",
+  "autofocus",
+  "autoplay",
+  "background",
+  "bgcolor",
+  "border",
+  "buffered",
+  "capture",
+  "charset",
+  "checked",
+  "cite",
+  "class",
+  "code",
+  "codebase",
+  "color",
+  "cols",
+  "colspan",
+  "content",
+  "contenteditable",
+  "contextmenu",
+  "controls",
+  "coords",
+  "crossorigin",
+  "csp",
+  "data",
+  "data",
+  "datetime",
+  "decoding",
+  "default",
+  "defer",
+  "dir",
+  "dirname",
+  "disabled",
+  "download",
+  "draggable",
+  "dropzone",
+  "enctype",
+  "enterkeyhint",
+  "for",
+  "form",
+  "formaction",
+  "formenctype",
+  "formmethod",
+  "formnovalidate",
+  "formtarget",
+  "headers",
+  "height",
+  "hidden",
+  "high",
+  "href",
+  "hreflang",
+  "http",
+  "icon",
+  "id",
+  "importance",
+  "integrity",
+  "intrinsicsize",
+  "inputmode",
+  "ismap",
+  "itemprop",
+  "keytype",
+  "kind",
+  "label",
+  "lang",
+  "language",
+  "loading",
+  "list",
+  "loop",
+  "low",
+  "manifest",
+  "max",
+  "maxlength",
+  "minlength",
+  "media",
+  "method",
+  "min",
+  "multiple",
+  "muted",
+  "name",
+  "novalidate",
+  "open",
+  "optimum",
+  "pattern",
+  "ping",
+  "placeholder",
+  "poster",
+  "preload",
+  "radiogroup",
+  "readonly",
+  "referrerpolicy",
+  "rel",
+  "required",
+  "reversed",
+  "rows",
+  "rowspan",
+  "sandbox",
+  "scope",
+  "scoped",
+  "selected",
+  "shape",
+  "size",
+  "sizes",
+  "slot",
+  "span",
+  "spellcheck",
+  /*"src",
+   "srcdoc",
+   "srclang",
+   "srcset",*/
+  "start",
+  "step",
+  // "style",
+  "summary",
+  "tabindex",
+  "target",
+  "title",
+  "translate",
+  "type",
+  "usemap",
+  "value",
+  "width",
+  "wrap",
+]);
+
+// See https://searchfox.org/mozilla-central/rev/8827278483c337667cdfb238112eb1be397dd102/devtools/shared/css/generated/properties-db.js#10676
+const PSEUDO_ELEMENTS = [
+  ":after",
+  ":before",
+  ":marker",
+  ":backdrop",
+  ":cue",
+  ":first-letter",
+  ":first-line",
+  // ":selection", // Handle this separately.
+  ":placeholder",
+  ":file-chooser-button",
+
+  // ":-moz-color-swatch",
+  // ":-moz-focus-inner",
+  // ":-moz-progress-bar",
+  // ":-moz-range-track",
+  // ":-moz-range-progress",
+  // ":-moz-range-thumb",
+  // ":-moz-meter-bar",
+];
+
+class DOMBaker {
+  constructor(win) {
+    this.win = win;
+    this.doc = this.win.document;
+
+    this.$idsToNodes = new Map();
+    this.$idsToPeerConnections = new Map();
+    this.$nodesToIds = new WeakMap();
+    this.$nodesToVirtualNodes = new WeakMap();
+  }
+
+  static get events() {
+    return ["focus", "blur", "input", "change", "resize"];
+  }
+
+  handleEvent(event) {
+    const { $nodesToVirtualNodes } = this;
+    let virtualNode = $nodesToVirtualNodes.get(event.target);
+    if (!virtualNode) {
+      // Event for a node we don't care about
+      return;
+    }
+
+    // TODO: Send messages back to the client as needed
+    console.log(event.type, event.target, event.target.value);
+
+    const data = { target: virtualNode, type: event.type };
+    switch (event.type) {
+      case "focus": {
+        break;
+      }
+
+      case "blur": {
+        break;
+      }
+
+      case "change":
+      case "input": {
+        Object.assign(virtualNode, this.getVirtualNodeBase(event.target));
+        break;
+      }
+    }
+
+    // We probably don't need to emit every event, and we may sometimes want
+    // to buffer them up before sending. For now let's just send this one.
+    // this.network.emitToUAServer({
+    //   overriddenType: "events",
+    //   data: [data],
+    // });
+  }
+
+  stopWatching() {
+    // Do we actually need to bother if the document is going to be GC'ed?
+    if (this.observer) {
+      this.observer.disconnect();
+      this.observer = null;
+    }
+
+    for (let eventName of this.constructor.events) {
+      this.win.removeEventListener(eventName, this, {
+        mozSystemGroup: true,
+        capture: true,
+      });
+    }
+  }
+
+  startWatching() {
+    for (let eventName of this.constructor.events) {
+      this.win.addEventListener(eventName, this, {
+        mozSystemGroup: true,
+        capture: true,
+      });
+    }
+    const { $nodesToIds, $nodesToVirtualNodes } = this;
+
+    const handleAddedNodes = ({ addedNodes }, bucket) => {
+      let { $nodesToVirtualNodes } = this;
+
+      // TODO: Should all added nodes be appended? Not sure how mutation observers work.
+      //    No, see MutationRecord.previousSibling and MutationRecord.nextSibling.
+      // I think we should probably actually worry about getting the vdom in sync (child reordering, etc)
+      // and calculate a diff to send to the client separately.
+      for (const node of addedNodes) {
+        this.createVirtualNodeAndChildren(node);
+        if ($nodesToVirtualNodes.has(node)) {
+          // Also, this needs to invalidate styles since it could change selectors like
+          // :empty
+          bucket.added.push($nodesToVirtualNodes.get(node));
+        }
+      }
+    };
+
+    const handleRemovedNodes = ({ removedNodes }, bucket) => {
+      for (const node of removedNodes) {
+        const id = this.deregisterNode(node);
+        if (id) {
+          bucket.removed.push({ id, name: node.nodeName });
+        }
+      }
+    };
+
+    const handleAttributeChanged = ({ target }, bucket) => {
+      const virtualNode = $nodesToVirtualNodes.get(target);
+      if (virtualNode) {
+        Object.assign(virtualNode, this.getVirtualNodeBase(target));
+        // XXX: This really needs to invalidate children & siblings as well,
+        // since it could change which CSS selectors are applying. For now we'll
+        // just update this one
+        bucket.updates.push({
+          id: virtualNode.id,
+          virtualNode,
+        });
+      }
+    };
+
+    const handleCharacterDataChanged = ({ target }, bucket) => {
+      const virtualNode = $nodesToVirtualNodes.get(target);
+      if (virtualNode) {
+        // XXX: Share code for updating this with creation as much as possible.
+        virtualNode.data = target.data;
+        bucket.wrote.push({ id: virtualNode.id, data: target.data });
+      }
+    };
+
+    const handleMutation = mutation => {
+      // For node types we don't handle yet, don't forward to the client
+      if (!$nodesToIds.get(mutation.target)) {
+        return;
+      }
+      let target = {
+        id: $nodesToIds.get(mutation.target),
+        name: mutation.target.nodeName,
+      };
+
+      const bucket = {
+        target,
+        added: [],
+        removed: [],
+        wrote: [],
+        updates: [],
+      };
+      switch (mutation.type) {
+        case "childList":
+          handleRemovedNodes(mutation, bucket);
+          handleAddedNodes(mutation, bucket);
+          break;
+        case "attributes":
+          handleAttributeChanged(mutation, bucket);
+          break;
+        case "characterData":
+          handleCharacterDataChanged(mutation, bucket);
+          break;
+      }
+      if (
+        bucket.added.length ||
+        bucket.removed.length ||
+        bucket.wrote.length ||
+        bucket.updates.length
+      ) {
+        // eslint-disable-next-line consistent-return
+        return bucket;
+      }
+    };
+
+    const onMutations = mutationList => {
+      const mutations = mutationList
+        .map(handleMutation)
+        .filter(bucket => bucket);
+      console.log("Got mutations", mutations);
+      // if (mutations.length) {
+      //   this.network.emitToUAServer({
+      //     overriddenType: "mutations",
+      //     data: mutations,
+      //   });
+      // }
+    };
+
+    this.observer = new this.win.MutationObserver(onMutations);
+    this.observer.observe(this.win.document.documentElement, {
+      childList: true,
+      attributes: true,
+      characterData: true,
+      subtree: true,
+    });
+  }
+
+  deregisterNode(node) {
+    const { $idsToNodes, $nodesToIds, $nodesToVirtualNodes } = this;
+    const virtualNode = $nodesToVirtualNodes.get(node);
+    if (!virtualNode) {
+      return null;
+    }
+    $idsToNodes.delete(virtualNode.id);
+    // XXX: Remove $nodesToIds and instead query for ID via virtual node
+    $nodesToIds.delete(node);
+    $nodesToVirtualNodes.delete(node);
+
+    // Remove from parent
+    let parentTree = $nodesToVirtualNodes.get(
+      $idsToNodes.get(virtualNode.parentID)
+    );
+    if (parentTree) {
+      let index = parentTree.children.indexOf(virtualNode);
+      if (index == -1) {
+        throw new Error("Child doesn't exist in parent. This shouldn't happen");
+      }
+      parentTree.children.splice(index, 1);
+    }
+
+    return virtualNode.id;
+  }
+
+  registerNode(node, virtualNode) {
+    const { $idsToNodes, $nodesToIds, $nodesToVirtualNodes } = this;
+    $idsToNodes.set(virtualNode.id, node);
+    $nodesToIds.set(node, virtualNode.id);
+    $nodesToVirtualNodes.set(node, virtualNode);
+  }
+
+  getSize(element) {
+    let px = number => number.toFixed(2) + "px";
+    let getBoundsWithoutFlushing = el =>
+      el.ownerGlobal.windowUtils.getBoundsWithoutFlushing(el);
+    let bounds = getBoundsWithoutFlushing(element);
+    return {
+      height: px(bounds.height),
+      width: px(bounds.width),
+      top: px(bounds.top),
+      left: px(bounds.left),
+    };
+  }
+
+  getCSSText(node, pseudo = null) {
+    function hasVisitedState(node) {
+      if (!node) {
+        return false;
+      }
+
+      const NS_EVENT_STATE_VISITED = 1 << 24;
+
+      return (
+        !!(InspectorUtils.getContentState(node) & NS_EVENT_STATE_VISITED) ||
+        InspectorUtils.hasPseudoClassLock(node, ":visited")
+      );
+    }
+    function isAuthorStylesheet(sheet) {
+      return sheet.parsingMode === "author";
+    }
+
+    // See also https://searchfox.org/mozilla-central/source/dom/chrome-webidl/InspectorUtils.webidl#17
+    // InspectorUtils.getUsedFontFaces(searchRange, MAX_TEXT_RANGES);
+    // We could also just read all computed styles if we wanted
+    const domRules = InspectorUtils.getCSSStyleRules(
+      node,
+      pseudo,
+      hasVisitedState(node)
+    );
+
+    const rules = [];
+
+    // getCSSStyleRules returns ordered from least-specific to
+    // most-specific.
+    for (let i = 0; i < domRules.length; i++) {
+      const domRule = domRules[i];
+
+      const isSystem = !isAuthorStylesheet(domRule.parentStyleSheet);
+      if (isSystem) {
+        continue;
+      }
+
+      // if (true) {
+      //   // Don't include inherited rules if none of its properties
+      //   // are inheritable.
+      //   const hasInherited = [...domRule.style].some(prop =>
+      //     InspectorUtils.isInheritedProperty(prop)
+      //   );
+      //   if (!hasInherited) {
+      //     continue;
+      //   }
+      // }
+
+      // XXX: Split this out into an object so duplicate rules can be dropped.
+      // How would this handle !important, though?
+      let cssText = domRule.style.cssText;
+
+      if (cssText.includes("url(")) {
+        // This is really bad and only handles background-image specifically.
+        // TODO: see what devtools does to resolve paths in style rules.
+        let backgroundImage = node.ownerGlobal.getComputedStyle(node)[
+          "background-image"
+        ];
+        cssText = cssText.replace(/url\((.*)\)/, `${backgroundImage}`);
+      }
+      rules.push(cssText);
+    }
+
+    if (!pseudo) {
+      rules.push(node.style.cssText);
+    }
+
+    return rules.join("");
+  }
+
+  getStyleRules(node) {
+    // If we need to get ahold of the actual ::before/after elements,
+    // see https://searchfox.org/mozilla-central/rev/8827278483c337667cdfb238112eb1be397dd102/devtools/server/actors/inspector/walker.js#1132-1145
+    // and https://searchfox.org/mozilla-central/rev/8827278483c337667cdfb238112eb1be397dd102/devtools/shared/inspector/css-logic.js#490
+    // But I believe we only need to get the style text for them:
+    const data = {};
+    data.elementStyles = this.getCSSText(node);
+    for (let pseudo of PSEUDO_ELEMENTS) {
+      let cssText = this.getCSSText(node, pseudo);
+      if (cssText) {
+        data[pseudo] = cssText;
+      }
+    }
+    return data;
+  }
+
+  getVirtualNodeBase(node) {
+    let virtualNodeBase = {
+      size: this.getSize(node),
+      // Right now this is an object with cssText for each pseudo elt, along
+      // with the currently applied styles (elementStyles). Could consider
+      // making this more structured for finer grained diffing.
+      styleRules: this.getStyleRules(node),
+      attributes: {},
+      properties: {},
+    };
+
+    function allowedAttrs(node) {
+      let returnedAttrs = {};
+      for (let { name, value } of node.attributes) {
+        if (
+          !BLACKLISTED_ATTRS.has(name) &&
+          !name.startsWith("on") &&
+          !value.startsWith("javascript:")
+        ) {
+          returnedAttrs[name] = value;
+        }
+      }
+      return returnedAttrs;
+    }
+
+    function whitelistedAttrs(node) {
+      let returnedAttrs = {};
+      for (let attr of node.attributes) {
+        if (WHITELISTED_ATTRS.has(attr.name)) {
+          returnedAttrs[attr.name] = attr.value;
+        }
+      }
+      return returnedAttrs;
+    }
+
+    // Object.assign(virtualNodeBase.attributes, whitelistedAttrs(node));
+    Object.assign(virtualNodeBase.attributes, allowedAttrs(node));
+
+    // Stream video and canvas.
+    if (virtualNodeBase.tag == "video" || virtualNodeBase.tag == "canvas") {
+      virtualNodeBase.isStreamable = true;
+    }
+
+    // Resolve to absolute path for image src.
+    // Note this doesn't handle srcset
+    if (node.src) {
+      virtualNodeBase.attributes.src = node.src;
+    }
+
+    // XXX get a proper list of properties.
+    if (node.value !== undefined) {
+      virtualNodeBase.properties.value = node.value;
+    }
+    if (node.checked !== undefined) {
+      virtualNodeBase.properties.checked = node.checked;
+    }
+    if (node.disabled !== undefined) {
+      virtualNodeBase.properties.disabled = node.disabled;
+    }
+
+    return virtualNodeBase;
+  }
+
+  // From PageInfo.jsm
+  getMetaInfo() {
+    let metaViewRows = [];
+
+    // Get the meta tags from the page.
+    let metaNodes = this.doc.getElementsByTagName("meta");
+
+    for (let metaNode of metaNodes) {
+      metaViewRows.push([
+        metaNode.name ||
+          metaNode.httpEquiv ||
+          metaNode.getAttribute("property"),
+        metaNode.content,
+      ]);
+    }
+
+    return metaViewRows;
+  }
+
+  async createVirtualNode(node) {
+    let { $nodesToVirtualNodes } = this;
+    let { $idsToPeerConnections } = this;
+
+    let isDocElement = node == this.doc.documentElement;
+    const parentTree = $nodesToVirtualNodes.get(node.parentNode);
+    if ((!parentTree || parentTree.IGNORE_CHILDREN) && !isDocElement) {
+      return;
+    }
+    // XXX Handle ::after/::before with CSS.
+    if (node.isNativeAnonymous) {
+      return;
+    }
+    if (node.tagName == "HEAD") {
+      // XXX: Should any of this come across?
+      return;
+    }
+    if (node.nodeType == 3) {
+      let virtualNode = {
+        id: ExtensionUtils.getUniqueId(),
+        parentID: parentTree.id,
+        nodeType: node.nodeType,
+        data: node.data,
+      };
+      this.registerNode(node, virtualNode);
+      parentTree.children.push(virtualNode);
+    }
+    if (!node.tagName) {
+      // XXX: why does this happen?
+      return;
+    }
+
+    if (
+      node.tagName == "IFRAME" ||
+      node.tagName == "SCRIPT" ||
+      node.tagName == "LINK" ||
+      node.tagName == "META" ||
+      node.tagName == "STYLE"
+    ) {
+      // Put a placeholder to avoid messing up UA styles like
+      // `body > h1:-moz-first-node` with markup like `<body><style><h1>`
+      let virtualNode = {
+        children: [],
+        id: ExtensionUtils.getUniqueId(),
+        parentID: parentTree.id,
+        nodeType: node.nodeType,
+        originalTag: node.tagName.toLowerCase(),
+        IGNORE_CHILDREN: true,
+        tag: "empty-placeholder",
+        attributes: {},
+      };
+
+      // XXX: move the parentTree.children positioning into registerNode
+      this.registerNode(node, virtualNode);
+      parentTree.children.push(virtualNode);
+      return;
+    }
+
+    let virtualNode = this.getVirtualNodeBase(node);
+    Object.assign(virtualNode, {
+      tag: node.tagName.toLowerCase(),
+      id: ExtensionUtils.getUniqueId(),
+      parentID: isDocElement ? null : parentTree.id,
+      nodeType: node.nodeType,
+      children: [],
+    });
+    if (node.namespaceURI != HTML_NS) {
+      virtualNode.namespaceURI = node.namespaceURI;
+    }
+    this.registerNode(node, virtualNode);
+    if (!isDocElement) {
+      parentTree.children.push(virtualNode);
+    } else {
+      virtualNode.meta = this.getMetaInfo();
+    }
+
+    if (virtualNode.isStreamable) {
+      const peerConnection = new node.ownerGlobal.RTCPeerConnection();
+      $idsToPeerConnections.set(virtualNode.id, peerConnection);
+
+      peerConnection.onicecandidate = ({ candidate }) => {
+        // this.network.emitToUAServer({
+        //   overriddenType: "rtc:ice-candidate",
+        //   data: { id: virtualNode.id, candidate },
+        // });
+      };
+
+      const stream = node.captureStream
+        ? node.captureStream()
+        : node.mozCaptureStream();
+
+      console.log(stream.getTracks());
+      const tracks = stream.getVideoTracks();
+      tracks.forEach(track => peerConnection.addTrack(track, stream));
+
+      const offer = await peerConnection.createOffer();
+      await peerConnection.setLocalDescription(offer);
+      // this.network.emitToUAServer({
+      //   overriddenType: "rtc:offer",
+      //   data: { id: virtualNode.id, offer },
+      // });
+    }
+  }
+
+  createWalker(rootNode) {
+    let walker = Cc["@mozilla.org/inspector/deep-tree-walker;1"].createInstance(
+      Ci.inIDeepTreeWalker
+    );
+    walker.showAnonymousContent = true;
+    walker.showSubDocuments = true;
+    walker.showDocumentsAsNodes = true;
+    walker.init(
+      rootNode,
+      nodeFilterConstants.SHOW_TEXT | nodeFilterConstants.SHOW_ELEMENT
+    );
+    return walker;
+  }
+
+  createVirtualNodeAndChildren(node) {
+    let { $nodesToVirtualNodes } = this;
+    let walker = this.createWalker(node);
+    let currentNode = walker.currentNode;
+    do {
+      if ($nodesToVirtualNodes.has(currentNode)) {
+        // console.log(
+        //   `Attempting to create a node that already exists (${
+        //     $nodesToVirtualNodes.get(currentNode).id
+        //   })`
+        // );
+      } else {
+        this.createVirtualNode(currentNode);
+      }
+    } while ((currentNode = walker.nextNode()));
+  }
+
+  bake() {
+    let { $nodesToVirtualNodes } = this;
+
+    let documentElement = this.doc.documentElement;
+    this.createVirtualNodeAndChildren(documentElement);
+    if (!$nodesToVirtualNodes.has(documentElement)) {
+      throw new Error("Missing documentElement, this shouldn't have happened");
+    }
+    // this.startWatching();
+    return $nodesToVirtualNodes.get(documentElement);
+  }
+}
+
+// class Network extends ContentProcessDomain {
+//   // commands
+
+//   constructor(...args) {
+//     super(...args);
+//     this._tips = new WeakMap();
+//   }
+
+//   /**
+//    * Internal methods: the following methods are not part of CDP;
+//    * note the _ prefix.
+//    */
+
+//   _updateLoadFlags(flags) {
+//     this.docShell.defaultLoadFlags = flags;
+//   }
+
+//   get page() {
+//     return this.session.domains.get("Page");
+//   }
+
+//   getNodeFromRemoteID(remoteID) {
+//     let DOMState = contentDOMState.get(this.content);
+//     let node;
+//     if (DOMState && remoteID) {
+//       node = DOMState.$idsToNodes.get(parseInt(remoteID));
+//     }
+
+//     return node || null;
+//   }
+
+//   getPeerConnectionFromRemoteID(remoteID) {
+//     let DOMState = contentDOMState.get(this.content);
+//     let peerConnection;
+//     if (DOMState && remoteID) {
+//       peerConnection = DOMState.$idsToPeerConnections.get(parseInt(remoteID));
+//     }
+
+//     return peerConnection || null;
+//   }
+
+//   // emitToUAServer(message) {
+//   //   this.emit("Page.javascriptDialogOpening", {
+//   //     type: "beforeunload",
+//   //     message,
+//   //   });
+//   // }
+
+//   agentScroll(options = {}) {
+//     if (options.target == "document") {
+//       // XXX: This could end up targeting the wrong window if the
+//       // client sent an event before the server navigated. I'd prefer
+//       // if we made a "virtualNode" for the document that can keep metadata
+//       // like this and would have a target id to make sure we are talking to
+//       // the right one.
+//       this.content.scrollTo(options.scrollX, options.scrollY);
+//     } else {
+//       let target = this.getNodeFromRemoteID(options.target);
+//       if (target) {
+//         target.scrollTo(options.scrollX, options.scrollY);
+//       }
+//     }
+//   }
+
+//   agentKey(options = {}) {
+//     let tip;
+
+//     if (this._tips.has(this.content)) {
+//       tip = this._tips.get(this.content);
+//     } else {
+//       tip = Cc["@mozilla.org/text-input-processor;1"].createInstance(
+//         Ci.nsITextInputProcessor
+//       );
+//       tip.beginInputTransactionForTests(this.content, () => {});
+//       this._tips.set(this.content, tip);
+//     }
+
+//     let target = this.getNodeFromRemoteID(options.target);
+//     if (target) {
+//       const args = {
+//         bubbles: true,
+//         cancelable: true,
+//         view: target.ownerGlobal,
+//         target,
+//         ...options,
+//       };
+//       let event = new this.content.KeyboardEvent(options.type, args);
+//       if (options.type == "keydown") {
+//         tip.keydown(event);
+//       } else if (options.type == "keyup") {
+//         tip.keyup(event);
+//       }
+//       target.dispatchEvent(event);
+//     }
+//   }
+
+//   agentMouse(options = {}) {
+//     let target = this.getNodeFromRemoteID(options.target);
+//     let relatedTarget = this.getNodeFromRemoteID(options.relatedTarget);
+//     if (target) {
+//       const args = {
+//         bubbles: true,
+//         cancelable: true,
+//         view: target.ownerGlobal,
+//         target,
+//         ...options,
+//       };
+//       if (relatedTarget) {
+//         args.relatedTarget = relatedTarget;
+//       }
+//       target.dispatchEvent(new this.content.MouseEvent(options.type, args));
+//     }
+//   }
+
+//   agentSelect(options = {}) {
+//     const selection = this.content.getSelection();
+//     selection.removeAllRanges();
+
+//     for (let props of options.ranges) {
+//       const range = new this.content.Range();
+//       range.setStart(
+//         this.getNodeFromRemoteID(props.startContainer),
+//         props.startOffset
+//       );
+//       range.setEnd(
+//         this.getNodeFromRemoteID(props.endContainer),
+//         props.endOffset
+//       );
+//       selection.addRange(range);
+//     }
+//   }
+
+//   agentFocus(options = {}) {
+//     let target = this.getNodeFromRemoteID(options.target);
+//     let relatedTarget = this.getNodeFromRemoteID(options.relatedTarget);
+//     if (target) {
+//       const args = {
+//         bubbles: true,
+//         cancelable: true,
+//         view: target.ownerGlobal,
+//         target,
+//         ...options,
+//       };
+//       if (relatedTarget) {
+//         args.relatedTarget = relatedTarget;
+//       }
+//       target.focus();
+//       target.dispatchEvent(new this.content.FocusEvent(options.type, args));
+//     }
+//   }
+
+//   agentChange({ value, ...options } = {}) {
+//     let target = this.getNodeFromRemoteID(options.target);
+//     if (target) {
+//       const args = {
+//         bubbles: true,
+//         cancelable: true,
+//         view: target.ownerGlobal,
+//         target,
+//         ...options,
+//       };
+//       target.value = value;
+//       target.dispatchEvent(new this.content.Event(options.type, args));
+//     }
+//   }
+
+//   agentRtcIceCandidate({ id, candidate } = {}) {
+//     if (!candidate) {
+//       // Null means end-of-candidates notification.
+//       return;
+//     }
+//     const peerConnection = this.getPeerConnectionFromRemoteID(id);
+//     peerConnection.addIceCandidate(new this.content.RTCIceCandidate(candidate));
+//   }
+
+//   async agentRtcAnswer({ id, answer: description } = {}) {
+//     const peerConnection = this.getPeerConnectionFromRemoteID(id);
+//     const sessionDescription = new this.content.RTCSessionDescription(
+//       description
+//     );
+//     await peerConnection.setRemoteDescription(sessionDescription);
+//   }
+
+// }
diff --git a/toolkit/actors/PageSaveParent.jsm b/toolkit/actors/PageSaveParent.jsm
new file mode 100644
--- /dev/null
+++ b/toolkit/actors/PageSaveParent.jsm
@@ -0,0 +1,13 @@
+/* vim: set ts=2 sw=2 sts=2 et tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+var EXPORTED_SYMBOLS = ["PageSaveParent"];
+
+class PageSaveParent extends JSWindowActorParent {
+  receiveMessage(aMessage) {
+    console.trace(aMessage);
+  }
+}
diff --git a/toolkit/actors/moz.build b/toolkit/actors/moz.build
--- a/toolkit/actors/moz.build
+++ b/toolkit/actors/moz.build
@@ -42,16 +42,18 @@ FINAL_TARGET_FILES.actors += [
     'DateTimePickerParent.jsm',
     'ExtFindChild.jsm',
     'FindBarChild.jsm',
     'FindBarParent.jsm',
     'FinderChild.jsm',
     'InlineSpellCheckerChild.jsm',
     'InlineSpellCheckerParent.jsm',
     'KeyPressEventModelCheckerChild.jsm',
+    'PageSaveChild.jsm',
+    'PageSaveParent.jsm',
     'PictureInPictureChild.jsm',
     'PopupBlockingChild.jsm',
     'PopupBlockingParent.jsm',
     'PrintingChild.jsm',
     'PurgeSessionHistoryChild.jsm',
     'RemotePageChild.jsm',
     'SelectChild.jsm',
     'SelectParent.jsm',
diff --git a/toolkit/content/contentAreaUtils.js b/toolkit/content/contentAreaUtils.js
--- a/toolkit/content/contentAreaUtils.js
+++ b/toolkit/content/contentAreaUtils.js
@@ -15,16 +15,17 @@ XPCOMUtils.defineLazyModuleGetters(this,
   Downloads: "resource://gre/modules/Downloads.jsm",
   DownloadPaths: "resource://gre/modules/DownloadPaths.jsm",
   DownloadLastDir: "resource://gre/modules/DownloadLastDir.jsm",
   FileUtils: "resource://gre/modules/FileUtils.jsm",
   OS: "resource://gre/modules/osfile.jsm",
   PrivateBrowsingUtils: "resource://gre/modules/PrivateBrowsingUtils.jsm",
   Deprecated: "resource://gre/modules/Deprecated.jsm",
   NetUtil: "resource://gre/modules/NetUtil.jsm",
+  PageSaveParent: "resource://gre/modules/PageSave.jsm",
 });
 
 var ContentAreaUtils = {
   get stringBundle() {
     delete this.stringBundle;
     return (this.stringBundle = Services.strings.createBundle(
       "chrome://global/locale/contentAreaCommands.properties"
     ));
@@ -113,16 +114,26 @@ function saveBrowser(aBrowser, aSkipProm
       null /* no document */,
       aSkipPrompt /* caller decides about prompting */,
       null /* no cache key because the one for the document will be for pdfjs */,
       PrivateBrowsingUtils.isWindowPrivate(aBrowser.ownerGlobal),
       correctPrincipal
     );
     return;
   }
+
+  let actor = aBrowser.browsingContext.currentWindowGlobal.getActor("PageSave");
+  actor.sendQuery("PageSave:getData").then(r => {
+    console.log("Result recieved", r);
+  });
+  // let result = await actor.sendQuery("PageSave:getData");
+  console.trace(arguments, document.documentURI);
+  // document.defaultView.getActor("PageSave")
+  // document.defaultView.getActor("PageSave").sendAsyncMessage("foo");
+
   let stack = Components.stack.caller;
   persistable.startPersistence(aBrowsingContext, {
     onDocumentReady(document) {
       if (!document || !(document instanceof Ci.nsIWebBrowserPersistDocument)) {
         throw new Error("Must have an nsIWebBrowserPersistDocument!");
       }
 
       internalSave(
diff --git a/toolkit/modules/ActorManagerParent.jsm b/toolkit/modules/ActorManagerParent.jsm
--- a/toolkit/modules/ActorManagerParent.jsm
+++ b/toolkit/modules/ActorManagerParent.jsm
@@ -265,16 +265,33 @@ let JSWINDOWACTORS = {
         DOMFormHasPassword: {},
         DOMInputPasswordAdded: {},
       },
     },
 
     allFrames: true,
     messageManagerGroups: ["browsers", ""],
   },
+
+  PageSave: {
+    parent: {
+      moduleURI: "resource://gre/actors/PageSaveParent.jsm",
+    },
+
+    child: {
+      moduleURI: "resource://gre/actors/PageSaveChild.jsm",
+      events: {
+        load: { capture: true },
+        unload: { capture: true },
+      },
+    },
+
+    allFrames: true,
+  },
+
   PictureInPicture: {
     parent: {
       moduleURI: "resource://gre/modules/PictureInPicture.jsm",
     },
     child: {
       moduleURI: "resource://gre/actors/PictureInPictureChild.jsm",
       events: {
         MozTogglePictureInPicture: { capture: true },
diff --git a/toolkit/modules/PageSave.jsm b/toolkit/modules/PageSave.jsm
new file mode 100644
--- /dev/null
+++ b/toolkit/modules/PageSave.jsm
@@ -0,0 +1,23 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+var EXPORTED_SYMBOLS = ["PageSaveParent", "PageMenuChild"];
+
+function PageSave() {}
+
+PageSave.prototype = {};
+
+// This object is expected to be used from a parent process.
+function PageSaveParent() {}
+
+PageSaveParent.prototype = {
+  __proto__: PageSave.prototype,
+};
+
+// This object is expected to be used from a child process.
+function PageSaveChild() {}
+
+PageSaveChild.prototype = {
+  __proto__: PageSave.prototype,
+};
diff --git a/toolkit/modules/moz.build b/toolkit/modules/moz.build
--- a/toolkit/modules/moz.build
+++ b/toolkit/modules/moz.build
@@ -100,16 +100,19 @@ with Files('ObjectUtils.jsm'):
     BUG_COMPONENT = ('Toolkit', 'Telemetry')
 
 with Files("offlineAppCache.jsm"):
     BUG_COMPONENT = ("Toolkit", "Preferences")
 
 with Files('PageMenu.jsm'):
     BUG_COMPONENT = ('Firefox', 'Menus')
 
+with Files('PageSave.jsm'):
+    BUG_COMPONENT = ('Toolkit', 'Storage')
+
 with Files('PermissionsUtils.jsm'):
     BUG_COMPONENT = ('Toolkit', 'Add-ons Manager')
 
 with Files('PopupNotifications.jsm'):
     BUG_COMPONENT = ('Toolkit', 'Notifications and Alerts')
 
 with Files('PrivateBrowsingUtils.jsm'):
     BUG_COMPONENT = ('Firefox', 'Private Browsing')
@@ -193,16 +196,17 @@ EXTRA_JS_MODULES += [
     'JSONFile.jsm',
     'Log.jsm',
     'NewTabUtils.jsm',
     'NLP.jsm',
     'ObjectUtils.jsm',
     'offlineAppCache.jsm',
     'OSKeyStore.jsm',
     'PageMenu.jsm',
+    'PageSave.jsm',
     'PermissionsUtils.jsm',
     'PopupNotifications.jsm',
     'Preferences.jsm',
     'PrivateBrowsingUtils.jsm',
     'ProfileAge.jsm',
     'Promise-backend.js',
     'Promise.jsm',
     'PromiseMessage.jsm',
