# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  01df1f0e9a0338577fc35de417f8103cdd9421e7
Bug 943306 - Debugging persist console intermittents

diff --git a/browser/devtools/webconsole/webconsole.js b/browser/devtools/webconsole/webconsole.js
--- a/browser/devtools/webconsole/webconsole.js
+++ b/browser/devtools/webconsole/webconsole.js
@@ -446,17 +446,34 @@ WebConsoleFrame.prototype = {
   /**
    * Initialize the WebConsoleFrame instance.
    * @return object
    *         A promise object that resolves once the frame is ready to use.
    */
   init: function()
   {
     this._initUI();
-    return this._initConnection();
+    let connectionInited = this._initConnection();
+
+    // Don't reject if the history fails to load for some reason.
+    // This would be fine, the panel will just start with empty history.
+    let allReady = this.jsterm.historyLoaded.catch(() => {}).then(() => {
+      return connectionInited;
+    });
+
+    // This notification is only used in tests. Don't chain it onto
+    // the returned promise because the console panel needs to be attached
+    // to the toolbox before the web-console-created event is receieved.
+    let notifyObservers = () => {
+      let id = WebConsoleUtils.supportsString(this.hudId);
+      Services.obs.notifyObservers(id, "web-console-created", null);
+    };
+    allReady.then(notifyObservers, notifyObservers);
+
+    return allReady;
   },
 
   /**
    * Connect to the server using the remote debugging protocol.
    *
    * @private
    * @return object
    *         A promise object that is resolved/reject based on the connection
@@ -473,19 +490,16 @@ WebConsoleFrame.prototype = {
 
     this.proxy.connect().then(() => { // on success
       this._initDefer.resolve(this);
     }, (aReason) => { // on failure
       let node = this.createMessageNode(CATEGORY_JS, SEVERITY_ERROR,
                                         aReason.error + ": " + aReason.message);
       this.outputMessage(CATEGORY_JS, node, [aReason]);
       this._initDefer.reject(aReason);
-    }).then(() => {
-      let id = WebConsoleUtils.supportsString(this.hudId);
-      Services.obs.notifyObservers(id, "web-console-created", null);
     });
 
     return this._initDefer.promise;
   },
 
   /**
    * Find the Web Console UI elements and setup event listeners as needed.
    * @private
@@ -3079,17 +3093,17 @@ JSTerm.prototype = {
   /**
    * Load the console history from previous sessions.
    * @private
    */
   _loadHistory: function() {
     this.history = [];
     this.historyIndex = this.historyPlaceHolder = 0;
 
-    asyncStorage.getItem("webConsoleHistory").then(value => {
+    this.historyLoaded = asyncStorage.getItem("webConsoleHistory").then(value => {
       if (Array.isArray(value)) {
         // Since it was gotten asynchronously, there could be items already in
         // the history.  It's not likely but stick them onto the end anyway.
         this.history = value.concat(this.history);
 
         // Holds the number of entries in history. This value is incremented in
         // this.execute().
         this.historyIndex = this.history.length;
