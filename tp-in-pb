# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  138bfb083317b9834a4776e28a71c710c6d73181
Bug 1178985 - Show tracking protection section in control center when enabled in private browsing mode;r=ttaubert

diff --git a/browser/base/content/browser-trackingprotection.js b/browser/base/content/browser-trackingprotection.js
--- a/browser/base/content/browser-trackingprotection.js
+++ b/browser/base/content/browser-trackingprotection.js
@@ -1,36 +1,46 @@
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 let TrackingProtection = {
-  PREF_ENABLED: "privacy.trackingprotection.enabled",
+  PREF_ALWAYS_ENABLED: "privacy.trackingprotection.enabled",
+  PREF_PB_ENABLED: "privacy.trackingprotection.pbmode.enabled",
 
   init() {
     let $ = selector => document.querySelector(selector);
     this.container = $("#tracking-protection-container");
     this.content = $("#tracking-protection-content");
 
     this.updateEnabled();
-    Services.prefs.addObserver(this.PREF_ENABLED, this, false);
+    Services.prefs.addObserver(this.PREF_ALWAYS_ENABLED, this, false);
+    Services.prefs.addObserver(this.PREF_PB_ENABLED, this, false);
 
-    this.enabledHistogram.add(this.enabled);
+    this.enabledHistogram.add(this.alwaysEnabled);
   },
 
   uninit() {
-    Services.prefs.removeObserver(this.PREF_ENABLED, this);
+    Services.prefs.removeObserver(this.PREF_ALWAYS_ENABLED, this);
+    Services.prefs.removeObserver(this.PREF_PB_ENABLED, this);
   },
 
   observe() {
     this.updateEnabled();
   },
 
+  get enabled() {
+    console.log(this.alwaysEnabled, this.pbEnabled, PrivateBrowsingUtils.isWindowPrivate(window));
+    return this.alwaysEnabled ||
+           (this.pbEnabled && PrivateBrowsingUtils.isWindowPrivate(window));
+  },
+
   updateEnabled() {
-    this.enabled = Services.prefs.getBoolPref(this.PREF_ENABLED);
+    this.alwaysEnabled = Services.prefs.getBoolPref(this.PREF_ALWAYS_ENABLED);
+    this.pbEnabled = Services.prefs.getBoolPref(this.PREF_PB_ENABLED);
     this.container.hidden = !this.enabled;
   },
 
   get enabledHistogram() {
     return Services.telemetry.getHistogramById("TRACKING_PROTECTION_ENABLED");
   },
 
   get eventsHistogram() {
diff --git a/browser/base/content/test/general/browser_trackingUI_1.js b/browser/base/content/test/general/browser_trackingUI_1.js
--- a/browser/base/content/test/general/browser_trackingUI_1.js
+++ b/browser/base/content/test/general/browser_trackingUI_1.js
@@ -5,23 +5,25 @@
 // Test that the Tracking Protection section is visible in the Control Center
 // and has the correct state for the cases when:
 //   * A page with no tracking elements is loaded.
 //   * A page with tracking elements is loaded and they are blocked.
 //   * A page with tracking elements is loaded and they are not blocked.
 // See also Bugs 1175327 and 1043801.
 
 let PREF = "privacy.trackingprotection.enabled";
+let PB_PREF = "privacy.trackingprotection.pbmode.enabled";
 let BENIGN_PAGE = "http://tracking.example.org/browser/browser/base/content/test/general/benignPage.html";
 let TRACKING_PAGE = "http://tracking.example.org/browser/browser/base/content/test/general/trackingPage.html";
 let TrackingProtection = null;
 
 registerCleanupFunction(function() {
   TrackingProtection = null;
   Services.prefs.clearUserPref(PREF);
+  Services.prefs.clearUserPref(PB_PREF);
   gBrowser.removeCurrentTab();
 });
 
 function hidden(sel) {
   let win = gBrowser.ownerGlobal;
   let el = win.document.querySelector(sel);
   let display = win.getComputedStyle(el).getPropertyValue("display", null);
   return display === "none";
diff --git a/browser/base/content/test/general/browser_trackingUI_2.js b/browser/base/content/test/general/browser_trackingUI_2.js
--- a/browser/base/content/test/general/browser_trackingUI_2.js
+++ b/browser/base/content/test/general/browser_trackingUI_2.js
@@ -2,23 +2,25 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 // Test that the Tracking Protection section is never visible in the
 // Control Center when the feature is off.
 // See also Bugs 1175327 and 1043801.
 
 let PREF = "privacy.trackingprotection.enabled";
+let PB_PREF = "privacy.trackingprotection.pbmode.enabled";
 let BENIGN_PAGE = "http://tracking.example.org/browser/browser/base/content/test/general/benignPage.html";
 let TRACKING_PAGE = "http://tracking.example.org/browser/browser/base/content/test/general/trackingPage.html";
 let TrackingProtection = null;
 
 registerCleanupFunction(function() {
   TrackingProtection = null;
   Services.prefs.clearUserPref(PREF);
+  Services.prefs.clearUserPref(PB_PREF);
   gBrowser.removeCurrentTab();
 });
 
 function testTrackingPageOff() {
   ok (TrackingProtection.container.hidden, "The container is hidden");
 }
 
 function testBenignPageOff() {
@@ -40,9 +42,17 @@ add_task(function* () {
 
   info("Load a test page containing tracking elements");
   yield promiseTabLoadEvent(tab, TRACKING_PAGE);
   testTrackingPageOff();
 
   info("Load a test page not containing tracking elements");
   yield promiseTabLoadEvent(tab, BENIGN_PAGE);
   testBenignPageOff();
+
+  Services.prefs.setBoolPref(PB_PREF, false);
+  let privateWin = OpenBrowserWindow({private: true});
+  ok (privateWin.TrackingProtection, "TP is attached to the private window");
+  is (!privateWin.TrackingProtection.enabled, Services.prefs.getBoolPref(PB_PREF),
+    "TP.enabled is based on the pb pref value");
+
+  privateWin.close();
 });
