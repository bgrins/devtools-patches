# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  7a4e0e65d44d9874acfdd25b019f76a6eebdfa55
Bug 1224073

diff --git a/devtools/server/actors/webconsole.js b/devtools/server/actors/webconsole.js
--- a/devtools/server/actors/webconsole.js
+++ b/devtools/server/actors/webconsole.js
@@ -893,23 +893,50 @@ WebConsoleActor.prototype =
     if (evalResult) {
       if ("return" in evalResult) {
         result = evalResult.return;
       } else if ("yield" in evalResult) {
         result = evalResult.yield;
       } else if ("throw" in evalResult) {
         let error = evalResult.throw;
         errorGrip = this.createValueGrip(error);
+
+
+        // Find the Debugger.Frame of the given FrameActor.
+        let frame = null, frameActor = null;
+        if (aOptions.frameActor) {
+          frameActor = this.conn.getActor(aOptions.frameActor);
+          if (frameActor) {
+            frame = frameActor.frame;
+          }
+          else {
+            DevToolsUtils.reportException("evalWithDebugger",
+              Error("The frame actor was not found: " + aOptions.frameActor));
+          }
+        }
+
+        // If we've been given a frame actor in whose scope we should evaluate the
+        // expression, be sure to use that frame's Debugger (that is, the JavaScript
+        // debugger's Debugger) for the whole operation, not the console's Debugger.
+        // (One Debugger will treat a different Debugger's Debugger.Object instances
+        // as ordinary objects, not as references to be followed, so mixing
+        // debuggers causes strange behaviors.)
+        let dbg = frame ? frameActor.threadActor.dbg : this.dbg;
+        let dbgWindow = dbg.makeGlobalObjectReference(this.evalWindow);
+        errorMessage = dbgWindow.executeInGlobalWithBindings("_self.toString()",
+                                                            {_self: error}).return;
+
+
         // XXXworkers: Calling unsafeDereference() returns an object with no
         // toString method in workers. See Bug 1215120.
-        let unsafeDereference = error && (typeof error === "object") &&
-                                error.unsafeDereference();
-        errorMessage = unsafeDereference && unsafeDereference.toString
-          ? unsafeDereference.toString()
-          : String(error);
+        // let unsafeDereference = error && (typeof error === "object") &&
+        //                         error.unsafeDereference();
+        // errorMessage = unsafeDereference && unsafeDereference.toString
+        //   ? unsafeDereference.toString()
+        //   : String(error);
 
           // It is possible that we won't have permission to unwrap an
           // object and retrieve its errorMessageName.
         try {
           errorDocURL = ErrorDocs.GetURL(error);
         } catch (ex) {}
       }
     }
