# HG changeset patch
# Parent 72f3878bb7a73dcdbbae4bad7c0bcd06dab5724c
# User Brian Grinstead <bgrinstead@mozilla.com>
Memory leak testing

diff --git a/browser/devtools/itchpad/lib/stores/local.js b/browser/devtools/itchpad/lib/stores/local.js
--- a/browser/devtools/itchpad/lib/stores/local.js
+++ b/browser/devtools/itchpad/lib/stores/local.js
@@ -46,18 +46,29 @@ var LocalStore = Class({
     this.displayName = this.path;
     this.setRoot(this._forPath(this.path));
     this.refreshLoop = this.refreshLoop.bind(this);
     this.refreshLoop();
   },
 
   destroy: function() {
     this.window.clearTimeout(this._refreshTimeout);
+    if (this._refreshDeferred) {
+      this._refreshDeferred.reject("destroy");
+    }
+    this.worker.terminate();
+
     this._refreshTimeout = null;
+    this._refreshDeferred = null;
     this.window = null;
+    this.worker = null;
+
+    if (this.root) {
+      this.root.destroy();
+    }
   },
 
   toString: function() { return "[LocalStore:" + this.path + "]" },
 
   /**
    * Return a FileResource object for the given path.  If a FileInfo
    * is provided, the resource will use it, otherwise the FileResource
    * might not have full information until the next refresh.
@@ -114,29 +125,28 @@ var LocalStore = Class({
       if (SHOULD_LIVE_REFRESH) {
         this._refreshTimeout = this.window.setTimeout(this.refreshLoop,
           CHECK_LINKED_DIRECTORY_DELAY);
       }
     });
   },
 
   _refreshTimeout: null,
-  _refreshPromise: null,
+  _refreshDeferred: null,
 
   /**
    * Refresh the directory structure.
    */
   refresh: function(path=this.rootPath) {
-    if (this._refreshPromise) {
-      return this._refreshPromise.promise;
+    if (this._refreshDeferred) {
+      return this._refreshDeferred.promise;
     }
+    this._refreshDeferred = promise.defer();
 
-    this._refreshPromise = promise.defer();
-
-    let worker = new ChromeWorker("chrome://browser/content/devtools/readdir.js");
+    let worker = this.worker = new ChromeWorker("chrome://browser/content/devtools/readdir.js");
     let start = Date.now();
 
     worker.onmessage = evt => {
       // console.log("Directory read finished in " + ( Date.now() - start ) +"ms", evt);
       for (path in evt.data) {
         let info = evt.data[path];
         info.path = path;
 
@@ -149,27 +159,27 @@ var LocalStore = Class({
             newChildren.add(this._forPath(childPath, childInfo));
           }
           resource.setChildren(newChildren);
         }
         resource.info.children = null;
       }
 
       worker = null;
-      this._refreshPromise.resolve();
-      this._refreshPromise = null;
+      this._refreshDeferred.resolve();
+      this._refreshDeferred = null;
     };
     worker.onerror = ex => {
       console.error(ex);
       worker = null;
-      this._refreshPromise.reject(ex);
-      this._refreshPromise = null;
+      this._refreshDeferred.reject(ex);
+      this._refreshDeferred = null;
     }
     worker.postMessage({ path: this.rootPath, ignore: IGNORE_REGEX });
-    return this._refreshPromise.promise;
+    return this._refreshDeferred.promise;
   },
 
   /**
    * Returns true if the given path would be a child of the store's
    * root directory.
    */
   contains: function(path) {
     path = OS.Path.normalize(path);
@@ -211,23 +221,38 @@ var FileResource = Class({
     this.info = info;
     this.parent = null;
   },
 
   toString: function() {
     return "[FileResource:" + this.path + "]";
   },
 
+  destroy: function() {
+    if (this._refreshDeferred) {
+      this._refreshDeferred.reject();
+    }
+    this._refreshDeferred = null;
+  },
+
+  // Fetch and cache information about this particular file
+  // https://developer.mozilla.org/en-US/docs/JavaScript_OS.File/OS.File_for_the_main_thread#OS.File.stat
   refresh: function() {
-    console.log("Starting refresh");
-    return OS.File.stat(this.path).then(info => {
-      console.log("refresh complete!");
+    if (this._refreshDeferred) {
+      return this._refreshDeferred.promise;
+    }
+    this._refreshDeferred = promise.defer();
+    OS.File.stat(this.path).then(info => {
       this.info = info;
-      return this;
+      if (this._refreshDeferred) {
+        this._refreshDeferred.resolve(this);
+        this._refreshDeferred = null;
+      }
     });
+    return this._refreshDeferred.promise;
   },
 
   get displayName() { return this.basename + (this.isDir ? "/" : "") },
 
   get isDir() {
     if (!this.info) { return false; }
     return this.info.isDir && !this.info.isSymLink;
   },
diff --git a/browser/devtools/itchpad/lib/tree.js b/browser/devtools/itchpad/lib/tree.js
--- a/browser/devtools/itchpad/lib/tree.js
+++ b/browser/devtools/itchpad/lib/tree.js
@@ -187,16 +187,17 @@ var TreeView = Class({
     this.elt.appendChild(this.children);
 
     this.nodeChildrenChanged = this.nodeChildrenChanged.bind(this);
     this.updateNode = this.updateNode.bind(this);
   },
 
   destroy: function() {
     this._destroyed = true;
+    this.elt.remove();
   },
 
   promptNew: function(initial, parent, sibling=null) {
     let deferred = promise.defer();
 
     let parentContainer = this._containers.get(parent);
     // Give child updates something to wait on...
     parentContainer.prompting = deferred.promise;
@@ -240,17 +241,17 @@ var TreeView = Class({
       return;
     }
     this.models.add(model);
     let placeholder = this.doc.createElementNS(HTML_NS, "li");
     placeholder.style.display = "none";
     this.children.appendChild(placeholder);
     this.roots.add(model.root);
     model.root.refresh().then(root => {
-      if (!this.models.has(model) || this._destroyed) {
+      if (this._destroyed || !this.models.has(model)) {
         // model may have been removed during the initial refresh.
         // In this case, do not import the node or add to DOM, just leave it be.
         return;
       }
       let container = this.importNode(root);
       container.line.classList.add("side-menu-widget-group-title");
       container.line.setAttribute("theme", "dark");
       this.selectContainer(container);
@@ -258,16 +259,17 @@ var TreeView = Class({
       this.children.insertBefore(container.elt, placeholder);
       this.children.removeChild(placeholder);
     });
   },
 
   removeModel: function(model) {
     this.models.delete(model);
     this.removeNode(model.root);
+    model.destroy();
   },
 
   select: function(node) {
     this.selectContainer(this._containers.get(node));
   },
 
   selectContainer: function(container) {
     if (this.selectedContainer === container) {
