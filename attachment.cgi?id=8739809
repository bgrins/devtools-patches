# HG changeset patch
# User Steve Melia <steve.j.melia@gmail.com>
# Date 1460325158 -3600
#      Sun Apr 10 22:52:38 2016 +0100
# Node ID 72b92f661f2707b4943c071c26bbb57e6e1bcd71
# Parent  e855d662a3da4f61e02b925320255fe176ef3043
Bug 1259812: Replace XUL elements with XHTML in inspector breadcrumbs;r=bgrins

diff --git a/devtools/client/inspector/breadcrumbs.js b/devtools/client/inspector/breadcrumbs.js
--- a/devtools/client/inspector/breadcrumbs.js
+++ b/devtools/client/inspector/breadcrumbs.js
@@ -6,37 +6,190 @@
 
 "use strict";
 
 const {Cu, Ci} = require("chrome");
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 const Services = require("Services");
 const promise = require("promise");
 
-const ENSURE_SELECTION_VISIBLE_DELAY = 50; // ms
 const ELLIPSIS = Services.prefs.getComplexValue("intl.ellipsis", Ci.nsIPrefLocalizedString).data;
 const MAX_LABEL_LENGTH = 40;
 const LOW_PRIORITY_ELEMENTS = {
   "HEAD": true,
   "BASE": true,
   "BASEFONT": true,
   "ISINDEX": true,
   "LINK": true,
   "META": true,
   "SCRIPT": true,
   "STYLE": true,
   "TITLE": true
 };
 
+const NS_XHTML = "http://www.w3.org/1999/xhtml";
+const SCROLL_REPEAT_MS = 100;
+
+function ArrowScrollBox(chromeWin, chromeDoc, container) {
+  this.chromeWin = chromeWin;
+  this.chromeDoc = chromeDoc;
+  this.container = container;
+  this._init();
+}
+
+ArrowScrollBox.prototype = {
+  _init: function() {
+    this.constructHtml();
+
+    this.onunderflow();
+
+    this.inner.addEventListener("scroll", this.onscroll.bind(this), false);
+    this.inner.addEventListener("underflow", this.onunderflow.bind(this), false);
+    this.inner.addEventListener("overflow", this.onoverflow.bind(this), false);
+    this.leftBtn.addEventListener("mousedown", this.leftBtnClick.bind(this), false);
+    this.rightBtn.addEventListener("mousedown", this.rightBtnClick.bind(this), false);
+  },
+
+  clickOrHold: function(repeatFn) {
+    repeatFn = repeatFn.bind(this);
+
+    let timer;
+    let container = this.container;
+
+    function handleClick() {
+      cancelHold();
+      repeatFn();
+    }
+
+    let window = this.chromeWin;
+    function cancelHold() {
+      window.clearTimeout(timer)
+      container.removeEventListener("mouseout", cancelHold, false);
+      container.removeEventListener("mouseup", handleClick, false);
+    };
+
+    function repeated() {
+      repeatFn();
+      timer = window.setTimeout(repeated, SCROLL_REPEAT_MS);
+    };
+
+    container.addEventListener("mouseout", cancelHold, false);
+    container.addEventListener("mouseup", handleClick, false);
+    timer = window.setTimeout(repeated, SCROLL_REPEAT_MS);
+  },
+
+  leftBtnClick: function() {
+    let scrollLeft = function() {
+      let element = this.getFirstInvisibleElement();
+      if (element === null) {
+        return;
+      }
+
+      element.scrollIntoView({ block: "start", behavior: "smooth" });
+    };
+
+    this.clickOrHold(scrollLeft);
+  },
+
+  rightBtnClick: function() {
+    let scrollRight = function() {
+      let element = this.getLastInvisibleElement();
+      if (element == null) {
+        return;
+      }
+
+      element.scrollIntoView({ block: "end", behavior: "smooth" });
+    };
+  
+    this.clickOrHold(scrollRight);
+  },
+
+  onscroll: function() {
+    let first = this.getFirstInvisibleElement();
+    if (first === null) {
+      this.leftBtn.setAttribute("disabled", "true");
+    } else {
+      this.leftBtn.removeAttribute("disabled");
+    }
+ 
+    let last = this.getLastInvisibleElement();
+    if (last === null) {
+      this.rightBtn.setAttribute("disabled", "true");
+    } else {
+      this.rightBtn.removeAttribute("disabled");
+    }
+  },
+
+  onunderflow: function() {
+    this.leftBtn.style.visibility = "collapse";
+    this.rightBtn.style.visibility = "collapse";
+  },
+
+  onoverflow: function() {
+    this.leftBtn.style.visibility = "visible";
+    this.rightBtn.style.visibility = "visible";
+  },
+
+  getFirstInvisibleElement: function() {
+    let left = this.inner.scrollLeft;
+    for (let element of this.inner.childNodes) {
+      if (element.offsetLeft > left) {
+        return element.previousSibling;
+      }
+    }
+
+    return null;
+  },
+
+  getLastInvisibleElement: function() {
+    let right = this.inner.scrollLeft + this.inner.clientWidth;
+    let elementLeft = 0;
+    for (let element of this.inner.childNodes) {
+      let elementRight = elementLeft + element.offsetWidth;
+      elementLeft = elementRight;
+      if (elementRight > right) {
+        return element;
+      }
+    }
+
+    return null;
+  },
+
+  constructHtml: function() {
+    this.leftBtn = this.divFactory("scrollbutton-up");
+    let leftBtnIcon = this.divFactory("toolbarbutton-icon");
+    this.leftBtn.appendChild(leftBtnIcon);
+    this.container.appendChild(this.leftBtn);
+
+    let startIndicator = this.divFactory("arrowscrollbox-overflow-start-indicator");
+    this.container.appendChild(startIndicator);
+
+    this.inner = this.divFactory("html-arrowscrollbox-inner");
+    this.container.appendChild(this.inner);
+
+    let endIndicator = this.divFactory("arrowscrollbox-overflow-end-indicator");
+    this.container.appendChild(endIndicator);
+
+    this.rightBtn = this.divFactory("scrollbutton-down");
+    let rightBtnIcon = this.divFactory("toolbarbutton-icon");
+    this.rightBtn.appendChild(rightBtnIcon);
+    this.container.appendChild(this.rightBtn);
+  },
+  
+  divFactory : function(className) {
+    let div = this.chromeDoc.createElementNS(NS_XHTML, "div");
+    div.className = className;
+    return div;
+  },
+}; 
+
 /**
  * Display the ancestors of the current node and its children.
  * Only one "branch" of children are displayed (only one line).
  *
- * FIXME: Bug 822388 - Use the BreadcrumbsWidget in the Inspector.
- *
  * Mechanism:
  * - If no nodes displayed yet:
  *   then display the ancestor of the selected node and the selected node;
  *   else select the node;
  * - If the selected node is the last node displayed, append its first (if any).
  *
  * @param {InspectorPanel} inspector The inspector hosting this widget.
  */
@@ -51,56 +204,42 @@ function HTMLBreadcrumbs(inspector) {
 exports.HTMLBreadcrumbs = HTMLBreadcrumbs;
 
 HTMLBreadcrumbs.prototype = {
   get walker() {
     return this.inspector.walker;
   },
 
   _init: function() {
-    this.container = this.chromeDoc.getElementById("inspector-breadcrumbs");
+    let outer = this.chromeDoc.getElementById("inspector-breadcrumbs");
+    this.arrowScrollBox = new ArrowScrollBox(this.chromeWin, this.chromeDoc, outer);
 
+    this.container = this.arrowScrollBox.inner;
+ 
     // These separators are used for CSS purposes only, and are positioned
     // off screen, but displayed with -moz-element.
-    this.separators = this.chromeDoc.createElement("box");
+    this.separators = this.chromeDoc.createElementNS(NS_XHTML, "div");
     this.separators.className = "breadcrumb-separator-container";
     this.separators.innerHTML =
-                      "<box id='breadcrumb-separator-before'></box>" +
-                      "<box id='breadcrumb-separator-after'></box>" +
-                      "<box id='breadcrumb-separator-normal'></box>";
+                      "<div id='breadcrumb-separator-before'></div>" +
+                      "<div id='breadcrumb-separator-after'></div>" +
+                      "<div id='breadcrumb-separator-normal'></div>";
     this.container.parentNode.appendChild(this.separators);
 
-    this.container.addEventListener("mousedown", this, true);
+    this.container.addEventListener("click", this, true);
     this.container.addEventListener("keypress", this, true);
     this.container.addEventListener("mouseover", this, true);
     this.container.addEventListener("mouseleave", this, true);
 
     // We will save a list of already displayed nodes in this array.
     this.nodeHierarchy = [];
 
     // Last selected node in nodeHierarchy.
     this.currentIndex = -1;
 
-    // By default, hide the arrows. We let the <scrollbox> show them
-    // in case of overflow.
-    this.container.removeAttribute("overflows");
-    this.container._scrollButtonUp.collapsed = true;
-    this.container._scrollButtonDown.collapsed = true;
-
-    this.onscrollboxreflow = () => {
-      if (this.container._scrollButtonDown.collapsed) {
-        this.container.removeAttribute("overflows");
-      } else {
-        this.container.setAttribute("overflows", true);
-      }
-    };
-
-    this.container.addEventListener("underflow", this.onscrollboxreflow, false);
-    this.container.addEventListener("overflow", this.onscrollboxreflow, false);
-
     this.update = this.update.bind(this);
     this.updateSelectors = this.updateSelectors.bind(this);
     this.selection.on("new-node-front", this.update);
     this.selection.on("pseudoclass", this.updateSelectors);
     this.selection.on("attribute-changed", this.updateSelectors);
     this.inspector.on("markupmutation", this.update);
     this.update();
   },
@@ -165,28 +304,29 @@ HTMLBreadcrumbs.prototype = {
    * Build <label>s that represent the node:
    *   <label class="breadcrumbs-widget-item-tag">tagName</label>
    *   <label class="breadcrumbs-widget-item-id">#id</label>
    *   <label class="breadcrumbs-widget-item-classes">.class1.class2</label>
    * @param {NodeFront} node The node to pretty-print
    * @returns {DocumentFragment}
    */
   prettyPrintNodeAsXUL: function(node) {
-    let fragment = this.chromeDoc.createDocumentFragment();
-
-    let tagLabel = this.chromeDoc.createElement("label");
+    let tagLabel = this.chromeDoc.createElementNS(NS_XHTML, "label");
     tagLabel.className = "breadcrumbs-widget-item-tag plain";
 
-    let idLabel = this.chromeDoc.createElement("label");
+    // @todo these will end up with moz-devtools-highlighted
+    // when focussed.
+    // which does not happen with a XUL element
+    let idLabel = this.chromeDoc.createElementNS(NS_XHTML, "label");
     idLabel.className = "breadcrumbs-widget-item-id plain";
 
-    let classesLabel = this.chromeDoc.createElement("label");
+    let classesLabel = this.chromeDoc.createElementNS(NS_XHTML, "label");
     classesLabel.className = "breadcrumbs-widget-item-classes plain";
 
-    let pseudosLabel = this.chromeDoc.createElement("label");
+    let pseudosLabel = this.chromeDoc.createElementNS(NS_XHTML, "label");
     pseudosLabel.className = "breadcrumbs-widget-item-pseudo-classes plain";
 
     let tagText = node.tagName.toLowerCase();
     if (node.isPseudoElement) {
       tagText = node.isBeforePseudoElement ? "::before" : "::after";
     }
     let idText = node.id ? ("#" + node.id) : "";
     let classesText = "";
@@ -215,123 +355,50 @@ HTMLBreadcrumbs.prototype = {
       classesText = classesText.substr(0, maxClassLength) + ELLIPSIS;
     }
 
     tagLabel.textContent = tagText;
     idLabel.textContent = idText;
     classesLabel.textContent = classesText;
     pseudosLabel.textContent = node.pseudoClassLocks.join("");
 
+    let fragment = this.chromeDoc.createDocumentFragment();
     fragment.appendChild(tagLabel);
     fragment.appendChild(idLabel);
     fragment.appendChild(classesLabel);
     fragment.appendChild(pseudosLabel);
 
     return fragment;
   },
 
   /**
-   * Open the sibling menu.
-   * @param {DOMNode} button the button representing the node.
-   * @param {NodeFront} node the node we want the siblings from.
-   */
-  openSiblingMenu: function(button, node) {
-    // We make sure that the targeted node is selected
-    // because we want to use the nodemenu that only works
-    // for inspector.selection
-    this.navigateTo(node);
-
-    // Build a list of extra menu items that will be appended at the end of the
-    // inspector node context menu.
-    let items = [this.chromeDoc.createElement("menuseparator")];
-
-    this.walker.siblings(node, {
-      whatToShow: Ci.nsIDOMNodeFilter.SHOW_ELEMENT
-    }).then(siblings => {
-      let nodes = siblings.nodes;
-      for (let i = 0; i < nodes.length; i++) {
-        // Skip siblings of the documentElement node.
-        if (nodes[i].nodeType !== Ci.nsIDOMNode.ELEMENT_NODE) {
-          continue;
-        }
-
-        let item = this.chromeDoc.createElement("menuitem");
-        if (nodes[i] === node) {
-          item.setAttribute("disabled", "true");
-          item.setAttribute("checked", "true");
-        }
-
-        item.setAttribute("type", "radio");
-        item.setAttribute("label", this.prettyPrintNodeAsText(nodes[i]));
-
-        let self = this;
-        item.onmouseup = (function(node) {
-          return function() {
-            self.navigateTo(node);
-          };
-        })(nodes[i]);
-
-        items.push(item);
-      }
-
-      // Append the items to the inspector node context menu and show the menu.
-      this.inspector.showNodeMenu(button, "before_start", items);
-    });
-  },
-
-  /**
    * Generic event handler.
    * @param {DOMEvent} event.
    */
   handleEvent: function(event) {
-    if (event.type == "mousedown" && event.button == 0) {
-      this.handleMouseDown(event);
+    if (event.type == "click" && event.button == 0) {
+      this.handleClick(event);
     } else if (event.type == "keypress" && this.selection.isElementNode()) {
       this.handleKeyPress(event);
     } else if (event.type == "mouseover") {
       this.handleMouseOver(event);
     } else if (event.type == "mouseleave") {
       this.handleMouseLeave(event);
     }
   },
 
   /**
-   * On click and hold, open the siblings menu.
+   * On click navigate to the correct node.
    * @param {DOMEvent} event.
    */
-  handleMouseDown: function(event) {
-    let timer;
-    let container = this.container;
-
-    function openMenu(event) {
-      cancelHold();
-      let target = event.originalTarget;
-      if (target.tagName == "button") {
-        target.onBreadcrumbsHold();
-      }
+  handleClick: function(event) {
+    let target = event.originalTarget;
+    if (target.tagName == "button") {
+      target.onBreadcrumbsClick();
     }
-
-    function handleClick(event) {
-      cancelHold();
-      let target = event.originalTarget;
-      if (target.tagName == "button") {
-        target.onBreadcrumbsClick();
-      }
-    }
-
-    let window = this.chromeWin;
-    function cancelHold(event) {
-      window.clearTimeout(timer);
-      container.removeEventListener("mouseout", cancelHold, false);
-      container.removeEventListener("mouseup", handleClick, false);
-    }
-
-    container.addEventListener("mouseout", cancelHold, false);
-    container.addEventListener("mouseup", handleClick, false);
-    timer = window.setTimeout(openMenu, 500, event);
   },
 
   /**
    * On mouse over, highlight the corresponding content DOM Node.
    * @param {DOMEvent} event.
    */
   handleMouseOver: function(event) {
     let target = event.originalTarget;
@@ -392,27 +459,24 @@ HTMLBreadcrumbs.prototype = {
    * Remove nodes and clean up.
    */
   destroy: function() {
     this.selection.off("new-node-front", this.update);
     this.selection.off("pseudoclass", this.updateSelectors);
     this.selection.off("attribute-changed", this.updateSelectors);
     this.inspector.off("markupmutation", this.update);
 
-    this.container.removeEventListener("underflow", this.onscrollboxreflow, false);
-    this.container.removeEventListener("overflow", this.onscrollboxreflow, false);
-    this.container.removeEventListener("mousedown", this, true);
+    this.container.removeEventListener("click", this, true);
     this.container.removeEventListener("keypress", this, true);
     this.container.removeEventListener("mouseover", this, true);
     this.container.removeEventListener("mouseleave", this, true);
 
     this.empty();
     this.separators.remove();
 
-    this.onscrollboxreflow = null;
     this.container = null;
     this.separators = null;
     this.nodeHierarchy = null;
 
     this.isDestroyed = true;
   },
 
   /**
@@ -477,17 +541,17 @@ HTMLBreadcrumbs.prototype = {
   },
 
   /**
    * Build a button representing the node.
    * @param {NodeFront} node The node from the page.
    * @return {DOMNode} The <button> for this node.
    */
   buildButton: function(node) {
-    let button = this.chromeDoc.createElement("button");
+    let button = this.chromeDoc.createElementNS(NS_XHTML, "button");
     button.appendChild(this.prettyPrintNodeAsXUL(node));
     button.className = "breadcrumbs-widget-item";
 
     button.setAttribute("tooltiptext", this.prettyPrintNodeAsText(node));
 
     button.onkeypress = function onBreadcrumbsKeypress(e) {
       if (e.charCode == Ci.nsIDOMKeyEvent.DOM_VK_SPACE ||
           e.keyCode == Ci.nsIDOMKeyEvent.DOM_VK_RETURN) {
@@ -498,26 +562,16 @@ HTMLBreadcrumbs.prototype = {
     button.onBreadcrumbsClick = () => {
       this.navigateTo(node);
     };
 
     button.onBreadcrumbsHover = () => {
       this.inspector.toolbox.highlighterUtils.highlightNodeFront(node);
     };
 
-    button.onclick = (function _onBreadcrumbsRightClick(event) {
-      button.focus();
-      if (event.button == 2) {
-        this.openSiblingMenu(button, node);
-      }
-    }).bind(this);
-
-    button.onBreadcrumbsHold = (function _onBreadcrumbsHold() {
-      this.openSiblingMenu(button, node);
-    }).bind(this);
     return button;
   },
 
   /**
    * Connecting the end of the breadcrumbs to a node.
    * @param {NodeFront} node The node to reach.
    */
   expand: function(node) {
@@ -621,26 +675,18 @@ HTMLBreadcrumbs.prototype = {
     return resolveNextTick(true);
   },
 
   /**
    * Ensure the selected node is visible.
    */
   scroll: function() {
     // FIXME bug 684352: make sure its immediate neighbors are visible too.
-
-    let scrollbox = this.container;
     let element = this.nodeHierarchy[this.currentIndex].button;
-
-    // Repeated calls to ensureElementIsVisible would interfere with each other
-    // and may sometimes result in incorrect scroll positions.
-    this.chromeWin.clearTimeout(this._ensureVisibleTimeout);
-    this._ensureVisibleTimeout = this.chromeWin.setTimeout(function() {
-      scrollbox.ensureElementIsVisible(element);
-    }, ENSURE_SELECTION_VISIBLE_DELAY);
+    element.scrollIntoView({ block: "end", behavior: "smooth" });
   },
 
   /**
    * Update all button outputs.
    */
   updateSelectors: function() {
     if (this.isDestroyed) {
       return;
diff --git a/devtools/client/inspector/inspector.css b/devtools/client/inspector/inspector.css
--- a/devtools/client/inspector/inspector.css
+++ b/devtools/client/inspector/inspector.css
@@ -27,9 +27,41 @@
   max-width: 150px;
 }
 
 .inspector-tabpanel > * {
   /*
    * Override `-moz-user-focus:ignore;` from toolkit/content/minimal-xul.css
    */
   -moz-user-focus: normal;
-}
\ No newline at end of file
+}
+
+#inspector-breadcrumbs-toolbar, #inspector-breadcrumbs-toolbar * {
+  /* From minimal-xul.css */
+  -moz-user-focus: ignore;
+  -moz-user-select: none;
+  box-sizing: border-box;
+}
+
+#inspector-breadcrumbs {
+  display: -moz-box;
+}
+
+.scrollbutton-up, .scrollbutton-down {
+  -moz-box-flex: 0;
+  display: -moz-box;
+}
+
+.html-arrowscrollbox-inner {
+  display: -moz-box;
+  overflow: hidden;
+  -moz-box-flex: 1;
+}
+
+.breadcrumbs-widget-item {
+  -moz-box-flex: 0 0 auto;
+}
+
+#inspector-breadcrumbs-inner {
+	overflow:hidden;
+}
+
+
diff --git a/devtools/client/inspector/inspector.xul b/devtools/client/inspector/inspector.xul
--- a/devtools/client/inspector/inspector.xul
+++ b/devtools/client/inspector/inspector.xul
@@ -165,24 +165,19 @@
           class="devtools-searchinput"
           placeholder="&inspectorSearchHTML.label3;"/>
         <toolbarbutton id="inspector-pane-toggle"
           class="devtools-toolbarbutton"
           tabindex="0" />
       </toolbar>
       <vbox flex="1" id="markup-box">
       </vbox>
-      <toolbar id="inspector-breadcrumbs-toolbar"
-        class="devtools-toolbar"
-        nowindowdrag="true">
-        <arrowscrollbox id="inspector-breadcrumbs"
-          class="breadcrumbs-widget-container"
-          flex="1" orient="horizontal"
-          clicktoscroll="true"/>
-      </toolbar>
+      <html:div id="inspector-breadcrumbs-toolbar" class="devtools-toolbar">
+        <html:div id="inspector-breadcrumbs" class="breadcrumbs-widget-container"/>
+      </html:div>
     </vbox>
     <splitter class="devtools-side-splitter"/>
     <tabbox id="inspector-sidebar" handleCtrlTab="false" class="devtools-sidebar-tabs" hidden="true">
       <tabs>
         <tab id="sidebar-tab-ruleview"
              label="&ruleViewTitle;"
              crop="end"/>
         <tab id="sidebar-tab-computedview"
