commit a7c6c0598ced6470900f81b8c47a887c2ec5f8a8
Author: James Long <longster@gmail.com>
Date:   Thu Feb 4 10:03:08 2016 -0500

    Bug 1243406 - enable CSS/SVG/PNG hot reloading for all devtools panels r=bgrins

diff --git a/devtools/client/debugger/debugger.xul b/devtools/client/debugger/debugger.xul
index 18fa32f..b71d154 100644
--- a/devtools/client/debugger/debugger.xul
+++ b/devtools/client/debugger/debugger.xul
@@ -1,15 +1,15 @@
 <?xml version="1.0" encoding="utf-8"?>
 <!-- This Source Code Form is subject to the terms of the Mozilla Public
    - License, v. 2.0. If a copy of the MPL was not distributed with this
    - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
 <?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
 <?xml-stylesheet href="chrome://devtools/content/shared/widgets/widgets.css" type="text/css"?>
-<?xml-stylesheet href="debugger.css" type="text/css"?>
+<?xml-stylesheet href="chrome://devtools/content/debugger/debugger.css" type="text/css"?>
 <?xml-stylesheet href="chrome://devtools/skin/common.css" type="text/css"?>
 <?xml-stylesheet href="chrome://devtools/skin/widgets.css" type="text/css"?>
 <?xml-stylesheet href="chrome://devtools/skin/debugger.css" type="text/css"?>
 <!DOCTYPE window [
   <!ENTITY % debuggerDTD SYSTEM "chrome://devtools/locale/debugger.dtd">
   %debuggerDTD;
 ]>
 <?xul-overlay href="chrome://global/content/editMenuOverlay.xul"?>
diff --git a/devtools/client/shared/browser-loader.js b/devtools/client/shared/browser-loader.js
index 66d3dc6..03778f5 100644
--- a/devtools/client/shared/browser-loader.js
+++ b/devtools/client/shared/browser-loader.js
@@ -18,42 +18,26 @@ const BROWSER_BASED_DIRS = [
   "resource://devtools/client/shared/redux"
 ];
 
 function clearCache() {
   Services.obs.notifyObservers(null, "startupcache-invalidate", null);
 }
 
 function hotReloadFile(window, require, loader, componentProxies, fileURI) {
-  dump("Hot reloading: " + fileURI + "\n");
-
   if (fileURI.match(/\.js$/)) {
     // Test for React proxy components
     const proxy = componentProxies.get(fileURI);
     if (proxy) {
       // Remove the old module and re-require the new one; the require
       // hook in the loader will take care of the rest
       delete loader.modules[fileURI];
       clearCache();
       require(fileURI);
     }
-  } else if (fileURI.match(/\.css$/)) {
-    const links = [...window.document.getElementsByTagNameNS("http://www.w3.org/1999/xhtml", "link")];
-    links.forEach(link => {
-      if (link.href.indexOf(fileURI) === 0) {
-        const parentNode = link.parentNode;
-        const newLink = window.document.createElementNS("http://www.w3.org/1999/xhtml", "link");
-        newLink.rel = "stylesheet";
-        newLink.type = "text/css";
-        newLink.href = fileURI + "?s=" + Math.random();
-
-        parentNode.insertBefore(newLink, link);
-        parentNode.removeChild(link);
-      }
-    });
   }
 }
 
 /*
  * Create a loader to be used in a browser environment. This evaluates
  * modules in their own environment, but sets window (the normal
  * global object) as the sandbox prototype, so when a variable is not
  * defined it checks `window` before throwing an error. This makes all
@@ -146,18 +130,21 @@ function BrowserLoader(baseURI, window) {
 
 
   const mainModule = loaders.Module(baseURI, joinURI(baseURI, "main.js"));
   const mainLoader = loaders.Loader(opts);
   const require = loaders.Require(mainLoader, mainModule);
 
   if (hotReloadEnabled) {
     const watcher = devtools.require("devtools/client/shared/file-watcher");
-    function onFileChanged(_, fileURI) {
-      hotReloadFile(window, require, mainLoader, componentProxies, fileURI);
+    function onFileChanged(_, relativePath) {
+      hotReloadFile(
+        window, require, mainLoader, componentProxies,
+        "resource://devtools/" + relativePath
+      );
     }
     watcher.on("file-changed", onFileChanged);
 
     window.addEventListener("unload", () => {
       watcher.off("file-changed", onFileChanged);
     });
   }
 
diff --git a/devtools/client/shared/css-reload.js b/devtools/client/shared/css-reload.js
new file mode 100644
index 0000000..0638986
--- /dev/null
+++ b/devtools/client/shared/css-reload.js
@@ -0,0 +1,138 @@
+const { Services } = require("resource://gre/modules/Services.jsm");
+const { getTheme } = require("devtools/client/shared/theme");
+
+function iterStyleNodes(window, func) {
+  for (let node of window.document.childNodes) {
+    if (node.nodeType === 7) {
+      func(node);
+    }
+  }
+
+  const links = window.document.getElementsByTagNameNS(
+    "http://www.w3.org/1999/xhtml", "link"
+  );
+  for (let node of links) {
+    func(node);
+  }
+}
+
+function replaceCSS(window, fileURI) {
+  const document = window.document;
+  Services.obs.notifyObservers(null, "startupcache-invalidate", null);
+
+  // Special-case these two files that are imported by the theme and
+  // reload the entire theme file instead.
+  if (fileURI === "chrome://devtools/skin/variables.css" ||
+     fileURI === "chrome://devtools/skin/toolbars.css") {
+    fileURI = "chrome://devtools/skin/" + getTheme() + "-theme.css"
+  }
+
+  // Scan every CSS tag and reload ones that match the file we are
+  // looking for.
+  iterStyleNodes(window, node => {
+    if (node.nodeType === 7) {
+      // xml-stylesheet declaration
+      if (node.data.includes(fileURI)) {
+        const newNode = window.document.createProcessingInstruction(
+          "xml-stylesheet",
+          "href=\"" + fileURI + "?s=" + Math.random() +
+            "\" type=\"text/css\""
+        );
+        document.insertBefore(newNode, node);
+        document.removeChild(node);
+      }
+    } else {
+      if (node.href.includes(fileURI)) {
+        const parentNode = node.parentNode;
+        const newNode = window.document.createElementNS(
+          "http://www.w3.org/1999/xhtml",
+          "link"
+        );
+        newNode.rel = "stylesheet";
+        newNode.type = "text/css";
+        newNode.href = fileURI + "?s=" + Math.random();
+
+        parentNode.insertBefore(newNode, node);
+        parentNode.removeChild(node);
+      }
+    }
+  });
+}
+
+function _replaceResourceInSheet(sheet, filename) {
+  for (var i = 0; i < sheet.cssRules.length; i++) {
+    const rule = sheet.cssRules[i];
+    if (rule.type === rule.IMPORT_RULE) {
+      _replaceResourceInSheet(rule.styleSheet, filename);
+    }
+    else if (rule.cssText.includes(filename)) {
+      // Strip off any existing query strings. This might lose
+      // updates for files if there are multiple resources
+      // referenced in the same rule, but the chances of someone hot
+      // reloading multiple resources in the same rule is very low.
+      const text = rule.cssText.replace(/\?s=0.\d+/g, '');
+      const newRule = (
+        text.replace(filename, filename + "?s=" + Math.random())
+      );
+
+      sheet.deleteRule(i);
+      sheet.insertRule(newRule, i);
+    }
+  }
+}
+
+function replaceCSSResource(window, fileURI) {
+  const document = window.document;
+
+  // Only match the filename. False positives are much better than
+  // missing updates, as all that would happen is we reload more
+  // resources than we need. We do this because many resources only
+  // use relative paths.
+  const parts = fileURI.split('/');
+  const file = parts[parts.length - 1];
+
+  // Scan every single rule in the entire page for any reference to
+  // this resource, and re-insert the rule to force it to update.
+  for (let sheet of document.styleSheets) {
+    _replaceResourceInSheet(sheet, file);
+  }
+
+  for(let node of document.querySelectorAll('img,image')) {
+    if(node.src.startsWith(fileURI)) {
+      node.src = fileURI + "?s=" + Math.random();
+    }
+  }
+}
+
+function watchCSS(window) {
+  if (Services.prefs.getBoolPref("devtools.loader.hotreload")) {
+    const watcher = require("devtools/client/shared/file-watcher");
+
+    function onFileChanged(_, relativePath) {
+      if (relativePath.match(/\.css$/)) {
+        if (relativePath.startsWith("client/themes")) {
+          relativePath = relativePath.replace(/^client\/themes\//, "")
+          replaceCSS(window, "chrome://devtools/skin/" + relativePath);
+          return;
+        }
+
+        replaceCSS(
+          window,
+          "chrome://devtools/content/" +
+            relativePath.replace(/^client\//, "")
+        );
+        replaceCSS(window, "resource://devtools/" + relativePath);
+      } else if (relativePath.match(/\.(svg|png)$/)) {
+        relativePath = relativePath.replace(/^client\/themes\//, '');
+        replaceCSSResource(window, "chrome://devtools/skin/" + relativePath);
+      }
+    }
+    watcher.on("file-changed", onFileChanged);
+
+    window.addEventListener("unload", () => {
+      watcher.off("file-changed", onFileChanged);
+    });
+  }
+}
+
+module.exports = { watchCSS };
diff --git a/devtools/client/shared/file-watcher.js b/devtools/client/shared/file-watcher.js
index f423a64..6cdceee 100644
--- a/devtools/client/shared/file-watcher.js
+++ b/devtools/client/shared/file-watcher.js
@@ -1,16 +1,18 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
-const { Ci, ChromeWorker } = require("chrome");
+const { Ci, Cu, ChromeWorker } = require("chrome");
 const { Services } = require("resource://gre/modules/Services.jsm");
 const EventEmitter = require("devtools/shared/event-emitter");
+const { joinURI } = require("devtools/shared/path");
+Cu.import("resource://gre/modules/AppConstants.jsm");
 
 const HOTRELOAD_PREF = "devtools.loader.hotreload";
 
 function resolveResourceURI(uri) {
   const handler = Services.io.getProtocolHandler("resource")
         .QueryInterface(Ci.nsIResProtocolHandler);
   return handler.resolveURI(Services.io.newURI(uri, null, null));
 }
@@ -18,51 +20,52 @@ function resolveResourceURI(uri) {
 function watchFiles(path, onFileChanged) {
   if (!path.startsWith("devtools/")) {
     throw new Error("`watchFiles` expects a devtools path");
   }
 
   // We need to figure out a local path to watch. We start with
   // whatever devtools points to.
   let resolvedRootURI = resolveResourceURI("resource://devtools");
-  if (resolvedRootURI.match(/\/obj\-.*/)) {
+
+  const appNameIndex = resolvedRootURI.indexOf(AppConstants.MOZ_MACBUNDLE_NAME);
+  if (appNameIndex !== -1) {
     // Move from the built directory to the user's local files
-    resolvedRootURI = resolvedRootURI.replace(/\/obj\-.*/, "") + "/devtools";
+    resolvedRootURI = resolvedRootURI.slice(0, appNameIndex);
+    resolvedRootURI = joinURI(resolvedRootURI, "../..") + "devtools/";
   }
+
   resolvedRootURI = resolvedRootURI.replace(/^file:\/\//, "");
-  const localURI = resolvedRootURI + "/" + path.replace(/^devtools\//, "");
+  const localURI = resolvedRootURI + path.replace(/^devtools\//, "");
 
   const watchWorker = new ChromeWorker(
     "resource://devtools/client/shared/file-watcher-worker.js"
   );
 
   watchWorker.onmessage = event => {
     // We need to turn a local path back into a resource URI (or
     // chrome). This means that this system will only work when built
     // files are symlinked, so that these URIs actually read from
     // local sources. There might be a better way to do this.
-    const relativePath = event.data.replace(resolvedRootURI + "/", "");
-    if (relativePath.startsWith("client/themes")) {
-      onFileChanged(relativePath.replace("client/themes",
-                                         "chrome://devtools/skin"));
-    }
-    onFileChanged("resource://devtools/" + relativePath);
+    const fullPath = event.data;
+    const relativePath = event.data.replace(resolvedRootURI, "");
+    onFileChanged(relativePath, fullPath);
   };
 
-  watchWorker.postMessage({ path: localURI, fileRegex: /\.(js|css)$/ });
+  watchWorker.postMessage({ path: localURI, fileRegex: /\.(js|css|svg|png)$/ });
   return watchWorker;
 }
 
 EventEmitter.decorate(module.exports);
 
 let watchWorker;
 function onPrefChange() {
   if (Services.prefs.getBoolPref(HOTRELOAD_PREF) && !watchWorker) {
-    watchWorker = watchFiles("devtools/client", changedFile => {
-      module.exports.emit("file-changed", changedFile);
+    watchWorker = watchFiles("devtools/client", (relativePath, fullPath) => {
+      module.exports.emit("file-changed", relativePath, fullPath);
     });
   }
   else if(watchWorker) {
     watchWorker.terminate();
     watchWorker = null;
   }
 }
 
diff --git a/devtools/client/shared/moz.build b/devtools/client/shared/moz.build
index 21f2dbb..41831a4 100644
--- a/devtools/client/shared/moz.build
+++ b/devtools/client/shared/moz.build
@@ -14,16 +14,17 @@ DIRS += [
     'widgets',
 ]
 
 DevToolsModules(
     'AppCacheUtils.jsm',
     'autocomplete-popup.js',
     'browser-loader.js',
     'css-parsing-utils.js',
+    'css-reload.js',
     'Curl.jsm',
     'demangle.js',
     'DeveloperToolbar.jsm',
     'devices.js',
     'DOMHelpers.jsm',
     'doorhanger.js',
     'file-watcher-worker.js',
     'file-watcher.js',
diff --git a/devtools/client/shared/theme-switching.js b/devtools/client/shared/theme-switching.js
index c5c85ec..84946ed 100644
--- a/devtools/client/shared/theme-switching.js
+++ b/devtools/client/shared/theme-switching.js
@@ -155,22 +155,25 @@
     if (data.pref == "devtools.theme") {
       switchTheme(data.newValue, data.oldValue);
     }
   }
 
   const { classes: Cc, interfaces: Ci, utils: Cu } = Components;
   Cu.import("resource://gre/modules/Services.jsm");
   Cu.import("resource://devtools/client/framework/gDevTools.jsm");
-  const {require} = Components.utils.import("resource://devtools/shared/Loader.jsm", {});
+  const { require } = Cu.import("resource://devtools/shared/Loader.jsm", {});
   const StylesheetUtils = require("sdk/stylesheet/utils");
+  const { watchCSS } = require("devtools/client/shared/css-reload");
 
   if (documentElement.hasAttribute("force-theme")) {
     switchTheme(documentElement.getAttribute("force-theme"));
   } else {
     switchTheme(Services.prefs.getCharPref("devtools.theme"));
 
     gDevTools.on("pref-changed", handlePrefChange);
     window.addEventListener("unload", function() {
       gDevTools.off("pref-changed", handlePrefChange);
     });
   }
+
+  watchCSS(window);
 })();
