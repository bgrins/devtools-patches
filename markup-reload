# HG changeset patch
# Parent 2a0d75a59098a3a1699c7700a7eaec8f56bf462a
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 1036324 - Fix markup view disappearing on reload during request;r=mratcliffe

diff --git a/browser/devtools/inspector/test/browser.ini b/browser/devtools/inspector/test/browser.ini
--- a/browser/devtools/inspector/test/browser.ini
+++ b/browser/devtools/inspector/test/browser.ini
@@ -7,21 +7,23 @@ support-files =
   doc_inspector_delete-selected-node-02.html
   doc_inspector_gcli-inspect-command.html
   doc_inspector_highlighter-comments.html
   doc_inspector_highlighter.html
   browser_inspector_infobar_01.html
   browser_inspector_infobar_02.html
   doc_inspector_menu.html
   doc_inspector_remove-iframe-during-load.html
+  doc_inspector_reload.html
   doc_inspector_search.html
   doc_inspector_search-suggestions.html
   doc_inspector_select-last-selected-01.html
   doc_inspector_select-last-selected-02.html
   browser_inspector_highlight_after_transition.html
+  browser_inspector_reload.sjs
   head.js
 
 [browser_inspector_breadcrumbs.js]
 [browser_inspector_breadcrumbs_highlight_hover.js]
 [browser_inspector_delete-selected-node-01.js]
 [browser_inspector_delete-selected-node-02.js]
 [browser_inspector_delete-selected-node-03.js]
 [browser_inspector_destroy-after-navigation.js]
@@ -41,16 +43,17 @@ support-files =
 [browser_inspector_menu.js]
 [browser_inspector_navigation.js]
 [browser_inspector_picker-stop-on-destroy.js]
 [browser_inspector_picker-stop-on-tool-change.js]
 [browser_inspector_pseudoclass-lock.js]
 [browser_inspector_pseudoclass-menu.js]
 [browser_inspector_reload-01.js]
 [browser_inspector_reload-02.js]
+[browser_inspector_reload-03.js]
 [browser_inspector_remove-iframe-during-load.js]
 [browser_inspector_scrolling.js]
 [browser_inspector_search-01.js]
 [browser_inspector_search-02.js]
 [browser_inspector_search-03.js]
 [browser_inspector_select-docshell.js]
 [browser_inspector_select-last-selected.js]
 [browser_inspector_search-navigation.js]
diff --git a/browser/devtools/inspector/test/browser_inspector_reload-03.js b/browser/devtools/inspector/test/browser_inspector_reload-03.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_reload-03.js
@@ -0,0 +1,51 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+// A test to ensure reloading a page doesn't break the inspector.
+
+const TEST_URI = TEST_URL_ROOT +
+             "doc_inspector_reload.html";
+
+// Reloading then setting the current node to a dead wrapper should
+// not break the inspector.
+
+let test = asyncTest(function* () {
+  let { inspector, toolbox } = yield openInspectorForURL(TEST_URI);
+  yield selectNode("img", inspector);
+//browser_inspector_reload.sjs
+  let markupLoaded = inspector.once("markuploaded");
+
+  let salutation = getNode("img");
+
+  console.log(content.document.body.innerHTML);
+  info("Reloading page.");
+  content.location.reload();
+
+  // yield clickOnInspectMenuItem(salutation);
+
+  console.log(content.document.querySelector("img").outerHTML);
+  inspector.selection.setNode(content.document.querySelector("img"), "browser-context-menu");
+  inspector.selection.setNode(content.document.querySelector("p"), "browser-context-menu");
+
+  // Select a node during the reload
+  // yield selectNode("img", inspector);
+
+  info("Waiting for markupview to load after reload.");
+  yield markupLoaded;  inspector.selection.setNode(content.document.querySelector("p"), "browser-context-menu");
+
+
+  is(inspector.selection.node, getNode("p"), "<p> selected after reload.");
+
+  info("Selecting a node to see that inspector still works.");
+
+  // let updated = inspector.once("inspector-updated");
+  // inspector.selection.setNode(node, "test");
+  // yield updated;
+  yield promise.defer().promise;
+});
+
+
diff --git a/browser/devtools/inspector/test/browser_inspector_reload.sjs b/browser/devtools/inspector/test/browser_inspector_reload.sjs
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_reload.sjs
@@ -0,0 +1,12 @@
+
+  var timer = null;
+function handleRequest(request, response)
+{
+  response.processAsync();
+  timer = Components.classes["@mozilla.org/timer;1"].createInstance(Components.interfaces.nsITimer);
+  timer.initWithCallback(function()
+  {
+    response.write("world!");
+    response.finish();
+  }, 4000, Components.interfaces.nsITimer.TYPE_ONE_SHOT);
+}
\ No newline at end of file
diff --git a/browser/devtools/inspector/test/doc_inspector_reload.html b/browser/devtools/inspector/test/doc_inspector_reload.html
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/doc_inspector_reload.html
@@ -0,0 +1,22 @@
+<!DOCTYPE html>
+<html>
+<head>
+  <meta charset="utf-8">
+  <title>Example demonstrating Firefox bug 1036324</title>
+</head>
+<body>
+<h3>Second example demonstrating Firefox bug <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1036324">1036324</a></h3>
+<p>Instructions: </p>
+
+<p>Below is an image which is requested from http://example.com:8080, which shouldn't respond, and the page keeps trying to load it until the request timeouts.<br>
+1. Open the Inspector<br>
+2. Hit the page refresh<br>
+3. Select any element before the image timeouts<br>
+4. Wait for the page loading to finish and see if the code comes back or not</p>
+<p><img src="browser_inspector_reload.sjs" width="300" height="150" style="background: #add"></p>
+<p>Note: the results depend on that you are fast enogh to select an element to Inspector before the image loading timeouts.</p>
+</body>
+</html>
+
+
+
diff --git a/toolkit/devtools/server/actors/inspector.js b/toolkit/devtools/server/actors/inspector.js
--- a/toolkit/devtools/server/actors/inspector.js
+++ b/toolkit/devtools/server/actors/inspector.js
@@ -3150,17 +3150,21 @@ function DocumentWalker(aNode, aRootWin,
     throw new Error("Got an invalid root window in DocumentWalker");
   }
 
   this.walker = Cc["@mozilla.org/inspector/deep-tree-walker;1"].createInstance(Ci.inIDeepTreeWalker);
   this.walker.showAnonymousContent = true;
   this.walker.showSubDocuments = true;
   this.walker.showDocumentsAsNodes = true;
   this.walker.init(aRootWin.document, aShow);
-  this.walker.currentNode = aNode;
+
+  // If the walker cannot find or set the currentNode don't throw.
+  try {
+    this.walker.currentNode = aNode;
+  } catch(e) { }
   this.filter = aFilter;
 }
 
 DocumentWalker.prototype = {
   get node() this.walker.node,
   get whatToShow() this.walker.whatToShow,
   get currentNode() this.walker.currentNode,
   set currentNode(aVal) this.walker.currentNode = aVal,
