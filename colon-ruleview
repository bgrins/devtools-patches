# HG changeset patch
# Parent 7238893e4faa59ac0a23a624bd825b0a4e4c3294
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 964255 - [rule view] Cannot add background images containing a colon in the CSS value. Extra space added in URLs;r=pbrosset

diff --git a/browser/devtools/styleinspector/rule-view.js b/browser/devtools/styleinspector/rule-view.js
--- a/browser/devtools/styleinspector/rule-view.js
+++ b/browser/devtools/styleinspector/rule-view.js
@@ -2445,20 +2445,22 @@ TextPropertyEditor.prototype = {
       propertiesToAdd = properties.slice(1);
 
       if (enteredValueFirst) {
         firstProp = propertiesNoName[0];
         propertiesToAdd = propertiesNoName.slice(1);
       }
 
       // If "red; width: 1px", then set value to "red"
-      // If "color: red; width: 1px;", then set value to "color: red;"
+      // If "color: red; width: 1px;", then set value to "color:red;"
+      // Note that we remove the space between colon and value to workaround
+      // Bug 964255, until parseCSSText returns better results with URLs.
       firstValue = enteredValueFirst ?
         firstProp.value + "!" + firstProp.priority :
-        firstProp.name + ": " + firstProp.value + "!" + firstProp.priority;
+        firstProp.name + ":" + firstProp.value + "!" + firstProp.priority;
     }
 
     return {
       propertiesToAdd: propertiesToAdd,
       firstValue: firstValue
     };
   },
 
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_editor_changedvalues.js b/browser/devtools/styleinspector/test/browser_ruleview_editor_changedvalues.js
--- a/browser/devtools/styleinspector/test/browser_ruleview_editor_changedvalues.js
+++ b/browser/devtools/styleinspector/test/browser_ruleview_editor_changedvalues.js
@@ -1,16 +1,18 @@
 /* vim: set ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 let doc;
 let ruleWindow;
 let ruleView;
 let inspector;
+let TEST_URL = 'url("http://example.com/browser/browser/devtools/' +
+               'styleinspector/test/test-image.png")';
 
 function startTest()
 {
   let style = '' +
     '#testid {' +
     '  background-color: blue;' +
     '} ' +
     '.testclass {' +
@@ -135,17 +137,17 @@ function testEditProperty()
         input = aEditor.input;
         is(inplaceEditor(propEditor.valueSpan), aEditor, "Focus should have moved to the value.");
 
         waitForEditorBlur(aEditor, function() {
           promiseDone(expectRuleChange(idRuleEditor.rule).then(() => {
             let value = idRuleEditor.rule.domRule._rawStyle().getPropertyValue("border-color");
             is(value, "red", "border-color should have been set.");
             is(propEditor.isValid(), true, "red should be a valid entry");
-            finishTest();
+            testEditPropertyWithColon();
           }));
         });
 
         for (let ch of "red;") {
           EventUtils.sendChar(ch, ruleWindow);
         }
       }));
     });
@@ -154,16 +156,53 @@ function testEditProperty()
     }
   });
 
   EventUtils.synthesizeMouse(propEditor.nameSpan, 32, 1,
                              { },
                              ruleWindow);
 }
 
+function testEditPropertyWithColon()
+{
+  let idRuleEditor = ruleView.element.children[1]._ruleEditor;
+  let propEditor = idRuleEditor.rule.textProps[0].editor;
+  waitForEditorFocus(propEditor.element, function onNewElement(aEditor) {
+    is(inplaceEditor(propEditor.nameSpan), aEditor, "Next focused editor should be the name editor.");
+    let input = aEditor.input;
+    waitForEditorFocus(propEditor.element, function onNewName(aEditor) {
+      promiseDone(expectRuleChange(idRuleEditor.rule).then(() => {
+        input = aEditor.input;
+        is(inplaceEditor(propEditor.valueSpan), aEditor, "Focus should have moved to the value.");
+
+        waitForEditorBlur(aEditor, function() {
+          promiseDone(expectRuleChange(idRuleEditor.rule).then(() => {
+            let value = idRuleEditor.rule.domRule._rawStyle().getPropertyValue("background-image");
+            is(value, TEST_URL, "border-color should have been set.");
+            is(propEditor.isValid(), true, "red should be a valid entry");
+            finishTest();
+          }));
+        });
+
+
+        for (let ch of (TEST_URL + ";")) {
+          EventUtils.sendChar(ch, ruleWindow);
+        }
+      }));
+    });
+    for (let ch of "background-image:") {
+      EventUtils.sendChar(ch, ruleWindow);
+    }
+  });
+
+  EventUtils.synthesizeMouse(propEditor.nameSpan, 32, 1,
+                             { },
+                             ruleWindow);
+}
+
 function finishTest()
 {
   inspector = ruleWindow = ruleView = null;
   doc = null;
   gBrowser.removeCurrentTab();
   finish();
 }
 
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_multiple_properties.js b/browser/devtools/styleinspector/test/browser_ruleview_multiple_properties.js
--- a/browser/devtools/styleinspector/test/browser_ruleview_multiple_properties.js
+++ b/browser/devtools/styleinspector/test/browser_ruleview_multiple_properties.js
@@ -239,17 +239,17 @@ function testMultiValues()
 
     is(elementRuleEditor.rule.textProps.length, 2, "Should have added the changed value.");
     is(elementRuleEditor.propertyList.children.length, 3, "Should have added the changed value editor.");
 
     EventUtils.synthesizeKey("VK_ESCAPE", {}, ruleWindow);
     is(elementRuleEditor.propertyList.children.length, 2, "Should have removed the value editor.");
 
     is(elementRuleEditor.rule.textProps[0].name, "width", "Should have correct property name");
-    is(elementRuleEditor.rule.textProps[0].value, "height: 10px", "Should have correct property value");
+    is(elementRuleEditor.rule.textProps[0].value, "height:10px", "Should have correct property value");
 
     is(elementRuleEditor.rule.textProps[1].name, "color", "Should have correct property name");
     is(elementRuleEditor.rule.textProps[1].value, "blue", "Should have correct property value");
 
     finishTest();
   });
 }
 
