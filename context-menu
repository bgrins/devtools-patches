# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  b14288f032c47825dbc9b040320986620aeec70a
Prototype cut/copy/paste in BC input

diff --git a/devtools/client/webconsole/components/JSTerm.js b/devtools/client/webconsole/components/JSTerm.js
--- a/devtools/client/webconsole/components/JSTerm.js
+++ b/devtools/client/webconsole/components/JSTerm.js
@@ -15,16 +15,20 @@ loader.lazyRequireGetter(this, "Debugger
 loader.lazyRequireGetter(this, "EventEmitter", "devtools/shared/event-emitter");
 loader.lazyRequireGetter(this, "AutocompletePopup", "devtools/client/shared/autocomplete-popup");
 loader.lazyRequireGetter(this, "PropTypes", "devtools/client/shared/vendor/react-prop-types");
 loader.lazyRequireGetter(this, "gDevTools", "devtools/client/framework/devtools", true);
 loader.lazyRequireGetter(this, "KeyCodes", "devtools/client/shared/keycodes", true);
 loader.lazyRequireGetter(this, "Editor", "devtools/client/sourceeditor/editor");
 loader.lazyRequireGetter(this, "Telemetry", "devtools/client/shared/telemetry");
 
+const Menu = require("devtools/client/framework/menu");
+const MenuItem = require("devtools/client/framework/menu-item");
+
+
 const l10n = require("devtools/client/webconsole/webconsole-l10n");
 
 const HELP_URL = "https://developer.mozilla.org/docs/Tools/Web_Console/Helpers";
 
 function gSequenceId() {
   return gSequenceId.n++;
 }
 gSequenceId.n = 0;
@@ -1306,16 +1310,95 @@ class JSTerm extends Component {
           tabIndex: "0",
           rows: "1",
           "aria-autocomplete": "list",
           ref: node => {
             this.inputNode = node;
           },
           onPaste: onPaste,
           onDrop: onPaste,
+          onContextMenu: function (e ) {
+
+            var docshell = window.QueryInterface(Ci.nsIInterfaceRequestor)
+                                     .getInterface(Ci.nsIWebNavigation)
+                                     .QueryInterface(Ci.nsIDocShell);
+//             console.log("hi", docshell,
+//               docshell.isCommandEnabled("cmd_delete"),
+//               docshell.isCommandEnabled("cmd_cut")
+//               );
+//             var clipboard = docshell
+//                                      .QueryInterface(Ci.nsIClipboardCommands)
+//             console.log("hi", clipboard,
+// clipboard.canCopySelection(),
+// clipboard.canCutSelection(),
+// clipboard.canPaste()
+
+//               );
+
+
+            const menu = new Menu({
+              id: "webconsole-menu"
+            });
+
+            menu.append(new MenuItem({
+              id: "console-menu-undo",
+              label: "undo",
+              disabled: !docshell.isCommandEnabled("cmd_undo"),
+              click: () => {
+                docshell.doCommand("cmd_undo");
+              },
+            }));
+            menu.append(new MenuItem({
+              type: "separator"
+            }));
+            menu.append(new MenuItem({
+              id: "console-menu-cut",
+              label: "cut",
+              disabled: !docshell.isCommandEnabled("cmd_cut"),
+              click: () => {
+                docshell.doCommand("cmd_cut");
+              },
+            }));
+            menu.append(new MenuItem({
+              id: "console-menu-copy",
+              label: "copy",
+              disabled: !docshell.isCommandEnabled("cmd_copy"),
+              click: () => {
+                docshell.doCommand("cmd_copy");
+              },
+            }));
+            menu.append(new MenuItem({
+              id: "console-menu-paste",
+              label: "paste",
+              disabled: !docshell.isCommandEnabled("cmd_paste"),
+              click: () => {
+                docshell.doCommand("cmd_paste");
+              },
+            }));
+            menu.append(new MenuItem({
+              id: "console-menu-delete",
+              label: "delete",
+              disabled: !docshell.isCommandEnabled("cmd_delete"),
+              click: () => {
+                docshell.doCommand("cmd_delete");
+              },
+            }));
+            menu.append(new MenuItem({
+              type: "separator"
+            }));
+            menu.append(new MenuItem({
+              id: "console-menu-selectAll",
+              label: "select all",
+              disabled: !docshell.isCommandEnabled("cmd_selectAll"),
+              click: () => {
+                docshell.doCommand("cmd_selectAll");
+              },
+            }));
+            menu.popup(e.screenX, e.screenY, { doc: window.top.document });
+          }
         })
       )
     );
   }
 }
 
 // Redux connect
 
