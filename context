# HG changeset patch
# Parent fd5133a30882d420161200ff9d260a197587b00d
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 931990 - [markup view] Context menu disappearing in markup tree during after mutation

diff --git a/browser/devtools/inspector/breadcrumbs.js b/browser/devtools/inspector/breadcrumbs.js
--- a/browser/devtools/inspector/breadcrumbs.js
+++ b/browser/devtools/inspector/breadcrumbs.js
@@ -369,26 +369,16 @@ HTMLBreadcrumbs.prototype = {
   empty: function BC_empty()
   {
     while (this.container.hasChildNodes()) {
       this.container.removeChild(this.container.firstChild);
     }
   },
 
   /**
-   * Re-init the cache and remove all the buttons.
-   */
-  invalidateHierarchy: function BC_invalidateHierarchy()
-  {
-    this.inspector.hideNodeMenu();
-    this.nodeHierarchy = [];
-    this.empty();
-  },
-
-  /**
    * Set which button represent the selected node.
    *
    * @param aIdx Index of the displayed-button to select
    */
   setCursor: function BC_setCursor(aIdx)
   {
     // Unselect the previously selected button
     if (this.currentIndex > -1 && this.currentIndex < this.nodeHierarchy.length) {
@@ -610,17 +600,19 @@ HTMLBreadcrumbs.prototype = {
     }
   },
 
   /**
    * Update the breadcrumbs display when a new node is selected.
    */
   update: function BC_update(reason)
   {
-    this.inspector.hideNodeMenu();
+    if (reason !== "markupmutation") {
+      this.inspector.hideNodeMenu();
+    }
 
     let cmdDispatcher = this.chromeDoc.commandDispatcher;
     this.hadFocus = (cmdDispatcher.focusedElement &&
                      cmdDispatcher.focusedElement.parentNode == this.container);
 
     if (!this.selection.isConnected()) {
       this.cutAfter(-1); // remove all the crumbs
       return;
diff --git a/browser/devtools/markupview/markup-view.js b/browser/devtools/markupview/markup-view.js
--- a/browser/devtools/markupview/markup-view.js
+++ b/browser/devtools/markupview/markup-view.js
@@ -982,17 +982,18 @@ MarkupView.prototype = {
     this.tooltip.destroy();
     delete this.tooltip;
   },
 
   /**
    * Initialize the preview panel.
    */
   _initPreview: function() {
-    if (!Services.prefs.getBoolPref("devtools.inspector.markupPreview")) {
+    this._previewEnabled = Services.prefs.getBoolPref("devtools.inspector.markupPreview");
+    if (!this._previewEnabled) {
       return;
     }
 
     this._previewBar = this.doc.querySelector("#previewbar");
     this._preview = this.doc.querySelector("#preview");
     this._viewbox = this.doc.querySelector("#viewbox");
 
     this._previewBar.classList.remove("disabled");
@@ -1012,16 +1013,19 @@ MarkupView.prototype = {
       this._boundUpdatePreview, true);
     this._updatePreview();
   },
 
   /**
    * Move the preview viewbox.
    */
   _updatePreview: function() {
+    if (!this._previewEnabled) {
+      return;
+    }
     let win = this._frame.contentWindow;
 
     if (win.scrollMaxY == 0) {
       this._previewBar.classList.add("disabled");
       return;
     }
 
     this._previewBar.classList.remove("disabled");
@@ -1047,16 +1051,19 @@ MarkupView.prototype = {
     this._viewbox.setAttribute("style", "height:" + height +
       ";transform: translateY(" + top + ")");
   },
 
   /**
    * Hide the preview while resizing, to avoid slowness.
    */
   _resizePreview: function() {
+    if (!this._previewEnabled) {
+      return;
+    }
     let win = this._frame.contentWindow;
     this._previewBar.classList.add("hide");
     win.clearTimeout(this._resizePreviewTimeout);
 
     win.setTimeout(function() {
       this._updatePreview();
       this._previewBar.classList.remove("hide");
     }.bind(this), 1000);
