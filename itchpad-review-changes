# HG changeset patch
# Parent ffce62394d0e11b821afb6b20c4aa45e26aac8f8
# User Brian Grinstead <bgrinstead@mozilla.com>
addressing review changes

diff --git a/browser/devtools/itchpad/chrome/content/itchpad-loader.xul b/browser/devtools/itchpad/chrome/content/itchpad-loader.xul
--- a/browser/devtools/itchpad/chrome/content/itchpad-loader.xul
+++ b/browser/devtools/itchpad/chrome/content/itchpad-loader.xul
@@ -2,24 +2,17 @@
 <!-- This Source Code Form is subject to the terms of the Mozilla Public
    - License, v. 2.0. If a copy of the MPL was not distributed with this
    - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
 <!DOCTYPE window [
 <!ENTITY % toolboxDTD SYSTEM "chrome://browser/locale/devtools/toolbox.dtd" >
  %toolboxDTD;
 ]>
 
-<window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
-        id="devtools-itchpad-window"
-        macanimationtype="document"
-        fullscreenbutton="true"
-        windowtype="devtools:itchpad"
-        width="900" height="320"
-        persist="screenX screenY width height sizemode"
-        windowtitle="itchpad window">
+<window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
 
 <script type="application/javascript;version=1.8" src="chrome://browser/content/devtools/itchpad-loader.js"></script>
 
   <commandset id="toolbox-commandset">
     <command id="itchpad-cmd-close" oncommand="window.close();"/>
   </commandset>
 
   <keyset id="itchpad-keyset">
diff --git a/browser/devtools/itchpad/chrome/content/itchpad.xul b/browser/devtools/itchpad/chrome/content/itchpad.xul
--- a/browser/devtools/itchpad/chrome/content/itchpad.xul
+++ b/browser/devtools/itchpad/chrome/content/itchpad.xul
@@ -1,12 +1,13 @@
 <?xml version="1.0"?>
 <!-- This Source Code Form is subject to the terms of the Mozilla Public
    - License, v. 2.0. If a copy of the MPL was not distributed with this
    - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
+<?xml-stylesheet href="chrome://browser/skin/devtools/light-theme.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/skin/devtools/itchpad/itchpad.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/content/devtools/widgets.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/content/devtools/debugger.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/skin/devtools/common.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/skin/devtools/widgets.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/skin/devtools/debugger.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/content/devtools/markup-view.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/skin/devtools/markup-view.css" type="text/css"?>
@@ -17,25 +18,17 @@
 <!ENTITY % scratchpadDTD SYSTEM "chrome://browser/locale/devtools/scratchpad.dtd" >
  %scratchpadDTD;
 <!ENTITY % editMenuStrings SYSTEM "chrome://global/locale/editMenuOverlay.dtd">
 %editMenuStrings;
 <!ENTITY % sourceEditorStrings SYSTEM "chrome://browser/locale/devtools/sourceeditor.dtd">
 %sourceEditorStrings;
 ]>
 
-<window id="itchpad-window"
-        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" class="theme-body"
-        title="Itchpad"
-        windowtype="devtools:itchpad"
-        macanimcationtype="document"
-        fullscreenbutton="true"
-        screenX="4" screenY="4"
-        width="640" height="480"
-        persist="screenX screenY width height sizemode">
+<page xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" class="theme-body">
 
   <commandset id="itchpad-commandset" />
   <commandset id="editMenuCommands"/>
   <keyset id="itchpad-keyset" />
   <keyset id="editMenuKeys"/>
 
   <!-- XXX: Let plugins declare their own menu items -->
   <menubar id="itchpad-menubar">
@@ -63,17 +56,16 @@
 
 
   <popupset>
     <menupopup id="directory-menu-popup">
     </menupopup>
   </popupset>
 
   <script type="application/javascript" src="chrome://global/content/globalOverlay.js"/>
-  <script type="application/javascript;version=1.8" src="chrome://browser/content/devtools/theme-switching.js"></script>
 
   <deck id="main-deck" flex="1">
     <vbox flex="1" id="source-deckitem">
       <hbox id="sources-body" flex="1">
         <vbox width="250">
           <vbox id="sources" flex="1">
           </vbox>
           <toolbar id="project-toolbar" class="devtools-toolbar" hidden="true"></toolbar>
@@ -95,9 +87,9 @@
                   flex="1">
             <tabs hidden="true"/>
             <tabpanels flex="1"/>
           </tabbox>
         </vbox>
       </hbox>
     </vbox>
   </deck>
-</window>
+</page>
diff --git a/browser/devtools/itchpad/lib/itchpad.js b/browser/devtools/itchpad/lib/itchpad.js
--- a/browser/devtools/itchpad/lib/itchpad.js
+++ b/browser/devtools/itchpad/lib/itchpad.js
@@ -2,17 +2,16 @@
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 const { Class } = require("sdk/core/heritage");
 
 const { Project } = require("itchpad/project");
-const { PageCollection } = require("itchpad/page");
 const { TreeView } = require("itchpad/tree");
 const { ShellDeck } = require("itchpad/shells");
 const { Resource } = require("itchpad/stores/base");
 const { ResourceMap, Pair } = require("itchpad/resource-map");
 const { registeredPlugins } = require("itchpad/plugins/core");
 const { EventTarget } = require("sdk/event/target");
 const { on, forget } = require("itchpad/event/scope");
 const { emit } = require("sdk/event/core");
@@ -116,17 +115,16 @@ var Itchpad = Class({
       this.project = new Project({
         id: "Test",
         name: "App",
         directories: [],
         openFiles: []
       });
     }
     this.setProject(this.project);
-    this.setPage(new PageCollection());
 
     this._initPlugins();
   },
 
   _buildSidebar: function() {
     // Create the sources sidebar
     this.projectTree = new CollectionTree(this.document, {
       nodeVisible: this.nodeVisible.bind(this),
@@ -187,21 +185,16 @@ var Itchpad = Class({
     );
     this.project.customOpts = opts;
     this.project.projectType = "APP_MANAGER";
     this.project.removePaths(existingPaths);
     this.project.addPath(path);
     this.project.save();
   },
 
-  setPage: function(page) {
-    this.page = page;
-    this.resourceMap.setPage(page);
-  },
-
   openResource: function(resource) {
     let pair = this.resourceMap.pair(resource);
     let shell = this.shells.open(pair, resource);
 
     this.projectTree.select(resource);
   },
 
   // When a node is selected in the tree, open its associated editor.
diff --git a/browser/devtools/itchpad/lib/page.js b/browser/devtools/itchpad/lib/page.js
deleted file mode 100644
--- a/browser/devtools/itchpad/lib/page.js
+++ /dev/null
@@ -1,31 +0,0 @@
-/* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-const { Class } = require("sdk/core/heritage");
-const { StoreCollection } = require("itchpad/store-collection");
-const { StylesStore } = require("itchpad/stores/styles");
-
-// This is a bad name for the collection of stores tied to the live target.
-// Target was already taken, Live didn't sound right.  A rename would be
-// welcome.
-var PageCollection = Class({
-  extends: StoreCollection,
-
-  initialize: function() {
-    StoreCollection.prototype.initialize.call(this);
-
-    this.styles = new StylesStore();
-    this.addStore(this.styles);
-  },
-
-  setTarget: function(target) {
-    for (let store of this.stores) {
-      store.setTarget(target);
-    }
-  }
-});
-
-exports.PageCollection = PageCollection;
diff --git a/browser/devtools/itchpad/lib/plugins/fuzzy-search/lib/plugin.js b/browser/devtools/itchpad/lib/plugins/fuzzy-search/lib/plugin.js
--- a/browser/devtools/itchpad/lib/plugins/fuzzy-search/lib/plugin.js
+++ b/browser/devtools/itchpad/lib/plugins/fuzzy-search/lib/plugin.js
@@ -24,17 +24,17 @@ var Search = Class({
       parent: "#plugin-toolbar-right",
       type: "search",
       timeout: "50",
       hidden: true,
       class: "devtools-searchinput",
     });
 
     this.panel = this.host.createElement("panel", {
-      parent: "window",
+      parent: "page",
       class: "results-panel",
       level: "top",
       noautofocus: "true",
       consumeoutsideclicks: "false",
       hidden: "true"
     });
 
     this.onSearchFocus = this.onSearchFocus.bind(this);
diff --git a/browser/devtools/itchpad/lib/resource-map.js b/browser/devtools/itchpad/lib/resource-map.js
--- a/browser/devtools/itchpad/lib/resource-map.js
+++ b/browser/devtools/itchpad/lib/resource-map.js
@@ -79,22 +79,22 @@ var ResourceMap = Class({
 
   setProject: function(project) {
     this.unwatchCollection(this.project);
     this.project = project;
     this.watchCollection(this.project);
     this.scheduleRebuild();
   },
 
-  setPage: function(page) {
-    this.unwatchCollection(this.page);
-    this.page = page;
-    this.watchCollection(this.page);
-    this.scheduleRebuild();
-  },
+  // setPage: function(page) {
+  //   this.unwatchCollection(this.page);
+  //   this.page = page;
+  //   this.watchCollection(this.page);
+  //   this.scheduleRebuild();
+  // },
 
   watchCollection: function(collection) {
     on(this, collection, "resource-added", this.scheduleRebuild);
     on(this, collection, "resource-removed", this.scheduleRebuild);
   },
 
   unwatchCollection: function(collection) {
     forget(this, collection);
@@ -136,61 +136,61 @@ var ResourceMap = Class({
     }
     let start = Date.now();
     // Rules:
     // - Pairs stay with the local resource if they change.
 
     let newPairs = new Map();
 
     // Walk through all live resources...
-    for (let live of this.page.allResources()) {
-      if (live.isDir) {
-        continue;
-      }
+    // for (let live of this.page.allResources()) {
+    //   if (live.isDir) {
+    //     continue;
+    //   }
 
-      // If there's a manual pair, just trust it.
-      if (this.manualPairs.has(live)) {
-        let manual = this.manualPairs.get(live);
-        newPairs.set(manual.project, manual);
-        newPairs.set(manual.live, manual);
-        continue;
-      }
+    //   // If there's a manual pair, just trust it.
+    //   if (this.manualPairs.has(live)) {
+    //     let manual = this.manualPairs.get(live);
+    //     newPairs.set(manual.project, manual);
+    //     newPairs.set(manual.live, manual);
+    //     continue;
+    //   }
 
-      // Find a project resource for this resource...
-      let project = this._findPair(live);
+    //   // Find a project resource for this resource...
+    //   let project = this._findPair(live);
 
-      if (!project) {
-        // No paired resource, no need to save a pair, but do
-        // keep the one-sided pair around if there is one.
-        let oldPair = this.pairs.get(live);
-        if (oldPair) {
-          // Just in case.
-          oldPair.project = null;
+    //   if (!project) {
+    //     // No paired resource, no need to save a pair, but do
+    //     // keep the one-sided pair around if there is one.
+    //     let oldPair = this.pairs.get(live);
+    //     if (oldPair) {
+    //       // Just in case.
+    //       oldPair.project = null;
 
-          newPairs.set(live, oldPair);
-        }
-        continue;
-      }
+    //       newPairs.set(live, oldPair);
+    //     }
+    //     continue;
+    //   }
 
-      // We have a real pair.  Update it if it already exists.
-      // XXX: This could leave us with an empty pair, make
-      // sure editors close properly...
-      let pair = this.pairs.get(project);
-      if (pair) {
-        pair.live = live;
-      } else {
-        pair = new Pair(this, project, live);
-      }
-      newPairs.set(live, pair);
-      newPairs.set(project, pair);
+    //   // We have a real pair.  Update it if it already exists.
+    //   // XXX: This could leave us with an empty pair, make
+    //   // sure editors close properly...
+    //   let pair = this.pairs.get(project);
+    //   if (pair) {
+    //     pair.live = live;
+    //   } else {
+    //     pair = new Pair(this, project, live);
+    //   }
+    //   newPairs.set(live, pair);
+    //   newPairs.set(project, pair);
 
-      // Remove the project link from the map so the next pass
-      // doesn't pick it up.
-      this.pairs.delete(project);
-    }
+    //   // Remove the project link from the map so the next pass
+    //   // doesn't pick it up.
+    //   this.pairs.delete(project);
+    // }
 
     // Now newPairs has pairs for all live resources that
     // need them (either because they already had a single-sided pair
     // in the wild or because they found a real pair)
     // Now make sure that any project resources with an outstanding pair
     // are included.
     for (let project of this.project.allResources()) {
       let newPair = newPairs.get(project);
diff --git a/browser/devtools/itchpad/lib/stores/styles.js b/browser/devtools/itchpad/lib/stores/styles.js
deleted file mode 100644
--- a/browser/devtools/itchpad/lib/stores/styles.js
+++ /dev/null
@@ -1,188 +0,0 @@
-/* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-const { Cu } = require("chrome");
-const { Class } = require("sdk/core/heritage");
-const { EventTarget } = require("sdk/event/target");
-const { emit } = require("sdk/event/core");
-const promise = require("itchpad/helpers/promise");
-const URL = require("sdk/url");
-
-const { StyleSheetsFront } = require("devtools/server/actors/stylesheets");
-const { StyleEditorFront } = require("devtools/server/actors/styleeditor");
-const {CssLogic} = require("devtools/styleinspector/css-logic");
-
-const { LiveStore, Resource } = require("itchpad/stores/base");
-
-
-var StylesStore = Class({
-  extends: LiveStore,
-
-  defaultCategory: "css",
-
-  initialize: function(target) {
-    this.initStore();
-
-    this._onStyleSheetsCleared = this._onStyleSheetsCleared.bind(this);
-    this._onNavigate = this._onNavigate.bind(this);
-
-    this.setRoot(FolderResource(this));
-
-    this.setTarget(target);
-  },
-
-  setTarget: function(target) {
-    if (this.debuggee) {
-      this.resources.clear();
-      this.debuggee.destroy();
-      this.target.off("will-navigate", this._onStyleSheetsCleared);
-      this.target.off("navigate", this._onNavigate);
-    }
-
-    this.target = target;
-
-    if (!target) {
-      return;
-    }
-
-    // XXX: Need to share style editor fronts with the style editor.
-    if (this.target.form.styleSheetsActor) {
-      this.debuggee = StyleSheetsFront(this.target.client, this.target.form);
-    } else {
-      // We're talking to a pre-firefox 29 server-side
-      this.debuggee = StyleEditorFront(this.target.client, this.target.form);
-    }
-
-    this.debuggee.getStyleSheets().then(styleSheets => {
-      if (this.target !== target) {
-        return;
-      }
-      this.root.setSheets(styleSheets);
-      this.target.on("will-navigate", this._onStyleSheetsCleared);
-      this.target.on("navigate", this._onNavigate);
-    }).then(null, console.error);
-  },
-
-  _onNavigate: function() {
-    this.debuggee.getStyleSheets().then(styleSheets => {
-      this.root.setSheets(styleSheets);
-    });
-  },
-
-  _onStyleSheetsCleared: function() {
-    this.resources.clear();
-    this.root.setSheets();
-  },
-
-  refresh: function() {
-    // This is a live source, no explicit refresh needed.
-    return promise.resolve();
-  },
-
-  forSheet: function(sheet) {
-    if (this.resources.has(sheet.actorID)) {
-      return this.resources.get(sheet.actorID);
-    }
-
-    let resource = SheetResource(this, sheet);
-    this.resources.set(sheet.actorID, resource);
-    this.notifyAdd(resource);
-    return resource;
-  }
-});
-exports.StylesStore = StylesStore;
-
-var FolderResource = Class({
-  extends: Resource,
-
-  initialize: function(store) {
-    this.store = store;
-    this.children = new Set();
-  },
-
-  get displayName() { return "Styles"; },
-  get isDir() { return true; },
-  get hasChildren() { return this.children.size > 0 },
-
-  setSheets: function(sheets=[]) {
-    let newChildren = new Set();
-    for (let sheet of sheets) {
-      newChildren.add(this.store.forSheet(sheet));
-    }
-    this.setChildren(newChildren);
-  },
-
-  createChild: function(name) {
-    if (!this.store.debuggee) {
-      console.error("Tried to create a child without a debuggee.");
-      deferred.reject(new Error("Can't create child without a target."));
-    }
-    return this.store.debuggee.addStyleSheet("").then(sheet => {
-      let resource = this.store.forSheet(sheet);
-      resource._title = name;
-      this.addChild(resource);
-      return resource;
-    }).then(null, console.error);
-  }
-});
-
-var SheetResource = Class({
-  extends: Resource,
-
-  initialize: function(store, sheet) {
-    this.store = store;
-    this.sheet = sheet;
-    this.children = new Set();
-    if (sheet.href) {
-      this.setURI(new URL.URL(sheet.href));
-    } else {
-      this.setURI(new URL.URL("#sheet-" + sheet.styleSheetIndex, sheet.nodeHref));
-    }
-  },
-
-  toString: function() {
-    return "[SheetResource:" + this.uri + "]";
-  },
-
-  get displayName() {
-    if (this._title) {
-      return this._title;
-    }
-
-    if (!this.sheet.href) {
-      this._title = "<inline style sheet " + this.sheet.styleSheetIndex + ">";
-      return this._title;
-    }
-
-    this._title = CssLogic.shortSource({ href: this.sheet.href });
-    try {
-      this._title = decodeURI(this._title);
-    } catch(ex) {
-    }
-
-    return this._title;
-  },
-
-  get isDir() { return false; },
-  get hasChildren() { return false; },
-
-  get contentType() {
-    // Good enough.
-    return "text/css";
-  },
-
-  canAutoApply: true,
-
-  load: function() {
-    return this.sheet.getText().then(longstr => {
-      return longstr.string();
-    });
-  },
-
-  apply: function(text) {
-    return this.sheet.update(text, true);
-  }
-});
