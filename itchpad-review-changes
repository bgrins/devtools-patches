# HG changeset patch
# Parent f8f662cea6be8c9077c9ae90f97e77a6ba0e62ed
# User Brian Grinstead <bgrinstead@mozilla.com>
addressing review changes

diff --git a/browser/devtools/itchpad/chrome/content/itchpad-loader.js b/browser/devtools/itchpad/chrome/content/itchpad-loader.js
--- a/browser/devtools/itchpad/chrome/content/itchpad-loader.js
+++ b/browser/devtools/itchpad/chrome/content/itchpad-loader.js
@@ -1,60 +1,165 @@
 const Cu = Components.utils;
 const {devtools} = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
 const {FileUtils} = Cu.import("resource://gre/modules/FileUtils.jsm", {});
+const {NetUtil} = Cu.import("resource://gre/modules/NetUtil.jsm", {});
 const require = devtools.require;
+const promise = require("itchpad/helpers/promise");
 const Itchpad = require("itchpad/itchpad");
 
+const SAMPLE_PATH = buildTempDirectoryStructure();
+const SAMPLE_NAME = "DevTools Content";
+const SAMPLE_VERSION = "0.1";
+const SAMPLE_PROJECT_URL = "http://mozilla.org";
+const SAMPLE_ICON = "chrome://browser/skin/devtools/tool-options.svg";
+
+/**
+ * Create a workspace for working on itchpad, available at
+ * chrome://browser/content/devtools/itchpad-loader.xul.
+ * This emulates the integration points that the app manager uses.
+ */
+window.addEventListener("DOMContentLoaded", function onDOMReady() {
+  window.removeEventListener("DOMContentLoaded", onDOMReady, true);
+
+  let iframe = document.getElementById("itchpad-iframe");
+  window.itchpad = Itchpad.Itchpad();
+
+  itchpad.load(iframe).then(() => {
+    itchpad.setProjectToSinglePath(SAMPLE_PATH, {
+      name: SAMPLE_NAME,
+      version: SAMPLE_VERSION,
+      iconUrl: SAMPLE_ICON,
+      projectOverviewURL: SAMPLE_PROJECT_URL
+    }).then(() => {
+
+      let containers = [...itchpad.projectTree._containers].map(z=>z[0]);
+      console.log("HERE!!!!", containers)
+      containers.forEach(function(container) {
+        console.log("HERE", container.displayName);
+        itchpad.projectTree.select(container);
+      });
+    });
+
+    // XXX: Need an easy way to wait for project to be fully loaded from disk
+    // (maybe in setProjectToSinglePath promise).
+    // Then an easy way to iterate over the projectTree containers (nodes/resources)
+    // or to grab one by pathname or whatever to test loading the file in the editor.
+
+    itchpad.window.setTimeout(() => {
+
+
+    }, 1000)
+
+
+  });
+
+  itchpad.on("onEditorCreated", (editor) => {
+    console.log("editor created: " + editor);
+  });
+  itchpad.on("onEditorDestroyed", (editor) => {
+    console.log("editor destroyed: " + editor);
+  });
+  itchpad.on("onEditorSave", (editor) => {
+    console.log("editor saved: " + editor);
+  });
+  itchpad.on("onEditorLoad", (editor) => {
+    console.log("editor loaded: " + editor);
+  });
+  itchpad.on("onEditorActivated", (editor) => {
+    console.log("editor focused: " + editor);
+  });
+  itchpad.on("onEditorDeactivated", (editor) => {
+    console.log("editor blur: " + editor);
+  });
+  itchpad.on("onEditorChange", (editor) => {
+    console.log("editor changed: " + editor);
+  });
+  itchpad.on("onEditorCursorActivity", (editor) => {
+    console.log("editor cursor activity: " + editor);
+  });
+  itchpad.on("onCommand", (cmd) => {
+    console.log("Command: " + cmd);
+  });
+
+
+
+}, true);
+
+
+/**
+ * Build a temporary directory as a workspace for this loader
+ * https://developer.mozilla.org/en-US/Add-ons/Code_snippets/File_I_O
+ */
 function buildTempDirectoryStructure() {
 
   // return FileUtils.getDir("CurProcD", ["chrome", "browser", "content", "browser", "devtools"]).path;
   // return FileUtils.getDir("CurProcD", ["modules", "devtools", "itchpad", "samples", "webapp"]).path;
 
   // First create (and remove) the temp dir to discard any changes
   let TEMP_DIR = FileUtils.getDir("TmpD", ["Itchpad"], true);
   TEMP_DIR.remove(true);
 
-  // Now rebuild our fake project
+  // Now rebuild our fake project.
   TEMP_DIR = FileUtils.getDir("TmpD", ["Itchpad"], true);
 
   FileUtils.getDir("TmpD", ["Itchpad", "css"], true);
   FileUtils.getDir("TmpD", ["Itchpad", "data"], true);
   FileUtils.getDir("TmpD", ["Itchpad", "img", "icons"], true);
   FileUtils.getDir("TmpD", ["Itchpad", "js"], true);
 
-  FileUtils.getFile("TmpD", ["Itchpad", "index.html"]).createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
+  let htmlFile = FileUtils.getFile("TmpD", ["Itchpad", "index.html"]);
+  htmlFile.createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
+  writeToFile(htmlFile, [
+    '<!DOCTYPE html>',
+    '<html lang="en">',
+    ' <head>',
+    '   <meta charset="utf-8" />',
+    '   <title>Itchpad Temp File</title>',
+    '   <link rel="stylesheet" href="style.css" />',
+    ' </head>',
+    ' <body id="home">',
+    '   <p>Itchpad Temp File</p>',
+    ' </body>',
+    '</html>'].join("\n")
+  );
+
   FileUtils.getFile("TmpD", ["Itchpad", "README.md"]).createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
 
-  FileUtils.getFile("TmpD", ["Itchpad", "css", "styles.css"]).createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
+  let cssFile = FileUtils.getFile("TmpD", ["Itchpad", "css", "styles.css"]);
+  cssFile.createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
+  writeToFile(cssFile, [
+    'body {',
+    ' background: red;',
+    '}'
+    ].join("\n")
+  );
 
   FileUtils.getFile("TmpD", ["Itchpad", "js", "script.js"]).createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
 
   FileUtils.getFile("TmpD", ["Itchpad", "img", "fake.png"]).createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
   FileUtils.getFile("TmpD", ["Itchpad", "img", "icons", "16x16.png"]).createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
   FileUtils.getFile("TmpD", ["Itchpad", "img", "icons", "32x32.png"]).createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
   FileUtils.getFile("TmpD", ["Itchpad", "img", "icons", "128x128.png"]).createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
   FileUtils.getFile("TmpD", ["Itchpad", "img", "icons", "vector.svg"]).createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
 
   return TEMP_DIR.path;
 }
 
-const SAMPLE_PATH = buildTempDirectoryStructure();
-const SAMPLE_NAME = "DevTools Content";
-const SAMPLE_VERSION = "0.1";
-const SAMPLE_PROJECT_URL = "http://mozilla.org";
-const SAMPLE_ICON = "chrome://browser/skin/devtools/tool-options.svg";
+// https://developer.mozilla.org/en-US/Add-ons/Code_snippets/File_I_O#Writing_to_a_file
+function writeToFile(file, data) {
 
-window.addEventListener("DOMContentLoaded", function onDOMReady() {
-  window.removeEventListener("DOMContentLoaded", onDOMReady, true);
+  let defer = promise.defer();
+  var ostream = FileUtils.openSafeFileOutputStream(file)
 
-  let iframe = document.getElementById("itchpad-iframe");
-  window.itchpad = Itchpad.Itchpad();
+  var converter = Components.classes["@mozilla.org/intl/scriptableunicodeconverter"].
+                  createInstance(Components.interfaces.nsIScriptableUnicodeConverter);
+  converter.charset = "UTF-8";
+  var istream = converter.convertToInputStream(data);
 
-  itchpad.load(iframe).then(() => {
-    itchpad.setProjectToSinglePath(SAMPLE_PATH, {
-      name: SAMPLE_NAME,
-      version: SAMPLE_VERSION,
-      iconUrl: SAMPLE_ICON,
-      projectOverviewURL: SAMPLE_PROJECT_URL
-    });
+  // The last argument (the callback) is optional.
+  NetUtil.asyncCopy(istream, ostream, function(status) {
+    if (!Components.isSuccessCode(status)) {
+      // Handle error!
+      console.log("ERROR WRITING TEMP FILE", status);
+    }
   });
-}, true);
+}
diff --git a/browser/devtools/itchpad/chrome/content/itchpad-loader.xul b/browser/devtools/itchpad/chrome/content/itchpad-loader.xul
--- a/browser/devtools/itchpad/chrome/content/itchpad-loader.xul
+++ b/browser/devtools/itchpad/chrome/content/itchpad-loader.xul
@@ -2,24 +2,17 @@
 <!-- This Source Code Form is subject to the terms of the Mozilla Public
    - License, v. 2.0. If a copy of the MPL was not distributed with this
    - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
 <!DOCTYPE window [
 <!ENTITY % toolboxDTD SYSTEM "chrome://browser/locale/devtools/toolbox.dtd" >
  %toolboxDTD;
 ]>
 
-<window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
-        id="devtools-itchpad-window"
-        macanimationtype="document"
-        fullscreenbutton="true"
-        windowtype="devtools:itchpad"
-        width="900" height="320"
-        persist="screenX screenY width height sizemode"
-        windowtitle="itchpad window">
+<window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
 
 <script type="application/javascript;version=1.8" src="chrome://browser/content/devtools/itchpad-loader.js"></script>
 
   <commandset id="toolbox-commandset">
     <command id="itchpad-cmd-close" oncommand="window.close();"/>
   </commandset>
 
   <keyset id="itchpad-keyset">
diff --git a/browser/devtools/itchpad/chrome/content/itchpad.xul b/browser/devtools/itchpad/chrome/content/itchpad.xul
--- a/browser/devtools/itchpad/chrome/content/itchpad.xul
+++ b/browser/devtools/itchpad/chrome/content/itchpad.xul
@@ -1,12 +1,13 @@
 <?xml version="1.0"?>
 <!-- This Source Code Form is subject to the terms of the Mozilla Public
    - License, v. 2.0. If a copy of the MPL was not distributed with this
    - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
+<?xml-stylesheet href="chrome://browser/skin/devtools/light-theme.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/skin/devtools/itchpad/itchpad.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/content/devtools/widgets.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/content/devtools/debugger.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/skin/devtools/common.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/skin/devtools/widgets.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/skin/devtools/debugger.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/content/devtools/markup-view.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/skin/devtools/markup-view.css" type="text/css"?>
@@ -17,32 +18,28 @@
 <!ENTITY % scratchpadDTD SYSTEM "chrome://browser/locale/devtools/scratchpad.dtd" >
  %scratchpadDTD;
 <!ENTITY % editMenuStrings SYSTEM "chrome://global/locale/editMenuOverlay.dtd">
 %editMenuStrings;
 <!ENTITY % sourceEditorStrings SYSTEM "chrome://browser/locale/devtools/sourceeditor.dtd">
 %sourceEditorStrings;
 ]>
 
-<window id="itchpad-window"
-        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" class="theme-body"
-        title="Itchpad"
-        windowtype="devtools:itchpad"
-        macanimcationtype="document"
-        fullscreenbutton="true"
-        screenX="4" screenY="4"
-        width="640" height="480"
-        persist="screenX screenY width height sizemode">
+<page xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" class="theme-body">
+
+  <script type="application/javascript" src="chrome://global/content/globalOverlay.js"/>
 
   <commandset id="itchpad-commandset" />
   <commandset id="editMenuCommands"/>
   <keyset id="itchpad-keyset" />
   <keyset id="editMenuKeys"/>
 
-  <!-- XXX: Let plugins declare their own menu items -->
+  <!-- Eventually we want to let plugins declare their own menu items.
+       Wait unti app manager lands to deal with this integration point.
+  -->
   <menubar id="itchpad-menubar">
     <menu id="file-menu" label="&fileMenu.label;" accesskey="&fileMenu.accesskey;">
       <menupopup id="file-menu-popup" />
     </menu>
 
     <menu id="edit-menu" label="&editMenu.label;"
           accesskey="&editMenu.accesskey;">
       <menupopup id="edit-menu-popup">
@@ -62,19 +59,16 @@
   </menubar>
 
 
   <popupset>
     <menupopup id="directory-menu-popup">
     </menupopup>
   </popupset>
 
-  <script type="application/javascript" src="chrome://global/content/globalOverlay.js"/>
-  <script type="application/javascript;version=1.8" src="chrome://browser/content/devtools/theme-switching.js"></script>
-
   <deck id="main-deck" flex="1">
     <vbox flex="1" id="source-deckitem">
       <hbox id="sources-body" flex="1">
         <vbox width="250">
           <vbox id="sources" flex="1">
           </vbox>
           <toolbar id="project-toolbar" class="devtools-toolbar" hidden="true"></toolbar>
         </vbox>
@@ -95,9 +89,9 @@
                   flex="1">
             <tabs hidden="true"/>
             <tabpanels flex="1"/>
           </tabbox>
         </vbox>
       </hbox>
     </vbox>
   </deck>
-</window>
+</page>
diff --git a/browser/devtools/itchpad/chrome/content/readdir.js b/browser/devtools/itchpad/chrome/content/readdir.js
deleted file mode 100644
--- a/browser/devtools/itchpad/chrome/content/readdir.js
+++ /dev/null
@@ -1,74 +0,0 @@
-/* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-importScripts("resource://gre/modules/osfile.jsm");
-
-function readDir(path, ignore, maxDepth = Infinity) {
-  let ret = {};
-
-  let set = new Set();
-
-  let info = OS.File.stat(path);
-  set.add({
-    path: path,
-    name: info.name,
-    isDir: info.isDir,
-    isSymLink: info.isSymLink,
-    depth: 0
-  });
-
-  for (let info of set) {
-    let children = [];
-
-    if (info.isDir && !info.isSymLink) {
-      if (info.depth > maxDepth) {
-        continue;
-      }
-
-      let iterator = new OS.File.DirectoryIterator(info.path);
-      try {
-        for (let child in iterator) {
-          if (ignore && child.name.match(ignore)) {
-            continue;
-          }
-
-          children.push(child.path);
-          set.add({
-            path: child.path,
-            name: child.name,
-            isDir: child.isDir,
-            isSymLink: child.isSymLink,
-            depth: info.depth + 1
-          });
-        }
-      } finally {
-        iterator.close();
-      }
-    }
-
-    ret[info.path] = {
-      name: info.name,
-      isDir: info.isDir,
-      isSymLink: info.isSymLink,
-      depth: info.depth,
-      children: children,
-    };
-  }
-
-  return ret;
-};
-
-onmessage = function (event) {
-  try {
-    let {path, ignore, depth} = event.data;
-    let message = readDir(path, ignore, depth);
-    postMessage(message);
-  } catch(ex) {
-    console.log(ex);
-  }
-};
-
-
diff --git a/browser/devtools/itchpad/lib/editors.js b/browser/devtools/itchpad/lib/editors.js
--- a/browser/devtools/itchpad/lib/editors.js
+++ b/browser/devtools/itchpad/lib/editors.js
@@ -4,146 +4,243 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 const { Cu } = require("chrome");
 const { Class } = require("sdk/core/heritage");
 const { EventTarget } = require("sdk/event/target");
 const { emit } = require("sdk/event/core");
 const promise = require("itchpad/helpers/promise");
-
 const Editor  = require("devtools/sourceeditor/editor");
-
-
 const HTML_NS = "http://www.w3.org/1999/xhtml";
 const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
 
+/**
+ * The class that is extended to implement an editor, which is the main view
+ * that shows up when a file is selected.  This object should not be used
+ * directly - use TextEditor for a basic code editor.
+ */
 var ItchEditor = Class({
   extends: EventTarget,
 
+  /**
+   * A boolean specifying if the toolbar above the editor should be hidden.
+   */
+  hidesToolbar: false,
+
   toString: function() {
     return this.label || "";
   },
 
+  emit: function(name, ...args) {
+    emit(this, name, ...args);
+  },
+
+  /**
+   * Initialize the editor with a single document.  This should be called
+   * by objects extending this object with:
+   * ItchEditor.prototype.initialize.apply(this, arguments)
+   */
   initialize: function(document) {
     this.doc = document;
     this.label = "";
     this.elt = this.doc.createElement("vbox");
     this.elt.setAttribute("flex", "1");
     this.elt.editor = this;
     this.toolbar = this.doc.querySelector("#itchpad-toolbar");
   },
 
+  /**
+   * Sets the visibility of the element that shows up above the editor
+   * based on the this.hidesToolbar property.
+   */
   setToolbarVisibility: function() {
     if (this.hidesToolbar) {
       this.toolbar.setAttribute("hidden", "true");
     } else {
       this.toolbar.removeAttribute("hidden");
     }
   },
 
+
+  /**
+   * Load a single resource into the editor.
+   *
+   * @param Resource resource
+   *        The single file / item that is being dealt with (see stores/base)
+   * @returns Promise
+   *          A promise that is resolved once the editor has loaded the contents
+   *          of the resource.
+   */
   load: function(resource) {
     return promise.resolve();
   },
 
+  /**
+   * Give focus to the editor.  This can have different meanings
+   * depending on the type of editor.
+   *
+   * @returns Promise
+   *          A promise that is resolved once the editor has been focused.
+   */
   focus: function() {
     return promise.resolve();
   }
 });
 exports.ItchEditor = ItchEditor;
 
-var MODE_CATEGORIES = {};
-
-MODE_CATEGORIES[Editor.modes.text.name] = "txt";
-MODE_CATEGORIES[Editor.modes.js.name] = "js";
-MODE_CATEGORIES[Editor.modes.html.name] = "html";
-MODE_CATEGORIES[Editor.modes.css.name] = "css";
-
+/**
+ * The main implementation of the ItchEditor class.  The TextEditor is used
+ * when editing any sort of plain text file, and can be created with different
+ * modes for syntax highlighting depending on the language.
+ */
 var TextEditor = Class({
   extends: ItchEditor,
 
+  /**
+   * Extra keyboard shortcuts to use with the editor.  Shortcuts defined
+   * within itchpad should be triggered when they happen in the editor, and
+   * they would usually be swallowed without registering them.
+   * See "devtools/sourceeditor/editor" for more information.
+   */
   get extraKeys() {
     let extraKeys = {};
 
-
     // Copy all of the registered keys into extraKeys object, to notify CodeMirror
     // that it should be ignoring these keys
     [...this.doc.querySelectorAll("#itchpad-keyset key")].forEach((key) => {
       let keyUpper = key.getAttribute("key").toUpperCase();
       let toolModifiers = key.getAttribute("modifiers");
       let modifiers = {
         alt: toolModifiers.contains("alt"),
-        shift: toolModifiers.contains("shift"),
+        shift: toolModifiers.contains("shift")
       };
+
+      // On the key press, we will dispatch the event within itchpad.
       extraKeys[Editor.accel(keyUpper, modifiers)] = () => {
         let event = this.doc.createEvent('Event');
         event.initEvent('command', true, true);
         let command = this.doc.querySelector("#" + key.getAttribute("command"));
         command.dispatchEvent(event);
       };
     });
+
     return extraKeys;
   },
 
-  get category() {
-    return MODE_CATEGORIES[this.editor.getMode().name];
-  },
-
   initialize: function(document, mode=Editor.modes.text) {
-    ItchEditor.prototype.initialize.call(this, document);
+    ItchEditor.prototype.initialize.apply(this, arguments);
     this.label = mode.name;
     this.editor = new Editor({
       mode: mode,
       lineNumbers: true,
-      extraKeys: this.extraKeys
+      extraKeys: this.extraKeys,
+      themeSwitching: false
+    });
+
+    // Trigger editor specific events on `this`
+    this.editor.on("change", (...args) => {
+      this.emit("change", ...args);
+    });
+    this.editor.on("cursorActivity", (...args) => {
+      this.emit("cursorActivity", ...args);
     });
 
     this.appended = this.editor.appendTo(this.elt);
   },
 
+  /**
+   * Load a single resource into the text editor.
+   *
+   * @param Resource resource
+   *        The single file / item that is being dealt with (see stores/base)
+   * @returns Promise
+   *          A promise that is resolved once the text editor has loaded the
+   *          contents of the resource.
+   */
   load: function(resource) {
-    return this.appended.then(() => {
-      return resource.load();
-    }).then(text => {
-      this.editor.setText(text);
+    // Wait for the editor.appendTo and resource.load before proceeding.
+    // They can run  in parallel.
+    return promise.all([
+      resource.load(),
+      this.appended
+    ]).then(([resourceContents])=> {
+      this.editor.setText(resourceContents);
       this.editor.setClean();
-      emit(this, "load");
-    }).then(null, console.error);
+      this.emit("load");
+    }, console.error);
   },
 
+  /**
+   * Save the resource based on the current state of the editor
+   *
+   * @param Resource resource
+   *        The single file / item to be saved
+   * @returns Promise
+   *          A promise that is resolved once the resource has been
+   *          saved.
+   */
   save: function(resource) {
     return resource.save(this.editor.getText()).then(() => {
       this.editor.setClean();
-      emit(this, "save", resource);
+      this.emit("save", resource);
     });
   },
 
-  focus: function(resource) {
+  /**
+   * Give focus to the code editor.
+   *
+   * @returns Promise
+   *          A promise that is resolved once the editor has been focused.
+   */
+  focus: function() {
     return this.appended.then(() => {
       this.editor.focus();
     });
   }
 });
 
+/**
+ * Wrapper for TextEditor using JavaScript syntax highlighting.
+ */
+function JSEditor(document) {
+  return TextEditor(document, Editor.modes.js);
+}
 
-function textMode(mode) {
-  return function(document) { return TextEditor(document, mode); }
+/**
+ * Wrapper for TextEditor using CSS syntax highlighting.
+ */
+function CSSEditor(document) {
+  return TextEditor(document, Editor.modes.css);
+}
+
+/**
+ * Wrapper for TextEditor using HTML syntax highlighting.
+ */
+function HTMLEditor(document) {
+  return TextEditor(document, Editor.modes.html);
+}
+
+/**
+ * Get the type of editor that can handle a particular resource.
+ * @param Resource resource
+ *        The single file that is going to be opened.
+ * @returns Type (Editor)
+ *          The type of editor that can handle this resource.  The
+ *          return value is a constructor function.
+ */
+function EditorTypeForResource(resource) {
+  const categoryMap = {
+    "txt": TextEditor,
+    "html": HTMLEditor,
+    "xml": HTMLEditor,
+    "css": CSSEditor,
+    "js": JSEditor,
+    "json": JSEditor
+  };
+  return categoryMap[resource.contentCategory] || TextEditor;
 }
 
 exports.TextEditor = TextEditor;
-exports.JSEditor = textMode(Editor.modes.js);
-exports.CSSEditor = textMode(Editor.modes.css);
-exports.HTMLEditor = textMode(Editor.modes.html);
-
-const categoryMap = {
-  "txt": exports.TextEditor,
-  "html": exports.HTMLEditor,
-  "xml": exports.HTMLEditor,
-  "css": exports.CSSEditor,
-  "js": exports.JSEditor,
-  "json": exports.JSEditor
-};
-
-function EditorTypeForResource(resource) {
-  return categoryMap[resource.contentCategory] || TextEditor;
-}
-
+exports.JSEditor = JSEditor;
+exports.CSSEditor = CSSEditor;
+exports.HTMLEditor = HTMLEditor;
 exports.EditorTypeForResource = EditorTypeForResource;
diff --git a/browser/devtools/itchpad/lib/event/scope.js b/browser/devtools/itchpad/lib/event/scope.js
deleted file mode 100644
--- a/browser/devtools/itchpad/lib/event/scope.js
+++ /dev/null
@@ -1,82 +0,0 @@
-/* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-const { Class } = require("sdk/core/heritage");
-const { EventTarget } = require("sdk/event/target");
-
-var Scope = Class({
-  initialize: function(owner) {
-    this.owner = owner;
-  },
-
-  on: function(target, event, handler) {
-    this.listeners = this.listeners || [];
-    this.listeners.push({
-      target: target,
-      event: event,
-      handler: handler
-    });
-    target.on(event, handler);
-  },
-
-  off: function(t, e, h) {
-    if (!this.listeners) return;
-    this.listeners = this.listeners.filter(({ target, event, handler }) => {
-      return !(target === t && event === e && handler === h);
-    });
-    target.off(event, handler);
-  },
-
-  clear: function(clearTarget) {
-    if (!this.listeners) return;
-    this.listeners = this.listeners.filter(({ target, event, handler }) => {
-      if (target === clearTarget) {
-        target.off(event, handler);
-        return false;
-      }
-      return true;
-    });
-  },
-  destroy: function() {
-    this.owner = undefined;
-    if (!this.listeners) return;
-    this.listeners.forEach(({ target, event, handler }) => {
-      target.off(event, handler);
-    });
-    this.listeners = undefined;
-  }
-});
-
-var scopes = new WeakMap();
-function scope(owner) {
-  if (!scopes.has(owner)) {
-    let scope = new Scope(owner);
-    scopes.set(owner, scope);
-    return scope;
-  }
-  return scopes.get(owner);
-}
-exports.scope = scope;
-
-exports.on = function(owner, target, event, handler) {
-  if (!target) return;
-  scope(owner).on(target, event, handler);
-}
-
-exports.off = function(owner, target, event, handler) {
-  if (!target) return;
-  scope(owner).off(target, event, handler);
-}
-
-exports.forget = function(owner, target) {
-  scope(owner).clear(target);
-}
-
-exports.done = function(owner) {
-  scope(owner).destroy();
-  scopes.delete(owner);
-}
-
diff --git a/browser/devtools/itchpad/lib/helpers/event.js b/browser/devtools/itchpad/lib/helpers/event.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/itchpad/lib/helpers/event.js
@@ -0,0 +1,81 @@
+/* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+const { Class } = require("sdk/core/heritage");
+
+var Scope = Class({
+  initialize: function(owner) {
+    this.owner = owner;
+  },
+
+  on: function(target, event, handler) {
+    this.listeners = this.listeners || [];
+    this.listeners.push({
+      target: target,
+      event: event,
+      handler: handler
+    });
+    target.on(event, handler);
+  },
+
+  off: function(t, e, h) {
+    if (!this.listeners) return;
+    this.listeners = this.listeners.filter(({ target, event, handler }) => {
+      return !(target === t && event === e && handler === h);
+    });
+    target.off(event, handler);
+  },
+
+  clear: function(clearTarget) {
+    if (!this.listeners) return;
+    this.listeners = this.listeners.filter(({ target, event, handler }) => {
+      if (target === clearTarget) {
+        target.off(event, handler);
+        return false;
+      }
+      return true;
+    });
+  },
+  destroy: function() {
+    this.owner = undefined;
+    if (!this.listeners) return;
+    this.listeners.forEach(({ target, event, handler }) => {
+      target.off(event, handler);
+    });
+    this.listeners = undefined;
+  }
+});
+
+var scopes = new WeakMap();
+function scope(owner) {
+  if (!scopes.has(owner)) {
+    let scope = new Scope(owner);
+    scopes.set(owner, scope);
+    return scope;
+  }
+  return scopes.get(owner);
+}
+exports.scope = scope;
+
+exports.on = function on(owner, target, event, handler) {
+  if (!target) return;
+  scope(owner).on(target, event, handler);
+}
+
+exports.off = function off(owner, target, event, handler) {
+  if (!target) return;
+  scope(owner).off(target, event, handler);
+}
+
+exports.forget = function forget(owner, target) {
+  scope(owner).clear(target);
+}
+
+exports.done = function done(owner) {
+  scope(owner).destroy();
+  scopes.delete(owner);
+}
+
diff --git a/browser/devtools/itchpad/lib/helpers/file-picker.js b/browser/devtools/itchpad/lib/helpers/file-picker.js
--- a/browser/devtools/itchpad/lib/helpers/file-picker.js
+++ b/browser/devtools/itchpad/lib/helpers/file-picker.js
@@ -1,19 +1,44 @@
 /* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+/**
+ * This file contains helper functions for showing OS-specific
+ * file and folder pickers
+ */
+
 const { Cu, Cc, Ci } = require("chrome");
 const { FileUtils } = Cu.import("resource://gre/modules/FileUtils.jsm", {});
 const promise = require("itchpad/helpers/promise");
 const { merge } = require("sdk/util/object");
+const { localizedStrings } = require("itchpad/helpers/l10n");
 
+/**
+ * Show a file / folder picker.
+ * https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFilePicker
+ *
+ * @param object options
+ *        Additional options for setting the source. Supported options:
+ *          - directory: string, The path to default opening
+ *          - defaultName: string, The filename including extension that
+ *                         should be suggested to the user as a default
+ *          - window: DOMWindow, The filename including extension that
+ *                         should be suggested to the user as a default
+ *          - title: string, The filename including extension that
+ *                         should be suggested to the user as a default
+ *          - mode: int, The type of picker to open.
+ *
+ * @return promise
+ *         A promise that is resolved with the full path
+ *         after the file has been picked.
+ */
 function showPicker(options) {
   let fp = Cc["@mozilla.org/filepicker;1"].createInstance(Ci.nsIFilePicker);
   if (options.directory) {
     try {
       fp.displayDirectory = FileUtils.File(options.directory);
     } catch(ex) {
       console.warn(ex);
     }
@@ -33,31 +58,61 @@ function showPicker(options) {
         deferred.reject();
       }
     }
   });
   return deferred.promise;
 }
 exports.showPicker = showPicker;
 
+// XXX: internationalize these strings
+
+/**
+ * Show a save dialog
+ * https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFilePicker
+ *
+ * @param object options
+ *        Additional options as specified in showPicker
+ *
+ * @return promise
+ *         A promise that is resolved when the save dialog has closed
+ */
 function showSave(options) {
   return showPicker(merge({
-    title: "Select a File",
+    title: localizedStrings.selectFileLabel,
     mode: Ci.nsIFilePicker.modeSave
   }, options));
 }
 exports.showSave = showSave;
 
+/**
+ * Show a file open dialog
+ *
+ * @param object options
+ *        Additional options as specified in showPicker
+ *
+ * @return promise
+ *         A promise that is resolved when the file has been opened
+ */
 function showOpen(options) {
   return showPicker(merge({
-    title: "Open a File",
+    title: localizedStrings.openFileLabel,
     mode: Ci.nsIFilePicker.modeOpen
   }, options));
 }
 exports.showOpen = showOpen;
 
+/**
+ * Show a folder open dialog
+ *
+ * @param object options
+ *        Additional options as specified in showPicker
+ *
+ * @return promise
+ *         A promise that is resolved when the folder has been opened
+ */
 function showOpenFolder(options) {
   return showPicker(merge({
-    title: "Select a Folder",
+    title: localizedStrings.openFolderLabel,
     mode: Ci.nsIFilePicker.modeGetFolder
   }, options));
 }
 exports.showOpenFolder = showOpenFolder;
diff --git a/browser/devtools/itchpad/lib/helpers/l10n.js b/browser/devtools/itchpad/lib/helpers/l10n.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/itchpad/lib/helpers/l10n.js
@@ -0,0 +1,32 @@
+/* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/**
+ * This file contains helper functions for internationalizing itchpad strings
+ */
+
+const { Cu, Cc, Ci } = require("chrome");
+const { ViewHelpers } = Cu.import("resource:///modules/devtools/ViewHelpers.jsm", {});
+const ITCHPAD_STRINGS_URI = "chrome://browser/locale/devtools/itchpad.properties";
+const L10N = new ViewHelpers.L10N(ITCHPAD_STRINGS_URI).stringBundle;
+
+function getLocalizedString (name) {
+  try {
+    return L10N.GetStringFromName(name);
+  } catch (ex) {
+    console.log("Error reading '" + name + "'");
+    throw new Error("l10n error with " + name);
+  }
+}
+
+exports.getLocalizedString = getLocalizedString;
+exports.localizedStrings = {
+  get deleteLabel() { return getLocalizedString("itchpad.deleteLabel"); },
+  get newLabel() { return getLocalizedString("itchpad.newLabel"); },
+  get selectFileLabel() { return getLocalizedString("itchpad.selectFileLabel"); },
+  get openFileLabel() { return getLocalizedString("itchpad.openFileLabel"); },
+  get openFolderLabel() { return getLocalizedString("itchpad.selectFolderLabel"); },
+};
\ No newline at end of file
diff --git a/browser/devtools/itchpad/lib/helpers/osfile.js b/browser/devtools/itchpad/lib/helpers/osfile.js
deleted file mode 100644
--- a/browser/devtools/itchpad/lib/helpers/osfile.js
+++ /dev/null
@@ -1,9 +0,0 @@
-/* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-const { Cu } = require("chrome");
-const { OS } = Cu.import("resource://gre/modules/osfile.jsm", {});
-module.exports = OS;
diff --git a/browser/devtools/itchpad/lib/helpers/promise.js b/browser/devtools/itchpad/lib/helpers/promise.js
--- a/browser/devtools/itchpad/lib/helpers/promise.js
+++ b/browser/devtools/itchpad/lib/helpers/promise.js
@@ -1,10 +1,12 @@
 /* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
-// ... until sdk/core/promise uses Promise.jsm...
-
+/**
+ * This helper is a quick way to require() just the Promise
+ * object from Promise.jsm.
+ */
 const { Cu } = require("chrome");
 module.exports = Cu.import("resource://gre/modules/Promise.jsm", {}).Promise;
diff --git a/browser/devtools/itchpad/lib/helpers/readdir.js b/browser/devtools/itchpad/lib/helpers/readdir.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/itchpad/lib/helpers/readdir.js
@@ -0,0 +1,78 @@
+/* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/* This file is meant to be loaded in a worker using:
+ * new ChromeWorker("chrome://browser/content/devtools/readdir.js")
+ */
+
+importScripts("resource://gre/modules/osfile.jsm");
+
+function readDir(path, ignore, maxDepth = Infinity) {
+  let ret = {};
+
+  let set = new Set();
+
+  let info = OS.File.stat(path);
+  set.add({
+    path: path,
+    name: info.name,
+    isDir: info.isDir,
+    isSymLink: info.isSymLink,
+    depth: 0
+  });
+
+  for (let info of set) {
+    let children = [];
+
+    if (info.isDir && !info.isSymLink) {
+      if (info.depth > maxDepth) {
+        continue;
+      }
+
+      let iterator = new OS.File.DirectoryIterator(info.path);
+      try {
+        for (let child in iterator) {
+          if (ignore && child.name.match(ignore)) {
+            continue;
+          }
+
+          children.push(child.path);
+          set.add({
+            path: child.path,
+            name: child.name,
+            isDir: child.isDir,
+            isSymLink: child.isSymLink,
+            depth: info.depth + 1
+          });
+        }
+      } finally {
+        iterator.close();
+      }
+    }
+
+    ret[info.path] = {
+      name: info.name,
+      isDir: info.isDir,
+      isSymLink: info.isSymLink,
+      depth: info.depth,
+      children: children,
+    };
+  }
+
+  return ret;
+};
+
+onmessage = function (event) {
+  try {
+    let {path, ignore, depth} = event.data;
+    let message = readDir(path, ignore, depth);
+    postMessage(message);
+  } catch(ex) {
+    console.log(ex);
+  }
+};
+
+
diff --git a/browser/devtools/itchpad/lib/helpers/task.js b/browser/devtools/itchpad/lib/helpers/task.js
deleted file mode 100644
--- a/browser/devtools/itchpad/lib/helpers/task.js
+++ /dev/null
@@ -1,11 +0,0 @@
-/* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-const { Cu } = require("chrome");
-
-const { Task } = Cu.import("resource://gre/modules/Task.jsm", {});
-
-module.exports = Task;
diff --git a/browser/devtools/itchpad/lib/itchpad.js b/browser/devtools/itchpad/lib/itchpad.js
--- a/browser/devtools/itchpad/lib/itchpad.js
+++ b/browser/devtools/itchpad/lib/itchpad.js
@@ -1,83 +1,102 @@
 /* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+const { Cc, Ci, Cu } = require("chrome");
 const { Class } = require("sdk/core/heritage");
-
 const { Project } = require("itchpad/project");
-const { PageCollection } = require("itchpad/page");
-const { TreeView } = require("itchpad/tree");
+const { CollectionTree } = require("itchpad/tree");
 const { ShellDeck } = require("itchpad/shells");
-const { Resource } = require("itchpad/stores/base");
+const { Resource } = require("itchpad/stores/resource");
 const { ResourceMap, Pair } = require("itchpad/resource-map");
 const { registeredPlugins } = require("itchpad/plugins/core");
 const { EventTarget } = require("sdk/event/target");
-const { on, forget } = require("itchpad/event/scope");
+const { on, forget } = require("itchpad/helpers/event");
 const { emit } = require("sdk/event/core");
 const { merge } = require("sdk/util/object");
 const promise = require("itchpad/helpers/promise");
 const { ToolSidebar } = require("devtools/framework/sidebar");
-
-const { Cc, Ci, Cu } = require("chrome");
 const { ViewHelpers } = Cu.import("resource:///modules/devtools/ViewHelpers.jsm", {});
-Cu.import("resource:///modules/devtools/DOMHelpers.jsm");
-
-const {Services} = Cu.import("resource://gre/modules/Services.jsm", {});
+const { DOMHelpers } = Cu.import("resource:///modules/devtools/DOMHelpers.jsm");
+const { Services } = Cu.import("resource://gre/modules/Services.jsm", {});
 const ITCHPAD_URL = "chrome://browser/content/devtools/itchpad.xul";
-const ITCHPAD_STRINGS_URI = "chrome://browser/locale/devtools/itchpad.properties";
-const L10N = new ViewHelpers.L10N(ITCHPAD_STRINGS_URI).stringBundle;
-
-// Uncomment to get logging of addon events.
-require("itchpad/plugins/logging/lib/logging");
 
 require("itchpad/plugins/apply/lib/apply");
 require("itchpad/plugins/dirty/lib/dirty");
 require("itchpad/plugins/delete/lib/delete");
 require("itchpad/plugins/new/lib/new");
 require("itchpad/plugins/save/lib/save");
-require("itchpad/plugins/open/lib/open");
-require("itchpad/plugins/style/lib/style");
-require("itchpad/plugins/notify/lib/notify");
-require("itchpad/plugins/fuzzy-search/lib/plugin");
 require("itchpad/plugins/image-view/lib/plugin");
-require("itchpad/plugins/drag-drop-new/lib/drag-drop-new");
-require("itchpad/plugins/find-and-replace/lib/plugin");
 require("itchpad/plugins/app-manager/lib/plugin");
 require("itchpad/plugins/status-bar/lib/plugin");
 
+// Disabled Plugins.  These are not used right now, but will be
+// needed in the near future.
+// require("itchpad/plugins/open/lib/open");
+// require("itchpad/plugins/drag-drop-new/lib/drag-drop-new");
+// require("itchpad/plugins/find-and-replace/lib/plugin");
+
+// Uncomment to get logging of addon events.
+// require("itchpad/plugins/logging/lib/logging");
+
 /**
- * This is the main class tying together an instance of the pad.  It is
- * created in itchpad.xul.
+ * This is the main class tying together an instance of the pad.
+ * The frontend is contained inside of this.iframe, which loads itchpad.xul.
+ * XXXX More info
  *
  * It mediates access to a few resources:
  * - The list of plugins for this instance.
  * - The tree view that views file trees.
  * - The ShellDeck that contains all editors for this instance.
  * - The Project that includes local resources for the instance.
  * - The list of Live Stores for the instance.
  * - The ResourceMap that ties Live resources to Project resources.
  * - The Target associated with this instance, if any.
  * - The toolbox associated with this instance, if any.
  */
+
+ /* Events emitted on this object can be bound in this form:
+  *    itchpad.on("onEditorCreated", (editor) => { });
+  *
+  * Here are the events that are emitted:
+  *    onEditorDestroyed: When editor is destroyed
+  *    onEditorSave: When editor is saved
+  *    onEditorLoad: When editor is loaded
+  *    onEditorActivated: When editor is activated
+  *    onEditorChange: When editor is changed
+  *    onEditorCursorActivity: When there is cursor activity in a text editor
+  *    onCommand: When a command happens
+  *    onEditorDestroyed: When editor is destroyed
+  *
+  */
 var Itchpad = Class({
   extends: EventTarget,
 
   initialize: function(options = {}) {
     this.project = options.project;
     this.stores = new Set();
     this._onNodeSelection = this._onNodeSelection.bind(this);
     this._onEditorCreated = this._onEditorCreated.bind(this);
     this._onEditorActivated = this._onEditorActivated.bind(this);
     this._updateEditorMenuItems = this._updateEditorMenuItems.bind(this);
   },
 
+  /**
+   * Load the instance inside of a specified iframe
+   *
+   * @param Iframe iframe
+   *        The iframe to inject the itchpad DOM into
+   * @returns Promise
+   *          A promise that is resolved once the iframe has been
+   *          loaded.
+   */
   load: function(iframe) {
     let deferred = promise.defer();
     this.iframe = iframe;
 
     let domReady = () => {
       this._onLoad();
       deferred.resolve();
     };
@@ -85,16 +104,19 @@ var Itchpad = Class({
     let domHelper = new DOMHelpers(this.iframe.contentWindow);
     domHelper.onceDOMReady(domReady);
 
     this.iframe.setAttribute("src", ITCHPAD_URL);
 
     return deferred.promise;
   },
 
+  /**
+   * Build the itchpad DOM inside of this.iframe.
+   */
   _onLoad: function() {
     this.document = this.iframe.contentDocument;
     this.window = this.iframe.contentWindow;
 
     this._buildSidebar();
 
     this.window.addEventListener("unload", this.destroy.bind(this));
 
@@ -116,23 +138,26 @@ var Itchpad = Class({
       this.project = new Project({
         id: "Test",
         name: "App",
         directories: [],
         openFiles: []
       });
     }
     this.setProject(this.project);
-    this.setPage(new PageCollection());
 
+    this._initCommands();
     this._initPlugins();
   },
 
+
+  /**
+   * Create the project tree sidebar that lists files.
+   */
   _buildSidebar: function() {
-    // Create the sources sidebar
     this.projectTree = new CollectionTree(this.document, {
       nodeVisible: this.nodeVisible.bind(this),
       nodeFormatter: this.formatNode.bind(this)
     });
     this.projectTree.on("selection", this._onNodeSelection);
 
     let sourcesBox = this.document.querySelector("#sources");
     sourcesBox.appendChild(this.projectTree.elt);
@@ -142,87 +167,134 @@ var Itchpad = Class({
     this.sidebar = new ToolSidebar(tabbox, this, "itchpad");
     ViewHelpers.togglePane({
       visible: false,
       delayed: false,
       animated: false
     }, this.document.querySelector("#sidebar-box"));
   },
 
-  _initPlugins: function() {
+  /**
+   * Set up listeners for commands to dispatch to all of the plugins
+   */
+  _initCommands: function() {
     this.commands = this.document.querySelector("#itchpad-commandset");
     this.commands.addEventListener("command", (evt) => {
       evt.stopPropagation();
       evt.preventDefault();
       this.pluginDispatch("onCommand", evt.target.id, evt.target);
     });
-    this.pluginMethods = {};
-    this.loadPlugins();
   },
 
+  /**
+   * Initialize each plugin in registeredPlugins
+   */
+  _initPlugins: function() {
+    this._plugins = [];
+
+    for (let plugin of registeredPlugins) {
+      try {
+        this._plugins.push(plugin(this));
+      } catch(ex) {
+        console.exception(ex);
+      }
+    }
+
+    this.pluginDispatch("lateInit");
+  },
+
+  /**
+   * Enable / disable necessary menu items using globalOverlay.js.
+   */
   _updateEditorMenuItems: function() {
     this.window.goUpdateGlobalEditMenuItems();
     this.window.goUpdateGlobalEditMenuItems();
     let commands = ['cmd_undo', 'cmd_redo', 'cmd_delete', 'cmd_findAgain'];
     commands.forEach(this.window.goUpdateCommand);
   },
 
+  /**
+   * Destroy all objects on the iframe unload event.
+   */
   destroy: function() {
     this._plugins.forEach(plugin => { plugin.destroy(); });
     this.projectTree.forgetCollection();
     this.projectTree.destroy();
     this.projectTree = null;
   },
 
-  // Set the current project viewed by the itchpad.
+  /**
+   * Set the current project viewed by the itchpad.
+   *
+   * @param Project project
+   *        The project to set.
+   */
   setProject: function(project) {
     this.project = project;
     this.resourceMap.setProject(project);
     this.projectTree.setCollection(project);
   },
 
+  /**
+   * Set the current project viewed by the itchpad.
+   *
+   * @param string path
+   *               The file path to set
+   * @param Object opts
+   *               Custom options used by the project. See plugins/app-manager.
+   */
   setProjectToSinglePath: function(path, opts = {}) {
     let existingPaths = [...this.projectTree.models].map(model=>model.path);
-    console.log(
-      "Setting project to single path: " + path,
-      "Existing paths: ", existingPaths.join(", ")
-    );
     this.project.customOpts = opts;
     this.project.projectType = "APP_MANAGER";
     this.project.removePaths(existingPaths);
-    this.project.addPath(path);
-    this.project.save();
+    let oncePathAdded = this.project.addPath(path);
+    console.log("Path has been added", oncePathAdded);
+    return this.project.save();
   },
 
-  setPage: function(page) {
-    this.page = page;
-    this.resourceMap.setPage(page);
-  },
-
+  /**
+   * Open a resource in a particular shell
+   *
+   * @param Resource resource
+   *                 The file to be opened.
+   */
   openResource: function(resource) {
     let pair = this.resourceMap.pair(resource);
     let shell = this.shells.open(pair, resource);
 
     this.projectTree.select(resource);
   },
 
-  // When a node is selected in the tree, open its associated editor.
+  /**
+   * When a node is selected in the tree, open its associated editor.
+   *
+   * @param Resource resource
+   *                 The file that has been selected
+   */
   _onNodeSelection: function(resource) {
-    // XXX: Should check to see if there is a suitable editor rather
-    // than blacklisting these types
+    // Don't attempt to open a directory that is not the root element.
     if (resource.isDir && resource.parent) {
       return;
     }
     this.openResource(resource);
   },
 
   /**
-   * Plugin UI commands.  These aren't really great, we should rethink these.
+   * Create an xul element with options
+   *
+   * @param string type
+   *               The tag name of the element to create.
+   * @param Object options
+   *               "command": DOMNode or string ID of a command element.
+   *               "parent": DOMNode or selector of parent to append child to.
+   *               anything other keys are set as an attribute as the element.
+   * @returns DOMElement
+   *          The element that has been created.
    */
-
   createElement: function(type, options) {
     let elt = this.document.createElement(type);
 
     let parent;
 
     for (let opt in options) {
       if (opt === "command") {
         let command = typeof(options.command) === "string" ? options.command : options.command.id;
@@ -240,25 +312,38 @@ var Itchpad = Class({
         parent = this.document.querySelector(parent);
       }
       parent.appendChild(elt);
     }
 
     return elt;
   },
 
-  getLocalizedString: function(name) {
-    try {
-      return L10N.GetStringFromName(name);
-    } catch (ex) {
-      console.log("Error reading '" + name + "'");
-      throw new Error("l10n error with " + name);
-    }
+  /**
+   * Create a "menuitem" xul element with options
+   *
+   * @param Object options
+   *               See createElement for available options.
+   * @returns DOMElement
+   *          The menuitem that has been created.
+   */
+  createMenuItem: function(options) {
+    return this.createElement("menuitem", options);
   },
 
+  /**
+   * Add a command XXXXX
+   *
+   * @param Object definition
+   *               key:
+   *               id:
+   *               modifiers:
+   * @returns DOMElement
+   *          The command element that has been created.
+   */
   addCommand: function(definition) {
     let command = this.document.createElement("command");
     command.setAttribute("id", definition.id);
     if (definition.key) {
       let key = this.document.createElement("key");
       key.id = "key_" + definition.id;
 
       let keyName = definition.key;
@@ -271,196 +356,141 @@ var Itchpad = Class({
       key.setAttribute("command", definition.id);
       this.document.getElementById("itchpad-keyset").appendChild(key);
     }
     command.setAttribute("oncommand", "void(0);"); // needed. See bug 371900
     this.document.getElementById("itchpad-commandset").appendChild(command);
     return command;
   },
 
-
-  createMenuItem: function(options) {
-    return this.createElement("menuitem", options);
-  },
-
-  createToolbarGroup: function(options) {
-    return this.createElement("hbox", merge({
-      class: "devtools-toolbarbutton-group"
-    }, options));
-  },
-
-  createToolbarButton: function(options) {
-    return this.createElement("toolbarbutton", merge({
-      class: "devtools-toolbarbutton"
-    }, options));
-  },
-
-  addSidebar: function(name, url) {
-    let deferred = promise.defer();
-
-    this.sidebar.once(name + "-ready", () => {
-      deferred.resolve(this.sidebar.getWindowForTab(name));
-    });
-    this.sidebar.addTab(name, url, false);
-
-    return deferred.promise;
-  },
-
-  showSidebar: function(name) {
-    this.sidebar.select(name);
-    let sidebar = this.document.getElementById("sidebar-box");
-    ViewHelpers.togglePane({ visible: true, animated: true, delayed: true }, sidebar);
-  },
-
-  hideSidebar: function() {
-    let sidebar = this.document.getElementById("sidebar-box");
-    ViewHelpers.togglePane({ visible: false, animated: true, delayed: true }, sidebar);
-  },
-
-  loadPlugins: function() {
-    this._plugins = [];
-
-    for (let plugin of registeredPlugins) {
-      try {
-        this._plugins.push(plugin(this));
-      } catch(ex) {
-        console.exception(ex);
-      }
-    }
-
-    this.pluginDispatch("lateInit");
-  },
-
+  /**
+   * Get the instance of a plugin registered with a certain type.
+   *
+   * @param Type pluginType
+   *             The type, such as SavePlugin
+   * @returns Plugin
+   *          The plugin instance matching the specified type.
+   */
   getPlugin: function(pluginType) {
     for (let plugin of this.plugins) {
       if (plugin.constructor === pluginType) {
         return plugin;
       }
     }
     return null;
   },
 
+  /**
+   * Get all plugin instances active for the current plugin
+   *
+   * @returns [Plugin]
+   */
   get plugins() {
     if (!this._plugins) {
       console.log("plugins requested before _plugins was set");
       return [];
     }
     return this._plugins.filter(plugin => {
       return !this.project.projectType ||
              !plugin.projectType ||
              this.project.projectType === plugin.projectType;
     });
   },
 
+  /**
+   * Dispatch an onEditorCreated event, and listen for other events specific
+   * to this editor instance.
+   *
+   * @param Editor editor
+   *               The new editor instance.
+   */
   _onEditorCreated: function(editor) {
-    this.plugins.forEach(plugin => plugin.onEditorCreated(editor));
-    this._editorListen(editor, "change", "onEditorChange");
-    this._editorListen(editor, "cursorActivity", "onEditorCursorActivity");
-    this._containerListen(editor, "load", "onEditorLoad");
-    this._containerListen(editor, "save", "onEditorSave");
+    this.pluginDispatch("onEditorCreated", editor);
+    this._editorListenAndDispatch(editor, "change", "onEditorChange");
+    this._editorListenAndDispatch(editor, "cursorActivity", "onEditorCursorActivity");
+    this._editorListenAndDispatch(editor, "load", "onEditorLoad");
+    this._editorListenAndDispatch(editor, "save", "onEditorSave");
   },
 
+  /**
+   * Dispatch an onEditorActivated event and finish setting up once the
+   * editor is ready to use.
+   *
+   * @param Editor editor
+   *               The editor instance, which is now appended in the document.
+   */
   _onEditorActivated: function(editor) {
     editor.setToolbarVisibility();
-    this.plugins.forEach(plugin => plugin.onEditorActivated(editor));
+    this.pluginDispatch("onEditorActivated", editor);
   },
 
   /**
    * Call a method on all plugins that implement the method.
+   * Also emits the same handler name on `this`.
+   *
+   * @param string handler
+   *               Which function name to call on plugins.
+   * @param ...args args
+   *                All remaining parameters are passed into the handler.
    */
   pluginDispatch: function(handler, ...args) {
-    // XXX: EMIT ON this as well and document the events
+    emit(this, handler, ...args);
     this.plugins.forEach(plugin => {
       try {
         if (handler in plugin) plugin[handler](...args);
       } catch(ex) {
         console.error(ex);
       }
     })
   },
 
-  _containerListen: function(editor, event, handler) {
+  /**
+   * Listen to an event on the editor object and dispatch it
+   * to all plugins that implement the associated method
+   *
+   * @param Editor editor
+   *               Which editor to listen to
+   * @param string event
+   *               Which editor event to listen for
+   * @param string handler
+   *               Which plugin method to call
+   */
+  _editorListenAndDispatch: function(editor, event, handler) {
     editor.on(event, (...args) => {
       this.pluginDispatch(handler, editor, ...args);
     });
   },
 
-  _editorListen: function(editor, event, handler) {
-    if (!editor.editor) {
-      return;
-    }
-    editor.editor.on(event, (...args) => {
-      this.pluginDispatch(handler, editor, ...args);
-    });
-  },
-
-  /**
-   * Set the current devtools target for the pad.
-   */
-  setTarget: function(target, own=false) {
-    if (target === this.target) {
-      return promise.resolve();
-    }
-
-    if (this.ownsTarget && this.target) {
-      this.target.destroy();
-    }
-
-    this._webConsolePromise = null;
-    this.ownsTarget = own;
-    this.target = target;
-
-    let remote = target ? target.makeRemote() : promise.resolve();
-
-    return remote.then(() => {
-      this.page.setTarget(target);
-      emit(this, "target-changed");
-    }).then(null, console.error);
-  },
-
-  /**
-   * Get a WebConsoleClient for communicating with the current target.
-   */
-  getWebConsoleClient: function() {
-    if (this._webConsolePromise) {
-      return this._webConsolePromise;
-    }
-    let deferred = promise.defer();
-    this.target.client.attachConsole(this.target.form.consoleActor, [], (response, consoleClient) => {
-      try {
-        if (response.error) {
-          deferred.reject(response.error);
-          return;
-        }
-        deferred.resolve(consoleClient);
-      } catch(ex) {
-        console.error(ex);
-      }
-    });
-    this._webConsolePromise = deferred.promise;
-    return deferred.promise
-  },
-
   /**
    * Find a shell for an editor, pair, or resource.
+   *
+   * @param Resource resource
+   *                 The file to be opened.
+   * @returns Shell
+   *          XXXX
    */
   shellFor: function(resource) {
     let pair = this.pairFor(resource);
     return this.shells.shellFor(pair);
   },
 
   /**
    * Returns the Editor for a given resource.
+   *
+   * @param Resource resource
+   *                 The file to check.
+   * @returns Editor
+   *          Instance of the editor for this file.
    */
   editorFor: function(resource) {
     let shell = this.shellFor(resource);
     return shell ? shell.editor : shell;
   },
 
-  /**
+  /** XXXX Continue documenting here
    * Returns the Pair that matches a given editor, pair, or resource.
    */
   pairFor: function(thing) {
     if (thing instanceof Pair) {
       return thing;
     }
     if (thing instanceof Resource) {
       return this.resourceMap.pair(thing);
@@ -490,78 +520,49 @@ var Itchpad = Class({
   /**
    * Decide whether a given node should be hidden in the tree.
    */
   nodeVisible: function(node) {
     return true;
   },
 
   /**
-   * Format the given node for display in the resource tree.
+   * Format the given node for display in the resource tree view.
+   *
+   * @param Resource resource
+   *                 The file to be opened.
+   * @param DOMNode elt
+   *                The element in the tree to render into.
    */
-  formatNode: function(node, elt) {
-    let editor = this.editorFor(node);
+  formatNode: function(resource, elt) {
+    let editor = this.editorFor(resource);
     let renderedByPlugin = false;
 
-    if (this.plugins) {
-      this.plugins.forEach(plugin => {
-        if (!plugin.onAnnotate) {
-          return;
-        }
-        if (plugin.onAnnotate(node, editor, elt)) {
-          renderedByPlugin = true;
-        }
-      });
-    }
+    // Allow plugins to override default templating of resource in tree.
+    this.plugins.forEach(plugin => {
+      if (!plugin.onAnnotate) {
+        return;
+      }
+      if (plugin.onAnnotate(resource, editor, elt)) {
+        renderedByPlugin = true;
+      }
+    });
 
+    // If no plugin wants to handle it, just use a string from the resource.
     if (!renderedByPlugin) {
-      elt.textContent = node.displayName;
+      elt.textContent = resource.displayName;
     }
   },
 
   get sourcesVisible() {
     return this.sourceToggle.hasAttribute("pane-collapsed");
   },
 
   get currentShell() {
     return this.shells.currentShell;
   },
 
   get currentEditor() {
     return this.shells.currentEditor;
   },
 });
 
-var CollectionTree = Class({
-  extends: TreeView,
-
-  initialize: function(document, options) {
-    TreeView.prototype.initialize.call(this, document, options);
-  },
-
-  forgetCollection: function() {
-    if (this.coll) {
-      forget(this, this.coll);
-      for (let store of this.coll.allStores()) {
-        this.removeModel(store);
-      }
-    }
-  },
-
-  setCollection: function(coll) {
-    this.forgetCollection();
-    this.coll = coll;
-    if (this.coll) {
-      on(this, coll, "store-added", this.addModel.bind(this));
-      on(this, coll, "store-removed", this.removeModel.bind(this));
-      on(this, coll, "project-saved", this.refresh.bind(this));
-      this.refresh();
-    }
-  },
-
-  refresh: function() {
-    for (let store of this.coll.allStores()) {
-      this.addModel(store);
-    }
-  }
-});
-
 exports.Itchpad = Itchpad;
diff --git a/browser/devtools/itchpad/lib/menuitems.js b/browser/devtools/itchpad/lib/menuitems.js
deleted file mode 100644
--- a/browser/devtools/itchpad/lib/menuitems.js
+++ /dev/null
@@ -1,222 +0,0 @@
-/* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-
-'use strict';
-
-const windowUtils = require("sdk/deprecated/window-utils");
-const { Class } = require("sdk/core/heritage");
-const { validateOptions } = require("sdk/deprecated/api-utils");
-const { on, emit, once, off } = require("sdk/event/core");
-const { isBrowser } = require("sdk/window/utils");
-const { EventTarget } = require('sdk/event/target');
-const menuitemNS = require("sdk/core/namespace").ns();
-
-const { unload } = require('unloader');
-
-const NS_XUL = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
-
-function MenuitemOptions(options) {
-  return validateOptions(options, {
-    id: { is: ['string'] },
-    menuid: { is: ['undefined', 'string'] },
-    insertbefore: { is: ['undefined', 'string', 'object', 'number'] },
-    label: { is: ["string"] },
-    include: { is: ['string', 'undefined'] },
-    disabled: { is: ["undefined", "boolean"], map: function(v) !!v},
-    accesskey: { is: ["undefined", "string"] },
-    key: { is: ["undefined", "string"] },
-    checked: { is: ['undefined', 'boolean'] },
-    className: { is: ["undefined", "string"] },
-    onCommand: { is: ['undefined', 'function'] },
-    useChrome: { map: function(v) !!v }
-  });
-}
-
-let Menuitem = Class({
-  extends: EventTarget,
-  initialize: function(options) {
-    options = menuitemNS(this).options = MenuitemOptions(options);
-    EventTarget.prototype.initialize.call(this, options);
-
-    menuitemNS(this).destroyed = false;
-    menuitemNS(this).unloaders = [];
-    menuitemNS(this).menuitems = addMenuitems(this, options).menuitems;
-  },
-  get id() menuitemNS(this).options.id,
-  get label() menuitemNS(this).options.label,
-  set label(val) updateProperty(this, 'label', val),
-  get checked() menuitemNS(this).options.checked,
-  set checked(val) updateProperty(this, 'checked', !!val),
-  get disabled() menuitemNS(this).options.disabled,
-  set disabled(val) updateProperty(this, 'disabled', !!val),
-  get key() menuitemNS(this).options.key,
-  set key(val) updateProperty(this, 'key', val),
-  clone: function (overwrites) {
-    let opts = Object.clone(menuitemNS(this).options);
-    for (let key in overwrites) {
-      opts[key] = ovrewrites[key];
-    }
-    return Menuitem(opts);
-  },
-  get menuid() menuitemNS(this).options.menuid,
-  set menuid(val) {
-    let options = menuitemNS(this).options;
-    options.menuid = val;
-
-    forEachMI(function(menuitem, i, $) {
-      updateMenuitemParent(menuitem, options, $);
-    });
-  },
-  destroy: function() {
-    if (!menuitemNS(this).destroyed) {
-      menuitemNS(this).destroyed = true;
-      menuitemNS(this).unloaders.forEach(function(u) u());
-      menuitemNS(this).unloaders = null;
-      menuitemNS(this).menuitems = null;
-    }
-    return true;
-  }
-});
-
-function addMenuitems(self, options) {
-  let menuitems = [];
-
-  // setup window tracker
-  windowUtils.WindowTracker({
-    onTrack: function (window) {
-      if (menuitemNS(self).destroyed) return;
-      if (options.include) {
-        if (options.include != window.location) return;
-      }
-      else if (!isBrowser(window)) {
-        return;
-      }
-
-      // add the new menuitem to a menu
-      var menuitem = updateMenuitemAttributes(
-          window.document.createElementNS(NS_XUL, "menuitem"), options);
-      var menuitems_i = menuitems.push(menuitem) - 1;
-
-      // add the menutiem to the ui
-      let added = updateMenuitemParent(menuitem, options, function(id) window.document.getElementById(id));
-
-      menuitem.addEventListener("command", function() {
-        if (!self.disabled)
-          emit(self, 'command', options.useChrome ? window : null);
-      }, true);
-
-      // add unloader
-      let unloader = function unloader() {
-        menuitem.parentNode && menuitem.parentNode.removeChild(menuitem);
-        menuitems[menuitems_i] = null;
-      };
-
-      menuitemNS(self).unloaders.push(function() {
-        remover();
-        unloader();
-      });
-
-      let remover = unload(unloader, window);
-    }
-
-  });
-
-  return { menuitems: menuitems };
-}
-
-function updateMenuitemParent(menuitem, options, $) {
-  // add the menutiem to the ui
-  if (Array.isArray(options.menuid)) {
-      let ids = options.menuid;
-      for (var len = ids.length, i = 0; i < len; i++) {
-        if (tryParent($(ids[i]), menuitem, options.insertbefore))
-          return true;
-      }
-  }
-  else {
-    return tryParent($(options.menuid), menuitem, options.insertbefore);
-  }
-
-  return false;
-}
-
-function updateMenuitemAttributes(menuitem, options) {
-  menuitem.setAttribute("id", options.id);
-  menuitem.setAttribute("label", options.label);
-
-  if (options.accesskey)
-    menuitem.setAttribute("accesskey", options.accesskey);
-
-  if (options.key)
-    menuitem.setAttribute("key", options.key);
-
-  menuitem.setAttribute("disabled", !!options.disabled);
-
-  if (options.image) {
-    menuitem.classList.add("menuitem-iconic");
-    menuitem.style.listStyleImage = "url('" + options.image + "')";
-  }
-
-  if (options.checked)
-    menuitem.setAttribute('checked', options.checked);
-
-  if (options.className)
-    options.className.split(/\s+/).forEach(function(name) menuitem.classList.add(name));
-
-  return menuitem;
-}
-
-function updateProperty(menuitem, key, val) {
-  menuitemNS(menuitem).options[key] = val;
-
-  forEachMI(function(menuitem) {
-    menuitem.setAttribute(key, val);
-  }, menuitem);
-  return val;
-}
-
-function forEachMI(callback, menuitem) {
-  menuitemNS(menuitem).menuitems.forEach(function(mi, i) {
-    if (!mi) return;
-    callback(mi, i, function(id) mi.ownerDocument.getElementById(id));
-  });
-}
-
-function tryParent(parent, menuitem, before) {
-  if (parent) {
-    if (!before) {
-      parent.appendChild(menuitem);
-      return true;
-    }
-
-    parent.insertBefore(menuitem, insertBefore(parent, before));
-    return true;
-  }
-
-  return false;
-}
-
-function insertBefore(parent, insertBefore) {
-  if (typeof insertBefore == "number") {
-    switch (insertBefore) {
-      case MenuitemExport.FIRST_CHILD:
-        return parent.firstChild;
-    }
-    return null;
-  }
-  else if (typeof insertBefore == "string") {
-    return parent.querySelector("#" + insertBefore);
-  }
-  return insertBefore;
-}
-
-function MenuitemExport(options) {
-  return Menuitem(options);
-}
-MenuitemExport.FIRST_CHILD = 1;
-
-exports.Menuitem = MenuitemExport;
diff --git a/browser/devtools/itchpad/lib/page.js b/browser/devtools/itchpad/lib/page.js
deleted file mode 100644
--- a/browser/devtools/itchpad/lib/page.js
+++ /dev/null
@@ -1,31 +0,0 @@
-/* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-const { Class } = require("sdk/core/heritage");
-const { StoreCollection } = require("itchpad/store-collection");
-const { StylesStore } = require("itchpad/stores/styles");
-
-// This is a bad name for the collection of stores tied to the live target.
-// Target was already taken, Live didn't sound right.  A rename would be
-// welcome.
-var PageCollection = Class({
-  extends: StoreCollection,
-
-  initialize: function() {
-    StoreCollection.prototype.initialize.call(this);
-
-    this.styles = new StylesStore();
-    this.addStore(this.styles);
-  },
-
-  setTarget: function(target) {
-    for (let store of this.stores) {
-      store.setTarget(target);
-    }
-  }
-});
-
-exports.PageCollection = PageCollection;
diff --git a/browser/devtools/itchpad/lib/path-match.js b/browser/devtools/itchpad/lib/path-match.js
deleted file mode 100644
--- a/browser/devtools/itchpad/lib/path-match.js
+++ /dev/null
@@ -1,121 +0,0 @@
-/* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-/**
- * A quick check that the characters in 'search' appear in 'path'.
- * Used for quick trimming of search space.
- */
-exports.quickMatch = function(search, path) {
-  let index = -1;
-  for (let i = 0; i < search.length; i++) {
-    index = path.indexOf(search[i], index + 1);
-    if (index === -1) {
-      break;
-    }
-  }
-  return (index !== -1);
-}
-
-/**
- * A slower check that makes sure search terms can be found on word
- * boundaries.
- */
-
-const BOUNDARY_RE = /\W/;
-
-function charTest(ch) {
-  if (BOUNDARY_RE.test(ch)) {
-    return "(?:(\\" + ch + ")|(.*)(\\" + ch + "))";
-  } else {
-    return "(?:(" + ch + ")|(.*)\\b(" + ch + "))";
-  }
-}
-
-exports.pathMatchExpression = function(search) {
-  let ch = search[0];
-  let ch = BOUNDARY_RE.test(ch) ? "\\" + ch : ch;
-  let expr = "(.*)(?:(^" + ch + ")|(.*)\\b(" + ch + "))";
-  for (let i = 1; i < search.length; i++) {
-    expr += charTest(search[i]);
-  }
-  expr += "(.*)";
-  return new RegExp(expr);
-}
-
-exports.annotate = function(re, path) {
-  // The regular expression is constructed such that each character in the
-  // search has three matches:
-  // First will match for an immediate match
-  // Second will match any interstitial path
-  // Third will match if second matches.
-
-  let matches = re.exec(path);
-  if (!matches) {
-    return null;
-  }
-
-  let open = null;
-  let fragments = [];
-
-  // 0 unused by exec, 3 matches expected per char, leading and trailing text
-  if (matches.length % 3 != 0) {
-    throw new Error("Unexpected match length!");
-  }
-
-  if (matches[1]) {
-    fragments.push({ fragment: matches[1], matched: false });
-  }
-
-  for (let i = 2; i < matches.length - 1; i += 3) {
-    let immediate = matches[i];
-    let interstitial = matches[i + 1];
-    let newWord = matches[i + 2];
-
-    if (immediate) {
-      if (!open) {
-        open = { fragment: immediate, matched: true };
-        fragments.push(open);
-      } else {
-        open.fragment += immediate;
-      }
-    } else {
-      if (interstitial) {
-        fragments.push({ fragment: interstitial, matched: false });
-      }
-
-      open = { fragment: newWord, matched: true };
-      fragments.push(open);
-    }
-  }
-
-  // ... and one trailing match for remaining stuff.
-  let last = matches[matches.length - 1];
-  if (last) {
-    fragments.push({ fragment: last, matched: false });
-  }
-
-  return fragments;
-}
-
-exports.score = function(re, path) {
-  let annotated = exports.annotate(re, path);
-  if (!annotated) {
-    return 0;
-  }
-
-  let score = 0;
-  for (let item of annotated) {
-    if (item.matched && item.fragment.length > score) {
-      score = item.fragment.length;
-    }
-  }
-
-  // Among items with the same score, prefer matches later
-  // in the string.
-  score = (score << 16) + (annotated[0].matched ? 0 : annotated[0].fragment.length & 0xffff);
-
-  return score;
-}
diff --git a/browser/devtools/itchpad/lib/plugins/app-manager/lib/app-project-editor.js b/browser/devtools/itchpad/lib/plugins/app-manager/lib/app-project-editor.js
--- a/browser/devtools/itchpad/lib/plugins/app-manager/lib/app-project-editor.js
+++ b/browser/devtools/itchpad/lib/plugins/app-manager/lib/app-project-editor.js
@@ -1,27 +1,35 @@
+/* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
 const { Cu } = require("chrome");
 const { Class } = require("sdk/core/heritage");
 const promise = require("itchpad/helpers/promise");
 const { ItchEditor } = require("itchpad/editors");
 
 var AppProjectEditor = Class({
   extends: ItchEditor,
 
   hidesToolbar: true,
 
   initialize: function(document, host) {
-    ItchEditor.prototype.initialize.call(this, document);
+    ItchEditor.prototype.initialize.apply(this, arguments);
     this.appended = promise.resolve();
     this.host = host;
+    this.label = "app-manager";
   },
 
   load: function(resource) {
     this.elt.textContent = "";
     let {customOpts} = this.host.project;
     let iframe = this.elt.ownerDocument.createElement("iframe");
     iframe.setAttribute("flex", "1");
     iframe.setAttribute("src", customOpts.projectOverviewURL);
     this.elt.appendChild(iframe);
+    this.emit("load");
   }
 });
 
 exports.AppProjectEditor = AppProjectEditor;
diff --git a/browser/devtools/itchpad/lib/plugins/app-manager/lib/plugin.js b/browser/devtools/itchpad/lib/plugins/app-manager/lib/plugin.js
--- a/browser/devtools/itchpad/lib/plugins/app-manager/lib/plugin.js
+++ b/browser/devtools/itchpad/lib/plugins/app-manager/lib/plugin.js
@@ -10,37 +10,37 @@ const { AppProjectEditor } = require("./
 var AppManagerRenderer = Class({
   extends: Plugin,
 
   projectType: "APP_MANAGER",
 
   isAppManagerProject: function() {
     return this.host.project.projectType === "APP_MANAGER";
   },
-  editorForResource: function(node) {
-    if (!node.parent && this.isAppManagerProject()) {
+  editorForResource: function(resource) {
+    if (!resource.parent && this.isAppManagerProject()) {
       return AppProjectEditor;
     }
   },
-  onAnnotate: function(node, editor, elt) {
-    if (node.parent || !this.isAppManagerProject()) {
+  onAnnotate: function(resource, editor, elt) {
+    if (resource.parent || !this.isAppManagerProject()) {
       return;
     }
 
     let {customOpts} = this.host.project;
     let doc = elt.ownerDocument;
     let image = doc.createElement("image");
     let label = doc.createElement("label");
     let versionLabel = doc.createElement("label");
 
     label.className = "project-name-label";
     versionLabel.className = "project-version-label";
     image.className = "project-image";
 
-    let name = customOpts.name || node.basename;
+    let name = customOpts.name || resource.basename;
     let version = customOpts.version || "v0.0.1";
     let url = customOpts.iconUrl || "icon-sample.png";
 
     label.textContent = name;
     versionLabel.textContent = version;
     image.setAttribute("src", url);
 
     elt.innerHTML = "";
diff --git a/browser/devtools/itchpad/lib/plugins/delete/lib/delete.js b/browser/devtools/itchpad/lib/plugins/delete/lib/delete.js
--- a/browser/devtools/itchpad/lib/plugins/delete/lib/delete.js
+++ b/browser/devtools/itchpad/lib/plugins/delete/lib/delete.js
@@ -1,27 +1,28 @@
 /* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 const { Class } = require("sdk/core/heritage");
 const { registerPlugin, Plugin } = require("itchpad/plugins/core");
+const { localizedStrings } = require("itchpad/helpers/l10n");
 
 var DeletePlugin = Class({
   extends: Plugin,
 
   init: function(host) {
     this.host.addCommand({
       id: "cmd-delete"
     });
     this.host.createMenuItem({
       parent: "#directory-menu-popup",
-      label: this.host.getLocalizedString("itchpad.deleteLabel"),
+      label: localizedStrings.deleteLabel,
       command: "cmd-delete"
     });
   },
 
   onCommand: function(cmd) {
     if (cmd === "cmd-delete") {
       let tree = this.host.projectTree;
       let resource = tree.getSelected();
diff --git a/browser/devtools/itchpad/lib/plugins/drag-drop-new/lib/drag-drop-new.js b/browser/devtools/itchpad/lib/plugins/drag-drop-new/lib/drag-drop-new.js
--- a/browser/devtools/itchpad/lib/plugins/drag-drop-new/lib/drag-drop-new.js
+++ b/browser/devtools/itchpad/lib/plugins/drag-drop-new/lib/drag-drop-new.js
@@ -7,17 +7,17 @@
 const { Class } = require("sdk/core/heritage");
 const { registerPlugin, Plugin } = require("itchpad/plugins/core");
 const promise = require("itchpad/helpers/promise");
 const Editor  = require("devtools/sourceeditor/editor");
 const { Cu } = require("chrome");
 const { VariablesView } = Cu.import("resource:///modules/devtools/VariablesView.jsm", {});
 const { ObjectClient } = Cu.import("resource://gre/modules/devtools/dbg-client.jsm", {});
 const { EnvironmentClient } = Cu.import("resource://gre/modules/devtools/dbg-client.jsm", {});
-const OS = require("itchpad/helpers/osfile");
+const { OS } = Cu.import("resource://gre/modules/osfile.jsm", {});
 
 var DragDropNew = Class({
   extends: Plugin,
 
   init: function(host) {
     this.onDrop = this.onDrop.bind(this);
     this.onDragOver = this.onDragOver.bind(this);
     this.dropzone = host.document.querySelector("#main-deck");
diff --git a/browser/devtools/itchpad/lib/plugins/fuzzy-search/lib/plugin.js b/browser/devtools/itchpad/lib/plugins/fuzzy-search/lib/plugin.js
deleted file mode 100644
--- a/browser/devtools/itchpad/lib/plugins/fuzzy-search/lib/plugin.js
+++ /dev/null
@@ -1,219 +0,0 @@
-/* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-const { Class } = require("sdk/core/heritage");
-const { registerPlugin, Plugin } = require("itchpad/plugins/core");
-const match = require("itchpad/path-match");
-
-const VISIBLE_RESULTS = 10;
-
-var Search = Class({
-  extends: Plugin,
-
-  init: function(host) {
-    this.command = this.host.addCommand({
-      id: "search-files",
-      key: "p",
-      modifiers: "accel"
-    });
-
-    this.searchBox = this.host.createElement("textbox", {
-      parent: "#plugin-toolbar-right",
-      type: "search",
-      timeout: "50",
-      hidden: true,
-      class: "devtools-searchinput",
-    });
-
-    this.panel = this.host.createElement("panel", {
-      parent: "window",
-      class: "results-panel",
-      level: "top",
-      noautofocus: "true",
-      consumeoutsideclicks: "false",
-      hidden: "true"
-    });
-
-    this.onSearchFocus = this.onSearchFocus.bind(this);
-    this.onSearchInput = this.onSearchInput.bind(this);
-    this.onSearchKey = this.onSearchKey.bind(this);
-
-    this.searchBox.addEventListener("focus", this.onSearchFocus, true);
-    this.searchBox.addEventListener("input", this.onSearchInput, true);
-    this.searchBox.addEventListener("keypress", this.onSearchKey, true);
-  },
-
-  populateHistory: function() {
-    let history = this.host.shells.history || { items: [] };
-    let results = [];
-
-    for (let i = history.items.length - 2; i >= 0; i--) {
-      let shell = history.items[i];
-      let project = shell.pair.project;
-      if (project) {
-        results.push({ score: 1, resource: project });
-      }
-    }
-    this.populate(results);
-  },
-
-  populate: function(searchResults, search) {
-    this.results = searchResults;
-    this.cards = [];
-
-    while (this.panel.firstChild) {
-      this.panel.removeChild(this.panel.firstChild);
-    }
-
-    let searchExpression = search ? match.pathMatchExpression(search) : null;
-
-    for (let i = 0; i < VISIBLE_RESULTS && i < searchResults.length; i++) {
-      let result = searchResults[i];
-      let card = this.cardFor(result.resource, searchExpression);
-      this.panel.appendChild(card);
-      this.cards.push(card);
-      let selectIndex = i;
-      card.addEventListener("click", () => {
-        this.select(selectIndex);
-        this.finish();
-      }, true);
-    }
-  },
-
-  onSearchFocus: function() {
-    this.selectedIndex = undefined;
-  },
-
-  onSearchInput: function() {
-    let index = this.host.project.index;
-
-    let search = this.searchBox.value;
-    let results = index.fuzzyMatchPath(this.searchBox.value);
-
-    results = results.sort((a, b) => {
-      let diff = b.score - a.score;
-      if (diff !== 0) return diff;
-      // Prefer longer URI matches
-      diff = b.resource.path.length - a.resource.path.length;
-      if (diff !== 0) return diff;
-      return a.resource.path.localeCompare(b.resource.path);
-    });
-
-    this.populate(results, search);
-    this.showPanel();
-    this.select(0);
-  },
-
-  onSearchKey: function(e) {
-    switch (e.keyCode) {
-      case e.DOM_VK_RETURN:
-      case e.DOM_VK_ENTER: {
-        this.finish();
-        break;
-      }
-      case e.DOM_VK_DOWN: {
-        let index = this.selectedIndex === undefined ? 0 : this.selectedIndex + 1;
-        this.select(index);
-        break;
-      }
-      case e.DOM_VK_UP: {
-        let index = this.selectedIndex === undefined ? 0 : this.selectedIndex - 1;
-        this.select(index);
-        break;
-      }
-      case e.DOM_VK_ESCAPE: {
-        this.finish();
-        break;
-      }
-    }
-  },
-
-  select: function(index) {
-    if (this.results.length < 1) {
-      return;
-    }
-
-    if (index < 0) {
-      index = 0;
-    }
-    if (index >= this.results.length) {
-      index = this.results.length - 1;
-    }
-
-    if (this.selectedIndex !== undefined) {
-      this.cards[this.selectedIndex].classList.remove("selected");
-    }
-    this.selectedIndex = index;
-    this.cards[index].classList.add("selected");
-    this.host.openResource(this.results[index].resource);
-  },
-
-  finish: function() {
-    if (this.selectedIndex === undefined && this.results && this.results.length > 0) {
-      this.selectedIndex = 0;
-    }
-    if (this.results[this.selectedIndex]) {
-      this.host.openResource(this.results[this.selectedIndex].resource);
-    }
-    this.panel.hidePopup();
-    this.searchBox.value = "";
-    this.searchBox.setAttribute("hidden", "true");
-    this.host.currentEditor.editor.focus();
-  },
-
-  cardFor: function(resource, search) {
-    let card = this.host.createElement("vbox", {
-      class: "light results-panel-item list-widget-item"
-    });
-
-    let name = this.host.createElement("label", {
-      parent: card,
-      class: "plain results-panel-item-name",
-      value: resource.basename
-    });
-
-    let details = this.host.createElement("label", {
-      parent: card,
-      class: "plain results-panel-item-details",
-    });
-
-    let displayPath = resource.relativePath();
-    let annotated = search ? match.annotate(search, displayPath) : null;
-    if (annotated) {
-      for (let fragment of annotated) {
-        let span = this.host.createElement("span", {
-          parent: details,
-          class: fragment.matched ? "results-panel-item-match" : "",
-        });
-        span.textContent = fragment.fragment;
-      }
-    } else {
-      details.setAttribute("value", resource.relativePath());
-    }
-
-    return card;
-  },
-
-  showPanel: function() {
-    this.panel.hidden = false;
-    this.panel.openPopup(this.searchBox, "after_start", 0, 0);
-  },
-
-  onCommand: function(cmd, target) {
-    if (cmd === "search-files") {
-      this.searchBox.removeAttribute("hidden");
-      this.searchBox.focus();
-      this.searchBox.select();
-      this.populateHistory();
-      if (this.results.length > 0) {
-        this.showPanel();
-      }
-    }
-  }
-});
-
-exports.Search = Search;
-registerPlugin(Search);
diff --git a/browser/devtools/itchpad/lib/plugins/image-view/lib/image-editor.js b/browser/devtools/itchpad/lib/plugins/image-view/lib/image-editor.js
--- a/browser/devtools/itchpad/lib/plugins/image-view/lib/image-editor.js
+++ b/browser/devtools/itchpad/lib/plugins/image-view/lib/image-editor.js
@@ -8,17 +8,17 @@ const { Cu } = require("chrome");
 const { Class } = require("sdk/core/heritage");
 const promise = require("itchpad/helpers/promise");
 const { ItchEditor } = require("itchpad/editors");
 
 var ImageEditor = Class({
   extends: ItchEditor,
 
   initialize: function(document) {
-    ItchEditor.prototype.initialize.call(this, document);
+    ItchEditor.prototype.initialize.apply(this, arguments);
     this.label = "image";
     this.appended = promise.resolve();
   },
 
   load: function(resource) {
     let image = this.doc.createElement("image");
     image.className = "editor-image";
     image.setAttribute("src", resource.uri);
@@ -26,12 +26,14 @@ var ImageEditor = Class({
     let box1 = this.doc.createElement("box");
     box1.appendChild(image);
 
     let box2 = this.doc.createElement("box");
     box2.setAttribute("flex", 1);
 
     this.elt.appendChild(box1);
     this.elt.appendChild(box2);
+
+    this.emit("load");
   }
 });
 
 exports.ImageEditor = ImageEditor;
diff --git a/browser/devtools/itchpad/lib/plugins/new/lib/new.js b/browser/devtools/itchpad/lib/plugins/new/lib/new.js
--- a/browser/devtools/itchpad/lib/plugins/new/lib/new.js
+++ b/browser/devtools/itchpad/lib/plugins/new/lib/new.js
@@ -1,31 +1,32 @@
 /* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 const { Class } = require("sdk/core/heritage");
 const { registerPlugin, Plugin } = require("itchpad/plugins/core");
+const { localizedStrings } = require("itchpad/helpers/l10n");
 
 // Handles the save command.
 var NewFile = Class({
   extends: Plugin,
 
   init: function(host) {
     this.host.createMenuItem({
       parent: "#file-menu-popup",
-      label: this.host.getLocalizedString("itchpad.newLabel"),
+      label: localizedStrings.newLabel,
       command: "cmd-new",
       key: "key-new"
     });
     this.host.createMenuItem({
       parent: "#directory-menu-popup",
-      label: this.host.getLocalizedString("itchpad.newLabel"),
+      label: localizedStrings.newLabel,
       command: "cmd-new"
     });
 
     this.command = this.host.addCommand({
       id: "cmd-new",
       key: "n",
       modifiers: "accel"
     });
diff --git a/browser/devtools/itchpad/lib/plugins/notify/lib/notify.js b/browser/devtools/itchpad/lib/plugins/notify/lib/notify.js
deleted file mode 100644
--- a/browser/devtools/itchpad/lib/plugins/notify/lib/notify.js
+++ /dev/null
@@ -1,179 +0,0 @@
-/* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-const { Class } = require("sdk/core/heritage");
-const { registerPlugin, Plugin } = require("itchpad/plugins/core");
-const promise = require("itchpad/helpers/promise");
-
-const Editor  = require("devtools/sourceeditor/editor");
-
-const { Cu } = require("chrome");
-const { VariablesView } = Cu.import("resource:///modules/devtools/VariablesView.jsm", {});
-const { ObjectClient } = Cu.import("resource://gre/modules/devtools/dbg-client.jsm", {});
-const { EnvironmentClient } = Cu.import("resource://gre/modules/devtools/dbg-client.jsm", {});
-
-var Notify = Class({
-  extends: Plugin,
-
-  init: function(host) {
-    this.host.addCommand({
-      id: "cmd-hide-sidebar",
-      key: "VK_ESCAPE"
-    });
-    this.host.pluginMethods.notify = this;
-    this.host.createElement("splitter", {
-      parent: "#shells",
-      class: "devtools-horizontal-splitter",
-    });
-    this.div = this.host.createElement("div", {
-      parent: "#shells",
-      class: "output-pane",
-      flex: 1,
-      hidden: "true",
-    });
-
-  },
-
-  get client() { return this.host.target.client },
-
-  showPane: function() {
-    this.div.removeAttribute("hidden");
-    if (!this.editor) {
-      this.editor = new Editor({
-        mode: Editor.modes.text,
-        lineWrapping: true,
-        readOnly: true
-      });
-      this.appended = this.editor.appendTo(this.div);
-    }
-    return this.appended;
-  },
-
-  hidePane: function() {
-    this.div.setAttribute("hidden", "true");
-  },
-
-  onCommand: function(cmd) {
-    if (cmd === "cmd-hide-sidebar") {
-      this.host.hideSidebar();
-      this.hidePane();
-    }
-  },
-
-  info: function(item) {
-    this.showPane();
-    return this._writePrimitive(item).then(this._append.bind(this));
-  },
-
-  error: function(item) {
-    this.showPane();
-    return this._writeError(item).then(this._append.bind(this));
-  },
-
-  _append: function(value) {
-    return this.appended.then(() => {
-      let editor = this.editor;
-      let line = editor.lineCount();
-      editor.replaceText(value + "\n", { line: line, col: 0 });
-      editor.setFirstVisibleLine(line);
-    });
-  },
-
-  _writePrimitive: function(value) {
-    let deferred = promise.defer();
-    if (value.type == "longString") {
-      this.host.getWebConsoleClient().then(client => {
-        client.longString(value).substring(0, value.length, response => {
-          if (response.error) {
-            console.error("Display failed: " + response.error + " " + response.message);
-            deferred.reject(response);
-          } else {
-            deferred.resolve(response.substring);
-          }
-        });
-      });
-    } else {
-      deferred.resolve(value.type || value);
-    }
-
-    return deferred.promise;
-  },
-
-
-  _writeError: function(error) {
-    let deferred = promise.defer();
-
-    if (VariablesView.isPrimitive({ value: error })) {
-      let type = error.type;
-      if (type == "undefined" ||
-          type == "null" ||
-          type == "Infinity" ||
-          type == "-Infinity" ||
-          type == "NaN" ||
-          type == "-0") {
-        deferred.resolve(type);
-      } else if (type == "longString") {
-        deferred.resolve(error.initial + "\u2026");
-      } else {
-        deferred.resolve(error);
-      }
-    } else {
-      let objectClient = new ObjectClient(this.client, error);
-      objectClient.getPrototypeAndProperties(response => {
-        if (response.error) {
-          deferred.reject(response);
-          return;
-        }
-
-        let { ownProperties, safeGetterValues } = response;
-        let error = Object.create(null);
-
-        // Combine all the property descriptor/getter values into one object.
-        for (let key of Object.keys(safeGetterValues)) {
-          error[key] = safeGetterValues[key].getterValue;
-        }
-
-        for (let key of Object.keys(ownProperties)) {
-          error[key] = ownProperties[key].value;
-        }
-
-        // Assemble the best possible stack we can given the properties we have.
-        let stack;
-        if (typeof error.stack == "string") {
-          stack = error.stack;
-        } else if (typeof error.fileName == "number") {
-          stack = "@" + error.fileName;
-          if (typeof error.lineNumber == "number") {
-            stack += ":" + error.lineNumber;
-          }
-        } else if (typeof error.lineNumber == "number") {
-          stack = "@" + error.lineNumber;
-        }
-
-        stack = stack ? "\n" + stack.replace(/\n$/, "") : "";
-
-        if (typeof error.message == "string") {
-          deferred.resolve(error.message + stack);
-        } else {
-          objectClient.getDisplayString(response => {
-            if (response.error) {
-              deferred.reject(response);
-            } else if (typeof response.displayString == "string") {
-              deferred.resolve(response.displayString + stack);
-            } else {
-              deferred.resolve(stack);
-            }
-          });
-        }
-      });
-    }
-
-    return deferred.promise.then(value => "Exception: " + value);
-  },
-});
-exports.Notify = Notify;
-
-registerPlugin(Notify);
diff --git a/browser/devtools/itchpad/lib/plugins/open/lib/open.js b/browser/devtools/itchpad/lib/plugins/open/lib/open.js
--- a/browser/devtools/itchpad/lib/plugins/open/lib/open.js
+++ b/browser/devtools/itchpad/lib/plugins/open/lib/open.js
@@ -7,53 +7,33 @@
 const { Class } = require("sdk/core/heritage");
 const { registerPlugin, Plugin } = require("itchpad/plugins/core");
 const picker = require("itchpad/helpers/file-picker");
 
 var OpenPlugin = Class({
   extends: Plugin,
 
   init: function(host) {
-
     this.command = this.host.addCommand({
       id: "cmd-open",
       key: "o",
       modifiers: "accel"
     });
-
-    this.fileLabel = this.host.createElement("label", {
-      parent: "#plugin-toolbar-left",
-      class: "itchpad-file-label"
-    });
-    this.onTreeSelection = this.onTreeSelection.bind(this);
-    this.host.projectTree.on("selection", this.onTreeSelection);
-  },
-
-  destroy: function() {
-    this.host.projectTree.off("selection", this.onTreeSelection);
   },
 
   onCommand: function(cmd) {
     if (cmd === "cmd-open") {
       picker.showOpen({
         window: this.host.window
       }).then(path => {
         this.open(path);
       });
     }
   },
 
-  onTreeSelection: function(node) {
-    if (!node.isDir) {
-      this.fileLabel.textContent = node.basename;
-    } else if (!node.parent) {
-      this.fileLabel.textContent = "";
-    }
-  },
-
   open: function(path) {
     this.host.project.resourceFor(path).then(resource => {
       this.host.openResource(resource);
     });
   }
 });
 
 exports.OpenPlugin = OpenPlugin;
diff --git a/browser/devtools/itchpad/lib/plugins/status-bar/lib/plugin.js b/browser/devtools/itchpad/lib/plugins/status-bar/lib/plugin.js
--- a/browser/devtools/itchpad/lib/plugins/status-bar/lib/plugin.js
+++ b/browser/devtools/itchpad/lib/plugins/status-bar/lib/plugin.js
@@ -4,16 +4,20 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 const { Cu } = require("chrome");
 const { Class } = require("sdk/core/heritage");
 const promise = require("itchpad/helpers/promise");
 const { registerPlugin, Plugin } = require("itchpad/plugins/core");
 
+/**
+ * Print information about the currently opened file
+ * and the state of the current editor
+ */
 var StatusBarPlugin = Class({
   extends: Plugin,
 
   init: function() {
     this.box = this.host.createElement("hbox", {
       parent: "#itchpad-toolbar-bottom"
     });
 
@@ -21,34 +25,66 @@ var StatusBarPlugin = Class({
       parent: this.box,
       class: "itchpad-basic-display"
     });
 
     this.cursorPosition = this.host.createElement("label", {
       parent: this.box,
       class: "itchpad-basic-display"
     });
+
+    this.fileLabel = this.host.createElement("label", {
+      parent: "#plugin-toolbar-left",
+      class: "itchpad-file-label"
+    });
+
+    this.onTreeSelection = this.onTreeSelection.bind(this);
+    this.host.projectTree.on("selection", this.onTreeSelection);
   },
 
+  destroy: function() {
+    this.host.projectTree.off("selection", this.onTreeSelection);
+  },
+
+  /**
+   * Print information about the state of the editor in the
+   * bottom bar.
+   *
+   * @param Editor editor
+   */
   render: function(editor) {
     this.activeMode.value = editor.toString();
     if (editor.editor) {
       let cursorStart = editor.editor.getCursor("start");
       let cursorEnd = editor.editor.getCursor("end");
       if (cursorStart.line === cursorEnd.line && cursorStart.ch === cursorEnd.ch) {
         this.cursorPosition.value = cursorStart.line + " " + cursorStart.ch;
       } else {
         this.cursorPosition.value = cursorStart.line + " " + cursorStart.ch + " | " +
                                     cursorEnd.line + " " + cursorEnd.ch;
       }
     } else {
       this.cursorPosition.value = "";
     }
   },
 
+
+  /**
+   * Print the current file name on the top bar
+   *
+   * @param Node node
+   */
+  onTreeSelection: function(node) {
+    if (!node.isDir) {
+      this.fileLabel.textContent = node.basename;
+    } else if (!node.parent) {
+      this.fileLabel.textContent = "";
+    }
+  },
+
   onEditorChange: function(editor) {
     this.render(editor);
   },
 
   onEditorCursorActivity: function(editor) {
     this.render(editor);
   },
 
diff --git a/browser/devtools/itchpad/lib/plugins/style/lib/style.js b/browser/devtools/itchpad/lib/plugins/style/lib/style.js
deleted file mode 100644
--- a/browser/devtools/itchpad/lib/plugins/style/lib/style.js
+++ /dev/null
@@ -1,22 +0,0 @@
-/* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-var { Class } = require("sdk/core/heritage");
-var { registerPlugin, Plugin } = require("itchpad/plugins/core");
-
-var StyleAnnotation = Class({
-  extends: Plugin,
-  onAnnotate: function(resource, editor) {
-    if (!resource.sheet) {
-      return;
-    }
-
-    return " (" + resource.sheet.ruleCount + " rules)";
-  }
-});
-exports.StyleAnnotation = StyleAnnotation;
-
-registerPlugin(StyleAnnotation);
diff --git a/browser/devtools/itchpad/lib/project-index.js b/browser/devtools/itchpad/lib/project-index.js
--- a/browser/devtools/itchpad/lib/project-index.js
+++ b/browser/devtools/itchpad/lib/project-index.js
@@ -1,16 +1,15 @@
 /* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 const { Class } = require("sdk/core/heritage");
-const match = require("itchpad/path-match");
 
 var IndexMap = Class({
   initialize: function() {
     this.map = new Map();
   },
 
   add: function(key, item) {
     let set = this.map.get(key)
@@ -55,42 +54,13 @@ var ProjectIndex = Class({
   },
 
   remove: function(resource) {
     this.basenames.remove(resource.basename, resource);
   },
 
   findBasename: function(basename) {
     return this.basenames.get(basename);
-  },
-
-  fuzzyMatchPath: function(search) {
-    let start = Date.now();
-
-    let candidates = [];
-    for (let path of this.relativePaths.keys()) {
-      if (match.quickMatch(search, path)) {
-        candidates.push(path);
-      }
-    }
-
-    let matches = [];
-    let candidateMisses = [];
-    let re = match.pathMatchExpression(search);
-    for (let candidate of candidates) {
-      let score = match.score(re, candidate);
-      if (score > 0) {
-        for (let resource of this.relativePaths.get(candidate)) {
-          if (!resource.isDir) {
-            matches.push({ score: score, resource: resource });
-          }
-        }
-      }
-    }
-
-    console.log("Search took " + (Date.now() - start) + " and returned " + matches.length + " results.");
-
-    return matches;
   }
 });
 exports.ProjectIndex = ProjectIndex;
 
 
diff --git a/browser/devtools/itchpad/lib/project.js b/browser/devtools/itchpad/lib/project.js
--- a/browser/devtools/itchpad/lib/project.js
+++ b/browser/devtools/itchpad/lib/project.js
@@ -1,22 +1,23 @@
 /* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+const { Cu } = require("chrome");
 const { Class } = require("sdk/core/heritage");
 const { EventTarget } = require("sdk/event/target");
 const { emit } = require("sdk/event/core");
-const { scope } = require("itchpad/event/scope");
+const { scope } = require("itchpad/helpers/event");
 const prefs = require("sdk/preferences/service");
 const { LocalStore } = require("itchpad/stores/local");
-const OS = require("itchpad/helpers/osfile");
-const task = require("itchpad/helpers/task");
+const { OS } = Cu.import("resource://gre/modules/osfile.jsm", {});
+const { Task } = Cu.import("resource://gre/modules/Task.jsm", {});
 const { ProjectIndex } = require("itchpad/project-index");
 const promise = require("itchpad/helpers/promise");
 const { TextEncoder, TextDecoder } = require('sdk/io/buffer');
 const { indexedDB } = require('sdk/indexed-db');
 const url = require('sdk/url');
 const { StoreCollection } = require("itchpad/store-collection");
 
 const gDecoder = new TextDecoder();
@@ -161,28 +162,18 @@ var Projects = Class({
       this._projectsById.set(id, proj);
       return proj;
     });
   },
 
   // Return the default project.
   defaultProject: function() {
     return this.projectForID("default", true);
-  },
+  }
 
-  forManifest: function(path) {
-    let id = "app:" + OS.Path.normalize(path);
-    let dir = OS.Path.dirname(path);
-
-    return this.projectForID(id, true).then(project => {
-      project.setManifest(path);
-      project.addPath(dir);
-      return project;
-    });
-  },
 });
 exports.Projects = new Projects();
 
 function emptyProject() {
   return {
     directories: [],
     openFiles: []
   };
@@ -205,87 +196,51 @@ var Project = Class({
     this.load(info);
   },
 
   toString: function() { return "[Project] " + this.name; },
 
   load: function(data) {
     this.id = data.id;
     this.name = data.name || "Untitled";
-    if (data.pattern) {
-      this.pattern = data.pattern;
-      this.manualPattern = true;
-    } else {
-      this.pattern = "*";
-    }
 
     let paths = new Set(data.directories.map(name => OS.Path.normalize(name)));
 
     for (let [path, store] of this.localStores) {
       if (!paths.has(path)) {
         this.removePath(path);
       }
     }
 
     for (let path of paths) {
       this.addPath(path);
     }
 
-    this.setManifest(data.manifestPath);
   },
 
   save: function() {
     let data = emptyProject();
 
     data.id = this.id;
     data.name = this.name;
-    if (this.manualPattern) {
-      data.pattern = this.pattern;
-    }
-    data.manifest = this.manifestPath;
     data.directories = [store.path for ([id, store] of this.localStores)];
     return IDBProjectStore.update(data).then(() => {
       emit(this, "project-saved");
     });
   },
 
-  setManifest: function(path, json=null) {
-    this.manifestPath = path;
-
-    let promise = json ? promise.resolve(json) : (OS.File.read(path).then(bytes => {
-      return JSON.parse(gDecoder.decode(bytes));
-    }));
-
-    return promise.then(json => {
-      this.manifest = json;
-      this.name = this.manifest.name || this.name;
-      if (!this.manualPattern) {
-        let dir = url.fromFilename(OS.Path.dirname(this.manifestPath));
-        this.pattern = dir + "*";
-      }
-    });
-  },
-
   setName: function(name) {
     this.name = name;
     return this.save().then(() => {
       emit(this, "name-change");
     });
   },
 
-  setPattern: function(pattern) {
-    this.manualPattern = true;
-    this.pattern = pattern;
-    return this.save().then(() => {
-      emit(this, "pattern-change");
-    });
-  },
-
   refresh: function() {
-    return task.spawn(function*() {
+    return Task.spawn(function*() {
       for (let [path, store] of this.localStores) {
         yield store.refresh();
       }
     }.bind(this));
   },
 
   resourceFor: function(path, options) {
     let store = this.storeContaining(path);
@@ -338,25 +293,16 @@ var Project = Class({
   removeLocalStore: function(store) {
     if (store) {
       this.localStores.delete(store.path);
       this.removeStore(store);
     }
   },
 
   onResourceAdded: function(resource) {
-    // Automatically use a manifest for this project if we find
-    // one in the only store that exists in the project.
-    if (!this.manifest
-        && resource.basename === "manifest.webapp"
-        && resource.parent === resource.store.root
-        && this.localStores.size === 1) {
-      this.setManifest(resource.path);
-    }
-
     try {
       this.index.add(resource);
     } catch(ex) {
       console.error(ex);
     }
   },
 
   onResourceRemoved: function(resource) {
diff --git a/browser/devtools/itchpad/lib/resource-map.js b/browser/devtools/itchpad/lib/resource-map.js
--- a/browser/devtools/itchpad/lib/resource-map.js
+++ b/browser/devtools/itchpad/lib/resource-map.js
@@ -3,17 +3,17 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 const { Class } = require("sdk/core/heritage");
 const { emit } = require("sdk/event/core");
 const { EventTarget } = require("sdk/event/target");
 const timers = require("sdk/timers");
-const { on, off, forget } = require("itchpad/event/scope");
+const { on, off, forget } = require("itchpad/helpers/event");
 
 var Pair = Class({
   extends: EventTarget,
 
   initialize: function(map, project=null, live=null) {
     this.map = map;
     this._updateSource("project", project, false);
     this._updateSource("live", live, false);
@@ -67,142 +67,63 @@ var Pair = Class({
 
 exports.Pair = Pair;
 
 // Maintains the list of pairs.
 var ResourceMap = Class({
   initialize: function() {
     this.liveStores = new Set();
     this.pairs = new Map();
-    this.manualPairs = new Map();
 
     this.scheduleRebuild = this.scheduleRebuild.bind(this);
   },
 
   setProject: function(project) {
     this.unwatchCollection(this.project);
     this.project = project;
     this.watchCollection(this.project);
     this.scheduleRebuild();
   },
 
-  setPage: function(page) {
-    this.unwatchCollection(this.page);
-    this.page = page;
-    this.watchCollection(this.page);
-    this.scheduleRebuild();
-  },
-
   watchCollection: function(collection) {
     on(this, collection, "resource-added", this.scheduleRebuild);
     on(this, collection, "resource-removed", this.scheduleRebuild);
   },
 
   unwatchCollection: function(collection) {
     forget(this, collection);
   },
 
   scheduleRebuild: function() {
     if (this._scheduledRebuild) {
       timers.clearTimeout(this._scheduledRebuild);
     }
     this._scheduledRebuild = timers.setTimeout(this.rebuild.bind(this), 100);
   },
 
-  manualPair: function(project, live) {
-    let pair;
-
-    let pair = this.pairs.get(project);
-    if (!pair) {
-      pair = this.pairs.get(live);
-    }
-    if (!pair) {
-      pair = new Pair(this, project, live);
-    }
-    pair.project = project;
-    pair.live = live;
-
-    // XXX: Manual pairs should probably be by path, otherwise
-    // they won't last through a refresh.  Will fix that later.
-    this.manualPairs.set(live, pair);
-    this.rebuild();
-  },
-
   /**
    * Rebuild the project pairings.
    */
   rebuild: function() {
     if (this._scheduledRebuild) {
       timers.clearTimeout(this._scheduledRebuild);
       this._scheduledRebuild = null;
     }
     let start = Date.now();
     // Rules:
     // - Pairs stay with the local resource if they change.
 
     let newPairs = new Map();
 
-    // Walk through all live resources...
-    for (let live of this.page.allResources()) {
-      if (live.isDir) {
-        continue;
-      }
-
-      // If there's a manual pair, just trust it.
-      if (this.manualPairs.has(live)) {
-        let manual = this.manualPairs.get(live);
-        newPairs.set(manual.project, manual);
-        newPairs.set(manual.live, manual);
-        continue;
-      }
-
-      // Find a project resource for this resource...
-      let project = this._findPair(live);
-
-      if (!project) {
-        // No paired resource, no need to save a pair, but do
-        // keep the one-sided pair around if there is one.
-        let oldPair = this.pairs.get(live);
-        if (oldPair) {
-          // Just in case.
-          oldPair.project = null;
-
-          newPairs.set(live, oldPair);
-        }
-        continue;
-      }
-
-      // We have a real pair.  Update it if it already exists.
-      // XXX: This could leave us with an empty pair, make
-      // sure editors close properly...
-      let pair = this.pairs.get(project);
-      if (pair) {
-        pair.live = live;
-      } else {
-        pair = new Pair(this, project, live);
-      }
-      newPairs.set(live, pair);
-      newPairs.set(project, pair);
-
-      // Remove the project link from the map so the next pass
-      // doesn't pick it up.
-      this.pairs.delete(project);
-    }
-
     // Now newPairs has pairs for all live resources that
     // need them (either because they already had a single-sided pair
     // in the wild or because they found a real pair)
     // Now make sure that any project resources with an outstanding pair
     // are included.
     for (let project of this.project.allResources()) {
-      let newPair = newPairs.get(project);
-      if (newPair) {
-        // Already taken care of.
-        continue;
-      }
       let oldPair = this.pairs.get(project);
       if (oldPair) {
         oldPair.live = null;
         newPairs.set(project, oldPair);
       }
     }
 
     this.pairs = newPairs;
diff --git a/browser/devtools/itchpad/lib/store-collection.js b/browser/devtools/itchpad/lib/store-collection.js
--- a/browser/devtools/itchpad/lib/store-collection.js
+++ b/browser/devtools/itchpad/lib/store-collection.js
@@ -2,17 +2,17 @@
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 const { Class } = require("sdk/core/heritage");
 const { EventTarget } = require("sdk/event/target");
 const { emit } = require("sdk/event/core");
-const { on, forget } = require("itchpad/event/scope");
+const { on, forget } = require("itchpad/helpers/event");
 
 var StoreCollection = Class({
   extends: EventTarget,
 
   initialize: function() {
     this.stores = new Set();
   },
 
@@ -29,18 +29,23 @@ var StoreCollection = Class({
       }
     }
   },
 
   addStore: function(store) {
     this.stores.add(store);
     for (let resource of store.allResources()) {
       this.onResourceAdded(resource);
+      console.log("On resource add", resource);
+      on(this, resource, "children-changed", () => {
+        console.log("BRIAN1!!! Children has changed");
+      });
     }
     on(this, store, "resource-added", (resource) => {
+      console.log("EMITTING RESOURCE ADD", resource);
       emit(this, "resource-added", resource);
     });
     on(this, store, "resource-removed", (resource) => {
       emit(this, "resource-removed", resource);
     })
 
     emit(this, "store-added", store);
   },
diff --git a/browser/devtools/itchpad/lib/stores/base.js b/browser/devtools/itchpad/lib/stores/base.js
--- a/browser/devtools/itchpad/lib/stores/base.js
+++ b/browser/devtools/itchpad/lib/stores/base.js
@@ -3,17 +3,16 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 const { Cc, Ci, Cu } = require("chrome");
 const { Class } = require("sdk/core/heritage");
 const { EventTarget } = require("sdk/event/target");
 const { emit } = require("sdk/event/core");
-const URL = require("sdk/url");
 const promise = require("itchpad/helpers/promise");
 
 /**
  * A Store object maintains a collection of Resource objects stored in a tree.
  * A given store is either a Project store or a Live store.
  */
 var Store = Class({
   extends: EventTarget,
@@ -67,104 +66,8 @@ exports.ProjectStore = ProjectStore;
 LiveStore = Class({
   extends: Store,
   isProject: false,
   isLive: true,
   aspect: "live"
 });
 exports.LiveStore = LiveStore;
 
-var Resource = Class({
-  extends: EventTarget,
-
-  get isProject() { return this.store.isProject },
-  get aspect() { return this.store.aspect },
-
-  refresh: function() { return promise.resolve(this) },
-
-  setURI: function(uri) {
-    if (typeof(uri) === "string") {
-      uri = URL.URL(uri);
-    }
-    this._uriBasename = uriBasename(uri);
-    this.uri = uri;
-  },
-
-  get basename() { return this._uriBasename },
-  get displayName() { return this.basename },
-
-  get isDir() { return this.children !== undefined; },
-  get hasChildren() { return this.children && this.children.size > 0; },
-
-  setChildren: function(newChildren) {
-    let oldChildren = this.children || new Set();
-    let change = false;
-
-    for (let child of oldChildren) {
-      if (!newChildren.has(child)) {
-        change = true;
-        child.parent = null;
-        this.store.notifyRemove(child);
-      }
-    }
-
-    for (let child of newChildren) {
-      if (!oldChildren.has(child)) {
-        change = true;
-        child.parent = this;
-        this.store.notifyAdd(child);
-      }
-    }
-
-    this.children = newChildren;
-    if (change) {
-      emit(this, "children-changed", this);
-    }
-  },
-
-  addChild: function(resource) {
-    this.children = this.children || new Set();
-
-    resource.parent = this;
-    this.children.add(resource);
-    this.store.notifyAdd(resource);
-    emit(this, "children-changed", this);
-    return resource;
-  },
-
-  removeChild: function(resource) {
-    resource.parent = null;
-    this.children.remove(resource);
-    this.store.notifyRemove(resource);
-    emit(this, "children-changed", this);
-    return resource;
-  },
-
-  get contentType() { return "text/plain" },
-  get contentCategory() {
-    const NetworkHelper = require("devtools/toolkit/webconsole/network-helper");
-    let category = NetworkHelper.mimeCategoryMap[this.contentType];
-    // Boo hard-coding.
-    if (!category && this.basename === "manifest.webapp") {
-      return "json";
-    }
-    return category || "txt";
-  }
-});
-
-exports.Resource = Resource;
-
-// Surely there's a better way to do this.
-function uriBasename(uri) {
-  var basename = uri.path;
-
-  let idx = uri.path.lastIndexOf("/", basename.length - 2);
-  if (idx > -1) {
-    basename = uri.path.substring(idx + 1);
-  }
-
-  if (basename[basename.length - 1] === "/") {
-    basename = basename.substring(0, basename.length - 1);
-  }
-
-  return basename;
-}
-
diff --git a/browser/devtools/itchpad/lib/stores/local.js b/browser/devtools/itchpad/lib/stores/local.js
--- a/browser/devtools/itchpad/lib/stores/local.js
+++ b/browser/devtools/itchpad/lib/stores/local.js
@@ -5,35 +5,26 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 /**
  * Hastily-written local file backend for ItchPad
  */
 
 const { Cc, Ci, Cu, ChromeWorker } = require("chrome");
 const { Class } = require("sdk/core/heritage");
-const { TextEncoder, TextDecoder } = require('sdk/io/buffer')
+const { OS } = Cu.import("resource://gre/modules/osfile.jsm", {});
 const { emit } = require("sdk/event/core");
-const { ProjectStore, Resource } = require("itchpad/stores/base");
-const task = require("itchpad/helpers/task");
-const data = require("sdk/self").data;
+const { ProjectStore } = require("itchpad/stores/base");
+const { Task } = Cu.import("resource://gre/modules/Task.jsm", {});
 const promise = require("itchpad/helpers/promise");
-const Task = require("itchpad/helpers/task");
-const URL = require("sdk/url");
-const OS = require("itchpad/helpers/osfile");
-const { FileUtils } = Cu.import("resource://gre/modules/FileUtils.jsm", {});
-const mimeService = Cc["@mozilla.org/mime;1"].getService(Ci.nsIMIMEService);
-
+const { FileResource } = require("itchpad/stores/resource");
 
 const CHECK_LINKED_DIRECTORY_DELAY = 5000;
 const SHOULD_LIVE_REFRESH = true;
-const spawn = Task.spawn;
 
-const gDecoder = new TextDecoder();
-const gEncoder = new TextEncoder();
 
 // XXX: Ignores should probably be handled differently.
 const IGNORE_REGEX = /(^\.)|(\~$)|(^node_modules$)/;
 
 var LocalStore = Class({
   extends: ProjectStore,
 
   defaultCategory: "js",
@@ -96,17 +87,17 @@ var LocalStore = Class({
     if (this.resources.has(path)) {
       return promise.resolve(this.resources.get(path));
     }
 
     if (!this.contains(path)) {
       return promise.reject(new Error(path + " does not belong to " + this.path));
     }
 
-    return spawn(function() {
+    return Task.spawn(function() {
       let parent = yield this.resourceFor(OS.Path.dirname(path));
 
       let info;
       try {
         info = yield OS.File.stat(path);
       } catch (ex if ex instanceof OS.File.Error && ex.becauseNoSuchFile) {
         if (!options.create) {
           throw ex;
@@ -140,17 +131,17 @@ var LocalStore = Class({
       return this._refreshDeferred.promise;
     }
     this._refreshDeferred = promise.defer();
 
     let worker = this.worker = new ChromeWorker("chrome://browser/content/devtools/readdir.js");
     let start = Date.now();
 
     worker.onmessage = evt => {
-      // console.log("Directory read finished in " + ( Date.now() - start ) +"ms", evt);
+      console.log("Directory read finished in " + ( Date.now() - start ) +"ms", evt);
       for (path in evt.data) {
         let info = evt.data[path];
         info.path = path;
 
         let resource = this._forPath(path, info);
         resource.info = info;
         if (info.isDir) {
           let newChildren = new Set();
@@ -203,136 +194,8 @@ var LocalStore = Class({
         return false;
       }
     }
     return true;
   }
 });
 exports.LocalStore = LocalStore;
 
-var FileResource = Class({
-  extends: Resource,
-
-  initialize: function(store, path, info) {
-    this.store = store;
-    this.path = path;
-
-    this.setURI(URL.URL(URL.fromFilename(path)));
-    this._lastReadModification = undefined;
-
-    this.info = info;
-    this.parent = null;
-  },
-
-  toString: function() {
-    return "[FileResource:" + this.path + "]";
-  },
-
-  destroy: function() {
-    if (this._refreshDeferred) {
-      this._refreshDeferred.reject();
-    }
-    this._refreshDeferred = null;
-  },
-
-  // Fetch and cache information about this particular file
-  // https://developer.mozilla.org/en-US/docs/JavaScript_OS.File/OS.File_for_the_main_thread#OS.File.stat
-  refresh: function() {
-    if (this._refreshDeferred) {
-      return this._refreshDeferred.promise;
-    }
-    this._refreshDeferred = promise.defer();
-    OS.File.stat(this.path).then(info => {
-      this.info = info;
-      if (this._refreshDeferred) {
-        this._refreshDeferred.resolve(this);
-        this._refreshDeferred = null;
-      }
-    });
-    return this._refreshDeferred.promise;
-  },
-
-  get displayName() { return this.basename + (this.isDir ? "/" : "") },
-
-  get isDir() {
-    if (!this.info) { return false; }
-    return this.info.isDir && !this.info.isSymLink;
-  },
-
-  /**
-   * Returns the path relative to the store.  This is used for
-   * project search, there might be a better approach.
-   */
-  relativePath: function() {
-    if (!this._relativePath) {
-      if (this.path.startsWith(this.store.path)) {
-        this._relativePath = OS.Path.basename(this.store.path) + this.path.substring(this.store.path.length);
-      } else {
-        this._relativePath = this.path;
-      }
-    }
-    return this._relativePath;
-  },
-
-  /**
-   * Returns the text of the file as a promise.
-   */
-  load: function() {
-    return OS.File.read(this.path).then(bytes => {
-      return gDecoder.decode(bytes);
-    });
-  },
-
-  createChild: function(name, initial="") {
-    console.log("CREATING " + name);
-    if (!this.isDir) {
-      return promise.reject(new Error("Cannot add child to a regular file"));
-    }
-
-    let newPath = OS.Path.join(this.path, name);
-
-    let buffer = initial ? gEncoder.encode(initial) : "";
-    return OS.File.writeAtomic(newPath, buffer, {
-      noOverwrite: true
-    }).then(() => {
-      return this.store.refresh();
-    }).then(() => {
-      let resource = this.store.resources.get(newPath);
-      if (!resource) {
-        throw new Error("Error creating " + newPath);
-      }
-      return resource;
-    });
-  },
-
-  /**
-   * Write a string to the file.
-   */
-  save: function(str) {
-    let buffer = gEncoder.encode(str);
-    let path = this.path;
-
-    // XXX: This was losing permissions on save
-    // return OS.File.writeAtomic(this.path, buffer, { tmpPath: this.path + ".tmp" });
-
-    return task.spawn(function*() {
-        let pfh = yield OS.File.open(path, {truncate: true});
-        yield pfh.write(buffer);
-        yield pfh.close();
-    });
-  },
-
-  get contentType() {
-    if (this._contentType) {
-      return this._contentType;
-    }
-    if (this.isDir) {
-      return "x-directory/normal";
-    }
-    try {
-      this._contentType = mimeService.getTypeFromFile(new FileUtils.File(this.path));
-    } catch(ex) {
-      console.error(ex);
-      this._contentType = null;
-    }
-    return this._contentType;
-  }
-});
diff --git a/browser/devtools/itchpad/lib/stores/resource.js b/browser/devtools/itchpad/lib/stores/resource.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/itchpad/lib/stores/resource.js
@@ -0,0 +1,251 @@
+/* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const { Cc, Ci, Cu } = require("chrome");
+const { TextEncoder, TextDecoder } = require('sdk/io/buffer');
+const { Class } = require("sdk/core/heritage");
+const { EventTarget } = require("sdk/event/target");
+const { emit } = require("sdk/event/core");
+const URL = require("sdk/url");
+const promise = require("itchpad/helpers/promise");
+const { OS } = Cu.import("resource://gre/modules/osfile.jsm", {});
+const { FileUtils } = Cu.import("resource://gre/modules/FileUtils.jsm", {});
+const mimeService = Cc["@mozilla.org/mime;1"].getService(Ci.nsIMIMEService);
+
+const gDecoder = new TextDecoder();
+const gEncoder = new TextEncoder();
+
+var Resource = Class({
+  extends: EventTarget,
+
+  get isProject() { return this.store.isProject },
+  get aspect() { return this.store.aspect },
+
+  refresh: function() { return promise.resolve(this) },
+
+  setURI: function(uri) {
+    if (typeof(uri) === "string") {
+      uri = URL.URL(uri);
+    }
+    this._uriBasename = uriBasename(uri);
+    this.uri = uri;
+  },
+
+  get basename() { return this._uriBasename },
+  get displayName() { return this.basename },
+
+  get isDir() { return this.children !== undefined; },
+  get hasChildren() { return this.children && this.children.size > 0; },
+
+  setChildren: function(newChildren) {
+    let oldChildren = this.children || new Set();
+    let change = false;
+    console.trace();
+
+    for (let child of oldChildren) {
+      if (!newChildren.has(child)) {
+        change = true;
+        child.parent = null;
+        this.store.notifyRemove(child);
+      }
+    }
+
+    for (let child of newChildren) {
+      if (!oldChildren.has(child)) {
+        change = true;
+        child.parent = this;
+        console.log("notifying add", child, child.isDir);
+        this.store.notifyAdd(child);
+      }
+    }
+
+    this.children = newChildren;
+    if (change) {
+      emit(this, "children-changed", this);
+    }
+  },
+
+  addChild: function(resource) {
+    this.children = this.children || new Set();
+
+    resource.parent = this;
+    this.children.add(resource);
+    this.store.notifyAdd(resource);
+    emit(this, "children-changed", this);
+    return resource;
+  },
+
+  removeChild: function(resource) {
+    resource.parent = null;
+    this.children.remove(resource);
+    this.store.notifyRemove(resource);
+    emit(this, "children-changed", this);
+    return resource;
+  },
+
+  get contentType() { return "text/plain" },
+  get contentCategory() {
+    const NetworkHelper = require("devtools/toolkit/webconsole/network-helper");
+    let category = NetworkHelper.mimeCategoryMap[this.contentType];
+    // Boo hard-coding.
+    if (!category && this.basename === "manifest.webapp") {
+      return "json";
+    }
+    return category || "txt";
+  }
+});
+
+exports.Resource = Resource;
+
+// Surely there's a better way to do this.
+function uriBasename(uri) {
+  var basename = uri.path;
+
+  let idx = uri.path.lastIndexOf("/", basename.length - 2);
+  if (idx > -1) {
+    basename = uri.path.substring(idx + 1);
+  }
+
+  if (basename[basename.length - 1] === "/") {
+    basename = basename.substring(0, basename.length - 1);
+  }
+
+  return basename;
+}
+
+
+var FileResource = Class({
+  extends: Resource,
+
+  initialize: function(store, path, info) {
+    this.store = store;
+    this.path = path;
+
+    this.setURI(URL.URL(URL.fromFilename(path)));
+    this._lastReadModification = undefined;
+
+    this.info = info;
+    this.parent = null;
+  },
+
+  toString: function() {
+    return "[FileResource:" + this.path + "]";
+  },
+
+  destroy: function() {
+    if (this._refreshDeferred) {
+      this._refreshDeferred.reject();
+    }
+    this._refreshDeferred = null;
+  },
+
+  // Fetch and cache information about this particular file
+  // https://developer.mozilla.org/en-US/docs/JavaScript_OS.File/OS.File_for_the_main_thread#OS.File.stat
+  refresh: function() {
+    if (this._refreshDeferred) {
+      return this._refreshDeferred.promise;
+    }
+    this._refreshDeferred = promise.defer();
+    OS.File.stat(this.path).then(info => {
+      this.info = info;
+      if (this._refreshDeferred) {
+        this._refreshDeferred.resolve(this);
+        this._refreshDeferred = null;
+      }
+    });
+    return this._refreshDeferred.promise;
+  },
+
+  get displayName() { return this.basename + (this.isDir ? "/" : "") },
+
+  get isDir() {
+    if (!this.info) { return false; }
+    return this.info.isDir && !this.info.isSymLink;
+  },
+
+  /**
+   * Returns the path relative to the store.  This is used for
+   * project search, there might be a better approach.
+   */
+  relativePath: function() {
+    if (!this._relativePath) {
+      if (this.path.startsWith(this.store.path)) {
+        this._relativePath = OS.Path.basename(this.store.path) + this.path.substring(this.store.path.length);
+      } else {
+        this._relativePath = this.path;
+      }
+    }
+    return this._relativePath;
+  },
+
+  /**
+   * Returns the text of the file as a promise.
+   */
+  load: function() {
+    return OS.File.read(this.path).then(bytes => {
+      return gDecoder.decode(bytes);
+    });
+  },
+
+  createChild: function(name, initial="") {
+    console.log("CREATING " + name);
+    if (!this.isDir) {
+      return promise.reject(new Error("Cannot add child to a regular file"));
+    }
+
+    let newPath = OS.Path.join(this.path, name);
+
+    let buffer = initial ? gEncoder.encode(initial) : "";
+    return OS.File.writeAtomic(newPath, buffer, {
+      noOverwrite: true
+    }).then(() => {
+      return this.store.refresh();
+    }).then(() => {
+      let resource = this.store.resources.get(newPath);
+      if (!resource) {
+        throw new Error("Error creating " + newPath);
+      }
+      return resource;
+    });
+  },
+
+  /**
+   * Write a string to the file.
+   */
+  save: function(str) {
+    let buffer = gEncoder.encode(str);
+    let path = this.path;
+
+    // XXX: This was losing permissions on save
+    // return OS.File.writeAtomic(this.path, buffer, { tmpPath: this.path + ".tmp" });
+
+    return Task.spawn(function*() {
+        let pfh = yield OS.File.open(path, {truncate: true});
+        yield pfh.write(buffer);
+        yield pfh.close();
+    });
+  },
+
+  get contentType() {
+    if (this._contentType) {
+      return this._contentType;
+    }
+    if (this.isDir) {
+      return "x-directory/normal";
+    }
+    try {
+      this._contentType = mimeService.getTypeFromFile(new FileUtils.File(this.path));
+    } catch(ex) {
+      console.error(ex);
+      this._contentType = null;
+    }
+    return this._contentType;
+  }
+});
+
+exports.FileResource = FileResource;
diff --git a/browser/devtools/itchpad/lib/stores/styles.js b/browser/devtools/itchpad/lib/stores/styles.js
deleted file mode 100644
--- a/browser/devtools/itchpad/lib/stores/styles.js
+++ /dev/null
@@ -1,188 +0,0 @@
-/* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-const { Cu } = require("chrome");
-const { Class } = require("sdk/core/heritage");
-const { EventTarget } = require("sdk/event/target");
-const { emit } = require("sdk/event/core");
-const promise = require("itchpad/helpers/promise");
-const URL = require("sdk/url");
-
-const { StyleSheetsFront } = require("devtools/server/actors/stylesheets");
-const { StyleEditorFront } = require("devtools/server/actors/styleeditor");
-const {CssLogic} = require("devtools/styleinspector/css-logic");
-
-const { LiveStore, Resource } = require("itchpad/stores/base");
-
-
-var StylesStore = Class({
-  extends: LiveStore,
-
-  defaultCategory: "css",
-
-  initialize: function(target) {
-    this.initStore();
-
-    this._onStyleSheetsCleared = this._onStyleSheetsCleared.bind(this);
-    this._onNavigate = this._onNavigate.bind(this);
-
-    this.setRoot(FolderResource(this));
-
-    this.setTarget(target);
-  },
-
-  setTarget: function(target) {
-    if (this.debuggee) {
-      this.resources.clear();
-      this.debuggee.destroy();
-      this.target.off("will-navigate", this._onStyleSheetsCleared);
-      this.target.off("navigate", this._onNavigate);
-    }
-
-    this.target = target;
-
-    if (!target) {
-      return;
-    }
-
-    // XXX: Need to share style editor fronts with the style editor.
-    if (this.target.form.styleSheetsActor) {
-      this.debuggee = StyleSheetsFront(this.target.client, this.target.form);
-    } else {
-      // We're talking to a pre-firefox 29 server-side
-      this.debuggee = StyleEditorFront(this.target.client, this.target.form);
-    }
-
-    this.debuggee.getStyleSheets().then(styleSheets => {
-      if (this.target !== target) {
-        return;
-      }
-      this.root.setSheets(styleSheets);
-      this.target.on("will-navigate", this._onStyleSheetsCleared);
-      this.target.on("navigate", this._onNavigate);
-    }).then(null, console.error);
-  },
-
-  _onNavigate: function() {
-    this.debuggee.getStyleSheets().then(styleSheets => {
-      this.root.setSheets(styleSheets);
-    });
-  },
-
-  _onStyleSheetsCleared: function() {
-    this.resources.clear();
-    this.root.setSheets();
-  },
-
-  refresh: function() {
-    // This is a live source, no explicit refresh needed.
-    return promise.resolve();
-  },
-
-  forSheet: function(sheet) {
-    if (this.resources.has(sheet.actorID)) {
-      return this.resources.get(sheet.actorID);
-    }
-
-    let resource = SheetResource(this, sheet);
-    this.resources.set(sheet.actorID, resource);
-    this.notifyAdd(resource);
-    return resource;
-  }
-});
-exports.StylesStore = StylesStore;
-
-var FolderResource = Class({
-  extends: Resource,
-
-  initialize: function(store) {
-    this.store = store;
-    this.children = new Set();
-  },
-
-  get displayName() { return "Styles"; },
-  get isDir() { return true; },
-  get hasChildren() { return this.children.size > 0 },
-
-  setSheets: function(sheets=[]) {
-    let newChildren = new Set();
-    for (let sheet of sheets) {
-      newChildren.add(this.store.forSheet(sheet));
-    }
-    this.setChildren(newChildren);
-  },
-
-  createChild: function(name) {
-    if (!this.store.debuggee) {
-      console.error("Tried to create a child without a debuggee.");
-      deferred.reject(new Error("Can't create child without a target."));
-    }
-    return this.store.debuggee.addStyleSheet("").then(sheet => {
-      let resource = this.store.forSheet(sheet);
-      resource._title = name;
-      this.addChild(resource);
-      return resource;
-    }).then(null, console.error);
-  }
-});
-
-var SheetResource = Class({
-  extends: Resource,
-
-  initialize: function(store, sheet) {
-    this.store = store;
-    this.sheet = sheet;
-    this.children = new Set();
-    if (sheet.href) {
-      this.setURI(new URL.URL(sheet.href));
-    } else {
-      this.setURI(new URL.URL("#sheet-" + sheet.styleSheetIndex, sheet.nodeHref));
-    }
-  },
-
-  toString: function() {
-    return "[SheetResource:" + this.uri + "]";
-  },
-
-  get displayName() {
-    if (this._title) {
-      return this._title;
-    }
-
-    if (!this.sheet.href) {
-      this._title = "<inline style sheet " + this.sheet.styleSheetIndex + ">";
-      return this._title;
-    }
-
-    this._title = CssLogic.shortSource({ href: this.sheet.href });
-    try {
-      this._title = decodeURI(this._title);
-    } catch(ex) {
-    }
-
-    return this._title;
-  },
-
-  get isDir() { return false; },
-  get hasChildren() { return false; },
-
-  get contentType() {
-    // Good enough.
-    return "text/css";
-  },
-
-  canAutoApply: true,
-
-  load: function() {
-    return this.sheet.getText().then(longstr => {
-      return longstr.string();
-    });
-  },
-
-  apply: function(text) {
-    return this.sheet.update(text, true);
-  }
-});
diff --git a/browser/devtools/itchpad/lib/tree.js b/browser/devtools/itchpad/lib/tree.js
--- a/browser/devtools/itchpad/lib/tree.js
+++ b/browser/devtools/itchpad/lib/tree.js
@@ -1,22 +1,23 @@
 /* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+const { Cu } = require("chrome");
 const { Class } = require("sdk/core/heritage");
 const { emit } = require("sdk/event/core");
 const { EventTarget } = require("sdk/event/target");
 const { merge } = require("sdk/util/object");
 const promise = require("itchpad/helpers/promise");
 const { InplaceEditor } = require("devtools/shared/inplace-editor");
-const { on, forget } = require("itchpad/event/scope");
-const OS = require("itchpad/helpers/osfile");
+const { on, forget } = require("itchpad/helpers/event");
+const { OS } = Cu.import("resource://gre/modules/osfile.jsm", {});
 
 const HTML_NS = "http://www.w3.org/1999/xhtml";
 const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
 
 var Container = Class({
   initialize: function(tree, node) {
     this.tree = tree;
     this.node = node;
@@ -262,17 +263,22 @@ var TreeView = Class({
   },
 
   removeModel: function(model) {
     this.models.delete(model);
     this.removeNode(model.root);
     model.destroy();
   },
 
+  /* Note: Node is a RESOURCE.   This misnaming is used throughout the file.
+
+    this.containers._get(node) is a Container
+   */
   select: function(node) {
+    console.log("Select requested", node, [...this._containers]);
     this.selectContainer(this._containers.get(node));
   },
 
   selectContainer: function(container) {
     if (this.selectedContainer === container) {
       return;
     }
     if (this.selectedContainer) {
@@ -386,9 +392,43 @@ var TreeView = Class({
     for (let item of set) {
       addChildren(item);
     }
 
     return set;
   }
 });
 
-exports.TreeView = TreeView;
+var CollectionTree = Class({
+  extends: TreeView,
+
+  initialize: function(document, options) {
+    TreeView.prototype.initialize.call(this, document, options);
+  },
+
+  forgetCollection: function() {
+    if (this.coll) {
+      forget(this, this.coll);
+      for (let store of this.coll.allStores()) {
+        this.removeModel(store);
+      }
+    }
+  },
+
+  setCollection: function(coll) {
+    this.forgetCollection();
+    this.coll = coll;
+    if (this.coll) {
+      on(this, coll, "store-added", this.addModel.bind(this));
+      on(this, coll, "store-removed", this.removeModel.bind(this));
+      on(this, coll, "project-saved", this.refresh.bind(this));
+      this.refresh();
+    }
+  },
+
+  refresh: function() {
+    for (let store of this.coll.allStores()) {
+      this.addModel(store);
+    }
+  }
+});
+
+exports.CollectionTree = CollectionTree;
diff --git a/browser/devtools/itchpad/lib/unloader.js b/browser/devtools/itchpad/lib/unloader.js
deleted file mode 100644
--- a/browser/devtools/itchpad/lib/unloader.js
+++ /dev/null
@@ -1,98 +0,0 @@
-/* -*- Mode: Javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-'use strict';
-
-const { Class } = require("sdk/core/heritage");
-const unloadNS = require("sdk/core/namespace").ns();
-const { when: unload } = require("sdk/system/unload");
-
-var Unloader = exports.Unloader = Class({
-  initialize: function Unloader() {
-    unloadNS(this).unloaders = [];
-    unloadNS(this).unloadersUnload = unloadersUnload.bind(null, unloadNS(this).unloaders);
-
-    // run the unloaders on unload
-    unload(unloadNS(this).unloadersUnload);
-  },
-  unload: function unload(callback, container) {
-    // Calling with no arguments runs all the unloader callbacks
-    if (callback == null) {
-      unloadNS(this).unloadersUnload();
-      return null;
-    }
-
-    let windowRemover = windowUnloader.bind(null, unloader, unloadNS(this).unloaders);
-
-    // The callback is bound to the lifetime of the container if we have one
-    if (container != null) {
-      // Remove the unloader when the container unloads
-      container.addEventListener("unload", windowRemover, false);
-
-      // Wrap the callback to additionally remove the unload listener
-      let origCallback = callback;
-      callback = function() {
-        container.removeEventListener("unload", windowRemover, false);
-        origCallback();
-      }
-    }
-
-    // Wrap the callback in a function that ignores failures
-    function unloader() {
-      try {
-        callback();
-      }
-      catch(e) {
-        console.error(e);
-      }
-    }
-    unloadNS(this).unloaders.push(unloader);
-
-    // Provide a way to remove the unloader
-    return removeUnloader.bind(null, unloader, unloadNS(this).unloaders);
-  }
-});
-
-function sliceUnloader(unloader, unloaders) {
-  let index = unloaders.indexOf(unloader);
-  if (index < 0)
-    return [];
-  return unloaders.splice(index, 1);
-}
-// wraps sliceUnloader and doesn't return anything
-function removeUnloader(unloader, unloaders) {
-  sliceUnloader.apply(null, arguments);
-}
-function windowUnloader(unloader, unloaders) {
-  sliceUnloader.apply(null, arguments).forEach(function(u) u());
-}
-function unloadersUnload(unloaders) {
-  // run all the pending unloaders
-  unloaders.slice().forEach(function(u) u());
-  // clear the unload array
-  unloaders.length = 0;
-}
-
-/**
- * Save callbacks to run when unloading. Optionally scope the callback to a
- * container, e.g., window. Provide a way to run all the callbacks.
- *
- * @usage unload(): Run all callbacks and release them.
- *
- * @usage unload(callback): Add a callback to run on unload.
- * @param [function] callback: 0-parameter function to call on unload.
- * @return [function]: A 0-parameter function that undoes adding the callback.
- *
- * @usage unload(callback, container) Add a scoped callback to run on unload.
- * @param [function] callback: 0-parameter function to call on unload.
- * @param [node] container: Remove the callback when this container unloads.
- * @return [function]: A 0-parameter function that undoes adding the callback.
- */
-const gUnload = Unloader();
-exports.unload = gUnload.unload.bind(gUnload);
diff --git a/browser/devtools/itchpad/test/browser_itchpad_init_custom.js b/browser/devtools/itchpad/test/browser_itchpad_init_custom.js
--- a/browser/devtools/itchpad/test/browser_itchpad_init_custom.js
+++ b/browser/devtools/itchpad/test/browser_itchpad_init_custom.js
@@ -1,34 +1,37 @@
 /* vim: set ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
  http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
 // Test that itchpad can be initialized with a single path and custom options.
 
-function test() {
-  info ("Initializing itchpad with custom options");
+let test = asyncTest(function*() {
+  yield addItchpadTab();
 
-  addItchpadTab().then(() => {
-    let iframe = content.document.getElementById("itchpad-iframe");
-    let itchpad = Itchpad.Itchpad();
+  let iframe = content.document.getElementById("itchpad-iframe");
+  let itchpad = Itchpad.Itchpad();
 
-    ok (iframe, "Tab has placeholder iframe for itchpad");
-    ok (itchpad, "Itchpad has been initialized");
+  ok (iframe, "Tab has placeholder iframe for itchpad");
+  ok (itchpad, "Itchpad has been initialized");
 
-    itchpad.load(iframe).then(() => {
-      ok (true, "Load callback has been called");
-      itchpad.setProjectToSinglePath(SAMPLE_WEBAPP_PATH, {
-        name: "Test",
-        version: "0.1",
-        iconUrl: "chrome://browser/skin/devtools/tool-options.svg",
-        projectOverviewURL: SAMPLE_WEBAPP_URL
-      });
+  yield itchpad.load(iframe);
 
-      // TODO: make setProjectToSinglePath return a promise
-      // .then(()=>{finish(); });
-      finish();
-    });
+  yield itchpad.setProjectToSinglePath(SAMPLE_WEBAPP_PATH, {
+    name: "Test",
+    version: "0.1",
+    iconUrl: "chrome://browser/skin/devtools/tool-options.svg",
+    projectOverviewURL: SAMPLE_WEBAPP_URL
   });
+
+  yield runTests(itchpad);
+});
+
+function* runTests(itchpad) {
+  var defer = promise.defer();
+  itchpad.on("onEditorCreated", () => {
+    ok (true, "Editor has been created");
+    defer.resolve();
+  });
+  return defer.promise;
 }
-
diff --git a/browser/devtools/jar.mn b/browser/devtools/jar.mn
--- a/browser/devtools/jar.mn
+++ b/browser/devtools/jar.mn
@@ -3,17 +3,17 @@
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 browser.jar:
     content/browser/devtools/widgets.css                               (shared/widgets/widgets.css)
     content/browser/devtools/widgets/VariablesView.xul                 (shared/widgets/VariablesView.xul)
     content/browser/devtools/markup-view.xhtml                         (markupview/markup-view.xhtml)
     content/browser/devtools/markup-view.css                           (markupview/markup-view.css)
     content/browser/devtools/itchpad.xul                               (itchpad/chrome/content/itchpad.xul)
-    content/browser/devtools/readdir.js                                (itchpad/chrome/content/readdir.js)
+    content/browser/devtools/readdir.js                                (itchpad/lib/helpers/readdir.js)
     content/browser/devtools/itchpad-loader.xul                        (itchpad/chrome/content/itchpad-loader.xul)
     content/browser/devtools/itchpad-test.html                         (itchpad/chrome/content/itchpad-test.html)
     content/browser/devtools/itchpad-loader.js                         (itchpad/chrome/content/itchpad-loader.js)
     content/browser/devtools/netmonitor.xul                            (netmonitor/netmonitor.xul)
     content/browser/devtools/netmonitor.css                            (netmonitor/netmonitor.css)
     content/browser/devtools/netmonitor-controller.js                  (netmonitor/netmonitor-controller.js)
     content/browser/devtools/netmonitor-view.js                        (netmonitor/netmonitor-view.js)
     content/browser/devtools/NetworkPanel.xhtml                        (webconsole/NetworkPanel.xhtml)
diff --git a/browser/locales/en-US/chrome/browser/devtools/itchpad.properties b/browser/locales/en-US/chrome/browser/devtools/itchpad.properties
--- a/browser/locales/en-US/chrome/browser/devtools/itchpad.properties
+++ b/browser/locales/en-US/chrome/browser/devtools/itchpad.properties
@@ -16,8 +16,20 @@
 # file / folder to be deleted
 itchpad.deleteLabel=Delete
 
 # LOCALIZATION NOTE (itchpad.newLabel):
 # This string is displayed as a context menu item for adding a new file to
 # the directory
 itchpad.newLabel=New...
 
+# LOCALIZATION NOTE (itchpad.selectFileLabel):
+# This string is displayed as the title on the file picker when saving a file
+itchpad.selectFileLabel=Select a File
+
+# LOCALIZATION NOTE (itchpad.openFolderLabel):
+# This string is displayed as the title on the file picker when opening a folder
+itchpad.openFolderLabel=Select a Folder
+
+# LOCALIZATION NOTE (itchpad.openFileLabel):
+# This string is displayed as the title on the file picker when opening a file
+itchpad.openFileLabel=Open a File
+
