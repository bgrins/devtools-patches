# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  b482c6618d72ac38a9a82fbccf425e0a7f8b6129
Make the edit bookmark tree lazily constructed so there aren't any trees left in the browser window markup

diff --git a/browser/components/places/content/editBookmark.js b/browser/components/places/content/editBookmark.js
--- a/browser/components/places/content/editBookmark.js
+++ b/browser/components/places/content/editBookmark.js
@@ -1073,15 +1073,37 @@ var gEditItemOverlay = {
   },
 
   onItemRemoved() { },
   onBeginUpdateBatch() { },
   onEndUpdateBatch() { },
   onItemVisited() { },
 };
 
-for (let elt of ["folderMenuList", "folderTree", "namePicker",
+XPCOMUtils.defineLazyGetter(gEditItemOverlay, "_folderTree", () => {
+  // XXX: Subscript load places-tree.js if customElements.get("places-tree") isn't defined
+  gEditItemOverlay._element("folderTreeRow").prepend(MozXULElement.parseXULToFragment(`
+    <tree id="editBMPanel_folderTree"
+          flex="1"
+          class="placesTree"
+          type="places"
+          height="150"
+          minheight="150"
+          editable="true"
+          onselect="gEditItemOverlay.onFolderTreeSelect();"
+          disableUserActions="true"
+          hidecolumnpicker="true">
+      <treecols>
+        <treecol anonid="title" flex="1" primary="true" hideheader="true"/>
+      </treecols>
+      <treechildren flex="1"/>
+    </tree>
+  `));
+  return gEditItemOverlay._element("folderTree");
+});
+
+for (let elt of ["folderMenuList", "namePicker",
                  "locationField", "keywordField",
                  "tagsField" ]) {
   let eltScoped = elt;
   XPCOMUtils.defineLazyGetter(gEditItemOverlay, `_${eltScoped}`,
                               () => gEditItemOverlay._element(eltScoped));
 }
diff --git a/browser/components/places/content/editBookmarkPanel.inc.xul b/browser/components/places/content/editBookmarkPanel.inc.xul
--- a/browser/components/places/content/editBookmarkPanel.inc.xul
+++ b/browser/components/places/content/editBookmarkPanel.inc.xul
@@ -53,32 +53,17 @@
                 tooltiptextdown="&editBookmarkOverlay.foldersExpanderDown.tooltip;"
                 tooltiptextup="&editBookmarkOverlay.expanderUp.tooltip;"
                 oncommand="gEditItemOverlay.toggleFolderTreeVisibility();"/>
       </hbox>
     </vbox>
 
     <vbox id="editBMPanel_folderTreeRow"
           collapsed="true">
-      <tree id="editBMPanel_folderTree"
-            flex="1"
-            class="placesTree"
-            type="places"
-            height="150"
-            minheight="150"
-            editable="true"
-            onselect="gEditItemOverlay.onFolderTreeSelect();"
-            disableUserActions="true"
-            hidecolumnpicker="true">
-        <treecols>
-          <treecol anonid="title" flex="1" primary="true" hideheader="true"/>
-        </treecols>
-        <treechildren flex="1"/>
-      </tree>
-
+      <!-- editBMPanel_folderTree will go here when this is shown -->
       <hbox id="editBMPanel_newFolderBox">
         <button label="&editBookmarkOverlay.newFolderButton.label;"
                 id="editBMPanel_newFolderButton"
                 accesskey="&editBookmarkOverlay.newFolderButton.accesskey;"
                 oncommand="gEditItemOverlay.newFolder().catch(Components.utils.reportError);"/>
       </hbox>
     </vbox>
 
diff --git a/toolkit/content/widgets/tree.js b/toolkit/content/widgets/tree.js
--- a/toolkit/content/widgets/tree.js
+++ b/toolkit/content/widgets/tree.js
@@ -319,26 +319,33 @@
       }
 
       this.textContent = "";
       this.appendChild(this.content);
 
       this._updateAttributes();
     }
 
-    attributeChangedCallback() {
-      if (this.isConnectedAndReady) {
-        this._updateAttributes();
+    attributeChangedCallback(name, oldValue, newValue) {
+      if (oldValue == newValue) {
+        return;
       }
+      this._updateAttributes();
     }
 
     _updateAttributes() {
       let image = this.querySelector(".treecol-sortdirection");
       let label = this.querySelector(".treecol-text");
 
+      // If this is called before connectedCallback is processed (i.e. when appending
+      // via a document fragment), then do nothing.
+      if (!image || !label) {
+        return;
+      }
+
       this.inheritAttribute(image, "sortdirection");
       this.inheritAttribute(image, "hidden=hideheader");
       this.inheritAttribute(label, "value=label");
 
       // Don't remove the attribute on the child if it's los on the host.
       if (this.hasAttribute("crop")) {
         this.inheritAttribute(label, "crop");
       }
