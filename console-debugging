# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  83f9334dd110c16f15d973745fe0244ebbc19977
extra logging

diff --git a/devtools/server/actors/webconsole.js b/devtools/server/actors/webconsole.js
--- a/devtools/server/actors/webconsole.js
+++ b/devtools/server/actors/webconsole.js
@@ -1530,16 +1530,17 @@ WebConsoleActor.prototype =
   prepareConsoleMessageForRemote:
   function WCA_prepareConsoleMessageForRemote(aMessage, aUseObjectGlobal = true)
   {
     let result = WebConsoleUtils.cloneObject(aMessage);
 
     result.workerType = CONSOLE_WORKER_IDS.indexOf(result.innerID) == -1
                           ? 'none' : result.innerID;
 
+                          dump(result.workerType + "\n\n")
     delete result.wrappedJSObject;
     delete result.ID;
     delete result.innerID;
     delete result.consoleID;
 
     result.arguments = Array.map(aMessage.arguments || [], (aObj) => {
       let dbgObj = this.makeDebuggeeValue(aObj, aUseObjectGlobal);
       return this.createValueGrip(dbgObj);
diff --git a/devtools/server/main.js b/devtools/server/main.js
--- a/devtools/server/main.js
+++ b/devtools/server/main.js
@@ -845,16 +845,17 @@ var DebuggerServer = {
         onClose: () => {
           aDbg.removeListener(listener);
 
           reject("closed");
         },
 
         onMessage: (message) => {
           let packet = JSON.parse(message);
+          console.log("onMessage from main thread", packet);
           if (packet.type !== "message" || packet.id !== aId) {
             return;
           }
 
           message = packet.message;
           if (message.error) {
             reject(error);
           }
@@ -880,16 +881,21 @@ var DebuggerServer = {
 
               aConnection.cancelForwarding(aId);
             },
 
             onPacket: (packet) => {
               // Ensure that any packets received from the server on the worker
               // thread are forwarded to the client on the main thread, as if
               // they had been sent by the server on the main thread.
+              console.log("onPacket from main thread, forwarding", packet);
+              aDbg.postMessage(JSON.stringify({
+                type: "brian",
+                id: aId
+              }));
               aConnection.send(packet);
             }
           };
 
           // Ensure that any packets received from the client on the main thread
           // to actors on the worker thread are forwarded to the server on the
           // worker thread.
           aConnection.setForwarding(aId, transport);
diff --git a/devtools/server/worker.js b/devtools/server/worker.js
--- a/devtools/server/worker.js
+++ b/devtools/server/worker.js
@@ -35,17 +35,21 @@ DebuggerServer.createRootActor = functio
 };
 
 var connections = Object.create(null);
 var nextId = 0;
 var rpcDeferreds = [];
 
 this.addEventListener("message",  function (event) {
   let packet = JSON.parse(event.data);
+  dump("Packet receieved in worker thread " + event.data + "\n");
   switch (packet.type) {
+  case "brian":
+    dump("Brian receieved\n\n");
+    break;
   case "connect":
     // Step 3: Create a connection to the parent.
     let connection = DebuggerServer.connectToParent(packet.id, this);
     connections[packet.id] = {
       connection : connection,
       rpcs: []
     };
 
diff --git a/devtools/shared/webconsole/utils.js b/devtools/shared/webconsole/utils.js
--- a/devtools/shared/webconsole/utils.js
+++ b/devtools/shared/webconsole/utils.js
@@ -1435,16 +1435,20 @@ ConsoleAPIListener.prototype =
     let apiMessage = aMessage.wrappedJSObject;
     if (this.window && CONSOLE_WORKER_IDS.indexOf(apiMessage.innerID) == -1) {
       let msgWindow = Services.wm.getCurrentInnerWindowWithId(apiMessage.innerID);
       if (!msgWindow || !isWindowIncluded(this.window, msgWindow)) {
         // Not the same window!
         return;
       }
     }
+    dump("Observe() " + this.consoleID + " " + apiMessage.consoleID + " " + 
+      apiMessage.ID + " " +
+      apiMessage.innerID + " " +
+      apiMessage.consoleID + "\n");
     if (this.consoleID && apiMessage.consoleID != this.consoleID) {
       return;
     }
 
     this.owner.onConsoleAPICall(apiMessage);
   },
 
   /**
diff --git a/dom/base/ConsoleAPIStorage.js b/dom/base/ConsoleAPIStorage.js
--- a/dom/base/ConsoleAPIStorage.js
+++ b/dom/base/ConsoleAPIStorage.js
@@ -88,16 +88,17 @@ ConsoleAPIStorageService.prototype = {
    *        cached events.
    * @returns array
    *          The array of cached events for the given window. If no |aId| is
    *          given this function returns all of the cached events, from any
    *          window.
    */
   getEvents: function CS_getEvents(aId)
   {
+    dump("Called getEvents()" + aId + " " + (_consoleStorage.get(aId) || []).length + "\n")
     if (aId != null) {
       return (_consoleStorage.get(aId) || []).slice(0);
     }
 
     let result = [];
 
     for (let [id, events] of _consoleStorage) {
       result.push.apply(result, events);
