# vim: se ft=diff :
# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 2016-04-29 13:15
Bug 1260283 - Implement new console output frontend behind a pref. r=linclark

diff --git a/devtools/client/webconsole/jsterm.js b/devtools/client/webconsole/jsterm.js
index 1b26aef..7568150 100644
--- a/devtools/client/webconsole/jsterm.js
+++ b/devtools/client/webconsole/jsterm.js
@@ -934,16 +934,20 @@ JSTerm.prototype = {
     hud._repeatNodes = {};
 
     if (clearStorage) {
       this.webConsoleClient.clearMessagesCache();
     }
 
     this._sidebarDestroy();
 
+    if (hud.SUPER_FRONTEND_EXPERIMENT) {
+      hud.newConsoleOutput.dispatchMessagesClear();
+    }
+
     this.emit("messages-cleared");
   },
 
   /**
    * Remove all of the private messages from the Web Console output.
    *
    * This method emits the "private-messages-cleared" notification.
    */
diff --git a/devtools/client/webconsole/new-console-output/output-wrapper-thingy.js b/devtools/client/webconsole/new-console-output/output-wrapper-thingy.js
index bb66b71..36e102a 100644
--- a/devtools/client/webconsole/new-console-output/output-wrapper-thingy.js
+++ b/devtools/client/webconsole/new-console-output/output-wrapper-thingy.js
@@ -1,19 +1,42 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
-// React
+// React & Redux
 const React = require("devtools/client/shared/vendor/react");
 const ReactDOM = require("devtools/client/shared/vendor/react-dom");
 const { Provider } = require("devtools/client/shared/vendor/react-redux");
+const { combineReducers } = require("devtools/client/shared/vendor/redux");
+
+const createStore = require("devtools/client/shared/redux/create-store")();
+
+const { reducers } = require("./reducers/index");
+const store = createStore(combineReducers(reducers));
+
 const DummyChildComponent = React.createFactory(require("./dummy-child-component"));
 
-function OutputWrapperThingy(parentNode, store) {
+function OutputWrapperThingy(parentNode) {
   let childComponent = DummyChildComponent({});
   let provider = React.createElement(Provider, { store: store }, childComponent);
   this.body = ReactDOM.render(provider, parentNode);
 }
 
+OutputWrapperThingy.prototype = {
+  dispatchMessageAdd: (message) => {
+    let action = {
+      type: "MESSAGE_ADD",
+      message,
+    }
+    store.dispatch(action)
+  },
+  dispatchMessagesClear: () => {
+    let action = {
+      type: "MESSAGES_CLEAR",
+    }
+    store.dispatch(action)
+  }
+};
+
 // Exports from this module
 module.exports = OutputWrapperThingy;
diff --git a/devtools/client/webconsole/webconsole.js b/devtools/client/webconsole/webconsole.js
index fb76594..fe45805 100644
--- a/devtools/client/webconsole/webconsole.js
+++ b/devtools/client/webconsole/webconsole.js
@@ -17,23 +17,16 @@ Cu.import("resource://devtools/client/shared/browser-loader.js", BrowserLoaderMo
 const promise = require("promise");
 const Services = require("Services");
 const ErrorDocs = require("devtools/server/actors/errordocs");
 const Telemetry = require("devtools/client/shared/telemetry")
 
 // React & Redux
 const React = require("devtools/client/shared/vendor/react");
 const ReactDOM = require("devtools/client/shared/vendor/react-dom");
-const { Provider } = require("devtools/client/shared/vendor/react-redux");
-const { combineReducers } = require("devtools/client/shared/vendor/redux");
-
-const createStore = require("devtools/client/shared/redux/create-store")();
-
-const { reducers } = require("./new-console-output/reducers/index");
-const store = createStore(combineReducers(reducers));
 
 loader.lazyServiceGetter(this, "clipboardHelper",
                          "@mozilla.org/widget/clipboardhelper;1",
                          "nsIClipboardHelper");
 loader.lazyRequireGetter(this, "EventEmitter", "devtools/shared/event-emitter");
 loader.lazyRequireGetter(this, "AutocompletePopup", "devtools/client/shared/autocomplete-popup", true);
 loader.lazyRequireGetter(this, "ToolSidebar", "devtools/client/framework/sidebar", true);
 loader.lazyRequireGetter(this, "ConsoleOutput", "devtools/client/webconsole/console-output", true);
@@ -544,17 +537,17 @@ WebConsoleFrame.prototype = {
     if (this.SUPER_FRONTEND_EXPERIMENT) {
       console.log("Entering experimental mode for console frontend");
 
       // XXX: We should actually stop output from happening on old output
       // panel, but for now let's just hide it.
       this.experimentalOutputNode = this.outputNode.cloneNode();
       this.outputNode.hidden = true;
       this.outputNode.parentNode.appendChild(this.experimentalOutputNode);
-      this.newConsoleOutput = new this.window.NewConsoleOutput(this.experimentalOutputNode, store);
+      this.newConsoleOutput = new this.window.NewConsoleOutput(this.experimentalOutputNode);
       console.log("Created newConsoleOutput", this.newConsoleOutput);
     }
 
     this.completeNode = doc.querySelector(".jsterm-complete-node");
     this.inputNode = doc.querySelector(".jsterm-input-node");
 
     this._setFilterTextBoxEvents();
     this._initFilterButtons();
@@ -1292,21 +1285,17 @@ WebConsoleFrame.prototype = {
       case "log":
       case "info":
       case "warn":
       case "error":
       case "exception":
       case "assert":
       case "debug": {
         if (this.SUPER_FRONTEND_EXPERIMENT) {
-          let action = {
-            type: "MESSAGE_ADD",
-            message
-          }
-          store.dispatch(action)
+          this.newConsoleOutput.dispatchMessageAdd(message);
         } else {
           let msg = new Messages.ConsoleGeneric(message);
           node = msg.init(this.output).render().element;
         }
         break;
       }
       case "table": {
         let msg = new Messages.ConsoleTable(message);
