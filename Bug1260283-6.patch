# vim: se ft=diff :
# HG changeset patch
# User Lin Clark <lclark@mozilla.com>
# Date 2016-04-29 13:17
Bug 1260283 - Implement new console output frontend behind a pref. r=bgrins

diff --git a/devtools/client/webconsole/jsterm.js b/devtools/client/webconsole/jsterm.js
index 7568150..280ecb8 100644
--- a/devtools/client/webconsole/jsterm.js
+++ b/devtools/client/webconsole/jsterm.js
@@ -367,16 +367,21 @@ JSTerm.prototype = {
     // Hide undefined results coming from JSTerm helper functions.
     if (!errorMessage && result && typeof result == "object" &&
         result.type == "undefined" &&
         helperResult && !helperHasRawOutput) {
       callback && callback();
       return;
     }
 
+    if (this.hud.SUPER_FRONTEND_EXPERIMENT) {
+      this.hud.newConsoleOutput.dispatchMessageAdd(response);
+      // @TODO figure out what to do about the callback.
+      return;
+    }
     let msg = new Messages.JavaScriptEvalOutput(response,
                                                 errorMessage, errorDocLink);
     this.hud.output.addMessage(msg);
 
     if (callback) {
       let oldFlushCallback = this.hud._flushCallback;
       this.hud._flushCallback = () => {
         callback(msg.element);
diff --git a/devtools/client/webconsole/new-console-output/components/console-output.js b/devtools/client/webconsole/new-console-output/components/console-output.js
index f55c20b..d005e34 100644
--- a/devtools/client/webconsole/new-console-output/components/console-output.js
+++ b/devtools/client/webconsole/new-console-output/components/console-output.js
@@ -1,33 +1,37 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
-const React = require("devtools/client/shared/vendor/react");
+const {
+  createClass,
+  createFactory,
+  DOM: dom,
+  PropTypes
+} = require("devtools/client/shared/vendor/react");
 const { connect } = require("devtools/client/shared/vendor/react-redux");
-const DOM = React.DOM;
 
-const MessageContainer = React.createFactory(require("devtools/client/webconsole/new-console-output/components/message-container").MessageContainer);
+const MessageContainer = createFactory(require("devtools/client/webconsole/new-console-output/components/message-container").MessageContainer);
 
-const ConsoleOutput = React.createClass({
+const ConsoleOutput = createClass({
   displayName: "ConsoleOutput",
 
   render() {
     let messageNodes = this.props.messages.map(function(message) {
       return (
         MessageContainer({ message })
       );
     });
     return (
-      DOM.div({}, messageNodes)
+      dom.div({}, messageNodes)
     );
   }
 });
 
-const mapStateToProps = (state) => {
+function mapStateToProps(state) {
   return {
     messages: state.messages
   };
-};
+}
 
 module.exports = connect(mapStateToProps)(ConsoleOutput);
diff --git a/devtools/client/webconsole/new-console-output/components/message-container.js b/devtools/client/webconsole/new-console-output/components/message-container.js
index 5f95ad6..0ac1eea 100644
--- a/devtools/client/webconsole/new-console-output/components/message-container.js
+++ b/devtools/client/webconsole/new-console-output/components/message-container.js
@@ -5,39 +5,42 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 // React & Redux
 const {
   createClass,
   createElement,
-  DOM: dom,
   PropTypes
 } = require("devtools/client/shared/vendor/react");
 
 const MessageContainer = createClass({
   displayName: "MessageContainer",
 
   propTypes: {
-    message: PropTypes.object.isRequired,
+    message: PropTypes.object.isRequired
   },
 
   render() {
-    debugger
-    let MessageComponent = getMessageComponent(this.props.message.messageType);
-    return createElement(MessageComponent, { message: this.props.message });
+    const { message } = this.props;
+    let MessageComponent = getMessageComponent(message.messageType);
+    return createElement(MessageComponent, { message });
   }
 });
 
 function getMessageComponent(messageType) {
   let MessageComponent;
   switch (messageType) {
     case "ConsoleApiCall":
       MessageComponent = require("devtools/client/webconsole/new-console-output/components/message-types/console-api-call").ConsoleApiCall;
       break;
+    case "EvaluationResult":
+      MessageComponent = require("devtools/client/webconsole/new-console-output/components/message-types/evaluation-result").EvaluationResult;
+      break;
   }
   return MessageComponent;
 }
 
 module.exports.MessageContainer = MessageContainer;
+
 // Exported so we can test it with unit tests.
 module.exports.getMessageComponent = getMessageComponent;
diff --git a/devtools/client/webconsole/new-console-output/components/message-types/console-api-call.js b/devtools/client/webconsole/new-console-output/components/message-types/console-api-call.js
index 065ddb8..ffada76 100644
--- a/devtools/client/webconsole/new-console-output/components/message-types/console-api-call.js
+++ b/devtools/client/webconsole/new-console-output/components/message-types/console-api-call.js
@@ -26,20 +26,22 @@ function ConsoleApiCall(props) {
     dom.span({className: "message-body devtools-monospace"},
       formatTextContent(message.data.arguments));
   const repeat = createElement(MessageRepeat, {repeat: message.repeat});
   const children = [
     messageBody,
     repeat
   ];
 
-  return dom.span({className: "message-body-wrapper"},
-    dom.span({},
-      dom.span({className: "message-flex-body"},
-        children
+  return dom.div({ className: "message cm-s-mozilla" },
+    dom.span({className: "message-body-wrapper"},
+      dom.span({},
+        dom.span({className: "message-flex-body"},
+          children
+        )
       )
     )
   );
 }
 
 function formatTextContent(args) {
   return args.map(function(arg, i, arr) {
     const str = dom.span({className: "console-string"}, arg);
diff --git a/devtools/client/webconsole/new-console-output/components/message-types/date-preview.js b/devtools/client/webconsole/new-console-output/components/message-types/date-preview.js
new file mode 100644
index 0000000..76a6a84
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/components/message-types/date-preview.js
@@ -0,0 +1,49 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+// React & Redux
+const {
+  createFactory,
+  DOM: dom,
+  PropTypes
+} = require("devtools/client/shared/vendor/react");
+
+const VariablesViewLink = createFactory(require("devtools/client/webconsole/new-console-output/components/variables-view-link").VariablesViewLink);
+
+DatePreview.displayName = "DatePreview";
+
+DatePreview.propTypes = {
+  message: PropTypes.object.isRequired,
+};
+
+function DatePreview(props) {
+  const { data } = props;
+  const { preview } = data;
+
+  const dateString = new Date(preview.timestamp).toISOString();
+  const textNodes = [
+    VariablesViewLink({
+      objectActor: data,
+      label: "Date"
+    }),
+    dom.span({ className: "cm-string-2" }, ` ${dateString}`)
+  ];
+
+  return dom.div({ className: "message cm-s-mozilla" },
+    dom.span({
+      className: "message-body-wrapper message-body devtools-monospace"
+    }, dom.span({},
+        dom.span({ className: "class-Date" },
+          textNodes
+        )
+      )
+    )
+  );
+}
+
+module.exports.DatePreview = DatePreview;
diff --git a/devtools/client/webconsole/new-console-output/components/message-types/default-renderer.js b/devtools/client/webconsole/new-console-output/components/message-types/default-renderer.js
new file mode 100644
index 0000000..c0b0c0e
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/components/message-types/default-renderer.js
@@ -0,0 +1,22 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+// React & Redux
+const {
+  DOM: dom,
+} = require("devtools/client/shared/vendor/react");
+
+DefaultRenderer.displayName = "DefaultRenderer";
+
+function DefaultRenderer(props) {
+  return dom.div({ className: "message cm-s-mozilla" },
+    "This evaluation result type is not supported yet."
+  );
+}
+
+module.exports.DefaultRenderer = DefaultRenderer;
diff --git a/devtools/client/webconsole/new-console-output/components/message-types/evaluation-result.js b/devtools/client/webconsole/new-console-output/components/message-types/evaluation-result.js
new file mode 100644
index 0000000..26356d3
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/components/message-types/evaluation-result.js
@@ -0,0 +1,39 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+// React & Redux
+const {
+  createElement,
+  DOM: dom,
+  PropTypes
+} = require("devtools/client/shared/vendor/react");
+const { MessageRepeat } = require("devtools/client/webconsole/new-console-output/components/message-repeat");
+
+EvaluationResult.displayName = "EvaluationResult";
+
+EvaluationResult.propTypes = {
+  message: PropTypes.object.isRequired,
+};
+
+function EvaluationResult(props) {
+  const { message } = props;
+  let PreviewComponent = getPreviewComponent(message.data);
+  return createElement(PreviewComponent, { data: message.data });
+}
+
+function getPreviewComponent(data) {
+  if (typeof data.class != "undefined") {
+    switch (data.class) {
+      case "Date":
+        return require("devtools/client/webconsole/new-console-output/components/message-types/date-preview").DatePreview;
+    }
+  }
+  return require("devtools/client/webconsole/new-console-output/components/message-types/default-renderer").DefaultRenderer;
+}
+
+module.exports.EvaluationResult = EvaluationResult;
diff --git a/devtools/client/webconsole/new-console-output/components/message-types/moz.build b/devtools/client/webconsole/new-console-output/components/message-types/moz.build
index 70017f8..98040c8 100644
--- a/devtools/client/webconsole/new-console-output/components/message-types/moz.build
+++ b/devtools/client/webconsole/new-console-output/components/message-types/moz.build
@@ -1,8 +1,11 @@
 # vim: set filetype=python:
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 DevToolsModules(
     'console-api-call.js',
+    'date-preview.js',
+    'default-renderer.js',
+    'evaluation-result.js',
 )
diff --git a/devtools/client/webconsole/new-console-output/components/moz.build b/devtools/client/webconsole/new-console-output/components/moz.build
index f3fdf2f..0bc35cf 100644
--- a/devtools/client/webconsole/new-console-output/components/moz.build
+++ b/devtools/client/webconsole/new-console-output/components/moz.build
@@ -5,10 +5,11 @@
 
 DIRS += [
     'message-types'
 ]
 
 DevToolsModules(
     'console-output.js',
     'message-container.js',
-    'message-repeat.js'
+    'message-repeat.js',
+    'variables-view-link.js'
 )
diff --git a/devtools/client/webconsole/new-console-output/components/variables-view-link.js b/devtools/client/webconsole/new-console-output/components/variables-view-link.js
new file mode 100644
index 0000000..ee5105f
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/components/variables-view-link.js
@@ -0,0 +1,34 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+// React & Redux
+const {
+  DOM: dom,
+  PropTypes
+} = require("devtools/client/shared/vendor/react");
+const {openVariablesView} = require("devtools/client/webconsole/new-console-output/utils/variables-view");
+
+VariablesViewLink.displayName = "VariablesViewLink";
+
+VariablesViewLink.propTypes = {
+  objectActor: PropTypes.object.required,
+  label: PropTypes.string.label,
+};
+
+function VariablesViewLink(props) {
+  const { objectActor, label } = props;
+
+  return dom.a({
+    onClick: openVariablesView.bind(null, objectActor),
+    className: "cm-variable",
+    draggable: false,
+    href: "#"
+  }, label);
+}
+
+module.exports.VariablesViewLink = VariablesViewLink;
diff --git a/devtools/client/webconsole/new-console-output/main.js b/devtools/client/webconsole/new-console-output/main.js
index c3b872e..6b6cfdd 100644
--- a/devtools/client/webconsole/new-console-output/main.js
+++ b/devtools/client/webconsole/new-console-output/main.js
@@ -13,12 +13,12 @@ Cu.import("resource://devtools/client/shared/browser-loader.js");
 // privileges and runs entirely in content scope.
 const rootUrl = "resource://devtools/client/webconsole/new-console-output/";
 const require = BrowserLoader({
   baseURI: rootUrl,
   window: this}).require;
 const OutputWrapperThingy = require("./output-wrapper-thingy");
 const { Services } = Cu.import("resource://gre/modules/Services.jsm", {});
 
-this.NewConsoleOutput = function(parentNode, store) {
+this.NewConsoleOutput = function(parentNode, jsterm) {
   console.log("Creating NewConsoleOutput", parentNode, OutputWrapperThingy);
-  return new OutputWrapperThingy(parentNode, store);
+  return new OutputWrapperThingy(parentNode, jsterm);
 }
diff --git a/devtools/client/webconsole/new-console-output/moz.build b/devtools/client/webconsole/new-console-output/moz.build
index 9bf1be0..da86842 100644
--- a/devtools/client/webconsole/new-console-output/moz.build
+++ b/devtools/client/webconsole/new-console-output/moz.build
@@ -12,14 +12,17 @@ DIRS += [
 
 DevToolsModules(
     'constants.js',
     'main.js',
     'output-wrapper-thingy.js',
     'store.js',
 )
 
-MOCHITEST_CHROME_MANIFESTS += ['test/components/chrome.ini']
+MOCHITEST_CHROME_MANIFESTS += [
+  'test/components/chrome.ini',
+  'test/utils/chrome.ini'
+]
 XPCSHELL_TESTS_MANIFESTS += [
   'test/actions/xpcshell.ini',
   'test/store/xpcshell.ini'
 ]
 
diff --git a/devtools/client/webconsole/new-console-output/output-wrapper-thingy.js b/devtools/client/webconsole/new-console-output/output-wrapper-thingy.js
index 1a77cb0..51f384d 100644
--- a/devtools/client/webconsole/new-console-output/output-wrapper-thingy.js
+++ b/devtools/client/webconsole/new-console-output/output-wrapper-thingy.js
@@ -12,18 +12,18 @@ const {
   MESSAGE_ADD,
   MESSAGES_CLEAR
 } = require("devtools/client/webconsole/new-console-output/constants");
 const actions = require("devtools/client/webconsole/new-console-output/actions/messages");
 const { store } = require("devtools/client/webconsole/new-console-output/store");
 
 const ConsoleOutput = React.createFactory(require("devtools/client/webconsole/new-console-output/components/console-output"));
 
-function OutputWrapperThingy(parentNode) {
-  let childComponent = ConsoleOutput({});
+function OutputWrapperThingy(parentNode, jsterm) {
+  let childComponent = ConsoleOutput({ jsterm });
   let provider = React.createElement(Provider, { store: store }, childComponent);
   this.body = ReactDOM.render(provider, parentNode);
 }
 
 OutputWrapperThingy.prototype = {
   dispatchMessageAdd: (message) => {
     store.dispatch(actions.messageAdd(message));
   },
diff --git a/devtools/client/webconsole/new-console-output/test/actions/test_messages.js b/devtools/client/webconsole/new-console-output/test/actions/test_messages.js
index 7f3a93e..a4815e5 100644
--- a/devtools/client/webconsole/new-console-output/test/actions/test_messages.js
+++ b/devtools/client/webconsole/new-console-output/test/actions/test_messages.js
@@ -2,39 +2,31 @@
    http://creativecommons.org/publicdomain/zero/1.0/ */
 "use strict";
 
 const {
   messageAdd,
   messagesClear
 } = require("devtools/client/webconsole/new-console-output/actions/messages");
 const {
-  prepareMessage,
-  getRepeatId
+  prepareMessage
 } = require("devtools/client/webconsole/new-console-output/utils/messages");
 const constants = require("devtools/client/webconsole/new-console-output/constants");
 
 function run_test() {
   run_next_test();
 }
 
 add_task(function*() {
   const packet = testPackets.get("console.log");
   const action = messageAdd(packet);
   const expected = {
     type: constants.MESSAGE_ADD,
-    message: {
-      allowRepeating: true,
-      category: "console",
-      data: packet.message,
-      messageType: "ConsoleApiCall",
-      repeat: 1,
-      repeatId: getRepeatId(packet.message),
-      severity: "log"
-    }
+    // Prepare message is tested independently.
+    message: prepareMessage(packet)
   };
   deepEqual(action, expected,
     "messageAdd action creator returns expected action object");
 });
 
 add_task(function*() {
   const action = messagesClear();
   const expected = {
diff --git a/devtools/client/webconsole/new-console-output/test/components/chrome.ini b/devtools/client/webconsole/new-console-output/test/components/chrome.ini
index e527843..e29b2b8 100644
--- a/devtools/client/webconsole/new-console-output/test/components/chrome.ini
+++ b/devtools/client/webconsole/new-console-output/test/components/chrome.ini
@@ -1,9 +1,11 @@
 [DEFAULT]
 
 support-files =
   head.js
 
 [test_console-api-call.html]
 [test_console-api-call_repeat.html]
+[test_date-preview.html]
+[test_evaluation-result.html]
 [test_message-container.html]
 [test_message-repeat.html]
diff --git a/devtools/client/webconsole/new-console-output/test/components/head.js b/devtools/client/webconsole/new-console-output/test/components/head.js
index 41e349e..3926e94 100644
--- a/devtools/client/webconsole/new-console-output/test/components/head.js
+++ b/devtools/client/webconsole/new-console-output/test/components/head.js
@@ -51,21 +51,20 @@ function* getPacket(command, type = "evaluationResult") {
           function onConsoleApiCall(type, packet) {
             state.dbgClient.removeListener("consoleAPICall", onConsoleApiCall);
             resolve(packet)
           };
           state.dbgClient.addListener("consoleAPICall", onConsoleApiCall)
           eval(`top.${command}`);
         });
         break;
-      case "evaluate":
-        // @TODO support JavaScriptEvalOutput
-        // let evaluated =
-        //   new Promise(resolve => state.client.evaluateJSAsync("top.console.log(\"bitty\")", resolve));
-        // let packet = yield evaluated;
+      case "evaluationResult":
+        packet = yield new Promise(resolve => {
+          state.client.evaluateJS(command, resolve);
+        });
         break;
     }
 
     closeDebugger(state);
     return packet;
   } catch (e) {
     ok(false, "Got an error: " + DevToolsUtils.safeErrorString(e));
   }
diff --git a/devtools/client/webconsole/new-console-output/test/components/test_console-api-call.html b/devtools/client/webconsole/new-console-output/test/components/test_console-api-call.html
index 3a6135a..e1db5b5 100644
--- a/devtools/client/webconsole/new-console-output/test/components/test_console-api-call.html
+++ b/devtools/client/webconsole/new-console-output/test/components/test_console-api-call.html
@@ -15,17 +15,17 @@
 window.onload = Task.async(function* () {
   const { prepareMessage } = require("devtools/client/webconsole/new-console-output/utils/messages");
   const { ConsoleApiCall } = require("devtools/client/webconsole/new-console-output/components/message-types/console-api-call");
 
   const packet = yield getPacket("console.log('foobar', 'test')", "consoleAPICall");
   const message = prepareMessage(packet);
   const rendered = renderComponent(ConsoleApiCall, {message});
 
-  const queryPath = "span span.message-flex-body span.message-body.devtools-monospace";
+  const queryPath = "div.message.cm-s-mozilla span span.message-flex-body span.message-body.devtools-monospace";
   const messageBody = rendered.querySelectorAll(queryPath);
   const consoleStringNodes = messageBody[0].querySelectorAll("span.console-string");
   is(consoleStringNodes.length, 2, "ConsoleApiCall outputs expected HTML structure");
   is(messageBody[0].textContent, "foobar test", "ConsoleApiCall outputs expected text");
 
   SimpleTest.finish()
 });
 </script>
diff --git a/devtools/client/webconsole/new-console-output/test/components/test_date-preview.html b/devtools/client/webconsole/new-console-output/test/components/test_date-preview.html
new file mode 100644
index 0000000..17fc578
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/test/components/test_date-preview.html
@@ -0,0 +1,39 @@
+<!DOCTYPE HTML>
+<html lang="en">
+<head>
+  <meta charset="utf8">
+  <title>Test for DatePreview component</title>
+  <script type="text/javascript" src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
+  <script type="application/javascript;version=1.8" src="head.js"></script>
+  <!-- Any copyright is dedicated to the Public Domain.
+     - http://creativecommons.org/publicdomain/zero/1.0/ -->
+</head>
+<body>
+<p>Test for DatePreview component</p>
+
+<script type="text/javascript;version=1.8">
+window.onload = Task.async(function* () {
+  const { prepareMessage } = require("devtools/client/webconsole/new-console-output/utils/messages");
+  const { DatePreview } = require("devtools/client/webconsole/new-console-output/components/message-types/date-preview");
+
+  const testCommand = testCommands.get("new Date()");
+  const packet = yield getPacket(testCommand.command, testCommand.commandType);
+  const message = prepareMessage(packet);
+  const props = {
+    data: message.data,
+  };
+  const rendered = renderComponent(DatePreview, props);
+
+  const queryPathBase = "div.message.cm-s-mozilla span.message-body-wrapper.message-body.devtools-monospace span span.class-Date";
+
+  const preview = rendered.querySelectorAll(queryPathBase);
+  is(preview[0].textContent, testCommand.expectedText, "DatePreview outputs expected text");
+
+  const link = rendered.querySelectorAll(`${queryPathBase} a[draggable=false][href="#"].cm-variable`);
+  is(link.length, 1, "DatePreview outputs the variables view link");
+
+  SimpleTest.finish()
+});
+</script>
+</body>
+</html>
diff --git a/devtools/client/webconsole/new-console-output/test/components/test_evaluation-result.html b/devtools/client/webconsole/new-console-output/test/components/test_evaluation-result.html
new file mode 100644
index 0000000..e2aeef7
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/test/components/test_evaluation-result.html
@@ -0,0 +1,70 @@
+<!DOCTYPE HTML>
+<html lang="en">
+<head>
+  <meta charset="utf8">
+  <title>Test for EvaluationResult component</title>
+  <script type="text/javascript" src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
+  <script type="application/javascript;version=1.8" src="head.js"></script>
+  <!-- Any copyright is dedicated to the Public Domain.
+     - http://creativecommons.org/publicdomain/zero/1.0/ -->
+</head>
+<body>
+<p>Test for EvaluationResult component</p>
+
+<script type="text/javascript;version=1.8">
+window.onload = Task.async(function* () {
+  const { prepareMessage } = require("devtools/client/webconsole/new-console-output/utils/messages");
+  const {
+    EvaluationResult,
+    getPreviewComponent
+  } = require("devtools/client/webconsole/new-console-output/components/message-types/evaluation-result");
+
+  yield testFullRender();
+  yield testGetPreviewComponent();
+
+  SimpleTest.finish()
+
+  /**
+   * Test that passing in a message correctly wires up all the children.
+   *
+   * The different combinations of children are tested in separate per-component
+   * tests. This test just ensures that this component pipes data to its children.
+   */
+  function testFullRender() {
+    const testValue = testCommands.get("new Date()");
+    const packet = yield getPacket(testValue.command, testValue.commandType);
+    const message = prepareMessage(packet);
+    const props = {
+      message
+    };
+    const rendered = renderComponent(EvaluationResult, props);
+
+    ok(rendered.textContent.contains(testValue.expectedText),
+      "EvaluationResult pipes data to its children as expected");
+}
+
+  /**
+   * Test that getPreviewComponent() returns correct component for each object type.
+   */
+  function testGetPreviewComponent() {
+    const testValues = [
+      {
+        commandObj: testCommands.get("new Date()"),
+        expectedComponent: require("devtools/client/webconsole/new-console-output/components/message-types/date-preview").DatePreview
+      }
+    ];
+
+    for (let testValue of testValues) {
+      const { commandObj, expectedComponent } = testValue;
+      const packet = yield getPacket(commandObj.command, commandObj.commandType);
+      const message = prepareMessage(packet);
+      const rendered = shallowRenderComponent(EvaluationResult, {message});
+      is(rendered.type, expectedComponent,
+        `EvaluationResult nests ${expectedComponent} based on command: ${commandObj.command}`);
+    }
+  }
+});
+
+</script>
+</body>
+</html>
diff --git a/devtools/client/webconsole/new-console-output/test/components/test_message-container.html b/devtools/client/webconsole/new-console-output/test/components/test_message-container.html
index 616bfb1..b59d596 100644
--- a/devtools/client/webconsole/new-console-output/test/components/test_message-container.html
+++ b/devtools/client/webconsole/new-console-output/test/components/test_message-container.html
@@ -12,53 +12,62 @@
 <p>Test for MessageContainer component</p>
 
 <script type="text/javascript;version=1.8">
 window.onload = Task.async(function* () {
   const { prepareMessage } = require("devtools/client/webconsole/new-console-output/utils/messages");
 
   const { MessageContainer } = require("devtools/client/webconsole/new-console-output/components/message-container");
   const { ConsoleApiCall } = require("devtools/client/webconsole/new-console-output/components/message-types/console-api-call");
+  const { EvaluationResult } = require("devtools/client/webconsole/new-console-output/components/message-types/evaluation-result");
 
   yield testFullRender();
   yield testGetMessageComponent();
 
   SimpleTest.finish();
 
   /**
    * Test that passing in a message correctly wires up all the children.
    *
    * The different combinations of children are tested in separate per-component
    * tests. This test just ensures that this component pipes data to its children.
    */
   function testFullRender() {
     const testValue = testCommands.get("console.log()");
     const packet = yield getPacket(testValue.command, testValue.commandType);
     const message = prepareMessage(packet);
-    const rendered = renderComponent(MessageContainer, { message });
+    const props = {
+      message
+    };
+    const rendered = renderComponent(MessageContainer, props);
 
     ok(rendered.textContent.contains(testValue.expectedText),
       "MessageContainer pipes data to its children as expected");
   }
 
   /**
    * Test that getMessageComponent() returns correct component for each message type.
    */
   function testGetMessageComponent() {
     const testValues = [
       {
-        command: testCommands.get("console.log()"),
+        commandObj: testCommands.get("console.log()"),
         expectedComponent: ConsoleApiCall
+      },
+      {
+        commandObj: testCommands.get("new Date()"),
+        expectedComponent: EvaluationResult
       }
     ];
 
     for (let testValue of testValues) {
-      const packet = yield getPacket(testValue.command.command, testValue.command.commandType);
+      const { commandObj, expectedComponent } = testValue;
+      const packet = yield getPacket(commandObj.command, commandObj.commandType);
       const message = prepareMessage(packet);
       const rendered = shallowRenderComponent(MessageContainer, {message});
-      is(rendered.type, testValue.expectedComponent,
-        `MessageContainer nests ${testValue.expectedComponent} based on command: ${testValue.command}`);
+      is(rendered.type, expectedComponent,
+        `MessageContainer nests ${expectedComponent} based on command: ${commandObj.command}`);
     }
   }
 });
 </script>
 </body>
 </html>
diff --git a/devtools/client/webconsole/new-console-output/test/utils/chrome.ini b/devtools/client/webconsole/new-console-output/test/utils/chrome.ini
new file mode 100644
index 0000000..bef54e2
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/test/utils/chrome.ini
@@ -0,0 +1,6 @@
+[DEFAULT]
+
+support-files =
+  ../components/head.js
+
+[test_getRepeatId.html]
diff --git a/devtools/client/webconsole/new-console-output/test/utils/test_getRepeatId.html b/devtools/client/webconsole/new-console-output/test/utils/test_getRepeatId.html
new file mode 100644
index 0000000..5ba4ab1
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/test/utils/test_getRepeatId.html
@@ -0,0 +1,108 @@
+<!DOCTYPE HTML>
+<html lang="en">
+<head>
+  <meta charset="utf8">
+  <title>Test for getRepeatId()</title>
+  <script type="text/javascript" src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
+  <script type="application/javascript;version=1.8" src="head.js"></script>
+  <!-- Any copyright is dedicated to the Public Domain.
+     - http://creativecommons.org/publicdomain/zero/1.0/ -->
+</head>
+<body>
+<p>Test for getRepeatId()</p>
+
+<script type="text/javascript;version=1.8">
+window.onload = Task.async(function* () {
+  const {
+    prepareMessage,
+    getRepeatId
+  } = require("devtools/client/webconsole/new-console-output/utils/messages");
+
+  yield testDuplicateValues();
+  yield testDifferentValues();
+  yield testDifferentSeverities();
+  yield testFalsyValues();
+  yield testConsoleVsJSTerm();
+
+  SimpleTest.finish();
+
+  function testDuplicateValues() {
+    const packet1 = yield getPacket("console.log('same')", "consoleAPICall");
+    const packet2 = yield getPacket("console.log('same')", "consoleAPICall");
+
+    const message1 = prepareMessage(packet1);
+    const message2 = prepareMessage(packet2);
+
+    is(getRepeatId(message1.data), getRepeatId(message2.data),
+      "getRepeatId() returns same repeat id for objects with the same values");
+  }
+
+  function testDifferentValues() {
+    const packet1 = yield getPacket("console.log('same')", "consoleAPICall");
+    const packet2 = yield getPacket("console.log('diff')", "consoleAPICall");
+
+    const message1 = prepareMessage(packet1);
+    const message2 = prepareMessage(packet2);
+
+    isnot(getRepeatId(message1.data), getRepeatId(message2.data),
+      "getRepeatId() returns different repeat ids for different values");
+  }
+
+  function testDifferentSeverities() {
+    const packet1 = yield getPacket("console.log('test')", "consoleAPICall");
+    const packet2 = yield getPacket("console.warn('test')", "consoleAPICall");
+
+    const message1 = prepareMessage(packet1);
+    const message2 = prepareMessage(packet2);
+
+    isnot(getRepeatId(message1.data), getRepeatId(message2.data),
+      "getRepeatId() returns different repeat ids for different severities");
+  }
+
+  function testFalsyValues() {
+    const packetNaN = yield getPacket("console.log(NaN)", "consoleAPICall");
+    const packetUnd = yield getPacket("console.log(undefined)", "consoleAPICall");
+    const packetNul = yield getPacket("console.log(null)", "consoleAPICall");
+
+    const messageNaN = prepareMessage(packetNaN);
+    const messageUnd = prepareMessage(packetUnd);
+    const messageNul = prepareMessage(packetNul);
+
+    const repeatIds = new Set([
+      getRepeatId(messageNaN.data),
+      getRepeatId(messageUnd.data),
+      getRepeatId(messageNul.data)]
+    );
+    is(repeatIds.size, 3,
+      "getRepeatId() handles falsy values distinctly");
+
+    const packetNaN2 = yield getPacket("console.log(NaN)", "consoleAPICall");
+    const packetUnd2 = yield getPacket("console.log(undefined)", "consoleAPICall");
+    const packetNul2 = yield getPacket("console.log(null)", "consoleAPICall");
+
+    const messageNaN2 = prepareMessage(packetNaN2);
+    const messageUnd2 = prepareMessage(packetUnd2);
+    const messageNul2 = prepareMessage(packetNul2);
+
+    is(getRepeatId(messageNaN.data), getRepeatId(messageNaN2.data),
+      "getRepeatId() handles NaN values");
+    is(getRepeatId(messageUnd.data), getRepeatId(messageUnd2.data),
+      "getRepeatId() handles undefined values");
+    is(getRepeatId(messageNul.data), getRepeatId(messageNul2.data),
+      "getRepeatId() handles null values");
+  }
+
+  function testConsoleVsJSTerm() {
+    const packet1 = yield getPacket("console.log(undefined)", "consoleAPICall");
+    const packet2 = yield getPacket("undefined");
+
+    const message1 = prepareMessage(packet1);
+    const message2 = prepareMessage(packet2);
+
+    isnot(getRepeatId(message1.data), getRepeatId(message2.data),
+      "getRepeatId() returns different repeat ids for console vs JSTerm");
+  }
+});
+</script>
+</body>
+</html>
diff --git a/devtools/client/webconsole/new-console-output/utils/messages.js b/devtools/client/webconsole/new-console-output/utils/messages.js
index f037bfc..6b85bc5 100644
--- a/devtools/client/webconsole/new-console-output/utils/messages.js
+++ b/devtools/client/webconsole/new-console-output/utils/messages.js
@@ -2,39 +2,54 @@
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const {
+  CATEGORY_CLASS_FRAGMENTS,
+  CATEGORY_WEBDEV,
+  CATEGORY_OUTPUT,
   LEVELS,
-  SEVERITY_CLASS_FRAGMENTS
+  SEVERITY_CLASS_FRAGMENTS,
+  SEVERITY_LOG,
 } = require("../constants");
+const WebConsoleUtils = require("devtools/shared/webconsole/utils").Utils;
 
 function prepareMessage(packet) {
   // @TODO turn this into an Immutable Record.
   let allowRepeating;
   let category;
   let data;
   let messageType;
   let repeat;
   let repeatId;
   let severity;
 
   switch (packet.type) {
     case "consoleAPICall":
-      allowRepeating = true;
-      category = "console";
       data = Object.assign({}, packet.message);
+      allowRepeating = true;
+      category = CATEGORY_CLASS_FRAGMENTS[CATEGORY_WEBDEV];
       messageType = "ConsoleApiCall";
       repeat = 1;
-      repeatId = getRepeatId(packet.message);
-      severity = SEVERITY_CLASS_FRAGMENTS[LEVELS[packet.message.level]];
+      repeatId = getRepeatId(data);
+      severity = SEVERITY_CLASS_FRAGMENTS[LEVELS[data.level]];
+      break;
+    case "evaluationResult":
+    default:
+      data = Object.assign({}, packet.result);
+      allowRepeating = true;
+      category = CATEGORY_CLASS_FRAGMENTS[CATEGORY_OUTPUT];
+      messageType = "EvaluationResult";
+      repeat = 1;
+      repeatId = getRepeatId(data);
+      severity = SEVERITY_CLASS_FRAGMENTS[SEVERITY_LOG];
       break;
   }
 
   return {
     allowRepeating,
     category,
     data,
     messageType,
@@ -46,11 +61,11 @@ function prepareMessage(packet) {
 
 function getRepeatId(message) {
   let clonedMessage = JSON.parse(JSON.stringify(message));
   delete clonedMessage.timeStamp;
   delete clonedMessage.uniqueID;
   return JSON.stringify(clonedMessage);
 }
 
-// Export for use in testing.
 exports.prepareMessage = prepareMessage;
+// Export for use in testing.
 exports.getRepeatId = getRepeatId;
diff --git a/devtools/client/webconsole/new-console-output/utils/moz.build b/devtools/client/webconsole/new-console-output/utils/moz.build
index bac6526..2766a29 100644
--- a/devtools/client/webconsole/new-console-output/utils/moz.build
+++ b/devtools/client/webconsole/new-console-output/utils/moz.build
@@ -1,8 +1,9 @@
 # vim: set filetype=python:
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 DevToolsModules(
     'messages.js',
+    'variables-view.js',
 )
diff --git a/devtools/client/webconsole/new-console-output/utils/variables-view.js b/devtools/client/webconsole/new-console-output/utils/variables-view.js
new file mode 100644
index 0000000..71e1af5
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/utils/variables-view.js
@@ -0,0 +1,16 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+/**
+ * @TODO Remove this.
+ *
+ * Once JSTerm is also written in React/Redux, these will be actions.
+ */
+exports.openVariablesView = (objectActor) => {
+  window.jsterm.openVariablesView({objectActor});
+}
diff --git a/devtools/client/webconsole/webconsole.js b/devtools/client/webconsole/webconsole.js
index 6ccf01b..d67245f 100644
--- a/devtools/client/webconsole/webconsole.js
+++ b/devtools/client/webconsole/webconsole.js
@@ -14,20 +14,16 @@ const { getSourceNames } = require("devtools/client/shared/source-utils");
 const BrowserLoaderModule = {};
 Cu.import("resource://devtools/client/shared/browser-loader.js", BrowserLoaderModule);
 
 const promise = require("promise");
 const Services = require("Services");
 const ErrorDocs = require("devtools/server/actors/errordocs");
 const Telemetry = require("devtools/client/shared/telemetry")
 
-// React & Redux
-const React = require("devtools/client/shared/vendor/react");
-const ReactDOM = require("devtools/client/shared/vendor/react-dom");
-
 loader.lazyServiceGetter(this, "clipboardHelper",
                          "@mozilla.org/widget/clipboardhelper;1",
                          "nsIClipboardHelper");
 loader.lazyRequireGetter(this, "EventEmitter", "devtools/shared/event-emitter");
 loader.lazyRequireGetter(this, "AutocompletePopup", "devtools/client/shared/autocomplete-popup", true);
 loader.lazyRequireGetter(this, "ToolSidebar", "devtools/client/framework/sidebar", true);
 loader.lazyRequireGetter(this, "ConsoleOutput", "devtools/client/webconsole/console-output", true);
 loader.lazyRequireGetter(this, "Messages", "devtools/client/webconsole/console-output", true);
@@ -529,28 +525,16 @@ WebConsoleFrame.prototype = {
     } else {
       doc.querySelector("#key_clear").removeAttribute("disabled");
     }
 
     this.filterBox = doc.querySelector(".hud-filter-box");
     this.outputNode = doc.getElementById("output-container");
     this.outputWrapper = doc.getElementById("output-wrapper");
 
-    if (this.SUPER_FRONTEND_EXPERIMENT) {
-      console.log("Entering experimental mode for console frontend");
-
-      // XXX: We should actually stop output from happening on old output
-      // panel, but for now let's just hide it.
-      this.experimentalOutputNode = this.outputNode.cloneNode();
-      this.outputNode.hidden = true;
-      this.outputNode.parentNode.appendChild(this.experimentalOutputNode);
-      this.newConsoleOutput = new this.window.NewConsoleOutput(this.experimentalOutputNode);
-      console.log("Created newConsoleOutput", this.newConsoleOutput);
-    }
-
     this.completeNode = doc.querySelector(".jsterm-complete-node");
     this.inputNode = doc.querySelector(".jsterm-input-node");
 
     this._setFilterTextBoxEvents();
     this._initFilterButtons();
 
     let fontSize = this.owner._browserConsole ?
                    Services.prefs.getIntPref("devtools.webconsole.fontSize") :
@@ -580,16 +564,32 @@ WebConsoleFrame.prototype = {
     clearButton.addEventListener("command", () => {
       this.owner._onClearButton();
       this.jsterm.clearOutput(true);
     });
 
     this.jsterm = new JSTerm(this);
     this.jsterm.init();
 
+    if (this.SUPER_FRONTEND_EXPERIMENT) {
+      // @TODO Remove this once JSTerm is handled with React/Redux.
+      this.window.jsterm = this.jsterm;
+      console.log("Entering experimental mode for console frontend");
+
+      // XXX: We should actually stop output from happening on old output
+      // panel, but for now let's just hide it.
+      this.experimentalOutputNode = this.outputNode.cloneNode();
+      this.outputNode.hidden = true;
+      this.outputNode.parentNode.appendChild(this.experimentalOutputNode);
+      // @TODO Once the toolbox has been converted to React, see if passing
+      // in JSTerm is still necessary.
+      this.newConsoleOutput = new this.window.NewConsoleOutput(this.experimentalOutputNode, this.jsterm);
+      console.log("Created newConsoleOutput", this.newConsoleOutput);
+    }
+
     this.resize();
     this.window.addEventListener("resize", this.resize, true);
     this.jsterm.on("sidebar-opened", this.resize);
     this.jsterm.on("sidebar-closed", this.resize);
 
     let toolbox = gDevTools.getToolbox(this.owner.target);
     if (toolbox) {
       toolbox.on("webconsole-selected", this._onPanelSelected);
