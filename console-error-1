# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  befb0c5fccb1ef6fe1a4deccdddfa73f6dcffb69
Bug XXX - }, e => console.error(e)) with console.error.bind(console);r=jryans

diff --git a/devtools/client/animationinspector/components.js b/devtools/client/animationinspector/components.js
--- a/devtools/client/animationinspector/components.js
+++ b/devtools/client/animationinspector/components.js
@@ -262,22 +262,22 @@ AnimationTargetNode.prototype = {
 
     let classList = this.highlightNodeEl.classList;
 
     let isHighlighted = classList.contains("selected");
     if (isHighlighted) {
       classList.remove("selected");
       TargetNodeHighlighter.unhighlight().then(() => {
         this.emit("target-highlighter-unlocked");
-      }, e => console.error(e));
+      }, console.error.bind(console));
     } else {
       classList.add("selected");
       TargetNodeHighlighter.highlight(this).then(() => {
         this.emit("target-highlighter-locked");
-      }, e => console.error(e));
+      }, console.error.bind(console));
     }
   },
 
   onTargetHighlighterLocked: function(e, animationTargetNode) {
     if (animationTargetNode !== this) {
       this.highlightNodeEl.classList.remove("selected");
     }
   },
diff --git a/devtools/client/markupview/markup-view.js b/devtools/client/markupview/markup-view.js
--- a/devtools/client/markupview/markup-view.js
+++ b/devtools/client/markupview/markup-view.js
@@ -151,17 +151,17 @@ MarkupView.prototype = {
       this.tooltip.startTogglingOnHover(this._elt,
         this._isImagePreviewTarget.bind(this));
     }
   },
 
   _onToolboxPickerHover: function(event, nodeFront) {
     this.showNode(nodeFront).then(() => {
       this._showContainerAsHovered(nodeFront);
-    }, e => console.error(e));
+    }, console.error.bind(console));
   },
 
   isDragging: false,
 
   _onMouseMove: function(event) {
     let target = event.target;
 
     // Auto-scroll if we're dragging.
diff --git a/devtools/client/styleinspector/style-inspector-overlays.js b/devtools/client/styleinspector/style-inspector-overlays.js
--- a/devtools/client/styleinspector/style-inspector-overlays.js
+++ b/devtools/client/styleinspector/style-inspector-overlays.js
@@ -180,17 +180,17 @@ HighlightersOverlay.prototype = {
     }
 
     // For some reason, the call to highlighter.hide doesn't always return a
     // promise. This causes some tests to fail when trying to install a
     // rejection handler on the result of the call. To avoid this, check
     // whether the result is truthy before installing the handler.
     let promise = this.highlighters[this.highlighterShown].hide();
     if (promise) {
-      promise.then(null, e => console.error(e));
+      promise.then(null, console.error.bind(console));
     }
 
     this.highlighterShown = null;
     this.emit("highlighter-hidden");
   },
 
   /**
    * Get a highlighter front given a type. It will only be initialized once
diff --git a/devtools/client/webide/content/runtimedetails.js b/devtools/client/webide/content/runtimedetails.js
--- a/devtools/client/webide/content/runtimedetails.js
+++ b/devtools/client/webide/content/runtimedetails.js
@@ -99,17 +99,17 @@ function CheckLockState() {
         device.isRoot().then(isRoot => {
           if (isRoot) {
             adbCheckResult.textContent = sYes;
             flipCertPerfButton.removeAttribute("disabled");
           } else {
             adbCheckResult.textContent = sNo;
             adbRootAction.removeAttribute("hidden");
           }
-        }, e => console.error(e));
+        }, console.error.bind(console));
       } else {
         adbCheckResult.textContent = sUnknown;
       }
     } else {
       adbCheckResult.textContent = sNotUSB;
     }
 
     // forbid-certified-apps check
@@ -117,17 +117,17 @@ function CheckLockState() {
       let prefFront = AppManager.preferenceFront;
       prefFront.getBoolPref("devtools.debugger.forbid-certified-apps").then(isForbidden => {
         if (isForbidden) {
           devtoolsCheckResult.textContent = sNo;
           flipCertPerfAction.removeAttribute("hidden");
         } else {
           devtoolsCheckResult.textContent = sYes;
         }
-      }, e => console.error(e));
+      }, console.error.bind(console));
     } catch(e) {
       // Exception. pref actor is only accessible if forbird-certified-apps is false
       devtoolsCheckResult.textContent = sNo;
       flipCertPerfAction.removeAttribute("hidden");
     }
 
   }
 
