# HG changeset patch
# Parent d8c1b10c3a3dc57e9fa9ff47db13950a59befc64
# User Willian Gustavo Veiga <contact@willianveiga.com>
Bug 992947 - Add "Open Link In New Tab" item to stylesheet list.

diff --git a/browser/devtools/styleeditor/StyleEditorUI.jsm b/browser/devtools/styleeditor/StyleEditorUI.jsm
--- a/browser/devtools/styleeditor/StyleEditorUI.jsm
+++ b/browser/devtools/styleeditor/StyleEditorUI.jsm
@@ -5,17 +5,17 @@
 
 "use strict";
 
 this.EXPORTED_SYMBOLS = ["StyleEditorUI"];
 
 const Cc = Components.classes;
 const Ci = Components.interfaces;
 const Cu = Components.utils;
-
+let {console} = Cu.import("resource://gre/modules/devtools/Console.jsm", {});
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource://gre/modules/PluralForm.jsm");
 Cu.import("resource://gre/modules/NetUtil.jsm");
 Cu.import("resource://gre/modules/osfile.jsm");
 Cu.import("resource://gre/modules/Task.jsm");
 Cu.import("resource://gre/modules/devtools/event-emitter.js");
 Cu.import("resource:///modules/devtools/gDevTools.jsm");
 Cu.import("resource:///modules/devtools/StyleEditorUtil.jsm");
@@ -58,16 +58,18 @@ function StyleEditorUI(debuggee, target,
   this.selectedEditor = null;
   this.savedLocations = {};
 
   this._updateSourcesLabel = this._updateSourcesLabel.bind(this);
   this._onStyleSheetCreated = this._onStyleSheetCreated.bind(this);
   this._onNewDocument = this._onNewDocument.bind(this);
   this._clear = this._clear.bind(this);
   this._onError = this._onError.bind(this);
+  this._enableOpenLinkNewTabItemIfNotInlineCss = this._enableOpenLinkNewTabItemIfNotInlineCss.bind(this);
+  this._openLinkNewTab = this._openLinkNewTab.bind(this);
 
   this._prefObserver = new PrefObserver("devtools.styleeditor.");
   this._prefObserver.on(PREF_ORIG_SOURCES, this._onNewDocument);
 }
 
 StyleEditorUI.prototype = {
   /**
    * Get whether any of the editors have unsaved changes.
@@ -128,23 +130,34 @@ StyleEditorUI.prototype = {
     wire(this._view.rootElement, ".style-editor-newButton", function onNew() {
       this._debuggee.addStyleSheet(null).then(this._onStyleSheetCreated);
     }.bind(this));
 
     wire(this._view.rootElement, ".style-editor-importButton", function onImport() {
       this._importFromFile(this._mockImportFile || null, this._window);
     }.bind(this));
 
+    this._panelDoc.addEventListener("contextmenu", () => {
+      console.log("DOC RECIEVED POPUP SHOWING");
+      this._contextMenuStyleSheet = null;
+    }, true);
     this._contextMenu = this._panelDoc.getElementById("sidebar-context");
     this._contextMenu.addEventListener("popupshowing",
                                        this._updateSourcesLabel);
 
+    this._contextMenu.addEventListener("popupshowing",
+                                       this._enableOpenLinkNewTabItemIfNotInlineCss);
+
     this._sourcesItem = this._panelDoc.getElementById("context-origsources");
     this._sourcesItem.addEventListener("command",
                                        this._toggleOrigSources);
+
+    this._openLinkNewTabItem = this._panelDoc.getElementById("context-openlinknewtab");
+    this._openLinkNewTabItem.addEventListener("command",
+                                              this._openLinkNewTab);
   },
 
   /**
    * Update text of context menu option to reflect whether we're showing
    * original sources (e.g. Sass files) or not.
    */
   _updateSourcesLabel: function() {
     let string = "showOriginalSources";
@@ -339,16 +352,25 @@ StyleEditorUI.prototype = {
   /**
    *  Toggle the original sources pref.
    */
   _toggleOrigSources: function() {
     let isEnabled = Services.prefs.getBoolPref(PREF_ORIG_SOURCES);
     Services.prefs.setBoolPref(PREF_ORIG_SOURCES, !isEnabled);
   },
 
+  _enableOpenLinkNewTabItemIfNotInlineCss: function(e) {
+    console.log("Right click", arguments, e, this._contextMenuStyleSheet);
+    this._openLinkNewTabItem.setAttribute('hidden', (!this.selectedEditor.styleSheet.href));
+  },
+
+  _openLinkNewTab: function() {
+    this._window.openNewTabWith(this.selectedEditor.styleSheet.href);
+  },
+
   /**
    * Remove a particular stylesheet editor from the UI
    *
    * @param {StyleSheetEditor}  editor
    *        The editor to remove.
    */
   _removeStyleSheetEditor: function(editor) {
     if (editor.summary) {
@@ -424,16 +446,26 @@ StyleEditorUI.prototype = {
         this._updateSummaryForEditor(editor, summary);
 
         summary.addEventListener("focus", function onSummaryFocus(event) {
           if (event.target == summary) {
             // autofocus the stylesheet name
             summary.querySelector(".stylesheet-name").focus();
           }
         }, false);
+        summary.addEventListener("contextmenu", (event) => {
+          this._contextMenuStyleSheet = editor.styleSheet;
+          console.log("CONTEXT MENU!!!!!", event, this._contextMenuStyleSheet);
+          event.stopPropagation();
+        }, false);
+
+        summary.addEventListener("popupshowing", function onSummaryFocus(event) {
+          console.log("POPUPSHOWIGN", event);
+          event.data.styleSheet = editor.styleSheet;
+        }, false);
 
         Task.spawn(function* () {
           // autofocus if it's a new user-created stylesheet
           if (editor.isNew) {
             yield this._selectEditor(editor);
           }
 
           if (this._styleSheetToSelect
diff --git a/browser/devtools/styleeditor/styleeditor.xul b/browser/devtools/styleeditor/styleeditor.xul
--- a/browser/devtools/styleeditor/styleeditor.xul
+++ b/browser/devtools/styleeditor/styleeditor.xul
@@ -21,16 +21,17 @@
 
 <xul:window xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
         xmlns="http://www.w3.org/1999/xhtml"
         id="style-editor-chrome-window">
 
   <script type="application/javascript;version=1.8"
           src="chrome://browser/content/devtools/theme-switching.js"/>
   <xul:script type="application/javascript" src="chrome://global/content/globalOverlay.js"/>
+  <xul:script type="application/javascript" src="chrome://browser/content/utilityOverlay.js"/>
   <xul:script type="application/javascript">
     function goUpdateSourceEditorMenuItems() {
       goUpdateGlobalEditMenuItems();
 
       ['cmd_undo', 'cmd_redo', 'cmd_cut', 'cmd_paste',
        'cmd_delete', 'cmd_find', 'cmd_findAgain'].forEach(goUpdateCommand);
     }
   </xul:script>
@@ -54,16 +55,18 @@
       <xul:menuitem id="se-menu-gotoLine"
           label="&gotoLineCmd.label;"
           accesskey="&gotoLineCmd.accesskey;"
           key="key_gotoLine"
           command="cmd_gotoLine"/>
     </xul:menupopup>
     <xul:menupopup id="sidebar-context">
       <xul:menuitem id="context-origsources"/>
+      <xul:menuitem id="context-openlinknewtab"
+        label="&openLinkNewTab.label;"/>
     </xul:menupopup>
   </xul:popupset>
 
   <xul:commandset id="editMenuCommands"/>
 
   <xul:commandset id="sourceEditorCommands">
     <xul:command id="cmd_gotoLine" oncommand="goDoCommand('cmd_gotoLine')"/>
     <xul:command id="cmd_find" oncommand="goDoCommand('cmd_find')"/>
diff --git a/browser/locales/en-US/chrome/browser/devtools/styleeditor.dtd b/browser/locales/en-US/chrome/browser/devtools/styleeditor.dtd
--- a/browser/locales/en-US/chrome/browser/devtools/styleeditor.dtd
+++ b/browser/locales/en-US/chrome/browser/devtools/styleeditor.dtd
@@ -34,8 +34,10 @@
      tip sentence shown when there is no stylesheet. It suggests to create a new
      stylesheet and provides an action link to do so. -->
 <!ENTITY noStyleSheet-tip-start.label  "Perhaps you'd like to ">
 <!-- LOCALICATION NOTE  (noStyleSheet-tip-action.label): This is text for the
      link that triggers creation of a new stylesheet. -->
 <!ENTITY noStyleSheet-tip-action.label "append a new style sheet">
 <!-- LOCALICATION NOTE  (noStyleSheet-tip-end.label): End of the tip sentence -->
 <!ENTITY noStyleSheet-tip-end.label    "?">
+
+<!ENTITY openLinkNewTab.label     "Open link in new tab">
