# HG changeset patch
# Parent f388346b5fae6372a250719d285499bc11f1ed02
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 945697 - Responsive Mode gets closed when ESC is used in the varilable view, in the rule view and in the variable view;r=paul

diff --git a/browser/devtools/framework/toolbox.js b/browser/devtools/framework/toolbox.js
--- a/browser/devtools/framework/toolbox.js
+++ b/browser/devtools/framework/toolbox.js
@@ -232,18 +232,30 @@ Toolbox.prototype = {
 
   _buildOptions: function() {
     let key = this.doc.getElementById("toolbox-options-key");
     key.addEventListener("command", () => {
       this.selectTool("options");
     }, true);
   },
 
+  _isResponsiveModeActive: function() {
+    let responsiveModeActive = false;
+    if (this.target.isLocalTab) {
+      let tab = this.target.tab;
+      let browserWindow = tab.ownerDocument.defaultView;
+      let responsiveUIManager = browserWindow.ResponsiveUI.ResponsiveUIManager;
+      responsiveModeActive = responsiveUIManager.isActiveForTab(tab);
+    }
+    return responsiveModeActive;
+  },
+
   _splitConsoleOnKeypress: function(e) {
-    if (e.keyCode === e.DOM_VK_ESCAPE) {
+    let responsiveModeActive = this._isResponsiveModeActive();
+    if (e.keyCode === e.DOM_VK_ESCAPE && !responsiveModeActive) {
       this.toggleSplitConsole();
     }
   },
 
   _addToolSwitchingKeys: function() {
     let nextKey = this.doc.getElementById("toolbox-next-tool-key");
     nextKey.addEventListener("command", this.selectNextTool.bind(this), true);
     let prevKey = this.doc.getElementById("toolbox-previous-tool-key");
diff --git a/browser/devtools/responsivedesign/responsivedesign.jsm b/browser/devtools/responsivedesign/responsivedesign.jsm
--- a/browser/devtools/responsivedesign/responsivedesign.jsm
+++ b/browser/devtools/responsivedesign/responsivedesign.jsm
@@ -171,17 +171,17 @@ function ResponsiveUI(aWindow, aTab)
   this.bound_startResizing = this.startResizing.bind(this);
   this.bound_stopResizing = this.stopResizing.bind(this);
   this.bound_onDrag = this.onDrag.bind(this);
   this.bound_onKeypress = this.onKeypress.bind(this);
 
   // Events
   this.tab.addEventListener("TabClose", this);
   this.tabContainer.addEventListener("TabSelect", this);
-  this.mainWindow.document.addEventListener("keypress", this.bound_onKeypress, true);
+  this.mainWindow.document.addEventListener("keypress", this.bound_onKeypress, false);
 
   this.buildUI();
   this.checkMenus();
 
   this.docShell = this.browser.contentWindow.QueryInterface(Ci.nsIInterfaceRequestor)
                       .getInterface(Ci.nsIWebNavigation)
                       .QueryInterface(Ci.nsIDocShell);
 
@@ -271,17 +271,17 @@ ResponsiveUI.prototype = {
                 "max-height: none;" +
                 "min-height: 0;";
     this.stack.setAttribute("style", style);
 
     if (this.isResizing)
       this.stopResizing();
 
     // Remove listeners.
-    this.mainWindow.document.removeEventListener("keypress", this.bound_onKeypress, true);
+    this.mainWindow.document.removeEventListener("keypress", this.bound_onKeypress, false);
     this.menulist.removeEventListener("select", this.bound_presetSelected, true);
     this.tab.removeEventListener("TabClose", this);
     this.tabContainer.removeEventListener("TabSelect", this);
     this.rotatebutton.removeEventListener("command", this.bound_rotate, true);
     this.screenshotbutton.removeEventListener("command", this.bound_screenshot, true);
     this.touchbutton.removeEventListener("command", this.bound_touch, true);
     this.closebutton.removeEventListener("command", this.bound_close, true);
     this.addbutton.removeEventListener("command", this.bound_addPreset, true);
diff --git a/browser/devtools/responsivedesign/test/browser_responsiveruleview.js b/browser/devtools/responsivedesign/test/browser_responsiveruleview.js
--- a/browser/devtools/responsivedesign/test/browser_responsiveruleview.js
+++ b/browser/devtools/responsivedesign/test/browser_responsiveruleview.js
@@ -1,16 +1,17 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 function test() {
   let instance;
 
   let ruleView;
   let inspector;
+  let mgr = ResponsiveUI.ResponsiveUIManager;
 
   waitForExplicitFinish();
 
   gBrowser.selectedTab = gBrowser.addTab();
   gBrowser.selectedBrowser.addEventListener("load", function onload() {
     gBrowser.selectedBrowser.removeEventListener("load", onload, true);
     waitForFocus(startTest, content);
   }, true);
@@ -73,24 +74,32 @@ function test() {
 
     instance.setSize(100, 100);
   }
 
   function testGrow() {
     ruleView.element.addEventListener("CssRuleViewRefreshed", function refresh() {
       ruleView.element.removeEventListener("CssRuleViewRefreshed", refresh, false);
       is(numberOfRules(), 2, "Should have two rules after growing.");
-      finishUp();
+      testEscapeCloses();
     }, false);
 
     instance.setSize(500, 500);
   }
 
+  function testEscapeCloses() {
+    is(document.getElementById("Tools:ResponsiveUI").getAttribute("checked"), "true", "menu checked");
+    ok(!inspector._toolbox._splitConsole, "Console is not split.");
+
+    mgr.once("off", function() {executeSoon(finishUp)});
+    EventUtils.synthesizeKey("VK_ESCAPE", {});
+  }
+
   function finishUp() {
-    document.getElementById("Tools:ResponsiveUI").doCommand();
+    ok(!inspector._toolbox._splitConsole, "Console is still not split after pressing escape.");
 
     // Menus are correctly updated?
     is(document.getElementById("Tools:ResponsiveUI").getAttribute("checked"), "false", "menu unchecked");
 
     gBrowser.removeCurrentTab();
     finish();
   }
 }
