# HG changeset patch
# Parent d5e8929131478f82f58407fa148f1844e258ab0c
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 1037145 - Remove esc as a keybinding to close responsive mode;r=paul

diff --git a/browser/devtools/framework/toolbox.js b/browser/devtools/framework/toolbox.js
--- a/browser/devtools/framework/toolbox.js
+++ b/browser/devtools/framework/toolbox.js
@@ -297,30 +297,18 @@ Toolbox.prototype = {
 
   _buildOptions: function() {
     let key = this.doc.getElementById("toolbox-options-key");
     key.addEventListener("command", () => {
       this.selectTool("options");
     }, true);
   },
 
-  _isResponsiveModeActive: function() {
-    let responsiveModeActive = false;
-    if (this.target.isLocalTab) {
-      let tab = this.target.tab;
-      let browserWindow = tab.ownerDocument.defaultView;
-      let responsiveUIManager = browserWindow.ResponsiveUI.ResponsiveUIManager;
-      responsiveModeActive = responsiveUIManager.isActiveForTab(tab);
-    }
-    return responsiveModeActive;
-  },
-
   _splitConsoleOnKeypress: function(e) {
-    let responsiveModeActive = this._isResponsiveModeActive();
-    if (e.keyCode === e.DOM_VK_ESCAPE && !responsiveModeActive) {
+    if (e.keyCode === e.DOM_VK_ESCAPE) {
       this.toggleSplitConsole();
       // If the debugger is paused, don't let the ESC key stop any pending
       // navigation.
       let jsdebugger = this.getPanel("jsdebugger");
       if (jsdebugger && jsdebugger.panelWin.gThreadClient.state == "paused") {
         e.preventDefault();
       }
     }
diff --git a/browser/devtools/responsivedesign/responsivedesign.jsm b/browser/devtools/responsivedesign/responsivedesign.jsm
--- a/browser/devtools/responsivedesign/responsivedesign.jsm
+++ b/browser/devtools/responsivedesign/responsivedesign.jsm
@@ -168,22 +168,20 @@ function ResponsiveUI(aWindow, aTab)
   this.bound_removePreset = this.removePreset.bind(this);
   this.bound_rotate = this.rotate.bind(this);
   this.bound_screenshot = () => this.screenshot();
   this.bound_touch = this.toggleTouch.bind(this);
   this.bound_close = this.close.bind(this);
   this.bound_startResizing = this.startResizing.bind(this);
   this.bound_stopResizing = this.stopResizing.bind(this);
   this.bound_onDrag = this.onDrag.bind(this);
-  this.bound_onKeypress = this.onKeypress.bind(this);
 
   // Events
   this.tab.addEventListener("TabClose", this);
   this.tabContainer.addEventListener("TabSelect", this);
-  this.mainWindow.document.addEventListener("keypress", this.bound_onKeypress, false);
 
   this.buildUI();
   this.checkMenus();
 
   this.docShell = this.browser.contentWindow.QueryInterface(Ci.nsIInterfaceRequestor)
                       .getInterface(Ci.nsIWebNavigation)
                       .QueryInterface(Ci.nsIDocShell);
 
@@ -277,17 +275,16 @@ ResponsiveUI.prototype = {
                 "max-height: none;" +
                 "min-height: 0;";
     this.stack.setAttribute("style", style);
 
     if (this.isResizing)
       this.stopResizing();
 
     // Remove listeners.
-    this.mainWindow.document.removeEventListener("keypress", this.bound_onKeypress, false);
     this.menulist.removeEventListener("select", this.bound_presetSelected, true);
     this.menulist.removeEventListener("change", this.bound_handleManualInput, true);
     this.tab.removeEventListener("TabClose", this);
     this.tabContainer.removeEventListener("TabSelect", this);
     this.rotatebutton.removeEventListener("command", this.bound_rotate, true);
     this.screenshotbutton.removeEventListener("command", this.bound_screenshot, true);
     this.touchbutton.removeEventListener("command", this.bound_touch, true);
     this.closebutton.removeEventListener("command", this.bound_close, true);
@@ -309,31 +306,16 @@ ResponsiveUI.prototype = {
     if (this.touchEventHandler)
       this.touchEventHandler.stop();
     this._telemetry.toolClosed("responsive");
     // E10S: We should be using target here. See bug 1028234
     ResponsiveUIManager.emit("off", { tab: this.tab });
   },
 
   /**
-   * Handle keypressed.
-   *
-   * @param aEvent
-   */
-  onKeypress: function RUI_onKeypress(aEvent) {
-    if (aEvent.keyCode == this.mainWindow.KeyEvent.DOM_VK_ESCAPE &&
-        this.mainWindow.gBrowser.selectedBrowser == this.browser) {
-
-      aEvent.preventDefault();
-      aEvent.stopPropagation();
-      this.close();
-    }
-  },
-
-  /**
    * Handle events
    */
   handleEvent: function (aEvent) {
     switch (aEvent.type) {
       case "TabClose":
         this.close();
         break;
       case "TabSelect":
diff --git a/browser/devtools/responsivedesign/test/browser_responsiveruleview.js b/browser/devtools/responsivedesign/test/browser_responsiveruleview.js
--- a/browser/devtools/responsivedesign/test/browser_responsiveruleview.js
+++ b/browser/devtools/responsivedesign/test/browser_responsiveruleview.js
@@ -74,32 +74,35 @@ function test() {
 
     instance.setSize(100, 100);
   }
 
   function testGrow() {
     ruleView.element.addEventListener("CssRuleViewRefreshed", function refresh() {
       ruleView.element.removeEventListener("CssRuleViewRefreshed", refresh, false);
       is(numberOfRules(), 2, "Should have two rules after growing.");
-      testEscapeCloses();
+      testEscapeOpensSplitConsole();
     }, false);
 
     instance.setSize(500, 500);
   }
 
-  function testEscapeCloses() {
+  function testEscapeOpensSplitConsole() {
     is(document.getElementById("Tools:ResponsiveUI").getAttribute("checked"), "true", "menu checked");
     ok(!inspector._toolbox._splitConsole, "Console is not split.");
 
-    mgr.once("off", function() {executeSoon(finishUp)});
+    inspector._toolbox.once("split-console", function() {
+      mgr.once("off", function() {executeSoon(finishUp)});
+      mgr.toggle(window, gBrowser.selectedTab);
+    });
     EventUtils.synthesizeKey("VK_ESCAPE", {});
   }
 
   function finishUp() {
-    ok(!inspector._toolbox._splitConsole, "Console is still not split after pressing escape.");
+    ok(inspector._toolbox._splitConsole, "Console is split after pressing escape.");
 
     // Menus are correctly updated?
     is(document.getElementById("Tools:ResponsiveUI").getAttribute("checked"), "false", "menu unchecked");
 
     gBrowser.removeCurrentTab();
     finish();
   }
 }
diff --git a/browser/devtools/responsivedesign/test/browser_responsiveui.js b/browser/devtools/responsivedesign/test/browser_responsiveui.js
--- a/browser/devtools/responsivedesign/test/browser_responsiveui.js
+++ b/browser/devtools/responsivedesign/test/browser_responsiveui.js
@@ -244,17 +244,17 @@ function test() {
     heightBeforeClose = content.innerHeight;
 
     info("XXX BUG 851296: instance.closing: " + !!instance.closing);
 
     mgr.once("off", function() {
       info("XXX BUG 851296: 'off' received.");
       executeSoon(restart);
     });
-    EventUtils.synthesizeKey("VK_ESCAPE", {});
+    mgr.toggle(window, gBrowser.selectedTab);
   }
 
   function restart() {
     info("XXX BUG 851296: restarting.");
     info("XXX BUG 851296: __responsiveUI: " + gBrowser.selectedTab.__responsiveUI);
     mgr.once("on", function() {
       info("XXX BUG 851296: 'on' received.");
       executeSoon(onUIOpen2);
@@ -271,17 +271,17 @@ function test() {
 
     // Menus are correctly updated?
     is(document.getElementById("Tools:ResponsiveUI").getAttribute("checked"), "true", "menus checked");
 
     is(content.innerWidth, widthBeforeClose, "width restored.");
     is(content.innerHeight, heightBeforeClose, "height restored.");
 
     mgr.once("off", function() {executeSoon(testScreenshot)});
-    EventUtils.synthesizeKey("VK_ESCAPE", {});
+    mgr.toggle(window, gBrowser.selectedTab);
   }
 
   function testScreenshot() {
     let isWinXP = navigator.userAgent.indexOf("Windows NT 5.1") != -1;
     if (isWinXP) {
       // We have issues testing this on Windows XP.
       // See https://bugzilla.mozilla.org/show_bug.cgi?id=848760#c17
       return finishUp();
