# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  4201305112ff9a3efd9b8bfc48ac6802b885b663
Bug 1175239 - Replace tracking protection drop-down control with a button;r=MattN

diff --git a/browser/base/content/test/general/browser.ini b/browser/base/content/test/general/browser.ini
--- a/browser/base/content/test/general/browser.ini
+++ b/browser/base/content/test/general/browser.ini
@@ -423,16 +423,20 @@ run-if = e10s
 [browser_trackingUI_1.js]
 support-files =
   trackingPage.html
   benignPage.html
 [browser_trackingUI_2.js]
 support-files =
   trackingPage.html
   benignPage.html
+[browser_trackingUI_3.js]
+support-files =
+  trackingPage.html
+  benignPage.html
 [browser_typeAheadFind.js]
 skip-if = buildapp == 'mulet'
 [browser_unknownContentType_title.js]
 [browser_unloaddialogs.js]
 skip-if = e10s # Bug 1100700 - test relies on unload event firing on closed tabs, which it doesn't
 [browser_urlHighlight.js]
 [browser_urlbarAutoFillTrimURLs.js]
 [browser_urlbarCopying.js]
diff --git a/browser/base/content/test/general/browser_trackingUI_1.js b/browser/base/content/test/general/browser_trackingUI_1.js
--- a/browser/base/content/test/general/browser_trackingUI_1.js
+++ b/browser/base/content/test/general/browser_trackingUI_1.js
@@ -23,79 +23,88 @@ registerCleanupFunction(function() {
 function hidden(sel) {
   let win = gBrowser.ownerGlobal;
   let el = win.document.querySelector(sel);
   let display = win.getComputedStyle(el).getPropertyValue("display", null);
   return display === "none";
 }
 
 function testBenignPage() {
+  info("Non-tracking content must not be blocked");
   ok (!TrackingProtection.content.hasAttribute("block-disabled"), "blocking not disabled");
   ok (!TrackingProtection.content.hasAttribute("block-active"), "blocking is not active");
 
   // Make sure that the no tracking elements message appears
   ok (!hidden("#tracking-not-detected"), "labelNoTracking is visible");
   ok (hidden("#tracking-loaded"), "labelTrackingLoaded is hidden");
   ok (hidden("#tracking-blocked"), "labelTrackingBlocked is hidden");
+
+  // Check button visibility
+  ok (hidden("#tracking-action-block"), "blockButton is hidden");
+  ok (hidden("#tracking-action-unblock"), "unblockButton is hidden");
 }
 
 function testTrackingPage() {
+  info("Tracking content must be blocked");
   ok (!TrackingProtection.content.hasAttribute("block-disabled"), "blocking not disabled");
   ok (TrackingProtection.content.hasAttribute("block-active"), "blocking is active");
 
   // Make sure that the blocked tracking elements message appears
   ok (hidden("#tracking-not-detected"), "labelNoTracking is hidden");
   ok (hidden("#tracking-loaded"), "labelTrackingLoaded is hidden");
   ok (!hidden("#tracking-blocked"), "labelTrackingBlocked is visible");
+
+  // Check button visibility
+  ok (hidden("#tracking-action-block"), "blockButton is hidden");
+  ok (!hidden("#tracking-action-unblock"), "unblockButton is visible");
 }
 
 function testTrackingPageWhitelisted() {
+  info("Tracking content must be white-listed and not blocked");
   ok (TrackingProtection.content.hasAttribute("block-disabled"), "blocking is disabled");
   ok (!TrackingProtection.content.hasAttribute("block-active"), "blocking is not active");
 
   // Make sure that the blocked tracking elements message appears
   ok (hidden("#tracking-not-detected"), "labelNoTracking is hidden");
   ok (!hidden("#tracking-loaded"), "labelTrackingLoaded is visible");
   ok (hidden("#tracking-blocked"), "labelTrackingBlocked is hidden");
+
+  // Check button visibility
+  ok (!hidden("#tracking-action-block"), "blockButton is visible");
+  ok (hidden("#tracking-action-unblock"), "unblockButton is hidden");
 }
 
 add_task(function* () {
+
   yield updateTrackingProtectionDatabase();
 
   let tab = gBrowser.selectedTab = gBrowser.addTab();
 
   TrackingProtection = gBrowser.ownerGlobal.TrackingProtection;
   ok (TrackingProtection, "Functionality is attached to the browser window");
   is (TrackingProtection.enabled, Services.prefs.getBoolPref(PREF),
-    "The initial enabled value is based on the default pref value");
+    "TP.enabled is based on the original pref value");
 
-  info("Enable Tracking Protection");
   Services.prefs.setBoolPref(PREF, true);
-  ok (TrackingProtection.enabled, "Functionality is enabled after setting the pref");
+  ok (TrackingProtection.enabled, "TP is enabled after setting the pref");
 
-  info("Point tab to a test page NOT containing tracking elements");
+  info("Load a test page not containing tracking elements");
   yield promiseTabLoadEvent(tab, BENIGN_PAGE);
   testBenignPage();
 
-  info("Point tab to a test page containing tracking elements");
+  info("Load a test page containing tracking elements");
   yield promiseTabLoadEvent(tab, TRACKING_PAGE);
-
-  info("Tracking content must be blocked");
   testTrackingPage();
 
-  info("Disable Tracking Content Protection for the page (which reloads the page)");
+  info("Disable TP for the page (which reloads the page)");
   TrackingProtection.disableForCurrentPage();
 
-  info("Wait for tab to reload following tracking-protection page white-listing");
+  info("Wait for tab to reload following TP white-listing");
   yield promiseTabLoadEvent(tab);
-
-  info("Tracking content must be white-listed (NOT blocked)");
   testTrackingPageWhitelisted();
 
-  info("Re-enable Tracking Content Protection for the page (which reloads the page)");
+  info("Re-enable TP for the page (which reloads the page)");
   TrackingProtection.enableForCurrentPage();
 
-  info("Wait for tab to reload following tracking-protection page white-listing");
+  info("Wait for tab to reload following TP black-listing");
   yield promiseTabLoadEvent(tab);
-
-  info("Tracking content must be blocked");
   testTrackingPage();
 });
diff --git a/browser/base/content/test/general/browser_trackingUI_2.js b/browser/base/content/test/general/browser_trackingUI_2.js
--- a/browser/base/content/test/general/browser_trackingUI_2.js
+++ b/browser/base/content/test/general/browser_trackingUI_2.js
@@ -12,38 +12,37 @@ let TRACKING_PAGE = "http://tracking.exa
 let TrackingProtection = null;
 
 registerCleanupFunction(function() {
   TrackingProtection = null;
   Services.prefs.clearUserPref(PREF);
   gBrowser.removeCurrentTab();
 });
 
-function testTrackingPageOFF() {
+function testTrackingPageOff() {
   ok (TrackingProtection.container.hidden, "The container is hidden");
 }
 
-function testBenignPageOFF() {
+function testBenignPageOff() {
   ok (TrackingProtection.container.hidden, "The container is hidden");
 }
 
 add_task(function* () {
   yield updateTrackingProtectionDatabase();
 
   let tab = gBrowser.selectedTab = gBrowser.addTab();
 
   TrackingProtection = gBrowser.ownerGlobal.TrackingProtection;
-  ok (TrackingProtection, "Functionality is attached to the browser window");
+  ok (TrackingProtection, "TP is attached to the browser window");
   is (TrackingProtection.enabled, Services.prefs.getBoolPref(PREF),
-    "The initial enabled value is based on the default pref value");
+    "TP.enabled is based on the original pref value");
 
-  info ("Disable Tracking Protection");
   Services.prefs.setBoolPref(PREF, false);
-  ok (!TrackingProtection.enabled, "Functionality is disabled after setting the pref");
+  ok (!TrackingProtection.enabled, "TP is disabled after setting the pref");
 
-  info ("Point tab to a test page containing tracking elements");
+  info("Load a test page containing tracking elements");
   yield promiseTabLoadEvent(tab, TRACKING_PAGE);
-  testTrackingPageOFF();
+  testTrackingPageOff();
 
-  info ("Point tab to a test page NOT containing tracking elements");
+  info("Load a test page not containing tracking elements");
   yield promiseTabLoadEvent(tab, BENIGN_PAGE);
-  testBenignPageOFF();
+  testBenignPageOff();
 });
diff --git a/browser/base/content/test/general/browser_trackingUI_3.js b/browser/base/content/test/general/browser_trackingUI_3.js
new file mode 100644
--- /dev/null
+++ b/browser/base/content/test/general/browser_trackingUI_3.js
@@ -0,0 +1,66 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+// Test that the tracking protection buttons for enabling / disabling
+// for a page work correctly.
+
+let PREF = "privacy.trackingprotection.enabled";
+let BENIGN_PAGE = "http://tracking.example.org/browser/browser/base/content/test/general/benignPage.html";
+let TRACKING_PAGE = "http://tracking.example.org/browser/browser/base/content/test/general/trackingPage.html";
+let TrackingProtection = null;
+
+registerCleanupFunction(function() {
+  TrackingProtection = null;
+  Services.prefs.clearUserPref(PREF);
+  gBrowser.removeCurrentTab();
+});
+
+function clickButton(sel) {
+  let win = gBrowser.ownerGlobal;
+  let evt = new win.Event("command");
+  let el = win.document.querySelector(sel);
+  el.dispatchEvent(evt);
+}
+
+function testTrackingPageWhitelisted() {
+  ok (TrackingProtection.content.hasAttribute("block-disabled"), "blocking is disabled");
+  ok (!TrackingProtection.content.hasAttribute("block-active"), "blocking is not active");
+}
+
+function testTrackingPage() {
+  ok (!TrackingProtection.content.hasAttribute("block-disabled"), "blocking not disabled");
+  ok (TrackingProtection.content.hasAttribute("block-active"), "blocking is active");
+}
+
+add_task(function* () {
+  yield updateTrackingProtectionDatabase();
+
+  let tab = gBrowser.selectedTab = gBrowser.addTab();
+
+  TrackingProtection = gBrowser.ownerGlobal.TrackingProtection;
+  ok (TrackingProtection, "Functionality is attached to the browser window");
+  is (TrackingProtection.enabled, Services.prefs.getBoolPref(PREF),
+    "TP.enabled is based on the original pref value");
+
+  Services.prefs.setBoolPref(PREF, true);
+  ok (TrackingProtection.enabled, "TP is enabled after setting the pref");
+
+  info("Load a test page containing tracking elements");
+  yield promiseTabLoadEvent(tab, TRACKING_PAGE);
+  testTrackingPage();
+
+  info("Disable TP for the page (which reloads the page)");
+  clickButton("#tracking-action-unblock");
+
+  info("Wait for tab to reload following TP white-listing");
+  yield promiseTabLoadEvent(tab);
+  testTrackingPageWhitelisted();
+
+  info("Re-enable TP for the page (which reloads the page)");
+  clickButton("#tracking-action-block");
+
+  info("Wait for tab to reload following TP black-listing");
+  yield promiseTabLoadEvent(tab);
+  testTrackingPage();
+});
diff --git a/browser/components/controlcenter/content/panel.inc.xul b/browser/components/controlcenter/content/panel.inc.xul
--- a/browser/components/controlcenter/content/panel.inc.xul
+++ b/browser/components/controlcenter/content/panel.inc.xul
@@ -48,32 +48,28 @@
                  crop="end">&trackingProtection.detectedBlocked;</label>
           <label id="tracking-loaded"
                  class="identity-popup-text"
                  crop="end">&trackingProtection.detectedNotBlocked;</label>
           <label id="tracking-not-detected"
                  class="identity-popup-text"
                  crop="end">&trackingProtection.notDetected;</label>
 
-          <button id="tracking-actions"
-            type="menu" label="&trackingContentBlocked.options;"
-            sizetopopup="none">
-            <menupopup>
-              <menuitem
-                id="tracking-action-unblock"
-                label="&trackingProtection.unblock.label;"
-                accesskey="&trackingProtection.unblock.accesskey;"
-                oncommand="TrackingProtection.disableForCurrentPage();"/>
-              <menuitem
-                id="tracking-action-block"
-                label="&trackingProtection.block.label;"
-                accesskey="&trackingProtection.block.accesskey;"
-                oncommand="TrackingProtection.enableForCurrentPage();"/>
-            </menupopup>
-          </button>
+          <button
+            label="&trackingProtection.unblock.label;"
+            class="identity-popup-button"
+            accesskey="&trackingProtection.unblock.accesskey;"
+            id="tracking-action-unblock"
+            oncommand="TrackingProtection.disableForCurrentPage();" />
+          <button
+            label="&trackingProtection.block.label;"
+            class="identity-popup-button"
+            accesskey="&trackingProtection.block.accesskey;"
+            id="tracking-action-block"
+            oncommand="TrackingProtection.enableForCurrentPage();" />
         </vbox>
       </hbox>
 
       <!-- Permissions Section -->
       <hbox id="identity-popup-permissions" class="identity-popup-section">
         <vbox id="identity-popup-permissions-content" flex="1">
           <label class="identity-popup-text identity-popup-headline"
                  value="&identity.permissions;"/>
diff --git a/browser/themes/shared/controlcenter/panel.inc.css b/browser/themes/shared/controlcenter/panel.inc.css
--- a/browser/themes/shared/controlcenter/panel.inc.css
+++ b/browser/themes/shared/controlcenter/panel.inc.css
@@ -67,16 +67,53 @@
 
 #identity-popup-securityView:-moz-locale-dir(rtl),
 #identity-popup-security-content:-moz-locale-dir(rtl),
 #identity-popup-permissions-content:-moz-locale-dir(rtl),
 #tracking-protection-content:-moz-locale-dir(rtl) {
   background-position: calc(100% - 1em) 1em;
 }
 
+/* IN-CONTENT-PREF STYLE BUTTONS */
+#identity-popup {
+  --button-text-color: #333;
+  --button-background: #fbfbfb;
+  --button-border-color: #c1c1c1;
+  --button-background-hover: #ebebeb;
+  --button-background-active: #dadada;
+}
+
+.identity-popup-button {
+  -moz-appearance: none;
+  margin: 5px 0;
+  height: 30px;
+  color: var(--button-text-color);
+  line-height: 20px;
+  border: 1px solid var(--button-border-color);
+  -moz-border-top-colors: none !important;
+  -moz-border-right-colors: none !important;
+  -moz-border-bottom-colors: none !important;
+  -moz-border-left-colors: none !important;
+  border-radius: 2px;
+  background-color: var(--button-background);
+}
+
+.identity-popup-button:not([disabled="true"]):hover {
+  background-color: var(--button-background-hover);
+}
+
+.identity-popup-button:not([disabled="true"]):hover:active {
+  background-color: var(--button-background-active);
+}
+
+.identity-popup-button[disabled="true"] {
+  cursor: not-allowed;
+  opacity: 0.5;
+}
+
 /* EXPAND BUTTON */
 
 .identity-popup-expander {
   margin: 0;
   padding: 4px 0;
   min-width: auto;
   width: 38px;
   border: 0 none;
@@ -206,30 +243,32 @@
 #tracking-protection-content {
   background-image: url("chrome://browser/skin/controlcenter/tracking-protection.svg");
 }
 
 #tracking-protection-content[block-disabled]  {
   background-image: url("chrome://browser/skin/controlcenter/tracking-protection-disabled.svg");
 }
 
-#tracking-actions {
+#tracking-action-block,
+#tracking-action-unblock {
   margin: 1em 0 0;
 }
 
 #tracking-protection-content[block-active] > #tracking-not-detected,
 #tracking-protection-content[block-disabled] > #tracking-not-detected,
 #tracking-protection-content:not([block-active]) > #tracking-blocked,
 #tracking-protection-content:not([block-active]) #tracking-action-unblock,
 #tracking-protection-content:not([block-disabled]) > #tracking-loaded,
 #tracking-protection-content:not([block-disabled]) #tracking-action-block,
 #tracking-protection-content:not([block-active]):not([block-disabled]) > #tracking-actions {
   display: none;
 }
 
+
 /* PERMISSIONS */
 
 #identity-popup-permissions-content {
   background-image: url(chrome://browser/skin/controlcenter/permissions.svg);
 }
 
 #identity-popup-permission-list {
   margin-top: 5px;
