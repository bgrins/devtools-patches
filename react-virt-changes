# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  aba5eefa58ac70d29650285af74c8cff3c24d517
test changes for react virtualized

diff --git a/devtools/client/webconsole/new-console-output/components/console-output.js b/devtools/client/webconsole/new-console-output/components/console-output.js
--- a/devtools/client/webconsole/new-console-output/components/console-output.js
+++ b/devtools/client/webconsole/new-console-output/components/console-output.js
@@ -11,16 +11,17 @@ const {
   PropTypes
 } = require("devtools/client/shared/vendor/react");
 const { findDOMNode } = require("devtools/client/shared/vendor/react-dom");
 
 const {
   defaultCellRangeRenderer,
   AutoSizer,
   Grid,
+  CellMeasurer,
 } = require("devtools/client/shared/vendor/react-virtualized");
 const { connect } = require("devtools/client/shared/vendor/react-redux");
 
 const {
   getAllMessages,
   getAllMessagesUiById,
   getAllMessagesTableDataById,
   getAllGroupsById,
@@ -163,16 +164,67 @@ const ConsoleOutput = createClass({
   },
 
   _renderGrid() {
     const { lastForceScrollMessageIndex, messages } = this.props;
     const keyboardPagerProps = {
       allowKeyboardPaging: this._allowKeyboardPaging,
       list: messages,
     };
+
+    return createElement(CellMeasurer, {
+      cellRenderer: this._renderRow,
+      columnCount: 1,
+      rowCount: messages.size,
+      width: 800,
+    }, ({ getRowHeight }) => {
+
+      let gridProps = {
+        // cellRangeRenderer: this._renderCellRange,
+        columnCount: 1,
+        // If the widest row is wider than the container, use that. Otherwise,
+        // use the container's width.
+        columnWidth: 800,
+        height: 150,
+        overscanRowCount: 5,
+        cellRenderer: this._renderRow,
+        rowCount: messages.size,
+        rowHeight: getRowHeight,
+        width: 800,
+        ref: ref => {
+          this.grid = ref;
+        },
+        // onSectionRendered,
+        // onScroll,
+        // Grid has a shouldComponentUpdate which does a shallow compare. We want to
+        // update whenever there is a change in the message UI state, or when table data
+        // comes in. Even though the grid doesn't use these props, we pass them in to
+        // trigger a rerender if they have changed.
+        //
+        // @TODO consider making MessageContainer a connected component which pulls
+        // these properties in directly. This could have an unpredictable effect on
+        // performance, so be sure to test.
+        // uiUpdate: this.props.messagesUi,
+        // tableUpdate: this.props.messagesTableData,
+      };
+      return createElement(Grid, gridProps);
+
+      // return createElement(Grid, {
+      //     columnCount: 1,
+      //     columnWidth: 100,
+      //     height: 150,
+      //     overscanColumnCount: 0,
+      //     overscanRowCount: 0,
+      //     cellRenderer: this._renderRow,
+      //     rowCount: 100,
+      //     rowHeight: getRowHeight,
+      //     width: 100,
+      // });
+    });
+
     return createElement(KeyboardPager,
       keyboardPagerProps,
       ({
         onSectionRendered,
         scrollToRow: parentScrollToRow,
         scrollToAlignment: parentScrollToAlignment
       }) => {
         const scrollPositionManagerProps = {
