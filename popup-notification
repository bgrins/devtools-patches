# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  d0a6668cf2fe907399cff20030b7b8218d56f005
Bug 1487065 - Implement popup-notification as a Custom Element

diff --git a/toolkit/content/customElements.js b/toolkit/content/customElements.js
--- a/toolkit/content/customElements.js
+++ b/toolkit/content/customElements.js
@@ -72,17 +72,20 @@ const MozElementMixin = Base => class Mo
     }
 
     if (attrNewName === "text") {
       child.textContent =
         this.hasAttribute(attrName) ? this.getAttribute(attrName) : "";
     } else if (this.hasAttribute(attrName)) {
       child.setAttribute(attrNewName, this.getAttribute(attrName));
     } else {
-      child.removeAttribute(attrNewName);
+      // XXX: We don't want to empty out the existing 'class' if iconclass wasn't passed in.
+      // How does XBL handle this? Does it never empty it out, or only do it if it was originally
+      // set by the host, or what?
+      // child.removeAttribute(attrNewName);
     }
   }
 
   /**
    * Sometimes an element may not want to run connectedCallback logic during
    * parse. This could be because we don't want to initialize the element before
    * the element's contents have been fully parsed, or for performance reasons.
    * If you'd like to opt-in to this, then add this to the beginning of your
@@ -296,16 +299,17 @@ customElements.setElementCreationCallbac
 
 // For now, don't load any elements in the extension dummy document.
 // We will want to load <browser> when that's migrated (bug 1441935).
 const isDummyDocument = document.documentURI == "chrome://extensions/content/dummy.xul";
 if (!isDummyDocument) {
   for (let script of [
     "chrome://global/content/elements/general.js",
     "chrome://global/content/elements/notificationbox.js",
+    "chrome://global/content/elements/popupnotification.js",
     "chrome://global/content/elements/radio.js",
     "chrome://global/content/elements/textbox.js",
     "chrome://global/content/elements/tabbox.js",
     "chrome://global/content/elements/tree.js",
   ]) {
     Services.scriptloader.loadSubScript(script, window);
   }
 
diff --git a/toolkit/content/jar.mn b/toolkit/content/jar.mn
--- a/toolkit/content/jar.mn
+++ b/toolkit/content/jar.mn
@@ -95,16 +95,17 @@ toolkit.jar:
    content/global/elements/editor.js           (widgets/editor.js)
    content/global/elements/general.js          (widgets/general.js)
    content/global/elements/notificationbox.js  (widgets/notificationbox.js)
    content/global/elements/pluginProblem.js    (widgets/pluginProblem.js)
    content/global/elements/radio.js            (widgets/radio.js)
    content/global/elements/richlistbox.js      (widgets/richlistbox.js)
    content/global/elements/marquee.css         (widgets/marquee.css)
    content/global/elements/marquee.js          (widgets/marquee.js)
+   content/global/elements/popupnotification.js  (widgets/popupnotification.js)
    content/global/elements/stringbundle.js     (widgets/stringbundle.js)
    content/global/elements/tabbox.js           (widgets/tabbox.js)
    content/global/elements/textbox.js          (widgets/textbox.js)
    content/global/elements/videocontrols.js    (widgets/videocontrols.js)
    content/global/elements/tree.js             (widgets/tree.js)
 #ifdef XP_MACOSX
    content/global/macWindowMenu.js
 #endif
diff --git a/toolkit/content/widgets/notification.xml b/toolkit/content/widgets/popupnotification.js
copy from toolkit/content/widgets/notification.xml
copy to toolkit/content/widgets/popupnotification.js
--- a/toolkit/content/widgets/notification.xml
+++ b/toolkit/content/widgets/popupnotification.js
@@ -1,103 +1,154 @@
-<?xml version="1.0"?>
-<!-- This Source Code Form is subject to the terms of the Mozilla Public
-   - License, v. 2.0. If a copy of the MPL was not distributed with this
-   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
+/* This Source Code Form is subject to the terms of the Mozilla Public
+  * License, v. 2.0. If a copy of the MPL was not distributed with this
+  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
 
+// This is loaded into all XUL windows. Wrap in a block to prevent
+// leaking to window scope.
+{
+
+class MozPopupNotification extends MozXULElement {
 
-<!DOCTYPE bindings [
-<!ENTITY % notificationDTD SYSTEM "chrome://global/locale/notification.dtd">
-%notificationDTD;
-]>
+  static get observedAttributes() {
+    return [
+      "buttonaccesskey",
+      "buttoncommand",
+      "buttonhighlight",
+      "buttonlabel",
+      "checkboxchecked",
+      "checkboxcommand",
+      "checkboxhidden",
+      "checkboxlabel",
+      "closebuttoncommand",
+      "closebuttonhidden",
+      "dropmarkerhidden",
+      "dropmarkerpopupshown",
+      "endlabel",
+      "icon",
+      "iconclass",
+      "label",
+      "learnmoreclick",
+      "learnmoreurl",
+      "mainactiondisabled",
+      "menucommand",
+      "name",
+      "origin",
+      "origin",
+      "popupid",
+      "secondarybuttonaccesskey",
+      "secondarybuttoncommand",
+      "secondarybuttonhidden",
+      "secondarybuttonlabel",
+      "secondendlabel",
+      "secondname",
+      "warninghidden",
+      "warninglabel",
+    ];
+  }
 
-<bindings id="notificationBindings"
-          xmlns="http://www.mozilla.org/xbl"
-          xmlns:xbl="http://www.mozilla.org/xbl"
-          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
-          xmlns:html = "http://www.w3.org/1999/xhtml">
+  attributeChangedCallback(o, v, n) {
+    if (!this._hasSlotted) {
+      return;
+    }
+
+    this.inheritAttributes();
+  }
+
+  inheritAttributes() {
+    for (let el of this.querySelectorAll("[inherits]")) {
+      for (let attr of el.getAttribute("inherits").split(",")) {
+        this.inheritAttribute(el, attr);
+      }
+    }
+  }
+
+  slotContents() {
+    if (this._hasSlotted) {
+      return;
+    }
 
-  <binding id="popup-notification">
-    <content orient="vertical">
-      <xul:hbox class="popup-notification-header-container">
-        <children includes="popupnotificationheader"/>
-      </xul:hbox>
-      <xul:hbox align="start" class="popup-notification-body-container">
-        <xul:image class="popup-notification-icon"
-                   xbl:inherits="popupid,src=icon,class=iconclass"/>
-        <xul:vbox flex="1" pack="start"
-                  class="popup-notification-body" xbl:inherits="popupid">
-          <xul:hbox align="start">
-            <xul:vbox flex="1">
-              <xul:label class="popup-notification-origin header"
-                         xbl:inherits="value=origin,tooltiptext=origin"
-                         crop="center"/>
-              <!-- These need to be on the same line to avoid creating
-                   whitespace between them (whitespace is added in the
-                   localization file, if necessary). -->
-              <xul:description class="popup-notification-description" xbl:inherits="popupid"><html:span
-                xbl:inherits="xbl:text=label,popupid"/><html:b xbl:inherits="xbl:text=name,popupid"/><html:span
-              xbl:inherits="xbl:text=endlabel,popupid"/><html:b xbl:inherits="xbl:text=secondname,popupid"/><html:span
-              xbl:inherits="xbl:text=secondendlabel,popupid"/></xul:description>
-            </xul:vbox>
-            <xul:toolbarbutton anonid="closebutton"
-                               class="messageCloseButton close-icon popup-notification-closebutton tabbable"
-                               xbl:inherits="oncommand=closebuttoncommand,hidden=closebuttonhidden"
-                               tooltiptext="&closeNotification.tooltip;"/>
-          </xul:hbox>
-          <children includes="popupnotificationcontent"/>
-          <xul:label class="text-link popup-notification-learnmore-link"
-                     xbl:inherits="onclick=learnmoreclick,href=learnmoreurl">&learnMore;</xul:label>
-          <xul:checkbox anonid="checkbox"
-                        xbl:inherits="hidden=checkboxhidden,checked=checkboxchecked,label=checkboxlabel,oncommand=checkboxcommand" />
-          <xul:description class="popup-notification-warning" xbl:inherits="hidden=warninghidden,xbl:text=warninglabel"/>
-        </xul:vbox>
-      </xul:hbox>
-      <xul:hbox class="popup-notification-footer-container">
-        <children includes="popupnotificationfooter"/>
-      </xul:hbox>
-      <xul:hbox class="popup-notification-button-container panel-footer">
-        <children includes="button"/>
-        <xul:button anonid="secondarybutton"
-                    class="popup-notification-button popup-notification-secondary-button"
-                    xbl:inherits="oncommand=secondarybuttoncommand,label=secondarybuttonlabel,accesskey=secondarybuttonaccesskey,hidden=secondarybuttonhidden"/>
-        <xul:toolbarseparator xbl:inherits="hidden=dropmarkerhidden"/>
-        <xul:button anonid="menubutton"
-                    type="menu"
-                    class="popup-notification-button popup-notification-dropmarker"
-                    aria-label="&moreActionsButton.accessibleLabel;"
-                    xbl:inherits="onpopupshown=dropmarkerpopupshown,hidden=dropmarkerhidden">
-          <xul:menupopup anonid="menupopup"
-                         position="after_end"
-                         aria-label="&moreActionsButton.accessibleLabel;"
-                         xbl:inherits="oncommand=menucommand">
-            <children/>
-          </xul:menupopup>
-        </xul:button>
-        <xul:button anonid="button"
-                    class="popup-notification-button popup-notification-primary-button"
-                    label="&defaultButton.label;"
-                    accesskey="&defaultButton.accesskey;"
-                    xbl:inherits="oncommand=buttoncommand,label=buttonlabel,accesskey=buttonaccesskey,default=buttonhighlight,disabled=mainactiondisabled"/>
-      </xul:hbox>
-    </content>
-    <implementation>
-      <field name="checkbox" readonly="true">
-        document.getAnonymousElementByAttribute(this, "anonid", "checkbox");
-      </field>
-      <field name="closebutton" readonly="true">
-        document.getAnonymousElementByAttribute(this, "anonid", "closebutton");
-      </field>
-      <field name="button" readonly="true">
-        document.getAnonymousElementByAttribute(this, "anonid", "button");
-      </field>
-      <field name="secondaryButton" readonly="true">
-        document.getAnonymousElementByAttribute(this, "anonid", "secondarybutton");
-      </field>
-      <field name="menubutton" readonly="true">
-        document.getAnonymousElementByAttribute(this, "anonid", "menubutton");
-      </field>
-      <field name="menupopup" readonly="true">
-        document.getAnonymousElementByAttribute(this, "anonid", "menupopup");
-      </field>
-    </implementation>
-  </binding>
-</bindings>
+    this._hasSlotted = true;
+    let popupnotificationheader = this.querySelector("popupnotificationheader");
+    let popupnotificationcontent = this.querySelector("popupnotificationcontent");
+    let popupnotificationfooter = this.querySelector("popupnotificationfooter");
+    let button = this.querySelector("button");
+    this.appendChild(MozXULElement.parseXULToFragment(`
+      <hbox class="popup-notification-header-container">
+        <children includes="popupnotificationheader"></children>
+      </hbox>
+      <hbox align="start" class="popup-notification-body-container">
+        <image class="popup-notification-icon"
+               inherits="popupid,src=icon,class=iconclass"/>
+        <vbox flex="1" pack="start" class="popup-notification-body">
+          <hbox align="start">
+            <vbox flex="1">
+              <label class="popup-notification-origin header" inherits="value=origin,tooltiptext=origin" crop="center"></label>
+              <description class="popup-notification-description" inherits="popupid">
+                <html:span inherits="text=label,popupid"></html:span>
+                <html:b inherits="text=name,popupid"></html:b>
+                <html:span inherits="text=endlabel,popupid"></html:span>
+                <html:b inherits="text=secondname,popupid"></html:b>
+                <html:span inherits="text=secondendlabel,popupid"></html:span>
+              </description>
+            </vbox>
+            <toolbarbutton anonid="closebutton" class="messageCloseButton close-icon popup-notification-closebutton tabbable" inherits="oncommand=closebuttoncommand,hidden=closebuttonhidden" tooltiptext="&closeNotification.tooltip;"></toolbarbutton>
+          </hbox>
+          <children includes="popupnotificationcontent"></children>
+          <label class="text-link popup-notification-learnmore-link" inherits="onclick=learnmoreclick,href=learnmoreurl"></label>
+          <checkbox anonid="checkbox" inherits="hidden=checkboxhidden,checked=checkboxchecked,label=checkboxlabel,oncommand=checkboxcommand"></checkbox>
+          <description class="popup-notification-warning" inherits="hidden=warninghidden,text=warninglabel"></description>
+        </vbox>
+      </hbox>
+      <hbox class="popup-notification-footer-container">
+        <children includes="popupnotificationfooter"></children>
+      </hbox>
+      <hbox class="popup-notification-button-container panel-footer">
+        <children includes="button"></children>
+        <button anonid="secondarybutton" class="popup-notification-button popup-notification-secondary-button" inherits="oncommand=secondarybuttoncommand,label=secondarybuttonlabel,accesskey=secondarybuttonaccesskey,hidden=secondarybuttonhidden"></button>
+        <toolbarseparator inherits="hidden=dropmarkerhidden"></toolbarseparator>
+        <button anonid="menubutton" type="menu" class="popup-notification-button popup-notification-dropmarker" aria-label="&moreActionsButton.accessibleLabel;" inherits="onpopupshown=dropmarkerpopupshown,hidden=dropmarkerhidden">
+          <menupopup anonid="menupopup" position="after_end" aria-label="&moreActionsButton.accessibleLabel;" inherits="oncommand=menucommand">
+            <children></children>
+          </menupopup>
+        </button>
+        <button anonid="button" class="popup-notification-button popup-notification-primary-button" label="&defaultButton.label;" accesskey="&defaultButton.accesskey;" inherits="oncommand=buttoncommand,label=buttonlabel,accesskey=buttonaccesskey,default=buttonhighlight,disabled=mainactiondisabled"></button>
+      </hbox>
+    `, ["chrome://global/locale/notification.dtd"]));
+
+    if (popupnotificationheader) {
+      this.querySelector("children[includes='popupnotificationheader']").replaceWith(popupnotificationheader);
+    }
+    if (popupnotificationcontent) {
+      this.querySelector("children[includes='popupnotificationcontent']").replaceWith(popupnotificationcontent);
+    }
+    if (popupnotificationfooter) {
+      this.querySelector("children[includes='popupnotificationfooter']").replaceWith(popupnotificationfooter);
+    }
+    if (button) {
+      this.querySelector("children[includes='button']").replaceWith(button);
+    }
+
+    this.checkbox = this.querySelector("[anonid=checkbox]");
+
+    this.closebutton = this.querySelector("[anonid=closebutton]");
+
+    this.button = this.querySelector("[anonid=button]");
+
+    this.secondaryButton = this.querySelector("[anonid=secondarybutton]");
+
+    this.menubutton = this.querySelector("[anonid=menubutton]");
+
+    this.menupopup = this.querySelector("[anonid=menupopup]");
+
+    this.inheritAttributes();
+  }
+
+  appendMenuItem(item) {
+    this.menupopup.append
+  }
+}
+
+customElements.define("popupnotification", MozPopupNotification);
+
+}
diff --git a/toolkit/content/xul.css b/toolkit/content/xul.css
--- a/toolkit/content/xul.css
+++ b/toolkit/content/xul.css
@@ -169,17 +169,17 @@ iframe {
   editor,
   iframe {
     display: block;
   }
 }
 
 /*********** popup notification ************/
 popupnotification {
-  -moz-binding: url("chrome://global/content/bindings/notification.xml#popup-notification");
+  -moz-box-orient: vertical;
 }
 
 .popup-notification-menubutton:not([label]) {
   display: none;
 }
 
 /********** checkbox **********/
 
diff --git a/toolkit/modules/PopupNotifications.jsm b/toolkit/modules/PopupNotifications.jsm
--- a/toolkit/modules/PopupNotifications.jsm
+++ b/toolkit/modules/PopupNotifications.jsm
@@ -47,26 +47,21 @@ function getAnchorFromBrowser(aBrowser, 
     if (ChromeUtils.getClassName(anchor) == "XULElement") {
       return anchor;
     }
     return aBrowser.ownerDocument.getElementById(anchor);
   }
   return null;
 }
 
+/**
+ * Given a DOM node inside a <popupnotification>, return the parent <popupnotification>.
+ */
 function getNotificationFromElement(aElement) {
-  // Need to find the associated notification object, which is a bit tricky
-  // since it isn't associated with the element directly - this is kind of
-  // gross and very dependent on the structure of the popupnotification
-  // binding's content.
-  let notificationEl;
-  let parent = aElement;
-  while (parent && (parent = aElement.ownerDocument.getBindingParent(parent)))
-    notificationEl = parent;
-  return notificationEl;
+  return aElement.closest("popupnotification");
 }
 
 /**
  * Notification object describes a single popup notification.
  *
  * @see PopupNotifications.show()
  */
 function Notification(id, message, anchorID, mainAction, secondaryActions,
@@ -741,22 +736,22 @@ PopupNotifications.prototype = {
       // If this notification was provided by the chrome document rather than
       // created ad hoc, move it back to where we got it from.
       let originalParent = gNotificationParents.get(popupnotification);
       if (originalParent) {
         popupnotification.notification = null;
 
         // Remove nodes dynamically added to the notification's menu button
         // in _refreshPanel.
-        let contentNode = popupnotification.lastElementChild;
+        let contentNode = popupnotification.menupopup.lastElementChild;
         while (contentNode) {
           let previousSibling = contentNode.previousElementSibling;
           if (contentNode.nodeName == "menuitem" ||
               contentNode.nodeName == "menuseparator")
-            popupnotification.removeChild(contentNode);
+            popupnotification.menupopup.removeChild(contentNode);
           contentNode = previousSibling;
         }
 
         // Re-hide the notification such that it isn't rendered in the chrome
         // document. _refreshPanel will unhide it again when needed.
         popupnotification.hidden = true;
 
         originalParent.appendChild(popupnotification);
@@ -885,16 +880,17 @@ PopupNotifications.prototype = {
         }
       } else
         popupnotification.removeAttribute("origin");
 
       if (n.options.hideClose)
         popupnotification.setAttribute("closebuttonhidden", "true");
 
       popupnotification.notification = n;
+      popupnotification.slotContents();
 
       if (n.mainAction && n.secondaryActions && n.secondaryActions.length > 0) {
         let telemetryStatId = TELEMETRY_STAT_ACTION_2;
 
         let secondaryAction = n.secondaryActions[0];
         popupnotification.setAttribute("secondarybuttonlabel", secondaryAction.label);
         popupnotification.setAttribute("secondarybuttonaccesskey", secondaryAction.accessKey);
         popupnotification.setAttribute("secondarybuttoncommand", "PopupNotifications._onButtonEvent(event, 'secondarybuttoncommand');");
@@ -902,17 +898,17 @@ PopupNotifications.prototype = {
         for (let i = 1; i < n.secondaryActions.length; i++) {
           let action = n.secondaryActions[i];
           let item = doc.createXULElement("menuitem");
           item.setAttribute("label", action.label);
           item.setAttribute("accesskey", action.accessKey);
           item.notification = n;
           item.action = action;
 
-          popupnotification.appendChild(item);
+          popupnotification.menupopup.appendChild(item);
 
           // We can only record a limited number of actions in telemetry. If
           // there are more, the latest are all recorded in the last bucket.
           item.action.telemetryStatId = telemetryStatId;
           if (telemetryStatId < TELEMETRY_STAT_ACTION_LAST) {
             telemetryStatId++;
           }
         }
@@ -1040,16 +1036,17 @@ PopupNotifications.prototype = {
         this.panel.setAttribute("noautohide", "true");
       } else {
         this.panel.removeAttribute("noautohide");
       }
 
       // On OS X and Linux we need a different panel arrow color for
       // click-to-play plugins, so copy the popupid and use css.
       this.panel.setAttribute("popupid", this.panel.firstElementChild.getAttribute("popupid"));
+
       notificationsToShow.forEach(function(n) {
         // Record that the notification was actually displayed on screen.
         // Notifications that were opened a second time or that were originally
         // shown with "options.dismissed" will be recorded in a separate bucket.
         n._recordTelemetryStat(TELEMETRY_STAT_OFFERED);
         // Remember the time the notification was shown for the security delay.
         n.timeShown = this.window.performance.now();
       }, this);
