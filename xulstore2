# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  2ce897a8c16168f74bbb0cdc7d1512b2ff55b30a
Bug XXX - Part 2 - Stop using document.persist

diff --git a/browser/base/content/browser-sidebar.js b/browser/base/content/browser-sidebar.js
--- a/browser/base/content/browser-sidebar.js
+++ b/browser/base/content/browser-sidebar.js
@@ -70,32 +70,32 @@ var SidebarUI = {
     this._inited = true;
   },
 
   uninit() {
     // If this is the last browser window, persist various values that should be
     // remembered for after a restart / reopening a browser window.
     let enumerator = Services.wm.getEnumerator("navigator:browser");
     if (!enumerator.hasMoreElements()) {
-      document.persist("sidebar-box", "sidebarcommand");
+      let xulStore = Services.xulStore;
+      xulStore.setValue(this._box, "sidebarcommand");
 
-      let xulStore = Services.xulStore;
       if (this._box.hasAttribute("positionend")) {
-        document.persist("sidebar-box", "positionend");
+        xulStore.persist(this._box, "positionend");
       } else {
         xulStore.removeValue(document.documentURI, "sidebar-box", "positionend");
       }
       if (this._box.hasAttribute("checked")) {
-        document.persist("sidebar-box", "checked");
+        xulStore.persist(this._box, "checked");
       } else {
         xulStore.removeValue(document.documentURI, "sidebar-box", "checked");
       }
 
-      document.persist("sidebar-box", "width");
-      document.persist("sidebar-title", "value");
+      xulStore.persist(this._box, "width");
+      xulStore.persist(this._title, "value");
     }
   },
 
   /**
    * Opens the switcher panel if it's closed, or closes it if it's open.
    */
   toggleSwitcherPanel() {
     if (this._switcherPanel.state == "open" || this._switcherPanel.state == "showing") {
diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -5651,17 +5651,17 @@ function setToolbarVisibility(toolbar, i
       Services.prefs.setBoolPref("ui.key.menuAccessKeyFocuses", !isVisible);
     }
   } else {
     hidingAttribute = "collapsed";
   }
 
   toolbar.setAttribute(hidingAttribute, !isVisible);
   if (persist) {
-    document.persist(toolbar.id, hidingAttribute);
+    Services.xulStore.persist(toolbar, hidingAttribute);
   }
 
   let eventParams = {
     detail: {
       visible: isVisible
     },
     bubbles: true
   };
diff --git a/browser/components/customizableui/CustomizeMode.jsm b/browser/components/customizableui/CustomizeMode.jsm
--- a/browser/components/customizableui/CustomizeMode.jsm
+++ b/browser/components/customizableui/CustomizeMode.jsm
@@ -1069,17 +1069,17 @@ CustomizeMode.prototype = {
     let document = this.document;
     let toolbars = document.querySelectorAll("toolbar[customizable='true'][currentset]");
     for (let toolbar of toolbars) {
       if (aSetBeforePersisting) {
         let set = toolbar.currentSet;
         toolbar.setAttribute("currentset", set);
       }
       // Persist the currentset attribute directly on hardcoded toolbars.
-      document.persist(toolbar.id, "currentset");
+      Services.xulStore.persist(toolbar, "currentset");
     }
   },
 
   reset() {
     this.resetting = true;
     // Disable the reset button temporarily while resetting:
     let btn = this.$("customization-reset-button");
     btn.disabled = true;
diff --git a/browser/components/shell/content/setDesktopBackground.js b/browser/components/shell/content/setDesktopBackground.js
--- a/browser/components/shell/content/setDesktopBackground.js
+++ b/browser/components/shell/content/setDesktopBackground.js
@@ -69,17 +69,17 @@ var gSetBackground = {
 
       document.getElementById("showDesktopPreferences").hidden = true;
     }
     this.updatePosition();
   },
 
   setDesktopBackground() {
     if (AppConstants.platform != "macosx") {
-      document.persist("menuPosition", "value");
+      Services.xulStore.persist(document.getElementById("menuPosition"), "value");
       this._shell.desktopBackgroundColor = this._hexStringToLong(this._backgroundColor);
     } else {
       Services.obs.addObserver(this, "shell:desktop-background-changed");
 
       var bundle = document.getElementById("backgroundBundle");
       var setDesktopBackground = document.getElementById("setDesktopBackground");
       setDesktopBackground.disabled = true;
       setDesktopBackground.label = bundle.getString("DesktopBackgroundDownloading");
diff --git a/toolkit/components/xulstore/XULStore.js b/toolkit/components/xulstore/XULStore.js
--- a/toolkit/components/xulstore/XULStore.js
+++ b/toolkit/components/xulstore/XULStore.js
@@ -78,18 +78,17 @@ XULStore.prototype = {
   },
 
   /*
    * Internal function for logging debug messages to the Error Console window
    */
   log(message) {
     if (!debugMode)
       return;
-    dump("XULStore: " + message + "\n");
-    Services.console.logStringMessage("XULStore: " + message);
+    console.log("XULStore: " + message);
   },
 
   readFile() {
     try {
       this._data = JSON.parse(Cu.readUTF8File(this._storeFile));
     } catch (e) {
       this.log("Error reading JSON: " + e);
       // This exception could mean that the file didn't exist.
@@ -124,16 +123,40 @@ XULStore.prototype = {
 
     // Don't write the file more than once every 30 seconds.
     this._needsSaving = true;
     this._writeTimer.init(this, WRITE_DELAY_MS, Ci.nsITimer.TYPE_ONE_SHOT);
   },
 
   /* ---------- interface implementation ---------- */
 
+  persist(node, attr) {
+    if (!node.id) {
+      throw new Error("Node without ID passed into persist()");
+    }
+
+    const uri = node.ownerDocument.documentURI;
+    const value = node.getAttribute(attr);
+
+    if (node.localName == "window") {
+      this.log("Persisting attributes to windows is handled by nsXULWindow.");
+      return;
+    }
+
+    // It may make more sense to drop the `hasValue` check so that
+    // any time there's an empty attribute it gets removed from the
+    // store. That said, this is copying behavior from document.persist,
+    // so callers would need to be updated with that change.
+    if (!value && this.hasValue(uri, node.id, attr)) {
+      this.removeValue(uri, node.id, attr);
+    } else {
+      this.setValue(uri, node.id, attr, value);
+    }
+  },
+
   setValue(docURI, id, attr, value) {
     this.log("Saving " + attr + "=" + value + " for id=" + id + ", doc=" + docURI);
 
     if (!this._saveAllowed) {
       Services.console.logStringMessage("XULStore: Changes after profile-before-change are ignored!");
       return;
     }
 
diff --git a/toolkit/components/xulstore/nsIXULStore.idl b/toolkit/components/xulstore/nsIXULStore.idl
--- a/toolkit/components/xulstore/nsIXULStore.idl
+++ b/toolkit/components/xulstore/nsIXULStore.idl
@@ -1,28 +1,40 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "nsISupports.idl"
 
 interface nsIStringEnumerator;
+webidl Node;
 
 /**
  * The XUL store is used to store information related to a XUL document/application.
  * Typically it is used to store the persisted state for the document, such as
  * window location, toolbars that are open and nodes that are open and closed in a tree.
  *
  * The data is serialized to [profile directory]/xulstore.json
  */
 [scriptable, uuid(987c4b35-c426-4dd7-ad49-3c9fa4c65d20)]
 
 interface nsIXULStore: nsISupports
 {
   /**
+   * Sets a value for a specified node's attribute, except in
+   * the case below (following the original XULDocument::persist):
+   * If the value is empty and `hasValue` is true, then the
+   * value instead gets removed from the store.
+   *
+   * @param node - DOM node
+   * @param attr - attribute to store
+   */
+  void persist(in Node aNode, in AString attr);
+
+  /**
    * Sets a value in the store.
    *
    * @param doc - document URI
    * @param id - identifier of the node
    * @param attr - attribute to store
    * @param value - value of the attribute
    */
   void setValue(in AString doc, in AString id, in AString attr, in AString value);
diff --git a/toolkit/components/xulstore/tests/chrome/window_persistence.xul b/toolkit/components/xulstore/tests/chrome/window_persistence.xul
--- a/toolkit/components/xulstore/tests/chrome/window_persistence.xul
+++ b/toolkit/components/xulstore/tests/chrome/window_persistence.xul
@@ -19,40 +19,42 @@ let URI = "chrome://mochitests/content/c
 function opened()
 {
   runTest();
 }
 
 function runTest()
 {
   var firstRun = window.arguments[0];
+  var button1 = document.getElementById("button1");
+  var button2 = document.getElementById("button2");
   if (firstRun) {
-    document.getElementById("button1").setAttribute("value", "Pressed");
-    document.getElementById("button2").removeAttribute("value");
+    button1.setAttribute("value", "Pressed");
+    button2.removeAttribute("value");
 
-    document.getElementById("button2").setAttribute("foo", "bar");
-    document.persist("button2", "foo");
-    is(XULStore.getValue(URI, "button2", "foo"), "bar", "attribute persisted")
-    document.getElementById("button2").removeAttribute("foo");
-    document.persist("button2", "foo");
-    is(XULStore.hasValue(URI, "button2", "foo"), false, "attribute removed")
+    button2.setAttribute("foo", "bar");
+    XULStore.persist(button2, "foo");
+    is(XULStore.getValue(URI, "button2", "foo"), "bar", "attribute persisted");
+    button2.removeAttribute("foo");
+    XULStore.persist(button2, "foo");
+    is(XULStore.hasValue(URI, "button2", "foo"), false, "attribute removed");
 
     window.close();
     window.opener.windowOpened();
   }
   else {
-    is(document.getElementById("button1").getAttribute("value"), "Pressed",
+    is(button1.getAttribute("value"), "Pressed",
        "Attribute set");
-    is(document.getElementById("button2").hasAttribute("value"), true,
+    is(button2.hasAttribute("value"), true,
        "Attribute cleared");
-    is(document.getElementById("button2").getAttribute("value"), "",
+    is(button2.getAttribute("value"), "",
        "Attribute cleared");
-    is(document.getElementById("button2").hasAttribute("foo"), false,
+    is(button2.hasAttribute("foo"), false,
        "Attribute cleared");
-    is(document.getElementById("button2").getAttribute("foo"), "",
+    is(button2.getAttribute("foo"), "",
        "Attribute cleared");
 
     window.close();
     window.opener.testDone();
   }
 }
 
 function is(l, r, n) { window.opener.wrappedJSObject.SimpleTest.is(l,r,n); }
diff --git a/toolkit/mozapps/extensions/test/browser/browser_bug679604.js b/toolkit/mozapps/extensions/test/browser/browser_bug679604.js
--- a/toolkit/mozapps/extensions/test/browser/browser_bug679604.js
+++ b/toolkit/mozapps/extensions/test/browser/browser_bug679604.js
@@ -6,17 +6,17 @@
 // Firefox doesn't break the add-ons manager when that category doesn't exist
 
 async function test() {
   waitForExplicitFinish();
 
   let aWindow = await open_manager(null);
   var categories = aWindow.document.getElementById("categories");
   categories.setAttribute("last-selected", "foo");
-  aWindow.document.persist("categories", "last-selected");
+  Services.xulStore.persist(categories, "last-selected");
 
   await close_manager(aWindow);
   Services.prefs.clearUserPref(PREF_UI_LASTCATEGORY);
 
   aWindow = await open_manager(null);
   is(new CategoryUtilities(aWindow).selectedCategory, "discover",
      "Should have loaded the right view");
 
