# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  f0813978c9737dd86447d6e89ca9940a731ad907

diff --git a/browser/tools/devbrowser/content/devbrowser.js b/browser/tools/devbrowser/content/devbrowser.js
--- a/browser/tools/devbrowser/content/devbrowser.js
+++ b/browser/tools/devbrowser/content/devbrowser.js
@@ -2,22 +2,216 @@ if (!document.createXULElement) {
   throw Error("this page must be loaded via the chrome: protocol");
 }
 
 const { Services } = ChromeUtils.import("resource://gre/modules/Services.jsm");
 const { XPCOMUtils } = ChromeUtils.import(
   "resource://gre/modules/XPCOMUtils.jsm"
 );
 
+XPCOMUtils.defineLazyModuleGetters(this, {
+  HttpServer: "chrome://remote/content/server/HTTPD.jsm",
+});
+XPCOMUtils.defineLazyServiceGetters(this, {
+  proxyService: [
+    "@mozilla.org/network/protocol-proxy-service;1",
+    "nsIProtocolProxyService",
+  ],
+});
+
+
 XPCOMUtils.defineLazyGetter(this, "gSystemPrincipal", () =>
   Services.scriptSecurityManager.getSystemPrincipal()
 );
 
+Services.ppmm.addMessageListener("Toolkit:inner-window-destroyed", msg => {
+  console.log("Inner window destroyed", msg.data);
+});
+Services.ppmm.addMessageListener("Toolkit:inner-window-destroyed", msg => {
+  console.log("Inner window destroyed", msg.data);
+});
+
+// See also https://searchfox.org/mozilla-central/source/devtools/server/startup/content-process.js#12
+
+Services.ppmm.addMessageListener("child-process-shutdown", msg => {
+console.log("Child process shutdown", msg);
+});
+
+
+function getProcessMetadata() {
+  const { childCount } = Services.ppmm;
+  console.log(childCount);
+  // Get the process message manager for the current tab
+  // const mm = gBrowser.selectedBrowser.messageManager.processMessageManager;
+  // let processId = null;
+  for (let i = 0; i < childCount; i++) {
+    const child = Services.ppmm.getChildAt(i);
+    console.log(child);
+    // if (child == mm) {
+    //   processId = mm.osPid;
+    //   break;
+    // }
+  }
+}
+
+// function do_get_file(path, allowNonexistent) {
+//   try {
+//     let lf = Services.dirsvc.get("CurWorkD", Ci.nsIFile);
+
+//     let bits = path.split("/");
+//     for (let i = 0; i < bits.length; i++) {
+//       if (bits[i]) {
+//         if (bits[i] == "..") {
+//           lf = lf.parent;
+//         } else {
+//           lf.append(bits[i]);
+//         }
+//       }
+//     }
+
+//     // if (!allowNonexistent && !lf.exists()) {
+//     //   // Not using do_throw(): caller will continue.
+//     //   _passed = false;
+//     //   var stack = Components.stack.caller;
+//     //   _testLogger.error(
+//     //     "[" +
+//     //       stack.name +
+//     //       " : " +
+//     //       stack.lineNumber +
+//     //       "] " +
+//     //       lf.path +
+//     //       " does not exist"
+//     //   );
+//     // }
+
+//     return lf;
+//   } catch (ex) {
+//     console.error(ex);
+//     // do_throw(ex.toString(), Components.stack.caller);
+//   }
+
+//   return null;
+// }
+
+// // do_get_cwd() isn't exactly self-explanatory, so provide a helper
+// function do_get_cwd() {
+//   return do_get_file("browser/tools/devbrowser/");
+// }
+
+/**
+ * Creates a new HttpServer for testing, and begins listening on the
+ * specified port. Automatically shuts down the server when the test
+ * unit ends.
+ *
+ * @param {object} [options = {}]
+ *        The options object.
+ * @param {integer} [options.port = -1]
+ *        The port to listen on. If omitted, listen on a random
+ *        port. The latter is the preferred behavior.
+ * @param {sequence<string>?} [options.hosts = null]
+ *        A set of hosts to accept connections to. Support for this is
+ *        implemented using a proxy filter.
+ *
+ * @returns {HttpServer}
+ *        The HTTP server instance.
+ */
+function createHttpServer({ port = -1, hosts } = {}) {
+  // this.server = new HttpServer();
+  // this.server.registerPrefixHandler("/json/", new JSONHandler(this));
+  // this.server._start(port, host);
+
+  let server = new HttpServer();
+  server.start(port);
+  server.registerPathHandler("/", async (request, response) => {
+    console.log("Received", request);
+
+    response.setHeader("Cache-Control", "no-cache", false);
+    response.setHeader("Content-Type", "text/html", false);
+    response.write("<!doctype html><html><body>hi</body></html>");
+  });
+
+  if (hosts) {
+    hosts = new Set(hosts);
+    const serverHost = "localhost";
+    const serverPort = server.identity.primaryPort;
+
+    for (let host of hosts) {
+      server.identity.add("http", host, 80);
+    }
+
+    const proxyFilter = {
+      proxyInfo: proxyService.newProxyInfo(
+        "http",
+        serverHost,
+        serverPort,
+        "",
+        "",
+        0,
+        4096,
+        null
+      ),
+
+      applyFilter(service, channel, defaultProxyInfo, callback) {
+        if (hosts.has(channel.URI.host)) {
+          callback.onProxyFilterResult(this.proxyInfo);
+        } else {
+          callback.onProxyFilterResult(defaultProxyInfo);
+        }
+      },
+    };
+
+    proxyService.registerChannelFilter(proxyFilter, 0);
+    // this.testScope.registerCleanupFunction(() => {
+    //   proxyService.unregisterChannelFilter(proxyFilter);
+    // });
+  }
+
+  // this.testScope.registerCleanupFunction(() => {
+  //   return new Promise(resolve => {
+  //     server.stop(resolve);
+  //   });
+  // });
+
+  return server;
+}
+
+function createServer(recurse = 10) {
+  let server = new HttpServer();
+  // server.identity.add("http", "example.com", 80);
+  server.start(-1);
+  server.registerPathHandler("/", async (request, response) => {
+    console.log("Received", request);
+
+    response.setHeader("Cache-Control", "no-cache", false);
+    response.setHeader("Content-Type", "text/html", false);
+    if (recurse-- > 0) {
+      let childServer = createServer(recurse);
+      response.write(
+        `<!doctype html><html><body>frame number ${recurse}:<br /><iframe src='http://localhost:${
+          childServer._port
+        }' style="width: 95%;"></iframe></body></html>`
+      );
+    } else {
+      response.write(
+        "<!doctype html><html><body>child most frame</body></html>"
+      );
+    }
+  });
+  return server;
+}
+
+let server = createServer();
+let homePage = `http://localhost:${server._port}/`;
+console.log(homePage);
+
 class MainWindow {
   constructor() {
+    getProcessMetadata();
+    // const server = createHttpServer({ hosts: ["example.com"] });
+
     const remote = Services.prefs.getBoolPref(
       "browser.tabs.remote.autostart",
       true
     );
 
     const browserControls = document.createXULElement("browser");
     browserControls.setAttribute("id", "browser_controls");
     browserControls.setAttribute("type", "content");
@@ -52,16 +246,17 @@ class MainWindow {
     browserContent.setAttribute("autocompletepopup", "");
     browserContent.setAttribute("type", "content");
     browserContent.setAttribute("remote", remote);
     browserContent.classList.add("browser_instance");
     document
       .getElementById("browser_content_container")
       .appendChild(browserContent);
     browserContent.src = "components/home.xhtml";
+    browserContent.src = homePage;
 
     browserContent.onloadend = this.addListeners();
   }
 
   addListeners() {
     window.openContextMenu = () => {
       console.log("context menu open");
     };
diff --git a/python/mozbuild/mozbuild/mach_commands.py b/python/mozbuild/mozbuild/mach_commands.py
--- a/python/mozbuild/mozbuild/mach_commands.py
+++ b/python/mozbuild/mozbuild/mach_commands.py
@@ -797,16 +797,18 @@ def _get_desktop_run_parser():
     group.add_argument('--dmd', action='store_true',
                        help='Enable DMD. The following arguments have no effect without this.')
     group.add_argument('--mode', choices=['live', 'dark-matter', 'cumulative', 'scan'],
                        help='Profiling mode. The default is \'dark-matter\'.')
     group.add_argument('--stacks', choices=['partial', 'full'],
                        help='Allocation stack trace coverage. The default is \'partial\'.')
     group.add_argument('--show-dump-stats', action='store_true',
                        help='Show stats when doing dumps.')
+    group.add_argument('--devbrowser', action='store_true',
+                       help='Use an alternate developer UI.')
 
     return parser
 
 
 def setup_run_parser():
     build = MozbuildObject.from_environment(cwd=here)
     if conditions.is_android(build):
         return _get_android_run_parser()
@@ -901,19 +903,19 @@ class RunProgram(MachCommandBase):
             intent=intent,
             extras=extras,
             url=url,
             wait=not no_wait,
             fail_if_running=fail_if_running)
 
         return 0
 
-    def _run_desktop(self, params, devbrowser, remote, background, noprofile, disable_e10s,
+    def _run_desktop(self, params, remote, background, noprofile, disable_e10s,
                      enable_crash_reporter, setpref, temp_profile, macos_open, debug, debugger,
-                     debugger_args, dmd, mode, stacks, show_dump_stats):
+                     debugger_args, dmd, mode, stacks, show_dump_stats, devbrowser):
         from mozprofile import Profile, Preferences
 
         try:
             binpath = self.get_binary_path('app')
         except Exception as e:
             print("It looks like your program isn't built.",
                   "You can run |mach build| to build it.")
             print(e)
