# HG changeset patch
# Parent e6ca2d4be2ee02a6cc62132692fc2129c8298edb
# User Manish Goregaokar <manishearth@gmail.com>
Bug 994134 - Test changes (to be qfolded)

diff --git a/browser/devtools/scratchpad/test/browser_scratchpad_edit_ui_updates.js b/browser/devtools/scratchpad/test/browser_scratchpad_edit_ui_updates.js
--- a/browser/devtools/scratchpad/test/browser_scratchpad_edit_ui_updates.js
+++ b/browser/devtools/scratchpad/test/browser_scratchpad_edit_ui_updates.js
@@ -3,17 +3,17 @@
    http://creativecommons.org/publicdomain/zero/1.0/ */
 /* Bug 699130 */
 
 "use strict";
 
 function test()
 {
   waitForExplicitFinish();
-
+  Services.prefs.setIntPref("devtools.selfxss.count", 0)
   gBrowser.selectedTab = gBrowser.addTab();
   gBrowser.selectedBrowser.addEventListener("load", function onLoad() {
     gBrowser.selectedBrowser.removeEventListener("load", onLoad, true);
     openScratchpad(runTests);
   }, true);
 
   content.location = "data:text/html,test Edit menu updates Scratchpad - bug 699130";
 }
@@ -132,20 +132,41 @@ function runTests()
 
   let showAfterCut = function() {
     ok(cutItem.hasAttribute("disabled"), "cut menuitem is disabled after cut");
     ok(!pasteItem.hasAttribute("disabled"), "paste menuitem is enabled after cut");
     closeMenu(hideAfterCut);
   };
 
   let hideAfterCut = function() {
+    waitForFocus(function () {
+      let oldVal = sp.editor.getText();
+      if (pass == 0) {
+        EventUtils.synthesizeKey("v", {accelKey: true}, gScratchpadWindow);
+        testSelfXss(oldVal);
+      } else {
+        sp.editor.on("change", onPaste);
+        EventUtils.synthesizeKey("v", {accelKey: true}, gScratchpadWindow);
+      }
+    }, gScratchpadWindow);
+  };
+
+  let testSelfXss = function (oldVal) {
+    // Self xss prevention tests (bug 994134)
+    let notificationbox = doc.getElementById("scratchpad-notificationbox");
+    let notification = notificationbox.getNotificationWithValue('selfxss-notification');
+    ok(notification, "Self-xss notification shown");
+    is(oldVal, sp.editor.getText(), "Paste blocked by self-xss prevention");
+    Services.prefs.setIntPref("devtools.selfxss.count", 10);
+    notificationbox.removeAllNotifications(true);
+
     sp.editor.on("change", onPaste);
-    waitForFocus(function () {
+    waitForFocus(function(){
       EventUtils.synthesizeKey("v", {accelKey: true}, gScratchpadWindow);
-    }, gScratchpadWindow);
+    }, gScratchpadWindow)
   };
 
   let onPaste = function() {
     sp.editor.off("change", onPaste);
     openMenu(13, 13, showAfterPaste);
   };
 
   let showAfterPaste = function() {
diff --git a/browser/devtools/webconsole/test/browser_webconsole_bug_642615_autocomplete.js b/browser/devtools/webconsole/test/browser_webconsole_bug_642615_autocomplete.js
--- a/browser/devtools/webconsole/test/browser_webconsole_bug_642615_autocomplete.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_bug_642615_autocomplete.js
@@ -2,16 +2,17 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 const TEST_URI = "data:text/html;charset=utf-8,<p>test for bug 642615";
 
 XPCOMUtils.defineLazyServiceGetter(this, "clipboardHelper",
                                    "@mozilla.org/widget/clipboardhelper;1",
                                    "nsIClipboardHelper");
+let WebConsoleUtils = require("devtools/toolkit/webconsole/utils").Utils;
 
 function consoleOpened(HUD) {
   let jsterm = HUD.jsterm;
   let stringToCopy = "foobazbarBug642615";
 
   jsterm.clearOutput();
 
   ok(!jsterm.completeNode.value, "no completeNode.value");
@@ -30,23 +31,38 @@ function consoleOpened(HUD) {
       function() {
         clipboardHelper.copyString(stringToCopy, document);
       },
       onClipboardCopy,
       finishTest);
   }
 
   function onClipboardCopy() {
+    info("Self-xss paste tests")
+    updateEditUIVisibility();
+
+    // Self xss prevention tests (bug 994134)
+    let oldVal = jsterm.inputNode.value;
+    goDoCommand("cmd_paste");
+    let notificationbox = jsterm.hud.document.getElementById("webconsole-notificationbox");
+    let notification = notificationbox.getNotificationWithValue('selfxss-notification');
+    ok(notification,  "Self-xss notification shown");
+    is(oldVal, jsterm.inputNode.value, "Paste blocked by self-xss prevention");
+    notificationbox.removeNotification(notification);
+    // Input some commands to disable the self-xss prevention
+    for(let i = 0; i <= 10; i++){
+      jsterm.setInputValue(i);
+      jsterm.execute();
+    }
+    jsterm.setInputValue("docu");
     info("wait for completion update after clipboard paste");
+    updateEditUIVisibility();
     jsterm.once("autocomplete-updated", onClipboardPaste);
-
-    updateEditUIVisibility();
     goDoCommand("cmd_paste");
   }
-
   function onClipboardPaste() {
     ok(!jsterm.completeNode.value, "no completion value after paste");
 
     info("wait for completion update after undo");
     jsterm.once("autocomplete-updated", onCompletionValueAfterUndo);
 
     // Get out of the webconsole event loop.
     executeSoon(() => {
@@ -74,14 +90,15 @@ function consoleOpened(HUD) {
 
   info("wait for completion value after typing 'docu'");
   jsterm.once("autocomplete-updated", onCompletionValue);
 
   EventUtils.synthesizeKey("u", {});
 }
 
 function test() {
+  Services.prefs.setIntPref("devtools.selfxss.count", 0)
   addTab(TEST_URI);
   browser.addEventListener("load", function onLoad() {
     browser.removeEventListener("load", onLoad, true);
     openConsole(null, consoleOpened);
   }, true);
 }
