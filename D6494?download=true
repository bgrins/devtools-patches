diff --git a/devtools/client/framework/moz.build b/devtools/client/framework/moz.build
--- a/devtools/client/framework/moz.build
+++ b/devtools/client/framework/moz.build
@@ -27,6 +27,7 @@
     'source-map-url-service.js',
     'target-from-url.js',
     'target.js',
+    'toolbox-context-menu.js',
     'toolbox-highlighter-utils.js',
     'toolbox-host-manager.js',
     'toolbox-hosts.js',
diff --git a/devtools/client/framework/test/browser_menu_api.js b/devtools/client/framework/test/browser_menu_api.js
--- a/devtools/client/framework/test/browser_menu_api.js
+++ b/devtools/client/framework/test/browser_menu_api.js
@@ -66,7 +66,7 @@
       disabled: true,
     }),
     new MenuItem({
-      l10nID: "foo",
+      l10nID: "editmenu-undo",
     }),
   ];
 
@@ -132,7 +132,7 @@
     },
   }));
   menu.append(new MenuItem({
-    l10nID: "submenu-parent",
+    l10nID: "editmenu-copy",
     submenu: submenu,
   }));
   menu.append(new MenuItem({
@@ -152,7 +152,7 @@
   is(menus.length, 2, "Correct number of menus");
   ok(!menus[0].hasAttribute("label"), "No label: should be set by localization");
   ok(!menus[0].hasAttribute("disabled"), "Correct disabled state");
-  is(menus[0].getAttribute("data-l10n-id"), "submenu-parent", "Correct localization attribute");
+  is(menus[0].getAttribute("data-l10n-id"), "editmenu-copy", "Correct localization attribute");
 
   is(menus[1].getAttribute("accesskey"), "A", "Correct accesskey");
   ok(menus[1].hasAttribute("disabled"), "Correct disabled state");
diff --git a/devtools/client/framework/test/browser_toolbox_textbox_context_menu.js b/devtools/client/framework/test/browser_toolbox_textbox_context_menu.js
--- a/devtools/client/framework/test/browser_toolbox_textbox_context_menu.js
+++ b/devtools/client/framework/test/browser_toolbox_textbox_context_menu.js
@@ -19,7 +19,6 @@
 add_task(async function checkMenuEntryStates() {
   info("Checking the state of edit menuitems with an empty clipboard");
   const toolbox = await openNewTabAndToolbox(URL, "inspector");
-  const textboxContextMenu = toolbox.textBoxContextMenuPopup;
 
   emptyClipboard();
 
@@ -29,20 +28,20 @@
   inspector.searchBox.focus();
   await onFocus;
 
+  info("Opening context menu");
+  const onContextMenuPopup = toolbox.once("menu-open");
+  synthesizeContextMenuEvent(inspector.searchBox);
+  await onContextMenuPopup;
+
+  const textboxContextMenu = toolbox.doc.getElementById("toolbox-menu");
   ok(textboxContextMenu, "The textbox context menu is loaded in the toolbox");
 
-  const cmdUndo = textboxContextMenu.querySelector("[command=cmd_undo]");
-  const cmdDelete = textboxContextMenu.querySelector("[command=cmd_delete]");
-  const cmdSelectAll = textboxContextMenu.querySelector("[command=cmd_selectAll]");
-  const cmdCut = textboxContextMenu.querySelector("[command=cmd_cut]");
-  const cmdCopy = textboxContextMenu.querySelector("[command=cmd_copy]");
-  const cmdPaste = textboxContextMenu.querySelector("[command=cmd_paste]");
-
-  info("Opening context menu");
-
-  const onContextMenuPopup = once(textboxContextMenu, "popupshowing");
-  textboxContextMenu.openPopupAtScreen(0, 0, true);
-  await onContextMenuPopup;
+  const cmdUndo = textboxContextMenu.querySelector("#editmenu-undo");
+  const cmdDelete = textboxContextMenu.querySelector("#editmenu-delete");
+  const cmdSelectAll = textboxContextMenu.querySelector("#editmenu-selectAll");
+  const cmdCut = textboxContextMenu.querySelector("#editmenu-cut");
+  const cmdCopy = textboxContextMenu.querySelector("#editmenu-copy");
+  const cmdPaste = textboxContextMenu.querySelector("#editmenu-paste");
 
   is(cmdUndo.getAttribute("disabled"), "true", "cmdUndo is disabled");
   is(cmdDelete.getAttribute("disabled"), "true", "cmdDelete is disabled");
@@ -53,6 +52,10 @@
   is(cmdCut.getAttribute("disabled"), "", "cmdCut is enabled");
   is(cmdCopy.getAttribute("disabled"), "", "cmdCopy is enabled");
   is(cmdPaste.getAttribute("disabled"), "", "cmdPaste is enabled");
+
+  const onContextMenuHidden = toolbox.once("menu-close");
+  EventUtils.sendKey("ESCAPE", toolbox.win);
+  await onContextMenuHidden;
 });
 
 add_task(async function automaticallyBindTexbox() {
@@ -80,35 +83,39 @@
   await checkNonTextInput(doc.querySelector("input[type=radio]"), toolbox);
 });
 
-async function checkNonTextInput(input, {textBoxContextMenuPopup}) {
-  is(textBoxContextMenuPopup.state, "closed", "The menu is closed");
+async function checkNonTextInput(input, toolbox) {
+  let textboxContextMenu = toolbox.doc.getElementById("toolbox-menu");
+  ok(!textboxContextMenu, "The menu is closed");
 
   info("Simulating context click on the non text input and expecting no menu to open");
   const eventBubbledUp = new Promise(resolve => {
     input.ownerDocument.addEventListener("contextmenu", resolve, { once: true });
   });
-  EventUtils.synthesizeMouse(input, 2, 2, {type: "contextmenu", button: 2},
-                             input.ownerDocument.defaultView);
+  synthesizeContextMenuEvent(input);
   info("Waiting for event");
   await eventBubbledUp;
-  is(textBoxContextMenuPopup.state, "closed", "The menu is still closed");
+
+  textboxContextMenu = toolbox.doc.getElementById("toolbox-menu");
+  ok(!textboxContextMenu, "The menu is still closed");
 }
 
-async function checkTextBox(textBox, {textBoxContextMenuPopup}) {
-  is(textBoxContextMenuPopup.state, "closed", "The menu is closed");
+async function checkTextBox(textBox, toolbox) {
+  let textboxContextMenu = toolbox.doc.getElementById("toolbox-menu");
+  ok(!textboxContextMenu, "The menu is closed");
 
   info("Simulating context click on the textbox and expecting the menu to open");
-  const onContextMenu = once(textBoxContextMenuPopup, "popupshown");
-  EventUtils.synthesizeMouse(textBox, 2, 2, {type: "contextmenu", button: 2},
-                             textBox.ownerDocument.defaultView);
+  const onContextMenu = toolbox.once("menu-open");
+  synthesizeContextMenuEvent(textBox);
   await onContextMenu;
 
-  is(textBoxContextMenuPopup.state, "open", "The menu is now visible");
+  textboxContextMenu = toolbox.doc.getElementById("toolbox-menu");
+  ok(textboxContextMenu, "The menu is now visible");
 
   info("Closing the menu");
-  const onContextMenuHidden = once(textBoxContextMenuPopup, "popuphidden");
-  textBoxContextMenuPopup.hidePopup();
+  const onContextMenuHidden = toolbox.once("menu-close");
+  EventUtils.sendKey("ESCAPE", toolbox.win);
   await onContextMenuHidden;
 
-  is(textBoxContextMenuPopup.state, "closed", "The menu is closed again");
+  textboxContextMenu = toolbox.doc.getElementById("toolbox-menu");
+  ok(!textboxContextMenu, "The menu is closed again");
 }
diff --git a/devtools/client/webconsole/utils/context-menu.js b/devtools/client/framework/toolbox-context-menu.js
copy from devtools/client/webconsole/utils/context-menu.js
copy to devtools/client/framework/toolbox-context-menu.js
--- a/devtools/client/webconsole/utils/context-menu.js
+++ b/devtools/client/framework/toolbox-context-menu.js
@@ -9,196 +9,22 @@
 const Menu = require("devtools/client/framework/menu");
 const MenuItem = require("devtools/client/framework/menu-item");
 
-const { MESSAGE_SOURCE } = require("devtools/client/webconsole/constants");
-
-const clipboardHelper = require("devtools/shared/platform/clipboard");
-const { l10n } = require("devtools/client/webconsole/utils/messages");
-
-loader.lazyRequireGetter(this, "openContentLink", "devtools/client/shared/link", true);
+var stringsLoaded = false;
 
 /**
- * Create a Menu instance for the webconsole.
- *
- * @param {Object} hud
- *        The webConsoleFrame.
- * @param {Element} parentNode
- *        The container of the new console frontend output wrapper.
- * @param {Object} options
- *        - {String} actor (optional) actor id to use for context menu actions
- *        - {String} clipboardText (optional) text to "Copy" if no selection is available
- *        - {String} variableText (optional) which is the textual frontend
- *            representation of the variable
- *        - {Object} message (optional) message object containing metadata such as:
- *          - {String} source
- *          - {String} request
- *        - {Function} openSidebar (optional) function that will open the object
- *            inspector sidebar
- *        - {String} rootActorId (optional) actor id for the root object being clicked on
- *        - {Object} executionPoint (optional) when replaying, the execution point where
- *            this message was logged
+ * Lazily load strings for the edit menu.
  */
-function createContextMenu(hud, parentNode, {
-  actor,
-  clipboardText,
-  variableText,
-  message,
-  serviceContainer,
-  openSidebar,
-  rootActorId,
-  executionPoint,
-  toolbox,
-}) {
-  const win = parentNode.ownerDocument.defaultView;
-  const selection = win.getSelection();
-
-  const { source, request } = message || {};
-
-  const menu = new Menu({
-    id: "webconsole-menu",
-  });
-
-  // Copy URL for a network request.
-  menu.append(new MenuItem({
-    id: "console-menu-copy-url",
-    label: l10n.getStr("webconsole.menu.copyURL.label"),
-    accesskey: l10n.getStr("webconsole.menu.copyURL.accesskey"),
-    visible: source === MESSAGE_SOURCE.NETWORK,
-    click: () => {
-      if (!request) {
-        return;
-      }
-      clipboardHelper.copyString(request.url);
-    },
-  }));
-
-  // Open Network message in the Network panel.
-  if (serviceContainer.openNetworkPanel && request) {
-    menu.append(new MenuItem({
-      id: "console-menu-open-in-network-panel",
-      label: l10n.getStr("webconsole.menu.openInNetworkPanel.label"),
-      accesskey: l10n.getStr("webconsole.menu.openInNetworkPanel.accesskey"),
-      visible: source === MESSAGE_SOURCE.NETWORK,
-      click: () => serviceContainer.openNetworkPanel(message.messageId),
-    }));
+function loadEditMenuStrings(win) {
+  if (stringsLoaded) {
+    return;
   }
 
-  // Open URL in a new tab for a network request.
-  menu.append(new MenuItem({
-    id: "console-menu-open-url",
-    label: l10n.getStr("webconsole.menu.openURL.label"),
-    accesskey: l10n.getStr("webconsole.menu.openURL.accesskey"),
-    visible: source === MESSAGE_SOURCE.NETWORK,
-    click: () => {
-      if (!request) {
-        return;
-      }
-      openContentLink(request.url);
-    },
-  }));
-
-  // Store as global variable.
-  menu.append(new MenuItem({
-    id: "console-menu-store",
-    label: l10n.getStr("webconsole.menu.storeAsGlobalVar.label"),
-    accesskey: l10n.getStr("webconsole.menu.storeAsGlobalVar.accesskey"),
-    disabled: !actor,
-    click: () => {
-      const evalString = `{ let i = 0;
-        while (this.hasOwnProperty("temp" + i) && i < 1000) {
-          i++;
-        }
-        this["temp" + i] = _self;
-        "temp" + i;
-      }`;
-      const options = {
-        selectedObjectActor: actor,
-      };
-
-      hud.jsterm.requestEvaluation(evalString, options).then((res) => {
-        hud.jsterm.focus();
-        hud.jsterm.setInputValue(res.result);
-      });
-    },
-  }));
-
-  // Copy message or grip.
-  menu.append(new MenuItem({
-    id: "console-menu-copy",
-    label: l10n.getStr("webconsole.menu.copyMessage.label"),
-    accesskey: l10n.getStr("webconsole.menu.copyMessage.accesskey"),
-    // Disabled if there is no selection and no message element available to copy.
-    disabled: selection.isCollapsed && !clipboardText,
-    click: () => {
-      if (selection.isCollapsed) {
-        // If the selection is empty/collapsed, copy the text content of the
-        // message for which the context menu was opened.
-        clipboardHelper.copyString(clipboardText);
-      } else {
-        clipboardHelper.copyString(selection.toString());
-      }
-    },
-  }));
-
-  // Copy message object.
-  menu.append(new MenuItem({
-    id: "console-menu-copy-object",
-    label: l10n.getStr("webconsole.menu.copyObject.label"),
-    accesskey: l10n.getStr("webconsole.menu.copyObject.accesskey"),
-    // Disabled if there is no actor and no variable text associated.
-    disabled: (!actor && !variableText),
-    click: () => {
-      if (actor) {
-        // The Debugger.Object of the OA will be bound to |_self| during evaluation,
-        hud.jsterm.copyObject(`_self`, { selectedObjectActor: actor }).then((res) => {
-          clipboardHelper.copyString(res.helperResult.value);
-        });
-      } else {
-        clipboardHelper.copyString(variableText);
-      }
-    },
-  }));
-
-  // Select all.
-  menu.append(new MenuItem({
-    id: "console-menu-select",
-    label: l10n.getStr("webconsole.menu.selectAll.label"),
-    accesskey: l10n.getStr("webconsole.menu.selectAll.accesskey"),
-    disabled: false,
-    click: () => {
-      const webconsoleOutput = parentNode.querySelector(".webconsole-output");
-      selection.selectAllChildren(webconsoleOutput);
-    },
-  }));
-
-  // Open object in sidebar.
-  if (openSidebar) {
-    menu.append(new MenuItem({
-      id: "console-menu-open-sidebar",
-      label: l10n.getStr("webconsole.menu.openInSidebar.label"),
-      accesskey: l10n.getStr("webconsole.menu.openInSidebar.accesskey"),
-      disabled: !rootActorId,
-      click: () => openSidebar(message.messageId),
-    }));
+  if (typeof win.MozXULElement !== "undefined") {
+    stringsLoaded = true;
+    win.MozXULElement.insertFTLIfNeeded("toolkit/main-window/editmenu.ftl");
   }
-
-  // Add time warp option if available.
-  if (executionPoint) {
-    menu.append(new MenuItem({
-      id: "console-menu-time-warp",
-      label: l10n.getStr("webconsole.menu.timeWarp.label"),
-      disabled: false,
-      click: () => {
-        const threadClient = toolbox.threadClient;
-        threadClient.timeWarp(executionPoint);
-      },
-    }));
-  }
-
-  return menu;
 }
 
-exports.createContextMenu = createContextMenu;
-
 /**
  * Return an 'edit' menu for a input field. This integrates directly
  * with docshell commands to provide the right enabled state and editor
@@ -206,13 +32,17 @@
  *
  * You'll need to call menu.popup() yourself, this just returns the Menu instance.
  *
+ * @param {Window} win parent window reference
+ * @param {String} id menu ID
+ *
  * @returns {Menu}
  */
-function createEditContextMenu() {
-  const docshell = window.docShell;
-  const menu = new Menu({
-    id: "webconsole-menu",
-  });
+function createEditContextMenu(win, id) {
+  // Localized strings for the menu are loaded lazily.
+  loadEditMenuStrings(win);
+
+  const docshell = win.docShell;
+  const menu = new Menu({id});
   menu.append(new MenuItem({
     id: "editmenu-undo",
     l10nID: "editmenu-undo",
@@ -270,4 +100,4 @@
   return menu;
 }
 
-exports.createEditContextMenu = createEditContextMenu;
+module.exports.createEditContextMenu = createEditContextMenu;
diff --git a/devtools/client/framework/toolbox.js b/devtools/client/framework/toolbox.js
--- a/devtools/client/framework/toolbox.js
+++ b/devtools/client/framework/toolbox.js
@@ -65,6 +65,8 @@
   "devtools/client/netmonitor/src/api", true);
 loader.lazyRequireGetter(this, "sortPanelDefinitions",
   "devtools/client/framework/toolbox-tabs-order-manager", true);
+loader.lazyRequireGetter(this, "createEditContextMenu",
+  "devtools/client/framework/toolbox-context-menu", true);
 
 loader.lazyGetter(this, "domNodeConstants", () => {
   return require("devtools/shared/dom-node-constants");
@@ -471,10 +473,6 @@
       Services.prefs.addObserver("devtools.serviceWorkers.testing.enabled",
                                  this._applyServiceWorkersTestingSettings);
 
-      this.textBoxContextMenuPopup =
-        this.doc.getElementById("toolbox-textbox-context-popup");
-      this.textBoxContextMenuPopup.addEventListener("popupshowing",
-        this._updateTextBoxMenuItems, true);
       this.doc.addEventListener("contextmenu", (e) => {
         if (e.originalTarget.closest("input[type=text]") ||
             e.originalTarget.closest("input[type=search]") ||
@@ -2872,11 +2870,6 @@
         this._saveSplitConsoleHeight);
       this.webconsolePanel = null;
     }
-    if (this.textBoxContextMenuPopup) {
-      this.textBoxContextMenuPopup.removeEventListener("popupshowing",
-        this._updateTextBoxMenuItems, true);
-      this.textBoxContextMenuPopup = null;
-    }
     if (this._componentMount) {
       this._componentMount.removeEventListener("keypress", this._onToolbarArrowKeypress);
       this.ReactDOM.unmountComponentAtNode(this._componentMount);
@@ -3040,7 +3033,13 @@
    * @param {Number} y
    */
   openTextBoxContextMenu: function(x, y) {
-    this.textBoxContextMenuPopup.openPopupAtScreen(x, y, true);
+    const menu = createEditContextMenu(this.win, "toolbox-menu");
+
+    // Fire event for tests
+    menu.once("open", () => this.emit("menu-open"));
+    menu.once("close", () => this.emit("menu-close"));
+
+    menu.popup(x, y, { doc: this.doc });
   },
 
   /**
diff --git a/devtools/client/framework/toolbox.xul b/devtools/client/framework/toolbox.xul
--- a/devtools/client/framework/toolbox.xul
+++ b/devtools/client/framework/toolbox.xul
@@ -9,8 +9,6 @@
 <!DOCTYPE window [
 <!ENTITY % toolboxDTD SYSTEM "chrome://devtools/locale/toolbox.dtd" >
 %toolboxDTD;
-<!ENTITY % editMenuStrings SYSTEM "chrome://global/locale/editMenuOverlay.dtd">
-%editMenuStrings;
 <!ENTITY % globalKeysDTD SYSTEM "chrome://global/locale/globalKeys.dtd">
 %globalKeysDTD;
 ]>
@@ -23,32 +21,11 @@
   <script type="application/javascript"
           src="chrome://global/content/viewSourceUtils.js"/>
 
-  <script type="application/javascript" src="chrome://global/content/globalOverlay.js"/>
+  <script type="application/javascript"
+          src="chrome://global/content/globalOverlay.js"/>
   <script type="application/javascript"
           src="chrome://devtools/content/framework/toolbox-init.js"/>
 
-#include ../../../toolkit/content/editMenuCommands.inc.xul
-#include ../../../toolkit/content/editMenuKeys.inc.xul
-
-  <popupset>
-    <menupopup id="toolbox-textbox-context-popup">
-      <menuitem id="cMenu_undo" label="&undoCmd.label;"
-                accesskey="&undoCmd.accesskey;" command="cmd_undo"/>
-      <menuseparator/>
-      <menuitem id="cMenu_cut" label="&cutCmd.label;"
-                accesskey="&cutCmd.accesskey;" command="cmd_cut"/>
-      <menuitem id="cMenu_copy" label="&copyCmd.label;"
-                accesskey="&copyCmd.accesskey;" command="cmd_copy"/>
-      <menuitem id="cMenu_paste" label="&pasteCmd.label;"
-                accesskey="&pasteCmd.accesskey;" command="cmd_paste"/>
-      <menuitem id="cMenu_delete" label="&deleteCmd.label;"
-                accesskey="&deleteCmd.accesskey;" command="cmd_delete"/>
-      <menuseparator/>
-      <menuitem id="cMenu_selectAll" label="&selectAllCmd.label;"
-                accesskey="&selectAllCmd.accesskey;" command="cmd_selectAll"/>
-    </menupopup>
-  </popupset>
-
   <vbox id="toolbox-container" flex="1">
     <div xmlns="http://www.w3.org/1999/xhtml" id="toolbox-notificationbox"/>
     <div xmlns="http://www.w3.org/1999/xhtml" id="toolbox-toolbar-mount"
diff --git a/devtools/client/inspector/computed/test/browser_computed_search-filter_context-menu.js b/devtools/client/inspector/computed/test/browser_computed_search-filter_context-menu.js
--- a/devtools/client/inspector/computed/test/browser_computed_search-filter_context-menu.js
+++ b/devtools/client/inspector/computed/test/browser_computed_search-filter_context-menu.js
@@ -15,18 +15,7 @@
   const {toolbox, inspector, view} = await openComputedView();
   await selectNode("h1", inspector);
 
-  const win = view.styleWindow;
   const searchField = view.searchField;
-  const searchContextMenu = toolbox.textBoxContextMenuPopup;
-  ok(searchContextMenu,
-    "The search filter context menu is loaded in the computed view");
-
-  const cmdUndo = searchContextMenu.querySelector("[command=cmd_undo]");
-  const cmdDelete = searchContextMenu.querySelector("[command=cmd_delete]");
-  const cmdSelectAll = searchContextMenu.querySelector("[command=cmd_selectAll]");
-  const cmdCut = searchContextMenu.querySelector("[command=cmd_cut]");
-  const cmdCopy = searchContextMenu.querySelector("[command=cmd_copy]");
-  const cmdPaste = searchContextMenu.querySelector("[command=cmd_paste]");
 
   info("Opening context menu");
 
@@ -36,10 +25,20 @@
   searchField.focus();
   await onFocus;
 
-  const onContextMenuPopup = once(searchContextMenu, "popupshowing");
-  EventUtils.synthesizeMouse(searchField, 2, 2,
-    {type: "contextmenu", button: 2}, win);
-  await onContextMenuPopup;
+  let onContextMenuOpen = toolbox.once("menu-open");
+  synthesizeContextMenuEvent(searchField);
+  await onContextMenuOpen;
+
+  let searchContextMenu = toolbox.doc.getElementById("toolbox-menu");
+  ok(searchContextMenu,
+    "The search filter context menu is loaded in the computed view");
+
+  let cmdUndo = searchContextMenu.querySelector("#editmenu-undo");
+  let cmdDelete = searchContextMenu.querySelector("#editmenu-delete");
+  let cmdSelectAll = searchContextMenu.querySelector("#editmenu-selectAll");
+  let cmdCut = searchContextMenu.querySelector("#editmenu-cut");
+  let cmdCopy = searchContextMenu.querySelector("#editmenu-copy");
+  let cmdPaste = searchContextMenu.querySelector("#editmenu-paste");
 
   is(cmdUndo.getAttribute("disabled"), "true", "cmdUndo is disabled");
   is(cmdDelete.getAttribute("disabled"), "true", "cmdDelete is disabled");
@@ -52,24 +51,39 @@
   is(cmdPaste.getAttribute("disabled"), "", "cmdPaste is enabled");
 
   info("Closing context menu");
-  const onContextMenuHidden = once(searchContextMenu, "popuphidden");
-  searchContextMenu.hidePopup();
-  await onContextMenuHidden;
+  let onContextMenuClose = toolbox.once("menu-close");
+  EventUtils.sendKey("ESCAPE", toolbox.win);
+  await onContextMenuClose;
 
   info("Copy text in search field using the context menu");
   searchField.setUserInput(TEST_INPUT);
   searchField.select();
-  EventUtils.synthesizeMouse(searchField, 2, 2,
-    {type: "contextmenu", button: 2}, win);
-  await onContextMenuPopup;
+
+  onContextMenuOpen = toolbox.once("menu-open");
+  synthesizeContextMenuEvent(searchField);
+  await onContextMenuOpen;
+
+  searchContextMenu = toolbox.doc.getElementById("toolbox-menu");
+  cmdCopy = searchContextMenu.querySelector("#editmenu-copy");
   await waitForClipboardPromise(() => cmdCopy.click(), TEST_INPUT);
-  searchContextMenu.hidePopup();
-  await onContextMenuHidden;
+
+  onContextMenuClose = toolbox.once("menu-close");
+  EventUtils.sendKey("ESCAPE", toolbox.win);
+  await onContextMenuClose;
 
   info("Reopen context menu and check command properties");
-  EventUtils.synthesizeMouse(searchField, 2, 2,
-    {type: "contextmenu", button: 2}, win);
-  await onContextMenuPopup;
+
+  onContextMenuOpen = toolbox.once("menu-open");
+  synthesizeContextMenuEvent(searchField);
+  await onContextMenuOpen;
+
+  searchContextMenu = toolbox.doc.getElementById("toolbox-menu");
+  cmdUndo = searchContextMenu.querySelector("#editmenu-undo");
+  cmdDelete = searchContextMenu.querySelector("#editmenu-delete");
+  cmdSelectAll = searchContextMenu.querySelector("#editmenu-selectAll");
+  cmdCut = searchContextMenu.querySelector("#editmenu-cut");
+  cmdCopy = searchContextMenu.querySelector("#editmenu-copy");
+  cmdPaste = searchContextMenu.querySelector("#editmenu-paste");
 
   is(cmdUndo.getAttribute("disabled"), "", "cmdUndo is enabled");
   is(cmdDelete.getAttribute("disabled"), "", "cmdDelete is enabled");
@@ -77,4 +91,8 @@
   is(cmdCut.getAttribute("disabled"), "", "cmdCut is enabled");
   is(cmdCopy.getAttribute("disabled"), "", "cmdCopy is enabled");
   is(cmdPaste.getAttribute("disabled"), "", "cmdPaste is enabled");
+
+  onContextMenuClose = toolbox.once("menu-close");
+  EventUtils.sendKey("ESCAPE", toolbox.win);
+  await onContextMenuClose;
 });
diff --git a/devtools/client/inspector/rules/test/browser_rules_search-filter_context-menu.js b/devtools/client/inspector/rules/test/browser_rules_search-filter_context-menu.js
--- a/devtools/client/inspector/rules/test/browser_rules_search-filter_context-menu.js
+++ b/devtools/client/inspector/rules/test/browser_rules_search-filter_context-menu.js
@@ -14,18 +14,7 @@
   const {toolbox, inspector, view} = await openRuleView();
   await selectNode("h1", inspector);
 
-  const win = view.styleWindow;
   const searchField = view.searchField;
-  const searchContextMenu = toolbox.textBoxContextMenuPopup;
-  ok(searchContextMenu,
-    "The search filter context menu is loaded in the rule view");
-
-  const cmdUndo = searchContextMenu.querySelector("[command=cmd_undo]");
-  const cmdDelete = searchContextMenu.querySelector("[command=cmd_delete]");
-  const cmdSelectAll = searchContextMenu.querySelector("[command=cmd_selectAll]");
-  const cmdCut = searchContextMenu.querySelector("[command=cmd_cut]");
-  const cmdCopy = searchContextMenu.querySelector("[command=cmd_copy]");
-  const cmdPaste = searchContextMenu.querySelector("[command=cmd_paste]");
 
   info("Opening context menu");
 
@@ -35,10 +24,20 @@
   searchField.focus();
   await onFocus;
 
-  const onContextMenuPopup = once(searchContextMenu, "popupshowing");
-  EventUtils.synthesizeMouse(searchField, 2, 2,
-    {type: "contextmenu", button: 2}, win);
-  await onContextMenuPopup;
+  let onContextMenuOpen = toolbox.once("menu-open");
+  synthesizeContextMenuEvent(searchField);
+  await onContextMenuOpen;
+
+  let searchContextMenu = toolbox.doc.getElementById("toolbox-menu");
+  ok(searchContextMenu,
+    "The search filter context menu is loaded in the rule view");
+
+  let cmdUndo = searchContextMenu.querySelector("#editmenu-undo");
+  let cmdDelete = searchContextMenu.querySelector("#editmenu-delete");
+  let cmdSelectAll = searchContextMenu.querySelector("#editmenu-selectAll");
+  let cmdCut = searchContextMenu.querySelector("#editmenu-cut");
+  let cmdCopy = searchContextMenu.querySelector("#editmenu-copy");
+  let cmdPaste = searchContextMenu.querySelector("#editmenu-paste");
 
   is(cmdUndo.getAttribute("disabled"), "true", "cmdUndo is disabled");
   is(cmdDelete.getAttribute("disabled"), "true", "cmdDelete is disabled");
@@ -51,24 +50,39 @@
   is(cmdPaste.getAttribute("disabled"), "", "cmdPaste is enabled");
 
   info("Closing context menu");
-  const onContextMenuHidden = once(searchContextMenu, "popuphidden");
-  searchContextMenu.hidePopup();
-  await onContextMenuHidden;
+  let onContextMenuClose = toolbox.once("menu-close");
+  EventUtils.sendKey("ESCAPE", toolbox.win);
+  await onContextMenuClose;
 
   info("Copy text in search field using the context menu");
   searchField.setUserInput(TEST_INPUT);
   searchField.select();
-  EventUtils.synthesizeMouse(searchField, 2, 2,
-    {type: "contextmenu", button: 2}, win);
-  await onContextMenuPopup;
+
+  onContextMenuOpen = toolbox.once("menu-open");
+  synthesizeContextMenuEvent(searchField);
+  await onContextMenuOpen;
+
+  searchContextMenu = toolbox.doc.getElementById("toolbox-menu");
+  cmdCopy = searchContextMenu.querySelector("#editmenu-copy");
   await waitForClipboardPromise(() => cmdCopy.click(), TEST_INPUT);
-  searchContextMenu.hidePopup();
-  await onContextMenuHidden;
+
+  onContextMenuClose = toolbox.once("menu-close");
+  EventUtils.sendKey("ESCAPE", toolbox.win);
+  await onContextMenuClose;
 
   info("Reopen context menu and check command properties");
-  EventUtils.synthesizeMouse(searchField, 2, 2,
-    {type: "contextmenu", button: 2}, win);
-  await onContextMenuPopup;
+
+  onContextMenuOpen = toolbox.once("menu-open");
+  synthesizeContextMenuEvent(searchField);
+  await onContextMenuOpen;
+
+  searchContextMenu = toolbox.doc.getElementById("toolbox-menu");
+  cmdUndo = searchContextMenu.querySelector("#editmenu-undo");
+  cmdDelete = searchContextMenu.querySelector("#editmenu-delete");
+  cmdSelectAll = searchContextMenu.querySelector("#editmenu-selectAll");
+  cmdCut = searchContextMenu.querySelector("#editmenu-cut");
+  cmdCopy = searchContextMenu.querySelector("#editmenu-copy");
+  cmdPaste = searchContextMenu.querySelector("#editmenu-paste");
 
   is(cmdUndo.getAttribute("disabled"), "", "cmdUndo is enabled");
   is(cmdDelete.getAttribute("disabled"), "", "cmdDelete is enabled");
@@ -76,4 +90,8 @@
   is(cmdCut.getAttribute("disabled"), "", "cmdCut is enabled");
   is(cmdCopy.getAttribute("disabled"), "", "cmdCopy is enabled");
   is(cmdPaste.getAttribute("disabled"), "", "cmdPaste is enabled");
+
+  const onContextMenuHidden = toolbox.once("menu-close");
+  EventUtils.sendKey("ESCAPE", toolbox.win);
+  await onContextMenuHidden;
 });
diff --git a/devtools/client/inspector/test/browser_inspector_search-filter_context-menu.js b/devtools/client/inspector/test/browser_inspector_search-filter_context-menu.js
--- a/devtools/client/inspector/test/browser_inspector_search-filter_context-menu.js
+++ b/devtools/client/inspector/test/browser_inspector_search-filter_context-menu.js
@@ -14,18 +14,6 @@
   const {searchBox} = inspector;
   await selectNode("h1", inspector);
 
-  const win = inspector.panelWin;
-  const searchContextMenu = toolbox.textBoxContextMenuPopup;
-  ok(searchContextMenu,
-    "The search filter context menu is loaded in the inspector");
-
-  const cmdUndo = searchContextMenu.querySelector("[command=cmd_undo]");
-  const cmdDelete = searchContextMenu.querySelector("[command=cmd_delete]");
-  const cmdSelectAll = searchContextMenu.querySelector("[command=cmd_selectAll]");
-  const cmdCut = searchContextMenu.querySelector("[command=cmd_cut]");
-  const cmdCopy = searchContextMenu.querySelector("[command=cmd_copy]");
-  const cmdPaste = searchContextMenu.querySelector("[command=cmd_paste]");
-
   emptyClipboard();
 
   info("Opening context menu");
@@ -33,10 +21,20 @@
   searchBox.focus();
   await onFocus;
 
-  const onContextMenuPopup = once(searchContextMenu, "popupshowing");
-  EventUtils.synthesizeMouse(searchBox, 2, 2,
-    {type: "contextmenu", button: 2}, win);
-  await onContextMenuPopup;
+  let onContextMenuOpen = toolbox.once("menu-open");
+  synthesizeContextMenuEvent(searchBox);
+  await onContextMenuOpen;
+
+  let searchContextMenu = toolbox.doc.getElementById("toolbox-menu");
+  ok(searchContextMenu,
+    "The search filter context menu is loaded in the computed view");
+
+  let cmdUndo = searchContextMenu.querySelector("#editmenu-undo");
+  let cmdDelete = searchContextMenu.querySelector("#editmenu-delete");
+  let cmdSelectAll = searchContextMenu.querySelector("#editmenu-selectAll");
+  let cmdCut = searchContextMenu.querySelector("#editmenu-cut");
+  let cmdCopy = searchContextMenu.querySelector("#editmenu-copy");
+  let cmdPaste = searchContextMenu.querySelector("#editmenu-paste");
 
   is(cmdUndo.getAttribute("disabled"), "true", "cmdUndo is disabled");
   is(cmdDelete.getAttribute("disabled"), "true", "cmdDelete is disabled");
@@ -49,25 +47,40 @@
   is(cmdPaste.getAttribute("disabled"), "", "cmdPaste is enabled");
 
   info("Closing context menu");
-  const onContextMenuHidden = once(searchContextMenu, "popuphidden");
-  searchContextMenu.hidePopup();
-  await onContextMenuHidden;
+  let onContextMenuClose = toolbox.once("menu-close");
+  EventUtils.sendKey("ESCAPE", toolbox.win);
+  await onContextMenuClose;
 
   info("Copy text in search field using the context menu");
   searchBox.setUserInput(TEST_INPUT);
   searchBox.select();
   searchBox.focus();
-  EventUtils.synthesizeMouse(searchBox, 2, 2,
-    {type: "contextmenu", button: 2}, win);
-  await onContextMenuPopup;
+
+  onContextMenuOpen = toolbox.once("menu-open");
+  synthesizeContextMenuEvent(searchBox);
+  await onContextMenuOpen;
+
+  searchContextMenu = toolbox.doc.getElementById("toolbox-menu");
+  cmdCopy = searchContextMenu.querySelector("#editmenu-copy");
   await waitForClipboardPromise(() => cmdCopy.click(), TEST_INPUT);
-  searchContextMenu.hidePopup();
-  await onContextMenuHidden;
+
+  onContextMenuClose = toolbox.once("menu-close");
+  EventUtils.sendKey("ESCAPE", toolbox.win);
+  await onContextMenuClose;
 
   info("Reopen context menu and check command properties");
-  EventUtils.synthesizeMouse(searchBox, 2, 2,
-    {type: "contextmenu", button: 2}, win);
-  await onContextMenuPopup;
+
+  onContextMenuOpen = toolbox.once("menu-open");
+  synthesizeContextMenuEvent(searchBox);
+  await onContextMenuOpen;
+
+  searchContextMenu = toolbox.doc.getElementById("toolbox-menu");
+  cmdUndo = searchContextMenu.querySelector("#editmenu-undo");
+  cmdDelete = searchContextMenu.querySelector("#editmenu-delete");
+  cmdSelectAll = searchContextMenu.querySelector("#editmenu-selectAll");
+  cmdCut = searchContextMenu.querySelector("#editmenu-cut");
+  cmdCopy = searchContextMenu.querySelector("#editmenu-copy");
+  cmdPaste = searchContextMenu.querySelector("#editmenu-paste");
 
   is(cmdUndo.getAttribute("disabled"), "", "cmdUndo is enabled");
   is(cmdDelete.getAttribute("disabled"), "", "cmdDelete is enabled");
@@ -76,6 +89,10 @@
   is(cmdCopy.getAttribute("disabled"), "", "cmdCopy is enabled");
   is(cmdPaste.getAttribute("disabled"), "", "cmdPaste is enabled");
 
+  const onContextMenuHidden = toolbox.once("menu-close");
+  EventUtils.sendKey("ESCAPE", toolbox.win);
+  await onContextMenuHidden;
+
   // We have to wait for search query to avoid test failure.
   info("Waiting for search query to complete and getting the suggestions");
   await inspector.searchSuggestions._lastQuery;
diff --git a/devtools/client/inspector/test/browser_inspector_textbox-menu.js b/devtools/client/inspector/test/browser_inspector_textbox-menu.js
--- a/devtools/client/inspector/test/browser_inspector_textbox-menu.js
+++ b/devtools/client/inspector/test/browser_inspector_textbox-menu.js
@@ -80,21 +80,23 @@
   EventUtils.synthesizeMouseAtCenter(tag, {}, inspector.panelWin);
 });
 
-async function checkTextBox(textBox, {textBoxContextMenuPopup}) {
-  is(textBoxContextMenuPopup.state, "closed", "The menu is closed");
+async function checkTextBox(textBox, toolbox) {
+  let textboxContextMenu = toolbox.doc.getElementById("toolbox-menu");
+  ok(!textboxContextMenu, "The menu is  closed");
 
   info("Simulating context click on the textbox and expecting the menu to open");
-  const onContextMenu = once(textBoxContextMenuPopup, "popupshown");
-  EventUtils.synthesizeMouse(textBox, 2, 2, {type: "contextmenu", button: 2},
-                             textBox.ownerDocument.defaultView);
+  const onContextMenu = toolbox.once("menu-open");
+  synthesizeContextMenuEvent(textBox);
   await onContextMenu;
 
-  is(textBoxContextMenuPopup.state, "open", "The menu is now visible");
+  textboxContextMenu = toolbox.doc.getElementById("toolbox-menu");
+  ok(textboxContextMenu, "The menu is now visible");
 
   info("Closing the menu");
-  const onContextMenuHidden = once(textBoxContextMenuPopup, "popuphidden");
-  textBoxContextMenuPopup.hidePopup();
+  const onContextMenuHidden = toolbox.once("menu-close");
+  EventUtils.sendKey("ESCAPE", toolbox.win);
   await onContextMenuHidden;
 
-  is(textBoxContextMenuPopup.state, "closed", "The menu is closed again");
+  textboxContextMenu = toolbox.doc.getElementById("toolbox-menu");
+  ok(!textboxContextMenu, "The menu is closed again");
 }
diff --git a/devtools/client/jar.mn b/devtools/client/jar.mn
--- a/devtools/client/jar.mn
+++ b/devtools/client/jar.mn
@@ -56,7 +56,7 @@
     content/memory/index.xhtml (memory/index.xhtml)
     content/framework/toolbox-window.xul (framework/toolbox-window.xul)
     content/framework/toolbox-options.xhtml (framework/toolbox-options.xhtml)
-*   content/framework/toolbox.xul (framework/toolbox.xul)
+    content/framework/toolbox.xul (framework/toolbox.xul)
     content/framework/toolbox-init.js (framework/toolbox-init.js)
     content/framework/options-panel.css (framework/options-panel.css)
     content/framework/toolbox-process-window.html (framework/toolbox-process-window.html)
diff --git a/devtools/client/webconsole/components/JSTerm.js b/devtools/client/webconsole/components/JSTerm.js
--- a/devtools/client/webconsole/components/JSTerm.js
+++ b/devtools/client/webconsole/components/JSTerm.js
@@ -1579,13 +1579,7 @@
   }
 
   onContextMenu(e) {
-    // The toolbox does it's own edit menu handling with
-    // toolbox-textbox-context-popup and friends. For now, fall
-    // back to use that if running inside the toolbox, but use our
-    // own menu when running in the Browser Console (see Bug 1476097).
-    if (this.props.hud.isBrowserConsole) {
-      this.props.serviceContainer.openEditContextMenu(e);
-    }
+    this.props.serviceContainer.openEditContextMenu(e);
   }
 
   destroy() {
diff --git a/devtools/client/webconsole/utils/context-menu.js b/devtools/client/webconsole/utils/context-menu.js
--- a/devtools/client/webconsole/utils/context-menu.js
+++ b/devtools/client/webconsole/utils/context-menu.js
@@ -198,76 +198,3 @@
 }
 
 exports.createContextMenu = createContextMenu;
-
-/**
- * Return an 'edit' menu for a input field. This integrates directly
- * with docshell commands to provide the right enabled state and editor
- * functionality.
- *
- * You'll need to call menu.popup() yourself, this just returns the Menu instance.
- *
- * @returns {Menu}
- */
-function createEditContextMenu() {
-  const docshell = window.docShell;
-  const menu = new Menu({
-    id: "webconsole-menu",
-  });
-  menu.append(new MenuItem({
-    id: "editmenu-undo",
-    l10nID: "editmenu-undo",
-    disabled: !docshell.isCommandEnabled("cmd_undo"),
-    click: () => {
-      docshell.doCommand("cmd_undo");
-    },
-  }));
-  menu.append(new MenuItem({
-    type: "separator",
-  }));
-  menu.append(new MenuItem({
-    id: "editmenu-cut",
-    l10nID: "editmenu-cut",
-    disabled: !docshell.isCommandEnabled("cmd_cut"),
-    click: () => {
-      docshell.doCommand("cmd_cut");
-    },
-  }));
-  menu.append(new MenuItem({
-    id: "editmenu-copy",
-    l10nID: "editmenu-copy",
-    disabled: !docshell.isCommandEnabled("cmd_copy"),
-    click: () => {
-      docshell.doCommand("cmd_copy");
-    },
-  }));
-  menu.append(new MenuItem({
-    id: "editmenu-paste",
-    l10nID: "editmenu-paste",
-    disabled: !docshell.isCommandEnabled("cmd_paste"),
-    click: () => {
-      docshell.doCommand("cmd_paste");
-    },
-  }));
-  menu.append(new MenuItem({
-    id: "editmenu-delete",
-    l10nID: "editmenu-delete",
-    disabled: !docshell.isCommandEnabled("cmd_delete"),
-    click: () => {
-      docshell.doCommand("cmd_delete");
-    },
-  }));
-  menu.append(new MenuItem({
-    type: "separator",
-  }));
-  menu.append(new MenuItem({
-    id: "editmenu-selectAll",
-    l10nID: "editmenu-select-all",
-    disabled: !docshell.isCommandEnabled("cmd_selectAll"),
-    click: () => {
-      docshell.doCommand("cmd_selectAll");
-    },
-  }));
-  return menu;
-}
-
-exports.createEditContextMenu = createEditContextMenu;
diff --git a/devtools/client/webconsole/webconsole-output-wrapper.js b/devtools/client/webconsole/webconsole-output-wrapper.js
--- a/devtools/client/webconsole/webconsole-output-wrapper.js
+++ b/devtools/client/webconsole/webconsole-output-wrapper.js
@@ -10,7 +10,8 @@
 const { Provider } = require("devtools/client/shared/vendor/react-redux");
 
 const actions = require("devtools/client/webconsole/actions/index");
-const { createContextMenu, createEditContextMenu } = require("devtools/client/webconsole/utils/context-menu");
+const { createEditContextMenu } = require("devtools/client/framework/toolbox-context-menu");
+const { createContextMenu } = require("devtools/client/webconsole/utils/context-menu");
 const { configureStore } = require("devtools/client/webconsole/store");
 
 const { isPacketPrivate } = require("devtools/client/webconsole/utils/messages");
@@ -164,7 +165,7 @@
 
       serviceContainer.openEditContextMenu = (e) => {
         const { screenX, screenY } = e;
-        const menu = createEditContextMenu();
+        const menu = createEditContextMenu(window, "webconsole-menu");
         // Emit the "menu-open" event for testing.
         menu.once("open", () => this.emit("menu-open"));
         menu.popup(screenX, screenY, { doc: this.owner.chromeWindow.document });
diff --git a/toolkit/locales/en-US/toolkit/main-window/editmenu.ftl b/toolkit/locales/en-US/toolkit/main-window/editmenu.ftl
--- a/toolkit/locales/en-US/toolkit/main-window/editmenu.ftl
+++ b/toolkit/locales/en-US/toolkit/main-window/editmenu.ftl
@@ -3,7 +3,7 @@
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 ### This file contains the entities needed for the 'edit' menu
-### It's currently only used for the Browser Console
+### It's currently only used for the Browser Console and Developer Toolbox
 
 editmenu-undo =
     .label = Undo

