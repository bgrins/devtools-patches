# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  64a820618adbdf7ffb9bbd4103f13804983dc916
asdf

diff --git a/browser/devtools/debugger/test/browser_dbg_on-pause-highlight.js b/browser/devtools/debugger/test/browser_dbg_on-pause-highlight.js
--- a/browser/devtools/debugger/test/browser_dbg_on-pause-highlight.js
+++ b/browser/devtools/debugger/test/browser_dbg_on-pause-highlight.js
@@ -39,23 +39,26 @@ function testPause() {
       ok(gToolboxTab.hasAttribute("highlighted") &&
          gToolboxTab.getAttribute("highlighted") == "true",
         "The highlighted class is present");
       ok(gToolboxTab.hasAttribute("selected") &&
          gToolboxTab.getAttribute("selected") == "true",
         "...and the tab is selected, so the glow will not be present.");
     }).then(testResume);
   });
+  // gDebugger.document.getElementById("resume").mousedown();
 
   EventUtils.sendMouseEvent({ type: "mousedown" },
     gDebugger.document.getElementById("resume"),
     gDebugger);
 
   // Evaluate a script to fully pause the debugger
-  evalInTab(gTab, "1+1;");
+  executeSoon(() => {
+    evalInTab(gTab, "1+1;");
+  });
 }
 
 function testResume() {
   gDebugger.gThreadClient.addOneTimeListener("resumed", () => {
     gToolbox.selectTool("webconsole").then(() => {
       ok(!gToolboxTab.classList.contains("highlighted"),
         "The highlighted class is not present now after the resume");
       ok(!gToolboxTab.hasAttribute("selected") ||
diff --git a/browser/devtools/debugger/test/browser_dbg_pause-no-step.js b/browser/devtools/debugger/test/browser_dbg_pause-no-step.js
--- a/browser/devtools/debugger/test/browser_dbg_pause-no-step.js
+++ b/browser/devtools/debugger/test/browser_dbg_pause-no-step.js
@@ -54,17 +54,19 @@ function testPause() {
 
   ok(!gDebugger.gThreadClient.paused,
     "Shouldn't be paused until the next script is executed.");
   ok(gStepOutButton.disabled, "Stepping out button should be disabled");
   ok(gStepInButton.disabled, "Stepping in button should be disabled");
   ok(gStepOverButton.disabled, "Stepping over button should be disabled");
 
   // Evaluate a script to fully pause the debugger
-  evalInTab(gTab, "1+1;");
+  executeSoon(() => {
+    evalInTab(gTab, "1+1;");
+  });
 }
 
 function testBreakAtLocation() {
   gDebugger.gThreadClient.addOneTimeListener("paused", () => {
     ok(!gStepOutButton.disabled, "Stepping out button should be enabled");
     ok(!gStepInButton.disabled, "Stepping in button should be enabled");
     ok(!gStepOverButton.disabled, "Stepping over button should be enabled");
 
diff --git a/browser/devtools/debugger/test/browser_dbg_pause-resume.js b/browser/devtools/debugger/test/browser_dbg_pause-resume.js
--- a/browser/devtools/debugger/test/browser_dbg_pause-resume.js
+++ b/browser/devtools/debugger/test/browser_dbg_pause-resume.js
@@ -49,17 +49,19 @@ function testPause() {
 
   EventUtils.sendMouseEvent({ type: "mousedown" }, gResumeButton, gDebugger);
 
   is(gResumeButton.getAttribute("tooltiptext"),
      gDebugger.L10N.getFormatStr("pausePendingButtonTooltip"),
     "Button tooltip should be 'waiting for execution' when breaking on nex.");
 
   // Evaluate a script to fully pause the debugger
-  evalInTab(gTab, "1+1;");
+  executeSoon(() => {
+    evalInTab(gTab, "1+1;");
+  });
 }
 
 function testResume() {
   gDebugger.gThreadClient.addOneTimeListener("resumed", () => {
     is(gDebugger.gThreadClient.paused, false,
       "Should be paused after an interrupt request.");
 
     is(gResumeButton.getAttribute("tooltiptext"),
diff --git a/browser/devtools/debugger/test/browser_dbg_pause-warning.js b/browser/devtools/debugger/test/browser_dbg_pause-warning.js
--- a/browser/devtools/debugger/test/browser_dbg_pause-warning.js
+++ b/browser/devtools/debugger/test/browser_dbg_pause-warning.js
@@ -33,17 +33,19 @@ function testPause() {
     gToolbox.selectTool("inspector");
   });
 
   EventUtils.sendMouseEvent({ type: "mousedown" },
     gDebugger.document.getElementById("resume"),
     gDebugger);
 
   // Evaluate a script to fully pause the debugger
-  evalInTab(gTab, "1+1;");
+  executeSoon(() => {
+    evalInTab(gTab, "1+1;");
+  });
 }
 
 function testNotificationIsUp1() {
   let notificationBox = gToolbox.getNotificationBox();
   let notification = notificationBox.getNotificationWithValue("inspector-script-paused");
 
   ok(notification,
     "Inspector notification is present (1).");
