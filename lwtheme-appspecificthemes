# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  344aa47a42b7a51c21029028745cdb196604d0e5
Bug 1094821 - Make it possible for an application to load extra themes to the front of LightweightThemeManager.usedThemes;r=Unfocused

diff --git a/toolkit/mozapps/extensions/LightweightThemeManager.jsm b/toolkit/mozapps/extensions/LightweightThemeManager.jsm
--- a/toolkit/mozapps/extensions/LightweightThemeManager.jsm
+++ b/toolkit/mozapps/extensions/LightweightThemeManager.jsm
@@ -90,23 +90,30 @@ var _themeIDBeingDisabled = null;
       _prefs.setCharPref("selectedThemeID", themes[0].id);
     }
   }
 })();
 
 this.LightweightThemeManager = {
   get name() "LightweightThemeManager",
 
+  // Themes that can be added for an application.  They can't be removed, and
+  // will always show up at the top of the list.
+  appSpecificThemes: [],
+
   get usedThemes () {
+    let themes = [];
     try {
-      return JSON.parse(_prefs.getComplexValue("usedThemes",
-                                               Ci.nsISupportsString).data);
-    } catch (e) {
-      return [];
-    }
+      themes = JSON.parse(_prefs.getComplexValue("usedThemes",
+                                                 Ci.nsISupportsString).data);
+    } catch (e) { }
+
+
+    themes = this.appSpecificThemes.concat(themes);
+    return themes;
   },
 
   get currentTheme () {
     let selectedThemeID = null;
     try {
       selectedThemeID = _prefs.getCharPref("selectedThemeID");
     } catch (e) {}
 
@@ -705,16 +712,23 @@ function _usedThemesExceptId(aId)
 
 function _version(aThemeData)
   aThemeData.version || "";
 
 function _makeURI(aURL, aBaseURI)
   Services.io.newURI(aURL, null, aBaseURI);
 
 function _updateUsedThemes(aList) {
+  // Remove app-specific themes before saving them to the usedThemes pref.
+  LightweightThemeManager.appSpecificThemes.forEach(appSpecificTheme=> {
+    aList = aList.filter(theme=> {
+      return theme.id != appSpecificTheme.id;
+    })
+  });
+
   // Send uninstall events for all themes that need to be removed.
   while (aList.length > _maxUsedThemes) {
     let wrapper = new AddonWrapper(aList[aList.length - 1]);
     AddonManagerPrivate.callAddonListeners("onUninstalling", wrapper, false);
     aList.pop();
     AddonManagerPrivate.callAddonListeners("onUninstalled", wrapper);
   }
 
diff --git a/toolkit/mozapps/extensions/test/xpcshell/test_LightweightThemeManager.js b/toolkit/mozapps/extensions/test/xpcshell/test_LightweightThemeManager.js
--- a/toolkit/mozapps/extensions/test/xpcshell/test_LightweightThemeManager.js
+++ b/toolkit/mozapps/extensions/test/xpcshell/test_LightweightThemeManager.js
@@ -506,9 +506,41 @@ function run_test() {
 
   ltm.currentTheme = dummy("x33");
 
   do_check_eq(ltm.usedThemes.length, 32);
 
   Services.prefs.clearUserPref("lightweightThemes.maxUsedThemes");
 
   do_check_eq(ltm.usedThemes.length, 30);
+
+  let usedThemes = ltm.usedThemes;
+  for (theme of usedThemes) {
+    ltm.forgetUsedTheme(theme.id);
+  }
+
+  // Check appSpecificTheme functionality for Bug 1094821
+  do_check_true(Array.isArray(ltm.appSpecificThemes));
+  do_check_eq(ltm.appSpecificThemes.length, 0);
+  do_check_eq(ltm.usedThemes.length, 0);
+
+  ltm.appSpecificThemes.push(dummy("appSpecificTheme0"));
+  do_check_eq(ltm.appSpecificThemes.length, 1);
+  do_check_eq(ltm.usedThemes.length, 1);
+  do_check_eq(ltm.usedThemes[0].id, "appSpecificTheme0");
+
+  ltm.appSpecificThemes.push(dummy("appSpecificTheme1"));
+  do_check_eq(ltm.appSpecificThemes.length, 2);
+  do_check_eq(ltm.usedThemes.length, 2);
+  do_check_eq(ltm.usedThemes[1].id, "appSpecificTheme1");
+
+  ltm.currentTheme = dummy("x0");
+  do_check_eq(ltm.appSpecificThemes.length, 2);
+  do_check_eq(ltm.usedThemes.length, 3);
+  do_check_eq(ltm.usedThemes[2].id, "x0");
+  do_check_eq(ltm.currentTheme.id, "x0");
+
+  ltm.forgetUsedTheme("x0");
+  ltm.appSpecificThemes = [];
+  do_check_eq(ltm.appSpecificThemes.length, 0);
+  do_check_eq(ltm.usedThemes.length, 0);
+  do_check_eq(ltm.currentTheme, null);
 }
