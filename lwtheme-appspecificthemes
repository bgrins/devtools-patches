# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  d21015ef5959bd78c5aee75241bf46b22d532369
Bug 1094821 - Make it possible for an application to load extra themes into LightweightThemeManager.usedThemes;r=Gijs

When calling addAppSpecificTheme, theme objects are stored in a Map keyed on ID
and are appended onto the usedThemes array.  These aren't removeable and don't
get stored in the pref.

diff --git a/toolkit/mozapps/extensions/LightweightThemeManager.jsm b/toolkit/mozapps/extensions/LightweightThemeManager.jsm
--- a/toolkit/mozapps/extensions/LightweightThemeManager.jsm
+++ b/toolkit/mozapps/extensions/LightweightThemeManager.jsm
@@ -90,23 +90,29 @@ var _themeIDBeingDisabled = null;
       _prefs.setCharPref("selectedThemeID", themes[0].id);
     }
   }
 })();
 
 this.LightweightThemeManager = {
   get name() "LightweightThemeManager",
 
+  // Themes that can be added for an application.  They can't be removed, and
+  // will always show up at the top of the list.
+  _appSpecificThemes: new Map(),
+
   get usedThemes () {
+    let themes = [];
     try {
-      return JSON.parse(_prefs.getComplexValue("usedThemes",
-                                               Ci.nsISupportsString).data);
-    } catch (e) {
-      return [];
-    }
+      themes = JSON.parse(_prefs.getComplexValue("usedThemes",
+                                                 Ci.nsISupportsString).data);
+    } catch (e) { }
+
+    themes.push(...this._appSpecificThemes.values());
+    return themes;
   },
 
   get currentTheme () {
     let selectedThemeID = null;
     try {
       selectedThemeID = _prefs.getCharPref("selectedThemeID");
     } catch (e) {}
 
@@ -147,32 +153,56 @@ this.LightweightThemeManager = {
       if (usedTheme.id == aId)
         return usedTheme;
     }
     return null;
   },
 
   forgetUsedTheme: function LightweightThemeManager_forgetUsedTheme(aId) {
     let theme = this.getUsedTheme(aId);
-    if (!theme)
+    if (!theme || LightweightThemeManager._appSpecificThemes.has(theme.id))
       return;
 
     let wrapper = new AddonWrapper(theme);
     AddonManagerPrivate.callAddonListeners("onUninstalling", wrapper, false);
 
     var currentTheme = this.currentTheme;
     if (currentTheme && currentTheme.id == aId) {
       this.themeChanged(null);
       AddonManagerPrivate.notifyAddonChanged(null, ADDON_TYPE, false);
     }
 
     _updateUsedThemes(_usedThemesExceptId(aId));
     AddonManagerPrivate.callAddonListeners("onUninstalled", wrapper);
   },
 
+  addAppSpecificTheme: function LightweightThemeManager_addAppSpecificTheme(theme) {
+    if (!theme || !theme.id || this.usedThemes.some(t => t.id == theme.id)) {
+      throw new Error("Trying to add invalid app specific theme");
+    }
+
+    this._appSpecificThemes.set(theme.id, theme);
+  },
+
+  forgetAppSpecificTheme: function LightweightThemeManager_forgetAppSpecificTheme(id) {
+    if (!this._appSpecificThemes.has(id)) {
+      let currentTheme = this.currentTheme;
+      if (currentTheme && currentTheme.id == id) {
+        this.currentTheme = null;
+      }
+    }
+    return this._appSpecificThemes.delete(id);
+  },
+
+  clearAppSpecificThemes: function LightweightThemeManager_clearAppSpecificThemes() {
+    for (let id of this._appSpecificThemes.keys()) {
+      this.forgetAppSpecificTheme(id);
+    }
+  },
+
   previewTheme: function LightweightThemeManager_previewTheme(aData) {
     let cancel = Cc["@mozilla.org/supports-PRBool;1"].createInstance(Ci.nsISupportsPRBool);
     cancel.data = false;
     Services.obs.notifyObservers(cancel, "lightweight-theme-preview-requested",
                                  JSON.stringify(aData));
     if (cancel.data)
       return;
 
@@ -488,17 +518,21 @@ function AddonWrapper(aTheme) {
 
   this.__defineGetter__("size", function AddonWrapper_sizeGetter() {
     // The size changes depending on whether the theme is in use or not, this is
     // probably not worth exposing.
     return null;
   });
 
   this.__defineGetter__("permissions", function AddonWrapper_permissionsGetter() {
-    let permissions = AddonManager.PERM_CAN_UNINSTALL;
+    let permissions = 0;
+
+    // Do not allow uninstall of app specific themes.
+    if (!LightweightThemeManager._appSpecificThemes.has(aTheme.id))
+      permissions = AddonManager.PERM_CAN_UNINSTALL;
     if (this.userDisabled)
       permissions |= AddonManager.PERM_CAN_ENABLE;
     else
       permissions |= AddonManager.PERM_CAN_DISABLE;
     return permissions;
   });
 
   this.__defineGetter__("userDisabled", function AddonWrapper_userDisabledGetter() {
@@ -705,16 +739,19 @@ function _usedThemesExceptId(aId)
 
 function _version(aThemeData)
   aThemeData.version || "";
 
 function _makeURI(aURL, aBaseURI)
   Services.io.newURI(aURL, null, aBaseURI);
 
 function _updateUsedThemes(aList) {
+  // Remove app-specific themes before saving them to the usedThemes pref.
+  aList = aList.filter(theme => !LightweightThemeManager._appSpecificThemes.has(theme.id));
+
   // Send uninstall events for all themes that need to be removed.
   while (aList.length > _maxUsedThemes) {
     let wrapper = new AddonWrapper(aList[aList.length - 1]);
     AddonManagerPrivate.callAddonListeners("onUninstalling", wrapper, false);
     aList.pop();
     AddonManagerPrivate.callAddonListeners("onUninstalled", wrapper);
   }
 
diff --git a/toolkit/mozapps/extensions/test/xpcshell/test_LightweightThemeManager.js b/toolkit/mozapps/extensions/test/xpcshell/test_LightweightThemeManager.js
--- a/toolkit/mozapps/extensions/test/xpcshell/test_LightweightThemeManager.js
+++ b/toolkit/mozapps/extensions/test/xpcshell/test_LightweightThemeManager.js
@@ -14,28 +14,30 @@ function dummy(id) {
     name: Math.random().toString(),
     headerURL: "http://lwttest.invalid/a.png",
     footerURL: "http://lwttest.invalid/b.png",
     textcolor: Math.random().toString(),
     accentcolor: Math.random().toString()
   };
 }
 
+function hasPermission(aAddon, aPerm) {
+  var perm = AddonManager["PERM_CAN_" + aPerm.toUpperCase()];
+  return !!(aAddon.permissions & perm);
+}
+
 function run_test() {
   createAppInfo("xpcshell@tests.mozilla.org", "XPCShell", "1", "1.9");
   startupManager();
 
   Services.prefs.setIntPref("lightweightThemes.maxUsedThemes", 8);
 
-  var temp = {};
-  Components.utils.import("resource://gre/modules/LightweightThemeManager.jsm", temp);
-  do_check_eq(typeof temp.LightweightThemeManager, "object");
+  let {LightweightThemeManager: ltm} = Components.utils.import("resource://gre/modules/LightweightThemeManager.jsm", {});
 
-  var ltm = temp.LightweightThemeManager;
-
+  do_check_eq(typeof ltm, "object");
   do_check_eq(typeof ltm.usedThemes, "object");
   do_check_eq(ltm.usedThemes.length, 0);
   do_check_eq(ltm.currentTheme, null);
 
   ltm.previewTheme(dummy("preview0"));
   do_check_eq(ltm.usedThemes.length, 0);
   do_check_eq(ltm.currentTheme, null);
 
@@ -506,9 +508,87 @@ function run_test() {
 
   ltm.currentTheme = dummy("x33");
 
   do_check_eq(ltm.usedThemes.length, 32);
 
   Services.prefs.clearUserPref("lightweightThemes.maxUsedThemes");
 
   do_check_eq(ltm.usedThemes.length, 30);
+
+  let usedThemes = ltm.usedThemes;
+  for (let theme of usedThemes) {
+    ltm.forgetUsedTheme(theme.id);
+  }
+
+  // Check appSpecificTheme functionality for Bug 1094821
+  do_check_eq(ltm._appSpecificThemes.toString(), "[object Map]");
+  do_check_eq([...ltm._appSpecificThemes.entries()].length, 0);
+  do_check_eq(ltm.usedThemes.length, 0);
+
+  ltm.addAppSpecificTheme(dummy("appSpecificTheme0"));
+  do_check_eq([...ltm._appSpecificThemes].length, 1);
+  do_check_eq(ltm.usedThemes.length, 1);
+  do_check_eq(ltm.usedThemes[0].id, "appSpecificTheme0");
+
+  ltm.addAppSpecificTheme(dummy("appSpecificTheme1"));
+  do_check_eq([...ltm._appSpecificThemes].length, 2);
+  do_check_eq(ltm.usedThemes.length, 2);
+  do_check_eq(ltm.usedThemes[1].id, "appSpecificTheme1");
+
+  // Clear all and then re-add
+  ltm.clearAppSpecificThemes();
+  do_check_eq([...ltm._appSpecificThemes].length, 0);
+  do_check_eq(ltm.usedThemes.length, 0);
+
+  ltm.addAppSpecificTheme(dummy("appSpecificTheme0"));
+  ltm.addAppSpecificTheme(dummy("appSpecificTheme1"));
+  do_check_eq([...ltm._appSpecificThemes].length, 2);
+  do_check_eq(ltm.usedThemes.length, 2);
+
+  do_test_pending();
+
+  AddonManager.getAddonByID("appSpecificTheme0@personas.mozilla.org", aAddon => {
+    // App specific theme can't be uninstalled or disabled,
+    // but can be enabled (since it isn't already applied).
+    do_check_eq(hasPermission(aAddon, "uninstall"), false);
+    do_check_eq(hasPermission(aAddon, "disable"), false);
+    do_check_eq(hasPermission(aAddon, "enable"), true);
+
+    ltm.currentTheme = dummy("x0");
+    do_check_eq([...ltm._appSpecificThemes].length, 2);
+    do_check_eq(ltm.usedThemes.length, 3);
+    do_check_eq(ltm.usedThemes[0].id, "x0");
+    do_check_eq(ltm.currentTheme.id, "x0");
+    do_check_eq(ltm.usedThemes[1].id, "appSpecificTheme0");
+    do_check_eq(ltm.usedThemes[2].id, "appSpecificTheme1");
+
+    AddonManager.getAddonByID("x0@personas.mozilla.org", aAddon => {
+      // Currently applied (non-app-specific) can be uninstalled or disabled,
+      // but can't be enabled (since it's already applied).
+      do_check_eq(hasPermission(aAddon, "uninstall"), true);
+      do_check_eq(hasPermission(aAddon, "disable"), true);
+      do_check_eq(hasPermission(aAddon, "enable"), false);
+
+      ltm.forgetUsedTheme("x0");
+      do_check_eq(ltm.currentTheme, null);
+
+      ltm.currentTheme = ltm.getUsedTheme("appSpecificTheme0");
+
+      Assert.throws(() => { ltm.addAppSpecificTheme("appSpecificTheme0") },
+        "Exception is thrown adding duplicate theme");
+      do_check_true(ltm.forgetAppSpecificTheme("appSpecificTheme0"));
+
+      do_check_eq([...ltm._appSpecificThemes].length, 1);
+      do_check_eq(ltm.usedThemes.length, 1);
+      do_check_eq(ltm.currentTheme, null);
+
+      do_check_true(ltm.forgetAppSpecificTheme("appSpecificTheme1"));
+      do_check_false(ltm.forgetAppSpecificTheme("not-an-existing-theme-id"));
+
+      do_check_eq([...ltm._appSpecificThemes].length, 0);
+      do_check_eq(ltm.usedThemes.length, 0);
+      do_check_eq(ltm.currentTheme, null);
+
+      do_test_finished();
+    });
+  });
 }
