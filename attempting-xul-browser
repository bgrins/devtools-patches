# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  a3f97563ae43082307c14159cb2e1971368c4ef2

diff --git a/devtools/client/framework/toolbox-hosts.js b/devtools/client/framework/toolbox-hosts.js
--- a/devtools/client/framework/toolbox-hosts.js
+++ b/devtools/client/framework/toolbox-hosts.js
@@ -53,17 +53,22 @@ BottomHost.prototype = {
     this._browserContainer =
       gBrowser.getBrowserContainer(this.hostTab.linkedBrowser);
 
     this._splitter = ownerDocument.createXULElement("splitter");
     this._splitter.setAttribute("class", "devtools-horizontal-splitter");
     // Avoid resizing notification containers
     this._splitter.setAttribute("resizebefore", "flex");
 
-    this.frame = ownerDocument.createXULElement("iframe");
+    this.frame = ownerDocument.createXULElement("browser");
+    this.frame.setAttribute("disablehistory", "true");
+    this.frame.setAttribute("nodefaultsrc", "true");
+    this.frame.setAttribute("transparent", "true");
+    this.frame.setAttribute("selectmenulist", "ContentSelectDropdown");
+    this.frame.setAttribute("autocompletepopup", "PopupAutoComplete");
     this.frame.setAttribute("type", "content");
     this.frame.flex = 1; // Required to be able to shrink when the window shrinks
     this.frame.className = "devtools-toolbox-bottom-iframe";
     this.frame.height = Math.min(
       Services.prefs.getIntPref(this.heightPref),
       this._browserContainer.clientHeight - MIN_PAGE_SIZE
     );
 
@@ -140,17 +145,22 @@ class SidebarHost {
     const gBrowser = this.hostTab.ownerDocument.defaultView.gBrowser;
     const ownerDocument = gBrowser.ownerDocument;
     this._browserContainer = gBrowser.getBrowserContainer(this.hostTab.linkedBrowser);
     this._browserPanel = gBrowser.getPanel(this.hostTab.linkedBrowser);
 
     this._splitter = ownerDocument.createXULElement("splitter");
     this._splitter.setAttribute("class", "devtools-side-splitter");
 
-    this.frame = ownerDocument.createXULElement("iframe");
+    this.frame = ownerDocument.createXULElement("browser");
+    this.frame.setAttribute("disablehistory", "true");
+    this.frame.setAttribute("nodefaultsrc", "true");
+    this.frame.setAttribute("transparent", "true");
+    this.frame.setAttribute("selectmenulist", "ContentSelectDropdown");
+    this.frame.setAttribute("autocompletepopup", "PopupAutoComplete");
     this.frame.setAttribute("type", "content");
     this.frame.flex = 1; // Required to be able to shrink when the window shrinks
     this.frame.className = "devtools-toolbox-side-iframe";
 
     this.frame.width = Math.min(
       Services.prefs.getIntPref(this.widthPref),
       this._browserPanel.clientWidth - MIN_PAGE_SIZE
     );
diff --git a/devtools/client/framework/toolbox.js b/devtools/client/framework/toolbox.js
--- a/devtools/client/framework/toolbox.js
+++ b/devtools/client/framework/toolbox.js
@@ -500,27 +500,29 @@ Toolbox.prototype = {
       Services.prefs.addObserver("devtools.cache.disabled", this._applyCacheSettings);
       Services.prefs.addObserver("devtools.serviceWorkers.testing.enabled",
                                  this._applyServiceWorkersTestingSettings);
 
       // Register listener for handling context menus in standard
       // input elements: <input> and <textarea>.
       // There is also support for custom input elements using
       // .devtools-input class (e.g. CodeMirror instances).
-      this.doc.addEventListener("contextmenu", (e) => {
+      console.log("Adding context menu listener", this._win.location.toString());
+      this._win.addEventListener("contextmenu", (e) => {
+        console.log("Added context menu listener", e);
         if (e.originalTarget.closest("input[type=text]") ||
             e.originalTarget.closest("input[type=search]") ||
             e.originalTarget.closest("input:not([type])") ||
             e.originalTarget.closest(".devtools-input") ||
             e.originalTarget.closest("textarea")) {
           e.stopPropagation();
           e.preventDefault();
           this.openTextBoxContextMenu(e.screenX, e.screenY);
         }
-      });
+      }, true);
 
       this.shortcuts = new KeyShortcuts({
         window: this.doc.defaultView,
       });
       // Get the DOM element to mount the ToolboxController to.
       this._componentMount = this.doc.getElementById("toolbox-toolbar-mount");
 
       this._mountReactComponent();
@@ -1821,17 +1823,17 @@ Toolbox.prototype = {
       // Retrieve the tool definition (from the global or the per-toolbox tool maps)
       const definition = this.getToolDefinition(id);
 
       if (!definition) {
         reject(new Error("no such tool id " + id));
         return;
       }
 
-      iframe = this.doc.createXULElement("iframe");
+      iframe = this.doc.createXULElement("browser");
       iframe.className = "toolbox-panel-iframe";
       iframe.id = "toolbox-panel-iframe-" + id;
       iframe.setAttribute("flex", 1);
       iframe.setAttribute("forceOwnRefreshDriver", "");
       iframe.tooltip = "aHTMLTooltip";
       iframe.style.visibility = "hidden";
 
       gDevTools.emit(id + "-init", this, iframe);
@@ -3123,16 +3125,17 @@ Toolbox.prototype = {
   /**
    * Open the textbox context menu at given coordinates.
    * Panels in the toolbox can call this on contextmenu events with event.screenX/Y
    * instead of having to implement their own copy/paste/selectAll menu.
    * @param {Number} x
    * @param {Number} y
    */
   openTextBoxContextMenu: function(x, y) {
+    console.log("Attempting to create", this.win);
     const menu = createEditContextMenu(this.win, "toolbox-menu");
 
     // Fire event for tests
     menu.once("open", () => this.emit("menu-open"));
     menu.once("close", () => this.emit("menu-close"));
 
     menu.popup(x, y, { doc: this.doc });
   },
