# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  0e2df20590bdee51dbd978b350f050459d040bb7
Bug 1246843 - Set default page in mozscreenshots mochitest as about:home;r=MattN

diff --git a/browser/tools/mozscreenshots/mozscreenshots/extension/TestRunner.jsm b/browser/tools/mozscreenshots/mozscreenshots/extension/TestRunner.jsm
--- a/browser/tools/mozscreenshots/mozscreenshots/extension/TestRunner.jsm
+++ b/browser/tools/mozscreenshots/mozscreenshots/extension/TestRunner.jsm
@@ -5,16 +5,17 @@
 "use strict";
 
 this.EXPORTED_SYMBOLS = ["TestRunner"];
 
 const {classes: Cc, interfaces: Ci, utils: Cu} = Components;
 const defaultSetNames = ["TabsInTitlebar", "Tabs", "WindowSize", "Toolbars", "LightweightThemes"];
 const env = Cc["@mozilla.org/process/environment;1"].getService(Ci.nsIEnvironment);
 
+Cu.import("resource://testing-common/BrowserTestUtils.jsm");
 Cu.import("resource://gre/modules/FileUtils.jsm");
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource://gre/modules/Task.jsm");
 Cu.import("resource://gre/modules/Timer.jsm");
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 Cu.import("resource://gre/modules/osfile.jsm");
 
 Cu.import("chrome://mozscreenshots/content/Screenshot.jsm");
@@ -41,17 +42,17 @@ this.TestRunner = {
 
   init(extensionPath) {
     this._extensionPath = extensionPath;
   },
 
   /**
    * Load specified sets, execute all combinations of them, and capture screenshots.
    */
-  start(setNames = null) {
+  start: Task.async(function*(setNames = null) {
     setNames = setNames || defaultSetNames;
 
     let subDirs = ["mozscreenshots",
                    (new Date()).toISOString().replace(/:/g, "-") + "_" + Services.appinfo.OS];
     let screenshotPath = FileUtils.getFile("TmpD", subDirs).path;
 
     const MOZ_UPLOAD_DIR = env.get("MOZ_UPLOAD_DIR");
     if (MOZ_UPLOAD_DIR) {
@@ -78,28 +79,30 @@ this.TestRunner = {
 
     // Setup some prefs
     Services.prefs.setCharPref("browser.aboutHomeSnippets.updateUrl",
                                "data:text/html;charset=utf-8,Generated by mozscreenshots");
     Services.prefs.setCharPref("extensions.ui.lastCategory", "addons://list/extension");
     // Don't let the caret blink since it causes false positives for image diffs
     Services.prefs.setIntPref("ui.caretBlinkTime", -1);
 
-    return Task.spawn(function* doStart() {
-      for (let i = 0; i < this.combos.length;
-           i++){
-        this.currentComboIndex = i;
-        yield* this._performCombo(this.combos.item(this.currentComboIndex));
-      }
+    let browserWindow = Services.wm.getMostRecentWindow("navigator:browser");
+    let selectedBrowser = browserWindow.gBrowser.selectedBrowser;
+    yield BrowserTestUtils.loadURI(selectedBrowser, "about:home");
+    yield BrowserTestUtils.browserLoaded(selectedBrowser);
 
-      log.info("Done: Completed " + this.completedCombos + " out of " +
-               this.combos.length + " configurations.");
-      this.cleanup();
-    }.bind(this));
-  },
+    for (let i = 0; i < this.combos.length; i++){
+      this.currentComboIndex = i;
+      yield this._performCombo(this.combos.item(this.currentComboIndex));
+    }
+
+    log.info("Done: Completed " + this.completedCombos + " out of " +
+             this.combos.length + " configurations.");
+    this.cleanup();
+  }),
 
   /**
    * Load sets of configurations from JSMs.
    * @param {String[]} setNames - array of set names (e.g. ["Tabs", "WindowSize"].
    * @return {Object[]} Array of sets containing `name` and `configurations` properties.
    */
   loadSets(setNames) {
     let sets = [];
diff --git a/browser/tools/mozscreenshots/mozscreenshots/extension/bootstrap.js b/browser/tools/mozscreenshots/mozscreenshots/extension/bootstrap.js
--- a/browser/tools/mozscreenshots/mozscreenshots/extension/bootstrap.js
+++ b/browser/tools/mozscreenshots/mozscreenshots/extension/bootstrap.js
@@ -57,16 +57,8 @@ function isAppSupported() {
   return true;
 }
 
 function uninstallExtension(data) {
   AddonManager.getAddonByID(data.id, function(addon) {
     addon.uninstall();
   });
 }
-
-function startRun() {
-  let env = Cc["@mozilla.org/process/environment;1"]
-              .getService(Ci.nsIEnvironment);
-  let setsEnv = env.get("MOZSCREENSHOTS_SETS");
-  let sets = setsEnv ? setsEnv.split(",") : null;
-  TestRunner.start(sets);
-}
