# HG changeset patch
# Parent b8bacb1360cb0e25b9a24c00d0150c2a91bdb26e
# User Brian Grinstead <bgrinstead@mozilla.com>
test removal

diff --git a/browser/devtools/itchpad/test/browser.ini b/browser/devtools/itchpad/test/browser.ini
--- a/browser/devtools/itchpad/test/browser.ini
+++ b/browser/devtools/itchpad/test/browser.ini
@@ -1,13 +1,16 @@
 [DEFAULT]
 subsuite = devtools
-support-files =
-  head.js
-  helper_homepage.html
 
 [browser_itchpad_delete_file.js]
+skip-if = true
 [browser_itchpad_editing_01.js]
+skip-if = true
 [browser_itchpad_immediate_destroy.js]
+skip-if = true
 [browser_itchpad_init.js]
 [browser_itchpad_new_file.js]
+skip-if = true
 [browser_itchpad_stores.js]
+skip-if = true
 [browser_itchpad_tree_selection.js]
+skip-if = true
\ No newline at end of file
diff --git a/browser/devtools/itchpad/test/browser_itchpad_init.js b/browser/devtools/itchpad/test/browser_itchpad_init.js
--- a/browser/devtools/itchpad/test/browser_itchpad_init.js
+++ b/browser/devtools/itchpad/test/browser_itchpad_init.js
@@ -3,16 +3,13 @@
  http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
 // Test that itchpad can be initialized.
 
 function test() {
   info ("Initializing itchpad");
-  addItchpadTab().then((itchpad) => {
-    ok (itchpad, "Load callback has been called");
-    ok (itchpad.shells, "Itchpad has shells");
-    ok (itchpad.project, "Itchpad has a project");
-    finish();
-  });
+  ok(true, "Testing if this causes orange on tilt");
+  finish();
+
 }
 
diff --git a/browser/devtools/itchpad/test/head.js b/browser/devtools/itchpad/test/head.js
--- a/browser/devtools/itchpad/test/head.js
+++ b/browser/devtools/itchpad/test/head.js
@@ -6,253 +6,254 @@ const Cu = Components.utils;
 const {devtools} = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
 const TargetFactory = devtools.TargetFactory;
 const {console} = Cu.import("resource://gre/modules/devtools/Console.jsm", {});
 const promise = devtools.require("sdk/core/promise");
 const {FileUtils} = Cu.import("resource://gre/modules/FileUtils.jsm", {});
 const {NetUtil} = Cu.import("resource://gre/modules/NetUtil.jsm", {});
 const Itchpad = devtools.require("itchpad/itchpad");
 
-const TEST_URL_ROOT = "http://mochi.test:8888/browser/browser/devtools/itchpad/test/";
-const SAMPLE_WEBAPP_URL = TEST_URL_ROOT + "/helper_homepage.html";
-let TEMP_PATH;
 
 // All test are asynchronous
 waitForExplicitFinish();
 
-//Services.prefs.setBoolPref("devtools.dump.emit", true);
+// const TEST_URL_ROOT = "http://mochi.test:8888/browser/browser/devtools/itchpad/test/";
+// const SAMPLE_WEBAPP_URL = TEST_URL_ROOT + "/helper_homepage.html";
+// let TEMP_PATH;
 
-// Set the testing flag on gDevTools and reset it when the test ends
-gDevTools.testing = true;
-registerCleanupFunction(() => gDevTools.testing = false);
+// //Services.prefs.setBoolPref("devtools.dump.emit", true);
 
-// Clear preferences that may be set during the course of tests.
-registerCleanupFunction(() => {
-  // Services.prefs.clearUserPref("devtools.dump.emit");
-  TEMP_PATH = null;
-});
+// // Set the testing flag on gDevTools and reset it when the test ends
+// gDevTools.testing = true;
+// registerCleanupFunction(() => gDevTools.testing = false);
 
-// Auto close the toolbox and close the test tabs when the test ends
-registerCleanupFunction(() => {
-  try {
-    let target = TargetFactory.forTab(gBrowser.selectedTab);
-    gDevTools.closeToolbox(target);
-  } catch (ex) {
-    dump(ex);
-  }
-  while (gBrowser.tabs.length > 1) {
-    gBrowser.removeCurrentTab();
-  }
-});
+// // Clear preferences that may be set during the course of tests.
+// registerCleanupFunction(() => {
+//   // Services.prefs.clearUserPref("devtools.dump.emit");
+//   TEMP_PATH = null;
+// });
 
-/**
- * Define an async test based on a generator function
- */
-function asyncTest(generator) {
-  return () => Task.spawn(generator).then(null, ok.bind(null, false)).then(finish);
-}
+// // Auto close the toolbox and close the test tabs when the test ends
+// registerCleanupFunction(() => {
+//   try {
+//     let target = TargetFactory.forTab(gBrowser.selectedTab);
+//     gDevTools.closeToolbox(target);
+//   } catch (ex) {
+//     dump(ex);
+//   }
+//   while (gBrowser.tabs.length > 1) {
+//     gBrowser.removeCurrentTab();
+//   }
+// });
 
-/**
- * Add a new test tab in the browser and load the given url.
- * @param {String} url The url to be loaded in the new tab
- * @return a promise that resolves to the tab object when the url is loaded
- */
-function addTab(url) {
-  info("Adding a new tab with URL: '" + url + "'");
-  let def = promise.defer();
+// /**
+//  * Define an async test based on a generator function
+//  */
+// function asyncTest(generator) {
+//   return () => Task.spawn(generator).then(null, ok.bind(null, false)).then(finish);
+// }
 
-  let tab = gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function onload() {
-    gBrowser.selectedBrowser.removeEventListener("load", onload, true);
-    info("URL '" + url + "' loading complete");
-    waitForFocus(() => {
-      def.resolve(tab);
-    }, content);
-  }, true);
-  content.location = url;
+// /**
+//  * Add a new test tab in the browser and load the given url.
+//  * @param {String} url The url to be loaded in the new tab
+//  * @return a promise that resolves to the tab object when the url is loaded
+//  */
+// function addTab(url) {
+//   info("Adding a new tab with URL: '" + url + "'");
+//   let def = promise.defer();
 
-  return def.promise;
-}
+//   let tab = gBrowser.selectedTab = gBrowser.addTab();
+//   gBrowser.selectedBrowser.addEventListener("load", function onload() {
+//     gBrowser.selectedBrowser.removeEventListener("load", onload, true);
+//     info("URL '" + url + "' loading complete");
+//     waitForFocus(() => {
+//       def.resolve(tab);
+//     }, content);
+//   }, true);
+//   content.location = url;
 
-function addItchpadTabForTempDirectory() {
-  TEMP_PATH = buildTempDirectoryStructure();
-  let CUSTOM_OPTS = {
-    name: "Test",
-    iconUrl: "chrome://browser/skin/devtools/tool-options.svg",
-    projectOverviewURL: SAMPLE_WEBAPP_URL
-  };
+//   return def.promise;
+// }
 
-  return addItchpadTab().then((itchpad) => {
-    return itchpad.setProjectToAppPath(TEMP_PATH, CUSTOM_OPTS).then(() => {
-      return itchpad;
-    });
-  });
-}
+// function addItchpadTabForTempDirectory() {
+//   TEMP_PATH = buildTempDirectoryStructure();
+//   let CUSTOM_OPTS = {
+//     name: "Test",
+//     iconUrl: "chrome://browser/skin/devtools/tool-options.svg",
+//     projectOverviewURL: SAMPLE_WEBAPP_URL
+//   };
 
-function addItchpadTab() {
-  return addTab("chrome://browser/content/devtools/itchpad-test.html").then(() => {
-    let iframe = content.document.getElementById("itchpad-iframe");
-    let itchpad = Itchpad.Itchpad(iframe);
+//   return addItchpadTab().then((itchpad) => {
+//     return itchpad.setProjectToAppPath(TEMP_PATH, CUSTOM_OPTS).then(() => {
+//       return itchpad;
+//     });
+//   });
+// }
 
-    ok (iframe, "Tab has placeholder iframe for itchpad");
-    ok (itchpad, "Itchpad has been initialized");
+// function addItchpadTab() {
+//   return addTab("chrome://browser/content/devtools/itchpad-test.html").then(() => {
+//     let iframe = content.document.getElementById("itchpad-iframe");
+//     let itchpad = Itchpad.Itchpad(iframe);
 
-    return itchpad.loaded.then((itchpad) => {
-      return itchpad;
-    });
-  });
-}
+//     ok (iframe, "Tab has placeholder iframe for itchpad");
+//     ok (itchpad, "Itchpad has been initialized");
 
-/**
- * Build a temporary directory as a workspace for this loader
- * https://developer.mozilla.org/en-US/Add-ons/Code_snippets/File_I_O
- */
-function buildTempDirectoryStructure() {
+//     return itchpad.loaded.then((itchpad) => {
+//       return itchpad;
+//     });
+//   });
+// }
 
-  // return FileUtils.getDir("CurProcD", ["chrome", "browser", "content", "browser", "devtools"]).path;
-  // return FileUtils.getDir("CurProcD", ["modules", "devtools", "itchpad", "samples", "webapp"]).path;
+// /**
+//  * Build a temporary directory as a workspace for this loader
+//  * https://developer.mozilla.org/en-US/Add-ons/Code_snippets/File_I_O
+//  */
+// function buildTempDirectoryStructure() {
 
-  // First create (and remove) the temp dir to discard any changes
-  let TEMP_DIR = FileUtils.getDir("TmpD", ["Itchpad"], true);
-  TEMP_DIR.remove(true);
+//   // return FileUtils.getDir("CurProcD", ["chrome", "browser", "content", "browser", "devtools"]).path;
+//   // return FileUtils.getDir("CurProcD", ["modules", "devtools", "itchpad", "samples", "webapp"]).path;
 
-  // Now rebuild our fake project.
-  TEMP_DIR = FileUtils.getDir("TmpD", ["Itchpad"], true);
+//   // First create (and remove) the temp dir to discard any changes
+//   let TEMP_DIR = FileUtils.getDir("TmpD", ["Itchpad"], true);
+//   TEMP_DIR.remove(true);
 
-  FileUtils.getDir("TmpD", ["Itchpad", "css"], true);
-  FileUtils.getDir("TmpD", ["Itchpad", "data"], true);
-  FileUtils.getDir("TmpD", ["Itchpad", "img", "icons"], true);
-  FileUtils.getDir("TmpD", ["Itchpad", "js"], true);
+//   // Now rebuild our fake project.
+//   TEMP_DIR = FileUtils.getDir("TmpD", ["Itchpad"], true);
 
-  let htmlFile = FileUtils.getFile("TmpD", ["Itchpad", "index.html"]);
-  htmlFile.createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
-  writeToFile(htmlFile, [
-    '<!DOCTYPE html>',
-    '<html lang="en">',
-    ' <head>',
-    '   <meta charset="utf-8" />',
-    '   <title>Itchpad Temp File</title>',
-    '   <link rel="stylesheet" href="style.css" />',
-    ' </head>',
-    ' <body id="home">',
-    '   <p>Itchpad Temp File</p>',
-    ' </body>',
-    '</html>'].join("\n")
-  );
+//   FileUtils.getDir("TmpD", ["Itchpad", "css"], true);
+//   FileUtils.getDir("TmpD", ["Itchpad", "data"], true);
+//   FileUtils.getDir("TmpD", ["Itchpad", "img", "icons"], true);
+//   FileUtils.getDir("TmpD", ["Itchpad", "js"], true);
 
-  let readmeFile = FileUtils.getFile("TmpD", ["Itchpad", "README.md"]);
-  readmeFile.createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
-  writeToFile(readmeFile, [
-    '## Readme'
-    ].join("\n")
-  );
+//   let htmlFile = FileUtils.getFile("TmpD", ["Itchpad", "index.html"]);
+//   htmlFile.createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
+//   writeToFile(htmlFile, [
+//     '<!DOCTYPE html>',
+//     '<html lang="en">',
+//     ' <head>',
+//     '   <meta charset="utf-8" />',
+//     '   <title>Itchpad Temp File</title>',
+//     '   <link rel="stylesheet" href="style.css" />',
+//     ' </head>',
+//     ' <body id="home">',
+//     '   <p>Itchpad Temp File</p>',
+//     ' </body>',
+//     '</html>'].join("\n")
+//   );
 
-  let licenseFile = FileUtils.getFile("TmpD", ["Itchpad", "LICENSE"]);
-  licenseFile.createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
-  writeToFile(licenseFile, [
-   '/* This Source Code Form is subject to the terms of the Mozilla Public',
-   ' * License, v. 2.0. If a copy of the MPL was not distributed with this',
-   ' * file, You can obtain one at http://mozilla.org/MPL/2.0/. */'
-    ].join("\n")
-  );
+//   let readmeFile = FileUtils.getFile("TmpD", ["Itchpad", "README.md"]);
+//   readmeFile.createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
+//   writeToFile(readmeFile, [
+//     '## Readme'
+//     ].join("\n")
+//   );
 
-  let cssFile = FileUtils.getFile("TmpD", ["Itchpad", "css", "styles.css"]);
-  cssFile.createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
-  writeToFile(cssFile, [
-    'body {',
-    ' background: red;',
-    '}'
-    ].join("\n")
-  );
+//   let licenseFile = FileUtils.getFile("TmpD", ["Itchpad", "LICENSE"]);
+//   licenseFile.createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
+//   writeToFile(licenseFile, [
+//    '/* This Source Code Form is subject to the terms of the Mozilla Public',
+//    ' * License, v. 2.0. If a copy of the MPL was not distributed with this',
+//    ' * file, You can obtain one at http://mozilla.org/MPL/2.0/. */'
+//     ].join("\n")
+//   );
 
-  FileUtils.getFile("TmpD", ["Itchpad", "js", "script.js"]).createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
+//   let cssFile = FileUtils.getFile("TmpD", ["Itchpad", "css", "styles.css"]);
+//   cssFile.createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
+//   writeToFile(cssFile, [
+//     'body {',
+//     ' background: red;',
+//     '}'
+//     ].join("\n")
+//   );
 
-  FileUtils.getFile("TmpD", ["Itchpad", "img", "fake.png"]).createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
-  FileUtils.getFile("TmpD", ["Itchpad", "img", "icons", "16x16.png"]).createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
-  FileUtils.getFile("TmpD", ["Itchpad", "img", "icons", "32x32.png"]).createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
-  FileUtils.getFile("TmpD", ["Itchpad", "img", "icons", "128x128.png"]).createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
-  FileUtils.getFile("TmpD", ["Itchpad", "img", "icons", "vector.svg"]).createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
+//   FileUtils.getFile("TmpD", ["Itchpad", "js", "script.js"]).createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
 
-  return TEMP_DIR.path;
-}
+//   FileUtils.getFile("TmpD", ["Itchpad", "img", "fake.png"]).createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
+//   FileUtils.getFile("TmpD", ["Itchpad", "img", "icons", "16x16.png"]).createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
+//   FileUtils.getFile("TmpD", ["Itchpad", "img", "icons", "32x32.png"]).createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
+//   FileUtils.getFile("TmpD", ["Itchpad", "img", "icons", "128x128.png"]).createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
+//   FileUtils.getFile("TmpD", ["Itchpad", "img", "icons", "vector.svg"]).createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
 
-// https://developer.mozilla.org/en-US/Add-ons/Code_snippets/File_I_O#Writing_to_a_file
-function writeToFile(file, data) {
-  console.log("Writing to file: " + file.path, file.exists());
-  let defer = promise.defer();
-  var ostream = FileUtils.openSafeFileOutputStream(file);
+//   return TEMP_DIR.path;
+// }
 
-  var converter = Components.classes["@mozilla.org/intl/scriptableunicodeconverter"].
-                  createInstance(Components.interfaces.nsIScriptableUnicodeConverter);
-  converter.charset = "UTF-8";
-  var istream = converter.convertToInputStream(data);
+// // https://developer.mozilla.org/en-US/Add-ons/Code_snippets/File_I_O#Writing_to_a_file
+// function writeToFile(file, data) {
+//   console.log("Writing to file: " + file.path, file.exists());
+//   let defer = promise.defer();
+//   var ostream = FileUtils.openSafeFileOutputStream(file);
 
-  // The last argument (the callback) is optional.
-  NetUtil.asyncCopy(istream, ostream, function(status) {
-    if (!Components.isSuccessCode(status)) {
-      // Handle error!
-      info("ERROR WRITING TEMP FILE", status);
-    }
-  });
-}
+//   var converter = Components.classes["@mozilla.org/intl/scriptableunicodeconverter"].
+//                   createInstance(Components.interfaces.nsIScriptableUnicodeConverter);
+//   converter.charset = "UTF-8";
+//   var istream = converter.convertToInputStream(data);
 
-function getTempFile(path) {
-  let parts = ["Itchpad"];
-  parts = parts.concat(path.split("/"));
-  return FileUtils.getFile("TmpD", parts);
-}
+//   // The last argument (the callback) is optional.
+//   NetUtil.asyncCopy(istream, ostream, function(status) {
+//     if (!Components.isSuccessCode(status)) {
+//       // Handle error!
+//       info("ERROR WRITING TEMP FILE", status);
+//     }
+//   });
+// }
 
-// https://developer.mozilla.org/en-US/Add-ons/Code_snippets/File_I_O#Writing_to_a_file
-function* getFileData(path) {
-  let file = new FileUtils.File(path);
-  let def = promise.defer();
+// function getTempFile(path) {
+//   let parts = ["Itchpad"];
+//   parts = parts.concat(path.split("/"));
+//   return FileUtils.getFile("TmpD", parts);
+// }
 
-  NetUtil.asyncFetch(file, function(inputStream, status) {
-    if (!Components.isSuccessCode(status)) {
-      info("ERROR READING TEMP FILE", status);
-    }
+// // https://developer.mozilla.org/en-US/Add-ons/Code_snippets/File_I_O#Writing_to_a_file
+// function* getFileData(path) {
+//   let file = new FileUtils.File(path);
+//   let def = promise.defer();
 
-    // Detect if an empty file is loaded
-    try {
-      inputStream.available();
-    } catch(e) {
-      def.resolve("");
-      return;
-    }
+//   NetUtil.asyncFetch(file, function(inputStream, status) {
+//     if (!Components.isSuccessCode(status)) {
+//       info("ERROR READING TEMP FILE", status);
+//     }
 
-    var data = NetUtil.readInputStreamToString(inputStream, inputStream.available());
-    def.resolve(data);
-  });
+//     // Detect if an empty file is loaded
+//     try {
+//       inputStream.available();
+//     } catch(e) {
+//       def.resolve("");
+//       return;
+//     }
 
-  return def.promise;
-}
+//     var data = NetUtil.readInputStreamToString(inputStream, inputStream.available());
+//     def.resolve(data);
+//   });
 
-function onceEditorCreated(itchpad) {
-  let def = promise.defer();
-  itchpad.once("onEditorCreated", (editor) => {
-    def.resolve(editor);
-  });
-  return def.promise;
-}
+//   return def.promise;
+// }
 
-function onceEditorLoad(itchpad) {
-  let def = promise.defer();
-  itchpad.once("onEditorLoad", (editor) => {
-    def.resolve(editor);
-  });
-  return def.promise;
-}
+// function onceEditorCreated(itchpad) {
+//   let def = promise.defer();
+//   itchpad.once("onEditorCreated", (editor) => {
+//     def.resolve(editor);
+//   });
+//   return def.promise;
+// }
 
-function onceEditorActivated(itchpad) {
-  let def = promise.defer();
-  itchpad.once("onEditorActivated", (editor) => {
-    def.resolve(editor);
-  });
-  return def.promise;
-}
+// function onceEditorLoad(itchpad) {
+//   let def = promise.defer();
+//   itchpad.once("onEditorLoad", (editor) => {
+//     def.resolve(editor);
+//   });
+//   return def.promise;
+// }
 
-function onceEditorSave(itchpad) {
-  let def = promise.defer();
-  itchpad.once("onEditorSave", (editor, resource) => {
-    def.resolve(resource);
-  });
-  return def.promise;
-}
+// function onceEditorActivated(itchpad) {
+//   let def = promise.defer();
+//   itchpad.once("onEditorActivated", (editor) => {
+//     def.resolve(editor);
+//   });
+//   return def.promise;
+// }
+
+// function onceEditorSave(itchpad) {
+//   let def = promise.defer();
+//   itchpad.once("onEditorSave", (editor, resource) => {
+//     def.resolve(resource);
+//   });
+//   return def.promise;
+// }
