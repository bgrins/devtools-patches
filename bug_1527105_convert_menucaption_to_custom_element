# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1549921223 28800
#      Mon Feb 11 13:40:23 2019 -0800
# Node ID dec5937982375ef4257c586c001a6305e059e631
# Parent  b482c6618d72ac38a9a82fbccf425e0a7f8b6129
Bug 1527105 - Convert menucaption to Custom Element

Differential Revision: https://phabricator.services.mozilla.com/D19439

diff --git a/toolkit/content/customElements.js b/toolkit/content/customElements.js
--- a/toolkit/content/customElements.js
+++ b/toolkit/content/customElements.js
@@ -378,16 +378,17 @@ customElements.setElementCreationCallbac
 });
 
 // For now, don't load any elements in the extension dummy document.
 // We will want to load <browser> when that's migrated (bug 1441935).
 const isDummyDocument = document.documentURI == "chrome://extensions/content/dummy.xul";
 if (!isDummyDocument) {
   for (let script of [
     "chrome://global/content/elements/general.js",
+    "chrome://global/content/elements/menu.js",
     "chrome://global/content/elements/notificationbox.js",
     "chrome://global/content/elements/popupnotification.js",
     "chrome://global/content/elements/radio.js",
     "chrome://global/content/elements/richlistbox.js",
     "chrome://global/content/elements/autocomplete-richlistitem.js",
     "chrome://global/content/elements/textbox.js",
     "chrome://global/content/elements/tabbox.js",
     "chrome://global/content/elements/tree.js",
diff --git a/toolkit/content/jar.mn b/toolkit/content/jar.mn
--- a/toolkit/content/jar.mn
+++ b/toolkit/content/jar.mn
@@ -85,16 +85,17 @@ toolkit.jar:
    content/global/bindings/tree.xml            (widgets/tree.xml)
 *  content/global/bindings/wizard.xml          (widgets/wizard.xml)
    content/global/elements/autocomplete-richlistitem.js       (widgets/autocomplete-richlistitem.js)
    content/global/elements/browser-custom-element.js          (widgets/browser-custom-element.js)
    content/global/elements/datetimebox.js      (widgets/datetimebox.js)
    content/global/elements/findbar.js          (widgets/findbar.js)
    content/global/elements/editor.js           (widgets/editor.js)
    content/global/elements/general.js          (widgets/general.js)
+   content/global/elements/menu.js             (widgets/menu.js)
    content/global/elements/notificationbox.js  (widgets/notificationbox.js)
    content/global/elements/pluginProblem.js    (widgets/pluginProblem.js)
    content/global/elements/radio.js            (widgets/radio.js)
    content/global/elements/richlistbox.js      (widgets/richlistbox.js)
    content/global/elements/marquee.css         (widgets/marquee.css)
    content/global/elements/marquee.js          (widgets/marquee.js)
    content/global/elements/menulist.js         (widgets/menulist.js)
    content/global/elements/popupnotification.js  (widgets/popupnotification.js)
diff --git a/toolkit/content/widgets/menu.js b/toolkit/content/widgets/menu.js
new file mode 100644
--- /dev/null
+++ b/toolkit/content/widgets/menu.js
@@ -0,0 +1,167 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+  * License, v. 2.0. If a copy of the MPL was not distributed with this
+  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+// This is loaded into all XUL windows. Wrap in a block to prevent
+// leaking to window scope.
+{
+class MozMenuItemBase extends MozElements.BaseText {
+  set value(val) {
+    this.setAttribute("value", val);
+    return val;
+  }
+
+  get value() {
+    return this.getAttribute("value");
+  }
+  /**
+   * nsIDOMXULSelectControlItemElement
+   */
+  get selected() {
+    return this.getAttribute("selected") == "true";
+  }
+
+  get control() {
+    var parent = this.parentNode;
+    // Return the parent if it is a menu or menulist.
+    if (parent && parent.parentNode instanceof XULMenuElement) {
+      return parent.parentNode;
+    }
+    return null;
+  }
+  /**
+   * nsIDOMXULContainerItemElement
+   */
+  get parentContainer() {
+    for (var parent = this.parentNode; parent; parent = parent.parentNode) {
+      if (parent instanceof XULMenuElement) {
+        return parent;
+      }
+    }
+    return null;
+  }
+}
+
+MozXULElement.implementCustomInterface(MozMenuItemBase, [Ci.nsIDOMXULSelectControlItemElement, Ci.nsIDOMXULContainerItemElement]);
+
+class MozMenuBase extends MozMenuItemBase {
+  set open(val) {
+    this.openMenu(val);
+    return val;
+  }
+
+  get open() {
+    return this.hasAttribute("open");
+  }
+
+  get itemCount() {
+    var menupopup = this.menupopup;
+    return menupopup ? menupopup.children.length : 0;
+  }
+
+  get menupopup() {
+    const XUL_NS =
+      "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
+
+    for (var child = this.firstElementChild; child; child = child.nextElementSibling) {
+      if (child.namespaceURI == XUL_NS && child.localName == "menupopup")
+        return child;
+    }
+    return null;
+  }
+
+  /**
+   * nsIDOMXULContainerElement interface
+   */
+  appendItem(aLabel, aValue) {
+    var menupopup = this.menupopup;
+    if (!menupopup) {
+      menupopup = this.ownerDocument.createXULElement("menupopup");
+      this.appendChild(menupopup);
+    }
+
+    var menuitem = this.ownerDocument.createXULElement("menuitem");
+    menuitem.setAttribute("label", aLabel);
+    menuitem.setAttribute("value", aValue);
+
+    return menupopup.appendChild(menuitem);
+  }
+
+  getIndexOfItem(aItem) {
+    var menupopup = this.menupopup;
+    if (menupopup) {
+      var items = menupopup.children;
+      var length = items.length;
+      for (var index = 0; index < length; ++index) {
+        if (items[index] == aItem)
+          return index;
+      }
+    }
+    return -1;
+  }
+
+  getItemAtIndex(aIndex) {
+    var menupopup = this.menupopup;
+    if (!menupopup || aIndex < 0 || aIndex >= menupopup.children.length)
+      return null;
+
+    return menupopup.children[aIndex];
+  }
+}
+
+MozXULElement.implementCustomInterface(MozMenuBase, [Ci.nsIDOMXULContainerElement]);
+
+// The <menucaption> element is used for rendering <html:optgroup> inside of <html:select>,
+// See SelectParentHelper.jsm.
+class MozMenucaption extends MozMenuBase {
+  static get observedAttributes() {
+    return [
+      "selected",
+      "disabled",
+      "checked",
+      "image",
+      "validate",
+      "src",
+      "label",
+      "crop",
+      "highlightable",
+    ];
+  }
+
+  _updateAttributes() {
+    for (let [ el, attrs ] of this._inheritedAttributeMap.entries()) {
+      for (let attr of attrs) {
+        this.inheritAttribute(el, attr);
+      }
+    }
+  }
+
+  attributeChangedCallback(name, oldValue, newValue) {
+    if (!this.isConnectedAndReady || oldValue === newValue || !this._inheritedAttributeMap) {
+      return;
+    }
+
+    this._updateAttributes();
+  }
+
+  connectedCallback() {
+    this.textContent = "";
+    this.appendChild(MozXULElement.parseXULToFragment(`
+      <hbox class="menu-iconic-left" align="center" pack="center" inherits="selected,disabled,checked" role="none">
+        <image class="menu-iconic-icon" inherits="src=image,validate,src" role="none"></image>
+      </hbox>
+      <label class="menu-iconic-text" flex="1" inherits="value=label,crop,highlightable" crop="right" role="none"></label>
+      <label class="menu-iconic-highlightable-text" inherits="text=label,crop,highlightable" crop="right" role="none"></label>
+    `));
+    this._inheritedAttributeMap = new Map();
+    for (let el of this.querySelectorAll("[inherits]")) {
+      this._inheritedAttributeMap.set(el, el.getAttribute("inherits").split(","));
+    }
+    this._updateAttributes();
+  }
+}
+
+customElements.define("menucaption", MozMenucaption);
+}
diff --git a/toolkit/content/widgets/menu.xml b/toolkit/content/widgets/menu.xml
--- a/toolkit/content/widgets/menu.xml
+++ b/toolkit/content/widgets/menu.xml
@@ -190,27 +190,16 @@
                 xbl:inherits="selected,disabled,checked">
         <xul:image class="menu-iconic-icon" xbl:inherits="src=image,validate,src"/>
       </xul:hbox>
       <xul:label class="menu-iconic-text" flex="1" xbl:inherits="value=label,accesskey,crop,highlightable" crop="right"/>
       <xul:label class="menu-iconic-highlightable-text" xbl:inherits="xbl:text=label,crop,accesskey,highlightable" crop="right"/>
     </content>
   </binding>
 
-  <binding id="menucaption" extends="chrome://global/content/bindings/menu.xml#menu-base">
-    <content>
-      <xul:hbox class="menu-iconic-left" align="center" pack="center"
-                xbl:inherits="selected,disabled,checked">
-        <xul:image class="menu-iconic-icon" xbl:inherits="src=image,validate,src"/>
-      </xul:hbox>
-      <xul:label class="menu-iconic-text" flex="1" xbl:inherits="value=label,crop,highlightable" crop="right"/>
-      <xul:label class="menu-iconic-highlightable-text" xbl:inherits="xbl:text=label,crop,highlightable" crop="right"/>
-    </content>
-  </binding>
-
   <binding id="menu-iconic"
            extends="chrome://global/content/bindings/menu.xml#menu-base">
     <content>
       <xul:hbox class="menu-iconic-left" align="center" pack="center">
         <xul:image class="menu-iconic-icon" xbl:inherits="src=image"/>
       </xul:hbox>
       <xul:label class="menu-iconic-text" flex="1" xbl:inherits="value=label,accesskey,crop,highlightable" crop="right"/>
       <xul:label class="menu-iconic-highlightable-text" xbl:inherits="xbl:text=label,crop,accesskey,highlightable" crop="right"/>
diff --git a/toolkit/content/xul.css b/toolkit/content/xul.css
--- a/toolkit/content/xul.css
+++ b/toolkit/content/xul.css
@@ -286,20 +286,16 @@ menuitem.menuitem-iconic {
   -moz-binding: url("chrome://global/content/bindings/menu.xml#menuitem-iconic");
 }
 
 menuitem[type="checkbox"],
 menuitem[type="radio"] {
   -moz-binding: url("chrome://global/content/bindings/menu.xml#menuitem-iconic");
 }
 
-menucaption {
-  -moz-binding: url("chrome://global/content/bindings/menu.xml#menucaption");
-}
-
 .menu-text {
   -moz-box-flex: 1;
 }
 
 /********* popup & menupopup ***********/
 
 /* <popup> is deprecated.  Only <menupopup> and <tooltip> are still valid. */
 
