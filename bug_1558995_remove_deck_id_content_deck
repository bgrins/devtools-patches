# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1560384119 25200
#      Wed Jun 12 17:01:59 2019 -0700
# Node ID 798cf3cf7acafffe54e66039cebe52ca62f0109b
# Parent  848ce760ba38b646edf21040f6dbb1c1b7fd4ba2
Bug 1558995 - Remove <deck id="content-deck">

This isn't necessary, since it has only 2 static children (the selected tab's content
and the customizable UI), and their visibility is toggled in a single place. We already
toggle .hidden for both - there's no need for a separate deck.

Differential Revision: https://phabricator.services.mozilla.com/D34792

diff --git a/browser/base/content/browser.xhtml b/browser/base/content/browser.xhtml
--- a/browser/base/content/browser.xhtml
+++ b/browser/base/content/browser.xhtml
@@ -1299,53 +1299,52 @@
         <searchbar id="searchbar" flex="1"/>
         <toolbartabstop/>
       </toolbaritem>
     </toolbarpalette>
   </toolbox>
 
   <hbox id="fullscr-toggler" hidden="true"/>
 
-  <deck id="content-deck" flex="1" renderroot="content">
-    <hbox flex="1" id="browser">
-      <vbox id="browser-border-start" hidden="true" layer="true"/>
-      <vbox id="sidebar-box" hidden="true" class="chromeclass-extrachrome">
-        <sidebarheader id="sidebar-header" align="center">
-          <toolbarbutton id="sidebar-switcher-target" flex="1" class="tabbable">
-            <image id="sidebar-icon" consumeanchor="sidebar-switcher-target"/>
-            <label id="sidebar-title" crop="end" flex="1" control="sidebar"/>
-            <image id="sidebar-switcher-arrow"/>
-          </toolbarbutton>
-          <image id="sidebar-throbber"/>
+  <hbox flex="1" id="browser" renderroot="content">
+    <vbox id="browser-border-start" hidden="true" layer="true"/>
+    <vbox id="sidebar-box" hidden="true" class="chromeclass-extrachrome">
+      <sidebarheader id="sidebar-header" align="center">
+        <toolbarbutton id="sidebar-switcher-target" flex="1" class="tabbable">
+          <image id="sidebar-icon" consumeanchor="sidebar-switcher-target"/>
+          <label id="sidebar-title" crop="end" flex="1" control="sidebar"/>
+          <image id="sidebar-switcher-arrow"/>
+        </toolbarbutton>
+        <image id="sidebar-throbber"/>
 # To ensure the button label's intrinsic width doesn't expand the sidebar
 # if the label is long, the button needs flex=1.
 # To ensure the button doesn't expand unnecessarily for short labels, the
 # spacer should significantly out-flex the button.
-          <spacer flex="1000"/>
-          <toolbarbutton id="sidebar-close" class="close-icon tabbable" tooltiptext="&sidebarCloseButton.tooltip;" oncommand="SidebarUI.hide();"/>
-        </sidebarheader>
-        <browser id="sidebar" flex="1" autoscroll="false" disablehistory="true" disablefullscreen="true"
-                  style="min-width: 14em; width: 18em; max-width: 36em;" tooltip="aHTMLTooltip"/>
-      </vbox>
+        <spacer flex="1000"/>
+        <toolbarbutton id="sidebar-close" class="close-icon tabbable" tooltiptext="&sidebarCloseButton.tooltip;" oncommand="SidebarUI.hide();"/>
+      </sidebarheader>
+      <browser id="sidebar" flex="1" autoscroll="false" disablehistory="true" disablefullscreen="true"
+                style="min-width: 14em; width: 18em; max-width: 36em;" tooltip="aHTMLTooltip"/>
+    </vbox>
 
-      <splitter id="sidebar-splitter" class="chromeclass-extrachrome sidebar-splitter" hidden="true"/>
-      <vbox id="appcontent" flex="1">
-        <!-- gHighPriorityNotificationBox will be added here lazily. -->
-        <tabbox id="tabbrowser-tabbox"
-                flex="1" tabcontainer="tabbrowser-tabs">
-          <tabpanels id="tabbrowser-tabpanels"
-                     flex="1" class="plain" selectedIndex="0"/>
-        </tabbox>
-      </vbox>
-      <vbox id="browser-border-end" hidden="true" layer="true"/>
-    </hbox>
-    <box id="customization-container" flex="1" hidden="true"><![CDATA[
+    <splitter id="sidebar-splitter" class="chromeclass-extrachrome sidebar-splitter" hidden="true"/>
+    <vbox id="appcontent" flex="1">
+      <!-- gHighPriorityNotificationBox will be added here lazily. -->
+      <tabbox id="tabbrowser-tabbox"
+              flex="1" tabcontainer="tabbrowser-tabs">
+        <tabpanels id="tabbrowser-tabpanels"
+                    flex="1" class="plain" selectedIndex="0"/>
+      </tabbox>
+    </vbox>
+    <vbox id="browser-border-end" hidden="true" layer="true"/>
+  </hbox>
+
+  <box id="customization-container" flex="1" renderroot="content" hidden="true"><![CDATA[
 #include ../../components/customizableui/content/customizeMode.inc.xul
-    ]]></box>
-  </deck>
+  ]]></box>
 
   <html:div id="fullscreen-warning" class="pointerlockfswarning" hidden="true" renderroot="content">
     <html:div class="pointerlockfswarning-domain-text">
       &fullscreenWarning.beforeDomain.label;
       <html:span class="pointerlockfswarning-domain"/>
       &fullscreenWarning.afterDomain.label;
     </html:div>
     <html:div class="pointerlockfswarning-generic-text">
diff --git a/browser/components/customizableui/CustomizeMode.jsm b/browser/components/customizableui/CustomizeMode.jsm
--- a/browser/components/customizableui/CustomizeMode.jsm
+++ b/browser/components/customizableui/CustomizeMode.jsm
@@ -308,17 +308,18 @@ CustomizeMode.prototype = {
 
       window.PanelUI.overflowFixedList.setAttribute("customizing", true);
       window.PanelUI.menuButton.disabled = true;
       document.getElementById("nav-bar-overflow-button").disabled = true;
 
       this._transitioning = true;
 
       let customizer = document.getElementById("customization-container");
-      customizer.parentNode.selectedPanel = customizer;
+      let browser = document.getElementById("browser");
+      browser.hidden = true;
       customizer.hidden = false;
 
       this._wrapToolbarItemSync(CustomizableUI.AREA_TABSTRIP);
 
       let customizableToolbars = document.querySelectorAll("toolbar[customizable=true]:not([autohide=true]):not([collapsed=true])");
       for (let toolbar of customizableToolbars)
         toolbar.setAttribute("customizing", true);
 
@@ -422,20 +423,20 @@ CustomizeMode.prototype = {
 
       if (this.browser.selectedTab == gTab) {
         if (gTab.linkedBrowser.currentURI.spec == "about:blank") {
           closeGlobalTab();
         } else {
           unregisterGlobalTab();
         }
       }
+      let customizer = document.getElementById("customization-container");
       let browser = document.getElementById("browser");
-      browser.parentNode.selectedPanel = browser;
-      let customizer = document.getElementById("customization-container");
       customizer.hidden = true;
+      browser.hidden = false;
 
       window.gNavToolbox.removeEventListener("toolbarvisibilitychange", this);
 
       this._teardownPaletteDragging();
 
       await this._unwrapToolbarItems();
 
       // And drop all area references.
diff --git a/testing/talos/talos/tests/tart/addon/content/tart.js b/testing/talos/talos/tests/tart/addon/content/tart.js
--- a/testing/talos/talos/tests/tart/addon/content/tart.js
+++ b/testing/talos/talos/tests/tart/addon/content/tart.js
@@ -440,35 +440,24 @@ Tart.prototype = {
       let cstyle = window.getComputedStyle(aTab);
       try {
         return 1000 * Math.max.apply(null, cstyle.transitionDuration.split(", ").map(s => parseFloat(s, 10)));
       } catch (e) {
         return 250;
       }
     }
 
-    function getReferenceCustomizationDuration() {
-      // Code by jaws.
-      try {
-        let deck = document.getElementById("content-deck");
-        let cstyle = window.getComputedStyle(deck);
-        return 1000 * parseFloat(cstyle.transitionDuration, 10);
-      } catch (e) {
-        return 150; // Value at the time of writing
-      }
-    }
-
     this.unpinTart();
     var tabRefDuration = getMaxTabTransitionTimeMs(this._tartTab);
     if (tabRefDuration < 20 || tabRefDuration > 2000) {
       // Hardcoded fallback in case the value doesn't make sense as tab animation duration.
       tabRefDuration = 250;
     }
 
-    var custRefDuration = getReferenceCustomizationDuration();
+    var custRefDuration = 0;
 
     var subtests = {
       init: [ // This is called before each subtest, so it's safe to assume the following prefs:
         function() {
           Services.prefs.setBoolPref("browser.newtab.preload", false);
           self.pinTart();
           self.makeNewTabURLChangePromise("about:blank").then(next);
         },
