# HG changeset patch
# User Gabriel Luong <gabriel.luong@gmail.com>
# Parent  29ff7dcd1268d357e405b73569c20e97c1506053
Bug 1390746 - Add a consistent style for the accordion and section headers in the inspector sidepanels. r=bgrins

diff --git a/devtools/client/inspector/layout/components/Accordion.css b/devtools/client/inspector/layout/components/Accordion.css
--- a/devtools/client/inspector/layout/components/Accordion.css
+++ b/devtools/client/inspector/layout/components/Accordion.css
@@ -11,25 +11,28 @@
   background-color: var(--theme-body-background);
   width: 100%;
 }
 
 .accordion ._header {
   background-color: var(--theme-toolbar-background);
   border-bottom: 1px solid var(--theme-splitter-color);
   cursor: pointer;
-  font-size: 11px;
+  font-size: 12px;
   padding: 5px;
   transition: all 0.25s ease;
   width: 100%;
+  align-items: center;
+  display: flex;
+
   -moz-user-select: none;
 }
 
 .accordion ._header:hover {
-  background-color: var(--theme-toolbar-hover);
+  background-color: var(--theme-toolbar-background-hover);
 }
 
 .accordion ._header:hover svg {
   fill: var(--theme-comment-alt);
 }
 
 .accordion ._content {
   border-bottom: 1px solid var(--theme-splitter-color);
diff --git a/devtools/client/inspector/rules/rules.js b/devtools/client/inspector/rules/rules.js
--- a/devtools/client/inspector/rules/rules.js
+++ b/devtools/client/inspector/rules/rules.js
@@ -1055,17 +1055,17 @@ CssRuleView.prototype = {
     if (isOpen) {
       twisty.removeAttribute("open");
     } else {
       twisty.setAttribute("open", "true");
     }
   },
 
   _getRuleViewHeaderClassName: function (isPseudo) {
-    let baseClassName = "theme-gutter ruleview-header";
+    let baseClassName = "ruleview-header";
     return isPseudo ? baseClassName + " ruleview-expandable-header" :
       baseClassName;
   },
 
   /**
    * Creates editor UI for each of the rules in _elementStyle.
    */
   _createEditors: function () {
diff --git a/devtools/client/inspector/rules/test/browser_rules_inherited-properties_04.js b/devtools/client/inspector/rules/test/browser_rules_inherited-properties_04.js
--- a/devtools/client/inspector/rules/test/browser_rules_inherited-properties_04.js
+++ b/devtools/client/inspector/rules/test/browser_rules_inherited-properties_04.js
@@ -20,14 +20,14 @@ add_task(function* () {
   yield addTab("data:text/html;charset=utf-8," + encodeURIComponent(TEST_URI));
   let {inspector, view} = yield openRuleView();
   yield selectNode("a", inspector);
   yield getRuleViewSelectorHighlighterIcon(view, "element", 2);
   yield elementStyleInherit(inspector, view);
 });
 
 function* elementStyleInherit(inspector, view) {
-  let gutters = view.element.querySelectorAll(".theme-gutter");
+  let gutters = view.element.querySelectorAll(".ruleview-header");
   is(gutters.length, 2,
     "Gutters should contains 2 sections");
   ok(gutters[0].textContent, "Inherited from div");
   ok(gutters[1].textContent, "Inherited from div");
 }
diff --git a/devtools/client/inspector/rules/test/browser_rules_keyframes-rule_01.js b/devtools/client/inspector/rules/test/browser_rules_keyframes-rule_01.js
--- a/devtools/client/inspector/rules/test/browser_rules_keyframes-rule_01.js
+++ b/devtools/client/inspector/rules/test/browser_rules_keyframes-rule_01.js
@@ -85,17 +85,17 @@ function* assertKeyframeRules(selector, 
       keyframeRule.keyframes.name + " has the correct keyframes name");
     ok(keyframeRule.domRule.keyText == expected.keyframeRules[i],
       keyframeRule.domRule.keyText + " selector heading is correct");
     i++;
   }
 }
 
 function assertGutters(view, expected) {
-  let gutters = view.element.querySelectorAll(".theme-gutter");
+  let gutters = view.element.querySelectorAll(".ruleview-header");
 
   is(gutters.length, expected.guttersNbs,
     "There are " + gutters.length + " gutter headings");
 
   let i = 0;
   for (let gutter of gutters) {
     is(gutter.textContent, expected.gutterHeading[i],
       "Correct " + gutter.textContent + " gutter headings");
diff --git a/devtools/client/inspector/rules/test/browser_rules_pseudo-element_01.js b/devtools/client/inspector/rules/test/browser_rules_pseudo-element_01.js
--- a/devtools/client/inspector/rules/test/browser_rules_pseudo-element_01.js
+++ b/devtools/client/inspector/rules/test/browser_rules_pseudo-element_01.js
@@ -236,17 +236,17 @@ function* assertPseudoElementRulesNumber
      selector + " has the correct number of :before rules");
   is(rules.afterRules.length, ruleNbs.afterRulesNb,
      selector + " has the correct number of :after rules");
 
   return rules;
 }
 
 function getGutters(view) {
-  return view.element.querySelectorAll(".theme-gutter");
+  return view.element.querySelectorAll(".ruleview-header");
 }
 
 function assertGutters(view) {
   let gutters = getGutters(view);
 
   is(gutters.length, 3,
      "There are 3 gutter headings");
   is(gutters[0].textContent, "Pseudo-elements",
diff --git a/devtools/client/themes/dark-theme.css b/devtools/client/themes/dark-theme.css
--- a/devtools/client/themes/dark-theme.css
+++ b/devtools/client/themes/dark-theme.css
@@ -64,22 +64,16 @@ body {
 .cm-s-mozilla .cm-hr,
 .cm-s-mozilla .cm-comment,
 .variable-or-property .token-undefined,
 .variable-or-property .token-null,
 .CodeMirror-Tern-completion-unknown:before {
   color: var(--theme-comment);
 }
 
-.theme-gutter {
-  background-color: var(--theme-tab-toolbar-background);
-  color: var(--theme-content-color3);
-  border-color: var(--theme-splitter-color);
-}
-
 .theme-fg-color1,
 .cm-s-mozilla .cm-number,
 .variable-or-property .token-number,
 .variable-or-property[return] > .title > .name,
 .variable-or-property[scope] > .title > .name {
   color: var(--theme-highlight-red);
 }
 
diff --git a/devtools/client/themes/light-theme.css b/devtools/client/themes/light-theme.css
--- a/devtools/client/themes/light-theme.css
+++ b/devtools/client/themes/light-theme.css
@@ -62,22 +62,16 @@ body {
 .cm-s-mozilla .cm-hr,
 .cm-s-mozilla .cm-comment,
 .variable-or-property .token-undefined,
 .variable-or-property .token-null,
 .CodeMirror-Tern-completion-unknown:before {
   color: var(--theme-comment);
 }
 
-.theme-gutter {
-  background-color: var(--theme-tab-toolbar-background);
-  color: var(--theme-content-color3);
-  border-color: var(--theme-splitter-color);
-}
-
 .cm-s-mozilla .cm-unused-line {
   text-decoration: line-through;
   text-decoration-color: var(--theme-highlight-bluegrey);
 }
 
 .cm-s-mozilla .cm-executed-line {
   background-color: #fcfffc;
 }
diff --git a/devtools/client/themes/rules.css b/devtools/client/themes/rules.css
--- a/devtools/client/themes/rules.css
+++ b/devtools/client/themes/rules.css
@@ -214,46 +214,53 @@
   color: #0000FF;
 }
 
 .ruleview-rule-source:not([unselectable]):hover {
   text-decoration: underline;
 }
 
 .ruleview-header {
+  background-color: var(--theme-toolbar-background);
   border-bottom: 1px solid var(--theme-splitter-color);
-  padding: 1px 4px;
+  font-size: 12px;
+  padding: 5px;
+  width: 100%;
+  align-items: center;
+  display: flex;
+
   -moz-user-select: none;
-  word-wrap: break-word;
-  vertical-align: middle;
-  min-height: 1.5em;
-  line-height: 1.5em;
 }
 
-.theme-firebug .theme-gutter.ruleview-header {
+.theme-firebug .ruleview-header {
   font-family: var(--proportional-font-family);
   font-weight: bold;
   color: inherit;
   border: none;
   margin: 4px 0;
   padding: 3px 4px 2px 4px;
   line-height: inherit;
   min-height: 0;
   background: var(--theme-header-background);
 }
 
 :root[platform="win"] .ruleview-header,
 :root[platform="linux"] .ruleview-header {
   margin-top: 4px;
 }
 
-.ruleview-header.ruleview-expandable-header {
+.ruleview-expandable-header {
   cursor: pointer;
 }
 
+.ruleview-expandable-header:hover {
+  background-color: var(--theme-toolbar-background-hover);
+}
+
+
 .ruleview-rule-pseudo-element {
   padding-left:20px;
   border-left: solid 10px;
 }
 
 .ruleview-rule {
   border-bottom: 1px solid var(--theme-splitter-color);
   padding: 2px 4px;
