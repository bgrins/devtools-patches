# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  5201997e7e01500176ce7d6e790593468f3b4259

diff --git a/devtools/client/webconsole/hudservice.js b/devtools/client/webconsole/hudservice.js
--- a/devtools/client/webconsole/hudservice.js
+++ b/devtools/client/webconsole/hudservice.js
@@ -304,16 +304,20 @@ WebConsole.prototype = {
   chromeWindow: null,
   browserWindow: null,
   hudId: null,
   target: null,
   ui: null,
   _browserConsole: false,
   _destroyer: null,
 
+  get toolbox() {
+    return gDevTools.getToolbox(this.target);
+  },
+
   /**
    * Getter for a function to to listen for every request that completes. Used
    * by unit tests. The callback takes one argument: the HTTP activity object as
    * received from the remote Web Console.
    *
    * @type function
    */
   get lastFinishedRequestCallback()
@@ -459,43 +463,41 @@ WebConsole.prototype = {
    * Manually handle the case where toolbox does not exist (Browser Console).
    *
    * @param string aSourceURL
    *        The URL of the file.
    * @param integer aSourceLine
    *        The line number which you want to place the caret.
    */
   viewSourceInStyleEditor: function WC_viewSourceInStyleEditor(aSourceURL, aSourceLine) {
-    let toolbox = gDevTools.getToolbox(this.target);
-    if (!toolbox) {
+    if (!this.toolbox) {
       this.viewSource(aSourceURL, aSourceLine);
       return;
     }
-    toolbox.viewSourceInStyleEditor(aSourceURL, aSourceLine);
+    this.toolbox.viewSourceInStyleEditor(aSourceURL, aSourceLine);
   },
 
   /**
    * Tries to open a JavaScript file related to the web page for the web console
    * instance in the Script Debugger. If the file is not found, it is opened in
    * source view instead.
    *
    * Manually handle the case where toolbox does not exist (Browser Console).
    *
    * @param string aSourceURL
    *        The URL of the file.
    * @param integer aSourceLine
    *        The line number which you want to place the caret.
    */
   viewSourceInDebugger: function WC_viewSourceInDebugger(aSourceURL, aSourceLine) {
-    let toolbox = gDevTools.getToolbox(this.target);
-    if (!toolbox) {
+    if (!this.toolbox) {
       this.viewSource(aSourceURL, aSourceLine);
       return;
     }
-    toolbox.viewSourceInDebugger(aSourceURL, aSourceLine).then(() => {
+    this.toolbox.viewSourceInDebugger(aSourceURL, aSourceLine).then(() => {
       this.ui.emit("source-in-debugger-opened");
     });
   },
 
   /**
    * Tries to open a JavaScript file related to the web page for the web console
    * instance in the corresponding Scratchpad.
    *
@@ -516,21 +518,20 @@ WebConsole.prototype = {
    *         - frames: the active ThreadClient.cachedFrames array.
    *         - selected: depth/index of the selected stackframe in the debugger
    *         UI.
    *         If the debugger is not open or if it's not paused, then |null| is
    *         returned.
    */
   getDebuggerFrames: function WC_getDebuggerFrames()
   {
-    let toolbox = gDevTools.getToolbox(this.target);
-    if (!toolbox) {
+    if (!this.toolbox) {
       return null;
     }
-    let panel = toolbox.getPanel("jsdebugger");
+    let panel = this.toolbox.getPanel("jsdebugger");
 
     if (!panel) {
       return null;
     }
 
     return panel.getFrames();
   },
 
@@ -542,21 +543,20 @@ WebConsole.prototype = {
    * @return object|null
    *         A Selection referring to the currently selected node in the
    *         Inspector.
    *         If the inspector was never opened, or no node was ever selected,
    *         then |null| is returned.
    */
   getInspectorSelection: function WC_getInspectorSelection()
   {
-    let toolbox = gDevTools.getToolbox(this.target);
-    if (!toolbox) {
+    if (!this.toolbox) {
       return null;
     }
-    let panel = toolbox.getPanel("inspector");
+    let panel = this.toolbox.getPanel("inspector");
     if (!panel || !panel.selection) {
       return null;
     }
     return panel.selection;
   },
 
   /**
    * Destroy the object. Call this method to avoid memory leaks when the Web
