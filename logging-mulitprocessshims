# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  b1d6188afeb464e4dee2ee2a2b1f31e2727b15f3

diff --git a/toolkit/components/addoncompat/multiprocessShims.js b/toolkit/components/addoncompat/multiprocessShims.js
--- a/toolkit/components/addoncompat/multiprocessShims.js
+++ b/toolkit/components/addoncompat/multiprocessShims.js
@@ -114,16 +114,18 @@ AddonInterpositionService.prototype = {
 
     dump("\n\n\nLooking at target: " + target + " " + target.__tabbrowser + "\n\n\n");
     if (target.__tabbrowser) {
       debugger;
       return "TabBrowserElement";
     }
 
     if (target instanceof Ci.nsIDOMXULElement) {
+
+    dump("\n\n\nLooking at element: " + target + " " + target.localName + "\n\n\n");
       if (target.localName == "browser" && target.isRemoteBrowser) {
         return "RemoteBrowserElement";
       }
     }
 
     if (target instanceof Ci.nsIDOMChromeWindow && target.gMultiProcessBrowser) {
       return "ChromeWindow";
     }
@@ -132,16 +134,17 @@ AddonInterpositionService.prototype = {
       return "EventTarget";
     }
 
     return "generic";
   },
 
   interposeProperty(addon, target, iid, prop) {
     let interp;
+    dump("interposeProperty " + addon + " " + target + " " + iid + " " + prop + "\n\n\n");
     if (iid) {
       interp = this._interfaceInterpositions[iid];
     } else {
       try {
         interp = this._taggedInterpositions[this.getObjectTag(target)];
       } catch (e) {
         Cu.reportError(new Components.Exception("Failed to interpose object", e.result, Components.stack.caller));
       }
