# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  6d1016daf85e6cdda6c3d7bbba5c712999ae6a76
Bug XXX - Remove browserStack

diff --git a/browser/base/content/browser-gestureSupport.js b/browser/base/content/browser-gestureSupport.js
--- a/browser/base/content/browser-gestureSupport.js
+++ b/browser/base/content/browser-gestureSupport.js
@@ -654,24 +654,24 @@ var gHistorySwipeAnimation = {
     // determined experimentally that absolute values of 0.25 (or greater)
     // trigger history navigation, hence the multiplier 4 to set the arrows to
     // full opacity at 0.25 or greater.
     let opacity = Math.abs(aVal) * 4;
     if ((aVal >= 0 && this.isLTR) ||
         (aVal <= 0 && !this.isLTR)) {
       // The intention is to go back.
       if (this._canGoBack) {
-        this._prevBox.collapsed = false;
-        this._nextBox.collapsed = true;
+        this._prevBox.removeAttribute("hidden");
+        this._nextBox.setAttribute("hidden", "true");
         this._prevBox.style.opacity = opacity > 1 ? 1 : opacity;
       }
     } else if (this._canGoForward) {
       // The intention is to go forward.
-      this._nextBox.collapsed = false;
-      this._prevBox.collapsed = true;
+      this._nextBox.removeAttribute("hidden");
+      this._prevBox.setAttribute("hidden", "true");
       this._nextBox.style.opacity = opacity > 1 ? 1 : opacity;
     }
   },
 
   /**
    * Checks whether the history swipe animation is currently running or not.
    *
    * @return true if the animation is currently running, false otherwise.
@@ -720,30 +720,30 @@ var gHistorySwipeAnimation = {
   _completeFadeOut: function HSA__completeFadeOut(aEvent) {
     gHistorySwipeAnimation._removeBoxes();
   },
 
   /**
    * Adds the boxes that contain the arrows used during the swipe animation.
    */
   _addBoxes: function HSA__addBoxes() {
-    let browserStack = gBrowser.getPanel().querySelector(".browserStack");
+    let browserContainer = gBrowser.getPanel().querySelector(".browserContainer");
     this._container = this._createElement("historySwipeAnimationContainer",
-                                          "stack");
-    browserStack.appendChild(this._container);
+                                          "div");
+    browserContainer.appendChild(this._container);
 
     this._prevBox = this._createElement("historySwipeAnimationPreviousArrow",
-                                        "box");
-    this._prevBox.collapsed = true;
+                                        "div");
+    this._prevBox.setAttribute("hidden", "true");
     this._prevBox.style.opacity = 0;
     this._container.appendChild(this._prevBox);
 
     this._nextBox = this._createElement("historySwipeAnimationNextArrow",
-                                        "box");
-    this._nextBox.collapsed = true;
+                                        "div");
+    this._nextBox.setAttribute("hidden", "true");
     this._nextBox.style.opacity = 0;
     this._container.appendChild(this._nextBox);
   },
 
   /**
    * Removes the boxes.
    */
   _removeBoxes: function HSA__removeBoxes() {
@@ -759,13 +759,13 @@ var gHistorySwipeAnimation = {
    *
    * @param aID
    *        An identifier to create the element with.
    * @param aTagName
    *        The name of the tag to create the element for.
    * @return the newly created element.
    */
   _createElement: function HSA__createElement(aID, aTagName) {
-    let element = document.createXULElement(aTagName);
+    let element = document.createElement(aTagName);
     element.id = aID;
     return element;
   },
 };
diff --git a/browser/base/content/browser.css b/browser/base/content/browser.css
--- a/browser/base/content/browser.css
+++ b/browser/base/content/browser.css
@@ -69,16 +69,26 @@ body,
   min-width: -moz-fit-content;
 }
 
 .search-one-offs[compact=true] .search-setting-button,
 .search-one-offs:not([compact=true]) .search-setting-button-compact {
   display: none;
 }
 
+.browserStack,
+.browserContainer {
+  -moz-box-flex: 10000;
+}
+
+.browserStack {
+  position: relative;
+  display: -moz-box;
+}
+
 /* Prevent shrinking the page content to 0 height and width */
 .browserStack > browser {
   min-height: 25px;
   min-width: 25px;
 }
 
 %ifdef MENUBAR_CAN_AUTOHIDE
 #toolbar-menubar[autohide="true"] {
@@ -906,23 +916,43 @@ menupopup[emptyplacesresult="true"] > .h
   min-width: 1px;
 }
 
 /* History Swipe Animation */
 
 #historySwipeAnimationContainer {
   overflow: hidden;
   pointer-events: none;
+  position: absolute;
+  top: 0;
+  left: 0;
+  width: 100%;
+  height: 100%;
 }
 
+#historySwipeAnimationPreviousArrow[hidden],
+#historySwipeAnimationNextArrow[hidden] {
+  /* display: none; */
+  background: red;
+}
 #historySwipeAnimationPreviousArrow {
+  position: absolute;
+  top: 0;
+  left: 0;
+  width: 100%;
+  height: 100%;
   background: url("chrome://browser/content/history-swipe-arrow.svg")
               center left / 64px 128px no-repeat transparent;
 }
 #historySwipeAnimationNextArrow {
+  position: absolute;
+  top: 0;
+  left: 0;
+  width: 100%;
+  height: 100%;
   background: url("chrome://browser/content/history-swipe-arrow.svg")
               center left / 64px 128px no-repeat transparent;
   transform: rotate(180deg);
 }
 
 /*  Full Screen UI */
 
 #fullscr-toggler {
diff --git a/browser/base/content/tabbrowser.js b/browser/base/content/tabbrowser.js
--- a/browser/base/content/tabbrowser.js
+++ b/browser/base/content/tabbrowser.js
@@ -1834,16 +1834,17 @@ window._gBrowser = {
     recordExecution,
     remoteType,
     replayExecution,
     sameProcessAsFrameLoader,
     uriIsAboutBlank,
     userContextId,
   } = {}) {
     let b = document.createXULElement("browser");
+    b.flex = 1;
     // Use the JSM global to create the permanentKey, so that if the
     // permanentKey is held by something after this window closes, it
     // doesn't keep the window alive.
     b.permanentKey = new (Cu.getGlobalForObject(Services).Object);
 
     const defaultBrowserAttributes = {
       contextmenu: "contentAreaContextMenu",
       datetimepicker: "DateTimePickerPanel",
@@ -1932,26 +1933,24 @@ window._gBrowser = {
     notificationbox.setAttribute("notificationside", "top");
 
     // We set large flex on both containers to allow the devtools toolbox to
     // set a flex attribute. We don't want the toolbox to actually take up free
     // space, but we do want it to collapse when the window shrinks, and with
     // flex=0 it can't. When the toolbox is on the bottom it's a sibling of
     // browserStack, and when it's on the side it's a sibling of
     // browserContainer.
-    let stack = document.createXULElement("stack");
+    let stack = document.createElement("div");
     stack.className = "browserStack";
     stack.appendChild(b);
-    stack.setAttribute("flex", "10000");
 
     let browserContainer = document.createXULElement("vbox");
     browserContainer.className = "browserContainer";
     browserContainer.appendChild(notificationbox);
     browserContainer.appendChild(stack);
-    browserContainer.setAttribute("flex", "10000");
 
     let browserSidebarContainer = document.createXULElement("hbox");
     browserSidebarContainer.className = "browserSidebarContainer";
     browserSidebarContainer.appendChild(browserContainer);
 
     // Prevent the superfluous initial load of a blank document
     // if we're going to load something other than about:blank.
     if (!uriIsAboutBlank) {
diff --git a/browser/themes/shared/browser.inc.css b/browser/themes/shared/browser.inc.css
--- a/browser/themes/shared/browser.inc.css
+++ b/browser/themes/shared/browser.inc.css
@@ -437,9 +437,14 @@
 #cfr-notification-footer-animation-button,
 #cfr-notification-footer-animation-label {
   color: rgba(12, 12, 13, 0.8);
   cursor: pointer;
 }
 
 #content-mask {
   background: rgba(0, 0, 0, 0.5);
+  position: absolute;
+  top: 0;
+  left: 0;
+  right: 0;
+  bottom: 0;
 }
