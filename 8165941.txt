diff --git a/browser/devtools/styleeditor/StyleEditorUI.jsm b/browser/devtools/styleeditor/StyleEditorUI.jsm
--- a/browser/devtools/styleeditor/StyleEditorUI.jsm
+++ b/browser/devtools/styleeditor/StyleEditorUI.jsm
@@ -134,18 +134,18 @@ StyleEditorUI.prototype = {
         }
       }
     }.bind(this)).then(() => {
       this.createUI();
       this._debuggee.getStyleSheets().then((styleSheets) => {
         this._resetStyleSheetList(styleSheets); 
         this._target.on("will-navigate", this._clear);
         this._target.on("navigate", this._onNewDocument);
-      });
-    });
+      }).catch(Cu.reportError);
+    }).catch(Cu.reportError);
   },
 
   /**
    * Build the initial UI and wire buttons with event handlers.
    */
   createUI: function() {
     let viewRoot = this._root.parentNode.querySelector(".splitview-root");
 
@@ -200,21 +200,35 @@ StyleEditorUI.prototype = {
    * Refresh editors to reflect the stylesheets in the document.
    *
    * @param {string} event
    *        Event name
    * @param {StyleSheet} styleSheet
    *        StyleSheet object for new sheet
    */
   _onNewDocument: function() {
+<<<<<<<
     this._debuggee.getStyleSheets().then((styleSheets) => {
       this._resetStyleSheetList(styleSheets);
     })
   },
 
+|||||||
+    this._debuggee.getStyleSheets().then((styleSheets) => {
+      this._resetStyleSheetList(styleSheets);
+    })
+  },
+
+=======
+    this._debuggee.getStyleSheets().then((styleSheets) => {
+      this._resetStyleSheetList(styleSheets);
+    }).catch(Cu.reportError);
+  },
+
+>>>>>>>
   /**
    * Add editors for all the given stylesheets to the UI.
    *
    * @param  {array} styleSheets
    *         Array of StyleSheetFront
    */
   _resetStyleSheetList: function(styleSheets) {
     this._clear();
@@ -280,17 +294,17 @@ StyleEditorUI.prototype = {
         sources.forEach((source) => {
           // set so the first sheet will be selected, even if it's a source
           source.styleSheetIndex = styleSheet.styleSheetIndex;
           source.relatedStyleSheet = styleSheet;
 
           this._addStyleSheetEditor(source);
         });
       }
-    });
+    }).catch(Cu.reportError);
   },
 
   /**
    * Add a new editor to the UI for a source.
    *
    * @param {StyleSheet}  styleSheet
    *        Object representing stylesheet
    * @param {nsIfile}  file
@@ -312,17 +326,17 @@ StyleEditorUI.prototype = {
     editor.on("property-change", this._summaryChange.bind(this, editor));
     editor.on("media-rules-changed", this._updateMediaList.bind(this, editor));
     editor.on("linked-css-file", this._summaryChange.bind(this, editor));
     editor.on("linked-css-file-error", this._summaryChange.bind(this, editor));
     editor.on("error", this._onError);
 
     this.editors.push(editor);
 
-    editor.fetchSource(this._sourceLoaded.bind(this, editor));
+    editor.fetchSource(this._sourceLoaded.bind(this, editor)).catch(Cu.reportError);
     return editor;
   },
 
   /**
    * Import a style sheet from file and asynchronously create a
    * new stylesheet on the debuggee for it.
    *
    * @param {mixed} file
@@ -553,19 +567,19 @@ StyleEditorUI.prototype = {
                 let ruleCount = editor.styleSheet.ruleCount;
                 if (lineCount >= ruleCount) {
                   editor.addUnusedRegions(data.reports);
                 }
                 else {
                   this.emit("error", { key: "error-compressed", level: "info" });
                 }
               }
-            });
-          }, console.error);
-        }.bind(this)).then(null, Cu.reportError);
+            }).catch(Cu.reportError);
+          }).catch(Cu.reportError);
+        }.bind(this)).then(null).catch(Cu.reportError);
       }.bind(this)
     });
   },
 
   /**
    * Switch to the editor that has been marked to be selected.
    *
    * @return {Promise}
diff --git a/toolkit/devtools/server/protocol.js b/toolkit/devtools/server/protocol.js
--- a/toolkit/devtools/server/protocol.js
+++ b/toolkit/devtools/server/protocol.js
@@ -1,16 +1,17 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 let Services = require("Services");
-let promise = require("devtools/toolkit/deprecated-sync-thenables");
+let promise = require("promise");
+// let promise = require("devtools/toolkit/deprecated-sync-thenables");
 let {Class} = require("sdk/core/heritage");
 let {EventTarget} = require("sdk/event/target");
 let events = require("sdk/event/core");
 let object = require("sdk/util/object");
 
 exports.emit = events.emit;
 
 // Waiting for promise.done() to be added, see bug 851321
diff --git a/toolkit/modules/Promise-backend.js b/toolkit/modules/Promise-backend.js
--- a/toolkit/modules/Promise-backend.js
+++ b/toolkit/modules/Promise-backend.js
@@ -338,16 +338,18 @@ this.Promise = function Promise(aExecuto
      * a rejection callback, this contains an array
      * - {string} id An id for use with |PendingErrors|;
      * - {FinalizationWitness} witness A witness broadcasting |id| on
      *   notification "promise-finalization-witness".
      */
     witness: undefined
   }});
 
+  this.stack = new Error().stack;
+
   Object.seal(this);
 
   let resolve = PromiseWalker.completePromise
                              .bind(PromiseWalker, this, STATUS_RESOLVED);
   let reject = PromiseWalker.completePromise
                             .bind(PromiseWalker, this, STATUS_REJECTED);
 
   try {
@@ -670,16 +672,18 @@ this.PromiseWalker = {
     // Change the promise status and schedule our handlers for processing.
     aPromise[N_INTERNALS].status = aStatus;
     aPromise[N_INTERNALS].value = aValue;
     if (aPromise[N_INTERNALS].handlers.length > 0) {
       this.schedulePromise(aPromise);
     } else if (aStatus == STATUS_REJECTED) {
       // This is a rejection and the promise is the last in the chain.
       // For the time being we therefore have an uncaught error.
+      dump(">>>>>>>>>> UNCAUGHT PROMISE REJECTION <<<<<<<<<<\n" + aPromise.stack + "\n");
+
       let id = PendingErrors.register(aValue);
       let witness =
           FinalizationWitnessService.make("promise-finalization-witness", id);
       aPromise[N_INTERNALS].witness = [id, witness];
     }
   },
 
   /**
