# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  ace1b4a3ec042824b363d1bb6dd57c1320d9c87e
Bug ???: try converting inspector frame to html

diff --git a/devtools/client/definitions.js b/devtools/client/definitions.js
--- a/devtools/client/definitions.js
+++ b/devtools/client/definitions.js
@@ -83,17 +83,17 @@ Tools.options = {
 Tools.inspector = {
   id: "inspector",
   accesskey: l10n("inspector.accesskey", inspectorStrings),
   key: l10n("inspector.commandkey", inspectorStrings),
   ordinal: 1,
   modifiers: osString == "Darwin" ? "accel,alt" : "accel,shift",
   icon: "chrome://devtools/skin/images/tool-inspector.svg",
   invertIconForLightTheme: true,
-  url: "chrome://devtools/content/inspector/inspector.xul",
+  url: "chrome://devtools/content/inspector/inspector.xhtml",
   label: l10n("inspector.label", inspectorStrings),
   panelLabel: l10n("inspector.panelLabel", inspectorStrings),
   get tooltip() {
     return l10n("inspector.tooltip2", inspectorStrings,
     ( osString == "Darwin" ? "Cmd+Opt+" : "Ctrl+Shift+" ) + this.key);
   },
   inMenu: true,
   commands: [
diff --git a/devtools/client/framework/sidebar.js b/devtools/client/framework/sidebar.js
--- a/devtools/client/framework/sidebar.js
+++ b/devtools/client/framework/sidebar.js
@@ -8,16 +8,21 @@ const {Cu} = require("chrome");
 
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource://gre/modules/Task.jsm");
 
 var EventEmitter = require("devtools/shared/event-emitter");
 var Telemetry = require("devtools/client/shared/telemetry");
 
+// XXX: Ideally we can move the tab rendering and state management into
+// a widget, something like https://github.com/firebug/firebug.sdk/blob/master/lib/reps/tabs.js.
+// But first I need to figure out how to load that thing.
+// const {TabPanel,Tabs} = require("devtools/client/shared/widgets/tabs");
+
 const XULNS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
 
 /**
  * ToolSidebar provides methods to register tabs in the sidebar.
  * It's assumed that the sidebar contains a xul:tabbox.
  * Typically, you'll want the tabbox parameter to be a XUL tabbox like this:
  *
  * <tabbox id="inspector-sidebar" handleCtrlTab="false" class="devtools-sidebar-tabs">
@@ -57,33 +62,35 @@ const XULNS = "http://www.mozilla.org/ke
  * - <tabid>-selected : After tab <tabid> was selected
  * - select : Same as above, but for any tab, the ID is passed with the event
  * - <tabid>-unselected : After tab <tabid> is unselected
  */
 function ToolSidebar(tabbox, panel, uid, options={}) {
   EventEmitter.decorate(this);
 
   this._tabbox = tabbox;
+  this._tabboxTabs = tabbox.querySelector("tabs");
+  this._tabboxTabpanels = tabbox.querySelector("tabpanels");
   this._uid = uid;
   this._panelDoc = this._tabbox.ownerDocument;
   this._toolPanel = panel;
   this._options = options;
 
   this._onTabBoxOverflow = this._onTabBoxOverflow.bind(this);
   this._onTabBoxUnderflow = this._onTabBoxUnderflow.bind(this);
 
   try {
     this._width = Services.prefs.getIntPref("devtools.toolsidebar-width." + this._uid);
   } catch(e) {}
 
   if (!options.disableTelemetry) {
     this._telemetry = new Telemetry();
   }
 
-  this._tabbox.tabpanels.addEventListener("select", this, true);
+  this._tabbox.addEventListener("select", this, true);
 
   this._tabs = new Map();
 
   // Check for existing tabs in the DOM and add them.
   this.addExistingTabs();
 
   if (this._options.hideTabstripe) {
     this._tabbox.setAttribute("hidetabs", "true");
@@ -107,21 +114,23 @@ ToolSidebar.prototype = {
    * Add a "â€¦" button at the end of the tabstripe that toggles a dropdown menu
    * containing the list of all tabs if any become hidden due to lack of room.
    *
    * If the ToolSidebar was created with the "showAllTabsMenu" option set to
    * true, this is already done automatically. If not, you may call this
    * function at any time to add the menu.
    */
   addAllTabsMenu: function() {
+    // XXX: Don't mess with this yet.. Hopefully the widget would handle this
+    return;
     if (this._allTabsBtn) {
       return;
     }
 
-    let tabs = this._tabbox.tabs;
+    let tabs = this._tabboxTabs;
 
     // Create a container and insert it first in the tabbox
     let allTabsContainer = this._panelDoc.createElementNS(XULNS, "stack");
     this._tabbox.insertBefore(allTabsContainer, tabs);
 
     // Move the tabs inside and make them flex
     allTabsContainer.appendChild(tabs);
     tabs.setAttribute("flex", "1");
@@ -147,27 +156,30 @@ ToolSidebar.prototype = {
     // Add menuitems to the alltabs menu if there are already tabs in the
     // sidebar
     for (let [id, tab] of this._tabs) {
       this._addItemToAllTabsMenu(id, tab, tab.hasAttribute("selected"));
     }
   },
 
   removeAllTabsMenu: function() {
+    // XXX: Don't mess with this yet.. Hopefully the widget would handle this
+    return;
+
     if (!this._allTabsBtn) {
       return;
     }
 
-    let tabs = this._tabbox.tabs;
+    let tabs = this._tabboxTabs;
 
     tabs.removeEventListener("overflow", this._onTabBoxOverflow, false);
     tabs.removeEventListener("underflow", this._onTabBoxUnderflow, false);
 
     // Moving back the tabs as a first child of the tabbox
-    this._tabbox.insertBefore(tabs, this._tabbox.tabpanels);
+    this._tabbox.insertBefore(tabs, this._tabboxTabpanels);
     this._tabbox.querySelector("stack").remove();
 
     this._allTabsBtn = null;
   },
 
   _onTabBoxOverflow: function() {
     this._allTabsBtn.removeAttribute("hidden");
   },
@@ -193,52 +205,52 @@ ToolSidebar.prototype = {
     }
     // The auto-checking of menuitems in this menu doesn't work, so let's do
     // it manually
     item.setAttribute("autocheck", false);
 
     this._allTabsBtn.querySelector("menupopup").appendChild(item);
 
     item.addEventListener("click", () => {
-      this._tabbox.selectedTab = tab;
+      this._tabboxSelectedTab = tab;
     }, false);
 
     tab.allTabsMenuItem = item;
 
     return item;
   },
 
   /**
    * Register a tab. A tab is a document.
    * The document must have a title, which will be used as the name of the tab.
    *
    * @param {string} tab uniq id
    * @param {string} url
    */
   addTab: function(id, url, selected=false) {
-    let iframe = this._panelDoc.createElementNS(XULNS, "iframe");
+    let iframe = this._panelDoc.createElement("iframe");
     iframe.className = "iframe-" + id;
     iframe.setAttribute("flex", "1");
     iframe.setAttribute("src", url);
     iframe.tooltip = "aHTMLTooltip";
 
     // Creating the tab and adding it to the tabbox
-    let tab = this._panelDoc.createElementNS(XULNS, "tab");
-    this._tabbox.tabs.appendChild(tab);
-    tab.setAttribute("label", ""); // Avoid showing "undefined" while the tab is loading
+    let tab = this._panelDoc.createElement("tab");
+    this._tabboxTabs.appendChild(tab);
+    // tab.setAttribute("label", ""); // Avoid showing "undefined" while the tab is loading
     tab.setAttribute("id", this.TAB_ID_PREFIX + id);
     tab.setAttribute("crop", "end");
 
     // Add the tab to the allTabs menu if exists
     let allTabsItem = this._addItemToAllTabsMenu(id, tab, selected);
 
     let onIFrameLoaded = (event) => {
       let doc = event.target;
       let win = doc.defaultView;
-      tab.setAttribute("label", doc.title);
+      tab.textContent = doc.title;
 
       if (allTabsItem) {
         allTabsItem.setAttribute("label", doc.title);
       }
 
       iframe.removeEventListener("load", onIFrameLoaded, true);
       if ("setPanel" in win) {
         win.setPanel(this._toolPanel, iframe);
@@ -246,27 +258,31 @@ ToolSidebar.prototype = {
       this.emit(id + "-ready");
     };
 
     iframe.addEventListener("load", onIFrameLoaded, true);
 
     let tabpanel = this._panelDoc.createElementNS(XULNS, "tabpanel");
     tabpanel.setAttribute("id", this.TABPANEL_ID_PREFIX + id);
     tabpanel.appendChild(iframe);
-    this._tabbox.tabpanels.appendChild(tabpanel);
+    tabpanel.hidden = true;
+    this._tabboxTabpanels.appendChild(tabpanel);
 
     this._tooltip = this._panelDoc.createElementNS(XULNS, "tooltip");
     this._tooltip.id = "aHTMLTooltip";
     tabpanel.appendChild(this._tooltip);
     this._tooltip.page = true;
 
     tab.linkedPanel = this.TABPANEL_ID_PREFIX + id;
 
     // We store the index of this tab.
     this._tabs.set(id, tab);
+    tab.addEventListener("click", () => {
+      this.select(id);
+    });
 
     if (selected) {
       // For some reason I don't understand, if we call this.select in this
       // event loop (after inserting the tab), the tab will never get the
       // the "selected" attribute set to true.
       this._panelDoc.defaultView.setTimeout(() => {
         this.select(id);
       }, 10);
@@ -278,17 +294,17 @@ ToolSidebar.prototype = {
   untitledTabsIndex: 0,
 
   /**
    * Search for existing tabs in the markup that aren't know yet and add them.
    */
   addExistingTabs: function() {
     let knownTabs = [...this._tabs.values()];
 
-    for (let tab of this._tabbox.tabs.querySelectorAll("tab")) {
+    for (let tab of this._tabboxTabs.querySelectorAll("tab")) {
       if (knownTabs.indexOf(tab) !== -1) {
         continue;
       }
 
       // Find an ID for this unknown tab
       let id = tab.getAttribute("id") || "untitled-tab-" + (this.untitledTabsIndex++);
 
       // Register the tab
@@ -348,43 +364,45 @@ ToolSidebar.prototype = {
   },
 
   /**
    * Select a specific tab.
    */
   select: function(id) {
     let tab = this.getTab(id);
     if (tab) {
-      this._tabbox.selectedTab = tab;
+      this._tabboxSelectedTab = tab;
+      // Hack to trigger event, since tabbox.selectedTab doesn't actually do anything
+      this.handleEvent({type: "select"});
     }
   },
 
   /**
    * Return the id of the selected tab.
    */
   getCurrentTabID: function() {
     let currentID = null;
     for (let [id, tab] of this._tabs) {
-      if (this._tabbox.tabs.selectedItem == tab) {
+      if (this._tabboxSelectedTab == tab) {
         currentID = id;
         break;
       }
     }
     return currentID;
   },
 
   /**
    * Returns the requested tab panel based on the id.
    * @param {String} id
    * @return {DOMNode}
    */
   getTabPanel: function(id) {
     // Search with and without the ID prefix as there might have been existing
     // tabpanels by the time the sidebar got created
-    return this._tabbox.tabpanels.querySelector("#" + this.TABPANEL_ID_PREFIX + id + ", #" + id);
+    return this._tabboxTabpanels.querySelector("#" + this.TABPANEL_ID_PREFIX + id + ", #" + id);
   },
 
   /**
    * Return the tab based on the provided id, if one was registered with this id.
    * @param {String} id
    * @return {DOMNode}
    */
   getTab: function(id) {
@@ -402,38 +420,43 @@ ToolSidebar.prototype = {
     if (this._currentTool == this.getCurrentTabID()) {
       // Tool hasn't changed.
       return;
     }
 
     let previousTool = this._currentTool;
     this._currentTool = this.getCurrentTabID();
     if (previousTool) {
+      // Hack to hide tab panel until we have a different widget.
+      this._tabboxTabpanels.querySelector("#" + this._tabs.get(previousTool).linkedPanel).hidden = true;
+
       if (this._telemetry) {
         this._telemetry.toolClosed(previousTool);
       }
       this.emit(previousTool + "-unselected");
     }
 
     if (this._telemetry) {
       this._telemetry.toolOpened(this._currentTool);
     }
 
+    // Hack to show tab panel until we have a different widget.
+    this._tabboxTabpanels.querySelector("#" + this._tabs.get(this._currentTool).linkedPanel).hidden = false;
     this.emit(this._currentTool + "-selected");
     this.emit("select", this._currentTool);
 
     // Handlers for "select"/"...-selected"/"...-unselected" events might have
     // destroyed the sidebar in the meantime.
     if (this._destroyed) {
       return;
     }
 
     // Handle menuitem selection if the allTabsMenu is there by unchecking all
     // items except the selected one.
-    let tab = this._tabbox.selectedTab;
+    let tab = this._tabboxSelectedTab;
     if (tab.allTabsMenuItem) {
       for (let otherItem of this._allTabsBtn.querySelectorAll("menuitem")) {
         otherItem.removeAttribute("checked");
       }
       tab.allTabsMenuItem.setAttribute("checked", true);
     }
   },
 
@@ -496,32 +519,32 @@ ToolSidebar.prototype = {
     this._destroyed = true;
 
     Services.prefs.setIntPref("devtools.toolsidebar-width." + this._uid, this._tabbox.width);
 
     if (this._allTabsBtn) {
       this.removeAllTabsMenu();
     }
 
-    this._tabbox.tabpanels.removeEventListener("select", this, true);
+    this._tabbox.removeEventListener("select", this, true);
 
-    // Note that we check for the existence of this._tabbox.tabpanels at each
+    // Note that we check for the existence of this._tabboxTabpanels at each
     // step as the container window may have been closed by the time one of the
     // panel's destroy promise resolves.
-    while (this._tabbox.tabpanels && this._tabbox.tabpanels.hasChildNodes()) {
-      let panel = this._tabbox.tabpanels.firstChild;
+    while (this._tabboxTabpanels && this._tabboxTabpanels.hasChildNodes()) {
+      let panel = this._tabboxTabpanels.firstChild;
       let win = panel.firstChild.contentWindow;
       if (win && ("destroy" in win)) {
         yield win.destroy();
       }
       panel.remove();
     }
 
-    while (this._tabbox.tabs && this._tabbox.tabs.hasChildNodes()) {
-      this._tabbox.tabs.removeChild(this._tabbox.tabs.firstChild);
+    while (this._tabboxTabs && this._tabboxTabs.hasChildNodes()) {
+      this._tabboxTabs.removeChild(this._tabboxTabs.firstChild);
     }
 
     if (this._currentTool && this._telemetry) {
       this._telemetry.toolClosed(this._currentTool);
     }
 
     this._toolPanel.emit("sidebar-destroyed", this);
 
diff --git a/devtools/client/inspector/inspector-panel.js b/devtools/client/inspector/inspector-panel.js
--- a/devtools/client/inspector/inspector-panel.js
+++ b/devtools/client/inspector/inspector-panel.js
@@ -160,17 +160,22 @@ InspectorPanel.prototype = {
     this.lastNodemenuItem = this.nodemenu.lastChild;
     this.nodemenu.addEventListener("popupshowing", this._setupNodeMenu, true);
     this.nodemenu.addEventListener("popuphiding", this._resetNodeMenu, true);
 
     this.selection.on("new-node-front", this.onNewSelection);
     this.selection.on("before-new-node-front", this.onBeforeNewSelection);
     this.selection.on("detached-front", this.onDetached);
 
-    this.breadcrumbs = new HTMLBreadcrumbs(this);
+    // this.breadcrumbs = new HTMLBreadcrumbs(this);
+    this.breadcrumbs = {
+      destroy: () => {},
+      indexOf: () => {},
+      cutAfter: () => {},
+    };
 
     this._toolbox.on("host-changed", this.onToolboxHostChanged);
 
     if (this.target.isLocalTab) {
       this.browser = this.target.tab.linkedBrowser;
       this.browser.addEventListener("resize", this.scheduleLayoutChange, true);
 
       // Show a warning when the debugger is paused.
diff --git a/devtools/client/inspector/inspector.css b/devtools/client/inspector/inspector.css
--- a/devtools/client/inspector/inspector.css
+++ b/devtools/client/inspector/inspector.css
@@ -1,15 +1,16 @@
 /* vim:set ts=2 sw=2 sts=2 et: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #inspector-sidebar {
   min-width: 250px;
+  max-width: 50vw; /* XXX: Remove this once the tabs are actually being hidden */
 }
 
 #searchbox-panel-listbox {
   width: 250px;
   max-width: 250px;
   overflow-x: hidden;
 }
 
diff --git a/devtools/client/inspector/inspector.xul b/devtools/client/inspector/inspector.xhtml
rename from devtools/client/inspector/inspector.xul
rename to devtools/client/inspector/inspector.xhtml
--- a/devtools/client/inspector/inspector.xul
+++ b/devtools/client/inspector/inspector.xhtml
@@ -8,18 +8,20 @@
 <?xml-stylesheet href="chrome://devtools/skin/common.css" type="text/css"?>
 <?xml-stylesheet href="chrome://devtools/skin/widgets.css" type="text/css"?>
 <?xml-stylesheet href="chrome://devtools/skin/inspector.css" type="text/css"?>
 <!DOCTYPE window [
   <!ENTITY % inspectorDTD SYSTEM "chrome://devtools/locale/inspector.dtd" >
    %inspectorDTD;
 ]>
 
-<window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
-
+<html xmlns="http://www.w3.org/1999/xhtml"
+      xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
+      class="theme-body">
+  <head>
   <script type="application/javascript;version=1.8"
           src="chrome://devtools/content/shared/theme-switching.js"/>
 
   <commandset>
     <command id="nodeSearchCommand"
       oncommand="inspector.searchBox.focus()"/>
   </commandset>
 
@@ -139,38 +141,34 @@
       <menuitem id="node-menu-pseudo-active"
         label=":active" type="checkbox"
         oncommand="inspector.togglePseudoClass(':active')"/>
       <menuitem id="node-menu-pseudo-focus"
         label=":focus" type="checkbox"
         oncommand="inspector.togglePseudoClass(':focus')"/>
     </menupopup>
   </popupset>
-
-  <box flex="1" class="devtools-responsive-container theme-body">
+  </head>
+  <body class="devtools-responsive-container theme-body">
+  <box flex="1">
     <vbox flex="1" class="devtools-main-content">
-      <toolbar id="inspector-toolbar"
-        class="devtools-toolbar"
-        nowindowdrag="true">
-        <arrowscrollbox id="inspector-breadcrumbs"
-          class="breadcrumbs-widget-container"
-          flex="1" orient="horizontal"
-          clicktoscroll="true"/>
-        <box id="inspector-searchlabel" />
-        <textbox id="inspector-searchbox"
-          type="search"
-          timeout="50"
-          class="devtools-searchinput"
-          placeholder="&inspectorSearchHTML.label3;"/>
-        <toolbarbutton id="inspector-pane-toggle"
-          class="devtools-toolbarbutton"
-          tabindex="0" />
-      </toolbar>
+      <div id="inspector-toolbar"
+           class="devtools-toolbar">
+        <div flex="1"></div>
+        <div class="label" id="inspector-searchlabel"></div>
+        <input id="inspector-searchbox"
+               class="devtools-searchinput devtools-rule-searchbox"
+               type="search" placeholder="&inspectorSearchHTML.label3;"/>
+        <button id="inspector-pane-toggle"
+          class="devtools-button"
+          tabindex="0"></button>
+      </div>
       <vbox flex="1" id="markup-box">
       </vbox>
     </vbox>
     <splitter class="devtools-side-splitter"/>
-    <tabbox id="inspector-sidebar" handleCtrlTab="false" class="devtools-sidebar-tabs" hidden="true">
+    <div id="inspector-sidebar" handleCtrlTab="false" class="devtools-sidebar-tabs" hidden="true">
       <tabs/>
       <tabpanels flex="1"/>
-    </tabbox>
+    </div>
   </box>
-</window>
+  </body>
+</html>
diff --git a/devtools/client/jar.mn b/devtools/client/jar.mn
--- a/devtools/client/jar.mn
+++ b/devtools/client/jar.mn
@@ -123,17 +123,17 @@ devtools.jar:
     content/framework/toolbox-options.js (framework/toolbox-options.js)
     content/framework/toolbox.xul (framework/toolbox.xul)
     content/framework/options-panel.css (framework/options-panel.css)
     content/framework/toolbox-process-window.xul (framework/toolbox-process-window.xul)
 *   content/framework/toolbox-process-window.js (framework/toolbox-process-window.js)
     content/framework/dev-edition-promo/dev-edition-promo.xul (framework/dev-edition-promo/dev-edition-promo.xul)
 *   content/framework/dev-edition-promo/dev-edition-promo.css (framework/dev-edition-promo/dev-edition-promo.css)
     content/framework/dev-edition-promo/dev-edition-logo.png (framework/dev-edition-promo/dev-edition-logo.png)
-    content/inspector/inspector.xul (inspector/inspector.xul)
+    content/inspector/inspector.xhtml (inspector/inspector.xhtml)
     content/inspector/inspector.css (inspector/inspector.css)
     content/framework/connect/connect.xhtml (framework/connect/connect.xhtml)
     content/framework/connect/connect.css (framework/connect/connect.css)
     content/framework/connect/connect.js (framework/connect/connect.js)
     content/shared/widgets/graphs-frame.xhtml (shared/widgets/graphs-frame.xhtml)
     content/shared/widgets/spectrum-frame.xhtml (shared/widgets/spectrum-frame.xhtml)
     content/shared/widgets/spectrum.css (shared/widgets/spectrum.css)
     content/shared/widgets/cubic-bezier-frame.xhtml (shared/widgets/cubic-bezier-frame.xhtml)
diff --git a/devtools/client/shared/autocomplete-popup.js b/devtools/client/shared/autocomplete-popup.js
--- a/devtools/client/shared/autocomplete-popup.js
+++ b/devtools/client/shared/autocomplete-popup.js
@@ -28,17 +28,17 @@ const events  = require("devtools/shared
  *                     panel to be automatically selected when the popup shows.
  *        - direction {String} The direction of the text in the panel. rtl or ltr
  *        - onSelect {String} The select event handler for the richlistbox
  *        - onClick {String} The click event handler for the richlistbox.
  *        - onKeypress {String} The keypress event handler for the richlistitems.
  */
 function AutocompletePopup(aDocument, aOptions = {})
 {
-  this._document = aDocument;
+  this._document = aDocument.defaultView.top.document;
 
   this.autoSelect = aOptions.autoSelect || false;
   this.position = aOptions.position || "after_start";
   this.direction = aOptions.direction || "ltr";
 
   this.onSelect = aOptions.onSelect;
   this.onClick = aOptions.onClick;
   this.onKeypress = aOptions.onKeypress;
diff --git a/devtools/client/shared/inplace-editor.js b/devtools/client/shared/inplace-editor.js
--- a/devtools/client/shared/inplace-editor.js
+++ b/devtools/client/shared/inplace-editor.js
@@ -29,18 +29,18 @@ const HTML_NS = "http://www.w3.org/1999/
 const CONTENT_TYPES = {
   PLAIN_TEXT: 0,
   CSS_VALUE: 1,
   CSS_MIXED: 2,
   CSS_PROPERTY: 3,
 };
 const MAX_POPUP_ENTRIES = 10;
 
-const FOCUS_FORWARD = Ci.nsIFocusManager.MOVEFOCUS_FORWARD;
-const FOCUS_BACKWARD = Ci.nsIFocusManager.MOVEFOCUS_BACKWARD;
+const FOCUS_FORWARD = 1; // Ci.nsIFocusManager.MOVEFOCUS_FORWARD;
+const FOCUS_BACKWARD = 2; // Ci.nsIFocusManager.MOVEFOCUS_BACKWARD;
 
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 Cu.import("resource://devtools/shared/event-emitter.js");
 
 /**
  * Mark a span editable.  |editableField| will listen for the span to
  * be focused and create an InlineEditor to handle text input.
diff --git a/devtools/client/shared/widgets/Tooltip.js b/devtools/client/shared/widgets/Tooltip.js
--- a/devtools/client/shared/widgets/Tooltip.js
+++ b/devtools/client/shared/widgets/Tooltip.js
@@ -98,16 +98,19 @@ var PanelFactory = {
   /**
    * Get a new XUL panel instance.
    * @param {XULDocument} doc
    *        The XUL document to put that panel into
    * @param {OptionsStore} options
    *        An options store to get some configuration from
    */
   get: function(doc, options) {
+    // All the way up to browser.xul
+    doc = doc.defaultView.top.document;
+
     // Create the tooltip
     let panel = doc.createElement("panel");
     panel.setAttribute("hidden", true);
     panel.setAttribute("ignorekeys", true);
     panel.setAttribute("animate", false);
 
     panel.setAttribute("consumeoutsideclicks",
                        options.get("consumeOutsideClick"));
@@ -174,17 +177,17 @@ var PanelFactory = {
  * - shown : when the tooltip is shown
  * - hiding : just before the tooltip closes
  * - hidden : when the tooltip gets hidden
  * - keypress : when any key gets pressed, with keyCode
  */
 function Tooltip(doc, options) {
   EventEmitter.decorate(this);
 
-  this.doc = doc;
+  this.doc = doc.defaultView.top.document;
   this.options = new OptionsStore({
     consumeOutsideClick: false,
     closeOnKeys: [ESCAPE_KEYCODE],
     noAutoFocus: true,
     closeOnEvents: []
   }, options);
   this.panel = PanelFactory.get(doc, this.options);
 
diff --git a/devtools/client/themes/inspector.css b/devtools/client/themes/inspector.css
--- a/devtools/client/themes/inspector.css
+++ b/devtools/client/themes/inspector.css
@@ -15,16 +15,21 @@
 
 %endif
 
 #inspector-searchlabel {
   overflow: hidden;
 }
 
 #inspector-searchbox {
+  -moz-box-flex: 0;
+  width: 150px;
+}
+
+/*#inspector-searchbox {
   transition-property: max-width, -moz-padding-end, -moz-padding-start;
   transition-duration: 250ms;
   transition-timing-function: ease;
 }
 
 #inspector-searchbox:not([focused]):not([filled]) > .textbox-input-box {
   overflow: hidden;
 }
@@ -34,17 +39,17 @@
   -moz-padding-end: 5px;
   -moz-padding-start: 22px;
   background-position: 8px center, top left, top left;
 }
 
 #inspector-searchbox[focused],
 #inspector-searchbox[filled] {
   max-width: 200px !important;
-}
+}*/
 
 /* Expand/collapse panel toolbar button */
 
 #inspector-pane-toggle {
   list-style-image: url(images/debugger-collapse.png);
 }
 
 #inspector-pane-toggle[pane-collapsed] {
diff --git a/devtools/client/themes/toolbars.css b/devtools/client/themes/toolbars.css
--- a/devtools/client/themes/toolbars.css
+++ b/devtools/client/themes/toolbars.css
@@ -13,20 +13,88 @@
 
 .theme-dark {
   --searchbox-background-color: #4d4222;
   --searchbox-border-color: #d99f2b;
   --searcbox-no-match-background-color: #402325;
   --searcbox-no-match-border-color: #cc3d3d;
 }
 
+/* LAYOUT */
+
+iframe {
+  border: none;
+}
+
+html * {
+  -moz-appearance: none;
+  box-sizing: border-box;
+  margin: 0;
+  padding: 0;
+}
+
+html {
+  height: 100%;
+}
+
+html body {
+  height: 100%;
+  display: flex;
+  flex-direction: column;
+}
+
+html box,
+html hbox,
+html vbox,
+html spacer {
+  display: flex;
+  flex-basis: 0;
+  white-space: pre;
+}
+
+html hbox {
+  flex-flow: row;
+}
+
+html vbox {
+  flex-flow: column;
+}
+
+[hidden="true"] {
+  display: none !important;
+}
+
+html [flex="1"] { flex-grow: 1 }
+html [flex="2"] { flex-grow: 2 }
+html [flex="3"] { flex-grow: 3 }
+html [flex="4"] { flex-grow: 4 }
+html [flex="5"] { flex-grow: 5 }
+html [flex="6"] { flex-grow: 6 }
+html [flex="7"] { flex-grow: 7 }
+html [flex="8"] { flex-grow: 8 }
+html [flex="9"] { flex-grow: 9 }
+
+html [align="start"] { align-items: flex-start }
+html [align="center"] { align-items: center }
+html [align="end"] { align-items: flex-end }
+html [align="baseline"] { align-items: flex-baseline }
+html [align="stretch"] { align-items: flex-stretch }
+
+html [pack="start"] { justify-content: flex-start }
+html [pack="center"] { justify-content: center }
+html [pack="end"] { justify-content: flex-end }
+
+html .devtools-toolbar {
+  display: flex;
+}
+
 /* Toolbars */
 .devtools-toolbar,
 .devtools-sidebar-tabs tabs {
-  -moz-appearance: none;
+  /*-moz-appearance: none;*/
   padding: 0;
   border-width: 0;
   border-bottom-width: 1px;
   border-style: solid;
   height: 24px;
   line-height: 24px;
   box-sizing: border-box;
 }
@@ -491,37 +559,42 @@
 }
 
 .devtools-closebutton:hover {
   opacity: 1;
 }
 
 /* In-tools sidebar */
 .devtools-sidebar-tabs {
-  -moz-appearance: none;
+  display: flex;
+  flex-direction: column;
   margin: 0;
 }
 
 .devtools-sidebar-tabs > tabpanels {
-  -moz-appearance: none;
+  display: flex;
   background: transparent;
   padding: 0;
   border: 0;
 }
 
+.theme-light .devtools-sidebar-tabs > tabpanels > tabpanel {
+  display: flex;
+}
+
 .theme-light .devtools-sidebar-tabs > tabpanels {
   background: var(--theme-sidebar-background);
   color: var(--theme-body-color);
 }
 
 .devtools-sidebar-tabs tabs {
-  position: static;
+ /* position: static;
   font: inherit;
   margin-bottom: 0;
-  overflow: hidden;
+  overflow: hidden;*/
 }
 
 .devtools-sidebar-alltabs {
   -moz-appearance: none;
   height: 24px;
   line-height: 24px;
   padding: 0 4px;
   margin: 0;
@@ -535,28 +608,28 @@
 }
 
 .devtools-sidebar-tabs tabs > .tabs-right,
 .devtools-sidebar-tabs tabs > .tabs-left {
   display: none;
 }
 
 .devtools-sidebar-tabs tabs > tab {
-  -moz-appearance: none;
+  /*-moz-appearance: none;*/
   /* We want to match the height of a toolbar with a toolbarbutton
    * First, we need to replicated the padding of toolbar (4px),
    * then we need to take the border of the buttons into account (1px).
    */
   padding: 0 3px;
   margin: 0;
   min-width: 78px;
   text-align: center;
   background-color: transparent;
   color: inherit;
-  -moz-box-flex: 1;
+  /*-moz-box-flex: 1;*/
   border-width: 0;
   -moz-border-start-width: 1px;
   border-style: solid;
   border-radius: 0;
   position: static;
   text-shadow: none;
 }
 
