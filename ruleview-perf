# HG changeset patch
# Parent 0e6f1d91ca263ba22a2eee4e38ddfe8b4efe0d1f
# User Brian Grinstead <bgrinstead@mozilla.com>
Experimenting with ruleview-perf

diff --git a/browser/devtools/inspector/inspector-panel.js b/browser/devtools/inspector/inspector-panel.js
--- a/browser/devtools/inspector/inspector-panel.js
+++ b/browser/devtools/inspector/inspector-panel.js
@@ -38,23 +38,23 @@ const LAYOUT_CHANGE_TIMER = 250;
  * - layout-change
  *      Fired when the layout of the inspector changes
  * - breadcrumbs-updated
  *      Fired when the breadcrumb widget updates to a new node
  * - layoutview-updated
  *      Fired when the layoutview (box model) updates to a new node
  * - markupmutation
  *      Fired after markup mutations have been processed by the markup-view
- * - computed-view-refreshed
+ * - computedview-refreshed
  *      Fired when the computed rules view updates to a new node
- * - computed-view-property-expanded
+ * - computedview-property-expanded
  *      Fired when a property is expanded in the computed rules view
- * - computed-view-property-collapsed
+ * - computedview-property-collapsed
  *      Fired when a property is collapsed in the computed rules view
- * - rule-view-refreshed
+ * - ruleview-refreshed
  *      Fired when the rule view updates to a new node
  */
 function InspectorPanel(iframeWindow, toolbox) {
   this._toolbox = toolbox;
   this._target = toolbox._target;
   this.panelDoc = iframeWindow.document;
   this.panelWin = iframeWindow;
   this.panelWin.inspector = this;
diff --git a/browser/devtools/inspector/test/browser_inspector_pseudoclass_lock.js b/browser/devtools/inspector/test/browser_inspector_pseudoclass_lock.js
--- a/browser/devtools/inspector/test/browser_inspector_pseudoclass_lock.js
+++ b/browser/devtools/inspector/test/browser_inspector_pseudoclass_lock.js
@@ -50,17 +50,17 @@ function* performTests(inspector, rulevi
   yield togglePseudoClass(inspector);
   yield testNavigate(inspector, ruleview);
 }
 
 function* togglePseudoClass(inspector) {
   info("Toggle the pseudoclass, wait for the pseudoclass event and wait for the refresh of the rule view");
 
   let onPseudo = inspector.selection.once("pseudoclass");
-  let onRefresh = inspector.once("rule-view-refreshed");
+  let onRefresh = inspector.once("ruleview-refreshed");
   inspector.togglePseudoClass(PSEUDO);
 
   yield onPseudo;
   yield onRefresh;
 }
 
 function* testNavigate(inspector, ruleview) {
   yield selectNode("#parent-div", inspector);
@@ -74,17 +74,16 @@ function* testNavigate(inspector, rulevi
   yield onPseudo;
 
   info("Make sure the pseudoclass is removed after navigating to a non-hierarchy node");
   is(DOMUtils.hasPseudoClassLock(getNode("#div-1"), PSEUDO), false,
     "pseudo-class lock is removed after inspecting sibling node");
 
   yield selectNode("#div-1", inspector);
   yield togglePseudoClass(inspector);
-  yield inspector.once("computed-view-refreshed");
 }
 
 function showPickerOn(node, inspector) {
   let highlighter = inspector.toolbox.highlighter;
   return highlighter.showBoxModel(getNodeFront(node));
 }
 
 function* testAdded(inspector, ruleview) {
diff --git a/browser/devtools/responsivedesign/test/browser_responsivecomputedview.js b/browser/devtools/responsivedesign/test/browser_responsivecomputedview.js
--- a/browser/devtools/responsivedesign/test/browser_responsivecomputedview.js
+++ b/browser/devtools/responsivedesign/test/browser_responsivecomputedview.js
@@ -65,26 +65,26 @@ function test() {
 
     inspector.selection.setNode(div);
     inspector.once("inspector-updated", testShrink);
   }
 
   function testShrink() {
     is(computedWidth(), "500px", "Should show 500px initially.");
 
-    inspector.once("computed-view-refreshed", function onShrink() {
+    inspector.once("computedview-refreshed", function onShrink() {
       is(computedWidth(), "100px", "div should be 100px after shrinking.");
       testGrow();
     });
 
     instance.setSize(100, 100);
   }
 
   function testGrow() {
-    inspector.once("computed-view-refreshed", function onGrow() {
+    inspector.once("computedview-refreshed", function onGrow() {
       is(computedWidth(), "500px", "Should be 500px after growing.");
       finishUp();
     });
 
     instance.setSize(500, 500);
   }
 
   function finishUp() {
diff --git a/browser/devtools/styleinspector/computed-view.js b/browser/devtools/styleinspector/computed-view.js
--- a/browser/devtools/styleinspector/computed-view.js
+++ b/browser/devtools/styleinspector/computed-view.js
@@ -299,20 +299,16 @@ CssHtmlTree.prototype = {
       for (let propView of this.propertyViews) {
         propView.refresh();
       }
       return promise.resolve(undefined);
     }
 
     this.tooltip.hide();
 
-    if (aElement === this.viewedElement) {
-      return promise.resolve(undefined);
-    }
-
     this.viewedElement = aElement;
     this.refreshSourceFilter();
 
     return this.refreshPanel();
   },
 
   _createPropertyViews: function()
   {
@@ -394,17 +390,17 @@ CssHtmlTree.prototype = {
       let deferred = promise.defer();
       this._refreshProcess = new UpdateProcess(this.styleWindow, this.propertyViews, {
         onItem: (aPropView) => {
           aPropView.refresh();
         },
         onDone: () => {
           this._refreshProcess = null;
           this.noResults.hidden = this.numVisibleProperties > 0;
-          this.styleInspector.inspector.emit("computed-view-refreshed");
+          this.styleInspector.inspector.emit("computedview-refreshed");
           deferred.resolve(undefined);
         }
       });
       this._refreshProcess.schedule();
       return deferred.promise;
     }).then(null, (err) => console.error(err));
   },
 
@@ -1065,22 +1061,22 @@ PropertyView.prototype = {
         if (!this.matchedExpanded) {
           return;
         }
 
         this._matchedSelectorResponse = matched;
         CssHtmlTree.processTemplate(this.templateMatchedSelectors,
           this.matchedSelectorsContainer, this);
         this.matchedExpander.setAttribute("open", "");
-        this.tree.styleInspector.inspector.emit("computed-view-property-expanded");
+        this.tree.styleInspector.inspector.emit("computedview-property-expanded");
       }).then(null, console.error);
     } else {
       this.matchedSelectorsContainer.innerHTML = "";
       this.matchedExpander.removeAttribute("open");
-      this.tree.styleInspector.inspector.emit("computed-view-property-collapsed");
+      this.tree.styleInspector.inspector.emit("computedview-property-collapsed");
       return promise.resolve(undefined);
     }
   },
 
   get matchedSelectors()
   {
     return this._matchedSelectorResponse;
   },
diff --git a/browser/devtools/styleinspector/rule-view.js b/browser/devtools/styleinspector/rule-view.js
--- a/browser/devtools/styleinspector/rule-view.js
+++ b/browser/devtools/styleinspector/rule-view.js
@@ -1429,20 +1429,16 @@ CssRuleView.prototype = {
 
   /**
    * Update the highlighted element.
    *
    * @param {NodeActor} aElement
    *        The node whose style rules we'll inspect.
    */
   highlight: function(aElement) {
-    if (this._viewedElement === aElement) {
-      return promise.resolve(undefined);
-    }
-
     this.clear();
 
     if (this._elementStyle) {
       delete this._elementStyle;
     }
 
     this._viewedElement = aElement;
     if (!this._viewedElement) {
diff --git a/browser/devtools/styleinspector/style-inspector.js b/browser/devtools/styleinspector/style-inspector.js
--- a/browser/devtools/styleinspector/style-inspector.js
+++ b/browser/devtools/styleinspector/style-inspector.js
@@ -33,17 +33,17 @@ function RuleViewTool(aInspector, aWindo
 
   this._changeHandler = () => {
     this.inspector.markDirty();
   };
 
   this.view.element.addEventListener("CssRuleViewChanged", this._changeHandler);
 
   this._refreshHandler = () => {
-    this.inspector.emit("rule-view-refreshed");
+    this.inspector.emit("ruleview-refreshed");
   };
 
   this.view.element.addEventListener("CssRuleViewRefreshed", this._refreshHandler);
 
   this._cssLinkHandler = (aEvent) => {
     let rule = aEvent.detail.rule;
     let sheet = rule.parentStyleSheet;
 
@@ -75,28 +75,43 @@ function RuleViewTool(aInspector, aWindo
   this.view.element.addEventListener("CssRuleViewCSSLinkClicked",
                                      this._cssLinkHandler);
 
   this._onSelect = this.onSelect.bind(this);
   this.inspector.selection.on("detached", this._onSelect);
   this.inspector.selection.on("new-node-front", this._onSelect);
   this.refresh = this.refresh.bind(this);
   this.inspector.on("layout-change", this.refresh);
+  this.inspector.selection.on("pseudoclass", this.refresh);
 
-  this.inspector.selection.on("pseudoclass", this.refresh);
+  this.onSidebarSelect = this.onSidebarSelect.bind(this);
+  this.inspector.sidebar.on("select", this.onSidebarSelect);
 
   this.onSelect();
 }
 
 exports.RuleViewTool = RuleViewTool;
 
 RuleViewTool.prototype = {
+
+  onSidebarSelect: function(e, sidebar) {
+    if (sidebar === "ruleview") {
+      this.onSelect();
+    }
+  },
+
+  isActive: function() {
+    return this.inspector &&
+           this.inspector.sidebar.getCurrentTabID() == "ruleview";
+  },
+
   onSelect: function RVT_onSelect(aEvent) {
-    if (!this.view) {
-      // Skip the event if RuleViewTool has been destroyed.
+    if (!this.view || !this.isActive()) {
+      // Skip the event if RuleViewTool has been destroyed
+      // or if it is not visible.
       return;
     }
     this.view.setPageStyle(this.inspector.pageStyle);
 
     if (!this.inspector.selection.isConnected() ||
         !this.inspector.selection.isElementNode()) {
       this.view.highlight(null);
       return;
@@ -104,23 +119,26 @@ RuleViewTool.prototype = {
 
     if (!aEvent || aEvent == "new-node-front") {
       let done = this.inspector.updating("rule-view");
       this.view.highlight(this.inspector.selection.nodeFront).then(done, done);
     }
   },
 
   refresh: function RVT_refresh() {
-    this.view.nodeChanged();
+    if (this.isActive()) {
+      this.view.nodeChanged();
+    }
   },
 
   destroy: function RVT_destroy() {
     this.inspector.off("layout-change", this.refresh);
     this.inspector.selection.off("pseudoclass", this.refresh);
     this.inspector.selection.off("new-node-front", this._onSelect);
+    this.inspector.sidebar.off("select", this.onSidebarSelect);
 
     this.view.element.removeEventListener("CssRuleViewCSSLinkClicked",
       this._cssLinkHandler);
 
     this.view.element.removeEventListener("CssRuleViewChanged",
       this._changeHandler);
 
     this.view.element.removeEventListener("CssRuleViewRefreshed",
@@ -147,28 +165,44 @@ function ComputedViewTool(aInspector, aW
 
   this._onSelect = this.onSelect.bind(this);
   this.inspector.selection.on("detached", this._onSelect);
   this.inspector.selection.on("new-node-front", this._onSelect);
   this.refresh = this.refresh.bind(this);
   this.inspector.on("layout-change", this.refresh);
   this.inspector.selection.on("pseudoclass", this.refresh);
 
+  this.onSidebarSelect = this.onSidebarSelect.bind(this);
+  this.inspector.sidebar.on("select", this.onSidebarSelect);
+
   this.view.highlight(null);
 
   this.onSelect();
 }
 
 exports.ComputedViewTool = ComputedViewTool;
 
 ComputedViewTool.prototype = {
+
+  onSidebarSelect: function(e, sidebar) {
+    if (sidebar === "computedview") {
+      this.onSelect();
+    }
+  },
+
+  isActive: function() {
+    return this.inspector &&
+           this.inspector.sidebar.getCurrentTabID() == "computedview";
+  },
+
   onSelect: function CVT_onSelect(aEvent)
   {
-    if (!this.view) {
-      // Skip the event if ComputedViewTool has been destroyed.
+    if (!this.view || !this.isActive()) {
+      // Skip the event if ComputedViewTool has been destroyed
+      // or if it is not visible.
       return;
     }
     this.view.setPageStyle(this.inspector.pageStyle);
 
     if (!this.inspector.selection.isConnected() ||
         !this.inspector.selection.isElementNode()) {
       this.view.highlight(null);
       return;
@@ -178,25 +212,27 @@ ComputedViewTool.prototype = {
       let done = this.inspector.updating("computed-view");
       this.view.highlight(this.inspector.selection.nodeFront).then(() => {
         done();
       });
     }
   },
 
   refresh: function CVT_refresh() {
-    this.view.refreshPanel();
+    if (this.isActive()) {
+      this.view.refreshPanel();
+    }
   },
 
   destroy: function CVT_destroy(aContext)
   {
     this.inspector.off("layout-change", this.refresh);
-    this.inspector.sidebar.off("computedview-selected", this.refresh);
     this.inspector.selection.off("pseudoclass", this.refresh);
     this.inspector.selection.off("new-node-front", this._onSelect);
+    this.inspector.sidebar.off("select", this.onSidebarSelect);
 
     this.view.destroy();
     delete this.view;
 
     delete this.outerIFrame;
     delete this.cssLogic;
     delete this.cssHtmlTree;
     delete this.window;
diff --git a/browser/devtools/styleinspector/test/browser_computedview_browser-styles.js b/browser/devtools/styleinspector/test/browser_computedview_browser-styles.js
--- a/browser/devtools/styleinspector/test/browser_computedview_browser-styles.js
+++ b/browser/devtools/styleinspector/test/browser_computedview_browser-styles.js
@@ -26,17 +26,17 @@ let test = asyncTest(function*() {
   is(isPropertyVisible("color", view), true,
     "span #matches color property is visible");
   is(isPropertyVisible("background-color", view), false,
     "span #matches background-color property is hidden");
 
   info("Toggling the browser styles");
   let doc = view.styleDocument;
   let checkbox = doc.querySelector(".includebrowserstyles");
-  let onRefreshed = inspector.once("computed-view-refreshed");
+  let onRefreshed = inspector.once("computedview-refreshed");
   checkbox.click();
   yield onRefreshed;
 
   info("Checking the browser styles");
   is(isPropertyVisible("color", view), true,
     "span color property is visible");
   is(isPropertyVisible("background-color", view), true,
     "span background-color property is visible");
diff --git a/browser/devtools/styleinspector/test/browser_computedview_keybindings_01.js b/browser/devtools/styleinspector/test/browser_computedview_keybindings_01.js
--- a/browser/devtools/styleinspector/test/browser_computedview_keybindings_01.js
+++ b/browser/devtools/styleinspector/test/browser_computedview_keybindings_01.js
@@ -45,18 +45,18 @@ function getFirstVisiblePropertyView(vie
   });
 
   return propView;
 }
 
 function* checkToggleKeyBinding(win, key, rulesTable, inspector) {
   info("Pressing " + key + " key a couple of times to check that the property gets expanded/collapsed");
 
-  let onExpand = inspector.once("computed-view-property-expanded");
-  let onCollapse = inspector.once("computed-view-property-collapsed");
+  let onExpand = inspector.once("computedview-property-expanded");
+  let onCollapse = inspector.once("computedview-property-collapsed");
 
   info("Expanding the property");
   EventUtils.synthesizeKey(key, {}, win);
   yield onExpand;
   isnot(rulesTable.innerHTML, "", "The property has been expanded");
 
   info("Collapsing the property");
   EventUtils.synthesizeKey(key, {}, win);
diff --git a/browser/devtools/styleinspector/test/browser_computedview_keybindings_02.js b/browser/devtools/styleinspector/test/browser_computedview_keybindings_02.js
--- a/browser/devtools/styleinspector/test/browser_computedview_keybindings_02.js
+++ b/browser/devtools/styleinspector/test/browser_computedview_keybindings_02.js
@@ -34,28 +34,28 @@ let test = asyncTest(function*() {
   yield selectNode("span", inspector);
 
   info("Selecting the first computed style in the list");
   let firstStyle = view.styleDocument.querySelector(".property-view");
   ok(firstStyle, "First computed style found in panel");
   firstStyle.focus();
 
   info("Tab to select the 2nd style and press return");
-  let onExpanded = inspector.once("computed-view-property-expanded");
+  let onExpanded = inspector.once("computedview-property-expanded");
   EventUtils.synthesizeKey("VK_TAB", {});
   EventUtils.synthesizeKey("VK_RETURN", {});
   yield onExpanded;
 
   info("Verify the 2nd style has been expanded");
   let secondStyleSelectors = view.styleDocument.querySelectorAll(
     ".property-content .matchedselectors")[1];
   ok(secondStyleSelectors.childNodes.length > 0, "Matched selectors expanded");
 
   info("Tab back up and test the same thing, with space");
-  let onExpanded = inspector.once("computed-view-property-expanded");
+  let onExpanded = inspector.once("computedview-property-expanded");
   EventUtils.synthesizeKey("VK_TAB", {shiftKey: true});
   EventUtils.synthesizeKey("VK_SPACE", {});
   yield onExpanded;
 
   info("Verify the 1st style has been expanded too");
   let firstStyleSelectors = view.styleDocument.querySelectorAll(
     ".property-content .matchedselectors")[0];
   ok(firstStyleSelectors.childNodes.length > 0, "Matched selectors expanded");
diff --git a/browser/devtools/styleinspector/test/browser_computedview_matched-selectors-toggle.js b/browser/devtools/styleinspector/test/browser_computedview_matched-selectors-toggle.js
--- a/browser/devtools/styleinspector/test/browser_computedview_matched-selectors-toggle.js
+++ b/browser/devtools/styleinspector/test/browser_computedview_matched-selectors-toggle.js
@@ -37,17 +37,17 @@ let test = asyncTest(function*() {
 
 function* testExpandOnTwistyClick({styleDocument, styleWindow}, inspector) {
   info("Testing that a property expands on twisty click");
 
   info("Getting twisty element");
   let twisty = styleDocument.querySelector(".expandable");
   ok(twisty, "Twisty found");
 
-  let onExpand = inspector.once("computed-view-property-expanded");
+  let onExpand = inspector.once("computedview-property-expanded");
   info("Clicking on the twisty element");
   twisty.click();
 
   yield onExpand;
 
   // Expanded means the matchedselectors div is not empty
   let div = styleDocument.querySelector(".property-content .matchedselectors");
   ok(div.childNodes.length > 0, "Matched selectors are expanded on twisty click");
@@ -55,17 +55,17 @@ function* testExpandOnTwistyClick({style
 
 function* testCollapseOnTwistyClick({styleDocument, styleWindow}, inspector) {
   info("Testing that a property collapses on twisty click");
 
   info("Getting twisty element");
   let twisty = styleDocument.querySelector(".expandable");
   ok(twisty, "Twisty found");
 
-  let onCollapse = inspector.once("computed-view-property-collapsed");
+  let onCollapse = inspector.once("computedview-property-collapsed");
   info("Clicking on the twisty element");
   twisty.click();
 
   yield onCollapse;
 
   // Collapsed means the matchedselectors div is empty
   let div = styleDocument.querySelector(".property-content .matchedselectors");
   ok(div.childNodes.length === 0, "Matched selectors are collapsed on twisty click");
@@ -73,17 +73,17 @@ function* testCollapseOnTwistyClick({sty
 
 function* testExpandOnDblClick({styleDocument, styleWindow}, inspector) {
   info("Testing that a property expands on container dbl-click");
 
   info("Getting computed property container");
   let container = styleDocument.querySelector(".property-view");
   ok(container, "Container found");
 
-  let onExpand = inspector.once("computed-view-property-expanded");
+  let onExpand = inspector.once("computedview-property-expanded");
   info("Dbl-clicking on the container");
   EventUtils.synthesizeMouseAtCenter(container, {clickCount: 2}, styleWindow);
 
   yield onExpand;
 
   // Expanded means the matchedselectors div is not empty
   let div = styleDocument.querySelector(".property-content .matchedselectors");
   ok(div.childNodes.length > 0, "Matched selectors are expanded on dblclick");
@@ -91,17 +91,17 @@ function* testExpandOnDblClick({styleDoc
 
 function* testCollapseOnDblClick({styleDocument, styleWindow}, inspector) {
   info("Testing that a property collapses on container dbl-click");
 
   info("Getting computed property container");
   let container = styleDocument.querySelector(".property-view");
   ok(container, "Container found");
 
-  let onCollapse = inspector.once("computed-view-property-collapsed");
+  let onCollapse = inspector.once("computedview-property-collapsed");
   info("Dbl-clicking on the container");
   EventUtils.synthesizeMouseAtCenter(container, {clickCount: 2}, styleWindow);
 
   yield onCollapse;
 
   // Collapsed means the matchedselectors div is empty
   let div = styleDocument.querySelector(".property-content .matchedselectors");
   ok(div.childNodes.length === 0, "Matched selectors are collapsed on dblclick");
diff --git a/browser/devtools/styleinspector/test/browser_computedview_no-results-placeholder.js b/browser/devtools/styleinspector/test/browser_computedview_no-results-placeholder.js
--- a/browser/devtools/styleinspector/test/browser_computedview_no-results-placeholder.js
+++ b/browser/devtools/styleinspector/test/browser_computedview_no-results-placeholder.js
@@ -29,17 +29,17 @@ let test = asyncTest(function*() {
 });
 
 function* enterInvalidFilter(inspector, computedView) {
   let searchbar = computedView.searchField;
   let searchTerm = "xxxxx";
 
   info("setting filter text to \"" + searchTerm + "\"");
 
-  let onRefreshed = inspector.once("computed-view-refreshed");
+  let onRefreshed = inspector.once("computedview-refreshed");
   searchbar.focus();
   for each (let c in searchTerm) {
     EventUtils.synthesizeKey(c, {}, computedView.styleWindow);
   }
   yield onRefreshed;
 }
 
 function checkNoResultsPlaceholderShown(computedView) {
@@ -51,17 +51,17 @@ function checkNoResultsPlaceholderShown(
   is(display, "block", "placeholder is visible");
 }
 
 function* clearFilterText(inspector, computedView) {
   info("Clearing the filter text");
 
   let searchbar = computedView.searchField;
 
-  let onRefreshed = inspector.once("computed-view-refreshed");
+  let onRefreshed = inspector.once("computedview-refreshed");
   searchbar.focus();
   searchbar.value = "";
   EventUtils.synthesizeKey("c", {}, computedView.styleWindow);
   yield onRefreshed;
 }
 
 function checkNoResultsPlaceholderHidden(computedView) {
   info("Checking that the no results placeholder is hidden");
diff --git a/browser/devtools/styleinspector/test/browser_computedview_refresh-on-style-change_01.js b/browser/devtools/styleinspector/test/browser_computedview_refresh-on-style-change_01.js
--- a/browser/devtools/styleinspector/test/browser_computedview_refresh-on-style-change_01.js
+++ b/browser/devtools/styleinspector/test/browser_computedview_refresh-on-style-change_01.js
@@ -19,17 +19,17 @@ let test = asyncTest(function*() {
   info("Opening the computed view and selecting the test node");
   let {toolbox, inspector, view} = yield openComputedView();
   yield selectNode(div, inspector);
 
   let fontSize = getComputedViewPropertyValue(view, "font-size");
   is(fontSize, "10px", "The computed view shows the right font-size");
 
   info("Changing the node's style and waiting for the update");
-  let onUpdated = inspector.once("computed-view-refreshed");
+  let onUpdated = inspector.once("computedview-refreshed");
   div.style.cssText = "font-size: 15px; color: red;";
   yield onUpdated;
 
   fontSize = getComputedViewPropertyValue(view, "font-size");
   is(fontSize, "15px", "The computed view shows the updated font-size");
   let color = getComputedViewPropertyValue(view, "color");
   is(color, "#F00", "The computed view also shows the color now");
 });
diff --git a/browser/devtools/styleinspector/test/browser_computedview_refresh-on-style-change_02.js b/browser/devtools/styleinspector/test/browser_computedview_refresh-on-style-change_02.js
--- a/browser/devtools/styleinspector/test/browser_computedview_refresh-on-style-change_02.js
+++ b/browser/devtools/styleinspector/test/browser_computedview_refresh-on-style-change_02.js
@@ -18,21 +18,18 @@ let test = asyncTest(function*() {
 
   info("Opening the computed view and selecting the test node");
   let {toolbox, inspector, view} = yield openComputedView();
   yield selectNode(div, inspector);
 
   let fontSize = getComputedViewPropertyValue(view, "font-size");
   is(fontSize, "10px", "The computed view shows the right font-size");
 
-  info("Now switching to the rule view");
-  yield openRuleView();
-
   info("Changing the node's style and waiting for the update");
-  let onUpdated = inspector.once("computed-view-refreshed");
+  let onUpdated = inspector.once("computedview-refreshed");
   div.style.cssText = "font-size: 20px; color: blue; text-align: center";
   yield onUpdated;
 
   fontSize = getComputedViewPropertyValue(view, "font-size");
   is(fontSize, "20px", "The computed view shows the updated font-size");
   let color = getComputedViewPropertyValue(view, "color");
   is(color, "#00F", "The computed view also shows the color now");
   let textAlign = getComputedViewPropertyValue(view, "text-align");
diff --git a/browser/devtools/styleinspector/test/browser_computedview_search-filter.js b/browser/devtools/styleinspector/test/browser_computedview_search-filter.js
--- a/browser/devtools/styleinspector/test/browser_computedview_search-filter.js
+++ b/browser/devtools/styleinspector/test/browser_computedview_search-filter.js
@@ -27,27 +27,27 @@ let test = asyncTest(function*() {
 });
 
 
 function* testToggleDefaultStyles(inspector, computedView) {
   info("checking \"Browser styles\" checkbox");
 
   let doc = computedView.styleDocument;
   let checkbox = doc.querySelector(".includebrowserstyles");
-  let onRefreshed = inspector.once("computed-view-refreshed");
+  let onRefreshed = inspector.once("computedview-refreshed");
   checkbox.click();
   yield onRefreshed;
 }
 
 function* testAddTextInFilter(inspector, computedView) {
   info("setting filter text to \"color\"");
 
   let doc = computedView.styleDocument;
   let searchbar = doc.querySelector(".devtools-searchinput");
-  let onRefreshed = inspector.once("computed-view-refreshed");
+  let onRefreshed = inspector.once("computedview-refreshed");
   searchbar.focus();
 
   let win = computedView.styleWindow;
   EventUtils.synthesizeKey("c", {}, win);
   EventUtils.synthesizeKey("o", {}, win);
   EventUtils.synthesizeKey("l", {}, win);
   EventUtils.synthesizeKey("o", {}, win);
   EventUtils.synthesizeKey("r", {}, win);
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_refresh-on-attribute-change_01.js b/browser/devtools/styleinspector/test/browser_ruleview_refresh-on-attribute-change_01.js
--- a/browser/devtools/styleinspector/test/browser_ruleview_refresh-on-attribute-change_01.js
+++ b/browser/devtools/styleinspector/test/browser_ruleview_refresh-on-attribute-change_01.js
@@ -25,25 +25,25 @@ let test = asyncTest(function*() {
 
   let {toolbox, inspector, view} = yield openRuleView();
   yield selectNode(testElement, inspector);
 
   info("Checking that the rule-view has the element, #testid and .testclass selectors");
   checkRuleViewContent(view, ["element", "#testid", ".testclass"]);
 
   info("Changing the node's ID attribute and waiting for the rule-view refresh");
-  let ruleViewRefreshed = inspector.once("rule-view-refreshed");
+  let ruleViewRefreshed = inspector.once("ruleview-refreshed");
   testElement.setAttribute("id", "differentid");
   yield ruleViewRefreshed;
 
   info("Checking that the rule-view doesn't have the #testid selector anymore");
   checkRuleViewContent(view, ["element", ".testclass"]);
 
   info("Reverting the ID attribute change");
-  let ruleViewRefreshed = inspector.once("rule-view-refreshed");
+  let ruleViewRefreshed = inspector.once("ruleview-refreshed");
   testElement.setAttribute("id", "testid");
   yield ruleViewRefreshed;
 
   info("Checking that the rule-view has all the selectors again");
   checkRuleViewContent(view, ["element", "#testid", ".testclass"]);
 });
 
 function checkRuleViewContent(view, expectedSelectors) {
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_refresh-on-attribute-change_02.js b/browser/devtools/styleinspector/test/browser_ruleview_refresh-on-attribute-change_02.js
--- a/browser/devtools/styleinspector/test/browser_ruleview_refresh-on-attribute-change_02.js
+++ b/browser/devtools/styleinspector/test/browser_ruleview_refresh-on-attribute-change_02.js
@@ -24,17 +24,17 @@ let test = asyncTest(function*() {
   yield testPropertyChange4(inspector, view, testElement);
   yield testPropertyChange5(inspector, view, testElement);
   yield testPropertyChange6(inspector, view, testElement);
 });
 
 function* testPropertyChanges(inspector, ruleView, testElement) {
   info("Adding a second margin-top value in the element selector");
   let ruleEditor = ruleView._elementStyle.rules[0].editor;
-  let onRefreshed = inspector.once("rule-view-refreshed");
+  let onRefreshed = inspector.once("ruleview-refreshed");
   ruleEditor.addProperty("margin-top", "5px", "");
   yield onRefreshed;
 
   let rule = ruleView._elementStyle.rules[0];
   validateTextProp(rule.textProps[0], false, "margin-top", "1px", "Original margin property active");
 }
 
 function* testPropertyChange0(inspector, ruleView, testElement) {
@@ -102,17 +102,17 @@ function* testPropertyChange6(inspector,
   is(rule.editor.element.querySelectorAll(".ruleview-property").length, 5, "Added a property");
   validateTextProp(rule.textProps[4], true, "background",
                    "url(\"chrome://branding/content/about-logo.png\") repeat scroll 0% 0% red",
                    "shortcut property correctly set",
                    "url('chrome://branding/content/about-logo.png') repeat scroll 0% 0% #F00");
 }
 
 function* changeElementStyle(testElement, style, inspector) {
-  let onRefreshed = inspector.once("rule-view-refreshed");
+  let onRefreshed = inspector.once("ruleview-refreshed");
   testElement.setAttribute("style", style);
   yield onRefreshed;
 }
 
 function validateTextProp(aProp, aEnabled, aName, aValue, aDesc, valueSpanText) {
   is(aProp.enabled, aEnabled, aDesc + ": enabled.");
   is(aProp.name, aName, aDesc + ": name.");
   is(aProp.value, aValue, aDesc + ": value.");
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_refresh-on-style-change.js b/browser/devtools/styleinspector/test/browser_ruleview_refresh-on-style-change.js
--- a/browser/devtools/styleinspector/test/browser_ruleview_refresh-on-style-change.js
+++ b/browser/devtools/styleinspector/test/browser_ruleview_refresh-on-style-change.js
@@ -21,17 +21,17 @@ let test = asyncTest(function*() {
   info("Opening the rule view and selecting the test node");
   let {toolbox, inspector, view} = yield openRuleView();
   yield selectNode(div, inspector);
 
   let fontSize = getRuleViewPropertyValue(view, "element", "font-size");
   is(fontSize, "10px", "The rule view shows the right font-size");
 
   info("Changing the node's style and waiting for the update");
-  let onUpdated = inspector.once("rule-view-refreshed");
+  let onUpdated = inspector.once("ruleview-refreshed");
   div.style.cssText = "font-size: 3em; color: lightgoldenrodyellow; text-align: right; text-transform: uppercase";
   yield onUpdated;
 
   let textAlign = getRuleViewPropertyValue(view, "element", "text-align");
   is(textAlign, "right", "The rule view shows the new text align.");
   let color = getRuleViewPropertyValue(view, "element", "color");
   is(color, "lightgoldenrodyellow", "The rule view shows the new color.")
   let fontSize = getRuleViewPropertyValue(view, "element", "font-size");
diff --git a/browser/devtools/styleinspector/test/head.js b/browser/devtools/styleinspector/test/head.js
--- a/browser/devtools/styleinspector/test/head.js
+++ b/browser/devtools/styleinspector/test/head.js
@@ -221,18 +221,31 @@ function waitForToolboxFrameFocus(toolbo
 let openInspectorSideBar = Task.async(function*(id) {
   let {toolbox, inspector} = yield openInspector();
 
   if (!hasSideBarTab(inspector, id)) {
     info("Waiting for the " + id + " sidebar to be ready");
     yield inspector.sidebar.once(id + "-ready");
   }
 
-  info("Selecting the " + id + " sidebar");
-  inspector.sidebar.select(id);
+  // If this tab is not yet selected, need to wait for it to be
+  // refreshed after selection.
+  if (id !== inspector.sidebar.getCurrentTabID()) {
+    info("Waiting for the " + id + " sidebar to refresh");
+    let onRefresh = inspector.once(id + "-refreshed");
+
+    info("Selecting the " + id + " sidebar");
+    inspector.sidebar.select(id);
+
+    yield onRefresh;
+  }
+  else {
+    info("Selecting the " + id + " sidebar");
+    inspector.sidebar.select(id);
+  }
 
   return {
     toolbox: toolbox,
     inspector: inspector,
     view: inspector.sidebar.getWindowForTab(id)[id].view
   };
 });
 
@@ -717,17 +730,17 @@ function getComputedViewPropertyValue(vi
  */
 function expandComputedViewPropertyByIndex(view, inspector, index) {
   info("Expanding property " + index + " in the computed view");
   let expandos = view.styleDocument.querySelectorAll(".expandable");
   if (!expandos.length || !expandos[index]) {
     return promise.reject();
   }
 
-  let onExpand = inspector.once("computed-view-property-expanded");
+  let onExpand = inspector.once("computedview-property-expanded");
   expandos[index].click();
   return onExpand;
 }
 
 /**
  * Get a rule-link from the computed-view given its index
  * @param {CssHtmlTree} view The instance of the computed view panel
  * @param {Number} index The index of the link to be retrieved
