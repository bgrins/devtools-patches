# HG changeset patch
# Parent 517a797c25339f837d2b1eb5c9100d5b7f878c6d
# User Brian Grinstead <bgrinstead@mozilla.com>
Experimenting with ruleview-perf

diff --git a/browser/devtools/styleinspector/style-inspector.js b/browser/devtools/styleinspector/style-inspector.js
--- a/browser/devtools/styleinspector/style-inspector.js
+++ b/browser/devtools/styleinspector/style-inspector.js
@@ -75,28 +75,43 @@ function RuleViewTool(aInspector, aWindo
   this.view.element.addEventListener("CssRuleViewCSSLinkClicked",
                                      this._cssLinkHandler);
 
   this._onSelect = this.onSelect.bind(this);
   this.inspector.selection.on("detached", this._onSelect);
   this.inspector.selection.on("new-node-front", this._onSelect);
   this.refresh = this.refresh.bind(this);
   this.inspector.on("layout-change", this.refresh);
+  this.inspector.selection.on("pseudoclass", this.refresh);
 
-  this.inspector.selection.on("pseudoclass", this.refresh);
+  this.onSidebarSelect = this.onSidebarSelect.bind(this);
+  this.inspector.sidebar.on("select", this.onSidebarSelect);
 
   this.onSelect();
 }
 
 exports.RuleViewTool = RuleViewTool;
 
 RuleViewTool.prototype = {
+
+  onSidebarSelect: function(e, sidebar) {
+    if (sidebar === "ruleview") {
+      this.onSelect();
+    }
+  },
+
+  isActive: function() {
+    return this.inspector &&
+           this.inspector.sidebar.getCurrentTabID() == "ruleview";
+  },
+
   onSelect: function RVT_onSelect(aEvent) {
-    if (!this.view) {
-      // Skip the event if RuleViewTool has been destroyed.
+    if (!this.view || !this.isActive()) {
+      // Skip the event if RuleViewTool has been destroyed
+      // or if it is not visible.
       return;
     }
     this.view.setPageStyle(this.inspector.pageStyle);
 
     if (!this.inspector.selection.isConnected() ||
         !this.inspector.selection.isElementNode()) {
       this.view.highlight(null);
       return;
@@ -104,23 +119,26 @@ RuleViewTool.prototype = {
 
     if (!aEvent || aEvent == "new-node-front") {
       let done = this.inspector.updating("rule-view");
       this.view.highlight(this.inspector.selection.nodeFront).then(done, done);
     }
   },
 
   refresh: function RVT_refresh() {
-    this.view.nodeChanged();
+    if (this.isActive()) {
+      this.view.nodeChanged();
+    }
   },
 
   destroy: function RVT_destroy() {
     this.inspector.off("layout-change", this.refresh);
     this.inspector.selection.off("pseudoclass", this.refresh);
     this.inspector.selection.off("new-node-front", this._onSelect);
+    this.inspector.sidebar.off("select", this.onSidebarSelect);
 
     this.view.element.removeEventListener("CssRuleViewCSSLinkClicked",
       this._cssLinkHandler);
 
     this.view.element.removeEventListener("CssRuleViewChanged",
       this._changeHandler);
 
     this.view.element.removeEventListener("CssRuleViewRefreshed",
@@ -147,28 +165,44 @@ function ComputedViewTool(aInspector, aW
 
   this._onSelect = this.onSelect.bind(this);
   this.inspector.selection.on("detached", this._onSelect);
   this.inspector.selection.on("new-node-front", this._onSelect);
   this.refresh = this.refresh.bind(this);
   this.inspector.on("layout-change", this.refresh);
   this.inspector.selection.on("pseudoclass", this.refresh);
 
+  this.onSidebarSelect = this.onSidebarSelect.bind(this);
+  this.inspector.sidebar.on("select", this.onSidebarSelect);
+
   this.view.highlight(null);
 
   this.onSelect();
 }
 
 exports.ComputedViewTool = ComputedViewTool;
 
 ComputedViewTool.prototype = {
+
+  onSidebarSelect: function(e, sidebar) {
+    if (sidebar === "computedview") {
+      this.onSelect();
+    }
+  },
+
+  isActive: function() {
+    return this.inspector &&
+           this.inspector.sidebar.getCurrentTabID() == "computedview";
+  },
+
   onSelect: function CVT_onSelect(aEvent)
   {
-    if (!this.view) {
-      // Skip the event if ComputedViewTool has been destroyed.
+    if (!this.view || !this.isActive()) {
+      // Skip the event if ComputedViewTool has been destroyed
+      // or if it is not visible.
       return;
     }
     this.view.setPageStyle(this.inspector.pageStyle);
 
     if (!this.inspector.selection.isConnected() ||
         !this.inspector.selection.isElementNode()) {
       this.view.highlight(null);
       return;
@@ -178,25 +212,27 @@ ComputedViewTool.prototype = {
       let done = this.inspector.updating("computed-view");
       this.view.highlight(this.inspector.selection.nodeFront).then(() => {
         done();
       });
     }
   },
 
   refresh: function CVT_refresh() {
-    this.view.refreshPanel();
+    if (this.isActive()) {
+      this.view.refreshPanel();
+    }
   },
 
   destroy: function CVT_destroy(aContext)
   {
     this.inspector.off("layout-change", this.refresh);
-    this.inspector.sidebar.off("computedview-selected", this.refresh);
     this.inspector.selection.off("pseudoclass", this.refresh);
     this.inspector.selection.off("new-node-front", this._onSelect);
+    this.inspector.sidebar.off("select", this.onSidebarSelect);
 
     this.view.destroy();
     delete this.view;
 
     delete this.outerIFrame;
     delete this.cssLogic;
     delete this.cssHtmlTree;
     delete this.window;
