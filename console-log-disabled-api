# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  36ad88e6b7b248c2f2ae59b80477e5474dd653dc
Bug 1383022 - Log a message in the new console frontend when the Console API has been replaced;r=nchevobbe

MozReview-Commit-ID: 56xyY04YM4S

diff --git a/devtools/client/webconsole/new-console-output/test/mochitest/browser.ini b/devtools/client/webconsole/new-console-output/test/mochitest/browser.ini
--- a/devtools/client/webconsole/new-console-output/test/mochitest/browser.ini
+++ b/devtools/client/webconsole/new-console-output/test/mochitest/browser.ini
@@ -47,8 +47,9 @@ skip-if = (os == 'linux' && bits == 32 &
 [browser_webconsole_object_inspector_entries.js]
 [browser_webconsole_object_inspector.js]
 [browser_webconsole_observer_notifications.js]
 [browser_webconsole_shows_reqs_in_netmonitor.js]
 [browser_webconsole_stacktrace_location_debugger_link.js]
 [browser_webconsole_stacktrace_location_scratchpad_link.js]
 [browser_webconsole_string.js]
 [browser_webconsole_timestamps.js]
+[browser_webconsole_warn_about_replaced_api.js]
diff --git a/devtools/client/webconsole/test/browser_warn_user_about_replaced_api.js b/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_warn_about_replaced_api.js
copy from devtools/client/webconsole/test/browser_warn_user_about_replaced_api.js
copy to devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_warn_about_replaced_api.js
--- a/devtools/client/webconsole/test/browser_warn_user_about_replaced_api.js
+++ b/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_warn_about_replaced_api.js
@@ -1,86 +1,51 @@
 /* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
-const TEST_REPLACED_API_URI = "http://example.com/browser/devtools/client/" +
-                              "webconsole/test/test-console-replaced-api.html";
-const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
-                 "test/testscript.js";
-const PREF = "devtools.webconsole.persistlog";
+const TEST_URI_REPLACED =
+  "data:text/html;charset=utf8,<script>console = {log: () => ''}</script>";
+const TEST_URI_NOT_REPLACED =
+  "data:text/html;charset=utf8,<script>console.log('foo')</script>";
 
-add_task(function* () {
-  Services.prefs.setBoolPref(PREF, true);
-
-  let { browser } = yield loadTab(TEST_URI);
-  let hud = yield openConsole();
+add_task(async function () {
+  await SpecialPowers.pushPrefEnv({"set": [
+    ["devtools.webconsole.persistlog", true]
+  ]});
 
-  yield testWarningNotPresent(hud);
+  let hud = await openNewTabAndConsole(TEST_URI_NOT_REPLACED);
 
-  let loaded = loadBrowser(browser);
-  BrowserTestUtils.loadURI(browser, TEST_REPLACED_API_URI);
-  yield loaded;
+  await testWarningNotPresent(hud);
+  await closeToolbox();
 
-  let hud2 = yield openConsole();
+  const currentTab = gBrowser.selectedTab;
+  await loadDocument(currentTab.linkedBrowser, TEST_URI_REPLACED);
 
-  yield testWarningPresent(hud2);
-
-  Services.prefs.clearUserPref(PREF);
+  let toolbox = await openToolboxForTab(gBrowser.selectedTab, "webconsole");
+  hud = toolbox.getCurrentPanel().hud;
+  await testWarningPresent(hud);
 });
 
-function testWarningNotPresent(hud) {
-  let deferred = promise.defer();
-
-  is(hud.outputNode.textContent.indexOf("logging API"), -1,
-     "no warning displayed");
+async function testWarningNotPresent(hud) {
+  ok(!findMessage(hud, "logging API"), "no warning displayed");
 
   // Bug 862024: make sure the warning doesn't show after page reload.
-  info("reload " + TEST_URI);
-  executeSoon(function () {
-    let browser = gBrowser.selectedBrowser;
-    ContentTask.spawn(browser, null, "() => content.location.reload()");
-  });
+  info("wait for the page to refresh and make sure the warning still isn't there");
+  await refreshTab();
+  await waitFor(() => findMessage(hud, "foo"));
 
-  waitForMessages({
-    webconsole: hud,
-    messages: [{
-      text: "testscript.js",
-      category: CATEGORY_NETWORK,
-    }],
-  }).then(() => executeSoon(() => {
-    is(hud.outputNode.textContent.indexOf("logging API"), -1,
-       "no warning displayed");
-    closeConsole().then(deferred.resolve);
-  }));
-
-  return deferred.promise;
+  ok(!findMessage(hud, "logging API"), "no warning displayed");
 }
 
-function testWarningPresent(hud) {
+async function testWarningPresent(hud) {
   info("wait for the warning to show");
-  let deferred = promise.defer();
-
-  let warning = {
-    webconsole: hud,
-    messages: [{
-      text: /logging API .+ disabled by a script/,
-      category: CATEGORY_JS,
-      severity: SEVERITY_WARNING,
-    }],
-  };
+  await waitFor(() => findMessage(hud, "logging API"));
 
-  waitForMessages(warning).then(() => {
-    hud.jsterm.clearOutput();
+  hud.jsterm.clearOutput();
 
-    executeSoon(() => {
-      info("reload the test page and wait for the warning to show");
-      waitForMessages(warning).then(deferred.resolve);
-      let browser = gBrowser.selectedBrowser;
-      ContentTask.spawn(browser, null, "() => content.location.reload()");
-    });
-  });
-
-  return deferred.promise;
+  info("reload the test page and wait for the warning to show");
+  await refreshTab();
+  await waitFor(() => findMessage(hud, "logging API"));
 }
diff --git a/devtools/client/webconsole/new-webconsole.js b/devtools/client/webconsole/new-webconsole.js
--- a/devtools/client/webconsole/new-webconsole.js
+++ b/devtools/client/webconsole/new-webconsole.js
@@ -134,17 +134,18 @@ NewWebConsoleFrame.prototype = {
     return this._destroyer.promise;
   },
 
   _onUpdateListeners() {
 
   },
 
   logWarningAboutReplacedAPI() {
-
+    this.owner.target.logErrorInPage(l10n.getStr("ConsoleAPIDisabled"),
+      "ConsoleAPIDisabled");
   },
 
   handleNetworkEventUpdate() {
 
   },
 
   /**
    * Setter for saving of network request and response bodies.
diff --git a/devtools/client/webconsole/webconsole-connection-proxy.js b/devtools/client/webconsole/webconsole-connection-proxy.js
--- a/devtools/client/webconsole/webconsole-connection-proxy.js
+++ b/devtools/client/webconsole/webconsole-connection-proxy.js
@@ -262,19 +262,19 @@ WebConsoleConnectionProxy.prototype = {
     let messages =
       response.messages.concat(...this.webConsoleClient.getNetworkEvents());
     messages.sort((a, b) => a.timeStamp - b.timeStamp);
 
     if (this.webConsoleFrame.NEW_CONSOLE_OUTPUT_ENABLED) {
       this.dispatchMessagesAdd(messages);
     } else {
       this.webConsoleFrame.displayCachedMessages(messages);
-      if (!this._hasNativeConsoleAPI) {
-        this.webConsoleFrame.logWarningAboutReplacedAPI();
-      }
+    }
+    if (!this._hasNativeConsoleAPI) {
+      this.webConsoleFrame.logWarningAboutReplacedAPI();
     }
 
     this.connected = true;
     this._connectDefer.resolve(this);
   },
 
   /**
    * The "pageError" message type handler. We redirect any page errors to the UI
