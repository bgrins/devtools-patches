# HG changeset patch
# User Lin Clark <lclark@mozilla.com>
Bug 1290545 - New console frontend: Adjust severity filtering rules. r=bgrins


diff --git a/devtools/client/webconsole/new-console-output/components/filter-bar.js b/devtools/client/webconsole/new-console-output/components/filter-bar.js
index 22ed814..dee0cd8 100644
--- a/devtools/client/webconsole/new-console-output/components/filter-bar.js
+++ b/devtools/client/webconsole/new-console-output/components/filter-bar.js
@@ -92,16 +92,22 @@ const FilterBar = createClass({
             filterKey: MESSAGE_LEVEL.LOG,
             dispatch
           }),
           FilterButton({
             active: filter.info,
             label: "Info",
             filterKey: MESSAGE_LEVEL.INFO,
             dispatch
+          }),
+          FilterButton({
+            active: filter.debug,
+            label: "Debug",
+            filterKey: MESSAGE_LEVEL.DEBUG,
+            dispatch
           })
         )
       );
     }
 
     if (ui.filteredMessageVisible) {
       children.push(
         dom.div({className: "devtools-toolbar"},
diff --git a/devtools/client/webconsole/new-console-output/reducers/filters.js b/devtools/client/webconsole/new-console-output/reducers/filters.js
index d2d84c0..6f8a228 100644
--- a/devtools/client/webconsole/new-console-output/reducers/filters.js
+++ b/devtools/client/webconsole/new-console-output/reducers/filters.js
@@ -4,21 +4,22 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const Immutable = require("devtools/client/shared/vendor/immutable");
 const constants = require("devtools/client/webconsole/new-console-output/constants");
 
 const FilterState = Immutable.Record({
+  debug: true,
   error: true,
-  warn: true,
   info: true,
   log: true,
-  text: ""
+  text: "",
+  warn: true,
 });
 
 function filters(state = new FilterState(), action) {
   switch (action.type) {
     case constants.FILTER_TOGGLE:
       const {filter} = action;
       const active = !state.get(filter);
       return state.set(filter, active);
diff --git a/devtools/client/webconsole/new-console-output/selectors/messages.js b/devtools/client/webconsole/new-console-output/selectors/messages.js
index 0abd8af..e85b5cd 100644
--- a/devtools/client/webconsole/new-console-output/selectors/messages.js
+++ b/devtools/client/webconsole/new-console-output/selectors/messages.js
@@ -2,33 +2,39 @@
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const { getAllFilters } = require("devtools/client/webconsole/new-console-output/selectors/filters");
 const { getLogLimit } = require("devtools/client/webconsole/new-console-output/selectors/prefs");
+const {
+  MESSAGE_TYPE
+} = require("devtools/client/webconsole/new-console-output/constants");
 
 function getAllMessages(state) {
   let messages = state.messages;
   let logLimit = getLogLimit(state);
   let filters = getAllFilters(state);
 
   return prune(
     search(
       filterSeverity(messages, filters),
       filters.text
     ),
     logLimit
   );
 }
 
 function filterSeverity(messages, filters) {
-  return messages.filter((message) => filters[message.level] === true);
+  return messages.filter((message) => {
+    return filters[message.level] === true
+      || [MESSAGE_TYPE.COMMAND, MESSAGE_TYPE.RESULT].includes(message.type);
+  });
 }
 
 function search(messages, text = "") {
   if (text === "") {
     return messages;
   }
 
   return messages.filter(function (message) {
diff --git a/devtools/client/webconsole/new-console-output/test/components/filter-bar.test.js b/devtools/client/webconsole/new-console-output/test/components/filter-bar.test.js
index e88036d..dea16be 100644
--- a/devtools/client/webconsole/new-console-output/test/components/filter-bar.test.js
+++ b/devtools/client/webconsole/new-console-output/test/components/filter-bar.test.js
@@ -60,23 +60,25 @@ describe("FilterBar component:", () => {
 
     // Buttons are displayed
     const buttonProps = {
       active: true,
       dispatch: store.dispatch
     };
     const logButton = FilterButton(Object.assign({}, buttonProps,
       { label: "Logs", filterKey: MESSAGE_LEVEL.LOG }));
+    const debugButton = FilterButton(Object.assign({}, buttonProps,
+      { label: "Debug", filterKey: MESSAGE_LEVEL.DEBUG }));
     const infoButton = FilterButton(Object.assign({}, buttonProps,
       { label: "Info", filterKey: MESSAGE_LEVEL.INFO }));
     const warnButton = FilterButton(Object.assign({}, buttonProps,
       { label: "Warnings", filterKey: MESSAGE_LEVEL.WARN }));
     const errorButton = FilterButton(Object.assign({}, buttonProps,
       { label: "Errors", filterKey: MESSAGE_LEVEL.ERROR }));
-    expect(wrapper.contains([errorButton, warnButton, logButton, infoButton])).toBe(true);
+    expect(wrapper.contains([errorButton, warnButton, logButton, infoButton, debugButton])).toBe(true);
   });
 
   it("fires MESSAGES_CLEAR action when clear button is clicked", () => {
     const store = setupStore([]);
     store.dispatch = sinon.spy();
 
     const wrapper = mount(Provider({store}, FilterBar({})));
     wrapper.find(".devtools-clear-icon").simulate("click");
diff --git a/devtools/client/webconsole/new-console-output/test/store/filters.test.js b/devtools/client/webconsole/new-console-output/test/store/filters.test.js
index f669e88..dc5c59f 100644
--- a/devtools/client/webconsole/new-console-output/test/store/filters.test.js
+++ b/devtools/client/webconsole/new-console-output/test/store/filters.test.js
@@ -9,37 +9,48 @@ const actions = require("devtools/client/webconsole/new-console-output/actions/f
 const { messageAdd } = require("devtools/client/webconsole/new-console-output/actions/messages");
 const { ConsoleCommand } = require("devtools/client/webconsole/new-console-output/types");
 const { getAllMessages } = require("devtools/client/webconsole/new-console-output/selectors/messages");
 const { getAllFilters } = require("devtools/client/webconsole/new-console-output/selectors/filters");
 const { setupStore } = require("devtools/client/webconsole/new-console-output/test/helpers");
 const { MESSAGE_LEVEL } = require("devtools/client/webconsole/new-console-output/constants");
 
 describe("Filtering", () => {
-  const numMessages = 5;
+  const numMessages = 7;
   const store = setupStore([
+    // Console API
     "console.log('foobar', 'test')",
     "console.warn('danger, will robinson!')",
     "console.log(undefined)",
+    "console.count('bar')",
+    // Evaluation Result
+    "new Date(0)",
+    // PageError
     "ReferenceError"
   ]);
-  // Add a console command as well
+  // Console Command
   store.dispatch(messageAdd(new ConsoleCommand({ messageText: `console.warn("x")` })));
 
   beforeEach(() => {
     store.dispatch(actions.filtersClear());
   });
 
   describe("Severity filter", () => {
     it("filters log messages", () => {
       store.dispatch(actions.filterToggle(MESSAGE_LEVEL.LOG));
 
       let messages = getAllMessages(store.getState());
-      // @TODO It currently filters console command. This should be -2, not -3.
-      expect(messages.size).toEqual(numMessages - 3);
+      expect(messages.size).toEqual(numMessages - 2);
+    });
+
+    it("filters debug messages", () => {
+      store.dispatch(actions.filterToggle(MESSAGE_LEVEL.DEBUG));
+
+      let messages = getAllMessages(store.getState());
+      expect(messages.size).toEqual(numMessages - 1);
     });
 
     // @TODO add info stub
     it("filters info messages");
 
     it("filters warning messages", () => {
       store.dispatch(actions.filterToggle(MESSAGE_LEVEL.WARN));
 
@@ -56,18 +67,18 @@ describe("Filtering", () => {
   });
 
   describe("Text filter", () => {
     it("matches on value grips", () => {
       store.dispatch(actions.filterTextSet("danger"));
 
       let messages = getAllMessages(store.getState());
       // @TODO figure out what this should filter
-      // This does not filter out PageErrors or console commands
-      expect(messages.size).toEqual(3);
+      // This does not filter out PageErrors, Evaluation Results or console commands
+      expect(messages.size).toEqual(5);
     });
   });
 
   describe("Combined filters", () => {
     // @TODO add test
     it("filters");
   });
 });
@@ -76,27 +87,29 @@ describe("Clear filters", () => {
   it("clears all filters", () => {
     const store = setupStore([]);
 
     // Setup test case
     store.dispatch(actions.filterToggle(MESSAGE_LEVEL.ERROR));
     store.dispatch(actions.filterTextSet("foobar"));
     let filters = getAllFilters(store.getState());
     expect(filters.toJS()).toEqual({
+      "debug": true,
       "error": false,
       "info": true,
       "log": true,
       "warn": true,
       "text": "foobar"
     });
 
     store.dispatch(actions.filtersClear());
 
     filters = getAllFilters(store.getState());
     expect(filters.toJS()).toEqual({
+      "debug": true,
       "error": true,
       "info": true,
       "log": true,
       "warn": true,
       "text": ""
     });
   });
 });
