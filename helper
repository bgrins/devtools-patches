# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  e2bb11b88bd45bdb2e055042e1624b74d414e73c
Bug 1386523 - Make store debug logging into a shared helper function for webconsole mochitests;r=nchevobbe

MozReview-Commit-ID: FxDgYNr35o3

diff --git a/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_console_dir.js b/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_console_dir.js
--- a/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_console_dir.js
+++ b/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_console_dir.js
@@ -7,27 +7,17 @@
 
 // Check console.dir() calls.
 const TEST_URI = "data:text/html;charset=utf8,<h1>test console.dir</h1>";
 
 add_task(async function () {
   let toolbox = await openNewTabAndToolbox(TEST_URI, "webconsole");
   let hud = toolbox.getCurrentPanel().hud;
 
-  const store = hud.ui.newConsoleOutput.getStore();
-  // Adding logging each time the store is modified in order to check
-  // the store state in case of failure.
-  store.subscribe(() => {
-    const messages = store.getState().messages.messagesById
-      .reduce(function (res, {id, type, parameters, messageText}) {
-        res.push({id, type, parameters, messageText});
-        return res;
-      }, []);
-    info("messages : " + JSON.stringify(messages));
-  });
+  logAllStoreChanges(hud);
 
   info("console.dir on an array");
   await ContentTask.spawn(gBrowser.selectedBrowser, null, function () {
     content.wrappedJSObject.console.dir(
       [1, 2, {a: "a", b: "b"}],
     );
   });
   let dirMessageNode = await waitFor(() =>
diff --git a/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_console_group.js b/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_console_group.js
--- a/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_console_group.js
+++ b/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_console_group.js
@@ -8,33 +8,18 @@
 // Check console.group, console.groupCollapsed and console.groupEnd calls
 // behave as expected.
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/new-console-output/test/mochitest/test-console-group.html";
 const { INDENT_WIDTH } = require("devtools/client/webconsole/new-console-output/components/MessageIndent");
 
 add_task(async function () {
   const hud = await openNewTabAndConsole(TEST_URI);
-
   const store = hud.ui.newConsoleOutput.getStore();
-  // Adding logging each time the store is modified in order to check
-  // the store state in case of failure.
-  store.subscribe(() => {
-    const messages = [...store.getState().messages.messagesById]
-      .reduce(function (res, [id, message]) {
-        res.push({
-          id,
-          type: message.type,
-          parameters: message.parameters,
-          messageText: message.messageText
-        });
-        return res;
-      }, []);
-    info("messages : " + JSON.stringify(messages));
-  });
+  logAllStoreChanges(hud);
 
   const onMessagesLogged = waitForMessage(hud, "log-6");
   ContentTask.spawn(gBrowser.selectedBrowser, null, function () {
     content.wrappedJSObject.doLog();
   });
   await onMessagesLogged;
 
   info("Test a group at root level");
diff --git a/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_object_inspector.js b/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_object_inspector.js
--- a/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_object_inspector.js
+++ b/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_object_inspector.js
@@ -7,27 +7,17 @@
 
 // Check expanding/collapsing object inspector in the console.
 const TEST_URI = "data:text/html;charset=utf8,<h1>test Object Inspector</h1>";
 
 add_task(async function () {
   let toolbox = await openNewTabAndToolbox(TEST_URI, "webconsole");
   let hud = toolbox.getCurrentPanel().hud;
 
-  const store = hud.ui.newConsoleOutput.getStore();
-  // Adding logging each time the store is modified in order to check
-  // the store state in case of failure.
-  store.subscribe(() => {
-    const messages = store.getState().messages.messagesById
-      .reduce(function (res, {id, type, parameters, messageText}) {
-        res.push({id, type, parameters, messageText});
-        return res;
-      }, []);
-    info("messages : " + JSON.stringify(messages));
-  });
+  logAllStoreChanges(hud);
 
   await ContentTask.spawn(gBrowser.selectedBrowser, null, function () {
     content.wrappedJSObject.console.log(
       "oi-test",
       [1, 2, {a: "a", b: "b"}],
       {c: "c", d: [3, 4], length: 987}
     );
   });
diff --git a/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_object_inspector_entries.js b/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_object_inspector_entries.js
--- a/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_object_inspector_entries.js
+++ b/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_object_inspector_entries.js
@@ -6,27 +6,18 @@
 "use strict";
 
 // Check expanding/collapsing maps and sets in the console.
 const TEST_URI = "data:text/html;charset=utf8,<h1>Object Inspector on Maps & Sets</h1>";
 const {ELLIPSIS} = require("devtools/shared/l10n");
 
 add_task(async function () {
   const hud = await openNewTabAndConsole(TEST_URI);
-  const store = hud.ui.newConsoleOutput.getStore();
-  // Adding logging each time the store is modified in order to check
-  // the store state in case of failure.
-  store.subscribe(() => {
-    const messages = store.getState().messages.messagesById
-      .reduce(function (res, {id, type, parameters, messageText}) {
-        res.push({id, type, parameters, messageText});
-        return res;
-      }, []);
-    info("messages : " + JSON.stringify(messages));
-  });
+
+  logAllStoreChanges(hud);
 
   await ContentTask.spawn(gBrowser.selectedBrowser, null, function () {
     content.wrappedJSObject.console.log(
       "oi-entries-test",
       new Map(
         Array.from({length: 20}).map((el, i) => [Symbol(i),  i])
       ),
       new Map(
diff --git a/devtools/client/webconsole/new-console-output/test/mochitest/head.js b/devtools/client/webconsole/new-console-output/test/mochitest/head.js
--- a/devtools/client/webconsole/new-console-output/test/mochitest/head.js
+++ b/devtools/client/webconsole/new-console-output/test/mochitest/head.js
@@ -71,16 +71,36 @@ async function openNewTabAndConsole(url,
     // Clearing history that might have been set in previous tests.
     await hud.jsterm.clearHistory();
   }
 
   return hud;
 }
 
 /**
+ * Subscribe to the store and log out stringinfied versions of messages.
+ * This is a helper function for debugging, to make is easier to see what
+ * happened during the test in the log.
+ *
+ * @param object hud
+ */
+function logAllStoreChanges(hud) {
+  const store = hud.ui.newConsoleOutput.getStore();
+  // Adding logging each time the store is modified in order to check
+  // the store state in case of failure.
+  store.subscribe(() => {
+    const messages = [...store.getState().messages.messagesById.values()];
+    const debugMessages = messages.map(({id, type, parameters, messageText}) => {
+      return {id, type, parameters, messageText};
+    });
+    info("messages : " + JSON.stringify(debugMessages));
+  });
+}
+
+/**
  * Wait for messages in the web console output, resolving once they are received.
  *
  * @param object options
  *        - hud: the webconsole
  *        - messages: Array[Object]. An array of messages to match.
             Current supported options:
  *            - text: Partial text match in .message-body
  */
