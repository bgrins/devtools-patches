# HG changeset patch
# Parent b0654c1a3c7fb6e24eebb5c32d60d28663814e40
# User Kay Plößer <mail@kay.is>
Bug 960734 - Remove inline script / style in browser/devtools/layoutview/view.xhtml

diff --git a/browser/devtools/layoutview/view.js b/browser/devtools/layoutview/view.js
--- a/browser/devtools/layoutview/view.js
+++ b/browser/devtools/layoutview/view.js
@@ -2,16 +2,19 @@
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const Cu = Components.utils;
+const Ci = Components.interfaces;
+const Cc = Components.classes;
+
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource://gre/modules/devtools/Loader.jsm");
 Cu.import("resource://gre/modules/devtools/Console.jsm");
 
 const promise = devtools.require("sdk/core/promise");
 
 function LayoutView(aInspector, aWindow)
 {
@@ -233,8 +236,51 @@ LayoutView.prototype = {
       this.inspector.emit("layoutview-updated");
       return null;
     });
 
     this._lastRequest = lastRequest;
     return this._lastRequest;
   }
 }
+
+let elts;
+let tooltip;
+
+window.setPanel = function(panel) {
+  this.layoutview = new LayoutView(panel, window);
+
+  // Tooltip mechanism
+  elts = document.querySelectorAll("*[tooltip]");
+  tooltip = document.querySelector(".tooltip");
+  for (let i = 0; i < elts.length; i++) {
+    let elt = elts[i];
+    elt.addEventListener("mouseover", onmouseover, true);
+    elt.addEventListener("mouseout", onmouseout, true);
+  }
+
+  // Mark document as RTL or LTR:
+  let chromeReg = Cc["@mozilla.org/chrome/chrome-registry;1"].
+    getService(Ci.nsIXULChromeRegistry);
+  let dir = chromeReg.isLocaleRTL("global");
+  document.body.setAttribute("dir", dir ? "rtl" : "ltr");
+
+  window.parent.postMessage("layoutview-ready", "*");
+};
+
+window.onunload = function() {
+  this.layoutview.destroy();
+  if (elts) {
+    for (let i = 0; i < elts.length; i++) {
+      let elt = elts[i];
+      elt.removeEventListener("mouseover", onmouseover, true);
+      elt.removeEventListener("mouseout", onmouseout, true);
+    }
+  }
+};
+
+function onmouseover(e) {
+  tooltip.textContent = e.target.getAttribute("tooltip");
+}
+
+function onmouseout(e) {
+  tooltip.textContent = "";
+}
\ No newline at end of file
diff --git a/browser/devtools/layoutview/view.xhtml b/browser/devtools/layoutview/view.xhtml
--- a/browser/devtools/layoutview/view.xhtml
+++ b/browser/devtools/layoutview/view.xhtml
@@ -11,65 +11,16 @@
       xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
   <head>
     <title>&title;</title>
 
     <script type="application/javascript;version=1.8"
             src="chrome://browser/content/devtools/theme-switching.js"/>
 
     <script type="application/javascript;version=1.8" src="view.js"></script>
-    <script type="application/javascript;version=1.8">
-    <![CDATA[
-      let elts;
-      let tooltip;
-
-      const Ci = Components.interfaces;
-      const Cc = Components.classes;
-
-      window.setPanel = function(panel) {
-        this.layoutview = new LayoutView(panel, window);
-
-        // Tooltip mechanism
-        elts = document.querySelectorAll("*[tooltip]");
-        tooltip = document.querySelector(".tooltip");
-        for (let i = 0; i < elts.length; i++) {
-          let elt = elts[i];
-          elt.addEventListener("mouseover", onmouseover, true);
-          elt.addEventListener("mouseout", onmouseout, true);
-        }
-
-        // Mark document as RTL or LTR:
-        let chromeReg = Cc["@mozilla.org/chrome/chrome-registry;1"].
-          getService(Ci.nsIXULChromeRegistry);
-        let dir = chromeReg.isLocaleRTL("global");
-        document.body.setAttribute("dir", dir ? "rtl" : "ltr");
-
-        window.parent.postMessage("layoutview-ready", "*");
-      }
-
-      window.onunload = function() {
-        this.layoutview.destroy();
-        if (elts) {
-          for (let i = 0; i < elts.length; i++) {
-            let elt = elts[i];
-            elt.removeEventListener("mouseover", onmouseover, true);
-            elt.removeEventListener("mouseout", onmouseout, true);
-          }
-        }
-      }
-
-      function onmouseover(e) {
-        tooltip.textContent = e.target.getAttribute("tooltip");
-      }
-
-      function onmouseout(e) {
-        tooltip.textContent = "";
-      }
-    ]]>
-    </script>
 
     <link rel="stylesheet" href="chrome://browser/skin/devtools/common.css" type="text/css"/>
     <link rel="stylesheet" href="chrome://browser/skin/devtools/layoutview.css" type="text/css"/>
     <link rel="stylesheet" href="view.css" type="text/css"/>
 
   </head>
   <body class="theme-body devtools-monospace">
 
