# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  f7f737c22407f78f3a9cde3e8051552e8b727cf1
asdf

diff --git a/browser/devtools/sourceeditor/editor.js b/browser/devtools/sourceeditor/editor.js
--- a/browser/devtools/sourceeditor/editor.js
+++ b/browser/devtools/sourceeditor/editor.js
@@ -358,21 +358,25 @@ Editor.prototype = {
           }
         }
       });
 
 
       cm.on("focus", () => this.emit("focus"));
       cm.on("scroll", () => this.emit("scroll"));
       cm.on("change", () => {
+        // win.setTimeout(() => {
+
         this.emit("change");
+        console.log("brian: cm change!");
         if (!this._lastDirty) {
           this._lastDirty = true;
           this.emit("dirty-change");
         }
+        // }, 0);
       });
       cm.on("cursorActivity", (cm) => this.emit("cursorActivity"));
 
       cm.on("gutterClick", (cm, line, gutter, ev) => {
         let head = { line: line, ch: 0 };
         let tail = { line: line, ch: this.getText(line).length };
 
         // Shift-click on a gutter selects the whole line.
diff --git a/browser/devtools/styleeditor/StyleEditorUI.jsm b/browser/devtools/styleeditor/StyleEditorUI.jsm
--- a/browser/devtools/styleeditor/StyleEditorUI.jsm
+++ b/browser/devtools/styleeditor/StyleEditorUI.jsm
@@ -772,16 +772,17 @@ StyleEditorUI.prototype = {
   /**
    * Handler for an editor's 'property-changed' event.
    * Update the summary in the UI.
    *
    * @param  {StyleSheetEditor} editor
    *         Editor for which a property has changed
    */
   _summaryChange: function(editor) {
+    console.log("Summary change called");
     this._updateSummaryForEditor(editor);
   },
 
   /**
    * Update split view summary of given StyleEditor instance.
    *
    * @param {StyleSheetEditor} editor
    * @param {DOMElement} summary
@@ -796,16 +797,17 @@ StyleEditorUI.prototype = {
 
     let ruleCount = editor.styleSheet.ruleCount;
     if (editor.styleSheet.relatedStyleSheet && editor.linkedCSSFile) {
       ruleCount = editor.styleSheet.relatedStyleSheet.ruleCount;
     }
     if (ruleCount === undefined) {
       ruleCount = "-";
     }
+    console.log("_updateSummaryForEditor", ruleCount);
 
     var flags = [];
     if (editor.styleSheet.disabled) {
       flags.push("disabled");
     }
     if (editor.unsaved) {
       flags.push("unsaved");
     }
diff --git a/browser/devtools/styleeditor/test/browser_styleeditor_new.js b/browser/devtools/styleeditor/test/browser_styleeditor_new.js
--- a/browser/devtools/styleeditor/test/browser_styleeditor_new.js
+++ b/browser/devtools/styleeditor/test/browser_styleeditor_new.js
@@ -43,21 +43,22 @@ function createNew(ui, panelWindow) {
   }, panelWindow);
 
   return deferred.promise;
 }
 
 function onPropertyChange(aEditor) {
   let deferred = promise.defer();
 
-  aEditor.styleSheet.on("property-change", function onProp(property) {
+  aEditor.on("property-change", function onProp(e, property) {
     // wait for text to be entered fully
     let text = aEditor.sourceEditor.getText();
+    console.log(property == "ruleCount", property);
     if (property == "ruleCount" && text == TESTCASE_CSS_SOURCE + "}") {
-      aEditor.styleSheet.off("property-change", onProp);
+      aEditor.off("property-change", onProp);
       deferred.resolve();
     }
   });
 
   return deferred.promise;
 }
 
 function testInitialState(aEditor) {
