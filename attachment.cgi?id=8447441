# HG changeset patch
# Parent 570982344606e3dbca4abcecf1730395ace6dbf9
# User Michael Ratcliffe <mratcliffe@mozilla.com>
# Date 1403905753 -3600
# Parent  f9996ba3e1c034913d2ba0e646da89e8ebea34f1

Bug 713106 - Show :visited styles in Properties and Rule view r=mratcliffe

diff --git a/browser/devtools/inspector/breadcrumbs.js b/browser/devtools/inspector/breadcrumbs.js
--- a/browser/devtools/inspector/breadcrumbs.js
+++ b/browser/devtools/inspector/breadcrumbs.js
@@ -11,17 +11,16 @@ Cu.import("resource://gre/modules/XPCOMU
 Cu.import("resource:///modules/devtools/DOMHelpers.jsm");
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource:///modules/devtools/ViewHelpers.jsm");
 const {Promise: promise} = require("resource://gre/modules/Promise.jsm");
 XPCOMUtils.defineLazyGetter(this, "DOMUtils", function () {
   return Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils);
 });
 
-const PSEUDO_CLASSES = [":hover", ":active", ":focus"];
 const ENSURE_SELECTION_VISIBLE_DELAY = 50; // ms
 const ELLIPSIS = Services.prefs.getComplexValue("intl.ellipsis", Ci.nsIPrefLocalizedString).data;
 const MAX_LABEL_LENGTH = 40;
 const LOW_PRIORITY_ELEMENTS = {
   "HEAD": true,
   "BASE": true,
   "BASEFONT": true,
   "ISINDEX": true,
diff --git a/browser/devtools/inspector/inspector.xul b/browser/devtools/inspector/inspector.xul
--- a/browser/devtools/inspector/inspector.xul
+++ b/browser/devtools/inspector/inspector.xul
@@ -101,16 +101,19 @@
         label=":hover" type="checkbox"
         oncommand="inspector.togglePseudoClass(':hover')"/>
       <menuitem id="node-menu-pseudo-active"
         label=":active" type="checkbox"
         oncommand="inspector.togglePseudoClass(':active')"/>
       <menuitem id="node-menu-pseudo-focus"
         label=":focus" type="checkbox"
         oncommand="inspector.togglePseudoClass(':focus')"/>
+      <menuitem id="node-menu-pseudo-visited"
+        label=":visited" type="checkbox"
+        oncommand="inspector.togglePseudoClass(':visited')"/>
     </menupopup>
   </popupset>
 
   <box flex="1" class="devtools-responsive-container theme-body">
     <vbox flex="1" class="devtools-main-content">
       <toolbar id="inspector-toolbar"
         class="devtools-toolbar"
         nowindowdrag="true">
diff --git a/toolkit/devtools/server/actors/highlighter.js b/toolkit/devtools/server/actors/highlighter.js
--- a/toolkit/devtools/server/actors/highlighter.js
+++ b/toolkit/devtools/server/actors/highlighter.js
@@ -2304,23 +2304,23 @@ GeometryEditorHighlighter.prototype = He
    */
   getDefinedGeometryProperties: function() {
     let props = new Map();
     if (!this.currentNode) {
       return props;
     }
 
     // Get the list of css rules applying to the current node.
-    let cssRules = DOMUtils.getCSSStyleRules(this.currentNode);
+    let cssRules = DOMUtils.getVisitedDependentCSSStyleRules(this.currentNode);
     for (let i = 0; i < cssRules.Count(); i++) {
       let rule = cssRules.GetElementAt(i);
       for (let name of GeoProp.allProps()) {
         let value = rule.style.getPropertyValue(name);
         if (value && value !== "auto") {
-          // getCSSStyleRules returns rules ordered from least-specific to
+          // getVisitedDependentCSSStyleRules returns rules ordered from least-specific to
           // most-specific, so just override any previous properties we have set.
           props.set(name, {
             cssRule: rule
           });
         }
       }
     }
 
diff --git a/toolkit/devtools/server/actors/inspector.js b/toolkit/devtools/server/actors/inspector.js
--- a/toolkit/devtools/server/actors/inspector.js
+++ b/toolkit/devtools/server/actors/inspector.js
@@ -69,17 +69,17 @@ const {
 } = require("devtools/server/actors/highlighter");
 const {getLayoutChangesObserver, releaseLayoutChangesObserver} =
   require("devtools/server/actors/layout");
 
 const {EventParsers} = require("devtools/toolkit/event-parsers");
 
 const FONT_FAMILY_PREVIEW_TEXT = "The quick brown fox jumps over the lazy dog";
 const FONT_FAMILY_PREVIEW_TEXT_SIZE = 20;
-const PSEUDO_CLASSES = [":hover", ":active", ":focus"];
+const PSEUDO_CLASSES = [":hover", ":active", ":focus", ":visited"];
 const HIDDEN_CLASS = "__fx-devtools-hide-shortcut__";
 const XHTML_NS = "http://www.w3.org/1999/xhtml";
 const XUL_NS = 'http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul';
 const IMAGE_FETCHING_TIMEOUT = 500;
 // The possible completions to a ':' with added score to give certain values
 // some preference.
 const PSEUDO_SELECTORS = [
   [":active", 1],
@@ -2046,17 +2046,17 @@ var WalkerActor = protocol.ActorClass({
     }
   }),
 
   /**
    * Add a pseudo-class lock to a node.
    *
    * @param NodeActor node
    * @param string pseudo
-   *    A pseudoclass: ':hover', ':active', ':focus'
+   *    A pseudoclass: ':hover', ':active', ':focus', ':visited'
    * @param options
    *    Options object:
    *    `parents`: True if the pseudo-class should be added
    *      to parent nodes.
    *
    * @returns An empty packet.  A "pseudoClassLock" mutation will
    *    be queued for any changed nodes.
    */
@@ -2139,17 +2139,17 @@ var WalkerActor = protocol.ActorClass({
     request: { node: Arg(0, "domnode") }
   }),
 
   /**
    * Remove a pseudo-class lock from a node.
    *
    * @param NodeActor node
    * @param string pseudo
-   *    A pseudoclass: ':hover', ':active', ':focus'
+   *    A pseudoclass: ':hover', ':active', ':focus', ':visited'
    * @param options
    *    Options object:
    *    `parents`: True if the pseudo-class should be removed
    *      from parent nodes.
    *
    * @returns An empty response.  "pseudoClassLock" mutations
    *    will be emitted for any changed nodes.
    */
diff --git a/toolkit/devtools/server/actors/styles.js b/toolkit/devtools/server/actors/styles.js
--- a/toolkit/devtools/server/actors/styles.js
+++ b/toolkit/devtools/server/actors/styles.js
@@ -582,24 +582,24 @@ var PageStyleActor = protocol.ActorClass
    * @param DOMNode node
    * @param string pseudo
    * @param DOMNode inherited
    * @param object options
    *
    * @returns Array
    */
   _getElementRules: function (node, pseudo, inherited, options) {
-    let domRules = DOMUtils.getCSSStyleRules(node, pseudo);
+    let domRules = DOMUtils.getVisitedDependentCSSStyleRules(node, pseudo);
     if (!domRules) {
       return [];
     }
 
     let rules = [];
 
-    // getCSSStyleRules returns ordered from least-specific to
+    // getVisitedDependentCSSStyleRules returns ordered from least-specific to
     // most-specific.
     for (let i = domRules.Count() - 1; i >= 0; i--) {
       let domRule = domRules.GetElementAt(i);
 
       let isSystem = !CssLogic.isContentStylesheet(domRule.parentStyleSheet);
 
       if (isSystem && options.filter != CssLogic.FILTER.UA) {
         continue;
diff --git a/toolkit/devtools/server/tests/mochitest/test_inspector-pseudoclass-lock.html b/toolkit/devtools/server/tests/mochitest/test_inspector-pseudoclass-lock.html
--- a/toolkit/devtools/server/tests/mochitest/test_inspector-pseudoclass-lock.html
+++ b/toolkit/devtools/server/tests/mochitest/test_inspector-pseudoclass-lock.html
@@ -13,17 +13,17 @@ https://bugzilla.mozilla.org/show_bug.cg
   <script type="application/javascript;version=1.8">
 Components.utils.import("resource://gre/modules/devtools/Loader.jsm");
 const {Promise: promise} = Components.utils.import("resource://gre/modules/Promise.jsm", {});
 
 const inspector = devtools.require("devtools/server/actors/inspector");
 const DOMUtils = Components.classes["@mozilla.org/inspector/dom-utils;1"].
                    getService(Components.interfaces.inIDOMUtils);
 
-const KNOWN_PSEUDOCLASSES = [':hover', ':active', ':focus']
+const KNOWN_PSEUDOCLASSES = [':hover', ':active', ':focus', ':visited']
 
 window.onload = function() {
   SimpleTest.waitForExplicitFinish();
   runNextTest();
 }
 
 var gInspectee = null;
 var gWalker = null;
@@ -148,16 +148,66 @@ addTest(function testPseudoClassLock() {
         pseudos: []
       },
       {
         nodeName: 'HTML',
         pseudos: []
       }];
       checkMutations(mutations, expectedMutations);
     }).then(() => {
+      // Now add :visited to all parents
+      gWalker.addPseudoClassLock(nodeFront, ':visited', {parents: true});
+      return promiseOnce(gWalker, "mutations");
+    }).then(mutations => {
+      let expectedMutations = [{
+        id: 'b',
+        nodeName: 'DIV',
+        // Should still have :active on the original node.
+        pseudos: [':active', ':visited']
+      },
+      {
+        id: 'longlist',
+        nodeName: 'DIV',
+        pseudos: [':visited']
+      },
+      {
+        nodeName: 'BODY',
+        pseudos: [':visited']
+      },
+      {
+        nodeName: 'HTML',
+        pseudos: [':visited']
+      }];
+      checkMutations(mutations, expectedMutations);
+    }).then(() => {
+      // Now remove :visited on all parents
+      gWalker.removePseudoClassLock(nodeFront, ':visited', {parents: true});
+      return promiseOnce(gWalker, "mutations");
+    }).then(mutations => {
+      let expectedMutations = [{
+        id: 'b',
+        nodeName: 'DIV',
+        // Should still have :active on the original node.
+        pseudos: [':active']
+      },
+      {
+        id: 'longlist',
+        nodeName: 'DIV',
+        pseudos: []
+      },
+      {
+        nodeName: 'BODY',
+        pseudos: []
+      },
+      {
+        nodeName: 'HTML',
+        pseudos: []
+      }];
+      checkMutations(mutations, expectedMutations);
+    }).then(() => {
       // Now shut down the walker and make sure that clears up the remaining lock.
       return gWalker.release();
     }).then(() => {
       ok(!DOMUtils.hasPseudoClassLock(contentNode, ':active'), "Pseudoclass should have been removed during destruction.");
       teardown();
     }).then(runNextTest));
   });
 });
diff --git a/toolkit/devtools/styleinspector/css-logic.js b/toolkit/devtools/styleinspector/css-logic.js
--- a/toolkit/devtools/styleinspector/css-logic.js
+++ b/toolkit/devtools/styleinspector/css-logic.js
@@ -615,26 +615,26 @@ CssLogic.prototype = {
     }
 
     do {
       let status = this.viewedElement === element ?
                    CssLogic.STATUS.MATCHED : CssLogic.STATUS.PARENT_MATCH;
 
       try {
         // Handle finding rules on pseudo by reading style rules
-        // on the parent node with proper pseudo arg to getCSSStyleRules.
+        // on the parent node with proper pseudo arg to getVisitedDependentCSSStyleRules.
         let {bindingElement, pseudo} = CssLogic.getBindingElementAndPseudo(element);
-        domRules = domUtils.getCSSStyleRules(bindingElement, pseudo);
+        domRules = domUtils.getVisitedDependentCSSStyleRules(bindingElement, pseudo);
       } catch (ex) {
         Services.console.
           logStringMessage("CL__buildMatchedRules error: " + ex);
         continue;
       }
 
-      // getCSSStyleRules can return null with a shadow DOM element.
+      // getVisitedDependentCSSStyleRules can return null with a shadow DOM element.
       let numDomRules = domRules ? domRules.Count() : 0;
       for (let i = 0; i < numDomRules; i++) {
         let domRule = domRules.GetElementAt(i);
         if (domRule.type !== Ci.nsIDOMCSSRule.STYLE_RULE) {
           continue;
         }
 
         let sheet = this.getSheet(domRule.parentStyleSheet, -1);
