# HG changeset patch
# Parent 570982344606e3dbca4abcecf1730395ace6dbf9
# User Michael Ratcliffe <mratcliffe@mozilla.com>
# Date 1403905753 -3600

Bug 713106 - Show :visited styles in Properties and Rule view r=mratcliffe

diff --git a/browser/devtools/inspector/breadcrumbs.js b/browser/devtools/inspector/breadcrumbs.js
--- a/browser/devtools/inspector/breadcrumbs.js
+++ b/browser/devtools/inspector/breadcrumbs.js
@@ -1,17 +1,16 @@
 /* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 const {Cc, Cu, Ci} = require("chrome");
 
-const PSEUDO_CLASSES = [":hover", ":active", ":focus"];
 const ENSURE_SELECTION_VISIBLE_DELAY = 50; // ms
 
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 Cu.import("resource:///modules/devtools/DOMHelpers.jsm");
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource:///modules/devtools/ViewHelpers.jsm");
 const ELLIPSIS = Services.prefs.getComplexValue("intl.ellipsis", Ci.nsIPrefLocalizedString).data;
 const MAX_LABEL_LENGTH = 40;
diff --git a/browser/devtools/inspector/inspector.xul b/browser/devtools/inspector/inspector.xul
--- a/browser/devtools/inspector/inspector.xul
+++ b/browser/devtools/inspector/inspector.xul
@@ -70,16 +70,19 @@
         label=":hover" type="checkbox"
         oncommand="inspector.togglePseudoClass(':hover')"/>
       <menuitem id="node-menu-pseudo-active"
         label=":active" type="checkbox"
         oncommand="inspector.togglePseudoClass(':active')"/>
       <menuitem id="node-menu-pseudo-focus"
         label=":focus" type="checkbox"
         oncommand="inspector.togglePseudoClass(':focus')"/>
+      <menuitem id="node-menu-pseudo-visited"
+        label=":visited" type="checkbox"
+        oncommand="inspector.togglePseudoClass(':visited')"/>
     </menupopup>
   </popupset>
 
   <box flex="1" class="devtools-responsive-container theme-body">
     <vbox flex="1">
       <toolbar id="inspector-toolbar"
         class="devtools-toolbar"
         nowindowdrag="true">
diff --git a/toolkit/devtools/server/actors/inspector.js b/toolkit/devtools/server/actors/inspector.js
--- a/toolkit/devtools/server/actors/inspector.js
+++ b/toolkit/devtools/server/actors/inspector.js
@@ -66,17 +66,17 @@ const {
   CustomHighlighterActor,
   HIGHLIGHTER_CLASSES
 } = require("devtools/server/actors/highlighter");
 const {getLayoutChangesObserver, releaseLayoutChangesObserver} =
   require("devtools/server/actors/layout");
 
 const FONT_FAMILY_PREVIEW_TEXT = "The quick brown fox jumps over the lazy dog";
 const FONT_FAMILY_PREVIEW_TEXT_SIZE = 20;
-const PSEUDO_CLASSES = [":hover", ":active", ":focus"];
+const PSEUDO_CLASSES = [":hover", ":active", ":focus", ":visited"];
 const HIDDEN_CLASS = "__fx-devtools-hide-shortcut__";
 const XHTML_NS = "http://www.w3.org/1999/xhtml";
 const IMAGE_FETCHING_TIMEOUT = 500;
 // The possible completions to a ':' with added score to give certain values
 // some preference.
 const PSEUDO_SELECTORS = [
   [":active", 1],
   [":hover", 1],
@@ -1593,17 +1593,17 @@ var WalkerActor = protocol.ActorClass({
     }
   }),
 
   /**
    * Add a pseudo-class lock to a node.
    *
    * @param NodeActor node
    * @param string pseudo
-   *    A pseudoclass: ':hover', ':active', ':focus'
+   *    A pseudoclass: ':hover', ':active', ':focus', ':visited'
    * @param options
    *    Options object:
    *    `parents`: True if the pseudo-class should be added
    *      to parent nodes.
    *
    * @returns An empty packet.  A "pseudoClassLock" mutation will
    *    be queued for any changed nodes.
    */
@@ -1674,17 +1674,17 @@ var WalkerActor = protocol.ActorClass({
     request: { node: Arg(0, "domnode") }
   }),
 
   /**
    * Remove a pseudo-class lock from a node.
    *
    * @param NodeActor node
    * @param string pseudo
-   *    A pseudoclass: ':hover', ':active', ':focus'
+   *    A pseudoclass: ':hover', ':active', ':focus', ':visited'
    * @param options
    *    Options object:
    *    `parents`: True if the pseudo-class should be removed
    *      from parent nodes.
    *
    * @returns An empty response.  "pseudoClassLock" mutations
    *    will be emitted for any changed nodes.
    */
diff --git a/toolkit/devtools/server/tests/mochitest/test_inspector-pseudoclass-lock.html b/toolkit/devtools/server/tests/mochitest/test_inspector-pseudoclass-lock.html
--- a/toolkit/devtools/server/tests/mochitest/test_inspector-pseudoclass-lock.html
+++ b/toolkit/devtools/server/tests/mochitest/test_inspector-pseudoclass-lock.html
@@ -13,17 +13,17 @@ https://bugzilla.mozilla.org/show_bug.cg
   <script type="application/javascript;version=1.8">
 Components.utils.import("resource://gre/modules/devtools/Loader.jsm");
 const {Promise: promise} = Components.utils.import("resource://gre/modules/Promise.jsm", {});
 
 const inspector = devtools.require("devtools/server/actors/inspector");
 const DOMUtils = Components.classes["@mozilla.org/inspector/dom-utils;1"].
                    getService(Components.interfaces.inIDOMUtils);
 
-const KNOWN_PSEUDOCLASSES = [':hover', ':active', ':focus']
+const KNOWN_PSEUDOCLASSES = [':hover', ':active', ':focus', ':visited']
 
 window.onload = function() {
   SimpleTest.waitForExplicitFinish();
   runNextTest();
 }
 
 var gInspectee = null;
 var gWalker = null;
@@ -148,16 +148,66 @@ addTest(function testPseudoClassLock() {
         pseudos: []
       },
       {
         nodeName: 'HTML',
         pseudos: []
       }];
       checkMutations(mutations, expectedMutations);
     }).then(() => {
+      // Now add :visited to all parents
+      gWalker.addPseudoClassLock(nodeFront, ':visited', {parents: true});
+      return promiseOnce(gWalker, "mutations");
+    }).then(mutations => {
+      let expectedMutations = [{
+        id: 'b',
+        nodeName: 'DIV',
+        // Should still have :active on the original node.
+        pseudos: [':active', ':visited']
+      },
+      {
+        id: 'longlist',
+        nodeName: 'DIV',
+        pseudos: [':visited']
+      },
+      {
+        nodeName: 'BODY',
+        pseudos: [':visited']
+      },
+      {
+        nodeName: 'HTML',
+        pseudos: [':visited']
+      }];
+      checkMutations(mutations, expectedMutations);
+    }).then(() => {
+      // Now remove :visited on all parents
+      gWalker.removePseudoClassLock(nodeFront, ':visited', {parents: true});
+      return promiseOnce(gWalker, "mutations");
+    }).then(mutations => {
+      let expectedMutations = [{
+        id: 'b',
+        nodeName: 'DIV',
+        // Should still have :active on the original node.
+        pseudos: [':active']
+      },
+      {
+        id: 'longlist',
+        nodeName: 'DIV',
+        pseudos: []
+      },
+      {
+        nodeName: 'BODY',
+        pseudos: []
+      },
+      {
+        nodeName: 'HTML',
+        pseudos: []
+      }];
+      checkMutations(mutations, expectedMutations);
+    }).then(() => {
       // Now shut down the walker and make sure that clears up the remaining lock.
       return gWalker.release();
     }).then(() => {
       ok(!DOMUtils.hasPseudoClassLock(contentNode, ':active'), "Pseudoclass should have been removed during destruction.");
       teardown();
     }).then(runNextTest));
   });
 });
