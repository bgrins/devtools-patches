# HG changeset patch
# User Gabriel Luong <gabriel.luong@gmail.com>
# Parent  7a776d0c87e6be3863a5ad389d13afff948a5a5a

diff --git a/browser/devtools/styleinspector/computedview.xhtml b/browser/devtools/styleinspector/computedview.xhtml
--- a/browser/devtools/styleinspector/computedview.xhtml
+++ b/browser/devtools/styleinspector/computedview.xhtml
@@ -44,28 +44,28 @@
           this.computedview.destroy();
         }
       }
     </script>
   </head>
 
   <body>
 
+    <!-- The output from #templateRoot (below) is inserted here. -->
+    <div id="root" class="devtools-monospace"></div>
+
     <!-- The output from #templateProperty (below) is appended here. -->
     <div id="propertyContainer" class="devtools-monospace">
     </div>
 
     <!-- When no properties are found the following block is displayed. -->
     <div id="noResults" hidden="">
       &noPropertiesFound;
     </div>
 
-    <!-- The output from #templateRoot (below) is inserted here. -->
-    <div id="root" class="devtools-monospace"></div>
-
     <!--
     To visually debug the templates without running firefox, alter the display:none
     -->
     <div style="display:none;">
       <!--
       templateRoot sits at the top of the window and contains the "include default
       styles" checkbox. For data it needs an instance of CssHtmlTree.
       -->
diff --git a/browser/devtools/styleinspector/cssruleview.xhtml b/browser/devtools/styleinspector/cssruleview.xhtml
--- a/browser/devtools/styleinspector/cssruleview.xhtml
+++ b/browser/devtools/styleinspector/cssruleview.xhtml
@@ -30,9 +30,36 @@
       }
       window.onunload = function() {
         if (this.ruleview) {
           this.ruleview.destroy();
         }
       }
     </script>
   </head>
+  <body>
+
+    <!-- The output from #templateRoot (below) is inserted here. -->
+    <div id="root" class="devtools-monospace">
+    </div>
+
+    <div id="ruleviewContainer" class="ruleview devtools-monospace">
+    </div>
+
+    <!--
+    To visually debug the templates without running firefox, alter the display:none
+    -->
+    <div style="display:none;">
+      <!--
+      templateRoot sits at the top of the window and contains the "include default
+      styles" checkbox. For data it needs an instance of CssHtmlTree.
+      -->
+      <div id="templateRoot">
+        <xul:hbox class="devtools-toolbar" flex="1" align="center" style="width: 100%;">
+          <xul:textbox class="devtools-searchinput" type="search" save="${searchField}"
+                       placeholder="&userStylesSearch;" flex="1"
+                       oncommand="${filterChanged}"/>
+        </xul:hbox>
+      </div>
+    </div>
+
+  </body>
 </html>
diff --git a/browser/devtools/styleinspector/rule-view.js b/browser/devtools/styleinspector/rule-view.js
--- a/browser/devtools/styleinspector/rule-view.js
+++ b/browser/devtools/styleinspector/rule-view.js
@@ -14,17 +14,19 @@
 const {gDevTools} = Cu.import("resource:///modules/devtools/gDevTools.jsm", {});
 const {OutputParser} = require("devtools/output-parser");
 const {PrefObserver, PREF_ORIG_SOURCES} = require("devtools/styleeditor/utils");
 const {parseSingleValue, parseDeclarations} = require("devtools/styleinspector/css-parsing-utils");
 const overlays = require("devtools/styleinspector/style-inspector-overlays");
 
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
-
+Cu.import("resource://gre/modules/devtools/Templater.jsm");
+
+const FILTER_CHANGED_TIMEOUT = 300;
 const HTML_NS = "http://www.w3.org/1999/xhtml";
 const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
 const PREF_UA_STYLES = "devtools.inspector.showUserAgentStyles";
 const PREF_DEFAULT_COLOR_UNIT = "devtools.defaultColorUnit";
 
 /**
  * These regular expressions are adapted from firebug's css.js, and are
  * used to parse CSSStyleDeclaration's cssText attribute.
@@ -1098,40 +1100,46 @@
  *        The PageStyleFront for communicating with the remote server.
  * @constructor
  */
 function CssRuleView(aInspector, aDoc, aStore, aPageStyle) {
   this.inspector = aInspector;
   this.doc = aDoc;
   this.store = aStore || {};
   this.pageStyle = aPageStyle;
-  this.element = this.doc.createElementNS(HTML_NS, "div");
-  this.element.className = "ruleview devtools-monospace";
-  this.element.flex = 1;
 
   this._outputParser = new OutputParser();
 
   this._buildContextMenu = this._buildContextMenu.bind(this);
+  this._onContextMenu = this._onContextMenu.bind(this);
   this._contextMenuUpdate = this._contextMenuUpdate.bind(this);
   this._onAddRule = this._onAddRule.bind(this);
   this._onSelectAll = this._onSelectAll.bind(this);
   this._onCopy = this._onCopy.bind(this);
   this._onCopyColor = this._onCopyColor.bind(this);
   this._onToggleOrigSources = this._onToggleOrigSources.bind(this);
 
-  this.element.addEventListener("copy", this._onCopy);
+  // Nodes used in templating
+  this.root = this.doc.getElementById("root");
+  this.templateRoot = this.doc.getElementById("templateRoot");
+  this.element = this.doc.getElementById("ruleviewContainer");
+
+  this.doc.addEventListener("copy", this._onCopy);
+  this.doc.addEventListener("contextmenu", this._onContextMenu);
 
   this._handlePrefChange = this._handlePrefChange.bind(this);
   this._onSourcePrefChanged = this._onSourcePrefChanged.bind(this);
 
   this._prefObserver = new PrefObserver("devtools.");
   this._prefObserver.on(PREF_ORIG_SOURCES, this._onSourcePrefChanged);
   this._prefObserver.on(PREF_UA_STYLES, this._handlePrefChange);
   this._prefObserver.on(PREF_DEFAULT_COLOR_UNIT, this._handlePrefChange);
 
+  CssRuleView.processTemplate(this.templateRoot, this.root, this);
+
   this.showUserAgentStyles = Services.prefs.getBoolPref(PREF_UA_STYLES);
 
   let options = {
     autoSelect: true,
     theme: "auto"
   };
   this.popup = new AutocompletePopup(aDoc.defaultView.parent.document, options);
 
@@ -1140,22 +1148,59 @@
 
   // Add the tooltips and highlighters to the view
   this.tooltips = new overlays.TooltipsOverlay(this);
   this.tooltips.addToView();
   this.highlighters = new overlays.HighlightersOverlay(this);
   this.highlighters.addToView();
 }
 
+/**
+ * Clone the given template node, and process it by resolving ${} references
+ * in the template.
+ *
+ * @param {nsIDOMElement} aTemplate the template note to use.
+ * @param {nsIDOMElement} aDestination the destination node where the
+ * processed nodes will be displayed.
+ * @param {object} aData the data to pass to the template.
+ * @param {Boolean} aPreserveDestination If true then the template will be
+ * appended to aDestination's content else aDestination.innerHTML will be
+ * cleared before the template is appended.
+ */
+CssRuleView.processTemplate = function CssHtmlTree_processTemplate(aTemplate,
+                                  aDestination, aData, aPreserveDestination)
+{
+  if (!aPreserveDestination) {
+    aDestination.innerHTML = "";
+  }
+
+  // All the templater does is to populate a given DOM tree with the given
+  // values, so we need to clone the template first.
+  let duplicated = aTemplate.cloneNode(true);
+
+  // See https://github.com/mozilla/domtemplate/blob/master/README.md
+  // for docs on the template() function
+  template(duplicated, aData, { allowEval: true });
+  while (duplicated.firstChild) {
+    aDestination.appendChild(duplicated.firstChild);
+  }
+};
+
 exports.CssRuleView = CssRuleView;
 
 CssRuleView.prototype = {
   // The element that we're inspecting.
   _viewedElement: null,
 
+    // Used for cancelling timeouts in the style filter.
+  _filterChangedTimeout: null,
+
+  // The search filter
+  searchField: null,
+
   /**
    * Build the context menu.
    */
   _buildContextMenu: function() {
     let doc = this.doc.defaultView.parent.document;
 
     this._contextmenu = doc.createElementNS(XUL_NS, "menupopup");
     this._contextmenu.addEventListener("popupshowing", this._contextMenuUpdate);
@@ -1320,16 +1365,29 @@
       }
     }
 
     this._colorToCopy = container.dataset["color"];
     return true;
   },
 
   /**
+   * Context menu handler.
+   */
+  _onContextMenu: function(event) {
+    try {
+      this.popupNode = event.explicitOriginalTarget;
+      this.doc.defaultView.focus();
+      this._contextmenu.openPopupAtScreen(event.screenX, event.screenY, true);
+    } catch(e) {
+      console.error(e);
+    }
+  },
+
+  /**
    * Select all text.
    */
   _onSelectAll: function() {
     let win = this.doc.defaultView;
     let selection = win.getSelection();
 
     selection.selectAllChildren(this.doc.documentElement);
   },
@@ -1477,18 +1535,17 @@
 
     gDummyPromise = null;
 
     this._prefObserver.off(PREF_ORIG_SOURCES, this._onSourcePrefChanged);
     this._prefObserver.off(PREF_UA_STYLES, this._handlePrefChange);
     this._prefObserver.off(PREF_DEFAULT_COLOR_UNIT, this._handlePrefChange);
     this._prefObserver.destroy();
 
-    this.element.removeEventListener("copy", this._onCopy);
-    this._onCopy = null;
+    this.searchField.removeEventListener("command", this.filterChanged);
 
     this._outputParser = null;
 
     // Remove context menu
     if (this._contextmenu) {
       // Destroy the Add Rule menuitem.
       this.menuitemAddRule.removeEventListener("command", this._onAddRule);
       this.menuitemAddRule = null;
@@ -1509,16 +1566,19 @@
       this.menuitemSources = null;
 
       // Destroy the context menu.
       this._contextmenu.removeEventListener("popupshowing", this._contextMenuUpdate);
       this._contextmenu.parentNode.removeChild(this._contextmenu);
       this._contextmenu = null;
     }
 
+    this.element.removeEventListener("copy", this._onCopy);
+    this.doc.removeEventListener("contextmenu", this._onContextMenu);
+
     // We manage the popupNode ourselves so we also need to destroy it.
     this.doc.popupNode = null;
 
     this.tooltips.destroy();
     this.highlighters.destroy();
 
     if (this.element.parentNode) {
       this.element.parentNode.removeChild(this.element);
@@ -1574,16 +1634,32 @@
     if (this.isEditing || !this._elementStyle) {
       return;
     }
 
     // Repopulate the element style.
     this._populate(true);
   },
 
+  /**
+   * Called when the user enters a search term.
+   *
+   * @param {Event} aEvent the DOM Event object.
+   */
+  filterChanged: function() {
+    if (this._filterChangedTimeout) {
+      clearTimeout(this._filterChangedTimeout);
+    }
+
+    this._filterChangedTimeout = setTimeout(() => {
+      this.refreshPanel();
+      this._filterChangeTimeout = null;
+    }, FILTER_CHANGED_TIMEOUT);
+  },
+
   _populate: function(clearRules = false) {
     let elementStyle = this._elementStyle;
     return this._elementStyle.populate().then(() => {
       if (this._elementStyle != elementStyle) {
         return;
       }
 
       if (clearRules) {
@@ -1754,16 +1830,42 @@
       return;
     }
 
     for (let rule of this._elementStyle.rules) {
       if (rule.domRule.system) {
         continue;
       }
 
+      let searchTerm = this.searchField.value.toLowerCase();
+      if (searchTerm && rule.domRule.type != ELEMENT_STYLE) {
+        let matchSearchTerm = false;
+
+        for (let matchedSelector of rule.matchedSelectors) {
+          if (matchedSelector.toLowerCase().indexOf(searchTerm) != -1) {
+            matchSearchTerm = true;
+            break;
+          }
+        }
+
+        if (!matchSearchTerm) {
+          for (let textProp of rule.textProps) {
+            if (textProp.name.toLowerCase().indexOf(searchTerm) != -1 ||
+              textProp.value.toLowerCase().indexOf(searchTerm) != -1) {
+              matchSearchTerm = true;
+              break;
+            }
+          }
+        }
+
+        if (!matchSearchTerm) {
+          continue;
+        }
+      }
+
       // Only print header for this element if there are pseudo elements
       if (seenPseudoElement && !seenNormalElement && !rule.pseudoElement) {
         seenNormalElement = true;
         let div = this.doc.createElementNS(HTML_NS, "div");
         div.className = this._getRuleViewHeaderClassName();
         div.textContent = this.selectedElementLabel;
         this.element.appendChild(div);
       }
@@ -1912,32 +2014,16 @@
     this.populate();
 
     this.closeBrace = createChild(code, "div", {
       class: "ruleview-ruleclose",
       tabindex: this.isEditable ? "0" : "-1",
       textContent: "}"
     });
 
-    this.element.addEventListener("contextmenu", event => {
-      try {
-        // In the sidebar we do not have this.doc.popupNode so we need to save
-        // the node ourselves.
-        this.doc.popupNode = event.explicitOriginalTarget;
-        let win = this.doc.defaultView;
-        win.focus();
-
-        this.ruleView._contextmenu.openPopupAtScreen(
-          event.screenX, event.screenY, true);
-
-      } catch(e) {
-        console.error(e);
-      }
-    }, false);
-
     if (this.isEditable) {
       code.addEventListener("click", () => {
         let selection = this.doc.defaultView.getSelection();
         if (selection.isCollapsed) {
           this.newProperty();
         }
       }, false);
 
diff --git a/browser/devtools/styleinspector/ruleview.css b/browser/devtools/styleinspector/ruleview.css
--- a/browser/devtools/styleinspector/ruleview.css
+++ b/browser/devtools/styleinspector/ruleview.css
@@ -1,15 +1,37 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
-#root {
+* {
+  box-sizing: border-box;
+}
+
+:root {
+  height: 100%;
+}
+
+body {
+  margin: 0;
+  display : flex;
+  flex-direction: column;
+  height: 100%;
+}
+
+#ruleviewContainer {
+  -moz-user-select: text;
+  overflow: auto;
+  min-height: 0;
+  flex: 1;
+}
+
+/*#root {
   display: -moz-box;
-}
+}*/
 
 .ruleview {
   overflow: auto;
   -moz-user-select: text;
 }
 
 .ruleview-code {
   direction: ltr;
diff --git a/browser/devtools/styleinspector/style-inspector.js b/browser/devtools/styleinspector/style-inspector.js
--- a/browser/devtools/styleinspector/style-inspector.js
+++ b/browser/devtools/styleinspector/style-inspector.js
@@ -19,17 +19,16 @@
 // This module doesn't currently export any symbols directly, it only
 // registers inspector tools.
 
 function RuleViewTool(inspector, window, iframe) {
   this.inspector = inspector;
   this.doc = window.document;
 
   this.view = new RuleView.CssRuleView(inspector, this.doc);
-  this.doc.documentElement.appendChild(this.view.element);
 
   this.onLinkClicked = this.onLinkClicked.bind(this);
   this.onSelected = this.onSelected.bind(this);
   this.refresh = this.refresh.bind(this);
   this.clearUserProperties = this.clearUserProperties.bind(this);
   this.onPropertyChanged = this.onPropertyChanged.bind(this);
   this.onViewRefreshed = this.onViewRefreshed.bind(this);
   this.onPanelSelected = this.onPanelSelected.bind(this);
@@ -142,18 +141,16 @@
     this.inspector.selection.off("new-node-front", this.onSelected);
     this.inspector.target.off("navigate", this.clearUserProperties);
     this.inspector.sidebar.off("ruleview-selected", this.onPanelSelected);
 
     this.view.element.removeEventListener("CssRuleViewCSSLinkClicked", this.onLinkClicked);
     this.view.element.removeEventListener("CssRuleViewChanged", this.onPropertyChanged);
     this.view.element.removeEventListener("CssRuleViewRefreshed", this.onViewRefreshed);
 
-    this.doc.documentElement.removeChild(this.view.element);
-
     this.view.destroy();
 
     this.view = this.doc = this.inspector = null;
   }
 };
 
 function ComputedViewTool(inspector, window, iframe) {
   this.inspector = inspector;
diff --git a/browser/devtools/styleinspector/test/browser.ini b/browser/devtools/styleinspector/test/browser.ini
--- a/browser/devtools/styleinspector/test/browser.ini
+++ b/browser/devtools/styleinspector/test/browser.ini
@@ -93,16 +93,17 @@
 [browser_ruleview_original-source-link.js]
 [browser_ruleview_override.js]
 [browser_ruleview_pseudo-element_01.js]
 [browser_ruleview_pseudo-element_02.js]
 skip-if = e10s # Bug 1090340
 [browser_ruleview_refresh-on-attribute-change_01.js]
 [browser_ruleview_refresh-on-attribute-change_02.js]
 [browser_ruleview_refresh-on-style-change.js]
+[browser_ruleview_search-filter.js]
 [browser_ruleview_select-and-copy-styles.js]
 [browser_ruleview_selector-highlighter_01.js]
 [browser_ruleview_selector-highlighter_02.js]
 [browser_ruleview_style-editor-link.js]
 skip-if = e10s # bug 1040670 Cannot open inline styles in viewSourceUtils
 [browser_ruleview_urls-clickable.js]
 [browser_ruleview_user-agent-styles.js]
 [browser_ruleview_user-agent-styles-uneditable.js]
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_search-filter.js b/browser/devtools/styleinspector/test/browser_ruleview_search-filter.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/styleinspector/test/browser_ruleview_search-filter.js
@@ -0,0 +1,56 @@
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+ http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Tests that the rule view search filter works properly.
+
+let PAGE_CONTENT = [
+  '<style type="text/css">',
+  '  #testid {',
+  '    background-color: blue;',
+  '  }',
+  '  .testclass {',
+  '    background-color: green;',
+  '    width: 100%;',
+  '  }',
+  '</style>',
+  '<div id="testid" class="testclass">Styled Node</div>'
+].join("\n");
+
+add_task(function*() {
+  yield addTab("data:text/html;charset=utf-8,test rule view search filter");
+
+  info("Creating the test document");
+  content.document.body.innerHTML = PAGE_CONTENT;
+
+  info("Opening the rule-view");
+  let {toolbox, inspector, view} = yield openRuleView();
+
+  info("Selecting the test node");
+  yield selectNode("#testid", inspector);
+
+  yield testAddTextInFilter(inspector, view);
+});
+
+function* testAddTextInFilter(inspector, ruleView) {
+  info("setting filter text to \"color\"");
+
+  let searchField = ruleView.searchField;
+  let onRuleViewRefresh = once(ruleView.element, "CssRuleViewRefreshed");
+  searchField.focus();
+  debugger;
+  let win = ruleView.doc.defaultView;
+  EventUtils.synthesizeKey("b", {}, win);
+  EventUtils.synthesizeKey("l", {}, win);
+  EventUtils.synthesizeKey("u", {}, win);
+  EventUtils.synthesizeKey("e", {}, win);
+
+  yield onRuleViewRefresh;
+
+  info("check that the correct rules are visible");
+  is(ruleView.element.children.length, 2, "Should have 2 rules.");
+  is(ruleView.element.children[0]._ruleEditor.rule.selectorText, "element", "First rule is inline element.");
+  is(ruleView.element.children[1]._ruleEditor.rule.selectorText, "#testid", "Second rule is #testid.");
+}
diff --git a/browser/themes/shared/devtools/computedview.css b/browser/themes/shared/devtools/computedview.css
--- a/browser/themes/shared/devtools/computedview.css
+++ b/browser/themes/shared/devtools/computedview.css
@@ -148,17 +148,16 @@
 }
 
 .legendKey {
   margin: 0 5px;
 }
 
 #root .devtools-toolbar {
   width: 100%;
-  border-bottom-width: 0;
 }
 
 .link {
   padding: 0 3px;
   cursor: pointer;
   float: right;
 }
 
