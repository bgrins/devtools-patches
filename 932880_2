# HG changeset patch
# Parent fbe7cd967983871708666049f8333fe6d5c19b8e
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 932880 - Developer tools leak many windows until shutdown in browser-chrome tests (2)

diff --git a/browser/devtools/framework/target.js b/browser/devtools/framework/target.js
--- a/browser/devtools/framework/target.js
+++ b/browser/devtools/framework/target.js
@@ -438,16 +438,17 @@ TabTarget.prototype = {
 
     this._destroyer = promise.defer();
 
     // Before taking any action, notify listeners that destruction is imminent.
     this.emit("close");
 
     if (this._inspector) {
       this._inspector.destroy();
+      this._inspector = null;
     }
 
     // First of all, do cleanup tasks that pertain to both remoted and
     // non-remoted targets.
     this.off("thread-resumed", this._handleThreadState);
     this.off("thread-paused", this._handleThreadState);
 
     if (this._tab) {
diff --git a/browser/devtools/inspector/inspector-panel.js b/browser/devtools/inspector/inspector-panel.js
--- a/browser/devtools/inspector/inspector-panel.js
+++ b/browser/devtools/inspector/inspector-panel.js
@@ -670,16 +670,18 @@ InspectorPanel.prototype = {
       this.markup.destroy();
       delete this.markup;
     }
 
     if (this._markupFrame) {
       this._markupFrame.parentNode.removeChild(this._markupFrame);
       delete this._markupFrame;
     }
+
+    this._markupBox = null;
   },
 
   /**
    * Toggle a pseudo class.
    */
   togglePseudoClass: function InspectorPanel_togglePseudoClass(aPseudo) {
     if (this.selection.isElementNode()) {
       let node = this.selection.nodeFront;
diff --git a/browser/devtools/inspector/test/browser_inspector_basic_highlighter.js b/browser/devtools/inspector/test/browser_inspector_basic_highlighter.js
--- a/browser/devtools/inspector/test/browser_inspector_basic_highlighter.js
+++ b/browser/devtools/inspector/test/browser_inspector_basic_highlighter.js
@@ -79,14 +79,15 @@ function test() {
   function verifyNoNodeSelected() {
     ok(doc.querySelectorAll(":-moz-devtools-highlighted").length === 0, "no node selected");
     return promise.resolve();
   }
 
   function finishUp() {
     let h = require("devtools/inspector/highlighter");
     h._forceBasic.value = false;
+    inspector = doc = null;
     gBrowser.removeCurrentTab();
     finish();
   }
 }
 
 
diff --git a/browser/devtools/inspector/test/browser_inspector_select_last_selected.js b/browser/devtools/inspector/test/browser_inspector_select_last_selected.js
--- a/browser/devtools/inspector/test/browser_inspector_select_last_selected.js
+++ b/browser/devtools/inspector/test/browser_inspector_select_last_selected.js
@@ -25,27 +25,28 @@ function test() {
   }, true);
   content.location = page1;
 
   function startTests() {
     testSameNodeSelectedOnPageReload();
   }
 
   function endTests() {
-    executeSoon(() => {
-      toolbox.destroy();
+    inspector.destroy().then(() =>
+      toolbox.destroy()
+    ).then(() => {
       toolbox = inspector = page1 = page2 = null;
       gBrowser.removeCurrentTab();
       finish();
     });
   }
 
   function loadPageAnd(page, callback) {
     inspector.once("markuploaded", () => {
-      executeSoon(callback);
+      callback();
     });
 
     if (page) {
       content.location = page;
     } else {
       content.location.reload();
     }
   }
@@ -53,17 +54,17 @@ function test() {
   function reloadAndReselect(id, callback) {
     let div = content.document.getElementById(id);
 
     inspector.once("inspector-updated", () => {
       is(inspector.selection.node, div);
 
       loadPageAnd(false, () => {
         is(inspector.selection.node.id, id, "Node re-selected after reload");
-        executeSoon(callback);
+        callback();
       });
     });
 
     inspector.selection.setNode(div);
   }
 
   // Test that nodes selected on the test page remain selected after reload
   function testSameNodeSelectedOnPageReload()
@@ -80,47 +81,40 @@ function test() {
   }
 
   // Test that since the previously selected node doesn't exist on the new page
   // the body is selected
   function testBodySelectedOnNavigate() {
     // Last node selected was id4, go to a different page and check body is
     // selected
     loadPageAnd(page2, () => {
-      executeSoon(() => {
-        is(
-          inspector.selection.node.tagName.toLowerCase(),
-          "body",
-          "Node not found, body selected"
-        );
-        executeSoon(testSameNodeSelectedOnNavigateAwayAndBack);
-      });
+      is(
+        inspector.selection.node.tagName.toLowerCase(),
+        "body",
+        "Node not found, body selected"
+      );
+      testSameNodeSelectedOnNavigateAwayAndBack();
     });
   }
 
   // Test that the node selected on page 1 gets selected again after a navigation
   // is made to another page and back again
   function testSameNodeSelectedOnNavigateAwayAndBack() {
     // On page2, select id5
     let id = "id5";
     let div = content.document.getElementById(id);
 
     inspector.once("inspector-updated", () => {
       is(inspector.selection.node.id, id);
 
-      executeSoon(() => {
-        // go to page1 but do not select anything
-        loadPageAnd(page1, () => {
-
-          executeSoon(() => {
-            // go back to page2 and check id5 is still the current selection
-            loadPageAnd(page2, () => {
-              is(inspector.selection.node.id, id, "Node re-selected after navigation");
-              executeSoon(endTests);
-            });
-          });
+      // go to page1 but do not select anything
+      loadPageAnd(page1, () => {
+          // go back to page2 and check id5 is still the current selection
+        loadPageAnd(page2, () => {
+          is(inspector.selection.node.id, id, "Node re-selected after navigation");
+          endTests();
         });
       });
     });
 
     inspector.selection.setNode(div);
   }
 }
diff --git a/browser/devtools/inspector/test/browser_inspector_sidebarstate.js b/browser/devtools/inspector/test/browser_inspector_sidebarstate.js
--- a/browser/devtools/inspector/test/browser_inspector_sidebarstate.js
+++ b/browser/devtools/inspector/test/browser_inspector_sidebarstate.js
@@ -20,20 +20,17 @@ function inspectorRuleViewOpened()
 {
   is(inspector.sidebar.getCurrentTabID(), "ruleview", "Rule View is selected by default");
 
   // Select the computed view and turn off the inspector.
   inspector.sidebar.select("computedview");
 
   gDevTools.once("toolbox-destroyed", inspectorClosed);
   let target = TargetFactory.forTab(gBrowser.selectedTab);
-  let toolbox = gDevTools.getToolbox(target);
-  executeSoon(function() {
-    toolbox.destroy();
-  });
+  gDevTools.getToolbox(target).destroy();
 }
 
 function inspectorClosed()
 {
   openInspector(function(panel) {
     inspector = panel;
     if (inspector.sidebar.getCurrentTabID()) {
       // Default sidebar already selected.
@@ -50,16 +47,17 @@ function testNewDefaultTab()
   is(inspector.sidebar.getCurrentTabID(), "computedview", "Computed view is selected by default.");
 
   finishTest();
 }
 
 
 function finishTest()
 {
+  doc = inspector = null;
   gBrowser.removeCurrentTab();
   finish();
 }
 
 function test()
 {
   waitForExplicitFinish();
   gBrowser.selectedTab = gBrowser.addTab();
diff --git a/browser/devtools/markupview/test/browser_inspector_markup_subset.js b/browser/devtools/markupview/test/browser_inspector_markup_subset.js
--- a/browser/devtools/markupview/test/browser_inspector_markup_subset.js
+++ b/browser/devtools/markupview/test/browser_inspector_markup_subset.js
@@ -135,13 +135,13 @@ function test() {
     button.click();
     markup._waitForChildren().then(() => {
       assertChildren("abcdefghijklmnopqrstuvwxyz");
       finishUp();
     });
   }
 
   function finishUp() {
-    doc = inspector = null;
+    doc = inspector = markup = null;
     gBrowser.removeCurrentTab();
     finish();
   }
 }
diff --git a/browser/devtools/scratchpad/scratchpad.js b/browser/devtools/scratchpad/scratchpad.js
--- a/browser/devtools/scratchpad/scratchpad.js
+++ b/browser/devtools/scratchpad/scratchpad.js
@@ -1345,16 +1345,17 @@ var Scratchpad = {
 
     // This event is created only after user uses 'reload and run' feature.
     if (this._reloadAndRunEvent && this.gBrowser) {
       this.gBrowser.selectedBrowser.removeEventListener("load",
           this._reloadAndRunEvent, true);
     }
 
     PreferenceObserver.uninit();
+    CloseObserver.uninit();
 
     this.editor.off("change", this._onChanged);
     this.editor.destroy();
     this.editor = null;
 
     if (this._sidebar) {
       this._sidebar.destroy();
       this._sidebar = null;
diff --git a/browser/devtools/scratchpad/test/browser.ini b/browser/devtools/scratchpad/test/browser.ini
--- a/browser/devtools/scratchpad/test/browser.ini
+++ b/browser/devtools/scratchpad/test/browser.ini
@@ -23,13 +23,14 @@ support-files = head.js
 [browser_scratchpad_contexts.js]
 [browser_scratchpad_execute_print.js]
 [browser_scratchpad_files.js]
 [browser_scratchpad_initialization.js]
 [browser_scratchpad_inspect.js]
 [browser_scratchpad_long_string.js]
 [browser_scratchpad_open.js]
 [browser_scratchpad_open_error_console.js]
-[browser_scratchpad_pprint-02.js]
-[browser_scratchpad_pprint.js]
+# Disabled, as escodegen is being replaced - bug 930141
+# [browser_scratchpad_pprint-02.js]
+# [browser_scratchpad_pprint.js]
 [browser_scratchpad_restore.js]
 [browser_scratchpad_tab_switch.js]
 [browser_scratchpad_ui.js]
diff --git a/browser/devtools/styleinspector/rule-view.js b/browser/devtools/styleinspector/rule-view.js
--- a/browser/devtools/styleinspector/rule-view.js
+++ b/browser/devtools/styleinspector/rule-view.js
@@ -70,16 +70,17 @@ function createDummyDocument() {
   let eventTarget = docShell.chromeEventHandler;
   docShell.createAboutBlankContentViewer(Cc["@mozilla.org/nullprincipal;1"].createInstance(Ci.nsIPrincipal));
   let window = docShell.contentViewer.DOMDocument.defaultView;
   window.location = "data:text/html,<html></html>";
   let deferred = promise.defer();
   eventTarget.addEventListener("DOMContentLoaded", function handler(event) {
     eventTarget.removeEventListener("DOMContentLoaded", handler, false);
     deferred.resolve(window.document);
+    frame.remove();
   }, false);
   gDummyPromise = deferred.promise;
   return gDummyPromise;
 }
 
 /**
  * Our model looks like this:
  *
@@ -1246,16 +1247,17 @@ CssRuleView.prototype = {
       this.highlight(element);
     }
   },
 
   destroy: function CssRuleView_destroy()
   {
     this.clear();
 
+    gDummyPromise = null;
     gDevTools.off("pref-changed", this._handlePrefChange);
 
     this.element.removeEventListener("copy", this._onCopy);
     delete this._onCopy;
 
     delete this._outputParser;
 
     // Remove context menu
diff --git a/browser/devtools/styleinspector/test/browser_bug722691_rule_view_increment.js b/browser/devtools/styleinspector/test/browser_bug722691_rule_view_increment.js
--- a/browser/devtools/styleinspector/test/browser_bug722691_rule_view_increment.js
+++ b/browser/devtools/styleinspector/test/browser_bug722691_rule_view_increment.js
@@ -169,17 +169,17 @@ function testIncrement( aEditor, aOption
   key = ( aOptions.pageDown ) ? "VK_PAGE_DOWN" : ( aOptions.pageUp ) ? "VK_PAGE_UP" : key;
   EventUtils.synthesizeKey(key,
                           {altKey: aOptions.alt, shiftKey: aOptions.shift},
                           view.doc.defaultView);
 }
 
 function finishTest()
 {
-  doc = null;
+  doc = view = inspector = null;
   gBrowser.removeCurrentTab();
   finish();
 }
 
 function test()
 {
   waitForExplicitFinish();
   gBrowser.selectedTab = gBrowser.addTab();
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_copy.js b/browser/devtools/styleinspector/test/browser_ruleview_copy.js
--- a/browser/devtools/styleinspector/test/browser_ruleview_copy.js
+++ b/browser/devtools/styleinspector/test/browser_ruleview_copy.js
@@ -145,17 +145,17 @@ function failedClipboard(aExpectedPatter
   info("Actual: " + escape(actual));
   info("Expected: " + escape(aExpectedPattern));
   aCallback();
 }
 
 function finishup()
 {
   gBrowser.removeCurrentTab();
-  doc = inspector = null;
+  doc = inspector = win = null;
   finish();
 }
 
 function test()
 {
   waitForExplicitFinish();
 
   gBrowser.selectedTab = gBrowser.addTab();
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_inherit.js b/browser/devtools/styleinspector/test/browser_ruleview_inherit.js
--- a/browser/devtools/styleinspector/test/browser_ruleview_inherit.js
+++ b/browser/devtools/styleinspector/test/browser_ruleview_inherit.js
@@ -92,17 +92,17 @@ function elementStyleInherit()
     is(inheritProp.name, "color", "color should have been inherited.");
 
     finishTest();
   });
 }
 
 function finishTest()
 {
-  doc = null;
+  doc = inspector = view = null;
   gBrowser.removeCurrentTab();
   finish();
 }
 
 function test()
 {
   waitForExplicitFinish();
   gBrowser.selectedTab = gBrowser.addTab();
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_override.js b/browser/devtools/styleinspector/test/browser_ruleview_override.js
--- a/browser/devtools/styleinspector/test/browser_ruleview_override.js
+++ b/browser/devtools/styleinspector/test/browser_ruleview_override.js
@@ -154,17 +154,17 @@ function disableOverride()
 
       finishTest();
     }));
   });
 }
 
 function finishTest()
 {
-  doc = null;
+  doc = inspector = view = null;
   gBrowser.removeCurrentTab();
   finish();
 }
 
 function test()
 {
   waitForExplicitFinish();
   gBrowser.selectedTab = gBrowser.addTab();
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_pseudoelement.js b/browser/devtools/styleinspector/test/browser_ruleview_pseudoelement.js
--- a/browser/devtools/styleinspector/test/browser_ruleview_pseudoelement.js
+++ b/browser/devtools/styleinspector/test/browser_ruleview_pseudoelement.js
@@ -296,17 +296,17 @@ function testNode(node, cb)
   inspector.once("inspector-updated", () => {
     cb(node, view._elementStyle)
   });
   inspector.selection.setNode(node);
 }
 
 function finishTest()
 {
-  doc = null;
+  doc = inspector = view = null;
   gBrowser.removeCurrentTab();
   finish();
 }
 
 function test()
 {
   waitForExplicitFinish();
   gBrowser.selectedTab = gBrowser.addTab();
