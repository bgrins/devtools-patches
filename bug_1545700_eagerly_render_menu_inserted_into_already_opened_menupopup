# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1555685391 25200
#      Fri Apr 19 07:49:51 2019 -0700
# Node ID ff4bb32ca0bcc5c90e7c033a44dca18f559a382f
# Parent  0160424142d14988f7b30595e03f156c31278a42
Bug 1545700 - Eagerly render <menu> inserted into already-opened menupopup

Differential Revision: https://phabricator.services.mozilla.com/D28198

diff --git a/toolkit/content/tests/chrome/test_menu_hide.xul b/toolkit/content/tests/chrome/test_menu_hide.xul
--- a/toolkit/content/tests/chrome/test_menu_hide.xul
+++ b/toolkit/content/tests/chrome/test_menu_hide.xul
@@ -5,38 +5,51 @@
 <window title="Menu Destruction Test"
   onload="setTimeout(runTests, 0);"
   xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
 
   <script src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>      
   <script src="chrome://mochikit/content/tests/SimpleTest/EventUtils.js"></script>      
 
 <menu id="menu">
-  <menupopup onpopupshown="this.firstChild.open = true" onpopuphidden="if (event.target == this) done()">
+  <menupopup onpopuphidden="if (event.target == this) done()">
     <menu id="submenu" label="One">
       <menupopup onpopupshown="submenuOpened();">
         <menuitem label="Two"/>
       </menupopup>
     </menu>
   </menupopup>
 </menu>
 
 <script class="testbody" type="application/javascript">
 <![CDATA[
 
 SimpleTest.waitForExplicitFinish();
 
 function runTests()
 {
-  $("menu").open = true;
+  var menu = $("menu");
+  menu.menupopup.addEventListener("popupshown", () => {
+    var submenu = $("submenu");
+    is(submenu.querySelector(".menu-text").value, "One", "submenu has rendered.");
+
+    var submenuDynamic = document.createXULElement("menu");
+    submenuDynamic.setAttribute("label", "Dynamic");
+    ok(!submenuDynamic.querySelector(".menu-text"), "dynamic subment hasn't rendered yet.");
+    menu.menupopup.append(submenuDynamic);
+    is(submenuDynamic.querySelector(".menu-text").value, "Dynamic", "dynamic submenu has rendered.");
+
+    menu.menupopup.firstElementChild.open = true;
+  }, { once: true });
+  menu.open = true;
 }
 
 function submenuOpened()
 {
-  var submenu = $("submenu")
+  var submenu = $("submenu");
   is(submenu.getAttribute('_moz-menuactive'), "true", "menu highlighted");
   submenu.hidden = true;
   $("menu").open = false;
 }
 
 function done()
 {
   ok(!$("submenu").hasAttribute('_moz-menuactive'), "menu unhighlighted");
diff --git a/toolkit/content/widgets/menu.js b/toolkit/content/widgets/menu.js
--- a/toolkit/content/widgets/menu.js
+++ b/toolkit/content/widgets/menu.js
@@ -139,16 +139,17 @@ class MozMenuCaption extends MozMenuBase
 
 customElements.define("menucaption", MozMenuCaption);
 
 // In general, wait to render menus inside menupopups until they are going to be visible:
 window.addEventListener("popupshowing", (e) => {
   if (e.originalTarget.ownerDocument != document) {
     return;
   }
+  e.originalTarget.setAttribute("hasbeenopened", "true");
   for (let menu of e.originalTarget.querySelectorAll("menu")) {
     menu.render();
   }
 }, { capture: true });
 
 const isHiddenWindow = document.documentURI == "chrome://browser/content/hiddenWindow.xul";
 
 class MozMenu extends MozMenuBaseMixin(MozElements.MozElementMixin(XULMenuElement)) {
@@ -162,29 +163,29 @@ class MozMenu extends MozMenuBaseMixin(M
       ".menu-iconic-icon": "src=image,triggeringprincipal=iconloadingprincipal,validate",
       ".menu-iconic-accel": "value=acceltext",
       ".menu-right": "_moz-menuactive,disabled",
       ".menu-accel": "value=acceltext",
     };
   }
 
   get needsEagerRender() {
-    return this.isMenubarChild || this.isSizingPopup || !this.isInMenupopup;
+    return this.isMenubarChild || this.isSizingPopup || !this.isInHiddenMenupopup;
   }
 
   get isMenubarChild() {
     return this.matches("menubar > menu");
   }
 
   get isSizingPopup() {
     return this.matches("[sizetopopup] menu") || this.matches("menulist menu");
   }
 
-  get isInMenupopup() {
-    return this.matches("menupopup menu");
+  get isInHiddenMenupopup() {
+    return this.matches("menupopup:not([hasbeenopened]) menu");
   }
 
   get isIconic() {
     return this.classList.contains("menu-iconic");
   }
 
   get fragment() {
     let {isMenubarChild, isIconic} = this;
