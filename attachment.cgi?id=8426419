# HG changeset patch
# Parent e641f0a7a21eb0c885552c1f27724a0e2e62ae48
# User Gabriel Luong <gabriel.luong@gmail.com>
try: -b do -p linux,linux64,macosx64,win32 -u mochitest-dt,xpcshell -t none

diff --git a/browser/devtools/shared/widgets/Tooltip.js b/browser/devtools/shared/widgets/Tooltip.js
--- a/browser/devtools/shared/widgets/Tooltip.js
+++ b/browser/devtools/shared/widgets/Tooltip.js
@@ -32,17 +32,16 @@
 const GRADIENT_RE = /\b(repeating-)?(linear|radial)-gradient\(((rgb|hsl)a?\(.+?\)|[^\)])+\)/gi;
 const BORDERCOLOR_RE = /^border-[-a-z]*color$/ig;
 const BORDER_RE = /^border(-(top|bottom|left|right))?$/ig;
 const XHTML_NS = "http://www.w3.org/1999/xhtml";
 const SPECTRUM_FRAME = "chrome://browser/content/devtools/spectrum-frame.xhtml";
 const ESCAPE_KEYCODE = Ci.nsIDOMKeyEvent.DOM_VK_ESCAPE;
 const RETURN_KEYCODE = Ci.nsIDOMKeyEvent.DOM_VK_RETURN;
 const POPUP_EVENTS = ["shown", "hidden", "showing", "hiding"];
-const FONT_FAMILY_PREVIEW_TEXT = "(ABCabc123&@%)";
 
 /**
  * Tooltip widget.
  *
  * This widget is intended at any tool that may need to show rich content in the
  * form of floating panels.
  * A common use case is image previewing in the CSS rule view, but more complex
  * use cases may include color pickers, object inspection, etc...
@@ -631,19 +630,21 @@
    * @param {Object} options
    *        The following options are supported:
    *        - resized : whether or not the image identified by imageUrl has been
    *        resized before this function was called.
    *        - naturalWidth/naturalHeight : the original size of the image before
    *        it was resized, if if was resized before this function was called.
    *        If not provided, will be measured on the loaded image.
    *        - maxDim : if the image should be resized before being shown, pass
-   *        a number here
+   *        a number here.
+   *        - addDimensionLabel : if the dimension label should be appended
+   *        after the image.
    */
-  setImageContent: function(imageUrl, options={}) {
+  setImageContent: function(imageUrl, options) {
     if (!imageUrl) {
       return;
     }
 
     // Main container
     let vbox = this.doc.createElement("vbox");
     vbox.setAttribute("align", "center");
 
@@ -651,35 +652,39 @@
     let image = this.doc.createElement("image");
     image.setAttribute("src", imageUrl);
     if (options.maxDim) {
       image.style.maxWidth = options.maxDim + "px";
       image.style.maxHeight = options.maxDim + "px";
     }
     vbox.appendChild(image);
 
-    // Dimension label
-    let label = this.doc.createElement("label");
-    label.classList.add("devtools-tooltip-caption");
-    label.classList.add("theme-comment");
-    if (options.naturalWidth && options.naturalHeight) {
-      label.textContent = this._getImageDimensionLabel(options.naturalWidth,
-        options.naturalHeight);
-    } else {
-      // If no dimensions were provided, load the image to get them
-      label.textContent = l10n.strings.GetStringFromName("previewTooltip.image.brokenImage");
-      let imgObj = new this.doc.defaultView.Image();
-      imgObj.src = imageUrl;
-      imgObj.onload = () => {
-        imgObj.onload = null;
-        label.textContent = this._getImageDimensionLabel(imgObj.naturalWidth,
-          imgObj.naturalHeight);
+    let addDimensionLabel = options.addDimensionLabel !== false;
+    if (addDimensionLabel) {
+      let label = this.doc.createElement("label");
+      label.classList.add("devtools-tooltip-caption");
+      label.classList.add("theme-comment");
+
+      if (options.naturalWidth && options.naturalHeight) {
+        label.textContent = this._getImageDimensionLabel(options.naturalWidth,
+          options.naturalHeight);
+      } else {
+        // If no dimensions were provided, load the image to get them
+        label.textContent = l10n.strings.GetStringFromName("previewTooltip.image.brokenImage");
+        let imgObj = new this.doc.defaultView.Image();
+        imgObj.src = imageUrl;
+        imgObj.onload = () => {
+          imgObj.onload = null;
+            label.textContent = this._getImageDimensionLabel(imgObj.naturalWidth,
+              imgObj.naturalHeight);
+        }
       }
+
+      vbox.appendChild(label);
     }
-    vbox.appendChild(label);
 
     this.content = vbox;
   },
 
   _getImageDimensionLabel: (w, h) => w + " x " + h,
 
   /**
    * Fill the tooltip with a new instance of the spectrum color picker widget
@@ -772,36 +777,36 @@
     }
   }),
 
   /**
    * Set the content of the tooltip to display a font family preview.
    * This is based on Lea Verou's Dablet. See https://github.com/LeaVerou/dabblet
    * for more info.
    * @param {String} font The font family value.
+   * @param {object} inspectorFront
+   *        The InspectorActor that will used to retrieve the dataURL for the
+   *        font family tooltip contents.
    */
-  setFontFamilyContent: function(font) {
-    if (!font) {
+  setFontFamilyContent: Task.async(function*(font, inspectorFront) {
+    if (!font || !inspectorFront) {
       return;
     }
 
-    // Main container
-    let vbox = this.doc.createElement("vbox");
-    vbox.setAttribute("flex", "1");
+    font = font.replace(/"/g, "'");
+    font = font.replace("!important", "");
+    font = font.trim();
 
-    // Display the font family previewer
-    let previewer = this.doc.createElement("description");
-    previewer.setAttribute("flex", "1");
-    previewer.style.fontFamily = font;
-    previewer.classList.add("devtools-tooltip-font-previewer-text");
-    previewer.textContent = FONT_FAMILY_PREVIEW_TEXT;
-    vbox.appendChild(previewer);
+    let fillStyle = (Services.prefs.getCharPref("devtools.theme") === "light") ?
+      "black" : "white";
 
-    this.content = vbox;
-  }
+    let {data, size} = yield inspectorFront.getFontFamilyDataURL(font, fillStyle);
+    let str = yield data.string();
+    this.setImageContent(str, { addDimensionLabel: false, maxDim: size });
+  })
 };
 
 /**
  * Base class for all (color, gradient, ...)-swatch based value editors inside
  * tooltips
  *
  * @param {XULDocument} doc
  */
diff --git a/browser/devtools/styleinspector/computed-view.js b/browser/devtools/styleinspector/computed-view.js
--- a/browser/devtools/styleinspector/computed-view.js
+++ b/browser/devtools/styleinspector/computed-view.js
@@ -540,18 +540,22 @@
       // Test for css transform
       if (propName.textContent === "transform") {
         return this.tooltip.setCssTransformContent(propValue.textContent,
           this.pageStyle, this.viewedElement);
       }
 
       // Test for font family
       if (propName.textContent === "font-family") {
-        this.tooltip.setFontFamilyContent(propValue.textContent);
-        return true;
+        let prop = propValue.textContent.toLowerCase();
+
+        if (prop !== "inherit" && prop !== "unset" && prop !== "initial") {
+          return this.tooltip.setFontFamilyContent(propValue.textContent,
+            inspector.inspector);
+        }
       }
     }
 
     // If the target isn't one that should receive a tooltip, signal it by rejecting
     // a promise
     return promise.reject();
   },
 
diff --git a/browser/devtools/styleinspector/rule-view.js b/browser/devtools/styleinspector/rule-view.js
--- a/browser/devtools/styleinspector/rule-view.js
+++ b/browser/devtools/styleinspector/rule-view.js
@@ -1207,18 +1207,22 @@
     }
     if (tooltipType === "image") {
       let prop = target.parentNode.textProperty;
       let dim = Services.prefs.getIntPref("devtools.inspector.imagePreviewTooltipSize");
       let uri = CssLogic.getBackgroundImageUriFromProperty(prop.value, prop.rule.domRule.href);
       return this.previewTooltip.setRelativeImageContent(uri, this.inspector.inspector, dim);
     }
     if (tooltipType === "font") {
-      this.previewTooltip.setFontFamilyContent(target.textContent);
-      return true;
+      let prop = target.textContent.toLowerCase();
+
+      if (prop !== "inherit" && prop !== "unset" && prop !== "initial") {
+        return this.previewTooltip.setFontFamilyContent(target.textContent,
+          this.inspector.inspector);
+      }
     }
 
     return false;
   },
 
   /**
    * Update the context menu. This means enabling or disabling menuitems as
    * appropriate.
diff --git a/browser/devtools/styleinspector/test/browser_styleinspector_tooltip-longhand-fontfamily.js b/browser/devtools/styleinspector/test/browser_styleinspector_tooltip-longhand-fontfamily.js
--- a/browser/devtools/styleinspector/test/browser_styleinspector_tooltip-longhand-fontfamily.js
+++ b/browser/devtools/styleinspector/test/browser_styleinspector_tooltip-longhand-fontfamily.js
@@ -24,46 +24,54 @@
   content.document.body.innerHTML = PAGE_CONTENT;
 
   info("Opening the rule view");
   let {toolbox, inspector, view} = yield openRuleView();
 
   info("Selecting the test node");
   yield selectNode("#testElement", inspector);
 
-  yield testRuleView(view);
+  yield testRuleView(view, inspector.inspector);
 
   info("Opening the computed view");
   let {toolbox, inspector, view} = yield openComputedView();
 
-  yield testComputedView(view);
+  yield testComputedView(view, inspector.inspector);
 });
 
-function* testRuleView(ruleView) {
+function* testRuleView(ruleView, inspectorFront) {
   info("Testing font-family tooltips in the rule view");
 
   let panel = ruleView.previewTooltip.panel;
 
   // Check that the rule view has a tooltip and that a XUL panel has been created
   ok(ruleView.previewTooltip, "Tooltip instance exists");
   ok(panel, "XUL panel exists");
 
   // Get the font family property inside the rule view
   let {valueSpan} = getRuleViewProperty(ruleView, "#testElement", "font-family");
 
   // And verify that the tooltip gets shown on this property
   yield assertHoverTooltipOn(ruleView.previewTooltip, valueSpan);
 
-  let description = panel.getElementsByTagName("description")[0];
-  is(description.style.fontFamily, "cursive", "Tooltips contains correct font-family style");
+  let images = panel.getElementsByTagName("image");
+  is(images.length, 1, "Tooltip contains an image");
+  ok(images[0].getAttribute("src").startsWith("data:"), "Tooltip contains a data-uri image as expected");
+
+  let dataURL = yield getFontFamilyDataURL(valueSpan.textContent, inspectorFront);
+  is(images[0].getAttribute("src"), dataURL, "Tooltip contains the correct data-uri image");
 }
 
-function* testComputedView(computedView) {
+function* testComputedView(computedView, inspectorFront) {
   info("Testing font-family tooltips in the computed view");
 
   let panel = computedView.tooltip.panel;
   let {valueSpan} = getComputedViewProperty(computedView, "font-family");
 
   yield assertHoverTooltipOn(computedView.tooltip, valueSpan);
 
-  let description = panel.getElementsByTagName("description")[0];
-  is(description.style.fontFamily, "cursive", "Tooltips contains correct font-family style");
+  let images = panel.getElementsByTagName("image");
+  is(images.length, 1, "Tooltip contains an image");
+  ok(images[0].getAttribute("src").startsWith("data:"), "Tooltip contains a data-uri image as expected");
+
+  let dataURL = yield getFontFamilyDataURL(valueSpan.textContent, inspectorFront);
+  is(images[0].getAttribute("src"), dataURL, "Tooltip contains the correct data-uri image");
 }
diff --git a/browser/devtools/styleinspector/test/browser_styleinspector_tooltip-shorthand-fontfamily.js b/browser/devtools/styleinspector/test/browser_styleinspector_tooltip-shorthand-fontfamily.js
--- a/browser/devtools/styleinspector/test/browser_styleinspector_tooltip-shorthand-fontfamily.js
+++ b/browser/devtools/styleinspector/test/browser_styleinspector_tooltip-shorthand-fontfamily.js
@@ -22,25 +22,25 @@
   content.document.body.innerHTML = PAGE_CONTENT;
 
   info("Opening the rule view");
   let {toolbox, inspector, view} = yield openRuleView();
 
   info("Selecting the test node");
   yield selectNode("#testElement", inspector);
 
-  yield testRuleView(view);
+  yield testRuleView(view, inspector.inspector);
 
   info("Opening the computed view");
   let {toolbox, inspector, view} = yield openComputedView();
 
-  yield testComputedView(view);
+  yield testComputedView(view, inspector.inspector);
 });
 
-function* testRuleView(ruleView) {
+function* testRuleView(ruleView, inspectorFront) {
   info("Testing font-family tooltips in the rule view");
 
   let panel = ruleView.previewTooltip.panel;
 
   // Check that the rule view has a tooltip and that a XUL panel has been created
   ok(ruleView.previewTooltip, "Tooltip instance exists");
   ok(panel, "XUL panel exists");
 
@@ -50,23 +50,31 @@
   fontExpander.click();
 
   let rule = getRuleViewRule(ruleView, "#testElement");
   let valueSpan = rule.querySelector(".ruleview-computed .ruleview-propertyvalue");
 
   // And verify that the tooltip gets shown on this property
   yield assertHoverTooltipOn(ruleView.previewTooltip, valueSpan);
 
-  let description = panel.getElementsByTagName("description")[0];
-  is(description.style.fontFamily, "Arial", "Tooltips contains correct font-family style");
+  let images = panel.getElementsByTagName("image");
+  is(images.length, 1, "Tooltip contains an image");
+  ok(images[0].getAttribute("src").startsWith("data:"), "Tooltip contains a data-uri image as expected");
+
+  let dataURL = yield getFontFamilyDataURL(valueSpan.textContent, inspectorFront);
+  is(images[0].getAttribute("src"), dataURL, "Tooltip contains the correct data-uri image");
 }
 
-function* testComputedView(computedView) {
+function* testComputedView(computedView, inspectorFront) {
   info("Testing font-family tooltips in the computed view");
 
   let panel = computedView.tooltip.panel;
   let {valueSpan} = getComputedViewProperty(computedView, "font-family");
 
   yield assertHoverTooltipOn(computedView.tooltip, valueSpan);
 
-  let description = panel.getElementsByTagName("description")[0];
-  is(description.style.fontFamily, "Arial", "Tooltips contains correct font-family style");
+  let images = panel.getElementsByTagName("image");
+  is(images.length, 1, "Tooltip contains an image");
+  ok(images[0].getAttribute("src").startsWith("data:"), "Tooltip contains a data-uri image as expected");
+
+  let dataURL = yield getFontFamilyDataURL(valueSpan.textContent, inspectorFront);
+  is(images[0].getAttribute("src"), dataURL, "Tooltip contains the correct data-uri image");
 }
diff --git a/browser/devtools/styleinspector/test/head.js b/browser/devtools/styleinspector/test/head.js
--- a/browser/devtools/styleinspector/test/head.js
+++ b/browser/devtools/styleinspector/test/head.js
@@ -756,8 +756,30 @@
           def.resolve(editor);
         });
       }
     });
   });
 
   return def.promise;
 }
+
+/* *********************************************
+ * STYLE-INSPECTOR
+ * *********************************************
+ * Style-inspector related utility functions.
+ */
+
+/**
+ * Get the dataURL for the font family tooltip.
+ * @param {String} font The font family value.
+ * @param {object} inspectorFront
+ *        The InspectorActor that will used to retrieve the dataURL for the
+ *        font family tooltip contents.
+ */
+let getFontFamilyDataURL = Task.async(function*(font, inspectorFront) {
+  let fillStyle = (Services.prefs.getCharPref("devtools.theme") === "light") ?
+      "black" : "white";
+
+  let {data} = yield inspectorFront.getFontFamilyDataURL(font, fillStyle);
+  let dataURL = yield data.string();
+  return dataURL;
+});
diff --git a/browser/themes/shared/devtools/common.css b/browser/themes/shared/devtools/common.css
--- a/browser/themes/shared/devtools/common.css
+++ b/browser/themes/shared/devtools/common.css
@@ -179,24 +179,16 @@
 .devtools-tooltip-simple-text:first-child {
   margin-top: -4px;
 }
 
 .devtools-tooltip-simple-text:last-child {
   margin-bottom: -4px;
 }
 
-/* Tooltip: Font Family Previewer Text */
-.devtools-tooltip-font-previewer-text {
-  max-width: 400px;
-  line-height: 1.5;
-  font-size: 150%;
-  text-align: center;
-}
-
 /* Tooltip: Alert Icon */
 
 .devtools-tooltip-alert-icon {
   width: 32px;
   height: 32px;
   margin: 6px;
   -moz-margin-end: 20px;
 }
diff --git a/browser/themes/shared/devtools/dark-theme.css b/browser/themes/shared/devtools/dark-theme.css
--- a/browser/themes/shared/devtools/dark-theme.css
+++ b/browser/themes/shared/devtools/dark-theme.css
@@ -334,20 +334,16 @@
   }
 }
 
 .theme-tooltip-panel .devtools-tooltip-simple-text {
   color: white;
   border-bottom: 1px solid #434850;
 }
 
-.theme-tooltip-panel .devtools-tooltip-font-previewer-text {
-  color: white;
-}
-
 .theme-tooltip-panel .devtools-tooltip-simple-text:last-child {
   border-bottom: 0;
 }
 
 .devtools-horizontal-splitter {
   border-bottom: 1px solid black;
 }
 
diff --git a/browser/themes/shared/devtools/light-theme.css b/browser/themes/shared/devtools/light-theme.css
--- a/browser/themes/shared/devtools/light-theme.css
+++ b/browser/themes/shared/devtools/light-theme.css
@@ -343,20 +343,16 @@
   }
 }
 
 .theme-tooltip-panel .devtools-tooltip-simple-text {
   color: black;
   border-bottom: 1px solid #d9e1e8;
 }
 
-.theme-tooltip-panel .devtools-tooltip-font-previewer-text {
-  color: black;
-}
-
 .theme-tooltip-panel .devtools-tooltip-simple-text:last-child {
   border-bottom: 0;
 }
 
 .devtools-horizontal-splitter {
   border-bottom: 1px solid #aaa;
 }
 
diff --git a/toolkit/devtools/server/actors/inspector.js b/toolkit/devtools/server/actors/inspector.js
--- a/toolkit/devtools/server/actors/inspector.js
+++ b/toolkit/devtools/server/actors/inspector.js
@@ -58,16 +58,17 @@
 const {Promise: promise} = Cu.import("resource://gre/modules/Promise.jsm", {});
 const object = require("sdk/util/object");
 const events = require("sdk/event/core");
 const {Unknown} = require("sdk/platform/xpcom");
 const {Class} = require("sdk/core/heritage");
 const {PageStyleActor} = require("devtools/server/actors/styles");
 const {HighlighterActor} = require("devtools/server/actors/highlighter");
 
+const FONT_FAMILY_PREVIEW_TEXT = "The quick brown fox jumps over the lazy dog";
 const PSEUDO_CLASSES = [":hover", ":active", ":focus"];
 const HIDDEN_CLASS = "__fx-devtools-hide-shortcut__";
 const XHTML_NS = "http://www.w3.org/1999/xhtml";
 const IMAGE_FETCHING_TIMEOUT = 500;
 // The possible completions to a ':' with added score to give certain values
 // some preference.
 const PSEUDO_SELECTORS = [
   [":active", 1],
@@ -2588,16 +2589,46 @@
     }
 
     img.src = url;
 
     return deferred.promise;
   }, {
     request: {url: Arg(0), maxDim: Arg(1, "nullable:number")},
     response: RetVal("imageData")
+  }),
+
+  /**
+   * Returns a dataURL for the image content of the font family tooltip that is
+   * drawn using a canvas with the given font family name and fill style.
+   */
+  getFontFamilyDataURL: method(function(font, fillStyle) {
+    let doc = this.window.document;
+    let canvas = doc.createElementNS(XHTML_NS, "canvas");
+    let ctx = canvas.getContext("2d");
+    let fontValue = "20px " + font + ", serif";
+
+    // Get the correct preview text measurements and set the canvas dimensions
+    ctx.font = fontValue;
+    let textWidth = ctx.measureText(FONT_FAMILY_PREVIEW_TEXT).width;
+    canvas.width = textWidth * 2;
+    canvas.height = 60;
+
+    ctx.font = fontValue;
+    ctx.fillStyle = fillStyle;
+    ctx.textBaseline = "top";
+    ctx.scale(2, 2);
+    ctx.fillText(FONT_FAMILY_PREVIEW_TEXT, 0, 7);
+
+    let dataURL = canvas.toDataURL();
+
+    return { data: LongStringActor(this.conn, dataURL), size: textWidth };
+  }, {
+    request: {font: Arg(0, "string"), fillStyle: Arg(1, "string")},
+    response: RetVal("imageData")
   })
 });
 
 /**
  * Client side of the inspector actor, which is used to create
  * inspector-related actors, including the walker.
  */
 var InspectorFront = exports.InspectorFront = protocol.FrontClass(InspectorActor, {
