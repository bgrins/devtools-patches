# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1569872125 25200
#      Mon Sep 30 12:35:25 2019 -0700
# Node ID b5c9f6211e01489b6e462498a3abd7fa15f7c967
# Parent  88f87af05c8a5663d5bb5967bddc6e1cd0f0d435
Bug 1550549 - Add test coverage for a http domain in page info security tab

This was missing coverage which would have caught a bug during the development
of the previous patch (https://phabricator.services.mozilla.com/D30537#inline-289837)

Differential Revision: https://phabricator.services.mozilla.com/D47660

diff --git a/browser/base/content/test/pageinfo/browser_pageinfo_security.js b/browser/base/content/test/pageinfo/browser_pageinfo_security.js
--- a/browser/base/content/test/pageinfo/browser_pageinfo_security.js
+++ b/browser/base/content/test/pageinfo/browser_pageinfo_security.js
@@ -5,16 +5,17 @@ ChromeUtils.defineModuleGetter(
 );
 ChromeUtils.defineModuleGetter(
   this,
   "DownloadUtils",
   "resource://gre/modules/DownloadUtils.jsm"
 );
 
 const TEST_ORIGIN = "https://example.com";
+const TEST_HTTP_ORIGIN = "http://example.com";
 const TEST_SUB_ORIGIN = "https://test1.example.com";
 const REMOVE_DIALOG_URL =
   "chrome://browser/content/preferences/siteDataRemoveSelected.xul";
 const TEST_ORIGIN_CERT_ERROR = "https://expired.example.com";
 
 // Test opening the correct certificate information when clicking "Show certificate".
 add_task(async function test_ShowCertificate() {
   SpecialPowers.pushPrefEnv({
@@ -36,25 +37,26 @@ add_task(async function test_ShowCertifi
     },
     false
   );
 
   await pageLoaded;
 
   let pageInfo = BrowserPageInfo(TEST_ORIGIN_CERT_ERROR, "securityTab");
   await BrowserTestUtils.waitForEvent(pageInfo, "load");
-  let securityTab = pageInfo.document.getElementById("securityTab");
+  let pageInfoDoc = pageInfo.document;
+  let securityTab = pageInfoDoc.getElementById("securityTab");
   await TestUtils.waitForCondition(
     () => BrowserTestUtils.is_visible(securityTab),
     "Security tab should be visible."
   );
 
   async function openAboutCertificate() {
     let loaded = BrowserTestUtils.waitForNewTab(gBrowser, null, true);
-    let viewCertButton = pageInfo.document.getElementById("security-view-cert");
+    let viewCertButton = pageInfoDoc.getElementById("security-view-cert");
     await TestUtils.waitForCondition(
       () => BrowserTestUtils.is_visible(viewCertButton),
       "view cert button should be visible."
     );
     viewCertButton.click();
     await loaded;
 
     await ContentTask.spawn(gBrowser.selectedBrowser, null, async function() {
@@ -103,73 +105,109 @@ add_task(async function test_Certificate
     },
     false
   );
 
   await pageLoaded;
 
   let pageInfo = BrowserPageInfo(TEST_ORIGIN_CERT_ERROR, "securityTab");
   await BrowserTestUtils.waitForEvent(pageInfo, "load");
-  let securityTab = pageInfo.document.getElementById("securityTab");
+  let pageInfoDoc = pageInfo.document;
+  let securityTab = pageInfoDoc.getElementById("securityTab");
 
   await TestUtils.waitForCondition(
     () => BrowserTestUtils.is_visible(securityTab),
     "Security tab should be visible."
   );
 
-  let owner = pageInfo.document.getElementById("security-identity-owner-value");
-  let verifier = pageInfo.document.getElementById(
-    "security-identity-verifier-value"
-  );
-  let domain = pageInfo.document.getElementById(
-    "security-identity-domain-value"
-  );
+  let owner = pageInfoDoc.getElementById("security-identity-owner-value");
+  let verifier = pageInfoDoc.getElementById("security-identity-verifier-value");
+  let domain = pageInfoDoc.getElementById("security-identity-domain-value");
 
   await TestUtils.waitForCondition(
     () => owner.value === "This website does not supply ownership information.",
     `Value of owner should be should be "This website does not supply ownership information." instead got "${
       owner.value
     }".`
   );
 
   await TestUtils.waitForCondition(
     () => verifier.value === "Mozilla Testing",
-    `Value of verifier should be "Not specified", instead got "${
+    `Value of verifier should be "Mozilla Testing", instead got "${
       verifier.value
     }".`
   );
 
   await TestUtils.waitForCondition(
     () => domain.value === browser.currentURI.displayHost,
     `Value of domain should be ${
       browser.currentURI.displayHost
     }, instead got "${domain.value}".`
   );
 
   pageInfo.close();
   BrowserTestUtils.removeTab(gBrowser.selectedTab);
 });
 
+// Test displaying website identity information on http pages.
+add_task(async function test_SecurityHTTP() {
+  await BrowserTestUtils.openNewForegroundTab(gBrowser, TEST_HTTP_ORIGIN);
+
+  let pageInfo = BrowserPageInfo(TEST_HTTP_ORIGIN, "securityTab");
+  await BrowserTestUtils.waitForEvent(pageInfo, "load");
+  let pageInfoDoc = pageInfo.document;
+  let securityTab = pageInfoDoc.getElementById("securityTab");
+  await TestUtils.waitForCondition(
+    () => BrowserTestUtils.is_visible(securityTab),
+    "Security tab should be visible."
+  );
+
+  let owner = pageInfoDoc.getElementById("security-identity-owner-value");
+  let verifier = pageInfoDoc.getElementById("security-identity-verifier-value");
+  let domain = pageInfoDoc.getElementById("security-identity-domain-value");
+
+  await TestUtils.waitForCondition(
+    () => owner.value === "This website does not supply ownership information.",
+    `Value of owner should be should be "This website does not supply ownership information." instead got "${
+      owner.value
+    }".`
+  );
+
+  await TestUtils.waitForCondition(
+    () => verifier.value === "Not specified",
+    `Value of verifier should be "Not specified", instead got "${
+      verifier.value
+    }".`
+  );
+
+  await TestUtils.waitForCondition(
+    () => domain.value === gBrowser.selectedBrowser.currentURI.displayHost,
+    `Value of domain should be ${
+      gBrowser.selectedBrowser.currentURI.displayHost
+    }, instead got "${domain.value}".`
+  );
+
+  pageInfo.close();
+  BrowserTestUtils.removeTab(gBrowser.selectedTab);
+});
+
 // Test displaying and removing quota managed data.
 add_task(async function test_SiteData() {
   await SiteDataTestUtils.addToIndexedDB(TEST_ORIGIN);
 
   await BrowserTestUtils.withNewTab(TEST_ORIGIN, async function(browser) {
     let totalUsage = await SiteDataTestUtils.getQuotaUsage(TEST_ORIGIN);
     Assert.greater(totalUsage, 0, "The total usage should not be 0");
 
     let pageInfo = BrowserPageInfo(TEST_ORIGIN, "securityTab");
     await BrowserTestUtils.waitForEvent(pageInfo, "load");
+    let pageInfoDoc = pageInfo.document;
 
-    let label = pageInfo.document.getElementById(
-      "security-privacy-sitedata-value"
-    );
-    let clearButton = pageInfo.document.getElementById(
-      "security-clear-sitedata"
-    );
+    let label = pageInfoDoc.getElementById("security-privacy-sitedata-value");
+    let clearButton = pageInfoDoc.getElementById("security-clear-sitedata");
 
     let size = DownloadUtils.convertByteUnits(totalUsage);
 
     // The usage details are filled asynchronously, so we assert that they're present by
     // waiting for them to be filled in.
     // We only wait for the right unit to appear, since this number is intermittently
     // varying by slight amounts on infra machines.
     await BrowserTestUtils.waitForCondition(
@@ -207,22 +245,20 @@ add_task(async function test_Cookies() {
   SiteDataTestUtils.addToCookies(TEST_ORIGIN, "test1", "1");
   SiteDataTestUtils.addToCookies(TEST_ORIGIN, "test2", "2");
   SiteDataTestUtils.addToCookies(TEST_SUB_ORIGIN, "test1", "1");
 
   await BrowserTestUtils.withNewTab(TEST_ORIGIN, async function(browser) {
     let pageInfo = BrowserPageInfo(TEST_ORIGIN, "securityTab");
     await BrowserTestUtils.waitForEvent(pageInfo, "load");
 
-    let label = pageInfo.document.getElementById(
-      "security-privacy-sitedata-value"
-    );
-    let clearButton = pageInfo.document.getElementById(
-      "security-clear-sitedata"
-    );
+    let pageInfoDoc = pageInfo.document;
+
+    let label = pageInfoDoc.getElementById("security-privacy-sitedata-value");
+    let clearButton = pageInfoDoc.getElementById("security-clear-sitedata");
 
     // The usage details are filled asynchronously, so we assert that they're present by
     // waiting for them to be filled in.
     await BrowserTestUtils.waitForCondition(
       () => label.textContent.includes("cookies"),
       "Should show cookies in the security section."
     );
 
