# HG changeset patch
# User Tom Tromey <tromey@mozilla.com>

Bug 1154809 - rewrite tokenizeComputedFilter to use cssTokenizer; r=pbrosset

diff --git a/browser/devtools/shared/test/browser_filter-editor-01.js b/browser/devtools/shared/test/browser_filter-editor-01.js
index c63a61e..bfcf4c5 100644
--- a/browser/devtools/shared/test/browser_filter-editor-01.js
+++ b/browser/devtools/shared/test/browser_filter-editor-01.js
@@ -24,12 +24,12 @@ add_task(function *() {
   widget.setCssValue("blur(   2px  )   contrast(  2  )");
   is(widget.getCssValue(),
      "blur(2px) contrast(200%)", "setCssValue should work for spaced values");
 
   info("Test parsing of string-typed values");
   widget.setCssValue("drop-shadow( 2px  1px 5px black) url( example.svg#filter )");
 
   const computedURI = "chrome://browser/content/devtools/example.svg#filter";
-  const expected = `drop-shadow(rgb(0, 0, 0) 2px 1px 5px) url("${computedURI}")`;
+  const expected = `drop-shadow(rgb(0, 0, 0) 2px 1px 5px) url(${computedURI})`;
   is(widget.getCssValue(), expected,
      "setCssValue should work for string-typed values");
 });
diff --git a/browser/devtools/shared/test/browser_filter-editor-02.js b/browser/devtools/shared/test/browser_filter-editor-02.js
index 9ff2c5d..a673d78 100644
--- a/browser/devtools/shared/test/browser_filter-editor-02.js
+++ b/browser/devtools/shared/test/browser_filter-editor-02.js
@@ -42,17 +42,17 @@ add_task(function*() {
         }
       ]
     },
     {
       cssValue: "url(example.svg)",
       expected: [
         {
           label: "url",
-          value: "\"chrome://browser/content/devtools/example.svg\"",
+          value: "chrome://browser/content/devtools/example.svg",
           unit: null
         }
       ]
     },
     {
       cssValue: "none",
       expected: []
     }
diff --git a/browser/devtools/shared/test/browser_filter-editor-05.js b/browser/devtools/shared/test/browser_filter-editor-05.js
index 3227a5e..b6423f8 100644
--- a/browser/devtools/shared/test/browser_filter-editor-05.js
+++ b/browser/devtools/shared/test/browser_filter-editor-05.js
@@ -122,11 +122,11 @@ add_task(function*() {
      "Label-dragging should not work for string-type filters");
 
   widget._mouseMove({
     pageX: -11,
     altKey: false,
     shiftKey: true
   });
 
-  is(widget.getValueAt(1), "\"chrome://browser/content/devtools/test.svg\"",
+  is(widget.getValueAt(1), "chrome://browser/content/devtools/test.svg",
      "Label-dragging on string-type filters shouldn't affect their value");
 });
diff --git a/browser/devtools/shared/widgets/FilterWidget.js b/browser/devtools/shared/widgets/FilterWidget.js
index 8d35d25..2174004 100644
--- a/browser/devtools/shared/widgets/FilterWidget.js
+++ b/browser/devtools/shared/widgets/FilterWidget.js
@@ -9,16 +9,17 @@
   * for Rule View's filter swatches
   */
 
 const EventEmitter = require("devtools/toolkit/event-emitter");
 const { Cu } = require("chrome");
 const { ViewHelpers } = Cu.import("resource:///modules/devtools/ViewHelpers.jsm", {});
 const STRINGS_URI = "chrome://browser/locale/devtools/filterwidget.properties";
 const L10N = new ViewHelpers.L10N(STRINGS_URI);
+const {cssTokenizer} = require("devtools/sourceeditor/css-tokenizer");
 
 const DEFAULT_FILTER_TYPE = "length";
 const UNIT_MAPPING = {
   percentage: "%",
   length: "px",
   angle: "deg",
   string: ""
 };
@@ -745,51 +746,56 @@ function swapArrayIndices(array, a, b) {
   *
   * @param {String} css
   *        CSS Filter value to be parsed
   * @return {Array}
   *        An array of {name, value} pairs
   */
 function tokenizeComputedFilter(css) {
   let filters = [];
-  let current = "";
   let depth = 0;
 
   if (css === "none") {
     return filters;
   }
 
-  while (css.length) {
-    const char = css[0];
+  let state = "initial";
+  let name;
+  let contents;
+  for (let token of cssTokenizer(css)) {
+    switch (state) {
+      case "initial":
+        if (token.tokenType === "function") {
+          name = token.text;
+          contents = "";
+          state = "function";
+          depth = 1;
+        } else if (token.tokenType === "url" || token.tokenType === "bad_url") {
+          filters.push({name: "url", value: token.text});
+          // Leave state as "initial" because the URL token includes
+          // the trailing close paren.
+        }
+        break;
 
-    switch (char) {
-      case "(":
-        depth++;
-        if (depth === 1) {
-          filters.push({name: current.trim()});
-          current = "";
-        } else {
-          current += char;
+      case "function":
+        if (token.tokenType === "symbol" && token.text === ")") {
+          --depth;
+          if (depth === 0) {
+            filters.push({name: name, value: contents});
+            state = "initial";
+            break;
+          }
         }
-      break;
-      case ")":
-        depth--;
-        if (depth === 0) {
-          filters[filters.length - 1].value = current.trim();
-          current = "";
-        } else {
-          current += char;
+        contents += css.substring(token.startOffset, token.endOffset);
+        if (token.tokenType === "function" ||
+            (token.tokenType === "symbol" && token.text === "(")) {
+          ++depth;
         }
-      break;
-      default:
-        current += char;
-      break;
+        break;
     }
-
-    css = css.slice(1);
   }
 
   return filters;
 }
 
 /**
   * Finds neighbour number characters of an index in a string
   * the numbers may be floats (containing dots)
