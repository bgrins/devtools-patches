# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  2903b0280572ec549faf5f4a29b728b6543336df
Bug 1234604: Use add_task instead of asyncTest;r=jryans

diff --git a/devtools/client/webconsole/test/browser_bug1045902_console_csp_ignore_reflected_xss_message.js b/devtools/client/webconsole/test/browser_bug1045902_console_csp_ignore_reflected_xss_message.js
--- a/devtools/client/webconsole/test/browser_bug1045902_console_csp_ignore_reflected_xss_message.js
+++ b/devtools/client/webconsole/test/browser_bug1045902_console_csp_ignore_reflected_xss_message.js
@@ -18,17 +18,17 @@ const TEST_FILE = "http://example.com/br
                   "test/test_bug1045902_console_csp_ignore_reflected_xss_" +
                   "message.html";
 
 var hud = undefined;
 
 var TEST_URI = "data:text/html;charset=utf8,Web Console CSP ignoring " +
                "reflected XSS (bug 1045902)";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   let { browser } = yield loadTab(TEST_URI);
 
   hud = yield openConsole();
 
   yield loadDocument(browser);
   yield testViolationMessage();
 
   hud = null;
diff --git a/devtools/client/webconsole/test/browser_bug664688_sandbox_update_after_navigation.js b/devtools/client/webconsole/test/browser_bug664688_sandbox_update_after_navigation.js
--- a/devtools/client/webconsole/test/browser_bug664688_sandbox_update_after_navigation.js
+++ b/devtools/client/webconsole/test/browser_bug664688_sandbox_update_after_navigation.js
@@ -4,17 +4,17 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 // Tests if the JSTerm sandbox is updated when the user navigates from one
 // domain to another, in order to avoid permission denied errors with a sandbox
 // created for a different origin.
 
 "use strict";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   const TEST_URI1 = "http://example.com/browser/devtools/client/webconsole/" +
                     "test/test-console.html";
   const TEST_URI2 = "http://example.org/browser/devtools/client/webconsole/" +
                     "test/test-console.html";
 
   yield loadTab(TEST_URI1);
   let hud = yield openConsole();
 
diff --git a/devtools/client/webconsole/test/browser_bug_638949_copy_link_location.js b/devtools/client/webconsole/test/browser_bug_638949_copy_link_location.js
--- a/devtools/client/webconsole/test/browser_bug_638949_copy_link_location.js
+++ b/devtools/client/webconsole/test/browser_bug_638949_copy_link_location.js
@@ -3,17 +3,17 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 // Test for the "Copy link location" context menu item shown when you right
 // click network requests in the output.
 
 "use strict";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
     "test/test-console.html?_date=" + Date.now();
   const COMMAND_NAME = "consoleCmd_copyURL";
   const CONTEXT_MENU_ID = "#menu_copyURL";
 
   registerCleanupFunction(() => {
     Services.prefs.clearUserPref("devtools.webconsole.filter.networkinfo");
   });
diff --git a/devtools/client/webconsole/test/browser_bug_862916_console_dir_and_filter_off.js b/devtools/client/webconsole/test/browser_bug_862916_console_dir_and_filter_off.js
--- a/devtools/client/webconsole/test/browser_bug_862916_console_dir_and_filter_off.js
+++ b/devtools/client/webconsole/test/browser_bug_862916_console_dir_and_filter_off.js
@@ -4,17 +4,17 @@
  */
 
 // Check that the output for console.dir() works even if Logging filter is off.
 
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf8,<p>test for bug 862916";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
   let hud = yield openConsole();
 
   ok(hud, "web console opened");
 
   hud.setFilterState("log", false);
   registerCleanupFunction(() => hud.setFilterState("log", true));
 
diff --git a/devtools/client/webconsole/test/browser_bug_865288_repeat_different_objects.js b/devtools/client/webconsole/test/browser_bug_865288_repeat_different_objects.js
--- a/devtools/client/webconsole/test/browser_bug_865288_repeat_different_objects.js
+++ b/devtools/client/webconsole/test/browser_bug_865288_repeat_different_objects.js
@@ -6,17 +6,17 @@
 // Test that makes sure messages are not considered repeated when console.log()
 // is invoked with different objects, see bug 865288.
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-repeated-messages.html";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
   let hud = yield openConsole();
 
   info("waiting for 3 console.log objects");
 
   hud.jsterm.clearOutput(true);
   hud.jsterm.execute("window.testConsoleObjects()");
 
diff --git a/devtools/client/webconsole/test/browser_bug_869003_inspect_cross_domain_object.js b/devtools/client/webconsole/test/browser_bug_869003_inspect_cross_domain_object.js
--- a/devtools/client/webconsole/test/browser_bug_869003_inspect_cross_domain_object.js
+++ b/devtools/client/webconsole/test/browser_bug_869003_inspect_cross_domain_object.js
@@ -6,17 +6,17 @@
 // Check that users can inspect objects logged from cross-domain iframes -
 // bug 869003.
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-bug-869003-top-window.html";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   // This test is slightly more involved: it opens the web console, then the
   // variables view for a given object, it updates a property in the view and
   // checks the result. We can get a timeout with debug builds on slower
   // machines.
   requestLongerTimeout(2);
 
   yield loadTab("data:text/html;charset=utf8,<p>hello");
   let hud = yield openConsole();
diff --git a/devtools/client/webconsole/test/browser_bug_871156_ctrlw_close_tab.js b/devtools/client/webconsole/test/browser_bug_871156_ctrlw_close_tab.js
--- a/devtools/client/webconsole/test/browser_bug_871156_ctrlw_close_tab.js
+++ b/devtools/client/webconsole/test/browser_bug_871156_ctrlw_close_tab.js
@@ -3,17 +3,17 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
 // Check that Ctrl-W closes the Browser Console and that Ctrl-W closes the
 // current tab when using the Web Console - bug 871156.
 
 "use strict";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   const TEST_URI = "data:text/html;charset=utf8,<title>bug871156</title>\n" +
                    "<p>hello world";
   let firstTab = gBrowser.selectedTab;
 
   Services.prefs.setBoolPref("browser.tabs.animate", false);
   registerCleanupFunction(() => {
     Services.prefs.clearUserPref("browser.tabs.animate");
   });
diff --git a/devtools/client/webconsole/test/browser_console.js b/devtools/client/webconsole/test/browser_console.js
--- a/devtools/client/webconsole/test/browser_console.js
+++ b/devtools/client/webconsole/test/browser_console.js
@@ -12,17 +12,17 @@ const TEST_URI = "http://example.com/bro
 
 const TEST_XHR_ERROR_URI = `http://example.com/404.html?${Date.now()}`;
 
 const TEST_IMAGE = "http://example.com/browser/devtools/client/webconsole/" +
                    "test/test-image.png";
 
 "use strict";
 
-var test = asyncTest(function*() {
+add_task(function*() {
   yield loadTab(TEST_URI);
 
   let opened = waitForConsole();
 
   let hud = HUDService.getBrowserConsole();
   ok(!hud, "browser console is not open");
   info("wait for the browser console to open with ctrl-shift-j");
   EventUtils.synthesizeKey("j", { accelKey: true, shiftKey: true }, window);
diff --git a/devtools/client/webconsole/test/browser_console_clear_on_reload.js b/devtools/client/webconsole/test/browser_console_clear_on_reload.js
--- a/devtools/client/webconsole/test/browser_console_clear_on_reload.js
+++ b/devtools/client/webconsole/test/browser_console_clear_on_reload.js
@@ -3,17 +3,17 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
 // Check that clear output on page reload works - bug 705921.
 // Check that clear output and page reload remove the sidebar - bug 971967.
 
 "use strict";
 
-var test = asyncTest(function*() {
+add_task(function*() {
   const PREF = "devtools.webconsole.persistlog";
   const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                    "test/test-console.html";
 
   Services.prefs.setBoolPref(PREF, false);
   registerCleanupFunction(() => Services.prefs.clearUserPref(PREF));
 
   yield loadTab(TEST_URI);
diff --git a/devtools/client/webconsole/test/browser_console_click_focus.js b/devtools/client/webconsole/test/browser_console_click_focus.js
--- a/devtools/client/webconsole/test/browser_console_click_focus.js
+++ b/devtools/client/webconsole/test/browser_console_click_focus.js
@@ -5,17 +5,17 @@
 
 // Tests that the input field is focused when the console is opened.
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-console.html";
 
-var test = asyncTest(function*() {
+add_task(function*() {
   yield loadTab(TEST_URI);
   let hud = yield openConsole();
 
   let [result] = yield waitForMessages({
     webconsole: hud,
     messages: [{
       text: "Dolske Digs Bacon",
       category: CATEGORY_WEBDEV,
diff --git a/devtools/client/webconsole/test/browser_console_filters.js b/devtools/client/webconsole/test/browser_console_filters.js
--- a/devtools/client/webconsole/test/browser_console_filters.js
+++ b/devtools/client/webconsole/test/browser_console_filters.js
@@ -7,17 +7,17 @@
 // Console. See bug 878186.
 
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf8,<p>browser console filters";
 const WEB_CONSOLE_PREFIX = "devtools.webconsole.filter.";
 const BROWSER_CONSOLE_PREFIX = "devtools.browserconsole.filter.";
 
-var test = asyncTest(function*() {
+add_task(function*() {
   yield loadTab(TEST_URI);
 
   info("open the web console");
   let hud = yield openConsole();
   ok(hud, "web console opened");
 
   is(Services.prefs.getBoolPref(BROWSER_CONSOLE_PREFIX + "exception"), true,
      "'exception' filter is enabled (browser console)");
diff --git a/devtools/client/webconsole/test/browser_console_history_persist.js b/devtools/client/webconsole/test/browser_console_history_persist.js
--- a/devtools/client/webconsole/test/browser_console_history_persist.js
+++ b/devtools/client/webconsole/test/browser_console_history_persist.js
@@ -7,17 +7,17 @@
 // See Bug 943306.
 
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf-8,Web Console test for " +
                  "persisting history - bug 943306";
 const INPUT_HISTORY_COUNT = 10;
 
-var test = asyncTest(function* () {
+add_task(function* () {
   info("Setting custom input history pref to " + INPUT_HISTORY_COUNT);
   Services.prefs.setIntPref("devtools.webconsole.inputHistoryCount",
                             INPUT_HISTORY_COUNT);
 
   // First tab: run a bunch of commands and then make sure that you can
   // navigate through their history.
   yield loadTab(TEST_URI);
   let hud1 = yield openConsole();
diff --git a/devtools/client/webconsole/test/browser_console_keyboard_accessibility.js b/devtools/client/webconsole/test/browser_console_keyboard_accessibility.js
--- a/devtools/client/webconsole/test/browser_console_keyboard_accessibility.js
+++ b/devtools/client/webconsole/test/browser_console_keyboard_accessibility.js
@@ -2,17 +2,17 @@
  * Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
 // Check that basic keyboard shortcuts work in the web console.
 
 "use strict";
 
-var test = asyncTest(function*() {
+add_task(function*() {
   const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                    "test/test-console.html";
 
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
   ok(hud, "Web Console opened");
 
diff --git a/devtools/client/webconsole/test/browser_console_log_inspectable_object.js b/devtools/client/webconsole/test/browser_console_log_inspectable_object.js
--- a/devtools/client/webconsole/test/browser_console_log_inspectable_object.js
+++ b/devtools/client/webconsole/test/browser_console_log_inspectable_object.js
@@ -1,17 +1,17 @@
 /* vim:set ts=2 sw=2 sts=2 et: */
 /* Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/ */
 
 // Test that objects given to console.log() are inspectable.
 
 "use strict";
 
-var test = asyncTest(function*() {
+add_task(function*() {
   yield loadTab("data:text/html;charset=utf8,test for bug 676722 - " +
                 "inspectable objects for window.console");
 
   let hud = yield openConsole();
   hud.jsterm.clearOutput(true);
 
   hud.jsterm.execute("myObj = {abba: 'omgBug676722'}");
   hud.jsterm.execute("console.log('fooBug676722', myObj)");
diff --git a/devtools/client/webconsole/test/browser_console_native_getters.js b/devtools/client/webconsole/test/browser_console_native_getters.js
--- a/devtools/client/webconsole/test/browser_console_native_getters.js
+++ b/devtools/client/webconsole/test/browser_console_native_getters.js
@@ -6,17 +6,17 @@
 // Check that native getters and setters for DOM elements work as expected in
 // variables view - bug 870220.
 
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf8,<title>bug870220</title>\n" +
                  "<p>hello world\n<p>native getters!";
 
-var test = asyncTest(function*() {
+add_task(function*() {
   yield loadTab(TEST_URI);
   let hud = yield openConsole();
   let jsterm = hud.jsterm;
 
   jsterm.execute("document");
 
   let [result] = yield waitForMessages({
     webconsole: hud,
diff --git a/devtools/client/webconsole/test/browser_console_navigation_marker.js b/devtools/client/webconsole/test/browser_console_navigation_marker.js
--- a/devtools/client/webconsole/test/browser_console_navigation_marker.js
+++ b/devtools/client/webconsole/test/browser_console_navigation_marker.js
@@ -8,17 +8,17 @@
 "use strict";
 
 const PREF = "devtools.webconsole.persistlog";
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-console.html";
 
 var hud;
 
-var test = asyncTest(function* () {
+add_task(function* () {
   Services.prefs.setBoolPref(PREF, true);
 
   let { browser } = yield loadTab(TEST_URI);
   hud = yield openConsole();
 
   yield consoleOpened();
 
   let loaded = loadBrowser(browser);
diff --git a/devtools/client/webconsole/test/browser_console_open_or_focus.js b/devtools/client/webconsole/test/browser_console_open_or_focus.js
--- a/devtools/client/webconsole/test/browser_console_open_or_focus.js
+++ b/devtools/client/webconsole/test/browser_console_open_or_focus.js
@@ -5,17 +5,17 @@
 
 // Test that the "browser console" menu item opens or focuses (if already open)
 // the console window instead of toggling it open/close.
 
 "use strict";
 
 var {Tools} = require("devtools/client/definitions");
 
-var test = asyncTest(function* () {
+add_task(function* () {
   let currWindow, hud, mainWindow;
 
   mainWindow = Services.wm.getMostRecentWindow(null);
 
   yield HUDService.openBrowserConsoleOrFocus();
 
   hud = HUDService.getBrowserConsole();
 
diff --git a/devtools/client/webconsole/test/browser_console_server_logging.js b/devtools/client/webconsole/test/browser_console_server_logging.js
--- a/devtools/client/webconsole/test/browser_console_server_logging.js
+++ b/devtools/client/webconsole/test/browser_console_server_logging.js
@@ -1,17 +1,17 @@
 /* vim:set ts=2 sw=2 sts=2 et: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 // Check that server log appears in the console panel - bug 1168872
-var test = asyncTest(function* () {
+add_task(function* () {
   const TEST_URI = "http://example.com/browser/devtools/client/webconsole/test/test-console-server-logging.sjs";
 
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   // Set logging filter and wait till it's set on the backend
   hud.setFilterState("serverlog", true);
diff --git a/devtools/client/webconsole/test/browser_console_variables_view.js b/devtools/client/webconsole/test/browser_console_variables_view.js
--- a/devtools/client/webconsole/test/browser_console_variables_view.js
+++ b/devtools/client/webconsole/test/browser_console_variables_view.js
@@ -9,17 +9,17 @@
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-eval-in-stackframe.html";
 
 var gWebConsole, gJSTerm, gVariablesView;
 
 var hud;
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   hud = yield openConsole();
 
   gWebConsole = hud;
   gJSTerm = hud.jsterm;
   let msg = yield gJSTerm.execute("fooObj");
 
diff --git a/devtools/client/webconsole/test/browser_console_variables_view_filter.js b/devtools/client/webconsole/test/browser_console_variables_view_filter.js
--- a/devtools/client/webconsole/test/browser_console_variables_view_filter.js
+++ b/devtools/client/webconsole/test/browser_console_variables_view_filter.js
@@ -15,17 +15,17 @@ function props(view, prefix = "") {
                    return list.concat(props(prop, prefix + id + "."));
                  }, []);
 }
 
 function assertAttrs(view, expected, message) {
   is(props(view).join(","), expected, message);
 }
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab("data:text/html;charset=utf-8,webconsole-filter");
 
   let hud = yield openConsole();
 
   let jsterm = hud.jsterm;
 
   let fetched = jsterm.once("variablesview-fetched");
 
diff --git a/devtools/client/webconsole/test/browser_console_variables_view_special_names.js b/devtools/client/webconsole/test/browser_console_variables_view_special_names.js
--- a/devtools/client/webconsole/test/browser_console_variables_view_special_names.js
+++ b/devtools/client/webconsole/test/browser_console_variables_view_special_names.js
@@ -5,17 +5,17 @@
 
 // Check that variables view handles special names like "<return>"
 // properly for ordinary displays.
 
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf8,<p>test for bug 1084430";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
   let hud = yield openConsole();
 
   ok(hud, "web console opened");
 
   hud.setFilterState("log", false);
   registerCleanupFunction(() => hud.setFilterState("log", true));
 
diff --git a/devtools/client/webconsole/test/browser_eval_in_debugger_stackframe2.js b/devtools/client/webconsole/test/browser_eval_in_debugger_stackframe2.js
--- a/devtools/client/webconsole/test/browser_eval_in_debugger_stackframe2.js
+++ b/devtools/client/webconsole/test/browser_eval_in_debugger_stackframe2.js
@@ -6,17 +6,17 @@
 // Test to make sure that web console commands can fire while paused at a
 // breakpoint that was triggered from a JS call.  Relies on asynchronous js
 // evaluation over the protocol - see Bug 1088861.
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-eval-in-stackframe.html";
-var test = asyncTest(function*() {
+add_task(function*() {
   yield loadTab(TEST_URI);
 
   info("open the web console");
   let hud = yield openConsole();
   let {jsterm} = hud;
 
   info("open the debugger");
   let {panelWin} = yield openDebugger();
diff --git a/devtools/client/webconsole/test/browser_jsterm_inspect.js b/devtools/client/webconsole/test/browser_jsterm_inspect.js
--- a/devtools/client/webconsole/test/browser_jsterm_inspect.js
+++ b/devtools/client/webconsole/test/browser_jsterm_inspect.js
@@ -4,17 +4,17 @@
  */
 
 // Check that the inspect() jsterm helper function works.
 
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf8,<p>hello bug 869981";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
   let jsterm = hud.jsterm;
 
   jsterm.execute("testProp = 'testValue'");
 
   let fetched = jsterm.once("variablesview-fetched");
diff --git a/devtools/client/webconsole/test/browser_longstring_hang.js b/devtools/client/webconsole/test/browser_longstring_hang.js
--- a/devtools/client/webconsole/test/browser_longstring_hang.js
+++ b/devtools/client/webconsole/test/browser_longstring_hang.js
@@ -4,17 +4,17 @@
 
 // Test that very long strings do not hang the browser.
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-bug-859170-longstring-hang.html";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   info("wait for the initial long string");
 
   let results = yield waitForMessages({
     webconsole: hud,
diff --git a/devtools/client/webconsole/test/browser_output_breaks_after_console_dir_uninspectable.js b/devtools/client/webconsole/test/browser_output_breaks_after_console_dir_uninspectable.js
--- a/devtools/client/webconsole/test/browser_output_breaks_after_console_dir_uninspectable.js
+++ b/devtools/client/webconsole/test/browser_output_breaks_after_console_dir_uninspectable.js
@@ -4,17 +4,17 @@
 
 // Make sure that the Web Console output does not break after we try to call
 // console.dir() for objects that are not inspectable.
 
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf8,test for bug 773466";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   hud.jsterm.clearOutput(true);
 
   hud.jsterm.execute("console.log('fooBug773466a')");
   hud.jsterm.execute("myObj = Object.create(null)");
diff --git a/devtools/client/webconsole/test/browser_output_longstring_expand.js b/devtools/client/webconsole/test/browser_output_longstring_expand.js
--- a/devtools/client/webconsole/test/browser_output_longstring_expand.js
+++ b/devtools/client/webconsole/test/browser_output_longstring_expand.js
@@ -4,17 +4,17 @@
 
 // Test that long strings can be expanded in the console output.
 
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf8,test for bug 787981 - check " +
                  "that long strings can be expanded in the output.";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   let { DebuggerServer } = require("devtools/server/main");
 
   let longString = (new Array(DebuggerServer.LONG_STRING_LENGTH + 4))
                     .join("a") + "foobar";
   let initialString =
     longString.substring(0, DebuggerServer.LONG_STRING_INITIAL_LENGTH);
 
   yield loadTab(TEST_URI);
diff --git a/devtools/client/webconsole/test/browser_repeated_messages_accuracy.js b/devtools/client/webconsole/test/browser_repeated_messages_accuracy.js
--- a/devtools/client/webconsole/test/browser_repeated_messages_accuracy.js
+++ b/devtools/client/webconsole/test/browser_repeated_messages_accuracy.js
@@ -9,17 +9,17 @@
 // See bugs 720180 and 800510.
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-repeated-messages.html";
 const PREF = "devtools.webconsole.persistlog";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   Services.prefs.setBoolPref(PREF, true);
 
   let { browser } = yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   yield consoleOpened(hud);
 
diff --git a/devtools/client/webconsole/test/browser_result_format_as_string.js b/devtools/client/webconsole/test/browser_result_format_as_string.js
--- a/devtools/client/webconsole/test/browser_result_format_as_string.js
+++ b/devtools/client/webconsole/test/browser_result_format_as_string.js
@@ -4,17 +4,17 @@
 
 // Make sure that JS eval result are properly formatted as strings.
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-result-format-as-string.html";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   hud.jsterm.clearOutput(true);
 
   let msg = yield execute(hud, "document.querySelector('p')");
 
diff --git a/devtools/client/webconsole/test/browser_warn_user_about_replaced_api.js b/devtools/client/webconsole/test/browser_warn_user_about_replaced_api.js
--- a/devtools/client/webconsole/test/browser_warn_user_about_replaced_api.js
+++ b/devtools/client/webconsole/test/browser_warn_user_about_replaced_api.js
@@ -6,17 +6,17 @@
 "use strict";
 
 const TEST_REPLACED_API_URI = "http://example.com/browser/devtools/client/" +
                               "webconsole/test/test-console-replaced-api.html";
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/testscript.js";
 const PREF = "devtools.webconsole.persistlog";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   Services.prefs.setBoolPref(PREF, true);
 
   let { browser } = yield loadTab(TEST_URI);
   let hud = yield openConsole();
 
   yield testWarningNotPresent(hud);
 
   let loaded = loadBrowser(browser);
diff --git a/devtools/client/webconsole/test/browser_webconsole_allow_mixedcontent_securityerrors.js b/devtools/client/webconsole/test/browser_webconsole_allow_mixedcontent_securityerrors.js
--- a/devtools/client/webconsole/test/browser_webconsole_allow_mixedcontent_securityerrors.js
+++ b/devtools/client/webconsole/test/browser_webconsole_allow_mixedcontent_securityerrors.js
@@ -11,17 +11,17 @@
 
 "use strict";
 
 const TEST_URI = "https://example.com/browser/devtools/client/webconsole/" +
                  "test/test-mixedcontent-securityerrors.html";
 const LEARN_MORE_URI = "https://developer.mozilla.org/docs/Security/" +
                        "MixedContent";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield pushPrefEnv();
 
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   let results = yield waitForMessages({
     webconsole: hud,
diff --git a/devtools/client/webconsole/test/browser_webconsole_assert.js b/devtools/client/webconsole/test/browser_webconsole_assert.js
--- a/devtools/client/webconsole/test/browser_webconsole_assert.js
+++ b/devtools/client/webconsole/test/browser_webconsole_assert.js
@@ -5,17 +5,17 @@
 // Test that console.assert() works as expected (i.e. outputs only on falsy
 // asserts). See bug 760193.
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-console-assert.html";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
   yield consoleOpened(hud);
 });
 
 function consoleOpened(hud) {
   hud.jsterm.execute("test()");
diff --git a/devtools/client/webconsole/test/browser_webconsole_autocomplete-properties-with-non-alphanumeric-names.js b/devtools/client/webconsole/test/browser_webconsole_autocomplete-properties-with-non-alphanumeric-names.js
--- a/devtools/client/webconsole/test/browser_webconsole_autocomplete-properties-with-non-alphanumeric-names.js
+++ b/devtools/client/webconsole/test/browser_webconsole_autocomplete-properties-with-non-alphanumeric-names.js
@@ -4,17 +4,17 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
 "use strict";
 
 // Test that properties starting with underscores or dollars can be
 // autocompleted (bug 967468).
 
-var test = asyncTest(function*() {
+add_task(function*() {
   const TEST_URI = "data:text/html;charset=utf8,test autocompletion with " +
                    "$ or _";
   yield loadTab(TEST_URI);
 
   function* autocomplete(term) {
     let deferred = promise.defer();
 
     jsterm.setInputValue(term);
diff --git a/devtools/client/webconsole/test/browser_webconsole_autocomplete_and_selfxss.js b/devtools/client/webconsole/test/browser_webconsole_autocomplete_and_selfxss.js
--- a/devtools/client/webconsole/test/browser_webconsole_autocomplete_and_selfxss.js
+++ b/devtools/client/webconsole/test/browser_webconsole_autocomplete_and_selfxss.js
@@ -6,17 +6,17 @@
 
 const TEST_URI = "data:text/html;charset=utf-8,<p>test for bug 642615";
 
 XPCOMUtils.defineLazyServiceGetter(this, "clipboardHelper",
                                    "@mozilla.org/widget/clipboardhelper;1",
                                    "nsIClipboardHelper");
 var WebConsoleUtils = require("devtools/shared/webconsole/utils").Utils;
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   yield consoleOpened(hud);
 });
 
 function consoleOpened(HUD) {
diff --git a/devtools/client/webconsole/test/browser_webconsole_autocomplete_popup_close_on_tab_switch.js b/devtools/client/webconsole/test/browser_webconsole_autocomplete_popup_close_on_tab_switch.js
--- a/devtools/client/webconsole/test/browser_webconsole_autocomplete_popup_close_on_tab_switch.js
+++ b/devtools/client/webconsole/test/browser_webconsole_autocomplete_popup_close_on_tab_switch.js
@@ -5,17 +5,17 @@
 
 // Test that the autocomplete popup closes on switching tabs. See bug 900448.
 
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf-8,<p>bug 900448 - autocomplete " +
                  "popup closes on tab switch";
 
-var test = asyncTest(function*() {
+add_task(function*() {
   yield loadTab(TEST_URI);
   let hud = yield openConsole();
   let popup = hud.jsterm.autocompletePopup;
   let popupShown = onPopupShown(popup._panel);
 
   hud.jsterm.setInputValue("sc");
   EventUtils.synthesizeKey("r", {});
 
diff --git a/devtools/client/webconsole/test/browser_webconsole_basic_net_logging.js b/devtools/client/webconsole/test/browser_webconsole_basic_net_logging.js
--- a/devtools/client/webconsole/test/browser_webconsole_basic_net_logging.js
+++ b/devtools/client/webconsole/test/browser_webconsole_basic_net_logging.js
@@ -7,17 +7,17 @@
 // loaded
 
 "use strict";
 
 const TEST_NETWORK_URI = "http://example.com/browser/devtools/client/" +
                          "webconsole/test/test-network.html" + "?_date=" +
                          Date.now();
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab("data:text/html;charset=utf-8,Web Console basic network " +
                 "logging test");
   let hud = yield openConsole();
 
   content.location = TEST_NETWORK_URI;
 
   yield waitForMessages({
     webconsole: hud,
diff --git a/devtools/client/webconsole/test/browser_webconsole_block_mixedcontent_securityerrors.js b/devtools/client/webconsole/test/browser_webconsole_block_mixedcontent_securityerrors.js
--- a/devtools/client/webconsole/test/browser_webconsole_block_mixedcontent_securityerrors.js
+++ b/devtools/client/webconsole/test/browser_webconsole_block_mixedcontent_securityerrors.js
@@ -14,17 +14,17 @@
 
 "use strict";
 
 const TEST_URI = "https://example.com/browser/devtools/client/webconsole/" +
                  "test/test-mixedcontent-securityerrors.html";
 const LEARN_MORE_URI = "https://developer.mozilla.org/docs/Security/" +
                        "MixedContent";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield pushPrefEnv();
 
   let { browser } = yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   let results = yield waitForMessages({
     webconsole: hud,
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_1010953_cspro.js b/devtools/client/webconsole/test/browser_webconsole_bug_1010953_cspro.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_1010953_cspro.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_1010953_cspro.js
@@ -26,17 +26,17 @@ const CSP_VIOLATION_MSG = "Content Secur
                           "http://some.example.com/test.png " +
                           "(\"img-src http://example.com\").";
 const CSP_REPORT_MSG = "Content Security Policy: The page\'s settings " +
                        "observed the loading of a resource at " +
                        "http://some.example.com/test_bug_1010953_cspro.js " +
                        "(\"script-src http://example.com\"). A CSP report is " +
                        "being sent.";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   let { browser } = yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   hud.jsterm.clearOutput();
 
   let loaded = loadBrowser(browser);
   content.location = TEST_VIOLATION;
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_1050691_click_function_to_source.js b/devtools/client/webconsole/test/browser_webconsole_bug_1050691_click_function_to_source.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_1050691_click_function_to_source.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_1050691_click_function_to_source.js
@@ -5,17 +5,17 @@
 
 // Tests that clicking on a function displays its source in the debugger.
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-bug_1050691_click_function_to_source.html";
 
-var test = asyncTest(function*() {
+add_task(function*() {
   yield loadTab(TEST_URI);
   let hud = yield openConsole();
 
   yield testWithoutDebuggerOpen(hud);
 
   // Open the Debugger panel.
   let debuggerPanel = yield openDebugger();
   // And right after come back to the Console panel.
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_579412_input_focus.js b/devtools/client/webconsole/test/browser_webconsole_bug_579412_input_focus.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_579412_input_focus.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_579412_input_focus.js
@@ -5,16 +5,16 @@
 
 // Tests that the input field is focused when the console is opened.
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-console.html";
 
-var test = asyncTest(function*() {
+add_task(function*() {
   yield loadTab(TEST_URI);
   let hud = yield openConsole();
   hud.jsterm.clearOutput();
 
   let inputNode = hud.jsterm.inputNode;
   ok(inputNode.getAttribute("focused"), "input node is focused");
 });
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_580001_closing_after_completion.js b/devtools/client/webconsole/test/browser_webconsole_bug_580001_closing_after_completion.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_580001_closing_after_completion.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_580001_closing_after_completion.js
@@ -6,17 +6,17 @@
 // Tests to ensure that errors don't appear when the console is closed while a
 // completion is being performed.
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-console.html";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   let { browser } = yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
   yield testClosingAfterCompletion(hud, browser);
 });
 
 function testClosingAfterCompletion(hud, browser) {
   let deferred = promise.defer();
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_580454_timestamp_l10n.js b/devtools/client/webconsole/test/browser_webconsole_bug_580454_timestamp_l10n.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_580454_timestamp_l10n.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_580454_timestamp_l10n.js
@@ -10,17 +10,17 @@
 
 // Tests that appropriately-localized timestamps are printed.
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-console.html";
 
-var test = asyncTest(function*() {
+add_task(function*() {
   yield loadTab(TEST_URI);
   const TEST_TIMESTAMP = 12345678;
   let date = new Date(TEST_TIMESTAMP);
   let localizedString = WCUL10n.timestampString(TEST_TIMESTAMP);
   isnot(localizedString.indexOf(date.getHours()), -1, "the localized " +
         "timestamp contains the hours");
   isnot(localizedString.indexOf(date.getMinutes()), -1, "the localized " +
         "timestamp contains the minutes");
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_582201_duplicate_errors.js b/devtools/client/webconsole/test/browser_webconsole_bug_582201_duplicate_errors.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_582201_duplicate_errors.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_582201_duplicate_errors.js
@@ -7,17 +7,17 @@
 // Console.
 
 "use strict";
 
 const INIT_URI = "data:text/html;charset=utf8,hello world";
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-duplicate-error.html";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(INIT_URI);
 
   let hud = yield openConsole();
 
   // On e10s, the exception is triggered in child process
   // and is ignored by test harness
   if (!Services.appinfo.browserTabsRemoteAutostart) {
     expectUncaughtException();
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_583816_No_input_and_Tab_key_pressed.js b/devtools/client/webconsole/test/browser_webconsole_bug_583816_No_input_and_Tab_key_pressed.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_583816_No_input_and_Tab_key_pressed.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_583816_No_input_and_Tab_key_pressed.js
@@ -3,17 +3,17 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/browser/test-console.html";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
   testCompletion(hud);
 });
 
 function testCompletion(hud) {
   let jsterm = hud.jsterm;
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_585237_line_limit.js b/devtools/client/webconsole/test/browser_webconsole_bug_585237_line_limit.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_585237_line_limit.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_585237_line_limit.js
@@ -13,17 +13,17 @@
 // the user's preferences.
 
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf8,test for bug 585237";
 
 var outputNode;
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   let console = content.console;
   outputNode = hud.outputNode;
 
   hud.jsterm.clearOutput();
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_585991_autocomplete_keys.js b/devtools/client/webconsole/test/browser_webconsole_bug_585991_autocomplete_keys.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_585991_autocomplete_keys.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_585991_autocomplete_keys.js
@@ -4,17 +4,17 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf-8,<p>bug 585991 - autocomplete " +
                  "popup keyboard usage test";
 var HUD, popup, jsterm, inputNode, completeNode;
 
-var test = asyncTest(function*() {
+add_task(function*() {
   yield loadTab(TEST_URI);
   let hud = yield openConsole();
 
   yield consoleOpened(hud);
   yield popupHideAfterTab();
   yield testReturnKey();
   yield dontShowArrayNumbers();
   yield testReturnWithNoSelection();
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_585991_autocomplete_popup.js b/devtools/client/webconsole/test/browser_webconsole_bug_585991_autocomplete_popup.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_585991_autocomplete_popup.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_585991_autocomplete_popup.js
@@ -3,17 +3,17 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf-8,<p>bug 585991 - autocomplete " +
                  "popup test";
 
-var test = asyncTest(function*() {
+add_task(function*() {
   yield loadTab(TEST_URI);
   let hud = yield openConsole();
 
   yield consoleOpened(hud);
 });
 
 function consoleOpened(HUD) {
   let deferred = promise.defer();
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_586388_select_all.js b/devtools/client/webconsole/test/browser_webconsole_bug_586388_select_all.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_586388_select_all.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_586388_select_all.js
@@ -7,17 +7,17 @@
  *  Patrick Walton <pcwalton@mozilla.com>
  *
  * ***** END LICENSE BLOCK ***** */
 
 "use strict";
 
 const TEST_URI = "http://example.com/";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
   yield testSelectionWhenMovingBetweenBoxes(hud);
   performTestsAfterOutput(hud);
 });
 
 var testSelectionWhenMovingBetweenBoxes = Task.async(function*(hud) {
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_587617_output_copy.js b/devtools/client/webconsole/test/browser_webconsole_bug_587617_output_copy.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_587617_output_copy.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_587617_output_copy.js
@@ -10,17 +10,17 @@
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-console.html";
 
 var HUD, outputNode;
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
   yield consoleOpened(hud);
   yield testContextMenuCopy();
 
   HUD = outputNode = null;
 });
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_588342_document_focus.js b/devtools/client/webconsole/test/browser_webconsole_bug_588342_document_focus.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_588342_document_focus.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_588342_document_focus.js
@@ -9,17 +9,17 @@
  * ***** END LICENSE BLOCK ***** */
 
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf-8,Web Console test for bug 588342";
 
 var fm = Cc["@mozilla.org/focus-manager;1"].getService(Ci.nsIFocusManager);
 
-var test = asyncTest(function* () {
+add_task(function* () {
   let { browser } = yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
   yield consoleOpened(hud);
 
   is(fm.focusedWindow, browser.contentWindow,
      "content document has focus");
 
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_588730_text_node_insertion.js b/devtools/client/webconsole/test/browser_webconsole_bug_588730_text_node_insertion.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_588730_text_node_insertion.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_588730_text_node_insertion.js
@@ -5,17 +5,17 @@
 
 // Tests that adding text to one of the output labels doesn't cause errors.
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-console.html";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   yield testTextNodeInsertion(hud);
 });
 
 // Test for bug 588730: Adding a text node to an existing label element causes
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_588967_input_expansion.js b/devtools/client/webconsole/test/browser_webconsole_bug_588967_input_expansion.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_588967_input_expansion.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_588967_input_expansion.js
@@ -3,17 +3,17 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-console.html";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   testInputExpansion(hud);
 });
 
 function testInputExpansion(hud) {
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_592442_closing_brackets.js b/devtools/client/webconsole/test/browser_webconsole_bug_592442_closing_brackets.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_592442_closing_brackets.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_592442_closing_brackets.js
@@ -12,17 +12,17 @@
 
 // Tests that, when the user types an extraneous closing bracket, no error
 // appears.
 
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf-8,test for bug 592442";
 
-var test = asyncTest(function*() {
+add_task(function*() {
   yield loadTab(TEST_URI);
   let hud = yield openConsole();
   hud.jsterm.clearOutput();
   let jsterm = hud.jsterm;
 
   jsterm.setInputValue("document.getElementById)");
 
   let error = false;
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_594497_history_arrow_keys.js b/devtools/client/webconsole/test/browser_webconsole_bug_594497_history_arrow_keys.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_594497_history_arrow_keys.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_594497_history_arrow_keys.js
@@ -10,17 +10,17 @@
 
 "use strict";
 
 var inputNode, values;
 
 var TEST_URI = "data:text/html;charset=utf-8,Web Console test for " +
                "bug 594497 and bug 619598";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   setup(hud);
   performTests();
 
   inputNode = values = null;
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_595223_file_uri.js b/devtools/client/webconsole/test/browser_webconsole_bug_595223_file_uri.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_595223_file_uri.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_595223_file_uri.js
@@ -6,17 +6,17 @@
 "use strict";
 
 const PREF = "devtools.webconsole.persistlog";
 const TEST_FILE = "test-network.html";
 const TEST_URI = "data:text/html;charset=utf8,<p>test file URI";
 
 var hud;
 
-var test = asyncTest(function* () {
+add_task(function* () {
   Services.prefs.setBoolPref(PREF, true);
 
   let jar = getJar(getRootDirectory(gTestPath));
   let dir = jar ?
             extractJarToTmp(jar) :
             getChromeDir(getResolvedURI(gTestPath));
 
   dir.append(TEST_FILE);
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_597460_filter_scroll.js b/devtools/client/webconsole/test/browser_webconsole_bug_597460_filter_scroll.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_597460_filter_scroll.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_597460_filter_scroll.js
@@ -9,17 +9,17 @@
  * ***** END LICENSE BLOCK ***** */
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-network.html";
 const PREF = "devtools.webconsole.persistlog";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   Services.prefs.setBoolPref(PREF, true);
 
   yield loadTab(TEST_URI);
   let hud = yield openConsole();
 
   let results = yield consoleOpened(hud);
 
   testScroll(results, hud);
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_597756_reopen_closed_tab.js b/devtools/client/webconsole/test/browser_webconsole_bug_597756_reopen_closed_tab.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_597756_reopen_closed_tab.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_597756_reopen_closed_tab.js
@@ -10,17 +10,17 @@
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-bug-597756-reopen-closed-tab.html";
 
 var HUD;
 
-var test = asyncTest(function* () {
+add_task(function* () {
   // On e10s, the exception is triggered in child process
   // and is ignored by test harness
   if (!Services.appinfo.browserTabsRemoteAutostart) {
     expectUncaughtException();
   }
 
   let { browser } = yield loadTab(TEST_URI);
   HUD = yield openConsole();
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_599725_response_headers.js b/devtools/client/webconsole/test/browser_webconsole_bug_599725_response_headers.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_599725_response_headers.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_599725_response_headers.js
@@ -64,17 +64,17 @@ function waitForRequest() {
     if (loads != 2) {
       return;
     }
     performTest(req, console).then(deferred.resolve);
   };
   return deferred.promise;
 }
 
-var test = asyncTest(function* () {
+add_task(function* () {
   let { browser } = yield loadTab(INIT_URI);
 
   yield openConsole();
 
   let gotLastRequest = waitForRequest();
 
   let loaded = loadBrowser(browser);
   content.location = TEST_URI;
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_600183_charset.js b/devtools/client/webconsole/test/browser_webconsole_bug_600183_charset.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_600183_charset.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_600183_charset.js
@@ -44,17 +44,17 @@ function performTest(lastFinishedRequest
 function waitForRequest() {
   let deferred = promise.defer();
   HUDService.lastFinishedRequest.callback = (req, console) => {
     performTest(req, console).then(deferred.resolve);
   };
   return deferred.promise;
 }
 
-var test = asyncTest(function* () {
+add_task(function* () {
   let { browser } = yield loadTab(INIT_URI);
 
   let hud = yield openConsole();
 
   yield hud.ui.setSaveRequestAndResponseBodies(true);
 
   ok(hud.ui._saveRequestAndResponseBodies,
     "The saveRequestAndResponseBodies property was successfully set.");
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_601177_log_levels.js b/devtools/client/webconsole/test/browser_webconsole_bug_601177_log_levels.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_601177_log_levels.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_601177_log_levels.js
@@ -10,17 +10,17 @@
 
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf-8,Web Console test for " +
                  "bug 601177: log levels";
 const TEST_URI2 = "http://example.com/browser/devtools/client/webconsole/" +
                   "test/test-bug-601177-log-levels.html";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   Services.prefs.setBoolPref("javascript.options.strict", true);
 
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   // On e10s, the exception is triggered in child process
   // and is ignored by test harness
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_601667_filter_buttons.js b/devtools/client/webconsole/test/browser_webconsole_bug_601667_filter_buttons.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_601667_filter_buttons.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_601667_filter_buttons.js
@@ -6,17 +6,17 @@
 "use strict";
 
 const TEST_URI = "http://example.com/";
 const FILTER_PREF_DOMAIN = "devtools.webconsole.filter.";
 
 var hud, hudId, hudBox;
 var prefs = {};
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   hud = yield openConsole();
   hudId = hud.hudId;
   hudBox = hud.ui.rootElement;
 
   savePrefs();
 
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_603750_websocket.js b/devtools/client/webconsole/test/browser_webconsole_bug_603750_websocket.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_603750_websocket.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_603750_websocket.js
@@ -10,17 +10,17 @@
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-bug-603750-websocket.html";
 const TEST_URI2 = "data:text/html;charset=utf-8,Web Console test for " +
                   "bug 603750: Web Socket errors";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI2);
 
   let hud = yield openConsole();
 
   content.location = TEST_URI;
 
   yield waitForMessages({
     webconsole: hud,
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_611795.js b/devtools/client/webconsole/test/browser_webconsole_bug_611795.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_611795.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_611795.js
@@ -9,17 +9,17 @@ const TEST_URI = 'data:text/html;charset
                  'hi</p>';
 var hud;
 
 /**
  * Unit test for bug 611795:
  * Repeated CSS messages get collapsed into one.
  */
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   hud = yield openConsole();
   hud.jsterm.clearOutput(true);
 
   BrowserReload();
   yield loadBrowser(gBrowser.selectedBrowser);
 
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_613013_console_api_iframe.js b/devtools/client/webconsole/test/browser_webconsole_bug_613013_console_api_iframe.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_613013_console_api_iframe.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_613013_console_api_iframe.js
@@ -8,17 +8,17 @@
  *
  * ***** END LICENSE BLOCK ***** */
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-bug-613013-console-api-iframe.html";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   BrowserReload();
 
   yield waitForMessages({
     webconsole: hud,
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_613642_maintain_scroll.js b/devtools/client/webconsole/test/browser_webconsole_bug_613642_maintain_scroll.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_613642_maintain_scroll.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_613642_maintain_scroll.js
@@ -7,17 +7,17 @@
  *   Mihai Șucan <mihai.sucan@gmail.com>
  */
 
 "use strict";
 
 var TEST_URI = "data:text/html;charset=utf-8,Web Console test for " +
                "bug 613642: remember scroll location";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   hud.jsterm.clearOutput();
   let outputNode = hud.outputNode;
   let scrollBox = outputNode.parentNode;
 
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_613642_prune_scroll.js b/devtools/client/webconsole/test/browser_webconsole_bug_613642_prune_scroll.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_613642_prune_scroll.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_613642_prune_scroll.js
@@ -9,17 +9,17 @@
 
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf-8,Web Console test for " +
                  "bug 613642: maintain scroll with pruning of old messages";
 
 var hud;
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   hud = yield openConsole();
 
   hud.jsterm.clearOutput();
 
   let outputNode = hud.outputNode;
 
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_614793_jsterm_scroll.js b/devtools/client/webconsole/test/browser_webconsole_bug_614793_jsterm_scroll.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_614793_jsterm_scroll.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_614793_jsterm_scroll.js
@@ -9,17 +9,17 @@
 
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf-8,Web Console test for " +
                  "bug 614793: jsterm result scroll";
 
 "use strict";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   yield consoleOpened(hud);
 });
 
 function consoleOpened(hud) {
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_618078_network_exceptions.js b/devtools/client/webconsole/test/browser_webconsole_bug_618078_network_exceptions.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_618078_network_exceptions.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_618078_network_exceptions.js
@@ -7,17 +7,17 @@
 // network requests, like onreadystate for XHR. See bug 618078.
 
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf-8,Web Console test for bug 618078";
 const TEST_URI2 = "http://example.com/browser/devtools/client/webconsole/" +
                   "test/test-bug-618078-network-exceptions.html";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   // On e10s, the exception is triggered in child process
   // and is ignored by test harness
   if (!Services.appinfo.browserTabsRemoteAutostart) {
     expectUncaughtException();
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_621644_jsterm_dollar.js b/devtools/client/webconsole/test/browser_webconsole_bug_621644_jsterm_dollar.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_621644_jsterm_dollar.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_621644_jsterm_dollar.js
@@ -7,17 +7,17 @@
  *   Mihai Sucan <mihai.sucan@gmail.com>
  */
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-bug-621644-jsterm-dollar.html";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   yield test$(hud);
   yield test$$(hud);
 });
 
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_622303_persistent_filters.js b/devtools/client/webconsole/test/browser_webconsole_bug_622303_persistent_filters.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_622303_persistent_filters.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_622303_persistent_filters.js
@@ -26,17 +26,17 @@ const prefs = {
      "info",
      "log",
      "serviceworkers",
      "sharedworkers",
      "windowlessworkers"
   ]
 };
 
-var test = asyncTest(function* () {
+add_task(function* () {
   // Set all prefs to true
   for (let category in prefs) {
     prefs[category].forEach(function(pref) {
       Services.prefs.setBoolPref("devtools.webconsole.filter." + pref, true);
     });
   }
 
   yield loadTab("about:blank");
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_623749_ctrl_a_select_all_winnt.js b/devtools/client/webconsole/test/browser_webconsole_bug_623749_ctrl_a_select_all_winnt.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_623749_ctrl_a_select_all_winnt.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_623749_ctrl_a_select_all_winnt.js
@@ -3,17 +3,17 @@
 
 // Test for https://bugzilla.mozilla.org/show_bug.cgi?id=623749
 // Map Control + A to Select All, In the web console input, on Windows
 
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf-8,Test console for bug 623749";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   let jsterm = hud.jsterm;
   jsterm.setInputValue("Ignore These Four Words");
   let inputNode = jsterm.inputNode;
 
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_630733_response_redirect_headers.js b/devtools/client/webconsole/test/browser_webconsole_bug_630733_response_redirect_headers.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_630733_response_redirect_headers.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_630733_response_redirect_headers.js
@@ -12,17 +12,17 @@
 const TEST_URI = "data:text/html;charset=utf-8,<p>Web Console test for " +
                  "bug 630733";
 const TEST_URI2 = "http://example.com/browser/devtools/client/webconsole/" +
                   "test/test-bug-630733-response-redirect-headers.sjs";
 
 var lastFinishedRequests = {};
 var webConsoleClient;
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   yield consoleOpened(hud);
   yield getHeaders();
   yield getContent();
 
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_644419_log_limits.js b/devtools/client/webconsole/test/browser_webconsole_bug_644419_log_limits.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_644419_log_limits.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_644419_log_limits.js
@@ -13,17 +13,17 @@ const INIT_URI = "data:text/html;charset
                  "bug 644419: Console should " +
                  "have user-settable log limits for each message category";
 
 const TEST_URI = "http://example.com/browser/devtools/client/" +
                  "webconsole/test/test-bug-644419-log-limits.html";
 
 var hud, outputNode;
 
-var test = asyncTest(function* () {
+add_task(function* () {
   let { browser } = yield loadTab(INIT_URI);
 
   hud = yield openConsole();
 
   hud.jsterm.clearOutput();
   outputNode = hud.outputNode;
 
   let loaded = loadBrowser(browser);
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_646025_console_file_location.js b/devtools/client/webconsole/test/browser_webconsole_bug_646025_console_file_location.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_646025_console_file_location.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_646025_console_file_location.js
@@ -9,17 +9,17 @@
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf-8,Web Console file location " +
                  "display test";
 const TEST_URI2 = "http://example.com/browser/devtools/client/" +
                  "webconsole/test/" +
                  "test-bug-646025-console-file-location.html";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   content.location = TEST_URI2;
 
   yield waitForMessages({
     webconsole: hud,
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_651501_document_body_autocomplete.js b/devtools/client/webconsole/test/browser_webconsole_bug_651501_document_body_autocomplete.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_651501_document_body_autocomplete.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_651501_document_body_autocomplete.js
@@ -8,17 +8,17 @@
 
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf-8,Web Console autocompletion " +
                  "bug in document.body";
 
 var gHUD;
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   gHUD = yield openConsole();
 
   yield consoleOpened();
   yield autocompletePopupHidden();
   let view = yield testPropertyPanel();
   yield onVariablesViewReady(view);
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_658368_time_methods.js b/devtools/client/webconsole/test/browser_webconsole_bug_658368_time_methods.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_658368_time_methods.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_658368_time_methods.js
@@ -15,17 +15,17 @@ const TEST_URI2 = "data:text/html;charse
                   "console.timeEnd('bTimer');</script>";
 
 const TEST_URI3 = "data:text/html;charset=utf-8,<script>" +
                   "console.time('bTimer');</script>";
 
 const TEST_URI4 = "data:text/html;charset=utf-8," +
                   "<script>console.timeEnd('bTimer');</script>";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud1 = yield openConsole();
 
   yield waitForMessages({
     webconsole: hud1,
     messages: [{
       name: "aTimer started",
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_659907_console_dir.js b/devtools/client/webconsole/test/browser_webconsole_bug_659907_console_dir.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_659907_console_dir.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_659907_console_dir.js
@@ -6,17 +6,17 @@
 
 // Tests that console.dir works as intended.
 
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf-8,Web Console test for " +
                  "bug 659907: Expand console object with a dir method";
 
-var test = asyncTest(function*() {
+add_task(function*() {
   yield loadTab(TEST_URI);
   let hud = yield openConsole();
   hud.jsterm.clearOutput();
 
   hud.jsterm.execute("console.dir(document)");
 
   let varView = yield hud.jsterm.once("variablesview-fetched");
 
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_660806_history_nav.js b/devtools/client/webconsole/test/browser_webconsole_bug_660806_history_nav.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_660806_history_nav.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_660806_history_nav.js
@@ -2,17 +2,17 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf-8,<p>bug 660806 - history " +
                  "navigation must not show the autocomplete popup";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   yield consoleOpened(hud);
 });
 
 function consoleOpened(HUD) {
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_664131_console_group.js b/devtools/client/webconsole/test/browser_webconsole_bug_664131_console_group.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_664131_console_group.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_664131_console_group.js
@@ -6,17 +6,17 @@
 
 // Tests that console.group/groupEnd works as intended.
 
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf-8,Web Console test for " +
                  "bug 664131: Expand console object with group methods";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
   let jsterm = hud.jsterm;
 
   hud.jsterm.clearOutput();
 
   yield jsterm.execute("console.group('bug664131a')");
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_686937_autocomplete_JSTerm_helpers.js b/devtools/client/webconsole/test/browser_webconsole_bug_686937_autocomplete_JSTerm_helpers.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_686937_autocomplete_JSTerm_helpers.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_686937_autocomplete_JSTerm_helpers.js
@@ -7,17 +7,17 @@
 
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf8,<p>test JSTerm Helpers " +
                  "autocomplete";
 
 var jsterm;
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   jsterm = hud.jsterm;
   let input = jsterm.inputNode;
   let popup = jsterm.autocompletePopup;
 
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_704295.js b/devtools/client/webconsole/test/browser_webconsole_bug_704295.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_704295.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_704295.js
@@ -5,17 +5,17 @@
 
 // Tests for bug 704295
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-console.html";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   testCompletion(hud);
 });
 
 function testCompletion(hud) {
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_734061_No_input_change_and_Tab_key_pressed.js b/devtools/client/webconsole/test/browser_webconsole_bug_734061_No_input_change_and_Tab_key_pressed.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_734061_No_input_change_and_Tab_key_pressed.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_734061_No_input_change_and_Tab_key_pressed.js
@@ -3,17 +3,17 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/browser/test-console.html";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   let jsterm = hud.jsterm;
   let input = jsterm.inputNode;
 
   is(input.getAttribute("focused"), "true", "input has focus");
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_737873_mixedcontent.js b/devtools/client/webconsole/test/browser_webconsole_bug_737873_mixedcontent.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_737873_mixedcontent.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_737873_mixedcontent.js
@@ -13,17 +13,17 @@
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf8,Web Console mixed content test";
 const TEST_HTTPS_URI = "https://example.com/browser/devtools/client/" +
                        "webconsole/test/test-bug-737873-mixedcontent.html";
 const LEARN_MORE_URI = "https://developer.mozilla.org/docs/Security/" +
                        "MixedContent";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   Services.prefs.setBoolPref("security.mixed_content.block_display_content",
                              false);
   Services.prefs.setBoolPref("security.mixed_content.block_active_content",
                              false);
 
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_762593_insecure_passwords_about_blank_web_console_warning.js b/devtools/client/webconsole/test/browser_webconsole_bug_762593_insecure_passwords_about_blank_web_console_warning.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_762593_insecure_passwords_about_blank_web_console_warning.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_762593_insecure_passwords_about_blank_web_console_warning.js
@@ -8,17 +8,17 @@
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-bug-762593-insecure-passwords-about-blank-web-console-warning.html";
 const INSECURE_PASSWORD_MSG = "Password fields present on an insecure " +
   "(http://) page. This is a security risk that allows user login " +
   "credentials to be stolen.";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   yield waitForMessages({
     webconsole: hud,
     messages: [
       {
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_762593_insecure_passwords_web_console_warning.js b/devtools/client/webconsole/test/browser_webconsole_bug_762593_insecure_passwords_web_console_warning.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_762593_insecure_passwords_web_console_warning.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_762593_insecure_passwords_web_console_warning.js
@@ -17,17 +17,17 @@ const INSECURE_FORM_ACTION_MSG = "Passwo
                  "insecure (http://) form action. This is a security risk " +
                  "that allows user login credentials to be stolen.";
 const INSECURE_IFRAME_MSG = "Password fields present on an insecure " +
                  "(http://) iframe. This is a security risk that allows " +
                  "user login credentials to be stolen.";
 const INSECURE_PASSWORDS_URI = "https://developer.mozilla.org/docs/Security/" +
                  "InsecurePasswords";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   let result = yield waitForMessages({
     webconsole: hud,
     messages: [
       {
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_764572_output_open_url.js b/devtools/client/webconsole/test/browser_webconsole_bug_764572_output_open_url.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_764572_output_open_url.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_764572_output_open_url.js
@@ -9,17 +9,17 @@
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-console.html";
 const COMMAND_NAME = "consoleCmd_openURL";
 const CONTEXT_MENU_ID = "#menu_openURL";
 
 var HUD = null, outputNode = null, contextMenu = null;
 
-var test = asyncTest(function* () {
+add_task(function* () {
   Services.prefs.setBoolPref("devtools.webconsole.filter.networkinfo", true);
 
   yield loadTab(TEST_URI);
   HUD = yield openConsole();
 
   let results = yield consoleOpened();
   yield onConsoleMessage(results);
 
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_770099_violation.js b/devtools/client/webconsole/test/browser_webconsole_bug_770099_violation.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_770099_violation.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_770099_violation.js
@@ -12,17 +12,17 @@
 const TEST_URI = "data:text/html;charset=utf8,Web Console CSP violation test";
 const TEST_VIOLATION = "https://example.com/browser/devtools/client/" +
                        "webconsole/test/test_bug_770099_violation.html";
 const CSP_VIOLATION_MSG = "Content Security Policy: The page's settings " +
                           "blocked the loading of a resource at " +
                           "http://some.example.com/test.png (\"default-src " +
                             "https://example.com\").";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   let { browser } = yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   hud.jsterm.clearOutput();
 
   let loaded = loadBrowser(browser);
   content.location = TEST_VIOLATION;
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_782653_CSS_links_in_Style_Editor.js b/devtools/client/webconsole/test/browser_webconsole_bug_782653_CSS_links_in_Style_Editor.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_782653_CSS_links_in_Style_Editor.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_782653_CSS_links_in_Style_Editor.js
@@ -6,17 +6,17 @@
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/test" +
                  "/test-bug-782653-css-errors.html";
 
 var nodes, hud, StyleEditorUI;
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   hud = yield openConsole();
 
   let styleEditor = yield testViewSource();
   yield onStyleEditorReady(styleEditor);
 
   nodes = hud = StyleEditorUI = null;
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_804845_ctrl_key_nav.js b/devtools/client/webconsole/test/browser_webconsole_bug_804845_ctrl_key_nav.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_804845_ctrl_key_nav.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_804845_ctrl_key_nav.js
@@ -13,17 +13,17 @@
 // see https://bugzilla.mozilla.org/show_bug.cgi?id=804845
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf-8,Web Console test for " +
                  "bug 804845 and bug 619598";
 
 var jsterm, inputNode;
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   doTests(hud);
 
   jsterm = inputNode = null;
 });
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_817834_add_edited_input_to_history.js b/devtools/client/webconsole/test/browser_webconsole_bug_817834_add_edited_input_to_history.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_817834_add_edited_input_to_history.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_817834_add_edited_input_to_history.js
@@ -12,17 +12,17 @@
 // Test that user input that is not submitted in the command line input is not
 // lost after navigating in history.
 // See https://bugzilla.mozilla.org/show_bug.cgi?id=817834
 
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf-8,Web Console test for bug 817834";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   testEditedInputHistory(hud);
 });
 
 function testEditedInputHistory(HUD) {
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_837351_securityerrors.js b/devtools/client/webconsole/test/browser_webconsole_bug_837351_securityerrors.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_837351_securityerrors.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_837351_securityerrors.js
@@ -1,17 +1,17 @@
 /* Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
 const TEST_URI = "https://example.com/browser/devtools/client/webconsole/" +
                  "test/test-bug-837351-security-errors.html";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield pushPrefEnv();
 
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   let button = hud.ui.rootElement.querySelector(".webconsole-filter-button[category=\"security\"]");
   ok(button, "Found security button in the web console");
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_922212_console_dirxml.js b/devtools/client/webconsole/test/browser_webconsole_bug_922212_console_dirxml.js
--- a/devtools/client/webconsole/test/browser_webconsole_bug_922212_console_dirxml.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_922212_console_dirxml.js
@@ -6,17 +6,17 @@
 
 // Tests that console.dirxml works as intended.
 
 "use strict";
 
 const TEST_URI = `data:text/html;charset=utf-8,Web Console test for bug 922212:
   Add console.dirxml`;
 
-var test = asyncTest(function*() {
+add_task(function*() {
   yield loadTab(TEST_URI);
   let hud = yield openConsole();
   hud.jsterm.clearOutput();
 
   // Should work like console.log(window)
   hud.jsterm.execute("console.dirxml(window)");
 
   let [result] = yield waitForMessages({
diff --git a/devtools/client/webconsole/test/browser_webconsole_cached_autocomplete.js b/devtools/client/webconsole/test/browser_webconsole_cached_autocomplete.js
--- a/devtools/client/webconsole/test/browser_webconsole_cached_autocomplete.js
+++ b/devtools/client/webconsole/test/browser_webconsole_cached_autocomplete.js
@@ -8,17 +8,17 @@
 
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf8,<p>test cached autocompletion " +
                  "results";
 
 var jsterm;
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   jsterm = hud.jsterm;
   let input = jsterm.inputNode;
   let popup = jsterm.autocompletePopup;
 
diff --git a/devtools/client/webconsole/test/browser_webconsole_change_font_size.js b/devtools/client/webconsole/test/browser_webconsole_change_font_size.js
--- a/devtools/client/webconsole/test/browser_webconsole_change_font_size.js
+++ b/devtools/client/webconsole/test/browser_webconsole_change_font_size.js
@@ -7,17 +7,17 @@
  *  Jennifer Fong <jfong@mozilla.com>
  *
  * ***** END LICENSE BLOCK ***** */
 
 "use strict";
 
 const TEST_URI = "http://example.com/";
 
-var test = asyncTest(function*() {
+add_task(function*() {
   yield loadTab(TEST_URI);
   Services.prefs.setIntPref("devtools.webconsole.fontSize", 10);
   let hud = yield HUDService.toggleBrowserConsole();
 
   let inputNode = hud.jsterm.inputNode;
   let outputNode = hud.jsterm.outputNode;
   outputNode.focus();
 
diff --git a/devtools/client/webconsole/test/browser_webconsole_completion.js b/devtools/client/webconsole/test/browser_webconsole_completion.js
--- a/devtools/client/webconsole/test/browser_webconsole_completion.js
+++ b/devtools/client/webconsole/test/browser_webconsole_completion.js
@@ -6,17 +6,17 @@
 // Tests that code completion works properly.
 
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf8,<p>test code completion";
 
 var jsterm;
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   jsterm = hud.jsterm;
   let input = jsterm.inputNode;
 
   // Test typing 'docu'.
diff --git a/devtools/client/webconsole/test/browser_webconsole_console_logging_api.js b/devtools/client/webconsole/test/browser_webconsole_console_logging_api.js
--- a/devtools/client/webconsole/test/browser_webconsole_console_logging_api.js
+++ b/devtools/client/webconsole/test/browser_webconsole_console_logging_api.js
@@ -5,17 +5,17 @@
 
 // Tests that the basic console.log()-style APIs and filtering work.
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-console.html";
 
-var test = asyncTest(function*() {
+add_task(function*() {
   yield loadTab(TEST_URI);
   let hud = yield openConsole();
   hud.jsterm.clearOutput();
 
   let outputNode = hud.outputNode;
 
   let methods = ["log", "info", "warn", "error", "exception", "debug"];
   for (let method of methods) {
diff --git a/devtools/client/webconsole/test/browser_webconsole_console_logging_workers_api.js b/devtools/client/webconsole/test/browser_webconsole_console_logging_workers_api.js
--- a/devtools/client/webconsole/test/browser_webconsole_console_logging_workers_api.js
+++ b/devtools/client/webconsole/test/browser_webconsole_console_logging_workers_api.js
@@ -4,17 +4,17 @@
 // Tests that the basic console.log()-style APIs and filtering work for
 // sharedWorkers
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-console-workers.html";
 
-var test = asyncTest(function*() {
+add_task(function*() {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   yield waitForMessages({
     webconsole: hud,
     messages: [{
       text: "foo-bar-shared-worker"
diff --git a/devtools/client/webconsole/test/browser_webconsole_execution_scope.js b/devtools/client/webconsole/test/browser_webconsole_execution_scope.js
--- a/devtools/client/webconsole/test/browser_webconsole_execution_scope.js
+++ b/devtools/client/webconsole/test/browser_webconsole_execution_scope.js
@@ -5,17 +5,17 @@
 
 // Tests that commands run by the user are executed in content space.
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-console.html";
 
-var test = asyncTest(function*() {
+add_task(function*() {
   yield loadTab(TEST_URI);
   let hud = yield openConsole();
   hud.jsterm.clearOutput();
   hud.jsterm.execute("window.location.href;");
 
   let [input, output] = yield waitForMessages({
     webconsole: hud,
     messages: [{
diff --git a/devtools/client/webconsole/test/browser_webconsole_expandable_timestamps.js b/devtools/client/webconsole/test/browser_webconsole_expandable_timestamps.js
--- a/devtools/client/webconsole/test/browser_webconsole_expandable_timestamps.js
+++ b/devtools/client/webconsole/test/browser_webconsole_expandable_timestamps.js
@@ -6,17 +6,17 @@
 
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf-8,Web Console test for " +
                  "bug 722267 - preference for toggling timestamps in messages";
 const PREF_MESSAGE_TIMESTAMP = "devtools.webconsole.timestampMessages";
 var hud;
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   hud = yield openConsole();
   let panel = yield consoleOpened();
 
   yield onOptionsPanelSelected(panel);
   onPrefChanged();
 
diff --git a/devtools/client/webconsole/test/browser_webconsole_for_of.js b/devtools/client/webconsole/test/browser_webconsole_for_of.js
--- a/devtools/client/webconsole/test/browser_webconsole_for_of.js
+++ b/devtools/client/webconsole/test/browser_webconsole_for_of.js
@@ -3,17 +3,17 @@
 
 // A for-of loop in Web Console code can loop over a content NodeList.
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-for-of.html";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
   yield testForOf(hud);
 });
 
 function testForOf(hud) {
   let deferred = promise.defer();
diff --git a/devtools/client/webconsole/test/browser_webconsole_history.js b/devtools/client/webconsole/test/browser_webconsole_history.js
--- a/devtools/client/webconsole/test/browser_webconsole_history.js
+++ b/devtools/client/webconsole/test/browser_webconsole_history.js
@@ -9,17 +9,17 @@
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-console.html";
 
 // Constants used for defining the direction of JSTerm input history navigation.
 const HISTORY_BACK = -1;
 const HISTORY_FORWARD = 1;
 
-var test = asyncTest(function*() {
+add_task(function*() {
   yield loadTab(TEST_URI);
   let hud = yield openConsole();
   hud.jsterm.clearOutput();
 
   let jsterm = hud.jsterm;
   let input = jsterm.inputNode;
 
   let executeList = ["document", "window", "window.location"];
diff --git a/devtools/client/webconsole/test/browser_webconsole_hpkp_invalid-headers.js b/devtools/client/webconsole/test/browser_webconsole_hpkp_invalid-headers.js
--- a/devtools/client/webconsole/test/browser_webconsole_hpkp_invalid-headers.js
+++ b/devtools/client/webconsole/test/browser_webconsole_hpkp_invalid-headers.js
@@ -9,17 +9,17 @@ const TEST_URI = "data:text/html;charset
                  "header test";
 const SJS_URL = "https://example.com/browser/devtools/client/webconsole/" +
                 "test/test_hpkp-invalid-headers.sjs";
 const LEARN_MORE_URI = "https://developer.mozilla.org/docs/Web/Security/" +
                        "Public_Key_Pinning";
 const NON_BUILTIN_ROOT_PREF = "security.cert_pinning.process_headers_from_" +
                               "non_builtin_roots";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   registerCleanupFunction(() => {
     Services.prefs.clearUserPref(NON_BUILTIN_ROOT_PREF);
   });
 
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
diff --git a/devtools/client/webconsole/test/browser_webconsole_hsts_invalid-headers.js b/devtools/client/webconsole/test/browser_webconsole_hsts_invalid-headers.js
--- a/devtools/client/webconsole/test/browser_webconsole_hsts_invalid-headers.js
+++ b/devtools/client/webconsole/test/browser_webconsole_hsts_invalid-headers.js
@@ -7,17 +7,17 @@
 
 const TEST_URI = "data:text/html;charset=utf-8,Web Console HSTS invalid " +
                  "header test";
 const SJS_URL = "https://example.com/browser/devtools/client/webconsole/" +
                 "test/test_hsts-invalid-headers.sjs";
 const LEARN_MORE_URI = "https://developer.mozilla.org/docs/Security/" +
                        "HTTP_Strict_Transport_Security";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   yield* checkForMessage({
     url: SJS_URL + "?badSyntax",
     name: "Could not parse header error displayed successfully",
     text: "Strict-Transport-Security: The site specified a header that could " +
diff --git a/devtools/client/webconsole/test/browser_webconsole_input_field_focus_on_panel_select.js b/devtools/client/webconsole/test/browser_webconsole_input_field_focus_on_panel_select.js
--- a/devtools/client/webconsole/test/browser_webconsole_input_field_focus_on_panel_select.js
+++ b/devtools/client/webconsole/test/browser_webconsole_input_field_focus_on_panel_select.js
@@ -4,17 +4,17 @@
 
 // Test that the JS input field is focused when the user switches back to the
 // web console from other tools, see bug 891581.
 
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf8,<p>hello";
 
-var test = asyncTest(function*() {
+add_task(function*() {
   yield loadTab(TEST_URI);
   let hud = yield openConsole();
   hud.jsterm.clearOutput();
 
   is(hud.jsterm.inputNode.hasAttribute("focused"), true,
      "inputNode should be focused");
 
   hud.ui.filterBox.focus();
diff --git a/devtools/client/webconsole/test/browser_webconsole_js_input_expansion.js b/devtools/client/webconsole/test/browser_webconsole_js_input_expansion.js
--- a/devtools/client/webconsole/test/browser_webconsole_js_input_expansion.js
+++ b/devtools/client/webconsole/test/browser_webconsole_js_input_expansion.js
@@ -5,17 +5,17 @@
 
 // Tests that the input box expands as the user types long lines.
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-console.html";
 
-var test = asyncTest(function*() {
+add_task(function*() {
   yield loadTab(TEST_URI);
   let hud = yield openConsole();
   hud.jsterm.clearOutput();
 
   let input = hud.jsterm.inputNode;
   input.focus();
 
   is(input.getAttribute("multiline"), "true", "multiline is enabled");
diff --git a/devtools/client/webconsole/test/browser_webconsole_jsterm.js b/devtools/client/webconsole/test/browser_webconsole_jsterm.js
--- a/devtools/client/webconsole/test/browser_webconsole_jsterm.js
+++ b/devtools/client/webconsole/test/browser_webconsole_jsterm.js
@@ -5,17 +5,17 @@
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-console.html";
 
 var jsterm;
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
   let hud = yield openConsole();
   jsterm = hud.jsterm;
   yield testJSTerm(hud);
   jsterm = null;
 });
 
 function checkResult(msg, desc) {
diff --git a/devtools/client/webconsole/test/browser_webconsole_live_filtering_of_message_types.js b/devtools/client/webconsole/test/browser_webconsole_live_filtering_of_message_types.js
--- a/devtools/client/webconsole/test/browser_webconsole_live_filtering_of_message_types.js
+++ b/devtools/client/webconsole/test/browser_webconsole_live_filtering_of_message_types.js
@@ -5,17 +5,17 @@
 
 // Tests that the message type filter checkboxes work.
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-console.html";
 
-var test = asyncTest(function*() {
+add_task(function*() {
   yield loadTab(TEST_URI);
   let hud = yield openConsole();
   hud.jsterm.clearOutput();
 
   let console = content.console;
 
   for (let i = 0; i < 50; i++) {
     console.log("foobarz #" + i);
diff --git a/devtools/client/webconsole/test/browser_webconsole_live_filtering_on_search_strings.js b/devtools/client/webconsole/test/browser_webconsole_live_filtering_on_search_strings.js
--- a/devtools/client/webconsole/test/browser_webconsole_live_filtering_on_search_strings.js
+++ b/devtools/client/webconsole/test/browser_webconsole_live_filtering_on_search_strings.js
@@ -5,17 +5,17 @@
 
 // Tests that the text filter box works.
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-console.html";
 
-var test = asyncTest(function*() {
+add_task(function*() {
   yield loadTab(TEST_URI);
   let hud = yield openConsole();
   hud.jsterm.clearOutput();
 
   let console = content.console;
 
   for (let i = 0; i < 50; i++) {
     console.log("http://www.example.com/ " + i);
diff --git a/devtools/client/webconsole/test/browser_webconsole_log_file_filter.js b/devtools/client/webconsole/test/browser_webconsole_log_file_filter.js
--- a/devtools/client/webconsole/test/browser_webconsole_log_file_filter.js
+++ b/devtools/client/webconsole/test/browser_webconsole_log_file_filter.js
@@ -7,17 +7,17 @@
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-bug_923281_console_log_filter.html";
 
 var hud;
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   hud = yield openConsole();
   yield consoleOpened();
 
   testLiveFilteringOnSearchStrings();
 
   hud = null;
diff --git a/devtools/client/webconsole/test/browser_webconsole_message_node_id.js b/devtools/client/webconsole/test/browser_webconsole_message_node_id.js
--- a/devtools/client/webconsole/test/browser_webconsole_message_node_id.js
+++ b/devtools/client/webconsole/test/browser_webconsole_message_node_id.js
@@ -3,17 +3,17 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-console.html";
 
-var test = asyncTest(function*() {
+add_task(function*() {
   yield loadTab(TEST_URI);
   let hud = yield openConsole();
 
   hud.jsterm.execute("console.log('a log message')");
 
   let [result] = yield waitForMessages({
       webconsole: hud,
       messages: [{
diff --git a/devtools/client/webconsole/test/browser_webconsole_netlogging_reset_filter.js b/devtools/client/webconsole/test/browser_webconsole_netlogging_reset_filter.js
--- a/devtools/client/webconsole/test/browser_webconsole_netlogging_reset_filter.js
+++ b/devtools/client/webconsole/test/browser_webconsole_netlogging_reset_filter.js
@@ -9,17 +9,17 @@
 
 const TEST_FILE_URI =
   "http://example.com/browser/devtools/client/webconsole/test/" +
   "test-network.html";
 const TEST_URI = "data:text/html;charset=utf8,<p>test file URI";
 
 var hud;
 
-var test = asyncTest(function* () {
+add_task(function* () {
   let requests = [];
   let { browser } = yield loadTab(TEST_URI);
 
   yield pushPrefEnv();
   hud = yield openConsole();
   hud.jsterm.clearOutput();
 
   HUDService.lastFinishedRequest.callback = request => requests.push(request);
diff --git a/devtools/client/webconsole/test/browser_webconsole_notifications.js b/devtools/client/webconsole/test/browser_webconsole_notifications.js
--- a/devtools/client/webconsole/test/browser_webconsole_notifications.js
+++ b/devtools/client/webconsole/test/browser_webconsole_notifications.js
@@ -3,17 +3,17 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf-8,<p>Web Console test for " +
                  "notifications";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let consoleOpened = promise.defer();
   let gotEvents = waitForEvents(consoleOpened.promise);
   yield openConsole().then(() => {
     consoleOpened.resolve();
   });
 
diff --git a/devtools/client/webconsole/test/browser_webconsole_output_copy_newlines.js b/devtools/client/webconsole/test/browser_webconsole_output_copy_newlines.js
--- a/devtools/client/webconsole/test/browser_webconsole_output_copy_newlines.js
+++ b/devtools/client/webconsole/test/browser_webconsole_output_copy_newlines.js
@@ -1,17 +1,17 @@
 /* Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/ */
 
 // Test that multiple messages are copied into the clipboard and that they are
 // separated by new lines. See bug 916997.
 
 "use strict";
 
-var test = asyncTest(function*() {
+add_task(function*() {
   const TEST_URI = "data:text/html;charset=utf8,<p>hello world, bug 916997";
   let clipboardValue = "";
 
   yield loadTab(TEST_URI);
   let hud = yield openConsole();
   hud.jsterm.clearOutput();
 
   let controller = top.document.commandDispatcher
diff --git a/devtools/client/webconsole/test/browser_webconsole_output_events.js b/devtools/client/webconsole/test/browser_webconsole_output_events.js
--- a/devtools/client/webconsole/test/browser_webconsole_output_events.js
+++ b/devtools/client/webconsole/test/browser_webconsole_output_events.js
@@ -10,17 +10,17 @@
 
 thisTestLeaksUncaughtRejectionsAndShouldBeFixed("null");
 
 // Test the webconsole output for DOM events.
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-console-output-events.html";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   hud.jsterm.clearOutput();
   hud.jsterm.execute("testDOMEvents()");
 
   yield waitForMessages({
diff --git a/devtools/client/webconsole/test/browser_webconsole_output_order.js b/devtools/client/webconsole/test/browser_webconsole_output_order.js
--- a/devtools/client/webconsole/test/browser_webconsole_output_order.js
+++ b/devtools/client/webconsole/test/browser_webconsole_output_order.js
@@ -6,17 +6,17 @@
 // Tests that any output created from calls to the console API comes before the
 // echoed JavaScript.
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-console.html";
 
-var test = asyncTest(function*() {
+add_task(function*() {
   yield loadTab(TEST_URI);
   let hud = yield openConsole();
 
   let jsterm = hud.jsterm;
 
   jsterm.clearOutput();
   jsterm.execute("console.log('foo', 'bar');");
 
diff --git a/devtools/client/webconsole/test/browser_webconsole_reflow.js b/devtools/client/webconsole/test/browser_webconsole_reflow.js
--- a/devtools/client/webconsole/test/browser_webconsole_reflow.js
+++ b/devtools/client/webconsole/test/browser_webconsole_reflow.js
@@ -3,17 +3,17 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf-8,Web Console test for " +
                  "reflow activity";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   let { browser } = yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   function onReflowListenersReady() {
     browser.contentDocument.body.style.display = "none";
     browser.contentDocument.body.clientTop;
   }
diff --git a/devtools/client/webconsole/test/browser_webconsole_show_subresource_security_errors.js b/devtools/client/webconsole/test/browser_webconsole_show_subresource_security_errors.js
--- a/devtools/client/webconsole/test/browser_webconsole_show_subresource_security_errors.js
+++ b/devtools/client/webconsole/test/browser_webconsole_show_subresource_security_errors.js
@@ -9,17 +9,17 @@
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf-8,Web Console subresource STS " +
                  "warning test";
 const TEST_DOC = "https://example.com/browser/devtools/client/webconsole/" +
                  "test/test_bug1092055_shouldwarn.html";
 const SAMPLE_MSG = "specified a header that could not be parsed successfully.";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   let { browser } = yield loadTab(TEST_URI);
 
   let hud = yield openConsole();
 
   hud.jsterm.clearOutput();
 
   let loaded = loadBrowser(browser);
   content.location = TEST_DOC;
diff --git a/devtools/client/webconsole/test/browser_webconsole_strict_mode_errors.js b/devtools/client/webconsole/test/browser_webconsole_strict_mode_errors.js
--- a/devtools/client/webconsole/test/browser_webconsole_strict_mode_errors.js
+++ b/devtools/client/webconsole/test/browser_webconsole_strict_mode_errors.js
@@ -2,17 +2,17 @@
  * Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
 // Check that "use strict" JS errors generate errors, not warnings.
 
 "use strict";
 
-var test = asyncTest(function* () {
+add_task(function* () {
   // On e10s, the exception is triggered in child process
   // and is ignored by test harness
   if (!Services.appinfo.browserTabsRemoteAutostart) {
     expectUncaughtException();
   }
   yield loadTab("data:text/html;charset=utf8,<script>'use strict';var arguments;</script>");
 
   let hud = yield openConsole();
diff --git a/devtools/client/webconsole/test/head.js b/devtools/client/webconsole/test/head.js
--- a/devtools/client/webconsole/test/head.js
+++ b/devtools/client/webconsole/test/head.js
@@ -37,22 +37,16 @@ const SEVERITY_LOG = 3;
 const GROUP_INDENT = 12;
 
 const WEBCONSOLE_STRINGS_URI = "chrome://devtools/locale/" +
                                "webconsole.properties";
 var WCUL10n = new WebConsoleUtils.l10n(WEBCONSOLE_STRINGS_URI);
 
 DevToolsUtils.testing = true;
 
-function asyncTest(generator) {
-  return () => {
-    Task.spawn(generator).then(finishTest);
-  };
-}
-
 function loadTab(url) {
   let deferred = promise.defer();
 
   let tab = gBrowser.selectedTab = gBrowser.addTab(url);
   let browser = gBrowser.getBrowserForTab(tab);
 
   browser.addEventListener("load", function onLoad() {
     browser.removeEventListener("load", onLoad, true);
@@ -334,18 +328,22 @@ var finishTest = Task.async(function* ()
 registerCleanupFunction(function*() {
   DevToolsUtils.testing = false;
 
   // Remove stored console commands in between tests
   yield asyncStorage.removeItem("webConsoleHistory");
 
   dumpConsoles();
 
-  if (HUDService.getBrowserConsole()) {
-    HUDService.toggleBrowserConsole();
+  let browserConsole = HUDService.getBrowserConsole();
+  if (browserConsole) {
+    if (browserConsole.jsterm) {
+      browserConsole.jsterm.clearOutput(true);
+    }
+    yield HUDService.toggleBrowserConsole();
   }
 
   let target = TargetFactory.forTab(gBrowser.selectedTab);
   yield gDevTools.closeToolbox(target);
 
   while (gBrowser.tabs.length > 1) {
     gBrowser.removeCurrentTab();
   }
