# HG changeset patch
# Parent 0c7d62d3e2cfacc217d54911b5accb885814bd75
# User Brian Grinstead <bgrinstead@mozilla.com>
review changes, 2


diff --git a/browser/devtools/itchpad/lib/itchpad.js b/browser/devtools/itchpad/lib/itchpad.js
--- a/browser/devtools/itchpad/lib/itchpad.js
+++ b/browser/devtools/itchpad/lib/itchpad.js
@@ -235,33 +235,32 @@ var Itchpad = Class({
    * @param Promise
    *        Promise that is resolved once the project is ready to be used.
    */
   setProjectToSinglePath: function(path, opts = {}) {
     this.project.customOpts = opts;
     this.project.projectType = "APP_MANAGER";
     this.project.removeAllPaths();
     let localStore = this.project.addPath(path);
-    this.project.save();
 
     let defer = promise.defer();
     on(this, localStore, "ready", () => {
       defer.resolve();
     });
     return defer.promise;
   },
 
   /**
-   * Open a resource in a particular shell
+   * Open a resource in a particular shell.
    *
    * @param Resource resource
    *                 The file to be opened.
    */
   openResource: function(resource) {
-    let shell = this.shells.open(resource);
+    this.shells.open(resource);
     this.projectTree.select(resource);
   },
 
   /**
    * When a node is selected in the tree, open its associated editor.
    *
    * @param Resource resource
    *                 The file that has been selected
diff --git a/browser/devtools/itchpad/lib/plugins/drag-drop-new/lib/drag-drop-new.js b/browser/devtools/itchpad/lib/plugins/drag-drop-new/lib/drag-drop-new.js
--- a/browser/devtools/itchpad/lib/plugins/drag-drop-new/lib/drag-drop-new.js
+++ b/browser/devtools/itchpad/lib/plugins/drag-drop-new/lib/drag-drop-new.js
@@ -36,18 +36,16 @@ var DragDropNew = Class({
     var allTheFiles = event.dataTransfer.files || [];
 
     [...allTheFiles].forEach((file) => {
       let path = file.mozFullPath;
       if (file.type === "") {
         this.host.project.addPath(path);
       }
     });
-
-    this.host.project.save();
   },
 
   destroy: function() {
     this.dropzone.removeEventListener("dragover", this.onDragOver, true);
     this.dropzone.removeEventListener("drop", this.onDrop, true);
   }
 
 });
diff --git a/browser/devtools/itchpad/lib/project.js b/browser/devtools/itchpad/lib/project.js
--- a/browser/devtools/itchpad/lib/project.js
+++ b/browser/devtools/itchpad/lib/project.js
@@ -34,63 +34,56 @@ var Project = Class({
 
   initialize: function(info) {
     this.stores = new Set();
     this.localStores = new Map();
 
     this.load(info);
   },
 
-  toString: function() { return "[Project] " + this.name; },
+  toString: function() {
+    return "[Project] " + this.name;
+  },
 
   load: function(data) {
     this.id = data.id;
     this.name = data.name || "Untitled";
 
     let paths = new Set(data.directories.map(name => OS.Path.normalize(name)));
 
     for (let [path, store] of this.localStores) {
       if (!paths.has(path)) {
         this.removePath(path);
       }
     }
 
     for (let path of paths) {
       this.addPath(path);
     }
-
-  },
-
-  save: function() {
-    let data = emptyProject();
-
-    data.id = this.id;
-    data.name = this.name;
-    data.directories = [store.path for ([id, store] of this.localStores)];
-
-    // This is not async, but it could be if it was being stored in IDB.
-    emit(this, "project-saved");
-    return promise.resolve();
-  },
-
-  setName: function(name) {
-    this.name = name;
-    return this.save().then(() => {
-      emit(this, "name-change");
-    });
   },
 
   refresh: function() {
     return Task.spawn(function*() {
       for (let [path, store] of this.localStores) {
         yield store.refresh();
       }
     }.bind(this));
   },
 
+
+  /**
+   * Fetch a resource from the backing storage system for the store.
+   *
+   * @param string path
+   *               The path to fetch
+   * @param Object options
+   *               "create": bool indicating whether to create a file if it does not exist.
+   * @returns Promise
+   *          A promise that resolves with the Resource.
+   */
   resourceFor: function(path, options) {
     let store = this.storeContaining(path);
     return store.resourceFor(path, options);
   },
 
   allResources: function*() {
     for (let store of this.stores) {
       for (let [key, resource] of store.resources) {
diff --git a/browser/devtools/itchpad/lib/stores/local.js b/browser/devtools/itchpad/lib/stores/local.js
--- a/browser/devtools/itchpad/lib/stores/local.js
+++ b/browser/devtools/itchpad/lib/stores/local.js
@@ -88,16 +88,17 @@ var LocalStore = Class({
     this.resources.set(path, resource);
     return resource;
   },
 
   /**
    * Return a promise that resolves to a fully-functional FileResource
    * within this project.  This will hit the disk for stat info.
    * options:
+   *
    *   create: If true, a resource will be created even if the underlying
    *     file doesn't exist.
    */
   resourceFor: function(path, options) {
     path = OS.Path.normalize(path);
 
     if (this.resources.has(path)) {
       return promise.resolve(this.resources.get(path));
diff --git a/browser/devtools/itchpad/test/browser_itchpad_init_custom.js b/browser/devtools/itchpad/test/browser_itchpad_init_custom.js
--- a/browser/devtools/itchpad/test/browser_itchpad_init_custom.js
+++ b/browser/devtools/itchpad/test/browser_itchpad_init_custom.js
@@ -101,20 +101,26 @@ function* selectFile(itchpad, container)
   console.log("Test select file: ", container, container.isDir);
   ok (container && container.path, "A valid container has been passed in for selection " + (container && container.path));
   itchpad.projectTree.select(container);
 
   if (container.isDir) {
     return;
   }
 
-  let editor = yield whenEditorCreated(itchpad);
-  is (editor, itchpad.currentEditor,  "Editor has been updated for " + container.path);
-  editor = yield whenEditorLoad(itchpad);
-  is (editor,itchpad.currentEditor, "Editor has been loaded" + container.path);
+  return promise.all([
+    whenEditorCreated(itchpad),
+    // whenEditorLoad(itchpad)
+  ], (editorCreated, editorLoaded) => {
+    is (editorCreated, itchpad.currentEditor,  "Editor has been created for " + container.path);
+    // is (editorLoaded, itchpad.currentEditor,  "Editor has been loaded for " + container.path);
+  });
+  // let editor = yield whenEditorCreated(itchpad);
+  // editor = yield whenEditorLoad(itchpad);
+  // is (editor,itchpad.currentEditor, "Editor has been loaded" + container.path);
 }
 
 function* testEditFile(itchpad, filePath, newData) {
 
   info ("Testing edit for: " + filePath);
   let initialData = yield getFileData(filePath);
   let editor = itchpad.currentEditor;
   let resource = itchpad.resourceFor(editor);
