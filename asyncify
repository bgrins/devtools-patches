# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  d8aeb1f6915dc1b52571548b26f4b943b44dab1f
Part 2 -

diff --git a/devtools/client/framework/devtools.js b/devtools/client/framework/devtools.js
--- a/devtools/client/framework/devtools.js
+++ b/devtools/client/framework/devtools.js
@@ -409,17 +409,17 @@ DevTools.prototype = {
    * Restore the devtools session state as provided by SessionStore.
    */
   restoreDevToolsSession: function ({scratchpads, browserConsole}) {
     if (scratchpads) {
       ScratchpadManager.restoreSession(scratchpads);
     }
 
     if (browserConsole && !HUDService.getBrowserConsole()) {
-      HUDService.toggleBrowserConsole();
+      HUDService.openBrowserConsoleOrFocus();
     }
   },
 
   /**
    * Boolean, true, if we never opened a toolbox.
    * Used to implement the telemetry tracking toolbox opening.
    */
   _firstShowToolbox: true,
diff --git a/devtools/client/framework/toolbox.js b/devtools/client/framework/toolbox.js
--- a/devtools/client/framework/toolbox.js
+++ b/devtools/client/framework/toolbox.js
@@ -1014,17 +1014,17 @@ Toolbox.prototype = {
       let key = doc.createElement("key");
       key.id = "key_browserconsole";
 
       key.setAttribute("key", L10N.getStr("browserConsoleCmd.commandkey"));
       key.setAttribute("modifiers", "accel,shift");
       // needed. See bug 371900
       key.setAttribute("oncommand", "void(0)");
       key.addEventListener("command", () => {
-        HUDService.toggleBrowserConsole();
+        HUDService.openBrowserConsoleOrFocus();
       }, true);
       doc.getElementById("toolbox-keyset").appendChild(key);
     }
   },
 
   /**
    * Handle any custom key events.  Returns true if there was a custom key
    * binding run.
diff --git a/devtools/client/scratchpad/scratchpad.js b/devtools/client/scratchpad/scratchpad.js
--- a/devtools/client/scratchpad/scratchpad.js
+++ b/devtools/client/scratchpad/scratchpad.js
@@ -1571,17 +1571,17 @@ var Scratchpad = {
     }
   },
 
   /**
    * Open the Error Console.
    */
   openErrorConsole: function SP_openErrorConsole()
   {
-    HUDService.toggleBrowserConsole();
+    HUDService.openBrowserConsoleOrFocus();
   },
 
   /**
    * Open the Web Console.
    */
   openWebConsole: function SP_openWebConsole()
   {
     let target = TargetFactory.forTab(this.gBrowser.selectedTab);
diff --git a/devtools/client/scratchpad/test/browser_scratchpad_open_error_console.js b/devtools/client/scratchpad/test/browser_scratchpad_open_error_console.js
--- a/devtools/client/scratchpad/test/browser_scratchpad_open_error_console.js
+++ b/devtools/client/scratchpad/test/browser_scratchpad_open_error_console.js
@@ -22,17 +22,17 @@ function runTests()
   Services.obs.addObserver(function observer(aSubject) {
     Services.obs.removeObserver(observer, "web-console-created");
     aSubject.QueryInterface(Ci.nsISupportsString);
 
     let hud = HUDService.getBrowserConsole();
     ok(hud, "browser console is open");
     is(aSubject.data, hud.hudId, "notification hudId is correct");
 
-    HUDService.toggleBrowserConsole().then(finish);
+    HUDService.openBrowserConsoleOrFocus().then(finish);
   }, "web-console-created");
 
   let hud = HUDService.getBrowserConsole();
   ok(!hud, "browser console is not open");
   info("wait for the browser console to open from Scratchpad");
 
   gScratchpadWindow.Scratchpad.openErrorConsole();
 }
diff --git a/devtools/client/webconsole/hudservice.js b/devtools/client/webconsole/hudservice.js
--- a/devtools/client/webconsole/hudservice.js
+++ b/devtools/client/webconsole/hudservice.js
@@ -158,52 +158,44 @@ HUD_SERVICE.prototype =
     let toolbox = gDevTools.getToolbox(target);
     let panel = toolbox ? toolbox.getPanel("webconsole") : null;
     return panel ? panel.hud : null;
   },
 
   /**
    * Toggle the Browser Console.
    */
-  toggleBrowserConsole() {
+  async toggleBrowserConsole() {
     if (this._browserConsoleID) {
       let hud = this.getHudReferenceById(this._browserConsoleID);
       return hud.destroy();
     }
 
-    if (this._browserConsoleDefer) {
-      return this._browserConsoleDefer.promise;
-    }
+    // if (this._browserConsoleDefer) {
+    //   return this._browserConsoleDefer.promise;
+    // }
 
-    this._browserConsoleDefer = defer();
+    // this._browserConsoleDefer = defer();
 
-    function connect() {
+    async function connect() {
       // Ensure that the root actor and the tab actors have been registered on the
       // DebuggerServer, so that the Browser Console can retrieve the console actors.
       // (See Bug 1416105 for rationale).
       DebuggerServer.init();
       DebuggerServer.registerActors({ root: true, tab: true });
 
       DebuggerServer.allowChromeProcess = true;
 
       let client = new DebuggerClient(DebuggerServer.connectPipe());
-      return client.connect()
-        .then(() => client.getProcess())
-        .then(response => {
-          // Use a TabActor in order to ensure calling `attach` to the ChromeActor
-          return { form: response.form, client, chrome: true, isTabActor: true };
-        });
+      await client.connect();
+      let response = await client.getProcess();
+      return { form: response.form, client, chrome: true, isTabActor: true };
     }
 
-    let target;
-    function getTarget(connection) {
-      return TargetFactory.forRemoteTab(connection);
-    }
     function openWindow(t) {
-      target = t;
       return new Promise(resolve => {
         let browserConsoleURL = Tools.webConsole.browserConsoleURL;
         let win = Services.ww.openWindow(null, browserConsoleURL, "_blank",
                                          BC_WINDOW_FEATURES, null);
         win.addEventListener("DOMContentLoaded", () => {
           win.document.title = l10n.getStr("browserConsole.title");
           if (browserConsoleURL === Tools.webConsole.oldWebConsoleURL) {
             resolve({iframeWindow: win, chromeWindow: win});
@@ -211,25 +203,33 @@ HUD_SERVICE.prototype =
             win.document.querySelector("iframe").addEventListener("DOMContentLoaded",
               e => resolve({iframeWindow: e.target.defaultView, chromeWindow: win}),
               { once: true }
             );
           }
         }, {once: true});
       });
     }
-    connect().then(getTarget).then(openWindow).then(({iframeWindow, chromeWindow}) => {
-      return this.openBrowserConsole(target, iframeWindow, chromeWindow)
-        .then(browserConsole => {
-          this._browserConsoleDefer.resolve(browserConsole);
-          this._browserConsoleDefer = null;
-        });
-    }, console.error.bind(console));
+
+    let connection = await connect();
+    let target = await TargetFactory.forRemoteTab(connection);
+    let {iframeWindow, chromeWindow} = await openWindow(target);
+    let browserConsole =
+      await this.openBrowserConsole(target, iframeWindow, chromeWindow);
+    return browserConsole;
 
-    return this._browserConsoleDefer.promise;
+    // connect().then(getTarget).then(openWindow).then(({iframeWindow, chromeWindow}) => {
+    //   return this.openBrowserConsole(target, iframeWindow, chromeWindow)
+    //     .then(browserConsole => {
+    //       this._browserConsoleDefer.resolve(browserConsole);
+    //       this._browserConsoleDefer = null;
+    //     });
+    // }, console.error.bind(console));
+
+    // return this._browserConsoleDefer.promise;
   },
 
   /**
    * Opens or focuses the Browser Console.
    */
   openBrowserConsoleOrFocus() {
     let hud = this.getBrowserConsole();
     if (hud) {
diff --git a/devtools/client/webconsole/new-console-output/test/mochitest/browser_console_addonsdk_loader_exception.js b/devtools/client/webconsole/new-console-output/test/mochitest/browser_console_addonsdk_loader_exception.js
--- a/devtools/client/webconsole/new-console-output/test/mochitest/browser_console_addonsdk_loader_exception.js
+++ b/devtools/client/webconsole/new-console-output/test/mochitest/browser_console_addonsdk_loader_exception.js
@@ -18,17 +18,17 @@ function test() {
 
   Task.spawn(runner).then(finishTest);
 
   function* runner() {
     let {tab} = yield loadTab(TEST_URI);
     webconsole = yield openConsole(tab);
     ok(webconsole, "web console opened");
 
-    browserconsole = yield HUDService.toggleBrowserConsole();
+    browserconsole = yield HUDService.openBrowserConsoleOrFocus();
     ok(browserconsole, "browser console opened");
 
     // Cause an exception in a script loaded with the addon-sdk loader.
     let toolbox = gDevTools.getToolbox(webconsole.target);
     let oldPanels = toolbox._toolPanels;
     // non-iterable
     toolbox._toolPanels = {};
 
diff --git a/devtools/client/webconsole/new-console-output/test/mochitest/browser_console_clear_method.js b/devtools/client/webconsole/new-console-output/test/mochitest/browser_console_clear_method.js
--- a/devtools/client/webconsole/new-console-output/test/mochitest/browser_console_clear_method.js
+++ b/devtools/client/webconsole/new-console-output/test/mochitest/browser_console_clear_method.js
@@ -6,17 +6,17 @@
 // Check that console.clear() does not clear the output of the browser console.
 
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf8,<p>Bug 1296870";
 
 add_task(function* () {
   yield loadTab(TEST_URI);
-  let hud = yield HUDService.toggleBrowserConsole();
+  let hud = yield HUDService.openBrowserConsoleOrFocus();
 
   info("Log a new message from the content page");
   ContentTask.spawn(gBrowser.selectedBrowser, {}, function* () {
     content.wrappedJSObject.console.log("msg");
   });
   yield waitForMessage("msg", hud);
 
   info("Send a console.clear() from the content page");
diff --git a/devtools/shim/devtools-startup.js b/devtools/shim/devtools-startup.js
--- a/devtools/shim/devtools-startup.js
+++ b/devtools/shim/devtools-startup.js
@@ -652,26 +652,20 @@ DevToolsStartup.prototype = {
       url += "?" + params.join("&");
     }
 
     // Set relatedToCurrent: true to open the tab next to the current one.
     gBrowser.selectedTab = gBrowser.addTab(url, {relatedToCurrent: true});
   },
 
   handleConsoleFlag: function (cmdLine) {
-    let window = Services.wm.getMostRecentWindow("devtools:webconsole");
-    if (!window) {
-      let require = this.initDevTools("CommandLine");
-      let { HUDService } = require("devtools/client/webconsole/hudservice");
-      let { console } = Cu.import("resource://gre/modules/Console.jsm", {});
-      HUDService.toggleBrowserConsole().catch(console.error);
-    } else {
-      // the Browser Console was already open
-      window.focus();
-    }
+    let require = this.initDevTools("CommandLine");
+    let { HUDService } = require("devtools/client/webconsole/hudservice");
+    let { console } = Cu.import("resource://gre/modules/Console.jsm", {});
+    HUDService.openBrowserConsoleOrFocus().catch(console.error);
 
     if (cmdLine.state == Ci.nsICommandLine.STATE_REMOTE_AUTO) {
       cmdLine.preventDefault = true;
     }
   },
 
   // Open the toolbox on the selected tab once the browser starts up.
   handleDevToolsFlag: function (window) {
