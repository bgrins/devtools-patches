# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  d57bb5e90907bf46484736107e9490ba82ad8304

diff --git a/toolkit/content/customElements.js b/toolkit/content/customElements.js
--- a/toolkit/content/customElements.js
+++ b/toolkit/content/customElements.js
@@ -365,31 +365,44 @@
       inheritAttribute(list, attr) {
         if (!this._inheritedElements) {
           this._inheritedElements = {};
         }
 
         let hasAttr = this.hasAttribute(attr);
         let attrValue = this.getAttribute(attr);
 
+
+
+
         for (let [selector, newAttr] of list) {
           if (!(selector in this._inheritedElements)) {
             this._inheritedElements[
               selector
             ] = this.getElementForAttrInheritance(selector);
           }
           let el = this._inheritedElements[selector];
+          if (this.constructor.name == "MozArrowScrollbox") {
+            console.log(attr, el, hasAttr, attrValue, list);
+          }
           if (el) {
             if (newAttr == "text") {
               el.textContent = hasAttr ? attrValue : "";
             } else if (hasAttr) {
               el.setAttribute(newAttr, attrValue);
             } else {
               el.removeAttribute(newAttr);
             }
+          } else {
+            if (this.constructor.name == "MozArrowScrollbox") {
+            console.log("NO EL???", selector)
+            }
+          }
+          if (attr == "scrolledtoend") {
+            console.log(el, el.getAttribute("disabled"))
           }
         }
       }
 
       /**
        * Used in setting up attribute inheritance. Takes a selector and returns
        * an element for that selector from shadow DOM if there is a shadowRoot,
        * or from the light DOM if not.
