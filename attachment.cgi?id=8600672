# HG changeset patch
# User Gabriel Luong <gabriel.luong@gmail.com>
# Parent  d2d1cb97c9977af691e6d368e6c681d15e0572a4
Bug 1157293 - Part 3: Use filter-open and user-open attributes instead of classes r=bgrins

diff --git a/browser/devtools/styleinspector/rule-view.js b/browser/devtools/styleinspector/rule-view.js
--- a/browser/devtools/styleinspector/rule-view.js
+++ b/browser/devtools/styleinspector/rule-view.js
@@ -2111,17 +2111,17 @@
 
       if (isPropertyHighlighted || isComputedHighlighted) {
         isHighlighted = true;
       }
 
       // Expand the computed list if a computed rule is highlighted and the
       // property rule is not highlighted
       if (!isPropertyHighlighted && isComputedHighlighted &&
-          !editor.computed.classList.contains("user-open")) {
+          !editor.computed.hasAttribute("user-open")) {
         editor.expandForFilter();
         this._editorsExpandedForFilter.push(editor);
       }
     }
 
     return isHighlighted;
   },
 
@@ -3023,52 +3023,53 @@
     }
     this.prop.setEnabled(!checked);
     aEvent.stopPropagation();
   },
 
   /**
    * Handles clicks on the computed property expander. If the computed list is
    * open due to user expanding or style filtering, collapse the computed list
-   * and close the expander. Otherwise, add .user-open class which is used to
+   * and close the expander. Otherwise, add user-open attribute which is used to
    * expand the computed list and tracks whether or not the computed list is
    * expanded by manually by the user.
    */
   _onExpandClicked: function(aEvent) {
-    if (this.computed.classList.contains("filter-open") ||
-        this.computed.classList.contains("user-open")) {
+    if (this.computed.hasAttribute("filter-open") ||
+        this.computed.hasAttribute("user-open")) {
       this.expander.removeAttribute("open");
-      this.computed.classList.remove("filter-open");
-      this.computed.classList.remove("user-open");
+      this.computed.removeAttribute("filter-open");
+      this.computed.removeAttribute("user-open");
     } else {
       this.expander.setAttribute("open", "true");
-      this.computed.classList.add("user-open");
+      this.computed.setAttribute("user-open", "");
     }
 
     aEvent.stopPropagation();
   },
 
   /**
    * Expands the computed list when a computed property is matched by the style
-   * filtering. The .filter-open class is used to track whether or not the
+   * filtering. The filter-open attribute is used to track whether or not the
    * computed list was toggled opened by the filter.
    */
   expandForFilter: function() {
-    if (!this.computed.classList.contains("user-open")) {
-      this.computed.classList.add("filter-open");
+    if (!this.computed.hasAttribute("user-open")) {
       this.expander.setAttribute("open", "true");
+      this.computed.setAttribute("filter-open", "");
     }
   },
 
   /**
    * Collapses the computed list that was expanded by style filtering.
    */
   collapseForFilter: function() {
-    this.computed.classList.remove("filter-open");
-    if (!this.computed.classList.contains("user-open")) {
+    this.computed.removeAttribute("filter-open");
+
+    if (!this.computed.hasAttribute("user-open")) {
       this.expander.removeAttribute("open");
     }
   },
 
   /**
    * Called when the property name's inplace editor is closed.
    * Ignores the change if the user pressed escape, otherwise
    * commits it.
diff --git a/browser/devtools/styleinspector/ruleview.css b/browser/devtools/styleinspector/ruleview.css
--- a/browser/devtools/styleinspector/ruleview.css
+++ b/browser/devtools/styleinspector/ruleview.css
@@ -51,22 +51,23 @@
   cursor: text;
   padding-right: 15px;
 }
 
 .ruleview-propertyvaluecontainer a {
   cursor: pointer;
 }
 
-.ruleview-computedlist:not(.user-open),
+.ruleview-computedlist,
 .ruleview-warning[hidden] {
   display: none;
 }
 
-.ruleview-computedlist.filter-open {
+.ruleview-computedlist[user-open],
+.ruleview-computedlist[filter-open] {
   display: block;
 }
 
 .ruleview-expandable-container {
   display: none;
 }
 
 .show-expandable-container + .ruleview-expandable-container {
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_01.js b/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_01.js
--- a/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_01.js
+++ b/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_01.js
@@ -47,18 +47,17 @@
   let rule = getRuleViewRuleEditor(ruleView, 1).rule;
   let ruleEditor = rule.textProps[0].editor;
   let computed = ruleEditor.computed;
 
   is(rule.selectorText, "#testid", "Second rule is #testid.");
   ok(!ruleEditor.expander.getAttribute("open"), "Expander is closed.");
   ok(ruleEditor.container.classList.contains("ruleview-highlight"),
     "margin text property is correctly highlighted.");
-  ok(!computed.classList.contains("filter-open"),
-    "margin computed list is closed.");
+  ok(!computed.hasAttribute("filter-open"), "margin computed list is closed.");
 
   ok(!computed.children[0].classList.contains("ruleview-highlight"),
     "margin-top computed property is not highlighted.");
   ok(computed.children[1].classList.contains("ruleview-highlight"),
     "margin-right computed property is correctly highlighted.");
   ok(!computed.children[2].classList.contains("ruleview-highlight"),
     "margin-bottom computed property is not highlighted.");
   ok(computed.children[3].classList.contains("ruleview-highlight"),
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_02.js b/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_02.js
--- a/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_02.js
+++ b/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_02.js
@@ -47,18 +47,17 @@
   let rule = getRuleViewRuleEditor(ruleView, 1).rule;
   let ruleEditor = rule.textProps[0].editor;
   let computed = ruleEditor.computed;
 
   is(rule.selectorText, "#testid", "Second rule is #testid.");
   ok(!ruleEditor.expander.getAttribute("open"), "Expander is closed.");
   ok(ruleEditor.container.classList.contains("ruleview-highlight"),
     "margin text property is correctly highlighted.");
-  ok(!computed.classList.contains("filter-open"),
-    "margin computed list is closed.");
+  ok(!computed.hasAttribute("filter-open"), "margin computed list is closed.");
 
   ok(computed.children[0].classList.contains("ruleview-highlight"),
     "margin-top computed property is correctly highlighted.");
   ok(computed.children[1].classList.contains("ruleview-highlight"),
     "margin-right computed property is correctly highlighted.");
   ok(computed.children[2].classList.contains("ruleview-highlight"),
     "margin-bottom computed property is correctly highlighted.");
   ok(computed.children[3].classList.contains("ruleview-highlight"),
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_03.js b/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_03.js
--- a/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_03.js
+++ b/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_03.js
@@ -47,18 +47,17 @@
   let rule = getRuleViewRuleEditor(ruleView, 1).rule;
   let ruleEditor = rule.textProps[0].editor;
   let computed = ruleEditor.computed;
 
   is(rule.selectorText, "#testid", "Second rule is #testid.");
   ok(ruleEditor.expander.getAttribute("open"), "Expander is open.");
   ok(!ruleEditor.container.classList.contains("ruleview-highlight"),
     "margin text property is not highlighted.");
-  ok(computed.classList.contains("filter-open"),
-    "margin computed list is open.");
+  ok(computed.hasAttribute("filter-open"), "margin computed list is open.");
 
   ok(computed.children[0].classList.contains("ruleview-highlight"),
     "margin-top computed property is not highlighted.");
   ok(!computed.children[1].classList.contains("ruleview-highlight"),
     "margin-right computed property is not highlighted.");
   ok(!computed.children[2].classList.contains("ruleview-highlight"),
     "margin-bottom computed property is not highlighted.");
   ok(!computed.children[3].classList.contains("ruleview-highlight"),
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_04.js b/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_04.js
--- a/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_04.js
+++ b/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_04.js
@@ -47,18 +47,17 @@
   let rule = getRuleViewRuleEditor(ruleView, 1).rule;
   let ruleEditor = rule.textProps[0].editor;
   let computed = ruleEditor.computed;
 
   is(rule.selectorText, "#testid", "Second rule is #testid.");
   ok(!ruleEditor.expander.getAttribute("open"), "Expander is closed.");
   ok(ruleEditor.container.classList.contains("ruleview-highlight"),
     "margin text property is correctly highlighted.");
-  ok(!computed.classList.contains("filter-open"),
-    "margin computed list is closed.");
+  ok(!computed.hasAttribute("filter-open"), "margin computed list is closed.");
 
   ok(computed.children[0].classList.contains("ruleview-highlight"),
     "margin-top computed property is correctly highlighted.");
   ok(!computed.children[1].classList.contains("ruleview-highlight"),
     "margin-right computed property is not highlighted.");
   ok(computed.children[2].classList.contains("ruleview-highlight"),
     "margin-bottom computed property is correctly highlighted.");
   ok(!computed.children[3].classList.contains("ruleview-highlight"),
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_05.js b/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_05.js
--- a/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_05.js
+++ b/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_05.js
@@ -47,18 +47,17 @@
   let rule = getRuleViewRuleEditor(ruleView, 1).rule;
   let ruleEditor = rule.textProps[0].editor;
   let computed = ruleEditor.computed;
 
   is(rule.selectorText, "#testid", "Second rule is #testid.");
   ok(ruleEditor.expander.getAttribute("open"), "Expander is open.");
   ok(!ruleEditor.container.classList.contains("ruleview-highlight"),
     "margin text property is not highlighted.");
-  ok(computed.classList.contains("filter-open"),
-    "margin computed list is open.");
+  ok(computed.hasAttribute("filter-open"), "margin computed list is open.");
 
   ok(computed.children[0].classList.contains("ruleview-highlight"),
     "margin-top computed property is correctly highlighted.");
   ok(!computed.children[1].classList.contains("ruleview-highlight"),
     "margin-right computed property is not highlighted.");
   ok(!computed.children[2].classList.contains("ruleview-highlight"),
     "margin-bottom computed property is not highlighted.");
   ok(!computed.children[3].classList.contains("ruleview-highlight"),
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_06.js b/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_06.js
--- a/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_06.js
+++ b/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_06.js
@@ -48,18 +48,17 @@
   let rule = getRuleViewRuleEditor(ruleView, 1).rule;
   let ruleEditor = rule.textProps[0].editor;
   let computed = ruleEditor.computed;
 
   is(rule.selectorText, "#testid", "Second rule is #testid.");
   ok(ruleEditor.expander.getAttribute("open"), "Expander is open.");
   ok(!ruleEditor.container.classList.contains("ruleview-highlight"),
     "margin text property is not highlighted.");
-  ok(computed.classList.contains("filter-open"),
-    "margin computed list is open.");
+  ok(computed.hasAttribute("filter-open"), "margin computed list is open.");
 
   ok(computed.children[0].classList.contains("ruleview-highlight"),
     "margin-top computed property is correctly highlighted.");
   ok(computed.children[1].classList.contains("ruleview-highlight"),
     "margin-right computed property is correctly highlighted.");
   ok(computed.children[2].classList.contains("ruleview-highlight"),
     "margin-bottom computed property is correctly highlighted.");
   ok(computed.children[3].classList.contains("ruleview-highlight"),
@@ -85,18 +84,17 @@
   let rule = getRuleViewRuleEditor(ruleView, 1).rule;
   let ruleEditor = rule.textProps[0].editor;
   let computed = ruleEditor.computed;
 
   is(rule.selectorText, "#testid", "Second rule is #testid.");
   ok(!ruleEditor.expander.getAttribute("open"), "Expander is closed.");
   ok(ruleEditor.container.classList.contains("ruleview-highlight"),
     "margin text property is correctly highlighted.");
-  ok(!computed.classList.contains("filter-open"),
-    "margin computed list is closed.");
+  ok(!computed.hasAttribute("filter-open"), "margin computed list is closed.");
 
   ok(computed.children[0].classList.contains("ruleview-highlight"),
     "margin-top computed property is correctly highlighted.");
   ok(computed.children[1].classList.contains("ruleview-highlight"),
     "margin-right computed property is correctly highlighted.");
   ok(computed.children[2].classList.contains("ruleview-highlight"),
     "margin-bottom computed property is correctly highlighted.");
   ok(computed.children[3].classList.contains("ruleview-highlight"),
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_clear.js b/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_clear.js
--- a/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_clear.js
+++ b/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_clear.js
@@ -48,18 +48,17 @@
   let rule = getRuleViewRuleEditor(ruleView, 1).rule;
   let ruleEditor = rule.textProps[0].editor;
   let computed = ruleEditor.computed;
 
   is(rule.selectorText, "#testid", "Second rule is #testid.");
   ok(!ruleEditor.expander.getAttribute("open"), "Expander is closed.");
   ok(ruleEditor.container.classList.contains("ruleview-highlight"),
     "margin text property is correctly highlighted.");
-  ok(!computed.classList.contains("filter-open"),
-    "margin computed list is closed.");
+  ok(!computed.hasAttribute("filter-open"), "margin computed list is closed.");
 
   ok(!computed.children[0].classList.contains("ruleview-highlight"),
     "margin-top computed property is not highlighted.");
   ok(computed.children[1].classList.contains("ruleview-highlight"),
     "margin-right computed property is correctly highlighted.");
   ok(!computed.children[2].classList.contains("ruleview-highlight"),
     "margin-bottom computed property is not highlighted.");
   ok(computed.children[3].classList.contains("ruleview-highlight"),
@@ -84,11 +83,10 @@
   ok(!searchField.value, "Search filter is cleared");
   ok(!doc.querySelectorAll(".ruleview-highlight").length,
     "No rules are higlighted");
 
   let ruleEditor = getRuleViewRuleEditor(ruleView, 1).rule.textProps[0].editor;
   let computed = ruleEditor.computed;
 
   ok(!ruleEditor.expander.getAttribute("open"), "Expander is closed.");
-  ok(!computed.classList.contains("filter-open"),
-    "margin computed list is closed.");
+  ok(!computed.hasAttribute("filter-open"), "margin computed list is closed.");
 }
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_expander.js b/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_expander.js
--- a/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_expander.js
+++ b/browser/devtools/styleinspector/test/browser_ruleview_search-filter-computed-list_expander.js
@@ -49,20 +49,20 @@
   is(ruleView.element.children.length, 2, "Should have 2 rules.");
   is(getRuleViewRuleEditor(ruleView, 0).rule.selectorText, "element",
     "First rule is inline element.");
 
   is(rule.selectorText, "#testid", "Second rule is #testid.");
   ok(ruleEditor.expander.getAttribute("open"), "Expander is open.");
   ok(ruleEditor.container.classList.contains("ruleview-highlight"),
     "margin text property is correctly highlighted.");
-  ok(!computed.classList.contains("filter-open"),
+  ok(!computed.hasAttribute("filter-open"),
     "margin computed list does not contain filter-open class.");
-  ok(computed.classList.contains("user-open"),
-    "margin computed list contains user-open class.");
+  ok(computed.hasAttribute("user-open"),
+    "margin computed list contains user-open attribute.");
 
   ok(!computed.children[0].classList.contains("ruleview-highlight"),
     "margin-top computed property is not highlighted.");
   ok(computed.children[1].classList.contains("ruleview-highlight"),
     "margin-right computed property is correctly highlighted.");
   ok(!computed.children[2].classList.contains("ruleview-highlight"),
     "margin-bottom computed property is not highlighted.");
   ok(computed.children[3].classList.contains("ruleview-highlight"),
@@ -87,13 +87,13 @@
   ok(!searchField.value, "Search filter is cleared");
   ok(!doc.querySelectorAll(".ruleview-highlight").length,
     "No rules are higlighted");
 
   let ruleEditor = getRuleViewRuleEditor(ruleView, 1).rule.textProps[0].editor;
   let computed = ruleEditor.computed;
 
   ok(ruleEditor.expander.getAttribute("open"), "Expander is open.");
-  ok(!computed.classList.contains("filter-open"),
+  ok(!computed.hasAttribute("filter-open"),
     "margin computed list does not contain filter-open class.");
-  ok(computed.classList.contains("user-open"),
-    "margin computed list contains user-open class.");
+  ok(computed.hasAttribute("user-open"),
+    "margin computed list contains user-open attribute.");
 }
