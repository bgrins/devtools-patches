# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  16047d4093becc3b8298bdd3b1e15ec1c4a7c34a
Bug 1249709 - Expose console through worker loader;r=ejpbruel

MozReview-Commit-ID: LqQozx0MIiV

diff --git a/devtools/server/actors/webconsole.js b/devtools/server/actors/webconsole.js
--- a/devtools/server/actors/webconsole.js
+++ b/devtools/server/actors/webconsole.js
@@ -9,16 +9,24 @@
 const Services = require("Services");
 const { Cc, Ci, Cu } = require("chrome");
 const { DebuggerServer, ActorPool } = require("devtools/server/main");
 const { EnvironmentActor } = require("devtools/server/actors/environment");
 const { ThreadActor } = require("devtools/server/actors/script");
 const { ObjectActor, LongStringActor, createValueGrip, stringIsLong } = require("devtools/server/actors/object");
 const DevToolsUtils = require("devtools/shared/DevToolsUtils");
 
+// STR log not showing up in stdout:
+// 1) Set devtools.debugger.workers
+// 2) Load https://bgrins.github.io/devtools-demos/worker/webworker.html
+// 3) Open debugger and click on hello-worker.js?0
+// 4) Switch to console panel in new window that's popped up
+dump("Console object: " + console.toSource() + " console.log: " + console.log + "\n");
+console.log("Creating webconsole actor", isWorker);
+
 loader.lazyRequireGetter(this, "NetworkMonitor", "devtools/shared/webconsole/network-monitor", true);
 loader.lazyRequireGetter(this, "NetworkMonitorChild", "devtools/shared/webconsole/network-monitor", true);
 loader.lazyRequireGetter(this, "ConsoleProgressListener", "devtools/shared/webconsole/network-monitor", true);
 loader.lazyRequireGetter(this, "events", "sdk/event/core");
 loader.lazyRequireGetter(this, "ServerLoggingListener", "devtools/shared/webconsole/server-logger", true);
 loader.lazyRequireGetter(this, "JSPropertyProvider", "devtools/shared/webconsole/js-property-provider", true);
 loader.lazyRequireGetter(this, "Parser", "resource://devtools/shared/Parser.jsm", true);
 
diff --git a/devtools/shared/worker/loader.js b/devtools/shared/worker/loader.js
--- a/devtools/shared/worker/loader.js
+++ b/devtools/shared/worker/loader.js
@@ -364,16 +364,17 @@ var loader = {
 // object to implement them. On worker threads, we use the APIs provided by
 // the worker debugger.
 
 var {
   Debugger,
   URL,
   createSandbox,
   dump,
+  console,
   rpc,
   loadSubScript,
   reportError,
   setImmediate,
   xpcInspector
 } = (function () {
   if (typeof Components === "object") { // Main thread
     let {
@@ -427,16 +428,17 @@ var {
     let xpcInspector = Cc["@mozilla.org/jsinspector;1"].
                        getService(Ci.nsIJSInspector);
 
     return {
       Debugger,
       URL: this.URL,
       createSandbox,
       dump: this.dump,
+      console: this.console,
       rpc,
       loadSubScript,
       reportError,
       setImmediate,
       xpcInspector
     };
   } else { // Worker thread
     let requestors = [];
@@ -465,16 +467,17 @@ var {
       }
     };
 
     return {
       Debugger: this.Debugger,
       URL: this.URL,
       createSandbox: this.createSandbox,
       dump: this.dump,
+      console: this.console,
       rpc: this.rpc,
       loadSubScript: this.loadSubScript,
       reportError: this.reportError,
       setImmediate: this.setImmediate,
       xpcInspector: xpcInspector
     };
   }
 }).call(this);
@@ -482,16 +485,17 @@ var {
 // Create the default instance of the worker loader, using the APIs we defined
 // above.
 
 this.worker = new WorkerDebuggerLoader({
   createSandbox: createSandbox,
   globals: {
     "isWorker": true,
     "dump": dump,
+    "console": console,
     "loader": loader,
     "reportError": reportError,
     "rpc": rpc,
     "setImmediate": setImmediate
   },
   loadSubScript: loadSubScript,
   modules: {
     "Debugger": Debugger,
