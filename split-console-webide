# HG changeset patch
# Parent d3142f80fcf9273e5a6ff4120d1a3db00d4ca030
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 964819 - Be able to mark gcli commands as remote safe and let them show up as command buttons;r=jwalker

diff --git a/browser/devtools/framework/toolbox.js b/browser/devtools/framework/toolbox.js
--- a/browser/devtools/framework/toolbox.js
+++ b/browser/devtools/framework/toolbox.js
@@ -53,17 +53,18 @@ loader.lazyGetter(this, "InspectorFront"
 const ToolboxButtons = [
   { id: "command-button-pick",
     isTargetSupported: target => !target.isAddon },
   { id: "command-button-frames",
     isTargetSupported: target => (
       !target.isAddon && target.activeTab && target.activeTab.traits.frames
     )
   },
-  { id: "command-button-splitconsole" },
+  { id: "command-button-splitconsole",
+    isTargetSupported: target => !target.isAddon },
   { id: "command-button-responsive" },
   { id: "command-button-paintflashing" },
   { id: "command-button-tilt" },
   { id: "command-button-scratchpad" },
   { id: "command-button-eyedropper" },
   { id: "command-button-screenshot" }
 ];
 
@@ -614,29 +615,28 @@ Toolbox.prototype = {
   /**
    * Add buttons to the UI as specified in the devtools.toolbox.toolbarSpec pref
    */
   _buildButtons: function() {
     if (!this.target.isAddon) {
       this._buildPickerButton();
     }
 
-    if (!this.target.isLocalTab) {
-      this.setToolboxButtonsVisibility();
-      return Promise.resolve();
-    }
-
     let spec = CommandUtils.getCommandbarSpec("devtools.toolbox.toolbarSpec");
     let environment = CommandUtils.createEnvironment(this, '_target');
     return CommandUtils.createRequisition(environment).then(requisition => {
       this._requisition = requisition;
       return CommandUtils.createButtons(spec, this.target, this.doc,
                                         requisition).then(buttons => {
         let container = this.doc.getElementById("toolbox-buttons");
-        buttons.forEach(container.appendChild.bind(container));
+        buttons.forEach(button=> {
+          if (button) {
+            container.appendChild(button);
+          }
+        });
         this.setToolboxButtonsVisibility();
       });
     });
   },
 
   /**
    * Adding the element picker button is done here unlike the other buttons
    * since we want it to work for remote targets too
@@ -1509,17 +1509,17 @@ Toolbox.prototype = {
         this._pickerButton.removeEventListener("command", this._togglePicker, false);
         this._pickerButton = null;
       }
     }));
 
     // Remove the host UI
     outstanding.push(this.destroyHost());
 
-    if (this.target.isLocalTab) {
+    if (this._requisition) {
       this._requisition.destroy();
     }
     this._telemetry.toolClosed("toolbox");
     this._telemetry.destroy();
 
     return this._destroyer = promise.all(outstanding).then(() => {
       // Targets need to be notified that the toolbox is being torn down.
       // This is done after other destruction tasks since it may tear down
diff --git a/browser/devtools/shared/DeveloperToolbar.jsm b/browser/devtools/shared/DeveloperToolbar.jsm
--- a/browser/devtools/shared/DeveloperToolbar.jsm
+++ b/browser/devtools/shared/DeveloperToolbar.jsm
@@ -99,16 +99,23 @@ let CommandUtils = {
       return requisition.update(typed).then(() => {
         let button = document.createElement("toolbarbutton");
 
         // Ignore invalid commands
         let command = requisition.commandAssignment.value;
         if (command == null) {
           throw new Error("No command '" + typed + "'");
         }
+
+        // Do not build a button for a non-remote safe command in a non-local target.
+        if (!target.isLocalTab && !command.isRemoteSafe) {
+          requisition.clear();
+          return;
+        }
+
         if (command.buttonId != null) {
           button.id = command.buttonId;
           if (command.buttonClass != null) {
             button.className = command.buttonClass;
           }
         }
         else {
           button.setAttribute("text-as-image", "true");
diff --git a/browser/devtools/webconsole/console-commands.js b/browser/devtools/webconsole/console-commands.js
--- a/browser/devtools/webconsole/console-commands.js
+++ b/browser/devtools/webconsole/console-commands.js
@@ -9,16 +9,17 @@ const { gDevTools } = require("resource:
 
 exports.items = [
   {
     name: 'splitconsole',
     hidden: true,
     buttonId: "command-button-splitconsole",
     buttonClass: "command-button command-button-invertable",
     tooltipText: gcli.lookup("splitconsoleTooltip"),
+    isRemoteSafe: true,
     state: {
       isChecked: function(target) {
         let toolbox = gDevTools.getToolbox(target);
         return !!(toolbox && toolbox.splitConsole);
       },
       onChange: function(target, changeHandler) {
         // Register handlers for when a change event should be fired
         // (which resets the checked state of the button).
