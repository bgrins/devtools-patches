# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  49261432fe8a3b029ed5fc45c8e41c4814a769c6
Bug 1436076 - Remove toggleBrowserConsole

diff --git a/devtools/client/framework/devtools.js b/devtools/client/framework/devtools.js
--- a/devtools/client/framework/devtools.js
+++ b/devtools/client/framework/devtools.js
@@ -409,17 +409,17 @@ DevTools.prototype = {
    * Restore the devtools session state as provided by SessionStore.
    */
   restoreDevToolsSession: function ({scratchpads, browserConsole}) {
     if (scratchpads) {
       ScratchpadManager.restoreSession(scratchpads);
     }
 
     if (browserConsole && !HUDService.getBrowserConsole()) {
-      HUDService.toggleBrowserConsole();
+      HUDService.openBrowserConsoleOrFocus();
     }
   },
 
   /**
    * Boolean, true, if we never opened a toolbox.
    * Used to implement the telemetry tracking toolbox opening.
    */
   _firstShowToolbox: true,
diff --git a/devtools/client/framework/toolbox.js b/devtools/client/framework/toolbox.js
--- a/devtools/client/framework/toolbox.js
+++ b/devtools/client/framework/toolbox.js
@@ -1014,17 +1014,17 @@ Toolbox.prototype = {
       let key = doc.createElement("key");
       key.id = "key_browserconsole";
 
       key.setAttribute("key", L10N.getStr("browserConsoleCmd.commandkey"));
       key.setAttribute("modifiers", "accel,shift");
       // needed. See bug 371900
       key.setAttribute("oncommand", "void(0)");
       key.addEventListener("command", () => {
-        HUDService.toggleBrowserConsole();
+        HUDService.openBrowserConsoleOrFocus();
       }, true);
       doc.getElementById("toolbox-keyset").appendChild(key);
     }
   },
 
   /**
    * Handle any custom key events.  Returns true if there was a custom key
    * binding run.
diff --git a/devtools/client/scratchpad/scratchpad.js b/devtools/client/scratchpad/scratchpad.js
--- a/devtools/client/scratchpad/scratchpad.js
+++ b/devtools/client/scratchpad/scratchpad.js
@@ -1571,17 +1571,17 @@ var Scratchpad = {
     }
   },
 
   /**
    * Open the Error Console.
    */
   openErrorConsole: function SP_openErrorConsole()
   {
-    HUDService.toggleBrowserConsole();
+    HUDService.openBrowserConsoleOrFocus();
   },
 
   /**
    * Open the Web Console.
    */
   openWebConsole: function SP_openWebConsole()
   {
     let target = TargetFactory.forTab(this.gBrowser.selectedTab);
diff --git a/devtools/shim/devtools-startup.js b/devtools/shim/devtools-startup.js
--- a/devtools/shim/devtools-startup.js
+++ b/devtools/shim/devtools-startup.js
@@ -652,26 +652,20 @@ DevToolsStartup.prototype = {
       url += "?" + params.join("&");
     }
 
     // Set relatedToCurrent: true to open the tab next to the current one.
     gBrowser.selectedTab = gBrowser.addTab(url, {relatedToCurrent: true});
   },
 
   handleConsoleFlag: function (cmdLine) {
-    let window = Services.wm.getMostRecentWindow("devtools:webconsole");
-    if (!window) {
-      let require = this.initDevTools("CommandLine");
-      let { HUDService } = require("devtools/client/webconsole/hudservice");
-      let { console } = Cu.import("resource://gre/modules/Console.jsm", {});
-      HUDService.toggleBrowserConsole().catch(console.error);
-    } else {
-      // the Browser Console was already open
-      window.focus();
-    }
+    let require = this.initDevTools("CommandLine");
+    let { HUDService } = require("devtools/client/webconsole/hudservice");
+    let { console } = Cu.import("resource://gre/modules/Console.jsm", {});
+    HUDService.openBrowserConsoleOrFocus().catch(console.error);
 
     if (cmdLine.state == Ci.nsICommandLine.STATE_REMOTE_AUTO) {
       cmdLine.preventDefault = true;
     }
   },
 
   // Open the toolbox on the selected tab once the browser starts up.
   handleDevToolsFlag: function (window) {
