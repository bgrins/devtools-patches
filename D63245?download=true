diff --git a/devtools/client/responsive/components/App.js b/devtools/client/responsive/components/App.js
--- a/devtools/client/responsive/components/App.js
+++ b/devtools/client/responsive/components/App.js
@@ -393,6 +393,10 @@
   }
 
   onUpdateDeviceSelectorMenu(isOpen) {
+    // Guarantee a fixed height for the HTMLTooltip to render inside.
+    const toolbar  = window.parent.document.querySelector(".rdm-toolbar");
+    toolbar.style.height = isOpen ? "100%" : "";
+
     if (Services.prefs.getBoolPref("devtools.responsive.browserUI.enabled")) {
       window.postMessage({ type: "update-device-selector-menu", isOpen }, "*");
     }
diff --git a/devtools/client/responsive/responsive-browser.css b/devtools/client/responsive/responsive-browser.css
--- a/devtools/client/responsive/responsive-browser.css
+++ b/devtools/client/responsive/responsive-browser.css
@@ -18,14 +18,10 @@
 
 .browserContainer.responsive-mode .browserStack > .rdm-toolbar {
   border: none;
-  position: absolute;
-  width: 100%;
-}
-
-.browserContainer.responsive-mode .browserStack.device-selector-menu-opened > .rdm-toolbar,
-.browserContainer.responsive-mode .browserStack.device-modal-opened > .rdm-toolbar {
+  position: fixed;
   z-index: 1;
-  height: 100%;
+  height: 30px;
+  width: 100%;
 }
 
 .browserContainer.responsive-mode > .browserStack {
diff --git a/devtools/client/responsive/ui.js b/devtools/client/responsive/ui.js
--- a/devtools/client/responsive/ui.js
+++ b/devtools/client/responsive/ui.js
@@ -55,6 +55,8 @@
   "devtools/shared/screenshot/save"
 );
 
+const UA_INPUT_HEIGHT = "60px";
+
 const TOOL_URL = "chrome://devtools/content/responsive/index.xhtml";
 
 const RELOAD_CONDITION_PREF_PREFIX = "devtools.responsive.reloadConditions.";
@@ -307,6 +309,28 @@
 
     this.resizeHandleY = resizeHandleY;
     this.resizeHandleY.addEventListener("mousedown", this.onResizeStart);
+
+    // Setup a ResizeObserver that sets the width of the toolbar to the width of the
+    // .browserStack.
+    this.resizeToolbarObserver = new this.browserWindow.ResizeObserver(
+      entries => {
+        for (const entry of entries) {
+          const { width } = entry.contentRect;
+
+          this.rdmFrame.style.setProperty("width", `${width}px`);
+
+          // If the toolbar needs extra space for the UA input, then set its height to
+          // 60px to accomodate it.
+          if (!this.rdmFrame.classList.contains("device-modal-opened") && width < 520) {
+            this.rdmFrame.style.setProperty("height", UA_INPUT_HEIGHT);
+          } else {
+            this.rdmFrame.style.removeProperty("height");
+          }
+        }
+      }
+    );
+
+    this.resizeToolbarObserver.observe(this.browserStackEl);
   }
 
   /**
@@ -364,6 +388,13 @@
     } else {
       this.browserWindow.removeEventListener("FullZoomChange", this);
       this.rdmFrame.contentWindow.removeEventListener("message", this);
+
+      // Remove observers on the stack.
+      this.resizeToolbarObserver.unobserve(this.browserStackEl);
+      if (this.resizeModalObserver) {
+        this.resizeModalObserver.unobserve(this.browserStackEl);
+      }
+
       this.rdmFrame.remove();
 
       // Clean up resize handlers
@@ -410,6 +441,8 @@
     this.resizeHandleY = null;
     this.toolWindow = null;
     this.swap = null;
+    this.resizeToolbarObserver = null;
+    this.resizeModalObserver = null;
 
     // Close the devtools client used to speak with responsive emulation actor.
     // The actor handles clearing any overrides itself, so it's not necessary to clear
@@ -756,10 +789,28 @@
   }
 
   onUpdateDeviceModal(event) {
-    this.browserStackEl.classList.toggle(
-      "device-modal-opened",
-      event.data.isOpen
-    );
+    // By setting this observer the device modal's height can resize responsively with
+    // the .browserStack instead of taking up height in relation to the viewport
+    // (because the toolbar is position: fixed).
+    if (!this.resizeModalObserver) {
+      this.resizeModalObserver = new this.browserWindow.ResizeObserver(
+        entries => {
+          for (const entry of entries) {
+            const { height } = entry.contentRect;
+            this.rdmFrame.style.setProperty("height", `${height}px`);
+          }
+        }
+      );
+    }
+
+    if (event.data.isOpen) {
+      this.browserStackEl.classList.add("device-modal-opened");
+      this.resizeModalObserver.observe(this.browserStackEl);
+    } else {
+      this.browserStackEl.classList.remove("device-modal-opened");
+      this.rdmFrame.style.setProperty("height", null);
+      this.resizeModalObserver.unobserve(this.browserStackEl);
+    }
   }
 
   onUpdateDeviceSelectorMenu(event) {

