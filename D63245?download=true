# HG changeset patch
# Parent  a5e2eb343af7ca8c6e98869d276e47c84a2c88af

diff --git a/devtools/client/responsive/index.css b/devtools/client/responsive/index.css
--- a/devtools/client/responsive/index.css
+++ b/devtools/client/responsive/index.css
@@ -183,16 +183,22 @@ input:-moz-focusring {
 }
 
 #user-agent-input {
   margin-inline-start: 3px;
   flex: 1;
 }
 
 @media (max-width: 520px) {
+  html,
+  body,
+  #root {
+    min-height: 60px;
+  }
+
   /* When room becomes scarce, no need to constrain the selectors with a minmax like we
      do in larger viewports, here they can occupy 1fr */
   #toolbar.user-agent #toolbar-center-controls {
     grid-template-columns:
       [device-selector]
       .8fr
       [separator]
       max-content
diff --git a/devtools/client/responsive/responsive-browser.css b/devtools/client/responsive/responsive-browser.css
--- a/devtools/client/responsive/responsive-browser.css
+++ b/devtools/client/responsive/responsive-browser.css
@@ -13,24 +13,26 @@
 }
 
 .browserContainer.responsive-mode {
   background-color: var(--rdm-browser-container-background);
 }
 
 .browserContainer.responsive-mode .browserStack > .rdm-toolbar {
   border: none;
-  position: absolute;
+  position: fixed;
+  z-index: 1;
+  height: 30px;
   width: 100%;
 }
 
-.browserContainer.responsive-mode .browserStack.device-selector-menu-opened > .rdm-toolbar,
-.browserContainer.responsive-mode .browserStack.device-modal-opened > .rdm-toolbar {
-  z-index: 1;
-  height: 100%;
+.browserContainer.responsive-mode > .browserStack.device-modal-opened > .rdm-toolbar,
+.browserContainer.responsive-mode > .browserStack.device-selector-menu-opened > .rdm-toolbar {
+  position: absolute;
+  height: 100% !important;
 }
 
 .browserContainer.responsive-mode > .browserStack {
   --resizer-offset: 4px;
   --browser-viewport-width: calc(var(--rdm-width) + var(--resizer-offset));
   --browser-viewport-height: calc(var(--rdm-height) + var(--resizer-offset));
   min-height: 0;
   min-width: 0;
diff --git a/devtools/client/responsive/ui.js b/devtools/client/responsive/ui.js
--- a/devtools/client/responsive/ui.js
+++ b/devtools/client/responsive/ui.js
@@ -293,25 +293,44 @@ class ResponsiveUI {
       message.wait(rdmFrame.contentWindow, "init:done").then(() => {
         rdmFrame.contentWindow.addInitialViewport({
           userContextId: this.tab.userContextId,
         });
       });
     });
 
     this.rdmFrame = rdmFrame;
-
     this.resizeHandle = resizeHandle;
     this.resizeHandle.addEventListener("mousedown", this.onResizeStart);
 
     this.resizeHandleX = resizeHandleX;
     this.resizeHandleX.addEventListener("mousedown", this.onResizeStart);
 
     this.resizeHandleY = resizeHandleY;
     this.resizeHandleY.addEventListener("mousedown", this.onResizeStart);
+
+    // Setup a ResizeObserver that sets the height of the toolbar appropriately.
+    this.resizeToolbarObserver = new this.browserWindow.ResizeObserver(
+      entries => {
+        if (this.browserStackEl.classList.contains("device-modal-opened")) {
+          // When the mobiel
+          // for (const entry of entries) {
+          //   const { height } = entry.contentRect;
+          //   this.rdmFrame.style.setProperty("height", `${height}px`);
+          // }
+        } else {
+          // In case the frame gets changes size (when wrapping content due to
+          // changing width
+          // const { scrollHeight } = this.rdmFrame.contentWindow.document.body;
+          // this.rdmFrame.style.setProperty("height", `${scrollHeight}px`);
+        }
+      }
+    );
+
+    this.resizeToolbarObserver.observe(this.browserStackEl);
   }
 
   /**
    * Close RDM and restore page content back into a regular tab.
    *
    * @param object
    *        Destroy options, which currently includes a `reason` string.
    * @return boolean
@@ -359,16 +378,23 @@ class ResponsiveUI {
     this.browserWindow.removeEventListener("unload", this);
 
     if (!this.isBrowserUIEnabled) {
       this.tab.linkedBrowser.removeEventListener("FullZoomChange", this);
       this.toolWindow.removeEventListener("message", this);
     } else {
       this.browserWindow.removeEventListener("FullZoomChange", this);
       this.rdmFrame.contentWindow.removeEventListener("message", this);
+
+      // Remove observers on the stack.
+      this.resizeToolbarObserver.unobserve(this.browserStackEl);
+      // if (this.resizeModalObserver) {
+      //   this.resizeModalObserver.unobserve(this.browserStackEl);
+      // }
+
       this.rdmFrame.remove();
 
       // Clean up resize handlers
       this.resizeHandle.remove();
       this.resizeHandleX.remove();
       this.resizeHandleY.remove();
 
       this.browserContainerEl.classList.remove("responsive-mode");
@@ -405,16 +431,17 @@ class ResponsiveUI {
     this.tab = null;
     this.inited = null;
     this.rdmFrame = null;
     this.resizeHandle = null;
     this.resizeHandleX = null;
     this.resizeHandleY = null;
     this.toolWindow = null;
     this.swap = null;
+    this.resizeToolbarObserver = null;
 
     // Close the devtools client used to speak with responsive emulation actor.
     // The actor handles clearing any overrides itself, so it's not necessary to clear
     // anything on shutdown client side.
     const clientClosed = this.client.close();
     if (!isTabContentDestroying) {
       await clientClosed;
     }
