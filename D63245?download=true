diff --git a/devtools/client/responsive/components/App.js b/devtools/client/responsive/components/App.js
--- a/devtools/client/responsive/components/App.js
+++ b/devtools/client/responsive/components/App.js
@@ -393,8 +393,26 @@
   }
 
   onUpdateDeviceSelectorMenu(isOpen) {
+    // Guarantee a fixed height for the HTMLTooltip to render inside.
     if (Services.prefs.getBoolPref("devtools.responsive.browserUI.enabled")) {
-      window.postMessage({ type: "update-device-selector-menu", isOpen }, "*");
+      const rdmToolbar = window.parent.document.querySelector(".rdm-toolbar");
+      const browserStackEl = rdmToolbar.parentNode;
+
+      // Set the toolbar at current scroll position.
+      rdmToolbar.style.top = `${browserStackEl.scrollTop}px`;
+      rdmToolbar.style.left = `${browserStackEl.scrollLeft}px`;
+
+      // If open, set the toolbar to position: absolute. We set it here instead
+      // of ui.js because there is a weird UI transition between setting positions
+      // from fixed -> absolute.
+      if (isOpen) {
+        browserStackEl.classList.add("device-selector-menu-opened");
+      }
+
+      window.postMessage(
+        { type: "update-device-selector-menu-positioning", isOpen },
+        "*"
+      );
     }
   }
 
diff --git a/devtools/client/responsive/responsive-browser.css b/devtools/client/responsive/responsive-browser.css
--- a/devtools/client/responsive/responsive-browser.css
+++ b/devtools/client/responsive/responsive-browser.css
@@ -18,13 +18,19 @@
 
 .browserContainer.responsive-mode .browserStack > .rdm-toolbar {
   border: none;
-  position: absolute;
+  position: fixed;
+  z-index: 1;
+  height: 30px;
   width: 100%;
 }
 
-.browserContainer.responsive-mode .browserStack.device-selector-menu-opened > .rdm-toolbar,
-.browserContainer.responsive-mode .browserStack.device-modal-opened > .rdm-toolbar {
-  z-index: 1;
+.browserContainer.responsive-mode .browserStack > .rdm-toolbar.accomodate-ua {
+  height: 60px;
+}
+
+.browserContainer.responsive-mode > .browserStack.device-modal-opened > .rdm-toolbar,
+.browserContainer.responsive-mode > .browserStack.device-selector-menu-opened > .rdm-toolbar {
+  position: absolute;
   height: 100%;
 }
 
@@ -39,7 +45,8 @@
   grid-template-rows: 65px [margin-top-offset] var(--browser-viewport-height);
 }
 
-.browserContainer.responsive-mode > .browserStack.device-modal-opened {
+.browserContainer.responsive-mode > .browserStack.device-modal-opened,
+.browserContainer.responsive-mode > .browserStack.device-selector-menu-opened {
   overflow: hidden;
 }
 
diff --git a/devtools/client/responsive/ui.js b/devtools/client/responsive/ui.js
--- a/devtools/client/responsive/ui.js
+++ b/devtools/client/responsive/ui.js
@@ -307,6 +307,33 @@
 
     this.resizeHandleY = resizeHandleY;
     this.resizeHandleY.addEventListener("mousedown", this.onResizeStart);
+
+    // Setup a ResizeObserver that sets the width of the toolbar to the width of the
+    // .browserStack.
+    this.resizeToolbarObserver = new this.browserWindow.ResizeObserver(
+      entries => {
+        for (const entry of entries) {
+          const { width } = entry.contentRect;
+
+          this.rdmFrame.style.setProperty("width", `${width}px`);
+
+          // If the toolbar needs extra space for the UA input, then set a class that
+          // will accomodate its height.
+          if (
+            !this.browserStackEl.classList.contains(
+              "device-selector-menu-opened"
+            ) &&
+            width < 520
+          ) {
+            this.rdmFrame.classList.add("accomodate-ua");
+          } else {
+            this.rdmFrame.classList.remove("accomodate-ua");
+          }
+        }
+      }
+    );
+
+    this.resizeToolbarObserver.observe(this.browserStackEl);
   }
 
   /**
@@ -364,6 +391,10 @@
     } else {
       this.browserWindow.removeEventListener("FullZoomChange", this);
       this.rdmFrame.contentWindow.removeEventListener("message", this);
+
+      // Remove observers on the stack.
+      this.resizeToolbarObserver.unobserve(this.browserStackEl);
+
       this.rdmFrame.remove();
 
       // Clean up resize handlers
@@ -410,6 +441,7 @@
     this.resizeHandleY = null;
     this.toolWindow = null;
     this.swap = null;
+    this.resizeToolbarObserver = null;
 
     // Close the devtools client used to speak with responsive emulation actor.
     // The actor handles clearing any overrides itself, so it's not necessary to clear
@@ -542,8 +574,8 @@
       case "update-device-modal":
         this.onUpdateDeviceModal(event);
         break;
-      case "update-device-selector-menu":
-        this.onUpdateDeviceSelectorMenu(event);
+      case "update-device-selector-menu-positioning":
+        this.onUpdateDeviceSelectorMenuPositioning(event);
     }
   }
 
@@ -760,13 +792,33 @@
       "device-modal-opened",
       event.data.isOpen
     );
+
+    // reposition the toolbar when closing
+    if (!event.data.isOpen) {
+      this.respositionToolbarToFixed();
+    }
   }
 
-  onUpdateDeviceSelectorMenu(event) {
-    this.browserStackEl.classList.toggle(
-      "device-selector-menu-opened",
-      event.data.isOpen
-    );
+  /**
+   * Handles setting the position of the toolbar when it's closed. This can happen when
+   * an event occurs outside of the device selector menu component, such as opening the
+   * device modal.
+   */
+  onUpdateDeviceSelectorMenuPositioning(event) {
+    if (!event.data.isOpen) {
+      const {
+        isModalOpen,
+      } = this.rdmFrame.contentWindow.store.getState().devices;
+
+      // Don't remove the device-selector-menu-opened class if it was closed because
+      // the device modal was opened. We still want to preserve the current positioning
+      // of the toolbar.
+      if (isModalOpen) {
+        return;
+      }
+
+      this.respositionToolbarToFixed();
+    }
   }
 
   async hasDeviceState() {
@@ -776,6 +828,18 @@
     return !!deviceState;
   }
 
+  /**
+   * Restores the toolbar's positioning state back to `position: fixed`. There are cases
+   * when the toolbar is`position: absolute`: device selector or device modal is opened.
+   * When this happens, we set style properties `top` and `left` on the toolbar to ensure
+   * that it's still visible at the top of the page, even if the page is scrolled.
+   */
+  respositionToolbarToFixed() {
+    this.rdmFrame.style.removeProperty("top");
+    this.rdmFrame.style.removeProperty("left");
+    this.browserStackEl.classList.remove("device-selector-menu-opened");
+  }
+
   /**
    * Restores the previous UI state.
    */

