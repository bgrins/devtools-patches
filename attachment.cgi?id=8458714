# HG changeset patch
# Parent 52769d6fc58aba4ae16ba6ee88bbb54a202ae859
# User Michael Ratcliffe <mratcliffe@mozilla.com>
# Date 1405696426 -3600

Bug 1040701 - Fix marking of changed properties in rule view r=pbrosset

diff --git a/browser/devtools/styleinspector/rule-view.js b/browser/devtools/styleinspector/rule-view.js
--- a/browser/devtools/styleinspector/rule-view.js
+++ b/browser/devtools/styleinspector/rule-view.js
@@ -612,22 +612,16 @@ Rule.prototype = {
         if (!cssProp) {
           cssProp = {
             name: textProp.name,
             value: "",
             priority: ""
           };
         }
 
-        if (aName && textProp.name == aName) {
-          store.userProperties.setProperty(
-            this.style,
-            textProp.name,
-            textProp.value);
-        }
         textProp.priority = cssProp.priority;
       }
 
       this.elementStyle.markOverriddenAll();
 
       if (promise === this._applyingModifications) {
         this._applyingModifications = null;
       }
@@ -1007,17 +1001,23 @@ TextProperty.prototype = {
       }
     }
 
     if (changed) {
       this.updateEditor();
     }
   },
 
-  setValue: function(aValue, aPriority) {
+  setValue: function(aValue, aPriority, aCommit=false) {
+    let store = this.rule.elementStyle.store;
+
+    if (aCommit) {
+      store.userProperties.setProperty(this.rule.style, this.name, aValue);
+    }
+
     this.rule.setPropertyValue(this, aValue, aPriority);
     this.updateEditor();
   },
 
   setName: function(aName) {
     this.rule.setPropertyName(this, aName);
     this.updateEditor();
   },
@@ -2564,17 +2564,17 @@ TextPropertyEditor.prototype = {
       } else {
         // Adding multiple rules inside of name field overwrites the current
         // property with the first, then adds any more onto the property list.
         let properties = parseDeclarations(aValue);
 
         if (properties.length) {
           this.prop.setName(properties[0].name);
           if (properties.length > 1) {
-            this.prop.setValue(properties[0].value, properties[0].priority);
+            this.prop.setValue(properties[0].value, properties[0].priority, aCommit);
             this.ruleEditor.addProperties(properties.slice(1), this.prop);
           }
         }
       }
     }
   },
 
   /**
@@ -2605,26 +2605,26 @@ TextPropertyEditor.prototype = {
    *        True if the change should be applied.
    */
    _onValueDone: function(aValue, aCommit) {
     if (!aCommit && !this.ruleEditor.isEditing) {
        // A new property should be removed when escape is pressed.
        if (this.removeOnRevert) {
          this.remove();
        } else {
-         this.prop.setValue(this.committed.value, this.committed.priority);
+         this.prop.setValue(this.committed.value, this.committed.priority, false);
        }
        return;
     }
 
     let {propertiesToAdd,firstValue} = this._getValueAndExtraProperties(aValue);
 
     // First, set this property value (common case, only modified a property)
     let val = parseSingleValue(firstValue);
-    this.prop.setValue(val.value, val.priority);
+    this.prop.setValue(val.value, val.priority, aCommit);
     this.removeOnRevert = false;
     this.committed.value = this.prop.value;
     this.committed.priority = this.prop.priority;
 
     // If needed, add any new properties after this.prop.
     this.ruleEditor.addProperties(propertiesToAdd, this.prop);
 
     // If the name or value is not actively being edited, and the value is
@@ -2685,17 +2685,17 @@ TextPropertyEditor.prototype = {
       propertiesToAdd: propertiesToAdd,
       firstValue: firstValue
     };
   },
 
   _applyNewValue: function(aValue) {
     let val = parseSingleValue(aValue);
 
-    this.prop.setValue(val.value, val.priority);
+    this.prop.setValue(val.value, val.priority, true);
     this.removeOnRevert = false;
     this.committed.value = this.prop.value;
     this.committed.priority = this.prop.priority;
   },
 
   /**
    * Live preview this property, without committing changes.
    * @param {string} aValue The value to set the current property to.
@@ -2790,16 +2790,17 @@ UserProperties.prototype = {
    * @param {String} aName
    *        The name of the property to set.
    * @param {String} aUserValue
    *        The value of the property to set.
    */
   setProperty: function(aStyle, aName, aUserValue) {
     let key = this.getKey(aStyle);
     let entry = this.map.get(key, null);
+
     if (entry) {
       entry[aName] = aUserValue;
     } else {
       let props = {};
       props[aName] = aUserValue;
       this.map.set(key, props);
     }
   },
