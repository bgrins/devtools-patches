# vim: se ft=diff :
# HG changeset patch
# User Lin Clark <lclark@mozilla.com>
# Date 2016-04-29 13:14
Bug 1260283 - Implement new console output frontend behind a pref. r=bgrins

diff --git a/devtools/client/webconsole/new-console-output/dummy-child-component.js b/devtools/client/webconsole/new-console-output/dummy-child-component.js
index 7ca5987..3da5d9a 100644
--- a/devtools/client/webconsole/new-console-output/dummy-child-component.js
+++ b/devtools/client/webconsole/new-console-output/dummy-child-component.js
@@ -1,20 +1,31 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const React = require("devtools/client/shared/vendor/react");
+const { connect } = require("devtools/client/shared/vendor/react-redux");
 const DOM = React.DOM;
 
 var DummyChildComponent = React.createClass({
   displayName: "DummyChildComponent",
 
   render() {
+    let messageNodes = this.props.messages.map(function(message) {
+      return (
+        DOM.div({}, message.arguments.join(" "))
+      );
+    });
     return (
-      DOM.div({}, "DummyChildComponent foobar")
+      DOM.div({}, messageNodes)
     );
   }
 });
 
-// Exports from this module
-module.exports = DummyChildComponent;
+const mapStateToProps = (state) => {
+  return {
+    messages: state.messages
+  };
+};
+
+module.exports = connect(mapStateToProps)(DummyChildComponent);
diff --git a/devtools/client/webconsole/new-console-output/main.js b/devtools/client/webconsole/new-console-output/main.js
index 45dd0ec..c3b872e 100644
--- a/devtools/client/webconsole/new-console-output/main.js
+++ b/devtools/client/webconsole/new-console-output/main.js
@@ -13,12 +13,12 @@ Cu.import("resource://devtools/client/shared/browser-loader.js");
 // privileges and runs entirely in content scope.
 const rootUrl = "resource://devtools/client/webconsole/new-console-output/";
 const require = BrowserLoader({
   baseURI: rootUrl,
   window: this}).require;
 const OutputWrapperThingy = require("./output-wrapper-thingy");
 const { Services } = Cu.import("resource://gre/modules/Services.jsm", {});
 
-this.NewConsoleOutput = function(parentNode) {
+this.NewConsoleOutput = function(parentNode, store) {
   console.log("Creating NewConsoleOutput", parentNode, OutputWrapperThingy);
-  return new OutputWrapperThingy(parentNode);
+  return new OutputWrapperThingy(parentNode, store);
 }
diff --git a/devtools/client/webconsole/new-console-output/moz.build b/devtools/client/webconsole/new-console-output/moz.build
index ede9cde..dca8e74 100644
--- a/devtools/client/webconsole/new-console-output/moz.build
+++ b/devtools/client/webconsole/new-console-output/moz.build
@@ -1,15 +1,14 @@
 # vim: set filetype=python:
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-#DIRS += [
-#    'components',
-#    'utils'
-#]
+DIRS += [
+    'reducers'
+]
 
 DevToolsModules(
     'dummy-child-component.js',
     'main.js',
     'output-wrapper-thingy.js',
-)
\ No newline at end of file
+)
diff --git a/devtools/client/webconsole/new-console-output/output-wrapper-thingy.js b/devtools/client/webconsole/new-console-output/output-wrapper-thingy.js
index 1bbfde4..bb66b71 100644
--- a/devtools/client/webconsole/new-console-output/output-wrapper-thingy.js
+++ b/devtools/client/webconsole/new-console-output/output-wrapper-thingy.js
@@ -1,17 +1,19 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 // React
 const React = require("devtools/client/shared/vendor/react");
 const ReactDOM = require("devtools/client/shared/vendor/react-dom");
+const { Provider } = require("devtools/client/shared/vendor/react-redux");
 const DummyChildComponent = React.createFactory(require("./dummy-child-component"));
 
-function OutputWrapperThingy(parentNode) {
+function OutputWrapperThingy(parentNode, store) {
   let childComponent = DummyChildComponent({});
-  this.body = ReactDOM.render(childComponent, parentNode);
+  let provider = React.createElement(Provider, { store: store }, childComponent);
+  this.body = ReactDOM.render(provider, parentNode);
 }
 
 // Exports from this module
-module.exports = OutputWrapperThingy;
\ No newline at end of file
+module.exports = OutputWrapperThingy;
diff --git a/devtools/client/webconsole/new-console-output/reducers/index.js b/devtools/client/webconsole/new-console-output/reducers/index.js
new file mode 100644
index 0000000..5b09ec1
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/reducers/index.js
@@ -0,0 +1,12 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const { messages } = require("./messages");
+
+exports.reducers = {
+  messages
+};
diff --git a/devtools/client/webconsole/new-console-output/reducers/messages.js b/devtools/client/webconsole/new-console-output/reducers/messages.js
new file mode 100644
index 0000000..572f5af
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/reducers/messages.js
@@ -0,0 +1,23 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+// @TODO move this to constants and use in webconsole.js
+const MESSAGE_ADD = "MESSAGE_ADD";
+
+/**
+ * Filter displayed object properties.
+ */
+function messages(state = [], action) {
+  if (action.type == MESSAGE_ADD) {
+    return state.concat([action.message]);
+  }
+
+  return state;
+}
+
+// Exports from this module
+exports.messages = messages;
diff --git a/devtools/client/webconsole/new-console-output/reducers/moz.build b/devtools/client/webconsole/new-console-output/reducers/moz.build
new file mode 100644
index 0000000..45c743b
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/reducers/moz.build
@@ -0,0 +1,9 @@
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+DevToolsModules(
+    'index.js',
+    'messages.js',
+)
diff --git a/devtools/client/webconsole/webconsole.js b/devtools/client/webconsole/webconsole.js
index ce68c6c..fb76594 100644
--- a/devtools/client/webconsole/webconsole.js
+++ b/devtools/client/webconsole/webconsole.js
@@ -14,16 +14,27 @@ const { getSourceNames } = require("devtools/client/shared/source-utils");
 const BrowserLoaderModule = {};
 Cu.import("resource://devtools/client/shared/browser-loader.js", BrowserLoaderModule);
 
 const promise = require("promise");
 const Services = require("Services");
 const ErrorDocs = require("devtools/server/actors/errordocs");
 const Telemetry = require("devtools/client/shared/telemetry")
 
+// React & Redux
+const React = require("devtools/client/shared/vendor/react");
+const ReactDOM = require("devtools/client/shared/vendor/react-dom");
+const { Provider } = require("devtools/client/shared/vendor/react-redux");
+const { combineReducers } = require("devtools/client/shared/vendor/redux");
+
+const createStore = require("devtools/client/shared/redux/create-store")();
+
+const { reducers } = require("./new-console-output/reducers/index");
+const store = createStore(combineReducers(reducers));
+
 loader.lazyServiceGetter(this, "clipboardHelper",
                          "@mozilla.org/widget/clipboardhelper;1",
                          "nsIClipboardHelper");
 loader.lazyRequireGetter(this, "EventEmitter", "devtools/shared/event-emitter");
 loader.lazyRequireGetter(this, "AutocompletePopup", "devtools/client/shared/autocomplete-popup", true);
 loader.lazyRequireGetter(this, "ToolSidebar", "devtools/client/framework/sidebar", true);
 loader.lazyRequireGetter(this, "ConsoleOutput", "devtools/client/webconsole/console-output", true);
 loader.lazyRequireGetter(this, "Messages", "devtools/client/webconsole/console-output", true);
@@ -533,17 +544,17 @@ WebConsoleFrame.prototype = {
     if (this.SUPER_FRONTEND_EXPERIMENT) {
       console.log("Entering experimental mode for console frontend");
 
       // XXX: We should actually stop output from happening on old output
       // panel, but for now let's just hide it.
       this.experimentalOutputNode = this.outputNode.cloneNode();
       this.outputNode.hidden = true;
       this.outputNode.parentNode.appendChild(this.experimentalOutputNode);
-      this.newConsoleOutput = new this.window.NewConsoleOutput(this.experimentalOutputNode);
+      this.newConsoleOutput = new this.window.NewConsoleOutput(this.experimentalOutputNode, store);
       console.log("Created newConsoleOutput", this.newConsoleOutput);
     }
 
     this.completeNode = doc.querySelector(".jsterm-complete-node");
     this.inputNode = doc.querySelector(".jsterm-input-node");
 
     this._setFilterTextBoxEvents();
     this._initFilterButtons();
@@ -1280,18 +1291,26 @@ WebConsoleFrame.prototype = {
     switch (level) {
       case "log":
       case "info":
       case "warn":
       case "error":
       case "exception":
       case "assert":
       case "debug": {
-        let msg = new Messages.ConsoleGeneric(message);
-        node = msg.init(this.output).render().element;
+        if (this.SUPER_FRONTEND_EXPERIMENT) {
+          let action = {
+            type: "MESSAGE_ADD",
+            message
+          }
+          store.dispatch(action)
+        } else {
+          let msg = new Messages.ConsoleGeneric(message);
+          node = msg.init(this.output).render().element;
+        }
         break;
       }
       case "table": {
         let msg = new Messages.ConsoleTable(message);
         node = msg.init(this.output).render().element;
         break;
       }
       case "trace": {
