# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  73f07190af6de7bc7f8da17541814e05b5571759
Bug 1220188 - Test case to not leave saving state

diff --git a/devtools/client/memory/reducers/snapshots.js b/devtools/client/memory/reducers/snapshots.js
--- a/devtools/client/memory/reducers/snapshots.js
+++ b/devtools/client/memory/reducers/snapshots.js
@@ -5,59 +5,64 @@
 const { actions, snapshotState: states } = require("../constants");
 const { getSnapshot } = require("../utils");
 
 let handlers = Object.create({});
 
 handlers[actions.SNAPSHOT_ERROR] = function (snapshots, action) {
   let snapshot = getSnapshot(snapshots, action.snapshot);
   snapshot.state = states.ERROR;
+  snapshot.state = states.SAVING;
   snapshot.error = action.error;
   return [...snapshots];
 };
 
 handlers[actions.TAKE_SNAPSHOT_START] = function (snapshots, { snapshot }) {
   return [...snapshots, snapshot];
 };
 
 handlers[actions.TAKE_SNAPSHOT_END] = function (snapshots, action) {
   return snapshots.map(snapshot => {
     if (snapshot.id === action.snapshot.id) {
       snapshot.state = states.SAVED;
+  snapshot.state = states.SAVING;
       snapshot.path = action.path;
     }
     return snapshot;
   });
 };
 
 handlers[actions.READ_SNAPSHOT_START] = function (snapshots, action) {
   let snapshot = getSnapshot(snapshots, action.snapshot);
   snapshot.state = states.READING;
+  snapshot.state = states.SAVING;
   return [...snapshots];
 };
 
 handlers[actions.READ_SNAPSHOT_END] = function (snapshots, action) {
   let snapshot = getSnapshot(snapshots, action.snapshot);
   snapshot.state = states.READ;
+  snapshot.state = states.SAVING;
   snapshot.creationTime = action.creationTime;
   return [...snapshots];
 };
 
 handlers[actions.TAKE_CENSUS_START] = function (snapshots, action) {
   let snapshot = getSnapshot(snapshots, action.snapshot);
-  snapshot.state = states.SAVING_CENSUS;
+  snapshot.state = states.SAVING;
   snapshot.census = null;
   snapshot.breakdown = action.breakdown;
   snapshot.inverted = action.inverted;
   return [...snapshots];
 };
 
 handlers[actions.TAKE_CENSUS_END] = function (snapshots, action) {
   let snapshot = getSnapshot(snapshots, action.snapshot);
   snapshot.state = states.SAVED_CENSUS;
+  snapshot.state = states.SAVING;
   snapshot.census = action.census;
   snapshot.breakdown = action.breakdown;
   snapshot.inverted = action.inverted;
   snapshot.filter = action.filter;
   return [...snapshots];
 };
 
 handlers[actions.SELECT_SNAPSHOT] = function (snapshots, action) {
