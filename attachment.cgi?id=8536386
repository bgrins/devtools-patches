# HG changeset patch
# User Brian Birtles <birtles@gmail.com>
# Date 1418624815 -32400
#      Mon Dec 15 15:26:55 2014 +0900
# Node ID 856077b985de49088268fe2b4b523271cdd62730
# Parent  fff02c185b412af6b0445504669d0e7926849eaf
Bug 927349 part 20 - Update selectTreeItem to wait for tree expansion animations to finish

Currently selectTreeItem, as used by various devtools storage panel tests,
expands the tree then clicks items. However, it fails to account for the fact
that expansion animations may mean that the item that should be selected is not
yet able to be clicked. It currently happens to be lucky enough that typically
the animation is short enough that the item in question will be click-able in
time (since click() spins the event loop using executeSoon there is some time
for the animation to play).

If we make animations wait until their first frame has rendered before
beginning the chance that the tree item will become clickable in time is
reduced. This patch works around that by looking for animating branches
amongst the ancestors of the item to be selected. If one is found it waits for
the animation to end.

Unfortunately this ties the tests to the tree widget styles somewhat (in
particular the test looks for specified values of max-height).
However, these changes only delay the execution of the test so, if these styles
were to change, it is only likely that these tests would fail (and hence need to
be updated) than to mask a genuine bug. Until the Web Animations API is
available by default it is difficult to test if animations are running so this
seems like the best we can do for now.

diff --git a/browser/devtools/storage/test/head.js b/browser/devtools/storage/test/head.js
--- a/browser/devtools/storage/test/head.js
+++ b/browser/devtools/storage/test/head.js
@@ -228,17 +228,17 @@ function finishTests() {
       finish();
     });
   });
   gWindow.clearIterator.next();
 }
 
 // Sends a click event on the passed DOM node in an async manner
 function click(node) {
-  node.scrollIntoView()
+  node.scrollIntoView();
   executeSoon(() => EventUtils.synthesizeMouseAtCenter(node, {}, gPanelWindow));
 }
 
 
 
 /**
  * Recursively expand the variables view up to a given property.
  *
@@ -478,18 +478,48 @@ function matchVariablesViewProperty(aPro
  *
  * @param {[String]} ids
  *        The array id of the item in the tree
  */
 function selectTreeItem(ids) {
   // Expand tree as some/all items could be collapsed leading to click on an
   // incorrect tree item
   gUI.tree.expandAll();
-  click(gPanelWindow.document.querySelector("[data-id='" + JSON.stringify(ids) +
-        "'] > .tree-widget-item"));
+  let target = gPanelWindow.document.querySelector(
+                 "[data-id='" + JSON.stringify(ids) + "'] > .tree-widget-item");
+
+  // Look for an animating list
+  //
+  // If the list is still expanding we won't be able to click the requested
+  // item. We detect if a list (or one of its ancestor lists) is animating
+  // by checking if max-height is set. If the animation effect in
+  // widgets.inc.css changes this will likely break but until the Web
+  // Animations API is available there's no reliable way to detect if
+  // animations are running, particularly in the face of interactions that can
+  // cancel an animation without triggering an animationend event.
+  let animatingList = target.nextElementSibling;
+  while (animatingList) {
+    if (window.getComputedStyle(animatingList).maxHeight != "none") {
+      break;
+    }
+    animatingList = animatingList.parentNode.closest(".tree-widget-item + ul");
+  }
+
+  if (animatingList) {
+    let expanded = false;
+    animatingList.addEventListener("animationend", function() {
+      if (expanded) {
+        return;
+      }
+      expanded = true;
+      click(target);
+    });
+  } else {
+    click(target);
+  }
 }
 
 /**
  * Click selects a row in the table.
  *
  * @param {String} id
  *        The id of the row in the table widget
  */
