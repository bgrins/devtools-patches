# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1536773841 25200
#      Wed Sep 12 10:37:21 2018 -0700
# Node ID 7f4764ffc75d37696cea5810f473abc60494de48
# Parent  cca45dc580753d37e16196aa3043ace297af7ad5
Bug 1448213 - Migrate label-control and text-link bindings to a Custom Element;paolo

Differential Revision: https://phabricator.services.mozilla.com/D5686

diff --git a/dom/tests/mochitest/chrome/test_elements_proto.xul b/dom/tests/mochitest/chrome/test_elements_proto.xul
--- a/dom/tests/mochitest/chrome/test_elements_proto.xul
+++ b/dom/tests/mochitest/chrome/test_elements_proto.xul
@@ -12,21 +12,19 @@
 
   <script type="application/javascript">
   <![CDATA[
     const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
 
     SimpleTest.waitForExplicitFinish();
 
     addLoadEvent(() => {
-      is(Object.getPrototypeOf(document.createElementNS(XUL_NS, "label")),
-         XULTextElement.prototype,
+      ok(document.createElementNS(XUL_NS, "label") instanceof XULTextElement,
         `<label> should be of XULTextElement type`);
 
-      is(Object.getPrototypeOf(document.createElementNS(XUL_NS, "description")),
-         XULTextElement.prototype,
+      ok(document.createElementNS(XUL_NS, "description") instanceof XULTextElement,
         `<description> should be of XULTextElement type`);
 
       SimpleTest.finish();
     });
   ]]>
   </script>
 </window>
diff --git a/layout/xul/nsTextBoxFrame.cpp b/layout/xul/nsTextBoxFrame.cpp
--- a/layout/xul/nsTextBoxFrame.cpp
+++ b/layout/xul/nsTextBoxFrame.cpp
@@ -863,17 +863,17 @@ nsTextBoxFrame::CalculateTitleForWidth(g
 // but the mTitle doesn't have the character
 void
 nsTextBoxFrame::UpdateAccessTitle()
 {
     /*
      * Note that if you change appending access key label spec,
      * you need to maintain same logic in following methods. See bug 324159.
      * toolkit/components/prompts/src/CommonDialog.jsm (setLabelForNode)
-     * toolkit/content/widgets/text.xml (formatAccessKey)
+     * toolkit/content/widgets/text.js (formatAccessKey)
      */
     int32_t menuAccessKey;
     nsMenuBarListener::GetMenuAccessKey(&menuAccessKey);
     if (!menuAccessKey || mAccessKey.IsEmpty())
         return;
 
     if (!AlwaysAppendAccessKey() &&
         FindInReadable(mAccessKey, mTitle, nsCaseInsensitiveStringComparator()))
diff --git a/toolkit/content/customElements.js b/toolkit/content/customElements.js
--- a/toolkit/content/customElements.js
+++ b/toolkit/content/customElements.js
@@ -293,16 +293,17 @@ window.MozElements = MozElements;
 // We will want to load <browser> when that's migrated (bug 1441935).
 const isDummyDocument = document.documentURI == "chrome://extensions/content/dummy.xul";
 if (!isDummyDocument) {
   for (let script of [
     "chrome://global/content/elements/general.js",
     "chrome://global/content/elements/notificationbox.js",
     "chrome://global/content/elements/progressmeter.js",
     "chrome://global/content/elements/radio.js",
+    "chrome://global/content/elements/text.js",
     "chrome://global/content/elements/textbox.js",
     "chrome://global/content/elements/tabbox.js",
     "chrome://global/content/elements/tree.js",
   ]) {
     Services.scriptloader.loadSubScript(script, window);
   }
 
   for (let [tag, script] of [
diff --git a/toolkit/content/jar.mn b/toolkit/content/jar.mn
--- a/toolkit/content/jar.mn
+++ b/toolkit/content/jar.mn
@@ -78,17 +78,16 @@ toolkit.jar:
    content/global/bindings/notification.xml    (widgets/notification.xml)
    content/global/bindings/numberbox.xml       (widgets/numberbox.xml)
    content/global/bindings/popup.xml           (widgets/popup.xml)
    content/global/bindings/radio.xml           (widgets/radio.xml)
    content/global/bindings/richlistbox.xml     (widgets/richlistbox.xml)
    content/global/bindings/scrollbox.xml       (widgets/scrollbox.xml)
    content/global/bindings/spinner.js          (widgets/spinner.js)
 *  content/global/bindings/tabbox.xml          (widgets/tabbox.xml)
-   content/global/bindings/text.xml            (widgets/text.xml)
 *  content/global/bindings/textbox.xml         (widgets/textbox.xml)
    content/global/bindings/timekeeper.js       (widgets/timekeeper.js)
    content/global/bindings/timepicker.js       (widgets/timepicker.js)
    content/global/bindings/toolbar.xml         (widgets/toolbar.xml)
    content/global/bindings/toolbarbutton.xml   (widgets/toolbarbutton.xml)
    content/global/bindings/tree.xml            (widgets/tree.xml)
    content/global/bindings/videocontrols.xml   (widgets/videocontrols.xml)
 *  content/global/bindings/wizard.xml          (widgets/wizard.xml)
@@ -98,16 +97,17 @@ toolkit.jar:
    content/global/elements/general.js          (widgets/general.js)
    content/global/elements/notificationbox.js  (widgets/notificationbox.js)
    content/global/elements/progressmeter.js    (widgets/progressmeter.js)
    content/global/elements/radio.js            (widgets/radio.js)
    content/global/elements/marquee.css         (widgets/marquee.css)
    content/global/elements/marquee.js          (widgets/marquee.js)
    content/global/elements/stringbundle.js     (widgets/stringbundle.js)
    content/global/elements/tabbox.js           (widgets/tabbox.js)
+   content/global/elements/text.js             (widgets/text.js)
    content/global/elements/textbox.js          (widgets/textbox.js)
    content/global/elements/videocontrols.js    (widgets/videocontrols.js)
    content/global/elements/tree.js             (widgets/tree.js)
 #ifdef XP_MACOSX
    content/global/macWindowMenu.js
 #endif
    content/global/gmp-sources/openh264.json    (gmp-sources/openh264.json)
    content/global/gmp-sources/widevinecdm.json (gmp-sources/widevinecdm.json)
diff --git a/toolkit/content/widgets/text.js b/toolkit/content/widgets/text.js
new file mode 100644
--- /dev/null
+++ b/toolkit/content/widgets/text.js
@@ -0,0 +1,366 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+  * License, v. 2.0. If a copy of the MPL was not distributed with this
+  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+// This is loaded into all XUL windows. Wrap in a block to prevent
+// leaking to window scope.
+{
+
+// Queue up all formatting until load so we can defer doing a bunch
+// of DOM manipulation as individual labels get connected.
+let waitingForConnect = true;
+let waitingForConnectSet = new Set();
+let gInsertSeparator = false;
+let gUnderlineAccesskey = false;
+let gAlwaysAppendAccessKey = false;
+window.addEventListener("load", () => {
+  gUnderlineAccesskey = Services.prefs.getIntPref("ui.key.menuAccessKey") != 0;
+  if (gUnderlineAccesskey) {
+    try {
+      const nsIPrefLocalizedString = Ci.nsIPrefLocalizedString;
+      const prefNameInsertSeparator =
+        "intl.menuitems.insertseparatorbeforeaccesskeys";
+      const prefNameAlwaysAppendAccessKey =
+        "intl.menuitems.alwaysappendaccesskeys";
+
+      let val = Services.prefs.getComplexValue(prefNameInsertSeparator,
+        nsIPrefLocalizedString).data;
+      gInsertSeparator = val == "true";
+
+      val = Services.prefs.getComplexValue(prefNameAlwaysAppendAccessKey,
+        nsIPrefLocalizedString).data;
+      gAlwaysAppendAccessKey = val == "true";
+    } catch (e) {
+      gInsertSeparator = gAlwaysAppendAccessKey = true;
+    }
+  }
+
+  waitingForConnect = false;
+  for (let el of waitingForConnectSet) {
+    if (el.isConnected) {
+      el.formatAccessKey();
+    }
+  }
+  waitingForConnectSet.clear();
+}, { once: true });
+
+/* globals MozElementMixin,XULTextElement */
+class MozTextLabel extends MozElementMixin(XULTextElement) {
+  constructor() {
+    super();
+    this._lastFormattedAccessKey = null;
+    this._connectedOnce = false;
+    this.addEventListener("click", this, true);
+    this.addEventListener("keypress", this);
+  }
+
+  static get observedAttributes() {
+    return ["accesskey"];
+  }
+
+  attributeChangedCallback(name, oldValue, newValue) {
+    if (waitingForConnect || !this.isConnectedAndReady || oldValue == newValue) {
+      return;
+    }
+    this.formatAccessKey();
+  }
+
+  handleEvent(event) {
+    let methodName = "_on_" + event.type;
+    if (methodName in this) {
+      this[methodName](event);
+    } else {
+      throw new Error("Unrecognized label event: " + event.type);
+    }
+  }
+
+  _on_click(event) {
+    if (this.isTextLink) {
+      if (event.button == 0 || event.button == 1) {
+        this.openLink(event);
+      }
+      return;
+    }
+
+    let controlElement = this.labeledControlElement;
+    if (!controlElement || this.disabled) {
+      return;
+    }
+    controlElement.focus();
+    const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
+
+    if (controlElement.namespaceURI != XUL_NS) {
+      return;
+    }
+    if (controlElement.localName == "checkbox") {
+      controlElement.checked = !controlElement.checked;
+    } else if (controlElement.localName == "radio") {
+      controlElement.control.selectedItem = controlElement;
+    }
+  }
+
+  _on_keypress(event) {
+    if (this.isTextLink && event.keyCode == 13) {
+      this.click();
+    }
+  }
+
+  connectedCallback() {
+    if (waitingForConnect) {
+      waitingForConnectSet.add(this);
+      return;
+    }
+
+    // if (!this._connectedOnce) {
+    //   this._connectedOnce = true;
+    //   this.addEventListener("click", this, true);
+    //   this.addEventListener("keypress", this);
+    // }
+
+    this.formatAccessKey();
+  }
+
+  get isTextLink() {
+    return this.classList.contains("text-link") || this.hasAttribute("onClick");
+  }
+
+  set accessKey(val) {
+    this.setAttribute("accesskey", val);
+    var control = this.labeledControlElement;
+    if (control) {
+      control.setAttribute("accesskey", val);
+    }
+  }
+
+  get accessKey() {
+    return this.getAttribute("accesskey");
+  }
+
+  get labeledControlElement() {
+    let control = this.control;
+    return control ? document.getElementById(control) : null;
+  }
+
+  set control(val) {
+    this.setAttribute("control", val);
+  }
+
+  get control() {
+    return this.getAttribute("control");
+  }
+
+  set href(val) {
+    this.setAttribute("href", val);
+  }
+
+  get href() {
+    return this.getAttribute("href");
+  }
+
+  // This is used to match the rendering of accesskeys from nsTextBoxFrame.cpp (i.e. when the
+  // label uses [value]). So this is just for when we have textContent.
+  formatAccessKey() {
+    // Skip doing any DOM manipulation whenever possible:
+    let accessKey = this.accessKey || null;
+    if (!gUnderlineAccesskey ||
+        !this.isConnectedAndReady ||
+        this._lastFormattedAccessKey == accessKey ||
+        !this.textContent) {
+      return;
+    }
+
+    this._lastFormattedAccessKey = accessKey;
+    if (this.accessKeySpan) { // Clear old accesskey
+      mergeElement(this.accessKeySpan);
+      this.accessKeySpan = null;
+    }
+
+    if (this.hiddenColon) {
+      mergeElement(this.hiddenColon);
+      this.hiddenColon = null;
+    }
+
+    if (this.accessKeyParens) {
+      this.accessKeyParens.remove();
+      this.accessKeyParens = null;
+    }
+
+    // If we used to have an accessKey but not anymore, we're done here
+    if (!accessKey) {
+      return;
+    }
+
+    let labelText = this.textContent;
+    let accessKeyIndex = -1;
+    if (!gAlwaysAppendAccessKey) {
+      accessKeyIndex = labelText.indexOf(accessKey);
+      if (accessKeyIndex < 0) { // Try again in upper case
+        accessKeyIndex =
+          labelText.toUpperCase().indexOf(accessKey.toUpperCase());
+      }
+    } else if (labelText.endsWith(`(${accessKey.toUpperCase()})`)) {
+      accessKeyIndex = labelText.length - (1 + accessKey.length); // = index of accessKey.
+    }
+
+    const HTML_NS = "http://www.w3.org/1999/xhtml";
+    this.accessKeySpan = document.createElementNS(HTML_NS, "span");
+    this.accessKeySpan.className = "accesskey";
+
+    // Note that if you change the following code, see the comment of
+    // nsTextBoxFrame::UpdateAccessTitle.
+
+    // If accesskey is in the string, underline it:
+    if (accessKeyIndex >= 0) {
+      wrapChar(this, this.accessKeySpan, accessKeyIndex);
+      return;
+    }
+
+    // If accesskey is not in string, append in parentheses
+    // If end is colon, we should insert before colon.
+    // i.e., "label:" -> "label(X):"
+    let colonHidden = false;
+    if (/:$/.test(labelText)) {
+      labelText = labelText.slice(0, -1);
+      this.hiddenColon = document.createElementNS(HTML_NS, "span");
+      this.hiddenColon.className = "hiddenColon";
+      this.hiddenColon.style.display = "none";
+      // Hide the last colon by using span element.
+      // I.e., label<span style="display:none;">:</span>
+      wrapChar(this, this.hiddenColon, labelText.length);
+      colonHidden = true;
+    }
+    // If end is space(U+20),
+    // we should not add space before parentheses.
+    let endIsSpace = false;
+    if (/ $/.test(labelText)) {
+      endIsSpace = true;
+    }
+
+    this.accessKeyParens = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
+    this.appendChild(this.accessKeyParens);
+    if (gInsertSeparator && !endIsSpace)
+      this.accessKeyParens.textContent = " (";
+    else
+      this.accessKeyParens.textContent = "(";
+    this.accessKeySpan.textContent = accessKey.toUpperCase();
+    this.accessKeyParens.appendChild(this.accessKeySpan);
+    if (!colonHidden) {
+      this.accessKeyParens.appendChild(document.createTextNode(")"));
+    } else {
+      this.accessKeyParens.appendChild(document.createTextNode("):"));
+    }
+  }
+
+  openLink(aEvent) {
+    if (!this.isTextLink) {
+      return;
+    }
+
+    let href = this.href;
+    if (!href || this.disabled || aEvent.defaultPrevented)
+      return;
+
+    let uri = null;
+    try {
+      const nsISSM = Ci.nsIScriptSecurityManager;
+      const secMan =
+        Cc["@mozilla.org/scriptsecuritymanager;1"]
+        .getService(nsISSM);
+
+      uri = Services.io.newURI(href);
+
+      let principal;
+      if (this.getAttribute("useoriginprincipal") == "true") {
+        principal = this.nodePrincipal;
+      } else {
+        principal = secMan.createNullPrincipal({});
+      }
+      try {
+        secMan.checkLoadURIWithPrincipal(principal, uri,
+          nsISSM.DISALLOW_INHERIT_PRINCIPAL);
+      } catch (ex) {
+        let msg = "Error: Cannot open a " + uri.scheme + ": link using \
+                         the text-link binding.";
+        Cu.reportError(msg);
+        return;
+      }
+
+      const cID = "@mozilla.org/uriloader/external-protocol-service;1";
+      const nsIEPS = Ci.nsIExternalProtocolService;
+      let protocolSvc = Cc[cID].getService(nsIEPS);
+
+      // if the scheme is not an exposed protocol, then opening this link
+      // should be deferred to the system's external protocol handler
+      if (!protocolSvc.isExposedProtocol(uri.scheme)) {
+        protocolSvc.loadURI(uri);
+        aEvent.preventDefault();
+        return;
+      }
+
+    } catch (ex) {
+      Cu.reportError(ex);
+    }
+
+    aEvent.preventDefault();
+    href = uri ? uri.spec : href;
+
+    // Try handing off the link to the host application, e.g. for
+    // opening it in a tabbed browser.
+    let linkHandled = Cc["@mozilla.org/supports-PRBool;1"]
+      .createInstance(Ci.nsISupportsPRBool);
+    linkHandled.data = false;
+    let { shiftKey, ctrlKey, metaKey, altKey, button } = aEvent;
+    let data = { shiftKey, ctrlKey, metaKey, altKey, button, href };
+    Services.obs
+      .notifyObservers(linkHandled, "handle-xul-text-link", JSON.stringify(data));
+    if (linkHandled.data)
+      return;
+
+    // otherwise, fall back to opening the anchor directly
+    let win = window;
+    if (window.isChromeWindow) {
+      while (win.opener && !win.opener.closed)
+        win = win.opener;
+    }
+    win.open(href);
+  }
+}
+
+customElements.define("label", MozTextLabel);
+
+function mergeElement(element) {
+  // If the element has been removed already, return:
+  if (!element.isConnected) {
+    return;
+  }
+  if (element.previousSibling instanceof Text) {
+    element.previousSibling.appendData(element.textContent);
+  } else {
+    element.parentNode.insertBefore(element.firstChild, element);
+  }
+  element.remove();
+}
+
+function wrapChar(parent, element, index) {
+  let treeWalker = document.createNodeIterator(parent,
+    NodeFilter.SHOW_TEXT,
+    null);
+  let node = treeWalker.nextNode();
+  while (index >= node.length) {
+    index -= node.length;
+    node = treeWalker.nextNode();
+  }
+  if (index) {
+    node = node.splitText(index);
+  }
+
+  node.parentNode.insertBefore(element, node);
+  if (node.length > 1) {
+    node.splitText(1);
+  }
+  element.appendChild(node);
+}
+
+}
diff --git a/toolkit/content/widgets/text.xml b/toolkit/content/widgets/text.xml
deleted file mode 100644
--- a/toolkit/content/widgets/text.xml
+++ /dev/null
@@ -1,328 +0,0 @@
-<?xml version="1.0"?>
-<!-- This Source Code Form is subject to the terms of the Mozilla Public
-   - License, v. 2.0. If a copy of the MPL was not distributed with this
-   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
-
-
-<bindings id="textBindings"
-   xmlns="http://www.mozilla.org/xbl"
-   xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
-   xmlns:html="http://www.w3.org/1999/xhtml">
-
-  <binding id="label-control">
-    <content>
-      <children/><html:span anonid="accessKeyParens"></html:span>
-    </content>
-    <implementation>
-      <constructor>
-        <![CDATA[
-          this.formatAccessKey(true);
-        ]]>
-      </constructor>
-
-      <method name="formatAccessKey">
-        <parameter name="firstTime"/>
-        <body>
-          <![CDATA[
-            var accessKey = this.accessKey;
-            // No need to remove existing formatting the first time.
-            if (firstTime && !accessKey)
-              return;
-
-            if (this.mInsertSeparator === undefined) {
-              try {
-                var prefs = Cc["@mozilla.org/preferences-service;1"].
-                                       getService(Ci.nsIPrefBranch);
-                this.mUnderlineAccesskey = (prefs.getIntPref("ui.key.menuAccessKey") != 0);
-
-                const nsIPrefLocalizedString =
-                  Ci.nsIPrefLocalizedString;
-
-                const prefNameInsertSeparator =
-                  "intl.menuitems.insertseparatorbeforeaccesskeys";
-                const prefNameAlwaysAppendAccessKey =
-                  "intl.menuitems.alwaysappendaccesskeys";
-
-                var val = prefs.getComplexValue(prefNameInsertSeparator,
-                                                nsIPrefLocalizedString).data;
-                this.mInsertSeparator = (val == "true");
-
-                val = prefs.getComplexValue(prefNameAlwaysAppendAccessKey,
-                                            nsIPrefLocalizedString).data;
-                this.mAlwaysAppendAccessKey = (val == "true");
-              } catch (e) {
-                this.mInsertSeparator = true;
-              }
-            }
-
-            if (!this.mUnderlineAccesskey)
-              return;
-
-            var afterLabel = document.getAnonymousElementByAttribute(this, "anonid", "accessKeyParens");
-            afterLabel.textContent = "";
-
-            var oldAccessKey = this.getElementsByAttribute("class", "accesskey").item(0);
-            if (oldAccessKey) { // Clear old accesskey
-              this.mergeElement(oldAccessKey);
-            }
-
-            var oldHiddenSpan =
-              this.getElementsByAttribute("class", "hiddenColon").item(0);
-            if (oldHiddenSpan) {
-              this.mergeElement(oldHiddenSpan);
-            }
-
-            var labelText = this.textContent;
-            if (!accessKey || !labelText) {
-              return;
-            }
-            var accessKeyIndex = -1;
-            if (!this.mAlwaysAppendAccessKey) {
-              accessKeyIndex = labelText.indexOf(accessKey);
-              if (accessKeyIndex < 0) { // Try again in upper case
-                accessKeyIndex =
-                  labelText.toUpperCase().indexOf(accessKey.toUpperCase());
-              }
-            } else if (labelText.endsWith(`(${accessKey.toUpperCase()})`)) {
-              accessKeyIndex = labelText.length - (1 + accessKey.length); // = index of accessKey.
-            }
-
-            const HTML_NS = "http://www.w3.org/1999/xhtml";
-            var span = document.createElementNS(HTML_NS, "span");
-            span.className = "accesskey";
-
-            // Note that if you change the following code, see the comment of
-            // nsTextBoxFrame::UpdateAccessTitle.
-
-            // If accesskey is not in string, append in parentheses
-            if (accessKeyIndex < 0) {
-              // If end is colon, we should insert before colon.
-              // i.e., "label:" -> "label(X):"
-              var colonHidden = false;
-              if (/:$/.test(labelText)) {
-                labelText = labelText.slice(0, -1);
-                var hiddenSpan = document.createElementNS(HTML_NS, "span");
-                hiddenSpan.className = "hiddenColon";
-                hiddenSpan.style.display = "none";
-                // Hide the last colon by using span element.
-                // I.e., label<span style="display:none;">:</span>
-                this.wrapChar(hiddenSpan, labelText.length);
-                colonHidden = true;
-              }
-              // If end is space(U+20),
-              // we should not add space before parentheses.
-              var endIsSpace = false;
-              if (/ $/.test(labelText)) {
-                endIsSpace = true;
-              }
-              if (this.mInsertSeparator && !endIsSpace)
-                afterLabel.textContent = " (";
-              else
-                afterLabel.textContent = "(";
-              span.textContent = accessKey.toUpperCase();
-              afterLabel.appendChild(span);
-              if (!colonHidden)
-                afterLabel.appendChild(document.createTextNode(")"));
-              else
-                afterLabel.appendChild(document.createTextNode("):"));
-              return;
-            }
-            this.wrapChar(span, accessKeyIndex);
-          ]]>
-        </body>
-      </method>
-
-      <method name="wrapChar">
-        <parameter name="element"/>
-        <parameter name="index"/>
-        <body>
-          <![CDATA[
-             var treeWalker = document.createTreeWalker(this,
-                                                        NodeFilter.SHOW_TEXT,
-                                                        null);
-             var node = treeWalker.nextNode();
-             while (index >= node.length) {
-               index -= node.length;
-               node = treeWalker.nextNode();
-             }
-             if (index) {
-               node = node.splitText(index);
-             }
-             node.parentNode.insertBefore(element, node);
-             if (node.length > 1) {
-               node.splitText(1);
-             }
-             element.appendChild(node);
-          ]]>
-        </body>
-      </method>
-
-      <method name="mergeElement">
-        <parameter name="element"/>
-        <body>
-          <![CDATA[
-            if (element.previousSibling instanceof Text) {
-              element.previousSibling.appendData(element.textContent);
-            } else {
-              element.parentNode.insertBefore(element.firstChild, element);
-            }
-            element.remove();
-          ]]>
-        </body>
-      </method>
-
-      <field name="mUnderlineAccesskey">
-        !/Mac/.test(navigator.platform)
-      </field>
-      <field name="mInsertSeparator"/>
-      <field name="mAlwaysAppendAccessKey">false</field>
-
-      <property name="accessKey">
-        <getter>
-          <![CDATA[
-            return this.getAttribute("accesskey");
-          ]]>
-        </getter>
-        <setter>
-          <![CDATA[
-            this.setAttribute("accesskey", val);
-            var control = this.labeledControlElement;
-            if (control) {
-              control.setAttribute("accesskey", val);
-            }
-            this.formatAccessKey(false);
-            return val;
-          ]]>
-        </setter>
-      </property>
-
-      <property name="labeledControlElement" readonly="true"
-                onget="var control = this.control; return control ? document.getElementById(control) : null;" />
-
-      <property name="control" onget="return this.getAttribute('control');">
-        <setter>
-          <![CDATA[
-            this.setAttribute("control", val);
-            return val;
-          ]]>
-        </setter>
-      </property>
-    </implementation>
-
-    <handlers>
-      <handler event="click"><![CDATA[
-        if (this.disabled) {
-          return;
-        }
-        var controlElement = this.labeledControlElement;
-        if (!controlElement) {
-          return;
-        }
-        controlElement.focus();
-        const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
-
-        if (controlElement.namespaceURI != XUL_NS) {
-          return;
-        }
-        if (controlElement.localName == "checkbox") {
-          controlElement.checked = !controlElement.checked;
-        } else if (controlElement.localName == "radio") {
-          controlElement.control.selectedItem = controlElement;
-        }
-      ]]></handler>
-    </handlers>
-  </binding>
-
-  <binding id="text-link">
-    <implementation>
-      <property name="href" onget="return this.getAttribute('href');"
-                            onset="this.setAttribute('href', val); return val;" />
-      <method name="open">
-        <parameter name="aEvent"/>
-        <body>
-        <![CDATA[
-          var href = this.href;
-          if (!href || this.disabled || aEvent.defaultPrevented)
-            return;
-
-          var uri = null;
-          try {
-            const nsISSM = Ci.nsIScriptSecurityManager;
-            const secMan =
-                     Cc["@mozilla.org/scriptsecuritymanager;1"]
-                       .getService(nsISSM);
-
-            const ioService =
-                     Cc["@mozilla.org/network/io-service;1"]
-                       .getService(Ci.nsIIOService);
-
-            uri = ioService.newURI(href);
-
-            let principal;
-            if (this.getAttribute("useoriginprincipal") == "true") {
-              principal = this.nodePrincipal;
-            } else {
-              principal = secMan.createNullPrincipal({});
-            }
-            try {
-              secMan.checkLoadURIWithPrincipal(principal, uri,
-                                               nsISSM.DISALLOW_INHERIT_PRINCIPAL);
-            } catch (ex) {
-              var msg = "Error: Cannot open a " + uri.scheme + ": link using \
-                         the text-link binding.";
-              Cu.reportError(msg);
-              return;
-            }
-
-            const cID = "@mozilla.org/uriloader/external-protocol-service;1";
-            const nsIEPS = Ci.nsIExternalProtocolService;
-            var protocolSvc = Cc[cID].getService(nsIEPS);
-
-            // if the scheme is not an exposed protocol, then opening this link
-            // should be deferred to the system's external protocol handler
-            if (!protocolSvc.isExposedProtocol(uri.scheme)) {
-              protocolSvc.loadURI(uri);
-              aEvent.preventDefault();
-              return;
-            }
-
-          } catch (ex) {
-            Cu.reportError(ex);
-          }
-
-          aEvent.preventDefault();
-          href = uri ? uri.spec : href;
-
-          // Try handing off the link to the host application, e.g. for
-          // opening it in a tabbed browser.
-          var linkHandled = Cc["@mozilla.org/supports-PRBool;1"]
-                              .createInstance(Ci.nsISupportsPRBool);
-          linkHandled.data = false;
-          let {shiftKey, ctrlKey, metaKey, altKey, button} = aEvent;
-          let data = {shiftKey, ctrlKey, metaKey, altKey, button, href};
-          Cc["@mozilla.org/observer-service;1"]
-            .getService(Ci.nsIObserverService)
-            .notifyObservers(linkHandled, "handle-xul-text-link", JSON.stringify(data));
-          if (linkHandled.data)
-            return;
-
-          // otherwise, fall back to opening the anchor directly
-          var win = window;
-          if (window.isChromeWindow) {
-            while (win.opener && !win.opener.closed)
-              win = win.opener;
-          }
-          win.open(href);
-        ]]>
-        </body>
-      </method>
-    </implementation>
-
-    <handlers>
-      <handler event="click" phase="capturing" button="0" action="this.open(event)"/>
-      <handler event="click" phase="capturing" button="1" action="this.open(event)"/>
-      <handler event="keypress" preventdefault="true" keycode="VK_RETURN" action="this.click()" />
-    </handlers>
-  </binding>
-
-</bindings>
diff --git a/toolkit/content/xul.css b/toolkit/content/xul.css
--- a/toolkit/content/xul.css
+++ b/toolkit/content/xul.css
@@ -93,26 +93,20 @@ page {
 
 /******** box *******/
 
 vbox {
   -moz-box-orient: vertical;
 }
 
 /********** label **********/
-
 label.text-link, label[onclick] {
-  -moz-binding: url("chrome://global/content/bindings/text.xml#text-link");
   -moz-user-focus: normal;
 }
 
-label[control], label.radio-label, label.checkbox-label, label.toolbarbutton-multiline-text {
-  -moz-binding: url("chrome://global/content/bindings/text.xml#label-control");
-}
-
 label html|span.accesskey {
   text-decoration: underline;
 }
 
 /********** button **********/
 
 button {
   -moz-binding: url("chrome://global/content/bindings/button.xml#button");
