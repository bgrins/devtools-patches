# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  8dd9ae67b61a726030c8df127079698936797741

diff --git a/devtools/client/webconsole/components/JSTerm.js b/devtools/client/webconsole/components/JSTerm.js
--- a/devtools/client/webconsole/components/JSTerm.js
+++ b/devtools/client/webconsole/components/JSTerm.js
@@ -89,16 +89,17 @@ class JSTerm extends Component {
 
     this.hud = hud;
     this.hudId = this.hud.hudId;
 
     this._keyPress = this._keyPress.bind(this);
     this._inputEventHandler = this._inputEventHandler.bind(this);
     this._blurEventHandler = this._blurEventHandler.bind(this);
     this.onContextMenu = this.onContextMenu.bind(this);
+    this.syntaxHighlightNode = this.syntaxHighlightNode.bind(this);
 
     this.SELECTED_FRAME = -1;
 
     /**
      * Array that caches the user input suggestions received from the server.
      * @private
      * @type array
      */
@@ -348,18 +349,16 @@ class JSTerm extends Component {
       }
     } else if (this.inputNode) {
       this.inputNode.addEventListener("keypress", this._keyPress);
       this.inputNode.addEventListener("input", this._inputEventHandler);
       this.inputNode.addEventListener("keyup", this._inputEventHandler);
       this.focus();
     }
 
-    this.enableOutputSyntaxHighlighting();
-
     this.inputBorderSize = this.inputNode
       ? this.inputNode.getBoundingClientRect().height - this.inputNode.clientHeight
       : 0;
 
     // Update the character and chevron width needed for the popup offset calculations.
     this._inputCharWidth = this._getInputCharWidth();
     this._chevronWidth = this.editor ? null : this._getChevronWidth();
 
@@ -369,40 +368,42 @@ class JSTerm extends Component {
 
   shouldComponentUpdate(nextProps, nextState) {
     // XXX: For now, everything is handled in an imperative way and we
     // only want React to do the initial rendering of the component.
     // This should be modified when the actual refactoring will take place.
     return false;
   }
 
-  enableOutputSyntaxHighlighting() {
-    const getEditor = () => this.editor && this.editor.CodeMirror;
-    if (!getEditor()) {
-      // Syntax highlighting depends on CodeMirror being present, so bail
-      // out if it's not.
-      return;
-    }
-
-    class CodeMirrorHighlighted extends HTMLElement {
-      connectedCallback() {
-        if (getEditor() && !this.connectedOnce) {
-          this.connectedOnce = true;
-          this.classList.add("cm-s-mozilla");
-          getEditor().runMode(this.textContent, "application/javascript", this);
-        }
-      }
-    }
-
-    const customElementRegistry = this.hud.document.defaultView.customElements;
-    if (customElementRegistry) {
-      customElementRegistry.define("codemirror-highlighted", CodeMirrorHighlighted);
+  syntaxHighlightNode(node) {
+    console.log("SYNTAX HIGHLIGHT NODE", node, this.editor)
+    const cm = this.editor && this.editor.CodeMirror;
+    if (cm && node) {
+      cm.runMode(node.textContent, "application/javascript", node);
     }
   }
 
+  // enableOutputSyntaxHighlighting() {
+  //   const syntaxHighlightNode = this.syntaxHighlightNode.bind(this);
+  //   class CodeMirrorHighlighted extends HTMLElement {
+  //     connectedCallback() {
+  //       if (!this.connectedOnce) {
+  //         this.connectedOnce = true;
+  //         this.classList.add("cm-s-mozilla");
+  //         syntaxHighlightNode(this);
+  //       }
+  //     }
+  //   }
+
+  //   const customElementRegistry = this.hud.document.defaultView.customElements;
+  //   if (customElementRegistry) {
+  //     customElementRegistry.define("codemirror-highlighted", CodeMirrorHighlighted);
+  //   }
+  // }
+
   /**
    * Getter for the element that holds the messages we display.
    * @type Element
    */
   get outputNode() {
     return this.hud.outputNode;
   }
 
diff --git a/devtools/client/webconsole/webconsole-output-wrapper.js b/devtools/client/webconsole/webconsole-output-wrapper.js
--- a/devtools/client/webconsole/webconsole-output-wrapper.js
+++ b/devtools/client/webconsole/webconsole-output-wrapper.js
@@ -116,16 +116,22 @@ WebConsoleOutputWrapper.prototype = {
             hud.owner.viewSource(frame.url, frame.line);
           }
         },
         recordTelemetryEvent: (eventName, extra = {}) => {
           this.telemetry.recordEvent("devtools.main", eventName, "webconsole", null, {
             ...extra,
             "session_id": this.toolbox && this.toolbox.sessionId || -1
           });
+        },
+        syntaxHighlightNode(node) {
+          console.log("CALLING WITH ", node);
+          // if (hud.jsterm) {
+          //   hud.jsterm.syntaxHighlightNode(node);
+          // }
         }
       };
 
       // Set `openContextMenu` this way so, `serviceContainer` variable
       // is available in the current scope and we can pass it into
       // `createContextMenu` method.
       serviceContainer.openContextMenu = (e, message) => {
         const { screenX, screenY, target } = e;
