# HG changeset patch
# Parent fa7fbf61c78328811720541419d561e4c83bc62d
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 1011652 - mochitest-devtools fails with --start-at=browser/devtools/shared/test/browser_telemetry_toolboxtabs_webconsole.js --end-at=browser/devtools/tilt/test/browser_tilt_02_notifications-seq.js

diff --git a/browser/devtools/shared/test/browser_telemetry_button_paintflashing.js b/browser/devtools/shared/test/browser_telemetry_button_paintflashing.js
--- a/browser/devtools/shared/test/browser_telemetry_button_paintflashing.js
+++ b/browser/devtools/shared/test/browser_telemetry_button_paintflashing.js
@@ -7,27 +7,27 @@ const TEST_URI = "data:text/html;charset
 // opened we make use of setTimeout() to create tool active times.
 const TOOL_DELAY = 200;
 
 let promise = Cu.import("resource://gre/modules/devtools/deprecated-sync-thenables.js", {}).Promise;
 let {Services} = Cu.import("resource://gre/modules/Services.jsm", {});
 
 let require = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools.require;
 let Telemetry = require("devtools/shared/telemetry");
+let telemetryInfo = {};
 
 function init() {
-  Telemetry.prototype.telemetryInfo = {};
   Telemetry.prototype._oldlog = Telemetry.prototype.log;
   Telemetry.prototype.log = function(histogramId, value) {
     if (histogramId) {
-      if (!this.telemetryInfo[histogramId]) {
-        this.telemetryInfo[histogramId] = [];
+      if (!telemetryInfo[histogramId]) {
+        telemetryInfo[histogramId] = [];
       }
 
-      this.telemetryInfo[histogramId].push(value);
+      telemetryInfo[histogramId].push(value);
     }
   };
 
   testButton("command-button-paintflashing");
 }
 
 function testButton(id) {
   info("Testing " + id);
@@ -62,17 +62,17 @@ function delayedClicks(node, clicks) {
       setTimeout(delayedClick, TOOL_DELAY);
     }
   }, TOOL_DELAY);
 
   return deferred.promise;
 }
 
 function checkResults(histIdFocus) {
-  let result = Telemetry.prototype.telemetryInfo;
+  let result = telemetryInfo;
 
   for (let [histId, value] of Iterator(result)) {
     if (histId.startsWith("DEVTOOLS_INSPECTOR_") ||
         !histId.contains(histIdFocus)) {
       // Inspector stats are tested in
       // browser_telemetry_toolboxtabs_{toolname}.js so we skip them here
       // because we only open the inspector once for this test.
       continue;
@@ -103,19 +103,18 @@ function checkResults(histIdFocus) {
   finishUp();
 }
 
 function finishUp() {
   gBrowser.removeCurrentTab();
 
   Telemetry.prototype.log = Telemetry.prototype._oldlog;
   delete Telemetry.prototype._oldlog;
-  delete Telemetry.prototype.telemetryInfo;
 
-  TargetFactory = Services = promise = require = null;
+  telemetryInfo = TargetFactory = Services = promise = require = null;
 
   finish();
 }
 
 function test() {
   waitForExplicitFinish();
   gBrowser.selectedTab = gBrowser.addTab();
   gBrowser.selectedBrowser.addEventListener("load", function() {
diff --git a/browser/devtools/shared/test/browser_telemetry_button_responsive.js b/browser/devtools/shared/test/browser_telemetry_button_responsive.js
--- a/browser/devtools/shared/test/browser_telemetry_button_responsive.js
+++ b/browser/devtools/shared/test/browser_telemetry_button_responsive.js
@@ -7,27 +7,27 @@ const TEST_URI = "data:text/html;charset
 // opened we make use of setTimeout() to create tool active times.
 const TOOL_DELAY = 200;
 
 let promise = Cu.import("resource://gre/modules/devtools/deprecated-sync-thenables.js", {}).Promise;
 let {Services} = Cu.import("resource://gre/modules/Services.jsm", {});
 
 let require = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools.require;
 let Telemetry = require("devtools/shared/telemetry");
+let telemetryInfo = {};
 
 function init() {
-  Telemetry.prototype.telemetryInfo = {};
   Telemetry.prototype._oldlog = Telemetry.prototype.log;
   Telemetry.prototype.log = function(histogramId, value) {
     if (histogramId) {
-      if (!this.telemetryInfo[histogramId]) {
-        this.telemetryInfo[histogramId] = [];
+      if (!telemetryInfo[histogramId]) {
+        telemetryInfo[histogramId] = [];
       }
 
-      this.telemetryInfo[histogramId].push(value);
+      telemetryInfo[histogramId].push(value);
     }
   };
 
   testButton("command-button-responsive");
 }
 
 function testButton(id) {
   info("Testing " + id);
@@ -62,17 +62,17 @@ function delayedClicks(node, clicks) {
       setTimeout(delayedClick, TOOL_DELAY);
     }
   }, TOOL_DELAY);
 
   return deferred.promise;
 }
 
 function checkResults(histIdFocus) {
-  let result = Telemetry.prototype.telemetryInfo;
+  let result = telemetryInfo;
 
   for (let [histId, value] of Iterator(result)) {
     if (histId.startsWith("DEVTOOLS_INSPECTOR_") ||
         !histId.contains(histIdFocus)) {
       // Inspector stats are tested in
       // browser_telemetry_toolboxtabs_{toolname}.js so we skip them here
       // because we only open the inspector once for this test.
       continue;
@@ -103,19 +103,18 @@ function checkResults(histIdFocus) {
   finishUp();
 }
 
 function finishUp() {
   gBrowser.removeCurrentTab();
 
   Telemetry.prototype.log = Telemetry.prototype._oldlog;
   delete Telemetry.prototype._oldlog;
-  delete Telemetry.prototype.telemetryInfo;
 
-  TargetFactory = Services = promise = require = null;
+  telemetryInfo = TargetFactory = Services = promise = require = null;
 
   finish();
 }
 
 function test() {
   waitForExplicitFinish();
   gBrowser.selectedTab = gBrowser.addTab();
   gBrowser.selectedBrowser.addEventListener("load", function() {
diff --git a/browser/devtools/shared/test/browser_telemetry_button_scratchpad.js b/browser/devtools/shared/test/browser_telemetry_button_scratchpad.js
--- a/browser/devtools/shared/test/browser_telemetry_button_scratchpad.js
+++ b/browser/devtools/shared/test/browser_telemetry_button_scratchpad.js
@@ -7,29 +7,29 @@ const TEST_URI = "data:text/html;charset
 // opened we make use of setTimeout() to create tool active times.
 const TOOL_DELAY = 200;
 
 let promise = Cu.import("resource://gre/modules/devtools/deprecated-sync-thenables.js", {}).Promise;
 let {Services} = Cu.import("resource://gre/modules/Services.jsm", {});
 
 let require = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools.require;
 let Telemetry = require("devtools/shared/telemetry");
+let telemetryInfo = {};
 
 let numScratchpads = 0;
 
 function init() {
-  Telemetry.prototype.telemetryInfo = {};
   Telemetry.prototype._oldlog = Telemetry.prototype.log;
   Telemetry.prototype.log = function(histogramId, value) {
     if (histogramId) {
-      if (!this.telemetryInfo[histogramId]) {
-        this.telemetryInfo[histogramId] = [];
+      if (!telemetryInfo[histogramId]) {
+        telemetryInfo[histogramId] = [];
       }
 
-      this.telemetryInfo[histogramId].push(value);
+      telemetryInfo[histogramId].push(value);
     }
   };
 
   Services.ww.registerNotification(windowObserver);
   testButton("command-button-scratchpad");
 }
 
 function testButton(id) {
@@ -90,17 +90,17 @@ function delayedClicks(node, clicks) {
       setTimeout(delayedClick, TOOL_DELAY);
     }
   }, TOOL_DELAY);
 
   return deferred.promise;
 }
 
 function checkResults(histIdFocus) {
-  let result = Telemetry.prototype.telemetryInfo;
+  let result = telemetryInfo;
 
   for (let [histId, value] of Iterator(result)) {
     if (histId.startsWith("DEVTOOLS_INSPECTOR_") ||
         !histId.contains(histIdFocus)) {
       // Inspector stats are tested in
       // browser_telemetry_toolboxtabs_{toolname}.js so we skip them here
       // because we only open the inspector once for this test.
       continue;
@@ -131,19 +131,18 @@ function checkResults(histIdFocus) {
   finishUp();
 }
 
 function finishUp() {
   gBrowser.removeCurrentTab();
 
   Telemetry.prototype.log = Telemetry.prototype._oldlog;
   delete Telemetry.prototype._oldlog;
-  delete Telemetry.prototype.telemetryInfo;
 
-  TargetFactory = Services = promise = require = numScratchpads = null;
+  telemetryInfo = TargetFactory = Services = promise = require = numScratchpads = null;
 
   finish();
 }
 
 function test() {
   waitForExplicitFinish();
   gBrowser.selectedTab = gBrowser.addTab();
   gBrowser.selectedBrowser.addEventListener("load", function() {
diff --git a/browser/devtools/shared/test/browser_telemetry_button_tilt.js b/browser/devtools/shared/test/browser_telemetry_button_tilt.js
--- a/browser/devtools/shared/test/browser_telemetry_button_tilt.js
+++ b/browser/devtools/shared/test/browser_telemetry_button_tilt.js
@@ -7,27 +7,27 @@ const TEST_URI = "data:text/html;charset
 // opened we make use of setTimeout() to create tool active times.
 const TOOL_DELAY = 200;
 
 let promise = Cu.import("resource://gre/modules/devtools/deprecated-sync-thenables.js", {}).Promise;
 let {Services} = Cu.import("resource://gre/modules/Services.jsm", {});
 
 let require = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools.require;
 let Telemetry = require("devtools/shared/telemetry");
+let telemetryInfo = {};
 
 function init() {
-  Telemetry.prototype.telemetryInfo = {};
   Telemetry.prototype._oldlog = Telemetry.prototype.log;
   Telemetry.prototype.log = function(histogramId, value) {
     if (histogramId) {
-      if (!this.telemetryInfo[histogramId]) {
-        this.telemetryInfo[histogramId] = [];
+      if (!telemetryInfo[histogramId]) {
+        telemetryInfo[histogramId] = [];
       }
 
-      this.telemetryInfo[histogramId].push(value);
+      telemetryInfo[histogramId].push(value);
     }
   };
 
   testButton("command-button-tilt");
 }
 
 function testButton(id) {
   info("Testing " + id);
@@ -62,17 +62,17 @@ function delayedClicks(node, clicks) {
       setTimeout(delayedClick, TOOL_DELAY);
     }
   }, TOOL_DELAY);
 
   return deferred.promise;
 }
 
 function checkResults(histIdFocus) {
-  let result = Telemetry.prototype.telemetryInfo;
+  let result = telemetryInfo;
 
   for (let [histId, value] of Iterator(result)) {
     if (histId.startsWith("DEVTOOLS_INSPECTOR_") ||
         !histId.contains(histIdFocus)) {
       // Inspector stats are tested in
       // browser_telemetry_toolboxtabs_{toolname}.js so we skip them here
       // because we only open the inspector once for this test.
       continue;
@@ -103,19 +103,18 @@ function checkResults(histIdFocus) {
   finishUp();
 }
 
 function finishUp() {
   gBrowser.removeCurrentTab();
 
   Telemetry.prototype.log = Telemetry.prototype._oldlog;
   delete Telemetry.prototype._oldlog;
-  delete Telemetry.prototype.telemetryInfo;
 
-  TargetFactory = Services = promise = require = null;
+  telemetryInfo = TargetFactory = Services = promise = require = null;
 
   finish();
 }
 
 function test() {
   waitForExplicitFinish();
   gBrowser.selectedTab = gBrowser.addTab();
   gBrowser.selectedBrowser.addEventListener("load", function() {
diff --git a/browser/devtools/shared/test/browser_telemetry_sidebar.js b/browser/devtools/shared/test/browser_telemetry_sidebar.js
--- a/browser/devtools/shared/test/browser_telemetry_sidebar.js
+++ b/browser/devtools/shared/test/browser_telemetry_sidebar.js
@@ -7,27 +7,27 @@ const TEST_URI = "data:text/html;charset
 // opened we make use of setTimeout() to create tool active times.
 const TOOL_DELAY = 200;
 
 let {Promise: promise} = Cu.import("resource://gre/modules/devtools/deprecated-sync-thenables.js", {});
 let {Services} = Cu.import("resource://gre/modules/Services.jsm", {});
 
 let require = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools.require;
 let Telemetry = require("devtools/shared/telemetry");
+let telemetryInfo = {};
 
 function init() {
-  Telemetry.prototype.telemetryInfo = {};
   Telemetry.prototype._oldlog = Telemetry.prototype.log;
   Telemetry.prototype.log = function(histogramId, value) {
     if (histogramId) {
-      if (!this.telemetryInfo[histogramId]) {
-        this.telemetryInfo[histogramId] = [];
+      if (!telemetryInfo[histogramId]) {
+        telemetryInfo[histogramId] = [];
       }
 
-      this.telemetryInfo[histogramId].push(value);
+      telemetryInfo[histogramId].push(value);
     }
   };
 
   testSidebar();
 }
 
 function testSidebar() {
   info("Testing sidebar");
@@ -52,17 +52,17 @@ function testSidebar() {
       } else {
         checkResults();
       }
     }, TOOL_DELAY);
   });
 }
 
 function checkResults() {
-  let result = Telemetry.prototype.telemetryInfo;
+  let result = telemetryInfo;
 
   for (let [histId, value] of Iterator(result)) {
     if (histId.startsWith("DEVTOOLS_INSPECTOR_")) {
       // Inspector stats are tested in browser_telemetry_toolboxtabs.js so we
       // skip them here because we only open the inspector once for this test.
       continue;
     }
 
@@ -91,19 +91,18 @@ function checkResults() {
   finishUp();
 }
 
 function finishUp() {
   gBrowser.removeCurrentTab();
 
   Telemetry.prototype.log = Telemetry.prototype._oldlog;
   delete Telemetry.prototype._oldlog;
-  delete Telemetry.prototype.telemetryInfo;
 
-  TargetFactory = Services = promise = require = null;
+  telemetryInfo = TargetFactory = Services = promise = require = null;
 
   finish();
 }
 
 function test() {
   waitForExplicitFinish();
   gBrowser.selectedTab = gBrowser.addTab();
   gBrowser.selectedBrowser.addEventListener("load", function() {
diff --git a/browser/devtools/shared/test/browser_telemetry_toolboxtabs_inspector.js b/browser/devtools/shared/test/browser_telemetry_toolboxtabs_inspector.js
--- a/browser/devtools/shared/test/browser_telemetry_toolboxtabs_inspector.js
+++ b/browser/devtools/shared/test/browser_telemetry_toolboxtabs_inspector.js
@@ -7,27 +7,27 @@ const TEST_URI = "data:text/html;charset
 // opened we make use of setTimeout() to create tool active times.
 const TOOL_DELAY = 200;
 
 let {Promise: promise} = Cu.import("resource://gre/modules/devtools/deprecated-sync-thenables.js", {});
 let {Services} = Cu.import("resource://gre/modules/Services.jsm", {});
 
 let require = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools.require;
 let Telemetry = require("devtools/shared/telemetry");
+let telemetryInfo = {};
 
 function init() {
-  Telemetry.prototype.telemetryInfo = {};
   Telemetry.prototype._oldlog = Telemetry.prototype.log;
   Telemetry.prototype.log = function(histogramId, value) {
     if (histogramId) {
-      if (!this.telemetryInfo[histogramId]) {
-        this.telemetryInfo[histogramId] = [];
+      if (!telemetryInfo[histogramId]) {
+        telemetryInfo[histogramId] = [];
       }
 
-      this.telemetryInfo[histogramId].push(value);
+      telemetryInfo[histogramId].push(value);
     }
   }
 
   openToolboxTabTwice("inspector", false);
 }
 
 function openToolboxTabTwice(id, secondPass) {
   let target = TargetFactory.forTab(gBrowser.selectedTab);
@@ -45,17 +45,17 @@ function openToolboxTabTwice(id, secondP
     // We use a timeout to check the tools active time
     setTimeout(function() {
       gDevTools.closeToolbox(target);
     }, TOOL_DELAY);
   }).then(null, reportError);
 }
 
 function checkResults() {
-  let result = Telemetry.prototype.telemetryInfo;
+  let result = telemetryInfo;
 
   for (let [histId, value] of Iterator(result)) {
     if (histId.endsWith("OPENED_PER_USER_FLAG")) {
       ok(value.length === 1 && value[0] === true,
          "Per user value " + histId + " has a single value of true");
     } else if (histId.endsWith("OPENED_BOOLEAN")) {
       ok(value.length > 1, histId + " has more than one entry");
 
@@ -86,19 +86,18 @@ function reportError(error) {
   finishUp();
 }
 
 function finishUp() {
   gBrowser.removeCurrentTab();
 
   Telemetry.prototype.log = Telemetry.prototype._oldlog;
   delete Telemetry.prototype._oldlog;
-  delete Telemetry.prototype.telemetryInfo;
 
-  TargetFactory = Services = promise = require = null;
+  telemetryInfo = TargetFactory = Services = promise = require = null;
 
   finish();
 }
 
 function test() {
   waitForExplicitFinish();
   gBrowser.selectedTab = gBrowser.addTab();
   gBrowser.selectedBrowser.addEventListener("load", function() {
diff --git a/browser/devtools/shared/test/browser_telemetry_toolboxtabs_jsdebugger.js b/browser/devtools/shared/test/browser_telemetry_toolboxtabs_jsdebugger.js
--- a/browser/devtools/shared/test/browser_telemetry_toolboxtabs_jsdebugger.js
+++ b/browser/devtools/shared/test/browser_telemetry_toolboxtabs_jsdebugger.js
@@ -7,27 +7,27 @@ const TEST_URI = "data:text/html;charset
 // opened we make use of setTimeout() to create tool active times.
 const TOOL_DELAY = 200;
 
 let {Promise: promise} = Cu.import("resource://gre/modules/devtools/deprecated-sync-thenables.js", {});
 let {Services} = Cu.import("resource://gre/modules/Services.jsm", {});
 
 let require = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools.require;
 let Telemetry = require("devtools/shared/telemetry");
+let telemetryInfo = {};
 
 function init() {
-  Telemetry.prototype.telemetryInfo = {};
   Telemetry.prototype._oldlog = Telemetry.prototype.log;
   Telemetry.prototype.log = function(histogramId, value) {
     if (histogramId) {
-      if (!this.telemetryInfo[histogramId]) {
-        this.telemetryInfo[histogramId] = [];
+      if (!telemetryInfo[histogramId]) {
+        telemetryInfo[histogramId] = [];
       }
 
-      this.telemetryInfo[histogramId].push(value);
+      telemetryInfo[histogramId].push(value);
     }
   }
 
   openToolboxTabTwice("jsdebugger", false);
 }
 
 function openToolboxTabTwice(id, secondPass) {
   let target = TargetFactory.forTab(gBrowser.selectedTab);
@@ -45,17 +45,17 @@ function openToolboxTabTwice(id, secondP
     // We use a timeout to check the tools active time
     setTimeout(function() {
       gDevTools.closeToolbox(target);
     }, TOOL_DELAY);
   }).then(null, reportError);
 }
 
 function checkResults() {
-  let result = Telemetry.prototype.telemetryInfo;
+  let result = telemetryInfo;
 
   for (let [histId, value] of Iterator(result)) {
     if (histId.endsWith("OPENED_PER_USER_FLAG")) {
       ok(value.length === 1 && value[0] === true,
          "Per user value " + histId + " has a single value of true");
     } else if (histId.endsWith("OPENED_BOOLEAN")) {
       ok(value.length > 1, histId + " has more than one entry");
 
@@ -86,19 +86,18 @@ function reportError(error) {
   finishUp();
 }
 
 function finishUp() {
   gBrowser.removeCurrentTab();
 
   Telemetry.prototype.log = Telemetry.prototype._oldlog;
   delete Telemetry.prototype._oldlog;
-  delete Telemetry.prototype.telemetryInfo;
 
-  TargetFactory = Services = promise = require = null;
+  telemetryInfo = TargetFactory = Services = promise = require = null;
 
   finish();
 }
 
 function test() {
   waitForExplicitFinish();
   gBrowser.selectedTab = gBrowser.addTab();
   gBrowser.selectedBrowser.addEventListener("load", function() {
diff --git a/browser/devtools/shared/test/browser_telemetry_toolboxtabs_jsprofiler.js b/browser/devtools/shared/test/browser_telemetry_toolboxtabs_jsprofiler.js
--- a/browser/devtools/shared/test/browser_telemetry_toolboxtabs_jsprofiler.js
+++ b/browser/devtools/shared/test/browser_telemetry_toolboxtabs_jsprofiler.js
@@ -7,27 +7,27 @@ const TEST_URI = "data:text/html;charset
 // opened we make use of setTimeout() to create tool active times.
 const TOOL_DELAY = 200;
 
 let {Promise: promise} = Cu.import("resource://gre/modules/devtools/deprecated-sync-thenables.js", {});
 let {Services} = Cu.import("resource://gre/modules/Services.jsm", {});
 
 let require = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools.require;
 let Telemetry = require("devtools/shared/telemetry");
+let telemetryInfo = {};
 
 function init() {
-  Telemetry.prototype.telemetryInfo = {};
   Telemetry.prototype._oldlog = Telemetry.prototype.log;
   Telemetry.prototype.log = function(histogramId, value) {
     if (histogramId) {
-      if (!this.telemetryInfo[histogramId]) {
-        this.telemetryInfo[histogramId] = [];
+      if (!telemetryInfo[histogramId]) {
+        telemetryInfo[histogramId] = [];
       }
 
-      this.telemetryInfo[histogramId].push(value);
+      telemetryInfo[histogramId].push(value);
     }
   }
 
   openToolboxTabTwice("jsprofiler", false);
 }
 
 function openToolboxTabTwice(id, secondPass) {
   let target = TargetFactory.forTab(gBrowser.selectedTab);
@@ -45,17 +45,17 @@ function openToolboxTabTwice(id, secondP
     // We use a timeout to check the tools active time
     setTimeout(function() {
       gDevTools.closeToolbox(target);
     }, TOOL_DELAY);
   }).then(null, reportError);
 }
 
 function checkResults() {
-  let result = Telemetry.prototype.telemetryInfo;
+  let result = telemetryInfo;
 
   for (let [histId, value] of Iterator(result)) {
     if (histId.endsWith("OPENED_PER_USER_FLAG")) {
       ok(value.length === 1 && value[0] === true,
          "Per user value " + histId + " has a single value of true");
     } else if (histId.endsWith("OPENED_BOOLEAN")) {
       ok(value.length > 1, histId + " has more than one entry");
 
@@ -86,19 +86,18 @@ function reportError(error) {
   finishUp();
 }
 
 function finishUp() {
   gBrowser.removeCurrentTab();
 
   Telemetry.prototype.log = Telemetry.prototype._oldlog;
   delete Telemetry.prototype._oldlog;
-  delete Telemetry.prototype.telemetryInfo;
 
-  TargetFactory = Services = promise = require = null;
+  telemetryInfo = TargetFactory = Services = promise = require = null;
 
   finish();
 }
 
 function test() {
   waitForExplicitFinish();
   gBrowser.selectedTab = gBrowser.addTab();
   gBrowser.selectedBrowser.addEventListener("load", function() {
diff --git a/browser/devtools/shared/test/browser_telemetry_toolboxtabs_netmonitor.js b/browser/devtools/shared/test/browser_telemetry_toolboxtabs_netmonitor.js
--- a/browser/devtools/shared/test/browser_telemetry_toolboxtabs_netmonitor.js
+++ b/browser/devtools/shared/test/browser_telemetry_toolboxtabs_netmonitor.js
@@ -7,27 +7,27 @@ const TEST_URI = "data:text/html;charset
 // opened we make use of setTimeout() to create tool active times.
 const TOOL_DELAY = 200;
 
 let {Promise: promise} = Cu.import("resource://gre/modules/devtools/deprecated-sync-thenables.js", {});
 let {Services} = Cu.import("resource://gre/modules/Services.jsm", {});
 
 let require = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools.require;
 let Telemetry = require("devtools/shared/telemetry");
+let telemetryInfo = {};
 
 function init() {
-  Telemetry.prototype.telemetryInfo = {};
   Telemetry.prototype._oldlog = Telemetry.prototype.log;
   Telemetry.prototype.log = function(histogramId, value) {
     if (histogramId) {
-      if (!this.telemetryInfo[histogramId]) {
-        this.telemetryInfo[histogramId] = [];
+      if (!telemetryInfo[histogramId]) {
+        telemetryInfo[histogramId] = [];
       }
 
-      this.telemetryInfo[histogramId].push(value);
+      telemetryInfo[histogramId].push(value);
     }
   }
 
   openToolboxTabTwice("netmonitor", false);
 }
 
 function openToolboxTabTwice(id, secondPass) {
   let target = TargetFactory.forTab(gBrowser.selectedTab);
@@ -45,17 +45,17 @@ function openToolboxTabTwice(id, secondP
     // We use a timeout to check the tools active time
     setTimeout(function() {
       gDevTools.closeToolbox(target);
     }, TOOL_DELAY);
   }).then(null, reportError);
 }
 
 function checkResults() {
-  let result = Telemetry.prototype.telemetryInfo;
+  let result = telemetryInfo;
 
   for (let [histId, value] of Iterator(result)) {
     if (histId.endsWith("OPENED_PER_USER_FLAG")) {
       ok(value.length === 1 && value[0] === true,
          "Per user value " + histId + " has a single value of true");
     } else if (histId.endsWith("OPENED_BOOLEAN")) {
       ok(value.length > 1, histId + " has more than one entry");
 
@@ -86,19 +86,18 @@ function reportError(error) {
   finishUp();
 }
 
 function finishUp() {
   gBrowser.removeCurrentTab();
 
   Telemetry.prototype.log = Telemetry.prototype._oldlog;
   delete Telemetry.prototype._oldlog;
-  delete Telemetry.prototype.telemetryInfo;
 
-  TargetFactory = Services = promise = require = null;
+  telemetryInfo = TargetFactory = Services = promise = require = null;
 
   finish();
 }
 
 function test() {
   waitForExplicitFinish();
   gBrowser.selectedTab = gBrowser.addTab();
   gBrowser.selectedBrowser.addEventListener("load", function() {
diff --git a/browser/devtools/shared/test/browser_telemetry_toolboxtabs_options.js b/browser/devtools/shared/test/browser_telemetry_toolboxtabs_options.js
--- a/browser/devtools/shared/test/browser_telemetry_toolboxtabs_options.js
+++ b/browser/devtools/shared/test/browser_telemetry_toolboxtabs_options.js
@@ -7,27 +7,27 @@ const TEST_URI = "data:text/html;charset
 // opened we make use of setTimeout() to create tool active times.
 const TOOL_DELAY = 200;
 
 let {Promise: promise} = Cu.import("resource://gre/modules/devtools/deprecated-sync-thenables.js", {});
 let {Services} = Cu.import("resource://gre/modules/Services.jsm", {});
 
 let require = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools.require;
 let Telemetry = require("devtools/shared/telemetry");
+let telemetryInfo = {};
 
 function init() {
-  Telemetry.prototype.telemetryInfo = {};
   Telemetry.prototype._oldlog = Telemetry.prototype.log;
   Telemetry.prototype.log = function(histogramId, value) {
     if (histogramId) {
-      if (!this.telemetryInfo[histogramId]) {
-        this.telemetryInfo[histogramId] = [];
+      if (!telemetryInfo[histogramId]) {
+        telemetryInfo[histogramId] = [];
       }
 
-      this.telemetryInfo[histogramId].push(value);
+      telemetryInfo[histogramId].push(value);
     }
   }
 
   openToolboxTabTwice("options", false);
 }
 
 function openToolboxTabTwice(id, secondPass) {
   let target = TargetFactory.forTab(gBrowser.selectedTab);
@@ -45,17 +45,17 @@ function openToolboxTabTwice(id, secondP
     // We use a timeout to check the tools active time
     setTimeout(function() {
       gDevTools.closeToolbox(target);
     }, TOOL_DELAY);
   }).then(null, reportError);
 }
 
 function checkResults() {
-  let result = Telemetry.prototype.telemetryInfo;
+  let result = telemetryInfo;
 
   for (let [histId, value] of Iterator(result)) {
     if (histId.endsWith("OPENED_PER_USER_FLAG")) {
       ok(value.length === 1 && value[0] === true,
          "Per user value " + histId + " has a single value of true");
     } else if (histId.endsWith("OPENED_BOOLEAN")) {
       ok(value.length > 1, histId + " has more than one entry");
 
@@ -86,19 +86,18 @@ function reportError(error) {
   finishUp();
 }
 
 function finishUp() {
   gBrowser.removeCurrentTab();
 
   Telemetry.prototype.log = Telemetry.prototype._oldlog;
   delete Telemetry.prototype._oldlog;
-  delete Telemetry.prototype.telemetryInfo;
 
-  TargetFactory = Services = promise = require = null;
+  telemetryInfo = TargetFactory = Services = promise = require = null;
 
   finish();
 }
 
 function test() {
   waitForExplicitFinish();
   gBrowser.selectedTab = gBrowser.addTab();
   gBrowser.selectedBrowser.addEventListener("load", function() {
diff --git a/browser/devtools/shared/test/browser_telemetry_toolboxtabs_styleeditor.js b/browser/devtools/shared/test/browser_telemetry_toolboxtabs_styleeditor.js
--- a/browser/devtools/shared/test/browser_telemetry_toolboxtabs_styleeditor.js
+++ b/browser/devtools/shared/test/browser_telemetry_toolboxtabs_styleeditor.js
@@ -7,27 +7,27 @@ const TEST_URI = "data:text/html;charset
 // opened we make use of setTimeout() to create tool active times.
 const TOOL_DELAY = 200;
 
 let {Promise: promise} = Cu.import("resource://gre/modules/devtools/deprecated-sync-thenables.js", {});
 let {Services} = Cu.import("resource://gre/modules/Services.jsm", {});
 
 let require = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools.require;
 let Telemetry = require("devtools/shared/telemetry");
+let telemetryInfo = {};
 
 function init() {
-  Telemetry.prototype.telemetryInfo = {};
   Telemetry.prototype._oldlog = Telemetry.prototype.log;
   Telemetry.prototype.log = function(histogramId, value) {
     if (histogramId) {
-      if (!this.telemetryInfo[histogramId]) {
-        this.telemetryInfo[histogramId] = [];
+      if (!telemetryInfo[histogramId]) {
+        telemetryInfo[histogramId] = [];
       }
 
-      this.telemetryInfo[histogramId].push(value);
+      telemetryInfo[histogramId].push(value);
     }
   }
 
   openToolboxTabTwice("styleeditor", false);
 }
 
 function openToolboxTabTwice(id, secondPass) {
   let target = TargetFactory.forTab(gBrowser.selectedTab);
@@ -45,17 +45,17 @@ function openToolboxTabTwice(id, secondP
     // We use a timeout to check the tools active time
     setTimeout(function() {
       gDevTools.closeToolbox(target);
     }, TOOL_DELAY);
   }).then(null, reportError);
 }
 
 function checkResults() {
-  let result = Telemetry.prototype.telemetryInfo;
+  let result = telemetryInfo;
 
   for (let [histId, value] of Iterator(result)) {
     if (histId.endsWith("OPENED_PER_USER_FLAG")) {
       ok(value.length === 1 && value[0] === true,
          "Per user value " + histId + " has a single value of true");
     } else if (histId.endsWith("OPENED_BOOLEAN")) {
       ok(value.length > 1, histId + " has more than one entry");
 
@@ -86,19 +86,19 @@ function reportError(error) {
   finishUp();
 }
 
 function finishUp() {
   gBrowser.removeCurrentTab();
 
   Telemetry.prototype.log = Telemetry.prototype._oldlog;
   delete Telemetry.prototype._oldlog;
-  delete Telemetry.prototype.telemetryInfo;
 
-  TargetFactory = Services = promise = require = null;
+
+  telemetryInfo = TargetFactory = Services = promise = require = null;
 
   finish();
 }
 
 function test() {
   waitForExplicitFinish();
   gBrowser.selectedTab = gBrowser.addTab();
   gBrowser.selectedBrowser.addEventListener("load", function() {
diff --git a/browser/devtools/shared/test/browser_telemetry_toolboxtabs_webconsole.js b/browser/devtools/shared/test/browser_telemetry_toolboxtabs_webconsole.js
--- a/browser/devtools/shared/test/browser_telemetry_toolboxtabs_webconsole.js
+++ b/browser/devtools/shared/test/browser_telemetry_toolboxtabs_webconsole.js
@@ -7,27 +7,27 @@ const TEST_URI = "data:text/html;charset
 // opened we make use of setTimeout() to create tool active times.
 const TOOL_DELAY = 200;
 
 let {Promise: promise} = Cu.import("resource://gre/modules/devtools/deprecated-sync-thenables.js", {});
 let {Services} = Cu.import("resource://gre/modules/Services.jsm", {});
 
 let require = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools.require;
 let Telemetry = require("devtools/shared/telemetry");
+let telemetryInfo = {};
 
 function init() {
-  Telemetry.prototype.telemetryInfo = {};
   Telemetry.prototype._oldlog = Telemetry.prototype.log;
   Telemetry.prototype.log = function(histogramId, value) {
     if (histogramId) {
-      if (!this.telemetryInfo[histogramId]) {
-        this.telemetryInfo[histogramId] = [];
+      if (!telemetryInfo[histogramId]) {
+        telemetryInfo[histogramId] = [];
       }
 
-      this.telemetryInfo[histogramId].push(value);
+      telemetryInfo[histogramId].push(value);
     }
   }
 
   openToolboxTabTwice("webconsole", false);
 }
 
 function openToolboxTabTwice(id, secondPass) {
   let target = TargetFactory.forTab(gBrowser.selectedTab);
@@ -45,19 +45,18 @@ function openToolboxTabTwice(id, secondP
     // We use a timeout to check the tools active time
     setTimeout(function() {
       gDevTools.closeToolbox(target);
     }, TOOL_DELAY);
   }).then(null, reportError);
 }
 
 function checkResults() {
-  let result = Telemetry.prototype.telemetryInfo;
 
-  for (let [histId, value] of Iterator(result)) {
+  for (let [histId, value] of Iterator(telemetryInfo)) {
     if (histId.endsWith("OPENED_PER_USER_FLAG")) {
       ok(value.length === 1 && value[0] === true,
          "Per user value " + histId + " has a single value of true");
     } else if (histId.endsWith("OPENED_BOOLEAN")) {
       ok(value.length > 1, histId + " has more than one entry");
 
       let okay = value.every(function(element) {
         return element === true;
@@ -86,17 +85,16 @@ function reportError(error) {
   finishUp();
 }
 
 function finishUp() {
   gBrowser.removeCurrentTab();
 
   Telemetry.prototype.log = Telemetry.prototype._oldlog;
   delete Telemetry.prototype._oldlog;
-  delete Telemetry.prototype.telemetryInfo;
 
   TargetFactory = Services = promise = require = null;
 
   finish();
 }
 
 function test() {
   waitForExplicitFinish();
