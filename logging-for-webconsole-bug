# HG changeset patch
# Parent 1e9afafe5229a8813766cd6a7a1ee2f981428f53
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 1088861 - Console doesn't respond when debugger is paused at breakpoint


diff --git a/browser/devtools/webconsole/webconsole.js b/browser/devtools/webconsole/webconsole.js
--- a/browser/devtools/webconsole/webconsole.js
+++ b/browser/devtools/webconsole/webconsole.js
@@ -3400,16 +3400,17 @@ JSTerm.prototype = {
     }
 
     let evalOptions = {
       bindObjectActor: aOptions.bindObjectActor,
       frameActor: frameActor,
       selectedNodeActor: aOptions.selectedNodeActor,
     };
 
+    console.log("Inside frontend - about to evaluate " + aString);
     this.webConsoleClient.evaluateJS(aString, onResult, evalOptions);
     return deferred.promise;
   },
 
   /**
    * Retrieve the FrameActor ID given a frame depth.
    *
    * @param number aFrame
diff --git a/toolkit/devtools/server/actors/webconsole.js b/toolkit/devtools/server/actors/webconsole.js
--- a/toolkit/devtools/server/actors/webconsole.js
+++ b/toolkit/devtools/server/actors/webconsole.js
@@ -736,16 +736,18 @@ WebConsoleActor.prototype =
    * @param object aRequest
    *        The JSON request object received from the Web Console client.
    * @return object
    *         The evaluation response packet.
    */
   onEvaluateJS: function WCA_onEvaluateJS(aRequest)
   {
     let input = aRequest.text;
+    dump("BRIAN\n");
+    console.log("On Evaluate JS", input);
     let timestamp = Date.now();
 
     let evalOptions = {
       bindObjectActor: aRequest.bindObjectActor,
       frameActor: aRequest.frameActor,
       url: aRequest.url,
       selectedNodeActor: aRequest.selectedNodeActor,
     };
@@ -806,18 +808,31 @@ WebConsoleActor.prototype =
     let frameActorId = aRequest.frameActor;
     let dbgObject = null;
     let environment = null;
 
     // This is the case of the paused debugger
     if (frameActorId) {
       let frameActor = this.conn.getActor(frameActorId);
       if (frameActor) {
-        let frame = frameActor.frame;
-        environment = frame.environment;
+        try {
+        Cu.reportError("HIIIII: " +
+                       frameActorId);
+          let frame = frameActor.frame;
+          environment = frame.environment;
+        } catch(e) {
+        Cu.reportError("EEEDDDDD: " +
+                       frameActorId);
+          // console.error("BRIAN");
+          // return {
+          //   from: this.actorID,
+          //   matches: []
+          //   matchProp: '',
+          // };
+        }
       }
       else {
         Cu.reportError("Web Console Actor: the frame actor was not found: " +
                        frameActorId);
       }
     }
     // This is the general case (non-paused debugger)
     else {
@@ -1021,16 +1036,19 @@ WebConsoleActor.prototype =
    *         evaluated.
    *         - result: the result of the evaluation.
    *         - helperResult: any result coming from a JSTerm helper function.
    *         - url: the url to evaluate the script as. Defaults to
    *         "debugger eval code".
    */
   evalWithDebugger: function WCA_evalWithDebugger(aString, aOptions = {})
   {
+    console.log("Eval With Debugger", aString);
+    console.dir(aOptions);
+    console.trace();
     // The help function needs to be easy to guess, so we make the () optional.
     if (aString.trim() == "help" || aString.trim() == "?") {
       aString = "help()";
     }
 
     // Find the Debugger.Frame of the given FrameActor.
     let frame = null, frameActor = null;
     if (aOptions.frameActor) {
