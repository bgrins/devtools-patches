# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  a375bdb7fb5d38a5d8829d226a1a3090d2952d5e
Bug 1144779 - Do not use mouse coordinates from onMouseUp to set selection end when dragging in Graph;r=vporof

Instead use the cursor.x property that was stored during the mousemove event.
This helps preserve the selection when a mouseup happens outisde of the toolbox
window.

diff --git a/browser/devtools/shared/test/browser_graphs-07a.js b/browser/devtools/shared/test/browser_graphs-07a.js
--- a/browser/devtools/shared/test/browser_graphs-07a.js
+++ b/browser/devtools/shared/test/browser_graphs-07a.js
@@ -198,19 +198,19 @@ function normalDragStop(graph, x, y = 1)
 }
 
 function buggyDragStop(graph, x, y = 1) {
   x /= window.devicePixelRatio;
   y /= window.devicePixelRatio;
 
   // Only fire a mousemove instead of a mouseup.
   // This happens when the mouseup happens outside of the toolbox,
-  // see Bug 1066504.
+  // see Bug 1066504 and 1144779
   graph._onMouseMove({ clientX: x, clientY: y });
-  graph._onMouseMove({ clientX: x, clientY: y, buttons: 0 });
+  graph._onMouseMove({ clientX: x+1, clientY: y+1, buttons: 0 });
 }
 
 function scroll(graph, wheel, x, y = 1) {
   x /= window.devicePixelRatio;
   y /= window.devicePixelRatio;
   graph._onMouseMove({ clientX: x, clientY: y });
   graph._onMouseWheel({ clientX: x, clientY: y, detail: wheel });
 }
diff --git a/browser/devtools/shared/widgets/Graphs.jsm b/browser/devtools/shared/widgets/Graphs.jsm
--- a/browser/devtools/shared/widgets/Graphs.jsm
+++ b/browser/devtools/shared/widgets/Graphs.jsm
@@ -956,17 +956,17 @@ AbstractCanvasGraph.prototype = {
     let resizer = this._selectionResizer;
     let dragger = this._selectionDragger;
 
     // If a mouseup happened outside the toolbox and the current operation
     // is causing the selection changed, then end it.
     if (e.buttons == 0 && (this.hasSelectionInProgress() ||
                            resizer.margin != null ||
                            dragger.origin != null)) {
-      return this._onMouseUp(e);
+      return this._onMouseUp();
     }
 
     let offset = this._getContainerOffset();
     let mouseX = (e.clientX - offset.left) * this._pixelRatio;
     let mouseY = (e.clientY - offset.top) * this._pixelRatio;
     this._cursor.x = mouseX;
     this._cursor.y = mouseY;
 
@@ -1058,19 +1058,16 @@ AbstractCanvasGraph.prototype = {
     this.emit("mousedown");
   },
 
   /**
    * Listener for the "mouseup" event on the graph's container.
    */
   _onMouseUp: function(e) {
     this._isMouseActive = false;
-    let offset = this._getContainerOffset();
-    let mouseX = (e.clientX - offset.left) * this._pixelRatio;
-
     switch (this._canvas.getAttribute("input")) {
       case "hovering-background":
       case "hovering-region":
         if (!this.selectionEnabled) {
           break;
         }
         if (this.getSelectionWidth() < 1) {
           let region = this.getHoveredRegion();
@@ -1079,17 +1076,17 @@ AbstractCanvasGraph.prototype = {
             this._selection.end = region.end;
             this.emit("selecting");
           } else {
             this._selection.start = null;
             this._selection.end = null;
             this.emit("deselecting");
           }
         } else {
-          this._selection.end = mouseX;
+          this._selection.end = this._cursor.x;
           this.emit("selecting");
         }
         break;
 
       case "hovering-selection-start-boundary":
       case "hovering-selection-end-boundary":
         this._selectionResizer.margin = null;
         break;
