# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  12aaca525d03b8e733d0627ee3019772bd647da6
Debugging issues with mouseup in timelin

diff --git a/browser/devtools/shared/widgets/Graphs.jsm b/browser/devtools/shared/widgets/Graphs.jsm
--- a/browser/devtools/shared/widgets/Graphs.jsm
+++ b/browser/devtools/shared/widgets/Graphs.jsm
@@ -4,16 +4,17 @@
 "use strict";
 
 const Cu = Components.utils;
 
 Cu.import("resource:///modules/devtools/ViewHelpers.jsm");
 const promise = Cu.import("resource://gre/modules/Promise.jsm", {}).Promise;
 const {Task} = Cu.import("resource://gre/modules/Task.jsm", {});
 const {EventEmitter} = Cu.import("resource://gre/modules/devtools/event-emitter.js", {});
+const {console} = Components.utils.import("resource://gre/modules/devtools/Console.jsm", {});
 
 this.EXPORTED_SYMBOLS = [
   "GraphCursor",
   "GraphArea",
   "GraphAreaDragger",
   "GraphAreaResizer",
   "AbstractCanvasGraph",
   "LineGraphWidget",
@@ -995,16 +996,17 @@ AbstractCanvasGraph.prototype = {
       }
       if (this._isHoveringEndBoundary()) {
         this._canvas.setAttribute("input", "hovering-selection-end-boundary");
         this._shouldRedraw = true;
         return;
       }
       if (this._isHoveringSelectionContents()) {
         this._canvas.setAttribute("input", "hovering-selection-contents");
+        this._selection.tempEnd = mouseX;
         this._shouldRedraw = true;
         return;
       }
     }
 
     let region = this.getHoveredRegion();
     if (region) {
       this._canvas.setAttribute("input", "hovering-region");
@@ -1037,16 +1039,17 @@ AbstractCanvasGraph.prototype = {
         this._selectionResizer.margin = "start";
         break;
 
       case "hovering-selection-end-boundary":
         this._selectionResizer.margin = "end";
         break;
 
       case "hovering-selection-contents":
+        console.log("Hovering selection contents", mouseX, this._selection.tempEnd)
         this._selectionDragger.origin = mouseX;
         this._selectionDragger.anchor.start = this._selection.start;
         this._selectionDragger.anchor.end = this._selection.end;
         this._canvas.setAttribute("input", "dragging-selection-contents");
         break;
     }
 
     this._shouldRedraw = true;
