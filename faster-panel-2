# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  0d1440e8bda6bf39af0f51a6c802db27e3d5acdd

diff --git a/toolkit/content/widgets/panel.js b/toolkit/content/widgets/panel.js
--- a/toolkit/content/widgets/panel.js
+++ b/toolkit/content/widgets/panel.js
@@ -16,64 +16,85 @@
 
       this.addEventListener("popupshowing", this);
       this.addEventListener("popupshown", this);
       this.addEventListener("popuphiding", this);
       this.addEventListener("popuphidden", this);
       this.addEventListener("popuppositioned", this);
     }
 
-    connectedCallback() {
-      if (this.delayConnectedCallback()) {
-        return;
+    static get observedAttributes() {
+      return ["hidden"];
+    }
+
+    attributeChangedCallback(name, oldValue, newValue) {
+      if (name == "hidden" && !newValue) {
+        this.createDOM();
       }
+    }
 
-      if (!this.isArrowPanel) {
+    createDOM() {
+      if (this.hidden || !this.isArrowPanel || this.shadowRoot) {
         return;
       }
 
       this.attachShadow({ mode: "open" });
       this.shadowRoot.appendChild(this.fragment);
+    }
+
+    connectedCallback() {
+      if (!this.isArrowPanel || this.shadowRoot) {
+        return;
+      }
 
       if (!this.hasAttribute("flip")) {
         this.setAttribute("flip", "both");
       }
       if (!this.hasAttribute("side")) {
         this.setAttribute("side", "top");
       }
       if (!this.hasAttribute("position")) {
         this.setAttribute("position", "bottomcenter topleft");
       }
       if (!this.hasAttribute("consumeoutsideclicks")) {
         this.setAttribute("consumeoutsideclicks", "false");
       }
 
-      this.initializeAttributeInheritance();
+      this.createDOM();
     }
 
     get fragment() {
       if (!this.constructor.hasOwnProperty("_fragment")) {
+        // Directly set orientation on the content when the attribute is on the host.
+        // This is faster than setting up attribute inheritance
         this.constructor._fragment = MozXULElement.parseXULToFragment(`
         <html:link rel="stylesheet" href="chrome://global/skin/global.css"/>
+        <html:style>
+          :host([orient=vertical]) .panel-arrowcontent {
+            -moz-box-orient: vertical;
+          }
+        </html:style>
         <vbox class="panel-arrowcontainer" flex="1">
           <box class="panel-arrowbox" part="arrowbox">
             <image class="panel-arrow" part="arrow"/>
           </box>
-          <box class="panel-arrowcontent" flex="1" part="arrowcontent"><html:slot/></box>
+          <box class="panel-arrowcontent" flex="1" part="arrowcontent">
+            <html:slot/>
+          </box>
         </vbox>
       `);
       }
       return document.importNode(this.constructor._fragment, true);
     }
 
-    static get inheritedAttributes() {
-      return {
-        ".panel-arrowcontent": "align,dir,orient,pack",
-      };
-    }
+    // static get inheritedAttributes() {
+    //   return {
+    //     ".panel-arrowcontent": "align,dir,orient,pack",
+    //   };
+    // }
 
     get isArrowPanel() {
       return this.getAttribute("type") == "arrow";
     }
 
     adjustArrowPosition() {
       if (!this.isArrowPanel) {
         return;
