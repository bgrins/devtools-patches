# HG changeset patch
# User Patrick Brosset <pbrosset@mozilla.com>
# Parent  7419fa799a59f4564eafc6397c6a0ee9953aa439
Bug 1123851 - 2 - GCLI command to highlight element's geometry; r=jwalker

diff --git a/browser/devtools/inspector/test/browser_inspector_highlighter-geometry_01.js b/browser/devtools/inspector/test/browser_inspector_highlighter-geometry_01.js
--- a/browser/devtools/inspector/test/browser_inspector_highlighter-geometry_01.js
+++ b/browser/devtools/inspector/test/browser_inspector_highlighter-geometry_01.js
@@ -20,16 +20,17 @@ add_task(function*() {
 
   let highlighter = yield front.getHighlighterByType("GeometryEditorHighlighter");
 
   yield hasArrows(highlighter, inspector);
   yield isHiddenForNonPositionedNonSizedElement(highlighter, inspector);
   yield sideArrowsAreDisplayedForPositionedNode(highlighter, inspector);
   yield sizeArrowsAreDisplayedForSizedNode(highlighter, inspector);
 
+yield promise.defer().promise;
   yield highlighter.finalize();
 });
 
 function* hasArrows(highlighterFront, inspector) {
   info("Checking that the highlighter has the expected 6 arrows and labels");
 
   for (let name of [...SIDES, ...SIZES]) {
     let value = yield getAttribute(ID + "arrow-" + name, "class", highlighterFront);
@@ -67,17 +68,17 @@ function* sideArrowsAreDisplayedForPosit
   }
 
   for (let name of SIZES) {
     let hidden = yield getAttribute(ID + "arrow-" + name, "hidden", highlighterFront);
     is(hidden, "true", "The " + name + " arrow is hidden for the positioned node");
   }
 
   info("Hiding the highlighter");
-  yield highlighterFront.hide();
+  // yield highlighterFront.hide();
 }
 
 function* sizeArrowsAreDisplayedForSizedNode(highlighterFront, inspector) {
   info("Asking to show the highlighter on the sized node");
 
   let node = yield getNodeFront("#sized", inspector);
   yield highlighterFront.show(node);
 
@@ -87,16 +88,16 @@ function* sizeArrowsAreDisplayedForSized
   }
 
   for (let name of SIDES) {
     let hidden = yield getAttribute(ID + "arrow-" + name, "hidden", highlighterFront);
     is(hidden, "true", "The " + name + " arrow is hidden for the sized node");
   }
 
   info("Hiding the highlighter");
-  yield highlighterFront.hide();
+  // yield highlighterFront.hide();
 }
 
 function* getAttribute(nodeID, name, {actorID}) {
   let {data} = yield executeInContent("Test:GetHighlighterAttribute",
     {nodeID, name, actorID});
   return data;
 }
diff --git a/browser/locales/en-US/chrome/browser/devtools/gclicommands.properties b/browser/locales/en-US/chrome/browser/devtools/gclicommands.properties
--- a/browser/locales/en-US/chrome/browser/devtools/gclicommands.properties
+++ b/browser/locales/en-US/chrome/browser/devtools/gclicommands.properties
@@ -211,16 +211,26 @@ highlightFillManual=Override the default
 # dialog when the user is using this command.
 highlightKeepDesc=Keep existing highlighters
 
 # LOCALIZATION NOTE (highlightKeepManual) A fuller description of the 'keep'
 # option parameter to the 'highlight' command, displayed when the user asks for
 # help on what it does.
 highlightKeepManual=By default, existing highlighters are hidden when running the command, unless this option is set
 
+# LOCALIZATION NOTE (highlightGeometryDesc) A very short string to describe the
+# 'geometry' option parameter to the 'highlight' command, which is displayed in a
+# dialog when the user is using this command.
+highlightGeometryDesc=Show node's geometry
+
+# LOCALIZATION NOTE (highlightGeometryManual) A fuller description of the
+# 'geometry' option parameter to the 'highlight' command, displayed when the
+# user asks for help on what it does.
+highlightGeometryManual=Set this option to display the node's top, right, bottom, left, width and height CSS properties, if they are set
+
 # LOCALIZATION NOTE (highlightOutputConfirm) A confirmation message for the
 # 'highlight' command, displayed to the user once the command has been entered,
 # informing the user how many nodes have been highlighted successfully and how
 # to turn highlighting off
 highlightOutputConfirm2=%1$S node highlighted;%1$S nodes highlighted
 
 # LOCALIZATION NOTE (highlightOutputMaxReached) A confirmation message for the
 # 'highlight' command, displayed to the user once the command has been entered,
diff --git a/toolkit/devtools/gcli/commands/highlight.js b/toolkit/devtools/gcli/commands/highlight.js
--- a/toolkit/devtools/gcli/commands/highlight.js
+++ b/toolkit/devtools/gcli/commands/highlight.js
@@ -2,17 +2,18 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const {Cc, Ci, Cu} = require("chrome");
 const gcli = require("gcli/index");
 require("devtools/server/actors/inspector");
-const {BoxModelHighlighter} = require("devtools/server/actors/highlighter");
+const {BoxModelHighlighter,
+       GeometryEditorHighlighter} = require("devtools/server/actors/highlighter");
 
 XPCOMUtils.defineLazyGetter(this, "nodesSelected", function() {
   return Services.strings.createBundle("chrome://browser/locale/devtools/gclicommands.properties");
 });
 XPCOMUtils.defineLazyModuleGetter(this, "PluralForm","resource://gre/modules/PluralForm.jsm");
 
 // How many maximum nodes can be highlighted in parallel
 const MAX_HIGHLIGHTED_ELEMENTS = 100;
@@ -20,23 +21,33 @@ const MAX_HIGHLIGHTED_ELEMENTS = 100;
 // Stores the highlighters instances so they can be destroyed later.
 // also export them so tests can access those and assert they got created
 // correctly.
 exports.highlighters = [];
 
 /**
  * Destroy all existing highlighters
  */
-function unhighlightAll() {
+function destroyHighlighters() {
   for (let highlighter of exports.highlighters) {
     highlighter.destroy();
   }
   exports.highlighters.length = 0;
 }
 
+/**
+ * Get an object that looks like a TabActor for instantiating highlighters
+ */
+function getTabActorContext(env) {
+  return {
+    browser: env.chromeWindow.gBrowser.getBrowserForDocument(env.document),
+    window: env.window
+  };
+}
+
 exports.items = [
   {
     name: "highlight",
     description: gcli.lookup("highlightDesc"),
     manual: gcli.lookup("highlightManual"),
     params: [
       {
         name: "selector",
@@ -82,53 +93,59 @@ exports.items = [
             manual: gcli.lookup("highlightFillManual"),
             defaultValue: null
           },
           {
             name: "keep",
             type: "boolean",
             description: gcli.lookup("highlightKeepDesc"),
             manual: gcli.lookup("highlightKeepManual"),
+          },
+          {
+            name: "geometry",
+            type: "boolean",
+            description: gcli.lookup("highlightGeometryDesc"),
+            manual: gcli.lookup("highlightGeometryManual"),
           }
         ]
       }
     ],
     exec: function(args, context) {
       // Remove all existing highlighters unless told otherwise
       if (!args.keep) {
-        unhighlightAll();
+        destroyHighlighters();
       }
 
       let env = context.environment;
 
       // Unhighlight on navigate
-      env.target.once("navigate", unhighlightAll);
-
-      // Build a tab context for the highlighter (which normally takes a
-      // TabActor as parameter to its constructor)
-      let tabContext = {
-        browser: env.chromeWindow.gBrowser.getBrowserForDocument(env.document),
-        window: env.window
-      };
+      env.target.once("navigate", destroyHighlighters);
 
       let i = 0;
       for (let node of args.selector) {
         if (!args.showall && i >= MAX_HIGHLIGHTED_ELEMENTS) {
           break;
         }
 
-        let highlighter = new BoxModelHighlighter(tabContext);
+        let highlighter;
+        if (args.geometry) {
+          highlighter = new GeometryEditorHighlighter(getTabActorContext(env));
+        } else {
+          highlighter = new BoxModelHighlighter(getTabActorContext(env));
+        }
+
         if (args.fill) {
           highlighter.regionFill[args.region] = args.fill;
         }
         highlighter.show(node, {
           region: args.region,
           hideInfoBar: !args.showinfobar,
           hideGuides: args.hideguides,
-          showOnly: args.region
+          showOnly: args.region,
+          hideOffsetParent: true
         });
         exports.highlighters.push(highlighter);
         i ++;
       }
 
       let highlightText = nodesSelected.GetStringFromName("highlightOutputConfirm2");
       let output = PluralForm.get(args.selector.length, highlightText)
                              .replace("%1$S", args.selector.length);
@@ -139,11 +156,13 @@ exports.items = [
 
       return output;
     }
   },
   {
     name: "unhighlight",
     description: gcli.lookup("unhighlightDesc"),
     manual: gcli.lookup("unhighlightManual"),
-    exec: unhighlightAll
+    exec: () => {
+      destroyHighlighters();
+    }
   }
 ];
diff --git a/toolkit/devtools/server/actors/highlighter.js b/toolkit/devtools/server/actors/highlighter.js
--- a/toolkit/devtools/server/actors/highlighter.js
+++ b/toolkit/devtools/server/actors/highlighter.js
@@ -1796,31 +1796,45 @@ let GeoProp = {
  *
  * The highlighter displays lines and labels for each of the defined properties
  * in and around the element (relative to the offset parent when one exists).
  * The highlighter also highlights the element itself and its offset parent if
  * there is one.
  *
  * Note that the class name contains the word Editor because the aim is for the
  * handles to be draggable in content to make the geometry editable.
+ *
+ * Supported options:
+ * - hideSides {Boolean} Defaults to false, set to true to hide the
+ *   top/left/bottom/right side arrows.
+ * - hideSizes {Boolean} Defaults to false, set to true to hide the width/height
+ *   size arrows.
+ * - hideOffsetParent {Boolean} Defaults to false, set to true to not highlight
+ *   the offsetParent, when one is found.
+ * - all options the BoxModelHighlighter accepts which will be used to
+ *   highlight the current node.
  */
 function GeometryEditorHighlighter(tabActor) {
   AutoRefreshHighlighter.call(this, tabActor);
 
   // The list of element geometry properties that can be set.
   this.definedProperties = new Map();
 
   // The offsetParent highlighters highlights the node's offsetParent in case
   // the current node has one.
   this.offsetParentNodeHighlighter = new BoxModelHighlighter(tabActor);
   // Make only the guides visible.
   this.offsetParentNodeHighlighter.regionFill.padding = "transparent";
 
   // Used to highlight the current node.
   this.nodeHighlighter = new BoxModelHighlighter(tabActor);
+  // The GeometryEditorHighlighter exposes the same options as the
+  // BoxModelHighlighter to configure the nodeHighlighter, so here the regionFill
+  // is also exposed.
+  this.nodeHighlighter.regionFill = this.regionFill = {};
 
   this.markup = new CanvasFrameAnonymousContentHelper(tabActor,
     this._buildMarkup.bind(this));
 }
 
 GeometryEditorHighlighter.prototype = Heritage.extend(AutoRefreshHighlighter.prototype, {
   typeName: "GeometryEditorHighlighter",
 
@@ -1898,16 +1912,20 @@ GeometryEditorHighlighter.prototype = He
       return props;
     }
 
     // Get the list of css rules applying to the current node.
     let cssRules = DOMUtils.getCSSStyleRules(this.currentNode);
     for (let i = 0; i < cssRules.Count(); i++) {
       let rule = cssRules.GetElementAt(i);
       for (let name of GeoProp.allProps()) {
+        if ((GeoProp.isSize(name) && this.options.hideSizes) ||
+            (GeoProp.isSide(name) && this.options.hideSides)) {
+          continue;
+        }
         let value = rule.style.getPropertyValue(name);
         if (value && value !== "auto") {
           // getCSSStyleRules returns rules ordered from least-specific to
           // most-specific, so just override any previous properties we have set.
           props.set(name, {
             cssRule: rule
           });
         }
@@ -1933,18 +1951,20 @@ GeometryEditorHighlighter.prototype = He
     let hasUpdated = this._update();
     if (!hasUpdated) {
       this.hide();
       return;
     }
 
     // Highlight the node itself.
     this.nodeHighlighter.show(this.currentNode, {
-      hideInfoBar: true,
-      hideGuides: true
+      hideInfoBar: ("hideInfoBar" in this.options) ? this.options.hideInfoBar : true,
+      hideGuides: ("hideGuides" in this.options) ? this.options.hideGuides : true,
+      region: this.options.region,
+      showOnly: this.options.showOnly
     });
   },
 
   _update: function() {
     // At each update, the position or/and size may have changed, so here, we
     // get the list of defined properties, get their values, and re-position the
     // arrows.
     this.definedProperties.clear();
@@ -1961,17 +1981,18 @@ GeometryEditorHighlighter.prototype = He
     // Avoid zooming the arrows when content is zoomed.
     this.markup.scaleRootElement(this.currentNode, this.ID_CLASS_PREFIX + "root");
 
     // If the node is fixed or absolute positioned and has a positioned
     // offsetParent, highlight the offsetParent.
     let isPositioned = ["absolute", "fixed"].indexOf(
       CssLogic.getComputedStyle(this.currentNode).position) !== -1;
 
-    if (this.offsetParent.element && isPositioned) {
+    if (!this.options.hideOffsetParent &&
+        this.offsetParent.element && isPositioned) {
       this.offsetParentNodeHighlighter.show(this.offsetParent.element, {
         hideInfoBar: true,
         region: "padding",
         showOnly: "padding"
       });
     } else {
       this.offsetParentNodeHighlighter.hide();
     }
