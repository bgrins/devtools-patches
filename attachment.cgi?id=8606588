# HG changeset patch
# User Gabriel Luong <gabriel.luong@gmail.com>
# Parent  12357ab6e99738b6e16009df50d703a8ac332c95
Bug 1165380 - [rule view] Filter rules should also highlight stylesheet names r=bgrins

diff --git a/browser/devtools/styleinspector/rule-view.js b/browser/devtools/styleinspector/rule-view.js
--- a/browser/devtools/styleinspector/rule-view.js
+++ b/browser/devtools/styleinspector/rule-view.js
@@ -2104,18 +2104,20 @@
     let name = propertyMatch ? propertyMatch[1] : aValue;
     let value = propertyMatch ? propertyMatch[2] : aValue;
 
     // Highlight search matches in the rule properties
     for (let textProp of aRule.textProps) {
       // Get the actual property value displayed in the rule view
       let propertyValue = textProp.editor.valueSpan.textContent.toLowerCase();
       let propertyName = textProp.name.toLowerCase();
+      let styleSheetSource = textProp.rule.title.toLowerCase();
 
       let editor = textProp.editor;
+      let source = editor.ruleEditor.source;
 
       let isPropertyHighlighted = this._highlightMatches(editor.container, {
         searchName: name,
         searchValue: value,
         propertyName: propertyName,
         propertyValue: propertyValue,
         propertyMatch: propertyMatch
       });
@@ -2133,17 +2135,25 @@
             searchValue: value,
             propertyName: computedName,
             propertyValue: computedValue,
             propertyMatch: propertyMatch
           }) ? true : isComputedHighlighted;
         }
       }
 
-      if (isPropertyHighlighted || isComputedHighlighted) {
+      // Highlight search matches in the stylesheet source
+      let isStyleSheetHighlighted = this._highlightMatches(source, {
+        searchName: name,
+        searchValue: value,
+        styleSheetSource: styleSheetSource
+      });
+
+      if (isPropertyHighlighted || isComputedHighlighted ||
+          isStyleSheetHighlighted) {
         isHighlighted = true;
       }
 
       // Expand the computed list if a computed rule is highlighted and the
       // property rule is not highlighted
       if (!isPropertyHighlighted && isComputedHighlighted &&
           !editor.computed.hasAttribute("user-open")) {
         editor.expandForFilter();
@@ -2151,44 +2161,50 @@
       }
     }
 
     return isHighlighted;
   },
 
   /**
    * Helper function for highlightRules that carries out highlighting the given
-   * element if the provided search terms match the property, and returns
-   * a boolean indicating whether or not the search terms match.
+   * element if the provided search terms match the property or stylesheet
+   * source, and returns a boolean indicating whether or not the search terms
+   * match.
    *
    * @param {DOMNode} aElement
    *        The node to highlight if search terms match
    * @param {String} searchName
    *        The parsed search name
    * @param {String} searchValue
    *        The parsed search value
    * @param {String} propertyName
    *        The property name of a rule
    * @param {String} propertyValue
    *        The property value of a rule
    * @param {Boolean} propertyMatch
    *        Whether or not the search term matches a property line like
    *        `font-family: arial`
+   * @param {String} styleSheetSource
+   *        The styleshset source of a rule
    */
   _highlightMatches: function(aElement, { searchName, searchValue, propertyName,
-      propertyValue, propertyMatch }) {
+      propertyValue, propertyMatch, styleSheetSource }) {
     let matches = false;
 
     // If the inputted search value matches a property line like
     // `font-family: arial`, then check to make sure the name and value match.
     // Otherwise, just compare the inputted search string directly against the
     // name and value of the rule property.
     if (propertyMatch && searchName && searchValue) {
       matches = propertyName.includes(searchName) &&
                 propertyValue.includes(searchValue);
+    } else if (styleSheetSource) {
+      matches = (searchName && styleSheetSource.includes(searchName)) ||
+                (searchValue && styleSheetSource.includes(searchValue));
     } else {
       matches = (searchName && propertyName.includes(searchName)) ||
                 (searchValue && propertyValue.includes(searchValue));
     }
 
     if (matches) {
       aElement.classList.add("ruleview-highlight");
     }
@@ -2258,30 +2274,30 @@
     this.element.setAttribute("uneditable", !this.isEditable);
     this.element._ruleEditor = this;
 
     // Give a relative position for the inplace editor's measurement
     // span to be placed absolutely against.
     this.element.style.position = "relative";
 
     // Add the source link.
-    let source = createChild(this.element, "div", {
+    this.source = createChild(this.element, "div", {
       class: "ruleview-rule-source theme-link"
     });
-    source.addEventListener("click", function() {
-      if (source.hasAttribute("unselectable")) {
+    this.source.addEventListener("click", function() {
+      if (this.source.hasAttribute("unselectable")) {
         return;
       }
       let rule = this.rule.domRule;
       this.ruleView.emit("ruleview-linked-clicked", rule);
     }.bind(this));
     let sourceLabel = this.doc.createElementNS(XUL_NS, "label");
     sourceLabel.setAttribute("crop", "center");
     sourceLabel.classList.add("source-link-label");
-    source.appendChild(sourceLabel);
+    this.source.appendChild(sourceLabel);
 
     this.updateSourceLink();
 
     let code = createChild(this.element, "div", {
       class: "ruleview-code"
     });
 
     let header = createChild(code, "div", {});
diff --git a/browser/devtools/styleinspector/test/browser.ini b/browser/devtools/styleinspector/test/browser.ini
--- a/browser/devtools/styleinspector/test/browser.ini
+++ b/browser/devtools/styleinspector/test/browser.ini
@@ -127,16 +127,17 @@
 [browser_ruleview_search-filter_03.js]
 [browser_ruleview_search-filter_04.js]
 [browser_ruleview_search-filter_05.js]
 [browser_ruleview_search-filter_06.js]
 [browser_ruleview_search-filter_07.js]
 [browser_ruleview_search-filter_08.js]
 [browser_ruleview_search-filter_09.js]
 [browser_ruleview_search-filter_10.js]
+[browser_ruleview_search-filter_11.js]
 [browser_ruleview_search-filter_clear.js]
 [browser_ruleview_search-filter_context-menu.js]
 [browser_ruleview_search-filter_escape-keypress.js]
 [browser_ruleview_select-and-copy-styles.js]
 [browser_ruleview_selector-highlighter_01.js]
 [browser_ruleview_selector-highlighter_02.js]
 [browser_ruleview_selector-highlighter_03.js]
 [browser_ruleview_style-editor-link.js]
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_search-filter_11.js b/browser/devtools/styleinspector/test/browser_ruleview_search-filter_11.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/styleinspector/test/browser_ruleview_search-filter_11.js
@@ -0,0 +1,41 @@
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+ http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Tests that the rule view search filter works properly for stylesheet source.
+
+const SEARCH = "doc_urls_clickable.css";
+const TEST_URI = TEST_URL_ROOT + "doc_urls_clickable.html";
+
+add_task(function*() {
+  yield addTab(TEST_URI);
+  let {toolbox, inspector, view} = yield openRuleView();
+  yield selectNode(".relative1", inspector);
+  yield testAddTextInFilter(inspector, view);
+});
+
+function* testAddTextInFilter(inspector, ruleView) {
+  info("Setting filter text to \"" + SEARCH + "\"");
+
+  let win = ruleView.doc.defaultView;
+  let searchField = ruleView.searchField;
+  let onRuleViewFiltered = inspector.once("ruleview-filtered");
+
+  searchField.focus();
+  synthesizeKeys(SEARCH, win);
+  yield onRuleViewFiltered;
+
+  info("Check that the correct rules are visible");
+  is(ruleView.element.children.length, 2, "Should have 2 rules.");
+  is(getRuleViewRuleEditor(ruleView, 0).rule.selectorText, "element",
+    "First rule is inline element.");
+
+  let rule = getRuleViewRuleEditor(ruleView, 1).rule;
+  let source = rule.textProps[0].editor.ruleEditor.source;
+
+  is(rule.selectorText, ".relative1", "Second rule is .relative1.");
+  ok(source.classList.contains("ruleview-highlight"),
+    "stylesheet source is correctly highlighted.");
+}
diff --git a/browser/themes/shared/devtools/ruleview.css b/browser/themes/shared/devtools/ruleview.css
--- a/browser/themes/shared/devtools/ruleview.css
+++ b/browser/themes/shared/devtools/ruleview.css
@@ -11,27 +11,31 @@
   --rule-highlight-background-color: #594724;
 }
 
 .ruleview {
   height: 100%;
 }
 
 .ruleview-rule-source {
-  -moz-padding-start: 5px;
   text-align: end;
   float: right;
   -moz-user-select: none;
+  margin-bottom: 2px;
 }
 
 .ruleview-rule-source,
 .ruleview-rule-source > label {
   cursor: pointer;
 }
 
+.ruleview-rule-source > label {
+  margin: 0;
+}
+
 .ruleview-rule-source[unselectable],
 .ruleview-rule-source[unselectable] > label {
   cursor: default;
 }
 
 .ruleview-rule-source:not([unselectable]):hover {
   text-decoration: underline;
 }
@@ -52,16 +56,17 @@
 .ruleview-rule-pseudo-element {
   padding-left:20px;
   border-left: solid 10px;
 }
 
 .ruleview-rule,
 #noResults {
   padding: 2px 4px;
+  margin-right: 6px;
 }
 
 /* User agent styles are not editable, display them differently */
 .ruleview-rule[uneditable=true] {
   background: var(--theme-tab-toolbar-background);
 }
 
 .ruleview-rule[uneditable=true] :focus {
