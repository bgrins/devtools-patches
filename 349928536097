
# HG changeset patch
# User Tim Nguyen <ntim.bugs@gmail.com>
# Date 1479140834 0
# Node ID 3499285360978cd46c6e900f5990f35614786597
# Parent  fc7d09bc398be86b4df20f1cd26d8f7250769840
Bug 1307871 - Add new console frontend support for 'Enable timestamps' pref. r=bgrins

MozReview-Commit-ID: FshE769sETL

diff --git a/devtools/client/themes/webconsole.css b/devtools/client/themes/webconsole.css
--- a/devtools/client/themes/webconsole.css
+++ b/devtools/client/themes/webconsole.css
@@ -174,7 +174,7 @@
   width: calc(100% - 7px);
 }
 
-#output-container.hideTimestamps > .message > .timestamp {
+.hideTimestamps > .message > .timestamp {
   display: none;
 }
 
diff --git a/devtools/client/webconsole/new-console-output/actions/messages.js b/devtools/client/webconsole/new-console-output/actions/messages.js
--- a/devtools/client/webconsole/new-console-output/actions/messages.js
+++ b/devtools/client/webconsole/new-console-output/actions/messages.js
@@ -17,7 +17,7 @@
   MESSAGE_OPEN,
   MESSAGE_CLOSE,
   MESSAGE_TYPE,
-  MESSAGE_TABLE_RECEIVE,
+  MESSAGE_TABLE_RECEIVE
 } = require("../constants");
 
 const defaultIdGenerator = new IdGenerator();
@@ -95,6 +95,5 @@
   messagesClear,
   messageOpen,
   messageClose,
-  messageTableDataGet,
+  messageTableDataGet
 };
-
diff --git a/devtools/client/webconsole/new-console-output/actions/ui.js b/devtools/client/webconsole/new-console-output/actions/ui.js
--- a/devtools/client/webconsole/new-console-output/actions/ui.js
+++ b/devtools/client/webconsole/new-console-output/actions/ui.js
@@ -12,6 +12,7 @@
 const {
   FILTER_BAR_TOGGLE,
   PREFS,
+  TIMESTAMPS_TOGGLE
 } = require("devtools/client/webconsole/new-console-output/constants");
 
 function filterBarToggle(show) {
@@ -24,4 +25,15 @@
   };
 }
 
-exports.filterBarToggle = filterBarToggle;
+
+function timestampsToggle(visible) {
+  return {
+    type: TIMESTAMPS_TOGGLE,
+    visible
+  };
+}
+
+module.exports = {
+  filterBarToggle,
+  timestampsToggle
+};
diff --git a/devtools/client/webconsole/new-console-output/components/console-output.js b/devtools/client/webconsole/new-console-output/components/console-output.js
--- a/devtools/client/webconsole/new-console-output/components/console-output.js
+++ b/devtools/client/webconsole/new-console-output/components/console-output.js
@@ -68,6 +68,7 @@
       messagesTableData,
       serviceContainer,
       groups,
+      timestampsVisible
     } = this.props;
 
     let messageNodes = messages.map((message) => {
@@ -89,9 +90,16 @@
         })
       );
     });
+
+    let classList = ["webconsole-output"];
+
+    if (!timestampsVisible) {
+      classList.push("hideTimestamps");
+    }
+
     return (
       dom.div({
-        className: "webconsole-output",
+        className: classList.join(" "),
         ref: node => {
           this.outputNode = node;
         },
@@ -119,6 +127,7 @@
     messagesTableData: getAllMessagesTableDataById(state),
     autoscroll: getScrollSetting(state),
     groups: getAllGroupsById(state),
+    timestampsVisible: state.ui.timestampsVisible
   };
 }
 
diff --git a/devtools/client/webconsole/new-console-output/components/message.js b/devtools/client/webconsole/new-console-output/components/message.js
--- a/devtools/client/webconsole/new-console-output/components/message.js
+++ b/devtools/client/webconsole/new-console-output/components/message.js
@@ -90,6 +90,7 @@
       serviceContainer,
       dispatch,
       exceptionDocURL,
+      timeStamp = Date.now()
     } = this.props;
 
     topLevelClasses.push("message", source, type, level);
@@ -97,6 +98,10 @@
       topLevelClasses.push("open");
     }
 
+    const timestampEl = dom.span({
+      className: "timestamp devtools-monospace"
+    }, l10n.timestampString(timeStamp));
+
     const icon = MessageIcon({level});
 
     // Figure out if there is an expandable part to the message.
@@ -154,7 +159,7 @@
         this.messageNode = node;
       }
     },
-      // @TODO add timestamp
+      timestampEl,
       MessageIndent({indent}),
       icon,
       collapse,
diff --git a/devtools/client/webconsole/new-console-output/constants.js b/devtools/client/webconsole/new-console-output/constants.js
--- a/devtools/client/webconsole/new-console-output/constants.js
+++ b/devtools/client/webconsole/new-console-output/constants.js
@@ -12,6 +12,7 @@
   MESSAGE_OPEN: "MESSAGE_OPEN",
   MESSAGE_CLOSE: "MESSAGE_CLOSE",
   MESSAGE_TABLE_RECEIVE: "MESSAGE_TABLE_RECEIVE",
+  TIMESTAMPS_TOGGLE: "TIMESTAMPS_TOGGLE",
   FILTER_TOGGLE: "FILTER_TOGGLE",
   FILTER_TEXT_SET: "FILTER_TEXT_SET",
   FILTERS_CLEAR: "FILTERS_CLEAR",
diff --git a/devtools/client/webconsole/new-console-output/new-console-output-wrapper.js b/devtools/client/webconsole/new-console-output/new-console-output-wrapper.js
--- a/devtools/client/webconsole/new-console-output/new-console-output-wrapper.js
+++ b/devtools/client/webconsole/new-console-output/new-console-output-wrapper.js
@@ -113,6 +113,11 @@
   dispatchMessagesClear: function () {
     store.dispatch(actions.messagesClear());
   },
+
+  dispatchTimestampsToggle: function (enabled) {
+    store.dispatch(actions.timestampsToggle(enabled));
+  },
+
   // Should be used for test purpose only.
   getStore: function () {
     return store;
diff --git a/devtools/client/webconsole/new-console-output/reducers/messages.js b/devtools/client/webconsole/new-console-output/reducers/messages.js
--- a/devtools/client/webconsole/new-console-output/reducers/messages.js
+++ b/devtools/client/webconsole/new-console-output/reducers/messages.js
@@ -21,7 +21,7 @@
   // where groupArray is the list of of all the parent groups' ids of the groupMessageId.
   groupsById: Immutable.Map(),
   // Message id of the current group (no corresponding console.groupEnd yet).
-  currentGroup: null,
+  currentGroup: null
 });
 
 function messages(state = new MessageState(), action) {
@@ -30,7 +30,7 @@
     messagesUiById,
     messagesTableDataById,
     groupsById,
-    currentGroup
+    currentGroup,
   } = state;
 
   switch (action.type) {
diff --git a/devtools/client/webconsole/new-console-output/reducers/ui.js b/devtools/client/webconsole/new-console-output/reducers/ui.js
--- a/devtools/client/webconsole/new-console-output/reducers/ui.js
+++ b/devtools/client/webconsole/new-console-output/reducers/ui.js
@@ -8,6 +8,7 @@
 const {
   FILTER_BAR_TOGGLE,
   MESSAGE_ADD,
+  TIMESTAMPS_TOGGLE
 } = require("devtools/client/webconsole/new-console-output/constants");
 const Immutable = require("devtools/client/shared/vendor/immutable");
 
@@ -15,6 +16,7 @@
   filterBarVisible: false,
   filteredMessageVisible: false,
   autoscroll: true,
+  timestampsVisible: true
 });
 
 function ui(state = new UiState(), action) {
@@ -28,6 +30,9 @@
   switch (action.type) {
     case FILTER_BAR_TOGGLE:
       return state.set("filterBarVisible", !state.filterBarVisible);
+    case TIMESTAMPS_TOGGLE:
+      return state.set("timestampsVisible", action.visible);
+
   }
 
   return state;
diff --git a/devtools/client/webconsole/new-console-output/test/components/console-api-call.test.js b/devtools/client/webconsole/new-console-output/test/components/console-api-call.test.js
--- a/devtools/client/webconsole/new-console-output/test/components/console-api-call.test.js
+++ b/devtools/client/webconsole/new-console-output/test/components/console-api-call.test.js
@@ -89,6 +89,13 @@
       wrapper = render(ConsoleApiCall({ message, serviceContainer}));
       expect(wrapper.find(".indent").prop("style").width).toBe(`0`);
     });
+
+    it("renders a timestamp", () => {
+      const message = stubPreparedMessages.get("console.log('foobar', 'test')");
+      const wrapper = render(ConsoleApiCall({ message, serviceContainer }));
+
+      expect(wrapper.find(".timestamp").text().length).toBe(12);
+    });
   });
 
   describe("console.count", () => {
diff --git a/devtools/client/webconsole/new-console-output/test/components/evaluation-result.test.js b/devtools/client/webconsole/new-console-output/test/components/evaluation-result.test.js
--- a/devtools/client/webconsole/new-console-output/test/components/evaluation-result.test.js
+++ b/devtools/client/webconsole/new-console-output/test/components/evaluation-result.test.js
@@ -81,4 +81,11 @@
     expect(locationLink.length).toBe(1);
     expect(locationLink.text()).toBe("debugger eval code:1:4");
   });
+
+  it("has a timestamp", () => {
+    const message = stubPreparedMessages.get("new Date(0)");
+    const wrapper = render(EvaluationResult({ message }));
+
+    expect(wrapper.find(".timestamp").text().length).toBe(12);
+  });
 });
diff --git a/devtools/client/webconsole/new-console-output/test/components/network-event-message.test.js b/devtools/client/webconsole/new-console-output/test/components/network-event-message.test.js
--- a/devtools/client/webconsole/new-console-output/test/components/network-event-message.test.js
+++ b/devtools/client/webconsole/new-console-output/test/components/network-event-message.test.js
@@ -25,6 +25,8 @@
       const message = stubPreparedMessages.get("GET request");
       const wrapper = render(NetworkEventMessage({ message, serviceContainer }));
 
+      expect(wrapper.find(".timestamp").text().length).toBe(12);
+
       expect(wrapper.find(".message-body .method").text()).toBe("GET");
       expect(wrapper.find(".message-body .xhr").length).toBe(0);
       expect(wrapper.find(".message-body .url").length).toBe(1);
diff --git a/devtools/client/webconsole/new-console-output/test/components/page-error.test.js b/devtools/client/webconsole/new-console-output/test/components/page-error.test.js
--- a/devtools/client/webconsole/new-console-output/test/components/page-error.test.js
+++ b/devtools/client/webconsole/new-console-output/test/components/page-error.test.js
@@ -29,6 +29,8 @@
     const message = stubPreparedMessages.get("ReferenceError: asdf is not defined");
     const wrapper = render(PageError({ message, serviceContainer }));
 
+    expect(wrapper.find(".timestamp").text().length).toBe(12);
+
     expect(wrapper.find(".message-body").text())
       .toBe("ReferenceError: asdf is not defined[Learn More]");
 
@@ -39,7 +41,7 @@
     // There should be the location.
     const locationLink = wrapper.find(`.message-location`);
     expect(locationLink.length).toBe(1);
-    // @TODO Will likely change. See https://github.com/devtools-html/gecko-dev/issues/285
+    // @TODO Will likely change. See bug 1307952
     expect(locationLink.text()).toBe("test-tempfile.js:3:5");
   });
 
diff --git a/devtools/client/webconsole/new-console-output/test/fixtures/L10n.js b/devtools/client/webconsole/new-console-output/test/fixtures/L10n.js
--- a/devtools/client/webconsole/new-console-output/test/fixtures/L10n.js
+++ b/devtools/client/webconsole/new-console-output/test/fixtures/L10n.js
@@ -22,6 +22,29 @@
   getFormatStr(str) {
     return this.getStr(str);
   }
+
+  timestampString(milliseconds) {
+    let d = new Date(milliseconds ? milliseconds : null);
+    let hours = d.getHours(), minutes = d.getMinutes();
+    let seconds = d.getSeconds();
+    milliseconds = d.getMilliseconds();
+
+    // String.prototype.padStart isn't supported in node
+    function padZeros(str, len) {
+      str = "" + str;
+      while (str.len < len) {
+        str = "0" + str;
+      }
+      return str;
+    }
+
+    hours = padZeros(hours, 2);
+    minutes = padZeros(minutes, 2);
+    seconds = padZeros(seconds, 2);
+    milliseconds = padZeros(milliseconds, 3);
+
+    return `${hours}:${minutes}:${seconds}.${milliseconds}`;
+  }
 }
 
 module.exports = L10n;
diff --git a/devtools/client/webconsole/new-console-output/test/mochitest/browser.ini b/devtools/client/webconsole/new-console-output/test/mochitest/browser.ini
--- a/devtools/client/webconsole/new-console-output/test/mochitest/browser.ini
+++ b/devtools/client/webconsole/new-console-output/test/mochitest/browser.ini
@@ -18,4 +18,5 @@
 [browser_webconsole_input_focus.js]
 [browser_webconsole_keyboard_accessibility.js]
 [browser_webconsole_observer_notifications.js]
+[browser_webconsole_timestamps.js]
 [browser_webconsole_vview_close_on_esc_key.js]
diff --git a/devtools/client/webconsole/test/browser_webconsole_expandable_timestamps.js b/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_timestamps.js
copy from devtools/client/webconsole/test/browser_webconsole_expandable_timestamps.js
copy to devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_timestamps.js
--- a/devtools/client/webconsole/test/browser_webconsole_expandable_timestamps.js
+++ b/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_timestamps.js
@@ -9,49 +9,48 @@
 "use strict";
 
 const TEST_URI = "data:text/html;charset=utf-8,Web Console test for " +
-                 "bug 722267 - preference for toggling timestamps in messages";
+                 "bug 1307871 - preference for toggling timestamps in messages";
 const PREF_MESSAGE_TIMESTAMP = "devtools.webconsole.timestampMessages";
-var hud;
 
 add_task(function* () {
-  yield loadTab(TEST_URI);
+  let hud = yield openNewTabAndConsole(TEST_URI);
+  let outputNode = hud.ui.experimentalOutputNode;
+  let outputEl = outputNode.querySelector(".webconsole-output");
 
-  hud = yield openConsole();
-  let panel = yield consoleOpened();
+  testPrefDefaults(outputEl);
 
-  yield onOptionsPanelSelected(panel);
-  onPrefChanged();
+  let toolbox = gDevTools.getToolbox(hud.target);
+  let optionsPanel = yield toolbox.selectTool("options");
+  yield togglePref(optionsPanel);
+
+  yield testChangedPref(outputEl);
 
   Services.prefs.clearUserPref(PREF_MESSAGE_TIMESTAMP);
-  hud = null;
 });
 
-function consoleOpened() {
-  info("console opened");
+function testPrefDefaults(outputEl) {
   let prefValue = Services.prefs.getBoolPref(PREF_MESSAGE_TIMESTAMP);
-  ok(!prefValue, "messages have no timestamp by default (pref check)");
-  ok(hud.outputNode.classList.contains("hideTimestamps"),
-     "messages have no timestamp (class name check)");
-
-  let toolbox = gDevTools.getToolbox(hud.target);
-  return toolbox.selectTool("options");
+  ok(!prefValue, "Messages should have no timestamp by default (pref check)");
+  ok(outputEl.classList.contains("hideTimestamps"),
+     "Messages should have no timestamp (class name check)");
 }
 
-function onOptionsPanelSelected(panel) {
-  info("options panel opened");
+function* togglePref(panel) {
+  info("Options panel opened");
 
-  let prefChanged = gDevTools.once("pref-changed", onPrefChanged);
-
+  info("Changing pref");
+  let prefChanged = new Promise(resolve => {
+    gDevTools.once("pref-changed", resolve);
+  });
   let checkbox = panel.panelDoc.getElementById("webconsole-timestamp-messages");
   checkbox.click();
 
-  return prefChanged;
+  yield prefChanged;
 }
 
-function onPrefChanged() {
-  info("pref changed");
+function* testChangedPref(outputEl) {
   let prefValue = Services.prefs.getBoolPref(PREF_MESSAGE_TIMESTAMP);
-  ok(prefValue, "messages have timestamps (pref check)");
-  ok(!hud.outputNode.classList.contains("hideTimestamps"),
-     "messages have timestamps (class name check)");
+  ok(prefValue, "Messages should have timestamps (pref check)");
+  ok(!outputEl.classList.contains("hideTimestamps"),
+     "Messages should have timestamps (class name check)");
 }
diff --git a/devtools/client/webconsole/new-console-output/utils/messages.js b/devtools/client/webconsole/new-console-output/utils/messages.js
--- a/devtools/client/webconsole/new-console-output/utils/messages.js
+++ b/devtools/client/webconsole/new-console-output/utils/messages.js
@@ -128,6 +128,7 @@
         messageText,
         stacktrace: message.stacktrace ? message.stacktrace : null,
         frame,
+        timeStamp: message.timeStamp,
         userProvidedStyles: message.styles,
       });
     }
@@ -139,6 +140,7 @@
         type: MESSAGE_TYPE.LOG,
         level: MESSAGE_LEVEL.LOG,
         messageText: "Navigated to " + message.url,
+        timeStamp: message.timeStamp
       });
     }
 
@@ -168,6 +170,7 @@
         stacktrace: pageError.stacktrace ? pageError.stacktrace : null,
         frame,
         exceptionDocURL: pageError.exceptionDocURL,
+        timeStamp: pageError.timeStamp
       });
     }
 
@@ -179,6 +182,7 @@
         isXHR: networkEvent.isXHR,
         request: networkEvent.request,
         response: networkEvent.response,
+        timeStamp: networkEvent.timeStamp
       });
     }
 
@@ -188,7 +192,8 @@
         exceptionMessage: messageText,
         exceptionDocURL,
         frame,
-        result: parameters
+        result: parameters,
+        timeStamp
       } = packet;
 
       const level = messageText ? MESSAGE_LEVEL.ERROR : MESSAGE_LEVEL.LOG;
@@ -200,6 +205,7 @@
         parameters,
         exceptionDocURL,
         frame,
+        timeStamp
       });
     }
   }
diff --git a/devtools/client/webconsole/webconsole.js b/devtools/client/webconsole/webconsole.js
--- a/devtools/client/webconsole/webconsole.js
+++ b/devtools/client/webconsole/webconsole.js
@@ -2709,7 +2709,9 @@
   */
   _onToolboxPrefChanged: function (event, data) {
     if (data.pref == PREF_MESSAGE_TIMESTAMP) {
-      if (data.newValue) {
+      if (this.NEW_CONSOLE_OUTPUT_ENABLED) {
+        this.newConsoleOutput.dispatchTimestampsToggle(data.newValue);
+      } else if (data.newValue) {
         this.outputNode.classList.remove("hideTimestamps");
       } else {
         this.outputNode.classList.add("hideTimestamps");

