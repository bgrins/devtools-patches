diff --git a/browser/components/preferences/in-content/tests/browser_extension_controlled.js b/browser/components/preferences/in-content/tests/browser_extension_controlled.js
--- a/browser/components/preferences/in-content/tests/browser_extension_controlled.js
+++ b/browser/components/preferences/in-content/tests/browser_extension_controlled.js
@@ -756,7 +756,7 @@
         let manualControlContainer = controlGroup.querySelector("grid");
         return {
           manualControls: [
-            ...manualControlContainer.querySelectorAll("label:not([control=networkProxyNone])"),
+            ...manualControlContainer.querySelectorAll("label[data-l10n-id]:not([control=networkProxyNone])"),
             ...manualControlContainer.querySelectorAll("textbox:not(#networkProxyNone)"),
             ...manualControlContainer.querySelectorAll("checkbox"),
             ...doc.querySelectorAll("#networkProxySOCKSVersion > radio")],
diff --git a/toolkit/components/prompts/test/chromeScript.js b/toolkit/components/prompts/test/chromeScript.js
--- a/toolkit/components/prompts/test/chromeScript.js
+++ b/toolkit/components/prompts/test/chromeScript.js
@@ -165,7 +165,7 @@
 function dismissPrompt(ui, action) {
   if (action.setCheckbox) {
     // Annoyingly, the prompt code is driven by oncommand.
-    ui.checkbox.setChecked(true);
+    ui.checkbox.checked = true;
     ui.checkbox.doCommand();
   }
 
diff --git a/toolkit/content/customElements.js b/toolkit/content/customElements.js
--- a/toolkit/content/customElements.js
+++ b/toolkit/content/customElements.js
@@ -500,6 +500,7 @@
 if (!isDummyDocument) {
   for (let script of [
     "chrome://global/content/elements/general.js",
+    "chrome://global/content/elements/checkbox.js",
     "chrome://global/content/elements/menu.js",
     "chrome://global/content/elements/notificationbox.js",
     "chrome://global/content/elements/popupnotification.js",
diff --git a/toolkit/content/jar.mn b/toolkit/content/jar.mn
--- a/toolkit/content/jar.mn
+++ b/toolkit/content/jar.mn
@@ -64,7 +64,6 @@
    content/global/bindings/autocomplete.xml    (widgets/autocomplete.xml)
    content/global/bindings/button.xml          (widgets/button.xml)
    content/global/bindings/calendar.js         (widgets/calendar.js)
-   content/global/bindings/checkbox.xml        (widgets/checkbox.xml)
    content/global/bindings/datekeeper.js       (widgets/datekeeper.js)
    content/global/bindings/datepicker.js       (widgets/datepicker.js)
    content/global/bindings/datetimebox.css     (widgets/datetimebox.css)
@@ -86,6 +85,7 @@
 *  content/global/bindings/wizard.xml          (widgets/wizard.xml)
    content/global/elements/autocomplete-richlistitem.js       (widgets/autocomplete-richlistitem.js)
    content/global/elements/browser-custom-element.js          (widgets/browser-custom-element.js)
+   content/global/elements/checkbox.js         (widgets/checkbox.js)
    content/global/elements/datetimebox.js      (widgets/datetimebox.js)
    content/global/elements/findbar.js          (widgets/findbar.js)
    content/global/elements/editor.js           (widgets/editor.js)
diff --git a/toolkit/content/widgets/checkbox.xml b/toolkit/content/widgets/checkbox.js
rename from toolkit/content/widgets/checkbox.xml
rename to toolkit/content/widgets/checkbox.js
--- a/toolkit/content/widgets/checkbox.xml
+++ b/toolkit/content/widgets/checkbox.js
@@ -1,62 +1,80 @@
-<?xml version="1.0"?>
-<!-- This Source Code Form is subject to the terms of the Mozilla Public
-   - License, v. 2.0. If a copy of the MPL was not distributed with this
-   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
+/* This Source Code Form is subject to the terms of the Mozilla Public
+  * License, v. 2.0. If a copy of the MPL was not distributed with this
+  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
 
+// This is loaded into all XUL windows. Wrap in a block to prevent
+// leaking to window scope.
+{
+class MozCheckbox extends MozElements.BaseText {
+  constructor() {
+    super();
 
-<bindings id="checkboxBindings"
-   xmlns="http://www.mozilla.org/xbl"
-   xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
-   xmlns:xbl="http://www.mozilla.org/xbl">
+    // While it would seem we could do this by handling oncommand, we need can't
+    // because any external oncommand handlers might get called before ours, and
+    // then they would see the incorrect value of checked.
+    this.addEventListener("click", (event) => {
+      if (!this.disabled) {
+        this.checked = !this.checked;
+      }
+    });
+    this.addEventListener("keypress", (event) => {
+      if (event.key == " ") {
+        this.checked = !this.checked;
+        // Prevent page from scrolling on the space key.
+        event.preventDefault();
+      }
+    });
+  }
 
-  <binding id="checkbox"
-    extends="chrome://global/content/bindings/general.xml#basetext">
-    <content>
-      <xul:image class="checkbox-check" xbl:inherits="checked,disabled"/>
-      <xul:hbox class="checkbox-label-box" flex="1">
-        <xul:image class="checkbox-icon" xbl:inherits="src"/>
-        <xul:label class="checkbox-label" xbl:inherits="xbl:text=label,accesskey,crop" flex="1"/>
-      </xul:hbox>
-    </content>
+  static get inheritedAttributes() {
+    return {
+      ".checkbox-label": "accesskey,text=label",
+      ".checkbox-icon": "src",
+    };
+  }
 
-    <implementation>
-      <method name="setChecked">
-        <parameter name="aValue"/>
-        <body>
-        <![CDATA[
-          var change = (aValue != (this.getAttribute("checked") == "true"));
-          if (aValue)
-            this.setAttribute("checked", "true");
-          else
-            this.removeAttribute("checked");
-          if (change) {
-            var event = document.createEvent("Events");
-            event.initEvent("CheckboxStateChange", true, true);
-            this.dispatchEvent(event);
-          }
-          return aValue;
-        ]]>
-        </body>
-      </method>
+  connectedCallback() {
+    if (this.delayConnectedCallback()) {
+      return;
+    }
+
+    let content = `
+      <image class="checkbox-check"/>
+      <hbox class="checkbox-label-box" flex="1">
+        <image class="checkbox-icon"/>
+        <label class="checkbox-label" flex="1"/>
+      </hbox>
+    `;
+    let contentFragment = MozXULElement.parseXULToFragment(content);
+
+    this.textContent = "";
+    this.appendChild(contentFragment);
+
+    this.initializeAttributeInheritance();
+  }
 
-      <!-- public implementation -->
-      <property name="checked"    onset="return this.setChecked(val);"
-                                  onget="return this.getAttribute('checked') == 'true';"/>
-    </implementation>
+  set checked(val) {
+    let change = (val != (this.getAttribute("checked") == "true"));
+    if (val) {
+      this.setAttribute("checked", "true");
+    } else {
+      this.removeAttribute("checked");
+    }
 
-    <handlers>
-      <!-- While it would seem we could do this by handling oncommand, we need can't
-           because any external oncommand handlers might get called before ours, and
-           then they would see the incorrect value of checked. -->
-      <handler event="click" button="0" action="if (!this.disabled) this.checked = !this.checked;"/>
-      <handler event="keypress" key=" ">
-        <![CDATA[
-          this.checked = !this.checked;
-          // Prevent page from scrolling on the space key.
-          event.preventDefault();
-        ]]>
-      </handler>
-    </handlers>
-  </binding>
+    if (change) {
+      let event = document.createEvent("Events");
+      event.initEvent("CheckboxStateChange", true, true);
+      this.dispatchEvent(event);
+    }
+    return val;
+  }
 
-</bindings>
+  get checked() {
+    return this.getAttribute("checked") == "true";
+  }
+}
+
+customElements.define("checkbox", MozCheckbox);
+}
diff --git a/toolkit/content/xul.css b/toolkit/content/xul.css
--- a/toolkit/content/xul.css
+++ b/toolkit/content/xul.css
@@ -181,12 +181,6 @@
   display: none;
 }
 
-/********** checkbox **********/
-
-checkbox {
-  -moz-binding: url("chrome://global/content/bindings/checkbox.xml#checkbox");
-}
-
 /********** radio **********/
 
 radiogroup {
diff --git a/toolkit/themes/linux/global/in-content/common.css b/toolkit/themes/linux/global/in-content/common.css
--- a/toolkit/themes/linux/global/in-content/common.css
+++ b/toolkit/themes/linux/global/in-content/common.css
@@ -33,7 +33,7 @@
   margin-bottom: 6px;
 }
 
-xul|*.checkbox-check[checked],
+xul|checkbox[checked] > xul|*.checkbox-check,
 xul|*.radio-check[selected] {
   background-color: -moz-field;
   fill: -moz-fieldText;
diff --git a/toolkit/themes/shared/in-content/common.inc.css b/toolkit/themes/shared/in-content/common.inc.css
--- a/toolkit/themes/shared/in-content/common.inc.css
+++ b/toolkit/themes/shared/in-content/common.inc.css
@@ -495,7 +495,7 @@
   border-color: var(--in-content-border-focus);
 }
 
-xul|*.checkbox-check[checked] {
+xul|checkbox[checked] > xul|*.checkbox-check {
   list-style-image: url("chrome://global/skin/icons/check.svg");
   -moz-context-properties: fill;
   fill: #2292d0;
diff --git a/toolkit/themes/windows/global/in-content/common.css b/toolkit/themes/windows/global/in-content/common.css
--- a/toolkit/themes/windows/global/in-content/common.css
+++ b/toolkit/themes/windows/global/in-content/common.css
@@ -15,7 +15,7 @@
 }
 
 @media (-moz-windows-default-theme: 0) {
-  xul|*.checkbox-check[checked],
+  xul|checkbox[checked] > xul|*.checkbox-check,
   xul|*.radio-check[selected] {
     fill: -moz-fieldText;
     background-color: -moz-field;

