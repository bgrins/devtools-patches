# HG changeset patch
# Parent da12037e4bab40c88cf0691cf45efa19dcfd8cef
# User Michael Ratcliffe <mratcliffe@mozilla.com>
# Date 1405873562 -3600

Bug 1040697 - Prevent rule view marking all new properties as overridden r=bgrins

diff --git a/browser/devtools/styleinspector/rule-view.js b/browser/devtools/styleinspector/rule-view.js
--- a/browser/devtools/styleinspector/rule-view.js
+++ b/browser/devtools/styleinspector/rule-view.js
@@ -984,19 +984,22 @@ TextProperty.prototype = {
     // This is a bit funky.  To get the list of computed properties
     // for this text property, we'll set the property on a dummy element
     // and see what the computed style looks like.
     let dummyElement = this.rule.elementStyle.dummyElement;
     let dummyStyle = dummyElement.style;
     dummyStyle.cssText = "";
     dummyStyle.setProperty(this.name, this.value, this.priority);
 
+    // Manually get the subProperties so that new properties (value == "")
+    // are still added to this.computed.
+    let subProps = domUtils.getSubpropertiesForCSSProperty(this.name);
+
     this.computed = [];
-    for (let i = 0, n = dummyStyle.length; i < n; i++) {
-      let prop = dummyStyle.item(i);
+    for (let prop of subProps) {
       this.computed.push({
         textProp: this,
         name: prop,
         value: dummyStyle.getPropertyValue(prop),
         priority: dummyStyle.getPropertyPriority(prop),
       });
     }
   },
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_add-property_01.js b/browser/devtools/styleinspector/test/browser_ruleview_add-property_01.js
--- a/browser/devtools/styleinspector/test/browser_ruleview_add-property_01.js
+++ b/browser/devtools/styleinspector/test/browser_ruleview_add-property_01.js
@@ -69,10 +69,11 @@ function* testCreateNew(view) {
   editor.input.value = "#XYZ";
   let onBlur = once(editor.input, "blur");
   let onModifications = elementRuleEditor.rule._applyingModifications;
   editor.input.blur();
   yield onBlur;
   yield onModifications;
 
   is(textProp.value, "#XYZ", "Text prop should have been changed.");
+  is(textProp.overridden, false, "Property should not be overridden");
   is(textProp.editor.isValid(), false, "#XYZ should not be a valid entry");
 }
