
# HG changeset patch
# User nchevobbe <nchevobbe@mozilla.com>
# Date 1491903323 -7200
# Node ID c12c64479a3ebdc2f047ad50ef770ce3ddbade34
# Parent  2836fa920b954a112888cc58445546b1a1b57b78
Bug 1088900 - Add backend tests for console.group custom styling. r=

MozReview-Commit-ID: IINPZWea2En

diff --git a/devtools/server/tests/mochitest/chrome.ini b/devtools/server/tests/mochitest/chrome.ini
--- a/devtools/server/tests/mochitest/chrome.ini
+++ b/devtools/server/tests/mochitest/chrome.ini
@@ -93,11 +93,12 @@
 [test_setupInParentChild.html]
 [test_styles-applied.html]
 [test_styles-computed.html]
 [test_styles-layout.html]
 [test_styles-matched.html]
 [test_styles-modify.html]
 [test_styles-svg.html]
 [test_unsafeDereference.html]
+[test_webconsole-group-custom-styles.html]
 [test_webconsole-node-grip.html]
 [test_websocket-server.html]
 skip-if = false
diff --git a/devtools/server/tests/mochitest/test_webconsole-group-custom-styles.html b/devtools/server/tests/mochitest/test_webconsole-group-custom-styles.html
new file mode 100644
--- /dev/null
+++ b/devtools/server/tests/mochitest/test_webconsole-group-custom-styles.html
@@ -0,0 +1,124 @@
+<!DOCTYPE HTML>
+<html>
+<head>
+  <meta charset="utf-8">
+  <title>console.group custom styles test</title>
+  <script type="application/javascript" src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
+  <link rel="stylesheet" type="text/css" href="chrome://mochikit/content/tests/SimpleTest/test.css">
+  <script type="application/javascript" src="webconsole-helpers.js"></script>
+  <script>
+"use strict";
+
+const TEST_URL = "data:text/html,<html><body>Hello</body></html>";
+
+window.onload = async function () {
+  SimpleTest.waitForExplicitFinish();
+
+  try {
+    let {
+      consoleClient,
+      debuggerClient,
+    } = await attachURL(TEST_URL);
+
+    await testSingleCustomStyleGroup(debuggerClient, consoleClient);
+    await testSingleCustomStyleGroupCollapsed(debuggerClient, consoleClient);
+    await testMultipleCustomStyleGroup(debuggerClient, consoleClient);
+    await testMultipleCustomStyleGroupCollapsed(debuggerClient, consoleClient);
+  } catch (e) {
+    ok(false, `Error thrown: ${e.message}`);
+  }
+  SimpleTest.finish();
+};
+
+async function testSingleCustomStyleGroup(debuggerClient, consoleClient) {
+  info("Testing console.group with a custom style");
+  let {packet} = await consoleAPICall(
+    debuggerClient,
+    consoleClient,
+    "console.group('%cfoobar', 'color:red')"
+  );
+
+  is(packet.message.arguments.length, 1,
+    "There is one element in the \"arguments\" property");
+  is(packet.message.arguments[0], "foobar",
+    "The element has the expected \"foobar\" content");
+  is(packet.message.styles.length, 1,
+    "There is one element in the \"styles\" property");
+  is(packet.message.styles[0], "color:red",
+    "The element has the expected content");
+}
+
+async function testSingleCustomStyleGroupCollapsed(debuggerClient, consoleClient) {
+  info("Testing console.groupCollapsed with a custom style");
+  let {packet} = await consoleAPICall(
+    debuggerClient,
+    consoleClient,
+    "console.groupCollapsed('%cfoobaz', 'color:blue')"
+  );
+
+  is(packet.message.arguments.length, 1,
+    "There is one element in the \"arguments\" property");
+  is(packet.message.arguments[0], "foobaz",
+    "The element has the expected \"foobaz\" content");
+  is(packet.message.styles.length, 1,
+    "There is one element in the \"styles\" property");
+  is(packet.message.styles[0], "color:blue",
+    "The element has the expected content");
+}
+
+async function testMultipleCustomStyleGroup(debuggerClient, consoleClient) {
+  info("Testing console.group with multiple custom styles");
+  let {packet} = await consoleAPICall(
+    debuggerClient,
+    consoleClient,
+    "console.group('%cfoo%cbar', 'color:red', 'color:blue')"
+  );
+
+  is(packet.message.arguments.length, 2,
+    "There is two element in the \"arguments\" property");
+  is(packet.message.arguments[0], "foo",
+    "The first element has the expected \"foo\" content");
+  is(packet.message.arguments[1], "bar",
+    "The second element has the expected \"bar\" content");
+
+  is(packet.message.styles.length, 2,
+    "There is two element in the \"styles\" property");
+  is(packet.message.styles[0], "color:red",
+    "The first element has the expected content");
+  is(packet.message.styles[1], "color:blue",
+    "The second element has the expected content");
+}
+
+async function testMultipleCustomStyleGroupCollapsed(debuggerClient, consoleClient) {
+  info("Testing console.groupCollapsed with multiple custom styles");
+  let {packet} = await consoleAPICall(
+    debuggerClient,
+    consoleClient,
+    "console.group('%cfoo%cbaz', 'color:red', 'color:green')"
+  );
+
+  is(packet.message.arguments.length, 2,
+    "There is two element in the \"arguments\" property");
+  is(packet.message.arguments[0], "foo",
+    "The first element has the expected \"foo\" content");
+  is(packet.message.arguments[1], "baz",
+    "The second element has the expected \"baz\" content");
+
+  is(packet.message.styles.length, 2,
+    "There is two element in the \"styles\" property");
+  is(packet.message.styles[0], "color:red",
+    "The first element has the expected content");
+  is(packet.message.styles[1], "color:green",
+    "The second element has the expected content");
+}
+
+  </script>
+</head>
+<body>
+  <p id="display"></p>
+  <div id="content" style="display: none">
+  </div>
+  <pre id="test">
+  </pre>
+</body>
+</html>
\ No newline at end of file
diff --git a/devtools/server/tests/mochitest/webconsole-helpers.js b/devtools/server/tests/mochitest/webconsole-helpers.js
--- a/devtools/server/tests/mochitest/webconsole-helpers.js
+++ b/devtools/server/tests/mochitest/webconsole-helpers.js
@@ -1,9 +1,9 @@
-/* exported attachURL, evaluateJS */
+/* exported attachURL, evaluateJS, consoleAPICall */
 "use strict";
 
 var Cu = Components.utils;
 
 const {require} = Cu.import("resource://devtools/shared/Loader.jsm", {});
 const {DebuggerClient} = require("devtools/shared/client/main");
 const {DebuggerServer} = require("devtools/server/main");
 
@@ -33,41 +33,55 @@
  *           - tab: the attached tab
  *           - tabClient: the tab client
  *           - consoleClient: the console client
  *           - cleanup: a generator function which can be called to close
  *             the opened tab and disconnect its debugger client.
  */
 async function attachURL(url) {
   let win = window.open(url, "_blank");
-  let client = null;
+  let debuggerClient = null;
 
   let cleanup = function* () {
-    if (client) {
-      yield client.close();
-      client = null;
+    if (debuggerClient) {
+      yield debuggerClient.close();
+      debuggerClient = null;
     }
     if (win) {
       win.close();
       win = null;
     }
   };
   SimpleTest.registerCleanupFunction(cleanup);
 
-  client = new DebuggerClient(DebuggerServer.connectPipe());
-  await client.connect();
-  let {tabs} = await client.listTabs();
+  debuggerClient = new DebuggerClient(DebuggerServer.connectPipe());
+  await debuggerClient.connect();
+  let {tabs} = await debuggerClient.listTabs();
   let attachedTab = tabs.find(tab => tab.url === url);
 
   if (!attachedTab) {
     throw new Error(`Could not find a tab matching URL ${url}`);
   }
 
-  const [, tabClient] = await client.attachTab(attachedTab.actor);
-  const [, consoleClient] = await client.attachConsole(attachedTab.consoleActor, []);
+  const [, tabClient] = await debuggerClient.attachTab(attachedTab.actor);
+  const listeners = ["PageError", "ConsoleAPI", "NetworkActivity", "FileActivity"];
+  const [, consoleClient] = await debuggerClient.attachConsole(
+    attachedTab.consoleActor, listeners);
 
   return {
+    cleanup,
+    consoleClient,
+    debuggerClient,
     tab: attachedTab,
     tabClient,
-    consoleClient,
-    cleanup,
   };
 }
+
+function consoleAPICall(debuggerClient, consoleClient, text) {
+  const onConsoleAPICall = new Promise((resolve, reject) => {
+    debuggerClient.addListener(
+      "consoleAPICall",
+      (type, packet) => resolve({type, packet})
+    );
+  });
+  consoleClient.evaluateJS(text);
+  return onConsoleAPICall;
+}

