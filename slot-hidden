# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  6359cb7c329fb5118b525aa548aacc9cd7901052

diff --git a/toolkit/content/widgets/panel.js b/toolkit/content/widgets/panel.js
--- a/toolkit/content/widgets/panel.js
+++ b/toolkit/content/widgets/panel.js
@@ -3,75 +3,65 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 // This is loaded into all XUL windows. Wrap in a block to prevent
 // leaking to window scope.
 {
   class MozPanel extends MozElements.MozElementMixin(XULPopupElement) {
-    static get observedAttributes() {
-      return ["hidden"];
-    }
-
-    attributeChangedCallback(name, oldValue, newValue) {
-      if (name == "hidden" && !newValue) {
-        this.initialize();
-      }
-    }
-
     constructor() {
       super();
 
-      this.attachShadow({ mode: "open" });
-
       this._prevFocus = 0;
       this._fadeTimer = null;
 
       this.addEventListener("popupshowing", this);
       this.addEventListener("popupshown", this);
       this.addEventListener("popuphiding", this);
       this.addEventListener("popuphidden", this);
       this.addEventListener("popuppositioned", this);
     }
 
     connectedCallback() {
-      if (!this.hidden) {
-        this.initialize();
+      if (!this.isArrowPanel) {
+        return;
+      }
+      if (!this.hasAttribute("flip")) {
+        this.setAttribute("flip", "both");
+      }
+      if (!this.hasAttribute("side")) {
+        this.setAttribute("side", "top");
+      }
+      if (!this.hasAttribute("position")) {
+        this.setAttribute("position", "bottomcenter topleft");
+      }
+      if (!this.hasAttribute("consumeoutsideclicks")) {
+        this.setAttribute("consumeoutsideclicks", "false");
+      }
+      this.initialize();
+    }
+
+    initialize() {
+      if (this.shadowRoot) {
+        return;
       }
 
       if (this.isArrowPanel) {
-        if (!this.hasAttribute("flip")) {
-          this.setAttribute("flip", "both");
-        }
-        if (!this.hasAttribute("side")) {
-          this.setAttribute("side", "top");
-        }
-        if (!this.hasAttribute("position")) {
-          this.setAttribute("position", "bottomcenter topleft");
-        }
-        if (!this.hasAttribute("consumeoutsideclicks")) {
-          this.setAttribute("consumeoutsideclicks", "false");
-        }
+        this.attachShadow({ mode: "open" });
+        this.shadowRoot.appendChild(this.fragment);
+        this.shadowRoot.querySelector("slot").style.display = "";
       }
     }
 
-    initialize() {
-      if (this.shadowRoot.firstChild) {
-        return;
+    removeAttribute(name) {
+      if (name == "hidden") {
+        this.initialize();
       }
-
-      if (!this.isArrowPanel) {
-        this.shadowRoot.appendChild(document.createElement("slot"));
-      } else {
-        this.shadowRoot.appendChild(this.fragment);
-      }
-      // Force layout to avoid "Assertion failure: sIndirectLayerTrees[child].mParent->mOptions == mOptions".
-      // Remove this in Bug XXX.
-      // this.scrollHeight;
+      super.removeAttribute("name");
     }
 
     get hidden() {
       return super.hidden;
     }
 
     set hidden(v) {
       if (!v) {
@@ -91,17 +81,19 @@
           :host([orient=vertical]) .panel-arrowcontent {
             -moz-box-orient: vertical;
           }
         </html:style>
         <vbox class="panel-arrowcontainer" flex="1">
           <box class="panel-arrowbox" part="arrowbox">
             <image class="panel-arrow" part="arrow"/>
           </box>
-          <box class="panel-arrowcontent" flex="1" part="arrowcontent"><html:slot/></box>
+          <box class="panel-arrowcontent" flex="1" part="arrowcontent">
+            <html:slot style="display: none;"/>
+          </box>
         </vbox>
       `);
       }
       return document.importNode(this.constructor._fragment, true);
     }
 
     get isArrowPanel() {
       return this.getAttribute("type") == "arrow";
