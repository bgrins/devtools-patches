# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  88113c4825089e383b05228a7ac74bc5bc045f6e

diff --git a/browser/components/preferences/in-content/subdialogs.js b/browser/components/preferences/in-content/subdialogs.js
--- a/browser/components/preferences/in-content/subdialogs.js
+++ b/browser/components/preferences/in-content/subdialogs.js
@@ -200,16 +200,18 @@ SubDialog.prototype = {
         this._onParentWinFocus(aEvent);
         break;
     }
   },
 
   /* Private methods */
 
   _onUnload(aEvent) {
+    console.log("SUBDIALOG UNLOAD CALLED", window.location.toString(), aEvent.target.location.toString());
+
     if (aEvent.target.location.href == this._openedURL) {
       this._frame.contentWindow.close();
     }
   },
 
   _onContentLoaded(aEvent) {
     if (aEvent.target != this._frame || aEvent.target.contentWindow.location == "about:blank") {
       return;
diff --git a/toolkit/content/widgets/browser-custom-element.js b/toolkit/content/widgets/browser-custom-element.js
--- a/toolkit/content/widgets/browser-custom-element.js
+++ b/toolkit/content/widgets/browser-custom-element.js
@@ -7,20 +7,21 @@
 // This is loaded into all XUL windows. Wrap in a block to prevent
 // leaking to window scope.
 {
 
 const elementsToDestroyOnUnload = new Set();
 
 window.addEventListener("unload", () => {
   for (let element of elementsToDestroyOnUnload.values()) {
+    console.log("CE UNLOAD CALLED", window.location.toString(), element.contentWindow.location.toString());
     element.destroy();
   }
   elementsToDestroyOnUnload.clear();
-}, { mozSystemGroup: true, once: true });
+}, { once: true });
 
 class MozBrowser extends MozElementMixin(XULFrameElement) {
   static get observedAttributes() {
     return ["remote"];
   }
 
   attributeChangedCallback(name, oldValue, newValue) {
     // When we have already been set up via connectedCallback and the
