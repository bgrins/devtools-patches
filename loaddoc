# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  2e7a59a5949ef5ff4db8551a56763f9608e8aa70

diff --git a/devtools/client/webconsole/new-console-output/test/mochitest/browser_netmonitor_shows_reqs_in_webconsole.js b/devtools/client/webconsole/new-console-output/test/mochitest/browser_netmonitor_shows_reqs_in_webconsole.js
--- a/devtools/client/webconsole/new-console-output/test/mochitest/browser_netmonitor_shows_reqs_in_webconsole.js
+++ b/devtools/client/webconsole/new-console-output/test/mochitest/browser_netmonitor_shows_reqs_in_webconsole.js
@@ -27,17 +27,17 @@ add_task(async function task() {
 
   const onMessageAdded = waitForMessages({
     hud,
     messages: [{
       text: TEST_PATH,
     }]
   });
 
-  await loadDocument(currentTab.linkedBrowser, TEST_PATH);
+  await loadDocument(TEST_PATH);
   info("Document loaded.");
 
   await onMessageAdded;
   info("Network message found.");
 
   // Test that the request appears in the network panel.
   let target = TargetFactory.forTab(currentTab);
   let toolbox = await gDevTools.showToolbox(target, "netmonitor");
diff --git a/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_network_messages_click.js b/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_network_messages_click.js
--- a/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_network_messages_click.js
+++ b/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_network_messages_click.js
@@ -22,17 +22,17 @@ registerCleanupFunction(() => {
 add_task(async function task() {
   const hud = await openNewTabAndConsole(TEST_URI);
 
   const currentTab = gBrowser.selectedTab;
   let target = TargetFactory.forTab(currentTab);
   let toolbox = gDevTools.getToolbox(target);
 
   const documentUrl = TEST_PATH + TEST_FILE;
-  await loadDocument(currentTab.linkedBrowser, documentUrl);
+  await loadDocument(documentUrl);
   info("Document loaded.");
 
   await testNetmonitorLink(toolbox, hud, documentUrl);
 
   // Go back to console.
   await toolbox.selectTool("webconsole");
   info("console panel open again.");
 
diff --git a/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_shows_reqs_in_netmonitor.js b/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_shows_reqs_in_netmonitor.js
--- a/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_shows_reqs_in_netmonitor.js
+++ b/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_shows_reqs_in_netmonitor.js
@@ -16,20 +16,19 @@ const TEST_PATH = "http://example.com/br
 const NET_PREF = "devtools.webconsole.filter.net";
 Services.prefs.setBoolPref(NET_PREF, true);
 registerCleanupFunction(() => {
   Services.prefs.clearUserPref(NET_PREF);
 });
 
 add_task(async function () {
   const toolbox = await openNewTabAndToolbox(TEST_URI, "netmonitor");
-  const currentTab = gBrowser.selectedTab;
   info("Network panel is open.");
 
-  await loadDocument(currentTab.linkedBrowser, TEST_PATH);
+  await loadDocument(TEST_PATH);
   info("Document loaded.");
 
   // Test that the request appears in the network panel.
   await testNetmonitor(toolbox);
 
   // Test that the request appears in the console.
   const { hud } = await toolbox.selectTool("webconsole");
   info("Web console is open");
diff --git a/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_warn_about_replaced_api.js b/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_warn_about_replaced_api.js
--- a/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_warn_about_replaced_api.js
+++ b/devtools/client/webconsole/new-console-output/test/mochitest/browser_webconsole_warn_about_replaced_api.js
@@ -15,18 +15,17 @@ add_task(async function () {
     ["devtools.webconsole.persistlog", true]
   ]});
 
   let hud = await openNewTabAndConsole(TEST_URI_NOT_REPLACED);
 
   await testWarningNotPresent(hud);
   await closeToolbox();
 
-  const currentTab = gBrowser.selectedTab;
-  await loadDocument(currentTab.linkedBrowser, TEST_URI_REPLACED);
+  await loadDocument(TEST_URI_REPLACED);
 
   let toolbox = await openToolboxForTab(gBrowser.selectedTab, "webconsole");
   hud = toolbox.getCurrentPanel().hud;
   await testWarningPresent(hud);
 });
 
 async function testWarningNotPresent(hud) {
   ok(!findMessage(hud, "logging API"), "no warning displayed");
diff --git a/devtools/client/webconsole/new-console-output/test/mochitest/head.js b/devtools/client/webconsole/new-console-output/test/mochitest/head.js
--- a/devtools/client/webconsole/new-console-output/test/mochitest/head.js
+++ b/devtools/client/webconsole/new-console-output/test/mochitest/head.js
@@ -174,17 +174,17 @@ function hideContextMenu(hud) {
     return Promise.resolve();
   }
 
   let onPopupHidden = once(popup, "popuphidden");
   popup.hidePopup();
   return onPopupHidden;
 }
 
-function loadDocument(browser, url) {
+function loadDocument(url, browser = gBrowser.selectedBrowser) {
   return new Promise(resolve => {
     browser.addEventListener("load", resolve, {capture: true, once: true});
     BrowserTestUtils.loadURI(gBrowser.selectedBrowser, url);
   });
 }
 
 /**
 * Returns a promise that resolves when the node passed as an argument mutate
