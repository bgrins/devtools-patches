# HG changeset patch
# Parent 273d6c900fb19c47f363e17dbb8a58783aa80dd2
# User Brian Grinstead <bgrinstead@mozilla.com>
tests


diff --git a/devtools/client/sourceeditor/autocomplete.js b/devtools/client/sourceeditor/autocomplete.js
--- a/devtools/client/sourceeditor/autocomplete.js
+++ b/devtools/client/sourceeditor/autocomplete.js
@@ -128,38 +128,42 @@ function initializeAutoCompletion(ctx, o
       if (popup && popup.isOpen) {
         if (!autocompleteMap.get(ed).suggestionInsertedOnce) {
           autocompleteMap.get(ed).insertingSuggestion = true;
           let {label, preLabel, text} = popup.getItemAtIndex(0);
           let cur = ed.getCursor();
           ed.replaceText(text.slice(preLabel.length), cur, cur);
         }
         popup.hidePopup();
-        // This event is used in tests
-        ed.emit("popup-hidden");
         return;
       }
 
       return CodeMirror.Pass;
     }
   };
   let autoCompleteCallback = autoComplete.bind(null, ctx);
   let keypressCallback = onEditorKeypress.bind(null, ctx);
   keyMap[autocompleteKey] = autoCompleteCallback;
   cm.addKeyMap(keyMap);
 
   cm.on("keydown", keypressCallback);
   ed.on("change", autoCompleteCallback);
   ed.on("destroy", destroy);
 
+  // This event is used in tests
+  popup._panel.addEventListener("popuphidden", triggerPopupHidden);
+  function triggerPopupHidden() {
+    ed.emit("popup-hidden");
+  }
   function destroy() {
     ed.off("destroy", destroy);
     cm.off("keydown", keypressCallback);
     ed.off("change", autoCompleteCallback);
     cm.removeKeyMap(keyMap);
+    popup._panel.removeEventListener("popuphidden", triggerPopupHidden);
     popup.destroy();
     keyMap = popup = completer = null;
     autocompleteMap.delete(ed);
   }
 
   autocompleteMap.set(ed, {
     popup: popup,
     completer: completer,
diff --git a/devtools/client/styleeditor/test/browser_styleeditor_autocomplete.js b/devtools/client/styleeditor/test/browser_styleeditor_autocomplete.js
--- a/devtools/client/styleeditor/test/browser_styleeditor_autocomplete.js
+++ b/devtools/client/styleeditor/test/browser_styleeditor_autocomplete.js
@@ -22,16 +22,18 @@ const {CSSProperties, CSSValues} = getCS
 //   }
 // ]
 let TEST_CASES = [
   ['VK_RIGHT'],
   ['VK_RIGHT'],
   ['VK_RIGHT'],
   ['VK_RIGHT'],
   ['Ctrl+Space', {total: 1, current: 0}],
+  ['VK_ESCAPE'],
+  ['Ctrl+Space', {total: 1, current: 0}],
   ['VK_LEFT'],
   ['VK_RIGHT'],
   ['VK_DOWN'],
   ['VK_RIGHT'],
   ['VK_RIGHT'],
   ['VK_RIGHT'],
   ['Ctrl+Space', { total: getSuggestionNumberFor("font"), current: 0}],
   ['VK_END'],
@@ -120,17 +122,17 @@ function testState() {
                 JSON.stringify(TEST_CASES[index]) + " for index " + index);
 
   let evt = "after-suggest";
 
   if (key == 'Ctrl+Space') {
     key = " ";
     mods.ctrlKey = true;
   }
-  else if (key == "VK_RETURN" && entered) {
+  else if ((key == "VK_RETURN" && entered) || key == "VK_ESCAPE") {
     evt = "popup-hidden";
   }
   else if (/(left|right|return|home|end)/ig.test(key) ||
            (key == "VK_DOWN" && !gPopup.isOpen)) {
     evt = "cursorActivity";
   }
   else if (key == "VK_TAB" || key == "VK_UP" || key == "VK_DOWN") {
     evt = "suggestion-entered";
@@ -189,16 +191,17 @@ function testAutocompletionDisabled() {
 
 function testEditorAddedDisabled(panel) {
   info("Editor added, getting the source editor and starting tests");
   panel.UI.editors[0].getSourceEditor().then(editor => {
     is(editor.sourceEditor.getOption("autocomplete"), false,
        "Autocompletion option does not exist");
     ok(!editor.sourceEditor.getAutocompletionPopup(),
        "Autocompletion popup does not exist");
+    ok (!panel._toolbox.splitConsole, "Split console was not toggled");
     cleanup();
   });
 }
 
 function cleanup() {
   Services.prefs.clearUserPref(AUTOCOMPLETION_PREF);
   gEditor = null;
   gPopup = null;
