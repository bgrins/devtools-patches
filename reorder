# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  50ea33fa595af679f2c9b1e74b6fc001e4a88a84

diff --git a/toolkit/content/widgets/arrowscrollbox.js b/toolkit/content/widgets/arrowscrollbox.js
--- a/toolkit/content/widgets/arrowscrollbox.js
+++ b/toolkit/content/widgets/arrowscrollbox.js
@@ -31,16 +31,19 @@
       <spacer part="arrowscrollbox-overflow-end-indicator"></spacer>
       <toolbarbutton class="scrollbutton-down" part="scrollbutton-down"/>
     `;
     }
 
     constructor() {
       super();
       this.attachShadow({ mode: "open" });
+    }
+
+    initialize() {
       this.shadowRoot.appendChild(this.fragment);
 
       this.scrollbox = this.shadowRoot.querySelector("[part=scrollbox]");
       this._scrollButtonUp = this.shadowRoot.querySelector(".scrollbutton-up");
       this._scrollButtonDown = this.shadowRoot.querySelector(
         ".scrollbutton-down"
       );
 
@@ -116,27 +119,28 @@
         this.on_scroll(event);
         this.dispatchEvent(new Event("scroll"));
       });
 
       this.scrollbox.addEventListener("scrollend", event => {
         this.on_scrollend(event);
         this.dispatchEvent(new Event("scrollend"));
       });
+
+      this.setAttribute("notoverflowing", "true");
+      this._updateScrollButtonsDisabledState();
+      this.initializeAttributeInheritance();
     }
 
     connectedCallback() {
-      if (this.delayConnectedCallback() || this.hasConnected) {
+      if (this.hasConnected) {
         return;
       }
       this.hasConnected = true;
-
-      this.setAttribute("notoverflowing", "true");
-      this.initializeAttributeInheritance();
-      this._updateScrollButtonsDisabledState();
+      this.initialize();
     }
 
     get fragment() {
       if (!this.constructor.hasOwnProperty("_fragment")) {
         this.constructor._fragment = MozXULElement.parseXULToFragment(
           this.markup
         );
       }
