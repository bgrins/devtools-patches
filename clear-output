# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  a385d37383415e1207bf1fb57a87eefeb6042532
Fixing clear output test

diff --git a/devtools/client/shared/developer-toolbar.js b/devtools/client/shared/developer-toolbar.js
--- a/devtools/client/shared/developer-toolbar.js
+++ b/devtools/client/shared/developer-toolbar.js
@@ -24,17 +24,17 @@ loader.lazyGetter(this, "prefBranch", fu
                     .QueryInterface(Ci.nsIPrefBranch2);
 });
 
 loader.lazyRequireGetter(this, "gcliInit", "devtools/shared/gcli/commands/index");
 loader.lazyRequireGetter(this, "util", "gcli/util/util");
 loader.lazyRequireGetter(this, "ConsoleServiceListener", "devtools/server/actors/utils/webconsole-utils", true);
 loader.lazyRequireGetter(this, "gDevTools", "devtools/client/framework/devtools", true);
 loader.lazyRequireGetter(this, "gDevToolsBrowser", "devtools/client/framework/devtools-browser", true);
-loader.lazyRequireGetter(this, "nodeConstants", "devtools/shared/dom-node-constants", true);
+loader.lazyRequireGetter(this, "nodeConstants", "devtools/shared/dom-node-constants");
 loader.lazyRequireGetter(this, "EventEmitter", "devtools/shared/event-emitter");
 
 /**
  * A collection of utilities to help working with commands
  */
 var CommandUtils = {
   /**
    * Utility to ensure that things are loaded in the correct order
@@ -741,16 +741,18 @@ DeveloperToolbar.prototype._onToolboxDes
  * method counts the JavaScript exceptions received and CSS errors/warnings.
  *
  * @private
  * @param string tabId the ID of the tab from where the page error comes.
  * @param object pageError the page error object received from the
  * PageErrorListener.
  */
 DeveloperToolbar.prototype._onPageError = function (tabId, pageError) {
+
+  console.log("Got pageError", tabId, pageError);
   if (pageError.category == "CSS Parser" ||
       pageError.category == "CSS Loader") {
     return;
   }
   if ((pageError.flags & pageError.warningFlag) ||
       (pageError.flags & pageError.strictFlag)) {
     this._warningsCount[tabId]++;
   } else {
diff --git a/devtools/client/shared/test/browser_toolbar_webconsole_errors_count.js b/devtools/client/shared/test/browser_toolbar_webconsole_errors_count.js
--- a/devtools/client/shared/test/browser_toolbar_webconsole_errors_count.js
+++ b/devtools/client/shared/test/browser_toolbar_webconsole_errors_count.js
@@ -1,13 +1,22 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 // Tests that the developer toolbar errors count works properly.
 
+// Use the old webconsole since the node isn't being rendered as an HTML tag
+// // in the new one (Bug 1304794)
+// Services.prefs.setBoolPref("devtools.webconsole.new-frontend-enabled", false);
+// registerCleanupFunction(function* () {
+//   Services.prefs.clearUserPref("devtools.webconsole.new-frontend-enabled");
+// });
+
+
+
 function test() {
   const TEST_URI = TEST_URI_ROOT + "browser_toolbar_webconsole_errors_count.html";
 
 
   let tab1, tab2, webconsole;
 
   Services.prefs.setBoolPref("javascript.options.strict", true);
 
@@ -89,30 +98,35 @@ function test() {
     });
   }
 
   function onWebConsoleOpen(hud) {
     dump("lolz!!\n");
     waitForValue({
       name: "web console shows the page errors",
       validator: function () {
-        return hud.outputNode.querySelectorAll(".message[category=exception][severity=error]").length;
+        // Support old markup (category / severity attributes) and new (classes)
+        return hud.outputNode.querySelectorAll(".message[category=exception][severity=error], .message.error").length;
       },
       value: 4,
       success: checkConsoleOutput.bind(null, hud),
       failure: () => {
         finish();
       },
     });
   }
 
   function checkConsoleOutput(hud) {
     let msgs = ["foobarBug762996a", "foobarBug762996b", "foobarBug762996load",
-                "foobarBug762996click", "foobarBug762996consoleLog",
-                "foobarBug762996css", "fooBug788445"];
+                "foobarBug762996click", "foobarBug762996consoleLog", "fooBug788445"];
+
+    // CSS messages are not shown in new frontend by default
+    if (!Services.prefs.getBoolPref("devtools.webconsole.new-frontend-enabled")) {
+      msgs.push("foobarBug762996css");
+    }
     msgs.forEach(function (msg) {
       isnot(hud.outputNode.textContent.indexOf(msg), -1,
             msg + " found in the Web Console output");
     });
 
     hud.jsterm.clearOutput();
 
     is(hud.outputNode.textContent.indexOf("foobarBug762996color"), -1,
@@ -135,20 +149,17 @@ function test() {
         return hud.outputNode.textContent.indexOf("foobarBug762996click") > -1;
       },
       success: doClearConsoleButton.bind(null, hud),
       failure: finish,
     };
   }
 
   function doClearConsoleButton(hud) {
-    let clearButton = hud.ui.rootElement
-                      .querySelector(".webconsole-clear-console-button");
-    EventUtils.synthesizeMouse(clearButton, 2, 2, {}, hud.iframeWindow);
-
+    hud.jsterm.clearOutput(true);
     is(hud.outputNode.textContent.indexOf("foobarBug762996click"), -1,
        "clear console button worked");
     is(getErrorsCount(), 0, "page errors counter has been reset");
     let tooltip = getTooltipValues();
     is(tooltip[1], 0, "page warnings counter has been reset");
 
     doPageReload(hud);
   }
@@ -170,17 +181,18 @@ function test() {
         warnings: 0,
         callback: waitForValue.bind(null, waitForConsoleOutputAfterReload),
       });
     }
 
     let waitForConsoleOutputAfterReload = {
       name: "the Web Console displays the correct number of errors after reload",
       validator: function () {
-        return hud.outputNode.querySelectorAll(".message[category=exception][severity=error]").length;
+        // Support old markup (category / severity attributes) and new (classes)
+        return hud.outputNode.querySelectorAll(".message[category=exception][severity=error], .message.error").length;
       },
       value: 3,
       success: function () {
         isnot(hud.outputNode.textContent.indexOf("foobarBug762996load"), -1,
               "foobarBug762996load found in console output after page reload");
         testEnd();
       },
       failure: testEnd,
diff --git a/devtools/client/webconsole/jsterm.js b/devtools/client/webconsole/jsterm.js
--- a/devtools/client/webconsole/jsterm.js
+++ b/devtools/client/webconsole/jsterm.js
@@ -937,38 +937,39 @@ JSTerm.prototype = {
    * This method emits the "messages-cleared" notification.
    *
    * @param boolean clearStorage
    *        True if you want to clear the console messages storage associated to
    *        this Web Console.
    */
   clearOutput: function (clearStorage) {
     let hud = this.hud;
-    let outputNode = hud.outputNode;
-    let node;
-    while ((node = outputNode.firstChild)) {
-      hud.removeOutputMessage(node);
+
+    if (hud.NEW_CONSOLE_OUTPUT_ENABLED) {
+      hud.newConsoleOutput.dispatchMessagesClear();
+    } else {
+      let outputNode = hud.outputNode;
+      let node;
+      while ((node = outputNode.firstChild)) {
+        hud.removeOutputMessage(node);
+      }
+
+      hud.groupDepth = 0;
+      hud._outputQueue.forEach(hud._destroyItem, hud);
+      hud._outputQueue = [];
+      this.webConsoleClient.clearNetworkRequests();
+      hud._repeatNodes = {};
     }
 
-    hud.groupDepth = 0;
-    hud._outputQueue.forEach(hud._destroyItem, hud);
-    hud._outputQueue = [];
-    this.webConsoleClient.clearNetworkRequests();
-    hud._repeatNodes = {};
-
     if (clearStorage) {
       this.webConsoleClient.clearMessagesCache();
     }
 
     this._sidebarDestroy();
 
-    if (hud.NEW_CONSOLE_OUTPUT_ENABLED) {
-      hud.newConsoleOutput.dispatchMessagesClear();
-    }
-
     this.emit("messages-cleared");
   },
 
   /**
    * Remove all of the private messages from the Web Console output.
    *
    * This method emits the "private-messages-cleared" notification.
    */
diff --git a/devtools/client/webconsole/webconsole.js b/devtools/client/webconsole/webconsole.js
--- a/devtools/client/webconsole/webconsole.js
+++ b/devtools/client/webconsole/webconsole.js
@@ -584,16 +584,17 @@ WebConsoleFrame.prototype = {
       console.log("Entering experimental mode for console frontend");
 
       // XXX: We should actually stop output from happening on old output
       // panel, but for now let's just hide it.
       this.experimentalOutputNode = this.outputNode.cloneNode();
       this.experimentalOutputNode.removeAttribute("tabindex");
       this.outputNode.hidden = true;
       this.outputNode.parentNode.appendChild(this.experimentalOutputNode);
+      this.outputNode = this.experimentalOutputNode;
       // @TODO Once the toolbox has been converted to React, see if passing
       // in JSTerm is still necessary.
       this.newConsoleOutput = new this.window.NewConsoleOutput(
         this.experimentalOutputNode, this.jsterm, toolbox, this.owner);
       console.log("Created newConsoleOutput", this.newConsoleOutput);
 
       let filterToolbar = doc.querySelector(".hud-console-filter-toolbar");
       filterToolbar.hidden = true;
