# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  e0a91b61e9c27928f4fa277fb748b614152ffe96
Bug 1207542 - The Control Center panel remains in focus after the user navigates to a previous page

diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -4273,16 +4273,18 @@ var XULBrowserWindow = {
 
   // This function fires only for the currently selected tab.
   onStateChange: function (aWebProgress, aRequest, aStateFlags, aStatus) {
     const nsIWebProgressListener = Ci.nsIWebProgressListener;
     const nsIChannel = Ci.nsIChannel;
 
     let browser = gBrowser.selectedBrowser;
 
+    //BRIANgIdentityHandler.
+
     if (aStateFlags & nsIWebProgressListener.STATE_START &&
         aStateFlags & nsIWebProgressListener.STATE_IS_NETWORK) {
 
       if (aRequest && aWebProgress.isTopLevel) {
         // clear out feed data
         browser.feeds = null;
 
         // clear out search-engine data
@@ -4489,16 +4491,17 @@ var XULBrowserWindow = {
 
       try {
         gCrashReporter.annotateCrashReport("URL", uri.spec);
       } catch (ex if ex.result == Components.results.NS_ERROR_NOT_INITIALIZED) {
         // Don't make noise when the crash reporter is built but not enabled.
       }
     }
 #endif
+    // gIdentityHandler.updateIdentity(this._state, aLocationURI);
   },
 
   asyncUpdateUI: function () {
     FeedHandler.updateFeeds();
     BrowserSearch.updateOpenSearchBadge();
   },
 
   // Left here for add-on compatibility, see bug 752434
@@ -4517,16 +4520,17 @@ var XULBrowserWindow = {
   //  1. Due to the nsIWebProgressListener.onSecurityChange notification.
   //  2. Called by tabbrowser.xml when updating the current browser.
   //  3. Called directly during this object's initializations.
   // aRequest will be null always in case 2 and 3, and sometimes in case 1 (for
   // instance, there won't be a request when STATE_BLOCKED_TRACKING_CONTENT is observed).
   onSecurityChange: function (aWebProgress, aRequest, aState, aIsSimulated) {
     // Don't need to do anything if the data we use to update the UI hasn't
     // changed
+    console.log("onSecurityChange",aState,aWebProgress)
     let uri = gBrowser.currentURI;
     let spec = uri.spec;
     if (this._state == aState &&
         this._lastLocation == spec)
       return;
     this._state = aState;
     this._lastLocation = spec;
 
@@ -6968,16 +6972,17 @@ var gIdentityHandler = {
    *
    * @param state
    *        Bitmask provided by nsIWebProgressListener.onSecurityChange.
    * @param uri
    *        nsIURI for which the identity UI should be displayed, already
    *        processed by nsIURIFixup.createExposableURI.
    */
   updateIdentity(state, uri) {
+    let uriChanged = uri != this._uri;
     this._state = state;
     this._uri = uri;
 
     // Firstly, populate the state properties required to display the UI. See
     // the documentation of the individual properties for details.
 
     try {
       this._uri.host;
@@ -6995,19 +7000,22 @@ var gIdentityHandler = {
     if (this._sslStatus) {
       this._sslStatus.QueryInterface(Ci.nsISSLStatus);
     }
 
     // Then, update the user interface with the available data.
     this.refreshIdentityBlock();
 
     // NOTE: We do NOT update the identity popup (the control center) when
-    // we receive a new security state. If the user opened the popup and looks
-    // at the provided information we don't want to suddenly change the panel
-    // contents.
+    // we receive a new security state, unless if the URI changed.
+    // If the user opened the popup and looks at the provided information
+    // we don't want to suddenly change the panel contents.
+    if (uriChanged) {
+      this._identityPopup.hidden = true;
+    }
   },
 
   /**
    * This is called asynchronously when requested by the Logins module, after
    * the insecure login forms state for the page has been updated.
    */
   refreshForInsecureLoginForms() {
     // Check this._uri because we don't want to refresh the user interface if
@@ -7147,16 +7155,20 @@ var gIdentityHandler = {
   },
 
   /**
    * Set up the title and content messages for the identity message popup,
    * based on the specified mode, and the details of the SSL cert, where
    * applicable
    */
   refreshIdentityPopup() {
+    if (!this._identityPopup || this._identityPopup.hidden) {
+      return;
+    }
+
     // Update the "Learn More" hrefs for Mixed Content Blocking.
     let baseURL = Services.urlFormatter.formatURLPref("app.support.baseURL");
     let learnMoreHref = `${baseURL}mixed-content`;
     this._identityPopupMixedContentLearnMore.setAttribute("href", learnMoreHref);
 
     // Determine connection security information.
     let connection = "not-secure";
     if (this._isSecureInternalUI) {
