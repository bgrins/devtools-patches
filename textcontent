# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  b9fa04606134ad6db5e784cde4c7df6ee9365530

diff --git a/toolkit/content/widgets/text.js b/toolkit/content/widgets/text.js
--- a/toolkit/content/widgets/text.js
+++ b/toolkit/content/widgets/text.js
@@ -4,17 +4,16 @@
 
 "use strict";
 
 // This is loaded into all XUL windows. Wrap in a block to prevent
 // leaking to window scope.
 {
 const {Services} = ChromeUtils.import("resource://gre/modules/Services.jsm");
 const MozXULTextElement = MozElements.MozElementMixin(XULTextElement);
-const textContentDescriptor = Object.getOwnPropertyDescriptor(Node.prototype, "textContent");
 
 let gInsertSeparator = false;
 let gAlwaysAppendAccessKey = false;
 let gUnderlineAccesskey = Services.prefs.getIntPref("ui.key.menuAccessKey") != 0;
 if (gUnderlineAccesskey) {
   try {
     const nsIPrefLocalizedString = Ci.nsIPrefLocalizedString;
     const prefNameInsertSeparator =
@@ -41,23 +40,23 @@ class MozTextLabel extends MozXULTextEle
     this.addEventListener("click", this._onClick);
   }
 
   static get observedAttributes() {
     return ["accesskey", "text"];
   }
 
   set textContent(val) {
-    textContentDescriptor.set.call(this, val);
+    super.textContent = val;
     this._lastFormattedAccessKey = null;
     this.formatAccessKey();
   }
 
   get textContent() {
-    return textContentDescriptor.get.call(this);
+    return super.textContent;
   }
 
   attributeChangedCallback(name, oldValue, newValue) {
     if (!this.isConnectedAndReady || oldValue == newValue) {
       return;
     }
 
     // As long as we are still hosted within XBL anonymous content and the [text]
