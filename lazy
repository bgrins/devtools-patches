# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  06c534eaf6ec68593872754328716040be43a738

diff --git a/browser/components/search/content/searchbar.js b/browser/components/search/content/searchbar.js
--- a/browser/components/search/content/searchbar.js
+++ b/browser/components/search/content/searchbar.js
@@ -32,65 +32,68 @@ class MozSearchbar extends MozXULElement
     return Array.from(unique);
   }
 
   attributeChangedCallback() {
     this.inheritAttributes();
   }
 
   inheritAttributes() {
+    if (!this.isConnected) {
+      return;
+    }
     for (let sel in inheritsMap) {
       let node = this.querySelector(sel);
       for (let attr of inheritsMap[sel]) {
         inheritAttribute(this, node, attr);
       }
     }
   }
 
-  constructor() {
-    super();
-    this.destroy = this.destroy.bind(this);
-    this._setupEventListeners();
-    let searchbar = this;
-    this.observer = {
-      observe(aEngine, aTopic, aVerb) {
-        if (aTopic == "browser-search-engine-modified" ||
-          (aTopic == "browser-search-service" && aVerb == "init-complete")) {
-          // Make sure the engine list is refetched next time it's needed
-          searchbar._engines = null;
-
-          // Update the popup header and update the display after any modification.
-          searchbar._textbox.popup.updateHeader();
-          searchbar.updateDisplay();
-        }
-      },
-      QueryInterface: ChromeUtils.generateQI([Ci.nsIObserver]),
-    };
-    this.content = MozXULElement.parseXULToFragment(`
-      <stringbundle src="chrome://browser/locale/search.properties"></stringbundle>
-      <textbox class="searchbar-textbox" type="autocomplete" inputtype="search" placeholder="&searchInput.placeholder;" flex="1" autocompletepopup="PopupSearchAutoComplete" autocompletesearch="search-autocomplete" autocompletesearchparam="searchbar-history" maxrows="10" completeselectedindex="true" minresultsforpopup="0" inherits="disabled,disableautocomplete,searchengine,src,newlines">
-        <box>
-          <hbox class="searchbar-search-button" inherits="addengines" tooltiptext="&searchIcon.tooltip;">
-            <image class="searchbar-search-icon"></image>
-            <image class="searchbar-search-icon-overlay"></image>
-          </hbox>
-        </box>
-        <hbox class="search-go-container">
-          <image class="search-go-button urlbar-icon" hidden="true" onclick="handleSearchCommand(event);" tooltiptext="&contentSearchSubmit.tooltip;"></image>
-        </hbox>
-      </textbox>
-    `, ["chrome://browser/locale/browser.dtd"]);
-  }
-
   connectedCallback() {
     // Don't initialize if this isn't going to be visible
     if (this.closest("#BrowserToolbarPalette")) {
       return;
     }
 
+    if (!this._connectedOnce) {
+      this._connectedOnce = true;
+      this.destroy = this.destroy.bind(this);
+      let searchbar = this;
+      this.observer = {
+        observe(aEngine, aTopic, aVerb) {
+          if (aTopic == "browser-search-engine-modified" ||
+            (aTopic == "browser-search-service" && aVerb == "init-complete")) {
+            // Make sure the engine list is refetched next time it's needed
+            searchbar._engines = null;
+
+            // Update the popup header and update the display after any modification.
+            searchbar._textbox.popup.updateHeader();
+            searchbar.updateDisplay();
+          }
+        },
+        QueryInterface: ChromeUtils.generateQI([Ci.nsIObserver]),
+      };
+      this.content = MozXULElement.parseXULToFragment(`
+        <stringbundle src="chrome://browser/locale/search.properties"></stringbundle>
+        <textbox class="searchbar-textbox" type="autocomplete" inputtype="search" placeholder="&searchInput.placeholder;" flex="1" autocompletepopup="PopupSearchAutoComplete" autocompletesearch="search-autocomplete" autocompletesearchparam="searchbar-history" maxrows="10" completeselectedindex="true" minresultsforpopup="0" inherits="disabled,disableautocomplete,searchengine,src,newlines">
+          <box>
+            <hbox class="searchbar-search-button" inherits="addengines" tooltiptext="&searchIcon.tooltip;">
+              <image class="searchbar-search-icon"></image>
+              <image class="searchbar-search-icon-overlay"></image>
+            </hbox>
+          </box>
+          <hbox class="search-go-container">
+            <image class="search-go-button urlbar-icon" hidden="true" onclick="handleSearchCommand(event);" tooltiptext="&contentSearchSubmit.tooltip;"></image>
+          </hbox>
+        </textbox>
+      `, ["chrome://browser/locale/browser.dtd"]);
+      this._setupEventListeners();
+    }
+
     this.appendChild(document.importNode(this.content, true));
     this.inheritAttributes();
     window.addEventListener("unload", this.destroy);
     this._ignoreFocus = false;
 
     this._clickClosedPopup = false;
 
     this._stringBundle = this.querySelector("stringbundle");
diff --git a/browser/components/search/test/browser_searchbar_openpopup.js b/browser/components/search/test/browser_searchbar_openpopup.js
--- a/browser/components/search/test/browser_searchbar_openpopup.js
+++ b/browser/components/search/test/browser_searchbar_openpopup.js
@@ -1,11 +1,12 @@
 // Tests that the suggestion popup appears at the right times in response to
 // focus and user events (mouse, keyboard, drop).
 
+
 // Instead of loading EventUtils.js into the test scope in browser-test.js for all tests,
 // we only need EventUtils.js for a few files which is why we are using loadSubScript.
 var EventUtils = {};
 Services.scriptloader.loadSubScript("chrome://mochikit/content/tests/SimpleTest/EventUtils.js", EventUtils);
 
 const searchPopup = document.getElementById("PopupSearchAutoComplete");
 const kValues = ["long text", "long text 2", "long text 3"];
 
diff --git a/toolkit/content/customElements.js b/toolkit/content/customElements.js
--- a/toolkit/content/customElements.js
+++ b/toolkit/content/customElements.js
@@ -152,25 +152,25 @@ function getInterfaceProxy(obj) {
   return obj._customInterfaceProxy;
 }
 
 // Attach the base class to the window so other scripts can use it:
 window.MozXULElement = MozXULElement;
 
 for (let script of [
   "chrome://global/content/elements/general.js",
+  "chrome://global/content/elements/findbar.js",
+  "chrome://global/content/elements/stringbundle.js",
   "chrome://global/content/elements/textbox.js",
   "chrome://global/content/elements/tabbox.js",
 ]) {
   Services.scriptloader.loadSubScript(script, window);
 }
 
 for (let [tag, script] of [
-  ["findbar", "chrome://global/content/elements/findbar.js"],
-  ["stringbundle", "chrome://global/content/elements/stringbundle.js"],
   ["printpreview-toolbar", "chrome://global/content/printPreviewToolbar.js"],
   ["editor", "chrome://global/content/elements/editor.js"],
 ]) {
   customElements.setElementCreationCallback(tag, () => {
     Services.scriptloader.loadSubScript(script, window);
   });
 }
 
