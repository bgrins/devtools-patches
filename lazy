# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  06c534eaf6ec68593872754328716040be43a738

diff --git a/browser/components/search/content/searchbar.js b/browser/components/search/content/searchbar.js
--- a/browser/components/search/content/searchbar.js
+++ b/browser/components/search/content/searchbar.js
@@ -32,28 +32,30 @@ class MozSearchbar extends MozXULElement
     return Array.from(unique);
   }
 
   attributeChangedCallback() {
     this.inheritAttributes();
   }
 
   inheritAttributes() {
+    if (!this.isConnected) {
+      return;
+    }
     for (let sel in inheritsMap) {
       let node = this.querySelector(sel);
       for (let attr of inheritsMap[sel]) {
         inheritAttribute(this, node, attr);
       }
     }
   }
 
   constructor() {
     super();
     this.destroy = this.destroy.bind(this);
-    this._setupEventListeners();
     let searchbar = this;
     this.observer = {
       observe(aEngine, aTopic, aVerb) {
         if (aTopic == "browser-search-engine-modified" ||
           (aTopic == "browser-search-service" && aVerb == "init-complete")) {
           // Make sure the engine list is refetched next time it's needed
           searchbar._engines = null;
 
@@ -73,16 +75,17 @@ class MozSearchbar extends MozXULElement
             <image class="searchbar-search-icon-overlay"></image>
           </hbox>
         </box>
         <hbox class="search-go-container">
           <image class="search-go-button urlbar-icon" hidden="true" onclick="handleSearchCommand(event);" tooltiptext="&contentSearchSubmit.tooltip;"></image>
         </hbox>
       </textbox>
     `, ["chrome://browser/locale/browser.dtd"]);
+    this._setupEventListeners();
   }
 
   connectedCallback() {
     // Don't initialize if this isn't going to be visible
     if (this.closest("#BrowserToolbarPalette")) {
       return;
     }
 
@@ -436,17 +439,17 @@ class MozSearchbar extends MozXULElement
 
       this.openSuggestionsPanel();
     }, true);
 
     this.addEventListener("mousedown", (event) => {
       if (event.originalTarget.classList.contains(".searchbar-search-button")) {
         this._clickClosedPopup = this._textbox.popup._isHiding;
       }
-    }, true);
+    }, {capture: true, mozSystemGroup: true});
 
     this.addEventListener("mousedown", (event) => {
       // Ignore clicks on the search go button.
       if (event.originalTarget.classList.contains("search-go-button")) {
         return;
       }
 
       let isIconClick = event.originalTarget.classList.contains("searchbar-search-button");
diff --git a/browser/components/search/test/browser_searchbar_openpopup.js b/browser/components/search/test/browser_searchbar_openpopup.js
--- a/browser/components/search/test/browser_searchbar_openpopup.js
+++ b/browser/components/search/test/browser_searchbar_openpopup.js
@@ -1,11 +1,12 @@
 // Tests that the suggestion popup appears at the right times in response to
 // focus and user events (mouse, keyboard, drop).
 
+
 // Instead of loading EventUtils.js into the test scope in browser-test.js for all tests,
 // we only need EventUtils.js for a few files which is why we are using loadSubScript.
 var EventUtils = {};
 Services.scriptloader.loadSubScript("chrome://mochikit/content/tests/SimpleTest/EventUtils.js", EventUtils);
 
 const searchPopup = document.getElementById("PopupSearchAutoComplete");
 const kValues = ["long text", "long text 2", "long text 3"];
 
diff --git a/toolkit/content/customElements.js b/toolkit/content/customElements.js
--- a/toolkit/content/customElements.js
+++ b/toolkit/content/customElements.js
@@ -152,25 +152,25 @@ function getInterfaceProxy(obj) {
   return obj._customInterfaceProxy;
 }
 
 // Attach the base class to the window so other scripts can use it:
 window.MozXULElement = MozXULElement;
 
 for (let script of [
   "chrome://global/content/elements/general.js",
+  "chrome://global/content/elements/findbar.js",
+  "chrome://global/content/elements/stringbundle.js",
   "chrome://global/content/elements/textbox.js",
   "chrome://global/content/elements/tabbox.js",
 ]) {
   Services.scriptloader.loadSubScript(script, window);
 }
 
 for (let [tag, script] of [
-  ["findbar", "chrome://global/content/elements/findbar.js"],
-  ["stringbundle", "chrome://global/content/elements/stringbundle.js"],
   ["printpreview-toolbar", "chrome://global/content/printPreviewToolbar.js"],
   ["editor", "chrome://global/content/elements/editor.js"],
 ]) {
   customElements.setElementCreationCallback(tag, () => {
     Services.scriptloader.loadSubScript(script, window);
   });
 }
 
