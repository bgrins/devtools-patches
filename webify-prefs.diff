diff --git a/browser/components/preferences/applicationManager.xul b/browser/components/preferences/applicationManager.xul
index 7d6f43185133..42482f767550 100644
--- a/browser/components/preferences/applicationManager.xul
+++ b/browser/components/preferences/applicationManager.xul
@@ -20,6 +20,8 @@
   <script type="application/javascript"
           src="chrome://browser/content/utilityOverlay.js"/>
   <script type="application/javascript"
+          src="chrome://global/content/preferences.js"/>
+  <script type="application/javascript"
           src="chrome://browser/content/preferences/applicationManager.js"/>
 
   <commandset id="appManagerCommandSet">
diff --git a/browser/components/preferences/in-content-new/containers.xul b/browser/components/preferences/in-content-new/containers.xul
index 647a99bc2185..5d84dbe0ceee 100644
--- a/browser/components/preferences/in-content-new/containers.xul
+++ b/browser/components/preferences/in-content-new/containers.xul
@@ -7,14 +7,6 @@
 <script type="application/javascript"
         src="chrome://browser/content/preferences/in-content-new/containers.js"/>
 
-<preferences id="containerPreferences" hidden="true" data-category="paneContainer">
-  <!-- Containers -->
-  <preference id="privacy.userContext.enabled"
-              name="privacy.userContext.enabled"
-              type="bool"/>
-
-</preferences>
-
 <hbox hidden="true"
       class="container-header-links"
       data-category="paneContainers">
diff --git a/browser/components/preferences/in-content-new/main.js b/browser/components/preferences/in-content-new/main.js
index 4d77b89f6fa2..f3914de41582 100644
--- a/browser/components/preferences/in-content-new/main.js
+++ b/browser/components/preferences/in-content-new/main.js
@@ -97,6 +97,151 @@ if (AppConstants.MOZ_DEV_EDITION) {
                                     "resource://gre/modules/FxAccounts.jsm");
 }
 
+window.addEventListener("DOMContentLoaded", () => {
+  Preferences.addAll([
+    // Startup
+    { id: "browser.startup.page", type: "int" },
+    { id: "browser.startup.homepage", type: "wstring" },
+
+    { id: "pref.browser.homepage.disable_button.current_page", type: "bool" },
+    { id: "pref.browser.homepage.disable_button.bookmark_page", type: "bool" },
+    { id: "pref.browser.homepage.disable_button.restore_default", type: "bool" },
+
+    // Downloads
+    { id: "browser.download.useDownloadDir", type: "bool" },
+    { id: "browser.download.folderList", type: "int" },
+    { id: "browser.download.dir", type: "file" },
+
+    /* Tab preferences
+    Preferences:
+
+    browser.link.open_newwindow
+        1 opens such links in the most recent window or tab,
+        2 opens such links in a new window,
+        3 opens such links in a new tab
+    browser.tabs.loadInBackground
+    - true if display should switch to a new tab which has been opened from a
+      link, false if display shouldn't switch
+    browser.tabs.warnOnClose
+    - true if when closing a window with multiple tabs the user is warned and
+      allowed to cancel the action, false to just close the window
+    browser.tabs.warnOnOpen
+    - true if the user should be warned if he attempts to open a lot of tabs at
+      once (e.g. a large folder of bookmarks), false otherwise
+    browser.taskbar.previews.enable
+    - true if tabs are to be shown in the Windows 7 taskbar
+    */
+
+    { id: "browser.link.open_newwindow", type: "int" },
+    { id: "browser.tabs.loadInBackground", type: "bool", inverted: true },
+    { id: "browser.tabs.warnOnClose", type: "bool" },
+    { id: "browser.tabs.warnOnOpen", type: "bool" },
+    { id: "browser.sessionstore.restore_on_demand", type: "bool" },
+    { id: "browser.ctrlTab.previews", type: "bool" },
+
+    // Fonts
+    { id: "font.language.group", type: "wstring" },
+
+    // Languages
+    { id: "browser.translation.detectLanguage", type: "bool" },
+
+    // General tab
+
+    /* Accessibility
+     * accessibility.browsewithcaret
+       - true enables keyboard navigation and selection within web pages using a
+         visible caret, false uses normal keyboard navigation with no caret
+     * accessibility.typeaheadfind
+       - when set to true, typing outside text areas and input boxes will
+         automatically start searching for what's typed within the current
+         document; when set to false, no search action happens */
+    { id: "accessibility.browsewithcaret", type: "bool" },
+    { id: "accessibility.typeaheadfind", type: "bool" },
+    { id: "accessibility.blockautorefresh", type: "bool" },
+
+    /* Browsing
+     * general.autoScroll
+       - when set to true, clicking the scroll wheel on the mouse activates a
+         mouse mode where moving the mouse down scrolls the document downward with
+         speed correlated with the distance of the cursor from the original
+         position at which the click occurred (and likewise with movement upward);
+         if false, this behavior is disabled
+     * general.smoothScroll
+       - set to true to enable finer page scrolling than line-by-line on page-up,
+         page-down, and other such page movements */
+    { id: "general.autoScroll", type: "bool" },
+    { id: "general.smoothScroll", type: "bool" },
+
+    { id: "layout.spellcheckDefault", type: "int" },
+    { id: "toolkit.telemetry.enabled", type: "bool" },
+    { id: "browser.preferences.defaultPerformanceSettings.enabled", type: "bool" },
+    { id: "dom.ipc.processCount", type: "int" },
+    { id: "dom.ipc.processCount.web", type: "int" },
+    { id: "layers.acceleration.disabled", type: "bool", inverted: true },
+
+    // Files and Applications
+    { id: "browser.feeds.handler", type: "string" },
+    { id: "browser.feeds.handler.default", type: "string" },
+    { id: "browser.feeds.handlers.application", type: "file" },
+    { id: "browser.feeds.handlers.webservice", type: "string" },
+
+    { id: "browser.videoFeeds.handler", type: "string" },
+    { id: "browser.videoFeeds.handler.default", type: "string" },
+    { id: "browser.videoFeeds.handlers.application", type: "file" },
+    { id: "browser.videoFeeds.handlers.webservice", type: "string" },
+
+    { id: "browser.audioFeeds.handler", type: "string" },
+    { id: "browser.audioFeeds.handler.default", type: "string" },
+    { id: "browser.audioFeeds.handlers.application", type: "file" },
+    { id: "browser.audioFeeds.handlers.webservice", type: "string" },
+
+    { id: "pref.downloads.disable_button.edit_actions", type: "bool" },
+
+    // DRM content
+    { id: "media.eme.enabled", type: "bool" },
+
+    // Update
+    { id: "browser.preferences.advanced.selectedTabIndex", type: "int" },
+    { id: "browser.search.update", type: "bool" },
+  ]);
+
+  if (AppConstants.E10S_TESTING_ONLY) {
+    Preferences.addAll([
+      { id: "browser.tabs.remote.autostart", type: "bool" },
+      { id: "e10sTempPref", name: "browser.tabs.remote.autostart.2", type: "bool" },
+      { id: "e10sForceEnable", name: "browser.tabs.remote.force-enable", type: "bool" },
+    ]);
+  }
+
+  if (AppConstants.HAVE_SHELL_SERVICE) {
+    Preferences.addAll([
+      { id: "browser.shell.checkDefaultBrowser", type: "bool" },
+      { id: "pref.general.disable_button.default_browser", type: "bool" },
+    ]);
+  }
+
+  if (AppConstants.XP_WIN) {
+    Preferences.addAll([
+      { id: "browser.taskbar.previews.enable", type: "bool" },
+      { id: "ui.osk.enabled", type: "bool" },
+    ]);
+  }
+
+  if (AppConstants.MOZ_UPDATER) {
+    Preferences.addAll([
+      { id: "app.update.enabled", type: "bool" },
+      { id: "app.update.auto", type: "bool" },
+      { id: "app.update.disable_button.showUpdateHistory", type: "bool" },
+    ]);
+
+    if (AppConstants.MOZ_MAINTENANCE_SERVICE) {
+      Preferences.addAll([
+        { id: "app.update.service.enabled", type: "bool" },
+      ]);
+    }
+  }
+}, { once: true, capture: true });
+
 var gMainPane = {
   // The set of types the app knows how to handle.  A hash of HandlerInfoWrapper
   // objects, indexed by type.
@@ -190,10 +335,9 @@ var gMainPane = {
     this.updateDefaultPerformanceSettingsPref();
 
     let defaultPerformancePref =
-      document.getElementById("browser.preferences.defaultPerformanceSettings.enabled");
-    defaultPerformancePref.addEventListener("change", () => {
-      this.updatePerformanceSettingsBox({duringChangeEvent: true});
-    });
+      Preferences.get("browser.preferences.defaultPerformanceSettings.enabled");
+    defaultPerformancePref.on("change",
+      this.updatePerformanceSettingsBox.bind(this, {duringChangeEvent: true}));
     this.updatePerformanceSettingsBox({duringChangeEvent: false});
 
     // set up the "use current page" label-changing listener
@@ -222,8 +366,8 @@ var gMainPane = {
     if (!TransientPrefs.prefShouldBeVisible("browser.tabs.warnOnOpen"))
       document.getElementById("warnOpenMany").hidden = true;
 
-    setEventListener("browser.privatebrowsing.autostart", "change",
-                     gMainPane.updateBrowserStartupLastSession);
+    Preferences.get("browser.privatebrowsing.autostart").on("change",
+                     gMainPane.updateBrowserStartupLastSession.bind(gMainPane));
     if (AppConstants.HAVE_SHELL_SERVICE) {
       setEventListener("setDefaultButton", "command",
                        gMainPane.setDefaultBrowser);
@@ -240,14 +384,14 @@ var gMainPane = {
       gMainPane.openTranslationProviderAttribution);
     setEventListener("translateButton", "command",
       gMainPane.showTranslationExceptions);
-    setEventListener("font.language.group", "change",
-      gMainPane._rebuildFonts);
+    Preferences.get("font.language.group").on("change",
+      gMainPane._rebuildFonts.bind(gMainPane));
     setEventListener("advancedFonts", "command",
       gMainPane.configureFonts);
     setEventListener("colors", "command",
       gMainPane.configureColors);
-    setEventListener("layers.acceleration.disabled", "change",
-      gMainPane.updateHardwareAcceleration);
+    Preferences.get("layers.acceleration.disabled").on("change",
+      gMainPane.updateHardwareAcceleration.bind(gMainPane));
     setEventListener("connectionSettings", "command",
       gMainPane.showConnections);
     setEventListener("browserContainersCheckbox", "command",
@@ -277,9 +421,9 @@ var gMainPane = {
                        gMainPane.enableE10SChange);
       let e10sCheckbox = document.getElementById("e10sAutoStart");
 
-      let e10sPref = document.getElementById("browser.tabs.remote.autostart");
-      let e10sTempPref = document.getElementById("e10sTempPref");
-      let e10sForceEnable = document.getElementById("e10sForceEnable");
+      let e10sPref = Preferences.get("browser.tabs.remote.autostart");
+      let e10sTempPref = Preferences.get("e10sTempPref");
+      let e10sForceEnable = Preferences.get("e10sForceEnable");
 
       let preffedOn = e10sPref.value || e10sTempPref.value || e10sForceEnable.value;
 
@@ -403,12 +547,12 @@ var gMainPane = {
     setEventListener("focusSearch1", "command", gMainPane.focusFilterBox);
     setEventListener("focusSearch2", "command", gMainPane.focusFilterBox);
     setEventListener("filter", "command", gMainPane.filter);
-    setEventListener("handlersView", "select",
-      gMainPane.onSelectionChanged);
+    setEventListener("handlersView", "select", gMainPane.onSelectionChanged);
     setEventListener("typeColumn", "click", gMainPane.sort);
     setEventListener("actionColumn", "click", gMainPane.sort);
     setEventListener("chooseFolder", "command", gMainPane.chooseFolder);
-    setEventListener("browser.download.dir", "change", gMainPane.displayDownloadDirPref);
+    Preferences.get("browser.download.dir").on("change",
+      gMainPane.displayDownloadDirPref.bind(gMainPane));
 
     // Listen for window unload so we can remove our preference observers.
     window.addEventListener("unload", this);
@@ -495,8 +639,8 @@ var gMainPane = {
   enableE10SChange() {
     if (AppConstants.E10S_TESTING_ONLY) {
       let e10sCheckbox = document.getElementById("e10sAutoStart");
-      let e10sPref = document.getElementById("browser.tabs.remote.autostart");
-      let e10sTempPref = document.getElementById("e10sTempPref");
+      let e10sPref = Preferences.get("browser.tabs.remote.autostart");
+      let e10sTempPref = Preferences.get("e10sTempPref");
 
       let prefsToChange;
       if (e10sCheckbox.checked) {
@@ -617,7 +761,7 @@ var gMainPane = {
    */
 
   syncFromHomePref() {
-    let homePref = document.getElementById("browser.startup.homepage");
+    let homePref = Preferences.get("browser.startup.homepage");
 
     // If the pref is set to about:home or about:newtab, set the value to ""
     // to show the placeholder text (about:home title) rather than
@@ -656,7 +800,7 @@ var gMainPane = {
    * window UI to reflect this.
    */
   setHomePageToCurrent() {
-    let homePage = document.getElementById("browser.startup.homepage");
+    let homePage = Preferences.get("browser.startup.homepage");
     let tabs = this._getTabsForHomePage();
     function getTabURI(t) {
       return t.linkedBrowser.currentURI.spec;
@@ -683,7 +827,7 @@ var gMainPane = {
     if (aEvent.detail.button != "accept")
       return;
     if (rv.urls && rv.names) {
-      var homePage = document.getElementById("browser.startup.homepage");
+      var homePage = Preferences.get("browser.startup.homepage");
 
       // XXX still using dangerous "|" joiner!
       homePage.value = rv.urls.join("|");
@@ -707,7 +851,7 @@ var gMainPane = {
 
     // In this case, the button's disabled state is set by preferences.xml.
     let prefName = "pref.browser.homepage.disable_button.current_page";
-    if (document.getElementById(prefName).locked)
+    if (Preferences.get(prefName).locked)
       return;
 
     useCurrent.disabled = !tabs.length
@@ -744,7 +888,7 @@ var gMainPane = {
    * Restores the default home page as the user's home page.
    */
   restoreDefaultHomePage() {
-    var homePage = document.getElementById("browser.startup.homepage");
+    var homePage = Preferences.get("browser.startup.homepage");
     homePage.value = homePage.defaultValue;
   },
 
@@ -754,7 +898,7 @@ var gMainPane = {
    */
   updateButtons(aButtonID, aPreferenceID) {
     var button = document.getElementById(aButtonID);
-    var preference = document.getElementById(aPreferenceID);
+    var preference = Preferences.get(aPreferenceID);
     button.disabled = preference.value != true;
     return undefined;
   },
@@ -764,8 +908,8 @@ var gMainPane = {
    * on the value of the browser.privatebrowsing.autostart pref.
    */
   updateBrowserStartupLastSession() {
-    let pbAutoStartPref = document.getElementById("browser.privatebrowsing.autostart");
-    let startupPref = document.getElementById("browser.startup.page");
+    let pbAutoStartPref = Preferences.get("browser.privatebrowsing.autostart");
+    let startupPref = Preferences.get("browser.startup.page");
     let menu = document.getElementById("browserStartupPage");
     let option = document.getElementById("browserStartupLastSession");
     if (pbAutoStartPref.value) {
@@ -810,7 +954,7 @@ var gMainPane = {
    * @returns |true| if such links should be opened in new tabs
    */
   readLinkTarget() {
-    var openNewWindow = document.getElementById("browser.link.open_newwindow");
+    var openNewWindow = Preferences.get("browser.link.open_newwindow");
     return openNewWindow.value != 2;
   },
 
@@ -858,7 +1002,7 @@ var gMainPane = {
    */
   setDefaultBrowser() {
     if (AppConstants.HAVE_SHELL_SERVICE) {
-      let alwaysCheckPref = document.getElementById("browser.shell.checkDefaultBrowser");
+      let alwaysCheckPref = Preferences.get("browser.shell.checkDefaultBrowser");
       alwaysCheckPref.value = true;
 
       let shellSvc = getShellService();
@@ -987,12 +1131,7 @@ var gMainPane = {
    * Populates the default font list in UI.
    */
   _rebuildFonts() {
-    var preferences = document.getElementById("mainPreferences");
-    // Ensure preferences are "visible" to ensure bindings work.
-    preferences.hidden = false;
-    // Force flush:
-    preferences.clientHeight;
-    var langGroupPref = document.getElementById("font.language.group");
+    var langGroupPref = Preferences.get("font.language.group");
     this._selectDefaultLanguageGroup(langGroupPref.value,
                                      this._readDefaultFontTypeForLanguage(langGroupPref.value) == "serif");
   },
@@ -1004,14 +1143,10 @@ var gMainPane = {
   _readDefaultFontTypeForLanguage(aLanguageGroup) {
     const kDefaultFontType = "font.default.%LANG%";
     var defaultFontTypePref = kDefaultFontType.replace(/%LANG%/, aLanguageGroup);
-    var preference = document.getElementById(defaultFontTypePref);
+    var preference = Preferences.get(defaultFontTypePref);
     if (!preference) {
-      preference = document.createElement("preference");
-      preference.id = defaultFontTypePref;
-      preference.setAttribute("name", defaultFontTypePref);
-      preference.setAttribute("type", "string");
-      preference.setAttribute("onchange", "gMainPane._rebuildFonts();");
-      document.getElementById("mainPreferences").appendChild(preference);
+      preference = Preferences.add({ id: defaultFontTypePref, type: "string" });
+      preference.on("change", gMainPane._rebuildFonts.bind(gMainPane));
     }
     return preference.value;
   },
@@ -1023,7 +1158,6 @@ var gMainPane = {
     const kFontNameListFmtSansSerif = "font.name-list.sans-serif.%LANG%";
     const kFontSizeFmtVariable      = "font.size.variable.%LANG%";
 
-    var preferences = document.getElementById("mainPreferences");
     var prefs = [{ format: aIsSerif ? kFontNameFmtSerif : kFontNameFmtSansSerif,
                    type: "fontname",
                    element: "defaultFont",
@@ -1037,14 +1171,10 @@ var gMainPane = {
                    element: "defaultFontSize",
                    fonttype: null }];
     for (var i = 0; i < prefs.length; ++i) {
-      var preference = document.getElementById(prefs[i].format.replace(/%LANG%/, aLanguageGroup));
+      var preference = Preferences.get(prefs[i].format.replace(/%LANG%/, aLanguageGroup));
       if (!preference) {
-        preference = document.createElement("preference");
         var name = prefs[i].format.replace(/%LANG%/, aLanguageGroup);
-        preference.id = name;
-        preference.setAttribute("name", name);
-        preference.setAttribute("type", prefs[i].type);
-        preferences.appendChild(preference);
+        preference = Preferences.add({ id: name, type: prefs[i].type });
       }
 
       if (!prefs[i].element)
@@ -1080,7 +1210,7 @@ var gMainPane = {
    *     2  enables spellchecking for all text fields
    */
   readCheckSpelling() {
-    var pref = document.getElementById("layout.spellcheckDefault");
+    var pref = Preferences.get("layout.spellcheckDefault");
     this._storedSpellCheck = pref.value;
 
     return (pref.value != 0);
@@ -1104,9 +1234,9 @@ var gMainPane = {
 
   updateDefaultPerformanceSettingsPref() {
     let defaultPerformancePref =
-      document.getElementById("browser.preferences.defaultPerformanceSettings.enabled");
-    let processCountPref = document.getElementById("dom.ipc.processCount");
-    let accelerationPref = document.getElementById("layers.acceleration.disabled");
+      Preferences.get("browser.preferences.defaultPerformanceSettings.enabled");
+    let processCountPref = Preferences.get("dom.ipc.processCount");
+    let accelerationPref = Preferences.get("layers.acceleration.disabled");
     if (processCountPref.value != processCountPref.defaultValue ||
         accelerationPref.value != accelerationPref.defaultValue) {
       defaultPerformancePref.value = false;
@@ -1115,18 +1245,18 @@ var gMainPane = {
 
   updatePerformanceSettingsBox({duringChangeEvent}) {
     let defaultPerformancePref =
-      document.getElementById("browser.preferences.defaultPerformanceSettings.enabled");
+      Preferences.get("browser.preferences.defaultPerformanceSettings.enabled");
     let performanceSettings = document.getElementById("performanceSettings");
-    let processCountPref = document.getElementById("dom.ipc.processCount");
+    let processCountPref = Preferences.get("dom.ipc.processCount");
     if (defaultPerformancePref.value) {
-      let accelerationPref = document.getElementById("layers.acceleration.disabled");
+      let accelerationPref = Preferences.get("layers.acceleration.disabled");
       // Unset the value so process count will be decided by e10s rollout.
       processCountPref.value = processCountPref.defaultValue;
       accelerationPref.value = accelerationPref.defaultValue;
       performanceSettings.hidden = true;
     } else {
       let e10sRolloutProcessCountPref =
-        document.getElementById("dom.ipc.processCount.web");
+        Preferences.get("dom.ipc.processCount.web");
       // Take the e10s rollout value as the default value (if it exists),
       // but don't overwrite the user set value.
       if (duringChangeEvent &&
@@ -1140,9 +1270,8 @@ var gMainPane = {
 
   buildContentProcessCountMenuList() {
     if (gMainPane.isE10SEnabled()) {
-      let processCountPref = document.getElementById("dom.ipc.processCount");
-      let e10sRolloutProcessCountPref =
-        document.getElementById("dom.ipc.processCount.web");
+      let processCountPref = Preferences.get("dom.ipc.processCount");
+      let e10sRolloutProcessCountPref = Preferences.get("dom.ipc.processCount.web");
       let defaultProcessCount =
         e10sRolloutProcessCountPref.value || processCountPref.defaultValue;
       let bundlePreferences = document.getElementById("bundlePreferences");
@@ -1199,8 +1328,8 @@ var gMainPane = {
    */
   updateReadPrefs() {
     if (AppConstants.MOZ_UPDATER) {
-      var enabledPref = document.getElementById("app.update.enabled");
-      var autoPref = document.getElementById("app.update.auto");
+      var enabledPref = Preferences.get("app.update.enabled");
+      var autoPref = Preferences.get("app.update.auto");
       var radiogroup = document.getElementById("updateRadioGroup");
 
       if (!enabledPref.value)   // Don't care for autoPref.value in this case.
@@ -1244,8 +1373,8 @@ var gMainPane = {
    */
   updateWritePrefs() {
     if (AppConstants.MOZ_UPDATER) {
-      var enabledPref = document.getElementById("app.update.enabled");
-      var autoPref = document.getElementById("app.update.auto");
+      var enabledPref = Preferences.get("app.update.enabled");
+      var autoPref = Preferences.get("app.update.auto");
       var radiogroup = document.getElementById("updateRadioGroup");
       switch (radiogroup.value) {
         case "auto":      // 1. Automatically install updates for Desktop only
@@ -2261,7 +2390,7 @@ var gMainPane = {
   readUseDownloadDir() {
     var downloadFolder = document.getElementById("downloadFolder");
     var chooseFolder = document.getElementById("chooseFolder");
-    var preference = document.getElementById("browser.download.useDownloadDir");
+    var preference = Preferences.get("browser.download.useDownloadDir");
     downloadFolder.disabled = !preference.value || preference.locked;
     chooseFolder.disabled = !preference.value || preference.locked;
 
@@ -2280,7 +2409,7 @@ var gMainPane = {
   async chooseFolderTask() {
     let bundlePreferences = document.getElementById("bundlePreferences");
     let title = bundlePreferences.getString("chooseDownloadFolderTitle");
-    let folderListPref = document.getElementById("browser.download.folderList");
+    let folderListPref = Preferences.get("browser.download.folderList");
     let currentDirPref = await this._indexToFolder(folderListPref.value);
     let defDownloads = await this._indexToFolder(1);
     let fp = Components.classes["@mozilla.org/filepicker;1"].
@@ -2304,7 +2433,7 @@ var gMainPane = {
       return;
     }
 
-    let downloadDirPref = document.getElementById("browser.download.dir");
+    let downloadDirPref = Preferences.get("browser.download.dir");
     downloadDirPref.value = fp.file;
     folderListPref.value = await this._folderToIndex(fp.file);
     // Note, the real prefs will not be updated yet, so dnld manager's
@@ -2325,10 +2454,10 @@ var gMainPane = {
   },
 
   async displayDownloadDirPrefTask() {
-    var folderListPref = document.getElementById("browser.download.folderList");
+    var folderListPref = Preferences.get("browser.download.folderList");
     var bundlePreferences = document.getElementById("bundlePreferences");
     var downloadFolder = document.getElementById("downloadFolder");
-    var currentDirPref = document.getElementById("browser.download.dir");
+    var currentDirPref = Preferences.get("browser.download.dir");
 
     // Used in defining the correct path to the folder icon.
     var ios = Components.classes["@mozilla.org/network/io-service;1"]
@@ -2419,7 +2548,7 @@ var gMainPane = {
       case 1:
         return this._getDownloadsFolder("Downloads");
     }
-    var currentDirPref = document.getElementById("browser.download.dir");
+    var currentDirPref = Preferences.get("browser.download.dir");
     return currentDirPref.value;
   }
 };
@@ -2825,16 +2954,16 @@ FeedHandlerInfo.prototype = {
   },
 
   get preferredApplicationHandler() {
-    switch (this.element(this._prefSelectedReader).value) {
+    switch (Preferences.get(this._prefSelectedReader).value) {
       case "client":
-        var file = this.element(this._prefSelectedApp).value;
+        var file = Preferences.get(this._prefSelectedApp).value;
         if (file)
           return getLocalHandlerApp(file);
 
         return null;
 
       case "web":
-        var uri = this.element(this._prefSelectedWeb).value;
+        var uri = Preferences.get(this._prefSelectedWeb).value;
         if (!uri)
           return null;
         return this._converterSvc.getWebContentHandlerByURI(this.type, uri);
@@ -2850,11 +2979,11 @@ FeedHandlerInfo.prototype = {
 
   set preferredApplicationHandler(aNewValue) {
     if (aNewValue instanceof Ci.nsILocalHandlerApp) {
-      this.element(this._prefSelectedApp).value = aNewValue.executable;
-      this.element(this._prefSelectedReader).value = "client";
+      Preferences.get(this._prefSelectedApp).value = aNewValue.executable;
+      Preferences.get(this._prefSelectedReader).value = "client";
     } else if (aNewValue instanceof Ci.nsIWebContentHandlerInfo) {
-      this.element(this._prefSelectedWeb).value = aNewValue.uri;
-      this.element(this._prefSelectedReader).value = "web";
+      Preferences.get(this._prefSelectedWeb).value = aNewValue.uri;
+      Preferences.get(this._prefSelectedReader).value = "web";
       // Make the web handler be the new "auto handler" for feeds.
       // Note: we don't have to unregister the auto handler when the user picks
       // a non-web handler (local app, Live Bookmarks, etc.) because the service
@@ -2914,7 +3043,7 @@ FeedHandlerInfo.prototype = {
     // only a single path.  But we display all the local apps the user chooses
     // while the prefpane is open, only dropping the list when the user closes
     // the prefpane, for maximum usability and consistency with other types.
-    var preferredAppFile = this.element(this._prefSelectedApp).value;
+    var preferredAppFile = Preferences.get(this._prefSelectedApp).value;
     if (preferredAppFile) {
       let preferredApp = getLocalHandlerApp(preferredAppFile);
       let defaultApp = this._defaultApplicationHandler;
@@ -2982,7 +3111,7 @@ FeedHandlerInfo.prototype = {
 
   // What to do with content of this type.
   get preferredAction() {
-    switch (this.element(this._prefSelectedAction).value) {
+    switch (Preferences.get(this._prefSelectedAction).value) {
 
       case "bookmarks":
         return Ci.nsIHandlerInfo.handleInternally;
@@ -3020,31 +3149,31 @@ FeedHandlerInfo.prototype = {
     switch (aNewValue) {
 
       case Ci.nsIHandlerInfo.handleInternally:
-        this.element(this._prefSelectedReader).value = "bookmarks";
+        Preferences.get(this._prefSelectedReader).value = "bookmarks";
         break;
 
       case Ci.nsIHandlerInfo.useHelperApp:
-        this.element(this._prefSelectedAction).value = "reader";
+        Preferences.get(this._prefSelectedAction).value = "reader";
         // The controller has already set preferredApplicationHandler
         // to the new helper app.
         break;
 
       case Ci.nsIHandlerInfo.useSystemDefault:
-        this.element(this._prefSelectedAction).value = "reader";
+        Preferences.get(this._prefSelectedAction).value = "reader";
         this.preferredApplicationHandler = this._defaultApplicationHandler;
         break;
     }
   },
 
   get alwaysAskBeforeHandling() {
-    return this.element(this._prefSelectedAction).value == "ask";
+    return Preferences.get(this._prefSelectedAction).value == "ask";
   },
 
   set alwaysAskBeforeHandling(aNewValue) {
     if (aNewValue == true)
-      this.element(this._prefSelectedAction).value = "ask";
+      Preferences.get(this._prefSelectedAction).value = "ask";
     else
-      this.element(this._prefSelectedAction).value = "reader";
+      Preferences.get(this._prefSelectedAction).value = "reader";
   },
 
   // Whether or not we are currently storing the action selected by the user.
diff --git a/browser/components/preferences/in-content-new/main.xul b/browser/components/preferences/in-content-new/main.xul
index 45360f50a1b1..aa4bf21ba2b0 100644
--- a/browser/components/preferences/in-content-new/main.xul
+++ b/browser/components/preferences/in-content-new/main.xul
@@ -16,261 +16,6 @@
 
 <stringbundle id="bundlePreferences" src="chrome://browser/locale/preferences.properties"/>
 
-<preferences id="mainPreferences" hidden="true" data-category="paneGeneral">
-
-#ifdef E10S_TESTING_ONLY
-    <preference id="browser.tabs.remote.autostart"
-                name="browser.tabs.remote.autostart"
-                type="bool"/>
-    <preference id="e10sTempPref"
-                name="browser.tabs.remote.autostart.2"
-                type="bool"/>
-    <preference id="e10sForceEnable"
-                name="browser.tabs.remote.force-enable"
-                type="bool"/>
-#endif
-
-    <!-- Startup -->
-    <preference id="browser.startup.page"
-                name="browser.startup.page"
-                type="int"/>
-    <preference id="browser.startup.homepage"
-                name="browser.startup.homepage"
-                type="wstring"/>
-
-#ifdef HAVE_SHELL_SERVICE
-    <preference id="browser.shell.checkDefaultBrowser"
-                name="browser.shell.checkDefaultBrowser"
-                type="bool"/>
-
-    <preference id="pref.general.disable_button.default_browser"
-                name="pref.general.disable_button.default_browser"
-                type="bool"/>
-#endif
-
-    <preference id="pref.browser.homepage.disable_button.current_page"
-                name="pref.browser.homepage.disable_button.current_page"
-                type="bool"/>
-    <preference id="pref.browser.homepage.disable_button.bookmark_page"
-                name="pref.browser.homepage.disable_button.bookmark_page"
-                type="bool"/>
-    <preference id="pref.browser.homepage.disable_button.restore_default"
-                name="pref.browser.homepage.disable_button.restore_default"
-                type="bool"/>
-
-    <preference id="browser.privatebrowsing.autostart"
-                name="browser.privatebrowsing.autostart"
-                type="bool"/>
-
-    <!-- Downloads -->
-    <preference id="browser.download.useDownloadDir"
-                name="browser.download.useDownloadDir"
-                type="bool"/>
-
-    <preference id="browser.download.folderList"
-                name="browser.download.folderList"
-                type="int"/>
-    <preference id="browser.download.dir"
-                name="browser.download.dir"
-                type="file"/>
-    <!-- Tab preferences
-    Preferences:
-
-    browser.link.open_newwindow
-        1 opens such links in the most recent window or tab,
-        2 opens such links in a new window,
-        3 opens such links in a new tab
-    browser.tabs.loadInBackground
-    - true if display should switch to a new tab which has been opened from a
-      link, false if display shouldn't switch
-    browser.tabs.warnOnClose
-    - true if when closing a window with multiple tabs the user is warned and
-      allowed to cancel the action, false to just close the window
-    browser.tabs.warnOnOpen
-    - true if the user should be warned if he attempts to open a lot of tabs at
-      once (e.g. a large folder of bookmarks), false otherwise
-    browser.taskbar.previews.enable
-    - true if tabs are to be shown in the Windows 7 taskbar
-    -->
-
-    <preference id="browser.link.open_newwindow"
-                name="browser.link.open_newwindow"
-                type="int"/>
-    <preference id="browser.tabs.loadInBackground"
-                name="browser.tabs.loadInBackground"
-                type="bool"
-                inverted="true"/>
-    <preference id="browser.tabs.warnOnClose"
-                name="browser.tabs.warnOnClose"
-                type="bool"/>
-    <preference id="browser.tabs.warnOnOpen"
-                name="browser.tabs.warnOnOpen"
-                type="bool"/>
-    <preference id="browser.sessionstore.restore_on_demand"
-                name="browser.sessionstore.restore_on_demand"
-                type="bool"/>
-#ifdef XP_WIN
-    <preference id="browser.taskbar.previews.enable"
-                name="browser.taskbar.previews.enable"
-                type="bool"/>
-#endif
-    <preference id="browser.ctrlTab.previews"
-                name="browser.ctrlTab.previews"
-                type="bool"/>
-
-  <!-- Fonts -->
-  <preference id="font.language.group"
-              name="font.language.group"
-              type="wstring"/>
-
-  <!-- Languages -->
-  <preference id="browser.translation.detectLanguage"
-              name="browser.translation.detectLanguage"
-              type="bool"/>
-
-  <!-- General tab -->
-
-  <!-- Accessibility
-   * accessibility.browsewithcaret
-     - true enables keyboard navigation and selection within web pages using a
-       visible caret, false uses normal keyboard navigation with no caret
-   * accessibility.typeaheadfind
-     - when set to true, typing outside text areas and input boxes will
-       automatically start searching for what's typed within the current
-       document; when set to false, no search action happens -->
-  <preference id="accessibility.browsewithcaret"
-              name="accessibility.browsewithcaret"
-              type="bool"/>
-  <preference id="accessibility.typeaheadfind"
-              name="accessibility.typeaheadfind"
-              type="bool"/>
-  <preference id="accessibility.blockautorefresh"
-              name="accessibility.blockautorefresh"
-              type="bool"/>
-#ifdef XP_WIN
-  <preference id="ui.osk.enabled"
-              name="ui.osk.enabled"
-              type="bool"/>
-#endif
-  <!-- Browsing
-   * general.autoScroll
-     - when set to true, clicking the scroll wheel on the mouse activates a
-       mouse mode where moving the mouse down scrolls the document downward with
-       speed correlated with the distance of the cursor from the original
-       position at which the click occurred (and likewise with movement upward);
-       if false, this behavior is disabled
-   * general.smoothScroll
-     - set to true to enable finer page scrolling than line-by-line on page-up,
-       page-down, and other such page movements -->
-  <preference id="general.autoScroll"
-              name="general.autoScroll"
-              type="bool"/>
-  <preference id="general.smoothScroll"
-              name="general.smoothScroll"
-              type="bool"/>
-  <preference id="layout.spellcheckDefault"
-              name="layout.spellcheckDefault"
-              type="int"/>
-
-  <preference id="toolkit.telemetry.enabled"
-              name="toolkit.telemetry.enabled"
-              type="bool"/>
-
-  <preference id="browser.preferences.defaultPerformanceSettings.enabled"
-              name="browser.preferences.defaultPerformanceSettings.enabled"
-              type="bool"/>
-
-  <preference id="dom.ipc.processCount"
-              name="dom.ipc.processCount"
-              type="int"/>
-
-  <preference id="dom.ipc.processCount.web"
-              name="dom.ipc.processCount.web"
-              type="int"/>
-
-  <preference id="layers.acceleration.disabled"
-              name="layers.acceleration.disabled"
-              type="bool"
-              inverted="true"/>
-
-  <!-- Files and Applications -->
-  <preference id="browser.feeds.handler"
-              name="browser.feeds.handler"
-              type="string"/>
-  <preference id="browser.feeds.handler.default"
-              name="browser.feeds.handler.default"
-              type="string"/>
-  <preference id="browser.feeds.handlers.application"
-              name="browser.feeds.handlers.application"
-              type="file"/>
-  <preference id="browser.feeds.handlers.webservice"
-              name="browser.feeds.handlers.webservice"
-              type="string"/>
-
-  <preference id="browser.videoFeeds.handler"
-              name="browser.videoFeeds.handler"
-              type="string"/>
-  <preference id="browser.videoFeeds.handler.default"
-              name="browser.videoFeeds.handler.default"
-              type="string"/>
-  <preference id="browser.videoFeeds.handlers.application"
-              name="browser.videoFeeds.handlers.application"
-              type="file"/>
-  <preference id="browser.videoFeeds.handlers.webservice"
-              name="browser.videoFeeds.handlers.webservice"
-              type="string"/>
-
-  <preference id="browser.audioFeeds.handler"
-              name="browser.audioFeeds.handler"
-              type="string"/>
-  <preference id="browser.audioFeeds.handler.default"
-              name="browser.audioFeeds.handler.default"
-              type="string"/>
-  <preference id="browser.audioFeeds.handlers.application"
-              name="browser.audioFeeds.handlers.application"
-              type="file"/>
-  <preference id="browser.audioFeeds.handlers.webservice"
-              name="browser.audioFeeds.handlers.webservice"
-              type="string"/>
-
-  <preference id="pref.downloads.disable_button.edit_actions"
-              name="pref.downloads.disable_button.edit_actions"
-              type="bool"/>
-
-  <!-- DRM content -->
-  <preference id="media.eme.enabled"
-              name="media.eme.enabled"
-              type="bool"/>
-
-  <!-- Update -->
-  <preference id="browser.preferences.advanced.selectedTabIndex"
-              name="browser.preferences.advanced.selectedTabIndex"
-              type="int"/>
-
-#ifdef MOZ_UPDATER
-  <preference id="app.update.enabled"
-              name="app.update.enabled"
-              type="bool"/>
-  <preference id="app.update.auto"
-              name="app.update.auto"
-              type="bool"/>
-
-  <preference id="app.update.disable_button.showUpdateHistory"
-              name="app.update.disable_button.showUpdateHistory"
-              type="bool"/>
-
-#ifdef MOZ_MAINTENANCE_SERVICE
-  <preference id="app.update.service.enabled"
-              name="app.update.service.enabled"
-              type="bool"/>
-#endif
-#endif
-
-  <preference id="browser.search.update"
-              name="browser.search.update"
-              type="bool"/>
-</preferences>
-
 <hbox id="generalCategory"
       class="subcategory"
       hidden="true"
diff --git a/browser/components/preferences/in-content-new/preferences.js b/browser/components/preferences/in-content-new/preferences.js
index 43744466612d..11b612f057b4 100644
--- a/browser/components/preferences/in-content-new/preferences.js
+++ b/browser/components/preferences/in-content-new/preferences.js
@@ -11,6 +11,7 @@
 /* import-globals-from sync.js */
 /* import-globals-from findInPage.js */
 /* import-globals-from ../../../base/content/utilityOverlay.js */
+/* import-globals-from ../../../../toolkit/content/preferencesBindings.js */
 
 "use strict";
 
@@ -88,6 +89,8 @@ function init_all() {
   let helpUrl = Services.urlFormatter.formatURLPref("app.support.baseURL") + "preferences";
   helpButton.setAttribute("href", helpUrl);
 
+  new PrefPane(document.getElementById("mainPrefPane"));
+
   // Wait until initialization of all preferences are complete before
   // notifying observers that the UI is now ready.
   Services.obs.notifyObservers(window, "advanced-pane-loaded");
@@ -253,14 +256,6 @@ function search(aQuery, aAttribute, aSubquery, aSubAttribute) {
   }
 }
 
-function helpButtonCommand() {
-  let pane = history.state;
-  let categories = document.getElementById("categories");
-  let helpTopic = categories.querySelector(".category[value=" + pane + "]")
-                            .getAttribute("helpTopic");
-  openHelpLink(helpTopic);
-}
-
 function friendlyPrefCategoryNameToInternalName(aName) {
   if (aName.startsWith("pane"))
     return aName;
diff --git a/browser/components/preferences/in-content-new/preferences.xul b/browser/components/preferences/in-content-new/preferences.xul
index 668427fcebec..de8510a9e34b 100644
--- a/browser/components/preferences/in-content-new/preferences.xul
+++ b/browser/components/preferences/in-content-new/preferences.xul
@@ -101,6 +101,8 @@
   <script type="application/javascript"
           src="chrome://browser/content/utilityOverlay.js"/>
   <script type="application/javascript"
+          src="chrome://global/content/preferencesBindings.js"/>
+  <script type="application/javascript"
           src="chrome://browser/content/preferences/in-content-new/preferences.js"/>
   <script src="chrome://browser/content/preferences/in-content-new/findInPage.js"/>
   <script src="chrome://browser/content/preferences/in-content-new/subdialogs.js"/>
@@ -185,14 +187,14 @@
         <hbox class="search-container" pack="end">
           <textbox type="search" id="searchInput" hidden="true" clickSelectsAll="true"/>
         </hbox>
-        <prefpane id="mainPrefPane">
+        <vbox id="mainPrefPane" class="prefpane">
 #include searchResults.xul
 #include main.xul
 #include search.xul
 #include privacy.xul
 #include containers.xul
 #include sync.xul
-        </prefpane>
+        </vbox>
       </vbox>
     </vbox>
   </hbox>
diff --git a/browser/components/preferences/in-content-new/privacy.js b/browser/components/preferences/in-content-new/privacy.js
index 48e0f6682744..10e446e529f9 100644
--- a/browser/components/preferences/in-content-new/privacy.js
+++ b/browser/components/preferences/in-content-new/privacy.js
@@ -31,9 +31,95 @@ XPCOMUtils.defineLazyGetter(this, "AlertsServiceDND", function() {
   }
 });
 
-var gPrivacyPane = {
-  _pane: null,
+window.addEventListener("DOMContentLoaded", () => {
+  Preferences.addAll([
+    { id: "privacy.userContext.enabled", type: "bool" },
+
+    // Tracking
+    { id: "privacy.trackingprotection.enabled", type: "bool" },
+    { id: "privacy.trackingprotection.pbmode.enabled", type: "bool" },
+
+    // Button prefs
+    { id: "pref.privacy.disable_button.cookie_exceptions", type: "bool" },
+    { id: "pref.privacy.disable_button.view_cookies", type: "bool" },
+    { id: "pref.privacy.disable_button.change_blocklist", type: "bool" },
+    { id: "pref.privacy.disable_button.tracking_protection_exceptions", type: "bool" },
+
+    // Location Bar
+    { id: "browser.urlbar.autocomplete.enabled", type: "bool" },
+    { id: "browser.urlbar.suggest.bookmark", type: "bool" },
+    { id: "browser.urlbar.suggest.history", type: "bool" },
+    { id: "browser.urlbar.suggest.openpage", type: "bool" },
+
+    // History
+    { id: "places.history.enabled", type: "bool" },
+    { id: "browser.formfill.enable", type: "bool" },
+    { id: "privacy.history.custom", type: "bool" },
+    // Cookies
+    { id: "network.cookie.cookieBehavior", type: "int" },
+    { id: "network.cookie.lifetimePolicy", type: "int" },
+    { id: "network.cookie.blockFutureCookies", type: "bool" },
+    // Clear Private Data
+    { id: "privacy.sanitize.sanitizeOnShutdown", type: "bool" },
+    { id: "privacy.sanitize.timeSpan", type: "int" },
+    // Private Browsing
+    { id: "browser.privatebrowsing.autostart", type: "bool" },
+    // Do not track
+    { id: "privacy.donottrackheader.enabled", type: "bool" },
+
+    // Popups
+    { id: "dom.disable_open_during_load", type: "bool" },
+    // Passwords
+    { id: "signon.rememberSignons", type: "bool" },
+
+    // Buttons
+    { id: "pref.privacy.disable_button.view_passwords", type: "bool" },
+    { id: "pref.privacy.disable_button.view_passwords_exceptions", type: "bool" },
+
+    /* Certificates tab
+     * security.default_personal_cert
+     *   - a string:
+     *       "Select Automatically"   select a certificate automatically when a site
+     *                                requests one
+     *       "Ask Every Time"         present a dialog to the user so he can select
+     *                                the certificate to use on a site which
+     *                                requests one
+     */
+    { id: "security.default_personal_cert", type: "string" },
+
+    { id: "security.disable_button.openCertManager", type: "bool" },
+
+    { id: "security.disable_button.openDeviceManager", type: "bool" },
+
+    { id: "security.OCSP.enabled", type: "int" },
+
+    // Add-ons, malware, phishing
+    { id: "xpinstall.whitelist.required", type: "bool" },
+
+    { id: "browser.safebrowsing.malware.enabled", type: "bool" },
+    { id: "browser.safebrowsing.phishing.enabled", type: "bool" },
+
+    { id: "browser.safebrowsing.downloads.enabled", type: "bool" },
+
+    { id: "urlclassifier.malwareTable", type: "string" },
+
+    { id: "browser.safebrowsing.downloads.remote.block_potentially_unwanted", type: "bool" },
+    { id: "browser.safebrowsing.downloads.remote.block_uncommon", type: "bool" },
+
+    // Network tab
+    { id: "browser.cache.disk.capacity", type: "int" },
+    { id: "browser.offline-apps.notify", type: "bool" },
+
+    { id: "browser.cache.disk.smart_size.enabled", type: "bool", inverted: "true" },
+  ]);
+
+  // Data Choices tab
+  if (AppConstants.MOZ_CRASHREPORTER) {
+    Preferences.add({ id: "browser.crashReports.unsubmittedCheck.autoSubmit", type: "bool" });
+  }
+}, { once: true, capture: true });
 
+var gPrivacyPane = {
   /**
    * Whether the use has selected the auto-start private browsing mode in the UI.
    */
@@ -101,10 +187,10 @@ var gPrivacyPane = {
     this._initTrackingProtectionPBM();
     this._initAutocomplete();
 
-    setEventListener("privacy.sanitize.sanitizeOnShutdown", "change",
-                     gPrivacyPane._updateSanitizeSettingsButton);
-    setEventListener("browser.privatebrowsing.autostart", "change",
-                     gPrivacyPane.updatePrivacyMicroControls);
+    Preferences.get("privacy.sanitize.sanitizeOnShutdown").on("change",
+                     gPrivacyPane._updateSanitizeSettingsButton.bind(gPrivacyPane));
+    Preferences.get("browser.privatebrowsing.autostart").on("change",
+                     gPrivacyPane.updatePrivacyMicroControls.bind(gPrivacyPane));
     setEventListener("historyMode", "command", function() {
       gPrivacyPane.updateHistoryModePane();
       gPrivacyPane.updateHistoryModePrefs();
@@ -154,7 +240,6 @@ var gPrivacyPane = {
     setEventListener("clearCacheButton", "command",
                      gPrivacyPane.clearCache);
 
-    this._pane = document.getElementById("panePrivacy");
     this._initMasterPasswordUI();
     this._initSafeBrowsing();
     this.updateCacheSizeInputField();
@@ -314,8 +399,8 @@ var gPrivacyPane = {
    * Selects the right item of the Tracking Protection radiogroup.
    */
   trackingProtectionReadPrefs() {
-    let enabledPref = document.getElementById("privacy.trackingprotection.enabled");
-    let pbmPref = document.getElementById("privacy.trackingprotection.pbmode.enabled");
+    let enabledPref = Preferences.get("privacy.trackingprotection.enabled");
+    let pbmPref = Preferences.get("privacy.trackingprotection.pbmode.enabled");
     let radiogroup = document.getElementById("trackingProtectionRadioGroup");
 
     // Global enable takes precedence over enabled in Private Browsing.
@@ -332,8 +417,8 @@ var gPrivacyPane = {
    * Sets the pref values based on the selected item of the radiogroup.
    */
   trackingProtectionWritePrefs() {
-    let enabledPref = document.getElementById("privacy.trackingprotection.enabled");
-    let pbmPref = document.getElementById("privacy.trackingprotection.pbmode.enabled");
+    let enabledPref = Preferences.get("privacy.trackingprotection.enabled");
+    let pbmPref = Preferences.get("privacy.trackingprotection.pbmode.enabled");
     let radiogroup = document.getElementById("trackingProtectionRadioGroup");
 
     switch (radiogroup.value) {
@@ -399,7 +484,7 @@ var gPrivacyPane = {
    */
   _checkHistoryValues(aPrefs) {
     for (let pref of Object.keys(aPrefs)) {
-      if (document.getElementById(pref).value != aPrefs[pref])
+      if (Preferences.get(pref).value != aPrefs[pref])
         return false;
     }
     return true;
@@ -410,7 +495,7 @@ var gPrivacyPane = {
    */
   initializeHistoryMode() {
     let mode;
-    let getVal = aPref => document.getElementById(aPref).value;
+    let getVal = aPref => Preferences.get(aPref).value;
 
     if (getVal("privacy.history.custom"))
       mode = "custom";
@@ -442,7 +527,7 @@ var gPrivacyPane = {
       break;
     }
     document.getElementById("historyPane").selectedIndex = selectedIndex;
-    document.getElementById("privacy.history.custom").value = selectedIndex == 2;
+    Preferences.get("privacy.history.custom").value = selectedIndex == 2;
   },
 
   /**
@@ -450,25 +535,25 @@ var gPrivacyPane = {
    * micro-management prefs based on the history mode menulist
    */
   updateHistoryModePrefs() {
-    let pref = document.getElementById("browser.privatebrowsing.autostart");
+    let pref = Preferences.get("browser.privatebrowsing.autostart");
     switch (document.getElementById("historyMode").value) {
     case "remember":
       if (pref.value)
         pref.value = false;
 
       // select the remember history option if needed
-      document.getElementById("places.history.enabled").value = true;
+      Preferences.get("places.history.enabled").value = true;
 
       // select the remember forms history option
-      document.getElementById("browser.formfill.enable").value = true;
+      Preferences.get("browser.formfill.enable").value = true;
 
       // select the allow cookies option
-      document.getElementById("network.cookie.cookieBehavior").value = 0;
+      Preferences.get("network.cookie.cookieBehavior").value = 0;
       // select the cookie lifetime policy option
-      document.getElementById("network.cookie.lifetimePolicy").value = 0;
+      Preferences.get("network.cookie.lifetimePolicy").value = 0;
 
       // select the clear on close option
-      document.getElementById("privacy.sanitize.sanitizeOnShutdown").value = false;
+      Preferences.get("privacy.sanitize.sanitizeOnShutdown").value = false;
       break;
     case "dontremember":
       if (!pref.value)
@@ -496,13 +581,13 @@ var gPrivacyPane = {
           }
         }
 
-        let preference = preferenceId ? document.getElementById(preferenceId) : {};
+        let preference = preferenceId ? Preferences.get(preferenceId) : {};
         control.disabled = disabled || preference.locked;
       });
 
       // adjust the cookie controls status
       this.readAcceptCookies();
-      let lifetimePolicy = document.getElementById("network.cookie.lifetimePolicy").value;
+      let lifetimePolicy = Preferences.get("network.cookie.lifetimePolicy").value;
       if (lifetimePolicy != Ci.nsICookieService.ACCEPT_NORMALLY &&
           lifetimePolicy != Ci.nsICookieService.ACCEPT_SESSION &&
           lifetimePolicy != Ci.nsICookieService.ACCEPT_FOR_N_DAYS) {
@@ -512,13 +597,13 @@ var gPrivacyPane = {
 
       // adjust the checked state of the sanitizeOnShutdown checkbox
       document.getElementById("alwaysClear").checked = disabled ? false :
-        document.getElementById("privacy.sanitize.sanitizeOnShutdown").value;
+        Preferences.get("privacy.sanitize.sanitizeOnShutdown").value;
 
       // adjust the checked state of the remember history checkboxes
       document.getElementById("rememberHistory").checked = disabled ? false :
-        document.getElementById("places.history.enabled").value;
+        Preferences.get("places.history.enabled").value;
       document.getElementById("rememberForms").checked = disabled ? false :
-        document.getElementById("browser.formfill.enable").value;
+        Preferences.get("browser.formfill.enable").value;
 
       if (!disabled) {
         // adjust the Settings button for sanitizeOnShutdown
@@ -544,7 +629,7 @@ var gPrivacyPane = {
   updateAutostart() {
       let mode = document.getElementById("historyMode");
       let autoStart = document.getElementById("privateBrowsingAutoStart");
-      let pref = document.getElementById("browser.privatebrowsing.autostart");
+      let pref = Preferences.get("browser.privatebrowsing.autostart");
       if ((mode.value == "custom" && this._lastCheckState == autoStart.checked) ||
           (mode.value == "remember" && !this._lastCheckState) ||
           (mode.value == "dontremember" && this._lastCheckState)) {
@@ -656,7 +741,7 @@ var gPrivacyPane = {
    * if cookies are enabled.
    */
   readAcceptCookies() {
-    var pref = document.getElementById("network.cookie.cookieBehavior");
+    var pref = Preferences.get("network.cookie.cookieBehavior");
     var acceptThirdPartyLabel = document.getElementById("acceptThirdPartyLabel");
     var acceptThirdPartyMenu = document.getElementById("acceptThirdPartyMenu");
     var keepUntil = document.getElementById("keepUntil");
@@ -690,7 +775,7 @@ var gPrivacyPane = {
    * Converts between network.cookie.cookieBehavior and the third-party cookie UI
    */
   readAcceptThirdPartyCookies() {
-    var pref = document.getElementById("network.cookie.cookieBehavior");
+    var pref = Preferences.get("network.cookie.cookieBehavior");
     switch (pref.value) {
       case 0:
         return "always";
@@ -788,7 +873,7 @@ var gPrivacyPane = {
    */
   _updateSanitizeSettingsButton() {
     var settingsButton = document.getElementById("clearDataSettings");
-    var sanitizeOnShutdownPref = document.getElementById("privacy.sanitize.sanitizeOnShutdown");
+    var sanitizeOnShutdownPref = Preferences.get("privacy.sanitize.sanitizeOnShutdown");
 
     settingsButton.disabled = !sanitizeOnShutdownPref.value;
    },
@@ -806,7 +891,7 @@ var gPrivacyPane = {
     * Enables/disables the Settings button used to configure containers
     */
    readBrowserContainersCheckbox() {
-     var pref = document.getElementById("privacy.userContext.enabled");
+     var pref = Preferences.get("privacy.userContext.enabled");
      var settings = document.getElementById("browserContainersSettings");
 
      settings.disabled = !pref.value;
@@ -911,7 +996,7 @@ var gPrivacyPane = {
    */
   updateButtons(aButtonID, aPreferenceID) {
     var button = document.getElementById(aButtonID);
-    var preference = document.getElementById(aPreferenceID);
+    var preference = Preferences.get(aPreferenceID);
     button.disabled = preference.value != true;
     return undefined;
   },
@@ -1031,7 +1116,7 @@ var gPrivacyPane = {
    * Browsing mode, the "Remember passwords" UI is useless, so we disable it.
    */
   readSavePasswords() {
-    var pref = document.getElementById("signon.rememberSignons");
+    var pref = Preferences.get("signon.rememberSignons");
     var excepts = document.getElementById("passwordExceptions");
 
     if (PrivateBrowsingUtils.permanentPrivateBrowsing) {
@@ -1049,7 +1134,7 @@ var gPrivacyPane = {
    * or not add-on installation warnings are displayed.
    */
   readWarnAddonInstall() {
-    var warn = document.getElementById("xpinstall.whitelist.required");
+    var warn = Preferences.get("xpinstall.whitelist.required");
     var exceptions = document.getElementById("addonExceptions");
 
     exceptions.disabled = !warn.value;
@@ -1063,14 +1148,14 @@ var gPrivacyPane = {
     let blockDownloads = document.getElementById("blockDownloads");
     let blockUncommonUnwanted = document.getElementById("blockUncommonUnwanted");
 
-    let safeBrowsingPhishingPref = document.getElementById("browser.safebrowsing.phishing.enabled");
-    let safeBrowsingMalwarePref = document.getElementById("browser.safebrowsing.malware.enabled");
+    let safeBrowsingPhishingPref = Preferences.get("browser.safebrowsing.phishing.enabled");
+    let safeBrowsingMalwarePref = Preferences.get("browser.safebrowsing.malware.enabled");
 
-    let blockDownloadsPref = document.getElementById("browser.safebrowsing.downloads.enabled");
-    let malwareTable = document.getElementById("urlclassifier.malwareTable");
+    let blockDownloadsPref = Preferences.get("browser.safebrowsing.downloads.enabled");
+    let malwareTable = Preferences.get("urlclassifier.malwareTable");
 
-    let blockUnwantedPref = document.getElementById("browser.safebrowsing.downloads.remote.block_potentially_unwanted");
-    let blockUncommonPref = document.getElementById("browser.safebrowsing.downloads.remote.block_uncommon");
+    let blockUnwantedPref = Preferences.get("browser.safebrowsing.downloads.remote.block_potentially_unwanted");
+    let blockUncommonPref = Preferences.get("browser.safebrowsing.downloads.remote.block_uncommon");
 
     enableSafeBrowsing.addEventListener("command", function() {
       safeBrowsingPhishingPref.value = enableSafeBrowsing.checked;
@@ -1173,7 +1258,7 @@ var gPrivacyPane = {
    * checked. Otherwise, it should be unchecked.
    */
   readEnableOCSP() {
-    var preference = document.getElementById("security.OCSP.enabled");
+    var preference = Preferences.get("security.OCSP.enabled");
     // This is the case if the preference is the default value.
     if (preference.value === undefined) {
       return true;
@@ -1316,7 +1401,7 @@ var gPrivacyPane = {
   readSmartSizeEnabled() {
     // The smart_size.enabled preference element is inverted="true", so its
     // value is the opposite of the actual pref value
-    var disabled = document.getElementById("browser.cache.disk.smart_size.enabled").value;
+    var disabled = Preferences.get("browser.cache.disk.smart_size.enabled").value;
     this.updateCacheSizeUI(!disabled);
   },
 
@@ -1332,7 +1417,7 @@ var gPrivacyPane = {
    */
   updateCacheSizeInputField() {
     let cacheSizeElem = document.getElementById("cacheSize");
-    let cachePref = document.getElementById("browser.cache.disk.capacity");
+    let cachePref = Preferences.get("browser.cache.disk.capacity");
     cacheSizeElem.value = cachePref.value / 1024;
     if (cachePref.locked)
       cacheSizeElem.disabled = true;
@@ -1346,7 +1431,7 @@ var gPrivacyPane = {
    */
   updateCacheSizePref() {
     let cacheSizeElem = document.getElementById("cacheSize");
-    let cachePref = document.getElementById("browser.cache.disk.capacity");
+    let cachePref = Preferences.get("browser.cache.disk.capacity");
     // Converts the cache size as specified in UI (in MB) to KB.
     let intValue = parseInt(cacheSizeElem.value, 10);
     cachePref.value = isNaN(intValue) ? 0 : intValue * 1024;
@@ -1463,7 +1548,7 @@ var gPrivacyPane = {
   },
 
   readOfflineNotify() {
-    var pref = document.getElementById("browser.offline-apps.notify");
+    var pref = Preferences.get("browser.offline-apps.notify");
     var button = document.getElementById("offlineNotifyExceptions");
     button.disabled = !pref.value;
     return pref.value;
diff --git a/browser/components/preferences/in-content-new/privacy.xul b/browser/components/preferences/in-content-new/privacy.xul
index 10ac0b8006a1..f813d4c97775 100644
--- a/browser/components/preferences/in-content-new/privacy.xul
+++ b/browser/components/preferences/in-content-new/privacy.xul
@@ -7,167 +7,6 @@
 <script type="application/javascript"
         src="chrome://browser/content/preferences/in-content-new/privacy.js"/>
 
-<preferences id="privacyPreferences" hidden="true" data-category="panePrivacy">
-
-  <!-- Tracking -->
-  <preference id="privacy.trackingprotection.enabled"
-              name="privacy.trackingprotection.enabled"
-              type="bool"/>
-  <preference id="privacy.trackingprotection.pbmode.enabled"
-              name="privacy.trackingprotection.pbmode.enabled"
-              type="bool"/>
-
-  <!-- XXX button prefs -->
-  <preference id="pref.privacy.disable_button.cookie_exceptions"
-              name="pref.privacy.disable_button.cookie_exceptions"
-              type="bool"/>
-  <preference id="pref.privacy.disable_button.view_cookies"
-              name="pref.privacy.disable_button.view_cookies"
-              type="bool"/>
-  <preference id="pref.privacy.disable_button.change_blocklist"
-              name="pref.privacy.disable_button.change_blocklist"
-              type="bool"/>
-  <preference id="pref.privacy.disable_button.tracking_protection_exceptions"
-              name="pref.privacy.disable_button.tracking_protection_exceptions"
-              type="bool"/>
-
-  <!-- Location Bar -->
-  <preference id="browser.urlbar.autocomplete.enabled"
-              name="browser.urlbar.autocomplete.enabled"
-              type="bool"/>
-  <preference id="browser.urlbar.suggest.bookmark"
-              name="browser.urlbar.suggest.bookmark"
-              type="bool"/>
-  <preference id="browser.urlbar.suggest.history"
-              name="browser.urlbar.suggest.history"
-              type="bool"/>
-  <preference id="browser.urlbar.suggest.openpage"
-              name="browser.urlbar.suggest.openpage"
-              type="bool"/>
-
-  <!-- History -->
-  <preference id="places.history.enabled"
-              name="places.history.enabled"
-              type="bool"/>
-  <preference id="browser.formfill.enable"
-              name="browser.formfill.enable"
-              type="bool"/>
-  <preference id="privacy.history.custom"
-              name="privacy.history.custom"
-              type="bool"/>
-  <!-- Cookies -->
-  <preference id="network.cookie.cookieBehavior"
-              name="network.cookie.cookieBehavior"
-              type="int"/>
-  <preference id="network.cookie.lifetimePolicy"
-              name="network.cookie.lifetimePolicy"
-              type="int"/>
-  <preference id="network.cookie.blockFutureCookies"
-              name="network.cookie.blockFutureCookies"
-              type="bool"/>
-  <!-- Clear Private Data -->
-  <preference id="privacy.sanitize.sanitizeOnShutdown"
-              name="privacy.sanitize.sanitizeOnShutdown"
-              type="bool"/>
-  <preference id="privacy.sanitize.timeSpan"
-              name="privacy.sanitize.timeSpan"
-              type="int"/>
-  <!-- Private Browsing -->
-  <preference id="browser.privatebrowsing.autostart"
-              name="browser.privatebrowsing.autostart"
-              type="bool"/>
-  <!-- Do not track -->
-  <preference id="privacy.donottrackheader.enabled"
-              name="privacy.donottrackheader.enabled"
-              type="bool"/>
-  <!-- Popups -->
-  <preference id="dom.disable_open_during_load"
-              name="dom.disable_open_during_load"
-              type="bool"/>
-  <!-- Passwords -->
-  <preference id="signon.rememberSignons" name="signon.rememberSignons" type="bool"/>
-
-  <!-- XXX buttons -->
-  <preference id="pref.privacy.disable_button.view_passwords"
-              name="pref.privacy.disable_button.view_passwords"
-              type="bool"/>
-  <preference id="pref.privacy.disable_button.view_passwords_exceptions"
-              name="pref.privacy.disable_button.view_passwords_exceptions"
-              type="bool"/>
-
-  <!-- Certificates tab
-   * security.default_personal_cert
-     - a string:
-         "Select Automatically"   select a certificate automatically when a site
-                                  requests one
-         "Ask Every Time"         present a dialog to the user so he can select
-                                  the certificate to use on a site which
-                                  requests one -->
-  <preference id="security.default_personal_cert"
-              name="security.default_personal_cert"
-              type="string"/>
-
-  <preference id="security.disable_button.openCertManager"
-              name="security.disable_button.openCertManager"
-              type="bool"/>
-
-  <preference id="security.disable_button.openDeviceManager"
-              name="security.disable_button.openDeviceManager"
-              type="bool"/>
-
-  <preference id="security.OCSP.enabled"
-              name="security.OCSP.enabled"
-              type="int"/>
-
-  <!-- Add-ons, malware, phishing -->
-  <preference id="xpinstall.whitelist.required"
-              name="xpinstall.whitelist.required"
-              type="bool"/>
-
-  <preference id="browser.safebrowsing.malware.enabled"
-              name="browser.safebrowsing.malware.enabled"
-              type="bool"/>
-  <preference id="browser.safebrowsing.phishing.enabled"
-              name="browser.safebrowsing.phishing.enabled"
-              type="bool"/>
-
-  <preference id="browser.safebrowsing.downloads.enabled"
-              name="browser.safebrowsing.downloads.enabled"
-              type="bool"/>
-
-  <preference id="urlclassifier.malwareTable"
-              name="urlclassifier.malwareTable"
-              type="string"/>
-
-  <preference id="browser.safebrowsing.downloads.remote.block_potentially_unwanted"
-              name="browser.safebrowsing.downloads.remote.block_potentially_unwanted"
-              type="bool"/>
-  <preference id="browser.safebrowsing.downloads.remote.block_uncommon"
-              name="browser.safebrowsing.downloads.remote.block_uncommon"
-              type="bool"/>
-
-  <!-- Network tab -->
-  <preference id="browser.cache.disk.capacity"
-              name="browser.cache.disk.capacity"
-              type="int"/>
-  <preference id="browser.offline-apps.notify"
-              name="browser.offline-apps.notify"
-              type="bool"/>
-
-  <preference id="browser.cache.disk.smart_size.enabled"
-              name="browser.cache.disk.smart_size.enabled"
-              inverted="true"
-              type="bool"/>
-
-  <!-- Data Choices tab -->
-#ifdef MOZ_CRASHREPORTER
-  <preference id="browser.crashReports.unsubmittedCheck.autoSubmit"
-              name="browser.crashReports.unsubmittedCheck.autoSubmit"
-              type="bool"/>
-#endif
-
-</preferences>
-
 <stringbundle id="bundlePreferences" src="chrome://browser/locale/preferences/preferences.properties"/>
 <stringbundle id="signonBundle" src="chrome://passwordmgr/locale/passwordmgr.properties"/>
 
diff --git a/browser/components/preferences/in-content-new/search.js b/browser/components/preferences/in-content-new/search.js
index 59219756d1ff..fca2ca3a6ce0 100644
--- a/browser/components/preferences/in-content-new/search.js
+++ b/browser/components/preferences/in-content-new/search.js
@@ -8,6 +8,14 @@ Components.utils.import("resource://gre/modules/XPCOMUtils.jsm");
 XPCOMUtils.defineLazyModuleGetter(this, "PlacesUtils",
                                   "resource://gre/modules/PlacesUtils.jsm");
 
+window.addEventListener("DOMContentLoaded", () => {
+  Preferences.addAll([
+    { id: "browser.search.suggest.enabled", type: "bool" },
+    { id: "browser.urlbar.suggest.searches", type: "bool" },
+    { id: "browser.search.hiddenOneOffs", type: "unichar" },
+  ]);
+}, { once: true, capture: true });
+
 const ENGINE_FLAVOR = "text/x-moz-search-engine";
 
 var gEngineView = null;
@@ -46,24 +54,19 @@ var gSearchPane = {
 
     this._initAutocomplete();
 
-    let suggestsPref =
-      document.getElementById("browser.search.suggest.enabled");
-    suggestsPref.addEventListener("change", () => {
-      this.updateSuggestsCheckbox();
-    });
+    let suggestsPref = Preferences.get("browser.search.suggest.enabled");
+    suggestsPref.on("change", this.updateSuggestsCheckbox.bind(this));
     this.updateSuggestsCheckbox();
   },
 
   updateSuggestsCheckbox() {
-    let suggestsPref =
-      document.getElementById("browser.search.suggest.enabled");
+    let suggestsPref = Preferences.get("browser.search.suggest.enabled");
     let permanentPB =
       Services.prefs.getBoolPref("browser.privatebrowsing.autostart");
     let urlbarSuggests = document.getElementById("urlBarSuggestion");
     urlbarSuggests.disabled = !suggestsPref.value || permanentPB;
 
-    let urlbarSuggestsPref =
-      document.getElementById("browser.urlbar.suggest.searches");
+    let urlbarSuggestsPref = Preferences.get("browser.urlbar.suggest.searches");
     urlbarSuggests.checked = urlbarSuggestsPref.value;
     if (urlbarSuggests.disabled) {
       urlbarSuggests.checked = false;
@@ -300,7 +303,7 @@ var gSearchPane = {
       if (!engine.shown)
         hiddenList.push(engine.name);
     }
-    document.getElementById("browser.search.hiddenOneOffs").value =
+    Preferences.get("browser.search.hiddenOneOffs").value =
       hiddenList.join(",");
   },
 
@@ -323,7 +326,7 @@ function onDragEngineStart(event) {
 
 
 function EngineStore() {
-  let pref = document.getElementById("browser.search.hiddenOneOffs").value;
+  let pref = Preferences.get("browser.search.hiddenOneOffs").value;
   this.hiddenList = pref ? pref.split(",") : [];
 
   this._engines = Services.search.getVisibleEngines().map(this._cloneEngine, this);
diff --git a/browser/components/preferences/in-content-new/search.xul b/browser/components/preferences/in-content-new/search.xul
index bd6539afc94a..4518585688d7 100644
--- a/browser/components/preferences/in-content-new/search.xul
+++ b/browser/components/preferences/in-content-new/search.xul
@@ -1,19 +1,3 @@
-    <preferences id="searchPreferences" hidden="true" data-category="paneSearch">
-
-      <preference id="browser.search.suggest.enabled"
-                  name="browser.search.suggest.enabled"
-                  type="bool"/>
-
-      <preference id="browser.urlbar.suggest.searches"
-                  name="browser.urlbar.suggest.searches"
-                  type="bool"/>
-
-      <preference id="browser.search.hiddenOneOffs"
-                  name="browser.search.hiddenOneOffs"
-                  type="unichar"/>
-
-    </preferences>
-
     <script type="application/javascript"
             src="chrome://browser/content/preferences/in-content-new/search.js"/>
 
diff --git a/browser/components/preferences/in-content-new/sync.js b/browser/components/preferences/in-content-new/sync.js
index 52a0c2f9cb25..86382fc7dbce 100644
--- a/browser/components/preferences/in-content-new/sync.js
+++ b/browser/components/preferences/in-content-new/sync.js
@@ -25,6 +25,19 @@ const FXA_LOGIN_UNVERIFIED = 1;
 // We are logged in locally, but the server rejected our credentials.
 const FXA_LOGIN_FAILED = 2;
 
+window.addEventListener("DOMContentLoaded", () => {
+  Preferences.addAll([
+    { id: "engine.addons", name: "services.sync.engine.addons", type: "bool" },
+    { id: "engine.bookmarks", name: "services.sync.engine.bookmarks", type: "bool" },
+    { id: "engine.history", name: "services.sync.engine.history", type: "bool" },
+    { id: "engine.tabs", name: "services.sync.engine.tabs", type: "bool" },
+    { id: "engine.prefs", name: "services.sync.engine.prefs", type: "bool" },
+    { id: "engine.passwords", name: "services.sync.engine.passwords", type: "bool" },
+    { id: "engine.addresses", name: "services.sync.engine.addresses", type: "bool" },
+    { id: "engine.creditcards", name: "services.sync.engine.creditcards", type: "bool" },
+  ]);
+}, { once: true, capture: true });
+
 var gSyncPane = {
   get page() {
     return document.getElementById("weavePrefsDeck").selectedIndex;
diff --git a/browser/components/preferences/in-content-new/sync.xul b/browser/components/preferences/in-content-new/sync.xul
index b7f8583d6957..b48ea8622620 100755
--- a/browser/components/preferences/in-content-new/sync.xul
+++ b/browser/components/preferences/in-content-new/sync.xul
@@ -4,33 +4,6 @@
 
 <!-- Sync panel -->
 
-<preferences id="syncEnginePrefs" hidden="true" data-category="paneSync">
-  <preference id="engine.addons"
-              name="services.sync.engine.addons"
-              type="bool"/>
-  <preference id="engine.bookmarks"
-              name="services.sync.engine.bookmarks"
-              type="bool"/>
-  <preference id="engine.history"
-              name="services.sync.engine.history"
-              type="bool"/>
-  <preference id="engine.tabs"
-              name="services.sync.engine.tabs"
-              type="bool"/>
-  <preference id="engine.prefs"
-              name="services.sync.engine.prefs"
-              type="bool"/>
-  <preference id="engine.passwords"
-              name="services.sync.engine.passwords"
-              type="bool"/>
-  <preference id="engine.addresses"
-              name="services.sync.engine.addresses"
-              type="bool"/>
-  <preference id="engine.creditcards"
-              name="services.sync.engine.creditcards"
-              type="bool"/>
-</preferences>
-
 <script type="application/javascript"
         src="chrome://browser/content/preferences/in-content-new/sync.js"/>
 
diff --git a/browser/components/preferences/in-content-new/tests/browser_basic_rebuild_fonts_test.js b/browser/components/preferences/in-content-new/tests/browser_basic_rebuild_fonts_test.js
index 1ddc577f60a8..b413881ea835 100644
--- a/browser/components/preferences/in-content-new/tests/browser_basic_rebuild_fonts_test.js
+++ b/browser/components/preferences/in-content-new/tests/browser_basic_rebuild_fonts_test.js
@@ -7,8 +7,9 @@ registerCleanupFunction(function() {
 add_task(async function() {
   await openPreferencesViaOpenPreferencesAPI("paneGeneral", {leaveOpen: true});
   let doc = gBrowser.contentDocument;
+  let contentWindow = gBrowser.contentWindow;
   var langGroup = Services.prefs.getComplexValue("font.language.group", Ci.nsIPrefLocalizedString).data
-  is(doc.getElementById("font.language.group").value, langGroup,
+  is(contentWindow.Preferences.get("font.language.group").value, langGroup,
      "Language group should be set correctly.");
 
   let defaultFontType = Services.prefs.getCharPref("font.default." + langGroup);
diff --git a/browser/components/preferences/in-content-new/tests/browser_sanitizeOnShutdown_prefLocked.js b/browser/components/preferences/in-content-new/tests/browser_sanitizeOnShutdown_prefLocked.js
index 5332da31d28c..144055833fcb 100644
--- a/browser/components/preferences/in-content-new/tests/browser_sanitizeOnShutdown_prefLocked.js
+++ b/browser/components/preferences/in-content-new/tests/browser_sanitizeOnShutdown_prefLocked.js
@@ -13,7 +13,7 @@ function testPrefStateMatchesLockedState() {
   switchToCustomHistoryMode(doc);
 
   let checkbox = doc.getElementById("alwaysClear");
-  let preference = doc.getElementById("privacy.sanitize.sanitizeOnShutdown");
+  let preference = win.Preferences.get("privacy.sanitize.sanitizeOnShutdown");
   is(checkbox.disabled, preference.locked, "Always Clear checkbox should be enabled when preference is not locked.");
 
   Services.prefs.clearUserPref("privacy.history.custom");
diff --git a/browser/components/preferences/in-content-new/tests/privacypane_tests_perwindow.js b/browser/components/preferences/in-content-new/tests/privacypane_tests_perwindow.js
index 21f3f68831d6..d9f98b98cf51 100644
--- a/browser/components/preferences/in-content-new/tests/privacypane_tests_perwindow.js
+++ b/browser/components/preferences/in-content-new/tests/privacypane_tests_perwindow.js
@@ -220,7 +220,7 @@ function test_dependent_prefs(win) {
   function expect_checked(checked) {
     controls.forEach(function(control) {
       is(control.checked, checked,
-        control.getAttribute("id") + " should " + (checked ? "not " : "") + "be checked");
+        control.getAttribute("id") + " should " + (checked ? "" : "not ") + "be checked");
     });
 
     is(thirdPartyCookieMenu.value == "always" || thirdPartyCookieMenu.value == "visited", checked, "third-party cookies should " + (checked ? "not " : "") + "be limited");
@@ -311,13 +311,13 @@ function test_locbar_suggestion_retention(suggestion, autocomplete) {
 const gPrefCache = new Map();
 
 function cache_preferences(win) {
-  let prefs = win.document.querySelectorAll("#privacyPreferences > preference");
+  let prefs = win.Preferences.getAll();
   for (let pref of prefs)
     gPrefCache.set(pref.name, pref.value);
 }
 
 function reset_preferences(win) {
-  let prefs = win.document.querySelectorAll("#privacyPreferences > preference");
+  let prefs = win.Preferences.getAll();
   for (let pref of prefs)
     pref.value = gPrefCache.get(pref.name);
 }
diff --git a/browser/themes/linux/preferences/preferences.css b/browser/themes/linux/preferences/preferences.css
index 57558271c193..b33bb149fbb6 100644
--- a/browser/themes/linux/preferences/preferences.css
+++ b/browser/themes/linux/preferences/preferences.css
@@ -5,6 +5,11 @@
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
 
+/* Pref Pane */
+.prefpane {
+  padding: 8px;
+}
+
 /* General Pane */
 #useFirefoxSync,
 #getStarted {
diff --git a/browser/themes/osx/preferences/preferences.css b/browser/themes/osx/preferences/preferences.css
index d70b3a15cce9..ed3f0a00b61c 100644
--- a/browser/themes/osx/preferences/preferences.css
+++ b/browser/themes/osx/preferences/preferences.css
@@ -15,7 +15,6 @@
   font: -moz-dialog;
 }
 
-/* ----- APPLICATIONS PREFPANE ----- */
 description {
   font: small-caption;
   font-weight: normal;
@@ -23,7 +22,15 @@ description {
   margin-bottom: 4px !important;
 }
 
-prefpane .groupbox-body {
+.prefpane {
+  padding-top: 12px;
+  padding-bottom: 12px;
+  padding-inline-start: 0;
+  padding-inline-end: 12px;
+}
+
+prefpane .groupbox-body,
+.prefpane .groupbox-body {
   -moz-appearance: none;
   padding: 8px 4px 4px 4px;
 }
diff --git a/browser/themes/windows/preferences/preferences.css b/browser/themes/windows/preferences/preferences.css
index a40c913ee0f8..96f33ccf50e1 100644
--- a/browser/themes/windows/preferences/preferences.css
+++ b/browser/themes/windows/preferences/preferences.css
@@ -5,6 +5,14 @@
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
 
+/* Pref Pane */
+.prefpane {
+  padding-top: 8px;
+  padding-bottom: 10px;
+  padding-inline-start: 8px;
+  padding-inline-end: 10px;
+}
+
 /* General Pane */
 
 #useFirefoxSync,
diff --git a/toolkit/content/jar.mn b/toolkit/content/jar.mn
index d724bd084d9a..1138f140dfe1 100644
--- a/toolkit/content/jar.mn
+++ b/toolkit/content/jar.mn
@@ -58,6 +58,7 @@ toolkit.jar:
    content/global/filepicker.properties
    content/global/globalOverlay.js
    content/global/mozilla.xhtml
+   content/global/preferencesBindings.js
    content/global/process-content.js
    content/global/resetProfile.css
    content/global/resetProfile.js
diff --git a/toolkit/content/preferencesBindings.js b/toolkit/content/preferencesBindings.js
new file mode 100644
index 000000000000..448ccc73c788
--- /dev/null
+++ b/toolkit/content/preferencesBindings.js
@@ -0,0 +1,519 @@
+/* - This Source Code Form is subject to the terms of the Mozilla Public
+   - License, v. 2.0. If a copy of the MPL was not distributed with this file,
+   - You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+Components.utils.import("resource://gre/modules/EventEmitter.jsm");
+
+// Attach Preferences to the window object so tests have access to it.
+window.Preferences = {
+  all: {},
+
+  _add(prefInfo) {
+    if (this.all[prefInfo.id]) {
+      throw new Error(`preference with id '${prefInfo.id}' already added`);
+    }
+    const pref = new Preference(prefInfo);
+    this.all[pref.id] = pref;
+    return pref;
+  },
+
+  add(prefInfo) {
+    const pref = this._add(prefInfo);
+    pref.updateElements();
+    return pref;
+  },
+
+  addAll(prefInfos) {
+    for (const prefInfo of prefInfos) {
+      this._add(prefInfo);
+    }
+    for (const pref of this.getAll()) {
+      pref.updateElements();
+    }
+  },
+
+  get(id) {
+    return this.all[id] || null;
+  },
+
+  getAll() {
+    return Object.values(this.all);
+  },
+
+  rootBranch: Components.classes["@mozilla.org/preferences-service;1"]
+                        .getService(Components.interfaces.nsIPrefBranch),
+
+  defaultBranch: Components.classes["@mozilla.org/preferences-service;1"]
+                           .getService(Components.interfaces.nsIPrefService)
+                           .getDefaultBranch(""),
+
+  get type() {
+    return document.documentElement.type || "";
+  },
+
+  get instantApply() {
+    var doc = document.documentElement;
+    return this.type == "child" ? doc.instantApply
+                                : doc.instantApply || this.rootBranch.getBoolPref("browser.preferences.instantApply");
+  },
+
+  observe(subject, topic, data) {
+    const pref = this.all[data];
+    if (pref) {
+      pref.value = pref.valueFromPreferences;
+    }
+  },
+
+  destructor() {
+    this.rootBranch.removeObserver("", this);
+  },
+};
+
+Preferences.rootBranch.addObserver("", Preferences);
+window.addEventListener("unload", Preferences.destructor.bind(Preferences), { once: true });
+
+class Preference extends EventEmitter {
+  constructor({ id, name, type, inverted }) {
+    super();
+    this.on("change", this.onchange.bind(this));
+
+    this._value = null;
+    this._disabled = false;
+    this.readonly = false;
+    this._useDefault = false;
+    this.batching = false;
+
+    this.id = id;
+    this._name = name || this.id;
+    this.type = type;
+    this.inverted = !!inverted;
+
+    // if the element has been inserted without the name attribute set,
+    // we have nothing to do here
+    if (!this.name) {
+      throw new Error(`preference with id '${id}' doesn't have name`);
+    }
+
+    // In non-instant apply mode, we must try and use the last saved state
+    // from any previous opens of a child dialog instead of the value from
+    // preferences, to pick up any edits a user may have made.
+
+    var secMan = Components.classes["@mozilla.org/scriptsecuritymanager;1"]
+                .getService(Components.interfaces.nsIScriptSecurityManager);
+    if (Preferences.type == "child" &&
+        !this.instantApply && window.opener &&
+        secMan.isSystemPrincipal(window.opener.document.nodePrincipal)) {
+      var pdoc = window.opener.document;
+
+      // Try to find a preference element for the same preference.
+      var preference = null;
+      var parentPreferences = pdoc.getElementsByTagName("preferences");
+      for (var k = 0; (k < parentPreferences.length && !preference); ++k) {
+        var parentPrefs = parentPreferences[k]
+                                .getElementsByAttribute("name", this.name);
+        for (var l = 0; (l < parentPrefs.length && !preference); ++l) {
+          if (parentPrefs[l].localName == "preference")
+            preference = parentPrefs[l];
+        }
+      }
+
+      // Don't use the value setter here, we don't want updateElements to be prematurely fired.
+      this._value = preference ? preference.value : this.valueFromPreferences;
+    } else
+      this._value = this.valueFromPreferences;
+  }
+
+  reset() {
+    // defer reset until preference update
+    this.value = undefined;
+  }
+
+  _reportUnknownType() {
+    var consoleService = Components.classes["@mozilla.org/consoleservice;1"]
+                                   .getService(Components.interfaces.nsIConsoleService);
+    var msg = "Preference with id='" + this.id + "' and name='" +
+              this.name + "' has unknown type '" + this.type + "'.";
+    consoleService.logStringMessage(msg);
+  }
+
+  setElementValue(aElement) {
+    if (this.locked)
+      aElement.disabled = true;
+
+    if (!this.isElementEditable(aElement))
+      return;
+
+    var rv = undefined;
+    if (aElement.hasAttribute("onsyncfrompreference")) {
+      // Value changed, synthesize an event
+      try {
+        var event = document.createEvent("Events");
+        event.initEvent("syncfrompreference", true, true);
+        var f = new Function("event",
+                             aElement.getAttribute("onsyncfrompreference"));
+        rv = f.call(aElement, event);
+      } catch (e) {
+        Components.utils.reportError(e);
+      }
+    }
+    var val = rv;
+    if (val === undefined)
+      val = this.instantApply ? this.valueFromPreferences : this.value;
+    // if the preference is marked for reset, show default value in UI
+    if (val === undefined)
+      val = this.defaultValue;
+
+    /**
+     * Initialize a UI element property with a value. Handles the case
+     * where an element has not yet had a XBL binding attached for it and
+     * the property setter does not yet exist by setting the same attribute
+     * on the XUL element using DOM apis and assuming the element's
+     * constructor or property getters appropriately handle this state.
+     */
+    function setValue(element, attribute, value) {
+      if (attribute in element)
+        element[attribute] = value;
+      else
+        element.setAttribute(attribute, value);
+    }
+    if (aElement.localName == "checkbox" ||
+        aElement.localName == "listitem")
+      setValue(aElement, "checked", val);
+    else if (aElement.localName == "colorpicker")
+      setValue(aElement, "color", val);
+    else if (aElement.localName == "textbox") {
+      // XXXmano Bug 303998: Avoid a caret placement issue if either the
+      // preference observer or its setter calls updateElements as a result
+      // of the input event handler.
+      if (aElement.value !== val)
+        setValue(aElement, "value", val);
+    } else
+      setValue(aElement, "value", val);
+  }
+
+  getElementValue(aElement) {
+    if (aElement.hasAttribute("onsynctopreference")) {
+      // Value changed, synthesize an event
+      try {
+        var event = document.createEvent("Events");
+        event.initEvent("synctopreference", true, true);
+        var f = new Function("event",
+                             aElement.getAttribute("onsynctopreference"));
+        var rv = f.call(aElement, event);
+        if (rv !== undefined)
+          return rv;
+      } catch (e) {
+        Components.utils.reportError(e);
+      }
+    }
+
+    /**
+     * Read the value of an attribute from an element, assuming the
+     * attribute is a property on the element's node API. If the property
+     * is not present in the API, then assume its value is contained in
+     * an attribute, as is the case before a binding has been attached.
+     */
+    function getValue(element, attribute) {
+      if (attribute in element)
+        return element[attribute];
+      return element.getAttribute(attribute);
+    }
+    if (aElement.localName == "checkbox" ||
+        aElement.localName == "listitem")
+      var value = getValue(aElement, "checked");
+    else if (aElement.localName == "colorpicker")
+      value = getValue(aElement, "color");
+    else
+      value = getValue(aElement, "value");
+
+    switch (this.type) {
+    case "int":
+      return parseInt(value, 10) || 0;
+    case "bool":
+      return typeof(value) == "boolean" ? value : value == "true";
+    }
+    return value;
+  }
+
+  isElementEditable(aElement) {
+    switch (aElement.localName) {
+    case "checkbox":
+    case "colorpicker":
+    case "radiogroup":
+    case "textbox":
+    case "listitem":
+    case "listbox":
+    case "menulist":
+      return true;
+    }
+    return aElement.getAttribute("preference-editable") == "true";
+  }
+
+  updateElements() {
+    if (!this.id)
+      return;
+
+    // This "change" event handler tracks changes made to preferences by
+    // sources other than the user in this window.
+    var elements = document.getElementsByAttribute("preference", this.id);
+    for (var i = 0; i < elements.length; ++i)
+      this.setElementValue(elements[i]);
+  }
+
+  onchange() {
+    this.updateElements();
+  }
+
+  get instantApply() {
+    return Preferences.instantApply;
+  }
+
+  get name() {
+    return this._name;
+  }
+
+  set name(val) {
+    if (val == this.name)
+      return val;
+
+    this._name = val;
+
+    return val;
+  }
+
+  get value() {
+    return this._value;
+  }
+
+  set value(val) {
+    if (this.value !== val) {
+      this._value = val;
+      if (this.instantApply)
+        this.valueFromPreferences = val;
+      this.emit("change");
+    }
+    return val;
+  }
+
+  get locked() {
+    return Preferences.rootBranch.prefIsLocked(this.name);
+  }
+
+  get disabled() {
+    return this._disabled;
+  }
+
+  set disabled(val) {
+    this._disabled = !!val;
+
+    if (!this.id)
+      return val;
+
+    var elements = document.getElementsByAttribute("preference", this.id);
+    for (var i = 0; i < elements.length; ++i) {
+      elements[i].disabled = val;
+
+      var labels = document.getElementsByAttribute("control", elements[i].id);
+      for (var j = 0; j < labels.length; ++j)
+        labels[j].disabled = val;
+    }
+
+    return val;
+  }
+
+  get defaultValue() {
+    this._useDefault = true;
+    var val = this.valueFromPreferences;
+    this._useDefault = false;
+    return val;
+  }
+
+  get _branch() {
+    return this._useDefault ? Preferences.defaultBranch : Preferences.rootBranch;
+  }
+
+  get valueFromPreferences() {
+    try {
+      // Force a resync of value with preferences.
+      switch (this.type) {
+      case "int":
+        return this._branch.getIntPref(this.name);
+      case "bool":
+        var val = this._branch.getBoolPref(this.name);
+        return this.inverted ? !val : val;
+      case "wstring":
+        return this._branch
+                   .getComplexValue(this.name, Components.interfaces.nsIPrefLocalizedString)
+                   .data;
+      case "string":
+      case "unichar":
+        return this._branch.getStringPref(this.name);
+      case "fontname":
+        var family = this._branch.getStringPref(this.name);
+        var fontEnumerator = Components.classes["@mozilla.org/gfx/fontenumerator;1"]
+                                       .createInstance(Components.interfaces.nsIFontEnumerator);
+        return fontEnumerator.getStandardFamilyName(family);
+      case "file":
+        var f = this._branch
+                    .getComplexValue(this.name, Components.interfaces.nsILocalFile);
+        return f;
+      default:
+        this._reportUnknownType();
+      }
+    } catch (e) { }
+    return null;
+  }
+
+  set valueFromPreferences(val) {
+    // Exit early if nothing to do.
+    if (this.readonly || this.valueFromPreferences == val)
+      return val;
+
+    // The special value undefined means 'reset preference to default'.
+    if (val === undefined) {
+      Preferences.rootBranch.clearUserPref(this.name);
+      return val;
+    }
+
+    // Force a resync of preferences with value.
+    switch (this.type) {
+    case "int":
+      Preferences.rootBranch.setIntPref(this.name, val);
+      break;
+    case "bool":
+      Preferences.rootBranch.setBoolPref(this.name, this.inverted ? !val : val);
+      break;
+    case "wstring":
+      var pls = Components.classes["@mozilla.org/pref-localizedstring;1"]
+                          .createInstance(Components.interfaces.nsIPrefLocalizedString);
+      pls.data = val;
+      Preferences.rootBranch
+          .setComplexValue(this.name, Components.interfaces.nsIPrefLocalizedString, pls);
+      break;
+    case "string":
+    case "unichar":
+    case "fontname":
+      Preferences.rootBranch.setStringPref(this.name, val);
+      break;
+    case "file":
+      var lf;
+      if (typeof(val) == "string") {
+        lf = Components.classes["@mozilla.org/file/local;1"]
+                       .createInstance(Components.interfaces.nsILocalFile);
+        lf.persistentDescriptor = val;
+        if (!lf.exists())
+          lf.initWithPath(val);
+      } else
+        lf = val.QueryInterface(Components.interfaces.nsILocalFile);
+      Preferences.rootBranch
+          .setComplexValue(this.name, Components.interfaces.nsILocalFile, lf);
+      break;
+    default:
+      this._reportUnknownType();
+    }
+    if (!this.batching) {
+      var psvc = Components.classes["@mozilla.org/preferences-service;1"]
+                           .getService(Components.interfaces.nsIPrefService);
+      psvc.savePrefFile(null);
+    }
+    return val;
+  }
+}
+
+class PrefPane {
+  constructor(aElement) {
+    this._deferredValueUpdateElements = new Set();
+
+    aElement.addEventListener("command", this.onCommand.bind(this));
+    aElement.addEventListener("select", this.onSelect.bind(this));
+    aElement.addEventListener("change", this.onChange.bind(this));
+    aElement.addEventListener("input", this.onInput.bind(this));
+  }
+
+  getPreferenceElement(aStartElement) {
+    var temp = aStartElement;
+    while (temp && temp.nodeType == Node.ELEMENT_NODE &&
+           !temp.hasAttribute("preference"))
+      temp = temp.parentNode;
+    return temp && temp.nodeType == Node.ELEMENT_NODE ?
+           temp : aStartElement;
+  }
+
+  get DeferredTask() {
+    let module = {};
+    Components.utils.import("resource://gre/modules/DeferredTask.jsm", module);
+    Object.defineProperty(this, "DeferredTask", {
+      configurable: true,
+      enumerable: true,
+      writable: true,
+      value: module.DeferredTask
+    });
+    return module.DeferredTask;
+  }
+
+  _deferredValueUpdate(aElement) {
+    delete aElement._deferredValueUpdateTask;
+    let prefID = aElement.getAttribute("preference");
+    let preference = Preferences.get(prefID);
+    let prefVal = preference.getElementValue(aElement);
+    preference.value = prefVal;
+    this._deferredValueUpdateElements.delete(aElement);
+  }
+
+  _finalizeDeferredElements() {
+    for (let el of this._deferredValueUpdateElements) {
+      if (el._deferredValueUpdateTask) {
+        el._deferredValueUpdateTask.finalize();
+      }
+    }
+  }
+
+  userChangedValue(aElement) {
+    let element = this.getPreferenceElement(aElement);
+    if (element.hasAttribute("preference")) {
+      if (element.getAttribute("delayprefsave") != "true") {
+        var preference = Preferences.get(element.getAttribute("preference"));
+        var prefVal = preference.getElementValue(element);
+        preference.value = prefVal;
+      } else {
+        if (!element._deferredValueUpdateTask) {
+          element._deferredValueUpdateTask = new this.DeferredTask(this._deferredValueUpdate.bind(this, element), 1000);
+          this._deferredValueUpdateElements.add(element);
+        } else {
+          // Each time the preference is changed, restart the delay.
+          element._deferredValueUpdateTask.disarm();
+        }
+        element._deferredValueUpdateTask.arm();
+      }
+    }
+  }
+
+  onCommand(event) {
+    // This "command" event handler tracks changes made to preferences by
+    // the user in this window.
+    if (event.sourceEvent)
+      event = event.sourceEvent;
+    this.userChangedValue(event.target);
+  }
+
+  onSelect(event) {
+    // This "select" event handler tracks changes made to colorpicker
+    // preferences by the user in this window.
+    if (event.target.localName == "colorpicker")
+      this.userChangedValue(event.target);
+  }
+
+  onChange(event) {
+    // This "change" event handler tracks changes made to preferences by
+    // the user in this window.
+    this.userChangedValue(event.target);
+  }
+
+  onInput(event) {
+    // This "input" event handler tracks changes made to preferences by
+    // the user in this window.
+    this.userChangedValue(event.target);
+  }
+}
diff --git a/toolkit/mozapps/preferences/fontbuilder.js b/toolkit/mozapps/preferences/fontbuilder.js
index 79cc43d1a631..4f52700a8988 100644
--- a/toolkit/mozapps/preferences/fontbuilder.js
+++ b/toolkit/mozapps/preferences/fontbuilder.js
@@ -4,6 +4,8 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+/* import-globals-from ../../content/preferences.js */
+
 var FontBuilder = {
   _enumerator: null,
   get enumerator() {
@@ -91,7 +93,23 @@ var FontBuilder = {
     // - there is no setting
     // - the font selected by the user is no longer present (e.g. deleted from
     //   fonts folder)
-    let preference = document.getElementById(aElement.getAttribute("preference"));
+    //
+    // NB: this script is used by three consumers: the Fonts child dialog
+    // implemented by fonts.xul, which uses <preference> elements implemented in
+    // XBL; the about:preferences dialog implemented by in-content/content.xul,
+    // which also uses <preference> elements; and the about:preferences dialog
+    // implemented by in-content-new/main.xul, which uses Preference objects.
+    //
+    // Therefore this method needs to support both ways of retrieving
+    // a preference: getting a <preference> element via getElementById
+    // getting a Preference object via Preferences.get.
+    //
+    // TODO: stop supporting retrieval of <preference> elements once fonts.xul
+    // is updated to use Preference objects and the in-content/ implementation
+    // of about:preferences is removed from the tree.
+    //
+    let preference = document.getElementById(aElement.getAttribute("preference")) ||
+                     (Preferences && Preferences.get(aElement.getAttribute("preference")));
     if (preference.value) {
       let fontItems = aElement.getElementsByAttribute("value", preference.value);
 
