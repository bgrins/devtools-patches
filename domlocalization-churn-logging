# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  987ac35920f78d1eb73345d09c2d3927f280239b

diff --git a/intl/l10n/DOMLocalization.jsm b/intl/l10n/DOMLocalization.jsm
--- a/intl/l10n/DOMLocalization.jsm
+++ b/intl/l10n/DOMLocalization.jsm
@@ -162,33 +162,38 @@ function overlayChildNodes(fromFragment,
  * @private
  */
 function overlayAttributes(fromElement, toElement) {
   const explicitlyAllowed = toElement.hasAttribute("data-l10n-attrs")
     ? toElement.getAttribute("data-l10n-attrs")
       .split(",").map(i => i.trim())
     : null;
 
+  let debugMap = new Map();
   // Remove existing localizable attributes.
   for (const attr of Array.from(toElement.attributes)) {
     if (isAttrNameLocalizable(attr.name, toElement, explicitlyAllowed)) {
+      debugMap.set(attr.name, toElement.getAttribute(attr.name));
       toElement.removeAttribute(attr.name);
     }
   }
 
   // fromElement might be a {value, attributes} object as returned by
   // Localization.messageFromBundle. In which case attributes may be null to
   // save GC cycles.
   if (!fromElement.attributes) {
     return;
   }
 
   // Set localizable attributes.
   for (const attr of Array.from(fromElement.attributes)) {
     if (isAttrNameLocalizable(attr.name, toElement, explicitlyAllowed)) {
+      if (debugMap.get(attr.name) == attr.value) {
+        console.log("Resetting duplicate attr", attr.name, attr.value, toElement);
+      }
       toElement.setAttribute(attr.name, attr.value);
     }
   }
 }
 
 /**
  * Sanitize a child element created by the translation.
  *
