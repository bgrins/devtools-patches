# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  408e2424d203713653e9bb3fb4bfe9a6b26ec76f
Bisecting which test has to run to cause test_findbar_entireword.xul to fail

diff --git a/toolkit/content/tests/chrome/RegisterUnregisterChrome.js b/toolkit/content/tests/chrome/RegisterUnregisterChrome.js
--- a/toolkit/content/tests/chrome/RegisterUnregisterChrome.js
+++ b/toolkit/content/tests/chrome/RegisterUnregisterChrome.js
@@ -85,16 +85,17 @@ function chromeURIToFile(chromeURI) {
 
   return convertChromeURI(chromeURI).
     QueryInterface(Ci.nsIFileURL).file;
 }
 
 // Register a chrome manifest temporarily and return a function which un-does
 // the registrarion when no longer needed.
 function createManifestTemporarily(tempDir, manifestText) {
+    console.log("createManifestTemporarily");
   Services.prefs.setBoolPref(XUL_CACHE_PREF, true);
 
   tempDir.append("temp.manifest");
 
   let foStream = Cc["@mozilla.org/network/file-output-stream;1"]
                    .createInstance(Ci.nsIFileOutputStream);
   foStream.init(tempDir,
                 0x02 | 0x08 | 0x20, 0o664, 0); // write, create, truncate
@@ -106,37 +107,40 @@ function createManifestTemporarily(tempD
     autoRegister(tempfile);
 
   gChromeReg.refreshSkins();
 
   return function() {
     tempfile.fileSize = 0; // truncate the manifest
     gChromeReg.checkForNewChrome();
     gChromeReg.refreshSkins();
+    console.log("Clearing disabled pref 1");
     Services.prefs.clearUserPref(XUL_CACHE_PREF);
   };
 }
 
 // Register a chrome manifest temporarily and return a function which un-does
 // the registrarion when no longer needed.
 function registerManifestTemporarily(manifestURI) {
+    console.log("CregisterManifestTemporarily");
   Services.prefs.setBoolPref(XUL_CACHE_PREF, true);
 
   let file = chromeURIToFile(manifestURI);
 
   let tempfile = copyToTemporaryFile(file);
   Components.manager.QueryInterface(Ci.nsIComponentRegistrar).
     autoRegister(tempfile);
 
   gChromeReg.refreshSkins();
 
   return function() {
     tempfile.fileSize = 0; // truncate the manifest
     gChromeReg.checkForNewChrome();
     gChromeReg.refreshSkins();
+    console.log("Clearing disabled pref 2");
     Services.prefs.clearUserPref(XUL_CACHE_PREF);
   };
 }
 
 function registerManifestPermanently(manifestURI) {
   var chromepath = chromeURIToFile(manifestURI);
 
   Components.manager.QueryInterface(Ci.nsIComponentRegistrar).
diff --git a/toolkit/content/tests/chrome/chrome.ini b/toolkit/content/tests/chrome/chrome.ini
--- a/toolkit/content/tests/chrome/chrome.ini
+++ b/toolkit/content/tests/chrome/chrome.ini
@@ -47,157 +47,163 @@ support-files =
   window_tooltip.xul
   xul_selectcontrol.js
   rtlchrome/rtl.css
   rtlchrome/rtl.dtd
   rtlchrome/rtl.manifest
   rtltest/righttoleft.manifest
   rtltest/content/dirtest.xul
 
-[test_about_networking.html]
-[test_arrowpanel.xul]
-[test_autocomplete2.xul]
-[test_autocomplete3.xul]
-[test_autocomplete4.xul]
-[test_autocomplete5.xul]
-[test_autocomplete_delayOnPaste.xul]
-subsuite = clipboard
-[test_autocomplete_emphasis.xul]
-[test_autocomplete_with_composition_on_input.html]
-[test_autocomplete_with_composition_on_textbox.xul]
-[test_autocomplete_placehold_last_complete.xul]
-[test_browser_drop.xul]
-[test_bug253481.xul]
-subsuite = clipboard
-[test_bug263683.xul]
-skip-if = debug && (os == 'win' || os == 'linux')
-[test_bug304188.xul]
-[test_bug331215.xul]
-skip-if = os == 'win' && debug # Bug 1339326
-[test_bug360220.xul]
-[test_bug360437.xul]
-skip-if = os == 'linux' # Bug 1264604
-[test_bug365773.xul]
-[test_bug366992.xul]
-[test_bug382990.xul]
-[test_bug409624.xul]
+# [test_about_networking.html]
+# [test_arrowpanel.xul]
+# [test_autocomplete2.xul]
+# [test_autocomplete3.xul]
+# [test_autocomplete4.xul]
+# [test_autocomplete5.xul]
+# [test_autocomplete_delayOnPaste.xul]
+# subsuite = clipboard
+# [test_autocomplete_emphasis.xul]
+# [test_autocomplete_with_composition_on_input.html]
+# [test_autocomplete_with_composition_on_textbox.xul]
+# [test_autocomplete_placehold_last_complete.xul]
+# [test_browser_drop.xul]
+# [test_bug253481.xul]
+# subsuite = clipboard
+# [test_bug263683.xul]
+# skip-if = debug && (os == 'win' || os == 'linux')
+# [test_bug304188.xul]
+# [test_bug331215.xul]
+# skip-if = os == 'win' && debug # Bug 1339326
+# [test_bug360220.xul]
+# [test_bug360437.xul]
+# skip-if = os == 'linux' # Bug 1264604
+# [test_bug365773.xul]
+# [test_bug366992.xul]
+# [test_bug382990.xul]
+# [test_bug409624.xul]
+
 [test_bug418874.xul]
-[test_bug429723.xul]
+
+# [test_bug429723.xul]
+
 [test_bug437844.xul]
-[test_bug451540.xul]
-support-files = bug451540_window.xul
-[test_bug457632.xul]
-[test_bug460942.xul]
-[test_bug471776.xul]
-[test_bug509732.xul]
-[test_bug557987.xul]
-[test_bug562554.xul]
-[test_bug570192.xul]
-[test_bug585946.xul]
-[test_bug624329.xul]
-skip-if = (os == 'mac' && os_version == '10.10') # Unexpectedly perma-passes on OSX 10.10
-[test_bug792324.xul]
-[test_bug1048178.xul]
-skip-if = toolkit == "cocoa"
-[test_button.xul]
-[test_closemenu_attribute.xul]
-[test_colorpicker_popup.xul]
-[test_contextmenu_list.xul]
-[test_deck.xul]
-[test_dialogfocus.xul]
-[test_findbar.xul]
-subsuite = clipboard
+
+# [test_bug451540.xul]
+# support-files = bug451540_window.xul
+# [test_bug457632.xul]
+# [test_bug460942.xul]
+# [test_bug471776.xul]
+# [test_bug509732.xul]
+# [test_bug557987.xul]
+# [test_bug562554.xul]
+# [test_bug570192.xul]
+# [test_bug585946.xul]
+# [test_bug624329.xul]
+# skip-if = (os == 'mac' && os_version == '10.10') # Unexpectedly perma-passes on OSX 10.10
+# [test_bug792324.xul]
+# [test_bug1048178.xul]
+# skip-if = toolkit == "cocoa"
+# [test_button.xul]
+# [test_closemenu_attribute.xul]
+# [test_colorpicker_popup.xul]
+# [test_contextmenu_list.xul]
+# [test_deck.xul]
+# [test_dialogfocus.xul]
+# [test_findbar.xul]
+# subsuite = clipboard
+
 [test_findbar_entireword.xul]
-[test_findbar_events.xul]
-[test_focus_anons.xul]
-[test_hiddenitems.xul]
-[test_hiddenpaging.xul]
-[test_keys.xul]
-[test_labelcontrol.xul]
-[test_largemenu.xul]
-skip-if = os == 'linux' && !debug # Bug 1207174
-[test_maximized_persist.xul]
-support-files = window_maximized_persist.xul
-[test_menu.xul]
-[test_menu_anchored.xul]
-[test_menu_withcapture.xul]
-[test_menu_hide.xul]
-[test_menuchecks.xul]
-[test_menuitem_blink.xul]
-[test_menuitem_commands.xul]
-[test_menulist.xul]
-[test_menulist_keynav.xul]
-[test_menulist_null_value.xul]
-[test_menulist_paging.xul]
-[test_menulist_position.xul]
-[test_mousescroll.xul]
-[test_notificationbox.xul]
-[test_panel.xul]
-[test_panel_anchoradjust.xul]
-[test_panelfrommenu.xul]
-[test_popup_anchor.xul]
-[test_popup_anchoratrect.xul]
-skip-if = os == 'linux' # 1167694
-[test_popup_attribute.xul]
-skip-if = os == 'linux' && asan # Bug 1131634
-[test_popup_button.xul]
-skip-if = os == 'linux' && asan # Bug 1281360
-[test_popup_coords.xul]
-[test_popup_keys.xul]
-[test_popup_moveToAnchor.xul]
-[test_popup_preventdefault.xul]
-[test_popup_preventdefault_chrome.xul]
-[test_popup_recreate.xul]
-[test_popup_scaled.xul]
-[test_popup_tree.xul]
-[test_popuphidden.xul]
-[test_popupincontent.xul]
-[test_popupremoving.xul]
-[test_popupremoving_frame.xul]
-[test_position.xul]
-[test_preferences.xul]
-[test_preferences_beforeaccept.xul]
-support-files = window_preferences_beforeaccept.xul
-[test_preferences_onsyncfrompreference.xul]
-support-files = window_preferences_onsyncfrompreference.xul
-[test_progressmeter.xul]
-[test_props.xul]
-[test_radio.xul]
-[test_richlist_direction.xul]
-[test_righttoleft.xul]
-[test_scale.xul]
-[test_scaledrag.xul]
-[test_screenPersistence.xul]
-[test_scrollbar.xul]
-[test_showcaret.xul]
-[test_subframe_origin.xul]
-[test_tabbox.xul]
-[test_tabindex.xul]
-[test_textbox_dictionary.xul]
-[test_textbox_emptytext.xul]
-[test_textbox_number.xul]
-[test_textbox_search.xul]
-[test_titlebar.xul]
-skip-if = os == "linux"
-[test_tooltip.xul]
-skip-if = (os == 'mac' && os_version == '10.10') || (os == 'win') # Bug 1141245, frequent timeouts on OSX 10.10, Windows
-[test_tooltip_noautohide.xul]
-[test_tree.xul]
-[test_tree_hier.xul]
-[test_tree_hier_cell.xul]
-[test_tree_single.xul]
-[test_tree_view.xul]
-[test_window_intrinsic_size.xul]
-support-files = window_intrinsic_size.xul
-# test_panel_focus.xul won't work if the Full Keyboard Access preference is set to
-# textboxes and lists only, so skip this test on Mac
-[test_panel_focus.xul]
-support-files = window_panel_focus.xul
-skip-if = toolkit == "cocoa"
-[test_chromemargin.xul]
-support-files = window_chromemargin.xul
-skip-if = toolkit == "cocoa"
-[test_autocomplete_mac_caret.xul]
-skip-if = toolkit != "cocoa"
-[test_cursorsnap.xul]
-disabled =
-#skip-if = os != "win"
-support-files = window_cursorsnap_dialog.xul window_cursorsnap_wizard.xul
+
+# [test_findbar_events.xul]
+# [test_focus_anons.xul]
+# [test_hiddenitems.xul]
+# [test_hiddenpaging.xul]
+# [test_keys.xul]
+# [test_labelcontrol.xul]
+# [test_largemenu.xul]
+# skip-if = os == 'linux' && !debug # Bug 1207174
+# [test_maximized_persist.xul]
+# support-files = window_maximized_persist.xul
+# [test_menu.xul]
+# [test_menu_anchored.xul]
+# [test_menu_withcapture.xul]
+# [test_menu_hide.xul]
+# [test_menuchecks.xul]
+# [test_menuitem_blink.xul]
+# [test_menuitem_commands.xul]
+# [test_menulist.xul]
+# [test_menulist_keynav.xul]
+# [test_menulist_null_value.xul]
+# [test_menulist_paging.xul]
+# [test_menulist_position.xul]
+# [test_mousescroll.xul]
+# [test_notificationbox.xul]
+# [test_panel.xul]
+# [test_panel_anchoradjust.xul]
+# [test_panelfrommenu.xul]
+# [test_popup_anchor.xul]
+# [test_popup_anchoratrect.xul]
+# skip-if = os == 'linux' # 1167694
+# [test_popup_attribute.xul]
+# skip-if = os == 'linux' && asan # Bug 1131634
+# [test_popup_button.xul]
+# skip-if = os == 'linux' && asan # Bug 1281360
+# [test_popup_coords.xul]
+# [test_popup_keys.xul]
+# [test_popup_moveToAnchor.xul]
+# [test_popup_preventdefault.xul]
+# [test_popup_preventdefault_chrome.xul]
+# [test_popup_recreate.xul]
+# [test_popup_scaled.xul]
+# [test_popup_tree.xul]
+# [test_popuphidden.xul]
+# [test_popupincontent.xul]
+# [test_popupremoving.xul]
+# [test_popupremoving_frame.xul]
+# [test_position.xul]
+# [test_preferences.xul]
+# [test_preferences_beforeaccept.xul]
+# support-files = window_preferences_beforeaccept.xul
+# [test_preferences_onsyncfrompreference.xul]
+# support-files = window_preferences_onsyncfrompreference.xul
+# [test_progressmeter.xul]
+# [test_props.xul]
+# [test_radio.xul]
+# [test_richlist_direction.xul]
+# [test_righttoleft.xul]
+# [test_scale.xul]
+# [test_scaledrag.xul]
+# [test_screenPersistence.xul]
+# [test_scrollbar.xul]
+# [test_showcaret.xul]
+# [test_subframe_origin.xul]
+# [test_tabbox.xul]
+# [test_tabindex.xul]
+# [test_textbox_dictionary.xul]
+# [test_textbox_emptytext.xul]
+# [test_textbox_number.xul]
+# [test_textbox_search.xul]
+# [test_titlebar.xul]
+# skip-if = os == "linux"
+# [test_tooltip.xul]
+# skip-if = (os == 'mac' && os_version == '10.10') || (os == 'win') # Bug 1141245, frequent timeouts on OSX 10.10, Windows
+# [test_tooltip_noautohide.xul]
+# [test_tree.xul]
+# [test_tree_hier.xul]
+# [test_tree_hier_cell.xul]
+# [test_tree_single.xul]
+# [test_tree_view.xul]
+# [test_window_intrinsic_size.xul]
+# support-files = window_intrinsic_size.xul
+# # test_panel_focus.xul won't work if the Full Keyboard Access preference is set to
+# # textboxes and lists only, so skip this test on Mac
+# [test_panel_focus.xul]
+# support-files = window_panel_focus.xul
+# skip-if = toolkit == "cocoa"
+# [test_chromemargin.xul]
+# support-files = window_chromemargin.xul
+# skip-if = toolkit == "cocoa"
+# [test_autocomplete_mac_caret.xul]
+# skip-if = toolkit != "cocoa"
+# [test_cursorsnap.xul]
+# disabled =
+# #skip-if = os != "win"
+# support-files = window_cursorsnap_dialog.xul window_cursorsnap_wizard.xul
diff --git a/toolkit/content/tests/chrome/findbar_entireword_window.xul b/toolkit/content/tests/chrome/findbar_entireword_window.xul
--- a/toolkit/content/tests/chrome/findbar_entireword_window.xul
+++ b/toolkit/content/tests/chrome/findbar_entireword_window.xul
@@ -148,17 +148,17 @@
     var enterStringIntoFindField = async function(str, waitForResult = true) {
       for (let promise, i = 0; i < str.length; i++) {
         if (waitForResult) {
           promise = promiseFindResult();
         }
         let event = document.createEvent("KeyboardEvent");
         event.initKeyEvent("keypress", true, true, null, false, false,
                            false, false, 0, str.charCodeAt(i));
-        gFindBar._findField.inputField.dispatchEvent(event);
+        gFindBar.getElement("findbar-textbox").inputField.dispatchEvent(event);
         if (waitForResult) {
           await promise;
         }
       }
     };
 
     function openFindbar() {
       document.getElementById("cmd_find").doCommand();
diff --git a/toolkit/content/tests/chrome/test_bug437844.xul b/toolkit/content/tests/chrome/test_bug437844.xul
--- a/toolkit/content/tests/chrome/test_bug437844.xul
+++ b/toolkit/content/tests/chrome/test_bug437844.xul
@@ -78,17 +78,21 @@ https://bugzilla.mozilla.org/show_bug.cg
           frame.setAttribute("src", "file://" + tmpd.path); // a file:// URI, bug 348233
           frame.addEventListener("load", function () {
               frame.removeEventListener("load", arguments.callee, false);
 
               is(frame.contentDocument.body.dir, "rtl", "file:// listings should be RTL in RTL locales");
 
               cleanupFunc();
               prefs.clearUserPref("intl.uidirection");
+
+              setTimeout(() => {
+
               SimpleTest.finish();
+            }, 1000)
             }, false);
           document.documentElement.appendChild(frame);
         }, false);
       document.documentElement.appendChild(frame);
 
     ]]>
   </script>
 
diff --git a/toolkit/content/widgets/findbar.js b/toolkit/content/widgets/findbar.js
--- a/toolkit/content/widgets/findbar.js
+++ b/toolkit/content/widgets/findbar.js
@@ -3,19 +3,25 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 // Wrap to prevent accidentally leaking to window scope:
 {
 
 ChromeUtils.import("resource://gre/modules/Services.jsm");
-
+let instNum = 0;
 class MozFindbar extends XULElement {
+
+  get hidden() {
+    return this.collapsed || this.hasAttribute("hidden");
+  }
   connectedCallback() {
+    this.instNum = instNum++;
+    console.log("CONNECTED CALLBACK for", this.instNum);
     function element(tagName, attrs, children = []) {
       var el = document.createElement(tagName);
       for (let key in attrs) {
         el.setAttribute(key, attrs[key]);
       }
       for (let child of children) {
         el.appendChild(child);
       }
@@ -38,17 +44,17 @@ class MozFindbar extends XULElement {
         element("image", { anonid: "find-status-icon", class: "findbar-find-fast find-status-icon" }),
         element("description", { anonid: "find-status", control: "findbar-textbox", class: "findbar-find-fast findbar-find-status" }),
       ])
     );
     this.appendChild(
       element("toolbarbutton", { anonid: "find-closebutton", class: "findbar-closebutton close-icon", "data-l10n-id": "findbar-find-button-close", oncommand: "close();"})
     );
 
-    this.hidden = true;
+    this.collapsed = true;
 
     /**
      * Please keep in sync with toolkit/content/browser-content.js
      */
     this.FIND_NORMAL = 0;
 
     this.FIND_TYPEAHEAD = 1;
 
@@ -119,16 +125,17 @@ class MozFindbar extends XULElement {
     this._pluralForm = null;
 
     this._strBundle = null;
 
     this._xulBrowserWindow = null;
 
     // These elements are accessed frequently and are therefore cached
     this._findField = this.getElement("findbar-textbox");
+    this._findField.foo;
     this._foundMatches = this.getElement("found-matches");
     this._findStatusIcon = this.getElement("find-status-icon");
     this._findStatusDesc = this.getElement("find-status");
 
     this._foundURL = null;
 
     let prefsvc = this._prefsvc;
 
@@ -337,19 +344,33 @@ class MozFindbar extends XULElement {
 
     this._browser = val;
     if (this._browser) {
       // Need to do this to ensure the correct initial state.
       this._updateBrowserWithState();
       this._browser.messageManager.addMessageListener("Findbar:Keypress", this);
       this._browser.messageManager.addMessageListener("Findbar:Mouseup", this);
       this._browser.finder.addResultListener(this);
+      console.trace();
+      console.log("before for", this.instNum,
+        this.collapsed,
+        window.getComputedStyle(this).getPropertyValue("visibility"),
+        window.getComputedStyle(this).getPropertyValue("display"),
+        window.getComputedStyle(this._findField).getPropertyValue("-moz-binding"),
+        this._findField.inputField, this._findField.value,
+        this._browser._lastSearchString,
+        this._findField.outerHTML);
+      this._findField.inputField; //.value; // Huh??????
 
-      this._findField.inputField.value; // Huh??????
+      this._findField.hidden = true;
+      this._findField.hidden = false;
+      // this._findField.style.vi
+      console.log("second", this._findField.inputField, this._findField.value, this._browser._lastSearchString);
       this._findField.value = this._browser._lastSearchString;
+      console.log("third", this._findField.inputField, this._findField.value, this._browser._lastSearchString);
     }
     return val;
   }
 
   get browser() {
     if (!this._browser) {
       this._browser =
         document.getElementById(this.getAttribute("browserid"));
@@ -428,17 +449,17 @@ class MozFindbar extends XULElement {
   }
 
   _setFindCloseTimeout() {
     if (this._quickFindTimeout)
       clearTimeout(this._quickFindTimeout);
 
     // Don't close the find toolbar while IME is composing OR when the
     // findbar is already hidden.
-    if (this._isIMEComposing || this.hidden) {
+    if (this._isIMEComposing || this.collapsed) {
       this._quickFindTimeout = null;
       this._updateBrowserWithState();
       return;
     }
 
     this._quickFindTimeout = setTimeout(() => {
       if (this._findMode != this.FIND_NORMAL)
         this.close();
@@ -625,19 +646,19 @@ class MozFindbar extends XULElement {
         stringsBundle.GetStringFromName("CaseSensitive");
       this._entireWordStr =
         stringsBundle.GetStringFromName("EntireWord");
     }
 
     this._findFailedString = null;
 
     this._updateFindUI();
-    if (this.hidden) {
+    if (this.collapsed) {
       this.removeAttribute("noanim");
-      this.hidden = false;
+      this.collapsed = false;
 
       this._updateStatusUI(this.nsITypeAheadFind.FIND_FOUND);
 
       let event = document.createEvent("Events");
       event.initEvent("findbaropen", true, false);
       this.dispatchEvent(event);
 
       this.browser.finder.onFindbarOpen();
@@ -646,22 +667,22 @@ class MozFindbar extends XULElement {
     }
     return false;
   }
 
   /**
    * - Closes the findbar.
    */
   close(aNoAnim) {
-    if (this.hidden)
+    if (this.collapsed)
       return;
 
     if (aNoAnim)
       this.setAttribute("noanim", true);
-    this.hidden = true;
+    this.collapsed = true;
 
     // 'focusContent()' iterates over all listeners in the chrome
     // process, so we need to call it from here.
     this.browser.finder.focusContent();
     this.browser.finder.onFindbarClose();
 
     this._cancelTimers();
     this._updateBrowserWithState();
@@ -734,17 +755,17 @@ class MozFindbar extends XULElement {
   /**
    * We get a fake event object through an IPC message when FAYT is being used
    * from within the browser. We then stuff that input in the find bar here.
    */
   _onBrowserKeypress(aFakeEvent) {
     const FAYT_LINKS_KEY = "'";
     const FAYT_TEXT_KEY = "/";
 
-    if (!this.hidden && this._findField.inputField == document.activeElement) {
+    if (!this.collapsed && this._findField.inputField == document.activeElement) {
       this._dispatchKeypressEvent(this._findField.inputField, aFakeEvent);
       return;
     }
 
     if (this._findMode != this.FIND_NORMAL && this._quickFindTimeout) {
       this._findField.select();
       this._findField.focus();
       this._dispatchKeypressEvent(this._findField.inputField, aFakeEvent);
@@ -780,31 +801,31 @@ class MozFindbar extends XULElement {
    * See MessageListener
    */
   receiveMessage(aMessage) {
     if (aMessage.target != this._browser) {
       return undefined;
     }
     switch (aMessage.name) {
       case "Findbar:Mouseup":
-        if (!this.hidden && this._findMode != this.FIND_NORMAL)
+        if (!this.collapsed && this._findMode != this.FIND_NORMAL)
           this.close();
         break;
       case "Findbar:Keypress":
         this._onBrowserKeypress(aMessage.data);
         break;
     }
     return undefined;
   }
 
   _updateBrowserWithState() {
     if (this._browser && this._browser.messageManager) {
       this._browser.messageManager.sendAsyncMessage("Findbar:UpdateState", {
         findMode: this._findMode,
-        isOpenAndFocused: !this.hidden && document.activeElement == this._findField.inputField,
+        isOpenAndFocused: !this.collapsed && document.activeElement == this._findField.inputField,
         hasQuickFindTimeout: !!this._quickFindTimeout,
       });
     }
   }
 
   _enableFindButtons(aEnable) {
     this.getElement("find-next").disabled =
       this.getElement("find-previous").disabled = !aEnable;
diff --git a/toolkit/content/widgets/textbox.xml b/toolkit/content/widgets/textbox.xml
--- a/toolkit/content/widgets/textbox.xml
+++ b/toolkit/content/widgets/textbox.xml
@@ -47,18 +47,18 @@
       <property name="inputField" readonly="true">
         <getter><![CDATA[
           if (!this.mInputField)
             this.mInputField = document.getAnonymousElementByAttribute(this, "anonid", "input");
           return this.mInputField;
         ]]></getter>
       </property>
 
-      <property name="value"      onset="this.inputField.value = val; return val;"
-                                  onget="return this.inputField.value;"/>
+      <property name="value"      onset="console.log('value set'); console.trace(); this.inputField.value = val; return val;"
+                                  onget="console.log('value get'); return this.inputField.value;"/>
       <property name="defaultValue" onset="this.inputField.defaultValue = val; return val;"
                                   onget="return this.inputField.defaultValue;"/>
       <property name="label"      onset="this.setAttribute('label', val); return val;"
                                   onget="return this.getAttribute('label') ||
                                                 (this.labelElement ? this.labelElement.value :
                                                  this.placeholder);"/>
       <property name="placeholder" onset="this.inputField.placeholder = val; return val;"
                                   onget="return this.inputField.placeholder;"/>
@@ -159,30 +159,32 @@
           if (!this.mIgnoreClick && this.clickSelectsAll &&
               document.activeElement == this.inputField &&
               this.inputField.selectionStart == this.inputField.selectionEnd)
             this.editor.selectAll();
         ]]></body>
       </method>
 
       <constructor><![CDATA[
+        console.log("RUNNING CONSTRUCTOR FOR TEXTBOX");
         var str = this.boxObject.getProperty("value");
         if (str) {
           this.inputField.value = str;
           this.boxObject.removeProperty("value");
         }
 
         this._setNewlineHandling();
 
         if (this.hasAttribute("emptytext"))
           this.placeholder = this.getAttribute("emptytext");
       ]]></constructor>
 
       <destructor>
         <![CDATA[
+        console.log("RUNNING DESTRUCTOR FOR TEXTBOX");
           var field = this.inputField;
           if (field && field.value)
             this.boxObject.setProperty("value", field.value);
           this.mInputField = null;
         ]]>
       </destructor>
 
     </implementation>
