# HG changeset patch
# Parent 3fa7b987fb9e84fac97b220e13f81071be25ae7d
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 998344 - Console input is slow when accessing large Uint8Array object properties;r=robcee

diff --git a/toolkit/devtools/webconsole/utils.js b/toolkit/devtools/webconsole/utils.js
--- a/toolkit/devtools/webconsole/utils.js
+++ b/toolkit/devtools/webconsole/utils.js
@@ -961,25 +961,28 @@ function getMatchedProps(aObj, aMatch)
  *
  * @param mixed aObj
  *        Object whose properties we want to filter.
  * @param string aMatch
  *        Filter for properties that match this string.
  * @return object
  *         Object that contains the matchProp and the list of names.
  */
-function getMatchedProps_impl(aObj, aMatch, {chainIterator, getProperties})
+function getMatchedProps_impl(aObj, aMatch, {chainIterator, getPropertiesAutocomplete})
 {
   let matches = new Set();
 
   // We need to go up the prototype chain.
   let iter = chainIterator(aObj);
   for (let obj of iter) {
-    let props = getProperties(obj);
-    for (let prop of props) {
+    console.time("Getting own properties");
+    let props = getPropertiesAutocomplete(obj);
+    console.timeEnd("Getting own properties");
+    for (let i = 0; i < props.length; i++) {
+      let prop = props[i];
       if (prop.indexOf(aMatch) != 0) {
         continue;
       }
 
       // If it is an array index, we can't take it.
       // This uses a trick: converting a string to a number yields NaN if
       // the operation failed, and NaN is not equal to itself.
       if (+prop != +prop) {
@@ -1037,16 +1040,21 @@ let JSObjectSupport = {
     }
   },
 
   getProperties: function(aObj)
   {
     return Object.getOwnPropertyNames(aObj);
   },
 
+  getPropertiesAutocomplete: function(aObj)
+  {
+    return Object.getOwnPropertyNames(aObj);
+  },
+
   getProperty: function()
   {
     // getProperty is unsafe with raw JS objects.
     throw "Unimplemented!";
   },
 };
 
 let DebuggerObjectSupport = {
@@ -1058,16 +1066,21 @@ let DebuggerObjectSupport = {
     }
   },
 
   getProperties: function(aObj)
   {
     return aObj.getOwnPropertyNames();
   },
 
+  getPropertiesAutocomplete: function(aObj)
+  {
+    return aObj.getOwnPropertyNames();
+  },
+
   getProperty: function(aObj, aName, aRootObj)
   {
     // This is left unimplemented in favor to DevToolsUtils.getProperty().
     throw "Unimplemented!";
   },
 };
 
 let DebuggerEnvironmentSupport = {
@@ -1079,16 +1092,21 @@ let DebuggerEnvironmentSupport = {
     }
   },
 
   getProperties: function(aObj)
   {
     return aObj.names();
   },
 
+  getPropertiesAutocomplete: function(aObj)
+  {
+    return aObj.names();
+  },
+
   getProperty: function(aObj, aName)
   {
     // TODO: we should use getVariableDescriptor() here - bug 725815.
     let result = aObj.getVariable(aName);
     // FIXME: Need actual UI, bug 941287.
     if (result.optimizedOut || result.missingArguments) {
       return null;
     }
