# HG changeset patch
# Parent  cfbaf72d15f0696d00285872813c781557c3f59d

diff --git a/devtools/client/themes/images/search.svg b/devtools/client/themes/images/search.svg
--- a/devtools/client/themes/images/search.svg
+++ b/devtools/client/themes/images/search.svg
@@ -1,6 +1,6 @@
 <!-- This Source Code Form is subject to the terms of the Mozilla Public
    - License, v. 2.0. If a copy of the MPL was not distributed with this
    - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
-<svg width="16" height="16" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" fill="#aaa">
+<svg width="16" height="16" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" fill="context-fill #aaa">
   <path d="M10.716 10.032C11.516 9.077 12 7.845 12 6.5 12 3.462 9.538 1 6.5 1S1 3.462 1 6.5 3.462 12 6.5 12c1.345 0 2.577-.483 3.532-1.284l4.143 4.142c.19.19.495.19.683 0 .19-.188.19-.494 0-.683l-4.142-4.143zM6.5 11C8.985 11 11 8.985 11 6.5S8.985 2 6.5 2 2 4.015 2 6.5 4.015 11 6.5 11z" fill-rule="evenodd"/>
 </svg>
diff --git a/devtools/client/themes/webconsole.css b/devtools/client/themes/webconsole.css
--- a/devtools/client/themes/webconsole.css
+++ b/devtools/client/themes/webconsole.css
@@ -983,16 +983,81 @@ body #output-container {
   border-top: none;
 }
 
 /* Last item in the flex wrapper should take the whole remaining height */
 .webconsole-flex-wrapper > :last-child {
   flex-grow: 1;
 }
 
+/* Reverse search input */
+.webconsole-output-wrapper .reverse-search {
+  display: flex;
+  font-size: inherit;
+  padding-inline-start: 26px;
+  background-image: var(--magnifying-glass-image);
+  background-repeat: no-repeat;
+  background-size: 16px 16px;
+  background-position: 4px 2px;
+  min-height: 26px;
+  color: var(--theme-body-color);
+  padding-block-start: 2px;
+  align-items: baseline;
+  -moz-context-properties: fill;
+}
+
+.webconsole-output-wrapper .reverse-search:not(.no-result):focus-within {
+  fill: var(--blue-60);
+}
+
+.webconsole-output-wrapper .reverse-search {
+  flex-shrink: 0;
+}
+
+.webconsole-output-wrapper .reverse-search input {
+  border: none;
+  flex-grow: 1;
+  margin-inline-start: 5px;
+  background: transparent;
+  color: currentColor;
+}
+
+.webconsole-output-wrapper .reverse-search input:focus {
+  border: none;
+  outline: none;
+}
+
+.webconsole-output-wrapper .reverse-search-info {
+  flex-shrink: 0;
+  padding: 0 8px;
+  color: var(--comment-node-color);
+}
+
+.webconsole-output-wrapper .reverse-search-shortcut {
+  margin-inline-start: 8px;
+  border: 1px solid currentColor;
+  border-radius: 50%;
+  display: inline-block;
+  height: 16px;
+  width: 16px;
+  flex-shrink: 0;
+  cursor: default;
+  text-align: center;
+}
+
+.webconsole-output-wrapper .reverse-search.no-result {
+  fill: var(--error-color);
+}
+
+.webconsole-output-wrapper .reverse-search.no-result,
+.webconsole-output-wrapper .reverse-search.no-result input,
+.webconsole-output-wrapper .reverse-search.no-result .reverse-search-info {
+  color: var(--error-color);
+}
+
 /* Object Inspector */
 .webconsole-output-wrapper .object-inspector.tree {
   display: inline-block;
 }
 
 .webconsole-output-wrapper .object-inspector.tree .tree-indent {
   border-inline-start-color: var(--console-output-indent-border-color);
 }
diff --git a/devtools/client/webconsole/actions/history.js b/devtools/client/webconsole/actions/history.js
--- a/devtools/client/webconsole/actions/history.js
+++ b/devtools/client/webconsole/actions/history.js
@@ -6,16 +6,19 @@
 
 "use strict";
 
 const {
   APPEND_TO_HISTORY,
   CLEAR_HISTORY,
   HISTORY_LOADED,
   UPDATE_HISTORY_POSITION,
+  REVERSE_SEARCH_INPUT_CHANGE,
+  REVERSE_SEARCH_BACK,
+  REVERSE_SEARCH_NEXT,
 } = require("devtools/client/webconsole/constants");
 
 /**
  * Append a new value in the history of executed expressions,
  * or overwrite the most recent entry. The most recent entry may
  * contain the last edited input value that was not evaluated yet.
  */
 function appendToHistory(expression) {
@@ -52,14 +55,36 @@ function historyLoaded(entries) {
 function updateHistoryPosition(direction, expression) {
   return {
     type: UPDATE_HISTORY_POSITION,
     direction,
     expression,
   };
 }
 
+function reverseSearchInputChange(value) {
+  return {
+    type: REVERSE_SEARCH_INPUT_CHANGE,
+    value,
+  };
+}
+
+function showReverseSearchNext() {
+  return {
+    type: REVERSE_SEARCH_NEXT,
+  };
+}
+
+function showReverseSearchBack() {
+  return {
+    type: REVERSE_SEARCH_BACK
+  };
+}
+
 module.exports = {
   appendToHistory,
   clearHistory,
   historyLoaded,
   updateHistoryPosition,
+  reverseSearchInputChange,
+  showReverseSearchNext,
+  showReverseSearchBack,
 };
diff --git a/devtools/client/webconsole/actions/ui.js b/devtools/client/webconsole/actions/ui.js
--- a/devtools/client/webconsole/actions/ui.js
+++ b/devtools/client/webconsole/actions/ui.js
@@ -9,34 +9,35 @@
 const { getAllUi } = require("devtools/client/webconsole/selectors/ui");
 const { getMessage } = require("devtools/client/webconsole/selectors/messages");
 
 const {
   FILTER_BAR_TOGGLE,
   INITIALIZE,
   PERSIST_TOGGLE,
   PREFS,
+  REVERSE_SEARCH_INPUT_TOGGLE,
   SELECT_NETWORK_MESSAGE_TAB,
-  SIDEBAR_CLOSE,
   SHOW_OBJECT_IN_SIDEBAR,
+  SIDEBAR_CLOSE,
+  SPLIT_CONSOLE_CLOSE_BUTTON_TOGGLE,
   TIMESTAMPS_TOGGLE,
-  SPLIT_CONSOLE_CLOSE_BUTTON_TOGGLE,
 } = require("devtools/client/webconsole/constants");
 
-function filterBarToggle(show) {
+function filterBarToggle() {
   return (dispatch, getState, {prefsService}) => {
     dispatch({
       type: FILTER_BAR_TOGGLE,
     });
     const {filterBarVisible} = getAllUi(getState());
     prefsService.setBoolPref(PREFS.UI.FILTER_BAR, filterBarVisible);
   };
 }
 
-function persistToggle(show) {
+function persistToggle() {
   return (dispatch, getState, {prefsService}) => {
     dispatch({
       type: PERSIST_TOGGLE,
     });
     const uiState = getAllUi(getState());
     prefsService.setBoolPref(PREFS.UI.PERSIST, uiState.persistLogs);
   };
 }
@@ -97,19 +98,26 @@ function showMessageObjectInSidebar(acto
 
 function showObjectInSidebar(grip) {
   return {
     type: SHOW_OBJECT_IN_SIDEBAR,
     grip,
   };
 }
 
+function reverseSearchInputToggle() {
+  return {
+    type: REVERSE_SEARCH_INPUT_TOGGLE
+  };
+}
+
 module.exports = {
   filterBarToggle,
   initialize,
   persistToggle,
+  reverseSearchInputToggle,
   selectNetworkMessageTab,
-  sidebarClose,
   showMessageObjectInSidebar,
   showObjectInSidebar,
-  timestampsToggle,
+  sidebarClose,
   splitConsoleCloseButtonToggle,
+  timestampsToggle,
 };
diff --git a/devtools/client/webconsole/components/App.js b/devtools/client/webconsole/components/App.js
--- a/devtools/client/webconsole/components/App.js
+++ b/devtools/client/webconsole/components/App.js
@@ -1,61 +1,82 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
+const Services = require("Services");
 const { Component, createFactory } = require("devtools/client/shared/vendor/react");
 const PropTypes = require("devtools/client/shared/vendor/react-prop-types");
 const dom = require("devtools/client/shared/vendor/react-dom-factories");
 const { connect } = require("devtools/client/shared/redux/visibility-handler-connect");
 
 const actions = require("devtools/client/webconsole/actions/index");
 const ConsoleOutput = createFactory(require("devtools/client/webconsole/components/ConsoleOutput"));
 const FilterBar = createFactory(require("devtools/client/webconsole/components/FilterBar"));
 const SideBar = createFactory(require("devtools/client/webconsole/components/SideBar"));
+const ReverseSearchInput = createFactory(require("devtools/client/webconsole/components/ReverseSearchInput"));
 const JSTerm = createFactory(require("devtools/client/webconsole/components/JSTerm"));
 const NotificationBox = createFactory(require("devtools/client/shared/components/NotificationBox").NotificationBox);
 
 const l10n = require("devtools/client/webconsole/webconsole-l10n");
 const { Utils: WebConsoleUtils } = require("devtools/client/webconsole/utils");
 
 const SELF_XSS_OK = l10n.getStr("selfxss.okstring");
 const SELF_XSS_MSG = l10n.getFormatStr("selfxss.msg", [SELF_XSS_OK]);
 
 const {
   getNotificationWithValue,
   PriorityLevels,
 } = require("devtools/client/shared/components/NotificationBox");
 
 const { getAllNotifications } = require("devtools/client/webconsole/selectors/notifications");
-
 const { div } = dom;
 
 /**
  * Console root Application component.
  */
 class App extends Component {
   static get propTypes() {
     return {
       attachRefToHud: PropTypes.func.isRequired,
       dispatch: PropTypes.func.isRequired,
       hud: PropTypes.object.isRequired,
       notifications: PropTypes.object,
       onFirstMeaningfulPaint: PropTypes.func.isRequired,
       serviceContainer: PropTypes.object.isRequired,
       closeSplitConsole: PropTypes.func.isRequired,
       jstermCodeMirror: PropTypes.bool,
+      currentReverseSearchEntry: PropTypes.string,
     };
   }
 
   constructor(props) {
     super(props);
 
     this.onPaste = this.onPaste.bind(this);
+    this.onKeyDown = this.onKeyDown.bind(this);
+  }
+
+  onKeyDown(event) {
+    const {
+      dispatch,
+      hud,
+    } = this.props;
+
+    if (hud.isBrowserConsole) {
+      return;
+    }
+
+    const isMacOS = Services.appinfo.OS === "Darwin";
+
+    if (event.key === "F8" || (isMacOS && event.key === "r" && event.ctrlKey === true)) {
+      dispatch(actions.reverseSearchInputToggle());
+      event.stopPropagation();
+    }
   }
 
   onPaste(event) {
     const {
       dispatch,
       hud,
       notifications,
     } = this.props;
@@ -129,22 +150,24 @@ class App extends Component {
     if (jstermCodeMirror) {
       classNames.push("jsterm-cm");
     }
 
     // Render the entire Console panel. The panel consists
     // from the following parts:
     // * FilterBar - Buttons & free text for content filtering
     // * Content - List of logs & messages
-    // * SideBar - Object inspector
     // * NotificationBox - Notifications for JSTerm (self-xss warning at the moment)
     // * JSTerm - Input command line.
+    // * ReverseSearchInput - Reverse search input.
+    // * SideBar - Object inspector
     return (
       div({
         className: classNames.join(" "),
+        onKeyDown: this.onKeyDown,
         ref: node => {
           this.node = node;
         }},
         div({className: "webconsole-flex-wrapper"},
           FilterBar({
             hidePersistLogsCheckbox: hud.isBrowserConsole,
             serviceContainer: {
               attachRefToHud
@@ -160,16 +183,19 @@ class App extends Component {
             notifications,
           }),
           JSTerm({
             hud,
             serviceContainer,
             onPaste: this.onPaste,
             codeMirrorEnabled: jstermCodeMirror,
           }),
+          ReverseSearchInput({
+            hud,
+          })
         ),
         SideBar({
           serviceContainer,
         }),
       )
     );
   }
 }
diff --git a/devtools/client/webconsole/components/ReverseSearchInput.js b/devtools/client/webconsole/components/ReverseSearchInput.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/components/ReverseSearchInput.js
@@ -0,0 +1,152 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+// React & Redux
+const { Component } = require("devtools/client/shared/vendor/react");
+const dom = require("devtools/client/shared/vendor/react-dom-factories");
+const { connect } = require("devtools/client/shared/vendor/react-redux");
+const PropTypes = require("devtools/client/shared/vendor/react-prop-types");
+
+const { KeyCodes } = require("devtools/client/shared/keycodes");
+
+const actions = require("devtools/client/webconsole/actions/index");
+const {
+  getReverseSearchTotalResults,
+  getReverseSearchResultPosition,
+  getReverseSearchResult,
+} = require("devtools/client/webconsole/selectors/history");
+
+class ReverseSearchInput extends Component {
+  static get propTypes() {
+    return {
+      dispatch: PropTypes.func.isRequired,
+      hud: PropTypes.object.isRequired,
+      reverseSearchResult: PropTypes.string,
+      reverseSearchTotalResults: PropTypes.Array,
+      reverseSearchResultPosition: PropTypes.int,
+      visible: PropTypes.bool,
+    };
+  }
+
+  constructor(props) {
+    super(props);
+
+    this.onInputKeyDown = this.onInputKeyDown.bind(this);
+  }
+
+  componentDidUpdate(prevProps) {
+    const {jsterm} = this.props.hud;
+    if (
+      prevProps.reverseSearchResult !== this.props.reverseSearchResult
+      && this.props.visible
+    ) {
+      jsterm.setInputValue(this.props.reverseSearchResult);
+    }
+  }
+
+  onInputKeyDown(event) {
+    const {
+      keyCode,
+      key,
+      ctrlKey
+    } = event;
+
+    const {
+      dispatch,
+      hud,
+    } = this.props;
+
+    // On Enter, we trigger an execute.
+    if (keyCode === KeyCodes.DOM_VK_RETURN) {
+      event.stopPropagation();
+      hud.jsterm.execute();
+      hud.jsterm.focus();
+      return;
+    }
+
+    // On Escape and Tab, we close the reverse search input and focus the jsterm.
+    if (keyCode === KeyCodes.DOM_VK_ESCAPE) {
+      event.stopPropagation();
+      hud.jsterm.focus();
+      return;
+    }
+
+    if (ctrlKey === true && key.toLowerCase() === "r") {
+      event.stopPropagation();
+      dispatch(actions.showReverseSearchBack());
+      return;
+    }
+
+    if (ctrlKey === true && key.toLowerCase() === "s") {
+      event.stopPropagation();
+      dispatch(actions.showReverseSearchNext());
+    }
+  }
+
+  renderSearchInformation() {
+    const {
+      reverseSearchTotalResults,
+      reverseSearchResultPosition,
+    } = this.props;
+
+    const children = [];
+    if (Number.isInteger(reverseSearchTotalResults)) {
+      if (reverseSearchTotalResults === 0) {
+        children.push("No results");
+      } else {
+        children.push(`${reverseSearchResultPosition} of ${reverseSearchTotalResults}`);
+      }
+    }
+
+    children.push(dom.span({
+      className: "reverse-search-shortcut",
+      title: "Previous: Ctrl + r\nNext: Ctrl + s\nClose: Esc"
+    }, "?"));
+
+    return dom.div({className: "reverse-search-info"}, children);
+  }
+
+  render() {
+    const {
+      dispatch,
+      visible,
+      reverseSearchTotalResults,
+    } = this.props;
+
+    if (!visible) {
+      return null;
+    }
+
+    const classNames = ["reverse-search"];
+    if (reverseSearchTotalResults === 0) {
+      classNames.push("no-result");
+    }
+
+    return dom.div({className: classNames.join(" ")},
+      dom.label({for: "reverse-search-input"}, "History search:"),
+      dom.input({
+        autoFocus: true,
+        id: "reverse-search-input",
+        className: "reverse-search-input",
+        onBlur: () => dispatch(actions.reverseSearchInputToggle()),
+        onKeyDown: this.onInputKeyDown,
+        onInput: ({target}) => dispatch(actions.reverseSearchInputChange(target.value)),
+      }),
+      this.renderSearchInformation(),
+    );
+  }
+}
+
+const mapStateToProps = state => ({
+  visible: state.ui.reverseSearchInputVisible,
+  reverseSearchTotalResults: getReverseSearchTotalResults(state),
+  reverseSearchResultPosition: getReverseSearchResultPosition(state),
+  reverseSearchResult: getReverseSearchResult(state),
+});
+
+const mapDispatchToProps = dispatch => ({dispatch});
+
+module.exports = connect(mapStateToProps, mapDispatchToProps)(ReverseSearchInput);
diff --git a/devtools/client/webconsole/components/moz.build b/devtools/client/webconsole/components/moz.build
--- a/devtools/client/webconsole/components/moz.build
+++ b/devtools/client/webconsole/components/moz.build
@@ -17,10 +17,11 @@ DevToolsModules(
     'FilterCheckbox.js',
     'GripMessageBody.js',
     'JSTerm.js',
     'Message.js',
     'MessageContainer.js',
     'MessageIcon.js',
     'MessageIndent.js',
     'MessageRepeat.js',
+    'ReverseSearchInput.js',
     'SideBar.js'
 )
diff --git a/devtools/client/webconsole/constants.js b/devtools/client/webconsole/constants.js
--- a/devtools/client/webconsole/constants.js
+++ b/devtools/client/webconsole/constants.js
@@ -1,44 +1,48 @@
 /* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const actionTypes = {
+  APPEND_NOTIFICATION: "APPEND_NOTIFICATION",
+  APPEND_TO_HISTORY: "APPEND_TO_HISTORY",
   BATCH_ACTIONS: "BATCH_ACTIONS",
+  CLEAR_HISTORY: "CLEAR_HISTORY",
   DEFAULT_FILTERS_RESET: "DEFAULT_FILTERS_RESET",
   FILTER_BAR_TOGGLE: "FILTER_BAR_TOGGLE",
   FILTER_TEXT_SET: "FILTER_TEXT_SET",
   FILTER_TOGGLE: "FILTER_TOGGLE",
   FILTERS_CLEAR: "FILTERS_CLEAR",
+  HISTORY_LOADED: "HISTORY_LOADED",
   INITIALIZE: "INITIALIZE",
   MESSAGE_CLOSE: "MESSAGE_CLOSE",
   MESSAGE_OPEN: "MESSAGE_OPEN",
   MESSAGE_TABLE_RECEIVE: "MESSAGE_TABLE_RECEIVE",
   MESSAGES_ADD: "MESSAGES_ADD",
   MESSAGES_CLEAR: "MESSAGES_CLEAR",
   NETWORK_MESSAGE_UPDATE: "NETWORK_MESSAGE_UPDATE",
   NETWORK_UPDATE_REQUEST: "NETWORK_UPDATE_REQUEST",
   PERSIST_TOGGLE: "PERSIST_TOGGLE",
   PRIVATE_MESSAGES_CLEAR: "PRIVATE_MESSAGES_CLEAR",
+  REMOVE_NOTIFICATION: "REMOVE_NOTIFICATION",
   REMOVED_ACTORS_CLEAR: "REMOVED_ACTORS_CLEAR",
+  REVERSE_SEARCH_INPUT_TOGGLE: "REVERSE_SEARCH_INPUT_TOGGLE",
   SELECT_NETWORK_MESSAGE_TAB: "SELECT_NETWORK_MESSAGE_TAB",
+  SHOW_OBJECT_IN_SIDEBAR: "SHOW_OBJECT_IN_SIDEBAR",
   SIDEBAR_CLOSE: "SIDEBAR_CLOSE",
-  SHOW_OBJECT_IN_SIDEBAR: "SHOW_OBJECT_IN_SIDEBAR",
+  SPLIT_CONSOLE_CLOSE_BUTTON_TOGGLE: "SPLIT_CONSOLE_CLOSE_BUTTON_TOGGLE",
   TIMESTAMPS_TOGGLE: "TIMESTAMPS_TOGGLE",
-  APPEND_NOTIFICATION: "APPEND_NOTIFICATION",
-  REMOVE_NOTIFICATION: "REMOVE_NOTIFICATION",
-  SPLIT_CONSOLE_CLOSE_BUTTON_TOGGLE: "SPLIT_CONSOLE_CLOSE_BUTTON_TOGGLE",
-  APPEND_TO_HISTORY: "APPEND_TO_HISTORY",
-  CLEAR_HISTORY: "CLEAR_HISTORY",
-  HISTORY_LOADED: "HISTORY_LOADED",
   UPDATE_HISTORY_POSITION: "UPDATE_HISTORY_POSITION",
+  REVERSE_SEARCH_INPUT_CHANGE: "REVERSE_SEARCH_INPUT_CHANGE",
+  REVERSE_SEARCH_NEXT: "REVERSE_SEARCH_NEXT",
+  REVERSE_SEARCH_BACK: "REVERSE_SEARCH_BACK",
 };
 
 const prefs = {
   PREFS: {
     // Filter preferences only have the suffix since they can be used either for the
     // webconsole or the browser console.
     FILTER: {
       ERROR: "filter.error",
diff --git a/devtools/client/webconsole/reducers/history.js b/devtools/client/webconsole/reducers/history.js
--- a/devtools/client/webconsole/reducers/history.js
+++ b/devtools/client/webconsole/reducers/history.js
@@ -7,16 +7,20 @@
 
 const {
   APPEND_TO_HISTORY,
   CLEAR_HISTORY,
   HISTORY_LOADED,
   UPDATE_HISTORY_POSITION,
   HISTORY_BACK,
   HISTORY_FORWARD,
+  REVERSE_SEARCH_INPUT_TOGGLE,
+  REVERSE_SEARCH_INPUT_CHANGE,
+  REVERSE_SEARCH_BACK,
+  REVERSE_SEARCH_NEXT,
 } = require("devtools/client/webconsole/constants");
 
 /**
  * Create default initial state for this reducer.
  */
 function getInitialState() {
   return {
     // Array with history entries
@@ -27,29 +31,41 @@ function getInitialState() {
     // APPEND_TO_HISTORY action is fired.
     position: undefined,
 
     // Backups the original user value (if any) that can be set in
     // the input field. It might be used again if the user doesn't
     // pick up anything from the history and wants to return all
     // the way back to see the original input text.
     originalUserValue: null,
+
+    reverseSearchEnabled: false,
+    currentReverseSearchResults: null,
+    currentReverseSearchResultsPosition: null,
   };
 }
 
 function history(state = getInitialState(), action, prefsState) {
   switch (action.type) {
     case APPEND_TO_HISTORY:
       return appendToHistory(state, prefsState, action.expression);
     case CLEAR_HISTORY:
       return clearHistory(state);
     case HISTORY_LOADED:
       return historyLoaded(state, action.entries);
     case UPDATE_HISTORY_POSITION:
       return updateHistoryPosition(state, action.direction, action.expression);
+    case REVERSE_SEARCH_INPUT_TOGGLE:
+      return reverseSearchInputToggle(state);
+    case REVERSE_SEARCH_INPUT_CHANGE:
+      return reverseSearchInputChange(state, action.value);
+    case REVERSE_SEARCH_BACK:
+      return reverseSearchBack(state);
+    case REVERSE_SEARCH_NEXT:
+      return reverseSearchNext(state);
   }
   return state;
 }
 
 function appendToHistory(state, prefsState, expression) {
   // Clone state
   state = {...state};
   state.entries = [...state.entries];
@@ -122,9 +138,64 @@ function updateHistoryPosition(state, di
       ...state,
       position: state.position + 1,
     };
   }
 
   return state;
 }
 
+function reverseSearchInputToggle(state) {
+  return {
+    ...state,
+    reverseSearchEnabled: !state.reverseSearchEnabled,
+    position: state.reverseSearchEnabled === true ? state.entries.length : undefined,
+    currentReverseSearchResults: null,
+    currentReverseSearchResultsPosition: null,
+  };
+}
+
+function reverseSearchInputChange(state, searchString) {
+  if (searchString === "") {
+    return {
+      ...state,
+      position: undefined,
+      currentReverseSearchResults: null,
+      currentReverseSearchResultsPosition: null,
+    };
+  }
+
+  const matchingEntries = Array.from(new Set(
+    state.entries.filter(entry => entry.toLocaleLowerCase().includes(searchString))));
+
+  return {
+    ...state,
+    position: undefined,
+    currentReverseSearchResults: matchingEntries,
+    currentReverseSearchResultsPosition: matchingEntries.length - 1,
+  };
+}
+
+function reverseSearchBack(state) {
+  const nextPosition = state.currentReverseSearchResultsPosition - 1;
+  if (nextPosition < 0) {
+    return state;
+  }
+
+  return {
+    ...state,
+    currentReverseSearchResultsPosition: nextPosition
+  };
+}
+
+function reverseSearchNext(state) {
+  const previousPosition = state.currentReverseSearchResultsPosition + 1;
+  if (previousPosition >= state.currentReverseSearchResults.length) {
+    return state;
+  }
+
+  return {
+    ...state,
+    currentReverseSearchResultsPosition: previousPosition
+  };
+}
+
 exports.history = history;
diff --git a/devtools/client/webconsole/reducers/ui.js b/devtools/client/webconsole/reducers/ui.js
--- a/devtools/client/webconsole/reducers/ui.js
+++ b/devtools/client/webconsole/reducers/ui.js
@@ -3,38 +3,40 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const {
   FILTER_BAR_TOGGLE,
   INITIALIZE,
+  MESSAGES_CLEAR,
   PERSIST_TOGGLE,
+  REVERSE_SEARCH_INPUT_TOGGLE,
   SELECT_NETWORK_MESSAGE_TAB,
-  SIDEBAR_CLOSE,
   SHOW_OBJECT_IN_SIDEBAR,
+  SIDEBAR_CLOSE,
+  SPLIT_CONSOLE_CLOSE_BUTTON_TOGGLE,
   TIMESTAMPS_TOGGLE,
-  MESSAGES_CLEAR,
-  SPLIT_CONSOLE_CLOSE_BUTTON_TOGGLE,
 } = require("devtools/client/webconsole/constants");
 
 const {
   PANELS,
 } = require("devtools/client/netmonitor/src/constants");
 
 const UiState = (overrides) => Object.freeze(Object.assign({
   filterBarVisible: false,
   initialized: false,
   networkMessageActiveTabId: PANELS.HEADERS,
   persistLogs: false,
   sidebarVisible: false,
   timestampsVisible: true,
   gripInSidebar: null,
   closeButtonVisible: false,
+  reverseSearchInputVisible: false,
 }, overrides));
 
 function ui(state = UiState(), action) {
   switch (action.type) {
     case FILTER_BAR_TOGGLE:
       return Object.assign({}, state, {filterBarVisible: !state.filterBarVisible});
     case PERSIST_TOGGLE:
       return Object.assign({}, state, {persistLogs: !state.persistLogs});
@@ -53,16 +55,18 @@ function ui(state = UiState(), action) {
       return Object.assign({}, state, {sidebarVisible: false, gripInSidebar: null});
     case SHOW_OBJECT_IN_SIDEBAR:
       if (action.grip === state.gripInSidebar) {
         return state;
       }
       return Object.assign({}, state, {sidebarVisible: true, gripInSidebar: action.grip});
     case SPLIT_CONSOLE_CLOSE_BUTTON_TOGGLE:
       return Object.assign({}, state, {closeButtonVisible: action.shouldDisplayButton});
+    case REVERSE_SEARCH_INPUT_TOGGLE:
+      return {...state, reverseSearchInputVisible: !state.reverseSearchInputVisible};
   }
 
   return state;
 }
 
 module.exports = {
   UiState,
   ui,
diff --git a/devtools/client/webconsole/selectors/history.js b/devtools/client/webconsole/selectors/history.js
--- a/devtools/client/webconsole/selectors/history.js
+++ b/devtools/client/webconsole/selectors/history.js
@@ -41,13 +41,49 @@ function getNextHistoryValue(state) {
 
 function getPreviousHistoryValue(state) {
   if (state.history.position > 0) {
     return state.history.entries[state.history.position - 1];
   }
   return null;
 }
 
+function getReverseSearchResult(state) {
+  const { history } = state;
+  const { currentReverseSearchResults, currentReverseSearchResultsPosition } = history;
+
+  if (!Array.isArray(currentReverseSearchResults)
+    || currentReverseSearchResults.length === 0
+    || !Number.isInteger(currentReverseSearchResultsPosition)
+  ) {
+    return null;
+  }
+  return currentReverseSearchResults[currentReverseSearchResultsPosition];
+}
+
+function getReverseSearchResultPosition(state) {
+  const { history } = state;
+  const { currentReverseSearchResultsPosition } = history;
+  if (!Number.isInteger(currentReverseSearchResultsPosition)) {
+    return currentReverseSearchResultsPosition;
+  }
+
+  return currentReverseSearchResultsPosition + 1;
+}
+
+function getReverseSearchTotalResults(state) {
+  const { history } = state;
+  const { currentReverseSearchResults } = history;
+  if (!currentReverseSearchResults) {
+    return null;
+  }
+
+  return currentReverseSearchResults.length;
+}
+
 module.exports = {
   getHistory,
   getHistoryEntries,
   getHistoryValue,
+  getReverseSearchResult,
+  getReverseSearchResultPosition,
+  getReverseSearchTotalResults,
 };
