# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  56b895d82e5ffc249b880089241c622124dd69b6

diff --git a/toolkit/content/widgets/menu.js b/toolkit/content/widgets/menu.js
--- a/toolkit/content/widgets/menu.js
+++ b/toolkit/content/widgets/menu.js
@@ -134,91 +134,98 @@ class MozMenuCaption extends MozMenuBase
       <label class="menu-iconic-highlightable-text" crop="right" aria-hidden="true"></label>
     `));
     this.initializeAttributeInheritance();
   }
 }
 
 customElements.define("menucaption", MozMenuCaption);
 
-// In general, don't render menus inside menupopups until they are going to be visible:
+// In general, wait to render menus inside menupopups until they are going to be visible:
 window.addEventListener("popupshowing", (e) => {
   if (e.originalTarget.ownerDocument != document) {
     return;
   }
   for (let menu of e.originalTarget.querySelectorAll("menu")) {
     menu.render();
   }
 }, { capture: true });
 
-
-let isHiddenWindow = window.location.href == "chrome://browser/content/hiddenWindow.xul";
+let isHiddenWindow = document.documentURI == "chrome://browser/content/hiddenWindow.xul";
 
 class MozMenu extends MozMenuBaseMixin(MozElements.MozElementMixin(XULMenuElement)) {
   static get inheritedAttributes() {
     return {
       ".menubar-text": "value=label,accesskey,crop",
       ".menu-iconic-text": "value=label,accesskey,crop,highlightable",
       ".menu-text": "value=label,accesskey,crop",
       ".menu-iconic-highlightable-text": "text=label,crop,accesskey,highlightable",
       ".menubar-left": "src=image",
       ".menu-iconic-icon": "src=image,triggeringprincipal=iconloadingprincipal,validate",
       ".menu-iconic-accel": "value=acceltext",
       ".menu-right": "_moz-menuactive,disabled",
       ".menu-accel": "value=acceltext",
     };
   }
 
+  get needsEagerRender() {
+    return this.isMenubarChild || this.matches("[sizetopopup] menu") || this.matches("menulist menu");
+  }
+
   get isMenubarChild() {
     return this.matches("menubar > menu");
   }
 
   get isInMenupopup() {
     return this.matches("menupopup menu");
   }
 
   get isIconic() {
     return this.classList.contains("menu-iconic");
   }
 
-  render() {
-    // There are 2 main types of menus:
-    //  (1) direct descendant of a menubar
-    //  (2) all other menus
-    // There is also an "iconic" variation of (1) and (2) based on the class.
-    // To make this as simple as possible, we don't support menus being changed from one
-    // of these types to another after the initial DOM connection. It'd be possible to make
-    // this work by keeping track of the markup we prepend and then removing / re-prepending
-    // during a change, but it's not a feature we use anywhere currently.
-    if (this.renderedOnce) {
-      return;
-    }
-    this.renderedOnce = true;
-
+  get fragment() {
     let {isMenubarChild, isIconic} = this;
-    let frag = null;
+    let fragment = null;
     // Add aria-hidden="true" on all DOM, since XULMenuAccessible handles accessibility here.
     if (isMenubarChild && isIconic) {
+      fragment = document.createDocumentFragment();
+      let image = document.createXULElement("image");
+      image.className = "menubar-left";
+      image.setAttribute("aria-hidden", "true");
+      fragment.append(image);
+      let label = document.createXULElement("label");
+      label.className = "menubar-text";
+      label.setAttribute("crop", "right");
+      label.setAttribute("aria-hidden", "true");
+      fragment.append(label);
       // XXX: Let's just create these elements with JS and see if it's faster:
-      if (!MozMenu.menubarIconicFrag) {
-        MozMenu.menubarIconicFrag = MozXULElement.parseXULToFragment(`
-          <image class="menubar-left" aria-hidden="true"/>
-          <label class="menubar-text" crop="right" aria-hidden="true"/>
-        `);
-      }
-      frag = MozMenu.menubarIconicFrag;
+      // if (!MozMenu.menubarIconicFrag) {
+      //   console.log("1");
+      //   MozMenu.menubarIconicFrag = MozXULElement.parseXULToFragment(`
+      //     <image class="menubar-left" aria-hidden="true"/>
+      //     <label class="menubar-text" crop="right" aria-hidden="true"/>
+      //   `);
+      // }
+      // frag = MozMenu.menubarIconicFrag;
     }
     if (isMenubarChild && !isIconic) {
-      // XXX: Let's just create these elements with JS and see if it's faster:
-      if (!MozMenu.menubarFrag) {
-        MozMenu.menubarFrag = MozXULElement.parseXULToFragment(`
-          <label class="menubar-text" crop="right" aria-hidden="true"/>
-        `);
-      }
-      frag = MozMenu.menubarFrag;
+      fragment = document.createDocumentFragment();
+      let label = document.createXULElement("label");
+      label.className = "menubar-text";
+      label.setAttribute("crop", "right");
+      label.setAttribute("aria-hidden", "true");
+      fragment.append(label);
+      // // XXX: Let's just create these elements with JS and see if it's faster:
+      // if (!MozMenu.menubarFrag) {
+      //   MozMenu.menubarFrag = MozXULElement.parseXULToFragment(`
+      //     <label class="menubar-text" crop="right" aria-hidden="true"/>
+      //   `);
+      // }
+      // frag = MozMenu.menubarFrag;
     }
     if (!isMenubarChild && isIconic) {
       if (!MozMenu.normalIconicFrag) {
         MozMenu.normalIconicFrag = MozXULElement.parseXULToFragment(`
           <hbox class="menu-iconic-left" align="center" pack="center" aria-hidden="true">
             <image class="menu-iconic-icon"/>
           </hbox>
           <label class="menu-iconic-text" flex="1" crop="right" aria-hidden="true"/>
@@ -226,52 +233,70 @@ class MozMenu extends MozMenuBaseMixin(M
           <hbox class="menu-accel-container" anonid="accel" aria-hidden="true">
             <label class="menu-iconic-accel"/>
           </hbox>
           <hbox align="center" class="menu-right" aria-hidden="true">
             <image/>
           </hbox>
        `);
       }
-      frag = MozMenu.normalIconicFrag;
+
+      fragment = document.importNode(MozMenu.normalIconicFrag, true);
     }
     if (!isMenubarChild && !isIconic) {
       if (!MozMenu.normalFrag) {
         MozMenu.normalFrag = MozXULElement.parseXULToFragment(`
           <label class="menu-text" crop="right" aria-hidden="true"/>
           <hbox class="menu-accel-container" anonid="accel" aria-hidden="true">
             <label class="menu-accel"/>
           </hbox>
           <hbox align="center" class="menu-right" aria-hidden="true">
             <image/>
           </hbox>
        `);
       }
-      frag = MozMenu.normalFrag;
+
+      fragment = document.importNode(MozMenu.normalFrag, true);
     }
+    return fragment;
+  }
+
+  render() {
+    // There are 2 main types of menus:
+    //  (1) direct descendant of a menubar
+    //  (2) all other menus
+    // There is also an "iconic" variation of (1) and (2) based on the class.
+    // To make this as simple as possible, we don't support menus being changed from one
+    // of these types to another after the initial DOM connection. It'd be possible to make
+    // this work by keeping track of the markup we prepend and then removing / re-prepending
+    // during a change, but it's not a feature we use anywhere currently.
+    if (this.renderedOnce) {
+      return;
+    }
+    this.renderedOnce = true;
 
     // There will be a <menupopup /> already. Don't clear it out, just put our markup before it.
-    this.prepend(document.importNode(frag, true));
+    this.prepend(this.fragment);
     this.initializeAttributeInheritance();
   }
 
   connectedCallback() {
+    if (this.delayConnectedCallback()) {
+      return;
+    }
+
     // On OSX we will have a bunch of menus in the hidden window. They get converted
     // into native menus based on the host attributes, so the inner DOM doesn't need
     // to be created.
     if (isHiddenWindow) {
       return;
     }
 
-    // Also if we are in a hidden menupopup then don't render until it's opened.
-    if (this.isInMenupopup) {
-      return;
-    }
-
-    if (this.delayConnectedCallback()) {
+    // Wait until we are going to be visible or required for sizing a popup.
+    if (!this.needsEagerRender) {
       return;
     }
 
     this.render();
   }
 }
 
 customElements.define("menu", MozMenu);
