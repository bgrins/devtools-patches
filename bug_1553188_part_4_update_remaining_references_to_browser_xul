# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1559086842 25200
#      Tue May 28 16:40:42 2019 -0700
# Node ID b5776768b500146c844dc273a5451037d9a4ea4d
# Parent  b4f2b960b45228663b7b03ba2cd04d7bdbe9adab
Bug 1553188 - Part 4 - Update remaining references to browser.xul

These are generally:
- Code comments to browser.xhtml
- Testcases, assertions that were mostly using browser.xul as a generic chrome URL
- References to the browser.xul path in tree

Differential Revision: https://phabricator.services.mozilla.com/D33208

diff --git a/browser/base/content/browser.xhtml b/browser/base/content/browser.xhtml
--- a/browser/base/content/browser.xhtml
+++ b/browser/base/content/browser.xhtml
@@ -70,17 +70,17 @@
         sizemode="normal"
         retargetdocumentfocus="urlbar"
         persist="screenX screenY width height sizemode"
 #ifdef BROWSER_XHTML
         mozpersist=""
 #endif
         >
 
-# All JS files which are needed by browser.xul and other top level windows to
+# All JS files which are needed by browser.xhtml and other top level windows to
 # support MacOS specific features *must* go into the global-scripts.inc file so
 # that they can be shared with macWindow.inc.xul.
 #include global-scripts.inc
 
 <script>
   /* eslint-env mozilla/browser-window */
   Services.scriptloader.loadSubScript("chrome://global/content/contentAreaUtils.js", this);
   Services.scriptloader.loadSubScript("chrome://browser/content/browser-captivePortal.js", this);
diff --git a/browser/base/content/global-scripts.inc b/browser/base/content/global-scripts.inc
--- a/browser/base/content/global-scripts.inc
+++ b/browser/base/content/global-scripts.inc
@@ -1,15 +1,15 @@
 # -*- Mode: Java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-# JS files which are needed by browser.xul but no other top level windows to
-# support MacOS specific features should be loaded directly from browser.xul
+# JS files which are needed by browser.xhtml but no other top level windows to
+# support MacOS specific features should be loaded directly from browser.xhtml
 # rather than this file.
 
 # If you update this list, you may need to add a mapping within the following
 # file so that ESLint works correctly:
 # tools/lint/eslint/eslint-plugin-mozilla/lib/environments/browser-window.js
 
 <script type="text/javascript">
 var {Services} = ChromeUtils.import("resource://gre/modules/Services.jsm");
diff --git a/browser/base/content/macWindow.inc.xul b/browser/base/content/macWindow.inc.xul
--- a/browser/base/content/macWindow.inc.xul
+++ b/browser/base/content/macWindow.inc.xul
@@ -1,27 +1,27 @@
 # -*- Mode: HTML -*-
 #
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 # This include file should only contain things that are needed to support MacOS
 # specific features that are needed for all top level windows. If the feature is
-# also needed in browser.xul, it should go in one of the various include files
-# below that are shared with browser.xul. When including this file,
+# also needed in browser.xhtml, it should go in one of the various include files
+# below that are shared with browser.xhtml. When including this file,
 # browser-doctype.inc must also be included.
 
-# All JS files which are needed by browser.xul and other top level windows to
+# All JS files which are needed by browser.xhtml and other top level windows to
 # support MacOS specific features *must* go into the global-scripts.inc file so
-# that they can be shared with browser.xul.
+# that they can be shared with browser.xhtml.
 #include global-scripts.inc
 
 <script src="chrome://browser/content/nonbrowser-mac.js"></script>
 
 # All sets except for popupsets (commands, keys, and stringbundles)
 # *must* go into the browser-sets.inc file so that they can be shared with
-# browser.xul
+# browser.xhtml
 #include browser-sets.inc
 
 # The entire main menubar is placed into browser-menubar.inc, so that it can be
-# shared with browser.xul.
+# shared with browser.xhtml.
 #include browser-menubar.inc
diff --git a/browser/base/content/test/static/browser_all_files_referenced.js b/browser/base/content/test/static/browser_all_files_referenced.js
--- a/browser/base/content/test/static/browser_all_files_referenced.js
+++ b/browser/base/content/test/static/browser_all_files_referenced.js
@@ -698,17 +698,17 @@ add_task(async function checkAllTheFiles
   for (let uri of uris) {
     uri = convertToCodeURI(uri.spec);
     if ((uri.startsWith("chrome://") || uri.startsWith("resource://")) &&
         isDevtools == hasDevtoolsPrefix(uri))
       chromeFiles.push(uri);
   }
 
   if (isDevtools) {
-    // chrome://devtools/skin/devtools-browser.css is included from browser.xul
+    // chrome://devtools/skin/devtools-browser.css is included from browser.xhtml
     gReferencesFromCode.set(AppConstants.BROWSER_CHROME_URL, null);
     // devtools' css is currently included from browser.css, see bug 1204810.
     gReferencesFromCode.set("chrome://browser/skin/browser.css", null);
   }
 
   let isUnreferenced = file => {
     if (gExceptionPaths.some(e => file.startsWith(e)))
       return false;
diff --git a/browser/components/customizableui/CustomizeMode.jsm b/browser/components/customizableui/CustomizeMode.jsm
--- a/browser/components/customizableui/CustomizeMode.jsm
+++ b/browser/components/customizableui/CustomizeMode.jsm
@@ -102,17 +102,17 @@ function CustomizeMode(aWindow) {
 
   let content = this.$("customization-content-container");
   if (!content) {
     this.window.MozXULElement.insertFTLIfNeeded("browser/customizeMode.ftl");
     let container = this.$("customization-container");
     container.replaceChild(this.window.MozXULElement.parseXULToFragment(container.firstChild.data), container.lastChild);
   }
   // There are two palettes - there's the palette that can be overlayed with
-  // toolbar items in browser.xul. This is invisible, and never seen by the
+  // toolbar items in browser.xhtml. This is invisible, and never seen by the
   // user. Then there's the visible palette, which gets populated and displayed
   // to the user when in customizing mode.
   this.visiblePalette = this.$(kPaletteId);
   this.pongArena = this.$("customization-pong-arena");
 
   if (this._canDrawInTitlebar()) {
     this._updateTitlebarCheckbox();
     this._updateDragSpaceCheckbox();
diff --git a/browser/components/extensions/test/browser/browser_ext_browserAction_pageAction_icon_permissions.js b/browser/components/extensions/test/browser/browser_ext_browserAction_pageAction_icon_permissions.js
--- a/browser/components/extensions/test/browser/browser_ext_browserAction_pageAction_icon_permissions.js
+++ b/browser/components/extensions/test/browser/browser_ext_browserAction_pageAction_icon_permissions.js
@@ -133,17 +133,17 @@ add_task(async function testSecureURLsDe
       "browser_action": {},
       "page_action": {},
     },
 
     background: function() {
       browser.tabs.query({active: true, currentWindow: true}, tabs => {
         let tabId = tabs[0].id;
 
-        let urls = ["chrome://browser/content/browser.xul",
+        let urls = ["chrome://browser/content/browser.xhtml",
                     "javascript:true"];
 
         let promises = [];
         for (let url of urls) {
           for (let api of ["pageAction", "browserAction"]) {
             promises.push(
               browser.test.assertRejects(
                 browser[api].setIcon({tabId, path: url}),
@@ -164,17 +164,17 @@ add_task(async function testSecureURLsDe
   await extension.awaitFinish("setIcon security tests");
   await extension.unload();
 });
 
 
 add_task(async function testSecureManifestURLsDenied() {
   // Test URLs included in the manifest.
 
-  let urls = ["chrome://browser/content/browser.xul",
+  let urls = ["chrome://browser/content/browser.xhtml",
               "javascript:true"];
 
   let apis = ["browser_action", "page_action"];
 
   for (let url of urls) {
     for (let api of apis) {
       info(`TEST ${api} icon url: ${url}`);
 
diff --git a/browser/components/extensions/test/browser/browser_ext_pageAction_popup.js b/browser/components/extensions/test/browser/browser_ext_pageAction_popup.js
--- a/browser/components/extensions/test/browser/browser_ext_pageAction_popup.js
+++ b/browser/components/extensions/test/browser/browser_ext_pageAction_popup.js
@@ -207,17 +207,17 @@ add_task(async function testPageActionPo
   let panel = document.getElementById(panelId);
   is(panel, null, "pageAction panel removed from document");
 
   BrowserTestUtils.removeTab(tab);
 });
 
 
 add_task(async function testPageActionSecurity() {
-  const URL = "chrome://browser/content/browser.xul";
+  const URL = "chrome://browser/content/browser.xhtml";
 
   let apis = ["browser_action", "page_action"];
 
   for (let api of apis) {
     info(`TEST ${api} icon url: ${URL}`);
 
     let messages = [/Access to restricted URI denied/];
 
diff --git a/browser/components/places/content/places.js b/browser/components/places/content/places.js
--- a/browser/components/places/content/places.js
+++ b/browser/components/places/content/places.js
@@ -175,17 +175,17 @@ var PlacesOrganizer = {
     if (AppConstants.platform === "macosx") {
       // 1. Map Edit->Find command to OrganizerCommand_find:all.  Need to map
       // both the menuitem and the Find key.
       let findMenuItem = document.getElementById("menu_find");
       findMenuItem.setAttribute("command", "OrganizerCommand_find:all");
       let findKey = document.getElementById("key_find");
       findKey.setAttribute("command", "OrganizerCommand_find:all");
 
-      // 2. Disable some keybindings from browser.xul
+      // 2. Disable some keybindings from browser.xhtml
       let elements = ["cmd_handleBackspace", "cmd_handleShiftBackspace"];
       for (let i = 0; i < elements.length; i++) {
         document.getElementById(elements[i]).setAttribute("disabled", "true");
       }
     }
 
     // remove the "Properties" context-menu item, we've our own details pane
     document.getElementById("placesContext")
diff --git a/browser/components/pocket/content/SaveToPocket.jsm b/browser/components/pocket/content/SaveToPocket.jsm
--- a/browser/components/pocket/content/SaveToPocket.jsm
+++ b/browser/components/pocket/content/SaveToPocket.jsm
@@ -235,17 +235,17 @@ var SaveToPocket = {
   onPrefChange(pref, oldValue, newValue) {
     if (!newValue) {
       Services.mm.broadcastAsyncMessage("Reader:RemoveButton", { id: "pocket-button" });
       PocketOverlay.shutdown();
       Services.obs.addObserver(this, "browser-delayed-startup-finished");
     } else {
       Services.obs.removeObserver(this, "browser-delayed-startup-finished");
       PocketOverlay.startup();
-      // The title for the button is extracted from browser.xul where it comes from a DTD.
+      // The title for the button is extracted from browser.xhtml where it comes from a DTD.
       // If we don't have this, there's also no possibility of there being a reader
       // mode tab already loaded. We'll get an Reader:OnSetup message when that happens.
       if (this._readerButtonData.title) {
         Services.mm.broadcastAsyncMessage("Reader:AddButton", this._readerButtonData);
       }
     }
     this.updateElements(newValue);
   },
diff --git a/browser/components/search/content/search.xml b/browser/components/search/content/search.xml
--- a/browser/components/search/content/search.xml
+++ b/browser/components/search/content/search.xml
@@ -166,17 +166,17 @@
           // hamburger panel closes. Don't open in that spurious event.
           if (document.documentElement.getAttribute("customizing") == "true") {
             return;
           }
 
           let popup = this.popup;
           if (!popup.mPopupOpen) {
             // Initially the panel used for the searchbar (PopupSearchAutoComplete
-            // in browser.xul) is hidden to avoid impacting startup / new
+            // in browser.xhtml) is hidden to avoid impacting startup / new
             // window performance. The base binding's openPopup would normally
             // call the overriden openAutocompletePopup in
             // browser-search-autocomplete-result-popup binding to unhide the popup,
             // but since we're overriding openPopup we need to unhide the panel
             // ourselves.
             popup.hidden = false;
 
             // Don't roll up on mouse click in the anchor for the search UI.
diff --git a/browser/themes/shared/compacttheme.inc.css b/browser/themes/shared/compacttheme.inc.css
--- a/browser/themes/shared/compacttheme.inc.css
+++ b/browser/themes/shared/compacttheme.inc.css
@@ -1,13 +1,13 @@
 % This Source Code Form is subject to the terms of the Mozilla Public
 % License, v. 2.0. If a copy of the MPL was not distributed with this
 % file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-/* compacttheme.css is loaded in browser.xul after browser.css when it is
+/* compacttheme.css is loaded in browser.xhtml after browser.css when it is
    preffed on.  The bulk of the styling is here in the shared file, but
    there are overrides for each platform in their compacttheme.css files. */
 
 :root:-moz-lwtheme-brighttext {
   /* !important to override LightweightThemeConsumer.jsm */
   --autocomplete-popup-background: #2A2A2E !important;
   --autocomplete-popup-highlight-background: #0060DF;
 }
diff --git a/devtools/client/debugger/packages/devtools-reps/src/reps/stubs/document.js b/devtools/client/debugger/packages/devtools-reps/src/reps/stubs/document.js
--- a/devtools/client/debugger/packages/devtools-reps/src/reps/stubs/document.js
+++ b/devtools/client/debugger/packages/devtools-reps/src/reps/stubs/document.js
@@ -42,13 +42,13 @@ stubs.set("XULDocument", {
   frozen: false,
   sealed: false,
   ownPropertyLength: 1,
   preview: {
     kind: "DOMNode",
     nodeType: 9,
     nodeName: "#document",
     isConnected: true,
-    location: "chrome://browser/content/browser.xul",
+    location: "chrome://browser/content/browser.xhtml",
   },
 });
 
 module.exports = stubs;
diff --git a/devtools/client/framework/browser-menus.js b/devtools/client/framework/browser-menus.js
--- a/devtools/client/framework/browser-menus.js
+++ b/devtools/client/framework/browser-menus.js
@@ -244,17 +244,17 @@ function addTopLevelItems(doc) {
   for (const node of menuItems.children) {
     nodes.push(node);
   }
   FragmentsCache.set(doc, nodes);
 
   const menu = doc.getElementById("menuWebDeveloperPopup");
   menu.appendChild(menuItems);
 
-  // There is still "Page Source" menuitem hardcoded into browser.xul. Instead
+  // There is still "Page Source" menuitem hardcoded into browser.xhtml. Instead
   // of manually inserting everything around it, move it to the expected
   // position.
   const pageSource = doc.getElementById("menu_pageSource");
   const endSeparator = doc.getElementById("devToolsEndSeparator");
   menu.insertBefore(pageSource, endSeparator);
 }
 
 /**
diff --git a/devtools/client/framework/test/browser_toolbox_custom_host.js b/devtools/client/framework/test/browser_toolbox_custom_host.js
--- a/devtools/client/framework/test/browser_toolbox_custom_host.js
+++ b/devtools/client/framework/test/browser_toolbox_custom_host.js
@@ -29,17 +29,17 @@ add_task(async function() {
   let iframe = document.createXULElement("iframe");
   document.documentElement.appendChild(iframe);
 
   const tab = await addTab(TEST_URL);
   let target = await TargetFactory.forTab(tab);
   const options = { customIframe: iframe };
   let toolbox = await gDevTools.showToolbox(target, null, Toolbox.HostType.CUSTOM, options);
 
-  is(toolbox.win.top, window, "Toolbox is included in browser.xul");
+  is(toolbox.win.top, window, "Toolbox is included in browser.xhtml");
   is(toolbox.doc, iframe.contentDocument, "Toolbox is in the custom iframe");
 
   iframe.remove();
   await toolbox.destroy();
   await messageReceived;
 
   iframe = toolbox = target = null;
 });
diff --git a/devtools/client/framework/test/browser_toolbox_toggle.js b/devtools/client/framework/test/browser_toolbox_toggle.js
--- a/devtools/client/framework/test/browser_toolbox_toggle.js
+++ b/devtools/client/framework/test/browser_toolbox_toggle.js
@@ -14,17 +14,17 @@ var {Toolbox} = require("devtools/client
 
 add_task(async function() {
   // Make sure this test starts with the selectedTool pref cleared. Previous
   // tests select various tools, and that sets this pref.
   Services.prefs.clearUserPref("devtools.toolbox.selectedTool");
 
   // Test with ACCEL+SHIFT+I / ACCEL+ALT+I (MacOSX) ; modifiers should match :
   // - toolbox-key-toggle in devtools/client/framework/toolbox-window.xul
-  // - key_devToolboxMenuItem in browser/base/content/browser.xul
+  // - key_devToolboxMenuItem in browser/base/content/browser.xhtml
   info("Test toggle using CTRL+SHIFT+I/CMD+ALT+I");
   await testToggle("I", {
     accelKey: true,
     shiftKey: !navigator.userAgent.match(/Mac/),
     altKey: navigator.userAgent.match(/Mac/),
   });
 
   // Test with F12 ; no modifiers
diff --git a/devtools/client/themes/splitters.css b/devtools/client/themes/splitters.css
--- a/devtools/client/themes/splitters.css
+++ b/devtools/client/themes/splitters.css
@@ -1,13 +1,13 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
-/* This file is loaded by both browser.xul and toolbox.xul. Therefore, rules
+/* This file is loaded by both browser.xhtml and toolbox.xul. Therefore, rules
    defined here can not rely on toolbox.xul variables. */
 
 /* Splitters */
 
 :root {
   /* Draggable splitter element size */
   --devtools-splitter-element-size: 1px;
   --devtools-emphasized-splitter-element-size: 2px;
@@ -30,17 +30,17 @@
   --devtools-splitter-inline-end-width: 4px;
 
   --devtools-vertical-splitter-min-width: calc(var(--devtools-splitter-inline-start-width) +
                                                var(--devtools-splitter-inline-end-width) +
                                                var(--devtools-splitter-element-size));
 }
 
 #appcontent[devtoolstheme="light"] {
-  /* These variables are used in browser.xul but inside the toolbox they are overridden by --theme-splitter-color */
+  /* These variables are used in browser.xhtml but inside the toolbox they are overridden by --theme-splitter-color */
   --devtools-splitter-color: #dde1e4;
 }
 
 #appcontent[devtoolstheme="dark"] {
   --devtools-splitter-color: #42484f;
 }
 
 splitter.devtools-horizontal-splitter,
diff --git a/devtools/client/webconsole/test/mochitest/browser_console.js b/devtools/client/webconsole/test/mochitest/browser_console.js
--- a/devtools/client/webconsole/test/mochitest/browser_console.js
+++ b/devtools/client/webconsole/test/mochitest/browser_console.js
@@ -98,17 +98,17 @@ async function testMessages(hud) {
   await fetch(TEST_IMAGE);
   console.log("fetch loaded");
 
   await checkMessageExists(hud, "message from chrome window");
   await checkMessageExists(hud,
     "error thrown from test-cu-reporterror.js via Cu.reportError()");
   await checkMessageExists(hud, "error from nuked globals");
   await checkMessageExists(hud, "message from content window");
-  await checkMessageExists(hud, "browser.xul");
+  await checkMessageExists(hud, "browser.xhtml");
   await checkMessageExists(hud, "framescript-eval");
   await checkMessageExists(hud, "framescript-message");
   await checkMessageExists(hud, "foobarException");
   await checkMessageExists(hud, "test-console.html");
   await checkMessageExists(hud, "404.html");
   await checkMessageExists(hud, "test-image.png");
 }
 
diff --git a/devtools/docs/contributing/css.md b/devtools/docs/contributing/css.md
--- a/devtools/docs/contributing/css.md
+++ b/devtools/docs/contributing/css.md
@@ -78,17 +78,17 @@ Example:
 ## HDPI support
 
 It's recommended to use SVG since it keeps the CSS clean when supporting multiple resolutions. However, if only 1x and 2x PNG assets are available, you can use this `@media` query to target higher density displays (HDPI): `@media (min-resolution: 1.1dppx)`. <!--TODO an example would be good here-->
 
 ## Performance
 
 * Read [Writing Efficient CSS](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Writing_efficient_CSS).
 * Use an iframe where possible so your rules are scoped to the smallest possible set of nodes.<!--TODO: is this still true? and also refine exactly when it is appropriate to use an iframe. Examples might help-->
-* If your CSS is used in `browser.xul`, you need to take special care with performance:
+* If your CSS is used in `browser.xhtml`, you need to take special care with performance:
  * Descendent selectors should be avoided.
  * If possible, find ways to use **only** id selectors, class selectors and selector groups.
 
 ## Localization
 
 ### Text Direction
 * For margins, padding and borders, use `inline-start`/`inline-end` rather than `left`/`right`.
  * Example: Use `margin-inline-start: 3px;` not `margin-left: 3px`.
diff --git a/docshell/test/chrome/test_bug789773.xul b/docshell/test/chrome/test_bug789773.xul
--- a/docshell/test/chrome/test_bug789773.xul
+++ b/docshell/test/chrome/test_bug789773.xul
@@ -54,16 +54,16 @@ https://bugzilla.mozilla.org/show_bug.cg
 
    // Open the window.
    var popup = window.open("about:mozilla", "_blank", "width=640,height=400");
 
    // Wait for the window to load.
    function finishTest() {
      webProgress.removeProgressListener(testProgressListener);
      ok(true, "Loaded the popup window without spinning forever in the event loop!");
-     ok(calledListenerForBrowserChromeURL, "Should have called the progress listener for browser.xul");
+     ok(calledListenerForBrowserChromeURL, "Should have called the progress listener for browser.xhtml");
      popup.close();
      SimpleTest.finish();
    }
 
   ]]>
   </script>
 </window>
diff --git a/dom/base/nsWindowMemoryReporter.h b/dom/base/nsWindowMemoryReporter.h
--- a/dom/base/nsWindowMemoryReporter.h
+++ b/dom/base/nsWindowMemoryReporter.h
@@ -73,17 +73,17 @@
  * - <category> is "active", "cached", "detached", or "ghost", as described
  *   above.
  *
  * - <top-outer-id> is the window id of the top outer window (i.e. the tab, or
  *   the top level chrome window).  Exposing this ensures that each tab gets
  *   its own sub-tree, even if multiple tabs are showing the same URI.
  *
  * - <top-uri> is the URI of the top window.  Excepting special windows (such
- *   as browser.xul or hiddenWindow.html) it's what the address bar shows for
+ *   as browser.xhtml or hiddenWindow.html) it's what the address bar shows for
  *   the tab.
  *
  */
 class nsWindowMemoryReporter final : public nsIMemoryReporter,
                                      public nsIObserver,
                                      public nsSupportsWeakReference {
  public:
   NS_DECL_ISUPPORTS
diff --git a/dom/plugins/test/testplugin/nptest.cpp b/dom/plugins/test/testplugin/nptest.cpp
--- a/dom/plugins/test/testplugin/nptest.cpp
+++ b/dom/plugins/test/testplugin/nptest.cpp
@@ -1053,17 +1053,17 @@ NPError NPP_New(NPMIMEType pluginType, N
     NPError err = NPN_GetURLNotify(instance, instanceData->testUrl.c_str(),
                                    nullptr, static_cast<void*>(&kNotifyData));
     if (err != NPERR_NO_ERROR) {
       instanceData->err << "NPN_GetURLNotify returned " << err;
     }
   }
 
   if ((instanceData->bugMode == 813906) && instanceData->frame.length()) {
-    bug813906(instance, "f", "browser.xul", instanceData->frame.c_str());
+    bug813906(instance, "f", "browser.xhtml", instanceData->frame.c_str());
   }
 
   return NPERR_NO_ERROR;
 }
 
 NPError NPP_Destroy(NPP instance, NPSavedData** save) {
   InstanceData* instanceData = (InstanceData*)(instance->pdata);
 
diff --git a/services/common/tests/unit/test_utils_makeURI.js b/services/common/tests/unit/test_utils_makeURI.js
--- a/services/common/tests/unit/test_utils_makeURI.js
+++ b/services/common/tests/unit/test_utils_makeURI.js
@@ -32,17 +32,17 @@ function _test_makeURI() {
   let uris4 = "https://mozillalabs.com/multi/path";
   Assert.equal(CommonUtils.makeURI(uris4).spec, uris4);
   let uris5 = "https://mozillalabs.com/?query";
   Assert.equal(CommonUtils.makeURI(uris5).spec, uris5);
   let uris6 = "https://mozillalabs.com/#hash";
   Assert.equal(CommonUtils.makeURI(uris6).spec, uris6);
 
   _("Check chrome uris");
-  let uric1 = "chrome://browser/content/browser.xul";
+  let uric1 = "chrome://browser/content/browser.xhtml";
   Assert.equal(CommonUtils.makeURI(uric1).spec, uric1);
   let uric2 = "chrome://browser/skin/browser.css";
   Assert.equal(CommonUtils.makeURI(uric2).spec, uric2);
   let uric3 = "chrome://browser/locale/browser.dtd";
   Assert.equal(CommonUtils.makeURI(uric3).spec, uric3);
 
   _("Check about uris");
   let uria1 = "about:weave";
diff --git a/testing/talos/talos/tests/tart/addon/content/tab-min-width-1px.css b/testing/talos/talos/tests/tart/addon/content/tab-min-width-1px.css
--- a/testing/talos/talos/tests/tart/addon/content/tab-min-width-1px.css
+++ b/testing/talos/talos/tests/tart/addon/content/tab-min-width-1px.css
@@ -1,11 +1,11 @@
 @namespace url("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul");
 
 /*
 Overlay this style rule at tart/chrome.manifest (but it seems to regress tab perf):
-style chrome://browser/content/browser.xul chrome://tart/content/tab-min-width-1px.css
+style chrome://browser/content/browser.xhtml chrome://tart/content/tab-min-width-1px.css
 */
 
 /* Prevent overflow while adding many tabs */
 .tabbrowser-tab[fadein]:not([pinned]) {
   min-width: 1px !important;
 }
diff --git a/testing/talos/talos/tests/tart/addon/content/tart.js b/testing/talos/talos/tests/tart/addon/content/tart.js
--- a/testing/talos/talos/tests/tart/addon/content/tart.js
+++ b/testing/talos/talos/tests/tart/addon/content/tart.js
@@ -120,20 +120,20 @@ Tart.prototype = {
       win.gNavToolbox.removeEventListener("aftercustomization", handler);
     },
   },
 
   clickNewTab() {
     this._endDetection = this.tabDetector;
     this._win.BrowserOpenTab();
     // Modifying the style for each tab right after opening seems like it could regress performance,
-    // However, overlaying a global style over browser.xul actually ends up having greater ovrehead,
+    // However, overlaying a global style over browser.xhtml actually ends up having greater ovrehead,
     // especially while closing the last of many tabs (a noticeable ~250ms delay before expanding the rest).
     // To overlay the style globally, add at tart/chrome.manifest:
-    // style chrome://browser/content/browser.xul chrome://tart/content/tab-min-width-1px.css
+    // style chrome://browser/content/browser.xhtml chrome://tart/content/tab-min-width-1px.css
     // where the file tab-min-width-1px.css is:
     // .tabbrowser-tab[fadein]:not([pinned]) { min-width: 1px !important; }
     // Additionally, the global style overlay apparently messes with intervals recording when layout.frame_rate=10000:
     // Using the startFrameTimeRecording API, the first interval appears extra long (~1000ms) even with much widget tickling,
     // Per-tab min-width on open it is then.
 
     // --> many-tabs case which requires modified max-width will not go into v1. No need for now.
     // this._win.gBrowser.selectedTab.style.minWidth = "1px"; // Prevent overflow regrdless of DPI scale.
diff --git a/toolkit/components/places/tests/history/test_async_history_api.js b/toolkit/components/places/tests/history/test_async_history_api.js
--- a/toolkit/components/places/tests/history/test_async_history_api.js
+++ b/toolkit/components/places/tests/history/test_async_history_api.js
@@ -338,17 +338,17 @@ add_task(async function test_non_addable
   // Array of protocols that nsINavHistoryService::canAddURI returns false for.
   const URLS = [
     "about:config",
     "imap://cyrus.andrew.cmu.edu/archive.imap",
     "news://new.mozilla.org/mozilla.dev.apps.firefox",
     "mailbox:Inbox",
     "moz-anno:favicon:http://mozilla.org/made-up-favicon",
     "view-source:http://mozilla.org",
-    "chrome://browser/content/browser.xul",
+    "chrome://browser/content/browser.xhtml",
     "resource://gre-resources/hiddenWindow.html",
     "data:,Hello%2C%20World!",
     "javascript:alert('hello wolrd!');",
     "blob:foo",
   ];
   let places = [];
   URLS.forEach(function(url) {
     try {
diff --git a/toolkit/components/places/tests/history/test_insertMany.js b/toolkit/components/places/tests/history/test_insertMany.js
--- a/toolkit/components/places/tests/history/test_insertMany.js
+++ b/toolkit/components/places/tests/history/test_insertMany.js
@@ -26,17 +26,17 @@ add_task(async function test_error_cases
   Assert.throws(
     () => PlacesUtils.history.insertMany([validPageInfo, {}]),
     /Error: PageInfo: The following properties were expected/,
     "passing a second invalid PageInfo object to History.insertMany should throw an Error"
   );
 });
 
 add_task(async function test_insertMany() {
-  const BAD_URLS = ["about:config", "chrome://browser/content/browser.xul"];
+  const BAD_URLS = ["about:config", "chrome://browser/content/browser.xhtml"];
   const GOOD_URLS = [1, 2, 3].map(x => { return `http://mozilla.com/${x}`; });
 
   let makePageInfos = async function(urls, filter = x => x) {
     let pageInfos = [];
     for (let url of urls) {
       let uri = NetUtil.newURI(url);
 
       let pageInfo = {
diff --git a/toolkit/components/places/tests/unit/test_isURIVisited.js b/toolkit/components/places/tests/unit/test_isURIVisited.js
--- a/toolkit/components/places/tests/unit/test_isURIVisited.js
+++ b/toolkit/components/places/tests/unit/test_isURIVisited.js
@@ -11,17 +11,17 @@ const SCHEMES = {
   "about:": false,
 // nsIIOService.newURI() can throw if e.g. the app knows about imap://
 // but the account is not set up and so the URL is invalid for it.
 //  "imap://": false,
   "news://": false,
   "mailbox:": false,
   "moz-anno:favicon:http://": false,
   "view-source:http://": false,
-  "chrome://browser/content/browser.xul?": false,
+  "chrome://browser/content/browser.xhtml?": false,
   "resource://": false,
   "data:,": false,
   "javascript:": false,
 };
 
 add_task(async function test_isURIVisited() {
   let history = Cc["@mozilla.org/browser/history;1"]
                   .getService(Ci.mozIAsyncHistory);
diff --git a/toolkit/components/places/tests/unit/test_isvisited.js b/toolkit/components/places/tests/unit/test_isvisited.js
--- a/toolkit/components/places/tests/unit/test_isvisited.js
+++ b/toolkit/components/places/tests/unit/test_isvisited.js
@@ -34,17 +34,17 @@ add_task(async function test_execute() {
   // see CanAddURI() in nsNavHistory.cpp
   const URLS = [
     "about:config",
     "imap://cyrus.andrew.cmu.edu/archive.imap",
     "news://new.mozilla.org/mozilla.dev.apps.firefox",
     "mailbox:Inbox",
     "moz-anno:favicon:http://mozilla.org/made-up-favicon",
     "view-source:http://mozilla.org",
-    "chrome://browser/content/browser.xul",
+    "chrome://browser/content/browser.xhtml",
     "resource://gre-resources/hiddenWindow.html",
     "data:,Hello%2C%20World!",
     "javascript:alert('hello wolrd!');",
     "http://localhost/" + "a".repeat(1984),
   ];
   for (let currentURL of URLS) {
     try {
       var cantAddUri = uri(currentURL);
diff --git a/toolkit/components/xulstore/tests/xpcshell/test_XULStore.js b/toolkit/components/xulstore/tests/xpcshell/test_XULStore.js
--- a/toolkit/components/xulstore/tests/xpcshell/test_XULStore.js
+++ b/toolkit/components/xulstore/tests/xpcshell/test_XULStore.js
@@ -2,17 +2,17 @@
    http://creativecommons.org/publicdomain/zero/1.0/◦
 */
 
 "use strict";
 
 const {Services} = ChromeUtils.import("resource://gre/modules/Services.jsm");
 
 var XULStore = null;
-var browserURI = "chrome://browser/content/browser.xul";
+var browserURI = "chrome://browser/content/browser.xhtml";
 var aboutURI = "about:config";
 
 function run_test() {
   do_get_profile();
   run_next_test();
 }
 
 function checkValue(uri, id, attr, reference) {
diff --git a/toolkit/content/tests/chrome/window_browser_drop.xul b/toolkit/content/tests/chrome/window_browser_drop.xul
--- a/toolkit/content/tests/chrome/window_browser_drop.xul
+++ b/toolkit/content/tests/chrome/window_browser_drop.xul
@@ -191,17 +191,17 @@ async function dropLinksOnBrowser(browse
                           data: "data:text/html,bad" } ] ],
                     "text/plain data url drop on browser " + type);
 
   // Dropping a chrome url should fail as we don't have a source node set,
   // defaulting to a source of file:///
   await expectLink(browser,
                     [],
                     [ [ { type: "text/x-moz-url",
-                          data: "chrome://browser/content/browser.xul" } ] ],
+                          data: "chrome://browser/content/browser.xhtml" } ] ],
                     "text/x-moz-url chrome url drop on browser " + type);
 
   if (browser.type == "content") {
     await ContentTask.spawn(browser, null, function() {
       content.window.stopMode = true;
     });
 
     // stopPropagation should not prevent the browser link handling from occuring
diff --git a/toolkit/content/tests/unit/test_contentAreaUtils.js b/toolkit/content/tests/unit/test_contentAreaUtils.js
--- a/toolkit/content/tests/unit/test_contentAreaUtils.js
+++ b/toolkit/content/tests/unit/test_contentAreaUtils.js
@@ -9,17 +9,17 @@ function loadUtilsScript() {
   /* import-globals-from ../../contentAreaUtils.js */
   Services.scriptloader.loadSubScript("chrome://global/content/contentAreaUtils.js");
 }
 
 function test_urlSecurityCheck() {
   var nullPrincipal = Services.scriptSecurityManager.createNullPrincipal({});
 
   const HTTP_URI = "http://www.mozilla.org/";
-  const CHROME_URI = "chrome://browser/content/browser.xul";
+  const CHROME_URI = "chrome://browser/content/browser.xhtml";
   const DISALLOW_INHERIT_PRINCIPAL =
     Ci.nsIScriptSecurityManager.DISALLOW_INHERIT_PRINCIPAL;
 
   try {
     urlSecurityCheck(makeURI(HTTP_URI), nullPrincipal,
                      DISALLOW_INHERIT_PRINCIPAL);
   } catch (ex) {
     do_throw("urlSecurityCheck should not throw when linking to a http uri with a null principal");
diff --git a/toolkit/mozapps/extensions/test/xpcshell/test_json_updatecheck.js b/toolkit/mozapps/extensions/test/xpcshell/test_json_updatecheck.js
--- a/toolkit/mozapps/extensions/test/xpcshell/test_json_updatecheck.js
+++ b/toolkit/mozapps/extensions/test/xpcshell/test_json_updatecheck.js
@@ -252,17 +252,17 @@ add_task(async function test_update_url_
   // Checks that update links to privileged URLs are not accepted.
 
   let { messages, result: updates } = await promiseConsoleOutput(() => {
     return checkUpdates({
       id: "updatecheck-security@tests.mozilla.org",
       version: "0.1",
       updates: [
         { version: "0.2",
-          update_link: "chrome://browser/content/browser.xul",
+          update_link: "chrome://browser/content/browser.xhtml",
           update_hash: "sha256:08ac852190ecd81f40a514ea9299fe9143d9ab5e296b97e73fb2a314de49648a" },
         { version: "0.3",
           update_link: "http://example.com/update.xpi",
           update_hash: "sha256:18ac852190ecd81f40a514ea9299fe9143d9ab5e296b97e73fb2a314de49648a" },
       ],
     });
   });
 
