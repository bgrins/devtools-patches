# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  ba28fd929617d3673936f8a31ef40e3e6017f3c8
Bug 1025778 - Save value as global variable in console

diff --git a/devtools/client/webconsole/console-output.js b/devtools/client/webconsole/console-output.js
--- a/devtools/client/webconsole/console-output.js
+++ b/devtools/client/webconsole/console-output.js
@@ -2529,16 +2529,35 @@ Widgets.JSObject.prototype = Heritage.ex
   {
     this.output.openVariablesView({
       label: VariablesView.getString(this.objectActor, { concise: true }),
       objectActor: this.objectActor,
       autofocus: true,
     });
   },
 
+  storeObjectInWindow: function()
+  {
+    let evalString = `{ let i = 0;
+      while (this.hasOwnProperty("temp" + i) && i < 1000) {
+        i++;
+      }
+      this["temp" + i] = _self;
+      "temp" + i;
+    }`;
+    let options = {
+      bindObjectActor: this.objectActor.actor,
+    };
+
+    this.output.owner.jsterm.requestEvaluation(evalString, options).then((res) => {
+      this.output.owner.jsterm.focus();
+      this.output.owner.jsterm.setInputValue(res.result);
+    });
+  },
+
   /**
    * The click event handler for objects shown inline.
    * @private
    */
   _onClick: function()
   {
     this.openObjectInVariablesView();
   },
@@ -2553,16 +2572,25 @@ Widgets.JSObject.prototype = Heritage.ex
     let openVarView = this.openObjectInVariablesView.bind(this);
     openInVarViewCmd.addEventListener("command", openVarView);
     openInVarViewCmd.removeAttribute("disabled");
     cmPopup.addEventListener("popuphiding", function onPopupHiding() {
       cmPopup.removeEventListener("popuphiding", onPopupHiding);
       openInVarViewCmd.removeEventListener("command", openVarView);
       openInVarViewCmd.setAttribute("disabled", "true");
     });
+    let storeObjectInWindow = this.storeObjectInWindow.bind(this);
+    let storeInGlobalCmd = doc.getElementById("menu_storeAsGlobal");
+    storeInGlobalCmd.addEventListener("command", storeObjectInWindow);
+    storeInGlobalCmd.removeAttribute("disabled");
+    cmPopup.addEventListener("popuphiding", function onPopupHiding() {
+      cmPopup.removeEventListener("popuphiding", onPopupHiding);
+      storeInGlobalCmd.removeEventListener("command", storeObjectInWindow);
+      storeInGlobalCmd.setAttribute("disabled", "true");
+    });
   },
 
   /**
    * Add a string to the message.
    *
    * @private
    * @param string str
    *        String to add.
diff --git a/devtools/client/webconsole/panel.js b/devtools/client/webconsole/panel.js
--- a/devtools/client/webconsole/panel.js
+++ b/devtools/client/webconsole/panel.js
@@ -27,22 +27,17 @@ WebConsolePanel.prototype = {
 
   /**
    * Called by the WebConsole's onkey command handler.
    * If the WebConsole is opened, check if the JSTerm's input line has focus.
    * If not, focus it.
    */
   focusInput: function WCP_focusInput()
   {
-    let inputNode = this.hud.jsterm.inputNode;
-
-    if (!inputNode.getAttribute("focused"))
-    {
-      inputNode.focus();
-    }
+    this.hud.jsterm.focus();
   },
 
   /**
    * Open is effectively an asynchronous constructor.
    *
    * @return object
    *         A promise that is resolved when the Web Console completes opening.
    */
diff --git a/devtools/client/webconsole/webconsole.js b/devtools/client/webconsole/webconsole.js
--- a/devtools/client/webconsole/webconsole.js
+++ b/devtools/client/webconsole/webconsole.js
@@ -2888,16 +2888,32 @@ WebConsoleFrame.prototype = {
     if (!item || !item.url) {
       return;
     }
 
     this.owner.openLink(item.url);
   },
 
   /**
+   * Open the selected item's URL in a new tab.
+   */
+  storeSelectedItemInGlobal: function WCF_storeSelectedItemInGlobal()
+  {
+    let item = this.output.getSelectedMessages(1)[0] ||
+               this._contextMenuHandler.lastClickedMessage;
+
+    if (!item) {
+      return;
+    }
+
+    console.log(item);
+    // this.owner.openLink(item.url);
+  },
+
+  /**
    * Destroy the WebConsoleFrame object. Call this method to avoid memory leaks
    * when the Web Console is closed.
    *
    * @return object
    *         A promise that is resolved when the WebConsoleFrame instance is
    *         destroyed.
    */
   destroy: function WCF_destroy()
@@ -3223,16 +3239,23 @@ JSTerm.prototype = {
       this.inputNode.addEventListener("keyup", this._inputEventHandler, false);
       this.inputNode.addEventListener("focus", this._focusEventHandler, false);
     }
 
     this.hud.window.addEventListener("blur", this._blurEventHandler, false);
     this.lastInputValue && this.setInputValue(this.lastInputValue);
   },
 
+  focus: function() {
+    let inputNode = this.inputNode;
+    if (!inputNode.getAttribute("focused")) {
+      inputNode.focus();
+    }
+  },
+
   /**
    * The JavaScript evaluation response handler.
    *
    * @private
    * @param object [aAfterMessage]
    *        Optional message after which the evaluation result will be
    *        inserted.
    * @param function [aCallback]
diff --git a/devtools/client/webconsole/webconsole.xul b/devtools/client/webconsole/webconsole.xul
--- a/devtools/client/webconsole/webconsole.xul
+++ b/devtools/client/webconsole/webconsole.xul
@@ -73,16 +73,18 @@ function goUpdateConsoleCommands() {
       <menuitem id="menu_openURL" label="&openURL.label;"
                 accesskey="&openURL.accesskey;" command="consoleCmd_openURL"
                 selection="network" selectionType="single"/>
       <menuitem id="menu_copyURL" label="&copyURLCmd.label;"
                 accesskey="&copyURLCmd.accesskey;" command="consoleCmd_copyURL"
                 selection="network" selectionType="single"/>
       <menuitem id="menu_openInVarView" label="&openInVarViewCmd.label;"
         accesskey="&openInVarViewCmd.accesskey;" disabled="true"/>
+      <menuitem id="menu_storeAsGlobal" label="Store as global"
+        accesskey=""/>
       <menuitem id="cMenu_copy"/>
       <menuitem id="cMenu_selectAll"/>
     </menupopup>
   </popupset>
 
   <tooltip id="aHTMLTooltip" page="true"/>
 
   <box class="hud-outer-wrapper devtools-responsive-container theme-body" flex="1">
