# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  17c314f6930d2b8d6e456aa9e9d41407a45c3008

diff --git a/toolkit/content/customElements.js b/toolkit/content/customElements.js
--- a/toolkit/content/customElements.js
+++ b/toolkit/content/customElements.js
@@ -11,17 +11,29 @@
 {
 
 ChromeUtils.import("resource://gre/modules/Services.jsm");
 ChromeUtils.import("resource://gre/modules/AppConstants.jsm");
 
 const gXULDOMParser = new DOMParser();
 gXULDOMParser.forceEnableXULXBL();
 
+let gSomethingConnected = false;
 class MozXULElement extends XULElement {
+  constructor() {
+    super();
+    if (!gSomethingConnected && this.connected) {
+      gSomethingConnected = true;
+      document.addEventListener("DOMContentLoaded", function outer(event) {
+        if (event.originalTarget == document) {
+          document.removeEventListener("DOMContentLoaded", outer);
+        }
+      }, { capture: true });
+    }
+  }
   /**
    * Allows eager deterministic construction of XUL elements with XBL attached, by
    * parsing an element tree and returning a DOM fragment to be inserted in the
    * document before any of the inner elements is referenced by JavaScript.
    *
    * This process is required instead of calling the createElement method directly
    * because bindings get attached when:
    *
diff --git a/toolkit/content/widgets/radio.js b/toolkit/content/widgets/radio.js
--- a/toolkit/content/widgets/radio.js
+++ b/toolkit/content/widgets/radio.js
@@ -106,16 +106,20 @@ class MozRadiogroup extends MozBaseContr
       if (event.originalTarget != this) {
         return;
       }
       this.removeAttribute("focused");
       this.focusedItem = null;
     });
   }
 
+  connected() {
+    
+  }
+
   connectedCallback() {
     this._radioChildren = null;
 
     if (this.getAttribute("disabled") == "true")
       this.disabled = true;
 
     var children = this._getRadioChildren();
     var length = children.length;
