# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  13fb375eaf14bd9fae5c607aa60015d2b3bd0f2d
Bug 1602230 - Idea #1 -> Use ::after for badge text instead of a XUL label

There are a bunch of CSS references that would need updating, along with some JS ones.
But this moves some logic away from JS and into CSS, along with making the layout just play nicer due
to being a block HTML element.

diff --git a/browser/components/extensions/parent/ext-browserAction.js b/browser/components/extensions/parent/ext-browserAction.js
--- a/browser/components/extensions/parent/ext-browserAction.js
+++ b/browser/components/extensions/parent/ext-browserAction.js
@@ -530,28 +530,29 @@ this.browserAction = class extends Exten
       }
 
       if (tabData.enabled) {
         node.removeAttribute("disabled");
       } else {
         node.setAttribute("disabled", "true");
       }
 
+      let style = this.iconData.get(tabData.icon);
+      node.setAttribute("style", style);
+
       let serializeColor = ([r, g, b, a]) =>
         `rgba(${r}, ${g}, ${b}, ${a / 255})`;
-      node.setAttribute(
-        "badgeStyle",
-        [
-          `background-color: ${serializeColor(tabData.badgeBackgroundColor)}`,
-          `color: ${serializeColor(this.action.getTextColor(tabData))}`,
-        ].join("; ")
+      node.style.setProperty(
+        "--badge-background-color",
+        serializeColor(tabData.badgeBackgroundColor)
       );
-
-      let style = this.iconData.get(tabData.icon);
-      node.setAttribute("style", style);
+      node.style.setProperty(
+        "--badge-color",
+        serializeColor(this.action.getTextColor(tabData))
+      );
     };
     if (sync) {
       callback();
     } else {
       node.ownerGlobal.requestAnimationFrame(callback);
     }
   }
 
diff --git a/toolkit/content/widgets/toolbarbutton.js b/toolkit/content/widgets/toolbarbutton.js
--- a/toolkit/content/widgets/toolbarbutton.js
+++ b/toolkit/content/widgets/toolbarbutton.js
@@ -34,17 +34,17 @@
     static get inheritedAttributes() {
       return {
         ".toolbarbutton-icon":
           "validate,src=image,label,type,consumeanchor,triggeringprincipal=iconloadingprincipal",
         ".toolbarbutton-text": "value=label,accesskey,crop,dragover-top,wrap",
         ".toolbarbutton-multiline-text": "text=label,accesskey,wrap",
         ".toolbarbutton-menu-dropmarker": "disabled,label",
 
-        ".toolbarbutton-badge": "value=badge,style=badgeStyle",
+        ".toolbarbutton-badge-stack": "badge",
       };
     }
 
     static get fragment() {
       let frag = document.importNode(
         MozXULElement.parseXULToFragment(`
         <image class="toolbarbutton-icon"></image>
         <label class="toolbarbutton-text" crop="right" flex="1"></label>
@@ -56,17 +56,16 @@
       return frag;
     }
 
     static get badgedFragment() {
       let frag = document.importNode(
         MozXULElement.parseXULToFragment(`
         <stack class="toolbarbutton-badge-stack">
           <image class="toolbarbutton-icon"/>
-          <label class="toolbarbutton-badge" crop="none"/>
         </stack>
         <label class="toolbarbutton-text" crop="right" flex="1"/>
         <label class="toolbarbutton-multiline-text" flex="1"/>
         <dropmarker anonid="dropmarker" type="menu"
                     class="toolbarbutton-menu-dropmarker"/>`),
         true
       );
       Object.defineProperty(this, "badgedFragment", { value: frag });
diff --git a/toolkit/content/xul.css b/toolkit/content/xul.css
--- a/toolkit/content/xul.css
+++ b/toolkit/content/xul.css
@@ -105,21 +105,16 @@ label.text-link, label[onclick] {
 }
 
 label html|span.accesskey {
   text-decoration: underline;
 }
 
 /********** toolbarbutton **********/
 
-.toolbarbutton-badge:not([value]),
-.toolbarbutton-badge[value=""] {
-  display: none;
-}
-
 toolbarbutton:not([type="menu"]) > .toolbarbutton-menu-dropmarker,
 toolbar[mode="icons"] .toolbarbutton-text,
 toolbar[mode="icons"] .toolbarbutton-multiline-text,
 toolbar[mode="text"] .toolbarbutton-icon,
 .toolbarbutton-multiline-text:not([wrap="true"]),
 .toolbarbutton-text[wrap="true"] {
   display: none;
 }
diff --git a/toolkit/themes/osx/global/toolbarbutton.css b/toolkit/themes/osx/global/toolbarbutton.css
--- a/toolkit/themes/osx/global/toolbarbutton.css
+++ b/toolkit/themes/osx/global/toolbarbutton.css
@@ -30,22 +30,50 @@ toolbarbutton[disabled="true"] {
   list-style-image: url("chrome://global/skin/icons/arrow-dropdown-12.svg");
   -moz-context-properties: fill;
   fill: currentColor;
   padding-inline-start: 2px;
   width: auto;
 }
 
 /* ::::: toolbarbutton badged ::::: */
+/*
+.toolbarbutton-badge-stack {
+  width: 28px;
+} */
 
+/*
+.toolbarbutton-badge-stack::after {
+  background: red;
+  content: attr(badge);
+  display: block;
+  position: absolute;
+  right: 0;
+  top: 0;
+  height: 10px;
+  width: 30px;
+} */
 .toolbarbutton-badge {
-  background-color: #d90000;
+  display: none;
+}
+
+toolbarbutton[badged] {
+  --badge-background-color: #d90000;
+  --badge-color: #fff;
+}
+
+.toolbarbutton-badge-stack[badge]::after {
+  content: attr(badge);
+  box-sizing: border-box;
+  z-index: 1;
+  grid-area: 1 / 1;
+  background-color: var(--badge-background-color);
   font-size: 9px;
   padding: 1px 2px;
-  color: #fff;
+  color: var(--badge-color);
   text-shadow: none;
   border-radius: 2px;
   box-shadow: 0 1px 0 hsla(0, 100%, 100%, .2) inset,
               0 -1px 0 hsla(0, 0%, 0%, .1) inset,
               0 1px 0 hsla(206, 50%, 10%, .2);
   margin: -6px 0 0 !important;
   margin-inline-end: -6px !important;
   min-width: 14px;
