# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  1a328011a8f2887f35daa2f0b1ffa7140957dc7f

diff --git a/dom/interfaces/base/nsIBrowser.idl b/dom/interfaces/base/nsIBrowser.idl
--- a/dom/interfaces/base/nsIBrowser.idl
+++ b/dom/interfaces/base/nsIBrowser.idl
@@ -1,14 +1,15 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 #include "nsISupports.idl"
 
 interface nsIPrincipal;
+interface nsIWebNavigation;
 
 webidl FrameLoader;
 
 [scriptable, uuid(14e5a0cb-e223-4202-95e8-fe53275193ea)]
 interface nsIBrowser : nsISupports
 {
   /**
    * Gets an optional frame loader that is "related" to this browser.
@@ -70,16 +71,24 @@ interface nsIBrowser : nsISupports
   /**
    * A browser can change from remote to non-remote and vice versa.
    * For example, when navigating from an in-process chrome page to
    * a web page, this value would change from false to true.
    */
   readonly attribute boolean isRemoteBrowser;
 
   /**
+   * The XULFrameElement exposes a webNavigation property. Rather than
+   * having JS override that property on the element with the browser
+   * binding, expose the remote nsIWebNavigation here so the XULFrameElement
+   * can return it when accessing `this.webNavigation` from JS.
+   */
+  readonly attribute nsIWebNavigation remoteWebNavigation;
+
+  /**
    * Called by the child to inform the parent that a command update has occurred
    * and the supplied set of commands are now enabled and disabled.
    *
    * @param action command updater action
    * @param enabledLength length of enabledCommands array
    * @param enabledCommands commands to enable
    * @param disabledLength length of disabledCommands array
    * @param disabledCommand commands to disable
diff --git a/dom/xul/XULFrameElement.cpp b/dom/xul/XULFrameElement.cpp
--- a/dom/xul/XULFrameElement.cpp
+++ b/dom/xul/XULFrameElement.cpp
@@ -1,15 +1,16 @@
 /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "nsCOMPtr.h"
+#include "nsIBrowser.h"
 #include "nsIContent.h"
 #include "nsFrameLoader.h"
 #include "mozilla/AsyncEventDispatcher.h"
 #include "mozilla/dom/HTMLIFrameElement.h"
 #include "mozilla/dom/XULFrameElement.h"
 #include "mozilla/dom/XULFrameElementBinding.h"
 
 namespace mozilla {
@@ -46,16 +47,30 @@ XULFrameElement::GetDocShell()
 {
   RefPtr<nsFrameLoader> frameLoader = GetFrameLoader();
   return frameLoader ? frameLoader->GetDocShell(IgnoreErrors()) : nullptr;
 }
 
 already_AddRefed<nsIWebNavigation>
 XULFrameElement::GetWebNavigation()
 {
+  // Remote browsers keep track of their nsIWebNavigation as a separate property
+  // in XBL, but JS callers still expect `this.webNavigation` to work. Instead of
+  // overriding the property from JS, return the right thing in this case:
+  nsCOMPtr<nsIBrowser> thisBrowser = do_QueryInterface(AsContent());
+  bool isRemoteBrowser = false;
+  if (thisBrowser) {
+    thisBrowser->GetIsRemoteBrowser(&isRemoteBrowser);
+    if (isRemoteBrowser) {
+      nsCOMPtr<nsIWebNavigation> webnav;
+      thisBrowser->GetRemoteWebNavigation(getter_AddRefs(webnav));
+      return webnav.forget();
+    }
+  }
+
   nsCOMPtr<nsIDocShell> docShell = GetDocShell();
   nsCOMPtr<nsIWebNavigation> webnav = do_QueryInterface(docShell);
   return webnav.forget();
 }
 
 already_AddRefed<nsPIDOMWindowOuter>
 XULFrameElement::GetContentWindow()
 {
diff --git a/dom/xul/XULFrameElement.h b/dom/xul/XULFrameElement.h
--- a/dom/xul/XULFrameElement.h
+++ b/dom/xul/XULFrameElement.h
@@ -40,16 +40,17 @@ public:
   nsIDocument* GetContentDocument();
 
   // nsIFrameLoaderOwner / MozFrameLoaderOwner
   NS_IMETHOD_(already_AddRefed<nsFrameLoader>) GetFrameLoader() override
   {
     return do_AddRef(mFrameLoader);
   }
 
+
   NS_IMETHOD_(void) InternalSetFrameLoader(nsFrameLoader* aFrameLoader) override
   {
     mFrameLoader = aFrameLoader;
   }
 
   void PresetOpenerWindow(mozIDOMWindowProxy* aWindow, ErrorResult& aRv)
   {
     mOpener = do_QueryInterface(aWindow);
