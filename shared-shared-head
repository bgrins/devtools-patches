# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  d46b88805cf00b13d2dc5a507b2c03374f26e398
Bug 1181852 - Use shared-head.js for devtools/client/shared;r=jryans

diff --git a/devtools/client/shared/test/browser_filter-editor-06.js b/devtools/client/shared/test/browser_filter-editor-06.js
--- a/devtools/client/shared/test/browser_filter-editor-06.js
+++ b/devtools/client/shared/test/browser_filter-editor-06.js
@@ -2,17 +2,16 @@
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
 // Tests the Filter Editor Widget's add button
 
 const TEST_URI = "chrome://devtools/content/shared/widgets/filter-frame.xhtml";
 
-const { Cu } = require("chrome");
 const {CSSFilterEditorWidget} = require("devtools/client/shared/widgets/FilterWidget");
 
 const { ViewHelpers } = Cu.import("resource://devtools/client/shared/widgets/ViewHelpers.jsm", {});
 const STRINGS_URI = "chrome://devtools/locale/filterwidget.properties";
 const L10N = new ViewHelpers.L10N(STRINGS_URI);
 
 add_task(function*() {
   yield promiseTab("about:blank");
diff --git a/devtools/client/shared/test/browser_filter-editor-07.js b/devtools/client/shared/test/browser_filter-editor-07.js
--- a/devtools/client/shared/test/browser_filter-editor-07.js
+++ b/devtools/client/shared/test/browser_filter-editor-07.js
@@ -2,17 +2,16 @@
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
 // Tests the Filter Editor Widget's remove button
 
 const TEST_URI = "chrome://devtools/content/shared/widgets/filter-frame.xhtml";
 
-const { Cu } = require("chrome");
 const {CSSFilterEditorWidget} = require("devtools/client/shared/widgets/FilterWidget");
 
 const { ViewHelpers } = Cu.import("resource://devtools/client/shared/widgets/ViewHelpers.jsm", {});
 const STRINGS_URI = "chrome://devtools/locale/filterwidget.properties";
 const L10N = new ViewHelpers.L10N(STRINGS_URI);
 
 add_task(function*() {
   yield promiseTab("about:blank");
diff --git a/devtools/client/shared/test/browser_inplace-editor-01.js b/devtools/client/shared/test/browser_inplace-editor-01.js
--- a/devtools/client/shared/test/browser_inplace-editor-01.js
+++ b/devtools/client/shared/test/browser_inplace-editor-01.js
@@ -1,15 +1,14 @@
 /* vim: set ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
-var promise = require("promise");
 var {editableField, getInplaceEditorForSpan: inplaceEditor} = require("devtools/client/shared/inplace-editor");
 
 // Test the inplace-editor behavior.
 
 add_task(function*() {
   yield promiseTab("data:text/html;charset=utf-8,inline editor tests");
   let [host, win, doc] = yield createHost();
 
diff --git a/devtools/client/shared/test/browser_inplace-editor-02.js b/devtools/client/shared/test/browser_inplace-editor-02.js
--- a/devtools/client/shared/test/browser_inplace-editor-02.js
+++ b/devtools/client/shared/test/browser_inplace-editor-02.js
@@ -1,16 +1,15 @@
 /* vim: set ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
 var {editableField, getInplaceEditorForSpan: inplaceEditor} = require("devtools/client/shared/inplace-editor");
-var promise = require("promise");
 
 // Test that the trimOutput option for the inplace editor works correctly.
 
 add_task(function*() {
   yield promiseTab("data:text/html;charset=utf-8,inline editor tests");
   let [host, win, doc] = yield createHost();
 
   yield testNonTrimmed(doc);
diff --git a/devtools/client/shared/test/browser_layoutHelpers-getBoxQuads.js b/devtools/client/shared/test/browser_layoutHelpers-getBoxQuads.js
--- a/devtools/client/shared/test/browser_layoutHelpers-getBoxQuads.js
+++ b/devtools/client/shared/test/browser_layoutHelpers-getBoxQuads.js
@@ -4,38 +4,37 @@
 // Tests getAdjustedQuads works properly in a variety of use cases including
 // iframes, scroll and zoom
 
 var {utils: Cu} = Components;
 var {getAdjustedQuads} = require("devtools/shared/layout/utils");
 
 const TEST_URI = TEST_URI_ROOT + "browser_layoutHelpers-getBoxQuads.html";
 
-function test() {
-  addTab(TEST_URI, function(browser, tab) {
-    let doc = browser.contentDocument;
+add_task(function* () {
 
-    ok(typeof getAdjustedQuads === "function", "getAdjustedQuads is defined");
+  let tab = yield promiseTab(TEST_URI);
+  let doc = tab.linkedBrowser.contentDocument;
 
-    info("Running tests");
+  ok(typeof getAdjustedQuads === "function", "getAdjustedQuads is defined");
 
-    returnsTheRightDataStructure(doc);
-    isEmptyForMissingNode(doc);
-    isEmptyForHiddenNodes(doc);
-    defaultsToBorderBoxIfNoneProvided(doc);
-    returnsLikeGetBoxQuadsInSimpleCase(doc);
-    takesIframesOffsetsIntoAccount(doc);
-    takesScrollingIntoAccount(doc);
-    takesZoomIntoAccount(doc);
-    returnsMultipleItemsForWrappingInlineElements(doc);
+  info("Running tests");
 
-    gBrowser.removeCurrentTab();
-    finish();
-  });
-}
+  returnsTheRightDataStructure(doc);
+  isEmptyForMissingNode(doc);
+  isEmptyForHiddenNodes(doc);
+  defaultsToBorderBoxIfNoneProvided(doc);
+  returnsLikeGetBoxQuadsInSimpleCase(doc);
+  takesIframesOffsetsIntoAccount(doc);
+  takesScrollingIntoAccount(doc);
+  takesZoomIntoAccount(doc);
+  returnsMultipleItemsForWrappingInlineElements(doc);
+
+  gBrowser.removeCurrentTab();
+});
 
 function returnsTheRightDataStructure(doc) {
   info("Checks that the returned data contains bounds and 4 points");
 
   let node = doc.querySelector("body");
   let [res] = getAdjustedQuads(doc.defaultView, node, "content");
 
   ok("bounds" in res, "The returned data has a bounds property");
diff --git a/devtools/client/shared/test/browser_mdn-docs-01.js b/devtools/client/shared/test/browser_mdn-docs-01.js
--- a/devtools/client/shared/test/browser_mdn-docs-01.js
+++ b/devtools/client/shared/test/browser_mdn-docs-01.js
@@ -17,17 +17,16 @@
  * - the initial state of the document before the docs have loaded
  * - the state of the document after the docs have loaded
  */
 
 "use strict";
 
 const {CssDocsTooltip} = require("devtools/client/shared/widgets/Tooltip");
 const {setBaseCssDocsUrl, MdnDocsWidget} = require("devtools/client/shared/widgets/MdnDocsWidget");
-const promise = require("promise");
 
 // frame to load the tooltip into
 const MDN_DOCS_TOOLTIP_FRAME = "chrome://devtools/content/shared/widgets/mdn-docs-frame.xhtml";
 
 /**
  * Test properties
  *
  * In the real tooltip, a CSS property name is used to look up an MDN page
diff --git a/devtools/client/shared/test/browser_options-view-01.js b/devtools/client/shared/test/browser_options-view-01.js
--- a/devtools/client/shared/test/browser_options-view-01.js
+++ b/devtools/client/shared/test/browser_options-view-01.js
@@ -1,15 +1,14 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 // Tests that options-view OptionsView responds to events correctly.
 
 const {OptionsView} = require("devtools/client/shared/options-view");
-const {Services} = require("resource://gre/modules/Services.jsm");
 
 const BRANCH = "devtools.debugger.";
 const BLACK_BOX_PREF = "auto-black-box";
 const PRETTY_PRINT_PREF = "auto-pretty-print";
 
 var originalBlackBox = Services.prefs.getBoolPref(BRANCH + BLACK_BOX_PREF);
 var originalPrettyPrint = Services.prefs.getBoolPref(BRANCH + PRETTY_PRINT_PREF);
 
diff --git a/devtools/client/shared/test/browser_outputparser.js b/devtools/client/shared/test/browser_outputparser.js
--- a/devtools/client/shared/test/browser_outputparser.js
+++ b/devtools/client/shared/test/browser_outputparser.js
@@ -1,14 +1,13 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
-var {Services} = Cu.import("resource://gre/modules/Services.jsm", {});
 var {Loader} = Cu.import("resource://gre/modules/commonjs/toolkit/loader.js",
                          {});
 var {OutputParser} = require("devtools/shared/output-parser");
 
 add_task(function*() {
   yield promiseTab("about:blank");
   yield performTest();
   gBrowser.removeCurrentTab();
diff --git a/devtools/client/shared/test/browser_theme.js b/devtools/client/shared/test/browser_theme.js
--- a/devtools/client/shared/test/browser_theme.js
+++ b/devtools/client/shared/test/browser_theme.js
@@ -1,22 +1,22 @@
 /* vim: set ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 // Tests that theme utilities work
 
 var {getColor, getTheme, setTheme} = require("devtools/client/shared/theme");
 
-function test() {
+add_task(function* () {
   testGetTheme();
   testSetTheme();
   testGetColor();
   testColorExistence();
-}
+});
 
 function testGetTheme () {
   let originalTheme = getTheme();
   ok(originalTheme, "has some theme to start with.");
   Services.prefs.setCharPref("devtools.theme", "light");
   is(getTheme(), "light", "getTheme() correctly returns light theme");
   Services.prefs.setCharPref("devtools.theme", "dark");
   is(getTheme(), "dark", "getTheme() correctly returns dark theme");
diff --git a/devtools/client/shared/test/browser_toolbar_basic.js b/devtools/client/shared/test/browser_toolbar_basic.js
--- a/devtools/client/shared/test/browser_toolbar_basic.js
+++ b/devtools/client/shared/test/browser_toolbar_basic.js
@@ -1,74 +1,58 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 // Tests that the developer toolbar works properly
 
 const TEST_URI = TEST_URI_ROOT + "browser_toolbar_basic.html";
 
-function test() {
-  addTab(TEST_URI, function(browser, tab) {
-    info("Starting browser_toolbar_basic.js");
-    runTest();
-  });
-}
+add_task(function*() {
+  info("Starting browser_toolbar_basic.js");
+  yield promiseTab(TEST_URI);
 
-function runTest() {
-  ok(!DeveloperToolbar.visible, "DeveloperToolbar is not visible in runTest");
+  ok(!DeveloperToolbar.visible, "DeveloperToolbar is not visible in to start");
 
-  oneTimeObserve(DeveloperToolbar.NOTIFICATIONS.SHOW, catchFail(checkOpen));
+  let shown = oneTimeObserve(DeveloperToolbar.NOTIFICATIONS.SHOW);
   document.getElementById("Tools:DevToolbar").doCommand();
-}
+  yield shown;
+  ok(DeveloperToolbar.visible, "DeveloperToolbar is visible in checkOpen");
 
-function isChecked(b) {
-  return b.getAttribute("checked") == "true";
-}
-
-function checkOpen() {
-  ok(DeveloperToolbar.visible, "DeveloperToolbar is visible in checkOpen");
   let close = document.getElementById("developer-toolbar-closebutton");
   ok(close, "Close button exists");
 
   let toggleToolbox =
     document.getElementById("devtoolsMenuBroadcaster_DevToolbox");
   ok(!isChecked(toggleToolbox), "toggle toolbox button is not checked");
 
   let target = TargetFactory.forTab(gBrowser.selectedTab);
-  gDevTools.showToolbox(target, "inspector").then(function(toolbox) {
-    ok(isChecked(toggleToolbox), "toggle toolbox button is checked");
-
-    addTab("about:blank", function(browser, tab) {
-      info("Opened a new tab");
-
-      ok(!isChecked(toggleToolbox), "toggle toolbox button is not checked");
-
-      gBrowser.removeCurrentTab();
-
-      oneTimeObserve(DeveloperToolbar.NOTIFICATIONS.HIDE, catchFail(checkClosed));
-      document.getElementById("Tools:DevToolbar").doCommand();
-    });
-  });
-}
-
-function checkClosed() {
-  ok(!DeveloperToolbar.visible, "DeveloperToolbar is not visible in checkClosed");
-
-  oneTimeObserve(DeveloperToolbar.NOTIFICATIONS.SHOW, catchFail(checkReOpen));
-  document.getElementById("Tools:DevToolbar").doCommand();
-}
-
-function checkReOpen() {
-  ok(DeveloperToolbar.visible, "DeveloperToolbar is visible in checkReOpen");
-
-  let toggleToolbox =
-    document.getElementById("devtoolsMenuBroadcaster_DevToolbox");
+  let toolbox = yield gDevTools.showToolbox(target, "inspector");
   ok(isChecked(toggleToolbox), "toggle toolbox button is checked");
 
-  oneTimeObserve(DeveloperToolbar.NOTIFICATIONS.HIDE, catchFail(checkReClosed));
+  yield promiseTab("about:blank");
+  info("Opened a new tab");
+
+  ok(!isChecked(toggleToolbox), "toggle toolbox button is not checked");
+
+  gBrowser.removeCurrentTab();
+
+  let hidden = oneTimeObserve(DeveloperToolbar.NOTIFICATIONS.HIDE);
+  document.getElementById("Tools:DevToolbar").doCommand();
+  yield hidden;
+  ok(!DeveloperToolbar.visible, "DeveloperToolbar is not visible in hidden");
+
+  shown = oneTimeObserve(DeveloperToolbar.NOTIFICATIONS.SHOW);
+  document.getElementById("Tools:DevToolbar").doCommand();
+  yield shown;
+  ok(DeveloperToolbar.visible, "DeveloperToolbar is visible in after open");
+
+  ok(isChecked(toggleToolbox), "toggle toolbox button is checked");
+
+  hidden = oneTimeObserve(DeveloperToolbar.NOTIFICATIONS.HIDE);
   document.getElementById("developer-toolbar-closebutton").doCommand();
+  yield hidden;
+
+  ok(!DeveloperToolbar.visible, "DeveloperToolbar is not visible after re-close");
+});
+
+function isChecked(b) {
+  return b.getAttribute("checked") == "true";
 }
-
-function checkReClosed() {
-  ok(!DeveloperToolbar.visible, "DeveloperToolbar is not visible in checkReClosed");
-
-  finish();
-}
diff --git a/devtools/client/shared/test/browser_toolbar_webconsole_errors_count.js b/devtools/client/shared/test/browser_toolbar_webconsole_errors_count.js
--- a/devtools/client/shared/test/browser_toolbar_webconsole_errors_count.js
+++ b/devtools/client/shared/test/browser_toolbar_webconsole_errors_count.js
@@ -14,19 +14,19 @@ function test() {
 
   Services.prefs.setBoolPref("javascript.options.strict", true);
 
   registerCleanupFunction(() => {
     Services.prefs.clearUserPref("javascript.options.strict");
   });
 
   ignoreAllUncaughtExceptions();
-  addTab(TEST_URI, openToolbar);
+  promiseTab(TEST_URI).then(openToolbar);
 
-  function openToolbar(browser, tab) {
+  function openToolbar(tab) {
     tab1 = tab;
     ignoreAllUncaughtExceptions(false);
 
     expectUncaughtException();
 
     if (!DeveloperToolbar.visible) {
       DeveloperToolbar.show(true).then(onOpenToolbar);
     }
@@ -57,22 +57,22 @@ function test() {
     }, content);
 
     waitForButtonUpdate({
       name: "button shows one more error after click in page",
       errors: 4,
       warnings: 1,
       callback: () => {
         ignoreAllUncaughtExceptions();
-        addTab(TEST_URI, onOpenSecondTab);
+        promiseTab(TEST_URI).then(onOpenSecondTab);
       },
     });
   }
 
-  function onOpenSecondTab(browser, tab) {
+  function onOpenSecondTab(tab) {
     tab2 = tab;
 
     ignoreAllUncaughtExceptions(false);
     expectUncaughtException();
 
     waitForButtonUpdate({
       name: "button shows correct number of errors after new tab is open",
       errors: 3,
diff --git a/devtools/client/shared/test/head.js b/devtools/client/shared/test/head.js
--- a/devtools/client/shared/test/head.js
+++ b/devtools/client/shared/test/head.js
@@ -1,65 +1,22 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
-var {require} = Cu.import("resource://devtools/shared/Loader.jsm", {});
-var {TargetFactory} = require("devtools/client/framework/target");
-var {console} = Cu.import("resource://gre/modules/Console.jsm", {});
-var {gDevTools} = Cu.import("resource://devtools/client/framework/gDevTools.jsm", {});
+// shared-head.js handles imports, constants, and utility functions
+Services.scriptloader.loadSubScript("chrome://mochitests/content/browser/devtools/client/framework/test/shared-head.js", this);
+
 const {DOMHelpers} = Cu.import("resource://devtools/client/shared/DOMHelpers.jsm", {});
 const {Hosts} = require("devtools/client/framework/toolbox-hosts");
 const {defer} = require("promise");
-const DevToolsUtils = require("devtools/shared/DevToolsUtils");
-
-DevToolsUtils.testing = true;
-SimpleTest.registerCleanupFunction(() => {
-  DevToolsUtils.testing = false;
-});
 
 const TEST_URI_ROOT = "http://example.com/browser/devtools/client/shared/test/";
 const OPTIONS_VIEW_URL = TEST_URI_ROOT + "doc_options-view.xul";
 
-/**
- * Open a new tab at a URL and call a callback on load
- */
-function addTab(aURL, aCallback)
-{
-  waitForExplicitFinish();
-
-  gBrowser.selectedTab = gBrowser.addTab();
-  let tab = gBrowser.selectedTab;
-  let browser = gBrowser.getBrowserForTab(tab);
-
-  let url = encodeURI(aURL);
-
-  BrowserTestUtils.browserLoaded(browser, false, url).then(() => {
-    aCallback(browser, tab, browser.contentDocument);
-  });
-
-  browser.loadURI(url);
-}
-
-function promiseTab(aURL) {
-  return new Promise(resolve =>
-    addTab(aURL, resolve));
-}
-
-registerCleanupFunction(function* tearDown() {
-  let target = TargetFactory.forTab(gBrowser.selectedTab);
-  yield gDevTools.closeToolbox(target);
-
-  while (gBrowser.tabs.length > 1) {
-    gBrowser.removeCurrentTab();
-  }
-
-  console = undefined;
-});
-
 function catchFail(func) {
   return function() {
     try {
       return func.apply(null, arguments);
     }
     catch (ex) {
       ok(false, ex);
       console.error(ex);
@@ -131,21 +88,27 @@ function waitForValue(aOptions)
       }, 100);
     }
   }
 
   wait(aOptions.validator, aOptions.success, aOptions.failure);
 }
 
 function oneTimeObserve(name, callback) {
-  var func = function() {
-    Services.obs.removeObserver(func, name);
-    callback();
-  };
-  Services.obs.addObserver(func, name, false);
+  return new Promise((resolve) => {
+
+    var func = function() {
+      Services.obs.removeObserver(func, name);
+      if (callback) {
+        callback();
+      }
+      resolve();
+    };
+    Services.obs.addObserver(func, name, false);
+  });
 }
 
 var createHost = Task.async(function*(type = "bottom", src = "data:text/html;charset=utf-8,") {
   let host = new Hosts[type](gBrowser.selectedTab);
   let iframe = yield host.create();
 
   yield new Promise(resolve => {
     let domHelper = new DOMHelpers(iframe.contentWindow);
