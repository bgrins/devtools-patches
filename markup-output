# HG changeset patch
# Parent 20fb98a374ce044f63546c63c47ced9c10bd0317
# User Brian Grinstead <bgrinstead@mozilla.com>
 Last Comment Bug 931191 - Inspector janks for seconds at a time looking at chat.meatspac.es

diff --git a/toolkit/devtools/output-parser.js b/toolkit/devtools/output-parser.js
--- a/toolkit/devtools/output-parser.js
+++ b/toolkit/devtools/output-parser.js
@@ -3,16 +3,17 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const {Cc, Ci, Cu} = require("chrome");
 const {colorUtils} = require("devtools/css-color");
 const {Services} = Cu.import("resource://gre/modules/Services.jsm", {});
 
+const MAX_ITERATIONS = 100;
 const REGEX_QUOTES = /^".*?"|^".*/;
 const REGEX_URL = /^url\(["']?(.+?)(?::(\d+))?["']?\)/;
 const REGEX_WHITESPACE = /^\s+/;
 const REGEX_FIRST_WORD_OR_CHAR = /^\w+|^./;
 const REGEX_CSS_PROPERTY_VALUE = /(^[^;]+)/;
 
 /**
  * This regex matches:
@@ -130,16 +131,17 @@ OutputParser.prototype = {
    *         parsed.
    */
   _parse: function(text, options={}) {
     text = text.trim();
     this.parsed.length = 0;
     let dirty = false;
     let matched = null;
     let nameValueSupported = false;
+    let i = 0;
 
     let trimMatchFromStart = function(match) {
       text = text.substr(match.length);
       dirty = true;
       matched = null;
     };
 
     while (text.length > 0) {
@@ -202,16 +204,24 @@ OutputParser.prototype = {
           let match = matched[0];
           trimMatchFromStart(match);
           this._appendTextNode(match);
           nameValueSupported = false;
         }
       }
 
       dirty = false;
+
+      // Prevent this loop from slowing down the browser with too
+      // many nodes being appended into output.
+      i++;
+      if (i > MAX_ITERATIONS) {
+        trimMatchFromStart(text);
+        this._appendTextNode(text);
+      }
     }
 
     return this._toDOM();
   },
 
   /**
    * Check if a CSS property supports a specific value.
    *
@@ -307,40 +317,40 @@ OutputParser.prototype = {
    * Append a text node to the output. If the previously output item was a text
    * node then we append the text to that node.
    *
    * @param  {String} text
    *         Text to append
    */
   _appendTextNode: function(text) {
     let lastItem = this.parsed[this.parsed.length - 1];
-
-    if (typeof lastItem !== "undefined" && lastItem.nodeName === "#text") {
-      lastItem.nodeValue += text;
+    if (typeof lastItem === "string") {
+      this.parsed[this.parsed.length - 1] = lastItem + text
     } else {
-      let win = Services.appShell.hiddenDOMWindow;
-      let doc = win.document;
-      let textNode = doc.createTextNode(text);
-      this.parsed.push(textNode);
+      this.parsed.push(text);
     }
   },
 
   /**
    * Take all output and append it into a single DocumentFragment.
    *
    * @return {DocumentFragment}
    *         Document Fragment
    */
   _toDOM: function() {
     let win = Services.appShell.hiddenDOMWindow;
     let doc = win.document;
     let frag = doc.createDocumentFragment();
 
     for (let item of this.parsed) {
-      frag.appendChild(item);
+      if (typeof item === "string") {
+        frag.appendChild(doc.createTextNode(item));
+      } else {
+        frag.appendChild(item);
+      }
     }
 
     this.parsed.length = 0;
     return frag;
   },
 
   /**
    * Check that a string represents a valid volor.
