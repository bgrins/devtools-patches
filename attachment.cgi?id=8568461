# HG changeset patch
# User Patrick Brosset <pbrosset@mozilla.com>
# Parent  3bfcc55ce5b0b00ea2f3e8a6594430b417474847
Bug 1123851 - 2 - GCLI command to highlight element's geometry; r=jwalker

diff --git a/browser/devtools/commandline/test/browser.ini b/browser/devtools/commandline/test/browser.ini
--- a/browser/devtools/commandline/test/browser.ini
+++ b/browser/devtools/commandline/test/browser.ini
@@ -49,16 +49,17 @@ support-files =
  browser_cmd_csscoverage_page3.html
  browser_cmd_csscoverage_sheetA.css
  browser_cmd_csscoverage_sheetB.css
  browser_cmd_csscoverage_sheetC.css
  browser_cmd_csscoverage_sheetD.css
 [browser_cmd_folder.js]
 [browser_cmd_highlight_01.js]
 [browser_cmd_highlight_02.js]
+[browser_cmd_highlight_03.js]
 [browser_cmd_inject.js]
 support-files =
  browser_cmd_inject.html
 [browser_cmd_csscoverage_util.js]
 [browser_cmd_jsb.js]
 support-files =
   browser_cmd_jsb_script.jsi
 [browser_cmd_media.js]
diff --git a/browser/devtools/commandline/test/browser_cmd_highlight_01.js b/browser/devtools/commandline/test/browser_cmd_highlight_01.js
--- a/browser/devtools/commandline/test/browser_cmd_highlight_01.js
+++ b/browser/devtools/commandline/test/browser_cmd_highlight_01.js
@@ -5,17 +5,19 @@
 
 // Tests the various highlight command parameters and options
 
 // Creating a test page with many elements to test the --showall option
 let TEST_PAGE = "data:text/html;charset=utf-8,<body><ul>";
 for (let i = 0; i < 200; i ++) {
   TEST_PAGE += "<li class='item'>" + i + "</li>";
 }
-TEST_PAGE += "</ul></body>";
+TEST_PAGE += "</ul>";
+TEST_PAGE += "<div style='position:absolute;top:0;right:0;width:100px;height:100px;'></div>";
+TEST_PAGE += "</body>";
 
 function test() {
   return Task.spawn(spawnTest).then(finish, helpers.handleError);
 }
 
 function* spawnTest() {
   let options = yield helpers.openTab(TEST_PAGE);
   yield helpers.openToolbar(options);
@@ -202,17 +204,17 @@ function* spawnTest() {
       }
     },
     {
       setup: 'highlight body --hideguides --showinfobar --showall --region ' +
         'content --fill red --keep',
       check: {
         input:  'highlight body --hideguides --showinfobar --showall --region ' +
           'content --fill red --keep',
-        hints: '',
+        hints:                      ' [options]',
         markup: 'VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV' +
           'VVVVVVVVVVVVVVVVVVVVVVVVV',
         status: 'VALID'
       },
       exec: {
         output: '1 node highlighted'
       }
     },
@@ -237,16 +239,43 @@ function* spawnTest() {
         markup: 'VVVVVVVVVVVVVVVVVVVVVVVVV',
         status: 'VALID'
       },
       exec: {
         output: '200 nodes highlighted'
       }
     },
     {
+      setup: 'highlight div --geometry',
+      check: {
+        input:  'highlight div --geometry',
+        hints:                           ' [options]',
+        markup: 'VVVVVVVVVVVVVVVVVVVVVVVV',
+        status: 'VALID'
+      },
+      exec: {
+        output: '1 node highlighted'
+      }
+    },
+    {
+      setup: 'highlight body --hideguides --showinfobar --showall --region ' +
+        'content --fill red --keep --geometry',
+      check: {
+        input:  'highlight body --hideguides --showinfobar --showall --region ' +
+          'content --fill red --keep --geometry',
+        hints: '',
+        markup: 'VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV' +
+          'VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV',
+        status: 'VALID'
+      },
+      exec: {
+        output: '1 node highlighted'
+      }
+    },
+    {
       setup: 'unhighlight',
       check: {
         input:  'unhighlight',
         hints:  '',
         markup: 'VVVVVVVVVVV',
         status: 'VALID'
       }
     }
diff --git a/browser/devtools/commandline/test/browser_cmd_highlight_03.js b/browser/devtools/commandline/test/browser_cmd_highlight_03.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/commandline/test/browser_cmd_highlight_03.js
@@ -0,0 +1,45 @@
+/* Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Tests that the highlight command with the --geometry option creates a
+// GeometryEditorHighlighter highlighter.
+
+const TEST_PAGE = "data:text/html;charset=utf-8," +
+                  "<div style='background:red;position:absolute;top:50px;left:50px;width:50px;height:50px;'></div>";
+
+function test() {
+  return Task.spawn(function*() {
+    let options = yield helpers.openTab(TEST_PAGE);
+    yield helpers.openToolbar(options);
+
+    info("highlight the geometry of the DIV node");
+    yield runCommand("highlight div --geometry", options);
+
+    let highlighters = getHighlighters();
+    is(highlighters.length, 1, "The highlighter element exists for div");
+    ok(highlighters[0].ID_CLASS_PREFIX.indexOf("geometry") !== -1,
+      "The right highlighter type was used");
+
+    info("highlight the DIV node again without the geometry argument");
+    yield runCommand("highlight div", options);
+
+    highlighters = getHighlighters();
+    ok(highlighters[0].ID_CLASS_PREFIX.indexOf("box-model") !== -1,
+      "The right highlighter type was used");
+
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
+}
+
+function getHighlighters() {
+  // Note that this only works as long as gcli tests aren't run with e10s on.
+  // To make this e10s ready, execute this in a content frame script instead.
+  return require("gcli/commands/highlight").highlighters;
+}
+
+function* runCommand(cmd, options) {
+  yield helpers.audit(options, [{ setup: cmd, exec: {} }]);
+}
diff --git a/browser/locales/en-US/chrome/browser/devtools/gclicommands.properties b/browser/locales/en-US/chrome/browser/devtools/gclicommands.properties
--- a/browser/locales/en-US/chrome/browser/devtools/gclicommands.properties
+++ b/browser/locales/en-US/chrome/browser/devtools/gclicommands.properties
@@ -211,16 +211,26 @@ highlightFillManual=Override the default
 # dialog when the user is using this command.
 highlightKeepDesc=Keep existing highlighters
 
 # LOCALIZATION NOTE (highlightKeepManual) A fuller description of the 'keep'
 # option parameter to the 'highlight' command, displayed when the user asks for
 # help on what it does.
 highlightKeepManual=By default, existing highlighters are hidden when running the command, unless this option is set
 
+# LOCALIZATION NOTE (highlightGeometryDesc) A very short string to describe the
+# 'geometry' option parameter to the 'highlight' command, which is displayed in a
+# dialog when the user is using this command.
+highlightGeometryDesc=Show node's geometry
+
+# LOCALIZATION NOTE (highlightGeometryManual) A fuller description of the
+# 'geometry' option parameter to the 'highlight' command, displayed when the
+# user asks for help on what it does.
+highlightGeometryManual=Set this option to display the node's top, right, bottom, left, width and height CSS properties, if they are set
+
 # LOCALIZATION NOTE (highlightOutputConfirm) A confirmation message for the
 # 'highlight' command, displayed to the user once the command has been entered,
 # informing the user how many nodes have been highlighted successfully and how
 # to turn highlighting off
 highlightOutputConfirm2=%1$S node highlighted;%1$S nodes highlighted
 
 # LOCALIZATION NOTE (highlightOutputMaxReached) A confirmation message for the
 # 'highlight' command, displayed to the user once the command has been entered,
diff --git a/toolkit/devtools/gcli/commands/highlight.js b/toolkit/devtools/gcli/commands/highlight.js
--- a/toolkit/devtools/gcli/commands/highlight.js
+++ b/toolkit/devtools/gcli/commands/highlight.js
@@ -2,17 +2,18 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const {Cc, Ci, Cu} = require("chrome");
 const gcli = require("gcli/index");
 require("devtools/server/actors/inspector");
-const {BoxModelHighlighter} = require("devtools/server/actors/highlighter");
+const {BoxModelHighlighter,
+       GeometryEditorHighlighter} = require("devtools/server/actors/highlighter");
 
 XPCOMUtils.defineLazyGetter(this, "nodesSelected", function() {
   return Services.strings.createBundle("chrome://browser/locale/devtools/gclicommands.properties");
 });
 XPCOMUtils.defineLazyModuleGetter(this, "PluralForm","resource://gre/modules/PluralForm.jsm");
 
 // How many maximum nodes can be highlighted in parallel
 const MAX_HIGHLIGHTED_ELEMENTS = 100;
@@ -20,23 +21,33 @@ const MAX_HIGHLIGHTED_ELEMENTS = 100;
 // Stores the highlighters instances so they can be destroyed later.
 // also export them so tests can access those and assert they got created
 // correctly.
 exports.highlighters = [];
 
 /**
  * Destroy all existing highlighters
  */
-function unhighlightAll() {
+function destroyHighlighters() {
   for (let highlighter of exports.highlighters) {
     highlighter.destroy();
   }
   exports.highlighters.length = 0;
 }
 
+/**
+ * Get an object that looks like a TabActor for instantiating highlighters
+ */
+function getTabActorContext(env) {
+  return {
+    browser: env.chromeWindow.gBrowser.getBrowserForDocument(env.document),
+    window: env.window
+  };
+}
+
 exports.items = [
   {
     name: "highlight",
     description: gcli.lookup("highlightDesc"),
     manual: gcli.lookup("highlightManual"),
     params: [
       {
         name: "selector",
@@ -82,53 +93,59 @@ exports.items = [
             manual: gcli.lookup("highlightFillManual"),
             defaultValue: null
           },
           {
             name: "keep",
             type: "boolean",
             description: gcli.lookup("highlightKeepDesc"),
             manual: gcli.lookup("highlightKeepManual"),
+          },
+          {
+            name: "geometry",
+            type: "boolean",
+            description: gcli.lookup("highlightGeometryDesc"),
+            manual: gcli.lookup("highlightGeometryManual"),
           }
         ]
       }
     ],
     exec: function(args, context) {
       // Remove all existing highlighters unless told otherwise
       if (!args.keep) {
-        unhighlightAll();
+        destroyHighlighters();
       }
 
       let env = context.environment;
 
       // Unhighlight on navigate
-      env.target.once("navigate", unhighlightAll);
-
-      // Build a tab context for the highlighter (which normally takes a
-      // TabActor as parameter to its constructor)
-      let tabContext = {
-        browser: env.chromeWindow.gBrowser.getBrowserForDocument(env.document),
-        window: env.window
-      };
+      env.target.once("navigate", destroyHighlighters);
 
       let i = 0;
       for (let node of args.selector) {
         if (!args.showall && i >= MAX_HIGHLIGHTED_ELEMENTS) {
           break;
         }
 
-        let highlighter = new BoxModelHighlighter(tabContext);
-        if (args.fill) {
+        let highlighter;
+        if (args.geometry) {
+          highlighter = new GeometryEditorHighlighter(getTabActorContext(env));
+        } else {
+          highlighter = new BoxModelHighlighter(getTabActorContext(env));
+        }
+
+        if (args.fill && highlighter.regionFill) {
           highlighter.regionFill[args.region] = args.fill;
         }
         highlighter.show(node, {
           region: args.region,
           hideInfoBar: !args.showinfobar,
           hideGuides: args.hideguides,
-          showOnly: args.region
+          showOnly: args.region,
+          hideOffsetParent: true
         });
         exports.highlighters.push(highlighter);
         i ++;
       }
 
       let highlightText = nodesSelected.GetStringFromName("highlightOutputConfirm2");
       let output = PluralForm.get(args.selector.length, highlightText)
                              .replace("%1$S", args.selector.length);
@@ -139,11 +156,13 @@ exports.items = [
 
       return output;
     }
   },
   {
     name: "unhighlight",
     description: gcli.lookup("unhighlightDesc"),
     manual: gcli.lookup("unhighlightManual"),
-    exec: unhighlightAll
+    exec: () => {
+      destroyHighlighters();
+    }
   }
 ];
