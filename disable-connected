# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  e9e8e5c3e12f4bc1484fff19f18944377c025dbb

diff --git a/toolkit/content/widgets/radio.js b/toolkit/content/widgets/radio.js
--- a/toolkit/content/widgets/radio.js
+++ b/toolkit/content/widgets/radio.js
@@ -4,19 +4,17 @@
 
 "use strict";
 
 // This is loaded into all XUL windows. Wrap in a block to prevent
 // leaking to window scope.
 {
 
 class MozRadiogroup extends MozBaseControl {
-  constructor() {
-    super();
-
+  setupEventListeners() {
     this.addEventListener("mousedown", (event) => {
       if (this.disabled)
         event.preventDefault();
     });
 
     /**
      * keyboard navigation  Here's how keyboard navigation works in radio groups on Windows:
      * The group takes 'focus'
@@ -93,35 +91,46 @@ class MozRadiogroup extends MozBaseContr
     this.addEventListener("blur", (event) => {
       if (event.originalTarget != this) { return; }
       this.removeAttribute("focused");
       this.focusedItem = null;
     });
   }
 
   connectedCallback() {
+    let d = Date.now();
+    if (!this._connectedOnce) {
+      this._connectedOnce = true;
+      this.setupEventListeners();
+    }
+    // console.log("1", Date.now() - d);
+    d = Date.now();
     this._radioChildren = null;
 
     if (this.getAttribute("disabled") == "true")
       this.disabled = true;
 
     var children = this._getRadioChildren();
+    console.log("how many children", children.length);
     var length = children.length;
     for (var i = 0; i < length; i++) {
       if (children[i].getAttribute("selected") == "true") {
+        // console.log(children[i]);
+        console.log("2.1", Date.now() - d);
         this.selectedIndex = i;
         return;
       }
     }
 
     var value = this.value;
     if (value)
       this.value = value;
     else
       this.selectedIndex = 0;
+    console.log("2", Date.now() - d);
   }
 
   set value(val) {
     this.setAttribute("value", val);
     var children = this._getRadioChildren();
     for (var i = 0; i < children.length; i++) {
       if (String(children[i].value) == String(val)) {
         this.selectedItem = children[i];
@@ -293,30 +302,30 @@ class MozRadiogroup extends MozBaseContr
   }
 
   _getRadioChildren() {
     if (this._radioChildren)
       return this._radioChildren;
 
     var radioChildren = [];
     var doc = this.ownerDocument;
+    console.log("starting looping");
 
     if (this.hasChildNodes()) {
       // Don't store the collected child nodes immediately,
       // collecting the child nodes could trigger constructors
       // which would blow away our list.
 
       var iterator = doc.createTreeWalker(this,
         NodeFilter.SHOW_ELEMENT,
         this._filterRadioGroup);
       while (iterator.nextNode())
         radioChildren.push(iterator.currentNode);
       return this._radioChildren = radioChildren;
     }
-
     // We don't have child nodes.
     const XUL_NS = "http://www.mozilla.org/keymaster/" +
       "gatekeeper/there.is.only.xul";
     var elems = doc.getElementsByAttribute("group", this.id);
     for (var i = 0; i < elems.length; i++) {
       if ((elems[i].namespaceURI == XUL_NS) &&
         (elems[i].localName == "radio")) {
         radioChildren.push(elems[i]);
diff --git a/toolkit/content/widgets/radio.xml b/toolkit/content/widgets/radio.xml
--- a/toolkit/content/widgets/radio.xml
+++ b/toolkit/content/widgets/radio.xml
@@ -17,16 +17,17 @@
         <xul:image class="radio-icon" xbl:inherits="src"/>
         <xul:label class="radio-label" xbl:inherits="xbl:text=label,accesskey,crop" flex="1"/>
       </xul:hbox>
     </content>
 
     <implementation implements="nsIDOMXULSelectControlItemElement">
       <constructor>
         <![CDATA[
+        console.log("BOOTING UP XBL...", this.control);
           // Just clear out the parent's cached list of radio children
           var control = this.control;
           if (control)
             control._radioChildren = null;
         ]]>
       </constructor>
       <destructor>
         <![CDATA[
