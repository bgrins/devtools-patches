# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  74b7ae11c6bf8677ac9a3569e2f25b7c9ec2c090

diff --git a/browser/base/content/tabbrowser-tabs.js b/browser/base/content/tabbrowser-tabs.js
--- a/browser/base/content/tabbrowser-tabs.js
+++ b/browser/base/content/tabbrowser-tabs.js
@@ -726,21 +726,17 @@ class MozTabbrowserTabs extends MozEleme
   get tabbox() {
     return document.getElementById("tabbrowser-tabbox");
   }
 
   get newTabButton() {
     return this.querySelector(".tabs-newtab-button");
   }
 
-  connectedCallback() {
-    if (this.delayConnectedCallback()) {
-      return;
-    }
-
+  init() {
     this.arrowScrollbox = this.querySelector("arrowscrollbox");
 
     this.baseConnect();
 
     this._firstTab = null;
     this._lastTab = null;
     this._beforeSelectedTab = null;
     this._beforeHoveredTab = null;
@@ -831,17 +827,17 @@ class MozTabbrowserTabs extends MozEleme
   }
 
   appendChild(tab) {
     return this.insertBefore(tab, null);
   }
 
   insertBefore(tab, node) {
     if (!this.arrowScrollbox) {
-      return super.insertBefore(tab, node);
+      throw new Error("Shouldn't call this without arrowscrollbox");
     }
 
     let {arrowScrollbox} = this;
     if (node == null) {
       // we have a toolbarbutton and a space at the end of the scrollbox
       node = arrowScrollbox.lastChild.previousSibling;
     }
     return arrowScrollbox.insertBefore(tab, node);
@@ -980,17 +976,17 @@ class MozTabbrowserTabs extends MozEleme
         }
 
         break;
     }
   }
 
   _getVisibleTabs() {
     // Cannot access gBrowser before it's initialized.
-    if (!gBrowser) {
+    if (!gBrowser._initialized) {
       return [this.firstElementChild];
     }
 
     return gBrowser.visibleTabs;
   }
 
   _setPositionalAttributes() {
     let visibleTabs = this._getVisibleTabs();
@@ -1744,17 +1740,17 @@ class MozTabbrowserTabs extends MozEleme
   }
 
   getRelatedElement(aTab) {
     if (!aTab) {
       return null;
     }
 
     // Cannot access gBrowser before it's initialized.
-    if (!gBrowser) {
+    if (!gBrowser._initialized) {
       return this.tabbox.tabpanels.firstElementChild;
     }
 
     // If the tab's browser is lazy, we need to `_insertBrowser` in order
     // to have a linkedPanel.  This will also serve to bind the browser
     // and make it ready to use when the tab is selected.
     gBrowser._insertBrowser(aTab);
     return document.getElementById(aTab.linkedPanel);
diff --git a/browser/base/content/tabbrowser.js b/browser/base/content/tabbrowser.js
--- a/browser/base/content/tabbrowser.js
+++ b/browser/base/content/tabbrowser.js
@@ -27,16 +27,17 @@ window._gBrowser = {
     Services.els.addSystemEventListener(document, "keydown", this, false);
     if (AppConstants.platform == "macosx") {
       Services.els.addSystemEventListener(document, "keypress", this, false);
     }
     window.addEventListener("sizemodechange", this);
     window.addEventListener("occlusionstatechange", this);
     window.addEventListener("framefocusrequested", this);
 
+    this.tabContainer.init();
     this._setupInitialBrowserAndTab();
 
     if (Services.prefs.getBoolPref("browser.display.use_system_colors")) {
       this.tabpanels.style.backgroundColor = "-moz-default-background-color";
     } else if (Services.prefs.getIntPref("browser.display.document_color_use") == 2) {
       this.tabpanels.style.backgroundColor =
         Services.prefs.getCharPref("browser.display.background_color");
     }
@@ -62,16 +63,17 @@ window._gBrowser = {
     XPCOMUtils.defineLazyModuleGetters(this, {
       E10SUtils: "resource://gre/modules/E10SUtils.jsm",
     });
 
     XPCOMUtils.defineLazyPreferenceGetter(this, "animationsEnabled",
       "toolkit.cosmeticAnimations.enabled");
 
     this._setupEventListeners();
+    this._initialized = true;
   },
 
   ownerGlobal: window,
 
   ownerDocument: document,
 
   closingTabsEnum: { ALL: 0, OTHER: 1, TO_END: 2, MULTI_SELECTED: 3 },
 
