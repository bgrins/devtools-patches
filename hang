# HG changeset patch
# Parent ac90f9d869c943d94b0e15e6fbaf06e6e0261a84
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 927630 - Hang if tabs switched while Inspector is opening.

diff --git a/browser/devtools/framework/toolbox.js b/browser/devtools/framework/toolbox.js
--- a/browser/devtools/framework/toolbox.js
+++ b/browser/devtools/framework/toolbox.js
@@ -177,21 +177,22 @@ Toolbox.prototype = {
     return parseFloat(Services.prefs.getCharPref(ZOOM_PREF));
   },
 
   /**
    * Open the toolbox
    */
   open: function() {
     let deferred = promise.defer();
-
+    console.log("Toolbox open beginning", this.target.url);
     return this._host.create().then(iframe => {
       let deferred = promise.defer();
 
       let domReady = () => {
+        console.log("Toolbox open: DOMReady", this.target.url);
         iframe.removeEventListener("DOMContentLoaded", domReady, true);
 
         this.isReady = true;
 
         let closeButton = this.doc.getElementById("toolbox-close");
         closeButton.addEventListener("command", this.destroy, true);
 
         this._buildDockButtons();
@@ -201,16 +202,17 @@ Toolbox.prototype = {
         this._addKeysToWindow();
         this._addToolSwitchingKeys();
         this._addZoomKeys();
         this._loadInitialZoom();
 
         this._telemetry.toolOpened("toolbox");
 
         this.selectTool(this._defaultToolId).then(panel => {
+          console.log("Toolbox open: Tool has been selected", this.target.url);
           this.emit("ready");
           deferred.resolve();
         });
       };
 
       iframe.addEventListener("DOMContentLoaded", domReady, true);
       iframe.setAttribute("src", this._URL);
 
diff --git a/browser/devtools/inspector/inspector-panel.js b/browser/devtools/inspector/inspector-panel.js
--- a/browser/devtools/inspector/inspector-panel.js
+++ b/browser/devtools/inspector/inspector-panel.js
@@ -43,18 +43,20 @@ function InspectorPanel(iframeWindow, to
 exports.InspectorPanel = InspectorPanel;
 
 InspectorPanel.prototype = {
   /**
    * open is effectively an asynchronous constructor
    */
   open: function InspectorPanel_open() {
     return this.target.makeRemote().then(() => {
+      console.log("Before initializing inspector");
       return this._getWalker();
     }).then(() => {
+      console.log("After initializing inspector");
       return this._getDefaultNodeForSelection();
     }).then(defaultSelection => {
       return this._deferredOpen(defaultSelection);
     }).then(null, console.error);
   },
 
   _deferredOpen: function(defaultSelection) {
     let deferred = promise.defer();
diff --git a/toolkit/devtools/LayoutHelpers.jsm b/toolkit/devtools/LayoutHelpers.jsm
--- a/toolkit/devtools/LayoutHelpers.jsm
+++ b/toolkit/devtools/LayoutHelpers.jsm
@@ -38,17 +38,21 @@ LayoutHelpers.prototype = {
     // clientRect is read-only, we need to be able to change properties.
     rect = {top: clientRect.top,
             left: clientRect.left,
             width: clientRect.width,
             height: clientRect.height};
 
     // We iterate through all the parent windows.
     while (true) {
-
+      // This causes an infinite loop because it is triggering on the
+      // wrong window and this.isTopLevelWin is always false.
+      // Just a symptom of the problem that the InspectorActor is
+      // being initialized with the wrong window AFAIK
+      break;
       // Does the selection overflow on the right of its window?
       let diffx = frameWin.innerWidth - (rect.left + rect.width);
       if (diffx < 0) {
         rect.width += diffx;
       }
 
       // Does the selection overflow on the bottom of its window?
       let diffy = frameWin.innerHeight - (rect.top + rect.height);
diff --git a/toolkit/devtools/server/actors/inspector.js b/toolkit/devtools/server/actors/inspector.js
--- a/toolkit/devtools/server/actors/inspector.js
+++ b/toolkit/devtools/server/actors/inspector.js
@@ -2188,16 +2188,17 @@ var AttributeModificationList = Class({
 
 /**
  * Server side of the inspector actor, which is used to create
  * inspector-related actors, including the walker.
  */
 var InspectorActor = protocol.ActorClass({
   typeName: "inspector",
   initialize: function(conn, tabActor) {
+    console.log("InspectorActor initialized", tabActor.window.location.toString());
     protocol.Actor.prototype.initialize.call(this, conn);
     this.tabActor = tabActor;
   },
 
   get window() this.tabActor.window,
 
   getWalker: method(function(options={}) {
     if (this._walkerPromise) {
