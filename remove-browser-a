# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  aa1df80bb87f3fce600978c38152320476ece990

diff --git a/browser/base/content/browser-sidebar.js b/browser/base/content/browser-sidebar.js
--- a/browser/base/content/browser-sidebar.js
+++ b/browser/base/content/browser-sidebar.js
@@ -32,34 +32,31 @@ var SidebarUI = {
         url: "chrome://browser/content/syncedtabs/sidebar.xhtml",
         menuId: "menu_tabsSidebar",
         buttonId: "sidebar-switcher-tabs",
         triggerButtonId: "PanelUI-remotetabs-view-sidebar",
       }],
     ]);
   },
 
-  // Avoid getting the browser element from init() to avoid triggering the
-  // <browser> constructor during startup if the sidebar is hidden.
-  get browser() {
-    if (this._browser)
-      return this._browser;
+  createBrowserIfNeeded() {
+    if (this.browser) {
+      return;
+    }
+    this.browser = document.createXULElement("browser");
+    this.browser.id = "sidebar";
+    this.browser.flex = 1;
+    this.browser.setAttribute("autoscroll", "false");
+    this.browser.setAttribute("disablehistory", "true");
+    this.browser.setAttribute("disablefullscreen", "true");
+    this.browser.setAttribute("tooltip", "aHTMLTooltip");
+    this.browser.setAttribute("style", "min-width: 14em; width: 18em; max-width: 36em;");
+    this._box.appendChild(this.browser);
+  },
 
-    this._browser = document.createXULElement("browser");
-    this._browser.id = "sidebar";
-    this._browser.flex = 1;
-    this._browser.setAttribute("autoscroll", "false");
-    this._browser.setAttribute("disablehistory", "true");
-    this._browser.setAttribute("disablefullscreen", "true");
-    this._browser.setAttribute("tooltip", "aHTMLTooltip");
-    this._browser.setAttribute("style", "min-width: 14em; width: 18em; max-width: 36em;");
-    this._box.appendChild(this._browser);
-
-    return this._browser;
-  },
   POSITION_START_PREF: "sidebar.position_start",
   DEFAULT_SIDEBAR_ID: "viewBookmarksSidebar",
 
   // lastOpenedId is set in show() but unlike currentID it's not cleared out on hide
   // and isn't persisted across windows
   lastOpenedId: null,
 
   _box: null,
@@ -454,18 +451,18 @@ var SidebarUI = {
    * Implementation for show. Also used internally for sidebars that are shown
    * when a window is opened and we don't want to ping telemetry.
    *
    * @param {string} commandID ID of the sidebar.
    * @return {Promise<void>}
    */
   _show(commandID) {
     return new Promise(resolve => {
+      this.createBrowserIfNeeded();
       this.selectMenuItem(commandID);
-
       this._box.hidden = this._splitter.hidden = false;
       this.setPosition();
 
       this.hideSwitcherPanel();
 
       this._box.setAttribute("checked", "true");
       this._box.setAttribute("sidebarcommand", commandID);
       this.lastOpenedId = commandID;
@@ -510,23 +507,20 @@ var SidebarUI = {
       return;
     }
 
     this.hideSwitcherPanel();
 
     let commandID = this._box.getAttribute("sidebarcommand");
     this.selectMenuItem("");
 
-    // Replace the document currently displayed in the sidebar with about:blank
-    // so that we can free memory by unloading the page. We need to explicitly
-    // create a new content viewer because the old one doesn't get destroyed
-    // until about:blank has loaded (which does not happen as long as the
-    // element is hidden).
-    this.browser.setAttribute("src", "about:blank");
-    this.browser.docShell.createAboutBlankContentViewer(null, null);
+    // Unload the browser by removing it from the DOM. It will get created again
+    // next time it's needed.
+    this.browser.remove();
+    this.browser = null;
 
     this._box.removeAttribute("checked");
     this._box.hidden = this._splitter.hidden = true;
 
     let selBrowser = gBrowser.selectedBrowser;
     selBrowser.focus();
     selBrowser.messageManager.sendAsyncMessage("Sidebar:VisibilityChange",
       {commandID, isOpen: false}
diff --git a/testing/mochitest/browser-test.js b/testing/mochitest/browser-test.js
--- a/testing/mochitest/browser-test.js
+++ b/testing/mochitest/browser-test.js
@@ -913,17 +913,16 @@ Tester.prototype = {
         if (this._coverageCollector) {
           this._coverageCollector.finalize();
         }
 
         // Uninitialize a few things explicitly so that they can clean up
         // frames and browser intentionally kept alive until shutdown to
         // eliminate false positives.
         if (gConfig.testRoot == "browser") {
-
           let sidebar = document.getElementById("sidebar");
           if (sidebar) {
             // Replace the document currently loaded in the browser's sidebar.
             // This will prevent false positives for tests that were the last
             // to touch the sidebar. They will thus not be blamed for leaking
             // a document.
             if (sidebar) {
               sidebar.setAttribute("src", "data:text/html;charset=utf-8,");
