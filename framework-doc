# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  d933300edeed0c87a9a608a242c3bdbe83734399
Bug 1237014 - Add high level devtools framework documentation;r=pbrosset

diff --git a/devtools/docs/framework.md b/devtools/docs/framework.md
new file mode 100644
--- /dev/null
+++ b/devtools/docs/framework.md
@@ -0,0 +1,70 @@
+
+DevTools Framework Architecture:
+
+gDevTools is the interface for devtools from the rest of the browser.  It provides utility functions to create, destroy, and access toolbox instances.  Some of the key functions:
+
+ - showToolbox() constructs a new Toolbox instance given a particular Target.  A Target is a "thing to debug", like a browser tab, a remote device, a simulator, etc.  Example code:
+
+    let {devtools} = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
+    let target = devtools.TargetFactory.forTab(gBrowser.selectedTab);
+    gDevTools.showToolbox(target, "inspector", "window").then(toolbox=> {
+        console.log(toolbox);
+    });
+
+- getToolbox() returns a Toolbox given a Target.  Example code:
+
+    let {devtools} = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
+    let target = devtools.TargetFactory.forTab(gBrowser.selectedTab);
+    let toolbox = gDevTools.getToolbox(target);
+    toolbox;
+
+Tool Registration:
+
+gDevTools.registerTool(definition) is used to provide metadata for a new Panel, for instance the Debugger or Inspector.  Addons can also use this.
+
+A definition is a plain JS object.  Most important fields:  <String> id and <Function> build, <Function>  isTargetSupported.  The `build` function returns a Panel instance, which is a JS object decorated with EventEmitter, which implements `open` and `destroy` functions.  The `open` function should do whatever is needed to start up the tool, returning a `Promise`.
+
+Note: once a tool has been registered, it is available for any toolbox in the process, because gDevTools is a jsm so  since instance is shared between anything that imports it.  The toolbox later uses `gDevTools.getToolDefintion(toolId)` to build the Panels.
+
+The Toolbox Instance
+
+In charge of:
+
+* Managing the toolbox UI (in an iframe - toolbox.xul)
+* Building the tab bar UI to select tools, 'command buttons', docking controls
+* Constructing new panels and managing selected tool state
+* Plumbing - keyboard shortcuts, remembering last used tool, switching docking mode
+* gDevTools imports this to construct a Toolbox instance
+* The Toolbox can be opened from multiple entry points - "inspect element", ctrl+shift+i, menu bar.
+* Toolbox gets all registered tools via gDevTools.getToolDefinitionArray() and builds tabs for each
+
+Creating a tool
+
+Aka, how does the Debugger UI show up in the toolbox?
+
+When a tab is clicked selectTool() is called:
+
+Basically, just update tabs UI and then call loadTool() 
+
+https://dxr.mozilla.org/mozilla-central/rev/fb720c90eb49590ba55bf52a8a4826ffff9f528b/browser/devtools/framework/toolbox.js#1030
+
+loadTool()
+
+creates an iframe if needed and appends to the deck
+
+definition.build(iframe.contentWindow, this)
+
+Once the panel is built, calls panel.open() and waits for that to return
+
+Once it's all started up, emits "toolid-ready" on the toolbox and gDevTools
+
+Important fact: toolbox manages a XUL `<deck>` of iframes that are lazily created when the tool is selected
+
+This means changes to panels (and even adding new panels) won't affect perf until they are opened.
+
+Can  be a source of confusion though, for instance `debugger;` statements  are skipped if you've just opened the Console panel (Bug 956087)
+
+We've  come up with creative ways to handle situations where we really want a  tool backend to be active regardless of whether the frontend has been opened
+
+We  want inspector backend started for things like highlighting nodes when  hovering in the console, so toolbox.initInspector() is called from a few different places
+
