# HG changeset patch
# Parent 1d64be7e70d12a675e1b74d0e0347e4abaf294a2
# User Heather Arthur <fayearthur@gmail.com>
Bug 1025521 - Only update @media rule list once per update; r=bgrins

diff --git a/browser/devtools/styleeditor/StyleEditorUI.jsm b/browser/devtools/styleeditor/StyleEditorUI.jsm
--- a/browser/devtools/styleeditor/StyleEditorUI.jsm
+++ b/browser/devtools/styleeditor/StyleEditorUI.jsm
@@ -755,17 +755,19 @@ StyleEditorUI.prototype = {
         cond.className = "media-rule-condition"
         if (!rule.matches) {
           cond.classList.add("media-condition-unmatched");
         }
         div.appendChild(cond);
 
         let link = this._panelDoc.createElement("div");
         link.className = "media-rule-line theme-link";
-        link.textContent = ":" + location.line;
+        if (location.line != -1) {
+          link.textContent = ":" + location.line;
+        }
         div.appendChild(link);
 
         list.appendChild(div);
       }
 
       sidebar.hidden = !showSidebar || !inSource;
 
       this.emit("media-list-changed", editor);
diff --git a/browser/devtools/styleeditor/test/browser_styleeditor_media_sidebar.js b/browser/devtools/styleeditor/test/browser_styleeditor_media_sidebar.js
--- a/browser/devtools/styleeditor/test/browser_styleeditor_media_sidebar.js
+++ b/browser/devtools/styleeditor/test/browser_styleeditor_media_sidebar.js
@@ -2,18 +2,19 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 // https rather than chrome to improve coverage
 const TESTCASE_URI = TEST_BASE_HTTPS + "media-rules.html";
 const MEDIA_PREF = "devtools.styleeditor.showMediaSidebar";
 
 const RESIZE = 300;
-const LABELS = ["not all", "all", "(max-width: 400px)"];
-const LINE_NOS = [2, 8, 20];
+const LABELS = ["not all", "all", "(max-width: 400px)", "(max-width: 600px)"];
+const LINE_NOS = [2, 8, 20, 25];
+const NEW_RULE = "\n@media (max-width: 600px) { div { color: blue; } }";
 
 waitForExplicitFinish();
 
 let test = asyncTest(function*() {
   let {UI} = yield addTabAndOpenStyleEditors(2, null, TESTCASE_URI);
 
   is(UI.editors.length, 2, "correct number of editors");
 
@@ -23,46 +24,34 @@ let test = asyncTest(function*() {
   testPlainEditor(plainEditor);
 
   // Test editor with @media rules
   let mediaEditor = UI.editors[1];
   yield openEditor(mediaEditor);
   testMediaEditor(mediaEditor);
 
   // Test that sidebar hides when flipping pref
-  testShowHide(mediaEditor);
+  yield testShowHide(UI, mediaEditor);
+
+  // Test adding a rule updates the list
+  yield testMediaRuleAdded(UI, mediaEditor);
 
   // Test resizing and seeing @media matching state change
   let originalWidth = window.outerWidth;
   let originalHeight = window.outerHeight;
 
   let onMatchesChange = listenForMediaChange(UI);
   window.resizeTo(RESIZE, RESIZE);
   yield onMatchesChange;
 
   testMediaMatchChanged(mediaEditor);
 
   window.resizeTo(originalWidth, originalHeight);
 });
 
-function* testShowHide(editor) {
-  let sidebarChange = listenForMediaChange(UI);
-  Services.prefs.setBoolPref(MEDIA_PREF, false);
-  yield sidebarChange;
-
-  let sidebar = editor.details.querySelector(".stylesheet-sidebar");
-  is(sidebar.hidden, true, "sidebar is hidden after flipping pref");
-
-  sidebarChange = listenForMediaChange(UI);
-  Services.prefs.clearUserPref(MEDIA_PREF);
-  yield sidebarChange;
-
-  is(sidebar.hidden, false, "sidebar is showing after flipping pref back");
-}
-
 function testPlainEditor(editor) {
   let sidebar = editor.details.querySelector(".stylesheet-sidebar");
   is(sidebar.hidden, true, "sidebar is hidden on editor without @media");
 }
 
 function testMediaEditor(editor) {
   let sidebar = editor.details.querySelector(".stylesheet-sidebar");
   is(sidebar.hidden, false, "sidebar is showing on editor with @media");
@@ -79,16 +68,47 @@ function testMediaMatchChanged(editor) {
   let sidebar = editor.details.querySelector(".stylesheet-sidebar");
 
   let cond = sidebar.querySelectorAll(".media-rule-condition")[2];
   is(cond.textContent, "(max-width: 400px)", "third rule condition text is correct");
   ok(!cond.classList.contains("media-condition-unmatched"),
      "media rule is now matched after resizing");
 }
 
+function* testShowHide(UI, editor) {
+  let sidebarChange = listenForMediaChange(UI);
+  Services.prefs.setBoolPref(MEDIA_PREF, false);
+  yield sidebarChange;
+
+  let sidebar = editor.details.querySelector(".stylesheet-sidebar");
+  is(sidebar.hidden, true, "sidebar is hidden after flipping pref");
+
+  sidebarChange = listenForMediaChange(UI);
+  Services.prefs.clearUserPref(MEDIA_PREF);
+  yield sidebarChange;
+
+  is(sidebar.hidden, false, "sidebar is showing after flipping pref back");
+}
+
+function* testMediaRuleAdded(UI, editor) {
+  yield editor.getSourceEditor();
+  let text = editor.sourceEditor.getText();
+  text += NEW_RULE;
+
+  let listChange = listenForMediaChange(UI);
+  editor.sourceEditor.setText(text);
+  yield listChange;
+
+  let sidebar = editor.details.querySelector(".stylesheet-sidebar");
+  let entries = [...sidebar.querySelectorAll(".media-rule-label")];
+  is(entries.length, 4, "four @media rules after changing text");
+
+  testRule(entries[3], LABELS[3], false, LINE_NOS[3]);
+}
+
 function testRule(rule, text, matches, lineno) {
   let cond = rule.querySelector(".media-rule-condition");
   is(cond.textContent, text, "media label is correct for " + text);
 
   let matched = !cond.classList.contains("media-condition-unmatched");
   ok(matches ? matched : !matched,
      "media rule is " + (matches ? "matched" : "unmatched"));
 
diff --git a/browser/themes/shared/devtools/styleeditor.css b/browser/themes/shared/devtools/styleeditor.css
--- a/browser/themes/shared/devtools/styleeditor.css
+++ b/browser/themes/shared/devtools/styleeditor.css
@@ -60,17 +60,17 @@
   font-style: italic;
 }
 
 .splitview-nav.empty > p {
   padding: 0 10px;
 }
 
 .stylesheet-sidebar {
-  width: 230px;
+  width: 237px;
   -moz-border-start: 1px solid;
 }
 
 .theme-light .stylesheet-sidebar {
   border-color: #aaa; /* Splitters */
 }
 
 .theme-dark .stylesheet-sidebar {
@@ -86,16 +86,20 @@
 }
 
 .media-rule-label {
   padding: 4px;
   cursor: pointer;
   border-bottom: 1px solid;
 }
 
+.media-rule-line {
+  -moz-padding-start: 4px;
+}
+
 .theme-light .media-condition-unmatched {
   color: grey;
 }
 
 .theme-dark .media-condition-unmatched {
   color: #606C75;
 }
 
diff --git a/toolkit/devtools/server/actors/stylesheets.js b/toolkit/devtools/server/actors/stylesheets.js
--- a/toolkit/devtools/server/actors/stylesheets.js
+++ b/toolkit/devtools/server/actors/stylesheets.js
@@ -69,19 +69,16 @@ let StyleSheetsActor = protocol.ActorCla
     return { actor: this.actorID };
   },
 
   initialize: function (conn, tabActor) {
     protocol.Actor.prototype.initialize.call(this, null);
 
     this.parentActor = tabActor;
 
-    // so we can get events when stylesheets and rules are added
-    this.document.styleSheetChangeEventsEnabled = true;
-
     // keep a map of sheets-to-actors so we don't create two actors for one sheet
     this._sheets = new Map();
   },
 
   /**
    * Destroy the current StyleSheetsActor instance.
    */
   destroy: function()
@@ -474,34 +471,16 @@ let StyleSheetActor = protocol.ActorClas
 
     this._window = aWindow;
 
     // text and index are unknown until source load
     this.text = null;
     this._styleSheetIndex = -1;
 
     this._transitionRefCount = 0;
-
-    this._onRuleAddedOrRemoved = this._onRuleAddedOrRemoved.bind(this);
-
-    if (this.browser) {
-      this.browser.addEventListener("StyleRuleAdded", this._onRuleAddedOrRemoved, true);
-      this.browser.addEventListener("StyleRuleRemoved", this._onRuleAddedOrRemoved, true);
-    }
-  },
-
-  _onRuleAddedOrRemoved: function(event) {
-    if (event.target != this.document || event.stylesheet != this.rawSheet) {
-      return;
-    }
-    if (event.rule && event.rule.type == Ci.nsIDOMCSSRule.MEDIA_RULE) {
-      this._getMediaRules().then((rules) => {
-        events.emit(this, "media-rules-changed", rules);
-      });
-    }
   },
 
   /**
    * Get the raw stylesheet's cssRules once the sheet has been loaded.
    *
    * @return {Promise}
    *         Promise that resolves with a CSSRuleList
    */
@@ -916,16 +895,20 @@ let StyleSheetActor = protocol.ActorClas
     this._notifyPropertyChanged("ruleCount");
 
     if (transition) {
       this._insertTransistionRule();
     }
     else {
       this._notifyStyleApplied();
     }
+
+    this._getMediaRules().then((rules) => {
+      events.emit(this, "media-rules-changed", rules);
+    });
   }, {
     request: {
       text: Arg(0, "string"),
       transition: Arg(1, "boolean")
     }
   }),
 
   /**
