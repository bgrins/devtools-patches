# HG changeset patch
# User Jaideep Bhoosreddy <jaideepb@buffalo.edu>
# Parent  bc0357ac00af9204f50aca893ea7610b749b3f0d
Bug 1257913 - Tests for screenshot to clipboard feature; r?bgrins

diff --git a/devtools/client/framework/test/browser.ini b/devtools/client/framework/test/browser.ini
--- a/devtools/client/framework/test/browser.ini
+++ b/devtools/client/framework/test/browser.ini
@@ -43,16 +43,17 @@ support-files =
 [browser_target_support.js]
 [browser_toolbox_custom_host.js]
 [browser_toolbox_dynamic_registration.js]
 [browser_toolbox_getpanelwhenready.js]
 [browser_toolbox_highlight.js]
 [browser_toolbox_hosts.js]
 [browser_toolbox_hosts_size.js]
 [browser_toolbox_keyboard_navigation.js]
+[browser_toolbox_screenshot.js]
 skip-if = os == "mac" # Full keyboard navigation on OSX only works if Full Keyboard Access setting is set to All Control in System Keyboard Preferences
 [browser_toolbox_minimize.js]
 skip-if = true # Bug 1177463 - Temporarily hide the minimize button
 [browser_toolbox_options.js]
 [browser_toolbox_options_disable_buttons.js]
 [browser_toolbox_options_disable_cache-01.js]
 [browser_toolbox_options_disable_cache-02.js]
 [browser_toolbox_options_disable_js.js]
diff --git a/devtools/client/framework/test/browser_toolbox_options.js b/devtools/client/framework/test/browser_toolbox_options.js
--- a/devtools/client/framework/test/browser_toolbox_options.js
+++ b/devtools/client/framework/test/browser_toolbox_options.js
@@ -151,17 +151,17 @@ function* testMouseClick(node, prefValue
   });
 
   node.scrollIntoView();
 
   // We use executeSoon here to ensure that the element is in view and
   // clickable.
   executeSoon(function () {
     info("Click event synthesized for pref " + pref);
-    EventUtils.synthesizeMouseAtCenter(node, {}, panelWin);
+    node.click();
   });
 
   yield deferred.promise;
 }
 
 function* testToggleTools() {
   let toolNodes = panelWin.document.querySelectorAll(
     "#default-tools-box input[type=checkbox]:not([data-unsupported])," +
@@ -224,18 +224,17 @@ function* toggleTool(node) {
   if (node.checked) {
     gDevTools.once("tool-unregistered",
       checkUnregistered.bind(null, toolId, deferred));
   } else {
     gDevTools.once("tool-registered",
       checkRegistered.bind(null, toolId, deferred));
   }
   node.scrollIntoView();
-  EventUtils.synthesizeMouseAtCenter(node, {}, panelWin);
-
+  node.click();
   yield deferred.promise;
 }
 
 function checkUnregistered(toolId, deferred, event, data) {
   if (data.id == toolId) {
     ok(true, "Correct tool removed");
     // checking tab on the toolbox
     ok(!doc.getElementById("toolbox-tab-" + toolId),
diff --git a/devtools/client/framework/test/browser_toolbox_screenshot.js b/devtools/client/framework/test/browser_toolbox_screenshot.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/framework/test/browser_toolbox_screenshot.js
@@ -0,0 +1,62 @@
+/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/* import-globals-from shared-head.js */
+"use strict";
+
+// Tests that changing preferences in the options panel updates the prefs
+// and toggles appropriate things in the toolbox.
+
+add_task(function* () {
+  const URL = "data:text/html;charset=utf8,screenshot to clipboard";
+  let toolbox = yield openNewTabAndToolbox(URL);
+  yield toolbox.selectTool("options");
+  yield testScreenshotOptions(toolbox);
+});
+
+function* testScreenshotOptions(toolbox) {
+  info("Testing screenshot options");
+  let toggledTool = false;
+  let tool = toolbox.getPanel("options");
+  let panelWin = tool.panelWin;
+  let toolNodes = panelWin.document.querySelectorAll(
+    "#enabled-toolbox-buttons-box input[type=checkbox]:not([data-unsupported])");
+  let screenshotNode = [...toolNodes]
+    .filter(node => node.id === "command-button-screenshot")[0];
+  if (!screenshotNode.checked) {
+    toggledTool = true;
+    is(getScreenshotButton(toolbox), null, "Screenshot button is not created or hidden");
+    info("Enabling screenshot toolbar button");
+    screenshotNode.scrollIntoView();
+    screenshotNode.click();
+    is(!!getScreenshotButton(toolbox), true, "Screenshot button is created");
+  }
+
+  toolNodes = panelWin.document.querySelectorAll(
+    "#screenshot-options input[type=checkbox]:not([data-unsupported])");
+
+  // Executing test twice to return to default state
+  for (let i = 0; i < 2; i++) {
+    for (let node of toolNodes) {
+      info("Toggling: " + node.getAttribute("id"));
+      node.scrollIntoView();
+      node.click();
+      is(!!getScreenshotButton(toolbox), true,
+        "Screenshot button is rebuilt after toggling: " + node.id);
+    }
+  }
+  // Setting screenshot node preference to default value
+  if (toggledTool) {
+    screenshotNode.scrollIntoView();
+    screenshotNode.click();
+  }
+}
+
+function getScreenshotButton(toolbox) {
+  const toolboxButtonNodes = [...toolbox.doc.querySelectorAll(".command-button")];
+  const screenshotButton = toolboxButtonNodes
+    .filter(button => button.id === "command-button-screenshot" && !button.hidden);
+  return screenshotButton[0] || null;
+}
