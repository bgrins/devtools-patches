# HG changeset patch
# Parent 7a776d0c87e6be3863a5ad389d13afff948a5a5a
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  e8ae9c511b505ee733128d3fb227aa92b9ddabb8
Bug 1120406 - Indicate which nodes have a pseudo-class lock applied in the markup view;r=gl

diff --git a/browser/devtools/markupview/markup-view.js b/browser/devtools/markupview/markup-view.js
--- a/browser/devtools/markupview/markup-view.js
+++ b/browser/devtools/markupview/markup-view.js
@@ -805,16 +805,18 @@ MarkupView.prototype = {
         // Auto refresh style properties on selected node when they change.
         if (type === "attributes" && container.selected) {
           requiresLayoutChange = true;
         }
       } else if (type === "childList") {
         container.childrenDirty = true;
         // Update the children to take care of changes in the markup view DOM.
         this._updateChildren(container, {flash: true});
+      } else if (type === "pseudoClassLock") {
+        container.update();
       }
     }
 
     if (requiresLayoutChange) {
       this._inspector.immediateLayoutChange();
     }
     this._waitForChildren().then((nodes) => {
       if (this._destroyer) {
@@ -1812,22 +1814,29 @@ MarkupContainer.prototype = {
 
   /**
    * True if the current node can be expanded.
    */
   get canExpand() {
     return this._hasChildren && !this.node.singleTextChild;
   },
 
+  /**
+   * True if this is the root <html> element and can't be collapsed
+   */
+  get mustExpand() {
+    return this.node._parent === this.markup.walker.rootNode;
+  },
+
   updateExpander: function() {
     if (!this.expander) {
       return;
     }
 
-    if (this.canExpand) {
+    if (this.canExpand && !this.mustExpand) {
       this.expander.style.visibility = "visible";
     } else {
       this.expander.style.visibility = "hidden";
     }
   },
 
   /**
    * If the node has children, return the list of containers for all these
@@ -1851,16 +1860,19 @@ MarkupContainer.prototype = {
   setExpanded: function(aValue) {
     if (!this.expander) {
       return;
     }
 
     if (!this.canExpand) {
       aValue = false;
     }
+    if (this.mustExpand) {
+      aValue = true;
+    }
 
     if (aValue && this.elt.classList.contains("collapsed")) {
       // Expanding a node means cloning its "inline" closing tag into a new
       // tag-line that the user can interact with and showing the children.
       let closingTag = this.elt.querySelector(".close");
       if (closingTag) {
         if (!this.closeTagLine) {
           let line = this.markup.doc.createElement("div");
@@ -2082,16 +2094,22 @@ MarkupContainer.prototype = {
     }
   },
 
   /**
    * Update the container's editor to the current state of the
    * viewed node.
    */
   update: function() {
+    if (this.node.pseudoClassLocks.length) {
+      this.elt.classList.add("pseudoclass-locked");
+    } else {
+      this.elt.classList.remove("pseudoclass-locked");
+    }
+
     if (this.editor.update) {
       this.editor.update();
     }
   },
 
   /**
    * Try to put keyboard focus on the current editor.
    */
diff --git a/browser/devtools/markupview/test/browser_markupview_navigation.js b/browser/devtools/markupview/test/browser_markupview_navigation.js
--- a/browser/devtools/markupview/test/browser_markupview_navigation.js
+++ b/browser/devtools/markupview/test/browser_markupview_navigation.js
@@ -58,17 +58,17 @@ const TEST_DATA = [
   ["down", "node7"],
   ["left", "node7"],
   ["down", "node9"],
   ["down", "node10"],
   ["pageup", "node2"],
   ["pageup", "*doctype*"],
   ["down", "html"],
   ["left", "html"],
-  ["down", "html"]
+  ["down", "head"]
 ];
 
 add_task(function*() {
   let {inspector} = yield addTab(TEST_URL).then(openInspector);
 
   info("Making sure the markup-view frame is focused");
   inspector.markup._frame.focus();
 
diff --git a/browser/devtools/markupview/test/browser_markupview_toggle_01.js b/browser/devtools/markupview/test/browser_markupview_toggle_01.js
--- a/browser/devtools/markupview/test/browser_markupview_toggle_01.js
+++ b/browser/devtools/markupview/test/browser_markupview_toggle_01.js
@@ -6,18 +6,27 @@
 
 // Test toggling (expand/collapse) elements by clicking on twisties
 
 const TEST_URL = TEST_URL_ROOT + "doc_markup_toggle.html";
 
 add_task(function*() {
   let {inspector} = yield addTab(TEST_URL).then(openInspector);
 
+  info("Getting the container for the html element");
+  let container = yield getContainerForSelector("html", inspector);
+  ok(container.mustExpand, "HTML element mustExpand");
+  ok(container.canExpand, "HTML element canExpand");
+  is(container.expander.style.visibility, "hidden", "HTML twisty is hidden");
+
   info("Getting the container for the UL parent element");
-  let container = yield getContainerForSelector("ul", inspector);
+  container = yield getContainerForSelector("ul", inspector);
+  ok(!container.mustExpand, "UL element !mustExpand");
+  ok(container.canExpand, "UL element canExpand");
+  is(container.expander.style.visibility, "visible", "HTML twisty is visible");
 
   info("Clicking on the UL parent expander, and waiting for children");
   let onChildren = waitForChildrenUpdated(inspector);
   let onUpdated = inspector.once("inspector-updated");
   EventUtils.synthesizeMouseAtCenter(container.expander, {},
     inspector.markup.doc.defaultView);
   yield onChildren;
   yield onUpdated;
diff --git a/browser/themes/shared/devtools/markup-view.css b/browser/themes/shared/devtools/markup-view.css
--- a/browser/themes/shared/devtools/markup-view.css
+++ b/browser/themes/shared/devtools/markup-view.css
@@ -10,16 +10,28 @@
 .more-nodes {
   padding-left: 16px;
 }
 
 .styleinspector-propertyeditor {
   border: 1px solid #CCC;
 }
 
+/* Draw a circle next to nodes that have a pseudo class lock.
+   Center vertically with the 1.4em line height on .tag-line */
+.child.pseudoclass-locked::before {
+  content: "";
+  background: var(--theme-highlight-lightorange);
+  border-radius: 50%;
+  width: .8em;
+  height: .8em;
+  margin-top: .3em;
+  left: 1px;
+  position: absolute;
+}
 
 /* Selected nodes in the tree should have light selected text.
    theme-selected doesn't work in this case since the text is a
    sibling of the class, not a child. */
 .theme-selected ~ .editor,
 .theme-selected ~ .editor .theme-fg-color1,
 .theme-selected ~ .editor .theme-fg-color2,
 .theme-selected ~ .editor .theme-fg-color3,
