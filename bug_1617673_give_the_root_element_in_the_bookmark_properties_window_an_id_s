# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1583534776 28800
#      Fri Mar 06 14:46:16 2020 -0800
# Node ID 339a9af054d4a7deafbfe88d7d77d73fd219201d
# Parent  f3da8ae9d1a3e74cd273746da51a035ddc572bee
Bug 1617673 - Give the root element in the bookmark properties window an id so that persistence works again

The ID was removed in Bug 1585482 and moved to the child dialog element which breaks xulstore persistence.
This gives the dialog a new id and uses the original "bookmarkproperties" for the window so any existing
xulstore values will work without a ui migration.

Differential Revision: https://phabricator.services.mozilla.com/D65829

diff --git a/browser/components/places/content/bookmarkProperties.js b/browser/components/places/content/bookmarkProperties.js
--- a/browser/components/places/content/bookmarkProperties.js
+++ b/browser/components/places/content/bookmarkProperties.js
@@ -243,34 +243,34 @@ var BookmarkPropertiesPanel = {
       BookmarkPropertiesPanel.onDialogAccept();
     });
     document.addEventListener("dialogcancel", function() {
       BookmarkPropertiesPanel.onDialogCancel();
     });
 
     // Disable the buttons until we have all the information required.
     let acceptButton = document
-      .getElementById("bookmarkproperties")
+      .getElementById("bookmarkpropertiesdialog")
       .getButton("accept");
     acceptButton.disabled = true;
 
     // Allow initialization to complete in a truely async manner so that we're
     // not blocking the main thread.
     this._initDialog().catch(ex => {
       Cu.reportError(`Failed to initialize dialog: ${ex}`);
     });
   },
 
   /**
    * Initializes the dialog, gathering the required bookmark data. This function
    * will enable the accept button (if appropraite) when it is complete.
    */
   async _initDialog() {
     let acceptButton = document
-      .getElementById("bookmarkproperties")
+      .getElementById("bookmarkpropertiesdialog")
       .getButton("accept");
     acceptButton.label = this._getAcceptLabel();
     let acceptButtonDisabled = false;
 
     // Do not use sizeToContent, otherwise, due to bug 90276, the dialog will
     // grow at every opening.
     // Since elements can be uncollapsed asynchronously, we must observe their
     // mutations and resize the dialog using a cached element size.
@@ -364,17 +364,17 @@ var BookmarkPropertiesPanel = {
     switch (aEvent.type) {
       case "input":
         if (
           target.id == "editBMPanel_locationField" ||
           target.id == "editBMPanel_keywordField"
         ) {
           // Check uri fields to enable accept button if input is valid
           document
-            .getElementById("bookmarkproperties")
+            .getElementById("bookmarkpropertiesdialog")
             .getButton("accept").disabled = !this._inputIsValid();
         }
         break;
       case "resize":
         for (let [id, oldHeight] of elementsHeight) {
           let newHeight = document.getElementById(id).getBoundingClientRect()
             .height;
           this._height += -oldHeight + newHeight;
diff --git a/browser/components/places/content/bookmarkProperties.xhtml b/browser/components/places/content/bookmarkProperties.xhtml
--- a/browser/components/places/content/bookmarkProperties.xhtml
+++ b/browser/components/places/content/bookmarkProperties.xhtml
@@ -11,21 +11,22 @@
 
 <!DOCTYPE window [
   <!ENTITY % editBookmarkOverlayDTD SYSTEM "chrome://browser/locale/places/editBookmarkOverlay.dtd">
   %editBookmarkOverlayDTD;
 ]>
 
 <window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
         xmlns:html="http://www.w3.org/1999/xhtml"
+        id="bookmarkproperties"
         onload="BookmarkPropertiesPanel.onDialogLoad();"
         onunload="BookmarkPropertiesPanel.onDialogUnload();"
         style="min-width: 30em;"
         persist="screenX screenY width">
-<dialog id="bookmarkproperties"
+<dialog id="bookmarkpropertiesdialog"
         buttons="accept, cancel"
         buttoniconaccept="save">
 
   <stringbundleset id="stringbundleset">
     <stringbundle id="stringBundle"
                   src="chrome://browser/locale/places/bookmarkProperties.properties"/>
   </stringbundleset>
 
diff --git a/browser/components/places/tests/browser/browser_bookmarkProperties_addKeywordForThisSearch.js b/browser/components/places/tests/browser/browser_bookmarkProperties_addKeywordForThisSearch.js
--- a/browser/components/places/tests/browser/browser_bookmarkProperties_addKeywordForThisSearch.js
+++ b/browser/components/places/tests/browser/browser_bookmarkProperties_addKeywordForThisSearch.js
@@ -25,17 +25,17 @@ add_task(async function() {
         '#form1 > input[name="search"]'
       );
 
       await withBookmarksDialog(
         true,
         AddKeywordForSearchField,
         async function(dialogWin) {
           let acceptBtn = dialogWin.document
-            .getElementById("bookmarkproperties")
+            .getElementById("bookmarkpropertiesdialog")
             .getButton("accept");
           Assert.ok(acceptBtn.disabled, "Accept button is disabled");
 
           let promiseKeywordNotification = PlacesTestUtils.waitForNotification(
             "onItemChanged",
             (itemId, prop, isAnno, val) => prop == "keyword" && val == "kw"
           );
 
@@ -108,17 +108,17 @@ add_task(async function reopen_same_fiel
         '#form1 > input[name="search"]'
       );
 
       await withBookmarksDialog(
         true,
         AddKeywordForSearchField,
         async function(dialogWin) {
           let acceptBtn = dialogWin.document
-            .getElementById("bookmarkproperties")
+            .getElementById("bookmarkpropertiesdialog")
             .getButton("accept");
           ok(acceptBtn.disabled, "Accept button is disabled");
 
           let elt = dialogWin.document.getElementById(
             "editBMPanel_keywordField"
           );
           await BrowserTestUtils.waitForCondition(
             () => elt.value == "kw",
@@ -154,17 +154,17 @@ add_task(async function open_other_field
         '#form2 > input[name="search"]'
       );
 
       await withBookmarksDialog(
         true,
         AddKeywordForSearchField,
         function(dialogWin) {
           let acceptBtn = dialogWin.document
-            .getElementById("bookmarkproperties")
+            .getElementById("bookmarkpropertiesdialog")
             .getButton("accept");
           ok(acceptBtn.disabled, "Accept button is disabled");
 
           let elt = dialogWin.document.getElementById(
             "editBMPanel_keywordField"
           );
           is(elt.value, "");
         },
diff --git a/browser/components/places/tests/browser/browser_bookmarkProperties_bookmarkAllTabs.js b/browser/components/places/tests/browser/browser_bookmarkProperties_bookmarkAllTabs.js
--- a/browser/components/places/tests/browser/browser_bookmarkProperties_bookmarkAllTabs.js
+++ b/browser/components/places/tests/browser/browser_bookmarkProperties_bookmarkAllTabs.js
@@ -15,17 +15,17 @@ add_task(async function() {
 
   await withBookmarksDialog(
     true,
     function open() {
       document.getElementById("Browser:BookmarkAllTabs").doCommand();
     },
     async dialog => {
       let acceptBtn = dialog.document
-        .getElementById("bookmarkproperties")
+        .getElementById("bookmarkpropertiesdialog")
         .getButton("accept");
       Assert.ok(!acceptBtn.disabled, "Accept button is enabled");
 
       let namepicker = dialog.document.getElementById("editBMPanel_namePicker");
       Assert.ok(!namepicker.readOnly, "Name field is writable");
       let folderName = dialog.document
         .getElementById("stringBundle")
         .getString("bookmarkAllTabsDefault");
diff --git a/browser/components/places/tests/browser/browser_bookmarkProperties_cancel.js b/browser/components/places/tests/browser/browser_bookmarkProperties_cancel.js
--- a/browser/components/places/tests/browser/browser_bookmarkProperties_cancel.js
+++ b/browser/components/places/tests/browser/browser_bookmarkProperties_cancel.js
@@ -49,17 +49,17 @@ add_task(async function test_cancel_with
     // Now open the bookmarks dialog and cancel it.
     await withBookmarksDialog(
       true,
       function openDialog() {
         tree.controller.doCommand("placesCmd_show:info");
       },
       async function test(dialogWin) {
         let acceptButton = dialogWin.document
-          .getElementById("bookmarkproperties")
+          .getElementById("bookmarkpropertiesdialog")
           .getButton("accept");
         await BrowserTestUtils.waitForCondition(
           () => !acceptButton.disabled,
           "The accept button should be enabled"
         );
       }
     );
 
@@ -88,17 +88,17 @@ add_task(async function test_cancel_with
     // Now open the bookmarks dialog and cancel it.
     await withBookmarksDialog(
       true,
       function openDialog() {
         tree.controller.doCommand("placesCmd_show:info");
       },
       async function test(dialogWin) {
         let acceptButton = dialogWin.document
-          .getElementById("bookmarkproperties")
+          .getElementById("bookmarkpropertiesdialog")
           .getButton("accept");
         await BrowserTestUtils.waitForCondition(
           () => !acceptButton.disabled,
           "The accept button should be enabled"
         );
 
         let promiseTitleChangeNotification = PlacesTestUtils.waitForNotification(
           "onItemChanged",
diff --git a/browser/components/places/tests/browser/browser_bookmarkProperties_readOnlyRoot.js b/browser/components/places/tests/browser/browser_bookmarkProperties_readOnlyRoot.js
--- a/browser/components/places/tests/browser/browser_bookmarkProperties_readOnlyRoot.js
+++ b/browser/components/places/tests/browser/browser_bookmarkProperties_readOnlyRoot.js
@@ -15,17 +15,17 @@ add_task(async function test_dialog() {
         // Even if the cmd is disabled, we can execute it regardless.
         tree.controller.doCommand("placesCmd_show:info");
       },
       async function test(dialogWin) {
         // Check that the dialog is read-only.
         Assert.ok(dialogWin.gEditItemOverlay.readOnly, "Dialog is read-only");
         // Check that accept button is disabled
         let acceptButton = dialogWin.document
-          .getElementById("bookmarkproperties")
+          .getElementById("bookmarkpropertiesdialog")
           .getButton("accept");
         Assert.ok(acceptButton.disabled, "Accept button is disabled");
 
         // Check that name picker is read only
         let namepicker = dialogWin.document.getElementById(
           "editBMPanel_namePicker"
         );
         Assert.ok(namepicker.readOnly, "Name field is read-only");
diff --git a/browser/components/places/tests/browser/browser_bookmarksProperties.js b/browser/components/places/tests/browser/browser_bookmarksProperties.js
--- a/browser/components/places/tests/browser/browser_bookmarksProperties.js
+++ b/browser/components/places/tests/browser/browser_bookmarksProperties.js
@@ -116,17 +116,17 @@ gTests.push({
 
     var popupListener = {
       handleEvent(aEvent) {
         switch (aEvent.type) {
           case "popuphidden":
             // Everything worked fine, we can stop observing the window.
             self._cleanShutdown = true;
             self.window.document
-              .getElementById("bookmarkproperties")
+              .getElementById("bookmarkpropertiesdialog")
               .cancelDialog();
             break;
           case "popupshown":
             tagsField.popup.removeEventListener("popupshown", this, true);
             // In case this test fails the window will close, the test will fail
             // since we didn't set _cleanShutdown.
             let richlistbox = tagsField.popup.richlistbox;
             // Focus and select first result.
@@ -245,17 +245,17 @@ gTests.push({
 
     var popupListener = {
       handleEvent(aEvent) {
         switch (aEvent.type) {
           case "popuphidden":
             // Everything worked fine.
             self._cleanShutdown = true;
             self.window.document
-              .getElementById("bookmarkproperties")
+              .getElementById("bookmarkpropertiesdialog")
               .cancelDialog();
             break;
           case "popupshown":
             tagsField.popup.removeEventListener("popupshown", this, true);
             // In case this test fails the window will close, the test will fail
             // since we didn't set _cleanShutdown.
             let richlistbox = tagsField.popup.richlistbox;
             // Focus and select first result.
@@ -402,17 +402,17 @@ gTests.push({
         self._cleanShutdown = true;
         self._removeObserver = PlacesTestUtils.waitForNotification(
           "bookmark-removed",
           events => events.some(eve => eve.guid == self._bookmarkGuid),
           "places"
         );
 
         self.window.document
-          .getElementById("bookmarkproperties")
+          .getElementById("bookmarkpropertiesdialog")
           .cancelDialog();
       });
     });
     foldersExpander.doCommand();
     await unloadPromise;
   },
 
   finish() {
diff --git a/browser/components/places/tests/browser/head.js b/browser/components/places/tests/browser/head.js
--- a/browser/components/places/tests/browser/head.js
+++ b/browser/components/places/tests/browser/head.js
@@ -261,17 +261,17 @@ var withBookmarksDialog = async function
     closePromise = closeFn(dialogWin);
   }
 
   try {
     await taskFn(dialogWin);
   } finally {
     if (!closed && autoCancel) {
       info("withBookmarksDialog: canceling the dialog");
-      doc.getElementById("bookmarkproperties").cancelDialog();
+      doc.getElementById("bookmarkpropertiesdialog").cancelDialog();
       await closePromise;
     }
     // Give the dialog a little time to close itself.
     await BrowserTestUtils.waitForCondition(
       () => closed,
       "The dialog should be closed!"
     );
   }
