# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  155a7e2117e575ff6de6caa3dfe5b076cb455ae1
Bug 1550061 - WIP - Create an HTML custom element replacement for xul key

diff --git a/browser/base/content/browser-development-helpers.js b/browser/base/content/browser-development-helpers.js
--- a/browser/base/content/browser-development-helpers.js
+++ b/browser/base/content/browser-development-helpers.js
@@ -25,22 +25,21 @@ var DevelopmentHelpers = {
 
   addRestartShortcut() {
     let command = document.createXULElement("command");
     command.setAttribute("id", "cmd_quickRestart");
     command.addEventListener("command", this.quickRestart, true);
     command.setAttribute("oncommand", "void 0;"); // Needed - bug 371900
     document.getElementById("mainCommandSet").prepend(command);
 
-    let key = document.createXULElement("key");
+    let key = document.createElement("moz-key");
     key.setAttribute("id", "key_quickRestart");
     key.setAttribute("key", "r");
     key.setAttribute("modifiers", "accel,alt");
     key.setAttribute("command", "cmd_quickRestart");
-    key.setAttribute("oncommand", "void 0;"); // Needed - bug 371900
     document.getElementById("mainKeyset").prepend(key);
 
     let menuitem = document.createXULElement("menuitem");
     menuitem.setAttribute("id", "menu_FileRestartItem");
     menuitem.setAttribute("key", "key_quickRestart");
     menuitem.setAttribute("label", "Restart (Developer)");
     menuitem.addEventListener("command", this.quickRestart, true);
     document.getElementById("menu_FilePopup").appendChild(menuitem);
diff --git a/browser/base/content/browser-sets.inc b/browser/base/content/browser-sets.inc
--- a/browser/base/content/browser-sets.inc
+++ b/browser/base/content/browser-sets.inc
@@ -106,26 +106,26 @@
              label="&zoomWindow.label;"
              oncommand="zoomWindow();" />
 #endif
   </commandset>
 
 #include ../../components/places/content/placesCommands.inc.xul
 
   <keyset id="mainKeyset">
-    <key id="key_newNavigator"
+    <html:moz-key id="key_newNavigator"
          key="&newNavigatorCmd.key;"
          command="cmd_newNavigator"
          modifiers="accel" reserved="true"/>
-    <key id="key_newNavigatorTab" key="&tabCmd.commandkey;" modifiers="accel"
+    <html:moz-key id="key_newNavigatorTab" key="&tabCmd.commandkey;" modifiers="accel"
          command="cmd_newNavigatorTabNoEvent" reserved="true"/>
-    <key id="focusURLBar" key="&openCmd.commandkey;" command="Browser:OpenLocation"
+    <html:moz-key id="focusURLBar" key="&openCmd.commandkey;" command="Browser:OpenLocation"
          modifiers="accel"/>
 #ifndef XP_MACOSX
-    <key id="focusURLBar2" key="&urlbar.accesskey;" command="Browser:OpenLocation"
+    <html:moz-key id="focusURLBar2" key="&urlbar.accesskey;" command="Browser:OpenLocation"
          modifiers="alt"/>
 #endif
 
 #
 # Search Command Key Logic works like this:
 #
 # Unix: Ctrl+K (cross platform binding)
 #       Ctrl+J (in case of emacs Ctrl-K conflict)
@@ -136,214 +136,215 @@
 #
 # We support Ctrl+K on all platforms now and advertise it in the menu since it is
 # our standard - it is a "safe" choice since it is near no harmful keys like "W" as
 # "E" is. People mourning the loss of Ctrl+K for emacs compat can switch their GTK
 # system setting to use emacs emulation, and we should respect it. Focus-Search-Box
 # is a fundamental keybinding and we are maintaining a XP binding so that it is easy
 # for people to switch to Linux.
 #
-    <key id="key_search" key="&searchFocus.commandkey;" command="Tools:Search" modifiers="accel"/>
+    <html:moz-key id="key_search" key="&searchFocus.commandkey;" command="Tools:Search" modifiers="accel"/>
 #ifdef XP_MACOSX
-    <key id="key_search2" key="&findOnCmd.commandkey;" command="Tools:Search" modifiers="accel,alt"/>
+    <html:moz-key id="key_search2" key="&findOnCmd.commandkey;" command="Tools:Search" modifiers="accel,alt"/>
 #endif
 #ifdef XP_WIN
-    <key id="key_search2" key="&searchFocus.commandkey2;" command="Tools:Search" modifiers="accel"/>
+    <html:moz-key id="key_search2" key="&searchFocus.commandkey2;" command="Tools:Search" modifiers="accel"/>
 #endif
 #ifdef XP_GNOME
-    <key id="key_search2" key="&searchFocusUnix.commandkey;" command="Tools:Search" modifiers="accel"/>
-    <key id="key_openDownloads" key="&downloadsUnix.commandkey;" command="Tools:Downloads" modifiers="accel,shift"/>
+    <html:moz-key id="key_search2" key="&searchFocusUnix.commandkey;" command="Tools:Search" modifiers="accel"/>
+    <html:moz-key id="key_openDownloads" key="&downloadsUnix.commandkey;" command="Tools:Downloads" modifiers="accel,shift"/>
 #else
-    <key id="key_openDownloads" key="&downloads.commandkey;" command="Tools:Downloads" modifiers="accel"/>
+    <html:moz-key id="key_openDownloads" key="&downloads.commandkey;" command="Tools:Downloads" modifiers="accel"/>
 #endif
-    <key id="key_openAddons" key="&addons.commandkey;" command="Tools:Addons" modifiers="accel,shift"/>
-    <key id="openFileKb" key="&openFileCmd.commandkey;" command="Browser:OpenFile"  modifiers="accel"/>
-    <key id="key_savePage" key="&savePageCmd.commandkey;" command="Browser:SavePage" modifiers="accel"/>
-    <key id="printKb" key="&printCmd.commandkey;" command="cmd_print"  modifiers="accel"/>
-    <key id="key_close" key="&closeCmd.key;" command="cmd_close" modifiers="accel" reserved="true"/>
-    <key id="key_closeWindow" key="&closeCmd.key;" command="cmd_closeWindow" modifiers="accel,shift" reserved="true"/>
-    <key id="key_toggleMute" key="&toggleMuteCmd.key;" command="cmd_toggleMute" modifiers="control"/>
-    <key id="key_undo"
+    <html:moz-key id="key_openAddons" key="&addons.commandkey;" command="Tools:Addons" modifiers="accel,shift"/>
+    <html:moz-key id="openFileKb" key="&openFileCmd.commandkey;" command="Browser:OpenFile"  modifiers="accel"/>
+    <html:moz-key id="key_savePage" key="&savePageCmd.commandkey;" command="Browser:SavePage" modifiers="accel"/>
+    <html:moz-key id="printKb" key="&printCmd.commandkey;" command="cmd_print"  modifiers="accel"/>
+    <html:moz-key id="key_close" key="&closeCmd.key;" command="cmd_close" modifiers="accel" reserved="true"/>
+    <html:moz-key id="key_closeWindow" key="&closeCmd.key;" command="cmd_closeWindow" modifiers="accel,shift" reserved="true"/>
+    <html:moz-key id="key_toggleMute" key="&toggleMuteCmd.key;" command="cmd_toggleMute" modifiers="control"/>
+    <html:moz-key id="key_undo"
          key="&undoCmd.key;"
          modifiers="accel"/>
 #ifdef XP_UNIX
-    <key id="key_redo" key="&undoCmd.key;" modifiers="accel,shift"/>
+    <html:moz-key id="key_redo" key="&undoCmd.key;" modifiers="accel,shift"/>
 #else
-    <key id="key_redo" key="&redoCmd.key;" modifiers="accel"/>
+    <html:moz-key id="key_redo" key="&redoCmd.key;" modifiers="accel"/>
 #endif
-    <key id="key_cut"
+    <html:moz-key id="key_cut"
          key="&cutCmd.key;"
          modifiers="accel"/>
-    <key id="key_copy"
+    <html:moz-key id="key_copy"
          key="&copyCmd.key;"
          modifiers="accel"/>
-    <key id="key_paste"
+    <html:moz-key id="key_paste"
          key="&pasteCmd.key;"
          modifiers="accel"/>
-    <key id="key_delete" keycode="VK_DELETE" command="cmd_delete"/>
-    <key id="key_selectAll" key="&selectAllCmd.key;" modifiers="accel"/>
+    <html:moz-key id="key_delete" keycode="VK_DELETE" command="cmd_delete"/>
+    <html:moz-key id="key_selectAll" key="&selectAllCmd.key;" modifiers="accel"/>
 
-    <key keycode="VK_BACK" command="cmd_handleBackspace" reserved="false"/>
-    <key keycode="VK_BACK" command="cmd_handleShiftBackspace" modifiers="shift" reserved="false"/>
+    <html:moz-key keycode="VK_BACK" command="cmd_handleBackspace" reserved="false"/>
+    <html:moz-key keycode="VK_BACK" command="cmd_handleShiftBackspace" modifiers="shift" reserved="false"/>
 #ifndef XP_MACOSX
-    <key id="goBackKb"  keycode="VK_LEFT" command="Browser:Back" modifiers="alt"/>
-    <key id="goForwardKb"  keycode="VK_RIGHT" command="Browser:Forward" modifiers="alt"/>
+    <html:moz-key id="goBackKb"  keycode="VK_LEFT" command="Browser:Back" modifiers="alt"/>
+    <html:moz-key id="goForwardKb"  keycode="VK_RIGHT" command="Browser:Forward" modifiers="alt"/>
 #else
-    <key id="goBackKb" keycode="VK_LEFT" command="Browser:Back" modifiers="accel" />
-    <key id="goForwardKb" keycode="VK_RIGHT" command="Browser:Forward" modifiers="accel" />
+    <html:moz-key id="goBackKb" keycode="VK_LEFT" command="Browser:Back" modifiers="accel" />
+    <html:moz-key id="goForwardKb" keycode="VK_RIGHT" command="Browser:Forward" modifiers="accel" />
 #endif
 #ifdef XP_UNIX
-    <key id="goBackKb2" key="&goBackCmd.commandKey;" command="Browser:Back" modifiers="accel"/>
-    <key id="goForwardKb2" key="&goForwardCmd.commandKey;" command="Browser:Forward" modifiers="accel"/>
+    <html:moz-key id="goBackKb2" key="&goBackCmd.commandKey;" command="Browser:Back" modifiers="accel"/>
+    <html:moz-key id="goForwardKb2" key="&goForwardCmd.commandKey;" command="Browser:Forward" modifiers="accel"/>
 #endif
-    <key id="goHome" keycode="VK_HOME" oncommand="BrowserHome();" modifiers="alt"/>
-    <key keycode="VK_F5" command="Browser:Reload"/>
+    <html:moz-key id="goHome" keycode="VK_HOME" onselect="BrowserHome();" modifiers="alt"/>
+    <html:moz-key keycode="VK_F5" command="Browser:Reload"/>
 #ifndef XP_MACOSX
-    <key id="showAllHistoryKb" key="&showAllHistoryCmd.commandkey;" command="Browser:ShowAllHistory" modifiers="accel,shift"/>
-    <key keycode="VK_F5" command="Browser:ReloadSkipCache" modifiers="accel"/>
-    <key id="key_fullScreen" keycode="VK_F11" command="View:FullScreen"/>
+    <html:moz-key id="showAllHistoryKb" key="&showAllHistoryCmd.commandkey;" command="Browser:ShowAllHistory" modifiers="accel,shift"/>
+    <html:moz-key keycode="VK_F5" command="Browser:ReloadSkipCache" modifiers="accel"/>
+    <html:moz-key id="key_fullScreen" keycode="VK_F11" command="View:FullScreen"/>
 #else
-    <key id="key_fullScreen" key="&fullScreenCmd.macCommandKey;" command="View:FullScreen" modifiers="accel,control"/>
-    <key id="key_fullScreen_old" key="&fullScreenCmd.macCommandKey;" command="View:FullScreen" modifiers="accel,shift"/>
-    <key keycode="VK_F11" command="View:FullScreen"/>
+    <html:moz-key id="key_fullScreen" key="&fullScreenCmd.macCommandKey;" command="View:FullScreen" modifiers="accel,control"/>
+    <html:moz-key id="key_fullScreen_old" key="&fullScreenCmd.macCommandKey;" command="View:FullScreen" modifiers="accel,shift"/>
+    <html:moz-key keycode="VK_F11" command="View:FullScreen"/>
 #endif
 #ifndef XP_WIN
-    <key id="key_toggleReaderMode" key="&toggleReaderMode.key;" command="View:ReaderView" modifiers="accel,alt" disabled="true"/>
+    <html:moz-key id="key_toggleReaderMode" key="&toggleReaderMode.key;" command="View:ReaderView" modifiers="accel,alt" disabled="true"/>
 #else
-    <key id="key_toggleReaderMode" keycode="&toggleReaderMode.win.keycode;" command="View:ReaderView" disabled="true"/>
+    <html:moz-key id="key_toggleReaderMode" keycode="&toggleReaderMode.win.keycode;" command="View:ReaderView" disabled="true"/>
 #endif
-    <key key="&reloadCmd.commandkey;" command="Browser:Reload" modifiers="accel" id="key_reload"/>
-    <key key="&reloadCmd.commandkey;" command="Browser:ReloadSkipCache" modifiers="accel,shift"/>
-    <key id="key_viewSource" key="&pageSourceCmd.commandkey;" command="View:PageSource" modifiers="accel"/>
+    <html:moz-key key="&reloadCmd.commandkey;" command="Browser:Reload" modifiers="accel" id="key_reload"/>
+    <html:moz-key key="&reloadCmd.commandkey;" command="Browser:ReloadSkipCache" modifiers="accel,shift"/>
+    <html:moz-key id="key_viewSource" key="&pageSourceCmd.commandkey;" command="View:PageSource" modifiers="accel"/>
 #ifdef XP_MACOSX
-    <key id="key_viewSourceSafari" key="&pageSourceCmd.SafariCommandKey;" command="View:PageSource" modifiers="accel,alt"/>
+    <html:moz-key id="key_viewSourceSafari" key="&pageSourceCmd.SafariCommandKey;" command="View:PageSource" modifiers="accel,alt"/>
 #endif
 #ifndef XP_WIN
-    <key id="key_viewInfo"   key="&pageInfoCmd.commandkey;"   command="View:PageInfo"   modifiers="accel"/>
+    <html:moz-key id="key_viewInfo"   key="&pageInfoCmd.commandkey;"   command="View:PageInfo"   modifiers="accel"/>
 #endif
-    <key id="key_find" key="&findOnCmd.commandkey;" command="cmd_find" modifiers="accel"/>
-    <key id="key_findAgain" key="&findAgainCmd.commandkey;" command="cmd_findAgain" modifiers="accel"/>
-    <key id="key_findPrevious" key="&findAgainCmd.commandkey;" command="cmd_findPrevious" modifiers="accel,shift"/>
+    <html:moz-key id="key_find" key="&findOnCmd.commandkey;" command="cmd_find" modifiers="accel"/>
+    <html:moz-key id="key_findAgain" key="&findAgainCmd.commandkey;" command="cmd_findAgain" modifiers="accel"/>
+    <html:moz-key id="key_findPrevious" key="&findAgainCmd.commandkey;" command="cmd_findPrevious" modifiers="accel,shift"/>
 #ifdef XP_MACOSX
-    <key id="key_findSelection" key="&findSelectionCmd.commandkey;" command="cmd_findSelection" modifiers="accel"/>
+    <html:moz-key id="key_findSelection" key="&findSelectionCmd.commandkey;" command="cmd_findSelection" modifiers="accel"/>
 #endif
-    <key keycode="&findAgainCmd.commandkey2;" command="cmd_findAgain"/>
-    <key keycode="&findAgainCmd.commandkey2;"  command="cmd_findPrevious" modifiers="shift"/>
+    <html:moz-key keycode="&findAgainCmd.commandkey2;" command="cmd_findAgain"/>
+    <html:moz-key keycode="&findAgainCmd.commandkey2;"  command="cmd_findPrevious" modifiers="shift"/>
 
-    <key id="addBookmarkAsKb" key="&bookmarkThisPageCmd.commandkey;" command="Browser:AddBookmarkAs" modifiers="accel"/>
-    <key id="bookmarkAllTabsKb" key="&bookmarkThisPageCmd.commandkey;" oncommand="PlacesCommandHook.bookmarkPages(PlacesCommandHook.uniqueCurrentPages);" modifiers="accel,shift"/>
+    <html:moz-key id="addBookmarkAsKb" key="&bookmarkThisPageCmd.commandkey;" command="Browser:AddBookmarkAs" modifiers="accel"/>
+    <html:moz-key id="bookmarkAllTabsKb" key="&bookmarkThisPageCmd.commandkey;" onselect="PlacesCommandHook.bookmarkPages(PlacesCommandHook.uniqueCurrentPages);" modifiers="accel,shift"/>
 # Accel+Shift+A-F are reserved on GTK
 #ifndef MOZ_WIDGET_GTK
-    <key id="manBookmarkKb" key="&bookmarksCmd.commandkey;" command="Browser:ShowAllBookmarks" modifiers="accel,shift"/>
+    <html:moz-key id="manBookmarkKb" key="&bookmarksCmd.commandkey;" command="Browser:ShowAllBookmarks" modifiers="accel,shift"/>
 #else
-    <key id="manBookmarkKb" key="&bookmarksGtkCmd.commandkey;" command="Browser:ShowAllBookmarks" modifiers="accel,shift"/>
+    <html:moz-key id="manBookmarkKb" key="&bookmarksGtkCmd.commandkey;" command="Browser:ShowAllBookmarks" modifiers="accel,shift"/>
 #endif
-    <key id="viewBookmarksSidebarKb" key="&bookmarksCmd.commandkey;" oncommand="SidebarUI.toggle('viewBookmarksSidebar');" modifiers="accel"/>
+    <html:moz-key id="viewBookmarksSidebarKb" key="&bookmarksCmd.commandkey;" onselect="SidebarUI.toggle('viewBookmarksSidebar');" modifiers="accel"/>
 #ifdef XP_WIN
 # Cmd+I is conventially mapped to Info on MacOS X, thus it should not be
 # overridden for other purposes there.
-    <key id="viewBookmarksSidebarWinKb" key="&bookmarksWinCmd.commandkey;" oncommand="SidebarUI.toggle('viewBookmarksSidebar');" modifiers="accel"/>
+    <html:moz-key id="viewBookmarksSidebarWinKb" key="&bookmarksWinCmd.commandkey;" onselect="SidebarUI.toggle('viewBookmarksSidebar');" modifiers="accel"/>
 #endif
 
-    <key id="key_stop" keycode="VK_ESCAPE" command="Browser:Stop"/>
+    <html:moz-key id="key_stop" keycode="VK_ESCAPE" command="Browser:Stop"/>
 
 #ifdef XP_MACOSX
-    <key id="key_stop_mac" modifiers="accel" key="&stopCmd.macCommandKey;" command="Browser:Stop"/>
+    <html:moz-key id="key_stop_mac" modifiers="accel" key="&stopCmd.macCommandKey;" command="Browser:Stop"/>
 #endif
 
-    <key id="key_gotoHistory"
+    <html:moz-key id="key_gotoHistory"
          key="&historySidebarCmd.commandKey;"
 #ifdef XP_MACOSX
          modifiers="accel,shift"
 #else
          modifiers="accel"
 #endif
-         oncommand="SidebarUI.toggle('viewHistorySidebar');"/>
+         onselect="SidebarUI.toggle('viewHistorySidebar');"/>
 
-    <key id="key_fullZoomReduce"  key="&fullZoomReduceCmd.commandkey;"   command="cmd_fullZoomReduce"  modifiers="accel"/>
-    <key                          key="&fullZoomReduceCmd.commandkey2;"  command="cmd_fullZoomReduce"  modifiers="accel"/>
-    <key id="key_fullZoomEnlarge" key="&fullZoomEnlargeCmd.commandkey;"  command="cmd_fullZoomEnlarge" modifiers="accel"/>
-    <key                          key="&fullZoomEnlargeCmd.commandkey2;" command="cmd_fullZoomEnlarge" modifiers="accel"/>
-    <key                          key="&fullZoomEnlargeCmd.commandkey3;" command="cmd_fullZoomEnlarge" modifiers="accel"/>
-    <key id="key_fullZoomReset"   key="&fullZoomResetCmd.commandkey;"    command="cmd_fullZoomReset"   modifiers="accel"/>
-    <key                          key="&fullZoomResetCmd.commandkey2;"   command="cmd_fullZoomReset"   modifiers="accel"/>
+    <html:moz-key id="key_fullZoomReduce"  key="&fullZoomReduceCmd.commandkey;"   command="cmd_fullZoomReduce"  modifiers="accel"/>
+    <html:moz-key                          key="&fullZoomReduceCmd.commandkey2;"  command="cmd_fullZoomReduce"  modifiers="accel"/>
+    <html:moz-key id="key_fullZoomEnlarge" key="&fullZoomEnlargeCmd.commandkey;"  command="cmd_fullZoomEnlarge" modifiers="accel"/>
+    <html:moz-key                          key="&fullZoomEnlargeCmd.commandkey2;" command="cmd_fullZoomEnlarge" modifiers="accel"/>
+    <html:moz-key                          key="&fullZoomEnlargeCmd.commandkey3;" command="cmd_fullZoomEnlarge" modifiers="accel"/>
+    <html:moz-key id="key_fullZoomReset"   key="&fullZoomResetCmd.commandkey;"    command="cmd_fullZoomReset"   modifiers="accel"/>
+    <html:moz-key                          key="&fullZoomResetCmd.commandkey2;"   command="cmd_fullZoomReset"   modifiers="accel"/>
 
-    <key id="key_showAllTabs" keycode="VK_TAB" modifiers="control,shift"/>
+    <html:moz-key id="key_showAllTabs" keycode="VK_TAB" modifiers="control,shift"/>
 
-    <key id="key_switchTextDirection" key="&bidiSwitchTextDirectionItem.commandkey;" command="cmd_switchTextDirection" modifiers="accel,shift" />
+    <html:moz-key id="key_switchTextDirection" key="&bidiSwitchTextDirectionItem.commandkey;" command="cmd_switchTextDirection" modifiers="accel,shift" />
 
-    <key id="key_privatebrowsing" command="Tools:PrivateBrowsing" key="&privateBrowsingCmd.commandkey;"
+    <html:moz-key id="key_privatebrowsing" command="Tools:PrivateBrowsing" key="&privateBrowsingCmd.commandkey;"
          modifiers="accel,shift" reserved="true"/>
-    <key id="key_sanitize" command="Tools:Sanitize" keycode="VK_DELETE" modifiers="accel,shift"/>
+    <html:moz-key id="key_sanitize" command="Tools:Sanitize" keycode="VK_DELETE" modifiers="accel,shift"/>
 #ifdef XP_MACOSX
-    <key id="key_sanitize_mac" command="Tools:Sanitize" keycode="VK_BACK" modifiers="accel,shift"/>
+    <html:moz-key id="key_sanitize_mac" command="Tools:Sanitize" keycode="VK_BACK" modifiers="accel,shift"/>
 #endif
-    <key id="key_quitApplication" key="&quitApplicationCmd.key;"
+    <html:moz-key id="key_quitApplication" key="&quitApplicationCmd.key;"
 #ifdef XP_WIN
          modifiers="accel,shift"
 #else
          modifiers="accel"
 #endif
 # On OS X, dark voodoo magic invokes the quit code for this key.
 # So we're not adding the attribute on OSX because of backwards/add-on compat.
 # See bug 1369909 for background on this.
 #ifndef XP_MACOSX
          command="cmd_quitApplication"
 #endif
-         reserved="true"/>
+         reserved="true"
+    />
 
-    <key id="key_undoCloseTab" command="History:UndoCloseTab" key="&tabCmd.commandkey;" modifiers="accel,shift"/>
-    <key id="key_undoCloseWindow" command="History:UndoCloseWindow" key="&newNavigatorCmd.key;" modifiers="accel,shift"/>
+    <html:moz-key id="key_undoCloseTab" command="History:UndoCloseTab" key="&tabCmd.commandkey;" modifiers="accel,shift"/>
+    <html:moz-key id="key_undoCloseWindow" command="History:UndoCloseWindow" key="&newNavigatorCmd.key;" modifiers="accel,shift"/>
 
 #ifdef XP_GNOME
 #define NUM_SELECT_TAB_MODIFIER alt
 #else
 #define NUM_SELECT_TAB_MODIFIER accel
 #endif
 
-#expand    <key id="key_selectTab1" oncommand="gBrowser.selectTabAtIndex(0, event);" key="1" modifiers="__NUM_SELECT_TAB_MODIFIER__"/>
-#expand    <key id="key_selectTab2" oncommand="gBrowser.selectTabAtIndex(1, event);" key="2" modifiers="__NUM_SELECT_TAB_MODIFIER__"/>
-#expand    <key id="key_selectTab3" oncommand="gBrowser.selectTabAtIndex(2, event);" key="3" modifiers="__NUM_SELECT_TAB_MODIFIER__"/>
-#expand    <key id="key_selectTab4" oncommand="gBrowser.selectTabAtIndex(3, event);" key="4" modifiers="__NUM_SELECT_TAB_MODIFIER__"/>
-#expand    <key id="key_selectTab5" oncommand="gBrowser.selectTabAtIndex(4, event);" key="5" modifiers="__NUM_SELECT_TAB_MODIFIER__"/>
-#expand    <key id="key_selectTab6" oncommand="gBrowser.selectTabAtIndex(5, event);" key="6" modifiers="__NUM_SELECT_TAB_MODIFIER__"/>
-#expand    <key id="key_selectTab7" oncommand="gBrowser.selectTabAtIndex(6, event);" key="7" modifiers="__NUM_SELECT_TAB_MODIFIER__"/>
-#expand    <key id="key_selectTab8" oncommand="gBrowser.selectTabAtIndex(7, event);" key="8" modifiers="__NUM_SELECT_TAB_MODIFIER__"/>
-#expand    <key id="key_selectLastTab" oncommand="gBrowser.selectTabAtIndex(-1, event);" key="9" modifiers="__NUM_SELECT_TAB_MODIFIER__"/>
+#expand    <html:moz-key id="key_selectTab1" onselect="gBrowser.selectTabAtIndex(0, event);" key="1" modifiers="__NUM_SELECT_TAB_MODIFIER__"/>
+#expand    <html:moz-key id="key_selectTab2" onselect="gBrowser.selectTabAtIndex(1, event);" key="2" modifiers="__NUM_SELECT_TAB_MODIFIER__"/>
+#expand    <html:moz-key id="key_selectTab3" onselect="gBrowser.selectTabAtIndex(2, event);" key="3" modifiers="__NUM_SELECT_TAB_MODIFIER__"/>
+#expand    <html:moz-key id="key_selectTab4" onselect="gBrowser.selectTabAtIndex(3, event);" key="4" modifiers="__NUM_SELECT_TAB_MODIFIER__"/>
+#expand    <html:moz-key id="key_selectTab5" onselect="gBrowser.selectTabAtIndex(4, event);" key="5" modifiers="__NUM_SELECT_TAB_MODIFIER__"/>
+#expand    <html:moz-key id="key_selectTab6" onselect="gBrowser.selectTabAtIndex(5, event);" key="6" modifiers="__NUM_SELECT_TAB_MODIFIER__"/>
+#expand    <html:moz-key id="key_selectTab7" onselect="gBrowser.selectTabAtIndex(6, event);" key="7" modifiers="__NUM_SELECT_TAB_MODIFIER__"/>
+#expand    <html:moz-key id="key_selectTab8" onselect="gBrowser.selectTabAtIndex(7, event);" key="8" modifiers="__NUM_SELECT_TAB_MODIFIER__"/>
+#expand    <html:moz-key id="key_selectLastTab" onselect="gBrowser.selectTabAtIndex(-1, event);" key="9" modifiers="__NUM_SELECT_TAB_MODIFIER__"/>
 
 #ifdef NIGHTLY_BUILD
-    <key id="key_wrCaptureCmd"
+    <html:moz-key id="key_wrCaptureCmd"
 #ifdef XP_MACOSX
     key="3" modifiers="control,shift"
 #else
     key="#" modifiers="control"
 #endif
     command="wrCaptureCmd"/>
-    <key id="key_windowRecordingCmd"
+    <html:moz-key id="key_windowRecordingCmd"
 #ifdef XP_MACOSX
     key="4" modifiers="control,shift"
 #else
     key="$" modifiers="control"
 #endif
     command="windowRecordingCmd"/>
 #endif
 #ifdef XP_MACOSX
-    <key id="key_minimizeWindow"
+    <html:moz-key id="key_minimizeWindow"
          command="minimizeWindow"
          key="&minimizeWindow.key;"
          modifiers="accel"/>
-    <key id="key_openHelpMac"
-         oncommand="openHelpLink('firefox-osxkey');"
+    <html:moz-key id="key_openHelpMac"
+         onselect="openHelpLink('firefox-osxkey');"
          key="&helpMac.commandkey;"
          modifiers="accel"/>
     <!-- These are used to build the Application menu -->
-    <key id="key_preferencesCmdMac"
+    <html:moz-key id="key_preferencesCmdMac"
          key="&preferencesCmdMac.commandkey;"
          reserved="true"
          modifiers="accel"/>
-    <key id="key_hideThisAppCmdMac"
+    <html:moz-key id="key_hideThisAppCmdMac"
          key="&hideThisAppCmdMac2.commandkey;"
          modifiers="accel"/>
-    <key id="key_hideOtherAppsCmdMac"
+    <html:moz-key id="key_hideOtherAppsCmdMac"
          key="&hideOtherAppsCmdMac.commandkey;"
          modifiers="accel,alt"/>
 #endif
   </keyset>
diff --git a/browser/base/content/hiddenWindowMac.xhtml b/browser/base/content/hiddenWindowMac.xhtml
--- a/browser/base/content/hiddenWindowMac.xhtml
+++ b/browser/base/content/hiddenWindowMac.xhtml
@@ -7,17 +7,18 @@
 
 <?xml-stylesheet href="chrome://browser/skin/webRTC-indicator.css" type="text/css"?>
 
 <!DOCTYPE window [
 #include browser-doctype.inc
 ]>
 
 <window id="main-window"
-        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
+        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
+        xmlns:html="http://www.w3.org/1999/xhtml">
 
 #include macWindow.inc.xul
 
 <!-- Dock menu -->
 <popupset>
   <menupopup id="menu_mac_dockmenu">
     <!-- The command cannot be cmd_newNavigator because we need to activate
          the application. -->
diff --git a/devtools/client/framework/test/browser_keybindings_01.js b/devtools/client/framework/test/browser_keybindings_01.js
--- a/devtools/client/framework/test/browser_keybindings_01.js
+++ b/devtools/client/framework/test/browser_keybindings_01.js
@@ -15,17 +15,17 @@ const {gDevToolsBrowser} = require("devt
 ChromeUtils.defineModuleGetter(this, "AppConstants",
   "resource://gre/modules/AppConstants.jsm");
 const isMac = AppConstants.platform == "macosx";
 
 const allKeys = [];
 function buildDevtoolsKeysetMap(keyset) {
   // Fetches all the keyboard shortcuts which were defined by lazyGetter 'KeyShortcuts' in
   // devtools-startup.js and added to the DOM by 'hookKeyShortcuts'
-  [...keyset.querySelectorAll("key")].forEach(key => {
+  [...keyset.querySelectorAll("moz-key")].forEach(key => {
     if (!key.getAttribute("key")) {
       return;
     }
 
     const modifiers = key.getAttribute("modifiers");
     allKeys.push({
       toolId: key.id.split("_")[1],
       key: key.getAttribute("key"),
diff --git a/devtools/startup/DevToolsStartup.jsm b/devtools/startup/DevToolsStartup.jsm
--- a/devtools/startup/DevToolsStartup.jsm
+++ b/devtools/startup/DevToolsStartup.jsm
@@ -748,17 +748,17 @@ DevToolsStartup.prototype = {
 
   getKeyElementId({ id, toolId }) {
     return "key_" + (id || toolId);
   },
 
   // Create a <xul:key> DOM Element
   createKey(doc, key, oncommand) {
     const { shortcut, modifiers: mod } = key;
-    const k = doc.createXULElement("key");
+    const k = doc.createElement("moz-key");
     k.id = this.getKeyElementId(key);
 
     if (shortcut.startsWith("VK_")) {
       k.setAttribute("keycode", shortcut);
       if (shortcut.match(/^VK_\d$/)) {
         // Add the event keydown attribute to ensure that shortcuts work for combinations
         // such as ctrl shift 1.
         k.setAttribute("event", "keydown");
@@ -766,19 +766,17 @@ DevToolsStartup.prototype = {
     } else {
       k.setAttribute("key", shortcut);
     }
 
     if (mod) {
       k.setAttribute("modifiers", mod);
     }
 
-    // Bug 371900: command event is fired only if "oncommand" attribute is set.
-    k.setAttribute("oncommand", ";");
-    k.addEventListener("command", oncommand);
+    k.addEventListener("select", oncommand);
 
     return k;
   },
 
   initDevTools: function(reason, key = "") {
     // If an entry point is fired and tools are not enabled open the installation page
     if (!Services.prefs.getBoolPref(DEVTOOLS_ENABLED_PREF)) {
       this.openInstallPage(reason);
diff --git a/toolkit/content/widgets/general.js b/toolkit/content/widgets/general.js
--- a/toolkit/content/widgets/general.js
+++ b/toolkit/content/widgets/general.js
@@ -2,16 +2,18 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 // This is loaded into chrome windows with the subscript loader. Wrap in
 // a block to prevent accidentally leaking globals onto `window`.
 {
+const {AppConstants} = ChromeUtils.import("resource://gre/modules/AppConstants.jsm");
+
 class MozDeck extends MozXULElement {
   set selectedIndex(val) {
     if (this.selectedIndex == val) return val;
     this.setAttribute("selectedIndex", val);
     var event = document.createEvent("Events");
     event.initEvent("select", true, true);
     this.dispatchEvent(event);
     return val;
@@ -44,16 +46,190 @@ class MozDropmarker extends MozXULElemen
       image.classList.add("dropmarker-icon");
       this.appendChild(image);
     }
   }
 }
 
 customElements.define("dropmarker", MozDropmarker);
 
+const activeKeys = window.activeKeys = {};
+const activeKeyCodes = window.activeKeyCodes = {};
+const allModifiers = ["Shift", "Alt", /* "Meta", */ "Control", "Accel", "Access"];
+function doCommandFromKey(element, event) {
+  if (element.hasAttribute("disabled")) {
+    return;
+  }
+
+  // XXX: On mac the <menuitem>s in the top menu get wired up with [key]
+  // and seem to fire the command on their own. So we don't want to
+  // do anything in that case?
+  if (AppConstants.platform == "macosx" && element.id && document.querySelector(`menuitem[key=${this.id}]`)) {
+    return;
+  }
+
+  // XXX: Also see eventMatchesKey from utilityOverlay.js
+  let theseModifiers = new Set((element.getAttribute("modifiers") || "").split(","));
+  let modifiersMatched = true;
+
+  for (let mod of allModifiers) {
+    // mod = mod.charAt(0).toUpperCase() + mod.slice(1);
+    let expectedState = theseModifiers.has(mod.toLowerCase());
+    // console.log(element, expectedState, mod, event.getModifierState(mod));
+    if (event.getModifierState(mod) != expectedState) {
+      modifiersMatched = false;
+    }
+  }
+
+  if (!modifiersMatched) {
+    return;
+  }
+
+  let command = element.getAttribute("command");
+  if (command) {
+    if (document.getElementById(command)) {
+      document.getElementById(command).doCommand();
+    } else if (window.goDoCommand) {
+      goDoCommand(command);
+    } else {
+      console.error("Unknown command handler for key", command);
+    }
+  }
+
+  // XXX: If we wanted to wire up [oncommand] attribute we'd need to store
+  // the handler on the html elem somehow (or switch it to xul).
+  // In the meantime, let's rewrite [oncommand] to [onselect].
+  // if (element.getAttribute("oncommand")) {
+  //   eval(element.getAttribute("oncommand"));
+  // }
+  element.dispatchEvent(new UIEvent("select"));
+
+  // XXX: Expose nsContentUtils::ShouldBlockReservedKeys for access from here?
+  // See also permissions.default.shortcut and `enum XBLReservedKey`
+  if (element.hasAttribute("reserved")) {
+    event.preventDefault();
+  }
+}
+
+window.addEventListener("keypress", event => {
+  // console.log("Keypress processed", event.code)
+  if (activeKeys[event.code]) {
+    for (let element of activeKeys[event.code]) {
+      doCommandFromKey(element, event);
+    }
+  }
+  // console.log(event, event.keyCode, activeKeyCodes);
+  if (activeKeyCodes[event.keyCode]) {
+    for (let element of activeKeyCodes[event.keyCode]) {
+      doCommandFromKey(element, event);
+    }
+  }
+});
+
+class MozKey extends HTMLElement {
+  static get observedAttributes() {
+    return ["key", "keycode"];
+  }
+
+  // If we wanted to drop the optimization of keying only relevant
+  // elements on an event (IOW: loop over all connected keys on every
+  // key event), then we could drop the removal / addition logic across
+  // this element.
+  attributeChangedCallback(name, oldValue, newValue) {
+    if (!this.isConnected) {
+      return;
+    }
+    if (name === "key" && oldValue) {
+      let oldKey = this.keyForAttr(oldValue);
+      this.removeFromActiveKeys(oldKey);
+      this.addToActiveKeys();
+    } else if (name === "keycode" && oldValue) {
+      let oldKeyCode = this.keycodeForAttr(oldValue);
+      this.removeFromActiveKeyCodes(oldKeyCode);
+      this.addToActiveKeyCodes();
+    }
+  }
+
+  connectedCallback() {
+    this.addToActiveKeys();
+    this.addToActiveKeyCodes();
+  }
+
+  disconnectedCallback() {
+    this.removeFromActiveKeys();
+    this.removeFromActiveKeyCodes();
+  }
+
+  get key() {
+    if (!this.hasAttribute("key")) {
+      return null;
+    }
+    return this.keyForAttr(this.getAttribute("key"));
+  }
+
+  keyForAttr(attr) {
+    if (!isNaN(parseFloat(attr)) && isFinite(attr)) {
+      return `Digit${attr}`;
+    }
+    return `Key${attr.toUpperCase()}`;
+  }
+
+  get keycode() {
+    if (!this.hasAttribute("keycode")) {
+      return null;
+    }
+
+    let keycode = this.keycodeForAttr(this.getAttribute("keycode"));
+    if (!keycode) {
+      console.error(`Couldn't find keycode for "${this.getAttribute("keycode")}"`);
+    }
+    return keycode;
+  }
+
+  keycodeForAttr(attr) {
+    if (attr == "VK_BACK") {
+      return KeyboardEvent.DOM_VK_BACK_SPACE;
+    }
+    return KeyboardEvent["DOM_" + attr];
+  }
+
+  addToActiveKeys() {
+    let key = this.key;
+    if (key) {
+      if (!activeKeys[key]) {
+        activeKeys[key] = new Set();
+      }
+      activeKeys[key].add(this);
+    }
+  }
+
+  addToActiveKeyCodes() {
+    let keycode = this.keycode;
+    if (keycode) {
+      if (!activeKeyCodes[keycode]) {
+        activeKeyCodes[keycode] = new Set();
+      }
+      activeKeyCodes[keycode].add(this);
+    }
+  }
+
+  removeFromActiveKeys(key = this.key) {
+    if (activeKeys[key]) {
+      activeKeys[key].delete(this);
+    }
+  }
+
+  removeFromActiveKeyCodes(keyCode = this.keyCode) {
+    if (activeKeyCodes[keyCode]) {
+      activeKeyCodes[keyCode].delete(this);
+    }
+  }
+}
+customElements.define("moz-key", MozKey);
+
 class MozCommandSet extends MozXULElement {
   connectedCallback() {
     if (this.getAttribute("commandupdater") === "true") {
       const events = this.getAttribute("events") || "*";
       const targets = this.getAttribute("targets") || "*";
       document.commandDispatcher.addCommandUpdater(this, events, targets);
     }
   }
