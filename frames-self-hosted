# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  f85659662c2ac3e0542978ef481be6e0758da79b
Bug 1356643 - Ignore self-hosted sources in Frame component;r=Honza

diff --git a/devtools/client/shared/components/frame.js b/devtools/client/shared/components/frame.js
--- a/devtools/client/shared/components/frame.js
+++ b/devtools/client/shared/components/frame.js
@@ -115,32 +115,32 @@ module.exports = createClass({
     let {
       onClick,
       showFunctionName,
       showAnonymousFunctionName,
       showHost,
       showEmptyPathAsHost,
       showFullSourceUrl
     } = this.props;
-
     if (this.state && this.state.isSourceMapped) {
       frame = this.state.frame;
       isSourceMapped = this.state.isSourceMapped;
     } else {
       frame = this.props.frame;
     }
 
     let source = frame.source ? String(frame.source) : "";
     let line = frame.line != void 0 ? Number(frame.line) : null;
     let column = frame.column != void 0 ? Number(frame.column) : null;
 
     const { short, long, host } = getSourceNames(source);
+
     // Reparse the URL to determine if we should link this; `getSourceNames`
     // has already cached this indirectly. We don't want to attempt to
-    // link to "self-hosted" and "(unknown)". However, we do want to link
+    // link to (unknown)". However, we do want to link
     // to Scratchpad URIs.
     // Source mapped sources might not necessary linkable, but they
     // are still valid in the debugger.
     const isLinkable = !!(isScratchpadScheme(source) || parseURL(source))
       || isSourceMapped;
     const elements = [];
     const sourceElements = [];
     let sourceEl;
@@ -213,17 +213,17 @@ module.exports = createClass({
     // ordering. See CSS styles for frame-link-source-[inner] and bug 1290056.
     let sourceInnerEl = dom.span({
       key: "source-inner",
       className: "frame-link-source-inner",
       title: isLinkable ?
         l10n.getFormatStr("frame.viewsourceindebugger", tooltip) : tooltip,
     }, sourceElements);
 
-    // If source is not a URL (self-hosted, eval, etc.), don't make
+    // If source is not a URL (eval, etc.), don't make
     // it an anchor link, as we can't link to it.
     if (isLinkable) {
       sourceEl = dom.a({
         onClick: e => {
           e.preventDefault();
           onClick(this.getSource(frame));
         },
         href: source,
@@ -241,11 +241,16 @@ module.exports = createClass({
     if (showHost && host) {
       elements.push(" ");
       elements.push(dom.span({
         key: "host",
         className: "frame-link-host",
       }, host));
     }
 
+    // Self hosted frames shouldn't be rendered.
+    if (source === "self-hosted") {
+      return null;
+    }
+
     return dom.span(attributes, ...elements);
   }
 });
diff --git a/devtools/client/shared/components/test/mochitest/test_frame_01.html b/devtools/client/shared/components/test/mochitest/test_frame_01.html
--- a/devtools/client/shared/components/test/mochitest/test_frame_01.html
+++ b/devtools/client/shared/components/test/mochitest/test_frame_01.html
@@ -61,42 +61,31 @@ window.onload = Task.async(function* () 
       }
     }, {
       file: "mahscripts.js",
       line: 55,
       shouldLink: true,
       tooltip: "View source in Debugger → http://myfile.com/mahscripts.js:55",
     });
 
-    // Check when there's no parseable URL source;
-    // should not link but should render line/columns
+    // Check when there's a self hosted source;
+    // should not return anything
     yield checkFrameComponent({
       frame: {
         source: "self-hosted",
         line: 1,
       }
-    }, {
-      file: "self-hosted",
-      line: "1",
-      shouldLink: false,
-      tooltip: "self-hosted:1",
-    });
+    }, null);
     yield checkFrameComponent({
       frame: {
         source: "self-hosted",
         line: 1,
         column: 10,
       }
-    }, {
-      file: "self-hosted",
-      line: "1",
-      column: "10",
-      shouldLink: false,
-      tooltip: "self-hosted:1:10",
-    });
+    }, null);
 
     // Check when there's no source;
     // should not link but should render line/columns
     yield checkFrameComponent({
       frame: {
         line: 1,
       }
     }, {
@@ -287,17 +276,22 @@ window.onload = Task.async(function* () 
       tooltip: "View source in Debugger → http://www.cnn.com/:1",
     });
 
     function* checkFrameComponent(input, expected) {
       let props = Object.assign({ onClick: () => {} }, input);
       let frame = ReactDOM.render(Frame(props), window.document.body);
       let el = ReactDOM.findDOMNode(frame);
       let { source } = input.frame;
-      checkFrameString(Object.assign({ el, source }, expected));
+
+      if (!expected) {
+        is(el, null, "No element is rendered");
+      } else {
+        checkFrameString(Object.assign({ el, source }, expected));
+      }
     }
 
   } catch (e) {
     ok(false, "Got an error: " + DevToolsUtils.safeErrorString(e));
   } finally {
     SimpleTest.finish();
   }
 });
