# HG changeset patch
# User Gabriel Luong <gabriel.luong@gmail.com>
# Parent  115fab26f6d6cc53d618e6d2242ef27d865d26e2
Bug 1120616 - Part 2: Add unit tests for filter styles in rule view r=bgrins

diff --git a/browser/devtools/styleinspector/test/browser.ini b/browser/devtools/styleinspector/test/browser.ini
--- a/browser/devtools/styleinspector/test/browser.ini
+++ b/browser/devtools/styleinspector/test/browser.ini
@@ -94,16 +94,25 @@
 [browser_ruleview_original-source-link.js]
 [browser_ruleview_override.js]
 [browser_ruleview_pseudo-element_01.js]
 [browser_ruleview_pseudo-element_02.js]
 skip-if = e10s # Bug 1090340
 [browser_ruleview_refresh-on-attribute-change_01.js]
 [browser_ruleview_refresh-on-attribute-change_02.js]
 [browser_ruleview_refresh-on-style-change.js]
+[browser_ruleview_search-filter_01.js]
+[browser_ruleview_search-filter_02.js]
+[browser_ruleview_search-filter_03.js]
+[browser_ruleview_search-filter_04.js]
+[browser_ruleview_search-filter_05.js]
+[browser_ruleview_search-filter_06.js]
+[browser_ruleview_search-filter_07.js]
+[browser_ruleview_search-filter_08.js]
+[browser_ruleview_search-filter_09.js]
 [browser_ruleview_select-and-copy-styles.js]
 [browser_ruleview_selector-highlighter_01.js]
 [browser_ruleview_selector-highlighter_02.js]
 [browser_ruleview_selector-highlighter_03.js]
 [browser_ruleview_style-editor-link.js]
 skip-if = e10s # bug 1040670 Cannot open inline styles in viewSourceUtils
 [browser_ruleview_urls-clickable.js]
 [browser_ruleview_user-agent-styles.js]
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_search-filter_01.js b/browser/devtools/styleinspector/test/browser_ruleview_search-filter_01.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/styleinspector/test/browser_ruleview_search-filter_01.js
@@ -0,0 +1,56 @@
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+ http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Tests that the rule view search filter works properly for property values.
+
+let PAGE_CONTENT = [
+  '<style type="text/css">',
+  '  #testid {',
+  '    background-color: #00F;',
+  '  }',
+  '  .testclass {',
+  '    width: 100%;',
+  '  }',
+  '</style>',
+  '<div id="testid" class="testclass">Styled Node</div>'
+].join("\n");
+
+add_task(function*() {
+  yield addTab("data:text/html;charset=utf-8,test rule view search filter");
+
+  info("Creating the test document");
+  content.document.body.innerHTML = PAGE_CONTENT;
+
+  info("Opening the rule-view");
+  let {toolbox, inspector, view} = yield openRuleView();
+
+  info("Selecting the test node");
+  yield selectNode("#testid", inspector);
+
+  yield testAddTextInFilter(inspector, view);
+});
+
+function* testAddTextInFilter(inspector, ruleView) {
+  info("setting filter text to \"00F\"");
+
+  let searchField = ruleView.searchField;
+  let onRuleViewFiltered = inspector.once("ruleview-filtered");;
+  searchField.focus();
+
+  let win = ruleView.doc.defaultView;
+  EventUtils.synthesizeKey("0", {}, win);
+  EventUtils.synthesizeKey("0", {}, win);
+  EventUtils.synthesizeKey("F", {}, win);
+
+  yield onRuleViewFiltered;
+
+  info("check that the correct rules are visible");
+  is(ruleView.element.children.length, 2, "Should have 2 rules.");
+  is(ruleView.element.children[0]._ruleEditor.rule.selectorText, "element", "First rule is inline element.");
+  is(ruleView.element.children[1]._ruleEditor.rule.selectorText, "#testid", "Second rule is #testid.");
+  ok(ruleView.element.children[1]._ruleEditor.rule.textProps[0].editor.element.classList.contains("ruleview-highlight"),
+    "background-color text property is correctly highlighted.");
+}
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_search-filter_02.js b/browser/devtools/styleinspector/test/browser_ruleview_search-filter_02.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/styleinspector/test/browser_ruleview_search-filter_02.js
@@ -0,0 +1,59 @@
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+ http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Tests that the rule view search filter works properly for property names.
+
+let PAGE_CONTENT = [
+  '<style type="text/css">',
+  '  #testid {',
+  '    font-family: arial;',
+  '    background-color: #00F;',
+  '  }',
+  '  .testclass {',
+  '    width: 100%;',
+  '  }',
+  '</style>',
+  '<div id="testid" class="testclass">Styled Node</div>'
+].join("\n");
+
+add_task(function*() {
+  yield addTab("data:text/html;charset=utf-8,test rule view search filter");
+
+  info("Creating the test document");
+  content.document.body.innerHTML = PAGE_CONTENT;
+
+  info("Opening the rule-view");
+  let {toolbox, inspector, view} = yield openRuleView();
+
+  info("Selecting the test node");
+  yield selectNode("#testid", inspector);
+
+  yield testAddTextInFilter(inspector, view);
+});
+
+function* testAddTextInFilter(inspector, ruleView) {
+  info("setting filter text to \"color\"");
+
+  let searchField = ruleView.searchField;
+  let onRuleViewFiltered = inspector.once("ruleview-filtered");;
+  searchField.focus();
+
+  let win = ruleView.doc.defaultView;
+  EventUtils.synthesizeKey("c", {}, win);
+  EventUtils.synthesizeKey("o", {}, win);
+  EventUtils.synthesizeKey("l", {}, win);
+  EventUtils.synthesizeKey("o", {}, win);
+  EventUtils.synthesizeKey("r", {}, win);
+
+  yield onRuleViewFiltered;
+
+  info("check that the correct rules are visible");
+  is(ruleView.element.children.length, 2, "Should have 2 rules.");
+  is(ruleView.element.children[0]._ruleEditor.rule.selectorText, "element", "First rule is inline element.");
+  is(ruleView.element.children[1]._ruleEditor.rule.selectorText, "#testid", "Second rule is #testid.");
+  ok(ruleView.element.children[1]._ruleEditor.rule.textProps[1].editor.element.classList.contains("ruleview-highlight"),
+    "background-color text property is correctly highlighted.");
+}
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_search-filter_03.js b/browser/devtools/styleinspector/test/browser_ruleview_search-filter_03.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/styleinspector/test/browser_ruleview_search-filter_03.js
@@ -0,0 +1,58 @@
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+ http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Tests that the rule view search filter works properly for rule selectors.
+
+let PAGE_CONTENT = [
+  '<style type="text/css">',
+  '  #testid {',
+  '    background-color: #00F;',
+  '  }',
+  '  .testclass {',
+  '    width: 100%;',
+  '  }',
+  '</style>',
+  '<div id="testid" class="testclass">Styled Node</div>'
+].join("\n");
+
+add_task(function*() {
+  yield addTab("data:text/html;charset=utf-8,test rule view search filter");
+
+  info("Creating the test document");
+  content.document.body.innerHTML = PAGE_CONTENT;
+
+  info("Opening the rule-view");
+  let {toolbox, inspector, view} = yield openRuleView();
+
+  info("Selecting the test node");
+  yield selectNode("#testid", inspector);
+
+  yield testAddTextInFilter(inspector, view);
+});
+
+function* testAddTextInFilter(inspector, ruleView) {
+  info("setting filter text to \"#test\"");
+
+  let searchField = ruleView.searchField;
+  let onRuleViewFilter = inspector.once("ruleview-filtered");;
+  searchField.focus();
+
+  let win = ruleView.doc.defaultView;
+  EventUtils.synthesizeKey("#", {}, win);
+  EventUtils.synthesizeKey("t", {}, win);
+  EventUtils.synthesizeKey("e", {}, win);
+  EventUtils.synthesizeKey("s", {}, win);
+  EventUtils.synthesizeKey("t", {}, win);
+
+  yield onRuleViewFilter;
+
+  info("check that the correct rules are visible");
+  is(ruleView.element.children.length, 2, "Should have 2 rules.");
+  is(ruleView.element.children[0]._ruleEditor.rule.selectorText, "element", "First rule is inline element.");
+  is(ruleView.element.children[1]._ruleEditor.rule.selectorText, "#testid", "Second rule is #testid.");
+  ok(ruleView.element.children[1]._ruleEditor.selectorText.children[0].classList.contains("ruleview-highlight"),
+    "#testid selector is highlighted.")
+}
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_search-filter_04.js b/browser/devtools/styleinspector/test/browser_ruleview_search-filter_04.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/styleinspector/test/browser_ruleview_search-filter_04.js
@@ -0,0 +1,42 @@
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+ http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Tests that the rule view search filter works properly for keyframe rule selectors.
+
+const TEST_URI = TEST_URL_ROOT + "doc_keyframeanimation.html";
+
+add_task(function*() {
+  yield addTab(TEST_URI);
+
+  info("Opening the rule-view");
+  let {toolbox, inspector, view} = yield openRuleView();
+
+  info("Selecting the test node");
+  yield selectNode("#boxy", inspector);
+
+  yield testAddTextInFilter(inspector, view);
+});
+
+function* testAddTextInFilter(inspector, ruleView) {
+  info("setting filter text to \"20%\"");
+
+  let searchField = ruleView.searchField;
+  let onRuleViewFilter = inspector.once("ruleview-filtered");;
+  searchField.focus();
+
+  let win = ruleView.doc.defaultView;
+  EventUtils.synthesizeKey("2", {}, win);
+  EventUtils.synthesizeKey("0", {}, win);
+  EventUtils.synthesizeKey("%", {}, win);
+
+  yield onRuleViewFilter;
+
+  info("check that the correct rules are visible");
+  is(ruleView.element.children[0]._ruleEditor.rule.selectorText, "element", "First rule is inline element.");
+  is(ruleView.element.children[2].children[0]._ruleEditor.rule.domRule.keyText, "20%", "Second rule is 20%.");
+  ok(ruleView.element.children[2].children[0]._ruleEditor.selectorText.classList.contains("ruleview-highlight"),
+    "20% selector is highlighted.")
+}
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_search-filter_05.js b/browser/devtools/styleinspector/test/browser_ruleview_search-filter_05.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/styleinspector/test/browser_ruleview_search-filter_05.js
@@ -0,0 +1,57 @@
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+ http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Tests that the rule view search filter works properly for multiple rule selectors.
+
+let PAGE_CONTENT = [
+  '<style type="text/css">',
+  '  html, body, div {',
+  '    background-color: #00F;',
+  '  }',
+  '  .testclass {',
+  '    width: 100%;',
+  '  }',
+  '</style>',
+  '<div id="testid" class="testclass">Styled Node</div>'
+].join("\n");
+
+add_task(function*() {
+  yield addTab("data:text/html;charset=utf-8,test rule view search filter");
+
+  info("Creating the test document");
+  content.document.body.innerHTML = PAGE_CONTENT;
+
+  info("Opening the rule-view");
+  let {toolbox, inspector, view} = yield openRuleView();
+
+  info("Selecting the test node");
+  yield selectNode("#testid", inspector);
+
+  yield testAddTextInFilter(inspector, view);
+});
+
+function* testAddTextInFilter(inspector, ruleView) {
+  info("setting filter text to \"body\"");
+
+  let searchField = ruleView.searchField;
+  let onRuleViewFilter = inspector.once("ruleview-filtered");;
+  searchField.focus();
+
+  let win = ruleView.doc.defaultView;
+  EventUtils.synthesizeKey("b", {}, win);
+  EventUtils.synthesizeKey("o", {}, win);
+  EventUtils.synthesizeKey("d", {}, win);
+  EventUtils.synthesizeKey("y", {}, win);
+
+  yield onRuleViewFilter;
+
+  info("check that the correct rules are visible");
+  is(ruleView.element.children.length, 2, "Should have 2 rules.");
+  is(ruleView.element.children[0]._ruleEditor.rule.selectorText, "element", "First rule is inline element.");
+  is(ruleView.element.children[1]._ruleEditor.rule.selectorText, "html, body, div", "Second rule is html, body, div.");
+  ok(ruleView.element.children[1]._ruleEditor.selectorText.children[2].classList.contains("ruleview-highlight"),
+    "body selector is highlighted.")
+}
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_search-filter_06.js b/browser/devtools/styleinspector/test/browser_ruleview_search-filter_06.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/styleinspector/test/browser_ruleview_search-filter_06.js
@@ -0,0 +1,74 @@
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+ http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Tests that the rule view search filter works properly for property line input.
+
+let PAGE_CONTENT = [
+  '<style type="text/css">',
+  '  #testid {',
+  '    background-color: #FFF;',
+  '  }',
+  '  .testclass {',
+  '    background-color: #00F;',
+  '  }',
+  '</style>',
+  '<div id="testid" class="testclass">Styled Node</div>'
+].join("\n");
+
+add_task(function*() {
+  yield addTab("data:text/html;charset=utf-8,test rule view search filter");
+
+  info("Creating the test document");
+  content.document.body.innerHTML = PAGE_CONTENT;
+
+  info("Opening the rule-view");
+  let {toolbox, inspector, view} = yield openRuleView();
+
+  info("Selecting the test node");
+  yield selectNode("#testid", inspector);
+
+  yield testAddTextInFilter(inspector, view);
+});
+
+function* testAddTextInFilter(inspector, ruleView) {
+  info("setting filter text to \"background-color:#00F\"");
+
+  let searchField = ruleView.searchField;
+  let onRuleViewFiltered = inspector.once("ruleview-filtered");;
+  searchField.focus();
+
+  let win = ruleView.doc.defaultView;
+  EventUtils.synthesizeKey("b", {}, win);
+  EventUtils.synthesizeKey("a", {}, win);
+  EventUtils.synthesizeKey("c", {}, win);
+  EventUtils.synthesizeKey("k", {}, win);
+  EventUtils.synthesizeKey("g", {}, win);
+  EventUtils.synthesizeKey("r", {}, win);
+  EventUtils.synthesizeKey("o", {}, win);
+  EventUtils.synthesizeKey("u", {}, win);
+  EventUtils.synthesizeKey("n", {}, win);
+  EventUtils.synthesizeKey("d", {}, win);
+  EventUtils.synthesizeKey("-", {}, win);
+  EventUtils.synthesizeKey("c", {}, win);
+  EventUtils.synthesizeKey("o", {}, win);
+  EventUtils.synthesizeKey("l", {}, win);
+  EventUtils.synthesizeKey("o", {}, win);
+  EventUtils.synthesizeKey("r", {}, win);
+  EventUtils.synthesizeKey(":", {}, win);
+  EventUtils.synthesizeKey("#", {}, win);
+  EventUtils.synthesizeKey("0", {}, win);
+  EventUtils.synthesizeKey("0", {}, win);
+  EventUtils.synthesizeKey("F", {}, win);
+
+  yield onRuleViewFiltered;
+
+  info("check that the correct rules are visible");
+  is(ruleView.element.children.length, 2, "Should have 2 rules.");
+  is(ruleView.element.children[0]._ruleEditor.rule.selectorText, "element", "First rule is inline element.");
+  is(ruleView.element.children[1]._ruleEditor.rule.selectorText, ".testclass", "Second rule is .testclass.");
+  ok(ruleView.element.children[1]._ruleEditor.rule.textProps[0].editor.element.classList.contains("ruleview-highlight"),
+    "background-color text property is correctly highlighted.");
+}
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_search-filter_07.js b/browser/devtools/styleinspector/test/browser_ruleview_search-filter_07.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/styleinspector/test/browser_ruleview_search-filter_07.js
@@ -0,0 +1,57 @@
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+ http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Tests that the rule view search filter works properly for parsed property value.
+
+let PAGE_CONTENT = [
+  '<style type="text/css">',
+  '  #testid {',
+  '    background-color: #00F;',
+  '  }',
+  '  .testclass {',
+  '    width: 100%;',
+  '  }',
+  '</style>',
+  '<div id="testid" class="testclass">Styled Node</div>'
+].join("\n");
+
+add_task(function*() {
+  yield addTab("data:text/html;charset=utf-8,test rule view search filter");
+
+  info("Creating the test document");
+  content.document.body.innerHTML = PAGE_CONTENT;
+
+  info("Opening the rule-view");
+  let {toolbox, inspector, view} = yield openRuleView();
+
+  info("Selecting the test node");
+  yield selectNode("#testid", inspector);
+
+  yield testAddTextInFilter(inspector, view);
+});
+
+function* testAddTextInFilter(inspector, ruleView) {
+  info("setting filter text to \":00F\"");
+
+  let searchField = ruleView.searchField;
+  let onRuleViewFiltered = inspector.once("ruleview-filtered");;
+  searchField.focus();
+
+  let win = ruleView.doc.defaultView;
+  EventUtils.synthesizeKey(":", {}, win);
+  EventUtils.synthesizeKey("0", {}, win);
+  EventUtils.synthesizeKey("0", {}, win);
+  EventUtils.synthesizeKey("F", {}, win);
+
+  yield onRuleViewFiltered;
+
+  info("check that the correct rules are visible");
+  is(ruleView.element.children.length, 2, "Should have 2 rules.");
+  is(ruleView.element.children[0]._ruleEditor.rule.selectorText, "element", "First rule is inline element.");
+  is(ruleView.element.children[1]._ruleEditor.rule.selectorText, "#testid", "Second rule is #testid.");
+  ok(ruleView.element.children[1]._ruleEditor.rule.textProps[0].editor.element.classList.contains("ruleview-highlight"),
+    "background-color text property is correctly highlighted.");
+}
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_search-filter_08.js b/browser/devtools/styleinspector/test/browser_ruleview_search-filter_08.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/styleinspector/test/browser_ruleview_search-filter_08.js
@@ -0,0 +1,64 @@
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+ http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Tests that the rule view search filter works properly for parsed property name.
+
+let PAGE_CONTENT = [
+  '<style type="text/css">',
+  '  #testid {',
+  '    background-color: #00F;',
+  '  }',
+  '  .testclass {',
+  '    width: 100%;',
+  '  }',
+  '</style>',
+  '<div id="testid" class="testclass">Styled Node</div>'
+].join("\n");
+
+add_task(function*() {
+  yield addTab("data:text/html;charset=utf-8,test rule view search filter");
+
+  info("Creating the test document");
+  content.document.body.innerHTML = PAGE_CONTENT;
+
+  info("Opening the rule-view");
+  let {toolbox, inspector, view} = yield openRuleView();
+
+  info("Selecting the test node");
+  yield selectNode("#testid", inspector);
+
+  yield testAddTextInFilter(inspector, view);
+});
+
+function* testAddTextInFilter(inspector, ruleView) {
+  info("setting filter text to \"background:\"");
+
+  let searchField = ruleView.searchField;
+  let onRuleViewFiltered = inspector.once("ruleview-filtered");;
+  searchField.focus();
+
+  let win = ruleView.doc.defaultView;
+  EventUtils.synthesizeKey("b", {}, win);
+  EventUtils.synthesizeKey("a", {}, win);
+  EventUtils.synthesizeKey("c", {}, win);
+  EventUtils.synthesizeKey("k", {}, win);
+  EventUtils.synthesizeKey("g", {}, win);
+  EventUtils.synthesizeKey("r", {}, win);
+  EventUtils.synthesizeKey("o", {}, win);
+  EventUtils.synthesizeKey("u", {}, win);
+  EventUtils.synthesizeKey("n", {}, win);
+  EventUtils.synthesizeKey("d", {}, win);
+  EventUtils.synthesizeKey(":", {}, win);
+
+  yield onRuleViewFiltered;
+
+  info("check that the correct rules are visible");
+  is(ruleView.element.children.length, 2, "Should have 2 rules.");
+  is(ruleView.element.children[0]._ruleEditor.rule.selectorText, "element", "First rule is inline element.");
+  is(ruleView.element.children[1]._ruleEditor.rule.selectorText, "#testid", "Second rule is #testid.");
+  ok(ruleView.element.children[1]._ruleEditor.rule.textProps[0].editor.element.classList.contains("ruleview-highlight"),
+    "background-color text property is correctly highlighted.");
+}
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_search-filter_09.js b/browser/devtools/styleinspector/test/browser_ruleview_search-filter_09.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/styleinspector/test/browser_ruleview_search-filter_09.js
@@ -0,0 +1,54 @@
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+ http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Tests that the rule view search filter works properly for inline styles.
+
+let PAGE_CONTENT = [
+  '<style type="text/css">',
+  '  #testid {',
+  '    width: 100%;',
+  '  }',
+  '</style>',
+  '<div id="testid" style="background-color:aliceblue">Styled Node</div>'
+].join("\n");
+
+add_task(function*() {
+  yield addTab("data:text/html;charset=utf-8,test rule view search filter");
+
+  info("Creating the test document");
+  content.document.body.innerHTML = PAGE_CONTENT;
+
+  info("Opening the rule-view");
+  let {toolbox, inspector, view} = yield openRuleView();
+
+  info("Selecting the test node");
+  yield selectNode("#testid", inspector);
+
+  yield testAddTextInFilter(inspector, view);
+});
+
+function* testAddTextInFilter(inspector, ruleView) {
+  info("setting filter text to \"color\"");
+
+  let searchField = ruleView.searchField;
+  let onRuleViewFiltered = inspector.once("ruleview-filtered");;
+  searchField.focus();
+
+  let win = ruleView.doc.defaultView;
+  EventUtils.synthesizeKey("c", {}, win);
+  EventUtils.synthesizeKey("o", {}, win);
+  EventUtils.synthesizeKey("l", {}, win);
+  EventUtils.synthesizeKey("o", {}, win);
+  EventUtils.synthesizeKey("r", {}, win);
+
+  yield onRuleViewFiltered;
+
+  info("check that the correct rules are visible");
+  is(ruleView.element.children.length, 1, "Should have 1 rule.");
+  is(ruleView.element.children[0]._ruleEditor.rule.selectorText, "element", "First rule is inline element.");
+  ok(ruleView.element.children[0]._ruleEditor.rule.textProps[0].editor.element.classList.contains("ruleview-highlight"),
+    "background-color text property is correctly highlighted.");
+}
