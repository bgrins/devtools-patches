# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  7c5c14b20589263dd2dc49471f6ab9f1a4c16295
Bug 892935 - Update fronts and singleTextChild;r=pbrosset

diff --git a/toolkit/devtools/server/actors/inspector.js b/toolkit/devtools/server/actors/inspector.js
--- a/toolkit/devtools/server/actors/inspector.js
+++ b/toolkit/devtools/server/actors/inspector.js
@@ -743,32 +743,44 @@ let NodeFront = protocol.FrontClass(Node
       this.actorID = form;
       return;
     }
     // Shallow copy of the form.  We could just store a reference, but
     // eventually we'll want to update some of the data.
     this._form = object.merge(form);
     this._form.attrs = this._form.attrs ? this._form.attrs.slice() : [];
 
+    // XXX: The ctx is a WalkerFront, but it's not passed into initialize.
+    // Not sure if that sets up a situation where it's not set when calling
+    // `set singleTextChild()` (doubt it, but need to investigate).
+    this._ctx = ctx;
+
     if (form.parent) {
       // Get the owner actor for this actor (the walker), and find the
       // parent node of this actor from it, creating a standin node if
       // necessary.
       let parentNodeFront = ctx.marshallPool().ensureParentFront(form.parent);
       this.reparent(parentNodeFront);
     }
 
-    if (form.singleTextChild) {
-      this.singleTextChild =
-        types.getType("domnode").read(form.singleTextChild, ctx);
+    this.singleTextChild = form.singleTextChild;
+  },
+
+  set singleTextChild(value) {
+    if (value) {
+      this._singleTextChild = types.getType("domnode").read(value, this._ctx);
     } else {
-      this.singleTextChild = undefined;
+      this._singleTextChild = undefined;
     }
   },
 
+  get singleTextChild() {
+    return this._singleTextChild;
+  },
+
   /**
    * Returns the parent NodeFront for this NodeFront.
    */
   parentNode: function() {
     return this._parent;
   },
 
   /**
@@ -3241,22 +3253,17 @@ var WalkerFront = exports.WalkerFront = 
             addedFront.reparent(targetFront)
 
             // The actor is reconnected to the ownership tree, unorphan
             // it.
             this._orphaned.delete(addedFront);
             addedFronts.push(addedFront);
           }
 
-          if (change.singleTextChild) {
-            targetFront.singleTextChild =
-              types.getType("domnode").read(change.singleTextChild, this);
-          } else {
-            targetFront.singleTextChild = undefined;
-          }
+          targetFront.singleTextChild = change.singleTextChild;
 
           // Before passing to users, replace the added and removed actor
           // ids with front in the mutation record.
           emittedMutation.added = addedFronts;
           emittedMutation.removed = removedFronts;
 
           // If this is coming from a DOM mutation, the actor's numChildren
           // was passed in. Otherwise, it is simulated from a frame load or
