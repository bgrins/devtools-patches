# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  8ae5bb51b14199227e03a37b0bdd3b35f1f4d01e
Bug 1532651 - WIP - remove checkbox-icon

diff --git a/browser/components/newtab/lib/AboutPreferences.jsm b/browser/components/newtab/lib/AboutPreferences.jsm
--- a/browser/components/newtab/lib/AboutPreferences.jsm
+++ b/browser/components/newtab/lib/AboutPreferences.jsm
@@ -52,16 +52,17 @@ const PREFS_AFTER_SECTIONS = [
       descString: "prefs_snippets_description",
     },
     icon: "info",
   },
 ];
 
 // This CSS is added to the whole about:preferences page
 const CUSTOM_CSS = `
+/* XXX: Update this based on JS below */
 #homeContentsGroup checkbox[src] .checkbox-icon {
   margin-inline-end: 8px;
   margin-inline-start: 4px;
   width: 16px;
 }
 #homeContentsGroup [data-subcategory] {
   margin-top: 14px;
 }
@@ -210,16 +211,18 @@ this.AboutPreferences = class AboutPrefe
         `resource://activity-stream/data/content/assets/glyph-${icon}-16.svg`;
 
       // Add the main preference for turning on/off a section
       const sectionVbox = createAppend("vbox", contentsGroup);
       sectionVbox.setAttribute("data-subcategory", id);
       const checkbox = createAppend("checkbox", sectionVbox);
       checkbox.classList.add("section-checkbox");
       checkbox.setAttribute("label", formatString(titleString));
+
+      /* XXX: inject an image directly here or use background on the checkbox-icon instead */
       checkbox.setAttribute("src", iconUrl);
       linkPref(checkbox, name, "bool");
 
       // Specially add a link for stories
       if (id === "topstories") {
         const sponsoredHbox = createAppend("hbox", sectionVbox);
         sponsoredHbox.setAttribute("align", "center");
         sponsoredHbox.appendChild(checkbox);
diff --git a/browser/themes/shared/incontentprefs/privacy.css b/browser/themes/shared/incontentprefs/privacy.css
--- a/browser/themes/shared/incontentprefs/privacy.css
+++ b/browser/themes/shared/incontentprefs/privacy.css
@@ -7,52 +7,50 @@
 .content-blocking-icon,
 .permission-icon,
 .content-blocking-checkbox {
   width: 20px;
   height: 20px;
   vertical-align: middle;
 }
 
-.content-blocking-checkbox .checkbox-icon {
-  margin-inline-end: 8px;
-  margin-inline-start: 4px;
-  width: 16px;
+.content-blocking-checkbox .checkbox-label {
+  padding-inline-start: 20px;
 }
 
-#contentBlockingTrackingProtectionCheckbox > .checkbox-label-box {
-  list-style-image: url("chrome://browser/skin/controlcenter/trackers.svg");
+#contentBlockingTrackingProtectionCheckbox > .checkbox-label {
+  background: no-repeat 0px center url("chrome://browser/skin/controlcenter/trackers.svg");
 }
 
-#contentBlockingTrackingProtectionCheckbox[checked] > .checkbox-label-box {
-  list-style-image: url("chrome://browser/skin/controlcenter/trackers-disabled.svg");
+#contentBlockingTrackingProtectionCheckbox[checked] > .checkbox-label {
+  background: no-repeat 0px center url("chrome://browser/skin/controlcenter/trackers-disabled.svg");
 }
 
-#contentBlockingBlockCookiesCheckbox > .checkbox-label-box {
-  list-style-image: url("chrome://browser/skin/controlcenter/3rdpartycookies.svg");
+#contentBlockingBlockCookiesCheckbox > .checkbox-label {
+  background: no-repeat 0px center url("chrome://browser/skin/controlcenter/3rdpartycookies.svg");
 }
 
-#contentBlockingBlockCookiesCheckbox[checked] > .checkbox-label-box {
-  list-style-image: url("chrome://browser/skin/controlcenter/3rdpartycookies-disabled.svg");
+#contentBlockingBlockCookiesCheckbox[checked] > .checkbox-label {
+  background: no-repeat 0px center url("chrome://browser/skin/controlcenter/3rdpartycookies-disabled.svg");
 }
 
-#contentBlockingCryptominersCheckbox > .checkbox-label-box {
-  list-style-image: url("chrome://browser/skin/controlcenter/cryptominers.svg");
+#contentBlockingCryptominersCheckbox > .checkbox-label {
+  background: no-repeat 0px center url("chrome://browser/skin/controlcenter/cryptominers.svg");
 }
 
-#contentBlockingCryptominersCheckbox[checked] > .checkbox-label-box {
-  list-style-image: url("chrome://browser/skin/controlcenter/cryptominers-disabled.svg");
+#contentBlockingCryptominersCheckbox[checked] > .checkbox-label {
+  background: no-repeat 0px center url("chrome://browser/skin/controlcenter/cryptominers-disabled.svg");
 }
 
-#contentBlockingFingerprintersCheckbox > .checkbox-label-box {
-  list-style-image: url("chrome://browser/skin/controlcenter/fingerprinters.svg");
+#contentBlockingFingerprintersCheckbox > .checkbox-label {
+  background: no-repeat 0px center url("chrome://browser/skin/controlcenter/fingerprinters.svg");
 }
 
-#contentBlockingFingerprintersCheckbox[checked] > .checkbox-label-box {
-  list-style-image: url("chrome://browser/skin/controlcenter/fingerprinters-disabled.svg");
+#contentBlockingFingerprintersCheckbox[checked] > .checkbox-label {
+  background: no-repeat 0px center url("chrome://browser/skin/controlcenter/fingerprinters-disabled.svg");
 }
 
 .content-blocking-icon,
 .permission-icon {
   -moz-context-properties: fill;
   fill: currentColor;
 }
 
diff --git a/toolkit/content/widgets/checkbox.js b/toolkit/content/widgets/checkbox.js
--- a/toolkit/content/widgets/checkbox.js
+++ b/toolkit/content/widgets/checkbox.js
@@ -26,32 +26,28 @@ class MozCheckbox extends MozElements.Ba
         event.preventDefault();
       }
     });
   }
 
   static get inheritedAttributes() {
     return {
       ".checkbox-label": "accesskey,text=label",
-      ".checkbox-icon": "src",
     };
   }
 
   connectedCallback() {
     if (this.delayConnectedCallback()) {
       return;
     }
 
     if (!MozCheckbox.contentFragment) {
       let content = `
         <image class="checkbox-check"/>
-        <hbox class="checkbox-label-box" flex="1">
-          <image class="checkbox-icon"/>
-          <label class="checkbox-label" flex="1"/>
-        </hbox>
+        <label class="checkbox-label" flex="1"/>
       `;
       MozCheckbox.contentFragment = MozXULElement.parseXULToFragment(content);
     }
 
     this.textContent = "";
     let fragment =
       this.ownerDocument.importNode(MozCheckbox.contentFragment, true);
     this.appendChild(fragment);
