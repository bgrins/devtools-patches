# HG changeset patch
# User Patrick Brosset <pbrosset@mozilla.com>
# Parent  f25b336cc3f2ff8d1618834ca4c53c368d79a7fb
Bug 1123851 - 3 - Tests

diff --git a/browser/devtools/commandline/test/browser.ini b/browser/devtools/commandline/test/browser.ini
--- a/browser/devtools/commandline/test/browser.ini
+++ b/browser/devtools/commandline/test/browser.ini
@@ -49,16 +49,17 @@ support-files =
  browser_cmd_csscoverage_page3.html
  browser_cmd_csscoverage_sheetA.css
  browser_cmd_csscoverage_sheetB.css
  browser_cmd_csscoverage_sheetC.css
  browser_cmd_csscoverage_sheetD.css
 [browser_cmd_folder.js]
 [browser_cmd_highlight_01.js]
 [browser_cmd_highlight_02.js]
+[browser_cmd_highlight_03.js]
 [browser_cmd_inject.js]
 support-files =
  browser_cmd_inject.html
 [browser_cmd_csscoverage_util.js]
 [browser_cmd_jsb.js]
 support-files =
   browser_cmd_jsb_script.jsi
 [browser_cmd_media.js]
diff --git a/browser/devtools/commandline/test/browser_cmd_highlight_01.js b/browser/devtools/commandline/test/browser_cmd_highlight_01.js
--- a/browser/devtools/commandline/test/browser_cmd_highlight_01.js
+++ b/browser/devtools/commandline/test/browser_cmd_highlight_01.js
@@ -5,17 +5,19 @@
 
 // Tests the various highlight command parameters and options
 
 // Creating a test page with many elements to test the --showall option
 let TEST_PAGE = "data:text/html;charset=utf-8,<body><ul>";
 for (let i = 0; i < 200; i ++) {
   TEST_PAGE += "<li class='item'>" + i + "</li>";
 }
-TEST_PAGE += "</ul></body>";
+TEST_PAGE += "</ul>";
+TEST_PAGE += "<div style='position:absolute;top:0;right:0;width:100px;height:100px;'></div>";
+TEST_PAGE += "</body>";
 
 function test() {
   return Task.spawn(spawnTest).then(finish, helpers.handleError);
 }
 
 function* spawnTest() {
   let options = yield helpers.openTab(TEST_PAGE);
   yield helpers.openToolbar(options);
@@ -202,17 +204,17 @@ function* spawnTest() {
       }
     },
     {
       setup: 'highlight body --hideguides --showinfobar --showall --region ' +
         'content --fill red --keep',
       check: {
         input:  'highlight body --hideguides --showinfobar --showall --region ' +
           'content --fill red --keep',
-        hints: '',
+        hints:                      ' [options]',
         markup: 'VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV' +
           'VVVVVVVVVVVVVVVVVVVVVVVVV',
         status: 'VALID'
       },
       exec: {
         output: '1 node highlighted'
       }
     },
@@ -237,16 +239,43 @@ function* spawnTest() {
         markup: 'VVVVVVVVVVVVVVVVVVVVVVVVV',
         status: 'VALID'
       },
       exec: {
         output: '200 nodes highlighted'
       }
     },
     {
+      setup: 'highlight div --geometry',
+      check: {
+        input:  'highlight div --geometry',
+        hints:                           ' [options]',
+        markup: 'VVVVVVVVVVVVVVVVVVVVVVVV',
+        status: 'VALID'
+      },
+      exec: {
+        output: '1 node highlighted'
+      }
+    },
+    {
+      setup: 'highlight body --hideguides --showinfobar --showall --region ' +
+        'content --fill red --keep --geometry',
+      check: {
+        input:  'highlight body --hideguides --showinfobar --showall --region ' +
+          'content --fill red --keep --geometry',
+        hints: '',
+        markup: 'VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV' +
+          'VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV',
+        status: 'VALID'
+      },
+      exec: {
+        output: '1 node highlighted'
+      }
+    },
+    {
       setup: 'unhighlight',
       check: {
         input:  'unhighlight',
         hints:  '',
         markup: 'VVVVVVVVVVV',
         status: 'VALID'
       }
     }
diff --git a/browser/devtools/commandline/test/browser_cmd_highlight_03.js b/browser/devtools/commandline/test/browser_cmd_highlight_03.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/commandline/test/browser_cmd_highlight_03.js
@@ -0,0 +1,45 @@
+/* Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Tests that the highlight command with the --geometry option creates a
+// GeometryEditorHighlighter highlighter.
+
+const TEST_PAGE = "data:text/html;charset=utf-8," +
+                  "<div style='background:red;position:absolute;top:50px;left:50px;width:50px;height:50px;'></div>";
+
+function test() {
+  return Task.spawn(function*() {
+    let options = yield helpers.openTab(TEST_PAGE);
+    yield helpers.openToolbar(options);
+
+    info("highlight the geometry of the DIV node");
+    yield runCommand("highlight div --geometry", options);
+
+    let highlighters = getHighlighters();
+    is(highlighters.length, 1, "The highlighter element exists for div");
+    ok(highlighters[0].ID_CLASS_PREFIX.indexOf("geometry") !== -1,
+      "The right highlighter type was used");
+
+    info("highlight the DIV node again without the geometry argument");
+    yield runCommand("highlight div", options);
+
+    highlighters = getHighlighters();
+    ok(highlighters[0].ID_CLASS_PREFIX.indexOf("box-model") !== -1,
+      "The right highlighter type was used");
+
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
+}
+
+function getHighlighters() {
+  // Note that this only works as long as gcli tests aren't run with e10s on.
+  // To make this e10s ready, execute this in a content frame script instead.
+  return require("gcli/commands/highlight").highlighters;
+}
+
+function* runCommand(cmd, options) {
+  yield helpers.audit(options, [{ setup: cmd, exec: {} }]);
+}
diff --git a/browser/devtools/inspector/test/browser.ini b/browser/devtools/inspector/test/browser.ini
--- a/browser/devtools/inspector/test/browser.ini
+++ b/browser/devtools/inspector/test/browser.ini
@@ -3,16 +3,18 @@ subsuite = devtools
 support-files =
   doc_frame_script.js
   doc_inspector_breadcrumbs.html
   doc_inspector_delete-selected-node-01.html
   doc_inspector_delete-selected-node-02.html
   doc_inspector_gcli-inspect-command.html
   doc_inspector_highlight_after_transition.html
   doc_inspector_highlighter-comments.html
+  doc_inspector_highlighter-geometry_01.html
+  doc_inspector_highlighter-geometry_02.html
   doc_inspector_highlighter_csstransform.html
   doc_inspector_highlighter.html
   doc_inspector_highlighter_rect.html
   doc_inspector_highlighter_rect_iframe.html
   doc_inspector_infobar_01.html
   doc_inspector_infobar_02.html
   doc_inspector_menu-01.html
   doc_inspector_menu-02.html
@@ -35,16 +37,21 @@ skip-if = e10s # GCLI isn't e10s compati
 [browser_inspector_highlighter-01.js]
 [browser_inspector_highlighter-02.js]
 [browser_inspector_highlighter-03.js]
 [browser_inspector_highlighter-04.js]
 [browser_inspector_highlighter-by-type.js]
 [browser_inspector_highlighter-comments.js]
 [browser_inspector_highlighter-csstransform_01.js]
 [browser_inspector_highlighter-csstransform_02.js]
+[browser_inspector_highlighter-geometry_01.js]
+[browser_inspector_highlighter-geometry_02.js]
+[browser_inspector_highlighter-geometry_03.js]
+[browser_inspector_highlighter-geometry_04.js]
+[browser_inspector_highlighter-geometry_05.js]
 [browser_inspector_highlighter-hover_01.js]
 [browser_inspector_highlighter-hover_02.js]
 [browser_inspector_highlighter-hover_03.js]
 [browser_inspector_highlighter-iframes.js]
 [browser_inspector_highlighter-options.js]
 [browser_inspector_highlighter-rect_01.js]
 [browser_inspector_highlighter-rect_02.js]
 [browser_inspector_highlighter-selector_01.js]
diff --git a/browser/devtools/inspector/test/browser_inspector_highlighter-geometry_01.js b/browser/devtools/inspector/test/browser_inspector_highlighter-geometry_01.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_highlighter-geometry_01.js
@@ -0,0 +1,104 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+// Test the creation of the geometry highlighter elements.
+
+const TEST_URL = "data:text/html;charset=utf-8," +
+                 "<span id='inline'></span>" +
+                 "<div id='positioned' style='background:yellow;position:absolute;left:5rem;top:30px;right:300px;bottom:10em;'></div>" +
+                 "<div id='sized' style='background:red;width:5em;height:50%;'></div>";
+const ID = "geometry-editor-";
+const SIDES = ["left", "right", "top", "bottom"];
+const SIZES = ["width", "height"];
+
+add_task(function*() {
+  let {inspector, toolbox} = yield openInspectorForURL(TEST_URL);
+  let front = inspector.inspector;
+
+  let highlighter = yield front.getHighlighterByType("GeometryEditorHighlighter");
+
+  yield hasArrowsAndLabels(highlighter, inspector);
+  yield isHiddenForNonPositionedNonSizedElement(highlighter, inspector);
+  yield sideArrowsAreDisplayedForPositionedNode(highlighter, inspector);
+  yield sizeLabelIsDisplayedForSizedNode(highlighter, inspector);
+
+  yield highlighter.finalize();
+});
+
+function* hasArrowsAndLabels(highlighterFront, inspector) {
+  info("Checking that the highlighter has the expected arrows and labels");
+
+  for (let name of [...SIDES]) {
+    let value = yield getHighlighterNodeAttribute(highlighterFront,
+      ID + "arrow-" + name, "class");
+    is(value, ID + "arrow " + name, "The " + name + " arrow exists");
+
+    value = yield getHighlighterNodeAttribute(highlighterFront,
+      ID + "label-text-" + name, "class");
+    is(value, ID + "label-text", "The " + name + " label exists");
+  }
+
+  let value = yield getHighlighterNodeAttribute(highlighterFront,
+    ID + "label-text-size", "class");
+  is(value, ID + "label-text", "The size label exists");
+}
+
+function* isHiddenForNonPositionedNonSizedElement(highlighterFront, inspector) {
+  info("Asking to show the highlighter on an inline, non positioned element");
+
+  let node = yield getNodeFront("#inline", inspector);
+  yield highlighterFront.show(node);
+
+  for (let name of [...SIDES]) {
+    let hidden = yield getHighlighterNodeAttribute(highlighterFront,
+      ID + "arrow-" + name, "hidden");
+    is(hidden, "true", "The " + name + " arrow is hidden");
+  }
+
+  let hidden = yield getHighlighterNodeAttribute(highlighterFront,
+    ID + "label-size", "hidden");
+  is(hidden, "true", "The size label is hidden");
+}
+
+function* sideArrowsAreDisplayedForPositionedNode(highlighterFront, inspector) {
+  info("Asking to show the highlighter on the positioned node");
+
+  let node = yield getNodeFront("#positioned", inspector);
+  yield highlighterFront.show(node);
+
+  for (let name of SIDES) {
+    let hidden = yield getHighlighterNodeAttribute(highlighterFront,
+      ID + "arrow-" + name, "hidden");
+    ok(!hidden, "The " + name + " arrow is visible for the positioned node");
+  }
+
+  let hidden = yield getHighlighterNodeAttribute(highlighterFront,
+    ID + "label-size", "hidden");
+  is(hidden, "true", "The size label is hidden");
+
+  info("Hiding the highlighter");
+  yield highlighterFront.hide();
+}
+
+function* sizeLabelIsDisplayedForSizedNode(highlighterFront, inspector) {
+  info("Asking to show the highlighter on the sized node");
+
+  let node = yield getNodeFront("#sized", inspector);
+  yield highlighterFront.show(node);
+
+  let hidden = yield getHighlighterNodeAttribute(highlighterFront,
+    ID + "label-size", "hidden");
+  ok(!hidden, "The size label is visible");
+
+  for (let name of SIDES) {
+    let hidden = yield getHighlighterNodeAttribute(highlighterFront,
+      ID + "arrow-" + name, "hidden");
+    is(hidden, "true", "The " + name + " arrow is hidden for the sized node");
+  }
+
+  info("Hiding the highlighter");
+  yield highlighterFront.hide();
+}
diff --git a/browser/devtools/inspector/test/browser_inspector_highlighter-geometry_02.js b/browser/devtools/inspector/test/browser_inspector_highlighter-geometry_02.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_highlighter-geometry_02.js
@@ -0,0 +1,65 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+// Test that the geometry highlighter labels content is correct.
+
+const TEST_URL = "data:text/html;charset=utf-8," +
+                 "<div id='positioned' style='background:yellow;position:absolute;left:5rem;top:30px;right:300px;bottom:10em;'></div>" +
+                 "<div id='sized' style='background:red;width:5em;height:50%;'></div>";
+const ID = "geometry-editor-";
+
+add_task(function*() {
+  let {inspector, toolbox} = yield openInspectorForURL(TEST_URL);
+  let front = inspector.inspector;
+
+  let highlighter = yield front.getHighlighterByType("GeometryEditorHighlighter");
+
+  yield positionLabelsAreCorrect(highlighter, inspector);
+  yield sizeLabelIsCorrect(highlighter, inspector);
+
+  yield highlighter.finalize();
+});
+
+function* positionLabelsAreCorrect(highlighterFront, inspector) {
+  info("Highlight the positioned node and check the position labels");
+
+  let node = yield getNodeFront("#positioned", inspector);
+  yield highlighterFront.show(node);
+
+  let label = yield getHighlighterNodeTextContent(highlighterFront,
+    ID + "label-left");
+  is(label, "5rem", "Left label textcontent is correct");
+
+  label = yield getHighlighterNodeTextContent(highlighterFront,
+    ID + "label-top");
+  is(label, "30px", "Top label textcontent is correct");
+
+  label = yield getHighlighterNodeTextContent(highlighterFront,
+    ID + "label-right");
+  is(label, "300px", "Right label textcontent is correct");
+
+  label = yield getHighlighterNodeTextContent(highlighterFront,
+    ID + "label-bottom");
+  is(label, "10em", "Bottom label textcontent is correct");
+
+  info("Hiding the highlighter");
+  yield highlighterFront.hide();
+}
+
+function* sizeLabelIsCorrect(highlighterFront, inspector) {
+  info("Highlight the sized node and check the size labels");
+
+  let node = yield getNodeFront("#sized", inspector);
+  yield highlighterFront.show(node);
+
+  let label = yield getHighlighterNodeTextContent(highlighterFront,
+    ID + "label-size");
+  ok(label.contains("5em") && label.contains("50%"),
+    "Width label textcontent is correct");
+
+  info("Hiding the highlighter");
+  yield highlighterFront.hide();
+}
diff --git a/browser/devtools/inspector/test/browser_inspector_highlighter-geometry_03.js b/browser/devtools/inspector/test/browser_inspector_highlighter-geometry_03.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_highlighter-geometry_03.js
@@ -0,0 +1,63 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+// Test that the right arrows/labels are shown even when the css properties are
+// in several different css rules.
+
+const TEST_URL = TEST_URL_ROOT + "doc_inspector_highlighter-geometry_01.html";
+const ID = "geometry-editor-";
+const PROPS = ["left", "right", "top", "bottom"];
+
+add_task(function*() {
+  let {inspector, toolbox} = yield openInspectorForURL(TEST_URL);
+  let front = inspector.inspector;
+
+  let highlighter = yield front.getHighlighterByType("GeometryEditorHighlighter");
+
+  yield checkArrowsLabels("#node1", ["size"],
+                          highlighter, inspector);
+
+  yield checkArrowsLabels("#node2", ["top", "left", "bottom", "right"],
+                          highlighter, inspector);
+
+  yield checkArrowsLabels("#node3", ["top", "left", "size"],
+                          highlighter, inspector);
+
+  yield highlighter.finalize();
+});
+
+function* checkArrowsLabels(selector, expectedProperties, highlighterFront, inspector) {
+  info("Getting node " + selector + " from the page");
+  let node = yield getNodeFront(selector, inspector);
+
+  info("Highlighting the node");
+  yield highlighterFront.show(node);
+
+  for (let name of expectedProperties) {
+    let hidden;
+    if (name === "size") {
+      hidden = yield getHighlighterNodeAttribute(highlighterFront,
+        ID + "label-size", "hidden");
+    } else {
+      hidden = yield getHighlighterNodeAttribute(highlighterFront,
+        ID + "arrow-" + name, "hidden");
+    }
+    ok(!hidden, "The " + name + " arrow/label is visible for node " + selector);
+  }
+
+  // Testing that the other arrows are hidden
+  for (let name of PROPS) {
+    if (expectedProperties.indexOf(name) !== -1) {
+      continue;
+    }
+    let hidden = yield getHighlighterNodeAttribute(highlighterFront,
+      ID + "arrow-" + name, "hidden");
+    is(hidden, "true", "The " + name + " arrow is hidden for node " + selector);
+  }
+
+  info("Hiding the highlighter");
+  yield highlighterFront.hide();
+}
diff --git a/browser/devtools/inspector/test/browser_inspector_highlighter-geometry_04.js b/browser/devtools/inspector/test/browser_inspector_highlighter-geometry_04.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_highlighter-geometry_04.js
@@ -0,0 +1,56 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+// Test that the arrows are positioned correctly and have the right size.
+
+const TEST_URL = TEST_URL_ROOT + "doc_inspector_highlighter-geometry_01.html";
+const ID = "geometry-editor-";
+
+add_task(function*() {
+  let {inspector, toolbox} = yield openInspectorForURL(TEST_URL);
+  let front = inspector.inspector;
+
+  let highlighter = yield front.getHighlighterByType("GeometryEditorHighlighter");
+
+  yield checkArrows(highlighter, inspector, ".absolute-all-4", {
+   "top": {x1: 506, y1: 51, x2: 506, y2: 61},
+   "bottom": {x1: 506, y1: 451, x2: 506, y2: 251},
+   "left": {x1: 401, y1: 156, x2: 411, y2: 156},
+   "right": {x1: 901, y1: 156, x2: 601, y2: 156}
+  });
+
+  yield checkArrows(highlighter, inspector, ".relative", {
+   "top": {x1: 901, y1: 51, x2: 901, y2: 91},
+   "left": {x1: 401, y1: 97, x2: 651, y2: 97}
+  });
+
+  yield checkArrows(highlighter, inspector, ".fixed", {
+   "top": {x1: 25, y1: 0, x2: 25, y2: 400},
+   "left": {x1: 0, y1: 425, x2: 0, y2: 425}
+  });
+
+  info("Hiding the highlighter");
+  yield highlighter.hide();
+  yield highlighter.finalize();
+});
+
+function* checkArrows(highlighter, inspector, selector, arrows) {
+  info("Highlighting the test node " + selector);
+  let node = yield getNodeFront(selector, inspector);
+  yield highlighter.show(node);
+
+  for (let side in arrows) {
+    yield checkArrow(highlighter, side, arrows[side]);
+  }
+}
+
+function* checkArrow(highlighter, name, expectedCoordinates) {
+  for (let coordinate in expectedCoordinates) {
+    let value = yield getHighlighterNodeAttribute(highlighter, ID + "arrow-" + name, coordinate);
+    is(Math.floor(value), expectedCoordinates[coordinate],
+      coordinate + " coordinate for arrow " + name + " is correct");
+  }
+}
diff --git a/browser/devtools/inspector/test/browser_inspector_highlighter-geometry_05.js b/browser/devtools/inspector/test/browser_inspector_highlighter-geometry_05.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_highlighter-geometry_05.js
@@ -0,0 +1,138 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+// Test that the arrows and offsetparent and currentnode elements of the
+// geometry highlighter only appear when needed.
+
+const TEST_URL = TEST_URL_ROOT + "doc_inspector_highlighter-geometry_02.html";
+const ID = "geometry-editor-";
+
+const TEST_DATA = [{
+  selector: "body",
+  isOffsetParentVisible: false,
+  isCurrentNodeVisible: false,
+  hasVisibleArrows: false,
+  isSizeVisible: false
+}, {
+  selector: "h1",
+  isOffsetParentVisible: false,
+  isCurrentNodeVisible: false,
+  hasVisibleArrows: false,
+  isSizeVisible: false
+}, {
+  selector: ".absolute",
+  isOffsetParentVisible: false,
+  isCurrentNodeVisible: true,
+  hasVisibleArrows: true,
+  isSizeVisible: false
+}, {
+  selector: "#absolute-container",
+  isOffsetParentVisible: false,
+  isCurrentNodeVisible: true,
+  hasVisibleArrows: false,
+  isSizeVisible: true
+}, {
+  selector: ".absolute-bottom-right",
+  isOffsetParentVisible: true,
+  isCurrentNodeVisible: true,
+  hasVisibleArrows: true,
+  isSizeVisible: false
+}, {
+  selector: ".absolute-width-margin",
+  isOffsetParentVisible: true,
+  isCurrentNodeVisible: true,
+  hasVisibleArrows: true,
+  isSizeVisible: true
+}, {
+  selector: ".absolute-all-4",
+  isOffsetParentVisible: true,
+  isCurrentNodeVisible: true,
+  hasVisibleArrows: true,
+  isSizeVisible: false
+}, {
+  selector: ".relative",
+  isOffsetParentVisible: true,
+  isCurrentNodeVisible: true,
+  hasVisibleArrows: true,
+  isSizeVisible: false
+}, {
+  selector: ".static",
+  isOffsetParentVisible: false,
+  isCurrentNodeVisible: false,
+  hasVisibleArrows: false,
+  isSizeVisible: false
+}, {
+  selector: ".static-size",
+  isOffsetParentVisible: false,
+  isCurrentNodeVisible: true,
+  hasVisibleArrows: false,
+  isSizeVisible: true
+}, {
+  selector: ".fixed",
+  isOffsetParentVisible: false,
+  isCurrentNodeVisible: true,
+  hasVisibleArrows: true,
+  isSizeVisible: false
+}];
+
+add_task(function*() {
+  let {inspector, toolbox} = yield openInspectorForURL(TEST_URL);
+  let front = inspector.inspector;
+
+  let highlighter = yield front.getHighlighterByType("GeometryEditorHighlighter");
+
+  for (let data of TEST_DATA) {
+    yield testNode(inspector, highlighter, data);
+  }
+
+  info("Hiding the highlighter");
+  yield highlighter.hide();
+  yield highlighter.finalize();
+});
+
+function* testNode(inspector, highlighter, data) {
+  info("Highlighting the test node " + data.selector);
+  let node = yield getNodeFront(data.selector, inspector);
+  yield highlighter.show(node);
+
+  is((yield isOffsetParentVisible(highlighter)), data.isOffsetParentVisible,
+    "The offset-parent highlighter visibility is correct for node " + data.selector);
+  is((yield isCurrentNodeVisible(highlighter)), data.isCurrentNodeVisible,
+    "The current-node highlighter visibility is correct for node " + data.selector);
+  is((yield hasVisibleArrows(highlighter)), data.hasVisibleArrows,
+    "The arrows visibility is correct for node " + data.selector);
+  is((yield isSizeVisible(highlighter)), data.isSizeVisible,
+    "The size label visibility is correct for node " + data.selector);
+}
+
+function* isOffsetParentVisible(highlighter) {
+  let hidden = yield getHighlighterNodeAttribute(highlighter,
+    ID + "offset-parent", "hidden");
+  return !hidden;
+}
+
+function* isCurrentNodeVisible(highlighter) {
+  let hidden = yield getHighlighterNodeAttribute(highlighter,
+    ID + "current-node", "hidden");
+  return !hidden;
+}
+
+function* hasVisibleArrows(highlighter) {
+  for (let side of ["top", "left", "bottom", "right"]) {
+    let hidden = yield getHighlighterNodeAttribute(highlighter,
+      ID + "arrow-" + side, "hidden");
+    if (!hidden) {
+      return true;
+    }
+  }
+  return false;
+}
+
+function* isSizeVisible(highlighter) {
+  let hidden = yield getHighlighterNodeAttribute(highlighter,
+    ID + "label-size", "hidden");
+  return !hidden;
+}
diff --git a/browser/devtools/inspector/test/doc_inspector_highlighter-geometry_01.html b/browser/devtools/inspector/test/doc_inspector_highlighter-geometry_01.html
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/doc_inspector_highlighter-geometry_01.html
@@ -0,0 +1,90 @@
+<!doctype html>
+<html lang="en">
+<head>
+  <meta charset="utf-8">
+  <title>geometry highlighter test page</title>
+  <style type="text/css">
+    html, body {
+      margin: 0;
+      padding: 0;
+    }
+
+    .relative-sized-parent {
+      position: relative;
+      border: 2px solid black;
+      border-radius: 25px;
+    }
+    .size {
+      width: 300px;
+      height: 300px;
+    }
+
+    .positioned-child {
+      position: absolute;
+      background: #f06;
+    }
+    .pos-top-left {
+      top: 30px;
+      left: 25%;
+    }
+    .pos-bottom-right {
+      bottom: 5em;
+      right: -10px;
+    }
+
+    .inline-positioned {
+      background: yellow;
+    }
+
+    #absolute-container {
+      position: absolute;
+      top: 50px;
+      left: 400px;
+      width: 500px;
+      height: 400px;
+      border: 1px solid black;
+    }
+
+    .absolute-all-4 {
+      position: absolute;
+      top: 10px;
+      left: 10px;
+      bottom: 200px;
+      right: 300px;
+      border: 1px solid red;
+    }
+
+    .relative {
+      position: relative;
+      top: 10%;
+      left: 50%;
+      height: 10px;
+      border: 1px solid blue;
+    }
+
+    .fixed {
+      position: fixed;
+      top: 400px;
+      left: 0;
+      width: 50px;
+      height: 50px;
+      border-radius: 50%;
+      background: green;
+    }
+  </style>
+</head>
+<body>
+  <div id="node1" class="relative-sized-parent size">
+    <div id="node2" class="positioned-child pos-top-left pos-bottom-right">
+      <div id="node3" class="inline-positioned positioned-child pos-top-left" style="width:50px;height:50px;"></div>
+    </div>
+  </div>
+
+  <div id="absolute-container">
+    <div class="absolute-all-4"></div>
+    <div class="relative"></div>
+  </div>
+
+  <div class="fixed"></div>
+</body>
+</html>
diff --git a/browser/devtools/inspector/test/doc_inspector_highlighter-geometry_02.html b/browser/devtools/inspector/test/doc_inspector_highlighter-geometry_02.html
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/doc_inspector_highlighter-geometry_02.html
@@ -0,0 +1,120 @@
+<!doctype html><html><head><meta charset="UTF-8"></head><body class="header">
+
+<style>
+.fixed { position: fixed; top: 40px; right: 20px; margin-top: 20px; background: #ccf; }
+.fixed-bottom-right { position: fixed; bottom: 4em; right: 25%; margin: 20px; background: #ccf; }
+
+#absolute-container { position: relative; height: 150px; margin: 20px; }
+.absolute { position: absolute; top: 20px; left: 400px; background: #fcc; }
+.absolute-bottom-right { position: absolute; bottom: 20px; right: 50px; background: #fcc; }
+.absolute-all-4 { position: absolute; top: 100px; bottom: 10px; left: 20px; right: 700px; background: #fcc; }
+.absolute-negative { position: absolute; bottom: -25px; background: #fcc; }
+.absolute-width-margin { position: absolute; top: 20px; right: 20px; width: 450px; margin: .3em; padding: 10px; border: 2px solid red; box-sizing: border-box; background: #fcc; }
+
+.relative { position: relative; top: 10px; left: 10px; background: #cfc;}
+.relative-inline { position: relative; top: 10px; left: 10px; display: inline; background: #cfc;}
+
+.static { position: static; top: 10px; left: 10px; background: #fcf; }
+.static-size { position: static; top: 10px; left: 10px; width: 300px; height: 100px; background: #fcf; }
+
+#sticky-container {
+  margin: 50px;
+  height: 400px;
+  width: 400px;
+  padding: 40px;
+  overflow: scroll;
+}
+#sticky-container dl {
+    margin: 0;
+    padding: 24px 0 0 0;
+}
+
+#sticky-container dt {
+    background: #ffc;
+    border-bottom: 1px solid #989EA4;
+    border-top: 1px solid #717D85;
+    color: #FFF;
+    font: bold 18px/21px Helvetica, Arial, sans-serif;
+    margin: 0;
+    padding: 2px 0 0 12px;
+    position: sticky;
+    width: 99%;
+    top: 0px;
+}
+
+#sticky-container dd {
+    font: bold 20px/45px Helvetica, Arial, sans-serif;
+    margin: 0;
+    padding: 0 0 0 12px;
+    white-space: nowrap;
+}
+
+#sticky-container dd + dd {
+    border-top: 1px solid #CCC
+}
+</style>
+
+<h1>Positioning playground</h1>
+<p>A demo of various positioning schemes: <a href="http://dev.w3.org/csswg/css-position/#pos-sch">http://dev.w3.org/csswg/css-position/#pos-sch</a>.</p>
+<p>absolute, static, fixed, relative, sticky</p>
+
+<h2>Absolute positioning</h2>
+<div class="absolute">
+  Absolute child with no relative parent
+</div>
+<div id="absolute-container">
+  <div class="absolute">
+    Absolute child with a relative parent
+  </div>
+  <div class="absolute-bottom-right">
+    Absolute child with a relative parent, positioned from the bottom right
+  </div>
+  <div class="absolute-all-4">
+    Absolute child with a relative parent, with all 4 positions
+  </div>
+  <div class="absolute-negative">
+    Absolute child with a relative parent, with negative positions
+  </div>
+  <div class="absolute-width-margin">
+    Absolute child with a relative parent, size, margin
+  </div>
+</div>
+
+<h2>Relative positioning</h2>
+<div id="relative-container">
+  <div class="relative">
+    Relative child
+  </div>
+  <div style="width: 100px;">
+  <div class="relative-inline">
+    Relative inline child, across multiple lines
+  </div>
+  </div>
+  <div style="position:relative;">
+    <div class="relative">
+      Relative child, in a positioned parent
+    </div>
+  </div>
+</div>
+
+<h2>Fixed positioning</h2>
+<div id="fixed-container">
+  <div class="fixed">
+    Fixed child
+  </div>
+  <div class="fixed-bottom-right">
+    Fixed child, bottom right
+  </div>
+</div>
+
+<h2>Static positioning</h2>
+<div id="static-container">
+  <div class="static">
+    Static child with no width/height
+  </div>
+  <div class="static-size">
+    Static child with width/height
+  </div>
+</div>
+
+</body></html>
\ No newline at end of file
