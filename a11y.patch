# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  f3da8ae9d1a3e74cd273746da51a035ddc572bee

diff --git a/browser/actors/BrowserTabParent.jsm b/browser/actors/BrowserTabParent.jsm
--- a/browser/actors/BrowserTabParent.jsm
+++ b/browser/actors/BrowserTabParent.jsm
@@ -33,17 +33,19 @@ class BrowserTabParent extends JSWindowA
       // about:addons, browserAction and pageAction popup panels.
       // (Ideally we could call gBrowser.getTabForBrowser, but it returns undefined early in
       // the tab browser creation and we would ignore browsers related to newly created tabs).
       return;
     }
 
     switch (message.name) {
       case "Browser:WindowCreated": {
-        gBrowser.announceWindowCreated(browser, message.data.userContextId);
+        if (!browser.hostBrowser) {
+          gBrowser.announceWindowCreated(browser, message.data.userContextId);
+        }
         break;
       }
 
       case "Browser:FirstPaint": {
         browser.ownerGlobal.gBrowserInit._firstBrowserPaintDeferred.resolve();
         break;
       }
 
diff --git a/browser/base/content/browser.css b/browser/base/content/browser.css
--- a/browser/base/content/browser.css
+++ b/browser/base/content/browser.css
@@ -59,16 +59,23 @@ body {
 :root[customizing] {
   min-width: -moz-fit-content;
 }
 
 /* Prevent shrinking the page content to 0 height and width */
 .browserStack > browser {
   min-height: 25px;
   min-width: 25px;
+  width: 75%;
+  justify-self: end;
+}
+
+.browserStack > .a11ymode {
+  justify-self: start;
+  width: 25%;
 }
 
 body {
   display: -moz-box;
   -moz-box-orient: vertical;
   -moz-box-flex: 1;
 }
 
diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -5477,16 +5477,17 @@ var XULBrowserWindow = {
         gCustomizeMode.exit();
       }
 
       CFRPageActions.updatePageActions(gBrowser.selectedBrowser);
     }
     Services.obs.notifyObservers(null, "touchbar-location-change", location);
     UpdateBackForwardCommands(gBrowser.webNavigation);
     ReaderParent.updateReaderButton(gBrowser.selectedBrowser);
+    document.querySelector("#a11y-mode-button").setAttribute("hidden", false);
 
     if (!gMultiProcessBrowser) {
       // Bug 1108553 - Cannot rotate images with e10s
       gGestureSupport.restoreRotationState();
     }
 
     // See bug 358202, when tabs are switched during a drag operation,
     // timers don't fire on windows (bug 203573)
diff --git a/browser/base/content/browser.xhtml b/browser/base/content/browser.xhtml
--- a/browser/base/content/browser.xhtml
+++ b/browser/base/content/browser.xhtml
@@ -999,16 +999,21 @@
                   <image id="cfr-button"
                          class="urlbar-icon urlbar-page-action"
                          role="presentation"/>
                 </hbox>
                 <hbox id="userContext-icons" hidden="true">
                   <label id="userContext-label"/>
                   <image id="userContext-indicator"/>
                 </hbox>
+                <image id="a11y-mode-button"
+                       class="urlbar-icon urlbar-page-action"
+                       tooltip="dynamic-shortcut-tooltip"
+                       role="button"
+                       onclick="ReaderParent.buttonClick(event);"/>
                 <image id="reader-mode-button"
                        class="urlbar-icon urlbar-page-action"
                        tooltip="dynamic-shortcut-tooltip"
                        role="button"
                        hidden="true"
                        onclick="ReaderParent.buttonClick(event);"/>
                 <toolbarbutton id="urlbar-zoom-button"
                        onclick="FullZoom.reset();"
diff --git a/browser/base/content/tabbrowser.js b/browser/base/content/tabbrowser.js
--- a/browser/base/content/tabbrowser.js
+++ b/browser/base/content/tabbrowser.js
@@ -1883,16 +1883,18 @@
       let oldUserTypedValue = aBrowser.userTypedValue;
       let hadStartedLoad = aBrowser.didStartLoadSinceLastUserTyping();
       let parent = aBrowser.parentNode;
 
       // Change the "remote" attribute.
 
       // Make sure the browser is destroyed so it unregisters from observer notifications
       aBrowser.destroy();
+      // XXX: also destroy a11ymode browser?
+
       // Only remove the node if we're not rebuilding the frameloader via nsFrameLoaderOwner.
       let rebuildFrameLoaders =
         E10SUtils.rebuildFrameloadersOnRemotenessChange ||
         window.docShell.nsILoadContext.useRemoteSubframes;
       if (!rebuildFrameLoaders) {
         aBrowser.remove();
       }
 
@@ -2077,32 +2079,53 @@
       remoteType,
       replayExecution,
       sameProcessAsFrameLoader,
       uriIsAboutBlank,
       userContextId,
       skipLoad,
     } = {}) {
       let b = document.createXULElement("browser");
+
+      // if (!isPreloadBrowser && remoteType) {
+      //   // This will let us go from tab to a11ymode browser:
+      //   b.a11ymodeBrowser = document.createXULElement("browser");
+      //   b.a11ymodeBrowser.setAttribute("remoteType", remoteType);
+      //   b.a11ymodeBrowser.setAttribute("remote", "true");
+      //   // This will let us go from a11ymode to tab:
+      //   b.a11ymodeBrowser.linkedBrowser = b;
+      // }
+
       // Use the JSM global to create the permanentKey, so that if the
       // permanentKey is held by something after this window closes, it
       // doesn't keep the window alive.
       b.permanentKey = new (Cu.getGlobalForObject(Services)).Object();
 
       const defaultBrowserAttributes = {
         contextmenu: "contentAreaContextMenu",
         datetimepicker: "DateTimePickerPanel",
         message: "true",
         messagemanagergroup: "browsers",
         selectmenulist: "ContentSelectDropdown",
         tooltip: "aHTMLTooltip",
         type: "content",
       };
       for (let attribute in defaultBrowserAttributes) {
         b.setAttribute(attribute, defaultBrowserAttributes[attribute]);
+
+        if (
+          b.a11ymodeBrowser &&
+          attribute != "messagemanagergroup" &&
+          attribute != "message"
+        ) {
+          b.a11ymodeBrowser.setAttribute(
+            attribute,
+            defaultBrowserAttributes[attribute]
+          );
+        }
       }
 
       if (userContextId) {
         b.setAttribute("usercontextid", userContextId);
       }
 
       if (remoteType) {
         b.setAttribute("remoteType", remoteType);
@@ -2121,19 +2144,31 @@
         if (remoteType) {
           throw new Error("Cannot set opener window on a remote browser!");
         }
         b.presetOpenerWindow(openerWindow);
       }
 
       if (!isPreloadBrowser) {
         b.setAttribute("autocompletepopup", "PopupAutoComplete");
+        if (b.a11ymodeBrowser) {
+          b.a11ymodeBrowser.setAttribute(
+            "autocompletepopup",
+            "PopupAutoComplete"
+          );
+        }
       }
       if (this._autoScrollPopup) {
         b.setAttribute("autoscrollpopup", this._autoScrollPopup.id);
+        if (b.a11ymodeBrowser) {
+          b.a11ymodeBrowser.setAttribute(
+            "autoscrollpopup",
+            this._autoScrollPopup.id
+          );
+        }
       }
 
       /*
        * This attribute is meant to describe if the browser is the
        * preloaded browser. There are 2 defined states: "preloaded" or
        * "consumed". The order of events goes as follows:
        *   1. The preloaded browser is created and the 'preloadedState'
        *      attribute for that browser is set to "preloaded".
@@ -2152,20 +2187,25 @@
 
       if (nextRemoteTabId) {
         if (!remoteType) {
           throw new Error("Cannot have nextRemoteTabId without a remoteType");
         }
         // Gecko is going to read this attribute and use it.
         b.setAttribute("nextRemoteTabId", nextRemoteTabId.toString());
       }
-
+      // if (!isPreloadBrowser && remoteType) {
+      //   b.createA11YModeBrowser();
+      // }
       if (sameProcessAsFrameLoader) {
         b.sameProcessAsFrameLoader = sameProcessAsFrameLoader;
       }
+      // if (b.a11ymodeBrowser) {
+      //   b.a11ymodeBrowser.sameProcessAsFrameLoader = b.frameLoader;
+      // }
 
       // This will be used by gecko to control the name of the opened
       // window.
       if (name) {
         // XXX: The `name` property is special in HTML and XUL. Should
         // we use a different attribute name for this?
         b.setAttribute("name", name);
       }
@@ -2176,19 +2216,38 @@
       // We set large flex on both containers to allow the devtools toolbox to
       // set a flex attribute. We don't want the toolbox to actually take up free
       // space, but we do want it to collapse when the window shrinks, and with
       // flex=0 it can't. When the toolbox is on the bottom it's a sibling of
       // browserStack, and when it's on the side it's a sibling of
       // browserContainer.
       let stack = document.createXULElement("stack");
       stack.className = "browserStack";
+      // if (b.a11ymodeBrowser) {
+      //   stack.appendChild(b.a11ymodeBrowser);
+      // }
       stack.appendChild(b);
       stack.setAttribute("flex", "10000");
 
+      // console.log(isPreloadBrowser);
+      // if (!isPreloadBrowser) {
+      // }
+      // if (b.a11ymodeBrowser) {
+      //   b.a11ymodeBrowser.classList.add("a11ymode");
+      //   stack.appendChild(b.a11ymodeBrowser);
+      // }
+
+      // try {
+      //   a11ymodeBrowser.loadURI("about:a11ymode", {
+      //     triggeringPrincipal: Services.scriptSecurityManager.getSystemPrincipal(),
+      //   });
+      // } catch (ex) {
+      //   Cu.reportError(ex);
+      // }
+
       let browserContainer = document.createXULElement("vbox");
       browserContainer.className = "browserContainer";
       browserContainer.appendChild(notificationbox);
       browserContainer.appendChild(stack);
       browserContainer.setAttribute("flex", "10000");
 
       let browserSidebarContainer = document.createXULElement("hbox");
       browserSidebarContainer.className = "browserSidebarContainer";
@@ -3779,16 +3838,19 @@
       if (this._switcher) {
         this._switcher.onTabRemoved(aTab);
       }
 
       // This will unload the document. An unload handler could remove
       // dependant tabs, so it's important that the tabbrowser is now in
       // a consistent state (tab removed, tab positions updated, etc.).
       browser.remove();
+      if (browser.a11ymodeBrowser) {
+        browser.a11ymodeBrowser.remove();
+      }
 
       // Release the browser in case something is erroneously holding a
       // reference to the tab after its removal.
       this._tabForBrowser.delete(aTab.linkedBrowser);
       aTab.linkedBrowser = null;
 
       panel.remove();
 
@@ -4176,16 +4238,19 @@
         ContextualIdentityService.telemetry(userContextId);
         tab.setUserContextId(userContextId);
       }
 
       // We don't want to update the container icon and identifier if
       // this is not the selected browser.
       if (browser == gBrowser.selectedBrowser) {
         updateUserContextUIIndicator();
+        if (!browser.a11ymodeBrowser) {
+          browser.before(browser.createA11YModeBrowser());
+        }
       }
     },
 
     reloadMultiSelectedTabs() {
       this.reloadTabs(this.selectedTabs);
     },
 
     reloadTabs(tabs) {
@@ -5160,17 +5225,16 @@
           openContextMenu(aMessage);
           break;
         }
         case "Browser:Init": {
           let tab = this.getTabForBrowser(browser);
           if (!tab) {
             return undefined;
           }
-
           this._outerWindowIDBrowserMap.set(browser.outerWindowID, browser);
           browser.sendMessageToActor(
             "Browser:AppTab",
             { isAppTab: tab.pinned },
             "BrowserTab"
           );
           break;
         }
@@ -5500,16 +5564,22 @@
 
       this.addEventListener("oop-browser-crashed", event => {
         if (!event.isTrusted) {
           return;
         }
 
         let browser = event.originalTarget;
 
+        if (browser.hostBrowser) {
+          console.error("a11ymode crashed");
+          return;
+        }
+
+
         // Preloaded browsers do not actually have any tabs. If one crashes,
         // it should be released and removed.
         if (browser === this.preloadedBrowser) {
           NewTabPagePreloading.removePreloadedBrowser(window);
           return;
         }
 
         let icon = browser.mIconURL;
diff --git a/browser/components/BrowserGlue.jsm b/browser/components/BrowserGlue.jsm
--- a/browser/components/BrowserGlue.jsm
+++ b/browser/components/BrowserGlue.jsm
@@ -65,16 +65,32 @@ let ACTORS = {
         AboutLoginsSyncEnable: { wantUntrusted: true },
         AboutLoginsSyncOptions: { wantUntrusted: true },
         AboutLoginsUpdateLogin: { wantUntrusted: true },
       },
     },
     matches: ["about:logins", "about:logins?*"],
   },
 
+  A11YMode: {
+    parent: {
+      moduleURI: "resource:///actors/A11YModeParent.jsm",
+    },
+    child: {
+      moduleURI: "resource:///actors/A11YModeChild.jsm",
+      events: {
+        DOMWindowCreated: {},
+        A11YModeContentLoaded: { wantUntrusted: true },
+        A11YModeContentClicked: { wantUntrusted: true },
+      },
+    },
+    matches: ["about:a11ymode", "about:a11ymode?*"],
+    // allFrames: true,
+  },
+
   BlockedSite: {
     parent: {
       moduleURI: "resource:///actors/BlockedSiteParent.jsm",
     },
     child: {
       moduleURI: "resource:///actors/BlockedSiteChild.jsm",
       events: {
         AboutBlockedLoaded: { wantUntrusted: true },
diff --git a/browser/components/a11ymode/A11YModeChild.jsm b/browser/components/a11ymode/A11YModeChild.jsm
new file mode 100644
--- /dev/null
+++ b/browser/components/a11ymode/A11YModeChild.jsm
@@ -0,0 +1,108 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const EXPORTED_SYMBOLS = ["A11YModeChild"];
+
+let a11yModes = new Map();
+let hostWindows = new Map();
+
+const { Services } = ChromeUtils.import("resource://gre/modules/Services.jsm");
+
+// This turns on accessibility automatically (see Services.appinfo.accessibilityEnabled)
+// See https://searchfox.org/mozilla-central/source/devtools/server/actors/accessibility/accessibility-parent.js#135 for more lifecycle
+const accService = Cc["@mozilla.org/accessibilityService;1"].getService(
+  Ci.nsIAccessibilityService
+);
+
+// See stuff like https://searchfox.org/mozilla-central/source/devtools/server/actors/accessibility/walker.js#499
+
+// Basic idea here is to use this actor to receive the accessibility tree and
+// subsequent events from a 'host' browser, and then to send them along to an
+// 'a11ymode' browser (which are running in the same content process)
+// Maybe this should be two different actors?
+class A11YModeChild extends JSWindowActorChild {
+  receiveMessage(message) {
+    console.log("A11YModeChild::receiveMessage", message.name);
+    switch (message.name) {
+      case "A11YMode:UpdateBrowsingContext":
+        const { browsingContext } = message.data;
+        console.log(browsingContext, browsingContext.window);
+        break;
+    }
+  }
+  handleEvent(event) {
+    // if (this.document.documentURI == "about:a11ymode") {
+    //   a11yModes.set()
+    //   gA11YModeMap
+    // }
+
+    // console.log(this, this.docShell.messageManager);
+    switch (event.type) {
+      case "DOMWindowCreated":
+        this.sendAsyncMessage("A11YMode:WindowCreated");
+
+        console.log(
+          "Created",
+          Services.appinfo.processID,
+          this.document.location.toString()
+        );
+        // let { docShell } = this.browsingContext;
+
+        // let context = this.manager.browsingContext;
+        // console.log(
+        //   this.document.documentURI,
+        //   this.document.location,
+        //   docShell.outerWindowID,
+        //   context,
+        //   Services.appinfo.processID
+        // );
+
+        // if (
+        //   this.document.location.protocol == "about:" &&
+        //   this.document.location.pathname == "a11ymode"
+        // ) {
+        //   const url = new this.document.defaultView.URL(this.document.location);
+        //   const searchParams = new this.document.defaultView.URLSearchParams(
+        //     url.search
+        //   );
+        //   const hostOuterWindowID = parseInt(searchParams.get("outerWindowID"));
+        //   if (!hostOuterWindowID) {
+        //     throw new Error("Error: Missing outerWindowID");
+        //   }
+        //   console.log("Setting!", hostOuterWindowID)
+        //   if (hostWindows.has(hostOuterWindowID)) {
+        //     console.log("Found match", hostWindows.get(hostOuterWindowID))
+        //   }
+        //   a11yModes.set(hostOuterWindowID, this.browsingContext);
+
+        // } else {
+        //   hostWindows.set(docShell.outerWindowID, this.browsingContext)
+        //   console.log([...a11yModes.keys()], docShell.outerWindowID);
+        //   if (a11yModes.has(docShell.outerWindowID)) {
+        //     console.log("Found match", a11yModes.get(docShell.outerWindowID))
+        //   }
+        // }
+        break;
+      case "A11YModeContentLoaded":
+        let title = this.document.querySelector("#title");
+        title.textContent = `Hello, a11ymode from ${
+          Services.appinfo.processID
+        }`;
+        break;
+      case "A11YModeContentClicked":
+        this.sendToContent("TreeChanged");
+        break;
+    }
+  }
+  sendToContent(messageType, detail) {
+    let win = this.document.defaultView;
+    let message = Object.assign({ messageType }, { value: detail });
+    let event = new win.CustomEvent("A11YModeChromeToContent", {
+      detail: Cu.cloneInto(message, win),
+    });
+    win.dispatchEvent(event);
+  }
+}
diff --git a/browser/components/a11ymode/A11YModeParent.jsm b/browser/components/a11ymode/A11YModeParent.jsm
new file mode 100644
--- /dev/null
+++ b/browser/components/a11ymode/A11YModeParent.jsm
@@ -0,0 +1,37 @@
+/* vim: set ts=2 sw=2 sts=2 et tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+var EXPORTED_SYMBOLS = ["A11YModeParent"];
+
+const { BrowserWindowTracker } = ChromeUtils.import(
+  "resource:///modules/BrowserWindowTracker.jsm"
+);
+const { E10SUtils } = ChromeUtils.import(
+  "resource://gre/modules/E10SUtils.jsm"
+);
+const { Services } = ChromeUtils.import("resource://gre/modules/Services.jsm");
+const { AppConstants } = ChromeUtils.import(
+  "resource://gre/modules/AppConstants.jsm"
+);
+
+class A11YModeParent extends JSWindowActorParent {
+  receiveMessage(message) {
+    console.log("A11YModeParent::receiveMessage", message);
+    let browser = this.manager.browsingContext.embedderElement;
+    if (!browser) {
+      return; // Can happen sometimes if browser is being destroyed
+    }
+
+    switch (message.name) {
+      case "A11YMode:WindowCreated": {
+        if (browser.hostBrowser) {
+          browser.connectToHost();
+        }
+        break;
+      }
+    }
+  }
+}
diff --git a/browser/components/a11ymode/content/a11ymode.css b/browser/components/a11ymode/content/a11ymode.css
new file mode 100644
--- /dev/null
+++ b/browser/components/a11ymode/content/a11ymode.css
@@ -0,0 +1,14 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+html,
+body,
+#browser-container,
+#browser {
+  width: 100%;
+  height: 100%;
+  margin: 0;
+  padding: 0;
+  overflow: hidden;
+}
diff --git a/browser/components/a11ymode/content/a11ymode.html b/browser/components/a11ymode/content/a11ymode.html
new file mode 100644
--- /dev/null
+++ b/browser/components/a11ymode/content/a11ymode.html
@@ -0,0 +1,20 @@
+<!-- This Source Code Form is subject to the terms of the Mozilla Public
+   - License, v. 2.0. If a copy of the MPL was not distributed with this
+   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
+
+<!DOCTYPE html>
+
+<html width="800" height="600">
+<head>
+  <meta http-equiv="Content-Security-Policy" content="default-src chrome:; img-src data: *; media-src *; object-src 'none'" />
+  <meta content="text/html; charset=UTF-8" http-equiv="content-type" />
+  <meta name="viewport" content="width=device-width; user-scalable=0" />
+  <link rel="stylesheet" href="chrome://global/skin/">
+  <link rel="stylesheet" href="chrome://browser/content/a11ymode/a11ymode.css">
+</head>
+<body>
+  <div id="title"></div>
+  <div id="container"></div>
+  <script src="chrome://browser/content/a11ymode/a11ymode.js"></script>
+</body>
+</html>
diff --git a/browser/components/a11ymode/content/a11ymode.js b/browser/components/a11ymode/content/a11ymode.js
new file mode 100644
--- /dev/null
+++ b/browser/components/a11ymode/content/a11ymode.js
@@ -0,0 +1,26 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+window.addEventListener("DOMContentLoaded", function() {
+  document.dispatchEvent(
+    new CustomEvent("A11YModeContentLoaded", { bubbles: true })
+  );
+});
+
+document.addEventListener("click", function() {
+  document.dispatchEvent(
+    new CustomEvent("A11YModeContentClicked", { bubbles: true })
+  );
+});
+
+window.addEventListener("A11YModeChromeToContent", event => {
+  switch (event.detail.messageType) {
+    case "TreeChanged": {
+      document.querySelector("#container").textContent = Date.now();
+      break;
+    }
+  }
+});
diff --git a/browser/components/a11ymode/content/jar.mn b/browser/components/a11ymode/content/jar.mn
new file mode 100644
--- /dev/null
+++ b/browser/components/a11ymode/content/jar.mn
@@ -0,0 +1,8 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+browser.jar:
+    content/browser/a11ymode/a11ymode.html
+    content/browser/a11ymode/a11ymode.js
+    content/browser/a11ymode/a11ymode.css
diff --git a/browser/components/a11ymode/moz.build b/browser/components/a11ymode/moz.build
new file mode 100644
--- /dev/null
+++ b/browser/components/a11ymode/moz.build
@@ -0,0 +1,12 @@
+# -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+JAR_MANIFESTS += ['content/jar.mn']
+
+FINAL_TARGET_FILES.actors += [
+    'A11YModeChild.jsm',
+    'A11YModeParent.jsm',
+]
diff --git a/browser/components/about/AboutRedirector.cpp b/browser/components/about/AboutRedirector.cpp
--- a/browser/components/about/AboutRedirector.cpp
+++ b/browser/components/about/AboutRedirector.cpp
@@ -111,16 +111,20 @@ static const RedirEntry kRedirMap[] = {
      nsIAboutModule::ALLOW_SCRIPT},
     {"downloads",
      "chrome://browser/content/downloads/contentAreaDownloadsView.xhtml",
      nsIAboutModule::ALLOW_SCRIPT},
     {"reader", "chrome://global/content/reader/aboutReader.html",
      nsIAboutModule::URI_SAFE_FOR_UNTRUSTED_CONTENT |
          nsIAboutModule::ALLOW_SCRIPT | nsIAboutModule::URI_MUST_LOAD_IN_CHILD |
          nsIAboutModule::HIDE_FROM_ABOUTABOUT},
+    {"a11ymode", "chrome://browser/content/a11ymode/a11ymode.html",
+     nsIAboutModule::URI_SAFE_FOR_UNTRUSTED_CONTENT |
+         nsIAboutModule::ALLOW_SCRIPT | nsIAboutModule::URI_MUST_LOAD_IN_CHILD |
+         nsIAboutModule::HIDE_FROM_ABOUTABOUT},
     {"restartrequired", "chrome://browser/content/aboutRestartRequired.xhtml",
      nsIAboutModule::ALLOW_SCRIPT | nsIAboutModule::HIDE_FROM_ABOUTABOUT},
     {"newinstall", "chrome://browser/content/newInstallPage.html",
      nsIAboutModule::URI_MUST_LOAD_IN_CHILD |
          nsIAboutModule::URI_SAFE_FOR_UNTRUSTED_CONTENT |
          nsIAboutModule::ALLOW_SCRIPT | nsIAboutModule::HIDE_FROM_ABOUTABOUT},
     {"protections", "chrome://browser/content/protections.html",
      nsIAboutModule::URI_SAFE_FOR_UNTRUSTED_CONTENT |
diff --git a/browser/components/about/components.conf b/browser/components/about/components.conf
--- a/browser/components/about/components.conf
+++ b/browser/components/about/components.conf
@@ -1,15 +1,16 @@
 # -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
 # vim: set filetype=python:
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 pages = [
+    'a11ymode',
     'blocked',
     'certerror',
     'config',
     'downloads',
     'framecrashed',
     'home',
     'library',
     'logins',
diff --git a/browser/components/moz.build b/browser/components/moz.build
--- a/browser/components/moz.build
+++ b/browser/components/moz.build
@@ -25,16 +25,17 @@ with Files("safebrowsing/**"):
 with Files('controlcenter/**'):
     BUG_COMPONENT = ('Firefox', 'General')
 
 
 DIRS += [
     'about',
     'aboutconfig',
     'aboutlogins',
+    'a11ymode',
     'attribution',
     'contextualidentity',
     'customizableui',
     'dirprovider',
     'doh',
     'downloads',
     'enterprisepolicies',
     'extensions',
diff --git a/browser/themes/shared/urlbar-searchbar.inc.css b/browser/themes/shared/urlbar-searchbar.inc.css
--- a/browser/themes/shared/urlbar-searchbar.inc.css
+++ b/browser/themes/shared/urlbar-searchbar.inc.css
@@ -809,16 +809,29 @@
 }
 #urlbar[cfr-recommendation-state="expanded"] #urlbar-input {
   mask-position-x: calc(var(--cfr-label-width) * -1);
 }
 #urlbar[cfr-recommendation-state="expanded"] #urlbar-input:-moz-locale-dir(rtl) {
   mask-position-x: calc(var(--cfr-label-width));
 }
 
+/* a11y mode icon */
+
+#a11y-mode-button {
+  list-style-image: url(chrome://browser/skin/readerMode.svg);
+  fill: orange;
+  fill-opacity: 1;
+}
+
+#a11y-mode-button[readeractive] {
+  fill: var(--toolbarbutton-icon-fill-attention);
+  fill-opacity: 1;
+}
+
 /* Reader mode icon */
 
 #reader-mode-button {
   list-style-image: url(chrome://browser/skin/readerMode.svg);
 }
 
 #reader-mode-button[readeractive] {
   fill: var(--toolbarbutton-icon-fill-attention);
diff --git a/toolkit/content/widgets/browser-custom-element.js b/toolkit/content/widgets/browser-custom-element.js
--- a/toolkit/content/widgets/browser-custom-element.js
+++ b/toolkit/content/widgets/browser-custom-element.js
@@ -463,18 +463,60 @@
         if (this.isRemoteBrowser) {
           this._documentContentType = aContentType;
         } else {
           this.contentDocument.documentContentType = aContentType;
         }
       }
     }
 
+    createA11YModeBrowser() {
+      if (!this.a11ymodeBrowser) {
+        this.a11ymodeBrowser = document.createXULElement("browser");
+        this.a11ymodeBrowser.classList.add("a11ymode");
+        this.a11ymodeBrowser.setAttribute("remoteType", this.remoteType);
+        this.a11ymodeBrowser.setAttribute("remote", "true");
+        this.a11ymodeBrowser.setAttribute("type", "content");
+        this.a11ymodeBrowser.setAttribute(
+          "contextmenu",
+          this.getAttribute("contextmenu")
+        );
+        this.a11ymodeBrowser.setAttribute(
+          "datetimepicker",
+          this.getAttribute("datetimepicker")
+        );
+        this.a11ymodeBrowser.setAttribute(
+          "selectmenulist",
+          this.getAttribute("selectmenulist")
+        );
+        this.a11ymodeBrowser.setAttribute(
+          "tooltip",
+          this.getAttribute("tooltip")
+        );
+        this.a11ymodeBrowser.setAttribute(
+          "autocompletepopup",
+          this.getAttribute("autocompletepopup")
+        );
+        this.a11ymodeBrowser.setAttribute(
+          "autoscrollpopup",
+          this.getAttribute("autoscrollpopup")
+        );
+        this.a11ymodeBrowser.sameProcessAsFrameLoader = this.frameLoader;
+        this.a11ymodeBrowser.hostBrowser = this;
+      }
+      return this.a11ymodeBrowser;
+    }
+
     set sameProcessAsFrameLoader(val) {
       this._sameProcessAsFrameLoader = Cu.getWeakReference(val);
+      if (this.a11ymodeBrowser) {
+        this.a11ymodeBrowser.sameProcessAsFrameLoader = Cu.getWeakReference(
+          val
+        );
+      }
     }
 
     get sameProcessAsFrameLoader() {
       return (
         this._sameProcessAsFrameLoader && this._sameProcessAsFrameLoader.get()
       );
     }
 
@@ -996,16 +1038,29 @@
         referrerInfo,
         loadFlags,
         postData,
         headers,
       };
       this._wrapURIChangeCall(() =>
         this.webNavigation.loadURI(aURI, loadURIOptions)
       );
+
+      if (this.a11ymodeBrowser) {
+        console.log("loadURI", this.a11ymodeBrowser.webNavigation);
+        // try {
+        //   this.a11ymodeBrowser.loadURI("about:a11ymode", {
+        //     triggeringPrincipal: Services.scriptSecurityManager.getSystemPrincipal(),
+        //   });
+        //   // console.trace();
+        // } catch (ex) {
+        //   console.trace();
+        //   // Cu.reportError(ex);
+        // }
+      }
     }
 
     gotoIndex(aIndex) {
       this._wrapURIChangeCall(() => this.webNavigation.gotoIndex(aIndex));
     }
 
     preserveLayers(preserve) {
       if (!this.isRemoteBrowser) {
@@ -1321,16 +1376,48 @@
       }
 
       if (this.messageManager) {
         this.messageManager.addMessageListener(
           "UnselectedTabHover:Toggle",
           this
         );
       }
+
+      if (this.hostBrowser) {
+        console.log("Created a11ymode");
+
+        let load = () => {
+          this.loadURI(`about:a11ymode`, {
+            triggeringPrincipal: Services.scriptSecurityManager.getSystemPrincipal(),
+          });
+        };
+
+        load();
+        this.hostBrowser.addEventListener("XULFrameLoaderCreated", () => {
+          // load();
+          console.log(
+            "XULFrameLoaderCreated",
+            this.webNavigation,
+            this.isConnected
+          );
+        });
+      }
+    }
+
+    connectToHost() {
+      if (!this.hostBrowser) {
+        return;
+      }
+
+      let hostBC = this.hostBrowser.browsingContext;
+      console.log(hostBC, this.browsingContext, this.documentURI);
+      this.browsingContext.currentWindowGlobal
+        .getActor("A11YMode")
+        .sendAsyncMessage("A11YMode:UpdateBrowsingContext", { browsingContext: hostBC });
     }
 
     /**
      * This is necessary because the destructor doesn't always get called when
      * we are removed from a tabbrowser. This will be explicitly called by tabbrowser.
      */
     destroy() {
       elementsToDestroyOnUnload.delete(this);
