# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  b5bd37a786e351e187510f2ce8ff0cb7486427c0
Bug 1169035 - Debugggin:

diff --git a/devtools/client/shared/test/browser_graphs-07e.js b/devtools/client/shared/test/browser_graphs-07e.js
--- a/devtools/client/shared/test/browser_graphs-07e.js
+++ b/devtools/client/shared/test/browser_graphs-07e.js
@@ -1,12 +1,12 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
-// Tests that selections are drawn onto the canvas.
+// Tests that selections are drawn onto the canvas correctly after zooming.
 
 const TEST_DATA = [{ delta: 112, value: 48 }, { delta: 213, value: 59 }, { delta: 313, value: 60 }, { delta: 413, value: 59 }, { delta: 530, value: 59 }, { delta: 646, value: 58 }, { delta: 747, value: 60 }, { delta: 863, value: 48 }, { delta: 980, value: 37 }, { delta: 1097, value: 30 }, { delta: 1213, value: 29 }, { delta: 1330, value: 23 }, { delta: 1430, value: 10 }, { delta: 1534, value: 17 }, { delta: 1645, value: 20 }, { delta: 1746, value: 22 }, { delta: 1846, value: 39 }, { delta: 1963, value: 26 }, { delta: 2080, value: 27 }, { delta: 2197, value: 35 }, { delta: 2312, value: 47 }, { delta: 2412, value: 53 }, { delta: 2514, value: 60 }, { delta: 2630, value: 37 }, { delta: 2730, value: 36 }, { delta: 2830, value: 37 }, { delta: 2946, value: 36 }, { delta: 3046, value: 40 }, { delta: 3163, value: 47 }, { delta: 3280, value: 41 }, { delta: 3380, value: 35 }, { delta: 3480, value: 27 }, { delta: 3580, value: 39 }, { delta: 3680, value: 42 }, { delta: 3780, value: 49 }, { delta: 3880, value: 55 }, { delta: 3980, value: 60 }, { delta: 4080, value: 60 }, { delta: 4180, value: 60 }];
 let {LineGraphWidget} = Cu.import("resource:///modules/devtools/Graphs.jsm", {});
 let {Promise} = devtools.require("resource://gre/modules/Promise.jsm");
 let CURRENT_ZOOM = 1;
 
 add_task(function*() {
   yield promiseTab("about:blank");
@@ -18,23 +18,23 @@ function* performTest() {
   let [host, win, doc] = yield createHost();
   let graph = new LineGraphWidget(doc.body, "fps");
   yield graph.once("ready");
   graph.setData(TEST_DATA);
 
   info("Testing with normal zoom.");
   testGraph(graph);
 
-  info("Testing while zoomed out.");
-  setZoom(host.frame, .5);
-  testGraph(graph);
+  // info("Testing while zoomed out.");
+  // setZoom(host.frame, .5);
+  // testGraph(graph);
 
-  info("Testing while zoomed in.");
-  setZoom(host.frame, 2);
-  testGraph(graph);
+  // info("Testing while zoomed in.");
+  // setZoom(host.frame, 2);
+  // testGraph(graph);
 
   yield graph.destroy();
   host.destroy();
 }
 
 function testGraph(graph) {
   graph.dropSelection();
 
diff --git a/devtools/client/shared/widgets/Graphs.jsm b/devtools/client/shared/widgets/Graphs.jsm
--- a/devtools/client/shared/widgets/Graphs.jsm
+++ b/devtools/client/shared/widgets/Graphs.jsm
@@ -7,16 +7,17 @@ const Cu = Components.utils;
 const Ci = Components.interfaces;
 
 Cu.import("resource:///modules/devtools/ViewHelpers.jsm");
 const promise = Cu.import("resource://gre/modules/Promise.jsm", {}).Promise;
 const {Task} = Cu.import("resource://gre/modules/Task.jsm", {});
 const {EventEmitter} = Cu.import("resource://gre/modules/devtools/event-emitter.js", {});
 const {DevToolsWorker} = Cu.import("resource://gre/modules/devtools/shared/worker.js", {});
 const {LayoutHelpers} = Cu.import("resource://gre/modules/devtools/LayoutHelpers.jsm", {});
+    const {console} = Components.utils.import("resource://gre/modules/devtools/Console.jsm", {});
 
 this.EXPORTED_SYMBOLS = [
   "GraphCursor",
   "GraphArea",
   "GraphAreaDragger",
   "GraphAreaResizer",
   "AbstractCanvasGraph",
   "LineGraphWidget",
@@ -155,16 +156,19 @@ this.AbstractCanvasGraph = function(pare
   this._ready = promise.defer();
 
   this._uid = "canvas-graph-" + Date.now();
   this._renderTargets = new Map();
 
   AbstractCanvasGraph.createIframe(GRAPH_SRC, parent, iframe => {
     this._iframe = iframe;
     this._window = iframe.contentWindow;
+    this._window.addEventListener("resize", (e) => {
+      this._resized = true;
+    });
     this._topWindow = this._window.top;
     this._document = iframe.contentDocument;
     this._pixelRatio = sharpness || this._window.devicePixelRatio;
 
     let container = this._container = this._document.getElementById("graph-container");
     container.className = name + "-widget-container graph-widget-container";
 
     let canvas = this._canvas = this._document.getElementById("graph-canvas");
@@ -954,32 +958,44 @@ AbstractCanvasGraph.prototype = {
   /**
    * Get the bounds of the canvas while traversing frame boundaries.
    * @return object {top,left,width,height}
    */
   _getCanvasBoundsRelativeToTopWindow: function() {
     let utils = this._window.QueryInterface(Ci.nsIInterfaceRequestor)
                             .getInterface(Ci.nsIDOMWindowUtils);
 
+    if (false) {
+      this._resized = false;
+      // flush layout
+      this._canvas.offsetTop;
+      let { left, top, width, height } = this._canvas.getBoxQuads({
+        relativeTo: this._topWindow.document
+      })[0].bounds;
+                            console.log("HERE", left, top, width, height);
+    return { left, top, width, height };
+    }
+
+
+    let zoom = LayoutHelpers.getCurrentZoom(this._canvas);
     let {left,top,width,height} = utils.getBoundsWithoutFlushing(this._canvas);
+    left *= zoom;
+    top *= zoom;
+    width *= zoom;
+    height *= zoom;
     let frame = this._window.frameElement;
 
     while (frame) {
       let bounds = utils.getBoundsWithoutFlushing(frame);
-      left += bounds.left;
-      top += bounds.top;
+      left += (bounds.left * zoom);
+      top += (bounds.top * zoom);
       frame = frame.contentWindow.parent.frameElement;
     }
 
-    return {
-      left: left,
-      top: top,
-      width: width,
-      height: height
-    }
+    return { left, top, width, height };
   },
 
   /**
    * Given a MouseEvent, make it relative to this._canvas.
    * @return object {mouseX,mouseY}
    */
   _getRelativeEventCoordinates: function(e) {
     // For ease of testing, testX and testY can be passed in as the event
@@ -998,19 +1014,19 @@ AbstractCanvasGraph.prototype = {
 
     // Don't allow the event coordinates to be bigger than the canvas
     // or less than 0.
     let mouseX = Math.max(0, Math.min(x, width)) * this._pixelRatio;
     let mouseY = Math.max(0, Math.min(x, height)) * this._pixelRatio;
 
     // The coordinates need to be modified with the current zoom level
     // to prevent them from being wrong.
-    let zoom = LayoutHelpers.getCurrentZoom(this._canvas);
-    mouseX /= zoom;
-    mouseY /= zoom;
+    // let zoom = LayoutHelpers.getCurrentZoom(this._canvas);
+    // mouseX /= zoom;
+    // mouseY /= zoom;
 
     return {mouseX,mouseY};
   },
 
   /**
    * Listener for the "mousemove" event on the graph's container.
    */
   _onMouseMove: function(e) {
