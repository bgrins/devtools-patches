# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  2572bf0929df26a694f58cc8765da73abea0f655
Bug 1260235 - Only accept ctrl+f in computed and rule view if it happened in the relevant container;r=gl

diff --git a/devtools/client/inspector/computed/computed.js b/devtools/client/inspector/computed/computed.js
--- a/devtools/client/inspector/computed/computed.js
+++ b/devtools/client/inspector/computed/computed.js
@@ -497,21 +497,24 @@ CssComputedView.prototype = {
       return deferred.promise;
     }).then(null, (err) => console.error(err));
   },
 
   /**
    * Handle the keypress event in the computed view.
    */
   _onKeypress: function(event) {
+    if (!event.target.closest("#sidebar-panel-computedview")) {
+      return;
+    }
     let isOSX = Services.appinfo.OS === "Darwin";
 
     if (((isOSX && event.metaKey && !event.ctrlKey && !event.altKey) ||
         (!isOSX && event.ctrlKey && !event.metaKey && !event.altKey)) &&
-        event.code === "KeyF") {
+        event.key === "f") {
       this.searchField.focus();
       event.preventDefault();
     }
   },
 
   /**
    * Set the filter style search value.
    * @param {String} value
diff --git a/devtools/client/inspector/computed/test/browser_computed_search-filter.js b/devtools/client/inspector/computed/test/browser_computed_search-filter.js
--- a/devtools/client/inspector/computed/test/browser_computed_search-filter.js
+++ b/devtools/client/inspector/computed/test/browser_computed_search-filter.js
@@ -30,19 +30,28 @@ function* testToggleDefaultStyles(inspec
   checkbox.click();
   yield onRefreshed;
 }
 
 function* testAddTextInFilter(inspector, computedView) {
   info("setting filter text to \"color\"");
   let searchField = computedView.searchField;
   let onRefreshed = inspector.once("computed-view-refreshed");
-  searchField.focus();
+  let win = computedView.styleWindow;
 
-  let win = computedView.styleWindow;
+  // First check to make sure that accel + F doesn't focus search if the container
+  // isn't focused
+  inspector.panelWin.focus();
+  EventUtils.synthesizeKey("f", { accelKey: true });
+  isnot(inspector.panelDoc.activeElement, searchField, "Search field isn't focused");
+
+  computedView.element.focus();
+  EventUtils.synthesizeKey("f", { accelKey: true });
+  is(inspector.panelDoc.activeElement, searchField, "Search field is focused");
+
   synthesizeKeys("color", win);
   yield onRefreshed;
 
   info("check that the correct properties are visible");
 
   let propertyViews = computedView.propertyViews;
   propertyViews.forEach(function(propView) {
     let name = propView.name;
diff --git a/devtools/client/inspector/rules/rules.js b/devtools/client/inspector/rules/rules.js
--- a/devtools/client/inspector/rules/rules.js
+++ b/devtools/client/inspector/rules/rules.js
@@ -1494,21 +1494,32 @@ CssRuleView.prototype = {
       event.preventDefault();
     }
   },
 
   /**
    * Handle the keypress event in the rule view.
    */
   _onKeypress: function(event) {
+    console.log("_onKeypress", event.key, event.target, this.styleDocument.activeElement,
+      event.target.closest("#sidebar-panel-ruleview"),
+      event.metaKey, !event.ctrlKey, !event.altKey);
+
+    if (!event.target.closest("#sidebar-panel-ruleview")) {
+      console.log("Returning ", event, Services.focus.focusedElement, event.target.closest("#sidebar-panel-ruleview"))
+      return;
+    }
+
     let isOSX = Services.appinfo.OS === "Darwin";
+    console.log("about to focus: ", event, event.key, (isOSX && event.metaKey && !event.ctrlKey && !event.altKey))
 
     if (((isOSX && event.metaKey && !event.ctrlKey && !event.altKey) ||
         (!isOSX && event.ctrlKey && !event.metaKey && !event.altKey)) &&
-        event.code === "KeyF") {
+        event.key === "f") {
+      console.log("FOCUSING");
       this.searchField.focus();
       event.preventDefault();
     }
   }
 };
 
 /**
  * Helper functions
diff --git a/devtools/client/inspector/rules/test/head.js b/devtools/client/inspector/rules/test/head.js
--- a/devtools/client/inspector/rules/test/head.js
+++ b/devtools/client/inspector/rules/test/head.js
@@ -835,17 +835,31 @@ var createNewRuleViewProperty = Task.asy
  *        The filter search value
  * @return a promise that resolves when the rule-view is filtered for the
  * search term
  */
 var setSearchFilter = Task.async(function*(view, searchValue) {
   info("Setting filter text to \"" + searchValue + "\"");
   let win = view.styleWindow;
   let searchField = view.searchField;
+
+  // First check to make sure that accel + F doesn't focus search if the container
+  // isn't focused
+  win.focus();
+  EventUtils.synthesizeKey("f", { accelKey: true });
+  isnot(win.document.activeElement, searchField, "Search field isn't focused");
+
+  // So, it's really hard to actually focus anything in the rule view since
+  // document.activeElement isn't getting updated on osx when calling .focus()
+  // on elements.  So we focus the search box and then press accel + f, but
+  // it's just making sure we don't un-focus the focused box
   searchField.focus();
+  EventUtils.synthesizeKey("F", { accelKey: true });
+  is(win.document.activeElement, searchField, "Search field is focused");
+
   synthesizeKeys(searchValue, win);
   yield view.inspector.once("ruleview-filtered");
 });
 
 /**
  * Reload the current page and wait for the inspector to be initialized after
  * the navigation
  *
