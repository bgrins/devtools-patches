# HG changeset patch
# User Tomasz Ko≈Çodziejski <tkolodziejski@mozilla.com>

Bug 1094622 - Deleting node in inspector now selects previous sibling and not parent. r=bgrins

---
 browser/devtools/markupview/markup-view.js         |  4 ++-
 .../test/browser_markupview_tag_edit_04.js         | 35 ++++++++++++++--------
 browser/devtools/markupview/test/head.js           |  2 +-
 3 files changed, 27 insertions(+), 14 deletions(-)

diff --git a/browser/devtools/markupview/markup-view.js b/browser/devtools/markupview/markup-view.js
index 94fc46a..98ace49 100644
--- a/browser/devtools/markupview/markup-view.js
+++ b/browser/devtools/markupview/markup-view.js
@@ -519,17 +519,19 @@ MarkupView.prototype = {
     let container = this.getContainer(aNode);
 
     // Retain the node so we can undo this...
     this.walker.retainNode(aNode).then(() => {
       let parent = aNode.parentNode();
       let sibling = null;
       this.undo.do(() => {
         if (container.selected) {
-          this.navigate(this.getContainer(parent));
+          this.walker.previousSibling(aNode).then(previousSibling => {
+            this.navigate(this.getContainer(previousSibling || parent));
+          });
         }
         this.walker.removeNode(aNode).then(nextSibling => {
           sibling = nextSibling;
         });
       }, () => {
         this.walker.insertBefore(aNode, parent, sibling);
       });
     }).then(null, console.error);
diff --git a/browser/devtools/markupview/test/browser_markupview_tag_edit_04.js b/browser/devtools/markupview/test/browser_markupview_tag_edit_04.js
index 2fad76e..8aaefdf 100644
--- a/browser/devtools/markupview/test/browser_markupview_tag_edit_04.js
+++ b/browser/devtools/markupview/test/browser_markupview_tag_edit_04.js
@@ -1,30 +1,41 @@
 /* vim: set ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
  http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
-// Tests that a node can be deleted from the markup-view with the delete key
+// Tests that a node can be deleted from the markup-view with the delete key.
+// Also checks that after deletion the previous sibling is highlighted.
 
-const TEST_URL = "data:text/html,<div id='delete-me'></div>";
+const TEST_URL = "data:text/html,<div id='parent'><div id='first'></div><div id='second'></div><div id='third'></div></div>";
 
-let test = asyncTest(function*() {
-  let {toolbox, inspector} = yield addTab(TEST_URL).then(openInspector);
-
-  info("Selecting the test node by clicking on it to make sure it receives focus");
-  let node = content.document.querySelector("#delete-me");
-  yield clickContainer("#delete-me", inspector);
+function* deleteAndAssert(inspector, nodeSelector, focusedNodeSelector) {
+  yield selectNode(nodeSelector, inspector);
+  yield clickContainer(nodeSelector, inspector);
 
-  info("Deleting the element with the keyboard");
+  info("Deleting the element \"" + nodeSelector + "\" with the keyboard");
   let mutated = inspector.once("markupmutation");
   EventUtils.sendKey("delete", inspector.panelWin);
-  yield mutated;
+
+  yield Promise.all([mutated, inspector.once("inspector-updated")]);
+
+  is(inspector.selection.node, content.document.querySelector(focusedNodeSelector),
+    "Right node (previousSibling or parent) should be selected after a node gets deleted.");
 
   info("Checking that it's gone, baby gone!");
-  ok(!content.document.querySelector("#delete-me"), "The test node does not exist");
+  ok(!content.document.querySelector(nodeSelector), "The test node does not exist");
 
   yield undoChange(inspector);
-  ok(content.document.querySelector("#delete-me"), "The test node is back!");
+  ok(content.document.querySelector(nodeSelector), "The test node is back!");
+}
+
+let test = asyncTest(function*() {
+  let {inspector} = yield addTab(TEST_URL).then(openInspector);
+
+  info("Selecting the test node by clicking on it to make sure it receives focus");
+
+  yield deleteAndAssert(inspector, "#second", "#first");
+  yield deleteAndAssert(inspector, "#first", "#parent");
 
   yield inspector.once("inspector-updated");
 });
diff --git a/browser/devtools/markupview/test/head.js b/browser/devtools/markupview/test/head.js
index 8ea892f..b16cb6b 100644
--- a/browser/devtools/markupview/test/head.js
+++ b/browser/devtools/markupview/test/head.js
@@ -247,17 +247,17 @@ function waitForChildrenUpdated({markup}) {
  * @return {Promise} Resolves when the node has been selected.
  */
 let clickContainer = Task.async(function*(selector, inspector) {
   info("Clicking on the markup-container for node " + selector);
 
   let nodeFront = yield getNodeFront(selector, inspector);
   let container = getContainerForNodeFront(nodeFront, inspector);
 
-  let updated = inspector.once("inspector-updated");
+  let updated = container.selected ? promise.resolve() : inspector.once("inspector-updated");
   EventUtils.synthesizeMouseAtCenter(container.tagLine, {type: "mousedown"},
     inspector.markup.doc.defaultView);
   EventUtils.synthesizeMouseAtCenter(container.tagLine, {type: "mouseup"},
     inspector.markup.doc.defaultView);
   return updated;
 });
 
 /**

