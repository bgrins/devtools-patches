# HG changeset patch
# User Lin Clark <lclark@mozilla.com>
Bug 1292322 - New console frontend: Clean up React warnings. r=bgrins


diff --git a/devtools/client/webconsole/new-console-output/components/filter-bar.js b/devtools/client/webconsole/new-console-output/components/filter-bar.js
index dee0cd8..4e3d054 100644
--- a/devtools/client/webconsole/new-console-output/components/filter-bar.js
+++ b/devtools/client/webconsole/new-console-output/components/filter-bar.js
@@ -122,17 +122,17 @@ const FilterBar = createClass({
             onClick: this.onClickFiltersClear
           }, "Remove filters")
         )
       );
     }
 
     return (
       dom.div({className: "webconsole-filteringbar-wrapper"},
-        children
+        ...children
       )
     );
   }
 });
 
 function mapStateToProps(state) {
   return {
     filter: getAllFilters(state),
diff --git a/devtools/client/webconsole/new-console-output/components/grip-message-body.js b/devtools/client/webconsole/new-console-output/components/grip-message-body.js
index b20ce47..67cc443 100644
--- a/devtools/client/webconsole/new-console-output/components/grip-message-body.js
+++ b/devtools/client/webconsole/new-console-output/components/grip-message-body.js
@@ -20,17 +20,21 @@ const {
 const { createFactories } = require("devtools/client/shared/components/reps/rep-utils");
 const { Rep } = createFactories(require("devtools/client/shared/components/reps/rep"));
 const VariablesViewLink = createFactory(require("devtools/client/webconsole/new-console-output/components/variables-view-link").VariablesViewLink);
 const { Grip } = require("devtools/client/shared/components/reps/grip");
 
 GripMessageBody.displayName = "GripMessageBody";
 
 GripMessageBody.propTypes = {
-  grip: PropTypes.object.isRequired,
+  grip: PropTypes.oneOfType([
+    PropTypes.string,
+    PropTypes.number,
+    PropTypes.object,
+  ]).isRequired,
 };
 
 function GripMessageBody(props) {
   return Rep({
     object: props.grip,
     objectLink: VariablesViewLink,
     defaultRep: Grip
   });
diff --git a/devtools/client/webconsole/new-console-output/components/message-types/console-api-call.js b/devtools/client/webconsole/new-console-output/components/message-types/console-api-call.js
index 38a1f80..61c8a0d 100644
--- a/devtools/client/webconsole/new-console-output/components/message-types/console-api-call.js
+++ b/devtools/client/webconsole/new-console-output/components/message-types/console-api-call.js
@@ -25,24 +25,19 @@ ConsoleApiCall.propTypes = {
 };
 
 function ConsoleApiCall(props) {
   const { message, onViewSourceInDebugger } = props;
   const {source, level, stacktrace, type} = message;
 
   let messageBody;
   if (type === "trace") {
-    messageBody = [
-      dom.span({className: "cm-variable"}, "console"),
-      ".",
-      dom.span({className: "cm-property"}, "trace"),
-      "():"
-    ];
+    messageBody = dom.span({className: "cm-variable"}, "console.trace()");
   } else if (message.parameters) {
-    messageBody = message.parameters.map((grip) => GripMessageBody({grip}));
+    messageBody = message.parameters.map((grip, key) => GripMessageBody({grip, key}));
   } else {
     messageBody = message.messageText;
   }
 
   const icon = MessageIcon({level});
   const repeat = MessageRepeat({repeat: message.repeat});
 
   let attachment = "";
diff --git a/devtools/client/webconsole/new-console-output/test/components/console-api-call.test.js b/devtools/client/webconsole/new-console-output/test/components/console-api-call.test.js
index 0eba9f9..9eec5a5 100644
--- a/devtools/client/webconsole/new-console-output/test/components/console-api-call.test.js
+++ b/devtools/client/webconsole/new-console-output/test/components/console-api-call.test.js
@@ -1,48 +1,51 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 "use strict";
 
-const { stubConsoleMessages } = require("devtools/client/webconsole/new-console-output/test/fixtures/stubs");
-const { ConsoleApiCall } = require("devtools/client/webconsole/new-console-output/components/message-types/console-api-call");
+// Test utils.
 const expect = require("expect");
+const { renderComponent } = require("devtools/client/webconsole/new-console-output/test/helpers");
 
-const {
-  renderComponent
-} = require("devtools/client/webconsole/new-console-output/test/helpers");
+// Components under test.
+const { ConsoleApiCall } = require("devtools/client/webconsole/new-console-output/components/message-types/console-api-call");
+
+// Test fakes.
+const { stubConsoleMessages } = require("devtools/client/webconsole/new-console-output/test/fixtures/stubs");
+const onViewSourceInDebugger = () => {};
 
 describe("ConsoleAPICall component:", () => {
   describe("console.log", () => {
     it("renders string grips", () => {
       const message = stubConsoleMessages.get("console.log('foobar', 'test')");
-      const rendered = renderComponent(ConsoleApiCall, {message});
+      const rendered = renderComponent(ConsoleApiCall, {message, onViewSourceInDebugger});
 
       const messageBody = getMessageBody(rendered);
       // @TODO should output: foobar test
       expect(messageBody.textContent).toBe("\"foobar\"\"test\"");
 
       const consoleStringNodes = messageBody.querySelectorAll(".objectBox-string");
       expect(consoleStringNodes.length).toBe(2);
     });
     it("renders repeat node", () => {
       const message =
         stubConsoleMessages.get("console.log('foobar', 'test')")
         .set("repeat", 107);
-      const rendered = renderComponent(ConsoleApiCall, {message});
+      const rendered = renderComponent(ConsoleApiCall, {message, onViewSourceInDebugger});
 
       const repeatNode = getRepeatNode(rendered);
       expect(repeatNode[0].textContent).toBe("107");
     });
   });
 
   describe("console.count", () => {
     it("renders", () => {
       const message = stubConsoleMessages.get("console.count('bar')");
-      const rendered = renderComponent(ConsoleApiCall, {message});
+      const rendered = renderComponent(ConsoleApiCall, {message, onViewSourceInDebugger});
 
       const messageBody = getMessageBody(rendered);
       expect(messageBody.textContent).toBe(message.messageText);
     });
   });
 });
 
 function getMessageBody(rendered) {
diff --git a/devtools/client/webconsole/new-console-output/test/components/message-container.test.js b/devtools/client/webconsole/new-console-output/test/components/message-container.test.js
index c816edb..467421f 100644
--- a/devtools/client/webconsole/new-console-output/test/components/message-container.test.js
+++ b/devtools/client/webconsole/new-console-output/test/components/message-container.test.js
@@ -1,30 +1,33 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 "use strict";
 
-const { stubConsoleMessages } = require("devtools/client/webconsole/new-console-output/test/fixtures/stubs");
+// Test utils.
+const expect = require("expect");
+const {
+  renderComponent,
+  shallowRenderComponent
+} = require("devtools/client/webconsole/new-console-output/test/helpers");
 
+// Components under test.
 const { MessageContainer } = require("devtools/client/webconsole/new-console-output/components/message-container");
 const { ConsoleApiCall } = require("devtools/client/webconsole/new-console-output/components/message-types/console-api-call");
 const { EvaluationResult } = require("devtools/client/webconsole/new-console-output/components/message-types/evaluation-result");
 const { PageError } = require("devtools/client/webconsole/new-console-output/components/message-types/page-error");
 
-const expect = require("expect");
-
-const {
-  renderComponent,
-  shallowRenderComponent
-} = require("devtools/client/webconsole/new-console-output/test/helpers");
+// Test fakes.
+const { stubConsoleMessages } = require("devtools/client/webconsole/new-console-output/test/fixtures/stubs");
+const onViewSourceInDebugger = () => {};
 
 describe("MessageContainer component:", () => {
   it("pipes data to children as expected", () => {
     const message = stubConsoleMessages.get("console.log('foobar', 'test')");
-    const rendered = renderComponent(MessageContainer, {message});
+    const rendered = renderComponent(MessageContainer, {message, onViewSourceInDebugger});
 
     expect(rendered.textContent.includes("foobar")).toBe(true);
   });
   it("picks correct child component", () => {
     const messageTypes = [
       {
         component: ConsoleApiCall,
         message: stubConsoleMessages.get("console.log('foobar', 'test')")
@@ -35,13 +38,17 @@ describe("MessageContainer component:", () => {
       },
       {
         component: PageError,
         message: stubConsoleMessages.get("ReferenceError")
       }
     ];
 
     messageTypes.forEach(info => {
-      const rendered = shallowRenderComponent(MessageContainer, {message: info.message});
-      expect(rendered.type).toBe(info.component);
+      const { component, message } = info;
+      const rendered = shallowRenderComponent(MessageContainer, {
+        message,
+        onViewSourceInDebugger,
+      });
+      expect(rendered.type).toBe(component);
     });
   });
 });
