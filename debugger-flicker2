# HG changeset patch
# Parent 1fcd38e5b8553af4d232767a3bf83a4fb4fa6c62
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 1018955: Get rid of pause/resume button flicker when setting breakpoint;r=fitzgen

diff --git a/browser/devtools/debugger/debugger-controller.js b/browser/devtools/debugger/debugger-controller.js
--- a/browser/devtools/debugger/debugger-controller.js
+++ b/browser/devtools/debugger/debugger-controller.js
@@ -425,16 +425,17 @@ let DebuggerController = {
 };
 
 /**
  * ThreadState keeps the UI up to date with the state of the
  * thread (paused/attached/etc.).
  */
 function ThreadState() {
   this._update = this._update.bind(this);
+  this.interruptedByResumeButton = false;
 }
 
 ThreadState.prototype = {
   get activeThread() DebuggerController.activeThread,
 
   /**
    * Connect to the current thread client.
    */
@@ -467,24 +468,26 @@ ThreadState.prototype = {
     }
     dumpn("Handling tab navigation in the ThreadState");
     this._update();
   },
 
   /**
    * Update the UI after a thread state change.
    */
-  _update: function(aEvent) {
-    // Ignore "interrupted" events, which are generated by the slow script
-    // dialog and internal events such as setting breakpoints, to avoid UI
-    // flicker.
-    if (aEvent == "interrupted") {
+  _update: function(aEvent, aPacket) {
+    // Ignore "interrupted" events, to avoid UI flicker. These are generated
+    // by the slow script dialog and internal events such as setting
+    // breakpoints. Pressing the resume button does need to be shown, though.
+    if (aEvent == "paused" && aPacket.why.type == "interrupted" &&
+        !this.interruptedByResumeButton) {
       return;
     }
 
+    this.interruptedByResumeButton = false;
     DebuggerView.Toolbar.toggleResumeButtonState(this.activeThread.state);
 
     if (gTarget && (aEvent == "paused" || aEvent == "resumed")) {
       gTarget.emit("thread-" + aEvent);
     }
   }
 };
 
diff --git a/browser/devtools/debugger/debugger-toolbar.js b/browser/devtools/debugger/debugger-toolbar.js
--- a/browser/devtools/debugger/debugger-toolbar.js
+++ b/browser/devtools/debugger/debugger-toolbar.js
@@ -124,16 +124,17 @@ ToolbarView.prototype = {
       return;
     }
 
     if (DebuggerController.activeThread.paused) {
       let warn = DebuggerController._ensureResumptionOrder;
       DebuggerController.StackFrames.currentFrameDepth = -1;
       DebuggerController.activeThread.resume(warn);
     } else {
+      DebuggerController.ThreadState.interruptedByResumeButton = true;
       DebuggerController.activeThread.interrupt();
     }
   },
 
   /**
    * Listener handling the step over button click event.
    */
   _onStepOverPressed: function() {
diff --git a/browser/devtools/debugger/test/browser.ini b/browser/devtools/debugger/test/browser.ini
--- a/browser/devtools/debugger/test/browser.ini
+++ b/browser/devtools/debugger/test/browser.ini
@@ -151,16 +151,17 @@ skip-if = true # Bug 933950 (leaky test)
 [browser_dbg_event-listeners.js]
 [browser_dbg_file-reload.js]
 [browser_dbg_function-display-name.js]
 [browser_dbg_global-method-override.js]
 [browser_dbg_globalactor.js]
 [browser_dbg_host-layout.js]
 [browser_dbg_iframes.js]
 [browser_dbg_instruments-pane-collapse.js]
+[browser_dbg_interrupts.js]
 [browser_dbg_listaddons.js]
 [browser_dbg_listtabs-01.js]
 [browser_dbg_listtabs-02.js]
 [browser_dbg_listtabs-03.js]
 [browser_dbg_location-changes-01-simple.js]
 [browser_dbg_location-changes-02-blank.js]
 [browser_dbg_location-changes-03-new.js]
 [browser_dbg_location-changes-04-breakpoint.js]
diff --git a/browser/devtools/debugger/test/browser_dbg_interrupts.js b/browser/devtools/debugger/test/browser_dbg_interrupts.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/debugger/test/browser_dbg_interrupts.js
@@ -0,0 +1,86 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Test if the breakpoints toggle button works as advertised.
+ */
+
+const TAB_URL = EXAMPLE_URL + "doc_script-switching-01.html";
+
+function test() {
+  let gTab, gDebuggee, gPanel, gDebugger;
+  let gSources, gBreakpoints, gTarget, gResumeButton, gResumeKey, gThreadClient;
+
+  initDebugger(TAB_URL).then(([aTab, aDebuggee, aPanel]) => {
+    gTab = aTab;
+    gDebuggee = aDebuggee;
+    gPanel = aPanel;
+    gDebugger = gPanel.panelWin;
+    gSources = gDebugger.DebuggerView.Sources;
+    gBreakpoints = gDebugger.DebuggerController.Breakpoints;
+    gTarget = gDebugger.gTarget;
+    gThreadClient = gDebugger.gThreadClient;
+    gResumeButton = gDebugger.document.getElementById("resume");
+    gResumeKey = gDebugger.document.getElementById("resumeKey");
+
+    waitForSourceShown(gPanel, "-01.js")
+      .then(() => { gTarget.on("thread-paused", failOnPause); })
+      .then(addBreakpoints)
+      .then(() => { gTarget.off("thread-paused", failOnPause); })
+      .then(testResumeButton)
+      .then(testResumeKeyboard)
+      .then(() => closeDebuggerAndFinish(gPanel))
+      .then(null, aError => {
+        ok(false, "Got an error: " + aError.message + "\n" + aError.stack);
+      });
+  });
+
+  function failOnPause() {
+    ok (false, "A pause was sent, but it shouldn't have been");
+  }
+
+  function addBreakpoints() {
+    return promise.resolve(null)
+      .then(() => gPanel.addBreakpoint({ url: gSources.values[0], line: 5 }))
+      .then(() => gPanel.addBreakpoint({ url: gSources.values[1], line: 6 }))
+      .then(() => gPanel.addBreakpoint({ url: gSources.values[1], line: 7 }))
+      .then(() => ensureThreadClientState(gPanel, "resumed"));
+  }
+
+  function resume() {
+    let onceResumed = gTarget.once("thread-resumed");
+    gThreadClient.resume();
+    return onceResumed;
+  }
+
+  function testResumeButton() {
+    info ("Pressing the resume button, expecting a thread-paused");
+
+    ok (!gResumeButton.hasAttribute("checked"), "Resume button is not checked");
+    let oncePaused = gTarget.once("thread-paused");
+    EventUtils.sendMouseEvent({ type: "mousedown" }, gResumeButton, gDebugger);
+
+    return oncePaused
+      .then(() => {
+        is (gResumeButton.getAttribute("checked"), "true", "Resume button is checked");
+      })
+      .then(() => gThreadClient.resume())
+      .then(() => ensureThreadClientState(gPanel, "resumed"))
+  }
+
+  function testResumeKeyboard() {
+    let key = gResumeKey.getAttribute("keycode");
+    info ("Triggering a pause with keyboard (" + key +  "), expecting a thread-paused");
+
+    ok (!gResumeButton.hasAttribute("checked"), "Resume button is not checked");
+    let oncePaused = gTarget.once("thread-paused");
+    EventUtils.synthesizeKey(key, { }, gDebugger);
+
+    return oncePaused
+      .then(() => {
+        is (gResumeButton.getAttribute("checked"), "true", "Resume button is checked");
+      })
+      .then(() => gThreadClient.resume())
+      .then(() => ensureThreadClientState(gPanel, "resumed"))
+  }
+}
