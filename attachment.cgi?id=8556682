# HG changeset patch
# User Gabriel Luong <gabriel.luong@gmail.com>
# Parent  2754c15df05f1a56198c5cfc351d963e95899c8e

diff --git a/browser/devtools/styleinspector/cssruleview.xhtml b/browser/devtools/styleinspector/cssruleview.xhtml
--- a/browser/devtools/styleinspector/cssruleview.xhtml
+++ b/browser/devtools/styleinspector/cssruleview.xhtml
@@ -51,14 +51,29 @@
       <!--
       templateRoot sits at the top of the window. For data it needs an instance of CssRuleView.
       -->
       <div id="templateRoot">
         <xul:hbox class="devtools-toolbar" flex="1" align="center">
           <xul:textbox class="devtools-searchinput" type="search" save="${searchField}"
                        placeholder="&userStylesSearch;" flex="1"
                        oncommand="${filterChanged}"/>
+          <xul:toolbarbutton id="pseudo-class-pane-toggle"
+                             class="devtools-toolbarbutton command-button command-button-invertable"
+                             tooltiptext=""
+                             oncommand="${togglePseudoClassPane}"/>
+        </xul:hbox>
+        <xul:hbox id="pseudo-class-pane" class="devtools-toolbar" flex="1" align="center" style="width: 100%; display: none; text-align: center;">
+          <xul:checkbox save="${toggleHoverClass}"
+                        oncommand="ruleview.inspector.togglePseudoClass(':hover');" checked="false"
+                        label="Hover"/>
+          <xul:checkbox save="${toggleActiveClass}"
+                        oncommand="ruleview.inspector.togglePseudoClass(':active');" checked="false"
+                        label="Active"/>
+          <xul:checkbox save="${toggleFocusClass}"
+                        oncommand="ruleview.inspector.togglePseudoClass(':focus');" checked="false"
+                        label="Focus"/>
         </xul:hbox>
       </div>
     </div>
 
   </body>
 </html>
diff --git a/browser/devtools/styleinspector/rule-view.js b/browser/devtools/styleinspector/rule-view.js
--- a/browser/devtools/styleinspector/rule-view.js
+++ b/browser/devtools/styleinspector/rule-view.js
@@ -1201,16 +1201,20 @@
   _viewedElement: null,
 
   // Used for cancelling timeouts in the style filter.
   _filterChangedTimeout: null,
 
   // The search filter
   searchField: null,
 
+  toggleHoverClass: null,
+  toggleActiveClass: null,
+  toggleFocusClass: null,
+
   /**
    * Build the context menu.
    */
   _buildContextMenu: function() {
     let doc = this.doc.defaultView.parent.document;
 
     this._contextmenu = doc.createElementNS(XUL_NS, "menupopup");
     this._contextmenu.addEventListener("popupshowing", this._contextMenuUpdate);
@@ -1659,16 +1663,39 @@
       }
     }
 
     return promise.all(promises).then(() => {
       return this._populate(true);
     });
   },
 
+  refreshPseudoClassPanel: function() {
+    this.toggleHoverClass.checked = false;
+    this.toggleActiveClass.checked = false;
+    this.toggleFocusClass.checked = false;
+
+    for (let pseudoClassLock of this._elementStyle.element.pseudoClassLocks) {
+      switch (pseudoClassLock) {
+        case ":hover": {
+          this.toggleHoverClass.checked = true;
+          break;
+        }
+        case ":active": {
+          this.toggleActiveClass.checked = true;
+          break;
+        }
+        case ":focus": {
+          this.toggleFocusClass.checked = true;
+          break;
+        }
+      }
+    }
+  },
+
   /**
    * Called when the user enters a search term.
    *
    * @param {Event} aEvent the DOM Event object.
    */
   filterChanged: function() {
     if (this._filterChangedTimeout) {
       clearTimeout(this._filterChangedTimeout);
@@ -1960,16 +1987,29 @@
    * Clear all search filter highlights in the panel.
    */
   clearHighlight: function() {
     for (let element of this._highlightedElements) {
       element.removeAttribute("selected");
     }
 
     this._highlightedElements = [];
+  },
+
+  togglePseudoClassPane: function() {
+    let pane = this.doc.getElementById("pseudo-class-pane");
+    let isOpen = pane.getAttribute("open");
+
+    if (isOpen) {
+      pane.removeAttribute("open");
+      pane.style.display = "none";
+    } else {
+      pane.setAttribute("open", "true");
+      pane.style.display = "block";
+    }
   }
 };
 
 /**
  * Create a RuleEditor.
  *
  * @param {CssRuleView} aRuleView
  *        The CssRuleView containg the document holding this rule editor.
diff --git a/browser/devtools/styleinspector/ruleview.css b/browser/devtools/styleinspector/ruleview.css
--- a/browser/devtools/styleinspector/ruleview.css
+++ b/browser/devtools/styleinspector/ruleview.css
@@ -23,16 +23,20 @@
   min-height: 0;
   flex: 1;
 }
 
 #root .devtools-toolbar {
   width: 100%;
 }
 
+#pseudo-class-pane-toggle > image {
+  background-image: url("chrome://browser/skin/devtools/command-pick.png");
+}
+
 .ruleview {
   overflow: auto;
   -moz-user-select: text;
 }
 
 .ruleview-code {
   direction: ltr;
 }
diff --git a/browser/devtools/styleinspector/style-inspector.js b/browser/devtools/styleinspector/style-inspector.js
--- a/browser/devtools/styleinspector/style-inspector.js
+++ b/browser/devtools/styleinspector/style-inspector.js
@@ -75,21 +75,23 @@
         !this.inspector.selection.isElementNode()) {
       this.view.selectElement(null);
       return;
     }
 
     if (!event || event == "new-node-front") {
       let done = this.inspector.updating("rule-view");
       this.view.selectElement(this.inspector.selection.nodeFront).then(done, done);
+      this.view.refreshPseudoClassPanel();
     }
   },
 
   refresh: function() {
     if (this.isSidebarActive()) {
+      this.view.refreshPseudoClassPanel();
       this.view.refreshPanel();
     }
   },
 
   clearUserProperties: function() {
     if (this.view && this.view.store && this.view.store.userProperties) {
       this.view.store.userProperties.clear();
     }
