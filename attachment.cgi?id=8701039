diff --git a/devtools/client/webconsole/console-output.js b/devtools/client/webconsole/console-output.js
--- a/devtools/client/webconsole/console-output.js
+++ b/devtools/client/webconsole/console-output.js
@@ -1186,20 +1186,22 @@ Messages.Extended.prototype = Heritage.e
    * @param object options
    *        Options for displaying the value. Available options:
    *        - noStringQuotes - boolean that tells the renderer to not use quotes
    *        around strings.
    *        - concise - boolean that tells the renderer to compactly display the
    *        grip. This is typically set to true when the object needs to be
    *        displayed in an array preview, or as a property value in object
    *        previews, etc.
+   * @param object unshortenedGrip
+   *        The unshortened form of the value grip, if it was shortened.
    * @return DOMElement
    *         The DOM element that displays the given grip.
    */
-  _renderValueGrip: function(grip, options = {})
+  _renderValueGrip: function(grip, options = {}, unshortenedGrip)
   {
     let isPrimitive = VariablesView.isPrimitive({ value: grip });
     let isActorGrip = WebConsoleUtils.isActorGrip(grip);
     let noStringQuotes = !this._quoteStrings;
     if ("noStringQuotes" in options) {
       noStringQuotes = options.noStringQuotes;
     }
 
@@ -1213,17 +1215,17 @@ Messages.Extended.prototype = Heritage.e
         let widget = new Widgets.LongString(this, grip, options).render();
         return widget.element;
       }
     }
 
     let result = this.document.createElementNS(XHTML_NS, "span");
     if (isPrimitive) {
       if (Widgets.URLString.prototype.containsURL.call(Widgets.URLString.prototype, grip)) {
-        let widget = new Widgets.URLString(this, grip, options).render();
+        let widget = new Widgets.URLString(this, grip, unshortenedGrip).render();
         return widget.element;
       }
 
       let className = this.getClassNameForValueGrip(grip);
       if (className) {
         result.className = className;
       }
 
@@ -2200,21 +2202,24 @@ Widgets.MessageTimestamp.prototype = Her
  * The URLString widget, for rendering strings where at least one token is a
  * URL.
  *
  * @constructor
  * @param object message
  *        The owning message.
  * @param string str
  *        The string, which contains at least one valid URL.
+ * @param string unshortenedStr
+ *        The unshortened form of the string, if it was shortened.
  */
-Widgets.URLString = function(message, str)
+Widgets.URLString = function(message, str, unshortenedStr)
 {
   Widgets.BaseWidget.call(this, message);
   this.str = str;
+  this.unshortenedStr = unshortenedStr;
 };
 
 Widgets.URLString.prototype = Heritage.extend(Widgets.BaseWidget.prototype,
 {
   /**
    * The string to format, which contains at least one valid URL.
    * @type string
    */
@@ -2229,27 +2234,35 @@ Widgets.URLString.prototype = Heritage.e
     // The rendered URLString will be a <span> containing a number of text
     // <spans> for non-URL tokens and <a>'s for URL tokens.
     this.element = this.el("span", {
       class: "console-string"
     });
     this.element.appendChild(this._renderText("\""));
 
     // As we walk through the tokens of the source string, we make sure to preserve
-    // the original whitespace that seperated the tokens.
+    // the original whitespace that separated the tokens.
     let tokens = this.str.split(/\s+/);
     let textStart = 0;
+    let tokenIx = 0;
     let tokenStart;
     for (let token of tokens) {
+      let unshortenedToken;
       tokenStart = this.str.indexOf(token, textStart);
       if (this._isURL(token)) {
+        if (token.endsWith(ELLIPSIS) && this.unshortenedStr) {
+          // Token may have been shortened. Extract it from the unshortened
+          // string.
+          unshortenedToken = this.unshortenedStr.split(/\s+/, tokenIx + 1)[tokenIx];
+        }
         this.element.appendChild(this._renderText(this.str.slice(textStart, tokenStart)));
         textStart = tokenStart + token.length;
-        this.element.appendChild(this._renderURL(token));
+        this.element.appendChild(this._renderURL(token, unshortenedToken));
       }
+      tokenIx += 1;
     }
 
     // Clean up any non-URL text at the end of the source string.
     this.element.appendChild(this._renderText(this.str.slice(textStart, this.str.length)));
     this.element.appendChild(this._renderText("\""));
 
     return this;
   },
@@ -2290,25 +2303,28 @@ Widgets.URLString.prototype = Heritage.e
     }
   },
 
   /**
    * Renders a string as a URL.
    *
    * @param string url
    *        The string to be rendered as a url.
+   * @param string fullUrl
+   *        The unshortened form of the URL, if it was shortened.
    * @return DOMElement
    *         An element containing the rendered string.
    */
-  _renderURL: function(url)
+  _renderURL: function(url, fullUrl)
   {
+    let unshortened = fullUrl || url;
     let result = this.el("a", {
       class: "url",
-      title: url,
-      href: url,
+      title: unshortened,
+      href: unshortened,
       draggable: false
     }, url);
     this.message._addLinkCallback(result);
     return result;
   },
 
   _renderText: function(text) {
     return this.el("span", text);
@@ -2416,17 +2432,18 @@ Widgets.JSObject.prototype = Heritage.ex
 
     container.appendChild(this.el("span.cm-property", key));
     this._text(": ");
 
     if (valueIsText) {
       this._text(value);
     } else {
       let shortVal = this.message.shortenValueGrip(value);
-      let valueElem = this.message._renderValueGrip(shortVal, { concise: true });
+      let unshortened = (value != shortVal) ? value : undefined;
+      let valueElem = this.message._renderValueGrip(shortVal, { concise: true }, unshortened);
       container.appendChild(valueElem);
     }
   },
 
   /**
    * Render this object's properties.
    *
    * @param nsIDOMNode container
@@ -2810,17 +2827,18 @@ Widgets.ObjectRenderers.add({
         isFirst = false;
 
         if (emptySlots) {
           this._renderEmptySlots(emptySlots);
           emptySlots = 0;
         }
 
         let shortVal = this.message.shortenValueGrip(item);
-        let elem = this.message._renderValueGrip(shortVal, { concise: true });
+        let unshortened = (item != shortVal) ? item : undefined;
+        let elem = this.message._renderValueGrip(shortVal, { concise: true }, unshortened);
         this.element.appendChild(elem);
       }
     }
 
     if (emptySlots) {
       renderSeparator();
       this._renderEmptySlots(emptySlots, false);
     }
