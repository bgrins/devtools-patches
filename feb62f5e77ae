
# HG changeset patch
# User DÃ£o Gottwald <dao@mozilla.com>
# Date 1521235801 -3600
# Node ID feb62f5e77ae149269886a8bb8023fe3b59b0d14
# Parent  8dab948a10f073a46f13f55f94d1f6514c7360ac
Bug 1442582 - Remove the tabbrowser-tabpanels binding. r?mconley

MozReview-Commit-ID: HcQgRbvcdiV

diff --git a/browser/base/content/tabbrowser.css b/browser/base/content/tabbrowser.css
--- a/browser/base/content/tabbrowser.css
+++ b/browser/base/content/tabbrowser.css
@@ -1,16 +1,12 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
-.tabbrowser-tabpanels {
-  -moz-binding: url("chrome://browser/content/tabbrowser.xml#tabbrowser-tabpanels");
-}
-
 .tabbrowser-arrowscrollbox {
   -moz-binding: url("chrome://browser/content/tabbrowser.xml#tabbrowser-arrowscrollbox");
 }
 
 .tab-close-button[pinned],
 #tabbrowser-tabs[closebuttons="activetab"] > .tabbrowser-tab > .tab-stack > .tab-content > .tab-close-button:not([selected="true"]),
 .tab-icon-image:not([src]):not([pinned]):not([crashed])[selected],
 .tab-icon-image:not([src]):not([pinned]):not([crashed]):not([sharing]),
diff --git a/browser/base/content/tabbrowser.js b/browser/base/content/tabbrowser.js
--- a/browser/base/content/tabbrowser.js
+++ b/browser/base/content/tabbrowser.js
@@ -46,20 +46,16 @@ window._gBrowser = {
     }
 
     let messageManager = window.getGroupMessageManager("browsers");
     if (gMultiProcessBrowser) {
       messageManager.addMessageListener("DOMTitleChanged", this);
       messageManager.addMessageListener("DOMWindowClose", this);
       window.messageManager.addMessageListener("contextmenu", this);
       messageManager.addMessageListener("Browser:Init", this);
-
-      // If this window has remote tabs, switch to our tabpanels fork
-      // which does asynchronous tab switching.
-      this.tabpanels.classList.add("tabbrowser-tabpanels");
     } else {
       this._outerWindowIDBrowserMap.set(this.selectedBrowser.outerWindowID,
         this.selectedBrowser);
     }
     messageManager.addMessageListener("DOMWindowFocus", this);
     messageManager.addMessageListener("RefreshBlocker:Blocked", this);
     messageManager.addMessageListener("Browser:WindowCreated", this);
 
@@ -863,21 +859,28 @@ window._gBrowser = {
   },
 
   updateTitlebar() {
     document.title = this.getWindowTitleForBrowser(this.selectedBrowser);
   },
 
   updateCurrentBrowser(aForceUpdate) {
     let newBrowser = this.getBrowserAtIndex(this.tabContainer.selectedIndex);
+
     if (this.selectedBrowser == newBrowser && !aForceUpdate) {
       return;
     }
 
+    let newTab = this.getTabForBrowser(newBrowser);
+
     if (!aForceUpdate) {
+      if (gMultiProcessBrowser) {
+        this._getSwitcher().requestTab(newTab);
+      }
+
       document.commandDispatcher.lock();
 
       TelemetryStopwatch.start("FX_TAB_SWITCH_UPDATE_MS");
     }
 
     let oldTab = this.selectedTab;
 
     // Preview mode should not reset the owner
@@ -897,17 +900,16 @@ window._gBrowser = {
       oldBrowser.removeAttribute("primary");
       oldBrowser.docShellIsActive = false;
       newBrowser.setAttribute("primary", "true");
       newBrowser.docShellIsActive =
         (window.windowState != window.STATE_MINIMIZED &&
           !window.isFullyOccluded);
     }
 
-    let newTab = this.getTabForBrowser(newBrowser);
     this._selectedBrowser = newBrowser;
     this._selectedTab = newTab;
     this.showTab(newTab);
 
     gURLBar.setAttribute("switchingtabs", "true");
     window.addEventListener("MozAfterPaint", function() {
       gURLBar.removeAttribute("switchingtabs");
     }, { once: true });
diff --git a/browser/base/content/tabbrowser.xml b/browser/base/content/tabbrowser.xml
--- a/browser/base/content/tabbrowser.xml
+++ b/browser/base/content/tabbrowser.xml
@@ -2093,55 +2093,16 @@
         if (event.originalTarget.getAttribute("anonid") == "tab-loading-burst") {
           this.removeAttribute("bursting");
         }
       ]]>
       </handler>
     </handlers>
   </binding>
 
-  <binding id="tabbrowser-tabpanels"
-           extends="chrome://global/content/bindings/tabbox.xml#tabpanels">
-    <implementation>
-      <field name="_selectedIndex">0</field>
-
-      <property name="selectedIndex">
-        <getter>
-        <![CDATA[
-          return this._selectedIndex;
-        ]]>
-        </getter>
-
-        <setter>
-        <![CDATA[
-          if (val < 0 || val >= this.childNodes.length)
-            return val;
-
-          let toTab = this.getRelatedElement(this.childNodes[val]);
-
-          gBrowser._getSwitcher().requestTab(toTab);
-
-          var panel = this._selectedPanel;
-          var newPanel = this.childNodes[val];
-          this._selectedPanel = newPanel;
-          if (this._selectedPanel != panel) {
-            var event = document.createEvent("Events");
-            event.initEvent("select", true, true);
-            this.dispatchEvent(event);
-
-            this._selectedIndex = val;
-          }
-
-          return val;
-        ]]>
-        </setter>
-      </property>
-    </implementation>
-  </binding>
-
   <binding id="tabbrowser-browser"
            extends="chrome://global/content/bindings/browser.xml#browser">
     <implementation>
       <field name="tabModalPromptBox">null</field>
 
       <!-- throws exception for unknown schemes -->
       <method name="loadURI">
         <parameter name="aURI"/>
diff --git a/testing/mochitest/browser-test.js b/testing/mochitest/browser-test.js
--- a/testing/mochitest/browser-test.js
+++ b/testing/mochitest/browser-test.js
@@ -239,18 +239,19 @@ function takeInstrumentation() {
       namespaceURI: element.namespaceURI,
       localName: element.localName,
       binding: (binding && binding != "none") ? binding : null,
     };
   }
 
   // The selector for just this element
   function immediateSelector(element) {
-    if (element.localName == "notificationbox" && element.parentNode &&
-        element.parentNode.classList.contains("tabbrowser-tabpanels")) {
+    if (element.localName == "notificationbox" &&
+        element.parentNode &&
+        element.parentNode.id == "tabbrowser-tabpanels") {
       // Don't do a full selector for a tabpanel's notificationbox
       return element.localName;
     }
 
     if (element.localName == "tab" && element.classList.contains("tabbrowser-tab")) {
       // Don't do a full selector for a tab
       return element.localName;
     }
