# HG changeset patch
# Parent  a9902ae0b49f75a464a8cdedfe969fc94da6a8b4
Backed out changeset 02533181eb50 (bug 1238133)

diff --git a/devtools/client/framework/sidebar.js b/devtools/client/framework/sidebar.js
--- a/devtools/client/framework/sidebar.js
+++ b/devtools/client/framework/sidebar.js
@@ -286,22 +286,16 @@ ToolSidebar.prototype = {
     for (let tab of this._tabbox.tabs.querySelectorAll("tab")) {
       if (knownTabs.indexOf(tab) !== -1) {
         continue;
       }
 
       // Find an ID for this unknown tab
       let id = tab.getAttribute("id") || "untitled-tab-" + (this.untitledTabsIndex++);
 
-      // If the existing tab contains the tab ID prefix, extract the ID of the
-      // tab
-      if (id.startsWith(this.TAB_ID_PREFIX)) {
-        id = id.split(this.TAB_ID_PREFIX).pop();
-      }
-
       // Register the tab
       this._tabs.set(id, tab);
       this.emit("new-tab-registered", id);
     }
   },
 
   /**
    * Remove an existing tab.
diff --git a/devtools/client/inspector/computed/computed.js b/devtools/client/inspector/computed/computed.js
--- a/devtools/client/inspector/computed/computed.js
+++ b/devtools/client/inspector/computed/computed.js
@@ -958,52 +958,46 @@ PropertyView.prototype = {
       }
       if (event.keyCode === keyEvent.DOM_VK_RETURN ||
         event.keyCode === keyEvent.DOM_VK_SPACE) {
         this.onMatchedToggle(event);
       }
     };
     this.element.addEventListener("keydown", this.onKeyDown, false);
 
-    let nameContainer = doc.createElementNS(HTML_NS, "div");
-    nameContainer.className = "property-name-container";
-    this.element.appendChild(nameContainer);
-
     // Build the twisty expand/collapse
     this.matchedExpander = doc.createElementNS(HTML_NS, "div");
     this.matchedExpander.className = "expander theme-twisty";
     this.matchedExpander.addEventListener("click", this.onMatchedToggle, false);
-    nameContainer.appendChild(this.matchedExpander);
+    this.element.appendChild(this.matchedExpander);
+
+    this.focusElement = () => this.element.focus();
 
     // Build the style name element
     this.nameNode = doc.createElementNS(HTML_NS, "div");
     this.nameNode.setAttribute("class", "property-name theme-fg-color5");
     // Reset its tabindex attribute otherwise, if an ellipsis is applied
     // it will be reachable via TABing
     this.nameNode.setAttribute("tabindex", "");
     this.nameNode.textContent = this.nameNode.title = this.name;
     // Make it hand over the focus to the container
     this.onFocus = () => this.element.focus();
     this.nameNode.addEventListener("click", this.onFocus, false);
-    nameContainer.appendChild(this.nameNode);
-
-    let valueContainer = doc.createElementNS(HTML_NS, "div");
-    valueContainer.className = "property-value-container";
-    this.element.appendChild(valueContainer);
+    this.element.appendChild(this.nameNode);
 
     // Build the style value element
     this.valueNode = doc.createElementNS(HTML_NS, "div");
     this.valueNode.setAttribute("class", "property-value theme-fg-color1");
     // Reset its tabindex attribute otherwise, if an ellipsis is applied
     // it will be reachable via TABing
     this.valueNode.setAttribute("tabindex", "");
     this.valueNode.setAttribute("dir", "ltr");
     // Make it hand over the focus to the container
     this.valueNode.addEventListener("click", this.onFocus, false);
-    valueContainer.appendChild(this.valueNode);
+    this.element.appendChild(this.valueNode);
 
     return this.element;
   },
 
   buildSelectorContainer: function() {
     let doc = this.tree.styleDocument;
     let element = doc.createElementNS(HTML_NS, "div");
     element.setAttribute("class", this.propertyContentClassName);
diff --git a/devtools/client/inspector/computed/test/browser_computed_cycle_color.js b/devtools/client/inspector/computed/test/browser_computed_cycle_color.js
--- a/devtools/client/inspector/computed/test/browser_computed_cycle_color.js
+++ b/devtools/client/inspector/computed/test/browser_computed_cycle_color.js
@@ -17,27 +17,27 @@ const TEST_URI = `
 
 add_task(function*() {
   yield addTab("data:text/html;charset=utf-8," + encodeURIComponent(TEST_URI));
   let {inspector, view} = yield openComputedView();
   yield selectNode("#matches", inspector);
 
   info("Checking the property itself");
   let container = getComputedViewPropertyView(view, "color").valueNode;
-  checkColorCycling(container, view);
+  checkColorCycling(container, inspector);
 
   info("Checking matched selectors");
   container = yield getComputedViewMatchedRules(view, "color");
-  checkColorCycling(container, view);
+  checkColorCycling(container, inspector);
 });
 
-function checkColorCycling(container, view) {
+function checkColorCycling(container, inspector) {
   let swatch = container.querySelector(".computedview-colorswatch");
   let valueNode = container.querySelector(".computedview-color");
-  let win = view.styleWindow;
+  let win = inspector.sidebar.getWindowForTab("computedview");
 
   // "Authored" (default; currently the computed value)
   is(valueNode.textContent, "rgb(255, 0, 0)",
                             "Color displayed as an RGB value.");
 
   // Hex
   EventUtils.synthesizeMouseAtCenter(swatch,
                                      {type: "mousedown", shiftKey: true}, win);
diff --git a/devtools/client/inspector/computed/test/browser_computed_search-filter_context-menu.js b/devtools/client/inspector/computed/test/browser_computed_search-filter_context-menu.js
--- a/devtools/client/inspector/computed/test/browser_computed_search-filter_context-menu.js
+++ b/devtools/client/inspector/computed/test/browser_computed_search-filter_context-menu.js
@@ -32,18 +32,18 @@ add_task(function*() {
   let onContextMenuPopup = once(searchContextMenu, "popupshowing");
   EventUtils.synthesizeMouse(searchField, 2, 2,
     {type: "contextmenu", button: 2}, win);
   yield onContextMenuPopup;
 
   is(cmdUndo.getAttribute("disabled"), "true", "cmdUndo is disabled");
   is(cmdDelete.getAttribute("disabled"), "true", "cmdDelete is disabled");
   is(cmdSelectAll.getAttribute("disabled"), "", "cmdSelectAll is enabled");
-  is(cmdCut.getAttribute("disabled"), "true", "cmdCut is disabled");
-  is(cmdCopy.getAttribute("disabled"), "true", "cmdCopy is disabled");
+  is(cmdCut.getAttribute("disabled"), "", "cmdCut is enabled");
+  is(cmdCopy.getAttribute("disabled"), "", "cmdCopy is enabled");
   is(cmdPaste.getAttribute("disabled"), "true", "cmdPaste is disabled");
 
   info("Closing context menu");
   let onContextMenuHidden = once(searchContextMenu, "popuphidden");
   searchContextMenu.hidePopup();
   yield onContextMenuHidden;
 
   info("Copy text in search field using the context menu");
diff --git a/devtools/client/inspector/computed/test/browser_computed_select-and-copy-styles.js b/devtools/client/inspector/computed/test/browser_computed_select-and-copy-styles.js
--- a/devtools/client/inspector/computed/test/browser_computed_select-and-copy-styles.js
+++ b/devtools/client/inspector/computed/test/browser_computed_select-and-copy-styles.js
@@ -48,17 +48,17 @@ function* checkCopySelection(view) {
   info("Testing selection copy");
 
   let contentDocument = view.styleDocument;
   let props = contentDocument.querySelectorAll(".property-view");
   ok(props, "captain, we have the property-view nodes");
 
   let range = contentDocument.createRange();
   range.setStart(props[1], 0);
-  range.setEnd(props[3], 2);
+  range.setEnd(props[3], 3);
   contentDocument.defaultView.getSelection().addRange(range);
 
   info("Checking that cssHtmlTree.siBoundCopy() returns the correct " +
     "clipboard value");
 
   let expectedPattern = "font-family: helvetica,sans-serif;[\\r\\n]+" +
                         "font-size: 16px;[\\r\\n]+" +
                         "font-variant-caps: small-caps;[\\r\\n]*";
diff --git a/devtools/client/inspector/computed/test/head.js b/devtools/client/inspector/computed/test/head.js
--- a/devtools/client/inspector/computed/test/head.js
+++ b/devtools/client/inspector/computed/test/head.js
@@ -14,21 +14,21 @@ registerCleanupFunction(() => {
 
 /**
  * Open the toolbox, with the inspector tool visible, and the computed-view
  * sidebar tab selected.
  * @return a promise that resolves when the inspector is ready and the computed
  * view is visible and ready
  */
 function openComputedView() {
-  return openInspectorSidebarTab("computedview").then(({toolbox, inspector}) => {
+  return openInspectorSidebarTab("computedview").then(objects => {
     return {
-      toolbox,
-      inspector,
-      view: inspector.computedview.view
+      toolbox: objects.toolbox,
+      inspector: objects.inspector,
+      view: objects.view.view
     };
   });
 }
 
 /**
  * Get the NodeFront for a given css selector, via the protocol
  *
  * @param {String} selector
diff --git a/devtools/client/inspector/fonts/fonts.js b/devtools/client/inspector/fonts/fonts.js
--- a/devtools/client/inspector/fonts/fonts.js
+++ b/devtools/client/inspector/fonts/fonts.js
@@ -1,49 +1,46 @@
 /* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
-const {Cu} = require("chrome");
-const {setTimeout, clearTimeout} =
-      Cu.import("resource://gre/modules/Timer.jsm", {});
-
+var { utils: Cu } = Components;
 const DEFAULT_PREVIEW_TEXT = "Abc";
 const PREVIEW_UPDATE_DELAY = 150;
 
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 XPCOMUtils.defineLazyModuleGetter(this, "Task",
   "resource://gre/modules/Task.jsm");
 XPCOMUtils.defineLazyModuleGetter(this, "console",
   "resource://gre/modules/Console.jsm");
 
-function FontInspector(inspector, window) {
+function FontInspector(inspector, window)
+{
   this.inspector = inspector;
   this.pageStyle = this.inspector.pageStyle;
   this.chromeDoc = window.document;
   this.init();
 }
 
 FontInspector.prototype = {
   init: function() {
     this.update = this.update.bind(this);
     this.onNewNode = this.onNewNode.bind(this);
     this.onThemeChanged = this.onThemeChanged.bind(this);
     this.inspector.selection.on("new-node", this.onNewNode);
     this.inspector.sidebar.on("fontinspector-selected", this.onNewNode);
     this.showAll = this.showAll.bind(this);
-    this.showAllButton = this.chromeDoc.getElementById("font-showall");
+    this.showAllButton = this.chromeDoc.getElementById("showall");
     this.showAllButton.addEventListener("click", this.showAll);
     this.previewTextChanged = this.previewTextChanged.bind(this);
-    this.previewInput =
-      this.chromeDoc.getElementById("font-preview-text-input");
+    this.previewInput = this.chromeDoc.getElementById("preview-text-input");
     this.previewInput.addEventListener("input", this.previewTextChanged);
 
     // Listen for theme changes as the color of the previews depend on the theme
     gDevTools.on("theme-switched", this.onThemeChanged);
 
     this.update();
   },
 
@@ -121,48 +118,45 @@ FontInspector.prototype = {
       this.update(this._lastUpdateShowedAllFonts);
     }
   },
 
   /**
    * Hide the font list. No node are selected.
    */
   dim: function() {
-    let panel = this.chromeDoc.getElementById("sidebar-panel-fontinspector");
-    panel.classList.add("dim");
+    this.chromeDoc.body.classList.add("dim");
     this.clear();
   },
 
   /**
    * Show the font list. A node is selected.
    */
   undim: function() {
-    let panel = this.chromeDoc.getElementById("sidebar-panel-fontinspector");
-    panel.classList.remove("dim");
+    this.chromeDoc.body.classList.remove("dim");
   },
 
   /**
    * Clears the font list.
    */
   clear: function() {
     this.chromeDoc.querySelector("#all-fonts").innerHTML = "";
   },
 
  /**
   * Retrieve all the font info for the selected node and display it.
   */
   update: Task.async(function*(showAllFonts) {
     let node = this.inspector.selection.nodeFront;
-    let panel = this.chromeDoc.getElementById("sidebar-panel-fontinspector");
 
     if (!node ||
         !this.isActive() ||
         !this.inspector.selection.isConnected() ||
         !this.inspector.selection.isElementNode() ||
-        panel.classList.contains("dim")) {
+        this.chromeDoc.body.classList.contains("dim")) {
       return;
     }
 
     this._lastUpdateShowedAllFonts = showAllFonts;
 
     // Assume light theme colors as the default (see also bug 1118179).
     let fillStyle = (Services.prefs.getCharPref("devtools.theme") == "dark") ?
         "white" : "black";
@@ -206,17 +200,17 @@ FontInspector.prototype = {
 
     this.inspector.emit("fontinspector-updated");
   }),
 
   /**
    * Display the information of one font.
    */
   render: function(font) {
-    let s = this.chromeDoc.querySelector("#font-template > section");
+    let s = this.chromeDoc.querySelector("#template > section");
     s = s.cloneNode(true);
 
     s.querySelector(".font-name").textContent = font.name;
     s.querySelector(".font-css-name").textContent = font.CSSFamilyName;
 
     if (font.URI) {
       s.classList.add("is-remote");
     } else {
@@ -248,9 +242,17 @@ FontInspector.prototype = {
   /**
    * Show all fonts for the document (including iframes)
    */
   showAll: function() {
     this.update(true);
   },
 };
 
-exports.FontInspector = FontInspector;
+window.setPanel = function(panel) {
+  window.fontInspector = new FontInspector(panel, window);
+};
+
+window.onunload = function() {
+  if (window.fontInspector) {
+    window.fontInspector.destroy();
+  }
+};
diff --git a/devtools/client/inspector/fonts/test/browser_fontinspector.js b/devtools/client/inspector/fonts/test/browser_fontinspector.js
--- a/devtools/client/inspector/fonts/test/browser_fontinspector.js
+++ b/devtools/client/inspector/fonts/test/browser_fontinspector.js
@@ -77,16 +77,16 @@ function* testDivFonts(inspector, viewDo
   is(sections1[0].querySelector(".font-name").textContent, "Ostrich Sans Medium",
     "The DIV font has the right name");
 }
 
 function* testShowAllFonts(inspector, viewDoc) {
   info("testing showing all fonts");
 
   let updated = inspector.once("fontinspector-updated");
-  viewDoc.querySelector("#font-showall").click();
+  viewDoc.querySelector("#showall").click();
   yield updated;
 
   // shouldn't change the node selection
   is(inspector.selection.nodeFront.nodeName, "DIV", "Show all fonts selected");
   let sections = viewDoc.querySelectorAll("#all-fonts > section");
   is(sections.length, 6, "Font inspector shows 6 fonts (1 from iframe)");
 }
diff --git a/devtools/client/inspector/fonts/test/browser_fontinspector_edit-previews-show-all.js b/devtools/client/inspector/fonts/test/browser_fontinspector_edit-previews-show-all.js
--- a/devtools/client/inspector/fonts/test/browser_fontinspector_edit-previews-show-all.js
+++ b/devtools/client/inspector/fonts/test/browser_fontinspector_edit-previews-show-all.js
@@ -16,17 +16,17 @@ add_task(function*() {
   yield selectNode(".normal-text", inspector);
 
   let normalTextNumPreviews =
     viewDoc.querySelectorAll("#all-fonts .font-preview").length;
 
   let onUpdated = inspector.once("fontinspector-updated");
 
   info("Clicking 'Select all' button.");
-  viewDoc.getElementById("font-showall").click();
+  viewDoc.getElementById("showall").click();
 
   info("Waiting for font-inspector to update.");
   yield onUpdated;
 
   let allFontsNumPreviews =
     viewDoc.querySelectorAll("#all-fonts .font-preview").length;
 
   // Sanity check. If this fails all fonts apply also to the .normal-text node
diff --git a/devtools/client/inspector/fonts/test/head.js b/devtools/client/inspector/fonts/test/head.js
--- a/devtools/client/inspector/fonts/test/head.js
+++ b/devtools/client/inspector/fonts/test/head.js
@@ -31,32 +31,32 @@ var openFontInspectorForURL = Task.async
    */
   let onUpdated = inspector.once("fontinspector-updated");
   yield selectNode("body", inspector);
   yield onUpdated;
 
   return {
     toolbox,
     inspector,
-    view: inspector.fontInspector
+    view: inspector.sidebar.getWindowForTab("fontinspector").fontInspector
   };
 });
 
 /**
  * Clears the preview input field, types new text into it and waits for the
  * preview images to be updated.
  *
  * @param {FontInspector} view - The FontInspector instance.
  * @param {String} text - The text to preview.
  */
 function* updatePreviewText(view, text) {
   info(`Changing the preview text to '${text}'`);
 
   let doc = view.chromeDoc;
-  let input = doc.getElementById("font-preview-text-input");
+  let input = doc.getElementById("preview-text-input");
   let update = view.inspector.once("fontinspector-updated");
 
   info("Focusing the input field.");
   input.focus();
 
   is(doc.activeElement, input, "The input was focused.");
 
   info("Blanking the input field.");
diff --git a/devtools/client/inspector/inspector-panel.js b/devtools/client/inspector/inspector-panel.js
--- a/devtools/client/inspector/inspector-panel.js
+++ b/devtools/client/inspector/inspector-panel.js
@@ -1,35 +1,29 @@
 /* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
-"use strict";
-
-const {Cc, Ci, Cu} = require("chrome");
+const {Cc, Ci, Cu, Cr} = require("chrome");
 
 Cu.import("resource://gre/modules/Services.jsm");
 
 var promise = require("promise");
 var EventEmitter = require("devtools/shared/event-emitter");
 var clipboard = require("sdk/clipboard");
 var {HostType} = require("devtools/client/framework/toolbox").Toolbox;
 
 loader.lazyRequireGetter(this, "CSS", "CSS");
 
 loader.lazyGetter(this, "MarkupView", () => require("devtools/client/inspector/markup/markup").MarkupView);
 loader.lazyGetter(this, "HTMLBreadcrumbs", () => require("devtools/client/inspector/breadcrumbs").HTMLBreadcrumbs);
 loader.lazyGetter(this, "ToolSidebar", () => require("devtools/client/framework/sidebar").ToolSidebar);
 loader.lazyGetter(this, "InspectorSearch", () => require("devtools/client/inspector/inspector-search").InspectorSearch);
-loader.lazyGetter(this, "RuleViewTool", () => require("devtools/client/inspector/rules/rules").RuleViewTool);
-loader.lazyGetter(this, "ComputedViewTool", () => require("devtools/client/inspector/computed/computed").ComputedViewTool);
-loader.lazyGetter(this, "FontInspector", () => require("devtools/client/inspector/fonts/fonts").FontInspector);
-loader.lazyGetter(this, "LayoutView", () => require("devtools/client/inspector/layout/layout").LayoutView);
 
 loader.lazyGetter(this, "strings", () => {
   return Services.strings.createBundle("chrome://devtools/locale/inspector.properties");
 });
 loader.lazyGetter(this, "toolboxStrings", () => {
   return Services.strings.createBundle("chrome://devtools/locale/toolbox.properties");
 });
 loader.lazyGetter(this, "clipboardHelper", () => {
@@ -353,26 +347,33 @@ InspectorPanel.prototype = {
     let defaultTab = Services.prefs.getCharPref("devtools.inspector.activeSidebar");
 
     this._setDefaultSidebar = (event, toolId) => {
       Services.prefs.setCharPref("devtools.inspector.activeSidebar", toolId);
     };
 
     this.sidebar.on("select", this._setDefaultSidebar);
 
-    this.ruleview = new RuleViewTool(this, this.panelWin);
-    this.computedview = new ComputedViewTool(this, this.panelWin);
+    this.sidebar.addTab("ruleview",
+                        "chrome://devtools/content/inspector/rules/rules.xhtml",
+                        "ruleview" == defaultTab);
 
-    if (Services.prefs.getBoolPref("devtools.fontinspector.enabled") &&
-        this.canGetUsedFontFaces) {
-      this.fontInspector = new FontInspector(this, this.panelWin);
-      this.panelDoc.getElementById("sidebar-tab-fontinspector").hidden = false;
+    this.sidebar.addTab("computedview",
+                        "chrome://devtools/content/inspector/computed/computed.xhtml",
+                        "computedview" == defaultTab);
+
+    if (Services.prefs.getBoolPref("devtools.fontinspector.enabled") && this.canGetUsedFontFaces) {
+      this.sidebar.addTab("fontinspector",
+                          "chrome://devtools/content/inspector/fonts/fonts.xhtml",
+                          "fontinspector" == defaultTab);
     }
 
-    this.layoutview = new LayoutView(this, this.panelWin);
+    this.sidebar.addTab("layoutview",
+                        "chrome://devtools/content/inspector/layout/layout.xhtml",
+                        "layoutview" == defaultTab);
 
     if (this.target.form.animationsActor) {
       this.sidebar.addTab("animationinspector",
                           "chrome://devtools/content/animationinspector/animation-inspector.xhtml",
                           "animationinspector" == defaultTab);
     }
 
     this.sidebar.show();
@@ -580,32 +581,16 @@ InspectorPanel.prototype = {
 
     this.target.off("will-navigate", this._onBeforeNavigate);
 
     this.target.off("thread-paused", this.updateDebuggerPausedWarning);
     this.target.off("thread-resumed", this.updateDebuggerPausedWarning);
     this._toolbox.off("select", this.updateDebuggerPausedWarning);
     this._toolbox.off("host-changed", this.onToolboxHostChanged);
 
-    if (this.ruleview) {
-      this.ruleview.destroy();
-    }
-
-    if (this.computedview) {
-      this.computedview.destroy();
-    }
-
-    if (this.fontInspector) {
-      this.fontInspector.destroy();
-    }
-
-    if (this.layoutview) {
-      this.layoutview.destroy();
-    }
-
     this.sidebar.off("select", this._setDefaultSidebar);
     let sidebarDestroyer = this.sidebar.destroy();
     this.sidebar = null;
 
     this.nodemenu.removeEventListener("popupshowing", this._setupNodeMenu, true);
     this.nodemenu.removeEventListener("popuphiding", this._resetNodeMenu, true);
     this.breadcrumbs.destroy();
     this._paneToggleButton.removeEventListener("mousedown",
diff --git a/devtools/client/inspector/inspector.xul b/devtools/client/inspector/inspector.xul
--- a/devtools/client/inspector/inspector.xul
+++ b/devtools/client/inspector/inspector.xul
@@ -3,30 +3,22 @@
    - License, v. 2.0. If a copy of the MPL was not distributed with this
    - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
 <?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
 <?xml-stylesheet href="chrome://devtools/content/shared/widgets/widgets.css" type="text/css"?>
 <?xml-stylesheet href="chrome://devtools/content/inspector/inspector.css" type="text/css"?>
 <?xml-stylesheet href="chrome://devtools/skin/common.css" type="text/css"?>
 <?xml-stylesheet href="chrome://devtools/skin/widgets.css" type="text/css"?>
 <?xml-stylesheet href="chrome://devtools/skin/inspector.css" type="text/css"?>
-<?xml-stylesheet href="chrome://devtools/skin/rules.css" type="text/css"?>
-<?xml-stylesheet href="chrome://devtools/skin/computed.css" type="text/css"?>
-<?xml-stylesheet href="chrome://devtools/skin/fonts.css" type="text/css"?>
-<?xml-stylesheet href="chrome://devtools/skin/layout.css" type="text/css"?>
-
 <!DOCTYPE window [
-  <!ENTITY % inspectorDTD SYSTEM "chrome://devtools/locale/inspector.dtd"> %inspectorDTD;
-  <!ENTITY % styleinspectorDTD SYSTEM "chrome://devtools/locale/styleinspector.dtd"> %styleinspectorDTD;
-  <!ENTITY % fontinspectorDTD SYSTEM "chrome://devtools/locale/font-inspector.dtd"> %fontinspectorDTD;
-  <!ENTITY % layoutviewDTD SYSTEM "chrome://devtools/locale/layoutview.dtd"> %layoutviewDTD;
+  <!ENTITY % inspectorDTD SYSTEM "chrome://devtools/locale/inspector.dtd" >
+   %inspectorDTD;
 ]>
 
-<window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
-        xmlns:html="http://www.w3.org/1999/xhtml">
+<window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
 
   <script type="application/javascript;version=1.8"
           src="chrome://devtools/content/shared/theme-switching.js"/>
 
   <commandset>
     <command id="nodeSearchCommand"
       oncommand="inspector.searchBox.focus()"/>
   </commandset>
@@ -172,150 +164,13 @@
           class="devtools-toolbarbutton"
           tabindex="0" />
       </toolbar>
       <vbox flex="1" id="markup-box">
       </vbox>
     </vbox>
     <splitter class="devtools-side-splitter"/>
     <tabbox id="inspector-sidebar" handleCtrlTab="false" class="devtools-sidebar-tabs" hidden="true">
-      <tabs>
-        <tab id="sidebar-tab-ruleview"
-             label="&ruleViewTitle;"
-             crop="end"/>
-        <tab id="sidebar-tab-computedview"
-             label="&computedViewTitle;"
-             crop="end"/>
-        <tab id="sidebar-tab-fontinspector"
-             label="&fontInspectorTitle;"
-             crop="end"
-             hidden="true"/>
-        <tab id="sidebar-tab-layoutview"
-             label="&layoutViewTitle;"
-             crop="end"/>
-      </tabs>
-      <tabpanels flex="1">
-        <tabpanel id="sidebar-panel-ruleview" class="devtools-monospace theme-sidebar inspector-tabpanel">
-          <html:div id="ruleview-toolbar" class="devtools-toolbar devtools-sidebar-toolbar">
-            <html:div class="devtools-searchbox">
-              <html:input id="ruleview-searchbox"
-                          class="devtools-searchinput devtools-rule-searchbox"
-                          type="search"
-                          placeholder="&filterStylesPlaceholder;"/>
-              <html:button id="ruleview-searchinput-clear" class="devtools-searchinput-clear"></html:button>
-            </html:div>
-            <html:button id="ruleview-add-rule-button" title="&addRuleButtonTooltip;" class="devtools-button"></html:button>
-            <html:button id="pseudo-class-panel-toggle" title="&togglePseudoClassPanel;" class="devtools-button"></html:button>
-          </html:div>
-          <html:div id="pseudo-class-panel" class="devtools-toolbar devtools-sidebar-toolbar" hidden="true" tabindex="-1">
-            <html:label><html:input id="pseudo-hover-toggle" type="checkbox" value=":hover" tabindex="-1" />:hover</html:label>
-            <html:label><html:input id="pseudo-active-toggle" type="checkbox" value=":active" tabindex="-1" />:active</html:label>
-            <html:label><html:input id="pseudo-focus-toggle" type="checkbox" value=":focus" tabindex="-1" />:focus</html:label>
-          </html:div>
-
-          <html:div id="ruleview-container" class="ruleview">
-          </html:div>
-        </tabpanel>
-
-        <tabpanel id="sidebar-panel-computedview" class="devtools-monospace theme-sidebar inspector-tabpanel">
-          <html:div class="devtools-toolbar devtools-sidebar-toolbar">
-            <html:div class="devtools-searchbox">
-              <html:input id="computedview-searchbox"
-                          class="devtools-searchinput devtools-rule-searchbox"
-                          type="search"
-                          placeholder="&filterStylesPlaceholder;"/>
-              <html:button id="computedview-searchinput-clear" class="devtools-searchinput-clear"></html:button>
-            </html:div>
-            <checkbox id="browser-style-checkbox"
-                      class="includebrowserstyles"
-                      checked="false"
-                      label="&browserStylesLabel;"/>
-          </html:div>
-
-          <html:div id="propertyContainer">
-          </html:div>
-
-          <html:div id="noResults" hidden="">
-            &noPropertiesFound;
-          </html:div>
-        </tabpanel>
-
-        <tabpanel id="sidebar-panel-fontinspector" class="devtools-monospace theme-sidebar inspector-tabpanel">
-          <html:div class="devtools-toolbar devtools-sidebar-toolbar">
-            <html:div class="devtools-searchbox">
-              <html:input id="font-preview-text-input"
-                          class="devtools-textinput"
-                          type="search"
-                          placeholder="&previewHint;"/>
-            </html:div>
-          </html:div>
-
-          <html:div id="font-container">
-            <html:ul id="all-fonts"></html:ul>
-            <html:button id="font-showall">&showAllFonts;</html:button>
-          </html:div>
-
-          <html:div id="font-template">
-            <html:section class="font">
-              <html:div class="font-preview-container">
-                <html:img class="font-preview"></html:img>
-              </html:div>
-              <html:div class="font-info">
-                <html:h1 class="font-name"></html:h1>
-                <html:span class="font-is-local">&system;</html:span>
-                <html:span class="font-is-remote">&remote;</html:span>
-                <html:p class="font-format-url">
-                  <html:input readonly="readonly" class="font-url"></html:input>
-                  <html:span class="font-format"></html:span>
-                </html:p>
-                <html:p class="font-css">&usedAs; "<html:span class="font-css-name"></html:span>"</html:p>
-                <html:pre class="font-css-code"></html:pre>
-              </html:div>
-            </html:section>
-          </html:div>
-        </tabpanel>
-
-        <tabpanel id="sidebar-panel-layoutview" class="devtools-monospace theme-sidebar inspector-tabpanel">
-          <html:div id="layout-container">
-            <html:p id="layout-header">
-              <html:span id="layout-element-size"></html:span><html:span id="layout-element-position"></html:span>
-            </html:p>
-
-            <html:div id="layout-main">
-              <html:span class="layout-legend" data-box="margin" title="&margin.tooltip;">&margin.tooltip;</html:span>
-              <html:div id="layout-margins" data-box="margin" title="&margin.tooltip;">
-                <html:span class="layout-legend" data-box="border" title="&border.tooltip;">&border.tooltip;</html:span>
-                <html:div id="layout-borders" data-box="border" title="&border.tooltip;">
-                  <html:span class="layout-legend" data-box="padding" title="&padding.tooltip;">&padding.tooltip;</html:span>
-                  <html:div id="layout-padding" data-box="padding" title="&padding.tooltip;">
-                    <html:div id="layout-content" data-box="content" title="&content.tooltip;">
-                    </html:div>
-                  </html:div>
-                </html:div>
-              </html:div>
-
-              <html:p class="layout-border layout-top"><html:span data-box="border" class="layout-editable" title="border-top"></html:span></html:p>
-              <html:p class="layout-border layout-right"><html:span data-box="border" class="layout-editable" title="border-right"></html:span></html:p>
-              <html:p class="layout-border layout-bottom"><html:span data-box="border" class="layout-editable" title="border-bottom"></html:span></html:p>
-              <html:p class="layout-border layout-left"><html:span data-box="border" class="layout-editable" title="border-left"></html:span></html:p>
-
-              <html:p class="layout-margin layout-top"><html:span data-box="margin" class="layout-editable" title="margin-top"></html:span></html:p>
-              <html:p class="layout-margin layout-right"><html:span data-box="margin" class="layout-editable" title="margin-right"></html:span></html:p>
-              <html:p class="layout-margin layout-bottom"><html:span data-box="margin" class="layout-editable" title="margin-bottom"></html:span></html:p>
-              <html:p class="layout-margin layout-left"><html:span data-box="margin" class="layout-editable" title="margin-left"></html:span></html:p>
-
-              <html:p class="layout-padding layout-top"><html:span data-box="padding" class="layout-editable" title="padding-top"></html:span></html:p>
-              <html:p class="layout-padding layout-right"><html:span data-box="padding" class="layout-editable" title="padding-right"></html:span></html:p>
-              <html:p class="layout-padding layout-bottom"><html:span data-box="padding" class="layout-editable" title="padding-bottom"></html:span></html:p>
-              <html:p class="layout-padding layout-left"><html:span data-box="padding" class="layout-editable" title="padding-left"></html:span></html:p>
-
-              <html:p class="layout-size"><html:span data-box="content" title="&content.tooltip;"></html:span></html:p>
-            </html:div>
-
-            <html:div style="display: none">
-              <html:p id="layout-dummy"></html:p>
-            </html:div>
-          </html:div>
-        </tabpanel>
-      </tabpanels>
+      <tabs/>
+      <tabpanels flex="1" />
     </tabbox>
   </box>
 </window>
diff --git a/devtools/client/inspector/layout/layout.js b/devtools/client/inspector/layout/layout.js
--- a/devtools/client/inspector/layout/layout.js
+++ b/devtools/client/inspector/layout/layout.js
@@ -1,25 +1,26 @@
 /* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
-const {Cc, Ci, Cu} = require("chrome");
-const {InplaceEditor, editableItem} =
-      require("devtools/client/shared/inplace-editor");
-const {ReflowFront} = require("devtools/server/actors/layout");
+var {utils: Cu, interfaces: Ci, classes: Cc} = Components;
 
 Cu.import("resource://gre/modules/Task.jsm");
+const {require} = Cu.import("resource://devtools/shared/Loader.jsm", {});
 Cu.import("resource://gre/modules/Console.jsm");
 Cu.import("resource://devtools/client/shared/widgets/ViewHelpers.jsm");
 
+const {InplaceEditor, editableItem} = require("devtools/client/shared/inplace-editor");
+const {ReflowFront} = require("devtools/server/actors/layout");
+
 const STRINGS_URI = "chrome://devtools/locale/shared.properties";
 const SHARED_L10N = new ViewHelpers.L10N(STRINGS_URI);
 const NUMERIC = /^-?[\d\.]+$/;
 const LONG_TEXT_ROTATE_LIMIT = 3;
 
 /**
  * An instance of EditingSession tracks changes that have been made during the
  * modification of box model values. All of these changes can be reverted by
@@ -54,17 +55,17 @@ EditingSession.prototype = {
    * no style rules affect the property.
    *
    * @param property  The name of the property as a string
    */
   getProperty: function(property) {
     // Create a hidden element for getPropertyFromRule to use
     let div = this._doc.createElement("div");
     div.setAttribute("style", "display: none");
-    this._doc.getElementById("sidebar-panel-layoutview").appendChild(div);
+    this._doc.body.appendChild(div);
     this._element = this._doc.createElement("p");
     div.appendChild(this._element);
 
     // As the rules are in order of priority we can just iterate until we find
     // the first that defines a value for the property and return that.
     for (let rule of this._rules) {
       let value = this.getPropertyFromRule(rule, property);
       if (value !== "") {
@@ -131,19 +132,20 @@ EditingSession.prototype = {
 /**
  * The layout-view panel
  * @param {InspectorPanel} inspector An instance of the inspector-panel
  * currently loaded in the toolbox
  * @param {Window} win The window containing the panel
  */
 function LayoutView(inspector, win) {
   this.inspector = inspector;
+
   this.doc = win.document;
-  this.sizeLabel = this.doc.querySelector(".layout-size > span");
-  this.sizeHeadingLabel = this.doc.getElementById("layout-element-size");
+  this.sizeLabel = this.doc.querySelector(".size > span");
+  this.sizeHeadingLabel = this.doc.getElementById("element-size");
 
   this.init();
 }
 
 LayoutView.prototype = {
   init: function() {
     this.update = this.update.bind(this);
 
@@ -151,88 +153,60 @@ LayoutView.prototype = {
     this.inspector.selection.on("new-node-front", this.onNewSelection);
 
     this.onNewNode = this.onNewNode.bind(this);
     this.inspector.sidebar.on("layoutview-selected", this.onNewNode);
 
     this.onSidebarSelect = this.onSidebarSelect.bind(this);
     this.inspector.sidebar.on("select", this.onSidebarSelect);
 
-    this.initBoxModelHighlighter();
-
     // Store for the different dimensions of the node.
     // 'selector' refers to the element that holds the value in view.xhtml;
     // 'property' is what we are measuring;
     // 'value' is the computed dimension, computed in update().
     this.map = {
-      position: {
-        selector: "#layout-element-position",
-        property: "position",
-        value: undefined
-      },
-      marginTop: {
-        selector: ".layout-margin.layout-top > span",
-        property: "margin-top",
-        value: undefined
-      },
-      marginBottom: {
-        selector: ".layout-margin.layout-bottom > span",
-        property: "margin-bottom",
-        value: undefined
-      },
-      marginLeft: {
-        selector: ".layout-margin.layout-left > span",
-        property: "margin-left",
-        value: undefined
-      },
-      marginRight: {
-        selector: ".layout-margin.layout-right > span",
-        property: "margin-right",
-        value: undefined
-      },
-      paddingTop: {
-        selector: ".layout-padding.layout-top > span",
-        property: "padding-top",
-        value: undefined
-      },
-      paddingBottom: {
-        selector: ".layout-padding.layout-bottom > span",
-        property: "padding-bottom",
-        value: undefined
-      },
-      paddingLeft: {
-        selector: ".layout-padding.layout-left > span",
-        property: "padding-left",
-        value: undefined
-      },
-      paddingRight: {
-        selector: ".layout-padding.layout-right > span",
-        property: "padding-right",
-        value: undefined
-      },
-      borderTop: {
-        selector: ".layout-border.layout-top > span",
-        property: "border-top-width",
-        value: undefined
-      },
-      borderBottom: {
-        selector: ".layout-border.layout-bottom > span",
-        property: "border-bottom-width",
-        value: undefined
-      },
-      borderLeft: {
-        selector: ".layout-border.layout-left > span",
-        property: "border-left-width",
-        value: undefined
-      },
-      borderRight: {
-        selector: ".layout-border.layout-right > span",
-        property: "border-right-width",
-        value: undefined
-      }
+      position: {selector: "#element-position",
+                 property: "position",
+                 value: undefined},
+      marginTop: {selector: ".margin.top > span",
+                  property: "margin-top",
+                  value: undefined},
+      marginBottom: {selector: ".margin.bottom > span",
+                  property: "margin-bottom",
+                  value: undefined},
+      marginLeft: {selector: ".margin.left > span",
+                  property: "margin-left",
+                  value: undefined},
+      marginRight: {selector: ".margin.right > span",
+                  property: "margin-right",
+                  value: undefined},
+      paddingTop: {selector: ".padding.top > span",
+                  property: "padding-top",
+                  value: undefined},
+      paddingBottom: {selector: ".padding.bottom > span",
+                  property: "padding-bottom",
+                  value: undefined},
+      paddingLeft: {selector: ".padding.left > span",
+                  property: "padding-left",
+                  value: undefined},
+      paddingRight: {selector: ".padding.right > span",
+                  property: "padding-right",
+                  value: undefined},
+      borderTop: {selector: ".border.top > span",
+                  property: "border-top-width",
+                  value: undefined},
+      borderBottom: {selector: ".border.bottom > span",
+                  property: "border-bottom-width",
+                  value: undefined},
+      borderLeft: {selector: ".border.left > span",
+                  property: "border-left-width",
+                  value: undefined},
+      borderRight: {selector: ".border.right > span",
+                  property: "border-right-width",
+                  value: undefined}
     };
 
     // Make each element the dimensions editable
     for (let i in this.map) {
       if (i == "position") {
         continue;
       }
 
@@ -240,34 +214,16 @@ LayoutView.prototype = {
       editableItem({
         element: this.doc.querySelector(dimension.selector)
       }, (element, event) => {
         this.initEditor(element, event, dimension);
       });
     }
 
     this.onNewNode();
-
-    // Mark document as RTL or LTR:
-    let chromeReg = Cc["@mozilla.org/chrome/chrome-registry;1"]
-                    .getService(Ci.nsIXULChromeRegistry);
-    let dir = chromeReg.isLocaleRTL("global");
-    let container = this.doc.getElementById("layout-container");
-    container.setAttribute("dir", dir ? "rtl" : "ltr");
-  },
-
-  initBoxModelHighlighter: function() {
-    let highlightElts = this.doc.querySelectorAll("#layout-container *[title]");
-    this.onHighlightMouseOver = this.onHighlightMouseOver.bind(this);
-    this.onHighlightMouseOut = this.onHighlightMouseOut.bind(this);
-
-    for (let element of highlightElts) {
-      element.addEventListener("mouseover", this.onHighlightMouseOver, true);
-      element.addEventListener("mouseout", this.onHighlightMouseOut, true);
-    }
   },
 
   /**
    * Start listening to reflows in the current tab.
    */
   trackReflows: function() {
     if (!this.reflowFront) {
       let toolbox = this.inspector.toolbox;
@@ -295,25 +251,25 @@ LayoutView.prototype = {
     this.reflowFront.stop();
   },
 
   /**
    * Called when the user clicks on one of the editable values in the layoutview
    */
   initEditor: function(element, event, dimension) {
     let { property } = dimension;
-    let session = new EditingSession(this.doc, this.elementRules);
+    let session = new EditingSession(document, this.elementRules);
     let initialValue = session.getProperty(property);
 
     let editor = new InplaceEditor({
       element: element,
       initial: initialValue,
 
       start: editor => {
-        editor.elt.parentNode.classList.add("layout-editing");
+        editor.elt.parentNode.classList.add("editing");
       },
 
       change: value => {
         if (NUMERIC.test(value)) {
           value += "px";
         }
 
         let properties = [
@@ -327,17 +283,17 @@ LayoutView.prototype = {
             properties.push({ name: bprop, value: "solid" });
           }
         }
 
         session.setProperties(properties);
       },
 
       done: (value, commit) => {
-        editor.elt.parentNode.classList.remove("layout-editing");
+        editor.elt.parentNode.classList.remove("editing");
         if (!commit) {
           session.revert();
           session.destroy();
         }
       }
     }, event);
   },
 
@@ -360,23 +316,16 @@ LayoutView.prototype = {
            this.inspector.selection.isConnected() &&
            this.inspector.selection.isElementNode();
   },
 
   /**
    * Destroy the nodes. Remove listeners.
    */
   destroy: function() {
-    let highlightElts = this.doc.querySelectorAll("#layout-container *[title]");
-
-    for (let element of highlightElts) {
-      element.removeEventListener("mouseover", this.onHighlightMouseOver, true);
-      element.removeEventListener("mouseout", this.onHighlightMouseOut, true);
-    }
-
     this.inspector.sidebar.off("layoutview-selected", this.onNewNode);
     this.inspector.selection.off("new-node-front", this.onNewSelection);
     this.inspector.sidebar.off("select", this.onSidebarSelect);
 
     this.sizeHeadingLabel = null;
     this.sizeLabel = null;
     this.inspector = null;
     this.doc = null;
@@ -406,47 +355,28 @@ LayoutView.prototype = {
   /**
    * @return a promise that resolves when the view has been updated
    */
   onNewNode: function() {
     this.setActive(this.isViewVisibleAndNodeValid());
     return this.update();
   },
 
-  onHighlightMouseOver: function(e) {
-    let region = e.target.getAttribute("data-box");
-    if (!region) {
-      return;
-    }
-
-    this.showBoxModel({
-      region,
-      showOnly: region,
-      onlyRegionArea: true
-    });
-  },
-
-  onHighlightMouseOut: function() {
-    this.hideBoxModel();
-  },
-
   /**
    * Stop tracking reflows and hide all values when no node is selected or the
    * layout-view is hidden, otherwise track reflows and show values.
    * @param {Boolean} isActive
    */
   setActive: function(isActive) {
     if (isActive === this.isActive) {
       return;
     }
     this.isActive = isActive;
 
-    let panel = this.doc.getElementById("sidebar-panel-layoutview");
-    panel.classList.toggle("inactive", !isActive);
-
+    this.doc.body.classList.toggle("inactive", !isActive);
     if (isActive) {
       this.trackReflows();
     } else {
       this.untrackReflows();
     }
   },
 
   /**
@@ -601,17 +531,69 @@ LayoutView.prototype = {
     let toolbox = this.inspector.toolbox;
 
     toolbox.highlighterUtils.unhighlight();
   },
 
   manageOverflowingText: function(span) {
     let classList = span.parentNode.classList;
 
-    if (classList.contains("layout-left") ||
-        classList.contains("layout-right")) {
+    if (classList.contains("left") || classList.contains("right")) {
       let force = span.textContent.length > LONG_TEXT_ROTATE_LIMIT;
-      classList.toggle("layout-rotate", force);
+      classList.toggle("rotate", force);
     }
   }
 };
 
-exports.LayoutView = LayoutView;
+var elts;
+
+var onmouseover = function(e) {
+  let region = e.target.getAttribute("data-box");
+  if (!region) {
+    return false;
+  }
+
+  this.layoutview.showBoxModel({
+    region,
+    showOnly: region,
+    onlyRegionArea: true
+  });
+
+  return false;
+}.bind(window);
+
+var onmouseout = function() {
+  this.layoutview.hideBoxModel();
+  return false;
+}.bind(window);
+
+window.setPanel = function(panel) {
+  this.layoutview = new LayoutView(panel, window);
+
+  // Box model highlighter mechanism
+  elts = document.querySelectorAll("*[title]");
+  for (let i = 0; i < elts.length; i++) {
+    let elt = elts[i];
+    elt.addEventListener("mouseover", onmouseover, true);
+    elt.addEventListener("mouseout", onmouseout, true);
+  }
+
+  // Mark document as RTL or LTR:
+  let chromeReg = Cc["@mozilla.org/chrome/chrome-registry;1"]
+                  .getService(Ci.nsIXULChromeRegistry);
+  let dir = chromeReg.isLocaleRTL("global");
+  document.body.setAttribute("dir", dir ? "rtl" : "ltr");
+
+  window.parent.postMessage("layoutview-ready", "*");
+};
+
+window.onunload = function() {
+  if (this.layoutview) {
+    this.layoutview.destroy();
+  }
+  if (elts) {
+    for (let i = 0; i < elts.length; i++) {
+      let elt = elts[i];
+      elt.removeEventListener("mouseover", onmouseover, true);
+      elt.removeEventListener("mouseout", onmouseout, true);
+    }
+  }
+};
diff --git a/devtools/client/inspector/layout/test/browser_layout.js b/devtools/client/inspector/layout/test/browser_layout.js
--- a/devtools/client/inspector/layout/test/browser_layout.js
+++ b/devtools/client/inspector/layout/test/browser_layout.js
@@ -4,136 +4,52 @@
 
 "use strict";
 
 // Test that the layout-view displays the right values and that it updates when
 // the node's style is changed
 
 // Expected values:
 var res1 = [
-  {
-    selector: "#layout-element-size",
-    value: "160" + "\u00D7" + "160.117"
-  },
-  {
-    selector: ".layout-size > span",
-    value: "100" + "\u00D7" + "100.117"
-  },
-  {
-    selector: ".layout-margin.layout-top > span",
-    value: 30
-  },
-  {
-    selector: ".layout-margin.layout-left > span",
-    value: "auto"
-  },
-  {
-    selector: ".layout-margin.layout-bottom > span",
-    value: 30
-  },
-  {
-    selector: ".layout-margin.layout-right > span",
-    value: "auto"
-  },
-  {
-    selector: ".layout-padding.layout-top > span",
-    value: 20
-  },
-  {
-    selector: ".layout-padding.layout-left > span",
-    value: 20
-  },
-  {
-    selector: ".layout-padding.layout-bottom > span",
-    value: 20
-  },
-  {
-    selector: ".layout-padding.layout-right > span",
-    value: 20
-  },
-  {
-    selector: ".layout-border.layout-top > span",
-    value: 10
-  },
-  {
-    selector: ".layout-border.layout-left > span",
-    value: 10
-  },
-  {
-    selector: ".layout-border.layout-bottom > span",
-    value: 10
-  },
-  {
-    selector: ".layout-border.layout-right > span",
-    value: 10
-  },
+      {selector: "#element-size",              value: "160" + "\u00D7" + "160.117"},
+      {selector: ".size > span",               value: "100" + "\u00D7" + "100.117"},
+      {selector: ".margin.top > span",         value: 30},
+      {selector: ".margin.left > span",        value: "auto"},
+      {selector: ".margin.bottom > span",      value: 30},
+      {selector: ".margin.right > span",       value: "auto"},
+      {selector: ".padding.top > span",        value: 20},
+      {selector: ".padding.left > span",       value: 20},
+      {selector: ".padding.bottom > span",     value: 20},
+      {selector: ".padding.right > span",      value: 20},
+      {selector: ".border.top > span",         value: 10},
+      {selector: ".border.left > span",        value: 10},
+      {selector: ".border.bottom > span",      value: 10},
+      {selector: ".border.right > span",       value: 10},
 ];
 
 var res2 = [
-  {
-    selector: "#layout-element-size",
-    value: "190" + "\u00D7" + "210"
-  },
-  {
-    selector: ".layout-size > span",
-    value: "100" + "\u00D7" + "150"
-  },
-  {
-    selector: ".layout-margin.layout-top > span",
-    value: 30
-  },
-  {
-    selector: ".layout-margin.layout-left > span",
-    value: "auto"
-  },
-  {
-    selector: ".layout-margin.layout-bottom > span",
-    value: 30
-  },
-  {
-    selector: ".layout-margin.layout-right > span",
-    value: "auto"
-  },
-  {
-    selector: ".layout-padding.layout-top > span",
-    value: 20
-  },
-  {
-    selector: ".layout-padding.layout-left > span",
-    value: 20
-  },
-  {
-    selector: ".layout-padding.layout-bottom > span",
-    value: 20
-  },
-  {
-    selector: ".layout-padding.layout-right > span",
-    value: 50
-  },
-  {
-    selector: ".layout-border.layout-top > span",
-    value: 10
-  },
-  {
-    selector: ".layout-border.layout-left > span",
-    value: 10
-  },
-  {
-    selector: ".layout-border.layout-bottom > span",
-    value: 10
-  },
-  {
-    selector: ".layout-border.layout-right > span",
-    value: 10
-  },
+      {selector: "#element-size",              value: "190" + "\u00D7" + "210"},
+      {selector: ".size > span",               value: "100" + "\u00D7" + "150"},
+      {selector: ".margin.top > span",         value: 30},
+      {selector: ".margin.left > span",        value: "auto"},
+      {selector: ".margin.bottom > span",      value: 30},
+      {selector: ".margin.right > span",       value: "auto"},
+      {selector: ".padding.top > span",        value: 20},
+      {selector: ".padding.left > span",       value: 20},
+      {selector: ".padding.bottom > span",     value: 20},
+      {selector: ".padding.right > span",      value: 50},
+      {selector: ".border.top > span",         value: 10},
+      {selector: ".border.left > span",        value: 10},
+      {selector: ".border.bottom > span",      value: 10},
+      {selector: ".border.right > span",       value: 10},
 ];
 
 add_task(function*() {
   let style = "div { position: absolute; top: 42px; left: 42px; height: 100.111px; width: 100px; border: 10px solid black; padding: 20px; margin: 30px auto;}";
-  let html = "<style>" + style + "</style><div></div>";
+  let html = "<style>" + style + "</style><div></div>"
 
   yield addTab("data:text/html," + encodeURIComponent(html));
   let {toolbox, inspector, view} = yield openLayoutView();
   yield selectNode("div", inspector);
 
   yield runTests(inspector, view);
 });
 
diff --git a/devtools/client/inspector/layout/test/browser_layout_editablemodel.js b/devtools/client/inspector/layout/test/browser_layout_editablemodel.js
--- a/devtools/client/inspector/layout/test/browser_layout_editablemodel.js
+++ b/devtools/client/inspector/layout/test/browser_layout_editablemodel.js
@@ -31,17 +31,17 @@ add_task(function*() {
 });
 
 addTest("Test that editing margin dynamically updates the document, pressing escape cancels the changes",
 function*(inspector, view) {
   let node = content.document.getElementById("div1");
   is(getStyle(node, "margin-top"), "", "Should be no margin-top on the element.")
   yield selectNode("#div1", inspector);
 
-  let span = view.doc.querySelector(".layout-margin.layout-top > span");
+  let span = view.doc.querySelector(".margin.top > span");
   is(span.textContent, 5, "Should have the right value in the box model.");
 
   EventUtils.synthesizeMouseAtCenter(span, {}, view.doc.defaultView);
   let editor = view.doc.querySelector(".styleinspector-propertyeditor");
   ok(editor, "Should have opened the editor.");
   is(editor.value, "5px", "Should have the right value in the editor.");
 
   EventUtils.synthesizeKey("3", {}, view.doc.defaultView);
@@ -57,17 +57,17 @@ function*(inspector, view) {
 });
 
 addTest("Test that arrow keys work correctly and pressing enter commits the changes",
 function*(inspector, view) {
   let node = content.document.getElementById("div1");
   is(getStyle(node, "margin-left"), "", "Should be no margin-top on the element.")
   yield selectNode("#div1", inspector);
 
-  let span = view.doc.querySelector(".layout-margin.layout-left > span");
+  let span = view.doc.querySelector(".margin.left > span");
   is(span.textContent, 10, "Should have the right value in the box model.");
 
   EventUtils.synthesizeMouseAtCenter(span, {}, view.doc.defaultView);
   let editor = view.doc.querySelector(".styleinspector-propertyeditor");
   ok(editor, "Should have opened the editor.");
   is(editor.value, "10px", "Should have the right value in the editor.");
 
   EventUtils.synthesizeKey("VK_UP", {}, view.doc.defaultView);
@@ -94,17 +94,17 @@ function*(inspector, view) {
 });
 
 addTest("Test that deleting the value removes the property but escape undoes that",
 function*(inspector, view) {
   let node = content.document.getElementById("div1");
   is(getStyle(node, "margin-left"), "20px", "Should be the right margin-top on the element.")
   yield selectNode("#div1", inspector);
 
-  let span = view.doc.querySelector(".layout-margin.layout-left > span");
+  let span = view.doc.querySelector(".margin.left > span");
   is(span.textContent, 20, "Should have the right value in the box model.");
 
   EventUtils.synthesizeMouseAtCenter(span, {}, view.doc.defaultView);
   let editor = view.doc.querySelector(".styleinspector-propertyeditor");
   ok(editor, "Should have opened the editor.");
   is(editor.value, "20px", "Should have the right value in the editor.");
 
   EventUtils.synthesizeKey("VK_DELETE", {}, view.doc.defaultView);
@@ -124,17 +124,17 @@ addTest("Test that deleting the value re
 function*(inspector, view) {
   let node = content.document.getElementById("div1");
 
   node.style.marginRight = "15px";
   yield waitForUpdate(inspector);
 
   yield selectNode("#div1", inspector);
 
-  let span = view.doc.querySelector(".layout-margin.layout-right > span");
+  let span = view.doc.querySelector(".margin.right > span");
   is(span.textContent, 15, "Should have the right value in the box model.");
 
   EventUtils.synthesizeMouseAtCenter(span, {}, view.doc.defaultView);
   let editor = view.doc.querySelector(".styleinspector-propertyeditor");
   ok(editor, "Should have opened the editor.");
   is(editor.value, "15px", "Should have the right value in the editor.");
 
   EventUtils.synthesizeKey("VK_DELETE", {}, view.doc.defaultView);
@@ -150,17 +150,17 @@ function*(inspector, view) {
 });
 
 addTest("Test that clicking in the editor input does not remove focus",
 function*(inspector, view) {
   let node = content.document.getElementById("div4");
 
   yield selectNode("#div4", inspector);
 
-  let span = view.doc.querySelector(".layout-margin.layout-top > span");
+  let span = view.doc.querySelector(".margin.top > span");
   is(span.textContent, 1, "Should have the right value in the box model.");
 
   EventUtils.synthesizeMouseAtCenter(span, {}, view.doc.defaultView);
   let editor = view.doc.querySelector(".styleinspector-propertyeditor");
   ok(editor, "Should have opened the editor.");
 
   info("Click in the already opened editor input");
   EventUtils.synthesizeMouseAtCenter(editor, {}, view.doc.defaultView);
diff --git a/devtools/client/inspector/layout/test/browser_layout_editablemodel_allproperties.js b/devtools/client/inspector/layout/test/browser_layout_editablemodel_allproperties.js
--- a/devtools/client/inspector/layout/test/browser_layout_editablemodel_allproperties.js
+++ b/devtools/client/inspector/layout/test/browser_layout_editablemodel_allproperties.js
@@ -29,17 +29,17 @@ addTest("When all properties are set on 
 function*(inspector, view) {
   let node = content.document.getElementById("div1");
 
   node.style.padding = "5px";
   yield waitForUpdate(inspector);
 
   yield selectNode("#div1", inspector);
 
-  let span = view.doc.querySelector(".layout-padding.layout-bottom > span");
+  let span = view.doc.querySelector(".padding.bottom > span");
   is(span.textContent, 5, "Should have the right value in the box model.");
 
   EventUtils.synthesizeMouseAtCenter(span, {}, view.doc.defaultView);
   let editor = view.doc.querySelector(".styleinspector-propertyeditor");
   ok(editor, "Should have opened the editor.");
   is(editor.value, "5px", "Should have the right value in the editor.");
 
   EventUtils.synthesizeKey("7", {}, view.doc.defaultView);
@@ -58,17 +58,17 @@ addTest("When all properties are set on 
 function*(inspector, view) {
   let node = content.document.getElementById("div1");
 
   node.style.padding = "5px";
   yield waitForUpdate(inspector);
 
   yield selectNode("#div1", inspector);
 
-  let span = view.doc.querySelector(".layout-padding.layout-left > span");
+  let span = view.doc.querySelector(".padding.left > span");
   is(span.textContent, 5, "Should have the right value in the box model.");
 
   EventUtils.synthesizeMouseAtCenter(span, {}, view.doc.defaultView);
   let editor = view.doc.querySelector(".styleinspector-propertyeditor");
   ok(editor, "Should have opened the editor.");
   is(editor.value, "5px", "Should have the right value in the editor.");
 
   EventUtils.synthesizeKey("8", {}, view.doc.defaultView);
@@ -87,17 +87,17 @@ function*(inspector, view) {
 addTest("When all properties are set on the node deleting one should work",
 function*(inspector, view) {
   let node = content.document.getElementById("div1");
 
   node.style.padding = "5px";
 
   yield selectNode("#div1", inspector);
 
-  let span = view.doc.querySelector(".layout-padding.layout-left > span");
+  let span = view.doc.querySelector(".padding.left > span");
   is(span.textContent, 5, "Should have the right value in the box model.");
 
   EventUtils.synthesizeMouseAtCenter(span, {}, view.doc.defaultView);
   let editor = view.doc.querySelector(".styleinspector-propertyeditor");
   ok(editor, "Should have opened the editor.");
   is(editor.value, "5px", "Should have the right value in the editor.");
 
   EventUtils.synthesizeKey("VK_DELETE", {}, view.doc.defaultView);
@@ -116,17 +116,17 @@ addTest("When all properties are set on 
 function*(inspector, view) {
   let node = content.document.getElementById("div1");
 
   node.style.padding = "5px";
   yield waitForUpdate(inspector);
 
   yield selectNode("#div1", inspector);
 
-  let span = view.doc.querySelector(".layout-padding.layout-left > span");
+  let span = view.doc.querySelector(".padding.left > span");
   is(span.textContent, 5, "Should have the right value in the box model.");
 
   EventUtils.synthesizeMouseAtCenter(span, {}, view.doc.defaultView);
   let editor = view.doc.querySelector(".styleinspector-propertyeditor");
   ok(editor, "Should have opened the editor.");
   is(editor.value, "5px", "Should have the right value in the editor.");
 
   EventUtils.synthesizeKey("VK_DELETE", {}, view.doc.defaultView);
diff --git a/devtools/client/inspector/layout/test/browser_layout_editablemodel_border.js b/devtools/client/inspector/layout/test/browser_layout_editablemodel_border.js
--- a/devtools/client/inspector/layout/test/browser_layout_editablemodel_border.js
+++ b/devtools/client/inspector/layout/test/browser_layout_editablemodel_border.js
@@ -22,17 +22,17 @@ add_task(function*() {
   yield addTab("data:text/html," + encodeURIComponent(TEST_URI));
   let {toolbox, inspector, view} = yield openLayoutView();
 
   let node = content.document.getElementById("div1");
   is(getStyle(node, "border-top-width"), "", "Should have the right border");
   is(getStyle(node, "border-top-style"), "", "Should have the right border");
   yield selectNode("#div1", inspector);
 
-  let span = view.doc.querySelector(".layout-border.layout-top > span");
+  let span = view.doc.querySelector(".border.top > span");
   is(span.textContent, 0, "Should have the right value in the box model.");
 
   EventUtils.synthesizeMouseAtCenter(span, {}, view.doc.defaultView);
   let editor = view.doc.querySelector(".styleinspector-propertyeditor");
   ok(editor, "Should have opened the editor.");
   is(editor.value, "0", "Should have the right value in the editor.");
 
   EventUtils.synthesizeKey("1", {}, view.doc.defaultView);
diff --git a/devtools/client/inspector/layout/test/browser_layout_editablemodel_stylerules.js b/devtools/client/inspector/layout/test/browser_layout_editablemodel_stylerules.js
--- a/devtools/client/inspector/layout/test/browser_layout_editablemodel_stylerules.js
+++ b/devtools/client/inspector/layout/test/browser_layout_editablemodel_stylerules.js
@@ -27,17 +27,17 @@ add_task(function*() {
 });
 
 addTest("Test that entering units works",
 function*(inspector, view) {
   let node = content.document.getElementById("div1");
   is(getStyle(node, "padding-top"), "", "Should have the right padding");
   yield selectNode("#div1", inspector);
 
-  let span = view.doc.querySelector(".layout-padding.layout-top > span");
+  let span = view.doc.querySelector(".padding.top > span");
   is(span.textContent, 3, "Should have the right value in the box model.");
 
   EventUtils.synthesizeMouseAtCenter(span, {}, view.doc.defaultView);
   let editor = view.doc.querySelector(".styleinspector-propertyeditor");
   ok(editor, "Should have opened the editor.");
   is(editor.value, "3px", "Should have the right value in the editor.");
 
   EventUtils.synthesizeKey("1", {}, view.doc.defaultView);
@@ -60,17 +60,17 @@ function*(inspector, view) {
 });
 
 addTest("Test that we pick up the value from a higher style rule",
 function*(inspector, view) {
   let node = content.document.getElementById("div2");
   is(getStyle(node, "border-bottom-width"), "", "Should have the right border-bottom-width");
   yield selectNode("#div2", inspector);
 
-  let span = view.doc.querySelector(".layout-border.layout-bottom > span");
+  let span = view.doc.querySelector(".border.bottom > span");
   is(span.textContent, 16, "Should have the right value in the box model.");
 
   EventUtils.synthesizeMouseAtCenter(span, {}, view.doc.defaultView);
   let editor = view.doc.querySelector(".styleinspector-propertyeditor");
   ok(editor, "Should have opened the editor.");
   is(editor.value, "1em", "Should have the right value in the editor.");
 
   EventUtils.synthesizeKey("0", {}, view.doc.defaultView);
@@ -86,17 +86,17 @@ function*(inspector, view) {
 });
 
 addTest("Test that shorthand properties are parsed correctly",
 function*(inspector, view) {
   let node = content.document.getElementById("div3");
   is(getStyle(node, "padding-right"), "", "Should have the right padding");
   yield selectNode("#div3", inspector);
 
-  let span = view.doc.querySelector(".layout-padding.layout-right > span");
+  let span = view.doc.querySelector(".padding.right > span");
   is(span.textContent, 32, "Should have the right value in the box model.");
 
   EventUtils.synthesizeMouseAtCenter(span, {}, view.doc.defaultView);
   let editor = view.doc.querySelector(".styleinspector-propertyeditor");
   ok(editor, "Should have opened the editor.");
   is(editor.value, "2em", "Should have the right value in the editor.");
 
   EventUtils.synthesizeKey("VK_RETURN", {}, view.doc.defaultView);
diff --git a/devtools/client/inspector/layout/test/browser_layout_guides.js b/devtools/client/inspector/layout/test/browser_layout_guides.js
--- a/devtools/client/inspector/layout/test/browser_layout_guides.js
+++ b/devtools/client/inspector/layout/test/browser_layout_guides.js
@@ -22,26 +22,26 @@ add_task(function*() {
   yield selectNode("div", inspector);
 
   // Mock the highlighter by replacing the showBoxModel method.
   toolbox.highlighter.showBoxModel = function(nodeFront, options) {
     highlightedNodeFront = nodeFront;
     highlighterOptions = options;
   }
 
-  let elt = view.doc.getElementById("layout-margins");
+  let elt = view.doc.getElementById("margins");
   yield testGuideOnLayoutHover(elt, "margin", inspector, view);
 
-  elt = view.doc.getElementById("layout-borders");
+  elt = view.doc.getElementById("borders");
   yield testGuideOnLayoutHover(elt, "border", inspector, view);
 
-  elt = view.doc.getElementById("layout-padding");
+  elt = view.doc.getElementById("padding");
   yield testGuideOnLayoutHover(elt, "padding", inspector, view);
 
-  elt = view.doc.getElementById("layout-content");
+  elt = view.doc.getElementById("content");
   yield testGuideOnLayoutHover(elt, "content", inspector, view);
 });
 
 function* testGuideOnLayoutHover(elt, expectedRegion, inspector, view) {
   info("Synthesizing mouseover on the layout-view");
   EventUtils.synthesizeMouse(elt, 2, 2, {type:'mouseover'},
     elt.ownerDocument.defaultView);
 
diff --git a/devtools/client/inspector/layout/test/browser_layout_rotate-labels-on-sides.js b/devtools/client/inspector/layout/test/browser_layout_rotate-labels-on-sides.js
--- a/devtools/client/inspector/layout/test/browser_layout_rotate-labels-on-sides.js
+++ b/devtools/client/inspector/layout/test/browser_layout_rotate-labels-on-sides.js
@@ -2,28 +2,28 @@
 /* Any copyright is dedicated to the Public Domain.
  http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
 // Test that longer values are rotated on the side
 
 const res1 = [
-  {selector: ".layout-margin.layout-top > span",         value: 30},
-  {selector: ".layout-margin.layout-left > span",        value: "auto"},
-  {selector: ".layout-margin.layout-bottom > span",      value: 30},
-  {selector: ".layout-margin.layout-right > span",       value: "auto"},
-  {selector: ".layout-padding.layout-top > span",        value: 20},
-  {selector: ".layout-padding.layout-left > span",       value: 2000000},
-  {selector: ".layout-padding.layout-bottom > span",     value: 20},
-  {selector: ".layout-padding.layout-right > span",      value: 20},
-  {selector: ".layout-border.layout-top > span",         value: 10},
-  {selector: ".layout-border.layout-left > span",        value: 10},
-  {selector: ".layout-border.layout-bottom > span",      value: 10},
-  {selector: ".layout-border.layout-right > span",       value: 10},
+  {selector: ".margin.top > span",         value: 30},
+  {selector: ".margin.left > span",        value: "auto"},
+  {selector: ".margin.bottom > span",      value: 30},
+  {selector: ".margin.right > span",       value: "auto"},
+  {selector: ".padding.top > span",        value: 20},
+  {selector: ".padding.left > span",       value: 2000000},
+  {selector: ".padding.bottom > span",     value: 20},
+  {selector: ".padding.right > span",      value: 20},
+  {selector: ".border.top > span",         value: 10},
+  {selector: ".border.left > span",        value: 10},
+  {selector: ".border.bottom > span",      value: 10},
+  {selector: ".border.right > span",       value: 10},
 ];
 
 const TEST_URI = encodeURIComponent([
   "<style>",
   "div{border:10px solid black; padding: 20px 20px 20px 2000000px; margin: 30px auto;}",
   "</style>",
   "<div></div>"
 ].join(""));
@@ -32,17 +32,15 @@ const LONG_TEXT_ROTATE_LIMIT = 3;
 add_task(function*() {
   yield addTab("data:text/html," + TEST_URI);
   let {toolbox, inspector, view} = yield openLayoutView();
   yield selectNode("div", inspector);
 
   for (let i = 0; i < res1.length; i++) {
     let elt = view.doc.querySelector(res1[i].selector);
     let isLong = elt.textContent.length > LONG_TEXT_ROTATE_LIMIT;
-    let classList = elt.parentNode.classList;
-    let canBeRotated = classList.contains("layout-left") ||
-                       classList.contains("layout-right");
-    let isRotated = classList.contains("layout-rotate");
+    let classList = elt.parentNode.classList
+    let canBeRotated = classList.contains("left") || classList.contains("right");
+    let isRotated = classList.contains("rotate");
 
-    is(canBeRotated && isLong,
-      isRotated, res1[i].selector + " correctly rotated.");
+    is(canBeRotated && isLong, isRotated, res1[i].selector + " correctly rotated.");
   }
 });
diff --git a/devtools/client/inspector/layout/test/browser_layout_tooltips.js b/devtools/client/inspector/layout/test/browser_layout_tooltips.js
--- a/devtools/client/inspector/layout/test/browser_layout_tooltips.js
+++ b/devtools/client/inspector/layout/test/browser_layout_tooltips.js
@@ -71,34 +71,34 @@ const VALUES_TEST_DATA = [{
 }];
 
 add_task(function*() {
   yield addTab("data:text/html;charset=utf-8," + encodeURIComponent(TEST_URI));
   let {toolbox, inspector, view} = yield openLayoutView();
 
   info("Checking the regions tooltips");
 
-  ok(view.doc.querySelector("#layout-margins").hasAttribute("title"),
+  ok(view.doc.querySelector("#margins").hasAttribute("title"),
     "The margin region has a tooltip");
-  is(view.doc.querySelector("#layout-margins").getAttribute("title"), "margin",
+  is(view.doc.querySelector("#margins").getAttribute("title"), "margin",
     "The margin region has the correct tooltip content");
 
-  ok(view.doc.querySelector("#layout-borders").hasAttribute("title"),
+  ok(view.doc.querySelector("#borders").hasAttribute("title"),
     "The border region has a tooltip");
-  is(view.doc.querySelector("#layout-borders").getAttribute("title"), "border",
+  is(view.doc.querySelector("#borders").getAttribute("title"), "border",
     "The border region has the correct tooltip content");
 
-  ok(view.doc.querySelector("#layout-padding").hasAttribute("title"),
+  ok(view.doc.querySelector("#padding").hasAttribute("title"),
     "The padding region has a tooltip");
-  is(view.doc.querySelector("#layout-padding").getAttribute("title"), "padding",
+  is(view.doc.querySelector("#padding").getAttribute("title"), "padding",
     "The padding region has the correct tooltip content");
 
-  ok(view.doc.querySelector("#layout-content").hasAttribute("title"),
+  ok(view.doc.querySelector("#content").hasAttribute("title"),
     "The content region has a tooltip");
-  is(view.doc.querySelector("#layout-content").getAttribute("title"), "content",
+  is(view.doc.querySelector("#content").getAttribute("title"), "content",
     "The content region has the correct tooltip content");
 
   for (let {selector, values} of VALUES_TEST_DATA) {
     info("Selecting " + selector + " and checking the values tooltips");
     yield selectNode(selector, inspector);
 
     info("Iterate over all values");
     for (let key in view.map) {
diff --git a/devtools/client/inspector/layout/test/browser_layout_update-after-navigation.js b/devtools/client/inspector/layout/test/browser_layout_update-after-navigation.js
--- a/devtools/client/inspector/layout/test/browser_layout_update-after-navigation.js
+++ b/devtools/client/inspector/layout/test/browser_layout_update-after-navigation.js
@@ -14,17 +14,17 @@ add_task(function*() {
 });
 
 addTest("Test that the layout-view works on the first page",
 function*(inspector, view) {
   info("Selecting the test node");
   yield selectNode("p", inspector);
 
   info("Checking that the layout-view shows the right value");
-  let paddingElt = view.doc.querySelector(".layout-padding.layout-top > span");
+  let paddingElt = view.doc.querySelector(".padding.top > span");
   is(paddingElt.textContent, "50");
 
   info("Listening for layout-view changes and modifying the padding");
   let onUpdated = waitForUpdate(inspector);
   getNode("p").style.padding = "20px";
   yield onUpdated;
   ok(true, "Layout-view got updated");
 
@@ -39,17 +39,17 @@ function*(inspector, view) {
 });
 
 addTest("Test that the layout-view works on the second page",
 function*(inspector, view) {
   info("Selecting the test node");
   yield selectNode("p", inspector);
 
   info("Checking that the layout-view shows the right value");
-  let sizeElt = view.doc.querySelector(".layout-size > span");
+  let sizeElt = view.doc.querySelector(".size > span");
   is(sizeElt.textContent, "100" + "\u00D7" + "100");
 
   info("Listening for layout-view changes and modifying the size");
   let onUpdated = waitForUpdate(inspector);
   getNode("p").style.width = "200px";
   yield onUpdated;
   ok(true, "Layout-view got updated");
 
@@ -65,17 +65,17 @@ function*(inspector, view) {
 
 addTest("Test that the layout-view works on the first page after going back",
 function*(inspector, view) {
   info("Selecting the test node");
   yield selectNode("p", inspector);
 
   info("Checking that the layout-view shows the right value, which is the" +
     "modified value from step one because of the bfcache");
-  let paddingElt = view.doc.querySelector(".layout-padding.layout-top > span");
+  let paddingElt = view.doc.querySelector(".padding.top > span");
   is(paddingElt.textContent, "20");
 
   info("Listening for layout-view changes and modifying the padding");
   let onUpdated = waitForUpdate(inspector);
   getNode("p").style.padding = "100px";
   yield onUpdated;
   ok(true, "Layout-view got updated");
 
diff --git a/devtools/client/inspector/layout/test/browser_layout_update-after-reload.js b/devtools/client/inspector/layout/test/browser_layout_update-after-reload.js
--- a/devtools/client/inspector/layout/test/browser_layout_update-after-reload.js
+++ b/devtools/client/inspector/layout/test/browser_layout_update-after-reload.js
@@ -21,17 +21,17 @@ add_task(function*() {
   yield assertLayoutView(inspector, view);
 });
 
 function* assertLayoutView(inspector, view) {
   info("Selecting the test node");
   yield selectNode("p", inspector);
 
   info("Checking that the layout-view shows the right value");
-  let paddingElt = view.doc.querySelector(".layout-padding.layout-top > span");
+  let paddingElt = view.doc.querySelector(".padding.top > span");
   is(paddingElt.textContent, "50");
 
   info("Listening for layout-view changes and modifying the padding");
   let onUpdated = waitForUpdate(inspector);
   getNode("p").style.padding = "20px";
   yield onUpdated;
   ok(true, "Layout-view got updated");
 
diff --git a/devtools/client/inspector/layout/test/browser_layout_update-in-iframes.js b/devtools/client/inspector/layout/test/browser_layout_update-in-iframes.js
--- a/devtools/client/inspector/layout/test/browser_layout_update-in-iframes.js
+++ b/devtools/client/inspector/layout/test/browser_layout_update-in-iframes.js
@@ -17,17 +17,17 @@ add_task(function*() {
 
 addTest("Test that resizing an element in an iframe updates its box model",
 function*(inspector, view, iframe2) {
   info("Selecting the nested test node");
   let node = iframe2.contentDocument.querySelector("div");
   yield selectNodeInIframe2("div", inspector);
 
   info("Checking that the layout-view shows the right value");
-  let sizeElt = view.doc.querySelector(".layout-size > span");
+  let sizeElt = view.doc.querySelector(".size > span");
   is(sizeElt.textContent, "400\u00D7200");
 
   info("Listening for layout-view changes and modifying its size");
   let onUpdated = waitForUpdate(inspector);
   node.style.width = "200px";
   yield onUpdated;
   ok(true, "Layout-view got updated");
 
@@ -41,17 +41,17 @@ function*(inspector, view, iframe2) {
   iframe2.remove();
   yield inspector.once("inspector-updated");
 
   info("Selecting the test node in iframe1");
   let node = getNode("iframe").contentDocument.querySelector("p");
   yield selectNodeInIframe1("p", inspector);
 
   info("Checking that the layout-view shows the right value");
-  let sizeElt = view.doc.querySelector(".layout-size > span");
+  let sizeElt = view.doc.querySelector(".size > span");
   is(sizeElt.textContent, "100\u00D7100");
 
   info("Listening for layout-view changes and modifying its size");
   let onUpdated = waitForUpdate(inspector);
   node.style.width = "200px";
   yield onUpdated;
   ok(true, "Layout-view got updated");
 
diff --git a/devtools/client/inspector/layout/test/head.js b/devtools/client/inspector/layout/test/head.js
--- a/devtools/client/inspector/layout/test/head.js
+++ b/devtools/client/inspector/layout/test/head.js
@@ -47,34 +47,30 @@ function selectAndHighlightNode(nodeOrSe
 
 /**
  * Open the toolbox, with the inspector tool visible, and the layout-view
  * sidebar tab selected.
  * @return a promise that resolves when the inspector is ready and the layout
  * view is visible and ready
  */
 function openLayoutView() {
-  return openInspectorSidebarTab("layoutview").then(({toolbox, inspector}) => {
+  return openInspectorSidebarTab("layoutview").then(objects => {
     // The actual highligher show/hide methods are mocked in layoutview tests.
     // The highlighter is tested in devtools/inspector/test.
     function mockHighlighter({highlighter}) {
       highlighter.showBoxModel = function(nodeFront, options) {
         return promise.resolve();
       };
       highlighter.hideBoxModel = function() {
         return promise.resolve();
       };
     }
-    mockHighlighter(toolbox);
+    mockHighlighter(objects.toolbox);
 
-    return {
-      toolbox,
-      inspector,
-      view: inspector.layoutview
-    };
+    return objects;
   });
 }
 
 /**
  * Wait for the layoutview-updated event.
  * @return a promise
  */
 function waitForUpdate(inspector) {
diff --git a/devtools/client/inspector/rules/rules.js b/devtools/client/inspector/rules/rules.js
--- a/devtools/client/inspector/rules/rules.js
+++ b/devtools/client/inspector/rules/rules.js
@@ -214,17 +214,17 @@ function CssRuleView(inspector, document
   this.showUserAgentStyles = Services.prefs.getBoolPref(PREF_UA_STYLES);
   this.enableMdnDocsTooltip =
     Services.prefs.getBoolPref(PREF_ENABLE_MDN_DOCS_TOOLTIP);
 
   let options = {
     autoSelect: true,
     theme: "auto"
   };
-  this.popup = new AutocompletePopup(this.styleDocument, options);
+  this.popup = new AutocompletePopup(this.styleWindow.parent.document, options);
 
   this._showEmpty();
 
   this._contextmenu = new StyleInspectorMenu(this, { isRuleView: true });
 
   // Add the tooltips and highlighters to the view
   this.tooltips = new overlays.TooltipsOverlay(this);
   this.tooltips.addToView();
diff --git a/devtools/client/inspector/rules/test/browser_rules_add-property-cancel_01.js b/devtools/client/inspector/rules/test/browser_rules_add-property-cancel_01.js
--- a/devtools/client/inspector/rules/test/browser_rules_add-property-cancel_01.js
+++ b/devtools/client/inspector/rules/test/browser_rules_add-property-cancel_01.js
@@ -38,11 +38,11 @@ function* testCancelNew(view) {
 
   info("Checking the state of cancelling a new property name editor");
   ok(!elementRuleEditor.rule._applyingModifications,
     "Shouldn't have an outstanding request after a cancel.");
   is(elementRuleEditor.rule.textProps.length, 0,
     "Should have cancelled creating a new text property.");
   ok(!elementRuleEditor.propertyList.hasChildNodes(),
     "Should not have any properties.");
-  is(view.styleDocument.activeElement, view.styleDocument.documentElement,
+  is(view.styleDocument.body, view.styleDocument.activeElement,
     "Correct element has focus");
 }
diff --git a/devtools/client/inspector/rules/test/browser_rules_add-property-cancel_02.js b/devtools/client/inspector/rules/test/browser_rules_add-property-cancel_02.js
--- a/devtools/client/inspector/rules/test/browser_rules_add-property-cancel_02.js
+++ b/devtools/client/inspector/rules/test/browser_rules_add-property-cancel_02.js
@@ -66,16 +66,16 @@ add_task(function*() {
   info("Waiting for preview to be applied.");
   yield view.once("ruleview-changed");
 
   info("Escaping out of the field");
   onRuleViewChanged = view.once("ruleview-changed");
   EventUtils.synthesizeKey("VK_ESCAPE", {}, view.styleWindow);
   yield onRuleViewChanged;
 
-  is(view.styleDocument.documentElement, view.styleDocument.activeElement,
+  is(view.styleDocument.body, view.styleDocument.activeElement,
     "Correct element has focus");
 
   is(elementRuleEditor.rule.textProps.length, 1,
     "Removed the new text property.");
   is(elementRuleEditor.propertyList.children.length, 1,
     "Removed the property editor.");
 });
diff --git a/devtools/client/inspector/rules/test/browser_rules_add-property-cancel_03.js b/devtools/client/inspector/rules/test/browser_rules_add-property-cancel_03.js
--- a/devtools/client/inspector/rules/test/browser_rules_add-property-cancel_03.js
+++ b/devtools/client/inspector/rules/test/browser_rules_add-property-cancel_03.js
@@ -43,11 +43,11 @@ function* testCancelNewOnEscape(inspecto
   yield onBlur;
 
   ok(!elementRuleEditor.rule._applyingModifications,
     "Shouldn't have an outstanding modification request after a cancel.");
   is(elementRuleEditor.rule.textProps.length, 0,
     "Should have canceled creating a new text property.");
   ok(!elementRuleEditor.propertyList.hasChildNodes(),
     "Should not have any properties.");
-  is(view.styleDocument.documentElement, view.styleDocument.activeElement,
+  is(view.styleDocument.body, view.styleDocument.activeElement,
     "Correct element has focus");
 }
diff --git a/devtools/client/inspector/rules/test/browser_rules_content_02.js b/devtools/client/inspector/rules/test/browser_rules_content_02.js
--- a/devtools/client/inspector/rules/test/browser_rules_content_02.js
+++ b/devtools/client/inspector/rules/test/browser_rules_content_02.js
@@ -39,17 +39,17 @@ add_task(function*() {
 
   let target = TargetFactory.forTab(gBrowser.selectedTab);
   let toolbox = gDevTools.getToolbox(target);
 
   info("Getting the inspector and making sure it is fully updated");
   let inspector = toolbox.getPanel("inspector");
   yield inspector.once("inspector-updated");
 
-  let view = inspector.ruleview.view;
+  let view = inspector.sidebar.getWindowForTab("ruleview")["ruleview"].view;
 
   checkRuleViewContent(view);
 });
 
 function checkRuleViewContent({styleDocument}) {
   info("Making sure the rule-view contains the expected content");
 
   let headers = [...styleDocument.querySelectorAll(".ruleview-header")];
diff --git a/devtools/client/inspector/rules/test/browser_rules_cycle-color.js b/devtools/client/inspector/rules/test/browser_rules_cycle-color.js
--- a/devtools/client/inspector/rules/test/browser_rules_cycle-color.js
+++ b/devtools/client/inspector/rules/test/browser_rules_cycle-color.js
@@ -12,25 +12,25 @@ const TEST_URI = `
       color: #f00;
     }
   </style>
   Test cycling color types in the rule view!
 `;
 
 add_task(function*() {
   yield addTab("data:text/html;charset=utf-8," + encodeURIComponent(TEST_URI));
-  let {view} = yield openRuleView();
+  let {inspector, view} = yield openRuleView();
   let container = getRuleViewProperty(view, "body", "color").valueSpan;
-  checkColorCycling(container, view);
+  checkColorCycling(container, inspector);
 });
 
-function checkColorCycling(container, view) {
+function checkColorCycling(container, inspector) {
   let swatch = container.querySelector(".ruleview-colorswatch");
   let valueNode = container.querySelector(".ruleview-color");
-  let win = view.styleWindow;
+  let win = inspector.sidebar.getWindowForTab("ruleview");
 
   // Hex
   is(valueNode.textContent, "#f00", "Color displayed as a hex value.");
 
   // HSL
   EventUtils.synthesizeMouseAtCenter(swatch,
                                      {type: "mousedown", shiftKey: true}, win);
   is(valueNode.textContent, "hsl(0, 100%, 50%)",
diff --git a/devtools/client/inspector/rules/test/browser_rules_edit-selector_05.js b/devtools/client/inspector/rules/test/browser_rules_edit-selector_05.js
--- a/devtools/client/inspector/rules/test/browser_rules_edit-selector_05.js
+++ b/devtools/client/inspector/rules/test/browser_rules_edit-selector_05.js
@@ -52,21 +52,16 @@ function* testEditSelector(view, name) {
   info("Entering the commit key");
   EventUtils.synthesizeKey("VK_RETURN", {});
   yield onRuleViewChanged;
 
   is(view._elementStyle.rules.length, 2, "Should have 2 rules.");
   ok(getRuleViewRule(view, name), "Rule with " + name + " selector exists.");
   ok(getRuleViewRuleEditor(view, 1).element.getAttribute("unmatched"),
     "Rule with " + name + " does not match the current element.");
-
-  // Escape the new property editor after editing the selector
-  let onBlur = once(view.styleDocument.activeElement, "blur");
-  EventUtils.synthesizeKey("VK_ESCAPE", {}, view.styleWindow);
-  yield onBlur;
 }
 
 function* checkModifiedElement(view, name) {
   is(view._elementStyle.rules.length, 3, "Should have 3 rules.");
   ok(getRuleViewRule(view, name), "Rule with " + name + " selector exists.");
 }
 
 function* testAddProperty(view) {
diff --git a/devtools/client/inspector/rules/test/browser_rules_search-filter_context-menu.js b/devtools/client/inspector/rules/test/browser_rules_search-filter_context-menu.js
--- a/devtools/client/inspector/rules/test/browser_rules_search-filter_context-menu.js
+++ b/devtools/client/inspector/rules/test/browser_rules_search-filter_context-menu.js
@@ -31,18 +31,18 @@ add_task(function*() {
   let onContextMenuPopup = once(searchContextMenu, "popupshowing");
   EventUtils.synthesizeMouse(searchField, 2, 2,
     {type: "contextmenu", button: 2}, win);
   yield onContextMenuPopup;
 
   is(cmdUndo.getAttribute("disabled"), "true", "cmdUndo is disabled");
   is(cmdDelete.getAttribute("disabled"), "true", "cmdDelete is disabled");
   is(cmdSelectAll.getAttribute("disabled"), "", "cmdSelectAll is enabled");
-  is(cmdCut.getAttribute("disabled"), "true", "cmdCut is disabled");
-  is(cmdCopy.getAttribute("disabled"), "true", "cmdCopy is disabled");
+  is(cmdCut.getAttribute("disabled"), "", "cmdCut is enabled");
+  is(cmdCopy.getAttribute("disabled"), "", "cmdCopy is enabled");
   is(cmdPaste.getAttribute("disabled"), "true", "cmdPaste is disabled");
 
   info("Closing context menu");
   let onContextMenuHidden = once(searchContextMenu, "popuphidden");
   searchContextMenu.hidePopup();
   yield onContextMenuHidden;
 
   info("Copy text in search field using the context menu");
diff --git a/devtools/client/inspector/rules/test/browser_rules_select-and-copy-styles.js b/devtools/client/inspector/rules/test/browser_rules_select-and-copy-styles.js
--- a/devtools/client/inspector/rules/test/browser_rules_select-and-copy-styles.js
+++ b/devtools/client/inspector/rules/test/browser_rules_select-and-copy-styles.js
@@ -92,17 +92,18 @@ function* checkSelectAll(view) {
 
   let contentDoc = view.styleDocument;
   let win = view.styleWindow;
   let prop = contentDoc.querySelector(".ruleview-property");
 
   info("Checking that _SelectAll() then copy returns the correct " +
     "clipboard value");
   view._contextmenu._onSelectAll();
-  let expectedPattern = "element {[\\r\\n]+" +
+  let expectedPattern = "[\\r\\n]+" +
+                        "element {[\\r\\n]+" +
                         "    margin: 10em;[\\r\\n]+" +
                         "    font-size: 14pt;[\\r\\n]+" +
                         "    font-family: helvetica,sans-serif;[\\r\\n]+" +
                         "    color: rgb\\(170, 170, 170\\);[\\r\\n]+" +
                         "}[\\r\\n]+" +
                         "html {[\\r\\n]+" +
                         "    color: #000000;[\\r\\n]+" +
                         "}[\\r\\n]*";
diff --git a/devtools/client/inspector/rules/test/head.js b/devtools/client/inspector/rules/test/head.js
--- a/devtools/client/inspector/rules/test/head.js
+++ b/devtools/client/inspector/rules/test/head.js
@@ -43,21 +43,21 @@ addTab = function(url) {
 /**
  * Open the toolbox, with the inspector tool visible, and the rule-view
  * sidebar tab selected.
  *
  * @return a promise that resolves when the inspector is ready and the rule
  * view is visible and ready
  */
 function openRuleView() {
-  return openInspectorSidebarTab("ruleview").then(({toolbox, inspector}) => {
+  return openInspectorSidebarTab("ruleview").then(objects => {
     return {
-      toolbox,
-      inspector,
-      view: inspector.ruleview.view
+      toolbox: objects.toolbox,
+      inspector: objects.inspector,
+      view: objects.view.view
     };
   });
 }
 
 /**
  * Simple DOM node accesor function that takes either a node or a string css
  * selector as argument and returns the corresponding node
  *
diff --git a/devtools/client/inspector/shared/style-inspector-menu.js b/devtools/client/inspector/shared/style-inspector-menu.js
--- a/devtools/client/inspector/shared/style-inspector-menu.js
+++ b/devtools/client/inspector/shared/style-inspector-menu.js
@@ -364,17 +364,17 @@ StyleInspectorMenu.prototype = {
     return container;
   },
 
   /**
    * Select all text.
    */
   _onSelectAll: function() {
     let selection = this.styleWindow.getSelection();
-    selection.selectAllChildren(this.view.element);
+    selection.selectAllChildren(this.styleDocument.documentElement);
   },
 
   /**
    * Copy the most recently selected color value to clipboard.
    */
   _onCopy: function() {
     this.view.copySelection(this.styleDocument.popupNode);
   },
diff --git a/devtools/client/inspector/shared/test/browser_styleinspector_refresh_when_active.js b/devtools/client/inspector/shared/test/browser_styleinspector_refresh_when_active.js
--- a/devtools/client/inspector/shared/test/browser_styleinspector_refresh_when_active.js
+++ b/devtools/client/inspector/shared/test/browser_styleinspector_refresh_when_active.js
@@ -14,17 +14,18 @@ const TEST_URI = `
 add_task(function*() {
   yield addTab("data:text/html;charset=utf-8," + encodeURIComponent(TEST_URI));
   let {inspector, view} = yield openRuleView();
   yield selectNode("#one", inspector);
 
   is(getRuleViewPropertyValue(view, "element", "color"), "red",
     "The rule-view shows the properties for test node one");
 
-  let cView = inspector.computedview.view;
+  let cView = inspector.sidebar.getWindowForTab("computedview")
+    .computedview.view;
   let prop = getComputedViewProperty(cView, "color");
   ok(!prop, "The computed-view doesn't show the properties for test node one");
 
   info("Switching to the computed-view");
   let onComputedViewReady = inspector.once("computed-view-refreshed");
   yield openComputedView();
   yield onComputedViewReady;
 
diff --git a/devtools/client/inspector/shared/test/head.js b/devtools/client/inspector/shared/test/head.js
--- a/devtools/client/inspector/shared/test/head.js
+++ b/devtools/client/inspector/shared/test/head.js
@@ -245,23 +245,28 @@ function waitForToolboxFrameFocus(toolbo
  * corresponds to the given id selected
  *
  * @return a promise that resolves when the inspector is ready and the sidebar
  * view is visible and ready
  */
 var openInspectorSideBar = Task.async(function*(id) {
   let {toolbox, inspector} = yield openInspector();
 
+  if (!hasSideBarTab(inspector, id)) {
+    info("Waiting for the " + id + " sidebar to be ready");
+    yield inspector.sidebar.once(id + "-ready");
+  }
+
   info("Selecting the " + id + " sidebar");
   inspector.sidebar.select(id);
 
   return {
     toolbox: toolbox,
     inspector: inspector,
-    view: inspector[id].view
+    view: inspector.sidebar.getWindowForTab(id)[id].view
   };
 });
 
 /**
  * Open the toolbox, with the inspector tool visible, and the computed-view
  * sidebar tab selected.
  *
  * @return a promise that resolves when the inspector is ready and the computed
diff --git a/devtools/client/inspector/test/browser_inspector_pseudoclass-lock.js b/devtools/client/inspector/test/browser_inspector_pseudoclass-lock.js
--- a/devtools/client/inspector/test/browser_inspector_pseudoclass-lock.js
+++ b/devtools/client/inspector/test/browser_inspector_pseudoclass-lock.js
@@ -16,20 +16,17 @@ const TEST_URL = 'data:text/html;charset
                  '    <div id="div-2">test div2</div>' +
                  '  </div>' +
                  '</body>';
 
 add_task(function*() {
   info("Creating the test tab and opening the rule-view");
   let {toolbox, inspector, testActor} = yield openInspectorForURL(TEST_URL);
 
-  info("Selecting the ruleview sidebar");
-  inspector.sidebar.select("ruleview");
-
-  let view = inspector.ruleview.view;
+  let view = yield ensureRuleView(inspector);
 
   info("Selecting the test node");
   yield selectNode("#div-1", inspector);
 
   yield togglePseudoClass(inspector);
   yield assertPseudoAddedToNode(inspector, testActor, view);
 
   yield togglePseudoClass(inspector);
@@ -132,8 +129,20 @@ function* assertPseudoRemovedFromView(in
   is(rules.length, 2, "rule view is showing 2 rules after removing lock");
 
   yield showPickerOn("#div-1", inspector);
 
   let value = yield testActor.getHighlighterNodeTextContent("box-model-nodeinfobar-pseudo-classes");
   is(value, "", "pseudo-class removed from infobar selector");
   yield inspector.toolbox.highlighter.hideBoxModel();
 }
+
+function* ensureRuleView(inspector) {
+  if (!inspector.sidebar.getWindowForTab("ruleview")) {
+    info("Waiting for ruleview initialization to complete.");
+    yield inspector.sidebar.once("ruleview-ready");
+  }
+
+  info("Selecting the ruleview sidebar");
+  inspector.sidebar.select("ruleview");
+
+  return inspector.sidebar.getWindowForTab("ruleview")["ruleview"].view;
+}
diff --git a/devtools/client/inspector/test/head.js b/devtools/client/inspector/test/head.js
--- a/devtools/client/inspector/test/head.js
+++ b/devtools/client/inspector/test/head.js
@@ -167,26 +167,43 @@ function getActiveInspector() {
  * @param {String} id The ID of the sidebar tab to be opened
  * @param {String} hostType Optional hostType, as defined in Toolbox.HostType
  * @return a promise that resolves when the inspector is ready and the tab is
  * visible and ready
  */
 var openInspectorSidebarTab = Task.async(function*(id, hostType) {
   let {toolbox, inspector} = yield openInspector();
 
+  if (!hasSideBarTab(inspector, id)) {
+    info("Waiting for the " + id + " sidebar to be ready");
+    yield inspector.sidebar.once(id + "-ready");
+  }
+
   info("Selecting the " + id + " sidebar");
   inspector.sidebar.select(id);
 
   return {
-    toolbox,
-    inspector
+    toolbox: toolbox,
+    inspector: inspector,
+    view: inspector.sidebar.getWindowForTab(id)[id]
   };
 });
 
 /**
+ * Checks whether the inspector's sidebar corresponding to the given id already
+ * exists
+ * @param {InspectorPanel}
+ * @param {String}
+ * @return {Boolean}
+ */
+function hasSideBarTab(inspector, id) {
+  return !!inspector.sidebar.getWindowForTab(id);
+}
+
+/**
  * Get the NodeFront for a node that matches a given css selector, via the
  * protocol.
  * @param {String|NodeFront} selector
  * @param {InspectorPanel} inspector The instance of InspectorPanel currently
  * loaded in the toolbox
  * @return {Promise} Resolves to the NodeFront instance
  */
 function getNodeFront(selector, {walker}) {
diff --git a/devtools/client/jar.mn b/devtools/client/jar.mn
--- a/devtools/client/jar.mn
+++ b/devtools/client/jar.mn
@@ -21,19 +21,23 @@ devtools.jar:
 *   content/scratchpad/scratchpad.xul (scratchpad/scratchpad.xul)
     content/scratchpad/scratchpad.js (scratchpad/scratchpad.js)
     content/shared/splitview.css (shared/splitview.css)
     content/shared/theme-switching.js (shared/theme-switching.js)
     content/shared/frame-script-utils.js (shared/frame-script-utils.js)
     content/styleeditor/styleeditor.xul (styleeditor/styleeditor.xul)
     content/styleeditor/styleeditor.css (styleeditor/styleeditor.css)
     content/storage/storage.xul (storage/storage.xul)
+    content/inspector/computed/computed.xhtml (inspector/computed/computed.xhtml)
     content/inspector/fonts/fonts.js (inspector/fonts/fonts.js)
+    content/inspector/fonts/fonts.xhtml (inspector/fonts/fonts.xhtml)
     content/inspector/layout/layout.js (inspector/layout/layout.js)
+    content/inspector/layout/layout.xhtml (inspector/layout/layout.xhtml)
     content/inspector/markup/markup.xhtml (inspector/markup/markup.xhtml)
+    content/inspector/rules/rules.xhtml (inspector/rules/rules.xhtml)
     content/animationinspector/animation-controller.js (animationinspector/animation-controller.js)
     content/animationinspector/animation-panel.js (animationinspector/animation-panel.js)
     content/animationinspector/animation-inspector.xhtml (animationinspector/animation-inspector.xhtml)
     content/sourceeditor/codemirror/addon/comment/comment.js (sourceeditor/codemirror/addon/comment/comment.js)
     content/sourceeditor/codemirror/addon/edit/trailingspace.js (sourceeditor/codemirror/addon/edit/trailingspace.js)
     content/sourceeditor/codemirror/addon/edit/matchbrackets.js (sourceeditor/codemirror/addon/edit/matchbrackets.js)
     content/sourceeditor/codemirror/addon/edit/closebrackets.js (sourceeditor/codemirror/addon/edit/closebrackets.js)
     content/sourceeditor/codemirror/addon/dialog/dialog.js (sourceeditor/codemirror/addon/dialog/dialog.js)
diff --git a/devtools/client/responsivedesign/test/head.js b/devtools/client/responsivedesign/test/head.js
--- a/devtools/client/responsivedesign/test/head.js
+++ b/devtools/client/responsivedesign/test/head.js
@@ -135,23 +135,28 @@ function waitForToolboxFrameFocus(toolbo
  * Open the toolbox, with the inspector tool visible, and the sidebar that
  * corresponds to the given id selected
  * @return a promise that resolves when the inspector is ready and the sidebar
  * view is visible and ready
  */
 var openInspectorSideBar = Task.async(function*(id) {
   let {toolbox, inspector} = yield openInspector();
 
+  if (!hasSideBarTab(inspector, id)) {
+    info("Waiting for the " + id + " sidebar to be ready");
+    yield inspector.sidebar.once(id + "-ready");
+  }
+
   info("Selecting the " + id + " sidebar");
   inspector.sidebar.select(id);
 
   return {
     toolbox: toolbox,
     inspector: inspector,
-    view: inspector[id].view
+    view: inspector.sidebar.getWindowForTab(id)[id].view
   };
 });
 
 /**
  * Checks whether the inspector's sidebar corresponding to the given id already
  * exists
  * @param {InspectorPanel}
  * @param {String}
diff --git a/devtools/client/themes/computed.css b/devtools/client/themes/computed.css
--- a/devtools/client/themes/computed.css
+++ b/devtools/client/themes/computed.css
@@ -1,64 +1,65 @@
 /* vim:set ts=2 sw=2 sts=2 et: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
-#sidebar-panel-computedview {
+/* From content */
+
+* {
+  box-sizing: border-box;
+}
+
+:root {
+  height: 100%;
+}
+
+body {
   margin: 0;
   display : flex;
   flex-direction: column;
   height: 100%;
-  width: 100%;
 }
 
 #browser-style-checkbox {
   /* Bug 1200073 - extra space before the browser styles checkbox so
      they aren't squished together in a small window. */
   -moz-margin-start: 5px;
 }
 
 #propertyContainer {
   -moz-user-select: text;
   overflow: auto;
-  height: 0px;
-  flex: auto;
+  min-height: 0;
+  flex: 1;
 }
 
 .row-striped {
   background: var(--theme-body-background);
 }
 
 .property-view-hidden,
 .property-content-hidden {
   display: none;
 }
 
 .property-view {
+  clear: both;
   padding: 2px 0 2px 17px;
-  display: flex;
-  flex-wrap: wrap;
 }
 
-.property-name-container {
-  width: 202px;
-}
-
-.property-value-container {
-  width: 168px;
-}
-
-.property-name-container > *,
-.property-value-container > * {
+.property-view > * {
   display: inline-block;
   vertical-align: middle;
 }
 
 .property-name {
+  /* -12px is so the expander triangle isn't pushed up above the property */
+  width: calc(100% - 12px);
   overflow-x: hidden;
   text-overflow: ellipsis;
   white-space: nowrap;
   outline: 0;
 }
 
 .property-value, .other-property-value {
   background-image: url(images/arrow-e.png);
@@ -68,37 +69,48 @@
 
 @media (min-resolution: 1.1dppx) {
   .property-value, .other-property-value {
     background-image: url(images/arrow-e@2x.png);
   }
 }
 
 .property-value {
+  width: 100%;
   overflow-x: hidden;
   text-overflow: ellipsis;
   white-space: nowrap;
   background-position: 2px center;
   padding-left: 10px;
   outline: 0;
 }
 
 .other-property-value {
   background-position: left center;
   padding-left: 8px;
 }
 
+@media (min-width: 400px) {
+  .property-name {
+    width: 200px;
+  }
+  .property-value {
+    /* -212px is accounting for the 200px property-name and the 12px triangle */
+    width: calc(100% - 212px);
+  }
+}
+
 .property-content {
   padding-left: 17px;
 }
 
 /* From skin */
 .expander {
   visibility: hidden;
-  margin-left: -12px !important;
+  margin-left: -12px!important;
 }
 
 .expandable {
   visibility: visible;
 }
 
 .match {
   visibility: hidden;
diff --git a/devtools/client/themes/fonts.css b/devtools/client/themes/fonts.css
--- a/devtools/client/themes/fonts.css
+++ b/devtools/client/themes/fonts.css
@@ -1,48 +1,53 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
-#sidebar-panel-fontinspector {
+* {
+  box-sizing: border-box;
+}
+
+:root {
+  height: 100%;
+}
+
+body {
   display: flex;
   flex-direction: column;
   height: 100%;
   margin: 0;
   padding-bottom: 20px;
-  width: 100%;
 }
 
-#font-container {
+#root {
   overflow: auto;
-  flex: auto;
-  height: 0px;
 }
 
 #all-fonts {
   padding: 0;
   margin: 0;
 }
 
-#font-showall {
+#showall {
   border-radius: 0;
   border: 1px solid black;
   margin: 3px;
   cursor: pointer;
   position: fixed;
   bottom: 0;
   right: 0;
 }
 
-.dim > #font-container,
+.dim > #root,
 .font:not(.has-code) .font-css-code,
 .font-is-local,
 .font-is-remote,
 .font.is-local .font-format-url,
-#font-template {
+#template {
   display: none;
 }
 
 .font.is-remote .font-is-remote,
 .font.is-local .font-is-local {
   display: inline;
 }
 
@@ -58,17 +63,17 @@
   display: flex;
   width: 100%;
 }
 
 .font-preview-container {
   overflow-x: auto;
 }
 
-#font-preview-text-input {
+#preview-text-input {
   font: inherit;
   margin-top: 1px;
   margin-bottom: 1px;
   padding-top: 0;
   padding-bottom: 0;
   flex: 1;
 }
 
diff --git a/devtools/client/themes/layout.css b/devtools/client/themes/layout.css
--- a/devtools/client/themes/layout.css
+++ b/devtools/client/themes/layout.css
@@ -1,337 +1,337 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/ */
 
-#sidebar-panel-layoutview {
-  display: block;
+.theme-sidebar {
+  box-sizing: border-box;
 }
 
-#layout-container {
+body.theme-sidebar {
   /* The view will grow bigger as the window gets resized, until 400px */
   max-width: 400px;
   margin: 0px auto;
   padding: 0;
-  /* "Contain" the absolutely positioned #layout-main element */
+  /* "Contain" the absolutely positioned #main element */
   position: relative;
 }
 
 /* Header: contains the position and size of the element */
 
-#layout-header {
+#header {
   box-sizing: border-box;
   width: 100%;
   padding: 4px 14px;
   display: -moz-box;
   vertical-align: top;
 }
 
-#layout-header:-moz-dir(rtl) {
+#header:-moz-dir(rtl) {
   -moz-box-direction: reverse;
 }
 
-#layout-header > span {
+#header > span {
   display: -moz-box;
 }
 
-#layout-element-size {
+#element-size {
   -moz-box-flex: 1;
 }
 
-#layout-element-size:-moz-dir(rtl) {
+#element-size:-moz-dir(rtl) {
   -moz-box-pack: end;
 }
 
 @media (max-height: 228px) {
-  #layout-header {
+  #header {
     padding-top: 0;
     padding-bottom: 0;
     margin-top: 10px;
     margin-bottom: 8px;
   }
 }
 
 /* Main: contains the box-model regions */
 
-#layout-main {
+#main {
   position: absolute;
   box-sizing: border-box;
   /* The regions are semi-transparent, so the white background is partly
      visible */
   background-color: white;
   color: var(--theme-selection-color);
   /* Make sure there is some space between the window's edges and the regions */
   margin: 0 14px 10px 14px;
   width: calc(100% - 2 * 14px);
 }
 
-.layout-margin,
-.layout-size {
+.margin,
+.size {
   color: var(--theme-highlight-blue);
 }
 
 /* Regions are 3 nested elements with wide borders and outlines */
 
-#layout-content {
+#content {
   height: 25px;
 }
 
-#layout-margins,
-#layout-borders,
-#layout-padding {
+#margins,
+#borders,
+#padding {
   border-color: hsla(210,100%,85%,0.2);
   border-width: 25px;
   border-style: solid;
   outline: dotted 1px hsl(210,100%,85%);
 }
 
-#layout-margins {
+#margins {
   /* This opacity applies to all of the regions, since they are nested */
   opacity: .8;
 }
 
 /* Respond to window size change by changing the size of the regions */
 
 @media (max-height: 228px) {
-  #layout-content {
+  #content {
     height: 18px;
   }
 
-  #layout-margins,
-  #layout-borders,
-  #layout-padding {
+  #margins,
+  #borders,
+  #padding {
     border-width: 18px;
   }
 }
 
 /* Regions colors */
 
-#layout-margins {
+#margins {
   border-color: #edff64;
 }
 
-#layout-borders {
+#borders {
   border-color: #444444;
 }
 
-#layout-padding {
+#padding {
   border-color: #6a5acd;
 }
 
-#layout-content {
+#content {
   background-color: #87ceeb;
 }
 
 /* Editable region sizes are contained in absolutely positioned <p> */
 
-#layout-main > p {
+#main > p {
   position: absolute;
   pointer-events: none;
   margin: 0;
   text-align: center;
 }
 
-#layout-main > p > span,
-#layout-main > p > input {
+#main > p > span,
+#main > p > input {
   vertical-align: middle;
   pointer-events: auto;
 }
 
 /* Coordinates for the region sizes */
 
-.layout-top,
-.layout-bottom {
+.top,
+.bottom {
   width: calc(100% - 2px);
   text-align: center;
 }
 
-.layout-padding.layout-top {
+.padding.top {
   top: 55px;
 }
 
-.layout-padding.layout-bottom {
+.padding.bottom {
   bottom: 57px;
 }
 
-.layout-border.layout-top {
+.border.top {
   top: 30px;
 }
 
-.layout-border.layout-bottom {
+.border.bottom {
   bottom: 31px;
 }
 
-.layout-margin.layout-top {
+.margin.top {
   top: 5px;
 }
 
-.layout-margin.layout-bottom {
+.margin.bottom {
   bottom: 6px;
 }
 
-.layout-size,
-.layout-margin.layout-left,
-.layout-margin.layout-right,
-.layout-border.layout-left,
-.layout-border.layout-right,
-.layout-padding.layout-left,
-.layout-padding.layout-right {
+.size,
+.margin.left,
+.margin.right,
+.border.left,
+.border.right,
+.padding.left,
+.padding.right {
   top: 22px;
   line-height: 132px;
 }
 
-.layout-size {
+.size {
   width: calc(100% - 2px);
 }
 
-.layout-margin.layout-right,
-.layout-margin.layout-left,
-.layout-border.layout-left,
-.layout-border.layout-right,
-.layout-padding.layout-right,
-.layout-padding.layout-left {
+.margin.right,
+.margin.left,
+.border.left,
+.border.right,
+.padding.right,
+.padding.left {
   width: 25px;
 }
 
-.layout-padding.layout-left {
+.padding.left {
   left: 52px;
 }
 
-.layout-padding.layout-right {
+.padding.right {
   right: 51px;
 }
 
-.layout-border.layout-left {
+.border.left {
   left: 26px;
 }
 
-.layout-border.layout-right {
+.border.right {
   right: 26px;
 }
 
-.layout-margin.layout-right {
+.margin.right {
   right: 0;
 }
 
-.layout-margin.layout-left {
+.margin.left {
   left: 0;
 }
 
-.layout-rotate.layout-left:not(.layout-editing) {
+.rotate.left:not(.editing) {
   transform: rotate(-90deg);
 }
 
-.layout-rotate.layout-right:not(.layout-editing) {
+.rotate.right:not(.editing) {
   transform: rotate(90deg);
 }
 
 /* Coordinates should be different when the window is small, because we make
    the regions smaller then */
 
 @media (max-height: 228px) {
-  .layout-padding.layout-top {
+  .padding.top {
     top: 37px;
   }
 
-  .layout-padding.layout-bottom {
+  .padding.bottom {
     bottom: 38px;
   }
 
-  .layout-border.layout-top {
+  .border.top {
     top: 19px;
   }
 
-  .layout-border.layout-bottom {
+  .border.bottom {
     bottom: 20px;
   }
 
-  .layout-margin.layout-top {
+  .margin.top {
     top: 1px;
   }
 
-  .layout-margin.layout-bottom {
+  .margin.bottom {
     bottom: 2px;
   }
 
-  .layout-size,
-  .layout-margin.layout-left,
-  .layout-margin.layout-right,
-  .layout-border.layout-left,
-  .layout-border.layout-right,
-  .layout-padding.layout-left,
-  .layout-padding.layout-right {
+  .size,
+  .margin.left,
+  .margin.right,
+  .border.left,
+  .border.right,
+  .padding.left,
+  .padding.right {
     line-height: 80px;
   }
 
-  .layout-margin.layout-right,
-  .layout-margin.layout-left,
-  .layout-border.layout-left,
-  .layout-border.layout-right,
-  .layout-padding.layout-right,
-  .layout-padding.layout-left {
+  .margin.right,
+  .margin.left,
+  .border.left,
+  .border.right,
+  .padding.right,
+  .padding.left {
     width: 21px;
   }
 
-  .layout-padding.layout-left {
+  .padding.left {
     left: 35px;
   }
 
-  .layout-padding.layout-right {
+  .padding.right {
     right: 35px;
   }
 
-  .layout-border.layout-left {
+  .border.left {
     left: 16px;
   }
 
-  .layout-border.layout-right {
+  .border.right {
     right: 17px;
   }
 }
 
 /* Legend, displayed inside regions */
 
-.layout-legend {
+.legend {
   position: absolute;
   margin: 5px 6px;
   z-index: 1;
 }
 
-.layout-legend[data-box="margin"] {
+.legend[data-box="margin"] {
   color: var(--theme-highlight-blue);
 }
 
 @media (max-height: 228px) {
-  .layout-legend {
+  .legend {
     margin: 2px 6px;
   }
 }
 
 /* Editable fields */
 
-.layout-editable {
+.editable {
   border: 1px dashed transparent;
   -moz-user-select: text;
 }
 
-.layout-editable:hover {
+.editable:hover {
   border-bottom-color: hsl(0, 0%, 50%);
 }
 
 .styleinspector-propertyeditor {
   border: 1px solid #ccc;
   padding: 0;
 }
 
 /* Make sure the content size doesn't appear as editable like the other sizes */
 
-.layout-size > span {
+.size > span {
   cursor: default;
 }
 
 /* Hide all values when the view is inactive */
 
-#layout-container.inactive > #layout-header > #layout-element-position,
-#layout-container.inactive > #layout-header > #layout-element-size,
-#layout-container.inactive > #layout-main > p {
+body.inactive > #header > #element-position,
+body.inactive > #header > #element-size,
+body.inactive > #main > p {
    visibility: hidden;
 }
diff --git a/devtools/client/themes/rules.css b/devtools/client/themes/rules.css
--- a/devtools/client/themes/rules.css
+++ b/devtools/client/themes/rules.css
@@ -8,38 +8,47 @@
   --rule-filter-icon: url(images/magnifying-glass-light.png);
 }
 
 .theme-dark {
   --rule-highlight-background-color: #594724;
   --rule-filter-icon: url(images/magnifying-glass.png);
 }
 
-#sidebar-panel-ruleview {
+* {
+  box-sizing: border-box;
+}
+
+:root {
+  height: 100%;
+}
+
+body {
   margin: 0;
   display: flex;
   flex-direction: column;
   height: 100%;
-  width: 100%;
 }
 
 #ruleview-container {
   -moz-user-select: text;
   overflow: auto;
-  flex: auto;
-  height: 0px;
+  min-height: 0;
+  flex: 1;
+  height: 100%;
 }
 
 #ruleview-container.non-interactive {
   pointer-events: none;
   visibility: collapse;
   transition: visibility 0.25s;
 }
 
-.devtools-sidebar-toolbar {
+.devtools-toolbar {
+  width: 100%;
   display: flex;
 }
 
 #pseudo-class-panel {
   position: relative;
   margin-top: -1px;
   margin-bottom: -1px;
   overflow-y: hidden;
