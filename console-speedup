# HG changeset patch
# Parent 76a272052164c6fce9b8f37f1750525bd72938ab
# User Brian Grinstead <bgrinstead@mozilla.com>
Keep separate list of items to destroy

diff --git a/browser/devtools/webconsole/webconsole.js b/browser/devtools/webconsole/webconsole.js
--- a/browser/devtools/webconsole/webconsole.js
+++ b/browser/devtools/webconsole/webconsole.js
@@ -147,22 +147,22 @@ const GROUP_INDENT = 12;
 
 // The number of messages to display in a single display update. If we display
 // too many messages at once we slow the Firefox UI too much.
 const MESSAGES_IN_INTERVAL = DEFAULT_LOG_LIMIT;
 
 // The delay between display updates - tells how often we should *try* to push
 // new messages to screen. This value is optimistic, updates won't always
 // happen. Keep this low so the Web Console output feels live.
-const OUTPUT_INTERVAL = 50; // milliseconds
+const OUTPUT_INTERVAL = 17; // milliseconds
 
 // When the output queue has more than MESSAGES_IN_INTERVAL items we throttle
 // output updates to this number of milliseconds. So during a lot of output we
 // update every N milliseconds given here.
-const THROTTLE_UPDATES = 1000; // milliseconds
+const THROTTLE_UPDATES = 500; // milliseconds
 
 // The preference prefix for all of the Web Console filters.
 const FILTER_PREFS_PREFIX = "devtools.webconsole.filter.";
 
 // The minimum font size.
 const MIN_FONT_SIZE = 10;
 
 const PREF_CONNECTION_TIMEOUT = "devtools.debugger.remote-timeout";
@@ -184,16 +184,18 @@ const PREF_MESSAGE_TIMESTAMP = "devtools
 function WebConsoleFrame(aWebConsoleOwner)
 {
   this.owner = aWebConsoleOwner;
   this.hudId = this.owner.hudId;
   this.window = this.owner.iframeWindow;
 
   this._repeatNodes = {};
   this._outputQueue = [];
+  this._itemDestroyQueue = [];
+  this._nodeDestroyQueue = [];
   this._pruneCategoriesQueue = {};
   this._networkRequests = {};
   this.filterPrefs = {};
 
   this.output = new ConsoleOutput(this);
 
   this._toggleFilter = this._toggleFilter.bind(this);
   this._onPanelSelected = this._onPanelSelected.bind(this);
@@ -2056,34 +2058,66 @@ WebConsoleFrame.prototype = {
    */
   _flushMessageQueue: function WCF__flushMessageQueue()
   {
     if (!this._outputTimer) {
       return;
     }
 
     let timeSinceFlush = Date.now() - this._lastOutputFlush;
+    // console.log("Flushing message queue", this._outputQueue.length, MESSAGES_IN_INTERVAL, new Date());
     if (this._outputQueue.length > MESSAGES_IN_INTERVAL &&
         timeSinceFlush < THROTTLE_UPDATES) {
       this._initOutputTimer();
       return;
     }
 
     // Determine how many messages we can display now.
     let toDisplay = Math.min(this._outputQueue.length, MESSAGES_IN_INTERVAL);
+
+    // If there aren't any messages to display, then take care of some cleanup.
+    // Work through:
+    //   1) items that were pruned from the outputQueue before being displayed
+    //   2) nodes that were once part of the output.
     if (toDisplay < 1) {
+      let startTime = new Date().getTime();
+      for (let i = this._itemDestroyQueue.length - 1; i >= 0; i--) {
+        // Stop cleaning if it's been too long, want to keep the output responsive
+        if (((new Date().getTime()) - startTime) > OUTPUT_INTERVAL) {
+          break;
+        }
+        this._destroyItem(this._itemDestroyQueue[i]);
+        this._itemDestroyQueue.splice(i, 1);
+      }
+
+      for (let i = this._nodeDestroyQueue.length - 1; i >= 0; i--) {
+        // Stop cleaning if it's been too long, want to keep the output responsive
+        if (((new Date().getTime()) - startTime) > OUTPUT_INTERVAL) {
+          break;
+        }
+        this._destroyNode(this._nodeDestroyQueue[i]);
+        this._nodeDestroyQueue.splice(i, 1);
+      }
+
       this._outputTimerInitialized = false;
+      if (this._itemDestroyQueue.length || this._nodeDestroyQueue.length) {
+        this._initOutputTimer();
+      }
+
       return;
     }
 
+    console.time("_flushMessageQueue");
+
     // Try to prune the message queue.
     let shouldPrune = false;
     if (this._outputQueue.length > toDisplay && this._pruneOutputQueue()) {
       toDisplay = Math.min(this._outputQueue.length, toDisplay);
       shouldPrune = true;
+      this._initOutputTimer();
     }
 
     let batch = this._outputQueue.splice(0, toDisplay);
     if (!batch.length) {
       this._outputTimerInitialized = false;
       return;
     }
 
@@ -2110,20 +2144,25 @@ WebConsoleFrame.prototype = {
         }
       }
     }
 
     let oldScrollHeight = 0;
 
     // Prune messages if needed. We do not do this for every flush call to
     // improve performance.
+    // XXX: measure this - it is probably the next thing to move out of band
     let removedNodes = 0;
     if (shouldPrune || !this._outputQueue.length) {
+      console.time("Scroll height");
       oldScrollHeight = scrollNode.scrollHeight;
-
+      console.timeEnd("Scroll height");
+
+      // XXX: MOVING removeOutputMessage into a queue saves around 50ms inside
+      // pruneOutputIfNecessary - is it worth it to add the extra code?
       let categories = Object.keys(this._pruneCategoriesQueue);
       categories.forEach(function _pruneOutput(aCategory) {
         removedNodes += this.pruneOutputIfNecessary(aCategory);
       }, this);
       this._pruneCategoriesQueue = {};
     }
 
     let isInputOutput = lastVisibleNode &&
@@ -2145,26 +2184,29 @@ WebConsoleFrame.prototype = {
 
     if (newMessages.size) {
       this.emit("messages-added", newMessages);
     }
     if (updatedMessages.size) {
       this.emit("messages-updated", updatedMessages);
     }
 
-    // If the queue is not empty, schedule another flush.
-    if (this._outputQueue.length > 0) {
+    // If any queue is not empty, schedule another flush.
+    if (this._outputQueue.length > 0 ||
+        this._itemDestroyQueue.length > 0 ||
+        this._nodeDestroyQueue.length > 0) {
       this._initOutputTimer();
     }
     else {
       this._outputTimerInitialized = false;
       if (this._flushCallback && this._flushCallback() === false) {
         this._flushCallback = null;
       }
     }
+    console.timeEnd("_flushMessageQueue");
 
     this._lastOutputFlush = Date.now();
   },
 
   /**
    * Initialize the output timer.
    * @private
    */
@@ -2262,34 +2304,37 @@ WebConsoleFrame.prototype = {
 
     // Loop through the categories we found and prune if needed.
     for (let category in nodes) {
       let limit = Utils.logLimitForCategory(category);
       let indexes = nodes[category];
       if (indexes.length > limit) {
         let n = Math.max(0, indexes.length - limit);
         pruned += n;
+        // XXX: Can probably splice this in and out of the two arrays
+        // without a loop.
         for (let i = n - 1; i >= 0; i--) {
-          this._pruneItemFromQueue(this._outputQueue[indexes[i]]);
           this._outputQueue.splice(indexes[i], 1);
+          this._itemDestroyQueue.push(this._outputQueue[indexes[i]]);
         }
       }
     }
 
     return pruned;
   },
 
   /**
-   * Prune an item from the output queue.
+   * Destroy an item from the output queue.
    *
    * @private
    * @param array aItem
-   *        The item you want to remove from the output queue.
+   *        The item you want to destroy.  Does not remove it from the output
+   *        queue.
    */
-  _pruneItemFromQueue: function WCF__pruneItemFromQueue(aItem)
+  _destroyItem: function WCF__destroyItem(aItem)
   {
     // TODO: handle object releasing in a more elegant way once all console
     // messages use the new API - bug 778766.
 
     let [category, methodOrNode, args] = aItem;
     if (typeof methodOrNode != "function" && methodOrNode._objectActors) {
       for (let actor of methodOrNode._objectActors) {
         this._releaseObject(actor);
@@ -2359,64 +2404,73 @@ WebConsoleFrame.prototype = {
    *         The number of removed nodes.
    */
   pruneOutputIfNecessary: function WCF_pruneOutputIfNecessary(aCategory)
   {
     let logLimit = Utils.logLimitForCategory(aCategory);
     let messageNodes = this.outputNode.querySelectorAll(".message[category=" +
                        CATEGORY_CLASS_FRAGMENTS[aCategory] + "]");
     let n = Math.max(0, messageNodes.length - logLimit);
-    let toRemove = Array.prototype.slice.call(messageNodes, 0, n);
-    toRemove.forEach(this.removeOutputMessage, this);
-
+    [...messageNodes].slice(0, n).forEach(this.removeOutputMessage, this);
     return n;
   },
 
   /**
    * Remove a given message from the output.
    *
    * @param nsIDOMNode aNode
    *        The message node you want to remove.
    */
+  _destroyNode: function WCF_destroyNode(aNode)
+  {
+    console.time("Destroy node");
+    if (aNode._messageObject) {
+      aNode._messageObject.destroy();
+    }
+
+    if (aNode._objectActors) {
+      for (let actor of aNode._objectActors) {
+        this._releaseObject(actor);
+      }
+      aNode._objectActors.clear();
+    }
+
+    if (aNode.category == CATEGORY_CSS ||
+        aNode.category == CATEGORY_SECURITY) {
+      let repeatNode = aNode.getElementsByClassName("message-repeats")[0];
+      if (repeatNode && repeatNode._uid) {
+        delete this._repeatNodes[repeatNode._uid];
+      }
+    }
+    else if (aNode._connectionId &&
+             aNode.category == CATEGORY_NETWORK) {
+      delete this._networkRequests[aNode._connectionId];
+      this._releaseObject(aNode._connectionId);
+    }
+    else if (aNode.classList.contains("inlined-variables-view")) {
+      let view = aNode._variablesView;
+      if (view) {
+        view.controller.releaseActors();
+      }
+      aNode._variablesView = null;
+    }
+    console.timeEnd("Destroy node");
+  },
+
+  /**
+   * Remove a given message from the output.
+   *
+   * @param nsIDOMNode aNode
+   *        The message node you want to remove.
+   */
   removeOutputMessage: function WCF_removeOutputMessage(aNode)
   {
-    if (aNode._messageObject) {
-      aNode._messageObject.destroy();
-    }
-
-    if (aNode._objectActors) {
-      for (let actor of aNode._objectActors) {
-        this._releaseObject(actor);
-      }
-      aNode._objectActors.clear();
-    }
-
-    if (aNode.category == CATEGORY_CSS ||
-        aNode.category == CATEGORY_SECURITY) {
-      let repeatNode = aNode.getElementsByClassName("message-repeats")[0];
-      if (repeatNode && repeatNode._uid) {
-        delete this._repeatNodes[repeatNode._uid];
-      }
-    }
-    else if (aNode._connectionId &&
-             aNode.category == CATEGORY_NETWORK) {
-      delete this._networkRequests[aNode._connectionId];
-      this._releaseObject(aNode._connectionId);
-    }
-    else if (aNode.classList.contains("inlined-variables-view")) {
-      let view = aNode._variablesView;
-      if (view) {
-        view.controller.releaseActors();
-      }
-      aNode._variablesView = null;
-    }
-
-    if (aNode.parentNode) {
-      aNode.parentNode.removeChild(aNode);
-    }
+    // this._nodeDestroyQueue.push(aNode);
+    this._destroyNode(aNode);
+    aNode.remove();
   },
 
   /**
    * Given a category and message body, creates a DOM node to represent an
    * incoming message. The timestamp is automatically added.
    *
    * @param number aCategory
    *        The category of the message: one of the CATEGORY_* constants.
@@ -2887,25 +2941,26 @@ WebConsoleFrame.prototype = {
     if (toolbox) {
       toolbox.off("webconsole-selected", this._onPanelSelected);
     }
 
     gDevTools.off("pref-changed", this._onToolboxPrefChanged);
 
     this._repeatNodes = {};
     this._outputQueue = [];
+    this._itemDestroyQueue = [];
+    this._nodeDestroyQueue = [];
     this._pruneCategoriesQueue = {};
     this._networkRequests = {};
 
     if (this._outputTimerInitialized) {
       this._outputTimerInitialized = false;
       this._outputTimer.cancel();
     }
     this._outputTimer = null;
-
     if (this.jsterm) {
       this.jsterm.destroy();
       this.jsterm = null;
     }
     this.output.destroy();
     this.output = null;
 
     if (this._contextMenuHandler) {
@@ -3776,17 +3831,17 @@ JSTerm.prototype = {
     let hud = this.hud;
     let outputNode = hud.outputNode;
     let node;
     while ((node = outputNode.firstChild)) {
       hud.removeOutputMessage(node);
     }
 
     hud.groupDepth = 0;
-    hud._outputQueue.forEach(hud._pruneItemFromQueue, hud);
+    hud._outputQueue.forEach(hud._destroyItem, hud);
     hud._outputQueue = [];
     hud._networkRequests = {};
     hud._repeatNodes = {};
 
     if (aClearStorage) {
       this.webConsoleClient.clearMessagesCache();
     }
 
