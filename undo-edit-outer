# HG changeset patch
# Parent fa62732307ee1d4c2756db477ff897c28eb25393
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 998933 - WIP [markup view] undo fails after Edit as HTML

diff --git a/devtools/client/markupview/markup-view.js b/devtools/client/markupview/markup-view.js
--- a/devtools/client/markupview/markup-view.js
+++ b/devtools/client/markupview/markup-view.js
@@ -784,21 +784,30 @@ MarkupView.prototype = {
     if (!container) {
       return;
     }
 
     this.getNodeChildIndex(aNode).then((i) => {
       this._outerHTMLChildIndex = i;
       this._outerHTMLNode = aNode;
 
+
       container.undo.do(() => {
-        this.walker.setOuterHTML(aNode, newValue);
+        console.log("DO RECEIEVED", newValue);
+        this.walker.setOuterHTML(aNode, newValue).then((node) => {
+          console.log("NEW NODE REF", node);
+          aNode = node;
+        });
       }, () => {
-        this.walker.setOuterHTML(aNode, oldValue);
+        console.log("UNDO RECEIEVED", oldValue, aNode);
+        this.walker.setOuterHTML(aNode, oldValue).then((node) => {
+          aNode = node;
+        });
       });
+
     });
   },
 
   /**
    * Open an editor in the UI to allow editing of a node's outerHTML.
    * @param aNode The NodeFront to edit.
    */
   beginEditingOuterHTML: function(aNode) {
diff --git a/devtools/server/actors/inspector.js b/devtools/server/actors/inspector.js
--- a/devtools/server/actors/inspector.js
+++ b/devtools/server/actors/inspector.js
@@ -1700,24 +1700,53 @@ var WalkerActor = protocol.ActorClass({
           attributeName: key,
           newValue: attributeModifications[key]
         });
       }
       node.modifyAttributes(finalAttributeModifications);
       rawNode.replaceChild(parsedDOM.head, rawNode.querySelector("head"));
       rawNode.replaceChild(parsedDOM.body, rawNode.querySelector("body"));
     } else {
-      rawNode.outerHTML = value;
+
+      // instead of just rawNode.outerHTML = value, use dom manipulation
+      // and return a reference to the most likely similar node for the
+      // ability to undo.
+
+      // The weirdness here is that undo would not restore the state to
+      // before:
+      // Original outerHTML, <button>hi</button>
+      // Set to "<button>bye</button><h1>new</h1>"
+      // Undo would leave DOM like:
+      // "<button>hi</button><h1>new</h1>"
+      let parent = rawNode.parentNode;
+
+      if (!parent) {
+        return;
+      }
+      let container = parsedDOM.body;
+      let child;
+      let returnedElement;
+      while ((child = container.firstChild)) {
+        parent.insertBefore(child, rawNode);
+        if (!returnedElement && child.tagName === rawNode.tagName) {
+          returnedElement = child;
+        }
+      }
+      // If none of the tags match, just return the last element
+      returnedElement = returnedElement || rawNode.previousSibling;
+      parent.removeChild(rawNode);
+      return this._ref(returnedElement);
     }
   }, {
     request: {
       node: Arg(0, "domnode"),
       value: Arg(1),
     },
     response: {
+      node: RetVal("nullable:domnode")
     }
   }),
 
   /**
    * Removes a node from its parent node.
    *
    * @returns The node's nextSibling before it was removed.
    */
