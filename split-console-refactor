# HG changeset patch
# Parent fea2a90e2d228e7b1ef2c24f3fbb1895f5e6cfda
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 1045333 - Refactor toolbox.toggleSplitConsole;r=jwalker

diff --git a/browser/devtools/framework/toolbox.js b/browser/devtools/framework/toolbox.js
--- a/browser/devtools/framework/toolbox.js
+++ b/browser/devtools/framework/toolbox.js
@@ -252,18 +252,17 @@ Toolbox.prototype = {
         this._addKeysToWindow();
         this._addReloadKeys();
         this._addToolSwitchingKeys();
         this._addZoomKeys();
         this._loadInitialZoom();
 
         let splitConsolePromise = promise.resolve();
         if (Services.prefs.getBoolPref(SPLITCONSOLE_ENABLED_PREF)) {
-          // Force the split console on if pref is true.
-          splitConsolePromise = this.toggleSplitConsole(true);
+          splitConsolePromise = this.openSplitConsole();
         }
         let buttonsPromise = this._buildButtons();
 
         this._telemetry.toolOpened("toolbox");
 
         this.selectTool(this._defaultToolId).then(panel => {
           promise.all([
             splitConsolePromise,
@@ -367,17 +366,17 @@ Toolbox.prototype = {
     let openedConsolePanel = this.currentToolId === "webconsole";
 
     if (openedConsolePanel) {
       deck.setAttribute("collapsed", "true");
       splitter.setAttribute("hidden", "true");
       webconsolePanel.removeAttribute("collapsed");
     } else {
       deck.removeAttribute("collapsed");
-      if (this._splitConsole) {
+      if (this.splitConsole) {
         webconsolePanel.removeAttribute("collapsed");
         splitter.removeAttribute("hidden");
       } else {
         webconsolePanel.setAttribute("collapsed", "true");
         splitter.setAttribute("hidden", "true");
       }
     }
   },
@@ -966,46 +965,60 @@ Toolbox.prototype = {
   focusConsoleInput: function() {
     let hud = this.getPanel("webconsole").hud;
     if (hud && hud.jsterm) {
       hud.jsterm.inputNode.focus();
     }
   },
 
   /**
-   * Toggles the split state of the webconsole.  If the webconsole panel
-   * is already selected and no forceToggle is not set, then this command
-   * is ignored.
-   *
-   * @param {bool} forceToggle
-   *        Should the console be toggled regardless of the selected panel.
+   * Opens the split console.
    *
    * @returns {Promise} a promise that resolves once the tool has been
    *          loaded and focused.
    */
-  toggleSplitConsole: function(forceToggle = false) {
-    let openedConsolePanel = this.currentToolId === "webconsole";
-    let ret = promise.resolve();
+  openSplitConsole: function() {
+    this._splitConsole = true;
+    Services.prefs.setBoolPref(SPLITCONSOLE_ENABLED_PREF, true);
+    this._refreshConsoleDisplay();
+    this.emit("split-console");
+    return this.loadTool("webconsole").then(() => {
+      this.focusConsoleInput();
+    });
+  },
 
-    // Don't allow changes when console is open, since it could be confusing
-    if (!openedConsolePanel || forceToggle) {
-      this._splitConsole = !this._splitConsole;
-      Services.prefs.setBoolPref(SPLITCONSOLE_ENABLED_PREF, this._splitConsole);
+  /**
+   * Closes the split console.
+   *
+   * @returns {Promise} a promise that resolves once the tool has been
+   *          closed.
+   */
+  closeSplitConsole: function() {
+    this._splitConsole = false;
+    Services.prefs.setBoolPref(SPLITCONSOLE_ENABLED_PREF, false);
+    this._refreshConsoleDisplay();
+    this.emit("split-console");
+    return promise.resolve();
+  },
 
-      this._refreshConsoleDisplay();
-      this.emit("split-console");
-
-      if (this._splitConsole) {
-        ret = this.loadTool("webconsole").then(() => {
-          this.focusConsoleInput();
-        });
-      }
+  /**
+   * Toggles the split state of the webconsole.  If the webconsole panel
+   * is already selected then this command is ignored.
+   *
+   * @returns {Promise} a promise that resolves once the tool has been
+   *          opened or closed.
+   */
+  toggleSplitConsole: function() {
+    if (this.currentToolId !== "webconsole") {
+      return this.splitConsole ?
+             this.closeSplitConsole() :
+             this.openSplitConsole();
     }
 
-    return ret;
+    return promise.resolve();
   },
 
   /**
    * Tells the target tab to reload.
    */
   reloadTarget: function(force) {
     this.target.activeTab.reload({ force: force });
   },
