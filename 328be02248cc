
# HG changeset patch
# User DÃ£o Gottwald <dao@mozilla.com>
# Date 1521736836 -3600
# Node ID 328be02248cc078c23b3443e4aa7d5c2eb53f2b0
# Parent  b02c9f2dc6039d9f30ce2571769ba111bbc4a370
Bug 1448059 - Load compacttheme.css directly in browser.xul rather than from browser-compacttheme.js. r?bgrins

MozReview-Commit-ID: FldhNQ3V3v2

diff --git a/browser/base/content/browser-compacttheme.js b/browser/base/content/browser-compacttheme.js
--- a/browser/base/content/browser-compacttheme.js
+++ b/browser/base/content/browser-compacttheme.js
@@ -1,22 +1,29 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 /**
- * Listeners for the compact theme.  This adds an extra stylesheet
- * to browser.xul if a pref is set and no other themes are applied.
+ * Enables compacttheme.css when needed.
  */
 var CompactTheme = {
-  styleSheetLocation: "chrome://browser/skin/compacttheme.css",
-  styleSheet: null,
+  get styleSheet() {
+    delete this.styleSheet;
+    for (let styleSheet of document.styleSheets) {
+      if (styleSheet.href == "chrome://browser/skin/compacttheme.css") {
+        this.styleSheet = styleSheet;
+        break;
+      }
+    }
+    return this.styleSheet;
+  },
 
   get isStyleSheetEnabled() {
-    return this.styleSheet && !this.styleSheet.sheet.disabled;
+    return this.styleSheet && !this.styleSheet.disabled;
   },
 
   get isThemeCurrentlyApplied() {
     let theme = LightweightThemeManager.currentTheme;
     return theme && (
            theme.id == "firefox-compact-dark@mozilla.org" ||
            theme.id == "firefox-compact-light@mozilla.org");
   },
@@ -24,24 +31,16 @@
   init() {
     Services.obs.addObserver(this, "lightweight-theme-styling-update");
 
     if (this.isThemeCurrentlyApplied) {
       this._toggleStyleSheet(true);
     }
   },
 
-  createStyleSheet() {
-    let styleSheetAttr = `href="${this.styleSheetLocation}" type="text/css"`;
-    this.styleSheet = document.createProcessingInstruction(
-      "xml-stylesheet", styleSheetAttr);
-    document.insertBefore(this.styleSheet, document.documentElement);
-    this.styleSheet.sheet.disabled = true;
-  },
-
   observe(subject, topic, data) {
     if (topic == "lightweight-theme-styling-update") {
       let newTheme = JSON.parse(data);
       if (newTheme && (
           newTheme.id == "firefox-compact-light@mozilla.org" ||
           newTheme.id == "firefox-compact-dark@mozilla.org")) {
         // We are using the theme ID on this object instead of always referencing
         // LightweightThemeManager.currentTheme in case this is a preview
@@ -51,31 +50,19 @@
       }
 
     }
   },
 
   _toggleStyleSheet(enabled) {
     let wasEnabled = this.isStyleSheetEnabled;
     if (enabled) {
-      // The stylesheet may not have been created yet if it wasn't
-      // needed on initial load.  Make it now.
-      if (!this.styleSheet) {
-        this.createStyleSheet();
-      }
-      this.styleSheet.sheet.disabled = false;
+      this.styleSheet.disabled = false;
     } else if (!enabled && wasEnabled) {
-      this.styleSheet.sheet.disabled = true;
+      this.styleSheet.disabled = true;
     }
   },
 
   uninit() {
     Services.obs.removeObserver(this, "lightweight-theme-styling-update");
     this.styleSheet = null;
   }
 };
-
-// If the compact theme is going to be applied in gBrowserInit.onLoad,
-// then preload it now.  This prevents a flash of unstyled content where the
-// normal theme is applied while the compact theme stylesheet is loading.
-if (this != Services.appShell.hiddenDOMWindow && CompactTheme.isThemeCurrentlyApplied) {
-  CompactTheme.createStyleSheet();
-}
diff --git a/browser/base/content/browser.xul b/browser/base/content/browser.xul
--- a/browser/base/content/browser.xul
+++ b/browser/base/content/browser.xul
@@ -12,16 +12,17 @@
 <?xml-stylesheet href="chrome://browser/content/usercontext/usercontext.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/skin/controlcenter/panel.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/skin/customizableui/panelUI.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/skin/downloads/downloads.css"?>
 <?xml-stylesheet href="chrome://browser/skin/places/places.css"?>
 <?xml-stylesheet href="chrome://browser/skin/places/editBookmark.css"?>
 <?xml-stylesheet href="chrome://browser/skin/" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/content/tabbrowser.css" type="text/css"?>
+<?xml-stylesheet href="chrome://browser/skin/compacttheme.css" type="text/css" alternate="yes" title="Light/Dark"?>
 
 # All DTD information is stored in a separate file so that it can be shared by
 # hiddenWindow.xul.
 <!DOCTYPE window [
 #include browser-doctype.inc
 ]>
 
 <window id="main-window"

