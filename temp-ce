# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  8db74a3be1f4046d170f5b3afc01d5673b0e0190

diff --git a/browser/base/content/customelements/base-element.js b/browser/base/content/customelements/base-element.js
--- a/browser/base/content/customelements/base-element.js
+++ b/browser/base/content/customelements/base-element.js
@@ -44,17 +44,21 @@ InheritsConnector.prototype.copyAttribut
   if (attributeName === "id") {
     return;
   }
 
   for (let [node, list] of this._nodesToAttributes.entries()) {
     // Handle both inherits="accesskey" and inherits="text=label"
     list.forEach(a => {
       if (a === attributeName) {
-        node.setAttribute(a, this._host.getAttribute(a));
+        if (a === "checked") {
+          node.checked = this._host.hasAttribute(a) && this._host.getAttribute(a) != "false";
+        } else {
+          node.setAttribute(a, this._host.getAttribute(a));
+        }
       } else if (a.endsWith('=' + attributeName)) {
         let mapFrom = a.split('=')[1];
         let mapTo = a.split('=')[0];
         if (mapTo === "text") {
           node.textContent = this._host.getAttribute(mapFrom);
         } else {
           node.setAttribute(mapTo, this._host.getAttribute(mapFrom));
         }
@@ -121,19 +125,18 @@ ObserverConnector.prototype.copyAttribut
 }
 
 ObserverConnector.prototype.watch = function(targetID) {
   if (this._observer) {
     this._observer.disconnect();
     this._observer = null;
   }
 
+  // XXX: What is hitting this case?
   if (!targetID) {
-    console.log("Why no ID?");
-    console.trace();
     return;
   }
 
   this._observeTarget = document.getElementById(targetID);
   if (this._observeTarget) {
     this._observer = new MutationObserver(mutations => {
       mutations.forEach(mutation => {
         if (!this._observeTarget.hasAttribute(mutation.attributeName)) {
diff --git a/browser/base/content/customelements/firefox-label.js b/browser/base/content/customelements/firefox-label.js
--- a/browser/base/content/customelements/firefox-label.js
+++ b/browser/base/content/customelements/firefox-label.js
@@ -236,36 +236,54 @@ customElements.define("firefox-label", F
 class XblCheckboxBaseline extends BaseElement {
   constructor() {
     super();
   }
   connectedCallback() {
     super.connectedCallback();
     // console.log(this, "connected");
 
-    this.innerHTML = `<html:input type='checkbox' />
+    this.innerHTML = `<html:input type='checkbox' inherits="checked" />
 <hbox class="checkbox-label-box" flex="1">
 <firefox-label class="checkbox-label" inherits="text=label,accesskey,crop" flex="1"></firefox-label>
 </hbox>`;
+
+    this.input = this.querySelector("input");
+
+    // XXX: Move this to the baseelement?
+    this.input.addEventListener("change", () => {
+      this.setChecked(this.input.checked);
+      var commandEvent = new Event('command');
+      this.dispatchEvent(commandEvent);
+    });
+
     let comment = document.createComment("Creating xbl-checkbox-baseline");
     this.prepend(comment);
   }
   disconnectedCallback() {}
 
   set checked(val) {
     return this.setChecked(val);
   }
 
   get checked() {
-    return this.getAttribute("checked") == "true";
+    return this.input.checked;
   }
+
   setChecked(aValue) {
-    var change = aValue != (this.getAttribute("checked") == "true");
-    if (aValue) this.setAttribute("checked", "true");
-    else this.removeAttribute("checked");
+    var change = aValue != this.input.checked;
+    if (aValue) {
+      this.input.checked = true;
+      this.setAttribute("checked", "true");
+    }
+    else {
+      this.removeAttribute("checked");
+    }
+
+    // XXX: 'change' is wrong when setChecked is triggered from clicking on the HTML input
     if (change) {
       var event = document.createEvent("Events");
       event.initEvent("CheckboxStateChange", true, true);
       this.dispatchEvent(event);
     }
     return aValue;
   }
 }
