# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  f9c871fda95a9b79c9270573a07103e352bf7c0f

diff --git a/browser/base/content/customelements/base-element.js b/browser/base/content/customelements/base-element.js
--- a/browser/base/content/customelements/base-element.js
+++ b/browser/base/content/customelements/base-element.js
@@ -44,17 +44,21 @@ InheritsConnector.prototype.copyAttribut
   if (attributeName === "id") {
     return;
   }
 
   for (let [node, list] of this._nodesToAttributes.entries()) {
     // Handle both inherits="accesskey" and inherits="text=label"
     list.forEach(a => {
       if (a === attributeName) {
-        node.setAttribute(a, this._host.getAttribute(a));
+        if (a === "checked") {
+          node.checked = this._host.getAttribute(a) == "false" ? false : true;
+        } else {
+          node.setAttribute(a, this._host.getAttribute(a));
+        }
       } else if (a.endsWith('=' + attributeName)) {
         let mapFrom = a.split('=')[1];
         let mapTo = a.split('=')[0];
         if (mapTo === "text") {
           node.textContent = this._host.getAttribute(mapFrom);
         } else {
           node.setAttribute(mapTo, this._host.getAttribute(mapFrom));
         }
@@ -132,17 +136,22 @@ ObserverConnector.prototype.watch = func
     return;
   }
 
   this._observeTarget = document.getElementById(targetID);
   if (this._observeTarget) {
     this._observer = new MutationObserver(mutations => {
       mutations.forEach(mutation => {
         if (!this._observeTarget.hasAttribute(mutation.attributeName)) {
-          this.removeAttribute(mutation.attributeName);
+          if (mutation.attributeName === "checked") {
+            // XXX Look here
+            this.checked = false;
+          } else {
+            this.removeAttribute(mutation.attributeName);
+          }
         }
       });
 
       this.copyAttributes();
     });
     this._observer.observe(this._observeTarget, {
       attributes: true,
     });
diff --git a/browser/base/content/customelements/firefox-label.js b/browser/base/content/customelements/firefox-label.js
--- a/browser/base/content/customelements/firefox-label.js
+++ b/browser/base/content/customelements/firefox-label.js
@@ -236,34 +236,37 @@ customElements.define("firefox-label", F
 class XblCheckboxBaseline extends BaseElement {
   constructor() {
     super();
   }
   connectedCallback() {
     super.connectedCallback();
     // console.log(this, "connected");
 
-    this.innerHTML = `<html:input type='checkbox' />
+    this.innerHTML = `<html:input type='checkbox' inherits="checked" />
 <hbox class="checkbox-label-box" flex="1">
 <firefox-label class="checkbox-label" inherits="text=label,accesskey,crop" flex="1"></firefox-label>
 </hbox>`;
+
+    this.input = this.querySelector("input");
     let comment = document.createComment("Creating xbl-checkbox-baseline");
     this.prepend(comment);
   }
   disconnectedCallback() {}
 
   set checked(val) {
     return this.setChecked(val);
   }
 
   get checked() {
-    return this.getAttribute("checked") == "true";
+    return this.input.checked;
   }
   setChecked(aValue) {
-    var change = aValue != (this.getAttribute("checked") == "true");
+    var change = aValue != this.input.checked;
+    dump("setChecked " + change + ":" + aValue + ":" + this.input.checked + "\n");
     if (aValue) this.setAttribute("checked", "true");
     else this.removeAttribute("checked");
     if (change) {
       var event = document.createEvent("Events");
       event.initEvent("CheckboxStateChange", true, true);
       this.dispatchEvent(event);
     }
     return aValue;
diff --git a/browser/components/preferences/in-content-new/main.js b/browser/components/preferences/in-content-new/main.js
--- a/browser/components/preferences/in-content-new/main.js
+++ b/browser/components/preferences/in-content-new/main.js
@@ -414,17 +414,17 @@ var gMainPane = {
       // Showing attribution only for Bing Translator.
       Components.utils.import("resource:///modules/translation/Translation.jsm");
       if (Translation.translationEngine == "bing") {
         document.getElementById("bingAttribution").removeAttribute("hidden");
       }
     }
 
     if (AppConstants.E10S_TESTING_ONLY) {
-      setEventListener("e10sAutoStart", "command",
+      setEventListener("e10sAutoStart", "change",
                        gMainPane.enableE10SChange);
       let e10sCheckbox = document.getElementById("e10sAutoStart");
 
       let e10sPref = Preferences.get("browser.tabs.remote.autostart");
       let e10sTempPref = Preferences.get("e10sTempPref");
       let e10sForceEnable = Preferences.get("e10sForceEnable");
 
       let preffedOn = e10sPref.value || e10sTempPref.value || e10sForceEnable.value;
@@ -660,16 +660,18 @@ var gMainPane = {
       if (buttonIndex == CONFIRM_RESTART_PROMPT_RESTART_NOW) {
         for (let prefToChange of prefsToChange) {
           prefToChange.value = e10sCheckbox.checked;
         }
 
         Services.startup.quit(Ci.nsIAppStartup.eAttemptQuit | Ci.nsIAppStartup.eRestart);
       }
 
+      dump("enableE10SChange revert? " + (e10sPref.value || e10sTempPref.value) + "\n");
+
       // Revert the checkbox in case we didn't quit
       e10sCheckbox.checked = e10sPref.value || e10sTempPref.value;
     }
   },
 
   separateProfileModeChange() {
     if (AppConstants.MOZ_DEV_EDITION) {
       function quitApp() {
