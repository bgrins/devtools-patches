# HG changeset patch
# Parent aea89a54e8fb23b3682b3d00111a13e037676812
# User Brian Grinstead <bgrinstead@mozilla.com>
logging


diff --git a/toolkit/devtools/webconsole/utils.js b/toolkit/devtools/webconsole/utils.js
--- a/toolkit/devtools/webconsole/utils.js
+++ b/toolkit/devtools/webconsole/utils.js
@@ -967,37 +967,62 @@ function getMatchedProps(aObj, aMatch)
  *         Object that contains the matchProp and the list of names.
  */
 function getMatchedProps_impl(aObj, aMatch, {chainIterator, getProperties})
 {
   let matches = new Set();
 
   // We need to go up the prototype chain.
   let iter = chainIterator(aObj);
+  console.log("Matching ", aMatch);
+  console.time("full shebang");
   for (let obj of iter) {
+    console.log("Iterating", obj);
+    console.time("getProperties");
     let props = getProperties(obj);
-    props = props.filter(prop => prop[0] < '0' || prop[0] > '9');
+    console.timeEnd("getProperties");
 
-    for (let prop of props) {
+    // Properties starting with numbers make no sense to autocomplete.
+    // Also, filter out non-matching properties.
+    console.time("filtering properties");
+    // props = props.filter(prop => prop.indexOf(aMatch) != 0 && prop[0] < '0' || prop[0] > '9');
+    console.timeEnd("filtering properties");
+
+    console.time("looping properties");
+    for (let i = 0; i < props.length; i++) {
+    // for (let prop of props) {
+      let prop = props[i];
       if (prop.indexOf(aMatch) != 0) {
         continue;
       }
 
-      matches.add(prop);
+      // If it is an array index, we can't take it.   matches.add(prop);
+      // This uses a trick: converting a string to a number yields NaN if   
+      // the operation failed, and NaN is not equal to itself.    
+      if (+prop != +prop) {   
+        matches.add(prop);    
+      }
+
+
+      // matches.add(prop);
 
       if (matches.size > MAX_COMPLETIONS) {
         break;
       }
     }
 
     if (matches.size > MAX_COMPLETIONS) {
       break;
     }
   }
 
+  console.log("Found: " + matches.size + " matches");
+  console.timeEnd("looping properties");
+  console.timeEnd("full shebang");
+
   return {
     matchProp: aMatch,
     matches: [...matches],
   };
 }
 
 /**
  * Returns a property value based on its name from the given object, by
