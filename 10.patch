From 39642cbf2108aa37997fdd80c2754f881e84ecad Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Fri, 13 Feb 2015 20:38:32 +0000
Subject: [PATCH 01/12] Bug 1128988 - runAt support for commands/converters
 (squash of PR9)
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

* The first commit's message is:

Make generator functions have a *

* This is the 2nd commit message:

Use l10n module for l10n rather than gcli

Initially GCLI had a couple of helper function (lookup and lookupFormat)
for l10n, but this is bad for 2 (related) reasons: It's a failure to
separate concerns, and practically it means GCLI is loaded more eagerly
than it needs to be.

This change uses a separate l10n module.

* This is the 3rd commit message:

Be clearer about uses of the gcli/index module

Previously the 'gcli' object (from gcli/index) was re-exported from the helpers
module, this change stops that, so the only test directory that was actually
using gcli now gets it directly.

The next step is to make the individual tests that need 'gcli' import it
directly.

* This is the 4th commit message:

Refactor the startup process to move all module discovery to one place

Previously there was commands-index and gcli/index, but now all the
module discovery all happens in commands-index. This means that the
DeveloperToolbar can create Requisitions and FFDisplay objects itself
without the need of helpers (in order to get access to the 'system').

* This is the 5th commit message:

Inline getEvalCommand.

Didn't add anything, but served to confuse what was happening to
requisition.system, which we want to be dynamically swappable.

* This is the 6th commit message:

Output doesn't need the context object; remove it.

* This is the 7th commit message:

Variable rename gcli â†’ system.

Make it clearer what were acting on here

* This is the 8th commit message:

Merge from GCLI web

This is an import of all the changes made in the GCLI repo. See here:
  https://github.com/joewalker/gcli/commits/master
The changes are those from 4 Feb 2015 (d59796b) to 12 Feb 2015 (fd63021)

* This is the 9th commit message:

Refactor DeveloperToolbar code to fit GCLI import

commands-index.js Now has 2 functions which create 'system' objects:
loadForServer() which is designed to be called by GcliActor and loadForTarget()
which is designed to be called by the DeveloperToolbar and the Toolbox.

Some of the changes to GcliActor are to sync with the changes in GCLI.

* This is the 10th commit message:

Make sure all commands have a 'runAt' property

* This is the 11th commit message:

mozilla-central uses " rather than '

* This is the 12th commit message:

Remove unwanted console.log

* This is the 13th commit message:

Remove files not used in Firefox

* This is the 14th commit message:

Dependency on main.js was causing problems, workaround for now

* This is the 15th commit message:

'system' should use a GcliFront not a connector (from GCLI)

GCLI in general should rely on a front rather than a connector which is
a much lower level thing.

* This is the 16th commit message:

Be less brutal with errors

When registering modules it's bad to take the nuclear option because
then nothing works on a small error, so we log instead.

* This is the 17th commit message:

Significant work on GcliActor

* This is the 18th commit message:

Improve support for custom properties for commands

(Imported from GCLI commit with additional changes to uses of the
'specs' function in Firefox)

GCLI has allowed (by turning a blind eye) to commands and other items
that have additional properties. This is used by Firefox to allow
commands to be placed in the toolbox and toolbar buttons with custom
icons.

With remote GCLI it's important that these custom properties are
transferred along with the standard command metadata. This change allows
the 'specs' function to take an array of custom properties which should
be transferred.

* This is the 19th commit message:

Firefox uses " rather than '

* This is the 20th commit message:

Allow remote commands in the toolbox toolbar

* This is the 21st commit message:

Add warning message on use of deprecated functions in environment

* This is the 22nd commit message:

Remove lots of dead code from the init of FFDisplay

Really we should kill FFDisplay entirely, and move the mozui code into
the browser/devtools/commandline folder, but that's for another day.

* This is the 23rd commit message:

Make addon.js safe to load in a child process.

* This is the 24th commit message:

Make cookie.js safe to load in a child process

cookie.js should not use environment.document

* This is the 25th commit message:

Use fat arrow functions

* This is the 26th commit message:

The entire devtoolsModules definition was duplicated. De-dupe

I suspect a merge error.

* This is the 27th commit message:

Merge clientModules into baseModules

Historically they were separate because we thought you might want to
register commands in different places, but now we have the 'location'
system then don't need to be separate.

Also we were previously importing everything and then commenting where
we didn't want the import. Now we're just importing what we need. There
doesn't seem much benefit in saying (badly) what we don't need. More
useful is to just say what we do.

* This is the 28th commit message:

The eyedropper command needs access to chrome not content

* This is the 29th commit message:

Cache the actor

'this' would be the environment and not the gcliActor, so enclose the
tabActor so be sure what we're accessing.

* This is the 30th commit message:

2 types that commands might use need informing about the document.

* This is the 31st commit message:

Remove commented out code (and an extra space)

* This is the 32nd commit message:

There's no point in setting up the target in the constructor

We need to do it in the show() function anyway, so leave it to there.

* This is the 33rd commit message:

Split the screenshot command to have a separate converter for e10s

* This is the 34th commit message:

Include imgur support

We've had this attachment [1] to bug 992386, outstanding for ages. I'm
just totally breaking it, to the point where if we don't include it now
then it will rot forever, so I'm including it now.

This is a basic port of something that was close to r+, so my hunch is
that this changeset doesn't need a significant review. I'm checking this
is now so you can see the steps.

That said, there are some things that I know I've broken here, so you
might want to check ahead to the end result.

It's also possible that by the end this will probably look a lot clearer
viewed from scratch.

[1]: https://bugzilla.mozilla.org/page.cgi?id=splinter.html&bug=992386&attachment=8507127

* This is the 35th commit message:

Complete pass 1 of tidying up the screenshot command

But we're not done yet. Currently neither the clipboard option nor the
imgur option works, this could have something to do with running in a
content process, and perhaps with sandboxing even if that's not a
problem now, then it will be in the future, so maybe we need to move
that to the converter.

Also the --chrome option is probably not going to work in the content
process, so since commands can only run in a single process, I think
we're going to need some sort of a 'chromescreenshot' command, which can
probably share almost all the code with the 'screenshot' command, but
needs a different document to work from.

* This is the 36th commit message:

Remove hard-coded module list from commands-index

Expected review fix:
https://github.com/joewalker/gecko-dev/commit/a7a75328845edb28aa6426cb6dd6be71870e244e

This splits main.js so the definitions are in definitions.js.

We can't load gDevTools in a child process so the command modules that
load it need to lazyLoad it instead, which is fine because they never
actually need it in the child process.

I've not yet worked out why we need to require(Services) in
console-output. We require it in enough other places that I don't see
the problem with requiring it, but I still don't get it.

It's used here:
https://dxr.mozilla.org/mozilla-central/source/browser/devtools/webconsole/console-output.js#30
And should be defined here:
https://dxr.mozilla.org/mozilla-central/source/toolkit/devtools/Loader.jsm?from=Loader.jsm#31

* This is the 37th commit message:

Use WeakMap<Client, Front> rather than WeakMap<Target, Front>

The front belongs to the client rather than the target

Fix for:
https://github.com/joewalker/gecko-dev/commit/19178eb762872d6dafa203971a531583a0faccc5#commitcomment-9875837

* This is the 38th commit message:

Firefox uses " rather than '

A fix for
https://github.com/joewalker/gecko-dev/commit/20642d6a87f8918932c2d96b153594cd75f06027#commitcomment-9879830

Update strings file for recent change to cli.js

Back in joewalker/gcli@dc4a419 (which was merged in
joewalker/gecko-dev@77d1db10) we updated the string but not the
definition. This corrects that.

See also: https://github.com/joewalker/gcli/commit/dc4a419d3ab7e156ecd78d3eaada7e111d0b9510

Stop providing the server content document to types on the client

setContentDocument isn't going to work under e10s, I suspect that no
commands use it any more, but if there are we'll need to fix them.

Use const in place of let when we can

Fix where a number of commands are run

Most non-trivial commands are only going to run correctly on the server or
the client, and our tests are generally good at flushing this out.

Note on the 'jsb' command: I'm not sure this is a particularly useful command,
I'm half of the mind that we should remove it, but I think that's another job.
However I did add a bit of detail to the exec test.

Remove unneeded and confusing function names

Import Cc and Ci for access to nsICookieManager2

Probably needed now because of the changes to the imports in main.js.

Fix cookie command: Use env.document rather than env.target

Confusion over what we had access to client vs server

Minor 'jsb' command fixes

reject errors rather than resolving them, and we're not using aEvt.

Minor: simplify imports

Merge from GCLI web.

This is the changes made after fd63021 up to and including 30b612e
That is, changes made on the 13 Feb up to and including 5 Mar

Merge from GCLI web.

This is the changes made after 30b612e up to and including d374a91
That is, changes made on the 6 Mar up to and including 10 Mar

Sync helpers with GCLI.

This should maybe be part of the recent merge, but since helpers.js
isn't part of toolkit/devtools/gcli/source, the merge is manual.

Changes:
- s/isNoDom/isNode
- minor line-wrap fix.
- be more helpful in runTests

Test update. Part 1 (Updates to sync with recent GCLI merge)

This keeps up with the following changes:
- Replace document/globalObject with windowHolder joewalker/gcli@d374a91

Test update. Part 2 (gcli-input â†’ gcli-root and p â†’ div)

joewalker/gcli@30b612e8 [1] changed to using a document with a known
element called div#gcli-root because the original assumed-to-exist element
got removed a while ago in a refactor. This makes the Firefox tests fall
into line.

[1]: https://github.com/joewalker/gcli/commit/30b612e8722c879ed2e785a64f482867d5c5115e

Test update. Part 3 (Update and reduce test skips)

We now have some sort of a DOM available in all environments for testing
so we got rid of all isNoDom skips. Some of the isNoDom skips became
isNode skips due to limitations in the UI automation system.
We commented the reasons for the isPhantonjs skips.
One test skip got added, predictions from delegate types don't work
remotely.

Test update. Part 4 (Adapt to remote testing)

We updated the way test commands were created in joewalker/gcli/989537
to help with remote testing. This reflects those changes.
And it removes tests for values on remote types (because the values can't be
transferred across the remote interface)

See also https://github.com/joewalker/gcli/commit/989537615525b0d5ac980b1681e12177d8506fc4

Test update. Part 5 (Other changes)

We also added tests for custom properties, the new 'nudge' replacement
for increment/decrement, removed some settings mocks that we didn't need,
node type tests should access the NodeList properly

Lets have "console [open|close]" return nothing rather than a boolean

exec{output:...} is testing the string output, so using true should fail
but only succeeds because automagic type conversion.

Be brutal about errors dealing with the environment.

Fix misspelled attribute. Matters in an xhtml document.

Max line length = 80 chars. Wrap

Fix an increment/decrement â†’ nudge that got forgotten

Fix csscoverage tests

I'm a bit lost as to how this worked before. start() requires those
arguments, and there is an obvious race when the navigation happens
before the listener has been added.

Update comments: textChanged is no longer an event

2 more ".then(null, " â†’ ".catch("

Missed last time because we did them on the master GCLI branch. These
files are only on the mozilla branch.

A better check for when one keyboard event has overtaken another.

Perhaps we should get rid of 'updated' if the alternative is so simple,
and works in more cases.

Use platform promises rather than deprected-sync-thenables

Having done s/.then(null, /.catch(/g we're kind of nudged into this
because deprected-sync-thenables doesn't support .catch(). We've been
using DOM promises on the web for a while so I'm not too worried about
the implications of these being async.

Update highlight command for remote execution

This is a temporary hack. We probably want a better way to expose the
tabActor.

Enable tests in e10s mode

Merge from GCLI web.

This is the changes made after d374a91 up to and including de35726
That is, changes made on the 10 Mar up to and including 13 Mar

Revert how we require Services, so we can reason about breakage more easily

Remove unused parameter

See https://github.com/joewalker/gecko-dev/commit/160c898003eb71b195b78bb3459e7b2281882ca0#commitcomment-10222571

Update comment

See https://github.com/joewalker/gecko-dev/commit/b7116dd5b16c4820bc92c16cf7531606400accd0#commitcomment-10222519

Add comment on the meaning on (()=>{})

Merge from GCLI web.

This is the changes made after de35726 up to and including 75877de
That is, changes committed on the 17 Mar.

However it does not include the change to domtemplate.js. For that see
the next change, because I'm doing that slightly differently.

Merge from GCLI web (domtemplate.js â†’ Templater.jsm)

Remove windowHolder

We removed windowHolder from GCLI in recent merge. This keeps the actor
in sync.
---
 browser/app/profile/firefox.js                     |   5 +
 browser/devtools/commandline/commands-index.js     | 127 +++++-
 browser/devtools/commandline/test/browser.ini      |   1 -
 .../devtools/commandline/test/browser_cmd_addon.js |   2 +-
 .../test/browser_cmd_appcache_invalid.js           |   2 +-
 .../commandline/test/browser_cmd_appcache_valid.js |   2 +-
 .../commandline/test/browser_cmd_calllog.js        |   2 +-
 .../commandline/test/browser_cmd_calllog_chrome.js |   2 +-
 .../commandline/test/browser_cmd_commands.js       |   4 +-
 .../test/browser_cmd_csscoverage_startstop.js      |  13 +-
 .../devtools/commandline/test/browser_cmd_jsb.js   |   7 +-
 .../devtools/commandline/test/browser_cmd_media.js |   2 +-
 .../commandline/test/browser_cmd_pagemod_export.js |   8 +-
 .../devtools/commandline/test/browser_cmd_pref1.js |   2 +-
 .../devtools/commandline/test/browser_cmd_pref2.js |   2 +-
 .../devtools/commandline/test/browser_cmd_pref3.js |   2 +-
 .../commandline/test/browser_cmd_screenshot.js     |   7 +-
 .../commandline/test/browser_cmd_settings.js       |  10 +-
 .../commandline/test/browser_gcli_async.js         |   8 +-
 .../commandline/test/browser_gcli_canon.js         |  29 +-
 .../devtools/commandline/test/browser_gcli_cli1.js |   9 +-
 .../devtools/commandline/test/browser_gcli_cli2.js |  42 +-
 .../commandline/test/browser_gcli_completion1.js   |  10 +-
 .../commandline/test/browser_gcli_completion2.js   |   9 +-
 .../commandline/test/browser_gcli_context.js       |   8 +-
 .../devtools/commandline/test/browser_gcli_date.js |  24 +-
 .../devtools/commandline/test/browser_gcli_exec.js |  67 +--
 .../devtools/commandline/test/browser_gcli_fail.js |   8 +-
 .../devtools/commandline/test/browser_gcli_file.js |  13 +-
 .../commandline/test/browser_gcli_fileparser.js    |   8 +-
 .../commandline/test/browser_gcli_filesystem.js    |   8 +-
 .../commandline/test/browser_gcli_focus.js         |   8 +-
 .../commandline/test/browser_gcli_history.js       |   8 +-
 .../commandline/test/browser_gcli_incomplete.js    |   8 +-
 .../commandline/test/browser_gcli_inputter.js      |  10 +-
 .../commandline/test/browser_gcli_intro.js         |   9 +-
 .../devtools/commandline/test/browser_gcli_js.js   |  56 +--
 .../commandline/test/browser_gcli_keyboard1.js     |  20 +-
 .../commandline/test/browser_gcli_keyboard2.js     |   8 +-
 .../commandline/test/browser_gcli_keyboard3.js     |   8 +-
 .../commandline/test/browser_gcli_keyboard4.js     |   8 +-
 .../commandline/test/browser_gcli_keyboard5.js     |   8 +-
 .../commandline/test/browser_gcli_keyboard6.js     |   8 +-
 .../devtools/commandline/test/browser_gcli_menu.js |   8 +-
 .../devtools/commandline/test/browser_gcli_node.js |  87 ++--
 .../commandline/test/browser_gcli_pref1.js         |  13 +-
 .../commandline/test/browser_gcli_pref2.js         |  25 +-
 .../commandline/test/browser_gcli_remotews.js      |  20 +-
 .../commandline/test/browser_gcli_remotexhr.js     |  20 +-
 .../commandline/test/browser_gcli_resource.js      |  38 +-
 .../commandline/test/browser_gcli_short.js         |   8 +-
 .../commandline/test/browser_gcli_spell.js         |   8 +-
 .../commandline/test/browser_gcli_split.js         |   8 +-
 .../commandline/test/browser_gcli_string.js        |   8 +-
 .../commandline/test/browser_gcli_tokenize.js      |   8 +-
 .../commandline/test/browser_gcli_tooltip.js       |   8 +-
 .../commandline/test/browser_gcli_types.js         |  24 +-
 .../commandline/test/browser_gcli_union.js         |  12 +-
 .../devtools/commandline/test/browser_gcli_url.js  |  10 +-
 browser/devtools/commandline/test/helpers.js       |  40 +-
 browser/devtools/commandline/test/mockCommands.js  |  70 ++-
 browser/devtools/debugger/debugger-commands.js     | 104 +++--
 browser/devtools/definitions.js                    | 409 ++++++++++++++++++
 browser/devtools/eyedropper/commands.js            |  10 +-
 browser/devtools/framework/toolbox.js              |   2 +-
 browser/devtools/inspector/inspector-commands.js   |  12 +-
 browser/devtools/main.js                           | 430 +------------------
 browser/devtools/moz.build                         |   1 +
 .../devtools/responsivedesign/resize-commands.js   |  32 +-
 browser/devtools/scratchpad/scratchpad-commands.js |   6 +-
 browser/devtools/shared/DeveloperToolbar.jsm       | 101 ++---
 .../devtools/styleeditor/styleeditor-commands.js   |  12 +-
 browser/devtools/tilt/tilt-commands.js             |  70 +--
 browser/devtools/webconsole/console-commands.js    |  31 +-
 browser/devtools/webconsole/console-output.js      |   2 +
 .../en-US/chrome/browser/devtools/gcli.properties  |   2 +-
 .../browser/devtools/gclicommands.properties       |  19 +
 toolkit/devtools/Loader.jsm                        |   3 +
 toolkit/devtools/gcli/Templater.jsm                |  59 ++-
 toolkit/devtools/gcli/commands/addon.js            |  70 ++-
 toolkit/devtools/gcli/commands/appcache.js         |  55 ++-
 toolkit/devtools/gcli/commands/calllog.js          |  49 ++-
 toolkit/devtools/gcli/commands/cmd.js              |  19 +-
 toolkit/devtools/gcli/commands/cookie.js           |  74 ++--
 toolkit/devtools/gcli/commands/csscoverage.js      |  13 +-
 toolkit/devtools/gcli/commands/folder.js           |  20 +-
 toolkit/devtools/gcli/commands/highlight.js        |  59 ++-
 toolkit/devtools/gcli/commands/inject.js           |  14 +-
 toolkit/devtools/gcli/commands/jsb.js              |  46 +-
 toolkit/devtools/gcli/commands/listen.js           |  16 +-
 toolkit/devtools/gcli/commands/media.js            |  16 +-
 toolkit/devtools/gcli/commands/pagemod.js          |  62 +--
 toolkit/devtools/gcli/commands/paintflashing.js    |  27 +-
 toolkit/devtools/gcli/commands/restart.js          |  12 +-
 toolkit/devtools/gcli/commands/screenshot.js       | 473 ++++++++++++++-------
 toolkit/devtools/gcli/commands/tools.js            |  31 +-
 toolkit/devtools/gcli/moz.build                    |   6 +-
 .../devtools/gcli/source/docs/writing-commands.md  |   3 +-
 toolkit/devtools/gcli/source/docs/writing-types.md |   8 +-
 toolkit/devtools/gcli/source/lib/gcli/api.js       | 217 ----------
 toolkit/devtools/gcli/source/lib/gcli/cli.js       |  66 ++-
 .../gcli/source/lib/gcli/commands/clear.js         |   1 +
 .../gcli/source/lib/gcli/commands/commands.js      |  69 ++-
 .../gcli/source/lib/gcli/commands/connect.js       |  40 +-
 .../gcli/source/lib/gcli/commands/global.js        |   1 +
 .../devtools/gcli/source/lib/gcli/commands/help.js |   1 +
 .../gcli/source/lib/gcli/commands/mocks.js         |   3 +
 .../devtools/gcli/source/lib/gcli/commands/pref.js |   3 +
 .../gcli/source/lib/gcli/commands/preflist.js      |  22 +-
 .../devtools/gcli/source/lib/gcli/commands/test.js |   4 +-
 .../gcli/source/lib/gcli/connectors/connectors.js  |  13 +-
 .../gcli/source/lib/gcli/connectors/index.js       | 185 --------
 .../gcli/source/lib/gcli/connectors/protocol.js    |  56 ---
 .../gcli/source/lib/gcli/connectors/rdp.js         | 145 -------
 .../gcli/source/lib/gcli/connectors/remoted.js     | 275 ------------
 .../gcli/source/lib/gcli/converters/basic.js       |  19 +
 .../gcli/source/lib/gcli/converters/converters.js  |  20 +-
 .../devtools/gcli/source/lib/gcli/fields/fields.js |   7 +
 .../gcli/source/lib/gcli/fields/selection.js       |   4 +-
 toolkit/devtools/gcli/source/lib/gcli/index.js     | 148 -------
 .../gcli/source/lib/gcli/languages/command.js      |  14 +-
 .../gcli/source/lib/gcli/languages/javascript.js   |   7 +-
 .../gcli/source/lib/gcli/languages/languages.js    |  12 +-
 .../gcli/source/lib/gcli/mozui/ffdisplay.js        | 163 +------
 .../gcli/source/lib/gcli/mozui/inputter.js         |  21 +-
 .../devtools/gcli/source/lib/gcli/mozui/tooltip.js |   9 +-
 toolkit/devtools/gcli/source/lib/gcli/settings.js  |   1 -
 toolkit/devtools/gcli/source/lib/gcli/system.js    | 322 ++++++++++++++
 .../devtools/gcli/source/lib/gcli/types/date.js    |  25 +-
 .../gcli/source/lib/gcli/types/delegate.js         |  85 ++--
 .../gcli/source/lib/gcli/types/javascript.js       |  35 +-
 .../devtools/gcli/source/lib/gcli/types/node.js    |  80 ++--
 .../devtools/gcli/source/lib/gcli/types/number.js  |  34 +-
 .../gcli/source/lib/gcli/types/resource.js         |  52 +--
 .../gcli/source/lib/gcli/types/selection.js        |  89 ++--
 .../devtools/gcli/source/lib/gcli/types/setting.js |   3 +
 .../devtools/gcli/source/lib/gcli/types/types.js   |  20 +-
 toolkit/devtools/gcli/source/lib/gcli/types/url.js |   2 +-
 toolkit/devtools/gcli/source/lib/gcli/ui/menu.js   |  21 +-
 toolkit/devtools/gcli/source/lib/gcli/util/host.js |   2 +-
 .../devtools/gcli/source/lib/gcli/util/promise.js  |  93 +---
 toolkit/devtools/gcli/source/lib/gcli/util/util.js |  38 +-
 toolkit/devtools/server/actors/gcli.js             | 283 ++++++++----
 143 files changed, 2838 insertions(+), 3267 deletions(-)
 create mode 100644 browser/devtools/definitions.js
 delete mode 100644 toolkit/devtools/gcli/source/lib/gcli/api.js
 delete mode 100644 toolkit/devtools/gcli/source/lib/gcli/connectors/index.js
 delete mode 100644 toolkit/devtools/gcli/source/lib/gcli/connectors/protocol.js
 delete mode 100644 toolkit/devtools/gcli/source/lib/gcli/connectors/rdp.js
 delete mode 100644 toolkit/devtools/gcli/source/lib/gcli/connectors/remoted.js
 create mode 100644 toolkit/devtools/gcli/source/lib/gcli/system.js

diff --git a/browser/app/profile/firefox.js b/browser/app/profile/firefox.js
index e0c7d0b..269cbc2 100644
--- a/browser/app/profile/firefox.js
+++ b/browser/app/profile/firefox.js
@@ -1603,6 +1603,11 @@ pref("devtools.fontinspector.enabled", true);
 // version for each user.
 pref("devtools.telemetry.tools.opened.version", "{}");
 
+// Set imgur upload client ID
+pref("devtools.gcli.imgurClientID", '0df414e888d7240');
+// Imgur's upload URL
+pref("devtools.gcli.imgurUploadURL", "https://api.imgur.com/3/image");
+
 // Whether the character encoding menu is under the main Firefox button. This
 // preference is a string so that localizers can alter it.
 pref("browser.menu.showCharacterEncoding", "chrome://browser/locale/browser.properties");
diff --git a/browser/devtools/commandline/commands-index.js b/browser/devtools/commandline/commands-index.js
index 6cf7f57..9e3e1fa 100644
--- a/browser/devtools/commandline/commands-index.js
+++ b/browser/devtools/commandline/commands-index.js
@@ -4,9 +4,56 @@
 
 "use strict";
 
-const gcli = require("gcli/index");
+const { createSystem, connectFront } = require("gcli/system");
+const { GcliFront } = require("devtools/server/actors/gcli");
 
-const commandModules = [
+/**
+ * This is the basic list of modules that should be loaded into each
+ * requisition instance whether server side or client side
+ */
+exports.baseModules = [
+  "gcli/types/delegate",
+  "gcli/types/selection",
+  "gcli/types/array",
+
+  "gcli/types/boolean",
+  "gcli/types/command",
+  "gcli/types/date",
+  "gcli/types/file",
+  "gcli/types/javascript",
+  "gcli/types/node",
+  "gcli/types/number",
+  "gcli/types/resource",
+  "gcli/types/setting",
+  "gcli/types/string",
+  "gcli/types/union",
+  "gcli/types/url",
+
+  "gcli/fields/fields",
+  "gcli/fields/delegate",
+  "gcli/fields/selection",
+
+  "gcli/ui/focus",
+  "gcli/ui/intro",
+
+  "gcli/converters/converters",
+  "gcli/converters/basic",
+  "gcli/converters/terminal",
+
+  "gcli/languages/command",
+  "gcli/languages/javascript",
+
+  "gcli/commands/clear",
+  "gcli/commands/context",
+  "gcli/commands/help",
+  "gcli/commands/pref",
+];
+
+/**
+ * Some commands belong to a tool (see getToolModules). This is a list of the
+ * modules that are *not* owned by a tool.
+ */
+exports.devtoolsModules = [
   "devtools/tilt/tilt-commands",
   "gcli/commands/addon",
   "gcli/commands/appcache",
@@ -27,15 +74,75 @@ const commandModules = [
   "gcli/commands/tools",
 ];
 
-gcli.addItemsByModule(commandModules, { delayedLoad: true });
+/**
+ * Register commands from tools with 'command: [ "some/module" ]' definitions.
+ * The map/reduce incantation squashes the array of arrays to a single array.
+ */
+const defaultTools = require("definitions").defaultTools;
+exports.devtoolsToolModules = defaultTools.map(def => def.commands || [])
+                                 .reduce((prev, curr) => prev.concat(curr), []);
+
+/**
+ * Cache of the system we created
+ */
+var systemForServer;
+
+/**
+ * Setup a system for use in a content process and make sure all the
+ * `runAt=server` modules are registered.
+ */
+exports.loadForServer = function() {
+  if (systemForServer == null) {
+    systemForServer = createSystem({ location: "server" });
 
-const defaultTools = require("main").defaultTools;
-for (let definition of defaultTools) {
-  if (definition.commands) {
-    gcli.addItemsByModule(definition.commands, { delayedLoad: true });
+    systemForServer.addItemsByModule(exports.baseModules, { delayedLoad: true });
+    systemForServer.addItemsByModule(exports.devtoolsModules, { delayedLoad: true });
+    systemForServer.addItemsByModule(exports.devtoolsToolModules, { delayedLoad: true });
+
+    const { mozDirLoader } = require("gcli/commands/cmd");
+    systemForServer.addItemsByModule("mozcmd", { delayedLoad: true, loader: mozDirLoader });
   }
-}
 
-const { mozDirLoader } = require("gcli/commands/cmd");
+  return systemForServer.load().then(() => systemForServer);
+};
+
+/**
+ * WeakMap<Target, Promise<System>>
+ */
+var systemForTarget = new WeakMap();
+
+/**
+ * The toolbox uses the following properties on a command to allow it to be
+ * added to the toolbox toolbar
+ */
+var customProperties = [ "buttonId", "buttonClass", "tooltipText" ];
+
+/**
+ * Create a system which connects to a GCLI in a remote target
+ */
+exports.loadForTarget = function(target) {
+  let promise = systemForTarget.get(target);
+  if (promise != null) {
+    return promise;
+  }
+
+  console.log("Creating GCLI system for " + target.url);
+  const system = createSystem({ location: "client" });
+
+  system.addItemsByModule(exports.baseModules, { delayedLoad: true });
+  system.addItemsByModule(exports.devtoolsModules, { delayedLoad: true });
+  system.addItemsByModule(exports.devtoolsToolModules, { delayedLoad: true });
+
+  const { mozDirLoader } = require("gcli/commands/cmd");
+  system.addItemsByModule("mozcmd", { delayedLoad: true, loader: mozDirLoader });
+
+  // Load the client system
+  promise = system.load().then(() => {
+    return GcliFront.create(target).then(front => {
+      return connectFront(system, front, customProperties).then(() => system);
+    });
+  });
 
-gcli.addItemsByModule("mozcmd", { delayedLoad: true, loader: mozDirLoader });
+  systemForTarget.set(target, promise);
+  return promise;
+};
diff --git a/browser/devtools/commandline/test/browser.ini b/browser/devtools/commandline/test/browser.ini
index 6614d0e..5494b16 100644
--- a/browser/devtools/commandline/test/browser.ini
+++ b/browser/devtools/commandline/test/browser.ini
@@ -1,5 +1,4 @@
 [DEFAULT]
-skip-if = e10s # Bug ?????? - devtools tests disabled with e10s
 subsuite = devtools
 support-files =
   head.js
diff --git a/browser/devtools/commandline/test/browser_cmd_addon.js b/browser/devtools/commandline/test/browser_cmd_addon.js
index 14fb93e..cd07c9e 100644
--- a/browser/devtools/commandline/test/browser_cmd_addon.js
+++ b/browser/devtools/commandline/test/browser_cmd_addon.js
@@ -7,7 +7,7 @@ function test() {
   return Task.spawn(spawnTest).then(finish, helpers.handleError);
 }
 
-function spawnTest() {
+function* spawnTest() {
   let options = yield helpers.openTab("about:blank");
   yield helpers.openToolbar(options);
 
diff --git a/browser/devtools/commandline/test/browser_cmd_appcache_invalid.js b/browser/devtools/commandline/test/browser_cmd_appcache_invalid.js
index 15cade6..d0e0a7f 100644
--- a/browser/devtools/commandline/test/browser_cmd_appcache_invalid.js
+++ b/browser/devtools/commandline/test/browser_cmd_appcache_invalid.js
@@ -11,7 +11,7 @@ function test() {
   return Task.spawn(spawnTest).then(finish, helpers.handleError);
 }
 
-function spawnTest() {
+function* spawnTest() {
   let lines = [
     'Manifest has a character encoding of ISO-8859-1. Manifests must have the ' +
       'utf-8 character encoding.',
diff --git a/browser/devtools/commandline/test/browser_cmd_appcache_valid.js b/browser/devtools/commandline/test/browser_cmd_appcache_valid.js
index e9a11ea..6643f93 100644
--- a/browser/devtools/commandline/test/browser_cmd_appcache_valid.js
+++ b/browser/devtools/commandline/test/browser_cmd_appcache_valid.js
@@ -10,7 +10,7 @@ function test() {
   return Task.spawn(spawnTest).then(finish, helpers.handleError);
 }
 
-function spawnTest() {
+function* spawnTest() {
   let options = yield helpers.openTab(TEST_URI);
   yield helpers.openToolbar(options);
 
diff --git a/browser/devtools/commandline/test/browser_cmd_calllog.js b/browser/devtools/commandline/test/browser_cmd_calllog.js
index 2ca225e..85a7e37 100644
--- a/browser/devtools/commandline/test/browser_cmd_calllog.js
+++ b/browser/devtools/commandline/test/browser_cmd_calllog.js
@@ -8,7 +8,7 @@ const TEST_URI = "data:text/html;charset=utf-8,gcli-calllog";
 let tests = {};
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
 
diff --git a/browser/devtools/commandline/test/browser_cmd_calllog_chrome.js b/browser/devtools/commandline/test/browser_cmd_calllog_chrome.js
index 1bc9d61..066588f 100644
--- a/browser/devtools/commandline/test/browser_cmd_calllog_chrome.js
+++ b/browser/devtools/commandline/test/browser_cmd_calllog_chrome.js
@@ -8,7 +8,7 @@ const TEST_URI = "data:text/html;charset=utf-8,cmd-calllog-chrome";
 let tests = {};
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
 
diff --git a/browser/devtools/commandline/test/browser_cmd_commands.js b/browser/devtools/commandline/test/browser_cmd_commands.js
index 78dc0a4..8ba0988 100644
--- a/browser/devtools/commandline/test/browser_cmd_commands.js
+++ b/browser/devtools/commandline/test/browser_cmd_commands.js
@@ -9,7 +9,7 @@ function test() {
   return Task.spawn(spawnTest).then(finish, helpers.handleError);
 }
 
-function spawnTest() {
+function* spawnTest() {
   let options = yield helpers.openTab(TEST_URI);
   yield helpers.openToolbar(options);
 
@@ -49,7 +49,7 @@ function spawnTest() {
   yield helpers.audit(options, [
     {
       setup: "console close",
-      exec: { output: true }
+      exec: { output: "" }
     }
   ]);
 
diff --git a/browser/devtools/commandline/test/browser_cmd_csscoverage_startstop.js b/browser/devtools/commandline/test/browser_cmd_csscoverage_startstop.js
index f1527c7..ad03364 100644
--- a/browser/devtools/commandline/test/browser_cmd_csscoverage_startstop.js
+++ b/browser/devtools/commandline/test/browser_cmd_csscoverage_startstop.js
@@ -33,18 +33,21 @@ add_task(function*() {
  * Visit all the pages in the test
  */
 function* navigate(usage, options) {
-  yield usage.start();
+  yield usage.start(options.chromeWindow, options.target);
 
   ok(usage.isRunning(), "csscoverage is running");
 
+  let load1Promise = helpers.listenOnce(options.browser, "load", true);
+
   yield helpers.navigate(PAGE_1, options);
 
   // Wait for the test pages to auto-cycle
-  let ev = yield helpers.listenOnce(options.browser, "load", true);
-  is(ev.target.location.href, PAGE_1, "page 1 loaded");
+  yield load1Promise;
+  is(options.window.location.href, PAGE_1, "page 1 loaded");
 
-  ev = yield helpers.listenOnce(options.browser, "load", true);
-  is(ev.target.location.href, PAGE_3, "page 3 loaded");
+  // Page 2 is a frame in page 1. JS in the page navigates to page 3.
+  yield helpers.listenOnce(options.browser, "load", true);
+  is(options.window.location.href, PAGE_3, "page 3 loaded");
 
   yield usage.stop();
 
diff --git a/browser/devtools/commandline/test/browser_cmd_jsb.js b/browser/devtools/commandline/test/browser_cmd_jsb.js
index cf2a9da..146d1f9 100644
--- a/browser/devtools/commandline/test/browser_cmd_jsb.js
+++ b/browser/devtools/commandline/test/browser_cmd_jsb.js
@@ -10,7 +10,7 @@ function test() {
   return Task.spawn(testTask).then(finish, helpers.handleError);
 }
 
-function testTask() {
+function* testTask() {
   let options = yield helpers.openTab("about:blank");
   yield helpers.openToolbar(options);
 
@@ -29,7 +29,10 @@ function testTask() {
     {
       setup: 'jsb ' + TEST_URI,
       // Should result in a new scratchpad window
-      exec: { }
+      exec: {
+        output: '',
+        error: false
+      }
     }
   ]);
 
diff --git a/browser/devtools/commandline/test/browser_cmd_media.js b/browser/devtools/commandline/test/browser_cmd_media.js
index 41973c3..c4bb3fe 100644
--- a/browser/devtools/commandline/test/browser_cmd_media.js
+++ b/browser/devtools/commandline/test/browser_cmd_media.js
@@ -74,7 +74,7 @@ let tests = {
 };
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
 
diff --git a/browser/devtools/commandline/test/browser_cmd_pagemod_export.js b/browser/devtools/commandline/test/browser_cmd_pagemod_export.js
index c405a29..3d4cefc 100644
--- a/browser/devtools/commandline/test/browser_cmd_pagemod_export.js
+++ b/browser/devtools/commandline/test/browser_cmd_pagemod_export.js
@@ -10,7 +10,7 @@ function test() {
   return Task.spawn(spawnTest).then(finish, helpers.handleError);
 }
 
-function spawnTest() {
+function* spawnTest() {
   let options = yield helpers.openTab(TEST_URI);
   yield helpers.openToolbar(options);
 
@@ -302,7 +302,8 @@ function spawnTest() {
         args: {
           searchAttributes: { value: undefined, status: 'INCOMPLETE' },
           searchElements: { value: undefined, status: 'INCOMPLETE' },
-          root: { value: undefined },
+          // root: { value: undefined }, // 'root' is a node which is remote
+                                         // so we can't see the value in tests
           ignoreCase: { value: false },
         }
       },
@@ -317,7 +318,8 @@ function spawnTest() {
         args: {
           searchAttributes: { value: 'foo' },
           searchElements: { value: 'bar' },
-          root: { value: undefined },
+          // root: { value: undefined }, // 'root' is a node which is remote
+                                         // so we can't see the value in tests
           ignoreCase: { value: false },
         }
       },
diff --git a/browser/devtools/commandline/test/browser_cmd_pref1.js b/browser/devtools/commandline/test/browser_cmd_pref1.js
index 4e2aa41..0c059ee 100644
--- a/browser/devtools/commandline/test/browser_cmd_pref1.js
+++ b/browser/devtools/commandline/test/browser_cmd_pref1.js
@@ -13,7 +13,7 @@ function test() {
   return Task.spawn(spawnTest).then(finish, helpers.handleError);
 }
 
-function spawnTest() {
+function* spawnTest() {
   let options = yield helpers.openTab(TEST_URI);
   yield helpers.openToolbar(options);
 
diff --git a/browser/devtools/commandline/test/browser_cmd_pref2.js b/browser/devtools/commandline/test/browser_cmd_pref2.js
index 74ed916..64dafbf 100644
--- a/browser/devtools/commandline/test/browser_cmd_pref2.js
+++ b/browser/devtools/commandline/test/browser_cmd_pref2.js
@@ -13,7 +13,7 @@ function test() {
   return Task.spawn(spawnTest).then(finish, helpers.handleError);
 }
 
-function spawnTest() {
+function* spawnTest() {
   let options = yield helpers.openTab(TEST_URI);
   yield helpers.openToolbar(options);
 
diff --git a/browser/devtools/commandline/test/browser_cmd_pref3.js b/browser/devtools/commandline/test/browser_cmd_pref3.js
index fea31d9..073eb92 100644
--- a/browser/devtools/commandline/test/browser_cmd_pref3.js
+++ b/browser/devtools/commandline/test/browser_cmd_pref3.js
@@ -16,7 +16,7 @@ function test() {
   return Task.spawn(spawnTest).then(finish, helpers.handleError);
 }
 
-function spawnTest() {
+function* spawnTest() {
   let options = yield helpers.openTab(TEST_URI);
   yield helpers.openToolbar(options);
 
diff --git a/browser/devtools/commandline/test/browser_cmd_screenshot.js b/browser/devtools/commandline/test/browser_cmd_screenshot.js
index 437daa9..bf0726c 100644
--- a/browser/devtools/commandline/test/browser_cmd_screenshot.js
+++ b/browser/devtools/commandline/test/browser_cmd_screenshot.js
@@ -11,7 +11,7 @@ function test() {
   return Task.spawn(spawnTest).then(finish, helpers.handleError);
 }
 
-function spawnTest() {
+function* spawnTest() {
   waitForExplicitFinish();
 
   info("RUN TEST: non-private window");
@@ -81,11 +81,6 @@ function addTabWithToolbarRunTests(win) {
         input:  'screenshot --selector img#testImage',
         markup: 'VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV',
         status: 'VALID',
-        args: {
-          selector: {
-            value: options.window.document.getElementById("testImage")
-          },
-        }
       },
     },
   ]);
diff --git a/browser/devtools/commandline/test/browser_cmd_settings.js b/browser/devtools/commandline/test/browser_cmd_settings.js
index 8b4e272..38eb52e1 100644
--- a/browser/devtools/commandline/test/browser_cmd_settings.js
+++ b/browser/devtools/commandline/test/browser_cmd_settings.js
@@ -16,14 +16,14 @@ function test() {
   return Task.spawn(spawnTest).then(finish, helpers.handleError);
 }
 
-function spawnTest() {
+function* spawnTest() {
   // Setup
   let options = yield helpers.openTab(TEST_URI);
 
-  require("devtools/commandline/commands-index");
-  let gcli = require("gcli/index");
-  yield gcli.load();
-  let settings = gcli.settings;
+  let gcliInit = require("devtools/commandline/commands-index");
+  let system = yield gcliInit.loadForServer();
+
+  let settings = system.settings;
 
   let hideIntroEnabled = settings.get("devtools.gcli.hideIntro");
   let tabSize = settings.get("devtools.editor.tabsize");
diff --git a/browser/devtools/commandline/test/browser_gcli_async.js b/browser/devtools/commandline/test/browser_gcli_async.js
index 590bb2c..373aff1 100644
--- a/browser/devtools/commandline/test/browser_gcli_async.js
+++ b/browser/devtools/commandline/test/browser_gcli_async.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testAsync.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testAsync.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_canon.js b/browser/devtools/commandline/test/browser_gcli_canon.js
index 613e5b2..208b77e 100644
--- a/browser/devtools/commandline/test/browser_gcli_canon.js
+++ b/browser/devtools/commandline/test/browser_gcli_canon.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testCanon.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testCanon.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
@@ -219,6 +219,9 @@ exports.testAltCommands = function(options) {
       { name: 'num', type: 'number' },
       { name: 'opt', type: { name: 'selection', data: [ '1', '2', '3' ] } },
     ],
+    customProp1: 'localValue',
+    customProp2: true,
+    customProp3: 42,
     exec: function(args, context) {
       return context.commandName + ':' +
               args.str + ':' + args.num + ':' + args.opt;
@@ -235,6 +238,24 @@ exports.testAltCommands = function(options) {
             '],"isParent":false}]',
             'JSON.stringify(commandSpecs)');
 
+  var customProps = [ 'customProp1', 'customProp2', 'customProp3', ];
+  var commandSpecs2 = altCommands.getCommandSpecs(customProps);
+  assert.is(JSON.stringify(commandSpecs2),
+            '[{' +
+              '"item":"command",' +
+              '"name":"tss",' +
+              '"params":[' +
+                '{"name":"str","type":"string"},' +
+                '{"name":"num","type":"number"},' +
+                '{"name":"opt","type":{"name":"selection","data":["1","2","3"]}}' +
+              '],' +
+              '"isParent":false,' +
+              '"customProp1":"localValue",' +
+              '"customProp2":true,' +
+              '"customProp3":42' +
+            '}]',
+            'JSON.stringify(commandSpecs)');
+
   var remoter = function(args, context) {
     assert.is(context.commandName, 'tss', 'commandName is tss');
 
diff --git a/browser/devtools/commandline/test/browser_gcli_cli1.js b/browser/devtools/commandline/test/browser_gcli_cli1.js
index cb4d52e7..18891db 100644
--- a/browser/devtools/commandline/test/browser_gcli_cli1.js
+++ b/browser/devtools/commandline/test/browser_gcli_cli1.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testCli1.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testCli1.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
@@ -268,7 +268,6 @@ exports.testTsv = function(options) {
       }
     },
     {
-      skipRemainingIf: options.isNoDom,
       name: '|tsv option',
       setup: function() {
         return helpers.setInput(options, 'tsv option', 0);
diff --git a/browser/devtools/commandline/test/browser_gcli_cli2.js b/browser/devtools/commandline/test/browser_gcli_cli2.js
index f1a0a9e..6ac0078 100644
--- a/browser/devtools/commandline/test/browser_gcli_cli2.js
+++ b/browser/devtools/commandline/test/browser_gcli_cli2.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testCli2.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testCli2.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
@@ -42,18 +42,6 @@ function test() {
 
 // var helpers = require('./helpers');
 
-var nodetype = require('gcli/types/node');
-
-exports.setup = function(options) {
-  if (options.window) {
-    nodetype.setDocument(options.window.document);
-  }
-};
-
-exports.shutdown = function(options) {
-  nodetype.unsetDocument();
-};
-
 exports.testSingleString = function(options) {
   return helpers.audit(options, [
     {
@@ -376,7 +364,6 @@ exports.testSingleFloat = function(options) {
       }
     },
     {
-      skipRemainingIf: options.isNoDom,
       name: 'tsf x (cursor=4)',
       setup: function() {
         return helpers.setInput(options, 'tsf x', 4);
@@ -406,21 +393,14 @@ exports.testSingleFloat = function(options) {
 };
 
 exports.testElementWeb = function(options) {
-  var inputElement = options.isNoDom ?
-      null :
-      options.window.document.getElementById('gcli-input');
-
   return helpers.audit(options, [
     {
-      skipIf: function gcliInputElementExists() {
-        return inputElement == null;
-      },
-      setup:    'tse #gcli-input',
+      setup:    'tse #gcli-root',
       check: {
-        input:  'tse #gcli-input',
+        input:  'tse #gcli-root',
         hints:                 ' [options]',
-        markup: 'VVVVVVVVVVVVVVV',
-        cursor: 15,
+        markup: 'VVVVVVVVVVVVVV',
+        cursor: 14,
         current: 'node',
         status: 'VALID',
         predictions: [ ],
@@ -428,8 +408,7 @@ exports.testElementWeb = function(options) {
         args: {
           command: { name: 'tse' },
           node: {
-            value: inputElement,
-            arg: ' #gcli-input',
+            arg: ' #gcli-root',
             status: 'VALID',
             message: ''
           },
@@ -444,7 +423,6 @@ exports.testElementWeb = function(options) {
 exports.testElement = function(options) {
   return helpers.audit(options, [
     {
-      skipRemainingIf: options.isNoDom,
       setup:    'tse',
       check: {
         input:  'tse',
@@ -605,7 +583,7 @@ exports.testNestedCommand = function(options) {
       }
     },
     {
-      skipIf: options.isPhantomjs,
+      skipIf: options.isPhantomjs, // PhantomJS gets predictions wrong
       setup:    'tsn x',
       check: {
         input:  'tsn x',
diff --git a/browser/devtools/commandline/test/browser_gcli_completion1.js b/browser/devtools/commandline/test/browser_gcli_completion1.js
index 0df7962..7d36908 100644
--- a/browser/devtools/commandline/test/browser_gcli_completion1.js
+++ b/browser/devtools/commandline/test/browser_gcli_completion1.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testCompletion1.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testCompletion1.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
@@ -183,7 +183,7 @@ exports.testActivate = function(options) {
       }
     },
     {
-      skipIf: options.isPhantomjs,
+      skipIf: options.isPhantomjs, // PhantomJS gets predictions wrong
       setup: 'tsg d',
       check: {
         hints: ' [options] -> ccc'
diff --git a/browser/devtools/commandline/test/browser_gcli_completion2.js b/browser/devtools/commandline/test/browser_gcli_completion2.js
index b27b8e7..2b6e490 100644
--- a/browser/devtools/commandline/test/browser_gcli_completion2.js
+++ b/browser/devtools/commandline/test/browser_gcli_completion2.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testCompletion2.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testCompletion2.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
@@ -170,7 +170,6 @@ exports.testNoTab = function(options) {
       }
     },
     {
-      skipIf: options.isNoDom,
       name: '<TAB>',
       setup: function() {
         // Doing it this way avoids clearing the input buffer
diff --git a/browser/devtools/commandline/test/browser_gcli_context.js b/browser/devtools/commandline/test/browser_gcli_context.js
index 1aed285..5645596 100644
--- a/browser/devtools/commandline/test/browser_gcli_context.js
+++ b/browser/devtools/commandline/test/browser_gcli_context.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testContext.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testContext.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_date.js b/browser/devtools/commandline/test/browser_gcli_date.js
index 352679c..281b031 100644
--- a/browser/devtools/commandline/test/browser_gcli_date.js
+++ b/browser/devtools/commandline/test/browser_gcli_date.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testDate.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testDate.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
@@ -66,15 +66,15 @@ exports.testMaxMin = function(options) {
   var date = types.createType({ name: 'date', max: max, min: min });
   assert.is(date.getMax(), max, 'max setup');
 
-  var incremented = date.increment(min);
+  var incremented = date.nudge(min, 1);
   assert.is(incremented, max, 'incremented');
 };
 
 exports.testIncrement = function(options) {
   var date = options.requisition.system.types.createType('date');
   return date.parseString('now').then(function(conversion) {
-    var plusOne = date.increment(conversion.value);
-    var minusOne = date.decrement(plusOne);
+    var plusOne = date.nudge(conversion.value, 1);
+    var minusOne = date.nudge(plusOne, -1);
 
     // See comments in testParse
     var gap = new Date().getTime() - minusOne.getTime();
@@ -126,7 +126,7 @@ exports.testInput = function(options) {
       },
       exec: {
         output: [ /^Exec: tsdate/, /2001/, /1980/ ],
-        type: 'string',
+        type: 'testCommandOutput',
         error: false
       }
     },
@@ -172,7 +172,7 @@ exports.testInput = function(options) {
       },
       exec: {
         output: [ /^Exec: tsdate/, /2001/, /1980/ ],
-        type: 'string',
+        type: 'testCommandOutput',
         error: false
       }
     },
@@ -213,7 +213,7 @@ exports.testInput = function(options) {
       },
       exec: {
         output: [ /^Exec: tsdate/, new Date().getFullYear() ],
-        type: 'string',
+        type: 'testCommandOutput',
         error: false
       }
     },
@@ -253,7 +253,7 @@ exports.testInput = function(options) {
       },
       exec: {
         output: [ /^Exec: tsdate/, new Date().getFullYear() ],
-        type: 'string',
+        type: 'testCommandOutput',
         error: false
       }
     }
@@ -264,7 +264,7 @@ exports.testIncrDecr = function(options) {
   return helpers.audit(options, [
     {
       // createRequisitionAutomator doesn't fake UP/DOWN well enough
-      skipRemainingIf: options.isNoDom,
+      skipRemainingIf: options.isNode,
       setup:    'tsdate 2001-01-01<UP>',
       check: {
         input:  'tsdate 2001-01-02',
diff --git a/browser/devtools/commandline/test/browser_gcli_exec.js b/browser/devtools/commandline/test/browser_gcli_exec.js
index 0b1f47d..5e44848 100644
--- a/browser/devtools/commandline/test/browser_gcli_exec.js
+++ b/browser/devtools/commandline/test/browser_gcli_exec.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testExec.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testExec.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
@@ -42,27 +42,6 @@ function test() {
 
 // var assert = require('../testharness/assert');
 // var helpers = require('./helpers');
-var nodetype = require('gcli/types/node');
-
-var mockBody = {
-  style: {}
-};
-
-var mockEmptyNodeList = {
-  length: 0,
-  item: function() { return null; }
-};
-
-var mockRootNodeList = {
-  length: 1,
-  item: function(i) { return mockBody; }
-};
-
-var mockDoc = {
-  querySelectorAll: function(css) {
-    return (css === ':root') ? mockRootNodeList : mockEmptyNodeList;
-  }
-};
 
 exports.testParamGroup = function(options) {
   var tsg = options.requisition.system.commands.get('tsg');
@@ -121,7 +100,7 @@ exports.testWithHelpers = function(options) {
         }
       },
       exec: {
-        output: 'Exec: tsv optionType=string, optionValue=10'
+        output: 'Exec: tsv optionType=option1 optionValue=10'
       }
     },
     {
@@ -151,7 +130,7 @@ exports.testWithHelpers = function(options) {
         }
       },
       exec: {
-        output: 'Exec: tsv optionType=number, optionValue=10'
+        output: 'Exec: tsv optionType=option2 optionValue=10'
       }
     },
     // Delegated remote types can't transfer value types so we only test for
@@ -163,7 +142,7 @@ exports.testWithHelpers = function(options) {
         args: { optionValue: { value: '10' } }
       },
       exec: {
-        output: 'Exec: tsv optionType=string, optionValue=10'
+        output: 'Exec: tsv optionType=option1 optionValue=10'
       }
     },
     {
@@ -173,7 +152,7 @@ exports.testWithHelpers = function(options) {
         args: { optionValue: { value: 10 } }
       },
       exec: {
-        output: 'Exec: tsv optionType=number, optionValue=10'
+        output: 'Exec: tsv optionType=option2 optionValue=10'
       }
     }
   ]);
@@ -228,7 +207,7 @@ exports.testExecText = function(options) {
         }
       },
       exec: {
-        output: 'Exec: tsr text=fred bloggs'
+        output: 'Exec: tsr text=fred\\ bloggs'
       }
     },
     {
@@ -253,7 +232,7 @@ exports.testExecText = function(options) {
         }
       },
       exec: {
-        output: 'Exec: tsr text=fred bloggs'
+        output: 'Exec: tsr text=fred\\ bloggs'
       }
     },
     {
@@ -278,7 +257,7 @@ exports.testExecText = function(options) {
         }
       },
       exec: {
-        output: 'Exec: tsr text=fred bloggs'
+        output: 'Exec: tsr text=fred\\ bloggs'
       }
     }
   ]);
@@ -418,12 +397,9 @@ exports.testExecScript = function(options) {
 };
 
 exports.testExecNode = function(options) {
-  var origDoc = nodetype.getDocument();
-  nodetype.setDocument(mockDoc);
-
   return helpers.audit(options, [
     {
-      skipIf: options.isNoDom,
+      skipIf: options.isRemote,
       setup:    'tse :root',
       check: {
         input:  'tse :root',
@@ -437,19 +413,16 @@ exports.testExecNode = function(options) {
         args: {
           command: { name: 'tse' },
           node: {
-            value: mockBody,
             arg: ' :root',
             status: 'VALID',
             message: ''
           },
           nodes: {
-            value: mockEmptyNodeList,
             arg: '',
             status: 'VALID',
             message: ''
           },
           nodes2: {
-            value: mockEmptyNodeList,
             arg: '',
             status: 'VALID',
             message: ''
@@ -459,8 +432,10 @@ exports.testExecNode = function(options) {
       exec: {
         output: /^Exec: tse/
       },
-      post: function() {
-        nodetype.setDocument(origDoc);
+      post: function(output) {
+        assert.is(output.data.args.node, ':root', 'node should be :root');
+        assert.is(output.data.args.nodes, 'Error', 'nodes should be Error');
+        assert.is(output.data.args.nodes2, 'Error', 'nodes2 should be Error');
       }
     }
   ]);
@@ -552,7 +527,7 @@ exports.testExecArray = function(options) {
         }
       },
       exec: {
-        output: 'Exec: tselarr num=1, arr='
+        output: 'Exec: tselarr num=1 arr='
       }
     },
     {
@@ -573,7 +548,7 @@ exports.testExecArray = function(options) {
         }
       },
       exec: {
-        output: 'Exec: tselarr num=1, arr=a'
+        output: 'Exec: tselarr num=1 arr=a'
       }
     },
     {
@@ -594,7 +569,7 @@ exports.testExecArray = function(options) {
         }
       },
       exec: {
-        output: 'Exec: tselarr num=1, arr=a,b'
+        output: 'Exec: tselarr num=1 arr=a b'
       }
     }
   ]);
@@ -621,7 +596,7 @@ exports.testExecMultiple = function(options) {
         }
       },
       exec: {
-        output: 'Exec: tsm abc=a, txt=10, num=10'
+        output: 'Exec: tsm abc=a txt=10 num=10'
       }
     }
   ]);
@@ -651,7 +626,7 @@ exports.testExecDefaults = function(options) {
         }
       },
       exec: {
-        output: 'Exec: tsg solo=aaa, txt1=null, bool=false, txt2=d, num=42'
+        output: 'Exec: tsg solo=aaa txt1= bool=false txt2=d num=42'
       }
     }
   ]);
diff --git a/browser/devtools/commandline/test/browser_gcli_fail.js b/browser/devtools/commandline/test/browser_gcli_fail.js
index c0b94f49..7ff93cb 100644
--- a/browser/devtools/commandline/test/browser_gcli_fail.js
+++ b/browser/devtools/commandline/test/browser_gcli_fail.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testFail.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testFail.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_file.js b/browser/devtools/commandline/test/browser_gcli_file.js
index 1317d9c..ce3a4b5 100644
--- a/browser/devtools/commandline/test/browser_gcli_file.js
+++ b/browser/devtools/commandline/test/browser_gcli_file.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testFile.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testFile.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
@@ -47,10 +47,7 @@ var local = false;
 exports.testBasic = function(options) {
   return helpers.audit(options, [
     {
-      // These tests require us to be using node directly or to be in
-      // PhantomJS connected to an execute enabled node server or to be in
-      // firefox.
-      skipRemainingIf: options.isPhantomjs || options.isFirefox,
+      skipRemainingIf: options.isFirefox, // No file implementation in Firefox
       setup:    'tsfile open /',
       check: {
         input:  'tsfile open /',
diff --git a/browser/devtools/commandline/test/browser_gcli_fileparser.js b/browser/devtools/commandline/test/browser_gcli_fileparser.js
index 219b793a..dda36d9 100644
--- a/browser/devtools/commandline/test/browser_gcli_fileparser.js
+++ b/browser/devtools/commandline/test/browser_gcli_fileparser.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testFileparser.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testFileparser.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_filesystem.js b/browser/devtools/commandline/test/browser_gcli_filesystem.js
index 23c8dda..f1755c0 100644
--- a/browser/devtools/commandline/test/browser_gcli_filesystem.js
+++ b/browser/devtools/commandline/test/browser_gcli_filesystem.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testFilesystem.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testFilesystem.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_focus.js b/browser/devtools/commandline/test/browser_gcli_focus.js
index 48def81..562571f 100644
--- a/browser/devtools/commandline/test/browser_gcli_focus.js
+++ b/browser/devtools/commandline/test/browser_gcli_focus.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testFocus.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testFocus.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_history.js b/browser/devtools/commandline/test/browser_gcli_history.js
index 590353c..2d18613 100644
--- a/browser/devtools/commandline/test/browser_gcli_history.js
+++ b/browser/devtools/commandline/test/browser_gcli_history.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testHistory.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testHistory.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_incomplete.js b/browser/devtools/commandline/test/browser_gcli_incomplete.js
index c443bbd..873cf2e 100644
--- a/browser/devtools/commandline/test/browser_gcli_incomplete.js
+++ b/browser/devtools/commandline/test/browser_gcli_incomplete.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testIncomplete.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testIncomplete.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_inputter.js b/browser/devtools/commandline/test/browser_gcli_inputter.js
index e8d1c21..c7618a2 100644
--- a/browser/devtools/commandline/test/browser_gcli_inputter.js
+++ b/browser/devtools/commandline/test/browser_gcli_inputter.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testInputter.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testInputter.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
@@ -89,7 +89,7 @@ exports.testOutput = function(options) {
   var ev1 = { keyCode: KeyEvent.DOM_VK_RETURN };
   return terminal.handleKeyUp(ev1).then(function() {
     assert.ok(latestEvent != null, 'events this test');
-    assert.is(latestData, 'Exec: tss ', 'last command is tss');
+    assert.is(latestData.name, 'tss', 'last command is tss');
 
     assert.is(terminal.getInputState().typed,
               '',
diff --git a/browser/devtools/commandline/test/browser_gcli_intro.js b/browser/devtools/commandline/test/browser_gcli_intro.js
index 263000e..c0bc5bc 100644
--- a/browser/devtools/commandline/test/browser_gcli_intro.js
+++ b/browser/devtools/commandline/test/browser_gcli_intro.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testIntro.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testIntro.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
@@ -67,7 +67,6 @@ exports.testIntroStatus = function(options) {
     },
     {
       setup:    'intro',
-      skipIf: options.isNoDom,
       check: {
         typed:  'intro',
         markup: 'VVVVV',
diff --git a/browser/devtools/commandline/test/browser_gcli_js.js b/browser/devtools/commandline/test/browser_gcli_js.js
index 4128c46..7179b53 100644
--- a/browser/devtools/commandline/test/browser_gcli_js.js
+++ b/browser/devtools/commandline/test/browser_gcli_js.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testJs.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testJs.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
@@ -44,37 +44,45 @@ function test() {
 // var helpers = require('./helpers');
 var javascript = require('gcli/types/javascript');
 
-var tempWindow;
+// Store the original windowHolder
+var tempWindowHolder;
+
+// Mock windowHolder to check that we're not trespassing on 'donteval'
+var mockWindowHolder = {
+  window: {
+    document: {}
+  },
+};
+mockWindowHolder.window = mockWindowHolder;
+Object.defineProperty(mockWindowHolder.window, 'donteval', {
+  get: function() {
+    assert.ok(false, 'donteval should not be used');
+    return { cant: '', touch: '', 'this': '' };
+  },
+  enumerable: true,
+  configurable: true
+});
 
 exports.setup = function(options) {
-  if (options.isNoDom) {
+  if (!jsTestAllowed(options)) {
     return;
   }
 
-  tempWindow = javascript.getGlobalObject();
-  Object.defineProperty(options.window, 'donteval', {
-    get: function() {
-      assert.ok(false, 'donteval should not be used');
-      return { cant: '', touch: '', 'this': '' };
-    },
-    enumerable: true,
-    configurable : true
-  });
-  javascript.setGlobalObject(options.window);
+  tempWindowHolder = javascript.getWindowHolder();
+  javascript.setWindowHolder(mockWindowHolder);
 };
 
 exports.shutdown = function(options) {
-  if (options.isNoDom) {
+  if (!jsTestAllowed(options)) {
     return;
   }
 
-  javascript.setGlobalObject(tempWindow);
-  tempWindow = undefined;
-  delete options.window.donteval;
+  javascript.setWindowHolder(tempWindowHolder);
 };
 
 function jsTestAllowed(options) {
-  return options.isRemote || options.isNoDom ||
+  return options.isRemote || // We're directly accessing the javascript type
+         options.isNode ||
          options.requisition.system.commands.get('{') == null;
 }
 
@@ -348,14 +356,14 @@ exports.testDocument = function(options) {
 };
 
 exports.testDonteval = function(options) {
-  if (!options.isNoDom) {
+  if (jsTestAllowed(options)) {
     // nodom causes an eval here, maybe that's node/v8?
-    assert.ok('donteval' in options.window, 'donteval exists');
+    assert.ok('donteval' in mockWindowHolder.window, 'donteval exists');
   }
 
   return helpers.audit(options, [
     {
-      skipRemainingIf: jsTestAllowed,
+      skipRemainingIf: true, // Commented out until we fix non-enumerable props
       setup:    '{ don',
       check: {
         input:  '{ don',
diff --git a/browser/devtools/commandline/test/browser_gcli_keyboard1.js b/browser/devtools/commandline/test/browser_gcli_keyboard1.js
index 0de7794..c86d7ee 100644
--- a/browser/devtools/commandline/test/browser_gcli_keyboard1.js
+++ b/browser/devtools/commandline/test/browser_gcli_keyboard1.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testKeyboard1.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testKeyboard1.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
@@ -43,18 +43,6 @@ function test() {
 var javascript = require('gcli/types/javascript');
 // var helpers = require('./helpers');
 
-var tempWindow;
-
-exports.setup = function(options) {
-  tempWindow = javascript.getGlobalObject();
-  javascript.setGlobalObject(options.window);
-};
-
-exports.shutdown = function(options) {
-  javascript.setGlobalObject(tempWindow);
-  tempWindow = undefined;
-};
-
 exports.testSimple = function(options) {
   return helpers.audit(options, [
     {
diff --git a/browser/devtools/commandline/test/browser_gcli_keyboard2.js b/browser/devtools/commandline/test/browser_gcli_keyboard2.js
index 7f510f08..587cd51 100644
--- a/browser/devtools/commandline/test/browser_gcli_keyboard2.js
+++ b/browser/devtools/commandline/test/browser_gcli_keyboard2.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testKeyboard2.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testKeyboard2.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_keyboard3.js b/browser/devtools/commandline/test/browser_gcli_keyboard3.js
index c1bfc15..ab7d361 100644
--- a/browser/devtools/commandline/test/browser_gcli_keyboard3.js
+++ b/browser/devtools/commandline/test/browser_gcli_keyboard3.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testKeyboard3.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testKeyboard3.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_keyboard4.js b/browser/devtools/commandline/test/browser_gcli_keyboard4.js
index 5a358f4..755783b 100644
--- a/browser/devtools/commandline/test/browser_gcli_keyboard4.js
+++ b/browser/devtools/commandline/test/browser_gcli_keyboard4.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testKeyboard4.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testKeyboard4.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_keyboard5.js b/browser/devtools/commandline/test/browser_gcli_keyboard5.js
index 41e36a4..69bb141 100644
--- a/browser/devtools/commandline/test/browser_gcli_keyboard5.js
+++ b/browser/devtools/commandline/test/browser_gcli_keyboard5.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testKeyboard5.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testKeyboard5.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_keyboard6.js b/browser/devtools/commandline/test/browser_gcli_keyboard6.js
index d53a855..10db2b1 100644
--- a/browser/devtools/commandline/test/browser_gcli_keyboard6.js
+++ b/browser/devtools/commandline/test/browser_gcli_keyboard6.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testKeyboard6.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testKeyboard6.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_menu.js b/browser/devtools/commandline/test/browser_gcli_menu.js
index 8e3eb16..bfe04bb 100644
--- a/browser/devtools/commandline/test/browser_gcli_menu.js
+++ b/browser/devtools/commandline/test/browser_gcli_menu.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testMenu.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testMenu.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_node.js b/browser/devtools/commandline/test/browser_gcli_node.js
index 7be07ba..366692f 100644
--- a/browser/devtools/commandline/test/browser_gcli_node.js
+++ b/browser/devtools/commandline/test/browser_gcli_node.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testNode.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testNode.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
@@ -42,22 +42,10 @@ function test() {
 
 // var assert = require('../testharness/assert');
 // var helpers = require('./helpers');
-var nodetype = require('gcli/types/node');
-
-exports.setup = function(options) {
-  if (options.window) {
-    nodetype.setDocument(options.window.document);
-  }
-};
-
-exports.shutdown = function(options) {
-  nodetype.unsetDocument();
-};
 
 exports.testNode = function(options) {
   return helpers.audit(options, [
     {
-      skipRemainingIf: options.isNoDom,
       setup:    'tse ',
       check: {
         input:  'tse ',
@@ -165,11 +153,8 @@ exports.testNode = function(options) {
 };
 
 exports.testNodeDom = function(options) {
-  var requisition = options.requisition;
-
   return helpers.audit(options, [
     {
-      skipRemainingIf: options.isNoDom,
       setup:    'tse :root',
       check: {
         input:  'tse :root',
@@ -201,11 +186,15 @@ exports.testNodeDom = function(options) {
           nodes: { status: 'VALID' },
           nodes2: { status: 'VALID' }
         }
+      }
+    },
+    {
+      skipIf: options.isRemote, // arg values are unavailable remotely
+      setup: 'tse :root ',
+      exec: {
       },
-      post: function() {
-        assert.is(requisition.getAssignment('node').value.tagName,
-                  'HTML',
-                  'root id');
+      post: function(output) {
+        assert.is(output.args.node.tagName, 'HTML', ':root tagName');
       }
     },
     {
@@ -234,11 +223,8 @@ exports.testNodeDom = function(options) {
 };
 
 exports.testNodes = function(options) {
-  var requisition = options.requisition;
-
   return helpers.audit(options, [
     {
-      skipRemainingIf: options.isNoDom,
       setup:    'tse :root --nodes *',
       check: {
         input:  'tse :root --nodes *',
@@ -253,10 +239,18 @@ exports.testNodes = function(options) {
           nodes2: { status: 'VALID' }
         }
       },
-      post: function() {
-        assert.is(requisition.getAssignment('node').value.tagName,
-                  'HTML',
-                  '#gcli-input id');
+      exec: {
+      },
+      post: function(output) {
+        if (!options.isRemote) {
+          assert.is(output.args.node.tagName, 'HTML', ':root tagName');
+          assert.ok(output.args.nodes.length > 3, 'nodes length');
+          assert.is(output.args.nodes2.length, 0, 'nodes2 length');
+        }
+
+        assert.is(output.data.args.node, ':root', 'node data');
+        assert.is(output.data.args.nodes, '*', 'nodes data');
+        assert.is(output.data.args.nodes2, 'Error', 'nodes2 data');
       }
     },
     {
@@ -275,10 +269,18 @@ exports.testNodes = function(options) {
           nodes2: { arg: ' --nodes2 div', status: 'VALID' }
         }
       },
-      post: function() {
-        assert.is(requisition.getAssignment('node').value.tagName,
-                  'HTML',
-                  'root id');
+      exec: {
+      },
+      post: function(output) {
+        if (!options.isRemote) {
+          assert.is(output.args.node.tagName, 'HTML', ':root tagName');
+          assert.is(output.args.nodes.length, 0, 'nodes length');
+          assert.is(output.args.nodes2.item(0).tagName, 'DIV', 'div tagName');
+        }
+
+        assert.is(output.data.args.node, ':root', 'node data');
+        assert.is(output.data.args.nodes, 'Error', 'nodes data');
+        assert.is(output.data.args.nodes2, 'div', 'nodes2 data');
       }
     },
     {
@@ -305,13 +307,6 @@ exports.testNodes = function(options) {
           },
           nodes2: { arg: '', status: 'VALID', message: '' }
         }
-      },
-      post: function() {
-        /*
-        assert.is(requisition.getAssignment('nodes2').value.constructor.name,
-                  'NodeList',
-                  '#gcli-input id');
-        */
       }
     },
     {
@@ -333,16 +328,6 @@ exports.testNodes = function(options) {
           nodes: { arg: '', status: 'VALID', message: '' },
           nodes2: { arg: ' --nodes2 ffff', status: 'VALID', message: '' }
         }
-      },
-      post: function() {
-        /*
-        assert.is(requisition.getAssignment('nodes').value.constructor.name,
-                  'NodeList',
-                  '#gcli-input id');
-        assert.is(requisition.getAssignment('nodes2').value.constructor.name,
-                  'NodeList',
-                  '#gcli-input id');
-        */
       }
     },
   ]);
diff --git a/browser/devtools/commandline/test/browser_gcli_pref1.js b/browser/devtools/commandline/test/browser_gcli_pref1.js
index ee9c51d..032f5a7 100644
--- a/browser/devtools/commandline/test/browser_gcli_pref1.js
+++ b/browser/devtools/commandline/test/browser_gcli_pref1.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testPref1.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testPref1.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
@@ -67,7 +67,7 @@ exports.testPrefShowStatus = function(options) {
       setup:    'pref show ',
       check: {
         typed:  'pref show ',
-        hints:            'allowSet',
+        hints:            'eagerHelper',
         markup: 'VVVVVVVVVV',
         status: 'ERROR'
       }
@@ -144,7 +144,7 @@ exports.testPrefSetStatus = function(options) {
       setup:    'pref set ',
       check: {
         typed:  'pref set ',
-        hints:           'allowSet <value>',
+        hints:           'eagerHelper <value>',
         markup: 'VVVVVVVVV',
         status: 'ERROR'
       }
@@ -159,6 +159,7 @@ exports.testPrefSetStatus = function(options) {
       }
     },
     {
+      skipIf: options.isRemote,
       setup:    'pref set tempTBool 4',
       check: {
         typed:  'pref set tempTBool 4',
diff --git a/browser/devtools/commandline/test/browser_gcli_pref2.js b/browser/devtools/commandline/test/browser_gcli_pref2.js
index 0192830..46e3ad9 100644
--- a/browser/devtools/commandline/test/browser_gcli_pref2.js
+++ b/browser/devtools/commandline/test/browser_gcli_pref2.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testPref2.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testPref2.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
@@ -55,10 +55,6 @@ exports.testPrefExec = function(options) {
     return;
   }
 
-  var allowSet = settings.getSetting('allowSet');
-  var initialAllowSet = allowSet.value;
-  allowSet.value = false;
-
   assert.is(mockSettings.tempNumber.value, 42, 'set to 42');
 
   return helpers.audit(options, [
@@ -73,7 +69,6 @@ exports.testPrefExec = function(options) {
       }
     },
     {
-      skipRemainingIf: options.isNoDom,
       setup:    'pref set tempNumber 4',
       check: {
         input:  'pref set tempNumber 4',
@@ -99,16 +94,6 @@ exports.testPrefExec = function(options) {
         }
       },
       exec: {
-        output: [ /void your warranty/, /I promise/ ]
-      },
-      post: function() {
-        assert.is(mockSettings.tempNumber.value, 42, 'still set to 42');
-        allowSet.value = true;
-      }
-    },
-    {
-      setup:    'pref set tempNumber 4',
-      exec: {
         output: ''
       },
       post: function() {
@@ -128,8 +113,6 @@ exports.testPrefExec = function(options) {
       },
       post: function() {
         assert.is(mockSettings.tempNumber.value, 42, 'reset to 42');
-
-        allowSet.value = initialAllowSet;
       }
     },
     {
diff --git a/browser/devtools/commandline/test/browser_gcli_remotews.js b/browser/devtools/commandline/test/browser_gcli_remotews.js
index 7b9237e..a011d13 100644
--- a/browser/devtools/commandline/test/browser_gcli_remotews.js
+++ b/browser/devtools/commandline/test/browser_gcli_remotews.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testRemoteWs.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testRemoteWs.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
@@ -83,8 +83,8 @@ exports.testRemoteWebsocket = function(options) {
       check: {
         args: {
           prefix: {
-            value: function(connection) {
-              assert.is(connection.prefix, 'remote', 'disconnecting remote');
+            value: function(front) {
+              assert.is(front.prefix, 'remote', 'disconnecting remote');
             }
           }
         }
@@ -112,8 +112,8 @@ exports.testRemoteWebsocket = function(options) {
       check: {
         args: {
           prefix: {
-            value: function(connection) {
-              assert.is(connection.prefix, 'remote', 'disconnecting remote');
+            value: function(front) {
+              assert.is(front.prefix, 'remote', 'disconnecting remote');
             }
           }
         }
@@ -466,8 +466,8 @@ exports.testRemoteWebsocket = function(options) {
         unassigned: [ ],
         args: {
           prefix: {
-            value: function(connection) {
-              assert.is(connection.prefix, 'remote', 'disconnecting remote');
+            value: function(front) {
+              assert.is(front.prefix, 'remote', 'disconnecting remote');
             },
             arg: ' remote',
             status: 'VALID',
diff --git a/browser/devtools/commandline/test/browser_gcli_remotexhr.js b/browser/devtools/commandline/test/browser_gcli_remotexhr.js
index b89b9d5..4196a47 100644
--- a/browser/devtools/commandline/test/browser_gcli_remotexhr.js
+++ b/browser/devtools/commandline/test/browser_gcli_remotexhr.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testRemoteXhr.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testRemoteXhr.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
@@ -83,8 +83,8 @@ exports.testRemoteXhr = function(options) {
       check: {
         args: {
           prefix: {
-            value: function(connection) {
-              assert.is(connection.prefix, 'remote', 'disconnecting remote');
+            value: function(front) {
+              assert.is(front.prefix, 'remote', 'disconnecting remote');
             }
           }
         }
@@ -112,8 +112,8 @@ exports.testRemoteXhr = function(options) {
       check: {
         args: {
           prefix: {
-            value: function(connection) {
-              assert.is(connection.prefix, 'remote', 'disconnecting remote');
+            value: function(front) {
+              assert.is(front.prefix, 'remote', 'disconnecting remote');
             }
           }
         }
@@ -466,8 +466,8 @@ exports.testRemoteXhr = function(options) {
         unassigned: [ ],
         args: {
           prefix: {
-            value: function(connection) {
-              assert.is(connection.prefix, 'remote', 'disconnecting remote');
+            value: function(front) {
+              assert.is(front.prefix, 'remote', 'disconnecting remote');
             },
             arg: ' remote',
             status: 'VALID',
diff --git a/browser/devtools/commandline/test/browser_gcli_resource.js b/browser/devtools/commandline/test/browser_gcli_resource.js
index 2a23253..5ef1351 100644
--- a/browser/devtools/commandline/test/browser_gcli_resource.js
+++ b/browser/devtools/commandline/test/browser_gcli_resource.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testResource.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testResource.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
@@ -47,23 +47,8 @@ var util = require('gcli/util/util');
 var resource = require('gcli/types/resource');
 var Status = require('gcli/types/types').Status;
 
-
-var tempDocument;
-
-exports.setup = function(options) {
-  tempDocument = resource.getDocument();
-  if (options.window) {
-    resource.setDocument(options.window.document);
-  }
-};
-
-exports.shutdown = function(options) {
-  resource.setDocument(tempDocument);
-  tempDocument = undefined;
-};
-
 exports.testAllPredictions1 = function(options) {
-  if (options.isFirefox || options.isNoDom) {
+  if (options.isFirefox || options.isNode) {
     assert.log('Skipping checks due to firefox document.stylsheets support.');
     return;
   }
@@ -79,7 +64,7 @@ exports.testAllPredictions1 = function(options) {
 };
 
 exports.testScriptPredictions = function(options) {
-  if (options.isFirefox || options.isNoDom) {
+  if (options.isFirefox || options.isNode) {
     assert.log('Skipping checks due to firefox document.stylsheets support.');
     return;
   }
@@ -96,7 +81,7 @@ exports.testScriptPredictions = function(options) {
 };
 
 exports.testStylePredictions = function(options) {
-  if (options.isFirefox || options.isNoDom) {
+  if (options.isFirefox || options.isNode) {
     assert.log('Skipping checks due to firefox document.stylsheets support.');
     return;
   }
@@ -113,10 +98,6 @@ exports.testStylePredictions = function(options) {
 };
 
 exports.testAllPredictions2 = function(options) {
-  if (options.isNoDom) {
-    assert.log('Skipping checks due to nodom document.stylsheets support.');
-    return;
-  }
   var types = options.requisition.system.types;
 
   var scriptRes = types.createType({ name: 'resource', include: 'text/javascript' });
@@ -134,11 +115,6 @@ exports.testAllPredictions2 = function(options) {
 };
 
 exports.testAllPredictions3 = function(options) {
-  if (options.isNoDom) {
-    assert.log('Skipping checks due to nodom document.stylsheets support.');
-    return;
-  }
-
   var types = options.requisition.system.types;
   var res1 = types.createType({ name: 'resource' });
   return res1.getLookup().then(function(options1) {
diff --git a/browser/devtools/commandline/test/browser_gcli_short.js b/browser/devtools/commandline/test/browser_gcli_short.js
index 812d6ef..15d9bc6 100644
--- a/browser/devtools/commandline/test/browser_gcli_short.js
+++ b/browser/devtools/commandline/test/browser_gcli_short.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testShort.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testShort.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_spell.js b/browser/devtools/commandline/test/browser_gcli_spell.js
index bcd130f..18a1c3d 100644
--- a/browser/devtools/commandline/test/browser_gcli_spell.js
+++ b/browser/devtools/commandline/test/browser_gcli_spell.js
@@ -21,17 +21,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testSpell.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testSpell.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_split.js b/browser/devtools/commandline/test/browser_gcli_split.js
index 5e32cbf..0a5d84f 100644
--- a/browser/devtools/commandline/test/browser_gcli_split.js
+++ b/browser/devtools/commandline/test/browser_gcli_split.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testSplit.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testSplit.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_string.js b/browser/devtools/commandline/test/browser_gcli_string.js
index 5f992df..ae26b55 100644
--- a/browser/devtools/commandline/test/browser_gcli_string.js
+++ b/browser/devtools/commandline/test/browser_gcli_string.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testString.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testString.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_tokenize.js b/browser/devtools/commandline/test/browser_gcli_tokenize.js
index dae64af..27012a8 100644
--- a/browser/devtools/commandline/test/browser_gcli_tokenize.js
+++ b/browser/devtools/commandline/test/browser_gcli_tokenize.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testTokenize.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testTokenize.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_tooltip.js b/browser/devtools/commandline/test/browser_gcli_tooltip.js
index 10aa558..88ddf07 100644
--- a/browser/devtools/commandline/test/browser_gcli_tooltip.js
+++ b/browser/devtools/commandline/test/browser_gcli_tooltip.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testTooltip.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testTooltip.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
diff --git a/browser/devtools/commandline/test/browser_gcli_types.js b/browser/devtools/commandline/test/browser_gcli_types.js
index 01c11c3..9efe5d0 100644
--- a/browser/devtools/commandline/test/browser_gcli_types.js
+++ b/browser/devtools/commandline/test/browser_gcli_types.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testTypes.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testTypes.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
@@ -43,17 +43,6 @@ function test() {
 // var assert = require('../testharness/assert');
 var util = require('gcli/util/util');
 var Promise = require('gcli/util/promise').Promise;
-var nodetype = require('gcli/types/node');
-
-exports.setup = function(options) {
-  if (options.window) {
-    nodetype.setDocument(options.window.document);
-  }
-};
-
-exports.shutdown = function(options) {
-  nodetype.unsetDocument();
-};
 
 function forEachType(options, typeSpec, callback) {
   var types = options.requisition.system.types;
@@ -97,11 +86,6 @@ function forEachType(options, typeSpec, callback) {
 }
 
 exports.testDefault = function(options) {
-  if (options.isNoDom) {
-    assert.log('Skipping tests due to issues with resource type.');
-    return;
-  }
-
   return forEachType(options, {}, function(type) {
     var context = options.requisition.executionContext;
     var blank = type.getBlank(context).value;
diff --git a/browser/devtools/commandline/test/browser_gcli_union.js b/browser/devtools/commandline/test/browser_gcli_union.js
index 9f3dd08..264b5d5 100644
--- a/browser/devtools/commandline/test/browser_gcli_union.js
+++ b/browser/devtools/commandline/test/browser_gcli_union.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testUnion.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testUnion.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
@@ -126,7 +126,7 @@ exports.testDefault = function(options) {
       }
     },
     {
-      skipIf: options.isPhantomjs, // Phantom goes weird with predictions
+      skipIf: options.isPhantomjs, // PhantomJS gets predictions wrong
       setup:    'unionc1 5',
       check: {
         input:  'unionc1 5',
@@ -160,7 +160,7 @@ exports.testDefault = function(options) {
       }
     },
     {
-      skipRemainingIf: options.isPhantomjs,
+      skipIf: options.isPhantomjs, // PhantomJS URL type is broken
       setup:    'unionc2 on',
       check: {
         input:  'unionc2 on',
diff --git a/browser/devtools/commandline/test/browser_gcli_url.js b/browser/devtools/commandline/test/browser_gcli_url.js
index 1fec41e..83060ae 100644
--- a/browser/devtools/commandline/test/browser_gcli_url.js
+++ b/browser/devtools/commandline/test/browser_gcli_url.js
@@ -22,17 +22,17 @@
 
 var exports = {};
 
-var TEST_URI = "data:text/html;charset=utf-8,<p id='gcli-input'>gcli-testUrl.js</p>";
+var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testUrl.js</div>";
 
 function test() {
-  return Task.spawn(function() {
+  return Task.spawn(function*() {
     let options = yield helpers.openTab(TEST_URI);
     yield helpers.openToolbar(options);
-    gcli.addItems(mockCommands.items);
+    options.requisition.system.addItems(mockCommands.items);
 
     yield helpers.runTests(options, exports);
 
-    gcli.removeItems(mockCommands.items);
+    options.requisition.system.removeItems(mockCommands.items);
     yield helpers.closeToolbar(options);
     yield helpers.closeTab(options);
   }).then(finish, helpers.handleError);
@@ -46,7 +46,7 @@ function test() {
 exports.testDefault = function(options) {
   return helpers.audit(options, [
     {
-      skipRemainingIf: options.isPhantomjs,
+      skipRemainingIf: options.isPhantomjs, // PhantomJS URL type is broken
       setup:    'urlc',
       check: {
         input:  'urlc',
diff --git a/browser/devtools/commandline/test/helpers.js b/browser/devtools/commandline/test/helpers.js
index dc33b18..cede9f0 100644
--- a/browser/devtools/commandline/test/helpers.js
+++ b/browser/devtools/commandline/test/helpers.js
@@ -18,7 +18,7 @@
 
 // A copy of this code exists in firefox mochitests. They should be kept
 // in sync. Hence the exports synonym for non AMD contexts.
-var { helpers, gcli, assert } = (function() {
+var { helpers, assert } = (function() {
 
 var helpers = {};
 
@@ -30,7 +30,6 @@ var util = require('gcli/util/util');
 var Promise = require('gcli/util/promise').Promise;
 var cli = require('gcli/cli');
 var KeyEvent = require('gcli/util/util').KeyEvent;
-var gcli = require('gcli/index');
 
 /**
  * See notes in helpers.checkOptions()
@@ -376,7 +375,7 @@ helpers.runTests = function(options, tests) {
 
   var recover = function(error) {
     ok(false, error);
-    console.error(error);
+    console.error(error, error.stack);
   };
 
   info("SETUP");
@@ -759,15 +758,15 @@ helpers._check = function(options, name, checks) {
   var outstanding = [];
   var suffix = name ? ' (for \'' + name + '\')' : '';
 
-  if (!options.isNoDom && 'input' in checks) {
+  if (!options.isNode && 'input' in checks) {
     assert.is(helpers._actual.input(options), checks.input, 'input' + suffix);
   }
 
-  if (!options.isNoDom && 'cursor' in checks) {
+  if (!options.isNode && 'cursor' in checks) {
     assert.is(helpers._actual.cursor(options), checks.cursor, 'cursor' + suffix);
   }
 
-  if (!options.isNoDom && 'current' in checks) {
+  if (!options.isNode && 'current' in checks) {
     assert.is(helpers._actual.current(options), checks.current, 'current' + suffix);
   }
 
@@ -775,18 +774,18 @@ helpers._check = function(options, name, checks) {
     assert.is(helpers._actual.status(options), checks.status, 'status' + suffix);
   }
 
-  if (!options.isNoDom && 'markup' in checks) {
+  if (!options.isNode && 'markup' in checks) {
     assert.is(helpers._actual.markup(options), checks.markup, 'markup' + suffix);
   }
 
-  if (!options.isNoDom && 'hints' in checks) {
+  if (!options.isNode && 'hints' in checks) {
     var hintCheck = function(actualHints) {
       assert.is(actualHints, checks.hints, 'hints' + suffix);
     };
     outstanding.push(helpers._actual.hints(options).then(hintCheck));
   }
 
-  if (!options.isNoDom && 'predictions' in checks) {
+  if (!options.isNode && 'predictions' in checks) {
     var predictionsCheck = function(actualPredictions) {
       helpers.arrayIs(actualPredictions,
                        checks.predictions,
@@ -795,7 +794,7 @@ helpers._check = function(options, name, checks) {
     outstanding.push(helpers._actual.predictions(options).then(predictionsCheck));
   }
 
-  if (!options.isNoDom && 'predictionsContains' in checks) {
+  if (!options.isNode && 'predictionsContains' in checks) {
     var containsCheck = function(actualPredictions) {
       checks.predictionsContains.forEach(function(prediction) {
         var index = actualPredictions.indexOf(prediction);
@@ -813,26 +812,26 @@ helpers._check = function(options, name, checks) {
   }
 
   /* TODO: Fix this
-  if (!options.isNoDom && 'tooltipState' in checks) {
+  if (!options.isNode && 'tooltipState' in checks) {
     assert.is(helpers._actual.tooltipState(options),
               checks.tooltipState,
               'tooltipState' + suffix);
   }
   */
 
-  if (!options.isNoDom && 'outputState' in checks) {
+  if (!options.isNode && 'outputState' in checks) {
     assert.is(helpers._actual.outputState(options),
               checks.outputState,
               'outputState' + suffix);
   }
 
-  if (!options.isNoDom && 'options' in checks) {
+  if (!options.isNode && 'options' in checks) {
     helpers.arrayIs(helpers._actual.options(options),
                      checks.options,
                      'options' + suffix);
   }
 
-  if (!options.isNoDom && 'error' in checks) {
+  if (!options.isNode && 'error' in checks) {
     assert.is(helpers._actual.message(options), checks.error, 'error' + suffix);
   }
 
@@ -894,7 +893,7 @@ helpers._check = function(options, name, checks) {
                   'arg.' + paramName + '.status' + suffix);
       }
 
-      if (!options.isNoDom && 'message' in check) {
+      if (!options.isNode && 'message' in check) {
         if (typeof check.message.test === 'function') {
           assert.ok(check.message.test(assignment.message),
                     'arg.' + paramName + '.message' + suffix);
@@ -952,12 +951,12 @@ helpers._exec = function(options, name, expected) {
 
       var context = requisition.conversionContext;
       var convertPromise;
-      if (options.isNoDom) {
+      if (options.isNode) {
         convertPromise = output.convert('string', context);
       }
       else {
         convertPromise = output.convert('dom', context).then(function(node) {
-          return node.textContent.trim();
+          return (node == null) ? '' : node.textContent.trim();
         });
       }
 
@@ -1171,9 +1170,8 @@ helpers.audit = function(options, audits) {
             '';
         assert.log('Skipped ' + name + ' ' + skipReason);
 
-        // Tests need at least one pass, fail or todo. Let's create a dummy pass
-        // in case there are none.
-        ok(true, "Each test requires at least one pass, fail or todo so here is a pass.");
+        // Tests need at least one pass, fail or todo. Create a dummy pass
+        assert.ok(true, 'Each test requires at least one pass, fail or todo');
 
         return Promise.resolve(undefined);
       }
@@ -1270,5 +1268,5 @@ function log(message) {
   }
 }
 
-return { helpers: helpers, gcli: gcli, assert: assert };
+return { helpers: helpers, assert: assert };
 })();
diff --git a/browser/devtools/commandline/test/mockCommands.js b/browser/devtools/commandline/test/mockCommands.js
index 0b9f934..4793e18 100644
--- a/browser/devtools/commandline/test/mockCommands.js
+++ b/browser/devtools/commandline/test/mockCommands.js
@@ -41,32 +41,70 @@ mockCommands.shutdown = function(requisition) {
 };
 
 function createExec(name) {
-  return function(args, executionContext) {
-    var argsOut = Object.keys(args).map(function(key) {
-      return key + '=' + args[key];
-    }).join(', ');
-    return 'Exec: ' + name + ' ' + argsOut;
+  return function(args, context) {
+    var promises = [];
+
+    Object.keys(args).map(function(argName) {
+      var value = args[argName];
+      var type = this.getParameterByName(argName).type;
+      var promise = Promise.resolve(type.stringify(value, context));
+      promises.push(promise.then(function(str) {
+        return { name: argName, value: str };
+      }.bind(this)));
+    }.bind(this));
+
+    return Promise.all(promises).then(function(data) {
+      var argValues = {};
+      data.forEach(function(entry) { argValues[entry.name] = entry.value; });
+
+      return context.typedData('testCommandOutput', {
+        name: name,
+        args: argValues
+      });
+    }.bind(this));
   };
 }
 
 mockCommands.items = [
   {
     item: 'converter',
-    from: 'json',
-    to: 'string',
-    exec: function(json, context) {
-      return JSON.stringify(json, null, '  ');
+    from: 'testCommandOutput',
+    to: 'dom',
+    exec: function(testCommandOutput, context) {
+      var view = context.createView({
+        data: testCommandOutput,
+        html: '' +
+          '<table>' +
+            '<thead>' +
+              '<tr>' +
+                '<th colspan="3">Exec: ${name}</th>' +
+              '</tr>' +
+            '</thead>' +
+            '<tbody>' +
+              '<tr foreach="key in ${args}">' +
+                '<td> ${key}</td>' +
+                '<td>=</td>' +
+                '<td>${args[key]}</td>' +
+              '</tr>' +
+            '</tbody>' +
+          '</table>',
+        options: {
+          allowEval: true
+        }
+      });
+
+      return view.toDom(context.document);
     }
   },
   {
     item: 'converter',
-    from: 'json',
-    to: 'view',
-    exec: function(json, context) {
-      var html = JSON.stringify(json, null, '&#160;').replace(/\n/g, '<br/>');
-      return {
-        html: '<pre>' + html + '</pre>'
-      };
+    from: 'testCommandOutput',
+    to: 'string',
+    exec: function(testCommandOutput, context) {
+      var argsOut = Object.keys(testCommandOutput.args).map(function(key) {
+        return key + '=' + testCommandOutput.args[key];
+      }).join(' ');
+      return 'Exec: ' + testCommandOutput.name + ' ' + argsOut;
     }
   },
   {
diff --git a/browser/devtools/debugger/debugger-commands.js b/browser/devtools/debugger/debugger-commands.js
index 72824c4..a045964 100644
--- a/browser/devtools/debugger/debugger-commands.js
+++ b/browser/devtools/debugger/debugger-commands.js
@@ -5,7 +5,7 @@
 "use strict";
 
 const { Cc, Ci, Cu } = require("chrome");
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 
 loader.lazyImporter(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm");
 
@@ -67,8 +67,8 @@ function getAllSources(dbg) {
  */
 exports.items.push({
   name: "break",
-  description: gcli.lookup("breakDesc"),
-  manual: gcli.lookup("breakManual")
+  description: l10n.lookup("breakDesc"),
+  manual: l10n.lookup("breakManual")
 });
 
 /**
@@ -76,7 +76,9 @@ exports.items.push({
  */
 exports.items.push({
   name: "break list",
-  description: gcli.lookup("breaklistDesc"),
+  item: "command",
+  runAt: "client",
+  description: l10n.lookup("breaklistDesc"),
   returnType: "breakpoints",
   exec: function(args, context) {
     let dbg = getPanel(context, "jsdebugger", { ensureOpened: true });
@@ -102,7 +104,7 @@ exports.items.push({
     } else {
       return context.createView({
         html: "<p>${message}</p>",
-        data: { message: gcli.lookup("breaklistNone") }
+        data: { message: l10n.lookup("breaklistNone") }
       });
     }
   }
@@ -126,7 +128,7 @@ var breakListHtml = "" +
       "            data-command='break del ${breakpoint.label}'" +
       "            onclick='${onclick}'" +
       "            ondblclick='${ondblclick}'>" +
-      "        " + gcli.lookup("breaklistOutRemove") + "</span>" +
+      "        " + l10n.lookup("breaklistOutRemove") + "</span>" +
       "    </td>" +
       "  </tr>" +
       " </tbody>" +
@@ -141,16 +143,18 @@ var MAX_LABEL_LENGTH = 20;
  */
 exports.items.push({
   name: "break add",
-  description: gcli.lookup("breakaddDesc"),
-  manual: gcli.lookup("breakaddManual")
+  description: l10n.lookup("breakaddDesc"),
+  manual: l10n.lookup("breakaddManual")
 });
 
 /**
  * 'break add line' command
  */
 exports.items.push({
+  item: "command",
+  runAt: "client",
   name: "break add line",
-  description: gcli.lookup("breakaddlineDesc"),
+  description: l10n.lookup("breakaddlineDesc"),
   params: [
     {
       name: "file",
@@ -160,19 +164,19 @@ exports.items.push({
           return getAllSources(getPanel(context, "jsdebugger"));
         }
       },
-      description: gcli.lookup("breakaddlineFileDesc")
+      description: l10n.lookup("breakaddlineFileDesc")
     },
     {
       name: "line",
       type: { name: "number", min: 1, step: 10 },
-      description: gcli.lookup("breakaddlineLineDesc")
+      description: l10n.lookup("breakaddlineLineDesc")
     }
   ],
   returnType: "string",
   exec: function(args, context) {
     let dbg = getPanel(context, "jsdebugger");
     if (!dbg) {
-      return gcli.lookup("debuggerStopped");
+      return l10n.lookup("debuggerStopped");
     }
 
     let deferred = context.defer();
@@ -182,9 +186,9 @@ exports.items.push({
     let position = { actor: item.value, line: args.line };
 
     dbg.addBreakpoint(position).then(() => {
-      deferred.resolve(gcli.lookup("breakaddAdded"));
+      deferred.resolve(l10n.lookup("breakaddAdded"));
     }, aError => {
-      deferred.resolve(gcli.lookupFormat("breakaddFailed", [aError]));
+      deferred.resolve(l10n.lookupFormat("breakaddFailed", [aError]));
     });
 
     return deferred.promise;
@@ -195,8 +199,10 @@ exports.items.push({
  * 'break del' command
  */
 exports.items.push({
+  item: "command",
+  runAt: "client",
   name: "break del",
-  description: gcli.lookup("breakdelDesc"),
+  description: l10n.lookup("breakdelDesc"),
   params: [
     {
       name: "breakpoint",
@@ -214,14 +220,14 @@ exports.items.push({
           }));
         }
       },
-      description: gcli.lookup("breakdelBreakidDesc")
+      description: l10n.lookup("breakdelBreakidDesc")
     }
   ],
   returnType: "string",
   exec: function(args, context) {
     let dbg = getPanel(context, "jsdebugger");
     if (!dbg) {
-      return gcli.lookup("debuggerStopped");
+      return l10n.lookup("debuggerStopped");
     }
 
     let source = dbg._view.Sources.getItemForAttachment(a => {
@@ -233,9 +239,9 @@ exports.items.push({
                      line: args.breakpoint.lineNumber };
 
     dbg.removeBreakpoint(position).then(() => {
-      deferred.resolve(gcli.lookup("breakdelRemoved"));
+      deferred.resolve(l10n.lookup("breakdelRemoved"));
     }, () => {
-      deferred.resolve(gcli.lookup("breakNotFound"));
+      deferred.resolve(l10n.lookup("breakNotFound"));
     });
 
     return deferred.promise;
@@ -247,16 +253,18 @@ exports.items.push({
  */
 exports.items.push({
   name: "dbg",
-  description: gcli.lookup("dbgDesc"),
-  manual: gcli.lookup("dbgManual")
+  description: l10n.lookup("dbgDesc"),
+  manual: l10n.lookup("dbgManual")
 });
 
 /**
  * 'dbg open' command
  */
 exports.items.push({
+  item: "command",
+  runAt: "client",
   name: "dbg open",
-  description: gcli.lookup("dbgOpen"),
+  description: l10n.lookup("dbgOpen"),
   params: [],
   exec: function(args, context) {
     let target = context.environment.target;
@@ -268,8 +276,10 @@ exports.items.push({
  * 'dbg close' command
  */
 exports.items.push({
+  item: "command",
+  runAt: "client",
   name: "dbg close",
-  description: gcli.lookup("dbgClose"),
+  description: l10n.lookup("dbgClose"),
   params: [],
   exec: function(args, context) {
     if (!getPanel(context, "jsdebugger")) {
@@ -284,13 +294,15 @@ exports.items.push({
  * 'dbg interrupt' command
  */
 exports.items.push({
+  item: "command",
+  runAt: "client",
   name: "dbg interrupt",
-  description: gcli.lookup("dbgInterrupt"),
+  description: l10n.lookup("dbgInterrupt"),
   params: [],
   exec: function(args, context) {
     let dbg = getPanel(context, "jsdebugger");
     if (!dbg) {
-      return gcli.lookup("debuggerStopped");
+      return l10n.lookup("debuggerStopped");
     }
 
     let controller = dbg._controller;
@@ -305,13 +317,15 @@ exports.items.push({
  * 'dbg continue' command
  */
 exports.items.push({
+  item: "command",
+  runAt: "client",
   name: "dbg continue",
-  description: gcli.lookup("dbgContinue"),
+  description: l10n.lookup("dbgContinue"),
   params: [],
   exec: function(args, context) {
     let dbg = getPanel(context, "jsdebugger");
     if (!dbg) {
-      return gcli.lookup("debuggerStopped");
+      return l10n.lookup("debuggerStopped");
     }
 
     let controller = dbg._controller;
@@ -326,22 +340,26 @@ exports.items.push({
  * 'dbg step' command
  */
 exports.items.push({
+  item: "command",
+  runAt: "client",
   name: "dbg step",
-  description: gcli.lookup("dbgStepDesc"),
-  manual: gcli.lookup("dbgStepManual")
+  description: l10n.lookup("dbgStepDesc"),
+  manual: l10n.lookup("dbgStepManual")
 });
 
 /**
  * 'dbg step over' command
  */
 exports.items.push({
+  item: "command",
+  runAt: "client",
   name: "dbg step over",
-  description: gcli.lookup("dbgStepOverDesc"),
+  description: l10n.lookup("dbgStepOverDesc"),
   params: [],
   exec: function(args, context) {
     let dbg = getPanel(context, "jsdebugger");
     if (!dbg) {
-      return gcli.lookup("debuggerStopped");
+      return l10n.lookup("debuggerStopped");
     }
 
     let controller = dbg._controller;
@@ -356,13 +374,15 @@ exports.items.push({
  * 'dbg step in' command
  */
 exports.items.push({
+  item: "command",
+  runAt: "client",
   name: 'dbg step in',
-  description: gcli.lookup("dbgStepInDesc"),
+  description: l10n.lookup("dbgStepInDesc"),
   params: [],
   exec: function(args, context) {
     let dbg = getPanel(context, "jsdebugger");
     if (!dbg) {
-      return gcli.lookup("debuggerStopped");
+      return l10n.lookup("debuggerStopped");
     }
 
     let controller = dbg._controller;
@@ -377,13 +397,15 @@ exports.items.push({
  * 'dbg step over' command
  */
 exports.items.push({
+  item: "command",
+  runAt: "client",
   name: 'dbg step out',
-  description: gcli.lookup("dbgStepOutDesc"),
+  description: l10n.lookup("dbgStepOutDesc"),
   params: [],
   exec: function(args, context) {
     let dbg = getPanel(context, "jsdebugger");
     if (!dbg) {
-      return gcli.lookup("debuggerStopped");
+      return l10n.lookup("debuggerStopped");
     }
 
     let controller = dbg._controller;
@@ -398,14 +420,16 @@ exports.items.push({
  * 'dbg list' command
  */
 exports.items.push({
+  item: "command",
+  runAt: "client",
   name: "dbg list",
-  description: gcli.lookup("dbgListSourcesDesc"),
+  description: l10n.lookup("dbgListSourcesDesc"),
   params: [],
   returnType: "dom",
   exec: function(args, context) {
     let dbg = getPanel(context, "jsdebugger");
     if (!dbg) {
-      return gcli.lookup("debuggerClosed");
+      return l10n.lookup("debuggerClosed");
     }
 
     let sources = getAllSources(dbg);
@@ -440,10 +464,12 @@ exports.items.push({
   }
 ].forEach(function(cmd) {
   const lookup = function(id) {
-    return gcli.lookup(cmd.l10nPrefix + id);
+    return l10n.lookup(cmd.l10nPrefix + id);
   };
 
   exports.items.push({
+    item: "command",
+    runAt: "client",
     name: "dbg " + cmd.name,
     description: lookup("Desc"),
     params: [
@@ -475,7 +501,7 @@ exports.items.push({
       const dbg = getPanel(context, "jsdebugger");
       const doc = context.environment.chromeDocument;
       if (!dbg) {
-        throw new Error(gcli.lookup("debuggerClosed"));
+        throw new Error(l10n.lookup("debuggerClosed"));
       }
 
       const { promise, resolve, reject } = context.defer();
diff --git a/browser/devtools/definitions.js b/browser/devtools/definitions.js
new file mode 100644
index 0000000..f3949be
--- /dev/null
+++ b/browser/devtools/definitions.js
@@ -0,0 +1,409 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const {Cc, Ci, Cu} = require("chrome");
+
+const { Services } = require("resource://gre/modules/Services.jsm");
+
+loader.lazyGetter(this, "osString", () => Cc["@mozilla.org/xre/app-info;1"].getService(Ci.nsIXULRuntime).OS);
+
+// Panels
+loader.lazyGetter(this, "OptionsPanel", () => require("devtools/framework/toolbox-options").OptionsPanel);
+loader.lazyGetter(this, "InspectorPanel", () => require("devtools/inspector/inspector-panel").InspectorPanel);
+loader.lazyGetter(this, "WebConsolePanel", () => require("devtools/webconsole/panel").WebConsolePanel);
+loader.lazyGetter(this, "DebuggerPanel", () => require("devtools/debugger/panel").DebuggerPanel);
+loader.lazyGetter(this, "StyleEditorPanel", () => require("devtools/styleeditor/styleeditor-panel").StyleEditorPanel);
+loader.lazyGetter(this, "ShaderEditorPanel", () => require("devtools/shadereditor/panel").ShaderEditorPanel);
+loader.lazyGetter(this, "CanvasDebuggerPanel", () => require("devtools/canvasdebugger/panel").CanvasDebuggerPanel);
+loader.lazyGetter(this, "WebAudioEditorPanel", () => require("devtools/webaudioeditor/panel").WebAudioEditorPanel);
+loader.lazyGetter(this, "PerformancePanel", () => require("devtools/performance/panel").PerformancePanel);
+loader.lazyGetter(this, "NetMonitorPanel", () => require("devtools/netmonitor/panel").NetMonitorPanel);
+loader.lazyGetter(this, "StoragePanel", () => require("devtools/storage/panel").StoragePanel);
+loader.lazyGetter(this, "ScratchpadPanel", () => require("devtools/scratchpad/scratchpad-panel").ScratchpadPanel);
+
+// Strings
+const toolboxProps = "chrome://browser/locale/devtools/toolbox.properties";
+const inspectorProps = "chrome://browser/locale/devtools/inspector.properties";
+const webConsoleProps = "chrome://browser/locale/devtools/webconsole.properties";
+const debuggerProps = "chrome://browser/locale/devtools/debugger.properties";
+const styleEditorProps = "chrome://browser/locale/devtools/styleeditor.properties";
+const shaderEditorProps = "chrome://browser/locale/devtools/shadereditor.properties";
+const canvasDebuggerProps = "chrome://browser/locale/devtools/canvasdebugger.properties";
+const webAudioEditorProps = "chrome://browser/locale/devtools/webaudioeditor.properties";
+const profilerProps = "chrome://browser/locale/devtools/profiler.properties";
+const netMonitorProps = "chrome://browser/locale/devtools/netmonitor.properties";
+const storageProps = "chrome://browser/locale/devtools/storage.properties";
+const scratchpadProps = "chrome://browser/locale/devtools/scratchpad.properties";
+
+loader.lazyGetter(this, "toolboxStrings", () => Services.strings.createBundle(toolboxProps));
+loader.lazyGetter(this, "profilerStrings",() => Services.strings.createBundle(profilerProps));
+loader.lazyGetter(this, "webConsoleStrings", () => Services.strings.createBundle(webConsoleProps));
+loader.lazyGetter(this, "debuggerStrings", () => Services.strings.createBundle(debuggerProps));
+loader.lazyGetter(this, "styleEditorStrings", () => Services.strings.createBundle(styleEditorProps));
+loader.lazyGetter(this, "shaderEditorStrings", () => Services.strings.createBundle(shaderEditorProps));
+loader.lazyGetter(this, "canvasDebuggerStrings", () => Services.strings.createBundle(canvasDebuggerProps));
+loader.lazyGetter(this, "webAudioEditorStrings", () => Services.strings.createBundle(webAudioEditorProps));
+loader.lazyGetter(this, "inspectorStrings", () => Services.strings.createBundle(inspectorProps));
+loader.lazyGetter(this, "netMonitorStrings", () => Services.strings.createBundle(netMonitorProps));
+loader.lazyGetter(this, "storageStrings", () => Services.strings.createBundle(storageProps));
+loader.lazyGetter(this, "scratchpadStrings", () => Services.strings.createBundle(scratchpadProps));
+
+let Tools = {};
+exports.Tools = Tools;
+
+// Definitions
+Tools.options = {
+  id: "options",
+  ordinal: 0,
+  url: "chrome://browser/content/devtools/framework/toolbox-options.xul",
+  icon: "chrome://browser/skin/devtools/tool-options.svg",
+  invertIconForLightTheme: true,
+  bgTheme: "theme-body",
+  label: l10n("options.label", toolboxStrings),
+  iconOnly: true,
+  panelLabel: l10n("options.panelLabel", toolboxStrings),
+  tooltip: l10n("optionsButton.tooltip", toolboxStrings),
+  inMenu: false,
+
+  isTargetSupported: function(target) {
+    return true;
+  },
+
+  build: function(iframeWindow, toolbox) {
+    return new OptionsPanel(iframeWindow, toolbox);
+  }
+}
+
+Tools.inspector = {
+  id: "inspector",
+  accesskey: l10n("inspector.accesskey", inspectorStrings),
+  key: l10n("inspector.commandkey", inspectorStrings),
+  ordinal: 1,
+  modifiers: osString == "Darwin" ? "accel,alt" : "accel,shift",
+  icon: "chrome://browser/skin/devtools/tool-inspector.svg",
+  invertIconForLightTheme: true,
+  url: "chrome://browser/content/devtools/inspector/inspector.xul",
+  label: l10n("inspector.label", inspectorStrings),
+  panelLabel: l10n("inspector.panelLabel", inspectorStrings),
+  tooltip: l10n("inspector.tooltip", inspectorStrings),
+  inMenu: true,
+  commands: [
+    "devtools/resize-commands",
+    "devtools/inspector/inspector-commands",
+    "devtools/eyedropper/commands.js"
+  ],
+
+  preventClosingOnKey: true,
+  onkey: function(panel) {
+    panel.toolbox.highlighterUtils.togglePicker();
+  },
+
+  isTargetSupported: function(target) {
+    return target.hasActor("inspector");
+  },
+
+  build: function(iframeWindow, toolbox) {
+    return new InspectorPanel(iframeWindow, toolbox);
+  }
+};
+
+Tools.webConsole = {
+  id: "webconsole",
+  key: l10n("cmd.commandkey", webConsoleStrings),
+  accesskey: l10n("webConsoleCmd.accesskey", webConsoleStrings),
+  modifiers: Services.appinfo.OS == "Darwin" ? "accel,alt" : "accel,shift",
+  ordinal: 2,
+  icon: "chrome://browser/skin/devtools/tool-webconsole.svg",
+  invertIconForLightTheme: true,
+  url: "chrome://browser/content/devtools/webconsole.xul",
+  label: l10n("ToolboxTabWebconsole.label", webConsoleStrings),
+  menuLabel: l10n("MenuWebconsole.label", webConsoleStrings),
+  panelLabel: l10n("ToolboxWebConsole.panelLabel", webConsoleStrings),
+  tooltip: l10n("ToolboxWebconsole.tooltip", webConsoleStrings),
+  inMenu: true,
+  commands: "devtools/webconsole/console-commands",
+
+  preventClosingOnKey: true,
+  onkey: function(panel, toolbox) {
+    if (toolbox.splitConsole)
+      return toolbox.focusConsoleInput();
+
+    panel.focusInput();
+  },
+
+  isTargetSupported: function(target) {
+    return true;
+  },
+
+  build: function(iframeWindow, toolbox) {
+    return new WebConsolePanel(iframeWindow, toolbox);
+  }
+};
+
+Tools.jsdebugger = {
+  id: "jsdebugger",
+  key: l10n("debuggerMenu.commandkey", debuggerStrings),
+  accesskey: l10n("debuggerMenu.accesskey", debuggerStrings),
+  modifiers: osString == "Darwin" ? "accel,alt" : "accel,shift",
+  ordinal: 3,
+  icon: "chrome://browser/skin/devtools/tool-debugger.svg",
+  invertIconForLightTheme: true,
+  highlightedicon: "chrome://browser/skin/devtools/tool-debugger-paused.svg",
+  url: "chrome://browser/content/devtools/debugger.xul",
+  label: l10n("ToolboxDebugger.label", debuggerStrings),
+  panelLabel: l10n("ToolboxDebugger.panelLabel", debuggerStrings),
+  tooltip: l10n("ToolboxDebugger.tooltip", debuggerStrings),
+  inMenu: true,
+  commands: "devtools/debugger/debugger-commands",
+
+  isTargetSupported: function(target) {
+    return true;
+  },
+
+  build: function(iframeWindow, toolbox) {
+    return new DebuggerPanel(iframeWindow, toolbox);
+  }
+};
+
+Tools.styleEditor = {
+  id: "styleeditor",
+  key: l10n("open.commandkey", styleEditorStrings),
+  ordinal: 4,
+  accesskey: l10n("open.accesskey", styleEditorStrings),
+  modifiers: "shift",
+  icon: "chrome://browser/skin/devtools/tool-styleeditor.svg",
+  invertIconForLightTheme: true,
+  url: "chrome://browser/content/devtools/styleeditor.xul",
+  label: l10n("ToolboxStyleEditor.label", styleEditorStrings),
+  panelLabel: l10n("ToolboxStyleEditor.panelLabel", styleEditorStrings),
+  tooltip: l10n("ToolboxStyleEditor.tooltip2", styleEditorStrings),
+  inMenu: true,
+  commands: "devtools/styleeditor/styleeditor-commands",
+
+  isTargetSupported: function(target) {
+    return target.hasActor("styleEditor") || target.hasActor("styleSheets");
+  },
+
+  build: function(iframeWindow, toolbox) {
+    return new StyleEditorPanel(iframeWindow, toolbox);
+  }
+};
+
+Tools.shaderEditor = {
+  id: "shadereditor",
+  ordinal: 5,
+  visibilityswitch: "devtools.shadereditor.enabled",
+  icon: "chrome://browser/skin/devtools/tool-styleeditor.svg",
+  invertIconForLightTheme: true,
+  url: "chrome://browser/content/devtools/shadereditor.xul",
+  label: l10n("ToolboxShaderEditor.label", shaderEditorStrings),
+  panelLabel: l10n("ToolboxShaderEditor.panelLabel", shaderEditorStrings),
+  tooltip: l10n("ToolboxShaderEditor.tooltip", shaderEditorStrings),
+
+  isTargetSupported: function(target) {
+    return target.hasActor("webgl") && !target.chrome;
+  },
+
+  build: function(iframeWindow, toolbox) {
+    return new ShaderEditorPanel(iframeWindow, toolbox);
+  }
+};
+
+Tools.canvasDebugger = {
+  id: "canvasdebugger",
+  ordinal: 6,
+  visibilityswitch: "devtools.canvasdebugger.enabled",
+  icon: "chrome://browser/skin/devtools/tool-styleeditor.svg",
+  invertIconForLightTheme: true,
+  url: "chrome://browser/content/devtools/canvasdebugger.xul",
+  label: l10n("ToolboxCanvasDebugger.label", canvasDebuggerStrings),
+  panelLabel: l10n("ToolboxCanvasDebugger.panelLabel", canvasDebuggerStrings),
+  tooltip: l10n("ToolboxCanvasDebugger.tooltip", canvasDebuggerStrings),
+
+  // Hide the Canvas Debugger in the Add-on Debugger and Browser Toolbox
+  // (bug 1047520).
+  isTargetSupported: function(target) {
+    return target.hasActor("canvas") && !target.chrome;
+  },
+
+  build: function (iframeWindow, toolbox) {
+    return new CanvasDebuggerPanel(iframeWindow, toolbox);
+  }
+};
+
+Tools.performance = {
+  id: "performance",
+  ordinal: 7,
+  icon: "chrome://browser/skin/devtools/tool-profiler.svg",
+  invertIconForLightTheme: true,
+  url: "chrome://browser/content/devtools/performance.xul",
+  visibilityswitch: "devtools.performance.enabled",
+  label: l10n("profiler.label2", profilerStrings),
+  panelLabel: l10n("profiler.panelLabel2", profilerStrings),
+  tooltip: l10n("profiler.tooltip2", profilerStrings),
+  accesskey: l10n("profiler.accesskey", profilerStrings),
+  key: l10n("profiler.commandkey2", profilerStrings),
+  modifiers: "shift",
+  inMenu: true,
+
+  isTargetSupported: function (target) {
+    return target.hasActor("profiler");
+  },
+
+  build: function (frame, target) {
+    return new PerformancePanel(frame, target);
+  }
+};
+
+Tools.netMonitor = {
+  id: "netmonitor",
+  accesskey: l10n("netmonitor.accesskey", netMonitorStrings),
+  key: l10n("netmonitor.commandkey", netMonitorStrings),
+  ordinal: 9,
+  modifiers: osString == "Darwin" ? "accel,alt" : "accel,shift",
+  visibilityswitch: "devtools.netmonitor.enabled",
+  icon: "chrome://browser/skin/devtools/tool-network.svg",
+  invertIconForLightTheme: true,
+  url: "chrome://browser/content/devtools/netmonitor.xul",
+  label: l10n("netmonitor.label", netMonitorStrings),
+  panelLabel: l10n("netmonitor.panelLabel", netMonitorStrings),
+  tooltip: l10n("netmonitor.tooltip", netMonitorStrings),
+  inMenu: true,
+
+  isTargetSupported: function(target) {
+    return target.getTrait("networkMonitor");
+  },
+
+  build: function(iframeWindow, toolbox) {
+    return new NetMonitorPanel(iframeWindow, toolbox);
+  }
+};
+
+Tools.storage = {
+  id: "storage",
+  key: l10n("storage.commandkey", storageStrings),
+  ordinal: 10,
+  accesskey: l10n("storage.accesskey", storageStrings),
+  modifiers: "shift",
+  visibilityswitch: "devtools.storage.enabled",
+  icon: "chrome://browser/skin/devtools/tool-storage.svg",
+  invertIconForLightTheme: true,
+  url: "chrome://browser/content/devtools/storage.xul",
+  label: l10n("storage.label", storageStrings),
+  menuLabel: l10n("storage.menuLabel", storageStrings),
+  panelLabel: l10n("storage.panelLabel", storageStrings),
+  tooltip: l10n("storage.tooltip2", storageStrings),
+  inMenu: true,
+
+  isTargetSupported: function(target) {
+    return target.isLocalTab ||
+           ( target.hasActor("storage") &&
+             target.getTrait("storageInspector") );
+  },
+
+  build: function(iframeWindow, toolbox) {
+    return new StoragePanel(iframeWindow, toolbox);
+  }
+};
+
+Tools.webAudioEditor = {
+  id: "webaudioeditor",
+  ordinal: 11,
+  visibilityswitch: "devtools.webaudioeditor.enabled",
+  icon: "chrome://browser/skin/devtools/tool-webaudio.svg",
+  invertIconForLightTheme: true,
+  url: "chrome://browser/content/devtools/webaudioeditor.xul",
+  label: l10n("ToolboxWebAudioEditor1.label", webAudioEditorStrings),
+  panelLabel: l10n("ToolboxWebAudioEditor1.panelLabel", webAudioEditorStrings),
+  tooltip: l10n("ToolboxWebAudioEditor1.tooltip", webAudioEditorStrings),
+
+  isTargetSupported: function(target) {
+    return !target.chrome && target.hasActor("webaudio");
+  },
+
+  build: function(iframeWindow, toolbox) {
+    return new WebAudioEditorPanel(iframeWindow, toolbox);
+  }
+};
+
+Tools.scratchpad = {
+  id: "scratchpad",
+  ordinal: 12,
+  visibilityswitch: "devtools.scratchpad.enabled",
+  icon: "chrome://browser/skin/devtools/tool-scratchpad.svg",
+  invertIconForLightTheme: true,
+  url: "chrome://browser/content/devtools/scratchpad.xul",
+  label: l10n("scratchpad.label", scratchpadStrings),
+  panelLabel: l10n("scratchpad.panelLabel", scratchpadStrings),
+  tooltip: l10n("scratchpad.tooltip", scratchpadStrings),
+  inMenu: false,
+  commands: "devtools/scratchpad/scratchpad-commands",
+
+  isTargetSupported: function(target) {
+    return target.isRemote;
+  },
+
+  build: function(iframeWindow, toolbox) {
+    return new ScratchpadPanel(iframeWindow, toolbox);
+  }
+};
+
+let defaultTools = [
+  Tools.options,
+  Tools.webConsole,
+  Tools.inspector,
+  Tools.jsdebugger,
+  Tools.styleEditor,
+  Tools.shaderEditor,
+  Tools.canvasDebugger,
+  Tools.webAudioEditor,
+  Tools.performance,
+  Tools.netMonitor,
+  Tools.storage,
+  Tools.scratchpad
+];
+
+exports.defaultTools = defaultTools;
+
+Tools.darkTheme = {
+  id: "dark",
+  label: l10n("options.darkTheme.label", toolboxStrings),
+  ordinal: 1,
+  stylesheets: ["chrome://browser/skin/devtools/dark-theme.css"],
+  classList: ["theme-dark"],
+};
+
+Tools.lightTheme = {
+  id: "light",
+  label: l10n("options.lightTheme.label", toolboxStrings),
+  ordinal: 2,
+  stylesheets: ["chrome://browser/skin/devtools/light-theme.css"],
+  classList: ["theme-light"],
+};
+
+exports.defaultThemes = [
+  Tools.darkTheme,
+  Tools.lightTheme,
+];
+
+/**
+ * Lookup l10n string from a string bundle.
+ *
+ * @param {string} name
+ *        The key to lookup.
+ * @param {StringBundle} bundle
+ *        The key to lookup.
+ * @returns A localized version of the given key.
+ */
+function l10n(name, bundle)
+{
+  try {
+    return bundle.GetStringFromName(name);
+  } catch (ex) {
+    Services.console.logStringMessage("Error reading '" + name + "'");
+    throw new Error("l10n error with " + name);
+  }
+}
diff --git a/browser/devtools/eyedropper/commands.js b/browser/devtools/eyedropper/commands.js
index 7b8ac206..a7f71e5 100644
--- a/browser/devtools/eyedropper/commands.js
+++ b/browser/devtools/eyedropper/commands.js
@@ -2,7 +2,7 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 const EventEmitter = require("devtools/toolkit/event-emitter");
 const eventEmitter = new EventEmitter();
 
@@ -12,12 +12,14 @@ let { Eyedropper, EyedropperManager } = require("devtools/eyedropper/eyedropper"
  * 'eyedropper' command
  */
 exports.items = [{
+  item: "command",
+  runAt: "client",
   name: "eyedropper",
-  description: gcli.lookup("eyedropperDesc"),
-  manual: gcli.lookup("eyedropperManual"),
+  description: l10n.lookup("eyedropperDesc"),
+  manual: l10n.lookup("eyedropperManual"),
   buttonId: "command-button-eyedropper",
   buttonClass: "command-button command-button-invertable",
-  tooltipText: gcli.lookup("eyedropperTooltip"),
+  tooltipText: l10n.lookup("eyedropperTooltip"),
   state: {
     isChecked: function(target) {
       let chromeWindow = target.tab.ownerDocument.defaultView;
diff --git a/browser/devtools/framework/toolbox.js b/browser/devtools/framework/toolbox.js
index 856073c..acea85d 100644
--- a/browser/devtools/framework/toolbox.js
+++ b/browser/devtools/framework/toolbox.js
@@ -701,7 +701,7 @@ Toolbox.prototype = {
 
     let spec = CommandUtils.getCommandbarSpec("devtools.toolbox.toolbarSpec");
     let environment = CommandUtils.createEnvironment(this, '_target');
-    return CommandUtils.createRequisition(environment).then(requisition => {
+    return CommandUtils.createRequisition(environment, this.target).then(requisition => {
       this._requisition = requisition;
       return CommandUtils.createButtons(spec, this.target, this.doc,
                                         requisition).then(buttons => {
diff --git a/browser/devtools/inspector/inspector-commands.js b/browser/devtools/inspector/inspector-commands.js
index 793935b..db70708 100644
--- a/browser/devtools/inspector/inspector-commands.js
+++ b/browser/devtools/inspector/inspector-commands.js
@@ -4,18 +4,20 @@
 
 "use strict";
 
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 
 exports.items = [{
+  item: "command",
+  runAt: "server",
   name: "inspect",
-  description: gcli.lookup("inspectDesc"),
-  manual: gcli.lookup("inspectManual"),
+  description: l10n.lookup("inspectDesc"),
+  manual: l10n.lookup("inspectManual"),
   params: [
     {
       name: "selector",
       type: "node",
-      description: gcli.lookup("inspectNodeDesc"),
-      manual: gcli.lookup("inspectNodeManual")
+      description: l10n.lookup("inspectNodeDesc"),
+      manual: l10n.lookup("inspectNodeManual")
     }
   ],
   exec: function(args, context) {
diff --git a/browser/devtools/main.js b/browser/devtools/main.js
index 314ed6a..a19c4db 100644
--- a/browser/devtools/main.js
+++ b/browser/devtools/main.js
@@ -4,11 +4,20 @@
 
 "use strict";
 
-const {Cc, Ci, Cu} = require("chrome");
-
-Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+const { Cu } = require("chrome");
 Cu.import("resource://gre/modules/Services.jsm");
-Cu.import("resource:///modules/devtools/gDevTools.jsm");
+const { gDevTools } = require("resource:///modules/devtools/gDevTools.jsm");
+
+const { defaultTools, defaultThemes } = require("definitions");
+
+defaultTools.forEach(definition => gDevTools.registerTool(definition));
+defaultThemes.forEach(definition => gDevTools.registerTheme(definition));
+
+// Re-export for backwards compatibility, but we should probably the
+// definitions from require("definitions") in the future
+exports.defaultTools = require("definitions").defaultTools;
+exports.defaultThemes = require("definitions").defaultThemes;
+exports.Tools = require("definitions").Tools;
 
 Object.defineProperty(exports, "Toolbox", {
   get: () => require("devtools/framework/toolbox").Toolbox
@@ -17,398 +26,7 @@ Object.defineProperty(exports, "TargetFactory", {
   get: () => require("devtools/framework/target").TargetFactory
 });
 
-loader.lazyGetter(this, "osString", () => Cc["@mozilla.org/xre/app-info;1"].getService(Ci.nsIXULRuntime).OS);
-
-let events = require("sdk/system/events");
-
-// Panels
-loader.lazyGetter(this, "OptionsPanel", () => require("devtools/framework/toolbox-options").OptionsPanel);
-loader.lazyGetter(this, "InspectorPanel", () => require("devtools/inspector/inspector-panel").InspectorPanel);
-loader.lazyGetter(this, "WebConsolePanel", () => require("devtools/webconsole/panel").WebConsolePanel);
-loader.lazyGetter(this, "DebuggerPanel", () => require("devtools/debugger/panel").DebuggerPanel);
-loader.lazyGetter(this, "StyleEditorPanel", () => require("devtools/styleeditor/styleeditor-panel").StyleEditorPanel);
-loader.lazyGetter(this, "ShaderEditorPanel", () => require("devtools/shadereditor/panel").ShaderEditorPanel);
-loader.lazyGetter(this, "CanvasDebuggerPanel", () => require("devtools/canvasdebugger/panel").CanvasDebuggerPanel);
-loader.lazyGetter(this, "WebAudioEditorPanel", () => require("devtools/webaudioeditor/panel").WebAudioEditorPanel);
-loader.lazyGetter(this, "PerformancePanel", () => require("devtools/performance/panel").PerformancePanel);
-loader.lazyGetter(this, "NetMonitorPanel", () => require("devtools/netmonitor/panel").NetMonitorPanel);
-loader.lazyGetter(this, "StoragePanel", () => require("devtools/storage/panel").StoragePanel);
-loader.lazyGetter(this, "ScratchpadPanel", () => require("devtools/scratchpad/scratchpad-panel").ScratchpadPanel);
-
-// Strings
-const toolboxProps = "chrome://browser/locale/devtools/toolbox.properties";
-const inspectorProps = "chrome://browser/locale/devtools/inspector.properties";
-const webConsoleProps = "chrome://browser/locale/devtools/webconsole.properties";
-const debuggerProps = "chrome://browser/locale/devtools/debugger.properties";
-const styleEditorProps = "chrome://browser/locale/devtools/styleeditor.properties";
-const shaderEditorProps = "chrome://browser/locale/devtools/shadereditor.properties";
-const canvasDebuggerProps = "chrome://browser/locale/devtools/canvasdebugger.properties";
-const webAudioEditorProps = "chrome://browser/locale/devtools/webaudioeditor.properties";
-const profilerProps = "chrome://browser/locale/devtools/profiler.properties";
-const netMonitorProps = "chrome://browser/locale/devtools/netmonitor.properties";
-const storageProps = "chrome://browser/locale/devtools/storage.properties";
-const scratchpadProps = "chrome://browser/locale/devtools/scratchpad.properties";
-
-loader.lazyGetter(this, "toolboxStrings", () => Services.strings.createBundle(toolboxProps));
-loader.lazyGetter(this, "profilerStrings",() => Services.strings.createBundle(profilerProps));
-loader.lazyGetter(this, "webConsoleStrings", () => Services.strings.createBundle(webConsoleProps));
-loader.lazyGetter(this, "debuggerStrings", () => Services.strings.createBundle(debuggerProps));
-loader.lazyGetter(this, "styleEditorStrings", () => Services.strings.createBundle(styleEditorProps));
-loader.lazyGetter(this, "shaderEditorStrings", () => Services.strings.createBundle(shaderEditorProps));
-loader.lazyGetter(this, "canvasDebuggerStrings", () => Services.strings.createBundle(canvasDebuggerProps));
-loader.lazyGetter(this, "webAudioEditorStrings", () => Services.strings.createBundle(webAudioEditorProps));
-loader.lazyGetter(this, "inspectorStrings", () => Services.strings.createBundle(inspectorProps));
-loader.lazyGetter(this, "netMonitorStrings", () => Services.strings.createBundle(netMonitorProps));
-loader.lazyGetter(this, "storageStrings", () => Services.strings.createBundle(storageProps));
-loader.lazyGetter(this, "scratchpadStrings", () => Services.strings.createBundle(scratchpadProps));
-
-let Tools = {};
-exports.Tools = Tools;
-
-// Definitions
-Tools.options = {
-  id: "options",
-  ordinal: 0,
-  url: "chrome://browser/content/devtools/framework/toolbox-options.xul",
-  icon: "chrome://browser/skin/devtools/tool-options.svg",
-  invertIconForLightTheme: true,
-  bgTheme: "theme-body",
-  label: l10n("options.label", toolboxStrings),
-  iconOnly: true,
-  panelLabel: l10n("options.panelLabel", toolboxStrings),
-  tooltip: l10n("optionsButton.tooltip", toolboxStrings),
-  inMenu: false,
-
-  isTargetSupported: function(target) {
-    return true;
-  },
-
-  build: function(iframeWindow, toolbox) {
-    return new OptionsPanel(iframeWindow, toolbox);
-  }
-}
-
-Tools.inspector = {
-  id: "inspector",
-  accesskey: l10n("inspector.accesskey", inspectorStrings),
-  key: l10n("inspector.commandkey", inspectorStrings),
-  ordinal: 1,
-  modifiers: osString == "Darwin" ? "accel,alt" : "accel,shift",
-  icon: "chrome://browser/skin/devtools/tool-inspector.svg",
-  invertIconForLightTheme: true,
-  url: "chrome://browser/content/devtools/inspector/inspector.xul",
-  label: l10n("inspector.label", inspectorStrings),
-  panelLabel: l10n("inspector.panelLabel", inspectorStrings),
-  tooltip: l10n("inspector.tooltip", inspectorStrings),
-  inMenu: true,
-  commands: [
-    "devtools/resize-commands",
-    "devtools/inspector/inspector-commands",
-    "devtools/eyedropper/commands.js"
-  ],
-
-  preventClosingOnKey: true,
-  onkey: function(panel) {
-    panel.toolbox.highlighterUtils.togglePicker();
-  },
-
-  isTargetSupported: function(target) {
-    return target.hasActor("inspector");
-  },
-
-  build: function(iframeWindow, toolbox) {
-    return new InspectorPanel(iframeWindow, toolbox);
-  }
-};
-
-Tools.webConsole = {
-  id: "webconsole",
-  key: l10n("cmd.commandkey", webConsoleStrings),
-  accesskey: l10n("webConsoleCmd.accesskey", webConsoleStrings),
-  modifiers: Services.appinfo.OS == "Darwin" ? "accel,alt" : "accel,shift",
-  ordinal: 2,
-  icon: "chrome://browser/skin/devtools/tool-webconsole.svg",
-  invertIconForLightTheme: true,
-  url: "chrome://browser/content/devtools/webconsole.xul",
-  label: l10n("ToolboxTabWebconsole.label", webConsoleStrings),
-  menuLabel: l10n("MenuWebconsole.label", webConsoleStrings),
-  panelLabel: l10n("ToolboxWebConsole.panelLabel", webConsoleStrings),
-  tooltip: l10n("ToolboxWebconsole.tooltip", webConsoleStrings),
-  inMenu: true,
-  commands: "devtools/webconsole/console-commands",
-
-  preventClosingOnKey: true,
-  onkey: function(panel, toolbox) {
-    if (toolbox.splitConsole)
-      return toolbox.focusConsoleInput();
-
-    panel.focusInput();
-  },
-
-  isTargetSupported: function(target) {
-    return true;
-  },
-
-  build: function(iframeWindow, toolbox) {
-    return new WebConsolePanel(iframeWindow, toolbox);
-  }
-};
-
-Tools.jsdebugger = {
-  id: "jsdebugger",
-  key: l10n("debuggerMenu.commandkey", debuggerStrings),
-  accesskey: l10n("debuggerMenu.accesskey", debuggerStrings),
-  modifiers: osString == "Darwin" ? "accel,alt" : "accel,shift",
-  ordinal: 3,
-  icon: "chrome://browser/skin/devtools/tool-debugger.svg",
-  invertIconForLightTheme: true,
-  highlightedicon: "chrome://browser/skin/devtools/tool-debugger-paused.svg",
-  url: "chrome://browser/content/devtools/debugger.xul",
-  label: l10n("ToolboxDebugger.label", debuggerStrings),
-  panelLabel: l10n("ToolboxDebugger.panelLabel", debuggerStrings),
-  tooltip: l10n("ToolboxDebugger.tooltip", debuggerStrings),
-  inMenu: true,
-  commands: "devtools/debugger/debugger-commands",
-
-  isTargetSupported: function(target) {
-    return true;
-  },
-
-  build: function(iframeWindow, toolbox) {
-    return new DebuggerPanel(iframeWindow, toolbox);
-  }
-};
-
-Tools.styleEditor = {
-  id: "styleeditor",
-  key: l10n("open.commandkey", styleEditorStrings),
-  ordinal: 4,
-  accesskey: l10n("open.accesskey", styleEditorStrings),
-  modifiers: "shift",
-  icon: "chrome://browser/skin/devtools/tool-styleeditor.svg",
-  invertIconForLightTheme: true,
-  url: "chrome://browser/content/devtools/styleeditor.xul",
-  label: l10n("ToolboxStyleEditor.label", styleEditorStrings),
-  panelLabel: l10n("ToolboxStyleEditor.panelLabel", styleEditorStrings),
-  tooltip: l10n("ToolboxStyleEditor.tooltip2", styleEditorStrings),
-  inMenu: true,
-  commands: "devtools/styleeditor/styleeditor-commands",
-
-  isTargetSupported: function(target) {
-    return target.hasActor("styleEditor") || target.hasActor("styleSheets");
-  },
-
-  build: function(iframeWindow, toolbox) {
-    return new StyleEditorPanel(iframeWindow, toolbox);
-  }
-};
-
-Tools.shaderEditor = {
-  id: "shadereditor",
-  ordinal: 5,
-  visibilityswitch: "devtools.shadereditor.enabled",
-  icon: "chrome://browser/skin/devtools/tool-styleeditor.svg",
-  invertIconForLightTheme: true,
-  url: "chrome://browser/content/devtools/shadereditor.xul",
-  label: l10n("ToolboxShaderEditor.label", shaderEditorStrings),
-  panelLabel: l10n("ToolboxShaderEditor.panelLabel", shaderEditorStrings),
-  tooltip: l10n("ToolboxShaderEditor.tooltip", shaderEditorStrings),
-
-  isTargetSupported: function(target) {
-    return target.hasActor("webgl") && !target.chrome;
-  },
-
-  build: function(iframeWindow, toolbox) {
-    return new ShaderEditorPanel(iframeWindow, toolbox);
-  }
-};
-
-Tools.canvasDebugger = {
-  id: "canvasdebugger",
-  ordinal: 6,
-  visibilityswitch: "devtools.canvasdebugger.enabled",
-  icon: "chrome://browser/skin/devtools/tool-styleeditor.svg",
-  invertIconForLightTheme: true,
-  url: "chrome://browser/content/devtools/canvasdebugger.xul",
-  label: l10n("ToolboxCanvasDebugger.label", canvasDebuggerStrings),
-  panelLabel: l10n("ToolboxCanvasDebugger.panelLabel", canvasDebuggerStrings),
-  tooltip: l10n("ToolboxCanvasDebugger.tooltip", canvasDebuggerStrings),
-
-  // Hide the Canvas Debugger in the Add-on Debugger and Browser Toolbox
-  // (bug 1047520).
-  isTargetSupported: function(target) {
-    return target.hasActor("canvas") && !target.chrome;
-  },
-
-  build: function (iframeWindow, toolbox) {
-    return new CanvasDebuggerPanel(iframeWindow, toolbox);
-  }
-};
-
-Tools.performance = {
-  id: "performance",
-  ordinal: 7,
-  icon: "chrome://browser/skin/devtools/tool-profiler.svg",
-  invertIconForLightTheme: true,
-  url: "chrome://browser/content/devtools/performance.xul",
-  visibilityswitch: "devtools.performance.enabled",
-  label: l10n("profiler.label2", profilerStrings),
-  panelLabel: l10n("profiler.panelLabel2", profilerStrings),
-  tooltip: l10n("profiler.tooltip2", profilerStrings),
-  accesskey: l10n("profiler.accesskey", profilerStrings),
-  key: l10n("profiler.commandkey2", profilerStrings),
-  modifiers: "shift",
-  inMenu: true,
-
-  isTargetSupported: function (target) {
-    return target.hasActor("profiler");
-  },
-
-  build: function (frame, target) {
-    return new PerformancePanel(frame, target);
-  }
-};
-
-Tools.netMonitor = {
-  id: "netmonitor",
-  accesskey: l10n("netmonitor.accesskey", netMonitorStrings),
-  key: l10n("netmonitor.commandkey", netMonitorStrings),
-  ordinal: 9,
-  modifiers: osString == "Darwin" ? "accel,alt" : "accel,shift",
-  visibilityswitch: "devtools.netmonitor.enabled",
-  icon: "chrome://browser/skin/devtools/tool-network.svg",
-  invertIconForLightTheme: true,
-  url: "chrome://browser/content/devtools/netmonitor.xul",
-  label: l10n("netmonitor.label", netMonitorStrings),
-  panelLabel: l10n("netmonitor.panelLabel", netMonitorStrings),
-  tooltip: l10n("netmonitor.tooltip", netMonitorStrings),
-  inMenu: true,
-
-  isTargetSupported: function(target) {
-    return target.getTrait("networkMonitor");
-  },
-
-  build: function(iframeWindow, toolbox) {
-    return new NetMonitorPanel(iframeWindow, toolbox);
-  }
-};
-
-Tools.storage = {
-  id: "storage",
-  key: l10n("storage.commandkey", storageStrings),
-  ordinal: 10,
-  accesskey: l10n("storage.accesskey", storageStrings),
-  modifiers: "shift",
-  visibilityswitch: "devtools.storage.enabled",
-  icon: "chrome://browser/skin/devtools/tool-storage.svg",
-  invertIconForLightTheme: true,
-  url: "chrome://browser/content/devtools/storage.xul",
-  label: l10n("storage.label", storageStrings),
-  menuLabel: l10n("storage.menuLabel", storageStrings),
-  panelLabel: l10n("storage.panelLabel", storageStrings),
-  tooltip: l10n("storage.tooltip2", storageStrings),
-  inMenu: true,
-
-  isTargetSupported: function(target) {
-    return target.isLocalTab ||
-           ( target.hasActor("storage") &&
-             target.getTrait("storageInspector") );
-  },
-
-  build: function(iframeWindow, toolbox) {
-    return new StoragePanel(iframeWindow, toolbox);
-  }
-};
-
-Tools.webAudioEditor = {
-  id: "webaudioeditor",
-  ordinal: 11,
-  visibilityswitch: "devtools.webaudioeditor.enabled",
-  icon: "chrome://browser/skin/devtools/tool-webaudio.svg",
-  invertIconForLightTheme: true,
-  url: "chrome://browser/content/devtools/webaudioeditor.xul",
-  label: l10n("ToolboxWebAudioEditor1.label", webAudioEditorStrings),
-  panelLabel: l10n("ToolboxWebAudioEditor1.panelLabel", webAudioEditorStrings),
-  tooltip: l10n("ToolboxWebAudioEditor1.tooltip", webAudioEditorStrings),
-
-  isTargetSupported: function(target) {
-    return !target.chrome && target.hasActor("webaudio");
-  },
-
-  build: function(iframeWindow, toolbox) {
-    return new WebAudioEditorPanel(iframeWindow, toolbox);
-  }
-};
-
-Tools.scratchpad = {
-  id: "scratchpad",
-  ordinal: 12,
-  visibilityswitch: "devtools.scratchpad.enabled",
-  icon: "chrome://browser/skin/devtools/tool-scratchpad.svg",
-  invertIconForLightTheme: true,
-  url: "chrome://browser/content/devtools/scratchpad.xul",
-  label: l10n("scratchpad.label", scratchpadStrings),
-  panelLabel: l10n("scratchpad.panelLabel", scratchpadStrings),
-  tooltip: l10n("scratchpad.tooltip", scratchpadStrings),
-  inMenu: false,
-  commands: "devtools/scratchpad/scratchpad-commands",
-
-  isTargetSupported: function(target) {
-    return target.isRemote;
-  },
-
-  build: function(iframeWindow, toolbox) {
-    return new ScratchpadPanel(iframeWindow, toolbox);
-  }
-};
-
-let defaultTools = [
-  Tools.options,
-  Tools.webConsole,
-  Tools.inspector,
-  Tools.jsdebugger,
-  Tools.styleEditor,
-  Tools.shaderEditor,
-  Tools.canvasDebugger,
-  Tools.webAudioEditor,
-  Tools.performance,
-  Tools.netMonitor,
-  Tools.storage,
-  Tools.scratchpad
-];
-
-exports.defaultTools = defaultTools;
-
-for (let definition of defaultTools) {
-  gDevTools.registerTool(definition);
-}
-
-Tools.darkTheme = {
-  id: "dark",
-  label: l10n("options.darkTheme.label", toolboxStrings),
-  ordinal: 1,
-  stylesheets: ["chrome://browser/skin/devtools/dark-theme.css"],
-  classList: ["theme-dark"],
-};
-
-Tools.lightTheme = {
-  id: "light",
-  label: l10n("options.lightTheme.label", toolboxStrings),
-  ordinal: 2,
-  stylesheets: ["chrome://browser/skin/devtools/light-theme.css"],
-  classList: ["theme-light"],
-};
-
-let defaultThemes = [
-  Tools.darkTheme,
-  Tools.lightTheme,
-];
-
-for (let definition of defaultThemes) {
-  gDevTools.registerTheme(definition);
-}
-
-var unloadObserver = {
+const unloadObserver = {
   observe: function(subject, topic, data) {
     if (subject.wrappedJSObject === require("@loader/unload")) {
       Services.obs.removeObserver(unloadObserver, "sdk:loader:destroy");
@@ -423,23 +41,5 @@ var unloadObserver = {
 };
 Services.obs.addObserver(unloadObserver, "sdk:loader:destroy", false);
 
+const events = require("sdk/system/events");
 events.emit("devtools-loaded", {});
-
-/**
- * Lookup l10n string from a string bundle.
- *
- * @param {string} name
- *        The key to lookup.
- * @param {StringBundle} bundle
- *        The key to lookup.
- * @returns A localized version of the given key.
- */
-function l10n(name, bundle)
-{
-  try {
-    return bundle.GetStringFromName(name);
-  } catch (ex) {
-    Services.console.logStringMessage("Error reading '" + name + "'");
-    throw new Error("l10n error with " + name);
-  }
-}
diff --git a/browser/devtools/moz.build b/browser/devtools/moz.build
index 30d083f..da066d8 100644
--- a/browser/devtools/moz.build
+++ b/browser/devtools/moz.build
@@ -41,5 +41,6 @@ EXTRA_COMPONENTS += [
 JAR_MANIFESTS += ['jar.mn']
 
 EXTRA_JS_MODULES.devtools += [
+    'definitions.js',
     'main.js',
 ]
diff --git a/browser/devtools/responsivedesign/resize-commands.js b/browser/devtools/responsivedesign/resize-commands.js
index c4bdb42..7ccdf25 100644
--- a/browser/devtools/responsivedesign/resize-commands.js
+++ b/browser/devtools/responsivedesign/resize-commands.js
@@ -11,32 +11,38 @@ const BRAND_SHORT_NAME = Cc["@mozilla.org/intl/stringbundle;1"].
                          createBundle("chrome://branding/locale/brand.properties").
                          GetStringFromName("brandShortName");
 
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 
 exports.items = [
   {
     name: 'resize',
-    description: gcli.lookup('resizeModeDesc')
+    description: l10n.lookup('resizeModeDesc')
   },
   {
+    item: "command",
+    runAt: "server",
     name: 'resize on',
-    description: gcli.lookup('resizeModeOnDesc'),
-    manual: gcli.lookupFormat('resizeModeManual2', [BRAND_SHORT_NAME]),
+    description: l10n.lookup('resizeModeOnDesc'),
+    manual: l10n.lookupFormat('resizeModeManual2', [BRAND_SHORT_NAME]),
     exec: gcli_cmd_resize
   },
   {
+    item: "command",
+    runAt: "server",
     name: 'resize off',
-    description: gcli.lookup('resizeModeOffDesc'),
-    manual: gcli.lookupFormat('resizeModeManual2', [BRAND_SHORT_NAME]),
+    description: l10n.lookup('resizeModeOffDesc'),
+    manual: l10n.lookupFormat('resizeModeManual2', [BRAND_SHORT_NAME]),
     exec: gcli_cmd_resize
   },
   {
+    item: "command",
+    runAt: "server",
     name: 'resize toggle',
     buttonId: "command-button-responsive",
     buttonClass: "command-button command-button-invertable",
-    tooltipText: gcli.lookup("resizeModeToggleTooltip"),
-    description: gcli.lookup('resizeModeToggleDesc'),
-    manual: gcli.lookupFormat('resizeModeManual2', [BRAND_SHORT_NAME]),
+    tooltipText: l10n.lookup("resizeModeToggleTooltip"),
+    description: l10n.lookup('resizeModeToggleDesc'),
+    manual: l10n.lookupFormat('resizeModeManual2', [BRAND_SHORT_NAME]),
     state: {
       isChecked: function(aTarget) {
         let browserWindow = aTarget.tab.ownerDocument.defaultView;
@@ -61,18 +67,20 @@ exports.items = [
     exec: gcli_cmd_resize
   },
   {
+    item: "command",
+    runAt: "server",
     name: 'resize to',
-    description: gcli.lookup('resizeModeToDesc'),
+    description: l10n.lookup('resizeModeToDesc'),
     params: [
       {
         name: 'width',
         type: 'number',
-        description: gcli.lookup("resizePageArgWidthDesc"),
+        description: l10n.lookup("resizePageArgWidthDesc"),
       },
       {
         name: 'height',
         type: 'number',
-        description: gcli.lookup("resizePageArgHeightDesc"),
+        description: l10n.lookup("resizePageArgHeightDesc"),
       },
     ],
     exec: gcli_cmd_resize
diff --git a/browser/devtools/scratchpad/scratchpad-commands.js b/browser/devtools/scratchpad/scratchpad-commands.js
index 8bfa0fe..13da7ef 100644
--- a/browser/devtools/scratchpad/scratchpad-commands.js
+++ b/browser/devtools/scratchpad/scratchpad-commands.js
@@ -4,13 +4,15 @@
 
 "use strict";
 
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 
 exports.items = [{
+  item: "command",
+  runAt: "server",
   name: "scratchpad",
   buttonId: "command-button-scratchpad",
   buttonClass: "command-button command-button-invertable",
-  tooltipText: gcli.lookup("scratchpadOpenTooltip"),
+  tooltipText: l10n.lookup("scratchpadOpenTooltip"),
   hidden: true,
   exec: function(args, context) {
     let Scratchpad = context.environment.chromeWindow.Scratchpad;
diff --git a/browser/devtools/shared/DeveloperToolbar.jsm b/browser/devtools/shared/DeveloperToolbar.jsm
index 9c2375e..10a586b 100644
--- a/browser/devtools/shared/DeveloperToolbar.jsm
+++ b/browser/devtools/shared/DeveloperToolbar.jsm
@@ -39,14 +39,12 @@ XPCOMUtils.defineLazyGetter(this, "toolboxStrings", function () {
 
 const Telemetry = require("devtools/shared/telemetry");
 
-// This lazy getter is needed to prevent a require loop
-XPCOMUtils.defineLazyGetter(this, "gcli", () => {
+XPCOMUtils.defineLazyGetter(this, "gcliInit", function() {
   try {
-    require("devtools/commandline/commands-index");
-    return require("gcli/index");
+    return require("devtools/commandline/commands-index");
   }
   catch (ex) {
-    console.error(ex);
+    console.log(ex);
   }
 });
 
@@ -62,7 +60,7 @@ Object.defineProperty(this, "ConsoleServiceListener", {
   enumerable: true
 });
 
-const promise = Cu.import('resource://gre/modules/Promise.jsm', {}).Promise;
+const promise = Cu.import("resource://gre/modules/Promise.jsm", {}).Promise;
 
 /**
  * A collection of utilities to help working with commands
@@ -71,9 +69,10 @@ let CommandUtils = {
   /**
    * Utility to ensure that things are loaded in the correct order
    */
-  createRequisition: function(environment) {
-    return gcli.load().then(() => {
-      return gcli.createRequisition({ environment: environment });
+  createRequisition: function(environment, target) {
+    return gcliInit.loadForTarget(target).then(system => {
+      var Requisition = require("gcli/cli").Requisition;
+      return new Requisition(system, { environment: environment });
     });
   },
 
@@ -105,12 +104,6 @@ let CommandUtils = {
           throw new Error("No command '" + typed + "'");
         }
 
-        // Do not build a button for a non-remote safe command in a non-local target.
-        if (!target.isLocalTab && !command.isRemoteSafe) {
-          requisition.clear();
-          return;
-        }
-
         if (command.buttonId != null) {
           button.id = command.buttonId;
           if (command.buttonClass != null) {
@@ -192,17 +185,17 @@ let CommandUtils = {
    * @param targetContainer An object containing a 'target' property which
    * reflects the current debug target
    */
-  createEnvironment: function(container, targetProperty='target') {
+  createEnvironment: function(container, targetProperty="target") {
     if (!container[targetProperty].toString ||
         !/TabTarget/.test(container[targetProperty].toString())) {
-      throw new Error('Missing target');
+      throw new Error("Missing target");
     }
 
     return {
       get target() {
         if (!container[targetProperty].toString ||
             !/TabTarget/.test(container[targetProperty].toString())) {
-          throw new Error('Removed target');
+          throw new Error("Removed target");
         }
 
         return container[targetProperty];
@@ -213,15 +206,15 @@ let CommandUtils = {
       },
 
       get chromeDocument() {
-        return this.chromeWindow.document;
+        return this.target.tab.ownerDocument.defaultView.document;
       },
 
       get window() {
-        return this.chromeWindow.gBrowser.selectedBrowser.contentWindow;
+        throw new Error("environment.window is not available in runAt:client commands");
       },
 
       get document() {
-        return this.window.document;
+        throw new Error("environment.document is not available in runAt:client commands");
       }
     };
   },
@@ -255,6 +248,8 @@ this.DeveloperToolbar = function DeveloperToolbar(aChromeWindow, aToolbarElement
 {
   this._chromeWindow = aChromeWindow;
 
+  this.target = null; // Will be setup when show() is called
+
   this._element = aToolbarElement;
   this._element.hidden = true;
   this._doc = this._element.ownerDocument;
@@ -292,20 +287,10 @@ const NOTIFICATIONS = {
 DeveloperToolbar.prototype.NOTIFICATIONS = NOTIFICATIONS;
 
 /**
- * target is dynamic because the selectedTab changes
- */
-Object.defineProperty(DeveloperToolbar.prototype, "target", {
-  get: function() {
-    return TargetFactory.forTab(this._chromeWindow.gBrowser.selectedTab);
-  },
-  enumerable: true
-});
-
-/**
  * Is the toolbar open?
  */
-Object.defineProperty(DeveloperToolbar.prototype, 'visible', {
-  get: function DT_visible() {
+Object.defineProperty(DeveloperToolbar.prototype, "visible", {
+  get: function() {
     return !this._element.hidden;
   },
   enumerable: true
@@ -316,8 +301,8 @@ let _gSequenceId = 0;
 /**
  * Getter for a unique ID.
  */
-Object.defineProperty(DeveloperToolbar.prototype, 'sequenceId', {
-  get: function DT_visible() {
+Object.defineProperty(DeveloperToolbar.prototype, "sequenceId", {
+  get: function() {
     return _gSequenceId++;
   },
   enumerable: true
@@ -408,20 +393,22 @@ DeveloperToolbar.prototype.show = function(focus) {
 
       this._doc.getElementById("Tools:DevToolbar").setAttribute("checked", "true");
 
-      return gcli.load().then(() => {
-        this.display = gcli.createDisplay({
-          contentDocument: this._chromeWindow.gBrowser.contentDocument,
+      this.target = TargetFactory.forTab(this._chromeWindow.gBrowser.selectedTab);
+      return gcliInit.loadForTarget(this.target).then(system => {
+        let Requisition = require("gcli/cli").Requisition;
+        this.requisition = new Requisition(system, {
+          environment: CommandUtils.createEnvironment(this, "target"),
+          document: this.outputPanel.document,
+        });
+
+        var FFDisplay = require("gcli/mozui/ffdisplay").FFDisplay;
+        this.display = new FFDisplay(system, {
+          requisition: this.requisition,
           chromeDocument: this._doc,
-          chromeWindow: this._chromeWindow,
           hintElement: this.tooltipPanel.hintElement,
           inputElement: this._input,
           completeElement: this._doc.querySelector(".gclitoolbar-complete-node"),
           backgroundElement: this._doc.querySelector(".gclitoolbar-stack-node"),
-          outputDocument: this.outputPanel.document,
-          environment: CommandUtils.createEnvironment(this, "target"),
-          tooltipClass: "gcliterm-tooltip",
-          eval: null,
-          scratchpad: null
         });
 
         this.display.focusManager.addMonitoredElement(this.outputPanel._frame);
@@ -454,7 +441,9 @@ DeveloperToolbar.prototype.show = function(focus) {
         this._notify(NOTIFICATIONS.SHOW);
 
         if (!DeveloperToolbar.introShownThisSession) {
-          this.display.maybeShowIntro();
+          let intro = require("gcli/ui/intro");
+          intro.maybeShowIntro(this.requisition.commandOutputManager,
+                               this.requisition.conversionContext);
           DeveloperToolbar.introShownThisSession = true;
         }
 
@@ -592,6 +581,7 @@ DeveloperToolbar.prototype.destroy = function() {
   this.display.onVisibilityChange.remove(this.tooltipPanel._visibilityChanged, this.tooltipPanel);
   this.display.onOutput.remove(this.outputPanel._outputChanged, this.outputPanel);
   this.display.destroy();
+  this.requisition.destroy();
   this.outputPanel.destroy();
   this.tooltipPanel.destroy();
   delete this._input;
@@ -623,8 +613,9 @@ DeveloperToolbar.prototype._notify = function(topic) {
 DeveloperToolbar.prototype.handleEvent = function(ev) {
   if (ev.type == "TabSelect" || ev.type == "load") {
     if (this.visible) {
-      this.display.reattach({
-        contentDocument: this._chromeWindow.gBrowser.contentDocument
+      this.target = TargetFactory.forTab(this._chromeWindow.gBrowser.selectedTab);
+      gcliInit.loadForTarget(this.target).then(system => {
+        this.requisition.system = system;
       });
 
       if (ev.type == "TabSelect") {
@@ -751,7 +742,7 @@ DeveloperToolbar.prototype.resetErrorsCount = function(tab) {
  * Creating a OutputPanel is asynchronous
  */
 function OutputPanel() {
-  throw new Error('Use OutputPanel.create()');
+  throw new Error("Use OutputPanel.create()");
 }
 
 /**
@@ -837,8 +828,8 @@ OutputPanel.prototype._init = function(devtoolbar) {
     this.document = this._frame.contentDocument;
 
     this._div = this.document.getElementById("gcli-output-root");
-    this._div.classList.add('gcli-row-out');
-    this._div.setAttribute('aria-live', 'assertive');
+    this._div.classList.add("gcli-row-out");
+    this._div.setAttribute("aria-live", "assertive");
 
     let styles = this._toolbar.ownerDocument.defaultView
                     .getComputedStyle(this._toolbar);
@@ -980,8 +971,8 @@ OutputPanel.prototype._update = function() {
   }
 
   if (this.displayedOutput.data != null) {
-    let context = this._devtoolbar.display.requisition.conversionContext;
-    this.displayedOutput.convert('dom', context).then(node => {
+    let context = this._devtoolbar.requisition.conversionContext;
+    this.displayedOutput.convert("dom", context).then(node => {
       if (node == null) {
         return;
       }
@@ -990,9 +981,9 @@ OutputPanel.prototype._update = function() {
         this._div.removeChild(this._div.firstChild);
       }
 
-      var links = node.querySelectorAll('*[href]');
+      var links = node.querySelectorAll("*[href]");
       for (var i = 0; i < links.length; i++) {
-        links[i].setAttribute('target', '_blank');
+        links[i].setAttribute("target", "_blank");
       }
 
       this._div.appendChild(node);
@@ -1059,7 +1050,7 @@ OutputPanel.prototype._visibilityChanged = function(ev) {
  * Creating a TooltipPanel is asynchronous
  */
 function TooltipPanel() {
-  throw new Error('Use TooltipPanel.create()');
+  throw new Error("Use TooltipPanel.create()");
 }
 
 /**
diff --git a/browser/devtools/styleeditor/styleeditor-commands.js b/browser/devtools/styleeditor/styleeditor-commands.js
index dd2c75b..262a0c1 100644
--- a/browser/devtools/styleeditor/styleeditor-commands.js
+++ b/browser/devtools/styleeditor/styleeditor-commands.js
@@ -4,12 +4,14 @@
 
 "use strict";
 
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 
 exports.items = [{
+  item: "command",
+  runAt: "client",
   name: "edit",
-  description: gcli.lookup("editDesc"),
-  manual: gcli.lookup("editManual2"),
+  description: l10n.lookup("editDesc"),
+  manual: l10n.lookup("editManual2"),
   params: [
      {
        name: 'resource',
@@ -17,7 +19,7 @@ exports.items = [{
          name: 'resource',
          include: 'text/css'
        },
-       description: gcli.lookup("editResourceDesc")
+       description: l10n.lookup("editResourceDesc")
      },
      {
        name: "line",
@@ -27,7 +29,7 @@ exports.items = [{
          min: 1,
          step: 10
        },
-       description: gcli.lookup("editLineToJumpToDesc")
+       description: l10n.lookup("editLineToJumpToDesc")
      }
    ],
    exec: function(args, context) {
diff --git a/browser/devtools/tilt/tilt-commands.js b/browser/devtools/tilt/tilt-commands.js
index 9c82828..16b6f60 100644
--- a/browser/devtools/tilt/tilt-commands.js
+++ b/browser/devtools/tilt/tilt-commands.js
@@ -4,7 +4,7 @@
 
 "use strict";
 
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 
 // Fetch TiltManager using the current loader, but don't save a
 // reference to it, because it might change with a tool reload.
@@ -19,18 +19,18 @@ Object.defineProperty(this, "TiltManager", {
 exports.items = [
 {
   name: 'tilt',
-  description: gcli.lookup("tiltDesc"),
-  manual: gcli.lookup("tiltManual"),
+  description: l10n.lookup("tiltDesc"),
+  manual: l10n.lookup("tiltManual"),
   hidden: true
 },
 {
   name: 'tilt open',
-  description: gcli.lookup("tiltOpenDesc"),
-  manual: gcli.lookup("tiltOpenManual"),
+  description: l10n.lookup("tiltOpenDesc"),
+  manual: l10n.lookup("tiltOpenManual"),
   hidden: true,
   exec: function(args, context) {
     if (isMultiProcess(context)) {
-      return gcli.lookupFormat("notAvailableInE10S", [this.name]);
+      return l10n.lookupFormat("notAvailableInE10S", [this.name]);
     }
 
     let chromeWindow = context.environment.chromeDocument.defaultView;
@@ -44,7 +44,7 @@ exports.items = [
   name: "tilt toggle",
   buttonId: "command-button-tilt",
   buttonClass: "command-button command-button-invertable",
-  tooltipText: gcli.lookup("tiltToggleTooltip"),
+  tooltipText: l10n.lookup("tiltToggleTooltip"),
   hidden: true,
   state: {
     isChecked: function(aTarget) {
@@ -66,7 +66,7 @@ exports.items = [
   },
   exec: function(args, context) {
     if (isMultiProcess(context)) {
-      return gcli.lookupFormat("notAvailableInE10S", [this.name]);
+      return l10n.lookupFormat("notAvailableInE10S", [this.name]);
     }
 
     let chromeWindow = context.environment.chromeDocument.defaultView;
@@ -76,28 +76,28 @@ exports.items = [
 },
 {
   name: 'tilt translate',
-  description: gcli.lookup("tiltTranslateDesc"),
-  manual: gcli.lookup("tiltTranslateManual"),
+  description: l10n.lookup("tiltTranslateDesc"),
+  manual: l10n.lookup("tiltTranslateManual"),
   hidden: true,
   params: [
     {
       name: "x",
       type: "number",
       defaultValue: 0,
-      description: gcli.lookup("tiltTranslateXDesc"),
-      manual: gcli.lookup("tiltTranslateXManual")
+      description: l10n.lookup("tiltTranslateXDesc"),
+      manual: l10n.lookup("tiltTranslateXManual")
     },
     {
       name: "y",
       type: "number",
       defaultValue: 0,
-      description: gcli.lookup("tiltTranslateYDesc"),
-      manual: gcli.lookup("tiltTranslateYManual")
+      description: l10n.lookup("tiltTranslateYDesc"),
+      manual: l10n.lookup("tiltTranslateYManual")
     }
   ],
   exec: function(args, context) {
     if (isMultiProcess(context)) {
-      return gcli.lookupFormat("notAvailableInE10S", [this.name]);
+      return l10n.lookupFormat("notAvailableInE10S", [this.name]);
     }
 
     let chromeWindow = context.environment.chromeDocument.defaultView;
@@ -109,35 +109,35 @@ exports.items = [
 },
 {
   name: 'tilt rotate',
-  description: gcli.lookup("tiltRotateDesc"),
-  manual: gcli.lookup("tiltRotateManual"),
+  description: l10n.lookup("tiltRotateDesc"),
+  manual: l10n.lookup("tiltRotateManual"),
   hidden: true,
   params: [
     {
       name: "x",
       type: { name: 'number', min: -360, max: 360, step: 10 },
       defaultValue: 0,
-      description: gcli.lookup("tiltRotateXDesc"),
-      manual: gcli.lookup("tiltRotateXManual")
+      description: l10n.lookup("tiltRotateXDesc"),
+      manual: l10n.lookup("tiltRotateXManual")
     },
     {
       name: "y",
       type: { name: 'number', min: -360, max: 360, step: 10 },
       defaultValue: 0,
-      description: gcli.lookup("tiltRotateYDesc"),
-      manual: gcli.lookup("tiltRotateYManual")
+      description: l10n.lookup("tiltRotateYDesc"),
+      manual: l10n.lookup("tiltRotateYManual")
     },
     {
       name: "z",
       type: { name: 'number', min: -360, max: 360, step: 10 },
       defaultValue: 0,
-      description: gcli.lookup("tiltRotateZDesc"),
-      manual: gcli.lookup("tiltRotateZManual")
+      description: l10n.lookup("tiltRotateZDesc"),
+      manual: l10n.lookup("tiltRotateZManual")
     }
   ],
   exec: function(args, context) {
     if (isMultiProcess(context)) {
-      return gcli.lookupFormat("notAvailableInE10S", [this.name]);
+      return l10n.lookupFormat("notAvailableInE10S", [this.name]);
     }
 
     let chromeWindow = context.environment.chromeDocument.defaultView;
@@ -149,20 +149,20 @@ exports.items = [
 },
 {
   name: 'tilt zoom',
-  description: gcli.lookup("tiltZoomDesc"),
-  manual: gcli.lookup("tiltZoomManual"),
+  description: l10n.lookup("tiltZoomDesc"),
+  manual: l10n.lookup("tiltZoomManual"),
   hidden: true,
   params: [
     {
       name: "zoom",
       type: { name: 'number' },
-      description: gcli.lookup("tiltZoomAmountDesc"),
-      manual: gcli.lookup("tiltZoomAmountManual")
+      description: l10n.lookup("tiltZoomAmountDesc"),
+      manual: l10n.lookup("tiltZoomAmountManual")
     }
   ],
   exec: function(args, context) {
     if (isMultiProcess(context)) {
-      return gcli.lookupFormat("notAvailableInE10S", [this.name]);
+      return l10n.lookupFormat("notAvailableInE10S", [this.name]);
     }
 
     let chromeWindow = context.environment.chromeDocument.defaultView;
@@ -175,12 +175,12 @@ exports.items = [
 },
 {
   name: 'tilt reset',
-  description: gcli.lookup("tiltResetDesc"),
-  manual: gcli.lookup("tiltResetManual"),
+  description: l10n.lookup("tiltResetDesc"),
+  manual: l10n.lookup("tiltResetManual"),
   hidden: true,
   exec: function(args, context) {
     if (isMultiProcess(context)) {
-      return gcli.lookupFormat("notAvailableInE10S", [this.name]);
+      return l10n.lookupFormat("notAvailableInE10S", [this.name]);
     }
 
     let chromeWindow = context.environment.chromeDocument.defaultView;
@@ -193,12 +193,12 @@ exports.items = [
 },
 {
   name: 'tilt close',
-  description: gcli.lookup("tiltCloseDesc"),
-  manual: gcli.lookup("tiltCloseManual"),
+  description: l10n.lookup("tiltCloseDesc"),
+  manual: l10n.lookup("tiltCloseManual"),
   hidden: true,
   exec: function(args, context) {
     if (isMultiProcess(context)) {
-      return gcli.lookupFormat("notAvailableInE10S", [this.name]);
+      return l10n.lookupFormat("notAvailableInE10S", [this.name]);
     }
 
     let chromeWindow = context.environment.chromeDocument.defaultView;
diff --git a/browser/devtools/webconsole/console-commands.js b/browser/devtools/webconsole/console-commands.js
index 471362c..a10c4ba 100644
--- a/browser/devtools/webconsole/console-commands.js
+++ b/browser/devtools/webconsole/console-commands.js
@@ -4,16 +4,18 @@
 
 "use strict";
 
-const gcli = require("gcli/index");
-const { gDevTools } = require("resource:///modules/devtools/gDevTools.jsm");
+const l10n = require("gcli/l10n");
+loader.lazyGetter(this, "gDevTools", () => require("resource:///modules/devtools/gDevTools.jsm").gDevTools);
 
 exports.items = [
   {
+    item: "command",
+    runAt: "client",
     name: 'splitconsole',
     hidden: true,
     buttonId: "command-button-splitconsole",
     buttonClass: "command-button command-button-invertable",
-    tooltipText: gcli.lookup("splitconsoleTooltip"),
+    tooltipText: l10n.lookup("splitconsoleTooltip"),
     isRemoteSafe: true,
     state: {
       isChecked: function(target) {
@@ -51,12 +53,14 @@ exports.items = [
   },
   {
     name: "console",
-    description: gcli.lookup("consoleDesc"),
-    manual: gcli.lookup("consoleManual")
+    description: l10n.lookup("consoleDesc"),
+    manual: l10n.lookup("consoleManual")
   },
   {
+    item: "command",
+    runAt: "client",
     name: "console clear",
-    description: gcli.lookup("consoleclearDesc"),
+    description: l10n.lookup("consoleclearDesc"),
     exec: function(args, context) {
       let toolbox = gDevTools.getToolbox(context.environment.target);
       if (toolbox == null) {
@@ -72,17 +76,24 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "client",
     name: "console close",
-    description: gcli.lookup("consolecloseDesc"),
+    description: l10n.lookup("consolecloseDesc"),
     exec: function(args, context) {
-      return gDevTools.closeToolbox(context.environment.target);
+      return gDevTools.closeToolbox(context.environment.target)
+                      .then(() => {}); // Don't return a value to GCLI
     }
   },
   {
+    item: "command",
+    runAt: "client",
     name: "console open",
-    description: gcli.lookup("consoleopenDesc"),
+    description: l10n.lookup("consoleopenDesc"),
     exec: function(args, context) {
-      return gDevTools.showToolbox(context.environment.target, "webconsole");
+      const target = context.environment.target;
+      return gDevTools.showToolbox(target, "webconsole")
+                      .then(() => {}); // Don't return a value to GCLI
     }
   }
 ];
diff --git a/browser/devtools/webconsole/console-output.js b/browser/devtools/webconsole/console-output.js
index 65e0944..fd7b22f 100644
--- a/browser/devtools/webconsole/console-output.js
+++ b/browser/devtools/webconsole/console-output.js
@@ -7,6 +7,8 @@
 
 const {Cc, Ci, Cu} = require("chrome");
 
+const { Services } = require("resource://gre/modules/Services.jsm");
+
 loader.lazyImporter(this, "VariablesView", "resource:///modules/devtools/VariablesView.jsm");
 loader.lazyImporter(this, "escapeHTML", "resource:///modules/devtools/VariablesView.jsm");
 loader.lazyImporter(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm");
diff --git a/browser/locales/en-US/chrome/browser/devtools/gcli.properties b/browser/locales/en-US/chrome/browser/devtools/gcli.properties
index cbfd1e4..9cb28a2 100644
--- a/browser/locales/en-US/chrome/browser/devtools/gcli.properties
+++ b/browser/locales/en-US/chrome/browser/devtools/gcli.properties
@@ -51,7 +51,7 @@ cliOptions=Available Options
 
 # LOCALIZATION NOTE: The error message when the user types a command that
 # isn't registered
-cliUnknownCommand=Invalid Command
+cliUnknownCommand2=Invalid Command: '%1$S'.
 
 # LOCALIZATION NOTE: A parameter should have a value, but doesn't
 cliIncompleteParam=Value required for '%1$S'.
diff --git a/browser/locales/en-US/chrome/browser/devtools/gclicommands.properties b/browser/locales/en-US/chrome/browser/devtools/gclicommands.properties
index c2e12f7..cd99fa1 100644
--- a/browser/locales/en-US/chrome/browser/devtools/gclicommands.properties
+++ b/browser/locales/en-US/chrome/browser/devtools/gclicommands.properties
@@ -132,6 +132,25 @@ screenshotCopied=Copied to clipboard.
 # LOCALIZATION NOTE (screenshotTooltip) Text displayed as tooltip for screenshot button in devtools ToolBox.
 screenshotTooltip=Take a fullpage screenshot
 
+# LOCALIZATION NOTE (screenshotImgurDesc) A very short string to describe
+# the 'imgur' parameter to the 'screenshot' command, which is displayed in
+# a dialog when the user is using this command.
+screenshotImgurDesc=Upload to imgur.com
+
+# LOCALIZATION NOTE (screenshotImgurManual) A fuller description of the
+# 'imgur' parameter to the 'screenshot' command, displayed when the user
+# asks for help on what it does.
+screenshotImgurManual=Use if you want to upload to imgur.com instead of saving to disk
+
+# LOCALIZATION NOTE (screenshotImgurError) Text displayed to user upon
+# encountering error while uploading the screenshot to imgur.com.
+screenshotImgurError=Could not reach imgur API
+
+# LOCALIZATION NOTE (screenshotImgurUploading) Text displayed to user when the
+# screenshot is successfully sent to Imgur but the program is waiting on a response.
+# The argument (%1$S) is a new image URL at Imgur.
+screenshotImgurUploaded=Uploaded to %1$S
+
 # LOCALIZATION NOTE (highlightDesc) A very short description of the
 # 'highlight' command. See highlightManual for a fuller description of what
 # it does. This string is designed to be shown in a menu alongside the
diff --git a/toolkit/devtools/Loader.jsm b/toolkit/devtools/Loader.jsm
index 19bbb6f..25c2771 100644
--- a/toolkit/devtools/Loader.jsm
+++ b/toolkit/devtools/Loader.jsm
@@ -79,6 +79,7 @@ BuiltinProvider.prototype = {
         // corresponding addition to the SrcdirProvider mapping below as well.
         "": "resource://gre/modules/commonjs/",
         "main": "resource:///modules/devtools/main.js",
+        "definitions": "resource:///modules/devtools/definitions.js",
         "devtools": "resource:///modules/devtools",
         "devtools/toolkit": "resource://gre/modules/devtools",
         "devtools/server": "resource://gre/modules/devtools/server",
@@ -135,6 +136,7 @@ SrcdirProvider.prototype = {
     let devtoolsDir = OS.Path.join(srcdir, "browser", "devtools");
     let toolkitDir = OS.Path.join(srcdir, "toolkit", "devtools");
     let mainURI = this.fileURI(OS.Path.join(devtoolsDir, "main.js"));
+    let definitionsURI = this.fileURI(OS.Path.join(devtoolsDir, "definitions.js"));
     let devtoolsURI = this.fileURI(devtoolsDir);
     let toolkitURI = this.fileURI(toolkitDir);
     let serverURI = this.fileURI(OS.Path.join(toolkitDir, "server"));
@@ -161,6 +163,7 @@ SrcdirProvider.prototype = {
       paths: {
         "": "resource://gre/modules/commonjs/",
         "main": mainURI,
+        "definitions": definitionsURI,
         "devtools": devtoolsURI,
         "devtools/toolkit": toolkitURI,
         "devtools/server": serverURI,
diff --git a/toolkit/devtools/gcli/Templater.jsm b/toolkit/devtools/gcli/Templater.jsm
index d5742e3..1093c17 100644
--- a/toolkit/devtools/gcli/Templater.jsm
+++ b/toolkit/devtools/gcli/Templater.jsm
@@ -19,11 +19,7 @@ Components.utils.import("resource://gre/modules/XPCOMUtils.jsm");
 XPCOMUtils.defineLazyModuleGetter(this, "console",
                                   "resource://gre/modules/devtools/Console.jsm");
 
-'do not use strict';
-
-// WARNING: do not 'use strict' without reading the notes in envEval();
-// Also don't remove the 'do not use strict' marker. The orion build uses these
-// markers to know where to insert AMD headers.
+'use strict';
 
 /**
  * For full documentation, see:
@@ -69,10 +65,6 @@ var template = function(node, data, options) {
   processNode(state, node, data);
 };
 
-//
-//
-//
-
 /**
  * Helper for the places where we need to act asynchronously and keep track of
  * where we are right now
@@ -182,6 +174,7 @@ function processNode(state, node, data) {
               replacement = envEval(state, value.slice(2, -1), data, value);
               if (replacement && typeof replacement.then === 'function') {
                 node.setAttribute(name, '');
+                /* jshint loopfunc:true */
                 replacement.then(function(newValue) {
                   node.setAttribute(name, newValue);
                 }).then(null, console.error);
@@ -361,15 +354,16 @@ function processForEachMember(state, member, templNode, siblingNode, data, param
       });
       newData[paramName] = reply;
       if (node.parentNode != null) {
+        var clone;
         if (templNode.nodeName.toLowerCase() === 'loop') {
           for (var i = 0; i < templNode.childNodes.length; i++) {
-            var clone = templNode.childNodes[i].cloneNode(true);
+            clone = templNode.childNodes[i].cloneNode(true);
             node.parentNode.insertBefore(clone, node);
             processNode(cState, clone, newData);
           }
         }
         else {
-          var clone = templNode.cloneNode(true);
+          clone = templNode.cloneNode(true);
           clone.removeAttribute('foreach');
           node.parentNode.insertBefore(clone, node);
           processNode(cState, clone, newData);
@@ -566,9 +560,35 @@ function envEval(state, script, data, frame) {
             ' can not be resolved using a simple property path.');
         return '${' + script + '}';
       }
-      with (data) {
-        return eval(script);
-      }
+
+      // What we're looking to do is basically:
+      //   with(data) { return eval(script); }
+      // except in strict mode where 'with' is banned.
+      // So we create a function which has a parameter list the same as the
+      // keys in 'data' and with 'script' as its function body.
+      // We then call this function with the values in 'data'
+      var keys = allKeys(data);
+      var args = keys.join(', ');
+      var func = 'function(' + args + ') { return ' + script + '; }';
+
+      // In order to extract this function from the eval, we wrap it in an IIFE
+      func = '(function() { return ' + func + ' })();';
+      func = eval(func);
+
+      var values = keys.map(function(key) { return data[key]; });
+      return func.apply(null, values);
+
+      // TODO: The 'with' method is different from the code above in the value
+      // of 'this' when calling functions. For example:
+      //   envEval(state, 'foo()', { foo: function() { return this; } }, ...);
+      // The global for 'foo' when using 'with' is the data object. However the
+      // code above, the global is null. (Using 'func.apply(data, values)'
+      // changes 'this' in the 'foo()' frame, but not in the inside the body
+      // of 'foo', so that wouldn't help)
+
+      // TODO: Come ES6 we can probably do something like this:
+      //   let func = new Function(...keys, 'return ' + script);
+      //   return func(...keys.map(key => data[key]));
     }
   }
   catch (ex) {
@@ -581,6 +601,15 @@ function envEval(state, script, data, frame) {
 }
 
 /**
+ * Object.keys() that respects the prototype chain
+ */
+function allKeys(data) {
+  var keys = [];
+  for (var key in data) { keys.push(key); }
+  return keys;
+}
+
+/**
  * A generic way of reporting errors, for easy overloading in different
  * environments.
  * @param message the error message to report.
@@ -599,5 +628,5 @@ function handleError(state, message, ex) {
  * @param message the error message to report.
  */
 function logError(message) {
-  console.log(message);
+  console.error(message);
 }
diff --git a/toolkit/devtools/gcli/commands/addon.js b/toolkit/devtools/gcli/commands/addon.js
index 765f476..b489f03 100644
--- a/toolkit/devtools/gcli/commands/addon.js
+++ b/toolkit/devtools/gcli/commands/addon.js
@@ -4,9 +4,33 @@
 
 "use strict";
 
+/**
+ * You can't require the AddonManager in a child process, but GCLI wants to
+ * check for 'items' in all processes, so we return empty array if the
+ * AddonManager is not available
+ */
+function getAddonManager() {
+  try {
+    return {
+      AddonManager: require("resource://gre/modules/AddonManager.jsm").AddonManager,
+      addonManagerActive: true
+    };
+  }
+  catch (ex) {
+    // Fake up an AddonManager just enough to let the file load
+    return {
+      AddonManager: {
+        getAllAddons() {},
+        getAddonsByTypes() {}
+      },
+      addonManagerActive: false
+    };
+  }
+}
+
 const { Cc, Ci, Cu } = require("chrome");
-const { AddonManager } = Cu.import("resource://gre/modules/AddonManager.jsm", {});
-const gcli = require("gcli/index");
+const { AddonManager, addonManagerActive } = getAddonManager();
+const l10n = require("gcli/l10n");
 const { Promise: promise } = require("resource://gre/modules/Promise.jsm");
 
 const BRAND_SHORT_NAME = Cc["@mozilla.org/intl/stringbundle;1"]
@@ -49,7 +73,7 @@ function pendingOperations(addon) {
   }, []);
 }
 
-exports.items = [
+var items = [
   {
     item: "type",
     name: "addon",
@@ -76,11 +100,11 @@ exports.items = [
   },
   {
     name: "addon",
-    description: gcli.lookup("addonDesc")
+    description: l10n.lookup("addonDesc")
   },
   {
     name: "addon list",
-    description: gcli.lookup("addonListDesc"),
+    description: l10n.lookup("addonListDesc"),
     returnType: "addonsInfo",
     params: [{
       name: "type",
@@ -89,7 +113,7 @@ exports.items = [
         data: [ "dictionary", "extension", "locale", "plugin", "theme", "all" ]
       },
       defaultValue: "all",
-      description: gcli.lookup("addonListTypeDesc")
+      description: l10n.lookup("addonListTypeDesc")
     }],
     exec: function(args, context) {
       let types = (args.type === "all") ? null : [ args.type ];
@@ -114,7 +138,7 @@ exports.items = [
       if (!addonsInfo.addons.length) {
         return context.createView({
           html: "<p>${message}</p>",
-          data: { message: gcli.lookup("addonNoneOfType") }
+          data: { message: l10n.lookup("addonNoneOfType") }
         });
       }
 
@@ -126,7 +150,7 @@ exports.items = [
         "theme": "addonListThemeHeading",
         "all": "addonListAllHeading"
       };
-      let header = gcli.lookup(headerLookups[addonsInfo.type] ||
+      let header = l10n.lookup(headerLookups[addonsInfo.type] ||
                                "addonListUnknownHeading");
 
       let operationLookups = {
@@ -138,7 +162,7 @@ exports.items = [
       };
       function lookupOperation(opName) {
         let lookupName = operationLookups[opName];
-        return lookupName ? gcli.lookup(lookupName) : opName;
+        return lookupName ? l10n.lookup(lookupName) : opName;
       }
 
       function arrangeAddons(addons) {
@@ -193,14 +217,14 @@ exports.items = [
               status: addon.isActive ? "enabled" : "disabled",
               version: addon.version,
               pendingOperations: addon.pendingOperations.length ?
-                (" (" + gcli.lookup("addonPending") + ": "
+                (" (" + l10n.lookup("addonPending") + ": "
                  + addon.pendingOperations.map(lookupOperation).join(", ")
                  + ")") :
                 "",
               toggleActionName: isActiveForToggle(addon) ? "disable": "enable",
               toggleActionMessage: isActiveForToggle(addon) ?
-                gcli.lookup("addonListOutDisable") :
-                gcli.lookup("addonListOutEnable")
+                l10n.lookup("addonListOutDisable") :
+                l10n.lookup("addonListOutEnable")
             };
           }),
           onclick: context.update,
@@ -210,33 +234,37 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "client",
     name: "addon enable",
-    description: gcli.lookup("addonEnableDesc"),
+    description: l10n.lookup("addonEnableDesc"),
     params: [
       {
         name: "addon",
         type: "addon",
-        description: gcli.lookup("addonNameDesc")
+        description: l10n.lookup("addonNameDesc")
       }
     ],
     exec: function(args, context) {
       let name = (args.addon.name + " " + args.addon.version).trim();
       if (args.addon.userDisabled) {
         args.addon.userDisabled = false;
-        return gcli.lookupFormat("addonEnabled", [ name ]);
+        return l10n.lookupFormat("addonEnabled", [ name ]);
       }
 
-      return gcli.lookupFormat("addonAlreadyEnabled", [ name ]);
+      return l10n.lookupFormat("addonAlreadyEnabled", [ name ]);
     }
   },
   {
+    item: "command",
+    runAt: "client",
     name: "addon disable",
-    description: gcli.lookup("addonDisableDesc"),
+    description: l10n.lookup("addonDisableDesc"),
     params: [
       {
         name: "addon",
         type: "addon",
-        description: gcli.lookup("addonNameDesc")
+        description: l10n.lookup("addonNameDesc")
       }
     ],
     exec: function(args, context) {
@@ -247,10 +275,12 @@ exports.items = [
       if (!args.addon.userDisabled ||
           args.addon.userDisabled === AddonManager.STATE_ASK_TO_ACTIVATE) {
         args.addon.userDisabled = true;
-        return gcli.lookupFormat("addonDisabled", [ name ]);
+        return l10n.lookupFormat("addonDisabled", [ name ]);
       }
 
-      return gcli.lookupFormat("addonAlreadyDisabled", [ name ]);
+      return l10n.lookupFormat("addonAlreadyDisabled", [ name ]);
     }
   }
 ];
+
+exports.items = addonManagerActive ? items : [];
diff --git a/toolkit/devtools/gcli/commands/appcache.js b/toolkit/devtools/gcli/commands/appcache.js
index af98663..743bfb3 100644
--- a/toolkit/devtools/gcli/commands/appcache.js
+++ b/toolkit/devtools/gcli/commands/appcache.js
@@ -4,19 +4,22 @@
 
 "use strict";
 
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 
 loader.lazyImporter(this, "AppCacheUtils", "resource:///modules/devtools/AppCacheUtils.jsm");
 
 exports.items = [
   {
+    item: "command",
     name: "appcache",
-    description: gcli.lookup("appCacheDesc")
+    description: l10n.lookup("appCacheDesc")
   },
   {
+    item: "command",
+    runAt: "server",
     name: "appcache validate",
-    description: gcli.lookup("appCacheValidateDesc"),
-    manual: gcli.lookup("appCacheValidateManual"),
+    description: l10n.lookup("appCacheValidateDesc"),
+    manual: l10n.lookup("appCacheValidateManual"),
     returnType: "appcacheerrors",
     params: [{
       group: "options",
@@ -24,7 +27,7 @@ exports.items = [
         {
           type: "string",
           name: "uri",
-          description: gcli.lookup("appCacheValidateUriDesc"),
+          description: l10n.lookup("appCacheValidateUriDesc"),
           defaultValue: null,
         }
       ]
@@ -53,7 +56,7 @@ exports.items = [
     exec: function([errors, manifestURI], context) {
       if (errors.length == 0) {
         return context.createView({
-          html: "<span>" + gcli.lookup("appCacheValidatedSuccessfully") + "</span>"
+          html: "<span>" + l10n.lookup("appCacheValidatedSuccessfully") + "</span>"
         });
       }
 
@@ -73,20 +76,24 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "server",
     name: "appcache clear",
-    description: gcli.lookup("appCacheClearDesc"),
-    manual: gcli.lookup("appCacheClearManual"),
+    description: l10n.lookup("appCacheClearDesc"),
+    manual: l10n.lookup("appCacheClearManual"),
     exec: function(args, context) {
       let utils = new AppCacheUtils(args.uri);
       utils.clearAll();
 
-      return gcli.lookup("appCacheClearCleared");
+      return l10n.lookup("appCacheClearCleared");
     }
   },
   {
+    item: "command",
+    runAt: "server",
     name: "appcache list",
-    description: gcli.lookup("appCacheListDesc"),
-    manual: gcli.lookup("appCacheListManual"),
+    description: l10n.lookup("appCacheListDesc"),
+    manual: l10n.lookup("appCacheListManual"),
     returnType: "appcacheentries",
     params: [{
       group: "options",
@@ -94,7 +101,7 @@ exports.items = [
         {
           type: "string",
           name: "search",
-          description: gcli.lookup("appCacheListSearchDesc"),
+          description: l10n.lookup("appCacheListSearchDesc"),
           defaultValue: null,
         },
       ]
@@ -115,35 +122,35 @@ exports.items = [
           "  <li foreach='entry in ${entries}'>" +
           "    <table class='gcli-appcache-detail'>" +
           "      <tr>" +
-          "        <td>" + gcli.lookup("appCacheListKey") + "</td>" +
+          "        <td>" + l10n.lookup("appCacheListKey") + "</td>" +
           "        <td>${entry.key}</td>" +
           "      </tr>" +
           "      <tr>" +
-          "        <td>" + gcli.lookup("appCacheListFetchCount") + "</td>" +
+          "        <td>" + l10n.lookup("appCacheListFetchCount") + "</td>" +
           "        <td>${entry.fetchCount}</td>" +
           "      </tr>" +
           "      <tr>" +
-          "        <td>" + gcli.lookup("appCacheListLastFetched") + "</td>" +
+          "        <td>" + l10n.lookup("appCacheListLastFetched") + "</td>" +
           "        <td>${entry.lastFetched}</td>" +
           "      </tr>" +
           "      <tr>" +
-          "        <td>" + gcli.lookup("appCacheListLastModified") + "</td>" +
+          "        <td>" + l10n.lookup("appCacheListLastModified") + "</td>" +
           "        <td>${entry.lastModified}</td>" +
           "      </tr>" +
           "      <tr>" +
-          "        <td>" + gcli.lookup("appCacheListExpirationTime") + "</td>" +
+          "        <td>" + l10n.lookup("appCacheListExpirationTime") + "</td>" +
           "        <td>${entry.expirationTime}</td>" +
           "      </tr>" +
           "      <tr>" +
-          "        <td>" + gcli.lookup("appCacheListDataSize") + "</td>" +
+          "        <td>" + l10n.lookup("appCacheListDataSize") + "</td>" +
           "        <td>${entry.dataSize}</td>" +
           "      </tr>" +
           "      <tr>" +
-          "        <td>" + gcli.lookup("appCacheListDeviceID") + "</td>" +
+          "        <td>" + l10n.lookup("appCacheListDeviceID") + "</td>" +
           "        <td>${entry.deviceID} <span class='gcli-out-shortcut' " +
           "onclick='${onclick}' ondblclick='${ondblclick}' " +
           "data-command='appcache viewentry ${entry.key}'" +
-          ">" + gcli.lookup("appCacheListViewEntry") + "</span>" +
+          ">" + l10n.lookup("appCacheListViewEntry") + "</span>" +
           "        </td>" +
           "      </tr>" +
           "    </table>" +
@@ -158,14 +165,16 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "server",
     name: "appcache viewentry",
-    description: gcli.lookup("appCacheViewEntryDesc"),
-    manual: gcli.lookup("appCacheViewEntryManual"),
+    description: l10n.lookup("appCacheViewEntryDesc"),
+    manual: l10n.lookup("appCacheViewEntryManual"),
     params: [
       {
         type: "string",
         name: "key",
-        description: gcli.lookup("appCacheViewEntryKey"),
+        description: l10n.lookup("appCacheViewEntryKey"),
         defaultValue: null,
       }
     ],
diff --git a/toolkit/devtools/gcli/commands/calllog.js b/toolkit/devtools/gcli/commands/calllog.js
index 30c944d..13ffee8 100644
--- a/toolkit/devtools/gcli/commands/calllog.js
+++ b/toolkit/devtools/gcli/commands/calllog.js
@@ -6,6 +6,7 @@
 
 const { Cc, Ci, Cu } = require("chrome");
 const TargetFactory = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools.TargetFactory;
+const l10n = require("gcli/l10n");
 const gcli = require("gcli/index");
 
 loader.lazyImporter(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm");
@@ -24,11 +25,13 @@ let sandboxes = [];
 exports.items = [
   {
     name: "calllog",
-    description: gcli.lookup("calllogDesc")
+    description: l10n.lookup("calllogDesc")
   },
   {
+    item: "command",
+    runAt: "client",
     name: "calllog start",
-    description: gcli.lookup("calllogStartDesc"),
+    description: l10n.lookup("calllogStartDesc"),
 
     exec: function(args, context) {
       let contentWindow = context.environment.window;
@@ -45,7 +48,7 @@ exports.items = [
       let target = TargetFactory.forTab(gBrowser.selectedTab);
       gDevTools.showToolbox(target, "webconsole");
 
-      return gcli.lookup("calllogStartReply");
+      return l10n.lookup("calllogStartReply");
     },
 
     callDescription: function(frame) {
@@ -72,13 +75,15 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "client",
     name: "calllog stop",
-    description: gcli.lookup("calllogStopDesc"),
+    description: l10n.lookup("calllogStopDesc"),
 
     exec: function(args, context) {
       let numDebuggers = debuggers.length;
       if (numDebuggers == 0) {
-        return gcli.lookup("calllogStopNoLogging");
+        return l10n.lookup("calllogStopNoLogging");
       }
 
       for (let dbg of debuggers) {
@@ -86,12 +91,14 @@ exports.items = [
       }
       debuggers = [];
 
-      return gcli.lookupFormat("calllogStopReply", [ numDebuggers ]);
+      return l10n.lookupFormat("calllogStopReply", [ numDebuggers ]);
     }
   },
   {
+    item: "command",
+    runAt: "client",
     name: "calllog chromestart",
-    description: gcli.lookup("calllogChromeStartDesc"),
+    description: l10n.lookup("calllogChromeStartDesc"),
     get hidden() gcli.hiddenByChromePref(),
     params: [
       {
@@ -104,8 +111,8 @@ exports.items = [
       {
         name: "source",
         type: "string",
-        description: gcli.lookup("calllogChromeSourceTypeDesc"),
-        manual: gcli.lookup("calllogChromeSourceTypeManual"),
+        description: l10n.lookup("calllogChromeSourceTypeDesc"),
+        manual: l10n.lookup("calllogChromeSourceTypeManual"),
       }
     ],
     exec: function(args, context) {
@@ -117,20 +124,20 @@ exports.items = [
           globalObj = Cu.import(args.source);
         }
         catch (e) {
-          return gcli.lookup("callLogChromeInvalidJSM");
+          return l10n.lookup("callLogChromeInvalidJSM");
         }
       } else if (args.sourceType == "content-variable") {
         if (args.source in contentWindow) {
           globalObj = Cu.getGlobalForObject(contentWindow[args.source]);
         } else {
-          throw new Error(gcli.lookup("callLogChromeVarNotFoundContent"));
+          throw new Error(l10n.lookup("callLogChromeVarNotFoundContent"));
         }
       } else if (args.sourceType == "chrome-variable") {
         let chromeWin = context.environment.chromeDocument.defaultView;
         if (args.source in chromeWin) {
           globalObj = Cu.getGlobalForObject(chromeWin[args.source]);
         } else {
-          return gcli.lookup("callLogChromeVarNotFoundChrome");
+          return l10n.lookup("callLogChromeVarNotFoundChrome");
         }
       } else {
         let chromeWin = context.environment.chromeDocument.defaultView;
@@ -147,13 +154,13 @@ exports.items = [
         } catch(e) {
           // We need to save the message before cleaning up else e contains a dead
           // object.
-          let msg = gcli.lookup("callLogChromeEvalException") + ": " + e;
+          let msg = l10n.lookup("callLogChromeEvalException") + ": " + e;
           Cu.nukeSandbox(sandbox);
           return msg;
         }
 
         if (typeof returnVal == "undefined") {
-          return gcli.lookup("callLogChromeEvalNeedsObject");
+          return l10n.lookup("callLogChromeEvalNeedsObject");
         }
 
         globalObj = Cu.getGlobalForObject(returnVal);
@@ -164,7 +171,7 @@ exports.items = [
 
       dbg.onEnterFrame = function(frame) {
         // BUG 773652 -  Make the output from the GCLI calllog command nicer
-        contentWindow.console.log(gcli.lookup("callLogChromeMethodCall") +
+        contentWindow.console.log(l10n.lookup("callLogChromeMethodCall") +
                                   ": " + this.callDescription(frame));
       }.bind(this);
 
@@ -172,7 +179,7 @@ exports.items = [
       let target = TargetFactory.forTab(gBrowser.selectedTab);
       gDevTools.showToolbox(target, "webconsole");
 
-      return gcli.lookup("calllogChromeStartReply");
+      return l10n.lookup("calllogChromeStartReply");
     },
 
     valueToString: function(value) {
@@ -182,19 +189,21 @@ exports.items = [
     },
 
     callDescription: function(frame) {
-      let name = frame.callee.name || gcli.lookup("callLogChromeAnonFunction");
+      let name = frame.callee.name || l10n.lookup("callLogChromeAnonFunction");
       let args = frame.arguments.map(this.valueToString).join(", ");
       return name + "(" + args + ")";
     }
   },
   {
+    item: "command",
+    runAt: "client",
     name: "calllog chromestop",
-    description: gcli.lookup("calllogChromeStopDesc"),
+    description: l10n.lookup("calllogChromeStopDesc"),
     get hidden() gcli.hiddenByChromePref(),
     exec: function(args, context) {
       let numDebuggers = chromeDebuggers.length;
       if (numDebuggers == 0) {
-        return gcli.lookup("calllogChromeStopNoLogging");
+        return l10n.lookup("calllogChromeStopNoLogging");
       }
 
       for (let dbg of chromeDebuggers) {
@@ -207,7 +216,7 @@ exports.items = [
       chromeDebuggers = [];
       sandboxes = [];
 
-      return gcli.lookupFormat("calllogChromeStopReply", [ numDebuggers ]);
+      return l10n.lookupFormat("calllogChromeStopReply", [ numDebuggers ]);
     }
   }
 ];
diff --git a/toolkit/devtools/gcli/commands/cmd.js b/toolkit/devtools/gcli/commands/cmd.js
index dfa066e..697a596 100644
--- a/toolkit/devtools/gcli/commands/cmd.js
+++ b/toolkit/devtools/gcli/commands/cmd.js
@@ -11,6 +11,7 @@ const { Promise: promise } = require("resource://gre/modules/Promise.jsm");
 const { OS } = Cu.import("resource://gre/modules/osfile.jsm", {});
 const { TextEncoder, TextDecoder } = Cu.import('resource://gre/modules/commonjs/toolkit/loader.js', {});
 const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 
 loader.lazyGetter(this, "prefBranch", function() {
   let prefService = Cc["@mozilla.org/preferences-service;1"].getService(Ci.nsIPrefService);
@@ -127,11 +128,13 @@ exports.items = [
     get hidden() {
       return !prefBranch.prefHasUserValue(PREF_DIR);
     },
-    description: gcli.lookup("cmdDesc")
+    description: l10n.lookup("cmdDesc")
   },
   {
+    item: "command",
+    runAt: "client",
     name: "cmd refresh",
-    description: gcli.lookup("cmdRefreshDesc"),
+    description: l10n.lookup("cmdRefreshDesc"),
     get hidden() {
       return !prefBranch.prefHasUserValue(PREF_DIR);
     },
@@ -140,17 +143,19 @@ exports.items = [
 
       let dirName = prefBranch.getComplexValue(PREF_DIR,
                                               Ci.nsISupportsString).data.trim();
-      return gcli.lookupFormat("cmdStatus3", [ dirName ]);
+      return l10n.lookupFormat("cmdStatus3", [ dirName ]);
     }
   },
   {
+    item: "command",
+    runAt: "client",
     name: "cmd setdir",
-    description: gcli.lookup("cmdSetdirDesc"),
-    manual: gcli.lookup("cmdSetdirManual2"),
+    description: l10n.lookup("cmdSetdirDesc"),
+    manual: l10n.lookup("cmdSetdirManual2"),
     params: [
       {
         name: "directory",
-        description: gcli.lookup("cmdSetdirDirectoryDesc"),
+        description: l10n.lookup("cmdSetdirDirectoryDesc"),
         type: {
           name: "file",
           filetype: "directory",
@@ -169,7 +174,7 @@ exports.items = [
 
       gcli.load();
 
-      return gcli.lookupFormat("cmdStatus3", [ args.directory ]);
+      return l10n.lookupFormat("cmdStatus3", [ args.directory ]);
     }
   }
 ];
diff --git a/toolkit/devtools/gcli/commands/cookie.js b/toolkit/devtools/gcli/commands/cookie.js
index bcd1718..11efa87 100644
--- a/toolkit/devtools/gcli/commands/cookie.js
+++ b/toolkit/devtools/gcli/commands/cookie.js
@@ -4,9 +4,14 @@
 
 "use strict";
 
-const { Cc, Ci, Cu } = require("chrome");
-const gcli = require("gcli/index");
-const cookieMgr = Cc["@mozilla.org/cookiemanager;1"].getService(Ci.nsICookieManager2);
+const { Ci, Cc } = require("chrome");
+const l10n = require("gcli/l10n");
+const URL = require("sdk/url").URL;
+
+XPCOMUtils.defineLazyGetter(this, "cookieMgr", function() {
+  const { Cc, Ci } = require("chrome");
+  return Cc["@mozilla.org/cookiemanager;1"].getService(Ci.nsICookieManager2);
+});
 
 /**
  * Check host value and remove port part as it is not used
@@ -26,7 +31,7 @@ function sanitizeHost(host) {
  */
 function translateExpires(expires) {
   if (expires == 0) {
-    return gcli.lookup("cookieListOutSession");
+    return l10n.lookup("cookieListOutSession");
   }
   return new Date(expires).toLocaleString();
 }
@@ -49,13 +54,15 @@ function isCookieAtHost(cookie, host) {
 exports.items = [
   {
     name: "cookie",
-    description: gcli.lookup("cookieDesc"),
-    manual: gcli.lookup("cookieManual")
+    description: l10n.lookup("cookieDesc"),
+    manual: l10n.lookup("cookieManual")
   },
   {
+    item: "command",
+    runAt: "server",
     name: "cookie list",
-    description: gcli.lookup("cookieListDesc"),
-    manual: gcli.lookup("cookieListManual"),
+    description: l10n.lookup("cookieListDesc"),
+    manual: l10n.lookup("cookieListManual"),
     returnType: "cookies",
     exec: function(args, context) {
       let host = sanitizeHost(context.environment.document.location.host);
@@ -83,14 +90,16 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "server",
     name: "cookie remove",
-    description: gcli.lookup("cookieRemoveDesc"),
-    manual: gcli.lookup("cookieRemoveManual"),
+    description: l10n.lookup("cookieRemoveDesc"),
+    manual: l10n.lookup("cookieRemoveManual"),
     params: [
       {
         name: "name",
         type: "string",
-        description: gcli.lookup("cookieRemoveKeyDesc"),
+        description: l10n.lookup("cookieRemoveKeyDesc"),
       }
     ],
     exec: function(args, context) {
@@ -114,8 +123,9 @@ exports.items = [
     to: "view",
     exec: function(cookies, context) {
       if (cookies.length == 0) {
-        let host = sanitizeHost(context.environment.document.location.host);
-        let msg = gcli.lookupFormat("cookieListOutNoneHost", [ host ]);
+        let host = new URL(context.environment.target.url).host;
+        host = sanitizeHost(host);
+        let msg = l10n.lookupFormat("cookieListOutNoneHost", [ host ]);
         return context.createView({ html: "<span>" + msg + "</span>" });
       }
 
@@ -126,7 +136,7 @@ exports.items = [
         cookie.attrs = (cookie.secure ? "secure" : " ") +
                        (cookie.httpOnly ? "httpOnly" : " ") +
                        (cookie.sameDomain ? "sameDomain" : " ") +
-                       (noAttrs ? gcli.lookup("cookieListOutNone") : " ");
+                       (noAttrs ? l10n.lookup("cookieListOutNone") : " ");
       }
 
       return context.createView({
@@ -136,29 +146,29 @@ exports.items = [
           "    <div>${cookie.name}=${cookie.value}</div>" +
           "    <table class='gcli-cookielist-detail'>" +
           "      <tr>" +
-          "        <td>" + gcli.lookup("cookieListOutHost") + "</td>" +
+          "        <td>" + l10n.lookup("cookieListOutHost") + "</td>" +
           "        <td>${cookie.host}</td>" +
           "      </tr>" +
           "      <tr>" +
-          "        <td>" + gcli.lookup("cookieListOutPath") + "</td>" +
+          "        <td>" + l10n.lookup("cookieListOutPath") + "</td>" +
           "        <td>${cookie.path}</td>" +
           "      </tr>" +
           "      <tr>" +
-          "        <td>" + gcli.lookup("cookieListOutExpires") + "</td>" +
+          "        <td>" + l10n.lookup("cookieListOutExpires") + "</td>" +
           "        <td>${cookie.expires}</td>" +
           "      </tr>" +
           "      <tr>" +
-          "        <td>" + gcli.lookup("cookieListOutAttributes") + "</td>" +
+          "        <td>" + l10n.lookup("cookieListOutAttributes") + "</td>" +
           "        <td>${cookie.attrs}</td>" +
           "      </tr>" +
           "      <tr><td colspan='2'>" +
           "        <span class='gcli-out-shortcut' onclick='${onclick}'" +
           "            data-command='cookie set ${cookie.name} '" +
-          "            >" + gcli.lookup("cookieListOutEdit") + "</span>" +
+          "            >" + l10n.lookup("cookieListOutEdit") + "</span>" +
           "        <span class='gcli-out-shortcut'" +
           "            onclick='${onclick}' ondblclick='${ondblclick}'" +
           "            data-command='cookie remove ${cookie.name}'" +
-          "            >" + gcli.lookup("cookieListOutRemove") + "</span>" +
+          "            >" + l10n.lookup("cookieListOutRemove") + "</span>" +
           "      </td></tr>" +
           "    </table>" +
           "  </li>" +
@@ -173,55 +183,57 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "server",
     name: "cookie set",
-    description: gcli.lookup("cookieSetDesc"),
-    manual: gcli.lookup("cookieSetManual"),
+    description: l10n.lookup("cookieSetDesc"),
+    manual: l10n.lookup("cookieSetManual"),
     params: [
       {
         name: "name",
         type: "string",
-        description: gcli.lookup("cookieSetKeyDesc")
+        description: l10n.lookup("cookieSetKeyDesc")
       },
       {
         name: "value",
         type: "string",
-        description: gcli.lookup("cookieSetValueDesc")
+        description: l10n.lookup("cookieSetValueDesc")
       },
       {
-        group: gcli.lookup("cookieSetOptionsDesc"),
+        group: l10n.lookup("cookieSetOptionsDesc"),
         params: [
           {
             name: "path",
             type: { name: "string", allowBlank: true },
             defaultValue: "/",
-            description: gcli.lookup("cookieSetPathDesc")
+            description: l10n.lookup("cookieSetPathDesc")
           },
           {
             name: "domain",
             type: "string",
             defaultValue: null,
-            description: gcli.lookup("cookieSetDomainDesc")
+            description: l10n.lookup("cookieSetDomainDesc")
           },
           {
             name: "secure",
             type: "boolean",
-            description: gcli.lookup("cookieSetSecureDesc")
+            description: l10n.lookup("cookieSetSecureDesc")
           },
           {
             name: "httpOnly",
             type: "boolean",
-            description: gcli.lookup("cookieSetHttpOnlyDesc")
+            description: l10n.lookup("cookieSetHttpOnlyDesc")
           },
           {
             name: "session",
             type: "boolean",
-            description: gcli.lookup("cookieSetSessionDesc")
+            description: l10n.lookup("cookieSetSessionDesc")
           },
           {
             name: "expires",
             type: "string",
             defaultValue: "Jan 17, 2038",
-            description: gcli.lookup("cookieSetExpiresDesc")
+            description: l10n.lookup("cookieSetExpiresDesc")
           },
         ]
       }
diff --git a/toolkit/devtools/gcli/commands/csscoverage.js b/toolkit/devtools/gcli/commands/csscoverage.js
index 7ef8387..00ffa61 100644
--- a/toolkit/devtools/gcli/commands/csscoverage.js
+++ b/toolkit/devtools/gcli/commands/csscoverage.js
@@ -6,7 +6,8 @@
 
 const { Cc, Ci } = require("chrome");
 
-const { gDevTools } = require("resource:///modules/devtools/gDevTools.jsm");
+loader.lazyGetter(this, "gDevTools", () => require("resource:///modules/devtools/gDevTools.jsm").gDevTools);
+
 const promise = require("resource://gre/modules/Promise.jsm").Promise;
 
 const domtemplate = require("gcli/util/domtemplate");
@@ -27,6 +28,8 @@ exports.items = [
     description: l10n.lookup("csscoverageDesc"),
   },
   {
+    item: "command",
+    runAt: "client",
     name: "csscoverage start",
     hidden: true,
     description: l10n.lookup("csscoverageStartDesc2"),
@@ -48,6 +51,8 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "client",
     name: "csscoverage stop",
     hidden: true,
     description: l10n.lookup("csscoverageStopDesc2"),
@@ -62,6 +67,8 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "client",
     name: "csscoverage oneshot",
     hidden: true,
     description: l10n.lookup("csscoverageOneShotDesc2"),
@@ -76,6 +83,8 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "client",
     name: "csscoverage toggle",
     hidden: true,
     description: l10n.lookup("csscoverageToggleDesc2"),
@@ -110,6 +119,8 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "client",
     name: "csscoverage report",
     hidden: true,
     description: l10n.lookup("csscoverageReportDesc2"),
diff --git a/toolkit/devtools/gcli/commands/folder.js b/toolkit/devtools/gcli/commands/folder.js
index cef0d81..e120b9b 100644
--- a/toolkit/devtools/gcli/commands/folder.js
+++ b/toolkit/devtools/gcli/commands/folder.js
@@ -6,7 +6,7 @@
 
 const { Cc, Ci, Cu, CC } = require("chrome");
 const { Services } = require("resource://gre/modules/Services.jsm");
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 const dirService = Cc["@mozilla.org/file/directory_service;1"]
                       .getService(Ci.nsIProperties);
 
@@ -19,29 +19,31 @@ function showFolder(aPath) {
 
     if (file.exists()) {
       file.reveal();
-      return gcli.lookupFormat("folderOpenDirResult", [aPath]);
+      return l10n.lookupFormat("folderOpenDirResult", [aPath]);
     } else {
-      return gcli.lookup("folderInvalidPath");
+      return l10n.lookup("folderInvalidPath");
     }
   } catch (e) {
-    return gcli.lookup("folderInvalidPath");
+    return l10n.lookup("folderInvalidPath");
   }
 }
 
 exports.items = [
   {
     name: "folder",
-    description: gcli.lookup("folderDesc")
+    description: l10n.lookup("folderDesc")
   },
   {
+    item: "command",
+    runAt: "client",
     name: "folder open",
-    description: gcli.lookup("folderOpenDesc"),
+    description: l10n.lookup("folderOpenDesc"),
     params: [
       {
         name: "path",
         type: { name: "string", allowBlank: true },
         defaultValue: "~",
-        description: gcli.lookup("folderOpenDir")
+        description: l10n.lookup("folderOpenDir")
       }
     ],
     returnType: "string",
@@ -60,8 +62,10 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "client",
     name: "folder openprofile",
-    description: gcli.lookup("folderOpenProfileDesc"),
+    description: l10n.lookup("folderOpenProfileDesc"),
     returnType: "string",
     exec: function(args, context) {
       // Get the profile directory.
diff --git a/toolkit/devtools/gcli/commands/highlight.js b/toolkit/devtools/gcli/commands/highlight.js
index 716b9d8..b1d94e4 100644
--- a/toolkit/devtools/gcli/commands/highlight.js
+++ b/toolkit/devtools/gcli/commands/highlight.js
@@ -5,7 +5,7 @@
 "use strict";
 
 const {Cc, Ci, Cu} = require("chrome");
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 require("devtools/server/actors/inspector");
 const {BoxModelHighlighter} = require("devtools/server/actors/highlighter");
 
@@ -13,6 +13,7 @@ XPCOMUtils.defineLazyGetter(this, "nodesSelected", function() {
   return Services.strings.createBundle("chrome://browser/locale/devtools/gclicommands.properties");
 });
 XPCOMUtils.defineLazyModuleGetter(this, "PluralForm","resource://gre/modules/PluralForm.jsm");
+const events = require("sdk/event/core");
 
 // How many maximum nodes can be highlighted in parallel
 const MAX_HIGHLIGHTED_ELEMENTS = 100;
@@ -34,36 +35,38 @@ function unhighlightAll() {
 
 exports.items = [
   {
+    item: "command",
+    runAt: "server",
     name: "highlight",
-    description: gcli.lookup("highlightDesc"),
-    manual: gcli.lookup("highlightManual"),
+    description: l10n.lookup("highlightDesc"),
+    manual: l10n.lookup("highlightManual"),
     params: [
       {
         name: "selector",
         type: "nodelist",
-        description: gcli.lookup("highlightSelectorDesc"),
-        manual: gcli.lookup("highlightSelectorManual")
+        description: l10n.lookup("highlightSelectorDesc"),
+        manual: l10n.lookup("highlightSelectorManual")
       },
       {
-        group: gcli.lookup("highlightOptionsDesc"),
+        group: l10n.lookup("highlightOptionsDesc"),
         params: [
           {
             name: "hideguides",
             type: "boolean",
-            description: gcli.lookup("highlightHideGuidesDesc"),
-            manual: gcli.lookup("highlightHideGuidesManual")
+            description: l10n.lookup("highlightHideGuidesDesc"),
+            manual: l10n.lookup("highlightHideGuidesManual")
           },
           {
             name: "showinfobar",
             type: "boolean",
-            description: gcli.lookup("highlightShowInfoBarDesc"),
-            manual: gcli.lookup("highlightShowInfoBarManual")
+            description: l10n.lookup("highlightShowInfoBarDesc"),
+            manual: l10n.lookup("highlightShowInfoBarManual")
           },
           {
             name: "showall",
             type: "boolean",
-            description: gcli.lookup("highlightShowAllDesc"),
-            manual: gcli.lookup("highlightShowAllManual")
+            description: l10n.lookup("highlightShowAllDesc"),
+            manual: l10n.lookup("highlightShowAllManual")
           },
           {
             name: "region",
@@ -71,22 +74,22 @@ exports.items = [
               name: "selection",
               data: ["content", "padding", "border", "margin"]
             },
-            description: gcli.lookup("highlightRegionDesc"),
-            manual: gcli.lookup("highlightRegionManual"),
+            description: l10n.lookup("highlightRegionDesc"),
+            manual: l10n.lookup("highlightRegionManual"),
             defaultValue: "border"
           },
           {
             name: "fill",
             type: "string",
-            description: gcli.lookup("highlightFillDesc"),
-            manual: gcli.lookup("highlightFillManual"),
+            description: l10n.lookup("highlightFillDesc"),
+            manual: l10n.lookup("highlightFillManual"),
             defaultValue: null
           },
           {
             name: "keep",
             type: "boolean",
-            description: gcli.lookup("highlightKeepDesc"),
-            manual: gcli.lookup("highlightKeepManual"),
+            description: l10n.lookup("highlightKeepDesc"),
+            manual: l10n.lookup("highlightKeepManual"),
           }
         ]
       }
@@ -100,14 +103,8 @@ exports.items = [
       let env = context.environment;
 
       // Unhighlight on navigate
-      env.target.once("navigate", unhighlightAll);
-
-      // Build a tab context for the highlighter (which normally takes a
-      // TabActor as parameter to its constructor)
-      let tabContext = {
-        browser: env.chromeWindow.gBrowser.getBrowserForDocument(env.document),
-        window: env.window
-      };
+      // TODO: I changed from navigate to will-navigate. Is that right?
+      events.on(env.tabActor, "will-navigate", unhighlightAll);
 
       let i = 0;
       for (let node of args.selector) {
@@ -115,7 +112,7 @@ exports.items = [
           break;
         }
 
-        let highlighter = new BoxModelHighlighter(tabContext);
+        let highlighter = new BoxModelHighlighter(env.tabActor);
         if (args.fill) {
           highlighter.regionFill[args.region] = args.fill;
         }
@@ -133,7 +130,7 @@ exports.items = [
       let output = PluralForm.get(args.selector.length, highlightText)
                              .replace("%1$S", args.selector.length);
       if (args.selector.length > i) {
-        output = gcli.lookupFormat("highlightOutputMaxReached",
+        output = l10n.lookupFormat("highlightOutputMaxReached",
           ["" + args.selector.length, "" + i]);
       }
 
@@ -141,9 +138,11 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "server",
     name: "unhighlight",
-    description: gcli.lookup("unhighlightDesc"),
-    manual: gcli.lookup("unhighlightManual"),
+    description: l10n.lookup("unhighlightDesc"),
+    manual: l10n.lookup("unhighlightManual"),
     exec: unhighlightAll
   }
 ];
diff --git a/toolkit/devtools/gcli/commands/inject.js b/toolkit/devtools/gcli/commands/inject.js
index 5f79b7b..75ac998 100644
--- a/toolkit/devtools/gcli/commands/inject.js
+++ b/toolkit/devtools/gcli/commands/inject.js
@@ -6,13 +6,15 @@
 
 const { Services } = require("resource://gre/modules/Services.jsm");
 const { listenOnce } = require("devtools/async-utils");
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 
 exports.items = [
   {
+    item: "command",
+    runAt: "server",
     name: "inject",
-    description: gcli.lookup("injectDesc"),
-    manual: gcli.lookup("injectManual2"),
+    description: l10n.lookup("injectDesc"),
+    manual: l10n.lookup("injectManual2"),
     params: [{
       name: "library",
       type: {
@@ -49,7 +51,7 @@ exports.items = [
           }
         ]
       },
-      description: gcli.lookup("injectLibraryDesc")
+      description: l10n.lookup("injectLibraryDesc")
     }],
     exec: function*(args, context) {
       let document = context.environment.document;
@@ -67,7 +69,7 @@ exports.items = [
         // Check if URI is valid
         Services.io.newURI(src, null, null);
       } catch(e) {
-        return gcli.lookupFormat("injectFailed", [name]);
+        return l10n.lookupFormat("injectFailed", [name]);
       }
 
       let newSource = document.createElement("script");
@@ -78,7 +80,7 @@ exports.items = [
 
       yield loadPromise;
 
-      return gcli.lookupFormat("injectLoaded", [name]);
+      return l10n.lookupFormat("injectLoaded", [name]);
     }
   }
 ];
diff --git a/toolkit/devtools/gcli/commands/jsb.js b/toolkit/devtools/gcli/commands/jsb.js
index f5409a0..2fbb6b6 100644
--- a/toolkit/devtools/gcli/commands/jsb.js
+++ b/toolkit/devtools/gcli/commands/jsb.js
@@ -5,7 +5,7 @@
 "use strict";
 
 const { Cc, Ci, Cu } = require("chrome");
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 const XMLHttpRequest = Cc["@mozilla.org/xmlextras/xmlhttprequest;1"];
 const { devtools } = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
 
@@ -15,23 +15,25 @@ devtools.lazyRequireGetter(this, "beautify", "devtools/jsbeautify");
 
 exports.items = [
   {
+    item: "command",
+    runAt: "client",
     name: "jsb",
-    description: gcli.lookup("jsbDesc"),
+    description: l10n.lookup("jsbDesc"),
     returnValue:"string",
     params: [
       {
         name: "url",
         type: "string",
-        description: gcli.lookup("jsbUrlDesc")
+        description: l10n.lookup("jsbUrlDesc")
       },
       {
-        group: gcli.lookup("jsbOptionsDesc"),
+        group: l10n.lookup("jsbOptionsDesc"),
         params: [
           {
             name: "indentSize",
             type: "number",
-            description: gcli.lookup("jsbIndentSizeDesc"),
-            manual: gcli.lookup("jsbIndentSizeManual"),
+            description: l10n.lookup("jsbIndentSizeDesc"),
+            manual: l10n.lookup("jsbIndentSizeManual"),
             defaultValue: Preferences.get("devtools.editor.tabsize", 2),
           },
           {
@@ -43,27 +45,27 @@ exports.items = [
                 { name: "tab", value: "\t" }
               ]
             },
-            description: gcli.lookup("jsbIndentCharDesc"),
-            manual: gcli.lookup("jsbIndentCharManual"),
+            description: l10n.lookup("jsbIndentCharDesc"),
+            manual: l10n.lookup("jsbIndentCharManual"),
             defaultValue: " ",
           },
           {
             name: "doNotPreserveNewlines",
             type: "boolean",
-            description: gcli.lookup("jsbDoNotPreserveNewlinesDesc")
+            description: l10n.lookup("jsbDoNotPreserveNewlinesDesc")
           },
           {
             name: "preserveMaxNewlines",
             type: "number",
-            description: gcli.lookup("jsbPreserveMaxNewlinesDesc"),
-            manual: gcli.lookup("jsbPreserveMaxNewlinesManual"),
+            description: l10n.lookup("jsbPreserveMaxNewlinesDesc"),
+            manual: l10n.lookup("jsbPreserveMaxNewlinesManual"),
             defaultValue: -1
           },
           {
             name: "jslintHappy",
             type: "boolean",
-            description: gcli.lookup("jsbJslintHappyDesc"),
-            manual: gcli.lookup("jsbJslintHappyManual")
+            description: l10n.lookup("jsbJslintHappyDesc"),
+            manual: l10n.lookup("jsbJslintHappyManual")
           },
           {
             name: "braceStyle",
@@ -71,20 +73,20 @@ exports.items = [
               name: "selection",
               data: ["collapse", "expand", "end-expand", "expand-strict"]
             },
-            description: gcli.lookup("jsbBraceStyleDesc2"),
-            manual: gcli.lookup("jsbBraceStyleManual2"),
+            description: l10n.lookup("jsbBraceStyleDesc2"),
+            manual: l10n.lookup("jsbBraceStyleManual2"),
             defaultValue: "collapse"
           },
           {
             name: "noSpaceBeforeConditional",
             type: "boolean",
-            description: gcli.lookup("jsbNoSpaceBeforeConditionalDesc")
+            description: l10n.lookup("jsbNoSpaceBeforeConditionalDesc")
           },
           {
             name: "unescapeStrings",
             type: "boolean",
-            description: gcli.lookup("jsbUnescapeStringsDesc"),
-            manual: gcli.lookup("jsbUnescapeStringsManual")
+            description: l10n.lookup("jsbUnescapeStringsDesc"),
+            manual: l10n.lookup("jsbUnescapeStringsManual")
           }
         ]
       }
@@ -107,12 +109,12 @@ exports.items = [
       try {
         xhr.open("GET", args.url, true);
       } catch(e) {
-        return gcli.lookup("jsbInvalidURL");
+        return l10n.lookup("jsbInvalidURL");
       }
 
       let deferred = context.defer();
 
-      xhr.onreadystatechange = function(aEvt) {
+      xhr.onreadystatechange = function() {
         if (xhr.readyState == 4) {
           if (xhr.status == 200 || xhr.status == 0) {
             let browserDoc = context.environment.chromeDocument;
@@ -124,8 +126,8 @@ exports.items = [
 
             deferred.resolve();
           } else {
-            deferred.resolve("Unable to load page to beautify: " + args.url + " " +
-                             xhr.status + " " + xhr.statusText);
+            deferred.reject("Unable to load page to beautify: " + args.url + " " +
+                            xhr.status + " " + xhr.statusText);
           }
         };
       }
diff --git a/toolkit/devtools/gcli/commands/listen.js b/toolkit/devtools/gcli/commands/listen.js
index e9bfdf2..f17c720 100644
--- a/toolkit/devtools/gcli/commands/listen.js
+++ b/toolkit/devtools/gcli/commands/listen.js
@@ -6,7 +6,7 @@
 
 const { Cc, Ci, Cu } = require("chrome");
 const Services = require("Services");
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 const { XPCOMUtils } = require("resource://gre/modules/XPCOMUtils.jsm");
 XPCOMUtils.defineLazyModuleGetter(this, "DevToolsLoader",
   "resource://gre/modules/devtools/Loader.jsm");
@@ -34,9 +34,11 @@ XPCOMUtils.defineLazyGetter(this, "debuggerServer", () => {
 
 exports.items = [
   {
+    item: "command",
+    runAt: "client",
     name: "listen",
-    description: gcli.lookup("listenDesc"),
-    manual: gcli.lookupFormat("listenManual2", [ BRAND_SHORT_NAME ]),
+    description: l10n.lookup("listenDesc"),
+    manual: l10n.lookupFormat("listenManual2", [ BRAND_SHORT_NAME ]),
     params: [
       {
         name: "port",
@@ -44,23 +46,23 @@ exports.items = [
         get defaultValue() {
           return Services.prefs.getIntPref("devtools.debugger.chrome-debugging-port");
         },
-        description: gcli.lookup("listenPortDesc"),
+        description: l10n.lookup("listenPortDesc"),
       }
     ],
     exec: function(args, context) {
       var listener = debuggerServer.createListener();
       if (!listener) {
-        throw new Error(gcli.lookup("listenDisabledOutput"));
+        throw new Error(l10n.lookup("listenDisabledOutput"));
       }
 
       listener.portOrPath = args.port;
       listener.open();
 
       if (debuggerServer.initialized) {
-        return gcli.lookupFormat("listenInitOutput", [ "" + args.port ]);
+        return l10n.lookupFormat("listenInitOutput", [ "" + args.port ]);
       }
 
-      return gcli.lookup("listenNoInitOutput");
+      return l10n.lookup("listenNoInitOutput");
     },
   }
 ];
diff --git a/toolkit/devtools/gcli/commands/media.js b/toolkit/devtools/gcli/commands/media.js
index 04b8d2a..f5d7efe 100644
--- a/toolkit/devtools/gcli/commands/media.js
+++ b/toolkit/devtools/gcli/commands/media.js
@@ -4,21 +4,23 @@
 
 "use strict";
 
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 
 exports.items = [
   {
     name: "media",
-    description: gcli.lookup("mediaDesc")
+    description: l10n.lookup("mediaDesc")
   },
   {
+    item: "command",
+    runAt: "client",
     name: "media emulate",
-    description: gcli.lookup("mediaEmulateDesc"),
-    manual: gcli.lookup("mediaEmulateManual"),
+    description: l10n.lookup("mediaEmulateDesc"),
+    manual: l10n.lookup("mediaEmulateManual"),
     params: [
       {
         name: "type",
-        description: gcli.lookup("mediaEmulateType"),
+        description: l10n.lookup("mediaEmulateType"),
         type: {
            name: "selection",
            data: [
@@ -35,8 +37,10 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "client",
     name: "media reset",
-    description: gcli.lookup("mediaResetDesc"),
+    description: l10n.lookup("mediaResetDesc"),
     exec: function(args, context) {
       let markupDocumentViewer = context.environment.chromeWindow
                                         .gBrowser.markupDocumentViewer;
diff --git a/toolkit/devtools/gcli/commands/pagemod.js b/toolkit/devtools/gcli/commands/pagemod.js
index 8f3e2897..184ab1e 100644
--- a/toolkit/devtools/gcli/commands/pagemod.js
+++ b/toolkit/devtools/gcli/commands/pagemod.js
@@ -5,58 +5,60 @@
 "use strict";
 
 const { Cc, Ci, Cu } = require("chrome");
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 
 exports.items = [
   {
     name: "pagemod",
-    description: gcli.lookup("pagemodDesc"),
+    description: l10n.lookup("pagemodDesc"),
   },
   {
+    item: "command",
+    runAt: "server",
     name: "pagemod replace",
-    description: gcli.lookup("pagemodReplaceDesc"),
+    description: l10n.lookup("pagemodReplaceDesc"),
     params: [
       {
         name: "search",
         type: "string",
-        description: gcli.lookup("pagemodReplaceSearchDesc"),
+        description: l10n.lookup("pagemodReplaceSearchDesc"),
       },
       {
         name: "replace",
         type: "string",
-        description: gcli.lookup("pagemodReplaceReplaceDesc"),
+        description: l10n.lookup("pagemodReplaceReplaceDesc"),
       },
       {
         name: "ignoreCase",
         type: "boolean",
-        description: gcli.lookup("pagemodReplaceIgnoreCaseDesc"),
+        description: l10n.lookup("pagemodReplaceIgnoreCaseDesc"),
       },
       {
         name: "selector",
         type: "string",
-        description: gcli.lookup("pagemodReplaceSelectorDesc"),
+        description: l10n.lookup("pagemodReplaceSelectorDesc"),
         defaultValue: "*:not(script):not(style):not(embed):not(object):not(frame):not(iframe):not(frameset)",
       },
       {
         name: "root",
         type: "node",
-        description: gcli.lookup("pagemodReplaceRootDesc"),
+        description: l10n.lookup("pagemodReplaceRootDesc"),
         defaultValue: null,
       },
       {
         name: "attrOnly",
         type: "boolean",
-        description: gcli.lookup("pagemodReplaceAttrOnlyDesc"),
+        description: l10n.lookup("pagemodReplaceAttrOnlyDesc"),
       },
       {
         name: "contentOnly",
         type: "boolean",
-        description: gcli.lookup("pagemodReplaceContentOnlyDesc"),
+        description: l10n.lookup("pagemodReplaceContentOnlyDesc"),
       },
       {
         name: "attributes",
         type: "string",
-        description: gcli.lookup("pagemodReplaceAttributesDesc"),
+        description: l10n.lookup("pagemodReplaceAttributesDesc"),
         defaultValue: null,
       },
     ],
@@ -114,39 +116,41 @@ exports.items = [
         }
       }
 
-      return gcli.lookupFormat("pagemodReplaceResult",
+      return l10n.lookupFormat("pagemodReplaceResult",
                               [elements.length, replacedTextNodes,
                                 replacedAttributes]);
     }
   },
   {
     name: "pagemod remove",
-    description: gcli.lookup("pagemodRemoveDesc"),
+    description: l10n.lookup("pagemodRemoveDesc"),
   },
   {
+    item: "command",
+    runAt: "server",
     name: "pagemod remove element",
-    description: gcli.lookup("pagemodRemoveElementDesc"),
+    description: l10n.lookup("pagemodRemoveElementDesc"),
     params: [
       {
         name: "search",
         type: "string",
-        description: gcli.lookup("pagemodRemoveElementSearchDesc"),
+        description: l10n.lookup("pagemodRemoveElementSearchDesc"),
       },
       {
         name: "root",
         type: "node",
-        description: gcli.lookup("pagemodRemoveElementRootDesc"),
+        description: l10n.lookup("pagemodRemoveElementRootDesc"),
         defaultValue: null,
       },
       {
         name: "stripOnly",
         type: "boolean",
-        description: gcli.lookup("pagemodRemoveElementStripOnlyDesc"),
+        description: l10n.lookup("pagemodRemoveElementStripOnlyDesc"),
       },
       {
         name: "ifEmptyOnly",
         type: "boolean",
-        description: gcli.lookup("pagemodRemoveElementIfEmptyOnlyDesc"),
+        description: l10n.lookup("pagemodRemoveElementIfEmptyOnlyDesc"),
       },
     ],
     exec: function(args, context) {
@@ -171,34 +175,36 @@ exports.items = [
         }
       }
 
-      return gcli.lookupFormat("pagemodRemoveElementResultMatchedAndRemovedElements",
+      return l10n.lookupFormat("pagemodRemoveElementResultMatchedAndRemovedElements",
                               [elements.length, removed]);
     }
   },
   {
+    item: "command",
+    runAt: "server",
     name: "pagemod remove attribute",
-    description: gcli.lookup("pagemodRemoveAttributeDesc"),
+    description: l10n.lookup("pagemodRemoveAttributeDesc"),
     params: [
       {
         name: "searchAttributes",
         type: "string",
-        description: gcli.lookup("pagemodRemoveAttributeSearchAttributesDesc"),
+        description: l10n.lookup("pagemodRemoveAttributeSearchAttributesDesc"),
       },
       {
         name: "searchElements",
         type: "string",
-        description: gcli.lookup("pagemodRemoveAttributeSearchElementsDesc"),
+        description: l10n.lookup("pagemodRemoveAttributeSearchElementsDesc"),
       },
       {
         name: "root",
         type: "node",
-        description: gcli.lookup("pagemodRemoveAttributeRootDesc"),
+        description: l10n.lookup("pagemodRemoveAttributeRootDesc"),
         defaultValue: null,
       },
       {
         name: "ignoreCase",
         type: "boolean",
-        description: gcli.lookup("pagemodRemoveAttributeIgnoreCaseDesc"),
+        description: l10n.lookup("pagemodRemoveAttributeIgnoreCaseDesc"),
       },
     ],
     exec: function(args, context) {
@@ -225,18 +231,20 @@ exports.items = [
         }
       }
 
-      return gcli.lookupFormat("pagemodRemoveAttributeResult",
+      return l10n.lookupFormat("pagemodRemoveAttributeResult",
                               [elements.length, removed]);
     }
   },
   // This command allows the user to export the page to HTML after DOM changes
   {
     name: "export",
-    description: gcli.lookup("exportDesc"),
+    description: l10n.lookup("exportDesc"),
   },
   {
+    item: "command",
+    runAt: "server",
     name: "export html",
-    description: gcli.lookup("exportHtmlDesc"),
+    description: l10n.lookup("exportHtmlDesc"),
     params: [
       {
         name: "destination",
diff --git a/toolkit/devtools/gcli/commands/paintflashing.js b/toolkit/devtools/gcli/commands/paintflashing.js
index 6ed86d6..e42f5af 100644
--- a/toolkit/devtools/gcli/commands/paintflashing.js
+++ b/toolkit/devtools/gcli/commands/paintflashing.js
@@ -14,6 +14,7 @@ const EventEmitter = require("devtools/toolkit/event-emitter");
 const eventEmitter = new EventEmitter();
 
 const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 
 function onPaintFlashingChanged(context) {
   let tab = context.environment.chromeWindow.gBrowser.selectedTab;
@@ -40,12 +41,14 @@ function onPaintFlashingChanged(context) {
 exports.items = [
   {
     name: "paintflashing",
-    description: gcli.lookup("paintflashingDesc")
+    description: l10n.lookup("paintflashingDesc")
   },
   {
+    item: "command",
+    runAt: "server",
     name: "paintflashing on",
-    description: gcli.lookup("paintflashingOnDesc"),
-    manual: gcli.lookup("paintflashingManual"),
+    description: l10n.lookup("paintflashingOnDesc"),
+    manual: l10n.lookup("paintflashingManual"),
     params: [{
       group: "options",
       params: [
@@ -53,7 +56,7 @@ exports.items = [
           type: "boolean",
           name: "chrome",
           get hidden() gcli.hiddenByChromePref(),
-          description: gcli.lookup("paintflashingChromeDesc"),
+          description: l10n.lookup("paintflashingChromeDesc"),
         }
       ]
     }],
@@ -69,9 +72,11 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "server",
     name: "paintflashing off",
-    description: gcli.lookup("paintflashingOffDesc"),
-    manual: gcli.lookup("paintflashingManual"),
+    description: l10n.lookup("paintflashingOffDesc"),
+    manual: l10n.lookup("paintflashingManual"),
     params: [{
       group: "options",
       params: [
@@ -79,7 +84,7 @@ exports.items = [
           type: "boolean",
           name: "chrome",
           get hidden() gcli.hiddenByChromePref(),
-          description: gcli.lookup("paintflashingChromeDesc"),
+          description: l10n.lookup("paintflashingChromeDesc"),
         }
       ]
     }],
@@ -95,6 +100,8 @@ exports.items = [
     }
   },
   {
+    item: "command",
+    runAt: "server",
     name: "paintflashing toggle",
     hidden: true,
     buttonId: "command-button-paintflashing",
@@ -121,9 +128,9 @@ exports.items = [
         eventEmitter.off("changed", aChangeHandler);
       },
     },
-    tooltipText: gcli.lookup("paintflashingTooltip"),
-    description: gcli.lookup("paintflashingToggleDesc"),
-    manual: gcli.lookup("paintflashingManual"),
+    tooltipText: l10n.lookup("paintflashingTooltip"),
+    description: l10n.lookup("paintflashingToggleDesc"),
+    manual: l10n.lookup("paintflashingManual"),
     exec: function(args, context) {
       let window = context.environment.window;
       let wUtils = window.QueryInterface(Ci.nsIInterfaceRequestor).
diff --git a/toolkit/devtools/gcli/commands/restart.js b/toolkit/devtools/gcli/commands/restart.js
index 1871dff..fb8985f 100644
--- a/toolkit/devtools/gcli/commands/restart.js
+++ b/toolkit/devtools/gcli/commands/restart.js
@@ -5,7 +5,7 @@
 "use strict";
 
 const { Cc, Ci, Cu } = require("chrome");
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 const Services = require("Services");
 
 const BRAND_SHORT_NAME = Cc["@mozilla.org/intl/stringbundle;1"]
@@ -27,13 +27,15 @@ const BRAND_SHORT_NAME = Cc["@mozilla.org/intl/stringbundle;1"]
  */
 exports.items = [
   {
+    item: "command",
+    runAt: "client",
     name: "restart",
-    description: gcli.lookupFormat("restartBrowserDesc", [ BRAND_SHORT_NAME ]),
+    description: l10n.lookupFormat("restartBrowserDesc", [ BRAND_SHORT_NAME ]),
     params: [
       {
         name: "nocache",
         type: "boolean",
-        description: gcli.lookup("restartBrowserNocacheDesc")
+        description: l10n.lookup("restartBrowserNocacheDesc")
       }
     ],
     returnType: "string",
@@ -42,7 +44,7 @@ exports.items = [
                       .createInstance(Ci.nsISupportsPRBool);
       Services.obs.notifyObservers(canceled, "quit-application-requested", "restart");
       if (canceled.data) {
-        return gcli.lookup("restartBrowserRequestCancelled");
+        return l10n.lookup("restartBrowserRequestCancelled");
       }
 
       // disable loading content from cache.
@@ -54,7 +56,7 @@ exports.items = [
       Cc["@mozilla.org/toolkit/app-startup;1"]
           .getService(Ci.nsIAppStartup)
           .quit(Ci.nsIAppStartup.eAttemptQuit | Ci.nsIAppStartup.eRestart);
-      return gcli.lookupFormat("restartBrowserRestarting", [ BRAND_SHORT_NAME ]);
+      return l10n.lookupFormat("restartBrowserRestarting", [ BRAND_SHORT_NAME ]);
     }
   }
 ];
diff --git a/toolkit/devtools/gcli/commands/screenshot.js b/toolkit/devtools/gcli/commands/screenshot.js
index 202f69d..1ec9fa3 100644
--- a/toolkit/devtools/gcli/commands/screenshot.js
+++ b/toolkit/devtools/gcli/commands/screenshot.js
@@ -5,7 +5,8 @@
 "use strict";
 
 const { Cc, Ci, Cu } = require("chrome");
-const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
+const { Services } = require("resource://gre/modules/Services.jsm");
 
 loader.lazyImporter(this, "Downloads", "resource://gre/modules/Downloads.jsm");
 loader.lazyImporter(this, "LayoutHelpers", "resource://gre/modules/devtools/LayoutHelpers.jsm");
@@ -23,55 +24,128 @@ const FILENAME_DEFAULT_VALUE = " ";
 
 exports.items = [
   {
+    /**
+     * Format an 'imageSummary' (as output by the screenshot command).
+     * An 'imageSummary' is a simple JSON object that looks like this:
+     *
+     * {
+     *   destinations: [ "..." ], // Required array of descriptions of the
+     *                            // locations of the result image (the command
+     *                            // can have multiple outputs)
+     *   data: "...",             // Optional Base64 encoded image data
+     *   width:1024, height:768,  // Dimensions of the image data, required
+     *                            // if data != null
+     *   filename: "...",         // If set, clicking the image will open the
+     *                            // folder containing the given file
+     *   href: "...",             // If set, clicking the image will open the
+     *                            // link in a new tab
+     * }
+     */
+    item: "converter",
+    from: "imageSummary",
+    to: "dom",
+    exec: function(imageSummary, context) {
+      const document = context.document;
+      const root = document.createElement("div");
+
+      // Add a line to the result for each destination
+      imageSummary.destinations.forEach(destination => {
+        const title = document.createElement("div");
+        title.textContent = destination;
+        root.appendChild(title);
+      });
+
+      // Add the thumbnail image
+      if (imageSummary.data != null) {
+        const image = context.document.createElement("div");
+        const previewHeight = parseInt(256 * imageSummary.height / imageSummary.width);
+        const style = "" +
+            "width: 256px;" +
+            "height: " + previewHeight + "px;" +
+            "max-height: 256px;" +
+            "background-image: url('" + imageSummary.data + "');" +
+            "background-size: 256px " + previewHeight + "px;" +
+            "margin: 4px;" +
+            "display: block;";
+        image.setAttribute("style", style);
+        root.appendChild(image);
+      }
+
+      // Click handler
+      if (imageSummary.filename) {
+        root.style.cursor = "pointer";
+        root.addEventListener("click", () => {
+          if (imageSummary.filename) {
+            const file = Cc["@mozilla.org/file/local;1"].createInstance(Ci.nsILocalFile);
+            file.initWithPath(imageSummary.filename);
+            file.reveal();
+          }
+        });
+      }
+
+      return root;
+    }
+  },
+  {
+    item: "command",
+    runAt: "server",
     name: "screenshot",
-    description: gcli.lookup("screenshotDesc"),
-    manual: gcli.lookup("screenshotManual"),
-    returnType: "dom",
+    description: l10n.lookup("screenshotDesc"),
+    manual: l10n.lookup("screenshotManual"),
+    returnType: "imageSummary",
     buttonId: "command-button-screenshot",
     buttonClass: "command-button command-button-invertable",
-    tooltipText: gcli.lookup("screenshotTooltip"),
+    tooltipText: l10n.lookup("screenshotTooltip"),
     params: [
       {
         name: "filename",
         type: "string",
         defaultValue: FILENAME_DEFAULT_VALUE,
-        description: gcli.lookup("screenshotFilenameDesc"),
-        manual: gcli.lookup("screenshotFilenameManual")
+        description: l10n.lookup("screenshotFilenameDesc"),
+        manual: l10n.lookup("screenshotFilenameManual")
       },
       {
-        group: gcli.lookup("screenshotGroupOptions"),
+        group: l10n.lookup("screenshotGroupOptions"),
         params: [
           {
             name: "clipboard",
+            hidden: true, // Hidden because it fails with 
+            type: "boolean",
+            description: l10n.lookup("screenshotClipboardDesc"),
+            manual: l10n.lookup("screenshotClipboardManual")
+          },
+          {
+            name: "imgur",
+            hidden: true, // Hidden because it fails with "Could not reach imgur API"
             type: "boolean",
-            description: gcli.lookup("screenshotClipboardDesc"),
-            manual: gcli.lookup("screenshotClipboardManual")
+            description: l10n.lookup("screenshotImgurDesc"),
+            manual: l10n.lookup("screenshotImgurManual")
           },
           {
             name: "chrome",
             type: "boolean",
-            description: gcli.lookupFormat("screenshotChromeDesc2", [BRAND_SHORT_NAME]),
-            manual: gcli.lookupFormat("screenshotChromeManual2", [BRAND_SHORT_NAME])
+            description: l10n.lookupFormat("screenshotChromeDesc2", [BRAND_SHORT_NAME]),
+            manual: l10n.lookupFormat("screenshotChromeManual2", [BRAND_SHORT_NAME])
           },
           {
             name: "delay",
             type: { name: "number", min: 0 },
             defaultValue: 0,
-            description: gcli.lookup("screenshotDelayDesc"),
-            manual: gcli.lookup("screenshotDelayManual")
+            description: l10n.lookup("screenshotDelayDesc"),
+            manual: l10n.lookup("screenshotDelayManual")
           },
           {
             name: "fullpage",
             type: "boolean",
-            description: gcli.lookup("screenshotFullPageDesc"),
-            manual: gcli.lookup("screenshotFullPageManual")
+            description: l10n.lookup("screenshotFullPageDesc"),
+            manual: l10n.lookup("screenshotFullPageManual")
           },
           {
             name: "selector",
             type: "node",
             defaultValue: null,
-            description: gcli.lookup("inspectNodeDesc"),
-            manual: gcli.lookup("inspectNodeManual")
+            description: l10n.lookup("inspectNodeDesc"),
+            manual: l10n.lookup("inspectNodeManual")
           }
         ]
       }
@@ -81,181 +155,266 @@ exports.items = [
         // Node screenshot with chrome option does not work as intended
         // Refer https://bugzilla.mozilla.org/show_bug.cgi?id=659268#c7
         // throwing for now.
-        throw new Error(gcli.lookup("screenshotSelectorChromeConflict"));
+        throw new Error(l10n.lookup("screenshotSelectorChromeConflict"));
       }
-      var document = args.chrome? context.environment.chromeDocument
-                                : context.environment.document;
+
       if (args.delay > 0) {
-        var deferred = context.defer();
-        document.defaultView.setTimeout(() => {
-          this.grabScreen(document, args.filename, args.clipboard,
-                          args.fullpage).then(deferred.resolve, deferred.reject);
-        }, args.delay * 1000);
-        return deferred.promise;
+        return new Promise((resolve, reject) => {
+          document.defaultView.setTimeout(() => {
+            this.execInternal(args, context).then(resolve, reject);
+          }, args.delay * 1000);
+        });
       }
+      else {
+        return this.execInternal(args, context);
+      }
+    },
+
+    /**
+     * This is just like exec, except the 'delay' has been handled already so
+     * this is where we do that actual work of process the screenshot
+     */
+    execInternal: function(args, context) {
+      const document = args.chrome ? context.environment.chromeDocument
+                                   : context.environment.document;
+
+      const reply = this.createScreenshotData(args, document);
 
-      return this.grabScreen(document, args.filename, args.clipboard,
-                             args.fullpage, args.selector);
+      const loadContext = document.defaultView
+                                .QueryInterface(Ci.nsIInterfaceRequestor)
+                                .getInterface(Ci.nsIWebNavigation)
+                                .QueryInterface(Ci.nsILoadContext);
+
+      return Promise.all([
+        this.maybeSaveToClipboard(args, loadContext, reply),
+        this.maybeUploadToImgur(args, reply),
+        Task.spawn(() => this.maybeSaveToFile(args, loadContext, reply)),
+      ]).then(() => reply);
     },
-    grabScreen: function(document, filename, clipboard, fullpage, node) {
-      return Task.spawn(function() {
-        let window = document.defaultView;
-        let canvas = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
-        let left = 0;
-        let top = 0;
-        let width;
-        let height;
-        let div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
-        let currentX = window.scrollX;
-        let currentY = window.scrollY;
-
-        if (fullpage) {
-          // Bug 961832: GCLI screenshot shows fixed position element in wrong
-          // position if we don't scroll to top
-          window.scrollTo(0,0);
-          width = window.innerWidth + window.scrollMaxX;
-          height = window.innerHeight + window.scrollMaxY;
-        } else if (node) {
-          let lh = new LayoutHelpers(window);
-          let rect = lh.getRect(node, window);
-          top = rect.top;
-          left = rect.left;
-          width = rect.width;
-          height = rect.height;
-        } else {
-          left = window.scrollX;
-          top = window.scrollY;
-          width = window.innerWidth;
-          height = window.innerHeight;
-        }
 
-        let winUtils = window.QueryInterface(Ci.nsIInterfaceRequestor)
-                             .getInterface(Ci.nsIDOMWindowUtils);
-        let scrollbarHeight = {};
-        let scrollbarWidth = {};
-        winUtils.getScrollbarSize(false, scrollbarWidth, scrollbarHeight);
-        width -= scrollbarWidth.value;
-        height -= scrollbarHeight.value;
-
-        canvas.width = width;
-        canvas.height = height;
-        let ctx = canvas.getContext("2d");
-        ctx.drawWindow(window, left, top, width, height, "#fff");
-        let data = canvas.toDataURL("image/png", "");
-
-        if(fullpage) {
-          window.scrollTo(currentX, currentY);
+    /**
+     * This does the dirty work of creating a base64 string out of an
+     * area of the browser window
+     */
+    createScreenshotData: function(args, document) {
+      const window = document.defaultView;
+      let left = 0;
+      let top = 0;
+      let width;
+      let height;
+      const currentX = window.scrollX;
+      const currentY = window.scrollY;
+
+      if (args.fullpage) {
+        // Bug 961832: GCLI screenshot shows fixed position element in wrong
+        // position if we don't scroll to top
+        window.scrollTo(0,0);
+        width = window.innerWidth + window.scrollMaxX;
+        height = window.innerHeight + window.scrollMaxY;
+      }
+      else if (args.selector) {
+        const lh = new LayoutHelpers(window);
+        ({ top, left, width, height }) = lh.getRect(args.selector, window);
+      }
+      else {
+        left = window.scrollX;
+        top = window.scrollY;
+        width = window.innerWidth;
+        height = window.innerHeight;
+      }
+
+      const winUtils = window.QueryInterface(Ci.nsIInterfaceRequestor)
+                           .getInterface(Ci.nsIDOMWindowUtils);
+      const scrollbarHeight = {};
+      const scrollbarWidth = {};
+      winUtils.getScrollbarSize(false, scrollbarWidth, scrollbarHeight);
+      width -= scrollbarWidth.value;
+      height -= scrollbarHeight.value;
+
+      const canvas = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
+      canvas.width = width;
+      canvas.height = height;
+      const ctx = canvas.getContext("2d");
+      ctx.drawWindow(window, left, top, width, height, "#fff");
+      const data = canvas.toDataURL("image/png", "");
+
+      // See comment above on bug 961832
+      if (args.fullpage) {
+        window.scrollTo(currentX, currentY);
+      }
+
+      return {
+        destinations: [],
+        data: data,
+        height: height,
+        width: width,
+        filename: this.getFilename(args),
+      };
+    },
+
+    /**
+     * We may have a filename specified in args, or we might have to generate
+     * one.
+     */
+    getFilename: function(args) {
+      // Create a name for the file if not present
+      if (args.filename != FILENAME_DEFAULT_VALUE) {
+        return args.filename;
+      }
+
+      const date = new Date();
+      let dateString = date.getFullYear() + "-" + (date.getMonth() + 1) +
+                      "-" + date.getDate();
+      dateString = dateString.split("-").map(function(part) {
+        if (part.length == 1) {
+          part = "0" + part;
         }
+        return part;
+      }).join("-");
+
+      const timeString = date.toTimeString().replace(/:/g, ".").split(" ")[0];
+      return l10n.lookupFormat("screenshotGeneratedFilename",
+                               [ dateString, timeString ]) + ".png";
+    },
 
-        let loadContext = document.defaultView
-                                  .QueryInterface(Ci.nsIInterfaceRequestor)
-                                  .getInterface(Ci.nsIWebNavigation)
-                                  .QueryInterface(Ci.nsILoadContext);
+    /**
+     * Save the image data to the clipboard. This returns a promise, so it can
+     * be treated exactly like imgur / file processing, but it's really sync
+     * for now.
+     */
+    maybeSaveToClipboard: function(args, loadContext, reply) {
+      if (!args.clipboard) {
+        return Promise.resolve();
+      }
 
-        if (clipboard) {
-          try {
-            let io = Cc["@mozilla.org/network/io-service;1"]
+      try {
+        const io = Cc["@mozilla.org/network/io-service;1"]
                       .getService(Ci.nsIIOService);
-            let channel = io.newChannel2(data,
-                                         null,
-                                         null,
-                                         null,      // aLoadingNode
-                                         Services.scriptSecurityManager.getSystemPrincipal(),
-                                         null,      // aTriggeringPrincipal
-                                         Ci.nsILoadInfo.SEC_NORMAL,
-                                         Ci.nsIContentPolicy.TYPE_IMAGE);
-            let input = channel.open();
-            let imgTools = Cc["@mozilla.org/image/tools;1"]
+        const channel = io.newChannel2(reply.data, null, null,
+                                       null,      // aLoadingNode
+                                       Services.scriptSecurityManager.getSystemPrincipal(),
+                                       null,      // aTriggeringPrincipal
+                                       Ci.nsILoadInfo.SEC_NORMAL,
+                                       Ci.nsIContentPolicy.TYPE_IMAGE);
+        const input = channel.open();
+        const imgTools = Cc["@mozilla.org/image/tools;1"]
                             .getService(Ci.imgITools);
 
-            let container = {};
-            imgTools.decodeImageData(input, channel.contentType, container);
+        const container = {};
+        imgTools.decodeImageData(input, channel.contentType, container);
 
-            let wrapped = Cc["@mozilla.org/supports-interface-pointer;1"]
-                            .createInstance(Ci.nsISupportsInterfacePointer);
-            wrapped.data = container.value;
+        const wrapped = Cc["@mozilla.org/supports-interface-pointer;1"]
+                          .createInstance(Ci.nsISupportsInterfacePointer);
+        wrapped.data = container.value;
 
-            let trans = Cc["@mozilla.org/widget/transferable;1"]
-                          .createInstance(Ci.nsITransferable);
-            trans.init(loadContext);
-            trans.addDataFlavor(channel.contentType);
-            trans.setTransferData(channel.contentType, wrapped, -1);
+        const trans = Cc["@mozilla.org/widget/transferable;1"]
+                        .createInstance(Ci.nsITransferable);
+        trans.init(loadContext);
+        trans.addDataFlavor(channel.contentType);
+        trans.setTransferData(channel.contentType, wrapped, -1);
 
-            let clipid = Ci.nsIClipboard;
-            let clip = Cc["@mozilla.org/widget/clipboard;1"].getService(clipid);
-            clip.setData(trans, null, clipid.kGlobalClipboard);
-            div.textContent = gcli.lookup("screenshotCopied");
-          }
-          catch (ex) {
-            div.textContent = gcli.lookup("screenshotErrorCopying");
-          }
-          throw new Task.Result(div);
-        }
+        const clip = Cc["@mozilla.org/widget/clipboard;1"]
+                        .getService(Ci.nsIClipboard);
+        clip.setData(trans, null, Ci.nsIClipboard.kGlobalClipboard);
+
+        reply.destinations.push(l10n.lookup("screenshotCopied"));
+      }
+      catch (ex) {
+        console.error(ex);
+        reply.destinations.push(l10n.lookup("screenshotErrorCopying"));
+      }
+
+      return Promise.resolve();
+    },
+
+    /**
+     * Upload screenshot data to Imgur if requested, returning a promise of a
+     * URL (as a string)
+     */
+    maybeUploadToImgur: function(args, reply) {
+      if (!args.imgur) {
+        return Promise.resolve();
+      }
 
-        let file = Cc["@mozilla.org/file/local;1"].createInstance(Ci.nsILocalFile);
+      return new Promise((resolve, reject) => {
+        const xhr = Cc["@mozilla.org/xmlextras/xmlhttprequest;1"]
+                      .createInstance(Ci.nsIXMLHttpRequest);
+        const fd = Cc["@mozilla.org/files/formdata;1"]
+                      .createInstance(Ci.nsIDOMFormData);
+        fd.append("image", reply.data.split(",")[1]);
+        fd.append("type", "base64");
+        fd.append("title", reply.filename);
 
-        // Create a name for the file if not present
-        if (filename == FILENAME_DEFAULT_VALUE) {
-          let date = new Date();
-          let dateString = date.getFullYear() + "-" + (date.getMonth() + 1) +
-                          "-" + date.getDate();
-          dateString = dateString.split("-").map(function(part) {
-            if (part.length == 1) {
-              part = "0" + part;
+        const postURL = Services.prefs.getCharPref("devtools.gcli.imgurUploadURL");
+        const clientID = "Client-ID " + Services.prefs.getCharPref("devtools.gcli.imgurClientID");
+
+        xhr.open("POST", postURL);
+        xhr.setRequestHeader("Authorization", clientID);
+        xhr.send(fd);
+        xhr.responseType = "json";
+
+        xhr.onreadystatechange = function() {
+          if (xhr.readyState == 4) {
+            if (xhr.status == 200) {
+              reply.href = xhr.response.data.link;
+              reply.destinations.push(l10n.lookupFormat("screenshotImgurError",
+                                                        [ reply.href ]));
             }
-            return part;
-          }).join("-");
-          let timeString = date.toTimeString().replace(/:/g, ".").split(" ")[0];
-          filename = gcli.lookupFormat("screenshotGeneratedFilename",
-                                      [dateString, timeString]) + ".png";
+            else {
+              reply.destinations.push(l10n.lookup("screenshotImgurError"));
+            }
+
+            resolve();
+          }
         }
+      });
+    },
+
+    /**
+     * Save the screenshot data to disk if needed, returning a promise which
+     * is resolved on completion
+     */
+    maybeSaveToFile: function*(args, loadContext, reply) {
+      if (args.filename == FILENAME_DEFAULT_VALUE &&
+          (args.imgur || args.clipboard)) {
+        return Promise.resolve();
+      }
+
+      try {
+        let filename = reply.filename;
         // Check there is a .png extension to filename
-        else if (!filename.match(/.png$/i)) {
+        if (!filename.match(/.png$/i)) {
           filename += ".png";
         }
+
         // If the filename is relative, tack it onto the download directory
         if (!filename.match(/[\\\/]/)) {
-          let preferredDir = yield Downloads.getPreferredDownloadsDirectory();
+          const preferredDir = yield Downloads.getPreferredDownloadsDirectory();
           filename = OS.Path.join(preferredDir, filename);
         }
 
-        try {
-          file.initWithPath(filename);
-        } catch (ex) {
-          div.textContent = gcli.lookup("screenshotErrorSavingToFile") + " " + filename;
-          throw new Task.Result(div);
-        }
+        const file = Cc["@mozilla.org/file/local;1"].createInstance(Ci.nsILocalFile);
+        file.initWithPath(filename);
 
-        let ioService = Cc["@mozilla.org/network/io-service;1"]
+        const ioService = Cc["@mozilla.org/network/io-service;1"]
                           .getService(Ci.nsIIOService);
 
-        let Persist = Ci.nsIWebBrowserPersist;
-        let persist = Cc["@mozilla.org/embedding/browser/nsWebBrowserPersist;1"]
+        const Persist = Ci.nsIWebBrowserPersist;
+        const persist = Cc["@mozilla.org/embedding/browser/nsWebBrowserPersist;1"]
                         .createInstance(Persist);
         persist.persistFlags = Persist.PERSIST_FLAGS_REPLACE_EXISTING_FILES |
                                Persist.PERSIST_FLAGS_AUTODETECT_APPLY_CONVERSION;
 
-        let source = ioService.newURI(data, "UTF8", null);
+        // TODO: UTF8? For an image?
+        const source = ioService.newURI(reply.data, "UTF8", null);
         persist.saveURI(source, null, null, 0, null, null, file, loadContext);
 
-        div.textContent = gcli.lookup("screenshotSavedToFile") + " \"" + filename +
-                          "\"";
-        div.addEventListener("click", function openFile() {
-          div.removeEventListener("click", openFile);
-          file.reveal();
-        });
-        div.style.cursor = "pointer";
-        let image = document.createElement("div");
-        let previewHeight = parseInt(256*height/width);
-        image.setAttribute("style",
-                          "width:256px; height:" + previewHeight + "px;" +
-                          "max-height: 256px;" +
-                          "background-image: url('" + data + "');" +
-                          "background-size: 256px " + previewHeight + "px;" +
-                          "margin: 4px; display: block");
-        div.appendChild(image);
-        throw new Task.Result(div);
-      });
+        reply.destinations.push(l10n.lookup("screenshotSavedToFile") + " \"" + filename + "\"");
+      }
+      catch (ex) {
+        console.error(ex);
+        reply.destinations.push(l10n.lookup("screenshotErrorSavingToFile") + " " + filename);
+      }
     }
   }
 ];
diff --git a/toolkit/devtools/gcli/commands/tools.js b/toolkit/devtools/gcli/commands/tools.js
index 641e1ca..dc9fc56 100644
--- a/toolkit/devtools/gcli/commands/tools.js
+++ b/toolkit/devtools/gcli/commands/tools.js
@@ -9,6 +9,7 @@ const Services = require("Services");
 const { OS } = require("resource://gre/modules/osfile.jsm");
 const { devtools } = require("resource://gre/modules/devtools/Loader.jsm");
 const gcli = require("gcli/index");
+const l10n = require("gcli/l10n");
 
 const BRAND_SHORT_NAME = Cc["@mozilla.org/intl/stringbundle;1"]
                            .getService(Ci.nsIStringBundleService)
@@ -18,14 +19,16 @@ const BRAND_SHORT_NAME = Cc["@mozilla.org/intl/stringbundle;1"]
 exports.items = [
   {
     name: "tools",
-    description: gcli.lookupFormat("toolsDesc2", [ BRAND_SHORT_NAME ]),
-    manual: gcli.lookupFormat("toolsManual2", [ BRAND_SHORT_NAME ]),
+    description: l10n.lookupFormat("toolsDesc2", [ BRAND_SHORT_NAME ]),
+    manual: l10n.lookupFormat("toolsManual2", [ BRAND_SHORT_NAME ]),
     get hidden() gcli.hiddenByChromePref(),
   },
   {
+    item: "command",
+    runAt: "client",
     name: "tools srcdir",
-    description: gcli.lookup("toolsSrcdirDesc"),
-    manual: gcli.lookupFormat("toolsSrcdirManual2", [ BRAND_SHORT_NAME ]),
+    description: l10n.lookup("toolsSrcdirDesc"),
+    manual: l10n.lookupFormat("toolsSrcdirManual2", [ BRAND_SHORT_NAME ]),
     get hidden() gcli.hiddenByChromePref(),
     params: [
       {
@@ -35,7 +38,7 @@ exports.items = [
           filetype: "directory",
           existing: "yes"
         } */,
-        description: gcli.lookup("toolsSrcdirDir")
+        description: l10n.lookup("toolsSrcdirDir")
       }
     ],
     returnType: "string",
@@ -50,29 +53,33 @@ exports.items = [
                                          Ci.nsISupportsString, str);
           devtools.reload();
 
-          let msg = gcli.lookupFormat("toolsSrcdirReloaded", [ args.srcdir ]);
+          let msg = l10n.lookupFormat("toolsSrcdirReloaded", [ args.srcdir ]);
           throw new Error(msg);
         }
 
-        return gcli.lookupFormat("toolsSrcdirNotFound", [ args.srcdir ]);
+        return l10n.lookupFormat("toolsSrcdirNotFound", [ args.srcdir ]);
       });
     }
   },
   {
+    item: "command",
+    runAt: "client",
     name: "tools builtin",
-    description: gcli.lookup("toolsBuiltinDesc"),
-    manual: gcli.lookup("toolsBuiltinManual"),
+    description: l10n.lookup("toolsBuiltinDesc"),
+    manual: l10n.lookup("toolsBuiltinManual"),
     get hidden() gcli.hiddenByChromePref(),
     returnType: "string",
     exec: function(args, context) {
       Services.prefs.clearUserPref("devtools.loader.srcdir");
       devtools.reload();
-      return gcli.lookup("toolsBuiltinReloaded");
+      return l10n.lookup("toolsBuiltinReloaded");
     }
   },
   {
+    item: "command",
+    runAt: "client",
     name: "tools reload",
-    description: gcli.lookup("toolsReloadDesc"),
+    description: l10n.lookup("toolsReloadDesc"),
     get hidden() {
       return gcli.hiddenByChromePref() ||
              !Services.prefs.prefHasUserValue("devtools.loader.srcdir");
@@ -81,7 +88,7 @@ exports.items = [
     returnType: "string",
     exec: function(args, context) {
       devtools.reload();
-      return gcli.lookup("toolsReloaded2");
+      return l10n.lookup("toolsReloaded2");
     }
   }
 ];
diff --git a/toolkit/devtools/gcli/moz.build b/toolkit/devtools/gcli/moz.build
index a2359d3..9ada6ee 100644
--- a/toolkit/devtools/gcli/moz.build
+++ b/toolkit/devtools/gcli/moz.build
@@ -42,10 +42,6 @@ EXTRA_JS_MODULES.devtools.gcli.commands += [
 
 EXTRA_JS_MODULES.devtools.gcli.connectors += [
     'source/lib/gcli/connectors/connectors.js',
-    'source/lib/gcli/connectors/index.js',
-    'source/lib/gcli/connectors/protocol.js',
-    'source/lib/gcli/connectors/rdp.js',
-    'source/lib/gcli/connectors/remoted.js',
 ]
 
 EXTRA_JS_MODULES.devtools.gcli.converters += [
@@ -119,11 +115,11 @@ EXTRA_JS_MODULES.devtools.gcli.util += [
 ]
 
 EXTRA_JS_MODULES.devtools.gcli += [
-    'source/lib/gcli/api.js',
     'source/lib/gcli/cli.js',
     'source/lib/gcli/index.js',
     'source/lib/gcli/l10n.js',
     'source/lib/gcli/settings.js',
+    'source/lib/gcli/system.js',
 ]
 
 EXTRA_JS_MODULES.devtools += [
diff --git a/toolkit/devtools/gcli/source/docs/writing-commands.md b/toolkit/devtools/gcli/source/docs/writing-commands.md
index 8edcf3a..e8acaa5 100644
--- a/toolkit/devtools/gcli/source/docs/writing-commands.md
+++ b/toolkit/devtools/gcli/source/docs/writing-commands.md
@@ -89,7 +89,8 @@ depends on what context you are writing your command for.
 GCLI supports Mozilla style localization. To add a command that will only ever
 be used embedded in Firefox, this is the way to go. Your strings should be
 stored in ``browser/locales/en-US/chrome/browser/devtools/gclicommands.properties``,
-And you should access them using ``gcli.lookup(...)`` or ``gcli.lookupFormat()``
+And you should access them using ``let l10n = require("gcli/l10n")`` and then
+``l10n.lookup(...)`` or ``l10n.lookupFormat()``
 
 For examples of existing commands, take a look in
 ``browser/devtools/webconsole/GcliCommands.jsm``, which contains most of the
diff --git a/toolkit/devtools/gcli/source/docs/writing-types.md b/toolkit/devtools/gcli/source/docs/writing-types.md
index 4779edc..ed2f754 100644
--- a/toolkit/devtools/gcli/source/docs/writing-types.md
+++ b/toolkit/devtools/gcli/source/docs/writing-types.md
@@ -7,7 +7,7 @@ number of built in types:
 
 * string. This is a JavaScript string
 * number. A JavaScript number
-* boolean. A Javascript boolean
+* boolean. A JavaScript boolean
 * selection. This is an selection from a number of alternatives
 * delegate. This type could change depending on other factors, but is well
   defined when one of the conversion routines is called.
@@ -49,10 +49,10 @@ All types must inherit from Type and have the following methods:
      */
     name: 'example',
 
-In addition, defining the following functions can be helpful, although Type
+In addition, defining the following function can be helpful, although Type
 contains default implementations:
-* increment(value)
-* decrement(value)
+
+* nudge(value, by)
 
 Type, Conversion and Status are all declared by commands.js.
 
diff --git a/toolkit/devtools/gcli/source/lib/gcli/api.js b/toolkit/devtools/gcli/source/lib/gcli/api.js
deleted file mode 100644
index c2d0f71..0000000
--- a/toolkit/devtools/gcli/source/lib/gcli/api.js
+++ /dev/null
@@ -1,217 +0,0 @@
-/*
- * Copyright 2012, Mozilla Foundation and contributors
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-'use strict';
-
-var Promise = require('./util/promise').Promise;
-var Commands = require('./commands/commands').Commands;
-var Connectors = require('./connectors/connectors').Connectors;
-var Converters = require('./converters/converters').Converters;
-var Fields = require('./fields/fields').Fields;
-var Languages = require('./languages/languages').Languages;
-var Settings = require('./settings').Settings;
-var Types = require('./types/types').Types;
-
-/**
- * This is the heart of the API that we expose to the outside
- */
-exports.createSystem = function() {
-
-  var components = {
-    connector: new Connectors(),
-    converter: new Converters(),
-    field: new Fields(),
-    language: new Languages(),
-    type: new Types()
-  };
-  components.setting = new Settings(components.type);
-  components.command = new Commands(components.type);
-
-  var getItemType = function(item) {
-    if (item.item) {
-      return item.item;
-    }
-    // Some items are registered using the constructor so we need to check
-    // the prototype for the the type of the item
-    return (item.prototype && item.prototype.item) ?
-           item.prototype.item : 'command';
-  };
-
-  var addItem = function(item) {
-    components[getItemType(item)].add(item);
-  };
-
-  var removeItem = function(item) {
-    components[getItemType(item)].remove(item);
-  };
-
-  /**
-   * loadableModules is a lookup of names to module loader functions (like
-   * the venerable 'require') to which we can pass a name and get back a
-   * JS object (or a promise of a JS object). This allows us to have custom
-   * loaders to get stuff from the filesystem etc.
-   */
-  var loadableModules = {};
-
-  /**
-   * loadedModules is a lookup by name of the things returned by the functions
-   * in loadableModules so we can track what we need to unload / reload.
-   */
-  var loadedModules = {};
-
-  var unloadModule = function(name) {
-    var existingModule = loadedModules[name];
-    if (existingModule != null) {
-      existingModule.items.forEach(removeItem);
-    }
-    delete loadedModules[name];
-  };
-
-  var loadModule = function(name) {
-    var existingModule = loadedModules[name];
-    unloadModule(name);
-
-    // And load the new items
-    try {
-      var loader = loadableModules[name];
-      return Promise.resolve(loader(name)).then(function(newModule) {
-        if (existingModule === newModule) {
-          return;
-        }
-
-        if (newModule == null) {
-          throw 'Module \'' + name + '\' not found';
-        }
-
-        if (newModule.items == null || typeof newModule.items.forEach !== 'function') {
-          console.log('Exported properties: ' + Object.keys(newModule).join(', '));
-          throw 'Module \'' + name + '\' has no \'items\' array export';
-        }
-
-        newModule.items.forEach(addItem);
-
-        loadedModules[name] = newModule;
-      });
-    }
-    catch (ex) {
-      console.error(ex);
-      return Promise.reject('Failure when loading \'' + name + '\'');
-    }
-  };
-
-  var pendingChanges = false;
-
-  var api = {
-    addItems: function(items) {
-      items.forEach(addItem);
-    },
-
-    removeItems: function(items) {
-      items.forEach(removeItem);
-    },
-
-    addItemsByModule: function(names, options) {
-      options = options || {};
-      if (typeof names === 'string') {
-        names = [ names ];
-      }
-      names.forEach(function(name) {
-        if (options.loader == null) {
-          options.loader = function(name) {
-            return require(name);
-          };
-        }
-        loadableModules[name] = options.loader;
-
-        if (options.delayedLoad) {
-          pendingChanges = true;
-        }
-        else {
-          loadModule(name).then(null, console.error);
-        }
-      });
-    },
-
-    removeItemsByModule: function(name) {
-      delete loadableModules[name];
-      unloadModule(name);
-    },
-
-    load: function() {
-      if (!pendingChanges) {
-        return Promise.resolve();
-      }
-
-      // clone loadedModules, so we can remove what is left at the end
-      var modules = Object.keys(loadedModules).map(function(name) {
-        return loadedModules[name];
-      });
-
-      var promises = Object.keys(loadableModules).map(function(name) {
-        delete modules[name];
-        return loadModule(name);
-      });
-
-      Object.keys(modules).forEach(unloadModule);
-      pendingChanges = false;
-
-      return Promise.all(promises);
-    }
-  };
-
-  Object.defineProperty(api, 'commands', {
-    get: function() { return components.command; },
-    set: function(commands) { components.command = commands; },
-    enumerable: true
-  });
-
-  Object.defineProperty(api, 'connectors', {
-    get: function() { return components.connector; },
-    enumerable: true
-  });
-
-  Object.defineProperty(api, 'converters', {
-    get: function() { return components.converter; },
-    enumerable: true
-  });
-
-  Object.defineProperty(api, 'fields', {
-    get: function() { return components.field; },
-    enumerable: true
-  });
-
-  Object.defineProperty(api, 'languages', {
-    get: function() { return components.language; },
-    enumerable: true
-  });
-
-  Object.defineProperty(api, 'settings', {
-    get: function() { return components.setting; },
-    enumerable: true
-  });
-
-  Object.defineProperty(api, 'types', {
-    get: function() { return components.type; },
-    set: function(types) {
-      components.type = types;
-      components.command.types = types;
-      components.setting.types = types;
-    },
-    enumerable: true
-  });
-
-  return api;
-};
diff --git a/toolkit/devtools/gcli/source/lib/gcli/cli.js b/toolkit/devtools/gcli/source/lib/gcli/cli.js
index d00a437..1827f4c 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/cli.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/cli.js
@@ -101,16 +101,6 @@ var removeMapping = function(requisition) {
 };
 
 /**
- * Some manual intervention is needed in parsing the { command.
- */
-function getEvalCommand(commands) {
-  if (getEvalCommand._cmd == null) {
-    getEvalCommand._cmd = commands.get(evalCmd.name);
-  }
-  return getEvalCommand._cmd;
-}
-
-/**
  * Assignment is a link between a parameter and the data for that parameter.
  * The data for the parameter is available as in the preferred type and as
  * an Argument for the CLI.
@@ -318,7 +308,7 @@ var evalCmd = {
     var reply = customEval(args.javascript);
     return context.typedData(typeof reply, reply);
   },
-  isCommandRegexp: /^\s*{\s*/
+  isCommandRegexp: /^\s*\{\s*/
 };
 
 exports.items = [ evalCmd ];
@@ -669,7 +659,7 @@ Requisition.prototype.getParameterNames = function() {
  * this is still an error status.
  */
 Object.defineProperty(Requisition.prototype, 'status', {
-  get : function() {
+  get: function() {
     var status = Status.VALID;
     if (this._unassigned.length !== 0) {
       var isAllIncomplete = true;
@@ -704,7 +694,8 @@ Object.defineProperty(Requisition.prototype, 'status', {
  */
 Requisition.prototype.getStatusMessage = function() {
   if (this.commandAssignment.getStatus() !== Status.VALID) {
-    return l10n.lookup('cliUnknownCommand');
+    return l10n.lookupFormat('cliUnknownCommand2',
+                             [ this.commandAssignment.arg.text ]);
   }
 
   var assignments = this.getAssignments();
@@ -1455,26 +1446,9 @@ Requisition.prototype.complete = function(cursor, rank) {
 /**
  * Replace the current value with the lower value if such a concept exists.
  */
-Requisition.prototype.decrement = function(assignment) {
+Requisition.prototype.nudge = function(assignment, by) {
   var ctx = this.executionContext;
-  var val = assignment.param.type.decrement(assignment.value, ctx);
-  return Promise.resolve(val).then(function(replacement) {
-    if (replacement != null) {
-      var val = assignment.param.type.stringify(replacement, ctx);
-      return Promise.resolve(val).then(function(str) {
-        var arg = assignment.arg.beget({ text: str });
-        return this.setAssignment(assignment, arg);
-      }.bind(this));
-    }
-  }.bind(this));
-};
-
-/**
- * Replace the current value with the higher value if such a concept exists.
- */
-Requisition.prototype.increment = function(assignment) {
-  var ctx = this.executionContext;
-  var val = assignment.param.type.increment(assignment.value, ctx);
+  var val = assignment.param.type.nudge(assignment.value, by, ctx);
   return Promise.resolve(val).then(function(replacement) {
     if (replacement != null) {
       var val = assignment.param.type.stringify(replacement, ctx);
@@ -1786,8 +1760,8 @@ Requisition.prototype._split = function(args) {
   if (args[0].type === 'ScriptArgument') {
     // Special case: if the user enters { console.log('foo'); } then we need to
     // use the hidden 'eval' command
-    conversion = new Conversion(getEvalCommand(this.system.commands),
-                                new ScriptArgument());
+    var command = this.system.commands.get(evalCmd.name);
+    conversion = new Conversion(command, new ScriptArgument());
     this._setAssignmentInternal(this.commandAssignment, conversion);
     return;
   }
@@ -2045,7 +2019,7 @@ Requisition.prototype.exec = function(options) {
     typed = typed.replace(/\s*}\s*$/, '');
   }
 
-  var output = new Output(this.conversionContext, {
+  var output = new Output({
     command: command,
     args: args,
     typed: typed,
@@ -2138,14 +2112,13 @@ exports.Requisition = Requisition;
 /**
  * A simple object to hold information about the output of a command
  */
-function Output(context, options) {
+function Output(options) {
   options = options || {};
   this.command = options.command || '';
   this.args = options.args || {};
   this.typed = options.typed || '';
   this.canonical = options.canonical || '';
   this.hidden = options.hidden === true ? true : false;
-  this.converters = context.system.converters;
 
   this.type = undefined;
   this.data = undefined;
@@ -2190,15 +2163,28 @@ Output.prototype.complete = function(data, error) {
  * Call converters.convert using the data in this Output object
  */
 Output.prototype.convert = function(type, conversionContext) {
-  return this.converters.convert(this.data, this.type, type, conversionContext);
+  var converters = conversionContext.system.converters;
+  return converters.convert(this.data, this.type, type, conversionContext);
 };
 
 Output.prototype.toJson = function() {
+  // Exceptions don't stringify, so we try a bit harder
+  var data = this.data;
+  if (this.error && JSON.stringify(this.data) === '{}') {
+    data = {
+      columnNumber: data.columnNumber,
+      fileName: data.fileName,
+      lineNumber: data.lineNumber,
+      message: data.message,
+      stack: data.stack
+    };
+  }
+
   return {
     typed: this.typed,
     type: this.type,
-    data: this.data,
-    error: this.error
+    data: data,
+    isError: this.error
   };
 };
 
diff --git a/toolkit/devtools/gcli/source/lib/gcli/commands/clear.js b/toolkit/devtools/gcli/source/lib/gcli/commands/clear.js
index 2122f6b..8f93270 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/commands/clear.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/commands/clear.js
@@ -22,6 +22,7 @@ exports.items = [
   {
     // A command to clear the output area
     item: 'command',
+    runAt: 'client',
     name: 'clear',
     description: l10n.lookup('clearDesc'),
     returnType: 'clearoutput',
diff --git a/toolkit/devtools/gcli/source/lib/gcli/commands/commands.js b/toolkit/devtools/gcli/source/lib/gcli/commands/commands.js
index be2cf77..67793b2 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/commands/commands.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/commands/commands.js
@@ -161,8 +161,11 @@ function Command(types, commandSpec) {
 
 /**
  * JSON serializer that avoids non-serializable data
+ * @param customProps Array of strings containing additional properties which,
+ * if specified in the command spec, will be included in the JSON. Normally we
+ * transfer only the properties required for GCLI to function.
  */
-Command.prototype.toJson = function() {
+Command.prototype.toJson = function(customProps) {
   var json = {
     item: 'command',
     name: this.name,
@@ -170,6 +173,7 @@ Command.prototype.toJson = function() {
     returnType: this.returnType,
     isParent: (this.exec == null)
   };
+
   if (this.description !==  l10n.lookup('canonDescNone')) {
     json.description = this.description;
   }
@@ -179,10 +183,32 @@ Command.prototype.toJson = function() {
   if (this.hidden != null) {
     json.hidden = this.hidden;
   }
+
+  if (Array.isArray(customProps)) {
+    customProps.forEach(function(prop) {
+      if (this[prop] != null) {
+        json[prop] = this[prop];
+      }
+    }.bind(this));
+  }
+
   return json;
 };
 
 /**
+ * Easy way to lookup parameters by full name
+ */
+Command.prototype.getParameterByName = function(name) {
+  var reply;
+  this.params.forEach(function(param) {
+    if (param.name === name) {
+      reply = param;
+    }
+  });
+  return reply;
+};
+
+/**
  * Easy way to lookup parameters by short name
  */
 Command.prototype.getParameterByShortName = function(short) {
@@ -251,9 +277,17 @@ function Parameter(types, paramSpec, command, groupName) {
                     ': Missing defaultValue for optional parameter.');
   }
 
-  this.defaultValue = (this.paramSpec.defaultValue !== undefined) ?
-                      this.paramSpec.defaultValue :
-                      this.type.getBlank().value;
+  if (this.paramSpec.defaultValue !== undefined) {
+    this.defaultValue = this.paramSpec.defaultValue;
+  }
+  else {
+    Object.defineProperty(this, 'defaultValue', {
+      get: function() {
+        return this.type.getBlank().value;
+      },
+      enumerable: true
+    });
+  }
 
   // Resolve the documentation
   this.manual = lookup(this.paramSpec.manual);
@@ -261,6 +295,9 @@ function Parameter(types, paramSpec, command, groupName) {
 
   // Is the user required to enter data for this parameter? (i.e. has
   // defaultValue been set to something other than undefined)
+  // TODO: When the defaultValue comes from type.getBlank().value (see above)
+  // then perhaps we should set using something like
+  //   isDataRequired = (type.getBlank().status !== VALID)
   this.isDataRequired = (this.defaultValue === undefined);
 
   // Are we allowed to assign data to this parameter using positional
@@ -327,9 +364,14 @@ exports.Parameter = Parameter;
 
 /**
  * A store for a list of commands
+ * @param types Each command uses a set of Types to parse its parameters so the
+ * Commands container needs access to the list of available types.
+ * @param location String that, if set will force all commands to have a
+ * matching runAt property to be accepted
  */
-function Commands(types) {
+function Commands(types, location) {
   this.types = types;
+  this.location = location;
 
   // A lookup hash of our registered commands
   this._commands = {};
@@ -344,12 +386,16 @@ function Commands(types) {
 
 /**
  * Add a command to the list of known commands.
- * This function is exposed to the outside world (via gcli/index). It is
- * documented in docs/index.md for all the world to see.
  * @param commandSpec The command and its metadata.
- * @return The new command
+ * @return The new command, or null if a location property has been set and the
+ * commandSpec doesn't have a matching runAt property.
  */
 Commands.prototype.add = function(commandSpec) {
+  if (this.location != null && commandSpec.runAt != null &&
+      commandSpec.runAt !== this.location) {
+    return;
+  }
+
   if (this._commands[commandSpec.name] != null) {
     // Roughly commands.remove() without the event call, which we do later
     delete this._commands[commandSpec.name];
@@ -416,14 +462,17 @@ Commands.prototype.getAll = function() {
 /**
  * Get access to the stored commandMetaDatas (i.e. before they were made into
  * instances of Command/Parameters) so we can remote them.
+ * @param customProps Array of strings containing additional properties which,
+ * if specified in the command spec, will be included in the JSON. Normally we
+ * transfer only the properties required for GCLI to function.
  */
-Commands.prototype.getCommandSpecs = function() {
+Commands.prototype.getCommandSpecs = function(customProps) {
   var commandSpecs = [];
 
   Object.keys(this._commands).forEach(function(name) {
     var command = this._commands[name];
     if (!command.noRemote) {
-      commandSpecs.push(command.toJson());
+      commandSpecs.push(command.toJson(customProps));
     }
   }.bind(this));
 
diff --git a/toolkit/devtools/gcli/source/lib/gcli/commands/connect.js b/toolkit/devtools/gcli/source/lib/gcli/commands/connect.js
index bc7d718..beb2408 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/commands/connect.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/commands/connect.js
@@ -18,11 +18,12 @@
 
 var l10n = require('../util/l10n');
 var cli = require('../cli');
+var GcliFront = require('../connectors/remoted').GcliFront;
 
 /**
  * A lookup of the current connection
  */
-var connections = {};
+var fronts = {};
 
 /**
  * 'connection' type
@@ -32,8 +33,8 @@ var connection = {
   name: 'connection',
   parent: 'selection',
   lookup: function() {
-    return Object.keys(connections).map(function(prefix) {
-      return { name: prefix, value: connections[prefix] };
+    return Object.keys(fronts).map(function(prefix) {
+      return { name: prefix, value: fronts[prefix] };
     });
   }
 };
@@ -87,19 +88,19 @@ var connect = {
   returnType: 'string',
 
   exec: function(args, context) {
-    if (connections[args.prefix] != null) {
+    if (fronts[args.prefix] != null) {
       throw new Error(l10n.lookupFormat('connectDupReply', [ args.prefix ]));
     }
 
-    var connector = args.method || context.system.connectors.get('xhr');
+    args.method = args.method || context.system.connectors.get('xhr');
 
-    return connector.connect(args.url).then(function(connection) {
-      // Nasty: stash the prefix on the connection to help us tidy up
-      connection.prefix = args.prefix;
-      connections[args.prefix] = connection;
+    return GcliFront.create(args.method, args.url).then(function(front) {
+      // Nasty: stash the prefix on the front to help us tidy up
+      front.prefix = args.prefix;
+      fronts[args.prefix] = front;
 
-      return connection.call('specs').then(function(specs) {
-        var remoter = this.createRemoter(args.prefix, connection);
+      return front.specs().then(function(specs) {
+        var remoter = this.createRemoter(args.prefix, front);
         var commands = cli.getMapping(context).requisition.system.commands;
         commands.addProxyCommands(specs, remoter, args.prefix, args.url);
 
@@ -116,7 +117,7 @@ var connect = {
    * When we register a set of remote commands, we need to provide a proxy
    * executor. This is that executor.
    */
-  createRemoter: function(prefix, connection) {
+  createRemoter: function(prefix, front) {
     return function(cmdArgs, context) {
       var typed = context.typed;
 
@@ -126,12 +127,7 @@ var connect = {
         typed = typed.substring(prefix.length).replace(/^ */, '');
       }
 
-      var data = {
-        typed: typed,
-        args: cmdArgs
-      };
-
-      return connection.call('execute', data).then(function(reply) {
+      return front.execute(typed).then(function(reply) {
         var typedData = context.typedData(reply.type, reply.data);
         if (!reply.error) {
           return typedData;
@@ -162,11 +158,11 @@ var disconnect = {
   returnType: 'string',
 
   exec: function(args, context) {
-    var connection = args.prefix;
-    return connection.disconnect().then(function() {
+    var front = args.prefix;
+    return front.connection.disconnect().then(function() {
       var commands = cli.getMapping(context).requisition.system.commands;
-      var removed = commands.removeProxyCommands(connection.prefix);
-      delete connections[connection.prefix];
+      var removed = commands.removeProxyCommands(front.prefix);
+      delete fronts[front.prefix];
       return l10n.lookupFormat('disconnectReply', [ removed.length ]);
     });
   }
diff --git a/toolkit/devtools/gcli/source/lib/gcli/commands/global.js b/toolkit/devtools/gcli/source/lib/gcli/commands/global.js
index 4965a36..9bb738f 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/commands/global.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/commands/global.js
@@ -39,6 +39,7 @@ exports.items = [
   {
     // A command to switch JS globals
     item: 'command',
+    runAt: 'client',
     name: 'global',
     description: l10n.lookup('globalDesc'),
     params: [
diff --git a/toolkit/devtools/gcli/source/lib/gcli/commands/help.js b/toolkit/devtools/gcli/source/lib/gcli/commands/help.js
index 596724e..a5c3914 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/commands/help.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/commands/help.js
@@ -205,6 +205,7 @@ exports.items = [
     // 'help' command
     item: 'command',
     name: 'help',
+    runAt: 'client',
     description: l10n.lookup('helpDesc'),
     manual: l10n.lookup('helpManual'),
     params: [
diff --git a/toolkit/devtools/gcli/source/lib/gcli/commands/mocks.js b/toolkit/devtools/gcli/source/lib/gcli/commands/mocks.js
index 16d2605..0dc614a 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/commands/mocks.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/commands/mocks.js
@@ -19,6 +19,7 @@
 var cli = require('../cli');
 var mockCommands = require('../test/mockCommands');
 var mockSettings = require('../test/mockSettings');
+var mockDocument = require('../test/mockDocument');
 
 exports.items = [
   {
@@ -46,11 +47,13 @@ exports.items = [
     on: function(requisition) {
       mockCommands.setup(requisition);
       mockSettings.setup(requisition.system);
+      mockDocument.setup(requisition);
     },
 
     off: function(requisition) {
       mockCommands.shutdown(requisition);
       mockSettings.shutdown(requisition.system);
+      mockDocument.shutdown(requisition);
     }
   }
 ];
diff --git a/toolkit/devtools/gcli/source/lib/gcli/commands/pref.js b/toolkit/devtools/gcli/source/lib/gcli/commands/pref.js
index 5b1f6e9..387b1f8 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/commands/pref.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/commands/pref.js
@@ -30,6 +30,7 @@ exports.items = [
     // 'pref show' command
     item: 'command',
     name: 'pref show',
+    runAt: 'client',
     description: l10n.lookup('prefShowDesc'),
     manual: l10n.lookup('prefShowManual'),
     params: [
@@ -49,6 +50,7 @@ exports.items = [
     // 'pref set' command
     item: 'command',
     name: 'pref set',
+    runAt: 'client',
     description: l10n.lookup('prefSetDesc'),
     manual: l10n.lookup('prefSetManual'),
     params: [
@@ -73,6 +75,7 @@ exports.items = [
     // 'pref reset' command
     item: 'command',
     name: 'pref reset',
+    runAt: 'client',
     description: l10n.lookup('prefResetDesc'),
     manual: l10n.lookup('prefResetManual'),
     params: [
diff --git a/toolkit/devtools/gcli/source/lib/gcli/commands/preflist.js b/toolkit/devtools/gcli/source/lib/gcli/commands/preflist.js
index b6b1fad..67ac559 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/commands/preflist.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/commands/preflist.js
@@ -22,7 +22,7 @@ var Promise = require('../util/promise').Promise;
 /**
  * Format a list of settings for display
  */
-var prefsData = {
+var prefsViewConverter = {
   item: 'converter',
   from: 'prefsData',
   to: 'view',
@@ -98,6 +98,22 @@ var prefsData = {
 };
 
 /**
+ * Format a list of settings for display
+ */
+var prefsStringConverter = {
+  item: 'converter',
+  from: 'prefsData',
+  to: 'string',
+  exec: function(prefsData, conversionContext) {
+    var reply = '';
+    prefsData.settings.forEach(function(setting) {
+      reply += setting.name + ' -> ' + setting.value + '\n';
+    });
+    return reply;
+  }
+};
+
+/**
  * 'pref list' command
  */
 var prefList = {
@@ -136,6 +152,8 @@ function PrefList(prefsData, conversionContext) {
   this.search = prefsData.search;
   this.settings = prefsData.settings;
   this.conversionContext = conversionContext;
+
+  this.onLoad = this.onLoad.bind(this);
 }
 
 /**
@@ -194,4 +212,4 @@ PrefList.prototype.onSetClick = function(ev) {
   this.conversionContext.update(typed);
 };
 
-exports.items = [ prefsData, prefList ];
+exports.items = [ prefsViewConverter, prefsStringConverter, prefList ];
diff --git a/toolkit/devtools/gcli/source/lib/gcli/commands/test.js b/toolkit/devtools/gcli/source/lib/gcli/commands/test.js
index 84bdaf1..6f78a37 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/commands/test.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/commands/test.js
@@ -70,10 +70,10 @@ exports.items = [
       }
       else {
         options = {
-          isNode: (typeof(process) !== 'undefined' && process.title === 'node'),
+          isNode: (typeof(process) !== 'undefined' &&
+                   process.title.indexOf('node') != -1),
           isFirefox: false,
           isPhantomjs: false,
-          isNoDom: true,
           requisition: new Requisition(context.system)
         };
         options.automator = createRequisitionAutomator(options.requisition);
diff --git a/toolkit/devtools/gcli/source/lib/gcli/connectors/connectors.js b/toolkit/devtools/gcli/source/lib/gcli/connectors/connectors.js
index cf54382..1578f9c 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/connectors/connectors.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/connectors/connectors.js
@@ -138,14 +138,21 @@ Connectors.prototype.getAll = function() {
   }.bind(this));
 };
 
+var defaultConnectorName;
+
 /**
- * Get access to a connector by name. If name is undefined then use the first
- * registered connector as a default.
+ * Get access to a connector by name. If name is undefined then first try to
+ * use the same connector that we used last time, and if there was no last
+ * time, then just use the first registered connector as a default.
  */
 Connectors.prototype.get = function(name) {
   if (name == null) {
-    name = Object.keys(this._registered)[0];
+    name = (defaultConnectorName == null) ?
+        Object.keys(this._registered)[0] :
+        defaultConnectorName;
   }
+
+  defaultConnectorName = name;
   return this._registered[name];
 };
 
diff --git a/toolkit/devtools/gcli/source/lib/gcli/connectors/index.js b/toolkit/devtools/gcli/source/lib/gcli/connectors/index.js
deleted file mode 100644
index 5857344..0000000
--- a/toolkit/devtools/gcli/source/lib/gcli/connectors/index.js
+++ /dev/null
@@ -1,185 +0,0 @@
-/*
- * Copyright 2012, Mozilla Foundation and contributors
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-'use strict';
-
-var api = require('../api');
-var Commands = require('../commands/commands').Commands;
-var Types = require('../types/types').Types;
-
-// Patch-up IE9
-require('../util/legacy');
-
-/*
- * GCLI is built from a number of components (called items) composed as
- * required for each environment.
- * When adding to or removing from this list, we should keep the basics in sync
- * with the other environments.
- * See:
- * - lib/gcli/index.js: Generic basic set (without commands)
- * - lib/gcli/demo.js: Adds demo commands to basic set for use in web demo
- * - gcli.js: Add commands to basic set for use in Node command line
- * - lib/gcli/index.js: (mozmaster branch) From scratch listing for Firefox
- * - lib/gcli/connectors/index.js: Client only items when executing remotely
- * - lib/gcli/connectors/direct.js: Test items for connecting to in-process GCLI
- */
-var items = [
-  // First we need to add the local types which other types depend on
-  require('../types/delegate').items,
-  require('../types/selection').items,
-  require('../types/array').items,
-
-  require('../types/boolean').items,
-  require('../types/command').items,
-  require('../types/date').items,
-  require('../types/file').items,
-  require('../types/javascript').items,
-  require('../types/node').items,
-  require('../types/number').items,
-  require('../types/resource').items,
-  require('../types/setting').items,
-  require('../types/string').items,
-  require('../types/union').items,
-  require('../types/url').items,
-
-  require('../fields/fields').items,
-  require('../fields/delegate').items,
-  require('../fields/selection').items,
-
-  require('../ui/intro').items,
-  require('../ui/focus').items,
-
-  require('../converters/converters').items,
-  require('../converters/basic').items,
-  require('../converters/html').items,
-  require('../converters/terminal').items,
-
-  require('../languages/command').items,
-  require('../languages/javascript').items,
-
-  require('./direct').items,
-  // require('./rdp').items, // Firefox remote debug protocol
-  require('./websocket').items,
-  require('./xhr').items,
-
-  require('../commands/context').items,
-
-].reduce(function(prev, curr) { return prev.concat(curr); }, []);
-
-/**
- * These are the commands stored on the remote side that have converters which
- * we'll need to present the data
- */
-var requiredConverters = [
-  require('../cli').items,
-
-  require('../commands/clear').items,
-  require('../commands/connect').items,
-  require('../commands/exec').items,
-  require('../commands/global').items,
-  require('../commands/help').items,
-  require('../commands/intro').items,
-  require('../commands/lang').items,
-  require('../commands/preflist').items,
-  require('../commands/pref').items,
-  require('../commands/test').items,
-
-].reduce(function(prev, curr) { return prev.concat(curr); }, [])
- .filter(function(item) { return item.item === 'converter'; });
-
-/**
- * Connect to a remote system and setup the commands/types/converters etc needed
- * to make it all work
- */
-exports.connect = function(options) {
-  options = options || {};
-
-  var system = api.createSystem();
-
-  // Ugly hack, to aid testing
-  exports.api = system;
-
-  options.types = system.types = new Types();
-  options.commands = system.commands = new Commands(system.types);
-
-  system.addItems(items);
-  system.addItems(requiredConverters);
-
-  var connector = system.connectors.get(options.connector);
-  return connector.connect(options.url).then(function(connection) {
-    options.connection = connection;
-    connection.on('commandsChanged', function(specs) {
-      exports.addItems(system, specs, connection);
-    });
-
-    return connection.call('specs').then(function(specs) {
-      exports.addItems(system, specs, connection);
-      return connection;
-    });
-  });
-};
-
-exports.addItems = function(gcli, specs, connection) {
-  exports.removeRemoteItems(gcli, connection);
-  var remoteItems = exports.addLocalFunctions(specs, connection);
-  gcli.addItems(remoteItems);
-};
-
-/**
- * Take the data from the 'specs' command (or the 'commandsChanged' event) and
- * add function to proxy the execution back over the connection
- */
-exports.addLocalFunctions = function(specs, connection) {
-  // Inject an 'exec' function into the commands, and the connection into
-  // all the remote types
-  specs.forEach(function(commandSpec) {
-    //
-    commandSpec.connection = connection;
-    commandSpec.params.forEach(function(param) {
-      param.type.connection = connection;
-    });
-
-    if (!commandSpec.isParent) {
-      commandSpec.exec = function(args, context) {
-        var data = {
-          typed: (context.prefix ? context.prefix + ' ' : '') + context.typed
-        };
-
-        return connection.call('execute', data).then(function(reply) {
-          var typedData = context.typedData(reply.type, reply.data);
-          if (!reply.error) {
-            return typedData;
-          }
-          else {
-            throw typedData;
-          }
-        });
-      };
-    }
-
-    commandSpec.isProxy = true;
-  });
-
-  return specs;
-};
-
-exports.removeRemoteItems = function(gcli, connection) {
-  gcli.commands.getAll().forEach(function(command) {
-    if (command.connection === connection) {
-      gcli.commands.remove(command);
-    }
-  });
-};
diff --git a/toolkit/devtools/gcli/source/lib/gcli/connectors/protocol.js b/toolkit/devtools/gcli/source/lib/gcli/connectors/protocol.js
deleted file mode 100644
index a6a1382..0000000
--- a/toolkit/devtools/gcli/source/lib/gcli/connectors/protocol.js
+++ /dev/null
@@ -1,56 +0,0 @@
-/*
- * Copyright 2012, Mozilla Foundation and contributors
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-'use strict';
-
-/**
- * This is a quick and dirty stub that allows us to write code in remoted.js
- * that looks like gcli.js
- */
-exports.method = function(func, spec) {
-  // An array of strings, being the names of the parameters
-  var argSpecs = [];
-  if (spec.request != null) {
-    Object.keys(spec.request).forEach(function(name) {
-      var arg = spec.request[name];
-      argSpecs[arg.index] = name;
-    });
-  }
-
-  return function(data) {
-    var args = (data == null) ?
-               [] :
-               argSpecs.map(function(name) { return data[name]; });
-    return func.apply(this, args);
-  };
-};
-
-var Arg = exports.Arg = function(index, type) {
-  if (this == null) {
-    return new Arg(index, type);
-  }
-
-  this.index = index;
-  this.type = type;
-};
-
-var RetVal = exports.RetVal = function(type) {
-  if (this == null) {
-    return new RetVal(type);
-  }
-
-  this.type = type;
-};
diff --git a/toolkit/devtools/gcli/source/lib/gcli/connectors/rdp.js b/toolkit/devtools/gcli/source/lib/gcli/connectors/rdp.js
deleted file mode 100644
index abfe7b3..0000000
--- a/toolkit/devtools/gcli/source/lib/gcli/connectors/rdp.js
+++ /dev/null
@@ -1,145 +0,0 @@
-/*
- * Copyright 2012, Mozilla Foundation and contributors
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-'use strict';
-
-var Cu = require('chrome').Cu;
-
-var DebuggerClient = Cu.import('resource://gre/modules/devtools/dbg-client.jsm', {}).DebuggerClient;
-var { Task } = Cu.import("resource://gre/modules/Task.jsm", {});
-
-var Promise = require('../util/promise').Promise;
-var Connection = require('./connectors').Connection;
-
-/**
- * What port should we use by default?
- */
-Object.defineProperty(exports, 'defaultPort', {
-  get: function() {
-    var Services = Cu.import('resource://gre/modules/Services.jsm', {}).Services;
-    try {
-      return Services.prefs.getIntPref('devtools.debugger.chrome-debugging-port');
-    }
-    catch (ex) {
-      console.error('Can\'t use default port from prefs. Using 9999');
-      return 9999;
-    }
-  },
-  enumerable: true
-});
-
-exports.items = [
-  {
-    item: 'connector',
-    name: 'rdp',
-
-    connect: function(url) {
-      return RdpConnection.create(url);
-    }
-  }
-];
-
-/**
- * RdpConnection uses the Firefox Remote Debug Protocol
- */
-function RdpConnection(url) {
-  throw new Error('Use RdpConnection.create');
-}
-
-/**
- * Asynchronous construction
- */
-RdpConnection.create = Task.async(function*(url) {
-  this.host = url;
-  this.port = undefined; // TODO: Split out the port number
-
-  this.requests = {};
-  this.nextRequestId = 0;
-
-  this._emit = this._emit.bind(this);
-
-  let transport = yield DebuggerClient.socketConnect({
-    host: this.host,
-    port: this.port
-  });
-
-  return new Promise(function(resolve, reject) {
-    this.client = new DebuggerClient(transport);
-    this.client.connect(function() {
-      this.client.listTabs(function(response) {
-        this.actor = response.gcliActor;
-        resolve();
-      }.bind(this));
-    }.bind(this));
-  }.bind(this));
-});
-
-RdpConnection.prototype = Object.create(Connection.prototype);
-
-RdpConnection.prototype.call = function(command, data) {
-  return new Promise(function(resolve, reject) {
-    var request = { to: this.actor, type: command, data: data };
-
-    this.client.request(request, function(response) {
-      resolve(response.commandSpecs);
-    });
-  }.bind(this));
-};
-
-RdpConnection.prototype.disconnect = function() {
-  return new Promise(function(resolve, reject) {
-    this.client.close(function() {
-      resolve();
-    });
-
-    delete this._emit;
-  }.bind(this));
-};
-
-
-/**
- * A Request is a command typed at the client which lives until the command
- * has finished executing on the server
- */
-function Request(actor, typed, args) {
-  this.json = {
-    to: actor,
-    type: 'execute',
-    typed: typed,
-    args: args,
-    requestId: 'id-' + Request._nextRequestId++,
-  };
-
-  this.promise = new Promise(function(resolve, reject) {
-    this._resolve = resolve;
-  }.bind(this));
-}
-
-Request._nextRequestId = 0;
-
-/**
- * Called by the connection when a remote command has finished executing
- * @param error boolean indicating output state
- * @param type the type of the returned data
- * @param data the data itself
- */
-Request.prototype.complete = function(error, type, data) {
-  this._resolve({
-    error: error,
-    type: type,
-    data: data
-  });
-};
diff --git a/toolkit/devtools/gcli/source/lib/gcli/connectors/remoted.js b/toolkit/devtools/gcli/source/lib/gcli/connectors/remoted.js
deleted file mode 100644
index 91e6900..0000000
--- a/toolkit/devtools/gcli/source/lib/gcli/connectors/remoted.js
+++ /dev/null
@@ -1,275 +0,0 @@
-/*
- * Copyright 2012, Mozilla Foundation and contributors
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/* jshint quotmark:false, newcap:false */
-
-'use strict';
-
-var Promise = require('../util/promise').Promise;
-var host = require('../util/host');
-var fileparser = require('../util/fileparser');
-
-var protocol = require('./protocol');
-var method = protocol.method;
-var Arg = protocol.Arg;
-var RetVal = protocol.RetVal;
-
-/**
- * Provide JSON mapping services to remote functionality of a Requisition
- */
-var Remoter = exports.Remoter = function(requisition) {
-  this.requisition = requisition;
-  this._listeners = [];
-};
-
-/**
- * Add a new listener
- */
-Remoter.prototype.addListener = function(action) {
-  var listener = {
-    action: action,
-    caller: function() {
-      var commands = this.requisition.system.commands;
-      action('commandsChanged', commands.getCommandSpecs());
-    }.bind(this)
-  };
-  this._listeners.push(listener);
-
-  this.requisition.system.commands.onCommandsChange.add(listener.caller);
-};
-
-/**
- * Remove an existing listener
- */
-Remoter.prototype.removeListener = function(action) {
-  var listener;
-
-  this._listeners = this._listeners.filter(function(li) {
-    if (li.action === action) {
-      listener = li;
-      return false;
-    }
-    return true;
-  });
-
-  if (listener == null) {
-    throw new Error('action not a known listener');
-  }
-
-  this.requisition.system.commands.onCommandsChange.remove(listener.caller);
-};
-
-/**
- * These functions are designed to be remoted via RDP/XHR/websocket, etc
- */
-Remoter.prototype.exposed = {
-  /**
-   * Retrieve a list of the remotely executable commands
-   */
-  specs: method(function() {
-    return this.requisition.system.commands.getCommandSpecs();
-  }, {
-    request: {},
-    response: RetVal("json")
-  }),
-
-  /**
-   * Execute a GCLI command
-   * @return a promise of an object with the following properties:
-   * - data: The output of the command
-   * - type: The type of the data to allow selection of a converter
-   * - error: True if the output was considered an error
-   */
-  execute: method(function(typed) {
-    return this.requisition.updateExec(typed).then(function(output) {
-      return output.toJson();
-    });
-  }, {
-    request: {
-      typed: Arg(0, "string") // The command string
-    },
-    response: RetVal("json")
-  }),
-
-  /**
-   * Get the state of an input string. i.e. requisition.getStateData()
-   */
-  state: method(function(typed, start, rank) {
-    return this.requisition.update(typed).then(function() {
-      return this.requisition.getStateData(start, rank);
-    }.bind(this));
-  }, {
-    request: {
-      typed: Arg(0, "string"), // The command string
-      start: Arg(1, "number"), // Cursor start position
-      rank: Arg(2, "number") // The prediction offset (# times UP/DOWN pressed)
-    },
-    response: RetVal("json")
-  }),
-
-  /**
-   * Call type.parse to check validity. Used by the remote type
-   * @return a promise of an object with the following properties:
-   * - status: Of of the following strings: VALID|INCOMPLETE|ERROR
-   * - message: The message to display to the user
-   * - predictions: An array of suggested values for the given parameter
-   */
-  typeparse: method(function(typed, param) {
-    return this.requisition.update(typed).then(function() {
-      var assignment = this.requisition.getAssignment(param);
-
-      return Promise.resolve(assignment.predictions).then(function(predictions) {
-        return {
-          status: assignment.getStatus().toString(),
-          message: assignment.message,
-          predictions: predictions
-        };
-      });
-    }.bind(this));
-  }, {
-    request: {
-      typed: Arg(0, "string"), // The command string
-      param: Arg(1, "string") // The name of the parameter to parse
-    },
-    response: RetVal("json")
-  }),
-
-  /**
-   * Get the incremented value of some type
-   * @return a promise of a string containing the new argument text
-   */
-  typeincrement: method(function(typed, param) {
-    return this.requisition.update(typed).then(function() {
-      var assignment = this.requisition.getAssignment(param);
-      return this.requisition.increment(assignment).then(function() {
-        var arg = assignment.arg;
-        return arg == null ? undefined : arg.text;
-      });
-    });
-  }, {
-    request: {
-      typed: Arg(0, "string"), // The command string
-      param: Arg(1, "string") // The name of the parameter to parse
-    },
-    response: RetVal("string")
-  }),
-
-  /**
-   * See typeincrement
-   */
-  typedecrement: method(function(typed, param) {
-    return this.requisition.update(typed).then(function() {
-      var assignment = this.requisition.getAssignment(param);
-      return this.requisition.decrement(assignment).then(function() {
-        var arg = assignment.arg;
-        return arg == null ? undefined : arg.text;
-      });
-    });
-  }, {
-    request: {
-      typed: Arg(0, "string"), // The command string
-      param: Arg(1, "string") // The name of the parameter to parse
-    },
-    response: RetVal("string")
-  }),
-
-  /**
-   * Perform a lookup on a selection type to get the allowed values
-   */
-  selectioninfo: method(function(commandName, paramName, action) {
-    var command = this.requisition.system.commands.get(commandName);
-    if (command == null) {
-      throw new Error('No command called \'' + commandName + '\'');
-    }
-
-    var type;
-    command.params.forEach(function(param) {
-      if (param.name === paramName) {
-        type = param.type;
-      }
-    });
-    if (type == null) {
-      throw new Error('No parameter called \'' + paramName + '\' in \'' +
-                      commandName + '\'');
-    }
-
-    switch (action) {
-      case 'lookup':
-        return type.lookup(this.requisition.executionContext);
-      case 'data':
-        return type.data(this.requisition.executionContext);
-      default:
-        throw new Error('Action must be either \'lookup\' or \'data\'');
-    }
-  }, {
-    request: {
-      commandName: Arg(0, "string"), // The command containing the parameter in question
-      paramName: Arg(1, "string"), // The name of the parameter
-      action: Arg(2, "string") // 'lookup' or 'data' depending on the function to call
-    },
-    response: RetVal("json")
-  }),
-
-  /**
-   * Execute a system command
-   * @return a promise of a string containing the output of the command
-   */
-  system: method(function(cmd, args, cwd, env) {
-    var context = this.requisition.executionContext;
-    return host.spawn(context, { cmd: cmd, args: args, cwd: cwd, env: env });
-  }, {
-    request: {
-      cmd: Arg(0, "string"), // The executable to call
-      args: Arg(1, "array:string"), // Arguments to the executable
-      cwd: Arg(2, "string"), // The working directory
-      env: Arg(3, "json") // A map of environment variables
-    },
-    response: RetVal("json")
-  }),
-
-  /**
-   * Examine the filesystem for file matches
-   */
-  parsefile: method(function(typed, filetype, existing, matches) {
-    var options = {
-      filetype: filetype,
-      existing: existing,
-      matches: new RegExp(matches)
-    };
-
-    var context = this.requisition.executionContext;
-    return fileparser.parse(context, typed, options).then(function(reply) {
-      reply.status = reply.status.toString();
-      if (reply.predictor == null) {
-        return reply;
-      }
-
-      return reply.predictor().then(function(predictions) {
-        delete reply.predictor;
-        reply.predictions = predictions;
-        return reply;
-      });
-    });
-  }, {
-    request: {
-      typed: Arg(0, "string"), // The filename as typed by the user
-      filetype: Arg(1, "array:string"), // The expected filetype
-      existing: Arg(2, "string"), // Boolean which defines if a file/directory is expected to exist
-      matches: Arg(3, "json") // String of a regular expression which the result should match
-    },
-    response: RetVal("json")
-  })
-};
diff --git a/toolkit/devtools/gcli/source/lib/gcli/converters/basic.js b/toolkit/devtools/gcli/source/lib/gcli/converters/basic.js
index fdb41d4..7ce0848 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/converters/basic.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/converters/basic.js
@@ -56,6 +56,17 @@ exports.items = [
   },
   {
     item: 'converter',
+    from: 'json',
+    to: 'view',
+    exec: function(json, context) {
+      var html = JSON.stringify(json, null, '&#160;').replace(/\n/g, '<br/>');
+      return {
+        html: '<pre>' + html + '</pre>'
+      };
+    }
+  },
+  {
+    item: 'converter',
     from: 'number',
     to: 'string',
     exec: function(data) { return '' + data; }
@@ -71,5 +82,13 @@ exports.items = [
     from: 'undefined',
     to: 'string',
     exec: function(data) { return ''; }
+  },
+  {
+    item: 'converter',
+    from: 'json',
+    to: 'string',
+    exec: function(json, conversionContext) {
+      return JSON.stringify(json);
+    }
   }
 ];
diff --git a/toolkit/devtools/gcli/source/lib/gcli/converters/converters.js b/toolkit/devtools/gcli/source/lib/gcli/converters/converters.js
index 38b2bdc..84cab29 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/converters/converters.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/converters/converters.js
@@ -99,7 +99,7 @@ var errorDomConverter = {
   exec: function(ex, conversionContext) {
     var node = util.createElement(conversionContext.document, 'p');
     node.className = 'gcli-error';
-    node.textContent = ex;
+    node.textContent = errorStringConverter.exec(ex, conversionContext);
     return node;
   }
 };
@@ -112,6 +112,15 @@ var errorStringConverter = {
   from: 'error',
   to: 'string',
   exec: function(ex, conversionContext) {
+    if (typeof ex === 'string') {
+      return ex;
+    }
+    if (ex instanceof Error) {
+      return '' + ex;
+    }
+    if (typeof ex.message === 'string') {
+      return ex.message;
+    }
     return '' + ex;
   }
 };
@@ -209,6 +218,15 @@ Converters.prototype.get = function(from, to) {
 };
 
 /**
+ * Get all the registered converters. Most for debugging
+ */
+Converters.prototype.getAll = function() {
+  return Object.keys(this._registered.from).map(function(name) {
+    return this._registered.from[name];
+  }.bind(this));
+};
+
+/**
  * Helper for get to pick the best fallback converter
  */
 Converters.prototype._getFallbackConverter = function(from, to) {
diff --git a/toolkit/devtools/gcli/source/lib/gcli/fields/fields.js b/toolkit/devtools/gcli/source/lib/gcli/fields/fields.js
index d8897b27..c971847 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/fields/fields.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/fields/fields.js
@@ -199,6 +199,13 @@ Fields.prototype.get = function(type, options) {
   return new FieldConstructor(type, options);
 };
 
+/**
+ * Get all the registered fields. Most for debugging
+ */
+Fields.prototype.getAll = function() {
+  return this._fieldCtors.slice();
+};
+
 exports.Fields = Fields;
 
 /**
diff --git a/toolkit/devtools/gcli/source/lib/gcli/fields/selection.js b/toolkit/devtools/gcli/source/lib/gcli/fields/selection.js
index 1aa45f6..d3e7597 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/fields/selection.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/fields/selection.js
@@ -75,7 +75,7 @@ SelectionField.prototype.setConversion = function(conversion) {
           prediction;
     }, this);
     this.menu.show(items, conversion.arg.text);
-  }.bind(this), util.errorHandler);
+  }.bind(this)).catch(util.errorHandler);
 };
 
 SelectionField.prototype.itemClicked = function(ev) {
@@ -85,7 +85,7 @@ SelectionField.prototype.itemClicked = function(ev) {
   this.type.parse(arg, context).then(function(conversion) {
     this.onFieldChange({ conversion: conversion });
     this.setMessage(conversion.message);
-  }.bind(this)).then(null, util.errorHandler);
+  }.bind(this)).catch(util.errorHandler);
 };
 
 SelectionField.prototype.getConversion = function() {
diff --git a/toolkit/devtools/gcli/source/lib/gcli/index.js b/toolkit/devtools/gcli/source/lib/gcli/index.js
index dc034be..0b889b6 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/index.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/index.js
@@ -18,114 +18,7 @@
 
 var Cc = require('chrome').Cc;
 var Ci = require('chrome').Ci;
-var Cu = require('chrome').Cu;
 
-/*
- * GCLI is built from a number of components (called items) composed as
- * required for each environment.
- * When adding to or removing from this list, we should keep the basics in sync
- * with the other environments.
- * See:
- * - lib/gcli/index.js: Generic basic set (without commands)
- * - lib/gcli/demo.js: Adds demo commands to basic set for use in web demo
- * - gcli.js: Add commands to basic set for use in Node command line
- * - lib/gcli/index.js: (mozmaster branch) From scratch listing for Firefox
- * - lib/gcli/connectors/index.js: Client only items when executing remotely
- * - lib/gcli/connectors/direct.js: Test items for connecting to in-process GCLI
- */
-exports.items = [
-  require('./types/delegate').items,
-  require('./types/selection').items,
-  require('./types/array').items,
-
-  require('./types/boolean').items,
-  require('./types/command').items,
-  require('./types/date').items,
-  require('./types/file').items,
-  require('./types/javascript').items,
-  require('./types/node').items,
-  require('./types/number').items,
-  require('./types/resource').items,
-  require('./types/setting').items,
-  require('./types/string').items,
-  require('./types/union').items,
-  require('./types/url').items,
-
-  require('./fields/fields').items,
-  require('./fields/delegate').items,
-  require('./fields/selection').items,
-
-  require('./ui/focus').items,
-  require('./ui/intro').items,
-
-  require('./converters/converters').items,
-  require('./converters/basic').items,
-  // require('./converters/html').items, // Prevent use of innerHTML
-  require('./converters/terminal').items,
-
-  require('./languages/command').items,
-  require('./languages/javascript').items,
-
-  // require('./connectors/direct').items, // No need for loopback testing
-  // require('./connectors/rdp').items, // Needs fixing
-  // require('./connectors/websocket').items, // Not from chrome
-  // require('./connectors/xhr').items, // Not from chrome
-
-  // require('./cli').items, // No need for '{' with web console
-  require('./commands/clear').items,
-  // require('./commands/connect').items, // We need to fix our RDP connector
-  require('./commands/context').items,
-  // require('./commands/exec').items, // No exec in Firefox yet
-  require('./commands/global').items,
-  require('./commands/help').items,
-  // require('./commands/intro').items, // No need for intro command
-  require('./commands/lang').items,
-  // require('./commands/mocks').items, // Only for testing
-  require('./commands/pref').items,
-  // require('./commands/preflist').items, // Too slow in Firefox
-  // require('./commands/test').items, // Only for testing
-
-  // No demo or node commands
-
-].reduce(function(prev, curr) { return prev.concat(curr); }, []);
-
-var api = require('./api');
-var system = api.createSystem();
-
-// Export the system API by adding it to our exports
-Object.keys(system).forEach(function(key) {
-  exports[key] = system[key];
-});
-
-system.addItems(exports.items);
-
-var host = require('./util/host');
-
-exports.useTarget = host.script.useTarget;
-
-/**
- * This code is internal and subject to change without notice.
- * createDisplay() for Firefox requires an options object with the following
- * members:
- * - contentDocument: From the window of the attached tab
- * - chromeDocument: GCLITerm.document
- * - environment.hudId: GCLITerm.hudId
- * - jsEnvironment.globalObject: 'window'
- * - jsEnvironment.evalFunction: 'eval' in a sandbox
- * - inputElement: GCLITerm.inputNode
- * - completeElement: GCLITerm.completeNode
- * - hintElement: GCLITerm.hintNode
- * - inputBackgroundElement: GCLITerm.inputStack
- */
-exports.createDisplay = function(options) {
-  var FFDisplay = require('./mozui/ffdisplay').FFDisplay;
-  return new FFDisplay(system, options);
-};
-
-exports.createRequisition = function(options) {
-  var Requisition = require('./cli').Requisition;
-  return new Requisition(system, options);
-};
 
 var prefSvc = Cc['@mozilla.org/preferences-service;1']
                         .getService(Ci.nsIPrefService);
@@ -134,44 +27,3 @@ var prefBranch = prefSvc.getBranch(null).QueryInterface(Ci.nsIPrefBranch2);
 exports.hiddenByChromePref = function() {
   return !prefBranch.prefHasUserValue('devtools.chrome.enabled');
 };
-
-
-try {
-  var Services = Cu.import('resource://gre/modules/Services.jsm', {}).Services;
-  var stringBundle = Services.strings.createBundle(
-          'chrome://browser/locale/devtools/gclicommands.properties');
-
-  /**
-   * Lookup a string in the GCLI string bundle
-   */
-  exports.lookup = function(name) {
-    try {
-      return stringBundle.GetStringFromName(name);
-    }
-    catch (ex) {
-      throw new Error('Failure in lookup(\'' + name + '\')');
-    }
-  };
-
-  /**
-   * Lookup a string in the GCLI string bundle
-   */
-  exports.lookupFormat = function(name, swaps) {
-    try {
-      return stringBundle.formatStringFromName(name, swaps, swaps.length);
-    }
-    catch (ex) {
-      throw new Error('Failure in lookupFormat(\'' + name + '\')');
-    }
-  };
-}
-catch (ex) {
-  console.error('Using string fallbacks', ex);
-
-  exports.lookup = function(name) {
-    return name;
-  };
-  exports.lookupFormat = function(name, swaps) {
-    return name;
-  };
-}
diff --git a/toolkit/devtools/gcli/source/lib/gcli/languages/command.js b/toolkit/devtools/gcli/source/lib/gcli/languages/command.js
index f423a8e..043206c 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/languages/command.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/languages/command.js
@@ -123,7 +123,6 @@ var commandLanguage = exports.commandLanguage = {
     this.commandDom = undefined;
   },
 
-  // From the requisition.textChanged event
   textChanged: function() {
     if (this.terminal == null) {
       return; // This can happen post-destroy()
@@ -184,7 +183,7 @@ var commandLanguage = exports.commandLanguage = {
       var isNew = (this.assignment !== newAssignment);
 
       this.assignment = newAssignment;
-      this.terminal.updateCompletion();
+      this.terminal.updateCompletion().catch(util.errorHandler);
 
       if (isNew) {
         this.updateHints();
@@ -251,7 +250,7 @@ var commandLanguage = exports.commandLanguage = {
     // If the user is on a valid value, then we increment the value, but if
     // they've typed something that's not right we page through predictions
     if (this.assignment.getStatus() === Status.VALID) {
-      return this.requisition.increment(this.assignment).then(function() {
+      return this.requisition.nudge(this.assignment, 1).then(function() {
         this.textChanged();
         this.focusManager.onInputChange();
         return true;
@@ -266,7 +265,7 @@ var commandLanguage = exports.commandLanguage = {
    */
   handleDownArrow: function() {
     if (this.assignment.getStatus() === Status.VALID) {
-      return this.requisition.decrement(this.assignment).then(function() {
+      return this.requisition.nudge(this.assignment, -1).then(function() {
         this.textChanged();
         this.focusManager.onInputChange();
         return true;
@@ -286,7 +285,10 @@ var commandLanguage = exports.commandLanguage = {
     }
 
     this.terminal.history.add(input);
-    this.terminal.unsetChoice();
+    this.terminal.unsetChoice().catch(util.errorHandler);
+
+    this.terminal._previousValue = this.terminal.inputElement.value;
+    this.terminal.inputElement.value = '';
 
     return this.requisition.exec().then(function() {
       this.textChanged();
@@ -496,7 +498,7 @@ var commandLanguage = exports.commandLanguage = {
         this.terminal.scrollToBottom();
         data.throbEle.style.display = ev.output.completed ? 'none' : 'block';
       }.bind(this));
-    }.bind(this)).then(null, console.error);
+    }.bind(this)).catch(console.error);
 
     this.terminal.addElement(data.rowinEle);
     this.terminal.addElement(data.rowoutEle);
diff --git a/toolkit/devtools/gcli/source/lib/gcli/languages/javascript.js b/toolkit/devtools/gcli/source/lib/gcli/languages/javascript.js
index f4df687..229cdd4 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/languages/javascript.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/languages/javascript.js
@@ -42,8 +42,7 @@ exports.items = [
     },
 
     exec: function(input) {
-      return this.eval(input).then(function(response) {
-        // console.log('javascript.exec', response);
+      return this.evaluate(input).then(function(response) {
         var output = (response.exception != null) ?
                       response.exception.class :
                       response.output;
@@ -80,8 +79,8 @@ exports.items = [
       }.bind(this));
     },
 
-    eval: function(input) {
-      return host.script.eval(input);
+    evaluate: function(input) {
+      return host.script.evaluate(input);
     }
   }
 ];
diff --git a/toolkit/devtools/gcli/source/lib/gcli/languages/languages.js b/toolkit/devtools/gcli/source/lib/gcli/languages/languages.js
index 49e0f1e..3c5e884 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/languages/languages.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/languages/languages.js
@@ -51,8 +51,9 @@ var baseLanguage = {
   },
 
   handleTab: function() {
-    this.terminal.unsetChoice();
-    return RESOLVED;
+    return this.terminal.unsetChoice().then(function() {
+      return RESOLVED;
+    }, util.errorHandler);
   },
 
   handleInput: function(input) {
@@ -62,8 +63,9 @@ var baseLanguage = {
       }.bind(this));
     }
 
-    this.terminal.unsetChoice();
-    return RESOLVED;
+    return this.terminal.unsetChoice().then(function() {
+      return RESOLVED;
+    }, util.errorHandler);
   },
 
   handleReturn: function(input) {
@@ -80,7 +82,7 @@ var baseLanguage = {
 
       this.focusManager.outputted();
 
-      this.terminal.unsetChoice();
+      this.terminal.unsetChoice().catch(util.errorHandler);
       this.terminal.inputElement.value = '';
     }.bind(this));
   },
diff --git a/toolkit/devtools/gcli/source/lib/gcli/mozui/ffdisplay.js b/toolkit/devtools/gcli/source/lib/gcli/mozui/ffdisplay.js
index 97a87f2..0147273 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/mozui/ffdisplay.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/mozui/ffdisplay.js
@@ -21,65 +21,29 @@ var Completer = require('./completer').Completer;
 var Tooltip = require('./tooltip').Tooltip;
 var FocusManager = require('../ui/focus').FocusManager;
 
-var Requisition = require('../cli').Requisition;
-
 var cli = require('../cli');
-var jstype = require('../types/javascript');
 var nodetype = require('../types/node');
 var resource = require('../types/resource');
-var intro = require('../ui/intro');
-
-var CommandOutputManager = require('../commands/commands').CommandOutputManager;
-
-/**
- * Handy utility to inject the content document (i.e. for the viewed page,
- * not for chrome) into the various components.
- */
-function setContentDocument(document) {
-  if (document) {
-    nodetype.setDocument(document);
-    resource.setDocument(document);
-  }
-  else {
-    resource.unsetDocument();
-    nodetype.unsetDocument();
-    jstype.unsetGlobalObject();
-  }
-}
 
 /**
  * FFDisplay is responsible for generating the UI for GCLI, this implementation
  * is a special case for use inside Firefox
  * @param options A configuration object containing the following:
- * - contentDocument (optional)
+ * - requisition
  * - chromeDocument
  * - hintElement
  * - inputElement
  * - completeElement
  * - backgroundElement
- * - outputDocument
- * - consoleWrap (optional)
- * - eval (optional)
- * - environment
- * - chromeWindow
- * - commandOutputManager (optional)
  */
 function FFDisplay(system, options) {
-  if (options.eval) {
-    cli.setEvalFunction(options.eval);
-  }
-  setContentDocument(options.contentDocument);
-
-  this.requisition = new Requisition(system, {
-    environment: options.environment,
-    document: options.outputDocument
-  });
+  this.requisition = options.requisition;
   this.onOutput = this.requisition.commandOutputManager.onOutput;
 
   this.focusManager = new FocusManager(options.chromeDocument, system.settings);
   this.onVisibilityChange = this.focusManager.onVisibilityChange;
 
-  this.inputter = new Inputter(options, {
+  this.inputter = new Inputter({
     requisition: this.requisition,
     focusManager: this.focusManager,
     element: options.inputElement
@@ -92,7 +56,7 @@ function FFDisplay(system, options) {
     element: options.completeElement
   });
 
-  this.tooltip = new Tooltip(options, {
+  this.tooltip = new Tooltip({
     requisition: this.requisition,
     focusManager: this.focusManager,
     inputter: this.inputter,
@@ -100,138 +64,23 @@ function FFDisplay(system, options) {
   });
 
   this.inputter.tooltip = this.tooltip;
-
-  if (options.consoleWrap) {
-    this.resizer = this.resizer.bind(this);
-
-    this.consoleWrap = options.consoleWrap;
-    var win = options.consoleWrap.ownerDocument.defaultView;
-    win.addEventListener('resize', this.resizer, false);
-  }
-
-  this.options = options;
 }
 
 /**
- * The main Display calls this as part of startup since it registers listeners
- * for output first. The firefox display can't do this, so it has to be a
- * separate method
- */
-FFDisplay.prototype.maybeShowIntro = function() {
-  intro.maybeShowIntro(this.requisition.commandOutputManager,
-                       this.requisition.conversionContext);
-};
-
-/**
- * Called when the page to which we're attached changes
- * @params options Object with the following properties:
- * - contentDocument: Points to the page that we should now work against
- */
-FFDisplay.prototype.reattach = function(options) {
-  setContentDocument(options.contentDocument);
-};
-
-/**
  * Avoid memory leaks
  */
 FFDisplay.prototype.destroy = function() {
-  if (this.consoleWrap) {
-    var win = this.options.consoleWrap.ownerDocument.defaultView;
-    win.removeEventListener('resize', this.resizer, false);
-  }
-
   this.tooltip.destroy();
   this.completer.destroy();
   this.inputter.destroy();
   this.focusManager.destroy();
 
-  this.requisition.destroy();
-
-  setContentDocument(null);
-  cli.unsetEvalFunction();
-
-  delete this.options;
-
   // We could also delete the following objects if we have hard-to-track-down
   // memory leaks, as a belt-and-braces approach, however this prevents our
   // DOM node hunter script from looking in all the nooks and crannies, so it's
   // better if we can be leak-free without deleting them:
-  // - consoleWrap, resizer, tooltip, completer, inputter,
-  // - focusManager, onVisibilityChange, requisition, commandOutputManager
-};
-
-/**
- * Called on chrome window resize, or on divider slide
- */
-FFDisplay.prototype.resizer = function() {
-  // Bug 705109: There are several numbers hard-coded in this function.
-  // This is simpler than calculating them, but error-prone when the UI setup,
-  // the styling or display settings change.
-
-  var parentRect = this.options.consoleWrap.getBoundingClientRect();
-  // Magic number: 64 is the size of the toolbar above the output area
-  var parentHeight = parentRect.bottom - parentRect.top - 64;
-
-  // Magic number: 100 is the size at which we decide the hints are too small
-  // to be useful, so we hide them
-  if (parentHeight < 100) {
-    this.options.hintElement.classList.add('gcliterm-hint-nospace');
-  }
-  else {
-    this.options.hintElement.classList.remove('gcliterm-hint-nospace');
-    this.options.hintElement.style.overflowY = null;
-    this.options.hintElement.style.borderBottomColor = 'white';
-  }
-
-  // We also try to make the max-width of any GCLI elements so they don't
-  // extend outside the scroll area.
-  var doc = this.options.hintElement.ownerDocument;
-
-  var outputNode = this.options.hintElement.parentNode.parentNode.children[1];
-  var listItems = outputNode.getElementsByClassName('hud-msg-node');
-
-  // This is an top-side estimate. We could try to calculate it, maybe using
-  // something along these lines http://www.alexandre-gomes.com/?p=115 However
-  // experience has shown this to be hard to get to work reliably
-  // Also we don't need to be precise. If we use a number that is too big then
-  // the only down-side is too great a right margin
-  var scrollbarWidth = 20;
-
-  if (listItems.length > 0) {
-    var parentWidth = outputNode.getBoundingClientRect().width - scrollbarWidth;
-    var otherWidth;
-    var body;
-
-    for (var i = 0; i < listItems.length; ++i) {
-      var listItem = listItems[i];
-      // a.k.a 'var otherWidth = 132'
-      otherWidth = 0;
-      body = null;
-
-      for (var j = 0; j < listItem.children.length; j++) {
-        var child = listItem.children[j];
-
-        if (child.classList.contains('gcliterm-msg-body')) {
-          body = child.children[0];
-        }
-        else {
-          otherWidth += child.getBoundingClientRect().width;
-        }
-
-        var styles = doc.defaultView.getComputedStyle(child, null);
-        otherWidth += parseInt(styles.borderLeftWidth, 10) +
-                      parseInt(styles.borderRightWidth, 10) +
-                      parseInt(styles.paddingLeft, 10) +
-                      parseInt(styles.paddingRight, 10) +
-                      parseInt(styles.marginLeft, 10) +
-                      parseInt(styles.marginRight, 10);
-      }
-
-      if (body) {
-        body.style.width = (parentWidth - otherWidth) + 'px';
-      }
-    }
-  }
+  // - tooltip, completer, inputter,
+  // - focusManager, onVisibilityChange, requisition
 };
 
 exports.FFDisplay = FFDisplay;
diff --git a/toolkit/devtools/gcli/source/lib/gcli/mozui/inputter.js b/toolkit/devtools/gcli/source/lib/gcli/mozui/inputter.js
index 282fc51..1a724f1 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/mozui/inputter.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/mozui/inputter.js
@@ -27,14 +27,12 @@ var RESOLVED = Promise.resolve(true);
 
 /**
  * A wrapper to take care of the functions concerning an input element
- * @param options Object containing user customization properties, including:
- * - promptWidth (default=22px)
  * @param components Object that links to other UI components. GCLI provided:
  * - requisition
  * - focusManager
  * - element
  */
-function Inputter(options, components) {
+function Inputter(components) {
   this.requisition = components.requisition;
   this.focusManager = components.focusManager;
 
@@ -187,7 +185,7 @@ Inputter.prototype.onMouseUp = function(ev) {
 };
 
 /**
- * Handler for the Requisition.textChanged event
+ * Function called when we think the text might have changed
  */
 Inputter.prototype.textChanged = function() {
   if (!this.document) {
@@ -431,7 +429,7 @@ Inputter.prototype.onKeyDown = function(ev) {
  * if something went wrong.
  */
 Inputter.prototype.onKeyUp = function(ev) {
-  this.handleKeyUp(ev).then(null, util.errorHandler);
+  this.handleKeyUp(ev).catch(util.errorHandler);
 };
 
 /**
@@ -476,9 +474,9 @@ Inputter.prototype.handleKeyUp = function(ev) {
   this._completed = this.requisition.update(this.element.value);
   this._previousValue = this.element.value;
 
-  return this._completed.then(function(updated) {
+  return this._completed.then(function() {
     // Abort UI changes if this UI update has been overtaken
-    if (updated) {
+    if (this._previousValue === this.element.value) {
       this._choice = null;
       this.textChanged();
       this.onChoiceChange({ choice: this._choice });
@@ -506,7 +504,7 @@ Inputter.prototype._handleUpArrow = function() {
   // If the user is on a valid value, then we increment the value, but if
   // they've typed something that's not right we page through predictions
   if (this.assignment.getStatus() === Status.VALID) {
-    return this.requisition.increment(this.assignment).then(function() {
+    return this.requisition.nudge(this.assignment, 1).then(function() {
       // See notes on focusManager.onInputChange in onKeyDown
       this.textChanged();
       if (this.focusManager) {
@@ -538,7 +536,7 @@ Inputter.prototype._handleDownArrow = function() {
 
   // See notes above for the UP key
   if (this.assignment.getStatus() === Status.VALID) {
-    return this.requisition.decrement(this.assignment).then(function() {
+    return this.requisition.nudge(this.assignment, -1).then(function() {
       // See notes on focusManager.onInputChange in onKeyDown
       this.textChanged();
       if (this.focusManager) {
@@ -591,9 +589,8 @@ Inputter.prototype._handleTab = function(ev) {
   // 1 second) to the time of the keyup then we assume that we got them
   // both, and do the completion.
   if (hasContents && this.lastTabDownAt + 1000 > ev.timeStamp) {
-    // It's possible for TAB to not change the input, in which case the
-    // textChanged event will not fire, and the caret move will not be
-    // processed. So we check that this is done first
+    // It's possible for TAB to not change the input, in which case the caret
+    // move will not be processed. So we check that this is done first
     this._caretChange = Caret.TO_ARG_END;
     var inputState = this.getInputState();
     this._processCaretChange(inputState);
diff --git a/toolkit/devtools/gcli/source/lib/gcli/mozui/tooltip.js b/toolkit/devtools/gcli/source/lib/gcli/mozui/tooltip.js
index b31f05d..f72900a 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/mozui/tooltip.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/mozui/tooltip.js
@@ -33,9 +33,6 @@ var tooltipHtml =
 /**
  * A widget to display an inline dialog which allows the user to fill out
  * the arguments to a command.
- * @param options Object containing user customization properties, including:
- * - tooltipClass (default='gcli-tooltip'): Custom class name when generating
- *   the top level element which allows different layout systems
  * @param components Object that links to other UI components. GCLI provided:
  * - requisition: The Requisition to fill out
  * - inputter: An instance of Inputter
@@ -43,13 +40,13 @@ var tooltipHtml =
  * - panelElement (optional): The element to show/hide on visibility events
  * - element: The root element to populate
  */
-function Tooltip(options, components) {
+function Tooltip(components) {
   this.inputter = components.inputter;
   this.requisition = components.requisition;
   this.focusManager = components.focusManager;
 
   this.element = components.element;
-  this.element.classList.add(options.tooltipClass || 'gcli-tooltip');
+  this.element.classList.add('gcliterm-tooltip');
   this.document = this.element.ownerDocument;
 
   this.panelElement = components.panelElement;
@@ -176,7 +173,7 @@ Tooltip.prototype.choiceChanged = function(ev) {
     conversion.constrainPredictionIndex(context, ev.choice).then(function(choice) {
       this.field.menu._choice = choice;
       this.field.menu._updateHighlight();
-    }.bind(this)).then(null, util.errorHandler);
+    }.bind(this)).catch(util.errorHandler);
   }
 };
 
diff --git a/toolkit/devtools/gcli/source/lib/gcli/settings.js b/toolkit/devtools/gcli/source/lib/gcli/settings.js
index eb5c7f5..ab5f738 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/settings.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/settings.js
@@ -106,7 +106,6 @@ Settings.prototype.getAll = function(filter) {
 
 /**
  * Add a new setting
- * @return The new Setting object
  */
 Settings.prototype.add = function(prefSpec) {
   var setting = new Setting(this, prefSpec);
diff --git a/toolkit/devtools/gcli/source/lib/gcli/system.js b/toolkit/devtools/gcli/source/lib/gcli/system.js
new file mode 100644
index 0000000..89c79e0
--- /dev/null
+++ b/toolkit/devtools/gcli/source/lib/gcli/system.js
@@ -0,0 +1,322 @@
+/*
+ * Copyright 2012, Mozilla Foundation and contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+'use strict';
+
+var Promise = require('./util/promise').Promise;
+var util = require('./util/util');
+var Commands = require('./commands/commands').Commands;
+var Connectors = require('./connectors/connectors').Connectors;
+var Converters = require('./converters/converters').Converters;
+var Fields = require('./fields/fields').Fields;
+var Languages = require('./languages/languages').Languages;
+var Settings = require('./settings').Settings;
+var Types = require('./types/types').Types;
+
+/**
+ * This is the heart of the API that we expose to the outside.
+ * @param options Object that customizes how the system acts. Valid properties:
+ * - commands, connectors, converters, fields, languages, settings, types:
+ *   Custom configured manager objects for these item types
+ * - location: a system with a location will ignore commands that don't have a
+ *   matching runAt property. This is principly for client/server setups where
+ *   we import commands from the server to the client, so a system with
+ *   `{ location: 'client' }` will silently ignore commands with
+ *   `{ runAt: 'server' }`. Any system without a location will accept commands
+ *   with any runAt property (including none).
+ */
+exports.createSystem = function(options) {
+  options = options || {};
+  var location = options.location;
+
+  // The plural/singular thing may make you want to scream, but it allows us
+  // to say components[getItemType(item)], so a lookup here (and below) saves
+  // multiple lookups in the middle of the code
+  var components = {
+    connector: options.connectors || new Connectors(),
+    converter: options.converters || new Converters(),
+    field: options.fields || new Fields(),
+    language: options.languages || new Languages(),
+    type: options.types || new Types()
+  };
+  components.setting = new Settings(components.type);
+  components.command = new Commands(components.type, location);
+
+  var getItemType = function(item) {
+    if (item.item) {
+      return item.item;
+    }
+    // Some items are registered using the constructor so we need to check
+    // the prototype for the the type of the item
+    return (item.prototype && item.prototype.item) ?
+           item.prototype.item : 'command';
+  };
+
+  var addItem = function(item) {
+    try {
+      components[getItemType(item)].add(item);
+    }
+    catch (ex) {
+      if (item != null) {
+        console.error('While adding: ' + item.name);
+      }
+      throw ex;
+    }
+  };
+
+  var removeItem = function(item) {
+    components[getItemType(item)].remove(item);
+  };
+
+  /**
+   * loadableModules is a lookup of names to module loader functions (like
+   * the venerable 'require') to which we can pass a name and get back a
+   * JS object (or a promise of a JS object). This allows us to have custom
+   * loaders to get stuff from the filesystem etc.
+   */
+  var loadableModules = {};
+
+  /**
+   * loadedModules is a lookup by name of the things returned by the functions
+   * in loadableModules so we can track what we need to unload / reload.
+   */
+  var loadedModules = {};
+
+  var unloadModule = function(name) {
+    var existingModule = loadedModules[name];
+    if (existingModule != null) {
+      existingModule.items.forEach(removeItem);
+    }
+    delete loadedModules[name];
+  };
+
+  var loadModule = function(name) {
+    var existingModule = loadedModules[name];
+    unloadModule(name);
+
+    // And load the new items
+    try {
+      var loader = loadableModules[name];
+      return Promise.resolve(loader(name)).then(function(newModule) {
+        if (existingModule === newModule) {
+          return;
+        }
+
+        if (newModule == null) {
+          throw 'Module \'' + name + '\' not found';
+        }
+
+        if (newModule.items == null || typeof newModule.items.forEach !== 'function') {
+          console.log('Exported properties: ' + Object.keys(newModule).join(', '));
+          throw 'Module \'' + name + '\' has no \'items\' array export';
+        }
+
+        newModule.items.forEach(addItem);
+
+        loadedModules[name] = newModule;
+      });
+    }
+    catch (ex) {
+      console.error('Failed to load module ' + name + ': ' + ex);
+      console.error(ex.stack);
+
+      return Promise.resolve();
+    }
+  };
+
+  var pendingChanges = false;
+
+  var system = {
+    addItems: function(items) {
+      items.forEach(addItem);
+    },
+
+    removeItems: function(items) {
+      items.forEach(removeItem);
+    },
+
+    addItemsByModule: function(names, options) {
+      options = options || {};
+      if (typeof names === 'string') {
+        names = [ names ];
+      }
+      names.forEach(function(name) {
+        if (options.loader == null) {
+          options.loader = function(name) {
+            return require(name);
+          };
+        }
+        loadableModules[name] = options.loader;
+
+        if (options.delayedLoad) {
+          pendingChanges = true;
+        }
+        else {
+          loadModule(name).catch(console.error);
+        }
+      });
+    },
+
+    removeItemsByModule: function(name) {
+      delete loadableModules[name];
+      unloadModule(name);
+    },
+
+    load: function() {
+      if (!pendingChanges) {
+        return Promise.resolve();
+      }
+
+      // clone loadedModules, so we can remove what is left at the end
+      var modules = Object.keys(loadedModules).map(function(name) {
+        return loadedModules[name];
+      });
+
+      var promises = Object.keys(loadableModules).map(function(name) {
+        delete modules[name];
+        return loadModule(name);
+      });
+
+      Object.keys(modules).forEach(unloadModule);
+      pendingChanges = false;
+
+      return Promise.all(promises);
+    },
+
+    toString: function() {
+      return 'System [' +
+             'commands:' + components.command.getAll().length + ', ' +
+             'connectors:' + components.connector.getAll().length + ', ' +
+             'converters:' + components.converter.getAll().length + ', ' +
+             'fields:' + components.field.getAll().length + ', ' +
+             'settings:' + components.setting.getAll().length + ', ' +
+             'types:' + components.type.getTypeNames().length + ']';
+    }
+  };
+
+  Object.defineProperty(system, 'commands', {
+    get: function() { return components.command; },
+    enumerable: true
+  });
+
+  Object.defineProperty(system, 'connectors', {
+    get: function() { return components.connector; },
+    enumerable: true
+  });
+
+  Object.defineProperty(system, 'converters', {
+    get: function() { return components.converter; },
+    enumerable: true
+  });
+
+  Object.defineProperty(system, 'fields', {
+    get: function() { return components.field; },
+    enumerable: true
+  });
+
+  Object.defineProperty(system, 'languages', {
+    get: function() { return components.language; },
+    enumerable: true
+  });
+
+  Object.defineProperty(system, 'settings', {
+    get: function() { return components.setting; },
+    enumerable: true
+  });
+
+  Object.defineProperty(system, 'types', {
+    get: function() { return components.type; },
+    enumerable: true
+  });
+
+  return system;
+};
+
+/**
+ * Connect a local system with another at the other end of a connector
+ * @param system System to which we're adding commands
+ * @param front Front which allows access to the remote system from which we
+ * import commands
+ * @param customProps Array of strings specifying additional properties defined
+ * on remote commands that should be considered part of the metadata for the
+ * commands imported into the local system
+ */
+exports.connectFront = function(system, front, customProps) {
+  front.on('commandsChanged', function(specs) {
+    syncItems(system, front, customProps).catch(util.errorHandler);
+  });
+
+  return syncItems(system, front, customProps);
+};
+
+/**
+ * Remove the items in this system that came from a previous sync action, and
+ * re-add them. See connectFront() for explanation of properties
+ */
+function syncItems(system, front, customProps) {
+  return front.specs(customProps).then(function(specs) {
+    // Go through all the commands removing any that are associated with the
+    // given front. The method of association is the hack in addLocalFunctions.
+    system.commands.getAll().forEach(function(command) {
+      if (command.front === front) {
+        system.commands.remove(command);
+      }
+    });
+
+    var remoteItems = addLocalFunctions(specs, front);
+    system.addItems(remoteItems);
+
+    return system;
+  });
+};
+
+/**
+ * Take the data from the 'specs' command (or the 'commandsChanged' event) and
+ * add function to proxy the execution back over the front
+ */
+function addLocalFunctions(specs, front) {
+  // Inject an 'exec' function into the commands, and the front into
+  // all the remote types
+  specs.forEach(function(commandSpec) {
+    // HACK: Tack the front to the command so we know how to remove it
+    // in syncItems() above
+    commandSpec.front = front;
+
+    // Tell the type instances for a command how to contact their counterparts
+    // Don't confuse this with setting the front on the commandSpec which is
+    // about associating a proxied command with it's source for later removal.
+    // This is actually going to be used by the type
+    commandSpec.params.forEach(function(param) {
+      if (typeof param.type !== 'string') {
+        param.type.front = front;
+      }
+    });
+
+    if (!commandSpec.isParent) {
+      commandSpec.exec = function(args, context) {
+        var typed = (context.prefix ? context.prefix + ' ' : '') + context.typed;
+        return front.execute(typed).then(function(reply) {
+          var typedData = context.typedData(reply.type, reply.data);
+          return reply.isError ? Promise.reject(typedData) : typedData;
+        });
+      };
+    }
+
+    commandSpec.isProxy = true;
+  });
+
+  return specs;
+}
diff --git a/toolkit/devtools/gcli/source/lib/gcli/types/date.js b/toolkit/devtools/gcli/source/lib/gcli/types/date.js
index 99a77fa..b3225905 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/types/date.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/types/date.js
@@ -227,35 +227,22 @@ exports.items = [
       return Promise.resolve(new Conversion(value, arg));
     },
 
-    decrement: function(value, context) {
+    nudge: function(value, by, context) {
       if (!isDate(value)) {
         return new Date();
       }
 
       var newValue = new Date(value);
-      newValue.setDate(value.getDate() - this.step);
+      newValue.setDate(value.getDate() + (by * this.step));
 
-      if (newValue >= this.getMin(context)) {
-        return newValue;
-      }
-      else {
+      if (newValue < this.getMin(context)) {
         return this.getMin(context);
       }
-    },
-
-    increment: function(value, context) {
-      if (!isDate(value)) {
-        return new Date();
-      }
-
-      var newValue = new Date(value);
-      newValue.setDate(value.getDate() + this.step);
-
-      if (newValue <= this.getMax(context)) {
-        return newValue;
+      else if (newValue > this.getMax(context)) {
+        return this.getMax();
       }
       else {
-        return this.getMax();
+        return newValue;
       }
     }
   }
diff --git a/toolkit/devtools/gcli/source/lib/gcli/types/delegate.js b/toolkit/devtools/gcli/source/lib/gcli/types/delegate.js
index 50597f6..940bf55 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/types/delegate.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/types/delegate.js
@@ -19,6 +19,7 @@
 var Promise = require('../util/promise').Promise;
 var Conversion = require('./types').Conversion;
 var Status = require('./types').Status;
+var BlankArgument = require('./types').BlankArgument;
 
 /**
  * The types we expose for registration
@@ -29,14 +30,6 @@ exports.items = [
     item: 'type',
     name: 'delegate',
 
-    constructor: function() {
-      if (typeof this.delegateType !== 'function' &&
-          typeof this.delegateType !== 'string') {
-        throw new Error('Instances of DelegateType need typeSpec.delegateType' +
-                        ' to be a function that returns a type');
-      }
-    },
-
     getSpec: function(commandName, paramName) {
       return {
         name: 'delegate',
@@ -47,9 +40,7 @@ exports.items = [
     // Child types should implement this method to return an instance of the type
     // that should be used. If no type is available, or some sort of temporary
     // placeholder is required, BlankType can be used.
-    delegateType: function(context) {
-      throw new Error('Not implemented');
-    },
+    delegateType: undefined,
 
     stringify: function(value, context) {
       return this.getType(context).then(function(delegated) {
@@ -63,23 +54,19 @@ exports.items = [
       }.bind(this));
     },
 
-    decrement: function(value, context) {
+    nudge: function(value, by, context) {
       return this.getType(context).then(function(delegated) {
-        return delegated.decrement ?
-               delegated.decrement(value, context) :
-               undefined;
-      }.bind(this));
-    },
-
-    increment: function(value, context) {
-      return this.getType(context).then(function(delegated) {
-        return delegated.increment ?
-               delegated.increment(value, context) :
+        return delegated.nudge ?
+               delegated.nudge(value, by, context) :
                undefined;
       }.bind(this));
     },
 
     getType: function(context) {
+      if (this.delegateType === undefined) {
+        return Promise.resolve(this.types.createType('blank'));
+      }
+
       var type = this.delegateType(context);
       if (typeof type.parse !== 'function') {
         type = this.types.createType(type);
@@ -87,8 +74,8 @@ exports.items = [
       return Promise.resolve(type);
     },
 
-    // DelegateType is designed to be inherited from, so DelegateField needs a way
-    // to check if something works like a delegate without using 'name'
+    // DelegateType is designed to be inherited from, so DelegateField needs a
+    // way to check if something works like a delegate without using 'name'
     isDelegate: true,
 
     // Technically we perhaps should proxy this, except that properties are
@@ -99,12 +86,36 @@ exports.items = [
   {
     item: 'type',
     name: 'remote',
-    param: undefined,
+    paramName: undefined,
+    blankIsValid: false,
+
+    getSpec: function(commandName, paramName) {
+      return {
+        name: 'remote',
+        commandName: commandName,
+        paramName: paramName,
+        blankIsValid: this.blankIsValid
+      };
+    },
+
+    getBlank: function(context) {
+      if (this.blankIsValid) {
+        return new Conversion({ stringified: '' },
+                              new BlankArgument(), Status.VALID);
+      }
+      else {
+        return new Conversion(undefined, new BlankArgument(),
+                              Status.INCOMPLETE, '');
+      }
+    },
 
     stringify: function(value, context) {
+      if (value == null) {
+        return '';
+      }
       // remote types are client only, and we don't attempt to transfer value
       // objects to the client (we can't be sure the are jsonable) so it is a
-      // but strange to be asked to stringify a value object, however since
+      // bit strange to be asked to stringify a value object, however since
       // parse creates a Conversion with a (fake) value object we might be
       // asked to stringify that. We can stringify fake value objects.
       if (typeof value.stringified === 'string') {
@@ -114,26 +125,16 @@ exports.items = [
     },
 
     parse: function(arg, context) {
-      var args = { typed: context.typed, param: this.param };
-      return this.connection.call('typeparse', args).then(function(json) {
+      return this.front.parseType(context.typed, this.paramName).then(function(json) {
         var status = Status.fromString(json.status);
-        var val = { stringified: arg.text };
-        return new Conversion(val, arg, status, json.message, json.predictions);
-      });
-    },
-
-    decrement: function(value, context) {
-      var args = { typed: context.typed, param: this.param };
-      return this.connection.call('typedecrement', args).then(function(json) {
-        return { stringified: json.arg };
-      });
+        return new Conversion(undefined, arg, status, json.message, json.predictions);
+      }.bind(this));
     },
 
-    increment: function(value, context) {
-      var args = { typed: context.typed, param: this.param };
-      return this.connection.call('typeincrement', args).then(function(json) {
+    nudge: function(value, by, context) {
+      return this.front.nudgeType(context.typed, by, this.paramName).then(function(json) {
         return { stringified: json.arg };
-      });
+      }.bind(this));
     }
   },
   // 'blank' is a type for use with DelegateType when we don't know yet.
diff --git a/toolkit/devtools/gcli/source/lib/gcli/types/javascript.js b/toolkit/devtools/gcli/source/lib/gcli/types/javascript.js
index a62d49c..1cbad2c 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/types/javascript.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/types/javascript.js
@@ -24,38 +24,6 @@ var Type = require('./types').Type;
 var Status = require('./types').Status;
 
 /**
- * The object against which we complete, which is usually 'window' if it exists
- * but could be something else in non-web-content environments.
- */
-var globalObject;
-if (typeof window !== 'undefined') {
-  globalObject = window;
-}
-
-/**
- * Setter for the object against which JavaScript completions happen
- */
-exports.setGlobalObject = function(obj) {
-  globalObject = obj;
-};
-
-/**
- * Getter for the object against which JavaScript completions happen, for use
- * in testing
- */
-exports.getGlobalObject = function() {
-  return globalObject;
-};
-
-/**
- * Remove registration of object against which JavaScript completions happen
- */
-exports.unsetGlobalObject = function() {
-  globalObject = undefined;
-};
-
-
-/**
  * 'javascript' handles scripted input
  */
 function JavascriptType(typeSpec) {
@@ -82,7 +50,8 @@ JavascriptType.MAX_COMPLETION_MATCHES = 10;
 
 JavascriptType.prototype.parse = function(arg, context) {
   var typed = arg.text;
-  var scope = globalObject;
+  var scope = (context.environment.window == null) ?
+              null : context.environment.window;
 
   // No input is undefined
   if (typed === '') {
diff --git a/toolkit/devtools/gcli/source/lib/gcli/types/node.js b/toolkit/devtools/gcli/source/lib/gcli/types/node.js
index ae4bd70..0ce8010 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/types/node.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/types/node.js
@@ -25,42 +25,13 @@ var Conversion = require('./types').Conversion;
 var BlankArgument = require('./types').BlankArgument;
 
 /**
- * The object against which we complete, which is usually 'window' if it exists
- * but could be something else in non-web-content environments.
- */
-var doc;
-if (typeof document !== 'undefined') {
-  doc = document;
-}
-
-/**
- * Setter for the document that contains the nodes we're matching
- */
-exports.setDocument = function(document) {
-  doc = document;
-};
-
-/**
- * Undo the effects of setDocument()
- */
-exports.unsetDocument = function() {
-  doc = undefined;
-};
-
-/**
- * Getter for the document that contains the nodes we're matching
- * Most for changing things back to how they were for unit testing
- */
-exports.getDocument = function() {
-  return doc;
-};
-
-/**
  * Helper functions to be attached to the prototypes of NodeType and
  * NodeListType to allow terminal to tell us which nodes should be highlighted
  */
 function onEnter(assignment) {
-  assignment.highlighter = new Highlighter(doc);
+  // TODO: GCLI doesn't support passing a context to notifications of cursor
+  // position, so onEnter/onLeave/onChange are disabled below until we fix this
+  assignment.highlighter = new Highlighter(context.environment.window.document);
   assignment.highlighter.nodelist = assignment.conversion.matches;
 }
 
@@ -94,8 +65,12 @@ exports.items = [
     item: 'type',
     name: 'node',
 
-    getSpec: function() {
-      return 'node';
+    getSpec: function(commandName, paramName) {
+      return {
+        name: 'remote',
+        commandName: commandName,
+        paramName: paramName
+      };
     },
 
     stringify: function(value, context) {
@@ -110,12 +85,11 @@ exports.items = [
 
       if (arg.text === '') {
         reply = new Conversion(undefined, arg, Status.INCOMPLETE);
-        reply.matches = util.createEmptyNodeList(doc);
       }
       else {
         var nodes;
         try {
-          nodes = doc.querySelectorAll(arg.text);
+          nodes = context.environment.window.document.querySelectorAll(arg.text);
           if (nodes.length === 0) {
             reply = new Conversion(undefined, arg, Status.INCOMPLETE,
                                    l10n.lookup('nodeParseNone'));
@@ -142,9 +116,9 @@ exports.items = [
       return Promise.resolve(reply);
     },
 
-    onEnter: onEnter,
-    onLeave: onLeave,
-    onChange: onChange
+    // onEnter: onEnter,
+    // onLeave: onLeave,
+    // onChange: onChange
   },
   {
     // The 'nodelist' type is a CSS expression that refers to a node list
@@ -167,14 +141,21 @@ exports.items = [
       }
     },
 
-    getSpec: function() {
-      return this.allowEmpty ?
-             { name: 'nodelist', allowEmpty: true } :
-             'nodelist';
+    getSpec: function(commandName, paramName) {
+      return {
+        name: 'remote',
+        commandName: commandName,
+        paramName: paramName,
+        blankIsValid: true
+      };
     },
 
     getBlank: function(context) {
-      var emptyNodeList = (doc == null ? [] : util.createEmptyNodeList(doc));
+      var emptyNodeList = [];
+      if (context != null && context.environment.window != null) {
+        var doc = context.environment.window.document;
+        emptyNodeList = util.createEmptyNodeList(doc);
+      }
       return new Conversion(emptyNodeList, new BlankArgument(), Status.VALID);
     },
 
@@ -190,16 +171,16 @@ exports.items = [
       try {
         if (arg.text === '') {
           reply = new Conversion(undefined, arg, Status.INCOMPLETE);
-          reply.matches = util.createEmptyNodeList(doc);
         }
         else {
-          var nodes = doc.querySelectorAll(arg.text);
+          var nodes = context.environment.window.document.querySelectorAll(arg.text);
 
           if (nodes.length === 0 && !this.allowEmpty) {
             reply = new Conversion(undefined, arg, Status.INCOMPLETE,
                                    l10n.lookup('nodeParseNone'));
           }
           else {
+            nodes.__gcliQuery = arg.text;
             reply = new Conversion(nodes, arg, Status.VALID, '');
           }
 
@@ -209,14 +190,13 @@ exports.items = [
       catch (ex) {
         reply = new Conversion(undefined, arg, Status.ERROR,
                                l10n.lookup('nodeParseSyntax'));
-        reply.matches = util.createEmptyNodeList(doc);
       }
 
       return Promise.resolve(reply);
     },
 
-    onEnter: onEnter,
-    onLeave: onLeave,
-    onChange: onChange
+    // onEnter: onEnter,
+    // onLeave: onLeave,
+    // onChange: onChange
   }
 ];
diff --git a/toolkit/devtools/gcli/source/lib/gcli/types/number.js b/toolkit/devtools/gcli/source/lib/gcli/types/number.js
index bec67b1..5ed287d 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/types/number.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/types/number.js
@@ -132,26 +132,28 @@ exports.items = [
       return Promise.resolve(new Conversion(value, arg));
     },
 
-    decrement: function(value, context) {
+    nudge: function(value, by, context) {
       if (typeof value !== 'number' || isNaN(value)) {
-        return this.getMax(context) || 1;
+        if (by < 0) {
+          return this.getMax(context) || 1;
+        }
+        else {
+          var min = this.getMin(context);
+          return min != null ? min : 0;
+        }
       }
-      var newValue = value - this.step;
-      // Snap to the nearest incremental of the step
-      newValue = Math.ceil(newValue / this.step) * this.step;
-      return this._boundsCheck(newValue, context);
-    },
 
-    increment: function(value, context) {
-      if (typeof value !== 'number' || isNaN(value)) {
-        var min = this.getMin(context);
-        return min != null ? min : 0;
-      }
-      var newValue = value + this.step;
+      var newValue = value + (by * this.step);
+
       // Snap to the nearest incremental of the step
-      newValue = Math.floor(newValue / this.step) * this.step;
-      if (this.getMax(context) == null) {
-        return newValue;
+      if (by < 0) {
+        newValue = Math.ceil(newValue / this.step) * this.step;
+      }
+      else {
+        newValue = Math.floor(newValue / this.step) * this.step;
+        if (this.getMax(context) == null) {
+          return newValue;
+        }
       }
       return this._boundsCheck(newValue, context);
     },
diff --git a/toolkit/devtools/gcli/source/lib/gcli/types/resource.js b/toolkit/devtools/gcli/source/lib/gcli/types/resource.js
index fc939bf..67a5b60 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/types/resource.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/types/resource.js
@@ -23,38 +23,6 @@ exports.clearResourceCache = function() {
 };
 
 /**
- * The object against which we complete, which is usually 'window' if it exists
- * but could be something else in non-web-content environments.
- */
-var doc;
-if (typeof document !== 'undefined') {
-  doc = document;
-}
-
-/**
- * Setter for the document that contains the nodes we're matching
- */
-exports.setDocument = function(document) {
-  doc = document;
-};
-
-/**
- * Undo the effects of setDocument()
- */
-exports.unsetDocument = function() {
-  ResourceCache.clear();
-  doc = undefined;
-};
-
-/**
- * Getter for the document that contains the nodes we're matching
- * Most for changing things back to how they were for unit testing
- */
-exports.getDocument = function() {
-  return doc;
-};
-
-/**
  * Resources are bits of CSS and JavaScript that the page either includes
  * directly or as a result of reading some remote resource.
  * Resource should not be used directly, but instead through a sub-class like
@@ -85,7 +53,7 @@ Resource.TYPE_CSS = 'text/css';
 function CssResource(domSheet) {
   this.name = domSheet.href;
   if (!this.name) {
-    this.name = domSheet.ownerNode.id ?
+    this.name = domSheet.ownerNode && domSheet.ownerNode.id ?
             'css#' + domSheet.ownerNode.id :
             'inline-css';
   }
@@ -103,12 +71,13 @@ CssResource.prototype.loadContents = function() {
   }.bind(this));
 };
 
-CssResource._getAllStyles = function() {
+CssResource._getAllStyles = function(context) {
   var resources = [];
-  if (doc == null) {
+  if (context.environment.window == null) {
     return resources;
   }
 
+  var doc = context.environment.window.document;
   Array.prototype.forEach.call(doc.styleSheets, function(domSheet) {
     CssResource._getStyle(domSheet, resources);
   });
@@ -182,11 +151,12 @@ ScriptResource.prototype.loadContents = function() {
   }.bind(this));
 };
 
-ScriptResource._getAllScripts = function() {
-  if (doc == null) {
+ScriptResource._getAllScripts = function(context) {
+  if (context.environment.window == null) {
     return [];
   }
 
+  var doc = context.environment.window.document;
   var scriptNodes = doc.querySelectorAll('script');
   var resources = Array.prototype.map.call(scriptNodes, function(scriptNode) {
     var resource = ResourceCache.get(scriptNode);
@@ -283,13 +253,15 @@ exports.items = [
       }
     },
 
-    lookup: function() {
+    lookup: function(context) {
       var resources = [];
       if (this.include !== Resource.TYPE_SCRIPT) {
-        Array.prototype.push.apply(resources, CssResource._getAllStyles());
+        Array.prototype.push.apply(resources,
+                                   CssResource._getAllStyles(context));
       }
       if (this.include !== Resource.TYPE_CSS) {
-        Array.prototype.push.apply(resources, ScriptResource._getAllScripts());
+        Array.prototype.push.apply(resources,
+                                   ScriptResource._getAllScripts(context));
       }
 
       return new Promise(function(resolve, reject) {
diff --git a/toolkit/devtools/gcli/source/lib/gcli/types/selection.js b/toolkit/devtools/gcli/source/lib/gcli/types/selection.js
index 5ec3d38..2ed41ce 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/types/selection.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/types/selection.js
@@ -126,19 +126,11 @@ SelectionType.prototype.getLookup = function(context) {
   var reply;
 
   if (this.remoteLookup) {
-    reply = this.connection.call('selectioninfo', {
-      action: 'lookup',
-      commandName: this.commandName,
-      paramName: this.paramName
-    });
+    reply = this.front.getSelectionLookup(this.commandName, this.paramName);
     reply = resolve(reply, context);
   }
   else if (this.remoteData) {
-    reply = this.connection.call('selectioninfo', {
-      action: 'data',
-      commandName: this.commandName,
-      paramName: this.paramName
-    });
+    reply = this.front.getSelectionData(this.commandName, this.paramName);
     reply = resolve(reply, context).then(this._dataToLookup);
   }
   else if (typeof this.lookup === 'function') {
@@ -227,7 +219,7 @@ exports.findPredictions = function(arg, lookup) {
   }
 
   // Exact hidden matches. If 'hidden: true' then we only allow exact matches
-  // All the tests after here check that !option.value.hidden
+  // All the tests after here check that !isHidden(option)
   for (i = 0; i < lookup.length && predictions.length < maxPredictions; i++) {
     option = lookup[i];
     if (option.name === arg.text) {
@@ -238,7 +230,7 @@ exports.findPredictions = function(arg, lookup) {
   // Start with prefix matching
   for (i = 0; i < lookup.length && predictions.length < maxPredictions; i++) {
     option = lookup[i];
-    if (option._gcliLowerName.indexOf(match) === 0 && !option.value.hidden) {
+    if (option._gcliLowerName.indexOf(match) === 0 && !isHidden(option)) {
       if (predictions.indexOf(option) === -1) {
         predictions.push(option);
       }
@@ -249,7 +241,7 @@ exports.findPredictions = function(arg, lookup) {
   if (predictions.length < (maxPredictions / 2)) {
     for (i = 0; i < lookup.length && predictions.length < maxPredictions; i++) {
       option = lookup[i];
-      if (option._gcliLowerName.indexOf(match) !== -1 && !option.value.hidden) {
+      if (option._gcliLowerName.indexOf(match) !== -1 && !isHidden(option)) {
         if (predictions.indexOf(option) === -1) {
           predictions.push(option);
         }
@@ -261,7 +253,7 @@ exports.findPredictions = function(arg, lookup) {
   if (predictions.length === 0) {
     var names = [];
     lookup.forEach(function(opt) {
-      if (!opt.value.hidden) {
+      if (!isHidden(opt)) {
         names.push(opt.name);
       }
     });
@@ -306,11 +298,21 @@ exports.convertPredictions = function(arg, predictions) {
                         Promise.resolve(predictions));
 };
 
+/**
+ * Checking that an option is hidden involves messing in properties on the
+ * value right now (which isn't a good idea really) we really should be marking
+ * that on the option, so this encapsulates the problem
+ */
+function isHidden(option) {
+  return option.hidden === true ||
+         (option.value != null && option.value.hidden);
+}
+
 SelectionType.prototype.getBlank = function(context) {
   var predictFunc = function(context2) {
     return Promise.resolve(this.getLookup(context2)).then(function(lookup) {
       return lookup.filter(function(option) {
-        return !option.value.hidden;
+        return !isHidden(option);
       }).slice(0, Conversion.maxPredictions - 1);
     });
   }.bind(this);
@@ -320,19 +322,40 @@ SelectionType.prototype.getBlank = function(context) {
 };
 
 /**
- * For selections, up is down and black is white. It's like this, given a list
- * [ a, b, c, d ], it's natural to think that it starts at the top and that
- * going up the list, moves towards 'a'. However 'a' has the lowest index, so
- * for SelectionType, up is down and down is up.
- * Sorry.
+ * Increment and decrement are confusing for selections. +1 is -1 and -1 is +1.
+ * Given an array e.g. [ 'a', 'b', 'c' ] with the current selection on 'b',
+ * displayed to the user in the natural way, i.e.:
+ *
+ *   'a'
+ *   'b' <- highlighted as current value
+ *   'c'
+ *
+ * Pressing the UP arrow should take us to 'a', which decrements this index
+ * (compare pressing UP on a number which would increment the number)
+ *
+ * So for selections, we treat +1 as -1 and -1 as +1.
  */
-SelectionType.prototype.decrement = function(value, context) {
+SelectionType.prototype.nudge = function(value, by, context) {
   return this.getLookup(context).then(function(lookup) {
     var index = this._findValue(lookup, value);
     if (index === -1) {
-      index = 0;
+      if (by < 0) {
+        // We're supposed to be doing a decrement (which means +1), but the
+        // value isn't found, so we reset the index to the top of the list
+        // which is index 0
+        index = 0;
+      }
+      else {
+        // For an increment operation when there is nothing to start from, we
+        // want to start from the top, i.e. index 0, so the value before we
+        // 'increment' (see note above) must be 1.
+        index = 1;
+      }
     }
-    index++;
+
+    // This is where we invert the sense of up/down (see doc comment)
+    index -= by;
+
     if (index >= lookup.length) {
       index = 0;
     }
@@ -341,26 +364,6 @@ SelectionType.prototype.decrement = function(value, context) {
 };
 
 /**
- * See note on SelectionType.decrement()
- */
-SelectionType.prototype.increment = function(value, context) {
-  return this.getLookup(context).then(function(lookup) {
-    var index = this._findValue(lookup, value);
-    if (index === -1) {
-      // For an increment operation when there is nothing to start from, we
-      // want to start from the top, i.e. index 0, so the value before we
-      // 'increment' (see note above) must be 1.
-      index = 1;
-    }
-    index--;
-    if (index < 0) {
-      index = lookup.length - 1;
-    }
-    return lookup[index].value;
-  }.bind(this));
-};
-
-/**
  * Walk through an array of { name:.., value:... } objects looking for a
  * matching value (using strict equality), returning the matched index (or -1
  * if not found).
diff --git a/toolkit/devtools/gcli/source/lib/gcli/types/setting.js b/toolkit/devtools/gcli/source/lib/gcli/types/setting.js
index 509b951..26c6f40 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/types/setting.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/types/setting.js
@@ -25,12 +25,15 @@ exports.items = [
     cacheable: true,
     lookup: function(context) {
       var settings = context.system.settings;
+
+      // Lazily add a settings.onChange listener to clear the cache
       if (!this._registeredListener) {
         settings.onChange.add(function(ev) {
           this.clearCache();
         }, this);
         this._registeredListener = true;
       }
+
       return settings.getAll().map(function(setting) {
         return { name: setting.name, value: setting };
       });
diff --git a/toolkit/devtools/gcli/source/lib/gcli/types/types.js b/toolkit/devtools/gcli/source/lib/gcli/types/types.js
index e92d262..014b593 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/types/types.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/types/types.js
@@ -946,9 +946,9 @@ function Type() {
 }
 
 /**
- * Get a JSONable data structure that entirely describes this type
- * @param commandName/paramName The names of the command and parameter which we
- * are remoting to help the server get back to the remoted action.
+ * Get a JSONable data structure that entirely describes this type.
+ * commandName and paramName are the names of the command and parameter which
+ * we are remoting to help the server get back to the remoted action.
  */
 Type.prototype.getSpec = function(commandName, paramName) {
   throw new Error('Not implemented');
@@ -995,18 +995,12 @@ Type.prototype.parseString = function(str, context) {
 Type.prototype.name = undefined;
 
 /**
- * If there is some concept of a higher value, return it,
+ * If there is some concept of a lower or higher value, return it,
  * otherwise return undefined.
+ * @param by number indicating how much to nudge by, usually +1 or -1 which is
+ * caused by the user pressing the UP/DOWN keys with the cursor in this type
  */
-Type.prototype.increment = function(value, context) {
-  return undefined;
-};
-
-/**
- * If there is some concept of a lower value, return it,
- * otherwise return undefined.
- */
-Type.prototype.decrement = function(value, context) {
+Type.prototype.nudge = function(value, by, context) {
   return undefined;
 };
 
diff --git a/toolkit/devtools/gcli/source/lib/gcli/types/url.js b/toolkit/devtools/gcli/source/lib/gcli/types/url.js
index 8baf743..8a782bb 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/types/url.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/types/url.js
@@ -61,7 +61,7 @@ exports.items = [
           }.bind(this));
 
           // Try to create a URL with the current page as a base ref
-          if (context.environment.window) {
+          if ('window' in context.environment) {
             try {
               var base = context.environment.window.location.href;
               var localized = host.createUrl(arg.text, base);
diff --git a/toolkit/devtools/gcli/source/lib/gcli/ui/menu.js b/toolkit/devtools/gcli/source/lib/gcli/ui/menu.js
index fef0210..52b4153 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/ui/menu.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/ui/menu.js
@@ -256,16 +256,16 @@ function getHighlightingProxy(item, match, document) {
 }
 
 /**
- * @return The current choice index
+ * @return {int} current choice index
  */
 Menu.prototype.getChoiceIndex = function() {
   return this._choice == null ? 0 : this._choice;
 };
 
 /**
- * Highlight the next option
+ * Highlight the next (for by=1) or previous (for by=-1) option
  */
-Menu.prototype.incrementChoice = function() {
+Menu.prototype.nudgeChoice = function(by) {
   if (this._choice == null) {
     this._choice = 0;
   }
@@ -273,20 +273,7 @@ Menu.prototype.incrementChoice = function() {
   // There's an annoying up is down thing here, the menu is presented
   // with the zeroth index at the top working down, so the UP arrow needs
   // pick the choice below because we're working down
-  this._choice--;
-  this._updateHighlight();
-};
-
-/**
- * Highlight the previous option
- */
-Menu.prototype.decrementChoice = function() {
-  if (this._choice == null) {
-    this._choice = 0;
-  }
-
-  // See incrementChoice
-  this._choice++;
+  this._choice -= by;
   this._updateHighlight();
 };
 
diff --git a/toolkit/devtools/gcli/source/lib/gcli/util/host.js b/toolkit/devtools/gcli/source/lib/gcli/util/host.js
index 7eb6eb0..b7c84d7 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/util/host.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/util/host.js
@@ -219,7 +219,7 @@ exports.script.useTarget = function(tgt) {
 /**
  * Execute some JavaScript
  */
-exports.script.eval = function(javascript) {
+exports.script.evaluate = function(javascript) {
   return new Promise(function(resolve, reject) {
     var onResult = function(response) {
       var output = response.result;
diff --git a/toolkit/devtools/gcli/source/lib/gcli/util/promise.js b/toolkit/devtools/gcli/source/lib/gcli/util/promise.js
index 7550e5b..a6b80de 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/util/promise.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/util/promise.js
@@ -16,95 +16,4 @@
 
 'use strict';
 
-var Cu = require('chrome').Cu;
-var Cc = require('chrome').Cc;
-var Ci = require('chrome').Ci;
-
-/*
- * Minimalist implementation of ES6 promises built on SDK promises. 2 things to
- * know:
- * - There is a hack in .then() to be async which matches A+ and toolkit
- *   promises. GCLI code works with either sync or async promises, but async
- *   is more correct
- * - There is an additional Promise.defer function which to matches the call
- *   in toolkit promises, which in turn matches the call in SDK promises
- *
- * Why not use toolkit promises directly? Because there is a strange bug that
- * we are investigating where thread executions vanish.
- * 
- * When we've solved the debugger/sdk/promise/gcli/helpers/overlap problem then
- * we should use this instead:
- * module.exports = exports = require('resource://gre/modules/Promise.jsm');
- */
-
-var promise = require('resource://gre/modules/devtools/deprecated-sync-thenables.js', {});
-
-/**
- * An implementation of ES6 promises in terms of SDK promises
- */
-var Promise = function(executor) {
-  this.deferred = promise.defer();
-  try {
-    executor.call(null, this.deferred.resolve, this.deferred.reject);
-  }
-  catch (ex) {
-    this.deferred.reject(ex);
-  }
-}
-
-var async = true;
-
-/**
- * The sync version of this would look like
- *     Promise.prototype.then = function(onResolve, onReject) {
- *      return this.deferred.promise.then(onResolve, onReject);
- *    };
- */
-Promise.prototype.then = function(onResolve, onReject) {
-  return new Promise(function(resolve, reject) {
-    setTimeout(function() {
-      try {
-        resolve(this.deferred.promise.then(onResolve, onReject));
-      }
-      catch (ex) {
-        reject(ex);
-      }
-    }.bind(this), 0);
-  }.bind(this));
-};
-
-Promise.all = promise.all;
-Promise.resolve = promise.resolve;
-Promise.defer = promise.defer;
-
-exports.Promise = Promise;
-
-
-/**
- * Implementation of the setTimeout/clearTimeout web APIs taken from the old
- * Timer.jsm module
- */
-
-// This gives us >=2^30 unique timer IDs, enough for 1 per ms for 12.4 days.
-var nextTimeoutId = 1; // setTimeout must return a positive integer
-
-var timeoutTable = new Map(); // int -> nsITimer
-
-var setTimeout = function(callback, millis) {
-  let id = nextTimeoutId++;
-  let timer = Cc["@mozilla.org/timer;1"].createInstance(Ci.nsITimer);
-  timer.initWithCallback(function setTimeout_timer() {
-    timeoutTable.delete(id);
-    callback.call(undefined);
-  }, millis, timer.TYPE_ONE_SHOT);
-
-  timeoutTable.set(id, timer);
-  return id;
-}
-
-var clearTimeout = function(aId) {
-  if (timeoutTable.has(aId)) {
-    timeoutTable.get(aId).cancel();
-    timeoutTable.delete(aId);
-  }
-}
+exports.Promise = require("resource://gre/modules/Promise.jsm").Promise;
diff --git a/toolkit/devtools/gcli/source/lib/gcli/util/util.js b/toolkit/devtools/gcli/source/lib/gcli/util/util.js
index 800e416..16fade57 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/util/util.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/util/util.js
@@ -255,30 +255,20 @@ exports.promiseEach = function(array, action, scope) {
     return Promise.resolve([]);
   }
 
-  return new Promise(function(resolve, reject) {
-    var replies = [];
-
-    var callNext = function(index) {
-      var onSuccess = function(reply) {
-        replies[index] = reply;
-
-        if (index + 1 >= array.length) {
-          resolve(replies);
-        }
-        else {
-          callNext(index + 1);
-        }
-      };
-
-      var onFailure = function(ex) {
-        reject(ex);
-      };
-
-      var reply = action.call(scope, array[index], index, array);
-      Promise.resolve(reply).then(onSuccess).then(null, onFailure);
-    };
-
-    callNext(0);
+  var allReply = [];
+  var promise = Promise.resolve();
+
+  array.forEach(function(member, i) {
+    promise = promise.then(function() {
+      var reply = action.call(scope, member, i, array);
+      return Promise.resolve(reply).then(function(data) {
+        allReply[i] = data;
+      });
+    });
+  });
+
+  return promise.then(function() {
+    return allReply;
   });
 };
 
diff --git a/toolkit/devtools/server/actors/gcli.js b/toolkit/devtools/server/actors/gcli.js
index f35d8c9..254d8a7 100644
--- a/toolkit/devtools/server/actors/gcli.js
+++ b/toolkit/devtools/server/actors/gcli.js
@@ -4,58 +4,61 @@
 
 "use strict";
 
-var Cu = require('chrome').Cu;
-var XPCOMUtils = Cu.import("resource://gre/modules/XPCOMUtils.jsm", {}).XPCOMUtils;
-
-XPCOMUtils.defineLazyModuleGetter(this, "console",
-                                  "resource://gre/modules/devtools/Console.jsm");
-XPCOMUtils.defineLazyModuleGetter(this, "CommandUtils",
-                                  "resource:///modules/devtools/DeveloperToolbar.jsm");
-
-XPCOMUtils.defineLazyGetter(this, "Requisition", function() {
-  return require("gcli/cli").Requisition;
-});
-
-XPCOMUtils.defineLazyGetter(this, "centralCanon", function() {
-  return require("gcli/commands/commands").centralCanon;
-});
-
-var util = require('gcli/util/util');
-
-var protocol = require("devtools/server/protocol");
-var method = protocol.method;
-var Arg = protocol.Arg;
-var Option = protocol.Option;
-var RetVal = protocol.RetVal;
+const { Task } = require("resource://gre/modules/Task.jsm");
+const {
+  method, Arg, Option, RetVal, Front, FrontClass, Actor, ActorClass
+} = require("devtools/server/protocol");
+const events = require("sdk/event/core");
 
 /**
  * Manage remote connections that want to talk to GCLI
  */
-var GcliActor = exports.GcliActor = protocol.ActorClass({
+const GcliActor = ActorClass({
   typeName: "gcli",
 
+  events: {
+    "commands-changed" : {
+      type: "commandsChanged",
+      commandsChanged: Arg(0, "json")
+    }
+  },
+
   initialize: function(conn, tabActor) {
-    protocol.Actor.prototype.initialize.call(this, conn);
-    this.tabActor = tabActor;
-    let browser = tabActor.browser;
-
-    let environment = {
-      chromeWindow: browser.ownerGlobal,
-      chromeDocument: browser.ownerDocument,
-      window: browser.contentWindow,
-      document: browser.contentDocument
-    };
-
-    this.requisition = new Requisition({ environment: env });
+    Actor.prototype.initialize.call(this, conn);
+
+    this._commandsChanged = this._commandsChanged.bind(this);
+
+    this._tabActor = tabActor;
+    this._requisitionPromise = undefined; // see _getRequisition()
+  },
+
+  destroy: function() {
+    this._requisitionPromise = undefined;
+    this._tabActor = undefined;
+
+    protocol.Actor.prototype.destroy.call(this);
+
+    return this._getRequisition().then(requisition => {
+      requisition.system.commands.onCommandsChange.remove(this._commandsChanged);
+      this._commandsChanged = undefined;
+    });
   },
 
   /**
    * Retrieve a list of the remotely executable commands
+   * @param customProps Array of strings containing additional properties which,
+   * if specified in the command spec, will be included in the JSON. Normally we
+   * transfer only the properties required for GCLI to function.
    */
-  specs: method(function() {
-    return this.requisition.canon.getCommandSpecs();
+  specs: method(function(customProps) {
+    this._lastCustomProps = customProps;
+    return this._getRequisition().then(requisition => {
+      return requisition.system.commands.getCommandSpecs(customProps);
+    });
   }, {
-    request: {},
+    request: {
+      customProps: Arg(0, "nullable:array:string")
+    },
     response: RetVal("json")
   }),
 
@@ -67,8 +70,8 @@ var GcliActor = exports.GcliActor = protocol.ActorClass({
    * - error: True if the output was considered an error
    */
   execute: method(function(typed) {
-    return this.requisition.updateExec(typed).then(function(output) {
-      return output.toJson();
+    return this._getRequisition().then(requisition => {
+      return requisition.updateExec(typed).then(output => output.toJson());
     });
   }, {
     request: {
@@ -81,8 +84,10 @@ var GcliActor = exports.GcliActor = protocol.ActorClass({
    * Get the state of an input string. i.e. requisition.getStateData()
    */
   state: method(function(typed, start, rank) {
-    return this.requisition.update(typed).then(() => {
-      return this.requisition.getStateData(start, rank);
+    return this._getRequisition().then(requisition => {
+      return requisition.update(typed).then(() => {
+        return requisition.getStateData(start, rank);
+      });
     });
   }, {
     request: {
@@ -100,16 +105,17 @@ var GcliActor = exports.GcliActor = protocol.ActorClass({
    * - message: The message to display to the user
    * - predictions: An array of suggested values for the given parameter
    */
-  typeparse: method(function(typed, param) {
-    return this.requisition.update(typed).then(function() {
-      var assignment = this.requisition.getAssignment(param);
-
-      return promise.resolve(assignment.predictions).then(function(predictions) {
-        return {
-          status: assignment.getStatus().toString(),
-          message: assignment.message,
-          predictions: predictions
-        };
+  parseType: method(function(typed, param) {
+    return this._getRequisition().then(requisition => {
+      return requisition.update(typed).then(() => {
+        let assignment = requisition.getAssignment(param);
+        return Promise.resolve(assignment.predictions).then(predictions => {
+          return {
+            status: assignment.getStatus().toString(),
+            message: assignment.message,
+            predictions: predictions
+          };
+        });
       });
     });
   }, {
@@ -124,11 +130,13 @@ var GcliActor = exports.GcliActor = protocol.ActorClass({
    * Get the incremented value of some type
    * @return a promise of a string containing the new argument text
    */
-  typeincrement: method(function(typed, param) {
-    return this.requisition.update(typed).then(function() {
-      var assignment = this.requisition.getAssignment(param);
-      return this.requisition.increment(assignment).then(function() {
-        return assignment.arg == null ? undefined : assignment.arg.text;
+  incrementType: method(function(typed, param) {
+    return this._getRequisition().then(requisition => {
+      return requisition.update(typed).then(() => {
+        let assignment = requisition.getAssignment(param);
+        return requisition.increment(assignment).then(() => {
+          return assignment.arg == null ? undefined : assignment.arg.text;
+        });
       });
     });
   }, {
@@ -140,13 +148,15 @@ var GcliActor = exports.GcliActor = protocol.ActorClass({
   }),
 
   /**
-   * See typeincrement
+   * See incrementType
    */
-  typedecrement: method(function(typed, param) {
-    return this.requisition.update(typed).then(function() {
-      var assignment = this.requisition.getAssignment(param);
-      return this.requisition.decrement(assignment).then(function() {
-        return assignment.arg == null ? undefined : assignment.arg.text;
+  decrementType: method(function(typed, param) {
+    return this._getRequisition().then(requisition => {
+      return requisition.update(typed).then(() => {
+        let assignment = requisition.getAssignment(param);
+        return requisition.decrement(assignment).then(() => {
+          return assignment.arg == null ? undefined : assignment.arg.text;
+        });
       });
     });
   }, {
@@ -160,44 +170,120 @@ var GcliActor = exports.GcliActor = protocol.ActorClass({
   /**
    * Perform a lookup on a selection type to get the allowed values
    */
-  selectioninfo: method(function(commandName, paramName, action) {
-    var command = this.requisition.canon.getCommand(commandName);
+  getSelectionLookup: method(function(commandName, paramName) {
+    return this._getRequisition().then(requisition => {
+      let type = this._getType(requisition, commandName, paramName);
+
+      let context = requisition.executionContext;
+      return type.lookup(context).map(info => {
+        // lookup returns an array of objects with name/value properties and
+        // the values might not be JSONable, so remove them
+        return { name: info.name };
+      });
+    });
+  }, {
+    request: {
+      commandName: Arg(0, "string"), // The command containing the parameter in question
+      paramName: Arg(1, "string"),   // The name of the parameter
+    },
+    response: RetVal("json")
+  }),
+
+  /**
+   * Perform a lookup on a selection type to get the allowed values
+   */
+  getSelectionData: method(function(commandName, paramName) {
+    return this._getRequisition().then(requisition => {
+      let type = this._getType(requisition, commandName, paramName);
+
+      let context = requisition.executionContext;
+      return type.data(context);
+    });
+  }, {
+    request: {
+      commandName: Arg(0, "string"), // The command containing the parameter in question
+      paramName: Arg(1, "string"),   // The name of the parameter
+    },
+    response: RetVal("json")
+  }),
+
+  /**
+   * Lazy init for a Requisition
+   */
+  _getRequisition: function() {
+    if (this._requisitionPromise != null) {
+      return this._requisitionPromise;
+    }
+
+    let gcliInit = require("devtools/commandline/commands-index");
+    let Requisition = require("gcli/cli").Requisition;
+    let tabActor = this._tabActor;
+
+    this._requisitionPromise = gcliInit.loadForServer().then(system => {
+      let environment = {
+        get chromeWindow() {
+          throw new Error("environment.chromeWindow is not available in runAt:server commands");
+        },
+
+        get chromeDocument() {
+          throw new Error("environment.chromeDocument is not available in runAt:server commands");
+        },
+
+        get window() tabActor.window,
+        get document() tabActor.window.document,
+        get tabActor() tabActor,
+      };
+
+      let requisition = new Requisition(system, { environment: environment });
+      requisition.system.commands.onCommandsChange.add(this._commandsChanged);
+
+      return requisition;
+    });
+
+    return this._requisitionPromise;
+  },
+
+  /**
+   * Pass events from requisition.system.commands.onCommandsChange upwards
+   */
+  _commandsChanged: function() {
+    events.emit(this, "commands-changed");
+  },
+
+  /**
+   * Helper for #getSelectionLookup and #getSelectionData that finds a type
+   * instance given a commandName and paramName
+   */
+  _getType: function(requisition, commandName, paramName) {
+    let command = requisition.system.commands.get(commandName);
     if (command == null) {
-      throw new Error('No command called \'' + commandName + '\'');
+      throw new Error("No command called '" + commandName + "'");
     }
 
-    var type;
-    command.params.forEach(function(param) {
+    let type;
+    command.params.forEach(param => {
       if (param.name === paramName) {
         type = param.type;
       }
     });
+
     if (type == null) {
-      throw new Error('No parameter called \'' + paramName + '\' in \'' +
-                      commandName + '\'');
+      throw new Error("No parameter called '" + paramName + "' in '" +
+                      commandName + "'");
     }
 
-    switch (action) {
-      case 'lookup':
-        return type.lookup(context);
-      case 'data':
-        return type.data(context);
-      default:
-        throw new Error('Action must be either \'lookup\' or \'data\'');
-    }
-  }, {
-    request: {
-      typed: Arg(0, "string"), // The command containing the parameter in question
-      param: Arg(1, "string"), // The name of the parameter
-      action: Arg(1, "string") // 'lookup' or 'data' depending on the function to call
-    },
-    response: RetVal("json")
-  })
+    return type;
+  }
 });
 
-exports.GcliFront = protocol.FrontClass(GcliActor, {
+exports.GcliActor = GcliActor;
+
+/**
+ * 
+ */
+const GcliFront = exports.GcliFront = FrontClass(GcliActor, {
   initialize: function(client, tabForm) {
-    protocol.Front.prototype.initialize.call(this, client);
+    Front.prototype.initialize.call(this, client);
     this.actorID = tabForm.gcliActor;
 
     // XXX: This is the first actor type in its hierarchy to use the protocol
@@ -205,3 +291,22 @@ exports.GcliFront = protocol.FrontClass(GcliActor, {
     this.manage(this);
   },
 });
+
+// A cache of created fronts: WeakMap<Client, Front>
+const knownFronts = new WeakMap();
+
+/**
+ * Create a GcliFront only when needed (returns a promise)
+ * For notes on target.makeRemote(), see
+ * https://bugzilla.mozilla.org/show_bug.cgi?id=1016330#c7
+ */
+exports.GcliFront.create = function(target) {
+  return target.makeRemote().then(() => {
+    let front = knownFronts.get(target.client);
+    if (front == null && target.form.gcliActor != null) {
+      front = new GcliFront(target.client, target.form);
+      knownFronts.set(target.client, front);
+    }
+    return front;
+  });
+};

From ac381383cd0a72f938ba1d7c78e90303f90a3f16 Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Thu, 19 Mar 2015 12:29:39 +0000
Subject: [PATCH 02/12] Merge from GCLI web.

This is the changes made after 75877de up to and including def985f
That is, changes made on 19 March.
---
 toolkit/devtools/gcli/source/lib/gcli/system.js    | 33 ++++++++++++++++++----
 toolkit/devtools/gcli/source/lib/gcli/util/util.js | 14 +++++++++
 2 files changed, 42 insertions(+), 5 deletions(-)

diff --git a/toolkit/devtools/gcli/source/lib/gcli/system.js b/toolkit/devtools/gcli/source/lib/gcli/system.js
index 89c79e0..429ecd6 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/system.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/system.js
@@ -149,7 +149,14 @@ exports.createSystem = function(options) {
     },
 
     addItemsByModule: function(names, options) {
+      var promises = [];
+
       options = options || {};
+      if (!options.delayedLoad) {
+        // We could be about to add many commands, just report the change once
+        this.commands.onCommandsChange.holdFire();
+      }
+
       if (typeof names === 'string') {
         names = [ names ];
       }
@@ -165,20 +172,34 @@ exports.createSystem = function(options) {
           pendingChanges = true;
         }
         else {
-          loadModule(name).catch(console.error);
+          promises.push(loadModule(name).catch(console.error));
         }
       });
+
+      if (options.delayedLoad) {
+        return Promise.resolve();
+      }
+      else {
+        return Promise.all(promises).then(function() {
+          this.commands.onCommandsChange.resumeFire();
+        }.bind(this));
+      }
     },
 
     removeItemsByModule: function(name) {
+      this.commands.onCommandsChange.holdFire();
+
       delete loadableModules[name];
       unloadModule(name);
+
+      this.commands.onCommandsChange.resumeFire();
     },
 
     load: function() {
       if (!pendingChanges) {
         return Promise.resolve();
       }
+      this.commands.onCommandsChange.holdFire();
 
       // clone loadedModules, so we can remove what is left at the end
       var modules = Object.keys(loadedModules).map(function(name) {
@@ -187,13 +208,15 @@ exports.createSystem = function(options) {
 
       var promises = Object.keys(loadableModules).map(function(name) {
         delete modules[name];
-        return loadModule(name);
+        return loadModule(name).catch(console.error);
       });
 
       Object.keys(modules).forEach(unloadModule);
       pendingChanges = false;
 
-      return Promise.all(promises);
+      return Promise.all(promises).then(function() {
+        this.commands.onCommandsChange.resumeFire();
+      }.bind(this));
     },
 
     toString: function() {
@@ -255,7 +278,7 @@ exports.createSystem = function(options) {
  * commands imported into the local system
  */
 exports.connectFront = function(system, front, customProps) {
-  front.on('commandsChanged', function(specs) {
+  front.on('commands-changed', function() {
     syncItems(system, front, customProps).catch(util.errorHandler);
   });
 
@@ -284,7 +307,7 @@ function syncItems(system, front, customProps) {
 };
 
 /**
- * Take the data from the 'specs' command (or the 'commandsChanged' event) and
+ * Take the data from the 'specs' command (or the 'commands-changed' event) and
  * add function to proxy the execution back over the front
  */
 function addLocalFunctions(specs, front) {
diff --git a/toolkit/devtools/gcli/source/lib/gcli/util/util.js b/toolkit/devtools/gcli/source/lib/gcli/util/util.js
index 16fade57..fb9ae1d 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/util/util.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/util/util.js
@@ -161,6 +161,20 @@ exports.createEvent = function(name) {
   };
 
   /**
+   * Fire an event just once using a promise.
+   */
+  event.once = function() {
+    return new Promise(function(resolve, reject) {
+      var handler = function(arg) {
+        event.remove(handler);
+        resolve(arg);
+      };
+
+      event.add(handler);
+    });
+  },
+
+  /**
    * Temporarily prevent this event from firing.
    * @see resumeFire(ev)
    */

From ff29f6c82b82c7c0de2426c6d020c16afef8be97 Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Thu, 19 Mar 2015 12:49:21 +0000
Subject: [PATCH 03/12] The results of running 'firefox ../gecko-dev'

These changes do not include helpers.runTestModule, which is next.
---
 .../commandline/test/browser_gcli_async.js         | 21 +------
 .../commandline/test/browser_gcli_canon.js         | 21 +------
 .../devtools/commandline/test/browser_gcli_cli1.js | 21 +------
 .../devtools/commandline/test/browser_gcli_cli2.js | 23 ++------
 .../commandline/test/browser_gcli_completion1.js   | 21 +------
 .../commandline/test/browser_gcli_completion2.js   | 21 +------
 .../commandline/test/browser_gcli_context.js       | 21 +------
 .../devtools/commandline/test/browser_gcli_date.js | 21 +------
 .../devtools/commandline/test/browser_gcli_exec.js | 21 +------
 .../devtools/commandline/test/browser_gcli_fail.js | 21 +------
 .../devtools/commandline/test/browser_gcli_file.js | 21 +------
 .../commandline/test/browser_gcli_fileparser.js    | 21 +------
 .../commandline/test/browser_gcli_filesystem.js    | 21 +------
 .../commandline/test/browser_gcli_focus.js         | 21 +------
 .../commandline/test/browser_gcli_history.js       | 21 +------
 .../commandline/test/browser_gcli_incomplete.js    | 21 +------
 .../commandline/test/browser_gcli_inputter.js      | 21 +------
 .../commandline/test/browser_gcli_intro.js         | 21 +------
 .../devtools/commandline/test/browser_gcli_js.js   | 67 ++++++----------------
 .../commandline/test/browser_gcli_keyboard1.js     | 21 +------
 .../commandline/test/browser_gcli_keyboard2.js     | 21 +------
 .../commandline/test/browser_gcli_keyboard3.js     | 21 +------
 .../commandline/test/browser_gcli_keyboard4.js     | 21 +------
 .../commandline/test/browser_gcli_keyboard5.js     | 21 +------
 .../commandline/test/browser_gcli_keyboard6.js     | 21 +------
 .../devtools/commandline/test/browser_gcli_menu.js | 21 +------
 .../devtools/commandline/test/browser_gcli_node.js | 21 +------
 .../commandline/test/browser_gcli_pref1.js         | 21 +------
 .../commandline/test/browser_gcli_pref2.js         | 21 +------
 .../commandline/test/browser_gcli_remotews.js      | 21 +------
 .../commandline/test/browser_gcli_remotexhr.js     | 21 +------
 .../commandline/test/browser_gcli_resource.js      | 52 +++++++----------
 .../commandline/test/browser_gcli_short.js         | 21 +------
 .../commandline/test/browser_gcli_spell.js         | 21 +------
 .../commandline/test/browser_gcli_split.js         | 21 +------
 .../commandline/test/browser_gcli_string.js        | 21 +------
 .../commandline/test/browser_gcli_tokenize.js      | 21 +------
 .../commandline/test/browser_gcli_tooltip.js       | 21 +------
 .../commandline/test/browser_gcli_types.js         | 21 +------
 .../commandline/test/browser_gcli_union.js         | 21 +------
 .../devtools/commandline/test/browser_gcli_url.js  | 21 +------
 browser/devtools/commandline/test/mockCommands.js  | 17 ++++--
 42 files changed, 167 insertions(+), 790 deletions(-)

diff --git a/browser/devtools/commandline/test/browser_gcli_async.js b/browser/devtools/commandline/test/browser_gcli_async.js
index 373aff1..ab83381 100644
--- a/browser/devtools/commandline/test/browser_gcli_async.js
+++ b/browser/devtools/commandline/test/browser_gcli_async.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testAsync.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_async.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var helpers = require('./helpers');
 
 exports.testBasic = function(options) {
diff --git a/browser/devtools/commandline/test/browser_gcli_canon.js b/browser/devtools/commandline/test/browser_gcli_canon.js
index 208b77e..fe6900f 100644
--- a/browser/devtools/commandline/test/browser_gcli_canon.js
+++ b/browser/devtools/commandline/test/browser_gcli_canon.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testCanon.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_canon.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var assert = require('../testharness/assert');
 // var helpers = require('./helpers');
 var Commands = require('gcli/commands/commands').Commands;
diff --git a/browser/devtools/commandline/test/browser_gcli_cli1.js b/browser/devtools/commandline/test/browser_gcli_cli1.js
index 18891db..e60bb37a1 100644
--- a/browser/devtools/commandline/test/browser_gcli_cli1.js
+++ b/browser/devtools/commandline/test/browser_gcli_cli1.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testCli1.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_cli1.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var assert = require('../testharness/assert');
 // var helpers = require('./helpers');
 
diff --git a/browser/devtools/commandline/test/browser_gcli_cli2.js b/browser/devtools/commandline/test/browser_gcli_cli2.js
index 6ac0078..ff787d2 100644
--- a/browser/devtools/commandline/test/browser_gcli_cli2.js
+++ b/browser/devtools/commandline/test/browser_gcli_cli2.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testCli2.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_cli2.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var helpers = require('./helpers');
 
 exports.testSingleString = function(options) {
@@ -435,7 +420,7 @@ exports.testElement = function(options) {
         unassigned: [ ],
         args: {
           command: { name: 'tse' },
-          node: { value: undefined, arg: '', status: 'INCOMPLETE' },
+          node: { arg: '', status: 'INCOMPLETE' },
           nodes: { arg: '', status: 'VALID', message: '' },
           nodes2: { arg: '', status: 'VALID', message: '' },
         }
diff --git a/browser/devtools/commandline/test/browser_gcli_completion1.js b/browser/devtools/commandline/test/browser_gcli_completion1.js
index 7d36908..8478ebf 100644
--- a/browser/devtools/commandline/test/browser_gcli_completion1.js
+++ b/browser/devtools/commandline/test/browser_gcli_completion1.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testCompletion1.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_completion1.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var helpers = require('./helpers');
 
 exports.testActivate = function(options) {
diff --git a/browser/devtools/commandline/test/browser_gcli_completion2.js b/browser/devtools/commandline/test/browser_gcli_completion2.js
index 2b6e490..38e88f2 100644
--- a/browser/devtools/commandline/test/browser_gcli_completion2.js
+++ b/browser/devtools/commandline/test/browser_gcli_completion2.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testCompletion2.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_completion2.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var helpers = require('./helpers');
 
 exports.testLong = function(options) {
diff --git a/browser/devtools/commandline/test/browser_gcli_context.js b/browser/devtools/commandline/test/browser_gcli_context.js
index 5645596..78993ae 100644
--- a/browser/devtools/commandline/test/browser_gcli_context.js
+++ b/browser/devtools/commandline/test/browser_gcli_context.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testContext.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_context.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var helpers = require('./helpers');
 
 exports.testBaseline = function(options) {
diff --git a/browser/devtools/commandline/test/browser_gcli_date.js b/browser/devtools/commandline/test/browser_gcli_date.js
index 281b031..1fed8b0 100644
--- a/browser/devtools/commandline/test/browser_gcli_date.js
+++ b/browser/devtools/commandline/test/browser_gcli_date.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testDate.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_date.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var assert = require('../testharness/assert');
 // var helpers = require('./helpers');
 
diff --git a/browser/devtools/commandline/test/browser_gcli_exec.js b/browser/devtools/commandline/test/browser_gcli_exec.js
index 5e44848..bbe1f3a 100644
--- a/browser/devtools/commandline/test/browser_gcli_exec.js
+++ b/browser/devtools/commandline/test/browser_gcli_exec.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testExec.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_exec.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var assert = require('../testharness/assert');
 // var helpers = require('./helpers');
 
diff --git a/browser/devtools/commandline/test/browser_gcli_fail.js b/browser/devtools/commandline/test/browser_gcli_fail.js
index 7ff93cb..b2a502e 100644
--- a/browser/devtools/commandline/test/browser_gcli_fail.js
+++ b/browser/devtools/commandline/test/browser_gcli_fail.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testFail.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_fail.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var helpers = require('./helpers');
 
 exports.testBasic = function(options) {
diff --git a/browser/devtools/commandline/test/browser_gcli_file.js b/browser/devtools/commandline/test/browser_gcli_file.js
index ce3a4b5..c6cf73c 100644
--- a/browser/devtools/commandline/test/browser_gcli_file.js
+++ b/browser/devtools/commandline/test/browser_gcli_file.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testFile.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_file.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var helpers = require('./helpers');
 
 var local = false;
diff --git a/browser/devtools/commandline/test/browser_gcli_fileparser.js b/browser/devtools/commandline/test/browser_gcli_fileparser.js
index dda36d9..17508b8 100644
--- a/browser/devtools/commandline/test/browser_gcli_fileparser.js
+++ b/browser/devtools/commandline/test/browser_gcli_fileparser.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testFileparser.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_fileparser.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var assert = require('../testharness/assert');
 var fileparser = require('gcli/util/fileparser');
 
diff --git a/browser/devtools/commandline/test/browser_gcli_filesystem.js b/browser/devtools/commandline/test/browser_gcli_filesystem.js
index f1755c0..1b6d28b 100644
--- a/browser/devtools/commandline/test/browser_gcli_filesystem.js
+++ b/browser/devtools/commandline/test/browser_gcli_filesystem.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testFilesystem.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_filesystem.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var assert = require('../testharness/assert');
 // var helpers = require('./helpers');
 var filesystem = require('gcli/util/filesystem');
diff --git a/browser/devtools/commandline/test/browser_gcli_focus.js b/browser/devtools/commandline/test/browser_gcli_focus.js
index 562571f..47b8ea3 100644
--- a/browser/devtools/commandline/test/browser_gcli_focus.js
+++ b/browser/devtools/commandline/test/browser_gcli_focus.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testFocus.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_focus.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var helpers = require('./helpers');
 
 exports.testBasic = function(options) {
diff --git a/browser/devtools/commandline/test/browser_gcli_history.js b/browser/devtools/commandline/test/browser_gcli_history.js
index 2d18613..7b34b73 100644
--- a/browser/devtools/commandline/test/browser_gcli_history.js
+++ b/browser/devtools/commandline/test/browser_gcli_history.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testHistory.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_history.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var assert = require('../testharness/assert');
 var History = require('gcli/ui/history').History;
 
diff --git a/browser/devtools/commandline/test/browser_gcli_incomplete.js b/browser/devtools/commandline/test/browser_gcli_incomplete.js
index 873cf2e..2a089a9 100644
--- a/browser/devtools/commandline/test/browser_gcli_incomplete.js
+++ b/browser/devtools/commandline/test/browser_gcli_incomplete.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testIncomplete.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_incomplete.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var assert = require('../testharness/assert');
 // var helpers = require('./helpers');
 
diff --git a/browser/devtools/commandline/test/browser_gcli_inputter.js b/browser/devtools/commandline/test/browser_gcli_inputter.js
index c7618a2..f56ecc0 100644
--- a/browser/devtools/commandline/test/browser_gcli_inputter.js
+++ b/browser/devtools/commandline/test/browser_gcli_inputter.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testInputter.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_inputter.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var assert = require('../testharness/assert');
 var KeyEvent = require('gcli/util/util').KeyEvent;
 
diff --git a/browser/devtools/commandline/test/browser_gcli_intro.js b/browser/devtools/commandline/test/browser_gcli_intro.js
index c0bc5bc..1d5ff2e 100644
--- a/browser/devtools/commandline/test/browser_gcli_intro.js
+++ b/browser/devtools/commandline/test/browser_gcli_intro.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testIntro.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_intro.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var helpers = require('./helpers');
 
 exports.testIntroStatus = function(options) {
diff --git a/browser/devtools/commandline/test/browser_gcli_js.js b/browser/devtools/commandline/test/browser_gcli_js.js
index 7179b53..b713441 100644
--- a/browser/devtools/commandline/test/browser_gcli_js.js
+++ b/browser/devtools/commandline/test/browser_gcli_js.js
@@ -15,61 +15,35 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testJs.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_js.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var assert = require('../testharness/assert');
 // var helpers = require('./helpers');
-var javascript = require('gcli/types/javascript');
-
-// Store the original windowHolder
-var tempWindowHolder;
-
-// Mock windowHolder to check that we're not trespassing on 'donteval'
-var mockWindowHolder = {
-  window: {
-    document: {}
-  },
-};
-mockWindowHolder.window = mockWindowHolder;
-Object.defineProperty(mockWindowHolder.window, 'donteval', {
-  get: function() {
-    assert.ok(false, 'donteval should not be used');
-    return { cant: '', touch: '', 'this': '' };
-  },
-  enumerable: true,
-  configurable: true
-});
 
 exports.setup = function(options) {
   if (!jsTestAllowed(options)) {
     return;
   }
 
-  tempWindowHolder = javascript.getWindowHolder();
-  javascript.setWindowHolder(mockWindowHolder);
+  // Check that we're not trespassing on 'donteval'
+  var win = options.requisition.environment.window;
+  Object.defineProperty(win, 'donteval', {
+    get: function() {
+      assert.ok(false, 'donteval should not be used');
+      console.trace();
+      return { cant: '', touch: '', 'this': '' };
+    },
+    enumerable: true,
+    configurable: true
+  });
 };
 
 exports.shutdown = function(options) {
@@ -77,12 +51,11 @@ exports.shutdown = function(options) {
     return;
   }
 
-  javascript.setWindowHolder(tempWindowHolder);
+  delete options.requisition.environment.window.donteval;
 };
 
 function jsTestAllowed(options) {
-  return options.isRemote || // We're directly accessing the javascript type
-         options.isNode ||
+  return options.isRemote || // Altering the environment (which isn't remoted)
          options.requisition.system.commands.get('{') == null;
 }
 
@@ -323,7 +296,8 @@ exports.testDocument = function(options) {
           command: { name: '{' },
           javascript: {
             value: 'document.title',
-            arg: '{ document.title ',
+            // arg: '{ document.title ',
+            // Node/JSDom gets this wrong and omits the trailing space. Why?
             status: 'VALID',
             message: ''
           }
@@ -356,11 +330,6 @@ exports.testDocument = function(options) {
 };
 
 exports.testDonteval = function(options) {
-  if (jsTestAllowed(options)) {
-    // nodom causes an eval here, maybe that's node/v8?
-    assert.ok('donteval' in mockWindowHolder.window, 'donteval exists');
-  }
-
   return helpers.audit(options, [
     {
       skipRemainingIf: true, // Commented out until we fix non-enumerable props
diff --git a/browser/devtools/commandline/test/browser_gcli_keyboard1.js b/browser/devtools/commandline/test/browser_gcli_keyboard1.js
index c86d7ee..d74c0ed 100644
--- a/browser/devtools/commandline/test/browser_gcli_keyboard1.js
+++ b/browser/devtools/commandline/test/browser_gcli_keyboard1.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testKeyboard1.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_keyboard1.js");
 }
 
-// <INJECTED SOURCE:END>
-
 var javascript = require('gcli/types/javascript');
 // var helpers = require('./helpers');
 
diff --git a/browser/devtools/commandline/test/browser_gcli_keyboard2.js b/browser/devtools/commandline/test/browser_gcli_keyboard2.js
index 587cd51..35fc446 100644
--- a/browser/devtools/commandline/test/browser_gcli_keyboard2.js
+++ b/browser/devtools/commandline/test/browser_gcli_keyboard2.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testKeyboard2.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_keyboard2.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var helpers = require('./helpers');
 
 exports.testIncr = function(options) {
diff --git a/browser/devtools/commandline/test/browser_gcli_keyboard3.js b/browser/devtools/commandline/test/browser_gcli_keyboard3.js
index ab7d361..c3f38c9 100644
--- a/browser/devtools/commandline/test/browser_gcli_keyboard3.js
+++ b/browser/devtools/commandline/test/browser_gcli_keyboard3.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testKeyboard3.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_keyboard3.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var helpers = require('./helpers');
 
 exports.testDecr = function(options) {
diff --git a/browser/devtools/commandline/test/browser_gcli_keyboard4.js b/browser/devtools/commandline/test/browser_gcli_keyboard4.js
index 755783b..2558e2f 100644
--- a/browser/devtools/commandline/test/browser_gcli_keyboard4.js
+++ b/browser/devtools/commandline/test/browser_gcli_keyboard4.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testKeyboard4.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_keyboard4.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var helpers = require('./helpers');
 
 exports.testIncrFloat = function(options) {
diff --git a/browser/devtools/commandline/test/browser_gcli_keyboard5.js b/browser/devtools/commandline/test/browser_gcli_keyboard5.js
index 69bb141..0459bc0 100644
--- a/browser/devtools/commandline/test/browser_gcli_keyboard5.js
+++ b/browser/devtools/commandline/test/browser_gcli_keyboard5.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testKeyboard5.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_keyboard5.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var helpers = require('./helpers');
 
 exports.testCompleteDown = function(options) {
diff --git a/browser/devtools/commandline/test/browser_gcli_keyboard6.js b/browser/devtools/commandline/test/browser_gcli_keyboard6.js
index 10db2b1..06d81aa 100644
--- a/browser/devtools/commandline/test/browser_gcli_keyboard6.js
+++ b/browser/devtools/commandline/test/browser_gcli_keyboard6.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testKeyboard6.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_keyboard6.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var helpers = require('./helpers');
 
 exports.testCompleteUp = function(options) {
diff --git a/browser/devtools/commandline/test/browser_gcli_menu.js b/browser/devtools/commandline/test/browser_gcli_menu.js
index bfe04bb..a6eb25d 100644
--- a/browser/devtools/commandline/test/browser_gcli_menu.js
+++ b/browser/devtools/commandline/test/browser_gcli_menu.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testMenu.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_menu.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var helpers = require('./helpers');
 
 exports.testOptions = function(options) {
diff --git a/browser/devtools/commandline/test/browser_gcli_node.js b/browser/devtools/commandline/test/browser_gcli_node.js
index 366692f..94c6c26 100644
--- a/browser/devtools/commandline/test/browser_gcli_node.js
+++ b/browser/devtools/commandline/test/browser_gcli_node.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testNode.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_node.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var assert = require('../testharness/assert');
 // var helpers = require('./helpers');
 
diff --git a/browser/devtools/commandline/test/browser_gcli_pref1.js b/browser/devtools/commandline/test/browser_gcli_pref1.js
index 032f5a7..ceb875d 100644
--- a/browser/devtools/commandline/test/browser_gcli_pref1.js
+++ b/browser/devtools/commandline/test/browser_gcli_pref1.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testPref1.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_pref1.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var helpers = require('./helpers');
 
 exports.testPrefShowStatus = function(options) {
diff --git a/browser/devtools/commandline/test/browser_gcli_pref2.js b/browser/devtools/commandline/test/browser_gcli_pref2.js
index 46e3ad9..5c4338f 100644
--- a/browser/devtools/commandline/test/browser_gcli_pref2.js
+++ b/browser/devtools/commandline/test/browser_gcli_pref2.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testPref2.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_pref2.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var assert = require('../testharness/assert');
 // var helpers = require('./helpers');
 var mockSettings = require('./mockSettings');
diff --git a/browser/devtools/commandline/test/browser_gcli_remotews.js b/browser/devtools/commandline/test/browser_gcli_remotews.js
index a011d13..e4bb708 100644
--- a/browser/devtools/commandline/test/browser_gcli_remotews.js
+++ b/browser/devtools/commandline/test/browser_gcli_remotews.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testRemoteWs.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_remotews.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var assert = require('../testharness/assert');
 // var helpers = require('./helpers');
 
diff --git a/browser/devtools/commandline/test/browser_gcli_remotexhr.js b/browser/devtools/commandline/test/browser_gcli_remotexhr.js
index 4196a47..9b24ef6 100644
--- a/browser/devtools/commandline/test/browser_gcli_remotexhr.js
+++ b/browser/devtools/commandline/test/browser_gcli_remotexhr.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testRemoteXhr.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_remotexhr.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var assert = require('../testharness/assert');
 // var helpers = require('./helpers');
 
diff --git a/browser/devtools/commandline/test/browser_gcli_resource.js b/browser/devtools/commandline/test/browser_gcli_resource.js
index 5ef1351..15d1d38 100644
--- a/browser/devtools/commandline/test/browser_gcli_resource.js
+++ b/browser/devtools/commandline/test/browser_gcli_resource.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testResource.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_resource.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var assert = require('../testharness/assert');
 
 var Promise = require('gcli/util/promise').Promise;
@@ -53,12 +38,13 @@ exports.testAllPredictions1 = function(options) {
     return;
   }
 
+  var context = options.requisition.conversionContext;
   var resource = options.requisition.system.types.createType('resource');
-  return resource.getLookup().then(function(opts) {
+  return resource.getLookup(context).then(function(opts) {
     assert.ok(opts.length > 1, 'have all resources');
 
     return util.promiseEach(opts, function(prediction) {
-      return checkPrediction(resource, prediction);
+      return checkPrediction(resource, prediction, context);
     });
   });
 };
@@ -69,13 +55,14 @@ exports.testScriptPredictions = function(options) {
     return;
   }
 
+  var context = options.requisition.conversionContext;
   var types = options.requisition.system.types;
   var resource = types.createType({ name: 'resource', include: 'text/javascript' });
-  return resource.getLookup().then(function(opts) {
+  return resource.getLookup(context).then(function(opts) {
     assert.ok(opts.length > 1, 'have js resources');
 
     return util.promiseEach(opts, function(prediction) {
-      return checkPrediction(resource, prediction);
+      return checkPrediction(resource, prediction, context);
     });
   });
 };
@@ -86,26 +73,28 @@ exports.testStylePredictions = function(options) {
     return;
   }
 
+  var context = options.requisition.conversionContext;
   var types = options.requisition.system.types;
   var resource = types.createType({ name: 'resource', include: 'text/css' });
-  return resource.getLookup().then(function(opts) {
+  return resource.getLookup(context).then(function(opts) {
     assert.ok(opts.length >= 1, 'have css resources');
 
     return util.promiseEach(opts, function(prediction) {
-      return checkPrediction(resource, prediction);
+      return checkPrediction(resource, prediction, context);
     });
   });
 };
 
 exports.testAllPredictions2 = function(options) {
+  var context = options.requisition.conversionContext;
   var types = options.requisition.system.types;
 
   var scriptRes = types.createType({ name: 'resource', include: 'text/javascript' });
-  return scriptRes.getLookup().then(function(scriptOptions) {
+  return scriptRes.getLookup(context).then(function(scriptOptions) {
     var styleRes = types.createType({ name: 'resource', include: 'text/css' });
-    return styleRes.getLookup().then(function(styleOptions) {
+    return styleRes.getLookup(context).then(function(styleOptions) {
       var allRes = types.createType({ name: 'resource' });
-      return allRes.getLookup().then(function(allOptions) {
+      return allRes.getLookup(context).then(function(allOptions) {
         assert.is(scriptOptions.length + styleOptions.length,
                   allOptions.length,
                   'split');
@@ -115,22 +104,21 @@ exports.testAllPredictions2 = function(options) {
 };
 
 exports.testAllPredictions3 = function(options) {
+  var context = options.requisition.conversionContext;
   var types = options.requisition.system.types;
   var res1 = types.createType({ name: 'resource' });
-  return res1.getLookup().then(function(options1) {
+  return res1.getLookup(context).then(function(options1) {
     var res2 = types.createType('resource');
-    return res2.getLookup().then(function(options2) {
+    return res2.getLookup(context).then(function(options2) {
       assert.is(options1.length, options2.length, 'type spec');
     });
   });
 };
 
-function checkPrediction(res, prediction) {
+function checkPrediction(res, prediction, context) {
   var name = prediction.name;
   var value = prediction.value;
 
-  // resources don't need context so cheat and pass in null
-  var context = null;
   return res.parseString(name, context).then(function(conversion) {
     assert.is(conversion.getStatus(), Status.VALID, 'status VALID for ' + name);
     assert.is(conversion.value, value, 'value for ' + name);
diff --git a/browser/devtools/commandline/test/browser_gcli_short.js b/browser/devtools/commandline/test/browser_gcli_short.js
index 15d9bc6..17e3084 100644
--- a/browser/devtools/commandline/test/browser_gcli_short.js
+++ b/browser/devtools/commandline/test/browser_gcli_short.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testShort.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_short.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var helpers = require('./helpers');
 
 exports.testBasic = function(options) {
diff --git a/browser/devtools/commandline/test/browser_gcli_spell.js b/browser/devtools/commandline/test/browser_gcli_spell.js
index 18a1c3d..3138b91 100644
--- a/browser/devtools/commandline/test/browser_gcli_spell.js
+++ b/browser/devtools/commandline/test/browser_gcli_spell.js
@@ -14,31 +14,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testSpell.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_spell.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var assert = require('../testharness/assert');
 var spell = require('gcli/util/spell');
 
diff --git a/browser/devtools/commandline/test/browser_gcli_split.js b/browser/devtools/commandline/test/browser_gcli_split.js
index 0a5d84f..11fbbea 100644
--- a/browser/devtools/commandline/test/browser_gcli_split.js
+++ b/browser/devtools/commandline/test/browser_gcli_split.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testSplit.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_split.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var assert = require('../testharness/assert');
 
 var cli = require('gcli/cli');
diff --git a/browser/devtools/commandline/test/browser_gcli_string.js b/browser/devtools/commandline/test/browser_gcli_string.js
index ae26b55..8470a03 100644
--- a/browser/devtools/commandline/test/browser_gcli_string.js
+++ b/browser/devtools/commandline/test/browser_gcli_string.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testString.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_string.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var helpers = require('./helpers');
 
 exports.testNewLine = function(options) {
diff --git a/browser/devtools/commandline/test/browser_gcli_tokenize.js b/browser/devtools/commandline/test/browser_gcli_tokenize.js
index 27012a8..690ee37 100644
--- a/browser/devtools/commandline/test/browser_gcli_tokenize.js
+++ b/browser/devtools/commandline/test/browser_gcli_tokenize.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testTokenize.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_tokenize.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var assert = require('../testharness/assert');
 var cli = require('gcli/cli');
 
diff --git a/browser/devtools/commandline/test/browser_gcli_tooltip.js b/browser/devtools/commandline/test/browser_gcli_tooltip.js
index 88ddf07..856d817 100644
--- a/browser/devtools/commandline/test/browser_gcli_tooltip.js
+++ b/browser/devtools/commandline/test/browser_gcli_tooltip.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testTooltip.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_tooltip.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var assert = require('../testharness/assert');
 // var helpers = require('./helpers');
 
diff --git a/browser/devtools/commandline/test/browser_gcli_types.js b/browser/devtools/commandline/test/browser_gcli_types.js
index 9efe5d0..bfc4818 100644
--- a/browser/devtools/commandline/test/browser_gcli_types.js
+++ b/browser/devtools/commandline/test/browser_gcli_types.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testTypes.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_types.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var assert = require('../testharness/assert');
 var util = require('gcli/util/util');
 var Promise = require('gcli/util/promise').Promise;
diff --git a/browser/devtools/commandline/test/browser_gcli_union.js b/browser/devtools/commandline/test/browser_gcli_union.js
index 264b5d5..0d688d1 100644
--- a/browser/devtools/commandline/test/browser_gcli_union.js
+++ b/browser/devtools/commandline/test/browser_gcli_union.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testUnion.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_union.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var assert = require('../testharness/assert');
 // var helpers = require('./helpers');
 
diff --git a/browser/devtools/commandline/test/browser_gcli_url.js b/browser/devtools/commandline/test/browser_gcli_url.js
index 83060ae..63baf05 100644
--- a/browser/devtools/commandline/test/browser_gcli_url.js
+++ b/browser/devtools/commandline/test/browser_gcli_url.js
@@ -15,31 +15,16 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
-var exports = {};
-
-var TEST_URI = "data:text/html;charset=utf-8,<div id='gcli-root'>gcli-testUrl.js</div>";
+const exports = {};
 
 function test() {
-  return Task.spawn(function*() {
-    let options = yield helpers.openTab(TEST_URI);
-    yield helpers.openToolbar(options);
-    options.requisition.system.addItems(mockCommands.items);
-
-    yield helpers.runTests(options, exports);
-
-    options.requisition.system.removeItems(mockCommands.items);
-    yield helpers.closeToolbar(options);
-    yield helpers.closeTab(options);
-  }).then(finish, helpers.handleError);
+  helpers.runTestModule(exports, "browser_gcli_url.js");
 }
 
-// <INJECTED SOURCE:END>
-
 // var assert = require('../testharness/assert');
 // var helpers = require('./helpers');
 
diff --git a/browser/devtools/commandline/test/mockCommands.js b/browser/devtools/commandline/test/mockCommands.js
index 4793e18..18cf103 100644
--- a/browser/devtools/commandline/test/mockCommands.js
+++ b/browser/devtools/commandline/test/mockCommands.js
@@ -15,16 +15,21 @@
  */
 
 'use strict';
-// <INJECTED SOURCE:START>
 
 // THIS FILE IS GENERATED FROM SOURCE IN THE GCLI PROJECT
-// DO NOT EDIT IT DIRECTLY
-
-// <INJECTED SOURCE:END>
-
+// PLEASE TALK TO SOMEONE IN DEVELOPER TOOLS BEFORE EDITING IT
 
 var Promise = require('gcli/util/promise').Promise;
-var mockCommands = {};
+
+var mockCommands;
+if (typeof exports !== 'undefined') {
+  // If we're being loaded via require();
+  mockCommands = exports;
+}
+else {
+  // If we're being loaded via loadScript in mochitest
+  mockCommands = {};
+}
 
 // We use an alias for exports here because this module is used in Firefox
 // mochitests where we don't have define/require

From b3940d2453a024383c688e23d96bdfdb75074fcf Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Thu, 19 Mar 2015 12:56:06 +0000
Subject: [PATCH 04/12] Add helpers.runTestModule

---
 browser/devtools/commandline/test/helpers.js | 54 ++++++++++++++++++++++++++++
 1 file changed, 54 insertions(+)

diff --git a/browser/devtools/commandline/test/helpers.js b/browser/devtools/commandline/test/helpers.js
index cede9f0..4f49224 100644
--- a/browser/devtools/commandline/test/helpers.js
+++ b/browser/devtools/commandline/test/helpers.js
@@ -31,6 +31,8 @@ var Promise = require('gcli/util/promise').Promise;
 var cli = require('gcli/cli');
 var KeyEvent = require('gcli/util/util').KeyEvent;
 
+const { GcliFront } = require("devtools/server/actors/gcli");
+
 /**
  * See notes in helpers.checkOptions()
  */
@@ -409,6 +411,58 @@ helpers.runTests = function(options, tests) {
   }, recover);
 };
 
+const MOCK_COMMANDS_URI = "chrome://mochitests/content/browser/browser/devtools/commandline/test/mockCommands.js";
+
+/**
+ * This does several actions associated with running a GCLI test in mochitest
+ * 1. Create a new tab containing basic markup for GCLI tests
+ * 2. Open the developer toolbar
+ * 3. Register the mock commands with the server process
+ * 4. Wait for the proxy commands to be auto-regitstered with the client
+ * 5. Register the mock converters with the client process
+ * 6. Run all the tests
+ * 7. Tear down all the setup
+ */
+helpers.runTestModule = function(exports, name) {
+  return Task.spawn(function*() {
+    const uri = "data:text/html;charset=utf-8," +
+                "<div id='gcli-root'>gcli-" + name + "</div>";
+    const options = yield helpers.openTab(uri);
+    options.isRemote = true;
+
+    yield helpers.openToolbar(options);
+
+    const system = options.requisition.system;
+    // Register a one time listener with the local set of commands
+    const addPromise = system.commands.onCommandsChange.once();
+
+    // Send a message to add the commands to the content process
+    const front = yield GcliFront.create(options.target);
+    yield front._testOnly_addItemsByModule(MOCK_COMMANDS_URI);
+
+    // This will cause the local set of commands to be updated with the
+    // command proxies, wait for that to complete.
+    yield addPromise;
+
+    // Now we need to add the converters to the local GCLI
+    const converters = mockCommands.items.filter(item => item.item === 'converter');
+    system.addItems(converters);
+
+    // Next run the tests
+    yield helpers.runTests(options, exports);
+
+    // Finally undo the mock commands and converters
+    system.removeItems(converters);
+    const removePromise = system.commands.onCommandsChange.once();
+    yield front._testOnly_removeItemsByModule(MOCK_COMMANDS_URI);
+    yield removePromise;
+
+    // And close everything down
+    yield helpers.closeToolbar(options);
+    yield helpers.closeTab(options);
+  }).then(finish, helpers.handleError);
+};
+
 ///////////////////////////////////////////////////////////////////////////////
 
 /**

From c52ab775830cba13781f34c876297cf37b6e8ba5 Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Thu, 19 Mar 2015 12:59:41 +0000
Subject: [PATCH 05/12] The commands-changed event doesn't take a parameter.

---
 toolkit/devtools/server/actors/gcli.js | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/toolkit/devtools/server/actors/gcli.js b/toolkit/devtools/server/actors/gcli.js
index 254d8a7..835699e 100644
--- a/toolkit/devtools/server/actors/gcli.js
+++ b/toolkit/devtools/server/actors/gcli.js
@@ -18,8 +18,7 @@ const GcliActor = ActorClass({
 
   events: {
     "commands-changed" : {
-      type: "commandsChanged",
-      commandsChanged: Arg(0, "json")
+      type: "commandsChanged"
     }
   },
 

From 2388d7576d8edc8fa128d7a98e1cbeede1de8f5d Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Thu, 19 Mar 2015 13:03:43 +0000
Subject: [PATCH 06/12] Add [add|remove]ItemsByModule to the GCLI actor

These are used by helpers.runTestModule().

It occurs to me that we could push definitions.js back into main.js
and use these functions to inject modules. I'm pondering wheter that's
something we should: A) Do now, B) Do later, C) Not do.
---
 toolkit/devtools/server/actors/gcli.js | 26 ++++++++++++++++++++++++++
 1 file changed, 26 insertions(+)

diff --git a/toolkit/devtools/server/actors/gcli.js b/toolkit/devtools/server/actors/gcli.js
index 835699e..cb2ddd6 100644
--- a/toolkit/devtools/server/actors/gcli.js
+++ b/toolkit/devtools/server/actors/gcli.js
@@ -44,6 +44,32 @@ const GcliActor = ActorClass({
   },
 
   /**
+   * Load a module into the requisition
+   */
+  _testOnly_addItemsByModule: method(function(names) {
+    return this._getRequisition().then(requisition => {
+      return requisition.system.addItemsByModule(names);
+    });
+  }, {
+    request: {
+      customProps: Arg(0, "array:string")
+    }
+  }),
+
+  /**
+   * Unload a module from the requisition
+   */
+  _testOnly_removeItemsByModule: method(function(names) {
+    return this._getRequisition().then(requisition => {
+      return requisition.system.removeItemsByModule(names);
+    });
+  }, {
+    request: {
+      customProps: Arg(0, "array:string")
+    }
+  }),
+
+  /**
    * Retrieve a list of the remotely executable commands
    * @param customProps Array of strings containing additional properties which,
    * if specified in the command spec, will be included in the JSON. Normally we

From 3aee865c604b3c08b04d7d3a7221337499fdabc0 Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Thu, 19 Mar 2015 21:22:34 +0000
Subject: [PATCH 07/12] Merge from GCLI web.

This is the changes made after def985f up to and including b388773
That is, changes made on 19 March.

I've included the updates made automatically to the test files, and to
mockCommands. The update to helpers.js is also included.
---
 .../commandline/test/browser_gcli_async.js         |  3 --
 .../devtools/commandline/test/browser_gcli_exec.js |  1 -
 .../devtools/commandline/test/browser_gcli_js.js   | 13 +++++----
 .../commandline/test/browser_gcli_keyboard1.js     | 13 +++------
 .../commandline/test/browser_gcli_resource.js      | 34 ++++++++++++++++++----
 .../commandline/test/browser_gcli_types.js         | 21 ++++++-------
 browser/devtools/commandline/test/helpers.js       |  4 +++
 browser/devtools/commandline/test/mockCommands.js  | 19 +++++++++---
 .../gcli/source/lib/gcli/types/javascript.js       |  7 +++--
 .../gcli/source/lib/gcli/types/resource.js         |  8 ++---
 .../gcli/source/lib/gcli/types/selection.js        |  7 +----
 11 files changed, 76 insertions(+), 54 deletions(-)

diff --git a/browser/devtools/commandline/test/browser_gcli_async.js b/browser/devtools/commandline/test/browser_gcli_async.js
index ab83381..899a912 100644
--- a/browser/devtools/commandline/test/browser_gcli_async.js
+++ b/browser/devtools/commandline/test/browser_gcli_async.js
@@ -59,7 +59,6 @@ exports.testBasic = function(options) {
         args: {
           command: { name: 'tsslow' },
           hello: {
-            value: undefined,
             arg: '',
             status: 'INCOMPLETE'
           },
@@ -80,7 +79,6 @@ exports.testBasic = function(options) {
         args: {
           command: { name: 'tsslow' },
           hello: {
-            value: undefined,
             arg: ' S',
             status: 'INCOMPLETE'
           },
@@ -101,7 +99,6 @@ exports.testBasic = function(options) {
         args: {
           command: { name: 'tsslow' },
           hello: {
-            value: 'Shalom',
             arg: ' Shalom ',
             status: 'VALID',
             message: ''
diff --git a/browser/devtools/commandline/test/browser_gcli_exec.js b/browser/devtools/commandline/test/browser_gcli_exec.js
index bbe1f3a..465e7c17 100644
--- a/browser/devtools/commandline/test/browser_gcli_exec.js
+++ b/browser/devtools/commandline/test/browser_gcli_exec.js
@@ -367,7 +367,6 @@ exports.testExecScript = function(options) {
         args: {
           command: { name: 'tsj' },
           javascript: {
-            value: '1 + 1',
             arg: ' { 1 + 1 }',
             status: 'VALID',
             message: ''
diff --git a/browser/devtools/commandline/test/browser_gcli_js.js b/browser/devtools/commandline/test/browser_gcli_js.js
index b713441..0642448 100644
--- a/browser/devtools/commandline/test/browser_gcli_js.js
+++ b/browser/devtools/commandline/test/browser_gcli_js.js
@@ -29,7 +29,7 @@ function test() {
 // var helpers = require('./helpers');
 
 exports.setup = function(options) {
-  if (!jsTestAllowed(options)) {
+  if (jsTestDisallowed(options)) {
     return;
   }
 
@@ -47,22 +47,23 @@ exports.setup = function(options) {
 };
 
 exports.shutdown = function(options) {
-  if (!jsTestAllowed(options)) {
+  if (jsTestDisallowed(options)) {
     return;
   }
 
   delete options.requisition.environment.window.donteval;
 };
 
-function jsTestAllowed(options) {
+function jsTestDisallowed(options) {
   return options.isRemote || // Altering the environment (which isn't remoted)
+         options.isNode ||
          options.requisition.system.commands.get('{') == null;
 }
 
 exports.testBasic = function(options) {
   return helpers.audit(options, [
     {
-      skipRemainingIf: jsTestAllowed,
+      skipRemainingIf: jsTestDisallowed,
       setup:    '{',
       check: {
         input:  '{',
@@ -217,7 +218,7 @@ exports.testBasic = function(options) {
 exports.testDocument = function(options) {
   return helpers.audit(options, [
     {
-      skipRemainingIf: jsTestAllowed,
+      skipRemainingIf: jsTestDisallowed,
       setup:    '{ docu',
       check: {
         input:  '{ docu',
@@ -453,7 +454,7 @@ exports.testDonteval = function(options) {
 exports.testExec = function(options) {
   return helpers.audit(options, [
     {
-      skipRemainingIf: jsTestAllowed,
+      skipRemainingIf: jsTestDisallowed,
       setup:    '{ 1+1',
       check: {
         input:  '{ 1+1',
diff --git a/browser/devtools/commandline/test/browser_gcli_keyboard1.js b/browser/devtools/commandline/test/browser_gcli_keyboard1.js
index d74c0ed..78e25b3 100644
--- a/browser/devtools/commandline/test/browser_gcli_keyboard1.js
+++ b/browser/devtools/commandline/test/browser_gcli_keyboard1.js
@@ -48,16 +48,12 @@ exports.testSimple = function(options) {
 exports.testScript = function(options) {
   return helpers.audit(options, [
     {
-      skipIf: function commandJsMissing() {
-        return options.requisition.system.commands.get('{') == null;
-      },
+      skipRemainingIf: options.isRemote ||
+              options.requisition.system.commands.get('{') == null,
       setup: '{ wind<TAB>',
       check: { input: '{ window' }
     },
     {
-      skipIf: function commandJsMissing() {
-        return options.requisition.system.commands.get('{') == null;
-      },
       setup: '{ window.docum<TAB>',
       check: { input: '{ window.document' }
     }
@@ -67,9 +63,8 @@ exports.testScript = function(options) {
 exports.testJsdom = function(options) {
   return helpers.audit(options, [
     {
-      skipIf: function jsDomOrCommandJsMissing() {
-        return options.requisition.system.commands.get('{') == null;
-      },
+      skipIf: options.isRemote ||
+              options.requisition.system.commands.get('{') == null,
       setup: '{ window.document.titl<TAB>',
       check: { input: '{ window.document.title ' }
     }
diff --git a/browser/devtools/commandline/test/browser_gcli_resource.js b/browser/devtools/commandline/test/browser_gcli_resource.js
index 15d1d38..3750190 100644
--- a/browser/devtools/commandline/test/browser_gcli_resource.js
+++ b/browser/devtools/commandline/test/browser_gcli_resource.js
@@ -25,6 +25,7 @@ function test() {
   helpers.runTestModule(exports, "browser_gcli_resource.js");
 }
 
+// var helpers = require('./helpers');
 // var assert = require('../testharness/assert');
 
 var Promise = require('gcli/util/promise').Promise;
@@ -32,9 +33,20 @@ var util = require('gcli/util/util');
 var resource = require('gcli/types/resource');
 var Status = require('gcli/types/types').Status;
 
+exports.testCommand = function(options) {
+  return helpers.audit(options, [
+    {
+      setup:    'tsres ',
+      check: {
+        predictionsContains: [ 'inline-css' ],
+      }
+    }
+  ]);
+};
+
 exports.testAllPredictions1 = function(options) {
-  if (options.isFirefox || options.isNode) {
-    assert.log('Skipping checks due to firefox document.stylsheets support.');
+  if (options.isRemote) {
+    assert.log('Can\'t directly test remote types locally.');
     return;
   }
 
@@ -50,8 +62,8 @@ exports.testAllPredictions1 = function(options) {
 };
 
 exports.testScriptPredictions = function(options) {
-  if (options.isFirefox || options.isNode) {
-    assert.log('Skipping checks due to firefox document.stylsheets support.');
+  if (options.isRemote || options.isNode) {
+    assert.log('Can\'t directly test remote types locally.');
     return;
   }
 
@@ -68,8 +80,8 @@ exports.testScriptPredictions = function(options) {
 };
 
 exports.testStylePredictions = function(options) {
-  if (options.isFirefox || options.isNode) {
-    assert.log('Skipping checks due to firefox document.stylsheets support.');
+  if (options.isRemote) {
+    assert.log('Can\'t directly test remote types locally.');
     return;
   }
 
@@ -86,6 +98,11 @@ exports.testStylePredictions = function(options) {
 };
 
 exports.testAllPredictions2 = function(options) {
+  if (options.isRemote) {
+    assert.log('Can\'t directly test remote types locally.');
+    return;
+  }
+
   var context = options.requisition.conversionContext;
   var types = options.requisition.system.types;
 
@@ -104,6 +121,11 @@ exports.testAllPredictions2 = function(options) {
 };
 
 exports.testAllPredictions3 = function(options) {
+  if (options.isRemote) {
+    assert.log('Can\'t directly test remote types locally.');
+    return;
+  }
+
   var context = options.requisition.conversionContext;
   var types = options.requisition.system.types;
   var res1 = types.createType({ name: 'resource' });
diff --git a/browser/devtools/commandline/test/browser_gcli_types.js b/browser/devtools/commandline/test/browser_gcli_types.js
index bfc4818..3ec238d 100644
--- a/browser/devtools/commandline/test/browser_gcli_types.js
+++ b/browser/devtools/commandline/test/browser_gcli_types.js
@@ -29,9 +29,11 @@ function test() {
 var util = require('gcli/util/util');
 var Promise = require('gcli/util/promise').Promise;
 
-function forEachType(options, typeSpec, callback) {
+function forEachType(options, templateTypeSpec, callback) {
   var types = options.requisition.system.types;
   return util.promiseEach(types.getTypeNames(), function(name) {
+    var typeSpec = {};
+    util.copyProperties(templateTypeSpec, typeSpec);
     typeSpec.name = name;
     typeSpec.requisition = options.requisition;
 
@@ -53,20 +55,15 @@ function forEachType(options, typeSpec, callback) {
     else if (name === 'union') {
       typeSpec.alternatives = [{ name: 'string' }];
     }
+    else if (options.isRemote) {
+      if (name === 'node' || name === 'nodelist') {
+        return;
+      }
+    }
 
     var type = types.createType(typeSpec);
     var reply = callback(type);
-    return Promise.resolve(reply).then(function(value) {
-      // Clean up
-      delete typeSpec.name;
-      delete typeSpec.requisition;
-      delete typeSpec.data;
-      delete typeSpec.delegateType;
-      delete typeSpec.subtype;
-      delete typeSpec.alternatives;
-
-      return value;
-    });
+    return Promise.resolve(reply);
   });
 }
 
diff --git a/browser/devtools/commandline/test/helpers.js b/browser/devtools/commandline/test/helpers.js
index 4f49224..045cee8 100644
--- a/browser/devtools/commandline/test/helpers.js
+++ b/browser/devtools/commandline/test/helpers.js
@@ -854,6 +854,10 @@ helpers._check = function(options, name, checks) {
         var index = actualPredictions.indexOf(prediction);
         assert.ok(index !== -1,
                   'predictionsContains:' + prediction + suffix);
+        if (index === -1) {
+          log('Actual predictions (' + actualPredictions.length + '): ' +
+              actualPredictions.join(', '));
+        }
       });
     };
     outstanding.push(helpers._actual.predictions(options).then(containsCheck));
diff --git a/browser/devtools/commandline/test/mockCommands.js b/browser/devtools/commandline/test/mockCommands.js
index 18cf103..1a0d92d 100644
--- a/browser/devtools/commandline/test/mockCommands.js
+++ b/browser/devtools/commandline/test/mockCommands.js
@@ -551,7 +551,7 @@ mockCommands.items = [
     exec: function(args, context) {
       if (args.method === 'reject') {
         return new Promise(function(resolve, reject) {
-          setTimeout(function() {
+          context.environment.window.setTimeout(function() {
             reject('rejected promise');
           }, 10);
         });
@@ -559,7 +559,7 @@ mockCommands.items = [
 
       if (args.method === 'rejecttyped') {
         return new Promise(function(resolve, reject) {
-          setTimeout(function() {
+          context.environment.window.setTimeout(function() {
             reject(context.typedData('number', 54));
           }, 10);
         });
@@ -567,7 +567,7 @@ mockCommands.items = [
 
       if (args.method === 'throwinpromise') {
         return new Promise(function(resolve, reject) {
-          setTimeout(function() {
+          context.environment.window.setTimeout(function() {
             resolve('should be lost');
           }, 10);
         }).then(function() {
@@ -698,7 +698,7 @@ mockCommands.items = [
           name: 'selection',
           data: function(context) {
             return new Promise(function(resolve, reject) {
-              setTimeout(function() {
+              context.environment.window.setTimeout(function() {
                 resolve([
                   'Shalom', 'NamastÃ©', 'Hallo', 'Dydd-da',
                   'ChÃ o', 'Hej', 'Saluton', 'Sawubona'
@@ -781,5 +781,16 @@ mockCommands.items = [
     exec: function(args, context) {
       return args;
     }
+  },
+  {
+    item: 'command',
+    name: 'tsres',
+    params: [
+      {
+        name: 'resource',
+        type: 'resource'
+      }
+    ],
+    exec: createExec('tsres'),
   }
 ];
diff --git a/toolkit/devtools/gcli/source/lib/gcli/types/javascript.js b/toolkit/devtools/gcli/source/lib/gcli/types/javascript.js
index 1cbad2c..649da58 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/types/javascript.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/types/javascript.js
@@ -31,8 +31,11 @@ function JavascriptType(typeSpec) {
 
 JavascriptType.prototype = Object.create(Type.prototype);
 
-JavascriptType.prototype.getSpec = function() {
-  return 'javascript';
+JavascriptType.prototype.getSpec = function(commandName, paramName) {
+  return {
+    name: 'remote',
+    paramName: paramName
+  };
 };
 
 JavascriptType.prototype.stringify = function(value, context) {
diff --git a/toolkit/devtools/gcli/source/lib/gcli/types/resource.js b/toolkit/devtools/gcli/source/lib/gcli/types/resource.js
index 67a5b60..ea6c9c0 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/types/resource.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/types/resource.js
@@ -264,11 +264,9 @@ exports.items = [
                                    ScriptResource._getAllScripts(context));
       }
 
-      return new Promise(function(resolve, reject) {
-        resolve(resources.map(function(resource) {
-          return { name: resource.name, value: resource };
-        }));
-      }.bind(this));
+      return Promise.resolve(resources.map(function(resource) {
+        return { name: resource.name, value: resource };
+      }));
     }
   }
 ];
diff --git a/toolkit/devtools/gcli/source/lib/gcli/types/selection.js b/toolkit/devtools/gcli/source/lib/gcli/types/selection.js
index 2ed41ce..7995efb 100644
--- a/toolkit/devtools/gcli/source/lib/gcli/types/selection.js
+++ b/toolkit/devtools/gcli/source/lib/gcli/types/selection.js
@@ -78,8 +78,7 @@ SelectionType.prototype.getSpec = function(commandName, paramName) {
   if (typeof this.lookup === 'function' || typeof this.data === 'function') {
     spec.commandName = commandName;
     spec.paramName = paramName;
-    spec.remoteLookup = (typeof this.lookup === 'function');
-    spec.remoteData = (typeof this.data === 'function');
+    spec.remoteLookup = true;
   }
   return spec;
 };
@@ -129,10 +128,6 @@ SelectionType.prototype.getLookup = function(context) {
     reply = this.front.getSelectionLookup(this.commandName, this.paramName);
     reply = resolve(reply, context);
   }
-  else if (this.remoteData) {
-    reply = this.front.getSelectionData(this.commandName, this.paramName);
-    reply = resolve(reply, context).then(this._dataToLookup);
-  }
   else if (typeof this.lookup === 'function') {
     reply = resolve(this.lookup.bind(this), context);
   }

From 65d0c571bceba7f28f6b8c556b2fd58938e06380 Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Thu, 19 Mar 2015 21:23:25 +0000
Subject: [PATCH 08/12] Include a simple stylesheet so the resource type has
 something to match

---
 browser/devtools/commandline/test/helpers.js | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/browser/devtools/commandline/test/helpers.js b/browser/devtools/commandline/test/helpers.js
index 045cee8..91356cd 100644
--- a/browser/devtools/commandline/test/helpers.js
+++ b/browser/devtools/commandline/test/helpers.js
@@ -426,7 +426,9 @@ const MOCK_COMMANDS_URI = "chrome://mochitests/content/browser/browser/devtools/
 helpers.runTestModule = function(exports, name) {
   return Task.spawn(function*() {
     const uri = "data:text/html;charset=utf-8," +
-                "<div id='gcli-root'>gcli-" + name + "</div>";
+                "<style>div{color:red;}</style>" +
+                "<div id='gcli-root'>" + name + "</div>";
+
     const options = yield helpers.openTab(uri);
     options.isRemote = true;
 

From d1c5612fd4fde3efed88d8b4b52c7297d5a81aaa Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Thu, 19 Mar 2015 21:25:08 +0000
Subject: [PATCH 09/12] Merge getSelectionData into getSelectionLookup

As seen in before in remoted.js.
---
 toolkit/devtools/server/actors/gcli.js | 66 ++++++++++------------------------
 1 file changed, 19 insertions(+), 47 deletions(-)

diff --git a/toolkit/devtools/server/actors/gcli.js b/toolkit/devtools/server/actors/gcli.js
index cb2ddd6..3aaf169 100644
--- a/toolkit/devtools/server/actors/gcli.js
+++ b/toolkit/devtools/server/actors/gcli.js
@@ -197,32 +197,29 @@ const GcliActor = ActorClass({
    */
   getSelectionLookup: method(function(commandName, paramName) {
     return this._getRequisition().then(requisition => {
-      let type = this._getType(requisition, commandName, paramName);
+      const command = requisition.system.commands.get(commandName);
+      if (command == null) {
+        throw new Error("No command called '" + commandName + "'");
+      }
 
-      let context = requisition.executionContext;
-      return type.lookup(context).map(info => {
-        // lookup returns an array of objects with name/value properties and
-        // the values might not be JSONable, so remove them
-        return { name: info.name };
+      let type;
+      command.params.forEach(param => {
+        if (param.name === paramName) {
+          type = param.type;
+        }
       });
-    });
-  }, {
-    request: {
-      commandName: Arg(0, "string"), // The command containing the parameter in question
-      paramName: Arg(1, "string"),   // The name of the parameter
-    },
-    response: RetVal("json")
-  }),
 
-  /**
-   * Perform a lookup on a selection type to get the allowed values
-   */
-  getSelectionData: method(function(commandName, paramName) {
-    return this._getRequisition().then(requisition => {
-      let type = this._getType(requisition, commandName, paramName);
+      if (type == null) {
+        throw new Error("No parameter called '" + paramName + "' in '" +
+                        commandName + "'");
+      }
 
-      let context = requisition.executionContext;
-      return type.data(context);
+      const reply = type.getLookup(requisition.executionContext);
+      return Promise.resolve(reply).then(lookup => {
+        // lookup returns an array of objects with name/value properties and
+        // the values might not be JSONable, so remove them
+        return lookup.map(info => ({ name: info.name }));
+      });
     });
   }, {
     request: {
@@ -274,31 +271,6 @@ const GcliActor = ActorClass({
   _commandsChanged: function() {
     events.emit(this, "commands-changed");
   },
-
-  /**
-   * Helper for #getSelectionLookup and #getSelectionData that finds a type
-   * instance given a commandName and paramName
-   */
-  _getType: function(requisition, commandName, paramName) {
-    let command = requisition.system.commands.get(commandName);
-    if (command == null) {
-      throw new Error("No command called '" + commandName + "'");
-    }
-
-    let type;
-    command.params.forEach(param => {
-      if (param.name === paramName) {
-        type = param.type;
-      }
-    });
-
-    if (type == null) {
-      throw new Error("No parameter called '" + paramName + "' in '" +
-                      commandName + "'");
-    }
-
-    return type;
-  }
 });
 
 exports.GcliActor = GcliActor;

From 441d21f4afd7c73b7456f1702e8e1582658e6963 Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Thu, 19 Mar 2015 21:26:42 +0000
Subject: [PATCH 10/12] s/param/paramName and
 s/[increment|decrement]Type/nudge/

I'm unclear how these changes got lost. I'm fairly sure I've made them
before.
---
 toolkit/devtools/server/actors/gcli.js | 46 +++++++++-------------------------
 1 file changed, 12 insertions(+), 34 deletions(-)

diff --git a/toolkit/devtools/server/actors/gcli.js b/toolkit/devtools/server/actors/gcli.js
index 3aaf169..58d7062 100644
--- a/toolkit/devtools/server/actors/gcli.js
+++ b/toolkit/devtools/server/actors/gcli.js
@@ -76,7 +76,6 @@ const GcliActor = ActorClass({
    * transfer only the properties required for GCLI to function.
    */
   specs: method(function(customProps) {
-    this._lastCustomProps = customProps;
     return this._getRequisition().then(requisition => {
       return requisition.system.commands.getCommandSpecs(customProps);
     });
@@ -130,10 +129,10 @@ const GcliActor = ActorClass({
    * - message: The message to display to the user
    * - predictions: An array of suggested values for the given parameter
    */
-  parseType: method(function(typed, param) {
+  parseType: method(function(typed, paramName) {
     return this._getRequisition().then(requisition => {
       return requisition.update(typed).then(() => {
-        let assignment = requisition.getAssignment(param);
+        let assignment = requisition.getAssignment(paramName);
         return Promise.resolve(assignment.predictions).then(predictions => {
           return {
             status: assignment.getStatus().toString(),
@@ -146,48 +145,27 @@ const GcliActor = ActorClass({
   }, {
     request: {
       typed: Arg(0, "string"), // The command string
-      param: Arg(1, "string") // The name of the parameter to parse
+      paramName: Arg(1, "string") // The name of the parameter to parse
     },
     response: RetVal("json")
   }),
 
   /**
-   * Get the incremented value of some type
+   * Get the incremented/decremented value of some type
    * @return a promise of a string containing the new argument text
    */
-  incrementType: method(function(typed, param) {
-    return this._getRequisition().then(requisition => {
-      return requisition.update(typed).then(() => {
-        let assignment = requisition.getAssignment(param);
-        return requisition.increment(assignment).then(() => {
-          return assignment.arg == null ? undefined : assignment.arg.text;
-        });
-      });
-    });
-  }, {
-    request: {
-      typed: Arg(0, "string"), // The command string
-      param: Arg(1, "string") // The name of the parameter to parse
-    },
-    response: RetVal("string")
-  }),
-
-  /**
-   * See incrementType
-   */
-  decrementType: method(function(typed, param) {
-    return this._getRequisition().then(requisition => {
-      return requisition.update(typed).then(() => {
-        let assignment = requisition.getAssignment(param);
-        return requisition.decrement(assignment).then(() => {
-          return assignment.arg == null ? undefined : assignment.arg.text;
-        });
+  nudgeType: method(function(typed, by, paramName) {
+    return this.requisition.update(typed).then(() => {
+      const assignment = this.requisition.getAssignment(paramName);
+      return this.requisition.nudge(assignment, by).then(() => {
+        return assignment.arg == null ? undefined : assignment.arg.text;
       });
     });
   }, {
     request: {
-      typed: Arg(0, "string"), // The command string
-      param: Arg(1, "string") // The name of the parameter to parse
+      typed: Arg(0, "string"),    // The command string
+      by: Arg(1, "number"),       // +1/-1 for increment / decrement
+      paramName: Arg(2, "string") // The name of the parameter to parse
     },
     response: RetVal("string")
   }),

From 2645af7f5a39f4d6cfc3bda1430ad21f2998bbdf Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Fri, 20 Mar 2015 12:11:27 +0000
Subject: [PATCH 11/12] Fix 'edit' command

This is a tricky one. The 'edit' command uses the toolbox, so it's
clearly runAt:client, but it uses the 'resource' type which accesses the
DOM.

TL;DR: (Option 3)

The solutions that I've looked at are:

1. Create a new clientResource type that works for commands that
runAt:client. I'm sure there are Debugger/StyleEditor, etc APIs to do
the heavy work, but I'm hoping there is a quicker cheat.

2. Create a hidden command that's runAt:server with a resource
parameter, and then use the 'remote' type to point the real edit command
to use the resource type of the hidden command.

    exports.items = [
      {
        item: "command",
        runAt: "server",
        name: "edit",
        params: [
          {
            name: "resource",
            type: {
              name: "remote",
              commandName: "__hidden_edit",
              paramName: "resource",
            },
          }
        ],
        exec: function(args, context) {
          // ...
        }
      },
      {
        item: "command",
        runAt: "client",
        name: "__hidden_edit",
        hidden: true,
        params: [{
          name: "resource",
          type: { name: "resource", include: "text/css" },
        }],
        exec: () => { }
      }
    ];

This is neat, but the remote type expects that the 'import' process (as
defined by system.connectFront() will inject the front. Since there is
no import process here, that won't work. Maybe there is a non-hacky way
to get at the front?

3. Have the edit command be runAt:client and simply return 'args' (or at
least a JSONable version of that) and have a converter that actually
opens the style editor. In some ways you can see the style editor as the
'view' anyway, but I don't think this is ideal, however it is simple so
it's what I've done for now.

Also, the test suite was testing values, which it can't do for remote
types.
---
 browser/devtools/styleeditor/styleeditor-commands.js        | 13 +++++++++++--
 .../styleeditor/test/browser_styleeditor_cmd_edit.js        |  8 --------
 2 files changed, 11 insertions(+), 10 deletions(-)

diff --git a/browser/devtools/styleeditor/styleeditor-commands.js b/browser/devtools/styleeditor/styleeditor-commands.js
index 262a0c1..ed230cc 100644
--- a/browser/devtools/styleeditor/styleeditor-commands.js
+++ b/browser/devtools/styleeditor/styleeditor-commands.js
@@ -8,7 +8,7 @@ const l10n = require("gcli/l10n");
 
 exports.items = [{
   item: "command",
-  runAt: "client",
+  runAt: "server",
   name: "edit",
   description: l10n.lookup("editDesc"),
   manual: l10n.lookup("editManual2"),
@@ -32,12 +32,21 @@ exports.items = [{
        description: l10n.lookup("editLineToJumpToDesc")
      }
    ],
+   returnType: "editArgs",
+   exec: args => {
+     console.log(args);
+     return { href: args.resource.name, line: args.line };
+   }
+}, {
+  item: "converter",
+  from: "editArgs",
+  to: "dom",
    exec: function(args, context) {
      let target = context.environment.target;
      let gDevTools = require("resource:///modules/devtools/gDevTools.jsm").gDevTools;
      return gDevTools.showToolbox(target, "styleeditor").then(function(toolbox) {
        let styleEditor = toolbox.getCurrentPanel();
-       styleEditor.selectStyleSheet(args.resource.element, args.line);
+       styleEditor.selectStyleSheet(args.href, args.line);
        return null;
      });
    }
diff --git a/browser/devtools/styleeditor/test/browser_styleeditor_cmd_edit.js b/browser/devtools/styleeditor/test/browser_styleeditor_cmd_edit.js
index ffd8fdc..f27a20b 100644
--- a/browser/devtools/styleeditor/test/browser_styleeditor_cmd_edit.js
+++ b/browser/devtools/styleeditor/test/browser_styleeditor_cmd_edit.js
@@ -180,14 +180,6 @@ function spawnTest() {
       setup: "edit css#style2",
       check: {
         input: "edit css#style2",
-        args: {
-          resource: {
-            value: function(resource) {
-              let style2 = options.window.document.getElementById("style2");
-              return resource.element.ownerNode == style2;
-            }
-          }
-        }
       },
       exec: { output: "" }
     },

From 6ff688972105807261674f12faeb0fc916235ac2 Mon Sep 17 00:00:00 2001
From: Joe Walker <jwalker@mozilla.com>
Date: Fri, 20 Mar 2015 12:12:00 +0000
Subject: [PATCH 12/12] Resize is clearly runAt:client

---
 browser/devtools/responsivedesign/resize-commands.js | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/browser/devtools/responsivedesign/resize-commands.js b/browser/devtools/responsivedesign/resize-commands.js
index 7ccdf25..219f585 100644
--- a/browser/devtools/responsivedesign/resize-commands.js
+++ b/browser/devtools/responsivedesign/resize-commands.js
@@ -20,7 +20,7 @@ exports.items = [
   },
   {
     item: "command",
-    runAt: "server",
+    runAt: "client",
     name: 'resize on',
     description: l10n.lookup('resizeModeOnDesc'),
     manual: l10n.lookupFormat('resizeModeManual2', [BRAND_SHORT_NAME]),
@@ -28,7 +28,7 @@ exports.items = [
   },
   {
     item: "command",
-    runAt: "server",
+    runAt: "client",
     name: 'resize off',
     description: l10n.lookup('resizeModeOffDesc'),
     manual: l10n.lookupFormat('resizeModeManual2', [BRAND_SHORT_NAME]),
@@ -36,7 +36,7 @@ exports.items = [
   },
   {
     item: "command",
-    runAt: "server",
+    runAt: "client",
     name: 'resize toggle',
     buttonId: "command-button-responsive",
     buttonClass: "command-button command-button-invertable",
@@ -68,7 +68,7 @@ exports.items = [
   },
   {
     item: "command",
-    runAt: "server",
+    runAt: "client",
     name: 'resize to',
     description: l10n.lookup('resizeModeToDesc'),
     params: [
