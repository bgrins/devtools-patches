# HG changeset patch
# User Tom Tromey <tromey@mozilla.com>

Bug 1154809 - rewrite CubicBezierWidget to use CSSLexer; r=pbrosset

diff --git a/browser/devtools/shared/test/browser_cubic-bezier-03.js b/browser/devtools/shared/test/browser_cubic-bezier-03.js
index 2c231d5..12d22ef 100644
--- a/browser/devtools/shared/test/browser_cubic-bezier-03.js
+++ b/browser/devtools/shared/test/browser_cubic-bezier-03.js
@@ -53,17 +53,17 @@ function* coordinatesCanBeChangedByProvidingAValue(widget) {
 
   is(bezier.P1[0], 0, "The new P1 time coordinate is correct");
   is(bezier.P1[1], 0, "The new P1 progress coordinate is correct");
   is(bezier.P2[0], 1, "The new P2 time coordinate is correct");
   is(bezier.P2[1], 1, "The new P2 progress coordinate is correct");
 
   info("Setting a custom cubic-bezier css value");
   onUpdated = widget.once("updated");
-  widget.cssCubicBezierValue = "cubic-bezier(.25,-0.5, 1, 1.45)";
+  widget.cssCubicBezierValue = "cubic-bezier(.25,-0.5, 1, 1.25)";
   bezier = yield onUpdated;
   ok(true, "The updated event was fired as a result of setting cssValue");
 
   is(bezier.P1[0], .25, "The new P1 time coordinate is correct");
   is(bezier.P1[1], -.5, "The new P1 progress coordinate is correct");
   is(bezier.P2[0], 1, "The new P2 time coordinate is correct");
-  is(bezier.P2[1], 1.45, "The new P2 progress coordinate is correct");
+  is(bezier.P2[1], 1.25, "The new P2 progress coordinate is correct");
 }
diff --git a/browser/devtools/shared/test/unit/test_cubicBezier.js b/browser/devtools/shared/test/unit/test_cubicBezier.js
index ee6c0e0..2230049 100644
--- a/browser/devtools/shared/test/unit/test_cubicBezier.js
+++ b/browser/devtools/shared/test/unit/test_cubicBezier.js
@@ -5,26 +5,27 @@
 
 "use strict";
 
 // Tests the CubicBezier API in the CubicBezierWidget module
 
 const Cu = Components.utils;
 let {devtools} = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
 let require = devtools.require;
-let {CubicBezier} = require("devtools/shared/widgets/CubicBezierWidget");
+let {CubicBezier, _parseTimingFunction} = require("devtools/shared/widgets/CubicBezierWidget");
 
 function run_test() {
   throwsWhenMissingCoordinates();
   throwsWhenIncorrectCoordinates();
   convertsStringCoordinates();
   coordinatesToStringOutputsAString();
   pointGettersReturnPointCoordinatesArrays();
   toStringOutputsCubicBezierValue();
   toStringOutputsCssPresetValues();
+  testParseTimingFunction();
 }
 
 function throwsWhenMissingCoordinates() {
   do_check_throws(() => {
     new CubicBezier();
   }, "Throws an exception when coordinates are missing");
 }
 
@@ -103,16 +104,40 @@ function toStringOutputsCssPresetValues() {
 
   c = new CubicBezier([0, 0, 0.58, 1]);
   do_check_eq(c.toString(), "ease-out");
 
   c = new CubicBezier([0.42, 0, 0.58, 1]);
   do_check_eq(c.toString(), "ease-in-out");
 }
 
+function testParseTimingFunction() {
+  do_print("test parseTimingFunction");
+
+  for (let test of ["ease", "linear", "ease-in", "ease-out", "ease-in-out"]) {
+    ok(_parseTimingFunction(test), test);
+  }
+
+  ok(!_parseTimingFunction("something"), "non-function token");
+  ok(!_parseTimingFunction("something()"), "non-cubic-bezier function");
+  ok(!_parseTimingFunction("cubic-bezier(something)",
+                           "cubic-bezier with non-numeric argument"));
+  ok(!_parseTimingFunction("cubic-bezier(1,2,3:7)",
+                           "did not see comma"));
+  ok(!_parseTimingFunction("cubic-bezier(1,2,3,7:",
+                           "did not see close paren"));
+  ok(!_parseTimingFunction("cubic-bezier(1,2", "early EOF after number"));
+  ok(!_parseTimingFunction("cubic-bezier(1,2,", "early EOF after comma"));
+  deepEqual(_parseTimingFunction("cubic-bezier(1,2,3,7)"), [1,2,3,7],
+            "correct invocation");
+  deepEqual(_parseTimingFunction("cubic-bezier(1,  /* */ 2,3,   7  )"),
+            [1,2,3,7],
+            "correct with comments and whitespace");
+}
+
 function do_check_throws(cb, info) {
   do_print(info);
 
   let hasThrown = false;
   try {
     cb();
   } catch (e) {
     hasThrown = true;
diff --git a/browser/devtools/shared/widgets/CubicBezierWidget.js b/browser/devtools/shared/widgets/CubicBezierWidget.js
index 8b7dcb0..7c1e1c4 100644
--- a/browser/devtools/shared/widgets/CubicBezierWidget.js
+++ b/browser/devtools/shared/widgets/CubicBezierWidget.js
@@ -23,16 +23,20 @@
 // Based on www.cubic-bezier.com by Lea Verou
 // See https://github.com/LeaVerou/cubic-bezier
 
 "use strict";
 
 const EventEmitter = require("devtools/toolkit/event-emitter");
 const {setTimeout, clearTimeout} = require("sdk/timers");
 const {PREDEFINED, PRESETS, DEFAULT_PRESET_CATEGORY} = require("devtools/shared/widgets/CubicBezierPresets");
+const {Cc, Ci} = require('chrome');
+loader.lazyGetter(this, "DOMUtils", () => {
+  return Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils);
+});
 
 /**
  * CubicBezier data structure helper
  * Accepts an array of coordinates and exposes a few useful getters
  * @param {Array} coordinates i.e. [.42, 0, .58, 1]
  */
 function CubicBezier(coordinates) {
   if (!coordinates) {
@@ -434,22 +438,17 @@ CubicBezierWidget.prototype = {
   set cssCubicBezierValue(value) {
     if (!value) {
       return;
     }
 
     value = value.trim();
 
     // Try with one of the predefined values
-    let coordinates = PREDEFINED[value];
-
-    // Otherwise parse the coordinates from the cubic-bezier function
-    if (!coordinates && value.startsWith("cubic-bezier")) {
-      coordinates = value.replace(/cubic-bezier|\(|\)/g, "").split(",").map(parseFloat);
-    }
+    let coordinates = parseTimingFunction(value);
 
     this.presets.refreshMenu(coordinates);
     this.coordinates = coordinates;
   },
 
   destroy: function() {
     this._removeEvents();
     this._removeMarkup();
@@ -755,17 +754,17 @@ TimingFunctionPreviewWidget.prototype = {
   preview: function(value) {
     // Don't restart the preview animation if the value is the same
     if (value === this.previousValue) {
       return false;
     }
 
     clearTimeout(this.autoRestartAnimation);
 
-    if (isValidTimingFunction(value)) {
+    if (parseTimingFunction(value)) {
       this.dot.style.animationTimingFunction = value;
       this.restartAnimation();
     }
 
     this.previousValue = value;
   },
 
   /**
@@ -806,34 +805,64 @@ function getPadding(padding) {
   return p;
 }
 
 function distance(x1, y1, x2, y2) {
   return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
 }
 
 /**
- * Checks whether a string is a valid timing-function value
+ * Parse a string to see whether it is a valid timing function.
+ * If it is, return the coordinates as an array.
+ * Otherwise, return undefined.
  * @param {String} value
- * @return {Boolean}
+ * @return {Array} of coordinates, or undefined
  */
-function isValidTimingFunction(value) {
-  // Either it's a predefined value
+function parseTimingFunction(value) {
   if (value in PREDEFINED) {
-    return true;
+    return PREDEFINED[value];
   }
 
-  // Or it has to match a cubic-bezier expression
-  if (value.match(/^cubic-bezier\(([0-9.\- ]+,){3}[0-9.\- ]+\)/)) {
-    return true;
+  let tokenStream = DOMUtils.getCSSLexer(value);
+  let getNextToken = () => {
+    while (true) {
+      let token = tokenStream.nextToken();
+      if (!token || (token.tokenType !== "whitespace" &&
+                     token.tokenType !== "comment")) {
+        return token;
+      }
+    }
+  };
+
+  let token = getNextToken();
+  if (token.tokenType !== "function" || token.text !== "cubic-bezier") {
+    return undefined;
+  }
+
+  let result = [];
+  for (let i = 0; i < 4; ++i) {
+    token = getNextToken();
+    if (!token || token.tokenType !== "number") {
+      return undefined;
+    }
+    result.push(token.number);
+
+    token = getNextToken();
+    if (!token || token.tokenType !== "symbol" ||
+        token.text !== (i == 3 ? ")" : ",")) {
+      return undefined;
+    }
   }
 
-  return false;
+  return result;
 }
 
+// This is exported for testing.
+exports._parseTimingFunction = parseTimingFunction;
+
 /**
  * Removes a class from a node and adds it to another.
  * @param {String} className the class to swap
  * @param {DOMNode} from the node to remove the class from
  * @param {DOMNode} to the node to add the class to
  */
 function swapClassName(className, from, to) {
   if (from !== null) {
