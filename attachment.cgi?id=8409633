# HG changeset patch
# User Girish Sharma <scrapmachines@gmail.com>
# Date 1398082099 -19800
#      Mon Apr 21 17:38:19 2014 +0530
# Node ID fee282609aa9dad0ada5279912e14efa9c107303
# Parent  ee7632b3d59f6a0433fe93ef3b22a691b7b1e8bd
[mq]: widgets

diff --git a/browser/devtools/shared/test/browser.ini b/browser/devtools/shared/test/browser.ini
--- a/browser/devtools/shared/test/browser.ini
+++ b/browser/devtools/shared/test/browser.ini
@@ -26,10 +26,12 @@ support-files =
 [browser_telemetry_toolboxtabs_netmonitor.js]
 [browser_telemetry_toolboxtabs_options.js]
 [browser_telemetry_toolboxtabs_styleeditor.js]
 [browser_telemetry_toolboxtabs_webconsole.js]
 [browser_templater_basic.js]
 [browser_toolbar_basic.js]
 [browser_toolbar_tooltip.js]
 [browser_toolbar_webconsole_errors_count.js]
+[browser_treeWidget_basic.js]
+[browser_tableWidget_basic.js]
 [browser_spectrum.js]
 [browser_csstransformpreview.js]
diff --git a/browser/devtools/shared/test/browser_tableWidget_basic.js b/browser/devtools/shared/test/browser_tableWidget_basic.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/shared/test/browser_tableWidget_basic.js
@@ -0,0 +1,606 @@
+/* vim: set ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+// Tests that the table widget works fine
+
+const TEST_URI = "data:text/xml;charset=UTF-8,<?xml version='1.0'?>" +
+  "<?xml-stylesheet href='chrome://global/skin/global.css'?>" +
+  "<?xml-stylesheet href='chrome://browser/skin/devtools/common.css'?>" +
+  "<?xml-stylesheet href='chrome://browser/skin/devtools/widgets.css'?>" +
+  "<window xmlns='http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul'" +
+  " title='Table Widget' width='600' height='500'><box flex='1'/></window>";
+const TEST_OPT = "chrome,titlebar,toolbar,centerscreen,resizable,dialog=no";
+
+const {TableWidget} = devtools.require("devtools/shared/widgets/TableWidget");
+let {Task} = devtools.require("resource://gre/modules/Task.jsm");
+let {Promise} = devtools.require("resource://gre/modules/Promise.jsm");
+
+let doc, table;
+
+function test() {
+  waitForExplicitFinish();
+  let win = Services.ww.openWindow(null, TEST_URI, "_blank", TEST_OPT, null);
+
+  win.addEventListener("load", function onLoad() {
+    win.removeEventListener("load", onLoad, false);
+
+    waitForFocus(function () {
+      doc = win.document;
+      table = new TableWidget(doc.querySelector("box"), {
+        initialColumns: {
+          col1: "Column 1",
+          col2: "Column 2",
+          col3: "Column 3",
+          col4: "Column 4"
+        },
+        uniqueId: "col1",
+        emptyText: "This is dummy empty text",
+        highlightUpdated: true,
+        removableColumns: true,
+      });
+      startTests();
+    });
+  });
+}
+
+function endTests() {
+  table.destroy();
+  doc.defaultView.close();
+  doc = table = null;
+  finish();
+}
+
+let startTests = Task.async(function*() {
+  populateTable();
+  testTreeItemInsertedCorrectly();
+  testAPI();
+  yield testClickSelection();
+  yield testKeyboardNavigation();
+  endTests();
+});
+
+function populateTable() {
+  table.push({
+    col1: "id1",
+    col2: "value10",
+    col3: "value20",
+    col4: "value30"
+  });
+  table.push({
+    col1: "id2",
+    col2: "value14",
+    col3: "value29",
+    col4: "value32"
+  });
+  table.push({
+    col1: "id3",
+    col2: "value17",
+    col3: "value21",
+    col4: "value31",
+    extraData: "foobar",
+    extraData2: 42
+  });
+  table.push({
+    col1: "id4",
+    col2: "value12",
+    col3: "value26",
+    col4: "value33"
+  });
+  table.push({
+    col1: "id5",
+    col2: "value19",
+    col3: "value26",
+    col4: "value37"
+  });
+  table.push({
+    col1: "id6",
+    col2: "value15",
+    col3: "value25",
+    col4: "value37"
+  });
+  table.push({
+    col1: "id7",
+    col2: "value18",
+    col3: "value21",
+    col4: "value36",
+    somethingExtra: "Hello World!"
+  });
+  table.push({
+    col1: "id8",
+    col2: "value11",
+    col3: "value27",
+    col4: "value34"
+  });
+  table.push({
+    col1: "id9",
+    col2: "value11",
+    col3: "value23",
+    col4: "value38"
+  });
+}
+
+/**
+ * Test if the nodes are inserted correctly in the table.
+ */
+function testTreeItemInsertedCorrectly() {
+  is(table.tbody.children.length, 4*2 /* double because splitters */,
+     "4 columns exist");
+  for (let i = 0; i < 4; i++) {
+    is(table.tbody.children[i*2].firstChild.children.length, 9 + 1 /* header */,
+       "Correct rows in column " + i);
+    is(table.tbody.children[i*2].firstChild.firstChild.value, "Column " + (i + 1),
+       "Correct column header value");
+  }
+  for (let i = 1; i < 10; i++) {
+    is(table.tbody.firstChild.firstChild.children[i].value, "id" + i,
+     "Correct value in row " + i);
+  }
+}
+
+/**
+ * Tests if the API exposed by TreeWidget works properly
+ */
+function testAPI() {
+  info("Testing TableWidget API");
+  // Check if selectRow and selectedRow setter works as expected
+  // Nothing should be selected beforehand
+  ok(!doc.querySelector(".theme-selected"), "Nothing is selected");
+  table.selectRow("id4");
+  let node = doc.querySelector(".theme-selected");
+  ok(!!node, "Somthing got selected");
+  is(node.getAttribute("data-id"), "id4", "Correct node selected");
+
+  table.selectRow("id7");
+  let node2 = doc.querySelector(".theme-selected");
+  ok(!!node2, "Somthing is still selected");
+  isnot(node, node2, "Newly selected node is different from previous");
+  is(node2.getAttribute("data-id"), "id7", "Correct node selected");
+
+  // test if selectedIRow getter works
+  is(table.selectedRow["col1"], "id7", "Correct result of selectedRow getter");
+
+  // test if isSelected works
+  ok(table.isSelected("id7"), "isSelected with column id works");
+  ok(table.isSelected({
+    col1: "id7",
+    col2: "value18",
+    col3: "value21",
+    col4: "value36",
+    somethingExtra: "Hello World!"
+  }), "isSelected with json works");
+
+  table.selectedRow = "id4";
+  let node3 = doc.querySelector(".theme-selected");
+  ok(!!node3, "Somthing is still selected");
+  isnot(node2, node3, "Newly selected node is different from previous");
+  is(node3, node, "First and third selected nodes should be same");
+  is(node3.getAttribute("data-id"), "id4", "Correct node selected");
+
+  // test if selectedRow getter works
+  is(table.selectedRow["col1"], "id4", "Correct result of selectedRow getter");
+
+  // test if clear selection works
+  table.clearSelection();
+  ok(!doc.querySelector(".theme-selected"),
+     "Nothing selected after clear selection call");
+
+  // test if selectNextRow and selectPreviousRow work
+  table.selectedRow = "id7";
+  ok(table.isSelected("id7"), "Correct row selected");
+  table.selectNextRow();
+  ok(table.isSelected("id8"), "Correct row selected after selectNextRow call");
+
+  table.selectNextRow();
+  ok(table.isSelected("id9"), "Correct row selected after selectNextRow call");
+
+  table.selectNextRow();
+  ok(table.isSelected("id1"),
+     "Properly cycled to first row after selectNextRow call on last row");
+
+  table.selectNextRow();
+  ok(table.isSelected("id2"), "Correct row selected after selectNextRow call");
+
+  table.selectPreviousRow();
+  ok(table.isSelected("id1"), "Correct row selected after selectPreviousRow call");
+
+  table.selectPreviousRow();
+  ok(table.isSelected("id9"),
+     "Properly cycled to last row after selectPreviousRow call on first row");
+
+  // test if remove works
+  ok(doc.querySelector("[data-id='id4']"), "id4 row exists before removal");
+  table.remove("id4");
+  ok(!doc.querySelector("[data-id='id4']"),
+     "id4 row does not exist after removal through id");
+
+  ok(doc.querySelector("[data-id='id6']"), "id6 row exists before removal");
+  table.remove({
+    col1: "id6",
+    col2: "value15",
+    col3: "value25",
+    col4: "value37"
+  });
+  ok(!doc.querySelector("[data-id='id6']"),
+     "id6 row does not exist after removal through json");
+
+  table.push({
+    col1: "id4",
+    col2: "value12",
+    col3: "value26",
+    col4: "value33"
+  });
+  table.push({
+    col1: "id6",
+    col2: "value15",
+    col3: "value25",
+    col4: "value37"
+  });
+
+  // test if selectedIndex getter setter works
+  table.selectedIndex = 2;
+  ok(table.isSelected("id3"), "Correct row selected by selectedIndex setter");
+
+  table.selectedIndex = 4;
+  ok(table.isSelected("id5"), "Correct row selected by selectedIndex setter");
+
+  table.selectRow("id8");
+  is(table.selectedIndex, 7, "Correct value of selectedIndex getter");
+
+  // testing if clear works
+  table.clear();
+  is(table.tbody.children.length, 4*2 /* double because splitters */,
+     "4 columns exist even after clear");
+  for (let i = 0; i < 4; i++) {
+    is(table.tbody.children[i*2].firstChild.children.length, 1 /* header */,
+       "Only header in the column " + i + " after clear call");
+    is(table.tbody.children[i*2].firstChild.firstChild.value, "Column " + (i + 1),
+       "Correct column header value");
+  }
+
+  // testing if setColumns work
+  table.setColumns({
+    col1: "Foobar",
+    col2: "Testing"
+  });
+
+  is(table.tbody.children.length, 2*2 /* double because splitters */,
+     "2 columns exist after setColumn call");
+  is(table.tbody.children[0].firstChild.firstChild.value, "Foobar",
+     "Correct column header value for first column");
+  is(table.tbody.children[2].firstChild.firstChild.value, "Testing",
+     "Correct column header value for second column");
+
+  table.setColumns({
+    col1: "Column 1",
+    col2: "Column 2",
+    col3: "Column 3",
+    col4: "Column 4"
+  });
+  is(table.tbody.children.length, 4*2 /* double because splitters */,
+     "4 columns exist after second setColumn call");
+
+  populateTable();
+
+  // testing if update works
+  is(doc.querySelectorAll("[data-id='id4']")[1].value, "value12",
+     "Correct value before update");
+  table.update({
+    col1: "id4",
+    col2: "UPDATED",
+    col3: "value26",
+    col4: "value33"
+  });
+  is(doc.querySelectorAll("[data-id='id4']")[1].value, "UPDATED",
+     "Correct value after update");
+
+  // testing if sorting works
+  // calling it once on an already sorted column should sort in descending manner
+  table.sortBy("col1");
+  for (let i = 1; i < 10; i++) {
+    is(table.tbody.firstChild.firstChild.children[i].value, "id" + (10 - i),
+     "Correct value in row " + i + " after descending sort by on col1");
+  }
+  // Calling it on an unsorted column should sort by it in ascending manner
+  table.sortBy("col2");
+  let cell = table.tbody.children[2].firstChild.children[2];
+  while(cell) {
+    ok(cell.value >= cell.previousSibling.value, "Sorting is in ascending order");
+    cell = cell.nextSibling;
+  }
+  // Calling it again should sort by it in descending manner
+  table.sortBy("col2");
+  let cell = table.tbody.children[2].firstChild.lastChild.previousSibling;
+  while(cell != cell.parentNode.firstChild) {
+    ok(cell.value >= cell.nextSibling.value, "Sorting is in descending order");
+    cell = cell.previousSibling;
+  }
+  // Calling it again should sort by it in ascending manner
+  table.sortBy("col2");
+  let cell = table.tbody.children[2].firstChild.children[2];
+  while(cell) {
+    ok(cell.value >= cell.previousSibling.value, "Sorting is in ascending order");
+    cell = cell.nextSibling;
+  }
+
+  // resetting the table.
+  table.sortBy("col1");
+  table.clearSelection();
+}
+
+// Sends a click event on the passed DOM node in an async manner
+function click(node, button = 0) {
+  if (button == 0) {
+    executeSoon(() => EventUtils.synthesizeMouseAtCenter(node, {}, doc.defaultView));
+  } else {
+    executeSoon(() => EventUtils.synthesizeMouseAtCenter(node, {
+      button: button,
+      type: "contextmenu"
+    }, doc.defaultView));
+  }
+}
+
+/**
+ * Tests if clicking the table items does the expected behavior
+ */
+let testClickSelection = Task.async(function*() {
+  info("Testing mouse interaction with the table");
+  ok(!table.selectedRow, "Nothing should be selected beforehand");
+
+  let event = table.once(TableWidget.EVENTS.ROW_SELECTED);
+  let node = table.tbody.firstChild.firstChild.children[1];
+  info("clicking on the first row");
+  ok(!node.classList.contains("theme-selected"),
+     "Node should not have selected class before clicking");
+  click(node);
+  let id = yield event;
+  ok(node.classList.contains("theme-selected"), "Node has selected class after click");
+  is(id, "id1", "Correct row was selected");
+
+  info("clicking on third row to select it");
+  let event = table.once(TableWidget.EVENTS.ROW_SELECTED);
+  let node2 = table.tbody.firstChild.firstChild.children[3];
+  // node should not have selected class
+  ok(!node2.classList.contains("theme-selected"),
+     "New node should not have selected class before clicking");
+  click(node2);
+  let id = yield event;
+  ok(node2.classList.contains("theme-selected"),
+     "New node has selected class after clicking");
+  is(id, "id3", "Correct table path is emitted for new node")
+  isnot(node, node2, "Old and new node are different");
+  ok(!node.classList.contains("theme-selected"),
+     "Old node should not have selected class after the click on new node");
+
+  // clicking on table header to sort by it
+  let event = table.once(TableWidget.EVENTS.COLUMN_SORTED);
+  let node = table.tbody.children[6].firstChild.children[0];
+  info("clicking on the 4th coulmn header to sort the table by it");
+  ok(!node.hasAttribute("sorted"),
+     "Node should not have sorted attribute before clicking");
+  ok(doc.querySelector("[sorted]"), "Although, something else should be sorted on");
+  isnot(doc.querySelector("[sorted]"), node, "Which is not equal to this node");
+  click(node);
+  let id = yield event;
+  is(id, "col4", "Correct column was sorted on");
+  ok(node.hasAttribute("sorted"),
+     "Node should now have sorted attribute after clicking");
+  is(doc.querySelectorAll("[sorted]").length, 1,
+     "Now only one column should be sorted on");
+  is(doc.querySelector("[sorted]"), node, "Which should be this column");
+
+  // test context menu opening.
+  // hiding second column
+  // event listener for popupshown
+  let event = Promise.defer();
+  table.menupopup.addEventListener("popupshown", function onPopupShown(e) {
+    table.menupopup.removeEventListener("popupshown", onPopupShown);
+    event.resolve();
+  })
+  info("right clicking on the first column header");
+  let node = table.tbody.firstChild.firstChild.firstChild;
+  click(node, 2);
+  yield event.promise;
+  is(table.menupopup.querySelectorAll("[disabled]").length, 1,
+     "Only 1 menuitem is disabled");
+  is(table.menupopup.querySelector("[disabled]"),
+     table.menupopup.querySelector("[data-id='col1']"),
+     "Which is the unique column");
+  // popup should be open now
+  // clicking on second column label
+  let event = table.once(TableWidget.EVENTS.HEADER_CONTEXT_MENU);
+  let node = table.menupopup.querySelector("[data-id='col2']");
+  info("selecting to hide the second column");
+  ok(!table.tbody.children[2].hasAttribute("hidden"),
+     "Column is not hidden before hiding it");
+  click(node);
+  let id = yield event;
+  is(id, "col2", "Correct column was triggered to be hidden");
+  is(table.tbody.children[2].getAttribute("hidden"), "true",
+     "Column is hidden after hiding it");
+
+  // hiding third column
+  // event listener for popupshown
+  let event = Promise.defer();
+  table.menupopup.addEventListener("popupshown", function onPopupShown(e) {
+    table.menupopup.removeEventListener("popupshown", onPopupShown);
+    event.resolve();
+  })
+  info("right clicking on the first column header");
+  let node = table.tbody.firstChild.firstChild.firstChild;
+  click(node, 2);
+  yield event.promise;
+  is(table.menupopup.querySelectorAll("[disabled]").length, 1,
+     "Only 1 menuitem is disabled");
+  // popup should be open now
+  // clicking on second column label
+  let event = table.once(TableWidget.EVENTS.HEADER_CONTEXT_MENU);
+  let node = table.menupopup.querySelector("[data-id='col3']");
+  info("selecting to hide the second column");
+  ok(!table.tbody.children[4].hasAttribute("hidden"),
+     "Column is not hidden before hiding it");
+  click(node);
+  let id = yield event;
+  is(id, "col3", "Correct column was triggered to be hidden");
+  is(table.tbody.children[4].getAttribute("hidden"), "true",
+     "Column is hidden after hiding it");
+
+  // opening again to see if 2 items are disabled now
+  // event listener for popupshown
+  let event = Promise.defer();
+  table.menupopup.addEventListener("popupshown", function onPopupShown(e) {
+    table.menupopup.removeEventListener("popupshown", onPopupShown);
+    event.resolve();
+  })
+  info("right clicking on the first column header");
+  let node = table.tbody.firstChild.firstChild.firstChild;
+  click(node, 2);
+  yield event.promise;
+  is(table.menupopup.querySelectorAll("[disabled]").length, 2,
+     "2 menuitems are disabled now as only 2 columns remain visible");
+  is(table.menupopup.querySelectorAll("[disabled]")[0],
+     table.menupopup.querySelector("[data-id='col1']"),
+     "First is the unique column");
+  is(table.menupopup.querySelectorAll("[disabled]")[1],
+     table.menupopup.querySelector("[data-id='col4']"),
+     "Second is the last column");
+
+  // showing back 2nd column
+  // popup should be open now
+  // clicking on second column label
+  let event = table.once(TableWidget.EVENTS.HEADER_CONTEXT_MENU);
+  let node = table.menupopup.querySelector("[data-id='col2']");
+  info("selecting to hide the second column");
+  is(table.tbody.children[2].getAttribute("hidden"), "true",
+     "Column is hidden before unhiding it");
+  click(node);
+  let id = yield event;
+  is(id, "col2", "Correct column was triggered to be hidden");
+  ok(!table.tbody.children[2].hasAttribute("hidden"),
+     "Column is not hidden after unhiding it");
+
+  // showing back 3rd column
+  // event listener for popupshown
+  let event = Promise.defer();
+  table.menupopup.addEventListener("popupshown", function onPopupShown(e) {
+    table.menupopup.removeEventListener("popupshown", onPopupShown);
+    event.resolve();
+  })
+  info("right clicking on the first column header");
+  let node = table.tbody.firstChild.firstChild.firstChild;
+  click(node, 2);
+  yield event.promise;
+  // popup should be open now
+  // clicking on second column label
+  let event = table.once(TableWidget.EVENTS.HEADER_CONTEXT_MENU);
+  let node = table.menupopup.querySelector("[data-id='col3']");
+  info("selecting to hide the second column");
+  is(table.tbody.children[4].getAttribute("hidden"), "true",
+     "Column is hidden before unhiding it");
+  click(node);
+  let id = yield event;
+  is(id, "col3", "Correct column was triggered to be hidden");
+  ok(!table.tbody.children[4].hasAttribute("hidden"),
+     "Column is not hidden after unhiding it");
+
+  // reset table state
+  table.clearSelection();
+  table.sortBy("col1");
+});
+
+/**
+ * Tests if pressing navigation keys on the table items does the expected behavior
+ */
+let testKeyboardNavigation = Task.async(function*() {
+  info("Testing keyboard interaction with the table");
+  info("clicking on first row");
+  let node = table.tbody.firstChild.firstChild.children[1];
+  let event = table.once(TableWidget.EVENTS.ROW_SELECTED);
+  click(node);
+  let [name, id] = yield event;
+
+  node = table.tbody.firstChild.firstChild.children[2];
+  // node should not have selected class
+  ok(!node.classList.contains("theme-selected"),
+     "Row should not have selected class");
+  info("Pressing down key to select next row");
+  event = table.once(TableWidget.EVENTS.ROW_SELECTED);
+  EventUtils.sendKey("DOWN", doc.defaultView);
+  let id = yield event;
+  is(id, "id2", "Correct row was selected after pressing down");
+  ok(node.classList.contains("theme-selected"), "row has selected class");
+  let nodes = doc.querySelectorAll(".theme-selected");
+  for (let i = 0; i < nodes.length; i++) {
+    is(nodes[i].getAttribute("data-id"), "id2",
+       "Correct cell selected in all columns");
+  }
+
+  node = table.tbody.firstChild.firstChild.children[3];
+  // node should not have selected class
+  ok(!node.classList.contains("theme-selected"),
+     "Row should not have selected class");
+  info("Pressing down key to select next row");
+  event = table.once(TableWidget.EVENTS.ROW_SELECTED);
+  EventUtils.sendKey("DOWN", doc.defaultView);
+  id = yield event;
+  is(id, "id3", "Correct row was selected after pressing down");
+  ok(node.classList.contains("theme-selected"), "row has selected class");
+  let nodes = doc.querySelectorAll(".theme-selected");
+  for (let i = 0; i < nodes.length; i++) {
+    is(nodes[i].getAttribute("data-id"), "id3",
+       "Correct cell selected in all columns");
+  }
+
+  // pressing up arrow key to select previous row
+  node = table.tbody.firstChild.firstChild.children[2];
+  // node should not have selected class
+  ok(!node.classList.contains("theme-selected"),
+     "Row should not have selected class");
+  info("Pressing up key to select previous row");
+  event = table.once(TableWidget.EVENTS.ROW_SELECTED);
+  EventUtils.sendKey("UP", doc.defaultView);
+  id = yield event;
+  is(id, "id2", "Correct row was selected after pressing down");
+  ok(node.classList.contains("theme-selected"), "row has selected class");
+  let nodes = doc.querySelectorAll(".theme-selected");
+  for (let i = 0; i < nodes.length; i++) {
+    is(nodes[i].getAttribute("data-id"), "id2",
+       "Correct cell selected in all columns");
+  }
+
+  // selecting last item node to test edge navigation cycling case
+  table.selectedRow = "id9";
+  // pressing down now should move to first row.
+  node = table.tbody.firstChild.firstChild.children[1];
+  // node should not have selected class
+  ok(!node.classList.contains("theme-selected"),
+     "Row should not have selected class");
+  info("Pressing down key on last row to select first row");
+  event = table.once(TableWidget.EVENTS.ROW_SELECTED);
+  EventUtils.sendKey("DOWN", doc.defaultView);
+  id = yield event;
+  is(id, "id1", "Correct row was selected after pressing down");
+  ok(node.classList.contains("theme-selected"), "row has selected class");
+  let nodes = doc.querySelectorAll(".theme-selected");
+  for (let i = 0; i < nodes.length; i++) {
+    is(nodes[i].getAttribute("data-id"), "id1",
+       "Correct cell selected in all columns");
+  }
+
+  // pressing up now should move to last row.
+  node = table.tbody.firstChild.firstChild.lastChild;
+  // node should not have selected class
+  ok(!node.classList.contains("theme-selected"),
+     "Row should not have selected class");
+  info("Pressing down key on last row to select first row");
+  event = table.once(TableWidget.EVENTS.ROW_SELECTED);
+  EventUtils.sendKey("UP", doc.defaultView);
+  id = yield event;
+  is(id, "id9", "Correct row was selected after pressing down");
+  ok(node.classList.contains("theme-selected"), "row has selected class");
+  let nodes = doc.querySelectorAll(".theme-selected");
+  for (let i = 0; i < nodes.length; i++) {
+    is(nodes[i].getAttribute("data-id"), "id9",
+       "Correct cell selected in all columns");
+  }
+});
diff --git a/browser/devtools/shared/test/browser_treeWidget_basic.js b/browser/devtools/shared/test/browser_treeWidget_basic.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/shared/test/browser_treeWidget_basic.js
@@ -0,0 +1,422 @@
+/* vim: set ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+// Tests that the tree widget works fine
+
+const TEST_URI = "data:text/html;charset=utf-8,<head><link rel='stylesheet' " +
+  "type='text/css' href='chrome://browser/skin/devtools/common.css'><link " +
+  "rel='stylesheet' type='text/css' href='chrome://browser/skin/devtools/widg" +
+  "ets.css'></head><body><div></div><span></span></body>";
+const {TreeWidget} = devtools.require("devtools/shared/widgets/TreeWidget");
+let {Task} = devtools.require("resource://gre/modules/Task.jsm");
+let {Promise} = devtools.require("resource://gre/modules/Promise.jsm");
+
+let doc, tree;
+
+function test() {
+  waitForExplicitFinish();
+  addTab(TEST_URI, () => {
+    doc = content.document;
+    tree = new TreeWidget(doc.querySelector("div"), {
+      defaultType: "store"
+    });
+    startTests();
+  });
+}
+
+function endTests() {
+  tree.destroy();
+  doc = tree = null;
+  gBrowser.removeCurrentTab();
+  finish();
+}
+
+let startTests = Task.async(function*() {
+  populateTree();
+  testTreeItemInsertedCorrectly();
+  testAPI();
+  yield testClickSelection();
+  yield testKeyboardNavigation();
+  endTests();
+});
+
+function populateTree() {
+  tree.add([["level1", "level2-1", "level3-1"], ["Level 1", "Level 2", "Level 3 - Child 1"]], {type: "dir"});
+  tree.add([["level1", "level2-1", "level3-2"], ["Level 1", "Level 2", "Level 3 - Child 2"]]);
+  tree.add([["level1", "level2-1", "level3-3"], ["Level 1", "Level 2", "Level 3 - Child 3"]]);
+  tree.add([["level1", "level2-2", "level3-1"], ["Level 1", "Level 2.1", "Level 3.1"]]);
+  tree.add([["level1", "level2", "level3"], ["Level 1", "Level 2", "Level 3"]], {type: "js"});
+  tree.add([["level1.1", "level2", "level3"]], {type: "url"});
+}
+
+/**
+ * Test if the nodes are inserted correctly in the tree.
+ */
+function testTreeItemInsertedCorrectly() {
+  is(tree.root.children.children.length, 2, "Number of top level elements match");
+  is(tree.root.children.firstChild.lastChild.children.length, 3,
+     "Number of first second level elements match");
+  is(tree.root.children.lastChild.lastChild.children.length, 1,
+     "Number of second second level elements match");
+
+  ok(tree.root.items.has("level1"), "Level1 top level element exists");
+  is(tree.root.children.firstChild.dataset.id, JSON.stringify(["level1"]),
+     "Data id of first top level element matches");
+  is(tree.root.children.firstChild.firstChild.textContent, "Level 1",
+     "Text content of first top level element matches");
+
+  ok(tree.root.items.has("level1.1"), "Level1.1 top level element exists");
+  is(tree.root.children.firstChild.nextSibling.dataset.id,
+     JSON.stringify(["level1.1"]),
+     "Data id of second top level element matches");
+  is(tree.root.children.firstChild.nextSibling.firstChild.textContent, "level1.1",
+     "Text content of second top level element matches");
+
+  // Adding a new non text item in the tree.
+  let node = doc.createElement("div");
+  node.textContent = "Foo Bar";
+  node.className = "foo bar";
+  tree.add([["level1.2"],[node]], {attachment: {
+    foo: "bar"
+  }});
+
+  is(tree.root.children.children.length, 3,
+     "Number of top level elements match after update");
+  ok(tree.root.items.has("level1.2"), "New level node got added");
+  ok(tree.attachments.has(JSON.stringify(["level1.2"])),
+     "Attachment is present for newly added node");
+  // The item should be added before level1 and level 1.1 as lexical sorting
+  is(tree.root.children.firstChild.dataset.id, JSON.stringify(["level1.2"]),
+     "Data id of last top level element matches");
+  is(tree.root.children.firstChild.firstChild.firstChild, node,
+     "Newly added node is inserted at the right location");
+}
+
+/**
+ * Tests if the API exposed by TreeWidget works properly
+ */
+function testAPI() {
+  info("Testing TreeWidget API");
+  // Check if selectItem and selectedItem setter works as expected
+  // Nothing should be selected beforehand
+  ok(!doc.querySelector(".theme-selected"), "Nothing is selected");
+  tree.selectItem(["level1"]);
+  let node = doc.querySelector(".theme-selected");
+  ok(!!node, "Something got selected");
+  is(node.parentNode.dataset.id, JSON.stringify(["level1"]),
+     "Correct node selected");
+
+  tree.selectItem(["level1", "level2"]);
+  let node2 = doc.querySelector(".theme-selected");
+  ok(!!node2, "Something is still selected");
+  isnot(node, node2, "Newly selected node is different from previous");
+  is(node2.parentNode.dataset.id, JSON.stringify(["level1", "level2"]),
+     "Correct node selected");
+
+  // test if selectedItem getter works
+  is(tree.selectedItem.length, 2, "Correct length of selected item");
+  is(tree.selectedItem[0], "level1", "Correct selected item");
+  is(tree.selectedItem[1], "level2", "Correct selected item");
+
+  // test if isSelected works
+  ok(tree.isSelected(["level1", "level2"]), "isSelected works");
+
+  tree.selectedItem = ["level1"];
+  let node3 = doc.querySelector(".theme-selected");
+  ok(!!node3, "Something is still selected");
+  isnot(node2, node3, "Newly selected node is different from previous");
+  is(node3, node, "First and third selected nodes should be same");
+  is(node3.parentNode.dataset.id, JSON.stringify(["level1"]),
+     "Correct node selected");
+
+  // test if selectedItem getter works
+  is(tree.selectedItem.length, 1, "Correct length of selected item");
+  is(tree.selectedItem[0], "level1", "Correct selected item");
+
+  // test if clear selection works
+  tree.clearSelection();
+  ok(!doc.querySelector(".theme-selected"),
+     "Nothing selected after clear selection call")
+
+  // test if collapseAll/expandAll work
+  ok(doc.querySelectorAll("[expanded]").length > 0,
+     "Some nodes are expanded");
+  tree.collapseAll();
+  is(doc.querySelectorAll("[expanded]").length, 0,
+     "Nothing is expanded after collapseAll call");
+  tree.expandAll();
+  is(doc.querySelectorAll("[expanded]").length, 13,
+     "All tree items expanded after expandAll call");
+
+  // test if selectNextItem and selectPreviousItem work
+  tree.selectedItem = ["level1", "level2"];
+  ok(tree.isSelected(["level1", "level2"]), "Correct item selected");
+  tree.selectNextItem();
+  ok(tree.isSelected(["level1", "level2", "level3"]),
+     "Correct item selected after selectNextItem call");
+
+  tree.selectNextItem();
+  ok(tree.isSelected(["level1", "level2-1"]),
+     "Correct item selected after second selectNextItem call");
+
+  tree.selectNextItem();
+  ok(tree.isSelected(["level1", "level2-1", "level3-1"]),
+     "Correct item selected after third selectNextItem call");
+
+  tree.selectPreviousItem();
+  ok(tree.isSelected(["level1", "level2-1"]),
+     "Correct item selected after selectPreviousItem call");
+
+  tree.selectPreviousItem();
+  ok(tree.isSelected(["level1", "level2", "level3"]),
+     "Correct item selected after second selectPreviousItem call");
+
+  // test if remove works
+  ok(doc.querySelector("[data-id='" +
+       JSON.stringify(["level1", "level2", "level3"]) + "']"),
+     "level1-level2-level3 item exists before removing");
+  tree.remove(["level1", "level2", "level3"]);
+  ok(!doc.querySelector("[data-id='" +
+       JSON.stringify(["level1", "level2", "level3"]) + "']"),
+     "level1-level2-level3 item does not exist before removing");
+  tree.add([["level1", "level2", "level3"], ["Level 1", "Level 2", "Level 3"]], {type: "js"});
+
+  // testing the url to ids method
+  let ids = tree.urlToIds("https://developer.mozilla.org/en-US/docs/Tools");
+  is(ids.length, 4, "Correct length of converted parts from url");
+  is(ids[0], "https://developer.mozilla.org", "Correct first part");
+  is(ids[1], "en-US", "Correct second part");
+  is(ids[2], "docs", "Correct third part");
+  is(ids[3], "Tools", "Correct fourth part");
+
+  // test if clearing the tree works
+  is(doc.querySelectorAll("[level='1']").length, 3,
+     "Correct number of top level items before clearing");
+  tree.clear();
+  is(doc.querySelectorAll("[level='1']").length, 0,
+     "No top level item after clearing the tree");
+
+  // resetting the tree
+  populateTree();
+  // Adding a new non text item in the tree.
+  let node = doc.createElement("div");
+  node.textContent = "Foo Bar";
+  node.className = "foo bar";
+  tree.add([["level1.2"],[node]], {attachment: {
+    foo: "bar"
+  }});
+
+
+  // Collapsing and clearing selection for next tests to work as expected
+  tree.clearSelection();
+  tree.collapseAll();
+}
+
+// Sends a click event on the passed DOM node in an async manner
+function click(node) {
+  executeSoon(() => EventUtils.synthesizeMouseAtCenter(node, {}, content));
+}
+
+/**
+ * Tests if clicking the tree items does the expected behavior
+ */
+let testClickSelection = Task.async(function*() {
+  info("Testing mouse interaction with the tree");
+  let event;
+  let pass = (e, d, a) => event.resolve([e, d, a]);
+
+  ok(!tree.selectedItem, "Nothing should be selected beforehand");
+
+  tree.once("select", pass);
+  let node = tree.root.children.firstChild.firstChild;
+  info("clicking on first top level item");
+  event = Promise.defer();
+  ok(!node.classList.contains("theme-selected"),
+     "Node should not have selected class before clicking");
+  click(node);
+  let [name, data, attachment] = yield event.promise;
+  ok(node.classList.contains("theme-selected"),
+     "Node has selected class after click");
+  is(data[0], "level1.2", "Correct tree path is emitted")
+  ok(attachment && attachment.foo, "Correct attachment is emitted")
+  is(attachment.foo, "bar", "Correct attachment value is emitted");
+
+  info("clicking second top level item with children to check if it expands");
+  let node2 = tree.root.children.firstChild.nextSibling.firstChild;
+  event = Promise.defer();
+  // node should not have selected class
+  ok(!node2.classList.contains("theme-selected"),
+     "New node should not have selected class before clicking");
+  ok(!node2.hasAttribute("expanded"), "New node is not expanded before clicking");
+  tree.once("select", pass);
+  click(node2);
+  let [name, data, attachment] = yield event.promise;
+  ok(node2.classList.contains("theme-selected"),
+     "New node has selected class after clicking");
+  is(data[0], "level1", "Correct tree path is emitted for new node")
+  ok(!attachment, "null attachment should be emitted for new node")
+  ok(node2.hasAttribute("expanded"), "New node expanded after click");
+
+  ok(!node.classList.contains("theme-selected"),
+     "Old node should not have selected class after the click on new node");
+
+
+  // clicking again should just collapse
+  // this will not emit "select" event
+  event = Promise.defer();
+  node2.addEventListener("click", function onClick() {
+    node2.removeEventListener("click", onClick);
+    executeSoon(() => event.resolve(null));
+  });
+  click(node2);
+  yield event.promise;
+  ok(!node2.hasAttribute("expanded"), "New node collapsed after click again");
+});
+
+/**
+ * Tests if pressing navigation keys on the tree items does the expected behavior
+ */
+let testKeyboardNavigation = Task.async(function*() {
+  info("Testing keyboard interaction with the tree");
+  let event;
+  let pass = (e, d, a) => event.resolve([e, d, a]);
+
+  info("clicking on first top level item");
+  let node = tree.root.children.firstChild.firstChild;
+  event = Promise.defer();
+  tree.once("select", pass);
+  click(node);
+  yield event.promise;
+  node = tree.root.children.firstChild.nextSibling.firstChild;
+  // node should not have selected class
+  ok(!node.classList.contains("theme-selected"), "Node should not have selected class");
+  ok(!node.hasAttribute("expanded"), "Node is not expanded");
+
+  info("Pressing down key to select next item");
+  event = Promise.defer();
+  tree.once("select", pass);
+  EventUtils.sendKey("DOWN", content);
+  let [name, data, attachment] = yield event.promise;
+  is(name, "select", "Select event was fired after pressing down");
+  is(data[0], "level1", "Correct item was selected after pressing down");
+  ok(!attachment, "null attachment was emitted");
+  ok(node.classList.contains("theme-selected"), "Node has selected class");
+  ok(node.hasAttribute("expanded"), "Node is expanded now");
+
+  info("Pressing down key again to select next item");
+  event = Promise.defer();
+  tree.once("select", pass);
+  EventUtils.sendKey("DOWN", content);
+  let [name, data, attachment] = yield event.promise;
+  is(data.length, 2, "Correct level item was selected after second down keypress");
+  is(data[0], "level1", "Correct parent level");
+  is(data[1], "level2", "Correct second level");
+
+  info("Pressing down key again to select next item");
+  event = Promise.defer();
+  tree.once("select", pass);
+  EventUtils.sendKey("DOWN", content);
+  let [name, data, attachment] = yield event.promise;
+  is(data.length, 3, "Correct level item was selected after third down keypress");
+  is(data[0], "level1", "Correct parent level");
+  is(data[1], "level2", "Correct second level");
+  is(data[2], "level3", "Correct third level");
+
+  info("Pressing down key again to select next item");
+  event = Promise.defer();
+  tree.once("select", pass);
+  EventUtils.sendKey("DOWN", content);
+  let [name, data, attachment] = yield event.promise;
+  is(data.length, 2, "Correct level item was selected after fourth down keypress");
+  is(data[0], "level1", "Correct parent level");
+  is(data[1], "level2-1", "Correct second level");
+
+  // pressing left to check expand collapse feature.
+  // This does not emit any event, so listening for keypress
+  tree.root.children.addEventListener("keypress", function onClick() {
+    tree.root.children.removeEventListener("keypress", onClick);
+    // executeSoon so that other listeners on the same method are executed first
+    executeSoon(() => event.resolve(null));
+  });
+  info("Pressing left key to collapse the item");
+  event = Promise.defer();
+  node = tree._selectedLabel;
+  ok(node.hasAttribute("expanded"), "Item is expanded before left keypress");
+  EventUtils.sendKey("LEFT", content);
+  yield event.promise;
+
+  ok(!node.hasAttribute("expanded"), "Item is not expanded after left keypress");
+
+  // pressing left on collapsed item should select the previous item
+
+  info("Pressing left key on collapsed item to select previous");
+  tree.once("select", pass);
+  event = Promise.defer();
+  // parent node should have no effect of this keypress
+  node = tree.root.children.firstChild.nextSibling.firstChild;
+  ok(node.hasAttribute("expanded"), "Parent is expanded");
+  EventUtils.sendKey("LEFT", content);
+  let [name, data] = yield event.promise;
+  is(data.length, 3, "Correct level item was selected after second left keypress");
+  is(data[0], "level1", "Correct parent level");
+  is(data[1], "level2", "Correct second level");
+  is(data[2], "level3", "Correct third level");
+  ok(node.hasAttribute("expanded"), "Parent is still expanded after left keypress");
+
+  // pressing down again
+
+  info("Pressing down key to select next item");
+  event = Promise.defer();
+  tree.once("select", pass);
+  EventUtils.sendKey("DOWN", content);
+  let [name, data, attachment] = yield event.promise;
+  is(data.length, 2, "Correct level item was selected after fifth down keypress");
+  is(data[0], "level1", "Correct parent level");
+  is(data[1], "level2-1", "Correct second level");
+
+  // collapsing the item to check expand feature.
+
+  tree.root.children.addEventListener("keypress", function onClick() {
+    tree.root.children.removeEventListener("keypress", onClick);
+    executeSoon(() => event.resolve(null));
+  });
+  info("Pressing left key to collapse the item");
+  event = Promise.defer();
+  node = tree._selectedLabel;
+  ok(node.hasAttribute("expanded"), "Item is expanded before left keypress");
+  EventUtils.sendKey("LEFT", content);
+  yield event.promise;
+  ok(!node.hasAttribute("expanded"), "Item is collapsed after left keypress");
+
+  // pressing right should expand this now.
+
+  tree.root.children.addEventListener("keypress", function onClick() {
+    tree.root.children.removeEventListener("keypress", onClick);
+    executeSoon(() => event.resolve(null));
+  });
+  info("Pressing right key to expend the collapsed item");
+  event = Promise.defer();
+  node = tree._selectedLabel;
+  ok(!node.hasAttribute("expanded"), "Item is collapsed before right keypress");
+  EventUtils.sendKey("RIGHT", content);
+  yield event.promise;
+  ok(node.hasAttribute("expanded"), "Item is expanded after right keypress");
+
+  // selecting last item node to test edge navigation case
+
+  tree.selectedItem = ["level1.1", "level2", "level3"];
+  node = tree._selectedLabel;
+  // pressing down again should not change selection
+  event = Promise.defer();
+  tree.root.children.addEventListener("keypress", function onClick() {
+    tree.root.children.removeEventListener("keypress", onClick);
+    executeSoon(() => event.resolve(null));
+  });
+  info("Pressing down key on last item of the tree");
+  EventUtils.sendKey("DOWN", content);
+  yield event.promise;
+
+  ok(tree.isSelected(["level1.1", "level2", "level3"]),
+     "Last item is still selected after pressing down on last item of the tree");
+});
diff --git a/browser/devtools/shared/widgets/TableWidget.js b/browser/devtools/shared/widgets/TableWidget.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/shared/widgets/TableWidget.js
@@ -0,0 +1,917 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const { Cu } = require("chrome");
+
+const EventEmitter = require("devtools/toolkit/event-emitter");
+const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
+const HTML_NS = "http://www.w3.org/1999/xhtml";
+
+
+// Different types of events emitted by the Various components of the TableWidget
+const EVENTS = {
+  TABLE_CLEARED: "table-cleared",
+  COLUMN_SORTED: "column-sorted",
+  COLUMN_TOGGLED: "column-toggled",
+  ROW_SELECTED: "row-selected",
+  ROW_UPDATED: "row-updated",
+  HEADER_CONTEXT_MENU: "header-context-menu",
+  ROW_CONTEXT_MENU: "row-context-menu"
+};
+
+// Maximum number of character visible in any cell in the table. This is to avoid
+// making the cell take up all the space in a row.
+const MAX_VISIBLE_STRING_SIZE = 100;
+
+/**
+ * A table widget with various features like resizble/toggleable columns,
+ * sorting, keyboard navigation etc.
+ *
+ * @param {nsIDOMNode} node
+ *        The container element for the table widget.
+ * @param {object} options
+ *        - initialColumns: map of key vs display name for initial columns of
+ *                          the table. See @setupColumns for more info.
+ *        - uniqueId: the column which will be the unique identifier of each
+ *                    entry in the table. Default: name.
+ *        - emptyText: text to display when no entries in the table to display.
+ *        - highlightUpdated: true to highlight the changed/added row.
+ *        - removableColumns: Whether columns are removeable. If set to true,
+ *                            the context menu in the headers will not appear.
+ */
+function TableWidget(node, options={}) {
+  EventEmitter.decorate(this);
+
+  this.document = node.ownerDocument;
+  this.window = this.document.defaultView;
+  this._parent = node;
+
+  let {initialColumns, emptyText, uniqueId, highlightUpdated, removableColumns} =
+      options;
+  this.emptyText = emptyText || "";
+  this.uniqueId = uniqueId || "name";
+  this.highlightUpdated = highlightUpdated || false;
+  this.removableColumns = removableColumns || false;
+
+  this.tbody = this.document.createElementNS(XUL_NS, "hbox");
+  this.tbody.className = "table-widget-body theme-body";
+  this.tbody.setAttribute("flex", "1");
+  this.tbody.setAttribute("tabindex", "0");
+  this._parent.appendChild(this.tbody);
+
+  this.placeholder = this.document.createElementNS(XUL_NS, "label");
+  this.placeholder.className = "plain table-widget-empty-text";
+  this.placeholder.setAttribute("flex", "1");
+  this._parent.appendChild(this.placeholder);
+
+  this.items = new Map();
+  this.columns = new Map();
+
+  // Setup the column headers context menu to allow users to hide columns at will
+  if (this.removableColumns) {
+    this.onPopupCommand = this.onPopupCommand.bind(this)
+    this.setupHeadersContextMenu();
+  }
+
+  if (initialColumns) {
+    this.setColumns(initialColumns, uniqueId);
+  } else if (this.emptyText) {
+    this.setPlaceholderText(this.emptyText);
+  }
+
+  this.bindSelectedRow = (event, id) => {
+    this.selectedRow = id;
+  };
+  this.on(EVENTS.ROW_SELECTED, this.bindSelectedRow);
+};
+
+TableWidget.prototype = {
+
+  items: null,
+
+  /**
+   * Getter for the headers context menu popup id.
+   */
+  get headersContextMenu() {
+    if (this.menupopup) {
+      return this.menupopup.id;
+    }
+    return null;
+  },
+
+  /**
+   * Select the row corresponding to the json object `id`
+   */
+  set selectedRow(id) {
+    for (let column of this.columns.values()) {
+      column.selectRow(id[this.uniqueId] || id);
+    }
+  },
+
+  /**
+   * Returns the json object corresponding to the selected row.
+   */
+  get selectedRow() {
+    return this.items.get(this.columns.get(this.uniqueId).selectedRow);
+  },
+
+  /**
+   * Selects the row at index `index`.
+   */
+  set selectedIndex(index) {
+    for (let column of this.columns.values()) {
+      column.selectRowAt(index);
+    }
+  },
+
+  /**
+   * Returns the index of the selected row.
+   */
+  get selectedIndex() {
+    return this.columns.get(this.uniqueId).selectedIndex;
+  },
+
+  destroy: function() {
+    this.off(EVENTS.ROW_SELECTED, this.bindSelectedRow);
+    if (this.menupopup) {
+      this.menupopup.remove();
+    }
+  },
+
+  /**
+   * Sets the text to be shown when the table is empty.
+   */
+  setPlaceholderText: function(text) {
+    this.placeholder.setAttribute("value", text);
+  },
+
+  /**
+   * Prepares the context menu for the headers of the table columns. This context
+   * menu allows users to toggle various columns, only with an exception of the
+   * unique columns and when only two columns are visible in the table.
+   */
+  setupHeadersContextMenu: function() {
+    let popupset = this.document.getElementsByTagName("popupset")[0];
+    if (!popupset) {
+      popupset = this.document.createElementNS(XUL_NS, "popupset");
+      this.document.documentElement.appendChild(popupset);
+    }
+
+    this.menupopup = this.document.createElementNS(XUL_NS, "menupopup");
+    this.menupopup.id = "table-widget-column-select";
+    this.menupopup.addEventListener("command", this.onPopupCommand);
+    popupset.appendChild(this.menupopup);
+    this.populateMenuPopup();
+  },
+
+  /**
+   * Populates the header context menu with the names of the columns along with
+   * displaying which columns are hidden or visible.
+   */
+  populateMenuPopup: function() {
+    if (!this.menupopup) {
+      return;
+    }
+
+    while (this.menupopup.firstChild) {
+      this.menupopup.firstChild.remove();
+    }
+
+    for (let column of this.columns.values()) {
+      let menuitem = this.document.createElementNS(XUL_NS, "menuitem");
+      menuitem.setAttribute("label", column.header.getAttribute("value"));
+      menuitem.setAttribute("data-id", column.id);
+      menuitem.setAttribute("type", "checkbox");
+      menuitem.setAttribute("checked", !column.wrapper.getAttribute("hidden"));
+      if (column.id == this.uniqueId) {
+        menuitem.setAttribute("disabled", "true");
+      }
+      this.menupopup.appendChild(menuitem);
+    }
+    let checked = this.menupopup.querySelectorAll("menuitem[checked]");
+    if (checked.length == 2) {
+      checked[checked.length - 1].setAttribute("disabled", "true");
+    }
+  },
+
+  /**
+   * Event handler for the `command` event on the column headers context menu
+   */
+  onPopupCommand: function(event) {
+    let item = event.originalTarget;
+    let checked = !!item.getAttribute("checked");
+    let id = item.getAttribute("data-id");
+    this.emit(EVENTS.HEADER_CONTEXT_MENU, id, checked);
+    let checked = this.menupopup.querySelectorAll("menuitem[checked]");
+    let disabled = this.menupopup.querySelectorAll("menuitem[disabled]");
+    if (checked.length == 2) {
+      checked[checked.length - 1].setAttribute("disabled", "true");
+    } else if (disabled.length > 1) {
+      disabled[disabled.length - 1].removeAttribute("disabled");
+    }
+  },
+
+  /**
+   * Creates the columns in the table. Without calling this method, data cannot
+   * be inserted into the table unless `initialColumns` was supplied.
+   *
+   * @param {object} columns
+   *        A key value pair representing the columns of the table. Where the
+   *        key represents the id of the column and the value is the displayed
+   *        label in the header of the column.
+   * @param {string} sortOn
+   *        The id of the column on which the table will be initially sorted on.
+   * @param {array} hiddenColumns
+   *        Ids of all the columns that are hidden by default.
+   */
+  setColumns: function(columns, sortOn = this.sortedOn, hiddenColumns = []) {
+    for (let column of this.columns.values()) {
+      column.destroy();
+    }
+
+    this.columns.clear();
+
+    if (!(sortOn in columns)) {
+      sortOn = null;
+    }
+
+    for (let id in columns) {
+      if (!sortOn) {
+        sortOn = id;
+      }
+      this.columns.set(id, new Column(this, id, columns[id]));
+      if (hiddenColumns.indexOf(id) > -1) {
+        this.columns.get(id).toggleColumn();
+      }
+    }
+    this.sortedOn = sortOn;
+    this.sortBy(this.sortedOn);
+    this.populateMenuPopup();
+  },
+
+  /**
+   * Returns true if the passed string or the row json object corresponds to the
+   * selected item in the table.
+   */
+  isSelected: function(item) {
+    if (typeof item == "object") {
+      item = item[this.uniqueId];
+    }
+
+    return item == this.selectedRow[this.uniqueId];
+  },
+
+  /**
+   * Selects the row corresponding to the `id` json.
+   */
+  selectRow: function(id) {
+    this.selectedRow = id;
+  },
+
+  /**
+   * Selects the next row. Cycles over to the first row if last row is selected
+   */
+  selectNextRow: function() {
+    for (let column of this.columns.values()) {
+      column.selectNextRow();
+    }
+  },
+
+  /**
+   * Selects the previous row. Cycles over to the last row if first row is selected
+   */
+  selectPreviousRow: function() {
+    for (let column of this.columns.values()) {
+      column.selectPreviousRow();
+    }
+  },
+
+  /**
+   * Clears any selected row.
+   */
+  clearSelection: function() {
+    this.selectedIndex = -1;
+  },
+
+  /**
+   * Adds a row into the table.
+   *
+   * @param {object} item
+   *        The object from which the key-value pairs will be taken and added
+   *        into the row. This object can have any arbitarary key value pairs,
+   *        but only those will be used whose keys match to the ids of the
+   *        columns.
+   * @param {boolean} suppressFlash
+   *        true to not flash the row while inserting the row.
+   */
+  push: function(item, suppressFlash) {
+    if (!this.sortedOn || !this.columns) {
+      Cu.reportError("Can't insert item without defining columns first");
+      return;
+    }
+
+    if (this.items.has(item[this.uniqueId])) {
+      this.update(item);
+      return;
+    }
+
+    let index = this.columns.get(this.sortedOn).push(item);
+    for (let [key, column] of this.columns) {
+      if (key != this.sortedOn) {
+        column.insertAt(item, index);
+      }
+    }
+    this.items.set(item[this.uniqueId], item);
+    this.tbody.removeAttribute("empty");
+    if (!suppressFlash) {
+      this.emit(EVENTS.ROW_UPDATED, item[this.uniqueId]);
+    }
+  },
+
+  /**
+   * Removes the row associated with the `item` object.
+   */
+  remove: function(item) {
+    if (typeof item == "string") {
+      item = this.items.get(item);
+    }
+    let removed = this.items.delete(item[this.uniqueId]);
+
+    if (!removed) {
+      return;
+    }
+
+    for (let column of this.columns.values()) {
+      column.remove(item);
+    }
+    if (this.items.size == 0) {
+      this.tbody.setAttribute("empty", "empty");
+    }
+  },
+
+  /**
+   * Updates the items in the row corresponding to the `item` object previously
+   * used to insert the row using `push` method. The linking is done via the
+   * `uniqueId` key's value.
+   */
+  update: function(item) {
+    let oldItem = this.items.get(item[this.uniqueId]);
+    if (!oldItem) {
+      return;
+    }
+    this.items.set(item[this.uniqueId], item);
+
+    let changed = false;
+    for (let column of this.columns.values()) {
+      if (item[column.id] != oldItem[column.id]) {
+        column.update(item);
+        changed = true;
+      }
+    }
+    if (changed) {
+      this.emit(EVENTS.ROW_UPDATED, item[this.uniqueId]);
+    }
+  },
+
+  /**
+   * Removes all of the rows from the table.
+   */
+  clear: function() {
+    this.items.clear();
+    for (let column of this.columns.values()) {
+      column.clear();
+    }
+    this.tbody.setAttribute("empty", "empty");
+    this.setPlaceholderText(this.emptyText);
+  },
+
+  /**
+   * Sorts the table by a given column.
+   *
+   * @param {string} column
+   *        The id of the column on which the table should be sorted.
+   */
+  sortBy: function(column) {
+    this.emit(EVENTS.COLUMN_SORTED, column);
+    this.sortedOn = column;
+
+    if (!this.items || !this.items.size) {
+      return;
+    }
+
+    let sortedItems = this.columns.get(column).sort([...this.items.values()]);
+    for (let [id, column] of this.columns) {
+      if (id != column) {
+        column.sort(sortedItems);
+      }
+    }
+  }
+};
+
+TableWidget.EVENTS = EVENTS;
+
+module.exports.TableWidget = TableWidget;
+
+/**
+ * A single column object in the table.
+ *
+ * @param {TableWidget} table
+ *        The table object to which the column belongs.
+ * @param {string} id
+ *        Id of the column.
+ * @param {String} header
+ *        The displayed string on the column's header.
+ */
+function Column(table, id, header) {
+  this.tbody = table.tbody;
+  this.document = table.document;
+  this.window = table.window;
+  this.id = id;
+  this.uniqueId = table.uniqueId;
+  this.table = table;
+  this.cells = [];
+  this.items = {};
+
+  this.highlightUpdated = table.highlightUpdated;
+
+  // This wrapping element is required solely so that position:sticky works on
+  // the headers of the columns.
+  this.wrapper = this.document.createElementNS(XUL_NS, "vbox");
+  this.wrapper.className = "table-widget-wrapper";
+  this.wrapper.setAttribute("flex", "1");
+  this.wrapper.setAttribute("tabindex", "0");
+  this.tbody.appendChild(this.wrapper);
+
+  this.splitter = this.document.createElementNS(XUL_NS, "splitter");
+  this.splitter.className = "devtools-side-splitter";
+  this.tbody.appendChild(this.splitter);
+
+  this.column = this.document.createElementNS(HTML_NS, "div");
+  this.column.id = id;
+  this.column.className = "table-widget-column";
+  this.wrapper.appendChild(this.column);
+
+  this.header = this.document.createElementNS(XUL_NS, "label");
+  this.header.className = "plain devtools-toolbar table-widget-column-header";
+  this.header.setAttribute("value", header);
+  this.column.appendChild(this.header);
+  if (table.headersContextMenu) {
+    this.header.setAttribute("context", table.headersContextMenu);
+  }
+  this.toggleColumn = this.toggleColumn.bind(this);
+  this.table.on(EVENTS.HEADER_CONTEXT_MENU, this.toggleColumn);
+
+  this.onColumnSorted = this.onColumnSorted.bind(this);
+  this.table.on(EVENTS.COLUMN_SORTED, this.onColumnSorted);
+
+  this.onRowUpdated = this.onRowUpdated.bind(this);
+  this.table.on(EVENTS.ROW_UPDATED, this.onRowUpdated);
+
+  this.onClick = this.onClick.bind(this);
+  this.onMousedown = this.onMousedown.bind(this);
+  this.onKeydown = this.onKeydown.bind(this);
+  this.column.addEventListener("click", this.onClick);
+  this.column.addEventListener("mousedown", this.onMousedown);
+  this.column.addEventListener("keydown", this.onKeydown);
+}
+
+Column.prototype = {
+
+  items: null,
+
+  _itemsDirty: null,
+
+  selectedRow: null,
+
+  cells: null,
+
+  /**
+   * Gets whether the table is sorted on this column or not.
+   * 0 - not sorted.
+   * 1 - ascending order
+   * 2 - descending order
+   */
+  get sorted() {
+    return this._sortState || 0;
+  },
+
+  /**
+   * Sets the sorted value
+   */
+  set sorted(value) {
+    if (!value) {
+      this.header.removeAttribute("sorted");
+    } else {
+      this.header.setAttribute("sorted",
+        value == 1 ? "ascending" : "descending");
+    }
+    this._sortState = value;
+  },
+
+  /**
+   * Gets the selected row in the column.
+   */
+  get selectedIndex() {
+    if (!this.selectedRow) {
+      return -1;
+    }
+    return this.items[this.selectedRow];
+  },
+
+  /**
+   * Called when the column is sorted by.
+   *
+   * @param {string} event
+   *        The event name of the event. i.e. EVENTS.COLUMN_SORTED
+   * @param {string} column
+   *        The id of the column being sorted by.
+   */
+  onColumnSorted: function(event, column) {
+    if (column != this.id) {
+      this.sorted = 0;
+      return;
+    } else if (this.sorted == 0 || this.sorted == 2) {
+      this.sorted = 1;
+    } else {
+      this.sorted = 2;
+    }
+  },
+
+  /**
+   * Called when a row is updated.
+   *
+   * @param {string} event
+   *        The event name of the event. i.e. EVENTS.ROW_UPDATED
+   * @param {string} id
+   *        The unique id of the object associated with the row.
+   */
+  onRowUpdated: function(event, id) {
+    this._updateItems();
+    if (this.highlightUpdated && this.items[id] != null) {
+      this.cells[this.items[id]].flash();
+    }
+  },
+
+  destroy: function() {
+    this.table.off(EVENTS.COLUMN_SORTED, this.onColumnSorted);
+    this.table.off(EVENTS.HEADER_CONTEXT_MENU, this.toggleColumn);
+    this.table.off(EVENTS.ROW_UPDATED, this.onRowUpdated);
+    this.splitter.remove();
+    this.column.parentNode.remove();
+    this.cells = null;
+    this.items = null;
+    this.selectedRow = null;
+  },
+
+  /**
+   * Selects the row at the `index` index
+   */
+  selectRowAt: function(index) {
+    if (this.selectedRow) {
+      this.cells[this.items[this.selectedRow]].toggleClass("theme-selected");
+    }
+    if (index < 0) {
+      this.selectedRow = null;
+      return;
+    }
+    let cell = this.cells[index];
+    cell.toggleClass("theme-selected");
+    cell.focus();
+    this.selectedRow = cell.id;
+  },
+
+  /**
+   * Selects the row with the object having the `uniqueId` value as `id`
+   */
+  selectRow: function(id) {
+    this._updateItems();
+    this.selectRowAt(this.items[id]);
+  },
+
+  /**
+   * Selects the next row. Cycles to first if last row is selected.
+   */
+  selectNextRow: function() {
+    this._updateItems();
+    let index = this.items[this.selectedRow] + 1;
+    if (index == this.cells.length) {
+      index = 0;
+    }
+    this.selectRowAt(index);
+  },
+
+  /**
+   * Selects the previous row. Cycles to last if first row is selected.
+   */
+  selectPreviousRow: function() {
+    this._updateItems();
+    let index = this.items[this.selectedRow] - 1;
+    if (index == -1) {
+      index = this.cells.length - 1;
+    }
+    this.selectRowAt(index);
+  },
+
+  /**
+   * Pushes the `item` object into the column. If this column is sorted on,
+   * then inserts the object at the right position based on the column's id key's
+   * value.
+   *
+   * @returns {number}
+   *          The index of the currently pushed item.
+   */
+  push: function(item) {
+    let value = item[this.id];
+
+    if (this.sorted) {
+      let index;
+      if (this.sorted == 1) {
+        index = this.cells.findIndex(element => {
+          return value < element.value;
+        });
+      } else {
+        index = this.cells.findIndex(element => {
+          return value > element.value;
+        });
+      }
+      index = index >= 0 ? index : this.cells.length;
+      if (index < this.cells.length) {
+        this._itemsDirty = true;
+      }
+      this.items[item[this.uniqueId]] = index;
+      this.cells.splice(index, 0, new Cell(this, item, this.cells[index]));
+      return index;
+    }
+
+    this.items[item[this.uniqueId]] = this.cells.length;
+    return this.cells.push(new Cell(this, item)) - 1;
+  },
+
+  /**
+   * Inserts the `item` object at the given `index` index in the table.
+   */
+  insertAt: function(item, index) {
+    if (index < this.cells.length) {
+      this._itemsDirty = true;
+    }
+    this.items[item[this.uniqueId]] = index;
+    this.cells.splice(index, 0, new Cell(this, item, this.cells[index]));
+  },
+
+  /**
+   * Event handler for the command event coming from the header context menu.
+   * Toggles the column if it was requested by the user.
+   *
+   * @param {string} event
+   *        The name of the event. i.e. EVENTS.HEADER_CONTEXT_MENU
+   * @param {string} id
+   *        Id of the column to be toggled
+   * @param {string} checked
+   *        true if the column is visible
+   */
+  toggleColumn: function(event, id, checked) {
+    if (id != this.id) {
+      return;
+    }
+    if (checked) {
+      this.wrapper.removeAttribute("hidden");
+    } else {
+      this.wrapper.setAttribute("hidden", "true");
+    }
+  },
+
+  /**
+   * Removes the corresponding item from the column.
+   */
+  remove: function(item) {
+    this._updateItems();
+    let index = this.items[item[this.uniqueId]];
+    if (index == null) {
+      return;
+    }
+
+    if (index < this.cells.length) {
+      this._itemsDirty = true;
+    }
+    this.cells[index].destroy();
+    this.cells.splice(index, 1);
+    delete this.items[item[this.uniqueId]];
+  },
+
+  /**
+   * Updates the corresponding item from the column.
+   */
+  update: function(item) {
+    this._updateItems();
+
+    let index = this.items[item[this.uniqueId]];
+    if (index == null) {
+      return;
+    }
+
+    this.cells[index].value = item[this.id];
+  },
+
+  /**
+   * Updates the `this.items` id vs index map.
+   */
+  _updateItems: function() {
+    if (!this._itemsDirty) {
+      return;
+    }
+    for (let i = 0; i < this.cells.length; i++) {
+      this.items[this.cells[i].id] = i;
+    }
+    this._itemsDirty = false;
+  },
+
+  /**
+   * Clears the current column
+   */
+  clear: function() {
+    this.cells = [];
+    this.items = {};
+    this._itemsDirty = false;
+    this.selectedRow = null;
+    while (this.header.nextSibling) {
+      this.header.nextSibling.remove();
+    }
+  },
+
+  /**
+   * Sorts the given items and returns the sorted list if the table was sorted
+   * by this column.
+   */
+  sort: function(items) {
+
+    // Only sort the array if we are sorting based on this column
+    if (this.sorted == 1) {
+      items.sort((a, b) => {
+        return a[this.id] > b[this.id]
+      });
+    } else if (this.sorted > 1) {
+      items.sort((a, b) => {
+        return b[this.id] > a[this.id]
+      });
+    }
+
+    if (this.selectedRow) {
+      this.cells[this.items[this.selectedRow]].toggleClass("theme-selected");
+    }
+    this.items = {};
+    // Otherwise, just use the sorted array passed to update the cells value.
+    items.forEach((item, i) => {
+      this.items[item[this.uniqueId]] = i;
+      this.cells[i].value = item[this.id];
+      this.cells[i].id = item[this.uniqueId];
+    });
+    if (this.selectedRow) {
+      this.cells[this.items[this.selectedRow]].toggleClass("theme-selected");
+    }
+    this._itemsDirty = false;
+    return items;
+  },
+
+  /**
+   * Click event handler for the column. Used to detect click on header for
+   * for sorting.
+   */
+  onClick: function(event) {
+    if (event.originalTarget == this.column) {
+      return;
+    }
+
+    if (event.button == 0 && event.originalTarget == this.header) {
+      return this.table.sortBy(this.id);
+    }
+  },
+
+  /**
+   * Mousedown event handler for the column. Used to select rows.
+   */
+  onMousedown: function(event) {
+    if (event.originalTarget == this.column ||
+        event.originalTarget == this.header) {
+      return;
+    }
+    if (event.button == 0) {
+      this.table.emit(EVENTS.ROW_SELECTED,
+        event.originalTarget.getAttribute("data-id"));
+    }
+  },
+
+  /**
+   * Keydown event handler for the column. Used for keyboard navigation amongst
+   * rows.
+   */
+  onKeydown: function(event) {
+    if (event.originalTarget == this.column ||
+        event.originalTarget == this.header) {
+      return;
+    }
+
+    switch (event.keyCode) {
+      case event.DOM_VK_ESCAPE:
+      case event.DOM_VK_LEFT:
+      case event.DOM_VK_RIGHT:
+        return;
+      case event.DOM_VK_HOME:
+      case event.DOM_VK_END:
+        return;
+      case event.DOM_VK_UP:
+        event.preventDefault();
+        let prevRow = event.originalTarget.previousSibling;
+        if (this.header == prevRow) {
+          prevRow = this.column.lastChild;
+        }
+        this.table.emit(EVENTS.ROW_SELECTED, prevRow.getAttribute("data-id"));
+        break;
+
+      case event.DOM_VK_DOWN:
+        event.preventDefault();
+        let nextRow = event.originalTarget.nextSibling ||
+                      this.header.nextSibling;
+        this.table.emit(EVENTS.ROW_SELECTED, nextRow.getAttribute("data-id"));
+        break;
+    }
+  }
+};
+
+/**
+ * A single cell in a column
+ *
+ * @param {Column} column
+ *        The column object to which the cell belongs.
+ * @param {object} item
+ *        The object representing the row.
+ * @param {Cell} nextCell
+ *        The cell object which is next to this cell. null if this cell is last
+ *        cell of the column
+ */
+function Cell(column, item, nextCell) {
+  let document = column.document;
+
+  this.label = document.createElementNS(XUL_NS, "label");
+  this.label.setAttribute("crop", "end");
+  this.label.className = "plain table-widget-cell";
+  if (nextCell) {
+    column.column.insertBefore(this.label, nextCell.label);
+  } else {
+    column.column.appendChild(this.label);
+  }
+
+  this.value = item[column.id];
+  this.id = item[column.uniqueId];
+}
+
+Cell.prototype = {
+
+  set id(value) {
+    this._id = value;
+    this.label.setAttribute("data-id", value);
+  },
+
+  get id() {
+    return this._id;
+  },
+
+  set value(value) {
+    this._value = value;
+    if (!value) {
+      this.label.setAttribute("value", "");
+      return;
+    }
+    if (value.length > MAX_VISIBLE_STRING_SIZE) {
+      value = value .substr(0, MAX_VISIBLE_STRING_SIZE) + "\u2026"; // …
+    }
+    this.label.setAttribute("value", value + "");
+  },
+
+  get value() {
+    return this._value;
+  },
+
+  toggleClass: function(className) {
+    this.label.classList.toggle(className);
+  },
+
+  /**
+   * Flashes the cell for a brief time. This when done for ith cells in all
+   * columns, makes it look like the row is being highlighted/flashed.
+   */
+  flash: function() {
+    this.label.classList.remove("flash-out");
+    this.label.classList.add("flash-out");
+  },
+
+  focus: function() {
+    this.label.focus();
+  },
+
+  destroy: function() {
+    this.label.remove();
+    this.label = null;
+  }
+}
diff --git a/browser/devtools/shared/widgets/TreeWidget.js b/browser/devtools/shared/widgets/TreeWidget.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/shared/widgets/TreeWidget.js
@@ -0,0 +1,600 @@
+/* -*- Mode: javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const Services = require("Services")
+const HTML_NS = "http://www.w3.org/1999/xhtml";
+
+const EventEmitter = require("devtools/toolkit/event-emitter");
+
+/**
+ * A tree widget with keyboard navigation and collapsable structure.
+ *
+ * @param {nsIDOMNode} node
+ *        The container element for the tree widget.
+ * @param {Object} options
+ *        - emptyText {string}: text to display when no entries in the table.
+ *        - containsURL {boolean}: true if the widget is displaying urls.
+ *        - defaultType {string}: The default type of the tree items. For ex. 'js'
+ */
+function TreeWidget(node, options={}) {
+  EventEmitter.decorate(this);
+
+  this.document = node.ownerDocument;
+  this.window = this.document.defaultView;
+  this._parent = node;
+
+  let {emptyText, containsURL, defaultType} = options;
+  this.emptyText = emptyText || "";
+  this.containsURL = !!containsURL;
+  this.defaultType = defaultType;
+
+  this.setupRoot();
+
+  this.placeholder = this.document.createElementNS(HTML_NS, "label");
+  this.placeholder.className = "tree-widget-empty-text";
+  this._parent.appendChild(this.placeholder);
+
+  if (this.emptyText) {
+    this.setPlaceholderText(this.emptyText);
+  }
+  // A map to hold all the passed attachment to each leaf in the tree.
+  this.attachments = new Map();
+};
+
+TreeWidget.prototype = {
+
+  _selectedLabel: null,
+  _selectedItem: null,
+
+  /**
+   * Select any node in the tree.
+   *
+   * @param {array} id
+   *        An array of ids leading upto the selected item
+   */
+  set selectedItem(id) {
+    if (this._selectedLabel) {
+      this._selectedLabel.classList.remove("theme-selected");
+    }
+    let currentSelected = this._selectedLabel;
+    if (id == -1) {
+      this._selectedLabel = this._selectedItem = null;
+      return;
+    }
+    if (!typeof id == "array") {
+      return;
+    }
+    this._selectedLabel = this.root.setSelectedItem(id);
+    if (!this._selectedLabel) {
+      this._selectedItem = null;
+    } else {
+      if (currentSelected != this._selectedLabel) {
+        this.ensureSelectedVisible();
+      }
+      this._selectedItem =
+      JSON.parse(this._selectedLabel.parentNode.getAttribute("data-id"));
+    }
+  },
+
+  /**
+   * Gets the selected item in the tree.
+   *
+   * @return {array}
+   *        An array of ids leading upto the selected item
+   */
+  get selectedItem() {
+    return this._selectedItem;
+  },
+
+  /**
+   * Returns if the passed array corresponds to the selected item in the tree.
+   *
+   * @return {array}
+   *        An array of ids leading upto the requested item
+   */
+  isSelected: function(item) {
+    if (this._selectedItem.length != item.length) {
+      return false;
+    }
+
+    for (let i = 0; i < this._selectedItem.length; i++) {
+      if (this._selectedItem[i] != item[i]) {
+        return false;
+      }
+    }
+
+    return true;
+  },
+
+  destroy: function() {
+    this.root.remove();
+    this.root = null;
+  },
+
+  /**
+   * Sets up the root container of the TreeWidget.
+   */
+  setupRoot: function() {
+    this.root = new TreeItem(this.document);
+    this._parent.appendChild(this.root.children);
+
+    this.root.children.addEventListener("click", e => this.onClick(e));
+    this.root.children.addEventListener("keypress", e => this.onKeypress(e));
+  },
+
+  /**
+   * Sets the text to be shown when no node is present in the tree
+   */
+  setPlaceholderText: function(text) {
+    this.placeholder.textContent = text;
+  },
+
+  /**
+   * Select any node in the tree.
+   *
+   * @param {array} id
+   *        An array of ids leading upto the selected item
+   */
+  selectItem: function(id) {
+    this.selectedItem = id;
+  },
+
+  /**
+   * Selects the next visible item in the tree.
+   */
+  selectNextItem: function() {
+    let next = this.getNextVisibleItem();
+    if (next) {
+      this.selectedItem = next;
+    }
+  },
+
+  /**
+   * Selects the previos visible item in the tree
+   */
+  selectPreviousItem: function() {
+    let prev = this.getPreviousVisibleItem();
+    if (prev) {
+      this.selectedItem = prev;
+    }
+  },
+
+  /**
+   * Returns the next visible item in the tree
+   */
+  getNextVisibleItem: function() {
+    let node = this._selectedLabel;
+    if (node.hasAttribute("expanded") && node.nextSibling.firstChild) {
+      return JSON.parse(node.nextSibling.firstChild.getAttribute("data-id"));
+    }
+    node = node.parentNode;
+    if (node.nextSibling) {
+      return JSON.parse(node.nextSibling.getAttribute("data-id"));
+    }
+    node = node.parentNode;
+    while (node.parentNode && node != this.root.children) {
+      if (node.parentNode && node.parentNode.nextSibling) {
+        return JSON.parse(node.parentNode.nextSibling.getAttribute("data-id"));
+      }
+      node = node.parentNode;
+    }
+    return null;
+  },
+
+  /**
+   * Returns the previous visible item in the tree
+   */
+  getPreviousVisibleItem: function() {
+    let node = this._selectedLabel.parentNode;
+    if (node.previousSibling) {
+      node = node.previousSibling.firstChild;
+      while (node.hasAttribute("expanded") && !node.hasAttribute("empty")) {
+        if (!node.nextSibling.lastChild) {
+          break;
+        }
+        node = node.nextSibling.lastChild.firstChild;
+      }
+      return JSON.parse(node.parentNode.getAttribute("data-id"));
+    }
+    node = node.parentNode;
+    if (node.parentNode && node != this.root.children) {
+      node = node.parentNode;
+      while (node.hasAttribute("expanded") && !node.hasAttribute("empty")) {
+        if (!node.nextSibling.firstChild) {
+          break;
+        }
+        node = node.nextSibling.firstChild.firstChild;
+      }
+      return JSON.parse(node.getAttribute("data-id"));
+    }
+    return null;
+  },
+
+  clearSelection: function() {
+    this.selectedItem = -1;
+  },
+
+  /**
+   * Converts a url into parts required by the tree widget. For example, if the
+   * pased url is "https://developer.mozilla.org/en-US/docs/Tools", the returned
+   * value will be the following array:
+   * ["https://developer.mozilla.org", "en-US", "docs", "Tools"]
+   * This is done such that the following tree heirarchy is formed:
+   * https://developer.mozilla.org
+   *   └ en-US
+   *      └ docs
+   *         └ Tools
+   */
+  urlToIds: function(url) {
+    let uri = Services.io.newURI(url, null, null);
+    let ids = uri.path.split("/").filter(a => !!a);
+    ids.unshift(uri.prePath);
+    return ids;
+  },
+
+  /**
+   * Adds an item in the tree. The item can be added as a child to any node in
+   * the tree. The method will also create any subnode not present in the process.
+   *
+   * @param {array|string} item
+   *        url of the item if `this.containsURL` is true.
+   *        Otherwise, [[ids], [values] where [ids] is the array of ids to be
+   *        inserted in the tree and [values] is the array of corresponding
+   *        displayed text for each id.
+   *        For example, if ids = values = ["foo", "bar", "baz"] and the tree is
+   *        empty, then the following hierarchy will be created in the tree:
+   *        foo
+   *         └ bar
+   *            └ baz
+   *        If [values] is undefined, [ids] will be used as values instead.
+   * @param {object} options
+   *        An options object containing the following options:
+   *         - defaultType {string} The default type of the items in the ids
+   *                       array. For example. "js", "css", "dir" etc.
+   *         - attachment {object} Any object to be associated with this item.
+   *         - type {string} The type of this particular leaf node. If this is
+   *                null, then defaultType will be used for leaf node as well.
+   */
+  add: function(item, options = {}) {
+    let ids, values;
+    if (!this.containsURL) {
+      [ids, values] = item;
+      if (!values) {
+        values = ids;
+      }
+    } else {
+      values = ids = this.urlToIds(item);
+    }
+    if (!options.defaultType) {
+      options.defaultType = this.defaultType;
+    }
+    this.root.add(ids, values, options);
+    if (options.attachment) {
+      this.attachments.set(JSON.stringify(ids), options.attachment);
+    }
+  },
+
+  /**
+   * Removes the specified item and all of its child items from the tree.
+   *
+   * @param {array} item
+   *        The array of ids leading up to the item.
+   */
+  remove: function(item) {
+    this.root.remove(item)
+    this.attachments.delete(JSON.stringify(item));
+  },
+
+  /**
+   * Removes all of the child nodes from this tree.
+   */
+  clear: function() {
+    this.root.remove();
+    this.setupRoot();
+    this.attachments.clear();
+  },
+
+  /**
+   * Expands the tree completely
+   */
+  expandAll: function() {
+    this.root.expandAll();
+  },
+
+  /**
+   * Collapses the tree completely
+   */
+  collapseAll: function() {
+    this.root.collapseAll();
+  },
+
+  /**
+   * Click handler for the tree. Used to select, open and close the tree nodes.
+   */
+  onClick: function(event) {
+    let target = event.originalTarget;
+    while (target && !target.classList.contains("tree-widget-item")) {
+      if (target == this.root.children) {
+        return;
+      }
+      target = target.parentNode;
+    }
+    if (!target) {
+      return;
+    }
+    if (target.hasAttribute("expanded")) {
+      target.removeAttribute("expanded");
+    } else {
+      target.setAttribute("expanded", "true");
+    }
+    if (this._selectedLabel) {
+      this._selectedLabel.classList.remove("theme-selected");
+    }
+    if (this._selectedLabel != target) {
+      let ids = target.parentNode.getAttribute("data-id");
+      this._selectedItem = JSON.parse(ids);
+      this.emit("select", this._selectedItem, this.attachments.get(ids));
+      this._selectedLabel = target;
+    }
+    target.classList.add("theme-selected");
+  },
+
+  /**
+   * Keypress handler for this tree. Used to select next and previous visible
+   * items, as well as collapsing and expanding any item.
+   */
+  onKeypress: function(event) {
+    let currentSelected = this._selectedLabel;
+    switch(event.keyCode) {
+      case event.DOM_VK_UP:
+        this.selectPreviousItem();
+        break;
+
+      case event.DOM_VK_DOWN:
+        this.selectNextItem();
+        break;
+
+      case event.DOM_VK_RIGHT:
+        if (this._selectedLabel.hasAttribute("expanded")) {
+          this.selectNextItem();
+        } else {
+          this._selectedLabel.setAttribute("expanded", "true");
+        }
+        break;
+
+      case event.DOM_VK_LEFT:
+        if (this._selectedLabel.hasAttribute("expanded") &&
+            !this._selectedLabel.hasAttribute("empty")) {
+          this._selectedLabel.removeAttribute("expanded");
+        } else {
+          this.selectPreviousItem();
+        }
+        break;
+
+      default: return;
+    }
+    event.preventDefault();
+    if (this._selectedLabel != currentSelected) {
+      let ids = JSON.stringify(this._selectedItem);
+      this.emit("select", this._selectedItem, this.attachments.get(ids));
+      this.ensureSelectedVisible();
+    }
+  },
+
+  /**
+   * Scrolls the viewport of the tree so that the selected item is always
+   * visible.
+   */
+  ensureSelectedVisible: function() {
+    let {top, bottom} = this._selectedLabel.getBoundingClientRect();
+    let height = this.root.children.parentNode.clientHeight;
+    if (top < 0) {
+      this._selectedLabel.scrollIntoView();
+    } else if (bottom > height) {
+      this._selectedLabel.scrollIntoView(false);
+    }
+  }
+};
+
+module.exports.TreeWidget = TreeWidget;
+
+/**
+ * Any item in the tree. This can be an empty leaf node also.
+ *
+ * @param {HTMLDocument} document
+ *        The document element used for creating new nodes.
+ * @param {TreeItem} parent
+ *        The parent item for this item.
+ * @param {string|DOMElement} label
+ *        Either the dom node to be used as the item, or the string to be
+ *        displayed for this node in the tree
+ * @param {object} options
+ *        An options object from which the following options are used:
+ *         - type {string} The type of the current node. For ex. "js"
+ *         - defaultType {string} The default type to be used when options.type
+ *                       is null
+ */
+function TreeItem(document, parent, label, options = {}) {
+  this.document = document
+  this.node = this.document.createElementNS(HTML_NS, "li");
+  this.node.setAttribute("tabindex", "0");
+  this.isRoot = !parent;
+  this.parent = parent;
+  if (this.parent) {
+    this.level = this.parent.level + 1;
+  }
+  if (!!label) {
+    this.label = this.document.createElementNS(HTML_NS, "div");
+    this.label.setAttribute("empty", "true");
+    this.label.setAttribute("level", this.level);
+    this.label.className = "tree-widget-item";
+    let type = options.type || options.defaultType;
+    if (type) {
+      this.label.setAttribute("type", type);
+    }
+    if (typeof label == "string") {
+      this.label.textContent = label
+    } else {
+      this.label.appendChild(label);
+    }
+    this.node.appendChild(this.label);
+  }
+  this.children = this.document.createElementNS(HTML_NS, "ul");
+  if (this.isRoot) {
+    this.children.className = "tree-widget-container";
+  } else {
+    this.children.className = "tree-widget-children";
+  }
+  this.node.appendChild(this.children);
+  this.items = new Map();
+}
+
+TreeItem.prototype = {
+
+  items: null,
+
+  isSelected: false,
+
+  expanded: false,
+
+  isRoot: false,
+
+  parent: null,
+
+  children: null,
+
+  level: 0,
+
+  /**
+   * Adds the item to the sub tree contained by this node. The item to be inserted
+   * can be a direct child of this node, or further down the tree.
+   *
+   * @param {array} item
+   *        Ids of items leading up to the item to be iserted.
+   * @param {array} value
+   *        Display values of the items leading up to the item to be inserted.
+   * @param {object} options
+   *        Options passed to the Constructor of TreeItem when the item to be
+   *        inserted is direct child of this node.
+   */
+  add: function(item, value , options = {}) {
+    if (item.length == this.level) {
+      // This is the exit condition of recursive TreeItem.add calls
+      return;
+    }
+    // Get the id and label corresponding to this level inside the tree.
+    let [id, label] = [item[this.level], value[this.level]];
+    if (this.items.has(id)) {
+      // An item with same id already exists, thus calling the add method of that
+      // child to add the passed node at correct position.
+      this.items.get(id).add(item, value, options);
+    } else if(!!id) {
+      // No item with the id `id` exists, so we create one and call the add
+      // method of that item.
+      let labelString = label;
+      if (typeof label != "string") {
+        // label can be a DOMNode too, so we fetch the textContent in order to
+        // find the correct sorted location of this new item.
+        labelString = label.textContent;
+      }
+      let treeItem = new TreeItem(this.document, this, label, options);
+      let nextSibling = [...this.items.values()].find(child => {
+        return child.label.textContent >= labelString;
+      });
+      treeItem.add(item, value, options);
+      treeItem.node.setAttribute("data-id",
+                                 JSON.stringify(item.slice(0, this.level + 1)));
+      // Inserting this newly created item at correct position
+      if (nextSibling) {
+        this.children.insertBefore(treeItem.node, nextSibling.node);
+      } else {
+        this.children.appendChild(treeItem.node);
+      }
+      if (this.label) {
+        this.label.removeAttribute("empty");
+      }
+      this.items.set(id, treeItem);
+    }
+  },
+
+  /**
+   * If this item is to be removed, then removes this item and thus all of its
+   * subtree. Otherwise, call the remove method of appropriate child. This
+   * recursive method goes on till we have reached the end of the branch or the
+   * current item is to be removed.
+   *
+   * @param {array} item
+   *        Ids of items leading up to the item to be removed.
+   */
+  remove: function(item = []) {
+    let id = item.shift();
+    if (id && this.items.has(id)) {
+      let deleted = this.items.get(id);
+      if (!item.length) {
+        this.items.delete(id);
+      }
+      deleted.remove(item);
+    } else if (!id) {
+      this.destroy();
+    }
+  },
+
+  /**
+   * If this item is to be selected, then selected and expands the item.
+   * Otherwise, if a child item is to be selected, just expands this item.
+   *
+   * @param {array} item
+   *        Ids of items leading up to the item to be selected.
+   */
+  setSelectedItem: function(item) {
+    if (!item[this.level]) {
+      this.label.classList.add("theme-selected");
+      this.label.setAttribute("expanded", "true");
+      return this.label;
+    }
+    if (this.items.has(item[this.level])) {
+      let label = this.items.get(item[this.level]).setSelectedItem(item);
+      if (label && this.label) {
+        this.label.setAttribute("expanded", true);
+      }
+      return label;
+    }
+    return null;
+  },
+
+  /**
+   * Collapses this item and all of its sub tree items
+   */
+  collapseAll: function() {
+    if (this.label) {
+      this.label.removeAttribute("expanded");
+    }
+    for (let child of this.items.values()) {
+      child.collapseAll();
+    }
+  },
+
+  /**
+   * Expands this item and all of its sub tree items
+   */
+  expandAll: function() {
+    if (this.label) {
+      this.label.setAttribute("expanded", "true");
+    }
+    for (let child of this.items.values()) {
+      child.expandAll();
+    }
+  },
+
+  destroy: function() {
+    this.children.remove();
+    this.node.remove();
+    this.label = null;
+    this.items = null;
+    this.children = null;
+  }
+};
diff --git a/browser/devtools/shared/widgets/spectrum.css b/browser/devtools/shared/widgets/spectrum.css
--- a/browser/devtools/shared/widgets/spectrum.css
+++ b/browser/devtools/shared/widgets/spectrum.css
@@ -8,17 +8,17 @@
   height: 20px;
   -moz-margin-start: 6px;
   border: 1px solid #ccc;
   border-radius: 2px;
   cursor: pointer;
 }
 
 .theme-dark #eyedropper-button {
-  filter: url(chrome://browser/skin/devtools/filters.svg#colorpicker-invert);
+  filter: url(chrome://browser/skin/devtools/filters.svg#invert-white);
 }
 
 /* Mix-in classes */
 
 .spectrum-checker {
   background-color: #eee;
   background-image: linear-gradient(45deg, #ccc 25%, transparent 25%, transparent 75%, #ccc 75%, #ccc),
     linear-gradient(45deg, #ccc 25%, transparent 25%, transparent 75%, #ccc 75%, #ccc);
diff --git a/browser/devtools/shared/widgets/widgets.css b/browser/devtools/shared/widgets/widgets.css
--- a/browser/devtools/shared/widgets/widgets.css
+++ b/browser/devtools/shared/widgets/widgets.css
@@ -99,8 +99,13 @@
 .variables-view-open-inspector > .toolbarbutton-text,
 .variables-view-add-property > .toolbarbutton-text {
   display: none;
 }
 
 .variables-view-container[aligned-values] [optional-visibility] {
   display: none;
 }
+
+/* Table Widget */
+.table-widget-body > .devtools-side-splitter:last-child {
+  display: none;
+}
diff --git a/browser/themes/linux/jar.mn b/browser/themes/linux/jar.mn
--- a/browser/themes/linux/jar.mn
+++ b/browser/themes/linux/jar.mn
@@ -177,21 +177,30 @@ browser.jar:
   skin/classic/browser/tabview/search.png             (tabview/search.png)
   skin/classic/browser/tabview/stack-expander.png     (tabview/stack-expander.png)
   skin/classic/browser/tabview/tabview.png            (tabview/tabview.png)
   skin/classic/browser/tabview/tabview.css            (tabview/tabview.css)
   skin/classic/browser/translation-16.png             (../shared/translation/translation-16.png)
 * skin/classic/browser/devtools/common.css            (../shared/devtools/common.css)
 * skin/classic/browser/devtools/dark-theme.css        (../shared/devtools/dark-theme.css)
 * skin/classic/browser/devtools/light-theme.css       (../shared/devtools/light-theme.css)
-  skin/classic/browser/devtools/filters.svg          (../shared/devtools/filters.svg)
+  skin/classic/browser/devtools/filters.svg           (../shared/devtools/filters.svg)
   skin/classic/browser/devtools/controls.png          (../shared/devtools/images/controls.png)
   skin/classic/browser/devtools/controls@2x.png       (../shared/devtools/images/controls@2x.png)
-* skin/classic/browser/devtools/widgets.css           (devtools/widgets.css)
-  skin/classic/browser/devtools/commandline-icon.png  (devtools/commandline-icon.png)
+  skin/classic/browser/devtools/filetype-css.svg              (../shared/devtools/images/filetypes/css.svg)
+  skin/classic/browser/devtools/filetype-dir-close.svg        (../shared/devtools/images/filetypes/dir-close.svg)
+  skin/classic/browser/devtools/filetype-dir-open.svg         (../shared/devtools/images/filetypes/dir-open.svg)
+  skin/classic/browser/devtools/filetype-globe.svg            (../shared/devtools/images/filetypes/globe.svg)
+  skin/classic/browser/devtools/filetype-html.svg             (../shared/devtools/images/filetypes/html.svg)
+  skin/classic/browser/devtools/filetype-img.svg              (../shared/devtools/images/filetypes/img.svg)
+  skin/classic/browser/devtools/filetype-js.svg               (../shared/devtools/images/filetypes/js.svg)
+  skin/classic/browser/devtools/filetype-manifest.svg         (../shared/devtools/images/filetypes/manifest.svg)
+  skin/classic/browser/devtools/filetype-txt.svg              (../shared/devtools/images/filetypes/txt.svg)
+* skin/classic/browser/devtools/widgets.css                   (devtools/widgets.css)
+  skin/classic/browser/devtools/commandline-icon.png          (devtools/commandline-icon.png)
   skin/classic/browser/devtools/command-paintflashing.png     (../shared/devtools/images/command-paintflashing.png)
   skin/classic/browser/devtools/command-paintflashing@2x.png  (../shared/devtools/images/command-paintflashing@2x.png)
   skin/classic/browser/devtools/command-responsivemode.png    (../shared/devtools/images/command-responsivemode.png)
   skin/classic/browser/devtools/command-responsivemode@2x.png (../shared/devtools/images/command-responsivemode@2x.png)
   skin/classic/browser/devtools/command-scratchpad.png        (../shared/devtools/images/command-scratchpad.png)
   skin/classic/browser/devtools/command-scratchpad@2x.png     (../shared/devtools/images/command-scratchpad@2x.png)
   skin/classic/browser/devtools/command-tilt.png              (../shared/devtools/images/command-tilt.png)
   skin/classic/browser/devtools/command-tilt@2x.png           (../shared/devtools/images/command-tilt@2x.png)
diff --git a/browser/themes/osx/jar.mn b/browser/themes/osx/jar.mn
--- a/browser/themes/osx/jar.mn
+++ b/browser/themes/osx/jar.mn
@@ -301,18 +301,27 @@ browser.jar:
   skin/classic/browser/translation-16.png                   (../shared/translation/translation-16.png)
   skin/classic/browser/translation-16@2x.png                (../shared/translation/translation-16@2x.png)
 * skin/classic/browser/devtools/common.css                  (../shared/devtools/common.css)
 * skin/classic/browser/devtools/dark-theme.css              (../shared/devtools/dark-theme.css)
 * skin/classic/browser/devtools/light-theme.css             (../shared/devtools/light-theme.css)
   skin/classic/browser/devtools/filters.svg                 (../shared/devtools/filters.svg)
   skin/classic/browser/devtools/controls.png                (../shared/devtools/images/controls.png)
   skin/classic/browser/devtools/controls@2x.png             (../shared/devtools/images/controls@2x.png)
-* skin/classic/browser/devtools/widgets.css                 (devtools/widgets.css)
-  skin/classic/browser/devtools/commandline-icon.png        (devtools/commandline-icon.png)
+  skin/classic/browser/devtools/filetype-css.svg              (../shared/devtools/images/filetypes/css.svg)
+  skin/classic/browser/devtools/filetype-dir-close.svg        (../shared/devtools/images/filetypes/dir-close.svg)
+  skin/classic/browser/devtools/filetype-dir-open.svg         (../shared/devtools/images/filetypes/dir-open.svg)
+  skin/classic/browser/devtools/filetype-globe.svg            (../shared/devtools/images/filetypes/globe.svg)
+  skin/classic/browser/devtools/filetype-html.svg             (../shared/devtools/images/filetypes/html.svg)
+  skin/classic/browser/devtools/filetype-img.svg              (../shared/devtools/images/filetypes/img.svg)
+  skin/classic/browser/devtools/filetype-js.svg               (../shared/devtools/images/filetypes/js.svg)
+  skin/classic/browser/devtools/filetype-manifest.svg         (../shared/devtools/images/filetypes/manifest.svg)
+  skin/classic/browser/devtools/filetype-txt.svg              (../shared/devtools/images/filetypes/txt.svg)
+* skin/classic/browser/devtools/widgets.css                   (devtools/widgets.css)
+  skin/classic/browser/devtools/commandline-icon.png          (devtools/commandline-icon.png)
   skin/classic/browser/devtools/command-paintflashing.png     (../shared/devtools/images/command-paintflashing.png)
   skin/classic/browser/devtools/command-paintflashing@2x.png  (../shared/devtools/images/command-paintflashing@2x.png)
   skin/classic/browser/devtools/command-responsivemode.png    (../shared/devtools/images/command-responsivemode.png)
   skin/classic/browser/devtools/command-responsivemode@2x.png (../shared/devtools/images/command-responsivemode@2x.png)
   skin/classic/browser/devtools/command-scratchpad.png        (../shared/devtools/images/command-scratchpad.png)
   skin/classic/browser/devtools/command-scratchpad@2x.png     (../shared/devtools/images/command-scratchpad@2x.png)
   skin/classic/browser/devtools/command-tilt.png              (../shared/devtools/images/command-tilt.png)
   skin/classic/browser/devtools/command-tilt@2x.png           (../shared/devtools/images/command-tilt@2x.png)
diff --git a/browser/themes/shared/devtools/filters.svg b/browser/themes/shared/devtools/filters.svg
--- a/browser/themes/shared/devtools/filters.svg
+++ b/browser/themes/shared/devtools/filters.svg
@@ -1,16 +1,16 @@
 <svg height="0" xmlns="http://www.w3.org/2000/svg">
 <filter id="invert" x="0%" y="0%" width="100%" height="100%" >
   <feComponentTransfer>
     <feFuncR type="table" tableValues=".1 0"/>
     <feFuncG type="table" tableValues=".1 0"/>
     <feFuncB type="table" tableValues=".1 0"/>
   </feComponentTransfer>
 </filter>
-<filter id="colorpicker-invert" x="0%" y="0%" width="100%" height="100%" >
+<filter id="invert-white" x="0%" y="0%" width="100%" height="100%" >
   <feComponentTransfer>
     <feFuncR type="table" tableValues=".6 0"/>
     <feFuncG type="table" tableValues=".6 0"/>
     <feFuncB type="table" tableValues=".6 0"/>
   </feComponentTransfer>
 </filter>
-</svg>
\ No newline at end of file
+</svg>
diff --git a/browser/themes/shared/devtools/images/filetypes/css.svg b/browser/themes/shared/devtools/images/filetypes/css.svg
new file mode 100644
--- /dev/null
+++ b/browser/themes/shared/devtools/images/filetypes/css.svg
@@ -0,0 +1,4 @@
+<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="24" height="30" viewBox="0 0 610 792">
+  <path d="m418.566864,-1.299819h-418.066872v793.000014h610.000008v-601.068604l-191.933136,-191.931411zm8.933136,52.0652l130.933105,130.934799h-130.933105v-130.934799l0,0zm-396.50001,710.434814v-732.000013h365.999979v182.999998h183.000031v549.000015h-549.00001l0,0z"/>
+  <text transform="matrix(1.23153, 0, 0, 1.23153, -157.131, -58.4)" font-weight="800" x="164" y="549" font-family="Segoe UI" font-size="240">CSS</text>
+</svg>
diff --git a/browser/themes/shared/devtools/images/filetypes/dir-close.svg b/browser/themes/shared/devtools/images/filetypes/dir-close.svg
new file mode 100644
--- /dev/null
+++ b/browser/themes/shared/devtools/images/filetypes/dir-close.svg
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="#000000" width="20" height="20">
+  <path d="M 0.00,160.00 L 512.00,160.00 L 480.00,480.00 L 32.00,480.00 L 0.00,160.00 Z M 464.00,96.00 L 480.00,128.00 L 32.00,128.00 L 64.00,64.00 L 240.00,64.00 L 256.00,96.00 L 464.00,96.00 Z"/>
+</svg>
diff --git a/browser/themes/shared/devtools/images/filetypes/dir-open.svg b/browser/themes/shared/devtools/images/filetypes/dir-open.svg
new file mode 100644
--- /dev/null
+++ b/browser/themes/shared/devtools/images/filetypes/dir-open.svg
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="#000000" width="20" height="20">
+  <path d="M 416.00,480.00L 512.00,224.00L 96.00,224.00L0.00,480.00 zM 64.00,192.00 L 0.00,480.00 L 0.00,64.00 L 144.00,64.00 L 208.00,128.00 L 416.00,128.00 L 416.00,192.00 Z"/>
+</svg>
diff --git a/browser/themes/shared/devtools/images/filetypes/globe.svg b/browser/themes/shared/devtools/images/filetypes/globe.svg
new file mode 100644
--- /dev/null
+++ b/browser/themes/shared/devtools/images/filetypes/globe.svg
@@ -0,0 +1,3 @@
+<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="18" height="20" viewBox="0 0 878 1024">
+	<path d="M438.857 73.143q119.429 0 220.286 58.857t159.714 159.714 58.857 220.286-58.857 220.286-159.714 159.714-220.286 58.857-220.286-58.857-159.714-159.714-58.857-220.286 58.857-220.286 159.714-159.714 220.286-58.857zM595.429 370.857q-1.143 0.571-5.429 5.429t-7.714 5.429q1.143 0 2.571-2.857t2.857-6.286 2-4q3.429-4 12.571-8.571 8-3.429 29.714-6.857 19.429-4.571 29.143 6.286-1.143-1.143 5.429-7.429t8.286-6.857q1.714-1.143 8.571-2.571t8.571-4.286l1.143-12.571q-6.857 0.571-10-4t-3.714-12q0 1.143-3.429 4.571 0-4-2.571-4.571t-6.571 0.571-5.143 0.571q-5.714-1.714-8.571-4.286t-4.571-9.429-2.286-8.571q-1.143-2.857-5.429-6t-5.429-6q-0.571-1.143-1.429-3.143t-1.714-3.714-2.286-3.143-3.143-1.429-4 2.857-4.286 5.714-2.571 2.857q-1.714-1.143-3.429-0.857t-2.571 0.571-2.571 1.714-2.857 2q-1.714 1.143-4.857 1.714t-4.857 1.143q8.571-2.857-0.571-6.286-5.714-2.286-9.143-1.714 5.143-2.286 4.286-6.857t-4.857-8h2.857q-0.571-2.286-4.857-4.857t-10-4.857-7.429-3.429q-4.571-2.857-19.429-5.429t-18.857-0.286q-2.857 3.429-2.571 6t2.286 8 2 7.143q0.571 3.429-3.143 7.429t-3.714 6.857q0 4 8 8.857t5.714 12.286q-1.714 4.571-9.143 9.143t-9.143 6.857q-2.857 4.571-0.857 10.571t6 9.429q1.143 1.143 0.857 2.286t-2 2.571-3.143 2.286-3.714 2l-1.714 1.143q-6.286 2.857-11.714-3.429t-7.714-14.857q-4-14.286-9.143-17.143-13.143-4.571-16.571 0.571-2.857-7.429-23.429-14.857-14.286-5.143-33.143-2.286 3.429-0.571 0-8.571-4-8.571-10.857-6.857 1.714-3.429 2.286-10t0.571-7.714q1.714-7.429 6.857-13.143 0.571-0.571 4-4.857t5.429-7.714 0.286-3.429q20 2.286 28.571-6.286 2.857-2.857 6.571-9.714t6-9.714q5.143-3.429 8-3.143t8.286 3.143 8.286 2.857q8 0.571 8.857-6.286t-4.286-11.429q6.857 0.571 1.714-9.714-2.857-4-4.571-5.143-6.857-2.286-15.429 2.857-4.571 2.286 1.143 4.571-0.571-0.571-5.429 6t-9.429 10-9.143-2.857q-0.571-0.571-3.143-7.714t-5.429-7.714q-4.571 0-9.143 8.571 1.714-4.571-6.286-8.571t-13.714-4.571q10.857-6.857-4.571-15.429-4-2.286-11.714-2.857t-11.143 2.286q-2.857 4-3.143 6.571t2.857 4.571 6 3.143 6.571 2.286 4.857 1.714q8 5.714 4.571 8-1.143 0.571-4.857 2t-6.571 2.571-3.429 2.286q-1.714 2.286 0 8t-1.143 8q-2.857-2.857-5.143-10t-4-9.429q4 5.143-14.286 3.429l-5.714-0.571q-2.286 0-9.143 1.143t-11.714 0.571-7.714-4.571q-2.286-4.571 0-11.429 0.571-2.286 2.286-1.143-2.286-1.714-6.286-5.429t-5.714-4.857q-26.286 8.571-53.714 23.429 3.429 0.571 6.857-0.571 2.857-1.143 7.429-3.714t5.714-3.143q19.429-8 24-4l2.857-2.857q8 9.143 11.429 14.286-4-2.286-17.143-0.571-11.429 3.429-12.571 6.857 4 6.857 2.857 10.286-2.286-1.714-6.571-5.714t-8.286-6.286-8.571-2.857q-9.143 0-12.571 0.571-83.429 45.714-134.286 126.857 4 4 6.857 4.571 2.286 0.571 2.857 5.143t1.429 6.286 6.571-1.714q5.143 4.571 1.714 10.857 0.571-0.571 25.143 15.429 10.857 9.714 12 12 1.714 6.286-5.714 10.286-0.571-1.143-5.143-5.143t-5.143-2.286q-1.714 2.857 0.286 10.571t6 7.143q-4 0-5.429 9.143t-1.429 20.286-0.571 13.429l1.143 0.571q-1.714 6.857 3.143 19.714t12.286 11.143q-7.429 1.714 11.429 24.571 3.429 4.571 4.571 5.143 1.714 1.143 6.857 4.286t8.571 5.714 5.714 6q2.286 2.857 5.714 12.857t8 13.429q-1.143 3.429 5.429 11.429t6 13.143q-0.571 0-1.429 0.571t-1.429 0.571q1.714 4 8.857 8t8.857 7.429q0.571 1.714 1.143 5.714t1.714 6.286 4.571 1.143q1.143-11.429-13.714-35.429-8.571-14.286-9.714-16.571-1.714-2.857-3.143-8.857t-2.571-8.286q1.143 0 3.429 0.857t4.857 2 4.286 2.286 1.143 1.714q-1.714 4 1.143 10t6.857 10.571 9.714 10.857 6.857 7.429q3.429 3.429 8 11.143t0 7.714q5.143 0 11.429 5.714t9.714 11.429q2.857 4.571 4.571 14.857t2.857 13.714q1.143 4 4.857 7.714t7.143 5.429l9.143 4.571t7.429 4q2.857 1.143 10.571 6t12.286 6.571q5.714 2.286 9.143 2.286t8.286-1.429 7.714-2q8.571-1.143 16.571 8.571t12 12q20.571 10.857 31.429 6.286-1.143 0.571 0.286 4.286t4.571 8.857 5.143 8.286 3.143 4.857q2.857 3.429 10.286 8.571t10.286 8.571q3.429-2.286 4-5.143-1.714 4.571 4 11.429t10.286 5.714q8-1.714 8-18.286-17.714 8.571-28-10.286 0-0.571-1.429-3.143t-2.286-4.857-1.429-4.857 0-4.286 2.857-1.714q5.143 0 5.714-2t-1.143-7.143-2.286-7.429q-0.571-4.571-6.286-11.429t-6.857-8.571q-2.857 5.143-9.143 4.571t-9.143-5.143q0 0.571-0.857 3.143t-0.857 3.714q-7.429 0-8.571-0.571 0.571-1.714 1.429-10t2-12.857q0.571-2.286 3.143-6.857t4.286-8.286 2.286-7.143-2.571-5.429-10-1.429q-10.857 0.571-14.857 11.429-0.571 1.714-1.714 6t-2.857 6.571-5.143 4q-4 1.714-13.714 1.143t-13.714-2.857q-7.429-4.571-12.857-16.571t-5.429-21.143q0-5.714 1.429-15.143t1.714-14.286-3.143-14q1.714-1.143 5.143-5.429t5.714-6q1.143-0.571 2.571-0.857t2.571 0 2.286-0.857 1.714-3.429q-0.571-0.571-2.286-1.714-1.714-1.714-2.286-1.714 4 1.714 16.286-0.857t15.714 0.857q8.571 6.286 12.571-1.143 0-0.571-1.429-5.429t-0.286-7.714q2.857 15.429 16.571 5.143 1.714 1.714 8.857 2.857t10 2.857q1.714 1.143 4 3.143t3.143 2.571 2.857-0.286 4.857-3.714q5.714 8 6.857 13.714 6.286 22.857 10.857 25.143 4 1.714 6.286 1.143t2.571-5.429 0-8-0.857-7.143l-0.571-4.571v-10.286l-0.571-4.571q-8.571-1.714-10.571-6.857t0.857-10.571 8.571-10.571q0.571-0.571 4.571-2t8.857-3.714 7.143-4.571q12-10.857 8.571-20 4 0 6.286-5.143-0.571 0-2.857-1.714t-4.286-2.857-2.571-1.143q5.143-2.857 1.143-9.143 2.857-1.714 4.286-6.286t4.286-5.714q5.143 6.857 12 1.143 4-4.571 0.571-9.143 2.857-4 11.714-6t10.571-5.429q4 1.143 4.571-1.143t0.571-6.857 1.714-6.857q2.286-2.857 8.571-5.143t7.429-2.857l9.714-6.286q1.714-2.286 0-2.286 10.286 1.143 17.714-6.286 5.714-6.286-3.429-11.429 1.714-3.429-1.714-5.429t-8.571-3.143q1.714-0.571 6.571-0.286t6-0.857q8.571-5.714-4-9.143-9.714-2.857-24.571 6.857zM502.286 872q117.714-20.571 200.571-108-1.714-1.714-7.143-2.571t-7.143-2q-10.286-4-13.714-4.571 0.571-4-1.429-7.429t-4.571-5.143-7.143-4.571-6.286-4q-1.143-1.143-4-3.429t-4-3.143-4.286-2.571-4.857-1.143-5.714 0.571l-1.714 0.571q-1.714 0.571-3.143 1.429t-3.143 1.714-2.286 1.714 0 1.429q-12-9.714-20.571-12.571-2.857-0.571-6.286-3.143t-6-4-5.714-0.857-6.571 4q-2.857 2.857-3.429 8.571t-1.143 7.429q-4-2.857 0-10t1.143-10.571q-1.714-3.429-6-2.571t-6.857 2.571-6.571 4.857-5.143 3.714-4.857 3.143-4.857 4.286q-1.714 2.286-3.429 6.857t-2.857 6.286q-1.143-2.286-6.571-3.714t-5.429-3.143q1.143 5.714 2.286 20t2.857 21.714q4 17.714-6.857 27.429-15.429 14.286-16.571 22.857-2.286 12.571 6.857 14.857 0 4-4.571 11.714t-4 12.286q0 3.429 1.143 9.143z"/>
+</svg>
diff --git a/browser/themes/shared/devtools/images/filetypes/html.svg b/browser/themes/shared/devtools/images/filetypes/html.svg
new file mode 100644
--- /dev/null
+++ b/browser/themes/shared/devtools/images/filetypes/html.svg
@@ -0,0 +1,4 @@
+<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="24" height="30" viewBox="0 0 610 792">
+  <path d="m418.566864,-1.299819h-418.066872v793.000014h610.000008v-601.068604l-191.933136,-191.931411zm8.933136,52.0652l130.933105,130.934799h-130.933105v-130.934799l0,0zm-396.50001,710.434814v-732.000013h365.999979v182.999998h183.000031v549.000015h-549.00001l0,0z"/>
+  <text transform="matrix(1.23153, 0, 0, 1.23153, -157.131, -58.4)" font-weight="800" font-family="Segoe UI" font-size="240" x="175" y="550">&#10094;/&#10095;</text>
+</svg>
diff --git a/browser/themes/shared/devtools/images/filetypes/img.svg b/browser/themes/shared/devtools/images/filetypes/img.svg
new file mode 100644
--- /dev/null
+++ b/browser/themes/shared/devtools/images/filetypes/img.svg
@@ -0,0 +1,5 @@
+<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="24" height="30" viewBox="0 0 610 792">
+  <path d="m418.566986,-1.29982h-418.066986v792.999832h610v-601.068008l-191.933014,-191.931834l0,0.00001zm8.933014,52.06522l130.932983,130.934597h-130.932983v-130.934597l0,0zm-396.5,710.434612v-731.999813h366v182.999798h183v549.000015h-549l0,0z"/>
+  <circle r="57.5" cy="422.5" cx="383.5" fill="#000000"/>
+  <polygon points="413.14288330078125,503.14276123046875 358.8214416503906,557.4642944335938 250.1785888671875,448.8214416503906 51,648 558,648 " fill="#000000"/>
+</svg>
diff --git a/browser/themes/shared/devtools/images/filetypes/js.svg b/browser/themes/shared/devtools/images/filetypes/js.svg
new file mode 100644
--- /dev/null
+++ b/browser/themes/shared/devtools/images/filetypes/js.svg
@@ -0,0 +1,4 @@
+<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="24" height="30" viewBox="0 0 610 792">
+  <path d="m418.566864,-1.299819h-418.066872v793.000014h610.000008v-601.068604l-191.933136,-191.931411zm8.933136,52.0652l130.933105,130.934799h-130.933105v-130.934799l0,0zm-396.50001,710.434814v-732.000013h365.999979v182.999998h183.000031v549.000015h-549.00001l0,0z"/>
+  <text transform="matrix(1.23153, 0, 0, 1.23153, -157.131, -58.4)" font-weight="800" font-family="Segoe UI" font-size="320" x="210" y="560">JS</text>
+</svg>
diff --git a/browser/themes/shared/devtools/images/filetypes/manifest.svg b/browser/themes/shared/devtools/images/filetypes/manifest.svg
new file mode 100644
--- /dev/null
+++ b/browser/themes/shared/devtools/images/filetypes/manifest.svg
@@ -0,0 +1,4 @@
+<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="24" height="30" viewBox="0 0 610 792">
+  <path d="m418.566864,-1.299819h-418.066872v793.000014h610.000008v-601.068604l-191.933136,-191.931411zm8.933136,52.0652l130.933105,130.934799h-130.933105v-130.934799l0,0zm-396.50001,710.434814v-732.000013h365.999979v182.999998h183.000031v549.000015h-549.00001l0,0z"/>
+  <path d="m525.454468,616.600037l-208.687622,-178.87561c9.718628,-18.26001 15.233154,-39.096527 15.233154,-61.224426c0,-72.073151 -58.426849,-130.5 -130.5,-130.5c-13.183212,0 -25.906067,1.962952 -37.9021,5.5979l75.395462,75.395477c11.27829,11.27829 11.27829,29.73407 0,41.01236l-45.98764,45.98764c-11.278275,11.27829 -29.73407,11.27829 -41.012344,0l-75.39547,-75.395477c-3.634972,11.996033 -5.597908,24.718872 -5.597908,37.9021c0,72.073151 58.426849,130.5 130.5,130.5c22.127914,0 42.964401,-5.514526 61.224426,-15.23407l178.875641,208.687622c10.380188,12.109314 28.101013,12.789917 39.378387,1.512573l45.988525,-45.988586c11.277405,-11.277405 10.596802,-28.997314 -1.512512,-39.377502z" fill="black"/>
+</svg>
diff --git a/browser/themes/shared/devtools/images/filetypes/txt.svg b/browser/themes/shared/devtools/images/filetypes/txt.svg
new file mode 100644
--- /dev/null
+++ b/browser/themes/shared/devtools/images/filetypes/txt.svg
@@ -0,0 +1,7 @@
+<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="24" height="30" viewBox="0 0 610 792">
+  <path d="m418.566864,-1.299819h-418.066872v793.000014h610.000008v-601.068604l-191.933136,-191.931411zm8.933136,52.0652l130.933105,130.934799h-130.933105v-130.934799l0,0zm-396.50001,710.434814v-732.000013h365.999979v182.999998h183.000031v549.000015h-549.00001l0,0z"/>
+  <rect width="160" height="38" x="130" y="254"/>
+  <rect width="360" height="38" x="130" y="368"/>
+  <rect width="360" height="38" x="130" y="483"/>
+  <rect width="360" height="38" x="130" y="597"/>
+</svg>
diff --git a/browser/themes/shared/devtools/widgets.inc.css b/browser/themes/shared/devtools/widgets.inc.css
--- a/browser/themes/shared/devtools/widgets.inc.css
+++ b/browser/themes/shared/devtools/widgets.inc.css
@@ -1,13 +1,26 @@
 /* vim:set ts=2 sw=2 sts=2 et: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+/* Various substitutions used by various widgets */
+%filter substitution
+%define smw_marginDark #000
+%define smw_marginLight #aaa
+%define smw_itemDarkTopBorder rgba(0,0,0,0.2)
+%define smw_itemDarkBottomBorder rgba(128,128,128,0.15)
+%define smw_itemLightTopBorder rgba(128,128,128,0.15)
+%define smw_itemLightBottomBorder transparent
+%define table_itemDarkStartBorder rgba(0,0,0,0.2)
+%define table_itemDarkEndBorder rgba(128,128,128,0.15)
+%define table_itemLightStartBorder rgba(128,128,128,0.25)
+%define table_itemLightEndBorder transparent
+
 /* Generic pane helpers */
 
 .generic-toggled-side-pane {
   -moz-margin-start: 0 !important;
   /* Unfortunately, transitions don't work properly with locale-aware properties,
      so both the left and right margins are set via js, while the start margin
      is always overridden here. */
 }
@@ -346,24 +359,16 @@
 }
 
 .theme-light .fast-list-widget-empty-text {
   color: #585959; /* Grey foreground text */
 }
 
 /* SideMenuWidget */
 
-%filter substitution
-%define smw_marginDark #000
-%define smw_marginLight #aaa
-%define smw_itemDarkTopBorder rgba(0,0,0,0.2)
-%define smw_itemDarkBottomBorder rgba(128,128,128,0.15)
-%define smw_itemLightTopBorder rgba(128,128,128,0.15)
-%define smw_itemLightBottomBorder transparent
-
 .side-menu-widget-container {
   /* Hack: force hardware acceleration */
   transform: translateZ(1px);
 }
 
 /* SideMenuWidget container */
 
 .theme-dark .side-menu-widget-container,
@@ -1007,9 +1012,363 @@
 .theme-dark .table-chart-summary-label {
   color: #f5f7fa; /* Light foreground text */
 }
 
 .theme-light .table-chart-summary-label {
   color: #18191a; /* Dark foreground text */
 }
 
+/* Table Widget */
+
+/* Table body */
+
+.table-widget-body > .devtools-side-splitter {
+  border: none;
+}
+
+.table-widget-body {
+  overflow: auto;
+}
+
+.theme-light .table-widget-body {
+  background: #F7F7F7 !important; /* Background-Sidebar, !important because
+                                     light-theme.css overrides it */
+}
+
+.theme-dark .table-widget-body,
+.theme-dark .table-widget-empty-text {
+  background: url(background-noise-toolbar.png), #343c45; /* Toolbars */
+}
+
+.theme-dark .table-widget-body:-moz-locale-dir(ltr) {
+  box-shadow: inset -1px 0 0 @smw_marginDark@;
+}
+
+.theme-dark .table-widget-body:-moz-locale-dir(rtl) {
+  box-shadow: inset 1px 0 0 @smw_marginDark@;
+}
+
+.table-widget-body:-moz-locale-dir(ltr) {
+  box-shadow: inset -1px 0 0 @smw_marginLight@;
+}
+
+.table-widget-body:-moz-locale-dir(rtl) {
+  box-shadow: inset 1px 0 0 @smw_marginLight@;
+}
+
+/* Column Headers */
+
+.theme-dark .table-widget-column-header,
+.theme-dark .table-widget-cell {
+  -moz-border-end: 1px solid @table_itemDarkStartBorder@;
+  box-shadow: inset 1px 0 0 @table_itemDarkEndBorder@;
+}
+
+.theme-light .table-widget-column-header,
+.theme-light .table-widget-cell {
+  -moz-border-end: 1px solid @table_itemLightStartBorder@;
+  box-shadow: inset 1px 0 0 @table_itemLightEndBorder@;
+}
+
+.table-widget-column-header {
+  background: rgba(0,0,0,0);
+  position: sticky;
+  top: 0;
+  min-height: 32px;
+  width: 100%;
+  border: none;
+  padding: 8px 0 0 !important;
+  color: inherit;
+  text-align: center;
+  font-weight: inherit !important;
+  transition: background-color 0.1s ease-in-out;
+}
+
+.table-widget-column-header:hover {
+  background: rgba(0,0,0,0.10);
+}
+
+.table-widget-column-header:hover:active {
+  background: rgba(0,0,0,0.25);
+}
+
+.table-widget-column-header:not(:active)[sorted] {
+  background: rgba(0,0,0,0.15);
+}
+
+.table-widget-column-header:not(:active)[sorted=ascending] {
+  background-image: radial-gradient(farthest-side at center top, hsla(200,100%,70%,.7), hsla(200,100%,70%,0.3));
+  background-size: 100% 1px;
+  background-repeat: no-repeat;
+}
+
+.table-widget-column-header:not(:active)[sorted=descending] {
+  background-image: radial-gradient(farthest-side at center bottom, hsla(200,100%,70%,.7), hsla(200,100%,70%,0.3));
+  background-size: 100% 1px;
+  background-repeat: no-repeat;
+  background-position: bottom;
+}
+
+/* Cells */
+
+.table-widget-cell {
+  width: 100%;
+  margin: -1px 0 !important;
+  padding: 3px 4px;
+  background-clip: padding-box;
+  min-width: 100px;
+  -moz-user-focus: normal;
+}
+
+.theme-dark .table-widget-cell {
+  border-top: 1px solid @smw_itemDarkTopBorder@;
+  border-bottom: 1px solid @smw_itemDarkBottomBorder@;
+  color: #f5f7fa; /* Light foreground text */
+}
+
+.theme-dark:not(.filtering) .table-widget-cell:nth-child(odd):not(.theme-selected),
+.theme-dark .table-widget-cell:not(.theme-selected)[odd] {
+  background: rgba(255,255,255,0.05);
+}
+
+.theme-dark .table-widget-cell:last-of-type {
+  box-shadow: inset 0 -1px 0 @smw_itemDarkTopBorder@;
+}
+
+.theme-light .table-widget-cell {
+  border-top: 1px solid @smw_itemLightTopBorder@;
+  border-bottom: 1px solid @smw_itemLightBottomBorder@;
+}
+
+.theme-light .table-widget-cell:not(.theme-selected) {
+  color: #18191a; /* Dark foreground text */
+}
+
+.theme-light:not(.filtering) .table-widget-cell:nth-child(odd):not(.theme-selected),
+.theme-light .table-widget-cell:not(.theme-selected)[odd] {
+  background: rgba(128,128,128,0.05);
+}
+
+.theme-light .table-widget-cell:last-of-type {
+  box-shadow: inset 0 -1px 0 @smw_itemLightTopBorder@;
+}
+
+.table-widget-cell.flash-out {
+  animation: flash-out 0.5s ease-in;
+}
+
+@keyframes flash-out {
+  to {
+    background: #a18650;
+  }
+}
+
+/* Empty text and initial text */
+
+.table-widget-empty-text {
+  display: none;
+  text-align: center;
+  font-size: large;
+  margin-top: -20px !important;
+}
+
+.theme-light .table-widget-empty-text {
+  background: #F7F7F7; /* Background-Sidebar */
+}
+
+.table-widget-body:empty + .table-widget-empty-text:not([value=""]),
+.table-widget-body[empty] + .table-widget-empty-text:not([value=""]) {
+  display: block;
+}
+
+/* Tree Widget */
+
+.tree-widget-container {
+  padding: 0;
+  margin: 0;
+  width: 100%;
+  height: 100%;
+  list-style: none;
+  overflow: hidden;
+  -moz-margin-end: 40px;
+}
+
+.tree-widget-container:-moz-focusring,
+.tree-widget-container *:-moz-focusring {
+  outline-style: none;
+}
+
+/* Tree Item */
+
+.tree-widget-container .tree-widget-item {
+  padding: 2px 0px 4px;
+  /* OSX has line-height 14px by default, which causes weird alignment issues
+   * because of 20px high icons. thus making line-height consistent with that of
+   * windows.
+   */
+  line-height: 17px !important;
+  display: inline-block;
+  width: calc(100% + 40px);
+}
+
+.tree-widget-container .tree-widget-children {
+  margin: 0;
+  padding: 0;
+  list-style: none;
+}
+
+.tree-widget-item[level="1"] {
+  font-weight: 800;
+}
+
+.tree-widget-item:before {
+  content: "";
+  width: 14px;
+  height: 14px;
+  float: left;
+  margin: 3px 2px -3px;
+  background-repeat: no-repeat;
+  background-image: url("chrome://browser/skin/devtools/controls.png");
+  background-size: 56px 28px;
+  cursor: pointer;
+  background-position: -28px -14px;
+}
+
+.tree-widget-item:-moz-locale-dir(rtl):before {
+  float: right;
+  transform: scaleX(-1);
+}
+
+.theme-light .tree-widget-item:before {
+  background-position: 0 -14px;
+}
+
+.tree-widget-item[empty]:before {
+  background: transparent;
+}
+
+.tree-widget-item[expanded]:before {
+  background-position: -42px -14px;
+}
+
+.theme-light .tree-widget-item[expanded]:before {
+  background-position: -14px -14px;
+}
+
+.tree-widget-item + ul {
+  max-height: 0;
+  overflow: hidden;
+}
+
+.tree-widget-item[expanded] + ul {
+  transition: max-height 0.3s ease-in;
+  max-height: 1000px;
+}
+
+@media (min-resolution: 2dppx) {
+  .tree-widget-item:before {
+    background-image: url("chrome://browser/skin/devtools/controls@2x.png");
+  }
+}
+
+/* Indentation of child items in the tree */
+
+/* For level > 6 */
+.tree-widget-item[level] + ul > li > .tree-widget-item {
+  -moz-padding-start: 98px;
+}
+
+/* First level */
+.tree-widget-item[level="1"] + ul > li > .tree-widget-item {
+  -moz-padding-start: 14px;
+}
+
+/* Second level */
+.tree-widget-item[level="2"] + ul > li > .tree-widget-item {
+  -moz-padding-start: 28px;
+}
+
+/* Third level */
+.tree-widget-item[level="3"] + ul > li > .tree-widget-item {
+  -moz-padding-start: 42px;
+}
+
+/* Fourth level */
+.tree-widget-item[level="4"] + ul > li > .tree-widget-item {
+  -moz-padding-start: 56px;
+}
+
+/* Fifth level */
+.tree-widget-item[level="5"] + ul > li > .tree-widget-item {
+  -moz-padding-start: 70px;
+}
+
+/* Sixth level */
+.tree-widget-item[level="6"] + ul > li > .tree-widget-item {
+  -moz-padding-start: 84px;
+}
+
+/* Custom icons for certain tree items */
+
+.tree-widget-item[type]:after {
+  content: "";
+  float: left;
+  width: 16px;
+  height: 17px;
+  -moz-margin-end: 4px;
+  background-repeat: no-repeat;
+  background-size: 20px auto;
+  filter: url('filters.svg#invert');
+  background-position: 0 0;
+  background-size: auto 20px;
+}
+
+.tree-widget-item:-moz-locale-dir(rtl):after {
+  float: right;
+}
+
+.theme-dark .tree-widget-item[type]:after {
+  filter: url('filters.svg#invert-white');
+}
+
+.tree-widget-item[type="css"]:after {
+  background-image: url(chrome://browser/skin/devtools/filetype-css.svg);
+}
+
+.tree-widget-item[type="js"]:after {
+  background-image: url(chrome://browser/skin/devtools/filetype-js.svg);
+}
+
+.tree-widget-item[type="html"]:after {
+  background-image: url(chrome://browser/skin/devtools/filetype-html.svg);
+}
+
+.tree-widget-item[type="txt"]:after {
+  background-image: url(chrome://browser/skin/devtools/filetype-txt.svg);
+}
+
+.tree-widget-item[type="dir"]:after {
+  background-image: url(chrome://browser/skin/devtools/filetype-dir-close.svg);
+  background-position: 0px -1px;
+  background-size: auto 18px;
+  width: 20px;
+}
+
+.tree-widget-item[type="dir"][expanded]:not([empty]):after {
+  background-image: url(chrome://browser/skin/devtools/filetype-dir-open.svg);
+}
+
+.tree-widget-item[type="image"]:after {
+  background-image: url(chrome://browser/skin/devtools/filetype-img.svg);
+}
+
+.tree-widget-item[type="manifest"]:after {
+  background-image: url(chrome://browser/skin/devtools/filetype-manifest.svg);
+}
+
+.tree-widget-item[type="url"]:after {
+  background-image: url(chrome://browser/skin/devtools/filetype-globe.svg);
+  background-size: auto 18px;
+  width: 18px;
+}
+
 %include ../../shared/devtools/app-manager/manifest-editor.inc.css
diff --git a/browser/themes/windows/jar.mn b/browser/themes/windows/jar.mn
--- a/browser/themes/windows/jar.mn
+++ b/browser/themes/windows/jar.mn
@@ -217,16 +217,25 @@ browser.jar:
         skin/classic/browser/tabview/tabview.css                    (tabview/tabview.css)
         skin/classic/browser/translation-16.png                     (../shared/translation/translation-16.png)
 *       skin/classic/browser/devtools/common.css                    (../shared/devtools/common.css)
 *       skin/classic/browser/devtools/dark-theme.css                (../shared/devtools/dark-theme.css)
 *       skin/classic/browser/devtools/light-theme.css               (../shared/devtools/light-theme.css)
         skin/classic/browser/devtools/filters.svg                   (../shared/devtools/filters.svg)
         skin/classic/browser/devtools/controls.png                  (../shared/devtools/images/controls.png)
         skin/classic/browser/devtools/controls@2x.png               (../shared/devtools/images/controls@2x.png)
+        skin/classic/browser/devtools/filetype-css.svg              (../shared/devtools/images/filetypes/css.svg)
+        skin/classic/browser/devtools/filetype-dir-close.svg        (../shared/devtools/images/filetypes/dir-close.svg)
+        skin/classic/browser/devtools/filetype-dir-open.svg         (../shared/devtools/images/filetypes/dir-open.svg)
+        skin/classic/browser/devtools/filetype-globe.svg            (../shared/devtools/images/filetypes/globe.svg)
+        skin/classic/browser/devtools/filetype-html.svg             (../shared/devtools/images/filetypes/html.svg)
+        skin/classic/browser/devtools/filetype-img.svg              (../shared/devtools/images/filetypes/img.svg)
+        skin/classic/browser/devtools/filetype-js.svg               (../shared/devtools/images/filetypes/js.svg)
+        skin/classic/browser/devtools/filetype-manifest.svg         (../shared/devtools/images/filetypes/manifest.svg)
+        skin/classic/browser/devtools/filetype-txt.svg              (../shared/devtools/images/filetypes/txt.svg)
 *       skin/classic/browser/devtools/widgets.css                   (devtools/widgets.css)
         skin/classic/browser/devtools/commandline-icon.png          (devtools/commandline-icon.png)
         skin/classic/browser/devtools/alerticon-warning.png         (devtools/alerticon-warning.png)
 *       skin/classic/browser/devtools/ruleview.css                  (../shared/devtools/ruleview.css)
         skin/classic/browser/devtools/commandline.css               (devtools/commandline.css)
         skin/classic/browser/devtools/command-paintflashing.png     (../shared/devtools/images/command-paintflashing.png)
         skin/classic/browser/devtools/command-paintflashing@2x.png  (../shared/devtools/images/command-paintflashing@2x.png)
         skin/classic/browser/devtools/command-responsivemode.png    (../shared/devtools/images/command-responsivemode.png)
@@ -580,16 +589,25 @@ browser.jar:
         skin/classic/aero/browser/tabview/tabview.css                (tabview/tabview.css)
         skin/classic/aero/browser/translation-16.png                 (../shared/translation/translation-16.png)
 *       skin/classic/aero/browser/devtools/common.css                (../shared/devtools/common.css)
 *       skin/classic/aero/browser/devtools/dark-theme.css            (../shared/devtools/dark-theme.css)
 *       skin/classic/aero/browser/devtools/light-theme.css           (../shared/devtools/light-theme.css)
         skin/classic/aero/browser/devtools/filters.svg               (../shared/devtools/filters.svg)
         skin/classic/aero/browser/devtools/controls.png              (../shared/devtools/images/controls.png)
         skin/classic/aero/browser/devtools/controls@2x.png           (../shared/devtools/images/controls@2x.png)
+        skin/classic/aero/browser/devtools/filetype-css.svg          (../shared/devtools/images/filetypes/css.svg)
+        skin/classic/aero/browser/devtools/filetype-dir-close.svg    (../shared/devtools/images/filetypes/dir-close.svg)
+        skin/classic/aero/browser/devtools/filetype-dir-open.svg     (../shared/devtools/images/filetypes/dir-open.svg)
+        skin/classic/aero/browser/devtools/filetype-globe.svg        (../shared/devtools/images/filetypes/globe.svg)
+        skin/classic/aero/browser/devtools/filetype-html.svg         (../shared/devtools/images/filetypes/html.svg)
+        skin/classic/aero/browser/devtools/filetype-img.svg          (../shared/devtools/images/filetypes/img.svg)
+        skin/classic/aero/browser/devtools/filetype-js.svg           (../shared/devtools/images/filetypes/js.svg)
+        skin/classic/aero/browser/devtools/filetype-manifest.svg     (../shared/devtools/images/filetypes/manifest.svg)
+        skin/classic/aero/browser/devtools/filetype-txt.svg          (../shared/devtools/images/filetypes/txt.svg)
 *       skin/classic/aero/browser/devtools/widgets.css               (devtools/widgets.css)
         skin/classic/aero/browser/devtools/commandline-icon.png      (devtools/commandline-icon.png)
         skin/classic/aero/browser/devtools/command-paintflashing.png    (../shared/devtools/images/command-paintflashing.png)
         skin/classic/aero/browser/devtools/command-paintflashing@2x.png (../shared/devtools/images/command-paintflashing@2x.png)
         skin/classic/aero/browser/devtools/command-responsivemode.png    (../shared/devtools/images/command-responsivemode.png)
         skin/classic/aero/browser/devtools/command-responsivemode@2x.png (../shared/devtools/images/command-responsivemode@2x.png)
         skin/classic/aero/browser/devtools/command-scratchpad.png    (../shared/devtools/images/command-scratchpad.png)
         skin/classic/aero/browser/devtools/command-scratchpad@2x.png (../shared/devtools/images/command-scratchpad@2x.png)
