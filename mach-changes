# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  67ba5406ce3954311b41ea6bb5564118a5699244

diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -1,16 +1,17 @@
 /* -*- indent-tabs-mode: nil; js-indent-level: 2 -*-
  * This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 var { XPCOMUtils } = ChromeUtils.import(
   "resource://gre/modules/XPCOMUtils.jsm"
 );
+
 var { Services } = ChromeUtils.import("resource://gre/modules/Services.jsm");
 var { AppConstants } = ChromeUtils.import(
   "resource://gre/modules/AppConstants.jsm"
 );
 ChromeUtils.import("resource://gre/modules/NotificationDB.jsm");
 
 // lazy module getters
 
diff --git a/python/mozbuild/mozbuild/faster_daemon.py b/python/mozbuild/mozbuild/faster_daemon.py
--- a/python/mozbuild/mozbuild/faster_daemon.py
+++ b/python/mozbuild/mozbuild/faster_daemon.py
@@ -58,18 +58,20 @@ class FasterBuildException(Exception):
 class FasterBuildChange(object):
     def __init__(self):
         self.unrecognized = set()
         self.input_to_outputs = {}
         self.output_to_inputs = {}
 
 
 class Daemon(object):
-    def __init__(self, config_environment):
-        self.config_environment = config_environment
+    def __init__(self, watcher):
+        self.config_environment = watcher.config_environment
+        self.do_build = watcher.do_build
+        self.is_building = False
         self._client = None
 
     @property
     def defines(self):
         defines = dict(self.config_environment.acdefines)
         # These additions work around warts in the build system: see
         # http://searchfox.org/mozilla-central/rev/ad093e98f42338effe2e2513e26c3a311dd96422/config/faster/rules.mk#92-93
         defines.update({
@@ -242,16 +244,24 @@ class Daemon(object):
         finally:
             self.client.close()
 
     def output_changes(self, verbose=True):
         '''
         Return an iterator of `FasterBuildChange` instances as outputs
         from the faster build system are updated.
         '''
+        if (self.is_building):
+            print("Brian hit this case")
+            return
+
+        self.is_building = True
+        self.do_build()
+        self.is_building = False
+
         for change in self.input_changes(verbose=verbose):
             now = datetime.datetime.utcnow()
 
             for unrecognized in sorted(change.unrecognized):
                 print_line('watch', '! {}'.format(unrecognized), now=now)
 
             all_outputs = set()
             for input in sorted(change.input_to_outputs):
diff --git a/python/mozbuild/mozbuild/mach_commands.py b/python/mozbuild/mozbuild/mach_commands.py
--- a/python/mozbuild/mozbuild/mach_commands.py
+++ b/python/mozbuild/mozbuild/mach_commands.py
@@ -82,24 +82,36 @@ class Watch(MachCommandBase):
         self._activate_virtualenv()
         try:
             self.virtualenv_manager.install_pip_package('pywatchman==1.3.0')
         except Exception:
             print('Could not install pywatchman from pip. See '
                   'https://developer.mozilla.org/docs/Mozilla/Developer_guide/Build_Instructions/Incremental_builds_with_filesystem_watching')  # noqa
             return 1
 
+        print("Doing an initial build")
+        # Do an initial build
+        self.do_build()
+
         from mozbuild.faster_daemon import Daemon
-        daemon = Daemon(self.config_environment)
+        daemon = Daemon(self)
 
         try:
             return daemon.watch()
         except KeyboardInterrupt:
             # Suppress ugly stack trace when user hits Ctrl-C.
             sys.exit(3)
+    def do_build(self):
+        self.run_process(
+            [mozpath.join(self.topsrcdir, 'mach'), 'build',
+                'faster'],
+            pass_thru=True,
+            ensure_exit_code=True,
+            cwd=mozpath.join(self.topsrcdir))
+
 
 
 @CommandProvider
 class CargoProvider(MachCommandBase):
     """Invoke cargo in useful ways."""
 
     @Command('cargo', category='build',
              description='Invoke cargo in useful ways.')
