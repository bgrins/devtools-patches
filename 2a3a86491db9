
# HG changeset patch
# User Nicolas Chevobbe <nchevobbe@mozilla.com>
# Date 1507185634 -7200
# Node ID 2a3a86491db95b82266d3581b7a82bde9d8ff0cd
# Parent  d54bb49a08e9d1bdab303bc901062092159927c7
Bug 1405070 - Bypass React to clear console on destroy; r=bgrins

Previously we were using the regular clearOutput function, which
was doing too much when we only want to destroy the console. It was:
- dispatching an action so React did the update
- focusing the JSTerm.

By simply clearing the outputNode things are much snappier. Also, we tried
to not clear the console at all, but while destroying there was too much
repaint events happening that it would take the same time as doing it the
old way.

MozReview-Commit-ID: FrFqToG3nRg

diff --git a/devtools/client/webconsole/jsterm.js b/devtools/client/webconsole/jsterm.js
--- a/devtools/client/webconsole/jsterm.js
+++ b/devtools/client/webconsole/jsterm.js
@@ -990,16 +990,17 @@
     this.webConsoleClient.clearNetworkRequests();
     if (clearStorage) {
       this.webConsoleClient.clearMessagesCache();
     }
     this._sidebarDestroy();
     this.focus();
     this.emit("messages-cleared");
   },
+
   /**
    * Remove all of the private messages from the Web Console output.
    *
    * This method emits the "private-messages-cleared" notification.
    */
   clearPrivateMessages: function () {
     let nodes = this.hud.outputNode.querySelectorAll(".message[private]");
     for (let node of nodes) {
@@ -1768,17 +1769,23 @@
 
   /**
    * Destroy the JSTerm object. Call this method to avoid memory leaks.
    */
   destroy: function () {
     this._sidebarDestroy();
 
     this.clearCompletion();
-    this.clearOutput();
+
+    if (this.hud.NEW_CONSOLE_OUTPUT_ENABLED) {
+      this.webConsoleClient.clearNetworkRequests();
+      this.hud.outputNode.innerHTML = "";
+    } else {
+      this.clearOutput();
+    }
 
     this.autocompletePopup.destroy();
     this.autocompletePopup = null;
 
     if (this._onPaste) {
       this.inputNode.removeEventListener("paste", this._onPaste);
       this.inputNode.removeEventListener("drop", this._onPaste);
       this._onPaste = null;

