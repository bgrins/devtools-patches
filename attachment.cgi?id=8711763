# HG changeset patch
# User Alexandre Poirot <poirot.alex@gmail.com>

Bug 1242567 - Cleanup OptionsPanel.open by using Task.async. r=bgrins

diff --git a/devtools/client/framework/toolbox-options.js b/devtools/client/framework/toolbox-options.js
index 708e0bd..f406aaf 100644
--- a/devtools/client/framework/toolbox-options.js
+++ b/devtools/client/framework/toolbox-options.js
@@ -3,16 +3,17 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const {Cu, Cc, Ci} = require("chrome");
 const Services = require("Services");
 const promise = require("promise");
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+Cu.import("resource://gre/modules/Task.jsm");
 XPCOMUtils.defineLazyModuleGetter(this, "gDevTools", "resource://devtools/client/framework/gDevTools.jsm");
 
 exports.OptionsPanel = OptionsPanel;
 
 XPCOMUtils.defineLazyGetter(this, "l10n", function() {
   let bundle = Services.strings.createBundle("chrome://devtools/locale/toolbox.properties");
   let l10n = function(aName, ...aArgs) {
     try {
@@ -89,42 +90,30 @@ function OptionsPanel(iframeWindow, toolbox) {
 }
 
 OptionsPanel.prototype = {
 
   get target() {
     return this.toolbox.target;
   },
 
-  open: function() {
-    let targetPromise;
-
+  open: Task.async(function*() {
     // For local debugging we need to make the target remote.
     if (!this.target.isRemote) {
-      targetPromise = this.target.makeRemote();
-    } else {
-      targetPromise = promise.resolve(this.target);
+      yield this.target.makeRemote();
     }
 
-    return targetPromise.then(() => {
-      this.setupToolsList();
-      this.setupToolbarButtonsList();
-      this.setupThemeList();
-      this.updateDefaultTheme();
-    }).then(() => {
-      return this.populatePreferences();
-    }).then(() => {
-      this.isReady = true;
-      this.emit("ready");
-      return this;
-    }).then(null, function onError(aReason) {
-      Cu.reportError("OptionsPanel open failed. " +
-                     aReason.error + ": " + aReason.message);
-    });
-  },
+    this.setupToolsList();
+    this.setupToolbarButtonsList();
+    this.setupThemeList();
+    this.updateDefaultTheme();
+    yield this.populatePreferences();
+    this.isReady = true;
+    this.emit("ready");
+  }),
 
   _addListeners: function() {
     gDevTools.on("pref-changed", this._prefChanged);
     gDevTools.on("theme-registered", this._themeRegistered);
     gDevTools.on("theme-unregistered", this._themeUnregistered);
   },
 
   _removeListeners: function() {

