# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1559852147 25200
#      Thu Jun 06 13:15:47 2019 -0700
# Node ID 1dcd859a48f268553f5a12b572685e07cdb0c903
# Parent  d37f9c2ed01b649896929cf4f113c069adda6d85
Bug 1492582 - Support the <body> element being the default focus node in browser.xhtml

Previously we were returning the documentElement in order to match the old XUL behavior.
Now that we have a document.body we can just follow the normal HTML convention.

Differential Revision: https://phabricator.services.mozilla.com/D34021

diff --git a/browser/base/content/tabbrowser.js b/browser/base/content/tabbrowser.js
--- a/browser/base/content/tabbrowser.js
+++ b/browser/base/content/tabbrowser.js
@@ -1199,17 +1199,17 @@ window._gBrowser = {
         this.selectedTab._findBarFocused) {
       gFindBar._findField.focus();
       return;
     }
 
     // Don't focus the content area if something has been focused after the
     // tab switch was initiated.
     if (gMultiProcessBrowser &&
-        document.activeElement != document.documentElement)
+        document.activeElement != document.body)
       return;
 
     // We're now committed to focusing the content area.
     let fm = Services.focus;
     let focusFlags = fm.FLAG_NOSCROLL;
 
     if (!gMultiProcessBrowser) {
       let newFocusedElement = fm.getFocusedElementForWindow(window.content, true, {});
diff --git a/browser/base/content/test/general/browser_tabfocus.js b/browser/base/content/test/general/browser_tabfocus.js
--- a/browser/base/content/test/general/browser_tabfocus.js
+++ b/browser/base/content/test/general/browser_tabfocus.js
@@ -434,32 +434,33 @@ function compareFocusResults() {
   // Use executeSoon as this will be called during a focus/blur event handler
   executeSoon(() => {
     let matchWindow = window;
     if (gMultiProcessBrowser) {
       is(_expectedWindow, "main-window", "main-window is always expected");
     } else if (_expectedWindow != "main-window") {
       matchWindow = (_expectedWindow == "window1" ? browser1.contentWindow : browser2.contentWindow);
     }
+    if (_expectedWindow == "main-window") {
+      // The browser window's body doesn't have an id set usually - set one now
+      // so it can be used for id comparisons below.
+      matchWindow.document.body.id = "main-window-body";
+    }
 
     var focusedElement = fm.focusedElement;
     is(getId(focusedElement), _expectedElement, currentTestName + " focusedElement");
     is(fm.focusedWindow, matchWindow, currentTestName + " focusedWindow");
     var focusedWindow = {};
     is(getId(fm.getFocusedElementForWindow(matchWindow, false, focusedWindow)),
        _expectedElement, currentTestName + " getFocusedElementForWindow");
     is(focusedWindow.value, matchWindow, currentTestName + " getFocusedElementForWindow frame");
     is(matchWindow.document.hasFocus(), true, currentTestName + " hasFocus");
     var expectedActive = _expectedElement;
     if (!expectedActive) {
-      // Documents that have a XUL document element currently have a different
-      // active element behavior than regular HTML documents. This test will
-      // need to be updated when bug 1492582 is fixed.
-      expectedActive = matchWindow.document.documentElement instanceof XULElement ?
-                       "main-window" : getId(matchWindow.document.body);
+      expectedActive = getId(matchWindow.document.body);
     }
     is(getId(matchWindow.document.activeElement), expectedActive, currentTestName + " activeElement");
 
     currentPromiseResolver();
     currentPromiseResolver = null;
   });
 }
 
diff --git a/dom/base/Document.cpp b/dom/base/Document.cpp
--- a/dom/base/Document.cpp
+++ b/dom/base/Document.cpp
@@ -4991,19 +4991,19 @@ Element* Document::GetActiveElement() {
   }
 
   // No focused element anywhere in this document.  Try to get the BODY.
   if (IsHTMLOrXHTML()) {
     Element* bodyElement = AsHTMLDocument()->GetBody();
     if (bodyElement) {
       return bodyElement;
     }
-    // Special case to handle the transition to browser.xhtml where there is
-    // currently not a body element, but we need to match the XUL behavior.
-    // This should be removed when bug 1492582 is resolved.
+    // Special case to handle the transition to XHTML from XUL documents
+    // where there currently isn't a body element, but we need to match the
+    // XUL behavior. This should be removed when bug 1540278 is resolved.
     if (nsContentUtils::IsChromeDoc(this)) {
       Element* docElement = GetDocumentElement();
       if (docElement && docElement->IsXULElement()) {
         return docElement;
       }
     }
     // Because of IE compatibility, return null when html document doesn't have
     // a body.
