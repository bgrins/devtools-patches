diff --git a/browser/moz.build b/browser/moz.build
index 76c61a7ef4432..8c903a811bb12 100644
--- a/browser/moz.build
+++ b/browser/moz.build
@@ -36,6 +36,7 @@ if CONFIG['MAKENSISU']:
 
 TEST_DIRS += [
     'tools/mozscreenshots',
+    'tools/devbrowser',
 ]
 
 DIST_SUBDIR = 'browser'
diff --git a/browser/tools/devbrowser/content/components/assets/back.svg b/browser/tools/devbrowser/content/components/assets/back.svg
new file mode 100644
index 0000000000000..b0d920d993a2c
--- /dev/null
+++ b/browser/tools/devbrowser/content/components/assets/back.svg
@@ -0,0 +1,6 @@
+<!-- This Source Code Form is subject to the terms of the Mozilla Public
+   - License, v. 2.0. If a copy of the MPL was not distributed with this
+   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
+<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">
+  <path fill="context-fill" fill-opacity="context-fill-opacity" d="M15,7H3.414L7.707,2.707A1,1,0,0,0,6.293,1.293l-6,6a1,1,0,0,0,0,1.414l6,6a1,1,0,0,0,1.414-1.414L3.414,9H15a1,1,0,0,0,0-2Z"/>
+</svg>
diff --git a/browser/tools/devbrowser/content/components/assets/forward.svg b/browser/tools/devbrowser/content/components/assets/forward.svg
new file mode 100644
index 0000000000000..334b42503a051
--- /dev/null
+++ b/browser/tools/devbrowser/content/components/assets/forward.svg
@@ -0,0 +1,6 @@
+<!-- This Source Code Form is subject to the terms of the Mozilla Public
+   - License, v. 2.0. If a copy of the MPL was not distributed with this
+   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
+<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">
+  <path fill="context-fill" fill-opacity="context-fill-opacity" d="M15.707,7.293l-6-6A1,1,0,0,0,8.293,2.707L12.586,7H1A1,1,0,0,0,1,9H12.586L8.293,13.293a1,1,0,1,0,1.414,1.414l6-6A1,1,0,0,0,15.707,7.293Z"/>
+</svg>
diff --git a/browser/tools/devbrowser/content/components/assets/menu.svg b/browser/tools/devbrowser/content/components/assets/menu.svg
new file mode 100644
index 0000000000000..86f38be5e4daa
--- /dev/null
+++ b/browser/tools/devbrowser/content/components/assets/menu.svg
@@ -0,0 +1,6 @@
+<!-- This Source Code Form is subject to the terms of the Mozilla Public
+   - License, v. 2.0. If a copy of the MPL was not distributed with this
+   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
+<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">
+  <path fill="context-fill" fill-opacity="context-fill-opacity" d="M3,4H13a1,1,0,0,0,0-2H3A1,1,0,0,0,3,4ZM13,7H3A1,1,0,0,0,3,9H13a1,1,0,0,0,0-2Zm0,5H3a1,1,0,0,0,0,2H13a1,1,0,0,0,0-2Z"/>
+</svg>
diff --git a/browser/tools/devbrowser/content/components/assets/reload.svg b/browser/tools/devbrowser/content/components/assets/reload.svg
new file mode 100644
index 0000000000000..1726491afeb83
--- /dev/null
+++ b/browser/tools/devbrowser/content/components/assets/reload.svg
@@ -0,0 +1,6 @@
+<!-- This Source Code Form is subject to the terms of the Mozilla Public
+   - License, v. 2.0. If a copy of the MPL was not distributed with this
+   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
+<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">
+  <path fill="context-fill" fill-opacity="context-fill-opacity" d="M15,1a1,1,0,0,0-1,1V4.418A6.995,6.995,0,1,0,8,15a6.954,6.954,0,0,0,4.95-2.05,1,1,0,0,0-1.414-1.414A5.019,5.019,0,1,1,12.549,6H10a1,1,0,0,0,0,2h5a1,1,0,0,0,1-1V2A1,1,0,0,0,15,1Z"/>
+</svg>
diff --git a/browser/tools/devbrowser/content/components/assets/sidebars.svg b/browser/tools/devbrowser/content/components/assets/sidebars.svg
new file mode 100644
index 0000000000000..bb35fbe06f959
--- /dev/null
+++ b/browser/tools/devbrowser/content/components/assets/sidebars.svg
@@ -0,0 +1,7 @@
+<!-- This Source Code Form is subject to the terms of the Mozilla Public
+   - License, v. 2.0. If a copy of the MPL was not distributed with this
+   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
+<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="context-fill" fill-opacity="context-fill-opacity">
+  <path d="M3 1h10c1.655.004 2.996 1.345 3 3v8c-.005 1.655-1.345 2.995-3 3H3c-1.656-.003-2.997-1.344-3-3V4c.007-1.654 1.346-2.993 3-3zm11 11V4c0-.552-.448-1-1-1H8v10h5c.552 0 1-.448 1-1zM2 12c0 .552.448 1 1 1h4V3H3c-.552 0-1 .448-1 1v8z"/>
+  <path d="M3.5 5h2c.276 0 .5-.224.5-.5S5.776 4 5.5 4h-2c-.276 0-.5.224-.5.5s.224.5.5.5zm0 2h2c.276 0 .5-.224.5-.5S5.776 6 5.5 6h-2c-.276 0-.5.224-.5.5s.224.5.5.5zm1 2h1c.276 0 .5-.224.5-.5S5.776 8 5.5 8h-1c-.276 0-.5.224-.5.5s.224.5.5.5z"/>
+</svg>
diff --git a/browser/tools/devbrowser/content/components/assets/stop.svg b/browser/tools/devbrowser/content/components/assets/stop.svg
new file mode 100644
index 0000000000000..f4bf4188c4905
--- /dev/null
+++ b/browser/tools/devbrowser/content/components/assets/stop.svg
@@ -0,0 +1,6 @@
+<!-- This Source Code Form is subject to the terms of the Mozilla Public
+   - License, v. 2.0. If a copy of the MPL was not distributed with this
+   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
+<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">
+  <path fill="context-fill" fill-opacity="context-fill-opacity" d="M9.414 8l5.293-5.293a1 1 0 0 0-1.414-1.414L8 6.586 2.707 1.293a1 1 0 0 0-1.414 1.414L6.586 8l-5.293 5.293a1 1 0 1 0 1.414 1.414L8 9.414l5.293 5.293a1 1 0 0 0 1.414-1.414z"/>
+</svg>
diff --git a/browser/tools/devbrowser/content/components/browserControls.css b/browser/tools/devbrowser/content/components/browserControls.css
new file mode 100644
index 0000000000000..ed4090e0aeac5
--- /dev/null
+++ b/browser/tools/devbrowser/content/components/browserControls.css
@@ -0,0 +1,66 @@
+html,
+body {
+  background: #d3d3d3;
+  color: black;
+}
+
+body {
+  display: flex;
+  flex-direction: column;
+}
+
+input {
+  color: black;
+}
+
+#controls {
+  display: flex;
+  flex-direction: row;
+  padding: 2px;
+  justify-content: space-evenly;
+}
+
+#controls > button {
+  background: none;
+  border: none;
+}
+
+#controls > button:hover {
+  background: #e1e1e1;
+  border-top: 1px solid #d0d0d0;
+}
+
+#controls > #menu {
+  margin-left: auto;
+}
+
+#controls > #addressbar {
+  width: 100%;
+  box-sizing: border-box;
+  color: black;
+  background-color: lightgrey;
+}
+
+#controls {
+  display: flex;
+  flex-direction: row;
+  padding: 2px;
+  justify-content: space-evenly;
+}
+
+#controls > button {
+  background: none;
+  border: none;
+}
+
+#controls > button:hover {
+  background: #e1e1e1;
+  border-top: 1px solid #d0d0d0;
+}
+
+#controls > #addressbar {
+  width: 100%;
+  box-sizing: border-box;
+  color: black;
+  background-color: lightgrey;
+}
diff --git a/browser/tools/devbrowser/content/components/browserControls.js b/browser/tools/devbrowser/content/components/browserControls.js
new file mode 100644
index 0000000000000..4521a9a9b95a7
--- /dev/null
+++ b/browser/tools/devbrowser/content/components/browserControls.js
@@ -0,0 +1,90 @@
+"use strict";
+
+// FIXME begin remove chrome dependency
+if (!document.createXULElement) {
+  throw Error("this page must be loaded via the chrome:// protocol");
+}
+
+const { Services } = ChromeUtils.import("resource://gre/modules/Services.jsm");
+const messageManager = Services.cpmm;
+// FIXME end remove chrome dependency
+
+class BrowserControls {
+  constructor() {
+    this.controls = document.getElementById("controls");
+    this.back = document.getElementById("back");
+    this.forward = document.getElementById("forward");
+    this.reload = document.getElementById("reload");
+    this.reload_image = document.getElementById("reload-image");
+    this.addressbar = document.getElementById("addressbar");
+    this.sidebar = document.getElementById("sidebar");
+
+    this.addListeners();
+  }
+
+  addListeners() {
+    this.controls.addEventListener("click", event => {
+      switch (event.target.parentNode.id) {
+        case "back":
+          messageManager.sendAsyncMessage(`browser:goBack`);
+          break;
+        case "forward":
+          messageManager.sendAsyncMessage(`browser:goForward`);
+          break;
+        case "reload":
+          messageManager.sendAsyncMessage(`browser:reload`);
+          break;
+        case "sidebar":
+          messageManager.sendAsyncMessage(`browser:sidebar`);
+          break;
+      }
+    });
+
+    this.addressbar.onkeypress = event => {
+      const returnKey = 13;
+
+      if (event.keyCode == returnKey) {
+        const rawAddress = event.target.value;
+        let newUrl = rawAddress;
+        try {
+          newUrl = new URL(rawAddress);
+        } catch (ex) {
+          try {
+            newUrl = new URL(`https://${rawAddress}`);
+          } finally {
+            messageManager.sendAsyncMessage(`browser:loadURI`, {
+              url: newUrl.toString(),
+            });
+          }
+        }
+        messageManager.sendAsyncMessage(`browser:loadURI`, {
+          url: newUrl.toString(),
+        });
+      }
+    };
+
+    messageManager.addMessageListener("MainWindow:addressbar.select", () => {
+      document.getElementById("addressbar").select();
+    });
+    messageManager.addMessageListener("MainWindow:loading.started", () => {
+      document.getElementById("reload-image").src = "assets/stop.svg";
+    });
+    messageManager.addMessageListener("MainWindow:loading.stopped", () => {
+      document.getElementById("reload-image").src = "assets/reload.svg";
+    });
+    messageManager.addMessageListener("MainWindow:location.change", event => {
+      document.getElementById("addressbar").value = event.data.url;
+    });
+  }
+
+  static restart() {
+    window.location.reload();
+  }
+}
+
+try {
+  new BrowserControls();
+} catch (e) {
+  console.error(`Uncaught Browser Error: ${e}`);
+  throw e;
+}
diff --git a/browser/tools/devbrowser/content/components/browserControls.xhtml b/browser/tools/devbrowser/content/components/browserControls.xhtml
new file mode 100644
index 0000000000000..896c48d51e54e
--- /dev/null
+++ b/browser/tools/devbrowser/content/components/browserControls.xhtml
@@ -0,0 +1,20 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
+    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml"
+      xml:lang="en" lang="en">
+    <head>
+        <title>BrowserControls</title>
+        <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
+        <link rel="stylesheet" type="text/css" href="browserControls.css" media="screen" />
+    </head>
+    <body>
+        <div id="controls">
+            <button id="back"><img src="assets/back.svg" alt="Back button"/></button>
+            <button id="forward"><img src="assets/forward.svg" alt="Forward button"/></button>
+            <button id="reload"><img id="reload-image" src="assets/reload.svg" alt="Reload button"/></button>
+            <input id="addressbar"></input>
+            <button id="sidebar"><img src="assets/sidebars.svg" alt="Sidebar button"/></button>
+        </div>
+        <script type="text/javascript" src="browserControls.js"></script>
+    </body>
+</html>
\ No newline at end of file
diff --git a/browser/tools/devbrowser/content/components/home.css b/browser/tools/devbrowser/content/components/home.css
new file mode 100644
index 0000000000000..af386a302d18e
--- /dev/null
+++ b/browser/tools/devbrowser/content/components/home.css
@@ -0,0 +1,19 @@
+body {
+    color: white;
+    background: rgb(19, 8, 41);
+}
+
+input {
+    height: 30px;
+    width: 400px;
+    margin: 20px;
+    color: black;
+    font-size: 150%;
+    font-weight: 1000;
+}
+
+button {
+    font-size: 120%;
+    height: 50px;
+    width: 200px;
+}
diff --git a/browser/tools/devbrowser/content/components/home.js b/browser/tools/devbrowser/content/components/home.js
new file mode 100644
index 0000000000000..8e9464977de2f
--- /dev/null
+++ b/browser/tools/devbrowser/content/components/home.js
@@ -0,0 +1,43 @@
+"use strict";
+
+// FIXME begin remove chrome dependency
+if (!document.createXULElement) {
+  throw Error("this page must be loaded via the chrome:// protocol");
+}
+
+const { Services } = ChromeUtils.import("resource://gre/modules/Services.jsm");
+const messageManager = Services.cpmm;
+// FIXME end remove chrome dependency
+
+class Home {
+    constructor() {
+        this.search = document.getElementById("search");
+        this.submit = document.getElementById("submit");
+
+        this.addListeners();
+    }
+
+    addListeners() {
+        this.submit.addEventListener("click", event => {
+            const searchText = document.getElementById("search").value;
+            messageManager.sendAsyncMessage("browser:search", {searchText: searchText});
+        });
+
+        search.addEventListener("keydown", event => {
+            const returnKey = 13;
+
+            if (event.keyCode == returnKey) {
+                const searchText = document.getElementById("search").value;
+                messageManager.sendAsyncMessage("browser:search", {searchText: searchText});
+            }
+        });
+    }
+}
+
+try {
+    const result = new Home();
+    console.log("Home startup result:", result);
+} catch (e) {
+    console.log("Home fatal error:", e);
+    throw e;
+}
\ No newline at end of file
diff --git a/browser/tools/devbrowser/content/components/home.xhtml b/browser/tools/devbrowser/content/components/home.xhtml
new file mode 100644
index 0000000000000..0a0b128ea63d1
--- /dev/null
+++ b/browser/tools/devbrowser/content/components/home.xhtml
@@ -0,0 +1,19 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
+    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml"
+      xml:lang="en" lang="en">
+    <head>
+        <title>>DevBrowser Home</title>
+        <link rel="stylesheet" type="text/css" href="home.css" media="screen" />
+    </head>
+    <body>
+        <center>
+        <img id="logo" src="about:logo"></img>
+        <br/>
+        <input id="search" autofocus="true"></input>
+        <br/>
+        <button id="submit">Searchfox</button>
+        </center>
+        <script type="text/javascript" src="home.js"></script>
+    </body>
+</html>
\ No newline at end of file
diff --git a/browser/tools/devbrowser/content/components/sideBar.css b/browser/tools/devbrowser/content/components/sideBar.css
new file mode 100644
index 0000000000000..4d9b5c9de85d6
--- /dev/null
+++ b/browser/tools/devbrowser/content/components/sideBar.css
@@ -0,0 +1,10 @@
+body {
+    color: black;
+    background-color: lightgrey;
+}
+
+#side_bar {
+    padding: 2px;
+    color: black;
+    background-color: lightgrey;
+}
diff --git a/browser/tools/devbrowser/content/components/sideBar.js b/browser/tools/devbrowser/content/components/sideBar.js
new file mode 100644
index 0000000000000..a4d2cc64d6f8d
--- /dev/null
+++ b/browser/tools/devbrowser/content/components/sideBar.js
@@ -0,0 +1,68 @@
+// FIXME begin remove chrome dependency
+if (!document.createXULElement) {
+  throw Error("this page must be loaded via the chrome:// protocol");
+}
+
+const { Services } = ChromeUtils.import("resource://gre/modules/Services.jsm");
+const messageManager = Services.cpmm;
+// FIXME end remove chrome dependency
+
+class SideBar {
+  constructor() {
+    this.statusBar = document.getElementById("status_bar");
+    this.search = document.getElementById("search");
+    this.find = document.getElementById("find");
+    this.location = document.getElementById("location");
+
+    this.addListeners();
+  }
+
+  addListeners() {
+    this.statusBar.addEventListener("click", event => {
+      switch (event.target.parentNode.id) {
+        case "search":
+          messageManager.sendAsyncMessage(`statusBar:search`, {
+            search: event.target.parentNode.id,
+          });
+          break;
+        case "find":
+          messageManager.sendAsyncMessage(`statusBar:find`, {
+            search: event.target.parentNode.id,
+          });
+          break;
+      }
+    });
+
+    this.search.onkeypress = event => {
+      const returnKey = 13;
+
+      if (event.keyCode == returnKey) {
+        messageManager.sendAsyncMessage(`statusBar:search`, {
+          search: event.target.value,
+        });
+      }
+    };
+
+    messageManager.addMessageListener("mainWindow:location", event => {
+      if (!document.getElementById("location_value")) {
+        const location = ((document.createElement("text").value =
+          event.target.value).id = "location_value");
+        document.getElementById("location").appendChild(location);
+      } else {
+        const location = document.getElementById("location_value");
+        location.value = event.target.value;
+      }
+    });
+  }
+
+  static restart() {
+    window.location.reload();
+  }
+}
+
+try {
+  new SideBar();
+} catch (e) {
+  console.error(`Uncaught Browser Error: ${e}`);
+  throw e;
+}
diff --git a/browser/tools/devbrowser/content/components/sideBar.xhtml b/browser/tools/devbrowser/content/components/sideBar.xhtml
new file mode 100644
index 0000000000000..c6c281d4cc28e
--- /dev/null
+++ b/browser/tools/devbrowser/content/components/sideBar.xhtml
@@ -0,0 +1,14 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
+    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml"
+      xml:lang="en" lang="en">
+    <head>
+        <title>BrowserSideBar</title>
+        <link rel="stylesheet" type="text/css" href="sideBar.css" media="screen" />
+    </head>
+    <body>
+        <div id="side_bar">
+            Side Bar
+        </div>
+    </body>
+</html>
\ No newline at end of file
diff --git a/browser/tools/devbrowser/content/components/statusBar.css b/browser/tools/devbrowser/content/components/statusBar.css
new file mode 100644
index 0000000000000..64367b602865d
--- /dev/null
+++ b/browser/tools/devbrowser/content/components/statusBar.css
@@ -0,0 +1,13 @@
+body {
+    color: black;
+    background-color: lightgrey;
+}
+
+#status_bar {
+    color: black;
+    background-color: lightgrey;
+}
+
+input, button {
+    color: black;
+}
\ No newline at end of file
diff --git a/browser/tools/devbrowser/content/components/statusBar.js b/browser/tools/devbrowser/content/components/statusBar.js
new file mode 100644
index 0000000000000..7c5f79148d4ff
--- /dev/null
+++ b/browser/tools/devbrowser/content/components/statusBar.js
@@ -0,0 +1,56 @@
+// FIXME begin remove chrome dependency
+if (!document.createXULElement) {
+  throw Error("this page must be loaded via the chrome:// protocol");
+}
+
+const { Services } = ChromeUtils.import("resource://gre/modules/Services.jsm");
+const messageManager = Services.cpmm;
+// FIXME end remove chrome dependency
+
+class StatusBar {
+  constructor() {
+    this.statusBar = document.getElementById("status_bar");
+    this.search = document.getElementById("search");
+    this.find = document.getElementById("find");
+    this.location = document.getElementById("location");
+
+    this.addListeners();
+  }
+
+  addListeners() {
+    this.statusBar.addEventListener("click", event => {
+      switch (event.target.parentNode.id) {
+        case "search":
+          messageManager.sendAsyncMessage(`statusBar:search`, {
+            search: event.target.parentNode.id,
+          });
+          break;
+        case "find":
+          messageManager.sendAsyncMessage(`statusBar:find`, {
+            search: event.target.parentNode.id,
+          });
+          break;
+      }
+    });
+
+    this.search.onkeypress = event => {
+      const returnKey = 13;
+      const escapeKey = 27;
+
+      if (event.keyCode == returnKey) {
+        messageManager.sendAsyncMessage(`statusBar:searchText`, {
+          searchText: event.target.value,
+        });
+      } else if (event.keyCode == escapeKey) {
+        messageManager.sendAsyncMessage("statusBar:hide");
+      }
+    };
+  }
+}
+
+try {
+  new StatusBar();
+} catch (e) {
+  console.error(`Uncaught Browser Error: ${e}`);
+  throw e;
+}
diff --git a/browser/tools/devbrowser/content/components/statusBar.xhtml b/browser/tools/devbrowser/content/components/statusBar.xhtml
new file mode 100644
index 0000000000000..1f986460eb50f
--- /dev/null
+++ b/browser/tools/devbrowser/content/components/statusBar.xhtml
@@ -0,0 +1,16 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
+    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml"
+      xml:lang="en" lang="en">
+    <head>
+        <title>BrowserStatusBar</title>
+        <link rel="stylesheet" type="text/css" href="statusBar.css" media="screen" />
+    </head>
+    <body>
+        <div id="status_bar">
+            Find in page: <input id="search" autofocus="true"></input>
+            <button id="find">find</button>
+        </div>
+        <script type="text/javascript" src="statusBar.js"></script>
+    </body>
+</html>
\ No newline at end of file
diff --git a/browser/tools/devbrowser/content/devbrowser.css b/browser/tools/devbrowser/content/devbrowser.css
new file mode 100644
index 0000000000000..59877bbc719cc
--- /dev/null
+++ b/browser/tools/devbrowser/content/devbrowser.css
@@ -0,0 +1,47 @@
+body {
+  background: #d3d3d3;
+  color: black;
+}
+
+browser {
+  width: 100%;
+  height: 100%;
+}
+
+#browser_controls_container {
+  height: 50px;
+  width: 100%;
+}
+
+#browser_sidebar_container {
+  float: left;
+  height: 100%;
+  width: 200px;
+  position:fixed;
+  bottom:0;
+  top: 50px;
+
+  display: none;
+  visibility: hidden;
+}
+
+#browser_content_container {
+  float: right;
+  left: 0;
+  width: 100%;
+  position:fixed;
+  /* left: 200px; */
+  bottom: 0;
+  top: 50px;
+}
+
+#browser_statusbar_container {
+  width: 100%;
+  height: 30px;
+  position: fixed;
+  bottom:0;
+  left: 0;
+
+  display: none;
+  visibility: hidden;
+}
\ No newline at end of file
diff --git a/browser/tools/devbrowser/content/devbrowser.js b/browser/tools/devbrowser/content/devbrowser.js
new file mode 100644
index 0000000000000..d2a8b0178d94b
--- /dev/null
+++ b/browser/tools/devbrowser/content/devbrowser.js
@@ -0,0 +1,237 @@
+if (!document.createXULElement) {
+  throw Error("this page must be loaded via the chrome: protocol");
+}
+
+const { Services } = ChromeUtils.import("resource://gre/modules/Services.jsm");
+const { XPCOMUtils } = ChromeUtils.import(
+  "resource://gre/modules/XPCOMUtils.jsm"
+);
+
+XPCOMUtils.defineLazyGetter(this, "gSystemPrincipal", () =>
+  Services.scriptSecurityManager.getSystemPrincipal()
+);
+
+class MainWindow {
+  constructor() {
+    const remote = Services.prefs.getBoolPref(
+      "browser.tabs.remote.autostart",
+      true
+    );
+
+    const browserControls = document.createXULElement("browser");
+    browserControls.setAttribute("id", "browser_controls");
+    browserControls.setAttribute("type", "content");
+    browserControls.setAttribute("remote", remote);
+    browserControls.classList.add("browser_instance");
+    document
+      .getElementById("browser_controls_container")
+      .appendChild(browserControls);
+    browserControls.src = "components/browserControls.xhtml";
+
+    const sideBar = document.createXULElement("browser");
+    sideBar.setAttribute("id", "browser_sidebar");
+    sideBar.setAttribute("type", "content");
+    sideBar.setAttribute("remote", remote);
+    sideBar.classList.add("browser_instance");
+    document.getElementById("browser_sidebar_container").appendChild(sideBar);
+    sideBar.src = "components/sideBar.xhtml";
+    this.showSidebar = false;
+
+    const statusBar = document.createXULElement("browser");
+    statusBar.setAttribute("id", "browser_statusbar");
+    statusBar.setAttribute("type", "content");
+    statusBar.setAttribute("remote", remote);
+    statusBar.src = "components/statusBar.xhtml";
+    document
+      .getElementById("browser_statusbar_container")
+      .appendChild(statusBar);
+    statusBar.classList.add("browser_instance");
+
+    const browserContent = document.createXULElement("browser");
+    browserContent.setAttribute("id", "browser_content");
+    browserContent.setAttribute("autocompletepopup", "");
+    browserContent.setAttribute("type", "content");
+    browserContent.setAttribute("remote", remote);
+    browserContent.classList.add("browser_instance");
+    document
+      .getElementById("browser_content_container")
+      .appendChild(browserContent);
+    browserContent.src = "components/home.xhtml";
+
+    browserContent.onloadend = this.addListeners();
+  }
+
+  addListeners() {
+    window.openContextMenu = () => {
+      console.log("context menu open");
+    };
+
+    Services.ppmm.addMessageListener("browser:loadURI", event => {
+      // NOTE user input
+      let url;
+      try {
+        url = new URL(event.data.url);
+      } catch (ex) {
+        console.error(`DevBrowser: could not parse URL ${event}`);
+        throw ex;
+      }
+
+      if (url.protocol == "about:") {
+        const browserContent = document.getElementById("browser_content");
+        browserContent.src = event.data.url;
+        browserContent.remote = false;
+      } else if (url.protocol == "https:" || url.protocol == "http:") {
+        const browserContent = document.getElementById("browser_content");
+        browserContent.src = event.data.url;
+        browserContent.remote = true;
+      } else {
+        throw new Error(`DevBrowser: unknown protocol ${url.protocol}`);
+      }
+    });
+
+    Services.ppmm.addMessageListener("browser:goBack", () => {
+      document.getElementById("browser_content").goBack();
+    });
+
+    Services.ppmm.addMessageListener("browser:goForward", () => {
+      document.getElementById("browser_content").goForward();
+    });
+
+    Services.ppmm.addMessageListener("browser:stop", () => {
+      document.getElementById("browser_content").stop();
+    });
+
+    Services.ppmm.addMessageListener("browser:reload", () => {
+      document.getElementById("browser_content").reload();
+    });
+
+    Services.ppmm.addMessageListener("browser:sidebar", () => {
+      if (this.showSidebar) {
+        document.getElementById("browser_sidebar_container").style =
+          "visibility: hidden; display:none";
+        document.getElementById("browser_content_container").style = "left: 0";
+        this.showSidebar = false;
+      } else {
+        document.getElementById("browser_sidebar_container").style =
+          "visibility: visible; display:block";
+        document.getElementById("browser_content_container").style =
+          "left: 200px";
+        this.showSidebar = true;
+      }
+    });
+
+    Services.ppmm.addMessageListener("statusBar:hide", () => {
+      document.getElementById("browser_statusbar_container").style =
+        "visibility: hidden; display: none;";
+      document.getElementById("browser_content_container").style = "bottom: 0";
+    });
+
+    Services.ppmm.addMessageListener("browser:search", event => {
+      // FIXME validate user input!
+      const searchText = event.data.searchText;
+      document.getElementById(
+        "browser_content"
+      ).src = `https://searchfox.org/mozilla-central/search?q=${searchText}`;
+    });
+
+    Services.ppmm.addMessageListener("statusBar:searchText", event => {
+      // FIXME validate user input!
+      const searchText = event.data.searchText;
+      document.getElementById("browser_content").finder.findAgain(searchText);
+    });
+
+    let metaDown = false;
+    document.addEventListener("keydown", event => {
+      const backArrow = 37;
+      const forwardArrow = 39;
+
+      if (event.key == "Meta") {
+        metaDown = true;
+      }
+
+      if (event.key == "l" && metaDown) {
+        document.getElementById("browser_controls").focus();
+        Services.ppmm.broadcastAsyncMessage("MainWindow:addressbar.select");
+      }
+
+      if (event.key == "f" && metaDown) {
+        document.getElementById("browser_statusbar_container").style =
+          "visibility: visible; display:block";
+        document.getElementById("browser_content_container").style =
+          "bottom: 30px";
+
+        document.getElementById("browser_statusbar").focus();
+        Services.ppmm.broadcastAsyncMessage("MainWindow:search.select");
+      }
+
+      if (event.keyCode == backArrow && metaDown) {
+        document.getElementById("browser_content").goBack();
+      }
+
+      if (event.keyCode == forwardArrow && metaDown) {
+        document.getElementById("browser_content").goForward();
+      }
+    });
+
+    document.addEventListener("keyup", event => {
+      if (event.key == "Meta") {
+        metaDown = false;
+      }
+    });
+
+    const progressListener = {
+      QueryInterface: ChromeUtils.generateQI([
+        Ci.nsIWebProgressListener,
+        Ci.nsISupportsWeakReference,
+      ]),
+
+      onStateChange(webProgress, request, flags, status) {
+        if (flags & Ci.nsIWebProgressListener.STATE_STOP) {
+          Services.ppmm.broadcastAsyncMessage("MainWindow:loading.stopped");
+        } else {
+          Services.ppmm.broadcastAsyncMessage("MainWindow:loading.started");
+        }
+      },
+      onLocationChange(webProgress, request, location, flags) {
+        Services.ppmm.broadcastAsyncMessage("MainWindow:location.change", {
+          url: location.spec,
+        });
+
+        document.getElementById("browser_controls_container").blur();
+        document.getElementById("browser_content_container").focus();
+      },
+      onProgressChange(
+        webProgress,
+        request,
+        curSelfProgress,
+        maxSelfProgress,
+        curTotalProgress,
+        maxTotalProgress
+      ) {},
+      onSecurityChange(webProgress, request, state) {},
+      onContentBlockingEvent(webProgress, request, event) {},
+      onStatusChange(webProgress, request, status, message) {},
+    };
+
+    const browserContent = document.getElementById("browser_content");
+    browserContent.addProgressListener(
+      progressListener,
+      Ci.nsIWebProgress.NOTIFY_LOCATION |
+        Ci.nsIWebProgress.NOTIFY_SECURITY |
+        Ci.nsIWebProgress.NOTIFY_STATE_REQUEST
+    );
+  }
+
+  static restart() {
+    Services.obs.notifyObservers(null, "startupcache-invalidate");
+    window.location.reload();
+  }
+}
+
+try {
+  const result = new MainWindow();
+  console.log("MainWindow result:", result);
+} catch (e) {
+  console.error("DevBrowser fatal error", e);
+  throw e;
+}
diff --git a/browser/tools/devbrowser/content/devbrowser.xhtml b/browser/tools/devbrowser/content/devbrowser.xhtml
new file mode 100644
index 0000000000000..a2301a77e6372
--- /dev/null
+++ b/browser/tools/devbrowser/content/devbrowser.xhtml
@@ -0,0 +1,18 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
+    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html width="1024" height="768"
+      xmlns="http://www.w3.org/1999/xhtml"
+      xml:lang="en" lang="en">
+    <head>
+        <title>devbrowser</title>
+        <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
+        <link rel="stylesheet" type="text/css" href="devbrowser.css" media="screen" />
+    </head>
+    <body>
+        <div id="browser_controls_container"></div>
+        <div id="browser_sidebar_container"></div>
+        <div id="browser_content_container"></div>
+        <div id="browser_statusbar_container"></div>
+        <script type="text/javascript" src="devbrowser.js"></script>
+    </body>
+</html>
diff --git a/browser/tools/devbrowser/docs/images/screenshot-google.png b/browser/tools/devbrowser/docs/images/screenshot-google.png
new file mode 100644
index 0000000000000..64f7c7fdceb82
Binary files /dev/null and b/browser/tools/devbrowser/docs/images/screenshot-google.png differ
diff --git a/browser/tools/devbrowser/docs/images/screenshot-home.png b/browser/tools/devbrowser/docs/images/screenshot-home.png
new file mode 100644
index 0000000000000..b417132def806
Binary files /dev/null and b/browser/tools/devbrowser/docs/images/screenshot-home.png differ
diff --git a/browser/tools/devbrowser/docs/index.rst b/browser/tools/devbrowser/docs/index.rst
new file mode 100644
index 0000000000000..43e3bd8543b55
--- /dev/null
+++ b/browser/tools/devbrowser/docs/index.rst
@@ -0,0 +1,125 @@
+devbrowser
+==========
+
+devbrowser is a minimal web browser for desktop platforms. It is intended for:
+
+- Platform developers who want a simple testbed.
+- Prototyping new browser features.
+
+..image:: images/screenshot-home.png
+..image:: images/screenshot-google.png
+
+Design and Architecture
+=======================
+
+devbrowser supports two models:
+
+1. Single-process
+
+This is not the default, and the `--disable-e10s` argument must
+be passed to `mach devbrowser` (see the Running section below).
+
+Single-process mode runs both the privileged and web content code in the same
+process, to ease platform debugging. This is not an officially supported
+Tier-1 Firefox configuration and may eventually be removed or modified, as Firefox
+changes and as multi-process debugging improves.
+
+2. Multi-process
+
+This is the default. The architecture is as follows:
+
+Main Window:
+    This is a chrome-privileged window started by the main process, which loads
+    the various Browser Components that make up the UI. The Main Window is
+    responsible for brokering messages between the remote content processes it
+    creates and the main process.
+
+    NOTE: the intention is to change this to be content-privileged and in a remote
+    content process, except for the ability to send messages to the main process,
+    and to be able to create new remote processes. Besides the security advantage
+    of this approach, the other reason this should change is to have the main
+    thread of the main window free to process messages from the browser components
+    so as not to cause lag between user interaction and the application doing something.
+
+Browser Components:
+    The UI that the user interacts with, such as the back button and the address bar.
+    Each componebnt is loaded into its own remote content-privileged process. The main
+    thread of each componebnt is *only* for user interaction. WASM and JS modules may be
+    loaded and run in workers, but they *cannot synchronously interact with the UI*.
+
+Browser Services (aka Main Process):
+    Provides services to the browser such as: add-ons manager, update services,
+    sync, etc. It is run in a process which may interact with the underlying OS,
+    but as above, *cannot synchronously access the main UI*. Access to and from
+    the Browser Components must be brokered as messages through the Main Window.
+
+Core Platform:
+    Services such as graphics, rendering, networking, security.
+    These are compiled for the native platform, and host the above services.
+
+Browser Components
+------------------
+
+Browser components are built using web technologies, such as XHTML, JS, WASM, and CSS.
+They are able to pass very limited messages to and receive notifications from the Main Window,
+but are otherwise unprivileged.
+
+devbrowser is builting using these components:
+
+- BrowserControls:  back/forward buttons, address bar, menu.
+- BrowserStatusBar: find-in-page, current location of link on hover.
+- BrowserSideBar:   left or right side-bar.
+- BrowserContent:   the area in which to load web content.
+
+The Main Window is responsible for layout of the Browser Componets,
+and also receiving and passing messages between the remote processes the
+Browser Components are loaded into. For example, typing in the address bar
+of the BrowserControls will cause the following message:
+
+  BrowserControls -> MainWindow: `loadURI, {"url": "https://example.com"}`
+
+The Main Window then validates this, and re-sends the message to the BrowserContent
+component:
+
+  MainWindow -> BrowserContent: `loadURI, {"url": "https://example.com"}`
+
+Flow of control
+---------------
+
+.. mermaid::
+  graph TD
+  A[MainProcess] -->B(MainWindow)
+  B --> C[BrowserControls ]
+  B --> D[BrowserStatusBar]
+  B --> E[BrowserSideBar]
+  B --> F[BrowserContent]
+
+In this graph, the main process first creates a remote content process, with chrome
+privileges, and loads the MainWindow into it. This is done by loading an XHTML
+page from the chrome: protocol.
+
+NOTE: as implemented currently, there is no separation between the main processes
+and the main window. While this works, it means that the main window could be
+too busy to process messages in a timely manner which gives the user experience
+of lag between e.g. button click and re-action, and is likely to cause users to
+click the same button multiple times (making the problem worse).
+
+The MainWindow creates 4 remote content processes, but not with chrome privileges.
+Finally, Browser Components are loaded into each of these.
+
+Running
+=======
+
+Running in single-process mode:
+  ./mach devbrowser --disable-e10s --setpref browser.tabs.remote.autostart=false --temp-profile
+
+Running in multi-process mode (the default):
+  ./mach devbrowser --temp-profile
+
+Other helpful flags are `--jsdebugger` to automatically open DevTools on initial load,
+or `--start-debugger-server` to start a debugger server for use with a remote DevTools
+instance.
+
+The main browser UI can then be hot-reloaded via the DevTools console:
+
+  MainWindow.restart();
diff --git a/browser/tools/devbrowser/jar.mn b/browser/tools/devbrowser/jar.mn
new file mode 100644
index 0000000000000..53b89cdaddb88
--- /dev/null
+++ b/browser/tools/devbrowser/jar.mn
@@ -0,0 +1,34 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+#ifdef NIGHTLY_BUILD
+browser.jar:
+%  content devbrowser %content/devbrowser/
+   content/devbrowser/devbrowser.xhtml                      (content/devbrowser.xhtml)
+   content/devbrowser/devbrowser.css                        (content/devbrowser.css)
+   content/devbrowser/devbrowser.js                         (content/devbrowser.js)
+
+   content/devbrowser/components/browserControls.xhtml      (content/components/browserControls.xhtml)
+   content/devbrowser/components/browserControls.css        (content/components/browserControls.css)
+   content/devbrowser/components/browserControls.js         (content/components/browserControls.js)
+
+   content/devbrowser/components/statusBar.xhtml            (content/components/statusBar.xhtml)
+   content/devbrowser/components/statusBar.css              (content/components/statusBar.css)
+   content/devbrowser/components/statusBar.js               (content/components/statusBar.js)
+
+   content/devbrowser/components/sideBar.xhtml              (content/components/sideBar.xhtml)
+   content/devbrowser/components/sideBar.css                (content/components/sideBar.css)
+   content/devbrowser/components/sideBar.js                 (content/components/sideBar.js)
+
+   content/devbrowser/components/home.xhtml                 (content/components/home.xhtml)
+   content/devbrowser/components/home.css                   (content/components/home.css)
+   content/devbrowser/components/home.js                    (content/components/home.js)
+
+   content/devbrowser/components/assets/back.svg            (content/components/assets/back.svg)
+   content/devbrowser/components/assets/forward.svg         (content/components/assets/forward.svg)
+   content/devbrowser/components/assets/reload.svg          (content/components/assets/reload.svg)
+   content/devbrowser/components/assets/stop.svg            (content/components/assets/stop.svg)
+   content/devbrowser/components/assets/menu.svg            (content/components/assets/menu.svg)
+   content/devbrowser/components/assets/sidebars.svg        (content/components/assets/sidebars.svg)
+#endif
\ No newline at end of file
diff --git a/browser/tools/devbrowser/moz.build b/browser/tools/devbrowser/moz.build
new file mode 100644
index 0000000000000..338132e9e2796
--- /dev/null
+++ b/browser/tools/devbrowser/moz.build
@@ -0,0 +1,9 @@
+# -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+SPHINX_TREES['docs'] = 'docs'
+
+JAR_MANIFESTS += ['jar.mn']
diff --git a/python/mozbuild/mozbuild/mach_commands.py b/python/mozbuild/mozbuild/mach_commands.py
index 4f0e1b88f8ed0..69f589c0e94dc 100644
--- a/python/mozbuild/mozbuild/mach_commands.py
+++ b/python/mozbuild/mozbuild/mach_commands.py
@@ -906,7 +906,7 @@ def _run_android(self, app='org.mozilla.geckoview_example', intent=None, env=[],
 
         return 0
 
-    def _run_desktop(self, params, remote, background, noprofile, disable_e10s,
+    def _run_desktop(self, params, devbrowser, remote, background, noprofile, disable_e10s,
                      enable_crash_reporter, setpref, temp_profile, macos_open, debug, debugger,
                      debugger_args, dmd, mode, stacks, show_dump_stats):
         from mozprofile import Profile, Preferences
@@ -920,6 +920,7 @@ def _run_desktop(self, params, remote, background, noprofile, disable_e10s,
             return 1
 
         args = []
+
         if macos_open:
             if debug:
                 print("The browser can not be launched in the debugger "
@@ -937,6 +938,10 @@ def _run_desktop(self, params, remote, background, noprofile, disable_e10s,
         else:
             args = [binpath]
 
+        if devbrowser:
+            args.append('--chrome')
+            args.append('chrome://devbrowser/content/devbrowser.xhtml')
+
         if params:
             args.extend(params)
 
@@ -1620,3 +1625,15 @@ def package_l10n(self, verbose=False, locales=[]):
                 cwd=mozpath.join(self.topsrcdir))
 
         return 0
+
+@CommandProvider
+class DevBrowser(RunProgram):
+    @Command('devbrowser', category='post-build',
+             conditions=[conditions.has_build],
+             parser=setup_run_parser,
+             description='Run the compiled program in devbrowser mode, possibly under a debugger or DMD.')
+
+    def run(self, **kwargs):
+        kwargs['devbrowser'] = True
+        return self._run_desktop(**kwargs)
+
diff --git a/tools/docs/conf.py b/tools/docs/conf.py
index 19dcfe1a0a168..95d5046d787d6 100644
--- a/tools/docs/conf.py
+++ b/tools/docs/conf.py
@@ -39,7 +39,7 @@
     'sphinx.ext.napoleon',
     'sphinx.ext.todo',
     'mozbuild.sphinx',
-    'sphinx_js',
+    #'sphinx_js',
     'sphinxcontrib.mermaid',
     'recommonmark',
 ]
@@ -56,7 +56,7 @@
     'toolkit/mozapps/extensions',
 ]
 root_for_relative_js_paths = '.'
-jsdoc_config_path = 'jsdoc.json'
+#jsdoc_config_path = 'jsdoc.json'
 
 templates_path = ['_templates']
 source_suffix = '.rst'
diff --git a/tools/docs/config.yml b/tools/docs/config.yml
index 744b3c008aa2c..098f4e3927b26 100644
--- a/tools/docs/config.yml
+++ b/tools/docs/config.yml
@@ -5,6 +5,7 @@
 categories:
     source_doc:
         - browser
+        - browser/tools/devbrowser/docs/index
         - dom
         - gfx
         - devtools
