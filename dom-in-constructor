# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  a3a30d101267e85ba61270f030423110ea8c35b2

diff --git a/toolkit/content/widgets/menu.js b/toolkit/content/widgets/menu.js
--- a/toolkit/content/widgets/menu.js
+++ b/toolkit/content/widgets/menu.js
@@ -17,16 +17,22 @@
 //     }
 //   }
 // }, { capture: true });
 
 // window.addEventListener("popuphidden", (e) => {
 //   openPopups.delete(e.originalTarget);
 // }, { capture: true });
 
+let timeInRender  = 0;
+
+window.addEventListener("load", () => {
+console.log("took", timeInRender);
+});
+
 class MozMenuItemBase extends MozElements.BaseText {
   set value(val) {
     this.setAttribute("value", val);
     return val;
   }
 
   get value() {
     return this.getAttribute("value");
@@ -57,25 +63,45 @@ class MozMenuItemBase extends MozElement
     }
     return null;
   }
 }
 
 MozXULElement.implementCustomInterface(MozMenuItemBase, [Ci.nsIDOMXULSelectControlItemElement, Ci.nsIDOMXULContainerItemElement]);
 
 class MozMenuItem extends MozMenuItemBase {
+  constructor() {
+    super();
+
+    this._menuHighlightableTextConnected = false;
+    this.menuHighlightableText = document.createXULElement("label");
+    this.menuHighlightableText.setAttribute("class", "menu-iconic-highlightable-text");
+    this.menuHighlightableText.setAttribute("flex", "1");
+    this.menuHighlightableText.setAttribute("crop", "right");
+    this.menuHighlightableText.setAttribute("role", "none");
+    this.menuText = document.createXULElement("label");
+    this.menuText.setAttribute("class", "menu-iconic-text");
+    this.menuText.setAttribute("flex", "1");
+    this.menuText.setAttribute("crop", "right");
+    this.menuText.setAttribute("role", "none");
+  }
   static get observedAttributes() {
     return ["label", "crop", "accesskey", "highlightable"];
   }
 
   attributeChangedCallback(name, oldValue, newValue) {
-    if (oldValue === newValue) {
+    if (oldValue === newValue || !this.renderedOnce) {
       return;
     }
 
+    if (name == "highlightable" && !this._menuHighlightableTextConnected) {
+      this._menuHighlightableTextConnected = true;
+      // this.menuText.after(this.menuHighlightableText);
+    }
+
     this._updateAttributes();
   }
 
   // get isInsideOpenPopup() {
   //   for (let popup of openPopups) {
   //     if (popup.contains(this)) {
   //       return true;
   //     }
@@ -106,17 +132,17 @@ class MozMenuItem extends MozMenuItemBas
 
     if (this.menuText) {
       this.inheritAttribute(this.menuText, "value=label");
       this.inheritAttribute(this.menuText, "crop");
       this.inheritAttribute(this.menuText, "accesskey");
       this.inheritAttribute(this.menuText, "highlightable");
     }
 
-    if (this.menuHighlightableText) {
+    if (this._menuHighlightableTextConnected && this.menuHighlightableText) {
       this.inheritAttribute(this.menuHighlightableText, "text=label");
       this.inheritAttribute(this.menuHighlightableText, "crop");
       this.inheritAttribute(this.menuHighlightableText, "accesskey");
       this.inheritAttribute(this.menuHighlightableText, "highlightable");
     }
 
     if (this.menuAccel) {
       this.inheritAttribute(this.menuAccel, "value=acceltext");
@@ -145,57 +171,63 @@ class MozMenuItem extends MozMenuItemBas
     return this.matches("menulist > menupopup > menuitem");
   }
 
   render() {
     if (this.renderedOnce) {
       return;
     }
     this.renderedOnce = true;
+let t = Date.now();
+
+    this.append(this.menuText);
+
+    timeInRender += (Date.now()- t);
+
     // Add role="none" on all DOM
     // XXX remove this line: https://searchfox.org/mozilla-central/rev/c43240cef5829b8a2dec118faff8a5e1fec6ae1b/accessible/xul/XULMenuAccessible.cpp#41
-    if (this.isIconicNoAccel) {
-      this.append(MozXULElement.parseXULToFragment(`
-        <hbox class="menu-iconic-left" align="center" pack="center" role="none">
-          <image class="menu-iconic-icon" role="none"/>
-        </hbox>
-        <label class="menu-iconic-text" flex="1" crop="right" role="none"/>
-        <label class="menu-iconic-highlightable-text" crop="right" role="none"/>
-      `));
-      this.menuText = this.querySelector(".menu-iconic-text");
-      this.menuIconContainer = this.querySelector(".menu-iconic-left");
-      this.menuIcon = this.querySelector(".menu-iconic-icon");
-      this.menuHighlightableText = this.querySelector(".menu-iconic-highlightable-text");
-    } else if (this.isIconic) {
-      this.prepend(MozXULElement.parseXULToFragment(`
-        <hbox class="menu-iconic-left" align="center" pack="center" role="none">
-          <image class="menu-iconic-icon" role="none"/>
-        </hbox>
-        <label class="menu-iconic-text" flex="1" crop="right" role="none"/>
-        <label class="menu-iconic-highlightable-text" crop="right" role="none"/>
-      `));
-      this.append(MozXULElement.parseXULToFragment(`
-        <hbox class="menu-accel-container" role="none">
-          <label class="menu-iconic-accel" role="none"/>
-        </hbox>
-      `));
-      this.menuText = this.querySelector(".menu-iconic-text");
-      this.menuHighlightableText = this.querySelector(".menu-iconic-highlightable-text");
-      this.menuAccel = this.querySelector(".menu-iconic-accel");
-      this.menuIconContainer = this.querySelector(".menu-iconic-left");
-      this.menuIcon = this.querySelector(".menu-iconic-icon");
-    } else {
-      this.append(MozXULElement.parseXULToFragment(`
-        <label class="menu-text" crop="right" role="none"/>
-        <hbox class="menu-accel-container" role="none">
-          <label class="menu-accel" role="none"/>
-        </hbox>
-      `));
-      this.menuText = this.querySelector(".menu-text");
-      this.menuAccel = this.querySelector(".menu-accel");
-    }
+    // if (this.isIconicNoAccel) {
+    //   this.append(MozXULElement.parseXULToFragment(`
+    //     <hbox class="menu-iconic-left" align="center" pack="center" role="none">
+    //       <image class="menu-iconic-icon" role="none"/>
+    //     </hbox>
+    //     <label class="menu-iconic-text" flex="1" crop="right" role="none"/>
+    //     <label class="menu-iconic-highlightable-text" crop="right" role="none"/>
+    //   `));
+    //   this.menuText = this.querySelector(".menu-iconic-text");
+    //   this.menuIconContainer = this.querySelector(".menu-iconic-left");
+    //   this.menuIcon = this.querySelector(".menu-iconic-icon");
+    //   this.menuHighlightableText = this.querySelector(".menu-iconic-highlightable-text");
+    // } else if (this.isIconic) {
+    //   this.prepend(MozXULElement.parseXULToFragment(`
+    //     <hbox class="menu-iconic-left" align="center" pack="center" role="none">
+    //       <image class="menu-iconic-icon" role="none"/>
+    //     </hbox>
+    //     <label class="menu-iconic-text" flex="1" crop="right" role="none"/>
+    //     <label class="menu-iconic-highlightable-text" crop="right" role="none"/>
+    //   `));
+    //   this.append(MozXULElement.parseXULToFragment(`
+    //     <hbox class="menu-accel-container" role="none">
+    //       <label class="menu-iconic-accel" role="none"/>
+    //     </hbox>
+    //   `));
+    //   this.menuText = this.querySelector(".menu-iconic-text");
+    //   this.menuHighlightableText = this.querySelector(".menu-iconic-highlightable-text");
+    //   this.menuAccel = this.querySelector(".menu-iconic-accel");
+    //   this.menuIconContainer = this.querySelector(".menu-iconic-left");
+    //   this.menuIcon = this.querySelector(".menu-iconic-icon");
+    // } else {
+    //   this.append(MozXULElement.parseXULToFragment(`
+    //     <label class="menu-text" crop="right" role="none"/>
+    //     <hbox class="menu-accel-container" role="none">
+    //       <label class="menu-accel" role="none"/>
+    //     </hbox>
+    //   `));
+    //   this.menuText = this.querySelector(".menu-text");
+    //   this.menuAccel = this.querySelector(".menu-accel");
+    // }
 
     this._updateAttributes();
   }
 }
 
 customElements.define("menuitem", MozMenuItem);
 }
diff --git a/toolkit/content/xul.css b/toolkit/content/xul.css
--- a/toolkit/content/xul.css
+++ b/toolkit/content/xul.css
@@ -259,16 +259,23 @@ toolbarspring {
 menubar > menu {
   -moz-binding: url("chrome://global/content/bindings/menu.xml#menu-menubar");
 }
 
 menubar > menu.menu-iconic {
   -moz-binding: url("chrome://global/content/bindings/menu.xml#menu-menubar-iconic");
 }
 
+/* menuitems that haven't gotten rendered should still take up space for sizetopopup behavior: */
+menuitem:empty:after {
+  content: attr(label);
+  display: -moz-box;
+  background: red;
+}
+
 menu {
   -moz-binding: url("chrome://global/content/bindings/menu.xml#menu");
 }
 
 menu.menu-iconic {
   -moz-binding: url("chrome://global/content/bindings/menu.xml#menu-iconic");
 }
 
