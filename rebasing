# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  8de9d1b6c09b0ab35586c643b8db5c838d81811b
x

diff --git a/devtools/client/framework/target.js b/devtools/client/framework/target.js
--- a/devtools/client/framework/target.js
+++ b/devtools/client/framework/target.js
@@ -727,16 +727,20 @@ WorkerTarget.prototype = {
   get isTabActor() {
     return true;
   },
 
   get url() {
     return this._workerClient.url;
   },
 
+  get isWorkerTarget() {
+    return true;
+  },
+
   get form() {
     return {};
   },
 
   get activeTab() {
     return this._workerClient;
   },
 
diff --git a/devtools/server/worker.js b/devtools/server/worker.js
--- a/devtools/server/worker.js
+++ b/devtools/server/worker.js
@@ -82,18 +82,17 @@ this.addEventListener("message",  functi
     let webConsoleActor = new WebConsoleActor(connection, parent);
     pool.addActor(webConsoleActor);
 
     // XXX: USE POST MESSAGE FOR THIS
 
     // postMessage({
     //   type: "connected",
 
-
-    
+    dump("About to send " + threadActor.actorID + " \n");
     connection.send({
       type: "actors-created",
       threadActor: threadActor.actorID,
       webConsoleActor: webConsoleActor.actorID,
     });
 
     // Step 5: Attach to the thread actor.
     //
diff --git a/devtools/shared/client/main.js b/devtools/shared/client/main.js
--- a/devtools/shared/client/main.js
+++ b/devtools/shared/client/main.js
@@ -443,16 +443,19 @@ DebuggerClient.prototype = {
       DevToolsUtils.executeSoon(() => aOnResponse({
         from: workerClient.actor,
         type: "attached",
         url: workerClient.url
       }, workerClient));
       return;
     }
 
+    console.trace();
+    dump("About to request " + aWorkerActor + "\n");
+
     this.request({ to: aWorkerActor, type: "attach" }, (aResponse) => {
       if (aResponse.error) {
         aOnResponse(aResponse, null);
         return;
       }
 
       let workerClient = new WorkerClient(this, aResponse);
       this.registerClient(workerClient);
@@ -661,16 +664,17 @@ DebuggerClient.prototype = {
    *                     that is copied.  See stream-utils.js.
    */
   request: function (aRequest, aOnResponse) {
     if (!this.mainRoot) {
       throw Error("Have not yet received a hello packet from the server.");
     }
     if (!aRequest.to) {
       let type = aRequest.type || "";
+      throw Error("Brian" + JSON.stringify(aRequest));
       throw Error("'" + type + "' request packet has no destination.");
     }
 
     let request = new Request(aRequest);
     request.format = "json";
     request.stack = components.stack;
     if (aOnResponse) {
       request.on("json-reply", aOnResponse);
@@ -1351,18 +1355,19 @@ WorkerClient.prototype = {
     }
 
     this.request({
       to: this._actor,
       type: "connect",
       options: aOptions,
     }, (aResponse) => {
       if (!aResponse.error) {
+        dump("HERE " + aResponse.threadActor + " " + aResponse.webConsoleActor + "\n");
         this.thread = new ThreadClient(this, aResponse.threadActor);
-        this.webConsoleActor = aResponse.webConsoleActor;
+        this.consoleActor = aResponse.webConsoleActor;
         this.client.registerClient(this.thread);
       }
       aOnResponse(aResponse, this.thread);
     });
   },
 
   _onClose: function () {
     this.removeListener("close", this._onClose);
