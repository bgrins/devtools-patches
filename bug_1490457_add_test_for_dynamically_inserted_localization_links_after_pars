# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1536857114 25200
#      Thu Sep 13 09:45:14 2018 -0700
# Node ID 0f2b134a9529c2257b1e3adde20d15e5e34cfa9d
# Parent  9b8f2288887b67fb1973f0a4ab2ad1bedf18aedb
Bug 1490457 - Add test for dynamically inserted localization links after parse;r=zbraniecki

Differential Revision: https://phabricator.services.mozilla.com/D5781

diff --git a/dom/base/nsDocument.cpp b/dom/base/nsDocument.cpp
--- a/dom/base/nsDocument.cpp
+++ b/dom/base/nsDocument.cpp
@@ -3356,17 +3356,17 @@ nsIDocument::LocalizationLinkAdded(Eleme
   nsAutoString href;
   aLinkElement->GetAttr(kNameSpaceID_None, nsGkAtoms::href, href);
   // If the link is added after the DocumentL10n instance
   // has been initialized, just pass the resource ID to it.
   if (mDocumentL10n) {
     AutoTArray<nsString, 1> resourceIds;
     resourceIds.AppendElement(href);
     mDocumentL10n->AddResourceIds(resourceIds);
-  } else if (mReadyState == READYSTATE_COMPLETE) {
+  } else if (mReadyState >= READYSTATE_INTERACTIVE) {
     // Otherwise, if the document has already been parsed
     // we need to lazily initialize the localization.
     AutoTArray<nsString, 1> resourceIds;
     resourceIds.AppendElement(href);
     InitializeLocalization(resourceIds);
     mDocumentL10n->TriggerInitialDocumentTranslation();
   } else {
     // Otherwise, we're still parsing the document.
diff --git a/intl/l10n/test/chrome.ini b/intl/l10n/test/chrome.ini
--- a/intl/l10n/test/chrome.ini
+++ b/intl/l10n/test/chrome.ini
@@ -14,12 +14,14 @@
 [dom/test_domloc_overlay_missing_children.html]
 [dom/test_domloc_overlay_sanitized.html]
 [dom/test_domloc.xul]
 
 [dom/test_mozdom_translateElements.html]
 [dom/test_mozdom_translateFragment.html]
 [dom/test_mozdom_translateRoots.html]
 
+[dom/test_doc10n_initialize_after_parse.xhtml]
+[dom/test_doc10n_initialize_after_parse.xul]
 [dom/test_docl10n.xul]
 [dom/test_docl10n.xhtml]
 [dom/test_docl10n.html]
 [dom/test_docl10n_ready_rejected.html]
diff --git a/intl/l10n/test/dom/test_doc10n_initialize_after_parse.xhtml b/intl/l10n/test/dom/test_doc10n_initialize_after_parse.xhtml
new file mode 100644
--- /dev/null
+++ b/intl/l10n/test/dom/test_doc10n_initialize_after_parse.xhtml
@@ -0,0 +1,33 @@
+<!DOCTYPE html>
+
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head>
+  <meta charset="utf-8"></meta>
+  <title>Test DocumentL10n in XHTML environment</title>
+  <script type="application/javascript" src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
+  <link rel="stylesheet" type="text/css" href="chrome://mochikit/content/tests/SimpleTest/test.css"></link>
+  <script type="application/javascript">
+  "use strict";
+  SimpleTest.waitForExplicitFinish();
+
+  document.addEventListener("DOMContentLoaded", async function() {
+    ok(!document.l10n, "l10n not initialized");
+    MozXULElement.insertFTLIfNeeded("crashreporter/aboutcrashes.ftl");
+    ok(document.querySelector("head link[rel=localization][href='crashreporter/aboutcrashes.ftl']"), "link exists");
+    ok(document.l10n, "l10n initialized");
+    await document.l10n.ready;
+
+    ok(document.getElementById("main-desc").textContent.length > 0, "Text updated after init");
+
+    info("Confirming a second call doesn't inject another link");
+    MozXULElement.insertFTLIfNeeded("crashreporter/aboutcrashes.ftl");
+    is(document.querySelectorAll("head link[rel=localization]").length, 1, "link exists");
+
+    SimpleTest.finish();
+  });
+  </script>
+</head>
+<body>
+  <h1 id="main-desc" data-l10n-id="crash-reports-title"></h1>
+</body>
+</html>
diff --git a/intl/l10n/test/dom/test_doc10n_initialize_after_parse.xul b/intl/l10n/test/dom/test_doc10n_initialize_after_parse.xul
new file mode 100644
--- /dev/null
+++ b/intl/l10n/test/dom/test_doc10n_initialize_after_parse.xul
@@ -0,0 +1,38 @@
+<?xml version="1.0"?>
+<?xml-stylesheet href="chrome://global/skin" type="text/css"?>
+<?xml-stylesheet href="chrome://mochikit/content/tests/SimpleTest/test.css"
+                 type="text/css"?>
+
+<window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
+        xmlns:html="http://www.w3.org/1999/xhtml"
+        title="Testing DocumentL10n in XUL environment">
+
+  <script type="application/javascript"
+          src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js" />
+  <script type="application/javascript">
+  <![CDATA[
+  SimpleTest.waitForExplicitFinish();
+
+  document.addEventListener("readystatechange", async function() {
+    if (document.readyState != "complete") {
+      return;
+    }
+    ok(!document.l10n, "l10n not initialized");
+    MozXULElement.insertFTLIfNeeded("crashreporter/aboutcrashes.ftl");
+    ok(document.querySelector("linkset link[rel=localization][href='crashreporter/aboutcrashes.ftl']"), "link exists");
+    ok(document.l10n, "l10n initialized");
+    await document.l10n.ready;
+
+    ok(document.getElementById("main-desc").textContent.length > 0, "Text updated after init");
+
+    info("Confirming a second call doesn't inject another link");
+    MozXULElement.insertFTLIfNeeded("crashreporter/aboutcrashes.ftl");
+    is(document.querySelectorAll("linkset link[rel=localization]").length, 1, "link exists");
+
+    SimpleTest.finish();
+  });
+  ]]>
+  </script>
+
+  <description id="main-desc" data-l10n-id="crash-reports-title"/>
+</window>
diff --git a/toolkit/content/customElements.js b/toolkit/content/customElements.js
--- a/toolkit/content/customElements.js
+++ b/toolkit/content/customElements.js
@@ -67,16 +67,45 @@ class MozXULElement extends XULElement {
     // We use a range here so that we don't access the inner DOM elements from
     // JavaScript before they are imported and inserted into a document.
     let range = doc.createRange();
     range.selectNodeContents(doc.querySelector("box"));
     return range.extractContents();
   }
 
   /**
+   * Insert a localization link to an FTL file. This is used so that
+   * a Custom Element can wait to inject the link until it's connected,
+   * and so that consuming documents don't require the correct <link>
+   * present in the markup.
+   *
+   * @param href
+   *        The path to the FTL file
+   */
+  static insertFTLIfNeeded(href) {
+    let container = document.head || document.querySelector("linkset");
+    if (!container) {
+      container = document.createXULElement("linkset");
+      document.documentElement.appendChild(container);
+    }
+
+    for (let link of container.querySelectorAll("link")) {
+      if (link.getAttribute("href") == href) {
+        return;
+      }
+    }
+
+    let link = document.createElementNS("http://www.w3.org/1999/xhtml", "link");
+    link.setAttribute("rel", "localization");
+    link.setAttribute("href", href);
+
+    container.appendChild(link);
+  }
+
+  /**
    * Indicate that a class defining an element implements one or more
    * XPCOM interfaces. The custom element getCustomInterface is added
    * as well as an implementation of QueryInterface.
    *
    * The supplied class should implement the properties and methods of
    * all of the interfaces that are specified.
    *
    * @param cls
