# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  c886a112f2ddf656a4e809ca81ae549f87e1a7d3
Bug 1239750 - Add DAMP measurement for console.log performance;r=fitzgen

diff --git a/testing/talos/talos/tests/devtools/addon/content/damp.html b/testing/talos/talos/tests/devtools/addon/content/damp.html
--- a/testing/talos/talos/tests/devtools/addon/content/damp.html
+++ b/testing/talos/talos/tests/devtools/addon/content/damp.html
@@ -5,34 +5,36 @@
 
 <script type="application/x-javascript">
 // Empty subtests interpreted as all subtests, since otherwise meaningless.
 var config = {subtests: [], repeat: 1};
 var defaultConfig = {
   repeat: 1,
   rest: 100,
   subtests: {
-    webconsoleOpen: true,
-    inspectorOpen: true,
-    debuggerOpen: true,
-    styleEditorOpen: true,
-    performanceOpen: true,
-    netmonitorOpen: true,
-    saveAndReadHeapSnapshot: true,
+    webconsoleOpen: false,
+    inspectorOpen: false,
+    debuggerOpen: false,
+    styleEditorOpen: false,
+    performanceOpen: false,
+    netmonitorOpen: false,
+    saveAndReadHeapSnapshot: false,
+    consoleLogging: true,
   }
 };
 
 var testsInfo = {
   webconsoleOpen: "Measure open/close toolbox on webconsole panel",
   inspectorOpen: "Measure open/close toolbox on inspector panel",
   debuggerOpen: "Measure open/close toolbox on debugger panel",
   styleEditorOpen: "Measure open/close toolbox on style editor panel",
   performanceOpen: "Measure open/close toolbox on performance panel",
   netmonitorOpen: "Measure open/close toolbox on network monitor panel",
   saveAndReadHeapSnapshot: "Measure open/close toolbox on memory panel and save/read heap snapshot",
+  consoleLogging: "Measure time for console.log statements to appear",
 };
 
 function updateConfig() {
   config = {subtests: []};
   for (var test in defaultConfig.subtests) {
     if ($("subtest-" + test).checked) {
       config.subtests.push(test);
     }
@@ -53,16 +55,17 @@ function updateConfig() {
 <div id="hide-during-run">
    Visit <a href="https://wiki.mozilla.org/Buildbot/Talos/Tests#DAMP">talos/TART</a> for detailed info.<br/>
   <ul>
     <li><b>If you just opened the browser</b> - give Firefox few seconds to settle down before testing.</li>
   </ul>
 
 Utilities:
   <a href="pages/simple.html">simple page</a>&nbsp;&nbsp;&nbsp;
+  <a href="pages/stepping.html">stepping page</a>&nbsp;&nbsp;&nbsp;
   <a href="http://localhost/tests/tp5n/bild.de/www.bild.de/index.html">complicated page</a>&nbsp;&nbsp;&nbsp;
 <br/><br/>
 <b>Configure DAMP</b> (CTRL-F5 to reset to talos defaults) <button type="button" onclick="deselectAll()">Deselect all tests</button><br/>
 <script>
   for (var test in defaultConfig.subtests) {
     document.write('<input type="checkbox" id="subtest-' + test + '" ' + (defaultConfig.subtests[test] ? "" : "un") + 'checked>'
                   + test + '</input>'
                   + '<span style="color:grey">&nbsp;&nbsp;&nbsp;' + testsInfo[test] + '</span>'
diff --git a/testing/talos/talos/tests/devtools/addon/content/damp.js b/testing/talos/talos/tests/devtools/addon/content/damp.js
--- a/testing/talos/talos/tests/devtools/addon/content/damp.js
+++ b/testing/talos/talos/tests/devtools/addon/content/damp.js
@@ -41,46 +41,54 @@ Damp.prototype = {
 
   reloadPage: function(name) {
     let startReloadTimestamp = performance.now();
     return new Promise((resolve, reject) => {
       let browser = gBrowser.selectedBrowser;
       let self = this;
       browser.addEventListener("load", function onload() {
         browser.removeEventListener("load", onload, true);
-        let stopReloadTimestamp = performance.now();
-        self._results.push({name: name + ".reload.DAMP", value: stopReloadTimestamp - startReloadTimestamp});
+        // Only record results if a name was passed
+        if (name) {
+          let stopReloadTimestamp = performance.now();
+          self._results.push({name: name + ".reload.DAMP", value: stopReloadTimestamp - startReloadTimestamp});
+        }
         resolve();
       }, true);
       browser.reload();
     });
   },
 
   openToolbox: function (name, tool = "webconsole") {
     let tab = getActiveTab(getMostRecentBrowserWindow());
     let target = devtools.TargetFactory.forTab(tab);
     let startRecordTimestamp = performance.now();
     let showPromise = gDevTools.showToolbox(target, tool);
 
     return showPromise.then(toolbox => {
-      let stopRecordTimestamp = performance.now();
-      this._results.push({name: name + ".open.DAMP", value: stopRecordTimestamp - startRecordTimestamp});
-
+      // Only record results if a name was passed
+      if (name) {
+        let stopRecordTimestamp = performance.now();
+        this._results.push({name: name + ".open.DAMP", value: stopRecordTimestamp - startRecordTimestamp});
+      }
       return toolbox;
     });
   },
 
   closeToolbox: function(name) {
     let tab = getActiveTab(getMostRecentBrowserWindow());
     let target = devtools.TargetFactory.forTab(tab);
     let startRecordTimestamp = performance.now();
     let closePromise = gDevTools.closeToolbox(target);
     return closePromise.then(() => {
-      let stopRecordTimestamp = performance.now();
-      this._results.push({name: name + ".close.DAMP", value: stopRecordTimestamp - startRecordTimestamp});
+      // Only record results if a name was passed
+      if (name) {
+        let stopRecordTimestamp = performance.now();
+        this._results.push({name: name + ".close.DAMP", value: stopRecordTimestamp - startRecordTimestamp});
+      }
     });
   },
 
   saveHeapSnapshot: function(label) {
     let tab = getActiveTab(getMostRecentBrowserWindow());
     let target = devtools.TargetFactory.forTab(tab);
     let toolbox = gDevTools.getToolbox(target);
     let panel = toolbox.getCurrentPanel();
@@ -103,16 +111,68 @@ Damp.prototype = {
     let end = performance.now();
     this._results.push({
       name: label + ".readHeapSnapshot",
       value: end - start
     });
     return Promise.resolve();
   },
 
+  _consoleLogTest: Task.async(function*() {
+    let tab = yield this.testSetup(SIMPLE_URL);
+    let messageManager = tab.linkedBrowser.messageManager;
+    let toolbox = yield this.openToolbox(null, "webconsole");
+    let TOTAL_MESSAGES = 10;
+    let receievedMessages = 0;
+    let webconsole = toolbox.getPanel("webconsole");
+
+    // Resolve once the last message has been received.
+    let allMessagesReceived = new Promise(resolve => {
+      function receiveMessages(e, messages) {
+        receievedMessages += messages.size;
+        for (let m of messages) {
+          if (m.node.textContent.includes("damp " + TOTAL_MESSAGES)) {
+            webconsole.hud.ui.off("new-messages", receiveMessages);
+            // Wait for the console to redraw
+            requestAnimationFrame(resolve);
+            return;
+          }
+        }
+      }
+      webconsole.hud.ui.on("new-messages", receiveMessages);
+    });
+
+    // Load a frame script using a data URI so we can do console.logs
+    // from the page.  So this is running in content.
+    messageManager.loadFrameScript("data:,(" + encodeURIComponent(
+      `function () {
+        addMessageListener("do-logs", function () {
+          for (var i = 0; i < ${TOTAL_MESSAGES}; i++) {
+            content.console.log('damp', i+1, content);
+          }
+        });
+      }`
+    ) + ")()", true);
+
+    // Kick off the logging
+    messageManager.sendAsyncMessage("do-logs");
+
+    let start = performance.now();
+    yield allMessagesReceived;
+    let end = performance.now();
+
+    this._results.push({
+      name: "consolelog",
+      value: end - start
+    });
+
+    yield this.closeToolbox(null);
+    yield this.testTeardown();
+  }),
+
   takeCensus: function(label) {
     let start = performance.now();
 
     this._snapshot.takeCensus({
       breakdown: {
         by: "coarseType",
         objects: {
           by: "objectClass",
@@ -218,20 +278,21 @@ Damp.prototype = {
         sequenceArray.push(subtests[config.subtests[i]]);
       }
     }
 
     return sequenceArray;
   },
 
   testSetup: Task.async(function*(url) {
-    yield this.addTab(url);
+    let tab = yield this.addTab(url);
     yield new Promise(resolve => {
       setTimeout(resolve, this._config.rest);
     });
+    return tab;
   }),
 
   testTeardown: Task.async(function*(url) {
     this.closeCurrentTab();
     this._nextCommand();
   }),
 
   // Everything below here are common pieces needed for the test runner to function,
@@ -321,11 +382,15 @@ Damp.prototype = {
     this._dampTab = this._win.gBrowser.selectedTab;
     this._win.gBrowser.selectedBrowser.focus(); // Unfocus the URL bar to avoid caret blink
 
     Profiler.mark("DAMP - start", true);
 
     let tests = [];
     tests = tests.concat(this._getToolLoadingTests(SIMPLE_URL, "simple"));
     tests = tests.concat(this._getToolLoadingTests(COMPLICATED_URL, "complicated"));
+
+    if (config.subtests.indexOf("consoleLogging") > -1) {
+      tests = tests.concat(this._consoleLogTest);
+    }
     this._doSequence(tests, this._doneInternal);
   }
 }
