# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  5026124ea3ed9ed0cce1a7d38fce597d83b14175
Testing the batchedrenderlist

diff --git a/devtools/client/webconsole/new-console-output/components/batched-render-list.js b/devtools/client/webconsole/new-console-output/components/batched-render-list.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/webconsole/new-console-output/components/batched-render-list.js
@@ -0,0 +1,124 @@
+// import React, { PureComponent } from 'react';
+// import ReactDOM from 'react-dom';
+const {
+  createClass,
+  createFactory,
+  DOM: dom,
+  PropTypes
+} = require("devtools/client/shared/vendor/react");
+const ReactDOM = require("devtools/client/shared/vendor/react-dom");
+
+const FRAME_BUDGET = 1000; // Milliseconds
+
+const BatchedRenderList = createClass({
+
+  componentDidMount(props) {
+    this._raf = null;
+    this._toRender = [];
+    this._keyMap = new Map();
+    this.state = {
+      element: null,
+      // These mutate as they are rendered and pop off.
+      itemsToRender: [],
+      itemsToRenderElements: [],
+    };
+  },
+
+  _receiveNewChildren(oldList, newList, element) {
+    // console.log('_receiveNewChildren', oldList.length, newList.length);
+    console.time("Computing");
+    // for ()
+    // this._keyMap.set();
+
+    const newItems = newList.filter(itemA => !oldList.some(itemB => itemA.key === itemB.key));
+    const newItemIndices = newItems.map(itemA => newList.findIndex(itemB => itemA.key === itemB.key));
+    const newItemElements = [];
+    const oldItems = oldList.filter(itemA => !newList.some(itemB => itemA.key === itemB.key));
+    const oldItemIndices = oldItems.map(itemA => oldList.findIndex(itemB => itemA.key === itemB.key));
+    const oldElements = oldItemIndices.map(index => element.children[index]);
+
+    console.timeEnd("Computing");
+    // Look into groups
+    console.log("Going to remove ", oldItems.length, "And add ", newItems.length)
+    // Unmount the old components.
+
+    console.time("Removing");
+    for (const oldElement of oldElements) {
+      // TODO: Make this lazy:
+      // ReactDOM.unmountComponentAtNode(oldElement);
+      oldElement.remove();
+    }
+    console.timeEnd("Removing");
+
+    console.time("Creating mount points");
+    // Stub out child mount points
+    // const frag = document.createDocumentFragment();
+    for (const newItemIndex of newItemIndices) {
+      const div = document.createElement('div');
+      // frag.appendChild(div);
+      element.insertBefore(div, element.children[newItemIndex]);
+      newItemElements.push(div);
+    }
+    // element.appendChild(frag);
+    console.timeEnd("Creating mount points");
+
+    this.setState({
+      itemsToRender: newItems,
+      itemsToRenderElements: newItemElements,
+      itemsToRenderIndices: newItemIndices,
+    });
+
+    this._scheduleRender();
+  },
+
+  componentWillReceiveProps() {
+
+  },
+
+  componentWillUpdate(nextProps, nextState) {
+    if (!this.state.element && nextState.element) {
+      this._receiveNewChildren([], nextProps.children, nextState.element)
+    } else if (this.props.children !== nextProps.children) {
+      this._receiveNewChildren(this.props.children, nextProps.children, nextState.element)
+    }
+    return false;
+  },
+
+  _scheduleRender() {
+    if (this._raf) {
+      return;
+    }
+    this._raf = requestAnimationFrame(() => {
+      const { itemsToRender, itemsToRenderElements } = this.state;
+      const start = Date.now();
+      while (Date.now() - start < FRAME_BUDGET && itemsToRender.length !== 0) {
+        const item = itemsToRender.shift();
+        const element = itemsToRenderElements.shift();
+        ReactDOM.render(item, element);
+      }
+      this._raf = null;
+      if (itemsToRender.length > 0) {
+        console.log("Skipped", itemsToRender.length);
+        this._scheduleRender();
+      }
+    });
+  },
+
+  render() {
+    return dom.div({
+      className: 'batchedRenderList',
+      style: {
+        // XXX: Move to CSS
+        display: 'flex',
+        flexDirection: 'column'
+      },
+      ref: element => {
+        if (!this.state) {
+          this.setState({element});
+        }
+      }
+    });
+  }
+});
+
+module.exports = BatchedRenderList;
\ No newline at end of file
diff --git a/devtools/client/webconsole/new-console-output/components/console-output.js b/devtools/client/webconsole/new-console-output/components/console-output.js
--- a/devtools/client/webconsole/new-console-output/components/console-output.js
+++ b/devtools/client/webconsole/new-console-output/components/console-output.js
@@ -5,16 +5,17 @@
 
 const {
   createClass,
   createFactory,
   DOM: dom,
   PropTypes
 } = require("devtools/client/shared/vendor/react");
 const { connect } = require("devtools/client/shared/vendor/react-redux");
+const BatchedRenderList = createFactory(require('devtools/client/webconsole/new-console-output/components/batched-render-list'));
 
 const {
   getAllMessagesUiById,
   getAllMessagesTableDataById,
   getAllNetworkMessagesUpdateById,
   getVisibleMessages,
   getAllRepeatById,
 } = require("devtools/client/webconsole/new-console-output/selectors/messages");
@@ -80,16 +81,17 @@ const ConsoleOutput = createClass({
       messagesUi,
       messagesTableData,
       messagesRepeat,
       networkMessagesUpdate,
       serviceContainer,
       timestampsVisible,
     } = this.props;
 
+    console.log(visibleMessages, visibleMessages.length);
     let messageNodes = visibleMessages.map((message) => {
       return (
         MessageContainer({
           dispatch,
           message,
           key: message.id,
           serviceContainer,
           open: messagesUi.includes(message.id),
@@ -104,17 +106,17 @@ const ConsoleOutput = createClass({
 
     return (
       dom.div({
         className: "webconsole-output",
         onContextMenu: this.onContextMenu,
         ref: node => {
           this.outputNode = node;
         },
-      }, messageNodes
+      }, BatchedRenderList(null, messageNodes)
       )
     );
   }
 });
 
 function scrollToBottom(node) {
   node.scrollTop = node.scrollHeight;
 }
diff --git a/devtools/client/webconsole/new-console-output/components/moz.build b/devtools/client/webconsole/new-console-output/components/moz.build
--- a/devtools/client/webconsole/new-console-output/components/moz.build
+++ b/devtools/client/webconsole/new-console-output/components/moz.build
@@ -3,16 +3,17 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 DIRS += [
     'message-types'
 ]
 
 DevToolsModules(
+    'batched-render-list.js',
     'collapse-button.js',
     'console-output.js',
     'console-table.js',
     'filter-bar.js',
     'filter-button.js',
     'grip-message-body.js',
     'message-container.js',
     'message-icon.js',
