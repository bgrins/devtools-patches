# HG changeset patch
# Parent f463040ec3913bb468a5558c1805a7d78dc1ee68
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 998344 - Console input is slow when accessing large Uint8Array object properties

diff --git a/toolkit/devtools/webconsole/utils.js b/toolkit/devtools/webconsole/utils.js
--- a/toolkit/devtools/webconsole/utils.js
+++ b/toolkit/devtools/webconsole/utils.js
@@ -966,21 +966,30 @@ function getMatchedProps(aObj, aMatch)
  * @return object
  *         Object that contains the matchProp and the list of names.
  */
 function getMatchedProps_impl(aObj, aMatch, {chainIterator, getProperties})
 {
   let matches = new Set();
 
   // We need to go up the prototype chain.
+  console.time("Matching");
   let iter = chainIterator(aObj);
   for (let obj of iter) {
     let props = getProperties(obj);
+        console.log("Unfiltered props length", props.length);
+
+    console.log(typeof obj, aObj.toString(), props[0] == "0", props[props.length] == "length");
+    // if (props[0] == "0" && props[props.length] == "length");
+
+    // props = props.filter(prop=>prop.indexOf(aMatch) != 0 && +prop != +prop);
+    // console.log("Filtered props length", props.length);
     for (let i = 0; i < props.length; i++) {
       let prop = props[i];
+      console.log(prop, i);
       if (prop.indexOf(aMatch) != 0) {
         continue;
       }
 
       // If it is an array index, we can't take it.
       // This uses a trick: converting a string to a number yields NaN if
       // the operation failed, and NaN is not equal to itself.
       if (+prop != +prop) {
@@ -991,16 +1000,18 @@ function getMatchedProps_impl(aObj, aMat
         break;
       }
     }
 
     if (matches.size > MAX_COMPLETIONS) {
       break;
     }
   }
+  console.log("Finished ", matches.size);
+  console.timeEnd("Matching");
 
   return {
     matchProp: aMatch,
     matches: [...matches],
   };
 }
 
 /**
