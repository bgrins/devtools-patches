# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  b0bdf1bc3b61fbe002d820ba0bd88ebedae92b73
Bug 1226744 - Add a command line flag to auto open devtools when the browser starts up;r=jryans

diff --git a/devtools/client/devtools-clhandler.js b/devtools/client/devtools-clhandler.js
--- a/devtools/client/devtools-clhandler.js
+++ b/devtools/client/devtools-clhandler.js
@@ -11,22 +11,27 @@ Cu.import("resource://gre/modules/XPCOMU
 XPCOMUtils.defineLazyModuleGetter(this, "Services", "resource://gre/modules/Services.jsm");
 
 function devtoolsCommandlineHandler() {
 }
 devtoolsCommandlineHandler.prototype = {
   handle: function(cmdLine) {
     let consoleFlag = cmdLine.handleFlag("jsconsole", false);
     let debuggerFlag = cmdLine.handleFlag("jsdebugger", false);
+    let devtoolsFlag = cmdLine.handleFlag("devtools", false);
+
     if (consoleFlag) {
       this.handleConsoleFlag(cmdLine);
     }
     if (debuggerFlag) {
       this.handleDebuggerFlag(cmdLine);
     }
+    if (devtoolsFlag) {
+      this.handleDevtoolsFlag();
+    }
     let debuggerServerFlag;
     try {
       debuggerServerFlag =
         cmdLine.handleFlagWithParam("start-debugger-server", false);
     } catch(e) {
       // We get an error if the option is given but not followed by a value.
       // By catching and trying again, the value is effectively optional.
       debuggerServerFlag = cmdLine.handleFlag("start-debugger-server", false);
@@ -49,16 +54,27 @@ devtoolsCommandlineHandler.prototype = {
       window.focus(); // the Browser Console was already open
     }
 
     if (cmdLine.state == Ci.nsICommandLine.STATE_REMOTE_AUTO) {
       cmdLine.preventDefault = true;
     }
   },
 
+  // Open the toolbox on the selected tab once the browser starts up.
+  handleDevtoolsFlag: function() {
+    Services.obs.addObserver(function onStartup(window) {
+      Services.obs.removeObserver(onStartup, "browser-delayed-startup-finished");
+      const {gDevTools} = Cu.import("resource://devtools/client/framework/gDevTools.jsm", {});
+      const {devtools} = Cu.import("resource://devtools/shared/Loader.jsm", {});
+      let target = devtools.TargetFactory.forTab(window.gBrowser.selectedTab);
+      gDevTools.showToolbox(target);
+    }, "browser-delayed-startup-finished", false);
+  },
+
   _isRemoteDebuggingEnabled() {
     let remoteDebuggingEnabled = false;
     try {
       remoteDebuggingEnabled = kDebuggerPrefs.every((pref) => Services.prefs.getBoolPref(pref));
     } catch (ex) {
       Cu.reportError(ex);
       return false;
     }
@@ -121,16 +137,17 @@ devtoolsCommandlineHandler.prototype = {
 
     if (cmdLine.state == Ci.nsICommandLine.STATE_REMOTE_AUTO) {
       cmdLine.preventDefault = true;
     }
   },
 
   helpInfo : "  --jsconsole        Open the Browser Console.\n" +
              "  --jsdebugger       Open the Browser Toolbox.\n" +
+             "  --devtools         Open DevTools on initial load.\n" +
              "  --start-debugger-server [port|path] " +
              "Start the debugger server on a TCP port or " +
              "Unix domain socket path.  Defaults to TCP port 6000.\n",
 
   classID: Components.ID("{9e9a9283-0ce9-4e4a-8f1c-ba129a032c32}"),
   QueryInterface: XPCOMUtils.generateQI([Ci.nsICommandLineHandler]),
 };
 
