# HG changeset patch
# Parent ac1390e903b7674d025dcd83a0f36def1de5eedd
# User Brian Grinstead <bgrinstead@mozilla.com>
trying to track down a leak in itchpad


diff --git a/browser/devtools/itchpad/lib/itchpad.js b/browser/devtools/itchpad/lib/itchpad.js
--- a/browser/devtools/itchpad/lib/itchpad.js
+++ b/browser/devtools/itchpad/lib/itchpad.js
@@ -194,16 +194,17 @@ var Itchpad = Class({
     let commands = ['cmd_undo', 'cmd_redo', 'cmd_delete', 'cmd_findAgain'];
     commands.forEach(this.window.goUpdateCommand);
   },
 
   /**
    * Destroy all objects on the iframe unload event.
    */
   destroy: function() {
+      console.log("DESTROYING NOW");
     this._plugins.forEach(plugin => { plugin.destroy(); });
 
     [...this.project.allResources()].forEach((resource) => {
       let editor = this.editorFor(resource);
       if (editor) {
         editor.destroy();
       }
     });
@@ -261,17 +262,17 @@ var Itchpad = Class({
   /**
    * Open a resource in a particular shell.
    *
    * @param Resource resource
    *                 The file to be opened.
    */
   openResource: function(resource) {
     this.shells.open(resource);
-    this.projectTree.select(resource);
+    // this.projectTree.select(resource);
   },
 
   /**
    * When a node is selected in the tree, open its associated editor.
    *
    * @param Resource resource
    *                 The file that has been selected
    */
@@ -405,20 +406,20 @@ var Itchpad = Class({
    * Dispatch an onEditorCreated event, and listen for other events specific
    * to this editor instance.
    *
    * @param Editor editor
    *               The new editor instance.
    */
   _onEditorCreated: function(editor) {
     this.pluginDispatch("onEditorCreated", editor);
-    this._editorListenAndDispatch(editor, "change", "onEditorChange");
-    this._editorListenAndDispatch(editor, "cursorActivity", "onEditorCursorActivity");
-    this._editorListenAndDispatch(editor, "load", "onEditorLoad");
-    this._editorListenAndDispatch(editor, "save", "onEditorSave");
+    // this._editorListenAndDispatch(editor, "change", "onEditorChange");
+    // this._editorListenAndDispatch(editor, "cursorActivity", "onEditorCursorActivity");
+    // this._editorListenAndDispatch(editor, "load", "onEditorLoad");
+    // this._editorListenAndDispatch(editor, "save", "onEditorSave");
   },
 
   /**
    * Dispatch an onEditorActivated event and finish setting up once the
    * editor is ready to use.
    *
    * @param Editor editor
    *               The editor instance, which is now appended in the document.
@@ -433,17 +434,17 @@ var Itchpad = Class({
    * Also emits the same handler name on `this`.
    *
    * @param string handler
    *               Which function name to call on plugins.
    * @param ...args args
    *                All remaining parameters are passed into the handler.
    */
   pluginDispatch: function(handler, ...args) {
-    console.log("DISPATCHING EVENT TO PLUGIN", handler, args);
+    // console.log("?DISPATCHING EVENT TO PLUGIN", handler, args);
     emit(this, handler, ...args);
     this.plugins.forEach(plugin => {
       try {
         if (handler in plugin) plugin[handler](...args);
       } catch(ex) {
         console.error(ex);
       }
     })
diff --git a/browser/devtools/itchpad/lib/plugins/status-bar/lib/plugin.js b/browser/devtools/itchpad/lib/plugins/status-bar/lib/plugin.js
--- a/browser/devtools/itchpad/lib/plugins/status-bar/lib/plugin.js
+++ b/browser/devtools/itchpad/lib/plugins/status-bar/lib/plugin.js
@@ -32,21 +32,22 @@ var StatusBarPlugin = Class({
     });
 
     this.fileLabel = this.host.createElement("label", {
       parent: "#plugin-toolbar-left",
       class: "itchpad-file-label"
     });
 
     this.onTreeSelection = this.onTreeSelection.bind(this);
-    this.host.projectTree.on("selection", this.onTreeSelection);
+    // this.host.projectTree.on("selection", this.onTreeSelection);
   },
 
   destroy: function() {
-    this.host.projectTree.off("selection", this.onTreeSelection);
+    console.log("PLUGIN DESTROY");
+    // this.host.projectTree.off("selection", this.onTreeSelection);
   },
 
   /**
    * Print information about the current state of the editor
    *
    * @param Editor editor
    */
   render: function(editor, resource) {
diff --git a/browser/devtools/itchpad/lib/project.js b/browser/devtools/itchpad/lib/project.js
--- a/browser/devtools/itchpad/lib/project.js
+++ b/browser/devtools/itchpad/lib/project.js
@@ -198,17 +198,17 @@ var Project = Class({
     this.localStores.set(store.path, store);
 
     // Originally StoreCollection.addStore
     on(this, store, "resource-added", (resource) => {
       emit(this, "resource-added", resource);
     });
     on(this, store, "resource-removed", (resource) => {
       emit(this, "resource-removed", resource);
-    })
+    });
 
     emit(this, "store-added", store);
   },
 
 
   /**
    * Remove all of the Stores belonging to the project.
    */
diff --git a/browser/devtools/itchpad/lib/shells.js b/browser/devtools/itchpad/lib/shells.js
--- a/browser/devtools/itchpad/lib/shells.js
+++ b/browser/devtools/itchpad/lib/shells.js
@@ -75,21 +75,22 @@ var ShellDeck = Class({
 
     this.shells = new Map();
 
     this._deactivateEditor = null;
   },
 
   open: function(defaultResource) {
     let shell = this.shellFor(defaultResource);
+    console.log("Default resource: ", defaultResource.path);
     if (!shell) {
       shell = this.createShell(defaultResource);
-      this.shells.set(defaultResource, shell);
+      // this.shells.set(defaultResource, shell);
     }
-    this.selectShell(shell);
+    // this.selectShell(shell);
     return shell;
   },
 
   /**
    * Find a shell for a resource
    *
    * @param Resource resource
    *                 The file to be opened.
@@ -120,16 +121,17 @@ var ShellDeck = Class({
   get currentEditor() {
     let shell = this.currentShell;
     return shell ? shell.editor : shell;
   },
 
   createShell: function(defaultResource) {
     let shell = Shell(this.host, defaultResource);
     shell.on("editor-created", (editor) => {
+      console.log("THINGS ARE HAPPENING NOW");
       this.shells.set(shell.resource, shell);
       emit(this, "editor-created", editor);
     });
     shell.on("editor-activated", () => {
       if (this.currentShell === shell) {
         this.selectShell(shell);
       }
     });
diff --git a/browser/devtools/itchpad/lib/tree.js b/browser/devtools/itchpad/lib/tree.js
--- a/browser/devtools/itchpad/lib/tree.js
+++ b/browser/devtools/itchpad/lib/tree.js
@@ -248,23 +248,24 @@ var TreeView = Class({
     this.children.appendChild(placeholder);
     this.roots.add(model.root);
     model.root.refresh().then(root => {
       if (this._destroyed || !this.models.has(model)) {
         // model may have been removed during the initial refresh.
         // In this case, do not import the resource or add to DOM, just leave it be.
         return;
       }
+      console.log("NOT DESTROYED YET", root);
       let container = this.importResource(root);
       container.line.classList.add("side-menu-widget-group-title");
       container.line.setAttribute("theme", "dark");
       this.selectContainer(container);
 
-      this.children.insertBefore(container.elt, placeholder);
-      this.children.removeChild(placeholder);
+      // this.children.insertBefore(container.elt, placeholder);
+      // this.children.removeChild(placeholder);
     });
   },
 
   removeModel: function(model) {
     this.models.delete(model);
     this.removeResource(model.root);
   },
 
