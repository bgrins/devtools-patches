# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  abe889a75c663d69dd51f40beb45cbaa06a83b40
Add a third TP test

diff --git a/browser/base/content/test/general/browser.ini b/browser/base/content/test/general/browser.ini
--- a/browser/base/content/test/general/browser.ini
+++ b/browser/base/content/test/general/browser.ini
@@ -423,16 +423,20 @@ run-if = e10s
 [browser_trackingUI_1.js]
 support-files =
   trackingPage.html
   benignPage.html
 [browser_trackingUI_2.js]
 support-files =
   trackingPage.html
   benignPage.html
+[browser_trackingUI_3.js]
+support-files =
+  trackingPage.html
+  benignPage.html
 [browser_typeAheadFind.js]
 skip-if = buildapp == 'mulet'
 [browser_unknownContentType_title.js]
 [browser_unloaddialogs.js]
 skip-if = e10s # Bug 1100700 - test relies on unload event firing on closed tabs, which it doesn't
 [browser_urlHighlight.js]
 [browser_urlbarAutoFillTrimURLs.js]
 [browser_urlbarCopying.js]
diff --git a/browser/base/content/test/general/browser_trackingUI_3.js b/browser/base/content/test/general/browser_trackingUI_3.js
new file mode 100644
--- /dev/null
+++ b/browser/base/content/test/general/browser_trackingUI_3.js
@@ -0,0 +1,66 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+// Test that the tracking protection buttons for enabling / disabling
+// for a page work correctly.
+
+let PREF = "privacy.trackingprotection.enabled";
+let BENIGN_PAGE = "http://tracking.example.org/browser/browser/base/content/test/general/benignPage.html";
+let TRACKING_PAGE = "http://tracking.example.org/browser/browser/base/content/test/general/trackingPage.html";
+let TrackingProtection = null;
+
+registerCleanupFunction(function() {
+  TrackingProtection = null;
+  Services.prefs.clearUserPref(PREF);
+  gBrowser.removeCurrentTab();
+});
+
+function clickButton(sel) {
+  let win = gBrowser.ownerGlobal;
+  let evt = new win.Event("command");
+  let el = win.document.querySelector(sel);
+  el.dispatchEvent(evt);
+}
+
+function testTrackingPageWhitelisted() {
+  ok (TrackingProtection.content.hasAttribute("block-disabled"), "blocking is disabled");
+  ok (!TrackingProtection.content.hasAttribute("block-active"), "blocking is not active");
+}
+
+function testTrackingPage() {
+  ok (!TrackingProtection.content.hasAttribute("block-disabled"), "blocking not disabled");
+  ok (TrackingProtection.content.hasAttribute("block-active"), "blocking is active");
+}
+
+add_task(function* () {
+  yield updateTrackingProtectionDatabase();
+
+  let tab = gBrowser.selectedTab = gBrowser.addTab();
+
+  TrackingProtection = gBrowser.ownerGlobal.TrackingProtection;
+  ok (TrackingProtection, "Functionality is attached to the browser window");
+  is (TrackingProtection.enabled, Services.prefs.getBoolPref(PREF),
+    "TP.enabled is based on the original pref value");
+
+  Services.prefs.setBoolPref(PREF, true);
+  ok (TrackingProtection.enabled, "TP is enabled after setting the pref");
+
+  info("Load a test page containing tracking elements");
+  yield promiseTabLoadEvent(tab, TRACKING_PAGE);
+  testTrackingPage();
+
+  info("Disable TP for the page (which reloads the page)");
+  clickButton("#tracking-action-unblock");
+
+  info("Wait for tab to reload following TP white-listing");
+  yield promiseTabLoadEvent(tab);
+  testTrackingPageWhitelisted();
+
+  info("Re-enable TP for the page (which reloads the page)");
+  clickButton("#tracking-action-block");
+
+  info("Wait for tab to reload following TP black-listing");
+  yield promiseTabLoadEvent(tab);
+  testTrackingPage();
+});
