# vim: se ft=diff :
# HG changeset patch
# User Jan Odvarko <odvarko@gmail.com>
# Date 1462290078 -7200
Bug 1264671 - HTML replacement for Notification Bar; r=bgrins

diff --git a/devtools/client/framework/toolbox.js b/devtools/client/framework/toolbox.js
--- a/devtools/client/framework/toolbox.js
+++ b/devtools/client/framework/toolbox.js
@@ -25,16 +25,19 @@ var Telemetry = require("devtools/client
 var HUDService = require("devtools/client/webconsole/hudservice");
 var viewSource = require("devtools/client/shared/view-source");
 var { attachThread, detachThread } = require("./attach-thread");
 
 Cu.import("resource://devtools/client/scratchpad/scratchpad-manager.jsm");
 Cu.import("resource://devtools/client/shared/DOMHelpers.jsm");
 Cu.import("resource://gre/modules/Task.jsm");
 
+const BrowserLoaderModule = {};
+Cu.import("resource://devtools/client/shared/browser-loader.js", BrowserLoaderModule);
+
 loader.lazyGetter(this, "toolboxStrings", () => {
   const properties = "chrome://devtools/locale/toolbox.properties";
   const bundle = Services.strings.createBundle(properties);
   return (name, ...args) => {
     try {
       if (!args.length) {
         return bundle.GetStringFromName(name);
       }
@@ -361,19 +364,39 @@ Toolbox.prototype = {
       // Prevent reloading the document when the toolbox is opened in a tab
       let location = iframe.contentWindow.location.href;
       if (!location.startsWith(this._URL)) {
         iframe.setAttribute("src", this._URL);
       } else {
         // Update the URL so that onceDOMReady watch for the right url.
         this._URL = location;
       }
+
+      let require = BrowserLoaderModule.BrowserLoader({
+        window: this.doc.defaultView,
+        useOnlyShared: true
+      }).require;
+
+      this.React = require("devtools/client/shared/vendor/react");
+      this.ReactDOM = require("devtools/client/shared/vendor/react-dom");
+
+      let { NotificationBox, PriorityLevels } =
+        require("devtools/client/shared/components/notification-box");
+
+      this.NotificationBox = this.React.createFactory(NotificationBox);
+      this.PriorityLevels = PriorityLevels;
+
       iframe.setAttribute("aria-label", toolboxStrings("toolbox.label"));
       let domHelper = new DOMHelpers(iframe.contentWindow);
-      domHelper.onceDOMReady(() => domReady.resolve(), this._URL);
+      domHelper.onceDOMReady(() => {
+        // Build the Notification box as soon as the DOM is ready.
+        this._buildNotificationBox();
+        domReady.resolve();
+      }, this._URL);
+
       // Optimization: fire up a few other things before waiting on
       // the iframe being ready (makes startup faster)
 
       // Load the toolbox-level actor fronts and utilities now
       yield this._target.makeRemote();
 
       // Attach the thread
       this._threadClient = yield attachThread(this);
@@ -781,16 +804,28 @@ Toolbox.prototype = {
     if (toolDefinition.onkey &&
         ((this.currentToolId === toolId) ||
           (toolId == "webconsole" && this.splitConsole))) {
       toolDefinition.onkey(this.getCurrentPanel(), this);
     }
   },
 
   /**
+   * Build the notification box. Called every timethe host changes.
+   */
+  _buildNotificationBox: function() {
+    let box = this.doc.getElementById("toolbox-notificationbox");
+
+    // Render NotificationBox and assigne priority levels to it.
+    this.notificationBox = Object.assign(
+      this.ReactDOM.render(this.NotificationBox({}), box),
+      this.PriorityLevels);
+  },
+
+  /**
    * Build the buttons for changing hosts. Called every time
    * the host changes.
    */
   _buildDockButtons: function() {
     let dockBox = this.doc.getElementById("toolbox-dock-buttons");
 
     while (dockBox.firstChild) {
       dockBox.removeChild(dockBox.firstChild);
@@ -1985,22 +2020,31 @@ Toolbox.prototype = {
       this._inspector = null;
       this._highlighter = null;
       this._selection = null;
       this._walker = null;
     }.bind(this));
   },
 
   /**
-   * Get the toolbox's notification box
+   * Get the toolbox's container box
    *
-   * @return The notification box element.
+   * @return The container box element.
+   */
+  getToolboxContainer: function() {
+    return this.doc.getElementById("toolbox-container");
+  },
+
+  /**
+   * Get the toolbox's notification component
+   *
+   * @return The notification box component.
    */
   getNotificationBox: function() {
-    return this.doc.getElementById("toolbox-notificationbox");
+    return this.notificationBox;
   },
 
   /**
    * Destroy the current host, and remove event listeners from its frame.
    *
    * @return {promise} to be resolved when the host is destroyed.
    */
   destroyHost: function() {
@@ -2055,16 +2099,18 @@ Toolbox.prototype = {
 
         outstanding.push(panel.destroy());
       } catch (e) {
         // We don't want to stop here if any panel fail to close.
         console.error("Panel " + id + ":", e);
       }
     }
 
+    this.React = this.ReactDOM = this.NotificationBox = null;
+
     // Now that we are closing the toolbox we can re-enable the cache settings
     // and disable the service workers testing settings for the current tab.
     // FF41+ automatically cleans up state in actor on disconnect.
     if (this.target.activeTab && !this.target.activeTab.traits.noTabReconfigureOnClose) {
       this.target.activeTab.reconfigure({
         "cacheDisabled": false,
         "serviceWorkersTestingEnabled": false
       });
diff --git a/devtools/client/framework/toolbox.xul b/devtools/client/framework/toolbox.xul
--- a/devtools/client/framework/toolbox.xul
+++ b/devtools/client/framework/toolbox.xul
@@ -1,13 +1,14 @@
 <?xml version="1.0" encoding="utf-8"?>
 <!-- This Source Code Form is subject to the terms of the Mozilla Public
    - License, v. 2.0. If a copy of the MPL was not distributed with this
    - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
 <?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
+<?xml-stylesheet href="resource://devtools/client/shared/components/notification-box.css" type="text/css"?>
 
 <?xul-overlay href="chrome://global/content/editMenuOverlay.xul"?>
 
 <!DOCTYPE window [
 <!ENTITY % toolboxDTD SYSTEM "chrome://devtools/locale/toolbox.dtd" >
 %toolboxDTD;
 <!ENTITY % editMenuStrings SYSTEM "chrome://global/locale/editMenuOverlay.dtd">
 %editMenuStrings;
@@ -106,17 +107,18 @@
       <menuitem id="cMenu_copy"/>
       <menuitem id="cMenu_paste"/>
       <menuitem id="cMenu_delete"/>
       <menuseparator/>
       <menuitem id="cMenu_selectAll"/>
     </menupopup>
   </popupset>
 
-  <notificationbox id="toolbox-notificationbox" flex="1">
+  <vbox id="toolbox-container" flex="1">
+    <div xmlns="http://www.w3.org/1999/xhtml" id="toolbox-notificationbox"/>
     <toolbar class="devtools-tabbar">
       <hbox id="toolbox-picker-container" />
       <hbox id="toolbox-tabs" flex="1" role="tablist" />
       <hbox id="toolbox-buttons" pack="end">
         <toolbarbutton id="command-button-frames"
                        class="command-button command-button-invertable devtools-toolbarbutton"
                        tooltiptext="&toolboxFramesTooltip;"
                        type="menu"
@@ -142,10 +144,10 @@
            height set to a small value without flexing to fill up extra
            space. There must be a flex on both to ensure that the console
            panel itself is sized properly -->
       <box id="toolbox-deck" flex="1000" minheight="75" />
       <splitter id="toolbox-console-splitter" class="devtools-horizontal-splitter" hidden="true" />
       <box minheight="75" flex="1" id="toolbox-panel-webconsole" collapsed="true" />
     </vbox>
     <tooltip id="aHTMLTooltip" page="true" />
-  </notificationbox>
+  </vbox>
 </window>
diff --git a/devtools/client/shared/components/moz.build b/devtools/client/shared/components/moz.build
--- a/devtools/client/shared/components/moz.build
+++ b/devtools/client/shared/components/moz.build
@@ -7,12 +7,14 @@
 DIRS += [
     'reps',
     'tree'
 ]
 
 DevToolsModules(
     'frame.js',
     'h-split-box.js',
+    'notification-box.css',
+    'notification-box.js',
     'tree.js',
 )
 
 MOCHITEST_CHROME_MANIFESTS += ['test/mochitest/chrome.ini']
diff --git a/devtools/client/shared/components/notification-box.css b/devtools/client/shared/components/notification-box.css
new file mode 100644
--- /dev/null
+++ b/devtools/client/shared/components/notification-box.css
@@ -0,0 +1,92 @@
+/* vim:set ts=2 sw=2 sts=2 et: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/* Layout */
+
+.notificationbox .notificationInner {
+  display: flex;
+  flex-direction: row;
+}
+
+.notificationbox .details {
+  flex-grow: 1;
+  display: flex;
+  flex-direction: row;
+  align-items: center;
+}
+
+.notificationbox .notification-button {
+  text-align: right;
+}
+
+.notificationbox .messageText {
+  flex-grow: 1;
+}
+
+.notificationbox .details:-moz-dir(rtl)
+.notificationbox .notificationInner:-moz-dir(rtl) {
+  flex-direction: row-reverse;
+}
+
+/* Style */
+
+.notificationbox .notification {
+  color: InfoText;
+  background-color: InfoBackground;
+  text-shadow: none;
+  border-top: 1px solid ThreeDShadow;
+  border-bottom: 1px solid ThreeDShadow;
+}
+
+.notificationbox .notification[data-type="info"] {
+  color: -moz-DialogText;
+  background-color: -moz-Dialog;
+}
+
+.notificationbox .notification[data-type="critical"] {
+  color: white;
+  background-image: linear-gradient(rgb(212,0,0), rgb(152,0,0));
+}
+
+.notificationbox .messageImage {
+  display: inline-block;
+  width: 16px;
+  height: 16px;
+  margin: 6px;
+}
+
+/* Default icons for notifications */
+
+.notificationbox .messageImage[data-type="info"] {
+  background-image: url("chrome://global/skin/icons/information-16.png");
+}
+
+.notificationbox .messageImage[data-type="warning"] {
+  background-image: url("chrome://global/skin/icons/warning-16.png");
+}
+
+.notificationbox .messageImage[data-type="critical"] {
+  background-image: url("chrome://global/skin/icons/error-16.png");
+}
+
+/* Close button */
+
+.notificationbox .messageCloseButton {
+  width: 20px;
+  height: 20px;
+  margin: 4px;
+  margin-inline-end: 8px;
+  background-image: url("chrome://global/skin/icons/close.png");
+  background-position: 0 0;
+  background-color: transparent;
+}
+
+.notificationbox .messageCloseButton:hover {
+  background-position: -20px 0;
+}
+
+.notificationbox .messageCloseButton:active {
+  background-position: -40px 0;
+}
diff --git a/devtools/client/shared/components/notification-box.js b/devtools/client/shared/components/notification-box.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/shared/components/notification-box.js
@@ -0,0 +1,251 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const React = require("devtools/client/shared/vendor/react");
+const Immutable = require("devtools/client/shared/vendor/immutable");
+
+// Shortcuts
+const { PropTypes, createClass, DOM } = React;
+const { div, span, button } = DOM;
+
+// Priority Levels
+const PriorityLevels = {
+  PRIORITY_INFO_LOW: 1,
+  PRIORITY_INFO_MEDIUM: 2,
+  PRIORITY_INFO_HIGH: 3,
+  PRIORITY_WARNING_LOW: 4,
+  PRIORITY_WARNING_MEDIUM: 5,
+  PRIORITY_WARNING_HIGH: 6,
+  PRIORITY_CRITICAL_LOW: 7,
+  PRIORITY_CRITICAL_MEDIUM: 8,
+  PRIORITY_CRITICAL_HIGH: 9,
+  PRIORITY_CRITICAL_BLOCK: 10,
+};
+
+/**
+ * This component represents Notification Box - HTML alternative for
+ * <xul:notifictionbox> binding.
+ *
+ * See also MDN for more info about <xul:notificationbox>:
+ * https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/notificationbox
+ */
+var NotificationBox = createClass({
+  propTypes: {
+    // List of notifications appended into the box.
+    notifications: PropTypes.arrayOf(PropTypes.shape({
+      // label to appear on the notification.
+      label: PropTypes.string.isRequired,
+
+      // Value used to identify the notification
+      value: PropTypes.string.isRequired,
+
+      // URL of image to appear on the notification. If "" then an icon
+      // appropriate for the priority level is used.
+      image: PropTypes.string.isRequired,
+
+      // Notification priority; see Priority Levels.
+      priority: PropTypes.number.isRequired,
+
+      // Array of button descriptions to appear on the notification.
+      buttons: PropTypes.arrayOf(PropTypes.shape({
+        // Function to be called when the button is activated.
+        // This function is passed three arguments:
+        // 1) the NotificationBox component the button is associated with
+        // 2) the button description as passed to appendNotification.
+        // 3) the element which was the target of the button press event.
+        // If the return value from this function is not True, then the
+        // notification is closed. The notification is also not closed
+        // if an error is thrown.
+        callback: PropTypes.func.isRequired,
+
+        // The label to appear on the button.
+        label: PropTypes.string.isRequired,
+
+        // The accesskey attribute set on the <button> element.
+        accesskey: PropTypes.string,
+      })),
+
+      // A function to call to notify you of interesting things that happen
+      // with the notification box.
+      eventCallback: PropTypes.func,
+    })),
+  },
+
+  displayName: "NotificationBox",
+
+  getInitialState() {
+    return {
+      notifications: new Immutable.OrderedMap()
+    };
+  },
+
+  /**
+   * Create a new notification and display it. If another notification is
+   * already present with a higher priority, the new notification will be
+   * added behind it. See `propTypes` for arguments description.
+   */
+  appendNotification(label, value, image, priority, buttons = [],
+    eventCallback) {
+    // Priority level must be within expected interval
+    // (see priority levels at the top of this file).
+    if (priority < PriorityLevels.PRIORITY_INFO_LOW ||
+      priority > PriorityLevels.PRIORITY_CRITICAL_BLOCK) {
+      throw new Error("Invalid notification priority " + priority);
+    }
+
+    // Custom image URL is not supported yet.
+    if (image) {
+      throw new Error("Custom image URL is not supported yet");
+    }
+
+    let type = "warning";
+    if (priority >= PriorityLevels.PRIORITY_CRITICAL_LOW) {
+      type = "critical";
+    } else if (priority <= PriorityLevels.PRIORITY_INFO_HIGH) {
+      type = "info";
+    }
+
+    let notifications = this.state.notifications.set(value, {
+      label: label,
+      value: value,
+      image: image,
+      priority: priority,
+      type: type,
+      buttons: buttons,
+      eventCallback: eventCallback,
+    });
+
+    // High priorities must be on top.
+    notifications = notifications.sortBy((val, key) => {
+      return -val.priority;
+    });
+
+    this.setState({
+      notifications: notifications
+    });
+  },
+
+  /**
+   * Remove specific notification from the list.
+   */
+  removeNotification(notification) {
+    this.close(this.state.notifications.get(notification.value));
+  },
+
+  /**
+   * Returns an object that represents a notification. It can be
+   * used to close it.
+   */
+  getNotificationWithValue(value) {
+    let notification = this.state.notifications.get(value);
+    if (!notification) {
+      return null;
+    }
+
+    // Return an object that can be used to remove the notification
+    // later (using `removeNotification` method) or directly close it.
+    return Object.assign({}, notification, {
+      close: () => {
+        this.close(notification);
+      }
+    });
+  },
+
+  getCurrentNotification() {
+    return this.state.notifications.first();
+  },
+
+  /**
+   * Close specified notification.
+   */
+  close(notification) {
+    if (!notification) {
+      return;
+    }
+
+    if (notification.eventCallback) {
+      notification.eventCallback("removed");
+    }
+
+    this.setState({
+      notifications: this.state.notifications.remove(notification.value)
+    });
+  },
+
+  /**
+   * Render a button. A notification can have a set of custom buttons.
+   * These are used to execute custom callback.
+   */
+  renderButton(props, notification) {
+    let onClick = event => {
+      if (props.callback) {
+        let result = props.callback(this, props, event.target);
+        if (!result) {
+          this.close(notification);
+        }
+        event.stopPropagation();
+      }
+    };
+
+    return (
+      button({
+        key: props.label,
+        className: "notification-button",
+        accesskey: props.accesskey,
+        onClick: onClick},
+        props.label
+      )
+    );
+  },
+
+  /**
+   * Render a notification.
+   */
+  renderNotification(notification) {
+    return (
+      div({
+        key: notification.value,
+        className: "notification",
+        "data-type": notification.type},
+        div({className: "notificationInner"},
+          div({className: "details"},
+            div({
+              className: "messageImage",
+              "data-type": notification.type}),
+            span({className: "messageText"},
+              notification.label
+            ),
+            notification.buttons.map(props =>
+              this.renderButton(props, notification)
+            )
+          ),
+          div({
+            className: "messageCloseButton",
+            onClick: this.close.bind(this, notification)}
+          )
+        )
+      )
+    );
+  },
+
+  /**
+   * Render the top (highest priority) notification. Only one
+   * notification is rendered at a time.
+   */
+  render() {
+    let notification = this.state.notifications.first();
+    let content = notification ?
+      this.renderNotification(notification) :
+      null;
+
+    return div({className: "notificationbox"},
+      content
+    );
+  },
+});
+
+module.exports.NotificationBox = NotificationBox;
+module.exports.PriorityLevels = PriorityLevels;
diff --git a/devtools/client/styleeditor/test/browser_styleeditor_missing_stylesheet.js b/devtools/client/styleeditor/test/browser_styleeditor_missing_stylesheet.js
--- a/devtools/client/styleeditor/test/browser_styleeditor_missing_stylesheet.js
+++ b/devtools/client/styleeditor/test/browser_styleeditor_missing_stylesheet.js
@@ -16,15 +16,15 @@ add_task(function* () {
   // that means UA stylesheets are shown. So we avoid hardcoding the number of
   // stylesheets here.
   ok(ui.editors.length, "The UI contains style sheets.");
 
   let rootEl = panel.panelWindow.document.getElementById("style-editor-chrome");
   ok(!rootEl.classList.contains("loading"), "The loading indicator is hidden");
 
   let notifBox = toolbox.getNotificationBox();
-  let notif = notifBox.currentNotification;
+  let notif = notifBox.getCurrentNotification();
   ok(notif, "The notification box contains a message");
   ok(notif.label.indexOf("Style sheet could not be loaded") !== -1,
     "The error message is the correct one");
   ok(notif.label.indexOf("missing-stylesheet.css") !== -1,
     "The error message contains the missing stylesheet's URL");
 });
