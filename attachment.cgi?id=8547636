# HG changeset patch
# User Patrick Brosset <pbrosset@mozilla.com>
# Parent  34b9146f3650106052e6dd928e60bddee87afafa
Bug 1034512 - 2 - Make cubicbezier widget tests run in a toolbox host rather than content page

diff --git a/browser/devtools/shared/test/browser_cubic-bezier-01.js b/browser/devtools/shared/test/browser_cubic-bezier-01.js
--- a/browser/devtools/shared/test/browser_cubic-bezier-01.js
+++ b/browser/devtools/shared/test/browser_cubic-bezier-01.js
@@ -3,22 +3,25 @@
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
 // Tests that the CubicBezierWidget generates content in a given parent node
 
 const TEST_URI = "chrome://browser/content/devtools/cubic-bezier-frame.xhtml";
 const {CubicBezierWidget} = devtools.require("devtools/shared/widgets/CubicBezierWidget");
+const {DOMHelpers} = Cu.import("resource:///modules/devtools/DOMHelpers.jsm", {});
+const {Hosts} = devtools.require("devtools/framework/toolbox-hosts");
 
-let test = Task.async(function*() {
-  yield promiseTab(TEST_URI);
+add_task(function*() {
+  yield promiseTab("about:blank");
+  let [host, win, doc] = yield createHost("bottom", TEST_URI);
 
   info("Checking that the markup is created in the parent");
-  let container = content.document.querySelector("#container");
+  let container = doc.querySelector("#container");
   let w = new CubicBezierWidget(container);
 
   ok(container.querySelector(".coordinate-plane"),
     "The coordinate plane has been added");
   let buttons = container.querySelectorAll("button");
   is(buttons.length, 2,
     "The 2 control points have been added");
   is(buttons[0].className, "control-point");
@@ -26,11 +29,11 @@ let test = Task.async(function*() {
   is(buttons[1].className, "control-point");
   is(buttons[1].id, "P2");
   ok(container.querySelector("canvas"), "The curve canvas has been added");
 
   info("Destroying the widget");
   w.destroy();
   is(container.children.length, 0, "All nodes have been removed");
 
+  host.destroy();
   gBrowser.removeCurrentTab();
-  finish();
 });
diff --git a/browser/devtools/shared/test/browser_cubic-bezier-02.js b/browser/devtools/shared/test/browser_cubic-bezier-02.js
--- a/browser/devtools/shared/test/browser_cubic-bezier-02.js
+++ b/browser/devtools/shared/test/browser_cubic-bezier-02.js
@@ -4,67 +4,66 @@
 
 "use strict";
 
 // Tests the CubicBezierWidget events
 
 const TEST_URI = "chrome://browser/content/devtools/cubic-bezier-frame.xhtml";
 const {CubicBezierWidget, PREDEFINED} =
   devtools.require("devtools/shared/widgets/CubicBezierWidget");
+const {DOMHelpers} = Cu.import("resource:///modules/devtools/DOMHelpers.jsm", {});
+const {Hosts} = devtools.require("devtools/framework/toolbox-hosts");
 
-let test = Task.async(function*() {
-  yield promiseTab(TEST_URI);
+add_task(function*() {
+  yield promiseTab("about:blank");
+  let [host, win, doc] = yield createHost("bottom", TEST_URI);
 
-  let container = content.document.querySelector("#container");
+  let container = doc.querySelector("#container");
   let w = new CubicBezierWidget(container, PREDEFINED.linear);
 
-  yield pointsCanBeDragged(w);
-  yield curveCanBeClicked(w);
-  yield pointsCanBeMovedWithKeyboard(w);
+  yield pointsCanBeDragged(w, win, doc);
+  yield curveCanBeClicked(w, win, doc);
+  yield pointsCanBeMovedWithKeyboard(w, win, doc);
 
   w.destroy();
+  host.destroy();
   gBrowser.removeCurrentTab();
-  finish();
 });
 
-function* pointsCanBeDragged(widget) {
+function* pointsCanBeDragged(widget, win, doc) {
   info("Checking that the control points can be dragged with the mouse");
 
   info("Listening for the update event");
   let onUpdated = widget.once("updated");
 
   info("Generating a mousedown/move/up on P1");
   widget._onPointMouseDown({target: widget.p1});
-  EventUtils.synthesizeMouse(content.document.documentElement, 0, 100,
-    {type: "mousemove"}, content.window);
-  EventUtils.synthesizeMouse(content.document.documentElement, 0, 100,
-    {type: "mouseup"}, content.window);
+  doc.onmousemove({pageX: 0, pageY: 100});
+  doc.onmouseup();
 
   let bezier = yield onUpdated;
   ok(true, "The widget fired the updated event");
   ok(bezier, "The updated event contains a bezier argument");
   is(bezier.P1[0], 0, "The new P1 time coordinate is correct");
   is(bezier.P1[1], 1, "The new P1 progress coordinate is correct");
 
   info("Listening for the update event");
   onUpdated = widget.once("updated");
 
   info("Generating a mousedown/move/up on P2");
   widget._onPointMouseDown({target: widget.p2});
-  EventUtils.synthesizeMouse(content.document.documentElement, 200, 300,
-    {type: "mousemove"}, content.window);
-  EventUtils.synthesizeMouse(content.document.documentElement, 200, 300,
-    {type: "mouseup"}, content.window);
+  doc.onmousemove({pageX: 200, pageY: 300});
+  doc.onmouseup();
 
   bezier = yield onUpdated;
   is(bezier.P2[0], 1, "The new P2 time coordinate is correct");
   is(bezier.P2[1], 0, "The new P2 progress coordinate is correct");
 }
 
-function* curveCanBeClicked(widget) {
+function* curveCanBeClicked(widget, win, doc) {
   info("Checking that clicking on the curve moves the closest control point");
 
   info("Listening for the update event");
   let onUpdated = widget.once("updated");
 
   info("Click close to P1");
   widget._onCurveClick({pageX: 50, pageY: 150});
 
@@ -83,17 +82,17 @@ function* curveCanBeClicked(widget) {
 
   bezier = yield onUpdated;
   is(bezier.P2[0], 0.75, "The new P2 time coordinate is correct");
   is(bezier.P2[1], 0.25, "The new P2 progress coordinate is correct");
   is(bezier.P1[0], 0.25, "P1 time coordinate remained unchanged");
   is(bezier.P1[1], 0.75, "P1 progress coordinate remained unchanged");
 }
 
-function* pointsCanBeMovedWithKeyboard(widget) {
+function* pointsCanBeMovedWithKeyboard(widget, win, doc) {
   info("Checking that points respond to keyboard events");
 
   info("Moving P1 to the left");
   let onUpdated = widget.once("updated");
   widget._onPointKeyDown(getKeyEvent(widget.p1, 37));
   let bezier = yield onUpdated;
   is(bezier.P1[0], 0.235, "The new P1 time coordinate is correct");
   is(bezier.P1[1], 0.75, "The new P1 progress coordinate is correct");
diff --git a/browser/devtools/shared/test/browser_cubic-bezier-03.js b/browser/devtools/shared/test/browser_cubic-bezier-03.js
--- a/browser/devtools/shared/test/browser_cubic-bezier-03.js
+++ b/browser/devtools/shared/test/browser_cubic-bezier-03.js
@@ -4,29 +4,32 @@
 
 "use strict";
 
 // Tests that coordinates can be changed programatically in the CubicBezierWidget
 
 const TEST_URI = "chrome://browser/content/devtools/cubic-bezier-frame.xhtml";
 const {CubicBezierWidget, PREDEFINED} =
   devtools.require("devtools/shared/widgets/CubicBezierWidget");
+const {DOMHelpers} = Cu.import("resource:///modules/devtools/DOMHelpers.jsm", {});
+const {Hosts} = devtools.require("devtools/framework/toolbox-hosts");
 
-let test = Task.async(function*() {
-  yield promiseTab(TEST_URI);
+add_task(function*() {
+  yield promiseTab("about:blank");
+  let [host, win, doc] = yield createHost("bottom", TEST_URI);
 
-  let container = content.document.querySelector("#container");
+  let container = doc.querySelector("#container");
   let w = new CubicBezierWidget(container, PREDEFINED.linear);
 
   yield coordinatesCanBeChangedByProvidingAnArray(w);
   yield coordinatesCanBeChangedByProvidingAValue(w);
 
   w.destroy();
+  host.destroy();
   gBrowser.removeCurrentTab();
-  finish();
 });
 
 function* coordinatesCanBeChangedByProvidingAnArray(widget) {
   info("Listening for the update event");
   let onUpdated = widget.once("updated");
 
   info("Setting new coordinates");
   widget.coordinates = [0,1,1,0];
