# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  bbf9e1cbd5ee0d532feb52d03568ea67fc40d1b5

diff --git a/remote/domains/content/Page.jsm b/remote/domains/content/Page.jsm
--- a/remote/domains/content/Page.jsm
+++ b/remote/domains/content/Page.jsm
@@ -22,16 +22,177 @@ XPCOMUtils.defineLazyServiceGetter(
 );
 
 const {
   LOAD_FLAGS_BYPASS_CACHE,
   LOAD_FLAGS_BYPASS_PROXY,
   LOAD_FLAGS_NONE,
 } = Ci.nsIWebNavigation;
 
+const { ExtensionUtils } = ChromeUtils.import(
+  "resource://gre/modules/ExtensionUtils.jsm"
+);
+XPCOMUtils.defineLazyGlobalGetters(this, ["InspectorUtils"]);
+
+let contentDOMState = new WeakMap();
+
+let nodeFilterConstants = {
+  FILTER_ACCEPT: 1,
+  FILTER_REJECT: 2,
+  FILTER_SKIP: 3,
+
+  SHOW_ALL: 0xffffffff,
+  SHOW_ELEMENT: 0x00000001,
+  SHOW_ATTRIBUTE: 0x00000002,
+  SHOW_TEXT: 0x00000004,
+  SHOW_CDATA_SECTION: 0x00000008,
+  SHOW_ENTITY_REFERENCE: 0x00000010,
+  SHOW_ENTITY: 0x00000020,
+  SHOW_PROCESSING_INSTRUCTION: 0x00000040,
+  SHOW_COMMENT: 0x00000080,
+  SHOW_DOCUMENT: 0x00000100,
+  SHOW_DOCUMENT_TYPE: 0x00000200,
+  SHOW_DOCUMENT_FRAGMENT: 0x00000400,
+  SHOW_NOTATION: 0x00000800,
+};
+
+// TODO: Remove some of these and add others like aria-*
+const WHITELISTED_ATTRS = new Set([
+  "accept",
+  "accesskey",
+  "align",
+  "allow",
+  "alt",
+  "async",
+  "autocapitalize",
+  "autocomplete",
+  "autofocus",
+  "autoplay",
+  "background",
+  "Note",
+  "bgcolor",
+  "border",
+  "buffered",
+  "capture",
+  "charset",
+  "checked",
+  "cite",
+  "class",
+  "code",
+  "codebase",
+  "color",
+  "cols",
+  "colspan",
+  "content",
+  "contenteditable",
+  "contextmenu",
+  "controls",
+  "coords",
+  "crossorigin",
+  "csp",
+  "data",
+  "data",
+  "datetime",
+  "decoding",
+  "default",
+  "defer",
+  "dir",
+  "dirname",
+  "disabled",
+  "download",
+  "draggable",
+  "dropzone",
+  "enctype",
+  "enterkeyhint",
+  "for",
+  "form",
+  "formaction",
+  "formenctype",
+  "formmethod",
+  "formnovalidate",
+  "formtarget",
+  "headers",
+  "height",
+  "hidden",
+  "high",
+  "href",
+  "hreflang",
+  "http",
+  "icon",
+  // "id",
+  "importance",
+  "integrity",
+  "intrinsicsize",
+  "inputmode",
+  "ismap",
+  "itemprop",
+  "keytype",
+  "kind",
+  "label",
+  "lang",
+  "language",
+  "loading",
+  "list",
+  "loop",
+  "low",
+  "manifest",
+  "max",
+  "maxlength",
+  "minlength",
+  "media",
+  "method",
+  "min",
+  "multiple",
+  "muted",
+  "name",
+  "novalidate",
+  "open",
+  "optimum",
+  "pattern",
+  "ping",
+  "placeholder",
+  "poster",
+  "preload",
+  "radiogroup",
+  "readonly",
+  "referrerpolicy",
+  "rel",
+  "required",
+  "reversed",
+  "rows",
+  "rowspan",
+  "sandbox",
+  "scope",
+  "scoped",
+  "selected",
+  "shape",
+  "size",
+  "sizes",
+  "slot",
+  "span",
+  "spellcheck",
+  /*"src",
+  "srcdoc",
+  "srclang",
+  "srcset",*/
+  "start",
+  "step",
+  // "style",
+  "summary",
+  "tabindex",
+  "target",
+  "title",
+  "translate",
+  "type",
+  "usemap",
+  "value",
+  "width",
+  "wrap",
+]);
+
 class Page extends ContentProcessDomain {
   constructor(session) {
     super(session);
 
     this.enabled = false;
     this.lifecycleEnabled = false;
     // script id => { source, worldName }
     this.scriptsToEvaluateOnLoad = new Map();
@@ -128,16 +289,344 @@ class Page extends ContentProcessDomain 
     let flags = LOAD_FLAGS_NONE;
     if (ignoreCache) {
       flags |= LOAD_FLAGS_BYPASS_CACHE;
       flags |= LOAD_FLAGS_BYPASS_PROXY;
     }
     this.docShell.reload(flags);
   }
 
+  _bakedDOM() {
+    // console.log("Baked", this.page())
+    let win = this.content;
+    let doc = win.document;
+    let DOMState = contentDOMState.get(this.content);
+    if (!contentDOMState.has(this.content)) {
+      DOMState = {
+        $idsToNodes: new Map(),
+        $nodesToIds: new WeakMap(),
+      };
+      contentDOMState.set(this.content, DOMState);
+
+      // We are purposely setting a global here so we can more easily dig
+      // into the state from other domains on click. I'm sure there's a much
+      // better way to do this (like storing this state in a shared jsm)..
+      Object.defineProperty(this.content, "$idsToNodes", {
+        value: DOMState.$idsToNodes,
+        configurable: true,
+        enumerable: true,
+        writable: true,
+      });
+    }
+    const { $idsToNodes, $nodesToIds } = DOMState;
+
+    const deregisterNode = node => {
+      const id = $nodesToIds.get(node);
+      if (!id) {
+        return null;
+      }
+      $idsToNodes.delete(id);
+      $nodesToIds.delete(node);
+      return id;
+    };
+
+    const registerNode = node => {
+      const id = ExtensionUtils.getUniqueId();
+      $idsToNodes.set(id, node);
+      $nodesToIds.set(node, id);
+      return id;
+    };
+
+    const handleAddedNodes = ({ addedNodes }, bucket) => {
+      // TODO: Should all added nodes be appended? Not sure how mutation observers work.
+      //    No, see MutationRecord.previousSibling and MutationRecord.nextSibling
+      for (const node of addedNodes) {
+        let virtualNode = createVirtualNode(node);
+        if (virtualNode) {
+          // Also, this needs to invalidate styles since it could change selectors like
+          // :empty
+          bucket.added.push(virtualNode);
+        }
+      }
+    };
+
+    const handleRemovedNodes = ({ removedNodes }, bucket) => {
+      for (const node of removedNodes) {
+        const id = deregisterNode(node);
+        if (id) {
+          bucket.removed.push({ id, name: node.nodeName });
+        }
+      }
+    };
+
+    const handleAttributeChanged = ({ target }, bucket) => {
+      const id = $nodesToIds.get(target);
+      // XXX: This really needs to invalidate children & siblings as well,
+      // since it could change which CSS selectors are applying. For now we'll
+      // just update this one
+      bucket.updates.push({ id, virtualNode: getVirtualNodeBase(target) });
+    };
+
+    const handleCharacterDataChanged = ({ target }, bucket) => {
+      const id = $nodesToIds.get(target);
+      if (id) {
+        bucket.wrote.push({ id, data: target.data });
+      }
+    };
+
+    const handleMutation = mutation => {
+      // For node types we don't handle yet, don't forward to the client
+      if (!$nodesToIds.get(mutation.target)) {
+        return;
+      }
+      let target = {
+        id: $nodesToIds.get(mutation.target),
+        name: mutation.target.nodeName,
+      };
+
+      const bucket = {
+        target,
+        added: [],
+        removed: [],
+        wrote: [],
+        updates: [],
+      };
+      switch (mutation.type) {
+        case "childList":
+          handleAddedNodes(mutation, bucket);
+          handleRemovedNodes(mutation, bucket);
+          break;
+        case "attributes":
+          handleAttributeChanged(mutation, bucket);
+          break;
+        case "characterData":
+          handleCharacterDataChanged(mutation, bucket);
+          break;
+      }
+      if (
+        bucket.added.length ||
+        bucket.removed.length ||
+        bucket.wrote.length ||
+        bucket.updates.length
+      ) {
+        return [bucket];
+      }
+      return [];
+    };
+
+    const onMutations = mutationList => {
+      const mutations = mutationList.flatMap(handleMutation);
+      if (mutations.length) {
+        this.emit("Page.javascriptDialogOpening", {
+          type: "beforeunload",
+          message: mutations,
+        });
+      }
+    };
+
+    const observer = new this.content.MutationObserver(onMutations);
+    observer.observe(this.content.document.documentElement, {
+      childList: true,
+      attributes: true,
+      characterData: true,
+      subtree: true,
+    });
+
+    function getSize(element) {
+      let px = number => number.toFixed(2) + "px";
+      let getBoundsWithoutFlushing = el =>
+        el.ownerGlobal.windowUtils.getBoundsWithoutFlushing(el);
+      let bounds = getBoundsWithoutFlushing(element);
+      return {
+        height: px(bounds.height),
+        width: px(bounds.width),
+        top: px(bounds.top),
+        left: px(bounds.left),
+      };
+    }
+
+    function hasVisitedState(node) {
+      if (!node) {
+        return false;
+      }
+
+      const NS_EVENT_STATE_VISITED = 1 << 24;
+
+      return (
+        !!(InspectorUtils.getContentState(node) & NS_EVENT_STATE_VISITED) ||
+        InspectorUtils.hasPseudoClassLock(node, ":visited")
+      );
+    }
+    function whitelistedAttrs(node) {
+      let returnedAttrs = {};
+      for (let attr of node.attributes) {
+        if (WHITELISTED_ATTRS.has(attr.name)) {
+          returnedAttrs[attr.name] = attr.value;
+        }
+      }
+      return returnedAttrs;
+    }
+    function isAuthorStylesheet(sheet) {
+      return sheet.parsingMode === "author";
+    }
+
+    // See also https://searchfox.org/mozilla-central/source/dom/chrome-webidl/InspectorUtils.webidl#17
+    // InspectorUtils.getUsedFontFaces(searchRange, MAX_TEXT_RANGES);
+    function getStyles(node) {
+      // We could also just read all computed styles if we wanted
+      const domRules = InspectorUtils.getCSSStyleRules(
+        node,
+        null,
+        hasVisitedState(node)
+      );
+
+      const rules = [];
+
+      // getCSSStyleRules returns ordered from least-specific to
+      // most-specific.
+      for (let i = 0; i < domRules.length; i++) {
+        const domRule = domRules[i];
+
+        const isSystem = !isAuthorStylesheet(domRule.parentStyleSheet);
+        if (isSystem) {
+          continue;
+        }
+
+        let cssText = domRule.style.cssText;
+        if (cssText.includes("url(")) {
+          // This is really bad and only handles background-image specifically.
+          // TODO: see what devtools does to resolve paths in style rules.
+          let backgroundImage = node.ownerGlobal.getComputedStyle(node)[
+            "background-image"
+          ];
+          cssText = cssText.replace(/url\((.*)\)/, `${backgroundImage}`);
+        }
+        rules.push(cssText);
+      }
+
+      rules.push(node.style.cssText);
+
+      return rules.join("");
+    }
+
+    function getVirtualNodeBase(node) {
+      let attributes = Object.assign({}, whitelistedAttrs(node), {
+        style: getStyles(node),
+      });
+
+      // Resolve to absolute path for image src.
+      // Note this doesn't handle srcset
+      if (node.src) {
+        attributes.src = node.src;
+      }
+
+      return {
+        tag: node.tagName.toLowerCase(),
+        size: getSize(node),
+        attributes,
+      };
+    }
+
+    function createVirtualNode(node) {
+      // XXX Handle ::after. How should this get translated to markup? I guess
+      // this would need a new style attribute w unique id per node?
+      const parentTree = domToSerialized.get(node.parentNode);
+      if (!parentTree) {
+        return;
+      }
+      if (node.isNativeAnonymous) {
+        return;
+      }
+      if (node.tagName == "HEAD") {
+        // XXX: Should any of this come across?
+        return;
+      }
+      if (node.nodeType == 3) {
+        let thisTree = {
+          id: registerNode(node),
+          nodeType: node.nodeType,
+          data: node.data,
+        };
+        parentTree.children.push(thisTree);
+        return;
+      }
+      if (!node.tagName) {
+        // XXX: why does this happen?
+        return;
+      }
+
+      if (
+        node.tagName == "IFRAME" ||
+        node.tagName == "VIDEO" ||
+        node.tagName == "SCRIPT" ||
+        node.tagName == "LINK" ||
+        node.tagName == "STYLE"
+      ) {
+        // Put a placeholder to avoid messing up UA styles like
+        // `body > h1:-moz-first-node` with markup like `<body><style><h1>`
+        parentTree.children.push({
+          children: [],
+          tag: "div",
+          attributes: {
+            originalTag: node.tagName.toLowerCase(),
+          },
+        });
+      } else {
+        let attributes = Object.assign({}, whitelistedAttrs(node), {
+          style: getStyles(node),
+        });
+
+        // Resolve to absolute path for image src.
+        // Note this doesn't handle srcset
+        if (node.src) {
+          attributes.src = node.src;
+        }
+
+        let thisTree = getVirtualNodeBase(node);
+        Object.assign(thisTree, {
+          id: registerNode(node),
+          children: [],
+        });
+        parentTree.children.push(thisTree);
+        domToSerialized.set(node, thisTree);
+      }
+    }
+
+    let walker = Cc["@mozilla.org/inspector/deep-tree-walker;1"].createInstance(
+      Ci.inIDeepTreeWalker
+    );
+    walker.showAnonymousContent = true;
+    walker.showSubDocuments = true;
+    walker.showDocumentsAsNodes = true;
+    walker.init(
+      doc.documentElement,
+      nodeFilterConstants.SHOW_TEXT | nodeFilterConstants.SHOW_ELEMENT
+    );
+
+    let domToSerialized = new Map();
+    let currentNode = walker.currentNode;
+
+    // Tree for documentElement
+
+    let clonedTree = getVirtualNodeBase(currentNode);
+    Object.assign(clonedTree, {
+      id: registerNode(currentNode),
+      size: getSize(currentNode),
+      children: [],
+    });
+
+    domToSerialized.set(currentNode, clonedTree);
+
+    while ((currentNode = walker.nextNode())) {
+      createVirtualNode(currentNode);
+    }
+
+    return clonedTree;
+  }
+
   getFrameTree() {
     const getFrames = context => {
       const frameTree = {
         frame: this._getFrameDetails(context),
       };
 
       if (context.children.length > 0) {
         const frames = [];
diff --git a/remote/domains/parent/Network.jsm b/remote/domains/parent/Network.jsm
--- a/remote/domains/parent/Network.jsm
+++ b/remote/domains/parent/Network.jsm
@@ -162,74 +162,74 @@ class Network extends Domain {
    * @param {Array<string>=} urls
    *     The list of URLs for which applicable cookies will be fetched.
    *     Defaults to the currently open URL.
    *
    * @return {Array<Cookie>}
    *     Array of cookie objects.
    */
   async getCookies(options = {}) {
-    let _bakedDOM = await this.executeInChild("_bakedDOM");
-    // return { data: JSON.stringify(_bakedDOM) };
-    return {
-      cookies: [_bakedDOM],
-    };
+    // let _bakedDOM = await this.executeInChild("_bakedDOM");
+    // // return { data: JSON.stringify(_bakedDOM) };
+    // return {
+    //   cookies: [_bakedDOM],
+    // };
 
-    // // Bug 1605354 - Add support for options.urls
-    // const urls = [this.session.target.url];
+    // Bug 1605354 - Add support for options.urls
+    const urls = [this.session.target.url];
 
-    // const cookies = [];
-    // for (let url of urls) {
-    //   url = new URL(url);
+    const cookies = [];
+    for (let url of urls) {
+      url = new URL(url);
 
-    //   const secureProtocol = ["https:", "wss:"].includes(url.protocol);
+      const secureProtocol = ["https:", "wss:"].includes(url.protocol);
 
-    //   const cookiesFound = Services.cookies.getCookiesWithOriginAttributes(
-    //     JSON.stringify({}),
-    //     url.hostname
-    //   );
+      const cookiesFound = Services.cookies.getCookiesWithOriginAttributes(
+        JSON.stringify({}),
+        url.hostname
+      );
 
-    //   for (const cookie of cookiesFound) {
-    //     // Ignore secure cookies for non-secure protocols
-    //     if (cookie.isSecure && !secureProtocol) {
-    //       continue;
-    //     }
+      for (const cookie of cookiesFound) {
+        // Ignore secure cookies for non-secure protocols
+        if (cookie.isSecure && !secureProtocol) {
+          continue;
+        }
 
-    //     // Ignore cookies which do not match the given path
-    //     if (!url.pathname.startsWith(cookie.path)) {
-    //       continue;
-    //     }
+        // Ignore cookies which do not match the given path
+        if (!url.pathname.startsWith(cookie.path)) {
+          continue;
+        }
 
-    //     const data = {
-    //       name: cookie.name,
-    //       value: cookie.value,
-    //       domain: cookie.host,
-    //       path: cookie.path,
-    //       expires: cookie.isSession ? -1 : cookie.expiry,
-    //       // The size is the combined length of both the cookie name and value
-    //       size: cookie.name.length + cookie.value.length,
-    //       httpOnly: cookie.isHttpOnly,
-    //       secure: cookie.isSecure,
-    //       session: cookie.isSession,
-    //     };
+        const data = {
+          name: cookie.name,
+          value: cookie.value,
+          domain: cookie.host,
+          path: cookie.path,
+          expires: cookie.isSession ? -1 : cookie.expiry,
+          // The size is the combined length of both the cookie name and value
+          size: cookie.name.length + cookie.value.length,
+          httpOnly: cookie.isHttpOnly,
+          secure: cookie.isSecure,
+          session: cookie.isSession,
+        };
 
-    //     if (cookie.sameSite) {
-    //       const sameSiteMap = new Map([
-    //         [Ci.nsICookie.SAMESITE_LAX, "Lax"],
-    //         [Ci.nsICookie.SAMESITE_STRICT, "Strict"],
-    //       ]);
+        if (cookie.sameSite) {
+          const sameSiteMap = new Map([
+            [Ci.nsICookie.SAMESITE_LAX, "Lax"],
+            [Ci.nsICookie.SAMESITE_STRICT, "Strict"],
+          ]);
 
-    //       data.sameSite = sameSiteMap.get(cookie.sameSite);
-    //     }
+          data.sameSite = sameSiteMap.get(cookie.sameSite);
+        }
 
-    //     cookies.push(data);
-    //   }
-    // }
+        cookies.push(data);
+      }
+    }
 
-    // return { cookies };
+    return { cookies };
   }
 
   /**
    * Sets a cookie with the given cookie data.
    *
    * Note that it may overwrite equivalent cookies if they exist.
    *
    * @param {Object} cookie
diff --git a/remote/domains/parent/Page.jsm b/remote/domains/parent/Page.jsm
--- a/remote/domains/parent/Page.jsm
+++ b/remote/domains/parent/Page.jsm
@@ -96,16 +96,24 @@ class Page extends Domain {
    * @param {string=} options.transitionType
    *     intended transition type
    * @return {Object}
    *         - frameId {string} frame id that has navigated (or failed to)
    *         - errorText {string=} error message if navigation has failed
    *         - loaderId {string} (not supported)
    */
   async navigate(options = {}) {
+    if (options.url == "remote://baked-dom") {
+      // throw new Error("HI");
+      console.log("REMOTE MESSAGE");
+      const result = {
+        frameId: "HELLO",
+      };
+      return result;
+    }
     const { url, frameId, referrer, transitionType } = options;
     if (typeof url != "string") {
       throw new TypeError("url: string value expected");
     }
     let validURL;
     try {
       validURL = Services.io.newURI(url);
     } catch (e) {
@@ -185,16 +193,39 @@ class Page extends Domain {
    *     Image compression format. Defaults to "png".
    * @param {number=} options.quality
    *     Compression quality from range [0..100] (jpeg only). Defaults to 80.
    *
    * @return {string}
    *     Base64-encoded image data.
    */
   async captureScreenshot(options = {}) {
+    const data = {};
+
+    if (options.remoteMessage == "bakedDOM") {
+      let _bakedDOM = await this.executeInChild("_bakedDOM");
+      data.bakedDOM = _bakedDOM;
+    }
+    data.foo = "BAR";
+    return {
+      data: {
+        foo: btoa("foo"),
+      },
+    };
+    // retval.data.foo = ""
+    return {
+      data: JSON.stringify(data),
+    };
+    // return {
+    //   data: {
+    //     fooakedDOM: _bakedDOM,
+    //   }
+    // };
+    // }
+    /*
     const { clip, format = "png", quality = 80 } = options;
 
     if (options.fromSurface) {
       throw new UnsupportedError("fromSurface not supported");
     }
 
     let rect;
     let scale = await this.executeInChild("_devicePixelRatio");
@@ -295,16 +326,17 @@ class Page extends Domain {
     if (!url.startsWith(`data:image/${format}`)) {
       throw new UnsupportedError(`Unsupported MIME type: image/${format}`);
     }
 
     // only return the base64 encoded data without the data URL prefix
     const data = url.substring(url.indexOf(",") + 1);
 
     return { data };
+    */
   }
 
   async enable() {
     if (this.enabled) {
       return;
     }
 
     this.enabled = true;
