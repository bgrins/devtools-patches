diff -r 3d27abe9852b -r 60d7dd7f9704 browser/devtools/webconsole/console-output.js
--- a/browser/devtools/webconsole/console-output.js	Tue Jun 02 00:29:08 2015 -0700
+++ b/browser/devtools/webconsole/console-output.js	Wed Jun 03 18:33:05 2015 -0700
@@ -678,16 +678,17 @@ Messages.NavigationMarker.prototype = He
 Messages.Simple = function(message, options = {})
 {
   Messages.BaseMessage.call(this);
 
   this.category = options.category;
   this.severity = options.severity;
   this.location = options.location;
   this.timestamp = options.timestamp || Date.now();
+  this.prefix = options.prefix;
   this.private = !!options.private;
 
   this._message = message;
   this._className = options.className;
   this._link = options.link;
   this._linkCallback = options.linkCallback;
   this._filterDuplicates = options.filterDuplicates;
 };
@@ -708,16 +709,22 @@ Messages.Simple.prototype = Heritage.ext
 
   /**
    * Message source location. Properties: url, line, column, lineText.
    * @type object
    */
   location: null,
 
   /**
+   * Message prefix
+   * @type string|null
+   */
+  prefix: null,
+
+  /**
    * Tells if this message comes from a private browsing context.
    * @type boolean
    */
   private: false,
 
   /**
    * Custom class name for the DOM element of the message.
    * @private
@@ -804,16 +811,17 @@ Messages.Simple.prototype = Heritage.ext
     }
 
     // Add the properties we care about for identifying duplicate messages.
     let rid = this._repeatID;
     delete rid.uid;
 
     rid.category = this.category;
     rid.severity = this.severity;
+    rid.prefix = this.prefix;
     rid.private = this.private;
     rid.location = this.location;
     rid.link = this._link;
     rid.linkCallback = this._linkCallback + "";
     rid.className = this._className;
     rid.groupDepth = this._groupDepthCompat;
     rid.textContent = "";
   },
@@ -836,16 +844,23 @@ Messages.Simple.prototype = Heritage.ext
     }
 
     let timestamp = new Widgets.MessageTimestamp(this, this.timestamp).render();
 
     let icon = this.document.createElementNS(XHTML_NS, "span");
     icon.className = "icon";
     icon.title = l10n.getStr("severity." + this._severityNameCompat);
 
+    let prefixNode;
+    if (this.prefix) {
+      prefixNode = this.document.createElementNS(XHTML_NS, "span");
+      prefixNode.className = "prefix devtools-monospace";
+      prefixNode.textContent = this.prefix + ":";
+    }
+
     // Apply the current group by indenting appropriately.
     // TODO: remove this once bug 778766 is fixed.
     let indent = this._groupDepthCompat * COMPAT.GROUP_INDENT;
     let indentNode = this.document.createElementNS(XHTML_NS, "span");
     indentNode.className = "indent";
     indentNode.style.width = indent + "px";
 
     let body = this._renderBody();
@@ -857,16 +872,19 @@ Messages.Simple.prototype = Heritage.ext
     Messages.BaseMessage.prototype.render.call(this);
     if (this._className) {
       this.element.className += " " + this._className;
     }
 
     this.element.appendChild(timestamp.element);
     this.element.appendChild(indentNode);
     this.element.appendChild(icon);
+    if (prefixNode) {
+      this.element.appendChild(prefixNode);
+    }
     this.element.appendChild(body);
     if (repeatNode) {
       this.element.appendChild(repeatNode);
     }
     if (location) {
       this.element.appendChild(location);
     }
     this.element.appendChild(this.document.createTextNode("\n"));
@@ -1275,16 +1293,17 @@ Messages.JavaScriptEvalOutput.prototype 
  */
 Messages.ConsoleGeneric = function(packet)
 {
   let options = {
     className: "cm-s-mozilla",
     timestamp: packet.timeStamp,
     category: "webdev",
     severity: CONSOLE_API_LEVELS_TO_SEVERITIES[packet.level],
+    prefix: packet.prefix,
     private: packet.private,
     filterDuplicates: true,
     location: {
       url: packet.filename,
       line: packet.lineNumber,
       column: packet.columnNumber
     },
   };
diff -r 3d27abe9852b -r 60d7dd7f9704 browser/devtools/webconsole/test/browser_console_consolejsm_output.js
--- a/browser/devtools/webconsole/test/browser_console_consolejsm_output.js	Tue Jun 02 00:29:08 2015 -0700
+++ b/browser/devtools/webconsole/test/browser_console_consolejsm_output.js	Wed Jun 03 18:33:05 2015 -0700
@@ -2,17 +2,17 @@
  * Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
 // Test that Console.jsm outputs messages to the Browser Console, bug 851231.
 
 "use strict";
 
-let test = asyncTest(function*() {
+add_task(function*() {
   let storage = Cc["@mozilla.org/consoleAPI-storage;1"].getService(Ci.nsIConsoleAPIStorage);
   storage.clearEvents();
 
   let console = Cu.import("resource://gre/modules/devtools/Console.jsm", {}).console;
   console.log("bug861338-log-cached");
 
   let hud = yield HUDService.toggleBrowserConsole();
 
@@ -129,9 +129,40 @@ let test = asyncTest(function*() {
 
   let varView = yield deferred.promise;
   ok(varView, "object inspector opened on click");
 
   yield findVariableViewProperties(varView, [{
     name: "bug851231prop",
     value: "bug851231value",
   }], { webconsole: hud });
+
+  yield HUDService.toggleBrowserConsole();
 });
+
+add_task(function* test_prefix() {
+  let storage = Cc["@mozilla.org/consoleAPI-storage;1"].getService(Ci.nsIConsoleAPIStorage);
+  storage.clearEvents();
+
+  let ConsoleAPI = Cu.import("resource://gre/modules/devtools/Console.jsm", {}).ConsoleAPI;
+  let consoleOptions = {
+    maxLogLevel: "error",
+    prefix: "Log Prefix",
+  };
+  let console2 = new ConsoleAPI(consoleOptions);
+  console2.error("Testing a prefix");
+  console2.log("Below the maxLogLevel");
+
+  let hud = yield HUDService.toggleBrowserConsole();
+
+  yield waitForMessages({
+    webconsole: hud,
+    messages: [{
+      name: "cached console.error message",
+      prefix: "Log Prefix:",
+      severity: SEVERITY_ERROR,
+      text: "Testing a prefix",
+    }],
+  });
+
+  hud.jsterm.clearOutput(true);
+  yield HUDService.toggleBrowserConsole();
+});
diff -r 3d27abe9852b -r 60d7dd7f9704 browser/devtools/webconsole/test/head.js
--- a/browser/devtools/webconsole/test/head.js	Tue Jun 02 00:29:08 2015 -0700
+++ b/browser/devtools/webconsole/test/head.js	Wed Jun 03 18:33:05 2015 -0700
@@ -1287,16 +1287,23 @@ function waitForMessages(aOptions)
              displayRule(aRule));
           displayErrorContext(aRule, aElement);
         }
         return false;
       }
       aRule.clickableElements = clickables;
     }
 
+    if ("prefix" in aRule) {
+      info(aElement.className);
+      let prefixNode = aElement.querySelector(".prefix");
+      info(prefixNode);
+      is(prefixNode && prefixNode.textContent, aRule.prefix, "Check prefix");
+    }
+
     let count = aRule.count || 1;
     if (!aRule.matched) {
       aRule.matched = new Set();
     }
     aRule.matched.add(aElement);
 
     return aRule.matched.size == count;
   }
diff -r 3d27abe9852b -r 60d7dd7f9704 browser/themes/shared/devtools/webconsole.inc.css
--- a/browser/themes/shared/devtools/webconsole.inc.css	Tue Jun 02 00:29:08 2015 -0700
+++ b/browser/themes/shared/devtools/webconsole.inc.css	Wed Jun 03 18:33:05 2015 -0700
@@ -18,20 +18,21 @@ a {
 .message {
   display: flex;
   flex: none;
   padding: 0 7px;
   width: 100%;
   box-sizing: border-box;
 }
 
+.message > .prefix,
 .message > .timestamp {
   flex: none;
   color: GrayText;
-  margin: 4px 6px 0 0;
+  margin: 3px 6px 0 0;
 }
 
 .message > .indent {
   flex: none;
 }
 
 .message > .icon {
   flex: none;
diff -r 3d27abe9852b -r 60d7dd7f9704 toolkit/devtools/Console.jsm
--- a/toolkit/devtools/Console.jsm	Tue Jun 02 00:29:08 2015 -0700
+++ b/toolkit/devtools/Console.jsm	Wed Jun 03 18:33:05 2015 -0700
@@ -528,16 +528,17 @@ function sendConsoleAPIMessage(aConsole,
     innerID: aConsole.innerID || aFrame.filename,
     consoleID: aConsole.consoleID,
     level: aLevel,
     filename: aFrame.filename,
     lineNumber: aFrame.lineNumber,
     functionName: aFrame.functionName,
     timeStamp: Date.now(),
     arguments: aArgs,
+    prefix: aConsole.prefix,
   };
 
   consoleEvent.wrappedJSObject = consoleEvent;
 
   switch (aLevel) {
     case "trace":
       consoleEvent.stacktrace = aOptions.stacktrace;
       break;
