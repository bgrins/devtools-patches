# HG changeset patch
# Parent b4b5df18de5c3e4485458372be7a3ca4b006e4bf
# User Brian Grinstead <bgrinstead@mozilla.com>
additional logging

diff --git a/browser/devtools/sourceeditor/editor.js b/browser/devtools/sourceeditor/editor.js
--- a/browser/devtools/sourceeditor/editor.js
+++ b/browser/devtools/sourceeditor/editor.js
@@ -984,16 +984,17 @@ Editor.prototype = {
         return;
       }
 
       this[name] = funcs[name].bind(null, ctx);
     });
   },
 
   destroy: function () {
+    console.log("Editor destroy ", this._prefObserver);
     this.container = null;
     this.config = null;
     this.version = null;
 
     if (this._prefObserver) {
       this._prefObserver.off(TAB_SIZE, this.reloadPreferences);
       this._prefObserver.off(EXPAND_TAB, this.reloadPreferences);
       this._prefObserver.off(KEYMAP, this.reloadPreferences);
diff --git a/browser/devtools/styleeditor/StyleEditorUI.jsm b/browser/devtools/styleeditor/StyleEditorUI.jsm
--- a/browser/devtools/styleeditor/StyleEditorUI.jsm
+++ b/browser/devtools/styleeditor/StyleEditorUI.jsm
@@ -213,16 +213,17 @@ StyleEditorUI.prototype = {
 
     this.emit("stylesheets-reset");
   },
 
   /**
    * Remove all editors and add loading indicator.
    */
   _clear: function() {
+    console.log("_clear called", this.editors);
     // remember selected sheet and line number for next load
     if (this.selectedEditor && this.selectedEditor.sourceEditor) {
       let href = this.selectedEditor.styleSheet.href;
       let {line, ch} = this.selectedEditor.sourceEditor.getCursor();
 
       this._styleSheetToSelect = {
         stylesheet: href,
         line: line,
@@ -296,16 +297,17 @@ StyleEditorUI.prototype = {
       new StyleSheetEditor(styleSheet, this._window, file, isNew, this._walker);
 
     editor.on("property-change", this._summaryChange.bind(this, editor));
     editor.on("media-rules-changed", this._updateMediaList.bind(this, editor));
     editor.on("linked-css-file", this._summaryChange.bind(this, editor));
     editor.on("linked-css-file-error", this._summaryChange.bind(this, editor));
     editor.on("error", this._onError);
 
+    console.log("_addStyleSheetEditor", editor);
     this.editors.push(editor);
 
     editor.fetchSource(this._sourceLoaded.bind(this, editor));
     return editor;
   },
 
   /**
    * Import a style sheet from file and asynchronously create a
@@ -387,16 +389,17 @@ StyleEditorUI.prototype = {
 
   /**
    * Remove a particular stylesheet editor from the UI
    *
    * @param {StyleSheetEditor}  editor
    *        The editor to remove.
    */
   _removeStyleSheetEditor: function(editor) {
+    console.log("_removeStyleSheetEditor called", editor);
     if (editor.summary) {
       this._view.removeItem(editor.summary);
     }
     else {
       let self = this;
       this.on("editor-added", function onAdd(event, added) {
         if (editor == added) {
           self.off("editor-added", onAdd);
@@ -408,16 +411,17 @@ StyleEditorUI.prototype = {
     editor.destroy();
     this.editors.splice(this.editors.indexOf(editor), 1);
   },
 
   /**
    * Clear all the editors from the UI.
    */
   _clearStyleSheetEditors: function() {
+    console.log("_removeStyleSheetEditor called", this.editors.length);
     for (let editor of this.editors) {
       editor.destroy();
     }
     this.editors = [];
   },
 
   /**
    * Called when a StyleSheetEditor's source has been fetched. Create a
@@ -815,16 +819,17 @@ StyleEditorUI.prototype = {
    *         Location object with 'line', 'column', and 'source' properties.
    */
   _jumpToLocation: function(location) {
     let source = location.styleSheet || location.source;
     this.selectStyleSheet(source, location.line - 1, location.column - 1);
   },
 
   destroy: function() {
+    console.log("Style Editor UI destroy() called");
     this._clearStyleSheetEditors();
 
     let sidebar = this._panelDoc.querySelector(".splitview-controller");
     let sidebarWidth = sidebar.getAttribute("width");
     Services.prefs.setIntPref(PREF_NAV_WIDTH, sidebarWidth);
 
     this._optionsMenu.removeEventListener("popupshowing",
                                           this._onOptionsPopupShowing);
diff --git a/browser/devtools/styleeditor/StyleSheetEditor.jsm b/browser/devtools/styleeditor/StyleSheetEditor.jsm
--- a/browser/devtools/styleeditor/StyleSheetEditor.jsm
+++ b/browser/devtools/styleeditor/StyleSheetEditor.jsm
@@ -18,16 +18,18 @@ const {CssLogic} = require("devtools/sty
 
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource://gre/modules/FileUtils.jsm");
 Cu.import("resource://gre/modules/NetUtil.jsm");
 Cu.import("resource://gre/modules/osfile.jsm");
 Cu.import("resource://gre/modules/devtools/event-emitter.js");
 Cu.import("resource:///modules/devtools/StyleEditorUtil.jsm");
 
+const console = require("resource://gre/modules/devtools/Console.jsm").console;
+
 const LOAD_ERROR = "error-load";
 const SAVE_ERROR = "error-save";
 
 // max update frequency in ms (avoid potential typing lag and/or flicker)
 // @see StyleEditor.updateStylesheet
 const UPDATE_STYLESHEET_THROTTLE_DELAY = 500;
 
 // Pref which decides if CSS autocompletion is enabled in Style Editor or not.
@@ -349,17 +351,20 @@ StyleSheetEditor.prototype = {
       contextMenu: "sourceEditorContextMenu",
       autocomplete: Services.prefs.getBoolPref(AUTOCOMPLETION_PREF),
       autocompleteOpts: { walker: this.walker }
     };
     let sourceEditor = new Editor(config);
 
     sourceEditor.on("dirty-change", this._onPropertyChange);
 
+    console.log("Appending source editor", this._state.text);
+    this._sourceEditor = sourceEditor;
     return sourceEditor.appendTo(inputElement).then(() => {
+    console.log("Been appended, adding event listeners");
       sourceEditor.on("save", () => {
         this.saveToFile();
       });
 
       if (this.styleSheet.update) {
         sourceEditor.on("change", () => {
           this.updateStyleSheet();
         });
@@ -625,18 +630,21 @@ StyleSheetEditor.prototype = {
 
     return bindings;
   },
 
   /**
    * Clean up for this editor.
    */
   destroy: function() {
-    if (this.sourceEditor) {
-      this.sourceEditor.destroy();
+    console.log("DESTROYING stylesheet editor", this._sourceEditor);
+    if (this._sourceEditor) {
+      this._sourceEditor.off("dirty-change", this._onPropertyChange);
+      this._sourceEditor.destroy();
+      this._sourceEditor = this.sourceEditor = null;
     }
     this.cssSheet.off("property-change", this._onPropertyChange);
     this.cssSheet.off("media-rules-changed", this._onMediaRulesChanged);
     this.styleSheet.off("error", this._onError);
   }
 }
 
 /**
diff --git a/browser/devtools/styleeditor/test/browser_styleeditor_import_rule.js b/browser/devtools/styleeditor/test/browser_styleeditor_import_rule.js
--- a/browser/devtools/styleeditor/test/browser_styleeditor_import_rule.js
+++ b/browser/devtools/styleeditor/test/browser_styleeditor_import_rule.js
@@ -15,23 +15,26 @@ function test()
 
   content.location = TESTCASE_URI;
 }
 
 function onEditorAdded(panel)
 {
   gUI = panel.UI;
 
+  console.log("On editor added", panel);
+
   is(gUI.editors.length, 3,
     "there are 3 stylesheets after loading @imports");
 
   is(gUI.editors[0].styleSheet.href, TEST_BASE_HTTP + "simple.css",
     "stylesheet 1 is simple.css");
 
   is(gUI.editors[1].styleSheet.href, TEST_BASE_HTTP + "import.css",
     "stylesheet 2 is import.css");
 
   is(gUI.editors[2].styleSheet.href, TEST_BASE_HTTP + "import2.css",
     "stylesheet 3 is import2.css");
 
+  console.log("finished, cleaning up UI");
   gUI = null;
   finish();
 }
