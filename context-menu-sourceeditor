# HG changeset patch
# Parent 65ae48644b2e1f61c6db50cb1a5c337379dbc9a0
# User Brian Grinstead <bgrinstead@mozilla.com>
Bug 1022083 - Project Editor: add context menu in sourceeditor;r=harth

diff --git a/browser/devtools/projecteditor/chrome/content/projecteditor.xul b/browser/devtools/projecteditor/chrome/content/projecteditor.xul
--- a/browser/devtools/projecteditor/chrome/content/projecteditor.xul
+++ b/browser/devtools/projecteditor/chrome/content/projecteditor.xul
@@ -48,16 +48,24 @@
         <menuitem id="menu_paste"/>
       </menupopup>
     </menu>
   </menubar>
 
   <popupset>
     <menupopup id="context-menu-popup">
     </menupopup>
+    <menupopup id="texteditor-context-popup">
+      <menuitem id="cMenu_cut"/>
+      <menuitem id="cMenu_copy"/>
+      <menuitem id="cMenu_paste"/>
+      <menuitem id="cMenu_delete"/>
+      <menuseparator/>
+      <menuitem id="cMenu_selectAll"/>
+    </menupopup>
   </popupset>
 
   <deck id="main-deck" flex="1">
     <vbox flex="1" id="source-deckitem">
       <hbox id="sources-body" flex="1">
         <vbox width="250" id="sources">
           <vbox flex="1">
           </vbox>
diff --git a/browser/devtools/projecteditor/lib/editors.js b/browser/devtools/projecteditor/lib/editors.js
--- a/browser/devtools/projecteditor/lib/editors.js
+++ b/browser/devtools/projecteditor/lib/editors.js
@@ -46,16 +46,17 @@ var ItchEditor = Class({
   },
 
   /**
    * Initialize the editor with a single host.  This should be called
    * by objects extending this object with:
    * ItchEditor.prototype.initialize.apply(this, arguments)
    */
   initialize: function(host) {
+    this.host = host;
     this.doc = host.document;
     this.label = "";
     this.elt = this.doc.createElement("vbox");
     this.elt.setAttribute("flex", "1");
     this.elt.editor = this;
     this.toolbar = this.doc.querySelector("#projecteditor-toolbar");
     this.projectEditorKeyset = host.projectEditorKeyset;
     this.projectEditorCommandset = host.projectEditorCommandset;
@@ -160,17 +161,18 @@ var TextEditor = Class({
   initialize: function(document, mode=Editor.modes.text) {
     ItchEditor.prototype.initialize.apply(this, arguments);
     this.label = mode.name;
     this.editor = new Editor({
       mode: mode,
       lineNumbers: true,
       extraKeys: this.extraKeys,
       themeSwitching: false,
-      autocomplete: true
+      autocomplete: true,
+      contextMenu:  this.host.textEditorContextMenuPopup //"texteditor-context-popup"
     });
 
     // Trigger a few editor specific events on `this`.
     this.editor.on("change", (...args) => {
       this.emit("change", ...args);
     });
     this.editor.on("cursorActivity", (...args) => {
       this.emit("cursorActivity", ...args);
diff --git a/browser/devtools/projecteditor/lib/projecteditor.js b/browser/devtools/projecteditor/lib/projecteditor.js
--- a/browser/devtools/projecteditor/lib/projecteditor.js
+++ b/browser/devtools/projecteditor/lib/projecteditor.js
@@ -170,32 +170,39 @@ var ProjectEditor = Class({
       openFiles: []
     }));
 
     this._initPlugins();
   },
 
   _buildMenubar: function() {
 
+    this.contextMenuPopup = this.document.getElementById("context-menu-popup");
+    this.contextMenuPopup.addEventListener("popupshowing", this._updateContextMenuItems);
+
+    this.textEditorContextMenuPopup = this.document.getElementById("texteditor-context-popup");
+    this.textEditorContextMenuPopup.addEventListener("popupshowing", this._updateMenuItems);
+
     this.editMenu = this.document.getElementById("edit-menu");
     this.fileMenu = this.document.getElementById("file-menu");
 
     this.editMenuPopup = this.document.getElementById("edit-menu-popup");
     this.fileMenuPopup = this.document.getElementById("file-menu-popup");
     this.editMenu.addEventListener("popupshowing", this._updateMenuItems);
     this.fileMenu.addEventListener("popupshowing", this._updateMenuItems);
 
     if (this.menubar) {
       let body = this.menubar.ownerDocument.body ||
                  this.menubar.ownerDocument.querySelector("window");
       body.appendChild(this.projectEditorCommandset);
       body.appendChild(this.projectEditorKeyset);
       body.appendChild(this.editorCommandset);
       body.appendChild(this.editorKeyset);
       body.appendChild(this.contextMenuPopup);
+      body.appendChild(this.textEditorContextMenuPopup);
 
       let index = this.menuindex || 0;
       this.menubar.insertBefore(this.editMenu, this.menubar.children[index]);
       this.menubar.insertBefore(this.fileMenu, this.menubar.children[index]);
     } else {
       this.document.getElementById("projecteditor-menubar").style.display = "block";
     }
 
@@ -227,19 +234,16 @@ var ProjectEditor = Class({
   _initCommands: function() {
 
     this.projectEditorCommandset = this.document.getElementById("projecteditor-commandset");
     this.projectEditorKeyset = this.document.getElementById("projecteditor-keyset");
 
     this.editorCommandset = this.document.getElementById("editMenuCommands");
     this.editorKeyset = this.document.getElementById("editMenuKeys");
 
-    this.contextMenuPopup = this.document.getElementById("context-menu-popup");
-    this.contextMenuPopup.addEventListener("popupshowing", this._updateContextMenuItems);
-
     this.projectEditorCommandset.addEventListener("command", (evt) => {
       evt.stopPropagation();
       evt.preventDefault();
       this.pluginDispatch("onCommand", evt.target.id, evt.target);
     });
   },
 
   /**
@@ -308,16 +312,17 @@ var ProjectEditor = Class({
 
     this.shells.destroy();
 
     this.projectEditorCommandset.remove();
     this.projectEditorKeyset.remove();
     this.editorCommandset.remove();
     this.editorKeyset.remove();
     this.contextMenuPopup.remove();
+    this.textEditorContextMenuPopup.remove();
     this.editMenu.remove();
     this.fileMenu.remove();
 
     this._commandWindow.controllers.removeController(this._commandController);
     this._commandController = null;
 
     forget(this, this.project);
     this.project.destroy();
diff --git a/browser/devtools/sourceeditor/editor.js b/browser/devtools/sourceeditor/editor.js
--- a/browser/devtools/sourceeditor/editor.js
+++ b/browser/devtools/sourceeditor/editor.js
@@ -126,18 +126,18 @@ Editor.modes = {
  * Note that Editor doesn't expose CodeMirror instance to the
  * outside world.
  *
  * Constructor accepts one argument, config. It is very
  * similar to the CodeMirror configuration object so for most
  * properties go to CodeMirror's documentation (see below).
  *
  * Other than that, it accepts one additional and optional
- * property contextMenu. This property should be an ID of
- * an element we can use as a context menu.
+ * property contextMenu. This property should be an element, or
+ * an ID of an element that we can use as a context menu.
  *
  * This object is also an event emitter.
  *
  * CodeMirror docs: http://codemirror.net/doc/manual.html
  */
 function Editor(config) {
   const tabSize = Services.prefs.getIntPref(TAB_SIZE);
   const useTabs = !Services.prefs.getBoolPref(EXPAND_TAB);
@@ -281,17 +281,19 @@ Editor.prototype = {
       // Create a CodeMirror instance add support for context menus,
       // overwrite the default controller (otherwise items in the top and
       // context menus won't work).
 
       cm = win.CodeMirror(win.document.body, this.config);
       cm.getWrapperElement().addEventListener("contextmenu", (ev) => {
         ev.preventDefault();
         if (!this.config.contextMenu) return;
-        let popup = el.ownerDocument.getElementById(this.config.contextMenu);
+        let popup = this.config.contextMenu;
+        if (typeof popup == "string")
+          popup = el.ownerDocument.getElementById(this.config.contextMenu);
         popup.openPopupAtScreen(ev.screenX, ev.screenY, true);
       }, false);
 
       cm.on("focus", () => this.emit("focus"));
       cm.on("scroll", () => this.emit("scroll"));
       cm.on("change", () => {
         this.emit("change");
         if (!this._lastDirty) {
