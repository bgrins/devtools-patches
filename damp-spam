# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  137707995d3ad1b357e2f7795ac2b30e60b77a06
Bug 1157946 - Fix more logspam in DAMP;r=jlongster

diff --git a/browser/devtools/debugger/debugger-controller.js b/browser/devtools/debugger/debugger-controller.js
--- a/browser/devtools/debugger/debugger-controller.js
+++ b/browser/devtools/debugger/debugger-controller.js
@@ -1217,17 +1217,17 @@ SourceScripts.prototype = {
     // Signal that a new source has been added.
     window.emit(EVENTS.NEW_SOURCE);
   },
 
   /**
    * Callback for the debugger's active thread getSources() method.
    */
   _onSourcesAdded: function(aResponse) {
-    if (aResponse.error) {
+    if (aResponse.error || !aResponse.sources) {
       let msg = "Error getting sources: " + aResponse.message;
       Cu.reportError(msg);
       dumpn(msg);
       return;
     }
 
     if (aResponse.sources.length === 0) {
       DebuggerView.Sources.emptyText = L10N.getStr("noSourcesText");
diff --git a/browser/devtools/framework/toolbox.js b/browser/devtools/framework/toolbox.js
--- a/browser/devtools/framework/toolbox.js
+++ b/browser/devtools/framework/toolbox.js
@@ -321,16 +321,20 @@ Toolbox.prototype = {
       yield this._target.makeRemote();
       iframe.setAttribute("src", this._URL);
       iframe.setAttribute("aria-label", toolboxStrings("toolbox.label"));
       let domHelper = new DOMHelpers(iframe.contentWindow);
       domHelper.onceDOMReady(() => domReady.resolve());
 
       yield domReady.promise;
 
+      if (!this._target) {
+        return;
+      }
+
       this.isReady = true;
       let framesPromise = this._listFrames();
 
       this.closeButton = this.doc.getElementById("toolbox-close");
       this.closeButton.addEventListener("command", this.destroy, true);
 
       gDevTools.on("pref-changed", this._prefChanged);
 
@@ -1370,18 +1374,19 @@ Toolbox.prototype = {
     // Wait for frameUpdate event to update the UI
   },
 
   _updateFrames: function (event, data) {
     if (!Services.prefs.getBoolPref("devtools.command-button-frames.enabled")) {
       return;
     }
 
-    // We may receive this event before the toolbox is ready.
-    if (!this.isReady) {
+    // We may receive this event before the toolbox is ready or after
+    // it's destroyed
+    if (!this.isReady || !this.doc) {
       return;
     }
 
     let menu = this.doc.getElementById("command-button-frames");
 
     if (data.destroyAll) {
       let menupopup = menu.firstChild;
       while (menupopup.firstChild) {
@@ -1708,19 +1713,24 @@ Toolbox.prototype = {
     gDevTools.off("pref-changed", this._prefChanged);
 
     this._lastFocusedElement = null;
     if (this.webconsolePanel) {
       this._saveSplitConsoleHeight();
       this.webconsolePanel.removeEventListener("resize",
         this._saveSplitConsoleHeight);
     }
-    this.closeButton.removeEventListener("command", this.destroy, true);
-    this.textboxContextMenuPopup.removeEventListener("popupshowing",
-      this._updateTextboxMenuItems, true);
+
+    if (this.closeButton) {
+      this.closeButton.removeEventListener("command", this.destroy, true);
+    }
+    if (this.textboxContextMenuPopup) {
+      this.textboxContextMenuPopup.removeEventListener("popupshowing",
+        this._updateTextboxMenuItems, true);
+    }
 
     let outstanding = [];
     for (let [id, panel] of this._toolPanels) {
       try {
         gDevTools.emit(id + "-destroy", this, panel);
         this.emit(id + "-destroy", panel);
 
         outstanding.push(panel.destroy());
