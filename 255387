# HG changeset patch
# User Hallvord R. M. Steen <hsteen@mozilla.com>
# Date 1440679969 -7200
#      Thu Aug 27 14:52:49 2015 +0200
# Node ID 75580d267ca4d0df61b04807dc4a9b1ca7430fd0
# Parent  b9c136a827c50a356ae18d9cf2b4f76237c7f780
Attempted fix for debugger shortcut keys not working with focus in console, bug 1183325

diff --git a/browser/devtools/debugger/panel.js b/browser/devtools/debugger/panel.js
--- a/browser/devtools/debugger/panel.js
+++ b/browser/devtools/debugger/panel.js
@@ -21,16 +21,28 @@ function DebuggerPanel(iframeWindow, too
   this._controller._target = this.target;
   this._controller._toolbox = this._toolbox;
 
   this.handleHostChanged = this.handleHostChanged.bind(this);
   this.highlightWhenPaused = this.highlightWhenPaused.bind(this);
   this.unhighlightWhenResumed = this.unhighlightWhenResumed.bind(this);
 
   EventEmitter.decorate(this);
+
+  this.wantsKeyInSplitConsole = function(event){
+    var keysWeWant = ["stepOverKey", "stepOverKey2", "stepInKey", "stepInKey2", "stepOutKey", "stepOutKey2"];
+    for(var i=0, key, elm; key = keysWeWant[i]; i++){
+      elm = iframeWindow.document.getElementById(key);
+      console.log(event.type + ' ' + event.key + ' event. wantsKeyInSplitConsole elm is '+ elm + ' and key code is ' + elm.getAttribute('keycode'));
+      if(elm && 'VK_' + event.key === elm.getAttribute('keycode')){
+        return true;
+      }
+    }
+    return false;
+  }
 };
 
 exports.DebuggerPanel = DebuggerPanel;
 
 DebuggerPanel.prototype = {
   /**
    * Open is effectively an asynchronous constructor.
    *
diff --git a/browser/devtools/framework/toolbox.js b/browser/devtools/framework/toolbox.js
--- a/browser/devtools/framework/toolbox.js
+++ b/browser/devtools/framework/toolbox.js
@@ -470,25 +470,33 @@ Toolbox.prototype = {
     };
     let key = this.doc.getElementById("toolbox-options-key");
     key.addEventListener("command", selectOptions, true);
     let key2 = this.doc.getElementById("toolbox-options-key2");
     key2.addEventListener("command", selectOptions, true);
   },
 
   _splitConsoleOnKeypress: function(e) {
+    let jsdebugger = this.getPanel("jsdebugger");
     if (e.keyCode === e.DOM_VK_ESCAPE) {
       this.toggleSplitConsole();
       // If the debugger is paused, don't let the ESC key stop any pending
       // navigation.
-      let jsdebugger = this.getPanel("jsdebugger");
       if (jsdebugger && jsdebugger.panelWin.gThreadClient.state == "paused") {
         e.preventDefault();
       }
     }
+    if(jsdebugger && jsdebugger.wantsKeyInSplitConsole(e) && ! (e.defaultPrevented || e.cancelBubble)){
+      var keyboardEvent = jsdebugger.panelWin.document.createEvent("KeyboardEvent");
+      keyboardEvent.initKeyEvent(e.type, true, true, jsdebugger.panelWin, false, false, false, false, e.keyCode, e.charCode);
+      var returnValue = jsdebugger.panelWin.document.dispatchEvent(keyboardEvent);
+      if(keyboardEvent.defaultPrevented){
+        e.preventDefault();
+      }
+    }
   },
 
   _addReloadKeys: function() {
     [
       ["toolbox-reload-key", false],
       ["toolbox-reload-key2", false],
       ["toolbox-force-reload-key", true],
       ["toolbox-force-reload-key2", true]
