# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  04d566144a88dab8c629211706ff8cdf595b233e
No bug yet - hack cached messages perf

diff --git a/devtools/client/webconsole/new-console-output/actions/messages.js b/devtools/client/webconsole/new-console-output/actions/messages.js
--- a/devtools/client/webconsole/new-console-output/actions/messages.js
+++ b/devtools/client/webconsole/new-console-output/actions/messages.js
@@ -21,25 +21,33 @@ const {
 
 const defaultIdGenerator = new IdGenerator();
 
 function messageAdd(packet, idGenerator = null) {
   return (dispatch) => {
     if (idGenerator == null) {
       idGenerator = defaultIdGenerator;
     }
-    let message = prepareMessage(packet, idGenerator);
 
-    if (message.type === MESSAGE_TYPE.CLEAR) {
-      dispatch(messagesClear());
+    let messages = Array.isArray(packet) ? packet : [packet];
+
+    for (let i = 0; i < messages.length; i++) {
+
+      let message = prepareMessage(messages[i], idGenerator);
+
+      if (message.type === MESSAGE_TYPE.CLEAR) {
+        dispatch(messagesClear());
+      }
+
+      messages[i] = message;
     }
 
     dispatch({
       type: MESSAGE_ADD,
-      message
+      messages
     });
   };
 }
 
 function messagesClear() {
   return {
     type: MESSAGES_CLEAR
   };
diff --git a/devtools/client/webconsole/new-console-output/reducers/messages.js b/devtools/client/webconsole/new-console-output/reducers/messages.js
--- a/devtools/client/webconsole/new-console-output/reducers/messages.js
+++ b/devtools/client/webconsole/new-console-output/reducers/messages.js
@@ -9,51 +9,55 @@ const Immutable = require("devtools/clie
 const constants = require("devtools/client/webconsole/new-console-output/constants");
 
 const MessageState = Immutable.Record({
   messagesById: Immutable.List(),
   messagesUiById: Immutable.List(),
 });
 
 function messages(state = new MessageState(), action) {
-  const messagesById = state.messagesById;
-  const messagesUiById = state.messagesUiById;
-
   switch (action.type) {
     case constants.MESSAGE_ADD:
-      let newMessage = action.message;
+      let newMessages = action.messages;
 
-      if (newMessage.type === constants.MESSAGE_TYPE.NULL_MESSAGE) {
-        return state;
+      for (let newMessage of newMessages) {
+        let messagesById = state.messagesById;
+        let messagesUiById = state.messagesUiById;
+        if (newMessage.type === constants.MESSAGE_TYPE.NULL_MESSAGE) {
+          // return state;
+          continue;
+        }
+
+        if (newMessage.allowRepeating && messagesById.size > 0) {
+          let lastMessage = messagesById.last();
+          if (lastMessage.repeatId === newMessage.repeatId) {
+            state = state.withMutations(function (record) {
+              record.set("messagesById", messagesById.pop().push(
+                newMessage.set("repeat", lastMessage.repeat + 1)
+              ));
+            });
+          }
+        }
+
+        state = state.withMutations(function (record) {
+          record.set("messagesById", messagesById.push(newMessage));
+          if (newMessage.type === "trace") {
+            record.set("messagesUiById", messagesUiById.push(newMessage.id));
+          }
+        });
       }
 
-      if (newMessage.allowRepeating && messagesById.size > 0) {
-        let lastMessage = messagesById.last();
-        if (lastMessage.repeatId === newMessage.repeatId) {
-          return state.withMutations(function (record) {
-            record.set("messagesById", messagesById.pop().push(
-              newMessage.set("repeat", lastMessage.repeat + 1)
-            ));
-          });
-        }
-      }
-
-      return state.withMutations(function (record) {
-        record.set("messagesById", messagesById.push(newMessage));
-        if (newMessage.type === "trace") {
-          record.set("messagesUiById", messagesUiById.push(newMessage.id));
-        }
-      });
+      return state;
     case constants.MESSAGES_CLEAR:
       return state.withMutations(function (record) {
         record.set("messagesById", Immutable.List());
         record.set("messagesUiById", Immutable.List());
       });
     case constants.MESSAGE_OPEN:
-      return state.set("messagesUiById", messagesUiById.push(action.id));
+      return state.set("messagesUiById", state.messagesUiById.push(action.id));
     case constants.MESSAGE_CLOSE:
       let index = state.messagesUiById.indexOf(action.id);
       return state.deleteIn(["messagesUiById", index]);
   }
 
   return state;
 }
 
diff --git a/devtools/client/webconsole/webconsole.js b/devtools/client/webconsole/webconsole.js
--- a/devtools/client/webconsole/webconsole.js
+++ b/devtools/client/webconsole/webconsole.js
@@ -3289,19 +3289,17 @@ WebConsoleConnectionProxy.prototype = {
       console.error("Web Console getCachedMessages error: invalid state.");
     }
 
     let messages =
       response.messages.concat(...this.webConsoleClient.getNetworkEvents());
     messages.sort((a, b) => a.timeStamp - b.timeStamp);
 
     if (this.webConsoleFrame.NEW_CONSOLE_OUTPUT_ENABLED) {
-      for (let packet of messages) {
-        this.dispatchMessageAdd(packet);
-      }
+      this.dispatchMessageAdd(messages);
     } else {
       this.webConsoleFrame.displayCachedMessages(messages);
       if (!this._hasNativeConsoleAPI) {
         this.webConsoleFrame.logWarningAboutReplacedAPI();
       }
     }
 
     this.connected = true;
