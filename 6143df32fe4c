
# HG changeset patch
# User Lin Clark <lclark@mozilla.com>
# Date 1474643594 14400
# Node ID 6143df32fe4cf98d636dd6bf358353bf3b7dc87a
# Parent  1ea8ddeea1c84379f315e3978ad1022c763c37b1
Bug 1305064 - New console frontend: Fix cached message handling. r=bgrins

diff --git a/devtools/client/webconsole/webconsole.js b/devtools/client/webconsole/webconsole.js
--- a/devtools/client/webconsole/webconsole.js
+++ b/devtools/client/webconsole/webconsole.js
@@ -1235,36 +1235,48 @@ WebConsoleFrame.prototype = {
    *        Array of cached messages coming from the remote Web Console
    *        content instance.
    */
   displayCachedMessages: function (remoteMessages) {
     if (!remoteMessages.length) {
       return;
     }
 
+
+    var m = [];
     remoteMessages.forEach(function (message) {
-      switch (message._type) {
-        case "PageError": {
-          let category = Utils.categoryForScriptError(message);
-          this.outputMessage(category, this.reportPageError,
-                             [category, message]);
-          break;
+      if (this.NEW_CONSOLE_OUTPUT_ENABLED) {
+        const isCssPageError = message._type == "PageError"
+          && Utils.categoryForScriptError(message) === CATEGORY_CSS;
+        if (!isCssPageError) {
+          m.push(message);
         }
-        case "LogMessage":
-          this.handleLogMessage(message);
-          break;
-        case "ConsoleAPI":
-          this.outputMessage(CATEGORY_WEBDEV, this.logConsoleAPIMessage,
-                             [message]);
-          break;
-        case "NetworkEvent":
-          this.outputMessage(CATEGORY_NETWORK, this.logNetEvent, [message]);
-          break;
+      } else {
+        switch (message._type) {
+          case "PageError": {
+            let category = Utils.categoryForScriptError(message);
+            this.outputMessage(category, this.reportPageError,
+                              [category, message]);
+            break;
+          }
+          case "LogMessage":
+            this.handleLogMessage(message);
+            break;
+          case "ConsoleAPI":
+            this.outputMessage(CATEGORY_WEBDEV, this.logConsoleAPIMessage,
+                              [message]);
+            break;
+          case "NetworkEvent":
+            this.outputMessage(CATEGORY_NETWORK, this.logNetEvent, [message]);
+            break;
+        }
       }
     }, this);
+
+    this.dispatchMessageAdd(m);
   },
 
   /**
    * Logs a message to the Web Console that originates from the Web Console
    * server.
    *
    * @param object message
    *        The message received from the server.
@@ -3288,23 +3300,19 @@ WebConsoleConnectionProxy.prototype = {
       // connection attempt is successful, nonetheless.
       console.error("Web Console getCachedMessages error: invalid state.");
     }
 
     let messages =
       response.messages.concat(...this.webConsoleClient.getNetworkEvents());
     messages.sort((a, b) => a.timeStamp - b.timeStamp);
 
-    if (this.webConsoleFrame.NEW_CONSOLE_OUTPUT_ENABLED) {
-      this.dispatchMessageAdd(messages);
-    } else {
-      this.webConsoleFrame.displayCachedMessages(messages);
-      if (!this._hasNativeConsoleAPI) {
-        this.webConsoleFrame.logWarningAboutReplacedAPI();
-      }
+    this.webConsoleFrame.displayCachedMessages(messages);
+    if (!this._hasNativeConsoleAPI) {
+      this.webConsoleFrame.logWarningAboutReplacedAPI();
     }
 
     this.connected = true;
     this._connectDefer.resolve(this);
   },
 
   /**
    * The "pageError" message type handler. We redirect any page errors to the UI
