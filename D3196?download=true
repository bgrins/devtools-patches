diff --git a/devtools/client/webconsole/components/JSTerm.js b/devtools/client/webconsole/components/JSTerm.js
--- a/devtools/client/webconsole/components/JSTerm.js
+++ b/devtools/client/webconsole/components/JSTerm.js
@@ -156,6 +156,40 @@
 
     if (this.props.codeMirrorEnabled) {
       if (this.node) {
+        const onArrowUp = () => {
+          let inputUpdated;
+          if (this.autocompletePopup.isOpen) {
+            this.autocompletePopup.selectPreviousItem();
+            return null;
+          }
+
+          if (this.canCaretGoPrevious()) {
+            inputUpdated = this.historyPeruse(HISTORY_BACK);
+          }
+
+          if (!inputUpdated) {
+            return "CodeMirror.Pass";
+          }
+          return null;
+        };
+
+        const onArrowDown = () => {
+          let inputUpdated;
+          if (this.autocompletePopup.isOpen) {
+            this.autocompletePopup.selectNextItem();
+            return null;
+          }
+
+          if (this.canCaretGoNext()) {
+            inputUpdated = this.historyPeruse(HISTORY_FORWARD);
+          }
+
+          if (!inputUpdated) {
+            return "CodeMirror.Pass";
+          }
+          return null;
+        };
+
         this.editor = new Editor({
           autofocus: true,
           enableCodeFolding: false,
@@ -206,39 +240,11 @@
               return true;
             },
 
-            "Up": () => {
-              let inputUpdated;
-              if (this.autocompletePopup.isOpen) {
-                this.autocompletePopup.selectPreviousItem();
-                return null;
-              }
-
-              if (this.canCaretGoPrevious()) {
-                inputUpdated = this.historyPeruse(HISTORY_BACK);
-              }
-
-              if (!inputUpdated) {
-                return "CodeMirror.Pass";
-              }
-              return null;
-            },
+            "Up": onArrowUp,
+            "Cmd-Up": onArrowUp,
 
-            "Down": () => {
-              let inputUpdated;
-              if (this.autocompletePopup.isOpen) {
-                this.autocompletePopup.selectNextItem();
-                return null;
-              }
-
-              if (this.canCaretGoNext()) {
-                inputUpdated = this.historyPeruse(HISTORY_FORWARD);
-              }
-
-              if (!inputUpdated) {
-                return "CodeMirror.Pass";
-              }
-              return null;
-            },
+            "Down": onArrowDown,
+            "Cmd-Down": onArrowDown,
 
             "Left": () => {
               if (this.autocompletePopup.isOpen || this.getAutoCompletionText()) {
diff --git a/devtools/client/webconsole/test/mochitest/browser_jsterm_history_arrow_keys.js b/devtools/client/webconsole/test/mochitest/browser_jsterm_history_arrow_keys.js
--- a/devtools/client/webconsole/test/mochitest/browser_jsterm_history_arrow_keys.js
+++ b/devtools/client/webconsole/test/mochitest/browser_jsterm_history_arrow_keys.js
@@ -104,6 +104,40 @@
 
   EventUtils.synthesizeKey("KEY_ArrowDown");
   checkInput("|", "↓: input is empty");
+
+  info("Test that Cmd + ArrowDown/Up works as expected on OSX");
+  if (Services.appinfo.OS === "Darwin") {
+    const option = {metaKey: true};
+    EventUtils.synthesizeKey("KEY_ArrowUp", option);
+    checkInput("document.location|", "Cmd+↑ : input is correct");
+
+    EventUtils.synthesizeKey("KEY_ArrowUp", option);
+    checkInput("document;\nwindow;\ndocument.body|", "Cmd+↑ : input is correct");
+
+    EventUtils.synthesizeKey("KEY_ArrowUp", option);
+    checkInput("|document;\nwindow;\ndocument.body",
+      "Cmd+↑ : cursor is moved to the beginning of the input");
+
+    EventUtils.synthesizeKey("KEY_ArrowUp", option);
+    checkInput("document.body|", "Cmd+↑: input is correct");
+
+    EventUtils.synthesizeKey("KEY_ArrowDown", option);
+    checkInput("document;\nwindow;\ndocument.body|", "Cmd+↓ : input is correct");
+
+    EventUtils.synthesizeKey("KEY_ArrowUp", option);
+    checkInput("|document;\nwindow;\ndocument.body",
+      "Cmd+↑ : cursor is moved to the beginning of the input");
+
+    EventUtils.synthesizeKey("KEY_ArrowDown", option);
+    checkInput("document;\nwindow;\ndocument.body|",
+      "Cmd+↓ : cursor is moved to the end of the input");
+
+    EventUtils.synthesizeKey("KEY_ArrowDown", option);
+    checkInput("document.location|", "Cmd+↓ : input is correct");
+
+    EventUtils.synthesizeKey("KEY_ArrowDown", option);
+    checkInput("|", "Cmd+↓: input is empty");
+  }
 }
 
 function setCursorAtPosition(jsterm, pos) {

