# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  7bf0c322a8bc1ecc2c4180cbe7410dd7f657212d

diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -1272,16 +1272,18 @@ var gBrowserInit = {
     }
 
     // Call this after we set attributes that might change toolbars' computed
     // text color.
     ToolbarIconColor.init();
   },
 
   onDOMContentLoaded() {
+    document.documentElement.removeAttribute("hidden");
+
     gBrowser = window._gBrowser;
     delete window._gBrowser;
     gBrowser.init();
 
     window.docShell.treeOwner
           .QueryInterface(Ci.nsIInterfaceRequestor)
           .getInterface(Ci.nsIXULWindow)
           .XULBrowserWindow = window.XULBrowserWindow;
diff --git a/browser/base/content/browser.xul b/browser/base/content/browser.xul
--- a/browser/base/content/browser.xul
+++ b/browser/base/content/browser.xul
@@ -66,19 +66,17 @@
         titlemenuseparator="&mainWindow.titlemodifiermenuseparator;"
         windowtype="navigator:browser"
         macanimationtype="document"
         screenX="4" screenY="4"
         fullscreenbutton="true"
         sizemode="normal"
         retargetdocumentfocus="urlbar"
         persist="screenX screenY width height sizemode"
-#ifdef BROWSER_XHTML
         hidden="true"
-#endif
         >
 
 # All JS files which are needed by browser.xul and other top level windows to
 # support MacOS specific features *must* go into the global-scripts.inc file so
 # that they can be shared with macWindow.inc.xul.
 #include global-scripts.inc
 
 <script type="application/javascript"
@@ -93,21 +91,22 @@ xmlns="http://www.w3.org/1999/xhtml"
   window.onunload = gBrowserInit.onUnload.bind(gBrowserInit);
   window.onclose = WindowIsClosing;
 
 #ifdef BROWSER_XHTML
   window.addEventListener("readystatechange", () => {
     // We initially hide the window to prevent layouts during parse. This lets us
     // avoid accidental XBL construction and better match browser.xul (see Bug 1497975).
     gBrowserInit.onBeforeInitialXULLayout();
-    document.documentElement.removeAttribute("hidden");
+    //document.documentElement.removeAttribute("hidden");
   }, { once: true, capture: true });
 #else
   window.addEventListener("MozBeforeInitialXULLayout",
     gBrowserInit.onBeforeInitialXULLayout.bind(gBrowserInit), { once: true });
+    //document.documentElement.removeAttribute("hidden");
 #endif
   // The listener of DOMContentLoaded must be set on window, rather than
   // document, because the window can go away before the event is fired.
   // In that case, we don't want to initialize anything, otherwise we
   // may be leaking things because they will never be destroyed after.
   window.addEventListener("DOMContentLoaded",
     gBrowserInit.onDOMContentLoaded.bind(gBrowserInit), { once: true });
 </script>
@@ -1314,16 +1313,17 @@ xmlns="http://www.w3.org/1999/xhtml"
       </toolbaritem>
     </toolbarpalette>
     <box id="library-animatable-box" class="toolbarbutton-animatable-box">
       <image class="toolbarbutton-animatable-image"/>
     </box>
   </toolbox>
 
   <hbox id="fullscr-toggler" hidden="true"/>
+  <box id="browser-container" hidden="true"></box>
 
   <deck id="content-deck" flex="1">
     <hbox flex="1" id="browser">
       <vbox id="browser-border-start" hidden="true" layer="true"/>
       <vbox id="sidebar-box" hidden="true" class="chromeclass-extrachrome">
         <sidebarheader id="sidebar-header" align="center">
           <toolbarbutton id="sidebar-switcher-target" flex="1" class="tabbable">
             <image id="sidebar-icon" consumeanchor="sidebar-switcher-target"/>
diff --git a/browser/base/content/tabbrowser.js b/browser/base/content/tabbrowser.js
--- a/browser/base/content/tabbrowser.js
+++ b/browser/base/content/tabbrowser.js
@@ -1818,17 +1818,56 @@ window._gBrowser = {
     openerWindow,
     recordExecution,
     remoteType,
     replayExecution,
     sameProcessAsFrameLoader,
     uriIsAboutBlank,
     userContextId,
   } = {}) {
-    let b = document.createXULElement("browser");
+
+    // Create the browserStack container
+    let stack = document.createXULElement("stack");
+    stack.append(
+    MozXULElement.parseXULToFragment(`
+      <browser />
+    `));
+    stack.className = "browserStack";
+    stack.setAttribute("flex", "1");
+
+    // We set large flex on both containers to allow the devtools toolbox to
+    // set a flex attribute. We don't want the toolbox to actually take up free
+    // space, but we do want it to collapse when the window shrinks, and with
+    // flex=0 it can't. When the toolbox is on the bottom it's a sibling of
+    // browserSidebarContainer, and when it's on the side it's a sibling of
+    // browserContainer.
+    let browserContainer = document.createXULElement("vbox");
+    browserContainer.className = "browserContainer";
+    browserContainer.appendChild(stack);
+    browserContainer.setAttribute("flex", "10000");
+
+    let browserSidebarContainer = document.createXULElement("hbox");
+    browserSidebarContainer.className = "browserSidebarContainer";
+    browserSidebarContainer.appendChild(browserContainer);
+    browserSidebarContainer.setAttribute("flex", "10000");
+
+    // Add the Message and the Browser to the box
+    let notificationbox = document.createXULElement("notificationbox");
+    notificationbox.setAttribute("flex", "1");
+    notificationbox.setAttribute("notificationside", "top");
+    notificationbox.appendChild(browserSidebarContainer);
+
+
+    let container = document.querySelector("#browser-container");
+    container.prepend(notificationbox);
+
+
+    let b = stack.firstElementChild;
+    console.log(container, b);
+
     // Use the JSM global to create the permanentKey, so that if the
     // permanentKey is held by something after this window closes, it
     // doesn't keep the window alive.
     b.permanentKey = new (Cu.getGlobalForObject(Services).Object);
 
     const defaultBrowserAttributes = {
       contextmenu: "contentAreaContextMenu",
       datetimepicker: "DateTimePickerPanel",
@@ -1908,44 +1947,16 @@ window._gBrowser = {
     // This will be used by gecko to control the name of the opened
     // window.
     if (name) {
       // XXX: The `name` property is special in HTML and XUL. Should
       // we use a different attribute name for this?
       b.setAttribute("name", name);
     }
 
-    // Create the browserStack container
-    let stack = document.createXULElement("stack");
-    stack.className = "browserStack";
-    stack.appendChild(b);
-    stack.setAttribute("flex", "1");
-
-    // We set large flex on both containers to allow the devtools toolbox to
-    // set a flex attribute. We don't want the toolbox to actually take up free
-    // space, but we do want it to collapse when the window shrinks, and with
-    // flex=0 it can't. When the toolbox is on the bottom it's a sibling of
-    // browserSidebarContainer, and when it's on the side it's a sibling of
-    // browserContainer.
-    let browserContainer = document.createXULElement("vbox");
-    browserContainer.className = "browserContainer";
-    browserContainer.appendChild(stack);
-    browserContainer.setAttribute("flex", "10000");
-
-    let browserSidebarContainer = document.createXULElement("hbox");
-    browserSidebarContainer.className = "browserSidebarContainer";
-    browserSidebarContainer.appendChild(browserContainer);
-    browserSidebarContainer.setAttribute("flex", "10000");
-
-    // Add the Message and the Browser to the box
-    let notificationbox = document.createXULElement("notificationbox");
-    notificationbox.setAttribute("flex", "1");
-    notificationbox.setAttribute("notificationside", "top");
-    notificationbox.appendChild(browserSidebarContainer);
-
     // Prevent the superfluous initial load of a blank document
     // if we're going to load something other than about:blank.
     if (!uriIsAboutBlank) {
       b.setAttribute("nodefaultsrc", "true");
     }
 
     return b;
   },
diff --git a/toolkit/content/widgets/browser.xml b/toolkit/content/widgets/browser.xml
--- a/toolkit/content/widgets/browser.xml
+++ b/toolkit/content/widgets/browser.xml
@@ -970,16 +970,17 @@
 
       <!-- This is managed by the tabbrowser -->
       <field name="lastURI">null</field>
 
       <field name="mDestroyed">false</field>
 
       <constructor>
         <![CDATA[
+        console.log("XBL constrcutor", this);
         this.construct();
         ]]>
       </constructor>
 
       <method name="construct">
         <body><![CDATA[
           if (this.isRemoteBrowser) {
             /*
@@ -1104,16 +1105,17 @@
             }
 
           }
         ]]></body>
       </method>
 
       <destructor>
         <![CDATA[
+        console.trace("Browser destructor", this);
           this.destroy();
         ]]>
       </destructor>
 
       <!-- This is necessary because the destructor doesn't always get called when
            we are removed from a tabbrowser. This will be explicitly called by tabbrowser.-->
       <method name="destroy">
         <body><![CDATA[
