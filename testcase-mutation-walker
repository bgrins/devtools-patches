# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  1070b7e7836025bcd0cb84396fe090f9e5120fd0

diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -1485,16 +1485,60 @@ var gBrowserInit = {
           Services.telemetry.getHistogramById("MASTER_PASSWORD_ENABLED").add(mpEnabled);
         }
       }, 5000);
 
       PanicButtonNotifier.init();
     });
     this.delayedStartupFinished = true;
 
+// console.log("BROWSER.JS LOADING", window.location.toString())
+// if (window.location.toString() === "chrome://browser/content/browser.xul") {
+// setTimeout(() => {
+
+//   console.log("Traversing DOM", window, window.document, Ci.nsIDOMNodeFilter.SHOW_ALL);
+
+//   let maxIterations = 1000;
+//   let receivedMutation = false;
+//   let observer = new window.MutationObserver((mutation) => {
+//     console.log("Received mutation", mutation);
+//     receivedMutation = true;
+//   });
+//   observer.observe(window.document, {
+//     nativeAnonymousChildList: true,
+//     attributes: true,
+//     characterData: true,
+//     childList: true,
+//     subtree: true
+//   });
+
+//   let walker = Cc["@mozilla.org/inspector/deep-tree-walker;1"].createInstance(Ci.inIDeepTreeWalker);
+//   walker.showAnonymousContent = true;
+//   walker.showSubDocuments = true;
+//   walker.showDocumentsAsNodes = true;
+//   walker.init(window.document, Ci.nsIDOMNodeFilter.SHOW_ALL);
+
+//   let nextNode = walker.currentNode;
+//   while (nextNode) {
+//     nextNode = walker.nextNode();
+//     console.log("Iterated to ", nextNode, walker.currentNode);
+//     if (receivedMutation) {
+//       throw "Should not have received mutation when iterating";
+//     }
+//     if (maxIterations-- <= 0) {
+//       break;
+//     }
+//   }
+
+//   console.log("Any mutations?", observer.takeRecords());
+//   observer.disconnect();
+
+// }, 15000);
+// }
+
     Services.obs.notifyObservers(window, "browser-delayed-startup-finished", "");
     TelemetryTimestamps.add("delayedStartupFinished");
   },
 
   // Returns the URI(s) to load at startup.
   _getUriToLoad: function () {
     // window.arguments[0]: URI to load (string), or an nsISupportsArray of
     //                      nsISupportsStrings to load, or a xul:tab of
@@ -8288,10 +8332,9 @@ TabModalPromptBox.prototype = {
 
   get browser() {
     let browser = this._weakBrowserRef.get();
     if (!browser) {
       throw "Stale promptbox! The associated browser is gone.";
     }
     return browser;
   },
-};
-
+};
\ No newline at end of file
diff --git a/devtools/server/actors/inspector.js b/devtools/server/actors/inspector.js
--- a/devtools/server/actors/inspector.js
+++ b/devtools/server/actors/inspector.js
@@ -1318,16 +1318,55 @@ var WalkerActor = protocol.ActorClass({
 
     // Ensure that the root document node actor is ready and
     // managed.
     this.rootNode = this.document();
 
     this.reflowObserver = getLayoutChangesObserver(this.tabActor);
     this._onReflows = this._onReflows.bind(this);
     this.reflowObserver.on("reflows", this._onReflows);
+
+
+    let window = this.rootWin;
+    console.log("WalkerActor attached to", window.location.toString());
+    let maxIterations = 1000;
+    let receivedMutation = false;
+    let observer = new window.MutationObserver((mutation) => {
+      // console.log("Received mutation", mutation);
+      receivedMutation = true;
+    });
+    observer.observe(window.document, {
+      nativeAnonymousChildList: true,
+      attributes: true,
+      characterData: true,
+      childList: true,
+      subtree: true
+    });
+
+    let walker = Cc["@mozilla.org/inspector/deep-tree-walker;1"].createInstance(Ci.inIDeepTreeWalker);
+    walker.showAnonymousContent = true;
+    walker.showSubDocuments = true;
+    walker.showDocumentsAsNodes = true;
+    walker.init(window.document, Ci.nsIDOMNodeFilter.SHOW_ALL);
+
+    let nextNode = walker.currentNode;
+    while (nextNode) {
+      nextNode = walker.nextNode();
+      // console.log("Iterated to ", nextNode, walker.currentNode);
+      if (receivedMutation) {
+        observer.disconnect();
+        throw "Should not have received mutation when iterating";
+      }
+      if (maxIterations-- <= 0) {
+        break;
+      }
+    }
+
+    console.log("Any mutations?", observer.takeRecords());
+    observer.disconnect();
   },
 
   // Returns the JSON representation of this object over the wire.
   form: function() {
     return {
       actor: this.actorID,
       root: this.rootNode.form(),
       traits: {
