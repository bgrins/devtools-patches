# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  1a99e078866599e707a54fa7e451fa07637fac9a
Bug 1139644 - Flash only relevant attributes in markup view when changed;r=pbrosset

diff --git a/browser/devtools/markupview/markup-view.js b/browser/devtools/markupview/markup-view.js
--- a/browser/devtools/markupview/markup-view.js
+++ b/browser/devtools/markupview/markup-view.js
@@ -779,17 +779,17 @@ MarkupView.prototype = {
   _flashMutatedNodes: function(aMutations) {
     let addedOrEditedContainers = new Set();
     let removedContainers = new Set();
 
     for (let {type, target, added, removed} of aMutations) {
       let container = this.getContainer(target);
 
       if (container) {
-        if (type === "attributes" || type === "characterData") {
+        if (type === "characterData") {
           addedOrEditedContainers.add(container);
         } else if (type === "childList") {
           // If there has been removals, flash the parent
           if (removed.length) {
             removedContainers.add(container);
           }
 
           // If there has been additions, flash the nodes if their associated
@@ -2357,16 +2357,18 @@ function ElementEditor(aContainer, aNode
   this.closeTag = null;
   this.attrList = null;
   this.newAttr = null;
   this.closeElt = null;
 
   // Create the main editor
   this.template("element", this);
 
+  this.animationTimers = new WeakMap();
+
   // Make the tag name editable (unless this is a remote node or
   // a document element)
   if (!aNode.isDocumentElement) {
     this.tag.setAttribute("tabindex", "0");
     editableField({
       element: this.tag,
       trigger: "dblclick",
       stopOnReturn: true,
@@ -2405,16 +2407,40 @@ function ElementEditor(aContainer, aNode
   this.tag.textContent = tagName;
   this.closeTag.textContent = tagName;
   this.eventNode.style.display = this.node.hasEventListeners ? "inline-block" : "none";
 
   this.update();
 }
 
 ElementEditor.prototype = {
+
+  // XXX: some of this is copy pasted from set flashed() on markup container.
+  // Should this be shared functionality?
+  flashElement: function(el) {
+    // Make sure the animation class is not here
+    el.classList.remove("flash-out");
+
+    // Change the background
+    el.classList.add("theme-bg-contrast");
+
+    let timer = this.animationTimers.get(el);
+    if (timer) {
+      this.markup.win.clearTimeout(timer);
+    }
+
+    this.animationTimers.set(el, this.markup.win.setTimeout(() => {
+      // Add the animation class to smoothly remove the background
+      el.classList.add("flash-out");
+
+      // Remove the background
+      el.classList.remove("theme-bg-contrast");
+    }, this.markup.CONTAINER_FLASHING_DURATION));
+  },
+
   /**
    * Update the state of the editor from the node.
    */
   update: function() {
     let attrs = this.node.attributes || [];
     let attrsToRemove = new Set(this.attrList.querySelectorAll(".attreditor"));
 
     // Only loop through the current attributes on the node, anything that's
@@ -2431,16 +2457,23 @@ ElementEditor.prototype = {
         // Just show it (it's hidden by default due to the template).
         attrsToRemove.delete(el);
         el.style.removeProperty("display");
       } else {
         // Create a new editor, because the value of an existing attribute
         // has changed.
         let attribute = this._createAttribute(attr);
         attribute.style.removeProperty("display");
+
+        // Temporarily flash the attribute to highlight the change.
+        // XXX: Also flash the attribute name element if it's new.
+        if (valueChanged) {
+          let val = attribute.querySelector(".attr-value");
+          this.flashElement(val);
+        }
       }
     }
 
     for (let el of attrsToRemove) {
       el.remove();
     }
   },
 
