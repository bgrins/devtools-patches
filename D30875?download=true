diff --git a/devtools/client/webconsole/components/message-types/ConsoleApiCall.js b/devtools/client/webconsole/components/message-types/ConsoleApiCall.js
--- a/devtools/client/webconsole/components/message-types/ConsoleApiCall.js
+++ b/devtools/client/webconsole/components/message-types/ConsoleApiCall.js
@@ -93,8 +93,17 @@
         className: "console-message-prefix",
       }, `${prefix}: `));
     }
-  } else {
+  } else if (typeof messageText === "string") {
     messageBody = messageText;
+  } else if (messageText) {
+    messageBody = GripMessageBody({
+      dispatch,
+      messageId,
+      grip: messageText,
+      serviceContainer,
+      useQuotes: false,
+      type,
+    });
   }
 
   let attachment = null;
@@ -140,6 +149,7 @@
     timeStamp,
     timestampsVisible,
     parameters,
+    message,
     maybeScrollToBottom,
   });
 }
diff --git a/devtools/client/webconsole/test/components/console-api-call.log-messages.test.js b/devtools/client/webconsole/test/components/console-api-call.log-messages.test.js
--- a/devtools/client/webconsole/test/components/console-api-call.log-messages.test.js
+++ b/devtools/client/webconsole/test/components/console-api-call.log-messages.test.js
@@ -8,6 +8,8 @@
 
 // React
 const { createFactory } = require("devtools/client/shared/vendor/react");
+const { setupStore } = require("devtools/client/webconsole/test/helpers");
+const Provider = createFactory(require("react-redux").Provider);
 
 // Components under test.
 const ConsoleApiCall = createFactory(require("devtools/client/webconsole/components/message-types/ConsoleApiCall"));
@@ -36,6 +38,19 @@
       // There should not be the location
       expect(wrapper.find(".message-location").text()).toBe("");
     });
+
+    it("renders longString logMessage grips", () => {
+      const message =
+        prepareMessage(logMessageLongStringStubPacket, {getNextId: () => "1"});
+
+      // We need to wrap the ConsoleApiElement in a Provider in order for the
+      // ObjectInspector to work.
+      const wrapper = render(
+        Provider({ store: setupStore() }, ConsoleApiCall({ message, serviceContainer }))
+      );
+
+      expect(wrapper.find(".message-body").text()).toInclude(initialText);
+    });
   });
 });
 
@@ -53,3 +68,20 @@
   "message": "foobar test",
   "timeStamp": 1519052480060,
 };
+
+const multilineFullText = `a\n${Array(20000)
+  .fill("a")
+  .join("")}`;
+const fullTextLength = multilineFullText.length;
+const initialText = multilineFullText.substring(0, 10000);
+const logMessageLongStringStubPacket = {
+  "from": "server1.conn0.consoleActor2",
+  "type": "logMessage",
+  "message": {
+    type: "longString",
+    initial: initialText,
+    length: fullTextLength,
+    actor: "server1.conn1.child1/longString58",
+  },
+  "timeStamp": 1519052480060,
+};

