# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  5e862fc4496e6fd7bc4d476c1462fe54d575c53f

diff --git a/devtools/server/actors/targets/browsing-context.js b/devtools/server/actors/targets/browsing-context.js
--- a/devtools/server/actors/targets/browsing-context.js
+++ b/devtools/server/actors/targets/browsing-context.js
@@ -100,16 +100,18 @@ function getChildDocShells(parentDocShel
 
   const docShells = [];
   for (const docShell of allDocShells) {
     docShell
       .QueryInterface(Ci.nsIInterfaceRequestor)
       .getInterface(Ci.nsIWebProgress);
     docShells.push(docShell);
   }
+
+  console.trace("GetChildDocShells", parentDocShell.DOMWindow && parentDocShell.DOMWindow.location.toString(), docShells.map(d => d.DOMWindow.location.toString()));
   return docShells;
 }
 
 exports.getChildDocShells = getChildDocShells;
 
 /**
  * Browser-specific actors.
  */
diff --git a/devtools/server/actors/targets/parent-process.js b/devtools/server/actors/targets/parent-process.js
--- a/devtools/server/actors/targets/parent-process.js
+++ b/devtools/server/actors/targets/parent-process.js
@@ -93,69 +93,76 @@ parentProcessTargetPrototype.isRootActor
 Object.defineProperty(parentProcessTargetPrototype, "docShells", {
   get: function() {
     // Iterate over all top-level windows and all their docshells.
     let docShells = [];
     for (const { docShell } of Services.ww.getWindowEnumerator()) {
       docShells = docShells.concat(getChildDocShells(docShell));
     }
 
+    console.log(docShells.map(d => d.DOMWindow.location.toString()));
+
     return docShells;
   },
 });
 
 parentProcessTargetPrototype.observe = function(subject, topic, data) {
   BrowsingContextTargetActor.prototype.observe.call(this, subject, topic, data);
   if (!this.attached) {
     return;
   }
 
   subject.QueryInterface(Ci.nsIDocShell);
-
-  if (topic == "chrome-webnavigation-create") {
+  console.log(topic);
+  if (
+    topic == "webnavigation-create" ||
+    topic == "chrome-webnavigation-create"
+  ) {
     this._onDocShellCreated(subject);
   } else if (topic == "chrome-webnavigation-destroy") {
     this._onDocShellDestroy(subject);
   }
 };
 
 parentProcessTargetPrototype._attach = function() {
   if (this.attached) {
     return false;
   }
 
   BrowsingContextTargetActor.prototype._attach.call(this);
 
   // Listen for any new/destroyed chrome docshell
+  Services.obs.addObserver(this, "webnavigation-create");
   Services.obs.addObserver(this, "chrome-webnavigation-create");
   Services.obs.addObserver(this, "chrome-webnavigation-destroy");
 
   // Iterate over all top-level windows.
   for (const { docShell } of Services.ww.getWindowEnumerator()) {
-    if (docShell == this.docShell) {
-      continue;
-    }
+    // if (docShell == this.docShell) {
+    //   continue;
+    // }
     this._progressListener.watch(docShell);
   }
   return undefined;
 };
 
 parentProcessTargetPrototype._detach = function() {
   if (!this.attached) {
     return false;
   }
 
+  Services.obs.removeObserver(this, "webnavigation-create");
   Services.obs.removeObserver(this, "chrome-webnavigation-create");
   Services.obs.removeObserver(this, "chrome-webnavigation-destroy");
 
   // Iterate over all top-level windows.
   for (const { docShell } of Services.ww.getWindowEnumerator()) {
-    if (docShell == this.docShell) {
-      continue;
-    }
+    // if (docShell == this.docShell) {
+    //   continue;
+    // }
     this._progressListener.unwatch(docShell);
   }
 
   return BrowsingContextTargetActor.prototype._detach.call(this);
 };
 
 exports.parentProcessTargetPrototype = parentProcessTargetPrototype;
 exports.ParentProcessTargetActor = ActorClassWithSpec(
diff --git a/toolkit/content/widgets/browser-custom-element.js b/toolkit/content/widgets/browser-custom-element.js
--- a/toolkit/content/widgets/browser-custom-element.js
+++ b/toolkit/content/widgets/browser-custom-element.js
@@ -477,16 +477,20 @@
         this.a11ymodeBrowser.setAttribute(
           "remoteType",
           this.getAttribute("remoteType")
         );
         this.a11ymodeBrowser.setAttribute(
           "remote",
           this.getAttribute("remote")
         );
+
+        // this.a11ymodeBrowser.setAttribute("message", "true");
+        // this.a11ymodeBrowser.setAttribute("messagemanagergroup", "browsers");
+
         this.a11ymodeBrowser.setAttribute("type", "content");
         this.a11ymodeBrowser.setAttribute(
           "contextmenu",
           this.getAttribute("contextmenu")
         );
         this.a11ymodeBrowser.setAttribute(
           "datetimepicker",
           this.getAttribute("datetimepicker")
