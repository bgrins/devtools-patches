# HG changeset patch
# Parent cd3e7db459a8424c6688c01d362a5afae4e4dade
# User Brian Grinstead <bgrinstead@mozilla.com>
minimal test case for leak

diff --git a/browser/base/content/browser-devedition.js b/browser/base/content/browser-devedition.js
--- a/browser/base/content/browser-devedition.js
+++ b/browser/base/content/browser-devedition.js
@@ -2,84 +2,16 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 /**
  * Listeners for the DevEdition theme.  This adds an extra stylesheet
  * to browser.xul if a pref is set and no other themes are applied.
  */
 let DevEdition = {
-  _prefName: "browser.devedition.theme.enabled",
-  _themePrefName: "general.skins.selectedSkin",
-  _lwThemePrefName: "lightweightThemes.isThemeSelected",
-  _devtoolsThemePrefName: "devtools.theme",
-
-  styleSheetLocation: "chrome://browser/skin/devedition.css",
-  styleSheet: null,
-
   init: function () {
-    this._updateDevtoolsThemeAttribute();
-    this._updateStyleSheet();
-
-    // Listen for changes to all prefs except for complete themes.
-    // No need for this since changing a complete theme requires a
-    // restart.
-    Services.prefs.addObserver(this._lwThemePrefName, this, false);
-    Services.prefs.addObserver(this._prefName, this, false);
-    Services.prefs.addObserver(this._devtoolsThemePrefName, this, false);
-  },
-
-  observe: function (subject, topic, data) {
-    if (topic == "nsPref:changed") {
-      if (data == this._devtoolsThemePrefName) {
-        this._updateDevtoolsThemeAttribute();
-      } else {
-        this._updateStyleSheet();
-      }
-    }
-  },
-
-  _updateDevtoolsThemeAttribute: function() {
-    // Set an attribute on root element to make it possible
-    // to change colors based on the selected devtools theme.
-    document.documentElement.setAttribute("devtoolstheme",
-      Services.prefs.getCharPref(this._devtoolsThemePrefName));
-  },
-
-  _updateStyleSheet: function() {
-    // Only try to apply the dev edition theme if it is preffered
-    // on and there are no other themes applied.
-    let lightweightThemeSelected = false;
-    try {
-      lightweightThemeSelected = Services.prefs.getBoolPref(this._lwThemePrefName);
-    } catch(e) {}
-
-    let defaultThemeSelected = false;
-    try {
-       defaultThemeSelected = Services.prefs.getCharPref(this._themePrefName) == "classic/1.0";
-    } catch(e) {}
-
-    let deveditionThemeEnabled = Services.prefs.getBoolPref(this._prefName) &&
-      !lightweightThemeSelected && defaultThemeSelected;
-
-    if (deveditionThemeEnabled && !this.styleSheet) {
-      let styleSheetAttr = `href="${this.styleSheetLocation}" type="text/css"`;
-      let styleSheet = this.styleSheet = document.createProcessingInstruction(
-        'xml-stylesheet', styleSheetAttr);
-      this.styleSheet.addEventListener("load", function onLoad() {
-        styleSheet.removeEventListener("load", onLoad);
-        ToolbarIconColor.inferFromText();
-      });
-      document.insertBefore(this.styleSheet, document.documentElement);
-    } else if (!deveditionThemeEnabled && this.styleSheet) {
-      this.styleSheet.remove();
-      this.styleSheet = null;
-      ToolbarIconColor.inferFromText();
-    }
+    Services.obs.addObserver(this, "lightweight-theme-styling-update", false);
   },
 
   uninit: function () {
-    Services.prefs.removeObserver(this._lwThemePrefName, this);
-    Services.prefs.removeObserver(this._prefName, this);
-    Services.prefs.removeObserver(this._devtoolsThemePrefName, this);
-    this.styleSheet = null;
+    Services.obs.removeObserver(this, "lightweight-theme-styling-update", false);
   }
 };
diff --git a/browser/base/content/test/general/browser_devedition.js b/browser/base/content/test/general/browser_devedition.js
--- a/browser/base/content/test/general/browser_devedition.js
+++ b/browser/base/content/test/general/browser_devedition.js
@@ -1,69 +1,32 @@
 /*
  * Testing changes for Developer Edition theme.
  * A special stylesheet should be added to the browser.xul document
  * when browser.devedition.theme.enabled is set to true and no themes
  * are applied.
  */
-
-const PREF_DEVEDITION_THEME = "browser.devedition.theme.enabled";
-const PREF_THEME = "general.skins.selectedSkin";
-const PREF_LWTHEME = "lightweightThemes.isThemeSelected";
-const PREF_DEVTOOLS_THEME = "devtools.theme";
-
-registerCleanupFunction(() => {
-  // Set preferences back to their original values
-  Services.prefs.clearUserPref(PREF_DEVEDITION_THEME);
-  Services.prefs.clearUserPref(PREF_THEME);
-  Services.prefs.clearUserPref(PREF_LWTHEME);
-  Services.prefs.clearUserPref(PREF_DEVTOOLS_THEME);
-});
-
 function test() {
   waitForExplicitFinish();
-  startTests();
+  testLightweightThemePreview();
 }
 
-function startTests() {
-  info ("Setting browser.devedition.theme.enabled to false.");
-  Services.prefs.setBoolPref(PREF_DEVEDITION_THEME, false);
-  ok (!DevEdition.styleSheet, "There is no devedition style sheet when the pref is false.");
+function dummyLightweightTheme(id) {
+  return {
+    id: id,
+    name: id,
+    headerURL: "http://lwttest.invalid/a.png",
+    footerURL: "http://lwttest.invalid/b.png",
+    textcolor: "red",
+    accentcolor: "blue"
+  };
+}
 
-  info ("Setting browser.devedition.theme.enabled to true.");
-  Services.prefs.setBoolPref(PREF_DEVEDITION_THEME, true);
-  ok (DevEdition.styleSheet, "There is a devedition stylesheet when no themes are applied and pref is set.");
-
-  info ("Adding a lightweight theme.");
-  Services.prefs.setBoolPref(PREF_LWTHEME, true);
-  ok (!DevEdition.styleSheet, "The devedition stylesheet has been removed when a lightweight theme is applied.");
-
-  info ("Removing a lightweight theme.");
-  Services.prefs.setBoolPref(PREF_LWTHEME, false);
-  ok (DevEdition.styleSheet, "The devedition stylesheet has been added when a lightweight theme is removed.");
-
-  // There are no listeners for the complete theme pref since applying the theme
-  // requires a restart.
-  info ("Setting general.skins.selectedSkin to a custom string.");
-  Services.prefs.setCharPref(PREF_THEME, "custom-theme");
-  ok (DevEdition.styleSheet, "The devedition stylesheet is still here when a complete theme is added.");
-
-  info ("Resetting general.skins.selectedSkin to default value.");
-  Services.prefs.clearUserPref(PREF_THEME);
-  ok (DevEdition.styleSheet, "The devedition stylesheet is still here when a complete theme is removed.");
-
-  info ("Setting browser.devedition.theme.enabled to false.");
-  Services.prefs.setBoolPref(PREF_DEVEDITION_THEME, false);
-  ok (!DevEdition.styleSheet, "The devedition stylesheet has been removed.");
-
-  info ("Checking :root attributes based on devtools theme.");
-  Services.prefs.setCharPref(PREF_DEVTOOLS_THEME, "light");
-  is (document.documentElement.getAttribute("devtoolstheme"), "light",
-    "The documentElement has an attribute based on devtools theme.");
-  Services.prefs.setCharPref(PREF_DEVTOOLS_THEME, "dark");
-  is (document.documentElement.getAttribute("devtoolstheme"), "dark",
-    "The documentElement has an attribute based on devtools theme.");
-  Services.prefs.setCharPref(PREF_DEVTOOLS_THEME, "light");
-  is (document.documentElement.getAttribute("devtoolstheme"), "light",
-    "The documentElement has an attribute based on devtools theme.");
-
+function testLightweightThemePreview() {
+  let {LightweightThemeManager} = Components.utils.import("resource://gre/modules/LightweightThemeManager.jsm", {});
+  LightweightThemeManager.previewTheme(dummyLightweightTheme("preview0"));
+  LightweightThemeManager.previewTheme(dummyLightweightTheme("preview1"));
+  LightweightThemeManager.resetPreview();
+  LightweightThemeManager.previewTheme(dummyLightweightTheme("preview2"));
+  LightweightThemeManager.resetPreview();
+  ok(true, "done");
   finish();
 }
