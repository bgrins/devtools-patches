# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  bc0fd25cfca517105de975504726c430c2e87948

diff --git a/toolkit/content/customElements.js b/toolkit/content/customElements.js
--- a/toolkit/content/customElements.js
+++ b/toolkit/content/customElements.js
@@ -184,21 +184,84 @@ class MozBaseControl extends MozXULEleme
     if (val) {
       this.setAttribute("tabindex", val);
     } else {
       this.removeAttribute("tabindex");
     }
   }
 }
 
+
+class MozBaseText extends MozBaseControl {
+  constructor() {
+    super();
+    this.labelElement = "";
+  }
+
+  /**
+   * public implementation
+   */
+  set label(val) {
+    this.setAttribute("label", val);
+    return val;
+  }
+
+  get label() {
+    return this.getAttribute("label");
+  }
+
+  set crop(val) {
+    this.setAttribute("crop", val);
+    return val;
+  }
+
+  get crop() {
+    return this.getAttribute("crop");
+  }
+
+  set image(val) {
+    this.setAttribute("image", val);
+    return val;
+  }
+
+  get image() {
+    return this.getAttribute("image");
+  }
+
+  set command(val) {
+    this.setAttribute("command", val);
+    return val;
+  }
+
+  get command() {
+    return this.getAttribute("command");
+  }
+
+  set accessKey(val) {
+    // Always store on the control
+    this.setAttribute("accesskey", val);
+    // If there is a label, change the accesskey on the labelElement
+    // if it's also set there
+    if (this.labelElement) {
+      this.labelElement.accessKey = val;
+    }
+    return val;
+  }
+
+  get accessKey() {
+    return this.labelElement ? this.labelElement.accessKey : this.getAttribute("accesskey");
+  }
+}
+
 MozXULElement.implementCustomInterface(MozBaseControl, [Ci.nsIDOMXULControlElement]);
 
 // Attach the base class to the window so other scripts can use it:
 window.MozXULElement = MozXULElement;
 window.MozBaseControl = MozBaseControl;
+window.MozBaseText = MozBaseText;
 
 for (let script of [
   "chrome://global/content/elements/general.js",
   "chrome://global/content/elements/radio.js",
   "chrome://global/content/elements/textbox.js",
   "chrome://global/content/elements/tabbox.js",
 ]) {
   Services.scriptloader.loadSubScript(script, window);
diff --git a/toolkit/content/widgets/radio.js b/toolkit/content/widgets/radio.js
--- a/toolkit/content/widgets/radio.js
+++ b/toolkit/content/widgets/radio.js
@@ -366,12 +366,104 @@ class MozRadiogroup extends MozBaseContr
     radio.setAttribute("value", value);
     this.appendChild(radio);
     this._radioChildren = null;
     return radio;
   }
 }
 
 MozXULElement.implementCustomInterface(MozRadiogroup, [Ci.nsIDOMXULSelectControlElement]);
-
 customElements.define("radiogroup", MozRadiogroup);
 
+class MozRadio extends MozBaseText {
+  constructor() {
+    super();
+
+    this.addEventListener("click", (event) => {
+      if (!this.disabled)
+        this.control.selectedItem = this;
+    });
+
+    this.addEventListener("mousedown", (event) => {
+      if (!this.disabled)
+        this.control.focusedItem = this;
+    });
+
+  }
+
+  connectedCallback() {
+    this.appendChild(MozXULElement.parseXULToFragment(`
+      <image class="radio-check" inherits="disabled,selected"></image>
+      <hbox class="radio-label-box" align="center" flex="1">
+        <image class="radio-icon" inherits="src"></image>
+        <label class="radio-label" inherits="text=label,accesskey,crop" flex="1"></label>
+      </hbox>
+    `));
+
+    // Just clear out the parent's cached list of radio children
+    var control = this.control;
+    if (control)
+      control._radioChildren = null;
+  }
+
+  set value(val) {
+    this.setAttribute("value", val);
+    return val;
+  }
+
+  get value() {
+    return this.getAttribute("value");
+  }
+
+  get selected() {
+    return this.hasAttribute("selected");
+  }
+
+  get radioGroup() {
+    return this.control;
+  }
+
+  get control() {
+    const XUL_NS = "http://www.mozilla.org/keymaster/" +
+      "gatekeeper/there.is.only.xul";
+    var parent = this.parentNode;
+    while (parent) {
+      if ((parent.namespaceURI == XUL_NS) &&
+        (parent.localName == "radiogroup")) {
+        return parent;
+      }
+      parent = parent.parentNode;
+    }
+
+    var group = this.getAttribute("group");
+    if (!group) {
+      return null;
+    }
+
+    parent = this.ownerDocument.getElementById(group);
+    if (!parent ||
+      (parent.namespaceURI != XUL_NS) ||
+      (parent.localName != "radiogroup")) {
+      parent = null;
+    }
+    return parent;
+  }
+  disconnectedCallback() {
+    if (!this.control)
+      return;
+
+    var radioList = this.control._radioChildren;
+    if (!radioList)
+      return;
+    for (var i = 0; i < radioList.length; ++i) {
+      if (radioList[i] == this) {
+        radioList.splice(i, 1);
+        return;
+      }
+    }
+  }
 }
+
+MozXULElement.implementCustomInterface(MozRadio, [Ci.nsIDOMXULSelectControlItemElement]);
+customElements.define("radio", MozRadio);
+
+
+}
diff --git a/toolkit/content/widgets/text.xml b/toolkit/content/widgets/text.xml
--- a/toolkit/content/widgets/text.xml
+++ b/toolkit/content/widgets/text.xml
@@ -64,18 +64,18 @@
       </constructor>
 
       <method name="formatAccessKey">
         <parameter name="firstTime"/>
         <body>
           <![CDATA[
             var control = this.labeledControlElement;
             if (!control) {
-              var bindingParent = document.getBindingParent(this);
-              if ("accessKey" in bindingParent) {
+              var bindingParent = document.getBindingParent(this) || this.closest("radio");
+              if (bindingParent && "accessKey" in bindingParent) {
                 control = bindingParent; // For controls that make the <label> an anon child
               }
             }
             if (control) {
               control.labelElement = this;
               var controlAccessKey = control.getAttribute("accesskey");
               if (controlAccessKey) {
                 this.setAttribute("accesskey", controlAccessKey);
diff --git a/toolkit/content/xul.css b/toolkit/content/xul.css
--- a/toolkit/content/xul.css
+++ b/toolkit/content/xul.css
@@ -224,20 +224,16 @@ checkbox {
 }
 
 /********** radio **********/
 
 radiogroup {
   -moz-box-orient: vertical;
 }
 
-radio {
-  -moz-binding: url("chrome://global/content/bindings/radio.xml#radio");
-}
-
 /******** groupbox *********/
 
 groupbox {
   -moz-binding: url("chrome://global/content/bindings/groupbox.xml#groupbox");
   display: -moz-groupbox;
 }
 
 caption {
