# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  c2d655a9deff96c2aefd87a97b6b7900aa355d6e
Bug 1495861 - Convert <radio> to a Custom Element

diff --git a/toolkit/content/customElements.js b/toolkit/content/customElements.js
--- a/toolkit/content/customElements.js
+++ b/toolkit/content/customElements.js
@@ -227,19 +227,69 @@ class MozBaseControl extends MozXULEleme
     } else {
       this.removeAttribute("tabindex");
     }
   }
 }
 
 MozXULElement.implementCustomInterface(MozBaseControl, [Ci.nsIDOMXULControlElement]);
 
+class MozBaseText extends MozBaseControl {
+  set label(val) {
+    this.setAttribute("label", val);
+  }
+
+  get label() {
+    return this.getAttribute("label");
+  }
+
+  set crop(val) {
+    this.setAttribute("crop", val);
+  }
+
+  get crop() {
+    return this.getAttribute("crop");
+  }
+
+  set image(val) {
+    this.setAttribute("image", val);
+  }
+
+  get image() {
+    return this.getAttribute("image");
+  }
+
+  set command(val) {
+    this.setAttribute("command", val);
+  }
+
+  get command() {
+    return this.getAttribute("command");
+  }
+
+  set accessKey(val) {
+    // Always store on the control
+    this.setAttribute("accesskey", val);
+    // If there is a label, change the accesskey on the labelElement
+    // if it's also set there
+    if (this.labelElement) {
+      this.labelElement.accessKey = val;
+    }
+    return val;
+  }
+
+  get accessKey() {
+    return this.labelElement ? this.labelElement.accessKey : this.getAttribute("accesskey");
+  }
+}
+
 // Attach the base class to the window so other scripts can use it:
 window.MozXULElement = MozXULElement;
 window.MozBaseControl = MozBaseControl;
+window.MozBaseText = MozBaseText;
 
 // For now, don't load any elements in the extension dummy document.
 // We will want to load <browser> when that's migrated (bug 1441935).
 const isDummyDocument = document.documentURI == "chrome://extensions/content/dummy.xul";
 if (!isDummyDocument) {
   for (let script of [
     "chrome://global/content/elements/general.js",
     "chrome://global/content/elements/progressmeter.js",
diff --git a/toolkit/content/jar.mn b/toolkit/content/jar.mn
--- a/toolkit/content/jar.mn
+++ b/toolkit/content/jar.mn
@@ -77,17 +77,16 @@ toolkit.jar:
 *  content/global/bindings/dialog.xml          (widgets/dialog.xml)
    content/global/bindings/general.xml         (widgets/general.xml)
    content/global/bindings/groupbox.xml        (widgets/groupbox.xml)
    content/global/bindings/menu.xml            (widgets/menu.xml)
    content/global/bindings/menulist.xml        (widgets/menulist.xml)
    content/global/bindings/notification.xml    (widgets/notification.xml)
    content/global/bindings/numberbox.xml       (widgets/numberbox.xml)
    content/global/bindings/popup.xml           (widgets/popup.xml)
-   content/global/bindings/radio.xml           (widgets/radio.xml)
    content/global/bindings/richlistbox.xml     (widgets/richlistbox.xml)
    content/global/bindings/scrollbox.xml       (widgets/scrollbox.xml)
    content/global/bindings/spinner.js          (widgets/spinner.js)
 *  content/global/bindings/tabbox.xml          (widgets/tabbox.xml)
    content/global/bindings/text.xml            (widgets/text.xml)
 *  content/global/bindings/textbox.xml         (widgets/textbox.xml)
    content/global/bindings/timekeeper.js       (widgets/timekeeper.js)
    content/global/bindings/timepicker.js       (widgets/timepicker.js)
diff --git a/toolkit/content/widgets/radio.js b/toolkit/content/widgets/radio.js
--- a/toolkit/content/widgets/radio.js
+++ b/toolkit/content/widgets/radio.js
@@ -6,16 +6,17 @@
 
 // This is loaded into all XUL windows. Wrap in a block to prevent
 // leaking to window scope.
 {
 
 class MozRadiogroup extends MozBaseControl {
   constructor() {
     super();
+    // console.log("<radiogroup> constructed", this);
 
     this.addEventListener("mousedown", (event) => {
       if (this.disabled)
         event.preventDefault();
     });
 
     /**
      * keyboard navigation  Here's how keyboard navigation works in radio groups on Windows:
@@ -118,31 +119,34 @@ class MozRadiogroup extends MozBaseContr
 
     this.init();
     if (!this.value) {
       this.selectedIndex = 0;
     }
   }
 
   init() {
+    // console.log("<radiogroup> init", this);
     this._radioChildren = null;
 
     if (this.getAttribute("disabled") == "true")
       this.disabled = true;
 
     var children = this._getRadioChildren();
+    // console.log("Children", this.id, children);
     var length = children.length;
     for (var i = 0; i < length; i++) {
       if (children[i].getAttribute("selected") == "true") {
         this.selectedIndex = i;
         return;
       }
     }
 
     var value = this.value;
+    // console.log("Got value", value, this);
     if (value)
       this.value = value;
   }
 
   /**
    * Called when a new <radio> gets added and XBL construction happens on
    * it. Sometimes the XBL construction happens after the <radiogroup> has
    * already been added to the DOM. This can happen due to asynchronous XBL
@@ -371,12 +375,156 @@ class MozRadiogroup extends MozBaseContr
     radio.setAttribute("label", label);
     radio.setAttribute("value", value);
     this.appendChild(radio);
     return radio;
   }
 }
 
 MozXULElement.implementCustomInterface(MozRadiogroup, [Ci.nsIDOMXULSelectControlElement]);
-
 customElements.define("radiogroup", MozRadiogroup);
 
+function inheritAttribute(parent, child, attr1, attr2 = attr1) {
+  if (!parent.hasAttribute(attr2)) {
+    child.removeAttribute(attr1);
+  } else {
+    child.setAttribute(attr1, parent.getAttribute(attr2));
+  }
 }
+
+let gRadioFrag = null;
+function getRadioFragment() {
+  if (!gRadioFrag) {
+    gRadioFrag = MozXULElement.parseXULToFragment(`
+    <image class="radio-check"></image>
+    <hbox class="radio-label-box" align="center" flex="1">
+      <image class="radio-icon"></image>
+      <label class="radio-label" flex="1"></label>
+    </hbox>
+    `);
+  }
+  return document.importNode(gRadioFrag, true);
+}
+
+class MozRadio extends MozBaseText {
+  static get observedAttributes() {
+    return ["disabled", "selected", "src", "label", "accesskey", "crop"];
+  }
+
+  attributeChangedCallback() {
+    if (!this.isConnectedAndReady) {
+      return;
+    }
+
+    this.inheritAttributes();
+  }
+
+  constructor() {
+    super();
+    // console.log("<radio> constructed", this);
+
+    this.addEventListener("click", (event) => {
+      if (!this.disabled)
+        this.control.selectedItem = this;
+    });
+
+    this.addEventListener("mousedown", (event) => {
+      if (!this.disabled)
+        this.control.focusedItem = this;
+    });
+  }
+
+  inheritAttributes() {
+    if (!this._label) {
+      return;
+    }
+    let label = this.getAttribute("label");
+    if (this._label.textContent !== label) {
+      this._label.textContent = label;
+    }
+
+    inheritAttribute(this, this._label, "accesskey");
+    inheritAttribute(this, this._label, "crop");
+    inheritAttribute(this, this._check, "disabled");
+    inheritAttribute(this, this._check, "selected");
+    inheritAttribute(this, this._icon, "src");
+  }
+
+  connectedCallback() {
+    if (this.waitForDOMReady()) {
+      return;
+    }
+
+    if (!this.connectedOnce) {
+      this.connectedOnce = true;
+      this.appendChild(getRadioFragment());
+      this._check = this.querySelector(".radio-check");
+      this._icon = this.querySelector(".radio-icon");
+      this._label = this.querySelector(".radio-label");
+    }
+
+    this.inheritAttributes();
+
+    var control = this.control;
+    if (control)
+      control.radioChildConstructed(this);
+  }
+
+  disconnectedCallback() {
+    if (this.waitForDOMReady()) {
+      return;
+    }
+
+    // console.log("<radio> disconnected", this, this.control);
+    if (!this.control)
+      return;
+
+    var radioList = this.control._radioChildren;
+    if (!radioList)
+      return;
+    for (var i = 0; i < radioList.length; ++i) {
+      if (radioList[i] == this) {
+        radioList.splice(i, 1);
+        return;
+      }
+    }
+  }
+
+  set value(val) {
+    this.setAttribute("value", val);
+    return val;
+  }
+
+  get value() {
+    return this.getAttribute("value");
+  }
+
+  get selected() {
+    return this.hasAttribute("selected");
+  }
+
+  get radioGroup() {
+    return this.control;
+  }
+
+  get control() {
+    var radiogroup = this.closest("radiogroup");
+    if (radiogroup) {
+      return radiogroup;
+    }
+
+    var group = this.getAttribute("group");
+    if (!group) {
+      return null;
+    }
+
+    var parent = this.ownerDocument.getElementById(group);
+    if (!parent || parent.localName != "radiogroup") {
+      parent = null;
+    }
+    return parent;
+  }
+}
+
+MozXULElement.implementCustomInterface(MozRadio, [Ci.nsIDOMXULSelectControlItemElement]);
+customElements.define("radio", MozRadio);
+
+}
diff --git a/toolkit/content/widgets/text.xml b/toolkit/content/widgets/text.xml
--- a/toolkit/content/widgets/text.xml
+++ b/toolkit/content/widgets/text.xml
@@ -21,18 +21,18 @@
       </constructor>
 
       <method name="formatAccessKey">
         <parameter name="firstTime"/>
         <body>
           <![CDATA[
             var control = this.labeledControlElement;
             if (!control) {
-              var bindingParent = document.getBindingParent(this);
-              if ("accessKey" in bindingParent) {
+              var bindingParent = document.getBindingParent(this) || this.closest("radio");
+              if (bindingParent && "accessKey" in bindingParent) {
                 control = bindingParent; // For controls that make the <label> an anon child
               }
             }
             if (control) {
               control.labelElement = this;
               var controlAccessKey = control.getAttribute("accesskey");
               if (controlAccessKey) {
                 this.setAttribute("accesskey", controlAccessKey);
diff --git a/toolkit/content/xul.css b/toolkit/content/xul.css
--- a/toolkit/content/xul.css
+++ b/toolkit/content/xul.css
@@ -212,20 +212,16 @@ checkbox {
 }
 
 /********** radio **********/
 
 radiogroup {
   -moz-box-orient: vertical;
 }
 
-radio {
-  -moz-binding: url("chrome://global/content/bindings/radio.xml#radio");
-}
-
 /******** groupbox *********/
 
 groupbox {
   -moz-binding: url("chrome://global/content/bindings/groupbox.xml#groupbox");
   display: -moz-groupbox;
 }
 
 caption {
