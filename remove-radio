# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  03ad87fea5213de2c38bedaff6ce7de5a53e80fc

diff --git a/toolkit/content/customElements.js b/toolkit/content/customElements.js
--- a/toolkit/content/customElements.js
+++ b/toolkit/content/customElements.js
@@ -184,21 +184,71 @@ class MozBaseControl extends MozXULEleme
     if (val) {
       this.setAttribute("tabindex", val);
     } else {
       this.removeAttribute("tabindex");
     }
   }
 }
 
+class MozBaseText extends MozBaseControl {
+  set label(val) {
+    this.setAttribute("label", val);
+  }
+
+  get label() {
+    return this.getAttribute("label");
+  }
+
+  set crop(val) {
+    this.setAttribute("crop", val);
+  }
+
+  get crop() {
+    return this.getAttribute("crop");
+  }
+
+  set image(val) {
+    this.setAttribute("image", val);
+  }
+
+  get image() {
+    return this.getAttribute("image");
+  }
+
+  set command(val) {
+    this.setAttribute("command", val);
+  }
+
+  get command() {
+    return this.getAttribute("command");
+  }
+
+  set accessKey(val) {
+    // Always store on the control
+    this.setAttribute("accesskey", val);
+    // If there is a label, change the accesskey on the labelElement
+    // if it's also set there
+    if (this.labelElement) {
+      this.labelElement.accessKey = val;
+    }
+    return val;
+  }
+
+  get accessKey() {
+    return this.labelElement ? this.labelElement.accessKey : this.getAttribute("accesskey");
+  }
+}
+
 MozXULElement.implementCustomInterface(MozBaseControl, [Ci.nsIDOMXULControlElement]);
 
 // Attach the base class to the window so other scripts can use it:
 window.MozXULElement = MozXULElement;
 window.MozBaseControl = MozBaseControl;
+window.MozBaseText = MozBaseText;
 
 // For now, don't load any elements in the extension dummy document.
 // We will want to load <browser> when that's migrated (bug 1441935).
 const isDummyDocument = document.documentURI == "chrome://extensions/content/dummy.xul";
 if (isDummyDocument) {
   return;
 }
 
diff --git a/toolkit/content/jar.mn b/toolkit/content/jar.mn
--- a/toolkit/content/jar.mn
+++ b/toolkit/content/jar.mn
@@ -78,17 +78,16 @@ toolkit.jar:
    content/global/bindings/general.xml         (widgets/general.xml)
    content/global/bindings/groupbox.xml        (widgets/groupbox.xml)
    content/global/bindings/menu.xml            (widgets/menu.xml)
    content/global/bindings/menulist.xml        (widgets/menulist.xml)
    content/global/bindings/notification.xml    (widgets/notification.xml)
    content/global/bindings/numberbox.xml       (widgets/numberbox.xml)
    content/global/bindings/popup.xml           (widgets/popup.xml)
    content/global/bindings/progressmeter.xml   (widgets/progressmeter.xml)
-   content/global/bindings/radio.xml           (widgets/radio.xml)
    content/global/bindings/richlistbox.xml     (widgets/richlistbox.xml)
    content/global/bindings/scrollbox.xml       (widgets/scrollbox.xml)
    content/global/bindings/spinner.js          (widgets/spinner.js)
 *  content/global/bindings/tabbox.xml          (widgets/tabbox.xml)
    content/global/bindings/text.xml            (widgets/text.xml)
 *  content/global/bindings/textbox.xml         (widgets/textbox.xml)
    content/global/bindings/timekeeper.js       (widgets/timekeeper.js)
    content/global/bindings/timepicker.js       (widgets/timepicker.js)
diff --git a/toolkit/content/widgets/radio.js b/toolkit/content/widgets/radio.js
--- a/toolkit/content/widgets/radio.js
+++ b/toolkit/content/widgets/radio.js
@@ -366,12 +366,148 @@ class MozRadiogroup extends MozBaseContr
     radio.setAttribute("value", value);
     this.appendChild(radio);
     this._radioChildren = null;
     return radio;
   }
 }
 
 MozXULElement.implementCustomInterface(MozRadiogroup, [Ci.nsIDOMXULSelectControlElement]);
-
 customElements.define("radiogroup", MozRadiogroup);
 
+const inheritsMap = {
+  ".radio-check": ["disabled", "selected"],
+  ".radio-icon": ["src"],
+  ".radio-label": ["text=label", "accesskey", "crop"],
+};
+
+function inheritAttribute(parent, child, attr1, attr2 = attr1) {
+  if (!parent.hasAttribute(attr2)) {
+    child.removeAttribute(attr1);
+  } else {
+    child.setAttribute(attr1, parent.getAttribute(attr2));
+  }
 }
+
+class MozRadio extends MozBaseText {
+  static get observedAttributes() {
+    return ["disabled", "selected", "src", "label", "accesskey", "crop"];
+  }
+
+  attributeChangedCallback() {
+    this.inheritAttributes();
+  }
+
+  constructor() {
+    super();
+
+    this.addEventListener("click", (event) => {
+      if (!this.disabled)
+        this.control.selectedItem = this;
+    });
+
+    this.addEventListener("mousedown", (event) => {
+      if (!this.disabled)
+        this.control.focusedItem = this;
+    });
+  }
+
+  inheritAttributes() {
+    if (!this._label) {
+      return;
+    }
+
+    inheritAttribute(this, this._label, "accesskey");
+    inheritAttribute(this, this._label, "crop");
+    this._label.textContent = this.getAttribute("label");
+    inheritAttribute(this, this._check, "disabled");
+    inheritAttribute(this, this._check, "selected");
+    inheritAttribute(this, this._icon, "src");
+  }
+
+  connectedCallback() {
+    this.appendChild(MozXULElement.parseXULToFragment(`
+      <image class="radio-check" inherits="disabled,selected"></image>
+      <hbox class="radio-label-box" align="center" flex="1">
+        <image class="radio-icon" inherits="src"></image>
+        <label class="radio-label" inherits="text=label,accesskey,crop" flex="1"></label>
+      </hbox>
+    `));
+
+    this._check = this.querySelector(".radio-check");
+    this._icon = this.querySelector(".radio-icon");
+    this._label = this.querySelector(".radio-label");
+
+    this.inheritAttributes();
+
+    // Just clear out the parent's cached list of radio children
+    var control = this.control;
+    if (control)
+      control._radioChildren = null;
+  }
+
+  set value(val) {
+    this.setAttribute("value", val);
+    return val;
+  }
+
+  get value() {
+    return this.getAttribute("value");
+  }
+
+  get selected() {
+    return this.hasAttribute("selected");
+  }
+
+  get radioGroup() {
+    return this.control;
+  }
+
+  get control() {
+    const XUL_NS = "http://www.mozilla.org/keymaster/" +
+      "gatekeeper/there.is.only.xul";
+    var parent = this.parentNode;
+    while (parent) {
+      if ((parent.namespaceURI == XUL_NS) &&
+        (parent.localName == "radiogroup")) {
+        return parent;
+      }
+      parent = parent.parentNode;
+    }
+
+    var group = this.getAttribute("group");
+    if (!group) {
+      return null;
+    }
+
+    parent = this.ownerDocument.getElementById(group);
+    if (!parent ||
+      (parent.namespaceURI != XUL_NS) ||
+      (parent.localName != "radiogroup")) {
+      parent = null;
+    }
+    return parent;
+  }
+
+  disconnectedCallback() {
+    while (this.firstChild) {
+      this.firstChild.remove();
+    }
+
+    if (!this.control)
+      return;
+
+    var radioList = this.control._radioChildren;
+    if (!radioList)
+      return;
+    for (var i = 0; i < radioList.length; ++i) {
+      if (radioList[i] == this) {
+        radioList.splice(i, 1);
+        return;
+      }
+    }
+  }
+}
+
+MozXULElement.implementCustomInterface(MozRadio, [Ci.nsIDOMXULSelectControlItemElement]);
+customElements.define("radio", MozRadio);
+
+}
diff --git a/toolkit/content/widgets/text.xml b/toolkit/content/widgets/text.xml
--- a/toolkit/content/widgets/text.xml
+++ b/toolkit/content/widgets/text.xml
@@ -62,18 +62,18 @@
       </constructor>
 
       <method name="formatAccessKey">
         <parameter name="firstTime"/>
         <body>
           <![CDATA[
             var control = this.labeledControlElement;
             if (!control) {
-              var bindingParent = document.getBindingParent(this);
-              if ("accessKey" in bindingParent) {
+              var bindingParent = document.getBindingParent(this) || this.closest("radio");
+              if (bindingParent && "accessKey" in bindingParent) {
                 control = bindingParent; // For controls that make the <label> an anon child
               }
             }
             if (control) {
               control.labelElement = this;
               var controlAccessKey = control.getAttribute("accesskey");
               if (controlAccessKey) {
                 this.setAttribute("accesskey", controlAccessKey);
diff --git a/toolkit/content/xul.css b/toolkit/content/xul.css
--- a/toolkit/content/xul.css
+++ b/toolkit/content/xul.css
@@ -220,20 +220,16 @@ checkbox {
 }
 
 /********** radio **********/
 
 radiogroup {
   -moz-box-orient: vertical;
 }
 
-radio {
-  -moz-binding: url("chrome://global/content/bindings/radio.xml#radio");
-}
-
 /******** groupbox *********/
 
 groupbox {
   -moz-binding: url("chrome://global/content/bindings/groupbox.xml#groupbox");
   display: -moz-groupbox;
 }
 
 caption {
