# HG changeset patch
# Parent 5b8242e93ae9669d0c4b5b07990799538d32c385
# User Gabriel Luong <gabriel.luong@gmail.com>
Bug 1058249 - Allow TableWidget to append DOMNodes as Cell values r=bgrins f=Optimizer




diff --git a/browser/devtools/shared/test/browser_tableWidget_basic.js b/browser/devtools/shared/test/browser_tableWidget_basic.js
--- a/browser/devtools/shared/test/browser_tableWidget_basic.js
+++ b/browser/devtools/shared/test/browser_tableWidget_basic.js
@@ -103,21 +103,25 @@ function populateTable() {
     somethingExtra: "Hello World!"
   });
   table.push({
     col1: "id8",
     col2: "value11",
     col3: "value27",
     col4: "value34"
   });
+
+  let span = doc.createElement("span");
+  span.textContent = "Object";
+
   table.push({
     col1: "id9",
     col2: "value11",
     col3: "value23",
-    col4: "value38"
+    col4: span
   });
 }
 
 /**
  * Test if the nodes are inserted correctly in the table.
  */
 function testTreeItemInsertedCorrectly() {
   is(table.tbody.children.length, 4*2 /* double because splitters */,
@@ -130,17 +134,17 @@ function testTreeItemInsertedCorrectly()
   }
   for (let i = 1; i < 10; i++) {
     is(table.tbody.firstChild.firstChild.children[i].value, "id" + i,
      "Correct value in row " + i);
   }
 }
 
 /**
- * Tests if the API exposed by TreeWidget works properly
+ * Tests if the API exposed by TableWidget works properly
  */
 function testAPI() {
   info("Testing TableWidget API");
   // Check if selectRow and selectedRow setter works as expected
   // Nothing should be selected beforehand
   ok(!doc.querySelector(".theme-selected"), "Nothing is selected");
   table.selectRow("id4");
   let node = doc.querySelector(".theme-selected");
@@ -313,9 +317,49 @@ function testAPI() {
   }
   // Calling it again should sort by it in ascending manner
   table.sortBy("col2");
   let cell = table.tbody.children[2].firstChild.children[2];
   while(cell) {
     ok(cell.value >= cell.previousSibling.value, "Sorting is in ascending order");
     cell = cell.nextSibling;
   }
+
+  table.clear();
+  populateTable();
+
+  // test appending and sorting dom nodes
+  let span = doc.createElement("span");
+  span.textContent = "Object";
+  table.selectRow("id9");
+  ok(table.isSelected({
+    col1: "id9",
+    col2: "value11",
+    col3: "value23",
+    col4: span
+  }), "isSelected with json works");
+
+  // testing if sorting works should sort by ascending manner
+  table.sortBy("col4");
+  let cell = table.tbody.children[6].firstChild.children[1];
+  is(cell.textContent, "Object", "DOMNode sorted correctly");
+  cell = cell.nextSibling;
+
+  while(cell) {
+    let currentCell = cell.value || cell.textContent;
+    let prevCell = cell.previousSibling.value || cell.previousSibling.textContent;
+    ok(currentCell >= prevCell, "Sorting is in ascending order");
+    cell = cell.nextSibling;
+  }
+
+  // Calling it again should sort it in descending order
+  table.sortBy("col4");
+  let cell = table.tbody.children[6].firstChild.children[9];
+  is(cell.textContent, "Object", "DOMNode sorted correctly");
+  cell = cell.previousSibling;
+
+  while(cell != cell.parentNode.firstChild) {
+    let currentCell = cell.value || cell.textContent;
+    let nextCell = cell.nextSibling.value || cell.nextSibling.textContent;
+    ok(currentCell >= nextCell, "Sorting is in descending order");
+    cell = cell.previousSibling;
+  }
 }
diff --git a/browser/devtools/shared/widgets/TableWidget.js b/browser/devtools/shared/widgets/TableWidget.js
--- a/browser/devtools/shared/widgets/TableWidget.js
+++ b/browser/devtools/shared/widgets/TableWidget.js
@@ -1,14 +1,14 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
-const { Cu } = require("chrome");
+const {Cc, Ci, Cu} = require("chrome");
 
 const EventEmitter = require("devtools/toolkit/event-emitter");
 const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
 const HTML_NS = "http://www.w3.org/1999/xhtml";
 
 
 // Different types of events emitted by the Various components of the TableWidget
 const EVENTS = {
@@ -749,25 +749,32 @@ Column.prototype = {
     }
   },
 
   /**
    * Sorts the given items and returns the sorted list if the table was sorted
    * by this column.
    */
   sort: function(items) {
-
     // Only sort the array if we are sorting based on this column
     if (this.sorted == 1) {
       items.sort((a, b) => {
-        return a[this.id] > b[this.id]
+        let val1 = (a[this.id] instanceof Ci.nsIDOMNode) ?
+            a[this.id].textContent : a[this.id];
+        let val2 = (b[this.id] instanceof Ci.nsIDOMNode) ?
+            b[this.id].textContent : b[this.id];
+        return val1 > val2;
       });
     } else if (this.sorted > 1) {
       items.sort((a, b) => {
-        return b[this.id] > a[this.id]
+        let val1 = (a[this.id] instanceof Ci.nsIDOMNode) ?
+            a[this.id].textContent : a[this.id];
+        let val2 = (b[this.id] instanceof Ci.nsIDOMNode) ?
+            b[this.id].textContent : b[this.id];
+        return val2 > val1;
       });
     }
 
     if (this.selectedRow) {
       this.cells[this.items[this.selectedRow]].toggleClass("theme-selected");
     }
     this.items = {};
     // Otherwise, just use the sorted array passed to update the cells value.
@@ -887,20 +894,28 @@ Cell.prototype = {
   },
 
   set value(value) {
     this._value = value;
     if (!value) {
       this.label.setAttribute("value", "");
       return;
     }
-    if (value.length > MAX_VISIBLE_STRING_SIZE) {
+
+    if (!(value instanceof Ci.nsIDOMNode) &&
+        value.length > MAX_VISIBLE_STRING_SIZE) {
       value = value .substr(0, MAX_VISIBLE_STRING_SIZE) + "\u2026"; // â€¦
     }
-    this.label.setAttribute("value", value + "");
+
+    if (value instanceof Ci.nsIDOMNode) {
+      this.label.removeAttribute("value");
+      this.label.appendChild(value);
+    } else {
+      this.label.setAttribute("value", value + "");
+    }
   },
 
   get value() {
     return this._value;
   },
 
   toggleClass: function(className) {
     this.label.classList.toggle(className);
