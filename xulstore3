# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  4e8288ccd37d93b0b327d007d7b1a255d75d826b
Bug XXX

diff --git a/dom/webidl/XULDocument.webidl b/dom/webidl/XULDocument.webidl
--- a/dom/webidl/XULDocument.webidl
+++ b/dom/webidl/XULDocument.webidl
@@ -39,13 +39,10 @@ interface XULDocument : Document {
 
   [Throws]
   void addBroadcastListenerFor(Element broadcaster, Element observer,
                                DOMString attr);
   void removeBroadcastListenerFor(Element broadcaster, Element observer,
                                   DOMString attr);
 
   [Throws]
-  void persist([TreatNullAs=EmptyString] DOMString id, DOMString attr);
-
-  [Throws]
   BoxObject? getBoxObjectFor(Element? element);
 };
diff --git a/dom/xul/XULDocument.cpp b/dom/xul/XULDocument.cpp
--- a/dom/xul/XULDocument.cpp
+++ b/dom/xul/XULDocument.cpp
@@ -144,17 +144,16 @@ struct BroadcasterMapEntry : public PLDH
 //
 
 namespace mozilla {
 namespace dom {
 
 XULDocument::XULDocument(void)
     : XMLDocument("application/vnd.mozilla.xul+xml"),
       mNextSrcLoadWaiter(nullptr),
-      mApplyingPersistedAttrs(false),
       mIsWritingFastLoad(false),
       mDocumentLoaded(false),
       mStillWalking(false),
       mPendingSheets(0),
       mDocLWTheme(Doc_Theme_Uninitialized),
       mCurrentScriptProto(nullptr),
       mOffThreadCompiling(false),
       mOffThreadCompileStringBuf(nullptr),
@@ -993,70 +992,16 @@ XULDocument::GetElementsByAttributeNS(co
                                             nsContentUtils::DestroyMatchString,
                                             attrValue.forget(),
                                             true,
                                             attrAtom,
                                             nameSpaceId);
     return list.forget();
 }
 
-void
-XULDocument::Persist(const nsAString& aID,
-                     const nsAString& aAttr,
-                     ErrorResult& aRv)
-{
-    // If we're currently reading persisted attributes out of the
-    // localstore, _don't_ re-enter and try to set them again!
-    if (mApplyingPersistedAttrs) {
-        return;
-    }
-
-    Element* element = nsDocument::GetElementById(aID);
-    if (!element) {
-        return;
-    }
-
-    RefPtr<nsAtom> tag;
-    int32_t nameSpaceID;
-
-    RefPtr<mozilla::dom::NodeInfo> ni = element->GetExistingAttrNameFromQName(aAttr);
-    nsresult rv;
-    if (ni) {
-        tag = ni->NameAtom();
-        nameSpaceID = ni->NamespaceID();
-    }
-    else {
-        // Make sure that this QName is going to be valid.
-        const char16_t *colon;
-        rv = nsContentUtils::CheckQName(PromiseFlatString(aAttr), true, &colon);
-
-        if (NS_FAILED(rv)) {
-            // There was an invalid character or it was malformed.
-            aRv.Throw(NS_ERROR_INVALID_ARG);
-            return;
-        }
-
-        if (colon) {
-            // We don't really handle namespace qualifiers in attribute names.
-            aRv.Throw(NS_ERROR_NOT_IMPLEMENTED);
-            return;
-        }
-
-        tag = NS_Atomize(aAttr);
-        if (NS_WARN_IF(!tag)) {
-            aRv.Throw(NS_ERROR_OUT_OF_MEMORY);
-            return;
-        }
-
-        nameSpaceID = kNameSpaceID_None;
-    }
-
-    aRv = Persist(element, nameSpaceID, tag);
-}
-
 nsresult
 XULDocument::Persist(Element* aElement, int32_t aNameSpaceID,
                      nsAtom* aAttribute)
 {
     // For non-chrome documents, persistance is simply broken
     if (!nsContentUtils::IsSystemPrincipal(NodePrincipal()))
         return NS_ERROR_NOT_AVAILABLE;
 
@@ -1557,19 +1502,17 @@ XULDocument::ApplyPersistentAttributes()
     // model.
     if (!mLocalStore) {
         mLocalStore = do_GetService("@mozilla.org/xul/xulstore;1");
         if (NS_WARN_IF(!mLocalStore)) {
             return NS_ERROR_NOT_INITIALIZED;
         }
     }
 
-    mApplyingPersistedAttrs = true;
     ApplyPersistentAttributesInternal();
-    mApplyingPersistedAttrs = false;
 
     return NS_OK;
 }
 
 
 nsresult
 XULDocument::ApplyPersistentAttributesInternal()
 {
diff --git a/dom/xul/XULDocument.h b/dom/xul/XULDocument.h
--- a/dom/xul/XULDocument.h
+++ b/dom/xul/XULDocument.h
@@ -162,18 +162,16 @@ public:
       GetElementsByAttributeNS(const nsAString& aNamespaceURI,
                                const nsAString& aAttribute,
                                const nsAString& aValue,
                                ErrorResult& aRv);
     void AddBroadcastListenerFor(Element& aBroadcaster, Element& aListener,
                                  const nsAString& aAttr, ErrorResult& aRv);
     void RemoveBroadcastListenerFor(Element& aBroadcaster, Element& aListener,
                                     const nsAString& aAttr);
-    void Persist(const nsAString& aId, const nsAString& aAttr,
-                 ErrorResult& aRv);
     using nsDocument::GetBoxObjectFor;
 
 protected:
     virtual ~XULDocument();
 
     // Implementation methods
     friend nsresult
     (::NS_NewXULDocument(nsIDocument** aResult));
@@ -241,17 +239,16 @@ protected:
     // (ie, non owning) references. If you add any members to this
     // class, please make the ownership explicit (pinkerton, scc).
     // NOTE, THIS IS STILL IN PROGRESS, TALK TO PINK OR SCC BEFORE
     // CHANGING
 
     XULDocument*             mNextSrcLoadWaiter;  // [OWNER] but not COMPtr
 
     nsCOMPtr<nsIXULStore>       mLocalStore;
-    bool                        mApplyingPersistedAttrs;
     bool                        mIsWritingFastLoad;
     bool                        mDocumentLoaded;
     /**
      * Since ResumeWalk is interruptible, it's possible that last
      * stylesheet finishes loading while the PD walk is still in
      * progress (waiting for an overlay to finish loading).
      * mStillWalking prevents DoneLoading (and StartLayout) from being
      * called in this situation.
