# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  7420ce71ea19996b4b664136f3cf01a29ec1e8e3
Bug 1505734 - Remove CustomizableUI toolbar

diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -1324,16 +1324,29 @@ var gBrowserInit = {
       }
       initBrowser.removeAttribute("blank");
     }
 
     gBrowser.updateBrowserRemoteness(initBrowser, isRemote, {
       remoteType, sameProcessAsFrameLoader,
     });
 
+    gNavToolbox.palette = document.getElementById("BrowserToolbarPalette");
+    gNavToolbox.palette.remove();
+    let areas = CustomizableUI.areas;
+    areas.splice(areas.indexOf(CustomizableUI.AREA_FIXED_OVERFLOW_PANEL), 1);
+    for (let area of areas) {
+      let node = document.getElementById(area);
+      // FIXME bug NNNNN to investigate whether we can stop passing the list of
+      // child elements here. For now, keep passing it:
+      let children = Array.from(node.children)
+                          .filter(child => child.getAttribute("skipintoolbarset") != "true" && child.id)
+                          .map(child => child.id);
+      CustomizableUI.registerToolbarNode(node, children);
+    }
     BrowserSearch.initPlaceHolder();
 
     // Hack to ensure that the about:home favicon is loaded
     // instantaneously, to avoid flickering and improve perceived performance.
     this._callWithURIToLoad(uriToLoad => {
       if (uriToLoad == "about:home" || uriToLoad == "about:newtab" || uriToLoad == "about:welcome") {
         gBrowser.setIcon(gBrowser.selectedTab, "chrome://branding/content/icon32.png");
       } else if (uriToLoad == "about:privatebrowsing") {
diff --git a/browser/components/customizableui/content/toolbar.xml b/browser/components/customizableui/content/toolbar.xml
--- a/browser/components/customizableui/content/toolbar.xml
+++ b/browser/components/customizableui/content/toolbar.xml
@@ -4,43 +4,16 @@
    - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
 
 <bindings id="browserToolbarBindings"
           xmlns="http://www.mozilla.org/xbl"
           xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
           xmlns:xbl="http://www.mozilla.org/xbl">
 
   <binding id="toolbar">
-    <implementation>
-      <constructor><![CDATA[
-          let scope = {};
-          ChromeUtils.import("resource:///modules/CustomizableUI.jsm", scope);
-          let CustomizableUI = scope.CustomizableUI;
-
-          // Searching for the toolbox palette in the toolbar binding because
-          // toolbars are constructed first.
-          let toolbox = this.closest("toolbox");
-          if (toolbox && !toolbox.palette) {
-            for (let node of toolbox.children) {
-              if (node.localName == "toolbarpalette") {
-                // Hold on to the palette but remove it from the document.
-                toolbox.palette = node;
-                toolbox.removeChild(node);
-                break;
-              }
-            }
-          }
-
-          // pass the current set of children for comparison with placements:
-          let children = Array.from(this.children)
-                              .filter(node => node.getAttribute("skipintoolbarset") != "true" && node.id)
-                              .map(node => node.id);
-          CustomizableUI.registerToolbarNode(this, children);
-      ]]></constructor>
-    </implementation>
   </binding>
 
   <!-- The toolbar-drag binding is almost a verbatim copy of its toolkit counterpart,
        but it inherits from the customizableui's toolbar binding instead of toolkit's.
        This functionality will move into CustomizableUI proper as part of our move
        away from XBL. -->
   <binding id="toolbar-drag"
            extends="chrome://browser/content/customizableui/toolbar.xml#toolbar">
