# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  e8ae9c511b505ee733128d3fb227aa92b9ddabb8
Bug 789430 - Pause on next bytecode instead of immediately;r=fitzgen

diff --git a/browser/devtools/debugger/debugger-controller.js b/browser/devtools/debugger/debugger-controller.js
--- a/browser/devtools/debugger/debugger-controller.js
+++ b/browser/devtools/debugger/debugger-controller.js
@@ -687,17 +687,20 @@ StackFrames.prototype = {
         } else if (aPacket.why.frameFinished.return) {
           this._currentReturnedValue = aPacket.why.frameFinished.return;
         }
         break;
       // If paused by an explicit interrupt, which are generated by the slow
       // script dialog and internal events such as setting breakpoints, ignore
       // the event to avoid UI flicker.
       case "interrupted":
-        return;
+        if (!aPacket.why.onNext) {
+          return;
+        }
+        break;
     }
 
     this.activeThread.fillFrames(CALL_STACK_PAGE_SIZE);
     DebuggerView.editor.focus();
   },
 
   /**
    * Handler for the thread client's resumed notification.
diff --git a/browser/devtools/debugger/test/browser_dbg_interrupts.js b/browser/devtools/debugger/test/browser_dbg_interrupts.js
--- a/browser/devtools/debugger/test/browser_dbg_interrupts.js
+++ b/browser/devtools/debugger/test/browser_dbg_interrupts.js
@@ -50,36 +50,60 @@ function test() {
     let onceResumed = gTarget.once("thread-resumed");
     gThreadClient.resume();
     return onceResumed;
   }
 
   function testResumeButton() {
     info ("Pressing the resume button, expecting a thread-paused");
 
+    ok (!gResumeButton.hasAttribute("disabled"), "Resume button is not disabled");
+    ok (!gResumeButton.hasAttribute("break-on-next"), "Resume button isn't waiting for next execution");
     ok (!gResumeButton.hasAttribute("checked"), "Resume button is not checked");
     let oncePaused = gTarget.once("thread-paused");
+
+    // Click the pause button to break on next execution
     EventUtils.sendMouseEvent({ type: "mousedown" }, gResumeButton, gDebugger);
+    ok (gResumeButton.hasAttribute("disabled"), "Resume button is disabled");
+    ok (gResumeButton.hasAttribute("break-on-next"), "Resume button is waiting for next execution");
+    ok (!gResumeButton.hasAttribute("checked"), "Resume button is not checked");
+
+    // Evaluate a script to fully pause
+    evalInTab(gTab, "1+1;");
 
     return oncePaused
       .then(() => {
+        ok (!gResumeButton.hasAttribute("break-on-next"), "Resume button isn't waiting for next execution");
         is (gResumeButton.getAttribute("checked"), "true", "Resume button is checked");
+        ok (!gResumeButton.hasAttribute("disabled"), "Resume button is not disabled");
       })
       .then(() => gThreadClient.resume())
       .then(() => ensureThreadClientState(gPanel, "resumed"))
   }
 
   function testResumeKeyboard() {
     let key = gResumeKey.getAttribute("keycode");
     info ("Triggering a pause with keyboard (" + key +  "), expecting a thread-paused");
 
+    ok (!gResumeButton.hasAttribute("disabled"), "Resume button is not disabled");
+    ok (!gResumeButton.hasAttribute("break-on-next"), "Resume button isn't waiting for next execution");
     ok (!gResumeButton.hasAttribute("checked"), "Resume button is not checked");
     let oncePaused = gTarget.once("thread-paused");
+
+    // Press the key to break on next execution
     EventUtils.synthesizeKey(key, { }, gDebugger);
+    ok (gResumeButton.hasAttribute("disabled"), "Resume button is disabled");
+    ok (gResumeButton.hasAttribute("break-on-next"), "Resume button is waiting for next execution");
+    ok (!gResumeButton.hasAttribute("checked"), "Resume button is not checked");
+
+    // Evaluate a script to fully pause
+    evalInTab(gTab, "1+1;");
 
     return oncePaused
       .then(() => {
+        ok (!gResumeButton.hasAttribute("break-on-next"), "Resume button isn't waiting for next execution");
         is (gResumeButton.getAttribute("checked"), "true", "Resume button is checked");
+        ok (!gResumeButton.hasAttribute("disabled"), "Resume button is not disabled");
       })
       .then(() => gThreadClient.resume())
       .then(() => ensureThreadClientState(gPanel, "resumed"))
   }
 }
diff --git a/browser/devtools/debugger/views/toolbar-view.js b/browser/devtools/debugger/views/toolbar-view.js
--- a/browser/devtools/debugger/views/toolbar-view.js
+++ b/browser/devtools/debugger/views/toolbar-view.js
@@ -46,16 +46,17 @@ ToolbarView.prototype = {
     this._resumeOrderTooltip.defaultPosition = TOOLBAR_ORDER_POPUP_POSITION;
 
     let resumeKey = ShortcutUtils.prettifyShortcut(document.getElementById("resumeKey"));
     let stepOverKey = ShortcutUtils.prettifyShortcut(document.getElementById("stepOverKey"));
     let stepInKey = ShortcutUtils.prettifyShortcut(document.getElementById("stepInKey"));
     let stepOutKey = ShortcutUtils.prettifyShortcut(document.getElementById("stepOutKey"));
     this._resumeTooltip = L10N.getFormatStr("resumeButtonTooltip", resumeKey);
     this._pauseTooltip = L10N.getFormatStr("pauseButtonTooltip", resumeKey);
+    this._pausePendingTooltip = L10N.getFormatStr("pausePendingButtonTooltip");
     this._stepOverTooltip = L10N.getFormatStr("stepOverTooltip", stepOverKey);
     this._stepInTooltip = L10N.getFormatStr("stepInTooltip", stepInKey);
     this._stepOutTooltip = L10N.getFormatStr("stepOutTooltip", stepOutKey);
 
     this._instrumentsPaneToggleButton.addEventListener("mousedown", this._onTogglePanesPressed, false);
     this._resumeButton.addEventListener("mousedown", this._onResumePressed, false);
     this._stepOverButton.addEventListener("mousedown", this._onStepOverPressed, false);
     this._stepInButton.addEventListener("mousedown", this._onStepInPressed, false);
@@ -107,21 +108,33 @@ ToolbarView.prototype = {
     this._resumeOrderTooltip.setTextContent({ messages: [label], isAlertTooltip: true });
     this._resumeOrderTooltip.show(this._resumeButton);
   },
 
   /**
    * Sets the resume button state based on the debugger active thread.
    *
    * @param string aState
-   *        Either "paused" or "attached".
+   *        Either "paused", "attached", or "breakOnNext".
    * @param boolean hasLocation
    *        True if we are paused at a specific JS location
    */
   toggleResumeButtonState: function(aState, hasLocation) {
+    // Intermidiate state after pressing the pause button and waiting
+    // for the next script execution to happen.
+    if (aState == "breakOnNext") {
+      this._resumeButton.setAttribute("break-on-next", "true");
+      this._resumeButton.disabled = true;
+      this._resumeButton.setAttribute("tooltiptext", this._pausePendingTooltip);
+      return;
+    }
+
+    this._resumeButton.removeAttribute("break-on-next");
+    this._resumeButton.disabled = false;
+
     // If we're paused, check and show a resume label on the button.
     if (aState == "paused") {
       this._resumeButton.setAttribute("checked", "true");
       this._resumeButton.setAttribute("tooltiptext", this._resumeTooltip);
 
       // Only enable the stepping buttons if we are paused at a
       // specific location. After bug 789430, we'll always be paused
       // at a location, but currently you can pause the entire engine
@@ -130,28 +143,28 @@ ToolbarView.prototype = {
         this._toggleButtonsState({ enabled: true });
       }
     }
     // If we're attached, do the opposite.
     else if (aState == "attached") {
       this._resumeButton.removeAttribute("checked");
       this._resumeButton.setAttribute("tooltiptext", this._pauseTooltip);
       this._toggleButtonsState({ enabled: false });
-   }
+    }
   },
 
   _toggleButtonsState: function({ enabled }) {
     const buttons = [
       this._stepOutButton,
       this._stepInButton,
       this._stepOverButton
     ];
     for (let button of buttons) {
       button.disabled = !enabled;
-    };
+    }
   },
 
   /**
    * Listener handling the toggle button click event.
    */
   _onTogglePanesPressed: function() {
     DebuggerView.toggleInstrumentsPane({
       visible: DebuggerView.instrumentsPaneHidden,
@@ -159,26 +172,28 @@ ToolbarView.prototype = {
       delayed: true
     });
   },
 
   /**
    * Listener handling the pause/resume button click event.
    */
   _onResumePressed: function() {
-    if (this.StackFrames._currentFrameDescription != FRAME_TYPE.NORMAL) {
+    if (this.StackFrames._currentFrameDescription != FRAME_TYPE.NORMAL ||
+        this._resumeButton.disabled) {
       return;
     }
 
     if (this.activeThread.paused) {
       this.StackFrames.currentFrameDepth = -1;
       this.activeThread.resume(this.resumptionWarnFunc);
     } else {
       this.ThreadState.interruptedByResumeButton = true;
-      this.activeThread.interrupt();
+      this.toggleResumeButtonState("breakOnNext");
+      this.activeThread.breakOnNext();
     }
   },
 
   /**
    * Listener handling the step over button click event.
    */
   _onStepOverPressed: function() {
     if (this.activeThread.paused && !this._stepOverButton.disabled) {
diff --git a/browser/devtools/framework/gDevTools.jsm b/browser/devtools/framework/gDevTools.jsm
--- a/browser/devtools/framework/gDevTools.jsm
+++ b/browser/devtools/framework/gDevTools.jsm
@@ -878,31 +878,31 @@ let gDevToolsBrowser = {
       gDevTools.showToolbox(target, "jsdebugger").then(toolbox => {
         let threadClient = toolbox.getCurrentPanel().panelWin.gThreadClient;
 
         // Break in place, which means resuming the debuggee thread and pausing
         // right before the next step happens.
         switch (threadClient.state) {
           case "paused":
             // When the debugger is already paused.
-            threadClient.breakOnNext();
+            threadClient.resumeThenPause();
             aCallback();
             break;
           case "attached":
             // When the debugger is already open.
             threadClient.interrupt(() => {
-              threadClient.breakOnNext();
+              threadClient.resumeThenPause();
               aCallback();
             });
             break;
           case "resuming":
             // The debugger is newly opened.
             threadClient.addOneTimeListener("resumed", () => {
               threadClient.interrupt(() => {
-                threadClient.breakOnNext();
+                threadClient.resumeThenPause();
                 aCallback();
               });
             });
             break;
           default:
             throw Error("invalid thread client state in slow script debug handler: " +
                         threadClient.state);
           }
diff --git a/browser/locales/en-US/chrome/browser/devtools/debugger.properties b/browser/locales/en-US/chrome/browser/devtools/debugger.properties
--- a/browser/locales/en-US/chrome/browser/devtools/debugger.properties
+++ b/browser/locales/en-US/chrome/browser/devtools/debugger.properties
@@ -41,21 +41,25 @@ debuggerMenu.accesskey=D
 # LOCALIZATION NOTE (collapsePanes): This is the tooltip for the button
 # that collapses the left and right panes in the debugger UI.
 collapsePanes=Collapse panes
 
 # LOCALIZATION NOTE (expandPanes): This is the tooltip for the button
 # that expands the left and right panes in the debugger UI.
 expandPanes=Expand panes
 
-# LOCALIZATION NOTE (pauseLabel): The label that is displayed on the pause
+# LOCALIZATION NOTE (pauseButtonTooltip): The tooltip that is displayed for the pause
 # button when the debugger is in a running state.
 pauseButtonTooltip=Click to pause (%S)
 
-# LOCALIZATION NOTE (resumeLabel): The label that is displayed on the pause
+# LOCALIZATION NOTE (pausePendingButtonTooltip): The tooltip that is displayed for
+# the pause button after it's been clicked but before the next JavaScript to run.
+pausePendingButtonTooltip=Waiting for next execution
+
+# LOCALIZATION NOTE (resumeButtonTooltip): The label that is displayed on the pause
 # button when the debugger is in a paused state.
 resumeButtonTooltip=Click to resume (%S)
 
 # LOCALIZATION NOTE (startTracingTooltip): The label that is displayed on the trace
 # button when execution tracing is stopped.
 startTracingTooltip=Click to start tracing
 
 # LOCALIZATION NOTE (stopTracingTooltip): The label that is displayed on the trace
diff --git a/browser/themes/shared/devtools/debugger.css b/browser/themes/shared/devtools/debugger.css
--- a/browser/themes/shared/devtools/debugger.css
+++ b/browser/themes/shared/devtools/debugger.css
@@ -576,17 +576,22 @@
   }
 }
 
 #debugger-controls toolbarbutton {
   transition: opacity 0.15s ease-in-out;
 }
 
 #debugger-controls toolbarbutton[disabled] {
-    opacity: .5;
+  opacity: .5;
+  transition: none;
+}
+
+#resume[break-on-next] {
+  background: var(--theme-highlight-blue);
 }
 
 #step-over {
   list-style-image: url(debugger-step-over.png);
 }
 
 #step-in {
   list-style-image: url(debugger-step-in.png);
diff --git a/toolkit/devtools/client/main.js b/toolkit/devtools/client/main.js
--- a/toolkit/devtools/client/main.js
+++ b/toolkit/devtools/client/main.js
@@ -956,16 +956,19 @@ DebuggerClient.prototype = {
         let resumption = { from: thread._actor, type: "resumed" };
         thread._onThreadState(resumption);
       }
     }
 
     // Only try to notify listeners on events, not responses to requests
     // that lack a packet type.
     if (aPacket.type) {
+      if (aPacket.type != "consoleAPICall") {
+        console.log("Emitting packet of type", aPacket.type, aPacket);
+      }
       this.emit(aPacket.type, aPacket);
     }
 
     if (activeRequest) {
       let emitReply = () => activeRequest.emit("json-reply", aPacket);
       if (activeRequest.stack) {
         Cu.callFunctionWithAsyncStack(emitReply, activeRequest.stack,
                                       "DevTools RDP");
@@ -1656,17 +1659,17 @@ ThreadClient.prototype = {
   },
 
   /**
    * Resume then pause without stepping.
    *
    * @param function aOnResponse
    *        Called with the response packet.
    */
-  breakOnNext: function (aOnResponse) {
+  resumeThenPause: function (aOnResponse) {
     this._doResume({ type: "break" }, aOnResponse);
   },
 
   /**
    * Step over a function call.
    *
    * @param function aOnResponse
    *        Called with the response packet.
@@ -1691,23 +1694,44 @@ ThreadClient.prototype = {
    * @param function aOnResponse
    *        Called with the response packet.
    */
   stepOut: function (aOnResponse) {
     this._doResume({ type: "finish" }, aOnResponse);
   },
 
   /**
+   * Immediately interrupt a running thread.
+   *
+   * @param function aOnResponse
+   *        Called with the response packet.
+   */
+  interrupt: function(aOnResponse) {
+    this._doInterrupt(null, aOnResponse);
+  },
+
+  /**
+   * Pause execution right before the next JavaScript bytecode is executed.
+   *
+   * @param function aOnResponse
+   *        Called with the response packet.
+   */
+  breakOnNext: function(aOnResponse) {
+    this._doInterrupt("onNext", aOnResponse);
+  },
+
+  /**
    * Interrupt a running thread.
    *
    * @param function aOnResponse
    *        Called with the response packet.
    */
-  interrupt: DebuggerClient.requester({
-    type: "interrupt"
+  _doInterrupt: DebuggerClient.requester({
+    type: "interrupt",
+    when: args(0)
   }, {
     telemetry: "INTERRUPT"
   }),
 
   /**
    * Enable or disable pausing when an exception is thrown.
    *
    * @param boolean aFlag
@@ -1726,17 +1750,17 @@ ThreadClient.prototype = {
     if (this.paused) {
       this.reconfigure({
         pauseOnExceptions: aPauseOnExceptions,
         ignoreCaughtExceptions: aIgnoreCaughtExceptions
       }, aOnResponse);
       return;
     }
     // Otherwise send the flag using a standard resume request.
-    this.interrupt(aResponse => {
+    this._doInterrupt(null, aResponse => {
       if (aResponse.error) {
         // Can't continue if pausing failed.
         aOnResponse(aResponse);
         return;
       }
       this.resume(aOnResponse);
     });
   },
@@ -1757,17 +1781,17 @@ ThreadClient.prototype = {
     this._pauseOnDOMEvents = events;
     // If the debuggee is paused, the value of the array will be communicated in
     // the next resumption. Otherwise we have to force a pause in order to send
     // the array.
     if (this.paused) {
       DevToolsUtils.executeSoon(() => onResponse({}));
       return;
     }
-    this.interrupt(response => {
+    this._doInterrupt(null, response => {
       // Can't continue if pausing failed.
       if (response.error) {
         onResponse(response);
         return;
       }
       this.resume(onResponse);
     });
   },
@@ -2787,17 +2811,17 @@ SourceClient.prototype = {
     };
 
     // If the debuggee is paused, just set the breakpoint.
     if (this._activeThread.paused) {
       doSetBreakpoint();
       return;
     }
     // Otherwise, force a pause in order to set the breakpoint.
-    this._activeThread.interrupt(aResponse => {
+    this._activeThread._doInterrupt(null, aResponse => {
       if (aResponse.error) {
         // Can't set the breakpoint if pausing failed.
         aOnResponse(aResponse);
         return;
       }
 
       const { type, why } = aResponse;
       const cleanUp = type == "paused" && why.type == "interrupted"
diff --git a/toolkit/devtools/server/actors/script.js b/toolkit/devtools/server/actors/script.js
--- a/toolkit/devtools/server/actors/script.js
+++ b/toolkit/devtools/server/actors/script.js
@@ -1029,18 +1029,17 @@ ThreadActor.prototype = {
         this._options.pauseOnExceptions = aRequest.pauseOnExceptions;
         this._options.ignoreCaughtExceptions = aRequest.ignoreCaughtExceptions;
         this.maybePauseOnExceptions();
         this._maybeListenToEvents(aRequest);
       }
 
       let packet = this._resumed();
       this._popThreadPause();
-      // Tell anyone who cares of the resume (as of now, that's the xpcshell
-      // harness)
+      // Tell subscribers about the resume (used by tool frontends and tests)
       if (Services.obs) {
         Services.obs.notifyObservers(this, "devtools-thread-resumed", null);
       }
       return packet;
     }, error => {
       return error instanceof Error
         ? { error: "unknownError",
             message: DevToolsUtils.safeErrorString(error) }
@@ -1370,17 +1369,30 @@ ThreadActor.prototype = {
       return { type: "paused", why: { type: "alreadyPaused" } };
     } else if (this.state != "running") {
       return { error: "wrongState",
                message: "Received interrupt request in " + this.state +
                         " state." };
     }
 
     try {
-      // Put ourselves in the paused state.
+      // If execution should pause just before the next JavaScript bytecode is
+      // executed, just set an onEnterFrame handler.
+      if (aRequest.when == "onNext") {
+        let pauseAndRespond = this._pauseAndRespond.bind(this);
+        let onEnterFrame = function(aFrame) {
+          return pauseAndRespond(aFrame, { type: "interrupted", onNext: true });
+        };
+        this.dbg.onEnterFrame = onEnterFrame;
+
+        return { type: "willInterrupt" };
+      }
+
+      // If execution should pause immediately, just put ourselves in the paused
+      // state.
       let packet = this._paused();
       if (!packet) {
         return { error: "notInterrupted" };
       }
       packet.why = { type: "interrupted" };
 
       // Send the response to the interrupt request now (rather than
       // returning it), because we're going to start a nested event loop
