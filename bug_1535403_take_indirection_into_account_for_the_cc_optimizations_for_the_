# HG changeset patch
# User Andrew McCreight <continuation@gmail.com>
# Date 1555540919 25200
#      Wed Apr 17 15:41:59 2019 -0700
# Node ID b76ee9ac8eddfdd210799ea04a5be8514fcaf9e2
# Parent  02b89c29412b6c1444fe32a4847e5261e2bb3d00
Bug 1535403 - Take indirection into account for the CC optimizations for the outer window wrapper.

Most wrapper cached C++ objects are held alive by their wrapper. The
cycle collector takes advantage of this in many classes and ignores
the C++ object if the wrapper is marked black.

However, this is not true for the outer window's wrapper. Instead, the
outer window's wrapper keeps the inner window alive. The inner window
usually keeps its outer window alive, but not after it has been
unlinked. For reasons I do not yet understand, the outer window's
wrapper can be kept alive after the inner window it is a proxy for is
unlinked.

This patch fixes the cycle collector optimization for the outer window
by only applying it if the outer window still has a weak reference to
the inner window, which it will until the inner no longer holds the
outer alive. This in turn fixes, or at least helps fix, window leaks
seen intermittently when the lifetime of outer windows and docshells
are tied together.

Differential Revision: https://phabricator.services.mozilla.com//D27981

diff --git a/dom/base/nsGlobalWindowOuter.cpp b/dom/base/nsGlobalWindowOuter.cpp
--- a/dom/base/nsGlobalWindowOuter.cpp
+++ b/dom/base/nsGlobalWindowOuter.cpp
@@ -1459,18 +1459,21 @@ NS_IMPL_CYCLE_COLLECTION_TRACE_BEGIN(nsG
   NS_IMPL_CYCLE_COLLECTION_TRACE_PRESERVED_WRAPPER
 NS_IMPL_CYCLE_COLLECTION_TRACE_END
 
 bool nsGlobalWindowOuter::IsBlackForCC(bool aTracingNeeded) {
   if (!nsCCUncollectableMarker::sGeneration) {
     return false;
   }
 
+  // The outer window wrapper is actually a proxy for the inner
+  // window, so it will only hold the outer window alive indirectly
+  // via the inner window.
   return (nsCCUncollectableMarker::InGeneration(GetMarkedCCGeneration()) ||
-          HasKnownLiveWrapper()) &&
+          (mInnerWindow && HasKnownLiveWrapper())) &&
          (!aTracingNeeded || HasNothingToTrace(ToSupports(this)));
 }
 
 //*****************************************************************************
 // nsGlobalWindowOuter::nsIScriptGlobalObject
 //*****************************************************************************
 
 nsresult nsGlobalWindowOuter::EnsureScriptEnvironment() {
