# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  18859d2fec94f35e924e9093a99169623e0b2d78

diff --git a/toolkit/content/customElements.js b/toolkit/content/customElements.js
--- a/toolkit/content/customElements.js
+++ b/toolkit/content/customElements.js
@@ -29,16 +29,18 @@ window.addEventListener("DOMContentLoade
     } catch (ex) { console.error(ex); }
   }
   gElementsPendingConnection.clear();
 }, { once: true, capture: true });
 
 const gXULDOMParser = new DOMParser();
 gXULDOMParser.forceEnableXULXBL();
 
+const gXULFragmentCache = new Map();
+
 const MozElementMixin = Base => class MozElement extends Base {
   /**
    * Sometimes an element may not want to run connectedCallback logic during
    * parse. This could be because we don't want to initialize the element before
    * the element's contents have been fully parsed, or for performance reasons.
    * If you'd like to opt-in to this, then add this to the beginning of your
    * `connectedCallback` and `disconnectedCallback`:
    *
@@ -82,42 +84,50 @@ const MozElementMixin = Base => class Mo
    * @param {string[]} [entities]
    *        An array of DTD URLs containing entity definitions.
    *
    * @return {DocumentFragment} `DocumentFragment` instance containing
    *         the corresponding element tree, including element nodes
    *         but excluding any text node.
    */
   static parseXULToFragment(str, entities = []) {
-    let doc = gXULDOMParser.parseFromString(`
+    let docString = `
       ${entities.length ? `<!DOCTYPE bindings [
         ${entities.reduce((preamble, url, index) => {
           return preamble + `<!ENTITY % _dtd-${index} SYSTEM "${url}">
             %_dtd-${index};
             `;
         }, "")}
       ]>` : ""}
       <box xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
         ${str}
       </box>
-    `, "application/xml");
+    `;
+    if (gXULFragmentCache.has(docString)) {
+      console.log("GOT A CACHE FOR", docString);
+      return document.importNode(gXULFragmentCache.get(docString), true);
+    }
+
+    let doc = gXULDOMParser.parseFromString(docString, "application/xml");
     // The XUL/XBL parser is set to ignore all-whitespace nodes, whereas (X)HTML
     // does not do this. Most XUL code assumes that the whitespace has been
     // stripped out, so we simply remove all text nodes after using the parser.
     let nodeIterator = doc.createNodeIterator(doc, NodeFilter.SHOW_TEXT);
     let currentNode = nodeIterator.nextNode();
     while (currentNode) {
       currentNode.remove();
       currentNode = nodeIterator.nextNode();
     }
     // We use a range here so that we don't access the inner DOM elements from
     // JavaScript before they are imported and inserted into a document.
     let range = doc.createRange();
     range.selectNodeContents(doc.querySelector("box"));
-    return range.extractContents();
+
+    gXULFragmentCache.set(docString, range.extractContents());
+    return document.importNode(gXULFragmentCache.get(docString), true);
   }
 
   /**
    * Insert a localization link to an FTL file. This is used so that
    * a Custom Element can wait to inject the link until it's connected,
    * and so that consuming documents don't require the correct <link>
    * present in the markup.
    *
