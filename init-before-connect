# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  a8089b1fa5c4f678f64ae07102ee3863a63d8c31
Initialize tabbrowser-tab contents before appending it into the DOM

This prevents a brief flash of unstyled tab content that can be noticed especially
in debug builds.

What happens currently is that we first append child content into the tab
upon connection, then we do attribute inheritance which sets the relevant
styling properties.

With this change we first set up the child content and attributes _before_ appending
the tab into the DOM, so that it's ready to render after being appended.

diff --git a/browser/base/content/tabbrowser-tab.js b/browser/base/content/tabbrowser-tab.js
--- a/browser/base/content/tabbrowser-tab.js
+++ b/browser/base/content/tabbrowser-tab.js
@@ -96,16 +96,20 @@
           </hbox>
         </stack>
       `);
       }
       return this.ownerDocument.importNode(this._fragment, true);
     }
 
     connectedCallback() {
+      this.initialize();
+    }
+
+    initialize() {
       if (this._initialized) {
         return;
       }
 
       this.textContent = "";
       this.appendChild(this.fragment);
       this.initializeAttributeInheritance();
       this.setAttribute("context", "tabContextMenu");
diff --git a/browser/base/content/tabbrowser.js b/browser/base/content/tabbrowser.js
--- a/browser/base/content/tabbrowser.js
+++ b/browser/base/content/tabbrowser.js
@@ -2736,16 +2736,17 @@
           index = Math.min(index, this._numPinnedTabs);
         } else {
           index = Math.max(index, this._numPinnedTabs);
           index = Math.min(index, this.tabs.length);
         }
 
         let tabAfter = this.tabs[index] || null;
         this._invalidateCachedTabs();
+        t.initialize();
         this.tabContainer.insertBefore(t, tabAfter);
         if (tabAfter) {
           this._updateTabsAfterInsert();
         } else {
           t._tPos = index;
         }
 
         if (pinned) {
