# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Parent  aa1a7886af087c5c13cd087ac1c67dac7e553492
try: -b do -p linux,linux64,win32 -u mochitests
Bug 1272942 - Additional logging for browser_aboutCertError.js

MozReview-Commit-ID: 9qc9mVUabmY

diff --git a/browser/base/content/test/general/browser_aboutCertError.js b/browser/base/content/test/general/browser_aboutCertError.js
--- a/browser/base/content/test/general/browser_aboutCertError.js
+++ b/browser/base/content/test/general/browser_aboutCertError.js
@@ -7,16 +7,18 @@
 
 const GOOD_PAGE = "https://example.com/";
 const BAD_CERT = "https://expired.example.com/";
 const UNKNOWN_ISSUER = "https://self-signed.example.com ";
 const BAD_STS_CERT = "https://badchain.include-subdomains.pinning.example.com:443";
 const {TabStateFlusher} = Cu.import("resource:///modules/sessionstore/TabStateFlusher.jsm", {});
 const ss = Cc["@mozilla.org/browser/sessionstore;1"].getService(Ci.nsISessionStore);
 
+SimpleTest.requestCompleteLog();
+
 add_task(function* checkReturnToAboutHome() {
   info("Loading a bad cert page directly and making sure 'return to previous page' goes to about:home");
   let browser;
   let certErrorLoaded;
   let tab = yield BrowserTestUtils.openNewForegroundTab(gBrowser, () => {
     gBrowser.selectedTab = gBrowser.addTab(BAD_CERT);
     browser = gBrowser.selectedBrowser;
     certErrorLoaded = waitForCertErrorLoad(browser);
@@ -217,16 +219,19 @@ add_task(function* checkAdvancedDetails(
     certErrorLoaded = waitForCertErrorLoad(browser);
   }, false);
 
   info("Loading and waiting for the cert error");
   yield certErrorLoaded;
 
   let message = yield ContentTask.spawn(browser, null, function* () {
     let doc = content.document;
+    info("XXXXX Error page HTML: " + doc.documentElement.outerHTML);
+    info("XXXXX advancedButton: " + doc.getElementById("advancedButton"));
+    info("XXXXX readyState: " + doc.readyState);
     let advancedButton = doc.getElementById("advancedButton");
     advancedButton.click();
     let el = doc.getElementById("errorCode");
     return { textContent: el.textContent, tagName: el.tagName };
   });
   is(message.textContent, "SEC_ERROR_EXPIRED_CERTIFICATE",
      "Correct error message found");
   is(message.tagName, "a", "Error message is a link");
@@ -358,19 +363,19 @@ add_task(function* checkUnknownIssuerLea
   });
   ok(href.endsWith("security-error"), "security-error in the Learn More URL");
 
   yield BrowserTestUtils.removeTab(gBrowser.selectedTab);
 });
 
 function waitForCertErrorLoad(browser) {
   return new Promise(resolve => {
-    info("Waiting for DOMContentLoaded event");
-    browser.addEventListener("DOMContentLoaded", function load() {
-      browser.removeEventListener("DOMContentLoaded", load, false, true);
+    info("Waiting for AboutNetErrorLoad event");
+    browser.addEventListener("AboutNetErrorLoad", function load() {
+      browser.removeEventListener("AboutNetErrorLoad", load, false, true);
       resolve();
     }, false, true);
   });
 }
 
 function getCertChain(securityInfoAsString) {
   let certChain = "";
   const serhelper = Cc["@mozilla.org/network/serialization-helper;1"]
